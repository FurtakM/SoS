// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2889 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3196 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 3 , 6 , 9 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 6
 397: PUSH
 398: LD_INT 9
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 51
 852: PUSH
 853: LD_INT 52
 855: PUSH
 856: LD_INT 53
 858: PUSH
 859: LD_INT 54
 861: PUSH
 862: LD_INT 55
 864: PUSH
 865: LD_INT 56
 867: PUSH
 868: LD_INT 57
 870: PUSH
 871: LD_INT 58
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 70
 891: PUSH
 892: LD_INT 71
 894: PUSH
 895: LD_INT 72
 897: PUSH
 898: LD_INT 73
 900: PUSH
 901: LD_INT 68
 903: PUSH
 904: LD_INT 69
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 31
1061: PUSH
1062: LD_INT 49
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 32
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 9 ] ;
1079: LD_ADDR_EXP 34
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 9
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 31
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 32
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 34
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 33
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 30
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 60
1364: PUSH
1365: LD_INT 61
1367: PUSH
1368: LD_INT 62
1370: PUSH
1371: LD_INT 63
1373: PUSH
1374: LD_INT 64
1376: PUSH
1377: LD_INT 65
1379: PUSH
1380: LD_INT 66
1382: PUSH
1383: LD_INT 67
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 1
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 73913 0 2
1411: PUSH
1412: LD_INT 2
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 73913 0 2
1422: PUSH
1423: LD_INT 3
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 73913 0 2
1433: PUSH
1434: LD_INT 4
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 73913 0 2
1444: PUSH
1445: LD_INT 5
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL 73913 0 2
1455: PUSH
1456: LD_INT 6
1458: PPUSH
1459: LD_INT 5
1461: PPUSH
1462: CALL 73913 0 2
1466: PUSH
1467: LD_INT 7
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL 73913 0 2
1477: PUSH
1478: LD_INT 8
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL 73913 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 33785 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 9
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 73746 0 2
1667: PUSH
1668: LD_INT 10
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 73746 0 2
1680: PUSH
1681: LD_INT 11
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 73746 0 2
1693: PUSH
1694: LD_INT 12
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 73746 0 2
1706: PUSH
1707: LD_INT 13
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 73746 0 2
1719: PUSH
1720: LD_INT 14
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 73746 0 2
1732: PUSH
1733: LD_INT 15
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 73746 0 2
1745: PUSH
1746: LD_INT 16
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 73746 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 17
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 73746 0 2
1810: PUSH
1811: LD_INT 18
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 73746 0 2
1823: PUSH
1824: LD_INT 19
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 73746 0 2
1836: PUSH
1837: LD_INT 20
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 73746 0 2
1849: PUSH
1850: LD_INT 21
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 73746 0 2
1862: PUSH
1863: LD_INT 22
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 73746 0 2
1875: PUSH
1876: LD_INT 23
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 73746 0 2
1888: PUSH
1889: LD_INT 24
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 73746 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 25
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 73913 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 26
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 73913 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 41
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 73913 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 27
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: CALL 73913 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 28
2017: PPUSH
2018: LD_INT 4
2020: PPUSH
2021: CALL 73913 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 42
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL 73913 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 29
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 73913 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 30
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL 73913 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 43
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 73913 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 31
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 73913 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 32
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL 73913 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 44
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 73913 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 33
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL 73913 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 34
2167: PPUSH
2168: LD_INT 2
2170: PPUSH
2171: CALL 73913 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 45
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: CALL 73913 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 35
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL 73913 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 36
2217: PPUSH
2218: LD_INT 4
2220: PPUSH
2221: CALL 73913 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 46
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 73913 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 37
2252: PPUSH
2253: LD_INT 3
2255: PPUSH
2256: CALL 73913 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 38
2267: PPUSH
2268: LD_INT 4
2270: PPUSH
2271: CALL 73913 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 47
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: CALL 73913 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 39
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL 73913 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 40
2317: PPUSH
2318: LD_INT 3
2320: PPUSH
2321: CALL 73913 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 48
2332: PPUSH
2333: LD_INT 4
2335: PPUSH
2336: CALL 73913 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2814
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 70
2569: PUSH
2570: LD_INT 71
2572: PUSH
2573: LD_INT 72
2575: PUSH
2576: LD_INT 73
2578: PUSH
2579: LD_INT 68
2581: PUSH
2582: LD_INT 69
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 51
2600: PUSH
2601: LD_INT 52
2603: PUSH
2604: LD_INT 53
2606: PUSH
2607: LD_INT 54
2609: PUSH
2610: LD_INT 55
2612: PUSH
2613: LD_INT 56
2615: PUSH
2616: LD_INT 57
2618: PUSH
2619: LD_INT 58
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// repeat wait ( time ) ;
2695: LD_VAR 0 5
2699: PPUSH
2700: CALL_OW 67
// x := rand ( 1 , 5 ) ;
2704: LD_ADDR_VAR 0 2
2708: PUSH
2709: LD_INT 1
2711: PPUSH
2712: LD_INT 5
2714: PPUSH
2715: CALL_OW 12
2719: ST_TO_ADDR
// for i in areas do
2720: LD_ADDR_VAR 0 1
2724: PUSH
2725: LD_VAR 0 4
2729: PUSH
2730: FOR_IN
2731: IFFALSE 2770
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2733: LD_VAR 0 1
2737: PPUSH
2738: LD_INT 1
2740: PPUSH
2741: CALL_OW 287
2745: PUSH
2746: LD_INT 20
2748: LESS
2749: IFFALSE 2768
// begin CreateCratesArea ( x , i , true ) ;
2751: LD_VAR 0 2
2755: PPUSH
2756: LD_VAR 0 1
2760: PPUSH
2761: LD_INT 1
2763: PPUSH
2764: CALL_OW 55
// end ; end ;
2768: GO 2730
2770: POP
2771: POP
// time := time + delayTime ;
2772: LD_ADDR_VAR 0 5
2776: PUSH
2777: LD_VAR 0 5
2781: PUSH
2782: LD_VAR 0 7
2786: PLUS
2787: ST_TO_ADDR
// if time > maxTime then
2788: LD_VAR 0 5
2792: PUSH
2793: LD_VAR 0 8
2797: GREATER
2798: IFFALSE 2810
// time := normalTime ;
2800: LD_ADDR_VAR 0 5
2804: PUSH
2805: LD_VAR 0 6
2809: ST_TO_ADDR
// until false ;
2810: LD_INT 0
2812: IFFALSE 2695
// end ; end_of_file
2814: PPOPN 8
2816: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2817: LD_VAR 0 1
2821: PPUSH
2822: CALL 10617 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2826: LD_VAR 0 1
2830: PPUSH
2831: CALL 7481 0 1
// end ;
2835: PPOPN 1
2837: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2838: LD_VAR 0 1
2842: PPUSH
2843: CALL 10634 0 1
// end ;
2847: PPOPN 1
2849: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2850: LD_VAR 0 1
2854: PPUSH
2855: LD_VAR 0 2
2859: PPUSH
2860: CALL 10675 0 2
2864: PPOPN 2
2866: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2867: LD_VAR 0 1
2871: PPUSH
2872: LD_VAR 0 2
2876: PPUSH
2877: LD_VAR 0 3
2881: PPUSH
2882: CALL 7980 0 3
2886: PPOPN 3
2888: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull ; export function InitMultiplayer ; var i ; begin
2889: LD_INT 0
2891: PPUSH
2892: PPUSH
// disable ( mpActive ) ;
2893: LD_INT 100
2895: DISABLE_MARKED
// disable ( mpWin ) ;
2896: LD_INT 101
2898: DISABLE_MARKED
// disable ( mpLose ) ;
2899: LD_INT 102
2901: DISABLE_MARKED
// mpGameType := 0 ;
2902: LD_ADDR_EXP 1
2906: PUSH
2907: LD_INT 0
2909: ST_TO_ADDR
// mpGameSettings := [ ] ;
2910: LD_ADDR_EXP 4
2914: PUSH
2915: EMPTY
2916: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2917: LD_ADDR_EXP 2
2921: PUSH
2922: EMPTY
2923: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2924: LD_ADDR_EXP 3
2928: PUSH
2929: EMPTY
2930: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2931: LD_ADDR_EXP 27
2935: PUSH
2936: LD_INT 2
2938: PUSH
2939: LD_INT 2
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2946: LD_ADDR_EXP 10
2950: PUSH
2951: EMPTY
2952: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2953: LD_ADDR_EXP 11
2957: PUSH
2958: EMPTY
2959: ST_TO_ADDR
// mpDepots := [ ] ;
2960: LD_ADDR_EXP 12
2964: PUSH
2965: EMPTY
2966: ST_TO_ADDR
// mpBuildings := [ ] ;
2967: LD_ADDR_EXP 15
2971: PUSH
2972: EMPTY
2973: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2974: LD_ADDR_EXP 16
2978: PUSH
2979: EMPTY
2980: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2981: LD_ADDR_EXP 17
2985: PUSH
2986: EMPTY
2987: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2988: LD_ADDR_EXP 18
2992: PUSH
2993: EMPTY
2994: ST_TO_ADDR
// mpStartingResources := [ ] ;
2995: LD_ADDR_EXP 13
2999: PUSH
3000: EMPTY
3001: ST_TO_ADDR
// mpStartPos := [ ] ;
3002: LD_ADDR_EXP 19
3006: PUSH
3007: EMPTY
3008: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3009: LD_ADDR_EXP 20
3013: PUSH
3014: LD_INT 1
3016: NEG
3017: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3018: LD_ADDR_EXP 21
3022: PUSH
3023: EMPTY
3024: ST_TO_ADDR
// mpApemans := [ ] ;
3025: LD_ADDR_EXP 28
3029: PUSH
3030: EMPTY
3031: ST_TO_ADDR
// mpApemansArea := [ ] ;
3032: LD_ADDR_EXP 29
3036: PUSH
3037: EMPTY
3038: ST_TO_ADDR
// mpRespawn := [ ] ;
3039: LD_ADDR_EXP 30
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// mpKingArea := 0 ;
3046: LD_ADDR_EXP 31
3050: PUSH
3051: LD_INT 0
3053: ST_TO_ADDR
// mpPoints := [ ] ;
3054: LD_ADDR_EXP 32
3058: PUSH
3059: EMPTY
3060: ST_TO_ADDR
// mpVehicles := 0 ;
3061: LD_ADDR_EXP 33
3065: PUSH
3066: LD_INT 0
3068: ST_TO_ADDR
// mpShipments := 0 ;
3069: LD_ADDR_EXP 25
3073: PUSH
3074: LD_INT 0
3076: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3077: LD_ADDR_EXP 37
3081: PUSH
3082: EMPTY
3083: PUSH
3084: EMPTY
3085: PUSH
3086: EMPTY
3087: PUSH
3088: EMPTY
3089: PUSH
3090: EMPTY
3091: PUSH
3092: EMPTY
3093: PUSH
3094: EMPTY
3095: PUSH
3096: EMPTY
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: LIST
3107: ST_TO_ADDR
// mpEmissions := 0 ;
3108: LD_ADDR_EXP 34
3112: PUSH
3113: LD_INT 0
3115: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3116: LD_ADDR_EXP 23
3120: PUSH
3121: LD_INT 3
3123: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3124: LD_ADDR_EXP 22
3128: PUSH
3129: LD_INT 15
3131: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3132: LD_ADDR_EXP 35
3136: PUSH
3137: LD_INT 0
3139: ST_TO_ADDR
// mpGameActive := false ;
3140: LD_ADDR_EXP 36
3144: PUSH
3145: LD_INT 0
3147: ST_TO_ADDR
// for i := 1 to 32 do
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: DOUBLE
3154: LD_INT 1
3156: DEC
3157: ST_TO_ADDR
3158: LD_INT 32
3160: PUSH
3161: FOR_TO
3162: IFFALSE 3189
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3164: LD_ADDR_EXP 4
3168: PUSH
3169: LD_EXP 4
3173: PPUSH
3174: LD_VAR 0 2
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 1
3186: ST_TO_ADDR
3187: GO 3161
3189: POP
3190: POP
// end ;
3191: LD_VAR 0 1
3195: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3196: LD_INT 0
3198: PPUSH
3199: PPUSH
3200: PPUSH
3201: PPUSH
3202: PPUSH
3203: PPUSH
3204: PPUSH
3205: PPUSH
3206: PPUSH
3207: PPUSH
3208: PPUSH
3209: PPUSH
3210: PPUSH
3211: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3212: LD_ADDR_VAR 0 14
3216: PUSH
3217: LD_INT 1
3219: PUSH
3220: LD_INT 2
3222: PUSH
3223: LD_INT 3
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: LIST
3230: ST_TO_ADDR
// for i in gameTypes do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_VAR 0 14
3240: PUSH
3241: FOR_IN
3242: IFFALSE 3251
// disable ( i ) ;
3244: LD_VAR 0 2
3248: DISABLE_MARKED
3249: GO 3241
3251: POP
3252: POP
// if Multiplayer then
3253: LD_OWVAR 4
3257: IFFALSE 3441
// begin mpGameType := mp_game_type ;
3259: LD_ADDR_EXP 1
3263: PUSH
3264: LD_OWVAR 6
3268: ST_TO_ADDR
// your_side := mp_player_side ;
3269: LD_ADDR_OWVAR 2
3273: PUSH
3274: LD_OWVAR 7
3278: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3279: LD_ADDR_EXP 5
3283: PUSH
3284: LD_OWVAR 17
3288: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3289: LD_ADDR_EXP 6
3293: PUSH
3294: LD_OWVAR 15
3298: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3299: LD_ADDR_EXP 7
3303: PUSH
3304: LD_OWVAR 16
3308: ST_TO_ADDR
// mpTeams := mp_teams ;
3309: LD_ADDR_EXP 8
3313: PUSH
3314: LD_OWVAR 12
3318: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3319: LD_ADDR_VAR 0 2
3323: PUSH
3324: DOUBLE
3325: LD_INT 1
3327: DEC
3328: ST_TO_ADDR
3329: LD_EXP 2
3333: PPUSH
3334: CALL 33785 0 1
3338: PUSH
3339: FOR_TO
3340: IFFALSE 3416
// begin setting := mpGameSettingsKeys [ i ] ;
3342: LD_ADDR_VAR 0 12
3346: PUSH
3347: LD_EXP 2
3351: PUSH
3352: LD_VAR 0 2
3356: ARRAY
3357: ST_TO_ADDR
// if setting then
3358: LD_VAR 0 12
3362: IFFALSE 3414
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3364: LD_ADDR_EXP 4
3368: PUSH
3369: LD_EXP 4
3373: PPUSH
3374: LD_VAR 0 2
3378: PPUSH
3379: LD_EXP 3
3383: PUSH
3384: LD_VAR 0 2
3388: ARRAY
3389: PUSH
3390: LD_VAR 0 2
3394: PUSH
3395: LD_INT 1
3397: MINUS
3398: PPUSH
3399: CALL_OW 426
3403: PUSH
3404: LD_INT 1
3406: PLUS
3407: ARRAY
3408: PPUSH
3409: CALL_OW 1
3413: ST_TO_ADDR
// end ;
3414: GO 3339
3416: POP
3417: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3418: LD_ADDR_EXP 9
3422: PUSH
3423: LD_EXP 6
3427: PUSH
3428: LD_INT 0
3430: PUSH
3431: EMPTY
3432: LIST
3433: DIFF
3434: PUSH
3435: LD_INT 1
3437: GREATER
3438: ST_TO_ADDR
// end else
3439: GO 3441
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3441: LD_EXP 1
3445: PPUSH
3446: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
3450: LD_EXP 16
3454: PPUSH
3455: CALL 33785 0 1
3459: IFFALSE 3490
// begin for i in mpMarkedAreas do
3461: LD_ADDR_VAR 0 2
3465: PUSH
3466: LD_EXP 16
3470: PUSH
3471: FOR_IN
3472: IFFALSE 3488
// SetAreaMapShow ( i , 0 ) ;
3474: LD_VAR 0 2
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL_OW 424
3486: GO 3471
3488: POP
3489: POP
// end ; for i := 1 to 8 do
3490: LD_ADDR_VAR 0 2
3494: PUSH
3495: DOUBLE
3496: LD_INT 1
3498: DEC
3499: ST_TO_ADDR
3500: LD_INT 8
3502: PUSH
3503: FOR_TO
3504: IFFALSE 4720
// begin if not mpSidePositions [ i ] then
3506: LD_EXP 5
3510: PUSH
3511: LD_VAR 0 2
3515: ARRAY
3516: NOT
3517: IFFALSE 3521
// continue ;
3519: GO 3503
// side := i ;
3521: LD_ADDR_VAR 0 7
3525: PUSH
3526: LD_VAR 0 2
3530: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3531: LD_ADDR_VAR 0 9
3535: PUSH
3536: LD_EXP 7
3540: PUSH
3541: LD_VAR 0 2
3545: ARRAY
3546: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3547: LD_ADDR_VAR 0 8
3551: PUSH
3552: LD_EXP 5
3556: PUSH
3557: LD_VAR 0 2
3561: ARRAY
3562: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3563: LD_EXP 10
3567: PPUSH
3568: CALL 33785 0 1
3572: IFFALSE 3649
// begin for j in mpOilDeposits [ pos ] do
3574: LD_ADDR_VAR 0 3
3578: PUSH
3579: LD_EXP 10
3583: PUSH
3584: LD_VAR 0 8
3588: ARRAY
3589: PUSH
3590: FOR_IN
3591: IFFALSE 3647
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3593: LD_VAR 0 3
3597: PUSH
3598: LD_INT 1
3600: ARRAY
3601: PPUSH
3602: LD_VAR 0 3
3606: PUSH
3607: LD_INT 2
3609: ARRAY
3610: PPUSH
3611: LD_INT 2
3613: PPUSH
3614: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3618: LD_VAR 0 3
3622: PUSH
3623: LD_INT 1
3625: ARRAY
3626: PPUSH
3627: LD_VAR 0 3
3631: PUSH
3632: LD_INT 2
3634: ARRAY
3635: PPUSH
3636: LD_VAR 0 7
3640: PPUSH
3641: CALL_OW 441
// end ;
3645: GO 3590
3647: POP
3648: POP
// end ; if Count ( mpSibDeposits ) then
3649: LD_EXP 11
3653: PPUSH
3654: CALL 33785 0 1
3658: IFFALSE 3735
// begin for j in mpSibDeposits [ pos ] do
3660: LD_ADDR_VAR 0 3
3664: PUSH
3665: LD_EXP 11
3669: PUSH
3670: LD_VAR 0 8
3674: ARRAY
3675: PUSH
3676: FOR_IN
3677: IFFALSE 3733
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3679: LD_VAR 0 3
3683: PUSH
3684: LD_INT 1
3686: ARRAY
3687: PPUSH
3688: LD_VAR 0 3
3692: PUSH
3693: LD_INT 2
3695: ARRAY
3696: PPUSH
3697: LD_INT 3
3699: PPUSH
3700: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3704: LD_VAR 0 3
3708: PUSH
3709: LD_INT 1
3711: ARRAY
3712: PPUSH
3713: LD_VAR 0 3
3717: PUSH
3718: LD_INT 2
3720: ARRAY
3721: PPUSH
3722: LD_VAR 0 7
3726: PPUSH
3727: CALL_OW 441
// end ;
3731: GO 3676
3733: POP
3734: POP
// end ; InitBc ;
3735: CALL_OW 21
// InitUc ;
3739: CALL_OW 18
// uc_side := side ;
3743: LD_ADDR_OWVAR 20
3747: PUSH
3748: LD_VAR 0 7
3752: ST_TO_ADDR
// uc_nation := nation ;
3753: LD_ADDR_OWVAR 21
3757: PUSH
3758: LD_VAR 0 9
3762: ST_TO_ADDR
// if Count ( mpDepots ) then
3763: LD_EXP 12
3767: PPUSH
3768: CALL 33785 0 1
3772: IFFALSE 3942
// begin bc_level := 0 ;
3774: LD_ADDR_OWVAR 43
3778: PUSH
3779: LD_INT 0
3781: ST_TO_ADDR
// bc_type := b_depot ;
3782: LD_ADDR_OWVAR 42
3786: PUSH
3787: LD_INT 0
3789: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3790: LD_ADDR_VAR 0 4
3794: PUSH
3795: LD_EXP 12
3799: PUSH
3800: LD_VAR 0 8
3804: ARRAY
3805: PUSH
3806: LD_INT 1
3808: ARRAY
3809: PPUSH
3810: LD_EXP 12
3814: PUSH
3815: LD_VAR 0 8
3819: ARRAY
3820: PUSH
3821: LD_INT 2
3823: ARRAY
3824: PPUSH
3825: LD_EXP 12
3829: PUSH
3830: LD_VAR 0 8
3834: ARRAY
3835: PUSH
3836: LD_INT 3
3838: ARRAY
3839: PPUSH
3840: CALL_OW 47
3844: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3845: LD_VAR 0 4
3849: PPUSH
3850: LD_STRING @
3852: PUSH
3853: LD_VAR 0 7
3857: STR
3858: PPUSH
3859: CALL_OW 500
// SetTag ( b , side ) ;
3863: LD_VAR 0 4
3867: PPUSH
3868: LD_VAR 0 7
3872: PPUSH
3873: CALL_OW 109
// if Count ( mpStartingResources ) then
3877: LD_EXP 13
3881: PPUSH
3882: CALL 33785 0 1
3886: IFFALSE 3940
// begin for j := 1 to mpStartingResources do
3888: LD_ADDR_VAR 0 3
3892: PUSH
3893: DOUBLE
3894: LD_INT 1
3896: DEC
3897: ST_TO_ADDR
3898: LD_EXP 13
3902: PUSH
3903: FOR_TO
3904: IFFALSE 3938
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3906: LD_VAR 0 4
3910: PPUSH
3911: CALL_OW 274
3915: PPUSH
3916: LD_VAR 0 3
3920: PPUSH
3921: LD_EXP 13
3925: PUSH
3926: LD_VAR 0 3
3930: ARRAY
3931: PPUSH
3932: CALL_OW 277
3936: GO 3903
3938: POP
3939: POP
// end ; end else
3940: GO 4089
// if Count ( mpStartingResources ) then
3942: LD_EXP 13
3946: PPUSH
3947: CALL 33785 0 1
3951: IFFALSE 4089
// begin for j := 1 to mpStartingResources do
3953: LD_ADDR_VAR 0 3
3957: PUSH
3958: DOUBLE
3959: LD_INT 1
3961: DEC
3962: ST_TO_ADDR
3963: LD_EXP 13
3967: PUSH
3968: FOR_TO
3969: IFFALSE 4087
// begin resources := mpStartingResources [ j ] ;
3971: LD_ADDR_VAR 0 13
3975: PUSH
3976: LD_EXP 13
3980: PUSH
3981: LD_VAR 0 3
3985: ARRAY
3986: ST_TO_ADDR
// repeat if resources >= 50 then
3987: LD_VAR 0 13
3991: PUSH
3992: LD_INT 50
3994: GREATEREQUAL
3995: IFFALSE 4041
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3997: LD_VAR 0 3
4001: PPUSH
4002: LD_INT 5
4004: PPUSH
4005: LD_VAR 0 5
4009: PPUSH
4010: LD_VAR 0 6
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: LD_INT 0
4020: PPUSH
4021: CALL_OW 60
// resources := resources - 50 ;
4025: LD_ADDR_VAR 0 13
4029: PUSH
4030: LD_VAR 0 13
4034: PUSH
4035: LD_INT 50
4037: MINUS
4038: ST_TO_ADDR
// end else
4039: GO 4075
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
4041: LD_VAR 0 3
4045: PPUSH
4046: LD_VAR 0 13
4050: PUSH
4051: LD_INT 10
4053: DIV
4054: PPUSH
4055: LD_VAR 0 5
4059: PPUSH
4060: LD_VAR 0 6
4064: PPUSH
4065: LD_INT 4
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 60
// until resources <= 0 ;
4075: LD_VAR 0 13
4079: PUSH
4080: LD_INT 0
4082: LESSEQUAL
4083: IFFALSE 3987
// end ;
4085: GO 3968
4087: POP
4088: POP
// end ; if Count ( mpBuildings ) then
4089: LD_EXP 15
4093: PPUSH
4094: CALL 33785 0 1
4098: IFFALSE 4176
// begin for j in mpBuildings [ pos ] do
4100: LD_ADDR_VAR 0 3
4104: PUSH
4105: LD_EXP 15
4109: PUSH
4110: LD_VAR 0 8
4114: ARRAY
4115: PUSH
4116: FOR_IN
4117: IFFALSE 4174
// begin bc_level := 0 ;
4119: LD_ADDR_OWVAR 43
4123: PUSH
4124: LD_INT 0
4126: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4127: LD_ADDR_OWVAR 42
4131: PUSH
4132: LD_VAR 0 3
4136: PUSH
4137: LD_INT 1
4139: ARRAY
4140: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4141: LD_VAR 0 3
4145: PUSH
4146: LD_INT 2
4148: ARRAY
4149: PPUSH
4150: LD_VAR 0 3
4154: PUSH
4155: LD_INT 3
4157: ARRAY
4158: PPUSH
4159: LD_VAR 0 3
4163: PUSH
4164: LD_INT 4
4166: ARRAY
4167: PPUSH
4168: CALL_OW 47
// end ;
4172: GO 4116
4174: POP
4175: POP
// end ; if mpBattleFlag > - 1 then
4176: LD_EXP 20
4180: PUSH
4181: LD_INT 1
4183: NEG
4184: GREATER
4185: IFFALSE 4344
// begin x := mpStartPos [ pos ] [ 1 ] ;
4187: LD_ADDR_VAR 0 5
4191: PUSH
4192: LD_EXP 19
4196: PUSH
4197: LD_VAR 0 8
4201: ARRAY
4202: PUSH
4203: LD_INT 1
4205: ARRAY
4206: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4207: LD_ADDR_VAR 0 6
4211: PUSH
4212: LD_EXP 19
4216: PUSH
4217: LD_VAR 0 8
4221: ARRAY
4222: PUSH
4223: LD_INT 2
4225: ARRAY
4226: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4227: LD_VAR 0 5
4231: PPUSH
4232: LD_VAR 0 6
4236: PPUSH
4237: LD_INT 12
4239: PPUSH
4240: LD_INT 2
4242: PPUSH
4243: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4247: LD_ADDR_EXP 21
4251: PUSH
4252: LD_EXP 21
4256: PPUSH
4257: LD_VAR 0 7
4261: PPUSH
4262: LD_VAR 0 7
4266: PPUSH
4267: LD_VAR 0 5
4271: PPUSH
4272: LD_VAR 0 6
4276: PPUSH
4277: LD_INT 1
4279: PUSH
4280: LD_INT 100
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PUSH
4287: LD_INT 2
4289: PUSH
4290: LD_INT 70
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: LD_INT 3
4299: PUSH
4300: LD_INT 40
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PUSH
4307: LD_INT 10
4309: PUSH
4310: LD_INT 25
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: LD_INT 20
4319: PUSH
4320: LD_INT 100
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: PPUSH
4334: CALL_OW 418
4338: PPUSH
4339: CALL_OW 1
4343: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4344: LD_EXP 24
4348: PUSH
4349: LD_INT 20
4351: PPUSH
4352: LD_VAR 0 7
4356: PPUSH
4357: CALL_OW 321
4361: PUSH
4362: LD_INT 1
4364: EQUAL
4365: AND
4366: IFFALSE 4383
// SetTech ( tech_SibDet , side , state_researched ) ;
4368: LD_INT 20
4370: PPUSH
4371: LD_VAR 0 7
4375: PPUSH
4376: LD_INT 2
4378: PPUSH
4379: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4383: LD_INT 24
4385: PPUSH
4386: LD_VAR 0 7
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 322
// if mpSibBomb = 1 then
4398: LD_EXP 26
4402: PUSH
4403: LD_INT 1
4405: EQUAL
4406: IFFALSE 4425
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4408: LD_INT 25
4410: PPUSH
4411: LD_VAR 0 7
4415: PPUSH
4416: LD_INT 1
4418: PPUSH
4419: CALL_OW 322
// end else
4423: GO 4440
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4425: LD_INT 25
4427: PPUSH
4428: LD_VAR 0 7
4432: PPUSH
4433: LD_INT 0
4435: PPUSH
4436: CALL_OW 322
// end ; if mpVehicles then
4440: LD_EXP 33
4444: IFFALSE 4543
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4446: LD_ADDR_VAR 0 3
4450: PUSH
4451: LD_VAR 0 7
4455: PPUSH
4456: LD_VAR 0 9
4460: PPUSH
4461: LD_EXP 33
4465: PPUSH
4466: CALL 5402 0 3
4470: PUSH
4471: FOR_IN
4472: IFFALSE 4541
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4474: LD_VAR 0 3
4478: PPUSH
4479: LD_INT 0
4481: PPUSH
4482: LD_INT 5
4484: PPUSH
4485: CALL_OW 12
4489: PPUSH
4490: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4494: LD_VAR 0 3
4498: PPUSH
4499: LD_EXP 19
4503: PUSH
4504: LD_VAR 0 8
4508: ARRAY
4509: PUSH
4510: LD_INT 1
4512: ARRAY
4513: PPUSH
4514: LD_EXP 19
4518: PUSH
4519: LD_VAR 0 8
4523: ARRAY
4524: PUSH
4525: LD_INT 2
4527: ARRAY
4528: PPUSH
4529: LD_INT 12
4531: PPUSH
4532: LD_INT 0
4534: PPUSH
4535: CALL_OW 50
// end ;
4539: GO 4471
4541: POP
4542: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4543: LD_ADDR_VAR 0 11
4547: PUSH
4548: LD_VAR 0 7
4552: PPUSH
4553: LD_VAR 0 9
4557: PPUSH
4558: LD_EXP 22
4562: PPUSH
4563: LD_EXP 23
4567: PPUSH
4568: CALL 5132 0 4
4572: ST_TO_ADDR
// for j in team do
4573: LD_ADDR_VAR 0 3
4577: PUSH
4578: LD_VAR 0 11
4582: PUSH
4583: FOR_IN
4584: IFFALSE 4633
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4586: LD_VAR 0 3
4590: PPUSH
4591: LD_EXP 19
4595: PUSH
4596: LD_VAR 0 8
4600: ARRAY
4601: PUSH
4602: LD_INT 1
4604: ARRAY
4605: PPUSH
4606: LD_EXP 19
4610: PUSH
4611: LD_VAR 0 8
4615: ARRAY
4616: PUSH
4617: LD_INT 2
4619: ARRAY
4620: PPUSH
4621: LD_INT 12
4623: PPUSH
4624: LD_INT 0
4626: PPUSH
4627: CALL_OW 50
4631: GO 4583
4633: POP
4634: POP
// if mpApemans then
4635: LD_EXP 28
4639: IFFALSE 4718
// begin for j := 1 to mpApemans do
4641: LD_ADDR_VAR 0 3
4645: PUSH
4646: DOUBLE
4647: LD_INT 1
4649: DEC
4650: ST_TO_ADDR
4651: LD_EXP 28
4655: PUSH
4656: FOR_TO
4657: IFFALSE 4716
// begin PrepareApeman ( - 5 ) ;
4659: LD_INT 5
4661: NEG
4662: PPUSH
4663: CALL 65642 0 1
// ape := CreateHuman ;
4667: LD_ADDR_VAR 0 10
4671: PUSH
4672: CALL_OW 44
4676: ST_TO_ADDR
// SetTag ( ape , side ) ;
4677: LD_VAR 0 10
4681: PPUSH
4682: LD_VAR 0 7
4686: PPUSH
4687: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4691: LD_VAR 0 10
4695: PPUSH
4696: LD_EXP 29
4700: PUSH
4701: LD_VAR 0 8
4705: ARRAY
4706: PPUSH
4707: LD_INT 0
4709: PPUSH
4710: CALL_OW 49
// end ;
4714: GO 4656
4716: POP
4717: POP
// end ; end ;
4718: GO 3503
4720: POP
4721: POP
// if not mpTeamGame then
4722: LD_EXP 9
4726: NOT
4727: IFFALSE 4825
// begin for i := 1 to 8 do
4729: LD_ADDR_VAR 0 2
4733: PUSH
4734: DOUBLE
4735: LD_INT 1
4737: DEC
4738: ST_TO_ADDR
4739: LD_INT 8
4741: PUSH
4742: FOR_TO
4743: IFFALSE 4821
// for j := 1 to 8 do
4745: LD_ADDR_VAR 0 3
4749: PUSH
4750: DOUBLE
4751: LD_INT 1
4753: DEC
4754: ST_TO_ADDR
4755: LD_INT 8
4757: PUSH
4758: FOR_TO
4759: IFFALSE 4817
// if i <> j then
4761: LD_VAR 0 2
4765: PUSH
4766: LD_VAR 0 3
4770: NONEQUAL
4771: IFFALSE 4795
// SetAttitude ( i , j , att_neutral , true ) else
4773: LD_VAR 0 2
4777: PPUSH
4778: LD_VAR 0 3
4782: PPUSH
4783: LD_INT 0
4785: PPUSH
4786: LD_INT 1
4788: PPUSH
4789: CALL_OW 80
4793: GO 4815
// SetAttitude ( i , j , att_friend , true ) ;
4795: LD_VAR 0 2
4799: PPUSH
4800: LD_VAR 0 3
4804: PPUSH
4805: LD_INT 1
4807: PPUSH
4808: LD_INT 1
4810: PPUSH
4811: CALL_OW 80
4815: GO 4758
4817: POP
4818: POP
4819: GO 4742
4821: POP
4822: POP
// end else
4823: GO 4894
// begin if mpSharedVision then
4825: LD_EXP 14
4829: IFFALSE 4894
// begin for i in mpTeams do
4831: LD_ADDR_VAR 0 2
4835: PUSH
4836: LD_EXP 8
4840: PUSH
4841: FOR_IN
4842: IFFALSE 4892
// for j := 2 to i do
4844: LD_ADDR_VAR 0 3
4848: PUSH
4849: DOUBLE
4850: LD_INT 2
4852: DEC
4853: ST_TO_ADDR
4854: LD_VAR 0 2
4858: PUSH
4859: FOR_TO
4860: IFFALSE 4888
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4862: LD_VAR 0 2
4866: PUSH
4867: LD_VAR 0 3
4871: ARRAY
4872: PPUSH
4873: LD_VAR 0 2
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: PPUSH
4882: CALL_OW 343
4886: GO 4859
4888: POP
4889: POP
4890: GO 4841
4892: POP
4893: POP
// end ; end ; for i := 1 to 8 do
4894: LD_ADDR_VAR 0 2
4898: PUSH
4899: DOUBLE
4900: LD_INT 1
4902: DEC
4903: ST_TO_ADDR
4904: LD_INT 8
4906: PUSH
4907: FOR_TO
4908: IFFALSE 4998
// for j := 1 to 8 do
4910: LD_ADDR_VAR 0 3
4914: PUSH
4915: DOUBLE
4916: LD_INT 1
4918: DEC
4919: ST_TO_ADDR
4920: LD_INT 8
4922: PUSH
4923: FOR_TO
4924: IFFALSE 4994
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4926: LD_EXP 6
4930: PUSH
4931: LD_VAR 0 2
4935: ARRAY
4936: PUSH
4937: LD_EXP 6
4941: PUSH
4942: LD_VAR 0 3
4946: ARRAY
4947: EQUAL
4948: IFFALSE 4972
// SetAttitude ( i , j , att_friend , true ) else
4950: LD_VAR 0 2
4954: PPUSH
4955: LD_VAR 0 3
4959: PPUSH
4960: LD_INT 1
4962: PPUSH
4963: LD_INT 1
4965: PPUSH
4966: CALL_OW 80
4970: GO 4992
// SetAttitude ( i , j , att_enemy , true ) ;
4972: LD_VAR 0 2
4976: PPUSH
4977: LD_VAR 0 3
4981: PPUSH
4982: LD_INT 2
4984: PPUSH
4985: LD_INT 1
4987: PPUSH
4988: CALL_OW 80
4992: GO 4923
4994: POP
4995: POP
4996: GO 4907
4998: POP
4999: POP
// music_nat := mpSideNations [ your_side ] ;
5000: LD_ADDR_OWVAR 71
5004: PUSH
5005: LD_EXP 7
5009: PUSH
5010: LD_OWVAR 2
5014: ARRAY
5015: ST_TO_ADDR
// if IAmSpec then
5016: CALL_OW 531
5020: IFFALSE 5061
// begin FogOff ( true ) ;
5022: LD_INT 1
5024: PPUSH
5025: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5029: LD_EXP 27
5033: PUSH
5034: LD_INT 1
5036: ARRAY
5037: PUSH
5038: LD_INT 2
5040: DIV
5041: PPUSH
5042: LD_EXP 27
5046: PUSH
5047: LD_INT 2
5049: ARRAY
5050: PUSH
5051: LD_INT 2
5053: DIV
5054: PPUSH
5055: CALL_OW 86
// end else
5059: GO 5107
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5061: LD_EXP 19
5065: PUSH
5066: LD_EXP 5
5070: PUSH
5071: LD_OWVAR 2
5075: ARRAY
5076: ARRAY
5077: PUSH
5078: LD_INT 1
5080: ARRAY
5081: PPUSH
5082: LD_EXP 19
5086: PUSH
5087: LD_EXP 5
5091: PUSH
5092: LD_OWVAR 2
5096: ARRAY
5097: ARRAY
5098: PUSH
5099: LD_INT 2
5101: ARRAY
5102: PPUSH
5103: CALL_OW 86
// end ; BeginBuildUp ;
5107: CALL 5880 0 0
// enable ( mpActive ) ;
5111: LD_INT 100
5113: ENABLE_MARKED
// enable ( mpGameType ) ;
5114: LD_EXP 1
5118: ENABLE_MARKED
// mpGameActive := true ;
5119: LD_ADDR_EXP 36
5123: PUSH
5124: LD_INT 1
5126: ST_TO_ADDR
// end ;
5127: LD_VAR 0 1
5131: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , class ; begin
5132: LD_INT 0
5134: PPUSH
5135: PPUSH
5136: PPUSH
// result := [ ] ;
5137: LD_ADDR_VAR 0 5
5141: PUSH
5142: EMPTY
5143: ST_TO_ADDR
// class := class_soldier ;
5144: LD_ADDR_VAR 0 7
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// uc_side := side ;
5152: LD_ADDR_OWVAR 20
5156: PUSH
5157: LD_VAR 0 1
5161: ST_TO_ADDR
// uc_nation := nation ;
5162: LD_ADDR_OWVAR 21
5166: PUSH
5167: LD_VAR 0 2
5171: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5172: LD_ADDR_OWVAR 26
5176: PUSH
5177: LD_OWVAR 19
5181: PUSH
5182: LD_VAR 0 1
5186: ARRAY
5187: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5188: LD_INT 1
5190: PPUSH
5191: LD_INT 2
5193: PPUSH
5194: CALL_OW 12
5198: PPUSH
5199: LD_VAR 0 7
5203: PPUSH
5204: LD_VAR 0 4
5208: PUSH
5209: LD_INT 2
5211: PLUS
5212: PPUSH
5213: CALL_OW 380
// hc_importance := 105 ;
5217: LD_ADDR_OWVAR 32
5221: PUSH
5222: LD_INT 105
5224: ST_TO_ADDR
// if Multiplayer then
5225: LD_OWVAR 4
5229: IFFALSE 5269
// begin hc_gallery := MULTIAVATARS ;
5231: LD_ADDR_OWVAR 33
5235: PUSH
5236: LD_STRING MULTIAVATARS
5238: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5239: LD_ADDR_OWVAR 34
5243: PUSH
5244: LD_VAR 0 1
5248: PPUSH
5249: CALL_OW 525
5253: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5254: LD_ADDR_OWVAR 27
5258: PUSH
5259: LD_VAR 0 1
5263: PPUSH
5264: CALL_OW 526
5268: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5269: LD_ADDR_VAR 0 5
5273: PUSH
5274: LD_VAR 0 5
5278: PPUSH
5279: CALL_OW 44
5283: PPUSH
5284: CALL 69374 0 2
5288: ST_TO_ADDR
// InitHc_All ( ) ;
5289: CALL_OW 584
// class := 2 ;
5293: LD_ADDR_VAR 0 7
5297: PUSH
5298: LD_INT 2
5300: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5301: LD_ADDR_VAR 0 6
5305: PUSH
5306: DOUBLE
5307: LD_INT 1
5309: DEC
5310: ST_TO_ADDR
5311: LD_VAR 0 3
5315: PUSH
5316: LD_INT 1
5318: MINUS
5319: PUSH
5320: FOR_TO
5321: IFFALSE 5395
// begin PrepareHuman ( false , class , skill ) ;
5323: LD_INT 0
5325: PPUSH
5326: LD_VAR 0 7
5330: PPUSH
5331: LD_VAR 0 4
5335: PPUSH
5336: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
5340: LD_ADDR_VAR 0 5
5344: PUSH
5345: LD_VAR 0 5
5349: PPUSH
5350: CALL_OW 44
5354: PPUSH
5355: CALL 69374 0 2
5359: ST_TO_ADDR
// class := Inc ( class ) ;
5360: LD_ADDR_VAR 0 7
5364: PUSH
5365: LD_VAR 0 7
5369: PPUSH
5370: CALL 70735 0 1
5374: ST_TO_ADDR
// if class = 5 then
5375: LD_VAR 0 7
5379: PUSH
5380: LD_INT 5
5382: EQUAL
5383: IFFALSE 5393
// class := 1 ;
5385: LD_ADDR_VAR 0 7
5389: PUSH
5390: LD_INT 1
5392: ST_TO_ADDR
// end ;
5393: GO 5320
5395: POP
5396: POP
// end ;
5397: LD_VAR 0 5
5401: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5402: LD_INT 0
5404: PPUSH
5405: PPUSH
// result := [ ] ;
5406: LD_ADDR_VAR 0 4
5410: PUSH
5411: EMPTY
5412: ST_TO_ADDR
// if not vehicles then
5413: LD_VAR 0 3
5417: NOT
5418: IFFALSE 5422
// exit ;
5420: GO 5581
// for i := 1 to vehicles [ nation ] do
5422: LD_ADDR_VAR 0 5
5426: PUSH
5427: DOUBLE
5428: LD_INT 1
5430: DEC
5431: ST_TO_ADDR
5432: LD_VAR 0 3
5436: PUSH
5437: LD_VAR 0 2
5441: ARRAY
5442: PUSH
5443: FOR_TO
5444: IFFALSE 5579
// begin uc_side := side ;
5446: LD_ADDR_OWVAR 20
5450: PUSH
5451: LD_VAR 0 1
5455: ST_TO_ADDR
// uc_nation := nation ;
5456: LD_ADDR_OWVAR 21
5460: PUSH
5461: LD_VAR 0 2
5465: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5466: LD_VAR 0 3
5470: PUSH
5471: LD_VAR 0 2
5475: ARRAY
5476: PUSH
5477: LD_VAR 0 5
5481: ARRAY
5482: PUSH
5483: LD_INT 1
5485: ARRAY
5486: PPUSH
5487: LD_VAR 0 3
5491: PUSH
5492: LD_VAR 0 2
5496: ARRAY
5497: PUSH
5498: LD_VAR 0 5
5502: ARRAY
5503: PUSH
5504: LD_INT 2
5506: ARRAY
5507: PPUSH
5508: LD_VAR 0 3
5512: PUSH
5513: LD_VAR 0 2
5517: ARRAY
5518: PUSH
5519: LD_VAR 0 5
5523: ARRAY
5524: PUSH
5525: LD_INT 3
5527: ARRAY
5528: PPUSH
5529: LD_VAR 0 3
5533: PUSH
5534: LD_VAR 0 2
5538: ARRAY
5539: PUSH
5540: LD_VAR 0 5
5544: ARRAY
5545: PUSH
5546: LD_INT 4
5548: ARRAY
5549: PPUSH
5550: LD_INT 80
5552: PPUSH
5553: CALL 36523 0 5
// result := Join ( result , CreateVehicle ) ;
5557: LD_ADDR_VAR 0 4
5561: PUSH
5562: LD_VAR 0 4
5566: PPUSH
5567: CALL_OW 45
5571: PPUSH
5572: CALL 69374 0 2
5576: ST_TO_ADDR
// end ;
5577: GO 5443
5579: POP
5580: POP
// end ;
5581: LD_VAR 0 4
5585: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5586: LD_INT 0
5588: PPUSH
5589: PPUSH
// for i in mpBattleFlags do
5590: LD_ADDR_VAR 0 3
5594: PUSH
5595: LD_EXP 21
5599: PUSH
5600: FOR_IN
5601: IFFALSE 5678
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5603: LD_VAR 0 3
5607: PPUSH
5608: LD_INT 1
5610: PUSH
5611: LD_VAR 0 1
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PUSH
5620: LD_INT 2
5622: PUSH
5623: LD_VAR 0 1
5627: PUSH
5628: LD_REAL  7.00000000000000E-0001
5631: MUL
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PUSH
5637: LD_INT 3
5639: PUSH
5640: LD_VAR 0 1
5644: PUSH
5645: LD_REAL  4.00000000000000E-0001
5648: MUL
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: LD_INT 20
5656: PUSH
5657: LD_VAR 0 1
5661: PUSH
5662: EMPTY
5663: LIST
5664: LIST
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: PPUSH
5672: CALL_OW 423
5676: GO 5600
5678: POP
5679: POP
// end ;
5680: LD_VAR 0 2
5684: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5685: LD_INT 100
5687: IFFALSE 5782
5689: GO 5691
5691: DISABLE
5692: LD_INT 0
5694: PPUSH
5695: PPUSH
// begin if mpBattleFlag <= 0 then
5696: LD_EXP 20
5700: PUSH
5701: LD_INT 0
5703: LESSEQUAL
5704: IFFALSE 5708
// exit ;
5706: GO 5782
// strength := 100 ;
5708: LD_ADDR_VAR 0 2
5712: PUSH
5713: LD_INT 100
5715: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5716: LD_EXP 20
5720: PPUSH
5721: CALL_OW 67
// strength := Dec ( strength ) ;
5725: LD_ADDR_VAR 0 2
5729: PUSH
5730: LD_VAR 0 2
5734: PPUSH
5735: CALL 70757 0 1
5739: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5740: LD_VAR 0 2
5744: PPUSH
5745: CALL 5586 0 1
// until not strength ;
5749: LD_VAR 0 2
5753: NOT
5754: IFFALSE 5716
// for i in mpBattleFlags do
5756: LD_ADDR_VAR 0 1
5760: PUSH
5761: LD_EXP 21
5765: PUSH
5766: FOR_IN
5767: IFFALSE 5780
// KillBattleFlag ( i ) ;
5769: LD_VAR 0 1
5773: PPUSH
5774: CALL_OW 419
5778: GO 5766
5780: POP
5781: POP
// end ;
5782: PPOPN 2
5784: END
// every 0 0$1 marked mpActive do var side , tmp ;
5785: GO 5787
5787: DISABLE
5788: LD_INT 0
5790: PPUSH
5791: PPUSH
// begin if mpSibBomb <= 1 then
5792: LD_EXP 26
5796: PUSH
5797: LD_INT 1
5799: LESSEQUAL
5800: IFFALSE 5804
// exit ;
5802: GO 5877
// tmp := mpSibBomb ;
5804: LD_ADDR_VAR 0 2
5808: PUSH
5809: LD_EXP 26
5813: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5814: LD_INT 35
5816: PPUSH
5817: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5821: LD_ADDR_VAR 0 2
5825: PUSH
5826: LD_VAR 0 2
5830: PUSH
5831: LD_INT 35
5833: MINUS
5834: ST_TO_ADDR
// until not tmp ;
5835: LD_VAR 0 2
5839: NOT
5840: IFFALSE 5814
// for side := 1 to 8 do
5842: LD_ADDR_VAR 0 1
5846: PUSH
5847: DOUBLE
5848: LD_INT 1
5850: DEC
5851: ST_TO_ADDR
5852: LD_INT 8
5854: PUSH
5855: FOR_TO
5856: IFFALSE 5875
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5858: LD_INT 25
5860: PPUSH
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_INT 1
5868: PPUSH
5869: CALL_OW 322
5873: GO 5855
5875: POP
5876: POP
// end ;
5877: PPOPN 2
5879: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5880: LD_INT 0
5882: PPUSH
5883: PPUSH
5884: PPUSH
// mpBuildUpTimeDelay := 0 ;
5885: LD_ADDR_EXP 38
5889: PUSH
5890: LD_INT 0
5892: ST_TO_ADDR
// if not mpBuildUpTime then
5893: LD_EXP 18
5897: NOT
5898: IFFALSE 5902
// exit ;
5900: GO 6085
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
5902: LD_ADDR_EXP 38
5906: PUSH
5907: LD_INT 8400
5909: PUSH
5910: LD_INT 2100
5912: PUSH
5913: LD_EXP 18
5917: MUL
5918: PLUS
5919: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
5920: LD_ADDR_EXP 39
5924: PUSH
5925: LD_INT 1
5927: ST_TO_ADDR
// for i := 1 to 8 do
5928: LD_ADDR_VAR 0 2
5932: PUSH
5933: DOUBLE
5934: LD_INT 1
5936: DEC
5937: ST_TO_ADDR
5938: LD_INT 8
5940: PUSH
5941: FOR_TO
5942: IFFALSE 6083
// if mpSidePositions [ i ] then
5944: LD_EXP 5
5948: PUSH
5949: LD_VAR 0 2
5953: ARRAY
5954: IFFALSE 6081
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
5956: LD_EXP 17
5960: PUSH
5961: LD_EXP 5
5965: PUSH
5966: LD_VAR 0 2
5970: ARRAY
5971: ARRAY
5972: PPUSH
5973: LD_INT 5
5975: PPUSH
5976: CALL_OW 424
// for j := 1 to 8 do
5980: LD_ADDR_VAR 0 3
5984: PUSH
5985: DOUBLE
5986: LD_INT 1
5988: DEC
5989: ST_TO_ADDR
5990: LD_INT 8
5992: PUSH
5993: FOR_TO
5994: IFFALSE 6079
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
5996: LD_EXP 5
6000: PUSH
6001: LD_VAR 0 3
6005: ARRAY
6006: PUSH
6007: LD_EXP 6
6011: PUSH
6012: LD_VAR 0 2
6016: ARRAY
6017: PUSH
6018: LD_EXP 6
6022: PUSH
6023: LD_VAR 0 3
6027: ARRAY
6028: NONEQUAL
6029: PUSH
6030: LD_EXP 9
6034: NOT
6035: PUSH
6036: LD_VAR 0 2
6040: PUSH
6041: LD_VAR 0 3
6045: NONEQUAL
6046: AND
6047: OR
6048: AND
6049: IFFALSE 6077
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6051: LD_VAR 0 3
6055: PPUSH
6056: LD_EXP 17
6060: PUSH
6061: LD_EXP 5
6065: PUSH
6066: LD_VAR 0 2
6070: ARRAY
6071: ARRAY
6072: PPUSH
6073: CALL_OW 333
6077: GO 5993
6079: POP
6080: POP
// end ;
6081: GO 5941
6083: POP
6084: POP
// end ;
6085: LD_VAR 0 1
6089: RET
// function EndBuildUp ; var i , j ; begin
6090: LD_INT 0
6092: PPUSH
6093: PPUSH
6094: PPUSH
// mpBuildUpTimeActive := false ;
6095: LD_ADDR_EXP 39
6099: PUSH
6100: LD_INT 0
6102: ST_TO_ADDR
// for i := 1 to 8 do
6103: LD_ADDR_VAR 0 2
6107: PUSH
6108: DOUBLE
6109: LD_INT 1
6111: DEC
6112: ST_TO_ADDR
6113: LD_INT 8
6115: PUSH
6116: FOR_TO
6117: IFFALSE 6258
// if mpSidePositions [ i ] then
6119: LD_EXP 5
6123: PUSH
6124: LD_VAR 0 2
6128: ARRAY
6129: IFFALSE 6256
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6131: LD_EXP 17
6135: PUSH
6136: LD_EXP 5
6140: PUSH
6141: LD_VAR 0 2
6145: ARRAY
6146: ARRAY
6147: PPUSH
6148: LD_INT 0
6150: PPUSH
6151: CALL_OW 424
// for j := 1 to 8 do
6155: LD_ADDR_VAR 0 3
6159: PUSH
6160: DOUBLE
6161: LD_INT 1
6163: DEC
6164: ST_TO_ADDR
6165: LD_INT 8
6167: PUSH
6168: FOR_TO
6169: IFFALSE 6254
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6171: LD_EXP 5
6175: PUSH
6176: LD_VAR 0 3
6180: ARRAY
6181: PUSH
6182: LD_EXP 6
6186: PUSH
6187: LD_VAR 0 2
6191: ARRAY
6192: PUSH
6193: LD_EXP 6
6197: PUSH
6198: LD_VAR 0 3
6202: ARRAY
6203: NONEQUAL
6204: PUSH
6205: LD_EXP 9
6209: NOT
6210: PUSH
6211: LD_VAR 0 2
6215: PUSH
6216: LD_VAR 0 3
6220: NONEQUAL
6221: AND
6222: OR
6223: AND
6224: IFFALSE 6252
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6226: LD_VAR 0 3
6230: PPUSH
6231: LD_EXP 17
6235: PUSH
6236: LD_EXP 5
6240: PUSH
6241: LD_VAR 0 2
6245: ARRAY
6246: ARRAY
6247: PPUSH
6248: CALL_OW 334
6252: GO 6168
6254: POP
6255: POP
// end ;
6256: GO 6116
6258: POP
6259: POP
// end ;
6260: LD_VAR 0 1
6264: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6265: LD_EXP 39
6269: IFFALSE 6444
6271: GO 6273
6273: DISABLE
6274: LD_INT 0
6276: PPUSH
6277: PPUSH
// begin for i := 1 to 8 do
6278: LD_ADDR_VAR 0 1
6282: PUSH
6283: DOUBLE
6284: LD_INT 1
6286: DEC
6287: ST_TO_ADDR
6288: LD_INT 8
6290: PUSH
6291: FOR_TO
6292: IFFALSE 6441
// if mpSidePositions [ i ] then
6294: LD_EXP 5
6298: PUSH
6299: LD_VAR 0 1
6303: ARRAY
6304: IFFALSE 6439
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6306: LD_ADDR_VAR 0 2
6310: PUSH
6311: LD_EXP 17
6315: PUSH
6316: LD_EXP 5
6320: PUSH
6321: LD_VAR 0 1
6325: ARRAY
6326: ARRAY
6327: PPUSH
6328: LD_INT 2
6330: PUSH
6331: LD_INT 21
6333: PUSH
6334: LD_INT 1
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: LD_INT 21
6343: PUSH
6344: LD_INT 2
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 22
6358: PUSH
6359: LD_OWVAR 2
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PPUSH
6372: CALL_OW 70
6376: PUSH
6377: FOR_IN
6378: IFFALSE 6437
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6380: LD_EXP 6
6384: PUSH
6385: LD_VAR 0 1
6389: ARRAY
6390: PUSH
6391: LD_EXP 6
6395: PUSH
6396: LD_OWVAR 2
6400: ARRAY
6401: NONEQUAL
6402: PUSH
6403: LD_EXP 9
6407: NOT
6408: PUSH
6409: LD_VAR 0 1
6413: PUSH
6414: LD_OWVAR 2
6418: NONEQUAL
6419: AND
6420: OR
6421: IFFALSE 6435
// ComMoveToArea ( un , BuildUpEscape ) ;
6423: LD_VAR 0 2
6427: PPUSH
6428: LD_INT 59
6430: PPUSH
6431: CALL_OW 113
6435: GO 6377
6437: POP
6438: POP
6439: GO 6291
6441: POP
6442: POP
// enable ;
6443: ENABLE
// end ;
6444: PPOPN 2
6446: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6447: LD_EXP 18
6451: IFFALSE 6501
6453: GO 6455
6455: DISABLE
6456: LD_INT 0
6458: PPUSH
// begin tmp := mpBuildUpTime ;
6459: LD_ADDR_VAR 0 1
6463: PUSH
6464: LD_EXP 18
6468: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6469: LD_INT 35
6471: PPUSH
6472: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6476: LD_ADDR_VAR 0 1
6480: PUSH
6481: LD_VAR 0 1
6485: PUSH
6486: LD_INT 35
6488: MINUS
6489: ST_TO_ADDR
// until not tmp ;
6490: LD_VAR 0 1
6494: NOT
6495: IFFALSE 6469
// EndBuildUp ;
6497: CALL 6090 0 0
// end ;
6501: PPOPN 1
6503: END
// every 0 0$1 trigger mpActive marked mpWin do
6504: LD_INT 100
6506: IFFALSE 6540
6508: GO 6510
6510: DISABLE
// begin if IAmServer then
6511: CALL_OW 518
6515: IFFALSE 6524
// wait ( 0 0$3 ) ;
6517: LD_INT 105
6519: PPUSH
6520: CALL_OW 67
// if Multiplayer then
6524: LD_OWVAR 4
6528: IFFALSE 6536
// YouWinInMultiplayer else
6530: CALL_OW 106
6534: GO 6540
// YouWin ;
6536: CALL_OW 103
// end ;
6540: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6541: LD_INT 0
6543: PPUSH
// result := false ;
6544: LD_ADDR_VAR 0 3
6548: PUSH
6549: LD_INT 0
6551: ST_TO_ADDR
// case gameType of GameTypeNormal :
6552: LD_VAR 0 1
6556: PUSH
6557: LD_INT 1
6559: DOUBLE
6560: EQUAL
6561: IFTRUE 6565
6563: GO 6638
6565: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6566: LD_ADDR_VAR 0 3
6570: PUSH
6571: LD_INT 22
6573: PUSH
6574: LD_VAR 0 2
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: LD_INT 2
6585: PUSH
6586: LD_INT 21
6588: PUSH
6589: LD_INT 1
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PUSH
6596: LD_INT 33
6598: PUSH
6599: LD_INT 3
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 33
6608: PUSH
6609: LD_INT 5
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: PPUSH
6626: CALL_OW 69
6630: PPUSH
6631: CALL 33785 0 1
6635: ST_TO_ADDR
// end ; GameTypeSurvival :
6636: GO 6873
6638: LD_INT 2
6640: DOUBLE
6641: EQUAL
6642: IFTRUE 6646
6644: GO 6774
6646: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6647: LD_ADDR_VAR 0 3
6651: PUSH
6652: LD_INT 22
6654: PUSH
6655: LD_VAR 0 2
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: LD_INT 2
6666: PUSH
6667: LD_INT 30
6669: PUSH
6670: LD_INT 0
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: LD_INT 30
6679: PUSH
6680: LD_INT 1
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PPUSH
6696: CALL_OW 69
6700: PPUSH
6701: CALL 33785 0 1
6705: PUSH
6706: LD_INT 22
6708: PUSH
6709: LD_VAR 0 2
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: LD_INT 2
6720: PUSH
6721: LD_INT 21
6723: PUSH
6724: LD_INT 1
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 33
6733: PUSH
6734: LD_INT 3
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 33
6743: PUSH
6744: LD_INT 5
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PPUSH
6761: CALL_OW 69
6765: PPUSH
6766: CALL 33785 0 1
6770: AND
6771: ST_TO_ADDR
// end ; GameTypeKing :
6772: GO 6873
6774: LD_INT 3
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6782
6780: GO 6872
6782: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6783: LD_ADDR_VAR 0 3
6787: PUSH
6788: LD_INT 22
6790: PUSH
6791: LD_VAR 0 2
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 2
6802: PUSH
6803: LD_INT 21
6805: PUSH
6806: LD_INT 1
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 33
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: LD_INT 33
6825: PUSH
6826: LD_INT 5
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PPUSH
6843: CALL_OW 69
6847: PPUSH
6848: CALL 33785 0 1
6852: PUSH
6853: LD_VAR 0 2
6857: PPUSH
6858: CALL 9144 0 1
6862: PUSH
6863: LD_EXP 32
6867: LESS
6868: AND
6869: ST_TO_ADDR
// end ; end ;
6870: GO 6873
6872: POP
// end ;
6873: LD_VAR 0 3
6877: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
6878: LD_INT 100
6880: IFFALSE 7102
6882: GO 6884
6884: DISABLE
6885: LD_INT 0
6887: PPUSH
6888: PPUSH
// begin if Multiplayer then
6889: LD_OWVAR 4
6893: IFFALSE 6901
// SetPlayerSpectator ( ) else
6895: CALL_OW 572
6899: GO 6910
// FogOff ( your_side ) ;
6901: LD_OWVAR 2
6905: PPUSH
6906: CALL_OW 344
// repeat gameIsOn := false ;
6910: LD_ADDR_VAR 0 1
6914: PUSH
6915: LD_INT 0
6917: ST_TO_ADDR
// for i := 1 to 8 do
6918: LD_ADDR_VAR 0 2
6922: PUSH
6923: DOUBLE
6924: LD_INT 1
6926: DEC
6927: ST_TO_ADDR
6928: LD_INT 8
6930: PUSH
6931: FOR_TO
6932: IFFALSE 7054
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
6934: LD_EXP 5
6938: PUSH
6939: LD_VAR 0 2
6943: ARRAY
6944: PUSH
6945: LD_VAR 0 2
6949: PPUSH
6950: CALL_OW 108
6954: AND
6955: PUSH
6956: LD_VAR 0 2
6960: PUSH
6961: LD_OWVAR 2
6965: NONEQUAL
6966: AND
6967: IFFALSE 7052
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
6969: LD_EXP 6
6973: PUSH
6974: LD_VAR 0 2
6978: ARRAY
6979: NOT
6980: PUSH
6981: LD_EXP 6
6985: PUSH
6986: LD_VAR 0 2
6990: ARRAY
6991: PUSH
6992: LD_EXP 6
6996: PUSH
6997: LD_OWVAR 2
7001: ARRAY
7002: NONEQUAL
7003: PUSH
7004: LD_OWVAR 2
7008: PPUSH
7009: LD_VAR 0 2
7013: PPUSH
7014: CALL_OW 81
7018: PUSH
7019: LD_INT 1
7021: NONEQUAL
7022: AND
7023: OR
7024: IFFALSE 7052
// if HasPowerByGameType ( mpGameType , i ) then
7026: LD_EXP 1
7030: PPUSH
7031: LD_VAR 0 2
7035: PPUSH
7036: CALL 6541 0 2
7040: IFFALSE 7052
// begin gameIsOn := true ;
7042: LD_ADDR_VAR 0 1
7046: PUSH
7047: LD_INT 1
7049: ST_TO_ADDR
// break ;
7050: GO 7054
// end ;
7052: GO 6931
7054: POP
7055: POP
// wait ( 100 ) ;
7056: LD_INT 100
7058: PPUSH
7059: CALL_OW 67
// until not gameIsOn ;
7063: LD_VAR 0 1
7067: NOT
7068: IFFALSE 6910
// if IAmServer then
7070: CALL_OW 518
7074: IFFALSE 7083
// wait ( 0 0$3 ) ;
7076: LD_INT 105
7078: PPUSH
7079: CALL_OW 67
// if Multiplayer then
7083: LD_OWVAR 4
7087: IFFALSE 7095
// YouLostInMultiplayer else
7089: CALL_OW 107
7093: GO 7102
// YouLost (  ) ;
7095: LD_STRING 
7097: PPUSH
7098: CALL_OW 104
// end ;
7102: PPOPN 2
7104: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7105: LD_EXP 30
7109: IFFALSE 7447
7111: GO 7113
7113: DISABLE
7114: LD_INT 0
7116: PPUSH
7117: PPUSH
7118: PPUSH
7119: PPUSH
7120: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7121: LD_ADDR_VAR 0 5
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: LD_INT 2
7131: PUSH
7132: LD_INT 3
7134: PUSH
7135: LD_INT 4
7137: PUSH
7138: LD_INT 5
7140: PUSH
7141: LD_INT 6
7143: PUSH
7144: LD_INT 7
7146: PUSH
7147: LD_INT 8
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
7160: LD_INT 1050
7162: PPUSH
7163: CALL_OW 67
// for i := 1 to 8 do
7167: LD_ADDR_VAR 0 1
7171: PUSH
7172: DOUBLE
7173: LD_INT 1
7175: DEC
7176: ST_TO_ADDR
7177: LD_INT 8
7179: PUSH
7180: FOR_TO
7181: IFFALSE 7426
// begin j := sides [ i ] ;
7183: LD_ADDR_VAR 0 2
7187: PUSH
7188: LD_VAR 0 5
7192: PUSH
7193: LD_VAR 0 1
7197: ARRAY
7198: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7199: LD_EXP 37
7203: PUSH
7204: LD_VAR 0 2
7208: ARRAY
7209: PPUSH
7210: CALL 33785 0 1
7214: PUSH
7215: LD_VAR 0 2
7219: PPUSH
7220: CALL_OW 108
7224: AND
7225: PUSH
7226: LD_EXP 1
7230: PPUSH
7231: LD_VAR 0 2
7235: PPUSH
7236: CALL 6541 0 2
7240: AND
7241: IFFALSE 7424
// begin wait ( mpRespawn div 2 ) ;
7243: LD_EXP 30
7247: PUSH
7248: LD_INT 2
7250: DIV
7251: PPUSH
7252: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7256: LD_ADDR_VAR 0 3
7260: PUSH
7261: LD_INT 22
7263: PUSH
7264: LD_VAR 0 2
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: LD_INT 50
7275: PUSH
7276: EMPTY
7277: LIST
7278: PUSH
7279: LD_INT 2
7281: PUSH
7282: LD_INT 30
7284: PUSH
7285: LD_INT 0
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: PUSH
7292: LD_INT 30
7294: PUSH
7295: LD_INT 1
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: PPUSH
7312: CALL_OW 69
7316: ST_TO_ADDR
// if not tmp then
7317: LD_VAR 0 3
7321: NOT
7322: IFFALSE 7326
// continue ;
7324: GO 7180
// spawn := tmp [ 1 ] ;
7326: LD_ADDR_VAR 0 4
7330: PUSH
7331: LD_VAR 0 3
7335: PUSH
7336: LD_INT 1
7338: ARRAY
7339: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7340: LD_EXP 37
7344: PUSH
7345: LD_VAR 0 2
7349: ARRAY
7350: PUSH
7351: LD_INT 1
7353: ARRAY
7354: PPUSH
7355: LD_VAR 0 4
7359: PPUSH
7360: CALL_OW 250
7364: PPUSH
7365: LD_VAR 0 4
7369: PPUSH
7370: CALL_OW 251
7374: PPUSH
7375: LD_INT 32
7377: PPUSH
7378: LD_INT 1
7380: PPUSH
7381: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7385: LD_ADDR_EXP 37
7389: PUSH
7390: LD_EXP 37
7394: PPUSH
7395: LD_VAR 0 2
7399: PPUSH
7400: LD_EXP 37
7404: PUSH
7405: LD_VAR 0 2
7409: ARRAY
7410: PPUSH
7411: LD_INT 1
7413: PPUSH
7414: CALL_OW 3
7418: PPUSH
7419: CALL_OW 1
7423: ST_TO_ADDR
// end ; end ;
7424: GO 7180
7426: POP
7427: POP
// sides := Shuffle ( sides ) ;
7428: LD_ADDR_VAR 0 5
7432: PUSH
7433: LD_VAR 0 5
7437: PPUSH
7438: CALL 69479 0 1
7442: ST_TO_ADDR
// until false ;
7443: LD_INT 0
7445: IFFALSE 7160
// end ;
7447: PPOPN 5
7449: END
// every 0 0$1 marked mpActive do
7450: GO 7452
7452: DISABLE
// begin enable ;
7453: ENABLE
// if not mpDisplayStrings then
7454: LD_EXP 35
7458: NOT
7459: IFFALSE 7470
// begin display_strings := [ ] ;
7461: LD_ADDR_OWVAR 47
7465: PUSH
7466: EMPTY
7467: ST_TO_ADDR
// exit ;
7468: GO 7480
// end ; display_strings := mpDisplayStrings ;
7470: LD_ADDR_OWVAR 47
7474: PUSH
7475: LD_EXP 35
7479: ST_TO_ADDR
// end ; end_of_file
7480: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7481: LD_INT 0
7483: PPUSH
7484: PPUSH
7485: PPUSH
7486: PPUSH
7487: PPUSH
7488: PPUSH
7489: PPUSH
7490: PPUSH
7491: PPUSH
// if GetType ( un ) = unit_vehicle then
7492: LD_VAR 0 1
7496: PPUSH
7497: CALL_OW 247
7501: PUSH
7502: LD_INT 2
7504: EQUAL
7505: IFFALSE 7509
// exit ;
7507: GO 7975
// side := GetSide ( un ) ;
7509: LD_ADDR_VAR 0 9
7513: PUSH
7514: LD_VAR 0 1
7518: PPUSH
7519: CALL_OW 255
7523: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7524: LD_EXP 1
7528: PUSH
7529: LD_INT 2
7531: EQUAL
7532: IFFALSE 7625
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
7534: LD_VAR 0 1
7538: PPUSH
7539: CALL_OW 266
7543: PUSH
7544: LD_INT 0
7546: PUSH
7547: LD_INT 1
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: IN
7554: PUSH
7555: LD_VAR 0 1
7559: PPUSH
7560: CALL_OW 110
7564: PUSH
7565: LD_VAR 0 9
7569: EQUAL
7570: AND
7571: IFFALSE 7625
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7573: LD_ADDR_VAR 0 3
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 9
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 21
7592: PUSH
7593: LD_INT 1
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PPUSH
7604: CALL_OW 69
7608: PUSH
7609: FOR_IN
7610: IFFALSE 7623
// KillUnit ( i ) ;
7612: LD_VAR 0 3
7616: PPUSH
7617: CALL_OW 66
7621: GO 7609
7623: POP
7624: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7625: LD_VAR 0 1
7629: PPUSH
7630: CALL_OW 257
7634: PUSH
7635: LD_INT 12
7637: PUSH
7638: LD_INT 17
7640: PUSH
7641: LD_INT 15
7643: PUSH
7644: LD_INT 16
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: IN
7653: PUSH
7654: LD_VAR 0 1
7658: PPUSH
7659: CALL_OW 263
7663: PUSH
7664: LD_INT 5
7666: EQUAL
7667: OR
7668: IFFALSE 7757
// begin tag := GetTag ( un ) ;
7670: LD_ADDR_VAR 0 5
7674: PUSH
7675: LD_VAR 0 1
7679: PPUSH
7680: CALL_OW 110
7684: ST_TO_ADDR
// area := mpApemansArea [ tag ] ;
7685: LD_ADDR_VAR 0 7
7689: PUSH
7690: LD_EXP 29
7694: PUSH
7695: LD_VAR 0 5
7699: ARRAY
7700: ST_TO_ADDR
// wait ( 4 4$00 ) ;
7701: LD_INT 8400
7703: PPUSH
7704: CALL_OW 67
// PrepareApeman ( - 5 ) ;
7708: LD_INT 5
7710: NEG
7711: PPUSH
7712: CALL 65642 0 1
// ape := CreateHuman ;
7716: LD_ADDR_VAR 0 4
7720: PUSH
7721: CALL_OW 44
7725: ST_TO_ADDR
// SetTag ( ape , tag ) ;
7726: LD_VAR 0 4
7730: PPUSH
7731: LD_VAR 0 5
7735: PPUSH
7736: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
7740: LD_VAR 0 4
7744: PPUSH
7745: LD_VAR 0 7
7749: PPUSH
7750: LD_INT 0
7752: PPUSH
7753: CALL_OW 49
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
7757: LD_VAR 0 1
7761: PPUSH
7762: CALL_OW 247
7766: PUSH
7767: LD_INT 1
7769: EQUAL
7770: PUSH
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 248
7780: PUSH
7781: LD_INT 0
7783: GREATER
7784: AND
7785: IFFALSE 7975
// begin if not mpRespawn then
7787: LD_EXP 30
7791: NOT
7792: IFFALSE 7796
// exit ;
7794: GO 7975
// side := GetSide ( un ) ;
7796: LD_ADDR_VAR 0 9
7800: PUSH
7801: LD_VAR 0 1
7805: PPUSH
7806: CALL_OW 255
7810: ST_TO_ADDR
// nation := GetNation ( un ) ;
7811: LD_ADDR_VAR 0 8
7815: PUSH
7816: LD_VAR 0 1
7820: PPUSH
7821: CALL_OW 248
7825: ST_TO_ADDR
// class := GetClass ( un ) ;
7826: LD_ADDR_VAR 0 6
7830: PUSH
7831: LD_VAR 0 1
7835: PPUSH
7836: CALL_OW 257
7840: ST_TO_ADDR
// if class > 4 then
7841: LD_VAR 0 6
7845: PUSH
7846: LD_INT 4
7848: GREATER
7849: IFFALSE 7859
// class := 1 ;
7851: LD_ADDR_VAR 0 6
7855: PUSH
7856: LD_INT 1
7858: ST_TO_ADDR
// wait ( mpRespawn ) ;
7859: LD_EXP 30
7863: PPUSH
7864: CALL_OW 67
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
7868: LD_VAR 0 9
7872: PPUSH
7873: CALL_OW 108
7877: NOT
7878: PUSH
7879: LD_EXP 1
7883: PPUSH
7884: LD_VAR 0 9
7888: PPUSH
7889: CALL 6541 0 2
7893: NOT
7894: AND
7895: IFFALSE 7899
// exit ;
7897: GO 7975
// uc_side := side ;
7899: LD_ADDR_OWVAR 20
7903: PUSH
7904: LD_VAR 0 9
7908: ST_TO_ADDR
// uc_nation := nation ;
7909: LD_ADDR_OWVAR 21
7913: PUSH
7914: LD_VAR 0 8
7918: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
7919: LD_INT 0
7921: PPUSH
7922: LD_VAR 0 6
7926: PPUSH
7927: LD_INT 2
7929: PPUSH
7930: CALL_OW 380
// mpRespawnPull := Replace ( mpRespawnPull , side , Join ( mpRespawnPull [ side ] , CreateHuman ) ) ;
7934: LD_ADDR_EXP 37
7938: PUSH
7939: LD_EXP 37
7943: PPUSH
7944: LD_VAR 0 9
7948: PPUSH
7949: LD_EXP 37
7953: PUSH
7954: LD_VAR 0 9
7958: ARRAY
7959: PPUSH
7960: CALL_OW 44
7964: PPUSH
7965: CALL 69374 0 2
7969: PPUSH
7970: CALL_OW 1
7974: ST_TO_ADDR
// end ; end ;
7975: LD_VAR 0 2
7979: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
7980: LD_INT 0
7982: PPUSH
7983: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
7984: LD_EXP 1
7988: PUSH
7989: LD_INT 2
7991: EQUAL
7992: PUSH
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 266
8002: PUSH
8003: LD_INT 0
8005: PUSH
8006: LD_INT 1
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: IN
8013: AND
8014: IFFALSE 8079
// begin KillUnit ( building ) ;
8016: LD_VAR 0 1
8020: PPUSH
8021: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8025: LD_ADDR_VAR 0 5
8029: PUSH
8030: LD_INT 22
8032: PUSH
8033: LD_VAR 0 2
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 21
8044: PUSH
8045: LD_INT 1
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: PPUSH
8056: CALL_OW 69
8060: PUSH
8061: FOR_IN
8062: IFFALSE 8075
// KillUnit ( i ) ;
8064: LD_VAR 0 5
8068: PPUSH
8069: CALL_OW 66
8073: GO 8061
8075: POP
8076: POP
// exit ;
8077: GO 8124
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8079: LD_VAR 0 1
8083: PPUSH
8084: CALL_OW 266
8088: PUSH
8089: LD_INT 0
8091: PUSH
8092: LD_INT 1
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: IN
8099: IFFALSE 8124
// SetBName ( building , @ & GetSide ( building ) ) ;
8101: LD_VAR 0 1
8105: PPUSH
8106: LD_STRING @
8108: PUSH
8109: LD_VAR 0 1
8113: PPUSH
8114: CALL_OW 255
8118: STR
8119: PPUSH
8120: CALL_OW 500
// end ; end_of_file
8124: LD_VAR 0 4
8128: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
8129: LD_EXP 36
8133: IFFALSE 8472
8135: GO 8137
8137: DISABLE
8138: LD_INT 0
8140: PPUSH
8141: PPUSH
8142: PPUSH
// begin mpKingPoints := [ ] ;
8143: LD_ADDR_EXP 40
8147: PUSH
8148: EMPTY
8149: ST_TO_ADDR
// if mpTeamGame then
8150: LD_EXP 9
8154: IFFALSE 8208
// begin for i := 1 to Count ( mpTeams ) do
8156: LD_ADDR_VAR 0 1
8160: PUSH
8161: DOUBLE
8162: LD_INT 1
8164: DEC
8165: ST_TO_ADDR
8166: LD_EXP 8
8170: PPUSH
8171: CALL 33785 0 1
8175: PUSH
8176: FOR_TO
8177: IFFALSE 8204
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
8179: LD_ADDR_EXP 40
8183: PUSH
8184: LD_EXP 40
8188: PPUSH
8189: LD_VAR 0 1
8193: PPUSH
8194: LD_INT 0
8196: PPUSH
8197: CALL_OW 1
8201: ST_TO_ADDR
8202: GO 8176
8204: POP
8205: POP
// end else
8206: GO 8251
// begin for i := 1 to 8 do
8208: LD_ADDR_VAR 0 1
8212: PUSH
8213: DOUBLE
8214: LD_INT 1
8216: DEC
8217: ST_TO_ADDR
8218: LD_INT 8
8220: PUSH
8221: FOR_TO
8222: IFFALSE 8249
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
8224: LD_ADDR_EXP 40
8228: PUSH
8229: LD_EXP 40
8233: PPUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: LD_INT 0
8241: PPUSH
8242: CALL_OW 1
8246: ST_TO_ADDR
8247: GO 8221
8249: POP
8250: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
8251: LD_ADDR_VAR 0 3
8255: PUSH
8256: LD_INT 50
8258: PPUSH
8259: LD_INT 0
8261: PPUSH
8262: CALL_OW 517
8266: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
8267: LD_ADDR_VAR 0 1
8271: PUSH
8272: DOUBLE
8273: LD_INT 1
8275: DEC
8276: ST_TO_ADDR
8277: LD_VAR 0 3
8281: PUSH
8282: LD_INT 1
8284: ARRAY
8285: PUSH
8286: FOR_TO
8287: IFFALSE 8354
// for j := 1 to 8 do
8289: LD_ADDR_VAR 0 2
8293: PUSH
8294: DOUBLE
8295: LD_INT 1
8297: DEC
8298: ST_TO_ADDR
8299: LD_INT 8
8301: PUSH
8302: FOR_TO
8303: IFFALSE 8350
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
8305: LD_VAR 0 3
8309: PUSH
8310: LD_INT 1
8312: ARRAY
8313: PUSH
8314: LD_VAR 0 1
8318: ARRAY
8319: PPUSH
8320: LD_VAR 0 3
8324: PUSH
8325: LD_INT 2
8327: ARRAY
8328: PUSH
8329: LD_VAR 0 1
8333: ARRAY
8334: PPUSH
8335: LD_VAR 0 2
8339: PPUSH
8340: LD_INT 12
8342: NEG
8343: PPUSH
8344: CALL_OW 330
8348: GO 8302
8350: POP
8351: POP
8352: GO 8286
8354: POP
8355: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
8356: LD_EXP 31
8360: PPUSH
8361: LD_INT 1
8363: PPUSH
8364: CALL_OW 424
// UpdateCounter ;
8368: CALL 8974 0 0
// repeat wait ( 0 0$1 ) ;
8372: LD_INT 35
8374: PPUSH
8375: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8379: LD_ADDR_VAR 0 3
8383: PUSH
8384: LD_EXP 31
8388: PPUSH
8389: LD_INT 3
8391: PUSH
8392: LD_INT 57
8394: PUSH
8395: EMPTY
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PUSH
8402: LD_INT 50
8404: PUSH
8405: EMPTY
8406: LIST
8407: PUSH
8408: LD_INT 2
8410: PUSH
8411: LD_INT 30
8413: PUSH
8414: LD_INT 0
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: PUSH
8421: LD_INT 30
8423: PUSH
8424: LD_INT 1
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: LIST
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: LIST
8440: PPUSH
8441: CALL_OW 70
8445: ST_TO_ADDR
// if not tmp then
8446: LD_VAR 0 3
8450: NOT
8451: IFFALSE 8455
// continue ;
8453: GO 8372
// AddPoints ( tmp ) ;
8455: LD_VAR 0 3
8459: PPUSH
8460: CALL 8652 0 1
// UpdateCounter ;
8464: CALL 8974 0 0
// until false ;
8468: LD_INT 0
8470: IFFALSE 8372
// end ;
8472: PPOPN 3
8474: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
8475: LD_EXP 36
8479: PUSH
8480: LD_EXP 34
8484: AND
8485: IFFALSE 8649
8487: GO 8489
8489: DISABLE
8490: LD_INT 0
8492: PPUSH
8493: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
8494: LD_ADDR_VAR 0 2
8498: PUSH
8499: LD_INT 50
8501: PPUSH
8502: LD_INT 0
8504: PPUSH
8505: CALL_OW 517
8509: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
8510: LD_ADDR_VAR 0 1
8514: PUSH
8515: DOUBLE
8516: LD_INT 1
8518: DEC
8519: ST_TO_ADDR
8520: LD_VAR 0 2
8524: PUSH
8525: LD_INT 1
8527: ARRAY
8528: PUSH
8529: FOR_TO
8530: IFFALSE 8571
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
8532: LD_VAR 0 2
8536: PUSH
8537: LD_INT 1
8539: ARRAY
8540: PUSH
8541: LD_VAR 0 1
8545: ARRAY
8546: PPUSH
8547: LD_VAR 0 2
8551: PUSH
8552: LD_INT 2
8554: ARRAY
8555: PUSH
8556: LD_VAR 0 1
8560: ARRAY
8561: PPUSH
8562: LD_INT 125
8564: PPUSH
8565: CALL_OW 495
8569: GO 8529
8571: POP
8572: POP
// repeat wait ( mpEmissions ) ;
8573: LD_EXP 34
8577: PPUSH
8578: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
8582: LD_ADDR_VAR 0 1
8586: PUSH
8587: DOUBLE
8588: LD_INT 1
8590: DEC
8591: ST_TO_ADDR
8592: LD_VAR 0 2
8596: PUSH
8597: LD_INT 1
8599: ARRAY
8600: PUSH
8601: FOR_TO
8602: IFFALSE 8643
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
8604: LD_VAR 0 2
8608: PUSH
8609: LD_INT 1
8611: ARRAY
8612: PUSH
8613: LD_VAR 0 1
8617: ARRAY
8618: PPUSH
8619: LD_VAR 0 2
8623: PUSH
8624: LD_INT 2
8626: ARRAY
8627: PUSH
8628: LD_VAR 0 1
8632: ARRAY
8633: PPUSH
8634: LD_INT 15
8636: PPUSH
8637: CALL_OW 495
8641: GO 8601
8643: POP
8644: POP
// until false ;
8645: LD_INT 0
8647: IFFALSE 8573
// end ;
8649: PPOPN 2
8651: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
8652: LD_INT 0
8654: PPUSH
8655: PPUSH
8656: PPUSH
8657: PPUSH
8658: PPUSH
// if mpTeamGame then
8659: LD_EXP 9
8663: IFFALSE 8860
// begin first := depots [ 1 ] ;
8665: LD_ADDR_VAR 0 4
8669: PUSH
8670: LD_VAR 0 1
8674: PUSH
8675: LD_INT 1
8677: ARRAY
8678: ST_TO_ADDR
// side := GetSide ( first ) ;
8679: LD_ADDR_VAR 0 6
8683: PUSH
8684: LD_VAR 0 4
8688: PPUSH
8689: CALL_OW 255
8693: ST_TO_ADDR
// for i := 1 to mpTeams do
8694: LD_ADDR_VAR 0 3
8698: PUSH
8699: DOUBLE
8700: LD_INT 1
8702: DEC
8703: ST_TO_ADDR
8704: LD_EXP 8
8708: PUSH
8709: FOR_TO
8710: IFFALSE 8744
// if side in mpTeams [ i ] then
8712: LD_VAR 0 6
8716: PUSH
8717: LD_EXP 8
8721: PUSH
8722: LD_VAR 0 3
8726: ARRAY
8727: IN
8728: IFFALSE 8742
// begin team := i ;
8730: LD_ADDR_VAR 0 5
8734: PUSH
8735: LD_VAR 0 3
8739: ST_TO_ADDR
// break ;
8740: GO 8744
// end ;
8742: GO 8709
8744: POP
8745: POP
// if not team then
8746: LD_VAR 0 5
8750: NOT
8751: IFFALSE 8755
// exit ;
8753: GO 8969
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
8755: LD_EXP 31
8759: PPUSH
8760: LD_INT 81
8762: PUSH
8763: LD_VAR 0 6
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PPUSH
8772: CALL_OW 70
8776: IFFALSE 8780
// exit ;
8778: GO 8969
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
8780: LD_ADDR_EXP 40
8784: PUSH
8785: LD_EXP 40
8789: PPUSH
8790: LD_VAR 0 5
8794: PPUSH
8795: LD_EXP 40
8799: PUSH
8800: LD_VAR 0 5
8804: ARRAY
8805: PUSH
8806: LD_INT 1
8808: PLUS
8809: PPUSH
8810: CALL_OW 1
8814: ST_TO_ADDR
// for i in mpTeams [ team ] do
8815: LD_ADDR_VAR 0 3
8819: PUSH
8820: LD_EXP 8
8824: PUSH
8825: LD_VAR 0 5
8829: ARRAY
8830: PUSH
8831: FOR_IN
8832: IFFALSE 8856
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
8834: LD_VAR 0 3
8838: PPUSH
8839: LD_EXP 40
8843: PUSH
8844: LD_VAR 0 5
8848: ARRAY
8849: PPUSH
8850: CALL_OW 506
8854: GO 8831
8856: POP
8857: POP
// end else
8858: GO 8969
// begin first := depots [ 1 ] ;
8860: LD_ADDR_VAR 0 4
8864: PUSH
8865: LD_VAR 0 1
8869: PUSH
8870: LD_INT 1
8872: ARRAY
8873: ST_TO_ADDR
// side := GetSide ( first ) ;
8874: LD_ADDR_VAR 0 6
8878: PUSH
8879: LD_VAR 0 4
8883: PPUSH
8884: CALL_OW 255
8888: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
8889: LD_EXP 31
8893: PPUSH
8894: LD_INT 81
8896: PUSH
8897: LD_VAR 0 6
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PPUSH
8906: CALL_OW 70
8910: IFFALSE 8914
// exit ;
8912: GO 8969
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
8914: LD_ADDR_EXP 40
8918: PUSH
8919: LD_EXP 40
8923: PPUSH
8924: LD_VAR 0 6
8928: PPUSH
8929: LD_EXP 40
8933: PUSH
8934: LD_VAR 0 6
8938: ARRAY
8939: PUSH
8940: LD_INT 1
8942: PLUS
8943: PPUSH
8944: CALL_OW 1
8948: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
8949: LD_VAR 0 6
8953: PPUSH
8954: LD_EXP 40
8958: PUSH
8959: LD_VAR 0 6
8963: ARRAY
8964: PPUSH
8965: CALL_OW 506
// end ; end ;
8969: LD_VAR 0 2
8973: RET
// function UpdateCounter ; var i ; begin
8974: LD_INT 0
8976: PPUSH
8977: PPUSH
// result := [ ] ;
8978: LD_ADDR_VAR 0 1
8982: PUSH
8983: EMPTY
8984: ST_TO_ADDR
// if mpTeamGame then
8985: LD_EXP 9
8989: IFFALSE 9056
// begin for i := 1 to mpTeams do
8991: LD_ADDR_VAR 0 2
8995: PUSH
8996: DOUBLE
8997: LD_INT 1
8999: DEC
9000: ST_TO_ADDR
9001: LD_EXP 8
9005: PUSH
9006: FOR_TO
9007: IFFALSE 9052
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
9009: LD_ADDR_VAR 0 1
9013: PUSH
9014: LD_VAR 0 1
9018: PUSH
9019: LD_STRING #KingoftheHill-Team
9021: PUSH
9022: LD_VAR 0 2
9026: PUSH
9027: LD_EXP 40
9031: PUSH
9032: LD_VAR 0 2
9036: ARRAY
9037: PUSH
9038: LD_EXP 32
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: ADD
9049: ST_TO_ADDR
9050: GO 9006
9052: POP
9053: POP
// end else
9054: GO 9129
// begin for i := 1 to 8 do
9056: LD_ADDR_VAR 0 2
9060: PUSH
9061: DOUBLE
9062: LD_INT 1
9064: DEC
9065: ST_TO_ADDR
9066: LD_INT 8
9068: PUSH
9069: FOR_TO
9070: IFFALSE 9127
// if mpSidePositions [ i ] then
9072: LD_EXP 5
9076: PUSH
9077: LD_VAR 0 2
9081: ARRAY
9082: IFFALSE 9125
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
9084: LD_ADDR_VAR 0 1
9088: PUSH
9089: LD_VAR 0 1
9093: PUSH
9094: LD_STRING #KingoftheHill-Player
9096: PUSH
9097: LD_VAR 0 2
9101: PUSH
9102: LD_EXP 40
9106: PUSH
9107: LD_VAR 0 2
9111: ARRAY
9112: PUSH
9113: LD_EXP 32
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: ADD
9124: ST_TO_ADDR
9125: GO 9069
9127: POP
9128: POP
// end ; mpDisplayStrings := result ;
9129: LD_ADDR_EXP 35
9133: PUSH
9134: LD_VAR 0 1
9138: ST_TO_ADDR
// end ;
9139: LD_VAR 0 1
9143: RET
// export function HowMuchPointsKing ( side ) ; begin
9144: LD_INT 0
9146: PPUSH
// result := HowMuchPoints ( side ) ;
9147: LD_ADDR_VAR 0 2
9151: PUSH
9152: LD_VAR 0 1
9156: PPUSH
9157: CALL 9167 0 1
9161: ST_TO_ADDR
// end ;
9162: LD_VAR 0 2
9166: RET
// function HowMuchPoints ( side ) ; var i ; begin
9167: LD_INT 0
9169: PPUSH
9170: PPUSH
// if mpTeamGame then
9171: LD_EXP 9
9175: IFFALSE 9244
// begin for i := 1 to Count ( mpTeams ) do
9177: LD_ADDR_VAR 0 3
9181: PUSH
9182: DOUBLE
9183: LD_INT 1
9185: DEC
9186: ST_TO_ADDR
9187: LD_EXP 8
9191: PPUSH
9192: CALL 33785 0 1
9196: PUSH
9197: FOR_TO
9198: IFFALSE 9240
// begin if side in mpTeams [ i ] then
9200: LD_VAR 0 1
9204: PUSH
9205: LD_EXP 8
9209: PUSH
9210: LD_VAR 0 3
9214: ARRAY
9215: IN
9216: IFFALSE 9238
// begin result := mpKingPoints [ i ] ;
9218: LD_ADDR_VAR 0 2
9222: PUSH
9223: LD_EXP 40
9227: PUSH
9228: LD_VAR 0 3
9232: ARRAY
9233: ST_TO_ADDR
// exit ;
9234: POP
9235: POP
9236: GO 9260
// end ; end ;
9238: GO 9197
9240: POP
9241: POP
// end else
9242: GO 9260
// result := mpKingPoints [ side ] ;
9244: LD_ADDR_VAR 0 2
9248: PUSH
9249: LD_EXP 40
9253: PUSH
9254: LD_VAR 0 1
9258: ARRAY
9259: ST_TO_ADDR
// end ;
9260: LD_VAR 0 2
9264: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
9265: LD_EXP 36
9269: PUSH
9270: CALL 9592 0 0
9274: AND
9275: PUSH
9276: LD_OWVAR 4
9280: AND
9281: IFFALSE 9517
9283: GO 9285
9285: DISABLE
9286: LD_INT 0
9288: PPUSH
9289: PPUSH
// begin canWin := false ;
9290: LD_ADDR_VAR 0 2
9294: PUSH
9295: LD_INT 0
9297: ST_TO_ADDR
// if not HasPower ( your_side ) then
9298: LD_OWVAR 2
9302: PPUSH
9303: CALL 9632 0 1
9307: NOT
9308: IFFALSE 9319
// begin Multiplayer_Loose_Message ;
9310: CALL_OW 521
// enable ( mpLose ) ;
9314: LD_INT 102
9316: ENABLE_MARKED
// end else
9317: GO 9517
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
9319: LD_ADDR_VAR 0 2
9323: PUSH
9324: LD_OWVAR 2
9328: PPUSH
9329: CALL 9167 0 1
9333: PUSH
9334: LD_EXP 32
9338: GREATEREQUAL
9339: PUSH
9340: LD_OWVAR 2
9344: PPUSH
9345: CALL 9632 0 1
9349: AND
9350: PUSH
9351: CALL 9520 0 0
9355: NOT
9356: OR
9357: ST_TO_ADDR
// for i := 1 to 8 do
9358: LD_ADDR_VAR 0 1
9362: PUSH
9363: DOUBLE
9364: LD_INT 1
9366: DEC
9367: ST_TO_ADDR
9368: LD_INT 8
9370: PUSH
9371: FOR_TO
9372: IFFALSE 9503
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9374: LD_EXP 5
9378: PUSH
9379: LD_VAR 0 1
9383: ARRAY
9384: PUSH
9385: LD_VAR 0 1
9389: PPUSH
9390: CALL_OW 108
9394: AND
9395: PUSH
9396: LD_VAR 0 1
9400: PUSH
9401: LD_OWVAR 2
9405: NONEQUAL
9406: AND
9407: IFFALSE 9501
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9409: LD_EXP 6
9413: PUSH
9414: LD_VAR 0 1
9418: ARRAY
9419: NOT
9420: PUSH
9421: LD_EXP 6
9425: PUSH
9426: LD_VAR 0 1
9430: ARRAY
9431: PUSH
9432: LD_EXP 6
9436: PUSH
9437: LD_OWVAR 2
9441: ARRAY
9442: NONEQUAL
9443: PUSH
9444: LD_OWVAR 2
9448: PPUSH
9449: LD_VAR 0 1
9453: PPUSH
9454: CALL_OW 81
9458: PUSH
9459: LD_INT 1
9461: NONEQUAL
9462: AND
9463: OR
9464: IFFALSE 9501
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
9466: LD_VAR 0 1
9470: PPUSH
9471: CALL 9167 0 1
9475: PUSH
9476: LD_EXP 32
9480: GREATEREQUAL
9481: PUSH
9482: LD_VAR 0 1
9486: PPUSH
9487: CALL 9632 0 1
9491: AND
9492: IFFALSE 9501
// begin enable ( mpLose ) ;
9494: LD_INT 102
9496: ENABLE_MARKED
// exit ;
9497: POP
9498: POP
9499: GO 9517
// end ;
9501: GO 9371
9503: POP
9504: POP
// if canWin then
9505: LD_VAR 0 2
9509: IFFALSE 9516
// enable ( mpWin ) else
9511: LD_INT 101
9513: ENABLE_MARKED
9514: GO 9517
// enable ;
9516: ENABLE
// end ; end ;
9517: PPOPN 2
9519: END
// function EnemiesInGame ; var i ; begin
9520: LD_INT 0
9522: PPUSH
9523: PPUSH
// result := false ;
9524: LD_ADDR_VAR 0 1
9528: PUSH
9529: LD_INT 0
9531: ST_TO_ADDR
// for i := 1 to 8 do
9532: LD_ADDR_VAR 0 2
9536: PUSH
9537: DOUBLE
9538: LD_INT 1
9540: DEC
9541: ST_TO_ADDR
9542: LD_INT 8
9544: PUSH
9545: FOR_TO
9546: IFFALSE 9585
// if i <> your_side and MultiplayerSideAlive ( i ) then
9548: LD_VAR 0 2
9552: PUSH
9553: LD_OWVAR 2
9557: NONEQUAL
9558: PUSH
9559: LD_VAR 0 2
9563: PPUSH
9564: CALL_OW 108
9568: AND
9569: IFFALSE 9583
// begin result := true ;
9571: LD_ADDR_VAR 0 1
9575: PUSH
9576: LD_INT 1
9578: ST_TO_ADDR
// exit ;
9579: POP
9580: POP
9581: GO 9587
// end ;
9583: GO 9545
9585: POP
9586: POP
// end ;
9587: LD_VAR 0 1
9591: RET
// function CanWinLoose ; begin
9592: LD_INT 0
9594: PPUSH
// result := true ;
9595: LD_ADDR_VAR 0 1
9599: PUSH
9600: LD_INT 1
9602: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9603: CALL_OW 531
9607: PUSH
9608: CALL_OW 519
9612: PUSH
9613: LD_INT 1
9615: GREATER
9616: AND
9617: IFFALSE 9627
// result := false ;
9619: LD_ADDR_VAR 0 1
9623: PUSH
9624: LD_INT 0
9626: ST_TO_ADDR
// end ;
9627: LD_VAR 0 1
9631: RET
// function HasPower ( i ) ; begin
9632: LD_INT 0
9634: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9635: LD_ADDR_VAR 0 2
9639: PUSH
9640: LD_INT 22
9642: PUSH
9643: LD_VAR 0 1
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: LD_INT 2
9654: PUSH
9655: LD_INT 21
9657: PUSH
9658: LD_INT 1
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 33
9667: PUSH
9668: LD_INT 3
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PUSH
9675: LD_INT 33
9677: PUSH
9678: LD_INT 5
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PPUSH
9695: CALL_OW 69
9699: ST_TO_ADDR
// end ; end_of_file
9700: LD_VAR 0 2
9704: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9705: LD_EXP 36
9709: PUSH
9710: CALL 9915 0 0
9714: AND
9715: PUSH
9716: LD_OWVAR 4
9720: AND
9721: IFFALSE 9912
9723: GO 9725
9725: DISABLE
9726: LD_INT 0
9728: PPUSH
9729: PPUSH
// begin canWin := false ;
9730: LD_ADDR_VAR 0 2
9734: PUSH
9735: LD_INT 0
9737: ST_TO_ADDR
// if not HasPower ( your_side ) then
9738: LD_OWVAR 2
9742: PPUSH
9743: CALL 9955 0 1
9747: NOT
9748: IFFALSE 9759
// begin Multiplayer_Loose_Message ;
9750: CALL_OW 521
// enable ( mpLose ) ;
9754: LD_INT 102
9756: ENABLE_MARKED
// end else
9757: GO 9912
// begin canWin := true ;
9759: LD_ADDR_VAR 0 2
9763: PUSH
9764: LD_INT 1
9766: ST_TO_ADDR
// for i := 1 to 8 do
9767: LD_ADDR_VAR 0 1
9771: PUSH
9772: DOUBLE
9773: LD_INT 1
9775: DEC
9776: ST_TO_ADDR
9777: LD_INT 8
9779: PUSH
9780: FOR_TO
9781: IFFALSE 9898
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9783: LD_EXP 5
9787: PUSH
9788: LD_VAR 0 1
9792: ARRAY
9793: PUSH
9794: LD_VAR 0 1
9798: PPUSH
9799: CALL_OW 108
9803: AND
9804: PUSH
9805: LD_VAR 0 1
9809: PUSH
9810: LD_OWVAR 2
9814: NONEQUAL
9815: AND
9816: IFFALSE 9896
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9818: LD_EXP 6
9822: PUSH
9823: LD_VAR 0 1
9827: ARRAY
9828: NOT
9829: PUSH
9830: LD_EXP 6
9834: PUSH
9835: LD_VAR 0 1
9839: ARRAY
9840: PUSH
9841: LD_EXP 6
9845: PUSH
9846: LD_OWVAR 2
9850: ARRAY
9851: NONEQUAL
9852: PUSH
9853: LD_OWVAR 2
9857: PPUSH
9858: LD_VAR 0 1
9862: PPUSH
9863: CALL_OW 81
9867: PUSH
9868: LD_INT 1
9870: NONEQUAL
9871: AND
9872: OR
9873: IFFALSE 9896
// if HasPower ( i ) then
9875: LD_VAR 0 1
9879: PPUSH
9880: CALL 9955 0 1
9884: IFFALSE 9896
// begin canWin := false ;
9886: LD_ADDR_VAR 0 2
9890: PUSH
9891: LD_INT 0
9893: ST_TO_ADDR
// break ;
9894: GO 9898
// end ;
9896: GO 9780
9898: POP
9899: POP
// if canWin then
9900: LD_VAR 0 2
9904: IFFALSE 9911
// enable ( mpWin ) else
9906: LD_INT 101
9908: ENABLE_MARKED
9909: GO 9912
// enable ;
9911: ENABLE
// end ; end ;
9912: PPOPN 2
9914: END
// function CanWinLoose ; begin
9915: LD_INT 0
9917: PPUSH
// result := true ;
9918: LD_ADDR_VAR 0 1
9922: PUSH
9923: LD_INT 1
9925: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9926: CALL_OW 531
9930: PUSH
9931: CALL_OW 519
9935: PUSH
9936: LD_INT 1
9938: GREATER
9939: AND
9940: IFFALSE 9950
// result := false ;
9942: LD_ADDR_VAR 0 1
9946: PUSH
9947: LD_INT 0
9949: ST_TO_ADDR
// end ;
9950: LD_VAR 0 1
9954: RET
// function HasPower ( i ) ; begin
9955: LD_INT 0
9957: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9958: LD_ADDR_VAR 0 2
9962: PUSH
9963: LD_INT 22
9965: PUSH
9966: LD_VAR 0 1
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 2
9977: PUSH
9978: LD_INT 21
9980: PUSH
9981: LD_INT 1
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PUSH
9988: LD_INT 33
9990: PUSH
9991: LD_INT 3
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 33
10000: PUSH
10001: LD_INT 5
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PPUSH
10018: CALL_OW 69
10022: ST_TO_ADDR
// end ; end_of_file
10023: LD_VAR 0 2
10027: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10028: LD_EXP 36
10032: IFFALSE 10075
10034: GO 10036
10036: DISABLE
10037: LD_INT 0
10039: PPUSH
// begin for i := 1 to 8 do
10040: LD_ADDR_VAR 0 1
10044: PUSH
10045: DOUBLE
10046: LD_INT 1
10048: DEC
10049: ST_TO_ADDR
10050: LD_INT 8
10052: PUSH
10053: FOR_TO
10054: IFFALSE 10073
// SetRestrict ( b_depot , i , state_disabled ) ;
10056: LD_INT 0
10058: PPUSH
10059: LD_VAR 0 1
10063: PPUSH
10064: LD_INT 0
10066: PPUSH
10067: CALL_OW 324
10071: GO 10053
10073: POP
10074: POP
// end ;
10075: PPOPN 1
10077: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10078: LD_EXP 36
10082: PUSH
10083: CALL 10288 0 0
10087: AND
10088: PUSH
10089: LD_OWVAR 4
10093: AND
10094: IFFALSE 10285
10096: GO 10098
10098: DISABLE
10099: LD_INT 0
10101: PPUSH
10102: PPUSH
// begin canWin := false ;
10103: LD_ADDR_VAR 0 2
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// if not HasPower ( your_side ) then
10111: LD_OWVAR 2
10115: PPUSH
10116: CALL 10328 0 1
10120: NOT
10121: IFFALSE 10132
// begin Multiplayer_Loose_Message ;
10123: CALL_OW 521
// enable ( mpLose ) ;
10127: LD_INT 102
10129: ENABLE_MARKED
// end else
10130: GO 10285
// begin canWin := true ;
10132: LD_ADDR_VAR 0 2
10136: PUSH
10137: LD_INT 1
10139: ST_TO_ADDR
// for i := 1 to 8 do
10140: LD_ADDR_VAR 0 1
10144: PUSH
10145: DOUBLE
10146: LD_INT 1
10148: DEC
10149: ST_TO_ADDR
10150: LD_INT 8
10152: PUSH
10153: FOR_TO
10154: IFFALSE 10271
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10156: LD_EXP 5
10160: PUSH
10161: LD_VAR 0 1
10165: ARRAY
10166: PUSH
10167: LD_VAR 0 1
10171: PPUSH
10172: CALL_OW 108
10176: AND
10177: PUSH
10178: LD_VAR 0 1
10182: PUSH
10183: LD_OWVAR 2
10187: NONEQUAL
10188: AND
10189: IFFALSE 10269
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10191: LD_EXP 6
10195: PUSH
10196: LD_VAR 0 1
10200: ARRAY
10201: NOT
10202: PUSH
10203: LD_EXP 6
10207: PUSH
10208: LD_VAR 0 1
10212: ARRAY
10213: PUSH
10214: LD_EXP 6
10218: PUSH
10219: LD_OWVAR 2
10223: ARRAY
10224: NONEQUAL
10225: PUSH
10226: LD_OWVAR 2
10230: PPUSH
10231: LD_VAR 0 1
10235: PPUSH
10236: CALL_OW 81
10240: PUSH
10241: LD_INT 1
10243: NONEQUAL
10244: AND
10245: OR
10246: IFFALSE 10269
// if HasPower ( i ) then
10248: LD_VAR 0 1
10252: PPUSH
10253: CALL 10328 0 1
10257: IFFALSE 10269
// begin canWin := false ;
10259: LD_ADDR_VAR 0 2
10263: PUSH
10264: LD_INT 0
10266: ST_TO_ADDR
// break ;
10267: GO 10271
// end ;
10269: GO 10153
10271: POP
10272: POP
// if canWin then
10273: LD_VAR 0 2
10277: IFFALSE 10284
// enable ( mpWin ) else
10279: LD_INT 101
10281: ENABLE_MARKED
10282: GO 10285
// enable ;
10284: ENABLE
// end ; end ;
10285: PPOPN 2
10287: END
// function CanWinLoose ; begin
10288: LD_INT 0
10290: PPUSH
// result := true ;
10291: LD_ADDR_VAR 0 1
10295: PUSH
10296: LD_INT 1
10298: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10299: CALL_OW 531
10303: PUSH
10304: CALL_OW 519
10308: PUSH
10309: LD_INT 1
10311: GREATER
10312: AND
10313: IFFALSE 10323
// result := false ;
10315: LD_ADDR_VAR 0 1
10319: PUSH
10320: LD_INT 0
10322: ST_TO_ADDR
// end ;
10323: LD_VAR 0 1
10327: RET
// function HasPower ( i ) ; begin
10328: LD_INT 0
10330: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10331: LD_INT 22
10333: PUSH
10334: LD_VAR 0 1
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 2
10345: PUSH
10346: LD_INT 30
10348: PUSH
10349: LD_INT 0
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 30
10358: PUSH
10359: LD_INT 1
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PPUSH
10375: CALL_OW 69
10379: NOT
10380: IFFALSE 10384
// exit ;
10382: GO 10449
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10384: LD_ADDR_VAR 0 2
10388: PUSH
10389: LD_INT 22
10391: PUSH
10392: LD_VAR 0 1
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: LD_INT 2
10403: PUSH
10404: LD_INT 21
10406: PUSH
10407: LD_INT 1
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: LD_INT 33
10416: PUSH
10417: LD_INT 3
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PUSH
10424: LD_INT 33
10426: PUSH
10427: LD_INT 5
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PPUSH
10444: CALL_OW 69
10448: ST_TO_ADDR
// end ; end_of_file
10449: LD_VAR 0 2
10453: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
10454: LD_VAR 0 1
10458: PUSH
10459: LD_INT 200
10461: DOUBLE
10462: GREATEREQUAL
10463: IFFALSE 10471
10465: LD_INT 299
10467: DOUBLE
10468: LESSEQUAL
10469: IFTRUE 10473
10471: GO 10505
10473: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
10474: LD_VAR 0 1
10478: PPUSH
10479: LD_VAR 0 2
10483: PPUSH
10484: LD_VAR 0 3
10488: PPUSH
10489: LD_VAR 0 4
10493: PPUSH
10494: LD_VAR 0 5
10498: PPUSH
10499: CALL 11106 0 5
10503: GO 10582
10505: LD_INT 300
10507: DOUBLE
10508: GREATEREQUAL
10509: IFFALSE 10517
10511: LD_INT 399
10513: DOUBLE
10514: LESSEQUAL
10515: IFTRUE 10519
10517: GO 10581
10519: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
10520: LD_VAR 0 1
10524: PPUSH
10525: LD_VAR 0 2
10529: PPUSH
10530: LD_VAR 0 3
10534: PPUSH
10535: LD_VAR 0 4
10539: PPUSH
10540: LD_VAR 0 5
10544: PPUSH
10545: LD_VAR 0 6
10549: PPUSH
10550: LD_VAR 0 7
10554: PPUSH
10555: LD_VAR 0 8
10559: PPUSH
10560: LD_VAR 0 9
10564: PPUSH
10565: LD_VAR 0 10
10569: PPUSH
10570: LD_VAR 0 11
10574: PPUSH
10575: CALL 28384 0 11
10579: GO 10582
10581: POP
// end ;
10582: PPOPN 11
10584: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
10585: LD_VAR 0 1
10589: PPUSH
10590: LD_VAR 0 2
10594: PPUSH
10595: LD_VAR 0 3
10599: PPUSH
10600: LD_VAR 0 4
10604: PPUSH
10605: LD_VAR 0 5
10609: PPUSH
10610: CALL 10667 0 5
// end ; end_of_file
10614: PPOPN 5
10616: END
// export function SOS_UnitDestroyed ( un ) ; begin
10617: LD_INT 0
10619: PPUSH
// ComRadiation ( un ) ;
10620: LD_VAR 0 1
10624: PPUSH
10625: CALL 11510 0 1
// end ;
10629: LD_VAR 0 2
10633: RET
// export function SOS_UnitKamikazed ( un ) ; begin
10634: LD_INT 0
10636: PPUSH
// ComRadiation ( un ) ;
10637: LD_VAR 0 1
10641: PPUSH
10642: CALL 11510 0 1
// end ;
10646: LD_VAR 0 2
10650: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10651: LD_INT 0
10653: PPUSH
// end ;
10654: LD_VAR 0 4
10658: RET
// export function SOS_Command ( cmd ) ; begin
10659: LD_INT 0
10661: PPUSH
// end ;
10662: LD_VAR 0 2
10666: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10667: LD_INT 0
10669: PPUSH
// end ;
10670: LD_VAR 0 6
10674: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
10675: LD_INT 0
10677: PPUSH
10678: PPUSH
10679: PPUSH
10680: PPUSH
// if not vehicle or not factory then
10681: LD_VAR 0 1
10685: NOT
10686: PUSH
10687: LD_VAR 0 2
10691: NOT
10692: OR
10693: IFFALSE 10697
// exit ;
10695: GO 11101
// if factoryWaypoints >= factory then
10697: LD_EXP 110
10701: PUSH
10702: LD_VAR 0 2
10706: GREATEREQUAL
10707: IFFALSE 11101
// if factoryWaypoints [ factory ] then
10709: LD_EXP 110
10713: PUSH
10714: LD_VAR 0 2
10718: ARRAY
10719: IFFALSE 11101
// begin if GetControl ( vehicle ) = control_manual then
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL_OW 263
10730: PUSH
10731: LD_INT 1
10733: EQUAL
10734: IFFALSE 10988
// begin driver := IsDrivenBy ( vehicle ) ;
10736: LD_ADDR_VAR 0 5
10740: PUSH
10741: LD_VAR 0 1
10745: PPUSH
10746: CALL_OW 311
10750: ST_TO_ADDR
// tag := GetTag ( driver ) ;
10751: LD_ADDR_VAR 0 4
10755: PUSH
10756: LD_VAR 0 5
10760: PPUSH
10761: CALL_OW 110
10765: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
10766: LD_VAR 0 4
10770: PUSH
10771: LD_INT 501
10773: EQUAL
10774: PUSH
10775: LD_VAR 0 1
10779: PPUSH
10780: CALL_OW 110
10784: PUSH
10785: LD_INT 501
10787: EQUAL
10788: OR
10789: IFFALSE 10793
// exit ;
10791: GO 11101
// if not HasTask ( driver ) then
10793: LD_VAR 0 5
10797: PPUSH
10798: CALL_OW 314
10802: NOT
10803: IFFALSE 10986
// begin SetTag ( driver , tDriver ) ;
10805: LD_VAR 0 5
10809: PPUSH
10810: LD_INT 501
10812: PPUSH
10813: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
10817: LD_VAR 0 1
10821: PPUSH
10822: LD_INT 501
10824: PPUSH
10825: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10829: LD_ADDR_VAR 0 6
10833: PUSH
10834: LD_EXP 110
10838: PUSH
10839: LD_VAR 0 2
10843: ARRAY
10844: PUSH
10845: LD_INT 3
10847: ARRAY
10848: PPUSH
10849: LD_EXP 110
10853: PUSH
10854: LD_VAR 0 2
10858: ARRAY
10859: PUSH
10860: LD_INT 4
10862: ARRAY
10863: PPUSH
10864: CALL_OW 428
10868: ST_TO_ADDR
// if hex then
10869: LD_VAR 0 6
10873: IFFALSE 10891
// ComMoveUnit ( driver , hex ) else
10875: LD_VAR 0 5
10879: PPUSH
10880: LD_VAR 0 6
10884: PPUSH
10885: CALL_OW 112
10889: GO 10930
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10891: LD_VAR 0 5
10895: PPUSH
10896: LD_EXP 110
10900: PUSH
10901: LD_VAR 0 2
10905: ARRAY
10906: PUSH
10907: LD_INT 3
10909: ARRAY
10910: PPUSH
10911: LD_EXP 110
10915: PUSH
10916: LD_VAR 0 2
10920: ARRAY
10921: PUSH
10922: LD_INT 4
10924: ARRAY
10925: PPUSH
10926: CALL_OW 111
// AddComExitVehicle ( driver ) ;
10930: LD_VAR 0 5
10934: PPUSH
10935: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10939: LD_VAR 0 5
10943: PPUSH
10944: LD_VAR 0 2
10948: PPUSH
10949: CALL_OW 180
// wait ( 0 0$1 ) ;
10953: LD_INT 35
10955: PPUSH
10956: CALL_OW 67
// SetTag ( driver , tag ) ;
10960: LD_VAR 0 5
10964: PPUSH
10965: LD_VAR 0 4
10969: PPUSH
10970: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
10974: LD_VAR 0 1
10978: PPUSH
10979: LD_INT 0
10981: PPUSH
10982: CALL_OW 109
// end ; end else
10986: GO 11101
// if GetControl ( vehicle ) = control_remote then
10988: LD_VAR 0 1
10992: PPUSH
10993: CALL_OW 263
10997: PUSH
10998: LD_INT 2
11000: EQUAL
11001: IFFALSE 11062
// begin wait ( 0 0$2 ) ;
11003: LD_INT 70
11005: PPUSH
11006: CALL_OW 67
// if Connect ( vehicle ) then
11010: LD_VAR 0 1
11014: PPUSH
11015: CALL 39991 0 1
11019: IFFALSE 11060
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11021: LD_VAR 0 1
11025: PPUSH
11026: LD_EXP 110
11030: PUSH
11031: LD_VAR 0 2
11035: ARRAY
11036: PUSH
11037: LD_INT 3
11039: ARRAY
11040: PPUSH
11041: LD_EXP 110
11045: PUSH
11046: LD_VAR 0 2
11050: ARRAY
11051: PUSH
11052: LD_INT 4
11054: ARRAY
11055: PPUSH
11056: CALL_OW 171
// end else
11060: GO 11101
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11062: LD_VAR 0 1
11066: PPUSH
11067: LD_EXP 110
11071: PUSH
11072: LD_VAR 0 2
11076: ARRAY
11077: PUSH
11078: LD_INT 3
11080: ARRAY
11081: PPUSH
11082: LD_EXP 110
11086: PUSH
11087: LD_VAR 0 2
11091: ARRAY
11092: PUSH
11093: LD_INT 4
11095: ARRAY
11096: PPUSH
11097: CALL_OW 171
// end ; end ;
11101: LD_VAR 0 3
11105: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11106: LD_INT 0
11108: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11109: LD_VAR 0 1
11113: PUSH
11114: LD_INT 250
11116: EQUAL
11117: PUSH
11118: LD_VAR 0 2
11122: PPUSH
11123: CALL_OW 264
11127: PUSH
11128: LD_INT 81
11130: EQUAL
11131: AND
11132: IFFALSE 11153
// MinerPlaceMine ( unit , x , y ) ;
11134: LD_VAR 0 2
11138: PPUSH
11139: LD_VAR 0 4
11143: PPUSH
11144: LD_VAR 0 5
11148: PPUSH
11149: CALL 14245 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11153: LD_VAR 0 1
11157: PUSH
11158: LD_INT 251
11160: EQUAL
11161: PUSH
11162: LD_VAR 0 2
11166: PPUSH
11167: CALL_OW 264
11171: PUSH
11172: LD_INT 81
11174: EQUAL
11175: AND
11176: IFFALSE 11197
// MinerDetonateMine ( unit , x , y ) ;
11178: LD_VAR 0 2
11182: PPUSH
11183: LD_VAR 0 4
11187: PPUSH
11188: LD_VAR 0 5
11192: PPUSH
11193: CALL 14520 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11197: LD_VAR 0 1
11201: PUSH
11202: LD_INT 252
11204: EQUAL
11205: PUSH
11206: LD_VAR 0 2
11210: PPUSH
11211: CALL_OW 264
11215: PUSH
11216: LD_INT 81
11218: EQUAL
11219: AND
11220: IFFALSE 11241
// MinerCreateMinefield ( unit , x , y ) ;
11222: LD_VAR 0 2
11226: PPUSH
11227: LD_VAR 0 4
11231: PPUSH
11232: LD_VAR 0 5
11236: PPUSH
11237: CALL 14937 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11241: LD_VAR 0 1
11245: PUSH
11246: LD_INT 253
11248: EQUAL
11249: PUSH
11250: LD_VAR 0 2
11254: PPUSH
11255: CALL_OW 257
11259: PUSH
11260: LD_INT 5
11262: EQUAL
11263: AND
11264: IFFALSE 11285
// ComBinocular ( unit , x , y ) ;
11266: LD_VAR 0 2
11270: PPUSH
11271: LD_VAR 0 4
11275: PPUSH
11276: LD_VAR 0 5
11280: PPUSH
11281: CALL 15306 0 3
// if selectedUnit then
11285: LD_VAR 0 3
11289: IFFALSE 11345
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11291: LD_VAR 0 1
11295: PUSH
11296: LD_INT 254
11298: EQUAL
11299: PUSH
11300: LD_VAR 0 2
11304: PPUSH
11305: CALL_OW 264
11309: PUSH
11310: LD_INT 99
11312: EQUAL
11313: AND
11314: PUSH
11315: LD_VAR 0 3
11319: PPUSH
11320: CALL_OW 263
11324: PUSH
11325: LD_INT 3
11327: EQUAL
11328: AND
11329: IFFALSE 11345
// HackDestroyVehicle ( unit , selectedUnit ) ;
11331: LD_VAR 0 2
11335: PPUSH
11336: LD_VAR 0 3
11340: PPUSH
11341: CALL 13609 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11345: LD_VAR 0 1
11349: PUSH
11350: LD_INT 255
11352: EQUAL
11353: PUSH
11354: LD_VAR 0 2
11358: PPUSH
11359: CALL_OW 264
11363: PUSH
11364: LD_INT 14
11366: PUSH
11367: LD_INT 53
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: IN
11374: AND
11375: PUSH
11376: LD_VAR 0 4
11380: PPUSH
11381: LD_VAR 0 5
11385: PPUSH
11386: CALL_OW 488
11390: AND
11391: IFFALSE 11415
// CutTreeXYR ( unit , x , y , 12 ) ;
11393: LD_VAR 0 2
11397: PPUSH
11398: LD_VAR 0 4
11402: PPUSH
11403: LD_VAR 0 5
11407: PPUSH
11408: LD_INT 12
11410: PPUSH
11411: CALL 11606 0 4
// if cmd = 256 then
11415: LD_VAR 0 1
11419: PUSH
11420: LD_INT 256
11422: EQUAL
11423: IFFALSE 11444
// SetFactoryWaypoint ( unit , x , y ) ;
11425: LD_VAR 0 2
11429: PPUSH
11430: LD_VAR 0 4
11434: PPUSH
11435: LD_VAR 0 5
11439: PPUSH
11440: CALL 30372 0 3
// if cmd = 257 then
11444: LD_VAR 0 1
11448: PUSH
11449: LD_INT 257
11451: EQUAL
11452: IFFALSE 11473
// SetWarehouseGatheringPoint ( unit , x , y ) ;
11454: LD_VAR 0 2
11458: PPUSH
11459: LD_VAR 0 4
11463: PPUSH
11464: LD_VAR 0 5
11468: PPUSH
11469: CALL 30734 0 3
// if cmd = 258 then
11473: LD_VAR 0 1
11477: PUSH
11478: LD_INT 258
11480: EQUAL
11481: IFFALSE 11505
// BurnTreeXYR ( unit , x , y , 8 ) ;
11483: LD_VAR 0 2
11487: PPUSH
11488: LD_VAR 0 4
11492: PPUSH
11493: LD_VAR 0 5
11497: PPUSH
11498: LD_INT 8
11500: PPUSH
11501: CALL 12000 0 4
// end ;
11505: LD_VAR 0 6
11509: RET
// export function ComRadiation ( un ) ; var eff ; begin
11510: LD_INT 0
11512: PPUSH
11513: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
11514: LD_VAR 0 1
11518: PPUSH
11519: CALL_OW 264
11523: PUSH
11524: LD_INT 91
11526: NONEQUAL
11527: IFFALSE 11531
// exit ;
11529: GO 11601
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
11531: LD_INT 68
11533: PPUSH
11534: LD_VAR 0 1
11538: PPUSH
11539: CALL_OW 255
11543: PPUSH
11544: CALL_OW 321
11548: PUSH
11549: LD_INT 2
11551: EQUAL
11552: IFFALSE 11564
// eff := 70 else
11554: LD_ADDR_VAR 0 3
11558: PUSH
11559: LD_INT 70
11561: ST_TO_ADDR
11562: GO 11572
// eff := 30 ;
11564: LD_ADDR_VAR 0 3
11568: PUSH
11569: LD_INT 30
11571: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
11572: LD_VAR 0 1
11576: PPUSH
11577: CALL_OW 250
11581: PPUSH
11582: LD_VAR 0 1
11586: PPUSH
11587: CALL_OW 251
11591: PPUSH
11592: LD_VAR 0 3
11596: PPUSH
11597: CALL_OW 495
// end ;
11601: LD_VAR 0 2
11605: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11606: LD_INT 0
11608: PPUSH
11609: PPUSH
11610: PPUSH
11611: PPUSH
11612: PPUSH
11613: PPUSH
11614: PPUSH
11615: PPUSH
11616: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
11617: LD_VAR 0 1
11621: PPUSH
11622: CALL_OW 302
11626: NOT
11627: PUSH
11628: LD_VAR 0 2
11632: PPUSH
11633: LD_VAR 0 3
11637: PPUSH
11638: CALL_OW 488
11642: NOT
11643: OR
11644: PUSH
11645: LD_VAR 0 4
11649: NOT
11650: OR
11651: IFFALSE 11655
// exit ;
11653: GO 11995
// list := [ ] ;
11655: LD_ADDR_VAR 0 13
11659: PUSH
11660: EMPTY
11661: ST_TO_ADDR
// if x - r < 0 then
11662: LD_VAR 0 2
11666: PUSH
11667: LD_VAR 0 4
11671: MINUS
11672: PUSH
11673: LD_INT 0
11675: LESS
11676: IFFALSE 11688
// min_x := 0 else
11678: LD_ADDR_VAR 0 7
11682: PUSH
11683: LD_INT 0
11685: ST_TO_ADDR
11686: GO 11704
// min_x := x - r ;
11688: LD_ADDR_VAR 0 7
11692: PUSH
11693: LD_VAR 0 2
11697: PUSH
11698: LD_VAR 0 4
11702: MINUS
11703: ST_TO_ADDR
// if y - r < 0 then
11704: LD_VAR 0 3
11708: PUSH
11709: LD_VAR 0 4
11713: MINUS
11714: PUSH
11715: LD_INT 0
11717: LESS
11718: IFFALSE 11730
// min_y := 0 else
11720: LD_ADDR_VAR 0 8
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
11728: GO 11746
// min_y := y - r ;
11730: LD_ADDR_VAR 0 8
11734: PUSH
11735: LD_VAR 0 3
11739: PUSH
11740: LD_VAR 0 4
11744: MINUS
11745: ST_TO_ADDR
// max_x := x + r ;
11746: LD_ADDR_VAR 0 9
11750: PUSH
11751: LD_VAR 0 2
11755: PUSH
11756: LD_VAR 0 4
11760: PLUS
11761: ST_TO_ADDR
// max_y := y + r ;
11762: LD_ADDR_VAR 0 10
11766: PUSH
11767: LD_VAR 0 3
11771: PUSH
11772: LD_VAR 0 4
11776: PLUS
11777: ST_TO_ADDR
// for _x = min_x to max_x do
11778: LD_ADDR_VAR 0 11
11782: PUSH
11783: DOUBLE
11784: LD_VAR 0 7
11788: DEC
11789: ST_TO_ADDR
11790: LD_VAR 0 9
11794: PUSH
11795: FOR_TO
11796: IFFALSE 11913
// for _y = min_y to max_y do
11798: LD_ADDR_VAR 0 12
11802: PUSH
11803: DOUBLE
11804: LD_VAR 0 8
11808: DEC
11809: ST_TO_ADDR
11810: LD_VAR 0 10
11814: PUSH
11815: FOR_TO
11816: IFFALSE 11909
// begin if not ValidHex ( _x , _y ) then
11818: LD_VAR 0 11
11822: PPUSH
11823: LD_VAR 0 12
11827: PPUSH
11828: CALL_OW 488
11832: NOT
11833: IFFALSE 11837
// continue ;
11835: GO 11815
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11837: LD_VAR 0 11
11841: PPUSH
11842: LD_VAR 0 12
11846: PPUSH
11847: CALL_OW 351
11851: PUSH
11852: LD_VAR 0 11
11856: PPUSH
11857: LD_VAR 0 12
11861: PPUSH
11862: CALL_OW 554
11866: AND
11867: IFFALSE 11907
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11869: LD_ADDR_VAR 0 13
11873: PUSH
11874: LD_VAR 0 13
11878: PPUSH
11879: LD_VAR 0 13
11883: PUSH
11884: LD_INT 1
11886: PLUS
11887: PPUSH
11888: LD_VAR 0 11
11892: PUSH
11893: LD_VAR 0 12
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PPUSH
11902: CALL_OW 2
11906: ST_TO_ADDR
// end ;
11907: GO 11815
11909: POP
11910: POP
11911: GO 11795
11913: POP
11914: POP
// if not list then
11915: LD_VAR 0 13
11919: NOT
11920: IFFALSE 11924
// exit ;
11922: GO 11995
// for i in list do
11924: LD_ADDR_VAR 0 6
11928: PUSH
11929: LD_VAR 0 13
11933: PUSH
11934: FOR_IN
11935: IFFALSE 11993
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11937: LD_VAR 0 1
11941: PPUSH
11942: LD_STRING M
11944: PUSH
11945: LD_VAR 0 6
11949: PUSH
11950: LD_INT 1
11952: ARRAY
11953: PUSH
11954: LD_VAR 0 6
11958: PUSH
11959: LD_INT 2
11961: ARRAY
11962: PUSH
11963: LD_INT 0
11965: PUSH
11966: LD_INT 0
11968: PUSH
11969: LD_INT 0
11971: PUSH
11972: LD_INT 0
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: PPUSH
11987: CALL_OW 447
11991: GO 11934
11993: POP
11994: POP
// end ;
11995: LD_VAR 0 5
11999: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
12000: LD_INT 0
12002: PPUSH
12003: PPUSH
12004: PPUSH
12005: PPUSH
12006: PPUSH
12007: PPUSH
12008: PPUSH
12009: PPUSH
12010: PPUSH
12011: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
12012: LD_VAR 0 1
12016: PPUSH
12017: CALL_OW 302
12021: NOT
12022: PUSH
12023: LD_VAR 0 2
12027: PPUSH
12028: LD_VAR 0 3
12032: PPUSH
12033: CALL_OW 488
12037: NOT
12038: OR
12039: PUSH
12040: LD_VAR 0 4
12044: NOT
12045: OR
12046: IFFALSE 12050
// exit ;
12048: GO 12563
// list := [ ] ;
12050: LD_ADDR_VAR 0 13
12054: PUSH
12055: EMPTY
12056: ST_TO_ADDR
// if x - r < 0 then
12057: LD_VAR 0 2
12061: PUSH
12062: LD_VAR 0 4
12066: MINUS
12067: PUSH
12068: LD_INT 0
12070: LESS
12071: IFFALSE 12083
// min_x := 0 else
12073: LD_ADDR_VAR 0 7
12077: PUSH
12078: LD_INT 0
12080: ST_TO_ADDR
12081: GO 12099
// min_x := x - r ;
12083: LD_ADDR_VAR 0 7
12087: PUSH
12088: LD_VAR 0 2
12092: PUSH
12093: LD_VAR 0 4
12097: MINUS
12098: ST_TO_ADDR
// if y - r < 0 then
12099: LD_VAR 0 3
12103: PUSH
12104: LD_VAR 0 4
12108: MINUS
12109: PUSH
12110: LD_INT 0
12112: LESS
12113: IFFALSE 12125
// min_y := 0 else
12115: LD_ADDR_VAR 0 8
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
12123: GO 12141
// min_y := y - r ;
12125: LD_ADDR_VAR 0 8
12129: PUSH
12130: LD_VAR 0 3
12134: PUSH
12135: LD_VAR 0 4
12139: MINUS
12140: ST_TO_ADDR
// max_x := x + r ;
12141: LD_ADDR_VAR 0 9
12145: PUSH
12146: LD_VAR 0 2
12150: PUSH
12151: LD_VAR 0 4
12155: PLUS
12156: ST_TO_ADDR
// max_y := y + r ;
12157: LD_ADDR_VAR 0 10
12161: PUSH
12162: LD_VAR 0 3
12166: PUSH
12167: LD_VAR 0 4
12171: PLUS
12172: ST_TO_ADDR
// for _x = min_x to max_x do
12173: LD_ADDR_VAR 0 11
12177: PUSH
12178: DOUBLE
12179: LD_VAR 0 7
12183: DEC
12184: ST_TO_ADDR
12185: LD_VAR 0 9
12189: PUSH
12190: FOR_TO
12191: IFFALSE 12308
// for _y = min_y to max_y do
12193: LD_ADDR_VAR 0 12
12197: PUSH
12198: DOUBLE
12199: LD_VAR 0 8
12203: DEC
12204: ST_TO_ADDR
12205: LD_VAR 0 10
12209: PUSH
12210: FOR_TO
12211: IFFALSE 12304
// begin if not ValidHex ( _x , _y ) then
12213: LD_VAR 0 11
12217: PPUSH
12218: LD_VAR 0 12
12222: PPUSH
12223: CALL_OW 488
12227: NOT
12228: IFFALSE 12232
// continue ;
12230: GO 12210
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12232: LD_VAR 0 11
12236: PPUSH
12237: LD_VAR 0 12
12241: PPUSH
12242: CALL_OW 351
12246: PUSH
12247: LD_VAR 0 11
12251: PPUSH
12252: LD_VAR 0 12
12256: PPUSH
12257: CALL_OW 554
12261: AND
12262: IFFALSE 12302
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12264: LD_ADDR_VAR 0 13
12268: PUSH
12269: LD_VAR 0 13
12273: PPUSH
12274: LD_VAR 0 13
12278: PUSH
12279: LD_INT 1
12281: PLUS
12282: PPUSH
12283: LD_VAR 0 11
12287: PUSH
12288: LD_VAR 0 12
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PPUSH
12297: CALL_OW 2
12301: ST_TO_ADDR
// end ;
12302: GO 12210
12304: POP
12305: POP
12306: GO 12190
12308: POP
12309: POP
// if not list then
12310: LD_VAR 0 13
12314: NOT
12315: IFFALSE 12319
// exit ;
12317: GO 12563
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
12319: LD_ADDR_VAR 0 13
12323: PUSH
12324: LD_VAR 0 1
12328: PPUSH
12329: LD_VAR 0 13
12333: PPUSH
12334: LD_INT 1
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: CALL 37133 0 4
12344: ST_TO_ADDR
// ComStop ( flame ) ;
12345: LD_VAR 0 1
12349: PPUSH
12350: CALL_OW 141
// for i in list do
12354: LD_ADDR_VAR 0 6
12358: PUSH
12359: LD_VAR 0 13
12363: PUSH
12364: FOR_IN
12365: IFFALSE 12396
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
12367: LD_VAR 0 1
12371: PPUSH
12372: LD_VAR 0 6
12376: PUSH
12377: LD_INT 1
12379: ARRAY
12380: PPUSH
12381: LD_VAR 0 6
12385: PUSH
12386: LD_INT 2
12388: ARRAY
12389: PPUSH
12390: CALL_OW 176
12394: GO 12364
12396: POP
12397: POP
// repeat wait ( 0 0$1 ) ;
12398: LD_INT 35
12400: PPUSH
12401: CALL_OW 67
// task := GetTaskList ( flame ) ;
12405: LD_ADDR_VAR 0 14
12409: PUSH
12410: LD_VAR 0 1
12414: PPUSH
12415: CALL_OW 437
12419: ST_TO_ADDR
// if not task then
12420: LD_VAR 0 14
12424: NOT
12425: IFFALSE 12429
// exit ;
12427: GO 12563
// if task [ 1 ] [ 1 ] <> | then
12429: LD_VAR 0 14
12433: PUSH
12434: LD_INT 1
12436: ARRAY
12437: PUSH
12438: LD_INT 1
12440: ARRAY
12441: PUSH
12442: LD_STRING |
12444: NONEQUAL
12445: IFFALSE 12449
// exit ;
12447: GO 12563
// _x := task [ 1 ] [ 2 ] ;
12449: LD_ADDR_VAR 0 11
12453: PUSH
12454: LD_VAR 0 14
12458: PUSH
12459: LD_INT 1
12461: ARRAY
12462: PUSH
12463: LD_INT 2
12465: ARRAY
12466: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
12467: LD_ADDR_VAR 0 12
12471: PUSH
12472: LD_VAR 0 14
12476: PUSH
12477: LD_INT 1
12479: ARRAY
12480: PUSH
12481: LD_INT 3
12483: ARRAY
12484: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
12485: LD_VAR 0 11
12489: PPUSH
12490: LD_VAR 0 12
12494: PPUSH
12495: CALL_OW 351
12499: NOT
12500: PUSH
12501: LD_VAR 0 11
12505: PPUSH
12506: LD_VAR 0 12
12510: PPUSH
12511: CALL_OW 554
12515: NOT
12516: OR
12517: IFFALSE 12551
// begin task := Delete ( task , 1 ) ;
12519: LD_ADDR_VAR 0 14
12523: PUSH
12524: LD_VAR 0 14
12528: PPUSH
12529: LD_INT 1
12531: PPUSH
12532: CALL_OW 3
12536: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
12537: LD_VAR 0 1
12541: PPUSH
12542: LD_VAR 0 14
12546: PPUSH
12547: CALL_OW 446
// end ; until not HasTask ( flame ) ;
12551: LD_VAR 0 1
12555: PPUSH
12556: CALL_OW 314
12560: NOT
12561: IFFALSE 12398
// end ;
12563: LD_VAR 0 5
12567: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
12568: LD_EXP 41
12572: NOT
12573: IFFALSE 12623
12575: GO 12577
12577: DISABLE
// begin initHack := true ;
12578: LD_ADDR_EXP 41
12582: PUSH
12583: LD_INT 1
12585: ST_TO_ADDR
// hackTanks := [ ] ;
12586: LD_ADDR_EXP 42
12590: PUSH
12591: EMPTY
12592: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
12593: LD_ADDR_EXP 43
12597: PUSH
12598: EMPTY
12599: ST_TO_ADDR
// hackLimit := 3 ;
12600: LD_ADDR_EXP 44
12604: PUSH
12605: LD_INT 3
12607: ST_TO_ADDR
// hackDist := 12 ;
12608: LD_ADDR_EXP 45
12612: PUSH
12613: LD_INT 12
12615: ST_TO_ADDR
// hackCounter := [ ] ;
12616: LD_ADDR_EXP 46
12620: PUSH
12621: EMPTY
12622: ST_TO_ADDR
// end ;
12623: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
12624: LD_EXP 41
12628: PUSH
12629: LD_INT 34
12631: PUSH
12632: LD_INT 99
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PPUSH
12639: CALL_OW 69
12643: AND
12644: IFFALSE 12897
12646: GO 12648
12648: DISABLE
12649: LD_INT 0
12651: PPUSH
12652: PPUSH
// begin enable ;
12653: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
12654: LD_ADDR_VAR 0 1
12658: PUSH
12659: LD_INT 34
12661: PUSH
12662: LD_INT 99
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PPUSH
12669: CALL_OW 69
12673: PUSH
12674: FOR_IN
12675: IFFALSE 12895
// begin if not i in hackTanks then
12677: LD_VAR 0 1
12681: PUSH
12682: LD_EXP 42
12686: IN
12687: NOT
12688: IFFALSE 12771
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
12690: LD_ADDR_EXP 42
12694: PUSH
12695: LD_EXP 42
12699: PPUSH
12700: LD_EXP 42
12704: PUSH
12705: LD_INT 1
12707: PLUS
12708: PPUSH
12709: LD_VAR 0 1
12713: PPUSH
12714: CALL_OW 1
12718: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
12719: LD_ADDR_EXP 43
12723: PUSH
12724: LD_EXP 43
12728: PPUSH
12729: LD_EXP 43
12733: PUSH
12734: LD_INT 1
12736: PLUS
12737: PPUSH
12738: EMPTY
12739: PPUSH
12740: CALL_OW 1
12744: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
12745: LD_ADDR_EXP 46
12749: PUSH
12750: LD_EXP 46
12754: PPUSH
12755: LD_EXP 46
12759: PUSH
12760: LD_INT 1
12762: PLUS
12763: PPUSH
12764: EMPTY
12765: PPUSH
12766: CALL_OW 1
12770: ST_TO_ADDR
// end ; if not IsOk ( i ) then
12771: LD_VAR 0 1
12775: PPUSH
12776: CALL_OW 302
12780: NOT
12781: IFFALSE 12794
// begin HackUnlinkAll ( i ) ;
12783: LD_VAR 0 1
12787: PPUSH
12788: CALL 12900 0 1
// continue ;
12792: GO 12674
// end ; HackCheckCapturedStatus ( i ) ;
12794: LD_VAR 0 1
12798: PPUSH
12799: CALL 13343 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12803: LD_ADDR_VAR 0 2
12807: PUSH
12808: LD_INT 81
12810: PUSH
12811: LD_VAR 0 1
12815: PPUSH
12816: CALL_OW 255
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 33
12827: PUSH
12828: LD_INT 3
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: LD_INT 91
12837: PUSH
12838: LD_VAR 0 1
12842: PUSH
12843: LD_EXP 45
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: PUSH
12853: LD_INT 50
12855: PUSH
12856: EMPTY
12857: LIST
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: PPUSH
12865: CALL_OW 69
12869: ST_TO_ADDR
// if not tmp then
12870: LD_VAR 0 2
12874: NOT
12875: IFFALSE 12879
// continue ;
12877: GO 12674
// HackLink ( i , tmp ) ;
12879: LD_VAR 0 1
12883: PPUSH
12884: LD_VAR 0 2
12888: PPUSH
12889: CALL 13036 0 2
// end ;
12893: GO 12674
12895: POP
12896: POP
// end ;
12897: PPOPN 2
12899: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12900: LD_INT 0
12902: PPUSH
12903: PPUSH
12904: PPUSH
// if not hack in hackTanks then
12905: LD_VAR 0 1
12909: PUSH
12910: LD_EXP 42
12914: IN
12915: NOT
12916: IFFALSE 12920
// exit ;
12918: GO 13031
// index := GetElementIndex ( hackTanks , hack ) ;
12920: LD_ADDR_VAR 0 4
12924: PUSH
12925: LD_EXP 42
12929: PPUSH
12930: LD_VAR 0 1
12934: PPUSH
12935: CALL 36430 0 2
12939: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12940: LD_EXP 43
12944: PUSH
12945: LD_VAR 0 4
12949: ARRAY
12950: IFFALSE 13031
// begin for i in hackTanksCaptured [ index ] do
12952: LD_ADDR_VAR 0 3
12956: PUSH
12957: LD_EXP 43
12961: PUSH
12962: LD_VAR 0 4
12966: ARRAY
12967: PUSH
12968: FOR_IN
12969: IFFALSE 12995
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12971: LD_VAR 0 3
12975: PUSH
12976: LD_INT 1
12978: ARRAY
12979: PPUSH
12980: LD_VAR 0 3
12984: PUSH
12985: LD_INT 2
12987: ARRAY
12988: PPUSH
12989: CALL_OW 235
12993: GO 12968
12995: POP
12996: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12997: LD_ADDR_EXP 43
13001: PUSH
13002: LD_EXP 43
13006: PPUSH
13007: LD_VAR 0 4
13011: PPUSH
13012: EMPTY
13013: PPUSH
13014: CALL_OW 1
13018: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
13019: LD_VAR 0 1
13023: PPUSH
13024: LD_INT 0
13026: PPUSH
13027: CALL_OW 505
// end ; end ;
13031: LD_VAR 0 2
13035: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
13036: LD_INT 0
13038: PPUSH
13039: PPUSH
13040: PPUSH
// if not hack in hackTanks or not vehicles then
13041: LD_VAR 0 1
13045: PUSH
13046: LD_EXP 42
13050: IN
13051: NOT
13052: PUSH
13053: LD_VAR 0 2
13057: NOT
13058: OR
13059: IFFALSE 13063
// exit ;
13061: GO 13338
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
13063: LD_ADDR_VAR 0 2
13067: PUSH
13068: LD_VAR 0 1
13072: PPUSH
13073: LD_VAR 0 2
13077: PPUSH
13078: LD_INT 1
13080: PPUSH
13081: LD_INT 1
13083: PPUSH
13084: CALL 37080 0 4
13088: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
13089: LD_ADDR_VAR 0 5
13093: PUSH
13094: LD_EXP 42
13098: PPUSH
13099: LD_VAR 0 1
13103: PPUSH
13104: CALL 36430 0 2
13108: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
13109: LD_EXP 43
13113: PUSH
13114: LD_VAR 0 5
13118: ARRAY
13119: PUSH
13120: LD_EXP 44
13124: LESS
13125: IFFALSE 13314
// begin for i := 1 to vehicles do
13127: LD_ADDR_VAR 0 4
13131: PUSH
13132: DOUBLE
13133: LD_INT 1
13135: DEC
13136: ST_TO_ADDR
13137: LD_VAR 0 2
13141: PUSH
13142: FOR_TO
13143: IFFALSE 13312
// begin if hackTanksCaptured [ index ] = hackLimit then
13145: LD_EXP 43
13149: PUSH
13150: LD_VAR 0 5
13154: ARRAY
13155: PUSH
13156: LD_EXP 44
13160: EQUAL
13161: IFFALSE 13165
// break ;
13163: GO 13312
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
13165: LD_ADDR_EXP 46
13169: PUSH
13170: LD_EXP 46
13174: PPUSH
13175: LD_VAR 0 5
13179: PPUSH
13180: LD_EXP 46
13184: PUSH
13185: LD_VAR 0 5
13189: ARRAY
13190: PUSH
13191: LD_INT 1
13193: PLUS
13194: PPUSH
13195: CALL_OW 1
13199: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
13200: LD_ADDR_EXP 43
13204: PUSH
13205: LD_EXP 43
13209: PPUSH
13210: LD_VAR 0 5
13214: PUSH
13215: LD_EXP 43
13219: PUSH
13220: LD_VAR 0 5
13224: ARRAY
13225: PUSH
13226: LD_INT 1
13228: PLUS
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PPUSH
13234: LD_VAR 0 2
13238: PUSH
13239: LD_VAR 0 4
13243: ARRAY
13244: PUSH
13245: LD_VAR 0 2
13249: PUSH
13250: LD_VAR 0 4
13254: ARRAY
13255: PPUSH
13256: CALL_OW 255
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PPUSH
13265: CALL 36645 0 3
13269: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
13270: LD_VAR 0 2
13274: PUSH
13275: LD_VAR 0 4
13279: ARRAY
13280: PPUSH
13281: LD_VAR 0 1
13285: PPUSH
13286: CALL_OW 255
13290: PPUSH
13291: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
13295: LD_VAR 0 2
13299: PUSH
13300: LD_VAR 0 4
13304: ARRAY
13305: PPUSH
13306: CALL_OW 141
// end ;
13310: GO 13142
13312: POP
13313: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13314: LD_VAR 0 1
13318: PPUSH
13319: LD_EXP 43
13323: PUSH
13324: LD_VAR 0 5
13328: ARRAY
13329: PUSH
13330: LD_INT 0
13332: PLUS
13333: PPUSH
13334: CALL_OW 505
// end ;
13338: LD_VAR 0 3
13342: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
13343: LD_INT 0
13345: PPUSH
13346: PPUSH
13347: PPUSH
13348: PPUSH
// if not hack in hackTanks then
13349: LD_VAR 0 1
13353: PUSH
13354: LD_EXP 42
13358: IN
13359: NOT
13360: IFFALSE 13364
// exit ;
13362: GO 13604
// index := GetElementIndex ( hackTanks , hack ) ;
13364: LD_ADDR_VAR 0 4
13368: PUSH
13369: LD_EXP 42
13373: PPUSH
13374: LD_VAR 0 1
13378: PPUSH
13379: CALL 36430 0 2
13383: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
13384: LD_ADDR_VAR 0 3
13388: PUSH
13389: DOUBLE
13390: LD_EXP 43
13394: PUSH
13395: LD_VAR 0 4
13399: ARRAY
13400: INC
13401: ST_TO_ADDR
13402: LD_INT 1
13404: PUSH
13405: FOR_DOWNTO
13406: IFFALSE 13578
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
13408: LD_ADDR_VAR 0 5
13412: PUSH
13413: LD_EXP 43
13417: PUSH
13418: LD_VAR 0 4
13422: ARRAY
13423: PUSH
13424: LD_VAR 0 3
13428: ARRAY
13429: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
13430: LD_VAR 0 5
13434: PUSH
13435: LD_INT 1
13437: ARRAY
13438: PPUSH
13439: CALL_OW 302
13443: NOT
13444: PUSH
13445: LD_VAR 0 5
13449: PUSH
13450: LD_INT 1
13452: ARRAY
13453: PPUSH
13454: CALL_OW 255
13458: PUSH
13459: LD_VAR 0 1
13463: PPUSH
13464: CALL_OW 255
13468: NONEQUAL
13469: OR
13470: IFFALSE 13576
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
13472: LD_VAR 0 5
13476: PUSH
13477: LD_INT 1
13479: ARRAY
13480: PPUSH
13481: CALL_OW 305
13485: PUSH
13486: LD_VAR 0 5
13490: PUSH
13491: LD_INT 1
13493: ARRAY
13494: PPUSH
13495: CALL_OW 255
13499: PUSH
13500: LD_VAR 0 1
13504: PPUSH
13505: CALL_OW 255
13509: EQUAL
13510: AND
13511: IFFALSE 13535
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
13513: LD_VAR 0 5
13517: PUSH
13518: LD_INT 1
13520: ARRAY
13521: PPUSH
13522: LD_VAR 0 5
13526: PUSH
13527: LD_INT 2
13529: ARRAY
13530: PPUSH
13531: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
13535: LD_ADDR_EXP 43
13539: PUSH
13540: LD_EXP 43
13544: PPUSH
13545: LD_VAR 0 4
13549: PPUSH
13550: LD_EXP 43
13554: PUSH
13555: LD_VAR 0 4
13559: ARRAY
13560: PPUSH
13561: LD_VAR 0 3
13565: PPUSH
13566: CALL_OW 3
13570: PPUSH
13571: CALL_OW 1
13575: ST_TO_ADDR
// end ; end ;
13576: GO 13405
13578: POP
13579: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13580: LD_VAR 0 1
13584: PPUSH
13585: LD_EXP 43
13589: PUSH
13590: LD_VAR 0 4
13594: ARRAY
13595: PUSH
13596: LD_INT 0
13598: PLUS
13599: PPUSH
13600: CALL_OW 505
// end ;
13604: LD_VAR 0 2
13608: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
13609: LD_INT 0
13611: PPUSH
13612: PPUSH
13613: PPUSH
13614: PPUSH
// if not hack in hackTanks then
13615: LD_VAR 0 1
13619: PUSH
13620: LD_EXP 42
13624: IN
13625: NOT
13626: IFFALSE 13630
// exit ;
13628: GO 13715
// index := GetElementIndex ( hackTanks , hack ) ;
13630: LD_ADDR_VAR 0 5
13634: PUSH
13635: LD_EXP 42
13639: PPUSH
13640: LD_VAR 0 1
13644: PPUSH
13645: CALL 36430 0 2
13649: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
13650: LD_ADDR_VAR 0 4
13654: PUSH
13655: DOUBLE
13656: LD_INT 1
13658: DEC
13659: ST_TO_ADDR
13660: LD_EXP 43
13664: PUSH
13665: LD_VAR 0 5
13669: ARRAY
13670: PUSH
13671: FOR_TO
13672: IFFALSE 13713
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
13674: LD_EXP 43
13678: PUSH
13679: LD_VAR 0 5
13683: ARRAY
13684: PUSH
13685: LD_VAR 0 4
13689: ARRAY
13690: PUSH
13691: LD_INT 1
13693: ARRAY
13694: PUSH
13695: LD_VAR 0 2
13699: EQUAL
13700: IFFALSE 13711
// KillUnit ( vehicle ) ;
13702: LD_VAR 0 2
13706: PPUSH
13707: CALL_OW 66
13711: GO 13671
13713: POP
13714: POP
// end ;
13715: LD_VAR 0 3
13719: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
13720: LD_EXP 47
13724: NOT
13725: IFFALSE 13760
13727: GO 13729
13729: DISABLE
// begin initMiner := true ;
13730: LD_ADDR_EXP 47
13734: PUSH
13735: LD_INT 1
13737: ST_TO_ADDR
// minersList := [ ] ;
13738: LD_ADDR_EXP 48
13742: PUSH
13743: EMPTY
13744: ST_TO_ADDR
// minerMinesList := [ ] ;
13745: LD_ADDR_EXP 49
13749: PUSH
13750: EMPTY
13751: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
13752: LD_ADDR_EXP 50
13756: PUSH
13757: LD_INT 5
13759: ST_TO_ADDR
// end ;
13760: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
13761: LD_EXP 47
13765: PUSH
13766: LD_INT 34
13768: PUSH
13769: LD_INT 81
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PPUSH
13776: CALL_OW 69
13780: AND
13781: IFFALSE 14242
13783: GO 13785
13785: DISABLE
13786: LD_INT 0
13788: PPUSH
13789: PPUSH
13790: PPUSH
13791: PPUSH
// begin enable ;
13792: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
13793: LD_ADDR_VAR 0 1
13797: PUSH
13798: LD_INT 34
13800: PUSH
13801: LD_INT 81
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PPUSH
13808: CALL_OW 69
13812: PUSH
13813: FOR_IN
13814: IFFALSE 13886
// begin if not i in minersList then
13816: LD_VAR 0 1
13820: PUSH
13821: LD_EXP 48
13825: IN
13826: NOT
13827: IFFALSE 13884
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13829: LD_ADDR_EXP 48
13833: PUSH
13834: LD_EXP 48
13838: PPUSH
13839: LD_EXP 48
13843: PUSH
13844: LD_INT 1
13846: PLUS
13847: PPUSH
13848: LD_VAR 0 1
13852: PPUSH
13853: CALL_OW 1
13857: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13858: LD_ADDR_EXP 49
13862: PUSH
13863: LD_EXP 49
13867: PPUSH
13868: LD_EXP 49
13872: PUSH
13873: LD_INT 1
13875: PLUS
13876: PPUSH
13877: EMPTY
13878: PPUSH
13879: CALL_OW 1
13883: ST_TO_ADDR
// end end ;
13884: GO 13813
13886: POP
13887: POP
// for i := minerMinesList downto 1 do
13888: LD_ADDR_VAR 0 1
13892: PUSH
13893: DOUBLE
13894: LD_EXP 49
13898: INC
13899: ST_TO_ADDR
13900: LD_INT 1
13902: PUSH
13903: FOR_DOWNTO
13904: IFFALSE 14240
// begin if IsLive ( minersList [ i ] ) then
13906: LD_EXP 48
13910: PUSH
13911: LD_VAR 0 1
13915: ARRAY
13916: PPUSH
13917: CALL_OW 300
13921: IFFALSE 13949
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13923: LD_EXP 48
13927: PUSH
13928: LD_VAR 0 1
13932: ARRAY
13933: PPUSH
13934: LD_EXP 49
13938: PUSH
13939: LD_VAR 0 1
13943: ARRAY
13944: PPUSH
13945: CALL_OW 505
// if not minerMinesList [ i ] then
13949: LD_EXP 49
13953: PUSH
13954: LD_VAR 0 1
13958: ARRAY
13959: NOT
13960: IFFALSE 13964
// continue ;
13962: GO 13903
// for j := minerMinesList [ i ] downto 1 do
13964: LD_ADDR_VAR 0 2
13968: PUSH
13969: DOUBLE
13970: LD_EXP 49
13974: PUSH
13975: LD_VAR 0 1
13979: ARRAY
13980: INC
13981: ST_TO_ADDR
13982: LD_INT 1
13984: PUSH
13985: FOR_DOWNTO
13986: IFFALSE 14236
// begin side := GetSide ( minersList [ i ] ) ;
13988: LD_ADDR_VAR 0 3
13992: PUSH
13993: LD_EXP 48
13997: PUSH
13998: LD_VAR 0 1
14002: ARRAY
14003: PPUSH
14004: CALL_OW 255
14008: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
14009: LD_ADDR_VAR 0 4
14013: PUSH
14014: LD_EXP 49
14018: PUSH
14019: LD_VAR 0 1
14023: ARRAY
14024: PUSH
14025: LD_VAR 0 2
14029: ARRAY
14030: PUSH
14031: LD_INT 1
14033: ARRAY
14034: PPUSH
14035: LD_EXP 49
14039: PUSH
14040: LD_VAR 0 1
14044: ARRAY
14045: PUSH
14046: LD_VAR 0 2
14050: ARRAY
14051: PUSH
14052: LD_INT 2
14054: ARRAY
14055: PPUSH
14056: CALL_OW 428
14060: ST_TO_ADDR
// if not tmp then
14061: LD_VAR 0 4
14065: NOT
14066: IFFALSE 14070
// continue ;
14068: GO 13985
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
14070: LD_VAR 0 4
14074: PUSH
14075: LD_INT 81
14077: PUSH
14078: LD_VAR 0 3
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PPUSH
14087: CALL_OW 69
14091: IN
14092: PUSH
14093: LD_EXP 49
14097: PUSH
14098: LD_VAR 0 1
14102: ARRAY
14103: PUSH
14104: LD_VAR 0 2
14108: ARRAY
14109: PUSH
14110: LD_INT 1
14112: ARRAY
14113: PPUSH
14114: LD_EXP 49
14118: PUSH
14119: LD_VAR 0 1
14123: ARRAY
14124: PUSH
14125: LD_VAR 0 2
14129: ARRAY
14130: PUSH
14131: LD_INT 2
14133: ARRAY
14134: PPUSH
14135: CALL_OW 458
14139: AND
14140: IFFALSE 14234
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
14142: LD_EXP 49
14146: PUSH
14147: LD_VAR 0 1
14151: ARRAY
14152: PUSH
14153: LD_VAR 0 2
14157: ARRAY
14158: PUSH
14159: LD_INT 1
14161: ARRAY
14162: PPUSH
14163: LD_EXP 49
14167: PUSH
14168: LD_VAR 0 1
14172: ARRAY
14173: PUSH
14174: LD_VAR 0 2
14178: ARRAY
14179: PUSH
14180: LD_INT 2
14182: ARRAY
14183: PPUSH
14184: LD_VAR 0 3
14188: PPUSH
14189: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
14193: LD_ADDR_EXP 49
14197: PUSH
14198: LD_EXP 49
14202: PPUSH
14203: LD_VAR 0 1
14207: PPUSH
14208: LD_EXP 49
14212: PUSH
14213: LD_VAR 0 1
14217: ARRAY
14218: PPUSH
14219: LD_VAR 0 2
14223: PPUSH
14224: CALL_OW 3
14228: PPUSH
14229: CALL_OW 1
14233: ST_TO_ADDR
// end ; end ;
14234: GO 13985
14236: POP
14237: POP
// end ;
14238: GO 13903
14240: POP
14241: POP
// end ;
14242: PPOPN 4
14244: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
14245: LD_INT 0
14247: PPUSH
14248: PPUSH
// result := false ;
14249: LD_ADDR_VAR 0 4
14253: PUSH
14254: LD_INT 0
14256: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
14257: LD_VAR 0 1
14261: PPUSH
14262: CALL_OW 264
14266: PUSH
14267: LD_INT 81
14269: EQUAL
14270: NOT
14271: IFFALSE 14275
// exit ;
14273: GO 14515
// index := GetElementIndex ( minersList , unit ) ;
14275: LD_ADDR_VAR 0 5
14279: PUSH
14280: LD_EXP 48
14284: PPUSH
14285: LD_VAR 0 1
14289: PPUSH
14290: CALL 36430 0 2
14294: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
14295: LD_EXP 49
14299: PUSH
14300: LD_VAR 0 5
14304: ARRAY
14305: PUSH
14306: LD_EXP 50
14310: GREATEREQUAL
14311: IFFALSE 14315
// exit ;
14313: GO 14515
// ComMoveXY ( unit , x , y ) ;
14315: LD_VAR 0 1
14319: PPUSH
14320: LD_VAR 0 2
14324: PPUSH
14325: LD_VAR 0 3
14329: PPUSH
14330: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14334: LD_INT 35
14336: PPUSH
14337: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
14341: LD_VAR 0 1
14345: PPUSH
14346: LD_VAR 0 2
14350: PPUSH
14351: LD_VAR 0 3
14355: PPUSH
14356: CALL 68171 0 3
14360: NOT
14361: PUSH
14362: LD_VAR 0 1
14366: PPUSH
14367: CALL_OW 314
14371: AND
14372: IFFALSE 14376
// exit ;
14374: GO 14515
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
14376: LD_VAR 0 2
14380: PPUSH
14381: LD_VAR 0 3
14385: PPUSH
14386: CALL_OW 428
14390: PUSH
14391: LD_VAR 0 1
14395: EQUAL
14396: PUSH
14397: LD_VAR 0 1
14401: PPUSH
14402: CALL_OW 314
14406: NOT
14407: AND
14408: IFFALSE 14334
// PlaySoundXY ( x , y , PlantMine ) ;
14410: LD_VAR 0 2
14414: PPUSH
14415: LD_VAR 0 3
14419: PPUSH
14420: LD_STRING PlantMine
14422: PPUSH
14423: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
14427: LD_VAR 0 2
14431: PPUSH
14432: LD_VAR 0 3
14436: PPUSH
14437: LD_VAR 0 1
14441: PPUSH
14442: CALL_OW 255
14446: PPUSH
14447: LD_INT 0
14449: PPUSH
14450: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
14454: LD_ADDR_EXP 49
14458: PUSH
14459: LD_EXP 49
14463: PPUSH
14464: LD_VAR 0 5
14468: PUSH
14469: LD_EXP 49
14473: PUSH
14474: LD_VAR 0 5
14478: ARRAY
14479: PUSH
14480: LD_INT 1
14482: PLUS
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PPUSH
14488: LD_VAR 0 2
14492: PUSH
14493: LD_VAR 0 3
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PPUSH
14502: CALL 36645 0 3
14506: ST_TO_ADDR
// result := true ;
14507: LD_ADDR_VAR 0 4
14511: PUSH
14512: LD_INT 1
14514: ST_TO_ADDR
// end ;
14515: LD_VAR 0 4
14519: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
14520: LD_INT 0
14522: PPUSH
14523: PPUSH
14524: PPUSH
// if not unit in minersList then
14525: LD_VAR 0 1
14529: PUSH
14530: LD_EXP 48
14534: IN
14535: NOT
14536: IFFALSE 14540
// exit ;
14538: GO 14932
// index := GetElementIndex ( minersList , unit ) ;
14540: LD_ADDR_VAR 0 6
14544: PUSH
14545: LD_EXP 48
14549: PPUSH
14550: LD_VAR 0 1
14554: PPUSH
14555: CALL 36430 0 2
14559: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
14560: LD_ADDR_VAR 0 5
14564: PUSH
14565: DOUBLE
14566: LD_EXP 49
14570: PUSH
14571: LD_VAR 0 6
14575: ARRAY
14576: INC
14577: ST_TO_ADDR
14578: LD_INT 1
14580: PUSH
14581: FOR_DOWNTO
14582: IFFALSE 14743
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
14584: LD_EXP 49
14588: PUSH
14589: LD_VAR 0 6
14593: ARRAY
14594: PUSH
14595: LD_VAR 0 5
14599: ARRAY
14600: PUSH
14601: LD_INT 1
14603: ARRAY
14604: PUSH
14605: LD_VAR 0 2
14609: EQUAL
14610: PUSH
14611: LD_EXP 49
14615: PUSH
14616: LD_VAR 0 6
14620: ARRAY
14621: PUSH
14622: LD_VAR 0 5
14626: ARRAY
14627: PUSH
14628: LD_INT 2
14630: ARRAY
14631: PUSH
14632: LD_VAR 0 3
14636: EQUAL
14637: AND
14638: IFFALSE 14741
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14640: LD_EXP 49
14644: PUSH
14645: LD_VAR 0 6
14649: ARRAY
14650: PUSH
14651: LD_VAR 0 5
14655: ARRAY
14656: PUSH
14657: LD_INT 1
14659: ARRAY
14660: PPUSH
14661: LD_EXP 49
14665: PUSH
14666: LD_VAR 0 6
14670: ARRAY
14671: PUSH
14672: LD_VAR 0 5
14676: ARRAY
14677: PUSH
14678: LD_INT 2
14680: ARRAY
14681: PPUSH
14682: LD_VAR 0 1
14686: PPUSH
14687: CALL_OW 255
14691: PPUSH
14692: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14696: LD_ADDR_EXP 49
14700: PUSH
14701: LD_EXP 49
14705: PPUSH
14706: LD_VAR 0 6
14710: PPUSH
14711: LD_EXP 49
14715: PUSH
14716: LD_VAR 0 6
14720: ARRAY
14721: PPUSH
14722: LD_VAR 0 5
14726: PPUSH
14727: CALL_OW 3
14731: PPUSH
14732: CALL_OW 1
14736: ST_TO_ADDR
// exit ;
14737: POP
14738: POP
14739: GO 14932
// end ; end ;
14741: GO 14581
14743: POP
14744: POP
// for i := minerMinesList [ index ] downto 1 do
14745: LD_ADDR_VAR 0 5
14749: PUSH
14750: DOUBLE
14751: LD_EXP 49
14755: PUSH
14756: LD_VAR 0 6
14760: ARRAY
14761: INC
14762: ST_TO_ADDR
14763: LD_INT 1
14765: PUSH
14766: FOR_DOWNTO
14767: IFFALSE 14930
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
14769: LD_EXP 49
14773: PUSH
14774: LD_VAR 0 6
14778: ARRAY
14779: PUSH
14780: LD_VAR 0 5
14784: ARRAY
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: PPUSH
14790: LD_EXP 49
14794: PUSH
14795: LD_VAR 0 6
14799: ARRAY
14800: PUSH
14801: LD_VAR 0 5
14805: ARRAY
14806: PUSH
14807: LD_INT 2
14809: ARRAY
14810: PPUSH
14811: LD_VAR 0 2
14815: PPUSH
14816: LD_VAR 0 3
14820: PPUSH
14821: CALL_OW 298
14825: PUSH
14826: LD_INT 6
14828: LESS
14829: IFFALSE 14928
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14831: LD_EXP 49
14835: PUSH
14836: LD_VAR 0 6
14840: ARRAY
14841: PUSH
14842: LD_VAR 0 5
14846: ARRAY
14847: PUSH
14848: LD_INT 1
14850: ARRAY
14851: PPUSH
14852: LD_EXP 49
14856: PUSH
14857: LD_VAR 0 6
14861: ARRAY
14862: PUSH
14863: LD_VAR 0 5
14867: ARRAY
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: LD_VAR 0 1
14877: PPUSH
14878: CALL_OW 255
14882: PPUSH
14883: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14887: LD_ADDR_EXP 49
14891: PUSH
14892: LD_EXP 49
14896: PPUSH
14897: LD_VAR 0 6
14901: PPUSH
14902: LD_EXP 49
14906: PUSH
14907: LD_VAR 0 6
14911: ARRAY
14912: PPUSH
14913: LD_VAR 0 5
14917: PPUSH
14918: CALL_OW 3
14922: PPUSH
14923: CALL_OW 1
14927: ST_TO_ADDR
// end ; end ;
14928: GO 14766
14930: POP
14931: POP
// end ;
14932: LD_VAR 0 4
14936: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14937: LD_INT 0
14939: PPUSH
14940: PPUSH
14941: PPUSH
14942: PPUSH
14943: PPUSH
14944: PPUSH
14945: PPUSH
14946: PPUSH
14947: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 264
14957: PUSH
14958: LD_INT 81
14960: EQUAL
14961: NOT
14962: PUSH
14963: LD_VAR 0 1
14967: PUSH
14968: LD_EXP 48
14972: IN
14973: NOT
14974: OR
14975: IFFALSE 14979
// exit ;
14977: GO 15301
// index := GetElementIndex ( minersList , unit ) ;
14979: LD_ADDR_VAR 0 6
14983: PUSH
14984: LD_EXP 48
14988: PPUSH
14989: LD_VAR 0 1
14993: PPUSH
14994: CALL 36430 0 2
14998: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14999: LD_ADDR_VAR 0 8
15003: PUSH
15004: LD_EXP 50
15008: PUSH
15009: LD_EXP 49
15013: PUSH
15014: LD_VAR 0 6
15018: ARRAY
15019: MINUS
15020: ST_TO_ADDR
// if not minesFreeAmount then
15021: LD_VAR 0 8
15025: NOT
15026: IFFALSE 15030
// exit ;
15028: GO 15301
// tmp := [ ] ;
15030: LD_ADDR_VAR 0 7
15034: PUSH
15035: EMPTY
15036: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
15037: LD_ADDR_VAR 0 5
15041: PUSH
15042: DOUBLE
15043: LD_INT 1
15045: DEC
15046: ST_TO_ADDR
15047: LD_VAR 0 8
15051: PUSH
15052: FOR_TO
15053: IFFALSE 15248
// begin _d := rand ( 0 , 5 ) ;
15055: LD_ADDR_VAR 0 11
15059: PUSH
15060: LD_INT 0
15062: PPUSH
15063: LD_INT 5
15065: PPUSH
15066: CALL_OW 12
15070: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
15071: LD_ADDR_VAR 0 12
15075: PUSH
15076: LD_INT 2
15078: PPUSH
15079: LD_INT 6
15081: PPUSH
15082: CALL_OW 12
15086: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
15087: LD_ADDR_VAR 0 9
15091: PUSH
15092: LD_VAR 0 2
15096: PPUSH
15097: LD_VAR 0 11
15101: PPUSH
15102: LD_VAR 0 12
15106: PPUSH
15107: CALL_OW 272
15111: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
15112: LD_ADDR_VAR 0 10
15116: PUSH
15117: LD_VAR 0 3
15121: PPUSH
15122: LD_VAR 0 11
15126: PPUSH
15127: LD_VAR 0 12
15131: PPUSH
15132: CALL_OW 273
15136: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
15137: LD_VAR 0 9
15141: PPUSH
15142: LD_VAR 0 10
15146: PPUSH
15147: CALL_OW 488
15151: PUSH
15152: LD_VAR 0 9
15156: PUSH
15157: LD_VAR 0 10
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: PUSH
15166: LD_VAR 0 7
15170: IN
15171: NOT
15172: AND
15173: PUSH
15174: LD_VAR 0 9
15178: PPUSH
15179: LD_VAR 0 10
15183: PPUSH
15184: CALL_OW 458
15188: NOT
15189: AND
15190: IFFALSE 15232
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
15192: LD_ADDR_VAR 0 7
15196: PUSH
15197: LD_VAR 0 7
15201: PPUSH
15202: LD_VAR 0 7
15206: PUSH
15207: LD_INT 1
15209: PLUS
15210: PPUSH
15211: LD_VAR 0 9
15215: PUSH
15216: LD_VAR 0 10
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PPUSH
15225: CALL_OW 1
15229: ST_TO_ADDR
15230: GO 15246
// i := i - 1 ;
15232: LD_ADDR_VAR 0 5
15236: PUSH
15237: LD_VAR 0 5
15241: PUSH
15242: LD_INT 1
15244: MINUS
15245: ST_TO_ADDR
// end ;
15246: GO 15052
15248: POP
15249: POP
// for i in tmp do
15250: LD_ADDR_VAR 0 5
15254: PUSH
15255: LD_VAR 0 7
15259: PUSH
15260: FOR_IN
15261: IFFALSE 15299
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
15263: LD_VAR 0 1
15267: PPUSH
15268: LD_VAR 0 5
15272: PUSH
15273: LD_INT 1
15275: ARRAY
15276: PPUSH
15277: LD_VAR 0 5
15281: PUSH
15282: LD_INT 2
15284: ARRAY
15285: PPUSH
15286: CALL 14245 0 3
15290: NOT
15291: IFFALSE 15297
// exit ;
15293: POP
15294: POP
15295: GO 15301
15297: GO 15260
15299: POP
15300: POP
// end ;
15301: LD_VAR 0 4
15305: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
15306: LD_INT 0
15308: PPUSH
15309: PPUSH
15310: PPUSH
15311: PPUSH
15312: PPUSH
15313: PPUSH
15314: PPUSH
15315: PPUSH
15316: PPUSH
// if GetClass ( unit ) <> class_sniper then
15317: LD_VAR 0 1
15321: PPUSH
15322: CALL_OW 257
15326: PUSH
15327: LD_INT 5
15329: NONEQUAL
15330: IFFALSE 15334
// exit ;
15332: GO 15800
// dist := 8 ;
15334: LD_ADDR_VAR 0 5
15338: PUSH
15339: LD_INT 8
15341: ST_TO_ADDR
// viewRange := 12 ;
15342: LD_ADDR_VAR 0 8
15346: PUSH
15347: LD_INT 12
15349: ST_TO_ADDR
// side := GetSide ( unit ) ;
15350: LD_ADDR_VAR 0 6
15354: PUSH
15355: LD_VAR 0 1
15359: PPUSH
15360: CALL_OW 255
15364: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
15365: LD_INT 61
15367: PPUSH
15368: LD_VAR 0 6
15372: PPUSH
15373: CALL_OW 321
15377: PUSH
15378: LD_INT 2
15380: EQUAL
15381: IFFALSE 15391
// viewRange := 16 ;
15383: LD_ADDR_VAR 0 8
15387: PUSH
15388: LD_INT 16
15390: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
15391: LD_VAR 0 1
15395: PPUSH
15396: LD_VAR 0 2
15400: PPUSH
15401: LD_VAR 0 3
15405: PPUSH
15406: CALL_OW 297
15410: PUSH
15411: LD_VAR 0 5
15415: GREATER
15416: IFFALSE 15495
// begin ComMoveXY ( unit , x , y ) ;
15418: LD_VAR 0 1
15422: PPUSH
15423: LD_VAR 0 2
15427: PPUSH
15428: LD_VAR 0 3
15432: PPUSH
15433: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15437: LD_INT 35
15439: PPUSH
15440: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
15444: LD_VAR 0 1
15448: PPUSH
15449: LD_VAR 0 2
15453: PPUSH
15454: LD_VAR 0 3
15458: PPUSH
15459: CALL 68171 0 3
15463: NOT
15464: IFFALSE 15468
// exit ;
15466: GO 15800
// until GetDistUnitXY ( unit , x , y ) < dist ;
15468: LD_VAR 0 1
15472: PPUSH
15473: LD_VAR 0 2
15477: PPUSH
15478: LD_VAR 0 3
15482: PPUSH
15483: CALL_OW 297
15487: PUSH
15488: LD_VAR 0 5
15492: LESS
15493: IFFALSE 15437
// end ; ComTurnXY ( unit , x , y ) ;
15495: LD_VAR 0 1
15499: PPUSH
15500: LD_VAR 0 2
15504: PPUSH
15505: LD_VAR 0 3
15509: PPUSH
15510: CALL_OW 118
// repeat if Multiplayer then
15514: LD_OWVAR 4
15518: IFFALSE 15529
// wait ( 35 ) else
15520: LD_INT 35
15522: PPUSH
15523: CALL_OW 67
15527: GO 15536
// wait ( 5 ) ;
15529: LD_INT 5
15531: PPUSH
15532: CALL_OW 67
// _d := GetDir ( unit ) ;
15536: LD_ADDR_VAR 0 11
15540: PUSH
15541: LD_VAR 0 1
15545: PPUSH
15546: CALL_OW 254
15550: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
15551: LD_ADDR_VAR 0 7
15555: PUSH
15556: LD_VAR 0 1
15560: PPUSH
15561: CALL_OW 250
15565: PPUSH
15566: LD_VAR 0 1
15570: PPUSH
15571: CALL_OW 251
15575: PPUSH
15576: LD_VAR 0 2
15580: PPUSH
15581: LD_VAR 0 3
15585: PPUSH
15586: CALL 70779 0 4
15590: ST_TO_ADDR
// until dir = _d ;
15591: LD_VAR 0 7
15595: PUSH
15596: LD_VAR 0 11
15600: EQUAL
15601: IFFALSE 15514
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
15603: LD_ADDR_VAR 0 9
15607: PUSH
15608: LD_VAR 0 1
15612: PPUSH
15613: CALL_OW 250
15617: PPUSH
15618: LD_VAR 0 7
15622: PPUSH
15623: LD_VAR 0 5
15627: PPUSH
15628: CALL_OW 272
15632: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
15633: LD_ADDR_VAR 0 10
15637: PUSH
15638: LD_VAR 0 1
15642: PPUSH
15643: CALL_OW 251
15647: PPUSH
15648: LD_VAR 0 7
15652: PPUSH
15653: LD_VAR 0 5
15657: PPUSH
15658: CALL_OW 273
15662: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15663: LD_VAR 0 9
15667: PPUSH
15668: LD_VAR 0 10
15672: PPUSH
15673: CALL_OW 488
15677: NOT
15678: IFFALSE 15682
// exit ;
15680: GO 15800
// ComAnimCustom ( unit , 1 ) ;
15682: LD_VAR 0 1
15686: PPUSH
15687: LD_INT 1
15689: PPUSH
15690: CALL_OW 592
// p := 0 ;
15694: LD_ADDR_VAR 0 12
15698: PUSH
15699: LD_INT 0
15701: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
15702: LD_VAR 0 9
15706: PPUSH
15707: LD_VAR 0 10
15711: PPUSH
15712: LD_VAR 0 6
15716: PPUSH
15717: LD_VAR 0 8
15721: PPUSH
15722: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
15726: LD_INT 35
15728: PPUSH
15729: CALL_OW 67
// p := Inc ( p ) ;
15733: LD_ADDR_VAR 0 12
15737: PUSH
15738: LD_VAR 0 12
15742: PPUSH
15743: CALL 70735 0 1
15747: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
15748: LD_VAR 0 12
15752: PUSH
15753: LD_INT 3
15755: EQUAL
15756: PUSH
15757: LD_VAR 0 1
15761: PPUSH
15762: CALL_OW 302
15766: NOT
15767: OR
15768: PUSH
15769: LD_VAR 0 1
15773: PPUSH
15774: CALL_OW 301
15778: OR
15779: IFFALSE 15726
// RemoveSeeing ( _x , _y , side ) ;
15781: LD_VAR 0 9
15785: PPUSH
15786: LD_VAR 0 10
15790: PPUSH
15791: LD_VAR 0 6
15795: PPUSH
15796: CALL_OW 331
// end ; end_of_file
15800: LD_VAR 0 4
15804: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
15805: LD_VAR 0 1
15809: PPUSH
15810: LD_VAR 0 2
15814: PPUSH
15815: LD_VAR 0 3
15819: PPUSH
15820: LD_VAR 0 4
15824: PPUSH
15825: LD_VAR 0 5
15829: PPUSH
15830: LD_VAR 0 6
15834: PPUSH
15835: CALL 16036 0 6
// end ;
15839: PPOPN 6
15841: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
15842: LD_INT 0
15844: PPUSH
// begin if not units then
15845: LD_VAR 0 1
15849: NOT
15850: IFFALSE 15854
// exit ;
15852: GO 15854
// end ;
15854: PPOPN 7
15856: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
15857: CALL 15923 0 0
// end ; end_of_file
15861: PPOPN 1
15863: END
// export globalGameSaveCounter ; every 0 0$1 do
15864: GO 15866
15866: DISABLE
// begin enable ;
15867: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15868: LD_STRING updateTimer(
15870: PUSH
15871: LD_OWVAR 1
15875: STR
15876: PUSH
15877: LD_STRING );
15879: STR
15880: PPUSH
15881: CALL_OW 559
// end ;
15885: END
// every 0 0$1 do
15886: GO 15888
15888: DISABLE
// begin globalGameSaveCounter := 0 ;
15889: LD_ADDR_EXP 51
15893: PUSH
15894: LD_INT 0
15896: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15897: LD_STRING setGameSaveCounter(0)
15899: PPUSH
15900: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15904: LD_STRING initStreamRollete();
15906: PPUSH
15907: CALL_OW 559
// InitStreamMode ;
15911: CALL 17254 0 0
// DefineStreamItems ( false ) ;
15915: LD_INT 0
15917: PPUSH
15918: CALL 17718 0 1
// end ;
15922: END
// export function SOS_MapStart ( ) ; begin
15923: LD_INT 0
15925: PPUSH
// if streamModeActive then
15926: LD_EXP 52
15930: IFFALSE 15939
// DefineStreamItems ( true ) ;
15932: LD_INT 1
15934: PPUSH
15935: CALL 17718 0 1
// UpdateLuaVariables ( ) ;
15939: CALL 15956 0 0
// UpdateFactoryWaypoints ( ) ;
15943: CALL 30587 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15947: CALL 30844 0 0
// end ;
15951: LD_VAR 0 1
15955: RET
// function UpdateLuaVariables ( ) ; begin
15956: LD_INT 0
15958: PPUSH
// if globalGameSaveCounter then
15959: LD_EXP 51
15963: IFFALSE 15997
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15965: LD_ADDR_EXP 51
15969: PUSH
15970: LD_EXP 51
15974: PPUSH
15975: CALL 70735 0 1
15979: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15980: LD_STRING setGameSaveCounter(
15982: PUSH
15983: LD_EXP 51
15987: STR
15988: PUSH
15989: LD_STRING )
15991: STR
15992: PPUSH
15993: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15997: LD_STRING setGameDifficulty(
15999: PUSH
16000: LD_OWVAR 67
16004: STR
16005: PUSH
16006: LD_STRING )
16008: STR
16009: PPUSH
16010: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
16014: LD_STRING displayDifficulty(
16016: PUSH
16017: LD_OWVAR 67
16021: STR
16022: PUSH
16023: LD_STRING )
16025: STR
16026: PPUSH
16027: CALL_OW 559
// end ;
16031: LD_VAR 0 1
16035: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16036: LD_INT 0
16038: PPUSH
// if p2 = stream_mode then
16039: LD_VAR 0 2
16043: PUSH
16044: LD_INT 100
16046: EQUAL
16047: IFFALSE 17050
// begin if not StreamModeActive then
16049: LD_EXP 52
16053: NOT
16054: IFFALSE 16064
// StreamModeActive := true ;
16056: LD_ADDR_EXP 52
16060: PUSH
16061: LD_INT 1
16063: ST_TO_ADDR
// if p3 = 0 then
16064: LD_VAR 0 3
16068: PUSH
16069: LD_INT 0
16071: EQUAL
16072: IFFALSE 16078
// InitStreamMode ;
16074: CALL 17254 0 0
// if p3 = 1 then
16078: LD_VAR 0 3
16082: PUSH
16083: LD_INT 1
16085: EQUAL
16086: IFFALSE 16096
// sRocket := true ;
16088: LD_ADDR_EXP 57
16092: PUSH
16093: LD_INT 1
16095: ST_TO_ADDR
// if p3 = 2 then
16096: LD_VAR 0 3
16100: PUSH
16101: LD_INT 2
16103: EQUAL
16104: IFFALSE 16114
// sSpeed := true ;
16106: LD_ADDR_EXP 56
16110: PUSH
16111: LD_INT 1
16113: ST_TO_ADDR
// if p3 = 3 then
16114: LD_VAR 0 3
16118: PUSH
16119: LD_INT 3
16121: EQUAL
16122: IFFALSE 16132
// sEngine := true ;
16124: LD_ADDR_EXP 58
16128: PUSH
16129: LD_INT 1
16131: ST_TO_ADDR
// if p3 = 4 then
16132: LD_VAR 0 3
16136: PUSH
16137: LD_INT 4
16139: EQUAL
16140: IFFALSE 16150
// sSpec := true ;
16142: LD_ADDR_EXP 55
16146: PUSH
16147: LD_INT 1
16149: ST_TO_ADDR
// if p3 = 5 then
16150: LD_VAR 0 3
16154: PUSH
16155: LD_INT 5
16157: EQUAL
16158: IFFALSE 16168
// sLevel := true ;
16160: LD_ADDR_EXP 59
16164: PUSH
16165: LD_INT 1
16167: ST_TO_ADDR
// if p3 = 6 then
16168: LD_VAR 0 3
16172: PUSH
16173: LD_INT 6
16175: EQUAL
16176: IFFALSE 16186
// sArmoury := true ;
16178: LD_ADDR_EXP 60
16182: PUSH
16183: LD_INT 1
16185: ST_TO_ADDR
// if p3 = 7 then
16186: LD_VAR 0 3
16190: PUSH
16191: LD_INT 7
16193: EQUAL
16194: IFFALSE 16204
// sRadar := true ;
16196: LD_ADDR_EXP 61
16200: PUSH
16201: LD_INT 1
16203: ST_TO_ADDR
// if p3 = 8 then
16204: LD_VAR 0 3
16208: PUSH
16209: LD_INT 8
16211: EQUAL
16212: IFFALSE 16222
// sBunker := true ;
16214: LD_ADDR_EXP 62
16218: PUSH
16219: LD_INT 1
16221: ST_TO_ADDR
// if p3 = 9 then
16222: LD_VAR 0 3
16226: PUSH
16227: LD_INT 9
16229: EQUAL
16230: IFFALSE 16240
// sHack := true ;
16232: LD_ADDR_EXP 63
16236: PUSH
16237: LD_INT 1
16239: ST_TO_ADDR
// if p3 = 10 then
16240: LD_VAR 0 3
16244: PUSH
16245: LD_INT 10
16247: EQUAL
16248: IFFALSE 16258
// sFire := true ;
16250: LD_ADDR_EXP 64
16254: PUSH
16255: LD_INT 1
16257: ST_TO_ADDR
// if p3 = 11 then
16258: LD_VAR 0 3
16262: PUSH
16263: LD_INT 11
16265: EQUAL
16266: IFFALSE 16276
// sRefresh := true ;
16268: LD_ADDR_EXP 65
16272: PUSH
16273: LD_INT 1
16275: ST_TO_ADDR
// if p3 = 12 then
16276: LD_VAR 0 3
16280: PUSH
16281: LD_INT 12
16283: EQUAL
16284: IFFALSE 16294
// sExp := true ;
16286: LD_ADDR_EXP 66
16290: PUSH
16291: LD_INT 1
16293: ST_TO_ADDR
// if p3 = 13 then
16294: LD_VAR 0 3
16298: PUSH
16299: LD_INT 13
16301: EQUAL
16302: IFFALSE 16312
// sDepot := true ;
16304: LD_ADDR_EXP 67
16308: PUSH
16309: LD_INT 1
16311: ST_TO_ADDR
// if p3 = 14 then
16312: LD_VAR 0 3
16316: PUSH
16317: LD_INT 14
16319: EQUAL
16320: IFFALSE 16330
// sFlag := true ;
16322: LD_ADDR_EXP 68
16326: PUSH
16327: LD_INT 1
16329: ST_TO_ADDR
// if p3 = 15 then
16330: LD_VAR 0 3
16334: PUSH
16335: LD_INT 15
16337: EQUAL
16338: IFFALSE 16348
// sKamikadze := true ;
16340: LD_ADDR_EXP 76
16344: PUSH
16345: LD_INT 1
16347: ST_TO_ADDR
// if p3 = 16 then
16348: LD_VAR 0 3
16352: PUSH
16353: LD_INT 16
16355: EQUAL
16356: IFFALSE 16366
// sTroll := true ;
16358: LD_ADDR_EXP 77
16362: PUSH
16363: LD_INT 1
16365: ST_TO_ADDR
// if p3 = 17 then
16366: LD_VAR 0 3
16370: PUSH
16371: LD_INT 17
16373: EQUAL
16374: IFFALSE 16384
// sSlow := true ;
16376: LD_ADDR_EXP 78
16380: PUSH
16381: LD_INT 1
16383: ST_TO_ADDR
// if p3 = 18 then
16384: LD_VAR 0 3
16388: PUSH
16389: LD_INT 18
16391: EQUAL
16392: IFFALSE 16402
// sLack := true ;
16394: LD_ADDR_EXP 79
16398: PUSH
16399: LD_INT 1
16401: ST_TO_ADDR
// if p3 = 19 then
16402: LD_VAR 0 3
16406: PUSH
16407: LD_INT 19
16409: EQUAL
16410: IFFALSE 16420
// sTank := true ;
16412: LD_ADDR_EXP 81
16416: PUSH
16417: LD_INT 1
16419: ST_TO_ADDR
// if p3 = 20 then
16420: LD_VAR 0 3
16424: PUSH
16425: LD_INT 20
16427: EQUAL
16428: IFFALSE 16438
// sRemote := true ;
16430: LD_ADDR_EXP 82
16434: PUSH
16435: LD_INT 1
16437: ST_TO_ADDR
// if p3 = 21 then
16438: LD_VAR 0 3
16442: PUSH
16443: LD_INT 21
16445: EQUAL
16446: IFFALSE 16456
// sPowell := true ;
16448: LD_ADDR_EXP 83
16452: PUSH
16453: LD_INT 1
16455: ST_TO_ADDR
// if p3 = 22 then
16456: LD_VAR 0 3
16460: PUSH
16461: LD_INT 22
16463: EQUAL
16464: IFFALSE 16474
// sTeleport := true ;
16466: LD_ADDR_EXP 86
16470: PUSH
16471: LD_INT 1
16473: ST_TO_ADDR
// if p3 = 23 then
16474: LD_VAR 0 3
16478: PUSH
16479: LD_INT 23
16481: EQUAL
16482: IFFALSE 16492
// sOilTower := true ;
16484: LD_ADDR_EXP 88
16488: PUSH
16489: LD_INT 1
16491: ST_TO_ADDR
// if p3 = 24 then
16492: LD_VAR 0 3
16496: PUSH
16497: LD_INT 24
16499: EQUAL
16500: IFFALSE 16510
// sShovel := true ;
16502: LD_ADDR_EXP 89
16506: PUSH
16507: LD_INT 1
16509: ST_TO_ADDR
// if p3 = 25 then
16510: LD_VAR 0 3
16514: PUSH
16515: LD_INT 25
16517: EQUAL
16518: IFFALSE 16528
// sSheik := true ;
16520: LD_ADDR_EXP 90
16524: PUSH
16525: LD_INT 1
16527: ST_TO_ADDR
// if p3 = 26 then
16528: LD_VAR 0 3
16532: PUSH
16533: LD_INT 26
16535: EQUAL
16536: IFFALSE 16546
// sEarthquake := true ;
16538: LD_ADDR_EXP 92
16542: PUSH
16543: LD_INT 1
16545: ST_TO_ADDR
// if p3 = 27 then
16546: LD_VAR 0 3
16550: PUSH
16551: LD_INT 27
16553: EQUAL
16554: IFFALSE 16564
// sAI := true ;
16556: LD_ADDR_EXP 93
16560: PUSH
16561: LD_INT 1
16563: ST_TO_ADDR
// if p3 = 28 then
16564: LD_VAR 0 3
16568: PUSH
16569: LD_INT 28
16571: EQUAL
16572: IFFALSE 16582
// sCargo := true ;
16574: LD_ADDR_EXP 96
16578: PUSH
16579: LD_INT 1
16581: ST_TO_ADDR
// if p3 = 29 then
16582: LD_VAR 0 3
16586: PUSH
16587: LD_INT 29
16589: EQUAL
16590: IFFALSE 16600
// sDLaser := true ;
16592: LD_ADDR_EXP 97
16596: PUSH
16597: LD_INT 1
16599: ST_TO_ADDR
// if p3 = 30 then
16600: LD_VAR 0 3
16604: PUSH
16605: LD_INT 30
16607: EQUAL
16608: IFFALSE 16618
// sExchange := true ;
16610: LD_ADDR_EXP 98
16614: PUSH
16615: LD_INT 1
16617: ST_TO_ADDR
// if p3 = 31 then
16618: LD_VAR 0 3
16622: PUSH
16623: LD_INT 31
16625: EQUAL
16626: IFFALSE 16636
// sFac := true ;
16628: LD_ADDR_EXP 99
16632: PUSH
16633: LD_INT 1
16635: ST_TO_ADDR
// if p3 = 32 then
16636: LD_VAR 0 3
16640: PUSH
16641: LD_INT 32
16643: EQUAL
16644: IFFALSE 16654
// sPower := true ;
16646: LD_ADDR_EXP 100
16650: PUSH
16651: LD_INT 1
16653: ST_TO_ADDR
// if p3 = 33 then
16654: LD_VAR 0 3
16658: PUSH
16659: LD_INT 33
16661: EQUAL
16662: IFFALSE 16672
// sRandom := true ;
16664: LD_ADDR_EXP 101
16668: PUSH
16669: LD_INT 1
16671: ST_TO_ADDR
// if p3 = 34 then
16672: LD_VAR 0 3
16676: PUSH
16677: LD_INT 34
16679: EQUAL
16680: IFFALSE 16690
// sShield := true ;
16682: LD_ADDR_EXP 102
16686: PUSH
16687: LD_INT 1
16689: ST_TO_ADDR
// if p3 = 35 then
16690: LD_VAR 0 3
16694: PUSH
16695: LD_INT 35
16697: EQUAL
16698: IFFALSE 16708
// sTime := true ;
16700: LD_ADDR_EXP 103
16704: PUSH
16705: LD_INT 1
16707: ST_TO_ADDR
// if p3 = 36 then
16708: LD_VAR 0 3
16712: PUSH
16713: LD_INT 36
16715: EQUAL
16716: IFFALSE 16726
// sTools := true ;
16718: LD_ADDR_EXP 104
16722: PUSH
16723: LD_INT 1
16725: ST_TO_ADDR
// if p3 = 101 then
16726: LD_VAR 0 3
16730: PUSH
16731: LD_INT 101
16733: EQUAL
16734: IFFALSE 16744
// sSold := true ;
16736: LD_ADDR_EXP 69
16740: PUSH
16741: LD_INT 1
16743: ST_TO_ADDR
// if p3 = 102 then
16744: LD_VAR 0 3
16748: PUSH
16749: LD_INT 102
16751: EQUAL
16752: IFFALSE 16762
// sDiff := true ;
16754: LD_ADDR_EXP 70
16758: PUSH
16759: LD_INT 1
16761: ST_TO_ADDR
// if p3 = 103 then
16762: LD_VAR 0 3
16766: PUSH
16767: LD_INT 103
16769: EQUAL
16770: IFFALSE 16780
// sFog := true ;
16772: LD_ADDR_EXP 73
16776: PUSH
16777: LD_INT 1
16779: ST_TO_ADDR
// if p3 = 104 then
16780: LD_VAR 0 3
16784: PUSH
16785: LD_INT 104
16787: EQUAL
16788: IFFALSE 16798
// sReset := true ;
16790: LD_ADDR_EXP 74
16794: PUSH
16795: LD_INT 1
16797: ST_TO_ADDR
// if p3 = 105 then
16798: LD_VAR 0 3
16802: PUSH
16803: LD_INT 105
16805: EQUAL
16806: IFFALSE 16816
// sSun := true ;
16808: LD_ADDR_EXP 75
16812: PUSH
16813: LD_INT 1
16815: ST_TO_ADDR
// if p3 = 106 then
16816: LD_VAR 0 3
16820: PUSH
16821: LD_INT 106
16823: EQUAL
16824: IFFALSE 16834
// sTiger := true ;
16826: LD_ADDR_EXP 71
16830: PUSH
16831: LD_INT 1
16833: ST_TO_ADDR
// if p3 = 107 then
16834: LD_VAR 0 3
16838: PUSH
16839: LD_INT 107
16841: EQUAL
16842: IFFALSE 16852
// sBomb := true ;
16844: LD_ADDR_EXP 72
16848: PUSH
16849: LD_INT 1
16851: ST_TO_ADDR
// if p3 = 108 then
16852: LD_VAR 0 3
16856: PUSH
16857: LD_INT 108
16859: EQUAL
16860: IFFALSE 16870
// sWound := true ;
16862: LD_ADDR_EXP 80
16866: PUSH
16867: LD_INT 1
16869: ST_TO_ADDR
// if p3 = 109 then
16870: LD_VAR 0 3
16874: PUSH
16875: LD_INT 109
16877: EQUAL
16878: IFFALSE 16888
// sBetray := true ;
16880: LD_ADDR_EXP 84
16884: PUSH
16885: LD_INT 1
16887: ST_TO_ADDR
// if p3 = 110 then
16888: LD_VAR 0 3
16892: PUSH
16893: LD_INT 110
16895: EQUAL
16896: IFFALSE 16906
// sContamin := true ;
16898: LD_ADDR_EXP 85
16902: PUSH
16903: LD_INT 1
16905: ST_TO_ADDR
// if p3 = 111 then
16906: LD_VAR 0 3
16910: PUSH
16911: LD_INT 111
16913: EQUAL
16914: IFFALSE 16924
// sOil := true ;
16916: LD_ADDR_EXP 87
16920: PUSH
16921: LD_INT 1
16923: ST_TO_ADDR
// if p3 = 112 then
16924: LD_VAR 0 3
16928: PUSH
16929: LD_INT 112
16931: EQUAL
16932: IFFALSE 16942
// sStu := true ;
16934: LD_ADDR_EXP 91
16938: PUSH
16939: LD_INT 1
16941: ST_TO_ADDR
// if p3 = 113 then
16942: LD_VAR 0 3
16946: PUSH
16947: LD_INT 113
16949: EQUAL
16950: IFFALSE 16960
// sBazooka := true ;
16952: LD_ADDR_EXP 94
16956: PUSH
16957: LD_INT 1
16959: ST_TO_ADDR
// if p3 = 114 then
16960: LD_VAR 0 3
16964: PUSH
16965: LD_INT 114
16967: EQUAL
16968: IFFALSE 16978
// sMortar := true ;
16970: LD_ADDR_EXP 95
16974: PUSH
16975: LD_INT 1
16977: ST_TO_ADDR
// if p3 = 115 then
16978: LD_VAR 0 3
16982: PUSH
16983: LD_INT 115
16985: EQUAL
16986: IFFALSE 16996
// sRanger := true ;
16988: LD_ADDR_EXP 105
16992: PUSH
16993: LD_INT 1
16995: ST_TO_ADDR
// if p3 = 116 then
16996: LD_VAR 0 3
17000: PUSH
17001: LD_INT 116
17003: EQUAL
17004: IFFALSE 17014
// sComputer := true ;
17006: LD_ADDR_EXP 106
17010: PUSH
17011: LD_INT 1
17013: ST_TO_ADDR
// if p3 = 117 then
17014: LD_VAR 0 3
17018: PUSH
17019: LD_INT 117
17021: EQUAL
17022: IFFALSE 17032
// s30 := true ;
17024: LD_ADDR_EXP 107
17028: PUSH
17029: LD_INT 1
17031: ST_TO_ADDR
// if p3 = 118 then
17032: LD_VAR 0 3
17036: PUSH
17037: LD_INT 118
17039: EQUAL
17040: IFFALSE 17050
// s60 := true ;
17042: LD_ADDR_EXP 108
17046: PUSH
17047: LD_INT 1
17049: ST_TO_ADDR
// end ; if p2 = hack_mode then
17050: LD_VAR 0 2
17054: PUSH
17055: LD_INT 101
17057: EQUAL
17058: IFFALSE 17186
// begin case p3 of 1 :
17060: LD_VAR 0 3
17064: PUSH
17065: LD_INT 1
17067: DOUBLE
17068: EQUAL
17069: IFTRUE 17073
17071: GO 17080
17073: POP
// hHackUnlimitedResources ; 2 :
17074: CALL 29333 0 0
17078: GO 17186
17080: LD_INT 2
17082: DOUBLE
17083: EQUAL
17084: IFTRUE 17088
17086: GO 17095
17088: POP
// hHackSetLevel10 ; 3 :
17089: CALL 29466 0 0
17093: GO 17186
17095: LD_INT 3
17097: DOUBLE
17098: EQUAL
17099: IFTRUE 17103
17101: GO 17110
17103: POP
// hHackSetLevel10YourUnits ; 4 :
17104: CALL 29551 0 0
17108: GO 17186
17110: LD_INT 4
17112: DOUBLE
17113: EQUAL
17114: IFTRUE 17118
17116: GO 17125
17118: POP
// hHackInvincible ; 5 :
17119: CALL 29999 0 0
17123: GO 17186
17125: LD_INT 5
17127: DOUBLE
17128: EQUAL
17129: IFTRUE 17133
17131: GO 17140
17133: POP
// hHackInvisible ; 6 :
17134: CALL 30110 0 0
17138: GO 17186
17140: LD_INT 6
17142: DOUBLE
17143: EQUAL
17144: IFTRUE 17148
17146: GO 17155
17148: POP
// hHackChangeYourSide ; 7 :
17149: CALL 30167 0 0
17153: GO 17186
17155: LD_INT 7
17157: DOUBLE
17158: EQUAL
17159: IFTRUE 17163
17161: GO 17170
17163: POP
// hHackChangeUnitSide ; 8 :
17164: CALL 30209 0 0
17168: GO 17186
17170: LD_INT 8
17172: DOUBLE
17173: EQUAL
17174: IFTRUE 17178
17176: GO 17185
17178: POP
// hHackFog ; end ;
17179: CALL 30310 0 0
17183: GO 17186
17185: POP
// end ; if p2 = game_save_mode then
17186: LD_VAR 0 2
17190: PUSH
17191: LD_INT 102
17193: EQUAL
17194: IFFALSE 17249
// begin if p3 = 1 then
17196: LD_VAR 0 3
17200: PUSH
17201: LD_INT 1
17203: EQUAL
17204: IFFALSE 17216
// globalGameSaveCounter := p4 ;
17206: LD_ADDR_EXP 51
17210: PUSH
17211: LD_VAR 0 4
17215: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
17216: LD_VAR 0 3
17220: PUSH
17221: LD_INT 2
17223: EQUAL
17224: PUSH
17225: LD_EXP 51
17229: AND
17230: IFFALSE 17249
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17232: LD_STRING setGameSaveCounter(
17234: PUSH
17235: LD_EXP 51
17239: STR
17240: PUSH
17241: LD_STRING )
17243: STR
17244: PPUSH
17245: CALL_OW 559
// end ; end ;
17249: LD_VAR 0 7
17253: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
17254: LD_INT 0
17256: PPUSH
// streamModeActive := false ;
17257: LD_ADDR_EXP 52
17261: PUSH
17262: LD_INT 0
17264: ST_TO_ADDR
// normalCounter := 36 ;
17265: LD_ADDR_EXP 53
17269: PUSH
17270: LD_INT 36
17272: ST_TO_ADDR
// hardcoreCounter := 18 ;
17273: LD_ADDR_EXP 54
17277: PUSH
17278: LD_INT 18
17280: ST_TO_ADDR
// sRocket := false ;
17281: LD_ADDR_EXP 57
17285: PUSH
17286: LD_INT 0
17288: ST_TO_ADDR
// sSpeed := false ;
17289: LD_ADDR_EXP 56
17293: PUSH
17294: LD_INT 0
17296: ST_TO_ADDR
// sEngine := false ;
17297: LD_ADDR_EXP 58
17301: PUSH
17302: LD_INT 0
17304: ST_TO_ADDR
// sSpec := false ;
17305: LD_ADDR_EXP 55
17309: PUSH
17310: LD_INT 0
17312: ST_TO_ADDR
// sLevel := false ;
17313: LD_ADDR_EXP 59
17317: PUSH
17318: LD_INT 0
17320: ST_TO_ADDR
// sArmoury := false ;
17321: LD_ADDR_EXP 60
17325: PUSH
17326: LD_INT 0
17328: ST_TO_ADDR
// sRadar := false ;
17329: LD_ADDR_EXP 61
17333: PUSH
17334: LD_INT 0
17336: ST_TO_ADDR
// sBunker := false ;
17337: LD_ADDR_EXP 62
17341: PUSH
17342: LD_INT 0
17344: ST_TO_ADDR
// sHack := false ;
17345: LD_ADDR_EXP 63
17349: PUSH
17350: LD_INT 0
17352: ST_TO_ADDR
// sFire := false ;
17353: LD_ADDR_EXP 64
17357: PUSH
17358: LD_INT 0
17360: ST_TO_ADDR
// sRefresh := false ;
17361: LD_ADDR_EXP 65
17365: PUSH
17366: LD_INT 0
17368: ST_TO_ADDR
// sExp := false ;
17369: LD_ADDR_EXP 66
17373: PUSH
17374: LD_INT 0
17376: ST_TO_ADDR
// sDepot := false ;
17377: LD_ADDR_EXP 67
17381: PUSH
17382: LD_INT 0
17384: ST_TO_ADDR
// sFlag := false ;
17385: LD_ADDR_EXP 68
17389: PUSH
17390: LD_INT 0
17392: ST_TO_ADDR
// sKamikadze := false ;
17393: LD_ADDR_EXP 76
17397: PUSH
17398: LD_INT 0
17400: ST_TO_ADDR
// sTroll := false ;
17401: LD_ADDR_EXP 77
17405: PUSH
17406: LD_INT 0
17408: ST_TO_ADDR
// sSlow := false ;
17409: LD_ADDR_EXP 78
17413: PUSH
17414: LD_INT 0
17416: ST_TO_ADDR
// sLack := false ;
17417: LD_ADDR_EXP 79
17421: PUSH
17422: LD_INT 0
17424: ST_TO_ADDR
// sTank := false ;
17425: LD_ADDR_EXP 81
17429: PUSH
17430: LD_INT 0
17432: ST_TO_ADDR
// sRemote := false ;
17433: LD_ADDR_EXP 82
17437: PUSH
17438: LD_INT 0
17440: ST_TO_ADDR
// sPowell := false ;
17441: LD_ADDR_EXP 83
17445: PUSH
17446: LD_INT 0
17448: ST_TO_ADDR
// sTeleport := false ;
17449: LD_ADDR_EXP 86
17453: PUSH
17454: LD_INT 0
17456: ST_TO_ADDR
// sOilTower := false ;
17457: LD_ADDR_EXP 88
17461: PUSH
17462: LD_INT 0
17464: ST_TO_ADDR
// sShovel := false ;
17465: LD_ADDR_EXP 89
17469: PUSH
17470: LD_INT 0
17472: ST_TO_ADDR
// sSheik := false ;
17473: LD_ADDR_EXP 90
17477: PUSH
17478: LD_INT 0
17480: ST_TO_ADDR
// sEarthquake := false ;
17481: LD_ADDR_EXP 92
17485: PUSH
17486: LD_INT 0
17488: ST_TO_ADDR
// sAI := false ;
17489: LD_ADDR_EXP 93
17493: PUSH
17494: LD_INT 0
17496: ST_TO_ADDR
// sCargo := false ;
17497: LD_ADDR_EXP 96
17501: PUSH
17502: LD_INT 0
17504: ST_TO_ADDR
// sDLaser := false ;
17505: LD_ADDR_EXP 97
17509: PUSH
17510: LD_INT 0
17512: ST_TO_ADDR
// sExchange := false ;
17513: LD_ADDR_EXP 98
17517: PUSH
17518: LD_INT 0
17520: ST_TO_ADDR
// sFac := false ;
17521: LD_ADDR_EXP 99
17525: PUSH
17526: LD_INT 0
17528: ST_TO_ADDR
// sPower := false ;
17529: LD_ADDR_EXP 100
17533: PUSH
17534: LD_INT 0
17536: ST_TO_ADDR
// sRandom := false ;
17537: LD_ADDR_EXP 101
17541: PUSH
17542: LD_INT 0
17544: ST_TO_ADDR
// sShield := false ;
17545: LD_ADDR_EXP 102
17549: PUSH
17550: LD_INT 0
17552: ST_TO_ADDR
// sTime := false ;
17553: LD_ADDR_EXP 103
17557: PUSH
17558: LD_INT 0
17560: ST_TO_ADDR
// sTools := false ;
17561: LD_ADDR_EXP 104
17565: PUSH
17566: LD_INT 0
17568: ST_TO_ADDR
// sSold := false ;
17569: LD_ADDR_EXP 69
17573: PUSH
17574: LD_INT 0
17576: ST_TO_ADDR
// sDiff := false ;
17577: LD_ADDR_EXP 70
17581: PUSH
17582: LD_INT 0
17584: ST_TO_ADDR
// sFog := false ;
17585: LD_ADDR_EXP 73
17589: PUSH
17590: LD_INT 0
17592: ST_TO_ADDR
// sReset := false ;
17593: LD_ADDR_EXP 74
17597: PUSH
17598: LD_INT 0
17600: ST_TO_ADDR
// sSun := false ;
17601: LD_ADDR_EXP 75
17605: PUSH
17606: LD_INT 0
17608: ST_TO_ADDR
// sTiger := false ;
17609: LD_ADDR_EXP 71
17613: PUSH
17614: LD_INT 0
17616: ST_TO_ADDR
// sBomb := false ;
17617: LD_ADDR_EXP 72
17621: PUSH
17622: LD_INT 0
17624: ST_TO_ADDR
// sWound := false ;
17625: LD_ADDR_EXP 80
17629: PUSH
17630: LD_INT 0
17632: ST_TO_ADDR
// sBetray := false ;
17633: LD_ADDR_EXP 84
17637: PUSH
17638: LD_INT 0
17640: ST_TO_ADDR
// sContamin := false ;
17641: LD_ADDR_EXP 85
17645: PUSH
17646: LD_INT 0
17648: ST_TO_ADDR
// sOil := false ;
17649: LD_ADDR_EXP 87
17653: PUSH
17654: LD_INT 0
17656: ST_TO_ADDR
// sStu := false ;
17657: LD_ADDR_EXP 91
17661: PUSH
17662: LD_INT 0
17664: ST_TO_ADDR
// sBazooka := false ;
17665: LD_ADDR_EXP 94
17669: PUSH
17670: LD_INT 0
17672: ST_TO_ADDR
// sMortar := false ;
17673: LD_ADDR_EXP 95
17677: PUSH
17678: LD_INT 0
17680: ST_TO_ADDR
// sRanger := false ;
17681: LD_ADDR_EXP 105
17685: PUSH
17686: LD_INT 0
17688: ST_TO_ADDR
// sComputer := false ;
17689: LD_ADDR_EXP 106
17693: PUSH
17694: LD_INT 0
17696: ST_TO_ADDR
// s30 := false ;
17697: LD_ADDR_EXP 107
17701: PUSH
17702: LD_INT 0
17704: ST_TO_ADDR
// s60 := false ;
17705: LD_ADDR_EXP 108
17709: PUSH
17710: LD_INT 0
17712: ST_TO_ADDR
// end ;
17713: LD_VAR 0 1
17717: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17718: LD_INT 0
17720: PPUSH
17721: PPUSH
17722: PPUSH
17723: PPUSH
17724: PPUSH
17725: PPUSH
17726: PPUSH
// result := [ ] ;
17727: LD_ADDR_VAR 0 2
17731: PUSH
17732: EMPTY
17733: ST_TO_ADDR
// if campaign_id = 1 then
17734: LD_OWVAR 69
17738: PUSH
17739: LD_INT 1
17741: EQUAL
17742: IFFALSE 20908
// begin case mission_number of 1 :
17744: LD_OWVAR 70
17748: PUSH
17749: LD_INT 1
17751: DOUBLE
17752: EQUAL
17753: IFTRUE 17757
17755: GO 17833
17757: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17758: LD_ADDR_VAR 0 2
17762: PUSH
17763: LD_INT 2
17765: PUSH
17766: LD_INT 4
17768: PUSH
17769: LD_INT 11
17771: PUSH
17772: LD_INT 12
17774: PUSH
17775: LD_INT 15
17777: PUSH
17778: LD_INT 16
17780: PUSH
17781: LD_INT 22
17783: PUSH
17784: LD_INT 23
17786: PUSH
17787: LD_INT 26
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 101
17803: PUSH
17804: LD_INT 102
17806: PUSH
17807: LD_INT 106
17809: PUSH
17810: LD_INT 116
17812: PUSH
17813: LD_INT 117
17815: PUSH
17816: LD_INT 118
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: ST_TO_ADDR
17831: GO 20906
17833: LD_INT 2
17835: DOUBLE
17836: EQUAL
17837: IFTRUE 17841
17839: GO 17925
17841: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17842: LD_ADDR_VAR 0 2
17846: PUSH
17847: LD_INT 2
17849: PUSH
17850: LD_INT 4
17852: PUSH
17853: LD_INT 11
17855: PUSH
17856: LD_INT 12
17858: PUSH
17859: LD_INT 15
17861: PUSH
17862: LD_INT 16
17864: PUSH
17865: LD_INT 22
17867: PUSH
17868: LD_INT 23
17870: PUSH
17871: LD_INT 26
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 101
17887: PUSH
17888: LD_INT 102
17890: PUSH
17891: LD_INT 105
17893: PUSH
17894: LD_INT 106
17896: PUSH
17897: LD_INT 108
17899: PUSH
17900: LD_INT 116
17902: PUSH
17903: LD_INT 117
17905: PUSH
17906: LD_INT 118
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: ST_TO_ADDR
17923: GO 20906
17925: LD_INT 3
17927: DOUBLE
17928: EQUAL
17929: IFTRUE 17933
17931: GO 18021
17933: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17934: LD_ADDR_VAR 0 2
17938: PUSH
17939: LD_INT 2
17941: PUSH
17942: LD_INT 4
17944: PUSH
17945: LD_INT 5
17947: PUSH
17948: LD_INT 11
17950: PUSH
17951: LD_INT 12
17953: PUSH
17954: LD_INT 15
17956: PUSH
17957: LD_INT 16
17959: PUSH
17960: LD_INT 22
17962: PUSH
17963: LD_INT 26
17965: PUSH
17966: LD_INT 36
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 101
17983: PUSH
17984: LD_INT 102
17986: PUSH
17987: LD_INT 105
17989: PUSH
17990: LD_INT 106
17992: PUSH
17993: LD_INT 108
17995: PUSH
17996: LD_INT 116
17998: PUSH
17999: LD_INT 117
18001: PUSH
18002: LD_INT 118
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: ST_TO_ADDR
18019: GO 20906
18021: LD_INT 4
18023: DOUBLE
18024: EQUAL
18025: IFTRUE 18029
18027: GO 18125
18029: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18030: LD_ADDR_VAR 0 2
18034: PUSH
18035: LD_INT 2
18037: PUSH
18038: LD_INT 4
18040: PUSH
18041: LD_INT 5
18043: PUSH
18044: LD_INT 8
18046: PUSH
18047: LD_INT 11
18049: PUSH
18050: LD_INT 12
18052: PUSH
18053: LD_INT 15
18055: PUSH
18056: LD_INT 16
18058: PUSH
18059: LD_INT 22
18061: PUSH
18062: LD_INT 23
18064: PUSH
18065: LD_INT 26
18067: PUSH
18068: LD_INT 36
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 101
18087: PUSH
18088: LD_INT 102
18090: PUSH
18091: LD_INT 105
18093: PUSH
18094: LD_INT 106
18096: PUSH
18097: LD_INT 108
18099: PUSH
18100: LD_INT 116
18102: PUSH
18103: LD_INT 117
18105: PUSH
18106: LD_INT 118
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: ST_TO_ADDR
18123: GO 20906
18125: LD_INT 5
18127: DOUBLE
18128: EQUAL
18129: IFTRUE 18133
18131: GO 18245
18133: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18134: LD_ADDR_VAR 0 2
18138: PUSH
18139: LD_INT 2
18141: PUSH
18142: LD_INT 4
18144: PUSH
18145: LD_INT 5
18147: PUSH
18148: LD_INT 6
18150: PUSH
18151: LD_INT 8
18153: PUSH
18154: LD_INT 11
18156: PUSH
18157: LD_INT 12
18159: PUSH
18160: LD_INT 15
18162: PUSH
18163: LD_INT 16
18165: PUSH
18166: LD_INT 22
18168: PUSH
18169: LD_INT 23
18171: PUSH
18172: LD_INT 25
18174: PUSH
18175: LD_INT 26
18177: PUSH
18178: LD_INT 36
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 101
18199: PUSH
18200: LD_INT 102
18202: PUSH
18203: LD_INT 105
18205: PUSH
18206: LD_INT 106
18208: PUSH
18209: LD_INT 108
18211: PUSH
18212: LD_INT 109
18214: PUSH
18215: LD_INT 112
18217: PUSH
18218: LD_INT 116
18220: PUSH
18221: LD_INT 117
18223: PUSH
18224: LD_INT 118
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: ST_TO_ADDR
18243: GO 20906
18245: LD_INT 6
18247: DOUBLE
18248: EQUAL
18249: IFTRUE 18253
18251: GO 18385
18253: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18254: LD_ADDR_VAR 0 2
18258: PUSH
18259: LD_INT 2
18261: PUSH
18262: LD_INT 4
18264: PUSH
18265: LD_INT 5
18267: PUSH
18268: LD_INT 6
18270: PUSH
18271: LD_INT 8
18273: PUSH
18274: LD_INT 11
18276: PUSH
18277: LD_INT 12
18279: PUSH
18280: LD_INT 15
18282: PUSH
18283: LD_INT 16
18285: PUSH
18286: LD_INT 20
18288: PUSH
18289: LD_INT 21
18291: PUSH
18292: LD_INT 22
18294: PUSH
18295: LD_INT 23
18297: PUSH
18298: LD_INT 25
18300: PUSH
18301: LD_INT 26
18303: PUSH
18304: LD_INT 30
18306: PUSH
18307: LD_INT 31
18309: PUSH
18310: LD_INT 32
18312: PUSH
18313: LD_INT 36
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 101
18339: PUSH
18340: LD_INT 102
18342: PUSH
18343: LD_INT 105
18345: PUSH
18346: LD_INT 106
18348: PUSH
18349: LD_INT 108
18351: PUSH
18352: LD_INT 109
18354: PUSH
18355: LD_INT 112
18357: PUSH
18358: LD_INT 116
18360: PUSH
18361: LD_INT 117
18363: PUSH
18364: LD_INT 118
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: ST_TO_ADDR
18383: GO 20906
18385: LD_INT 7
18387: DOUBLE
18388: EQUAL
18389: IFTRUE 18393
18391: GO 18505
18393: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18394: LD_ADDR_VAR 0 2
18398: PUSH
18399: LD_INT 2
18401: PUSH
18402: LD_INT 4
18404: PUSH
18405: LD_INT 5
18407: PUSH
18408: LD_INT 7
18410: PUSH
18411: LD_INT 11
18413: PUSH
18414: LD_INT 12
18416: PUSH
18417: LD_INT 15
18419: PUSH
18420: LD_INT 16
18422: PUSH
18423: LD_INT 20
18425: PUSH
18426: LD_INT 21
18428: PUSH
18429: LD_INT 22
18431: PUSH
18432: LD_INT 23
18434: PUSH
18435: LD_INT 25
18437: PUSH
18438: LD_INT 26
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 101
18459: PUSH
18460: LD_INT 102
18462: PUSH
18463: LD_INT 103
18465: PUSH
18466: LD_INT 105
18468: PUSH
18469: LD_INT 106
18471: PUSH
18472: LD_INT 108
18474: PUSH
18475: LD_INT 112
18477: PUSH
18478: LD_INT 116
18480: PUSH
18481: LD_INT 117
18483: PUSH
18484: LD_INT 118
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: ST_TO_ADDR
18503: GO 20906
18505: LD_INT 8
18507: DOUBLE
18508: EQUAL
18509: IFTRUE 18513
18511: GO 18653
18513: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18514: LD_ADDR_VAR 0 2
18518: PUSH
18519: LD_INT 2
18521: PUSH
18522: LD_INT 4
18524: PUSH
18525: LD_INT 5
18527: PUSH
18528: LD_INT 6
18530: PUSH
18531: LD_INT 7
18533: PUSH
18534: LD_INT 8
18536: PUSH
18537: LD_INT 11
18539: PUSH
18540: LD_INT 12
18542: PUSH
18543: LD_INT 15
18545: PUSH
18546: LD_INT 16
18548: PUSH
18549: LD_INT 20
18551: PUSH
18552: LD_INT 21
18554: PUSH
18555: LD_INT 22
18557: PUSH
18558: LD_INT 23
18560: PUSH
18561: LD_INT 25
18563: PUSH
18564: LD_INT 26
18566: PUSH
18567: LD_INT 30
18569: PUSH
18570: LD_INT 31
18572: PUSH
18573: LD_INT 32
18575: PUSH
18576: LD_INT 36
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 101
18603: PUSH
18604: LD_INT 102
18606: PUSH
18607: LD_INT 103
18609: PUSH
18610: LD_INT 105
18612: PUSH
18613: LD_INT 106
18615: PUSH
18616: LD_INT 108
18618: PUSH
18619: LD_INT 109
18621: PUSH
18622: LD_INT 112
18624: PUSH
18625: LD_INT 116
18627: PUSH
18628: LD_INT 117
18630: PUSH
18631: LD_INT 118
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: ST_TO_ADDR
18651: GO 20906
18653: LD_INT 9
18655: DOUBLE
18656: EQUAL
18657: IFTRUE 18661
18659: GO 18809
18661: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18662: LD_ADDR_VAR 0 2
18666: PUSH
18667: LD_INT 2
18669: PUSH
18670: LD_INT 4
18672: PUSH
18673: LD_INT 5
18675: PUSH
18676: LD_INT 6
18678: PUSH
18679: LD_INT 7
18681: PUSH
18682: LD_INT 8
18684: PUSH
18685: LD_INT 11
18687: PUSH
18688: LD_INT 12
18690: PUSH
18691: LD_INT 15
18693: PUSH
18694: LD_INT 16
18696: PUSH
18697: LD_INT 20
18699: PUSH
18700: LD_INT 21
18702: PUSH
18703: LD_INT 22
18705: PUSH
18706: LD_INT 23
18708: PUSH
18709: LD_INT 25
18711: PUSH
18712: LD_INT 26
18714: PUSH
18715: LD_INT 28
18717: PUSH
18718: LD_INT 30
18720: PUSH
18721: LD_INT 31
18723: PUSH
18724: LD_INT 32
18726: PUSH
18727: LD_INT 36
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 101
18755: PUSH
18756: LD_INT 102
18758: PUSH
18759: LD_INT 103
18761: PUSH
18762: LD_INT 105
18764: PUSH
18765: LD_INT 106
18767: PUSH
18768: LD_INT 108
18770: PUSH
18771: LD_INT 109
18773: PUSH
18774: LD_INT 112
18776: PUSH
18777: LD_INT 114
18779: PUSH
18780: LD_INT 116
18782: PUSH
18783: LD_INT 117
18785: PUSH
18786: LD_INT 118
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: ST_TO_ADDR
18807: GO 20906
18809: LD_INT 10
18811: DOUBLE
18812: EQUAL
18813: IFTRUE 18817
18815: GO 19013
18817: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18818: LD_ADDR_VAR 0 2
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: LD_INT 4
18828: PUSH
18829: LD_INT 5
18831: PUSH
18832: LD_INT 6
18834: PUSH
18835: LD_INT 7
18837: PUSH
18838: LD_INT 8
18840: PUSH
18841: LD_INT 9
18843: PUSH
18844: LD_INT 10
18846: PUSH
18847: LD_INT 11
18849: PUSH
18850: LD_INT 12
18852: PUSH
18853: LD_INT 13
18855: PUSH
18856: LD_INT 14
18858: PUSH
18859: LD_INT 15
18861: PUSH
18862: LD_INT 16
18864: PUSH
18865: LD_INT 17
18867: PUSH
18868: LD_INT 18
18870: PUSH
18871: LD_INT 19
18873: PUSH
18874: LD_INT 20
18876: PUSH
18877: LD_INT 21
18879: PUSH
18880: LD_INT 22
18882: PUSH
18883: LD_INT 23
18885: PUSH
18886: LD_INT 24
18888: PUSH
18889: LD_INT 25
18891: PUSH
18892: LD_INT 26
18894: PUSH
18895: LD_INT 28
18897: PUSH
18898: LD_INT 30
18900: PUSH
18901: LD_INT 31
18903: PUSH
18904: LD_INT 32
18906: PUSH
18907: LD_INT 36
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 101
18943: PUSH
18944: LD_INT 102
18946: PUSH
18947: LD_INT 103
18949: PUSH
18950: LD_INT 104
18952: PUSH
18953: LD_INT 105
18955: PUSH
18956: LD_INT 106
18958: PUSH
18959: LD_INT 107
18961: PUSH
18962: LD_INT 108
18964: PUSH
18965: LD_INT 109
18967: PUSH
18968: LD_INT 110
18970: PUSH
18971: LD_INT 111
18973: PUSH
18974: LD_INT 112
18976: PUSH
18977: LD_INT 114
18979: PUSH
18980: LD_INT 116
18982: PUSH
18983: LD_INT 117
18985: PUSH
18986: LD_INT 118
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: ST_TO_ADDR
19011: GO 20906
19013: LD_INT 11
19015: DOUBLE
19016: EQUAL
19017: IFTRUE 19021
19019: GO 19225
19021: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19022: LD_ADDR_VAR 0 2
19026: PUSH
19027: LD_INT 2
19029: PUSH
19030: LD_INT 3
19032: PUSH
19033: LD_INT 4
19035: PUSH
19036: LD_INT 5
19038: PUSH
19039: LD_INT 6
19041: PUSH
19042: LD_INT 7
19044: PUSH
19045: LD_INT 8
19047: PUSH
19048: LD_INT 9
19050: PUSH
19051: LD_INT 10
19053: PUSH
19054: LD_INT 11
19056: PUSH
19057: LD_INT 12
19059: PUSH
19060: LD_INT 13
19062: PUSH
19063: LD_INT 14
19065: PUSH
19066: LD_INT 15
19068: PUSH
19069: LD_INT 16
19071: PUSH
19072: LD_INT 17
19074: PUSH
19075: LD_INT 18
19077: PUSH
19078: LD_INT 19
19080: PUSH
19081: LD_INT 20
19083: PUSH
19084: LD_INT 21
19086: PUSH
19087: LD_INT 22
19089: PUSH
19090: LD_INT 23
19092: PUSH
19093: LD_INT 24
19095: PUSH
19096: LD_INT 25
19098: PUSH
19099: LD_INT 26
19101: PUSH
19102: LD_INT 28
19104: PUSH
19105: LD_INT 30
19107: PUSH
19108: LD_INT 31
19110: PUSH
19111: LD_INT 32
19113: PUSH
19114: LD_INT 34
19116: PUSH
19117: LD_INT 36
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 101
19155: PUSH
19156: LD_INT 102
19158: PUSH
19159: LD_INT 103
19161: PUSH
19162: LD_INT 104
19164: PUSH
19165: LD_INT 105
19167: PUSH
19168: LD_INT 106
19170: PUSH
19171: LD_INT 107
19173: PUSH
19174: LD_INT 108
19176: PUSH
19177: LD_INT 109
19179: PUSH
19180: LD_INT 110
19182: PUSH
19183: LD_INT 111
19185: PUSH
19186: LD_INT 112
19188: PUSH
19189: LD_INT 114
19191: PUSH
19192: LD_INT 116
19194: PUSH
19195: LD_INT 117
19197: PUSH
19198: LD_INT 118
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: ST_TO_ADDR
19223: GO 20906
19225: LD_INT 12
19227: DOUBLE
19228: EQUAL
19229: IFTRUE 19233
19231: GO 19453
19233: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19234: LD_ADDR_VAR 0 2
19238: PUSH
19239: LD_INT 1
19241: PUSH
19242: LD_INT 2
19244: PUSH
19245: LD_INT 3
19247: PUSH
19248: LD_INT 4
19250: PUSH
19251: LD_INT 5
19253: PUSH
19254: LD_INT 6
19256: PUSH
19257: LD_INT 7
19259: PUSH
19260: LD_INT 8
19262: PUSH
19263: LD_INT 9
19265: PUSH
19266: LD_INT 10
19268: PUSH
19269: LD_INT 11
19271: PUSH
19272: LD_INT 12
19274: PUSH
19275: LD_INT 13
19277: PUSH
19278: LD_INT 14
19280: PUSH
19281: LD_INT 15
19283: PUSH
19284: LD_INT 16
19286: PUSH
19287: LD_INT 17
19289: PUSH
19290: LD_INT 18
19292: PUSH
19293: LD_INT 19
19295: PUSH
19296: LD_INT 20
19298: PUSH
19299: LD_INT 21
19301: PUSH
19302: LD_INT 22
19304: PUSH
19305: LD_INT 23
19307: PUSH
19308: LD_INT 24
19310: PUSH
19311: LD_INT 25
19313: PUSH
19314: LD_INT 26
19316: PUSH
19317: LD_INT 27
19319: PUSH
19320: LD_INT 28
19322: PUSH
19323: LD_INT 30
19325: PUSH
19326: LD_INT 31
19328: PUSH
19329: LD_INT 32
19331: PUSH
19332: LD_INT 33
19334: PUSH
19335: LD_INT 34
19337: PUSH
19338: LD_INT 36
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 101
19379: PUSH
19380: LD_INT 102
19382: PUSH
19383: LD_INT 103
19385: PUSH
19386: LD_INT 104
19388: PUSH
19389: LD_INT 105
19391: PUSH
19392: LD_INT 106
19394: PUSH
19395: LD_INT 107
19397: PUSH
19398: LD_INT 108
19400: PUSH
19401: LD_INT 109
19403: PUSH
19404: LD_INT 110
19406: PUSH
19407: LD_INT 111
19409: PUSH
19410: LD_INT 112
19412: PUSH
19413: LD_INT 113
19415: PUSH
19416: LD_INT 114
19418: PUSH
19419: LD_INT 116
19421: PUSH
19422: LD_INT 117
19424: PUSH
19425: LD_INT 118
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: ST_TO_ADDR
19451: GO 20906
19453: LD_INT 13
19455: DOUBLE
19456: EQUAL
19457: IFTRUE 19461
19459: GO 19669
19461: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19462: LD_ADDR_VAR 0 2
19466: PUSH
19467: LD_INT 1
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: LD_INT 3
19475: PUSH
19476: LD_INT 4
19478: PUSH
19479: LD_INT 5
19481: PUSH
19482: LD_INT 8
19484: PUSH
19485: LD_INT 9
19487: PUSH
19488: LD_INT 10
19490: PUSH
19491: LD_INT 11
19493: PUSH
19494: LD_INT 12
19496: PUSH
19497: LD_INT 14
19499: PUSH
19500: LD_INT 15
19502: PUSH
19503: LD_INT 16
19505: PUSH
19506: LD_INT 17
19508: PUSH
19509: LD_INT 18
19511: PUSH
19512: LD_INT 19
19514: PUSH
19515: LD_INT 20
19517: PUSH
19518: LD_INT 21
19520: PUSH
19521: LD_INT 22
19523: PUSH
19524: LD_INT 23
19526: PUSH
19527: LD_INT 24
19529: PUSH
19530: LD_INT 25
19532: PUSH
19533: LD_INT 26
19535: PUSH
19536: LD_INT 27
19538: PUSH
19539: LD_INT 28
19541: PUSH
19542: LD_INT 30
19544: PUSH
19545: LD_INT 31
19547: PUSH
19548: LD_INT 32
19550: PUSH
19551: LD_INT 33
19553: PUSH
19554: LD_INT 34
19556: PUSH
19557: LD_INT 36
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 101
19595: PUSH
19596: LD_INT 102
19598: PUSH
19599: LD_INT 103
19601: PUSH
19602: LD_INT 104
19604: PUSH
19605: LD_INT 105
19607: PUSH
19608: LD_INT 106
19610: PUSH
19611: LD_INT 107
19613: PUSH
19614: LD_INT 108
19616: PUSH
19617: LD_INT 109
19619: PUSH
19620: LD_INT 110
19622: PUSH
19623: LD_INT 111
19625: PUSH
19626: LD_INT 112
19628: PUSH
19629: LD_INT 113
19631: PUSH
19632: LD_INT 114
19634: PUSH
19635: LD_INT 116
19637: PUSH
19638: LD_INT 117
19640: PUSH
19641: LD_INT 118
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: ST_TO_ADDR
19667: GO 20906
19669: LD_INT 14
19671: DOUBLE
19672: EQUAL
19673: IFTRUE 19677
19675: GO 19901
19677: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19678: LD_ADDR_VAR 0 2
19682: PUSH
19683: LD_INT 1
19685: PUSH
19686: LD_INT 2
19688: PUSH
19689: LD_INT 3
19691: PUSH
19692: LD_INT 4
19694: PUSH
19695: LD_INT 5
19697: PUSH
19698: LD_INT 6
19700: PUSH
19701: LD_INT 7
19703: PUSH
19704: LD_INT 8
19706: PUSH
19707: LD_INT 9
19709: PUSH
19710: LD_INT 10
19712: PUSH
19713: LD_INT 11
19715: PUSH
19716: LD_INT 12
19718: PUSH
19719: LD_INT 13
19721: PUSH
19722: LD_INT 14
19724: PUSH
19725: LD_INT 15
19727: PUSH
19728: LD_INT 16
19730: PUSH
19731: LD_INT 17
19733: PUSH
19734: LD_INT 18
19736: PUSH
19737: LD_INT 19
19739: PUSH
19740: LD_INT 20
19742: PUSH
19743: LD_INT 21
19745: PUSH
19746: LD_INT 22
19748: PUSH
19749: LD_INT 23
19751: PUSH
19752: LD_INT 24
19754: PUSH
19755: LD_INT 25
19757: PUSH
19758: LD_INT 26
19760: PUSH
19761: LD_INT 27
19763: PUSH
19764: LD_INT 28
19766: PUSH
19767: LD_INT 29
19769: PUSH
19770: LD_INT 30
19772: PUSH
19773: LD_INT 31
19775: PUSH
19776: LD_INT 32
19778: PUSH
19779: LD_INT 33
19781: PUSH
19782: LD_INT 34
19784: PUSH
19785: LD_INT 36
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 101
19827: PUSH
19828: LD_INT 102
19830: PUSH
19831: LD_INT 103
19833: PUSH
19834: LD_INT 104
19836: PUSH
19837: LD_INT 105
19839: PUSH
19840: LD_INT 106
19842: PUSH
19843: LD_INT 107
19845: PUSH
19846: LD_INT 108
19848: PUSH
19849: LD_INT 109
19851: PUSH
19852: LD_INT 110
19854: PUSH
19855: LD_INT 111
19857: PUSH
19858: LD_INT 112
19860: PUSH
19861: LD_INT 113
19863: PUSH
19864: LD_INT 114
19866: PUSH
19867: LD_INT 116
19869: PUSH
19870: LD_INT 117
19872: PUSH
19873: LD_INT 118
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: ST_TO_ADDR
19899: GO 20906
19901: LD_INT 15
19903: DOUBLE
19904: EQUAL
19905: IFTRUE 19909
19907: GO 20133
19909: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19910: LD_ADDR_VAR 0 2
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: LD_INT 2
19920: PUSH
19921: LD_INT 3
19923: PUSH
19924: LD_INT 4
19926: PUSH
19927: LD_INT 5
19929: PUSH
19930: LD_INT 6
19932: PUSH
19933: LD_INT 7
19935: PUSH
19936: LD_INT 8
19938: PUSH
19939: LD_INT 9
19941: PUSH
19942: LD_INT 10
19944: PUSH
19945: LD_INT 11
19947: PUSH
19948: LD_INT 12
19950: PUSH
19951: LD_INT 13
19953: PUSH
19954: LD_INT 14
19956: PUSH
19957: LD_INT 15
19959: PUSH
19960: LD_INT 16
19962: PUSH
19963: LD_INT 17
19965: PUSH
19966: LD_INT 18
19968: PUSH
19969: LD_INT 19
19971: PUSH
19972: LD_INT 20
19974: PUSH
19975: LD_INT 21
19977: PUSH
19978: LD_INT 22
19980: PUSH
19981: LD_INT 23
19983: PUSH
19984: LD_INT 24
19986: PUSH
19987: LD_INT 25
19989: PUSH
19990: LD_INT 26
19992: PUSH
19993: LD_INT 27
19995: PUSH
19996: LD_INT 28
19998: PUSH
19999: LD_INT 29
20001: PUSH
20002: LD_INT 30
20004: PUSH
20005: LD_INT 31
20007: PUSH
20008: LD_INT 32
20010: PUSH
20011: LD_INT 33
20013: PUSH
20014: LD_INT 34
20016: PUSH
20017: LD_INT 36
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 101
20059: PUSH
20060: LD_INT 102
20062: PUSH
20063: LD_INT 103
20065: PUSH
20066: LD_INT 104
20068: PUSH
20069: LD_INT 105
20071: PUSH
20072: LD_INT 106
20074: PUSH
20075: LD_INT 107
20077: PUSH
20078: LD_INT 108
20080: PUSH
20081: LD_INT 109
20083: PUSH
20084: LD_INT 110
20086: PUSH
20087: LD_INT 111
20089: PUSH
20090: LD_INT 112
20092: PUSH
20093: LD_INT 113
20095: PUSH
20096: LD_INT 114
20098: PUSH
20099: LD_INT 116
20101: PUSH
20102: LD_INT 117
20104: PUSH
20105: LD_INT 118
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: ST_TO_ADDR
20131: GO 20906
20133: LD_INT 16
20135: DOUBLE
20136: EQUAL
20137: IFTRUE 20141
20139: GO 20277
20141: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20142: LD_ADDR_VAR 0 2
20146: PUSH
20147: LD_INT 2
20149: PUSH
20150: LD_INT 4
20152: PUSH
20153: LD_INT 5
20155: PUSH
20156: LD_INT 7
20158: PUSH
20159: LD_INT 11
20161: PUSH
20162: LD_INT 12
20164: PUSH
20165: LD_INT 15
20167: PUSH
20168: LD_INT 16
20170: PUSH
20171: LD_INT 20
20173: PUSH
20174: LD_INT 21
20176: PUSH
20177: LD_INT 22
20179: PUSH
20180: LD_INT 23
20182: PUSH
20183: LD_INT 25
20185: PUSH
20186: LD_INT 26
20188: PUSH
20189: LD_INT 30
20191: PUSH
20192: LD_INT 31
20194: PUSH
20195: LD_INT 32
20197: PUSH
20198: LD_INT 33
20200: PUSH
20201: LD_INT 34
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 101
20227: PUSH
20228: LD_INT 102
20230: PUSH
20231: LD_INT 103
20233: PUSH
20234: LD_INT 106
20236: PUSH
20237: LD_INT 108
20239: PUSH
20240: LD_INT 112
20242: PUSH
20243: LD_INT 113
20245: PUSH
20246: LD_INT 114
20248: PUSH
20249: LD_INT 116
20251: PUSH
20252: LD_INT 117
20254: PUSH
20255: LD_INT 118
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: ST_TO_ADDR
20275: GO 20906
20277: LD_INT 17
20279: DOUBLE
20280: EQUAL
20281: IFTRUE 20285
20283: GO 20509
20285: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20286: LD_ADDR_VAR 0 2
20290: PUSH
20291: LD_INT 1
20293: PUSH
20294: LD_INT 2
20296: PUSH
20297: LD_INT 3
20299: PUSH
20300: LD_INT 4
20302: PUSH
20303: LD_INT 5
20305: PUSH
20306: LD_INT 6
20308: PUSH
20309: LD_INT 7
20311: PUSH
20312: LD_INT 8
20314: PUSH
20315: LD_INT 9
20317: PUSH
20318: LD_INT 10
20320: PUSH
20321: LD_INT 11
20323: PUSH
20324: LD_INT 12
20326: PUSH
20327: LD_INT 13
20329: PUSH
20330: LD_INT 14
20332: PUSH
20333: LD_INT 15
20335: PUSH
20336: LD_INT 16
20338: PUSH
20339: LD_INT 17
20341: PUSH
20342: LD_INT 18
20344: PUSH
20345: LD_INT 19
20347: PUSH
20348: LD_INT 20
20350: PUSH
20351: LD_INT 21
20353: PUSH
20354: LD_INT 22
20356: PUSH
20357: LD_INT 23
20359: PUSH
20360: LD_INT 24
20362: PUSH
20363: LD_INT 25
20365: PUSH
20366: LD_INT 26
20368: PUSH
20369: LD_INT 27
20371: PUSH
20372: LD_INT 28
20374: PUSH
20375: LD_INT 29
20377: PUSH
20378: LD_INT 30
20380: PUSH
20381: LD_INT 31
20383: PUSH
20384: LD_INT 32
20386: PUSH
20387: LD_INT 33
20389: PUSH
20390: LD_INT 34
20392: PUSH
20393: LD_INT 36
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 101
20435: PUSH
20436: LD_INT 102
20438: PUSH
20439: LD_INT 103
20441: PUSH
20442: LD_INT 104
20444: PUSH
20445: LD_INT 105
20447: PUSH
20448: LD_INT 106
20450: PUSH
20451: LD_INT 107
20453: PUSH
20454: LD_INT 108
20456: PUSH
20457: LD_INT 109
20459: PUSH
20460: LD_INT 110
20462: PUSH
20463: LD_INT 111
20465: PUSH
20466: LD_INT 112
20468: PUSH
20469: LD_INT 113
20471: PUSH
20472: LD_INT 114
20474: PUSH
20475: LD_INT 116
20477: PUSH
20478: LD_INT 117
20480: PUSH
20481: LD_INT 118
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: ST_TO_ADDR
20507: GO 20906
20509: LD_INT 18
20511: DOUBLE
20512: EQUAL
20513: IFTRUE 20517
20515: GO 20665
20517: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20518: LD_ADDR_VAR 0 2
20522: PUSH
20523: LD_INT 2
20525: PUSH
20526: LD_INT 4
20528: PUSH
20529: LD_INT 5
20531: PUSH
20532: LD_INT 7
20534: PUSH
20535: LD_INT 11
20537: PUSH
20538: LD_INT 12
20540: PUSH
20541: LD_INT 15
20543: PUSH
20544: LD_INT 16
20546: PUSH
20547: LD_INT 20
20549: PUSH
20550: LD_INT 21
20552: PUSH
20553: LD_INT 22
20555: PUSH
20556: LD_INT 23
20558: PUSH
20559: LD_INT 25
20561: PUSH
20562: LD_INT 26
20564: PUSH
20565: LD_INT 30
20567: PUSH
20568: LD_INT 31
20570: PUSH
20571: LD_INT 32
20573: PUSH
20574: LD_INT 33
20576: PUSH
20577: LD_INT 34
20579: PUSH
20580: LD_INT 35
20582: PUSH
20583: LD_INT 36
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 101
20611: PUSH
20612: LD_INT 102
20614: PUSH
20615: LD_INT 103
20617: PUSH
20618: LD_INT 106
20620: PUSH
20621: LD_INT 108
20623: PUSH
20624: LD_INT 112
20626: PUSH
20627: LD_INT 113
20629: PUSH
20630: LD_INT 114
20632: PUSH
20633: LD_INT 115
20635: PUSH
20636: LD_INT 116
20638: PUSH
20639: LD_INT 117
20641: PUSH
20642: LD_INT 118
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: ST_TO_ADDR
20663: GO 20906
20665: LD_INT 19
20667: DOUBLE
20668: EQUAL
20669: IFTRUE 20673
20671: GO 20905
20673: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20674: LD_ADDR_VAR 0 2
20678: PUSH
20679: LD_INT 1
20681: PUSH
20682: LD_INT 2
20684: PUSH
20685: LD_INT 3
20687: PUSH
20688: LD_INT 4
20690: PUSH
20691: LD_INT 5
20693: PUSH
20694: LD_INT 6
20696: PUSH
20697: LD_INT 7
20699: PUSH
20700: LD_INT 8
20702: PUSH
20703: LD_INT 9
20705: PUSH
20706: LD_INT 10
20708: PUSH
20709: LD_INT 11
20711: PUSH
20712: LD_INT 12
20714: PUSH
20715: LD_INT 13
20717: PUSH
20718: LD_INT 14
20720: PUSH
20721: LD_INT 15
20723: PUSH
20724: LD_INT 16
20726: PUSH
20727: LD_INT 17
20729: PUSH
20730: LD_INT 18
20732: PUSH
20733: LD_INT 19
20735: PUSH
20736: LD_INT 20
20738: PUSH
20739: LD_INT 21
20741: PUSH
20742: LD_INT 22
20744: PUSH
20745: LD_INT 23
20747: PUSH
20748: LD_INT 24
20750: PUSH
20751: LD_INT 25
20753: PUSH
20754: LD_INT 26
20756: PUSH
20757: LD_INT 27
20759: PUSH
20760: LD_INT 28
20762: PUSH
20763: LD_INT 29
20765: PUSH
20766: LD_INT 30
20768: PUSH
20769: LD_INT 31
20771: PUSH
20772: LD_INT 32
20774: PUSH
20775: LD_INT 33
20777: PUSH
20778: LD_INT 34
20780: PUSH
20781: LD_INT 35
20783: PUSH
20784: LD_INT 36
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 101
20827: PUSH
20828: LD_INT 102
20830: PUSH
20831: LD_INT 103
20833: PUSH
20834: LD_INT 104
20836: PUSH
20837: LD_INT 105
20839: PUSH
20840: LD_INT 106
20842: PUSH
20843: LD_INT 107
20845: PUSH
20846: LD_INT 108
20848: PUSH
20849: LD_INT 109
20851: PUSH
20852: LD_INT 110
20854: PUSH
20855: LD_INT 111
20857: PUSH
20858: LD_INT 112
20860: PUSH
20861: LD_INT 113
20863: PUSH
20864: LD_INT 114
20866: PUSH
20867: LD_INT 115
20869: PUSH
20870: LD_INT 116
20872: PUSH
20873: LD_INT 117
20875: PUSH
20876: LD_INT 118
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: ST_TO_ADDR
20903: GO 20906
20905: POP
// end else
20906: GO 21137
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20908: LD_ADDR_VAR 0 2
20912: PUSH
20913: LD_INT 1
20915: PUSH
20916: LD_INT 2
20918: PUSH
20919: LD_INT 3
20921: PUSH
20922: LD_INT 4
20924: PUSH
20925: LD_INT 5
20927: PUSH
20928: LD_INT 6
20930: PUSH
20931: LD_INT 7
20933: PUSH
20934: LD_INT 8
20936: PUSH
20937: LD_INT 9
20939: PUSH
20940: LD_INT 10
20942: PUSH
20943: LD_INT 11
20945: PUSH
20946: LD_INT 12
20948: PUSH
20949: LD_INT 13
20951: PUSH
20952: LD_INT 14
20954: PUSH
20955: LD_INT 15
20957: PUSH
20958: LD_INT 16
20960: PUSH
20961: LD_INT 17
20963: PUSH
20964: LD_INT 18
20966: PUSH
20967: LD_INT 19
20969: PUSH
20970: LD_INT 20
20972: PUSH
20973: LD_INT 21
20975: PUSH
20976: LD_INT 22
20978: PUSH
20979: LD_INT 23
20981: PUSH
20982: LD_INT 24
20984: PUSH
20985: LD_INT 25
20987: PUSH
20988: LD_INT 26
20990: PUSH
20991: LD_INT 27
20993: PUSH
20994: LD_INT 28
20996: PUSH
20997: LD_INT 29
20999: PUSH
21000: LD_INT 30
21002: PUSH
21003: LD_INT 31
21005: PUSH
21006: LD_INT 32
21008: PUSH
21009: LD_INT 33
21011: PUSH
21012: LD_INT 34
21014: PUSH
21015: LD_INT 35
21017: PUSH
21018: LD_INT 36
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 101
21061: PUSH
21062: LD_INT 102
21064: PUSH
21065: LD_INT 103
21067: PUSH
21068: LD_INT 104
21070: PUSH
21071: LD_INT 105
21073: PUSH
21074: LD_INT 106
21076: PUSH
21077: LD_INT 107
21079: PUSH
21080: LD_INT 108
21082: PUSH
21083: LD_INT 109
21085: PUSH
21086: LD_INT 110
21088: PUSH
21089: LD_INT 111
21091: PUSH
21092: LD_INT 112
21094: PUSH
21095: LD_INT 113
21097: PUSH
21098: LD_INT 114
21100: PUSH
21101: LD_INT 115
21103: PUSH
21104: LD_INT 116
21106: PUSH
21107: LD_INT 117
21109: PUSH
21110: LD_INT 118
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: ST_TO_ADDR
// if result then
21137: LD_VAR 0 2
21141: IFFALSE 21927
// begin normal :=  ;
21143: LD_ADDR_VAR 0 5
21147: PUSH
21148: LD_STRING 
21150: ST_TO_ADDR
// hardcore :=  ;
21151: LD_ADDR_VAR 0 6
21155: PUSH
21156: LD_STRING 
21158: ST_TO_ADDR
// active :=  ;
21159: LD_ADDR_VAR 0 7
21163: PUSH
21164: LD_STRING 
21166: ST_TO_ADDR
// for i = 1 to normalCounter do
21167: LD_ADDR_VAR 0 8
21171: PUSH
21172: DOUBLE
21173: LD_INT 1
21175: DEC
21176: ST_TO_ADDR
21177: LD_EXP 53
21181: PUSH
21182: FOR_TO
21183: IFFALSE 21284
// begin tmp := 0 ;
21185: LD_ADDR_VAR 0 3
21189: PUSH
21190: LD_STRING 0
21192: ST_TO_ADDR
// if result [ 1 ] then
21193: LD_VAR 0 2
21197: PUSH
21198: LD_INT 1
21200: ARRAY
21201: IFFALSE 21266
// if result [ 1 ] [ 1 ] = i then
21203: LD_VAR 0 2
21207: PUSH
21208: LD_INT 1
21210: ARRAY
21211: PUSH
21212: LD_INT 1
21214: ARRAY
21215: PUSH
21216: LD_VAR 0 8
21220: EQUAL
21221: IFFALSE 21266
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21223: LD_ADDR_VAR 0 2
21227: PUSH
21228: LD_VAR 0 2
21232: PPUSH
21233: LD_INT 1
21235: PPUSH
21236: LD_VAR 0 2
21240: PUSH
21241: LD_INT 1
21243: ARRAY
21244: PPUSH
21245: LD_INT 1
21247: PPUSH
21248: CALL_OW 3
21252: PPUSH
21253: CALL_OW 1
21257: ST_TO_ADDR
// tmp := 1 ;
21258: LD_ADDR_VAR 0 3
21262: PUSH
21263: LD_STRING 1
21265: ST_TO_ADDR
// end ; normal := normal & tmp ;
21266: LD_ADDR_VAR 0 5
21270: PUSH
21271: LD_VAR 0 5
21275: PUSH
21276: LD_VAR 0 3
21280: STR
21281: ST_TO_ADDR
// end ;
21282: GO 21182
21284: POP
21285: POP
// for i = 1 to hardcoreCounter do
21286: LD_ADDR_VAR 0 8
21290: PUSH
21291: DOUBLE
21292: LD_INT 1
21294: DEC
21295: ST_TO_ADDR
21296: LD_EXP 54
21300: PUSH
21301: FOR_TO
21302: IFFALSE 21407
// begin tmp := 0 ;
21304: LD_ADDR_VAR 0 3
21308: PUSH
21309: LD_STRING 0
21311: ST_TO_ADDR
// if result [ 2 ] then
21312: LD_VAR 0 2
21316: PUSH
21317: LD_INT 2
21319: ARRAY
21320: IFFALSE 21389
// if result [ 2 ] [ 1 ] = 100 + i then
21322: LD_VAR 0 2
21326: PUSH
21327: LD_INT 2
21329: ARRAY
21330: PUSH
21331: LD_INT 1
21333: ARRAY
21334: PUSH
21335: LD_INT 100
21337: PUSH
21338: LD_VAR 0 8
21342: PLUS
21343: EQUAL
21344: IFFALSE 21389
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21346: LD_ADDR_VAR 0 2
21350: PUSH
21351: LD_VAR 0 2
21355: PPUSH
21356: LD_INT 2
21358: PPUSH
21359: LD_VAR 0 2
21363: PUSH
21364: LD_INT 2
21366: ARRAY
21367: PPUSH
21368: LD_INT 1
21370: PPUSH
21371: CALL_OW 3
21375: PPUSH
21376: CALL_OW 1
21380: ST_TO_ADDR
// tmp := 1 ;
21381: LD_ADDR_VAR 0 3
21385: PUSH
21386: LD_STRING 1
21388: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21389: LD_ADDR_VAR 0 6
21393: PUSH
21394: LD_VAR 0 6
21398: PUSH
21399: LD_VAR 0 3
21403: STR
21404: ST_TO_ADDR
// end ;
21405: GO 21301
21407: POP
21408: POP
// if isGameLoad then
21409: LD_VAR 0 1
21413: IFFALSE 21888
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21415: LD_ADDR_VAR 0 4
21419: PUSH
21420: LD_EXP 57
21424: PUSH
21425: LD_EXP 56
21429: PUSH
21430: LD_EXP 58
21434: PUSH
21435: LD_EXP 55
21439: PUSH
21440: LD_EXP 59
21444: PUSH
21445: LD_EXP 60
21449: PUSH
21450: LD_EXP 61
21454: PUSH
21455: LD_EXP 62
21459: PUSH
21460: LD_EXP 63
21464: PUSH
21465: LD_EXP 64
21469: PUSH
21470: LD_EXP 65
21474: PUSH
21475: LD_EXP 66
21479: PUSH
21480: LD_EXP 67
21484: PUSH
21485: LD_EXP 68
21489: PUSH
21490: LD_EXP 76
21494: PUSH
21495: LD_EXP 77
21499: PUSH
21500: LD_EXP 78
21504: PUSH
21505: LD_EXP 79
21509: PUSH
21510: LD_EXP 81
21514: PUSH
21515: LD_EXP 82
21519: PUSH
21520: LD_EXP 83
21524: PUSH
21525: LD_EXP 86
21529: PUSH
21530: LD_EXP 88
21534: PUSH
21535: LD_EXP 89
21539: PUSH
21540: LD_EXP 90
21544: PUSH
21545: LD_EXP 92
21549: PUSH
21550: LD_EXP 93
21554: PUSH
21555: LD_EXP 96
21559: PUSH
21560: LD_EXP 97
21564: PUSH
21565: LD_EXP 98
21569: PUSH
21570: LD_EXP 99
21574: PUSH
21575: LD_EXP 100
21579: PUSH
21580: LD_EXP 101
21584: PUSH
21585: LD_EXP 102
21589: PUSH
21590: LD_EXP 103
21594: PUSH
21595: LD_EXP 104
21599: PUSH
21600: LD_EXP 69
21604: PUSH
21605: LD_EXP 70
21609: PUSH
21610: LD_EXP 73
21614: PUSH
21615: LD_EXP 74
21619: PUSH
21620: LD_EXP 75
21624: PUSH
21625: LD_EXP 71
21629: PUSH
21630: LD_EXP 72
21634: PUSH
21635: LD_EXP 80
21639: PUSH
21640: LD_EXP 84
21644: PUSH
21645: LD_EXP 85
21649: PUSH
21650: LD_EXP 87
21654: PUSH
21655: LD_EXP 91
21659: PUSH
21660: LD_EXP 94
21664: PUSH
21665: LD_EXP 95
21669: PUSH
21670: LD_EXP 105
21674: PUSH
21675: LD_EXP 106
21679: PUSH
21680: LD_EXP 107
21684: PUSH
21685: LD_EXP 108
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: ST_TO_ADDR
// tmp :=  ;
21746: LD_ADDR_VAR 0 3
21750: PUSH
21751: LD_STRING 
21753: ST_TO_ADDR
// for i = 1 to normalCounter do
21754: LD_ADDR_VAR 0 8
21758: PUSH
21759: DOUBLE
21760: LD_INT 1
21762: DEC
21763: ST_TO_ADDR
21764: LD_EXP 53
21768: PUSH
21769: FOR_TO
21770: IFFALSE 21806
// begin if flags [ i ] then
21772: LD_VAR 0 4
21776: PUSH
21777: LD_VAR 0 8
21781: ARRAY
21782: IFFALSE 21804
// tmp := tmp & i & ; ;
21784: LD_ADDR_VAR 0 3
21788: PUSH
21789: LD_VAR 0 3
21793: PUSH
21794: LD_VAR 0 8
21798: STR
21799: PUSH
21800: LD_STRING ;
21802: STR
21803: ST_TO_ADDR
// end ;
21804: GO 21769
21806: POP
21807: POP
// for i = 1 to hardcoreCounter do
21808: LD_ADDR_VAR 0 8
21812: PUSH
21813: DOUBLE
21814: LD_INT 1
21816: DEC
21817: ST_TO_ADDR
21818: LD_EXP 54
21822: PUSH
21823: FOR_TO
21824: IFFALSE 21870
// begin if flags [ normalCounter + i ] then
21826: LD_VAR 0 4
21830: PUSH
21831: LD_EXP 53
21835: PUSH
21836: LD_VAR 0 8
21840: PLUS
21841: ARRAY
21842: IFFALSE 21868
// tmp := tmp & ( 100 + i ) & ; ;
21844: LD_ADDR_VAR 0 3
21848: PUSH
21849: LD_VAR 0 3
21853: PUSH
21854: LD_INT 100
21856: PUSH
21857: LD_VAR 0 8
21861: PLUS
21862: STR
21863: PUSH
21864: LD_STRING ;
21866: STR
21867: ST_TO_ADDR
// end ;
21868: GO 21823
21870: POP
21871: POP
// if tmp then
21872: LD_VAR 0 3
21876: IFFALSE 21888
// active := tmp ;
21878: LD_ADDR_VAR 0 7
21882: PUSH
21883: LD_VAR 0 3
21887: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21888: LD_STRING getStreamItemsFromMission("
21890: PUSH
21891: LD_VAR 0 5
21895: STR
21896: PUSH
21897: LD_STRING ","
21899: STR
21900: PUSH
21901: LD_VAR 0 6
21905: STR
21906: PUSH
21907: LD_STRING ","
21909: STR
21910: PUSH
21911: LD_VAR 0 7
21915: STR
21916: PUSH
21917: LD_STRING ")
21919: STR
21920: PPUSH
21921: CALL_OW 559
// end else
21925: GO 21934
// ToLua ( getStreamItemsFromMission("","","") ) ;
21927: LD_STRING getStreamItemsFromMission("","","")
21929: PPUSH
21930: CALL_OW 559
// end ;
21934: LD_VAR 0 2
21938: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21939: LD_EXP 52
21943: PUSH
21944: LD_EXP 57
21948: AND
21949: IFFALSE 22073
21951: GO 21953
21953: DISABLE
21954: LD_INT 0
21956: PPUSH
21957: PPUSH
// begin enable ;
21958: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21959: LD_ADDR_VAR 0 2
21963: PUSH
21964: LD_INT 22
21966: PUSH
21967: LD_OWVAR 2
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 2
21978: PUSH
21979: LD_INT 34
21981: PUSH
21982: LD_INT 7
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 34
21991: PUSH
21992: LD_INT 45
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 34
22001: PUSH
22002: LD_INT 28
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 34
22011: PUSH
22012: LD_INT 47
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PPUSH
22030: CALL_OW 69
22034: ST_TO_ADDR
// if not tmp then
22035: LD_VAR 0 2
22039: NOT
22040: IFFALSE 22044
// exit ;
22042: GO 22073
// for i in tmp do
22044: LD_ADDR_VAR 0 1
22048: PUSH
22049: LD_VAR 0 2
22053: PUSH
22054: FOR_IN
22055: IFFALSE 22071
// begin SetLives ( i , 0 ) ;
22057: LD_VAR 0 1
22061: PPUSH
22062: LD_INT 0
22064: PPUSH
22065: CALL_OW 234
// end ;
22069: GO 22054
22071: POP
22072: POP
// end ;
22073: PPOPN 2
22075: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22076: LD_EXP 52
22080: PUSH
22081: LD_EXP 58
22085: AND
22086: IFFALSE 22170
22088: GO 22090
22090: DISABLE
22091: LD_INT 0
22093: PPUSH
22094: PPUSH
// begin enable ;
22095: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22096: LD_ADDR_VAR 0 2
22100: PUSH
22101: LD_INT 22
22103: PUSH
22104: LD_OWVAR 2
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 32
22115: PUSH
22116: LD_INT 3
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PPUSH
22127: CALL_OW 69
22131: ST_TO_ADDR
// if not tmp then
22132: LD_VAR 0 2
22136: NOT
22137: IFFALSE 22141
// exit ;
22139: GO 22170
// for i in tmp do
22141: LD_ADDR_VAR 0 1
22145: PUSH
22146: LD_VAR 0 2
22150: PUSH
22151: FOR_IN
22152: IFFALSE 22168
// begin SetLives ( i , 0 ) ;
22154: LD_VAR 0 1
22158: PPUSH
22159: LD_INT 0
22161: PPUSH
22162: CALL_OW 234
// end ;
22166: GO 22151
22168: POP
22169: POP
// end ;
22170: PPOPN 2
22172: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22173: LD_EXP 52
22177: PUSH
22178: LD_EXP 55
22182: AND
22183: IFFALSE 22276
22185: GO 22187
22187: DISABLE
22188: LD_INT 0
22190: PPUSH
// begin enable ;
22191: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22192: LD_ADDR_VAR 0 1
22196: PUSH
22197: LD_INT 22
22199: PUSH
22200: LD_OWVAR 2
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 2
22211: PUSH
22212: LD_INT 25
22214: PUSH
22215: LD_INT 5
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 25
22224: PUSH
22225: LD_INT 9
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 25
22234: PUSH
22235: LD_INT 8
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PPUSH
22252: CALL_OW 69
22256: PUSH
22257: FOR_IN
22258: IFFALSE 22274
// begin SetClass ( i , 1 ) ;
22260: LD_VAR 0 1
22264: PPUSH
22265: LD_INT 1
22267: PPUSH
22268: CALL_OW 336
// end ;
22272: GO 22257
22274: POP
22275: POP
// end ;
22276: PPOPN 1
22278: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22279: LD_EXP 52
22283: PUSH
22284: LD_EXP 56
22288: AND
22289: PUSH
22290: LD_OWVAR 65
22294: PUSH
22295: LD_INT 7
22297: LESS
22298: AND
22299: IFFALSE 22313
22301: GO 22303
22303: DISABLE
// begin enable ;
22304: ENABLE
// game_speed := 7 ;
22305: LD_ADDR_OWVAR 65
22309: PUSH
22310: LD_INT 7
22312: ST_TO_ADDR
// end ;
22313: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22314: LD_EXP 52
22318: PUSH
22319: LD_EXP 59
22323: AND
22324: IFFALSE 22526
22326: GO 22328
22328: DISABLE
22329: LD_INT 0
22331: PPUSH
22332: PPUSH
22333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22334: LD_ADDR_VAR 0 3
22338: PUSH
22339: LD_INT 81
22341: PUSH
22342: LD_OWVAR 2
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 21
22353: PUSH
22354: LD_INT 1
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PPUSH
22365: CALL_OW 69
22369: ST_TO_ADDR
// if not tmp then
22370: LD_VAR 0 3
22374: NOT
22375: IFFALSE 22379
// exit ;
22377: GO 22526
// if tmp > 5 then
22379: LD_VAR 0 3
22383: PUSH
22384: LD_INT 5
22386: GREATER
22387: IFFALSE 22399
// k := 5 else
22389: LD_ADDR_VAR 0 2
22393: PUSH
22394: LD_INT 5
22396: ST_TO_ADDR
22397: GO 22409
// k := tmp ;
22399: LD_ADDR_VAR 0 2
22403: PUSH
22404: LD_VAR 0 3
22408: ST_TO_ADDR
// for i := 1 to k do
22409: LD_ADDR_VAR 0 1
22413: PUSH
22414: DOUBLE
22415: LD_INT 1
22417: DEC
22418: ST_TO_ADDR
22419: LD_VAR 0 2
22423: PUSH
22424: FOR_TO
22425: IFFALSE 22524
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22427: LD_VAR 0 3
22431: PUSH
22432: LD_VAR 0 1
22436: ARRAY
22437: PPUSH
22438: LD_VAR 0 1
22442: PUSH
22443: LD_INT 4
22445: MOD
22446: PUSH
22447: LD_INT 1
22449: PLUS
22450: PPUSH
22451: CALL_OW 259
22455: PUSH
22456: LD_INT 10
22458: LESS
22459: IFFALSE 22522
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22461: LD_VAR 0 3
22465: PUSH
22466: LD_VAR 0 1
22470: ARRAY
22471: PPUSH
22472: LD_VAR 0 1
22476: PUSH
22477: LD_INT 4
22479: MOD
22480: PUSH
22481: LD_INT 1
22483: PLUS
22484: PPUSH
22485: LD_VAR 0 3
22489: PUSH
22490: LD_VAR 0 1
22494: ARRAY
22495: PPUSH
22496: LD_VAR 0 1
22500: PUSH
22501: LD_INT 4
22503: MOD
22504: PUSH
22505: LD_INT 1
22507: PLUS
22508: PPUSH
22509: CALL_OW 259
22513: PUSH
22514: LD_INT 1
22516: PLUS
22517: PPUSH
22518: CALL_OW 237
22522: GO 22424
22524: POP
22525: POP
// end ;
22526: PPOPN 3
22528: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22529: LD_EXP 52
22533: PUSH
22534: LD_EXP 60
22538: AND
22539: IFFALSE 22559
22541: GO 22543
22543: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22544: LD_INT 4
22546: PPUSH
22547: LD_OWVAR 2
22551: PPUSH
22552: LD_INT 0
22554: PPUSH
22555: CALL_OW 324
22559: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22560: LD_EXP 52
22564: PUSH
22565: LD_EXP 89
22569: AND
22570: IFFALSE 22590
22572: GO 22574
22574: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22575: LD_INT 19
22577: PPUSH
22578: LD_OWVAR 2
22582: PPUSH
22583: LD_INT 0
22585: PPUSH
22586: CALL_OW 324
22590: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22591: LD_EXP 52
22595: PUSH
22596: LD_EXP 61
22600: AND
22601: IFFALSE 22703
22603: GO 22605
22605: DISABLE
22606: LD_INT 0
22608: PPUSH
22609: PPUSH
// begin enable ;
22610: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22611: LD_ADDR_VAR 0 2
22615: PUSH
22616: LD_INT 22
22618: PUSH
22619: LD_OWVAR 2
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 2
22630: PUSH
22631: LD_INT 34
22633: PUSH
22634: LD_INT 11
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 34
22643: PUSH
22644: LD_INT 30
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: LIST
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PPUSH
22660: CALL_OW 69
22664: ST_TO_ADDR
// if not tmp then
22665: LD_VAR 0 2
22669: NOT
22670: IFFALSE 22674
// exit ;
22672: GO 22703
// for i in tmp do
22674: LD_ADDR_VAR 0 1
22678: PUSH
22679: LD_VAR 0 2
22683: PUSH
22684: FOR_IN
22685: IFFALSE 22701
// begin SetLives ( i , 0 ) ;
22687: LD_VAR 0 1
22691: PPUSH
22692: LD_INT 0
22694: PPUSH
22695: CALL_OW 234
// end ;
22699: GO 22684
22701: POP
22702: POP
// end ;
22703: PPOPN 2
22705: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22706: LD_EXP 52
22710: PUSH
22711: LD_EXP 62
22715: AND
22716: IFFALSE 22736
22718: GO 22720
22720: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22721: LD_INT 32
22723: PPUSH
22724: LD_OWVAR 2
22728: PPUSH
22729: LD_INT 0
22731: PPUSH
22732: CALL_OW 324
22736: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22737: LD_EXP 52
22741: PUSH
22742: LD_EXP 63
22746: AND
22747: IFFALSE 22928
22749: GO 22751
22751: DISABLE
22752: LD_INT 0
22754: PPUSH
22755: PPUSH
22756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22757: LD_ADDR_VAR 0 2
22761: PUSH
22762: LD_INT 22
22764: PUSH
22765: LD_OWVAR 2
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 33
22776: PUSH
22777: LD_INT 3
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PPUSH
22788: CALL_OW 69
22792: ST_TO_ADDR
// if not tmp then
22793: LD_VAR 0 2
22797: NOT
22798: IFFALSE 22802
// exit ;
22800: GO 22928
// side := 0 ;
22802: LD_ADDR_VAR 0 3
22806: PUSH
22807: LD_INT 0
22809: ST_TO_ADDR
// for i := 1 to 8 do
22810: LD_ADDR_VAR 0 1
22814: PUSH
22815: DOUBLE
22816: LD_INT 1
22818: DEC
22819: ST_TO_ADDR
22820: LD_INT 8
22822: PUSH
22823: FOR_TO
22824: IFFALSE 22872
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22826: LD_OWVAR 2
22830: PUSH
22831: LD_VAR 0 1
22835: NONEQUAL
22836: PUSH
22837: LD_OWVAR 2
22841: PPUSH
22842: LD_VAR 0 1
22846: PPUSH
22847: CALL_OW 81
22851: PUSH
22852: LD_INT 2
22854: EQUAL
22855: AND
22856: IFFALSE 22870
// begin side := i ;
22858: LD_ADDR_VAR 0 3
22862: PUSH
22863: LD_VAR 0 1
22867: ST_TO_ADDR
// break ;
22868: GO 22872
// end ;
22870: GO 22823
22872: POP
22873: POP
// if not side then
22874: LD_VAR 0 3
22878: NOT
22879: IFFALSE 22883
// exit ;
22881: GO 22928
// for i := 1 to tmp do
22883: LD_ADDR_VAR 0 1
22887: PUSH
22888: DOUBLE
22889: LD_INT 1
22891: DEC
22892: ST_TO_ADDR
22893: LD_VAR 0 2
22897: PUSH
22898: FOR_TO
22899: IFFALSE 22926
// if Prob ( 60 ) then
22901: LD_INT 60
22903: PPUSH
22904: CALL_OW 13
22908: IFFALSE 22924
// SetSide ( i , side ) ;
22910: LD_VAR 0 1
22914: PPUSH
22915: LD_VAR 0 3
22919: PPUSH
22920: CALL_OW 235
22924: GO 22898
22926: POP
22927: POP
// end ;
22928: PPOPN 3
22930: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22931: LD_EXP 52
22935: PUSH
22936: LD_EXP 65
22940: AND
22941: IFFALSE 23060
22943: GO 22945
22945: DISABLE
22946: LD_INT 0
22948: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22949: LD_ADDR_VAR 0 1
22953: PUSH
22954: LD_INT 22
22956: PUSH
22957: LD_OWVAR 2
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 21
22968: PUSH
22969: LD_INT 1
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 3
22978: PUSH
22979: LD_INT 23
22981: PUSH
22982: LD_INT 0
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: LIST
22997: PPUSH
22998: CALL_OW 69
23002: PUSH
23003: FOR_IN
23004: IFFALSE 23058
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23006: LD_VAR 0 1
23010: PPUSH
23011: CALL_OW 257
23015: PUSH
23016: LD_INT 1
23018: PUSH
23019: LD_INT 2
23021: PUSH
23022: LD_INT 3
23024: PUSH
23025: LD_INT 4
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: IN
23034: IFFALSE 23056
// SetClass ( un , rand ( 1 , 4 ) ) ;
23036: LD_VAR 0 1
23040: PPUSH
23041: LD_INT 1
23043: PPUSH
23044: LD_INT 4
23046: PPUSH
23047: CALL_OW 12
23051: PPUSH
23052: CALL_OW 336
23056: GO 23003
23058: POP
23059: POP
// end ;
23060: PPOPN 1
23062: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23063: LD_EXP 52
23067: PUSH
23068: LD_EXP 64
23072: AND
23073: IFFALSE 23152
23075: GO 23077
23077: DISABLE
23078: LD_INT 0
23080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23081: LD_ADDR_VAR 0 1
23085: PUSH
23086: LD_INT 22
23088: PUSH
23089: LD_OWVAR 2
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 21
23100: PUSH
23101: LD_INT 3
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PPUSH
23112: CALL_OW 69
23116: ST_TO_ADDR
// if not tmp then
23117: LD_VAR 0 1
23121: NOT
23122: IFFALSE 23126
// exit ;
23124: GO 23152
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23126: LD_VAR 0 1
23130: PUSH
23131: LD_INT 1
23133: PPUSH
23134: LD_VAR 0 1
23138: PPUSH
23139: CALL_OW 12
23143: ARRAY
23144: PPUSH
23145: LD_INT 100
23147: PPUSH
23148: CALL_OW 234
// end ;
23152: PPOPN 1
23154: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23155: LD_EXP 52
23159: PUSH
23160: LD_EXP 66
23164: AND
23165: IFFALSE 23263
23167: GO 23169
23169: DISABLE
23170: LD_INT 0
23172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23173: LD_ADDR_VAR 0 1
23177: PUSH
23178: LD_INT 22
23180: PUSH
23181: LD_OWVAR 2
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 21
23192: PUSH
23193: LD_INT 1
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PPUSH
23204: CALL_OW 69
23208: ST_TO_ADDR
// if not tmp then
23209: LD_VAR 0 1
23213: NOT
23214: IFFALSE 23218
// exit ;
23216: GO 23263
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23218: LD_VAR 0 1
23222: PUSH
23223: LD_INT 1
23225: PPUSH
23226: LD_VAR 0 1
23230: PPUSH
23231: CALL_OW 12
23235: ARRAY
23236: PPUSH
23237: LD_INT 1
23239: PPUSH
23240: LD_INT 4
23242: PPUSH
23243: CALL_OW 12
23247: PPUSH
23248: LD_INT 3000
23250: PPUSH
23251: LD_INT 9000
23253: PPUSH
23254: CALL_OW 12
23258: PPUSH
23259: CALL_OW 492
// end ;
23263: PPOPN 1
23265: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23266: LD_EXP 52
23270: PUSH
23271: LD_EXP 67
23275: AND
23276: IFFALSE 23296
23278: GO 23280
23280: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23281: LD_INT 1
23283: PPUSH
23284: LD_OWVAR 2
23288: PPUSH
23289: LD_INT 0
23291: PPUSH
23292: CALL_OW 324
23296: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23297: LD_EXP 52
23301: PUSH
23302: LD_EXP 68
23306: AND
23307: IFFALSE 23390
23309: GO 23311
23311: DISABLE
23312: LD_INT 0
23314: PPUSH
23315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23316: LD_ADDR_VAR 0 2
23320: PUSH
23321: LD_INT 22
23323: PUSH
23324: LD_OWVAR 2
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 21
23335: PUSH
23336: LD_INT 3
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PPUSH
23347: CALL_OW 69
23351: ST_TO_ADDR
// if not tmp then
23352: LD_VAR 0 2
23356: NOT
23357: IFFALSE 23361
// exit ;
23359: GO 23390
// for i in tmp do
23361: LD_ADDR_VAR 0 1
23365: PUSH
23366: LD_VAR 0 2
23370: PUSH
23371: FOR_IN
23372: IFFALSE 23388
// SetBLevel ( i , 10 ) ;
23374: LD_VAR 0 1
23378: PPUSH
23379: LD_INT 10
23381: PPUSH
23382: CALL_OW 241
23386: GO 23371
23388: POP
23389: POP
// end ;
23390: PPOPN 2
23392: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23393: LD_EXP 52
23397: PUSH
23398: LD_EXP 69
23402: AND
23403: IFFALSE 23514
23405: GO 23407
23407: DISABLE
23408: LD_INT 0
23410: PPUSH
23411: PPUSH
23412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23413: LD_ADDR_VAR 0 3
23417: PUSH
23418: LD_INT 22
23420: PUSH
23421: LD_OWVAR 2
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 25
23432: PUSH
23433: LD_INT 1
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PPUSH
23444: CALL_OW 69
23448: ST_TO_ADDR
// if not tmp then
23449: LD_VAR 0 3
23453: NOT
23454: IFFALSE 23458
// exit ;
23456: GO 23514
// un := tmp [ rand ( 1 , tmp ) ] ;
23458: LD_ADDR_VAR 0 2
23462: PUSH
23463: LD_VAR 0 3
23467: PUSH
23468: LD_INT 1
23470: PPUSH
23471: LD_VAR 0 3
23475: PPUSH
23476: CALL_OW 12
23480: ARRAY
23481: ST_TO_ADDR
// if Crawls ( un ) then
23482: LD_VAR 0 2
23486: PPUSH
23487: CALL_OW 318
23491: IFFALSE 23502
// ComWalk ( un ) ;
23493: LD_VAR 0 2
23497: PPUSH
23498: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23502: LD_VAR 0 2
23506: PPUSH
23507: LD_INT 5
23509: PPUSH
23510: CALL_OW 336
// end ;
23514: PPOPN 3
23516: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23517: LD_EXP 52
23521: PUSH
23522: LD_EXP 70
23526: AND
23527: PUSH
23528: LD_OWVAR 67
23532: PUSH
23533: LD_INT 4
23535: LESS
23536: AND
23537: IFFALSE 23556
23539: GO 23541
23541: DISABLE
// begin Difficulty := Difficulty + 1 ;
23542: LD_ADDR_OWVAR 67
23546: PUSH
23547: LD_OWVAR 67
23551: PUSH
23552: LD_INT 1
23554: PLUS
23555: ST_TO_ADDR
// end ;
23556: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23557: LD_EXP 52
23561: PUSH
23562: LD_EXP 71
23566: AND
23567: IFFALSE 23670
23569: GO 23571
23571: DISABLE
23572: LD_INT 0
23574: PPUSH
// begin for i := 1 to 5 do
23575: LD_ADDR_VAR 0 1
23579: PUSH
23580: DOUBLE
23581: LD_INT 1
23583: DEC
23584: ST_TO_ADDR
23585: LD_INT 5
23587: PUSH
23588: FOR_TO
23589: IFFALSE 23668
// begin uc_nation := nation_nature ;
23591: LD_ADDR_OWVAR 21
23595: PUSH
23596: LD_INT 0
23598: ST_TO_ADDR
// uc_side := 0 ;
23599: LD_ADDR_OWVAR 20
23603: PUSH
23604: LD_INT 0
23606: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23607: LD_ADDR_OWVAR 29
23611: PUSH
23612: LD_INT 12
23614: PUSH
23615: LD_INT 12
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: ST_TO_ADDR
// hc_agressivity := 20 ;
23622: LD_ADDR_OWVAR 35
23626: PUSH
23627: LD_INT 20
23629: ST_TO_ADDR
// hc_class := class_tiger ;
23630: LD_ADDR_OWVAR 28
23634: PUSH
23635: LD_INT 14
23637: ST_TO_ADDR
// hc_gallery :=  ;
23638: LD_ADDR_OWVAR 33
23642: PUSH
23643: LD_STRING 
23645: ST_TO_ADDR
// hc_name :=  ;
23646: LD_ADDR_OWVAR 26
23650: PUSH
23651: LD_STRING 
23653: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23654: CALL_OW 44
23658: PPUSH
23659: LD_INT 0
23661: PPUSH
23662: CALL_OW 51
// end ;
23666: GO 23588
23668: POP
23669: POP
// end ;
23670: PPOPN 1
23672: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23673: LD_EXP 52
23677: PUSH
23678: LD_EXP 72
23682: AND
23683: IFFALSE 23692
23685: GO 23687
23687: DISABLE
// StreamSibBomb ;
23688: CALL 23693 0 0
23692: END
// export function StreamSibBomb ; var i , x , y ; begin
23693: LD_INT 0
23695: PPUSH
23696: PPUSH
23697: PPUSH
23698: PPUSH
// result := false ;
23699: LD_ADDR_VAR 0 1
23703: PUSH
23704: LD_INT 0
23706: ST_TO_ADDR
// for i := 1 to 16 do
23707: LD_ADDR_VAR 0 2
23711: PUSH
23712: DOUBLE
23713: LD_INT 1
23715: DEC
23716: ST_TO_ADDR
23717: LD_INT 16
23719: PUSH
23720: FOR_TO
23721: IFFALSE 23920
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23723: LD_ADDR_VAR 0 3
23727: PUSH
23728: LD_INT 10
23730: PUSH
23731: LD_INT 20
23733: PUSH
23734: LD_INT 30
23736: PUSH
23737: LD_INT 40
23739: PUSH
23740: LD_INT 50
23742: PUSH
23743: LD_INT 60
23745: PUSH
23746: LD_INT 70
23748: PUSH
23749: LD_INT 80
23751: PUSH
23752: LD_INT 90
23754: PUSH
23755: LD_INT 100
23757: PUSH
23758: LD_INT 110
23760: PUSH
23761: LD_INT 120
23763: PUSH
23764: LD_INT 130
23766: PUSH
23767: LD_INT 140
23769: PUSH
23770: LD_INT 150
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: PPUSH
23793: LD_INT 15
23795: PPUSH
23796: CALL_OW 12
23800: ARRAY
23801: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23802: LD_ADDR_VAR 0 4
23806: PUSH
23807: LD_INT 10
23809: PUSH
23810: LD_INT 20
23812: PUSH
23813: LD_INT 30
23815: PUSH
23816: LD_INT 40
23818: PUSH
23819: LD_INT 50
23821: PUSH
23822: LD_INT 60
23824: PUSH
23825: LD_INT 70
23827: PUSH
23828: LD_INT 80
23830: PUSH
23831: LD_INT 90
23833: PUSH
23834: LD_INT 100
23836: PUSH
23837: LD_INT 110
23839: PUSH
23840: LD_INT 120
23842: PUSH
23843: LD_INT 130
23845: PUSH
23846: LD_INT 140
23848: PUSH
23849: LD_INT 150
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 1
23871: PPUSH
23872: LD_INT 15
23874: PPUSH
23875: CALL_OW 12
23879: ARRAY
23880: ST_TO_ADDR
// if ValidHex ( x , y ) then
23881: LD_VAR 0 3
23885: PPUSH
23886: LD_VAR 0 4
23890: PPUSH
23891: CALL_OW 488
23895: IFFALSE 23918
// begin result := [ x , y ] ;
23897: LD_ADDR_VAR 0 1
23901: PUSH
23902: LD_VAR 0 3
23906: PUSH
23907: LD_VAR 0 4
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: ST_TO_ADDR
// break ;
23916: GO 23920
// end ; end ;
23918: GO 23720
23920: POP
23921: POP
// if result then
23922: LD_VAR 0 1
23926: IFFALSE 23986
// begin ToLua ( playSibBomb() ) ;
23928: LD_STRING playSibBomb()
23930: PPUSH
23931: CALL_OW 559
// wait ( 0 0$14 ) ;
23935: LD_INT 490
23937: PPUSH
23938: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23942: LD_VAR 0 1
23946: PUSH
23947: LD_INT 1
23949: ARRAY
23950: PPUSH
23951: LD_VAR 0 1
23955: PUSH
23956: LD_INT 2
23958: ARRAY
23959: PPUSH
23960: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23964: LD_VAR 0 1
23968: PUSH
23969: LD_INT 1
23971: ARRAY
23972: PPUSH
23973: LD_VAR 0 1
23977: PUSH
23978: LD_INT 2
23980: ARRAY
23981: PPUSH
23982: CALL_OW 429
// end ; end ;
23986: LD_VAR 0 1
23990: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23991: LD_EXP 52
23995: PUSH
23996: LD_EXP 74
24000: AND
24001: IFFALSE 24013
24003: GO 24005
24005: DISABLE
// YouLost (  ) ;
24006: LD_STRING 
24008: PPUSH
24009: CALL_OW 104
24013: END
// every 0 0$1 trigger StreamModeActive and sFog do
24014: LD_EXP 52
24018: PUSH
24019: LD_EXP 73
24023: AND
24024: IFFALSE 24038
24026: GO 24028
24028: DISABLE
// FogOff ( your_side ) ;
24029: LD_OWVAR 2
24033: PPUSH
24034: CALL_OW 344
24038: END
// every 0 0$1 trigger StreamModeActive and sSun do
24039: LD_EXP 52
24043: PUSH
24044: LD_EXP 75
24048: AND
24049: IFFALSE 24077
24051: GO 24053
24053: DISABLE
// begin solar_recharge_percent := 0 ;
24054: LD_ADDR_OWVAR 79
24058: PUSH
24059: LD_INT 0
24061: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24062: LD_INT 10500
24064: PPUSH
24065: CALL_OW 67
// solar_recharge_percent := 100 ;
24069: LD_ADDR_OWVAR 79
24073: PUSH
24074: LD_INT 100
24076: ST_TO_ADDR
// end ;
24077: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24078: LD_EXP 52
24082: PUSH
24083: LD_EXP 76
24087: AND
24088: IFFALSE 24327
24090: GO 24092
24092: DISABLE
24093: LD_INT 0
24095: PPUSH
24096: PPUSH
24097: PPUSH
// begin tmp := [ ] ;
24098: LD_ADDR_VAR 0 3
24102: PUSH
24103: EMPTY
24104: ST_TO_ADDR
// for i := 1 to 6 do
24105: LD_ADDR_VAR 0 1
24109: PUSH
24110: DOUBLE
24111: LD_INT 1
24113: DEC
24114: ST_TO_ADDR
24115: LD_INT 6
24117: PUSH
24118: FOR_TO
24119: IFFALSE 24224
// begin uc_nation := nation_nature ;
24121: LD_ADDR_OWVAR 21
24125: PUSH
24126: LD_INT 0
24128: ST_TO_ADDR
// uc_side := 0 ;
24129: LD_ADDR_OWVAR 20
24133: PUSH
24134: LD_INT 0
24136: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24137: LD_ADDR_OWVAR 29
24141: PUSH
24142: LD_INT 12
24144: PUSH
24145: LD_INT 12
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: ST_TO_ADDR
// hc_agressivity := 20 ;
24152: LD_ADDR_OWVAR 35
24156: PUSH
24157: LD_INT 20
24159: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24160: LD_ADDR_OWVAR 28
24164: PUSH
24165: LD_INT 17
24167: ST_TO_ADDR
// hc_gallery :=  ;
24168: LD_ADDR_OWVAR 33
24172: PUSH
24173: LD_STRING 
24175: ST_TO_ADDR
// hc_name :=  ;
24176: LD_ADDR_OWVAR 26
24180: PUSH
24181: LD_STRING 
24183: ST_TO_ADDR
// un := CreateHuman ;
24184: LD_ADDR_VAR 0 2
24188: PUSH
24189: CALL_OW 44
24193: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24194: LD_VAR 0 2
24198: PPUSH
24199: LD_INT 1
24201: PPUSH
24202: CALL_OW 51
// tmp := tmp ^ un ;
24206: LD_ADDR_VAR 0 3
24210: PUSH
24211: LD_VAR 0 3
24215: PUSH
24216: LD_VAR 0 2
24220: ADD
24221: ST_TO_ADDR
// end ;
24222: GO 24118
24224: POP
24225: POP
// repeat wait ( 0 0$1 ) ;
24226: LD_INT 35
24228: PPUSH
24229: CALL_OW 67
// for un in tmp do
24233: LD_ADDR_VAR 0 2
24237: PUSH
24238: LD_VAR 0 3
24242: PUSH
24243: FOR_IN
24244: IFFALSE 24318
// begin if IsDead ( un ) then
24246: LD_VAR 0 2
24250: PPUSH
24251: CALL_OW 301
24255: IFFALSE 24275
// begin tmp := tmp diff un ;
24257: LD_ADDR_VAR 0 3
24261: PUSH
24262: LD_VAR 0 3
24266: PUSH
24267: LD_VAR 0 2
24271: DIFF
24272: ST_TO_ADDR
// continue ;
24273: GO 24243
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24275: LD_VAR 0 2
24279: PPUSH
24280: LD_INT 3
24282: PUSH
24283: LD_INT 22
24285: PUSH
24286: LD_INT 0
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PPUSH
24297: CALL_OW 69
24301: PPUSH
24302: LD_VAR 0 2
24306: PPUSH
24307: CALL_OW 74
24311: PPUSH
24312: CALL_OW 115
// end ;
24316: GO 24243
24318: POP
24319: POP
// until not tmp ;
24320: LD_VAR 0 3
24324: NOT
24325: IFFALSE 24226
// end ;
24327: PPOPN 3
24329: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24330: LD_EXP 52
24334: PUSH
24335: LD_EXP 77
24339: AND
24340: IFFALSE 24394
24342: GO 24344
24344: DISABLE
// begin ToLua ( displayTroll(); ) ;
24345: LD_STRING displayTroll();
24347: PPUSH
24348: CALL_OW 559
// wait ( 3 3$00 ) ;
24352: LD_INT 6300
24354: PPUSH
24355: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24359: LD_STRING hideTroll();
24361: PPUSH
24362: CALL_OW 559
// wait ( 1 1$00 ) ;
24366: LD_INT 2100
24368: PPUSH
24369: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24373: LD_STRING displayTroll();
24375: PPUSH
24376: CALL_OW 559
// wait ( 1 1$00 ) ;
24380: LD_INT 2100
24382: PPUSH
24383: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24387: LD_STRING hideTroll();
24389: PPUSH
24390: CALL_OW 559
// end ;
24394: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24395: LD_EXP 52
24399: PUSH
24400: LD_EXP 78
24404: AND
24405: IFFALSE 24468
24407: GO 24409
24409: DISABLE
24410: LD_INT 0
24412: PPUSH
// begin p := 0 ;
24413: LD_ADDR_VAR 0 1
24417: PUSH
24418: LD_INT 0
24420: ST_TO_ADDR
// repeat game_speed := 1 ;
24421: LD_ADDR_OWVAR 65
24425: PUSH
24426: LD_INT 1
24428: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24429: LD_INT 35
24431: PPUSH
24432: CALL_OW 67
// p := p + 1 ;
24436: LD_ADDR_VAR 0 1
24440: PUSH
24441: LD_VAR 0 1
24445: PUSH
24446: LD_INT 1
24448: PLUS
24449: ST_TO_ADDR
// until p >= 60 ;
24450: LD_VAR 0 1
24454: PUSH
24455: LD_INT 60
24457: GREATEREQUAL
24458: IFFALSE 24421
// game_speed := 4 ;
24460: LD_ADDR_OWVAR 65
24464: PUSH
24465: LD_INT 4
24467: ST_TO_ADDR
// end ;
24468: PPOPN 1
24470: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24471: LD_EXP 52
24475: PUSH
24476: LD_EXP 79
24480: AND
24481: IFFALSE 24627
24483: GO 24485
24485: DISABLE
24486: LD_INT 0
24488: PPUSH
24489: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24490: LD_ADDR_VAR 0 1
24494: PUSH
24495: LD_INT 22
24497: PUSH
24498: LD_OWVAR 2
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 2
24509: PUSH
24510: LD_INT 30
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 30
24522: PUSH
24523: LD_INT 1
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: LIST
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PPUSH
24539: CALL_OW 69
24543: ST_TO_ADDR
// if not depot then
24544: LD_VAR 0 1
24548: NOT
24549: IFFALSE 24553
// exit ;
24551: GO 24627
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24553: LD_ADDR_VAR 0 2
24557: PUSH
24558: LD_VAR 0 1
24562: PUSH
24563: LD_INT 1
24565: PPUSH
24566: LD_VAR 0 1
24570: PPUSH
24571: CALL_OW 12
24575: ARRAY
24576: PPUSH
24577: CALL_OW 274
24581: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24582: LD_VAR 0 2
24586: PPUSH
24587: LD_INT 1
24589: PPUSH
24590: LD_INT 0
24592: PPUSH
24593: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24597: LD_VAR 0 2
24601: PPUSH
24602: LD_INT 2
24604: PPUSH
24605: LD_INT 0
24607: PPUSH
24608: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24612: LD_VAR 0 2
24616: PPUSH
24617: LD_INT 3
24619: PPUSH
24620: LD_INT 0
24622: PPUSH
24623: CALL_OW 277
// end ;
24627: PPOPN 2
24629: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24630: LD_EXP 52
24634: PUSH
24635: LD_EXP 80
24639: AND
24640: IFFALSE 24737
24642: GO 24644
24644: DISABLE
24645: LD_INT 0
24647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24648: LD_ADDR_VAR 0 1
24652: PUSH
24653: LD_INT 22
24655: PUSH
24656: LD_OWVAR 2
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 21
24667: PUSH
24668: LD_INT 1
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 3
24677: PUSH
24678: LD_INT 23
24680: PUSH
24681: LD_INT 0
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: LIST
24696: PPUSH
24697: CALL_OW 69
24701: ST_TO_ADDR
// if not tmp then
24702: LD_VAR 0 1
24706: NOT
24707: IFFALSE 24711
// exit ;
24709: GO 24737
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24711: LD_VAR 0 1
24715: PUSH
24716: LD_INT 1
24718: PPUSH
24719: LD_VAR 0 1
24723: PPUSH
24724: CALL_OW 12
24728: ARRAY
24729: PPUSH
24730: LD_INT 200
24732: PPUSH
24733: CALL_OW 234
// end ;
24737: PPOPN 1
24739: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24740: LD_EXP 52
24744: PUSH
24745: LD_EXP 81
24749: AND
24750: IFFALSE 24829
24752: GO 24754
24754: DISABLE
24755: LD_INT 0
24757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24758: LD_ADDR_VAR 0 1
24762: PUSH
24763: LD_INT 22
24765: PUSH
24766: LD_OWVAR 2
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 21
24777: PUSH
24778: LD_INT 2
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PPUSH
24789: CALL_OW 69
24793: ST_TO_ADDR
// if not tmp then
24794: LD_VAR 0 1
24798: NOT
24799: IFFALSE 24803
// exit ;
24801: GO 24829
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24803: LD_VAR 0 1
24807: PUSH
24808: LD_INT 1
24810: PPUSH
24811: LD_VAR 0 1
24815: PPUSH
24816: CALL_OW 12
24820: ARRAY
24821: PPUSH
24822: LD_INT 60
24824: PPUSH
24825: CALL_OW 234
// end ;
24829: PPOPN 1
24831: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24832: LD_EXP 52
24836: PUSH
24837: LD_EXP 82
24841: AND
24842: IFFALSE 24941
24844: GO 24846
24846: DISABLE
24847: LD_INT 0
24849: PPUSH
24850: PPUSH
// begin enable ;
24851: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24852: LD_ADDR_VAR 0 1
24856: PUSH
24857: LD_INT 22
24859: PUSH
24860: LD_OWVAR 2
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 61
24871: PUSH
24872: EMPTY
24873: LIST
24874: PUSH
24875: LD_INT 33
24877: PUSH
24878: LD_INT 2
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: LIST
24889: PPUSH
24890: CALL_OW 69
24894: ST_TO_ADDR
// if not tmp then
24895: LD_VAR 0 1
24899: NOT
24900: IFFALSE 24904
// exit ;
24902: GO 24941
// for i in tmp do
24904: LD_ADDR_VAR 0 2
24908: PUSH
24909: LD_VAR 0 1
24913: PUSH
24914: FOR_IN
24915: IFFALSE 24939
// if IsControledBy ( i ) then
24917: LD_VAR 0 2
24921: PPUSH
24922: CALL_OW 312
24926: IFFALSE 24937
// ComUnlink ( i ) ;
24928: LD_VAR 0 2
24932: PPUSH
24933: CALL_OW 136
24937: GO 24914
24939: POP
24940: POP
// end ;
24941: PPOPN 2
24943: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24944: LD_EXP 52
24948: PUSH
24949: LD_EXP 83
24953: AND
24954: IFFALSE 25094
24956: GO 24958
24958: DISABLE
24959: LD_INT 0
24961: PPUSH
24962: PPUSH
// begin ToLua ( displayPowell(); ) ;
24963: LD_STRING displayPowell();
24965: PPUSH
24966: CALL_OW 559
// uc_side := 0 ;
24970: LD_ADDR_OWVAR 20
24974: PUSH
24975: LD_INT 0
24977: ST_TO_ADDR
// uc_nation := 2 ;
24978: LD_ADDR_OWVAR 21
24982: PUSH
24983: LD_INT 2
24985: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24986: LD_ADDR_OWVAR 37
24990: PUSH
24991: LD_INT 14
24993: ST_TO_ADDR
// vc_engine := engine_siberite ;
24994: LD_ADDR_OWVAR 39
24998: PUSH
24999: LD_INT 3
25001: ST_TO_ADDR
// vc_control := control_apeman ;
25002: LD_ADDR_OWVAR 38
25006: PUSH
25007: LD_INT 5
25009: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25010: LD_ADDR_OWVAR 40
25014: PUSH
25015: LD_INT 29
25017: ST_TO_ADDR
// un := CreateVehicle ;
25018: LD_ADDR_VAR 0 2
25022: PUSH
25023: CALL_OW 45
25027: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25028: LD_VAR 0 2
25032: PPUSH
25033: LD_INT 1
25035: PPUSH
25036: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25040: LD_INT 35
25042: PPUSH
25043: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25047: LD_VAR 0 2
25051: PPUSH
25052: LD_INT 22
25054: PUSH
25055: LD_OWVAR 2
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PPUSH
25064: CALL_OW 69
25068: PPUSH
25069: LD_VAR 0 2
25073: PPUSH
25074: CALL_OW 74
25078: PPUSH
25079: CALL_OW 115
// until IsDead ( un ) ;
25083: LD_VAR 0 2
25087: PPUSH
25088: CALL_OW 301
25092: IFFALSE 25040
// end ;
25094: PPOPN 2
25096: END
// every 0 0$1 trigger StreamModeActive and sStu do
25097: LD_EXP 52
25101: PUSH
25102: LD_EXP 91
25106: AND
25107: IFFALSE 25123
25109: GO 25111
25111: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25112: LD_STRING displayStucuk();
25114: PPUSH
25115: CALL_OW 559
// ResetFog ;
25119: CALL_OW 335
// end ;
25123: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25124: LD_EXP 52
25128: PUSH
25129: LD_EXP 84
25133: AND
25134: IFFALSE 25275
25136: GO 25138
25138: DISABLE
25139: LD_INT 0
25141: PPUSH
25142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25143: LD_ADDR_VAR 0 2
25147: PUSH
25148: LD_INT 22
25150: PUSH
25151: LD_OWVAR 2
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 21
25162: PUSH
25163: LD_INT 1
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PPUSH
25174: CALL_OW 69
25178: ST_TO_ADDR
// if not tmp then
25179: LD_VAR 0 2
25183: NOT
25184: IFFALSE 25188
// exit ;
25186: GO 25275
// un := tmp [ rand ( 1 , tmp ) ] ;
25188: LD_ADDR_VAR 0 1
25192: PUSH
25193: LD_VAR 0 2
25197: PUSH
25198: LD_INT 1
25200: PPUSH
25201: LD_VAR 0 2
25205: PPUSH
25206: CALL_OW 12
25210: ARRAY
25211: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25212: LD_VAR 0 1
25216: PPUSH
25217: LD_INT 0
25219: PPUSH
25220: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25224: LD_VAR 0 1
25228: PPUSH
25229: LD_OWVAR 3
25233: PUSH
25234: LD_VAR 0 1
25238: DIFF
25239: PPUSH
25240: LD_VAR 0 1
25244: PPUSH
25245: CALL_OW 74
25249: PPUSH
25250: CALL_OW 115
// wait ( 0 0$20 ) ;
25254: LD_INT 700
25256: PPUSH
25257: CALL_OW 67
// SetSide ( un , your_side ) ;
25261: LD_VAR 0 1
25265: PPUSH
25266: LD_OWVAR 2
25270: PPUSH
25271: CALL_OW 235
// end ;
25275: PPOPN 2
25277: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25278: LD_EXP 52
25282: PUSH
25283: LD_EXP 85
25287: AND
25288: IFFALSE 25394
25290: GO 25292
25292: DISABLE
25293: LD_INT 0
25295: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25296: LD_ADDR_VAR 0 1
25300: PUSH
25301: LD_INT 22
25303: PUSH
25304: LD_OWVAR 2
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 2
25315: PUSH
25316: LD_INT 30
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 30
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: LIST
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PPUSH
25345: CALL_OW 69
25349: ST_TO_ADDR
// if not depot then
25350: LD_VAR 0 1
25354: NOT
25355: IFFALSE 25359
// exit ;
25357: GO 25394
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25359: LD_VAR 0 1
25363: PUSH
25364: LD_INT 1
25366: ARRAY
25367: PPUSH
25368: CALL_OW 250
25372: PPUSH
25373: LD_VAR 0 1
25377: PUSH
25378: LD_INT 1
25380: ARRAY
25381: PPUSH
25382: CALL_OW 251
25386: PPUSH
25387: LD_INT 70
25389: PPUSH
25390: CALL_OW 495
// end ;
25394: PPOPN 1
25396: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25397: LD_EXP 52
25401: PUSH
25402: LD_EXP 86
25406: AND
25407: IFFALSE 25618
25409: GO 25411
25411: DISABLE
25412: LD_INT 0
25414: PPUSH
25415: PPUSH
25416: PPUSH
25417: PPUSH
25418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25419: LD_ADDR_VAR 0 5
25423: PUSH
25424: LD_INT 22
25426: PUSH
25427: LD_OWVAR 2
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 21
25438: PUSH
25439: LD_INT 1
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PPUSH
25450: CALL_OW 69
25454: ST_TO_ADDR
// if not tmp then
25455: LD_VAR 0 5
25459: NOT
25460: IFFALSE 25464
// exit ;
25462: GO 25618
// for i in tmp do
25464: LD_ADDR_VAR 0 1
25468: PUSH
25469: LD_VAR 0 5
25473: PUSH
25474: FOR_IN
25475: IFFALSE 25616
// begin d := rand ( 0 , 5 ) ;
25477: LD_ADDR_VAR 0 4
25481: PUSH
25482: LD_INT 0
25484: PPUSH
25485: LD_INT 5
25487: PPUSH
25488: CALL_OW 12
25492: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25493: LD_ADDR_VAR 0 2
25497: PUSH
25498: LD_VAR 0 1
25502: PPUSH
25503: CALL_OW 250
25507: PPUSH
25508: LD_VAR 0 4
25512: PPUSH
25513: LD_INT 3
25515: PPUSH
25516: LD_INT 12
25518: PPUSH
25519: CALL_OW 12
25523: PPUSH
25524: CALL_OW 272
25528: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25529: LD_ADDR_VAR 0 3
25533: PUSH
25534: LD_VAR 0 1
25538: PPUSH
25539: CALL_OW 251
25543: PPUSH
25544: LD_VAR 0 4
25548: PPUSH
25549: LD_INT 3
25551: PPUSH
25552: LD_INT 12
25554: PPUSH
25555: CALL_OW 12
25559: PPUSH
25560: CALL_OW 273
25564: ST_TO_ADDR
// if ValidHex ( x , y ) then
25565: LD_VAR 0 2
25569: PPUSH
25570: LD_VAR 0 3
25574: PPUSH
25575: CALL_OW 488
25579: IFFALSE 25614
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25581: LD_VAR 0 1
25585: PPUSH
25586: LD_VAR 0 2
25590: PPUSH
25591: LD_VAR 0 3
25595: PPUSH
25596: LD_INT 3
25598: PPUSH
25599: LD_INT 6
25601: PPUSH
25602: CALL_OW 12
25606: PPUSH
25607: LD_INT 1
25609: PPUSH
25610: CALL_OW 483
// end ;
25614: GO 25474
25616: POP
25617: POP
// end ;
25618: PPOPN 5
25620: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25621: LD_EXP 52
25625: PUSH
25626: LD_EXP 87
25630: AND
25631: IFFALSE 25725
25633: GO 25635
25635: DISABLE
25636: LD_INT 0
25638: PPUSH
25639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25640: LD_ADDR_VAR 0 2
25644: PUSH
25645: LD_INT 22
25647: PUSH
25648: LD_OWVAR 2
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 32
25659: PUSH
25660: LD_INT 1
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 21
25669: PUSH
25670: LD_INT 2
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: LIST
25681: PPUSH
25682: CALL_OW 69
25686: ST_TO_ADDR
// if not tmp then
25687: LD_VAR 0 2
25691: NOT
25692: IFFALSE 25696
// exit ;
25694: GO 25725
// for i in tmp do
25696: LD_ADDR_VAR 0 1
25700: PUSH
25701: LD_VAR 0 2
25705: PUSH
25706: FOR_IN
25707: IFFALSE 25723
// SetFuel ( i , 0 ) ;
25709: LD_VAR 0 1
25713: PPUSH
25714: LD_INT 0
25716: PPUSH
25717: CALL_OW 240
25721: GO 25706
25723: POP
25724: POP
// end ;
25725: PPOPN 2
25727: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25728: LD_EXP 52
25732: PUSH
25733: LD_EXP 88
25737: AND
25738: IFFALSE 25804
25740: GO 25742
25742: DISABLE
25743: LD_INT 0
25745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25746: LD_ADDR_VAR 0 1
25750: PUSH
25751: LD_INT 22
25753: PUSH
25754: LD_OWVAR 2
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 30
25765: PUSH
25766: LD_INT 29
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PPUSH
25777: CALL_OW 69
25781: ST_TO_ADDR
// if not tmp then
25782: LD_VAR 0 1
25786: NOT
25787: IFFALSE 25791
// exit ;
25789: GO 25804
// DestroyUnit ( tmp [ 1 ] ) ;
25791: LD_VAR 0 1
25795: PUSH
25796: LD_INT 1
25798: ARRAY
25799: PPUSH
25800: CALL_OW 65
// end ;
25804: PPOPN 1
25806: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25807: LD_EXP 52
25811: PUSH
25812: LD_EXP 90
25816: AND
25817: IFFALSE 25946
25819: GO 25821
25821: DISABLE
25822: LD_INT 0
25824: PPUSH
// begin uc_side := 0 ;
25825: LD_ADDR_OWVAR 20
25829: PUSH
25830: LD_INT 0
25832: ST_TO_ADDR
// uc_nation := nation_arabian ;
25833: LD_ADDR_OWVAR 21
25837: PUSH
25838: LD_INT 2
25840: ST_TO_ADDR
// hc_gallery :=  ;
25841: LD_ADDR_OWVAR 33
25845: PUSH
25846: LD_STRING 
25848: ST_TO_ADDR
// hc_name :=  ;
25849: LD_ADDR_OWVAR 26
25853: PUSH
25854: LD_STRING 
25856: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25857: LD_INT 1
25859: PPUSH
25860: LD_INT 11
25862: PPUSH
25863: LD_INT 10
25865: PPUSH
25866: CALL_OW 380
// un := CreateHuman ;
25870: LD_ADDR_VAR 0 1
25874: PUSH
25875: CALL_OW 44
25879: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25880: LD_VAR 0 1
25884: PPUSH
25885: LD_INT 1
25887: PPUSH
25888: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25892: LD_INT 35
25894: PPUSH
25895: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25899: LD_VAR 0 1
25903: PPUSH
25904: LD_INT 22
25906: PUSH
25907: LD_OWVAR 2
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PPUSH
25916: CALL_OW 69
25920: PPUSH
25921: LD_VAR 0 1
25925: PPUSH
25926: CALL_OW 74
25930: PPUSH
25931: CALL_OW 115
// until IsDead ( un ) ;
25935: LD_VAR 0 1
25939: PPUSH
25940: CALL_OW 301
25944: IFFALSE 25892
// end ;
25946: PPOPN 1
25948: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25949: LD_EXP 52
25953: PUSH
25954: LD_EXP 92
25958: AND
25959: IFFALSE 25971
25961: GO 25963
25963: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25964: LD_STRING earthquake(getX(game), 0, 32)
25966: PPUSH
25967: CALL_OW 559
25971: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25972: LD_EXP 52
25976: PUSH
25977: LD_EXP 93
25981: AND
25982: IFFALSE 26073
25984: GO 25986
25986: DISABLE
25987: LD_INT 0
25989: PPUSH
// begin enable ;
25990: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25991: LD_ADDR_VAR 0 1
25995: PUSH
25996: LD_INT 22
25998: PUSH
25999: LD_OWVAR 2
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 21
26010: PUSH
26011: LD_INT 2
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 33
26020: PUSH
26021: LD_INT 3
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: LIST
26032: PPUSH
26033: CALL_OW 69
26037: ST_TO_ADDR
// if not tmp then
26038: LD_VAR 0 1
26042: NOT
26043: IFFALSE 26047
// exit ;
26045: GO 26073
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26047: LD_VAR 0 1
26051: PUSH
26052: LD_INT 1
26054: PPUSH
26055: LD_VAR 0 1
26059: PPUSH
26060: CALL_OW 12
26064: ARRAY
26065: PPUSH
26066: LD_INT 1
26068: PPUSH
26069: CALL_OW 234
// end ;
26073: PPOPN 1
26075: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26076: LD_EXP 52
26080: PUSH
26081: LD_EXP 94
26085: AND
26086: IFFALSE 26227
26088: GO 26090
26090: DISABLE
26091: LD_INT 0
26093: PPUSH
26094: PPUSH
26095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26096: LD_ADDR_VAR 0 3
26100: PUSH
26101: LD_INT 22
26103: PUSH
26104: LD_OWVAR 2
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 25
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PPUSH
26127: CALL_OW 69
26131: ST_TO_ADDR
// if not tmp then
26132: LD_VAR 0 3
26136: NOT
26137: IFFALSE 26141
// exit ;
26139: GO 26227
// un := tmp [ rand ( 1 , tmp ) ] ;
26141: LD_ADDR_VAR 0 2
26145: PUSH
26146: LD_VAR 0 3
26150: PUSH
26151: LD_INT 1
26153: PPUSH
26154: LD_VAR 0 3
26158: PPUSH
26159: CALL_OW 12
26163: ARRAY
26164: ST_TO_ADDR
// if Crawls ( un ) then
26165: LD_VAR 0 2
26169: PPUSH
26170: CALL_OW 318
26174: IFFALSE 26185
// ComWalk ( un ) ;
26176: LD_VAR 0 2
26180: PPUSH
26181: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26185: LD_VAR 0 2
26189: PPUSH
26190: LD_INT 9
26192: PPUSH
26193: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26197: LD_INT 28
26199: PPUSH
26200: LD_OWVAR 2
26204: PPUSH
26205: LD_INT 2
26207: PPUSH
26208: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26212: LD_INT 29
26214: PPUSH
26215: LD_OWVAR 2
26219: PPUSH
26220: LD_INT 2
26222: PPUSH
26223: CALL_OW 322
// end ;
26227: PPOPN 3
26229: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26230: LD_EXP 52
26234: PUSH
26235: LD_EXP 95
26239: AND
26240: IFFALSE 26351
26242: GO 26244
26244: DISABLE
26245: LD_INT 0
26247: PPUSH
26248: PPUSH
26249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26250: LD_ADDR_VAR 0 3
26254: PUSH
26255: LD_INT 22
26257: PUSH
26258: LD_OWVAR 2
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 25
26269: PUSH
26270: LD_INT 1
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PPUSH
26281: CALL_OW 69
26285: ST_TO_ADDR
// if not tmp then
26286: LD_VAR 0 3
26290: NOT
26291: IFFALSE 26295
// exit ;
26293: GO 26351
// un := tmp [ rand ( 1 , tmp ) ] ;
26295: LD_ADDR_VAR 0 2
26299: PUSH
26300: LD_VAR 0 3
26304: PUSH
26305: LD_INT 1
26307: PPUSH
26308: LD_VAR 0 3
26312: PPUSH
26313: CALL_OW 12
26317: ARRAY
26318: ST_TO_ADDR
// if Crawls ( un ) then
26319: LD_VAR 0 2
26323: PPUSH
26324: CALL_OW 318
26328: IFFALSE 26339
// ComWalk ( un ) ;
26330: LD_VAR 0 2
26334: PPUSH
26335: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26339: LD_VAR 0 2
26343: PPUSH
26344: LD_INT 8
26346: PPUSH
26347: CALL_OW 336
// end ;
26351: PPOPN 3
26353: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26354: LD_EXP 52
26358: PUSH
26359: LD_EXP 96
26363: AND
26364: IFFALSE 26508
26366: GO 26368
26368: DISABLE
26369: LD_INT 0
26371: PPUSH
26372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26373: LD_ADDR_VAR 0 2
26377: PUSH
26378: LD_INT 22
26380: PUSH
26381: LD_OWVAR 2
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 21
26392: PUSH
26393: LD_INT 2
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 2
26402: PUSH
26403: LD_INT 34
26405: PUSH
26406: LD_INT 12
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 34
26415: PUSH
26416: LD_INT 51
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 34
26425: PUSH
26426: LD_INT 32
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: LIST
26443: PPUSH
26444: CALL_OW 69
26448: ST_TO_ADDR
// if not tmp then
26449: LD_VAR 0 2
26453: NOT
26454: IFFALSE 26458
// exit ;
26456: GO 26508
// for i in tmp do
26458: LD_ADDR_VAR 0 1
26462: PUSH
26463: LD_VAR 0 2
26467: PUSH
26468: FOR_IN
26469: IFFALSE 26506
// if GetCargo ( i , mat_artifact ) = 0 then
26471: LD_VAR 0 1
26475: PPUSH
26476: LD_INT 4
26478: PPUSH
26479: CALL_OW 289
26483: PUSH
26484: LD_INT 0
26486: EQUAL
26487: IFFALSE 26504
// SetCargo ( i , mat_siberit , 100 ) ;
26489: LD_VAR 0 1
26493: PPUSH
26494: LD_INT 3
26496: PPUSH
26497: LD_INT 100
26499: PPUSH
26500: CALL_OW 290
26504: GO 26468
26506: POP
26507: POP
// end ;
26508: PPOPN 2
26510: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26511: LD_EXP 52
26515: PUSH
26516: LD_EXP 97
26520: AND
26521: IFFALSE 26704
26523: GO 26525
26525: DISABLE
26526: LD_INT 0
26528: PPUSH
26529: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26530: LD_ADDR_VAR 0 2
26534: PUSH
26535: LD_INT 22
26537: PUSH
26538: LD_OWVAR 2
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PPUSH
26547: CALL_OW 69
26551: ST_TO_ADDR
// if not tmp then
26552: LD_VAR 0 2
26556: NOT
26557: IFFALSE 26561
// exit ;
26559: GO 26704
// for i := 1 to 2 do
26561: LD_ADDR_VAR 0 1
26565: PUSH
26566: DOUBLE
26567: LD_INT 1
26569: DEC
26570: ST_TO_ADDR
26571: LD_INT 2
26573: PUSH
26574: FOR_TO
26575: IFFALSE 26702
// begin uc_side := your_side ;
26577: LD_ADDR_OWVAR 20
26581: PUSH
26582: LD_OWVAR 2
26586: ST_TO_ADDR
// uc_nation := nation_american ;
26587: LD_ADDR_OWVAR 21
26591: PUSH
26592: LD_INT 1
26594: ST_TO_ADDR
// vc_chassis := us_morphling ;
26595: LD_ADDR_OWVAR 37
26599: PUSH
26600: LD_INT 5
26602: ST_TO_ADDR
// vc_engine := engine_siberite ;
26603: LD_ADDR_OWVAR 39
26607: PUSH
26608: LD_INT 3
26610: ST_TO_ADDR
// vc_control := control_computer ;
26611: LD_ADDR_OWVAR 38
26615: PUSH
26616: LD_INT 3
26618: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26619: LD_ADDR_OWVAR 40
26623: PUSH
26624: LD_INT 10
26626: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26627: LD_VAR 0 2
26631: PUSH
26632: LD_INT 1
26634: ARRAY
26635: PPUSH
26636: CALL_OW 310
26640: NOT
26641: IFFALSE 26688
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26643: CALL_OW 45
26647: PPUSH
26648: LD_VAR 0 2
26652: PUSH
26653: LD_INT 1
26655: ARRAY
26656: PPUSH
26657: CALL_OW 250
26661: PPUSH
26662: LD_VAR 0 2
26666: PUSH
26667: LD_INT 1
26669: ARRAY
26670: PPUSH
26671: CALL_OW 251
26675: PPUSH
26676: LD_INT 12
26678: PPUSH
26679: LD_INT 1
26681: PPUSH
26682: CALL_OW 50
26686: GO 26700
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26688: CALL_OW 45
26692: PPUSH
26693: LD_INT 1
26695: PPUSH
26696: CALL_OW 51
// end ;
26700: GO 26574
26702: POP
26703: POP
// end ;
26704: PPOPN 2
26706: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26707: LD_EXP 52
26711: PUSH
26712: LD_EXP 98
26716: AND
26717: IFFALSE 26939
26719: GO 26721
26721: DISABLE
26722: LD_INT 0
26724: PPUSH
26725: PPUSH
26726: PPUSH
26727: PPUSH
26728: PPUSH
26729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26730: LD_ADDR_VAR 0 6
26734: PUSH
26735: LD_INT 22
26737: PUSH
26738: LD_OWVAR 2
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 21
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 3
26759: PUSH
26760: LD_INT 23
26762: PUSH
26763: LD_INT 0
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: PPUSH
26779: CALL_OW 69
26783: ST_TO_ADDR
// if not tmp then
26784: LD_VAR 0 6
26788: NOT
26789: IFFALSE 26793
// exit ;
26791: GO 26939
// s1 := rand ( 1 , 4 ) ;
26793: LD_ADDR_VAR 0 2
26797: PUSH
26798: LD_INT 1
26800: PPUSH
26801: LD_INT 4
26803: PPUSH
26804: CALL_OW 12
26808: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26809: LD_ADDR_VAR 0 4
26813: PUSH
26814: LD_VAR 0 6
26818: PUSH
26819: LD_INT 1
26821: ARRAY
26822: PPUSH
26823: LD_VAR 0 2
26827: PPUSH
26828: CALL_OW 259
26832: ST_TO_ADDR
// if s1 = 1 then
26833: LD_VAR 0 2
26837: PUSH
26838: LD_INT 1
26840: EQUAL
26841: IFFALSE 26861
// s2 := rand ( 2 , 4 ) else
26843: LD_ADDR_VAR 0 3
26847: PUSH
26848: LD_INT 2
26850: PPUSH
26851: LD_INT 4
26853: PPUSH
26854: CALL_OW 12
26858: ST_TO_ADDR
26859: GO 26869
// s2 := 1 ;
26861: LD_ADDR_VAR 0 3
26865: PUSH
26866: LD_INT 1
26868: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26869: LD_ADDR_VAR 0 5
26873: PUSH
26874: LD_VAR 0 6
26878: PUSH
26879: LD_INT 1
26881: ARRAY
26882: PPUSH
26883: LD_VAR 0 3
26887: PPUSH
26888: CALL_OW 259
26892: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26893: LD_VAR 0 6
26897: PUSH
26898: LD_INT 1
26900: ARRAY
26901: PPUSH
26902: LD_VAR 0 2
26906: PPUSH
26907: LD_VAR 0 5
26911: PPUSH
26912: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26916: LD_VAR 0 6
26920: PUSH
26921: LD_INT 1
26923: ARRAY
26924: PPUSH
26925: LD_VAR 0 3
26929: PPUSH
26930: LD_VAR 0 4
26934: PPUSH
26935: CALL_OW 237
// end ;
26939: PPOPN 6
26941: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26942: LD_EXP 52
26946: PUSH
26947: LD_EXP 99
26951: AND
26952: IFFALSE 27031
26954: GO 26956
26956: DISABLE
26957: LD_INT 0
26959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26960: LD_ADDR_VAR 0 1
26964: PUSH
26965: LD_INT 22
26967: PUSH
26968: LD_OWVAR 2
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 30
26979: PUSH
26980: LD_INT 3
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PPUSH
26991: CALL_OW 69
26995: ST_TO_ADDR
// if not tmp then
26996: LD_VAR 0 1
27000: NOT
27001: IFFALSE 27005
// exit ;
27003: GO 27031
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27005: LD_VAR 0 1
27009: PUSH
27010: LD_INT 1
27012: PPUSH
27013: LD_VAR 0 1
27017: PPUSH
27018: CALL_OW 12
27022: ARRAY
27023: PPUSH
27024: LD_INT 1
27026: PPUSH
27027: CALL_OW 234
// end ;
27031: PPOPN 1
27033: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27034: LD_EXP 52
27038: PUSH
27039: LD_EXP 100
27043: AND
27044: IFFALSE 27156
27046: GO 27048
27048: DISABLE
27049: LD_INT 0
27051: PPUSH
27052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27053: LD_ADDR_VAR 0 2
27057: PUSH
27058: LD_INT 22
27060: PUSH
27061: LD_OWVAR 2
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 2
27072: PUSH
27073: LD_INT 30
27075: PUSH
27076: LD_INT 27
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 30
27085: PUSH
27086: LD_INT 26
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 30
27095: PUSH
27096: LD_INT 28
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PPUSH
27113: CALL_OW 69
27117: ST_TO_ADDR
// if not tmp then
27118: LD_VAR 0 2
27122: NOT
27123: IFFALSE 27127
// exit ;
27125: GO 27156
// for i in tmp do
27127: LD_ADDR_VAR 0 1
27131: PUSH
27132: LD_VAR 0 2
27136: PUSH
27137: FOR_IN
27138: IFFALSE 27154
// SetLives ( i , 1 ) ;
27140: LD_VAR 0 1
27144: PPUSH
27145: LD_INT 1
27147: PPUSH
27148: CALL_OW 234
27152: GO 27137
27154: POP
27155: POP
// end ;
27156: PPOPN 2
27158: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27159: LD_EXP 52
27163: PUSH
27164: LD_EXP 101
27168: AND
27169: IFFALSE 27456
27171: GO 27173
27173: DISABLE
27174: LD_INT 0
27176: PPUSH
27177: PPUSH
27178: PPUSH
// begin i := rand ( 1 , 7 ) ;
27179: LD_ADDR_VAR 0 1
27183: PUSH
27184: LD_INT 1
27186: PPUSH
27187: LD_INT 7
27189: PPUSH
27190: CALL_OW 12
27194: ST_TO_ADDR
// case i of 1 :
27195: LD_VAR 0 1
27199: PUSH
27200: LD_INT 1
27202: DOUBLE
27203: EQUAL
27204: IFTRUE 27208
27206: GO 27218
27208: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27209: LD_STRING earthquake(getX(game), 0, 32)
27211: PPUSH
27212: CALL_OW 559
27216: GO 27456
27218: LD_INT 2
27220: DOUBLE
27221: EQUAL
27222: IFTRUE 27226
27224: GO 27240
27226: POP
// begin ToLua ( displayStucuk(); ) ;
27227: LD_STRING displayStucuk();
27229: PPUSH
27230: CALL_OW 559
// ResetFog ;
27234: CALL_OW 335
// end ; 3 :
27238: GO 27456
27240: LD_INT 3
27242: DOUBLE
27243: EQUAL
27244: IFTRUE 27248
27246: GO 27352
27248: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27249: LD_ADDR_VAR 0 2
27253: PUSH
27254: LD_INT 22
27256: PUSH
27257: LD_OWVAR 2
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 25
27268: PUSH
27269: LD_INT 1
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PPUSH
27280: CALL_OW 69
27284: ST_TO_ADDR
// if not tmp then
27285: LD_VAR 0 2
27289: NOT
27290: IFFALSE 27294
// exit ;
27292: GO 27456
// un := tmp [ rand ( 1 , tmp ) ] ;
27294: LD_ADDR_VAR 0 3
27298: PUSH
27299: LD_VAR 0 2
27303: PUSH
27304: LD_INT 1
27306: PPUSH
27307: LD_VAR 0 2
27311: PPUSH
27312: CALL_OW 12
27316: ARRAY
27317: ST_TO_ADDR
// if Crawls ( un ) then
27318: LD_VAR 0 3
27322: PPUSH
27323: CALL_OW 318
27327: IFFALSE 27338
// ComWalk ( un ) ;
27329: LD_VAR 0 3
27333: PPUSH
27334: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27338: LD_VAR 0 3
27342: PPUSH
27343: LD_INT 8
27345: PPUSH
27346: CALL_OW 336
// end ; 4 :
27350: GO 27456
27352: LD_INT 4
27354: DOUBLE
27355: EQUAL
27356: IFTRUE 27360
27358: GO 27434
27360: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27361: LD_ADDR_VAR 0 2
27365: PUSH
27366: LD_INT 22
27368: PUSH
27369: LD_OWVAR 2
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 30
27380: PUSH
27381: LD_INT 29
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PPUSH
27392: CALL_OW 69
27396: ST_TO_ADDR
// if not tmp then
27397: LD_VAR 0 2
27401: NOT
27402: IFFALSE 27406
// exit ;
27404: GO 27456
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27406: LD_VAR 0 2
27410: PUSH
27411: LD_INT 1
27413: ARRAY
27414: PPUSH
27415: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27419: LD_VAR 0 2
27423: PUSH
27424: LD_INT 1
27426: ARRAY
27427: PPUSH
27428: CALL_OW 65
// end ; 5 .. 7 :
27432: GO 27456
27434: LD_INT 5
27436: DOUBLE
27437: GREATEREQUAL
27438: IFFALSE 27446
27440: LD_INT 7
27442: DOUBLE
27443: LESSEQUAL
27444: IFTRUE 27448
27446: GO 27455
27448: POP
// StreamSibBomb ; end ;
27449: CALL 23693 0 0
27453: GO 27456
27455: POP
// end ;
27456: PPOPN 3
27458: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27459: LD_EXP 52
27463: PUSH
27464: LD_EXP 102
27468: AND
27469: IFFALSE 27625
27471: GO 27473
27473: DISABLE
27474: LD_INT 0
27476: PPUSH
27477: PPUSH
27478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27479: LD_ADDR_VAR 0 2
27483: PUSH
27484: LD_INT 81
27486: PUSH
27487: LD_OWVAR 2
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 2
27498: PUSH
27499: LD_INT 21
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 21
27511: PUSH
27512: LD_INT 2
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: LIST
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PPUSH
27528: CALL_OW 69
27532: ST_TO_ADDR
// if not tmp then
27533: LD_VAR 0 2
27537: NOT
27538: IFFALSE 27542
// exit ;
27540: GO 27625
// p := 0 ;
27542: LD_ADDR_VAR 0 3
27546: PUSH
27547: LD_INT 0
27549: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27550: LD_INT 35
27552: PPUSH
27553: CALL_OW 67
// p := p + 1 ;
27557: LD_ADDR_VAR 0 3
27561: PUSH
27562: LD_VAR 0 3
27566: PUSH
27567: LD_INT 1
27569: PLUS
27570: ST_TO_ADDR
// for i in tmp do
27571: LD_ADDR_VAR 0 1
27575: PUSH
27576: LD_VAR 0 2
27580: PUSH
27581: FOR_IN
27582: IFFALSE 27613
// if GetLives ( i ) < 1000 then
27584: LD_VAR 0 1
27588: PPUSH
27589: CALL_OW 256
27593: PUSH
27594: LD_INT 1000
27596: LESS
27597: IFFALSE 27611
// SetLives ( i , 1000 ) ;
27599: LD_VAR 0 1
27603: PPUSH
27604: LD_INT 1000
27606: PPUSH
27607: CALL_OW 234
27611: GO 27581
27613: POP
27614: POP
// until p > 20 ;
27615: LD_VAR 0 3
27619: PUSH
27620: LD_INT 20
27622: GREATER
27623: IFFALSE 27550
// end ;
27625: PPOPN 3
27627: END
// every 0 0$1 trigger StreamModeActive and sTime do
27628: LD_EXP 52
27632: PUSH
27633: LD_EXP 103
27637: AND
27638: IFFALSE 27673
27640: GO 27642
27642: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27643: LD_INT 28
27645: PPUSH
27646: LD_OWVAR 2
27650: PPUSH
27651: LD_INT 2
27653: PPUSH
27654: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27658: LD_INT 30
27660: PPUSH
27661: LD_OWVAR 2
27665: PPUSH
27666: LD_INT 2
27668: PPUSH
27669: CALL_OW 322
// end ;
27673: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27674: LD_EXP 52
27678: PUSH
27679: LD_EXP 104
27683: AND
27684: IFFALSE 27805
27686: GO 27688
27688: DISABLE
27689: LD_INT 0
27691: PPUSH
27692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27693: LD_ADDR_VAR 0 2
27697: PUSH
27698: LD_INT 22
27700: PUSH
27701: LD_OWVAR 2
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 21
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 3
27722: PUSH
27723: LD_INT 23
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: LIST
27741: PPUSH
27742: CALL_OW 69
27746: ST_TO_ADDR
// if not tmp then
27747: LD_VAR 0 2
27751: NOT
27752: IFFALSE 27756
// exit ;
27754: GO 27805
// for i in tmp do
27756: LD_ADDR_VAR 0 1
27760: PUSH
27761: LD_VAR 0 2
27765: PUSH
27766: FOR_IN
27767: IFFALSE 27803
// begin if Crawls ( i ) then
27769: LD_VAR 0 1
27773: PPUSH
27774: CALL_OW 318
27778: IFFALSE 27789
// ComWalk ( i ) ;
27780: LD_VAR 0 1
27784: PPUSH
27785: CALL_OW 138
// SetClass ( i , 2 ) ;
27789: LD_VAR 0 1
27793: PPUSH
27794: LD_INT 2
27796: PPUSH
27797: CALL_OW 336
// end ;
27801: GO 27766
27803: POP
27804: POP
// end ;
27805: PPOPN 2
27807: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27808: LD_EXP 52
27812: PUSH
27813: LD_EXP 105
27817: AND
27818: IFFALSE 28106
27820: GO 27822
27822: DISABLE
27823: LD_INT 0
27825: PPUSH
27826: PPUSH
27827: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27828: LD_OWVAR 2
27832: PPUSH
27833: LD_INT 9
27835: PPUSH
27836: LD_INT 1
27838: PPUSH
27839: LD_INT 1
27841: PPUSH
27842: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27846: LD_INT 9
27848: PPUSH
27849: LD_OWVAR 2
27853: PPUSH
27854: CALL_OW 343
// uc_side := 9 ;
27858: LD_ADDR_OWVAR 20
27862: PUSH
27863: LD_INT 9
27865: ST_TO_ADDR
// uc_nation := 2 ;
27866: LD_ADDR_OWVAR 21
27870: PUSH
27871: LD_INT 2
27873: ST_TO_ADDR
// hc_name := Dark Warrior ;
27874: LD_ADDR_OWVAR 26
27878: PUSH
27879: LD_STRING Dark Warrior
27881: ST_TO_ADDR
// hc_gallery :=  ;
27882: LD_ADDR_OWVAR 33
27886: PUSH
27887: LD_STRING 
27889: ST_TO_ADDR
// hc_noskilllimit := true ;
27890: LD_ADDR_OWVAR 76
27894: PUSH
27895: LD_INT 1
27897: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27898: LD_ADDR_OWVAR 31
27902: PUSH
27903: LD_INT 30
27905: PUSH
27906: LD_INT 30
27908: PUSH
27909: LD_INT 30
27911: PUSH
27912: LD_INT 30
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: ST_TO_ADDR
// un := CreateHuman ;
27921: LD_ADDR_VAR 0 3
27925: PUSH
27926: CALL_OW 44
27930: ST_TO_ADDR
// hc_noskilllimit := false ;
27931: LD_ADDR_OWVAR 76
27935: PUSH
27936: LD_INT 0
27938: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27939: LD_VAR 0 3
27943: PPUSH
27944: LD_INT 1
27946: PPUSH
27947: CALL_OW 51
// ToLua ( playRanger() ) ;
27951: LD_STRING playRanger()
27953: PPUSH
27954: CALL_OW 559
// p := 0 ;
27958: LD_ADDR_VAR 0 2
27962: PUSH
27963: LD_INT 0
27965: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27966: LD_INT 35
27968: PPUSH
27969: CALL_OW 67
// p := p + 1 ;
27973: LD_ADDR_VAR 0 2
27977: PUSH
27978: LD_VAR 0 2
27982: PUSH
27983: LD_INT 1
27985: PLUS
27986: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27987: LD_VAR 0 3
27991: PPUSH
27992: CALL_OW 256
27996: PUSH
27997: LD_INT 1000
27999: LESS
28000: IFFALSE 28014
// SetLives ( un , 1000 ) ;
28002: LD_VAR 0 3
28006: PPUSH
28007: LD_INT 1000
28009: PPUSH
28010: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28014: LD_VAR 0 3
28018: PPUSH
28019: LD_INT 81
28021: PUSH
28022: LD_OWVAR 2
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 91
28033: PUSH
28034: LD_VAR 0 3
28038: PUSH
28039: LD_INT 30
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PPUSH
28051: CALL_OW 69
28055: PPUSH
28056: LD_VAR 0 3
28060: PPUSH
28061: CALL_OW 74
28065: PPUSH
28066: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28070: LD_VAR 0 2
28074: PUSH
28075: LD_INT 80
28077: GREATER
28078: PUSH
28079: LD_VAR 0 3
28083: PPUSH
28084: CALL_OW 301
28088: OR
28089: IFFALSE 27966
// if un then
28091: LD_VAR 0 3
28095: IFFALSE 28106
// RemoveUnit ( un ) ;
28097: LD_VAR 0 3
28101: PPUSH
28102: CALL_OW 64
// end ;
28106: PPOPN 3
28108: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28109: LD_EXP 106
28113: IFFALSE 28229
28115: GO 28117
28117: DISABLE
28118: LD_INT 0
28120: PPUSH
28121: PPUSH
28122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28123: LD_ADDR_VAR 0 2
28127: PUSH
28128: LD_INT 81
28130: PUSH
28131: LD_OWVAR 2
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 21
28142: PUSH
28143: LD_INT 1
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PPUSH
28154: CALL_OW 69
28158: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28159: LD_STRING playComputer()
28161: PPUSH
28162: CALL_OW 559
// if not tmp then
28166: LD_VAR 0 2
28170: NOT
28171: IFFALSE 28175
// exit ;
28173: GO 28229
// for i in tmp do
28175: LD_ADDR_VAR 0 1
28179: PUSH
28180: LD_VAR 0 2
28184: PUSH
28185: FOR_IN
28186: IFFALSE 28227
// for j := 1 to 4 do
28188: LD_ADDR_VAR 0 3
28192: PUSH
28193: DOUBLE
28194: LD_INT 1
28196: DEC
28197: ST_TO_ADDR
28198: LD_INT 4
28200: PUSH
28201: FOR_TO
28202: IFFALSE 28223
// SetSkill ( i , j , 10 ) ;
28204: LD_VAR 0 1
28208: PPUSH
28209: LD_VAR 0 3
28213: PPUSH
28214: LD_INT 10
28216: PPUSH
28217: CALL_OW 237
28221: GO 28201
28223: POP
28224: POP
28225: GO 28185
28227: POP
28228: POP
// end ;
28229: PPOPN 3
28231: END
// every 0 0$1 trigger s30 do var i , tmp ;
28232: LD_EXP 107
28236: IFFALSE 28305
28238: GO 28240
28240: DISABLE
28241: LD_INT 0
28243: PPUSH
28244: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28245: LD_ADDR_VAR 0 2
28249: PUSH
28250: LD_INT 22
28252: PUSH
28253: LD_OWVAR 2
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PPUSH
28262: CALL_OW 69
28266: ST_TO_ADDR
// if not tmp then
28267: LD_VAR 0 2
28271: NOT
28272: IFFALSE 28276
// exit ;
28274: GO 28305
// for i in tmp do
28276: LD_ADDR_VAR 0 1
28280: PUSH
28281: LD_VAR 0 2
28285: PUSH
28286: FOR_IN
28287: IFFALSE 28303
// SetLives ( i , 300 ) ;
28289: LD_VAR 0 1
28293: PPUSH
28294: LD_INT 300
28296: PPUSH
28297: CALL_OW 234
28301: GO 28286
28303: POP
28304: POP
// end ;
28305: PPOPN 2
28307: END
// every 0 0$1 trigger s60 do var i , tmp ;
28308: LD_EXP 108
28312: IFFALSE 28381
28314: GO 28316
28316: DISABLE
28317: LD_INT 0
28319: PPUSH
28320: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28321: LD_ADDR_VAR 0 2
28325: PUSH
28326: LD_INT 22
28328: PUSH
28329: LD_OWVAR 2
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PPUSH
28338: CALL_OW 69
28342: ST_TO_ADDR
// if not tmp then
28343: LD_VAR 0 2
28347: NOT
28348: IFFALSE 28352
// exit ;
28350: GO 28381
// for i in tmp do
28352: LD_ADDR_VAR 0 1
28356: PUSH
28357: LD_VAR 0 2
28361: PUSH
28362: FOR_IN
28363: IFFALSE 28379
// SetLives ( i , 600 ) ;
28365: LD_VAR 0 1
28369: PPUSH
28370: LD_INT 600
28372: PPUSH
28373: CALL_OW 234
28377: GO 28362
28379: POP
28380: POP
// end ;
28381: PPOPN 2
28383: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28384: LD_INT 0
28386: PPUSH
// case cmd of 301 :
28387: LD_VAR 0 1
28391: PUSH
28392: LD_INT 301
28394: DOUBLE
28395: EQUAL
28396: IFTRUE 28400
28398: GO 28432
28400: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28401: LD_VAR 0 6
28405: PPUSH
28406: LD_VAR 0 7
28410: PPUSH
28411: LD_VAR 0 8
28415: PPUSH
28416: LD_VAR 0 4
28420: PPUSH
28421: LD_VAR 0 5
28425: PPUSH
28426: CALL 29641 0 5
28430: GO 28553
28432: LD_INT 302
28434: DOUBLE
28435: EQUAL
28436: IFTRUE 28440
28438: GO 28477
28440: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28441: LD_VAR 0 6
28445: PPUSH
28446: LD_VAR 0 7
28450: PPUSH
28451: LD_VAR 0 8
28455: PPUSH
28456: LD_VAR 0 9
28460: PPUSH
28461: LD_VAR 0 4
28465: PPUSH
28466: LD_VAR 0 5
28470: PPUSH
28471: CALL 29732 0 6
28475: GO 28553
28477: LD_INT 303
28479: DOUBLE
28480: EQUAL
28481: IFTRUE 28485
28483: GO 28522
28485: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28486: LD_VAR 0 6
28490: PPUSH
28491: LD_VAR 0 7
28495: PPUSH
28496: LD_VAR 0 8
28500: PPUSH
28501: LD_VAR 0 9
28505: PPUSH
28506: LD_VAR 0 4
28510: PPUSH
28511: LD_VAR 0 5
28515: PPUSH
28516: CALL 28558 0 6
28520: GO 28553
28522: LD_INT 304
28524: DOUBLE
28525: EQUAL
28526: IFTRUE 28530
28528: GO 28552
28530: POP
// hHackTeleport ( unit , x , y ) ; end ;
28531: LD_VAR 0 2
28535: PPUSH
28536: LD_VAR 0 4
28540: PPUSH
28541: LD_VAR 0 5
28545: PPUSH
28546: CALL 30325 0 3
28550: GO 28553
28552: POP
// end ;
28553: LD_VAR 0 12
28557: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28558: LD_INT 0
28560: PPUSH
28561: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28562: LD_VAR 0 1
28566: PUSH
28567: LD_INT 1
28569: LESS
28570: PUSH
28571: LD_VAR 0 1
28575: PUSH
28576: LD_INT 3
28578: GREATER
28579: OR
28580: PUSH
28581: LD_VAR 0 5
28585: PPUSH
28586: LD_VAR 0 6
28590: PPUSH
28591: CALL_OW 428
28595: OR
28596: IFFALSE 28600
// exit ;
28598: GO 29328
// uc_side := your_side ;
28600: LD_ADDR_OWVAR 20
28604: PUSH
28605: LD_OWVAR 2
28609: ST_TO_ADDR
// uc_nation := nation ;
28610: LD_ADDR_OWVAR 21
28614: PUSH
28615: LD_VAR 0 1
28619: ST_TO_ADDR
// bc_level = 1 ;
28620: LD_ADDR_OWVAR 43
28624: PUSH
28625: LD_INT 1
28627: ST_TO_ADDR
// case btype of 1 :
28628: LD_VAR 0 2
28632: PUSH
28633: LD_INT 1
28635: DOUBLE
28636: EQUAL
28637: IFTRUE 28641
28639: GO 28652
28641: POP
// bc_type := b_depot ; 2 :
28642: LD_ADDR_OWVAR 42
28646: PUSH
28647: LD_INT 0
28649: ST_TO_ADDR
28650: GO 29272
28652: LD_INT 2
28654: DOUBLE
28655: EQUAL
28656: IFTRUE 28660
28658: GO 28671
28660: POP
// bc_type := b_warehouse ; 3 :
28661: LD_ADDR_OWVAR 42
28665: PUSH
28666: LD_INT 1
28668: ST_TO_ADDR
28669: GO 29272
28671: LD_INT 3
28673: DOUBLE
28674: EQUAL
28675: IFTRUE 28679
28677: GO 28690
28679: POP
// bc_type := b_lab ; 4 .. 9 :
28680: LD_ADDR_OWVAR 42
28684: PUSH
28685: LD_INT 6
28687: ST_TO_ADDR
28688: GO 29272
28690: LD_INT 4
28692: DOUBLE
28693: GREATEREQUAL
28694: IFFALSE 28702
28696: LD_INT 9
28698: DOUBLE
28699: LESSEQUAL
28700: IFTRUE 28704
28702: GO 28764
28704: POP
// begin bc_type := b_lab_half ;
28705: LD_ADDR_OWVAR 42
28709: PUSH
28710: LD_INT 7
28712: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28713: LD_ADDR_OWVAR 44
28717: PUSH
28718: LD_INT 10
28720: PUSH
28721: LD_INT 11
28723: PUSH
28724: LD_INT 12
28726: PUSH
28727: LD_INT 15
28729: PUSH
28730: LD_INT 14
28732: PUSH
28733: LD_INT 13
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: PUSH
28744: LD_VAR 0 2
28748: PUSH
28749: LD_INT 3
28751: MINUS
28752: ARRAY
28753: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28754: LD_ADDR_OWVAR 45
28758: PUSH
28759: LD_INT 9
28761: ST_TO_ADDR
// end ; 10 .. 13 :
28762: GO 29272
28764: LD_INT 10
28766: DOUBLE
28767: GREATEREQUAL
28768: IFFALSE 28776
28770: LD_INT 13
28772: DOUBLE
28773: LESSEQUAL
28774: IFTRUE 28778
28776: GO 28855
28778: POP
// begin bc_type := b_lab_full ;
28779: LD_ADDR_OWVAR 42
28783: PUSH
28784: LD_INT 8
28786: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28787: LD_ADDR_OWVAR 44
28791: PUSH
28792: LD_INT 10
28794: PUSH
28795: LD_INT 12
28797: PUSH
28798: LD_INT 14
28800: PUSH
28801: LD_INT 13
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: PUSH
28810: LD_VAR 0 2
28814: PUSH
28815: LD_INT 9
28817: MINUS
28818: ARRAY
28819: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28820: LD_ADDR_OWVAR 45
28824: PUSH
28825: LD_INT 11
28827: PUSH
28828: LD_INT 15
28830: PUSH
28831: LD_INT 12
28833: PUSH
28834: LD_INT 15
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: PUSH
28843: LD_VAR 0 2
28847: PUSH
28848: LD_INT 9
28850: MINUS
28851: ARRAY
28852: ST_TO_ADDR
// end ; 14 :
28853: GO 29272
28855: LD_INT 14
28857: DOUBLE
28858: EQUAL
28859: IFTRUE 28863
28861: GO 28874
28863: POP
// bc_type := b_workshop ; 15 :
28864: LD_ADDR_OWVAR 42
28868: PUSH
28869: LD_INT 2
28871: ST_TO_ADDR
28872: GO 29272
28874: LD_INT 15
28876: DOUBLE
28877: EQUAL
28878: IFTRUE 28882
28880: GO 28893
28882: POP
// bc_type := b_factory ; 16 :
28883: LD_ADDR_OWVAR 42
28887: PUSH
28888: LD_INT 3
28890: ST_TO_ADDR
28891: GO 29272
28893: LD_INT 16
28895: DOUBLE
28896: EQUAL
28897: IFTRUE 28901
28899: GO 28912
28901: POP
// bc_type := b_ext_gun ; 17 :
28902: LD_ADDR_OWVAR 42
28906: PUSH
28907: LD_INT 17
28909: ST_TO_ADDR
28910: GO 29272
28912: LD_INT 17
28914: DOUBLE
28915: EQUAL
28916: IFTRUE 28920
28918: GO 28948
28920: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28921: LD_ADDR_OWVAR 42
28925: PUSH
28926: LD_INT 19
28928: PUSH
28929: LD_INT 23
28931: PUSH
28932: LD_INT 19
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: LIST
28939: PUSH
28940: LD_VAR 0 1
28944: ARRAY
28945: ST_TO_ADDR
28946: GO 29272
28948: LD_INT 18
28950: DOUBLE
28951: EQUAL
28952: IFTRUE 28956
28954: GO 28967
28956: POP
// bc_type := b_ext_radar ; 19 :
28957: LD_ADDR_OWVAR 42
28961: PUSH
28962: LD_INT 20
28964: ST_TO_ADDR
28965: GO 29272
28967: LD_INT 19
28969: DOUBLE
28970: EQUAL
28971: IFTRUE 28975
28973: GO 28986
28975: POP
// bc_type := b_ext_radio ; 20 :
28976: LD_ADDR_OWVAR 42
28980: PUSH
28981: LD_INT 22
28983: ST_TO_ADDR
28984: GO 29272
28986: LD_INT 20
28988: DOUBLE
28989: EQUAL
28990: IFTRUE 28994
28992: GO 29005
28994: POP
// bc_type := b_ext_siberium ; 21 :
28995: LD_ADDR_OWVAR 42
28999: PUSH
29000: LD_INT 21
29002: ST_TO_ADDR
29003: GO 29272
29005: LD_INT 21
29007: DOUBLE
29008: EQUAL
29009: IFTRUE 29013
29011: GO 29024
29013: POP
// bc_type := b_ext_computer ; 22 :
29014: LD_ADDR_OWVAR 42
29018: PUSH
29019: LD_INT 24
29021: ST_TO_ADDR
29022: GO 29272
29024: LD_INT 22
29026: DOUBLE
29027: EQUAL
29028: IFTRUE 29032
29030: GO 29043
29032: POP
// bc_type := b_ext_track ; 23 :
29033: LD_ADDR_OWVAR 42
29037: PUSH
29038: LD_INT 16
29040: ST_TO_ADDR
29041: GO 29272
29043: LD_INT 23
29045: DOUBLE
29046: EQUAL
29047: IFTRUE 29051
29049: GO 29062
29051: POP
// bc_type := b_ext_laser ; 24 :
29052: LD_ADDR_OWVAR 42
29056: PUSH
29057: LD_INT 25
29059: ST_TO_ADDR
29060: GO 29272
29062: LD_INT 24
29064: DOUBLE
29065: EQUAL
29066: IFTRUE 29070
29068: GO 29081
29070: POP
// bc_type := b_control_tower ; 25 :
29071: LD_ADDR_OWVAR 42
29075: PUSH
29076: LD_INT 36
29078: ST_TO_ADDR
29079: GO 29272
29081: LD_INT 25
29083: DOUBLE
29084: EQUAL
29085: IFTRUE 29089
29087: GO 29100
29089: POP
// bc_type := b_breastwork ; 26 :
29090: LD_ADDR_OWVAR 42
29094: PUSH
29095: LD_INT 31
29097: ST_TO_ADDR
29098: GO 29272
29100: LD_INT 26
29102: DOUBLE
29103: EQUAL
29104: IFTRUE 29108
29106: GO 29119
29108: POP
// bc_type := b_bunker ; 27 :
29109: LD_ADDR_OWVAR 42
29113: PUSH
29114: LD_INT 32
29116: ST_TO_ADDR
29117: GO 29272
29119: LD_INT 27
29121: DOUBLE
29122: EQUAL
29123: IFTRUE 29127
29125: GO 29138
29127: POP
// bc_type := b_turret ; 28 :
29128: LD_ADDR_OWVAR 42
29132: PUSH
29133: LD_INT 33
29135: ST_TO_ADDR
29136: GO 29272
29138: LD_INT 28
29140: DOUBLE
29141: EQUAL
29142: IFTRUE 29146
29144: GO 29157
29146: POP
// bc_type := b_armoury ; 29 :
29147: LD_ADDR_OWVAR 42
29151: PUSH
29152: LD_INT 4
29154: ST_TO_ADDR
29155: GO 29272
29157: LD_INT 29
29159: DOUBLE
29160: EQUAL
29161: IFTRUE 29165
29163: GO 29176
29165: POP
// bc_type := b_barracks ; 30 :
29166: LD_ADDR_OWVAR 42
29170: PUSH
29171: LD_INT 5
29173: ST_TO_ADDR
29174: GO 29272
29176: LD_INT 30
29178: DOUBLE
29179: EQUAL
29180: IFTRUE 29184
29182: GO 29195
29184: POP
// bc_type := b_solar_power ; 31 :
29185: LD_ADDR_OWVAR 42
29189: PUSH
29190: LD_INT 27
29192: ST_TO_ADDR
29193: GO 29272
29195: LD_INT 31
29197: DOUBLE
29198: EQUAL
29199: IFTRUE 29203
29201: GO 29214
29203: POP
// bc_type := b_oil_power ; 32 :
29204: LD_ADDR_OWVAR 42
29208: PUSH
29209: LD_INT 26
29211: ST_TO_ADDR
29212: GO 29272
29214: LD_INT 32
29216: DOUBLE
29217: EQUAL
29218: IFTRUE 29222
29220: GO 29233
29222: POP
// bc_type := b_siberite_power ; 33 :
29223: LD_ADDR_OWVAR 42
29227: PUSH
29228: LD_INT 28
29230: ST_TO_ADDR
29231: GO 29272
29233: LD_INT 33
29235: DOUBLE
29236: EQUAL
29237: IFTRUE 29241
29239: GO 29252
29241: POP
// bc_type := b_oil_mine ; 34 :
29242: LD_ADDR_OWVAR 42
29246: PUSH
29247: LD_INT 29
29249: ST_TO_ADDR
29250: GO 29272
29252: LD_INT 34
29254: DOUBLE
29255: EQUAL
29256: IFTRUE 29260
29258: GO 29271
29260: POP
// bc_type := b_siberite_mine ; end ;
29261: LD_ADDR_OWVAR 42
29265: PUSH
29266: LD_INT 30
29268: ST_TO_ADDR
29269: GO 29272
29271: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29272: LD_ADDR_VAR 0 8
29276: PUSH
29277: LD_VAR 0 5
29281: PPUSH
29282: LD_VAR 0 6
29286: PPUSH
29287: LD_VAR 0 3
29291: PPUSH
29292: CALL_OW 47
29296: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29297: LD_OWVAR 42
29301: PUSH
29302: LD_INT 32
29304: PUSH
29305: LD_INT 33
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: IN
29312: IFFALSE 29328
// PlaceWeaponTurret ( b , weapon ) ;
29314: LD_VAR 0 8
29318: PPUSH
29319: LD_VAR 0 4
29323: PPUSH
29324: CALL_OW 431
// end ;
29328: LD_VAR 0 7
29332: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29333: LD_INT 0
29335: PPUSH
29336: PPUSH
29337: PPUSH
29338: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29339: LD_ADDR_VAR 0 4
29343: PUSH
29344: LD_INT 22
29346: PUSH
29347: LD_OWVAR 2
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 2
29358: PUSH
29359: LD_INT 30
29361: PUSH
29362: LD_INT 0
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 30
29371: PUSH
29372: LD_INT 1
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PPUSH
29388: CALL_OW 69
29392: ST_TO_ADDR
// if not tmp then
29393: LD_VAR 0 4
29397: NOT
29398: IFFALSE 29402
// exit ;
29400: GO 29461
// for i in tmp do
29402: LD_ADDR_VAR 0 2
29406: PUSH
29407: LD_VAR 0 4
29411: PUSH
29412: FOR_IN
29413: IFFALSE 29459
// for j = 1 to 3 do
29415: LD_ADDR_VAR 0 3
29419: PUSH
29420: DOUBLE
29421: LD_INT 1
29423: DEC
29424: ST_TO_ADDR
29425: LD_INT 3
29427: PUSH
29428: FOR_TO
29429: IFFALSE 29455
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29431: LD_VAR 0 2
29435: PPUSH
29436: CALL_OW 274
29440: PPUSH
29441: LD_VAR 0 3
29445: PPUSH
29446: LD_INT 99999
29448: PPUSH
29449: CALL_OW 277
29453: GO 29428
29455: POP
29456: POP
29457: GO 29412
29459: POP
29460: POP
// end ;
29461: LD_VAR 0 1
29465: RET
// export function hHackSetLevel10 ; var i , j ; begin
29466: LD_INT 0
29468: PPUSH
29469: PPUSH
29470: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29471: LD_ADDR_VAR 0 2
29475: PUSH
29476: LD_INT 21
29478: PUSH
29479: LD_INT 1
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PPUSH
29486: CALL_OW 69
29490: PUSH
29491: FOR_IN
29492: IFFALSE 29544
// if IsSelected ( i ) then
29494: LD_VAR 0 2
29498: PPUSH
29499: CALL_OW 306
29503: IFFALSE 29542
// begin for j := 1 to 4 do
29505: LD_ADDR_VAR 0 3
29509: PUSH
29510: DOUBLE
29511: LD_INT 1
29513: DEC
29514: ST_TO_ADDR
29515: LD_INT 4
29517: PUSH
29518: FOR_TO
29519: IFFALSE 29540
// SetSkill ( i , j , 10 ) ;
29521: LD_VAR 0 2
29525: PPUSH
29526: LD_VAR 0 3
29530: PPUSH
29531: LD_INT 10
29533: PPUSH
29534: CALL_OW 237
29538: GO 29518
29540: POP
29541: POP
// end ;
29542: GO 29491
29544: POP
29545: POP
// end ;
29546: LD_VAR 0 1
29550: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29551: LD_INT 0
29553: PPUSH
29554: PPUSH
29555: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29556: LD_ADDR_VAR 0 2
29560: PUSH
29561: LD_INT 22
29563: PUSH
29564: LD_OWVAR 2
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 21
29575: PUSH
29576: LD_INT 1
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PPUSH
29587: CALL_OW 69
29591: PUSH
29592: FOR_IN
29593: IFFALSE 29634
// begin for j := 1 to 4 do
29595: LD_ADDR_VAR 0 3
29599: PUSH
29600: DOUBLE
29601: LD_INT 1
29603: DEC
29604: ST_TO_ADDR
29605: LD_INT 4
29607: PUSH
29608: FOR_TO
29609: IFFALSE 29630
// SetSkill ( i , j , 10 ) ;
29611: LD_VAR 0 2
29615: PPUSH
29616: LD_VAR 0 3
29620: PPUSH
29621: LD_INT 10
29623: PPUSH
29624: CALL_OW 237
29628: GO 29608
29630: POP
29631: POP
// end ;
29632: GO 29592
29634: POP
29635: POP
// end ;
29636: LD_VAR 0 1
29640: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29641: LD_INT 0
29643: PPUSH
// uc_side := your_side ;
29644: LD_ADDR_OWVAR 20
29648: PUSH
29649: LD_OWVAR 2
29653: ST_TO_ADDR
// uc_nation := nation ;
29654: LD_ADDR_OWVAR 21
29658: PUSH
29659: LD_VAR 0 1
29663: ST_TO_ADDR
// InitHc ;
29664: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29668: LD_INT 0
29670: PPUSH
29671: LD_VAR 0 2
29675: PPUSH
29676: LD_VAR 0 3
29680: PPUSH
29681: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29685: LD_VAR 0 4
29689: PPUSH
29690: LD_VAR 0 5
29694: PPUSH
29695: CALL_OW 428
29699: PUSH
29700: LD_INT 0
29702: EQUAL
29703: IFFALSE 29727
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29705: CALL_OW 44
29709: PPUSH
29710: LD_VAR 0 4
29714: PPUSH
29715: LD_VAR 0 5
29719: PPUSH
29720: LD_INT 1
29722: PPUSH
29723: CALL_OW 48
// end ;
29727: LD_VAR 0 6
29731: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29732: LD_INT 0
29734: PPUSH
29735: PPUSH
// uc_side := your_side ;
29736: LD_ADDR_OWVAR 20
29740: PUSH
29741: LD_OWVAR 2
29745: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29746: LD_VAR 0 1
29750: PUSH
29751: LD_INT 1
29753: PUSH
29754: LD_INT 2
29756: PUSH
29757: LD_INT 3
29759: PUSH
29760: LD_INT 4
29762: PUSH
29763: LD_INT 5
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: IN
29773: IFFALSE 29785
// uc_nation := nation_american else
29775: LD_ADDR_OWVAR 21
29779: PUSH
29780: LD_INT 1
29782: ST_TO_ADDR
29783: GO 29828
// if chassis in [ 11 , 12 , 13 , 14 ] then
29785: LD_VAR 0 1
29789: PUSH
29790: LD_INT 11
29792: PUSH
29793: LD_INT 12
29795: PUSH
29796: LD_INT 13
29798: PUSH
29799: LD_INT 14
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: IN
29808: IFFALSE 29820
// uc_nation := nation_arabian else
29810: LD_ADDR_OWVAR 21
29814: PUSH
29815: LD_INT 2
29817: ST_TO_ADDR
29818: GO 29828
// uc_nation := nation_russian ;
29820: LD_ADDR_OWVAR 21
29824: PUSH
29825: LD_INT 3
29827: ST_TO_ADDR
// vc_chassis := chassis ;
29828: LD_ADDR_OWVAR 37
29832: PUSH
29833: LD_VAR 0 1
29837: ST_TO_ADDR
// vc_engine := engine ;
29838: LD_ADDR_OWVAR 39
29842: PUSH
29843: LD_VAR 0 2
29847: ST_TO_ADDR
// vc_control := control ;
29848: LD_ADDR_OWVAR 38
29852: PUSH
29853: LD_VAR 0 3
29857: ST_TO_ADDR
// vc_weapon := weapon ;
29858: LD_ADDR_OWVAR 40
29862: PUSH
29863: LD_VAR 0 4
29867: ST_TO_ADDR
// un := CreateVehicle ;
29868: LD_ADDR_VAR 0 8
29872: PUSH
29873: CALL_OW 45
29877: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29878: LD_VAR 0 8
29882: PPUSH
29883: LD_INT 0
29885: PPUSH
29886: LD_INT 5
29888: PPUSH
29889: CALL_OW 12
29893: PPUSH
29894: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29898: LD_VAR 0 8
29902: PPUSH
29903: LD_VAR 0 5
29907: PPUSH
29908: LD_VAR 0 6
29912: PPUSH
29913: LD_INT 1
29915: PPUSH
29916: CALL_OW 48
// end ;
29920: LD_VAR 0 7
29924: RET
// export hInvincible ; every 1 do
29925: GO 29927
29927: DISABLE
// hInvincible := [ ] ;
29928: LD_ADDR_EXP 109
29932: PUSH
29933: EMPTY
29934: ST_TO_ADDR
29935: END
// every 10 do var i ;
29936: GO 29938
29938: DISABLE
29939: LD_INT 0
29941: PPUSH
// begin enable ;
29942: ENABLE
// if not hInvincible then
29943: LD_EXP 109
29947: NOT
29948: IFFALSE 29952
// exit ;
29950: GO 29996
// for i in hInvincible do
29952: LD_ADDR_VAR 0 1
29956: PUSH
29957: LD_EXP 109
29961: PUSH
29962: FOR_IN
29963: IFFALSE 29994
// if GetLives ( i ) < 1000 then
29965: LD_VAR 0 1
29969: PPUSH
29970: CALL_OW 256
29974: PUSH
29975: LD_INT 1000
29977: LESS
29978: IFFALSE 29992
// SetLives ( i , 1000 ) ;
29980: LD_VAR 0 1
29984: PPUSH
29985: LD_INT 1000
29987: PPUSH
29988: CALL_OW 234
29992: GO 29962
29994: POP
29995: POP
// end ;
29996: PPOPN 1
29998: END
// export function hHackInvincible ; var i ; begin
29999: LD_INT 0
30001: PPUSH
30002: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30003: LD_ADDR_VAR 0 2
30007: PUSH
30008: LD_INT 2
30010: PUSH
30011: LD_INT 21
30013: PUSH
30014: LD_INT 1
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 21
30023: PUSH
30024: LD_INT 2
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: LIST
30035: PPUSH
30036: CALL_OW 69
30040: PUSH
30041: FOR_IN
30042: IFFALSE 30103
// if IsSelected ( i ) then
30044: LD_VAR 0 2
30048: PPUSH
30049: CALL_OW 306
30053: IFFALSE 30101
// begin if i in hInvincible then
30055: LD_VAR 0 2
30059: PUSH
30060: LD_EXP 109
30064: IN
30065: IFFALSE 30085
// hInvincible := hInvincible diff i else
30067: LD_ADDR_EXP 109
30071: PUSH
30072: LD_EXP 109
30076: PUSH
30077: LD_VAR 0 2
30081: DIFF
30082: ST_TO_ADDR
30083: GO 30101
// hInvincible := hInvincible union i ;
30085: LD_ADDR_EXP 109
30089: PUSH
30090: LD_EXP 109
30094: PUSH
30095: LD_VAR 0 2
30099: UNION
30100: ST_TO_ADDR
// end ;
30101: GO 30041
30103: POP
30104: POP
// end ;
30105: LD_VAR 0 1
30109: RET
// export function hHackInvisible ; var i , j ; begin
30110: LD_INT 0
30112: PPUSH
30113: PPUSH
30114: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30115: LD_ADDR_VAR 0 2
30119: PUSH
30120: LD_INT 21
30122: PUSH
30123: LD_INT 1
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PPUSH
30130: CALL_OW 69
30134: PUSH
30135: FOR_IN
30136: IFFALSE 30160
// if IsSelected ( i ) then
30138: LD_VAR 0 2
30142: PPUSH
30143: CALL_OW 306
30147: IFFALSE 30158
// ComForceInvisible ( i ) ;
30149: LD_VAR 0 2
30153: PPUSH
30154: CALL_OW 496
30158: GO 30135
30160: POP
30161: POP
// end ;
30162: LD_VAR 0 1
30166: RET
// export function hHackChangeYourSide ; begin
30167: LD_INT 0
30169: PPUSH
// if your_side = 8 then
30170: LD_OWVAR 2
30174: PUSH
30175: LD_INT 8
30177: EQUAL
30178: IFFALSE 30190
// your_side := 0 else
30180: LD_ADDR_OWVAR 2
30184: PUSH
30185: LD_INT 0
30187: ST_TO_ADDR
30188: GO 30204
// your_side := your_side + 1 ;
30190: LD_ADDR_OWVAR 2
30194: PUSH
30195: LD_OWVAR 2
30199: PUSH
30200: LD_INT 1
30202: PLUS
30203: ST_TO_ADDR
// end ;
30204: LD_VAR 0 1
30208: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30209: LD_INT 0
30211: PPUSH
30212: PPUSH
30213: PPUSH
// for i in all_units do
30214: LD_ADDR_VAR 0 2
30218: PUSH
30219: LD_OWVAR 3
30223: PUSH
30224: FOR_IN
30225: IFFALSE 30303
// if IsSelected ( i ) then
30227: LD_VAR 0 2
30231: PPUSH
30232: CALL_OW 306
30236: IFFALSE 30301
// begin j := GetSide ( i ) ;
30238: LD_ADDR_VAR 0 3
30242: PUSH
30243: LD_VAR 0 2
30247: PPUSH
30248: CALL_OW 255
30252: ST_TO_ADDR
// if j = 8 then
30253: LD_VAR 0 3
30257: PUSH
30258: LD_INT 8
30260: EQUAL
30261: IFFALSE 30273
// j := 0 else
30263: LD_ADDR_VAR 0 3
30267: PUSH
30268: LD_INT 0
30270: ST_TO_ADDR
30271: GO 30287
// j := j + 1 ;
30273: LD_ADDR_VAR 0 3
30277: PUSH
30278: LD_VAR 0 3
30282: PUSH
30283: LD_INT 1
30285: PLUS
30286: ST_TO_ADDR
// SetSide ( i , j ) ;
30287: LD_VAR 0 2
30291: PPUSH
30292: LD_VAR 0 3
30296: PPUSH
30297: CALL_OW 235
// end ;
30301: GO 30224
30303: POP
30304: POP
// end ;
30305: LD_VAR 0 1
30309: RET
// export function hHackFog ; begin
30310: LD_INT 0
30312: PPUSH
// FogOff ( true ) ;
30313: LD_INT 1
30315: PPUSH
30316: CALL_OW 344
// end ;
30320: LD_VAR 0 1
30324: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30325: LD_INT 0
30327: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30328: LD_VAR 0 1
30332: PPUSH
30333: LD_VAR 0 2
30337: PPUSH
30338: LD_VAR 0 3
30342: PPUSH
30343: LD_INT 1
30345: PPUSH
30346: LD_INT 1
30348: PPUSH
30349: CALL_OW 483
// CenterOnXY ( x , y ) ;
30353: LD_VAR 0 2
30357: PPUSH
30358: LD_VAR 0 3
30362: PPUSH
30363: CALL_OW 84
// end ;
30367: LD_VAR 0 4
30371: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30372: LD_INT 0
30374: PPUSH
30375: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30376: LD_VAR 0 1
30380: NOT
30381: PUSH
30382: LD_VAR 0 2
30386: PPUSH
30387: LD_VAR 0 3
30391: PPUSH
30392: CALL_OW 488
30396: NOT
30397: OR
30398: PUSH
30399: LD_VAR 0 1
30403: PPUSH
30404: CALL_OW 266
30408: PUSH
30409: LD_INT 3
30411: NONEQUAL
30412: PUSH
30413: LD_VAR 0 1
30417: PPUSH
30418: CALL_OW 247
30422: PUSH
30423: LD_INT 1
30425: EQUAL
30426: NOT
30427: AND
30428: OR
30429: IFFALSE 30433
// exit ;
30431: GO 30582
// if GetType ( factory ) = unit_human then
30433: LD_VAR 0 1
30437: PPUSH
30438: CALL_OW 247
30442: PUSH
30443: LD_INT 1
30445: EQUAL
30446: IFFALSE 30463
// factory := IsInUnit ( factory ) ;
30448: LD_ADDR_VAR 0 1
30452: PUSH
30453: LD_VAR 0 1
30457: PPUSH
30458: CALL_OW 310
30462: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30463: LD_VAR 0 1
30467: PPUSH
30468: CALL_OW 266
30472: PUSH
30473: LD_INT 3
30475: NONEQUAL
30476: IFFALSE 30480
// exit ;
30478: GO 30582
// if HexInfo ( x , y ) = factory then
30480: LD_VAR 0 2
30484: PPUSH
30485: LD_VAR 0 3
30489: PPUSH
30490: CALL_OW 428
30494: PUSH
30495: LD_VAR 0 1
30499: EQUAL
30500: IFFALSE 30527
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30502: LD_ADDR_EXP 110
30506: PUSH
30507: LD_EXP 110
30511: PPUSH
30512: LD_VAR 0 1
30516: PPUSH
30517: LD_INT 0
30519: PPUSH
30520: CALL_OW 1
30524: ST_TO_ADDR
30525: GO 30578
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30527: LD_ADDR_EXP 110
30531: PUSH
30532: LD_EXP 110
30536: PPUSH
30537: LD_VAR 0 1
30541: PPUSH
30542: LD_VAR 0 1
30546: PPUSH
30547: CALL_OW 255
30551: PUSH
30552: LD_VAR 0 1
30556: PUSH
30557: LD_VAR 0 2
30561: PUSH
30562: LD_VAR 0 3
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: PPUSH
30573: CALL_OW 1
30577: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30578: CALL 30587 0 0
// end ;
30582: LD_VAR 0 4
30586: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30587: LD_INT 0
30589: PPUSH
30590: PPUSH
30591: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30592: LD_STRING resetFactoryWaypoint();
30594: PPUSH
30595: CALL_OW 559
// if factoryWaypoints then
30599: LD_EXP 110
30603: IFFALSE 30729
// begin list := PrepareArray ( factoryWaypoints ) ;
30605: LD_ADDR_VAR 0 3
30609: PUSH
30610: LD_EXP 110
30614: PPUSH
30615: CALL 73136 0 1
30619: ST_TO_ADDR
// for i := 1 to list do
30620: LD_ADDR_VAR 0 2
30624: PUSH
30625: DOUBLE
30626: LD_INT 1
30628: DEC
30629: ST_TO_ADDR
30630: LD_VAR 0 3
30634: PUSH
30635: FOR_TO
30636: IFFALSE 30727
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30638: LD_STRING setFactoryWaypointXY(
30640: PUSH
30641: LD_VAR 0 3
30645: PUSH
30646: LD_VAR 0 2
30650: ARRAY
30651: PUSH
30652: LD_INT 1
30654: ARRAY
30655: STR
30656: PUSH
30657: LD_STRING ,
30659: STR
30660: PUSH
30661: LD_VAR 0 3
30665: PUSH
30666: LD_VAR 0 2
30670: ARRAY
30671: PUSH
30672: LD_INT 2
30674: ARRAY
30675: STR
30676: PUSH
30677: LD_STRING ,
30679: STR
30680: PUSH
30681: LD_VAR 0 3
30685: PUSH
30686: LD_VAR 0 2
30690: ARRAY
30691: PUSH
30692: LD_INT 3
30694: ARRAY
30695: STR
30696: PUSH
30697: LD_STRING ,
30699: STR
30700: PUSH
30701: LD_VAR 0 3
30705: PUSH
30706: LD_VAR 0 2
30710: ARRAY
30711: PUSH
30712: LD_INT 4
30714: ARRAY
30715: STR
30716: PUSH
30717: LD_STRING )
30719: STR
30720: PPUSH
30721: CALL_OW 559
30725: GO 30635
30727: POP
30728: POP
// end ; end ;
30729: LD_VAR 0 1
30733: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30734: LD_INT 0
30736: PPUSH
// if HexInfo ( x , y ) = warehouse then
30737: LD_VAR 0 2
30741: PPUSH
30742: LD_VAR 0 3
30746: PPUSH
30747: CALL_OW 428
30751: PUSH
30752: LD_VAR 0 1
30756: EQUAL
30757: IFFALSE 30784
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30759: LD_ADDR_EXP 111
30763: PUSH
30764: LD_EXP 111
30768: PPUSH
30769: LD_VAR 0 1
30773: PPUSH
30774: LD_INT 0
30776: PPUSH
30777: CALL_OW 1
30781: ST_TO_ADDR
30782: GO 30835
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30784: LD_ADDR_EXP 111
30788: PUSH
30789: LD_EXP 111
30793: PPUSH
30794: LD_VAR 0 1
30798: PPUSH
30799: LD_VAR 0 1
30803: PPUSH
30804: CALL_OW 255
30808: PUSH
30809: LD_VAR 0 1
30813: PUSH
30814: LD_VAR 0 2
30818: PUSH
30819: LD_VAR 0 3
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: PPUSH
30830: CALL_OW 1
30834: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30835: CALL 30844 0 0
// end ;
30839: LD_VAR 0 4
30843: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30844: LD_INT 0
30846: PPUSH
30847: PPUSH
30848: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30849: LD_STRING resetWarehouseGatheringPoints();
30851: PPUSH
30852: CALL_OW 559
// if warehouseGatheringPoints then
30856: LD_EXP 111
30860: IFFALSE 30986
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30862: LD_ADDR_VAR 0 3
30866: PUSH
30867: LD_EXP 111
30871: PPUSH
30872: CALL 73136 0 1
30876: ST_TO_ADDR
// for i := 1 to list do
30877: LD_ADDR_VAR 0 2
30881: PUSH
30882: DOUBLE
30883: LD_INT 1
30885: DEC
30886: ST_TO_ADDR
30887: LD_VAR 0 3
30891: PUSH
30892: FOR_TO
30893: IFFALSE 30984
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30895: LD_STRING setWarehouseGatheringPointXY(
30897: PUSH
30898: LD_VAR 0 3
30902: PUSH
30903: LD_VAR 0 2
30907: ARRAY
30908: PUSH
30909: LD_INT 1
30911: ARRAY
30912: STR
30913: PUSH
30914: LD_STRING ,
30916: STR
30917: PUSH
30918: LD_VAR 0 3
30922: PUSH
30923: LD_VAR 0 2
30927: ARRAY
30928: PUSH
30929: LD_INT 2
30931: ARRAY
30932: STR
30933: PUSH
30934: LD_STRING ,
30936: STR
30937: PUSH
30938: LD_VAR 0 3
30942: PUSH
30943: LD_VAR 0 2
30947: ARRAY
30948: PUSH
30949: LD_INT 3
30951: ARRAY
30952: STR
30953: PUSH
30954: LD_STRING ,
30956: STR
30957: PUSH
30958: LD_VAR 0 3
30962: PUSH
30963: LD_VAR 0 2
30967: ARRAY
30968: PUSH
30969: LD_INT 4
30971: ARRAY
30972: STR
30973: PUSH
30974: LD_STRING )
30976: STR
30977: PPUSH
30978: CALL_OW 559
30982: GO 30892
30984: POP
30985: POP
// end ; end ;
30986: LD_VAR 0 1
30990: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30991: LD_EXP 111
30995: IFFALSE 31680
30997: GO 30999
30999: DISABLE
31000: LD_INT 0
31002: PPUSH
31003: PPUSH
31004: PPUSH
31005: PPUSH
31006: PPUSH
31007: PPUSH
31008: PPUSH
31009: PPUSH
31010: PPUSH
// begin enable ;
31011: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31012: LD_ADDR_VAR 0 3
31016: PUSH
31017: LD_EXP 111
31021: PPUSH
31022: CALL 73136 0 1
31026: ST_TO_ADDR
// if not list then
31027: LD_VAR 0 3
31031: NOT
31032: IFFALSE 31036
// exit ;
31034: GO 31680
// for i := 1 to list do
31036: LD_ADDR_VAR 0 1
31040: PUSH
31041: DOUBLE
31042: LD_INT 1
31044: DEC
31045: ST_TO_ADDR
31046: LD_VAR 0 3
31050: PUSH
31051: FOR_TO
31052: IFFALSE 31678
// begin depot := list [ i ] [ 2 ] ;
31054: LD_ADDR_VAR 0 8
31058: PUSH
31059: LD_VAR 0 3
31063: PUSH
31064: LD_VAR 0 1
31068: ARRAY
31069: PUSH
31070: LD_INT 2
31072: ARRAY
31073: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31074: LD_ADDR_VAR 0 5
31078: PUSH
31079: LD_VAR 0 3
31083: PUSH
31084: LD_VAR 0 1
31088: ARRAY
31089: PUSH
31090: LD_INT 1
31092: ARRAY
31093: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31094: LD_VAR 0 8
31098: PPUSH
31099: CALL_OW 301
31103: PUSH
31104: LD_VAR 0 5
31108: PUSH
31109: LD_VAR 0 8
31113: PPUSH
31114: CALL_OW 255
31118: NONEQUAL
31119: OR
31120: IFFALSE 31149
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31122: LD_ADDR_EXP 111
31126: PUSH
31127: LD_EXP 111
31131: PPUSH
31132: LD_VAR 0 8
31136: PPUSH
31137: LD_INT 0
31139: PPUSH
31140: CALL_OW 1
31144: ST_TO_ADDR
// exit ;
31145: POP
31146: POP
31147: GO 31680
// end ; x := list [ i ] [ 3 ] ;
31149: LD_ADDR_VAR 0 6
31153: PUSH
31154: LD_VAR 0 3
31158: PUSH
31159: LD_VAR 0 1
31163: ARRAY
31164: PUSH
31165: LD_INT 3
31167: ARRAY
31168: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31169: LD_ADDR_VAR 0 7
31173: PUSH
31174: LD_VAR 0 3
31178: PUSH
31179: LD_VAR 0 1
31183: ARRAY
31184: PUSH
31185: LD_INT 4
31187: ARRAY
31188: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31189: LD_ADDR_VAR 0 9
31193: PUSH
31194: LD_VAR 0 6
31198: PPUSH
31199: LD_VAR 0 7
31203: PPUSH
31204: LD_INT 16
31206: PPUSH
31207: CALL 71720 0 3
31211: ST_TO_ADDR
// if not cratesNearbyPoint then
31212: LD_VAR 0 9
31216: NOT
31217: IFFALSE 31223
// exit ;
31219: POP
31220: POP
31221: GO 31680
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31223: LD_ADDR_VAR 0 4
31227: PUSH
31228: LD_INT 22
31230: PUSH
31231: LD_VAR 0 5
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 3
31242: PUSH
31243: LD_INT 60
31245: PUSH
31246: EMPTY
31247: LIST
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 91
31255: PUSH
31256: LD_VAR 0 8
31260: PUSH
31261: LD_INT 6
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: LD_INT 25
31274: PUSH
31275: LD_INT 2
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 25
31284: PUSH
31285: LD_INT 16
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: LIST
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: PPUSH
31303: CALL_OW 69
31307: PUSH
31308: LD_VAR 0 8
31312: PPUSH
31313: CALL_OW 313
31317: PPUSH
31318: LD_INT 3
31320: PUSH
31321: LD_INT 60
31323: PUSH
31324: EMPTY
31325: LIST
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 2
31333: PUSH
31334: LD_INT 25
31336: PUSH
31337: LD_INT 2
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 25
31346: PUSH
31347: LD_INT 16
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: LIST
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PPUSH
31363: CALL_OW 72
31367: UNION
31368: ST_TO_ADDR
// if tmp then
31369: LD_VAR 0 4
31373: IFFALSE 31453
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31375: LD_ADDR_VAR 0 4
31379: PUSH
31380: LD_VAR 0 4
31384: PPUSH
31385: LD_INT 3
31387: PPUSH
31388: CALL 69689 0 2
31392: ST_TO_ADDR
// for j in tmp do
31393: LD_ADDR_VAR 0 2
31397: PUSH
31398: LD_VAR 0 4
31402: PUSH
31403: FOR_IN
31404: IFFALSE 31447
// begin if IsInUnit ( j ) then
31406: LD_VAR 0 2
31410: PPUSH
31411: CALL_OW 310
31415: IFFALSE 31426
// ComExit ( j ) ;
31417: LD_VAR 0 2
31421: PPUSH
31422: CALL 69772 0 1
// AddComCollect ( j , x , y ) ;
31426: LD_VAR 0 2
31430: PPUSH
31431: LD_VAR 0 6
31435: PPUSH
31436: LD_VAR 0 7
31440: PPUSH
31441: CALL_OW 177
// end ;
31445: GO 31403
31447: POP
31448: POP
// exit ;
31449: POP
31450: POP
31451: GO 31680
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31453: LD_ADDR_VAR 0 4
31457: PUSH
31458: LD_INT 22
31460: PUSH
31461: LD_VAR 0 5
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 91
31472: PUSH
31473: LD_VAR 0 8
31477: PUSH
31478: LD_INT 8
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 2
31488: PUSH
31489: LD_INT 34
31491: PUSH
31492: LD_INT 12
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 34
31501: PUSH
31502: LD_INT 51
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 34
31511: PUSH
31512: LD_INT 32
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 34
31521: PUSH
31522: LD_INT 89
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: LIST
31540: PPUSH
31541: CALL_OW 69
31545: ST_TO_ADDR
// if tmp then
31546: LD_VAR 0 4
31550: IFFALSE 31676
// begin for j in tmp do
31552: LD_ADDR_VAR 0 2
31556: PUSH
31557: LD_VAR 0 4
31561: PUSH
31562: FOR_IN
31563: IFFALSE 31674
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31565: LD_VAR 0 2
31569: PPUSH
31570: CALL_OW 262
31574: PUSH
31575: LD_INT 3
31577: EQUAL
31578: PUSH
31579: LD_VAR 0 2
31583: PPUSH
31584: CALL_OW 261
31588: PUSH
31589: LD_INT 20
31591: GREATER
31592: OR
31593: PUSH
31594: LD_VAR 0 2
31598: PPUSH
31599: CALL_OW 314
31603: NOT
31604: AND
31605: PUSH
31606: LD_VAR 0 2
31610: PPUSH
31611: CALL_OW 263
31615: PUSH
31616: LD_INT 1
31618: NONEQUAL
31619: PUSH
31620: LD_VAR 0 2
31624: PPUSH
31625: CALL_OW 311
31629: OR
31630: AND
31631: IFFALSE 31672
// begin ComCollect ( j , x , y ) ;
31633: LD_VAR 0 2
31637: PPUSH
31638: LD_VAR 0 6
31642: PPUSH
31643: LD_VAR 0 7
31647: PPUSH
31648: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31652: LD_VAR 0 2
31656: PPUSH
31657: LD_VAR 0 8
31661: PPUSH
31662: CALL_OW 172
// exit ;
31666: POP
31667: POP
31668: POP
31669: POP
31670: GO 31680
// end ;
31672: GO 31562
31674: POP
31675: POP
// end ; end ;
31676: GO 31051
31678: POP
31679: POP
// end ; end_of_file
31680: PPOPN 9
31682: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31683: LD_INT 0
31685: PPUSH
31686: PPUSH
// if exist_mode then
31687: LD_VAR 0 2
31691: IFFALSE 31716
// unit := CreateCharacter ( prefix & ident ) else
31693: LD_ADDR_VAR 0 5
31697: PUSH
31698: LD_VAR 0 3
31702: PUSH
31703: LD_VAR 0 1
31707: STR
31708: PPUSH
31709: CALL_OW 34
31713: ST_TO_ADDR
31714: GO 31731
// unit := NewCharacter ( ident ) ;
31716: LD_ADDR_VAR 0 5
31720: PUSH
31721: LD_VAR 0 1
31725: PPUSH
31726: CALL_OW 25
31730: ST_TO_ADDR
// result := unit ;
31731: LD_ADDR_VAR 0 4
31735: PUSH
31736: LD_VAR 0 5
31740: ST_TO_ADDR
// end ;
31741: LD_VAR 0 4
31745: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31746: LD_INT 0
31748: PPUSH
31749: PPUSH
// if not side or not nation then
31750: LD_VAR 0 1
31754: NOT
31755: PUSH
31756: LD_VAR 0 2
31760: NOT
31761: OR
31762: IFFALSE 31766
// exit ;
31764: GO 32534
// case nation of nation_american :
31766: LD_VAR 0 2
31770: PUSH
31771: LD_INT 1
31773: DOUBLE
31774: EQUAL
31775: IFTRUE 31779
31777: GO 31993
31779: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31780: LD_ADDR_VAR 0 4
31784: PUSH
31785: LD_INT 35
31787: PUSH
31788: LD_INT 45
31790: PUSH
31791: LD_INT 46
31793: PUSH
31794: LD_INT 47
31796: PUSH
31797: LD_INT 82
31799: PUSH
31800: LD_INT 83
31802: PUSH
31803: LD_INT 84
31805: PUSH
31806: LD_INT 85
31808: PUSH
31809: LD_INT 86
31811: PUSH
31812: LD_INT 1
31814: PUSH
31815: LD_INT 2
31817: PUSH
31818: LD_INT 6
31820: PUSH
31821: LD_INT 15
31823: PUSH
31824: LD_INT 16
31826: PUSH
31827: LD_INT 7
31829: PUSH
31830: LD_INT 12
31832: PUSH
31833: LD_INT 13
31835: PUSH
31836: LD_INT 10
31838: PUSH
31839: LD_INT 14
31841: PUSH
31842: LD_INT 20
31844: PUSH
31845: LD_INT 21
31847: PUSH
31848: LD_INT 22
31850: PUSH
31851: LD_INT 25
31853: PUSH
31854: LD_INT 32
31856: PUSH
31857: LD_INT 27
31859: PUSH
31860: LD_INT 36
31862: PUSH
31863: LD_INT 69
31865: PUSH
31866: LD_INT 39
31868: PUSH
31869: LD_INT 34
31871: PUSH
31872: LD_INT 40
31874: PUSH
31875: LD_INT 48
31877: PUSH
31878: LD_INT 49
31880: PUSH
31881: LD_INT 50
31883: PUSH
31884: LD_INT 51
31886: PUSH
31887: LD_INT 52
31889: PUSH
31890: LD_INT 53
31892: PUSH
31893: LD_INT 54
31895: PUSH
31896: LD_INT 55
31898: PUSH
31899: LD_INT 56
31901: PUSH
31902: LD_INT 57
31904: PUSH
31905: LD_INT 58
31907: PUSH
31908: LD_INT 59
31910: PUSH
31911: LD_INT 60
31913: PUSH
31914: LD_INT 61
31916: PUSH
31917: LD_INT 62
31919: PUSH
31920: LD_INT 80
31922: PUSH
31923: LD_INT 82
31925: PUSH
31926: LD_INT 83
31928: PUSH
31929: LD_INT 84
31931: PUSH
31932: LD_INT 85
31934: PUSH
31935: LD_INT 86
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: ST_TO_ADDR
31991: GO 32458
31993: LD_INT 2
31995: DOUBLE
31996: EQUAL
31997: IFTRUE 32001
31999: GO 32227
32001: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32002: LD_ADDR_VAR 0 4
32006: PUSH
32007: LD_INT 35
32009: PUSH
32010: LD_INT 45
32012: PUSH
32013: LD_INT 46
32015: PUSH
32016: LD_INT 47
32018: PUSH
32019: LD_INT 82
32021: PUSH
32022: LD_INT 83
32024: PUSH
32025: LD_INT 84
32027: PUSH
32028: LD_INT 85
32030: PUSH
32031: LD_INT 87
32033: PUSH
32034: LD_INT 70
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: LD_INT 11
32042: PUSH
32043: LD_INT 3
32045: PUSH
32046: LD_INT 4
32048: PUSH
32049: LD_INT 5
32051: PUSH
32052: LD_INT 6
32054: PUSH
32055: LD_INT 15
32057: PUSH
32058: LD_INT 18
32060: PUSH
32061: LD_INT 7
32063: PUSH
32064: LD_INT 17
32066: PUSH
32067: LD_INT 8
32069: PUSH
32070: LD_INT 20
32072: PUSH
32073: LD_INT 21
32075: PUSH
32076: LD_INT 22
32078: PUSH
32079: LD_INT 72
32081: PUSH
32082: LD_INT 26
32084: PUSH
32085: LD_INT 69
32087: PUSH
32088: LD_INT 39
32090: PUSH
32091: LD_INT 40
32093: PUSH
32094: LD_INT 41
32096: PUSH
32097: LD_INT 42
32099: PUSH
32100: LD_INT 43
32102: PUSH
32103: LD_INT 48
32105: PUSH
32106: LD_INT 49
32108: PUSH
32109: LD_INT 50
32111: PUSH
32112: LD_INT 51
32114: PUSH
32115: LD_INT 52
32117: PUSH
32118: LD_INT 53
32120: PUSH
32121: LD_INT 54
32123: PUSH
32124: LD_INT 55
32126: PUSH
32127: LD_INT 56
32129: PUSH
32130: LD_INT 60
32132: PUSH
32133: LD_INT 61
32135: PUSH
32136: LD_INT 62
32138: PUSH
32139: LD_INT 66
32141: PUSH
32142: LD_INT 67
32144: PUSH
32145: LD_INT 68
32147: PUSH
32148: LD_INT 81
32150: PUSH
32151: LD_INT 82
32153: PUSH
32154: LD_INT 83
32156: PUSH
32157: LD_INT 84
32159: PUSH
32160: LD_INT 85
32162: PUSH
32163: LD_INT 87
32165: PUSH
32166: LD_INT 88
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: ST_TO_ADDR
32225: GO 32458
32227: LD_INT 3
32229: DOUBLE
32230: EQUAL
32231: IFTRUE 32235
32233: GO 32457
32235: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32236: LD_ADDR_VAR 0 4
32240: PUSH
32241: LD_INT 46
32243: PUSH
32244: LD_INT 47
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: LD_INT 2
32252: PUSH
32253: LD_INT 82
32255: PUSH
32256: LD_INT 83
32258: PUSH
32259: LD_INT 84
32261: PUSH
32262: LD_INT 85
32264: PUSH
32265: LD_INT 86
32267: PUSH
32268: LD_INT 11
32270: PUSH
32271: LD_INT 9
32273: PUSH
32274: LD_INT 20
32276: PUSH
32277: LD_INT 19
32279: PUSH
32280: LD_INT 21
32282: PUSH
32283: LD_INT 24
32285: PUSH
32286: LD_INT 22
32288: PUSH
32289: LD_INT 25
32291: PUSH
32292: LD_INT 28
32294: PUSH
32295: LD_INT 29
32297: PUSH
32298: LD_INT 30
32300: PUSH
32301: LD_INT 31
32303: PUSH
32304: LD_INT 37
32306: PUSH
32307: LD_INT 38
32309: PUSH
32310: LD_INT 32
32312: PUSH
32313: LD_INT 27
32315: PUSH
32316: LD_INT 33
32318: PUSH
32319: LD_INT 69
32321: PUSH
32322: LD_INT 39
32324: PUSH
32325: LD_INT 34
32327: PUSH
32328: LD_INT 40
32330: PUSH
32331: LD_INT 71
32333: PUSH
32334: LD_INT 23
32336: PUSH
32337: LD_INT 44
32339: PUSH
32340: LD_INT 48
32342: PUSH
32343: LD_INT 49
32345: PUSH
32346: LD_INT 50
32348: PUSH
32349: LD_INT 51
32351: PUSH
32352: LD_INT 52
32354: PUSH
32355: LD_INT 53
32357: PUSH
32358: LD_INT 54
32360: PUSH
32361: LD_INT 55
32363: PUSH
32364: LD_INT 56
32366: PUSH
32367: LD_INT 57
32369: PUSH
32370: LD_INT 58
32372: PUSH
32373: LD_INT 59
32375: PUSH
32376: LD_INT 63
32378: PUSH
32379: LD_INT 64
32381: PUSH
32382: LD_INT 65
32384: PUSH
32385: LD_INT 82
32387: PUSH
32388: LD_INT 83
32390: PUSH
32391: LD_INT 84
32393: PUSH
32394: LD_INT 85
32396: PUSH
32397: LD_INT 86
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: ST_TO_ADDR
32455: GO 32458
32457: POP
// if state > - 1 and state < 3 then
32458: LD_VAR 0 3
32462: PUSH
32463: LD_INT 1
32465: NEG
32466: GREATER
32467: PUSH
32468: LD_VAR 0 3
32472: PUSH
32473: LD_INT 3
32475: LESS
32476: AND
32477: IFFALSE 32534
// for i in result do
32479: LD_ADDR_VAR 0 5
32483: PUSH
32484: LD_VAR 0 4
32488: PUSH
32489: FOR_IN
32490: IFFALSE 32532
// if GetTech ( i , side ) <> state then
32492: LD_VAR 0 5
32496: PPUSH
32497: LD_VAR 0 1
32501: PPUSH
32502: CALL_OW 321
32506: PUSH
32507: LD_VAR 0 3
32511: NONEQUAL
32512: IFFALSE 32530
// result := result diff i ;
32514: LD_ADDR_VAR 0 4
32518: PUSH
32519: LD_VAR 0 4
32523: PUSH
32524: LD_VAR 0 5
32528: DIFF
32529: ST_TO_ADDR
32530: GO 32489
32532: POP
32533: POP
// end ;
32534: LD_VAR 0 4
32538: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32539: LD_INT 0
32541: PPUSH
32542: PPUSH
32543: PPUSH
// result := true ;
32544: LD_ADDR_VAR 0 3
32548: PUSH
32549: LD_INT 1
32551: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32552: LD_ADDR_VAR 0 5
32556: PUSH
32557: LD_VAR 0 2
32561: PPUSH
32562: CALL_OW 480
32566: ST_TO_ADDR
// if not tmp then
32567: LD_VAR 0 5
32571: NOT
32572: IFFALSE 32576
// exit ;
32574: GO 32625
// for i in tmp do
32576: LD_ADDR_VAR 0 4
32580: PUSH
32581: LD_VAR 0 5
32585: PUSH
32586: FOR_IN
32587: IFFALSE 32623
// if GetTech ( i , side ) <> state_researched then
32589: LD_VAR 0 4
32593: PPUSH
32594: LD_VAR 0 1
32598: PPUSH
32599: CALL_OW 321
32603: PUSH
32604: LD_INT 2
32606: NONEQUAL
32607: IFFALSE 32621
// begin result := false ;
32609: LD_ADDR_VAR 0 3
32613: PUSH
32614: LD_INT 0
32616: ST_TO_ADDR
// exit ;
32617: POP
32618: POP
32619: GO 32625
// end ;
32621: GO 32586
32623: POP
32624: POP
// end ;
32625: LD_VAR 0 3
32629: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32630: LD_INT 0
32632: PPUSH
32633: PPUSH
32634: PPUSH
32635: PPUSH
32636: PPUSH
32637: PPUSH
32638: PPUSH
32639: PPUSH
32640: PPUSH
32641: PPUSH
32642: PPUSH
32643: PPUSH
32644: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32645: LD_VAR 0 1
32649: NOT
32650: PUSH
32651: LD_VAR 0 1
32655: PPUSH
32656: CALL_OW 257
32660: PUSH
32661: LD_INT 9
32663: NONEQUAL
32664: OR
32665: IFFALSE 32669
// exit ;
32667: GO 33242
// side := GetSide ( unit ) ;
32669: LD_ADDR_VAR 0 9
32673: PUSH
32674: LD_VAR 0 1
32678: PPUSH
32679: CALL_OW 255
32683: ST_TO_ADDR
// tech_space := tech_spacanom ;
32684: LD_ADDR_VAR 0 12
32688: PUSH
32689: LD_INT 29
32691: ST_TO_ADDR
// tech_time := tech_taurad ;
32692: LD_ADDR_VAR 0 13
32696: PUSH
32697: LD_INT 28
32699: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32700: LD_ADDR_VAR 0 11
32704: PUSH
32705: LD_VAR 0 1
32709: PPUSH
32710: CALL_OW 310
32714: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32715: LD_VAR 0 11
32719: PPUSH
32720: CALL_OW 247
32724: PUSH
32725: LD_INT 2
32727: EQUAL
32728: IFFALSE 32732
// exit ;
32730: GO 33242
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32732: LD_ADDR_VAR 0 8
32736: PUSH
32737: LD_INT 81
32739: PUSH
32740: LD_VAR 0 9
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 3
32751: PUSH
32752: LD_INT 21
32754: PUSH
32755: LD_INT 3
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PPUSH
32770: CALL_OW 69
32774: ST_TO_ADDR
// if not tmp then
32775: LD_VAR 0 8
32779: NOT
32780: IFFALSE 32784
// exit ;
32782: GO 33242
// if in_unit then
32784: LD_VAR 0 11
32788: IFFALSE 32812
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32790: LD_ADDR_VAR 0 10
32794: PUSH
32795: LD_VAR 0 8
32799: PPUSH
32800: LD_VAR 0 11
32804: PPUSH
32805: CALL_OW 74
32809: ST_TO_ADDR
32810: GO 32832
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32812: LD_ADDR_VAR 0 10
32816: PUSH
32817: LD_VAR 0 8
32821: PPUSH
32822: LD_VAR 0 1
32826: PPUSH
32827: CALL_OW 74
32831: ST_TO_ADDR
// if not enemy then
32832: LD_VAR 0 10
32836: NOT
32837: IFFALSE 32841
// exit ;
32839: GO 33242
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32841: LD_VAR 0 11
32845: PUSH
32846: LD_VAR 0 11
32850: PPUSH
32851: LD_VAR 0 10
32855: PPUSH
32856: CALL_OW 296
32860: PUSH
32861: LD_INT 13
32863: GREATER
32864: AND
32865: PUSH
32866: LD_VAR 0 1
32870: PPUSH
32871: LD_VAR 0 10
32875: PPUSH
32876: CALL_OW 296
32880: PUSH
32881: LD_INT 12
32883: GREATER
32884: OR
32885: IFFALSE 32889
// exit ;
32887: GO 33242
// missile := [ 1 ] ;
32889: LD_ADDR_VAR 0 14
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: EMPTY
32898: LIST
32899: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32900: LD_VAR 0 9
32904: PPUSH
32905: LD_VAR 0 12
32909: PPUSH
32910: CALL_OW 325
32914: IFFALSE 32943
// missile := Replace ( missile , missile + 1 , 2 ) ;
32916: LD_ADDR_VAR 0 14
32920: PUSH
32921: LD_VAR 0 14
32925: PPUSH
32926: LD_VAR 0 14
32930: PUSH
32931: LD_INT 1
32933: PLUS
32934: PPUSH
32935: LD_INT 2
32937: PPUSH
32938: CALL_OW 1
32942: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32943: LD_VAR 0 9
32947: PPUSH
32948: LD_VAR 0 13
32952: PPUSH
32953: CALL_OW 325
32957: PUSH
32958: LD_VAR 0 10
32962: PPUSH
32963: CALL_OW 255
32967: PPUSH
32968: LD_VAR 0 13
32972: PPUSH
32973: CALL_OW 325
32977: NOT
32978: AND
32979: IFFALSE 33008
// missile := Replace ( missile , missile + 1 , 3 ) ;
32981: LD_ADDR_VAR 0 14
32985: PUSH
32986: LD_VAR 0 14
32990: PPUSH
32991: LD_VAR 0 14
32995: PUSH
32996: LD_INT 1
32998: PLUS
32999: PPUSH
33000: LD_INT 3
33002: PPUSH
33003: CALL_OW 1
33007: ST_TO_ADDR
// if missile < 2 then
33008: LD_VAR 0 14
33012: PUSH
33013: LD_INT 2
33015: LESS
33016: IFFALSE 33020
// exit ;
33018: GO 33242
// x := GetX ( enemy ) ;
33020: LD_ADDR_VAR 0 4
33024: PUSH
33025: LD_VAR 0 10
33029: PPUSH
33030: CALL_OW 250
33034: ST_TO_ADDR
// y := GetY ( enemy ) ;
33035: LD_ADDR_VAR 0 5
33039: PUSH
33040: LD_VAR 0 10
33044: PPUSH
33045: CALL_OW 251
33049: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33050: LD_ADDR_VAR 0 6
33054: PUSH
33055: LD_VAR 0 4
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PPUSH
33064: LD_INT 1
33066: PPUSH
33067: CALL_OW 12
33071: PLUS
33072: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33073: LD_ADDR_VAR 0 7
33077: PUSH
33078: LD_VAR 0 5
33082: PUSH
33083: LD_INT 1
33085: NEG
33086: PPUSH
33087: LD_INT 1
33089: PPUSH
33090: CALL_OW 12
33094: PLUS
33095: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33096: LD_VAR 0 6
33100: PPUSH
33101: LD_VAR 0 7
33105: PPUSH
33106: CALL_OW 488
33110: NOT
33111: IFFALSE 33133
// begin _x := x ;
33113: LD_ADDR_VAR 0 6
33117: PUSH
33118: LD_VAR 0 4
33122: ST_TO_ADDR
// _y := y ;
33123: LD_ADDR_VAR 0 7
33127: PUSH
33128: LD_VAR 0 5
33132: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33133: LD_ADDR_VAR 0 3
33137: PUSH
33138: LD_INT 1
33140: PPUSH
33141: LD_VAR 0 14
33145: PPUSH
33146: CALL_OW 12
33150: ST_TO_ADDR
// case i of 1 :
33151: LD_VAR 0 3
33155: PUSH
33156: LD_INT 1
33158: DOUBLE
33159: EQUAL
33160: IFTRUE 33164
33162: GO 33181
33164: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33165: LD_VAR 0 1
33169: PPUSH
33170: LD_VAR 0 10
33174: PPUSH
33175: CALL_OW 115
33179: GO 33242
33181: LD_INT 2
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33189
33187: GO 33211
33189: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33190: LD_VAR 0 1
33194: PPUSH
33195: LD_VAR 0 6
33199: PPUSH
33200: LD_VAR 0 7
33204: PPUSH
33205: CALL_OW 153
33209: GO 33242
33211: LD_INT 3
33213: DOUBLE
33214: EQUAL
33215: IFTRUE 33219
33217: GO 33241
33219: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33220: LD_VAR 0 1
33224: PPUSH
33225: LD_VAR 0 6
33229: PPUSH
33230: LD_VAR 0 7
33234: PPUSH
33235: CALL_OW 154
33239: GO 33242
33241: POP
// end ;
33242: LD_VAR 0 2
33246: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33247: LD_INT 0
33249: PPUSH
33250: PPUSH
33251: PPUSH
33252: PPUSH
33253: PPUSH
33254: PPUSH
// if not unit or not building then
33255: LD_VAR 0 1
33259: NOT
33260: PUSH
33261: LD_VAR 0 2
33265: NOT
33266: OR
33267: IFFALSE 33271
// exit ;
33269: GO 33429
// x := GetX ( building ) ;
33271: LD_ADDR_VAR 0 5
33275: PUSH
33276: LD_VAR 0 2
33280: PPUSH
33281: CALL_OW 250
33285: ST_TO_ADDR
// y := GetY ( building ) ;
33286: LD_ADDR_VAR 0 6
33290: PUSH
33291: LD_VAR 0 2
33295: PPUSH
33296: CALL_OW 251
33300: ST_TO_ADDR
// for i = 0 to 5 do
33301: LD_ADDR_VAR 0 4
33305: PUSH
33306: DOUBLE
33307: LD_INT 0
33309: DEC
33310: ST_TO_ADDR
33311: LD_INT 5
33313: PUSH
33314: FOR_TO
33315: IFFALSE 33427
// begin _x := ShiftX ( x , i , 3 ) ;
33317: LD_ADDR_VAR 0 7
33321: PUSH
33322: LD_VAR 0 5
33326: PPUSH
33327: LD_VAR 0 4
33331: PPUSH
33332: LD_INT 3
33334: PPUSH
33335: CALL_OW 272
33339: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33340: LD_ADDR_VAR 0 8
33344: PUSH
33345: LD_VAR 0 6
33349: PPUSH
33350: LD_VAR 0 4
33354: PPUSH
33355: LD_INT 3
33357: PPUSH
33358: CALL_OW 273
33362: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33363: LD_VAR 0 7
33367: PPUSH
33368: LD_VAR 0 8
33372: PPUSH
33373: CALL_OW 488
33377: NOT
33378: IFFALSE 33382
// continue ;
33380: GO 33314
// if HexInfo ( _x , _y ) = 0 then
33382: LD_VAR 0 7
33386: PPUSH
33387: LD_VAR 0 8
33391: PPUSH
33392: CALL_OW 428
33396: PUSH
33397: LD_INT 0
33399: EQUAL
33400: IFFALSE 33425
// begin ComMoveXY ( unit , _x , _y ) ;
33402: LD_VAR 0 1
33406: PPUSH
33407: LD_VAR 0 7
33411: PPUSH
33412: LD_VAR 0 8
33416: PPUSH
33417: CALL_OW 111
// exit ;
33421: POP
33422: POP
33423: GO 33429
// end ; end ;
33425: GO 33314
33427: POP
33428: POP
// end ;
33429: LD_VAR 0 3
33433: RET
// export function ScanBase ( side , base_area ) ; begin
33434: LD_INT 0
33436: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33437: LD_ADDR_VAR 0 3
33441: PUSH
33442: LD_VAR 0 2
33446: PPUSH
33447: LD_INT 81
33449: PUSH
33450: LD_VAR 0 1
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PPUSH
33459: CALL_OW 70
33463: ST_TO_ADDR
// end ;
33464: LD_VAR 0 3
33468: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33469: LD_INT 0
33471: PPUSH
33472: PPUSH
33473: PPUSH
33474: PPUSH
// result := false ;
33475: LD_ADDR_VAR 0 2
33479: PUSH
33480: LD_INT 0
33482: ST_TO_ADDR
// side := GetSide ( unit ) ;
33483: LD_ADDR_VAR 0 3
33487: PUSH
33488: LD_VAR 0 1
33492: PPUSH
33493: CALL_OW 255
33497: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33498: LD_ADDR_VAR 0 4
33502: PUSH
33503: LD_VAR 0 1
33507: PPUSH
33508: CALL_OW 248
33512: ST_TO_ADDR
// case nat of 1 :
33513: LD_VAR 0 4
33517: PUSH
33518: LD_INT 1
33520: DOUBLE
33521: EQUAL
33522: IFTRUE 33526
33524: GO 33537
33526: POP
// tech := tech_lassight ; 2 :
33527: LD_ADDR_VAR 0 5
33531: PUSH
33532: LD_INT 12
33534: ST_TO_ADDR
33535: GO 33576
33537: LD_INT 2
33539: DOUBLE
33540: EQUAL
33541: IFTRUE 33545
33543: GO 33556
33545: POP
// tech := tech_mortar ; 3 :
33546: LD_ADDR_VAR 0 5
33550: PUSH
33551: LD_INT 41
33553: ST_TO_ADDR
33554: GO 33576
33556: LD_INT 3
33558: DOUBLE
33559: EQUAL
33560: IFTRUE 33564
33562: GO 33575
33564: POP
// tech := tech_bazooka ; end ;
33565: LD_ADDR_VAR 0 5
33569: PUSH
33570: LD_INT 44
33572: ST_TO_ADDR
33573: GO 33576
33575: POP
// if Researched ( side , tech ) then
33576: LD_VAR 0 3
33580: PPUSH
33581: LD_VAR 0 5
33585: PPUSH
33586: CALL_OW 325
33590: IFFALSE 33617
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33592: LD_ADDR_VAR 0 2
33596: PUSH
33597: LD_INT 5
33599: PUSH
33600: LD_INT 8
33602: PUSH
33603: LD_INT 9
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: LIST
33610: PUSH
33611: LD_VAR 0 4
33615: ARRAY
33616: ST_TO_ADDR
// end ;
33617: LD_VAR 0 2
33621: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33622: LD_INT 0
33624: PPUSH
33625: PPUSH
33626: PPUSH
// if not mines then
33627: LD_VAR 0 2
33631: NOT
33632: IFFALSE 33636
// exit ;
33634: GO 33780
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33636: LD_ADDR_VAR 0 5
33640: PUSH
33641: LD_INT 81
33643: PUSH
33644: LD_VAR 0 1
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 3
33655: PUSH
33656: LD_INT 21
33658: PUSH
33659: LD_INT 3
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PPUSH
33674: CALL_OW 69
33678: ST_TO_ADDR
// for i in mines do
33679: LD_ADDR_VAR 0 4
33683: PUSH
33684: LD_VAR 0 2
33688: PUSH
33689: FOR_IN
33690: IFFALSE 33778
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33692: LD_VAR 0 4
33696: PUSH
33697: LD_INT 1
33699: ARRAY
33700: PPUSH
33701: LD_VAR 0 4
33705: PUSH
33706: LD_INT 2
33708: ARRAY
33709: PPUSH
33710: CALL_OW 458
33714: NOT
33715: IFFALSE 33719
// continue ;
33717: GO 33689
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33719: LD_VAR 0 4
33723: PUSH
33724: LD_INT 1
33726: ARRAY
33727: PPUSH
33728: LD_VAR 0 4
33732: PUSH
33733: LD_INT 2
33735: ARRAY
33736: PPUSH
33737: CALL_OW 428
33741: PUSH
33742: LD_VAR 0 5
33746: IN
33747: IFFALSE 33776
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33749: LD_VAR 0 4
33753: PUSH
33754: LD_INT 1
33756: ARRAY
33757: PPUSH
33758: LD_VAR 0 4
33762: PUSH
33763: LD_INT 2
33765: ARRAY
33766: PPUSH
33767: LD_VAR 0 1
33771: PPUSH
33772: CALL_OW 456
// end ;
33776: GO 33689
33778: POP
33779: POP
// end ;
33780: LD_VAR 0 3
33784: RET
// export function Count ( array ) ; begin
33785: LD_INT 0
33787: PPUSH
// result := array + 0 ;
33788: LD_ADDR_VAR 0 2
33792: PUSH
33793: LD_VAR 0 1
33797: PUSH
33798: LD_INT 0
33800: PLUS
33801: ST_TO_ADDR
// end ;
33802: LD_VAR 0 2
33806: RET
// export function IsEmpty ( building ) ; begin
33807: LD_INT 0
33809: PPUSH
// if not building then
33810: LD_VAR 0 1
33814: NOT
33815: IFFALSE 33819
// exit ;
33817: GO 33862
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33819: LD_ADDR_VAR 0 2
33823: PUSH
33824: LD_VAR 0 1
33828: PUSH
33829: LD_INT 22
33831: PUSH
33832: LD_VAR 0 1
33836: PPUSH
33837: CALL_OW 255
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 58
33848: PUSH
33849: EMPTY
33850: LIST
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PPUSH
33856: CALL_OW 69
33860: IN
33861: ST_TO_ADDR
// end ;
33862: LD_VAR 0 2
33866: RET
// export function IsNotFull ( building ) ; var places ; begin
33867: LD_INT 0
33869: PPUSH
33870: PPUSH
// if not building then
33871: LD_VAR 0 1
33875: NOT
33876: IFFALSE 33880
// exit ;
33878: GO 33908
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33880: LD_ADDR_VAR 0 2
33884: PUSH
33885: LD_VAR 0 1
33889: PPUSH
33890: LD_INT 3
33892: PUSH
33893: LD_INT 62
33895: PUSH
33896: EMPTY
33897: LIST
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PPUSH
33903: CALL_OW 72
33907: ST_TO_ADDR
// end ;
33908: LD_VAR 0 2
33912: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33913: LD_INT 0
33915: PPUSH
33916: PPUSH
33917: PPUSH
33918: PPUSH
// tmp := [ ] ;
33919: LD_ADDR_VAR 0 3
33923: PUSH
33924: EMPTY
33925: ST_TO_ADDR
// list := [ ] ;
33926: LD_ADDR_VAR 0 5
33930: PUSH
33931: EMPTY
33932: ST_TO_ADDR
// for i = 16 to 25 do
33933: LD_ADDR_VAR 0 4
33937: PUSH
33938: DOUBLE
33939: LD_INT 16
33941: DEC
33942: ST_TO_ADDR
33943: LD_INT 25
33945: PUSH
33946: FOR_TO
33947: IFFALSE 34020
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33949: LD_ADDR_VAR 0 3
33953: PUSH
33954: LD_VAR 0 3
33958: PUSH
33959: LD_INT 22
33961: PUSH
33962: LD_VAR 0 1
33966: PPUSH
33967: CALL_OW 255
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 91
33978: PUSH
33979: LD_VAR 0 1
33983: PUSH
33984: LD_INT 6
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 30
33994: PUSH
33995: LD_VAR 0 4
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: LIST
34008: PUSH
34009: EMPTY
34010: LIST
34011: PPUSH
34012: CALL_OW 69
34016: ADD
34017: ST_TO_ADDR
34018: GO 33946
34020: POP
34021: POP
// for i = 1 to tmp do
34022: LD_ADDR_VAR 0 4
34026: PUSH
34027: DOUBLE
34028: LD_INT 1
34030: DEC
34031: ST_TO_ADDR
34032: LD_VAR 0 3
34036: PUSH
34037: FOR_TO
34038: IFFALSE 34126
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34040: LD_ADDR_VAR 0 5
34044: PUSH
34045: LD_VAR 0 5
34049: PUSH
34050: LD_VAR 0 3
34054: PUSH
34055: LD_VAR 0 4
34059: ARRAY
34060: PPUSH
34061: CALL_OW 266
34065: PUSH
34066: LD_VAR 0 3
34070: PUSH
34071: LD_VAR 0 4
34075: ARRAY
34076: PPUSH
34077: CALL_OW 250
34081: PUSH
34082: LD_VAR 0 3
34086: PUSH
34087: LD_VAR 0 4
34091: ARRAY
34092: PPUSH
34093: CALL_OW 251
34097: PUSH
34098: LD_VAR 0 3
34102: PUSH
34103: LD_VAR 0 4
34107: ARRAY
34108: PPUSH
34109: CALL_OW 254
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: PUSH
34120: EMPTY
34121: LIST
34122: ADD
34123: ST_TO_ADDR
34124: GO 34037
34126: POP
34127: POP
// result := list ;
34128: LD_ADDR_VAR 0 2
34132: PUSH
34133: LD_VAR 0 5
34137: ST_TO_ADDR
// end ;
34138: LD_VAR 0 2
34142: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34143: LD_INT 0
34145: PPUSH
34146: PPUSH
34147: PPUSH
34148: PPUSH
34149: PPUSH
34150: PPUSH
34151: PPUSH
// if not factory then
34152: LD_VAR 0 1
34156: NOT
34157: IFFALSE 34161
// exit ;
34159: GO 34754
// if control = control_apeman then
34161: LD_VAR 0 4
34165: PUSH
34166: LD_INT 5
34168: EQUAL
34169: IFFALSE 34278
// begin tmp := UnitsInside ( factory ) ;
34171: LD_ADDR_VAR 0 8
34175: PUSH
34176: LD_VAR 0 1
34180: PPUSH
34181: CALL_OW 313
34185: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34186: LD_VAR 0 8
34190: PPUSH
34191: LD_INT 25
34193: PUSH
34194: LD_INT 12
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PPUSH
34201: CALL_OW 72
34205: NOT
34206: IFFALSE 34216
// control := control_manual ;
34208: LD_ADDR_VAR 0 4
34212: PUSH
34213: LD_INT 1
34215: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34216: LD_ADDR_VAR 0 8
34220: PUSH
34221: LD_VAR 0 1
34225: PPUSH
34226: CALL 33913 0 1
34230: ST_TO_ADDR
// if tmp then
34231: LD_VAR 0 8
34235: IFFALSE 34278
// begin for i in tmp do
34237: LD_ADDR_VAR 0 7
34241: PUSH
34242: LD_VAR 0 8
34246: PUSH
34247: FOR_IN
34248: IFFALSE 34276
// if i [ 1 ] = b_ext_radio then
34250: LD_VAR 0 7
34254: PUSH
34255: LD_INT 1
34257: ARRAY
34258: PUSH
34259: LD_INT 22
34261: EQUAL
34262: IFFALSE 34274
// begin control := control_remote ;
34264: LD_ADDR_VAR 0 4
34268: PUSH
34269: LD_INT 2
34271: ST_TO_ADDR
// break ;
34272: GO 34276
// end ;
34274: GO 34247
34276: POP
34277: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34278: LD_VAR 0 1
34282: PPUSH
34283: LD_VAR 0 2
34287: PPUSH
34288: LD_VAR 0 3
34292: PPUSH
34293: LD_VAR 0 4
34297: PPUSH
34298: LD_VAR 0 5
34302: PPUSH
34303: CALL_OW 448
34307: IFFALSE 34342
// begin result := [ chassis , engine , control , weapon ] ;
34309: LD_ADDR_VAR 0 6
34313: PUSH
34314: LD_VAR 0 2
34318: PUSH
34319: LD_VAR 0 3
34323: PUSH
34324: LD_VAR 0 4
34328: PUSH
34329: LD_VAR 0 5
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: ST_TO_ADDR
// exit ;
34340: GO 34754
// end ; _chassis := AvailableChassisList ( factory ) ;
34342: LD_ADDR_VAR 0 9
34346: PUSH
34347: LD_VAR 0 1
34351: PPUSH
34352: CALL_OW 475
34356: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34357: LD_ADDR_VAR 0 11
34361: PUSH
34362: LD_VAR 0 1
34366: PPUSH
34367: CALL_OW 476
34371: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34372: LD_ADDR_VAR 0 12
34376: PUSH
34377: LD_VAR 0 1
34381: PPUSH
34382: CALL_OW 477
34386: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34387: LD_ADDR_VAR 0 10
34391: PUSH
34392: LD_VAR 0 1
34396: PPUSH
34397: CALL_OW 478
34401: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34402: LD_VAR 0 9
34406: NOT
34407: PUSH
34408: LD_VAR 0 11
34412: NOT
34413: OR
34414: PUSH
34415: LD_VAR 0 12
34419: NOT
34420: OR
34421: PUSH
34422: LD_VAR 0 10
34426: NOT
34427: OR
34428: IFFALSE 34463
// begin result := [ chassis , engine , control , weapon ] ;
34430: LD_ADDR_VAR 0 6
34434: PUSH
34435: LD_VAR 0 2
34439: PUSH
34440: LD_VAR 0 3
34444: PUSH
34445: LD_VAR 0 4
34449: PUSH
34450: LD_VAR 0 5
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: ST_TO_ADDR
// exit ;
34461: GO 34754
// end ; if not chassis in _chassis then
34463: LD_VAR 0 2
34467: PUSH
34468: LD_VAR 0 9
34472: IN
34473: NOT
34474: IFFALSE 34500
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34476: LD_ADDR_VAR 0 2
34480: PUSH
34481: LD_VAR 0 9
34485: PUSH
34486: LD_INT 1
34488: PPUSH
34489: LD_VAR 0 9
34493: PPUSH
34494: CALL_OW 12
34498: ARRAY
34499: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34500: LD_VAR 0 2
34504: PPUSH
34505: LD_VAR 0 3
34509: PPUSH
34510: CALL 34759 0 2
34514: NOT
34515: IFFALSE 34574
// repeat engine := _engine [ 1 ] ;
34517: LD_ADDR_VAR 0 3
34521: PUSH
34522: LD_VAR 0 11
34526: PUSH
34527: LD_INT 1
34529: ARRAY
34530: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34531: LD_ADDR_VAR 0 11
34535: PUSH
34536: LD_VAR 0 11
34540: PPUSH
34541: LD_INT 1
34543: PPUSH
34544: CALL_OW 3
34548: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34549: LD_VAR 0 2
34553: PPUSH
34554: LD_VAR 0 3
34558: PPUSH
34559: CALL 34759 0 2
34563: PUSH
34564: LD_VAR 0 11
34568: PUSH
34569: EMPTY
34570: EQUAL
34571: OR
34572: IFFALSE 34517
// if not control in _control then
34574: LD_VAR 0 4
34578: PUSH
34579: LD_VAR 0 12
34583: IN
34584: NOT
34585: IFFALSE 34611
// control := _control [ rand ( 1 , _control ) ] ;
34587: LD_ADDR_VAR 0 4
34591: PUSH
34592: LD_VAR 0 12
34596: PUSH
34597: LD_INT 1
34599: PPUSH
34600: LD_VAR 0 12
34604: PPUSH
34605: CALL_OW 12
34609: ARRAY
34610: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34611: LD_VAR 0 2
34615: PPUSH
34616: LD_VAR 0 5
34620: PPUSH
34621: CALL 34979 0 2
34625: NOT
34626: IFFALSE 34685
// repeat weapon := _weapon [ 1 ] ;
34628: LD_ADDR_VAR 0 5
34632: PUSH
34633: LD_VAR 0 10
34637: PUSH
34638: LD_INT 1
34640: ARRAY
34641: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34642: LD_ADDR_VAR 0 10
34646: PUSH
34647: LD_VAR 0 10
34651: PPUSH
34652: LD_INT 1
34654: PPUSH
34655: CALL_OW 3
34659: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34660: LD_VAR 0 2
34664: PPUSH
34665: LD_VAR 0 5
34669: PPUSH
34670: CALL 34979 0 2
34674: PUSH
34675: LD_VAR 0 10
34679: PUSH
34680: EMPTY
34681: EQUAL
34682: OR
34683: IFFALSE 34628
// result := [ ] ;
34685: LD_ADDR_VAR 0 6
34689: PUSH
34690: EMPTY
34691: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34692: LD_VAR 0 1
34696: PPUSH
34697: LD_VAR 0 2
34701: PPUSH
34702: LD_VAR 0 3
34706: PPUSH
34707: LD_VAR 0 4
34711: PPUSH
34712: LD_VAR 0 5
34716: PPUSH
34717: CALL_OW 448
34721: IFFALSE 34754
// result := [ chassis , engine , control , weapon ] ;
34723: LD_ADDR_VAR 0 6
34727: PUSH
34728: LD_VAR 0 2
34732: PUSH
34733: LD_VAR 0 3
34737: PUSH
34738: LD_VAR 0 4
34742: PUSH
34743: LD_VAR 0 5
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: ST_TO_ADDR
// end ;
34754: LD_VAR 0 6
34758: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34759: LD_INT 0
34761: PPUSH
// if not chassis or not engine then
34762: LD_VAR 0 1
34766: NOT
34767: PUSH
34768: LD_VAR 0 2
34772: NOT
34773: OR
34774: IFFALSE 34778
// exit ;
34776: GO 34974
// case engine of engine_solar :
34778: LD_VAR 0 2
34782: PUSH
34783: LD_INT 2
34785: DOUBLE
34786: EQUAL
34787: IFTRUE 34791
34789: GO 34829
34791: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34792: LD_ADDR_VAR 0 3
34796: PUSH
34797: LD_INT 11
34799: PUSH
34800: LD_INT 12
34802: PUSH
34803: LD_INT 13
34805: PUSH
34806: LD_INT 14
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: LD_INT 2
34814: PUSH
34815: LD_INT 3
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: ST_TO_ADDR
34827: GO 34958
34829: LD_INT 1
34831: DOUBLE
34832: EQUAL
34833: IFTRUE 34837
34835: GO 34899
34837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34838: LD_ADDR_VAR 0 3
34842: PUSH
34843: LD_INT 11
34845: PUSH
34846: LD_INT 12
34848: PUSH
34849: LD_INT 13
34851: PUSH
34852: LD_INT 14
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: LD_INT 3
34863: PUSH
34864: LD_INT 4
34866: PUSH
34867: LD_INT 5
34869: PUSH
34870: LD_INT 21
34872: PUSH
34873: LD_INT 23
34875: PUSH
34876: LD_INT 22
34878: PUSH
34879: LD_INT 24
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: ST_TO_ADDR
34897: GO 34958
34899: LD_INT 3
34901: DOUBLE
34902: EQUAL
34903: IFTRUE 34907
34905: GO 34957
34907: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34908: LD_ADDR_VAR 0 3
34912: PUSH
34913: LD_INT 13
34915: PUSH
34916: LD_INT 14
34918: PUSH
34919: LD_INT 2
34921: PUSH
34922: LD_INT 3
34924: PUSH
34925: LD_INT 4
34927: PUSH
34928: LD_INT 5
34930: PUSH
34931: LD_INT 21
34933: PUSH
34934: LD_INT 22
34936: PUSH
34937: LD_INT 23
34939: PUSH
34940: LD_INT 24
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: ST_TO_ADDR
34955: GO 34958
34957: POP
// result := ( chassis in result ) ;
34958: LD_ADDR_VAR 0 3
34962: PUSH
34963: LD_VAR 0 1
34967: PUSH
34968: LD_VAR 0 3
34972: IN
34973: ST_TO_ADDR
// end ;
34974: LD_VAR 0 3
34978: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34979: LD_INT 0
34981: PPUSH
// if not chassis or not weapon then
34982: LD_VAR 0 1
34986: NOT
34987: PUSH
34988: LD_VAR 0 2
34992: NOT
34993: OR
34994: IFFALSE 34998
// exit ;
34996: GO 36058
// case weapon of us_machine_gun :
34998: LD_VAR 0 2
35002: PUSH
35003: LD_INT 2
35005: DOUBLE
35006: EQUAL
35007: IFTRUE 35011
35009: GO 35041
35011: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35012: LD_ADDR_VAR 0 3
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: LD_INT 3
35025: PUSH
35026: LD_INT 4
35028: PUSH
35029: LD_INT 5
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: ST_TO_ADDR
35039: GO 36042
35041: LD_INT 3
35043: DOUBLE
35044: EQUAL
35045: IFTRUE 35049
35047: GO 35079
35049: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35050: LD_ADDR_VAR 0 3
35054: PUSH
35055: LD_INT 1
35057: PUSH
35058: LD_INT 2
35060: PUSH
35061: LD_INT 3
35063: PUSH
35064: LD_INT 4
35066: PUSH
35067: LD_INT 5
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: ST_TO_ADDR
35077: GO 36042
35079: LD_INT 11
35081: DOUBLE
35082: EQUAL
35083: IFTRUE 35087
35085: GO 35117
35087: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35088: LD_ADDR_VAR 0 3
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: LD_INT 2
35098: PUSH
35099: LD_INT 3
35101: PUSH
35102: LD_INT 4
35104: PUSH
35105: LD_INT 5
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: ST_TO_ADDR
35115: GO 36042
35117: LD_INT 4
35119: DOUBLE
35120: EQUAL
35121: IFTRUE 35125
35123: GO 35151
35125: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35126: LD_ADDR_VAR 0 3
35130: PUSH
35131: LD_INT 2
35133: PUSH
35134: LD_INT 3
35136: PUSH
35137: LD_INT 4
35139: PUSH
35140: LD_INT 5
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: ST_TO_ADDR
35149: GO 36042
35151: LD_INT 5
35153: DOUBLE
35154: EQUAL
35155: IFTRUE 35159
35157: GO 35185
35159: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35160: LD_ADDR_VAR 0 3
35164: PUSH
35165: LD_INT 2
35167: PUSH
35168: LD_INT 3
35170: PUSH
35171: LD_INT 4
35173: PUSH
35174: LD_INT 5
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: ST_TO_ADDR
35183: GO 36042
35185: LD_INT 9
35187: DOUBLE
35188: EQUAL
35189: IFTRUE 35193
35191: GO 35219
35193: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35194: LD_ADDR_VAR 0 3
35198: PUSH
35199: LD_INT 2
35201: PUSH
35202: LD_INT 3
35204: PUSH
35205: LD_INT 4
35207: PUSH
35208: LD_INT 5
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: ST_TO_ADDR
35217: GO 36042
35219: LD_INT 7
35221: DOUBLE
35222: EQUAL
35223: IFTRUE 35227
35225: GO 35253
35227: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35228: LD_ADDR_VAR 0 3
35232: PUSH
35233: LD_INT 2
35235: PUSH
35236: LD_INT 3
35238: PUSH
35239: LD_INT 4
35241: PUSH
35242: LD_INT 5
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: ST_TO_ADDR
35251: GO 36042
35253: LD_INT 12
35255: DOUBLE
35256: EQUAL
35257: IFTRUE 35261
35259: GO 35287
35261: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35262: LD_ADDR_VAR 0 3
35266: PUSH
35267: LD_INT 2
35269: PUSH
35270: LD_INT 3
35272: PUSH
35273: LD_INT 4
35275: PUSH
35276: LD_INT 5
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: ST_TO_ADDR
35285: GO 36042
35287: LD_INT 13
35289: DOUBLE
35290: EQUAL
35291: IFTRUE 35295
35293: GO 35321
35295: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35296: LD_ADDR_VAR 0 3
35300: PUSH
35301: LD_INT 2
35303: PUSH
35304: LD_INT 3
35306: PUSH
35307: LD_INT 4
35309: PUSH
35310: LD_INT 5
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: ST_TO_ADDR
35319: GO 36042
35321: LD_INT 14
35323: DOUBLE
35324: EQUAL
35325: IFTRUE 35329
35327: GO 35347
35329: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35330: LD_ADDR_VAR 0 3
35334: PUSH
35335: LD_INT 4
35337: PUSH
35338: LD_INT 5
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: ST_TO_ADDR
35345: GO 36042
35347: LD_INT 6
35349: DOUBLE
35350: EQUAL
35351: IFTRUE 35355
35353: GO 35373
35355: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35356: LD_ADDR_VAR 0 3
35360: PUSH
35361: LD_INT 4
35363: PUSH
35364: LD_INT 5
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: ST_TO_ADDR
35371: GO 36042
35373: LD_INT 10
35375: DOUBLE
35376: EQUAL
35377: IFTRUE 35381
35379: GO 35399
35381: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35382: LD_ADDR_VAR 0 3
35386: PUSH
35387: LD_INT 4
35389: PUSH
35390: LD_INT 5
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: ST_TO_ADDR
35397: GO 36042
35399: LD_INT 22
35401: DOUBLE
35402: EQUAL
35403: IFTRUE 35407
35405: GO 35433
35407: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35408: LD_ADDR_VAR 0 3
35412: PUSH
35413: LD_INT 11
35415: PUSH
35416: LD_INT 12
35418: PUSH
35419: LD_INT 13
35421: PUSH
35422: LD_INT 14
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: ST_TO_ADDR
35431: GO 36042
35433: LD_INT 23
35435: DOUBLE
35436: EQUAL
35437: IFTRUE 35441
35439: GO 35467
35441: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35442: LD_ADDR_VAR 0 3
35446: PUSH
35447: LD_INT 11
35449: PUSH
35450: LD_INT 12
35452: PUSH
35453: LD_INT 13
35455: PUSH
35456: LD_INT 14
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: ST_TO_ADDR
35465: GO 36042
35467: LD_INT 24
35469: DOUBLE
35470: EQUAL
35471: IFTRUE 35475
35473: GO 35501
35475: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35476: LD_ADDR_VAR 0 3
35480: PUSH
35481: LD_INT 11
35483: PUSH
35484: LD_INT 12
35486: PUSH
35487: LD_INT 13
35489: PUSH
35490: LD_INT 14
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: ST_TO_ADDR
35499: GO 36042
35501: LD_INT 30
35503: DOUBLE
35504: EQUAL
35505: IFTRUE 35509
35507: GO 35535
35509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35510: LD_ADDR_VAR 0 3
35514: PUSH
35515: LD_INT 11
35517: PUSH
35518: LD_INT 12
35520: PUSH
35521: LD_INT 13
35523: PUSH
35524: LD_INT 14
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: ST_TO_ADDR
35533: GO 36042
35535: LD_INT 25
35537: DOUBLE
35538: EQUAL
35539: IFTRUE 35543
35541: GO 35561
35543: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35544: LD_ADDR_VAR 0 3
35548: PUSH
35549: LD_INT 13
35551: PUSH
35552: LD_INT 14
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: ST_TO_ADDR
35559: GO 36042
35561: LD_INT 27
35563: DOUBLE
35564: EQUAL
35565: IFTRUE 35569
35567: GO 35587
35569: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35570: LD_ADDR_VAR 0 3
35574: PUSH
35575: LD_INT 13
35577: PUSH
35578: LD_INT 14
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: ST_TO_ADDR
35585: GO 36042
35587: LD_INT 92
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35595
35593: GO 35621
35595: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35596: LD_ADDR_VAR 0 3
35600: PUSH
35601: LD_INT 11
35603: PUSH
35604: LD_INT 12
35606: PUSH
35607: LD_INT 13
35609: PUSH
35610: LD_INT 14
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: ST_TO_ADDR
35619: GO 36042
35621: LD_INT 28
35623: DOUBLE
35624: EQUAL
35625: IFTRUE 35629
35627: GO 35647
35629: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35630: LD_ADDR_VAR 0 3
35634: PUSH
35635: LD_INT 13
35637: PUSH
35638: LD_INT 14
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: ST_TO_ADDR
35645: GO 36042
35647: LD_INT 29
35649: DOUBLE
35650: EQUAL
35651: IFTRUE 35655
35653: GO 35673
35655: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35656: LD_ADDR_VAR 0 3
35660: PUSH
35661: LD_INT 13
35663: PUSH
35664: LD_INT 14
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: ST_TO_ADDR
35671: GO 36042
35673: LD_INT 31
35675: DOUBLE
35676: EQUAL
35677: IFTRUE 35681
35679: GO 35699
35681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35682: LD_ADDR_VAR 0 3
35686: PUSH
35687: LD_INT 13
35689: PUSH
35690: LD_INT 14
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: ST_TO_ADDR
35697: GO 36042
35699: LD_INT 26
35701: DOUBLE
35702: EQUAL
35703: IFTRUE 35707
35705: GO 35725
35707: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35708: LD_ADDR_VAR 0 3
35712: PUSH
35713: LD_INT 13
35715: PUSH
35716: LD_INT 14
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: ST_TO_ADDR
35723: GO 36042
35725: LD_INT 42
35727: DOUBLE
35728: EQUAL
35729: IFTRUE 35733
35731: GO 35759
35733: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35734: LD_ADDR_VAR 0 3
35738: PUSH
35739: LD_INT 21
35741: PUSH
35742: LD_INT 22
35744: PUSH
35745: LD_INT 23
35747: PUSH
35748: LD_INT 24
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: ST_TO_ADDR
35757: GO 36042
35759: LD_INT 43
35761: DOUBLE
35762: EQUAL
35763: IFTRUE 35767
35765: GO 35793
35767: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35768: LD_ADDR_VAR 0 3
35772: PUSH
35773: LD_INT 21
35775: PUSH
35776: LD_INT 22
35778: PUSH
35779: LD_INT 23
35781: PUSH
35782: LD_INT 24
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: ST_TO_ADDR
35791: GO 36042
35793: LD_INT 44
35795: DOUBLE
35796: EQUAL
35797: IFTRUE 35801
35799: GO 35827
35801: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35802: LD_ADDR_VAR 0 3
35806: PUSH
35807: LD_INT 21
35809: PUSH
35810: LD_INT 22
35812: PUSH
35813: LD_INT 23
35815: PUSH
35816: LD_INT 24
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: ST_TO_ADDR
35825: GO 36042
35827: LD_INT 45
35829: DOUBLE
35830: EQUAL
35831: IFTRUE 35835
35833: GO 35861
35835: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35836: LD_ADDR_VAR 0 3
35840: PUSH
35841: LD_INT 21
35843: PUSH
35844: LD_INT 22
35846: PUSH
35847: LD_INT 23
35849: PUSH
35850: LD_INT 24
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: ST_TO_ADDR
35859: GO 36042
35861: LD_INT 49
35863: DOUBLE
35864: EQUAL
35865: IFTRUE 35869
35867: GO 35895
35869: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35870: LD_ADDR_VAR 0 3
35874: PUSH
35875: LD_INT 21
35877: PUSH
35878: LD_INT 22
35880: PUSH
35881: LD_INT 23
35883: PUSH
35884: LD_INT 24
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: ST_TO_ADDR
35893: GO 36042
35895: LD_INT 51
35897: DOUBLE
35898: EQUAL
35899: IFTRUE 35903
35901: GO 35929
35903: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35904: LD_ADDR_VAR 0 3
35908: PUSH
35909: LD_INT 21
35911: PUSH
35912: LD_INT 22
35914: PUSH
35915: LD_INT 23
35917: PUSH
35918: LD_INT 24
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: ST_TO_ADDR
35927: GO 36042
35929: LD_INT 52
35931: DOUBLE
35932: EQUAL
35933: IFTRUE 35937
35935: GO 35963
35937: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35938: LD_ADDR_VAR 0 3
35942: PUSH
35943: LD_INT 21
35945: PUSH
35946: LD_INT 22
35948: PUSH
35949: LD_INT 23
35951: PUSH
35952: LD_INT 24
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: ST_TO_ADDR
35961: GO 36042
35963: LD_INT 53
35965: DOUBLE
35966: EQUAL
35967: IFTRUE 35971
35969: GO 35989
35971: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35972: LD_ADDR_VAR 0 3
35976: PUSH
35977: LD_INT 23
35979: PUSH
35980: LD_INT 24
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: ST_TO_ADDR
35987: GO 36042
35989: LD_INT 46
35991: DOUBLE
35992: EQUAL
35993: IFTRUE 35997
35995: GO 36015
35997: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35998: LD_ADDR_VAR 0 3
36002: PUSH
36003: LD_INT 23
36005: PUSH
36006: LD_INT 24
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: ST_TO_ADDR
36013: GO 36042
36015: LD_INT 47
36017: DOUBLE
36018: EQUAL
36019: IFTRUE 36023
36021: GO 36041
36023: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36024: LD_ADDR_VAR 0 3
36028: PUSH
36029: LD_INT 23
36031: PUSH
36032: LD_INT 24
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: ST_TO_ADDR
36039: GO 36042
36041: POP
// result := ( chassis in result ) ;
36042: LD_ADDR_VAR 0 3
36046: PUSH
36047: LD_VAR 0 1
36051: PUSH
36052: LD_VAR 0 3
36056: IN
36057: ST_TO_ADDR
// end ;
36058: LD_VAR 0 3
36062: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36063: LD_INT 0
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
36069: PPUSH
36070: PPUSH
36071: PPUSH
// result := array ;
36072: LD_ADDR_VAR 0 5
36076: PUSH
36077: LD_VAR 0 1
36081: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36082: LD_VAR 0 1
36086: NOT
36087: PUSH
36088: LD_VAR 0 2
36092: NOT
36093: OR
36094: PUSH
36095: LD_VAR 0 3
36099: NOT
36100: OR
36101: PUSH
36102: LD_VAR 0 2
36106: PUSH
36107: LD_VAR 0 1
36111: GREATER
36112: OR
36113: PUSH
36114: LD_VAR 0 3
36118: PUSH
36119: LD_VAR 0 1
36123: GREATER
36124: OR
36125: IFFALSE 36129
// exit ;
36127: GO 36425
// if direction then
36129: LD_VAR 0 4
36133: IFFALSE 36197
// begin d := 1 ;
36135: LD_ADDR_VAR 0 9
36139: PUSH
36140: LD_INT 1
36142: ST_TO_ADDR
// if i_from > i_to then
36143: LD_VAR 0 2
36147: PUSH
36148: LD_VAR 0 3
36152: GREATER
36153: IFFALSE 36179
// length := ( array - i_from ) + i_to else
36155: LD_ADDR_VAR 0 11
36159: PUSH
36160: LD_VAR 0 1
36164: PUSH
36165: LD_VAR 0 2
36169: MINUS
36170: PUSH
36171: LD_VAR 0 3
36175: PLUS
36176: ST_TO_ADDR
36177: GO 36195
// length := i_to - i_from ;
36179: LD_ADDR_VAR 0 11
36183: PUSH
36184: LD_VAR 0 3
36188: PUSH
36189: LD_VAR 0 2
36193: MINUS
36194: ST_TO_ADDR
// end else
36195: GO 36258
// begin d := - 1 ;
36197: LD_ADDR_VAR 0 9
36201: PUSH
36202: LD_INT 1
36204: NEG
36205: ST_TO_ADDR
// if i_from > i_to then
36206: LD_VAR 0 2
36210: PUSH
36211: LD_VAR 0 3
36215: GREATER
36216: IFFALSE 36236
// length := i_from - i_to else
36218: LD_ADDR_VAR 0 11
36222: PUSH
36223: LD_VAR 0 2
36227: PUSH
36228: LD_VAR 0 3
36232: MINUS
36233: ST_TO_ADDR
36234: GO 36258
// length := ( array - i_to ) + i_from ;
36236: LD_ADDR_VAR 0 11
36240: PUSH
36241: LD_VAR 0 1
36245: PUSH
36246: LD_VAR 0 3
36250: MINUS
36251: PUSH
36252: LD_VAR 0 2
36256: PLUS
36257: ST_TO_ADDR
// end ; if not length then
36258: LD_VAR 0 11
36262: NOT
36263: IFFALSE 36267
// exit ;
36265: GO 36425
// tmp := array ;
36267: LD_ADDR_VAR 0 10
36271: PUSH
36272: LD_VAR 0 1
36276: ST_TO_ADDR
// for i = 1 to length do
36277: LD_ADDR_VAR 0 6
36281: PUSH
36282: DOUBLE
36283: LD_INT 1
36285: DEC
36286: ST_TO_ADDR
36287: LD_VAR 0 11
36291: PUSH
36292: FOR_TO
36293: IFFALSE 36413
// begin for j = 1 to array do
36295: LD_ADDR_VAR 0 7
36299: PUSH
36300: DOUBLE
36301: LD_INT 1
36303: DEC
36304: ST_TO_ADDR
36305: LD_VAR 0 1
36309: PUSH
36310: FOR_TO
36311: IFFALSE 36399
// begin k := j + d ;
36313: LD_ADDR_VAR 0 8
36317: PUSH
36318: LD_VAR 0 7
36322: PUSH
36323: LD_VAR 0 9
36327: PLUS
36328: ST_TO_ADDR
// if k > array then
36329: LD_VAR 0 8
36333: PUSH
36334: LD_VAR 0 1
36338: GREATER
36339: IFFALSE 36349
// k := 1 ;
36341: LD_ADDR_VAR 0 8
36345: PUSH
36346: LD_INT 1
36348: ST_TO_ADDR
// if not k then
36349: LD_VAR 0 8
36353: NOT
36354: IFFALSE 36366
// k := array ;
36356: LD_ADDR_VAR 0 8
36360: PUSH
36361: LD_VAR 0 1
36365: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36366: LD_ADDR_VAR 0 10
36370: PUSH
36371: LD_VAR 0 10
36375: PPUSH
36376: LD_VAR 0 8
36380: PPUSH
36381: LD_VAR 0 1
36385: PUSH
36386: LD_VAR 0 7
36390: ARRAY
36391: PPUSH
36392: CALL_OW 1
36396: ST_TO_ADDR
// end ;
36397: GO 36310
36399: POP
36400: POP
// array := tmp ;
36401: LD_ADDR_VAR 0 1
36405: PUSH
36406: LD_VAR 0 10
36410: ST_TO_ADDR
// end ;
36411: GO 36292
36413: POP
36414: POP
// result := array ;
36415: LD_ADDR_VAR 0 5
36419: PUSH
36420: LD_VAR 0 1
36424: ST_TO_ADDR
// end ;
36425: LD_VAR 0 5
36429: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36430: LD_INT 0
36432: PPUSH
36433: PPUSH
// result := 0 ;
36434: LD_ADDR_VAR 0 3
36438: PUSH
36439: LD_INT 0
36441: ST_TO_ADDR
// if not array or not value in array then
36442: LD_VAR 0 1
36446: NOT
36447: PUSH
36448: LD_VAR 0 2
36452: PUSH
36453: LD_VAR 0 1
36457: IN
36458: NOT
36459: OR
36460: IFFALSE 36464
// exit ;
36462: GO 36518
// for i = 1 to array do
36464: LD_ADDR_VAR 0 4
36468: PUSH
36469: DOUBLE
36470: LD_INT 1
36472: DEC
36473: ST_TO_ADDR
36474: LD_VAR 0 1
36478: PUSH
36479: FOR_TO
36480: IFFALSE 36516
// if value = array [ i ] then
36482: LD_VAR 0 2
36486: PUSH
36487: LD_VAR 0 1
36491: PUSH
36492: LD_VAR 0 4
36496: ARRAY
36497: EQUAL
36498: IFFALSE 36514
// begin result := i ;
36500: LD_ADDR_VAR 0 3
36504: PUSH
36505: LD_VAR 0 4
36509: ST_TO_ADDR
// exit ;
36510: POP
36511: POP
36512: GO 36518
// end ;
36514: GO 36479
36516: POP
36517: POP
// end ;
36518: LD_VAR 0 3
36522: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36523: LD_INT 0
36525: PPUSH
// vc_chassis := chassis ;
36526: LD_ADDR_OWVAR 37
36530: PUSH
36531: LD_VAR 0 1
36535: ST_TO_ADDR
// vc_engine := engine ;
36536: LD_ADDR_OWVAR 39
36540: PUSH
36541: LD_VAR 0 2
36545: ST_TO_ADDR
// vc_control := control ;
36546: LD_ADDR_OWVAR 38
36550: PUSH
36551: LD_VAR 0 3
36555: ST_TO_ADDR
// vc_weapon := weapon ;
36556: LD_ADDR_OWVAR 40
36560: PUSH
36561: LD_VAR 0 4
36565: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36566: LD_ADDR_OWVAR 41
36570: PUSH
36571: LD_VAR 0 5
36575: ST_TO_ADDR
// end ;
36576: LD_VAR 0 6
36580: RET
// export function WantPlant ( unit ) ; var task ; begin
36581: LD_INT 0
36583: PPUSH
36584: PPUSH
// result := false ;
36585: LD_ADDR_VAR 0 2
36589: PUSH
36590: LD_INT 0
36592: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36593: LD_ADDR_VAR 0 3
36597: PUSH
36598: LD_VAR 0 1
36602: PPUSH
36603: CALL_OW 437
36607: ST_TO_ADDR
// if task then
36608: LD_VAR 0 3
36612: IFFALSE 36640
// if task [ 1 ] [ 1 ] = p then
36614: LD_VAR 0 3
36618: PUSH
36619: LD_INT 1
36621: ARRAY
36622: PUSH
36623: LD_INT 1
36625: ARRAY
36626: PUSH
36627: LD_STRING p
36629: EQUAL
36630: IFFALSE 36640
// result := true ;
36632: LD_ADDR_VAR 0 2
36636: PUSH
36637: LD_INT 1
36639: ST_TO_ADDR
// end ;
36640: LD_VAR 0 2
36644: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36645: LD_INT 0
36647: PPUSH
36648: PPUSH
36649: PPUSH
36650: PPUSH
// if pos < 1 then
36651: LD_VAR 0 2
36655: PUSH
36656: LD_INT 1
36658: LESS
36659: IFFALSE 36663
// exit ;
36661: GO 36966
// if pos = 1 then
36663: LD_VAR 0 2
36667: PUSH
36668: LD_INT 1
36670: EQUAL
36671: IFFALSE 36704
// result := Replace ( arr , pos [ 1 ] , value ) else
36673: LD_ADDR_VAR 0 4
36677: PUSH
36678: LD_VAR 0 1
36682: PPUSH
36683: LD_VAR 0 2
36687: PUSH
36688: LD_INT 1
36690: ARRAY
36691: PPUSH
36692: LD_VAR 0 3
36696: PPUSH
36697: CALL_OW 1
36701: ST_TO_ADDR
36702: GO 36966
// begin tmp := arr ;
36704: LD_ADDR_VAR 0 6
36708: PUSH
36709: LD_VAR 0 1
36713: ST_TO_ADDR
// s_arr := [ tmp ] ;
36714: LD_ADDR_VAR 0 7
36718: PUSH
36719: LD_VAR 0 6
36723: PUSH
36724: EMPTY
36725: LIST
36726: ST_TO_ADDR
// for i = 1 to pos - 1 do
36727: LD_ADDR_VAR 0 5
36731: PUSH
36732: DOUBLE
36733: LD_INT 1
36735: DEC
36736: ST_TO_ADDR
36737: LD_VAR 0 2
36741: PUSH
36742: LD_INT 1
36744: MINUS
36745: PUSH
36746: FOR_TO
36747: IFFALSE 36792
// begin tmp := tmp [ pos [ i ] ] ;
36749: LD_ADDR_VAR 0 6
36753: PUSH
36754: LD_VAR 0 6
36758: PUSH
36759: LD_VAR 0 2
36763: PUSH
36764: LD_VAR 0 5
36768: ARRAY
36769: ARRAY
36770: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36771: LD_ADDR_VAR 0 7
36775: PUSH
36776: LD_VAR 0 7
36780: PUSH
36781: LD_VAR 0 6
36785: PUSH
36786: EMPTY
36787: LIST
36788: ADD
36789: ST_TO_ADDR
// end ;
36790: GO 36746
36792: POP
36793: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36794: LD_ADDR_VAR 0 6
36798: PUSH
36799: LD_VAR 0 6
36803: PPUSH
36804: LD_VAR 0 2
36808: PUSH
36809: LD_VAR 0 2
36813: ARRAY
36814: PPUSH
36815: LD_VAR 0 3
36819: PPUSH
36820: CALL_OW 1
36824: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36825: LD_ADDR_VAR 0 7
36829: PUSH
36830: LD_VAR 0 7
36834: PPUSH
36835: LD_VAR 0 7
36839: PPUSH
36840: LD_VAR 0 6
36844: PPUSH
36845: CALL_OW 1
36849: ST_TO_ADDR
// for i = s_arr downto 2 do
36850: LD_ADDR_VAR 0 5
36854: PUSH
36855: DOUBLE
36856: LD_VAR 0 7
36860: INC
36861: ST_TO_ADDR
36862: LD_INT 2
36864: PUSH
36865: FOR_DOWNTO
36866: IFFALSE 36950
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36868: LD_ADDR_VAR 0 6
36872: PUSH
36873: LD_VAR 0 7
36877: PUSH
36878: LD_VAR 0 5
36882: PUSH
36883: LD_INT 1
36885: MINUS
36886: ARRAY
36887: PPUSH
36888: LD_VAR 0 2
36892: PUSH
36893: LD_VAR 0 5
36897: PUSH
36898: LD_INT 1
36900: MINUS
36901: ARRAY
36902: PPUSH
36903: LD_VAR 0 7
36907: PUSH
36908: LD_VAR 0 5
36912: ARRAY
36913: PPUSH
36914: CALL_OW 1
36918: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36919: LD_ADDR_VAR 0 7
36923: PUSH
36924: LD_VAR 0 7
36928: PPUSH
36929: LD_VAR 0 5
36933: PUSH
36934: LD_INT 1
36936: MINUS
36937: PPUSH
36938: LD_VAR 0 6
36942: PPUSH
36943: CALL_OW 1
36947: ST_TO_ADDR
// end ;
36948: GO 36865
36950: POP
36951: POP
// result := s_arr [ 1 ] ;
36952: LD_ADDR_VAR 0 4
36956: PUSH
36957: LD_VAR 0 7
36961: PUSH
36962: LD_INT 1
36964: ARRAY
36965: ST_TO_ADDR
// end ; end ;
36966: LD_VAR 0 4
36970: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36971: LD_INT 0
36973: PPUSH
36974: PPUSH
// if not list then
36975: LD_VAR 0 1
36979: NOT
36980: IFFALSE 36984
// exit ;
36982: GO 37075
// i := list [ pos1 ] ;
36984: LD_ADDR_VAR 0 5
36988: PUSH
36989: LD_VAR 0 1
36993: PUSH
36994: LD_VAR 0 2
36998: ARRAY
36999: ST_TO_ADDR
// if not i then
37000: LD_VAR 0 5
37004: NOT
37005: IFFALSE 37009
// exit ;
37007: GO 37075
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37009: LD_ADDR_VAR 0 1
37013: PUSH
37014: LD_VAR 0 1
37018: PPUSH
37019: LD_VAR 0 2
37023: PPUSH
37024: LD_VAR 0 1
37028: PUSH
37029: LD_VAR 0 3
37033: ARRAY
37034: PPUSH
37035: CALL_OW 1
37039: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37040: LD_ADDR_VAR 0 1
37044: PUSH
37045: LD_VAR 0 1
37049: PPUSH
37050: LD_VAR 0 3
37054: PPUSH
37055: LD_VAR 0 5
37059: PPUSH
37060: CALL_OW 1
37064: ST_TO_ADDR
// result := list ;
37065: LD_ADDR_VAR 0 4
37069: PUSH
37070: LD_VAR 0 1
37074: ST_TO_ADDR
// end ;
37075: LD_VAR 0 4
37079: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37080: LD_INT 0
37082: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37083: LD_ADDR_VAR 0 5
37087: PUSH
37088: LD_VAR 0 1
37092: PPUSH
37093: CALL_OW 250
37097: PPUSH
37098: LD_VAR 0 1
37102: PPUSH
37103: CALL_OW 251
37107: PPUSH
37108: LD_VAR 0 2
37112: PPUSH
37113: LD_VAR 0 3
37117: PPUSH
37118: LD_VAR 0 4
37122: PPUSH
37123: CALL 37501 0 5
37127: ST_TO_ADDR
// end ;
37128: LD_VAR 0 5
37132: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37133: LD_INT 0
37135: PPUSH
37136: PPUSH
37137: PPUSH
37138: PPUSH
// if not list or not unit then
37139: LD_VAR 0 2
37143: NOT
37144: PUSH
37145: LD_VAR 0 1
37149: NOT
37150: OR
37151: IFFALSE 37155
// exit ;
37153: GO 37496
// result := [ ] ;
37155: LD_ADDR_VAR 0 5
37159: PUSH
37160: EMPTY
37161: ST_TO_ADDR
// for i in list do
37162: LD_ADDR_VAR 0 6
37166: PUSH
37167: LD_VAR 0 2
37171: PUSH
37172: FOR_IN
37173: IFFALSE 37391
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37175: LD_ADDR_VAR 0 8
37179: PUSH
37180: LD_VAR 0 1
37184: PPUSH
37185: LD_VAR 0 6
37189: PUSH
37190: LD_INT 1
37192: ARRAY
37193: PPUSH
37194: LD_VAR 0 6
37198: PUSH
37199: LD_INT 2
37201: ARRAY
37202: PPUSH
37203: CALL_OW 297
37207: ST_TO_ADDR
// if not Count ( result ) then
37208: LD_VAR 0 5
37212: PPUSH
37213: CALL 33785 0 1
37217: NOT
37218: IFFALSE 37251
// begin result := Join ( result , [ i , tmp ] ) ;
37220: LD_ADDR_VAR 0 5
37224: PUSH
37225: LD_VAR 0 5
37229: PPUSH
37230: LD_VAR 0 6
37234: PUSH
37235: LD_VAR 0 8
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PPUSH
37244: CALL 69374 0 2
37248: ST_TO_ADDR
// continue ;
37249: GO 37172
// end ; if result [ result ] [ 2 ] <= tmp then
37251: LD_VAR 0 5
37255: PUSH
37256: LD_VAR 0 5
37260: ARRAY
37261: PUSH
37262: LD_INT 2
37264: ARRAY
37265: PUSH
37266: LD_VAR 0 8
37270: LESSEQUAL
37271: IFFALSE 37304
// result := Join ( result , [ i , tmp ] ) else
37273: LD_ADDR_VAR 0 5
37277: PUSH
37278: LD_VAR 0 5
37282: PPUSH
37283: LD_VAR 0 6
37287: PUSH
37288: LD_VAR 0 8
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PPUSH
37297: CALL 69374 0 2
37301: ST_TO_ADDR
37302: GO 37389
// begin for j := 1 to Count ( result ) do
37304: LD_ADDR_VAR 0 7
37308: PUSH
37309: DOUBLE
37310: LD_INT 1
37312: DEC
37313: ST_TO_ADDR
37314: LD_VAR 0 5
37318: PPUSH
37319: CALL 33785 0 1
37323: PUSH
37324: FOR_TO
37325: IFFALSE 37387
// begin if tmp < result [ j ] [ 2 ] then
37327: LD_VAR 0 8
37331: PUSH
37332: LD_VAR 0 5
37336: PUSH
37337: LD_VAR 0 7
37341: ARRAY
37342: PUSH
37343: LD_INT 2
37345: ARRAY
37346: LESS
37347: IFFALSE 37385
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37349: LD_ADDR_VAR 0 5
37353: PUSH
37354: LD_VAR 0 5
37358: PPUSH
37359: LD_VAR 0 7
37363: PPUSH
37364: LD_VAR 0 6
37368: PUSH
37369: LD_VAR 0 8
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PPUSH
37378: CALL_OW 2
37382: ST_TO_ADDR
// break ;
37383: GO 37387
// end ; end ;
37385: GO 37324
37387: POP
37388: POP
// end ; end ;
37389: GO 37172
37391: POP
37392: POP
// if result and not asc then
37393: LD_VAR 0 5
37397: PUSH
37398: LD_VAR 0 3
37402: NOT
37403: AND
37404: IFFALSE 37421
// result := ReverseArray ( result ) ;
37406: LD_ADDR_VAR 0 5
37410: PUSH
37411: LD_VAR 0 5
37415: PPUSH
37416: CALL 64661 0 1
37420: ST_TO_ADDR
// tmp := [ ] ;
37421: LD_ADDR_VAR 0 8
37425: PUSH
37426: EMPTY
37427: ST_TO_ADDR
// if mode then
37428: LD_VAR 0 4
37432: IFFALSE 37496
// begin for i := 1 to result do
37434: LD_ADDR_VAR 0 6
37438: PUSH
37439: DOUBLE
37440: LD_INT 1
37442: DEC
37443: ST_TO_ADDR
37444: LD_VAR 0 5
37448: PUSH
37449: FOR_TO
37450: IFFALSE 37484
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37452: LD_ADDR_VAR 0 8
37456: PUSH
37457: LD_VAR 0 8
37461: PPUSH
37462: LD_VAR 0 5
37466: PUSH
37467: LD_VAR 0 6
37471: ARRAY
37472: PUSH
37473: LD_INT 1
37475: ARRAY
37476: PPUSH
37477: CALL 69374 0 2
37481: ST_TO_ADDR
37482: GO 37449
37484: POP
37485: POP
// result := tmp ;
37486: LD_ADDR_VAR 0 5
37490: PUSH
37491: LD_VAR 0 8
37495: ST_TO_ADDR
// end ; end ;
37496: LD_VAR 0 5
37500: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37501: LD_INT 0
37503: PPUSH
37504: PPUSH
37505: PPUSH
37506: PPUSH
// if not list then
37507: LD_VAR 0 3
37511: NOT
37512: IFFALSE 37516
// exit ;
37514: GO 37904
// result := [ ] ;
37516: LD_ADDR_VAR 0 6
37520: PUSH
37521: EMPTY
37522: ST_TO_ADDR
// for i in list do
37523: LD_ADDR_VAR 0 7
37527: PUSH
37528: LD_VAR 0 3
37532: PUSH
37533: FOR_IN
37534: IFFALSE 37736
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37536: LD_ADDR_VAR 0 9
37540: PUSH
37541: LD_VAR 0 7
37545: PPUSH
37546: LD_VAR 0 1
37550: PPUSH
37551: LD_VAR 0 2
37555: PPUSH
37556: CALL_OW 297
37560: ST_TO_ADDR
// if not result then
37561: LD_VAR 0 6
37565: NOT
37566: IFFALSE 37592
// result := [ [ i , tmp ] ] else
37568: LD_ADDR_VAR 0 6
37572: PUSH
37573: LD_VAR 0 7
37577: PUSH
37578: LD_VAR 0 9
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: EMPTY
37588: LIST
37589: ST_TO_ADDR
37590: GO 37734
// begin if result [ result ] [ 2 ] < tmp then
37592: LD_VAR 0 6
37596: PUSH
37597: LD_VAR 0 6
37601: ARRAY
37602: PUSH
37603: LD_INT 2
37605: ARRAY
37606: PUSH
37607: LD_VAR 0 9
37611: LESS
37612: IFFALSE 37654
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37614: LD_ADDR_VAR 0 6
37618: PUSH
37619: LD_VAR 0 6
37623: PPUSH
37624: LD_VAR 0 6
37628: PUSH
37629: LD_INT 1
37631: PLUS
37632: PPUSH
37633: LD_VAR 0 7
37637: PUSH
37638: LD_VAR 0 9
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PPUSH
37647: CALL_OW 2
37651: ST_TO_ADDR
37652: GO 37734
// for j = 1 to result do
37654: LD_ADDR_VAR 0 8
37658: PUSH
37659: DOUBLE
37660: LD_INT 1
37662: DEC
37663: ST_TO_ADDR
37664: LD_VAR 0 6
37668: PUSH
37669: FOR_TO
37670: IFFALSE 37732
// begin if tmp < result [ j ] [ 2 ] then
37672: LD_VAR 0 9
37676: PUSH
37677: LD_VAR 0 6
37681: PUSH
37682: LD_VAR 0 8
37686: ARRAY
37687: PUSH
37688: LD_INT 2
37690: ARRAY
37691: LESS
37692: IFFALSE 37730
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37694: LD_ADDR_VAR 0 6
37698: PUSH
37699: LD_VAR 0 6
37703: PPUSH
37704: LD_VAR 0 8
37708: PPUSH
37709: LD_VAR 0 7
37713: PUSH
37714: LD_VAR 0 9
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PPUSH
37723: CALL_OW 2
37727: ST_TO_ADDR
// break ;
37728: GO 37732
// end ; end ;
37730: GO 37669
37732: POP
37733: POP
// end ; end ;
37734: GO 37533
37736: POP
37737: POP
// if result and not asc then
37738: LD_VAR 0 6
37742: PUSH
37743: LD_VAR 0 4
37747: NOT
37748: AND
37749: IFFALSE 37824
// begin tmp := result ;
37751: LD_ADDR_VAR 0 9
37755: PUSH
37756: LD_VAR 0 6
37760: ST_TO_ADDR
// for i = tmp downto 1 do
37761: LD_ADDR_VAR 0 7
37765: PUSH
37766: DOUBLE
37767: LD_VAR 0 9
37771: INC
37772: ST_TO_ADDR
37773: LD_INT 1
37775: PUSH
37776: FOR_DOWNTO
37777: IFFALSE 37822
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37779: LD_ADDR_VAR 0 6
37783: PUSH
37784: LD_VAR 0 6
37788: PPUSH
37789: LD_VAR 0 9
37793: PUSH
37794: LD_VAR 0 7
37798: MINUS
37799: PUSH
37800: LD_INT 1
37802: PLUS
37803: PPUSH
37804: LD_VAR 0 9
37808: PUSH
37809: LD_VAR 0 7
37813: ARRAY
37814: PPUSH
37815: CALL_OW 1
37819: ST_TO_ADDR
37820: GO 37776
37822: POP
37823: POP
// end ; tmp := [ ] ;
37824: LD_ADDR_VAR 0 9
37828: PUSH
37829: EMPTY
37830: ST_TO_ADDR
// if mode then
37831: LD_VAR 0 5
37835: IFFALSE 37904
// begin for i = 1 to result do
37837: LD_ADDR_VAR 0 7
37841: PUSH
37842: DOUBLE
37843: LD_INT 1
37845: DEC
37846: ST_TO_ADDR
37847: LD_VAR 0 6
37851: PUSH
37852: FOR_TO
37853: IFFALSE 37892
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37855: LD_ADDR_VAR 0 9
37859: PUSH
37860: LD_VAR 0 9
37864: PPUSH
37865: LD_VAR 0 7
37869: PPUSH
37870: LD_VAR 0 6
37874: PUSH
37875: LD_VAR 0 7
37879: ARRAY
37880: PUSH
37881: LD_INT 1
37883: ARRAY
37884: PPUSH
37885: CALL_OW 1
37889: ST_TO_ADDR
37890: GO 37852
37892: POP
37893: POP
// result := tmp ;
37894: LD_ADDR_VAR 0 6
37898: PUSH
37899: LD_VAR 0 9
37903: ST_TO_ADDR
// end ; end ;
37904: LD_VAR 0 6
37908: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37909: LD_INT 0
37911: PPUSH
37912: PPUSH
37913: PPUSH
37914: PPUSH
37915: PPUSH
37916: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37917: LD_ADDR_VAR 0 5
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: LD_INT 0
37930: PUSH
37931: EMPTY
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: ST_TO_ADDR
// if not x or not y then
37939: LD_VAR 0 2
37943: NOT
37944: PUSH
37945: LD_VAR 0 3
37949: NOT
37950: OR
37951: IFFALSE 37955
// exit ;
37953: GO 39605
// if not range then
37955: LD_VAR 0 4
37959: NOT
37960: IFFALSE 37970
// range := 10 ;
37962: LD_ADDR_VAR 0 4
37966: PUSH
37967: LD_INT 10
37969: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37970: LD_ADDR_VAR 0 8
37974: PUSH
37975: LD_INT 81
37977: PUSH
37978: LD_VAR 0 1
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 92
37989: PUSH
37990: LD_VAR 0 2
37994: PUSH
37995: LD_VAR 0 3
37999: PUSH
38000: LD_VAR 0 4
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 3
38013: PUSH
38014: LD_INT 21
38016: PUSH
38017: LD_INT 3
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: LIST
38032: PPUSH
38033: CALL_OW 69
38037: ST_TO_ADDR
// if not tmp then
38038: LD_VAR 0 8
38042: NOT
38043: IFFALSE 38047
// exit ;
38045: GO 39605
// for i in tmp do
38047: LD_ADDR_VAR 0 6
38051: PUSH
38052: LD_VAR 0 8
38056: PUSH
38057: FOR_IN
38058: IFFALSE 39580
// begin points := [ 0 , 0 , 0 ] ;
38060: LD_ADDR_VAR 0 9
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: LD_INT 0
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: LIST
38078: ST_TO_ADDR
// bpoints := 1 ;
38079: LD_ADDR_VAR 0 10
38083: PUSH
38084: LD_INT 1
38086: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38087: LD_VAR 0 6
38091: PPUSH
38092: CALL_OW 247
38096: PUSH
38097: LD_INT 1
38099: DOUBLE
38100: EQUAL
38101: IFTRUE 38105
38103: GO 38683
38105: POP
// begin if GetClass ( i ) = 1 then
38106: LD_VAR 0 6
38110: PPUSH
38111: CALL_OW 257
38115: PUSH
38116: LD_INT 1
38118: EQUAL
38119: IFFALSE 38140
// points := [ 10 , 5 , 3 ] ;
38121: LD_ADDR_VAR 0 9
38125: PUSH
38126: LD_INT 10
38128: PUSH
38129: LD_INT 5
38131: PUSH
38132: LD_INT 3
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: LIST
38139: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38140: LD_VAR 0 6
38144: PPUSH
38145: CALL_OW 257
38149: PUSH
38150: LD_INT 2
38152: PUSH
38153: LD_INT 3
38155: PUSH
38156: LD_INT 4
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: LIST
38163: IN
38164: IFFALSE 38185
// points := [ 3 , 2 , 1 ] ;
38166: LD_ADDR_VAR 0 9
38170: PUSH
38171: LD_INT 3
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: LIST
38184: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38185: LD_VAR 0 6
38189: PPUSH
38190: CALL_OW 257
38194: PUSH
38195: LD_INT 5
38197: EQUAL
38198: IFFALSE 38219
// points := [ 130 , 5 , 2 ] ;
38200: LD_ADDR_VAR 0 9
38204: PUSH
38205: LD_INT 130
38207: PUSH
38208: LD_INT 5
38210: PUSH
38211: LD_INT 2
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: LIST
38218: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38219: LD_VAR 0 6
38223: PPUSH
38224: CALL_OW 257
38228: PUSH
38229: LD_INT 8
38231: EQUAL
38232: IFFALSE 38253
// points := [ 35 , 35 , 30 ] ;
38234: LD_ADDR_VAR 0 9
38238: PUSH
38239: LD_INT 35
38241: PUSH
38242: LD_INT 35
38244: PUSH
38245: LD_INT 30
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: LIST
38252: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38253: LD_VAR 0 6
38257: PPUSH
38258: CALL_OW 257
38262: PUSH
38263: LD_INT 9
38265: EQUAL
38266: IFFALSE 38287
// points := [ 20 , 55 , 40 ] ;
38268: LD_ADDR_VAR 0 9
38272: PUSH
38273: LD_INT 20
38275: PUSH
38276: LD_INT 55
38278: PUSH
38279: LD_INT 40
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: LIST
38286: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38287: LD_VAR 0 6
38291: PPUSH
38292: CALL_OW 257
38296: PUSH
38297: LD_INT 12
38299: PUSH
38300: LD_INT 16
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: IN
38307: IFFALSE 38328
// points := [ 5 , 3 , 2 ] ;
38309: LD_ADDR_VAR 0 9
38313: PUSH
38314: LD_INT 5
38316: PUSH
38317: LD_INT 3
38319: PUSH
38320: LD_INT 2
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: LIST
38327: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38328: LD_VAR 0 6
38332: PPUSH
38333: CALL_OW 257
38337: PUSH
38338: LD_INT 17
38340: EQUAL
38341: IFFALSE 38362
// points := [ 100 , 50 , 75 ] ;
38343: LD_ADDR_VAR 0 9
38347: PUSH
38348: LD_INT 100
38350: PUSH
38351: LD_INT 50
38353: PUSH
38354: LD_INT 75
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: LIST
38361: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38362: LD_VAR 0 6
38366: PPUSH
38367: CALL_OW 257
38371: PUSH
38372: LD_INT 15
38374: EQUAL
38375: IFFALSE 38396
// points := [ 10 , 5 , 3 ] ;
38377: LD_ADDR_VAR 0 9
38381: PUSH
38382: LD_INT 10
38384: PUSH
38385: LD_INT 5
38387: PUSH
38388: LD_INT 3
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38396: LD_VAR 0 6
38400: PPUSH
38401: CALL_OW 257
38405: PUSH
38406: LD_INT 14
38408: EQUAL
38409: IFFALSE 38430
// points := [ 10 , 0 , 0 ] ;
38411: LD_ADDR_VAR 0 9
38415: PUSH
38416: LD_INT 10
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: LIST
38429: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38430: LD_VAR 0 6
38434: PPUSH
38435: CALL_OW 257
38439: PUSH
38440: LD_INT 11
38442: EQUAL
38443: IFFALSE 38464
// points := [ 30 , 10 , 5 ] ;
38445: LD_ADDR_VAR 0 9
38449: PUSH
38450: LD_INT 30
38452: PUSH
38453: LD_INT 10
38455: PUSH
38456: LD_INT 5
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: LIST
38463: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38464: LD_VAR 0 1
38468: PPUSH
38469: LD_INT 5
38471: PPUSH
38472: CALL_OW 321
38476: PUSH
38477: LD_INT 2
38479: EQUAL
38480: IFFALSE 38497
// bpoints := bpoints * 1.8 ;
38482: LD_ADDR_VAR 0 10
38486: PUSH
38487: LD_VAR 0 10
38491: PUSH
38492: LD_REAL  1.80000000000000E+0000
38495: MUL
38496: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38497: LD_VAR 0 6
38501: PPUSH
38502: CALL_OW 257
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: LD_INT 2
38512: PUSH
38513: LD_INT 3
38515: PUSH
38516: LD_INT 4
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: IN
38525: PUSH
38526: LD_VAR 0 1
38530: PPUSH
38531: LD_INT 51
38533: PPUSH
38534: CALL_OW 321
38538: PUSH
38539: LD_INT 2
38541: EQUAL
38542: AND
38543: IFFALSE 38560
// bpoints := bpoints * 1.2 ;
38545: LD_ADDR_VAR 0 10
38549: PUSH
38550: LD_VAR 0 10
38554: PUSH
38555: LD_REAL  1.20000000000000E+0000
38558: MUL
38559: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38560: LD_VAR 0 6
38564: PPUSH
38565: CALL_OW 257
38569: PUSH
38570: LD_INT 5
38572: PUSH
38573: LD_INT 7
38575: PUSH
38576: LD_INT 9
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: LIST
38583: IN
38584: PUSH
38585: LD_VAR 0 1
38589: PPUSH
38590: LD_INT 52
38592: PPUSH
38593: CALL_OW 321
38597: PUSH
38598: LD_INT 2
38600: EQUAL
38601: AND
38602: IFFALSE 38619
// bpoints := bpoints * 1.5 ;
38604: LD_ADDR_VAR 0 10
38608: PUSH
38609: LD_VAR 0 10
38613: PUSH
38614: LD_REAL  1.50000000000000E+0000
38617: MUL
38618: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38619: LD_VAR 0 1
38623: PPUSH
38624: LD_INT 66
38626: PPUSH
38627: CALL_OW 321
38631: PUSH
38632: LD_INT 2
38634: EQUAL
38635: IFFALSE 38652
// bpoints := bpoints * 1.1 ;
38637: LD_ADDR_VAR 0 10
38641: PUSH
38642: LD_VAR 0 10
38646: PUSH
38647: LD_REAL  1.10000000000000E+0000
38650: MUL
38651: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38652: LD_ADDR_VAR 0 10
38656: PUSH
38657: LD_VAR 0 10
38661: PUSH
38662: LD_VAR 0 6
38666: PPUSH
38667: LD_INT 1
38669: PPUSH
38670: CALL_OW 259
38674: PUSH
38675: LD_REAL  1.15000000000000E+0000
38678: MUL
38679: MUL
38680: ST_TO_ADDR
// end ; unit_vehicle :
38681: GO 39509
38683: LD_INT 2
38685: DOUBLE
38686: EQUAL
38687: IFTRUE 38691
38689: GO 39497
38691: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38692: LD_VAR 0 6
38696: PPUSH
38697: CALL_OW 264
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: LD_INT 42
38707: PUSH
38708: LD_INT 24
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: LIST
38715: IN
38716: IFFALSE 38737
// points := [ 25 , 5 , 3 ] ;
38718: LD_ADDR_VAR 0 9
38722: PUSH
38723: LD_INT 25
38725: PUSH
38726: LD_INT 5
38728: PUSH
38729: LD_INT 3
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: LIST
38736: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38737: LD_VAR 0 6
38741: PPUSH
38742: CALL_OW 264
38746: PUSH
38747: LD_INT 4
38749: PUSH
38750: LD_INT 43
38752: PUSH
38753: LD_INT 25
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: LIST
38760: IN
38761: IFFALSE 38782
// points := [ 40 , 15 , 5 ] ;
38763: LD_ADDR_VAR 0 9
38767: PUSH
38768: LD_INT 40
38770: PUSH
38771: LD_INT 15
38773: PUSH
38774: LD_INT 5
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38782: LD_VAR 0 6
38786: PPUSH
38787: CALL_OW 264
38791: PUSH
38792: LD_INT 3
38794: PUSH
38795: LD_INT 23
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: IN
38802: IFFALSE 38823
// points := [ 7 , 25 , 8 ] ;
38804: LD_ADDR_VAR 0 9
38808: PUSH
38809: LD_INT 7
38811: PUSH
38812: LD_INT 25
38814: PUSH
38815: LD_INT 8
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: LIST
38822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38823: LD_VAR 0 6
38827: PPUSH
38828: CALL_OW 264
38832: PUSH
38833: LD_INT 5
38835: PUSH
38836: LD_INT 27
38838: PUSH
38839: LD_INT 44
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: IN
38847: IFFALSE 38868
// points := [ 14 , 50 , 16 ] ;
38849: LD_ADDR_VAR 0 9
38853: PUSH
38854: LD_INT 14
38856: PUSH
38857: LD_INT 50
38859: PUSH
38860: LD_INT 16
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: LIST
38867: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38868: LD_VAR 0 6
38872: PPUSH
38873: CALL_OW 264
38877: PUSH
38878: LD_INT 6
38880: PUSH
38881: LD_INT 46
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: IN
38888: IFFALSE 38909
// points := [ 32 , 120 , 70 ] ;
38890: LD_ADDR_VAR 0 9
38894: PUSH
38895: LD_INT 32
38897: PUSH
38898: LD_INT 120
38900: PUSH
38901: LD_INT 70
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38909: LD_VAR 0 6
38913: PPUSH
38914: CALL_OW 264
38918: PUSH
38919: LD_INT 7
38921: PUSH
38922: LD_INT 28
38924: PUSH
38925: LD_INT 45
38927: PUSH
38928: LD_INT 92
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: IN
38937: IFFALSE 38958
// points := [ 35 , 20 , 45 ] ;
38939: LD_ADDR_VAR 0 9
38943: PUSH
38944: LD_INT 35
38946: PUSH
38947: LD_INT 20
38949: PUSH
38950: LD_INT 45
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: LIST
38957: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38958: LD_VAR 0 6
38962: PPUSH
38963: CALL_OW 264
38967: PUSH
38968: LD_INT 47
38970: PUSH
38971: EMPTY
38972: LIST
38973: IN
38974: IFFALSE 38995
// points := [ 67 , 45 , 75 ] ;
38976: LD_ADDR_VAR 0 9
38980: PUSH
38981: LD_INT 67
38983: PUSH
38984: LD_INT 45
38986: PUSH
38987: LD_INT 75
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: LIST
38994: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38995: LD_VAR 0 6
38999: PPUSH
39000: CALL_OW 264
39004: PUSH
39005: LD_INT 26
39007: PUSH
39008: EMPTY
39009: LIST
39010: IN
39011: IFFALSE 39032
// points := [ 120 , 30 , 80 ] ;
39013: LD_ADDR_VAR 0 9
39017: PUSH
39018: LD_INT 120
39020: PUSH
39021: LD_INT 30
39023: PUSH
39024: LD_INT 80
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: LIST
39031: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39032: LD_VAR 0 6
39036: PPUSH
39037: CALL_OW 264
39041: PUSH
39042: LD_INT 22
39044: PUSH
39045: EMPTY
39046: LIST
39047: IN
39048: IFFALSE 39069
// points := [ 40 , 1 , 1 ] ;
39050: LD_ADDR_VAR 0 9
39054: PUSH
39055: LD_INT 40
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: LIST
39068: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39069: LD_VAR 0 6
39073: PPUSH
39074: CALL_OW 264
39078: PUSH
39079: LD_INT 29
39081: PUSH
39082: EMPTY
39083: LIST
39084: IN
39085: IFFALSE 39106
// points := [ 70 , 200 , 400 ] ;
39087: LD_ADDR_VAR 0 9
39091: PUSH
39092: LD_INT 70
39094: PUSH
39095: LD_INT 200
39097: PUSH
39098: LD_INT 400
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39106: LD_VAR 0 6
39110: PPUSH
39111: CALL_OW 264
39115: PUSH
39116: LD_INT 14
39118: PUSH
39119: LD_INT 53
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: IN
39126: IFFALSE 39147
// points := [ 40 , 10 , 20 ] ;
39128: LD_ADDR_VAR 0 9
39132: PUSH
39133: LD_INT 40
39135: PUSH
39136: LD_INT 10
39138: PUSH
39139: LD_INT 20
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: LIST
39146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39147: LD_VAR 0 6
39151: PPUSH
39152: CALL_OW 264
39156: PUSH
39157: LD_INT 9
39159: PUSH
39160: EMPTY
39161: LIST
39162: IN
39163: IFFALSE 39184
// points := [ 5 , 70 , 20 ] ;
39165: LD_ADDR_VAR 0 9
39169: PUSH
39170: LD_INT 5
39172: PUSH
39173: LD_INT 70
39175: PUSH
39176: LD_INT 20
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39184: LD_VAR 0 6
39188: PPUSH
39189: CALL_OW 264
39193: PUSH
39194: LD_INT 10
39196: PUSH
39197: EMPTY
39198: LIST
39199: IN
39200: IFFALSE 39221
// points := [ 35 , 110 , 70 ] ;
39202: LD_ADDR_VAR 0 9
39206: PUSH
39207: LD_INT 35
39209: PUSH
39210: LD_INT 110
39212: PUSH
39213: LD_INT 70
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: LIST
39220: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39221: LD_VAR 0 6
39225: PPUSH
39226: CALL_OW 265
39230: PUSH
39231: LD_INT 25
39233: EQUAL
39234: IFFALSE 39255
// points := [ 80 , 65 , 100 ] ;
39236: LD_ADDR_VAR 0 9
39240: PUSH
39241: LD_INT 80
39243: PUSH
39244: LD_INT 65
39246: PUSH
39247: LD_INT 100
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: LIST
39254: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39255: LD_VAR 0 6
39259: PPUSH
39260: CALL_OW 263
39264: PUSH
39265: LD_INT 1
39267: EQUAL
39268: IFFALSE 39303
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39270: LD_ADDR_VAR 0 10
39274: PUSH
39275: LD_VAR 0 10
39279: PUSH
39280: LD_VAR 0 6
39284: PPUSH
39285: CALL_OW 311
39289: PPUSH
39290: LD_INT 3
39292: PPUSH
39293: CALL_OW 259
39297: PUSH
39298: LD_INT 4
39300: MUL
39301: MUL
39302: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39303: LD_VAR 0 6
39307: PPUSH
39308: CALL_OW 263
39312: PUSH
39313: LD_INT 2
39315: EQUAL
39316: IFFALSE 39367
// begin j := IsControledBy ( i ) ;
39318: LD_ADDR_VAR 0 7
39322: PUSH
39323: LD_VAR 0 6
39327: PPUSH
39328: CALL_OW 312
39332: ST_TO_ADDR
// if j then
39333: LD_VAR 0 7
39337: IFFALSE 39367
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39339: LD_ADDR_VAR 0 10
39343: PUSH
39344: LD_VAR 0 10
39348: PUSH
39349: LD_VAR 0 7
39353: PPUSH
39354: LD_INT 3
39356: PPUSH
39357: CALL_OW 259
39361: PUSH
39362: LD_INT 3
39364: MUL
39365: MUL
39366: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39367: LD_VAR 0 6
39371: PPUSH
39372: CALL_OW 264
39376: PUSH
39377: LD_INT 5
39379: PUSH
39380: LD_INT 6
39382: PUSH
39383: LD_INT 46
39385: PUSH
39386: LD_INT 44
39388: PUSH
39389: LD_INT 47
39391: PUSH
39392: LD_INT 45
39394: PUSH
39395: LD_INT 28
39397: PUSH
39398: LD_INT 7
39400: PUSH
39401: LD_INT 27
39403: PUSH
39404: LD_INT 29
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: IN
39419: PUSH
39420: LD_VAR 0 1
39424: PPUSH
39425: LD_INT 52
39427: PPUSH
39428: CALL_OW 321
39432: PUSH
39433: LD_INT 2
39435: EQUAL
39436: AND
39437: IFFALSE 39454
// bpoints := bpoints * 1.2 ;
39439: LD_ADDR_VAR 0 10
39443: PUSH
39444: LD_VAR 0 10
39448: PUSH
39449: LD_REAL  1.20000000000000E+0000
39452: MUL
39453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39454: LD_VAR 0 6
39458: PPUSH
39459: CALL_OW 264
39463: PUSH
39464: LD_INT 6
39466: PUSH
39467: LD_INT 46
39469: PUSH
39470: LD_INT 47
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: LIST
39477: IN
39478: IFFALSE 39495
// bpoints := bpoints * 1.2 ;
39480: LD_ADDR_VAR 0 10
39484: PUSH
39485: LD_VAR 0 10
39489: PUSH
39490: LD_REAL  1.20000000000000E+0000
39493: MUL
39494: ST_TO_ADDR
// end ; unit_building :
39495: GO 39509
39497: LD_INT 3
39499: DOUBLE
39500: EQUAL
39501: IFTRUE 39505
39503: GO 39508
39505: POP
// ; end ;
39506: GO 39509
39508: POP
// for j = 1 to 3 do
39509: LD_ADDR_VAR 0 7
39513: PUSH
39514: DOUBLE
39515: LD_INT 1
39517: DEC
39518: ST_TO_ADDR
39519: LD_INT 3
39521: PUSH
39522: FOR_TO
39523: IFFALSE 39576
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39525: LD_ADDR_VAR 0 5
39529: PUSH
39530: LD_VAR 0 5
39534: PPUSH
39535: LD_VAR 0 7
39539: PPUSH
39540: LD_VAR 0 5
39544: PUSH
39545: LD_VAR 0 7
39549: ARRAY
39550: PUSH
39551: LD_VAR 0 9
39555: PUSH
39556: LD_VAR 0 7
39560: ARRAY
39561: PUSH
39562: LD_VAR 0 10
39566: MUL
39567: PLUS
39568: PPUSH
39569: CALL_OW 1
39573: ST_TO_ADDR
39574: GO 39522
39576: POP
39577: POP
// end ;
39578: GO 38057
39580: POP
39581: POP
// result := Replace ( result , 4 , tmp ) ;
39582: LD_ADDR_VAR 0 5
39586: PUSH
39587: LD_VAR 0 5
39591: PPUSH
39592: LD_INT 4
39594: PPUSH
39595: LD_VAR 0 8
39599: PPUSH
39600: CALL_OW 1
39604: ST_TO_ADDR
// end ;
39605: LD_VAR 0 5
39609: RET
// export function DangerAtRange ( unit , range ) ; begin
39610: LD_INT 0
39612: PPUSH
// if not unit then
39613: LD_VAR 0 1
39617: NOT
39618: IFFALSE 39622
// exit ;
39620: GO 39667
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39622: LD_ADDR_VAR 0 3
39626: PUSH
39627: LD_VAR 0 1
39631: PPUSH
39632: CALL_OW 255
39636: PPUSH
39637: LD_VAR 0 1
39641: PPUSH
39642: CALL_OW 250
39646: PPUSH
39647: LD_VAR 0 1
39651: PPUSH
39652: CALL_OW 251
39656: PPUSH
39657: LD_VAR 0 2
39661: PPUSH
39662: CALL 37909 0 4
39666: ST_TO_ADDR
// end ;
39667: LD_VAR 0 3
39671: RET
// export function DangerInArea ( side , area ) ; begin
39672: LD_INT 0
39674: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39675: LD_ADDR_VAR 0 3
39679: PUSH
39680: LD_VAR 0 2
39684: PPUSH
39685: LD_INT 81
39687: PUSH
39688: LD_VAR 0 1
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PPUSH
39697: CALL_OW 70
39701: ST_TO_ADDR
// end ;
39702: LD_VAR 0 3
39706: RET
// export function IsExtension ( b ) ; begin
39707: LD_INT 0
39709: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39710: LD_ADDR_VAR 0 2
39714: PUSH
39715: LD_VAR 0 1
39719: PUSH
39720: LD_INT 23
39722: PUSH
39723: LD_INT 20
39725: PUSH
39726: LD_INT 22
39728: PUSH
39729: LD_INT 17
39731: PUSH
39732: LD_INT 24
39734: PUSH
39735: LD_INT 21
39737: PUSH
39738: LD_INT 19
39740: PUSH
39741: LD_INT 16
39743: PUSH
39744: LD_INT 25
39746: PUSH
39747: LD_INT 18
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: IN
39762: ST_TO_ADDR
// end ;
39763: LD_VAR 0 2
39767: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39768: LD_INT 0
39770: PPUSH
39771: PPUSH
39772: PPUSH
// result := [ ] ;
39773: LD_ADDR_VAR 0 4
39777: PUSH
39778: EMPTY
39779: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39780: LD_ADDR_VAR 0 5
39784: PUSH
39785: LD_VAR 0 2
39789: PPUSH
39790: LD_INT 21
39792: PUSH
39793: LD_INT 3
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PPUSH
39800: CALL_OW 70
39804: ST_TO_ADDR
// if not tmp then
39805: LD_VAR 0 5
39809: NOT
39810: IFFALSE 39814
// exit ;
39812: GO 39878
// if checkLink then
39814: LD_VAR 0 3
39818: IFFALSE 39868
// begin for i in tmp do
39820: LD_ADDR_VAR 0 6
39824: PUSH
39825: LD_VAR 0 5
39829: PUSH
39830: FOR_IN
39831: IFFALSE 39866
// if GetBase ( i ) <> base then
39833: LD_VAR 0 6
39837: PPUSH
39838: CALL_OW 274
39842: PUSH
39843: LD_VAR 0 1
39847: NONEQUAL
39848: IFFALSE 39864
// ComLinkToBase ( base , i ) ;
39850: LD_VAR 0 1
39854: PPUSH
39855: LD_VAR 0 6
39859: PPUSH
39860: CALL_OW 169
39864: GO 39830
39866: POP
39867: POP
// end ; result := tmp ;
39868: LD_ADDR_VAR 0 4
39872: PUSH
39873: LD_VAR 0 5
39877: ST_TO_ADDR
// end ;
39878: LD_VAR 0 4
39882: RET
// export function ComComplete ( units , b ) ; var i ; begin
39883: LD_INT 0
39885: PPUSH
39886: PPUSH
// if not units then
39887: LD_VAR 0 1
39891: NOT
39892: IFFALSE 39896
// exit ;
39894: GO 39986
// for i in units do
39896: LD_ADDR_VAR 0 4
39900: PUSH
39901: LD_VAR 0 1
39905: PUSH
39906: FOR_IN
39907: IFFALSE 39984
// if BuildingStatus ( b ) = bs_build then
39909: LD_VAR 0 2
39913: PPUSH
39914: CALL_OW 461
39918: PUSH
39919: LD_INT 1
39921: EQUAL
39922: IFFALSE 39982
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39924: LD_VAR 0 4
39928: PPUSH
39929: LD_STRING h
39931: PUSH
39932: LD_VAR 0 2
39936: PPUSH
39937: CALL_OW 250
39941: PUSH
39942: LD_VAR 0 2
39946: PPUSH
39947: CALL_OW 251
39951: PUSH
39952: LD_VAR 0 2
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: PUSH
39975: EMPTY
39976: LIST
39977: PPUSH
39978: CALL_OW 446
39982: GO 39906
39984: POP
39985: POP
// end ;
39986: LD_VAR 0 3
39990: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39991: LD_INT 0
39993: PPUSH
39994: PPUSH
39995: PPUSH
39996: PPUSH
39997: PPUSH
39998: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39999: LD_VAR 0 1
40003: NOT
40004: PUSH
40005: LD_VAR 0 1
40009: PPUSH
40010: CALL_OW 263
40014: PUSH
40015: LD_INT 2
40017: NONEQUAL
40018: OR
40019: IFFALSE 40023
// exit ;
40021: GO 40339
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40023: LD_ADDR_VAR 0 6
40027: PUSH
40028: LD_INT 22
40030: PUSH
40031: LD_VAR 0 1
40035: PPUSH
40036: CALL_OW 255
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 30
40050: PUSH
40051: LD_INT 36
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 34
40060: PUSH
40061: LD_INT 31
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PPUSH
40077: CALL_OW 69
40081: ST_TO_ADDR
// if not tmp then
40082: LD_VAR 0 6
40086: NOT
40087: IFFALSE 40091
// exit ;
40089: GO 40339
// result := [ ] ;
40091: LD_ADDR_VAR 0 2
40095: PUSH
40096: EMPTY
40097: ST_TO_ADDR
// for i in tmp do
40098: LD_ADDR_VAR 0 3
40102: PUSH
40103: LD_VAR 0 6
40107: PUSH
40108: FOR_IN
40109: IFFALSE 40180
// begin t := UnitsInside ( i ) ;
40111: LD_ADDR_VAR 0 4
40115: PUSH
40116: LD_VAR 0 3
40120: PPUSH
40121: CALL_OW 313
40125: ST_TO_ADDR
// if t then
40126: LD_VAR 0 4
40130: IFFALSE 40178
// for j in t do
40132: LD_ADDR_VAR 0 7
40136: PUSH
40137: LD_VAR 0 4
40141: PUSH
40142: FOR_IN
40143: IFFALSE 40176
// result := Replace ( result , result + 1 , j ) ;
40145: LD_ADDR_VAR 0 2
40149: PUSH
40150: LD_VAR 0 2
40154: PPUSH
40155: LD_VAR 0 2
40159: PUSH
40160: LD_INT 1
40162: PLUS
40163: PPUSH
40164: LD_VAR 0 7
40168: PPUSH
40169: CALL_OW 1
40173: ST_TO_ADDR
40174: GO 40142
40176: POP
40177: POP
// end ;
40178: GO 40108
40180: POP
40181: POP
// if not result then
40182: LD_VAR 0 2
40186: NOT
40187: IFFALSE 40191
// exit ;
40189: GO 40339
// mech := result [ 1 ] ;
40191: LD_ADDR_VAR 0 5
40195: PUSH
40196: LD_VAR 0 2
40200: PUSH
40201: LD_INT 1
40203: ARRAY
40204: ST_TO_ADDR
// if result > 1 then
40205: LD_VAR 0 2
40209: PUSH
40210: LD_INT 1
40212: GREATER
40213: IFFALSE 40325
// begin for i = 2 to result do
40215: LD_ADDR_VAR 0 3
40219: PUSH
40220: DOUBLE
40221: LD_INT 2
40223: DEC
40224: ST_TO_ADDR
40225: LD_VAR 0 2
40229: PUSH
40230: FOR_TO
40231: IFFALSE 40323
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40233: LD_ADDR_VAR 0 4
40237: PUSH
40238: LD_VAR 0 2
40242: PUSH
40243: LD_VAR 0 3
40247: ARRAY
40248: PPUSH
40249: LD_INT 3
40251: PPUSH
40252: CALL_OW 259
40256: PUSH
40257: LD_VAR 0 2
40261: PUSH
40262: LD_VAR 0 3
40266: ARRAY
40267: PPUSH
40268: CALL_OW 432
40272: MINUS
40273: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40274: LD_VAR 0 4
40278: PUSH
40279: LD_VAR 0 5
40283: PPUSH
40284: LD_INT 3
40286: PPUSH
40287: CALL_OW 259
40291: PUSH
40292: LD_VAR 0 5
40296: PPUSH
40297: CALL_OW 432
40301: MINUS
40302: GREATEREQUAL
40303: IFFALSE 40321
// mech := result [ i ] ;
40305: LD_ADDR_VAR 0 5
40309: PUSH
40310: LD_VAR 0 2
40314: PUSH
40315: LD_VAR 0 3
40319: ARRAY
40320: ST_TO_ADDR
// end ;
40321: GO 40230
40323: POP
40324: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40325: LD_VAR 0 1
40329: PPUSH
40330: LD_VAR 0 5
40334: PPUSH
40335: CALL_OW 135
// end ;
40339: LD_VAR 0 2
40343: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40344: LD_INT 0
40346: PPUSH
40347: PPUSH
40348: PPUSH
40349: PPUSH
40350: PPUSH
40351: PPUSH
40352: PPUSH
40353: PPUSH
40354: PPUSH
40355: PPUSH
40356: PPUSH
40357: PPUSH
40358: PPUSH
// result := [ ] ;
40359: LD_ADDR_VAR 0 7
40363: PUSH
40364: EMPTY
40365: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40366: LD_VAR 0 1
40370: PPUSH
40371: CALL_OW 266
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: IN
40386: NOT
40387: IFFALSE 40391
// exit ;
40389: GO 42025
// if name then
40391: LD_VAR 0 3
40395: IFFALSE 40411
// SetBName ( base_dep , name ) ;
40397: LD_VAR 0 1
40401: PPUSH
40402: LD_VAR 0 3
40406: PPUSH
40407: CALL_OW 500
// base := GetBase ( base_dep ) ;
40411: LD_ADDR_VAR 0 15
40415: PUSH
40416: LD_VAR 0 1
40420: PPUSH
40421: CALL_OW 274
40425: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40426: LD_ADDR_VAR 0 16
40430: PUSH
40431: LD_VAR 0 1
40435: PPUSH
40436: CALL_OW 255
40440: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40441: LD_ADDR_VAR 0 17
40445: PUSH
40446: LD_VAR 0 1
40450: PPUSH
40451: CALL_OW 248
40455: ST_TO_ADDR
// if sources then
40456: LD_VAR 0 5
40460: IFFALSE 40507
// for i = 1 to 3 do
40462: LD_ADDR_VAR 0 8
40466: PUSH
40467: DOUBLE
40468: LD_INT 1
40470: DEC
40471: ST_TO_ADDR
40472: LD_INT 3
40474: PUSH
40475: FOR_TO
40476: IFFALSE 40505
// AddResourceType ( base , i , sources [ i ] ) ;
40478: LD_VAR 0 15
40482: PPUSH
40483: LD_VAR 0 8
40487: PPUSH
40488: LD_VAR 0 5
40492: PUSH
40493: LD_VAR 0 8
40497: ARRAY
40498: PPUSH
40499: CALL_OW 276
40503: GO 40475
40505: POP
40506: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40507: LD_ADDR_VAR 0 18
40511: PUSH
40512: LD_VAR 0 15
40516: PPUSH
40517: LD_VAR 0 2
40521: PPUSH
40522: LD_INT 1
40524: PPUSH
40525: CALL 39768 0 3
40529: ST_TO_ADDR
// InitHc ;
40530: CALL_OW 19
// InitUc ;
40534: CALL_OW 18
// uc_side := side ;
40538: LD_ADDR_OWVAR 20
40542: PUSH
40543: LD_VAR 0 16
40547: ST_TO_ADDR
// uc_nation := nation ;
40548: LD_ADDR_OWVAR 21
40552: PUSH
40553: LD_VAR 0 17
40557: ST_TO_ADDR
// if buildings then
40558: LD_VAR 0 18
40562: IFFALSE 41884
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40564: LD_ADDR_VAR 0 19
40568: PUSH
40569: LD_VAR 0 18
40573: PPUSH
40574: LD_INT 2
40576: PUSH
40577: LD_INT 30
40579: PUSH
40580: LD_INT 29
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 30
40589: PUSH
40590: LD_INT 30
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: LIST
40601: PPUSH
40602: CALL_OW 72
40606: ST_TO_ADDR
// if tmp then
40607: LD_VAR 0 19
40611: IFFALSE 40659
// for i in tmp do
40613: LD_ADDR_VAR 0 8
40617: PUSH
40618: LD_VAR 0 19
40622: PUSH
40623: FOR_IN
40624: IFFALSE 40657
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40626: LD_VAR 0 8
40630: PPUSH
40631: CALL_OW 250
40635: PPUSH
40636: LD_VAR 0 8
40640: PPUSH
40641: CALL_OW 251
40645: PPUSH
40646: LD_VAR 0 16
40650: PPUSH
40651: CALL_OW 441
40655: GO 40623
40657: POP
40658: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40659: LD_VAR 0 18
40663: PPUSH
40664: LD_INT 2
40666: PUSH
40667: LD_INT 30
40669: PUSH
40670: LD_INT 32
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 30
40679: PUSH
40680: LD_INT 33
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: LIST
40691: PPUSH
40692: CALL_OW 72
40696: IFFALSE 40784
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40698: LD_ADDR_VAR 0 8
40702: PUSH
40703: LD_VAR 0 18
40707: PPUSH
40708: LD_INT 2
40710: PUSH
40711: LD_INT 30
40713: PUSH
40714: LD_INT 32
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 30
40723: PUSH
40724: LD_INT 33
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: LIST
40735: PPUSH
40736: CALL_OW 72
40740: PUSH
40741: FOR_IN
40742: IFFALSE 40782
// begin if not GetBWeapon ( i ) then
40744: LD_VAR 0 8
40748: PPUSH
40749: CALL_OW 269
40753: NOT
40754: IFFALSE 40780
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40756: LD_VAR 0 8
40760: PPUSH
40761: LD_VAR 0 8
40765: PPUSH
40766: LD_VAR 0 2
40770: PPUSH
40771: CALL 42030 0 2
40775: PPUSH
40776: CALL_OW 431
// end ;
40780: GO 40741
40782: POP
40783: POP
// end ; for i = 1 to personel do
40784: LD_ADDR_VAR 0 8
40788: PUSH
40789: DOUBLE
40790: LD_INT 1
40792: DEC
40793: ST_TO_ADDR
40794: LD_VAR 0 6
40798: PUSH
40799: FOR_TO
40800: IFFALSE 41864
// begin if i > 4 then
40802: LD_VAR 0 8
40806: PUSH
40807: LD_INT 4
40809: GREATER
40810: IFFALSE 40814
// break ;
40812: GO 41864
// case i of 1 :
40814: LD_VAR 0 8
40818: PUSH
40819: LD_INT 1
40821: DOUBLE
40822: EQUAL
40823: IFTRUE 40827
40825: GO 40907
40827: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40828: LD_ADDR_VAR 0 12
40832: PUSH
40833: LD_VAR 0 18
40837: PPUSH
40838: LD_INT 22
40840: PUSH
40841: LD_VAR 0 16
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 58
40852: PUSH
40853: EMPTY
40854: LIST
40855: PUSH
40856: LD_INT 2
40858: PUSH
40859: LD_INT 30
40861: PUSH
40862: LD_INT 32
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 30
40871: PUSH
40872: LD_INT 4
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 30
40881: PUSH
40882: LD_INT 5
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: LIST
40899: PPUSH
40900: CALL_OW 72
40904: ST_TO_ADDR
40905: GO 41129
40907: LD_INT 2
40909: DOUBLE
40910: EQUAL
40911: IFTRUE 40915
40913: GO 40977
40915: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40916: LD_ADDR_VAR 0 12
40920: PUSH
40921: LD_VAR 0 18
40925: PPUSH
40926: LD_INT 22
40928: PUSH
40929: LD_VAR 0 16
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 2
40940: PUSH
40941: LD_INT 30
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 30
40953: PUSH
40954: LD_INT 1
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: LIST
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PPUSH
40970: CALL_OW 72
40974: ST_TO_ADDR
40975: GO 41129
40977: LD_INT 3
40979: DOUBLE
40980: EQUAL
40981: IFTRUE 40985
40983: GO 41047
40985: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40986: LD_ADDR_VAR 0 12
40990: PUSH
40991: LD_VAR 0 18
40995: PPUSH
40996: LD_INT 22
40998: PUSH
40999: LD_VAR 0 16
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 2
41010: PUSH
41011: LD_INT 30
41013: PUSH
41014: LD_INT 2
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 30
41023: PUSH
41024: LD_INT 3
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: LIST
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PPUSH
41040: CALL_OW 72
41044: ST_TO_ADDR
41045: GO 41129
41047: LD_INT 4
41049: DOUBLE
41050: EQUAL
41051: IFTRUE 41055
41053: GO 41128
41055: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41056: LD_ADDR_VAR 0 12
41060: PUSH
41061: LD_VAR 0 18
41065: PPUSH
41066: LD_INT 22
41068: PUSH
41069: LD_VAR 0 16
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 2
41080: PUSH
41081: LD_INT 30
41083: PUSH
41084: LD_INT 6
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 30
41093: PUSH
41094: LD_INT 7
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 30
41103: PUSH
41104: LD_INT 8
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PPUSH
41121: CALL_OW 72
41125: ST_TO_ADDR
41126: GO 41129
41128: POP
// if i = 1 then
41129: LD_VAR 0 8
41133: PUSH
41134: LD_INT 1
41136: EQUAL
41137: IFFALSE 41248
// begin tmp := [ ] ;
41139: LD_ADDR_VAR 0 19
41143: PUSH
41144: EMPTY
41145: ST_TO_ADDR
// for j in f do
41146: LD_ADDR_VAR 0 9
41150: PUSH
41151: LD_VAR 0 12
41155: PUSH
41156: FOR_IN
41157: IFFALSE 41230
// if GetBType ( j ) = b_bunker then
41159: LD_VAR 0 9
41163: PPUSH
41164: CALL_OW 266
41168: PUSH
41169: LD_INT 32
41171: EQUAL
41172: IFFALSE 41199
// tmp := Insert ( tmp , 1 , j ) else
41174: LD_ADDR_VAR 0 19
41178: PUSH
41179: LD_VAR 0 19
41183: PPUSH
41184: LD_INT 1
41186: PPUSH
41187: LD_VAR 0 9
41191: PPUSH
41192: CALL_OW 2
41196: ST_TO_ADDR
41197: GO 41228
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41199: LD_ADDR_VAR 0 19
41203: PUSH
41204: LD_VAR 0 19
41208: PPUSH
41209: LD_VAR 0 19
41213: PUSH
41214: LD_INT 1
41216: PLUS
41217: PPUSH
41218: LD_VAR 0 9
41222: PPUSH
41223: CALL_OW 2
41227: ST_TO_ADDR
41228: GO 41156
41230: POP
41231: POP
// if tmp then
41232: LD_VAR 0 19
41236: IFFALSE 41248
// f := tmp ;
41238: LD_ADDR_VAR 0 12
41242: PUSH
41243: LD_VAR 0 19
41247: ST_TO_ADDR
// end ; x := personel [ i ] ;
41248: LD_ADDR_VAR 0 13
41252: PUSH
41253: LD_VAR 0 6
41257: PUSH
41258: LD_VAR 0 8
41262: ARRAY
41263: ST_TO_ADDR
// if x = - 1 then
41264: LD_VAR 0 13
41268: PUSH
41269: LD_INT 1
41271: NEG
41272: EQUAL
41273: IFFALSE 41482
// begin for j in f do
41275: LD_ADDR_VAR 0 9
41279: PUSH
41280: LD_VAR 0 12
41284: PUSH
41285: FOR_IN
41286: IFFALSE 41478
// repeat InitHc ;
41288: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41292: LD_VAR 0 9
41296: PPUSH
41297: CALL_OW 266
41301: PUSH
41302: LD_INT 5
41304: EQUAL
41305: IFFALSE 41375
// begin if UnitsInside ( j ) < 3 then
41307: LD_VAR 0 9
41311: PPUSH
41312: CALL_OW 313
41316: PUSH
41317: LD_INT 3
41319: LESS
41320: IFFALSE 41356
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41322: LD_INT 0
41324: PPUSH
41325: LD_INT 5
41327: PUSH
41328: LD_INT 8
41330: PUSH
41331: LD_INT 9
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: LIST
41338: PUSH
41339: LD_VAR 0 17
41343: ARRAY
41344: PPUSH
41345: LD_VAR 0 4
41349: PPUSH
41350: CALL_OW 380
41354: GO 41373
// PrepareHuman ( false , i , skill ) ;
41356: LD_INT 0
41358: PPUSH
41359: LD_VAR 0 8
41363: PPUSH
41364: LD_VAR 0 4
41368: PPUSH
41369: CALL_OW 380
// end else
41373: GO 41392
// PrepareHuman ( false , i , skill ) ;
41375: LD_INT 0
41377: PPUSH
41378: LD_VAR 0 8
41382: PPUSH
41383: LD_VAR 0 4
41387: PPUSH
41388: CALL_OW 380
// un := CreateHuman ;
41392: LD_ADDR_VAR 0 14
41396: PUSH
41397: CALL_OW 44
41401: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41402: LD_ADDR_VAR 0 7
41406: PUSH
41407: LD_VAR 0 7
41411: PPUSH
41412: LD_INT 1
41414: PPUSH
41415: LD_VAR 0 14
41419: PPUSH
41420: CALL_OW 2
41424: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41425: LD_VAR 0 14
41429: PPUSH
41430: LD_VAR 0 9
41434: PPUSH
41435: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41439: LD_VAR 0 9
41443: PPUSH
41444: CALL_OW 313
41448: PUSH
41449: LD_INT 6
41451: EQUAL
41452: PUSH
41453: LD_VAR 0 9
41457: PPUSH
41458: CALL_OW 266
41462: PUSH
41463: LD_INT 32
41465: PUSH
41466: LD_INT 31
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: IN
41473: OR
41474: IFFALSE 41288
41476: GO 41285
41478: POP
41479: POP
// end else
41480: GO 41862
// for j = 1 to x do
41482: LD_ADDR_VAR 0 9
41486: PUSH
41487: DOUBLE
41488: LD_INT 1
41490: DEC
41491: ST_TO_ADDR
41492: LD_VAR 0 13
41496: PUSH
41497: FOR_TO
41498: IFFALSE 41860
// begin InitHc ;
41500: CALL_OW 19
// if not f then
41504: LD_VAR 0 12
41508: NOT
41509: IFFALSE 41598
// begin PrepareHuman ( false , i , skill ) ;
41511: LD_INT 0
41513: PPUSH
41514: LD_VAR 0 8
41518: PPUSH
41519: LD_VAR 0 4
41523: PPUSH
41524: CALL_OW 380
// un := CreateHuman ;
41528: LD_ADDR_VAR 0 14
41532: PUSH
41533: CALL_OW 44
41537: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41538: LD_ADDR_VAR 0 7
41542: PUSH
41543: LD_VAR 0 7
41547: PPUSH
41548: LD_INT 1
41550: PPUSH
41551: LD_VAR 0 14
41555: PPUSH
41556: CALL_OW 2
41560: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41561: LD_VAR 0 14
41565: PPUSH
41566: LD_VAR 0 1
41570: PPUSH
41571: CALL_OW 250
41575: PPUSH
41576: LD_VAR 0 1
41580: PPUSH
41581: CALL_OW 251
41585: PPUSH
41586: LD_INT 10
41588: PPUSH
41589: LD_INT 0
41591: PPUSH
41592: CALL_OW 50
// continue ;
41596: GO 41497
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41598: LD_VAR 0 12
41602: PUSH
41603: LD_INT 1
41605: ARRAY
41606: PPUSH
41607: CALL_OW 313
41611: PUSH
41612: LD_VAR 0 12
41616: PUSH
41617: LD_INT 1
41619: ARRAY
41620: PPUSH
41621: CALL_OW 266
41625: PUSH
41626: LD_INT 32
41628: PUSH
41629: LD_INT 31
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: IN
41636: AND
41637: PUSH
41638: LD_VAR 0 12
41642: PUSH
41643: LD_INT 1
41645: ARRAY
41646: PPUSH
41647: CALL_OW 313
41651: PUSH
41652: LD_INT 6
41654: EQUAL
41655: OR
41656: IFFALSE 41676
// f := Delete ( f , 1 ) ;
41658: LD_ADDR_VAR 0 12
41662: PUSH
41663: LD_VAR 0 12
41667: PPUSH
41668: LD_INT 1
41670: PPUSH
41671: CALL_OW 3
41675: ST_TO_ADDR
// if not f then
41676: LD_VAR 0 12
41680: NOT
41681: IFFALSE 41699
// begin x := x + 2 ;
41683: LD_ADDR_VAR 0 13
41687: PUSH
41688: LD_VAR 0 13
41692: PUSH
41693: LD_INT 2
41695: PLUS
41696: ST_TO_ADDR
// continue ;
41697: GO 41497
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41699: LD_VAR 0 12
41703: PUSH
41704: LD_INT 1
41706: ARRAY
41707: PPUSH
41708: CALL_OW 266
41712: PUSH
41713: LD_INT 5
41715: EQUAL
41716: IFFALSE 41790
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41718: LD_VAR 0 12
41722: PUSH
41723: LD_INT 1
41725: ARRAY
41726: PPUSH
41727: CALL_OW 313
41731: PUSH
41732: LD_INT 3
41734: LESS
41735: IFFALSE 41771
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41737: LD_INT 0
41739: PPUSH
41740: LD_INT 5
41742: PUSH
41743: LD_INT 8
41745: PUSH
41746: LD_INT 9
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: LIST
41753: PUSH
41754: LD_VAR 0 17
41758: ARRAY
41759: PPUSH
41760: LD_VAR 0 4
41764: PPUSH
41765: CALL_OW 380
41769: GO 41788
// PrepareHuman ( false , i , skill ) ;
41771: LD_INT 0
41773: PPUSH
41774: LD_VAR 0 8
41778: PPUSH
41779: LD_VAR 0 4
41783: PPUSH
41784: CALL_OW 380
// end else
41788: GO 41807
// PrepareHuman ( false , i , skill ) ;
41790: LD_INT 0
41792: PPUSH
41793: LD_VAR 0 8
41797: PPUSH
41798: LD_VAR 0 4
41802: PPUSH
41803: CALL_OW 380
// un := CreateHuman ;
41807: LD_ADDR_VAR 0 14
41811: PUSH
41812: CALL_OW 44
41816: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41817: LD_ADDR_VAR 0 7
41821: PUSH
41822: LD_VAR 0 7
41826: PPUSH
41827: LD_INT 1
41829: PPUSH
41830: LD_VAR 0 14
41834: PPUSH
41835: CALL_OW 2
41839: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41840: LD_VAR 0 14
41844: PPUSH
41845: LD_VAR 0 12
41849: PUSH
41850: LD_INT 1
41852: ARRAY
41853: PPUSH
41854: CALL_OW 52
// end ;
41858: GO 41497
41860: POP
41861: POP
// end ;
41862: GO 40799
41864: POP
41865: POP
// result := result ^ buildings ;
41866: LD_ADDR_VAR 0 7
41870: PUSH
41871: LD_VAR 0 7
41875: PUSH
41876: LD_VAR 0 18
41880: ADD
41881: ST_TO_ADDR
// end else
41882: GO 42025
// begin for i = 1 to personel do
41884: LD_ADDR_VAR 0 8
41888: PUSH
41889: DOUBLE
41890: LD_INT 1
41892: DEC
41893: ST_TO_ADDR
41894: LD_VAR 0 6
41898: PUSH
41899: FOR_TO
41900: IFFALSE 42023
// begin if i > 4 then
41902: LD_VAR 0 8
41906: PUSH
41907: LD_INT 4
41909: GREATER
41910: IFFALSE 41914
// break ;
41912: GO 42023
// x := personel [ i ] ;
41914: LD_ADDR_VAR 0 13
41918: PUSH
41919: LD_VAR 0 6
41923: PUSH
41924: LD_VAR 0 8
41928: ARRAY
41929: ST_TO_ADDR
// if x = - 1 then
41930: LD_VAR 0 13
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: EQUAL
41939: IFFALSE 41943
// continue ;
41941: GO 41899
// PrepareHuman ( false , i , skill ) ;
41943: LD_INT 0
41945: PPUSH
41946: LD_VAR 0 8
41950: PPUSH
41951: LD_VAR 0 4
41955: PPUSH
41956: CALL_OW 380
// un := CreateHuman ;
41960: LD_ADDR_VAR 0 14
41964: PUSH
41965: CALL_OW 44
41969: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41970: LD_VAR 0 14
41974: PPUSH
41975: LD_VAR 0 1
41979: PPUSH
41980: CALL_OW 250
41984: PPUSH
41985: LD_VAR 0 1
41989: PPUSH
41990: CALL_OW 251
41994: PPUSH
41995: LD_INT 10
41997: PPUSH
41998: LD_INT 0
42000: PPUSH
42001: CALL_OW 50
// result := result ^ un ;
42005: LD_ADDR_VAR 0 7
42009: PUSH
42010: LD_VAR 0 7
42014: PUSH
42015: LD_VAR 0 14
42019: ADD
42020: ST_TO_ADDR
// end ;
42021: GO 41899
42023: POP
42024: POP
// end ; end ;
42025: LD_VAR 0 7
42029: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42030: LD_INT 0
42032: PPUSH
42033: PPUSH
42034: PPUSH
42035: PPUSH
42036: PPUSH
42037: PPUSH
42038: PPUSH
42039: PPUSH
42040: PPUSH
42041: PPUSH
42042: PPUSH
42043: PPUSH
42044: PPUSH
42045: PPUSH
42046: PPUSH
42047: PPUSH
// result := false ;
42048: LD_ADDR_VAR 0 3
42052: PUSH
42053: LD_INT 0
42055: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42056: LD_VAR 0 1
42060: NOT
42061: PUSH
42062: LD_VAR 0 1
42066: PPUSH
42067: CALL_OW 266
42071: PUSH
42072: LD_INT 32
42074: PUSH
42075: LD_INT 33
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: IN
42082: NOT
42083: OR
42084: IFFALSE 42088
// exit ;
42086: GO 43197
// nat := GetNation ( tower ) ;
42088: LD_ADDR_VAR 0 12
42092: PUSH
42093: LD_VAR 0 1
42097: PPUSH
42098: CALL_OW 248
42102: ST_TO_ADDR
// side := GetSide ( tower ) ;
42103: LD_ADDR_VAR 0 16
42107: PUSH
42108: LD_VAR 0 1
42112: PPUSH
42113: CALL_OW 255
42117: ST_TO_ADDR
// x := GetX ( tower ) ;
42118: LD_ADDR_VAR 0 10
42122: PUSH
42123: LD_VAR 0 1
42127: PPUSH
42128: CALL_OW 250
42132: ST_TO_ADDR
// y := GetY ( tower ) ;
42133: LD_ADDR_VAR 0 11
42137: PUSH
42138: LD_VAR 0 1
42142: PPUSH
42143: CALL_OW 251
42147: ST_TO_ADDR
// if not x or not y then
42148: LD_VAR 0 10
42152: NOT
42153: PUSH
42154: LD_VAR 0 11
42158: NOT
42159: OR
42160: IFFALSE 42164
// exit ;
42162: GO 43197
// weapon := 0 ;
42164: LD_ADDR_VAR 0 18
42168: PUSH
42169: LD_INT 0
42171: ST_TO_ADDR
// fac_list := [ ] ;
42172: LD_ADDR_VAR 0 17
42176: PUSH
42177: EMPTY
42178: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42179: LD_ADDR_VAR 0 6
42183: PUSH
42184: LD_VAR 0 1
42188: PPUSH
42189: CALL_OW 274
42193: PPUSH
42194: LD_VAR 0 2
42198: PPUSH
42199: LD_INT 0
42201: PPUSH
42202: CALL 39768 0 3
42206: PPUSH
42207: LD_INT 30
42209: PUSH
42210: LD_INT 3
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PPUSH
42217: CALL_OW 72
42221: ST_TO_ADDR
// if not factories then
42222: LD_VAR 0 6
42226: NOT
42227: IFFALSE 42231
// exit ;
42229: GO 43197
// for i in factories do
42231: LD_ADDR_VAR 0 8
42235: PUSH
42236: LD_VAR 0 6
42240: PUSH
42241: FOR_IN
42242: IFFALSE 42267
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42244: LD_ADDR_VAR 0 17
42248: PUSH
42249: LD_VAR 0 17
42253: PUSH
42254: LD_VAR 0 8
42258: PPUSH
42259: CALL_OW 478
42263: UNION
42264: ST_TO_ADDR
42265: GO 42241
42267: POP
42268: POP
// if not fac_list then
42269: LD_VAR 0 17
42273: NOT
42274: IFFALSE 42278
// exit ;
42276: GO 43197
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42278: LD_ADDR_VAR 0 5
42282: PUSH
42283: LD_INT 4
42285: PUSH
42286: LD_INT 5
42288: PUSH
42289: LD_INT 9
42291: PUSH
42292: LD_INT 10
42294: PUSH
42295: LD_INT 6
42297: PUSH
42298: LD_INT 7
42300: PUSH
42301: LD_INT 11
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 27
42315: PUSH
42316: LD_INT 28
42318: PUSH
42319: LD_INT 26
42321: PUSH
42322: LD_INT 30
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 43
42333: PUSH
42334: LD_INT 44
42336: PUSH
42337: LD_INT 46
42339: PUSH
42340: LD_INT 45
42342: PUSH
42343: LD_INT 47
42345: PUSH
42346: LD_INT 49
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: PUSH
42362: LD_VAR 0 12
42366: ARRAY
42367: ST_TO_ADDR
// list := list isect fac_list ;
42368: LD_ADDR_VAR 0 5
42372: PUSH
42373: LD_VAR 0 5
42377: PUSH
42378: LD_VAR 0 17
42382: ISECT
42383: ST_TO_ADDR
// if not list then
42384: LD_VAR 0 5
42388: NOT
42389: IFFALSE 42393
// exit ;
42391: GO 43197
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42393: LD_VAR 0 12
42397: PUSH
42398: LD_INT 3
42400: EQUAL
42401: PUSH
42402: LD_INT 49
42404: PUSH
42405: LD_VAR 0 5
42409: IN
42410: AND
42411: PUSH
42412: LD_INT 31
42414: PPUSH
42415: LD_VAR 0 16
42419: PPUSH
42420: CALL_OW 321
42424: PUSH
42425: LD_INT 2
42427: EQUAL
42428: AND
42429: IFFALSE 42489
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42431: LD_INT 22
42433: PUSH
42434: LD_VAR 0 16
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 35
42445: PUSH
42446: LD_INT 49
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 91
42455: PUSH
42456: LD_VAR 0 1
42460: PUSH
42461: LD_INT 10
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: LIST
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: LIST
42473: PPUSH
42474: CALL_OW 69
42478: NOT
42479: IFFALSE 42489
// weapon := ru_time_lapser ;
42481: LD_ADDR_VAR 0 18
42485: PUSH
42486: LD_INT 49
42488: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42489: LD_VAR 0 12
42493: PUSH
42494: LD_INT 1
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: IN
42504: PUSH
42505: LD_INT 11
42507: PUSH
42508: LD_VAR 0 5
42512: IN
42513: PUSH
42514: LD_INT 30
42516: PUSH
42517: LD_VAR 0 5
42521: IN
42522: OR
42523: AND
42524: PUSH
42525: LD_INT 6
42527: PPUSH
42528: LD_VAR 0 16
42532: PPUSH
42533: CALL_OW 321
42537: PUSH
42538: LD_INT 2
42540: EQUAL
42541: AND
42542: IFFALSE 42707
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42544: LD_INT 22
42546: PUSH
42547: LD_VAR 0 16
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 2
42558: PUSH
42559: LD_INT 35
42561: PUSH
42562: LD_INT 11
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 35
42571: PUSH
42572: LD_INT 30
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 91
42586: PUSH
42587: LD_VAR 0 1
42591: PUSH
42592: LD_INT 18
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: LIST
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: PPUSH
42605: CALL_OW 69
42609: NOT
42610: PUSH
42611: LD_INT 22
42613: PUSH
42614: LD_VAR 0 16
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: LD_INT 30
42628: PUSH
42629: LD_INT 32
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 30
42638: PUSH
42639: LD_INT 33
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 91
42653: PUSH
42654: LD_VAR 0 1
42658: PUSH
42659: LD_INT 12
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: LIST
42671: PUSH
42672: EMPTY
42673: LIST
42674: PPUSH
42675: CALL_OW 69
42679: PUSH
42680: LD_INT 2
42682: GREATER
42683: AND
42684: IFFALSE 42707
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42686: LD_ADDR_VAR 0 18
42690: PUSH
42691: LD_INT 11
42693: PUSH
42694: LD_INT 30
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_VAR 0 12
42705: ARRAY
42706: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42707: LD_VAR 0 18
42711: NOT
42712: PUSH
42713: LD_INT 40
42715: PPUSH
42716: LD_VAR 0 16
42720: PPUSH
42721: CALL_OW 321
42725: PUSH
42726: LD_INT 2
42728: EQUAL
42729: AND
42730: PUSH
42731: LD_INT 7
42733: PUSH
42734: LD_VAR 0 5
42738: IN
42739: PUSH
42740: LD_INT 28
42742: PUSH
42743: LD_VAR 0 5
42747: IN
42748: OR
42749: PUSH
42750: LD_INT 45
42752: PUSH
42753: LD_VAR 0 5
42757: IN
42758: OR
42759: AND
42760: IFFALSE 43014
// begin hex := GetHexInfo ( x , y ) ;
42762: LD_ADDR_VAR 0 4
42766: PUSH
42767: LD_VAR 0 10
42771: PPUSH
42772: LD_VAR 0 11
42776: PPUSH
42777: CALL_OW 546
42781: ST_TO_ADDR
// if hex [ 1 ] then
42782: LD_VAR 0 4
42786: PUSH
42787: LD_INT 1
42789: ARRAY
42790: IFFALSE 42794
// exit ;
42792: GO 43197
// height := hex [ 2 ] ;
42794: LD_ADDR_VAR 0 15
42798: PUSH
42799: LD_VAR 0 4
42803: PUSH
42804: LD_INT 2
42806: ARRAY
42807: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42808: LD_ADDR_VAR 0 14
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: LD_INT 2
42818: PUSH
42819: LD_INT 3
42821: PUSH
42822: LD_INT 5
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: ST_TO_ADDR
// for i in tmp do
42831: LD_ADDR_VAR 0 8
42835: PUSH
42836: LD_VAR 0 14
42840: PUSH
42841: FOR_IN
42842: IFFALSE 43012
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42844: LD_ADDR_VAR 0 9
42848: PUSH
42849: LD_VAR 0 10
42853: PPUSH
42854: LD_VAR 0 8
42858: PPUSH
42859: LD_INT 5
42861: PPUSH
42862: CALL_OW 272
42866: PUSH
42867: LD_VAR 0 11
42871: PPUSH
42872: LD_VAR 0 8
42876: PPUSH
42877: LD_INT 5
42879: PPUSH
42880: CALL_OW 273
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42889: LD_VAR 0 9
42893: PUSH
42894: LD_INT 1
42896: ARRAY
42897: PPUSH
42898: LD_VAR 0 9
42902: PUSH
42903: LD_INT 2
42905: ARRAY
42906: PPUSH
42907: CALL_OW 488
42911: IFFALSE 43010
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42913: LD_ADDR_VAR 0 4
42917: PUSH
42918: LD_VAR 0 9
42922: PUSH
42923: LD_INT 1
42925: ARRAY
42926: PPUSH
42927: LD_VAR 0 9
42931: PUSH
42932: LD_INT 2
42934: ARRAY
42935: PPUSH
42936: CALL_OW 546
42940: ST_TO_ADDR
// if hex [ 1 ] then
42941: LD_VAR 0 4
42945: PUSH
42946: LD_INT 1
42948: ARRAY
42949: IFFALSE 42953
// continue ;
42951: GO 42841
// h := hex [ 2 ] ;
42953: LD_ADDR_VAR 0 13
42957: PUSH
42958: LD_VAR 0 4
42962: PUSH
42963: LD_INT 2
42965: ARRAY
42966: ST_TO_ADDR
// if h + 7 < height then
42967: LD_VAR 0 13
42971: PUSH
42972: LD_INT 7
42974: PLUS
42975: PUSH
42976: LD_VAR 0 15
42980: LESS
42981: IFFALSE 43010
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42983: LD_ADDR_VAR 0 18
42987: PUSH
42988: LD_INT 7
42990: PUSH
42991: LD_INT 28
42993: PUSH
42994: LD_INT 45
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: LIST
43001: PUSH
43002: LD_VAR 0 12
43006: ARRAY
43007: ST_TO_ADDR
// break ;
43008: GO 43012
// end ; end ; end ;
43010: GO 42841
43012: POP
43013: POP
// end ; if not weapon then
43014: LD_VAR 0 18
43018: NOT
43019: IFFALSE 43079
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43021: LD_ADDR_VAR 0 5
43025: PUSH
43026: LD_VAR 0 5
43030: PUSH
43031: LD_INT 11
43033: PUSH
43034: LD_INT 30
43036: PUSH
43037: LD_INT 49
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: LIST
43044: DIFF
43045: ST_TO_ADDR
// if not list then
43046: LD_VAR 0 5
43050: NOT
43051: IFFALSE 43055
// exit ;
43053: GO 43197
// weapon := list [ rand ( 1 , list ) ] ;
43055: LD_ADDR_VAR 0 18
43059: PUSH
43060: LD_VAR 0 5
43064: PUSH
43065: LD_INT 1
43067: PPUSH
43068: LD_VAR 0 5
43072: PPUSH
43073: CALL_OW 12
43077: ARRAY
43078: ST_TO_ADDR
// end ; if weapon then
43079: LD_VAR 0 18
43083: IFFALSE 43197
// begin tmp := CostOfWeapon ( weapon ) ;
43085: LD_ADDR_VAR 0 14
43089: PUSH
43090: LD_VAR 0 18
43094: PPUSH
43095: CALL_OW 451
43099: ST_TO_ADDR
// j := GetBase ( tower ) ;
43100: LD_ADDR_VAR 0 9
43104: PUSH
43105: LD_VAR 0 1
43109: PPUSH
43110: CALL_OW 274
43114: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43115: LD_VAR 0 9
43119: PPUSH
43120: LD_INT 1
43122: PPUSH
43123: CALL_OW 275
43127: PUSH
43128: LD_VAR 0 14
43132: PUSH
43133: LD_INT 1
43135: ARRAY
43136: GREATEREQUAL
43137: PUSH
43138: LD_VAR 0 9
43142: PPUSH
43143: LD_INT 2
43145: PPUSH
43146: CALL_OW 275
43150: PUSH
43151: LD_VAR 0 14
43155: PUSH
43156: LD_INT 2
43158: ARRAY
43159: GREATEREQUAL
43160: AND
43161: PUSH
43162: LD_VAR 0 9
43166: PPUSH
43167: LD_INT 3
43169: PPUSH
43170: CALL_OW 275
43174: PUSH
43175: LD_VAR 0 14
43179: PUSH
43180: LD_INT 3
43182: ARRAY
43183: GREATEREQUAL
43184: AND
43185: IFFALSE 43197
// result := weapon ;
43187: LD_ADDR_VAR 0 3
43191: PUSH
43192: LD_VAR 0 18
43196: ST_TO_ADDR
// end ; end ;
43197: LD_VAR 0 3
43201: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43202: LD_INT 0
43204: PPUSH
43205: PPUSH
// result := true ;
43206: LD_ADDR_VAR 0 3
43210: PUSH
43211: LD_INT 1
43213: ST_TO_ADDR
// if array1 = array2 then
43214: LD_VAR 0 1
43218: PUSH
43219: LD_VAR 0 2
43223: EQUAL
43224: IFFALSE 43284
// begin for i = 1 to array1 do
43226: LD_ADDR_VAR 0 4
43230: PUSH
43231: DOUBLE
43232: LD_INT 1
43234: DEC
43235: ST_TO_ADDR
43236: LD_VAR 0 1
43240: PUSH
43241: FOR_TO
43242: IFFALSE 43280
// if array1 [ i ] <> array2 [ i ] then
43244: LD_VAR 0 1
43248: PUSH
43249: LD_VAR 0 4
43253: ARRAY
43254: PUSH
43255: LD_VAR 0 2
43259: PUSH
43260: LD_VAR 0 4
43264: ARRAY
43265: NONEQUAL
43266: IFFALSE 43278
// begin result := false ;
43268: LD_ADDR_VAR 0 3
43272: PUSH
43273: LD_INT 0
43275: ST_TO_ADDR
// break ;
43276: GO 43280
// end ;
43278: GO 43241
43280: POP
43281: POP
// end else
43282: GO 43292
// result := false ;
43284: LD_ADDR_VAR 0 3
43288: PUSH
43289: LD_INT 0
43291: ST_TO_ADDR
// end ;
43292: LD_VAR 0 3
43296: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43297: LD_INT 0
43299: PPUSH
43300: PPUSH
// if not array1 or not array2 then
43301: LD_VAR 0 1
43305: NOT
43306: PUSH
43307: LD_VAR 0 2
43311: NOT
43312: OR
43313: IFFALSE 43317
// exit ;
43315: GO 43381
// result := true ;
43317: LD_ADDR_VAR 0 3
43321: PUSH
43322: LD_INT 1
43324: ST_TO_ADDR
// for i = 1 to array1 do
43325: LD_ADDR_VAR 0 4
43329: PUSH
43330: DOUBLE
43331: LD_INT 1
43333: DEC
43334: ST_TO_ADDR
43335: LD_VAR 0 1
43339: PUSH
43340: FOR_TO
43341: IFFALSE 43379
// if array1 [ i ] <> array2 [ i ] then
43343: LD_VAR 0 1
43347: PUSH
43348: LD_VAR 0 4
43352: ARRAY
43353: PUSH
43354: LD_VAR 0 2
43358: PUSH
43359: LD_VAR 0 4
43363: ARRAY
43364: NONEQUAL
43365: IFFALSE 43377
// begin result := false ;
43367: LD_ADDR_VAR 0 3
43371: PUSH
43372: LD_INT 0
43374: ST_TO_ADDR
// break ;
43375: GO 43379
// end ;
43377: GO 43340
43379: POP
43380: POP
// end ;
43381: LD_VAR 0 3
43385: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43386: LD_INT 0
43388: PPUSH
43389: PPUSH
43390: PPUSH
// pom := GetBase ( fac ) ;
43391: LD_ADDR_VAR 0 5
43395: PUSH
43396: LD_VAR 0 1
43400: PPUSH
43401: CALL_OW 274
43405: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43406: LD_ADDR_VAR 0 4
43410: PUSH
43411: LD_VAR 0 2
43415: PUSH
43416: LD_INT 1
43418: ARRAY
43419: PPUSH
43420: LD_VAR 0 2
43424: PUSH
43425: LD_INT 2
43427: ARRAY
43428: PPUSH
43429: LD_VAR 0 2
43433: PUSH
43434: LD_INT 3
43436: ARRAY
43437: PPUSH
43438: LD_VAR 0 2
43442: PUSH
43443: LD_INT 4
43445: ARRAY
43446: PPUSH
43447: CALL_OW 449
43451: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43452: LD_ADDR_VAR 0 3
43456: PUSH
43457: LD_VAR 0 5
43461: PPUSH
43462: LD_INT 1
43464: PPUSH
43465: CALL_OW 275
43469: PUSH
43470: LD_VAR 0 4
43474: PUSH
43475: LD_INT 1
43477: ARRAY
43478: GREATEREQUAL
43479: PUSH
43480: LD_VAR 0 5
43484: PPUSH
43485: LD_INT 2
43487: PPUSH
43488: CALL_OW 275
43492: PUSH
43493: LD_VAR 0 4
43497: PUSH
43498: LD_INT 2
43500: ARRAY
43501: GREATEREQUAL
43502: AND
43503: PUSH
43504: LD_VAR 0 5
43508: PPUSH
43509: LD_INT 3
43511: PPUSH
43512: CALL_OW 275
43516: PUSH
43517: LD_VAR 0 4
43521: PUSH
43522: LD_INT 3
43524: ARRAY
43525: GREATEREQUAL
43526: AND
43527: ST_TO_ADDR
// end ;
43528: LD_VAR 0 3
43532: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43533: LD_INT 0
43535: PPUSH
43536: PPUSH
43537: PPUSH
43538: PPUSH
// pom := GetBase ( building ) ;
43539: LD_ADDR_VAR 0 3
43543: PUSH
43544: LD_VAR 0 1
43548: PPUSH
43549: CALL_OW 274
43553: ST_TO_ADDR
// if not pom then
43554: LD_VAR 0 3
43558: NOT
43559: IFFALSE 43563
// exit ;
43561: GO 43733
// btype := GetBType ( building ) ;
43563: LD_ADDR_VAR 0 5
43567: PUSH
43568: LD_VAR 0 1
43572: PPUSH
43573: CALL_OW 266
43577: ST_TO_ADDR
// if btype = b_armoury then
43578: LD_VAR 0 5
43582: PUSH
43583: LD_INT 4
43585: EQUAL
43586: IFFALSE 43596
// btype := b_barracks ;
43588: LD_ADDR_VAR 0 5
43592: PUSH
43593: LD_INT 5
43595: ST_TO_ADDR
// if btype = b_depot then
43596: LD_VAR 0 5
43600: PUSH
43601: LD_INT 0
43603: EQUAL
43604: IFFALSE 43614
// btype := b_warehouse ;
43606: LD_ADDR_VAR 0 5
43610: PUSH
43611: LD_INT 1
43613: ST_TO_ADDR
// if btype = b_workshop then
43614: LD_VAR 0 5
43618: PUSH
43619: LD_INT 2
43621: EQUAL
43622: IFFALSE 43632
// btype := b_factory ;
43624: LD_ADDR_VAR 0 5
43628: PUSH
43629: LD_INT 3
43631: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43632: LD_ADDR_VAR 0 4
43636: PUSH
43637: LD_VAR 0 5
43641: PPUSH
43642: LD_VAR 0 1
43646: PPUSH
43647: CALL_OW 248
43651: PPUSH
43652: CALL_OW 450
43656: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43657: LD_ADDR_VAR 0 2
43661: PUSH
43662: LD_VAR 0 3
43666: PPUSH
43667: LD_INT 1
43669: PPUSH
43670: CALL_OW 275
43674: PUSH
43675: LD_VAR 0 4
43679: PUSH
43680: LD_INT 1
43682: ARRAY
43683: GREATEREQUAL
43684: PUSH
43685: LD_VAR 0 3
43689: PPUSH
43690: LD_INT 2
43692: PPUSH
43693: CALL_OW 275
43697: PUSH
43698: LD_VAR 0 4
43702: PUSH
43703: LD_INT 2
43705: ARRAY
43706: GREATEREQUAL
43707: AND
43708: PUSH
43709: LD_VAR 0 3
43713: PPUSH
43714: LD_INT 3
43716: PPUSH
43717: CALL_OW 275
43721: PUSH
43722: LD_VAR 0 4
43726: PUSH
43727: LD_INT 3
43729: ARRAY
43730: GREATEREQUAL
43731: AND
43732: ST_TO_ADDR
// end ;
43733: LD_VAR 0 2
43737: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43738: LD_INT 0
43740: PPUSH
43741: PPUSH
43742: PPUSH
// pom := GetBase ( building ) ;
43743: LD_ADDR_VAR 0 4
43747: PUSH
43748: LD_VAR 0 1
43752: PPUSH
43753: CALL_OW 274
43757: ST_TO_ADDR
// if not pom then
43758: LD_VAR 0 4
43762: NOT
43763: IFFALSE 43767
// exit ;
43765: GO 43868
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43767: LD_ADDR_VAR 0 5
43771: PUSH
43772: LD_VAR 0 2
43776: PPUSH
43777: LD_VAR 0 1
43781: PPUSH
43782: CALL_OW 248
43786: PPUSH
43787: CALL_OW 450
43791: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43792: LD_ADDR_VAR 0 3
43796: PUSH
43797: LD_VAR 0 4
43801: PPUSH
43802: LD_INT 1
43804: PPUSH
43805: CALL_OW 275
43809: PUSH
43810: LD_VAR 0 5
43814: PUSH
43815: LD_INT 1
43817: ARRAY
43818: GREATEREQUAL
43819: PUSH
43820: LD_VAR 0 4
43824: PPUSH
43825: LD_INT 2
43827: PPUSH
43828: CALL_OW 275
43832: PUSH
43833: LD_VAR 0 5
43837: PUSH
43838: LD_INT 2
43840: ARRAY
43841: GREATEREQUAL
43842: AND
43843: PUSH
43844: LD_VAR 0 4
43848: PPUSH
43849: LD_INT 3
43851: PPUSH
43852: CALL_OW 275
43856: PUSH
43857: LD_VAR 0 5
43861: PUSH
43862: LD_INT 3
43864: ARRAY
43865: GREATEREQUAL
43866: AND
43867: ST_TO_ADDR
// end ;
43868: LD_VAR 0 3
43872: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43873: LD_INT 0
43875: PPUSH
43876: PPUSH
43877: PPUSH
43878: PPUSH
43879: PPUSH
43880: PPUSH
43881: PPUSH
43882: PPUSH
43883: PPUSH
43884: PPUSH
43885: PPUSH
// result := false ;
43886: LD_ADDR_VAR 0 8
43890: PUSH
43891: LD_INT 0
43893: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43894: LD_VAR 0 5
43898: NOT
43899: PUSH
43900: LD_VAR 0 1
43904: NOT
43905: OR
43906: PUSH
43907: LD_VAR 0 2
43911: NOT
43912: OR
43913: PUSH
43914: LD_VAR 0 3
43918: NOT
43919: OR
43920: IFFALSE 43924
// exit ;
43922: GO 44738
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43924: LD_ADDR_VAR 0 14
43928: PUSH
43929: LD_VAR 0 1
43933: PPUSH
43934: LD_VAR 0 2
43938: PPUSH
43939: LD_VAR 0 3
43943: PPUSH
43944: LD_VAR 0 4
43948: PPUSH
43949: LD_VAR 0 5
43953: PUSH
43954: LD_INT 1
43956: ARRAY
43957: PPUSH
43958: CALL_OW 248
43962: PPUSH
43963: LD_INT 0
43965: PPUSH
43966: CALL 45991 0 6
43970: ST_TO_ADDR
// if not hexes then
43971: LD_VAR 0 14
43975: NOT
43976: IFFALSE 43980
// exit ;
43978: GO 44738
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43980: LD_ADDR_VAR 0 17
43984: PUSH
43985: LD_VAR 0 5
43989: PPUSH
43990: LD_INT 22
43992: PUSH
43993: LD_VAR 0 13
43997: PPUSH
43998: CALL_OW 255
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 2
44009: PUSH
44010: LD_INT 30
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 30
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: LIST
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PPUSH
44039: CALL_OW 72
44043: ST_TO_ADDR
// for i = 1 to hexes do
44044: LD_ADDR_VAR 0 9
44048: PUSH
44049: DOUBLE
44050: LD_INT 1
44052: DEC
44053: ST_TO_ADDR
44054: LD_VAR 0 14
44058: PUSH
44059: FOR_TO
44060: IFFALSE 44736
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44062: LD_ADDR_VAR 0 13
44066: PUSH
44067: LD_VAR 0 14
44071: PUSH
44072: LD_VAR 0 9
44076: ARRAY
44077: PUSH
44078: LD_INT 1
44080: ARRAY
44081: PPUSH
44082: LD_VAR 0 14
44086: PUSH
44087: LD_VAR 0 9
44091: ARRAY
44092: PUSH
44093: LD_INT 2
44095: ARRAY
44096: PPUSH
44097: CALL_OW 428
44101: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44102: LD_VAR 0 14
44106: PUSH
44107: LD_VAR 0 9
44111: ARRAY
44112: PUSH
44113: LD_INT 1
44115: ARRAY
44116: PPUSH
44117: LD_VAR 0 14
44121: PUSH
44122: LD_VAR 0 9
44126: ARRAY
44127: PUSH
44128: LD_INT 2
44130: ARRAY
44131: PPUSH
44132: CALL_OW 351
44136: PUSH
44137: LD_VAR 0 14
44141: PUSH
44142: LD_VAR 0 9
44146: ARRAY
44147: PUSH
44148: LD_INT 1
44150: ARRAY
44151: PPUSH
44152: LD_VAR 0 14
44156: PUSH
44157: LD_VAR 0 9
44161: ARRAY
44162: PUSH
44163: LD_INT 2
44165: ARRAY
44166: PPUSH
44167: CALL_OW 488
44171: NOT
44172: OR
44173: PUSH
44174: LD_VAR 0 13
44178: PPUSH
44179: CALL_OW 247
44183: PUSH
44184: LD_INT 3
44186: EQUAL
44187: OR
44188: IFFALSE 44194
// exit ;
44190: POP
44191: POP
44192: GO 44738
// if not tmp then
44194: LD_VAR 0 13
44198: NOT
44199: IFFALSE 44203
// continue ;
44201: GO 44059
// result := true ;
44203: LD_ADDR_VAR 0 8
44207: PUSH
44208: LD_INT 1
44210: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44211: LD_VAR 0 6
44215: PUSH
44216: LD_VAR 0 13
44220: PPUSH
44221: CALL_OW 247
44225: PUSH
44226: LD_INT 2
44228: EQUAL
44229: AND
44230: PUSH
44231: LD_VAR 0 13
44235: PPUSH
44236: CALL_OW 263
44240: PUSH
44241: LD_INT 1
44243: EQUAL
44244: AND
44245: IFFALSE 44409
// begin if IsDrivenBy ( tmp ) then
44247: LD_VAR 0 13
44251: PPUSH
44252: CALL_OW 311
44256: IFFALSE 44260
// continue ;
44258: GO 44059
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44260: LD_VAR 0 6
44264: PPUSH
44265: LD_INT 3
44267: PUSH
44268: LD_INT 60
44270: PUSH
44271: EMPTY
44272: LIST
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 3
44280: PUSH
44281: LD_INT 55
44283: PUSH
44284: EMPTY
44285: LIST
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PPUSH
44295: CALL_OW 72
44299: IFFALSE 44407
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44301: LD_ADDR_VAR 0 18
44305: PUSH
44306: LD_VAR 0 6
44310: PPUSH
44311: LD_INT 3
44313: PUSH
44314: LD_INT 60
44316: PUSH
44317: EMPTY
44318: LIST
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 3
44326: PUSH
44327: LD_INT 55
44329: PUSH
44330: EMPTY
44331: LIST
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PPUSH
44341: CALL_OW 72
44345: PUSH
44346: LD_INT 1
44348: ARRAY
44349: ST_TO_ADDR
// if IsInUnit ( driver ) then
44350: LD_VAR 0 18
44354: PPUSH
44355: CALL_OW 310
44359: IFFALSE 44370
// ComExit ( driver ) ;
44361: LD_VAR 0 18
44365: PPUSH
44366: CALL 69772 0 1
// AddComEnterUnit ( driver , tmp ) ;
44370: LD_VAR 0 18
44374: PPUSH
44375: LD_VAR 0 13
44379: PPUSH
44380: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44384: LD_VAR 0 18
44388: PPUSH
44389: LD_VAR 0 7
44393: PPUSH
44394: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44398: LD_VAR 0 18
44402: PPUSH
44403: CALL_OW 181
// end ; continue ;
44407: GO 44059
// end ; if not cleaners or not tmp in cleaners then
44409: LD_VAR 0 6
44413: NOT
44414: PUSH
44415: LD_VAR 0 13
44419: PUSH
44420: LD_VAR 0 6
44424: IN
44425: NOT
44426: OR
44427: IFFALSE 44734
// begin if dep then
44429: LD_VAR 0 17
44433: IFFALSE 44569
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44435: LD_ADDR_VAR 0 16
44439: PUSH
44440: LD_VAR 0 17
44444: PUSH
44445: LD_INT 1
44447: ARRAY
44448: PPUSH
44449: CALL_OW 250
44453: PPUSH
44454: LD_VAR 0 17
44458: PUSH
44459: LD_INT 1
44461: ARRAY
44462: PPUSH
44463: CALL_OW 254
44467: PPUSH
44468: LD_INT 5
44470: PPUSH
44471: CALL_OW 272
44475: PUSH
44476: LD_VAR 0 17
44480: PUSH
44481: LD_INT 1
44483: ARRAY
44484: PPUSH
44485: CALL_OW 251
44489: PPUSH
44490: LD_VAR 0 17
44494: PUSH
44495: LD_INT 1
44497: ARRAY
44498: PPUSH
44499: CALL_OW 254
44503: PPUSH
44504: LD_INT 5
44506: PPUSH
44507: CALL_OW 273
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44516: LD_VAR 0 16
44520: PUSH
44521: LD_INT 1
44523: ARRAY
44524: PPUSH
44525: LD_VAR 0 16
44529: PUSH
44530: LD_INT 2
44532: ARRAY
44533: PPUSH
44534: CALL_OW 488
44538: IFFALSE 44569
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44540: LD_VAR 0 13
44544: PPUSH
44545: LD_VAR 0 16
44549: PUSH
44550: LD_INT 1
44552: ARRAY
44553: PPUSH
44554: LD_VAR 0 16
44558: PUSH
44559: LD_INT 2
44561: ARRAY
44562: PPUSH
44563: CALL_OW 111
// continue ;
44567: GO 44059
// end ; end ; r := GetDir ( tmp ) ;
44569: LD_ADDR_VAR 0 15
44573: PUSH
44574: LD_VAR 0 13
44578: PPUSH
44579: CALL_OW 254
44583: ST_TO_ADDR
// if r = 5 then
44584: LD_VAR 0 15
44588: PUSH
44589: LD_INT 5
44591: EQUAL
44592: IFFALSE 44602
// r := 0 ;
44594: LD_ADDR_VAR 0 15
44598: PUSH
44599: LD_INT 0
44601: ST_TO_ADDR
// for j = r to 5 do
44602: LD_ADDR_VAR 0 10
44606: PUSH
44607: DOUBLE
44608: LD_VAR 0 15
44612: DEC
44613: ST_TO_ADDR
44614: LD_INT 5
44616: PUSH
44617: FOR_TO
44618: IFFALSE 44732
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44620: LD_ADDR_VAR 0 11
44624: PUSH
44625: LD_VAR 0 13
44629: PPUSH
44630: CALL_OW 250
44634: PPUSH
44635: LD_VAR 0 10
44639: PPUSH
44640: LD_INT 2
44642: PPUSH
44643: CALL_OW 272
44647: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44648: LD_ADDR_VAR 0 12
44652: PUSH
44653: LD_VAR 0 13
44657: PPUSH
44658: CALL_OW 251
44662: PPUSH
44663: LD_VAR 0 10
44667: PPUSH
44668: LD_INT 2
44670: PPUSH
44671: CALL_OW 273
44675: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44676: LD_VAR 0 11
44680: PPUSH
44681: LD_VAR 0 12
44685: PPUSH
44686: CALL_OW 488
44690: PUSH
44691: LD_VAR 0 11
44695: PPUSH
44696: LD_VAR 0 12
44700: PPUSH
44701: CALL_OW 428
44705: NOT
44706: AND
44707: IFFALSE 44730
// begin ComMoveXY ( tmp , _x , _y ) ;
44709: LD_VAR 0 13
44713: PPUSH
44714: LD_VAR 0 11
44718: PPUSH
44719: LD_VAR 0 12
44723: PPUSH
44724: CALL_OW 111
// break ;
44728: GO 44732
// end ; end ;
44730: GO 44617
44732: POP
44733: POP
// end ; end ;
44734: GO 44059
44736: POP
44737: POP
// end ;
44738: LD_VAR 0 8
44742: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44743: LD_INT 0
44745: PPUSH
// result := true ;
44746: LD_ADDR_VAR 0 3
44750: PUSH
44751: LD_INT 1
44753: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44754: LD_VAR 0 2
44758: PUSH
44759: LD_INT 24
44761: DOUBLE
44762: EQUAL
44763: IFTRUE 44773
44765: LD_INT 33
44767: DOUBLE
44768: EQUAL
44769: IFTRUE 44773
44771: GO 44798
44773: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44774: LD_ADDR_VAR 0 3
44778: PUSH
44779: LD_INT 32
44781: PPUSH
44782: LD_VAR 0 1
44786: PPUSH
44787: CALL_OW 321
44791: PUSH
44792: LD_INT 2
44794: EQUAL
44795: ST_TO_ADDR
44796: GO 45114
44798: LD_INT 20
44800: DOUBLE
44801: EQUAL
44802: IFTRUE 44806
44804: GO 44831
44806: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44807: LD_ADDR_VAR 0 3
44811: PUSH
44812: LD_INT 6
44814: PPUSH
44815: LD_VAR 0 1
44819: PPUSH
44820: CALL_OW 321
44824: PUSH
44825: LD_INT 2
44827: EQUAL
44828: ST_TO_ADDR
44829: GO 45114
44831: LD_INT 22
44833: DOUBLE
44834: EQUAL
44835: IFTRUE 44845
44837: LD_INT 36
44839: DOUBLE
44840: EQUAL
44841: IFTRUE 44845
44843: GO 44870
44845: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44846: LD_ADDR_VAR 0 3
44850: PUSH
44851: LD_INT 15
44853: PPUSH
44854: LD_VAR 0 1
44858: PPUSH
44859: CALL_OW 321
44863: PUSH
44864: LD_INT 2
44866: EQUAL
44867: ST_TO_ADDR
44868: GO 45114
44870: LD_INT 30
44872: DOUBLE
44873: EQUAL
44874: IFTRUE 44878
44876: GO 44903
44878: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44879: LD_ADDR_VAR 0 3
44883: PUSH
44884: LD_INT 20
44886: PPUSH
44887: LD_VAR 0 1
44891: PPUSH
44892: CALL_OW 321
44896: PUSH
44897: LD_INT 2
44899: EQUAL
44900: ST_TO_ADDR
44901: GO 45114
44903: LD_INT 28
44905: DOUBLE
44906: EQUAL
44907: IFTRUE 44917
44909: LD_INT 21
44911: DOUBLE
44912: EQUAL
44913: IFTRUE 44917
44915: GO 44942
44917: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44918: LD_ADDR_VAR 0 3
44922: PUSH
44923: LD_INT 21
44925: PPUSH
44926: LD_VAR 0 1
44930: PPUSH
44931: CALL_OW 321
44935: PUSH
44936: LD_INT 2
44938: EQUAL
44939: ST_TO_ADDR
44940: GO 45114
44942: LD_INT 16
44944: DOUBLE
44945: EQUAL
44946: IFTRUE 44950
44948: GO 44975
44950: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44951: LD_ADDR_VAR 0 3
44955: PUSH
44956: LD_INT 84
44958: PPUSH
44959: LD_VAR 0 1
44963: PPUSH
44964: CALL_OW 321
44968: PUSH
44969: LD_INT 2
44971: EQUAL
44972: ST_TO_ADDR
44973: GO 45114
44975: LD_INT 19
44977: DOUBLE
44978: EQUAL
44979: IFTRUE 44989
44981: LD_INT 23
44983: DOUBLE
44984: EQUAL
44985: IFTRUE 44989
44987: GO 45014
44989: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44990: LD_ADDR_VAR 0 3
44994: PUSH
44995: LD_INT 83
44997: PPUSH
44998: LD_VAR 0 1
45002: PPUSH
45003: CALL_OW 321
45007: PUSH
45008: LD_INT 2
45010: EQUAL
45011: ST_TO_ADDR
45012: GO 45114
45014: LD_INT 17
45016: DOUBLE
45017: EQUAL
45018: IFTRUE 45022
45020: GO 45047
45022: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45023: LD_ADDR_VAR 0 3
45027: PUSH
45028: LD_INT 39
45030: PPUSH
45031: LD_VAR 0 1
45035: PPUSH
45036: CALL_OW 321
45040: PUSH
45041: LD_INT 2
45043: EQUAL
45044: ST_TO_ADDR
45045: GO 45114
45047: LD_INT 18
45049: DOUBLE
45050: EQUAL
45051: IFTRUE 45055
45053: GO 45080
45055: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45056: LD_ADDR_VAR 0 3
45060: PUSH
45061: LD_INT 40
45063: PPUSH
45064: LD_VAR 0 1
45068: PPUSH
45069: CALL_OW 321
45073: PUSH
45074: LD_INT 2
45076: EQUAL
45077: ST_TO_ADDR
45078: GO 45114
45080: LD_INT 27
45082: DOUBLE
45083: EQUAL
45084: IFTRUE 45088
45086: GO 45113
45088: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45089: LD_ADDR_VAR 0 3
45093: PUSH
45094: LD_INT 35
45096: PPUSH
45097: LD_VAR 0 1
45101: PPUSH
45102: CALL_OW 321
45106: PUSH
45107: LD_INT 2
45109: EQUAL
45110: ST_TO_ADDR
45111: GO 45114
45113: POP
// end ;
45114: LD_VAR 0 3
45118: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45119: LD_INT 0
45121: PPUSH
45122: PPUSH
45123: PPUSH
45124: PPUSH
45125: PPUSH
45126: PPUSH
45127: PPUSH
45128: PPUSH
45129: PPUSH
45130: PPUSH
45131: PPUSH
// result := false ;
45132: LD_ADDR_VAR 0 6
45136: PUSH
45137: LD_INT 0
45139: ST_TO_ADDR
// if btype = b_depot then
45140: LD_VAR 0 2
45144: PUSH
45145: LD_INT 0
45147: EQUAL
45148: IFFALSE 45160
// begin result := true ;
45150: LD_ADDR_VAR 0 6
45154: PUSH
45155: LD_INT 1
45157: ST_TO_ADDR
// exit ;
45158: GO 45986
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45160: LD_VAR 0 1
45164: NOT
45165: PUSH
45166: LD_VAR 0 1
45170: PPUSH
45171: CALL_OW 266
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: IN
45186: NOT
45187: OR
45188: PUSH
45189: LD_VAR 0 2
45193: NOT
45194: OR
45195: PUSH
45196: LD_VAR 0 5
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: LD_INT 3
45212: PUSH
45213: LD_INT 4
45215: PUSH
45216: LD_INT 5
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: IN
45227: NOT
45228: OR
45229: PUSH
45230: LD_VAR 0 3
45234: PPUSH
45235: LD_VAR 0 4
45239: PPUSH
45240: CALL_OW 488
45244: NOT
45245: OR
45246: IFFALSE 45250
// exit ;
45248: GO 45986
// side := GetSide ( depot ) ;
45250: LD_ADDR_VAR 0 9
45254: PUSH
45255: LD_VAR 0 1
45259: PPUSH
45260: CALL_OW 255
45264: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45265: LD_VAR 0 9
45269: PPUSH
45270: LD_VAR 0 2
45274: PPUSH
45275: CALL 44743 0 2
45279: NOT
45280: IFFALSE 45284
// exit ;
45282: GO 45986
// pom := GetBase ( depot ) ;
45284: LD_ADDR_VAR 0 10
45288: PUSH
45289: LD_VAR 0 1
45293: PPUSH
45294: CALL_OW 274
45298: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45299: LD_ADDR_VAR 0 11
45303: PUSH
45304: LD_VAR 0 2
45308: PPUSH
45309: LD_VAR 0 1
45313: PPUSH
45314: CALL_OW 248
45318: PPUSH
45319: CALL_OW 450
45323: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45324: LD_VAR 0 10
45328: PPUSH
45329: LD_INT 1
45331: PPUSH
45332: CALL_OW 275
45336: PUSH
45337: LD_VAR 0 11
45341: PUSH
45342: LD_INT 1
45344: ARRAY
45345: GREATEREQUAL
45346: PUSH
45347: LD_VAR 0 10
45351: PPUSH
45352: LD_INT 2
45354: PPUSH
45355: CALL_OW 275
45359: PUSH
45360: LD_VAR 0 11
45364: PUSH
45365: LD_INT 2
45367: ARRAY
45368: GREATEREQUAL
45369: AND
45370: PUSH
45371: LD_VAR 0 10
45375: PPUSH
45376: LD_INT 3
45378: PPUSH
45379: CALL_OW 275
45383: PUSH
45384: LD_VAR 0 11
45388: PUSH
45389: LD_INT 3
45391: ARRAY
45392: GREATEREQUAL
45393: AND
45394: NOT
45395: IFFALSE 45399
// exit ;
45397: GO 45986
// if GetBType ( depot ) = b_depot then
45399: LD_VAR 0 1
45403: PPUSH
45404: CALL_OW 266
45408: PUSH
45409: LD_INT 0
45411: EQUAL
45412: IFFALSE 45424
// dist := 28 else
45414: LD_ADDR_VAR 0 14
45418: PUSH
45419: LD_INT 28
45421: ST_TO_ADDR
45422: GO 45432
// dist := 36 ;
45424: LD_ADDR_VAR 0 14
45428: PUSH
45429: LD_INT 36
45431: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45432: LD_VAR 0 1
45436: PPUSH
45437: LD_VAR 0 3
45441: PPUSH
45442: LD_VAR 0 4
45446: PPUSH
45447: CALL_OW 297
45451: PUSH
45452: LD_VAR 0 14
45456: GREATER
45457: IFFALSE 45461
// exit ;
45459: GO 45986
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45461: LD_ADDR_VAR 0 12
45465: PUSH
45466: LD_VAR 0 2
45470: PPUSH
45471: LD_VAR 0 3
45475: PPUSH
45476: LD_VAR 0 4
45480: PPUSH
45481: LD_VAR 0 5
45485: PPUSH
45486: LD_VAR 0 1
45490: PPUSH
45491: CALL_OW 248
45495: PPUSH
45496: LD_INT 0
45498: PPUSH
45499: CALL 45991 0 6
45503: ST_TO_ADDR
// if not hexes then
45504: LD_VAR 0 12
45508: NOT
45509: IFFALSE 45513
// exit ;
45511: GO 45986
// hex := GetHexInfo ( x , y ) ;
45513: LD_ADDR_VAR 0 15
45517: PUSH
45518: LD_VAR 0 3
45522: PPUSH
45523: LD_VAR 0 4
45527: PPUSH
45528: CALL_OW 546
45532: ST_TO_ADDR
// if hex [ 1 ] then
45533: LD_VAR 0 15
45537: PUSH
45538: LD_INT 1
45540: ARRAY
45541: IFFALSE 45545
// exit ;
45543: GO 45986
// height := hex [ 2 ] ;
45545: LD_ADDR_VAR 0 13
45549: PUSH
45550: LD_VAR 0 15
45554: PUSH
45555: LD_INT 2
45557: ARRAY
45558: ST_TO_ADDR
// for i = 1 to hexes do
45559: LD_ADDR_VAR 0 7
45563: PUSH
45564: DOUBLE
45565: LD_INT 1
45567: DEC
45568: ST_TO_ADDR
45569: LD_VAR 0 12
45573: PUSH
45574: FOR_TO
45575: IFFALSE 45905
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45577: LD_VAR 0 12
45581: PUSH
45582: LD_VAR 0 7
45586: ARRAY
45587: PUSH
45588: LD_INT 1
45590: ARRAY
45591: PPUSH
45592: LD_VAR 0 12
45596: PUSH
45597: LD_VAR 0 7
45601: ARRAY
45602: PUSH
45603: LD_INT 2
45605: ARRAY
45606: PPUSH
45607: CALL_OW 488
45611: NOT
45612: PUSH
45613: LD_VAR 0 12
45617: PUSH
45618: LD_VAR 0 7
45622: ARRAY
45623: PUSH
45624: LD_INT 1
45626: ARRAY
45627: PPUSH
45628: LD_VAR 0 12
45632: PUSH
45633: LD_VAR 0 7
45637: ARRAY
45638: PUSH
45639: LD_INT 2
45641: ARRAY
45642: PPUSH
45643: CALL_OW 428
45647: PUSH
45648: LD_INT 0
45650: GREATER
45651: OR
45652: PUSH
45653: LD_VAR 0 12
45657: PUSH
45658: LD_VAR 0 7
45662: ARRAY
45663: PUSH
45664: LD_INT 1
45666: ARRAY
45667: PPUSH
45668: LD_VAR 0 12
45672: PUSH
45673: LD_VAR 0 7
45677: ARRAY
45678: PUSH
45679: LD_INT 2
45681: ARRAY
45682: PPUSH
45683: CALL_OW 351
45687: OR
45688: IFFALSE 45694
// exit ;
45690: POP
45691: POP
45692: GO 45986
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45694: LD_ADDR_VAR 0 8
45698: PUSH
45699: LD_VAR 0 12
45703: PUSH
45704: LD_VAR 0 7
45708: ARRAY
45709: PUSH
45710: LD_INT 1
45712: ARRAY
45713: PPUSH
45714: LD_VAR 0 12
45718: PUSH
45719: LD_VAR 0 7
45723: ARRAY
45724: PUSH
45725: LD_INT 2
45727: ARRAY
45728: PPUSH
45729: CALL_OW 546
45733: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45734: LD_VAR 0 8
45738: PUSH
45739: LD_INT 1
45741: ARRAY
45742: PUSH
45743: LD_VAR 0 8
45747: PUSH
45748: LD_INT 2
45750: ARRAY
45751: PUSH
45752: LD_VAR 0 13
45756: PUSH
45757: LD_INT 2
45759: PLUS
45760: GREATER
45761: OR
45762: PUSH
45763: LD_VAR 0 8
45767: PUSH
45768: LD_INT 2
45770: ARRAY
45771: PUSH
45772: LD_VAR 0 13
45776: PUSH
45777: LD_INT 2
45779: MINUS
45780: LESS
45781: OR
45782: PUSH
45783: LD_VAR 0 8
45787: PUSH
45788: LD_INT 3
45790: ARRAY
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 8
45797: PUSH
45798: LD_INT 9
45800: PUSH
45801: LD_INT 10
45803: PUSH
45804: LD_INT 11
45806: PUSH
45807: LD_INT 12
45809: PUSH
45810: LD_INT 13
45812: PUSH
45813: LD_INT 16
45815: PUSH
45816: LD_INT 17
45818: PUSH
45819: LD_INT 18
45821: PUSH
45822: LD_INT 19
45824: PUSH
45825: LD_INT 20
45827: PUSH
45828: LD_INT 21
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: IN
45846: NOT
45847: OR
45848: PUSH
45849: LD_VAR 0 8
45853: PUSH
45854: LD_INT 5
45856: ARRAY
45857: NOT
45858: OR
45859: PUSH
45860: LD_VAR 0 8
45864: PUSH
45865: LD_INT 6
45867: ARRAY
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: LD_INT 7
45877: PUSH
45878: LD_INT 9
45880: PUSH
45881: LD_INT 10
45883: PUSH
45884: LD_INT 11
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: IN
45895: NOT
45896: OR
45897: IFFALSE 45903
// exit ;
45899: POP
45900: POP
45901: GO 45986
// end ;
45903: GO 45574
45905: POP
45906: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45907: LD_VAR 0 9
45911: PPUSH
45912: LD_VAR 0 3
45916: PPUSH
45917: LD_VAR 0 4
45921: PPUSH
45922: LD_INT 20
45924: PPUSH
45925: CALL 37909 0 4
45929: PUSH
45930: LD_INT 4
45932: ARRAY
45933: IFFALSE 45937
// exit ;
45935: GO 45986
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45937: LD_VAR 0 2
45941: PUSH
45942: LD_INT 29
45944: PUSH
45945: LD_INT 30
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: IN
45952: PUSH
45953: LD_VAR 0 3
45957: PPUSH
45958: LD_VAR 0 4
45962: PPUSH
45963: LD_VAR 0 9
45967: PPUSH
45968: CALL_OW 440
45972: NOT
45973: AND
45974: IFFALSE 45978
// exit ;
45976: GO 45986
// result := true ;
45978: LD_ADDR_VAR 0 6
45982: PUSH
45983: LD_INT 1
45985: ST_TO_ADDR
// end ;
45986: LD_VAR 0 6
45990: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45991: LD_INT 0
45993: PPUSH
45994: PPUSH
45995: PPUSH
45996: PPUSH
45997: PPUSH
45998: PPUSH
45999: PPUSH
46000: PPUSH
46001: PPUSH
46002: PPUSH
46003: PPUSH
46004: PPUSH
46005: PPUSH
46006: PPUSH
46007: PPUSH
46008: PPUSH
46009: PPUSH
46010: PPUSH
46011: PPUSH
46012: PPUSH
46013: PPUSH
46014: PPUSH
46015: PPUSH
46016: PPUSH
46017: PPUSH
46018: PPUSH
46019: PPUSH
46020: PPUSH
46021: PPUSH
46022: PPUSH
46023: PPUSH
46024: PPUSH
46025: PPUSH
46026: PPUSH
46027: PPUSH
46028: PPUSH
46029: PPUSH
46030: PPUSH
46031: PPUSH
46032: PPUSH
46033: PPUSH
46034: PPUSH
46035: PPUSH
46036: PPUSH
46037: PPUSH
46038: PPUSH
46039: PPUSH
46040: PPUSH
46041: PPUSH
46042: PPUSH
46043: PPUSH
46044: PPUSH
46045: PPUSH
46046: PPUSH
46047: PPUSH
46048: PPUSH
46049: PPUSH
46050: PPUSH
// result = [ ] ;
46051: LD_ADDR_VAR 0 7
46055: PUSH
46056: EMPTY
46057: ST_TO_ADDR
// temp_list = [ ] ;
46058: LD_ADDR_VAR 0 9
46062: PUSH
46063: EMPTY
46064: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46065: LD_VAR 0 4
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 3
46081: PUSH
46082: LD_INT 4
46084: PUSH
46085: LD_INT 5
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: IN
46096: NOT
46097: PUSH
46098: LD_VAR 0 1
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: IN
46113: PUSH
46114: LD_VAR 0 5
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: LD_INT 3
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: IN
46133: NOT
46134: AND
46135: OR
46136: IFFALSE 46140
// exit ;
46138: GO 64531
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46140: LD_VAR 0 1
46144: PUSH
46145: LD_INT 6
46147: PUSH
46148: LD_INT 7
46150: PUSH
46151: LD_INT 8
46153: PUSH
46154: LD_INT 13
46156: PUSH
46157: LD_INT 12
46159: PUSH
46160: LD_INT 15
46162: PUSH
46163: LD_INT 11
46165: PUSH
46166: LD_INT 14
46168: PUSH
46169: LD_INT 10
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: IN
46183: IFFALSE 46193
// btype = b_lab ;
46185: LD_ADDR_VAR 0 1
46189: PUSH
46190: LD_INT 6
46192: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46193: LD_VAR 0 6
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: LIST
46211: IN
46212: NOT
46213: PUSH
46214: LD_VAR 0 1
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: LD_INT 3
46230: PUSH
46231: LD_INT 6
46233: PUSH
46234: LD_INT 36
46236: PUSH
46237: LD_INT 4
46239: PUSH
46240: LD_INT 5
46242: PUSH
46243: LD_INT 31
46245: PUSH
46246: LD_INT 32
46248: PUSH
46249: LD_INT 33
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: IN
46265: NOT
46266: PUSH
46267: LD_VAR 0 6
46271: PUSH
46272: LD_INT 1
46274: EQUAL
46275: AND
46276: OR
46277: PUSH
46278: LD_VAR 0 1
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: LD_INT 3
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: IN
46293: NOT
46294: PUSH
46295: LD_VAR 0 6
46299: PUSH
46300: LD_INT 2
46302: EQUAL
46303: AND
46304: OR
46305: IFFALSE 46315
// mode = 0 ;
46307: LD_ADDR_VAR 0 6
46311: PUSH
46312: LD_INT 0
46314: ST_TO_ADDR
// case mode of 0 :
46315: LD_VAR 0 6
46319: PUSH
46320: LD_INT 0
46322: DOUBLE
46323: EQUAL
46324: IFTRUE 46328
46326: GO 57781
46328: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46329: LD_ADDR_VAR 0 11
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: LD_INT 2
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: LD_INT 2
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: LD_INT 3
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 3
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46522: LD_ADDR_VAR 0 12
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 2
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 3
46679: NEG
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 3
46690: NEG
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46718: LD_ADDR_VAR 0 13
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: NEG
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 2
46853: NEG
46854: PUSH
46855: LD_INT 2
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 2
46865: NEG
46866: PUSH
46867: LD_INT 3
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 3
46877: NEG
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 3
46889: NEG
46890: PUSH
46891: LD_INT 3
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46917: LD_ADDR_VAR 0 14
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: LD_INT 3
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: LD_INT 3
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47113: LD_ADDR_VAR 0 15
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 2
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: NEG
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 3
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 3
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47306: LD_ADDR_VAR 0 16
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 2
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 2
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: LD_INT 2
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 3
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 3
47463: PUSH
47464: LD_INT 3
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: LD_INT 3
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47499: LD_ADDR_VAR 0 17
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 2
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: LD_INT 2
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47729: LD_ADDR_VAR 0 18
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: NEG
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47959: LD_ADDR_VAR 0 19
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 2
48094: PUSH
48095: LD_INT 2
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 2
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: NEG
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48189: LD_ADDR_VAR 0 20
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 2
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: NEG
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48419: LD_ADDR_VAR 0 21
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: LD_INT 1
48439: NEG
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: LD_INT 2
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: NEG
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: LD_INT 2
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48649: LD_ADDR_VAR 0 22
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: NEG
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 2
48836: NEG
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: NEG
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48879: LD_ADDR_VAR 0 23
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: LD_INT 2
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 2
49090: NEG
49091: PUSH
49092: LD_INT 3
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 3
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49159: LD_ADDR_VAR 0 24
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 2
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 2
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 2
49346: NEG
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: LD_INT 2
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 3
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 3
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49435: LD_ADDR_VAR 0 25
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: LD_INT 2
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: LD_INT 2
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: LD_INT 1
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 2
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 2
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: LD_INT 2
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 2
49611: NEG
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: LD_INT 2
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 3
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 3
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: LD_INT 3
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: LD_INT 3
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49709: LD_ADDR_VAR 0 26
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 2
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: LD_INT 2
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: LD_INT 3
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: LD_INT 3
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: NEG
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49985: LD_ADDR_VAR 0 27
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: NEG
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 3
50218: NEG
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 3
50230: NEG
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50265: LD_ADDR_VAR 0 28
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: LD_INT 2
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 2
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 2
50464: NEG
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 2
50476: NEG
50477: PUSH
50478: LD_INT 3
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: LD_INT 3
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 3
50500: NEG
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 3
50512: NEG
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50547: LD_ADDR_VAR 0 29
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 2
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: LD_INT 2
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: LD_INT 3
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 3
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 3
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: LD_INT 2
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 3
50791: NEG
50792: PUSH
50793: LD_INT 2
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50826: LD_ADDR_VAR 0 30
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: LD_INT 2
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 2
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: NEG
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 2
51003: NEG
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 3
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 3
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 2
51048: PUSH
51049: LD_INT 3
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 2
51058: NEG
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 3
51069: NEG
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51104: LD_ADDR_VAR 0 31
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: LD_INT 1
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: LD_INT 0
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: LD_INT 3
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 3
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: LD_INT 3
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 3
51347: NEG
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51382: LD_ADDR_VAR 0 32
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: LD_INT 2
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: LD_INT 2
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: NEG
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 2
51559: NEG
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: LD_INT 3
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 3
51594: PUSH
51595: LD_INT 2
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 2
51604: PUSH
51605: LD_INT 3
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 3
51625: NEG
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51660: LD_ADDR_VAR 0 33
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 2
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 2
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: LD_INT 2
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 2
51815: NEG
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 2
51826: NEG
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: NEG
51839: PUSH
51840: LD_INT 2
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 2
51850: NEG
51851: PUSH
51852: LD_INT 3
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 3
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: LD_INT 3
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: LD_INT 2
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 3
51904: NEG
51905: PUSH
51906: LD_INT 2
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51939: LD_ADDR_VAR 0 34
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: LD_INT 2
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 2
52095: NEG
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 2
52118: NEG
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 3
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 3
52153: PUSH
52154: LD_INT 2
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: LD_INT 3
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 3
52184: NEG
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52219: LD_ADDR_VAR 0 35
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 2
52310: NEG
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52331: LD_ADDR_VAR 0 36
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52443: LD_ADDR_VAR 0 37
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52555: LD_ADDR_VAR 0 38
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52667: LD_ADDR_VAR 0 39
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: LD_INT 2
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52779: LD_ADDR_VAR 0 40
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52891: LD_ADDR_VAR 0 41
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: LD_INT 2
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 2
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 2
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: PUSH
53016: LD_INT 2
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: LD_INT 2
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 2
53057: NEG
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 2
53069: NEG
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 2
53081: NEG
53082: PUSH
53083: LD_INT 3
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 3
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 3
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 3
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 3
53134: PUSH
53135: LD_INT 3
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 2
53144: PUSH
53145: LD_INT 3
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 3
53165: NEG
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 3
53176: NEG
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 3
53188: NEG
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 3
53200: NEG
53201: PUSH
53202: LD_INT 3
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53241: LD_ADDR_VAR 0 42
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 2
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: NEG
53432: PUSH
53433: LD_INT 3
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: LD_INT 3
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: LD_INT 3
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 3
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 3
53487: PUSH
53488: LD_INT 3
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: LD_INT 3
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 3
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 3
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 3
53538: NEG
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 3
53550: NEG
53551: PUSH
53552: LD_INT 3
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53591: LD_ADDR_VAR 0 43
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 2
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 2
53757: NEG
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: LD_INT 3
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: LD_INT 3
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: LD_INT 2
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 2
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 3
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: LD_INT 3
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 3
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 3
53898: NEG
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53939: LD_ADDR_VAR 0 44
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 2
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 2
54094: NEG
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: NEG
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 2
54117: NEG
54118: PUSH
54119: LD_INT 2
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 2
54129: NEG
54130: PUSH
54131: LD_INT 3
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 3
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 3
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 3
54182: PUSH
54183: LD_INT 3
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 2
54192: PUSH
54193: LD_INT 3
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 2
54202: NEG
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 3
54213: NEG
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 3
54224: NEG
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 3
54236: NEG
54237: PUSH
54238: LD_INT 2
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 3
54248: NEG
54249: PUSH
54250: LD_INT 3
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54289: LD_ADDR_VAR 0 45
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: NEG
54468: PUSH
54469: LD_INT 2
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: LD_INT 3
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 3
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 3
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 3
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 3
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 3
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 3
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: LD_INT 2
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 3
54586: NEG
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 3
54598: NEG
54599: PUSH
54600: LD_INT 3
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54639: LD_ADDR_VAR 0 46
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: NEG
54721: PUSH
54722: LD_INT 2
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: LD_INT 2
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 2
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 2
54764: PUSH
54765: LD_INT 1
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: LD_INT 2
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: NEG
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 2
54805: NEG
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: NEG
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: LD_INT 3
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: LD_INT 3
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 3
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 3
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: LD_INT 3
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 3
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 3
54935: NEG
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54987: LD_ADDR_VAR 0 47
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: LD_INT 2
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: LD_INT 2
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55138: LD_ADDR_VAR 0 48
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: LD_INT 2
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 2
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 2
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55285: LD_ADDR_VAR 0 49
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: PUSH
55408: LD_INT 2
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55429: LD_ADDR_VAR 0 50
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: LD_INT 2
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55573: LD_ADDR_VAR 0 51
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 2
55685: NEG
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55720: LD_ADDR_VAR 0 52
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 2
55824: NEG
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 2
55835: NEG
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: NEG
55848: PUSH
55849: LD_INT 2
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55871: LD_ADDR_VAR 0 53
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: LD_INT 2
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: LD_INT 2
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 2
56070: NEG
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56101: LD_ADDR_VAR 0 54
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 2
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 2
56288: NEG
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 2
56300: NEG
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56331: LD_ADDR_VAR 0 55
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: LD_INT 2
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: LD_INT 2
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: LD_INT 2
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 2
56518: NEG
56519: PUSH
56520: LD_INT 1
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 2
56530: NEG
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56561: LD_ADDR_VAR 0 56
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: LD_INT 2
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 2
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: LD_INT 1
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 2
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 2
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56791: LD_ADDR_VAR 0 57
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 2
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57021: LD_ADDR_VAR 0 58
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 2
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 2
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 2
57208: NEG
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: NEG
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57251: LD_ADDR_VAR 0 59
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57339: LD_ADDR_VAR 0 60
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57427: LD_ADDR_VAR 0 61
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57515: LD_ADDR_VAR 0 62
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57603: LD_ADDR_VAR 0 63
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57691: LD_ADDR_VAR 0 64
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: ST_TO_ADDR
// end ; 1 :
57779: GO 63676
57781: LD_INT 1
57783: DOUBLE
57784: EQUAL
57785: IFTRUE 57789
57787: GO 60412
57789: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57790: LD_ADDR_VAR 0 11
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: LD_INT 3
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: LD_INT 3
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: LD_INT 2
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: LIST
57833: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57834: LD_ADDR_VAR 0 12
57838: PUSH
57839: LD_INT 2
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 3
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 3
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: LIST
57874: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57875: LD_ADDR_VAR 0 13
57879: PUSH
57880: LD_INT 3
57882: PUSH
57883: LD_INT 2
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 3
57892: PUSH
57893: LD_INT 3
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: LD_INT 3
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: LIST
57914: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57915: LD_ADDR_VAR 0 14
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: LD_INT 3
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: LD_INT 3
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: LD_INT 2
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: LIST
57955: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57956: LD_ADDR_VAR 0 15
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 3
57974: NEG
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 3
57985: NEG
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: LIST
57999: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58000: LD_ADDR_VAR 0 16
58004: PUSH
58005: LD_INT 2
58007: NEG
58008: PUSH
58009: LD_INT 3
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 3
58019: NEG
58020: PUSH
58021: LD_INT 2
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 3
58031: NEG
58032: PUSH
58033: LD_INT 3
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: LIST
58045: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58046: LD_ADDR_VAR 0 17
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: LD_INT 3
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: LD_INT 3
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: LIST
58089: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58090: LD_ADDR_VAR 0 18
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 3
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 3
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: LIST
58130: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58131: LD_ADDR_VAR 0 19
58135: PUSH
58136: LD_INT 3
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 3
58148: PUSH
58149: LD_INT 3
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 2
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: LIST
58170: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58171: LD_ADDR_VAR 0 20
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: LD_INT 3
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: LD_INT 3
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: LIST
58211: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58212: LD_ADDR_VAR 0 21
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 3
58230: NEG
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 3
58241: NEG
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: LIST
58255: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58256: LD_ADDR_VAR 0 22
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: LD_INT 3
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 3
58275: NEG
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 3
58287: NEG
58288: PUSH
58289: LD_INT 3
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: LIST
58301: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58302: LD_ADDR_VAR 0 23
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: LD_INT 3
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: LD_INT 4
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: LD_INT 3
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: LIST
58345: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58346: LD_ADDR_VAR 0 24
58350: PUSH
58351: LD_INT 3
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 3
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 4
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: LIST
58386: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58387: LD_ADDR_VAR 0 25
58391: PUSH
58392: LD_INT 3
58394: PUSH
58395: LD_INT 3
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 4
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 3
58414: PUSH
58415: LD_INT 4
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: LIST
58426: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58427: LD_ADDR_VAR 0 26
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: LD_INT 3
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: LD_INT 4
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: LD_INT 3
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: LIST
58467: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58468: LD_ADDR_VAR 0 27
58472: PUSH
58473: LD_INT 3
58475: NEG
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 3
58486: NEG
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 4
58497: NEG
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: LIST
58511: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58512: LD_ADDR_VAR 0 28
58516: PUSH
58517: LD_INT 3
58519: NEG
58520: PUSH
58521: LD_INT 3
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 3
58531: NEG
58532: PUSH
58533: LD_INT 4
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 4
58543: NEG
58544: PUSH
58545: LD_INT 3
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: LIST
58557: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58558: LD_ADDR_VAR 0 29
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: LD_INT 3
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: LD_INT 2
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: LD_INT 4
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: LD_INT 4
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: LD_INT 3
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: LD_INT 5
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: LD_INT 5
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: LD_INT 4
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: LD_INT 6
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: LD_INT 6
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: LD_INT 5
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58713: LD_ADDR_VAR 0 30
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 3
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 3
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 3
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 4
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 4
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 4
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 5
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 5
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 5
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 6
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 6
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58856: LD_ADDR_VAR 0 31
58860: PUSH
58861: LD_INT 3
58863: PUSH
58864: LD_INT 2
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 3
58873: PUSH
58874: LD_INT 3
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 2
58883: PUSH
58884: LD_INT 3
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 4
58893: PUSH
58894: LD_INT 3
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 4
58903: PUSH
58904: LD_INT 4
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 3
58913: PUSH
58914: LD_INT 4
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 5
58923: PUSH
58924: LD_INT 4
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 5
58933: PUSH
58934: LD_INT 5
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 4
58943: PUSH
58944: LD_INT 5
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 6
58953: PUSH
58954: LD_INT 5
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 6
58963: PUSH
58964: LD_INT 6
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 5
58973: PUSH
58974: LD_INT 6
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58995: LD_ADDR_VAR 0 32
58999: PUSH
59000: LD_INT 1
59002: PUSH
59003: LD_INT 3
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: LD_INT 3
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: LD_INT 4
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: LD_INT 4
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: LD_INT 3
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: LD_INT 5
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: LD_INT 5
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: LD_INT 4
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: LD_INT 6
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: LD_INT 6
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: LD_INT 5
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59138: LD_ADDR_VAR 0 33
59142: PUSH
59143: LD_INT 2
59145: NEG
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 3
59156: NEG
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 3
59167: NEG
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 3
59179: NEG
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 4
59190: NEG
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 4
59201: NEG
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 4
59213: NEG
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 5
59224: NEG
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 5
59235: NEG
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 5
59247: NEG
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 6
59258: NEG
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 6
59269: NEG
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59293: LD_ADDR_VAR 0 34
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: LD_INT 3
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 3
59312: NEG
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 3
59324: NEG
59325: PUSH
59326: LD_INT 3
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 3
59336: NEG
59337: PUSH
59338: LD_INT 4
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 4
59348: NEG
59349: PUSH
59350: LD_INT 3
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 4
59360: NEG
59361: PUSH
59362: LD_INT 4
59364: NEG
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 4
59372: NEG
59373: PUSH
59374: LD_INT 5
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 5
59384: NEG
59385: PUSH
59386: LD_INT 4
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 5
59396: NEG
59397: PUSH
59398: LD_INT 5
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 5
59408: NEG
59409: PUSH
59410: LD_INT 6
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 6
59420: NEG
59421: PUSH
59422: LD_INT 5
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 6
59432: NEG
59433: PUSH
59434: LD_INT 6
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59456: LD_ADDR_VAR 0 41
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 2
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: LD_INT 3
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: LIST
59499: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59500: LD_ADDR_VAR 0 42
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 3
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: LIST
59540: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59541: LD_ADDR_VAR 0 43
59545: PUSH
59546: LD_INT 2
59548: PUSH
59549: LD_INT 2
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 3
59558: PUSH
59559: LD_INT 2
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 2
59568: PUSH
59569: LD_INT 3
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: LIST
59580: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59581: LD_ADDR_VAR 0 44
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: LD_INT 2
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: LD_INT 3
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: LD_INT 2
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: LIST
59621: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59622: LD_ADDR_VAR 0 45
59626: PUSH
59627: LD_INT 2
59629: NEG
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 2
59640: NEG
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 3
59651: NEG
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59666: LD_ADDR_VAR 0 46
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: LD_INT 2
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 2
59685: NEG
59686: PUSH
59687: LD_INT 3
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 3
59697: NEG
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: LIST
59711: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59712: LD_ADDR_VAR 0 47
59716: PUSH
59717: LD_INT 2
59719: NEG
59720: PUSH
59721: LD_INT 3
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: LD_INT 3
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59745: LD_ADDR_VAR 0 48
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: LD_INT 2
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59776: LD_ADDR_VAR 0 49
59780: PUSH
59781: LD_INT 3
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 3
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59805: LD_ADDR_VAR 0 50
59809: PUSH
59810: LD_INT 2
59812: PUSH
59813: LD_INT 3
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: LD_INT 3
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59834: LD_ADDR_VAR 0 51
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: PUSH
59843: LD_INT 2
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 2
59852: NEG
59853: PUSH
59854: LD_INT 1
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59865: LD_ADDR_VAR 0 52
59869: PUSH
59870: LD_INT 3
59872: NEG
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 3
59884: NEG
59885: PUSH
59886: LD_INT 2
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59898: LD_ADDR_VAR 0 53
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: LD_INT 3
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: LD_INT 3
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: LIST
59941: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59942: LD_ADDR_VAR 0 54
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 3
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 3
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: LIST
59982: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59983: LD_ADDR_VAR 0 55
59987: PUSH
59988: LD_INT 3
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 3
60000: PUSH
60001: LD_INT 3
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: LD_INT 3
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: LIST
60022: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60023: LD_ADDR_VAR 0 56
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: LD_INT 3
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: LD_INT 3
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: LD_INT 2
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: LIST
60063: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60064: LD_ADDR_VAR 0 57
60068: PUSH
60069: LD_INT 2
60071: NEG
60072: PUSH
60073: LD_INT 1
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 3
60082: NEG
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 3
60093: NEG
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: LIST
60107: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60108: LD_ADDR_VAR 0 58
60112: PUSH
60113: LD_INT 2
60115: NEG
60116: PUSH
60117: LD_INT 3
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 3
60127: NEG
60128: PUSH
60129: LD_INT 2
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 3
60139: NEG
60140: PUSH
60141: LD_INT 3
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: LIST
60153: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60154: LD_ADDR_VAR 0 59
60158: PUSH
60159: LD_INT 1
60161: NEG
60162: PUSH
60163: LD_INT 2
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: LD_INT 2
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: LIST
60197: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60198: LD_ADDR_VAR 0 60
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: LD_INT 1
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 2
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: LIST
60238: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60239: LD_ADDR_VAR 0 61
60243: PUSH
60244: LD_INT 2
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 2
60256: PUSH
60257: LD_INT 2
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: LD_INT 2
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: LIST
60278: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60279: LD_ADDR_VAR 0 62
60283: PUSH
60284: LD_INT 1
60286: PUSH
60287: LD_INT 2
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: LD_INT 2
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: LIST
60319: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60320: LD_ADDR_VAR 0 63
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: LD_INT 0
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 2
60349: NEG
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: LIST
60363: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60364: LD_ADDR_VAR 0 64
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 2
60395: NEG
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: LIST
60409: ST_TO_ADDR
// end ; 2 :
60410: GO 63676
60412: LD_INT 2
60414: DOUBLE
60415: EQUAL
60416: IFTRUE 60420
60418: GO 63675
60420: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60421: LD_ADDR_VAR 0 29
60425: PUSH
60426: LD_INT 4
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 4
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 5
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 5
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 4
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 3
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 3
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 3
60500: PUSH
60501: LD_INT 2
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 5
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 3
60521: PUSH
60522: LD_INT 3
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 3
60531: PUSH
60532: LD_INT 2
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 4
60541: PUSH
60542: LD_INT 3
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 4
60551: PUSH
60552: LD_INT 4
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 3
60561: PUSH
60562: LD_INT 4
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 2
60571: PUSH
60572: LD_INT 3
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 4
60591: PUSH
60592: LD_INT 2
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 2
60601: PUSH
60602: LD_INT 4
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 4
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: LD_INT 3
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: LD_INT 4
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: PUSH
60642: LD_INT 5
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 5
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: LD_INT 4
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: LD_INT 3
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 2
60683: PUSH
60684: LD_INT 5
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 2
60693: NEG
60694: PUSH
60695: LD_INT 3
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 3
60704: NEG
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 3
60715: NEG
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 2
60727: NEG
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 2
60738: NEG
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 3
60749: NEG
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 4
60760: NEG
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 4
60771: NEG
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 4
60783: NEG
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 2
60795: NEG
60796: PUSH
60797: LD_INT 2
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 4
60806: NEG
60807: PUSH
60808: LD_INT 4
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 4
60818: NEG
60819: PUSH
60820: LD_INT 5
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 3
60830: NEG
60831: PUSH
60832: LD_INT 4
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 3
60842: NEG
60843: PUSH
60844: LD_INT 3
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 4
60854: NEG
60855: PUSH
60856: LD_INT 3
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 5
60866: NEG
60867: PUSH
60868: LD_INT 4
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 5
60878: NEG
60879: PUSH
60880: LD_INT 5
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 3
60890: NEG
60891: PUSH
60892: LD_INT 5
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 5
60902: NEG
60903: PUSH
60904: LD_INT 3
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60959: LD_ADDR_VAR 0 30
60963: PUSH
60964: LD_INT 4
60966: PUSH
60967: LD_INT 4
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 4
60976: PUSH
60977: LD_INT 3
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 5
60986: PUSH
60987: LD_INT 4
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 5
60996: PUSH
60997: LD_INT 5
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 4
61006: PUSH
61007: LD_INT 5
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 3
61016: PUSH
61017: LD_INT 4
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 3
61026: PUSH
61027: LD_INT 3
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 5
61036: PUSH
61037: LD_INT 3
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 3
61046: PUSH
61047: LD_INT 5
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: LD_INT 3
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 2
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: LD_INT 3
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: PUSH
61087: LD_INT 4
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 0
61096: PUSH
61097: LD_INT 4
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: LD_INT 3
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 1
61117: NEG
61118: PUSH
61119: LD_INT 2
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 2
61128: PUSH
61129: LD_INT 4
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 2
61138: NEG
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 4
61149: NEG
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 4
61160: NEG
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 3
61172: NEG
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 3
61183: NEG
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 4
61194: NEG
61195: PUSH
61196: LD_INT 1
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 5
61205: NEG
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 5
61216: NEG
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 5
61228: NEG
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 3
61240: NEG
61241: PUSH
61242: LD_INT 2
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 3
61251: NEG
61252: PUSH
61253: LD_INT 3
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 3
61263: NEG
61264: PUSH
61265: LD_INT 4
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 2
61275: NEG
61276: PUSH
61277: LD_INT 3
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 2
61287: NEG
61288: PUSH
61289: LD_INT 2
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 3
61299: NEG
61300: PUSH
61301: LD_INT 2
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 4
61311: NEG
61312: PUSH
61313: LD_INT 3
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 4
61323: NEG
61324: PUSH
61325: LD_INT 4
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 2
61335: NEG
61336: PUSH
61337: LD_INT 4
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 4
61347: NEG
61348: PUSH
61349: LD_INT 2
61351: NEG
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: LD_INT 4
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: LD_INT 5
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: LD_INT 4
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 1
61392: PUSH
61393: LD_INT 3
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: LD_INT 3
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: LD_INT 4
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 1
61426: NEG
61427: PUSH
61428: LD_INT 5
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 2
61438: PUSH
61439: LD_INT 3
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: NEG
61450: PUSH
61451: LD_INT 5
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61506: LD_ADDR_VAR 0 31
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: LD_INT 4
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: LD_INT 3
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: LD_INT 4
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: LD_INT 5
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: LD_INT 5
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 1
61563: NEG
61564: PUSH
61565: LD_INT 4
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: LD_INT 3
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: LD_INT 5
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 2
61595: NEG
61596: PUSH
61597: LD_INT 3
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 3
61606: NEG
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 3
61617: NEG
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: NEG
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 2
61640: NEG
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 3
61651: NEG
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 4
61662: NEG
61663: PUSH
61664: LD_INT 0
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 4
61673: NEG
61674: PUSH
61675: LD_INT 1
61677: NEG
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 4
61685: NEG
61686: PUSH
61687: LD_INT 2
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 2
61697: NEG
61698: PUSH
61699: LD_INT 2
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 4
61708: NEG
61709: PUSH
61710: LD_INT 4
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 4
61720: NEG
61721: PUSH
61722: LD_INT 5
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 3
61732: NEG
61733: PUSH
61734: LD_INT 4
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 3
61744: NEG
61745: PUSH
61746: LD_INT 3
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 4
61756: NEG
61757: PUSH
61758: LD_INT 3
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 5
61768: NEG
61769: PUSH
61770: LD_INT 4
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 5
61780: NEG
61781: PUSH
61782: LD_INT 5
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 3
61792: NEG
61793: PUSH
61794: LD_INT 5
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 5
61804: NEG
61805: PUSH
61806: LD_INT 3
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: LD_INT 3
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: LD_INT 4
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: LD_INT 3
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 1
61849: PUSH
61850: LD_INT 2
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: LD_INT 2
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: LD_INT 3
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 1
61883: NEG
61884: PUSH
61885: LD_INT 4
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 2
61895: PUSH
61896: LD_INT 2
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 2
61906: NEG
61907: PUSH
61908: LD_INT 4
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 4
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 4
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 5
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 5
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 4
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 3
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 3
61979: PUSH
61980: LD_INT 1
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 3
61990: PUSH
61991: LD_INT 2
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 5
62001: PUSH
62002: LD_INT 2
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62056: LD_ADDR_VAR 0 32
62060: PUSH
62061: LD_INT 4
62063: NEG
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 4
62074: NEG
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 3
62086: NEG
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 3
62097: NEG
62098: PUSH
62099: LD_INT 1
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 4
62108: NEG
62109: PUSH
62110: LD_INT 1
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 5
62119: NEG
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 5
62130: NEG
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 5
62142: NEG
62143: PUSH
62144: LD_INT 2
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 3
62154: NEG
62155: PUSH
62156: LD_INT 2
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 3
62165: NEG
62166: PUSH
62167: LD_INT 3
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 3
62177: NEG
62178: PUSH
62179: LD_INT 4
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 2
62189: NEG
62190: PUSH
62191: LD_INT 3
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 2
62201: NEG
62202: PUSH
62203: LD_INT 2
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 3
62213: NEG
62214: PUSH
62215: LD_INT 2
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 4
62225: NEG
62226: PUSH
62227: LD_INT 3
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 4
62237: NEG
62238: PUSH
62239: LD_INT 4
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 2
62249: NEG
62250: PUSH
62251: LD_INT 4
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 4
62261: NEG
62262: PUSH
62263: LD_INT 2
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: LD_INT 4
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 5
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: LD_INT 4
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: LD_INT 3
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: LD_INT 3
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: LD_INT 4
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: LD_INT 5
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 2
62352: PUSH
62353: LD_INT 3
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 2
62363: NEG
62364: PUSH
62365: LD_INT 5
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 3
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 3
62385: PUSH
62386: LD_INT 1
62388: NEG
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 4
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 4
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 3
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 2
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 2
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 2
62447: PUSH
62448: LD_INT 2
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 4
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 4
62468: PUSH
62469: LD_INT 4
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 4
62478: PUSH
62479: LD_INT 3
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 5
62488: PUSH
62489: LD_INT 4
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 5
62498: PUSH
62499: LD_INT 5
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 4
62508: PUSH
62509: LD_INT 5
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 3
62518: PUSH
62519: LD_INT 4
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 3
62528: PUSH
62529: LD_INT 3
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 5
62538: PUSH
62539: LD_INT 3
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 3
62548: PUSH
62549: LD_INT 5
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62603: LD_ADDR_VAR 0 33
62607: PUSH
62608: LD_INT 4
62610: NEG
62611: PUSH
62612: LD_INT 4
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 4
62622: NEG
62623: PUSH
62624: LD_INT 5
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 3
62634: NEG
62635: PUSH
62636: LD_INT 4
62638: NEG
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 3
62646: NEG
62647: PUSH
62648: LD_INT 3
62650: NEG
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 4
62658: NEG
62659: PUSH
62660: LD_INT 3
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 5
62670: NEG
62671: PUSH
62672: LD_INT 4
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 5
62682: NEG
62683: PUSH
62684: LD_INT 5
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 3
62694: NEG
62695: PUSH
62696: LD_INT 5
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 5
62706: NEG
62707: PUSH
62708: LD_INT 3
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: LD_INT 3
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 0
62729: PUSH
62730: LD_INT 4
62732: NEG
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: LD_INT 3
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: LD_INT 2
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 0
62762: PUSH
62763: LD_INT 2
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: LD_INT 3
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 1
62785: NEG
62786: PUSH
62787: LD_INT 4
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 2
62797: PUSH
62798: LD_INT 2
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 2
62808: NEG
62809: PUSH
62810: LD_INT 4
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 4
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 4
62830: PUSH
62831: LD_INT 1
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 5
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 5
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 4
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 3
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 3
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 3
62892: PUSH
62893: LD_INT 2
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 5
62903: PUSH
62904: LD_INT 2
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 3
62913: PUSH
62914: LD_INT 3
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 3
62923: PUSH
62924: LD_INT 2
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 4
62933: PUSH
62934: LD_INT 3
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 4
62943: PUSH
62944: LD_INT 4
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 3
62953: PUSH
62954: LD_INT 4
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 2
62963: PUSH
62964: LD_INT 3
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: LD_INT 2
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 4
62983: PUSH
62984: LD_INT 2
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 2
62993: PUSH
62994: LD_INT 4
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: LD_INT 4
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 0
63013: PUSH
63014: LD_INT 3
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 1
63023: PUSH
63024: LD_INT 4
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 1
63033: PUSH
63034: LD_INT 5
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: LD_INT 5
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: LD_INT 4
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: NEG
63065: PUSH
63066: LD_INT 3
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: LD_INT 5
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: NEG
63086: PUSH
63087: LD_INT 3
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63141: LD_ADDR_VAR 0 34
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: LD_INT 4
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 0
63159: PUSH
63160: LD_INT 5
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 1
63170: PUSH
63171: LD_INT 4
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: LD_INT 3
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: LD_INT 3
63195: NEG
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: LD_INT 4
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 1
63215: NEG
63216: PUSH
63217: LD_INT 5
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 2
63227: PUSH
63228: LD_INT 3
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 2
63238: NEG
63239: PUSH
63240: LD_INT 5
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 3
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 3
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 4
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 4
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 3
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 2
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 2
63311: PUSH
63312: LD_INT 1
63314: NEG
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 2
63322: PUSH
63323: LD_INT 2
63325: NEG
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 4
63333: PUSH
63334: LD_INT 2
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 4
63343: PUSH
63344: LD_INT 4
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 4
63353: PUSH
63354: LD_INT 3
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 5
63363: PUSH
63364: LD_INT 4
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 5
63373: PUSH
63374: LD_INT 5
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 4
63383: PUSH
63384: LD_INT 5
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 3
63393: PUSH
63394: LD_INT 4
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 3
63403: PUSH
63404: LD_INT 3
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 5
63413: PUSH
63414: LD_INT 3
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 3
63423: PUSH
63424: LD_INT 5
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: LD_INT 3
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: LD_INT 2
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 1
63453: PUSH
63454: LD_INT 3
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: LD_INT 4
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 0
63473: PUSH
63474: LD_INT 4
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: LD_INT 3
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 1
63494: NEG
63495: PUSH
63496: LD_INT 2
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 2
63505: PUSH
63506: LD_INT 4
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 2
63515: NEG
63516: PUSH
63517: LD_INT 2
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 4
63526: NEG
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 4
63537: NEG
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 3
63549: NEG
63550: PUSH
63551: LD_INT 0
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 3
63560: NEG
63561: PUSH
63562: LD_INT 1
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 4
63571: NEG
63572: PUSH
63573: LD_INT 1
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 5
63582: NEG
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 5
63593: NEG
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 5
63605: NEG
63606: PUSH
63607: LD_INT 2
63609: NEG
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 3
63617: NEG
63618: PUSH
63619: LD_INT 2
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: ST_TO_ADDR
// end ; end ;
63673: GO 63676
63675: POP
// case btype of b_depot , b_warehouse :
63676: LD_VAR 0 1
63680: PUSH
63681: LD_INT 0
63683: DOUBLE
63684: EQUAL
63685: IFTRUE 63695
63687: LD_INT 1
63689: DOUBLE
63690: EQUAL
63691: IFTRUE 63695
63693: GO 63896
63695: POP
// case nation of nation_american :
63696: LD_VAR 0 5
63700: PUSH
63701: LD_INT 1
63703: DOUBLE
63704: EQUAL
63705: IFTRUE 63709
63707: GO 63765
63709: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63710: LD_ADDR_VAR 0 9
63714: PUSH
63715: LD_VAR 0 11
63719: PUSH
63720: LD_VAR 0 12
63724: PUSH
63725: LD_VAR 0 13
63729: PUSH
63730: LD_VAR 0 14
63734: PUSH
63735: LD_VAR 0 15
63739: PUSH
63740: LD_VAR 0 16
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: PUSH
63753: LD_VAR 0 4
63757: PUSH
63758: LD_INT 1
63760: PLUS
63761: ARRAY
63762: ST_TO_ADDR
63763: GO 63894
63765: LD_INT 2
63767: DOUBLE
63768: EQUAL
63769: IFTRUE 63773
63771: GO 63829
63773: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63774: LD_ADDR_VAR 0 9
63778: PUSH
63779: LD_VAR 0 17
63783: PUSH
63784: LD_VAR 0 18
63788: PUSH
63789: LD_VAR 0 19
63793: PUSH
63794: LD_VAR 0 20
63798: PUSH
63799: LD_VAR 0 21
63803: PUSH
63804: LD_VAR 0 22
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: PUSH
63817: LD_VAR 0 4
63821: PUSH
63822: LD_INT 1
63824: PLUS
63825: ARRAY
63826: ST_TO_ADDR
63827: GO 63894
63829: LD_INT 3
63831: DOUBLE
63832: EQUAL
63833: IFTRUE 63837
63835: GO 63893
63837: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63838: LD_ADDR_VAR 0 9
63842: PUSH
63843: LD_VAR 0 23
63847: PUSH
63848: LD_VAR 0 24
63852: PUSH
63853: LD_VAR 0 25
63857: PUSH
63858: LD_VAR 0 26
63862: PUSH
63863: LD_VAR 0 27
63867: PUSH
63868: LD_VAR 0 28
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: PUSH
63881: LD_VAR 0 4
63885: PUSH
63886: LD_INT 1
63888: PLUS
63889: ARRAY
63890: ST_TO_ADDR
63891: GO 63894
63893: POP
63894: GO 64449
63896: LD_INT 2
63898: DOUBLE
63899: EQUAL
63900: IFTRUE 63910
63902: LD_INT 3
63904: DOUBLE
63905: EQUAL
63906: IFTRUE 63910
63908: GO 63966
63910: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63911: LD_ADDR_VAR 0 9
63915: PUSH
63916: LD_VAR 0 29
63920: PUSH
63921: LD_VAR 0 30
63925: PUSH
63926: LD_VAR 0 31
63930: PUSH
63931: LD_VAR 0 32
63935: PUSH
63936: LD_VAR 0 33
63940: PUSH
63941: LD_VAR 0 34
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: PUSH
63954: LD_VAR 0 4
63958: PUSH
63959: LD_INT 1
63961: PLUS
63962: ARRAY
63963: ST_TO_ADDR
63964: GO 64449
63966: LD_INT 16
63968: DOUBLE
63969: EQUAL
63970: IFTRUE 64028
63972: LD_INT 17
63974: DOUBLE
63975: EQUAL
63976: IFTRUE 64028
63978: LD_INT 18
63980: DOUBLE
63981: EQUAL
63982: IFTRUE 64028
63984: LD_INT 19
63986: DOUBLE
63987: EQUAL
63988: IFTRUE 64028
63990: LD_INT 22
63992: DOUBLE
63993: EQUAL
63994: IFTRUE 64028
63996: LD_INT 20
63998: DOUBLE
63999: EQUAL
64000: IFTRUE 64028
64002: LD_INT 21
64004: DOUBLE
64005: EQUAL
64006: IFTRUE 64028
64008: LD_INT 23
64010: DOUBLE
64011: EQUAL
64012: IFTRUE 64028
64014: LD_INT 24
64016: DOUBLE
64017: EQUAL
64018: IFTRUE 64028
64020: LD_INT 25
64022: DOUBLE
64023: EQUAL
64024: IFTRUE 64028
64026: GO 64084
64028: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64029: LD_ADDR_VAR 0 9
64033: PUSH
64034: LD_VAR 0 35
64038: PUSH
64039: LD_VAR 0 36
64043: PUSH
64044: LD_VAR 0 37
64048: PUSH
64049: LD_VAR 0 38
64053: PUSH
64054: LD_VAR 0 39
64058: PUSH
64059: LD_VAR 0 40
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: PUSH
64072: LD_VAR 0 4
64076: PUSH
64077: LD_INT 1
64079: PLUS
64080: ARRAY
64081: ST_TO_ADDR
64082: GO 64449
64084: LD_INT 6
64086: DOUBLE
64087: EQUAL
64088: IFTRUE 64140
64090: LD_INT 7
64092: DOUBLE
64093: EQUAL
64094: IFTRUE 64140
64096: LD_INT 8
64098: DOUBLE
64099: EQUAL
64100: IFTRUE 64140
64102: LD_INT 13
64104: DOUBLE
64105: EQUAL
64106: IFTRUE 64140
64108: LD_INT 12
64110: DOUBLE
64111: EQUAL
64112: IFTRUE 64140
64114: LD_INT 15
64116: DOUBLE
64117: EQUAL
64118: IFTRUE 64140
64120: LD_INT 11
64122: DOUBLE
64123: EQUAL
64124: IFTRUE 64140
64126: LD_INT 14
64128: DOUBLE
64129: EQUAL
64130: IFTRUE 64140
64132: LD_INT 10
64134: DOUBLE
64135: EQUAL
64136: IFTRUE 64140
64138: GO 64196
64140: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64141: LD_ADDR_VAR 0 9
64145: PUSH
64146: LD_VAR 0 41
64150: PUSH
64151: LD_VAR 0 42
64155: PUSH
64156: LD_VAR 0 43
64160: PUSH
64161: LD_VAR 0 44
64165: PUSH
64166: LD_VAR 0 45
64170: PUSH
64171: LD_VAR 0 46
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: PUSH
64184: LD_VAR 0 4
64188: PUSH
64189: LD_INT 1
64191: PLUS
64192: ARRAY
64193: ST_TO_ADDR
64194: GO 64449
64196: LD_INT 36
64198: DOUBLE
64199: EQUAL
64200: IFTRUE 64204
64202: GO 64260
64204: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64205: LD_ADDR_VAR 0 9
64209: PUSH
64210: LD_VAR 0 47
64214: PUSH
64215: LD_VAR 0 48
64219: PUSH
64220: LD_VAR 0 49
64224: PUSH
64225: LD_VAR 0 50
64229: PUSH
64230: LD_VAR 0 51
64234: PUSH
64235: LD_VAR 0 52
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: PUSH
64248: LD_VAR 0 4
64252: PUSH
64253: LD_INT 1
64255: PLUS
64256: ARRAY
64257: ST_TO_ADDR
64258: GO 64449
64260: LD_INT 4
64262: DOUBLE
64263: EQUAL
64264: IFTRUE 64286
64266: LD_INT 5
64268: DOUBLE
64269: EQUAL
64270: IFTRUE 64286
64272: LD_INT 34
64274: DOUBLE
64275: EQUAL
64276: IFTRUE 64286
64278: LD_INT 37
64280: DOUBLE
64281: EQUAL
64282: IFTRUE 64286
64284: GO 64342
64286: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64287: LD_ADDR_VAR 0 9
64291: PUSH
64292: LD_VAR 0 53
64296: PUSH
64297: LD_VAR 0 54
64301: PUSH
64302: LD_VAR 0 55
64306: PUSH
64307: LD_VAR 0 56
64311: PUSH
64312: LD_VAR 0 57
64316: PUSH
64317: LD_VAR 0 58
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: PUSH
64330: LD_VAR 0 4
64334: PUSH
64335: LD_INT 1
64337: PLUS
64338: ARRAY
64339: ST_TO_ADDR
64340: GO 64449
64342: LD_INT 31
64344: DOUBLE
64345: EQUAL
64346: IFTRUE 64392
64348: LD_INT 32
64350: DOUBLE
64351: EQUAL
64352: IFTRUE 64392
64354: LD_INT 33
64356: DOUBLE
64357: EQUAL
64358: IFTRUE 64392
64360: LD_INT 27
64362: DOUBLE
64363: EQUAL
64364: IFTRUE 64392
64366: LD_INT 26
64368: DOUBLE
64369: EQUAL
64370: IFTRUE 64392
64372: LD_INT 28
64374: DOUBLE
64375: EQUAL
64376: IFTRUE 64392
64378: LD_INT 29
64380: DOUBLE
64381: EQUAL
64382: IFTRUE 64392
64384: LD_INT 30
64386: DOUBLE
64387: EQUAL
64388: IFTRUE 64392
64390: GO 64448
64392: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64393: LD_ADDR_VAR 0 9
64397: PUSH
64398: LD_VAR 0 59
64402: PUSH
64403: LD_VAR 0 60
64407: PUSH
64408: LD_VAR 0 61
64412: PUSH
64413: LD_VAR 0 62
64417: PUSH
64418: LD_VAR 0 63
64422: PUSH
64423: LD_VAR 0 64
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: PUSH
64436: LD_VAR 0 4
64440: PUSH
64441: LD_INT 1
64443: PLUS
64444: ARRAY
64445: ST_TO_ADDR
64446: GO 64449
64448: POP
// temp_list2 = [ ] ;
64449: LD_ADDR_VAR 0 10
64453: PUSH
64454: EMPTY
64455: ST_TO_ADDR
// for i in temp_list do
64456: LD_ADDR_VAR 0 8
64460: PUSH
64461: LD_VAR 0 9
64465: PUSH
64466: FOR_IN
64467: IFFALSE 64519
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64469: LD_ADDR_VAR 0 10
64473: PUSH
64474: LD_VAR 0 10
64478: PUSH
64479: LD_VAR 0 8
64483: PUSH
64484: LD_INT 1
64486: ARRAY
64487: PUSH
64488: LD_VAR 0 2
64492: PLUS
64493: PUSH
64494: LD_VAR 0 8
64498: PUSH
64499: LD_INT 2
64501: ARRAY
64502: PUSH
64503: LD_VAR 0 3
64507: PLUS
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: EMPTY
64514: LIST
64515: ADD
64516: ST_TO_ADDR
64517: GO 64466
64519: POP
64520: POP
// result = temp_list2 ;
64521: LD_ADDR_VAR 0 7
64525: PUSH
64526: LD_VAR 0 10
64530: ST_TO_ADDR
// end ;
64531: LD_VAR 0 7
64535: RET
// export function EnemyInRange ( unit , dist ) ; begin
64536: LD_INT 0
64538: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64539: LD_ADDR_VAR 0 3
64543: PUSH
64544: LD_VAR 0 1
64548: PPUSH
64549: CALL_OW 255
64553: PPUSH
64554: LD_VAR 0 1
64558: PPUSH
64559: CALL_OW 250
64563: PPUSH
64564: LD_VAR 0 1
64568: PPUSH
64569: CALL_OW 251
64573: PPUSH
64574: LD_VAR 0 2
64578: PPUSH
64579: CALL 37909 0 4
64583: PUSH
64584: LD_INT 4
64586: ARRAY
64587: ST_TO_ADDR
// end ;
64588: LD_VAR 0 3
64592: RET
// export function PlayerSeeMe ( unit ) ; begin
64593: LD_INT 0
64595: PPUSH
// result := See ( your_side , unit ) ;
64596: LD_ADDR_VAR 0 2
64600: PUSH
64601: LD_OWVAR 2
64605: PPUSH
64606: LD_VAR 0 1
64610: PPUSH
64611: CALL_OW 292
64615: ST_TO_ADDR
// end ;
64616: LD_VAR 0 2
64620: RET
// export function ReverseDir ( unit ) ; begin
64621: LD_INT 0
64623: PPUSH
// if not unit then
64624: LD_VAR 0 1
64628: NOT
64629: IFFALSE 64633
// exit ;
64631: GO 64656
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64633: LD_ADDR_VAR 0 2
64637: PUSH
64638: LD_VAR 0 1
64642: PPUSH
64643: CALL_OW 254
64647: PUSH
64648: LD_INT 3
64650: PLUS
64651: PUSH
64652: LD_INT 6
64654: MOD
64655: ST_TO_ADDR
// end ;
64656: LD_VAR 0 2
64660: RET
// export function ReverseArray ( array ) ; var i ; begin
64661: LD_INT 0
64663: PPUSH
64664: PPUSH
// if not array then
64665: LD_VAR 0 1
64669: NOT
64670: IFFALSE 64674
// exit ;
64672: GO 64729
// result := [ ] ;
64674: LD_ADDR_VAR 0 2
64678: PUSH
64679: EMPTY
64680: ST_TO_ADDR
// for i := array downto 1 do
64681: LD_ADDR_VAR 0 3
64685: PUSH
64686: DOUBLE
64687: LD_VAR 0 1
64691: INC
64692: ST_TO_ADDR
64693: LD_INT 1
64695: PUSH
64696: FOR_DOWNTO
64697: IFFALSE 64727
// result := Join ( result , array [ i ] ) ;
64699: LD_ADDR_VAR 0 2
64703: PUSH
64704: LD_VAR 0 2
64708: PPUSH
64709: LD_VAR 0 1
64713: PUSH
64714: LD_VAR 0 3
64718: ARRAY
64719: PPUSH
64720: CALL 69374 0 2
64724: ST_TO_ADDR
64725: GO 64696
64727: POP
64728: POP
// end ;
64729: LD_VAR 0 2
64733: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64734: LD_INT 0
64736: PPUSH
64737: PPUSH
64738: PPUSH
64739: PPUSH
64740: PPUSH
64741: PPUSH
// if not unit or not hexes then
64742: LD_VAR 0 1
64746: NOT
64747: PUSH
64748: LD_VAR 0 2
64752: NOT
64753: OR
64754: IFFALSE 64758
// exit ;
64756: GO 64881
// dist := 9999 ;
64758: LD_ADDR_VAR 0 5
64762: PUSH
64763: LD_INT 9999
64765: ST_TO_ADDR
// for i = 1 to hexes do
64766: LD_ADDR_VAR 0 4
64770: PUSH
64771: DOUBLE
64772: LD_INT 1
64774: DEC
64775: ST_TO_ADDR
64776: LD_VAR 0 2
64780: PUSH
64781: FOR_TO
64782: IFFALSE 64869
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64784: LD_ADDR_VAR 0 6
64788: PUSH
64789: LD_VAR 0 1
64793: PPUSH
64794: LD_VAR 0 2
64798: PUSH
64799: LD_VAR 0 4
64803: ARRAY
64804: PUSH
64805: LD_INT 1
64807: ARRAY
64808: PPUSH
64809: LD_VAR 0 2
64813: PUSH
64814: LD_VAR 0 4
64818: ARRAY
64819: PUSH
64820: LD_INT 2
64822: ARRAY
64823: PPUSH
64824: CALL_OW 297
64828: ST_TO_ADDR
// if tdist < dist then
64829: LD_VAR 0 6
64833: PUSH
64834: LD_VAR 0 5
64838: LESS
64839: IFFALSE 64867
// begin hex := hexes [ i ] ;
64841: LD_ADDR_VAR 0 8
64845: PUSH
64846: LD_VAR 0 2
64850: PUSH
64851: LD_VAR 0 4
64855: ARRAY
64856: ST_TO_ADDR
// dist := tdist ;
64857: LD_ADDR_VAR 0 5
64861: PUSH
64862: LD_VAR 0 6
64866: ST_TO_ADDR
// end ; end ;
64867: GO 64781
64869: POP
64870: POP
// result := hex ;
64871: LD_ADDR_VAR 0 3
64875: PUSH
64876: LD_VAR 0 8
64880: ST_TO_ADDR
// end ;
64881: LD_VAR 0 3
64885: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64886: LD_INT 0
64888: PPUSH
64889: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64890: LD_VAR 0 1
64894: NOT
64895: PUSH
64896: LD_VAR 0 1
64900: PUSH
64901: LD_INT 21
64903: PUSH
64904: LD_INT 2
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 23
64913: PUSH
64914: LD_INT 2
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PPUSH
64925: CALL_OW 69
64929: IN
64930: NOT
64931: OR
64932: IFFALSE 64936
// exit ;
64934: GO 64983
// for i = 1 to 3 do
64936: LD_ADDR_VAR 0 3
64940: PUSH
64941: DOUBLE
64942: LD_INT 1
64944: DEC
64945: ST_TO_ADDR
64946: LD_INT 3
64948: PUSH
64949: FOR_TO
64950: IFFALSE 64981
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64952: LD_VAR 0 1
64956: PPUSH
64957: CALL_OW 250
64961: PPUSH
64962: LD_VAR 0 1
64966: PPUSH
64967: CALL_OW 251
64971: PPUSH
64972: LD_INT 1
64974: PPUSH
64975: CALL_OW 453
64979: GO 64949
64981: POP
64982: POP
// end ;
64983: LD_VAR 0 2
64987: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64988: LD_INT 0
64990: PPUSH
64991: PPUSH
64992: PPUSH
64993: PPUSH
64994: PPUSH
64995: PPUSH
// if not unit or not enemy_unit then
64996: LD_VAR 0 1
65000: NOT
65001: PUSH
65002: LD_VAR 0 2
65006: NOT
65007: OR
65008: IFFALSE 65012
// exit ;
65010: GO 65479
// if GetLives ( i ) < 250 then
65012: LD_VAR 0 4
65016: PPUSH
65017: CALL_OW 256
65021: PUSH
65022: LD_INT 250
65024: LESS
65025: IFFALSE 65038
// begin ComAutodestruct ( i ) ;
65027: LD_VAR 0 4
65031: PPUSH
65032: CALL 64886 0 1
// exit ;
65036: GO 65479
// end ; x := GetX ( enemy_unit ) ;
65038: LD_ADDR_VAR 0 7
65042: PUSH
65043: LD_VAR 0 2
65047: PPUSH
65048: CALL_OW 250
65052: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65053: LD_ADDR_VAR 0 8
65057: PUSH
65058: LD_VAR 0 2
65062: PPUSH
65063: CALL_OW 251
65067: ST_TO_ADDR
// if not x or not y then
65068: LD_VAR 0 7
65072: NOT
65073: PUSH
65074: LD_VAR 0 8
65078: NOT
65079: OR
65080: IFFALSE 65084
// exit ;
65082: GO 65479
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65084: LD_ADDR_VAR 0 6
65088: PUSH
65089: LD_VAR 0 7
65093: PPUSH
65094: LD_INT 0
65096: PPUSH
65097: LD_INT 4
65099: PPUSH
65100: CALL_OW 272
65104: PUSH
65105: LD_VAR 0 8
65109: PPUSH
65110: LD_INT 0
65112: PPUSH
65113: LD_INT 4
65115: PPUSH
65116: CALL_OW 273
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_VAR 0 7
65129: PPUSH
65130: LD_INT 1
65132: PPUSH
65133: LD_INT 4
65135: PPUSH
65136: CALL_OW 272
65140: PUSH
65141: LD_VAR 0 8
65145: PPUSH
65146: LD_INT 1
65148: PPUSH
65149: LD_INT 4
65151: PPUSH
65152: CALL_OW 273
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_VAR 0 7
65165: PPUSH
65166: LD_INT 2
65168: PPUSH
65169: LD_INT 4
65171: PPUSH
65172: CALL_OW 272
65176: PUSH
65177: LD_VAR 0 8
65181: PPUSH
65182: LD_INT 2
65184: PPUSH
65185: LD_INT 4
65187: PPUSH
65188: CALL_OW 273
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_VAR 0 7
65201: PPUSH
65202: LD_INT 3
65204: PPUSH
65205: LD_INT 4
65207: PPUSH
65208: CALL_OW 272
65212: PUSH
65213: LD_VAR 0 8
65217: PPUSH
65218: LD_INT 3
65220: PPUSH
65221: LD_INT 4
65223: PPUSH
65224: CALL_OW 273
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_VAR 0 7
65237: PPUSH
65238: LD_INT 4
65240: PPUSH
65241: LD_INT 4
65243: PPUSH
65244: CALL_OW 272
65248: PUSH
65249: LD_VAR 0 8
65253: PPUSH
65254: LD_INT 4
65256: PPUSH
65257: LD_INT 4
65259: PPUSH
65260: CALL_OW 273
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_VAR 0 7
65273: PPUSH
65274: LD_INT 5
65276: PPUSH
65277: LD_INT 4
65279: PPUSH
65280: CALL_OW 272
65284: PUSH
65285: LD_VAR 0 8
65289: PPUSH
65290: LD_INT 5
65292: PPUSH
65293: LD_INT 4
65295: PPUSH
65296: CALL_OW 273
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: ST_TO_ADDR
// for i = tmp downto 1 do
65313: LD_ADDR_VAR 0 4
65317: PUSH
65318: DOUBLE
65319: LD_VAR 0 6
65323: INC
65324: ST_TO_ADDR
65325: LD_INT 1
65327: PUSH
65328: FOR_DOWNTO
65329: IFFALSE 65430
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65331: LD_VAR 0 6
65335: PUSH
65336: LD_VAR 0 4
65340: ARRAY
65341: PUSH
65342: LD_INT 1
65344: ARRAY
65345: PPUSH
65346: LD_VAR 0 6
65350: PUSH
65351: LD_VAR 0 4
65355: ARRAY
65356: PUSH
65357: LD_INT 2
65359: ARRAY
65360: PPUSH
65361: CALL_OW 488
65365: NOT
65366: PUSH
65367: LD_VAR 0 6
65371: PUSH
65372: LD_VAR 0 4
65376: ARRAY
65377: PUSH
65378: LD_INT 1
65380: ARRAY
65381: PPUSH
65382: LD_VAR 0 6
65386: PUSH
65387: LD_VAR 0 4
65391: ARRAY
65392: PUSH
65393: LD_INT 2
65395: ARRAY
65396: PPUSH
65397: CALL_OW 428
65401: PUSH
65402: LD_INT 0
65404: NONEQUAL
65405: OR
65406: IFFALSE 65428
// tmp := Delete ( tmp , i ) ;
65408: LD_ADDR_VAR 0 6
65412: PUSH
65413: LD_VAR 0 6
65417: PPUSH
65418: LD_VAR 0 4
65422: PPUSH
65423: CALL_OW 3
65427: ST_TO_ADDR
65428: GO 65328
65430: POP
65431: POP
// j := GetClosestHex ( unit , tmp ) ;
65432: LD_ADDR_VAR 0 5
65436: PUSH
65437: LD_VAR 0 1
65441: PPUSH
65442: LD_VAR 0 6
65446: PPUSH
65447: CALL 64734 0 2
65451: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65452: LD_VAR 0 1
65456: PPUSH
65457: LD_VAR 0 5
65461: PUSH
65462: LD_INT 1
65464: ARRAY
65465: PPUSH
65466: LD_VAR 0 5
65470: PUSH
65471: LD_INT 2
65473: ARRAY
65474: PPUSH
65475: CALL_OW 111
// end ;
65479: LD_VAR 0 3
65483: RET
// export function PrepareApemanSoldier ( ) ; begin
65484: LD_INT 0
65486: PPUSH
// uc_nation := 0 ;
65487: LD_ADDR_OWVAR 21
65491: PUSH
65492: LD_INT 0
65494: ST_TO_ADDR
// hc_sex := sex_male ;
65495: LD_ADDR_OWVAR 27
65499: PUSH
65500: LD_INT 1
65502: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65503: LD_ADDR_OWVAR 28
65507: PUSH
65508: LD_INT 15
65510: ST_TO_ADDR
// hc_gallery :=  ;
65511: LD_ADDR_OWVAR 33
65515: PUSH
65516: LD_STRING 
65518: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65519: LD_ADDR_OWVAR 31
65523: PUSH
65524: LD_INT 0
65526: PPUSH
65527: LD_INT 3
65529: PPUSH
65530: CALL_OW 12
65534: PUSH
65535: LD_INT 0
65537: PPUSH
65538: LD_INT 3
65540: PPUSH
65541: CALL_OW 12
65545: PUSH
65546: LD_INT 0
65548: PUSH
65549: LD_INT 0
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: ST_TO_ADDR
// end ;
65558: LD_VAR 0 1
65562: RET
// export function PrepareApemanEngineer ( ) ; begin
65563: LD_INT 0
65565: PPUSH
// uc_nation := 0 ;
65566: LD_ADDR_OWVAR 21
65570: PUSH
65571: LD_INT 0
65573: ST_TO_ADDR
// hc_sex := sex_male ;
65574: LD_ADDR_OWVAR 27
65578: PUSH
65579: LD_INT 1
65581: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65582: LD_ADDR_OWVAR 28
65586: PUSH
65587: LD_INT 16
65589: ST_TO_ADDR
// hc_gallery :=  ;
65590: LD_ADDR_OWVAR 33
65594: PUSH
65595: LD_STRING 
65597: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65598: LD_ADDR_OWVAR 31
65602: PUSH
65603: LD_INT 0
65605: PPUSH
65606: LD_INT 3
65608: PPUSH
65609: CALL_OW 12
65613: PUSH
65614: LD_INT 0
65616: PPUSH
65617: LD_INT 3
65619: PPUSH
65620: CALL_OW 12
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: LD_INT 0
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: ST_TO_ADDR
// end ;
65637: LD_VAR 0 1
65641: RET
// export function PrepareApeman ( agressivity ) ; begin
65642: LD_INT 0
65644: PPUSH
// uc_side := 0 ;
65645: LD_ADDR_OWVAR 20
65649: PUSH
65650: LD_INT 0
65652: ST_TO_ADDR
// uc_nation := 0 ;
65653: LD_ADDR_OWVAR 21
65657: PUSH
65658: LD_INT 0
65660: ST_TO_ADDR
// hc_sex := sex_male ;
65661: LD_ADDR_OWVAR 27
65665: PUSH
65666: LD_INT 1
65668: ST_TO_ADDR
// hc_class := class_apeman ;
65669: LD_ADDR_OWVAR 28
65673: PUSH
65674: LD_INT 12
65676: ST_TO_ADDR
// hc_gallery :=  ;
65677: LD_ADDR_OWVAR 33
65681: PUSH
65682: LD_STRING 
65684: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65685: LD_ADDR_OWVAR 35
65689: PUSH
65690: LD_VAR 0 1
65694: NEG
65695: PPUSH
65696: LD_VAR 0 1
65700: PPUSH
65701: CALL_OW 12
65705: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65706: LD_ADDR_OWVAR 31
65710: PUSH
65711: LD_INT 0
65713: PPUSH
65714: LD_INT 3
65716: PPUSH
65717: CALL_OW 12
65721: PUSH
65722: LD_INT 0
65724: PPUSH
65725: LD_INT 3
65727: PPUSH
65728: CALL_OW 12
65732: PUSH
65733: LD_INT 0
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: ST_TO_ADDR
// end ;
65745: LD_VAR 0 2
65749: RET
// export function PrepareTiger ( agressivity ) ; begin
65750: LD_INT 0
65752: PPUSH
// uc_side := 0 ;
65753: LD_ADDR_OWVAR 20
65757: PUSH
65758: LD_INT 0
65760: ST_TO_ADDR
// uc_nation := 0 ;
65761: LD_ADDR_OWVAR 21
65765: PUSH
65766: LD_INT 0
65768: ST_TO_ADDR
// hc_class := class_tiger ;
65769: LD_ADDR_OWVAR 28
65773: PUSH
65774: LD_INT 14
65776: ST_TO_ADDR
// hc_gallery :=  ;
65777: LD_ADDR_OWVAR 33
65781: PUSH
65782: LD_STRING 
65784: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65785: LD_ADDR_OWVAR 35
65789: PUSH
65790: LD_VAR 0 1
65794: NEG
65795: PPUSH
65796: LD_VAR 0 1
65800: PPUSH
65801: CALL_OW 12
65805: ST_TO_ADDR
// end ;
65806: LD_VAR 0 2
65810: RET
// export function PrepareEnchidna ( ) ; begin
65811: LD_INT 0
65813: PPUSH
// uc_side := 0 ;
65814: LD_ADDR_OWVAR 20
65818: PUSH
65819: LD_INT 0
65821: ST_TO_ADDR
// uc_nation := 0 ;
65822: LD_ADDR_OWVAR 21
65826: PUSH
65827: LD_INT 0
65829: ST_TO_ADDR
// hc_class := class_baggie ;
65830: LD_ADDR_OWVAR 28
65834: PUSH
65835: LD_INT 13
65837: ST_TO_ADDR
// hc_gallery :=  ;
65838: LD_ADDR_OWVAR 33
65842: PUSH
65843: LD_STRING 
65845: ST_TO_ADDR
// end ;
65846: LD_VAR 0 1
65850: RET
// export function PrepareFrog ( ) ; begin
65851: LD_INT 0
65853: PPUSH
// uc_side := 0 ;
65854: LD_ADDR_OWVAR 20
65858: PUSH
65859: LD_INT 0
65861: ST_TO_ADDR
// uc_nation := 0 ;
65862: LD_ADDR_OWVAR 21
65866: PUSH
65867: LD_INT 0
65869: ST_TO_ADDR
// hc_class := class_frog ;
65870: LD_ADDR_OWVAR 28
65874: PUSH
65875: LD_INT 19
65877: ST_TO_ADDR
// hc_gallery :=  ;
65878: LD_ADDR_OWVAR 33
65882: PUSH
65883: LD_STRING 
65885: ST_TO_ADDR
// end ;
65886: LD_VAR 0 1
65890: RET
// export function PrepareFish ( ) ; begin
65891: LD_INT 0
65893: PPUSH
// uc_side := 0 ;
65894: LD_ADDR_OWVAR 20
65898: PUSH
65899: LD_INT 0
65901: ST_TO_ADDR
// uc_nation := 0 ;
65902: LD_ADDR_OWVAR 21
65906: PUSH
65907: LD_INT 0
65909: ST_TO_ADDR
// hc_class := class_fish ;
65910: LD_ADDR_OWVAR 28
65914: PUSH
65915: LD_INT 20
65917: ST_TO_ADDR
// hc_gallery :=  ;
65918: LD_ADDR_OWVAR 33
65922: PUSH
65923: LD_STRING 
65925: ST_TO_ADDR
// end ;
65926: LD_VAR 0 1
65930: RET
// export function PrepareBird ( ) ; begin
65931: LD_INT 0
65933: PPUSH
// uc_side := 0 ;
65934: LD_ADDR_OWVAR 20
65938: PUSH
65939: LD_INT 0
65941: ST_TO_ADDR
// uc_nation := 0 ;
65942: LD_ADDR_OWVAR 21
65946: PUSH
65947: LD_INT 0
65949: ST_TO_ADDR
// hc_class := class_phororhacos ;
65950: LD_ADDR_OWVAR 28
65954: PUSH
65955: LD_INT 18
65957: ST_TO_ADDR
// hc_gallery :=  ;
65958: LD_ADDR_OWVAR 33
65962: PUSH
65963: LD_STRING 
65965: ST_TO_ADDR
// end ;
65966: LD_VAR 0 1
65970: RET
// export function PrepareHorse ( ) ; begin
65971: LD_INT 0
65973: PPUSH
// uc_side := 0 ;
65974: LD_ADDR_OWVAR 20
65978: PUSH
65979: LD_INT 0
65981: ST_TO_ADDR
// uc_nation := 0 ;
65982: LD_ADDR_OWVAR 21
65986: PUSH
65987: LD_INT 0
65989: ST_TO_ADDR
// hc_class := class_horse ;
65990: LD_ADDR_OWVAR 28
65994: PUSH
65995: LD_INT 21
65997: ST_TO_ADDR
// hc_gallery :=  ;
65998: LD_ADDR_OWVAR 33
66002: PUSH
66003: LD_STRING 
66005: ST_TO_ADDR
// end ;
66006: LD_VAR 0 1
66010: RET
// export function PrepareMastodont ( ) ; begin
66011: LD_INT 0
66013: PPUSH
// uc_side := 0 ;
66014: LD_ADDR_OWVAR 20
66018: PUSH
66019: LD_INT 0
66021: ST_TO_ADDR
// uc_nation := 0 ;
66022: LD_ADDR_OWVAR 21
66026: PUSH
66027: LD_INT 0
66029: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66030: LD_ADDR_OWVAR 37
66034: PUSH
66035: LD_INT 31
66037: ST_TO_ADDR
// vc_control := control_rider ;
66038: LD_ADDR_OWVAR 38
66042: PUSH
66043: LD_INT 4
66045: ST_TO_ADDR
// end ;
66046: LD_VAR 0 1
66050: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66051: LD_INT 0
66053: PPUSH
66054: PPUSH
66055: PPUSH
// uc_side = 0 ;
66056: LD_ADDR_OWVAR 20
66060: PUSH
66061: LD_INT 0
66063: ST_TO_ADDR
// uc_nation = 0 ;
66064: LD_ADDR_OWVAR 21
66068: PUSH
66069: LD_INT 0
66071: ST_TO_ADDR
// InitHc_All ( ) ;
66072: CALL_OW 584
// InitVc ;
66076: CALL_OW 20
// if mastodonts then
66080: LD_VAR 0 6
66084: IFFALSE 66151
// for i = 1 to mastodonts do
66086: LD_ADDR_VAR 0 11
66090: PUSH
66091: DOUBLE
66092: LD_INT 1
66094: DEC
66095: ST_TO_ADDR
66096: LD_VAR 0 6
66100: PUSH
66101: FOR_TO
66102: IFFALSE 66149
// begin vc_chassis := 31 ;
66104: LD_ADDR_OWVAR 37
66108: PUSH
66109: LD_INT 31
66111: ST_TO_ADDR
// vc_control := control_rider ;
66112: LD_ADDR_OWVAR 38
66116: PUSH
66117: LD_INT 4
66119: ST_TO_ADDR
// animal := CreateVehicle ;
66120: LD_ADDR_VAR 0 12
66124: PUSH
66125: CALL_OW 45
66129: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66130: LD_VAR 0 12
66134: PPUSH
66135: LD_VAR 0 8
66139: PPUSH
66140: LD_INT 0
66142: PPUSH
66143: CALL 68279 0 3
// end ;
66147: GO 66101
66149: POP
66150: POP
// if horses then
66151: LD_VAR 0 5
66155: IFFALSE 66222
// for i = 1 to horses do
66157: LD_ADDR_VAR 0 11
66161: PUSH
66162: DOUBLE
66163: LD_INT 1
66165: DEC
66166: ST_TO_ADDR
66167: LD_VAR 0 5
66171: PUSH
66172: FOR_TO
66173: IFFALSE 66220
// begin hc_class := 21 ;
66175: LD_ADDR_OWVAR 28
66179: PUSH
66180: LD_INT 21
66182: ST_TO_ADDR
// hc_gallery :=  ;
66183: LD_ADDR_OWVAR 33
66187: PUSH
66188: LD_STRING 
66190: ST_TO_ADDR
// animal := CreateHuman ;
66191: LD_ADDR_VAR 0 12
66195: PUSH
66196: CALL_OW 44
66200: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66201: LD_VAR 0 12
66205: PPUSH
66206: LD_VAR 0 8
66210: PPUSH
66211: LD_INT 0
66213: PPUSH
66214: CALL 68279 0 3
// end ;
66218: GO 66172
66220: POP
66221: POP
// if birds then
66222: LD_VAR 0 1
66226: IFFALSE 66293
// for i = 1 to birds do
66228: LD_ADDR_VAR 0 11
66232: PUSH
66233: DOUBLE
66234: LD_INT 1
66236: DEC
66237: ST_TO_ADDR
66238: LD_VAR 0 1
66242: PUSH
66243: FOR_TO
66244: IFFALSE 66291
// begin hc_class := 18 ;
66246: LD_ADDR_OWVAR 28
66250: PUSH
66251: LD_INT 18
66253: ST_TO_ADDR
// hc_gallery =  ;
66254: LD_ADDR_OWVAR 33
66258: PUSH
66259: LD_STRING 
66261: ST_TO_ADDR
// animal := CreateHuman ;
66262: LD_ADDR_VAR 0 12
66266: PUSH
66267: CALL_OW 44
66271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66272: LD_VAR 0 12
66276: PPUSH
66277: LD_VAR 0 8
66281: PPUSH
66282: LD_INT 0
66284: PPUSH
66285: CALL 68279 0 3
// end ;
66289: GO 66243
66291: POP
66292: POP
// if tigers then
66293: LD_VAR 0 2
66297: IFFALSE 66381
// for i = 1 to tigers do
66299: LD_ADDR_VAR 0 11
66303: PUSH
66304: DOUBLE
66305: LD_INT 1
66307: DEC
66308: ST_TO_ADDR
66309: LD_VAR 0 2
66313: PUSH
66314: FOR_TO
66315: IFFALSE 66379
// begin hc_class = class_tiger ;
66317: LD_ADDR_OWVAR 28
66321: PUSH
66322: LD_INT 14
66324: ST_TO_ADDR
// hc_gallery =  ;
66325: LD_ADDR_OWVAR 33
66329: PUSH
66330: LD_STRING 
66332: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66333: LD_ADDR_OWVAR 35
66337: PUSH
66338: LD_INT 7
66340: NEG
66341: PPUSH
66342: LD_INT 7
66344: PPUSH
66345: CALL_OW 12
66349: ST_TO_ADDR
// animal := CreateHuman ;
66350: LD_ADDR_VAR 0 12
66354: PUSH
66355: CALL_OW 44
66359: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66360: LD_VAR 0 12
66364: PPUSH
66365: LD_VAR 0 8
66369: PPUSH
66370: LD_INT 0
66372: PPUSH
66373: CALL 68279 0 3
// end ;
66377: GO 66314
66379: POP
66380: POP
// if apemans then
66381: LD_VAR 0 3
66385: IFFALSE 66508
// for i = 1 to apemans do
66387: LD_ADDR_VAR 0 11
66391: PUSH
66392: DOUBLE
66393: LD_INT 1
66395: DEC
66396: ST_TO_ADDR
66397: LD_VAR 0 3
66401: PUSH
66402: FOR_TO
66403: IFFALSE 66506
// begin hc_class = class_apeman ;
66405: LD_ADDR_OWVAR 28
66409: PUSH
66410: LD_INT 12
66412: ST_TO_ADDR
// hc_gallery =  ;
66413: LD_ADDR_OWVAR 33
66417: PUSH
66418: LD_STRING 
66420: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66421: LD_ADDR_OWVAR 35
66425: PUSH
66426: LD_INT 2
66428: NEG
66429: PPUSH
66430: LD_INT 2
66432: PPUSH
66433: CALL_OW 12
66437: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66438: LD_ADDR_OWVAR 31
66442: PUSH
66443: LD_INT 1
66445: PPUSH
66446: LD_INT 3
66448: PPUSH
66449: CALL_OW 12
66453: PUSH
66454: LD_INT 1
66456: PPUSH
66457: LD_INT 3
66459: PPUSH
66460: CALL_OW 12
66464: PUSH
66465: LD_INT 0
66467: PUSH
66468: LD_INT 0
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: ST_TO_ADDR
// animal := CreateHuman ;
66477: LD_ADDR_VAR 0 12
66481: PUSH
66482: CALL_OW 44
66486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66487: LD_VAR 0 12
66491: PPUSH
66492: LD_VAR 0 8
66496: PPUSH
66497: LD_INT 0
66499: PPUSH
66500: CALL 68279 0 3
// end ;
66504: GO 66402
66506: POP
66507: POP
// if enchidnas then
66508: LD_VAR 0 4
66512: IFFALSE 66579
// for i = 1 to enchidnas do
66514: LD_ADDR_VAR 0 11
66518: PUSH
66519: DOUBLE
66520: LD_INT 1
66522: DEC
66523: ST_TO_ADDR
66524: LD_VAR 0 4
66528: PUSH
66529: FOR_TO
66530: IFFALSE 66577
// begin hc_class = 13 ;
66532: LD_ADDR_OWVAR 28
66536: PUSH
66537: LD_INT 13
66539: ST_TO_ADDR
// hc_gallery =  ;
66540: LD_ADDR_OWVAR 33
66544: PUSH
66545: LD_STRING 
66547: ST_TO_ADDR
// animal := CreateHuman ;
66548: LD_ADDR_VAR 0 12
66552: PUSH
66553: CALL_OW 44
66557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66558: LD_VAR 0 12
66562: PPUSH
66563: LD_VAR 0 8
66567: PPUSH
66568: LD_INT 0
66570: PPUSH
66571: CALL 68279 0 3
// end ;
66575: GO 66529
66577: POP
66578: POP
// if fishes then
66579: LD_VAR 0 7
66583: IFFALSE 66650
// for i = 1 to fishes do
66585: LD_ADDR_VAR 0 11
66589: PUSH
66590: DOUBLE
66591: LD_INT 1
66593: DEC
66594: ST_TO_ADDR
66595: LD_VAR 0 7
66599: PUSH
66600: FOR_TO
66601: IFFALSE 66648
// begin hc_class = 20 ;
66603: LD_ADDR_OWVAR 28
66607: PUSH
66608: LD_INT 20
66610: ST_TO_ADDR
// hc_gallery =  ;
66611: LD_ADDR_OWVAR 33
66615: PUSH
66616: LD_STRING 
66618: ST_TO_ADDR
// animal := CreateHuman ;
66619: LD_ADDR_VAR 0 12
66623: PUSH
66624: CALL_OW 44
66628: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66629: LD_VAR 0 12
66633: PPUSH
66634: LD_VAR 0 9
66638: PPUSH
66639: LD_INT 0
66641: PPUSH
66642: CALL 68279 0 3
// end ;
66646: GO 66600
66648: POP
66649: POP
// end ;
66650: LD_VAR 0 10
66654: RET
// export function WantHeal ( sci , unit ) ; begin
66655: LD_INT 0
66657: PPUSH
// if GetTaskList ( sci ) > 0 then
66658: LD_VAR 0 1
66662: PPUSH
66663: CALL_OW 437
66667: PUSH
66668: LD_INT 0
66670: GREATER
66671: IFFALSE 66741
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66673: LD_VAR 0 1
66677: PPUSH
66678: CALL_OW 437
66682: PUSH
66683: LD_INT 1
66685: ARRAY
66686: PUSH
66687: LD_INT 1
66689: ARRAY
66690: PUSH
66691: LD_STRING l
66693: EQUAL
66694: PUSH
66695: LD_VAR 0 1
66699: PPUSH
66700: CALL_OW 437
66704: PUSH
66705: LD_INT 1
66707: ARRAY
66708: PUSH
66709: LD_INT 4
66711: ARRAY
66712: PUSH
66713: LD_VAR 0 2
66717: EQUAL
66718: AND
66719: IFFALSE 66731
// result := true else
66721: LD_ADDR_VAR 0 3
66725: PUSH
66726: LD_INT 1
66728: ST_TO_ADDR
66729: GO 66739
// result := false ;
66731: LD_ADDR_VAR 0 3
66735: PUSH
66736: LD_INT 0
66738: ST_TO_ADDR
// end else
66739: GO 66749
// result := false ;
66741: LD_ADDR_VAR 0 3
66745: PUSH
66746: LD_INT 0
66748: ST_TO_ADDR
// end ;
66749: LD_VAR 0 3
66753: RET
// export function HealTarget ( sci ) ; begin
66754: LD_INT 0
66756: PPUSH
// if not sci then
66757: LD_VAR 0 1
66761: NOT
66762: IFFALSE 66766
// exit ;
66764: GO 66831
// result := 0 ;
66766: LD_ADDR_VAR 0 2
66770: PUSH
66771: LD_INT 0
66773: ST_TO_ADDR
// if GetTaskList ( sci ) then
66774: LD_VAR 0 1
66778: PPUSH
66779: CALL_OW 437
66783: IFFALSE 66831
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66785: LD_VAR 0 1
66789: PPUSH
66790: CALL_OW 437
66794: PUSH
66795: LD_INT 1
66797: ARRAY
66798: PUSH
66799: LD_INT 1
66801: ARRAY
66802: PUSH
66803: LD_STRING l
66805: EQUAL
66806: IFFALSE 66831
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66808: LD_ADDR_VAR 0 2
66812: PUSH
66813: LD_VAR 0 1
66817: PPUSH
66818: CALL_OW 437
66822: PUSH
66823: LD_INT 1
66825: ARRAY
66826: PUSH
66827: LD_INT 4
66829: ARRAY
66830: ST_TO_ADDR
// end ;
66831: LD_VAR 0 2
66835: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66836: LD_INT 0
66838: PPUSH
66839: PPUSH
66840: PPUSH
66841: PPUSH
// if not base_units then
66842: LD_VAR 0 1
66846: NOT
66847: IFFALSE 66851
// exit ;
66849: GO 66938
// result := false ;
66851: LD_ADDR_VAR 0 2
66855: PUSH
66856: LD_INT 0
66858: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66859: LD_ADDR_VAR 0 5
66863: PUSH
66864: LD_VAR 0 1
66868: PPUSH
66869: LD_INT 21
66871: PUSH
66872: LD_INT 3
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PPUSH
66879: CALL_OW 72
66883: ST_TO_ADDR
// if not tmp then
66884: LD_VAR 0 5
66888: NOT
66889: IFFALSE 66893
// exit ;
66891: GO 66938
// for i in tmp do
66893: LD_ADDR_VAR 0 3
66897: PUSH
66898: LD_VAR 0 5
66902: PUSH
66903: FOR_IN
66904: IFFALSE 66936
// begin result := EnemyInRange ( i , 22 ) ;
66906: LD_ADDR_VAR 0 2
66910: PUSH
66911: LD_VAR 0 3
66915: PPUSH
66916: LD_INT 22
66918: PPUSH
66919: CALL 64536 0 2
66923: ST_TO_ADDR
// if result then
66924: LD_VAR 0 2
66928: IFFALSE 66934
// exit ;
66930: POP
66931: POP
66932: GO 66938
// end ;
66934: GO 66903
66936: POP
66937: POP
// end ;
66938: LD_VAR 0 2
66942: RET
// export function FilterByTag ( units , tag ) ; begin
66943: LD_INT 0
66945: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66946: LD_ADDR_VAR 0 3
66950: PUSH
66951: LD_VAR 0 1
66955: PPUSH
66956: LD_INT 120
66958: PUSH
66959: LD_VAR 0 2
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PPUSH
66968: CALL_OW 72
66972: ST_TO_ADDR
// end ;
66973: LD_VAR 0 3
66977: RET
// export function IsDriver ( un ) ; begin
66978: LD_INT 0
66980: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66981: LD_ADDR_VAR 0 2
66985: PUSH
66986: LD_VAR 0 1
66990: PUSH
66991: LD_INT 55
66993: PUSH
66994: EMPTY
66995: LIST
66996: PPUSH
66997: CALL_OW 69
67001: IN
67002: ST_TO_ADDR
// end ;
67003: LD_VAR 0 2
67007: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67008: LD_INT 0
67010: PPUSH
67011: PPUSH
// list := [ ] ;
67012: LD_ADDR_VAR 0 5
67016: PUSH
67017: EMPTY
67018: ST_TO_ADDR
// case d of 0 :
67019: LD_VAR 0 3
67023: PUSH
67024: LD_INT 0
67026: DOUBLE
67027: EQUAL
67028: IFTRUE 67032
67030: GO 67165
67032: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67033: LD_ADDR_VAR 0 5
67037: PUSH
67038: LD_VAR 0 1
67042: PUSH
67043: LD_INT 4
67045: MINUS
67046: PUSH
67047: LD_VAR 0 2
67051: PUSH
67052: LD_INT 4
67054: MINUS
67055: PUSH
67056: LD_INT 2
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: LIST
67063: PUSH
67064: LD_VAR 0 1
67068: PUSH
67069: LD_INT 3
67071: MINUS
67072: PUSH
67073: LD_VAR 0 2
67077: PUSH
67078: LD_INT 1
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: LIST
67085: PUSH
67086: LD_VAR 0 1
67090: PUSH
67091: LD_INT 4
67093: PLUS
67094: PUSH
67095: LD_VAR 0 2
67099: PUSH
67100: LD_INT 4
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: LIST
67107: PUSH
67108: LD_VAR 0 1
67112: PUSH
67113: LD_INT 3
67115: PLUS
67116: PUSH
67117: LD_VAR 0 2
67121: PUSH
67122: LD_INT 3
67124: PLUS
67125: PUSH
67126: LD_INT 5
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: LIST
67133: PUSH
67134: LD_VAR 0 1
67138: PUSH
67139: LD_VAR 0 2
67143: PUSH
67144: LD_INT 4
67146: PLUS
67147: PUSH
67148: LD_INT 0
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: LIST
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: ST_TO_ADDR
// end ; 1 :
67163: GO 67863
67165: LD_INT 1
67167: DOUBLE
67168: EQUAL
67169: IFTRUE 67173
67171: GO 67306
67173: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67174: LD_ADDR_VAR 0 5
67178: PUSH
67179: LD_VAR 0 1
67183: PUSH
67184: LD_VAR 0 2
67188: PUSH
67189: LD_INT 4
67191: MINUS
67192: PUSH
67193: LD_INT 3
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: LIST
67200: PUSH
67201: LD_VAR 0 1
67205: PUSH
67206: LD_INT 3
67208: MINUS
67209: PUSH
67210: LD_VAR 0 2
67214: PUSH
67215: LD_INT 3
67217: MINUS
67218: PUSH
67219: LD_INT 2
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: LIST
67226: PUSH
67227: LD_VAR 0 1
67231: PUSH
67232: LD_INT 4
67234: MINUS
67235: PUSH
67236: LD_VAR 0 2
67240: PUSH
67241: LD_INT 1
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: LIST
67248: PUSH
67249: LD_VAR 0 1
67253: PUSH
67254: LD_VAR 0 2
67258: PUSH
67259: LD_INT 3
67261: PLUS
67262: PUSH
67263: LD_INT 0
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: LIST
67270: PUSH
67271: LD_VAR 0 1
67275: PUSH
67276: LD_INT 4
67278: PLUS
67279: PUSH
67280: LD_VAR 0 2
67284: PUSH
67285: LD_INT 4
67287: PLUS
67288: PUSH
67289: LD_INT 5
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: LIST
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: ST_TO_ADDR
// end ; 2 :
67304: GO 67863
67306: LD_INT 2
67308: DOUBLE
67309: EQUAL
67310: IFTRUE 67314
67312: GO 67443
67314: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67315: LD_ADDR_VAR 0 5
67319: PUSH
67320: LD_VAR 0 1
67324: PUSH
67325: LD_VAR 0 2
67329: PUSH
67330: LD_INT 3
67332: MINUS
67333: PUSH
67334: LD_INT 3
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: LIST
67341: PUSH
67342: LD_VAR 0 1
67346: PUSH
67347: LD_INT 4
67349: PLUS
67350: PUSH
67351: LD_VAR 0 2
67355: PUSH
67356: LD_INT 4
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: LIST
67363: PUSH
67364: LD_VAR 0 1
67368: PUSH
67369: LD_VAR 0 2
67373: PUSH
67374: LD_INT 4
67376: PLUS
67377: PUSH
67378: LD_INT 0
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: LIST
67385: PUSH
67386: LD_VAR 0 1
67390: PUSH
67391: LD_INT 3
67393: MINUS
67394: PUSH
67395: LD_VAR 0 2
67399: PUSH
67400: LD_INT 1
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: LIST
67407: PUSH
67408: LD_VAR 0 1
67412: PUSH
67413: LD_INT 4
67415: MINUS
67416: PUSH
67417: LD_VAR 0 2
67421: PUSH
67422: LD_INT 4
67424: MINUS
67425: PUSH
67426: LD_INT 2
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: LIST
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: ST_TO_ADDR
// end ; 3 :
67441: GO 67863
67443: LD_INT 3
67445: DOUBLE
67446: EQUAL
67447: IFTRUE 67451
67449: GO 67584
67451: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67452: LD_ADDR_VAR 0 5
67456: PUSH
67457: LD_VAR 0 1
67461: PUSH
67462: LD_INT 3
67464: PLUS
67465: PUSH
67466: LD_VAR 0 2
67470: PUSH
67471: LD_INT 4
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: LIST
67478: PUSH
67479: LD_VAR 0 1
67483: PUSH
67484: LD_INT 4
67486: PLUS
67487: PUSH
67488: LD_VAR 0 2
67492: PUSH
67493: LD_INT 4
67495: PLUS
67496: PUSH
67497: LD_INT 5
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: LIST
67504: PUSH
67505: LD_VAR 0 1
67509: PUSH
67510: LD_INT 4
67512: MINUS
67513: PUSH
67514: LD_VAR 0 2
67518: PUSH
67519: LD_INT 1
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: LIST
67526: PUSH
67527: LD_VAR 0 1
67531: PUSH
67532: LD_VAR 0 2
67536: PUSH
67537: LD_INT 4
67539: MINUS
67540: PUSH
67541: LD_INT 3
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: LIST
67548: PUSH
67549: LD_VAR 0 1
67553: PUSH
67554: LD_INT 3
67556: MINUS
67557: PUSH
67558: LD_VAR 0 2
67562: PUSH
67563: LD_INT 3
67565: MINUS
67566: PUSH
67567: LD_INT 2
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: LIST
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: LIST
67581: ST_TO_ADDR
// end ; 4 :
67582: GO 67863
67584: LD_INT 4
67586: DOUBLE
67587: EQUAL
67588: IFTRUE 67592
67590: GO 67725
67592: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67593: LD_ADDR_VAR 0 5
67597: PUSH
67598: LD_VAR 0 1
67602: PUSH
67603: LD_VAR 0 2
67607: PUSH
67608: LD_INT 4
67610: PLUS
67611: PUSH
67612: LD_INT 0
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: LIST
67619: PUSH
67620: LD_VAR 0 1
67624: PUSH
67625: LD_INT 3
67627: PLUS
67628: PUSH
67629: LD_VAR 0 2
67633: PUSH
67634: LD_INT 3
67636: PLUS
67637: PUSH
67638: LD_INT 5
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: LIST
67645: PUSH
67646: LD_VAR 0 1
67650: PUSH
67651: LD_INT 4
67653: PLUS
67654: PUSH
67655: LD_VAR 0 2
67659: PUSH
67660: LD_INT 4
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: LIST
67667: PUSH
67668: LD_VAR 0 1
67672: PUSH
67673: LD_VAR 0 2
67677: PUSH
67678: LD_INT 3
67680: MINUS
67681: PUSH
67682: LD_INT 3
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: LIST
67689: PUSH
67690: LD_VAR 0 1
67694: PUSH
67695: LD_INT 4
67697: MINUS
67698: PUSH
67699: LD_VAR 0 2
67703: PUSH
67704: LD_INT 4
67706: MINUS
67707: PUSH
67708: LD_INT 2
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: LIST
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: ST_TO_ADDR
// end ; 5 :
67723: GO 67863
67725: LD_INT 5
67727: DOUBLE
67728: EQUAL
67729: IFTRUE 67733
67731: GO 67862
67733: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67734: LD_ADDR_VAR 0 5
67738: PUSH
67739: LD_VAR 0 1
67743: PUSH
67744: LD_INT 4
67746: MINUS
67747: PUSH
67748: LD_VAR 0 2
67752: PUSH
67753: LD_INT 1
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: LIST
67760: PUSH
67761: LD_VAR 0 1
67765: PUSH
67766: LD_VAR 0 2
67770: PUSH
67771: LD_INT 4
67773: MINUS
67774: PUSH
67775: LD_INT 3
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: LIST
67782: PUSH
67783: LD_VAR 0 1
67787: PUSH
67788: LD_INT 4
67790: PLUS
67791: PUSH
67792: LD_VAR 0 2
67796: PUSH
67797: LD_INT 4
67799: PLUS
67800: PUSH
67801: LD_INT 5
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: LIST
67808: PUSH
67809: LD_VAR 0 1
67813: PUSH
67814: LD_INT 3
67816: PLUS
67817: PUSH
67818: LD_VAR 0 2
67822: PUSH
67823: LD_INT 4
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: LIST
67830: PUSH
67831: LD_VAR 0 1
67835: PUSH
67836: LD_VAR 0 2
67840: PUSH
67841: LD_INT 3
67843: PLUS
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: LIST
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: ST_TO_ADDR
// end ; end ;
67860: GO 67863
67862: POP
// result := list ;
67863: LD_ADDR_VAR 0 4
67867: PUSH
67868: LD_VAR 0 5
67872: ST_TO_ADDR
// end ;
67873: LD_VAR 0 4
67877: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67878: LD_INT 0
67880: PPUSH
67881: PPUSH
67882: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67883: LD_VAR 0 1
67887: NOT
67888: PUSH
67889: LD_VAR 0 2
67893: PUSH
67894: LD_INT 1
67896: PUSH
67897: LD_INT 2
67899: PUSH
67900: LD_INT 3
67902: PUSH
67903: LD_INT 4
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: IN
67912: NOT
67913: OR
67914: IFFALSE 67918
// exit ;
67916: GO 68001
// tmp := [ ] ;
67918: LD_ADDR_VAR 0 5
67922: PUSH
67923: EMPTY
67924: ST_TO_ADDR
// for i in units do
67925: LD_ADDR_VAR 0 4
67929: PUSH
67930: LD_VAR 0 1
67934: PUSH
67935: FOR_IN
67936: IFFALSE 67970
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67938: LD_ADDR_VAR 0 5
67942: PUSH
67943: LD_VAR 0 5
67947: PPUSH
67948: LD_VAR 0 4
67952: PPUSH
67953: LD_VAR 0 2
67957: PPUSH
67958: CALL_OW 259
67962: PPUSH
67963: CALL 69374 0 2
67967: ST_TO_ADDR
67968: GO 67935
67970: POP
67971: POP
// if not tmp then
67972: LD_VAR 0 5
67976: NOT
67977: IFFALSE 67981
// exit ;
67979: GO 68001
// result := SortListByListDesc ( units , tmp ) ;
67981: LD_ADDR_VAR 0 3
67985: PUSH
67986: LD_VAR 0 1
67990: PPUSH
67991: LD_VAR 0 5
67995: PPUSH
67996: CALL_OW 77
68000: ST_TO_ADDR
// end ;
68001: LD_VAR 0 3
68005: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68006: LD_INT 0
68008: PPUSH
68009: PPUSH
68010: PPUSH
// result := false ;
68011: LD_ADDR_VAR 0 3
68015: PUSH
68016: LD_INT 0
68018: ST_TO_ADDR
// if not building then
68019: LD_VAR 0 2
68023: NOT
68024: IFFALSE 68028
// exit ;
68026: GO 68166
// x := GetX ( building ) ;
68028: LD_ADDR_VAR 0 4
68032: PUSH
68033: LD_VAR 0 2
68037: PPUSH
68038: CALL_OW 250
68042: ST_TO_ADDR
// y := GetY ( building ) ;
68043: LD_ADDR_VAR 0 5
68047: PUSH
68048: LD_VAR 0 2
68052: PPUSH
68053: CALL_OW 251
68057: ST_TO_ADDR
// if not x or not y then
68058: LD_VAR 0 4
68062: NOT
68063: PUSH
68064: LD_VAR 0 5
68068: NOT
68069: OR
68070: IFFALSE 68074
// exit ;
68072: GO 68166
// if GetTaskList ( unit ) then
68074: LD_VAR 0 1
68078: PPUSH
68079: CALL_OW 437
68083: IFFALSE 68166
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68085: LD_STRING e
68087: PUSH
68088: LD_VAR 0 1
68092: PPUSH
68093: CALL_OW 437
68097: PUSH
68098: LD_INT 1
68100: ARRAY
68101: PUSH
68102: LD_INT 1
68104: ARRAY
68105: EQUAL
68106: PUSH
68107: LD_VAR 0 4
68111: PUSH
68112: LD_VAR 0 1
68116: PPUSH
68117: CALL_OW 437
68121: PUSH
68122: LD_INT 1
68124: ARRAY
68125: PUSH
68126: LD_INT 2
68128: ARRAY
68129: EQUAL
68130: AND
68131: PUSH
68132: LD_VAR 0 5
68136: PUSH
68137: LD_VAR 0 1
68141: PPUSH
68142: CALL_OW 437
68146: PUSH
68147: LD_INT 1
68149: ARRAY
68150: PUSH
68151: LD_INT 3
68153: ARRAY
68154: EQUAL
68155: AND
68156: IFFALSE 68166
// result := true end ;
68158: LD_ADDR_VAR 0 3
68162: PUSH
68163: LD_INT 1
68165: ST_TO_ADDR
// end ;
68166: LD_VAR 0 3
68170: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68171: LD_INT 0
68173: PPUSH
// result := false ;
68174: LD_ADDR_VAR 0 4
68178: PUSH
68179: LD_INT 0
68181: ST_TO_ADDR
// if GetTaskList ( unit ) then
68182: LD_VAR 0 1
68186: PPUSH
68187: CALL_OW 437
68191: IFFALSE 68274
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68193: LD_STRING M
68195: PUSH
68196: LD_VAR 0 1
68200: PPUSH
68201: CALL_OW 437
68205: PUSH
68206: LD_INT 1
68208: ARRAY
68209: PUSH
68210: LD_INT 1
68212: ARRAY
68213: EQUAL
68214: PUSH
68215: LD_VAR 0 2
68219: PUSH
68220: LD_VAR 0 1
68224: PPUSH
68225: CALL_OW 437
68229: PUSH
68230: LD_INT 1
68232: ARRAY
68233: PUSH
68234: LD_INT 2
68236: ARRAY
68237: EQUAL
68238: AND
68239: PUSH
68240: LD_VAR 0 3
68244: PUSH
68245: LD_VAR 0 1
68249: PPUSH
68250: CALL_OW 437
68254: PUSH
68255: LD_INT 1
68257: ARRAY
68258: PUSH
68259: LD_INT 3
68261: ARRAY
68262: EQUAL
68263: AND
68264: IFFALSE 68274
// result := true ;
68266: LD_ADDR_VAR 0 4
68270: PUSH
68271: LD_INT 1
68273: ST_TO_ADDR
// end ; end ;
68274: LD_VAR 0 4
68278: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68279: LD_INT 0
68281: PPUSH
68282: PPUSH
68283: PPUSH
68284: PPUSH
// if not unit or not area then
68285: LD_VAR 0 1
68289: NOT
68290: PUSH
68291: LD_VAR 0 2
68295: NOT
68296: OR
68297: IFFALSE 68301
// exit ;
68299: GO 68477
// tmp := AreaToList ( area , i ) ;
68301: LD_ADDR_VAR 0 6
68305: PUSH
68306: LD_VAR 0 2
68310: PPUSH
68311: LD_VAR 0 5
68315: PPUSH
68316: CALL_OW 517
68320: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68321: LD_ADDR_VAR 0 5
68325: PUSH
68326: DOUBLE
68327: LD_INT 1
68329: DEC
68330: ST_TO_ADDR
68331: LD_VAR 0 6
68335: PUSH
68336: LD_INT 1
68338: ARRAY
68339: PUSH
68340: FOR_TO
68341: IFFALSE 68475
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68343: LD_ADDR_VAR 0 7
68347: PUSH
68348: LD_VAR 0 6
68352: PUSH
68353: LD_INT 1
68355: ARRAY
68356: PUSH
68357: LD_VAR 0 5
68361: ARRAY
68362: PUSH
68363: LD_VAR 0 6
68367: PUSH
68368: LD_INT 2
68370: ARRAY
68371: PUSH
68372: LD_VAR 0 5
68376: ARRAY
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68382: LD_INT 92
68384: PUSH
68385: LD_VAR 0 7
68389: PUSH
68390: LD_INT 1
68392: ARRAY
68393: PUSH
68394: LD_VAR 0 7
68398: PUSH
68399: LD_INT 2
68401: ARRAY
68402: PUSH
68403: LD_INT 2
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: PPUSH
68412: CALL_OW 69
68416: PUSH
68417: LD_INT 0
68419: EQUAL
68420: IFFALSE 68473
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68422: LD_VAR 0 1
68426: PPUSH
68427: LD_VAR 0 7
68431: PUSH
68432: LD_INT 1
68434: ARRAY
68435: PPUSH
68436: LD_VAR 0 7
68440: PUSH
68441: LD_INT 2
68443: ARRAY
68444: PPUSH
68445: LD_VAR 0 3
68449: PPUSH
68450: CALL_OW 48
// result := IsPlaced ( unit ) ;
68454: LD_ADDR_VAR 0 4
68458: PUSH
68459: LD_VAR 0 1
68463: PPUSH
68464: CALL_OW 305
68468: ST_TO_ADDR
// exit ;
68469: POP
68470: POP
68471: GO 68477
// end ; end ;
68473: GO 68340
68475: POP
68476: POP
// end ;
68477: LD_VAR 0 4
68481: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68482: LD_INT 0
68484: PPUSH
68485: PPUSH
68486: PPUSH
// if not side or side > 8 then
68487: LD_VAR 0 1
68491: NOT
68492: PUSH
68493: LD_VAR 0 1
68497: PUSH
68498: LD_INT 8
68500: GREATER
68501: OR
68502: IFFALSE 68506
// exit ;
68504: GO 68693
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68506: LD_ADDR_VAR 0 4
68510: PUSH
68511: LD_INT 22
68513: PUSH
68514: LD_VAR 0 1
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 21
68525: PUSH
68526: LD_INT 3
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PPUSH
68537: CALL_OW 69
68541: ST_TO_ADDR
// if not tmp then
68542: LD_VAR 0 4
68546: NOT
68547: IFFALSE 68551
// exit ;
68549: GO 68693
// enable_addtolog := true ;
68551: LD_ADDR_OWVAR 81
68555: PUSH
68556: LD_INT 1
68558: ST_TO_ADDR
// AddToLog ( [ ) ;
68559: LD_STRING [
68561: PPUSH
68562: CALL_OW 561
// for i in tmp do
68566: LD_ADDR_VAR 0 3
68570: PUSH
68571: LD_VAR 0 4
68575: PUSH
68576: FOR_IN
68577: IFFALSE 68684
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68579: LD_STRING [
68581: PUSH
68582: LD_VAR 0 3
68586: PPUSH
68587: CALL_OW 266
68591: STR
68592: PUSH
68593: LD_STRING , 
68595: STR
68596: PUSH
68597: LD_VAR 0 3
68601: PPUSH
68602: CALL_OW 250
68606: STR
68607: PUSH
68608: LD_STRING , 
68610: STR
68611: PUSH
68612: LD_VAR 0 3
68616: PPUSH
68617: CALL_OW 251
68621: STR
68622: PUSH
68623: LD_STRING , 
68625: STR
68626: PUSH
68627: LD_VAR 0 3
68631: PPUSH
68632: CALL_OW 254
68636: STR
68637: PUSH
68638: LD_STRING , 
68640: STR
68641: PUSH
68642: LD_VAR 0 3
68646: PPUSH
68647: LD_INT 1
68649: PPUSH
68650: CALL_OW 268
68654: STR
68655: PUSH
68656: LD_STRING , 
68658: STR
68659: PUSH
68660: LD_VAR 0 3
68664: PPUSH
68665: LD_INT 2
68667: PPUSH
68668: CALL_OW 268
68672: STR
68673: PUSH
68674: LD_STRING ],
68676: STR
68677: PPUSH
68678: CALL_OW 561
// end ;
68682: GO 68576
68684: POP
68685: POP
// AddToLog ( ]; ) ;
68686: LD_STRING ];
68688: PPUSH
68689: CALL_OW 561
// end ;
68693: LD_VAR 0 2
68697: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68698: LD_INT 0
68700: PPUSH
68701: PPUSH
68702: PPUSH
68703: PPUSH
68704: PPUSH
// if not area or not rate or not max then
68705: LD_VAR 0 1
68709: NOT
68710: PUSH
68711: LD_VAR 0 2
68715: NOT
68716: OR
68717: PUSH
68718: LD_VAR 0 4
68722: NOT
68723: OR
68724: IFFALSE 68728
// exit ;
68726: GO 68917
// while 1 do
68728: LD_INT 1
68730: IFFALSE 68917
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68732: LD_ADDR_VAR 0 9
68736: PUSH
68737: LD_VAR 0 1
68741: PPUSH
68742: LD_INT 1
68744: PPUSH
68745: CALL_OW 287
68749: PUSH
68750: LD_INT 10
68752: MUL
68753: ST_TO_ADDR
// r := rate / 10 ;
68754: LD_ADDR_VAR 0 7
68758: PUSH
68759: LD_VAR 0 2
68763: PUSH
68764: LD_INT 10
68766: DIVREAL
68767: ST_TO_ADDR
// time := 1 1$00 ;
68768: LD_ADDR_VAR 0 8
68772: PUSH
68773: LD_INT 2100
68775: ST_TO_ADDR
// if amount < min then
68776: LD_VAR 0 9
68780: PUSH
68781: LD_VAR 0 3
68785: LESS
68786: IFFALSE 68804
// r := r * 2 else
68788: LD_ADDR_VAR 0 7
68792: PUSH
68793: LD_VAR 0 7
68797: PUSH
68798: LD_INT 2
68800: MUL
68801: ST_TO_ADDR
68802: GO 68830
// if amount > max then
68804: LD_VAR 0 9
68808: PUSH
68809: LD_VAR 0 4
68813: GREATER
68814: IFFALSE 68830
// r := r / 2 ;
68816: LD_ADDR_VAR 0 7
68820: PUSH
68821: LD_VAR 0 7
68825: PUSH
68826: LD_INT 2
68828: DIVREAL
68829: ST_TO_ADDR
// time := time / r ;
68830: LD_ADDR_VAR 0 8
68834: PUSH
68835: LD_VAR 0 8
68839: PUSH
68840: LD_VAR 0 7
68844: DIVREAL
68845: ST_TO_ADDR
// if time < 0 then
68846: LD_VAR 0 8
68850: PUSH
68851: LD_INT 0
68853: LESS
68854: IFFALSE 68871
// time := time * - 1 ;
68856: LD_ADDR_VAR 0 8
68860: PUSH
68861: LD_VAR 0 8
68865: PUSH
68866: LD_INT 1
68868: NEG
68869: MUL
68870: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68871: LD_VAR 0 8
68875: PUSH
68876: LD_INT 35
68878: PPUSH
68879: LD_INT 875
68881: PPUSH
68882: CALL_OW 12
68886: PLUS
68887: PPUSH
68888: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68892: LD_INT 1
68894: PPUSH
68895: LD_INT 5
68897: PPUSH
68898: CALL_OW 12
68902: PPUSH
68903: LD_VAR 0 1
68907: PPUSH
68908: LD_INT 1
68910: PPUSH
68911: CALL_OW 55
// end ;
68915: GO 68728
// end ;
68917: LD_VAR 0 5
68921: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68922: LD_INT 0
68924: PPUSH
68925: PPUSH
68926: PPUSH
68927: PPUSH
68928: PPUSH
68929: PPUSH
68930: PPUSH
68931: PPUSH
// if not turrets or not factories then
68932: LD_VAR 0 1
68936: NOT
68937: PUSH
68938: LD_VAR 0 2
68942: NOT
68943: OR
68944: IFFALSE 68948
// exit ;
68946: GO 69255
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68948: LD_ADDR_VAR 0 10
68952: PUSH
68953: LD_INT 5
68955: PUSH
68956: LD_INT 6
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 2
68965: PUSH
68966: LD_INT 4
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 3
68975: PUSH
68976: LD_INT 5
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 24
68990: PUSH
68991: LD_INT 25
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 23
69000: PUSH
69001: LD_INT 27
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 42
69014: PUSH
69015: LD_INT 43
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 44
69024: PUSH
69025: LD_INT 46
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 45
69034: PUSH
69035: LD_INT 47
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: LIST
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: LIST
69051: ST_TO_ADDR
// result := [ ] ;
69052: LD_ADDR_VAR 0 3
69056: PUSH
69057: EMPTY
69058: ST_TO_ADDR
// for i in turrets do
69059: LD_ADDR_VAR 0 4
69063: PUSH
69064: LD_VAR 0 1
69068: PUSH
69069: FOR_IN
69070: IFFALSE 69253
// begin nat := GetNation ( i ) ;
69072: LD_ADDR_VAR 0 7
69076: PUSH
69077: LD_VAR 0 4
69081: PPUSH
69082: CALL_OW 248
69086: ST_TO_ADDR
// weapon := 0 ;
69087: LD_ADDR_VAR 0 8
69091: PUSH
69092: LD_INT 0
69094: ST_TO_ADDR
// if not nat then
69095: LD_VAR 0 7
69099: NOT
69100: IFFALSE 69104
// continue ;
69102: GO 69069
// for j in list [ nat ] do
69104: LD_ADDR_VAR 0 5
69108: PUSH
69109: LD_VAR 0 10
69113: PUSH
69114: LD_VAR 0 7
69118: ARRAY
69119: PUSH
69120: FOR_IN
69121: IFFALSE 69162
// if GetBWeapon ( i ) = j [ 1 ] then
69123: LD_VAR 0 4
69127: PPUSH
69128: CALL_OW 269
69132: PUSH
69133: LD_VAR 0 5
69137: PUSH
69138: LD_INT 1
69140: ARRAY
69141: EQUAL
69142: IFFALSE 69160
// begin weapon := j [ 2 ] ;
69144: LD_ADDR_VAR 0 8
69148: PUSH
69149: LD_VAR 0 5
69153: PUSH
69154: LD_INT 2
69156: ARRAY
69157: ST_TO_ADDR
// break ;
69158: GO 69162
// end ;
69160: GO 69120
69162: POP
69163: POP
// if not weapon then
69164: LD_VAR 0 8
69168: NOT
69169: IFFALSE 69173
// continue ;
69171: GO 69069
// for k in factories do
69173: LD_ADDR_VAR 0 6
69177: PUSH
69178: LD_VAR 0 2
69182: PUSH
69183: FOR_IN
69184: IFFALSE 69249
// begin weapons := AvailableWeaponList ( k ) ;
69186: LD_ADDR_VAR 0 9
69190: PUSH
69191: LD_VAR 0 6
69195: PPUSH
69196: CALL_OW 478
69200: ST_TO_ADDR
// if not weapons then
69201: LD_VAR 0 9
69205: NOT
69206: IFFALSE 69210
// continue ;
69208: GO 69183
// if weapon in weapons then
69210: LD_VAR 0 8
69214: PUSH
69215: LD_VAR 0 9
69219: IN
69220: IFFALSE 69247
// begin result := [ i , weapon ] ;
69222: LD_ADDR_VAR 0 3
69226: PUSH
69227: LD_VAR 0 4
69231: PUSH
69232: LD_VAR 0 8
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: ST_TO_ADDR
// exit ;
69241: POP
69242: POP
69243: POP
69244: POP
69245: GO 69255
// end ; end ;
69247: GO 69183
69249: POP
69250: POP
// end ;
69251: GO 69069
69253: POP
69254: POP
// end ;
69255: LD_VAR 0 3
69259: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69260: LD_INT 0
69262: PPUSH
// if not side or side > 8 then
69263: LD_VAR 0 3
69267: NOT
69268: PUSH
69269: LD_VAR 0 3
69273: PUSH
69274: LD_INT 8
69276: GREATER
69277: OR
69278: IFFALSE 69282
// exit ;
69280: GO 69341
// if not range then
69282: LD_VAR 0 4
69286: NOT
69287: IFFALSE 69298
// range := - 12 ;
69289: LD_ADDR_VAR 0 4
69293: PUSH
69294: LD_INT 12
69296: NEG
69297: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69298: LD_VAR 0 1
69302: PPUSH
69303: LD_VAR 0 2
69307: PPUSH
69308: LD_VAR 0 3
69312: PPUSH
69313: LD_VAR 0 4
69317: PPUSH
69318: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69322: LD_VAR 0 1
69326: PPUSH
69327: LD_VAR 0 2
69331: PPUSH
69332: LD_VAR 0 3
69336: PPUSH
69337: CALL_OW 331
// end ;
69341: LD_VAR 0 5
69345: RET
// export function Video ( mode ) ; begin
69346: LD_INT 0
69348: PPUSH
// ingame_video = mode ;
69349: LD_ADDR_OWVAR 52
69353: PUSH
69354: LD_VAR 0 1
69358: ST_TO_ADDR
// interface_hidden = mode ;
69359: LD_ADDR_OWVAR 54
69363: PUSH
69364: LD_VAR 0 1
69368: ST_TO_ADDR
// end ;
69369: LD_VAR 0 2
69373: RET
// export function Join ( array , element ) ; begin
69374: LD_INT 0
69376: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69377: LD_ADDR_VAR 0 3
69381: PUSH
69382: LD_VAR 0 1
69386: PPUSH
69387: LD_VAR 0 1
69391: PUSH
69392: LD_INT 1
69394: PLUS
69395: PPUSH
69396: LD_VAR 0 2
69400: PPUSH
69401: CALL_OW 1
69405: ST_TO_ADDR
// end ;
69406: LD_VAR 0 3
69410: RET
// export function JoinUnion ( array , element ) ; begin
69411: LD_INT 0
69413: PPUSH
// result := array union element ;
69414: LD_ADDR_VAR 0 3
69418: PUSH
69419: LD_VAR 0 1
69423: PUSH
69424: LD_VAR 0 2
69428: UNION
69429: ST_TO_ADDR
// end ;
69430: LD_VAR 0 3
69434: RET
// export function GetBehemoths ( side ) ; begin
69435: LD_INT 0
69437: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69438: LD_ADDR_VAR 0 2
69442: PUSH
69443: LD_INT 22
69445: PUSH
69446: LD_VAR 0 1
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 31
69457: PUSH
69458: LD_INT 25
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PPUSH
69469: CALL_OW 69
69473: ST_TO_ADDR
// end ;
69474: LD_VAR 0 2
69478: RET
// export function Shuffle ( array ) ; var i , index ; begin
69479: LD_INT 0
69481: PPUSH
69482: PPUSH
69483: PPUSH
// result := [ ] ;
69484: LD_ADDR_VAR 0 2
69488: PUSH
69489: EMPTY
69490: ST_TO_ADDR
// if not array then
69491: LD_VAR 0 1
69495: NOT
69496: IFFALSE 69500
// exit ;
69498: GO 69599
// Randomize ;
69500: CALL_OW 10
// for i = array downto 1 do
69504: LD_ADDR_VAR 0 3
69508: PUSH
69509: DOUBLE
69510: LD_VAR 0 1
69514: INC
69515: ST_TO_ADDR
69516: LD_INT 1
69518: PUSH
69519: FOR_DOWNTO
69520: IFFALSE 69597
// begin index := rand ( 1 , array ) ;
69522: LD_ADDR_VAR 0 4
69526: PUSH
69527: LD_INT 1
69529: PPUSH
69530: LD_VAR 0 1
69534: PPUSH
69535: CALL_OW 12
69539: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69540: LD_ADDR_VAR 0 2
69544: PUSH
69545: LD_VAR 0 2
69549: PPUSH
69550: LD_VAR 0 2
69554: PUSH
69555: LD_INT 1
69557: PLUS
69558: PPUSH
69559: LD_VAR 0 1
69563: PUSH
69564: LD_VAR 0 4
69568: ARRAY
69569: PPUSH
69570: CALL_OW 2
69574: ST_TO_ADDR
// array := Delete ( array , index ) ;
69575: LD_ADDR_VAR 0 1
69579: PUSH
69580: LD_VAR 0 1
69584: PPUSH
69585: LD_VAR 0 4
69589: PPUSH
69590: CALL_OW 3
69594: ST_TO_ADDR
// end ;
69595: GO 69519
69597: POP
69598: POP
// end ;
69599: LD_VAR 0 2
69603: RET
// export function GetBaseMaterials ( base ) ; begin
69604: LD_INT 0
69606: PPUSH
// result := [ 0 , 0 , 0 ] ;
69607: LD_ADDR_VAR 0 2
69611: PUSH
69612: LD_INT 0
69614: PUSH
69615: LD_INT 0
69617: PUSH
69618: LD_INT 0
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: LIST
69625: ST_TO_ADDR
// if not base then
69626: LD_VAR 0 1
69630: NOT
69631: IFFALSE 69635
// exit ;
69633: GO 69684
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69635: LD_ADDR_VAR 0 2
69639: PUSH
69640: LD_VAR 0 1
69644: PPUSH
69645: LD_INT 1
69647: PPUSH
69648: CALL_OW 275
69652: PUSH
69653: LD_VAR 0 1
69657: PPUSH
69658: LD_INT 2
69660: PPUSH
69661: CALL_OW 275
69665: PUSH
69666: LD_VAR 0 1
69670: PPUSH
69671: LD_INT 3
69673: PPUSH
69674: CALL_OW 275
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: LIST
69683: ST_TO_ADDR
// end ;
69684: LD_VAR 0 2
69688: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69689: LD_INT 0
69691: PPUSH
69692: PPUSH
// result := array ;
69693: LD_ADDR_VAR 0 3
69697: PUSH
69698: LD_VAR 0 1
69702: ST_TO_ADDR
// if size >= result then
69703: LD_VAR 0 2
69707: PUSH
69708: LD_VAR 0 3
69712: GREATEREQUAL
69713: IFFALSE 69717
// exit ;
69715: GO 69767
// if size then
69717: LD_VAR 0 2
69721: IFFALSE 69767
// for i := array downto size do
69723: LD_ADDR_VAR 0 4
69727: PUSH
69728: DOUBLE
69729: LD_VAR 0 1
69733: INC
69734: ST_TO_ADDR
69735: LD_VAR 0 2
69739: PUSH
69740: FOR_DOWNTO
69741: IFFALSE 69765
// result := Delete ( result , result ) ;
69743: LD_ADDR_VAR 0 3
69747: PUSH
69748: LD_VAR 0 3
69752: PPUSH
69753: LD_VAR 0 3
69757: PPUSH
69758: CALL_OW 3
69762: ST_TO_ADDR
69763: GO 69740
69765: POP
69766: POP
// end ;
69767: LD_VAR 0 3
69771: RET
// export function ComExit ( unit ) ; var tmp ; begin
69772: LD_INT 0
69774: PPUSH
69775: PPUSH
// if not IsInUnit ( unit ) then
69776: LD_VAR 0 1
69780: PPUSH
69781: CALL_OW 310
69785: NOT
69786: IFFALSE 69790
// exit ;
69788: GO 69850
// tmp := IsInUnit ( unit ) ;
69790: LD_ADDR_VAR 0 3
69794: PUSH
69795: LD_VAR 0 1
69799: PPUSH
69800: CALL_OW 310
69804: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69805: LD_VAR 0 3
69809: PPUSH
69810: CALL_OW 247
69814: PUSH
69815: LD_INT 2
69817: EQUAL
69818: IFFALSE 69831
// ComExitVehicle ( unit ) else
69820: LD_VAR 0 1
69824: PPUSH
69825: CALL_OW 121
69829: GO 69840
// ComExitBuilding ( unit ) ;
69831: LD_VAR 0 1
69835: PPUSH
69836: CALL_OW 122
// result := tmp ;
69840: LD_ADDR_VAR 0 2
69844: PUSH
69845: LD_VAR 0 3
69849: ST_TO_ADDR
// end ;
69850: LD_VAR 0 2
69854: RET
// export function ComExitAll ( units ) ; var i ; begin
69855: LD_INT 0
69857: PPUSH
69858: PPUSH
// if not units then
69859: LD_VAR 0 1
69863: NOT
69864: IFFALSE 69868
// exit ;
69866: GO 69894
// for i in units do
69868: LD_ADDR_VAR 0 3
69872: PUSH
69873: LD_VAR 0 1
69877: PUSH
69878: FOR_IN
69879: IFFALSE 69892
// ComExit ( i ) ;
69881: LD_VAR 0 3
69885: PPUSH
69886: CALL 69772 0 1
69890: GO 69878
69892: POP
69893: POP
// end ;
69894: LD_VAR 0 2
69898: RET
// export function ResetHc ; begin
69899: LD_INT 0
69901: PPUSH
// InitHc ;
69902: CALL_OW 19
// hc_importance := 0 ;
69906: LD_ADDR_OWVAR 32
69910: PUSH
69911: LD_INT 0
69913: ST_TO_ADDR
// end ;
69914: LD_VAR 0 1
69918: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69919: LD_INT 0
69921: PPUSH
69922: PPUSH
69923: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69924: LD_ADDR_VAR 0 6
69928: PUSH
69929: LD_VAR 0 1
69933: PUSH
69934: LD_VAR 0 3
69938: PLUS
69939: PUSH
69940: LD_INT 2
69942: DIV
69943: ST_TO_ADDR
// if _x < 0 then
69944: LD_VAR 0 6
69948: PUSH
69949: LD_INT 0
69951: LESS
69952: IFFALSE 69969
// _x := _x * - 1 ;
69954: LD_ADDR_VAR 0 6
69958: PUSH
69959: LD_VAR 0 6
69963: PUSH
69964: LD_INT 1
69966: NEG
69967: MUL
69968: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69969: LD_ADDR_VAR 0 7
69973: PUSH
69974: LD_VAR 0 2
69978: PUSH
69979: LD_VAR 0 4
69983: PLUS
69984: PUSH
69985: LD_INT 2
69987: DIV
69988: ST_TO_ADDR
// if _y < 0 then
69989: LD_VAR 0 7
69993: PUSH
69994: LD_INT 0
69996: LESS
69997: IFFALSE 70014
// _y := _y * - 1 ;
69999: LD_ADDR_VAR 0 7
70003: PUSH
70004: LD_VAR 0 7
70008: PUSH
70009: LD_INT 1
70011: NEG
70012: MUL
70013: ST_TO_ADDR
// result := [ _x , _y ] ;
70014: LD_ADDR_VAR 0 5
70018: PUSH
70019: LD_VAR 0 6
70023: PUSH
70024: LD_VAR 0 7
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: ST_TO_ADDR
// end ;
70033: LD_VAR 0 5
70037: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70038: LD_INT 0
70040: PPUSH
70041: PPUSH
70042: PPUSH
70043: PPUSH
// task := GetTaskList ( unit ) ;
70044: LD_ADDR_VAR 0 7
70048: PUSH
70049: LD_VAR 0 1
70053: PPUSH
70054: CALL_OW 437
70058: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70059: LD_VAR 0 7
70063: NOT
70064: PUSH
70065: LD_VAR 0 1
70069: PPUSH
70070: LD_VAR 0 2
70074: PPUSH
70075: CALL_OW 308
70079: NOT
70080: AND
70081: IFFALSE 70085
// exit ;
70083: GO 70203
// if IsInArea ( unit , area ) then
70085: LD_VAR 0 1
70089: PPUSH
70090: LD_VAR 0 2
70094: PPUSH
70095: CALL_OW 308
70099: IFFALSE 70117
// begin ComMoveToArea ( unit , goAway ) ;
70101: LD_VAR 0 1
70105: PPUSH
70106: LD_VAR 0 3
70110: PPUSH
70111: CALL_OW 113
// exit ;
70115: GO 70203
// end ; if task [ 1 ] [ 1 ] <> M then
70117: LD_VAR 0 7
70121: PUSH
70122: LD_INT 1
70124: ARRAY
70125: PUSH
70126: LD_INT 1
70128: ARRAY
70129: PUSH
70130: LD_STRING M
70132: NONEQUAL
70133: IFFALSE 70137
// exit ;
70135: GO 70203
// x := task [ 1 ] [ 2 ] ;
70137: LD_ADDR_VAR 0 5
70141: PUSH
70142: LD_VAR 0 7
70146: PUSH
70147: LD_INT 1
70149: ARRAY
70150: PUSH
70151: LD_INT 2
70153: ARRAY
70154: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70155: LD_ADDR_VAR 0 6
70159: PUSH
70160: LD_VAR 0 7
70164: PUSH
70165: LD_INT 1
70167: ARRAY
70168: PUSH
70169: LD_INT 3
70171: ARRAY
70172: ST_TO_ADDR
// if InArea ( x , y , area ) then
70173: LD_VAR 0 5
70177: PPUSH
70178: LD_VAR 0 6
70182: PPUSH
70183: LD_VAR 0 2
70187: PPUSH
70188: CALL_OW 309
70192: IFFALSE 70203
// ComStop ( unit ) ;
70194: LD_VAR 0 1
70198: PPUSH
70199: CALL_OW 141
// end ;
70203: LD_VAR 0 4
70207: RET
// export function Abs ( value ) ; begin
70208: LD_INT 0
70210: PPUSH
// result := value ;
70211: LD_ADDR_VAR 0 2
70215: PUSH
70216: LD_VAR 0 1
70220: ST_TO_ADDR
// if value < 0 then
70221: LD_VAR 0 1
70225: PUSH
70226: LD_INT 0
70228: LESS
70229: IFFALSE 70246
// result := value * - 1 ;
70231: LD_ADDR_VAR 0 2
70235: PUSH
70236: LD_VAR 0 1
70240: PUSH
70241: LD_INT 1
70243: NEG
70244: MUL
70245: ST_TO_ADDR
// end ;
70246: LD_VAR 0 2
70250: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70251: LD_INT 0
70253: PPUSH
70254: PPUSH
70255: PPUSH
70256: PPUSH
70257: PPUSH
70258: PPUSH
70259: PPUSH
70260: PPUSH
// if not unit or not building then
70261: LD_VAR 0 1
70265: NOT
70266: PUSH
70267: LD_VAR 0 2
70271: NOT
70272: OR
70273: IFFALSE 70277
// exit ;
70275: GO 70503
// x := GetX ( building ) ;
70277: LD_ADDR_VAR 0 4
70281: PUSH
70282: LD_VAR 0 2
70286: PPUSH
70287: CALL_OW 250
70291: ST_TO_ADDR
// y := GetY ( building ) ;
70292: LD_ADDR_VAR 0 6
70296: PUSH
70297: LD_VAR 0 2
70301: PPUSH
70302: CALL_OW 251
70306: ST_TO_ADDR
// d := GetDir ( building ) ;
70307: LD_ADDR_VAR 0 8
70311: PUSH
70312: LD_VAR 0 2
70316: PPUSH
70317: CALL_OW 254
70321: ST_TO_ADDR
// r := 4 ;
70322: LD_ADDR_VAR 0 9
70326: PUSH
70327: LD_INT 4
70329: ST_TO_ADDR
// for i := 1 to 5 do
70330: LD_ADDR_VAR 0 10
70334: PUSH
70335: DOUBLE
70336: LD_INT 1
70338: DEC
70339: ST_TO_ADDR
70340: LD_INT 5
70342: PUSH
70343: FOR_TO
70344: IFFALSE 70501
// begin _x := ShiftX ( x , d , r + i ) ;
70346: LD_ADDR_VAR 0 5
70350: PUSH
70351: LD_VAR 0 4
70355: PPUSH
70356: LD_VAR 0 8
70360: PPUSH
70361: LD_VAR 0 9
70365: PUSH
70366: LD_VAR 0 10
70370: PLUS
70371: PPUSH
70372: CALL_OW 272
70376: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70377: LD_ADDR_VAR 0 7
70381: PUSH
70382: LD_VAR 0 6
70386: PPUSH
70387: LD_VAR 0 8
70391: PPUSH
70392: LD_VAR 0 9
70396: PUSH
70397: LD_VAR 0 10
70401: PLUS
70402: PPUSH
70403: CALL_OW 273
70407: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70408: LD_VAR 0 5
70412: PPUSH
70413: LD_VAR 0 7
70417: PPUSH
70418: CALL_OW 488
70422: PUSH
70423: LD_VAR 0 5
70427: PPUSH
70428: LD_VAR 0 7
70432: PPUSH
70433: CALL_OW 428
70437: PPUSH
70438: CALL_OW 247
70442: PUSH
70443: LD_INT 3
70445: PUSH
70446: LD_INT 2
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: IN
70453: NOT
70454: AND
70455: IFFALSE 70499
// begin ComMoveXY ( unit , _x , _y ) ;
70457: LD_VAR 0 1
70461: PPUSH
70462: LD_VAR 0 5
70466: PPUSH
70467: LD_VAR 0 7
70471: PPUSH
70472: CALL_OW 111
// result := [ _x , _y ] ;
70476: LD_ADDR_VAR 0 3
70480: PUSH
70481: LD_VAR 0 5
70485: PUSH
70486: LD_VAR 0 7
70490: PUSH
70491: EMPTY
70492: LIST
70493: LIST
70494: ST_TO_ADDR
// exit ;
70495: POP
70496: POP
70497: GO 70503
// end ; end ;
70499: GO 70343
70501: POP
70502: POP
// end ;
70503: LD_VAR 0 3
70507: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70508: LD_INT 0
70510: PPUSH
70511: PPUSH
70512: PPUSH
// result := 0 ;
70513: LD_ADDR_VAR 0 3
70517: PUSH
70518: LD_INT 0
70520: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70521: LD_VAR 0 1
70525: PUSH
70526: LD_INT 0
70528: LESS
70529: PUSH
70530: LD_VAR 0 1
70534: PUSH
70535: LD_INT 8
70537: GREATER
70538: OR
70539: PUSH
70540: LD_VAR 0 2
70544: PUSH
70545: LD_INT 0
70547: LESS
70548: OR
70549: PUSH
70550: LD_VAR 0 2
70554: PUSH
70555: LD_INT 8
70557: GREATER
70558: OR
70559: IFFALSE 70563
// exit ;
70561: GO 70638
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70563: LD_ADDR_VAR 0 4
70567: PUSH
70568: LD_INT 22
70570: PUSH
70571: LD_VAR 0 2
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PPUSH
70580: CALL_OW 69
70584: PUSH
70585: FOR_IN
70586: IFFALSE 70636
// begin un := UnitShoot ( i ) ;
70588: LD_ADDR_VAR 0 5
70592: PUSH
70593: LD_VAR 0 4
70597: PPUSH
70598: CALL_OW 504
70602: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70603: LD_VAR 0 5
70607: PPUSH
70608: CALL_OW 255
70612: PUSH
70613: LD_VAR 0 1
70617: EQUAL
70618: IFFALSE 70634
// begin result := un ;
70620: LD_ADDR_VAR 0 3
70624: PUSH
70625: LD_VAR 0 5
70629: ST_TO_ADDR
// exit ;
70630: POP
70631: POP
70632: GO 70638
// end ; end ;
70634: GO 70585
70636: POP
70637: POP
// end ;
70638: LD_VAR 0 3
70642: RET
// export function GetCargoBay ( units ) ; begin
70643: LD_INT 0
70645: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70646: LD_ADDR_VAR 0 2
70650: PUSH
70651: LD_VAR 0 1
70655: PPUSH
70656: LD_INT 2
70658: PUSH
70659: LD_INT 34
70661: PUSH
70662: LD_INT 12
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 34
70671: PUSH
70672: LD_INT 51
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 34
70681: PUSH
70682: LD_INT 32
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 34
70691: PUSH
70692: LD_INT 89
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: PPUSH
70706: CALL_OW 72
70710: ST_TO_ADDR
// end ;
70711: LD_VAR 0 2
70715: RET
// export function Negate ( value ) ; begin
70716: LD_INT 0
70718: PPUSH
// result := not value ;
70719: LD_ADDR_VAR 0 2
70723: PUSH
70724: LD_VAR 0 1
70728: NOT
70729: ST_TO_ADDR
// end ;
70730: LD_VAR 0 2
70734: RET
// export function Inc ( value ) ; begin
70735: LD_INT 0
70737: PPUSH
// result := value + 1 ;
70738: LD_ADDR_VAR 0 2
70742: PUSH
70743: LD_VAR 0 1
70747: PUSH
70748: LD_INT 1
70750: PLUS
70751: ST_TO_ADDR
// end ;
70752: LD_VAR 0 2
70756: RET
// export function Dec ( value ) ; begin
70757: LD_INT 0
70759: PPUSH
// result := value - 1 ;
70760: LD_ADDR_VAR 0 2
70764: PUSH
70765: LD_VAR 0 1
70769: PUSH
70770: LD_INT 1
70772: MINUS
70773: ST_TO_ADDR
// end ;
70774: LD_VAR 0 2
70778: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70779: LD_INT 0
70781: PPUSH
70782: PPUSH
70783: PPUSH
70784: PPUSH
70785: PPUSH
70786: PPUSH
70787: PPUSH
70788: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70789: LD_VAR 0 1
70793: PPUSH
70794: LD_VAR 0 2
70798: PPUSH
70799: CALL_OW 488
70803: NOT
70804: PUSH
70805: LD_VAR 0 3
70809: PPUSH
70810: LD_VAR 0 4
70814: PPUSH
70815: CALL_OW 488
70819: NOT
70820: OR
70821: IFFALSE 70834
// begin result := - 1 ;
70823: LD_ADDR_VAR 0 5
70827: PUSH
70828: LD_INT 1
70830: NEG
70831: ST_TO_ADDR
// exit ;
70832: GO 71069
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70834: LD_ADDR_VAR 0 12
70838: PUSH
70839: LD_VAR 0 1
70843: PPUSH
70844: LD_VAR 0 2
70848: PPUSH
70849: LD_VAR 0 3
70853: PPUSH
70854: LD_VAR 0 4
70858: PPUSH
70859: CALL 69919 0 4
70863: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70864: LD_ADDR_VAR 0 11
70868: PUSH
70869: LD_VAR 0 1
70873: PPUSH
70874: LD_VAR 0 2
70878: PPUSH
70879: LD_VAR 0 12
70883: PUSH
70884: LD_INT 1
70886: ARRAY
70887: PPUSH
70888: LD_VAR 0 12
70892: PUSH
70893: LD_INT 2
70895: ARRAY
70896: PPUSH
70897: CALL_OW 298
70901: ST_TO_ADDR
// distance := 9999 ;
70902: LD_ADDR_VAR 0 10
70906: PUSH
70907: LD_INT 9999
70909: ST_TO_ADDR
// for i := 0 to 5 do
70910: LD_ADDR_VAR 0 6
70914: PUSH
70915: DOUBLE
70916: LD_INT 0
70918: DEC
70919: ST_TO_ADDR
70920: LD_INT 5
70922: PUSH
70923: FOR_TO
70924: IFFALSE 71067
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70926: LD_ADDR_VAR 0 7
70930: PUSH
70931: LD_VAR 0 1
70935: PPUSH
70936: LD_VAR 0 6
70940: PPUSH
70941: LD_VAR 0 11
70945: PPUSH
70946: CALL_OW 272
70950: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70951: LD_ADDR_VAR 0 8
70955: PUSH
70956: LD_VAR 0 2
70960: PPUSH
70961: LD_VAR 0 6
70965: PPUSH
70966: LD_VAR 0 11
70970: PPUSH
70971: CALL_OW 273
70975: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70976: LD_VAR 0 7
70980: PPUSH
70981: LD_VAR 0 8
70985: PPUSH
70986: CALL_OW 488
70990: NOT
70991: IFFALSE 70995
// continue ;
70993: GO 70923
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70995: LD_ADDR_VAR 0 9
70999: PUSH
71000: LD_VAR 0 12
71004: PUSH
71005: LD_INT 1
71007: ARRAY
71008: PPUSH
71009: LD_VAR 0 12
71013: PUSH
71014: LD_INT 2
71016: ARRAY
71017: PPUSH
71018: LD_VAR 0 7
71022: PPUSH
71023: LD_VAR 0 8
71027: PPUSH
71028: CALL_OW 298
71032: ST_TO_ADDR
// if tmp < distance then
71033: LD_VAR 0 9
71037: PUSH
71038: LD_VAR 0 10
71042: LESS
71043: IFFALSE 71065
// begin result := i ;
71045: LD_ADDR_VAR 0 5
71049: PUSH
71050: LD_VAR 0 6
71054: ST_TO_ADDR
// distance := tmp ;
71055: LD_ADDR_VAR 0 10
71059: PUSH
71060: LD_VAR 0 9
71064: ST_TO_ADDR
// end ; end ;
71065: GO 70923
71067: POP
71068: POP
// end ;
71069: LD_VAR 0 5
71073: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71074: LD_INT 0
71076: PPUSH
71077: PPUSH
// if not driver or not IsInUnit ( driver ) then
71078: LD_VAR 0 1
71082: NOT
71083: PUSH
71084: LD_VAR 0 1
71088: PPUSH
71089: CALL_OW 310
71093: NOT
71094: OR
71095: IFFALSE 71099
// exit ;
71097: GO 71189
// vehicle := IsInUnit ( driver ) ;
71099: LD_ADDR_VAR 0 3
71103: PUSH
71104: LD_VAR 0 1
71108: PPUSH
71109: CALL_OW 310
71113: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71114: LD_VAR 0 1
71118: PPUSH
71119: LD_STRING \
71121: PUSH
71122: LD_INT 0
71124: PUSH
71125: LD_INT 0
71127: PUSH
71128: LD_INT 0
71130: PUSH
71131: LD_INT 0
71133: PUSH
71134: LD_INT 0
71136: PUSH
71137: LD_INT 0
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: PUSH
71149: LD_STRING E
71151: PUSH
71152: LD_INT 0
71154: PUSH
71155: LD_INT 0
71157: PUSH
71158: LD_VAR 0 3
71162: PUSH
71163: LD_INT 0
71165: PUSH
71166: LD_INT 0
71168: PUSH
71169: LD_INT 0
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PPUSH
71185: CALL_OW 446
// end ;
71189: LD_VAR 0 2
71193: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71194: LD_INT 0
71196: PPUSH
71197: PPUSH
// if not driver or not IsInUnit ( driver ) then
71198: LD_VAR 0 1
71202: NOT
71203: PUSH
71204: LD_VAR 0 1
71208: PPUSH
71209: CALL_OW 310
71213: NOT
71214: OR
71215: IFFALSE 71219
// exit ;
71217: GO 71309
// vehicle := IsInUnit ( driver ) ;
71219: LD_ADDR_VAR 0 3
71223: PUSH
71224: LD_VAR 0 1
71228: PPUSH
71229: CALL_OW 310
71233: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71234: LD_VAR 0 1
71238: PPUSH
71239: LD_STRING \
71241: PUSH
71242: LD_INT 0
71244: PUSH
71245: LD_INT 0
71247: PUSH
71248: LD_INT 0
71250: PUSH
71251: LD_INT 0
71253: PUSH
71254: LD_INT 0
71256: PUSH
71257: LD_INT 0
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: LIST
71267: LIST
71268: PUSH
71269: LD_STRING E
71271: PUSH
71272: LD_INT 0
71274: PUSH
71275: LD_INT 0
71277: PUSH
71278: LD_VAR 0 3
71282: PUSH
71283: LD_INT 0
71285: PUSH
71286: LD_INT 0
71288: PUSH
71289: LD_INT 0
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PPUSH
71305: CALL_OW 447
// end ;
71309: LD_VAR 0 2
71313: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71314: LD_INT 0
71316: PPUSH
71317: PPUSH
71318: PPUSH
// tmp := [ ] ;
71319: LD_ADDR_VAR 0 5
71323: PUSH
71324: EMPTY
71325: ST_TO_ADDR
// for i in units do
71326: LD_ADDR_VAR 0 4
71330: PUSH
71331: LD_VAR 0 1
71335: PUSH
71336: FOR_IN
71337: IFFALSE 71375
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71339: LD_ADDR_VAR 0 5
71343: PUSH
71344: LD_VAR 0 5
71348: PPUSH
71349: LD_VAR 0 5
71353: PUSH
71354: LD_INT 1
71356: PLUS
71357: PPUSH
71358: LD_VAR 0 4
71362: PPUSH
71363: CALL_OW 256
71367: PPUSH
71368: CALL_OW 2
71372: ST_TO_ADDR
71373: GO 71336
71375: POP
71376: POP
// if not tmp then
71377: LD_VAR 0 5
71381: NOT
71382: IFFALSE 71386
// exit ;
71384: GO 71434
// if asc then
71386: LD_VAR 0 2
71390: IFFALSE 71414
// result := SortListByListAsc ( units , tmp ) else
71392: LD_ADDR_VAR 0 3
71396: PUSH
71397: LD_VAR 0 1
71401: PPUSH
71402: LD_VAR 0 5
71406: PPUSH
71407: CALL_OW 76
71411: ST_TO_ADDR
71412: GO 71434
// result := SortListByListDesc ( units , tmp ) ;
71414: LD_ADDR_VAR 0 3
71418: PUSH
71419: LD_VAR 0 1
71423: PPUSH
71424: LD_VAR 0 5
71428: PPUSH
71429: CALL_OW 77
71433: ST_TO_ADDR
// end ;
71434: LD_VAR 0 3
71438: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71439: LD_INT 0
71441: PPUSH
71442: PPUSH
// task := GetTaskList ( mech ) ;
71443: LD_ADDR_VAR 0 4
71447: PUSH
71448: LD_VAR 0 1
71452: PPUSH
71453: CALL_OW 437
71457: ST_TO_ADDR
// if not task then
71458: LD_VAR 0 4
71462: NOT
71463: IFFALSE 71467
// exit ;
71465: GO 71509
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71467: LD_ADDR_VAR 0 3
71471: PUSH
71472: LD_VAR 0 4
71476: PUSH
71477: LD_INT 1
71479: ARRAY
71480: PUSH
71481: LD_INT 1
71483: ARRAY
71484: PUSH
71485: LD_STRING r
71487: EQUAL
71488: PUSH
71489: LD_VAR 0 4
71493: PUSH
71494: LD_INT 1
71496: ARRAY
71497: PUSH
71498: LD_INT 4
71500: ARRAY
71501: PUSH
71502: LD_VAR 0 2
71506: EQUAL
71507: AND
71508: ST_TO_ADDR
// end ;
71509: LD_VAR 0 3
71513: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71514: LD_INT 0
71516: PPUSH
// SetDir ( unit , d ) ;
71517: LD_VAR 0 1
71521: PPUSH
71522: LD_VAR 0 4
71526: PPUSH
71527: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71531: LD_VAR 0 1
71535: PPUSH
71536: LD_VAR 0 2
71540: PPUSH
71541: LD_VAR 0 3
71545: PPUSH
71546: LD_VAR 0 5
71550: PPUSH
71551: CALL_OW 48
// end ;
71555: LD_VAR 0 6
71559: RET
// export function ToNaturalNumber ( number ) ; begin
71560: LD_INT 0
71562: PPUSH
// result := number div 1 ;
71563: LD_ADDR_VAR 0 2
71567: PUSH
71568: LD_VAR 0 1
71572: PUSH
71573: LD_INT 1
71575: DIV
71576: ST_TO_ADDR
// if number < 0 then
71577: LD_VAR 0 1
71581: PUSH
71582: LD_INT 0
71584: LESS
71585: IFFALSE 71595
// result := 0 ;
71587: LD_ADDR_VAR 0 2
71591: PUSH
71592: LD_INT 0
71594: ST_TO_ADDR
// end ;
71595: LD_VAR 0 2
71599: RET
// export function SortByClass ( units , class ) ; var un ; begin
71600: LD_INT 0
71602: PPUSH
71603: PPUSH
// if not units or not class then
71604: LD_VAR 0 1
71608: NOT
71609: PUSH
71610: LD_VAR 0 2
71614: NOT
71615: OR
71616: IFFALSE 71620
// exit ;
71618: GO 71715
// result := [ ] ;
71620: LD_ADDR_VAR 0 3
71624: PUSH
71625: EMPTY
71626: ST_TO_ADDR
// for un in units do
71627: LD_ADDR_VAR 0 4
71631: PUSH
71632: LD_VAR 0 1
71636: PUSH
71637: FOR_IN
71638: IFFALSE 71713
// if GetClass ( un ) = class then
71640: LD_VAR 0 4
71644: PPUSH
71645: CALL_OW 257
71649: PUSH
71650: LD_VAR 0 2
71654: EQUAL
71655: IFFALSE 71682
// result := Insert ( result , 1 , un ) else
71657: LD_ADDR_VAR 0 3
71661: PUSH
71662: LD_VAR 0 3
71666: PPUSH
71667: LD_INT 1
71669: PPUSH
71670: LD_VAR 0 4
71674: PPUSH
71675: CALL_OW 2
71679: ST_TO_ADDR
71680: GO 71711
// result := Replace ( result , result + 1 , un ) ;
71682: LD_ADDR_VAR 0 3
71686: PUSH
71687: LD_VAR 0 3
71691: PPUSH
71692: LD_VAR 0 3
71696: PUSH
71697: LD_INT 1
71699: PLUS
71700: PPUSH
71701: LD_VAR 0 4
71705: PPUSH
71706: CALL_OW 1
71710: ST_TO_ADDR
71711: GO 71637
71713: POP
71714: POP
// end ;
71715: LD_VAR 0 3
71719: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71720: LD_INT 0
71722: PPUSH
71723: PPUSH
71724: PPUSH
71725: PPUSH
71726: PPUSH
71727: PPUSH
71728: PPUSH
// result := [ ] ;
71729: LD_ADDR_VAR 0 4
71733: PUSH
71734: EMPTY
71735: ST_TO_ADDR
// if x - r < 0 then
71736: LD_VAR 0 1
71740: PUSH
71741: LD_VAR 0 3
71745: MINUS
71746: PUSH
71747: LD_INT 0
71749: LESS
71750: IFFALSE 71762
// min_x := 0 else
71752: LD_ADDR_VAR 0 8
71756: PUSH
71757: LD_INT 0
71759: ST_TO_ADDR
71760: GO 71778
// min_x := x - r ;
71762: LD_ADDR_VAR 0 8
71766: PUSH
71767: LD_VAR 0 1
71771: PUSH
71772: LD_VAR 0 3
71776: MINUS
71777: ST_TO_ADDR
// if y - r < 0 then
71778: LD_VAR 0 2
71782: PUSH
71783: LD_VAR 0 3
71787: MINUS
71788: PUSH
71789: LD_INT 0
71791: LESS
71792: IFFALSE 71804
// min_y := 0 else
71794: LD_ADDR_VAR 0 7
71798: PUSH
71799: LD_INT 0
71801: ST_TO_ADDR
71802: GO 71820
// min_y := y - r ;
71804: LD_ADDR_VAR 0 7
71808: PUSH
71809: LD_VAR 0 2
71813: PUSH
71814: LD_VAR 0 3
71818: MINUS
71819: ST_TO_ADDR
// max_x := x + r ;
71820: LD_ADDR_VAR 0 9
71824: PUSH
71825: LD_VAR 0 1
71829: PUSH
71830: LD_VAR 0 3
71834: PLUS
71835: ST_TO_ADDR
// max_y := y + r ;
71836: LD_ADDR_VAR 0 10
71840: PUSH
71841: LD_VAR 0 2
71845: PUSH
71846: LD_VAR 0 3
71850: PLUS
71851: ST_TO_ADDR
// for _x = min_x to max_x do
71852: LD_ADDR_VAR 0 5
71856: PUSH
71857: DOUBLE
71858: LD_VAR 0 8
71862: DEC
71863: ST_TO_ADDR
71864: LD_VAR 0 9
71868: PUSH
71869: FOR_TO
71870: IFFALSE 71971
// for _y = min_y to max_y do
71872: LD_ADDR_VAR 0 6
71876: PUSH
71877: DOUBLE
71878: LD_VAR 0 7
71882: DEC
71883: ST_TO_ADDR
71884: LD_VAR 0 10
71888: PUSH
71889: FOR_TO
71890: IFFALSE 71967
// begin if not ValidHex ( _x , _y ) then
71892: LD_VAR 0 5
71896: PPUSH
71897: LD_VAR 0 6
71901: PPUSH
71902: CALL_OW 488
71906: NOT
71907: IFFALSE 71911
// continue ;
71909: GO 71889
// if GetResourceTypeXY ( _x , _y ) then
71911: LD_VAR 0 5
71915: PPUSH
71916: LD_VAR 0 6
71920: PPUSH
71921: CALL_OW 283
71925: IFFALSE 71965
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71927: LD_ADDR_VAR 0 4
71931: PUSH
71932: LD_VAR 0 4
71936: PPUSH
71937: LD_VAR 0 4
71941: PUSH
71942: LD_INT 1
71944: PLUS
71945: PPUSH
71946: LD_VAR 0 5
71950: PUSH
71951: LD_VAR 0 6
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PPUSH
71960: CALL_OW 1
71964: ST_TO_ADDR
// end ;
71965: GO 71889
71967: POP
71968: POP
71969: GO 71869
71971: POP
71972: POP
// end ;
71973: LD_VAR 0 4
71977: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71978: LD_INT 0
71980: PPUSH
71981: PPUSH
71982: PPUSH
71983: PPUSH
71984: PPUSH
71985: PPUSH
71986: PPUSH
71987: PPUSH
// if not units then
71988: LD_VAR 0 1
71992: NOT
71993: IFFALSE 71997
// exit ;
71995: GO 72525
// result := UnitFilter ( units , [ f_ok ] ) ;
71997: LD_ADDR_VAR 0 3
72001: PUSH
72002: LD_VAR 0 1
72006: PPUSH
72007: LD_INT 50
72009: PUSH
72010: EMPTY
72011: LIST
72012: PPUSH
72013: CALL_OW 72
72017: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72018: LD_ADDR_VAR 0 8
72022: PUSH
72023: LD_VAR 0 1
72027: PUSH
72028: LD_INT 1
72030: ARRAY
72031: PPUSH
72032: CALL_OW 255
72036: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72037: LD_ADDR_VAR 0 10
72041: PUSH
72042: LD_INT 29
72044: PUSH
72045: LD_INT 91
72047: PUSH
72048: LD_INT 49
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: LIST
72055: ST_TO_ADDR
// if not result then
72056: LD_VAR 0 3
72060: NOT
72061: IFFALSE 72065
// exit ;
72063: GO 72525
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72065: LD_ADDR_VAR 0 5
72069: PUSH
72070: LD_INT 81
72072: PUSH
72073: LD_VAR 0 8
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PPUSH
72082: CALL_OW 69
72086: ST_TO_ADDR
// for i in result do
72087: LD_ADDR_VAR 0 4
72091: PUSH
72092: LD_VAR 0 3
72096: PUSH
72097: FOR_IN
72098: IFFALSE 72523
// begin tag := GetTag ( i ) + 1 ;
72100: LD_ADDR_VAR 0 9
72104: PUSH
72105: LD_VAR 0 4
72109: PPUSH
72110: CALL_OW 110
72114: PUSH
72115: LD_INT 1
72117: PLUS
72118: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
72119: LD_ADDR_VAR 0 7
72123: PUSH
72124: LD_VAR 0 4
72128: PPUSH
72129: CALL_OW 250
72133: PPUSH
72134: LD_VAR 0 4
72138: PPUSH
72139: CALL_OW 251
72143: PPUSH
72144: LD_INT 4
72146: PPUSH
72147: CALL 71720 0 3
72151: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
72152: LD_VAR 0 4
72156: PPUSH
72157: CALL_OW 247
72161: PUSH
72162: LD_INT 2
72164: EQUAL
72165: PUSH
72166: LD_VAR 0 7
72170: PUSH
72171: LD_INT 2
72173: GREATER
72174: AND
72175: PUSH
72176: LD_VAR 0 4
72180: PPUSH
72181: CALL_OW 264
72185: PUSH
72186: LD_VAR 0 10
72190: IN
72191: NOT
72192: AND
72193: IFFALSE 72232
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72195: LD_VAR 0 4
72199: PPUSH
72200: LD_VAR 0 7
72204: PUSH
72205: LD_INT 1
72207: ARRAY
72208: PUSH
72209: LD_INT 1
72211: ARRAY
72212: PPUSH
72213: LD_VAR 0 7
72217: PUSH
72218: LD_INT 1
72220: ARRAY
72221: PUSH
72222: LD_INT 2
72224: ARRAY
72225: PPUSH
72226: CALL_OW 116
72230: GO 72521
// if path > tag then
72232: LD_VAR 0 2
72236: PUSH
72237: LD_VAR 0 9
72241: GREATER
72242: IFFALSE 72450
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72244: LD_ADDR_VAR 0 6
72248: PUSH
72249: LD_VAR 0 5
72253: PPUSH
72254: LD_INT 91
72256: PUSH
72257: LD_VAR 0 4
72261: PUSH
72262: LD_INT 8
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: LIST
72269: PPUSH
72270: CALL_OW 72
72274: ST_TO_ADDR
// if nearEnemy then
72275: LD_VAR 0 6
72279: IFFALSE 72348
// begin if GetWeapon ( i ) = ru_time_lapser then
72281: LD_VAR 0 4
72285: PPUSH
72286: CALL_OW 264
72290: PUSH
72291: LD_INT 49
72293: EQUAL
72294: IFFALSE 72322
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72296: LD_VAR 0 4
72300: PPUSH
72301: LD_VAR 0 6
72305: PPUSH
72306: LD_VAR 0 4
72310: PPUSH
72311: CALL_OW 74
72315: PPUSH
72316: CALL_OW 112
72320: GO 72346
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72322: LD_VAR 0 4
72326: PPUSH
72327: LD_VAR 0 6
72331: PPUSH
72332: LD_VAR 0 4
72336: PPUSH
72337: CALL_OW 74
72341: PPUSH
72342: CALL 73596 0 2
// end else
72346: GO 72448
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72348: LD_VAR 0 4
72352: PPUSH
72353: LD_VAR 0 2
72357: PUSH
72358: LD_VAR 0 9
72362: ARRAY
72363: PUSH
72364: LD_INT 1
72366: ARRAY
72367: PPUSH
72368: LD_VAR 0 2
72372: PUSH
72373: LD_VAR 0 9
72377: ARRAY
72378: PUSH
72379: LD_INT 2
72381: ARRAY
72382: PPUSH
72383: CALL_OW 297
72387: PUSH
72388: LD_INT 6
72390: GREATER
72391: IFFALSE 72434
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72393: LD_VAR 0 4
72397: PPUSH
72398: LD_VAR 0 2
72402: PUSH
72403: LD_VAR 0 9
72407: ARRAY
72408: PUSH
72409: LD_INT 1
72411: ARRAY
72412: PPUSH
72413: LD_VAR 0 2
72417: PUSH
72418: LD_VAR 0 9
72422: ARRAY
72423: PUSH
72424: LD_INT 2
72426: ARRAY
72427: PPUSH
72428: CALL_OW 114
72432: GO 72448
// SetTag ( i , tag ) ;
72434: LD_VAR 0 4
72438: PPUSH
72439: LD_VAR 0 9
72443: PPUSH
72444: CALL_OW 109
// end else
72448: GO 72521
// if enemy then
72450: LD_VAR 0 5
72454: IFFALSE 72521
// begin if GetWeapon ( i ) = ru_time_lapser then
72456: LD_VAR 0 4
72460: PPUSH
72461: CALL_OW 264
72465: PUSH
72466: LD_INT 49
72468: EQUAL
72469: IFFALSE 72497
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72471: LD_VAR 0 4
72475: PPUSH
72476: LD_VAR 0 5
72480: PPUSH
72481: LD_VAR 0 4
72485: PPUSH
72486: CALL_OW 74
72490: PPUSH
72491: CALL_OW 112
72495: GO 72521
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72497: LD_VAR 0 4
72501: PPUSH
72502: LD_VAR 0 5
72506: PPUSH
72507: LD_VAR 0 4
72511: PPUSH
72512: CALL_OW 74
72516: PPUSH
72517: CALL 73596 0 2
// end ; end ;
72521: GO 72097
72523: POP
72524: POP
// end ;
72525: LD_VAR 0 3
72529: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72530: LD_INT 0
72532: PPUSH
72533: PPUSH
72534: PPUSH
// if not unit or IsInUnit ( unit ) then
72535: LD_VAR 0 1
72539: NOT
72540: PUSH
72541: LD_VAR 0 1
72545: PPUSH
72546: CALL_OW 310
72550: OR
72551: IFFALSE 72555
// exit ;
72553: GO 72646
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72555: LD_ADDR_VAR 0 4
72559: PUSH
72560: LD_VAR 0 1
72564: PPUSH
72565: CALL_OW 250
72569: PPUSH
72570: LD_VAR 0 2
72574: PPUSH
72575: LD_INT 1
72577: PPUSH
72578: CALL_OW 272
72582: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72583: LD_ADDR_VAR 0 5
72587: PUSH
72588: LD_VAR 0 1
72592: PPUSH
72593: CALL_OW 251
72597: PPUSH
72598: LD_VAR 0 2
72602: PPUSH
72603: LD_INT 1
72605: PPUSH
72606: CALL_OW 273
72610: ST_TO_ADDR
// if ValidHex ( x , y ) then
72611: LD_VAR 0 4
72615: PPUSH
72616: LD_VAR 0 5
72620: PPUSH
72621: CALL_OW 488
72625: IFFALSE 72646
// ComTurnXY ( unit , x , y ) ;
72627: LD_VAR 0 1
72631: PPUSH
72632: LD_VAR 0 4
72636: PPUSH
72637: LD_VAR 0 5
72641: PPUSH
72642: CALL_OW 118
// end ;
72646: LD_VAR 0 3
72650: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72651: LD_INT 0
72653: PPUSH
72654: PPUSH
// result := false ;
72655: LD_ADDR_VAR 0 3
72659: PUSH
72660: LD_INT 0
72662: ST_TO_ADDR
// if not units then
72663: LD_VAR 0 2
72667: NOT
72668: IFFALSE 72672
// exit ;
72670: GO 72717
// for i in units do
72672: LD_ADDR_VAR 0 4
72676: PUSH
72677: LD_VAR 0 2
72681: PUSH
72682: FOR_IN
72683: IFFALSE 72715
// if See ( side , i ) then
72685: LD_VAR 0 1
72689: PPUSH
72690: LD_VAR 0 4
72694: PPUSH
72695: CALL_OW 292
72699: IFFALSE 72713
// begin result := true ;
72701: LD_ADDR_VAR 0 3
72705: PUSH
72706: LD_INT 1
72708: ST_TO_ADDR
// exit ;
72709: POP
72710: POP
72711: GO 72717
// end ;
72713: GO 72682
72715: POP
72716: POP
// end ;
72717: LD_VAR 0 3
72721: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72722: LD_INT 0
72724: PPUSH
72725: PPUSH
72726: PPUSH
72727: PPUSH
// if not unit or not points then
72728: LD_VAR 0 1
72732: NOT
72733: PUSH
72734: LD_VAR 0 2
72738: NOT
72739: OR
72740: IFFALSE 72744
// exit ;
72742: GO 72834
// dist := 99999 ;
72744: LD_ADDR_VAR 0 5
72748: PUSH
72749: LD_INT 99999
72751: ST_TO_ADDR
// for i in points do
72752: LD_ADDR_VAR 0 4
72756: PUSH
72757: LD_VAR 0 2
72761: PUSH
72762: FOR_IN
72763: IFFALSE 72832
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72765: LD_ADDR_VAR 0 6
72769: PUSH
72770: LD_VAR 0 1
72774: PPUSH
72775: LD_VAR 0 4
72779: PUSH
72780: LD_INT 1
72782: ARRAY
72783: PPUSH
72784: LD_VAR 0 4
72788: PUSH
72789: LD_INT 2
72791: ARRAY
72792: PPUSH
72793: CALL_OW 297
72797: ST_TO_ADDR
// if tmpDist < dist then
72798: LD_VAR 0 6
72802: PUSH
72803: LD_VAR 0 5
72807: LESS
72808: IFFALSE 72830
// begin result := i ;
72810: LD_ADDR_VAR 0 3
72814: PUSH
72815: LD_VAR 0 4
72819: ST_TO_ADDR
// dist := tmpDist ;
72820: LD_ADDR_VAR 0 5
72824: PUSH
72825: LD_VAR 0 6
72829: ST_TO_ADDR
// end ; end ;
72830: GO 72762
72832: POP
72833: POP
// end ;
72834: LD_VAR 0 3
72838: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72839: LD_INT 0
72841: PPUSH
// uc_side := side ;
72842: LD_ADDR_OWVAR 20
72846: PUSH
72847: LD_VAR 0 1
72851: ST_TO_ADDR
// uc_nation := 3 ;
72852: LD_ADDR_OWVAR 21
72856: PUSH
72857: LD_INT 3
72859: ST_TO_ADDR
// vc_chassis := 25 ;
72860: LD_ADDR_OWVAR 37
72864: PUSH
72865: LD_INT 25
72867: ST_TO_ADDR
// vc_engine := engine_siberite ;
72868: LD_ADDR_OWVAR 39
72872: PUSH
72873: LD_INT 3
72875: ST_TO_ADDR
// vc_control := control_computer ;
72876: LD_ADDR_OWVAR 38
72880: PUSH
72881: LD_INT 3
72883: ST_TO_ADDR
// vc_weapon := 59 ;
72884: LD_ADDR_OWVAR 40
72888: PUSH
72889: LD_INT 59
72891: ST_TO_ADDR
// result := CreateVehicle ;
72892: LD_ADDR_VAR 0 5
72896: PUSH
72897: CALL_OW 45
72901: ST_TO_ADDR
// SetDir ( result , d ) ;
72902: LD_VAR 0 5
72906: PPUSH
72907: LD_VAR 0 4
72911: PPUSH
72912: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72916: LD_VAR 0 5
72920: PPUSH
72921: LD_VAR 0 2
72925: PPUSH
72926: LD_VAR 0 3
72930: PPUSH
72931: LD_INT 0
72933: PPUSH
72934: CALL_OW 48
// end ;
72938: LD_VAR 0 5
72942: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72943: LD_INT 0
72945: PPUSH
72946: PPUSH
72947: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72948: LD_ADDR_VAR 0 2
72952: PUSH
72953: LD_INT 0
72955: PUSH
72956: LD_INT 0
72958: PUSH
72959: LD_INT 0
72961: PUSH
72962: LD_INT 0
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: LIST
72969: LIST
72970: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72971: LD_VAR 0 1
72975: NOT
72976: PUSH
72977: LD_VAR 0 1
72981: PPUSH
72982: CALL_OW 264
72986: PUSH
72987: LD_INT 12
72989: PUSH
72990: LD_INT 51
72992: PUSH
72993: LD_INT 32
72995: PUSH
72996: LD_INT 89
72998: PUSH
72999: EMPTY
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: IN
73005: NOT
73006: OR
73007: IFFALSE 73011
// exit ;
73009: GO 73109
// for i := 1 to 3 do
73011: LD_ADDR_VAR 0 3
73015: PUSH
73016: DOUBLE
73017: LD_INT 1
73019: DEC
73020: ST_TO_ADDR
73021: LD_INT 3
73023: PUSH
73024: FOR_TO
73025: IFFALSE 73107
// begin tmp := GetCargo ( cargo , i ) ;
73027: LD_ADDR_VAR 0 4
73031: PUSH
73032: LD_VAR 0 1
73036: PPUSH
73037: LD_VAR 0 3
73041: PPUSH
73042: CALL_OW 289
73046: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73047: LD_ADDR_VAR 0 2
73051: PUSH
73052: LD_VAR 0 2
73056: PPUSH
73057: LD_VAR 0 3
73061: PPUSH
73062: LD_VAR 0 4
73066: PPUSH
73067: CALL_OW 1
73071: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73072: LD_ADDR_VAR 0 2
73076: PUSH
73077: LD_VAR 0 2
73081: PPUSH
73082: LD_INT 4
73084: PPUSH
73085: LD_VAR 0 2
73089: PUSH
73090: LD_INT 4
73092: ARRAY
73093: PUSH
73094: LD_VAR 0 4
73098: PLUS
73099: PPUSH
73100: CALL_OW 1
73104: ST_TO_ADDR
// end ;
73105: GO 73024
73107: POP
73108: POP
// end ;
73109: LD_VAR 0 2
73113: RET
// export function Length ( array ) ; begin
73114: LD_INT 0
73116: PPUSH
// result := array + 0 ;
73117: LD_ADDR_VAR 0 2
73121: PUSH
73122: LD_VAR 0 1
73126: PUSH
73127: LD_INT 0
73129: PLUS
73130: ST_TO_ADDR
// end ;
73131: LD_VAR 0 2
73135: RET
// export function PrepareArray ( array ) ; begin
73136: LD_INT 0
73138: PPUSH
// result := array diff 0 ;
73139: LD_ADDR_VAR 0 2
73143: PUSH
73144: LD_VAR 0 1
73148: PUSH
73149: LD_INT 0
73151: DIFF
73152: ST_TO_ADDR
// if not result [ 1 ] then
73153: LD_VAR 0 2
73157: PUSH
73158: LD_INT 1
73160: ARRAY
73161: NOT
73162: IFFALSE 73182
// result := Delete ( result , 1 ) ;
73164: LD_ADDR_VAR 0 2
73168: PUSH
73169: LD_VAR 0 2
73173: PPUSH
73174: LD_INT 1
73176: PPUSH
73177: CALL_OW 3
73181: ST_TO_ADDR
// end ;
73182: LD_VAR 0 2
73186: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73187: LD_INT 0
73189: PPUSH
73190: PPUSH
73191: PPUSH
73192: PPUSH
// sibRocketRange := 25 ;
73193: LD_ADDR_VAR 0 6
73197: PUSH
73198: LD_INT 25
73200: ST_TO_ADDR
// result := false ;
73201: LD_ADDR_VAR 0 4
73205: PUSH
73206: LD_INT 0
73208: ST_TO_ADDR
// for i := 0 to 5 do
73209: LD_ADDR_VAR 0 5
73213: PUSH
73214: DOUBLE
73215: LD_INT 0
73217: DEC
73218: ST_TO_ADDR
73219: LD_INT 5
73221: PUSH
73222: FOR_TO
73223: IFFALSE 73290
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73225: LD_VAR 0 1
73229: PPUSH
73230: LD_VAR 0 5
73234: PPUSH
73235: LD_VAR 0 6
73239: PPUSH
73240: CALL_OW 272
73244: PPUSH
73245: LD_VAR 0 2
73249: PPUSH
73250: LD_VAR 0 5
73254: PPUSH
73255: LD_VAR 0 6
73259: PPUSH
73260: CALL_OW 273
73264: PPUSH
73265: LD_VAR 0 3
73269: PPUSH
73270: CALL_OW 309
73274: IFFALSE 73288
// begin result := true ;
73276: LD_ADDR_VAR 0 4
73280: PUSH
73281: LD_INT 1
73283: ST_TO_ADDR
// exit ;
73284: POP
73285: POP
73286: GO 73292
// end ;
73288: GO 73222
73290: POP
73291: POP
// end ;
73292: LD_VAR 0 4
73296: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
73297: LD_INT 0
73299: PPUSH
73300: PPUSH
73301: PPUSH
// if btype = b_depot then
73302: LD_VAR 0 2
73306: PUSH
73307: LD_INT 0
73309: EQUAL
73310: IFFALSE 73322
// begin result := true ;
73312: LD_ADDR_VAR 0 3
73316: PUSH
73317: LD_INT 1
73319: ST_TO_ADDR
// exit ;
73320: GO 73438
// end ; pom := GetBase ( depot ) ;
73322: LD_ADDR_VAR 0 4
73326: PUSH
73327: LD_VAR 0 1
73331: PPUSH
73332: CALL_OW 274
73336: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
73337: LD_ADDR_VAR 0 5
73341: PUSH
73342: LD_VAR 0 2
73346: PPUSH
73347: LD_VAR 0 1
73351: PPUSH
73352: CALL_OW 248
73356: PPUSH
73357: CALL_OW 450
73361: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
73362: LD_ADDR_VAR 0 3
73366: PUSH
73367: LD_VAR 0 4
73371: PPUSH
73372: LD_INT 1
73374: PPUSH
73375: CALL_OW 275
73379: PUSH
73380: LD_VAR 0 5
73384: PUSH
73385: LD_INT 1
73387: ARRAY
73388: GREATEREQUAL
73389: PUSH
73390: LD_VAR 0 4
73394: PPUSH
73395: LD_INT 2
73397: PPUSH
73398: CALL_OW 275
73402: PUSH
73403: LD_VAR 0 5
73407: PUSH
73408: LD_INT 2
73410: ARRAY
73411: GREATEREQUAL
73412: AND
73413: PUSH
73414: LD_VAR 0 4
73418: PPUSH
73419: LD_INT 3
73421: PPUSH
73422: CALL_OW 275
73426: PUSH
73427: LD_VAR 0 5
73431: PUSH
73432: LD_INT 3
73434: ARRAY
73435: GREATEREQUAL
73436: AND
73437: ST_TO_ADDR
// end ;
73438: LD_VAR 0 3
73442: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73443: LD_INT 0
73445: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73446: LD_VAR 0 1
73450: PPUSH
73451: LD_VAR 0 2
73455: PPUSH
73456: LD_INT 0
73458: PPUSH
73459: LD_INT 0
73461: PPUSH
73462: LD_INT 1
73464: PPUSH
73465: LD_INT 0
73467: PPUSH
73468: CALL_OW 587
// end ;
73472: LD_VAR 0 3
73476: RET
// export function CenterOnNow ( unit ) ; begin
73477: LD_INT 0
73479: PPUSH
// result := IsInUnit ( unit ) ;
73480: LD_ADDR_VAR 0 2
73484: PUSH
73485: LD_VAR 0 1
73489: PPUSH
73490: CALL_OW 310
73494: ST_TO_ADDR
// if not result then
73495: LD_VAR 0 2
73499: NOT
73500: IFFALSE 73512
// result := unit ;
73502: LD_ADDR_VAR 0 2
73506: PUSH
73507: LD_VAR 0 1
73511: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73512: LD_VAR 0 1
73516: PPUSH
73517: CALL_OW 87
// end ;
73521: LD_VAR 0 2
73525: RET
// export function ComMoveHex ( unit , hex ) ; begin
73526: LD_INT 0
73528: PPUSH
// if not hex then
73529: LD_VAR 0 2
73533: NOT
73534: IFFALSE 73538
// exit ;
73536: GO 73591
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73538: LD_VAR 0 2
73542: PUSH
73543: LD_INT 1
73545: ARRAY
73546: PPUSH
73547: LD_VAR 0 2
73551: PUSH
73552: LD_INT 2
73554: ARRAY
73555: PPUSH
73556: CALL_OW 428
73560: IFFALSE 73564
// exit ;
73562: GO 73591
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73564: LD_VAR 0 1
73568: PPUSH
73569: LD_VAR 0 2
73573: PUSH
73574: LD_INT 1
73576: ARRAY
73577: PPUSH
73578: LD_VAR 0 2
73582: PUSH
73583: LD_INT 2
73585: ARRAY
73586: PPUSH
73587: CALL_OW 111
// end ;
73591: LD_VAR 0 3
73595: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73596: LD_INT 0
73598: PPUSH
73599: PPUSH
73600: PPUSH
// if not unit or not enemy then
73601: LD_VAR 0 1
73605: NOT
73606: PUSH
73607: LD_VAR 0 2
73611: NOT
73612: OR
73613: IFFALSE 73617
// exit ;
73615: GO 73741
// x := GetX ( enemy ) ;
73617: LD_ADDR_VAR 0 4
73621: PUSH
73622: LD_VAR 0 2
73626: PPUSH
73627: CALL_OW 250
73631: ST_TO_ADDR
// y := GetY ( enemy ) ;
73632: LD_ADDR_VAR 0 5
73636: PUSH
73637: LD_VAR 0 2
73641: PPUSH
73642: CALL_OW 251
73646: ST_TO_ADDR
// if ValidHex ( x , y ) then
73647: LD_VAR 0 4
73651: PPUSH
73652: LD_VAR 0 5
73656: PPUSH
73657: CALL_OW 488
73661: IFFALSE 73741
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73663: LD_VAR 0 2
73667: PPUSH
73668: CALL_OW 247
73672: PUSH
73673: LD_INT 3
73675: PUSH
73676: LD_INT 2
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: IN
73683: PUSH
73684: LD_VAR 0 1
73688: PPUSH
73689: CALL_OW 255
73693: PPUSH
73694: LD_VAR 0 2
73698: PPUSH
73699: CALL_OW 292
73703: OR
73704: IFFALSE 73722
// ComAttackUnit ( unit , enemy ) else
73706: LD_VAR 0 1
73710: PPUSH
73711: LD_VAR 0 2
73715: PPUSH
73716: CALL_OW 115
73720: GO 73741
// ComAgressiveMove ( unit , x , y ) ;
73722: LD_VAR 0 1
73726: PPUSH
73727: LD_VAR 0 4
73731: PPUSH
73732: LD_VAR 0 5
73736: PPUSH
73737: CALL_OW 114
// end ;
73741: LD_VAR 0 3
73745: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73746: LD_INT 0
73748: PPUSH
73749: PPUSH
73750: PPUSH
// list := AreaToList ( area , 0 ) ;
73751: LD_ADDR_VAR 0 5
73755: PUSH
73756: LD_VAR 0 1
73760: PPUSH
73761: LD_INT 0
73763: PPUSH
73764: CALL_OW 517
73768: ST_TO_ADDR
// if not list then
73769: LD_VAR 0 5
73773: NOT
73774: IFFALSE 73778
// exit ;
73776: GO 73908
// if all then
73778: LD_VAR 0 2
73782: IFFALSE 73870
// begin for i := 1 to list [ 1 ] do
73784: LD_ADDR_VAR 0 4
73788: PUSH
73789: DOUBLE
73790: LD_INT 1
73792: DEC
73793: ST_TO_ADDR
73794: LD_VAR 0 5
73798: PUSH
73799: LD_INT 1
73801: ARRAY
73802: PUSH
73803: FOR_TO
73804: IFFALSE 73866
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73806: LD_ADDR_VAR 0 3
73810: PUSH
73811: LD_VAR 0 3
73815: PPUSH
73816: LD_VAR 0 3
73820: PUSH
73821: LD_INT 1
73823: PLUS
73824: PPUSH
73825: LD_VAR 0 5
73829: PUSH
73830: LD_INT 1
73832: ARRAY
73833: PUSH
73834: LD_VAR 0 4
73838: ARRAY
73839: PUSH
73840: LD_VAR 0 5
73844: PUSH
73845: LD_INT 2
73847: ARRAY
73848: PUSH
73849: LD_VAR 0 4
73853: ARRAY
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: PPUSH
73859: CALL_OW 1
73863: ST_TO_ADDR
73864: GO 73803
73866: POP
73867: POP
// exit ;
73868: GO 73908
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73870: LD_ADDR_VAR 0 3
73874: PUSH
73875: LD_VAR 0 5
73879: PUSH
73880: LD_INT 1
73882: ARRAY
73883: PUSH
73884: LD_INT 1
73886: ARRAY
73887: PUSH
73888: LD_VAR 0 5
73892: PUSH
73893: LD_INT 2
73895: ARRAY
73896: PUSH
73897: LD_INT 1
73899: ARRAY
73900: PUSH
73901: EMPTY
73902: LIST
73903: LIST
73904: PUSH
73905: EMPTY
73906: LIST
73907: ST_TO_ADDR
// end ;
73908: LD_VAR 0 3
73912: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73913: LD_INT 0
73915: PPUSH
73916: PPUSH
// list := AreaToList ( area , 0 ) ;
73917: LD_ADDR_VAR 0 4
73921: PUSH
73922: LD_VAR 0 1
73926: PPUSH
73927: LD_INT 0
73929: PPUSH
73930: CALL_OW 517
73934: ST_TO_ADDR
// if not list then
73935: LD_VAR 0 4
73939: NOT
73940: IFFALSE 73944
// exit ;
73942: GO 73985
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73944: LD_ADDR_VAR 0 3
73948: PUSH
73949: LD_VAR 0 4
73953: PUSH
73954: LD_INT 1
73956: ARRAY
73957: PUSH
73958: LD_INT 1
73960: ARRAY
73961: PUSH
73962: LD_VAR 0 4
73966: PUSH
73967: LD_INT 2
73969: ARRAY
73970: PUSH
73971: LD_INT 1
73973: ARRAY
73974: PUSH
73975: LD_VAR 0 2
73979: PUSH
73980: EMPTY
73981: LIST
73982: LIST
73983: LIST
73984: ST_TO_ADDR
// end ;
73985: LD_VAR 0 3
73989: RET
// export function First ( array ) ; begin
73990: LD_INT 0
73992: PPUSH
// if not array then
73993: LD_VAR 0 1
73997: NOT
73998: IFFALSE 74002
// exit ;
74000: GO 74016
// result := array [ 1 ] ;
74002: LD_ADDR_VAR 0 2
74006: PUSH
74007: LD_VAR 0 1
74011: PUSH
74012: LD_INT 1
74014: ARRAY
74015: ST_TO_ADDR
// end ;
74016: LD_VAR 0 2
74020: RET
// export function Last ( array ) ; begin
74021: LD_INT 0
74023: PPUSH
// if not array then
74024: LD_VAR 0 1
74028: NOT
74029: IFFALSE 74033
// exit ;
74031: GO 74049
// result := array [ array ] ;
74033: LD_ADDR_VAR 0 2
74037: PUSH
74038: LD_VAR 0 1
74042: PUSH
74043: LD_VAR 0 1
74047: ARRAY
74048: ST_TO_ADDR
// end ;
74049: LD_VAR 0 2
74053: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
74054: LD_INT 0
74056: PPUSH
74057: PPUSH
// result := [ ] ;
74058: LD_ADDR_VAR 0 5
74062: PUSH
74063: EMPTY
74064: ST_TO_ADDR
// if not array then
74065: LD_VAR 0 1
74069: NOT
74070: IFFALSE 74074
// exit ;
74072: GO 74186
// for i := 1 to array do
74074: LD_ADDR_VAR 0 6
74078: PUSH
74079: DOUBLE
74080: LD_INT 1
74082: DEC
74083: ST_TO_ADDR
74084: LD_VAR 0 1
74088: PUSH
74089: FOR_TO
74090: IFFALSE 74184
// if array [ i ] [ index ] = value then
74092: LD_VAR 0 1
74096: PUSH
74097: LD_VAR 0 6
74101: ARRAY
74102: PUSH
74103: LD_VAR 0 2
74107: ARRAY
74108: PUSH
74109: LD_VAR 0 3
74113: EQUAL
74114: IFFALSE 74182
// begin if indexColumn then
74116: LD_VAR 0 4
74120: IFFALSE 74156
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74122: LD_ADDR_VAR 0 5
74126: PUSH
74127: LD_VAR 0 5
74131: PPUSH
74132: LD_VAR 0 1
74136: PUSH
74137: LD_VAR 0 6
74141: ARRAY
74142: PUSH
74143: LD_VAR 0 4
74147: ARRAY
74148: PPUSH
74149: CALL 69374 0 2
74153: ST_TO_ADDR
74154: GO 74182
// result := Join ( result , array [ i ] ) ;
74156: LD_ADDR_VAR 0 5
74160: PUSH
74161: LD_VAR 0 5
74165: PPUSH
74166: LD_VAR 0 1
74170: PUSH
74171: LD_VAR 0 6
74175: ARRAY
74176: PPUSH
74177: CALL 69374 0 2
74181: ST_TO_ADDR
// end ;
74182: GO 74089
74184: POP
74185: POP
// end ;
74186: LD_VAR 0 5
74190: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74191: LD_INT 0
74193: PPUSH
// if not vehicles or not parkingPoint then
74194: LD_VAR 0 1
74198: NOT
74199: PUSH
74200: LD_VAR 0 2
74204: NOT
74205: OR
74206: IFFALSE 74210
// exit ;
74208: GO 74308
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74210: LD_ADDR_VAR 0 1
74214: PUSH
74215: LD_VAR 0 1
74219: PPUSH
74220: LD_INT 50
74222: PUSH
74223: EMPTY
74224: LIST
74225: PUSH
74226: LD_INT 3
74228: PUSH
74229: LD_INT 92
74231: PUSH
74232: LD_VAR 0 2
74236: PUSH
74237: LD_INT 1
74239: ARRAY
74240: PUSH
74241: LD_VAR 0 2
74245: PUSH
74246: LD_INT 2
74248: ARRAY
74249: PUSH
74250: LD_INT 8
74252: PUSH
74253: EMPTY
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: PUSH
74259: EMPTY
74260: LIST
74261: LIST
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: PPUSH
74267: CALL_OW 72
74271: ST_TO_ADDR
// if not vehicles then
74272: LD_VAR 0 1
74276: NOT
74277: IFFALSE 74281
// exit ;
74279: GO 74308
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
74281: LD_VAR 0 1
74285: PPUSH
74286: LD_VAR 0 2
74290: PUSH
74291: LD_INT 1
74293: ARRAY
74294: PPUSH
74295: LD_VAR 0 2
74299: PUSH
74300: LD_INT 2
74302: ARRAY
74303: PPUSH
74304: CALL_OW 111
// end ;
74308: LD_VAR 0 3
74312: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
74313: LD_INT 0
74315: PPUSH
74316: PPUSH
74317: PPUSH
// if not side or not area then
74318: LD_VAR 0 1
74322: NOT
74323: PUSH
74324: LD_VAR 0 2
74328: NOT
74329: OR
74330: IFFALSE 74334
// exit ;
74332: GO 74453
// tmp := AreaToList ( area , 0 ) ;
74334: LD_ADDR_VAR 0 5
74338: PUSH
74339: LD_VAR 0 2
74343: PPUSH
74344: LD_INT 0
74346: PPUSH
74347: CALL_OW 517
74351: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
74352: LD_ADDR_VAR 0 4
74356: PUSH
74357: DOUBLE
74358: LD_INT 1
74360: DEC
74361: ST_TO_ADDR
74362: LD_VAR 0 5
74366: PUSH
74367: LD_INT 1
74369: ARRAY
74370: PUSH
74371: FOR_TO
74372: IFFALSE 74451
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
74374: LD_VAR 0 5
74378: PUSH
74379: LD_INT 1
74381: ARRAY
74382: PUSH
74383: LD_VAR 0 4
74387: ARRAY
74388: PPUSH
74389: LD_VAR 0 5
74393: PUSH
74394: LD_INT 2
74396: ARRAY
74397: PUSH
74398: LD_VAR 0 4
74402: ARRAY
74403: PPUSH
74404: CALL_OW 351
74408: IFFALSE 74449
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
74410: LD_VAR 0 5
74414: PUSH
74415: LD_INT 1
74417: ARRAY
74418: PUSH
74419: LD_VAR 0 4
74423: ARRAY
74424: PPUSH
74425: LD_VAR 0 5
74429: PUSH
74430: LD_INT 2
74432: ARRAY
74433: PUSH
74434: LD_VAR 0 4
74438: ARRAY
74439: PPUSH
74440: LD_VAR 0 1
74444: PPUSH
74445: CALL_OW 244
// end ;
74449: GO 74371
74451: POP
74452: POP
// end ;
74453: LD_VAR 0 3
74457: RET
