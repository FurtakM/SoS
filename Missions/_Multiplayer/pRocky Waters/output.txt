// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2972 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3348 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 10 10$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 21000
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 200 , 260 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 200
 823: PUSH
 824: LD_INT 260
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 51
 852: PUSH
 853: LD_INT 52
 855: PUSH
 856: LD_INT 53
 858: PUSH
 859: LD_INT 54
 861: PUSH
 862: LD_INT 55
 864: PUSH
 865: LD_INT 56
 867: PUSH
 868: LD_INT 57
 870: PUSH
 871: LD_INT 58
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 70
 891: PUSH
 892: LD_INT 71
 894: PUSH
 895: LD_INT 72
 897: PUSH
 898: LD_INT 73
 900: PUSH
 901: LD_INT 68
 903: PUSH
 904: LD_INT 69
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 49
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 33
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 35
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 32
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 33
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 35
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 34
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 31
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 60
1364: PUSH
1365: LD_INT 61
1367: PUSH
1368: LD_INT 62
1370: PUSH
1371: LD_INT 63
1373: PUSH
1374: LD_INT 64
1376: PUSH
1377: LD_INT 65
1379: PUSH
1380: LD_INT 66
1382: PUSH
1383: LD_INT 67
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 1
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 60298 0 2
1411: PUSH
1412: LD_INT 2
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 60298 0 2
1422: PUSH
1423: LD_INT 3
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 60298 0 2
1433: PUSH
1434: LD_INT 4
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 60298 0 2
1444: PUSH
1445: LD_INT 5
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL 60298 0 2
1455: PUSH
1456: LD_INT 6
1458: PPUSH
1459: LD_INT 5
1461: PPUSH
1462: CALL 60298 0 2
1466: PUSH
1467: LD_INT 7
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL 60298 0 2
1477: PUSH
1478: LD_INT 8
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL 60298 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 19647 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 9
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 60131 0 2
1667: PUSH
1668: LD_INT 10
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 60131 0 2
1680: PUSH
1681: LD_INT 11
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 60131 0 2
1693: PUSH
1694: LD_INT 12
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 60131 0 2
1706: PUSH
1707: LD_INT 13
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 60131 0 2
1719: PUSH
1720: LD_INT 14
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 60131 0 2
1732: PUSH
1733: LD_INT 15
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 60131 0 2
1745: PUSH
1746: LD_INT 16
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 60131 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 17
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 60131 0 2
1810: PUSH
1811: LD_INT 18
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 60131 0 2
1823: PUSH
1824: LD_INT 19
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 60131 0 2
1836: PUSH
1837: LD_INT 20
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 60131 0 2
1849: PUSH
1850: LD_INT 21
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 60131 0 2
1862: PUSH
1863: LD_INT 22
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 60131 0 2
1875: PUSH
1876: LD_INT 23
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 60131 0 2
1888: PUSH
1889: LD_INT 24
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 60131 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 25
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 60298 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 26
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 60298 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 41
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 60298 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 27
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: CALL 60298 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 28
2017: PPUSH
2018: LD_INT 4
2020: PPUSH
2021: CALL 60298 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 42
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL 60298 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 29
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 60298 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 30
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL 60298 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 43
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 60298 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 31
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 60298 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 32
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL 60298 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 44
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 60298 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 33
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL 60298 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 34
2167: PPUSH
2168: LD_INT 2
2170: PPUSH
2171: CALL 60298 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 45
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: CALL 60298 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 35
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL 60298 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 36
2217: PPUSH
2218: LD_INT 4
2220: PPUSH
2221: CALL 60298 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 46
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 60298 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 37
2252: PPUSH
2253: LD_INT 3
2255: PPUSH
2256: CALL 60298 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 38
2267: PPUSH
2268: LD_INT 4
2270: PPUSH
2271: CALL 60298 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 47
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: CALL 60298 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 39
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL 60298 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 40
2317: PPUSH
2318: LD_INT 3
2320: PPUSH
2321: CALL 60298 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 48
2332: PPUSH
2333: LD_INT 4
2335: PPUSH
2336: CALL 60298 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2885
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 70
2569: PUSH
2570: LD_INT 71
2572: PUSH
2573: LD_INT 72
2575: PUSH
2576: LD_INT 73
2578: PUSH
2579: LD_INT 68
2581: PUSH
2582: LD_INT 69
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 51
2600: PUSH
2601: LD_INT 52
2603: PUSH
2604: LD_INT 53
2606: PUSH
2607: LD_INT 54
2609: PUSH
2610: LD_INT 55
2612: PUSH
2613: LD_INT 56
2615: PUSH
2616: LD_INT 57
2618: PUSH
2619: LD_INT 58
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 56952 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// if GetResourceArea ( center3 , mat_cans ) < 15 then
2745: LD_INT 74
2747: PPUSH
2748: LD_INT 1
2750: PPUSH
2751: CALL_OW 287
2755: PUSH
2756: LD_INT 15
2758: LESS
2759: IFFALSE 2791
// begin CreateCratesArea ( x , center3 , true ) ;
2761: LD_VAR 0 2
2765: PPUSH
2766: LD_INT 74
2768: PPUSH
2769: LD_INT 1
2771: PPUSH
2772: CALL_OW 55
// CreateCratesArea ( x , center3 , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_INT 74
2783: PPUSH
2784: LD_INT 1
2786: PPUSH
2787: CALL_OW 55
// end ; for i in areas do
2791: LD_ADDR_VAR 0 1
2795: PUSH
2796: LD_VAR 0 4
2800: PUSH
2801: FOR_IN
2802: IFFALSE 2841
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2804: LD_VAR 0 1
2808: PPUSH
2809: LD_INT 1
2811: PPUSH
2812: CALL_OW 287
2816: PUSH
2817: LD_INT 20
2819: LESS
2820: IFFALSE 2839
// begin CreateCratesArea ( x , i , true ) ;
2822: LD_VAR 0 2
2826: PPUSH
2827: LD_VAR 0 1
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: CALL_OW 55
// end ; end ;
2839: GO 2801
2841: POP
2842: POP
// time := time + delayTime ;
2843: LD_ADDR_VAR 0 5
2847: PUSH
2848: LD_VAR 0 5
2852: PUSH
2853: LD_VAR 0 7
2857: PLUS
2858: ST_TO_ADDR
// if time > maxTime then
2859: LD_VAR 0 5
2863: PUSH
2864: LD_VAR 0 8
2868: GREATER
2869: IFFALSE 2881
// time := normalTime ;
2871: LD_ADDR_VAR 0 5
2875: PUSH
2876: LD_VAR 0 6
2880: ST_TO_ADDR
// until false ;
2881: LD_INT 0
2883: IFFALSE 2703
// end ; end_of_file
2885: PPOPN 8
2887: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2888: LD_VAR 0 1
2892: PPUSH
2893: CALL 12021 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2897: LD_VAR 0 1
2901: PPUSH
2902: CALL 8120 0 1
// end ;
2906: PPOPN 1
2908: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL 12038 0 1
// end ;
2918: PPOPN 1
2920: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2921: LD_VAR 0 1
2925: PPUSH
2926: CALL 8791 0 1
2930: PPOPN 1
2932: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2933: LD_VAR 0 1
2937: PPUSH
2938: LD_VAR 0 2
2942: PPUSH
2943: CALL 12079 0 2
2947: PPOPN 2
2949: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2950: LD_VAR 0 1
2954: PPUSH
2955: LD_VAR 0 2
2959: PPUSH
2960: LD_VAR 0 3
2964: PPUSH
2965: CALL 8844 0 3
2969: PPOPN 3
2971: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2972: LD_INT 0
2974: PPUSH
2975: PPUSH
// disable ( mpActive ) ;
2976: LD_INT 100
2978: DISABLE_MARKED
// disable ( mpWin ) ;
2979: LD_INT 101
2981: DISABLE_MARKED
// disable ( mpLose ) ;
2982: LD_INT 102
2984: DISABLE_MARKED
// mpGameType := 0 ;
2985: LD_ADDR_EXP 1
2989: PUSH
2990: LD_INT 0
2992: ST_TO_ADDR
// mpGameSettings := [ ] ;
2993: LD_ADDR_EXP 4
2997: PUSH
2998: EMPTY
2999: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
3000: LD_ADDR_EXP 2
3004: PUSH
3005: EMPTY
3006: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
3007: LD_ADDR_EXP 3
3011: PUSH
3012: EMPTY
3013: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
3014: LD_ADDR_EXP 27
3018: PUSH
3019: LD_INT 2
3021: PUSH
3022: LD_INT 2
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3029: LD_ADDR_EXP 10
3033: PUSH
3034: EMPTY
3035: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3036: LD_ADDR_EXP 11
3040: PUSH
3041: EMPTY
3042: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
3043: LD_ADDR_EXP 39
3047: PUSH
3048: EMPTY
3049: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
3050: LD_ADDR_EXP 40
3054: PUSH
3055: EMPTY
3056: ST_TO_ADDR
// mpDepots := [ ] ;
3057: LD_ADDR_EXP 12
3061: PUSH
3062: EMPTY
3063: ST_TO_ADDR
// mpBuildings := [ ] ;
3064: LD_ADDR_EXP 15
3068: PUSH
3069: EMPTY
3070: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3071: LD_ADDR_EXP 16
3075: PUSH
3076: EMPTY
3077: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3078: LD_ADDR_EXP 17
3082: PUSH
3083: EMPTY
3084: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3085: LD_ADDR_EXP 18
3089: PUSH
3090: EMPTY
3091: ST_TO_ADDR
// mpStartingResources := [ ] ;
3092: LD_ADDR_EXP 13
3096: PUSH
3097: EMPTY
3098: ST_TO_ADDR
// mpStartPos := [ ] ;
3099: LD_ADDR_EXP 19
3103: PUSH
3104: EMPTY
3105: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3106: LD_ADDR_EXP 20
3110: PUSH
3111: LD_INT 1
3113: NEG
3114: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3115: LD_ADDR_EXP 21
3119: PUSH
3120: EMPTY
3121: ST_TO_ADDR
// mpApemans := [ ] ;
3122: LD_ADDR_EXP 28
3126: PUSH
3127: EMPTY
3128: ST_TO_ADDR
// mpApemansArea := [ ] ;
3129: LD_ADDR_EXP 29
3133: PUSH
3134: EMPTY
3135: ST_TO_ADDR
// mpRespawn := [ ] ;
3136: LD_ADDR_EXP 31
3140: PUSH
3141: EMPTY
3142: ST_TO_ADDR
// mpKingArea := 0 ;
3143: LD_ADDR_EXP 32
3147: PUSH
3148: LD_INT 0
3150: ST_TO_ADDR
// mpPoints := [ ] ;
3151: LD_ADDR_EXP 33
3155: PUSH
3156: EMPTY
3157: ST_TO_ADDR
// mpVehicles := 0 ;
3158: LD_ADDR_EXP 34
3162: PUSH
3163: LD_INT 0
3165: ST_TO_ADDR
// mpShipments := 0 ;
3166: LD_ADDR_EXP 25
3170: PUSH
3171: LD_INT 0
3173: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3174: LD_ADDR_EXP 38
3178: PUSH
3179: EMPTY
3180: PUSH
3181: EMPTY
3182: PUSH
3183: EMPTY
3184: PUSH
3185: EMPTY
3186: PUSH
3187: EMPTY
3188: PUSH
3189: EMPTY
3190: PUSH
3191: EMPTY
3192: PUSH
3193: EMPTY
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3205: LD_ADDR_EXP 30
3209: PUSH
3210: EMPTY
3211: PUSH
3212: EMPTY
3213: PUSH
3214: EMPTY
3215: PUSH
3216: EMPTY
3217: PUSH
3218: EMPTY
3219: PUSH
3220: EMPTY
3221: PUSH
3222: EMPTY
3223: PUSH
3224: EMPTY
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: ST_TO_ADDR
// mpEmissions := 0 ;
3236: LD_ADDR_EXP 35
3240: PUSH
3241: LD_INT 0
3243: ST_TO_ADDR
// mpTeleports := 0 ;
3244: LD_ADDR_EXP 41
3248: PUSH
3249: LD_INT 0
3251: ST_TO_ADDR
// mpArtifacts := 0 ;
3252: LD_ADDR_EXP 42
3256: PUSH
3257: LD_INT 0
3259: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3260: LD_ADDR_EXP 23
3264: PUSH
3265: LD_INT 3
3267: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3268: LD_ADDR_EXP 22
3272: PUSH
3273: LD_INT 15
3275: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3276: LD_ADDR_EXP 36
3280: PUSH
3281: LD_INT 0
3283: ST_TO_ADDR
// mpGameActive := false ;
3284: LD_ADDR_EXP 37
3288: PUSH
3289: LD_INT 0
3291: ST_TO_ADDR
// mpBlockRespThread := false ;
3292: LD_ADDR_EXP 43
3296: PUSH
3297: LD_INT 0
3299: ST_TO_ADDR
// for i := 1 to 32 do
3300: LD_ADDR_VAR 0 2
3304: PUSH
3305: DOUBLE
3306: LD_INT 1
3308: DEC
3309: ST_TO_ADDR
3310: LD_INT 32
3312: PUSH
3313: FOR_TO
3314: IFFALSE 3341
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3316: LD_ADDR_EXP 4
3320: PUSH
3321: LD_EXP 4
3325: PPUSH
3326: LD_VAR 0 2
3330: PPUSH
3331: LD_INT 0
3333: PPUSH
3334: CALL_OW 1
3338: ST_TO_ADDR
3339: GO 3313
3341: POP
3342: POP
// end ;
3343: LD_VAR 0 1
3347: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3348: LD_INT 0
3350: PPUSH
3351: PPUSH
3352: PPUSH
3353: PPUSH
3354: PPUSH
3355: PPUSH
3356: PPUSH
3357: PPUSH
3358: PPUSH
3359: PPUSH
3360: PPUSH
3361: PPUSH
3362: PPUSH
3363: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3364: LD_ADDR_VAR 0 14
3368: PUSH
3369: LD_INT 1
3371: PUSH
3372: LD_INT 2
3374: PUSH
3375: LD_INT 3
3377: PUSH
3378: LD_INT 5
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: ST_TO_ADDR
// for i in gameTypes do
3387: LD_ADDR_VAR 0 2
3391: PUSH
3392: LD_VAR 0 14
3396: PUSH
3397: FOR_IN
3398: IFFALSE 3407
// disable ( i ) ;
3400: LD_VAR 0 2
3404: DISABLE_MARKED
3405: GO 3397
3407: POP
3408: POP
// if Multiplayer then
3409: LD_OWVAR 4
3413: IFFALSE 3597
// begin mpGameType := mp_game_type ;
3415: LD_ADDR_EXP 1
3419: PUSH
3420: LD_OWVAR 6
3424: ST_TO_ADDR
// your_side := mp_player_side ;
3425: LD_ADDR_OWVAR 2
3429: PUSH
3430: LD_OWVAR 7
3434: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3435: LD_ADDR_EXP 5
3439: PUSH
3440: LD_OWVAR 17
3444: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3445: LD_ADDR_EXP 6
3449: PUSH
3450: LD_OWVAR 15
3454: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3455: LD_ADDR_EXP 7
3459: PUSH
3460: LD_OWVAR 16
3464: ST_TO_ADDR
// mpTeams := mp_teams ;
3465: LD_ADDR_EXP 8
3469: PUSH
3470: LD_OWVAR 12
3474: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3475: LD_ADDR_VAR 0 2
3479: PUSH
3480: DOUBLE
3481: LD_INT 1
3483: DEC
3484: ST_TO_ADDR
3485: LD_EXP 2
3489: PPUSH
3490: CALL 19647 0 1
3494: PUSH
3495: FOR_TO
3496: IFFALSE 3572
// begin setting := mpGameSettingsKeys [ i ] ;
3498: LD_ADDR_VAR 0 12
3502: PUSH
3503: LD_EXP 2
3507: PUSH
3508: LD_VAR 0 2
3512: ARRAY
3513: ST_TO_ADDR
// if setting then
3514: LD_VAR 0 12
3518: IFFALSE 3570
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3520: LD_ADDR_EXP 4
3524: PUSH
3525: LD_EXP 4
3529: PPUSH
3530: LD_VAR 0 2
3534: PPUSH
3535: LD_EXP 3
3539: PUSH
3540: LD_VAR 0 2
3544: ARRAY
3545: PUSH
3546: LD_VAR 0 2
3550: PUSH
3551: LD_INT 1
3553: MINUS
3554: PPUSH
3555: CALL_OW 426
3559: PUSH
3560: LD_INT 1
3562: PLUS
3563: ARRAY
3564: PPUSH
3565: CALL_OW 1
3569: ST_TO_ADDR
// end ;
3570: GO 3495
3572: POP
3573: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3574: LD_ADDR_EXP 9
3578: PUSH
3579: LD_EXP 6
3583: PUSH
3584: LD_INT 0
3586: PUSH
3587: EMPTY
3588: LIST
3589: DIFF
3590: PUSH
3591: LD_INT 1
3593: GREATER
3594: ST_TO_ADDR
// end else
3595: GO 3597
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3597: LD_EXP 1
3601: PPUSH
3602: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
3606: LD_EXP 16
3610: PPUSH
3611: CALL 19647 0 1
3615: IFFALSE 3646
// begin for i in mpMarkedAreas do
3617: LD_ADDR_VAR 0 2
3621: PUSH
3622: LD_EXP 16
3626: PUSH
3627: FOR_IN
3628: IFFALSE 3644
// SetAreaMapShow ( i , 0 ) ;
3630: LD_VAR 0 2
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: CALL_OW 424
3642: GO 3627
3644: POP
3645: POP
// end ; for i := 1 to 8 do
3646: LD_ADDR_VAR 0 2
3650: PUSH
3651: DOUBLE
3652: LD_INT 1
3654: DEC
3655: ST_TO_ADDR
3656: LD_INT 8
3658: PUSH
3659: FOR_TO
3660: IFFALSE 4996
// begin if not mpSidePositions [ i ] then
3662: LD_EXP 5
3666: PUSH
3667: LD_VAR 0 2
3671: ARRAY
3672: NOT
3673: IFFALSE 3677
// continue ;
3675: GO 3659
// side := i ;
3677: LD_ADDR_VAR 0 7
3681: PUSH
3682: LD_VAR 0 2
3686: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3687: LD_ADDR_VAR 0 9
3691: PUSH
3692: LD_EXP 7
3696: PUSH
3697: LD_VAR 0 2
3701: ARRAY
3702: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3703: LD_ADDR_VAR 0 8
3707: PUSH
3708: LD_EXP 5
3712: PUSH
3713: LD_VAR 0 2
3717: ARRAY
3718: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3719: LD_EXP 10
3723: PPUSH
3724: CALL 19647 0 1
3728: IFFALSE 3805
// begin for j in mpOilDeposits [ pos ] do
3730: LD_ADDR_VAR 0 3
3734: PUSH
3735: LD_EXP 10
3739: PUSH
3740: LD_VAR 0 8
3744: ARRAY
3745: PUSH
3746: FOR_IN
3747: IFFALSE 3803
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3749: LD_VAR 0 3
3753: PUSH
3754: LD_INT 1
3756: ARRAY
3757: PPUSH
3758: LD_VAR 0 3
3762: PUSH
3763: LD_INT 2
3765: ARRAY
3766: PPUSH
3767: LD_INT 2
3769: PPUSH
3770: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3774: LD_VAR 0 3
3778: PUSH
3779: LD_INT 1
3781: ARRAY
3782: PPUSH
3783: LD_VAR 0 3
3787: PUSH
3788: LD_INT 2
3790: ARRAY
3791: PPUSH
3792: LD_VAR 0 7
3796: PPUSH
3797: CALL_OW 441
// end ;
3801: GO 3746
3803: POP
3804: POP
// end ; if Count ( mpSibDeposits ) then
3805: LD_EXP 11
3809: PPUSH
3810: CALL 19647 0 1
3814: IFFALSE 3891
// begin for j in mpSibDeposits [ pos ] do
3816: LD_ADDR_VAR 0 3
3820: PUSH
3821: LD_EXP 11
3825: PUSH
3826: LD_VAR 0 8
3830: ARRAY
3831: PUSH
3832: FOR_IN
3833: IFFALSE 3889
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3835: LD_VAR 0 3
3839: PUSH
3840: LD_INT 1
3842: ARRAY
3843: PPUSH
3844: LD_VAR 0 3
3848: PUSH
3849: LD_INT 2
3851: ARRAY
3852: PPUSH
3853: LD_INT 3
3855: PPUSH
3856: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3860: LD_VAR 0 3
3864: PUSH
3865: LD_INT 1
3867: ARRAY
3868: PPUSH
3869: LD_VAR 0 3
3873: PUSH
3874: LD_INT 2
3876: ARRAY
3877: PPUSH
3878: LD_VAR 0 7
3882: PPUSH
3883: CALL_OW 441
// end ;
3887: GO 3832
3889: POP
3890: POP
// end ; InitBc ;
3891: CALL_OW 21
// InitUc ;
3895: CALL_OW 18
// uc_side := side ;
3899: LD_ADDR_OWVAR 20
3903: PUSH
3904: LD_VAR 0 7
3908: ST_TO_ADDR
// uc_nation := nation ;
3909: LD_ADDR_OWVAR 21
3913: PUSH
3914: LD_VAR 0 9
3918: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3919: LD_EXP 20
3923: PUSH
3924: LD_INT 1
3926: NEG
3927: GREATER
3928: IFFALSE 4087
// begin x := mpStartPos [ pos ] [ 1 ] ;
3930: LD_ADDR_VAR 0 5
3934: PUSH
3935: LD_EXP 19
3939: PUSH
3940: LD_VAR 0 8
3944: ARRAY
3945: PUSH
3946: LD_INT 1
3948: ARRAY
3949: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3950: LD_ADDR_VAR 0 6
3954: PUSH
3955: LD_EXP 19
3959: PUSH
3960: LD_VAR 0 8
3964: ARRAY
3965: PUSH
3966: LD_INT 2
3968: ARRAY
3969: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3970: LD_VAR 0 5
3974: PPUSH
3975: LD_VAR 0 6
3979: PPUSH
3980: LD_INT 12
3982: PPUSH
3983: LD_INT 2
3985: PPUSH
3986: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3990: LD_ADDR_EXP 21
3994: PUSH
3995: LD_EXP 21
3999: PPUSH
4000: LD_VAR 0 7
4004: PPUSH
4005: LD_VAR 0 7
4009: PPUSH
4010: LD_VAR 0 5
4014: PPUSH
4015: LD_VAR 0 6
4019: PPUSH
4020: LD_INT 1
4022: PUSH
4023: LD_INT 100
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 2
4032: PUSH
4033: LD_INT 70
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: LD_INT 3
4042: PUSH
4043: LD_INT 40
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PUSH
4050: LD_INT 10
4052: PUSH
4053: LD_INT 25
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PUSH
4060: LD_INT 20
4062: PUSH
4063: LD_INT 100
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: PPUSH
4077: CALL_OW 418
4081: PPUSH
4082: CALL_OW 1
4086: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
4087: LD_EXP 12
4091: PPUSH
4092: CALL 19647 0 1
4096: IFFALSE 4280
// begin if mpGameType = GameTypeSurvival then
4098: LD_EXP 1
4102: PUSH
4103: LD_INT 2
4105: EQUAL
4106: IFFALSE 4126
// begin bc_level := 10 ;
4108: LD_ADDR_OWVAR 43
4112: PUSH
4113: LD_INT 10
4115: ST_TO_ADDR
// bc_type := b_warehouse ;
4116: LD_ADDR_OWVAR 42
4120: PUSH
4121: LD_INT 1
4123: ST_TO_ADDR
// end else
4124: GO 4142
// begin bc_level := 0 ;
4126: LD_ADDR_OWVAR 43
4130: PUSH
4131: LD_INT 0
4133: ST_TO_ADDR
// bc_type := b_depot ;
4134: LD_ADDR_OWVAR 42
4138: PUSH
4139: LD_INT 0
4141: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4142: LD_ADDR_VAR 0 4
4146: PUSH
4147: LD_EXP 12
4151: PUSH
4152: LD_VAR 0 8
4156: ARRAY
4157: PUSH
4158: LD_INT 1
4160: ARRAY
4161: PPUSH
4162: LD_EXP 12
4166: PUSH
4167: LD_VAR 0 8
4171: ARRAY
4172: PUSH
4173: LD_INT 2
4175: ARRAY
4176: PPUSH
4177: LD_EXP 12
4181: PUSH
4182: LD_VAR 0 8
4186: ARRAY
4187: PUSH
4188: LD_INT 3
4190: ARRAY
4191: PPUSH
4192: CALL_OW 47
4196: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4197: LD_VAR 0 4
4201: PPUSH
4202: LD_STRING @
4204: PUSH
4205: LD_VAR 0 7
4209: STR
4210: PPUSH
4211: CALL_OW 500
// if Count ( mpStartingResources ) then
4215: LD_EXP 13
4219: PPUSH
4220: CALL 19647 0 1
4224: IFFALSE 4278
// begin for j := 1 to mpStartingResources do
4226: LD_ADDR_VAR 0 3
4230: PUSH
4231: DOUBLE
4232: LD_INT 1
4234: DEC
4235: ST_TO_ADDR
4236: LD_EXP 13
4240: PUSH
4241: FOR_TO
4242: IFFALSE 4276
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4244: LD_VAR 0 4
4248: PPUSH
4249: CALL_OW 274
4253: PPUSH
4254: LD_VAR 0 3
4258: PPUSH
4259: LD_EXP 13
4263: PUSH
4264: LD_VAR 0 3
4268: ARRAY
4269: PPUSH
4270: CALL_OW 277
4274: GO 4241
4276: POP
4277: POP
// end ; end else
4278: GO 4487
// if Count ( mpStartingResources ) then
4280: LD_EXP 13
4284: PPUSH
4285: CALL 19647 0 1
4289: IFFALSE 4487
// begin x := mpStartPos [ pos ] [ 1 ] ;
4291: LD_ADDR_VAR 0 5
4295: PUSH
4296: LD_EXP 19
4300: PUSH
4301: LD_VAR 0 8
4305: ARRAY
4306: PUSH
4307: LD_INT 1
4309: ARRAY
4310: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4311: LD_ADDR_VAR 0 6
4315: PUSH
4316: LD_EXP 19
4320: PUSH
4321: LD_VAR 0 8
4325: ARRAY
4326: PUSH
4327: LD_INT 2
4329: ARRAY
4330: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4331: LD_ADDR_VAR 0 3
4335: PUSH
4336: DOUBLE
4337: LD_INT 1
4339: DEC
4340: ST_TO_ADDR
4341: LD_EXP 13
4345: PUSH
4346: FOR_TO
4347: IFFALSE 4485
// begin resources := mpStartingResources [ j ] ;
4349: LD_ADDR_VAR 0 13
4353: PUSH
4354: LD_EXP 13
4358: PUSH
4359: LD_VAR 0 3
4363: ARRAY
4364: ST_TO_ADDR
// if resources = 0 then
4365: LD_VAR 0 13
4369: PUSH
4370: LD_INT 0
4372: EQUAL
4373: IFFALSE 4377
// continue ;
4375: GO 4346
// repeat if resources >= 50 then
4377: LD_VAR 0 13
4381: PUSH
4382: LD_INT 50
4384: GREATEREQUAL
4385: IFFALSE 4431
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4387: LD_VAR 0 3
4391: PPUSH
4392: LD_INT 5
4394: PPUSH
4395: LD_VAR 0 5
4399: PPUSH
4400: LD_VAR 0 6
4404: PPUSH
4405: LD_INT 6
4407: PPUSH
4408: LD_INT 0
4410: PPUSH
4411: CALL_OW 60
// resources := resources - 50 ;
4415: LD_ADDR_VAR 0 13
4419: PUSH
4420: LD_VAR 0 13
4424: PUSH
4425: LD_INT 50
4427: MINUS
4428: ST_TO_ADDR
// end else
4429: GO 4473
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4431: LD_VAR 0 3
4435: PPUSH
4436: LD_VAR 0 13
4440: PUSH
4441: LD_INT 10
4443: DIV
4444: PPUSH
4445: LD_VAR 0 5
4449: PPUSH
4450: LD_VAR 0 6
4454: PPUSH
4455: LD_INT 6
4457: PPUSH
4458: LD_INT 0
4460: PPUSH
4461: CALL_OW 60
// resources := 0 ;
4465: LD_ADDR_VAR 0 13
4469: PUSH
4470: LD_INT 0
4472: ST_TO_ADDR
// end ; until resources <= 0 ;
4473: LD_VAR 0 13
4477: PUSH
4478: LD_INT 0
4480: LESSEQUAL
4481: IFFALSE 4377
// end ;
4483: GO 4346
4485: POP
4486: POP
// end ; if Count ( mpBuildings ) then
4487: LD_EXP 15
4491: PPUSH
4492: CALL 19647 0 1
4496: IFFALSE 4574
// begin for j in mpBuildings [ pos ] do
4498: LD_ADDR_VAR 0 3
4502: PUSH
4503: LD_EXP 15
4507: PUSH
4508: LD_VAR 0 8
4512: ARRAY
4513: PUSH
4514: FOR_IN
4515: IFFALSE 4572
// begin bc_level := 0 ;
4517: LD_ADDR_OWVAR 43
4521: PUSH
4522: LD_INT 0
4524: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4525: LD_ADDR_OWVAR 42
4529: PUSH
4530: LD_VAR 0 3
4534: PUSH
4535: LD_INT 1
4537: ARRAY
4538: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4539: LD_VAR 0 3
4543: PUSH
4544: LD_INT 2
4546: ARRAY
4547: PPUSH
4548: LD_VAR 0 3
4552: PUSH
4553: LD_INT 3
4555: ARRAY
4556: PPUSH
4557: LD_VAR 0 3
4561: PUSH
4562: LD_INT 4
4564: ARRAY
4565: PPUSH
4566: CALL_OW 47
// end ;
4570: GO 4514
4572: POP
4573: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4574: LD_EXP 24
4578: IFFALSE 4598
4580: PUSH
4581: LD_INT 20
4583: PPUSH
4584: LD_VAR 0 7
4588: PPUSH
4589: CALL_OW 321
4593: PUSH
4594: LD_INT 1
4596: EQUAL
4597: AND
4598: IFFALSE 4615
// SetTech ( tech_SibDet , side , state_researched ) ;
4600: LD_INT 20
4602: PPUSH
4603: LD_VAR 0 7
4607: PPUSH
4608: LD_INT 2
4610: PPUSH
4611: CALL_OW 322
// if not mpArtifacts then
4615: LD_EXP 42
4619: NOT
4620: IFFALSE 4637
// SetTech ( tech_artifact , side , state_disabled ) ;
4622: LD_INT 24
4624: PPUSH
4625: LD_VAR 0 7
4629: PPUSH
4630: LD_INT 0
4632: PPUSH
4633: CALL_OW 322
// if mpSibBomb = 1 then
4637: LD_EXP 26
4641: PUSH
4642: LD_INT 1
4644: EQUAL
4645: IFFALSE 4664
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4647: LD_INT 25
4649: PPUSH
4650: LD_VAR 0 7
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: CALL_OW 322
// end else
4662: GO 4679
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4664: LD_INT 25
4666: PPUSH
4667: LD_VAR 0 7
4671: PPUSH
4672: LD_INT 0
4674: PPUSH
4675: CALL_OW 322
// end ; if mpVehicles then
4679: LD_EXP 34
4683: IFFALSE 4782
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4685: LD_ADDR_VAR 0 3
4689: PUSH
4690: LD_VAR 0 7
4694: PPUSH
4695: LD_VAR 0 9
4699: PPUSH
4700: LD_EXP 34
4704: PPUSH
4705: CALL 5906 0 3
4709: PUSH
4710: FOR_IN
4711: IFFALSE 4780
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4713: LD_VAR 0 3
4717: PPUSH
4718: LD_INT 0
4720: PPUSH
4721: LD_INT 5
4723: PPUSH
4724: CALL_OW 12
4728: PPUSH
4729: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4733: LD_VAR 0 3
4737: PPUSH
4738: LD_EXP 19
4742: PUSH
4743: LD_VAR 0 8
4747: ARRAY
4748: PUSH
4749: LD_INT 1
4751: ARRAY
4752: PPUSH
4753: LD_EXP 19
4757: PUSH
4758: LD_VAR 0 8
4762: ARRAY
4763: PUSH
4764: LD_INT 2
4766: ARRAY
4767: PPUSH
4768: LD_INT 12
4770: PPUSH
4771: LD_INT 0
4773: PPUSH
4774: CALL_OW 50
// end ;
4778: GO 4710
4780: POP
4781: POP
// end ; uc_nation := nation ;
4782: LD_ADDR_OWVAR 21
4786: PUSH
4787: LD_VAR 0 9
4791: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4792: LD_ADDR_VAR 0 11
4796: PUSH
4797: LD_VAR 0 7
4801: PPUSH
4802: LD_VAR 0 9
4806: PPUSH
4807: LD_EXP 22
4811: PPUSH
4812: LD_EXP 23
4816: PPUSH
4817: CALL 5408 0 4
4821: ST_TO_ADDR
// for j in team do
4822: LD_ADDR_VAR 0 3
4826: PUSH
4827: LD_VAR 0 11
4831: PUSH
4832: FOR_IN
4833: IFFALSE 4882
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4835: LD_VAR 0 3
4839: PPUSH
4840: LD_EXP 19
4844: PUSH
4845: LD_VAR 0 8
4849: ARRAY
4850: PUSH
4851: LD_INT 1
4853: ARRAY
4854: PPUSH
4855: LD_EXP 19
4859: PUSH
4860: LD_VAR 0 8
4864: ARRAY
4865: PUSH
4866: LD_INT 2
4868: ARRAY
4869: PPUSH
4870: LD_INT 12
4872: PPUSH
4873: LD_INT 0
4875: PPUSH
4876: CALL_OW 50
4880: GO 4832
4882: POP
4883: POP
// if mpApemans then
4884: LD_EXP 28
4888: IFFALSE 4994
// begin for j := 1 to mpApemans do
4890: LD_ADDR_VAR 0 3
4894: PUSH
4895: DOUBLE
4896: LD_INT 1
4898: DEC
4899: ST_TO_ADDR
4900: LD_EXP 28
4904: PUSH
4905: FOR_TO
4906: IFFALSE 4992
// begin PrepareApeman ( - 5 ) ;
4908: LD_INT 5
4910: NEG
4911: PPUSH
4912: CALL 51706 0 1
// ape := CreateHuman ;
4916: LD_ADDR_VAR 0 10
4920: PUSH
4921: CALL_OW 44
4925: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4926: LD_ADDR_EXP 30
4930: PUSH
4931: LD_EXP 30
4935: PPUSH
4936: LD_VAR 0 8
4940: PPUSH
4941: LD_EXP 30
4945: PUSH
4946: LD_VAR 0 8
4950: ARRAY
4951: PPUSH
4952: LD_VAR 0 10
4956: PPUSH
4957: CALL 55579 0 2
4961: PPUSH
4962: CALL_OW 1
4966: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4967: LD_VAR 0 10
4971: PPUSH
4972: LD_EXP 29
4976: PUSH
4977: LD_VAR 0 8
4981: ARRAY
4982: PPUSH
4983: LD_INT 0
4985: PPUSH
4986: CALL_OW 49
// end ;
4990: GO 4905
4992: POP
4993: POP
// end ; end ;
4994: GO 3659
4996: POP
4997: POP
// if not mpTeamGame then
4998: LD_EXP 9
5002: NOT
5003: IFFALSE 5101
// begin for i := 1 to 8 do
5005: LD_ADDR_VAR 0 2
5009: PUSH
5010: DOUBLE
5011: LD_INT 1
5013: DEC
5014: ST_TO_ADDR
5015: LD_INT 8
5017: PUSH
5018: FOR_TO
5019: IFFALSE 5097
// for j := 1 to 8 do
5021: LD_ADDR_VAR 0 3
5025: PUSH
5026: DOUBLE
5027: LD_INT 1
5029: DEC
5030: ST_TO_ADDR
5031: LD_INT 8
5033: PUSH
5034: FOR_TO
5035: IFFALSE 5093
// if i <> j then
5037: LD_VAR 0 2
5041: PUSH
5042: LD_VAR 0 3
5046: NONEQUAL
5047: IFFALSE 5071
// SetAttitude ( i , j , att_neutral , true ) else
5049: LD_VAR 0 2
5053: PPUSH
5054: LD_VAR 0 3
5058: PPUSH
5059: LD_INT 0
5061: PPUSH
5062: LD_INT 1
5064: PPUSH
5065: CALL_OW 80
5069: GO 5091
// SetAttitude ( i , j , att_friend , true ) ;
5071: LD_VAR 0 2
5075: PPUSH
5076: LD_VAR 0 3
5080: PPUSH
5081: LD_INT 1
5083: PPUSH
5084: LD_INT 1
5086: PPUSH
5087: CALL_OW 80
5091: GO 5034
5093: POP
5094: POP
5095: GO 5018
5097: POP
5098: POP
// end else
5099: GO 5276
// begin if mpSharedVision then
5101: LD_EXP 14
5105: IFFALSE 5170
// begin for i in mpTeams do
5107: LD_ADDR_VAR 0 2
5111: PUSH
5112: LD_EXP 8
5116: PUSH
5117: FOR_IN
5118: IFFALSE 5168
// for j := 2 to i do
5120: LD_ADDR_VAR 0 3
5124: PUSH
5125: DOUBLE
5126: LD_INT 2
5128: DEC
5129: ST_TO_ADDR
5130: LD_VAR 0 2
5134: PUSH
5135: FOR_TO
5136: IFFALSE 5164
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5138: LD_VAR 0 2
5142: PUSH
5143: LD_VAR 0 3
5147: ARRAY
5148: PPUSH
5149: LD_VAR 0 2
5153: PUSH
5154: LD_INT 1
5156: ARRAY
5157: PPUSH
5158: CALL_OW 343
5162: GO 5135
5164: POP
5165: POP
5166: GO 5117
5168: POP
5169: POP
// end ; for i := 1 to 8 do
5170: LD_ADDR_VAR 0 2
5174: PUSH
5175: DOUBLE
5176: LD_INT 1
5178: DEC
5179: ST_TO_ADDR
5180: LD_INT 8
5182: PUSH
5183: FOR_TO
5184: IFFALSE 5274
// for j := 1 to 8 do
5186: LD_ADDR_VAR 0 3
5190: PUSH
5191: DOUBLE
5192: LD_INT 1
5194: DEC
5195: ST_TO_ADDR
5196: LD_INT 8
5198: PUSH
5199: FOR_TO
5200: IFFALSE 5270
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5202: LD_EXP 6
5206: PUSH
5207: LD_VAR 0 2
5211: ARRAY
5212: PUSH
5213: LD_EXP 6
5217: PUSH
5218: LD_VAR 0 3
5222: ARRAY
5223: EQUAL
5224: IFFALSE 5248
// SetAttitude ( i , j , att_friend , true ) else
5226: LD_VAR 0 2
5230: PPUSH
5231: LD_VAR 0 3
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: LD_INT 1
5241: PPUSH
5242: CALL_OW 80
5246: GO 5268
// SetAttitude ( i , j , att_enemy , true ) ;
5248: LD_VAR 0 2
5252: PPUSH
5253: LD_VAR 0 3
5257: PPUSH
5258: LD_INT 2
5260: PPUSH
5261: LD_INT 1
5263: PPUSH
5264: CALL_OW 80
5268: GO 5199
5270: POP
5271: POP
5272: GO 5183
5274: POP
5275: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5276: LD_ADDR_OWVAR 71
5280: PUSH
5281: LD_EXP 7
5285: PUSH
5286: LD_OWVAR 2
5290: ARRAY
5291: ST_TO_ADDR
// if IAmSpec then
5292: CALL_OW 531
5296: IFFALSE 5337
// begin FogOff ( true ) ;
5298: LD_INT 1
5300: PPUSH
5301: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5305: LD_EXP 27
5309: PUSH
5310: LD_INT 1
5312: ARRAY
5313: PUSH
5314: LD_INT 2
5316: DIV
5317: PPUSH
5318: LD_EXP 27
5322: PUSH
5323: LD_INT 2
5325: ARRAY
5326: PUSH
5327: LD_INT 2
5329: DIV
5330: PPUSH
5331: CALL_OW 86
// end else
5335: GO 5383
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5337: LD_EXP 19
5341: PUSH
5342: LD_EXP 5
5346: PUSH
5347: LD_OWVAR 2
5351: ARRAY
5352: ARRAY
5353: PUSH
5354: LD_INT 1
5356: ARRAY
5357: PPUSH
5358: LD_EXP 19
5362: PUSH
5363: LD_EXP 5
5367: PUSH
5368: LD_OWVAR 2
5372: ARRAY
5373: ARRAY
5374: PUSH
5375: LD_INT 2
5377: ARRAY
5378: PPUSH
5379: CALL_OW 86
// end ; BeginBuildUp ;
5383: CALL 6439 0 0
// enable ( mpActive ) ;
5387: LD_INT 100
5389: ENABLE_MARKED
// enable ( mpGameType ) ;
5390: LD_EXP 1
5394: ENABLE_MARKED
// mpGameActive := true ;
5395: LD_ADDR_EXP 37
5399: PUSH
5400: LD_INT 1
5402: ST_TO_ADDR
// end ;
5403: LD_VAR 0 1
5407: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5408: LD_INT 0
5410: PPUSH
5411: PPUSH
5412: PPUSH
5413: PPUSH
// result := [ ] ;
5414: LD_ADDR_VAR 0 5
5418: PUSH
5419: EMPTY
5420: ST_TO_ADDR
// class := class_soldier ;
5421: LD_ADDR_VAR 0 8
5425: PUSH
5426: LD_INT 1
5428: ST_TO_ADDR
// uc_side := side ;
5429: LD_ADDR_OWVAR 20
5433: PUSH
5434: LD_VAR 0 1
5438: ST_TO_ADDR
// uc_nation := nation ;
5439: LD_ADDR_OWVAR 21
5443: PUSH
5444: LD_VAR 0 2
5448: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5449: LD_ADDR_OWVAR 26
5453: PUSH
5454: LD_OWVAR 19
5458: PUSH
5459: LD_VAR 0 1
5463: ARRAY
5464: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5465: LD_INT 1
5467: PPUSH
5468: LD_INT 2
5470: PPUSH
5471: CALL_OW 12
5475: PPUSH
5476: LD_VAR 0 8
5480: PPUSH
5481: LD_VAR 0 4
5485: PUSH
5486: LD_INT 2
5488: PLUS
5489: PPUSH
5490: CALL_OW 380
// hc_importance := 105 ;
5494: LD_ADDR_OWVAR 32
5498: PUSH
5499: LD_INT 105
5501: ST_TO_ADDR
// if Multiplayer then
5502: LD_OWVAR 4
5506: IFFALSE 5546
// begin hc_gallery := MULTIAVATARS ;
5508: LD_ADDR_OWVAR 33
5512: PUSH
5513: LD_STRING MULTIAVATARS
5515: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5516: LD_ADDR_OWVAR 34
5520: PUSH
5521: LD_VAR 0 1
5525: PPUSH
5526: CALL_OW 525
5530: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5531: LD_ADDR_OWVAR 27
5535: PUSH
5536: LD_VAR 0 1
5540: PPUSH
5541: CALL_OW 526
5545: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5546: LD_ADDR_VAR 0 5
5550: PUSH
5551: LD_VAR 0 5
5555: PPUSH
5556: CALL_OW 44
5560: PPUSH
5561: CALL 55579 0 2
5565: ST_TO_ADDR
// if mpTeamPreset then
5566: LD_LOC 1
5570: IFFALSE 5666
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5572: LD_LOC 1
5576: PUSH
5577: LD_INT 1
5579: ARRAY
5580: PPUSH
5581: LD_VAR 0 5
5585: PUSH
5586: LD_VAR 0 5
5590: ARRAY
5591: PPUSH
5592: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5596: LD_VAR 0 5
5600: PUSH
5601: LD_VAR 0 5
5605: ARRAY
5606: PPUSH
5607: LD_INT 1
5609: PPUSH
5610: LD_LOC 1
5614: PUSH
5615: LD_INT 1
5617: ARRAY
5618: PPUSH
5619: LD_INT 1
5621: PPUSH
5622: CALL_OW 260
5626: PPUSH
5627: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5631: LD_VAR 0 5
5635: PUSH
5636: LD_VAR 0 5
5640: ARRAY
5641: PPUSH
5642: LD_INT 2
5644: PPUSH
5645: LD_LOC 1
5649: PUSH
5650: LD_INT 1
5652: ARRAY
5653: PPUSH
5654: LD_INT 2
5656: PPUSH
5657: CALL_OW 260
5661: PPUSH
5662: CALL_OW 239
// end ; InitHc_All ( ) ;
5666: CALL_OW 584
// class := 2 ;
5670: LD_ADDR_VAR 0 8
5674: PUSH
5675: LD_INT 2
5677: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5678: LD_ADDR_VAR 0 6
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_VAR 0 3
5692: PUSH
5693: LD_INT 1
5695: MINUS
5696: PUSH
5697: FOR_TO
5698: IFFALSE 5882
// begin PrepareHuman ( false , class , skill ) ;
5700: LD_INT 0
5702: PPUSH
5703: LD_VAR 0 8
5707: PPUSH
5708: LD_VAR 0 4
5712: PPUSH
5713: CALL_OW 380
// un := CreateHuman ;
5717: LD_ADDR_VAR 0 7
5721: PUSH
5722: CALL_OW 44
5726: ST_TO_ADDR
// result := Join ( result , un ) ;
5727: LD_ADDR_VAR 0 5
5731: PUSH
5732: LD_VAR 0 5
5736: PPUSH
5737: LD_VAR 0 7
5741: PPUSH
5742: CALL 55579 0 2
5746: ST_TO_ADDR
// if mpTeamPreset then
5747: LD_LOC 1
5751: IFFALSE 5847
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5753: LD_LOC 1
5757: PUSH
5758: LD_VAR 0 6
5762: PUSH
5763: LD_INT 1
5765: PLUS
5766: ARRAY
5767: PPUSH
5768: LD_VAR 0 7
5772: PPUSH
5773: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5777: LD_VAR 0 7
5781: PPUSH
5782: LD_INT 1
5784: PPUSH
5785: LD_LOC 1
5789: PUSH
5790: LD_VAR 0 6
5794: PUSH
5795: LD_INT 1
5797: PLUS
5798: ARRAY
5799: PPUSH
5800: LD_INT 1
5802: PPUSH
5803: CALL_OW 260
5807: PPUSH
5808: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5812: LD_VAR 0 7
5816: PPUSH
5817: LD_INT 2
5819: PPUSH
5820: LD_LOC 1
5824: PUSH
5825: LD_VAR 0 6
5829: PUSH
5830: LD_INT 1
5832: PLUS
5833: ARRAY
5834: PPUSH
5835: LD_INT 2
5837: PPUSH
5838: CALL_OW 260
5842: PPUSH
5843: CALL_OW 239
// end ; class := Inc ( class ) ;
5847: LD_ADDR_VAR 0 8
5851: PUSH
5852: LD_VAR 0 8
5856: PPUSH
5857: CALL 56952 0 1
5861: ST_TO_ADDR
// if class = 5 then
5862: LD_VAR 0 8
5866: PUSH
5867: LD_INT 5
5869: EQUAL
5870: IFFALSE 5880
// class := 1 ;
5872: LD_ADDR_VAR 0 8
5876: PUSH
5877: LD_INT 1
5879: ST_TO_ADDR
// end ;
5880: GO 5697
5882: POP
5883: POP
// if not mpTeamPreset then
5884: LD_LOC 1
5888: NOT
5889: IFFALSE 5901
// mpTeamPreset := result ;
5891: LD_ADDR_LOC 1
5895: PUSH
5896: LD_VAR 0 5
5900: ST_TO_ADDR
// end ;
5901: LD_VAR 0 5
5905: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5906: LD_INT 0
5908: PPUSH
5909: PPUSH
// result := [ ] ;
5910: LD_ADDR_VAR 0 4
5914: PUSH
5915: EMPTY
5916: ST_TO_ADDR
// if not vehicles then
5917: LD_VAR 0 3
5921: NOT
5922: IFFALSE 5926
// exit ;
5924: GO 6140
// for i := 1 to vehicles [ nation ] do
5926: LD_ADDR_VAR 0 5
5930: PUSH
5931: DOUBLE
5932: LD_INT 1
5934: DEC
5935: ST_TO_ADDR
5936: LD_VAR 0 3
5940: PUSH
5941: LD_VAR 0 2
5945: ARRAY
5946: PUSH
5947: FOR_TO
5948: IFFALSE 6138
// begin uc_side := side ;
5950: LD_ADDR_OWVAR 20
5954: PUSH
5955: LD_VAR 0 1
5959: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5960: LD_VAR 0 3
5964: PUSH
5965: LD_VAR 0 2
5969: ARRAY
5970: PUSH
5971: LD_VAR 0 5
5975: ARRAY
5976: PPUSH
5977: CALL 19647 0 1
5981: PUSH
5982: LD_INT 4
5984: GREATER
5985: IFFALSE 6015
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5987: LD_ADDR_OWVAR 21
5991: PUSH
5992: LD_VAR 0 3
5996: PUSH
5997: LD_VAR 0 2
6001: ARRAY
6002: PUSH
6003: LD_VAR 0 5
6007: ARRAY
6008: PUSH
6009: LD_INT 5
6011: ARRAY
6012: ST_TO_ADDR
6013: GO 6025
// uc_nation := nation ;
6015: LD_ADDR_OWVAR 21
6019: PUSH
6020: LD_VAR 0 2
6024: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6025: LD_VAR 0 3
6029: PUSH
6030: LD_VAR 0 2
6034: ARRAY
6035: PUSH
6036: LD_VAR 0 5
6040: ARRAY
6041: PUSH
6042: LD_INT 1
6044: ARRAY
6045: PPUSH
6046: LD_VAR 0 3
6050: PUSH
6051: LD_VAR 0 2
6055: ARRAY
6056: PUSH
6057: LD_VAR 0 5
6061: ARRAY
6062: PUSH
6063: LD_INT 2
6065: ARRAY
6066: PPUSH
6067: LD_VAR 0 3
6071: PUSH
6072: LD_VAR 0 2
6076: ARRAY
6077: PUSH
6078: LD_VAR 0 5
6082: ARRAY
6083: PUSH
6084: LD_INT 3
6086: ARRAY
6087: PPUSH
6088: LD_VAR 0 3
6092: PUSH
6093: LD_VAR 0 2
6097: ARRAY
6098: PUSH
6099: LD_VAR 0 5
6103: ARRAY
6104: PUSH
6105: LD_INT 4
6107: ARRAY
6108: PPUSH
6109: LD_INT 80
6111: PPUSH
6112: CALL 22409 0 5
// result := Join ( result , CreateVehicle ) ;
6116: LD_ADDR_VAR 0 4
6120: PUSH
6121: LD_VAR 0 4
6125: PPUSH
6126: CALL_OW 45
6130: PPUSH
6131: CALL 55579 0 2
6135: ST_TO_ADDR
// end ;
6136: GO 5947
6138: POP
6139: POP
// end ;
6140: LD_VAR 0 4
6144: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6145: LD_INT 0
6147: PPUSH
6148: PPUSH
// for i in mpBattleFlags do
6149: LD_ADDR_VAR 0 3
6153: PUSH
6154: LD_EXP 21
6158: PUSH
6159: FOR_IN
6160: IFFALSE 6237
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6162: LD_VAR 0 3
6166: PPUSH
6167: LD_INT 1
6169: PUSH
6170: LD_VAR 0 1
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 2
6181: PUSH
6182: LD_VAR 0 1
6186: PUSH
6187: LD_REAL  7.00000000000000E-0001
6190: MUL
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 3
6198: PUSH
6199: LD_VAR 0 1
6203: PUSH
6204: LD_REAL  4.00000000000000E-0001
6207: MUL
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PUSH
6213: LD_INT 20
6215: PUSH
6216: LD_VAR 0 1
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: PPUSH
6231: CALL_OW 423
6235: GO 6159
6237: POP
6238: POP
// end ;
6239: LD_VAR 0 2
6243: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6244: LD_INT 100
6246: IFFALSE 6341
6248: GO 6250
6250: DISABLE
6251: LD_INT 0
6253: PPUSH
6254: PPUSH
// begin if mpBattleFlag <= 0 then
6255: LD_EXP 20
6259: PUSH
6260: LD_INT 0
6262: LESSEQUAL
6263: IFFALSE 6267
// exit ;
6265: GO 6341
// strength := 100 ;
6267: LD_ADDR_VAR 0 2
6271: PUSH
6272: LD_INT 100
6274: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6275: LD_EXP 20
6279: PPUSH
6280: CALL_OW 67
// strength := Dec ( strength ) ;
6284: LD_ADDR_VAR 0 2
6288: PUSH
6289: LD_VAR 0 2
6293: PPUSH
6294: CALL 56974 0 1
6298: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6299: LD_VAR 0 2
6303: PPUSH
6304: CALL 6145 0 1
// until not strength ;
6308: LD_VAR 0 2
6312: NOT
6313: IFFALSE 6275
// for i in mpBattleFlags do
6315: LD_ADDR_VAR 0 1
6319: PUSH
6320: LD_EXP 21
6324: PUSH
6325: FOR_IN
6326: IFFALSE 6339
// KillBattleFlag ( i ) ;
6328: LD_VAR 0 1
6332: PPUSH
6333: CALL_OW 419
6337: GO 6325
6339: POP
6340: POP
// end ;
6341: PPOPN 2
6343: END
// every 0 0$1 marked mpActive do var side , tmp ;
6344: GO 6346
6346: DISABLE
6347: LD_INT 0
6349: PPUSH
6350: PPUSH
// begin if mpSibBomb <= 1 then
6351: LD_EXP 26
6355: PUSH
6356: LD_INT 1
6358: LESSEQUAL
6359: IFFALSE 6363
// exit ;
6361: GO 6436
// tmp := mpSibBomb ;
6363: LD_ADDR_VAR 0 2
6367: PUSH
6368: LD_EXP 26
6372: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6373: LD_INT 35
6375: PPUSH
6376: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6380: LD_ADDR_VAR 0 2
6384: PUSH
6385: LD_VAR 0 2
6389: PUSH
6390: LD_INT 35
6392: MINUS
6393: ST_TO_ADDR
// until not tmp ;
6394: LD_VAR 0 2
6398: NOT
6399: IFFALSE 6373
// for side := 1 to 8 do
6401: LD_ADDR_VAR 0 1
6405: PUSH
6406: DOUBLE
6407: LD_INT 1
6409: DEC
6410: ST_TO_ADDR
6411: LD_INT 8
6413: PUSH
6414: FOR_TO
6415: IFFALSE 6434
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6417: LD_INT 25
6419: PPUSH
6420: LD_VAR 0 1
6424: PPUSH
6425: LD_INT 1
6427: PPUSH
6428: CALL_OW 322
6432: GO 6414
6434: POP
6435: POP
// end ;
6436: PPOPN 2
6438: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6439: LD_INT 0
6441: PPUSH
6442: PPUSH
6443: PPUSH
// mpBuildUpTimeDelay := 0 ;
6444: LD_ADDR_EXP 44
6448: PUSH
6449: LD_INT 0
6451: ST_TO_ADDR
// if not mpBuildUpTime then
6452: LD_EXP 18
6456: NOT
6457: IFFALSE 6461
// exit ;
6459: GO 6650
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6461: LD_ADDR_EXP 44
6465: PUSH
6466: LD_INT 8400
6468: PUSH
6469: LD_INT 2100
6471: PUSH
6472: LD_EXP 18
6476: MUL
6477: PLUS
6478: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6479: LD_ADDR_EXP 45
6483: PUSH
6484: LD_INT 1
6486: ST_TO_ADDR
// for i := 1 to 8 do
6487: LD_ADDR_VAR 0 2
6491: PUSH
6492: DOUBLE
6493: LD_INT 1
6495: DEC
6496: ST_TO_ADDR
6497: LD_INT 8
6499: PUSH
6500: FOR_TO
6501: IFFALSE 6648
// if mpSidePositions [ i ] then
6503: LD_EXP 5
6507: PUSH
6508: LD_VAR 0 2
6512: ARRAY
6513: IFFALSE 6646
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6515: LD_EXP 17
6519: PUSH
6520: LD_EXP 5
6524: PUSH
6525: LD_VAR 0 2
6529: ARRAY
6530: ARRAY
6531: PPUSH
6532: LD_INT 5
6534: PPUSH
6535: CALL_OW 424
// for j := 1 to 8 do
6539: LD_ADDR_VAR 0 3
6543: PUSH
6544: DOUBLE
6545: LD_INT 1
6547: DEC
6548: ST_TO_ADDR
6549: LD_INT 8
6551: PUSH
6552: FOR_TO
6553: IFFALSE 6644
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6555: LD_EXP 5
6559: PUSH
6560: LD_VAR 0 3
6564: ARRAY
6565: IFFALSE 6614
6567: PUSH
6568: LD_EXP 6
6572: PUSH
6573: LD_VAR 0 2
6577: ARRAY
6578: PUSH
6579: LD_EXP 6
6583: PUSH
6584: LD_VAR 0 3
6588: ARRAY
6589: NONEQUAL
6590: IFTRUE 6613
6592: PUSH
6593: LD_EXP 9
6597: NOT
6598: IFFALSE 6612
6600: PUSH
6601: LD_VAR 0 2
6605: PUSH
6606: LD_VAR 0 3
6610: NONEQUAL
6611: AND
6612: OR
6613: AND
6614: IFFALSE 6642
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6616: LD_VAR 0 3
6620: PPUSH
6621: LD_EXP 17
6625: PUSH
6626: LD_EXP 5
6630: PUSH
6631: LD_VAR 0 2
6635: ARRAY
6636: ARRAY
6637: PPUSH
6638: CALL_OW 333
6642: GO 6552
6644: POP
6645: POP
// end ;
6646: GO 6500
6648: POP
6649: POP
// end ;
6650: LD_VAR 0 1
6654: RET
// function EndBuildUp ; var i , j ; begin
6655: LD_INT 0
6657: PPUSH
6658: PPUSH
6659: PPUSH
// mpBuildUpTimeActive := false ;
6660: LD_ADDR_EXP 45
6664: PUSH
6665: LD_INT 0
6667: ST_TO_ADDR
// for i := 1 to 8 do
6668: LD_ADDR_VAR 0 2
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_INT 8
6680: PUSH
6681: FOR_TO
6682: IFFALSE 6829
// if mpSidePositions [ i ] then
6684: LD_EXP 5
6688: PUSH
6689: LD_VAR 0 2
6693: ARRAY
6694: IFFALSE 6827
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6696: LD_EXP 17
6700: PUSH
6701: LD_EXP 5
6705: PUSH
6706: LD_VAR 0 2
6710: ARRAY
6711: ARRAY
6712: PPUSH
6713: LD_INT 0
6715: PPUSH
6716: CALL_OW 424
// for j := 1 to 8 do
6720: LD_ADDR_VAR 0 3
6724: PUSH
6725: DOUBLE
6726: LD_INT 1
6728: DEC
6729: ST_TO_ADDR
6730: LD_INT 8
6732: PUSH
6733: FOR_TO
6734: IFFALSE 6825
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6736: LD_EXP 5
6740: PUSH
6741: LD_VAR 0 3
6745: ARRAY
6746: IFFALSE 6795
6748: PUSH
6749: LD_EXP 6
6753: PUSH
6754: LD_VAR 0 2
6758: ARRAY
6759: PUSH
6760: LD_EXP 6
6764: PUSH
6765: LD_VAR 0 3
6769: ARRAY
6770: NONEQUAL
6771: IFTRUE 6794
6773: PUSH
6774: LD_EXP 9
6778: NOT
6779: IFFALSE 6793
6781: PUSH
6782: LD_VAR 0 2
6786: PUSH
6787: LD_VAR 0 3
6791: NONEQUAL
6792: AND
6793: OR
6794: AND
6795: IFFALSE 6823
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6797: LD_VAR 0 3
6801: PPUSH
6802: LD_EXP 17
6806: PUSH
6807: LD_EXP 5
6811: PUSH
6812: LD_VAR 0 2
6816: ARRAY
6817: ARRAY
6818: PPUSH
6819: CALL_OW 334
6823: GO 6733
6825: POP
6826: POP
// end ;
6827: GO 6681
6829: POP
6830: POP
// end ;
6831: LD_VAR 0 1
6835: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6836: LD_EXP 45
6840: IFFALSE 7019
6842: GO 6844
6844: DISABLE
6845: LD_INT 0
6847: PPUSH
6848: PPUSH
// begin for i := 1 to 8 do
6849: LD_ADDR_VAR 0 1
6853: PUSH
6854: DOUBLE
6855: LD_INT 1
6857: DEC
6858: ST_TO_ADDR
6859: LD_INT 8
6861: PUSH
6862: FOR_TO
6863: IFFALSE 7016
// if mpSidePositions [ i ] then
6865: LD_EXP 5
6869: PUSH
6870: LD_VAR 0 1
6874: ARRAY
6875: IFFALSE 7014
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6877: LD_ADDR_VAR 0 2
6881: PUSH
6882: LD_EXP 17
6886: PUSH
6887: LD_EXP 5
6891: PUSH
6892: LD_VAR 0 1
6896: ARRAY
6897: ARRAY
6898: PPUSH
6899: LD_INT 2
6901: PUSH
6902: LD_INT 21
6904: PUSH
6905: LD_INT 1
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 21
6914: PUSH
6915: LD_INT 2
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 22
6929: PUSH
6930: LD_OWVAR 2
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 70
6947: PUSH
6948: FOR_IN
6949: IFFALSE 7012
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6951: LD_EXP 6
6955: PUSH
6956: LD_VAR 0 1
6960: ARRAY
6961: PUSH
6962: LD_EXP 6
6966: PUSH
6967: LD_OWVAR 2
6971: ARRAY
6972: NONEQUAL
6973: IFTRUE 6996
6975: PUSH
6976: LD_EXP 9
6980: NOT
6981: IFFALSE 6995
6983: PUSH
6984: LD_VAR 0 1
6988: PUSH
6989: LD_OWVAR 2
6993: NONEQUAL
6994: AND
6995: OR
6996: IFFALSE 7010
// ComMoveToArea ( un , BuildUpEscape ) ;
6998: LD_VAR 0 2
7002: PPUSH
7003: LD_INT 59
7005: PPUSH
7006: CALL_OW 113
7010: GO 6948
7012: POP
7013: POP
7014: GO 6862
7016: POP
7017: POP
// enable ;
7018: ENABLE
// end ;
7019: PPOPN 2
7021: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7022: LD_EXP 18
7026: IFFALSE 7076
7028: GO 7030
7030: DISABLE
7031: LD_INT 0
7033: PPUSH
// begin tmp := mpBuildUpTime ;
7034: LD_ADDR_VAR 0 1
7038: PUSH
7039: LD_EXP 18
7043: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7044: LD_INT 35
7046: PPUSH
7047: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7051: LD_ADDR_VAR 0 1
7055: PUSH
7056: LD_VAR 0 1
7060: PUSH
7061: LD_INT 35
7063: MINUS
7064: ST_TO_ADDR
// until not tmp ;
7065: LD_VAR 0 1
7069: NOT
7070: IFFALSE 7044
// EndBuildUp ;
7072: CALL 6655 0 0
// end ;
7076: PPOPN 1
7078: END
// every 0 0$1 trigger mpActive marked mpWin do
7079: LD_INT 100
7081: IFFALSE 7115
7083: GO 7085
7085: DISABLE
// begin if IAmServer then
7086: CALL_OW 518
7090: IFFALSE 7099
// wait ( 0 0$3 ) ;
7092: LD_INT 105
7094: PPUSH
7095: CALL_OW 67
// if Multiplayer then
7099: LD_OWVAR 4
7103: IFFALSE 7111
// YouWinInMultiplayer else
7105: CALL_OW 106
7109: GO 7115
// YouWin ;
7111: CALL_OW 103
// end ;
7115: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7116: LD_INT 0
7118: PPUSH
// result := false ;
7119: LD_ADDR_VAR 0 3
7123: PUSH
7124: LD_INT 0
7126: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
7127: LD_VAR 0 1
7131: PUSH
7132: LD_INT 1
7134: DOUBLE
7135: EQUAL
7136: IFTRUE 7146
7138: LD_INT 5
7140: DOUBLE
7141: EQUAL
7142: IFTRUE 7146
7144: GO 7219
7146: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: LD_INT 22
7154: PUSH
7155: LD_VAR 0 2
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: LD_INT 2
7166: PUSH
7167: LD_INT 21
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 33
7179: PUSH
7180: LD_INT 3
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 33
7189: PUSH
7190: LD_INT 5
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PPUSH
7207: CALL_OW 69
7211: PPUSH
7212: CALL 19647 0 1
7216: ST_TO_ADDR
// end ; GameTypeSurvival :
7217: GO 7458
7219: LD_INT 2
7221: DOUBLE
7222: EQUAL
7223: IFTRUE 7227
7225: GO 7357
7227: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7228: LD_ADDR_VAR 0 3
7232: PUSH
7233: LD_INT 22
7235: PUSH
7236: LD_VAR 0 2
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 2
7247: PUSH
7248: LD_INT 30
7250: PUSH
7251: LD_INT 0
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: LD_INT 30
7260: PUSH
7261: LD_INT 1
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PPUSH
7277: CALL_OW 69
7281: PPUSH
7282: CALL 19647 0 1
7286: IFFALSE 7354
7288: PUSH
7289: LD_INT 22
7291: PUSH
7292: LD_VAR 0 2
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: LD_INT 2
7303: PUSH
7304: LD_INT 21
7306: PUSH
7307: LD_INT 1
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 33
7316: PUSH
7317: LD_INT 3
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 33
7326: PUSH
7327: LD_INT 5
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PPUSH
7344: CALL_OW 69
7348: PPUSH
7349: CALL 19647 0 1
7353: AND
7354: ST_TO_ADDR
// end ; GameTypeKing :
7355: GO 7458
7357: LD_INT 3
7359: DOUBLE
7360: EQUAL
7361: IFTRUE 7365
7363: GO 7457
7365: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7366: LD_ADDR_VAR 0 3
7370: PUSH
7371: LD_INT 22
7373: PUSH
7374: LD_VAR 0 2
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 2
7385: PUSH
7386: LD_INT 21
7388: PUSH
7389: LD_INT 1
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: PUSH
7396: LD_INT 33
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: PUSH
7406: LD_INT 33
7408: PUSH
7409: LD_INT 5
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PPUSH
7426: CALL_OW 69
7430: PPUSH
7431: CALL 19647 0 1
7435: IFFALSE 7454
7437: PUSH
7438: LD_VAR 0 2
7442: PPUSH
7443: CALL 10498 0 1
7447: PUSH
7448: LD_EXP 33
7452: LESS
7453: AND
7454: ST_TO_ADDR
// end ; end ;
7455: GO 7458
7457: POP
// end ;
7458: LD_VAR 0 3
7462: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7463: LD_INT 100
7465: IFFALSE 7695
7467: GO 7469
7469: DISABLE
7470: LD_INT 0
7472: PPUSH
7473: PPUSH
// begin if Multiplayer then
7474: LD_OWVAR 4
7478: IFFALSE 7486
// SetPlayerSpectator ( ) else
7480: CALL_OW 572
7484: GO 7495
// FogOff ( your_side ) ;
7486: LD_OWVAR 2
7490: PPUSH
7491: CALL_OW 344
// repeat gameIsOn := false ;
7495: LD_ADDR_VAR 0 1
7499: PUSH
7500: LD_INT 0
7502: ST_TO_ADDR
// for i := 1 to 8 do
7503: LD_ADDR_VAR 0 2
7507: PUSH
7508: DOUBLE
7509: LD_INT 1
7511: DEC
7512: ST_TO_ADDR
7513: LD_INT 8
7515: PUSH
7516: FOR_TO
7517: IFFALSE 7647
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7519: LD_EXP 5
7523: PUSH
7524: LD_VAR 0 2
7528: ARRAY
7529: IFFALSE 7542
7531: PUSH
7532: LD_VAR 0 2
7536: PPUSH
7537: CALL_OW 108
7541: AND
7542: IFFALSE 7556
7544: PUSH
7545: LD_VAR 0 2
7549: PUSH
7550: LD_OWVAR 2
7554: NONEQUAL
7555: AND
7556: IFFALSE 7645
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7558: LD_EXP 6
7562: PUSH
7563: LD_VAR 0 2
7567: ARRAY
7568: NOT
7569: IFTRUE 7617
7571: PUSH
7572: LD_EXP 6
7576: PUSH
7577: LD_VAR 0 2
7581: ARRAY
7582: PUSH
7583: LD_EXP 6
7587: PUSH
7588: LD_OWVAR 2
7592: ARRAY
7593: NONEQUAL
7594: IFFALSE 7616
7596: PUSH
7597: LD_OWVAR 2
7601: PPUSH
7602: LD_VAR 0 2
7606: PPUSH
7607: CALL_OW 81
7611: PUSH
7612: LD_INT 1
7614: NONEQUAL
7615: AND
7616: OR
7617: IFFALSE 7645
// if HasPowerByGameType ( mpGameType , i ) then
7619: LD_EXP 1
7623: PPUSH
7624: LD_VAR 0 2
7628: PPUSH
7629: CALL 7116 0 2
7633: IFFALSE 7645
// begin gameIsOn := true ;
7635: LD_ADDR_VAR 0 1
7639: PUSH
7640: LD_INT 1
7642: ST_TO_ADDR
// break ;
7643: GO 7647
// end ;
7645: GO 7516
7647: POP
7648: POP
// wait ( 100 ) ;
7649: LD_INT 100
7651: PPUSH
7652: CALL_OW 67
// until not gameIsOn ;
7656: LD_VAR 0 1
7660: NOT
7661: IFFALSE 7495
// if IAmServer then
7663: CALL_OW 518
7667: IFFALSE 7676
// wait ( 0 0$3 ) ;
7669: LD_INT 105
7671: PPUSH
7672: CALL_OW 67
// if Multiplayer then
7676: LD_OWVAR 4
7680: IFFALSE 7688
// YouLostInMultiplayer else
7682: CALL_OW 107
7686: GO 7695
// YouLost (  ) ;
7688: LD_STRING 
7690: PPUSH
7691: CALL_OW 104
// end ;
7695: PPOPN 2
7697: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7698: LD_EXP 31
7702: IFFALSE 8086
7704: GO 7706
7706: DISABLE
7707: LD_INT 0
7709: PPUSH
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7714: LD_ADDR_VAR 0 5
7718: PUSH
7719: LD_INT 1
7721: PUSH
7722: LD_INT 2
7724: PUSH
7725: LD_INT 3
7727: PUSH
7728: LD_INT 4
7730: PUSH
7731: LD_INT 5
7733: PUSH
7734: LD_INT 6
7736: PUSH
7737: LD_INT 7
7739: PUSH
7740: LD_INT 8
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7753: LD_INT 350
7755: PPUSH
7756: CALL_OW 67
// for i := 1 to 8 do
7760: LD_ADDR_VAR 0 1
7764: PUSH
7765: DOUBLE
7766: LD_INT 1
7768: DEC
7769: ST_TO_ADDR
7770: LD_INT 8
7772: PUSH
7773: FOR_TO
7774: IFFALSE 8056
// begin j := sides [ i ] ;
7776: LD_ADDR_VAR 0 2
7780: PUSH
7781: LD_VAR 0 5
7785: PUSH
7786: LD_VAR 0 1
7790: ARRAY
7791: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7792: LD_EXP 38
7796: PUSH
7797: LD_VAR 0 2
7801: ARRAY
7802: PPUSH
7803: CALL 19647 0 1
7807: IFFALSE 7820
7809: PUSH
7810: LD_VAR 0 2
7814: PPUSH
7815: CALL_OW 108
7819: AND
7820: IFFALSE 7838
7822: PUSH
7823: LD_EXP 1
7827: PPUSH
7828: LD_VAR 0 2
7832: PPUSH
7833: CALL 7116 0 2
7837: AND
7838: IFFALSE 8054
// begin wait ( mpRespawn div 3 ) ;
7840: LD_EXP 31
7844: PUSH
7845: LD_INT 3
7847: DIV
7848: PPUSH
7849: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7853: LD_ADDR_VAR 0 3
7857: PUSH
7858: LD_INT 22
7860: PUSH
7861: LD_VAR 0 2
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: LD_INT 50
7872: PUSH
7873: EMPTY
7874: LIST
7875: PUSH
7876: LD_INT 2
7878: PUSH
7879: LD_INT 30
7881: PUSH
7882: LD_INT 0
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 30
7891: PUSH
7892: LD_INT 1
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: PPUSH
7909: CALL_OW 69
7913: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7914: LD_VAR 0 3
7918: NOT
7919: IFTRUE 7933
7921: PUSH
7922: LD_VAR 0 2
7926: PPUSH
7927: CALL_OW 108
7931: NOT
7932: OR
7933: IFTRUE 7952
7935: PUSH
7936: LD_EXP 1
7940: PPUSH
7941: LD_VAR 0 2
7945: PPUSH
7946: CALL 7116 0 2
7950: NOT
7951: OR
7952: IFFALSE 7956
// continue ;
7954: GO 7773
// spawn := tmp [ 1 ] ;
7956: LD_ADDR_VAR 0 4
7960: PUSH
7961: LD_VAR 0 3
7965: PUSH
7966: LD_INT 1
7968: ARRAY
7969: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7970: LD_EXP 38
7974: PUSH
7975: LD_VAR 0 2
7979: ARRAY
7980: PUSH
7981: LD_INT 1
7983: ARRAY
7984: PPUSH
7985: LD_VAR 0 4
7989: PPUSH
7990: CALL_OW 250
7994: PPUSH
7995: LD_VAR 0 4
7999: PPUSH
8000: CALL_OW 251
8004: PPUSH
8005: LD_INT 32
8007: PPUSH
8008: LD_INT 1
8010: PPUSH
8011: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8015: LD_ADDR_EXP 38
8019: PUSH
8020: LD_EXP 38
8024: PPUSH
8025: LD_VAR 0 2
8029: PPUSH
8030: LD_EXP 38
8034: PUSH
8035: LD_VAR 0 2
8039: ARRAY
8040: PPUSH
8041: LD_INT 1
8043: PPUSH
8044: CALL_OW 3
8048: PPUSH
8049: CALL_OW 1
8053: ST_TO_ADDR
// end ; end ;
8054: GO 7773
8056: POP
8057: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8058: LD_ADDR_VAR 0 5
8062: PUSH
8063: LD_VAR 0 5
8067: PPUSH
8068: LD_INT 1
8070: PPUSH
8071: LD_INT 8
8073: PPUSH
8074: LD_INT 1
8076: PPUSH
8077: CALL 21939 0 4
8081: ST_TO_ADDR
// until false ;
8082: LD_INT 0
8084: IFFALSE 7753
// end ;
8086: PPOPN 5
8088: END
// every 0 0$1 marked mpActive do
8089: GO 8091
8091: DISABLE
// begin enable ;
8092: ENABLE
// if not mpDisplayStrings then
8093: LD_EXP 36
8097: NOT
8098: IFFALSE 8109
// begin display_strings := [ ] ;
8100: LD_ADDR_OWVAR 47
8104: PUSH
8105: EMPTY
8106: ST_TO_ADDR
// exit ;
8107: GO 8119
// end ; display_strings := mpDisplayStrings ;
8109: LD_ADDR_OWVAR 47
8113: PUSH
8114: LD_EXP 36
8118: ST_TO_ADDR
// end ; end_of_file
8119: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8120: LD_INT 0
8122: PPUSH
8123: PPUSH
8124: PPUSH
8125: PPUSH
8126: PPUSH
8127: PPUSH
8128: PPUSH
8129: PPUSH
8130: PPUSH
// if GetType ( un ) = unit_vehicle then
8131: LD_VAR 0 1
8135: PPUSH
8136: CALL_OW 247
8140: PUSH
8141: LD_INT 2
8143: EQUAL
8144: IFFALSE 8148
// exit ;
8146: GO 8786
// side := GetSide ( un ) ;
8148: LD_ADDR_VAR 0 9
8152: PUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: CALL_OW 255
8162: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
8163: LD_EXP 1
8167: PUSH
8168: LD_INT 2
8170: EQUAL
8171: IFFALSE 8247
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8173: LD_VAR 0 1
8177: PPUSH
8178: CALL_OW 266
8182: PUSH
8183: LD_INT 0
8185: PUSH
8186: LD_INT 1
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: IN
8193: IFFALSE 8247
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
8195: LD_ADDR_VAR 0 3
8199: PUSH
8200: LD_INT 22
8202: PUSH
8203: LD_VAR 0 9
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 21
8214: PUSH
8215: LD_INT 1
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: PPUSH
8226: CALL_OW 69
8230: PUSH
8231: FOR_IN
8232: IFFALSE 8245
// KillUnit ( i ) ;
8234: LD_VAR 0 3
8238: PPUSH
8239: CALL_OW 66
8243: GO 8231
8245: POP
8246: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8247: LD_VAR 0 1
8251: PPUSH
8252: CALL_OW 257
8256: PUSH
8257: LD_INT 12
8259: PUSH
8260: LD_INT 17
8262: PUSH
8263: LD_INT 15
8265: PUSH
8266: LD_INT 16
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: IN
8275: IFTRUE 8292
8277: PUSH
8278: LD_VAR 0 1
8282: PPUSH
8283: CALL_OW 263
8287: PUSH
8288: LD_INT 5
8290: EQUAL
8291: OR
8292: IFFALSE 8511
// begin tag := 0 ;
8294: LD_ADDR_VAR 0 5
8298: PUSH
8299: LD_INT 0
8301: ST_TO_ADDR
// for i := 1 to 8 do
8302: LD_ADDR_VAR 0 3
8306: PUSH
8307: DOUBLE
8308: LD_INT 1
8310: DEC
8311: ST_TO_ADDR
8312: LD_INT 8
8314: PUSH
8315: FOR_TO
8316: IFFALSE 8350
// if un in mpApePosIndex [ i ] then
8318: LD_VAR 0 1
8322: PUSH
8323: LD_EXP 30
8327: PUSH
8328: LD_VAR 0 3
8332: ARRAY
8333: IN
8334: IFFALSE 8348
// begin tag := i ;
8336: LD_ADDR_VAR 0 5
8340: PUSH
8341: LD_VAR 0 3
8345: ST_TO_ADDR
// break ;
8346: GO 8350
// end ;
8348: GO 8315
8350: POP
8351: POP
// if not tag then
8352: LD_VAR 0 5
8356: NOT
8357: IFFALSE 8361
// exit ;
8359: GO 8786
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8361: LD_ADDR_VAR 0 7
8365: PUSH
8366: LD_EXP 29
8370: PUSH
8371: LD_EXP 5
8375: PUSH
8376: LD_VAR 0 5
8380: ARRAY
8381: ARRAY
8382: ST_TO_ADDR
// if not area then
8383: LD_VAR 0 7
8387: NOT
8388: IFFALSE 8392
// exit ;
8390: GO 8786
// wait ( 4 4$00 ) ;
8392: LD_INT 8400
8394: PPUSH
8395: CALL_OW 67
// repeat wait ( 10 ) ;
8399: LD_INT 10
8401: PPUSH
8402: CALL_OW 67
// until not mpBlockRespThread ;
8406: LD_EXP 43
8410: NOT
8411: IFFALSE 8399
// mpBlockRespThread := true ;
8413: LD_ADDR_EXP 43
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8421: LD_INT 0
8423: PPUSH
8424: CALL 51706 0 1
// ape := CreateHuman ;
8428: LD_ADDR_VAR 0 4
8432: PUSH
8433: CALL_OW 44
8437: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8438: LD_ADDR_EXP 30
8442: PUSH
8443: LD_EXP 30
8447: PPUSH
8448: LD_VAR 0 5
8452: PPUSH
8453: LD_EXP 30
8457: PUSH
8458: LD_VAR 0 5
8462: ARRAY
8463: PPUSH
8464: LD_VAR 0 4
8468: PPUSH
8469: CALL 55579 0 2
8473: PPUSH
8474: CALL_OW 1
8478: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8479: LD_VAR 0 4
8483: PPUSH
8484: LD_VAR 0 7
8488: PPUSH
8489: LD_INT 0
8491: PPUSH
8492: CALL_OW 49
// wait ( 10 ) ;
8496: LD_INT 10
8498: PPUSH
8499: CALL_OW 67
// mpBlockRespThread := false ;
8503: LD_ADDR_EXP 43
8507: PUSH
8508: LD_INT 0
8510: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8511: LD_VAR 0 1
8515: PPUSH
8516: CALL_OW 247
8520: PUSH
8521: LD_INT 1
8523: EQUAL
8524: IFFALSE 8541
8526: PUSH
8527: LD_VAR 0 1
8531: PPUSH
8532: CALL_OW 248
8536: PUSH
8537: LD_INT 0
8539: GREATER
8540: AND
8541: IFFALSE 8786
// begin if not mpRespawn then
8543: LD_EXP 31
8547: NOT
8548: IFFALSE 8552
// exit ;
8550: GO 8786
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8552: LD_VAR 0 9
8556: PPUSH
8557: CALL_OW 108
8561: NOT
8562: IFFALSE 8581
8564: PUSH
8565: LD_EXP 1
8569: PPUSH
8570: LD_VAR 0 9
8574: PPUSH
8575: CALL 7116 0 2
8579: NOT
8580: AND
8581: IFFALSE 8585
// exit ;
8583: GO 8786
// side := GetSide ( un ) ;
8585: LD_ADDR_VAR 0 9
8589: PUSH
8590: LD_VAR 0 1
8594: PPUSH
8595: CALL_OW 255
8599: ST_TO_ADDR
// nation := GetNation ( un ) ;
8600: LD_ADDR_VAR 0 8
8604: PUSH
8605: LD_VAR 0 1
8609: PPUSH
8610: CALL_OW 248
8614: ST_TO_ADDR
// class := GetClass ( un ) ;
8615: LD_ADDR_VAR 0 6
8619: PUSH
8620: LD_VAR 0 1
8624: PPUSH
8625: CALL_OW 257
8629: ST_TO_ADDR
// if class > 4 then
8630: LD_VAR 0 6
8634: PUSH
8635: LD_INT 4
8637: GREATER
8638: IFFALSE 8648
// class := 1 ;
8640: LD_ADDR_VAR 0 6
8644: PUSH
8645: LD_INT 1
8647: ST_TO_ADDR
// repeat wait ( 10 ) ;
8648: LD_INT 10
8650: PPUSH
8651: CALL_OW 67
// until not mpBlockRespThread ;
8655: LD_EXP 43
8659: NOT
8660: IFFALSE 8648
// mpBlockRespThread := true ;
8662: LD_ADDR_EXP 43
8666: PUSH
8667: LD_INT 1
8669: ST_TO_ADDR
// uc_side := side ;
8670: LD_ADDR_OWVAR 20
8674: PUSH
8675: LD_VAR 0 9
8679: ST_TO_ADDR
// uc_nation := nation ;
8680: LD_ADDR_OWVAR 21
8684: PUSH
8685: LD_VAR 0 8
8689: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8690: LD_INT 0
8692: PPUSH
8693: LD_VAR 0 6
8697: PPUSH
8698: LD_INT 2
8700: PPUSH
8701: CALL_OW 380
// un := CreateHuman ;
8705: LD_ADDR_VAR 0 1
8709: PUSH
8710: CALL_OW 44
8714: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8715: LD_ADDR_EXP 38
8719: PUSH
8720: LD_EXP 38
8724: PPUSH
8725: LD_VAR 0 9
8729: PPUSH
8730: LD_EXP 38
8734: PUSH
8735: LD_VAR 0 9
8739: ARRAY
8740: PPUSH
8741: LD_EXP 38
8745: PUSH
8746: LD_VAR 0 9
8750: ARRAY
8751: PUSH
8752: LD_INT 1
8754: PLUS
8755: PPUSH
8756: LD_VAR 0 1
8760: PPUSH
8761: CALL_OW 1
8765: PPUSH
8766: CALL_OW 1
8770: ST_TO_ADDR
// wait ( 10 ) ;
8771: LD_INT 10
8773: PPUSH
8774: CALL_OW 67
// mpBlockRespThread := false ;
8778: LD_ADDR_EXP 43
8782: PUSH
8783: LD_INT 0
8785: ST_TO_ADDR
// end ; end ;
8786: LD_VAR 0 2
8790: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8791: LD_INT 0
8793: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8794: LD_VAR 0 1
8798: PPUSH
8799: CALL_OW 266
8803: PUSH
8804: LD_INT 0
8806: PUSH
8807: LD_INT 1
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: IN
8814: IFFALSE 8839
// SetBName ( building , @ & GetSide ( building ) ) ;
8816: LD_VAR 0 1
8820: PPUSH
8821: LD_STRING @
8823: PUSH
8824: LD_VAR 0 1
8828: PPUSH
8829: CALL_OW 255
8833: STR
8834: PPUSH
8835: CALL_OW 500
// end ;
8839: LD_VAR 0 2
8843: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8844: LD_INT 0
8846: PPUSH
8847: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8848: LD_EXP 1
8852: PUSH
8853: LD_INT 2
8855: EQUAL
8856: IFFALSE 8880
8858: PUSH
8859: LD_VAR 0 1
8863: PPUSH
8864: CALL_OW 266
8868: PUSH
8869: LD_INT 0
8871: PUSH
8872: LD_INT 1
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: IN
8879: AND
8880: IFFALSE 8959
// begin SetSide ( building , oldSide ) ;
8882: LD_VAR 0 1
8886: PPUSH
8887: LD_VAR 0 2
8891: PPUSH
8892: CALL_OW 235
// KillUnit ( building ) ;
8896: LD_VAR 0 1
8900: PPUSH
8901: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8905: LD_ADDR_VAR 0 5
8909: PUSH
8910: LD_INT 22
8912: PUSH
8913: LD_VAR 0 2
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: LD_INT 21
8924: PUSH
8925: LD_INT 1
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PPUSH
8936: CALL_OW 69
8940: PUSH
8941: FOR_IN
8942: IFFALSE 8955
// KillUnit ( i ) ;
8944: LD_VAR 0 5
8948: PPUSH
8949: CALL_OW 66
8953: GO 8941
8955: POP
8956: POP
// exit ;
8957: GO 9004
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8959: LD_VAR 0 1
8963: PPUSH
8964: CALL_OW 266
8968: PUSH
8969: LD_INT 0
8971: PUSH
8972: LD_INT 1
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: IN
8979: IFFALSE 9004
// SetBName ( building , @ & GetSide ( building ) ) ;
8981: LD_VAR 0 1
8985: PPUSH
8986: LD_STRING @
8988: PUSH
8989: LD_VAR 0 1
8993: PPUSH
8994: CALL_OW 255
8998: STR
8999: PPUSH
9000: CALL_OW 500
// end ;
9004: LD_VAR 0 4
9008: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9009: LD_INT 0
9011: PPUSH
9012: PPUSH
9013: PPUSH
// if mpGameType <> GameTypeFamine then
9014: LD_EXP 1
9018: PUSH
9019: LD_INT 5
9021: NONEQUAL
9022: IFFALSE 9026
// exit ;
9024: GO 9240
// for i := 1 to mpGlobalOilDeposits do
9026: LD_ADDR_VAR 0 6
9030: PUSH
9031: DOUBLE
9032: LD_INT 1
9034: DEC
9035: ST_TO_ADDR
9036: LD_EXP 39
9040: PUSH
9041: FOR_TO
9042: IFFALSE 9238
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9044: LD_EXP 39
9048: PUSH
9049: LD_VAR 0 6
9053: ARRAY
9054: PUSH
9055: LD_INT 1
9057: ARRAY
9058: PPUSH
9059: LD_EXP 39
9063: PUSH
9064: LD_VAR 0 6
9068: ARRAY
9069: PUSH
9070: LD_INT 2
9072: ARRAY
9073: PPUSH
9074: CALL_OW 428
9078: PUSH
9079: LD_VAR 0 1
9083: EQUAL
9084: IFFALSE 9236
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9086: LD_ADDR_VAR 0 7
9090: PUSH
9091: LD_EXP 39
9095: PUSH
9096: LD_VAR 0 6
9100: ARRAY
9101: PUSH
9102: LD_INT 3
9104: ARRAY
9105: ST_TO_ADDR
// value := Dec ( value ) ;
9106: LD_ADDR_VAR 0 7
9110: PUSH
9111: LD_VAR 0 7
9115: PPUSH
9116: CALL 56974 0 1
9120: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9121: LD_ADDR_EXP 39
9125: PUSH
9126: LD_EXP 39
9130: PPUSH
9131: LD_VAR 0 6
9135: PPUSH
9136: LD_EXP 39
9140: PUSH
9141: LD_VAR 0 6
9145: ARRAY
9146: PPUSH
9147: LD_INT 3
9149: PPUSH
9150: LD_VAR 0 7
9154: PPUSH
9155: CALL_OW 1
9159: PPUSH
9160: CALL_OW 1
9164: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9165: LD_VAR 0 1
9169: PPUSH
9170: LD_VAR 0 7
9174: PPUSH
9175: CALL_OW 505
// if value = 0 then
9179: LD_VAR 0 7
9183: PUSH
9184: LD_INT 0
9186: EQUAL
9187: IFFALSE 9236
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9189: LD_EXP 39
9193: PUSH
9194: LD_VAR 0 6
9198: ARRAY
9199: PUSH
9200: LD_INT 1
9202: ARRAY
9203: PPUSH
9204: LD_EXP 39
9208: PUSH
9209: LD_VAR 0 6
9213: ARRAY
9214: PUSH
9215: LD_INT 2
9217: ARRAY
9218: PPUSH
9219: CALL_OW 63
// KillUnit ( building ) ;
9223: LD_VAR 0 1
9227: PPUSH
9228: CALL_OW 66
// exit ;
9232: POP
9233: POP
9234: GO 9240
// end ; end ; end ;
9236: GO 9041
9238: POP
9239: POP
// end ;
9240: LD_VAR 0 5
9244: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9245: LD_INT 0
9247: PPUSH
9248: PPUSH
9249: PPUSH
// if mpGameType <> GameTypeFamine then
9250: LD_EXP 1
9254: PUSH
9255: LD_INT 5
9257: NONEQUAL
9258: IFFALSE 9262
// exit ;
9260: GO 9476
// for i := 1 to mpGlobalSibDeposits do
9262: LD_ADDR_VAR 0 6
9266: PUSH
9267: DOUBLE
9268: LD_INT 1
9270: DEC
9271: ST_TO_ADDR
9272: LD_EXP 40
9276: PUSH
9277: FOR_TO
9278: IFFALSE 9474
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9280: LD_EXP 40
9284: PUSH
9285: LD_VAR 0 6
9289: ARRAY
9290: PUSH
9291: LD_INT 1
9293: ARRAY
9294: PPUSH
9295: LD_EXP 40
9299: PUSH
9300: LD_VAR 0 6
9304: ARRAY
9305: PUSH
9306: LD_INT 2
9308: ARRAY
9309: PPUSH
9310: CALL_OW 428
9314: PUSH
9315: LD_VAR 0 1
9319: EQUAL
9320: IFFALSE 9472
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9322: LD_ADDR_VAR 0 7
9326: PUSH
9327: LD_EXP 40
9331: PUSH
9332: LD_VAR 0 6
9336: ARRAY
9337: PUSH
9338: LD_INT 3
9340: ARRAY
9341: ST_TO_ADDR
// value := Dec ( value ) ;
9342: LD_ADDR_VAR 0 7
9346: PUSH
9347: LD_VAR 0 7
9351: PPUSH
9352: CALL 56974 0 1
9356: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9357: LD_ADDR_EXP 40
9361: PUSH
9362: LD_EXP 40
9366: PPUSH
9367: LD_VAR 0 6
9371: PPUSH
9372: LD_EXP 40
9376: PUSH
9377: LD_VAR 0 6
9381: ARRAY
9382: PPUSH
9383: LD_INT 3
9385: PPUSH
9386: LD_VAR 0 7
9390: PPUSH
9391: CALL_OW 1
9395: PPUSH
9396: CALL_OW 1
9400: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9401: LD_VAR 0 1
9405: PPUSH
9406: LD_VAR 0 7
9410: PPUSH
9411: CALL_OW 505
// if value = 0 then
9415: LD_VAR 0 7
9419: PUSH
9420: LD_INT 0
9422: EQUAL
9423: IFFALSE 9472
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9425: LD_EXP 40
9429: PUSH
9430: LD_VAR 0 6
9434: ARRAY
9435: PUSH
9436: LD_INT 1
9438: ARRAY
9439: PPUSH
9440: LD_EXP 40
9444: PUSH
9445: LD_VAR 0 6
9449: ARRAY
9450: PUSH
9451: LD_INT 2
9453: ARRAY
9454: PPUSH
9455: CALL_OW 63
// KillUnit ( building ) ;
9459: LD_VAR 0 1
9463: PPUSH
9464: CALL_OW 66
// exit ;
9468: POP
9469: POP
9470: GO 9476
// end ; end ; end ;
9472: GO 9277
9474: POP
9475: POP
// end ; end_of_file
9476: LD_VAR 0 5
9480: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
9481: LD_EXP 37
9485: IFFALSE 9824
9487: GO 9489
9489: DISABLE
9490: LD_INT 0
9492: PPUSH
9493: PPUSH
9494: PPUSH
// begin mpKingPoints := [ ] ;
9495: LD_ADDR_EXP 46
9499: PUSH
9500: EMPTY
9501: ST_TO_ADDR
// if mpTeamGame then
9502: LD_EXP 9
9506: IFFALSE 9560
// begin for i := 1 to Count ( mpTeams ) do
9508: LD_ADDR_VAR 0 1
9512: PUSH
9513: DOUBLE
9514: LD_INT 1
9516: DEC
9517: ST_TO_ADDR
9518: LD_EXP 8
9522: PPUSH
9523: CALL 19647 0 1
9527: PUSH
9528: FOR_TO
9529: IFFALSE 9556
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
9531: LD_ADDR_EXP 46
9535: PUSH
9536: LD_EXP 46
9540: PPUSH
9541: LD_VAR 0 1
9545: PPUSH
9546: LD_INT 0
9548: PPUSH
9549: CALL_OW 1
9553: ST_TO_ADDR
9554: GO 9528
9556: POP
9557: POP
// end else
9558: GO 9603
// begin for i := 1 to 8 do
9560: LD_ADDR_VAR 0 1
9564: PUSH
9565: DOUBLE
9566: LD_INT 1
9568: DEC
9569: ST_TO_ADDR
9570: LD_INT 8
9572: PUSH
9573: FOR_TO
9574: IFFALSE 9601
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
9576: LD_ADDR_EXP 46
9580: PUSH
9581: LD_EXP 46
9585: PPUSH
9586: LD_VAR 0 1
9590: PPUSH
9591: LD_INT 0
9593: PPUSH
9594: CALL_OW 1
9598: ST_TO_ADDR
9599: GO 9573
9601: POP
9602: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
9603: LD_ADDR_VAR 0 3
9607: PUSH
9608: LD_INT 50
9610: PPUSH
9611: LD_INT 0
9613: PPUSH
9614: CALL_OW 517
9618: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
9619: LD_ADDR_VAR 0 1
9623: PUSH
9624: DOUBLE
9625: LD_INT 1
9627: DEC
9628: ST_TO_ADDR
9629: LD_VAR 0 3
9633: PUSH
9634: LD_INT 1
9636: ARRAY
9637: PUSH
9638: FOR_TO
9639: IFFALSE 9706
// for j := 1 to 8 do
9641: LD_ADDR_VAR 0 2
9645: PUSH
9646: DOUBLE
9647: LD_INT 1
9649: DEC
9650: ST_TO_ADDR
9651: LD_INT 8
9653: PUSH
9654: FOR_TO
9655: IFFALSE 9702
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
9657: LD_VAR 0 3
9661: PUSH
9662: LD_INT 1
9664: ARRAY
9665: PUSH
9666: LD_VAR 0 1
9670: ARRAY
9671: PPUSH
9672: LD_VAR 0 3
9676: PUSH
9677: LD_INT 2
9679: ARRAY
9680: PUSH
9681: LD_VAR 0 1
9685: ARRAY
9686: PPUSH
9687: LD_VAR 0 2
9691: PPUSH
9692: LD_INT 12
9694: NEG
9695: PPUSH
9696: CALL_OW 330
9700: GO 9654
9702: POP
9703: POP
9704: GO 9638
9706: POP
9707: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
9708: LD_EXP 32
9712: PPUSH
9713: LD_INT 1
9715: PPUSH
9716: CALL_OW 424
// UpdateCounter ;
9720: CALL 10328 0 0
// repeat wait ( 0 0$1 ) ;
9724: LD_INT 35
9726: PPUSH
9727: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9731: LD_ADDR_VAR 0 3
9735: PUSH
9736: LD_EXP 32
9740: PPUSH
9741: LD_INT 3
9743: PUSH
9744: LD_INT 57
9746: PUSH
9747: EMPTY
9748: LIST
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: LD_INT 50
9756: PUSH
9757: EMPTY
9758: LIST
9759: PUSH
9760: LD_INT 2
9762: PUSH
9763: LD_INT 30
9765: PUSH
9766: LD_INT 0
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PUSH
9773: LD_INT 30
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: PPUSH
9793: CALL_OW 70
9797: ST_TO_ADDR
// if not tmp then
9798: LD_VAR 0 3
9802: NOT
9803: IFFALSE 9807
// continue ;
9805: GO 9724
// AddPoints ( tmp ) ;
9807: LD_VAR 0 3
9811: PPUSH
9812: CALL 10006 0 1
// UpdateCounter ;
9816: CALL 10328 0 0
// until false ;
9820: LD_INT 0
9822: IFFALSE 9724
// end ;
9824: PPOPN 3
9826: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
9827: LD_EXP 37
9831: IFFALSE 9839
9833: PUSH
9834: LD_EXP 35
9838: AND
9839: IFFALSE 10003
9841: GO 9843
9843: DISABLE
9844: LD_INT 0
9846: PPUSH
9847: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
9848: LD_ADDR_VAR 0 2
9852: PUSH
9853: LD_INT 50
9855: PPUSH
9856: LD_INT 0
9858: PPUSH
9859: CALL_OW 517
9863: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
9864: LD_ADDR_VAR 0 1
9868: PUSH
9869: DOUBLE
9870: LD_INT 1
9872: DEC
9873: ST_TO_ADDR
9874: LD_VAR 0 2
9878: PUSH
9879: LD_INT 1
9881: ARRAY
9882: PUSH
9883: FOR_TO
9884: IFFALSE 9925
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
9886: LD_VAR 0 2
9890: PUSH
9891: LD_INT 1
9893: ARRAY
9894: PUSH
9895: LD_VAR 0 1
9899: ARRAY
9900: PPUSH
9901: LD_VAR 0 2
9905: PUSH
9906: LD_INT 2
9908: ARRAY
9909: PUSH
9910: LD_VAR 0 1
9914: ARRAY
9915: PPUSH
9916: LD_INT 125
9918: PPUSH
9919: CALL_OW 495
9923: GO 9883
9925: POP
9926: POP
// repeat wait ( mpEmissions ) ;
9927: LD_EXP 35
9931: PPUSH
9932: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
9936: LD_ADDR_VAR 0 1
9940: PUSH
9941: DOUBLE
9942: LD_INT 1
9944: DEC
9945: ST_TO_ADDR
9946: LD_VAR 0 2
9950: PUSH
9951: LD_INT 1
9953: ARRAY
9954: PUSH
9955: FOR_TO
9956: IFFALSE 9997
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
9958: LD_VAR 0 2
9962: PUSH
9963: LD_INT 1
9965: ARRAY
9966: PUSH
9967: LD_VAR 0 1
9971: ARRAY
9972: PPUSH
9973: LD_VAR 0 2
9977: PUSH
9978: LD_INT 2
9980: ARRAY
9981: PUSH
9982: LD_VAR 0 1
9986: ARRAY
9987: PPUSH
9988: LD_INT 15
9990: PPUSH
9991: CALL_OW 495
9995: GO 9955
9997: POP
9998: POP
// until false ;
9999: LD_INT 0
10001: IFFALSE 9927
// end ;
10003: PPOPN 2
10005: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
10006: LD_INT 0
10008: PPUSH
10009: PPUSH
10010: PPUSH
10011: PPUSH
10012: PPUSH
// if mpTeamGame then
10013: LD_EXP 9
10017: IFFALSE 10214
// begin first := depots [ 1 ] ;
10019: LD_ADDR_VAR 0 4
10023: PUSH
10024: LD_VAR 0 1
10028: PUSH
10029: LD_INT 1
10031: ARRAY
10032: ST_TO_ADDR
// side := GetSide ( first ) ;
10033: LD_ADDR_VAR 0 6
10037: PUSH
10038: LD_VAR 0 4
10042: PPUSH
10043: CALL_OW 255
10047: ST_TO_ADDR
// for i := 1 to mpTeams do
10048: LD_ADDR_VAR 0 3
10052: PUSH
10053: DOUBLE
10054: LD_INT 1
10056: DEC
10057: ST_TO_ADDR
10058: LD_EXP 8
10062: PUSH
10063: FOR_TO
10064: IFFALSE 10098
// if side in mpTeams [ i ] then
10066: LD_VAR 0 6
10070: PUSH
10071: LD_EXP 8
10075: PUSH
10076: LD_VAR 0 3
10080: ARRAY
10081: IN
10082: IFFALSE 10096
// begin team := i ;
10084: LD_ADDR_VAR 0 5
10088: PUSH
10089: LD_VAR 0 3
10093: ST_TO_ADDR
// break ;
10094: GO 10098
// end ;
10096: GO 10063
10098: POP
10099: POP
// if not team then
10100: LD_VAR 0 5
10104: NOT
10105: IFFALSE 10109
// exit ;
10107: GO 10323
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
10109: LD_EXP 32
10113: PPUSH
10114: LD_INT 81
10116: PUSH
10117: LD_VAR 0 6
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PPUSH
10126: CALL_OW 70
10130: IFFALSE 10134
// exit ;
10132: GO 10323
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
10134: LD_ADDR_EXP 46
10138: PUSH
10139: LD_EXP 46
10143: PPUSH
10144: LD_VAR 0 5
10148: PPUSH
10149: LD_EXP 46
10153: PUSH
10154: LD_VAR 0 5
10158: ARRAY
10159: PUSH
10160: LD_INT 1
10162: PLUS
10163: PPUSH
10164: CALL_OW 1
10168: ST_TO_ADDR
// for i in mpTeams [ team ] do
10169: LD_ADDR_VAR 0 3
10173: PUSH
10174: LD_EXP 8
10178: PUSH
10179: LD_VAR 0 5
10183: ARRAY
10184: PUSH
10185: FOR_IN
10186: IFFALSE 10210
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
10188: LD_VAR 0 3
10192: PPUSH
10193: LD_EXP 46
10197: PUSH
10198: LD_VAR 0 5
10202: ARRAY
10203: PPUSH
10204: CALL_OW 506
10208: GO 10185
10210: POP
10211: POP
// end else
10212: GO 10323
// begin first := depots [ 1 ] ;
10214: LD_ADDR_VAR 0 4
10218: PUSH
10219: LD_VAR 0 1
10223: PUSH
10224: LD_INT 1
10226: ARRAY
10227: ST_TO_ADDR
// side := GetSide ( first ) ;
10228: LD_ADDR_VAR 0 6
10232: PUSH
10233: LD_VAR 0 4
10237: PPUSH
10238: CALL_OW 255
10242: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
10243: LD_EXP 32
10247: PPUSH
10248: LD_INT 81
10250: PUSH
10251: LD_VAR 0 6
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PPUSH
10260: CALL_OW 70
10264: IFFALSE 10268
// exit ;
10266: GO 10323
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
10268: LD_ADDR_EXP 46
10272: PUSH
10273: LD_EXP 46
10277: PPUSH
10278: LD_VAR 0 6
10282: PPUSH
10283: LD_EXP 46
10287: PUSH
10288: LD_VAR 0 6
10292: ARRAY
10293: PUSH
10294: LD_INT 1
10296: PLUS
10297: PPUSH
10298: CALL_OW 1
10302: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
10303: LD_VAR 0 6
10307: PPUSH
10308: LD_EXP 46
10312: PUSH
10313: LD_VAR 0 6
10317: ARRAY
10318: PPUSH
10319: CALL_OW 506
// end ; end ;
10323: LD_VAR 0 2
10327: RET
// function UpdateCounter ; var i ; begin
10328: LD_INT 0
10330: PPUSH
10331: PPUSH
// result := [ ] ;
10332: LD_ADDR_VAR 0 1
10336: PUSH
10337: EMPTY
10338: ST_TO_ADDR
// if mpTeamGame then
10339: LD_EXP 9
10343: IFFALSE 10410
// begin for i := 1 to mpTeams do
10345: LD_ADDR_VAR 0 2
10349: PUSH
10350: DOUBLE
10351: LD_INT 1
10353: DEC
10354: ST_TO_ADDR
10355: LD_EXP 8
10359: PUSH
10360: FOR_TO
10361: IFFALSE 10406
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
10363: LD_ADDR_VAR 0 1
10367: PUSH
10368: LD_VAR 0 1
10372: PUSH
10373: LD_STRING #KingoftheHill-Team
10375: PUSH
10376: LD_VAR 0 2
10380: PUSH
10381: LD_EXP 46
10385: PUSH
10386: LD_VAR 0 2
10390: ARRAY
10391: PUSH
10392: LD_EXP 33
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: ADD
10403: ST_TO_ADDR
10404: GO 10360
10406: POP
10407: POP
// end else
10408: GO 10483
// begin for i := 1 to 8 do
10410: LD_ADDR_VAR 0 2
10414: PUSH
10415: DOUBLE
10416: LD_INT 1
10418: DEC
10419: ST_TO_ADDR
10420: LD_INT 8
10422: PUSH
10423: FOR_TO
10424: IFFALSE 10481
// if mpSidePositions [ i ] then
10426: LD_EXP 5
10430: PUSH
10431: LD_VAR 0 2
10435: ARRAY
10436: IFFALSE 10479
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
10438: LD_ADDR_VAR 0 1
10442: PUSH
10443: LD_VAR 0 1
10447: PUSH
10448: LD_STRING #KingoftheHill-Player
10450: PUSH
10451: LD_VAR 0 2
10455: PUSH
10456: LD_EXP 46
10460: PUSH
10461: LD_VAR 0 2
10465: ARRAY
10466: PUSH
10467: LD_EXP 33
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: ADD
10478: ST_TO_ADDR
10479: GO 10423
10481: POP
10482: POP
// end ; mpDisplayStrings := result ;
10483: LD_ADDR_EXP 36
10487: PUSH
10488: LD_VAR 0 1
10492: ST_TO_ADDR
// end ;
10493: LD_VAR 0 1
10497: RET
// export function HowMuchPointsKing ( side ) ; begin
10498: LD_INT 0
10500: PPUSH
// result := HowMuchPoints ( side ) ;
10501: LD_ADDR_VAR 0 2
10505: PUSH
10506: LD_VAR 0 1
10510: PPUSH
10511: CALL 10521 0 1
10515: ST_TO_ADDR
// end ;
10516: LD_VAR 0 2
10520: RET
// function HowMuchPoints ( side ) ; var i ; begin
10521: LD_INT 0
10523: PPUSH
10524: PPUSH
// if mpTeamGame then
10525: LD_EXP 9
10529: IFFALSE 10598
// begin for i := 1 to Count ( mpTeams ) do
10531: LD_ADDR_VAR 0 3
10535: PUSH
10536: DOUBLE
10537: LD_INT 1
10539: DEC
10540: ST_TO_ADDR
10541: LD_EXP 8
10545: PPUSH
10546: CALL 19647 0 1
10550: PUSH
10551: FOR_TO
10552: IFFALSE 10594
// begin if side in mpTeams [ i ] then
10554: LD_VAR 0 1
10558: PUSH
10559: LD_EXP 8
10563: PUSH
10564: LD_VAR 0 3
10568: ARRAY
10569: IN
10570: IFFALSE 10592
// begin result := mpKingPoints [ i ] ;
10572: LD_ADDR_VAR 0 2
10576: PUSH
10577: LD_EXP 46
10581: PUSH
10582: LD_VAR 0 3
10586: ARRAY
10587: ST_TO_ADDR
// exit ;
10588: POP
10589: POP
10590: GO 10614
// end ; end ;
10592: GO 10551
10594: POP
10595: POP
// end else
10596: GO 10614
// result := mpKingPoints [ side ] ;
10598: LD_ADDR_VAR 0 2
10602: PUSH
10603: LD_EXP 46
10607: PUSH
10608: LD_VAR 0 1
10612: ARRAY
10613: ST_TO_ADDR
// end ;
10614: LD_VAR 0 2
10618: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
10619: LD_EXP 37
10623: IFFALSE 10631
10625: PUSH
10626: CALL 10966 0 0
10630: AND
10631: IFFALSE 10639
10633: PUSH
10634: LD_OWVAR 4
10638: AND
10639: IFFALSE 10889
10641: GO 10643
10643: DISABLE
10644: LD_INT 0
10646: PPUSH
10647: PPUSH
// begin canWin := false ;
10648: LD_ADDR_VAR 0 2
10652: PUSH
10653: LD_INT 0
10655: ST_TO_ADDR
// if not HasPower ( your_side ) then
10656: LD_OWVAR 2
10660: PPUSH
10661: CALL 11008 0 1
10665: NOT
10666: IFFALSE 10677
// begin Multiplayer_Loose_Message ;
10668: CALL_OW 521
// enable ( mpLose ) ;
10672: LD_INT 102
10674: ENABLE_MARKED
// end else
10675: GO 10889
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
10677: LD_ADDR_VAR 0 2
10681: PUSH
10682: LD_OWVAR 2
10686: PPUSH
10687: CALL 10521 0 1
10691: PUSH
10692: LD_EXP 33
10696: GREATEREQUAL
10697: IFFALSE 10710
10699: PUSH
10700: LD_OWVAR 2
10704: PPUSH
10705: CALL 11008 0 1
10709: AND
10710: IFTRUE 10719
10712: PUSH
10713: CALL 10892 0 0
10717: NOT
10718: OR
10719: ST_TO_ADDR
// for i := 1 to 8 do
10720: LD_ADDR_VAR 0 1
10724: PUSH
10725: DOUBLE
10726: LD_INT 1
10728: DEC
10729: ST_TO_ADDR
10730: LD_INT 8
10732: PUSH
10733: FOR_TO
10734: IFFALSE 10875
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10736: LD_EXP 5
10740: PUSH
10741: LD_VAR 0 1
10745: ARRAY
10746: IFFALSE 10759
10748: PUSH
10749: LD_VAR 0 1
10753: PPUSH
10754: CALL_OW 108
10758: AND
10759: IFFALSE 10773
10761: PUSH
10762: LD_VAR 0 1
10766: PUSH
10767: LD_OWVAR 2
10771: NONEQUAL
10772: AND
10773: IFFALSE 10873
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10775: LD_EXP 6
10779: PUSH
10780: LD_VAR 0 1
10784: ARRAY
10785: NOT
10786: IFTRUE 10834
10788: PUSH
10789: LD_EXP 6
10793: PUSH
10794: LD_VAR 0 1
10798: ARRAY
10799: PUSH
10800: LD_EXP 6
10804: PUSH
10805: LD_OWVAR 2
10809: ARRAY
10810: NONEQUAL
10811: IFFALSE 10833
10813: PUSH
10814: LD_OWVAR 2
10818: PPUSH
10819: LD_VAR 0 1
10823: PPUSH
10824: CALL_OW 81
10828: PUSH
10829: LD_INT 1
10831: NONEQUAL
10832: AND
10833: OR
10834: IFFALSE 10873
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
10836: LD_VAR 0 1
10840: PPUSH
10841: CALL 10521 0 1
10845: PUSH
10846: LD_EXP 33
10850: GREATEREQUAL
10851: IFFALSE 10864
10853: PUSH
10854: LD_VAR 0 1
10858: PPUSH
10859: CALL 11008 0 1
10863: AND
10864: IFFALSE 10873
// begin enable ( mpLose ) ;
10866: LD_INT 102
10868: ENABLE_MARKED
// exit ;
10869: POP
10870: POP
10871: GO 10889
// end ;
10873: GO 10733
10875: POP
10876: POP
// if canWin then
10877: LD_VAR 0 2
10881: IFFALSE 10888
// enable ( mpWin ) else
10883: LD_INT 101
10885: ENABLE_MARKED
10886: GO 10889
// enable ;
10888: ENABLE
// end ; end ;
10889: PPOPN 2
10891: END
// function EnemiesInGame ; var i ; begin
10892: LD_INT 0
10894: PPUSH
10895: PPUSH
// result := false ;
10896: LD_ADDR_VAR 0 1
10900: PUSH
10901: LD_INT 0
10903: ST_TO_ADDR
// for i := 1 to 8 do
10904: LD_ADDR_VAR 0 2
10908: PUSH
10909: DOUBLE
10910: LD_INT 1
10912: DEC
10913: ST_TO_ADDR
10914: LD_INT 8
10916: PUSH
10917: FOR_TO
10918: IFFALSE 10959
// if i <> your_side and HasPower ( i ) then
10920: LD_VAR 0 2
10924: PUSH
10925: LD_OWVAR 2
10929: NONEQUAL
10930: IFFALSE 10943
10932: PUSH
10933: LD_VAR 0 2
10937: PPUSH
10938: CALL 11008 0 1
10942: AND
10943: IFFALSE 10957
// begin result := true ;
10945: LD_ADDR_VAR 0 1
10949: PUSH
10950: LD_INT 1
10952: ST_TO_ADDR
// exit ;
10953: POP
10954: POP
10955: GO 10961
// end ;
10957: GO 10917
10959: POP
10960: POP
// end ;
10961: LD_VAR 0 1
10965: RET
// function CanWinLoose ; begin
10966: LD_INT 0
10968: PPUSH
// result := true ;
10969: LD_ADDR_VAR 0 1
10973: PUSH
10974: LD_INT 1
10976: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10977: CALL_OW 531
10981: IFFALSE 10993
10983: PUSH
10984: CALL_OW 519
10988: PUSH
10989: LD_INT 1
10991: GREATER
10992: AND
10993: IFFALSE 11003
// result := false ;
10995: LD_ADDR_VAR 0 1
10999: PUSH
11000: LD_INT 0
11002: ST_TO_ADDR
// end ;
11003: LD_VAR 0 1
11007: RET
// function HasPower ( i ) ; begin
11008: LD_INT 0
11010: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11011: LD_ADDR_VAR 0 2
11015: PUSH
11016: LD_INT 22
11018: PUSH
11019: LD_VAR 0 1
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 2
11030: PUSH
11031: LD_INT 21
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 33
11043: PUSH
11044: LD_INT 3
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 33
11053: PUSH
11054: LD_INT 5
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PPUSH
11071: CALL_OW 69
11075: ST_TO_ADDR
// end ; end_of_file
11076: LD_VAR 0 2
11080: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
11081: LD_EXP 37
11085: IFFALSE 11093
11087: PUSH
11088: CALL 11303 0 0
11092: AND
11093: IFFALSE 11101
11095: PUSH
11096: LD_OWVAR 4
11100: AND
11101: IFFALSE 11300
11103: GO 11105
11105: DISABLE
11106: LD_INT 0
11108: PPUSH
11109: PPUSH
// begin canWin := false ;
11110: LD_ADDR_VAR 0 2
11114: PUSH
11115: LD_INT 0
11117: ST_TO_ADDR
// if not HasPower ( your_side ) then
11118: LD_OWVAR 2
11122: PPUSH
11123: CALL 11345 0 1
11127: NOT
11128: IFFALSE 11139
// begin Multiplayer_Loose_Message ;
11130: CALL_OW 521
// enable ( mpLose ) ;
11134: LD_INT 102
11136: ENABLE_MARKED
// end else
11137: GO 11300
// begin canWin := true ;
11139: LD_ADDR_VAR 0 2
11143: PUSH
11144: LD_INT 1
11146: ST_TO_ADDR
// for i := 1 to 8 do
11147: LD_ADDR_VAR 0 1
11151: PUSH
11152: DOUBLE
11153: LD_INT 1
11155: DEC
11156: ST_TO_ADDR
11157: LD_INT 8
11159: PUSH
11160: FOR_TO
11161: IFFALSE 11286
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11163: LD_EXP 5
11167: PUSH
11168: LD_VAR 0 1
11172: ARRAY
11173: IFFALSE 11186
11175: PUSH
11176: LD_VAR 0 1
11180: PPUSH
11181: CALL_OW 108
11185: AND
11186: IFFALSE 11200
11188: PUSH
11189: LD_VAR 0 1
11193: PUSH
11194: LD_OWVAR 2
11198: NONEQUAL
11199: AND
11200: IFFALSE 11284
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11202: LD_EXP 6
11206: PUSH
11207: LD_VAR 0 1
11211: ARRAY
11212: NOT
11213: IFTRUE 11261
11215: PUSH
11216: LD_EXP 6
11220: PUSH
11221: LD_VAR 0 1
11225: ARRAY
11226: PUSH
11227: LD_EXP 6
11231: PUSH
11232: LD_OWVAR 2
11236: ARRAY
11237: NONEQUAL
11238: IFFALSE 11260
11240: PUSH
11241: LD_OWVAR 2
11245: PPUSH
11246: LD_VAR 0 1
11250: PPUSH
11251: CALL_OW 81
11255: PUSH
11256: LD_INT 1
11258: NONEQUAL
11259: AND
11260: OR
11261: IFFALSE 11284
// if HasPower ( i ) then
11263: LD_VAR 0 1
11267: PPUSH
11268: CALL 11345 0 1
11272: IFFALSE 11284
// begin canWin := false ;
11274: LD_ADDR_VAR 0 2
11278: PUSH
11279: LD_INT 0
11281: ST_TO_ADDR
// break ;
11282: GO 11286
// end ;
11284: GO 11160
11286: POP
11287: POP
// if canWin then
11288: LD_VAR 0 2
11292: IFFALSE 11299
// enable ( mpWin ) else
11294: LD_INT 101
11296: ENABLE_MARKED
11297: GO 11300
// enable ;
11299: ENABLE
// end ; end ;
11300: PPOPN 2
11302: END
// function CanWinLoose ; begin
11303: LD_INT 0
11305: PPUSH
// result := true ;
11306: LD_ADDR_VAR 0 1
11310: PUSH
11311: LD_INT 1
11313: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11314: CALL_OW 531
11318: IFFALSE 11330
11320: PUSH
11321: CALL_OW 519
11325: PUSH
11326: LD_INT 1
11328: GREATER
11329: AND
11330: IFFALSE 11340
// result := false ;
11332: LD_ADDR_VAR 0 1
11336: PUSH
11337: LD_INT 0
11339: ST_TO_ADDR
// end ;
11340: LD_VAR 0 1
11344: RET
// function HasPower ( i ) ; begin
11345: LD_INT 0
11347: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11348: LD_ADDR_VAR 0 2
11352: PUSH
11353: LD_INT 22
11355: PUSH
11356: LD_VAR 0 1
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 2
11367: PUSH
11368: LD_INT 21
11370: PUSH
11371: LD_INT 1
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 33
11380: PUSH
11381: LD_INT 3
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: LD_INT 33
11390: PUSH
11391: LD_INT 5
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PPUSH
11408: CALL_OW 69
11412: ST_TO_ADDR
// end ; end_of_file
11413: LD_VAR 0 2
11417: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
11418: LD_EXP 37
11422: IFFALSE 11465
11424: GO 11426
11426: DISABLE
11427: LD_INT 0
11429: PPUSH
// begin for i := 1 to 8 do
11430: LD_ADDR_VAR 0 1
11434: PUSH
11435: DOUBLE
11436: LD_INT 1
11438: DEC
11439: ST_TO_ADDR
11440: LD_INT 8
11442: PUSH
11443: FOR_TO
11444: IFFALSE 11463
// SetRestrict ( b_depot , i , state_disabled ) ;
11446: LD_INT 0
11448: PPUSH
11449: LD_VAR 0 1
11453: PPUSH
11454: LD_INT 0
11456: PPUSH
11457: CALL_OW 324
11461: GO 11443
11463: POP
11464: POP
// end ;
11465: PPOPN 1
11467: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
11468: LD_EXP 37
11472: IFFALSE 11480
11474: PUSH
11475: CALL 11690 0 0
11479: AND
11480: IFFALSE 11488
11482: PUSH
11483: LD_OWVAR 4
11487: AND
11488: IFFALSE 11687
11490: GO 11492
11492: DISABLE
11493: LD_INT 0
11495: PPUSH
11496: PPUSH
// begin canWin := false ;
11497: LD_ADDR_VAR 0 2
11501: PUSH
11502: LD_INT 0
11504: ST_TO_ADDR
// if not HasPower ( your_side ) then
11505: LD_OWVAR 2
11509: PPUSH
11510: CALL 11732 0 1
11514: NOT
11515: IFFALSE 11526
// begin Multiplayer_Loose_Message ;
11517: CALL_OW 521
// enable ( mpLose ) ;
11521: LD_INT 102
11523: ENABLE_MARKED
// end else
11524: GO 11687
// begin canWin := true ;
11526: LD_ADDR_VAR 0 2
11530: PUSH
11531: LD_INT 1
11533: ST_TO_ADDR
// for i := 1 to 8 do
11534: LD_ADDR_VAR 0 1
11538: PUSH
11539: DOUBLE
11540: LD_INT 1
11542: DEC
11543: ST_TO_ADDR
11544: LD_INT 8
11546: PUSH
11547: FOR_TO
11548: IFFALSE 11673
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11550: LD_EXP 5
11554: PUSH
11555: LD_VAR 0 1
11559: ARRAY
11560: IFFALSE 11573
11562: PUSH
11563: LD_VAR 0 1
11567: PPUSH
11568: CALL_OW 108
11572: AND
11573: IFFALSE 11587
11575: PUSH
11576: LD_VAR 0 1
11580: PUSH
11581: LD_OWVAR 2
11585: NONEQUAL
11586: AND
11587: IFFALSE 11671
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11589: LD_EXP 6
11593: PUSH
11594: LD_VAR 0 1
11598: ARRAY
11599: NOT
11600: IFTRUE 11648
11602: PUSH
11603: LD_EXP 6
11607: PUSH
11608: LD_VAR 0 1
11612: ARRAY
11613: PUSH
11614: LD_EXP 6
11618: PUSH
11619: LD_OWVAR 2
11623: ARRAY
11624: NONEQUAL
11625: IFFALSE 11647
11627: PUSH
11628: LD_OWVAR 2
11632: PPUSH
11633: LD_VAR 0 1
11637: PPUSH
11638: CALL_OW 81
11642: PUSH
11643: LD_INT 1
11645: NONEQUAL
11646: AND
11647: OR
11648: IFFALSE 11671
// if HasPower ( i ) then
11650: LD_VAR 0 1
11654: PPUSH
11655: CALL 11732 0 1
11659: IFFALSE 11671
// begin canWin := false ;
11661: LD_ADDR_VAR 0 2
11665: PUSH
11666: LD_INT 0
11668: ST_TO_ADDR
// break ;
11669: GO 11673
// end ;
11671: GO 11547
11673: POP
11674: POP
// if canWin then
11675: LD_VAR 0 2
11679: IFFALSE 11686
// enable ( mpWin ) else
11681: LD_INT 101
11683: ENABLE_MARKED
11684: GO 11687
// enable ;
11686: ENABLE
// end ; end ;
11687: PPOPN 2
11689: END
// function CanWinLoose ; begin
11690: LD_INT 0
11692: PPUSH
// result := true ;
11693: LD_ADDR_VAR 0 1
11697: PUSH
11698: LD_INT 1
11700: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11701: CALL_OW 531
11705: IFFALSE 11717
11707: PUSH
11708: CALL_OW 519
11712: PUSH
11713: LD_INT 1
11715: GREATER
11716: AND
11717: IFFALSE 11727
// result := false ;
11719: LD_ADDR_VAR 0 1
11723: PUSH
11724: LD_INT 0
11726: ST_TO_ADDR
// end ;
11727: LD_VAR 0 1
11731: RET
// function HasPower ( i ) ; begin
11732: LD_INT 0
11734: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11735: LD_INT 22
11737: PUSH
11738: LD_VAR 0 1
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 2
11749: PUSH
11750: LD_INT 30
11752: PUSH
11753: LD_INT 0
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: PUSH
11760: LD_INT 30
11762: PUSH
11763: LD_INT 1
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: LIST
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PPUSH
11779: CALL_OW 69
11783: NOT
11784: IFFALSE 11788
// exit ;
11786: GO 11853
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11788: LD_ADDR_VAR 0 2
11792: PUSH
11793: LD_INT 22
11795: PUSH
11796: LD_VAR 0 1
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: LD_INT 2
11807: PUSH
11808: LD_INT 21
11810: PUSH
11811: LD_INT 1
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PUSH
11818: LD_INT 33
11820: PUSH
11821: LD_INT 3
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: LD_INT 33
11830: PUSH
11831: LD_INT 5
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PPUSH
11848: CALL_OW 69
11852: ST_TO_ADDR
// end ; end_of_file
11853: LD_VAR 0 2
11857: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
11858: LD_VAR 0 1
11862: PUSH
11863: LD_INT 200
11865: DOUBLE
11866: GREATEREQUAL
11867: IFFALSE 11875
11869: LD_INT 299
11871: DOUBLE
11872: LESSEQUAL
11873: IFTRUE 11877
11875: GO 11909
11877: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
11878: LD_VAR 0 1
11882: PPUSH
11883: LD_VAR 0 2
11887: PPUSH
11888: LD_VAR 0 3
11892: PPUSH
11893: LD_VAR 0 4
11897: PPUSH
11898: LD_VAR 0 5
11902: PPUSH
11903: CALL 12690 0 5
11907: GO 11986
11909: LD_INT 300
11911: DOUBLE
11912: GREATEREQUAL
11913: IFFALSE 11921
11915: LD_INT 399
11917: DOUBLE
11918: LESSEQUAL
11919: IFTRUE 11923
11921: GO 11985
11923: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
11924: LD_VAR 0 1
11928: PPUSH
11929: LD_VAR 0 2
11933: PPUSH
11934: LD_VAR 0 3
11938: PPUSH
11939: LD_VAR 0 4
11943: PPUSH
11944: LD_VAR 0 5
11948: PPUSH
11949: LD_VAR 0 6
11953: PPUSH
11954: LD_VAR 0 7
11958: PPUSH
11959: LD_VAR 0 8
11963: PPUSH
11964: LD_VAR 0 9
11968: PPUSH
11969: LD_VAR 0 10
11973: PPUSH
11974: LD_VAR 0 11
11978: PPUSH
11979: CALL 61581 0 11
11983: GO 11986
11985: POP
// end ;
11986: PPOPN 11
11988: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
11989: LD_VAR 0 1
11993: PPUSH
11994: LD_VAR 0 2
11998: PPUSH
11999: LD_VAR 0 3
12003: PPUSH
12004: LD_VAR 0 4
12008: PPUSH
12009: LD_VAR 0 5
12013: PPUSH
12014: CALL 12071 0 5
// end ; end_of_file
12018: PPOPN 5
12020: END
// export function SOS_UnitDestroyed ( un ) ; begin
12021: LD_INT 0
12023: PPUSH
// ComRadiation ( un ) ;
12024: LD_VAR 0 1
12028: PPUSH
12029: CALL 13110 0 1
// end ;
12033: LD_VAR 0 2
12037: RET
// export function SOS_UnitKamikazed ( un ) ; begin
12038: LD_INT 0
12040: PPUSH
// ComRadiation ( un ) ;
12041: LD_VAR 0 1
12045: PPUSH
12046: CALL 13110 0 1
// end ;
12050: LD_VAR 0 2
12054: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
12055: LD_INT 0
12057: PPUSH
// end ;
12058: LD_VAR 0 4
12062: RET
// export function SOS_Command ( cmd ) ; begin
12063: LD_INT 0
12065: PPUSH
// end ;
12066: LD_VAR 0 2
12070: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
12071: LD_INT 0
12073: PPUSH
// end ;
12074: LD_VAR 0 6
12078: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
12079: LD_INT 0
12081: PPUSH
12082: PPUSH
12083: PPUSH
12084: PPUSH
// if not vehicle or not factory then
12085: LD_VAR 0 1
12089: NOT
12090: IFTRUE 12099
12092: PUSH
12093: LD_VAR 0 2
12097: NOT
12098: OR
12099: IFFALSE 12103
// exit ;
12101: GO 12685
// if not factoryWaypoints then
12103: LD_EXP 57
12107: NOT
12108: IFFALSE 12112
// exit ;
12110: GO 12685
// for i := 1 to Count ( factoryWaypoints ) do
12112: LD_ADDR_VAR 0 4
12116: PUSH
12117: DOUBLE
12118: LD_INT 1
12120: DEC
12121: ST_TO_ADDR
12122: LD_EXP 57
12126: PPUSH
12127: CALL 19647 0 1
12131: PUSH
12132: FOR_TO
12133: IFFALSE 12683
// if factoryWaypoints [ i ] [ 2 ] = factory then
12135: LD_EXP 57
12139: PUSH
12140: LD_VAR 0 4
12144: ARRAY
12145: PUSH
12146: LD_INT 2
12148: ARRAY
12149: PUSH
12150: LD_VAR 0 2
12154: EQUAL
12155: IFFALSE 12681
// begin if GetControl ( vehicle ) = control_manual then
12157: LD_VAR 0 1
12161: PPUSH
12162: CALL_OW 263
12166: PUSH
12167: LD_INT 1
12169: EQUAL
12170: IFFALSE 12534
// begin driver := IsDrivenBy ( vehicle ) ;
12172: LD_ADDR_VAR 0 5
12176: PUSH
12177: LD_VAR 0 1
12181: PPUSH
12182: CALL_OW 311
12186: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
12187: LD_VAR 0 5
12191: PUSH
12192: LD_EXP 58
12196: IN
12197: IFTRUE 12211
12199: PUSH
12200: LD_VAR 0 1
12204: PUSH
12205: LD_EXP 58
12209: IN
12210: OR
12211: IFFALSE 12217
// exit ;
12213: POP
12214: POP
12215: GO 12685
// if not HasTask ( driver ) then
12217: LD_VAR 0 5
12221: PPUSH
12222: CALL_OW 314
12226: NOT
12227: IFFALSE 12532
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
12229: LD_ADDR_EXP 58
12233: PUSH
12234: LD_EXP 58
12238: PPUSH
12239: LD_VAR 0 5
12243: PPUSH
12244: CALL 55579 0 2
12248: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
12249: LD_ADDR_EXP 58
12253: PUSH
12254: LD_EXP 58
12258: PPUSH
12259: LD_VAR 0 1
12263: PPUSH
12264: CALL 55579 0 2
12268: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
12269: LD_ADDR_VAR 0 6
12273: PUSH
12274: LD_EXP 57
12278: PUSH
12279: LD_VAR 0 4
12283: ARRAY
12284: PUSH
12285: LD_INT 3
12287: ARRAY
12288: PPUSH
12289: LD_EXP 57
12293: PUSH
12294: LD_VAR 0 4
12298: ARRAY
12299: PUSH
12300: LD_INT 4
12302: ARRAY
12303: PPUSH
12304: CALL_OW 428
12308: ST_TO_ADDR
// if hex then
12309: LD_VAR 0 6
12313: IFFALSE 12331
// ComMoveUnit ( driver , hex ) else
12315: LD_VAR 0 5
12319: PPUSH
12320: LD_VAR 0 6
12324: PPUSH
12325: CALL_OW 112
12329: GO 12415
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
12331: LD_VAR 0 1
12335: PPUSH
12336: LD_EXP 57
12340: PUSH
12341: LD_VAR 0 4
12345: ARRAY
12346: PUSH
12347: LD_INT 3
12349: ARRAY
12350: PPUSH
12351: LD_EXP 57
12355: PUSH
12356: LD_VAR 0 4
12360: ARRAY
12361: PUSH
12362: LD_INT 4
12364: ARRAY
12365: PPUSH
12366: CALL_OW 297
12370: PUSH
12371: LD_INT 0
12373: GREATER
12374: IFFALSE 12415
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
12376: LD_VAR 0 5
12380: PPUSH
12381: LD_EXP 57
12385: PUSH
12386: LD_VAR 0 4
12390: ARRAY
12391: PUSH
12392: LD_INT 3
12394: ARRAY
12395: PPUSH
12396: LD_EXP 57
12400: PUSH
12401: LD_VAR 0 4
12405: ARRAY
12406: PUSH
12407: LD_INT 4
12409: ARRAY
12410: PPUSH
12411: CALL_OW 111
// AddComExitVehicle ( driver ) ;
12415: LD_VAR 0 5
12419: PPUSH
12420: CALL_OW 181
// if Multiplayer then
12424: LD_OWVAR 4
12428: IFFALSE 12477
// begin repeat wait ( 10 ) ;
12430: LD_INT 10
12432: PPUSH
12433: CALL_OW 67
// until not IsInUnit ( driver ) ;
12437: LD_VAR 0 5
12441: PPUSH
12442: CALL_OW 310
12446: NOT
12447: IFFALSE 12430
// if not HasTask ( driver ) then
12449: LD_VAR 0 5
12453: PPUSH
12454: CALL_OW 314
12458: NOT
12459: IFFALSE 12475
// ComEnterUnit ( driver , factory ) ;
12461: LD_VAR 0 5
12465: PPUSH
12466: LD_VAR 0 2
12470: PPUSH
12471: CALL_OW 120
// end else
12475: GO 12491
// AddComEnterUnit ( driver , factory ) ;
12477: LD_VAR 0 5
12481: PPUSH
12482: LD_VAR 0 2
12486: PPUSH
12487: CALL_OW 180
// wait ( 0 0$1 ) ;
12491: LD_INT 35
12493: PPUSH
12494: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
12498: LD_ADDR_EXP 58
12502: PUSH
12503: LD_EXP 58
12507: PUSH
12508: LD_VAR 0 5
12512: DIFF
12513: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
12514: LD_ADDR_EXP 58
12518: PUSH
12519: LD_EXP 58
12523: PUSH
12524: LD_VAR 0 1
12528: DIFF
12529: ST_TO_ADDR
// break ;
12530: GO 12683
// end ; end else
12532: GO 12681
// if GetControl ( vehicle ) = control_remote then
12534: LD_VAR 0 1
12538: PPUSH
12539: CALL_OW 263
12543: PUSH
12544: LD_INT 2
12546: EQUAL
12547: IFFALSE 12633
// begin wait ( 0 0$2 ) ;
12549: LD_INT 70
12551: PPUSH
12552: CALL_OW 67
// repeat wait ( 10 ) ;
12556: LD_INT 10
12558: PPUSH
12559: CALL_OW 67
// Connect ( vehicle ) ;
12563: LD_VAR 0 1
12567: PPUSH
12568: CALL 25891 0 1
// until IsControledBy ( vehicle ) ;
12572: LD_VAR 0 1
12576: PPUSH
12577: CALL_OW 312
12581: IFFALSE 12556
// wait ( 10 ) ;
12583: LD_INT 10
12585: PPUSH
12586: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
12590: LD_VAR 0 1
12594: PPUSH
12595: LD_EXP 57
12599: PUSH
12600: LD_VAR 0 4
12604: ARRAY
12605: PUSH
12606: LD_INT 3
12608: ARRAY
12609: PPUSH
12610: LD_EXP 57
12614: PUSH
12615: LD_VAR 0 4
12619: ARRAY
12620: PUSH
12621: LD_INT 4
12623: ARRAY
12624: PPUSH
12625: CALL_OW 111
// break ;
12629: GO 12683
// end else
12631: GO 12681
// begin wait ( 0 0$3 ) ;
12633: LD_INT 105
12635: PPUSH
12636: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
12640: LD_VAR 0 1
12644: PPUSH
12645: LD_EXP 57
12649: PUSH
12650: LD_VAR 0 4
12654: ARRAY
12655: PUSH
12656: LD_INT 3
12658: ARRAY
12659: PPUSH
12660: LD_EXP 57
12664: PUSH
12665: LD_VAR 0 4
12669: ARRAY
12670: PUSH
12671: LD_INT 4
12673: ARRAY
12674: PPUSH
12675: CALL_OW 111
// break ;
12679: GO 12683
// end ; end ;
12681: GO 12132
12683: POP
12684: POP
// end ;
12685: LD_VAR 0 3
12689: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
12690: LD_INT 0
12692: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
12693: LD_VAR 0 1
12697: PUSH
12698: LD_INT 250
12700: EQUAL
12701: IFFALSE 12718
12703: PUSH
12704: LD_VAR 0 2
12708: PPUSH
12709: CALL_OW 264
12713: PUSH
12714: LD_INT 81
12716: EQUAL
12717: AND
12718: IFFALSE 12739
// MinerPlaceMine ( unit , x , y ) ;
12720: LD_VAR 0 2
12724: PPUSH
12725: LD_VAR 0 4
12729: PPUSH
12730: LD_VAR 0 5
12734: PPUSH
12735: CALL 15871 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
12739: LD_VAR 0 1
12743: PUSH
12744: LD_INT 251
12746: EQUAL
12747: IFFALSE 12764
12749: PUSH
12750: LD_VAR 0 2
12754: PPUSH
12755: CALL_OW 264
12759: PUSH
12760: LD_INT 81
12762: EQUAL
12763: AND
12764: IFFALSE 12785
// MinerDetonateMine ( unit , x , y ) ;
12766: LD_VAR 0 2
12770: PPUSH
12771: LD_VAR 0 4
12775: PPUSH
12776: LD_VAR 0 5
12780: PPUSH
12781: CALL 16150 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
12785: LD_VAR 0 1
12789: PUSH
12790: LD_INT 252
12792: EQUAL
12793: IFFALSE 12810
12795: PUSH
12796: LD_VAR 0 2
12800: PPUSH
12801: CALL_OW 264
12805: PUSH
12806: LD_INT 81
12808: EQUAL
12809: AND
12810: IFFALSE 12831
// MinerCreateMinefield ( unit , x , y ) ;
12812: LD_VAR 0 2
12816: PPUSH
12817: LD_VAR 0 4
12821: PPUSH
12822: LD_VAR 0 5
12826: PPUSH
12827: CALL 16569 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
12831: LD_VAR 0 1
12835: PUSH
12836: LD_INT 253
12838: EQUAL
12839: IFFALSE 12856
12841: PUSH
12842: LD_VAR 0 2
12846: PPUSH
12847: CALL_OW 257
12851: PUSH
12852: LD_INT 5
12854: EQUAL
12855: AND
12856: IFFALSE 12877
// ComBinocular ( unit , x , y ) ;
12858: LD_VAR 0 2
12862: PPUSH
12863: LD_VAR 0 4
12867: PPUSH
12868: LD_VAR 0 5
12872: PPUSH
12873: CALL 16944 0 3
// if selectedUnit then
12877: LD_VAR 0 3
12881: IFFALSE 12941
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
12883: LD_VAR 0 1
12887: PUSH
12888: LD_INT 254
12890: EQUAL
12891: IFFALSE 12908
12893: PUSH
12894: LD_VAR 0 2
12898: PPUSH
12899: CALL_OW 264
12903: PUSH
12904: LD_INT 99
12906: EQUAL
12907: AND
12908: IFFALSE 12925
12910: PUSH
12911: LD_VAR 0 3
12915: PPUSH
12916: CALL_OW 263
12920: PUSH
12921: LD_INT 3
12923: EQUAL
12924: AND
12925: IFFALSE 12941
// HackDestroyVehicle ( unit , selectedUnit ) ;
12927: LD_VAR 0 2
12931: PPUSH
12932: LD_VAR 0 3
12936: PPUSH
12937: CALL 15231 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
12941: LD_VAR 0 1
12945: PUSH
12946: LD_INT 255
12948: EQUAL
12949: IFFALSE 12973
12951: PUSH
12952: LD_VAR 0 2
12956: PPUSH
12957: CALL_OW 264
12961: PUSH
12962: LD_INT 14
12964: PUSH
12965: LD_INT 53
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: IN
12972: AND
12973: IFFALSE 12991
12975: PUSH
12976: LD_VAR 0 4
12980: PPUSH
12981: LD_VAR 0 5
12985: PPUSH
12986: CALL_OW 488
12990: AND
12991: IFFALSE 13015
// CutTreeXYR ( unit , x , y , 12 ) ;
12993: LD_VAR 0 2
12997: PPUSH
12998: LD_VAR 0 4
13002: PPUSH
13003: LD_VAR 0 5
13007: PPUSH
13008: LD_INT 12
13010: PPUSH
13011: CALL 13206 0 4
// if cmd = 256 then
13015: LD_VAR 0 1
13019: PUSH
13020: LD_INT 256
13022: EQUAL
13023: IFFALSE 13044
// SetFactoryWaypoint ( unit , x , y ) ;
13025: LD_VAR 0 2
13029: PPUSH
13030: LD_VAR 0 4
13034: PPUSH
13035: LD_VAR 0 5
13039: PPUSH
13040: CALL 61589 0 3
// if cmd = 257 then
13044: LD_VAR 0 1
13048: PUSH
13049: LD_INT 257
13051: EQUAL
13052: IFFALSE 13073
// SetWarehouseGatheringPoint ( unit , x , y ) ;
13054: LD_VAR 0 2
13058: PPUSH
13059: LD_VAR 0 4
13063: PPUSH
13064: LD_VAR 0 5
13068: PPUSH
13069: CALL 62085 0 3
// if cmd = 258 then
13073: LD_VAR 0 1
13077: PUSH
13078: LD_INT 258
13080: EQUAL
13081: IFFALSE 13105
// BurnTreeXYR ( unit , x , y , 8 ) ;
13083: LD_VAR 0 2
13087: PPUSH
13088: LD_VAR 0 4
13092: PPUSH
13093: LD_VAR 0 5
13097: PPUSH
13098: LD_INT 8
13100: PPUSH
13101: CALL 13606 0 4
// end ;
13105: LD_VAR 0 6
13109: RET
// export function ComRadiation ( un ) ; var eff ; begin
13110: LD_INT 0
13112: PPUSH
13113: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
13114: LD_VAR 0 1
13118: PPUSH
13119: CALL_OW 264
13123: PUSH
13124: LD_INT 91
13126: NONEQUAL
13127: IFFALSE 13131
// exit ;
13129: GO 13201
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
13131: LD_INT 68
13133: PPUSH
13134: LD_VAR 0 1
13138: PPUSH
13139: CALL_OW 255
13143: PPUSH
13144: CALL_OW 321
13148: PUSH
13149: LD_INT 2
13151: EQUAL
13152: IFFALSE 13164
// eff := 50 else
13154: LD_ADDR_VAR 0 3
13158: PUSH
13159: LD_INT 50
13161: ST_TO_ADDR
13162: GO 13172
// eff := 25 ;
13164: LD_ADDR_VAR 0 3
13168: PUSH
13169: LD_INT 25
13171: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
13172: LD_VAR 0 1
13176: PPUSH
13177: CALL_OW 250
13181: PPUSH
13182: LD_VAR 0 1
13186: PPUSH
13187: CALL_OW 251
13191: PPUSH
13192: LD_VAR 0 3
13196: PPUSH
13197: CALL_OW 495
// end ;
13201: LD_VAR 0 2
13205: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
13206: LD_INT 0
13208: PPUSH
13209: PPUSH
13210: PPUSH
13211: PPUSH
13212: PPUSH
13213: PPUSH
13214: PPUSH
13215: PPUSH
13216: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
13217: LD_VAR 0 1
13221: PPUSH
13222: CALL_OW 302
13226: NOT
13227: IFTRUE 13246
13229: PUSH
13230: LD_VAR 0 2
13234: PPUSH
13235: LD_VAR 0 3
13239: PPUSH
13240: CALL_OW 488
13244: NOT
13245: OR
13246: IFTRUE 13255
13248: PUSH
13249: LD_VAR 0 4
13253: NOT
13254: OR
13255: IFFALSE 13259
// exit ;
13257: GO 13601
// list := [ ] ;
13259: LD_ADDR_VAR 0 13
13263: PUSH
13264: EMPTY
13265: ST_TO_ADDR
// if x - r < 0 then
13266: LD_VAR 0 2
13270: PUSH
13271: LD_VAR 0 4
13275: MINUS
13276: PUSH
13277: LD_INT 0
13279: LESS
13280: IFFALSE 13292
// min_x := 0 else
13282: LD_ADDR_VAR 0 7
13286: PUSH
13287: LD_INT 0
13289: ST_TO_ADDR
13290: GO 13308
// min_x := x - r ;
13292: LD_ADDR_VAR 0 7
13296: PUSH
13297: LD_VAR 0 2
13301: PUSH
13302: LD_VAR 0 4
13306: MINUS
13307: ST_TO_ADDR
// if y - r < 0 then
13308: LD_VAR 0 3
13312: PUSH
13313: LD_VAR 0 4
13317: MINUS
13318: PUSH
13319: LD_INT 0
13321: LESS
13322: IFFALSE 13334
// min_y := 0 else
13324: LD_ADDR_VAR 0 8
13328: PUSH
13329: LD_INT 0
13331: ST_TO_ADDR
13332: GO 13350
// min_y := y - r ;
13334: LD_ADDR_VAR 0 8
13338: PUSH
13339: LD_VAR 0 3
13343: PUSH
13344: LD_VAR 0 4
13348: MINUS
13349: ST_TO_ADDR
// max_x := x + r ;
13350: LD_ADDR_VAR 0 9
13354: PUSH
13355: LD_VAR 0 2
13359: PUSH
13360: LD_VAR 0 4
13364: PLUS
13365: ST_TO_ADDR
// max_y := y + r ;
13366: LD_ADDR_VAR 0 10
13370: PUSH
13371: LD_VAR 0 3
13375: PUSH
13376: LD_VAR 0 4
13380: PLUS
13381: ST_TO_ADDR
// for _x = min_x to max_x do
13382: LD_ADDR_VAR 0 11
13386: PUSH
13387: DOUBLE
13388: LD_VAR 0 7
13392: DEC
13393: ST_TO_ADDR
13394: LD_VAR 0 9
13398: PUSH
13399: FOR_TO
13400: IFFALSE 13519
// for _y = min_y to max_y do
13402: LD_ADDR_VAR 0 12
13406: PUSH
13407: DOUBLE
13408: LD_VAR 0 8
13412: DEC
13413: ST_TO_ADDR
13414: LD_VAR 0 10
13418: PUSH
13419: FOR_TO
13420: IFFALSE 13515
// begin if not ValidHex ( _x , _y ) then
13422: LD_VAR 0 11
13426: PPUSH
13427: LD_VAR 0 12
13431: PPUSH
13432: CALL_OW 488
13436: NOT
13437: IFFALSE 13441
// continue ;
13439: GO 13419
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
13441: LD_VAR 0 11
13445: PPUSH
13446: LD_VAR 0 12
13450: PPUSH
13451: CALL_OW 351
13455: IFFALSE 13473
13457: PUSH
13458: LD_VAR 0 11
13462: PPUSH
13463: LD_VAR 0 12
13467: PPUSH
13468: CALL_OW 554
13472: AND
13473: IFFALSE 13513
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
13475: LD_ADDR_VAR 0 13
13479: PUSH
13480: LD_VAR 0 13
13484: PPUSH
13485: LD_VAR 0 13
13489: PUSH
13490: LD_INT 1
13492: PLUS
13493: PPUSH
13494: LD_VAR 0 11
13498: PUSH
13499: LD_VAR 0 12
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PPUSH
13508: CALL_OW 2
13512: ST_TO_ADDR
// end ;
13513: GO 13419
13515: POP
13516: POP
13517: GO 13399
13519: POP
13520: POP
// if not list then
13521: LD_VAR 0 13
13525: NOT
13526: IFFALSE 13530
// exit ;
13528: GO 13601
// for i in list do
13530: LD_ADDR_VAR 0 6
13534: PUSH
13535: LD_VAR 0 13
13539: PUSH
13540: FOR_IN
13541: IFFALSE 13599
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
13543: LD_VAR 0 1
13547: PPUSH
13548: LD_STRING M
13550: PUSH
13551: LD_VAR 0 6
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PUSH
13560: LD_VAR 0 6
13564: PUSH
13565: LD_INT 2
13567: ARRAY
13568: PUSH
13569: LD_INT 0
13571: PUSH
13572: LD_INT 0
13574: PUSH
13575: LD_INT 0
13577: PUSH
13578: LD_INT 0
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: PUSH
13590: EMPTY
13591: LIST
13592: PPUSH
13593: CALL_OW 447
13597: GO 13540
13599: POP
13600: POP
// end ;
13601: LD_VAR 0 5
13605: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
13606: LD_INT 0
13608: PPUSH
13609: PPUSH
13610: PPUSH
13611: PPUSH
13612: PPUSH
13613: PPUSH
13614: PPUSH
13615: PPUSH
13616: PPUSH
13617: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
13618: LD_VAR 0 1
13622: PPUSH
13623: CALL_OW 302
13627: NOT
13628: IFTRUE 13647
13630: PUSH
13631: LD_VAR 0 2
13635: PPUSH
13636: LD_VAR 0 3
13640: PPUSH
13641: CALL_OW 488
13645: NOT
13646: OR
13647: IFTRUE 13656
13649: PUSH
13650: LD_VAR 0 4
13654: NOT
13655: OR
13656: IFFALSE 13660
// exit ;
13658: GO 14177
// list := [ ] ;
13660: LD_ADDR_VAR 0 13
13664: PUSH
13665: EMPTY
13666: ST_TO_ADDR
// if x - r < 0 then
13667: LD_VAR 0 2
13671: PUSH
13672: LD_VAR 0 4
13676: MINUS
13677: PUSH
13678: LD_INT 0
13680: LESS
13681: IFFALSE 13693
// min_x := 0 else
13683: LD_ADDR_VAR 0 7
13687: PUSH
13688: LD_INT 0
13690: ST_TO_ADDR
13691: GO 13709
// min_x := x - r ;
13693: LD_ADDR_VAR 0 7
13697: PUSH
13698: LD_VAR 0 2
13702: PUSH
13703: LD_VAR 0 4
13707: MINUS
13708: ST_TO_ADDR
// if y - r < 0 then
13709: LD_VAR 0 3
13713: PUSH
13714: LD_VAR 0 4
13718: MINUS
13719: PUSH
13720: LD_INT 0
13722: LESS
13723: IFFALSE 13735
// min_y := 0 else
13725: LD_ADDR_VAR 0 8
13729: PUSH
13730: LD_INT 0
13732: ST_TO_ADDR
13733: GO 13751
// min_y := y - r ;
13735: LD_ADDR_VAR 0 8
13739: PUSH
13740: LD_VAR 0 3
13744: PUSH
13745: LD_VAR 0 4
13749: MINUS
13750: ST_TO_ADDR
// max_x := x + r ;
13751: LD_ADDR_VAR 0 9
13755: PUSH
13756: LD_VAR 0 2
13760: PUSH
13761: LD_VAR 0 4
13765: PLUS
13766: ST_TO_ADDR
// max_y := y + r ;
13767: LD_ADDR_VAR 0 10
13771: PUSH
13772: LD_VAR 0 3
13776: PUSH
13777: LD_VAR 0 4
13781: PLUS
13782: ST_TO_ADDR
// for _x = min_x to max_x do
13783: LD_ADDR_VAR 0 11
13787: PUSH
13788: DOUBLE
13789: LD_VAR 0 7
13793: DEC
13794: ST_TO_ADDR
13795: LD_VAR 0 9
13799: PUSH
13800: FOR_TO
13801: IFFALSE 13920
// for _y = min_y to max_y do
13803: LD_ADDR_VAR 0 12
13807: PUSH
13808: DOUBLE
13809: LD_VAR 0 8
13813: DEC
13814: ST_TO_ADDR
13815: LD_VAR 0 10
13819: PUSH
13820: FOR_TO
13821: IFFALSE 13916
// begin if not ValidHex ( _x , _y ) then
13823: LD_VAR 0 11
13827: PPUSH
13828: LD_VAR 0 12
13832: PPUSH
13833: CALL_OW 488
13837: NOT
13838: IFFALSE 13842
// continue ;
13840: GO 13820
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
13842: LD_VAR 0 11
13846: PPUSH
13847: LD_VAR 0 12
13851: PPUSH
13852: CALL_OW 351
13856: IFFALSE 13874
13858: PUSH
13859: LD_VAR 0 11
13863: PPUSH
13864: LD_VAR 0 12
13868: PPUSH
13869: CALL_OW 554
13873: AND
13874: IFFALSE 13914
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
13876: LD_ADDR_VAR 0 13
13880: PUSH
13881: LD_VAR 0 13
13885: PPUSH
13886: LD_VAR 0 13
13890: PUSH
13891: LD_INT 1
13893: PLUS
13894: PPUSH
13895: LD_VAR 0 11
13899: PUSH
13900: LD_VAR 0 12
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 2
13913: ST_TO_ADDR
// end ;
13914: GO 13820
13916: POP
13917: POP
13918: GO 13800
13920: POP
13921: POP
// if not list then
13922: LD_VAR 0 13
13926: NOT
13927: IFFALSE 13931
// exit ;
13929: GO 14177
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
13931: LD_ADDR_VAR 0 13
13935: PUSH
13936: LD_VAR 0 1
13940: PPUSH
13941: LD_VAR 0 13
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: LD_INT 1
13951: PPUSH
13952: CALL 23019 0 4
13956: ST_TO_ADDR
// ComStop ( flame ) ;
13957: LD_VAR 0 1
13961: PPUSH
13962: CALL_OW 141
// for i in list do
13966: LD_ADDR_VAR 0 6
13970: PUSH
13971: LD_VAR 0 13
13975: PUSH
13976: FOR_IN
13977: IFFALSE 14008
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
13979: LD_VAR 0 1
13983: PPUSH
13984: LD_VAR 0 6
13988: PUSH
13989: LD_INT 1
13991: ARRAY
13992: PPUSH
13993: LD_VAR 0 6
13997: PUSH
13998: LD_INT 2
14000: ARRAY
14001: PPUSH
14002: CALL_OW 176
14006: GO 13976
14008: POP
14009: POP
// repeat wait ( 0 0$1 ) ;
14010: LD_INT 35
14012: PPUSH
14013: CALL_OW 67
// task := GetTaskList ( flame ) ;
14017: LD_ADDR_VAR 0 14
14021: PUSH
14022: LD_VAR 0 1
14026: PPUSH
14027: CALL_OW 437
14031: ST_TO_ADDR
// if not task then
14032: LD_VAR 0 14
14036: NOT
14037: IFFALSE 14041
// exit ;
14039: GO 14177
// if task [ 1 ] [ 1 ] <> | then
14041: LD_VAR 0 14
14045: PUSH
14046: LD_INT 1
14048: ARRAY
14049: PUSH
14050: LD_INT 1
14052: ARRAY
14053: PUSH
14054: LD_STRING |
14056: NONEQUAL
14057: IFFALSE 14061
// exit ;
14059: GO 14177
// _x := task [ 1 ] [ 2 ] ;
14061: LD_ADDR_VAR 0 11
14065: PUSH
14066: LD_VAR 0 14
14070: PUSH
14071: LD_INT 1
14073: ARRAY
14074: PUSH
14075: LD_INT 2
14077: ARRAY
14078: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
14079: LD_ADDR_VAR 0 12
14083: PUSH
14084: LD_VAR 0 14
14088: PUSH
14089: LD_INT 1
14091: ARRAY
14092: PUSH
14093: LD_INT 3
14095: ARRAY
14096: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
14097: LD_VAR 0 11
14101: PPUSH
14102: LD_VAR 0 12
14106: PPUSH
14107: CALL_OW 351
14111: NOT
14112: IFTRUE 14131
14114: PUSH
14115: LD_VAR 0 11
14119: PPUSH
14120: LD_VAR 0 12
14124: PPUSH
14125: CALL_OW 554
14129: NOT
14130: OR
14131: IFFALSE 14165
// begin task := Delete ( task , 1 ) ;
14133: LD_ADDR_VAR 0 14
14137: PUSH
14138: LD_VAR 0 14
14142: PPUSH
14143: LD_INT 1
14145: PPUSH
14146: CALL_OW 3
14150: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
14151: LD_VAR 0 1
14155: PPUSH
14156: LD_VAR 0 14
14160: PPUSH
14161: CALL_OW 446
// end ; until not HasTask ( flame ) ;
14165: LD_VAR 0 1
14169: PPUSH
14170: CALL_OW 314
14174: NOT
14175: IFFALSE 14010
// end ;
14177: LD_VAR 0 5
14181: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
14182: LD_EXP 47
14186: NOT
14187: IFFALSE 14237
14189: GO 14191
14191: DISABLE
// begin initHack := true ;
14192: LD_ADDR_EXP 47
14196: PUSH
14197: LD_INT 1
14199: ST_TO_ADDR
// hackTanks := [ ] ;
14200: LD_ADDR_EXP 48
14204: PUSH
14205: EMPTY
14206: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
14207: LD_ADDR_EXP 49
14211: PUSH
14212: EMPTY
14213: ST_TO_ADDR
// hackLimit := 3 ;
14214: LD_ADDR_EXP 50
14218: PUSH
14219: LD_INT 3
14221: ST_TO_ADDR
// hackDist := 12 ;
14222: LD_ADDR_EXP 51
14226: PUSH
14227: LD_INT 12
14229: ST_TO_ADDR
// hackCounter := [ ] ;
14230: LD_ADDR_EXP 52
14234: PUSH
14235: EMPTY
14236: ST_TO_ADDR
// end ;
14237: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
14238: LD_EXP 47
14242: IFFALSE 14260
14244: PUSH
14245: LD_INT 34
14247: PUSH
14248: LD_INT 99
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PPUSH
14255: CALL_OW 69
14259: AND
14260: IFFALSE 14513
14262: GO 14264
14264: DISABLE
14265: LD_INT 0
14267: PPUSH
14268: PPUSH
// begin enable ;
14269: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
14270: LD_ADDR_VAR 0 1
14274: PUSH
14275: LD_INT 34
14277: PUSH
14278: LD_INT 99
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PPUSH
14285: CALL_OW 69
14289: PUSH
14290: FOR_IN
14291: IFFALSE 14511
// begin if not i in hackTanks then
14293: LD_VAR 0 1
14297: PUSH
14298: LD_EXP 48
14302: IN
14303: NOT
14304: IFFALSE 14387
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
14306: LD_ADDR_EXP 48
14310: PUSH
14311: LD_EXP 48
14315: PPUSH
14316: LD_EXP 48
14320: PUSH
14321: LD_INT 1
14323: PLUS
14324: PPUSH
14325: LD_VAR 0 1
14329: PPUSH
14330: CALL_OW 1
14334: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
14335: LD_ADDR_EXP 49
14339: PUSH
14340: LD_EXP 49
14344: PPUSH
14345: LD_EXP 49
14349: PUSH
14350: LD_INT 1
14352: PLUS
14353: PPUSH
14354: EMPTY
14355: PPUSH
14356: CALL_OW 1
14360: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
14361: LD_ADDR_EXP 52
14365: PUSH
14366: LD_EXP 52
14370: PPUSH
14371: LD_EXP 52
14375: PUSH
14376: LD_INT 1
14378: PLUS
14379: PPUSH
14380: EMPTY
14381: PPUSH
14382: CALL_OW 1
14386: ST_TO_ADDR
// end ; if not IsOk ( i ) then
14387: LD_VAR 0 1
14391: PPUSH
14392: CALL_OW 302
14396: NOT
14397: IFFALSE 14410
// begin HackUnlinkAll ( i ) ;
14399: LD_VAR 0 1
14403: PPUSH
14404: CALL 14516 0 1
// continue ;
14408: GO 14290
// end ; HackCheckCapturedStatus ( i ) ;
14410: LD_VAR 0 1
14414: PPUSH
14415: CALL 14961 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
14419: LD_ADDR_VAR 0 2
14423: PUSH
14424: LD_INT 81
14426: PUSH
14427: LD_VAR 0 1
14431: PPUSH
14432: CALL_OW 255
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: LD_INT 33
14443: PUSH
14444: LD_INT 3
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 91
14453: PUSH
14454: LD_VAR 0 1
14458: PUSH
14459: LD_EXP 51
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: LIST
14468: PUSH
14469: LD_INT 50
14471: PUSH
14472: EMPTY
14473: LIST
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: PPUSH
14481: CALL_OW 69
14485: ST_TO_ADDR
// if not tmp then
14486: LD_VAR 0 2
14490: NOT
14491: IFFALSE 14495
// continue ;
14493: GO 14290
// HackLink ( i , tmp ) ;
14495: LD_VAR 0 1
14499: PPUSH
14500: LD_VAR 0 2
14504: PPUSH
14505: CALL 14652 0 2
// end ;
14509: GO 14290
14511: POP
14512: POP
// end ;
14513: PPOPN 2
14515: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
14516: LD_INT 0
14518: PPUSH
14519: PPUSH
14520: PPUSH
// if not hack in hackTanks then
14521: LD_VAR 0 1
14525: PUSH
14526: LD_EXP 48
14530: IN
14531: NOT
14532: IFFALSE 14536
// exit ;
14534: GO 14647
// index := GetElementIndex ( hackTanks , hack ) ;
14536: LD_ADDR_VAR 0 4
14540: PUSH
14541: LD_EXP 48
14545: PPUSH
14546: LD_VAR 0 1
14550: PPUSH
14551: CALL 22314 0 2
14555: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
14556: LD_EXP 49
14560: PUSH
14561: LD_VAR 0 4
14565: ARRAY
14566: IFFALSE 14647
// begin for i in hackTanksCaptured [ index ] do
14568: LD_ADDR_VAR 0 3
14572: PUSH
14573: LD_EXP 49
14577: PUSH
14578: LD_VAR 0 4
14582: ARRAY
14583: PUSH
14584: FOR_IN
14585: IFFALSE 14611
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
14587: LD_VAR 0 3
14591: PUSH
14592: LD_INT 1
14594: ARRAY
14595: PPUSH
14596: LD_VAR 0 3
14600: PUSH
14601: LD_INT 2
14603: ARRAY
14604: PPUSH
14605: CALL_OW 235
14609: GO 14584
14611: POP
14612: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
14613: LD_ADDR_EXP 49
14617: PUSH
14618: LD_EXP 49
14622: PPUSH
14623: LD_VAR 0 4
14627: PPUSH
14628: EMPTY
14629: PPUSH
14630: CALL_OW 1
14634: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
14635: LD_VAR 0 1
14639: PPUSH
14640: LD_INT 0
14642: PPUSH
14643: CALL_OW 505
// end ; end ;
14647: LD_VAR 0 2
14651: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
14652: LD_INT 0
14654: PPUSH
14655: PPUSH
14656: PPUSH
// if not hack in hackTanks or not vehicles then
14657: LD_VAR 0 1
14661: PUSH
14662: LD_EXP 48
14666: IN
14667: NOT
14668: IFTRUE 14677
14670: PUSH
14671: LD_VAR 0 2
14675: NOT
14676: OR
14677: IFFALSE 14681
// exit ;
14679: GO 14956
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
14681: LD_ADDR_VAR 0 2
14685: PUSH
14686: LD_VAR 0 1
14690: PPUSH
14691: LD_VAR 0 2
14695: PPUSH
14696: LD_INT 1
14698: PPUSH
14699: LD_INT 1
14701: PPUSH
14702: CALL 22966 0 4
14706: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
14707: LD_ADDR_VAR 0 5
14711: PUSH
14712: LD_EXP 48
14716: PPUSH
14717: LD_VAR 0 1
14721: PPUSH
14722: CALL 22314 0 2
14726: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
14727: LD_EXP 49
14731: PUSH
14732: LD_VAR 0 5
14736: ARRAY
14737: PUSH
14738: LD_EXP 50
14742: LESS
14743: IFFALSE 14932
// begin for i := 1 to vehicles do
14745: LD_ADDR_VAR 0 4
14749: PUSH
14750: DOUBLE
14751: LD_INT 1
14753: DEC
14754: ST_TO_ADDR
14755: LD_VAR 0 2
14759: PUSH
14760: FOR_TO
14761: IFFALSE 14930
// begin if hackTanksCaptured [ index ] = hackLimit then
14763: LD_EXP 49
14767: PUSH
14768: LD_VAR 0 5
14772: ARRAY
14773: PUSH
14774: LD_EXP 50
14778: EQUAL
14779: IFFALSE 14783
// break ;
14781: GO 14930
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
14783: LD_ADDR_EXP 52
14787: PUSH
14788: LD_EXP 52
14792: PPUSH
14793: LD_VAR 0 5
14797: PPUSH
14798: LD_EXP 52
14802: PUSH
14803: LD_VAR 0 5
14807: ARRAY
14808: PUSH
14809: LD_INT 1
14811: PLUS
14812: PPUSH
14813: CALL_OW 1
14817: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
14818: LD_ADDR_EXP 49
14822: PUSH
14823: LD_EXP 49
14827: PPUSH
14828: LD_VAR 0 5
14832: PUSH
14833: LD_EXP 49
14837: PUSH
14838: LD_VAR 0 5
14842: ARRAY
14843: PUSH
14844: LD_INT 1
14846: PLUS
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PPUSH
14852: LD_VAR 0 2
14856: PUSH
14857: LD_VAR 0 4
14861: ARRAY
14862: PUSH
14863: LD_VAR 0 2
14867: PUSH
14868: LD_VAR 0 4
14872: ARRAY
14873: PPUSH
14874: CALL_OW 255
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL 22531 0 3
14887: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
14888: LD_VAR 0 2
14892: PUSH
14893: LD_VAR 0 4
14897: ARRAY
14898: PPUSH
14899: LD_VAR 0 1
14903: PPUSH
14904: CALL_OW 255
14908: PPUSH
14909: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
14913: LD_VAR 0 2
14917: PUSH
14918: LD_VAR 0 4
14922: ARRAY
14923: PPUSH
14924: CALL_OW 141
// end ;
14928: GO 14760
14930: POP
14931: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
14932: LD_VAR 0 1
14936: PPUSH
14937: LD_EXP 49
14941: PUSH
14942: LD_VAR 0 5
14946: ARRAY
14947: PUSH
14948: LD_INT 0
14950: PLUS
14951: PPUSH
14952: CALL_OW 505
// end ;
14956: LD_VAR 0 3
14960: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
14961: LD_INT 0
14963: PPUSH
14964: PPUSH
14965: PPUSH
14966: PPUSH
// if not hack in hackTanks then
14967: LD_VAR 0 1
14971: PUSH
14972: LD_EXP 48
14976: IN
14977: NOT
14978: IFFALSE 14982
// exit ;
14980: GO 15226
// index := GetElementIndex ( hackTanks , hack ) ;
14982: LD_ADDR_VAR 0 4
14986: PUSH
14987: LD_EXP 48
14991: PPUSH
14992: LD_VAR 0 1
14996: PPUSH
14997: CALL 22314 0 2
15001: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
15002: LD_ADDR_VAR 0 3
15006: PUSH
15007: DOUBLE
15008: LD_EXP 49
15012: PUSH
15013: LD_VAR 0 4
15017: ARRAY
15018: INC
15019: ST_TO_ADDR
15020: LD_INT 1
15022: PUSH
15023: FOR_DOWNTO
15024: IFFALSE 15200
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
15026: LD_ADDR_VAR 0 5
15030: PUSH
15031: LD_EXP 49
15035: PUSH
15036: LD_VAR 0 4
15040: ARRAY
15041: PUSH
15042: LD_VAR 0 3
15046: ARRAY
15047: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
15048: LD_VAR 0 5
15052: PUSH
15053: LD_INT 1
15055: ARRAY
15056: PPUSH
15057: CALL_OW 302
15061: NOT
15062: IFTRUE 15090
15064: PUSH
15065: LD_VAR 0 5
15069: PUSH
15070: LD_INT 1
15072: ARRAY
15073: PPUSH
15074: CALL_OW 255
15078: PUSH
15079: LD_VAR 0 1
15083: PPUSH
15084: CALL_OW 255
15088: NONEQUAL
15089: OR
15090: IFFALSE 15198
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
15092: LD_VAR 0 5
15096: PUSH
15097: LD_INT 1
15099: ARRAY
15100: PPUSH
15101: CALL_OW 305
15105: IFFALSE 15133
15107: PUSH
15108: LD_VAR 0 5
15112: PUSH
15113: LD_INT 1
15115: ARRAY
15116: PPUSH
15117: CALL_OW 255
15121: PUSH
15122: LD_VAR 0 1
15126: PPUSH
15127: CALL_OW 255
15131: EQUAL
15132: AND
15133: IFFALSE 15157
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
15135: LD_VAR 0 5
15139: PUSH
15140: LD_INT 1
15142: ARRAY
15143: PPUSH
15144: LD_VAR 0 5
15148: PUSH
15149: LD_INT 2
15151: ARRAY
15152: PPUSH
15153: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
15157: LD_ADDR_EXP 49
15161: PUSH
15162: LD_EXP 49
15166: PPUSH
15167: LD_VAR 0 4
15171: PPUSH
15172: LD_EXP 49
15176: PUSH
15177: LD_VAR 0 4
15181: ARRAY
15182: PPUSH
15183: LD_VAR 0 3
15187: PPUSH
15188: CALL_OW 3
15192: PPUSH
15193: CALL_OW 1
15197: ST_TO_ADDR
// end ; end ;
15198: GO 15023
15200: POP
15201: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15202: LD_VAR 0 1
15206: PPUSH
15207: LD_EXP 49
15211: PUSH
15212: LD_VAR 0 4
15216: ARRAY
15217: PUSH
15218: LD_INT 0
15220: PLUS
15221: PPUSH
15222: CALL_OW 505
// end ;
15226: LD_VAR 0 2
15230: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
15231: LD_INT 0
15233: PPUSH
15234: PPUSH
15235: PPUSH
15236: PPUSH
// if not hack in hackTanks then
15237: LD_VAR 0 1
15241: PUSH
15242: LD_EXP 48
15246: IN
15247: NOT
15248: IFFALSE 15252
// exit ;
15250: GO 15337
// index := GetElementIndex ( hackTanks , hack ) ;
15252: LD_ADDR_VAR 0 5
15256: PUSH
15257: LD_EXP 48
15261: PPUSH
15262: LD_VAR 0 1
15266: PPUSH
15267: CALL 22314 0 2
15271: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
15272: LD_ADDR_VAR 0 4
15276: PUSH
15277: DOUBLE
15278: LD_INT 1
15280: DEC
15281: ST_TO_ADDR
15282: LD_EXP 49
15286: PUSH
15287: LD_VAR 0 5
15291: ARRAY
15292: PUSH
15293: FOR_TO
15294: IFFALSE 15335
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
15296: LD_EXP 49
15300: PUSH
15301: LD_VAR 0 5
15305: ARRAY
15306: PUSH
15307: LD_VAR 0 4
15311: ARRAY
15312: PUSH
15313: LD_INT 1
15315: ARRAY
15316: PUSH
15317: LD_VAR 0 2
15321: EQUAL
15322: IFFALSE 15333
// KillUnit ( vehicle ) ;
15324: LD_VAR 0 2
15328: PPUSH
15329: CALL_OW 66
15333: GO 15293
15335: POP
15336: POP
// end ;
15337: LD_VAR 0 3
15341: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
15342: LD_EXP 53
15346: NOT
15347: IFFALSE 15382
15349: GO 15351
15351: DISABLE
// begin initMiner := true ;
15352: LD_ADDR_EXP 53
15356: PUSH
15357: LD_INT 1
15359: ST_TO_ADDR
// minersList := [ ] ;
15360: LD_ADDR_EXP 54
15364: PUSH
15365: EMPTY
15366: ST_TO_ADDR
// minerMinesList := [ ] ;
15367: LD_ADDR_EXP 55
15371: PUSH
15372: EMPTY
15373: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
15374: LD_ADDR_EXP 56
15378: PUSH
15379: LD_INT 5
15381: ST_TO_ADDR
// end ;
15382: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
15383: LD_EXP 53
15387: IFFALSE 15405
15389: PUSH
15390: LD_INT 34
15392: PUSH
15393: LD_INT 81
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PPUSH
15400: CALL_OW 69
15404: AND
15405: IFFALSE 15868
15407: GO 15409
15409: DISABLE
15410: LD_INT 0
15412: PPUSH
15413: PPUSH
15414: PPUSH
15415: PPUSH
// begin enable ;
15416: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
15417: LD_ADDR_VAR 0 1
15421: PUSH
15422: LD_INT 34
15424: PUSH
15425: LD_INT 81
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PPUSH
15432: CALL_OW 69
15436: PUSH
15437: FOR_IN
15438: IFFALSE 15510
// begin if not i in minersList then
15440: LD_VAR 0 1
15444: PUSH
15445: LD_EXP 54
15449: IN
15450: NOT
15451: IFFALSE 15508
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
15453: LD_ADDR_EXP 54
15457: PUSH
15458: LD_EXP 54
15462: PPUSH
15463: LD_EXP 54
15467: PUSH
15468: LD_INT 1
15470: PLUS
15471: PPUSH
15472: LD_VAR 0 1
15476: PPUSH
15477: CALL_OW 1
15481: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
15482: LD_ADDR_EXP 55
15486: PUSH
15487: LD_EXP 55
15491: PPUSH
15492: LD_EXP 55
15496: PUSH
15497: LD_INT 1
15499: PLUS
15500: PPUSH
15501: EMPTY
15502: PPUSH
15503: CALL_OW 1
15507: ST_TO_ADDR
// end end ;
15508: GO 15437
15510: POP
15511: POP
// for i := minerMinesList downto 1 do
15512: LD_ADDR_VAR 0 1
15516: PUSH
15517: DOUBLE
15518: LD_EXP 55
15522: INC
15523: ST_TO_ADDR
15524: LD_INT 1
15526: PUSH
15527: FOR_DOWNTO
15528: IFFALSE 15866
// begin if IsLive ( minersList [ i ] ) then
15530: LD_EXP 54
15534: PUSH
15535: LD_VAR 0 1
15539: ARRAY
15540: PPUSH
15541: CALL_OW 300
15545: IFFALSE 15573
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
15547: LD_EXP 54
15551: PUSH
15552: LD_VAR 0 1
15556: ARRAY
15557: PPUSH
15558: LD_EXP 55
15562: PUSH
15563: LD_VAR 0 1
15567: ARRAY
15568: PPUSH
15569: CALL_OW 505
// if not minerMinesList [ i ] then
15573: LD_EXP 55
15577: PUSH
15578: LD_VAR 0 1
15582: ARRAY
15583: NOT
15584: IFFALSE 15588
// continue ;
15586: GO 15527
// for j := minerMinesList [ i ] downto 1 do
15588: LD_ADDR_VAR 0 2
15592: PUSH
15593: DOUBLE
15594: LD_EXP 55
15598: PUSH
15599: LD_VAR 0 1
15603: ARRAY
15604: INC
15605: ST_TO_ADDR
15606: LD_INT 1
15608: PUSH
15609: FOR_DOWNTO
15610: IFFALSE 15862
// begin side := GetSide ( minersList [ i ] ) ;
15612: LD_ADDR_VAR 0 3
15616: PUSH
15617: LD_EXP 54
15621: PUSH
15622: LD_VAR 0 1
15626: ARRAY
15627: PPUSH
15628: CALL_OW 255
15632: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
15633: LD_ADDR_VAR 0 4
15637: PUSH
15638: LD_EXP 55
15642: PUSH
15643: LD_VAR 0 1
15647: ARRAY
15648: PUSH
15649: LD_VAR 0 2
15653: ARRAY
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: PPUSH
15659: LD_EXP 55
15663: PUSH
15664: LD_VAR 0 1
15668: ARRAY
15669: PUSH
15670: LD_VAR 0 2
15674: ARRAY
15675: PUSH
15676: LD_INT 2
15678: ARRAY
15679: PPUSH
15680: CALL_OW 428
15684: ST_TO_ADDR
// if not tmp then
15685: LD_VAR 0 4
15689: NOT
15690: IFFALSE 15694
// continue ;
15692: GO 15609
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
15694: LD_VAR 0 4
15698: PUSH
15699: LD_INT 81
15701: PUSH
15702: LD_VAR 0 3
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PPUSH
15711: CALL_OW 69
15715: IN
15716: IFFALSE 15766
15718: PUSH
15719: LD_EXP 55
15723: PUSH
15724: LD_VAR 0 1
15728: ARRAY
15729: PUSH
15730: LD_VAR 0 2
15734: ARRAY
15735: PUSH
15736: LD_INT 1
15738: ARRAY
15739: PPUSH
15740: LD_EXP 55
15744: PUSH
15745: LD_VAR 0 1
15749: ARRAY
15750: PUSH
15751: LD_VAR 0 2
15755: ARRAY
15756: PUSH
15757: LD_INT 2
15759: ARRAY
15760: PPUSH
15761: CALL_OW 458
15765: AND
15766: IFFALSE 15860
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
15768: LD_EXP 55
15772: PUSH
15773: LD_VAR 0 1
15777: ARRAY
15778: PUSH
15779: LD_VAR 0 2
15783: ARRAY
15784: PUSH
15785: LD_INT 1
15787: ARRAY
15788: PPUSH
15789: LD_EXP 55
15793: PUSH
15794: LD_VAR 0 1
15798: ARRAY
15799: PUSH
15800: LD_VAR 0 2
15804: ARRAY
15805: PUSH
15806: LD_INT 2
15808: ARRAY
15809: PPUSH
15810: LD_VAR 0 3
15814: PPUSH
15815: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
15819: LD_ADDR_EXP 55
15823: PUSH
15824: LD_EXP 55
15828: PPUSH
15829: LD_VAR 0 1
15833: PPUSH
15834: LD_EXP 55
15838: PUSH
15839: LD_VAR 0 1
15843: ARRAY
15844: PPUSH
15845: LD_VAR 0 2
15849: PPUSH
15850: CALL_OW 3
15854: PPUSH
15855: CALL_OW 1
15859: ST_TO_ADDR
// end ; end ;
15860: GO 15609
15862: POP
15863: POP
// end ;
15864: GO 15527
15866: POP
15867: POP
// end ;
15868: PPOPN 4
15870: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
15871: LD_INT 0
15873: PPUSH
15874: PPUSH
// result := false ;
15875: LD_ADDR_VAR 0 4
15879: PUSH
15880: LD_INT 0
15882: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
15883: LD_VAR 0 1
15887: PPUSH
15888: CALL_OW 264
15892: PUSH
15893: LD_INT 81
15895: EQUAL
15896: NOT
15897: IFFALSE 15901
// exit ;
15899: GO 16145
// index := GetElementIndex ( minersList , unit ) ;
15901: LD_ADDR_VAR 0 5
15905: PUSH
15906: LD_EXP 54
15910: PPUSH
15911: LD_VAR 0 1
15915: PPUSH
15916: CALL 22314 0 2
15920: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
15921: LD_EXP 55
15925: PUSH
15926: LD_VAR 0 5
15930: ARRAY
15931: PUSH
15932: LD_EXP 56
15936: GREATEREQUAL
15937: IFFALSE 15941
// exit ;
15939: GO 16145
// ComMoveXY ( unit , x , y ) ;
15941: LD_VAR 0 1
15945: PPUSH
15946: LD_VAR 0 2
15950: PPUSH
15951: LD_VAR 0 3
15955: PPUSH
15956: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15960: LD_INT 35
15962: PPUSH
15963: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
15967: LD_VAR 0 1
15971: PPUSH
15972: LD_VAR 0 2
15976: PPUSH
15977: LD_VAR 0 3
15981: PPUSH
15982: CALL 54360 0 3
15986: NOT
15987: IFFALSE 16000
15989: PUSH
15990: LD_VAR 0 1
15994: PPUSH
15995: CALL_OW 314
15999: AND
16000: IFFALSE 16004
// exit ;
16002: GO 16145
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
16004: LD_VAR 0 2
16008: PPUSH
16009: LD_VAR 0 3
16013: PPUSH
16014: CALL_OW 428
16018: PUSH
16019: LD_VAR 0 1
16023: EQUAL
16024: IFFALSE 16038
16026: PUSH
16027: LD_VAR 0 1
16031: PPUSH
16032: CALL_OW 314
16036: NOT
16037: AND
16038: IFFALSE 15960
// PlaySoundXY ( x , y , PlantMine ) ;
16040: LD_VAR 0 2
16044: PPUSH
16045: LD_VAR 0 3
16049: PPUSH
16050: LD_STRING PlantMine
16052: PPUSH
16053: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
16057: LD_VAR 0 2
16061: PPUSH
16062: LD_VAR 0 3
16066: PPUSH
16067: LD_VAR 0 1
16071: PPUSH
16072: CALL_OW 255
16076: PPUSH
16077: LD_INT 0
16079: PPUSH
16080: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
16084: LD_ADDR_EXP 55
16088: PUSH
16089: LD_EXP 55
16093: PPUSH
16094: LD_VAR 0 5
16098: PUSH
16099: LD_EXP 55
16103: PUSH
16104: LD_VAR 0 5
16108: ARRAY
16109: PUSH
16110: LD_INT 1
16112: PLUS
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PPUSH
16118: LD_VAR 0 2
16122: PUSH
16123: LD_VAR 0 3
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PPUSH
16132: CALL 22531 0 3
16136: ST_TO_ADDR
// result := true ;
16137: LD_ADDR_VAR 0 4
16141: PUSH
16142: LD_INT 1
16144: ST_TO_ADDR
// end ;
16145: LD_VAR 0 4
16149: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
16150: LD_INT 0
16152: PPUSH
16153: PPUSH
16154: PPUSH
// if not unit in minersList then
16155: LD_VAR 0 1
16159: PUSH
16160: LD_EXP 54
16164: IN
16165: NOT
16166: IFFALSE 16170
// exit ;
16168: GO 16564
// index := GetElementIndex ( minersList , unit ) ;
16170: LD_ADDR_VAR 0 6
16174: PUSH
16175: LD_EXP 54
16179: PPUSH
16180: LD_VAR 0 1
16184: PPUSH
16185: CALL 22314 0 2
16189: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
16190: LD_ADDR_VAR 0 5
16194: PUSH
16195: DOUBLE
16196: LD_EXP 55
16200: PUSH
16201: LD_VAR 0 6
16205: ARRAY
16206: INC
16207: ST_TO_ADDR
16208: LD_INT 1
16210: PUSH
16211: FOR_DOWNTO
16212: IFFALSE 16375
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
16214: LD_EXP 55
16218: PUSH
16219: LD_VAR 0 6
16223: ARRAY
16224: PUSH
16225: LD_VAR 0 5
16229: ARRAY
16230: PUSH
16231: LD_INT 1
16233: ARRAY
16234: PUSH
16235: LD_VAR 0 2
16239: EQUAL
16240: IFFALSE 16270
16242: PUSH
16243: LD_EXP 55
16247: PUSH
16248: LD_VAR 0 6
16252: ARRAY
16253: PUSH
16254: LD_VAR 0 5
16258: ARRAY
16259: PUSH
16260: LD_INT 2
16262: ARRAY
16263: PUSH
16264: LD_VAR 0 3
16268: EQUAL
16269: AND
16270: IFFALSE 16373
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
16272: LD_EXP 55
16276: PUSH
16277: LD_VAR 0 6
16281: ARRAY
16282: PUSH
16283: LD_VAR 0 5
16287: ARRAY
16288: PUSH
16289: LD_INT 1
16291: ARRAY
16292: PPUSH
16293: LD_EXP 55
16297: PUSH
16298: LD_VAR 0 6
16302: ARRAY
16303: PUSH
16304: LD_VAR 0 5
16308: ARRAY
16309: PUSH
16310: LD_INT 2
16312: ARRAY
16313: PPUSH
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 255
16323: PPUSH
16324: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
16328: LD_ADDR_EXP 55
16332: PUSH
16333: LD_EXP 55
16337: PPUSH
16338: LD_VAR 0 6
16342: PPUSH
16343: LD_EXP 55
16347: PUSH
16348: LD_VAR 0 6
16352: ARRAY
16353: PPUSH
16354: LD_VAR 0 5
16358: PPUSH
16359: CALL_OW 3
16363: PPUSH
16364: CALL_OW 1
16368: ST_TO_ADDR
// exit ;
16369: POP
16370: POP
16371: GO 16564
// end ; end ;
16373: GO 16211
16375: POP
16376: POP
// for i := minerMinesList [ index ] downto 1 do
16377: LD_ADDR_VAR 0 5
16381: PUSH
16382: DOUBLE
16383: LD_EXP 55
16387: PUSH
16388: LD_VAR 0 6
16392: ARRAY
16393: INC
16394: ST_TO_ADDR
16395: LD_INT 1
16397: PUSH
16398: FOR_DOWNTO
16399: IFFALSE 16562
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
16401: LD_EXP 55
16405: PUSH
16406: LD_VAR 0 6
16410: ARRAY
16411: PUSH
16412: LD_VAR 0 5
16416: ARRAY
16417: PUSH
16418: LD_INT 1
16420: ARRAY
16421: PPUSH
16422: LD_EXP 55
16426: PUSH
16427: LD_VAR 0 6
16431: ARRAY
16432: PUSH
16433: LD_VAR 0 5
16437: ARRAY
16438: PUSH
16439: LD_INT 2
16441: ARRAY
16442: PPUSH
16443: LD_VAR 0 2
16447: PPUSH
16448: LD_VAR 0 3
16452: PPUSH
16453: CALL_OW 298
16457: PUSH
16458: LD_INT 6
16460: LESS
16461: IFFALSE 16560
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
16463: LD_EXP 55
16467: PUSH
16468: LD_VAR 0 6
16472: ARRAY
16473: PUSH
16474: LD_VAR 0 5
16478: ARRAY
16479: PUSH
16480: LD_INT 1
16482: ARRAY
16483: PPUSH
16484: LD_EXP 55
16488: PUSH
16489: LD_VAR 0 6
16493: ARRAY
16494: PUSH
16495: LD_VAR 0 5
16499: ARRAY
16500: PUSH
16501: LD_INT 2
16503: ARRAY
16504: PPUSH
16505: LD_VAR 0 1
16509: PPUSH
16510: CALL_OW 255
16514: PPUSH
16515: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
16519: LD_ADDR_EXP 55
16523: PUSH
16524: LD_EXP 55
16528: PPUSH
16529: LD_VAR 0 6
16533: PPUSH
16534: LD_EXP 55
16538: PUSH
16539: LD_VAR 0 6
16543: ARRAY
16544: PPUSH
16545: LD_VAR 0 5
16549: PPUSH
16550: CALL_OW 3
16554: PPUSH
16555: CALL_OW 1
16559: ST_TO_ADDR
// end ; end ;
16560: GO 16398
16562: POP
16563: POP
// end ;
16564: LD_VAR 0 4
16568: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
16569: LD_INT 0
16571: PPUSH
16572: PPUSH
16573: PPUSH
16574: PPUSH
16575: PPUSH
16576: PPUSH
16577: PPUSH
16578: PPUSH
16579: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
16580: LD_VAR 0 1
16584: PPUSH
16585: CALL_OW 264
16589: PUSH
16590: LD_INT 81
16592: EQUAL
16593: NOT
16594: IFTRUE 16609
16596: PUSH
16597: LD_VAR 0 1
16601: PUSH
16602: LD_EXP 54
16606: IN
16607: NOT
16608: OR
16609: IFFALSE 16613
// exit ;
16611: GO 16939
// index := GetElementIndex ( minersList , unit ) ;
16613: LD_ADDR_VAR 0 6
16617: PUSH
16618: LD_EXP 54
16622: PPUSH
16623: LD_VAR 0 1
16627: PPUSH
16628: CALL 22314 0 2
16632: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
16633: LD_ADDR_VAR 0 8
16637: PUSH
16638: LD_EXP 56
16642: PUSH
16643: LD_EXP 55
16647: PUSH
16648: LD_VAR 0 6
16652: ARRAY
16653: MINUS
16654: ST_TO_ADDR
// if not minesFreeAmount then
16655: LD_VAR 0 8
16659: NOT
16660: IFFALSE 16664
// exit ;
16662: GO 16939
// tmp := [ ] ;
16664: LD_ADDR_VAR 0 7
16668: PUSH
16669: EMPTY
16670: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
16671: LD_ADDR_VAR 0 5
16675: PUSH
16676: DOUBLE
16677: LD_INT 1
16679: DEC
16680: ST_TO_ADDR
16681: LD_VAR 0 8
16685: PUSH
16686: FOR_TO
16687: IFFALSE 16886
// begin _d := rand ( 0 , 5 ) ;
16689: LD_ADDR_VAR 0 11
16693: PUSH
16694: LD_INT 0
16696: PPUSH
16697: LD_INT 5
16699: PPUSH
16700: CALL_OW 12
16704: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
16705: LD_ADDR_VAR 0 12
16709: PUSH
16710: LD_INT 2
16712: PPUSH
16713: LD_INT 6
16715: PPUSH
16716: CALL_OW 12
16720: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
16721: LD_ADDR_VAR 0 9
16725: PUSH
16726: LD_VAR 0 2
16730: PPUSH
16731: LD_VAR 0 11
16735: PPUSH
16736: LD_VAR 0 12
16740: PPUSH
16741: CALL_OW 272
16745: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
16746: LD_ADDR_VAR 0 10
16750: PUSH
16751: LD_VAR 0 3
16755: PPUSH
16756: LD_VAR 0 11
16760: PPUSH
16761: LD_VAR 0 12
16765: PPUSH
16766: CALL_OW 273
16770: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
16771: LD_VAR 0 9
16775: PPUSH
16776: LD_VAR 0 10
16780: PPUSH
16781: CALL_OW 488
16785: IFFALSE 16809
16787: PUSH
16788: LD_VAR 0 9
16792: PUSH
16793: LD_VAR 0 10
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_VAR 0 7
16806: IN
16807: NOT
16808: AND
16809: IFFALSE 16828
16811: PUSH
16812: LD_VAR 0 9
16816: PPUSH
16817: LD_VAR 0 10
16821: PPUSH
16822: CALL_OW 458
16826: NOT
16827: AND
16828: IFFALSE 16870
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
16830: LD_ADDR_VAR 0 7
16834: PUSH
16835: LD_VAR 0 7
16839: PPUSH
16840: LD_VAR 0 7
16844: PUSH
16845: LD_INT 1
16847: PLUS
16848: PPUSH
16849: LD_VAR 0 9
16853: PUSH
16854: LD_VAR 0 10
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PPUSH
16863: CALL_OW 1
16867: ST_TO_ADDR
16868: GO 16884
// i := i - 1 ;
16870: LD_ADDR_VAR 0 5
16874: PUSH
16875: LD_VAR 0 5
16879: PUSH
16880: LD_INT 1
16882: MINUS
16883: ST_TO_ADDR
// end ;
16884: GO 16686
16886: POP
16887: POP
// for i in tmp do
16888: LD_ADDR_VAR 0 5
16892: PUSH
16893: LD_VAR 0 7
16897: PUSH
16898: FOR_IN
16899: IFFALSE 16937
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
16901: LD_VAR 0 1
16905: PPUSH
16906: LD_VAR 0 5
16910: PUSH
16911: LD_INT 1
16913: ARRAY
16914: PPUSH
16915: LD_VAR 0 5
16919: PUSH
16920: LD_INT 2
16922: ARRAY
16923: PPUSH
16924: CALL 15871 0 3
16928: NOT
16929: IFFALSE 16935
// exit ;
16931: POP
16932: POP
16933: GO 16939
16935: GO 16898
16937: POP
16938: POP
// end ;
16939: LD_VAR 0 4
16943: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
16944: LD_INT 0
16946: PPUSH
16947: PPUSH
16948: PPUSH
16949: PPUSH
16950: PPUSH
16951: PPUSH
16952: PPUSH
16953: PPUSH
16954: PPUSH
// if GetClass ( unit ) <> class_sniper then
16955: LD_VAR 0 1
16959: PPUSH
16960: CALL_OW 257
16964: PUSH
16965: LD_INT 5
16967: NONEQUAL
16968: IFFALSE 16972
// exit ;
16970: GO 17442
// dist := 8 ;
16972: LD_ADDR_VAR 0 5
16976: PUSH
16977: LD_INT 8
16979: ST_TO_ADDR
// viewRange := 12 ;
16980: LD_ADDR_VAR 0 8
16984: PUSH
16985: LD_INT 12
16987: ST_TO_ADDR
// side := GetSide ( unit ) ;
16988: LD_ADDR_VAR 0 6
16992: PUSH
16993: LD_VAR 0 1
16997: PPUSH
16998: CALL_OW 255
17002: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
17003: LD_INT 61
17005: PPUSH
17006: LD_VAR 0 6
17010: PPUSH
17011: CALL_OW 321
17015: PUSH
17016: LD_INT 2
17018: EQUAL
17019: IFFALSE 17029
// viewRange := 16 ;
17021: LD_ADDR_VAR 0 8
17025: PUSH
17026: LD_INT 16
17028: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
17029: LD_VAR 0 1
17033: PPUSH
17034: LD_VAR 0 2
17038: PPUSH
17039: LD_VAR 0 3
17043: PPUSH
17044: CALL_OW 297
17048: PUSH
17049: LD_VAR 0 5
17053: GREATER
17054: IFFALSE 17133
// begin ComMoveXY ( unit , x , y ) ;
17056: LD_VAR 0 1
17060: PPUSH
17061: LD_VAR 0 2
17065: PPUSH
17066: LD_VAR 0 3
17070: PPUSH
17071: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17075: LD_INT 35
17077: PPUSH
17078: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
17082: LD_VAR 0 1
17086: PPUSH
17087: LD_VAR 0 2
17091: PPUSH
17092: LD_VAR 0 3
17096: PPUSH
17097: CALL 54360 0 3
17101: NOT
17102: IFFALSE 17106
// exit ;
17104: GO 17442
// until GetDistUnitXY ( unit , x , y ) < dist ;
17106: LD_VAR 0 1
17110: PPUSH
17111: LD_VAR 0 2
17115: PPUSH
17116: LD_VAR 0 3
17120: PPUSH
17121: CALL_OW 297
17125: PUSH
17126: LD_VAR 0 5
17130: LESS
17131: IFFALSE 17075
// end ; ComTurnXY ( unit , x , y ) ;
17133: LD_VAR 0 1
17137: PPUSH
17138: LD_VAR 0 2
17142: PPUSH
17143: LD_VAR 0 3
17147: PPUSH
17148: CALL_OW 118
// repeat if Multiplayer then
17152: LD_OWVAR 4
17156: IFFALSE 17167
// wait ( 35 ) else
17158: LD_INT 35
17160: PPUSH
17161: CALL_OW 67
17165: GO 17174
// wait ( 5 ) ;
17167: LD_INT 5
17169: PPUSH
17170: CALL_OW 67
// _d := GetDir ( unit ) ;
17174: LD_ADDR_VAR 0 11
17178: PUSH
17179: LD_VAR 0 1
17183: PPUSH
17184: CALL_OW 254
17188: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
17189: LD_ADDR_VAR 0 7
17193: PUSH
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL_OW 250
17203: PPUSH
17204: LD_VAR 0 1
17208: PPUSH
17209: CALL_OW 251
17213: PPUSH
17214: LD_VAR 0 2
17218: PPUSH
17219: LD_VAR 0 3
17223: PPUSH
17224: CALL 56996 0 4
17228: ST_TO_ADDR
// until dir = _d ;
17229: LD_VAR 0 7
17233: PUSH
17234: LD_VAR 0 11
17238: EQUAL
17239: IFFALSE 17152
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
17241: LD_ADDR_VAR 0 9
17245: PUSH
17246: LD_VAR 0 1
17250: PPUSH
17251: CALL_OW 250
17255: PPUSH
17256: LD_VAR 0 7
17260: PPUSH
17261: LD_VAR 0 5
17265: PPUSH
17266: CALL_OW 272
17270: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
17271: LD_ADDR_VAR 0 10
17275: PUSH
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL_OW 251
17285: PPUSH
17286: LD_VAR 0 7
17290: PPUSH
17291: LD_VAR 0 5
17295: PPUSH
17296: CALL_OW 273
17300: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17301: LD_VAR 0 9
17305: PPUSH
17306: LD_VAR 0 10
17310: PPUSH
17311: CALL_OW 488
17315: NOT
17316: IFFALSE 17320
// exit ;
17318: GO 17442
// ComAnimCustom ( unit , 1 ) ;
17320: LD_VAR 0 1
17324: PPUSH
17325: LD_INT 1
17327: PPUSH
17328: CALL_OW 592
// p := 0 ;
17332: LD_ADDR_VAR 0 12
17336: PUSH
17337: LD_INT 0
17339: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
17340: LD_VAR 0 9
17344: PPUSH
17345: LD_VAR 0 10
17349: PPUSH
17350: LD_VAR 0 6
17354: PPUSH
17355: LD_VAR 0 8
17359: PPUSH
17360: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
17364: LD_INT 35
17366: PPUSH
17367: CALL_OW 67
// p := Inc ( p ) ;
17371: LD_ADDR_VAR 0 12
17375: PUSH
17376: LD_VAR 0 12
17380: PPUSH
17381: CALL 56952 0 1
17385: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
17386: LD_VAR 0 12
17390: PUSH
17391: LD_INT 3
17393: EQUAL
17394: IFTRUE 17408
17396: PUSH
17397: LD_VAR 0 1
17401: PPUSH
17402: CALL_OW 302
17406: NOT
17407: OR
17408: IFTRUE 17421
17410: PUSH
17411: LD_VAR 0 1
17415: PPUSH
17416: CALL_OW 301
17420: OR
17421: IFFALSE 17364
// RemoveSeeing ( _x , _y , side ) ;
17423: LD_VAR 0 9
17427: PPUSH
17428: LD_VAR 0 10
17432: PPUSH
17433: LD_VAR 0 6
17437: PPUSH
17438: CALL_OW 331
// end ; end_of_file
17442: LD_VAR 0 4
17446: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17447: LD_INT 0
17449: PPUSH
17450: PPUSH
// if exist_mode then
17451: LD_VAR 0 2
17455: IFFALSE 17501
// begin unit := CreateCharacter ( prefix & ident ) ;
17457: LD_ADDR_VAR 0 5
17461: PUSH
17462: LD_VAR 0 3
17466: PUSH
17467: LD_VAR 0 1
17471: STR
17472: PPUSH
17473: CALL_OW 34
17477: ST_TO_ADDR
// if unit then
17478: LD_VAR 0 5
17482: IFFALSE 17499
// DeleteCharacters ( prefix & ident ) ;
17484: LD_VAR 0 3
17488: PUSH
17489: LD_VAR 0 1
17493: STR
17494: PPUSH
17495: CALL_OW 40
// end else
17499: GO 17516
// unit := NewCharacter ( ident ) ;
17501: LD_ADDR_VAR 0 5
17505: PUSH
17506: LD_VAR 0 1
17510: PPUSH
17511: CALL_OW 25
17515: ST_TO_ADDR
// result := unit ;
17516: LD_ADDR_VAR 0 4
17520: PUSH
17521: LD_VAR 0 5
17525: ST_TO_ADDR
// end ;
17526: LD_VAR 0 4
17530: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
17531: LD_INT 0
17533: PPUSH
17534: PPUSH
// if exist_mode then
17535: LD_VAR 0 2
17539: IFFALSE 17564
// unit := CreateCharacter ( prefix & ident ) else
17541: LD_ADDR_VAR 0 5
17545: PUSH
17546: LD_VAR 0 3
17550: PUSH
17551: LD_VAR 0 1
17555: STR
17556: PPUSH
17557: CALL_OW 34
17561: ST_TO_ADDR
17562: GO 17579
// unit := NewCharacter ( ident ) ;
17564: LD_ADDR_VAR 0 5
17568: PUSH
17569: LD_VAR 0 1
17573: PPUSH
17574: CALL_OW 25
17578: ST_TO_ADDR
// result := unit ;
17579: LD_ADDR_VAR 0 4
17583: PUSH
17584: LD_VAR 0 5
17588: ST_TO_ADDR
// end ;
17589: LD_VAR 0 4
17593: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17594: LD_INT 0
17596: PPUSH
17597: PPUSH
// if not side or not nation then
17598: LD_VAR 0 1
17602: NOT
17603: IFTRUE 17612
17605: PUSH
17606: LD_VAR 0 2
17610: NOT
17611: OR
17612: IFFALSE 17616
// exit ;
17614: GO 18386
// case nation of nation_american :
17616: LD_VAR 0 2
17620: PUSH
17621: LD_INT 1
17623: DOUBLE
17624: EQUAL
17625: IFTRUE 17629
17627: GO 17843
17629: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17630: LD_ADDR_VAR 0 4
17634: PUSH
17635: LD_INT 35
17637: PUSH
17638: LD_INT 45
17640: PUSH
17641: LD_INT 46
17643: PUSH
17644: LD_INT 47
17646: PUSH
17647: LD_INT 82
17649: PUSH
17650: LD_INT 83
17652: PUSH
17653: LD_INT 84
17655: PUSH
17656: LD_INT 85
17658: PUSH
17659: LD_INT 86
17661: PUSH
17662: LD_INT 1
17664: PUSH
17665: LD_INT 2
17667: PUSH
17668: LD_INT 6
17670: PUSH
17671: LD_INT 15
17673: PUSH
17674: LD_INT 16
17676: PUSH
17677: LD_INT 7
17679: PUSH
17680: LD_INT 12
17682: PUSH
17683: LD_INT 13
17685: PUSH
17686: LD_INT 10
17688: PUSH
17689: LD_INT 14
17691: PUSH
17692: LD_INT 20
17694: PUSH
17695: LD_INT 21
17697: PUSH
17698: LD_INT 22
17700: PUSH
17701: LD_INT 25
17703: PUSH
17704: LD_INT 32
17706: PUSH
17707: LD_INT 27
17709: PUSH
17710: LD_INT 36
17712: PUSH
17713: LD_INT 69
17715: PUSH
17716: LD_INT 39
17718: PUSH
17719: LD_INT 34
17721: PUSH
17722: LD_INT 40
17724: PUSH
17725: LD_INT 48
17727: PUSH
17728: LD_INT 49
17730: PUSH
17731: LD_INT 50
17733: PUSH
17734: LD_INT 51
17736: PUSH
17737: LD_INT 52
17739: PUSH
17740: LD_INT 53
17742: PUSH
17743: LD_INT 54
17745: PUSH
17746: LD_INT 55
17748: PUSH
17749: LD_INT 56
17751: PUSH
17752: LD_INT 57
17754: PUSH
17755: LD_INT 58
17757: PUSH
17758: LD_INT 59
17760: PUSH
17761: LD_INT 60
17763: PUSH
17764: LD_INT 61
17766: PUSH
17767: LD_INT 62
17769: PUSH
17770: LD_INT 80
17772: PUSH
17773: LD_INT 82
17775: PUSH
17776: LD_INT 83
17778: PUSH
17779: LD_INT 84
17781: PUSH
17782: LD_INT 85
17784: PUSH
17785: LD_INT 86
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: ST_TO_ADDR
17841: GO 18308
17843: LD_INT 2
17845: DOUBLE
17846: EQUAL
17847: IFTRUE 17851
17849: GO 18077
17851: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17852: LD_ADDR_VAR 0 4
17856: PUSH
17857: LD_INT 35
17859: PUSH
17860: LD_INT 45
17862: PUSH
17863: LD_INT 46
17865: PUSH
17866: LD_INT 47
17868: PUSH
17869: LD_INT 82
17871: PUSH
17872: LD_INT 83
17874: PUSH
17875: LD_INT 84
17877: PUSH
17878: LD_INT 85
17880: PUSH
17881: LD_INT 87
17883: PUSH
17884: LD_INT 70
17886: PUSH
17887: LD_INT 1
17889: PUSH
17890: LD_INT 11
17892: PUSH
17893: LD_INT 3
17895: PUSH
17896: LD_INT 4
17898: PUSH
17899: LD_INT 5
17901: PUSH
17902: LD_INT 6
17904: PUSH
17905: LD_INT 15
17907: PUSH
17908: LD_INT 18
17910: PUSH
17911: LD_INT 7
17913: PUSH
17914: LD_INT 17
17916: PUSH
17917: LD_INT 8
17919: PUSH
17920: LD_INT 20
17922: PUSH
17923: LD_INT 21
17925: PUSH
17926: LD_INT 22
17928: PUSH
17929: LD_INT 72
17931: PUSH
17932: LD_INT 26
17934: PUSH
17935: LD_INT 69
17937: PUSH
17938: LD_INT 39
17940: PUSH
17941: LD_INT 40
17943: PUSH
17944: LD_INT 41
17946: PUSH
17947: LD_INT 42
17949: PUSH
17950: LD_INT 43
17952: PUSH
17953: LD_INT 48
17955: PUSH
17956: LD_INT 49
17958: PUSH
17959: LD_INT 50
17961: PUSH
17962: LD_INT 51
17964: PUSH
17965: LD_INT 52
17967: PUSH
17968: LD_INT 53
17970: PUSH
17971: LD_INT 54
17973: PUSH
17974: LD_INT 55
17976: PUSH
17977: LD_INT 56
17979: PUSH
17980: LD_INT 60
17982: PUSH
17983: LD_INT 61
17985: PUSH
17986: LD_INT 62
17988: PUSH
17989: LD_INT 66
17991: PUSH
17992: LD_INT 67
17994: PUSH
17995: LD_INT 68
17997: PUSH
17998: LD_INT 81
18000: PUSH
18001: LD_INT 82
18003: PUSH
18004: LD_INT 83
18006: PUSH
18007: LD_INT 84
18009: PUSH
18010: LD_INT 85
18012: PUSH
18013: LD_INT 87
18015: PUSH
18016: LD_INT 88
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: ST_TO_ADDR
18075: GO 18308
18077: LD_INT 3
18079: DOUBLE
18080: EQUAL
18081: IFTRUE 18085
18083: GO 18307
18085: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
18086: LD_ADDR_VAR 0 4
18090: PUSH
18091: LD_INT 46
18093: PUSH
18094: LD_INT 47
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: LD_INT 2
18102: PUSH
18103: LD_INT 82
18105: PUSH
18106: LD_INT 83
18108: PUSH
18109: LD_INT 84
18111: PUSH
18112: LD_INT 85
18114: PUSH
18115: LD_INT 86
18117: PUSH
18118: LD_INT 11
18120: PUSH
18121: LD_INT 9
18123: PUSH
18124: LD_INT 20
18126: PUSH
18127: LD_INT 19
18129: PUSH
18130: LD_INT 21
18132: PUSH
18133: LD_INT 24
18135: PUSH
18136: LD_INT 22
18138: PUSH
18139: LD_INT 25
18141: PUSH
18142: LD_INT 28
18144: PUSH
18145: LD_INT 29
18147: PUSH
18148: LD_INT 30
18150: PUSH
18151: LD_INT 31
18153: PUSH
18154: LD_INT 37
18156: PUSH
18157: LD_INT 38
18159: PUSH
18160: LD_INT 32
18162: PUSH
18163: LD_INT 27
18165: PUSH
18166: LD_INT 33
18168: PUSH
18169: LD_INT 69
18171: PUSH
18172: LD_INT 39
18174: PUSH
18175: LD_INT 34
18177: PUSH
18178: LD_INT 40
18180: PUSH
18181: LD_INT 71
18183: PUSH
18184: LD_INT 23
18186: PUSH
18187: LD_INT 44
18189: PUSH
18190: LD_INT 48
18192: PUSH
18193: LD_INT 49
18195: PUSH
18196: LD_INT 50
18198: PUSH
18199: LD_INT 51
18201: PUSH
18202: LD_INT 52
18204: PUSH
18205: LD_INT 53
18207: PUSH
18208: LD_INT 54
18210: PUSH
18211: LD_INT 55
18213: PUSH
18214: LD_INT 56
18216: PUSH
18217: LD_INT 57
18219: PUSH
18220: LD_INT 58
18222: PUSH
18223: LD_INT 59
18225: PUSH
18226: LD_INT 63
18228: PUSH
18229: LD_INT 64
18231: PUSH
18232: LD_INT 65
18234: PUSH
18235: LD_INT 82
18237: PUSH
18238: LD_INT 83
18240: PUSH
18241: LD_INT 84
18243: PUSH
18244: LD_INT 85
18246: PUSH
18247: LD_INT 86
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: ST_TO_ADDR
18305: GO 18308
18307: POP
// if state > - 1 and state < 3 then
18308: LD_VAR 0 3
18312: PUSH
18313: LD_INT 1
18315: NEG
18316: GREATER
18317: IFFALSE 18329
18319: PUSH
18320: LD_VAR 0 3
18324: PUSH
18325: LD_INT 3
18327: LESS
18328: AND
18329: IFFALSE 18386
// for i in result do
18331: LD_ADDR_VAR 0 5
18335: PUSH
18336: LD_VAR 0 4
18340: PUSH
18341: FOR_IN
18342: IFFALSE 18384
// if GetTech ( i , side ) <> state then
18344: LD_VAR 0 5
18348: PPUSH
18349: LD_VAR 0 1
18353: PPUSH
18354: CALL_OW 321
18358: PUSH
18359: LD_VAR 0 3
18363: NONEQUAL
18364: IFFALSE 18382
// result := result diff i ;
18366: LD_ADDR_VAR 0 4
18370: PUSH
18371: LD_VAR 0 4
18375: PUSH
18376: LD_VAR 0 5
18380: DIFF
18381: ST_TO_ADDR
18382: GO 18341
18384: POP
18385: POP
// end ;
18386: LD_VAR 0 4
18390: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18391: LD_INT 0
18393: PPUSH
18394: PPUSH
18395: PPUSH
// result := true ;
18396: LD_ADDR_VAR 0 3
18400: PUSH
18401: LD_INT 1
18403: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18404: LD_ADDR_VAR 0 5
18408: PUSH
18409: LD_VAR 0 2
18413: PPUSH
18414: CALL_OW 480
18418: ST_TO_ADDR
// if not tmp then
18419: LD_VAR 0 5
18423: NOT
18424: IFFALSE 18428
// exit ;
18426: GO 18477
// for i in tmp do
18428: LD_ADDR_VAR 0 4
18432: PUSH
18433: LD_VAR 0 5
18437: PUSH
18438: FOR_IN
18439: IFFALSE 18475
// if GetTech ( i , side ) <> state_researched then
18441: LD_VAR 0 4
18445: PPUSH
18446: LD_VAR 0 1
18450: PPUSH
18451: CALL_OW 321
18455: PUSH
18456: LD_INT 2
18458: NONEQUAL
18459: IFFALSE 18473
// begin result := false ;
18461: LD_ADDR_VAR 0 3
18465: PUSH
18466: LD_INT 0
18468: ST_TO_ADDR
// exit ;
18469: POP
18470: POP
18471: GO 18477
// end ;
18473: GO 18438
18475: POP
18476: POP
// end ;
18477: LD_VAR 0 3
18481: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18482: LD_INT 0
18484: PPUSH
18485: PPUSH
18486: PPUSH
18487: PPUSH
18488: PPUSH
18489: PPUSH
18490: PPUSH
18491: PPUSH
18492: PPUSH
18493: PPUSH
18494: PPUSH
18495: PPUSH
18496: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18497: LD_VAR 0 1
18501: NOT
18502: IFTRUE 18519
18504: PUSH
18505: LD_VAR 0 1
18509: PPUSH
18510: CALL_OW 257
18514: PUSH
18515: LD_INT 9
18517: NONEQUAL
18518: OR
18519: IFFALSE 18523
// exit ;
18521: GO 19102
// side := GetSide ( unit ) ;
18523: LD_ADDR_VAR 0 9
18527: PUSH
18528: LD_VAR 0 1
18532: PPUSH
18533: CALL_OW 255
18537: ST_TO_ADDR
// tech_space := tech_spacanom ;
18538: LD_ADDR_VAR 0 12
18542: PUSH
18543: LD_INT 29
18545: ST_TO_ADDR
// tech_time := tech_taurad ;
18546: LD_ADDR_VAR 0 13
18550: PUSH
18551: LD_INT 28
18553: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18554: LD_ADDR_VAR 0 11
18558: PUSH
18559: LD_VAR 0 1
18563: PPUSH
18564: CALL_OW 310
18568: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18569: LD_VAR 0 11
18573: PPUSH
18574: CALL_OW 247
18578: PUSH
18579: LD_INT 2
18581: EQUAL
18582: IFFALSE 18586
// exit ;
18584: GO 19102
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18586: LD_ADDR_VAR 0 8
18590: PUSH
18591: LD_INT 81
18593: PUSH
18594: LD_VAR 0 9
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 3
18605: PUSH
18606: LD_INT 21
18608: PUSH
18609: LD_INT 3
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PPUSH
18624: CALL_OW 69
18628: ST_TO_ADDR
// if not tmp then
18629: LD_VAR 0 8
18633: NOT
18634: IFFALSE 18638
// exit ;
18636: GO 19102
// if in_unit then
18638: LD_VAR 0 11
18642: IFFALSE 18666
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18644: LD_ADDR_VAR 0 10
18648: PUSH
18649: LD_VAR 0 8
18653: PPUSH
18654: LD_VAR 0 11
18658: PPUSH
18659: CALL_OW 74
18663: ST_TO_ADDR
18664: GO 18686
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18666: LD_ADDR_VAR 0 10
18670: PUSH
18671: LD_VAR 0 8
18675: PPUSH
18676: LD_VAR 0 1
18680: PPUSH
18681: CALL_OW 74
18685: ST_TO_ADDR
// if not enemy then
18686: LD_VAR 0 10
18690: NOT
18691: IFFALSE 18695
// exit ;
18693: GO 19102
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18695: LD_VAR 0 11
18699: IFFALSE 18721
18701: PUSH
18702: LD_VAR 0 11
18706: PPUSH
18707: LD_VAR 0 10
18711: PPUSH
18712: CALL_OW 296
18716: PUSH
18717: LD_INT 13
18719: GREATER
18720: AND
18721: IFTRUE 18743
18723: PUSH
18724: LD_VAR 0 1
18728: PPUSH
18729: LD_VAR 0 10
18733: PPUSH
18734: CALL_OW 296
18738: PUSH
18739: LD_INT 12
18741: GREATER
18742: OR
18743: IFFALSE 18747
// exit ;
18745: GO 19102
// missile := [ 1 ] ;
18747: LD_ADDR_VAR 0 14
18751: PUSH
18752: LD_INT 1
18754: PUSH
18755: EMPTY
18756: LIST
18757: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18758: LD_VAR 0 9
18762: PPUSH
18763: LD_VAR 0 12
18767: PPUSH
18768: CALL_OW 325
18772: IFFALSE 18801
// missile := Replace ( missile , missile + 1 , 2 ) ;
18774: LD_ADDR_VAR 0 14
18778: PUSH
18779: LD_VAR 0 14
18783: PPUSH
18784: LD_VAR 0 14
18788: PUSH
18789: LD_INT 1
18791: PLUS
18792: PPUSH
18793: LD_INT 2
18795: PPUSH
18796: CALL_OW 1
18800: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18801: LD_VAR 0 9
18805: PPUSH
18806: LD_VAR 0 13
18810: PPUSH
18811: CALL_OW 325
18815: IFFALSE 18839
18817: PUSH
18818: LD_VAR 0 10
18822: PPUSH
18823: CALL_OW 255
18827: PPUSH
18828: LD_VAR 0 13
18832: PPUSH
18833: CALL_OW 325
18837: NOT
18838: AND
18839: IFFALSE 18868
// missile := Replace ( missile , missile + 1 , 3 ) ;
18841: LD_ADDR_VAR 0 14
18845: PUSH
18846: LD_VAR 0 14
18850: PPUSH
18851: LD_VAR 0 14
18855: PUSH
18856: LD_INT 1
18858: PLUS
18859: PPUSH
18860: LD_INT 3
18862: PPUSH
18863: CALL_OW 1
18867: ST_TO_ADDR
// if missile < 2 then
18868: LD_VAR 0 14
18872: PUSH
18873: LD_INT 2
18875: LESS
18876: IFFALSE 18880
// exit ;
18878: GO 19102
// x := GetX ( enemy ) ;
18880: LD_ADDR_VAR 0 4
18884: PUSH
18885: LD_VAR 0 10
18889: PPUSH
18890: CALL_OW 250
18894: ST_TO_ADDR
// y := GetY ( enemy ) ;
18895: LD_ADDR_VAR 0 5
18899: PUSH
18900: LD_VAR 0 10
18904: PPUSH
18905: CALL_OW 251
18909: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18910: LD_ADDR_VAR 0 6
18914: PUSH
18915: LD_VAR 0 4
18919: PUSH
18920: LD_INT 1
18922: NEG
18923: PPUSH
18924: LD_INT 1
18926: PPUSH
18927: CALL_OW 12
18931: PLUS
18932: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18933: LD_ADDR_VAR 0 7
18937: PUSH
18938: LD_VAR 0 5
18942: PUSH
18943: LD_INT 1
18945: NEG
18946: PPUSH
18947: LD_INT 1
18949: PPUSH
18950: CALL_OW 12
18954: PLUS
18955: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18956: LD_VAR 0 6
18960: PPUSH
18961: LD_VAR 0 7
18965: PPUSH
18966: CALL_OW 488
18970: NOT
18971: IFFALSE 18993
// begin _x := x ;
18973: LD_ADDR_VAR 0 6
18977: PUSH
18978: LD_VAR 0 4
18982: ST_TO_ADDR
// _y := y ;
18983: LD_ADDR_VAR 0 7
18987: PUSH
18988: LD_VAR 0 5
18992: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18993: LD_ADDR_VAR 0 3
18997: PUSH
18998: LD_INT 1
19000: PPUSH
19001: LD_VAR 0 14
19005: PPUSH
19006: CALL_OW 12
19010: ST_TO_ADDR
// case i of 1 :
19011: LD_VAR 0 3
19015: PUSH
19016: LD_INT 1
19018: DOUBLE
19019: EQUAL
19020: IFTRUE 19024
19022: GO 19041
19024: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
19025: LD_VAR 0 1
19029: PPUSH
19030: LD_VAR 0 10
19034: PPUSH
19035: CALL_OW 115
19039: GO 19102
19041: LD_INT 2
19043: DOUBLE
19044: EQUAL
19045: IFTRUE 19049
19047: GO 19071
19049: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
19050: LD_VAR 0 1
19054: PPUSH
19055: LD_VAR 0 6
19059: PPUSH
19060: LD_VAR 0 7
19064: PPUSH
19065: CALL_OW 153
19069: GO 19102
19071: LD_INT 3
19073: DOUBLE
19074: EQUAL
19075: IFTRUE 19079
19077: GO 19101
19079: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
19080: LD_VAR 0 1
19084: PPUSH
19085: LD_VAR 0 6
19089: PPUSH
19090: LD_VAR 0 7
19094: PPUSH
19095: CALL_OW 154
19099: GO 19102
19101: POP
// end ;
19102: LD_VAR 0 2
19106: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
19107: LD_INT 0
19109: PPUSH
19110: PPUSH
19111: PPUSH
19112: PPUSH
19113: PPUSH
19114: PPUSH
// if not unit or not building then
19115: LD_VAR 0 1
19119: NOT
19120: IFTRUE 19129
19122: PUSH
19123: LD_VAR 0 2
19127: NOT
19128: OR
19129: IFFALSE 19133
// exit ;
19131: GO 19291
// x := GetX ( building ) ;
19133: LD_ADDR_VAR 0 5
19137: PUSH
19138: LD_VAR 0 2
19142: PPUSH
19143: CALL_OW 250
19147: ST_TO_ADDR
// y := GetY ( building ) ;
19148: LD_ADDR_VAR 0 6
19152: PUSH
19153: LD_VAR 0 2
19157: PPUSH
19158: CALL_OW 251
19162: ST_TO_ADDR
// for i := 0 to 5 do
19163: LD_ADDR_VAR 0 4
19167: PUSH
19168: DOUBLE
19169: LD_INT 0
19171: DEC
19172: ST_TO_ADDR
19173: LD_INT 5
19175: PUSH
19176: FOR_TO
19177: IFFALSE 19289
// begin _x := ShiftX ( x , i , 3 ) ;
19179: LD_ADDR_VAR 0 7
19183: PUSH
19184: LD_VAR 0 5
19188: PPUSH
19189: LD_VAR 0 4
19193: PPUSH
19194: LD_INT 3
19196: PPUSH
19197: CALL_OW 272
19201: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
19202: LD_ADDR_VAR 0 8
19206: PUSH
19207: LD_VAR 0 6
19211: PPUSH
19212: LD_VAR 0 4
19216: PPUSH
19217: LD_INT 3
19219: PPUSH
19220: CALL_OW 273
19224: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19225: LD_VAR 0 7
19229: PPUSH
19230: LD_VAR 0 8
19234: PPUSH
19235: CALL_OW 488
19239: NOT
19240: IFFALSE 19244
// continue ;
19242: GO 19176
// if HexInfo ( _x , _y ) = 0 then
19244: LD_VAR 0 7
19248: PPUSH
19249: LD_VAR 0 8
19253: PPUSH
19254: CALL_OW 428
19258: PUSH
19259: LD_INT 0
19261: EQUAL
19262: IFFALSE 19287
// begin ComMoveXY ( unit , _x , _y ) ;
19264: LD_VAR 0 1
19268: PPUSH
19269: LD_VAR 0 7
19273: PPUSH
19274: LD_VAR 0 8
19278: PPUSH
19279: CALL_OW 111
// exit ;
19283: POP
19284: POP
19285: GO 19291
// end ; end ;
19287: GO 19176
19289: POP
19290: POP
// end ;
19291: LD_VAR 0 3
19295: RET
// export function ScanBase ( side , base_area ) ; begin
19296: LD_INT 0
19298: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19299: LD_ADDR_VAR 0 3
19303: PUSH
19304: LD_VAR 0 2
19308: PPUSH
19309: LD_INT 81
19311: PUSH
19312: LD_VAR 0 1
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PPUSH
19321: CALL_OW 70
19325: ST_TO_ADDR
// end ;
19326: LD_VAR 0 3
19330: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19331: LD_INT 0
19333: PPUSH
19334: PPUSH
19335: PPUSH
19336: PPUSH
// result := false ;
19337: LD_ADDR_VAR 0 2
19341: PUSH
19342: LD_INT 0
19344: ST_TO_ADDR
// side := GetSide ( unit ) ;
19345: LD_ADDR_VAR 0 3
19349: PUSH
19350: LD_VAR 0 1
19354: PPUSH
19355: CALL_OW 255
19359: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19360: LD_ADDR_VAR 0 4
19364: PUSH
19365: LD_VAR 0 1
19369: PPUSH
19370: CALL_OW 248
19374: ST_TO_ADDR
// case nat of 1 :
19375: LD_VAR 0 4
19379: PUSH
19380: LD_INT 1
19382: DOUBLE
19383: EQUAL
19384: IFTRUE 19388
19386: GO 19399
19388: POP
// tech := tech_lassight ; 2 :
19389: LD_ADDR_VAR 0 5
19393: PUSH
19394: LD_INT 12
19396: ST_TO_ADDR
19397: GO 19438
19399: LD_INT 2
19401: DOUBLE
19402: EQUAL
19403: IFTRUE 19407
19405: GO 19418
19407: POP
// tech := tech_mortar ; 3 :
19408: LD_ADDR_VAR 0 5
19412: PUSH
19413: LD_INT 41
19415: ST_TO_ADDR
19416: GO 19438
19418: LD_INT 3
19420: DOUBLE
19421: EQUAL
19422: IFTRUE 19426
19424: GO 19437
19426: POP
// tech := tech_bazooka ; end ;
19427: LD_ADDR_VAR 0 5
19431: PUSH
19432: LD_INT 44
19434: ST_TO_ADDR
19435: GO 19438
19437: POP
// if Researched ( side , tech ) then
19438: LD_VAR 0 3
19442: PPUSH
19443: LD_VAR 0 5
19447: PPUSH
19448: CALL_OW 325
19452: IFFALSE 19479
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19454: LD_ADDR_VAR 0 2
19458: PUSH
19459: LD_INT 5
19461: PUSH
19462: LD_INT 8
19464: PUSH
19465: LD_INT 9
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: LIST
19472: PUSH
19473: LD_VAR 0 4
19477: ARRAY
19478: ST_TO_ADDR
// end ;
19479: LD_VAR 0 2
19483: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19484: LD_INT 0
19486: PPUSH
19487: PPUSH
19488: PPUSH
// if not mines then
19489: LD_VAR 0 2
19493: NOT
19494: IFFALSE 19498
// exit ;
19496: GO 19642
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19498: LD_ADDR_VAR 0 5
19502: PUSH
19503: LD_INT 81
19505: PUSH
19506: LD_VAR 0 1
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 3
19517: PUSH
19518: LD_INT 21
19520: PUSH
19521: LD_INT 3
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PPUSH
19536: CALL_OW 69
19540: ST_TO_ADDR
// for i in mines do
19541: LD_ADDR_VAR 0 4
19545: PUSH
19546: LD_VAR 0 2
19550: PUSH
19551: FOR_IN
19552: IFFALSE 19640
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19554: LD_VAR 0 4
19558: PUSH
19559: LD_INT 1
19561: ARRAY
19562: PPUSH
19563: LD_VAR 0 4
19567: PUSH
19568: LD_INT 2
19570: ARRAY
19571: PPUSH
19572: CALL_OW 458
19576: NOT
19577: IFFALSE 19581
// continue ;
19579: GO 19551
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19581: LD_VAR 0 4
19585: PUSH
19586: LD_INT 1
19588: ARRAY
19589: PPUSH
19590: LD_VAR 0 4
19594: PUSH
19595: LD_INT 2
19597: ARRAY
19598: PPUSH
19599: CALL_OW 428
19603: PUSH
19604: LD_VAR 0 5
19608: IN
19609: IFFALSE 19638
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19611: LD_VAR 0 4
19615: PUSH
19616: LD_INT 1
19618: ARRAY
19619: PPUSH
19620: LD_VAR 0 4
19624: PUSH
19625: LD_INT 2
19627: ARRAY
19628: PPUSH
19629: LD_VAR 0 1
19633: PPUSH
19634: CALL_OW 456
// end ;
19638: GO 19551
19640: POP
19641: POP
// end ;
19642: LD_VAR 0 3
19646: RET
// export function Count ( array ) ; begin
19647: LD_INT 0
19649: PPUSH
// result := array + 0 ;
19650: LD_ADDR_VAR 0 2
19654: PUSH
19655: LD_VAR 0 1
19659: PUSH
19660: LD_INT 0
19662: PLUS
19663: ST_TO_ADDR
// end ;
19664: LD_VAR 0 2
19668: RET
// export function IsEmpty ( building ) ; begin
19669: LD_INT 0
19671: PPUSH
// if not building then
19672: LD_VAR 0 1
19676: NOT
19677: IFFALSE 19681
// exit ;
19679: GO 19724
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19681: LD_ADDR_VAR 0 2
19685: PUSH
19686: LD_VAR 0 1
19690: PUSH
19691: LD_INT 22
19693: PUSH
19694: LD_VAR 0 1
19698: PPUSH
19699: CALL_OW 255
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 58
19710: PUSH
19711: EMPTY
19712: LIST
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PPUSH
19718: CALL_OW 69
19722: IN
19723: ST_TO_ADDR
// end ;
19724: LD_VAR 0 2
19728: RET
// export function IsNotFull ( building ) ; var places ; begin
19729: LD_INT 0
19731: PPUSH
19732: PPUSH
// if not building then
19733: LD_VAR 0 1
19737: NOT
19738: IFFALSE 19742
// exit ;
19740: GO 19770
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19742: LD_ADDR_VAR 0 2
19746: PUSH
19747: LD_VAR 0 1
19751: PPUSH
19752: LD_INT 3
19754: PUSH
19755: LD_INT 62
19757: PUSH
19758: EMPTY
19759: LIST
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PPUSH
19765: CALL_OW 72
19769: ST_TO_ADDR
// end ;
19770: LD_VAR 0 2
19774: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19775: LD_INT 0
19777: PPUSH
19778: PPUSH
19779: PPUSH
19780: PPUSH
// tmp := [ ] ;
19781: LD_ADDR_VAR 0 3
19785: PUSH
19786: EMPTY
19787: ST_TO_ADDR
// list := [ ] ;
19788: LD_ADDR_VAR 0 5
19792: PUSH
19793: EMPTY
19794: ST_TO_ADDR
// for i = 16 to 25 do
19795: LD_ADDR_VAR 0 4
19799: PUSH
19800: DOUBLE
19801: LD_INT 16
19803: DEC
19804: ST_TO_ADDR
19805: LD_INT 25
19807: PUSH
19808: FOR_TO
19809: IFFALSE 19882
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19811: LD_ADDR_VAR 0 3
19815: PUSH
19816: LD_VAR 0 3
19820: PUSH
19821: LD_INT 22
19823: PUSH
19824: LD_VAR 0 1
19828: PPUSH
19829: CALL_OW 255
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 91
19840: PUSH
19841: LD_VAR 0 1
19845: PUSH
19846: LD_INT 6
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 30
19856: PUSH
19857: LD_VAR 0 4
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: LIST
19870: PUSH
19871: EMPTY
19872: LIST
19873: PPUSH
19874: CALL_OW 69
19878: ADD
19879: ST_TO_ADDR
19880: GO 19808
19882: POP
19883: POP
// for i = 1 to tmp do
19884: LD_ADDR_VAR 0 4
19888: PUSH
19889: DOUBLE
19890: LD_INT 1
19892: DEC
19893: ST_TO_ADDR
19894: LD_VAR 0 3
19898: PUSH
19899: FOR_TO
19900: IFFALSE 19988
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19902: LD_ADDR_VAR 0 5
19906: PUSH
19907: LD_VAR 0 5
19911: PUSH
19912: LD_VAR 0 3
19916: PUSH
19917: LD_VAR 0 4
19921: ARRAY
19922: PPUSH
19923: CALL_OW 266
19927: PUSH
19928: LD_VAR 0 3
19932: PUSH
19933: LD_VAR 0 4
19937: ARRAY
19938: PPUSH
19939: CALL_OW 250
19943: PUSH
19944: LD_VAR 0 3
19948: PUSH
19949: LD_VAR 0 4
19953: ARRAY
19954: PPUSH
19955: CALL_OW 251
19959: PUSH
19960: LD_VAR 0 3
19964: PUSH
19965: LD_VAR 0 4
19969: ARRAY
19970: PPUSH
19971: CALL_OW 254
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: PUSH
19982: EMPTY
19983: LIST
19984: ADD
19985: ST_TO_ADDR
19986: GO 19899
19988: POP
19989: POP
// result := list ;
19990: LD_ADDR_VAR 0 2
19994: PUSH
19995: LD_VAR 0 5
19999: ST_TO_ADDR
// end ;
20000: LD_VAR 0 2
20004: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
20005: LD_INT 0
20007: PPUSH
20008: PPUSH
20009: PPUSH
20010: PPUSH
20011: PPUSH
20012: PPUSH
20013: PPUSH
// if not factory then
20014: LD_VAR 0 1
20018: NOT
20019: IFFALSE 20023
// exit ;
20021: GO 20626
// if control = control_apeman then
20023: LD_VAR 0 4
20027: PUSH
20028: LD_INT 5
20030: EQUAL
20031: IFFALSE 20140
// begin tmp := UnitsInside ( factory ) ;
20033: LD_ADDR_VAR 0 8
20037: PUSH
20038: LD_VAR 0 1
20042: PPUSH
20043: CALL_OW 313
20047: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
20048: LD_VAR 0 8
20052: PPUSH
20053: LD_INT 25
20055: PUSH
20056: LD_INT 12
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PPUSH
20063: CALL_OW 72
20067: NOT
20068: IFFALSE 20078
// control := control_manual ;
20070: LD_ADDR_VAR 0 4
20074: PUSH
20075: LD_INT 1
20077: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
20078: LD_ADDR_VAR 0 8
20082: PUSH
20083: LD_VAR 0 1
20087: PPUSH
20088: CALL 19775 0 1
20092: ST_TO_ADDR
// if tmp then
20093: LD_VAR 0 8
20097: IFFALSE 20140
// begin for i in tmp do
20099: LD_ADDR_VAR 0 7
20103: PUSH
20104: LD_VAR 0 8
20108: PUSH
20109: FOR_IN
20110: IFFALSE 20138
// if i [ 1 ] = b_ext_radio then
20112: LD_VAR 0 7
20116: PUSH
20117: LD_INT 1
20119: ARRAY
20120: PUSH
20121: LD_INT 22
20123: EQUAL
20124: IFFALSE 20136
// begin control := control_remote ;
20126: LD_ADDR_VAR 0 4
20130: PUSH
20131: LD_INT 2
20133: ST_TO_ADDR
// break ;
20134: GO 20138
// end ;
20136: GO 20109
20138: POP
20139: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20140: LD_VAR 0 1
20144: PPUSH
20145: LD_VAR 0 2
20149: PPUSH
20150: LD_VAR 0 3
20154: PPUSH
20155: LD_VAR 0 4
20159: PPUSH
20160: LD_VAR 0 5
20164: PPUSH
20165: CALL_OW 448
20169: IFFALSE 20204
// begin result := [ chassis , engine , control , weapon ] ;
20171: LD_ADDR_VAR 0 6
20175: PUSH
20176: LD_VAR 0 2
20180: PUSH
20181: LD_VAR 0 3
20185: PUSH
20186: LD_VAR 0 4
20190: PUSH
20191: LD_VAR 0 5
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: ST_TO_ADDR
// exit ;
20202: GO 20626
// end ; _chassis := AvailableChassisList ( factory ) ;
20204: LD_ADDR_VAR 0 9
20208: PUSH
20209: LD_VAR 0 1
20213: PPUSH
20214: CALL_OW 475
20218: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20219: LD_ADDR_VAR 0 11
20223: PUSH
20224: LD_VAR 0 1
20228: PPUSH
20229: CALL_OW 476
20233: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20234: LD_ADDR_VAR 0 12
20238: PUSH
20239: LD_VAR 0 1
20243: PPUSH
20244: CALL_OW 477
20248: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20249: LD_ADDR_VAR 0 10
20253: PUSH
20254: LD_VAR 0 1
20258: PPUSH
20259: CALL_OW 478
20263: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20264: LD_VAR 0 9
20268: NOT
20269: IFTRUE 20278
20271: PUSH
20272: LD_VAR 0 11
20276: NOT
20277: OR
20278: IFTRUE 20287
20280: PUSH
20281: LD_VAR 0 12
20285: NOT
20286: OR
20287: IFTRUE 20296
20289: PUSH
20290: LD_VAR 0 10
20294: NOT
20295: OR
20296: IFFALSE 20331
// begin result := [ chassis , engine , control , weapon ] ;
20298: LD_ADDR_VAR 0 6
20302: PUSH
20303: LD_VAR 0 2
20307: PUSH
20308: LD_VAR 0 3
20312: PUSH
20313: LD_VAR 0 4
20317: PUSH
20318: LD_VAR 0 5
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: ST_TO_ADDR
// exit ;
20329: GO 20626
// end ; if not chassis in _chassis then
20331: LD_VAR 0 2
20335: PUSH
20336: LD_VAR 0 9
20340: IN
20341: NOT
20342: IFFALSE 20368
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20344: LD_ADDR_VAR 0 2
20348: PUSH
20349: LD_VAR 0 9
20353: PUSH
20354: LD_INT 1
20356: PPUSH
20357: LD_VAR 0 9
20361: PPUSH
20362: CALL_OW 12
20366: ARRAY
20367: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20368: LD_VAR 0 2
20372: PPUSH
20373: LD_VAR 0 3
20377: PPUSH
20378: CALL 20631 0 2
20382: NOT
20383: IFFALSE 20444
// repeat engine := _engine [ 1 ] ;
20385: LD_ADDR_VAR 0 3
20389: PUSH
20390: LD_VAR 0 11
20394: PUSH
20395: LD_INT 1
20397: ARRAY
20398: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20399: LD_ADDR_VAR 0 11
20403: PUSH
20404: LD_VAR 0 11
20408: PPUSH
20409: LD_INT 1
20411: PPUSH
20412: CALL_OW 3
20416: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20417: LD_VAR 0 2
20421: PPUSH
20422: LD_VAR 0 3
20426: PPUSH
20427: CALL 20631 0 2
20431: IFTRUE 20442
20433: PUSH
20434: LD_VAR 0 11
20438: PUSH
20439: EMPTY
20440: EQUAL
20441: OR
20442: IFFALSE 20385
// if not control in _control then
20444: LD_VAR 0 4
20448: PUSH
20449: LD_VAR 0 12
20453: IN
20454: NOT
20455: IFFALSE 20481
// control := _control [ rand ( 1 , _control ) ] ;
20457: LD_ADDR_VAR 0 4
20461: PUSH
20462: LD_VAR 0 12
20466: PUSH
20467: LD_INT 1
20469: PPUSH
20470: LD_VAR 0 12
20474: PPUSH
20475: CALL_OW 12
20479: ARRAY
20480: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20481: LD_VAR 0 2
20485: PPUSH
20486: LD_VAR 0 5
20490: PPUSH
20491: CALL 20853 0 2
20495: NOT
20496: IFFALSE 20557
// repeat weapon := _weapon [ 1 ] ;
20498: LD_ADDR_VAR 0 5
20502: PUSH
20503: LD_VAR 0 10
20507: PUSH
20508: LD_INT 1
20510: ARRAY
20511: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20512: LD_ADDR_VAR 0 10
20516: PUSH
20517: LD_VAR 0 10
20521: PPUSH
20522: LD_INT 1
20524: PPUSH
20525: CALL_OW 3
20529: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20530: LD_VAR 0 2
20534: PPUSH
20535: LD_VAR 0 5
20539: PPUSH
20540: CALL 20853 0 2
20544: IFTRUE 20555
20546: PUSH
20547: LD_VAR 0 10
20551: PUSH
20552: EMPTY
20553: EQUAL
20554: OR
20555: IFFALSE 20498
// result := [ ] ;
20557: LD_ADDR_VAR 0 6
20561: PUSH
20562: EMPTY
20563: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20564: LD_VAR 0 1
20568: PPUSH
20569: LD_VAR 0 2
20573: PPUSH
20574: LD_VAR 0 3
20578: PPUSH
20579: LD_VAR 0 4
20583: PPUSH
20584: LD_VAR 0 5
20588: PPUSH
20589: CALL_OW 448
20593: IFFALSE 20626
// result := [ chassis , engine , control , weapon ] ;
20595: LD_ADDR_VAR 0 6
20599: PUSH
20600: LD_VAR 0 2
20604: PUSH
20605: LD_VAR 0 3
20609: PUSH
20610: LD_VAR 0 4
20614: PUSH
20615: LD_VAR 0 5
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: ST_TO_ADDR
// end ;
20626: LD_VAR 0 6
20630: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20631: LD_INT 0
20633: PPUSH
// if not chassis or not engine then
20634: LD_VAR 0 1
20638: NOT
20639: IFTRUE 20648
20641: PUSH
20642: LD_VAR 0 2
20646: NOT
20647: OR
20648: IFFALSE 20652
// exit ;
20650: GO 20848
// case engine of engine_solar :
20652: LD_VAR 0 2
20656: PUSH
20657: LD_INT 2
20659: DOUBLE
20660: EQUAL
20661: IFTRUE 20665
20663: GO 20703
20665: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20666: LD_ADDR_VAR 0 3
20670: PUSH
20671: LD_INT 11
20673: PUSH
20674: LD_INT 12
20676: PUSH
20677: LD_INT 13
20679: PUSH
20680: LD_INT 14
20682: PUSH
20683: LD_INT 1
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: LD_INT 3
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: ST_TO_ADDR
20701: GO 20832
20703: LD_INT 1
20705: DOUBLE
20706: EQUAL
20707: IFTRUE 20711
20709: GO 20773
20711: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20712: LD_ADDR_VAR 0 3
20716: PUSH
20717: LD_INT 11
20719: PUSH
20720: LD_INT 12
20722: PUSH
20723: LD_INT 13
20725: PUSH
20726: LD_INT 14
20728: PUSH
20729: LD_INT 1
20731: PUSH
20732: LD_INT 2
20734: PUSH
20735: LD_INT 3
20737: PUSH
20738: LD_INT 4
20740: PUSH
20741: LD_INT 5
20743: PUSH
20744: LD_INT 21
20746: PUSH
20747: LD_INT 23
20749: PUSH
20750: LD_INT 22
20752: PUSH
20753: LD_INT 24
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: ST_TO_ADDR
20771: GO 20832
20773: LD_INT 3
20775: DOUBLE
20776: EQUAL
20777: IFTRUE 20781
20779: GO 20831
20781: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20782: LD_ADDR_VAR 0 3
20786: PUSH
20787: LD_INT 13
20789: PUSH
20790: LD_INT 14
20792: PUSH
20793: LD_INT 2
20795: PUSH
20796: LD_INT 3
20798: PUSH
20799: LD_INT 4
20801: PUSH
20802: LD_INT 5
20804: PUSH
20805: LD_INT 21
20807: PUSH
20808: LD_INT 22
20810: PUSH
20811: LD_INT 23
20813: PUSH
20814: LD_INT 24
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: ST_TO_ADDR
20829: GO 20832
20831: POP
// result := ( chassis in result ) ;
20832: LD_ADDR_VAR 0 3
20836: PUSH
20837: LD_VAR 0 1
20841: PUSH
20842: LD_VAR 0 3
20846: IN
20847: ST_TO_ADDR
// end ;
20848: LD_VAR 0 3
20852: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20853: LD_INT 0
20855: PPUSH
// if not chassis or not weapon then
20856: LD_VAR 0 1
20860: NOT
20861: IFTRUE 20870
20863: PUSH
20864: LD_VAR 0 2
20868: NOT
20869: OR
20870: IFFALSE 20874
// exit ;
20872: GO 21934
// case weapon of us_machine_gun :
20874: LD_VAR 0 2
20878: PUSH
20879: LD_INT 2
20881: DOUBLE
20882: EQUAL
20883: IFTRUE 20887
20885: GO 20917
20887: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20888: LD_ADDR_VAR 0 3
20892: PUSH
20893: LD_INT 1
20895: PUSH
20896: LD_INT 2
20898: PUSH
20899: LD_INT 3
20901: PUSH
20902: LD_INT 4
20904: PUSH
20905: LD_INT 5
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: ST_TO_ADDR
20915: GO 21918
20917: LD_INT 3
20919: DOUBLE
20920: EQUAL
20921: IFTRUE 20925
20923: GO 20955
20925: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20926: LD_ADDR_VAR 0 3
20930: PUSH
20931: LD_INT 1
20933: PUSH
20934: LD_INT 2
20936: PUSH
20937: LD_INT 3
20939: PUSH
20940: LD_INT 4
20942: PUSH
20943: LD_INT 5
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: ST_TO_ADDR
20953: GO 21918
20955: LD_INT 11
20957: DOUBLE
20958: EQUAL
20959: IFTRUE 20963
20961: GO 20993
20963: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20964: LD_ADDR_VAR 0 3
20968: PUSH
20969: LD_INT 1
20971: PUSH
20972: LD_INT 2
20974: PUSH
20975: LD_INT 3
20977: PUSH
20978: LD_INT 4
20980: PUSH
20981: LD_INT 5
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: ST_TO_ADDR
20991: GO 21918
20993: LD_INT 4
20995: DOUBLE
20996: EQUAL
20997: IFTRUE 21001
20999: GO 21027
21001: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
21002: LD_ADDR_VAR 0 3
21006: PUSH
21007: LD_INT 2
21009: PUSH
21010: LD_INT 3
21012: PUSH
21013: LD_INT 4
21015: PUSH
21016: LD_INT 5
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: ST_TO_ADDR
21025: GO 21918
21027: LD_INT 5
21029: DOUBLE
21030: EQUAL
21031: IFTRUE 21035
21033: GO 21061
21035: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
21036: LD_ADDR_VAR 0 3
21040: PUSH
21041: LD_INT 2
21043: PUSH
21044: LD_INT 3
21046: PUSH
21047: LD_INT 4
21049: PUSH
21050: LD_INT 5
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: ST_TO_ADDR
21059: GO 21918
21061: LD_INT 9
21063: DOUBLE
21064: EQUAL
21065: IFTRUE 21069
21067: GO 21095
21069: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
21070: LD_ADDR_VAR 0 3
21074: PUSH
21075: LD_INT 2
21077: PUSH
21078: LD_INT 3
21080: PUSH
21081: LD_INT 4
21083: PUSH
21084: LD_INT 5
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: ST_TO_ADDR
21093: GO 21918
21095: LD_INT 7
21097: DOUBLE
21098: EQUAL
21099: IFTRUE 21103
21101: GO 21129
21103: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
21104: LD_ADDR_VAR 0 3
21108: PUSH
21109: LD_INT 2
21111: PUSH
21112: LD_INT 3
21114: PUSH
21115: LD_INT 4
21117: PUSH
21118: LD_INT 5
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: ST_TO_ADDR
21127: GO 21918
21129: LD_INT 12
21131: DOUBLE
21132: EQUAL
21133: IFTRUE 21137
21135: GO 21163
21137: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
21138: LD_ADDR_VAR 0 3
21142: PUSH
21143: LD_INT 2
21145: PUSH
21146: LD_INT 3
21148: PUSH
21149: LD_INT 4
21151: PUSH
21152: LD_INT 5
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: ST_TO_ADDR
21161: GO 21918
21163: LD_INT 13
21165: DOUBLE
21166: EQUAL
21167: IFTRUE 21171
21169: GO 21197
21171: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
21172: LD_ADDR_VAR 0 3
21176: PUSH
21177: LD_INT 2
21179: PUSH
21180: LD_INT 3
21182: PUSH
21183: LD_INT 4
21185: PUSH
21186: LD_INT 5
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: ST_TO_ADDR
21195: GO 21918
21197: LD_INT 14
21199: DOUBLE
21200: EQUAL
21201: IFTRUE 21205
21203: GO 21223
21205: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
21206: LD_ADDR_VAR 0 3
21210: PUSH
21211: LD_INT 4
21213: PUSH
21214: LD_INT 5
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: ST_TO_ADDR
21221: GO 21918
21223: LD_INT 6
21225: DOUBLE
21226: EQUAL
21227: IFTRUE 21231
21229: GO 21249
21231: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21232: LD_ADDR_VAR 0 3
21236: PUSH
21237: LD_INT 4
21239: PUSH
21240: LD_INT 5
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: ST_TO_ADDR
21247: GO 21918
21249: LD_INT 10
21251: DOUBLE
21252: EQUAL
21253: IFTRUE 21257
21255: GO 21275
21257: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21258: LD_ADDR_VAR 0 3
21262: PUSH
21263: LD_INT 4
21265: PUSH
21266: LD_INT 5
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: ST_TO_ADDR
21273: GO 21918
21275: LD_INT 22
21277: DOUBLE
21278: EQUAL
21279: IFTRUE 21283
21281: GO 21309
21283: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21284: LD_ADDR_VAR 0 3
21288: PUSH
21289: LD_INT 11
21291: PUSH
21292: LD_INT 12
21294: PUSH
21295: LD_INT 13
21297: PUSH
21298: LD_INT 14
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: ST_TO_ADDR
21307: GO 21918
21309: LD_INT 23
21311: DOUBLE
21312: EQUAL
21313: IFTRUE 21317
21315: GO 21343
21317: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21318: LD_ADDR_VAR 0 3
21322: PUSH
21323: LD_INT 11
21325: PUSH
21326: LD_INT 12
21328: PUSH
21329: LD_INT 13
21331: PUSH
21332: LD_INT 14
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: ST_TO_ADDR
21341: GO 21918
21343: LD_INT 24
21345: DOUBLE
21346: EQUAL
21347: IFTRUE 21351
21349: GO 21377
21351: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21352: LD_ADDR_VAR 0 3
21356: PUSH
21357: LD_INT 11
21359: PUSH
21360: LD_INT 12
21362: PUSH
21363: LD_INT 13
21365: PUSH
21366: LD_INT 14
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: ST_TO_ADDR
21375: GO 21918
21377: LD_INT 30
21379: DOUBLE
21380: EQUAL
21381: IFTRUE 21385
21383: GO 21411
21385: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21386: LD_ADDR_VAR 0 3
21390: PUSH
21391: LD_INT 11
21393: PUSH
21394: LD_INT 12
21396: PUSH
21397: LD_INT 13
21399: PUSH
21400: LD_INT 14
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: ST_TO_ADDR
21409: GO 21918
21411: LD_INT 25
21413: DOUBLE
21414: EQUAL
21415: IFTRUE 21419
21417: GO 21437
21419: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21420: LD_ADDR_VAR 0 3
21424: PUSH
21425: LD_INT 13
21427: PUSH
21428: LD_INT 14
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: ST_TO_ADDR
21435: GO 21918
21437: LD_INT 27
21439: DOUBLE
21440: EQUAL
21441: IFTRUE 21445
21443: GO 21463
21445: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
21446: LD_ADDR_VAR 0 3
21450: PUSH
21451: LD_INT 13
21453: PUSH
21454: LD_INT 14
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: ST_TO_ADDR
21461: GO 21918
21463: LD_INT 92
21465: DOUBLE
21466: EQUAL
21467: IFTRUE 21471
21469: GO 21497
21471: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21472: LD_ADDR_VAR 0 3
21476: PUSH
21477: LD_INT 11
21479: PUSH
21480: LD_INT 12
21482: PUSH
21483: LD_INT 13
21485: PUSH
21486: LD_INT 14
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: ST_TO_ADDR
21495: GO 21918
21497: LD_INT 28
21499: DOUBLE
21500: EQUAL
21501: IFTRUE 21505
21503: GO 21523
21505: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21506: LD_ADDR_VAR 0 3
21510: PUSH
21511: LD_INT 13
21513: PUSH
21514: LD_INT 14
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: ST_TO_ADDR
21521: GO 21918
21523: LD_INT 29
21525: DOUBLE
21526: EQUAL
21527: IFTRUE 21531
21529: GO 21549
21531: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21532: LD_ADDR_VAR 0 3
21536: PUSH
21537: LD_INT 13
21539: PUSH
21540: LD_INT 14
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: ST_TO_ADDR
21547: GO 21918
21549: LD_INT 31
21551: DOUBLE
21552: EQUAL
21553: IFTRUE 21557
21555: GO 21575
21557: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21558: LD_ADDR_VAR 0 3
21562: PUSH
21563: LD_INT 13
21565: PUSH
21566: LD_INT 14
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: ST_TO_ADDR
21573: GO 21918
21575: LD_INT 26
21577: DOUBLE
21578: EQUAL
21579: IFTRUE 21583
21581: GO 21601
21583: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21584: LD_ADDR_VAR 0 3
21588: PUSH
21589: LD_INT 13
21591: PUSH
21592: LD_INT 14
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: ST_TO_ADDR
21599: GO 21918
21601: LD_INT 42
21603: DOUBLE
21604: EQUAL
21605: IFTRUE 21609
21607: GO 21635
21609: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21610: LD_ADDR_VAR 0 3
21614: PUSH
21615: LD_INT 21
21617: PUSH
21618: LD_INT 22
21620: PUSH
21621: LD_INT 23
21623: PUSH
21624: LD_INT 24
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: ST_TO_ADDR
21633: GO 21918
21635: LD_INT 43
21637: DOUBLE
21638: EQUAL
21639: IFTRUE 21643
21641: GO 21669
21643: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21644: LD_ADDR_VAR 0 3
21648: PUSH
21649: LD_INT 21
21651: PUSH
21652: LD_INT 22
21654: PUSH
21655: LD_INT 23
21657: PUSH
21658: LD_INT 24
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: ST_TO_ADDR
21667: GO 21918
21669: LD_INT 44
21671: DOUBLE
21672: EQUAL
21673: IFTRUE 21677
21675: GO 21703
21677: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21678: LD_ADDR_VAR 0 3
21682: PUSH
21683: LD_INT 21
21685: PUSH
21686: LD_INT 22
21688: PUSH
21689: LD_INT 23
21691: PUSH
21692: LD_INT 24
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: ST_TO_ADDR
21701: GO 21918
21703: LD_INT 45
21705: DOUBLE
21706: EQUAL
21707: IFTRUE 21711
21709: GO 21737
21711: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21712: LD_ADDR_VAR 0 3
21716: PUSH
21717: LD_INT 21
21719: PUSH
21720: LD_INT 22
21722: PUSH
21723: LD_INT 23
21725: PUSH
21726: LD_INT 24
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: ST_TO_ADDR
21735: GO 21918
21737: LD_INT 49
21739: DOUBLE
21740: EQUAL
21741: IFTRUE 21745
21743: GO 21771
21745: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21746: LD_ADDR_VAR 0 3
21750: PUSH
21751: LD_INT 21
21753: PUSH
21754: LD_INT 22
21756: PUSH
21757: LD_INT 23
21759: PUSH
21760: LD_INT 24
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: ST_TO_ADDR
21769: GO 21918
21771: LD_INT 51
21773: DOUBLE
21774: EQUAL
21775: IFTRUE 21779
21777: GO 21805
21779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21780: LD_ADDR_VAR 0 3
21784: PUSH
21785: LD_INT 21
21787: PUSH
21788: LD_INT 22
21790: PUSH
21791: LD_INT 23
21793: PUSH
21794: LD_INT 24
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: ST_TO_ADDR
21803: GO 21918
21805: LD_INT 52
21807: DOUBLE
21808: EQUAL
21809: IFTRUE 21813
21811: GO 21839
21813: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21814: LD_ADDR_VAR 0 3
21818: PUSH
21819: LD_INT 21
21821: PUSH
21822: LD_INT 22
21824: PUSH
21825: LD_INT 23
21827: PUSH
21828: LD_INT 24
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: ST_TO_ADDR
21837: GO 21918
21839: LD_INT 53
21841: DOUBLE
21842: EQUAL
21843: IFTRUE 21847
21845: GO 21865
21847: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21848: LD_ADDR_VAR 0 3
21852: PUSH
21853: LD_INT 23
21855: PUSH
21856: LD_INT 24
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: ST_TO_ADDR
21863: GO 21918
21865: LD_INT 46
21867: DOUBLE
21868: EQUAL
21869: IFTRUE 21873
21871: GO 21891
21873: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21874: LD_ADDR_VAR 0 3
21878: PUSH
21879: LD_INT 23
21881: PUSH
21882: LD_INT 24
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: ST_TO_ADDR
21889: GO 21918
21891: LD_INT 47
21893: DOUBLE
21894: EQUAL
21895: IFTRUE 21899
21897: GO 21917
21899: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21900: LD_ADDR_VAR 0 3
21904: PUSH
21905: LD_INT 23
21907: PUSH
21908: LD_INT 24
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: ST_TO_ADDR
21915: GO 21918
21917: POP
// result := ( chassis in result ) ;
21918: LD_ADDR_VAR 0 3
21922: PUSH
21923: LD_VAR 0 1
21927: PUSH
21928: LD_VAR 0 3
21932: IN
21933: ST_TO_ADDR
// end ;
21934: LD_VAR 0 3
21938: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21939: LD_INT 0
21941: PPUSH
21942: PPUSH
21943: PPUSH
21944: PPUSH
21945: PPUSH
21946: PPUSH
21947: PPUSH
// result := array ;
21948: LD_ADDR_VAR 0 5
21952: PUSH
21953: LD_VAR 0 1
21957: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21958: LD_VAR 0 1
21962: NOT
21963: IFTRUE 21972
21965: PUSH
21966: LD_VAR 0 2
21970: NOT
21971: OR
21972: IFTRUE 21981
21974: PUSH
21975: LD_VAR 0 3
21979: NOT
21980: OR
21981: IFTRUE 21995
21983: PUSH
21984: LD_VAR 0 2
21988: PUSH
21989: LD_VAR 0 1
21993: GREATER
21994: OR
21995: IFTRUE 22009
21997: PUSH
21998: LD_VAR 0 3
22002: PUSH
22003: LD_VAR 0 1
22007: GREATER
22008: OR
22009: IFFALSE 22013
// exit ;
22011: GO 22309
// if direction then
22013: LD_VAR 0 4
22017: IFFALSE 22081
// begin d := 1 ;
22019: LD_ADDR_VAR 0 9
22023: PUSH
22024: LD_INT 1
22026: ST_TO_ADDR
// if i_from > i_to then
22027: LD_VAR 0 2
22031: PUSH
22032: LD_VAR 0 3
22036: GREATER
22037: IFFALSE 22063
// length := ( array - i_from ) + i_to else
22039: LD_ADDR_VAR 0 11
22043: PUSH
22044: LD_VAR 0 1
22048: PUSH
22049: LD_VAR 0 2
22053: MINUS
22054: PUSH
22055: LD_VAR 0 3
22059: PLUS
22060: ST_TO_ADDR
22061: GO 22079
// length := i_to - i_from ;
22063: LD_ADDR_VAR 0 11
22067: PUSH
22068: LD_VAR 0 3
22072: PUSH
22073: LD_VAR 0 2
22077: MINUS
22078: ST_TO_ADDR
// end else
22079: GO 22142
// begin d := - 1 ;
22081: LD_ADDR_VAR 0 9
22085: PUSH
22086: LD_INT 1
22088: NEG
22089: ST_TO_ADDR
// if i_from > i_to then
22090: LD_VAR 0 2
22094: PUSH
22095: LD_VAR 0 3
22099: GREATER
22100: IFFALSE 22120
// length := i_from - i_to else
22102: LD_ADDR_VAR 0 11
22106: PUSH
22107: LD_VAR 0 2
22111: PUSH
22112: LD_VAR 0 3
22116: MINUS
22117: ST_TO_ADDR
22118: GO 22142
// length := ( array - i_to ) + i_from ;
22120: LD_ADDR_VAR 0 11
22124: PUSH
22125: LD_VAR 0 1
22129: PUSH
22130: LD_VAR 0 3
22134: MINUS
22135: PUSH
22136: LD_VAR 0 2
22140: PLUS
22141: ST_TO_ADDR
// end ; if not length then
22142: LD_VAR 0 11
22146: NOT
22147: IFFALSE 22151
// exit ;
22149: GO 22309
// tmp := array ;
22151: LD_ADDR_VAR 0 10
22155: PUSH
22156: LD_VAR 0 1
22160: ST_TO_ADDR
// for i = 1 to length do
22161: LD_ADDR_VAR 0 6
22165: PUSH
22166: DOUBLE
22167: LD_INT 1
22169: DEC
22170: ST_TO_ADDR
22171: LD_VAR 0 11
22175: PUSH
22176: FOR_TO
22177: IFFALSE 22297
// begin for j = 1 to array do
22179: LD_ADDR_VAR 0 7
22183: PUSH
22184: DOUBLE
22185: LD_INT 1
22187: DEC
22188: ST_TO_ADDR
22189: LD_VAR 0 1
22193: PUSH
22194: FOR_TO
22195: IFFALSE 22283
// begin k := j + d ;
22197: LD_ADDR_VAR 0 8
22201: PUSH
22202: LD_VAR 0 7
22206: PUSH
22207: LD_VAR 0 9
22211: PLUS
22212: ST_TO_ADDR
// if k > array then
22213: LD_VAR 0 8
22217: PUSH
22218: LD_VAR 0 1
22222: GREATER
22223: IFFALSE 22233
// k := 1 ;
22225: LD_ADDR_VAR 0 8
22229: PUSH
22230: LD_INT 1
22232: ST_TO_ADDR
// if not k then
22233: LD_VAR 0 8
22237: NOT
22238: IFFALSE 22250
// k := array ;
22240: LD_ADDR_VAR 0 8
22244: PUSH
22245: LD_VAR 0 1
22249: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22250: LD_ADDR_VAR 0 10
22254: PUSH
22255: LD_VAR 0 10
22259: PPUSH
22260: LD_VAR 0 8
22264: PPUSH
22265: LD_VAR 0 1
22269: PUSH
22270: LD_VAR 0 7
22274: ARRAY
22275: PPUSH
22276: CALL_OW 1
22280: ST_TO_ADDR
// end ;
22281: GO 22194
22283: POP
22284: POP
// array := tmp ;
22285: LD_ADDR_VAR 0 1
22289: PUSH
22290: LD_VAR 0 10
22294: ST_TO_ADDR
// end ;
22295: GO 22176
22297: POP
22298: POP
// result := array ;
22299: LD_ADDR_VAR 0 5
22303: PUSH
22304: LD_VAR 0 1
22308: ST_TO_ADDR
// end ;
22309: LD_VAR 0 5
22313: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22314: LD_INT 0
22316: PPUSH
22317: PPUSH
// result := 0 ;
22318: LD_ADDR_VAR 0 3
22322: PUSH
22323: LD_INT 0
22325: ST_TO_ADDR
// if not array or not value in array then
22326: LD_VAR 0 1
22330: NOT
22331: IFTRUE 22346
22333: PUSH
22334: LD_VAR 0 2
22338: PUSH
22339: LD_VAR 0 1
22343: IN
22344: NOT
22345: OR
22346: IFFALSE 22350
// exit ;
22348: GO 22404
// for i = 1 to array do
22350: LD_ADDR_VAR 0 4
22354: PUSH
22355: DOUBLE
22356: LD_INT 1
22358: DEC
22359: ST_TO_ADDR
22360: LD_VAR 0 1
22364: PUSH
22365: FOR_TO
22366: IFFALSE 22402
// if value = array [ i ] then
22368: LD_VAR 0 2
22372: PUSH
22373: LD_VAR 0 1
22377: PUSH
22378: LD_VAR 0 4
22382: ARRAY
22383: EQUAL
22384: IFFALSE 22400
// begin result := i ;
22386: LD_ADDR_VAR 0 3
22390: PUSH
22391: LD_VAR 0 4
22395: ST_TO_ADDR
// exit ;
22396: POP
22397: POP
22398: GO 22404
// end ;
22400: GO 22365
22402: POP
22403: POP
// end ;
22404: LD_VAR 0 3
22408: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22409: LD_INT 0
22411: PPUSH
// vc_chassis := chassis ;
22412: LD_ADDR_OWVAR 37
22416: PUSH
22417: LD_VAR 0 1
22421: ST_TO_ADDR
// vc_engine := engine ;
22422: LD_ADDR_OWVAR 39
22426: PUSH
22427: LD_VAR 0 2
22431: ST_TO_ADDR
// vc_control := control ;
22432: LD_ADDR_OWVAR 38
22436: PUSH
22437: LD_VAR 0 3
22441: ST_TO_ADDR
// vc_weapon := weapon ;
22442: LD_ADDR_OWVAR 40
22446: PUSH
22447: LD_VAR 0 4
22451: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22452: LD_ADDR_OWVAR 41
22456: PUSH
22457: LD_VAR 0 5
22461: ST_TO_ADDR
// end ;
22462: LD_VAR 0 6
22466: RET
// export function WantPlant ( unit ) ; var task ; begin
22467: LD_INT 0
22469: PPUSH
22470: PPUSH
// result := false ;
22471: LD_ADDR_VAR 0 2
22475: PUSH
22476: LD_INT 0
22478: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22479: LD_ADDR_VAR 0 3
22483: PUSH
22484: LD_VAR 0 1
22488: PPUSH
22489: CALL_OW 437
22493: ST_TO_ADDR
// if task then
22494: LD_VAR 0 3
22498: IFFALSE 22526
// if task [ 1 ] [ 1 ] = p then
22500: LD_VAR 0 3
22504: PUSH
22505: LD_INT 1
22507: ARRAY
22508: PUSH
22509: LD_INT 1
22511: ARRAY
22512: PUSH
22513: LD_STRING p
22515: EQUAL
22516: IFFALSE 22526
// result := true ;
22518: LD_ADDR_VAR 0 2
22522: PUSH
22523: LD_INT 1
22525: ST_TO_ADDR
// end ;
22526: LD_VAR 0 2
22530: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22531: LD_INT 0
22533: PPUSH
22534: PPUSH
22535: PPUSH
22536: PPUSH
// if pos < 1 then
22537: LD_VAR 0 2
22541: PUSH
22542: LD_INT 1
22544: LESS
22545: IFFALSE 22549
// exit ;
22547: GO 22852
// if pos = 1 then
22549: LD_VAR 0 2
22553: PUSH
22554: LD_INT 1
22556: EQUAL
22557: IFFALSE 22590
// result := Replace ( arr , pos [ 1 ] , value ) else
22559: LD_ADDR_VAR 0 4
22563: PUSH
22564: LD_VAR 0 1
22568: PPUSH
22569: LD_VAR 0 2
22573: PUSH
22574: LD_INT 1
22576: ARRAY
22577: PPUSH
22578: LD_VAR 0 3
22582: PPUSH
22583: CALL_OW 1
22587: ST_TO_ADDR
22588: GO 22852
// begin tmp := arr ;
22590: LD_ADDR_VAR 0 6
22594: PUSH
22595: LD_VAR 0 1
22599: ST_TO_ADDR
// s_arr := [ tmp ] ;
22600: LD_ADDR_VAR 0 7
22604: PUSH
22605: LD_VAR 0 6
22609: PUSH
22610: EMPTY
22611: LIST
22612: ST_TO_ADDR
// for i = 1 to pos - 1 do
22613: LD_ADDR_VAR 0 5
22617: PUSH
22618: DOUBLE
22619: LD_INT 1
22621: DEC
22622: ST_TO_ADDR
22623: LD_VAR 0 2
22627: PUSH
22628: LD_INT 1
22630: MINUS
22631: PUSH
22632: FOR_TO
22633: IFFALSE 22678
// begin tmp := tmp [ pos [ i ] ] ;
22635: LD_ADDR_VAR 0 6
22639: PUSH
22640: LD_VAR 0 6
22644: PUSH
22645: LD_VAR 0 2
22649: PUSH
22650: LD_VAR 0 5
22654: ARRAY
22655: ARRAY
22656: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22657: LD_ADDR_VAR 0 7
22661: PUSH
22662: LD_VAR 0 7
22666: PUSH
22667: LD_VAR 0 6
22671: PUSH
22672: EMPTY
22673: LIST
22674: ADD
22675: ST_TO_ADDR
// end ;
22676: GO 22632
22678: POP
22679: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22680: LD_ADDR_VAR 0 6
22684: PUSH
22685: LD_VAR 0 6
22689: PPUSH
22690: LD_VAR 0 2
22694: PUSH
22695: LD_VAR 0 2
22699: ARRAY
22700: PPUSH
22701: LD_VAR 0 3
22705: PPUSH
22706: CALL_OW 1
22710: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22711: LD_ADDR_VAR 0 7
22715: PUSH
22716: LD_VAR 0 7
22720: PPUSH
22721: LD_VAR 0 7
22725: PPUSH
22726: LD_VAR 0 6
22730: PPUSH
22731: CALL_OW 1
22735: ST_TO_ADDR
// for i = s_arr downto 2 do
22736: LD_ADDR_VAR 0 5
22740: PUSH
22741: DOUBLE
22742: LD_VAR 0 7
22746: INC
22747: ST_TO_ADDR
22748: LD_INT 2
22750: PUSH
22751: FOR_DOWNTO
22752: IFFALSE 22836
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22754: LD_ADDR_VAR 0 6
22758: PUSH
22759: LD_VAR 0 7
22763: PUSH
22764: LD_VAR 0 5
22768: PUSH
22769: LD_INT 1
22771: MINUS
22772: ARRAY
22773: PPUSH
22774: LD_VAR 0 2
22778: PUSH
22779: LD_VAR 0 5
22783: PUSH
22784: LD_INT 1
22786: MINUS
22787: ARRAY
22788: PPUSH
22789: LD_VAR 0 7
22793: PUSH
22794: LD_VAR 0 5
22798: ARRAY
22799: PPUSH
22800: CALL_OW 1
22804: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22805: LD_ADDR_VAR 0 7
22809: PUSH
22810: LD_VAR 0 7
22814: PPUSH
22815: LD_VAR 0 5
22819: PUSH
22820: LD_INT 1
22822: MINUS
22823: PPUSH
22824: LD_VAR 0 6
22828: PPUSH
22829: CALL_OW 1
22833: ST_TO_ADDR
// end ;
22834: GO 22751
22836: POP
22837: POP
// result := s_arr [ 1 ] ;
22838: LD_ADDR_VAR 0 4
22842: PUSH
22843: LD_VAR 0 7
22847: PUSH
22848: LD_INT 1
22850: ARRAY
22851: ST_TO_ADDR
// end ; end ;
22852: LD_VAR 0 4
22856: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22857: LD_INT 0
22859: PPUSH
22860: PPUSH
// if not list then
22861: LD_VAR 0 1
22865: NOT
22866: IFFALSE 22870
// exit ;
22868: GO 22961
// i := list [ pos1 ] ;
22870: LD_ADDR_VAR 0 5
22874: PUSH
22875: LD_VAR 0 1
22879: PUSH
22880: LD_VAR 0 2
22884: ARRAY
22885: ST_TO_ADDR
// if not i then
22886: LD_VAR 0 5
22890: NOT
22891: IFFALSE 22895
// exit ;
22893: GO 22961
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22895: LD_ADDR_VAR 0 1
22899: PUSH
22900: LD_VAR 0 1
22904: PPUSH
22905: LD_VAR 0 2
22909: PPUSH
22910: LD_VAR 0 1
22914: PUSH
22915: LD_VAR 0 3
22919: ARRAY
22920: PPUSH
22921: CALL_OW 1
22925: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22926: LD_ADDR_VAR 0 1
22930: PUSH
22931: LD_VAR 0 1
22935: PPUSH
22936: LD_VAR 0 3
22940: PPUSH
22941: LD_VAR 0 5
22945: PPUSH
22946: CALL_OW 1
22950: ST_TO_ADDR
// result := list ;
22951: LD_ADDR_VAR 0 4
22955: PUSH
22956: LD_VAR 0 1
22960: ST_TO_ADDR
// end ;
22961: LD_VAR 0 4
22965: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22966: LD_INT 0
22968: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22969: LD_ADDR_VAR 0 5
22973: PUSH
22974: LD_VAR 0 1
22978: PPUSH
22979: CALL_OW 250
22983: PPUSH
22984: LD_VAR 0 1
22988: PPUSH
22989: CALL_OW 251
22993: PPUSH
22994: LD_VAR 0 2
22998: PPUSH
22999: LD_VAR 0 3
23003: PPUSH
23004: LD_VAR 0 4
23008: PPUSH
23009: CALL 23391 0 5
23013: ST_TO_ADDR
// end ;
23014: LD_VAR 0 5
23018: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
23019: LD_INT 0
23021: PPUSH
23022: PPUSH
23023: PPUSH
23024: PPUSH
// if not list or not unit then
23025: LD_VAR 0 2
23029: NOT
23030: IFTRUE 23039
23032: PUSH
23033: LD_VAR 0 1
23037: NOT
23038: OR
23039: IFFALSE 23043
// exit ;
23041: GO 23386
// result := [ ] ;
23043: LD_ADDR_VAR 0 5
23047: PUSH
23048: EMPTY
23049: ST_TO_ADDR
// for i in list do
23050: LD_ADDR_VAR 0 6
23054: PUSH
23055: LD_VAR 0 2
23059: PUSH
23060: FOR_IN
23061: IFFALSE 23279
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
23063: LD_ADDR_VAR 0 8
23067: PUSH
23068: LD_VAR 0 1
23072: PPUSH
23073: LD_VAR 0 6
23077: PUSH
23078: LD_INT 1
23080: ARRAY
23081: PPUSH
23082: LD_VAR 0 6
23086: PUSH
23087: LD_INT 2
23089: ARRAY
23090: PPUSH
23091: CALL_OW 297
23095: ST_TO_ADDR
// if not Count ( result ) then
23096: LD_VAR 0 5
23100: PPUSH
23101: CALL 19647 0 1
23105: NOT
23106: IFFALSE 23139
// begin result := Join ( result , [ i , tmp ] ) ;
23108: LD_ADDR_VAR 0 5
23112: PUSH
23113: LD_VAR 0 5
23117: PPUSH
23118: LD_VAR 0 6
23122: PUSH
23123: LD_VAR 0 8
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PPUSH
23132: CALL 55579 0 2
23136: ST_TO_ADDR
// continue ;
23137: GO 23060
// end ; if result [ result ] [ 2 ] <= tmp then
23139: LD_VAR 0 5
23143: PUSH
23144: LD_VAR 0 5
23148: ARRAY
23149: PUSH
23150: LD_INT 2
23152: ARRAY
23153: PUSH
23154: LD_VAR 0 8
23158: LESSEQUAL
23159: IFFALSE 23192
// result := Join ( result , [ i , tmp ] ) else
23161: LD_ADDR_VAR 0 5
23165: PUSH
23166: LD_VAR 0 5
23170: PPUSH
23171: LD_VAR 0 6
23175: PUSH
23176: LD_VAR 0 8
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PPUSH
23185: CALL 55579 0 2
23189: ST_TO_ADDR
23190: GO 23277
// begin for j := 1 to Count ( result ) do
23192: LD_ADDR_VAR 0 7
23196: PUSH
23197: DOUBLE
23198: LD_INT 1
23200: DEC
23201: ST_TO_ADDR
23202: LD_VAR 0 5
23206: PPUSH
23207: CALL 19647 0 1
23211: PUSH
23212: FOR_TO
23213: IFFALSE 23275
// begin if tmp < result [ j ] [ 2 ] then
23215: LD_VAR 0 8
23219: PUSH
23220: LD_VAR 0 5
23224: PUSH
23225: LD_VAR 0 7
23229: ARRAY
23230: PUSH
23231: LD_INT 2
23233: ARRAY
23234: LESS
23235: IFFALSE 23273
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23237: LD_ADDR_VAR 0 5
23241: PUSH
23242: LD_VAR 0 5
23246: PPUSH
23247: LD_VAR 0 7
23251: PPUSH
23252: LD_VAR 0 6
23256: PUSH
23257: LD_VAR 0 8
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PPUSH
23266: CALL_OW 2
23270: ST_TO_ADDR
// break ;
23271: GO 23275
// end ; end ;
23273: GO 23212
23275: POP
23276: POP
// end ; end ;
23277: GO 23060
23279: POP
23280: POP
// if result and not asc then
23281: LD_VAR 0 5
23285: IFFALSE 23294
23287: PUSH
23288: LD_VAR 0 3
23292: NOT
23293: AND
23294: IFFALSE 23311
// result := ReverseArray ( result ) ;
23296: LD_ADDR_VAR 0 5
23300: PUSH
23301: LD_VAR 0 5
23305: PPUSH
23306: CALL 50669 0 1
23310: ST_TO_ADDR
// tmp := [ ] ;
23311: LD_ADDR_VAR 0 8
23315: PUSH
23316: EMPTY
23317: ST_TO_ADDR
// if mode then
23318: LD_VAR 0 4
23322: IFFALSE 23386
// begin for i := 1 to result do
23324: LD_ADDR_VAR 0 6
23328: PUSH
23329: DOUBLE
23330: LD_INT 1
23332: DEC
23333: ST_TO_ADDR
23334: LD_VAR 0 5
23338: PUSH
23339: FOR_TO
23340: IFFALSE 23374
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
23342: LD_ADDR_VAR 0 8
23346: PUSH
23347: LD_VAR 0 8
23351: PPUSH
23352: LD_VAR 0 5
23356: PUSH
23357: LD_VAR 0 6
23361: ARRAY
23362: PUSH
23363: LD_INT 1
23365: ARRAY
23366: PPUSH
23367: CALL 55579 0 2
23371: ST_TO_ADDR
23372: GO 23339
23374: POP
23375: POP
// result := tmp ;
23376: LD_ADDR_VAR 0 5
23380: PUSH
23381: LD_VAR 0 8
23385: ST_TO_ADDR
// end ; end ;
23386: LD_VAR 0 5
23390: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
23391: LD_INT 0
23393: PPUSH
23394: PPUSH
23395: PPUSH
23396: PPUSH
// if not list then
23397: LD_VAR 0 3
23401: NOT
23402: IFFALSE 23406
// exit ;
23404: GO 23796
// result := [ ] ;
23406: LD_ADDR_VAR 0 6
23410: PUSH
23411: EMPTY
23412: ST_TO_ADDR
// for i in list do
23413: LD_ADDR_VAR 0 7
23417: PUSH
23418: LD_VAR 0 3
23422: PUSH
23423: FOR_IN
23424: IFFALSE 23626
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23426: LD_ADDR_VAR 0 9
23430: PUSH
23431: LD_VAR 0 7
23435: PPUSH
23436: LD_VAR 0 1
23440: PPUSH
23441: LD_VAR 0 2
23445: PPUSH
23446: CALL_OW 297
23450: ST_TO_ADDR
// if not result then
23451: LD_VAR 0 6
23455: NOT
23456: IFFALSE 23482
// result := [ [ i , tmp ] ] else
23458: LD_ADDR_VAR 0 6
23462: PUSH
23463: LD_VAR 0 7
23467: PUSH
23468: LD_VAR 0 9
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: EMPTY
23478: LIST
23479: ST_TO_ADDR
23480: GO 23624
// begin if result [ result ] [ 2 ] <= tmp then
23482: LD_VAR 0 6
23486: PUSH
23487: LD_VAR 0 6
23491: ARRAY
23492: PUSH
23493: LD_INT 2
23495: ARRAY
23496: PUSH
23497: LD_VAR 0 9
23501: LESSEQUAL
23502: IFFALSE 23544
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23504: LD_ADDR_VAR 0 6
23508: PUSH
23509: LD_VAR 0 6
23513: PPUSH
23514: LD_VAR 0 6
23518: PUSH
23519: LD_INT 1
23521: PLUS
23522: PPUSH
23523: LD_VAR 0 7
23527: PUSH
23528: LD_VAR 0 9
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PPUSH
23537: CALL_OW 2
23541: ST_TO_ADDR
23542: GO 23624
// for j := 1 to result do
23544: LD_ADDR_VAR 0 8
23548: PUSH
23549: DOUBLE
23550: LD_INT 1
23552: DEC
23553: ST_TO_ADDR
23554: LD_VAR 0 6
23558: PUSH
23559: FOR_TO
23560: IFFALSE 23622
// begin if tmp < result [ j ] [ 2 ] then
23562: LD_VAR 0 9
23566: PUSH
23567: LD_VAR 0 6
23571: PUSH
23572: LD_VAR 0 8
23576: ARRAY
23577: PUSH
23578: LD_INT 2
23580: ARRAY
23581: LESS
23582: IFFALSE 23620
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23584: LD_ADDR_VAR 0 6
23588: PUSH
23589: LD_VAR 0 6
23593: PPUSH
23594: LD_VAR 0 8
23598: PPUSH
23599: LD_VAR 0 7
23603: PUSH
23604: LD_VAR 0 9
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PPUSH
23613: CALL_OW 2
23617: ST_TO_ADDR
// break ;
23618: GO 23622
// end ; end ;
23620: GO 23559
23622: POP
23623: POP
// end ; end ;
23624: GO 23423
23626: POP
23627: POP
// if result and not asc then
23628: LD_VAR 0 6
23632: IFFALSE 23641
23634: PUSH
23635: LD_VAR 0 4
23639: NOT
23640: AND
23641: IFFALSE 23716
// begin tmp := result ;
23643: LD_ADDR_VAR 0 9
23647: PUSH
23648: LD_VAR 0 6
23652: ST_TO_ADDR
// for i = tmp downto 1 do
23653: LD_ADDR_VAR 0 7
23657: PUSH
23658: DOUBLE
23659: LD_VAR 0 9
23663: INC
23664: ST_TO_ADDR
23665: LD_INT 1
23667: PUSH
23668: FOR_DOWNTO
23669: IFFALSE 23714
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23671: LD_ADDR_VAR 0 6
23675: PUSH
23676: LD_VAR 0 6
23680: PPUSH
23681: LD_VAR 0 9
23685: PUSH
23686: LD_VAR 0 7
23690: MINUS
23691: PUSH
23692: LD_INT 1
23694: PLUS
23695: PPUSH
23696: LD_VAR 0 9
23700: PUSH
23701: LD_VAR 0 7
23705: ARRAY
23706: PPUSH
23707: CALL_OW 1
23711: ST_TO_ADDR
23712: GO 23668
23714: POP
23715: POP
// end ; tmp := [ ] ;
23716: LD_ADDR_VAR 0 9
23720: PUSH
23721: EMPTY
23722: ST_TO_ADDR
// if mode then
23723: LD_VAR 0 5
23727: IFFALSE 23796
// begin for i = 1 to result do
23729: LD_ADDR_VAR 0 7
23733: PUSH
23734: DOUBLE
23735: LD_INT 1
23737: DEC
23738: ST_TO_ADDR
23739: LD_VAR 0 6
23743: PUSH
23744: FOR_TO
23745: IFFALSE 23784
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23747: LD_ADDR_VAR 0 9
23751: PUSH
23752: LD_VAR 0 9
23756: PPUSH
23757: LD_VAR 0 7
23761: PPUSH
23762: LD_VAR 0 6
23766: PUSH
23767: LD_VAR 0 7
23771: ARRAY
23772: PUSH
23773: LD_INT 1
23775: ARRAY
23776: PPUSH
23777: CALL_OW 1
23781: ST_TO_ADDR
23782: GO 23744
23784: POP
23785: POP
// result := tmp ;
23786: LD_ADDR_VAR 0 6
23790: PUSH
23791: LD_VAR 0 9
23795: ST_TO_ADDR
// end ; end ;
23796: LD_VAR 0 6
23800: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23801: LD_INT 0
23803: PPUSH
23804: PPUSH
23805: PPUSH
23806: PPUSH
23807: PPUSH
23808: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23809: LD_ADDR_VAR 0 5
23813: PUSH
23814: LD_INT 0
23816: PUSH
23817: LD_INT 0
23819: PUSH
23820: LD_INT 0
23822: PUSH
23823: EMPTY
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: ST_TO_ADDR
// if not x or not y then
23831: LD_VAR 0 2
23835: NOT
23836: IFTRUE 23845
23838: PUSH
23839: LD_VAR 0 3
23843: NOT
23844: OR
23845: IFFALSE 23849
// exit ;
23847: GO 25505
// if not range then
23849: LD_VAR 0 4
23853: NOT
23854: IFFALSE 23864
// range := 10 ;
23856: LD_ADDR_VAR 0 4
23860: PUSH
23861: LD_INT 10
23863: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23864: LD_ADDR_VAR 0 8
23868: PUSH
23869: LD_INT 81
23871: PUSH
23872: LD_VAR 0 1
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 92
23883: PUSH
23884: LD_VAR 0 2
23888: PUSH
23889: LD_VAR 0 3
23893: PUSH
23894: LD_VAR 0 4
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 3
23907: PUSH
23908: LD_INT 21
23910: PUSH
23911: LD_INT 3
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: LIST
23926: PPUSH
23927: CALL_OW 69
23931: ST_TO_ADDR
// if not tmp then
23932: LD_VAR 0 8
23936: NOT
23937: IFFALSE 23941
// exit ;
23939: GO 25505
// for i in tmp do
23941: LD_ADDR_VAR 0 6
23945: PUSH
23946: LD_VAR 0 8
23950: PUSH
23951: FOR_IN
23952: IFFALSE 25480
// begin points := [ 0 , 0 , 0 ] ;
23954: LD_ADDR_VAR 0 9
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: LD_INT 0
23964: PUSH
23965: LD_INT 0
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: LIST
23972: ST_TO_ADDR
// bpoints := 1 ;
23973: LD_ADDR_VAR 0 10
23977: PUSH
23978: LD_INT 1
23980: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23981: LD_VAR 0 6
23985: PPUSH
23986: CALL_OW 247
23990: PUSH
23991: LD_INT 1
23993: DOUBLE
23994: EQUAL
23995: IFTRUE 23999
23997: GO 24581
23999: POP
// begin if GetClass ( i ) = 1 then
24000: LD_VAR 0 6
24004: PPUSH
24005: CALL_OW 257
24009: PUSH
24010: LD_INT 1
24012: EQUAL
24013: IFFALSE 24034
// points := [ 10 , 5 , 3 ] ;
24015: LD_ADDR_VAR 0 9
24019: PUSH
24020: LD_INT 10
24022: PUSH
24023: LD_INT 5
24025: PUSH
24026: LD_INT 3
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: LIST
24033: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
24034: LD_VAR 0 6
24038: PPUSH
24039: CALL_OW 257
24043: PUSH
24044: LD_INT 2
24046: PUSH
24047: LD_INT 3
24049: PUSH
24050: LD_INT 4
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: LIST
24057: IN
24058: IFFALSE 24079
// points := [ 3 , 2 , 1 ] ;
24060: LD_ADDR_VAR 0 9
24064: PUSH
24065: LD_INT 3
24067: PUSH
24068: LD_INT 2
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: ST_TO_ADDR
// if GetClass ( i ) = 5 then
24079: LD_VAR 0 6
24083: PPUSH
24084: CALL_OW 257
24088: PUSH
24089: LD_INT 5
24091: EQUAL
24092: IFFALSE 24113
// points := [ 130 , 5 , 2 ] ;
24094: LD_ADDR_VAR 0 9
24098: PUSH
24099: LD_INT 130
24101: PUSH
24102: LD_INT 5
24104: PUSH
24105: LD_INT 2
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: LIST
24112: ST_TO_ADDR
// if GetClass ( i ) = 8 then
24113: LD_VAR 0 6
24117: PPUSH
24118: CALL_OW 257
24122: PUSH
24123: LD_INT 8
24125: EQUAL
24126: IFFALSE 24147
// points := [ 35 , 35 , 30 ] ;
24128: LD_ADDR_VAR 0 9
24132: PUSH
24133: LD_INT 35
24135: PUSH
24136: LD_INT 35
24138: PUSH
24139: LD_INT 30
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: ST_TO_ADDR
// if GetClass ( i ) = 9 then
24147: LD_VAR 0 6
24151: PPUSH
24152: CALL_OW 257
24156: PUSH
24157: LD_INT 9
24159: EQUAL
24160: IFFALSE 24181
// points := [ 20 , 55 , 40 ] ;
24162: LD_ADDR_VAR 0 9
24166: PUSH
24167: LD_INT 20
24169: PUSH
24170: LD_INT 55
24172: PUSH
24173: LD_INT 40
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: LIST
24180: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
24181: LD_VAR 0 6
24185: PPUSH
24186: CALL_OW 257
24190: PUSH
24191: LD_INT 12
24193: PUSH
24194: LD_INT 16
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: IN
24201: IFFALSE 24222
// points := [ 5 , 3 , 2 ] ;
24203: LD_ADDR_VAR 0 9
24207: PUSH
24208: LD_INT 5
24210: PUSH
24211: LD_INT 3
24213: PUSH
24214: LD_INT 2
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: LIST
24221: ST_TO_ADDR
// if GetClass ( i ) = 17 then
24222: LD_VAR 0 6
24226: PPUSH
24227: CALL_OW 257
24231: PUSH
24232: LD_INT 17
24234: EQUAL
24235: IFFALSE 24256
// points := [ 100 , 50 , 75 ] ;
24237: LD_ADDR_VAR 0 9
24241: PUSH
24242: LD_INT 100
24244: PUSH
24245: LD_INT 50
24247: PUSH
24248: LD_INT 75
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: LIST
24255: ST_TO_ADDR
// if GetClass ( i ) = 15 then
24256: LD_VAR 0 6
24260: PPUSH
24261: CALL_OW 257
24265: PUSH
24266: LD_INT 15
24268: EQUAL
24269: IFFALSE 24290
// points := [ 10 , 5 , 3 ] ;
24271: LD_ADDR_VAR 0 9
24275: PUSH
24276: LD_INT 10
24278: PUSH
24279: LD_INT 5
24281: PUSH
24282: LD_INT 3
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: LIST
24289: ST_TO_ADDR
// if GetClass ( i ) = 14 then
24290: LD_VAR 0 6
24294: PPUSH
24295: CALL_OW 257
24299: PUSH
24300: LD_INT 14
24302: EQUAL
24303: IFFALSE 24324
// points := [ 10 , 0 , 0 ] ;
24305: LD_ADDR_VAR 0 9
24309: PUSH
24310: LD_INT 10
24312: PUSH
24313: LD_INT 0
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: LIST
24323: ST_TO_ADDR
// if GetClass ( i ) = 11 then
24324: LD_VAR 0 6
24328: PPUSH
24329: CALL_OW 257
24333: PUSH
24334: LD_INT 11
24336: EQUAL
24337: IFFALSE 24358
// points := [ 30 , 10 , 5 ] ;
24339: LD_ADDR_VAR 0 9
24343: PUSH
24344: LD_INT 30
24346: PUSH
24347: LD_INT 10
24349: PUSH
24350: LD_INT 5
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: LIST
24357: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
24358: LD_VAR 0 1
24362: PPUSH
24363: LD_INT 5
24365: PPUSH
24366: CALL_OW 321
24370: PUSH
24371: LD_INT 2
24373: EQUAL
24374: IFFALSE 24391
// bpoints := bpoints * 1.8 ;
24376: LD_ADDR_VAR 0 10
24380: PUSH
24381: LD_VAR 0 10
24385: PUSH
24386: LD_REAL  1.80000000000000E+0000
24389: MUL
24390: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
24391: LD_VAR 0 6
24395: PPUSH
24396: CALL_OW 257
24400: PUSH
24401: LD_INT 1
24403: PUSH
24404: LD_INT 2
24406: PUSH
24407: LD_INT 3
24409: PUSH
24410: LD_INT 4
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: IN
24419: IFFALSE 24439
24421: PUSH
24422: LD_VAR 0 1
24426: PPUSH
24427: LD_INT 51
24429: PPUSH
24430: CALL_OW 321
24434: PUSH
24435: LD_INT 2
24437: EQUAL
24438: AND
24439: IFFALSE 24456
// bpoints := bpoints * 1.2 ;
24441: LD_ADDR_VAR 0 10
24445: PUSH
24446: LD_VAR 0 10
24450: PUSH
24451: LD_REAL  1.20000000000000E+0000
24454: MUL
24455: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24456: LD_VAR 0 6
24460: PPUSH
24461: CALL_OW 257
24465: PUSH
24466: LD_INT 5
24468: PUSH
24469: LD_INT 7
24471: PUSH
24472: LD_INT 9
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: LIST
24479: IN
24480: IFFALSE 24500
24482: PUSH
24483: LD_VAR 0 1
24487: PPUSH
24488: LD_INT 52
24490: PPUSH
24491: CALL_OW 321
24495: PUSH
24496: LD_INT 2
24498: EQUAL
24499: AND
24500: IFFALSE 24517
// bpoints := bpoints * 1.5 ;
24502: LD_ADDR_VAR 0 10
24506: PUSH
24507: LD_VAR 0 10
24511: PUSH
24512: LD_REAL  1.50000000000000E+0000
24515: MUL
24516: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24517: LD_VAR 0 1
24521: PPUSH
24522: LD_INT 66
24524: PPUSH
24525: CALL_OW 321
24529: PUSH
24530: LD_INT 2
24532: EQUAL
24533: IFFALSE 24550
// bpoints := bpoints * 1.1 ;
24535: LD_ADDR_VAR 0 10
24539: PUSH
24540: LD_VAR 0 10
24544: PUSH
24545: LD_REAL  1.10000000000000E+0000
24548: MUL
24549: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24550: LD_ADDR_VAR 0 10
24554: PUSH
24555: LD_VAR 0 10
24559: PUSH
24560: LD_VAR 0 6
24564: PPUSH
24565: LD_INT 1
24567: PPUSH
24568: CALL_OW 259
24572: PUSH
24573: LD_REAL  1.15000000000000E+0000
24576: MUL
24577: MUL
24578: ST_TO_ADDR
// end ; unit_vehicle :
24579: GO 25409
24581: LD_INT 2
24583: DOUBLE
24584: EQUAL
24585: IFTRUE 24589
24587: GO 25397
24589: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24590: LD_VAR 0 6
24594: PPUSH
24595: CALL_OW 264
24599: PUSH
24600: LD_INT 2
24602: PUSH
24603: LD_INT 42
24605: PUSH
24606: LD_INT 24
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: LIST
24613: IN
24614: IFFALSE 24635
// points := [ 25 , 5 , 3 ] ;
24616: LD_ADDR_VAR 0 9
24620: PUSH
24621: LD_INT 25
24623: PUSH
24624: LD_INT 5
24626: PUSH
24627: LD_INT 3
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: LIST
24634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24635: LD_VAR 0 6
24639: PPUSH
24640: CALL_OW 264
24644: PUSH
24645: LD_INT 4
24647: PUSH
24648: LD_INT 43
24650: PUSH
24651: LD_INT 25
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: LIST
24658: IN
24659: IFFALSE 24680
// points := [ 40 , 15 , 5 ] ;
24661: LD_ADDR_VAR 0 9
24665: PUSH
24666: LD_INT 40
24668: PUSH
24669: LD_INT 15
24671: PUSH
24672: LD_INT 5
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: LIST
24679: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24680: LD_VAR 0 6
24684: PPUSH
24685: CALL_OW 264
24689: PUSH
24690: LD_INT 3
24692: PUSH
24693: LD_INT 23
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: IN
24700: IFFALSE 24721
// points := [ 7 , 25 , 8 ] ;
24702: LD_ADDR_VAR 0 9
24706: PUSH
24707: LD_INT 7
24709: PUSH
24710: LD_INT 25
24712: PUSH
24713: LD_INT 8
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: LIST
24720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24721: LD_VAR 0 6
24725: PPUSH
24726: CALL_OW 264
24730: PUSH
24731: LD_INT 5
24733: PUSH
24734: LD_INT 27
24736: PUSH
24737: LD_INT 44
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: LIST
24744: IN
24745: IFFALSE 24766
// points := [ 14 , 50 , 16 ] ;
24747: LD_ADDR_VAR 0 9
24751: PUSH
24752: LD_INT 14
24754: PUSH
24755: LD_INT 50
24757: PUSH
24758: LD_INT 16
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: LIST
24765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24766: LD_VAR 0 6
24770: PPUSH
24771: CALL_OW 264
24775: PUSH
24776: LD_INT 6
24778: PUSH
24779: LD_INT 46
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: IN
24786: IFFALSE 24807
// points := [ 32 , 120 , 70 ] ;
24788: LD_ADDR_VAR 0 9
24792: PUSH
24793: LD_INT 32
24795: PUSH
24796: LD_INT 120
24798: PUSH
24799: LD_INT 70
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: LIST
24806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24807: LD_VAR 0 6
24811: PPUSH
24812: CALL_OW 264
24816: PUSH
24817: LD_INT 7
24819: PUSH
24820: LD_INT 28
24822: PUSH
24823: LD_INT 45
24825: PUSH
24826: LD_INT 92
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: IN
24835: IFFALSE 24856
// points := [ 35 , 20 , 45 ] ;
24837: LD_ADDR_VAR 0 9
24841: PUSH
24842: LD_INT 35
24844: PUSH
24845: LD_INT 20
24847: PUSH
24848: LD_INT 45
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: LIST
24855: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24856: LD_VAR 0 6
24860: PPUSH
24861: CALL_OW 264
24865: PUSH
24866: LD_INT 47
24868: PUSH
24869: EMPTY
24870: LIST
24871: IN
24872: IFFALSE 24893
// points := [ 67 , 45 , 75 ] ;
24874: LD_ADDR_VAR 0 9
24878: PUSH
24879: LD_INT 67
24881: PUSH
24882: LD_INT 45
24884: PUSH
24885: LD_INT 75
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: LIST
24892: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24893: LD_VAR 0 6
24897: PPUSH
24898: CALL_OW 264
24902: PUSH
24903: LD_INT 26
24905: PUSH
24906: EMPTY
24907: LIST
24908: IN
24909: IFFALSE 24930
// points := [ 120 , 30 , 80 ] ;
24911: LD_ADDR_VAR 0 9
24915: PUSH
24916: LD_INT 120
24918: PUSH
24919: LD_INT 30
24921: PUSH
24922: LD_INT 80
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: LIST
24929: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24930: LD_VAR 0 6
24934: PPUSH
24935: CALL_OW 264
24939: PUSH
24940: LD_INT 22
24942: PUSH
24943: EMPTY
24944: LIST
24945: IN
24946: IFFALSE 24967
// points := [ 40 , 1 , 1 ] ;
24948: LD_ADDR_VAR 0 9
24952: PUSH
24953: LD_INT 40
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: LD_INT 1
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: LIST
24966: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24967: LD_VAR 0 6
24971: PPUSH
24972: CALL_OW 264
24976: PUSH
24977: LD_INT 29
24979: PUSH
24980: EMPTY
24981: LIST
24982: IN
24983: IFFALSE 25004
// points := [ 70 , 200 , 400 ] ;
24985: LD_ADDR_VAR 0 9
24989: PUSH
24990: LD_INT 70
24992: PUSH
24993: LD_INT 200
24995: PUSH
24996: LD_INT 400
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: LIST
25003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
25004: LD_VAR 0 6
25008: PPUSH
25009: CALL_OW 264
25013: PUSH
25014: LD_INT 14
25016: PUSH
25017: LD_INT 53
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: IN
25024: IFFALSE 25045
// points := [ 40 , 10 , 20 ] ;
25026: LD_ADDR_VAR 0 9
25030: PUSH
25031: LD_INT 40
25033: PUSH
25034: LD_INT 10
25036: PUSH
25037: LD_INT 20
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: LIST
25044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
25045: LD_VAR 0 6
25049: PPUSH
25050: CALL_OW 264
25054: PUSH
25055: LD_INT 9
25057: PUSH
25058: EMPTY
25059: LIST
25060: IN
25061: IFFALSE 25082
// points := [ 5 , 70 , 20 ] ;
25063: LD_ADDR_VAR 0 9
25067: PUSH
25068: LD_INT 5
25070: PUSH
25071: LD_INT 70
25073: PUSH
25074: LD_INT 20
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: LIST
25081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
25082: LD_VAR 0 6
25086: PPUSH
25087: CALL_OW 264
25091: PUSH
25092: LD_INT 10
25094: PUSH
25095: EMPTY
25096: LIST
25097: IN
25098: IFFALSE 25119
// points := [ 35 , 110 , 70 ] ;
25100: LD_ADDR_VAR 0 9
25104: PUSH
25105: LD_INT 35
25107: PUSH
25108: LD_INT 110
25110: PUSH
25111: LD_INT 70
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: LIST
25118: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
25119: LD_VAR 0 6
25123: PPUSH
25124: CALL_OW 265
25128: PUSH
25129: LD_INT 25
25131: EQUAL
25132: IFFALSE 25153
// points := [ 80 , 65 , 100 ] ;
25134: LD_ADDR_VAR 0 9
25138: PUSH
25139: LD_INT 80
25141: PUSH
25142: LD_INT 65
25144: PUSH
25145: LD_INT 100
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: LIST
25152: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
25153: LD_VAR 0 6
25157: PPUSH
25158: CALL_OW 263
25162: PUSH
25163: LD_INT 1
25165: EQUAL
25166: IFFALSE 25201
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
25168: LD_ADDR_VAR 0 10
25172: PUSH
25173: LD_VAR 0 10
25177: PUSH
25178: LD_VAR 0 6
25182: PPUSH
25183: CALL_OW 311
25187: PPUSH
25188: LD_INT 3
25190: PPUSH
25191: CALL_OW 259
25195: PUSH
25196: LD_INT 4
25198: MUL
25199: MUL
25200: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
25201: LD_VAR 0 6
25205: PPUSH
25206: CALL_OW 263
25210: PUSH
25211: LD_INT 2
25213: EQUAL
25214: IFFALSE 25265
// begin j := IsControledBy ( i ) ;
25216: LD_ADDR_VAR 0 7
25220: PUSH
25221: LD_VAR 0 6
25225: PPUSH
25226: CALL_OW 312
25230: ST_TO_ADDR
// if j then
25231: LD_VAR 0 7
25235: IFFALSE 25265
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
25237: LD_ADDR_VAR 0 10
25241: PUSH
25242: LD_VAR 0 10
25246: PUSH
25247: LD_VAR 0 7
25251: PPUSH
25252: LD_INT 3
25254: PPUSH
25255: CALL_OW 259
25259: PUSH
25260: LD_INT 3
25262: MUL
25263: MUL
25264: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
25265: LD_VAR 0 6
25269: PPUSH
25270: CALL_OW 264
25274: PUSH
25275: LD_INT 5
25277: PUSH
25278: LD_INT 6
25280: PUSH
25281: LD_INT 46
25283: PUSH
25284: LD_INT 44
25286: PUSH
25287: LD_INT 47
25289: PUSH
25290: LD_INT 45
25292: PUSH
25293: LD_INT 28
25295: PUSH
25296: LD_INT 7
25298: PUSH
25299: LD_INT 27
25301: PUSH
25302: LD_INT 29
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: IN
25317: IFFALSE 25337
25319: PUSH
25320: LD_VAR 0 1
25324: PPUSH
25325: LD_INT 52
25327: PPUSH
25328: CALL_OW 321
25332: PUSH
25333: LD_INT 2
25335: EQUAL
25336: AND
25337: IFFALSE 25354
// bpoints := bpoints * 1.2 ;
25339: LD_ADDR_VAR 0 10
25343: PUSH
25344: LD_VAR 0 10
25348: PUSH
25349: LD_REAL  1.20000000000000E+0000
25352: MUL
25353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
25354: LD_VAR 0 6
25358: PPUSH
25359: CALL_OW 264
25363: PUSH
25364: LD_INT 6
25366: PUSH
25367: LD_INT 46
25369: PUSH
25370: LD_INT 47
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: LIST
25377: IN
25378: IFFALSE 25395
// bpoints := bpoints * 1.2 ;
25380: LD_ADDR_VAR 0 10
25384: PUSH
25385: LD_VAR 0 10
25389: PUSH
25390: LD_REAL  1.20000000000000E+0000
25393: MUL
25394: ST_TO_ADDR
// end ; unit_building :
25395: GO 25409
25397: LD_INT 3
25399: DOUBLE
25400: EQUAL
25401: IFTRUE 25405
25403: GO 25408
25405: POP
// ; end ;
25406: GO 25409
25408: POP
// for j = 1 to 3 do
25409: LD_ADDR_VAR 0 7
25413: PUSH
25414: DOUBLE
25415: LD_INT 1
25417: DEC
25418: ST_TO_ADDR
25419: LD_INT 3
25421: PUSH
25422: FOR_TO
25423: IFFALSE 25476
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
25425: LD_ADDR_VAR 0 5
25429: PUSH
25430: LD_VAR 0 5
25434: PPUSH
25435: LD_VAR 0 7
25439: PPUSH
25440: LD_VAR 0 5
25444: PUSH
25445: LD_VAR 0 7
25449: ARRAY
25450: PUSH
25451: LD_VAR 0 9
25455: PUSH
25456: LD_VAR 0 7
25460: ARRAY
25461: PUSH
25462: LD_VAR 0 10
25466: MUL
25467: PLUS
25468: PPUSH
25469: CALL_OW 1
25473: ST_TO_ADDR
25474: GO 25422
25476: POP
25477: POP
// end ;
25478: GO 23951
25480: POP
25481: POP
// result := Replace ( result , 4 , tmp ) ;
25482: LD_ADDR_VAR 0 5
25486: PUSH
25487: LD_VAR 0 5
25491: PPUSH
25492: LD_INT 4
25494: PPUSH
25495: LD_VAR 0 8
25499: PPUSH
25500: CALL_OW 1
25504: ST_TO_ADDR
// end ;
25505: LD_VAR 0 5
25509: RET
// export function DangerAtRange ( unit , range ) ; begin
25510: LD_INT 0
25512: PPUSH
// if not unit then
25513: LD_VAR 0 1
25517: NOT
25518: IFFALSE 25522
// exit ;
25520: GO 25567
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25522: LD_ADDR_VAR 0 3
25526: PUSH
25527: LD_VAR 0 1
25531: PPUSH
25532: CALL_OW 255
25536: PPUSH
25537: LD_VAR 0 1
25541: PPUSH
25542: CALL_OW 250
25546: PPUSH
25547: LD_VAR 0 1
25551: PPUSH
25552: CALL_OW 251
25556: PPUSH
25557: LD_VAR 0 2
25561: PPUSH
25562: CALL 23801 0 4
25566: ST_TO_ADDR
// end ;
25567: LD_VAR 0 3
25571: RET
// export function DangerInArea ( side , area ) ; begin
25572: LD_INT 0
25574: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25575: LD_ADDR_VAR 0 3
25579: PUSH
25580: LD_VAR 0 2
25584: PPUSH
25585: LD_INT 81
25587: PUSH
25588: LD_VAR 0 1
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PPUSH
25597: CALL_OW 70
25601: ST_TO_ADDR
// end ;
25602: LD_VAR 0 3
25606: RET
// export function IsExtension ( b ) ; begin
25607: LD_INT 0
25609: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25610: LD_ADDR_VAR 0 2
25614: PUSH
25615: LD_VAR 0 1
25619: PUSH
25620: LD_INT 23
25622: PUSH
25623: LD_INT 20
25625: PUSH
25626: LD_INT 22
25628: PUSH
25629: LD_INT 17
25631: PUSH
25632: LD_INT 24
25634: PUSH
25635: LD_INT 21
25637: PUSH
25638: LD_INT 19
25640: PUSH
25641: LD_INT 16
25643: PUSH
25644: LD_INT 25
25646: PUSH
25647: LD_INT 18
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: IN
25662: ST_TO_ADDR
// end ;
25663: LD_VAR 0 2
25667: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25668: LD_INT 0
25670: PPUSH
25671: PPUSH
25672: PPUSH
// result := [ ] ;
25673: LD_ADDR_VAR 0 4
25677: PUSH
25678: EMPTY
25679: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25680: LD_ADDR_VAR 0 5
25684: PUSH
25685: LD_VAR 0 2
25689: PPUSH
25690: LD_INT 21
25692: PUSH
25693: LD_INT 3
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PPUSH
25700: CALL_OW 70
25704: ST_TO_ADDR
// if not tmp then
25705: LD_VAR 0 5
25709: NOT
25710: IFFALSE 25714
// exit ;
25712: GO 25778
// if checkLink then
25714: LD_VAR 0 3
25718: IFFALSE 25768
// begin for i in tmp do
25720: LD_ADDR_VAR 0 6
25724: PUSH
25725: LD_VAR 0 5
25729: PUSH
25730: FOR_IN
25731: IFFALSE 25766
// if GetBase ( i ) <> base then
25733: LD_VAR 0 6
25737: PPUSH
25738: CALL_OW 274
25742: PUSH
25743: LD_VAR 0 1
25747: NONEQUAL
25748: IFFALSE 25764
// ComLinkToBase ( base , i ) ;
25750: LD_VAR 0 1
25754: PPUSH
25755: LD_VAR 0 6
25759: PPUSH
25760: CALL_OW 169
25764: GO 25730
25766: POP
25767: POP
// end ; result := tmp ;
25768: LD_ADDR_VAR 0 4
25772: PUSH
25773: LD_VAR 0 5
25777: ST_TO_ADDR
// end ;
25778: LD_VAR 0 4
25782: RET
// export function ComComplete ( units , b ) ; var i ; begin
25783: LD_INT 0
25785: PPUSH
25786: PPUSH
// if not units then
25787: LD_VAR 0 1
25791: NOT
25792: IFFALSE 25796
// exit ;
25794: GO 25886
// for i in units do
25796: LD_ADDR_VAR 0 4
25800: PUSH
25801: LD_VAR 0 1
25805: PUSH
25806: FOR_IN
25807: IFFALSE 25884
// if BuildingStatus ( b ) = bs_build then
25809: LD_VAR 0 2
25813: PPUSH
25814: CALL_OW 461
25818: PUSH
25819: LD_INT 1
25821: EQUAL
25822: IFFALSE 25882
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25824: LD_VAR 0 4
25828: PPUSH
25829: LD_STRING h
25831: PUSH
25832: LD_VAR 0 2
25836: PPUSH
25837: CALL_OW 250
25841: PUSH
25842: LD_VAR 0 2
25846: PPUSH
25847: CALL_OW 251
25851: PUSH
25852: LD_VAR 0 2
25856: PUSH
25857: LD_INT 0
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: LD_INT 0
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: PUSH
25875: EMPTY
25876: LIST
25877: PPUSH
25878: CALL_OW 446
25882: GO 25806
25884: POP
25885: POP
// end ;
25886: LD_VAR 0 3
25890: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25891: LD_INT 0
25893: PPUSH
25894: PPUSH
25895: PPUSH
25896: PPUSH
25897: PPUSH
25898: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25899: LD_VAR 0 1
25903: NOT
25904: IFTRUE 25921
25906: PUSH
25907: LD_VAR 0 1
25911: PPUSH
25912: CALL_OW 263
25916: PUSH
25917: LD_INT 2
25919: NONEQUAL
25920: OR
25921: IFFALSE 25925
// exit ;
25923: GO 26241
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25925: LD_ADDR_VAR 0 6
25929: PUSH
25930: LD_INT 22
25932: PUSH
25933: LD_VAR 0 1
25937: PPUSH
25938: CALL_OW 255
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 2
25949: PUSH
25950: LD_INT 30
25952: PUSH
25953: LD_INT 36
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 34
25962: PUSH
25963: LD_INT 31
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: LIST
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PPUSH
25979: CALL_OW 69
25983: ST_TO_ADDR
// if not tmp then
25984: LD_VAR 0 6
25988: NOT
25989: IFFALSE 25993
// exit ;
25991: GO 26241
// result := [ ] ;
25993: LD_ADDR_VAR 0 2
25997: PUSH
25998: EMPTY
25999: ST_TO_ADDR
// for i in tmp do
26000: LD_ADDR_VAR 0 3
26004: PUSH
26005: LD_VAR 0 6
26009: PUSH
26010: FOR_IN
26011: IFFALSE 26082
// begin t := UnitsInside ( i ) ;
26013: LD_ADDR_VAR 0 4
26017: PUSH
26018: LD_VAR 0 3
26022: PPUSH
26023: CALL_OW 313
26027: ST_TO_ADDR
// if t then
26028: LD_VAR 0 4
26032: IFFALSE 26080
// for j in t do
26034: LD_ADDR_VAR 0 7
26038: PUSH
26039: LD_VAR 0 4
26043: PUSH
26044: FOR_IN
26045: IFFALSE 26078
// result := Replace ( result , result + 1 , j ) ;
26047: LD_ADDR_VAR 0 2
26051: PUSH
26052: LD_VAR 0 2
26056: PPUSH
26057: LD_VAR 0 2
26061: PUSH
26062: LD_INT 1
26064: PLUS
26065: PPUSH
26066: LD_VAR 0 7
26070: PPUSH
26071: CALL_OW 1
26075: ST_TO_ADDR
26076: GO 26044
26078: POP
26079: POP
// end ;
26080: GO 26010
26082: POP
26083: POP
// if not result then
26084: LD_VAR 0 2
26088: NOT
26089: IFFALSE 26093
// exit ;
26091: GO 26241
// mech := result [ 1 ] ;
26093: LD_ADDR_VAR 0 5
26097: PUSH
26098: LD_VAR 0 2
26102: PUSH
26103: LD_INT 1
26105: ARRAY
26106: ST_TO_ADDR
// if result > 1 then
26107: LD_VAR 0 2
26111: PUSH
26112: LD_INT 1
26114: GREATER
26115: IFFALSE 26227
// begin for i = 2 to result do
26117: LD_ADDR_VAR 0 3
26121: PUSH
26122: DOUBLE
26123: LD_INT 2
26125: DEC
26126: ST_TO_ADDR
26127: LD_VAR 0 2
26131: PUSH
26132: FOR_TO
26133: IFFALSE 26225
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
26135: LD_ADDR_VAR 0 4
26139: PUSH
26140: LD_VAR 0 2
26144: PUSH
26145: LD_VAR 0 3
26149: ARRAY
26150: PPUSH
26151: LD_INT 3
26153: PPUSH
26154: CALL_OW 259
26158: PUSH
26159: LD_VAR 0 2
26163: PUSH
26164: LD_VAR 0 3
26168: ARRAY
26169: PPUSH
26170: CALL_OW 432
26174: MINUS
26175: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
26176: LD_VAR 0 4
26180: PUSH
26181: LD_VAR 0 5
26185: PPUSH
26186: LD_INT 3
26188: PPUSH
26189: CALL_OW 259
26193: PUSH
26194: LD_VAR 0 5
26198: PPUSH
26199: CALL_OW 432
26203: MINUS
26204: GREATEREQUAL
26205: IFFALSE 26223
// mech := result [ i ] ;
26207: LD_ADDR_VAR 0 5
26211: PUSH
26212: LD_VAR 0 2
26216: PUSH
26217: LD_VAR 0 3
26221: ARRAY
26222: ST_TO_ADDR
// end ;
26223: GO 26132
26225: POP
26226: POP
// end ; ComLinkTo ( vehicle , mech ) ;
26227: LD_VAR 0 1
26231: PPUSH
26232: LD_VAR 0 5
26236: PPUSH
26237: CALL_OW 135
// end ;
26241: LD_VAR 0 2
26245: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
26246: LD_INT 0
26248: PPUSH
26249: PPUSH
26250: PPUSH
26251: PPUSH
26252: PPUSH
26253: PPUSH
26254: PPUSH
26255: PPUSH
26256: PPUSH
26257: PPUSH
26258: PPUSH
26259: PPUSH
26260: PPUSH
// result := [ ] ;
26261: LD_ADDR_VAR 0 7
26265: PUSH
26266: EMPTY
26267: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
26268: LD_VAR 0 1
26272: PPUSH
26273: CALL_OW 266
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: LD_INT 1
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: IN
26288: NOT
26289: IFFALSE 26293
// exit ;
26291: GO 27933
// if name then
26293: LD_VAR 0 3
26297: IFFALSE 26313
// SetBName ( base_dep , name ) ;
26299: LD_VAR 0 1
26303: PPUSH
26304: LD_VAR 0 3
26308: PPUSH
26309: CALL_OW 500
// base := GetBase ( base_dep ) ;
26313: LD_ADDR_VAR 0 15
26317: PUSH
26318: LD_VAR 0 1
26322: PPUSH
26323: CALL_OW 274
26327: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
26328: LD_ADDR_VAR 0 16
26332: PUSH
26333: LD_VAR 0 1
26337: PPUSH
26338: CALL_OW 255
26342: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
26343: LD_ADDR_VAR 0 17
26347: PUSH
26348: LD_VAR 0 1
26352: PPUSH
26353: CALL_OW 248
26357: ST_TO_ADDR
// if sources then
26358: LD_VAR 0 5
26362: IFFALSE 26409
// for i = 1 to 3 do
26364: LD_ADDR_VAR 0 8
26368: PUSH
26369: DOUBLE
26370: LD_INT 1
26372: DEC
26373: ST_TO_ADDR
26374: LD_INT 3
26376: PUSH
26377: FOR_TO
26378: IFFALSE 26407
// AddResourceType ( base , i , sources [ i ] ) ;
26380: LD_VAR 0 15
26384: PPUSH
26385: LD_VAR 0 8
26389: PPUSH
26390: LD_VAR 0 5
26394: PUSH
26395: LD_VAR 0 8
26399: ARRAY
26400: PPUSH
26401: CALL_OW 276
26405: GO 26377
26407: POP
26408: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
26409: LD_ADDR_VAR 0 18
26413: PUSH
26414: LD_VAR 0 15
26418: PPUSH
26419: LD_VAR 0 2
26423: PPUSH
26424: LD_INT 1
26426: PPUSH
26427: CALL 25668 0 3
26431: ST_TO_ADDR
// InitHc ;
26432: CALL_OW 19
// InitUc ;
26436: CALL_OW 18
// uc_side := side ;
26440: LD_ADDR_OWVAR 20
26444: PUSH
26445: LD_VAR 0 16
26449: ST_TO_ADDR
// uc_nation := nation ;
26450: LD_ADDR_OWVAR 21
26454: PUSH
26455: LD_VAR 0 17
26459: ST_TO_ADDR
// if buildings then
26460: LD_VAR 0 18
26464: IFFALSE 27792
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
26466: LD_ADDR_VAR 0 19
26470: PUSH
26471: LD_VAR 0 18
26475: PPUSH
26476: LD_INT 2
26478: PUSH
26479: LD_INT 30
26481: PUSH
26482: LD_INT 29
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 30
26491: PUSH
26492: LD_INT 30
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: LIST
26503: PPUSH
26504: CALL_OW 72
26508: ST_TO_ADDR
// if tmp then
26509: LD_VAR 0 19
26513: IFFALSE 26561
// for i in tmp do
26515: LD_ADDR_VAR 0 8
26519: PUSH
26520: LD_VAR 0 19
26524: PUSH
26525: FOR_IN
26526: IFFALSE 26559
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26528: LD_VAR 0 8
26532: PPUSH
26533: CALL_OW 250
26537: PPUSH
26538: LD_VAR 0 8
26542: PPUSH
26543: CALL_OW 251
26547: PPUSH
26548: LD_VAR 0 16
26552: PPUSH
26553: CALL_OW 441
26557: GO 26525
26559: POP
26560: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26561: LD_VAR 0 18
26565: PPUSH
26566: LD_INT 2
26568: PUSH
26569: LD_INT 30
26571: PUSH
26572: LD_INT 32
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 30
26581: PUSH
26582: LD_INT 33
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: LIST
26593: PPUSH
26594: CALL_OW 72
26598: IFFALSE 26686
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26600: LD_ADDR_VAR 0 8
26604: PUSH
26605: LD_VAR 0 18
26609: PPUSH
26610: LD_INT 2
26612: PUSH
26613: LD_INT 30
26615: PUSH
26616: LD_INT 32
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 30
26625: PUSH
26626: LD_INT 33
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: LIST
26637: PPUSH
26638: CALL_OW 72
26642: PUSH
26643: FOR_IN
26644: IFFALSE 26684
// begin if not GetBWeapon ( i ) then
26646: LD_VAR 0 8
26650: PPUSH
26651: CALL_OW 269
26655: NOT
26656: IFFALSE 26682
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26658: LD_VAR 0 8
26662: PPUSH
26663: LD_VAR 0 8
26667: PPUSH
26668: LD_VAR 0 2
26672: PPUSH
26673: CALL 27938 0 2
26677: PPUSH
26678: CALL_OW 431
// end ;
26682: GO 26643
26684: POP
26685: POP
// end ; for i = 1 to personel do
26686: LD_ADDR_VAR 0 8
26690: PUSH
26691: DOUBLE
26692: LD_INT 1
26694: DEC
26695: ST_TO_ADDR
26696: LD_VAR 0 6
26700: PUSH
26701: FOR_TO
26702: IFFALSE 27772
// begin if i > 4 then
26704: LD_VAR 0 8
26708: PUSH
26709: LD_INT 4
26711: GREATER
26712: IFFALSE 26716
// break ;
26714: GO 27772
// case i of 1 :
26716: LD_VAR 0 8
26720: PUSH
26721: LD_INT 1
26723: DOUBLE
26724: EQUAL
26725: IFTRUE 26729
26727: GO 26809
26729: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26730: LD_ADDR_VAR 0 12
26734: PUSH
26735: LD_VAR 0 18
26739: PPUSH
26740: LD_INT 22
26742: PUSH
26743: LD_VAR 0 16
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 58
26754: PUSH
26755: EMPTY
26756: LIST
26757: PUSH
26758: LD_INT 2
26760: PUSH
26761: LD_INT 30
26763: PUSH
26764: LD_INT 32
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 30
26773: PUSH
26774: LD_INT 4
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 30
26783: PUSH
26784: LD_INT 5
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: LIST
26801: PPUSH
26802: CALL_OW 72
26806: ST_TO_ADDR
26807: GO 27031
26809: LD_INT 2
26811: DOUBLE
26812: EQUAL
26813: IFTRUE 26817
26815: GO 26879
26817: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26818: LD_ADDR_VAR 0 12
26822: PUSH
26823: LD_VAR 0 18
26827: PPUSH
26828: LD_INT 22
26830: PUSH
26831: LD_VAR 0 16
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 2
26842: PUSH
26843: LD_INT 30
26845: PUSH
26846: LD_INT 0
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 30
26855: PUSH
26856: LD_INT 1
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: LIST
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PPUSH
26872: CALL_OW 72
26876: ST_TO_ADDR
26877: GO 27031
26879: LD_INT 3
26881: DOUBLE
26882: EQUAL
26883: IFTRUE 26887
26885: GO 26949
26887: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26888: LD_ADDR_VAR 0 12
26892: PUSH
26893: LD_VAR 0 18
26897: PPUSH
26898: LD_INT 22
26900: PUSH
26901: LD_VAR 0 16
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: LD_INT 30
26915: PUSH
26916: LD_INT 2
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 30
26925: PUSH
26926: LD_INT 3
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: LIST
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PPUSH
26942: CALL_OW 72
26946: ST_TO_ADDR
26947: GO 27031
26949: LD_INT 4
26951: DOUBLE
26952: EQUAL
26953: IFTRUE 26957
26955: GO 27030
26957: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26958: LD_ADDR_VAR 0 12
26962: PUSH
26963: LD_VAR 0 18
26967: PPUSH
26968: LD_INT 22
26970: PUSH
26971: LD_VAR 0 16
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 2
26982: PUSH
26983: LD_INT 30
26985: PUSH
26986: LD_INT 6
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 30
26995: PUSH
26996: LD_INT 7
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 30
27005: PUSH
27006: LD_INT 8
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PPUSH
27023: CALL_OW 72
27027: ST_TO_ADDR
27028: GO 27031
27030: POP
// if i = 1 then
27031: LD_VAR 0 8
27035: PUSH
27036: LD_INT 1
27038: EQUAL
27039: IFFALSE 27150
// begin tmp := [ ] ;
27041: LD_ADDR_VAR 0 19
27045: PUSH
27046: EMPTY
27047: ST_TO_ADDR
// for j in f do
27048: LD_ADDR_VAR 0 9
27052: PUSH
27053: LD_VAR 0 12
27057: PUSH
27058: FOR_IN
27059: IFFALSE 27132
// if GetBType ( j ) = b_bunker then
27061: LD_VAR 0 9
27065: PPUSH
27066: CALL_OW 266
27070: PUSH
27071: LD_INT 32
27073: EQUAL
27074: IFFALSE 27101
// tmp := Insert ( tmp , 1 , j ) else
27076: LD_ADDR_VAR 0 19
27080: PUSH
27081: LD_VAR 0 19
27085: PPUSH
27086: LD_INT 1
27088: PPUSH
27089: LD_VAR 0 9
27093: PPUSH
27094: CALL_OW 2
27098: ST_TO_ADDR
27099: GO 27130
// tmp := Insert ( tmp , tmp + 1 , j ) ;
27101: LD_ADDR_VAR 0 19
27105: PUSH
27106: LD_VAR 0 19
27110: PPUSH
27111: LD_VAR 0 19
27115: PUSH
27116: LD_INT 1
27118: PLUS
27119: PPUSH
27120: LD_VAR 0 9
27124: PPUSH
27125: CALL_OW 2
27129: ST_TO_ADDR
27130: GO 27058
27132: POP
27133: POP
// if tmp then
27134: LD_VAR 0 19
27138: IFFALSE 27150
// f := tmp ;
27140: LD_ADDR_VAR 0 12
27144: PUSH
27145: LD_VAR 0 19
27149: ST_TO_ADDR
// end ; x := personel [ i ] ;
27150: LD_ADDR_VAR 0 13
27154: PUSH
27155: LD_VAR 0 6
27159: PUSH
27160: LD_VAR 0 8
27164: ARRAY
27165: ST_TO_ADDR
// if x = - 1 then
27166: LD_VAR 0 13
27170: PUSH
27171: LD_INT 1
27173: NEG
27174: EQUAL
27175: IFFALSE 27386
// begin for j in f do
27177: LD_ADDR_VAR 0 9
27181: PUSH
27182: LD_VAR 0 12
27186: PUSH
27187: FOR_IN
27188: IFFALSE 27382
// repeat InitHc ;
27190: CALL_OW 19
// if GetBType ( j ) = b_barracks then
27194: LD_VAR 0 9
27198: PPUSH
27199: CALL_OW 266
27203: PUSH
27204: LD_INT 5
27206: EQUAL
27207: IFFALSE 27277
// begin if UnitsInside ( j ) < 3 then
27209: LD_VAR 0 9
27213: PPUSH
27214: CALL_OW 313
27218: PUSH
27219: LD_INT 3
27221: LESS
27222: IFFALSE 27258
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27224: LD_INT 0
27226: PPUSH
27227: LD_INT 5
27229: PUSH
27230: LD_INT 8
27232: PUSH
27233: LD_INT 9
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: PUSH
27241: LD_VAR 0 17
27245: ARRAY
27246: PPUSH
27247: LD_VAR 0 4
27251: PPUSH
27252: CALL_OW 380
27256: GO 27275
// PrepareHuman ( false , i , skill ) ;
27258: LD_INT 0
27260: PPUSH
27261: LD_VAR 0 8
27265: PPUSH
27266: LD_VAR 0 4
27270: PPUSH
27271: CALL_OW 380
// end else
27275: GO 27294
// PrepareHuman ( false , i , skill ) ;
27277: LD_INT 0
27279: PPUSH
27280: LD_VAR 0 8
27284: PPUSH
27285: LD_VAR 0 4
27289: PPUSH
27290: CALL_OW 380
// un := CreateHuman ;
27294: LD_ADDR_VAR 0 14
27298: PUSH
27299: CALL_OW 44
27303: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27304: LD_ADDR_VAR 0 7
27308: PUSH
27309: LD_VAR 0 7
27313: PPUSH
27314: LD_INT 1
27316: PPUSH
27317: LD_VAR 0 14
27321: PPUSH
27322: CALL_OW 2
27326: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
27327: LD_VAR 0 14
27331: PPUSH
27332: LD_VAR 0 9
27336: PPUSH
27337: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
27341: LD_VAR 0 9
27345: PPUSH
27346: CALL_OW 313
27350: PUSH
27351: LD_INT 6
27353: EQUAL
27354: IFTRUE 27378
27356: PUSH
27357: LD_VAR 0 9
27361: PPUSH
27362: CALL_OW 266
27366: PUSH
27367: LD_INT 32
27369: PUSH
27370: LD_INT 31
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: IN
27377: OR
27378: IFFALSE 27190
27380: GO 27187
27382: POP
27383: POP
// end else
27384: GO 27770
// for j = 1 to x do
27386: LD_ADDR_VAR 0 9
27390: PUSH
27391: DOUBLE
27392: LD_INT 1
27394: DEC
27395: ST_TO_ADDR
27396: LD_VAR 0 13
27400: PUSH
27401: FOR_TO
27402: IFFALSE 27768
// begin InitHc ;
27404: CALL_OW 19
// if not f then
27408: LD_VAR 0 12
27412: NOT
27413: IFFALSE 27502
// begin PrepareHuman ( false , i , skill ) ;
27415: LD_INT 0
27417: PPUSH
27418: LD_VAR 0 8
27422: PPUSH
27423: LD_VAR 0 4
27427: PPUSH
27428: CALL_OW 380
// un := CreateHuman ;
27432: LD_ADDR_VAR 0 14
27436: PUSH
27437: CALL_OW 44
27441: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27442: LD_ADDR_VAR 0 7
27446: PUSH
27447: LD_VAR 0 7
27451: PPUSH
27452: LD_INT 1
27454: PPUSH
27455: LD_VAR 0 14
27459: PPUSH
27460: CALL_OW 2
27464: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27465: LD_VAR 0 14
27469: PPUSH
27470: LD_VAR 0 1
27474: PPUSH
27475: CALL_OW 250
27479: PPUSH
27480: LD_VAR 0 1
27484: PPUSH
27485: CALL_OW 251
27489: PPUSH
27490: LD_INT 10
27492: PPUSH
27493: LD_INT 0
27495: PPUSH
27496: CALL_OW 50
// continue ;
27500: GO 27401
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
27502: LD_VAR 0 12
27506: PUSH
27507: LD_INT 1
27509: ARRAY
27510: PPUSH
27511: CALL_OW 313
27515: IFFALSE 27543
27517: PUSH
27518: LD_VAR 0 12
27522: PUSH
27523: LD_INT 1
27525: ARRAY
27526: PPUSH
27527: CALL_OW 266
27531: PUSH
27532: LD_INT 32
27534: PUSH
27535: LD_INT 31
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: IN
27542: AND
27543: IFTRUE 27564
27545: PUSH
27546: LD_VAR 0 12
27550: PUSH
27551: LD_INT 1
27553: ARRAY
27554: PPUSH
27555: CALL_OW 313
27559: PUSH
27560: LD_INT 6
27562: EQUAL
27563: OR
27564: IFFALSE 27584
// f := Delete ( f , 1 ) ;
27566: LD_ADDR_VAR 0 12
27570: PUSH
27571: LD_VAR 0 12
27575: PPUSH
27576: LD_INT 1
27578: PPUSH
27579: CALL_OW 3
27583: ST_TO_ADDR
// if not f then
27584: LD_VAR 0 12
27588: NOT
27589: IFFALSE 27607
// begin x := x + 2 ;
27591: LD_ADDR_VAR 0 13
27595: PUSH
27596: LD_VAR 0 13
27600: PUSH
27601: LD_INT 2
27603: PLUS
27604: ST_TO_ADDR
// continue ;
27605: GO 27401
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27607: LD_VAR 0 12
27611: PUSH
27612: LD_INT 1
27614: ARRAY
27615: PPUSH
27616: CALL_OW 266
27620: PUSH
27621: LD_INT 5
27623: EQUAL
27624: IFFALSE 27698
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27626: LD_VAR 0 12
27630: PUSH
27631: LD_INT 1
27633: ARRAY
27634: PPUSH
27635: CALL_OW 313
27639: PUSH
27640: LD_INT 3
27642: LESS
27643: IFFALSE 27679
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27645: LD_INT 0
27647: PPUSH
27648: LD_INT 5
27650: PUSH
27651: LD_INT 8
27653: PUSH
27654: LD_INT 9
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: LIST
27661: PUSH
27662: LD_VAR 0 17
27666: ARRAY
27667: PPUSH
27668: LD_VAR 0 4
27672: PPUSH
27673: CALL_OW 380
27677: GO 27696
// PrepareHuman ( false , i , skill ) ;
27679: LD_INT 0
27681: PPUSH
27682: LD_VAR 0 8
27686: PPUSH
27687: LD_VAR 0 4
27691: PPUSH
27692: CALL_OW 380
// end else
27696: GO 27715
// PrepareHuman ( false , i , skill ) ;
27698: LD_INT 0
27700: PPUSH
27701: LD_VAR 0 8
27705: PPUSH
27706: LD_VAR 0 4
27710: PPUSH
27711: CALL_OW 380
// un := CreateHuman ;
27715: LD_ADDR_VAR 0 14
27719: PUSH
27720: CALL_OW 44
27724: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27725: LD_ADDR_VAR 0 7
27729: PUSH
27730: LD_VAR 0 7
27734: PPUSH
27735: LD_INT 1
27737: PPUSH
27738: LD_VAR 0 14
27742: PPUSH
27743: CALL_OW 2
27747: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27748: LD_VAR 0 14
27752: PPUSH
27753: LD_VAR 0 12
27757: PUSH
27758: LD_INT 1
27760: ARRAY
27761: PPUSH
27762: CALL_OW 52
// end ;
27766: GO 27401
27768: POP
27769: POP
// end ;
27770: GO 26701
27772: POP
27773: POP
// result := result ^ buildings ;
27774: LD_ADDR_VAR 0 7
27778: PUSH
27779: LD_VAR 0 7
27783: PUSH
27784: LD_VAR 0 18
27788: ADD
27789: ST_TO_ADDR
// end else
27790: GO 27933
// begin for i = 1 to personel do
27792: LD_ADDR_VAR 0 8
27796: PUSH
27797: DOUBLE
27798: LD_INT 1
27800: DEC
27801: ST_TO_ADDR
27802: LD_VAR 0 6
27806: PUSH
27807: FOR_TO
27808: IFFALSE 27931
// begin if i > 4 then
27810: LD_VAR 0 8
27814: PUSH
27815: LD_INT 4
27817: GREATER
27818: IFFALSE 27822
// break ;
27820: GO 27931
// x := personel [ i ] ;
27822: LD_ADDR_VAR 0 13
27826: PUSH
27827: LD_VAR 0 6
27831: PUSH
27832: LD_VAR 0 8
27836: ARRAY
27837: ST_TO_ADDR
// if x = - 1 then
27838: LD_VAR 0 13
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: EQUAL
27847: IFFALSE 27851
// continue ;
27849: GO 27807
// PrepareHuman ( false , i , skill ) ;
27851: LD_INT 0
27853: PPUSH
27854: LD_VAR 0 8
27858: PPUSH
27859: LD_VAR 0 4
27863: PPUSH
27864: CALL_OW 380
// un := CreateHuman ;
27868: LD_ADDR_VAR 0 14
27872: PUSH
27873: CALL_OW 44
27877: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27878: LD_VAR 0 14
27882: PPUSH
27883: LD_VAR 0 1
27887: PPUSH
27888: CALL_OW 250
27892: PPUSH
27893: LD_VAR 0 1
27897: PPUSH
27898: CALL_OW 251
27902: PPUSH
27903: LD_INT 10
27905: PPUSH
27906: LD_INT 0
27908: PPUSH
27909: CALL_OW 50
// result := result ^ un ;
27913: LD_ADDR_VAR 0 7
27917: PUSH
27918: LD_VAR 0 7
27922: PUSH
27923: LD_VAR 0 14
27927: ADD
27928: ST_TO_ADDR
// end ;
27929: GO 27807
27931: POP
27932: POP
// end ; end ;
27933: LD_VAR 0 7
27937: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27938: LD_INT 0
27940: PPUSH
27941: PPUSH
27942: PPUSH
27943: PPUSH
27944: PPUSH
27945: PPUSH
27946: PPUSH
27947: PPUSH
27948: PPUSH
27949: PPUSH
27950: PPUSH
27951: PPUSH
27952: PPUSH
27953: PPUSH
27954: PPUSH
27955: PPUSH
// result := false ;
27956: LD_ADDR_VAR 0 3
27960: PUSH
27961: LD_INT 0
27963: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27964: LD_VAR 0 1
27968: NOT
27969: IFTRUE 27994
27971: PUSH
27972: LD_VAR 0 1
27976: PPUSH
27977: CALL_OW 266
27981: PUSH
27982: LD_INT 32
27984: PUSH
27985: LD_INT 33
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: IN
27992: NOT
27993: OR
27994: IFFALSE 27998
// exit ;
27996: GO 29133
// nat := GetNation ( tower ) ;
27998: LD_ADDR_VAR 0 12
28002: PUSH
28003: LD_VAR 0 1
28007: PPUSH
28008: CALL_OW 248
28012: ST_TO_ADDR
// side := GetSide ( tower ) ;
28013: LD_ADDR_VAR 0 16
28017: PUSH
28018: LD_VAR 0 1
28022: PPUSH
28023: CALL_OW 255
28027: ST_TO_ADDR
// x := GetX ( tower ) ;
28028: LD_ADDR_VAR 0 10
28032: PUSH
28033: LD_VAR 0 1
28037: PPUSH
28038: CALL_OW 250
28042: ST_TO_ADDR
// y := GetY ( tower ) ;
28043: LD_ADDR_VAR 0 11
28047: PUSH
28048: LD_VAR 0 1
28052: PPUSH
28053: CALL_OW 251
28057: ST_TO_ADDR
// if not x or not y then
28058: LD_VAR 0 10
28062: NOT
28063: IFTRUE 28072
28065: PUSH
28066: LD_VAR 0 11
28070: NOT
28071: OR
28072: IFFALSE 28076
// exit ;
28074: GO 29133
// weapon := 0 ;
28076: LD_ADDR_VAR 0 18
28080: PUSH
28081: LD_INT 0
28083: ST_TO_ADDR
// fac_list := [ ] ;
28084: LD_ADDR_VAR 0 17
28088: PUSH
28089: EMPTY
28090: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
28091: LD_ADDR_VAR 0 6
28095: PUSH
28096: LD_VAR 0 1
28100: PPUSH
28101: CALL_OW 274
28105: PPUSH
28106: LD_VAR 0 2
28110: PPUSH
28111: LD_INT 0
28113: PPUSH
28114: CALL 25668 0 3
28118: PPUSH
28119: LD_INT 30
28121: PUSH
28122: LD_INT 3
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PPUSH
28129: CALL_OW 72
28133: ST_TO_ADDR
// if not factories then
28134: LD_VAR 0 6
28138: NOT
28139: IFFALSE 28143
// exit ;
28141: GO 29133
// for i in factories do
28143: LD_ADDR_VAR 0 8
28147: PUSH
28148: LD_VAR 0 6
28152: PUSH
28153: FOR_IN
28154: IFFALSE 28179
// fac_list := fac_list union AvailableWeaponList ( i ) ;
28156: LD_ADDR_VAR 0 17
28160: PUSH
28161: LD_VAR 0 17
28165: PUSH
28166: LD_VAR 0 8
28170: PPUSH
28171: CALL_OW 478
28175: UNION
28176: ST_TO_ADDR
28177: GO 28153
28179: POP
28180: POP
// if not fac_list then
28181: LD_VAR 0 17
28185: NOT
28186: IFFALSE 28190
// exit ;
28188: GO 29133
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
28190: LD_ADDR_VAR 0 5
28194: PUSH
28195: LD_INT 4
28197: PUSH
28198: LD_INT 5
28200: PUSH
28201: LD_INT 9
28203: PUSH
28204: LD_INT 10
28206: PUSH
28207: LD_INT 6
28209: PUSH
28210: LD_INT 7
28212: PUSH
28213: LD_INT 11
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 27
28227: PUSH
28228: LD_INT 28
28230: PUSH
28231: LD_INT 26
28233: PUSH
28234: LD_INT 30
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 43
28245: PUSH
28246: LD_INT 44
28248: PUSH
28249: LD_INT 46
28251: PUSH
28252: LD_INT 45
28254: PUSH
28255: LD_INT 47
28257: PUSH
28258: LD_INT 49
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: LIST
28273: PUSH
28274: LD_VAR 0 12
28278: ARRAY
28279: ST_TO_ADDR
// list := list isect fac_list ;
28280: LD_ADDR_VAR 0 5
28284: PUSH
28285: LD_VAR 0 5
28289: PUSH
28290: LD_VAR 0 17
28294: ISECT
28295: ST_TO_ADDR
// if not list then
28296: LD_VAR 0 5
28300: NOT
28301: IFFALSE 28305
// exit ;
28303: GO 29133
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
28305: LD_VAR 0 12
28309: PUSH
28310: LD_INT 3
28312: EQUAL
28313: IFFALSE 28325
28315: PUSH
28316: LD_INT 49
28318: PUSH
28319: LD_VAR 0 5
28323: IN
28324: AND
28325: IFFALSE 28345
28327: PUSH
28328: LD_INT 31
28330: PPUSH
28331: LD_VAR 0 16
28335: PPUSH
28336: CALL_OW 321
28340: PUSH
28341: LD_INT 2
28343: EQUAL
28344: AND
28345: IFFALSE 28405
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
28347: LD_INT 22
28349: PUSH
28350: LD_VAR 0 16
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 35
28361: PUSH
28362: LD_INT 49
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 91
28371: PUSH
28372: LD_VAR 0 1
28376: PUSH
28377: LD_INT 10
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: LIST
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: LIST
28389: PPUSH
28390: CALL_OW 69
28394: NOT
28395: IFFALSE 28405
// weapon := ru_time_lapser ;
28397: LD_ADDR_VAR 0 18
28401: PUSH
28402: LD_INT 49
28404: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
28405: LD_VAR 0 12
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: LD_INT 2
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: IN
28420: IFFALSE 28444
28422: PUSH
28423: LD_INT 11
28425: PUSH
28426: LD_VAR 0 5
28430: IN
28431: IFTRUE 28443
28433: PUSH
28434: LD_INT 30
28436: PUSH
28437: LD_VAR 0 5
28441: IN
28442: OR
28443: AND
28444: IFFALSE 28464
28446: PUSH
28447: LD_INT 6
28449: PPUSH
28450: LD_VAR 0 16
28454: PPUSH
28455: CALL_OW 321
28459: PUSH
28460: LD_INT 2
28462: EQUAL
28463: AND
28464: IFFALSE 28631
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
28466: LD_INT 22
28468: PUSH
28469: LD_VAR 0 16
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 2
28480: PUSH
28481: LD_INT 35
28483: PUSH
28484: LD_INT 11
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 35
28493: PUSH
28494: LD_INT 30
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 91
28508: PUSH
28509: LD_VAR 0 1
28513: PUSH
28514: LD_INT 18
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: LIST
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: LIST
28526: PPUSH
28527: CALL_OW 69
28531: NOT
28532: IFFALSE 28608
28534: PUSH
28535: LD_INT 22
28537: PUSH
28538: LD_VAR 0 16
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 2
28549: PUSH
28550: LD_INT 30
28552: PUSH
28553: LD_INT 32
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 30
28562: PUSH
28563: LD_INT 33
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 91
28577: PUSH
28578: LD_VAR 0 1
28582: PUSH
28583: LD_INT 12
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: LIST
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: LIST
28595: PUSH
28596: EMPTY
28597: LIST
28598: PPUSH
28599: CALL_OW 69
28603: PUSH
28604: LD_INT 2
28606: GREATER
28607: AND
28608: IFFALSE 28631
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28610: LD_ADDR_VAR 0 18
28614: PUSH
28615: LD_INT 11
28617: PUSH
28618: LD_INT 30
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_VAR 0 12
28629: ARRAY
28630: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28631: LD_VAR 0 18
28635: NOT
28636: IFFALSE 28656
28638: PUSH
28639: LD_INT 40
28641: PPUSH
28642: LD_VAR 0 16
28646: PPUSH
28647: CALL_OW 321
28651: PUSH
28652: LD_INT 2
28654: EQUAL
28655: AND
28656: IFFALSE 28692
28658: PUSH
28659: LD_INT 7
28661: PUSH
28662: LD_VAR 0 5
28666: IN
28667: IFTRUE 28679
28669: PUSH
28670: LD_INT 28
28672: PUSH
28673: LD_VAR 0 5
28677: IN
28678: OR
28679: IFTRUE 28691
28681: PUSH
28682: LD_INT 45
28684: PUSH
28685: LD_VAR 0 5
28689: IN
28690: OR
28691: AND
28692: IFFALSE 28946
// begin hex := GetHexInfo ( x , y ) ;
28694: LD_ADDR_VAR 0 4
28698: PUSH
28699: LD_VAR 0 10
28703: PPUSH
28704: LD_VAR 0 11
28708: PPUSH
28709: CALL_OW 546
28713: ST_TO_ADDR
// if hex [ 1 ] then
28714: LD_VAR 0 4
28718: PUSH
28719: LD_INT 1
28721: ARRAY
28722: IFFALSE 28726
// exit ;
28724: GO 29133
// height := hex [ 2 ] ;
28726: LD_ADDR_VAR 0 15
28730: PUSH
28731: LD_VAR 0 4
28735: PUSH
28736: LD_INT 2
28738: ARRAY
28739: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28740: LD_ADDR_VAR 0 14
28744: PUSH
28745: LD_INT 0
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: LD_INT 3
28753: PUSH
28754: LD_INT 5
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: ST_TO_ADDR
// for i in tmp do
28763: LD_ADDR_VAR 0 8
28767: PUSH
28768: LD_VAR 0 14
28772: PUSH
28773: FOR_IN
28774: IFFALSE 28944
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28776: LD_ADDR_VAR 0 9
28780: PUSH
28781: LD_VAR 0 10
28785: PPUSH
28786: LD_VAR 0 8
28790: PPUSH
28791: LD_INT 5
28793: PPUSH
28794: CALL_OW 272
28798: PUSH
28799: LD_VAR 0 11
28803: PPUSH
28804: LD_VAR 0 8
28808: PPUSH
28809: LD_INT 5
28811: PPUSH
28812: CALL_OW 273
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28821: LD_VAR 0 9
28825: PUSH
28826: LD_INT 1
28828: ARRAY
28829: PPUSH
28830: LD_VAR 0 9
28834: PUSH
28835: LD_INT 2
28837: ARRAY
28838: PPUSH
28839: CALL_OW 488
28843: IFFALSE 28942
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28845: LD_ADDR_VAR 0 4
28849: PUSH
28850: LD_VAR 0 9
28854: PUSH
28855: LD_INT 1
28857: ARRAY
28858: PPUSH
28859: LD_VAR 0 9
28863: PUSH
28864: LD_INT 2
28866: ARRAY
28867: PPUSH
28868: CALL_OW 546
28872: ST_TO_ADDR
// if hex [ 1 ] then
28873: LD_VAR 0 4
28877: PUSH
28878: LD_INT 1
28880: ARRAY
28881: IFFALSE 28885
// continue ;
28883: GO 28773
// h := hex [ 2 ] ;
28885: LD_ADDR_VAR 0 13
28889: PUSH
28890: LD_VAR 0 4
28894: PUSH
28895: LD_INT 2
28897: ARRAY
28898: ST_TO_ADDR
// if h + 7 < height then
28899: LD_VAR 0 13
28903: PUSH
28904: LD_INT 7
28906: PLUS
28907: PUSH
28908: LD_VAR 0 15
28912: LESS
28913: IFFALSE 28942
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28915: LD_ADDR_VAR 0 18
28919: PUSH
28920: LD_INT 7
28922: PUSH
28923: LD_INT 28
28925: PUSH
28926: LD_INT 45
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: LIST
28933: PUSH
28934: LD_VAR 0 12
28938: ARRAY
28939: ST_TO_ADDR
// break ;
28940: GO 28944
// end ; end ; end ;
28942: GO 28773
28944: POP
28945: POP
// end ; if not weapon then
28946: LD_VAR 0 18
28950: NOT
28951: IFFALSE 29011
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28953: LD_ADDR_VAR 0 5
28957: PUSH
28958: LD_VAR 0 5
28962: PUSH
28963: LD_INT 11
28965: PUSH
28966: LD_INT 30
28968: PUSH
28969: LD_INT 49
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: LIST
28976: DIFF
28977: ST_TO_ADDR
// if not list then
28978: LD_VAR 0 5
28982: NOT
28983: IFFALSE 28987
// exit ;
28985: GO 29133
// weapon := list [ rand ( 1 , list ) ] ;
28987: LD_ADDR_VAR 0 18
28991: PUSH
28992: LD_VAR 0 5
28996: PUSH
28997: LD_INT 1
28999: PPUSH
29000: LD_VAR 0 5
29004: PPUSH
29005: CALL_OW 12
29009: ARRAY
29010: ST_TO_ADDR
// end ; if weapon then
29011: LD_VAR 0 18
29015: IFFALSE 29133
// begin tmp := CostOfWeapon ( weapon ) ;
29017: LD_ADDR_VAR 0 14
29021: PUSH
29022: LD_VAR 0 18
29026: PPUSH
29027: CALL_OW 451
29031: ST_TO_ADDR
// j := GetBase ( tower ) ;
29032: LD_ADDR_VAR 0 9
29036: PUSH
29037: LD_VAR 0 1
29041: PPUSH
29042: CALL_OW 274
29046: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
29047: LD_VAR 0 9
29051: PPUSH
29052: LD_INT 1
29054: PPUSH
29055: CALL_OW 275
29059: PUSH
29060: LD_VAR 0 14
29064: PUSH
29065: LD_INT 1
29067: ARRAY
29068: GREATEREQUAL
29069: IFFALSE 29095
29071: PUSH
29072: LD_VAR 0 9
29076: PPUSH
29077: LD_INT 2
29079: PPUSH
29080: CALL_OW 275
29084: PUSH
29085: LD_VAR 0 14
29089: PUSH
29090: LD_INT 2
29092: ARRAY
29093: GREATEREQUAL
29094: AND
29095: IFFALSE 29121
29097: PUSH
29098: LD_VAR 0 9
29102: PPUSH
29103: LD_INT 3
29105: PPUSH
29106: CALL_OW 275
29110: PUSH
29111: LD_VAR 0 14
29115: PUSH
29116: LD_INT 3
29118: ARRAY
29119: GREATEREQUAL
29120: AND
29121: IFFALSE 29133
// result := weapon ;
29123: LD_ADDR_VAR 0 3
29127: PUSH
29128: LD_VAR 0 18
29132: ST_TO_ADDR
// end ; end ;
29133: LD_VAR 0 3
29137: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
29138: LD_INT 0
29140: PPUSH
29141: PPUSH
// result := true ;
29142: LD_ADDR_VAR 0 3
29146: PUSH
29147: LD_INT 1
29149: ST_TO_ADDR
// if array1 = array2 then
29150: LD_VAR 0 1
29154: PUSH
29155: LD_VAR 0 2
29159: EQUAL
29160: IFFALSE 29220
// begin for i = 1 to array1 do
29162: LD_ADDR_VAR 0 4
29166: PUSH
29167: DOUBLE
29168: LD_INT 1
29170: DEC
29171: ST_TO_ADDR
29172: LD_VAR 0 1
29176: PUSH
29177: FOR_TO
29178: IFFALSE 29216
// if array1 [ i ] <> array2 [ i ] then
29180: LD_VAR 0 1
29184: PUSH
29185: LD_VAR 0 4
29189: ARRAY
29190: PUSH
29191: LD_VAR 0 2
29195: PUSH
29196: LD_VAR 0 4
29200: ARRAY
29201: NONEQUAL
29202: IFFALSE 29214
// begin result := false ;
29204: LD_ADDR_VAR 0 3
29208: PUSH
29209: LD_INT 0
29211: ST_TO_ADDR
// break ;
29212: GO 29216
// end ;
29214: GO 29177
29216: POP
29217: POP
// end else
29218: GO 29228
// result := false ;
29220: LD_ADDR_VAR 0 3
29224: PUSH
29225: LD_INT 0
29227: ST_TO_ADDR
// end ;
29228: LD_VAR 0 3
29232: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
29233: LD_INT 0
29235: PPUSH
29236: PPUSH
// if not array1 or not array2 then
29237: LD_VAR 0 1
29241: NOT
29242: IFTRUE 29251
29244: PUSH
29245: LD_VAR 0 2
29249: NOT
29250: OR
29251: IFFALSE 29255
// exit ;
29253: GO 29319
// result := true ;
29255: LD_ADDR_VAR 0 3
29259: PUSH
29260: LD_INT 1
29262: ST_TO_ADDR
// for i = 1 to array1 do
29263: LD_ADDR_VAR 0 4
29267: PUSH
29268: DOUBLE
29269: LD_INT 1
29271: DEC
29272: ST_TO_ADDR
29273: LD_VAR 0 1
29277: PUSH
29278: FOR_TO
29279: IFFALSE 29317
// if array1 [ i ] <> array2 [ i ] then
29281: LD_VAR 0 1
29285: PUSH
29286: LD_VAR 0 4
29290: ARRAY
29291: PUSH
29292: LD_VAR 0 2
29296: PUSH
29297: LD_VAR 0 4
29301: ARRAY
29302: NONEQUAL
29303: IFFALSE 29315
// begin result := false ;
29305: LD_ADDR_VAR 0 3
29309: PUSH
29310: LD_INT 0
29312: ST_TO_ADDR
// break ;
29313: GO 29317
// end ;
29315: GO 29278
29317: POP
29318: POP
// end ;
29319: LD_VAR 0 3
29323: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
29324: LD_INT 0
29326: PPUSH
29327: PPUSH
29328: PPUSH
// pom := GetBase ( fac ) ;
29329: LD_ADDR_VAR 0 5
29333: PUSH
29334: LD_VAR 0 1
29338: PPUSH
29339: CALL_OW 274
29343: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
29344: LD_ADDR_VAR 0 4
29348: PUSH
29349: LD_VAR 0 2
29353: PUSH
29354: LD_INT 1
29356: ARRAY
29357: PPUSH
29358: LD_VAR 0 2
29362: PUSH
29363: LD_INT 2
29365: ARRAY
29366: PPUSH
29367: LD_VAR 0 2
29371: PUSH
29372: LD_INT 3
29374: ARRAY
29375: PPUSH
29376: LD_VAR 0 2
29380: PUSH
29381: LD_INT 4
29383: ARRAY
29384: PPUSH
29385: CALL_OW 449
29389: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29390: LD_ADDR_VAR 0 3
29394: PUSH
29395: LD_VAR 0 5
29399: PPUSH
29400: LD_INT 1
29402: PPUSH
29403: CALL_OW 275
29407: PUSH
29408: LD_VAR 0 4
29412: PUSH
29413: LD_INT 1
29415: ARRAY
29416: GREATEREQUAL
29417: IFFALSE 29443
29419: PUSH
29420: LD_VAR 0 5
29424: PPUSH
29425: LD_INT 2
29427: PPUSH
29428: CALL_OW 275
29432: PUSH
29433: LD_VAR 0 4
29437: PUSH
29438: LD_INT 2
29440: ARRAY
29441: GREATEREQUAL
29442: AND
29443: IFFALSE 29469
29445: PUSH
29446: LD_VAR 0 5
29450: PPUSH
29451: LD_INT 3
29453: PPUSH
29454: CALL_OW 275
29458: PUSH
29459: LD_VAR 0 4
29463: PUSH
29464: LD_INT 3
29466: ARRAY
29467: GREATEREQUAL
29468: AND
29469: ST_TO_ADDR
// end ;
29470: LD_VAR 0 3
29474: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
29475: LD_INT 0
29477: PPUSH
29478: PPUSH
29479: PPUSH
29480: PPUSH
// pom := GetBase ( building ) ;
29481: LD_ADDR_VAR 0 3
29485: PUSH
29486: LD_VAR 0 1
29490: PPUSH
29491: CALL_OW 274
29495: ST_TO_ADDR
// if not pom then
29496: LD_VAR 0 3
29500: NOT
29501: IFFALSE 29505
// exit ;
29503: GO 29679
// btype := GetBType ( building ) ;
29505: LD_ADDR_VAR 0 5
29509: PUSH
29510: LD_VAR 0 1
29514: PPUSH
29515: CALL_OW 266
29519: ST_TO_ADDR
// if btype = b_armoury then
29520: LD_VAR 0 5
29524: PUSH
29525: LD_INT 4
29527: EQUAL
29528: IFFALSE 29538
// btype := b_barracks ;
29530: LD_ADDR_VAR 0 5
29534: PUSH
29535: LD_INT 5
29537: ST_TO_ADDR
// if btype = b_depot then
29538: LD_VAR 0 5
29542: PUSH
29543: LD_INT 0
29545: EQUAL
29546: IFFALSE 29556
// btype := b_warehouse ;
29548: LD_ADDR_VAR 0 5
29552: PUSH
29553: LD_INT 1
29555: ST_TO_ADDR
// if btype = b_workshop then
29556: LD_VAR 0 5
29560: PUSH
29561: LD_INT 2
29563: EQUAL
29564: IFFALSE 29574
// btype := b_factory ;
29566: LD_ADDR_VAR 0 5
29570: PUSH
29571: LD_INT 3
29573: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29574: LD_ADDR_VAR 0 4
29578: PUSH
29579: LD_VAR 0 5
29583: PPUSH
29584: LD_VAR 0 1
29588: PPUSH
29589: CALL_OW 248
29593: PPUSH
29594: CALL_OW 450
29598: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29599: LD_ADDR_VAR 0 2
29603: PUSH
29604: LD_VAR 0 3
29608: PPUSH
29609: LD_INT 1
29611: PPUSH
29612: CALL_OW 275
29616: PUSH
29617: LD_VAR 0 4
29621: PUSH
29622: LD_INT 1
29624: ARRAY
29625: GREATEREQUAL
29626: IFFALSE 29652
29628: PUSH
29629: LD_VAR 0 3
29633: PPUSH
29634: LD_INT 2
29636: PPUSH
29637: CALL_OW 275
29641: PUSH
29642: LD_VAR 0 4
29646: PUSH
29647: LD_INT 2
29649: ARRAY
29650: GREATEREQUAL
29651: AND
29652: IFFALSE 29678
29654: PUSH
29655: LD_VAR 0 3
29659: PPUSH
29660: LD_INT 3
29662: PPUSH
29663: CALL_OW 275
29667: PUSH
29668: LD_VAR 0 4
29672: PUSH
29673: LD_INT 3
29675: ARRAY
29676: GREATEREQUAL
29677: AND
29678: ST_TO_ADDR
// end ;
29679: LD_VAR 0 2
29683: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29684: LD_INT 0
29686: PPUSH
29687: PPUSH
29688: PPUSH
// pom := GetBase ( building ) ;
29689: LD_ADDR_VAR 0 4
29693: PUSH
29694: LD_VAR 0 1
29698: PPUSH
29699: CALL_OW 274
29703: ST_TO_ADDR
// if not pom then
29704: LD_VAR 0 4
29708: NOT
29709: IFFALSE 29713
// exit ;
29711: GO 29818
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29713: LD_ADDR_VAR 0 5
29717: PUSH
29718: LD_VAR 0 2
29722: PPUSH
29723: LD_VAR 0 1
29727: PPUSH
29728: CALL_OW 248
29732: PPUSH
29733: CALL_OW 450
29737: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29738: LD_ADDR_VAR 0 3
29742: PUSH
29743: LD_VAR 0 4
29747: PPUSH
29748: LD_INT 1
29750: PPUSH
29751: CALL_OW 275
29755: PUSH
29756: LD_VAR 0 5
29760: PUSH
29761: LD_INT 1
29763: ARRAY
29764: GREATEREQUAL
29765: IFFALSE 29791
29767: PUSH
29768: LD_VAR 0 4
29772: PPUSH
29773: LD_INT 2
29775: PPUSH
29776: CALL_OW 275
29780: PUSH
29781: LD_VAR 0 5
29785: PUSH
29786: LD_INT 2
29788: ARRAY
29789: GREATEREQUAL
29790: AND
29791: IFFALSE 29817
29793: PUSH
29794: LD_VAR 0 4
29798: PPUSH
29799: LD_INT 3
29801: PPUSH
29802: CALL_OW 275
29806: PUSH
29807: LD_VAR 0 5
29811: PUSH
29812: LD_INT 3
29814: ARRAY
29815: GREATEREQUAL
29816: AND
29817: ST_TO_ADDR
// end ;
29818: LD_VAR 0 3
29822: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29823: LD_INT 0
29825: PPUSH
29826: PPUSH
29827: PPUSH
29828: PPUSH
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
29833: PPUSH
29834: PPUSH
29835: PPUSH
// result := false ;
29836: LD_ADDR_VAR 0 8
29840: PUSH
29841: LD_INT 0
29843: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29844: LD_VAR 0 5
29848: NOT
29849: IFTRUE 29858
29851: PUSH
29852: LD_VAR 0 1
29856: NOT
29857: OR
29858: IFTRUE 29867
29860: PUSH
29861: LD_VAR 0 2
29865: NOT
29866: OR
29867: IFTRUE 29876
29869: PUSH
29870: LD_VAR 0 3
29874: NOT
29875: OR
29876: IFFALSE 29880
// exit ;
29878: GO 30706
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29880: LD_ADDR_VAR 0 14
29884: PUSH
29885: LD_VAR 0 1
29889: PPUSH
29890: LD_VAR 0 2
29894: PPUSH
29895: LD_VAR 0 3
29899: PPUSH
29900: LD_VAR 0 4
29904: PPUSH
29905: LD_VAR 0 5
29909: PUSH
29910: LD_INT 1
29912: ARRAY
29913: PPUSH
29914: CALL_OW 248
29918: PPUSH
29919: LD_INT 0
29921: PPUSH
29922: CALL 31987 0 6
29926: ST_TO_ADDR
// if not hexes then
29927: LD_VAR 0 14
29931: NOT
29932: IFFALSE 29936
// exit ;
29934: GO 30706
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29936: LD_ADDR_VAR 0 17
29940: PUSH
29941: LD_VAR 0 5
29945: PPUSH
29946: LD_INT 22
29948: PUSH
29949: LD_VAR 0 13
29953: PPUSH
29954: CALL_OW 255
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 2
29965: PUSH
29966: LD_INT 30
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 30
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PPUSH
29995: CALL_OW 72
29999: ST_TO_ADDR
// for i = 1 to hexes do
30000: LD_ADDR_VAR 0 9
30004: PUSH
30005: DOUBLE
30006: LD_INT 1
30008: DEC
30009: ST_TO_ADDR
30010: LD_VAR 0 14
30014: PUSH
30015: FOR_TO
30016: IFFALSE 30704
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30018: LD_ADDR_VAR 0 13
30022: PUSH
30023: LD_VAR 0 14
30027: PUSH
30028: LD_VAR 0 9
30032: ARRAY
30033: PUSH
30034: LD_INT 1
30036: ARRAY
30037: PPUSH
30038: LD_VAR 0 14
30042: PUSH
30043: LD_VAR 0 9
30047: ARRAY
30048: PUSH
30049: LD_INT 2
30051: ARRAY
30052: PPUSH
30053: CALL_OW 428
30057: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
30058: LD_VAR 0 14
30062: PUSH
30063: LD_VAR 0 9
30067: ARRAY
30068: PUSH
30069: LD_INT 1
30071: ARRAY
30072: PPUSH
30073: LD_VAR 0 14
30077: PUSH
30078: LD_VAR 0 9
30082: ARRAY
30083: PUSH
30084: LD_INT 2
30086: ARRAY
30087: PPUSH
30088: CALL_OW 351
30092: IFTRUE 30131
30094: PUSH
30095: LD_VAR 0 14
30099: PUSH
30100: LD_VAR 0 9
30104: ARRAY
30105: PUSH
30106: LD_INT 1
30108: ARRAY
30109: PPUSH
30110: LD_VAR 0 14
30114: PUSH
30115: LD_VAR 0 9
30119: ARRAY
30120: PUSH
30121: LD_INT 2
30123: ARRAY
30124: PPUSH
30125: CALL_OW 488
30129: NOT
30130: OR
30131: IFTRUE 30148
30133: PUSH
30134: LD_VAR 0 13
30138: PPUSH
30139: CALL_OW 247
30143: PUSH
30144: LD_INT 3
30146: EQUAL
30147: OR
30148: IFFALSE 30154
// exit ;
30150: POP
30151: POP
30152: GO 30706
// if not tmp then
30154: LD_VAR 0 13
30158: NOT
30159: IFFALSE 30163
// continue ;
30161: GO 30015
// result := true ;
30163: LD_ADDR_VAR 0 8
30167: PUSH
30168: LD_INT 1
30170: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
30171: LD_VAR 0 6
30175: IFFALSE 30192
30177: PUSH
30178: LD_VAR 0 13
30182: PPUSH
30183: CALL_OW 247
30187: PUSH
30188: LD_INT 2
30190: EQUAL
30191: AND
30192: IFFALSE 30209
30194: PUSH
30195: LD_VAR 0 13
30199: PPUSH
30200: CALL_OW 263
30204: PUSH
30205: LD_INT 1
30207: EQUAL
30208: AND
30209: IFFALSE 30373
// begin if IsDrivenBy ( tmp ) then
30211: LD_VAR 0 13
30215: PPUSH
30216: CALL_OW 311
30220: IFFALSE 30224
// continue ;
30222: GO 30015
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
30224: LD_VAR 0 6
30228: PPUSH
30229: LD_INT 3
30231: PUSH
30232: LD_INT 60
30234: PUSH
30235: EMPTY
30236: LIST
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 3
30244: PUSH
30245: LD_INT 55
30247: PUSH
30248: EMPTY
30249: LIST
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PPUSH
30259: CALL_OW 72
30263: IFFALSE 30371
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
30265: LD_ADDR_VAR 0 18
30269: PUSH
30270: LD_VAR 0 6
30274: PPUSH
30275: LD_INT 3
30277: PUSH
30278: LD_INT 60
30280: PUSH
30281: EMPTY
30282: LIST
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 3
30290: PUSH
30291: LD_INT 55
30293: PUSH
30294: EMPTY
30295: LIST
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PPUSH
30305: CALL_OW 72
30309: PUSH
30310: LD_INT 1
30312: ARRAY
30313: ST_TO_ADDR
// if IsInUnit ( driver ) then
30314: LD_VAR 0 18
30318: PPUSH
30319: CALL_OW 310
30323: IFFALSE 30334
// ComExit ( driver ) ;
30325: LD_VAR 0 18
30329: PPUSH
30330: CALL 55977 0 1
// AddComEnterUnit ( driver , tmp ) ;
30334: LD_VAR 0 18
30338: PPUSH
30339: LD_VAR 0 13
30343: PPUSH
30344: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
30348: LD_VAR 0 18
30352: PPUSH
30353: LD_VAR 0 7
30357: PPUSH
30358: CALL_OW 173
// AddComExitVehicle ( driver ) ;
30362: LD_VAR 0 18
30366: PPUSH
30367: CALL_OW 181
// end ; continue ;
30371: GO 30015
// end ; if not cleaners or not tmp in cleaners then
30373: LD_VAR 0 6
30377: NOT
30378: IFTRUE 30393
30380: PUSH
30381: LD_VAR 0 13
30385: PUSH
30386: LD_VAR 0 6
30390: IN
30391: NOT
30392: OR
30393: IFFALSE 30702
// begin if dep then
30395: LD_VAR 0 17
30399: IFFALSE 30535
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30401: LD_ADDR_VAR 0 16
30405: PUSH
30406: LD_VAR 0 17
30410: PUSH
30411: LD_INT 1
30413: ARRAY
30414: PPUSH
30415: CALL_OW 250
30419: PPUSH
30420: LD_VAR 0 17
30424: PUSH
30425: LD_INT 1
30427: ARRAY
30428: PPUSH
30429: CALL_OW 254
30433: PPUSH
30434: LD_INT 5
30436: PPUSH
30437: CALL_OW 272
30441: PUSH
30442: LD_VAR 0 17
30446: PUSH
30447: LD_INT 1
30449: ARRAY
30450: PPUSH
30451: CALL_OW 251
30455: PPUSH
30456: LD_VAR 0 17
30460: PUSH
30461: LD_INT 1
30463: ARRAY
30464: PPUSH
30465: CALL_OW 254
30469: PPUSH
30470: LD_INT 5
30472: PPUSH
30473: CALL_OW 273
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30482: LD_VAR 0 16
30486: PUSH
30487: LD_INT 1
30489: ARRAY
30490: PPUSH
30491: LD_VAR 0 16
30495: PUSH
30496: LD_INT 2
30498: ARRAY
30499: PPUSH
30500: CALL_OW 488
30504: IFFALSE 30535
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30506: LD_VAR 0 13
30510: PPUSH
30511: LD_VAR 0 16
30515: PUSH
30516: LD_INT 1
30518: ARRAY
30519: PPUSH
30520: LD_VAR 0 16
30524: PUSH
30525: LD_INT 2
30527: ARRAY
30528: PPUSH
30529: CALL_OW 111
// continue ;
30533: GO 30015
// end ; end ; r := GetDir ( tmp ) ;
30535: LD_ADDR_VAR 0 15
30539: PUSH
30540: LD_VAR 0 13
30544: PPUSH
30545: CALL_OW 254
30549: ST_TO_ADDR
// if r = 5 then
30550: LD_VAR 0 15
30554: PUSH
30555: LD_INT 5
30557: EQUAL
30558: IFFALSE 30568
// r := 0 ;
30560: LD_ADDR_VAR 0 15
30564: PUSH
30565: LD_INT 0
30567: ST_TO_ADDR
// for j = r to 5 do
30568: LD_ADDR_VAR 0 10
30572: PUSH
30573: DOUBLE
30574: LD_VAR 0 15
30578: DEC
30579: ST_TO_ADDR
30580: LD_INT 5
30582: PUSH
30583: FOR_TO
30584: IFFALSE 30700
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30586: LD_ADDR_VAR 0 11
30590: PUSH
30591: LD_VAR 0 13
30595: PPUSH
30596: CALL_OW 250
30600: PPUSH
30601: LD_VAR 0 10
30605: PPUSH
30606: LD_INT 2
30608: PPUSH
30609: CALL_OW 272
30613: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30614: LD_ADDR_VAR 0 12
30618: PUSH
30619: LD_VAR 0 13
30623: PPUSH
30624: CALL_OW 251
30628: PPUSH
30629: LD_VAR 0 10
30633: PPUSH
30634: LD_INT 2
30636: PPUSH
30637: CALL_OW 273
30641: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30642: LD_VAR 0 11
30646: PPUSH
30647: LD_VAR 0 12
30651: PPUSH
30652: CALL_OW 488
30656: IFFALSE 30675
30658: PUSH
30659: LD_VAR 0 11
30663: PPUSH
30664: LD_VAR 0 12
30668: PPUSH
30669: CALL_OW 428
30673: NOT
30674: AND
30675: IFFALSE 30698
// begin ComMoveXY ( tmp , _x , _y ) ;
30677: LD_VAR 0 13
30681: PPUSH
30682: LD_VAR 0 11
30686: PPUSH
30687: LD_VAR 0 12
30691: PPUSH
30692: CALL_OW 111
// break ;
30696: GO 30700
// end ; end ;
30698: GO 30583
30700: POP
30701: POP
// end ; end ;
30702: GO 30015
30704: POP
30705: POP
// end ;
30706: LD_VAR 0 8
30710: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30711: LD_INT 0
30713: PPUSH
// result := true ;
30714: LD_ADDR_VAR 0 3
30718: PUSH
30719: LD_INT 1
30721: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30722: LD_VAR 0 2
30726: PUSH
30727: LD_INT 24
30729: DOUBLE
30730: EQUAL
30731: IFTRUE 30741
30733: LD_INT 33
30735: DOUBLE
30736: EQUAL
30737: IFTRUE 30741
30739: GO 30766
30741: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30742: LD_ADDR_VAR 0 3
30746: PUSH
30747: LD_INT 32
30749: PPUSH
30750: LD_VAR 0 1
30754: PPUSH
30755: CALL_OW 321
30759: PUSH
30760: LD_INT 2
30762: EQUAL
30763: ST_TO_ADDR
30764: GO 31082
30766: LD_INT 20
30768: DOUBLE
30769: EQUAL
30770: IFTRUE 30774
30772: GO 30799
30774: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30775: LD_ADDR_VAR 0 3
30779: PUSH
30780: LD_INT 6
30782: PPUSH
30783: LD_VAR 0 1
30787: PPUSH
30788: CALL_OW 321
30792: PUSH
30793: LD_INT 2
30795: EQUAL
30796: ST_TO_ADDR
30797: GO 31082
30799: LD_INT 22
30801: DOUBLE
30802: EQUAL
30803: IFTRUE 30813
30805: LD_INT 36
30807: DOUBLE
30808: EQUAL
30809: IFTRUE 30813
30811: GO 30838
30813: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30814: LD_ADDR_VAR 0 3
30818: PUSH
30819: LD_INT 15
30821: PPUSH
30822: LD_VAR 0 1
30826: PPUSH
30827: CALL_OW 321
30831: PUSH
30832: LD_INT 2
30834: EQUAL
30835: ST_TO_ADDR
30836: GO 31082
30838: LD_INT 30
30840: DOUBLE
30841: EQUAL
30842: IFTRUE 30846
30844: GO 30871
30846: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30847: LD_ADDR_VAR 0 3
30851: PUSH
30852: LD_INT 20
30854: PPUSH
30855: LD_VAR 0 1
30859: PPUSH
30860: CALL_OW 321
30864: PUSH
30865: LD_INT 2
30867: EQUAL
30868: ST_TO_ADDR
30869: GO 31082
30871: LD_INT 28
30873: DOUBLE
30874: EQUAL
30875: IFTRUE 30885
30877: LD_INT 21
30879: DOUBLE
30880: EQUAL
30881: IFTRUE 30885
30883: GO 30910
30885: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30886: LD_ADDR_VAR 0 3
30890: PUSH
30891: LD_INT 21
30893: PPUSH
30894: LD_VAR 0 1
30898: PPUSH
30899: CALL_OW 321
30903: PUSH
30904: LD_INT 2
30906: EQUAL
30907: ST_TO_ADDR
30908: GO 31082
30910: LD_INT 16
30912: DOUBLE
30913: EQUAL
30914: IFTRUE 30918
30916: GO 30943
30918: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30919: LD_ADDR_VAR 0 3
30923: PUSH
30924: LD_INT 84
30926: PPUSH
30927: LD_VAR 0 1
30931: PPUSH
30932: CALL_OW 321
30936: PUSH
30937: LD_INT 2
30939: EQUAL
30940: ST_TO_ADDR
30941: GO 31082
30943: LD_INT 19
30945: DOUBLE
30946: EQUAL
30947: IFTRUE 30957
30949: LD_INT 23
30951: DOUBLE
30952: EQUAL
30953: IFTRUE 30957
30955: GO 30982
30957: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30958: LD_ADDR_VAR 0 3
30962: PUSH
30963: LD_INT 83
30965: PPUSH
30966: LD_VAR 0 1
30970: PPUSH
30971: CALL_OW 321
30975: PUSH
30976: LD_INT 2
30978: EQUAL
30979: ST_TO_ADDR
30980: GO 31082
30982: LD_INT 17
30984: DOUBLE
30985: EQUAL
30986: IFTRUE 30990
30988: GO 31015
30990: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30991: LD_ADDR_VAR 0 3
30995: PUSH
30996: LD_INT 39
30998: PPUSH
30999: LD_VAR 0 1
31003: PPUSH
31004: CALL_OW 321
31008: PUSH
31009: LD_INT 2
31011: EQUAL
31012: ST_TO_ADDR
31013: GO 31082
31015: LD_INT 18
31017: DOUBLE
31018: EQUAL
31019: IFTRUE 31023
31021: GO 31048
31023: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
31024: LD_ADDR_VAR 0 3
31028: PUSH
31029: LD_INT 40
31031: PPUSH
31032: LD_VAR 0 1
31036: PPUSH
31037: CALL_OW 321
31041: PUSH
31042: LD_INT 2
31044: EQUAL
31045: ST_TO_ADDR
31046: GO 31082
31048: LD_INT 27
31050: DOUBLE
31051: EQUAL
31052: IFTRUE 31056
31054: GO 31081
31056: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
31057: LD_ADDR_VAR 0 3
31061: PUSH
31062: LD_INT 35
31064: PPUSH
31065: LD_VAR 0 1
31069: PPUSH
31070: CALL_OW 321
31074: PUSH
31075: LD_INT 2
31077: EQUAL
31078: ST_TO_ADDR
31079: GO 31082
31081: POP
// end ;
31082: LD_VAR 0 3
31086: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
31087: LD_INT 0
31089: PPUSH
31090: PPUSH
31091: PPUSH
31092: PPUSH
31093: PPUSH
31094: PPUSH
31095: PPUSH
31096: PPUSH
31097: PPUSH
31098: PPUSH
31099: PPUSH
// result := false ;
31100: LD_ADDR_VAR 0 6
31104: PUSH
31105: LD_INT 0
31107: ST_TO_ADDR
// if btype = b_depot then
31108: LD_VAR 0 2
31112: PUSH
31113: LD_INT 0
31115: EQUAL
31116: IFFALSE 31128
// begin result := true ;
31118: LD_ADDR_VAR 0 6
31122: PUSH
31123: LD_INT 1
31125: ST_TO_ADDR
// exit ;
31126: GO 31982
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31128: LD_VAR 0 1
31132: NOT
31133: IFTRUE 31158
31135: PUSH
31136: LD_VAR 0 1
31140: PPUSH
31141: CALL_OW 266
31145: PUSH
31146: LD_INT 0
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: IN
31156: NOT
31157: OR
31158: IFTRUE 31167
31160: PUSH
31161: LD_VAR 0 2
31165: NOT
31166: OR
31167: IFTRUE 31203
31169: PUSH
31170: LD_VAR 0 5
31174: PUSH
31175: LD_INT 0
31177: PUSH
31178: LD_INT 1
31180: PUSH
31181: LD_INT 2
31183: PUSH
31184: LD_INT 3
31186: PUSH
31187: LD_INT 4
31189: PUSH
31190: LD_INT 5
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: IN
31201: NOT
31202: OR
31203: IFTRUE 31222
31205: PUSH
31206: LD_VAR 0 3
31210: PPUSH
31211: LD_VAR 0 4
31215: PPUSH
31216: CALL_OW 488
31220: NOT
31221: OR
31222: IFFALSE 31226
// exit ;
31224: GO 31982
// side := GetSide ( depot ) ;
31226: LD_ADDR_VAR 0 9
31230: PUSH
31231: LD_VAR 0 1
31235: PPUSH
31236: CALL_OW 255
31240: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
31241: LD_VAR 0 9
31245: PPUSH
31246: LD_VAR 0 2
31250: PPUSH
31251: CALL 30711 0 2
31255: NOT
31256: IFFALSE 31260
// exit ;
31258: GO 31982
// pom := GetBase ( depot ) ;
31260: LD_ADDR_VAR 0 10
31264: PUSH
31265: LD_VAR 0 1
31269: PPUSH
31270: CALL_OW 274
31274: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31275: LD_ADDR_VAR 0 11
31279: PUSH
31280: LD_VAR 0 2
31284: PPUSH
31285: LD_VAR 0 1
31289: PPUSH
31290: CALL_OW 248
31294: PPUSH
31295: CALL_OW 450
31299: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31300: LD_VAR 0 10
31304: PPUSH
31305: LD_INT 1
31307: PPUSH
31308: CALL_OW 275
31312: PUSH
31313: LD_VAR 0 11
31317: PUSH
31318: LD_INT 1
31320: ARRAY
31321: GREATEREQUAL
31322: IFFALSE 31348
31324: PUSH
31325: LD_VAR 0 10
31329: PPUSH
31330: LD_INT 2
31332: PPUSH
31333: CALL_OW 275
31337: PUSH
31338: LD_VAR 0 11
31342: PUSH
31343: LD_INT 2
31345: ARRAY
31346: GREATEREQUAL
31347: AND
31348: IFFALSE 31374
31350: PUSH
31351: LD_VAR 0 10
31355: PPUSH
31356: LD_INT 3
31358: PPUSH
31359: CALL_OW 275
31363: PUSH
31364: LD_VAR 0 11
31368: PUSH
31369: LD_INT 3
31371: ARRAY
31372: GREATEREQUAL
31373: AND
31374: NOT
31375: IFFALSE 31379
// exit ;
31377: GO 31982
// if GetBType ( depot ) = b_depot then
31379: LD_VAR 0 1
31383: PPUSH
31384: CALL_OW 266
31388: PUSH
31389: LD_INT 0
31391: EQUAL
31392: IFFALSE 31404
// dist := 28 else
31394: LD_ADDR_VAR 0 14
31398: PUSH
31399: LD_INT 28
31401: ST_TO_ADDR
31402: GO 31412
// dist := 36 ;
31404: LD_ADDR_VAR 0 14
31408: PUSH
31409: LD_INT 36
31411: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31412: LD_VAR 0 1
31416: PPUSH
31417: LD_VAR 0 3
31421: PPUSH
31422: LD_VAR 0 4
31426: PPUSH
31427: CALL_OW 297
31431: PUSH
31432: LD_VAR 0 14
31436: GREATER
31437: IFFALSE 31441
// exit ;
31439: GO 31982
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31441: LD_ADDR_VAR 0 12
31445: PUSH
31446: LD_VAR 0 2
31450: PPUSH
31451: LD_VAR 0 3
31455: PPUSH
31456: LD_VAR 0 4
31460: PPUSH
31461: LD_VAR 0 5
31465: PPUSH
31466: LD_VAR 0 1
31470: PPUSH
31471: CALL_OW 248
31475: PPUSH
31476: LD_INT 0
31478: PPUSH
31479: CALL 31987 0 6
31483: ST_TO_ADDR
// if not hexes then
31484: LD_VAR 0 12
31488: NOT
31489: IFFALSE 31493
// exit ;
31491: GO 31982
// hex := GetHexInfo ( x , y ) ;
31493: LD_ADDR_VAR 0 15
31497: PUSH
31498: LD_VAR 0 3
31502: PPUSH
31503: LD_VAR 0 4
31507: PPUSH
31508: CALL_OW 546
31512: ST_TO_ADDR
// if hex [ 1 ] then
31513: LD_VAR 0 15
31517: PUSH
31518: LD_INT 1
31520: ARRAY
31521: IFFALSE 31525
// exit ;
31523: GO 31982
// height := hex [ 2 ] ;
31525: LD_ADDR_VAR 0 13
31529: PUSH
31530: LD_VAR 0 15
31534: PUSH
31535: LD_INT 2
31537: ARRAY
31538: ST_TO_ADDR
// for i = 1 to hexes do
31539: LD_ADDR_VAR 0 7
31543: PUSH
31544: DOUBLE
31545: LD_INT 1
31547: DEC
31548: ST_TO_ADDR
31549: LD_VAR 0 12
31553: PUSH
31554: FOR_TO
31555: IFFALSE 31899
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31557: LD_VAR 0 12
31561: PUSH
31562: LD_VAR 0 7
31566: ARRAY
31567: PUSH
31568: LD_INT 1
31570: ARRAY
31571: PPUSH
31572: LD_VAR 0 12
31576: PUSH
31577: LD_VAR 0 7
31581: ARRAY
31582: PUSH
31583: LD_INT 2
31585: ARRAY
31586: PPUSH
31587: CALL_OW 488
31591: NOT
31592: IFTRUE 31634
31594: PUSH
31595: LD_VAR 0 12
31599: PUSH
31600: LD_VAR 0 7
31604: ARRAY
31605: PUSH
31606: LD_INT 1
31608: ARRAY
31609: PPUSH
31610: LD_VAR 0 12
31614: PUSH
31615: LD_VAR 0 7
31619: ARRAY
31620: PUSH
31621: LD_INT 2
31623: ARRAY
31624: PPUSH
31625: CALL_OW 428
31629: PUSH
31630: LD_INT 0
31632: GREATER
31633: OR
31634: IFTRUE 31672
31636: PUSH
31637: LD_VAR 0 12
31641: PUSH
31642: LD_VAR 0 7
31646: ARRAY
31647: PUSH
31648: LD_INT 1
31650: ARRAY
31651: PPUSH
31652: LD_VAR 0 12
31656: PUSH
31657: LD_VAR 0 7
31661: ARRAY
31662: PUSH
31663: LD_INT 2
31665: ARRAY
31666: PPUSH
31667: CALL_OW 351
31671: OR
31672: IFFALSE 31678
// exit ;
31674: POP
31675: POP
31676: GO 31982
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31678: LD_ADDR_VAR 0 8
31682: PUSH
31683: LD_VAR 0 12
31687: PUSH
31688: LD_VAR 0 7
31692: ARRAY
31693: PUSH
31694: LD_INT 1
31696: ARRAY
31697: PPUSH
31698: LD_VAR 0 12
31702: PUSH
31703: LD_VAR 0 7
31707: ARRAY
31708: PUSH
31709: LD_INT 2
31711: ARRAY
31712: PPUSH
31713: CALL_OW 546
31717: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31718: LD_VAR 0 8
31722: PUSH
31723: LD_INT 1
31725: ARRAY
31726: IFTRUE 31748
31728: PUSH
31729: LD_VAR 0 8
31733: PUSH
31734: LD_INT 2
31736: ARRAY
31737: PUSH
31738: LD_VAR 0 13
31742: PUSH
31743: LD_INT 2
31745: PLUS
31746: GREATER
31747: OR
31748: IFTRUE 31770
31750: PUSH
31751: LD_VAR 0 8
31755: PUSH
31756: LD_INT 2
31758: ARRAY
31759: PUSH
31760: LD_VAR 0 13
31764: PUSH
31765: LD_INT 2
31767: MINUS
31768: LESS
31769: OR
31770: IFTRUE 31838
31772: PUSH
31773: LD_VAR 0 8
31777: PUSH
31778: LD_INT 3
31780: ARRAY
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: LD_INT 8
31787: PUSH
31788: LD_INT 9
31790: PUSH
31791: LD_INT 10
31793: PUSH
31794: LD_INT 11
31796: PUSH
31797: LD_INT 12
31799: PUSH
31800: LD_INT 13
31802: PUSH
31803: LD_INT 16
31805: PUSH
31806: LD_INT 17
31808: PUSH
31809: LD_INT 18
31811: PUSH
31812: LD_INT 19
31814: PUSH
31815: LD_INT 20
31817: PUSH
31818: LD_INT 21
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: IN
31836: NOT
31837: OR
31838: IFTRUE 31851
31840: PUSH
31841: LD_VAR 0 8
31845: PUSH
31846: LD_INT 5
31848: ARRAY
31849: NOT
31850: OR
31851: IFTRUE 31891
31853: PUSH
31854: LD_VAR 0 8
31858: PUSH
31859: LD_INT 6
31861: ARRAY
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: LD_INT 7
31871: PUSH
31872: LD_INT 9
31874: PUSH
31875: LD_INT 10
31877: PUSH
31878: LD_INT 11
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: IN
31889: NOT
31890: OR
31891: IFFALSE 31897
// exit ;
31893: POP
31894: POP
31895: GO 31982
// end ;
31897: GO 31554
31899: POP
31900: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31901: LD_VAR 0 9
31905: PPUSH
31906: LD_VAR 0 3
31910: PPUSH
31911: LD_VAR 0 4
31915: PPUSH
31916: LD_INT 20
31918: PPUSH
31919: CALL 23801 0 4
31923: PUSH
31924: LD_INT 4
31926: ARRAY
31927: IFFALSE 31931
// exit ;
31929: GO 31982
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31931: LD_VAR 0 2
31935: PUSH
31936: LD_INT 29
31938: PUSH
31939: LD_INT 30
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: IN
31946: IFFALSE 31970
31948: PUSH
31949: LD_VAR 0 3
31953: PPUSH
31954: LD_VAR 0 4
31958: PPUSH
31959: LD_VAR 0 9
31963: PPUSH
31964: CALL_OW 440
31968: NOT
31969: AND
31970: IFFALSE 31974
// exit ;
31972: GO 31982
// result := true ;
31974: LD_ADDR_VAR 0 6
31978: PUSH
31979: LD_INT 1
31981: ST_TO_ADDR
// end ;
31982: LD_VAR 0 6
31986: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31987: LD_INT 0
31989: PPUSH
31990: PPUSH
31991: PPUSH
31992: PPUSH
31993: PPUSH
31994: PPUSH
31995: PPUSH
31996: PPUSH
31997: PPUSH
31998: PPUSH
31999: PPUSH
32000: PPUSH
32001: PPUSH
32002: PPUSH
32003: PPUSH
32004: PPUSH
32005: PPUSH
32006: PPUSH
32007: PPUSH
32008: PPUSH
32009: PPUSH
32010: PPUSH
32011: PPUSH
32012: PPUSH
32013: PPUSH
32014: PPUSH
32015: PPUSH
32016: PPUSH
32017: PPUSH
32018: PPUSH
32019: PPUSH
32020: PPUSH
32021: PPUSH
32022: PPUSH
32023: PPUSH
32024: PPUSH
32025: PPUSH
32026: PPUSH
32027: PPUSH
32028: PPUSH
32029: PPUSH
32030: PPUSH
32031: PPUSH
32032: PPUSH
32033: PPUSH
32034: PPUSH
32035: PPUSH
32036: PPUSH
32037: PPUSH
32038: PPUSH
32039: PPUSH
32040: PPUSH
32041: PPUSH
32042: PPUSH
32043: PPUSH
32044: PPUSH
32045: PPUSH
32046: PPUSH
// result = [ ] ;
32047: LD_ADDR_VAR 0 7
32051: PUSH
32052: EMPTY
32053: ST_TO_ADDR
// temp_list = [ ] ;
32054: LD_ADDR_VAR 0 9
32058: PUSH
32059: EMPTY
32060: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32061: LD_VAR 0 4
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: LD_INT 1
32071: PUSH
32072: LD_INT 2
32074: PUSH
32075: LD_INT 3
32077: PUSH
32078: LD_INT 4
32080: PUSH
32081: LD_INT 5
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: IN
32092: NOT
32093: IFTRUE 32136
32095: PUSH
32096: LD_VAR 0 1
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: IN
32111: IFFALSE 32135
32113: PUSH
32114: LD_VAR 0 5
32118: PUSH
32119: LD_INT 1
32121: PUSH
32122: LD_INT 2
32124: PUSH
32125: LD_INT 3
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: LIST
32132: IN
32133: NOT
32134: AND
32135: OR
32136: IFFALSE 32140
// exit ;
32138: GO 50539
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32140: LD_VAR 0 1
32144: PUSH
32145: LD_INT 6
32147: PUSH
32148: LD_INT 7
32150: PUSH
32151: LD_INT 8
32153: PUSH
32154: LD_INT 13
32156: PUSH
32157: LD_INT 12
32159: PUSH
32160: LD_INT 15
32162: PUSH
32163: LD_INT 11
32165: PUSH
32166: LD_INT 14
32168: PUSH
32169: LD_INT 10
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: IN
32183: IFFALSE 32193
// btype = b_lab ;
32185: LD_ADDR_VAR 0 1
32189: PUSH
32190: LD_INT 6
32192: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32193: LD_VAR 0 6
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: LD_INT 2
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: LIST
32211: IN
32212: NOT
32213: IFTRUE 32281
32215: PUSH
32216: LD_VAR 0 1
32220: PUSH
32221: LD_INT 0
32223: PUSH
32224: LD_INT 1
32226: PUSH
32227: LD_INT 2
32229: PUSH
32230: LD_INT 3
32232: PUSH
32233: LD_INT 6
32235: PUSH
32236: LD_INT 36
32238: PUSH
32239: LD_INT 4
32241: PUSH
32242: LD_INT 5
32244: PUSH
32245: LD_INT 31
32247: PUSH
32248: LD_INT 32
32250: PUSH
32251: LD_INT 33
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: IN
32267: NOT
32268: IFFALSE 32280
32270: PUSH
32271: LD_VAR 0 6
32275: PUSH
32276: LD_INT 1
32278: EQUAL
32279: AND
32280: OR
32281: IFTRUE 32313
32283: PUSH
32284: LD_VAR 0 1
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 3
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: IN
32299: NOT
32300: IFFALSE 32312
32302: PUSH
32303: LD_VAR 0 6
32307: PUSH
32308: LD_INT 2
32310: EQUAL
32311: AND
32312: OR
32313: IFFALSE 32323
// mode = 0 ;
32315: LD_ADDR_VAR 0 6
32319: PUSH
32320: LD_INT 0
32322: ST_TO_ADDR
// case mode of 0 :
32323: LD_VAR 0 6
32327: PUSH
32328: LD_INT 0
32330: DOUBLE
32331: EQUAL
32332: IFTRUE 32336
32334: GO 43789
32336: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32337: LD_ADDR_VAR 0 11
32341: PUSH
32342: LD_INT 0
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 0
32354: PUSH
32355: LD_INT 1
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 1
32365: PUSH
32366: LD_INT 0
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 1
32375: PUSH
32376: LD_INT 1
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: LD_INT 1
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 1
32395: NEG
32396: PUSH
32397: LD_INT 0
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 1
32406: NEG
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 1
32418: NEG
32419: PUSH
32420: LD_INT 2
32422: NEG
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: LD_INT 2
32433: NEG
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: LD_INT 1
32444: NEG
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 1
32452: PUSH
32453: LD_INT 2
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 0
32462: PUSH
32463: LD_INT 2
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 1
32472: NEG
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 1
32483: PUSH
32484: LD_INT 3
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 0
32493: PUSH
32494: LD_INT 3
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 1
32503: NEG
32504: PUSH
32505: LD_INT 2
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32530: LD_ADDR_VAR 0 12
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: LD_INT 0
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 0
32547: PUSH
32548: LD_INT 1
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 1
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 0
32578: PUSH
32579: LD_INT 1
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 1
32588: NEG
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 1
32599: NEG
32600: PUSH
32601: LD_INT 1
32603: NEG
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: LD_INT 1
32614: NEG
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 2
32622: PUSH
32623: LD_INT 0
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 2
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 2
32653: NEG
32654: PUSH
32655: LD_INT 0
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 2
32664: NEG
32665: PUSH
32666: LD_INT 1
32668: NEG
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 2
32676: NEG
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 3
32687: NEG
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 3
32698: NEG
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32726: LD_ADDR_VAR 0 13
32730: PUSH
32731: LD_INT 0
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 0
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: PUSH
32755: LD_INT 0
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: LD_INT 1
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 1
32784: NEG
32785: PUSH
32786: LD_INT 0
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 1
32795: NEG
32796: PUSH
32797: LD_INT 1
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: LD_INT 2
32811: NEG
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 2
32819: PUSH
32820: LD_INT 1
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 2
32829: PUSH
32830: LD_INT 2
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 1
32839: PUSH
32840: LD_INT 2
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 2
32849: NEG
32850: PUSH
32851: LD_INT 1
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 2
32861: NEG
32862: PUSH
32863: LD_INT 2
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 2
32873: NEG
32874: PUSH
32875: LD_INT 3
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 3
32885: NEG
32886: PUSH
32887: LD_INT 2
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 3
32897: NEG
32898: PUSH
32899: LD_INT 3
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32925: LD_ADDR_VAR 0 14
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: LD_INT 1
32945: NEG
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: LD_INT 0
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: LD_INT 1
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 1
32983: NEG
32984: PUSH
32985: LD_INT 0
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: NEG
32995: PUSH
32996: LD_INT 1
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: LD_INT 2
33010: NEG
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 0
33018: PUSH
33019: LD_INT 2
33021: NEG
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: LD_INT 2
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 0
33050: PUSH
33051: LD_INT 2
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: NEG
33061: PUSH
33062: LD_INT 1
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 1
33071: NEG
33072: PUSH
33073: LD_INT 3
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: LD_INT 3
33086: NEG
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: LD_INT 2
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33121: LD_ADDR_VAR 0 15
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: LD_INT 1
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: LD_INT 0
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: LD_INT 1
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 1
33179: NEG
33180: PUSH
33181: LD_INT 0
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 1
33190: NEG
33191: PUSH
33192: LD_INT 1
33194: NEG
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 1
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 2
33223: PUSH
33224: LD_INT 1
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: LD_INT 1
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 2
33244: NEG
33245: PUSH
33246: LD_INT 0
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 2
33255: NEG
33256: PUSH
33257: LD_INT 1
33259: NEG
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 2
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 3
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 3
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33314: LD_ADDR_VAR 0 16
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: LD_INT 0
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 0
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 1
33372: NEG
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: NEG
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 1
33395: NEG
33396: PUSH
33397: LD_INT 2
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 2
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 2
33417: PUSH
33418: LD_INT 2
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 1
33427: PUSH
33428: LD_INT 2
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 2
33437: NEG
33438: PUSH
33439: LD_INT 1
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 2
33449: NEG
33450: PUSH
33451: LD_INT 2
33453: NEG
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 3
33461: PUSH
33462: LD_INT 2
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 3
33471: PUSH
33472: LD_INT 3
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 2
33481: PUSH
33482: LD_INT 3
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33507: LD_ADDR_VAR 0 17
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: LD_INT 1
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: NEG
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 1
33588: NEG
33589: PUSH
33590: LD_INT 2
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: LD_INT 2
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: LD_INT 1
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 2
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: LD_INT 1
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: LD_INT 2
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: LD_INT 2
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 0
33662: PUSH
33663: LD_INT 2
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 1
33672: NEG
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 2
33683: NEG
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 2
33694: NEG
33695: PUSH
33696: LD_INT 1
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: NEG
33707: PUSH
33708: LD_INT 2
33710: NEG
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33737: LD_ADDR_VAR 0 18
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: LD_INT 1
33757: NEG
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 1
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 0
33785: PUSH
33786: LD_INT 1
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 1
33795: NEG
33796: PUSH
33797: LD_INT 0
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 1
33806: NEG
33807: PUSH
33808: LD_INT 1
33810: NEG
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 1
33818: NEG
33819: PUSH
33820: LD_INT 2
33822: NEG
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: LD_INT 2
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: LD_INT 1
33844: NEG
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 2
33852: PUSH
33853: LD_INT 0
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 2
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 2
33872: PUSH
33873: LD_INT 2
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 1
33882: PUSH
33883: LD_INT 2
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 0
33892: PUSH
33893: LD_INT 2
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 1
33902: NEG
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 2
33913: NEG
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 2
33924: NEG
33925: PUSH
33926: LD_INT 1
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 2
33936: NEG
33937: PUSH
33938: LD_INT 2
33940: NEG
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33967: LD_ADDR_VAR 0 19
33971: PUSH
33972: LD_INT 0
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: LD_INT 1
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 0
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 1
34025: NEG
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 1
34036: NEG
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 1
34048: NEG
34049: PUSH
34050: LD_INT 2
34052: NEG
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 0
34060: PUSH
34061: LD_INT 2
34063: NEG
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 1
34071: PUSH
34072: LD_INT 1
34074: NEG
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 2
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 2
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 2
34102: PUSH
34103: LD_INT 2
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 1
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: LD_INT 2
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 1
34132: NEG
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 2
34143: NEG
34144: PUSH
34145: LD_INT 0
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 2
34154: NEG
34155: PUSH
34156: LD_INT 1
34158: NEG
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 2
34166: NEG
34167: PUSH
34168: LD_INT 2
34170: NEG
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34197: LD_ADDR_VAR 0 20
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: LD_INT 0
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 0
34214: PUSH
34215: LD_INT 1
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: LD_INT 1
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: LD_INT 1
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: NEG
34256: PUSH
34257: LD_INT 0
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 1
34266: NEG
34267: PUSH
34268: LD_INT 1
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: NEG
34279: PUSH
34280: LD_INT 2
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 0
34290: PUSH
34291: LD_INT 2
34293: NEG
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 1
34301: PUSH
34302: LD_INT 1
34304: NEG
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 2
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 2
34322: PUSH
34323: LD_INT 1
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 2
34332: PUSH
34333: LD_INT 2
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 1
34342: PUSH
34343: LD_INT 2
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: LD_INT 2
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 1
34362: NEG
34363: PUSH
34364: LD_INT 1
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 2
34373: NEG
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 2
34384: NEG
34385: PUSH
34386: LD_INT 1
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 2
34396: NEG
34397: PUSH
34398: LD_INT 2
34400: NEG
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34427: LD_ADDR_VAR 0 21
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: LD_INT 0
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 0
34444: PUSH
34445: LD_INT 1
34447: NEG
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: LD_INT 0
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 1
34496: NEG
34497: PUSH
34498: LD_INT 1
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: NEG
34509: PUSH
34510: LD_INT 2
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 0
34520: PUSH
34521: LD_INT 2
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 1
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 2
34542: PUSH
34543: LD_INT 0
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 2
34552: PUSH
34553: LD_INT 1
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 2
34562: PUSH
34563: LD_INT 2
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 1
34572: PUSH
34573: LD_INT 2
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: LD_INT 2
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: LD_INT 1
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 2
34603: NEG
34604: PUSH
34605: LD_INT 0
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 2
34614: NEG
34615: PUSH
34616: LD_INT 1
34618: NEG
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 2
34626: NEG
34627: PUSH
34628: LD_INT 2
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34657: LD_ADDR_VAR 0 22
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: LD_INT 0
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: LD_INT 1
34677: NEG
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: LD_INT 1
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: LD_INT 1
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: LD_INT 0
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: LD_INT 1
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 1
34738: NEG
34739: PUSH
34740: LD_INT 2
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 0
34750: PUSH
34751: LD_INT 2
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 2
34772: PUSH
34773: LD_INT 0
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 2
34782: PUSH
34783: LD_INT 1
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 2
34792: PUSH
34793: LD_INT 2
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: LD_INT 2
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: LD_INT 2
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 2
34833: NEG
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 2
34844: NEG
34845: PUSH
34846: LD_INT 1
34848: NEG
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 2
34856: NEG
34857: PUSH
34858: LD_INT 2
34860: NEG
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34887: LD_ADDR_VAR 0 23
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 0
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 0
34904: PUSH
34905: LD_INT 1
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: LD_INT 0
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: LD_INT 1
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: LD_INT 1
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: NEG
34946: PUSH
34947: LD_INT 0
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 1
34956: NEG
34957: PUSH
34958: LD_INT 1
34960: NEG
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 1
34968: NEG
34969: PUSH
34970: LD_INT 2
34972: NEG
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: LD_INT 2
34983: NEG
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: LD_INT 1
34994: NEG
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 2
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 2
35012: PUSH
35013: LD_INT 1
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: LD_INT 2
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: LD_INT 2
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 2
35063: NEG
35064: PUSH
35065: LD_INT 0
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 2
35074: NEG
35075: PUSH
35076: LD_INT 1
35078: NEG
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 2
35086: NEG
35087: PUSH
35088: LD_INT 2
35090: NEG
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 2
35098: NEG
35099: PUSH
35100: LD_INT 3
35102: NEG
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: NEG
35111: PUSH
35112: LD_INT 3
35114: NEG
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 1
35122: PUSH
35123: LD_INT 2
35125: NEG
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 2
35133: PUSH
35134: LD_INT 1
35136: NEG
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35167: LD_ADDR_VAR 0 24
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 0
35184: PUSH
35185: LD_INT 1
35187: NEG
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 1
35195: PUSH
35196: LD_INT 0
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 0
35215: PUSH
35216: LD_INT 1
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 1
35225: NEG
35226: PUSH
35227: LD_INT 0
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 1
35236: NEG
35237: PUSH
35238: LD_INT 1
35240: NEG
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 1
35248: NEG
35249: PUSH
35250: LD_INT 2
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 0
35260: PUSH
35261: LD_INT 2
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 1
35271: PUSH
35272: LD_INT 1
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 2
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 2
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 2
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 1
35312: PUSH
35313: LD_INT 2
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: LD_INT 2
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 1
35332: NEG
35333: PUSH
35334: LD_INT 1
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 2
35343: NEG
35344: PUSH
35345: LD_INT 0
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 2
35354: NEG
35355: PUSH
35356: LD_INT 1
35358: NEG
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 2
35366: NEG
35367: PUSH
35368: LD_INT 2
35370: NEG
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 1
35378: PUSH
35379: LD_INT 2
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 2
35389: PUSH
35390: LD_INT 1
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 3
35400: PUSH
35401: LD_INT 1
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 3
35410: PUSH
35411: LD_INT 2
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35443: LD_ADDR_VAR 0 25
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: LD_INT 1
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: NEG
35502: PUSH
35503: LD_INT 0
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: LD_INT 1
35516: NEG
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: LD_INT 2
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: LD_INT 2
35539: NEG
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 1
35547: PUSH
35548: LD_INT 1
35550: NEG
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 2
35568: PUSH
35569: LD_INT 1
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 2
35578: PUSH
35579: LD_INT 2
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 1
35588: PUSH
35589: LD_INT 2
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: LD_INT 2
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 1
35608: NEG
35609: PUSH
35610: LD_INT 1
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 2
35619: NEG
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 2
35630: NEG
35631: PUSH
35632: LD_INT 1
35634: NEG
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 2
35642: NEG
35643: PUSH
35644: LD_INT 2
35646: NEG
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 3
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 3
35664: PUSH
35665: LD_INT 2
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 2
35674: PUSH
35675: LD_INT 3
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 1
35684: PUSH
35685: LD_INT 3
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35717: LD_ADDR_VAR 0 26
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: LD_INT 0
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: LD_INT 1
35737: NEG
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 1
35775: NEG
35776: PUSH
35777: LD_INT 0
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 1
35786: NEG
35787: PUSH
35788: LD_INT 1
35790: NEG
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 1
35798: NEG
35799: PUSH
35800: LD_INT 2
35802: NEG
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: LD_INT 2
35813: NEG
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 1
35821: PUSH
35822: LD_INT 1
35824: NEG
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 2
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 2
35842: PUSH
35843: LD_INT 1
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 2
35852: PUSH
35853: LD_INT 2
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: LD_INT 2
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: LD_INT 2
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 1
35882: NEG
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 2
35893: NEG
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 2
35904: NEG
35905: PUSH
35906: LD_INT 1
35908: NEG
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 2
35916: NEG
35917: PUSH
35918: LD_INT 2
35920: NEG
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 2
35928: PUSH
35929: LD_INT 3
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: PUSH
35939: LD_INT 3
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: NEG
35949: PUSH
35950: LD_INT 2
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 2
35959: NEG
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35993: LD_ADDR_VAR 0 27
35997: PUSH
35998: LD_INT 0
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 1
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 0
36041: PUSH
36042: LD_INT 1
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 1
36074: NEG
36075: PUSH
36076: LD_INT 2
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: LD_INT 2
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: LD_INT 1
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 2
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 2
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 2
36128: PUSH
36129: LD_INT 2
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 1
36138: PUSH
36139: LD_INT 2
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: LD_INT 2
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: LD_INT 1
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 2
36169: NEG
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 2
36180: NEG
36181: PUSH
36182: LD_INT 1
36184: NEG
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 2
36192: NEG
36193: PUSH
36194: LD_INT 2
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 1
36204: NEG
36205: PUSH
36206: LD_INT 2
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 2
36215: NEG
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 3
36226: NEG
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 3
36238: NEG
36239: PUSH
36240: LD_INT 2
36242: NEG
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36273: LD_ADDR_VAR 0 28
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: LD_INT 1
36293: NEG
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: LD_INT 1
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: LD_INT 1
36346: NEG
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 1
36354: NEG
36355: PUSH
36356: LD_INT 2
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 0
36366: PUSH
36367: LD_INT 2
36369: NEG
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 2
36388: PUSH
36389: LD_INT 0
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 2
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 2
36408: PUSH
36409: LD_INT 2
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: LD_INT 2
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 1
36438: NEG
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 2
36449: NEG
36450: PUSH
36451: LD_INT 0
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 2
36460: NEG
36461: PUSH
36462: LD_INT 1
36464: NEG
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 2
36472: NEG
36473: PUSH
36474: LD_INT 2
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 2
36484: NEG
36485: PUSH
36486: LD_INT 3
36488: NEG
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 1
36496: NEG
36497: PUSH
36498: LD_INT 3
36500: NEG
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 3
36508: NEG
36509: PUSH
36510: LD_INT 1
36512: NEG
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 3
36520: NEG
36521: PUSH
36522: LD_INT 2
36524: NEG
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36555: LD_ADDR_VAR 0 29
36559: PUSH
36560: LD_INT 0
36562: PUSH
36563: LD_INT 0
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: LD_INT 1
36575: NEG
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 1
36624: NEG
36625: PUSH
36626: LD_INT 1
36628: NEG
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: NEG
36637: PUSH
36638: LD_INT 2
36640: NEG
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: LD_INT 2
36651: NEG
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 1
36659: PUSH
36660: LD_INT 1
36662: NEG
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 2
36680: PUSH
36681: LD_INT 1
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 1
36690: PUSH
36691: LD_INT 2
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: LD_INT 2
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 2
36721: NEG
36722: PUSH
36723: LD_INT 1
36725: NEG
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 2
36733: NEG
36734: PUSH
36735: LD_INT 2
36737: NEG
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 2
36745: NEG
36746: PUSH
36747: LD_INT 3
36749: NEG
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 2
36757: PUSH
36758: LD_INT 1
36760: NEG
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 3
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 1
36778: PUSH
36779: LD_INT 3
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: LD_INT 2
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 3
36799: NEG
36800: PUSH
36801: LD_INT 2
36803: NEG
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36834: LD_ADDR_VAR 0 30
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: LD_INT 1
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: LD_INT 0
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: LD_INT 1
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 0
36882: PUSH
36883: LD_INT 1
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 1
36892: NEG
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: NEG
36904: PUSH
36905: LD_INT 1
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 1
36915: NEG
36916: PUSH
36917: LD_INT 2
36919: NEG
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 0
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 2
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 2
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 2
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 1
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: LD_INT 1
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 2
37000: NEG
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 2
37011: NEG
37012: PUSH
37013: LD_INT 1
37015: NEG
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: LD_INT 3
37027: NEG
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: LD_INT 2
37038: NEG
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 3
37046: PUSH
37047: LD_INT 2
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 2
37056: PUSH
37057: LD_INT 3
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 2
37066: NEG
37067: PUSH
37068: LD_INT 1
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 3
37077: NEG
37078: PUSH
37079: LD_INT 1
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37112: LD_ADDR_VAR 0 31
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: LD_INT 0
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: LD_INT 1
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 1
37150: PUSH
37151: LD_INT 1
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 0
37160: PUSH
37161: LD_INT 1
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 1
37193: NEG
37194: PUSH
37195: LD_INT 2
37197: NEG
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 2
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: LD_INT 1
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 2
37236: PUSH
37237: LD_INT 2
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: LD_INT 2
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 2
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: NEG
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 2
37277: NEG
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 2
37289: NEG
37290: PUSH
37291: LD_INT 2
37293: NEG
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 2
37301: NEG
37302: PUSH
37303: LD_INT 3
37305: NEG
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 2
37313: PUSH
37314: LD_INT 1
37316: NEG
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 3
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: LD_INT 3
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: LD_INT 2
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 3
37355: NEG
37356: PUSH
37357: LD_INT 2
37359: NEG
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37390: LD_ADDR_VAR 0 32
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: LD_INT 1
37410: NEG
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: LD_INT 1
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 1
37448: NEG
37449: PUSH
37450: LD_INT 0
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: NEG
37460: PUSH
37461: LD_INT 1
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 1
37471: NEG
37472: PUSH
37473: LD_INT 2
37475: NEG
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: LD_INT 2
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: LD_INT 1
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: LD_INT 2
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: LD_INT 2
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: LD_INT 1
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 2
37556: NEG
37557: PUSH
37558: LD_INT 0
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 2
37567: NEG
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 1
37579: NEG
37580: PUSH
37581: LD_INT 3
37583: NEG
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: LD_INT 2
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 3
37602: PUSH
37603: LD_INT 2
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 2
37612: PUSH
37613: LD_INT 3
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 2
37622: NEG
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 3
37633: NEG
37634: PUSH
37635: LD_INT 1
37637: NEG
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37668: LD_ADDR_VAR 0 33
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: LD_INT 1
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: NEG
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 1
37737: NEG
37738: PUSH
37739: LD_INT 1
37741: NEG
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 1
37749: NEG
37750: PUSH
37751: LD_INT 2
37753: NEG
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 2
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: PUSH
37793: LD_INT 2
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 0
37802: PUSH
37803: LD_INT 2
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: LD_INT 1
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 2
37823: NEG
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 2
37834: NEG
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 2
37846: NEG
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 2
37858: NEG
37859: PUSH
37860: LD_INT 3
37862: NEG
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 2
37870: PUSH
37871: LD_INT 1
37873: NEG
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 3
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: LD_INT 3
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: LD_INT 2
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 3
37912: NEG
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37947: LD_ADDR_VAR 0 34
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: LD_INT 1
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 1
38028: NEG
38029: PUSH
38030: LD_INT 2
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: LD_INT 2
38043: NEG
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 2
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 2
38072: PUSH
38073: LD_INT 2
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: LD_INT 2
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: LD_INT 1
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 2
38114: NEG
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 2
38126: NEG
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: LD_INT 3
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 1
38150: PUSH
38151: LD_INT 2
38153: NEG
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 3
38161: PUSH
38162: LD_INT 2
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 2
38171: PUSH
38172: LD_INT 3
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 2
38181: NEG
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 3
38192: NEG
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38227: LD_ADDR_VAR 0 35
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: LD_INT 1
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 1
38296: NEG
38297: PUSH
38298: LD_INT 1
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 2
38318: NEG
38319: PUSH
38320: LD_INT 1
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38339: LD_ADDR_VAR 0 36
38343: PUSH
38344: LD_INT 0
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 1
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: LD_INT 1
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: LD_INT 0
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: LD_INT 1
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: LD_INT 2
38424: NEG
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: LD_INT 2
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38451: LD_ADDR_VAR 0 37
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: PUSH
38533: LD_INT 1
38535: NEG
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38563: LD_ADDR_VAR 0 38
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: LD_INT 0
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 1
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: LD_INT 1
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 0
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 1
38632: NEG
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 2
38654: NEG
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38675: LD_ADDR_VAR 0 39
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 0
38692: PUSH
38693: LD_INT 1
38695: NEG
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: LD_INT 0
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: LD_INT 1
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: LD_INT 1
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 1
38733: NEG
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: LD_INT 1
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 1
38756: NEG
38757: PUSH
38758: LD_INT 2
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38787: LD_ADDR_VAR 0 40
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 0
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: LD_INT 0
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: LD_INT 1
38860: NEG
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 1
38868: PUSH
38869: LD_INT 1
38871: NEG
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: PUSH
38881: LD_INT 1
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38899: LD_ADDR_VAR 0 41
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: LD_INT 1
38919: NEG
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: LD_INT 1
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: LD_INT 2
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 2
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: PUSH
39034: LD_INT 2
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: NEG
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 2
39054: NEG
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 2
39065: NEG
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 2
39077: NEG
39078: PUSH
39079: LD_INT 2
39081: NEG
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 2
39089: NEG
39090: PUSH
39091: LD_INT 3
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 3
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 3
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 3
39132: PUSH
39133: LD_INT 2
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 3
39142: PUSH
39143: LD_INT 3
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: LD_INT 3
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 2
39162: NEG
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 3
39173: NEG
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 3
39184: NEG
39185: PUSH
39186: LD_INT 1
39188: NEG
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 3
39196: NEG
39197: PUSH
39198: LD_INT 2
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 3
39208: NEG
39209: PUSH
39210: LD_INT 3
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39249: LD_ADDR_VAR 0 42
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: LD_INT 1
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 1
39318: NEG
39319: PUSH
39320: LD_INT 1
39322: NEG
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: LD_INT 2
39334: NEG
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: LD_INT 2
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 2
39374: PUSH
39375: LD_INT 2
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: LD_INT 2
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: LD_INT 2
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 2
39415: NEG
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 2
39427: NEG
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: LD_INT 3
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: LD_INT 3
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: LD_INT 3
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: LD_INT 2
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 3
39485: PUSH
39486: LD_INT 2
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 3
39495: PUSH
39496: LD_INT 3
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: LD_INT 3
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: LD_INT 3
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: LD_INT 3
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: LD_INT 2
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 3
39546: NEG
39547: PUSH
39548: LD_INT 2
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 3
39558: NEG
39559: PUSH
39560: LD_INT 3
39562: NEG
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39599: LD_ADDR_VAR 0 43
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 0
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: NEG
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: LD_INT 2
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: LD_INT 2
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 2
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 2
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: LD_INT 2
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 2
39765: NEG
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: NEG
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: LD_INT 3
39792: NEG
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: LD_INT 3
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: LD_INT 2
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 2
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 3
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 3
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: LD_INT 3
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: LD_INT 3
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: LD_INT 2
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 3
39895: NEG
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 3
39906: NEG
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39947: LD_ADDR_VAR 0 44
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 1
40028: NEG
40029: PUSH
40030: LD_INT 2
40032: NEG
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: LD_INT 1
40043: NEG
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 2
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 2
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: LD_INT 2
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 1
40081: PUSH
40082: LD_INT 2
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 1
40091: NEG
40092: PUSH
40093: LD_INT 1
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 2
40102: NEG
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 2
40113: NEG
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 2
40125: NEG
40126: PUSH
40127: LD_INT 2
40129: NEG
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 2
40137: NEG
40138: PUSH
40139: LD_INT 3
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 2
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 3
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 3
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 3
40180: PUSH
40181: LD_INT 2
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 3
40190: PUSH
40191: LD_INT 3
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 2
40200: PUSH
40201: LD_INT 3
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: NEG
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 3
40221: NEG
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 3
40232: NEG
40233: PUSH
40234: LD_INT 1
40236: NEG
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 3
40244: NEG
40245: PUSH
40246: LD_INT 2
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 3
40256: NEG
40257: PUSH
40258: LD_INT 3
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40297: LD_ADDR_VAR 0 45
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 2
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: LD_INT 2
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: LD_INT 2
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 2
40463: NEG
40464: PUSH
40465: LD_INT 1
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 2
40475: NEG
40476: PUSH
40477: LD_INT 2
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 2
40487: NEG
40488: PUSH
40489: LD_INT 3
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: PUSH
40501: LD_INT 3
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: LD_INT 3
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: PUSH
40523: LD_INT 2
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 3
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 3
40543: PUSH
40544: LD_INT 3
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 2
40553: PUSH
40554: LD_INT 3
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 1
40563: PUSH
40564: LD_INT 3
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: LD_INT 3
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 1
40583: NEG
40584: PUSH
40585: LD_INT 2
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 3
40594: NEG
40595: PUSH
40596: LD_INT 2
40598: NEG
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 3
40606: NEG
40607: PUSH
40608: LD_INT 3
40610: NEG
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40647: LD_ADDR_VAR 0 46
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: LD_INT 1
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: LD_INT 2
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: LD_INT 2
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 2
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: LD_INT 2
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 2
40813: NEG
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: NEG
40825: PUSH
40826: LD_INT 1
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: LD_INT 3
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: LD_INT 3
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: PUSH
40860: LD_INT 2
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 2
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 3
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 3
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: LD_INT 3
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 0
40911: PUSH
40912: LD_INT 3
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: LD_INT 2
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 2
40932: NEG
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 3
40943: NEG
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 3
40954: NEG
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40995: LD_ADDR_VAR 0 47
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: LD_INT 2
41091: NEG
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: PUSH
41100: LD_INT 1
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: LD_INT 1
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 2
41122: NEG
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41146: LD_ADDR_VAR 0 48
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: LD_INT 1
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: LD_INT 1
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: NEG
41228: PUSH
41229: LD_INT 2
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: LD_INT 2
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 2
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41293: LD_ADDR_VAR 0 49
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: LD_INT 1
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 2
41405: PUSH
41406: LD_INT 2
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41437: LD_ADDR_VAR 0 50
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 1
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 2
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: LD_INT 2
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: LD_INT 2
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: LD_INT 2
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41581: LD_ADDR_VAR 0 51
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: LD_INT 2
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 2
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 2
41693: NEG
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 2
41704: NEG
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41728: LD_ADDR_VAR 0 52
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: LD_INT 1
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: NEG
41810: PUSH
41811: LD_INT 2
41813: NEG
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: NEG
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: LD_INT 2
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41879: LD_ADDR_VAR 0 53
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: LD_INT 2
41964: NEG
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: LD_INT 2
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 2
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 2
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: PUSH
42015: LD_INT 2
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 2
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 2
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 2
42055: NEG
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 2
42066: NEG
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 2
42078: NEG
42079: PUSH
42080: LD_INT 2
42082: NEG
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42109: LD_ADDR_VAR 0 54
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: LD_INT 2
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 0
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: PUSH
42214: LD_INT 1
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 2
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 2
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 2
42244: PUSH
42245: LD_INT 2
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: LD_INT 2
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: LD_INT 2
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 2
42285: NEG
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 2
42296: NEG
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 2
42308: NEG
42309: PUSH
42310: LD_INT 2
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42339: LD_ADDR_VAR 0 55
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: LD_INT 2
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: LD_INT 2
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: LD_INT 1
42446: NEG
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 2
42454: PUSH
42455: LD_INT 0
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 2
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: LD_INT 2
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 2
42515: NEG
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: LD_INT 2
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42569: LD_ADDR_VAR 0 56
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: LD_INT 2
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: LD_INT 2
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: LD_INT 2
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: LD_INT 2
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: LD_INT 2
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: NEG
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 2
42745: NEG
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 2
42756: NEG
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 2
42768: NEG
42769: PUSH
42770: LD_INT 2
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42799: LD_ADDR_VAR 0 57
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: NEG
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: LD_INT 2
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 2
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: LD_INT 2
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: LD_INT 2
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 2
42975: NEG
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 2
42986: NEG
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 2
42998: NEG
42999: PUSH
43000: LD_INT 2
43002: NEG
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43029: LD_ADDR_VAR 0 58
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 1
43110: NEG
43111: PUSH
43112: LD_INT 2
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 2
43164: PUSH
43165: LD_INT 2
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: LD_INT 2
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 2
43205: NEG
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 2
43216: NEG
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 2
43228: NEG
43229: PUSH
43230: LD_INT 2
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43259: LD_ADDR_VAR 0 59
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43347: LD_ADDR_VAR 0 60
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: LD_INT 1
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43435: LD_ADDR_VAR 0 61
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43523: LD_ADDR_VAR 0 62
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: LD_INT 1
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 1
43581: NEG
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43611: LD_ADDR_VAR 0 63
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43699: LD_ADDR_VAR 0 64
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: ST_TO_ADDR
// end ; 1 :
43787: GO 49684
43789: LD_INT 1
43791: DOUBLE
43792: EQUAL
43793: IFTRUE 43797
43795: GO 46420
43797: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43798: LD_ADDR_VAR 0 11
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: LD_INT 3
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: LD_INT 3
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: LD_INT 2
43831: NEG
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: LIST
43841: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43842: LD_ADDR_VAR 0 12
43846: PUSH
43847: LD_INT 2
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 3
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 3
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: LIST
43882: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43883: LD_ADDR_VAR 0 13
43887: PUSH
43888: LD_INT 3
43890: PUSH
43891: LD_INT 2
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 3
43900: PUSH
43901: LD_INT 3
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: LD_INT 3
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: LIST
43922: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43923: LD_ADDR_VAR 0 14
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: LD_INT 3
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: LD_INT 3
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: LD_INT 2
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: LIST
43963: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43964: LD_ADDR_VAR 0 15
43968: PUSH
43969: LD_INT 2
43971: NEG
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 3
43982: NEG
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 3
43993: NEG
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: LIST
44007: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44008: LD_ADDR_VAR 0 16
44012: PUSH
44013: LD_INT 2
44015: NEG
44016: PUSH
44017: LD_INT 3
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 3
44027: NEG
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 3
44039: NEG
44040: PUSH
44041: LD_INT 3
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: LIST
44053: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44054: LD_ADDR_VAR 0 17
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: LD_INT 3
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 3
44076: NEG
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: LD_INT 2
44087: NEG
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: LIST
44097: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44098: LD_ADDR_VAR 0 18
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 3
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 3
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44139: LD_ADDR_VAR 0 19
44143: PUSH
44144: LD_INT 3
44146: PUSH
44147: LD_INT 2
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 3
44156: PUSH
44157: LD_INT 3
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: LD_INT 3
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: LIST
44178: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44179: LD_ADDR_VAR 0 20
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 3
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: LD_INT 3
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: LIST
44219: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44220: LD_ADDR_VAR 0 21
44224: PUSH
44225: LD_INT 2
44227: NEG
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 3
44238: NEG
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 3
44249: NEG
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: LIST
44263: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44264: LD_ADDR_VAR 0 22
44268: PUSH
44269: LD_INT 2
44271: NEG
44272: PUSH
44273: LD_INT 3
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 3
44283: NEG
44284: PUSH
44285: LD_INT 2
44287: NEG
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 3
44295: NEG
44296: PUSH
44297: LD_INT 3
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: LIST
44309: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44310: LD_ADDR_VAR 0 23
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 3
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: LD_INT 4
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: LD_INT 3
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44354: LD_ADDR_VAR 0 24
44358: PUSH
44359: LD_INT 3
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 3
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 4
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: LIST
44394: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44395: LD_ADDR_VAR 0 25
44399: PUSH
44400: LD_INT 3
44402: PUSH
44403: LD_INT 3
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 4
44412: PUSH
44413: LD_INT 3
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 3
44422: PUSH
44423: LD_INT 4
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: LIST
44434: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44435: LD_ADDR_VAR 0 26
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 3
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 4
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: LD_INT 3
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: LIST
44475: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44476: LD_ADDR_VAR 0 27
44480: PUSH
44481: LD_INT 3
44483: NEG
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 3
44494: NEG
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 4
44505: NEG
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: LIST
44519: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44520: LD_ADDR_VAR 0 28
44524: PUSH
44525: LD_INT 3
44527: NEG
44528: PUSH
44529: LD_INT 3
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 3
44539: NEG
44540: PUSH
44541: LD_INT 4
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 4
44551: NEG
44552: PUSH
44553: LD_INT 3
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: LIST
44565: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44566: LD_ADDR_VAR 0 29
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: LD_INT 3
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 3
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: LD_INT 2
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: NEG
44608: PUSH
44609: LD_INT 4
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: LD_INT 4
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: LD_INT 3
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: LD_INT 5
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: LD_INT 5
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: LD_INT 4
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: LD_INT 6
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: LD_INT 6
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: LD_INT 5
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44721: LD_ADDR_VAR 0 30
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 3
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 3
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 3
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 4
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 4
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 4
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 5
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 5
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 5
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 6
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 6
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44864: LD_ADDR_VAR 0 31
44868: PUSH
44869: LD_INT 3
44871: PUSH
44872: LD_INT 2
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 3
44881: PUSH
44882: LD_INT 3
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 2
44891: PUSH
44892: LD_INT 3
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 4
44901: PUSH
44902: LD_INT 3
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 4
44911: PUSH
44912: LD_INT 4
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 3
44921: PUSH
44922: LD_INT 4
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 5
44931: PUSH
44932: LD_INT 4
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 5
44941: PUSH
44942: LD_INT 5
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 4
44951: PUSH
44952: LD_INT 5
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 6
44961: PUSH
44962: LD_INT 5
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 6
44971: PUSH
44972: LD_INT 6
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 5
44981: PUSH
44982: LD_INT 6
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45003: LD_ADDR_VAR 0 32
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: LD_INT 3
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: LD_INT 3
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: LD_INT 4
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: LD_INT 4
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: LD_INT 3
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: PUSH
45073: LD_INT 5
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: LD_INT 5
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: LD_INT 4
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: LD_INT 6
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 6
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: NEG
45124: PUSH
45125: LD_INT 5
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45146: LD_ADDR_VAR 0 33
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 3
45164: NEG
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 3
45175: NEG
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 3
45187: NEG
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 4
45198: NEG
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 4
45209: NEG
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 4
45221: NEG
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 5
45232: NEG
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 5
45243: NEG
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 5
45255: NEG
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 6
45266: NEG
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 6
45277: NEG
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45301: LD_ADDR_VAR 0 34
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: LD_INT 3
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 3
45320: NEG
45321: PUSH
45322: LD_INT 2
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 3
45332: NEG
45333: PUSH
45334: LD_INT 3
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 3
45344: NEG
45345: PUSH
45346: LD_INT 4
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 4
45356: NEG
45357: PUSH
45358: LD_INT 3
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 4
45368: NEG
45369: PUSH
45370: LD_INT 4
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 4
45380: NEG
45381: PUSH
45382: LD_INT 5
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 5
45392: NEG
45393: PUSH
45394: LD_INT 4
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 5
45404: NEG
45405: PUSH
45406: LD_INT 5
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 5
45416: NEG
45417: PUSH
45418: LD_INT 6
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 6
45428: NEG
45429: PUSH
45430: LD_INT 5
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 6
45440: NEG
45441: PUSH
45442: LD_INT 6
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45464: LD_ADDR_VAR 0 41
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: LD_INT 3
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: LD_INT 2
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45508: LD_ADDR_VAR 0 42
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 3
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: LIST
45548: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45549: LD_ADDR_VAR 0 43
45553: PUSH
45554: LD_INT 2
45556: PUSH
45557: LD_INT 2
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 3
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: LD_INT 3
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: LIST
45588: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45589: LD_ADDR_VAR 0 44
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 3
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 2
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: LIST
45629: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45630: LD_ADDR_VAR 0 45
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 3
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: LIST
45673: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45674: LD_ADDR_VAR 0 46
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: LD_INT 3
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 3
45705: NEG
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: LIST
45719: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45720: LD_ADDR_VAR 0 47
45724: PUSH
45725: LD_INT 2
45727: NEG
45728: PUSH
45729: LD_INT 3
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: LD_INT 3
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45753: LD_ADDR_VAR 0 48
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: LD_INT 2
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45784: LD_ADDR_VAR 0 49
45788: PUSH
45789: LD_INT 3
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 3
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45813: LD_ADDR_VAR 0 50
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: LD_INT 3
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: LD_INT 3
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45842: LD_ADDR_VAR 0 51
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: LD_INT 2
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45873: LD_ADDR_VAR 0 52
45877: PUSH
45878: LD_INT 3
45880: NEG
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 3
45892: NEG
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45906: LD_ADDR_VAR 0 53
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: LD_INT 3
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: LD_INT 3
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: LIST
45949: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45950: LD_ADDR_VAR 0 54
45954: PUSH
45955: LD_INT 2
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 3
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 3
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: LIST
45990: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45991: LD_ADDR_VAR 0 55
45995: PUSH
45996: LD_INT 3
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 3
46008: PUSH
46009: LD_INT 3
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: LD_INT 3
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: LIST
46030: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46031: LD_ADDR_VAR 0 56
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: LD_INT 3
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: LD_INT 3
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: LIST
46071: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46072: LD_ADDR_VAR 0 57
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 3
46090: NEG
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 3
46101: NEG
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: LIST
46115: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46116: LD_ADDR_VAR 0 58
46120: PUSH
46121: LD_INT 2
46123: NEG
46124: PUSH
46125: LD_INT 3
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 3
46135: NEG
46136: PUSH
46137: LD_INT 2
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 3
46147: NEG
46148: PUSH
46149: LD_INT 3
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: LIST
46161: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46162: LD_ADDR_VAR 0 59
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 2
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: LD_INT 2
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: LIST
46205: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46206: LD_ADDR_VAR 0 60
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: LIST
46246: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46247: LD_ADDR_VAR 0 61
46251: PUSH
46252: LD_INT 2
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 2
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: LIST
46286: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46287: LD_ADDR_VAR 0 62
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 2
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: LD_INT 2
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: LIST
46327: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46328: LD_ADDR_VAR 0 63
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: LIST
46371: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46372: LD_ADDR_VAR 0 64
46376: PUSH
46377: LD_INT 1
46379: NEG
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 2
46391: NEG
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: LD_INT 2
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: LIST
46417: ST_TO_ADDR
// end ; 2 :
46418: GO 49684
46420: LD_INT 2
46422: DOUBLE
46423: EQUAL
46424: IFTRUE 46428
46426: GO 49683
46428: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46429: LD_ADDR_VAR 0 29
46433: PUSH
46434: LD_INT 4
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 4
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 5
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 5
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 4
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 3
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 3
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 3
46508: PUSH
46509: LD_INT 2
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 5
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 3
46529: PUSH
46530: LD_INT 3
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 3
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 4
46549: PUSH
46550: LD_INT 3
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 4
46559: PUSH
46560: LD_INT 4
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 3
46569: PUSH
46570: LD_INT 4
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 3
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 4
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: PUSH
46610: LD_INT 4
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: LD_INT 4
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 3
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: LD_INT 4
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: LD_INT 5
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: LD_INT 5
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: LD_INT 4
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: LD_INT 3
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: LD_INT 5
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: LD_INT 3
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 3
46712: NEG
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 3
46723: NEG
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 3
46757: NEG
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 4
46768: NEG
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 4
46779: NEG
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 4
46791: NEG
46792: PUSH
46793: LD_INT 2
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 4
46814: NEG
46815: PUSH
46816: LD_INT 4
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 4
46826: NEG
46827: PUSH
46828: LD_INT 5
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 3
46838: NEG
46839: PUSH
46840: LD_INT 4
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 3
46850: NEG
46851: PUSH
46852: LD_INT 3
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 4
46862: NEG
46863: PUSH
46864: LD_INT 3
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 5
46874: NEG
46875: PUSH
46876: LD_INT 4
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 5
46886: NEG
46887: PUSH
46888: LD_INT 5
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 3
46898: NEG
46899: PUSH
46900: LD_INT 5
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 5
46910: NEG
46911: PUSH
46912: LD_INT 3
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46967: LD_ADDR_VAR 0 30
46971: PUSH
46972: LD_INT 4
46974: PUSH
46975: LD_INT 4
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 4
46984: PUSH
46985: LD_INT 3
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 5
46994: PUSH
46995: LD_INT 4
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 5
47004: PUSH
47005: LD_INT 5
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 4
47014: PUSH
47015: LD_INT 5
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: LD_INT 4
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 3
47034: PUSH
47035: LD_INT 3
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 5
47044: PUSH
47045: LD_INT 3
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 3
47054: PUSH
47055: LD_INT 5
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 3
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: LD_INT 3
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: LD_INT 4
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 4
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: LD_INT 3
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: NEG
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 4
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 4
47157: NEG
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 4
47168: NEG
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 3
47180: NEG
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 3
47191: NEG
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 4
47202: NEG
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 5
47213: NEG
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 5
47224: NEG
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 5
47236: NEG
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 3
47248: NEG
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 3
47259: NEG
47260: PUSH
47261: LD_INT 3
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 3
47271: NEG
47272: PUSH
47273: LD_INT 4
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: LD_INT 3
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 3
47307: NEG
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 4
47319: NEG
47320: PUSH
47321: LD_INT 3
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 4
47331: NEG
47332: PUSH
47333: LD_INT 4
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 2
47343: NEG
47344: PUSH
47345: LD_INT 4
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 4
47355: NEG
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: LD_INT 4
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: LD_INT 5
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: LD_INT 4
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 3
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 3
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 4
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: LD_INT 5
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: LD_INT 3
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: LD_INT 5
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47514: LD_ADDR_VAR 0 31
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 4
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 3
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 4
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: LD_INT 5
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: LD_INT 5
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: LD_INT 4
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: LD_INT 3
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: LD_INT 5
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: LD_INT 3
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 3
47614: NEG
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 3
47625: NEG
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 3
47659: NEG
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 4
47670: NEG
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 4
47681: NEG
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 4
47693: NEG
47694: PUSH
47695: LD_INT 2
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 4
47716: NEG
47717: PUSH
47718: LD_INT 4
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 4
47728: NEG
47729: PUSH
47730: LD_INT 5
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 3
47740: NEG
47741: PUSH
47742: LD_INT 4
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 3
47752: NEG
47753: PUSH
47754: LD_INT 3
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 4
47764: NEG
47765: PUSH
47766: LD_INT 3
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 5
47776: NEG
47777: PUSH
47778: LD_INT 4
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 5
47788: NEG
47789: PUSH
47790: LD_INT 5
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 3
47800: NEG
47801: PUSH
47802: LD_INT 5
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 5
47812: NEG
47813: PUSH
47814: LD_INT 3
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 3
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: LD_INT 4
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: LD_INT 3
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: LD_INT 2
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: LD_INT 3
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: LD_INT 4
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 2
47914: NEG
47915: PUSH
47916: LD_INT 4
47918: NEG
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 4
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 4
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 5
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 5
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 4
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 3
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 3
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 3
47998: PUSH
47999: LD_INT 2
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 5
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48064: LD_ADDR_VAR 0 32
48068: PUSH
48069: LD_INT 4
48071: NEG
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 4
48082: NEG
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 3
48094: NEG
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 3
48105: NEG
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 4
48116: NEG
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 5
48127: NEG
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 5
48138: NEG
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 5
48150: NEG
48151: PUSH
48152: LD_INT 2
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 3
48162: NEG
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 3
48173: NEG
48174: PUSH
48175: LD_INT 3
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 3
48185: NEG
48186: PUSH
48187: LD_INT 4
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: LD_INT 3
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 3
48221: NEG
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 4
48233: NEG
48234: PUSH
48235: LD_INT 3
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 4
48245: NEG
48246: PUSH
48247: LD_INT 4
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: LD_INT 4
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 4
48269: NEG
48270: PUSH
48271: LD_INT 2
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: LD_INT 4
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: LD_INT 5
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 4
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 3
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 3
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 4
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: LD_INT 5
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: LD_INT 3
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: LD_INT 5
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 3
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 3
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 4
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 4
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 3
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 4
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 4
48476: PUSH
48477: LD_INT 4
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 4
48486: PUSH
48487: LD_INT 3
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 5
48496: PUSH
48497: LD_INT 4
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 5
48506: PUSH
48507: LD_INT 5
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 4
48516: PUSH
48517: LD_INT 5
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: LD_INT 4
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 3
48536: PUSH
48537: LD_INT 3
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 5
48546: PUSH
48547: LD_INT 3
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 3
48556: PUSH
48557: LD_INT 5
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48611: LD_ADDR_VAR 0 33
48615: PUSH
48616: LD_INT 4
48618: NEG
48619: PUSH
48620: LD_INT 4
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 4
48630: NEG
48631: PUSH
48632: LD_INT 5
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 3
48642: NEG
48643: PUSH
48644: LD_INT 4
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 3
48654: NEG
48655: PUSH
48656: LD_INT 3
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 4
48666: NEG
48667: PUSH
48668: LD_INT 3
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 5
48678: NEG
48679: PUSH
48680: LD_INT 4
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 5
48690: NEG
48691: PUSH
48692: LD_INT 5
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 3
48702: NEG
48703: PUSH
48704: LD_INT 5
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 5
48714: NEG
48715: PUSH
48716: LD_INT 3
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 3
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: LD_INT 4
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: LD_INT 3
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: LD_INT 3
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 4
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: LD_INT 4
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 4
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 4
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 5
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 5
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 4
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 3
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 3
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 3
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 5
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 3
48921: PUSH
48922: LD_INT 3
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 3
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 4
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 4
48951: PUSH
48952: LD_INT 4
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 3
48961: PUSH
48962: LD_INT 4
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: LD_INT 3
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: PUSH
48982: LD_INT 2
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 4
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 2
49001: PUSH
49002: LD_INT 4
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 4
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 3
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: LD_INT 4
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 5
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: LD_INT 5
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: LD_INT 4
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: LD_INT 3
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: LD_INT 5
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: LD_INT 3
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49149: LD_ADDR_VAR 0 34
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 4
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 5
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: LD_INT 4
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 3
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: LD_INT 3
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 4
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 5
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 2
49235: PUSH
49236: LD_INT 3
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: LD_INT 5
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 3
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 3
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 4
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 4
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 3
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 4
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 4
49351: PUSH
49352: LD_INT 4
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 4
49361: PUSH
49362: LD_INT 3
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 5
49371: PUSH
49372: LD_INT 4
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 5
49381: PUSH
49382: LD_INT 5
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 4
49391: PUSH
49392: LD_INT 5
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 3
49401: PUSH
49402: LD_INT 4
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 3
49411: PUSH
49412: LD_INT 3
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 5
49421: PUSH
49422: LD_INT 3
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: LD_INT 5
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: LD_INT 3
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 3
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 4
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: LD_INT 4
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: LD_INT 3
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: PUSH
49514: LD_INT 4
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: LD_INT 2
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 4
49534: NEG
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 4
49545: NEG
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 3
49557: NEG
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 3
49568: NEG
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 4
49579: NEG
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 5
49590: NEG
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 5
49601: NEG
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 5
49613: NEG
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 3
49625: NEG
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: ST_TO_ADDR
// end ; end ;
49681: GO 49684
49683: POP
// case btype of b_depot , b_warehouse :
49684: LD_VAR 0 1
49688: PUSH
49689: LD_INT 0
49691: DOUBLE
49692: EQUAL
49693: IFTRUE 49703
49695: LD_INT 1
49697: DOUBLE
49698: EQUAL
49699: IFTRUE 49703
49701: GO 49904
49703: POP
// case nation of nation_american :
49704: LD_VAR 0 5
49708: PUSH
49709: LD_INT 1
49711: DOUBLE
49712: EQUAL
49713: IFTRUE 49717
49715: GO 49773
49717: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49718: LD_ADDR_VAR 0 9
49722: PUSH
49723: LD_VAR 0 11
49727: PUSH
49728: LD_VAR 0 12
49732: PUSH
49733: LD_VAR 0 13
49737: PUSH
49738: LD_VAR 0 14
49742: PUSH
49743: LD_VAR 0 15
49747: PUSH
49748: LD_VAR 0 16
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: PUSH
49761: LD_VAR 0 4
49765: PUSH
49766: LD_INT 1
49768: PLUS
49769: ARRAY
49770: ST_TO_ADDR
49771: GO 49902
49773: LD_INT 2
49775: DOUBLE
49776: EQUAL
49777: IFTRUE 49781
49779: GO 49837
49781: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49782: LD_ADDR_VAR 0 9
49786: PUSH
49787: LD_VAR 0 17
49791: PUSH
49792: LD_VAR 0 18
49796: PUSH
49797: LD_VAR 0 19
49801: PUSH
49802: LD_VAR 0 20
49806: PUSH
49807: LD_VAR 0 21
49811: PUSH
49812: LD_VAR 0 22
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: PUSH
49825: LD_VAR 0 4
49829: PUSH
49830: LD_INT 1
49832: PLUS
49833: ARRAY
49834: ST_TO_ADDR
49835: GO 49902
49837: LD_INT 3
49839: DOUBLE
49840: EQUAL
49841: IFTRUE 49845
49843: GO 49901
49845: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49846: LD_ADDR_VAR 0 9
49850: PUSH
49851: LD_VAR 0 23
49855: PUSH
49856: LD_VAR 0 24
49860: PUSH
49861: LD_VAR 0 25
49865: PUSH
49866: LD_VAR 0 26
49870: PUSH
49871: LD_VAR 0 27
49875: PUSH
49876: LD_VAR 0 28
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: PUSH
49889: LD_VAR 0 4
49893: PUSH
49894: LD_INT 1
49896: PLUS
49897: ARRAY
49898: ST_TO_ADDR
49899: GO 49902
49901: POP
49902: GO 50457
49904: LD_INT 2
49906: DOUBLE
49907: EQUAL
49908: IFTRUE 49918
49910: LD_INT 3
49912: DOUBLE
49913: EQUAL
49914: IFTRUE 49918
49916: GO 49974
49918: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49919: LD_ADDR_VAR 0 9
49923: PUSH
49924: LD_VAR 0 29
49928: PUSH
49929: LD_VAR 0 30
49933: PUSH
49934: LD_VAR 0 31
49938: PUSH
49939: LD_VAR 0 32
49943: PUSH
49944: LD_VAR 0 33
49948: PUSH
49949: LD_VAR 0 34
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: PUSH
49962: LD_VAR 0 4
49966: PUSH
49967: LD_INT 1
49969: PLUS
49970: ARRAY
49971: ST_TO_ADDR
49972: GO 50457
49974: LD_INT 16
49976: DOUBLE
49977: EQUAL
49978: IFTRUE 50036
49980: LD_INT 17
49982: DOUBLE
49983: EQUAL
49984: IFTRUE 50036
49986: LD_INT 18
49988: DOUBLE
49989: EQUAL
49990: IFTRUE 50036
49992: LD_INT 19
49994: DOUBLE
49995: EQUAL
49996: IFTRUE 50036
49998: LD_INT 22
50000: DOUBLE
50001: EQUAL
50002: IFTRUE 50036
50004: LD_INT 20
50006: DOUBLE
50007: EQUAL
50008: IFTRUE 50036
50010: LD_INT 21
50012: DOUBLE
50013: EQUAL
50014: IFTRUE 50036
50016: LD_INT 23
50018: DOUBLE
50019: EQUAL
50020: IFTRUE 50036
50022: LD_INT 24
50024: DOUBLE
50025: EQUAL
50026: IFTRUE 50036
50028: LD_INT 25
50030: DOUBLE
50031: EQUAL
50032: IFTRUE 50036
50034: GO 50092
50036: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50037: LD_ADDR_VAR 0 9
50041: PUSH
50042: LD_VAR 0 35
50046: PUSH
50047: LD_VAR 0 36
50051: PUSH
50052: LD_VAR 0 37
50056: PUSH
50057: LD_VAR 0 38
50061: PUSH
50062: LD_VAR 0 39
50066: PUSH
50067: LD_VAR 0 40
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: PUSH
50080: LD_VAR 0 4
50084: PUSH
50085: LD_INT 1
50087: PLUS
50088: ARRAY
50089: ST_TO_ADDR
50090: GO 50457
50092: LD_INT 6
50094: DOUBLE
50095: EQUAL
50096: IFTRUE 50148
50098: LD_INT 7
50100: DOUBLE
50101: EQUAL
50102: IFTRUE 50148
50104: LD_INT 8
50106: DOUBLE
50107: EQUAL
50108: IFTRUE 50148
50110: LD_INT 13
50112: DOUBLE
50113: EQUAL
50114: IFTRUE 50148
50116: LD_INT 12
50118: DOUBLE
50119: EQUAL
50120: IFTRUE 50148
50122: LD_INT 15
50124: DOUBLE
50125: EQUAL
50126: IFTRUE 50148
50128: LD_INT 11
50130: DOUBLE
50131: EQUAL
50132: IFTRUE 50148
50134: LD_INT 14
50136: DOUBLE
50137: EQUAL
50138: IFTRUE 50148
50140: LD_INT 10
50142: DOUBLE
50143: EQUAL
50144: IFTRUE 50148
50146: GO 50204
50148: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50149: LD_ADDR_VAR 0 9
50153: PUSH
50154: LD_VAR 0 41
50158: PUSH
50159: LD_VAR 0 42
50163: PUSH
50164: LD_VAR 0 43
50168: PUSH
50169: LD_VAR 0 44
50173: PUSH
50174: LD_VAR 0 45
50178: PUSH
50179: LD_VAR 0 46
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: PUSH
50192: LD_VAR 0 4
50196: PUSH
50197: LD_INT 1
50199: PLUS
50200: ARRAY
50201: ST_TO_ADDR
50202: GO 50457
50204: LD_INT 36
50206: DOUBLE
50207: EQUAL
50208: IFTRUE 50212
50210: GO 50268
50212: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50213: LD_ADDR_VAR 0 9
50217: PUSH
50218: LD_VAR 0 47
50222: PUSH
50223: LD_VAR 0 48
50227: PUSH
50228: LD_VAR 0 49
50232: PUSH
50233: LD_VAR 0 50
50237: PUSH
50238: LD_VAR 0 51
50242: PUSH
50243: LD_VAR 0 52
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: PUSH
50256: LD_VAR 0 4
50260: PUSH
50261: LD_INT 1
50263: PLUS
50264: ARRAY
50265: ST_TO_ADDR
50266: GO 50457
50268: LD_INT 4
50270: DOUBLE
50271: EQUAL
50272: IFTRUE 50294
50274: LD_INT 5
50276: DOUBLE
50277: EQUAL
50278: IFTRUE 50294
50280: LD_INT 34
50282: DOUBLE
50283: EQUAL
50284: IFTRUE 50294
50286: LD_INT 37
50288: DOUBLE
50289: EQUAL
50290: IFTRUE 50294
50292: GO 50350
50294: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50295: LD_ADDR_VAR 0 9
50299: PUSH
50300: LD_VAR 0 53
50304: PUSH
50305: LD_VAR 0 54
50309: PUSH
50310: LD_VAR 0 55
50314: PUSH
50315: LD_VAR 0 56
50319: PUSH
50320: LD_VAR 0 57
50324: PUSH
50325: LD_VAR 0 58
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: PUSH
50338: LD_VAR 0 4
50342: PUSH
50343: LD_INT 1
50345: PLUS
50346: ARRAY
50347: ST_TO_ADDR
50348: GO 50457
50350: LD_INT 31
50352: DOUBLE
50353: EQUAL
50354: IFTRUE 50400
50356: LD_INT 32
50358: DOUBLE
50359: EQUAL
50360: IFTRUE 50400
50362: LD_INT 33
50364: DOUBLE
50365: EQUAL
50366: IFTRUE 50400
50368: LD_INT 27
50370: DOUBLE
50371: EQUAL
50372: IFTRUE 50400
50374: LD_INT 26
50376: DOUBLE
50377: EQUAL
50378: IFTRUE 50400
50380: LD_INT 28
50382: DOUBLE
50383: EQUAL
50384: IFTRUE 50400
50386: LD_INT 29
50388: DOUBLE
50389: EQUAL
50390: IFTRUE 50400
50392: LD_INT 30
50394: DOUBLE
50395: EQUAL
50396: IFTRUE 50400
50398: GO 50456
50400: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50401: LD_ADDR_VAR 0 9
50405: PUSH
50406: LD_VAR 0 59
50410: PUSH
50411: LD_VAR 0 60
50415: PUSH
50416: LD_VAR 0 61
50420: PUSH
50421: LD_VAR 0 62
50425: PUSH
50426: LD_VAR 0 63
50430: PUSH
50431: LD_VAR 0 64
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: PUSH
50444: LD_VAR 0 4
50448: PUSH
50449: LD_INT 1
50451: PLUS
50452: ARRAY
50453: ST_TO_ADDR
50454: GO 50457
50456: POP
// temp_list2 = [ ] ;
50457: LD_ADDR_VAR 0 10
50461: PUSH
50462: EMPTY
50463: ST_TO_ADDR
// for i in temp_list do
50464: LD_ADDR_VAR 0 8
50468: PUSH
50469: LD_VAR 0 9
50473: PUSH
50474: FOR_IN
50475: IFFALSE 50527
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50477: LD_ADDR_VAR 0 10
50481: PUSH
50482: LD_VAR 0 10
50486: PUSH
50487: LD_VAR 0 8
50491: PUSH
50492: LD_INT 1
50494: ARRAY
50495: PUSH
50496: LD_VAR 0 2
50500: PLUS
50501: PUSH
50502: LD_VAR 0 8
50506: PUSH
50507: LD_INT 2
50509: ARRAY
50510: PUSH
50511: LD_VAR 0 3
50515: PLUS
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: EMPTY
50522: LIST
50523: ADD
50524: ST_TO_ADDR
50525: GO 50474
50527: POP
50528: POP
// result = temp_list2 ;
50529: LD_ADDR_VAR 0 7
50533: PUSH
50534: LD_VAR 0 10
50538: ST_TO_ADDR
// end ;
50539: LD_VAR 0 7
50543: RET
// export function EnemyInRange ( unit , dist ) ; begin
50544: LD_INT 0
50546: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50547: LD_ADDR_VAR 0 3
50551: PUSH
50552: LD_VAR 0 1
50556: PPUSH
50557: CALL_OW 255
50561: PPUSH
50562: LD_VAR 0 1
50566: PPUSH
50567: CALL_OW 250
50571: PPUSH
50572: LD_VAR 0 1
50576: PPUSH
50577: CALL_OW 251
50581: PPUSH
50582: LD_VAR 0 2
50586: PPUSH
50587: CALL 23801 0 4
50591: PUSH
50592: LD_INT 4
50594: ARRAY
50595: ST_TO_ADDR
// end ;
50596: LD_VAR 0 3
50600: RET
// export function PlayerSeeMe ( unit ) ; begin
50601: LD_INT 0
50603: PPUSH
// result := See ( your_side , unit ) ;
50604: LD_ADDR_VAR 0 2
50608: PUSH
50609: LD_OWVAR 2
50613: PPUSH
50614: LD_VAR 0 1
50618: PPUSH
50619: CALL_OW 292
50623: ST_TO_ADDR
// end ;
50624: LD_VAR 0 2
50628: RET
// export function ReverseDir ( unit ) ; begin
50629: LD_INT 0
50631: PPUSH
// if not unit then
50632: LD_VAR 0 1
50636: NOT
50637: IFFALSE 50641
// exit ;
50639: GO 50664
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50641: LD_ADDR_VAR 0 2
50645: PUSH
50646: LD_VAR 0 1
50650: PPUSH
50651: CALL_OW 254
50655: PUSH
50656: LD_INT 3
50658: PLUS
50659: PUSH
50660: LD_INT 6
50662: MOD
50663: ST_TO_ADDR
// end ;
50664: LD_VAR 0 2
50668: RET
// export function ReverseArray ( array ) ; var i ; begin
50669: LD_INT 0
50671: PPUSH
50672: PPUSH
// if not array then
50673: LD_VAR 0 1
50677: NOT
50678: IFFALSE 50682
// exit ;
50680: GO 50737
// result := [ ] ;
50682: LD_ADDR_VAR 0 2
50686: PUSH
50687: EMPTY
50688: ST_TO_ADDR
// for i := array downto 1 do
50689: LD_ADDR_VAR 0 3
50693: PUSH
50694: DOUBLE
50695: LD_VAR 0 1
50699: INC
50700: ST_TO_ADDR
50701: LD_INT 1
50703: PUSH
50704: FOR_DOWNTO
50705: IFFALSE 50735
// result := Join ( result , array [ i ] ) ;
50707: LD_ADDR_VAR 0 2
50711: PUSH
50712: LD_VAR 0 2
50716: PPUSH
50717: LD_VAR 0 1
50721: PUSH
50722: LD_VAR 0 3
50726: ARRAY
50727: PPUSH
50728: CALL 55579 0 2
50732: ST_TO_ADDR
50733: GO 50704
50735: POP
50736: POP
// end ;
50737: LD_VAR 0 2
50741: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50742: LD_INT 0
50744: PPUSH
50745: PPUSH
50746: PPUSH
50747: PPUSH
50748: PPUSH
50749: PPUSH
// if not unit or not hexes then
50750: LD_VAR 0 1
50754: NOT
50755: IFTRUE 50764
50757: PUSH
50758: LD_VAR 0 2
50762: NOT
50763: OR
50764: IFFALSE 50768
// exit ;
50766: GO 50891
// dist := 9999 ;
50768: LD_ADDR_VAR 0 5
50772: PUSH
50773: LD_INT 9999
50775: ST_TO_ADDR
// for i = 1 to hexes do
50776: LD_ADDR_VAR 0 4
50780: PUSH
50781: DOUBLE
50782: LD_INT 1
50784: DEC
50785: ST_TO_ADDR
50786: LD_VAR 0 2
50790: PUSH
50791: FOR_TO
50792: IFFALSE 50879
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50794: LD_ADDR_VAR 0 6
50798: PUSH
50799: LD_VAR 0 1
50803: PPUSH
50804: LD_VAR 0 2
50808: PUSH
50809: LD_VAR 0 4
50813: ARRAY
50814: PUSH
50815: LD_INT 1
50817: ARRAY
50818: PPUSH
50819: LD_VAR 0 2
50823: PUSH
50824: LD_VAR 0 4
50828: ARRAY
50829: PUSH
50830: LD_INT 2
50832: ARRAY
50833: PPUSH
50834: CALL_OW 297
50838: ST_TO_ADDR
// if tdist < dist then
50839: LD_VAR 0 6
50843: PUSH
50844: LD_VAR 0 5
50848: LESS
50849: IFFALSE 50877
// begin hex := hexes [ i ] ;
50851: LD_ADDR_VAR 0 8
50855: PUSH
50856: LD_VAR 0 2
50860: PUSH
50861: LD_VAR 0 4
50865: ARRAY
50866: ST_TO_ADDR
// dist := tdist ;
50867: LD_ADDR_VAR 0 5
50871: PUSH
50872: LD_VAR 0 6
50876: ST_TO_ADDR
// end ; end ;
50877: GO 50791
50879: POP
50880: POP
// result := hex ;
50881: LD_ADDR_VAR 0 3
50885: PUSH
50886: LD_VAR 0 8
50890: ST_TO_ADDR
// end ;
50891: LD_VAR 0 3
50895: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50896: LD_INT 0
50898: PPUSH
50899: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50900: LD_VAR 0 1
50904: NOT
50905: IFTRUE 50944
50907: PUSH
50908: LD_VAR 0 1
50912: PUSH
50913: LD_INT 21
50915: PUSH
50916: LD_INT 2
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 23
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PPUSH
50937: CALL_OW 69
50941: IN
50942: NOT
50943: OR
50944: IFFALSE 50948
// exit ;
50946: GO 50995
// for i = 1 to 3 do
50948: LD_ADDR_VAR 0 3
50952: PUSH
50953: DOUBLE
50954: LD_INT 1
50956: DEC
50957: ST_TO_ADDR
50958: LD_INT 3
50960: PUSH
50961: FOR_TO
50962: IFFALSE 50993
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50964: LD_VAR 0 1
50968: PPUSH
50969: CALL_OW 250
50973: PPUSH
50974: LD_VAR 0 1
50978: PPUSH
50979: CALL_OW 251
50983: PPUSH
50984: LD_INT 1
50986: PPUSH
50987: CALL_OW 453
50991: GO 50961
50993: POP
50994: POP
// end ;
50995: LD_VAR 0 2
50999: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51000: LD_INT 0
51002: PPUSH
51003: PPUSH
51004: PPUSH
51005: PPUSH
51006: PPUSH
51007: PPUSH
// if not unit or not enemy_unit then
51008: LD_VAR 0 1
51012: NOT
51013: IFTRUE 51022
51015: PUSH
51016: LD_VAR 0 2
51020: NOT
51021: OR
51022: IFFALSE 51026
// exit ;
51024: GO 51497
// if GetLives ( i ) < 250 then
51026: LD_VAR 0 4
51030: PPUSH
51031: CALL_OW 256
51035: PUSH
51036: LD_INT 250
51038: LESS
51039: IFFALSE 51052
// begin ComAutodestruct ( i ) ;
51041: LD_VAR 0 4
51045: PPUSH
51046: CALL 50896 0 1
// exit ;
51050: GO 51497
// end ; x := GetX ( enemy_unit ) ;
51052: LD_ADDR_VAR 0 7
51056: PUSH
51057: LD_VAR 0 2
51061: PPUSH
51062: CALL_OW 250
51066: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51067: LD_ADDR_VAR 0 8
51071: PUSH
51072: LD_VAR 0 2
51076: PPUSH
51077: CALL_OW 251
51081: ST_TO_ADDR
// if not x or not y then
51082: LD_VAR 0 7
51086: NOT
51087: IFTRUE 51096
51089: PUSH
51090: LD_VAR 0 8
51094: NOT
51095: OR
51096: IFFALSE 51100
// exit ;
51098: GO 51497
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51100: LD_ADDR_VAR 0 6
51104: PUSH
51105: LD_VAR 0 7
51109: PPUSH
51110: LD_INT 0
51112: PPUSH
51113: LD_INT 4
51115: PPUSH
51116: CALL_OW 272
51120: PUSH
51121: LD_VAR 0 8
51125: PPUSH
51126: LD_INT 0
51128: PPUSH
51129: LD_INT 4
51131: PPUSH
51132: CALL_OW 273
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_VAR 0 7
51145: PPUSH
51146: LD_INT 1
51148: PPUSH
51149: LD_INT 4
51151: PPUSH
51152: CALL_OW 272
51156: PUSH
51157: LD_VAR 0 8
51161: PPUSH
51162: LD_INT 1
51164: PPUSH
51165: LD_INT 4
51167: PPUSH
51168: CALL_OW 273
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_VAR 0 7
51181: PPUSH
51182: LD_INT 2
51184: PPUSH
51185: LD_INT 4
51187: PPUSH
51188: CALL_OW 272
51192: PUSH
51193: LD_VAR 0 8
51197: PPUSH
51198: LD_INT 2
51200: PPUSH
51201: LD_INT 4
51203: PPUSH
51204: CALL_OW 273
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_VAR 0 7
51217: PPUSH
51218: LD_INT 3
51220: PPUSH
51221: LD_INT 4
51223: PPUSH
51224: CALL_OW 272
51228: PUSH
51229: LD_VAR 0 8
51233: PPUSH
51234: LD_INT 3
51236: PPUSH
51237: LD_INT 4
51239: PPUSH
51240: CALL_OW 273
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_VAR 0 7
51253: PPUSH
51254: LD_INT 4
51256: PPUSH
51257: LD_INT 4
51259: PPUSH
51260: CALL_OW 272
51264: PUSH
51265: LD_VAR 0 8
51269: PPUSH
51270: LD_INT 4
51272: PPUSH
51273: LD_INT 4
51275: PPUSH
51276: CALL_OW 273
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_VAR 0 7
51289: PPUSH
51290: LD_INT 5
51292: PPUSH
51293: LD_INT 4
51295: PPUSH
51296: CALL_OW 272
51300: PUSH
51301: LD_VAR 0 8
51305: PPUSH
51306: LD_INT 5
51308: PPUSH
51309: LD_INT 4
51311: PPUSH
51312: CALL_OW 273
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: ST_TO_ADDR
// for i = tmp downto 1 do
51329: LD_ADDR_VAR 0 4
51333: PUSH
51334: DOUBLE
51335: LD_VAR 0 6
51339: INC
51340: ST_TO_ADDR
51341: LD_INT 1
51343: PUSH
51344: FOR_DOWNTO
51345: IFFALSE 51448
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51347: LD_VAR 0 6
51351: PUSH
51352: LD_VAR 0 4
51356: ARRAY
51357: PUSH
51358: LD_INT 1
51360: ARRAY
51361: PPUSH
51362: LD_VAR 0 6
51366: PUSH
51367: LD_VAR 0 4
51371: ARRAY
51372: PUSH
51373: LD_INT 2
51375: ARRAY
51376: PPUSH
51377: CALL_OW 488
51381: NOT
51382: IFTRUE 51424
51384: PUSH
51385: LD_VAR 0 6
51389: PUSH
51390: LD_VAR 0 4
51394: ARRAY
51395: PUSH
51396: LD_INT 1
51398: ARRAY
51399: PPUSH
51400: LD_VAR 0 6
51404: PUSH
51405: LD_VAR 0 4
51409: ARRAY
51410: PUSH
51411: LD_INT 2
51413: ARRAY
51414: PPUSH
51415: CALL_OW 428
51419: PUSH
51420: LD_INT 0
51422: NONEQUAL
51423: OR
51424: IFFALSE 51446
// tmp := Delete ( tmp , i ) ;
51426: LD_ADDR_VAR 0 6
51430: PUSH
51431: LD_VAR 0 6
51435: PPUSH
51436: LD_VAR 0 4
51440: PPUSH
51441: CALL_OW 3
51445: ST_TO_ADDR
51446: GO 51344
51448: POP
51449: POP
// j := GetClosestHex ( unit , tmp ) ;
51450: LD_ADDR_VAR 0 5
51454: PUSH
51455: LD_VAR 0 1
51459: PPUSH
51460: LD_VAR 0 6
51464: PPUSH
51465: CALL 50742 0 2
51469: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51470: LD_VAR 0 1
51474: PPUSH
51475: LD_VAR 0 5
51479: PUSH
51480: LD_INT 1
51482: ARRAY
51483: PPUSH
51484: LD_VAR 0 5
51488: PUSH
51489: LD_INT 2
51491: ARRAY
51492: PPUSH
51493: CALL_OW 111
// end ;
51497: LD_VAR 0 3
51501: RET
// export function PrepareApemanSoldier ( ) ; begin
51502: LD_INT 0
51504: PPUSH
// uc_nation := 0 ;
51505: LD_ADDR_OWVAR 21
51509: PUSH
51510: LD_INT 0
51512: ST_TO_ADDR
// hc_sex := sex_male ;
51513: LD_ADDR_OWVAR 27
51517: PUSH
51518: LD_INT 1
51520: ST_TO_ADDR
// hc_name :=  ;
51521: LD_ADDR_OWVAR 26
51525: PUSH
51526: LD_STRING 
51528: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
51529: LD_ADDR_OWVAR 28
51533: PUSH
51534: LD_INT 15
51536: ST_TO_ADDR
// hc_gallery :=  ;
51537: LD_ADDR_OWVAR 33
51541: PUSH
51542: LD_STRING 
51544: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51545: LD_ADDR_OWVAR 31
51549: PUSH
51550: LD_INT 0
51552: PPUSH
51553: LD_INT 3
51555: PPUSH
51556: CALL_OW 12
51560: PUSH
51561: LD_INT 0
51563: PPUSH
51564: LD_INT 3
51566: PPUSH
51567: CALL_OW 12
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51584: LD_ADDR_OWVAR 29
51588: PUSH
51589: LD_INT 12
51591: PUSH
51592: LD_INT 12
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: ST_TO_ADDR
// end ;
51599: LD_VAR 0 1
51603: RET
// export function PrepareApemanEngineer ( ) ; begin
51604: LD_INT 0
51606: PPUSH
// uc_nation := 0 ;
51607: LD_ADDR_OWVAR 21
51611: PUSH
51612: LD_INT 0
51614: ST_TO_ADDR
// hc_sex := sex_male ;
51615: LD_ADDR_OWVAR 27
51619: PUSH
51620: LD_INT 1
51622: ST_TO_ADDR
// hc_name :=  ;
51623: LD_ADDR_OWVAR 26
51627: PUSH
51628: LD_STRING 
51630: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
51631: LD_ADDR_OWVAR 28
51635: PUSH
51636: LD_INT 16
51638: ST_TO_ADDR
// hc_gallery :=  ;
51639: LD_ADDR_OWVAR 33
51643: PUSH
51644: LD_STRING 
51646: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51647: LD_ADDR_OWVAR 31
51651: PUSH
51652: LD_INT 0
51654: PPUSH
51655: LD_INT 3
51657: PPUSH
51658: CALL_OW 12
51662: PUSH
51663: LD_INT 0
51665: PPUSH
51666: LD_INT 3
51668: PPUSH
51669: CALL_OW 12
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51686: LD_ADDR_OWVAR 29
51690: PUSH
51691: LD_INT 12
51693: PUSH
51694: LD_INT 12
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: ST_TO_ADDR
// end ;
51701: LD_VAR 0 1
51705: RET
// export function PrepareApeman ( agressivity ) ; begin
51706: LD_INT 0
51708: PPUSH
// uc_side := 0 ;
51709: LD_ADDR_OWVAR 20
51713: PUSH
51714: LD_INT 0
51716: ST_TO_ADDR
// uc_nation := 0 ;
51717: LD_ADDR_OWVAR 21
51721: PUSH
51722: LD_INT 0
51724: ST_TO_ADDR
// hc_sex := sex_male ;
51725: LD_ADDR_OWVAR 27
51729: PUSH
51730: LD_INT 1
51732: ST_TO_ADDR
// hc_class := class_apeman ;
51733: LD_ADDR_OWVAR 28
51737: PUSH
51738: LD_INT 12
51740: ST_TO_ADDR
// hc_gallery :=  ;
51741: LD_ADDR_OWVAR 33
51745: PUSH
51746: LD_STRING 
51748: ST_TO_ADDR
// hc_name :=  ;
51749: LD_ADDR_OWVAR 26
51753: PUSH
51754: LD_STRING 
51756: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51757: LD_ADDR_OWVAR 29
51761: PUSH
51762: LD_INT 12
51764: PUSH
51765: LD_INT 12
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: ST_TO_ADDR
// if agressivity = 0 then
51772: LD_VAR 0 1
51776: PUSH
51777: LD_INT 0
51779: EQUAL
51780: IFFALSE 51792
// hc_agressivity := 0 else
51782: LD_ADDR_OWVAR 35
51786: PUSH
51787: LD_INT 0
51789: ST_TO_ADDR
51790: GO 51813
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51792: LD_ADDR_OWVAR 35
51796: PUSH
51797: LD_VAR 0 1
51801: NEG
51802: PPUSH
51803: LD_VAR 0 1
51807: PPUSH
51808: CALL_OW 12
51812: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51813: LD_ADDR_OWVAR 31
51817: PUSH
51818: LD_INT 0
51820: PPUSH
51821: LD_INT 3
51823: PPUSH
51824: CALL_OW 12
51828: PUSH
51829: LD_INT 0
51831: PPUSH
51832: LD_INT 3
51834: PPUSH
51835: CALL_OW 12
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: ST_TO_ADDR
// end ;
51852: LD_VAR 0 2
51856: RET
// export function PrepareTiger ( agressivity ) ; begin
51857: LD_INT 0
51859: PPUSH
// uc_side := 0 ;
51860: LD_ADDR_OWVAR 20
51864: PUSH
51865: LD_INT 0
51867: ST_TO_ADDR
// uc_nation := 0 ;
51868: LD_ADDR_OWVAR 21
51872: PUSH
51873: LD_INT 0
51875: ST_TO_ADDR
// InitHc ;
51876: CALL_OW 19
// hc_class := class_tiger ;
51880: LD_ADDR_OWVAR 28
51884: PUSH
51885: LD_INT 14
51887: ST_TO_ADDR
// hc_gallery :=  ;
51888: LD_ADDR_OWVAR 33
51892: PUSH
51893: LD_STRING 
51895: ST_TO_ADDR
// hc_name :=  ;
51896: LD_ADDR_OWVAR 26
51900: PUSH
51901: LD_STRING 
51903: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51904: LD_ADDR_OWVAR 35
51908: PUSH
51909: LD_VAR 0 1
51913: NEG
51914: PPUSH
51915: LD_VAR 0 1
51919: PPUSH
51920: CALL_OW 12
51924: ST_TO_ADDR
// end ;
51925: LD_VAR 0 2
51929: RET
// export function PrepareEnchidna ( ) ; begin
51930: LD_INT 0
51932: PPUSH
// uc_side := 0 ;
51933: LD_ADDR_OWVAR 20
51937: PUSH
51938: LD_INT 0
51940: ST_TO_ADDR
// uc_nation := 0 ;
51941: LD_ADDR_OWVAR 21
51945: PUSH
51946: LD_INT 0
51948: ST_TO_ADDR
// InitHc ;
51949: CALL_OW 19
// hc_class := class_baggie ;
51953: LD_ADDR_OWVAR 28
51957: PUSH
51958: LD_INT 13
51960: ST_TO_ADDR
// hc_gallery :=  ;
51961: LD_ADDR_OWVAR 33
51965: PUSH
51966: LD_STRING 
51968: ST_TO_ADDR
// hc_name :=  ;
51969: LD_ADDR_OWVAR 26
51973: PUSH
51974: LD_STRING 
51976: ST_TO_ADDR
// end ;
51977: LD_VAR 0 1
51981: RET
// export function PrepareFrog ( ) ; begin
51982: LD_INT 0
51984: PPUSH
// uc_side := 0 ;
51985: LD_ADDR_OWVAR 20
51989: PUSH
51990: LD_INT 0
51992: ST_TO_ADDR
// uc_nation := 0 ;
51993: LD_ADDR_OWVAR 21
51997: PUSH
51998: LD_INT 0
52000: ST_TO_ADDR
// InitHc ;
52001: CALL_OW 19
// hc_class := class_frog ;
52005: LD_ADDR_OWVAR 28
52009: PUSH
52010: LD_INT 19
52012: ST_TO_ADDR
// hc_gallery :=  ;
52013: LD_ADDR_OWVAR 33
52017: PUSH
52018: LD_STRING 
52020: ST_TO_ADDR
// hc_name :=  ;
52021: LD_ADDR_OWVAR 26
52025: PUSH
52026: LD_STRING 
52028: ST_TO_ADDR
// end ;
52029: LD_VAR 0 1
52033: RET
// export function PrepareFish ( ) ; begin
52034: LD_INT 0
52036: PPUSH
// uc_side := 0 ;
52037: LD_ADDR_OWVAR 20
52041: PUSH
52042: LD_INT 0
52044: ST_TO_ADDR
// uc_nation := 0 ;
52045: LD_ADDR_OWVAR 21
52049: PUSH
52050: LD_INT 0
52052: ST_TO_ADDR
// InitHc ;
52053: CALL_OW 19
// hc_class := class_fish ;
52057: LD_ADDR_OWVAR 28
52061: PUSH
52062: LD_INT 20
52064: ST_TO_ADDR
// hc_gallery :=  ;
52065: LD_ADDR_OWVAR 33
52069: PUSH
52070: LD_STRING 
52072: ST_TO_ADDR
// hc_name :=  ;
52073: LD_ADDR_OWVAR 26
52077: PUSH
52078: LD_STRING 
52080: ST_TO_ADDR
// end ;
52081: LD_VAR 0 1
52085: RET
// export function PrepareBird ( ) ; begin
52086: LD_INT 0
52088: PPUSH
// uc_side := 0 ;
52089: LD_ADDR_OWVAR 20
52093: PUSH
52094: LD_INT 0
52096: ST_TO_ADDR
// uc_nation := 0 ;
52097: LD_ADDR_OWVAR 21
52101: PUSH
52102: LD_INT 0
52104: ST_TO_ADDR
// InitHc ;
52105: CALL_OW 19
// hc_class := class_phororhacos ;
52109: LD_ADDR_OWVAR 28
52113: PUSH
52114: LD_INT 18
52116: ST_TO_ADDR
// hc_gallery :=  ;
52117: LD_ADDR_OWVAR 33
52121: PUSH
52122: LD_STRING 
52124: ST_TO_ADDR
// hc_name :=  ;
52125: LD_ADDR_OWVAR 26
52129: PUSH
52130: LD_STRING 
52132: ST_TO_ADDR
// end ;
52133: LD_VAR 0 1
52137: RET
// export function PrepareHorse ( ) ; begin
52138: LD_INT 0
52140: PPUSH
// uc_side := 0 ;
52141: LD_ADDR_OWVAR 20
52145: PUSH
52146: LD_INT 0
52148: ST_TO_ADDR
// uc_nation := 0 ;
52149: LD_ADDR_OWVAR 21
52153: PUSH
52154: LD_INT 0
52156: ST_TO_ADDR
// InitHc ;
52157: CALL_OW 19
// hc_class := class_horse ;
52161: LD_ADDR_OWVAR 28
52165: PUSH
52166: LD_INT 21
52168: ST_TO_ADDR
// hc_gallery :=  ;
52169: LD_ADDR_OWVAR 33
52173: PUSH
52174: LD_STRING 
52176: ST_TO_ADDR
// hc_name :=  ;
52177: LD_ADDR_OWVAR 26
52181: PUSH
52182: LD_STRING 
52184: ST_TO_ADDR
// end ;
52185: LD_VAR 0 1
52189: RET
// export function PrepareMastodont ( ) ; begin
52190: LD_INT 0
52192: PPUSH
// uc_side := 0 ;
52193: LD_ADDR_OWVAR 20
52197: PUSH
52198: LD_INT 0
52200: ST_TO_ADDR
// uc_nation := 0 ;
52201: LD_ADDR_OWVAR 21
52205: PUSH
52206: LD_INT 0
52208: ST_TO_ADDR
// vc_chassis := class_mastodont ;
52209: LD_ADDR_OWVAR 37
52213: PUSH
52214: LD_INT 31
52216: ST_TO_ADDR
// vc_control := control_rider ;
52217: LD_ADDR_OWVAR 38
52221: PUSH
52222: LD_INT 4
52224: ST_TO_ADDR
// end ;
52225: LD_VAR 0 1
52229: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52230: LD_INT 0
52232: PPUSH
52233: PPUSH
52234: PPUSH
// uc_side = 0 ;
52235: LD_ADDR_OWVAR 20
52239: PUSH
52240: LD_INT 0
52242: ST_TO_ADDR
// uc_nation = 0 ;
52243: LD_ADDR_OWVAR 21
52247: PUSH
52248: LD_INT 0
52250: ST_TO_ADDR
// InitHc_All ( ) ;
52251: CALL_OW 584
// InitVc ;
52255: CALL_OW 20
// if mastodonts then
52259: LD_VAR 0 6
52263: IFFALSE 52330
// for i = 1 to mastodonts do
52265: LD_ADDR_VAR 0 11
52269: PUSH
52270: DOUBLE
52271: LD_INT 1
52273: DEC
52274: ST_TO_ADDR
52275: LD_VAR 0 6
52279: PUSH
52280: FOR_TO
52281: IFFALSE 52328
// begin vc_chassis := 31 ;
52283: LD_ADDR_OWVAR 37
52287: PUSH
52288: LD_INT 31
52290: ST_TO_ADDR
// vc_control := control_rider ;
52291: LD_ADDR_OWVAR 38
52295: PUSH
52296: LD_INT 4
52298: ST_TO_ADDR
// animal := CreateVehicle ;
52299: LD_ADDR_VAR 0 12
52303: PUSH
52304: CALL_OW 45
52308: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52309: LD_VAR 0 12
52313: PPUSH
52314: LD_VAR 0 8
52318: PPUSH
52319: LD_INT 0
52321: PPUSH
52322: CALL 54472 0 3
// end ;
52326: GO 52280
52328: POP
52329: POP
// if horses then
52330: LD_VAR 0 5
52334: IFFALSE 52401
// for i = 1 to horses do
52336: LD_ADDR_VAR 0 11
52340: PUSH
52341: DOUBLE
52342: LD_INT 1
52344: DEC
52345: ST_TO_ADDR
52346: LD_VAR 0 5
52350: PUSH
52351: FOR_TO
52352: IFFALSE 52399
// begin hc_class := 21 ;
52354: LD_ADDR_OWVAR 28
52358: PUSH
52359: LD_INT 21
52361: ST_TO_ADDR
// hc_gallery :=  ;
52362: LD_ADDR_OWVAR 33
52366: PUSH
52367: LD_STRING 
52369: ST_TO_ADDR
// animal := CreateHuman ;
52370: LD_ADDR_VAR 0 12
52374: PUSH
52375: CALL_OW 44
52379: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52380: LD_VAR 0 12
52384: PPUSH
52385: LD_VAR 0 8
52389: PPUSH
52390: LD_INT 0
52392: PPUSH
52393: CALL 54472 0 3
// end ;
52397: GO 52351
52399: POP
52400: POP
// if birds then
52401: LD_VAR 0 1
52405: IFFALSE 52472
// for i = 1 to birds do
52407: LD_ADDR_VAR 0 11
52411: PUSH
52412: DOUBLE
52413: LD_INT 1
52415: DEC
52416: ST_TO_ADDR
52417: LD_VAR 0 1
52421: PUSH
52422: FOR_TO
52423: IFFALSE 52470
// begin hc_class := 18 ;
52425: LD_ADDR_OWVAR 28
52429: PUSH
52430: LD_INT 18
52432: ST_TO_ADDR
// hc_gallery =  ;
52433: LD_ADDR_OWVAR 33
52437: PUSH
52438: LD_STRING 
52440: ST_TO_ADDR
// animal := CreateHuman ;
52441: LD_ADDR_VAR 0 12
52445: PUSH
52446: CALL_OW 44
52450: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52451: LD_VAR 0 12
52455: PPUSH
52456: LD_VAR 0 8
52460: PPUSH
52461: LD_INT 0
52463: PPUSH
52464: CALL 54472 0 3
// end ;
52468: GO 52422
52470: POP
52471: POP
// if tigers then
52472: LD_VAR 0 2
52476: IFFALSE 52560
// for i = 1 to tigers do
52478: LD_ADDR_VAR 0 11
52482: PUSH
52483: DOUBLE
52484: LD_INT 1
52486: DEC
52487: ST_TO_ADDR
52488: LD_VAR 0 2
52492: PUSH
52493: FOR_TO
52494: IFFALSE 52558
// begin hc_class = class_tiger ;
52496: LD_ADDR_OWVAR 28
52500: PUSH
52501: LD_INT 14
52503: ST_TO_ADDR
// hc_gallery =  ;
52504: LD_ADDR_OWVAR 33
52508: PUSH
52509: LD_STRING 
52511: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52512: LD_ADDR_OWVAR 35
52516: PUSH
52517: LD_INT 7
52519: NEG
52520: PPUSH
52521: LD_INT 7
52523: PPUSH
52524: CALL_OW 12
52528: ST_TO_ADDR
// animal := CreateHuman ;
52529: LD_ADDR_VAR 0 12
52533: PUSH
52534: CALL_OW 44
52538: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52539: LD_VAR 0 12
52543: PPUSH
52544: LD_VAR 0 8
52548: PPUSH
52549: LD_INT 0
52551: PPUSH
52552: CALL 54472 0 3
// end ;
52556: GO 52493
52558: POP
52559: POP
// if apemans then
52560: LD_VAR 0 3
52564: IFFALSE 52687
// for i = 1 to apemans do
52566: LD_ADDR_VAR 0 11
52570: PUSH
52571: DOUBLE
52572: LD_INT 1
52574: DEC
52575: ST_TO_ADDR
52576: LD_VAR 0 3
52580: PUSH
52581: FOR_TO
52582: IFFALSE 52685
// begin hc_class = class_apeman ;
52584: LD_ADDR_OWVAR 28
52588: PUSH
52589: LD_INT 12
52591: ST_TO_ADDR
// hc_gallery =  ;
52592: LD_ADDR_OWVAR 33
52596: PUSH
52597: LD_STRING 
52599: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
52600: LD_ADDR_OWVAR 35
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PPUSH
52609: LD_INT 2
52611: PPUSH
52612: CALL_OW 12
52616: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52617: LD_ADDR_OWVAR 31
52621: PUSH
52622: LD_INT 1
52624: PPUSH
52625: LD_INT 3
52627: PPUSH
52628: CALL_OW 12
52632: PUSH
52633: LD_INT 1
52635: PPUSH
52636: LD_INT 3
52638: PPUSH
52639: CALL_OW 12
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: ST_TO_ADDR
// animal := CreateHuman ;
52656: LD_ADDR_VAR 0 12
52660: PUSH
52661: CALL_OW 44
52665: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52666: LD_VAR 0 12
52670: PPUSH
52671: LD_VAR 0 8
52675: PPUSH
52676: LD_INT 0
52678: PPUSH
52679: CALL 54472 0 3
// end ;
52683: GO 52581
52685: POP
52686: POP
// if enchidnas then
52687: LD_VAR 0 4
52691: IFFALSE 52758
// for i = 1 to enchidnas do
52693: LD_ADDR_VAR 0 11
52697: PUSH
52698: DOUBLE
52699: LD_INT 1
52701: DEC
52702: ST_TO_ADDR
52703: LD_VAR 0 4
52707: PUSH
52708: FOR_TO
52709: IFFALSE 52756
// begin hc_class = 13 ;
52711: LD_ADDR_OWVAR 28
52715: PUSH
52716: LD_INT 13
52718: ST_TO_ADDR
// hc_gallery =  ;
52719: LD_ADDR_OWVAR 33
52723: PUSH
52724: LD_STRING 
52726: ST_TO_ADDR
// animal := CreateHuman ;
52727: LD_ADDR_VAR 0 12
52731: PUSH
52732: CALL_OW 44
52736: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52737: LD_VAR 0 12
52741: PPUSH
52742: LD_VAR 0 8
52746: PPUSH
52747: LD_INT 0
52749: PPUSH
52750: CALL 54472 0 3
// end ;
52754: GO 52708
52756: POP
52757: POP
// if fishes then
52758: LD_VAR 0 7
52762: IFFALSE 52829
// for i = 1 to fishes do
52764: LD_ADDR_VAR 0 11
52768: PUSH
52769: DOUBLE
52770: LD_INT 1
52772: DEC
52773: ST_TO_ADDR
52774: LD_VAR 0 7
52778: PUSH
52779: FOR_TO
52780: IFFALSE 52827
// begin hc_class = 20 ;
52782: LD_ADDR_OWVAR 28
52786: PUSH
52787: LD_INT 20
52789: ST_TO_ADDR
// hc_gallery =  ;
52790: LD_ADDR_OWVAR 33
52794: PUSH
52795: LD_STRING 
52797: ST_TO_ADDR
// animal := CreateHuman ;
52798: LD_ADDR_VAR 0 12
52802: PUSH
52803: CALL_OW 44
52807: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52808: LD_VAR 0 12
52812: PPUSH
52813: LD_VAR 0 9
52817: PPUSH
52818: LD_INT 0
52820: PPUSH
52821: CALL 54472 0 3
// end ;
52825: GO 52779
52827: POP
52828: POP
// end ;
52829: LD_VAR 0 10
52833: RET
// export function WantHeal ( sci , unit ) ; begin
52834: LD_INT 0
52836: PPUSH
// if GetTaskList ( sci ) > 0 then
52837: LD_VAR 0 1
52841: PPUSH
52842: CALL_OW 437
52846: PUSH
52847: LD_INT 0
52849: GREATER
52850: IFFALSE 52922
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52852: LD_VAR 0 1
52856: PPUSH
52857: CALL_OW 437
52861: PUSH
52862: LD_INT 1
52864: ARRAY
52865: PUSH
52866: LD_INT 1
52868: ARRAY
52869: PUSH
52870: LD_STRING l
52872: EQUAL
52873: IFFALSE 52900
52875: PUSH
52876: LD_VAR 0 1
52880: PPUSH
52881: CALL_OW 437
52885: PUSH
52886: LD_INT 1
52888: ARRAY
52889: PUSH
52890: LD_INT 4
52892: ARRAY
52893: PUSH
52894: LD_VAR 0 2
52898: EQUAL
52899: AND
52900: IFFALSE 52912
// result := true else
52902: LD_ADDR_VAR 0 3
52906: PUSH
52907: LD_INT 1
52909: ST_TO_ADDR
52910: GO 52920
// result := false ;
52912: LD_ADDR_VAR 0 3
52916: PUSH
52917: LD_INT 0
52919: ST_TO_ADDR
// end else
52920: GO 52930
// result := false ;
52922: LD_ADDR_VAR 0 3
52926: PUSH
52927: LD_INT 0
52929: ST_TO_ADDR
// end ;
52930: LD_VAR 0 3
52934: RET
// export function HealTarget ( sci ) ; begin
52935: LD_INT 0
52937: PPUSH
// if not sci then
52938: LD_VAR 0 1
52942: NOT
52943: IFFALSE 52947
// exit ;
52945: GO 53012
// result := 0 ;
52947: LD_ADDR_VAR 0 2
52951: PUSH
52952: LD_INT 0
52954: ST_TO_ADDR
// if GetTaskList ( sci ) then
52955: LD_VAR 0 1
52959: PPUSH
52960: CALL_OW 437
52964: IFFALSE 53012
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52966: LD_VAR 0 1
52970: PPUSH
52971: CALL_OW 437
52975: PUSH
52976: LD_INT 1
52978: ARRAY
52979: PUSH
52980: LD_INT 1
52982: ARRAY
52983: PUSH
52984: LD_STRING l
52986: EQUAL
52987: IFFALSE 53012
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52989: LD_ADDR_VAR 0 2
52993: PUSH
52994: LD_VAR 0 1
52998: PPUSH
52999: CALL_OW 437
53003: PUSH
53004: LD_INT 1
53006: ARRAY
53007: PUSH
53008: LD_INT 4
53010: ARRAY
53011: ST_TO_ADDR
// end ;
53012: LD_VAR 0 2
53016: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53017: LD_INT 0
53019: PPUSH
53020: PPUSH
53021: PPUSH
53022: PPUSH
// if not base_units then
53023: LD_VAR 0 1
53027: NOT
53028: IFFALSE 53032
// exit ;
53030: GO 53119
// result := false ;
53032: LD_ADDR_VAR 0 2
53036: PUSH
53037: LD_INT 0
53039: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53040: LD_ADDR_VAR 0 5
53044: PUSH
53045: LD_VAR 0 1
53049: PPUSH
53050: LD_INT 21
53052: PUSH
53053: LD_INT 3
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PPUSH
53060: CALL_OW 72
53064: ST_TO_ADDR
// if not tmp then
53065: LD_VAR 0 5
53069: NOT
53070: IFFALSE 53074
// exit ;
53072: GO 53119
// for i in tmp do
53074: LD_ADDR_VAR 0 3
53078: PUSH
53079: LD_VAR 0 5
53083: PUSH
53084: FOR_IN
53085: IFFALSE 53117
// begin result := EnemyInRange ( i , 22 ) ;
53087: LD_ADDR_VAR 0 2
53091: PUSH
53092: LD_VAR 0 3
53096: PPUSH
53097: LD_INT 22
53099: PPUSH
53100: CALL 50544 0 2
53104: ST_TO_ADDR
// if result then
53105: LD_VAR 0 2
53109: IFFALSE 53115
// exit ;
53111: POP
53112: POP
53113: GO 53119
// end ;
53115: GO 53084
53117: POP
53118: POP
// end ;
53119: LD_VAR 0 2
53123: RET
// export function FilterByTag ( units , tag ) ; begin
53124: LD_INT 0
53126: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
53127: LD_ADDR_VAR 0 3
53131: PUSH
53132: LD_VAR 0 1
53136: PPUSH
53137: LD_INT 120
53139: PUSH
53140: LD_VAR 0 2
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PPUSH
53149: CALL_OW 72
53153: ST_TO_ADDR
// end ;
53154: LD_VAR 0 3
53158: RET
// export function IsDriver ( un ) ; begin
53159: LD_INT 0
53161: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53162: LD_ADDR_VAR 0 2
53166: PUSH
53167: LD_VAR 0 1
53171: PUSH
53172: LD_INT 55
53174: PUSH
53175: EMPTY
53176: LIST
53177: PPUSH
53178: CALL_OW 69
53182: IN
53183: ST_TO_ADDR
// end ;
53184: LD_VAR 0 2
53188: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53189: LD_INT 0
53191: PPUSH
53192: PPUSH
// list := [ ] ;
53193: LD_ADDR_VAR 0 5
53197: PUSH
53198: EMPTY
53199: ST_TO_ADDR
// case d of 0 :
53200: LD_VAR 0 3
53204: PUSH
53205: LD_INT 0
53207: DOUBLE
53208: EQUAL
53209: IFTRUE 53213
53211: GO 53346
53213: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53214: LD_ADDR_VAR 0 5
53218: PUSH
53219: LD_VAR 0 1
53223: PUSH
53224: LD_INT 4
53226: MINUS
53227: PUSH
53228: LD_VAR 0 2
53232: PUSH
53233: LD_INT 4
53235: MINUS
53236: PUSH
53237: LD_INT 2
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: LIST
53244: PUSH
53245: LD_VAR 0 1
53249: PUSH
53250: LD_INT 3
53252: MINUS
53253: PUSH
53254: LD_VAR 0 2
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: LIST
53266: PUSH
53267: LD_VAR 0 1
53271: PUSH
53272: LD_INT 4
53274: PLUS
53275: PUSH
53276: LD_VAR 0 2
53280: PUSH
53281: LD_INT 4
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: LIST
53288: PUSH
53289: LD_VAR 0 1
53293: PUSH
53294: LD_INT 3
53296: PLUS
53297: PUSH
53298: LD_VAR 0 2
53302: PUSH
53303: LD_INT 3
53305: PLUS
53306: PUSH
53307: LD_INT 5
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: LIST
53314: PUSH
53315: LD_VAR 0 1
53319: PUSH
53320: LD_VAR 0 2
53324: PUSH
53325: LD_INT 4
53327: PLUS
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: LIST
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: ST_TO_ADDR
// end ; 1 :
53344: GO 54044
53346: LD_INT 1
53348: DOUBLE
53349: EQUAL
53350: IFTRUE 53354
53352: GO 53487
53354: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53355: LD_ADDR_VAR 0 5
53359: PUSH
53360: LD_VAR 0 1
53364: PUSH
53365: LD_VAR 0 2
53369: PUSH
53370: LD_INT 4
53372: MINUS
53373: PUSH
53374: LD_INT 3
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: LIST
53381: PUSH
53382: LD_VAR 0 1
53386: PUSH
53387: LD_INT 3
53389: MINUS
53390: PUSH
53391: LD_VAR 0 2
53395: PUSH
53396: LD_INT 3
53398: MINUS
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: LIST
53407: PUSH
53408: LD_VAR 0 1
53412: PUSH
53413: LD_INT 4
53415: MINUS
53416: PUSH
53417: LD_VAR 0 2
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: LIST
53429: PUSH
53430: LD_VAR 0 1
53434: PUSH
53435: LD_VAR 0 2
53439: PUSH
53440: LD_INT 3
53442: PLUS
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: LIST
53451: PUSH
53452: LD_VAR 0 1
53456: PUSH
53457: LD_INT 4
53459: PLUS
53460: PUSH
53461: LD_VAR 0 2
53465: PUSH
53466: LD_INT 4
53468: PLUS
53469: PUSH
53470: LD_INT 5
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: LIST
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: ST_TO_ADDR
// end ; 2 :
53485: GO 54044
53487: LD_INT 2
53489: DOUBLE
53490: EQUAL
53491: IFTRUE 53495
53493: GO 53624
53495: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53496: LD_ADDR_VAR 0 5
53500: PUSH
53501: LD_VAR 0 1
53505: PUSH
53506: LD_VAR 0 2
53510: PUSH
53511: LD_INT 3
53513: MINUS
53514: PUSH
53515: LD_INT 3
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: LIST
53522: PUSH
53523: LD_VAR 0 1
53527: PUSH
53528: LD_INT 4
53530: PLUS
53531: PUSH
53532: LD_VAR 0 2
53536: PUSH
53537: LD_INT 4
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: LIST
53544: PUSH
53545: LD_VAR 0 1
53549: PUSH
53550: LD_VAR 0 2
53554: PUSH
53555: LD_INT 4
53557: PLUS
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: LIST
53566: PUSH
53567: LD_VAR 0 1
53571: PUSH
53572: LD_INT 3
53574: MINUS
53575: PUSH
53576: LD_VAR 0 2
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: LIST
53588: PUSH
53589: LD_VAR 0 1
53593: PUSH
53594: LD_INT 4
53596: MINUS
53597: PUSH
53598: LD_VAR 0 2
53602: PUSH
53603: LD_INT 4
53605: MINUS
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: LIST
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: ST_TO_ADDR
// end ; 3 :
53622: GO 54044
53624: LD_INT 3
53626: DOUBLE
53627: EQUAL
53628: IFTRUE 53632
53630: GO 53765
53632: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53633: LD_ADDR_VAR 0 5
53637: PUSH
53638: LD_VAR 0 1
53642: PUSH
53643: LD_INT 3
53645: PLUS
53646: PUSH
53647: LD_VAR 0 2
53651: PUSH
53652: LD_INT 4
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: LIST
53659: PUSH
53660: LD_VAR 0 1
53664: PUSH
53665: LD_INT 4
53667: PLUS
53668: PUSH
53669: LD_VAR 0 2
53673: PUSH
53674: LD_INT 4
53676: PLUS
53677: PUSH
53678: LD_INT 5
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: LIST
53685: PUSH
53686: LD_VAR 0 1
53690: PUSH
53691: LD_INT 4
53693: MINUS
53694: PUSH
53695: LD_VAR 0 2
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: LIST
53707: PUSH
53708: LD_VAR 0 1
53712: PUSH
53713: LD_VAR 0 2
53717: PUSH
53718: LD_INT 4
53720: MINUS
53721: PUSH
53722: LD_INT 3
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: LIST
53729: PUSH
53730: LD_VAR 0 1
53734: PUSH
53735: LD_INT 3
53737: MINUS
53738: PUSH
53739: LD_VAR 0 2
53743: PUSH
53744: LD_INT 3
53746: MINUS
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: LIST
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: ST_TO_ADDR
// end ; 4 :
53763: GO 54044
53765: LD_INT 4
53767: DOUBLE
53768: EQUAL
53769: IFTRUE 53773
53771: GO 53906
53773: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53774: LD_ADDR_VAR 0 5
53778: PUSH
53779: LD_VAR 0 1
53783: PUSH
53784: LD_VAR 0 2
53788: PUSH
53789: LD_INT 4
53791: PLUS
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: LIST
53800: PUSH
53801: LD_VAR 0 1
53805: PUSH
53806: LD_INT 3
53808: PLUS
53809: PUSH
53810: LD_VAR 0 2
53814: PUSH
53815: LD_INT 3
53817: PLUS
53818: PUSH
53819: LD_INT 5
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: LIST
53826: PUSH
53827: LD_VAR 0 1
53831: PUSH
53832: LD_INT 4
53834: PLUS
53835: PUSH
53836: LD_VAR 0 2
53840: PUSH
53841: LD_INT 4
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: LIST
53848: PUSH
53849: LD_VAR 0 1
53853: PUSH
53854: LD_VAR 0 2
53858: PUSH
53859: LD_INT 3
53861: MINUS
53862: PUSH
53863: LD_INT 3
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: LIST
53870: PUSH
53871: LD_VAR 0 1
53875: PUSH
53876: LD_INT 4
53878: MINUS
53879: PUSH
53880: LD_VAR 0 2
53884: PUSH
53885: LD_INT 4
53887: MINUS
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: LIST
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: ST_TO_ADDR
// end ; 5 :
53904: GO 54044
53906: LD_INT 5
53908: DOUBLE
53909: EQUAL
53910: IFTRUE 53914
53912: GO 54043
53914: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53915: LD_ADDR_VAR 0 5
53919: PUSH
53920: LD_VAR 0 1
53924: PUSH
53925: LD_INT 4
53927: MINUS
53928: PUSH
53929: LD_VAR 0 2
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: LIST
53941: PUSH
53942: LD_VAR 0 1
53946: PUSH
53947: LD_VAR 0 2
53951: PUSH
53952: LD_INT 4
53954: MINUS
53955: PUSH
53956: LD_INT 3
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: LIST
53963: PUSH
53964: LD_VAR 0 1
53968: PUSH
53969: LD_INT 4
53971: PLUS
53972: PUSH
53973: LD_VAR 0 2
53977: PUSH
53978: LD_INT 4
53980: PLUS
53981: PUSH
53982: LD_INT 5
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: LIST
53989: PUSH
53990: LD_VAR 0 1
53994: PUSH
53995: LD_INT 3
53997: PLUS
53998: PUSH
53999: LD_VAR 0 2
54003: PUSH
54004: LD_INT 4
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: LIST
54011: PUSH
54012: LD_VAR 0 1
54016: PUSH
54017: LD_VAR 0 2
54021: PUSH
54022: LD_INT 3
54024: PLUS
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: ST_TO_ADDR
// end ; end ;
54041: GO 54044
54043: POP
// result := list ;
54044: LD_ADDR_VAR 0 4
54048: PUSH
54049: LD_VAR 0 5
54053: ST_TO_ADDR
// end ;
54054: LD_VAR 0 4
54058: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54059: LD_INT 0
54061: PPUSH
54062: PPUSH
54063: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54064: LD_VAR 0 1
54068: NOT
54069: IFTRUE 54097
54071: PUSH
54072: LD_VAR 0 2
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: LD_INT 3
54085: PUSH
54086: LD_INT 4
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: IN
54095: NOT
54096: OR
54097: IFFALSE 54101
// exit ;
54099: GO 54184
// tmp := [ ] ;
54101: LD_ADDR_VAR 0 5
54105: PUSH
54106: EMPTY
54107: ST_TO_ADDR
// for i in units do
54108: LD_ADDR_VAR 0 4
54112: PUSH
54113: LD_VAR 0 1
54117: PUSH
54118: FOR_IN
54119: IFFALSE 54153
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
54121: LD_ADDR_VAR 0 5
54125: PUSH
54126: LD_VAR 0 5
54130: PPUSH
54131: LD_VAR 0 4
54135: PPUSH
54136: LD_VAR 0 2
54140: PPUSH
54141: CALL_OW 259
54145: PPUSH
54146: CALL 55579 0 2
54150: ST_TO_ADDR
54151: GO 54118
54153: POP
54154: POP
// if not tmp then
54155: LD_VAR 0 5
54159: NOT
54160: IFFALSE 54164
// exit ;
54162: GO 54184
// result := SortListByListDesc ( units , tmp ) ;
54164: LD_ADDR_VAR 0 3
54168: PUSH
54169: LD_VAR 0 1
54173: PPUSH
54174: LD_VAR 0 5
54178: PPUSH
54179: CALL_OW 77
54183: ST_TO_ADDR
// end ;
54184: LD_VAR 0 3
54188: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54189: LD_INT 0
54191: PPUSH
54192: PPUSH
54193: PPUSH
// result := false ;
54194: LD_ADDR_VAR 0 3
54198: PUSH
54199: LD_INT 0
54201: ST_TO_ADDR
// if not building then
54202: LD_VAR 0 2
54206: NOT
54207: IFFALSE 54211
// exit ;
54209: GO 54355
// x := GetX ( building ) ;
54211: LD_ADDR_VAR 0 4
54215: PUSH
54216: LD_VAR 0 2
54220: PPUSH
54221: CALL_OW 250
54225: ST_TO_ADDR
// y := GetY ( building ) ;
54226: LD_ADDR_VAR 0 5
54230: PUSH
54231: LD_VAR 0 2
54235: PPUSH
54236: CALL_OW 251
54240: ST_TO_ADDR
// if not x or not y then
54241: LD_VAR 0 4
54245: NOT
54246: IFTRUE 54255
54248: PUSH
54249: LD_VAR 0 5
54253: NOT
54254: OR
54255: IFFALSE 54259
// exit ;
54257: GO 54355
// if GetTaskList ( unit ) then
54259: LD_VAR 0 1
54263: PPUSH
54264: CALL_OW 437
54268: IFFALSE 54355
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54270: LD_STRING e
54272: PUSH
54273: LD_VAR 0 1
54277: PPUSH
54278: CALL_OW 437
54282: PUSH
54283: LD_INT 1
54285: ARRAY
54286: PUSH
54287: LD_INT 1
54289: ARRAY
54290: EQUAL
54291: IFFALSE 54318
54293: PUSH
54294: LD_VAR 0 4
54298: PUSH
54299: LD_VAR 0 1
54303: PPUSH
54304: CALL_OW 437
54308: PUSH
54309: LD_INT 1
54311: ARRAY
54312: PUSH
54313: LD_INT 2
54315: ARRAY
54316: EQUAL
54317: AND
54318: IFFALSE 54345
54320: PUSH
54321: LD_VAR 0 5
54325: PUSH
54326: LD_VAR 0 1
54330: PPUSH
54331: CALL_OW 437
54335: PUSH
54336: LD_INT 1
54338: ARRAY
54339: PUSH
54340: LD_INT 3
54342: ARRAY
54343: EQUAL
54344: AND
54345: IFFALSE 54355
// result := true end ;
54347: LD_ADDR_VAR 0 3
54351: PUSH
54352: LD_INT 1
54354: ST_TO_ADDR
// end ;
54355: LD_VAR 0 3
54359: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54360: LD_INT 0
54362: PPUSH
// result := false ;
54363: LD_ADDR_VAR 0 4
54367: PUSH
54368: LD_INT 0
54370: ST_TO_ADDR
// if GetTaskList ( unit ) then
54371: LD_VAR 0 1
54375: PPUSH
54376: CALL_OW 437
54380: IFFALSE 54467
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54382: LD_STRING M
54384: PUSH
54385: LD_VAR 0 1
54389: PPUSH
54390: CALL_OW 437
54394: PUSH
54395: LD_INT 1
54397: ARRAY
54398: PUSH
54399: LD_INT 1
54401: ARRAY
54402: EQUAL
54403: IFFALSE 54430
54405: PUSH
54406: LD_VAR 0 2
54410: PUSH
54411: LD_VAR 0 1
54415: PPUSH
54416: CALL_OW 437
54420: PUSH
54421: LD_INT 1
54423: ARRAY
54424: PUSH
54425: LD_INT 2
54427: ARRAY
54428: EQUAL
54429: AND
54430: IFFALSE 54457
54432: PUSH
54433: LD_VAR 0 3
54437: PUSH
54438: LD_VAR 0 1
54442: PPUSH
54443: CALL_OW 437
54447: PUSH
54448: LD_INT 1
54450: ARRAY
54451: PUSH
54452: LD_INT 3
54454: ARRAY
54455: EQUAL
54456: AND
54457: IFFALSE 54467
// result := true ;
54459: LD_ADDR_VAR 0 4
54463: PUSH
54464: LD_INT 1
54466: ST_TO_ADDR
// end ; end ;
54467: LD_VAR 0 4
54471: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54472: LD_INT 0
54474: PPUSH
54475: PPUSH
54476: PPUSH
54477: PPUSH
// if not unit or not area then
54478: LD_VAR 0 1
54482: NOT
54483: IFTRUE 54492
54485: PUSH
54486: LD_VAR 0 2
54490: NOT
54491: OR
54492: IFFALSE 54496
// exit ;
54494: GO 54672
// tmp := AreaToList ( area , i ) ;
54496: LD_ADDR_VAR 0 6
54500: PUSH
54501: LD_VAR 0 2
54505: PPUSH
54506: LD_VAR 0 5
54510: PPUSH
54511: CALL_OW 517
54515: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54516: LD_ADDR_VAR 0 5
54520: PUSH
54521: DOUBLE
54522: LD_INT 1
54524: DEC
54525: ST_TO_ADDR
54526: LD_VAR 0 6
54530: PUSH
54531: LD_INT 1
54533: ARRAY
54534: PUSH
54535: FOR_TO
54536: IFFALSE 54670
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54538: LD_ADDR_VAR 0 7
54542: PUSH
54543: LD_VAR 0 6
54547: PUSH
54548: LD_INT 1
54550: ARRAY
54551: PUSH
54552: LD_VAR 0 5
54556: ARRAY
54557: PUSH
54558: LD_VAR 0 6
54562: PUSH
54563: LD_INT 2
54565: ARRAY
54566: PUSH
54567: LD_VAR 0 5
54571: ARRAY
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
54577: LD_INT 92
54579: PUSH
54580: LD_VAR 0 7
54584: PUSH
54585: LD_INT 1
54587: ARRAY
54588: PUSH
54589: LD_VAR 0 7
54593: PUSH
54594: LD_INT 2
54596: ARRAY
54597: PUSH
54598: LD_INT 2
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: PPUSH
54607: CALL_OW 69
54611: PUSH
54612: LD_INT 0
54614: EQUAL
54615: IFFALSE 54668
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54617: LD_VAR 0 1
54621: PPUSH
54622: LD_VAR 0 7
54626: PUSH
54627: LD_INT 1
54629: ARRAY
54630: PPUSH
54631: LD_VAR 0 7
54635: PUSH
54636: LD_INT 2
54638: ARRAY
54639: PPUSH
54640: LD_VAR 0 3
54644: PPUSH
54645: CALL_OW 48
// result := IsPlaced ( unit ) ;
54649: LD_ADDR_VAR 0 4
54653: PUSH
54654: LD_VAR 0 1
54658: PPUSH
54659: CALL_OW 305
54663: ST_TO_ADDR
// exit ;
54664: POP
54665: POP
54666: GO 54672
// end ; end ;
54668: GO 54535
54670: POP
54671: POP
// end ;
54672: LD_VAR 0 4
54676: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54677: LD_INT 0
54679: PPUSH
54680: PPUSH
54681: PPUSH
// if not side or side > 8 then
54682: LD_VAR 0 1
54686: NOT
54687: IFTRUE 54699
54689: PUSH
54690: LD_VAR 0 1
54694: PUSH
54695: LD_INT 8
54697: GREATER
54698: OR
54699: IFFALSE 54703
// exit ;
54701: GO 54890
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54703: LD_ADDR_VAR 0 4
54707: PUSH
54708: LD_INT 22
54710: PUSH
54711: LD_VAR 0 1
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 21
54722: PUSH
54723: LD_INT 3
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PPUSH
54734: CALL_OW 69
54738: ST_TO_ADDR
// if not tmp then
54739: LD_VAR 0 4
54743: NOT
54744: IFFALSE 54748
// exit ;
54746: GO 54890
// enable_addtolog := true ;
54748: LD_ADDR_OWVAR 81
54752: PUSH
54753: LD_INT 1
54755: ST_TO_ADDR
// AddToLog ( [ ) ;
54756: LD_STRING [
54758: PPUSH
54759: CALL_OW 561
// for i in tmp do
54763: LD_ADDR_VAR 0 3
54767: PUSH
54768: LD_VAR 0 4
54772: PUSH
54773: FOR_IN
54774: IFFALSE 54881
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54776: LD_STRING [
54778: PUSH
54779: LD_VAR 0 3
54783: PPUSH
54784: CALL_OW 266
54788: STR
54789: PUSH
54790: LD_STRING , 
54792: STR
54793: PUSH
54794: LD_VAR 0 3
54798: PPUSH
54799: CALL_OW 250
54803: STR
54804: PUSH
54805: LD_STRING , 
54807: STR
54808: PUSH
54809: LD_VAR 0 3
54813: PPUSH
54814: CALL_OW 251
54818: STR
54819: PUSH
54820: LD_STRING , 
54822: STR
54823: PUSH
54824: LD_VAR 0 3
54828: PPUSH
54829: CALL_OW 254
54833: STR
54834: PUSH
54835: LD_STRING , 
54837: STR
54838: PUSH
54839: LD_VAR 0 3
54843: PPUSH
54844: LD_INT 1
54846: PPUSH
54847: CALL_OW 268
54851: STR
54852: PUSH
54853: LD_STRING , 
54855: STR
54856: PUSH
54857: LD_VAR 0 3
54861: PPUSH
54862: LD_INT 2
54864: PPUSH
54865: CALL_OW 268
54869: STR
54870: PUSH
54871: LD_STRING ],
54873: STR
54874: PPUSH
54875: CALL_OW 561
// end ;
54879: GO 54773
54881: POP
54882: POP
// AddToLog ( ]; ) ;
54883: LD_STRING ];
54885: PPUSH
54886: CALL_OW 561
// end ;
54890: LD_VAR 0 2
54894: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54895: LD_INT 0
54897: PPUSH
54898: PPUSH
54899: PPUSH
54900: PPUSH
54901: PPUSH
// if not area or not rate or not max then
54902: LD_VAR 0 1
54906: NOT
54907: IFTRUE 54916
54909: PUSH
54910: LD_VAR 0 2
54914: NOT
54915: OR
54916: IFTRUE 54925
54918: PUSH
54919: LD_VAR 0 4
54923: NOT
54924: OR
54925: IFFALSE 54929
// exit ;
54927: GO 55118
// while 1 do
54929: LD_INT 1
54931: IFFALSE 55118
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54933: LD_ADDR_VAR 0 9
54937: PUSH
54938: LD_VAR 0 1
54942: PPUSH
54943: LD_INT 1
54945: PPUSH
54946: CALL_OW 287
54950: PUSH
54951: LD_INT 10
54953: MUL
54954: ST_TO_ADDR
// r := rate / 10 ;
54955: LD_ADDR_VAR 0 7
54959: PUSH
54960: LD_VAR 0 2
54964: PUSH
54965: LD_INT 10
54967: DIVREAL
54968: ST_TO_ADDR
// time := 1 1$00 ;
54969: LD_ADDR_VAR 0 8
54973: PUSH
54974: LD_INT 2100
54976: ST_TO_ADDR
// if amount < min then
54977: LD_VAR 0 9
54981: PUSH
54982: LD_VAR 0 3
54986: LESS
54987: IFFALSE 55005
// r := r * 2 else
54989: LD_ADDR_VAR 0 7
54993: PUSH
54994: LD_VAR 0 7
54998: PUSH
54999: LD_INT 2
55001: MUL
55002: ST_TO_ADDR
55003: GO 55031
// if amount > max then
55005: LD_VAR 0 9
55009: PUSH
55010: LD_VAR 0 4
55014: GREATER
55015: IFFALSE 55031
// r := r / 2 ;
55017: LD_ADDR_VAR 0 7
55021: PUSH
55022: LD_VAR 0 7
55026: PUSH
55027: LD_INT 2
55029: DIVREAL
55030: ST_TO_ADDR
// time := time / r ;
55031: LD_ADDR_VAR 0 8
55035: PUSH
55036: LD_VAR 0 8
55040: PUSH
55041: LD_VAR 0 7
55045: DIVREAL
55046: ST_TO_ADDR
// if time < 0 then
55047: LD_VAR 0 8
55051: PUSH
55052: LD_INT 0
55054: LESS
55055: IFFALSE 55072
// time := time * - 1 ;
55057: LD_ADDR_VAR 0 8
55061: PUSH
55062: LD_VAR 0 8
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: MUL
55071: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
55072: LD_VAR 0 8
55076: PUSH
55077: LD_INT 35
55079: PPUSH
55080: LD_INT 875
55082: PPUSH
55083: CALL_OW 12
55087: PLUS
55088: PPUSH
55089: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55093: LD_INT 1
55095: PPUSH
55096: LD_INT 5
55098: PPUSH
55099: CALL_OW 12
55103: PPUSH
55104: LD_VAR 0 1
55108: PPUSH
55109: LD_INT 1
55111: PPUSH
55112: CALL_OW 55
// end ;
55116: GO 54929
// end ;
55118: LD_VAR 0 5
55122: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55123: LD_INT 0
55125: PPUSH
55126: PPUSH
55127: PPUSH
55128: PPUSH
55129: PPUSH
55130: PPUSH
55131: PPUSH
55132: PPUSH
// if not turrets or not factories then
55133: LD_VAR 0 1
55137: NOT
55138: IFTRUE 55147
55140: PUSH
55141: LD_VAR 0 2
55145: NOT
55146: OR
55147: IFFALSE 55151
// exit ;
55149: GO 55458
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55151: LD_ADDR_VAR 0 10
55155: PUSH
55156: LD_INT 5
55158: PUSH
55159: LD_INT 6
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 2
55168: PUSH
55169: LD_INT 4
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 3
55178: PUSH
55179: LD_INT 5
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 24
55193: PUSH
55194: LD_INT 25
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 23
55203: PUSH
55204: LD_INT 27
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 42
55217: PUSH
55218: LD_INT 43
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 44
55227: PUSH
55228: LD_INT 46
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 45
55237: PUSH
55238: LD_INT 47
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: LIST
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: LIST
55254: ST_TO_ADDR
// result := [ ] ;
55255: LD_ADDR_VAR 0 3
55259: PUSH
55260: EMPTY
55261: ST_TO_ADDR
// for i in turrets do
55262: LD_ADDR_VAR 0 4
55266: PUSH
55267: LD_VAR 0 1
55271: PUSH
55272: FOR_IN
55273: IFFALSE 55456
// begin nat := GetNation ( i ) ;
55275: LD_ADDR_VAR 0 7
55279: PUSH
55280: LD_VAR 0 4
55284: PPUSH
55285: CALL_OW 248
55289: ST_TO_ADDR
// weapon := 0 ;
55290: LD_ADDR_VAR 0 8
55294: PUSH
55295: LD_INT 0
55297: ST_TO_ADDR
// if not nat then
55298: LD_VAR 0 7
55302: NOT
55303: IFFALSE 55307
// continue ;
55305: GO 55272
// for j in list [ nat ] do
55307: LD_ADDR_VAR 0 5
55311: PUSH
55312: LD_VAR 0 10
55316: PUSH
55317: LD_VAR 0 7
55321: ARRAY
55322: PUSH
55323: FOR_IN
55324: IFFALSE 55365
// if GetBWeapon ( i ) = j [ 1 ] then
55326: LD_VAR 0 4
55330: PPUSH
55331: CALL_OW 269
55335: PUSH
55336: LD_VAR 0 5
55340: PUSH
55341: LD_INT 1
55343: ARRAY
55344: EQUAL
55345: IFFALSE 55363
// begin weapon := j [ 2 ] ;
55347: LD_ADDR_VAR 0 8
55351: PUSH
55352: LD_VAR 0 5
55356: PUSH
55357: LD_INT 2
55359: ARRAY
55360: ST_TO_ADDR
// break ;
55361: GO 55365
// end ;
55363: GO 55323
55365: POP
55366: POP
// if not weapon then
55367: LD_VAR 0 8
55371: NOT
55372: IFFALSE 55376
// continue ;
55374: GO 55272
// for k in factories do
55376: LD_ADDR_VAR 0 6
55380: PUSH
55381: LD_VAR 0 2
55385: PUSH
55386: FOR_IN
55387: IFFALSE 55452
// begin weapons := AvailableWeaponList ( k ) ;
55389: LD_ADDR_VAR 0 9
55393: PUSH
55394: LD_VAR 0 6
55398: PPUSH
55399: CALL_OW 478
55403: ST_TO_ADDR
// if not weapons then
55404: LD_VAR 0 9
55408: NOT
55409: IFFALSE 55413
// continue ;
55411: GO 55386
// if weapon in weapons then
55413: LD_VAR 0 8
55417: PUSH
55418: LD_VAR 0 9
55422: IN
55423: IFFALSE 55450
// begin result := [ i , weapon ] ;
55425: LD_ADDR_VAR 0 3
55429: PUSH
55430: LD_VAR 0 4
55434: PUSH
55435: LD_VAR 0 8
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: ST_TO_ADDR
// exit ;
55444: POP
55445: POP
55446: POP
55447: POP
55448: GO 55458
// end ; end ;
55450: GO 55386
55452: POP
55453: POP
// end ;
55454: GO 55272
55456: POP
55457: POP
// end ;
55458: LD_VAR 0 3
55462: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55463: LD_INT 0
55465: PPUSH
// if not side or side > 8 then
55466: LD_VAR 0 3
55470: NOT
55471: IFTRUE 55483
55473: PUSH
55474: LD_VAR 0 3
55478: PUSH
55479: LD_INT 8
55481: GREATER
55482: OR
55483: IFFALSE 55487
// exit ;
55485: GO 55546
// if not range then
55487: LD_VAR 0 4
55491: NOT
55492: IFFALSE 55503
// range := - 12 ;
55494: LD_ADDR_VAR 0 4
55498: PUSH
55499: LD_INT 12
55501: NEG
55502: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55503: LD_VAR 0 1
55507: PPUSH
55508: LD_VAR 0 2
55512: PPUSH
55513: LD_VAR 0 3
55517: PPUSH
55518: LD_VAR 0 4
55522: PPUSH
55523: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55527: LD_VAR 0 1
55531: PPUSH
55532: LD_VAR 0 2
55536: PPUSH
55537: LD_VAR 0 3
55541: PPUSH
55542: CALL_OW 331
// end ;
55546: LD_VAR 0 5
55550: RET
// export function Video ( mode ) ; begin
55551: LD_INT 0
55553: PPUSH
// ingame_video = mode ;
55554: LD_ADDR_OWVAR 52
55558: PUSH
55559: LD_VAR 0 1
55563: ST_TO_ADDR
// interface_hidden = mode ;
55564: LD_ADDR_OWVAR 54
55568: PUSH
55569: LD_VAR 0 1
55573: ST_TO_ADDR
// end ;
55574: LD_VAR 0 2
55578: RET
// export function Join ( array , element ) ; begin
55579: LD_INT 0
55581: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55582: LD_ADDR_VAR 0 3
55586: PUSH
55587: LD_VAR 0 1
55591: PPUSH
55592: LD_VAR 0 1
55596: PUSH
55597: LD_INT 1
55599: PLUS
55600: PPUSH
55601: LD_VAR 0 2
55605: PPUSH
55606: CALL_OW 1
55610: ST_TO_ADDR
// end ;
55611: LD_VAR 0 3
55615: RET
// export function JoinUnion ( array , element ) ; begin
55616: LD_INT 0
55618: PPUSH
// result := array union element ;
55619: LD_ADDR_VAR 0 3
55623: PUSH
55624: LD_VAR 0 1
55628: PUSH
55629: LD_VAR 0 2
55633: UNION
55634: ST_TO_ADDR
// end ;
55635: LD_VAR 0 3
55639: RET
// export function GetBehemoths ( side ) ; begin
55640: LD_INT 0
55642: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
55643: LD_ADDR_VAR 0 2
55647: PUSH
55648: LD_INT 22
55650: PUSH
55651: LD_VAR 0 1
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 31
55662: PUSH
55663: LD_INT 25
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PPUSH
55674: CALL_OW 69
55678: ST_TO_ADDR
// end ;
55679: LD_VAR 0 2
55683: RET
// export function Shuffle ( array ) ; var i , index ; begin
55684: LD_INT 0
55686: PPUSH
55687: PPUSH
55688: PPUSH
// result := [ ] ;
55689: LD_ADDR_VAR 0 2
55693: PUSH
55694: EMPTY
55695: ST_TO_ADDR
// if not array then
55696: LD_VAR 0 1
55700: NOT
55701: IFFALSE 55705
// exit ;
55703: GO 55804
// Randomize ;
55705: CALL_OW 10
// for i = array downto 1 do
55709: LD_ADDR_VAR 0 3
55713: PUSH
55714: DOUBLE
55715: LD_VAR 0 1
55719: INC
55720: ST_TO_ADDR
55721: LD_INT 1
55723: PUSH
55724: FOR_DOWNTO
55725: IFFALSE 55802
// begin index := rand ( 1 , array ) ;
55727: LD_ADDR_VAR 0 4
55731: PUSH
55732: LD_INT 1
55734: PPUSH
55735: LD_VAR 0 1
55739: PPUSH
55740: CALL_OW 12
55744: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55745: LD_ADDR_VAR 0 2
55749: PUSH
55750: LD_VAR 0 2
55754: PPUSH
55755: LD_VAR 0 2
55759: PUSH
55760: LD_INT 1
55762: PLUS
55763: PPUSH
55764: LD_VAR 0 1
55768: PUSH
55769: LD_VAR 0 4
55773: ARRAY
55774: PPUSH
55775: CALL_OW 2
55779: ST_TO_ADDR
// array := Delete ( array , index ) ;
55780: LD_ADDR_VAR 0 1
55784: PUSH
55785: LD_VAR 0 1
55789: PPUSH
55790: LD_VAR 0 4
55794: PPUSH
55795: CALL_OW 3
55799: ST_TO_ADDR
// end ;
55800: GO 55724
55802: POP
55803: POP
// end ;
55804: LD_VAR 0 2
55808: RET
// export function GetBaseMaterials ( base ) ; begin
55809: LD_INT 0
55811: PPUSH
// result := [ 0 , 0 , 0 ] ;
55812: LD_ADDR_VAR 0 2
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: LIST
55830: ST_TO_ADDR
// if not base then
55831: LD_VAR 0 1
55835: NOT
55836: IFFALSE 55840
// exit ;
55838: GO 55889
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55840: LD_ADDR_VAR 0 2
55844: PUSH
55845: LD_VAR 0 1
55849: PPUSH
55850: LD_INT 1
55852: PPUSH
55853: CALL_OW 275
55857: PUSH
55858: LD_VAR 0 1
55862: PPUSH
55863: LD_INT 2
55865: PPUSH
55866: CALL_OW 275
55870: PUSH
55871: LD_VAR 0 1
55875: PPUSH
55876: LD_INT 3
55878: PPUSH
55879: CALL_OW 275
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: LIST
55888: ST_TO_ADDR
// end ;
55889: LD_VAR 0 2
55893: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55894: LD_INT 0
55896: PPUSH
55897: PPUSH
// result := array ;
55898: LD_ADDR_VAR 0 3
55902: PUSH
55903: LD_VAR 0 1
55907: ST_TO_ADDR
// if size >= result then
55908: LD_VAR 0 2
55912: PUSH
55913: LD_VAR 0 3
55917: GREATEREQUAL
55918: IFFALSE 55922
// exit ;
55920: GO 55972
// if size then
55922: LD_VAR 0 2
55926: IFFALSE 55972
// for i := array downto size do
55928: LD_ADDR_VAR 0 4
55932: PUSH
55933: DOUBLE
55934: LD_VAR 0 1
55938: INC
55939: ST_TO_ADDR
55940: LD_VAR 0 2
55944: PUSH
55945: FOR_DOWNTO
55946: IFFALSE 55970
// result := Delete ( result , result ) ;
55948: LD_ADDR_VAR 0 3
55952: PUSH
55953: LD_VAR 0 3
55957: PPUSH
55958: LD_VAR 0 3
55962: PPUSH
55963: CALL_OW 3
55967: ST_TO_ADDR
55968: GO 55945
55970: POP
55971: POP
// end ;
55972: LD_VAR 0 3
55976: RET
// export function ComExit ( unit ) ; var tmp ; begin
55977: LD_INT 0
55979: PPUSH
55980: PPUSH
// if not IsInUnit ( unit ) then
55981: LD_VAR 0 1
55985: PPUSH
55986: CALL_OW 310
55990: NOT
55991: IFFALSE 55995
// exit ;
55993: GO 56055
// tmp := IsInUnit ( unit ) ;
55995: LD_ADDR_VAR 0 3
55999: PUSH
56000: LD_VAR 0 1
56004: PPUSH
56005: CALL_OW 310
56009: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56010: LD_VAR 0 3
56014: PPUSH
56015: CALL_OW 247
56019: PUSH
56020: LD_INT 2
56022: EQUAL
56023: IFFALSE 56036
// ComExitVehicle ( unit ) else
56025: LD_VAR 0 1
56029: PPUSH
56030: CALL_OW 121
56034: GO 56045
// ComExitBuilding ( unit ) ;
56036: LD_VAR 0 1
56040: PPUSH
56041: CALL_OW 122
// result := tmp ;
56045: LD_ADDR_VAR 0 2
56049: PUSH
56050: LD_VAR 0 3
56054: ST_TO_ADDR
// end ;
56055: LD_VAR 0 2
56059: RET
// export function ComExitAll ( units ) ; var i ; begin
56060: LD_INT 0
56062: PPUSH
56063: PPUSH
// if not units then
56064: LD_VAR 0 1
56068: NOT
56069: IFFALSE 56073
// exit ;
56071: GO 56099
// for i in units do
56073: LD_ADDR_VAR 0 3
56077: PUSH
56078: LD_VAR 0 1
56082: PUSH
56083: FOR_IN
56084: IFFALSE 56097
// ComExit ( i ) ;
56086: LD_VAR 0 3
56090: PPUSH
56091: CALL 55977 0 1
56095: GO 56083
56097: POP
56098: POP
// end ;
56099: LD_VAR 0 2
56103: RET
// export function ResetHc ; begin
56104: LD_INT 0
56106: PPUSH
// InitHc ;
56107: CALL_OW 19
// hc_importance := 0 ;
56111: LD_ADDR_OWVAR 32
56115: PUSH
56116: LD_INT 0
56118: ST_TO_ADDR
// end ;
56119: LD_VAR 0 1
56123: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56124: LD_INT 0
56126: PPUSH
56127: PPUSH
56128: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56129: LD_ADDR_VAR 0 6
56133: PUSH
56134: LD_VAR 0 1
56138: PUSH
56139: LD_VAR 0 3
56143: PLUS
56144: PUSH
56145: LD_INT 2
56147: DIV
56148: ST_TO_ADDR
// if _x < 0 then
56149: LD_VAR 0 6
56153: PUSH
56154: LD_INT 0
56156: LESS
56157: IFFALSE 56174
// _x := _x * - 1 ;
56159: LD_ADDR_VAR 0 6
56163: PUSH
56164: LD_VAR 0 6
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: MUL
56173: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56174: LD_ADDR_VAR 0 7
56178: PUSH
56179: LD_VAR 0 2
56183: PUSH
56184: LD_VAR 0 4
56188: PLUS
56189: PUSH
56190: LD_INT 2
56192: DIV
56193: ST_TO_ADDR
// if _y < 0 then
56194: LD_VAR 0 7
56198: PUSH
56199: LD_INT 0
56201: LESS
56202: IFFALSE 56219
// _y := _y * - 1 ;
56204: LD_ADDR_VAR 0 7
56208: PUSH
56209: LD_VAR 0 7
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: MUL
56218: ST_TO_ADDR
// result := [ _x , _y ] ;
56219: LD_ADDR_VAR 0 5
56223: PUSH
56224: LD_VAR 0 6
56228: PUSH
56229: LD_VAR 0 7
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: ST_TO_ADDR
// end ;
56238: LD_VAR 0 5
56242: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56243: LD_INT 0
56245: PPUSH
56246: PPUSH
56247: PPUSH
56248: PPUSH
// task := GetTaskList ( unit ) ;
56249: LD_ADDR_VAR 0 7
56253: PUSH
56254: LD_VAR 0 1
56258: PPUSH
56259: CALL_OW 437
56263: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56264: LD_VAR 0 7
56268: NOT
56269: IFFALSE 56288
56271: PUSH
56272: LD_VAR 0 1
56276: PPUSH
56277: LD_VAR 0 2
56281: PPUSH
56282: CALL_OW 308
56286: NOT
56287: AND
56288: IFFALSE 56292
// exit ;
56290: GO 56410
// if IsInArea ( unit , area ) then
56292: LD_VAR 0 1
56296: PPUSH
56297: LD_VAR 0 2
56301: PPUSH
56302: CALL_OW 308
56306: IFFALSE 56324
// begin ComMoveToArea ( unit , goAway ) ;
56308: LD_VAR 0 1
56312: PPUSH
56313: LD_VAR 0 3
56317: PPUSH
56318: CALL_OW 113
// exit ;
56322: GO 56410
// end ; if task [ 1 ] [ 1 ] <> M then
56324: LD_VAR 0 7
56328: PUSH
56329: LD_INT 1
56331: ARRAY
56332: PUSH
56333: LD_INT 1
56335: ARRAY
56336: PUSH
56337: LD_STRING M
56339: NONEQUAL
56340: IFFALSE 56344
// exit ;
56342: GO 56410
// x := task [ 1 ] [ 2 ] ;
56344: LD_ADDR_VAR 0 5
56348: PUSH
56349: LD_VAR 0 7
56353: PUSH
56354: LD_INT 1
56356: ARRAY
56357: PUSH
56358: LD_INT 2
56360: ARRAY
56361: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56362: LD_ADDR_VAR 0 6
56366: PUSH
56367: LD_VAR 0 7
56371: PUSH
56372: LD_INT 1
56374: ARRAY
56375: PUSH
56376: LD_INT 3
56378: ARRAY
56379: ST_TO_ADDR
// if InArea ( x , y , area ) then
56380: LD_VAR 0 5
56384: PPUSH
56385: LD_VAR 0 6
56389: PPUSH
56390: LD_VAR 0 2
56394: PPUSH
56395: CALL_OW 309
56399: IFFALSE 56410
// ComStop ( unit ) ;
56401: LD_VAR 0 1
56405: PPUSH
56406: CALL_OW 141
// end ;
56410: LD_VAR 0 4
56414: RET
// export function Abs ( value ) ; begin
56415: LD_INT 0
56417: PPUSH
// result := value ;
56418: LD_ADDR_VAR 0 2
56422: PUSH
56423: LD_VAR 0 1
56427: ST_TO_ADDR
// if value < 0 then
56428: LD_VAR 0 1
56432: PUSH
56433: LD_INT 0
56435: LESS
56436: IFFALSE 56453
// result := value * - 1 ;
56438: LD_ADDR_VAR 0 2
56442: PUSH
56443: LD_VAR 0 1
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: MUL
56452: ST_TO_ADDR
// end ;
56453: LD_VAR 0 2
56457: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56458: LD_INT 0
56460: PPUSH
56461: PPUSH
56462: PPUSH
56463: PPUSH
56464: PPUSH
56465: PPUSH
56466: PPUSH
56467: PPUSH
// if not unit or not building then
56468: LD_VAR 0 1
56472: NOT
56473: IFTRUE 56482
56475: PUSH
56476: LD_VAR 0 2
56480: NOT
56481: OR
56482: IFFALSE 56486
// exit ;
56484: GO 56714
// x := GetX ( building ) ;
56486: LD_ADDR_VAR 0 4
56490: PUSH
56491: LD_VAR 0 2
56495: PPUSH
56496: CALL_OW 250
56500: ST_TO_ADDR
// y := GetY ( building ) ;
56501: LD_ADDR_VAR 0 6
56505: PUSH
56506: LD_VAR 0 2
56510: PPUSH
56511: CALL_OW 251
56515: ST_TO_ADDR
// d := GetDir ( building ) ;
56516: LD_ADDR_VAR 0 8
56520: PUSH
56521: LD_VAR 0 2
56525: PPUSH
56526: CALL_OW 254
56530: ST_TO_ADDR
// r := 4 ;
56531: LD_ADDR_VAR 0 9
56535: PUSH
56536: LD_INT 4
56538: ST_TO_ADDR
// for i := 1 to 5 do
56539: LD_ADDR_VAR 0 10
56543: PUSH
56544: DOUBLE
56545: LD_INT 1
56547: DEC
56548: ST_TO_ADDR
56549: LD_INT 5
56551: PUSH
56552: FOR_TO
56553: IFFALSE 56712
// begin _x := ShiftX ( x , d , r + i ) ;
56555: LD_ADDR_VAR 0 5
56559: PUSH
56560: LD_VAR 0 4
56564: PPUSH
56565: LD_VAR 0 8
56569: PPUSH
56570: LD_VAR 0 9
56574: PUSH
56575: LD_VAR 0 10
56579: PLUS
56580: PPUSH
56581: CALL_OW 272
56585: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56586: LD_ADDR_VAR 0 7
56590: PUSH
56591: LD_VAR 0 6
56595: PPUSH
56596: LD_VAR 0 8
56600: PPUSH
56601: LD_VAR 0 9
56605: PUSH
56606: LD_VAR 0 10
56610: PLUS
56611: PPUSH
56612: CALL_OW 273
56616: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56617: LD_VAR 0 5
56621: PPUSH
56622: LD_VAR 0 7
56626: PPUSH
56627: CALL_OW 488
56631: IFFALSE 56666
56633: PUSH
56634: LD_VAR 0 5
56638: PPUSH
56639: LD_VAR 0 7
56643: PPUSH
56644: CALL_OW 428
56648: PPUSH
56649: CALL_OW 247
56653: PUSH
56654: LD_INT 3
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: IN
56664: NOT
56665: AND
56666: IFFALSE 56710
// begin ComMoveXY ( unit , _x , _y ) ;
56668: LD_VAR 0 1
56672: PPUSH
56673: LD_VAR 0 5
56677: PPUSH
56678: LD_VAR 0 7
56682: PPUSH
56683: CALL_OW 111
// result := [ _x , _y ] ;
56687: LD_ADDR_VAR 0 3
56691: PUSH
56692: LD_VAR 0 5
56696: PUSH
56697: LD_VAR 0 7
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: ST_TO_ADDR
// exit ;
56706: POP
56707: POP
56708: GO 56714
// end ; end ;
56710: GO 56552
56712: POP
56713: POP
// end ;
56714: LD_VAR 0 3
56718: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56719: LD_INT 0
56721: PPUSH
56722: PPUSH
56723: PPUSH
// result := 0 ;
56724: LD_ADDR_VAR 0 3
56728: PUSH
56729: LD_INT 0
56731: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
56732: LD_VAR 0 1
56736: PUSH
56737: LD_INT 0
56739: LESS
56740: IFTRUE 56752
56742: PUSH
56743: LD_VAR 0 1
56747: PUSH
56748: LD_INT 8
56750: GREATER
56751: OR
56752: IFTRUE 56764
56754: PUSH
56755: LD_VAR 0 2
56759: PUSH
56760: LD_INT 0
56762: LESS
56763: OR
56764: IFTRUE 56776
56766: PUSH
56767: LD_VAR 0 2
56771: PUSH
56772: LD_INT 8
56774: GREATER
56775: OR
56776: IFFALSE 56780
// exit ;
56778: GO 56855
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
56780: LD_ADDR_VAR 0 4
56784: PUSH
56785: LD_INT 22
56787: PUSH
56788: LD_VAR 0 2
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PPUSH
56797: CALL_OW 69
56801: PUSH
56802: FOR_IN
56803: IFFALSE 56853
// begin un := UnitShoot ( i ) ;
56805: LD_ADDR_VAR 0 5
56809: PUSH
56810: LD_VAR 0 4
56814: PPUSH
56815: CALL_OW 504
56819: ST_TO_ADDR
// if GetSide ( un ) = side1 then
56820: LD_VAR 0 5
56824: PPUSH
56825: CALL_OW 255
56829: PUSH
56830: LD_VAR 0 1
56834: EQUAL
56835: IFFALSE 56851
// begin result := un ;
56837: LD_ADDR_VAR 0 3
56841: PUSH
56842: LD_VAR 0 5
56846: ST_TO_ADDR
// exit ;
56847: POP
56848: POP
56849: GO 56855
// end ; end ;
56851: GO 56802
56853: POP
56854: POP
// end ;
56855: LD_VAR 0 3
56859: RET
// export function GetCargoBay ( units ) ; begin
56860: LD_INT 0
56862: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56863: LD_ADDR_VAR 0 2
56867: PUSH
56868: LD_VAR 0 1
56872: PPUSH
56873: LD_INT 2
56875: PUSH
56876: LD_INT 34
56878: PUSH
56879: LD_INT 12
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 34
56888: PUSH
56889: LD_INT 51
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 34
56898: PUSH
56899: LD_INT 32
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 34
56908: PUSH
56909: LD_INT 89
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: PPUSH
56923: CALL_OW 72
56927: ST_TO_ADDR
// end ;
56928: LD_VAR 0 2
56932: RET
// export function Negate ( value ) ; begin
56933: LD_INT 0
56935: PPUSH
// result := not value ;
56936: LD_ADDR_VAR 0 2
56940: PUSH
56941: LD_VAR 0 1
56945: NOT
56946: ST_TO_ADDR
// end ;
56947: LD_VAR 0 2
56951: RET
// export function Inc ( value ) ; begin
56952: LD_INT 0
56954: PPUSH
// result := value + 1 ;
56955: LD_ADDR_VAR 0 2
56959: PUSH
56960: LD_VAR 0 1
56964: PUSH
56965: LD_INT 1
56967: PLUS
56968: ST_TO_ADDR
// end ;
56969: LD_VAR 0 2
56973: RET
// export function Dec ( value ) ; begin
56974: LD_INT 0
56976: PPUSH
// result := value - 1 ;
56977: LD_ADDR_VAR 0 2
56981: PUSH
56982: LD_VAR 0 1
56986: PUSH
56987: LD_INT 1
56989: MINUS
56990: ST_TO_ADDR
// end ;
56991: LD_VAR 0 2
56995: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56996: LD_INT 0
56998: PPUSH
56999: PPUSH
57000: PPUSH
57001: PPUSH
57002: PPUSH
57003: PPUSH
57004: PPUSH
57005: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
57006: LD_VAR 0 1
57010: PPUSH
57011: LD_VAR 0 2
57015: PPUSH
57016: CALL_OW 488
57020: NOT
57021: IFTRUE 57040
57023: PUSH
57024: LD_VAR 0 3
57028: PPUSH
57029: LD_VAR 0 4
57033: PPUSH
57034: CALL_OW 488
57038: NOT
57039: OR
57040: IFFALSE 57053
// begin result := - 1 ;
57042: LD_ADDR_VAR 0 5
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: ST_TO_ADDR
// exit ;
57051: GO 57288
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
57053: LD_ADDR_VAR 0 12
57057: PUSH
57058: LD_VAR 0 1
57062: PPUSH
57063: LD_VAR 0 2
57067: PPUSH
57068: LD_VAR 0 3
57072: PPUSH
57073: LD_VAR 0 4
57077: PPUSH
57078: CALL 56124 0 4
57082: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
57083: LD_ADDR_VAR 0 11
57087: PUSH
57088: LD_VAR 0 1
57092: PPUSH
57093: LD_VAR 0 2
57097: PPUSH
57098: LD_VAR 0 12
57102: PUSH
57103: LD_INT 1
57105: ARRAY
57106: PPUSH
57107: LD_VAR 0 12
57111: PUSH
57112: LD_INT 2
57114: ARRAY
57115: PPUSH
57116: CALL_OW 298
57120: ST_TO_ADDR
// distance := 9999 ;
57121: LD_ADDR_VAR 0 10
57125: PUSH
57126: LD_INT 9999
57128: ST_TO_ADDR
// for i := 0 to 5 do
57129: LD_ADDR_VAR 0 6
57133: PUSH
57134: DOUBLE
57135: LD_INT 0
57137: DEC
57138: ST_TO_ADDR
57139: LD_INT 5
57141: PUSH
57142: FOR_TO
57143: IFFALSE 57286
// begin _x := ShiftX ( x1 , i , centerDist ) ;
57145: LD_ADDR_VAR 0 7
57149: PUSH
57150: LD_VAR 0 1
57154: PPUSH
57155: LD_VAR 0 6
57159: PPUSH
57160: LD_VAR 0 11
57164: PPUSH
57165: CALL_OW 272
57169: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
57170: LD_ADDR_VAR 0 8
57174: PUSH
57175: LD_VAR 0 2
57179: PPUSH
57180: LD_VAR 0 6
57184: PPUSH
57185: LD_VAR 0 11
57189: PPUSH
57190: CALL_OW 273
57194: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57195: LD_VAR 0 7
57199: PPUSH
57200: LD_VAR 0 8
57204: PPUSH
57205: CALL_OW 488
57209: NOT
57210: IFFALSE 57214
// continue ;
57212: GO 57142
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
57214: LD_ADDR_VAR 0 9
57218: PUSH
57219: LD_VAR 0 12
57223: PUSH
57224: LD_INT 1
57226: ARRAY
57227: PPUSH
57228: LD_VAR 0 12
57232: PUSH
57233: LD_INT 2
57235: ARRAY
57236: PPUSH
57237: LD_VAR 0 7
57241: PPUSH
57242: LD_VAR 0 8
57246: PPUSH
57247: CALL_OW 298
57251: ST_TO_ADDR
// if tmp < distance then
57252: LD_VAR 0 9
57256: PUSH
57257: LD_VAR 0 10
57261: LESS
57262: IFFALSE 57284
// begin result := i ;
57264: LD_ADDR_VAR 0 5
57268: PUSH
57269: LD_VAR 0 6
57273: ST_TO_ADDR
// distance := tmp ;
57274: LD_ADDR_VAR 0 10
57278: PUSH
57279: LD_VAR 0 9
57283: ST_TO_ADDR
// end ; end ;
57284: GO 57142
57286: POP
57287: POP
// end ;
57288: LD_VAR 0 5
57292: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57293: LD_INT 0
57295: PPUSH
57296: PPUSH
// if not driver or not IsInUnit ( driver ) then
57297: LD_VAR 0 1
57301: NOT
57302: IFTRUE 57316
57304: PUSH
57305: LD_VAR 0 1
57309: PPUSH
57310: CALL_OW 310
57314: NOT
57315: OR
57316: IFFALSE 57320
// exit ;
57318: GO 57410
// vehicle := IsInUnit ( driver ) ;
57320: LD_ADDR_VAR 0 3
57324: PUSH
57325: LD_VAR 0 1
57329: PPUSH
57330: CALL_OW 310
57334: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57335: LD_VAR 0 1
57339: PPUSH
57340: LD_STRING \
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: PUSH
57370: LD_STRING E
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_VAR 0 3
57383: PUSH
57384: LD_INT 0
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PPUSH
57406: CALL_OW 446
// end ;
57410: LD_VAR 0 2
57414: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57415: LD_INT 0
57417: PPUSH
57418: PPUSH
// if not driver or not IsInUnit ( driver ) then
57419: LD_VAR 0 1
57423: NOT
57424: IFTRUE 57438
57426: PUSH
57427: LD_VAR 0 1
57431: PPUSH
57432: CALL_OW 310
57436: NOT
57437: OR
57438: IFFALSE 57442
// exit ;
57440: GO 57532
// vehicle := IsInUnit ( driver ) ;
57442: LD_ADDR_VAR 0 3
57446: PUSH
57447: LD_VAR 0 1
57451: PPUSH
57452: CALL_OW 310
57456: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57457: LD_VAR 0 1
57461: PPUSH
57462: LD_STRING \
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: PUSH
57492: LD_STRING E
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: LD_VAR 0 3
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PPUSH
57528: CALL_OW 447
// end ;
57532: LD_VAR 0 2
57536: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
57537: LD_INT 0
57539: PPUSH
57540: PPUSH
57541: PPUSH
// tmp := [ ] ;
57542: LD_ADDR_VAR 0 5
57546: PUSH
57547: EMPTY
57548: ST_TO_ADDR
// for i in units do
57549: LD_ADDR_VAR 0 4
57553: PUSH
57554: LD_VAR 0 1
57558: PUSH
57559: FOR_IN
57560: IFFALSE 57598
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
57562: LD_ADDR_VAR 0 5
57566: PUSH
57567: LD_VAR 0 5
57571: PPUSH
57572: LD_VAR 0 5
57576: PUSH
57577: LD_INT 1
57579: PLUS
57580: PPUSH
57581: LD_VAR 0 4
57585: PPUSH
57586: CALL_OW 256
57590: PPUSH
57591: CALL_OW 2
57595: ST_TO_ADDR
57596: GO 57559
57598: POP
57599: POP
// if not tmp then
57600: LD_VAR 0 5
57604: NOT
57605: IFFALSE 57609
// exit ;
57607: GO 57657
// if asc then
57609: LD_VAR 0 2
57613: IFFALSE 57637
// result := SortListByListAsc ( units , tmp ) else
57615: LD_ADDR_VAR 0 3
57619: PUSH
57620: LD_VAR 0 1
57624: PPUSH
57625: LD_VAR 0 5
57629: PPUSH
57630: CALL_OW 76
57634: ST_TO_ADDR
57635: GO 57657
// result := SortListByListDesc ( units , tmp ) ;
57637: LD_ADDR_VAR 0 3
57641: PUSH
57642: LD_VAR 0 1
57646: PPUSH
57647: LD_VAR 0 5
57651: PPUSH
57652: CALL_OW 77
57656: ST_TO_ADDR
// end ;
57657: LD_VAR 0 3
57661: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
57662: LD_INT 0
57664: PPUSH
57665: PPUSH
// task := GetTaskList ( mech ) ;
57666: LD_ADDR_VAR 0 4
57670: PUSH
57671: LD_VAR 0 1
57675: PPUSH
57676: CALL_OW 437
57680: ST_TO_ADDR
// if not task then
57681: LD_VAR 0 4
57685: NOT
57686: IFFALSE 57690
// exit ;
57688: GO 57734
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
57690: LD_ADDR_VAR 0 3
57694: PUSH
57695: LD_VAR 0 4
57699: PUSH
57700: LD_INT 1
57702: ARRAY
57703: PUSH
57704: LD_INT 1
57706: ARRAY
57707: PUSH
57708: LD_STRING r
57710: EQUAL
57711: IFFALSE 57733
57713: PUSH
57714: LD_VAR 0 4
57718: PUSH
57719: LD_INT 1
57721: ARRAY
57722: PUSH
57723: LD_INT 4
57725: ARRAY
57726: PUSH
57727: LD_VAR 0 2
57731: EQUAL
57732: AND
57733: ST_TO_ADDR
// end ;
57734: LD_VAR 0 3
57738: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
57739: LD_INT 0
57741: PPUSH
// SetDir ( unit , d ) ;
57742: LD_VAR 0 1
57746: PPUSH
57747: LD_VAR 0 4
57751: PPUSH
57752: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
57756: LD_ADDR_VAR 0 6
57760: PUSH
57761: LD_VAR 0 1
57765: PPUSH
57766: LD_VAR 0 2
57770: PPUSH
57771: LD_VAR 0 3
57775: PPUSH
57776: LD_VAR 0 5
57780: PPUSH
57781: CALL_OW 48
57785: ST_TO_ADDR
// end ;
57786: LD_VAR 0 6
57790: RET
// export function ToNaturalNumber ( number ) ; begin
57791: LD_INT 0
57793: PPUSH
// result := number div 1 ;
57794: LD_ADDR_VAR 0 2
57798: PUSH
57799: LD_VAR 0 1
57803: PUSH
57804: LD_INT 1
57806: DIV
57807: ST_TO_ADDR
// if number < 0 then
57808: LD_VAR 0 1
57812: PUSH
57813: LD_INT 0
57815: LESS
57816: IFFALSE 57826
// result := 0 ;
57818: LD_ADDR_VAR 0 2
57822: PUSH
57823: LD_INT 0
57825: ST_TO_ADDR
// end ;
57826: LD_VAR 0 2
57830: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
57831: LD_INT 0
57833: PPUSH
57834: PPUSH
57835: PPUSH
// if not buildings then
57836: LD_VAR 0 1
57840: NOT
57841: IFFALSE 57845
// exit ;
57843: GO 57960
// tmp := [ ] ;
57845: LD_ADDR_VAR 0 5
57849: PUSH
57850: EMPTY
57851: ST_TO_ADDR
// for b in buildings do
57852: LD_ADDR_VAR 0 4
57856: PUSH
57857: LD_VAR 0 1
57861: PUSH
57862: FOR_IN
57863: IFFALSE 57901
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
57865: LD_ADDR_VAR 0 5
57869: PUSH
57870: LD_VAR 0 5
57874: PPUSH
57875: LD_VAR 0 5
57879: PUSH
57880: LD_INT 1
57882: PLUS
57883: PPUSH
57884: LD_VAR 0 4
57888: PPUSH
57889: CALL_OW 266
57893: PPUSH
57894: CALL_OW 1
57898: ST_TO_ADDR
57899: GO 57862
57901: POP
57902: POP
// if not tmp then
57903: LD_VAR 0 5
57907: NOT
57908: IFFALSE 57912
// exit ;
57910: GO 57960
// if asc then
57912: LD_VAR 0 2
57916: IFFALSE 57940
// result := SortListByListAsc ( buildings , tmp ) else
57918: LD_ADDR_VAR 0 3
57922: PUSH
57923: LD_VAR 0 1
57927: PPUSH
57928: LD_VAR 0 5
57932: PPUSH
57933: CALL_OW 76
57937: ST_TO_ADDR
57938: GO 57960
// result := SortListByListDesc ( buildings , tmp ) ;
57940: LD_ADDR_VAR 0 3
57944: PUSH
57945: LD_VAR 0 1
57949: PPUSH
57950: LD_VAR 0 5
57954: PPUSH
57955: CALL_OW 77
57959: ST_TO_ADDR
// end ;
57960: LD_VAR 0 3
57964: RET
// export function SortByClass ( units , class ) ; var un ; begin
57965: LD_INT 0
57967: PPUSH
57968: PPUSH
// if not units or not class then
57969: LD_VAR 0 1
57973: NOT
57974: IFTRUE 57983
57976: PUSH
57977: LD_VAR 0 2
57981: NOT
57982: OR
57983: IFFALSE 57987
// exit ;
57985: GO 58082
// result := [ ] ;
57987: LD_ADDR_VAR 0 3
57991: PUSH
57992: EMPTY
57993: ST_TO_ADDR
// for un in units do
57994: LD_ADDR_VAR 0 4
57998: PUSH
57999: LD_VAR 0 1
58003: PUSH
58004: FOR_IN
58005: IFFALSE 58080
// if GetClass ( un ) = class then
58007: LD_VAR 0 4
58011: PPUSH
58012: CALL_OW 257
58016: PUSH
58017: LD_VAR 0 2
58021: EQUAL
58022: IFFALSE 58049
// result := Insert ( result , 1 , un ) else
58024: LD_ADDR_VAR 0 3
58028: PUSH
58029: LD_VAR 0 3
58033: PPUSH
58034: LD_INT 1
58036: PPUSH
58037: LD_VAR 0 4
58041: PPUSH
58042: CALL_OW 2
58046: ST_TO_ADDR
58047: GO 58078
// result := Replace ( result , result + 1 , un ) ;
58049: LD_ADDR_VAR 0 3
58053: PUSH
58054: LD_VAR 0 3
58058: PPUSH
58059: LD_VAR 0 3
58063: PUSH
58064: LD_INT 1
58066: PLUS
58067: PPUSH
58068: LD_VAR 0 4
58072: PPUSH
58073: CALL_OW 1
58077: ST_TO_ADDR
58078: GO 58004
58080: POP
58081: POP
// end ;
58082: LD_VAR 0 3
58086: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58087: LD_INT 0
58089: PPUSH
58090: PPUSH
58091: PPUSH
58092: PPUSH
58093: PPUSH
58094: PPUSH
58095: PPUSH
// result := [ ] ;
58096: LD_ADDR_VAR 0 4
58100: PUSH
58101: EMPTY
58102: ST_TO_ADDR
// if x - r < 0 then
58103: LD_VAR 0 1
58107: PUSH
58108: LD_VAR 0 3
58112: MINUS
58113: PUSH
58114: LD_INT 0
58116: LESS
58117: IFFALSE 58129
// min_x := 0 else
58119: LD_ADDR_VAR 0 8
58123: PUSH
58124: LD_INT 0
58126: ST_TO_ADDR
58127: GO 58145
// min_x := x - r ;
58129: LD_ADDR_VAR 0 8
58133: PUSH
58134: LD_VAR 0 1
58138: PUSH
58139: LD_VAR 0 3
58143: MINUS
58144: ST_TO_ADDR
// if y - r < 0 then
58145: LD_VAR 0 2
58149: PUSH
58150: LD_VAR 0 3
58154: MINUS
58155: PUSH
58156: LD_INT 0
58158: LESS
58159: IFFALSE 58171
// min_y := 0 else
58161: LD_ADDR_VAR 0 7
58165: PUSH
58166: LD_INT 0
58168: ST_TO_ADDR
58169: GO 58187
// min_y := y - r ;
58171: LD_ADDR_VAR 0 7
58175: PUSH
58176: LD_VAR 0 2
58180: PUSH
58181: LD_VAR 0 3
58185: MINUS
58186: ST_TO_ADDR
// max_x := x + r ;
58187: LD_ADDR_VAR 0 9
58191: PUSH
58192: LD_VAR 0 1
58196: PUSH
58197: LD_VAR 0 3
58201: PLUS
58202: ST_TO_ADDR
// max_y := y + r ;
58203: LD_ADDR_VAR 0 10
58207: PUSH
58208: LD_VAR 0 2
58212: PUSH
58213: LD_VAR 0 3
58217: PLUS
58218: ST_TO_ADDR
// for _x = min_x to max_x do
58219: LD_ADDR_VAR 0 5
58223: PUSH
58224: DOUBLE
58225: LD_VAR 0 8
58229: DEC
58230: ST_TO_ADDR
58231: LD_VAR 0 9
58235: PUSH
58236: FOR_TO
58237: IFFALSE 58338
// for _y = min_y to max_y do
58239: LD_ADDR_VAR 0 6
58243: PUSH
58244: DOUBLE
58245: LD_VAR 0 7
58249: DEC
58250: ST_TO_ADDR
58251: LD_VAR 0 10
58255: PUSH
58256: FOR_TO
58257: IFFALSE 58334
// begin if not ValidHex ( _x , _y ) then
58259: LD_VAR 0 5
58263: PPUSH
58264: LD_VAR 0 6
58268: PPUSH
58269: CALL_OW 488
58273: NOT
58274: IFFALSE 58278
// continue ;
58276: GO 58256
// if GetResourceTypeXY ( _x , _y ) then
58278: LD_VAR 0 5
58282: PPUSH
58283: LD_VAR 0 6
58287: PPUSH
58288: CALL_OW 283
58292: IFFALSE 58332
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58294: LD_ADDR_VAR 0 4
58298: PUSH
58299: LD_VAR 0 4
58303: PPUSH
58304: LD_VAR 0 4
58308: PUSH
58309: LD_INT 1
58311: PLUS
58312: PPUSH
58313: LD_VAR 0 5
58317: PUSH
58318: LD_VAR 0 6
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PPUSH
58327: CALL_OW 1
58331: ST_TO_ADDR
// end ;
58332: GO 58256
58334: POP
58335: POP
58336: GO 58236
58338: POP
58339: POP
// end ;
58340: LD_VAR 0 4
58344: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
58345: LD_INT 0
58347: PPUSH
58348: PPUSH
58349: PPUSH
58350: PPUSH
58351: PPUSH
58352: PPUSH
58353: PPUSH
58354: PPUSH
// if not units then
58355: LD_VAR 0 1
58359: NOT
58360: IFFALSE 58364
// exit ;
58362: GO 58896
// result := UnitFilter ( units , [ f_ok ] ) ;
58364: LD_ADDR_VAR 0 3
58368: PUSH
58369: LD_VAR 0 1
58373: PPUSH
58374: LD_INT 50
58376: PUSH
58377: EMPTY
58378: LIST
58379: PPUSH
58380: CALL_OW 72
58384: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
58385: LD_ADDR_VAR 0 8
58389: PUSH
58390: LD_VAR 0 1
58394: PUSH
58395: LD_INT 1
58397: ARRAY
58398: PPUSH
58399: CALL_OW 255
58403: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
58404: LD_ADDR_VAR 0 10
58408: PUSH
58409: LD_INT 29
58411: PUSH
58412: LD_INT 91
58414: PUSH
58415: LD_INT 49
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: LIST
58422: ST_TO_ADDR
// if not result then
58423: LD_VAR 0 3
58427: NOT
58428: IFFALSE 58432
// exit ;
58430: GO 58896
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58432: LD_ADDR_VAR 0 5
58436: PUSH
58437: LD_INT 81
58439: PUSH
58440: LD_VAR 0 8
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PPUSH
58449: CALL_OW 69
58453: ST_TO_ADDR
// for i in result do
58454: LD_ADDR_VAR 0 4
58458: PUSH
58459: LD_VAR 0 3
58463: PUSH
58464: FOR_IN
58465: IFFALSE 58894
// begin tag := GetTag ( i ) + 1 ;
58467: LD_ADDR_VAR 0 9
58471: PUSH
58472: LD_VAR 0 4
58476: PPUSH
58477: CALL_OW 110
58481: PUSH
58482: LD_INT 1
58484: PLUS
58485: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
58486: LD_ADDR_VAR 0 7
58490: PUSH
58491: LD_VAR 0 4
58495: PPUSH
58496: CALL_OW 250
58500: PPUSH
58501: LD_VAR 0 4
58505: PPUSH
58506: CALL_OW 251
58510: PPUSH
58511: LD_INT 4
58513: PPUSH
58514: CALL 58087 0 3
58518: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
58519: LD_VAR 0 4
58523: PPUSH
58524: CALL_OW 247
58528: PUSH
58529: LD_INT 2
58531: EQUAL
58532: IFFALSE 58544
58534: PUSH
58535: LD_VAR 0 7
58539: PUSH
58540: LD_INT 2
58542: GREATER
58543: AND
58544: IFFALSE 58564
58546: PUSH
58547: LD_VAR 0 4
58551: PPUSH
58552: CALL_OW 264
58556: PUSH
58557: LD_VAR 0 10
58561: IN
58562: NOT
58563: AND
58564: IFFALSE 58603
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58566: LD_VAR 0 4
58570: PPUSH
58571: LD_VAR 0 7
58575: PUSH
58576: LD_INT 1
58578: ARRAY
58579: PUSH
58580: LD_INT 1
58582: ARRAY
58583: PPUSH
58584: LD_VAR 0 7
58588: PUSH
58589: LD_INT 1
58591: ARRAY
58592: PUSH
58593: LD_INT 2
58595: ARRAY
58596: PPUSH
58597: CALL_OW 116
58601: GO 58892
// if path > tag then
58603: LD_VAR 0 2
58607: PUSH
58608: LD_VAR 0 9
58612: GREATER
58613: IFFALSE 58821
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
58615: LD_ADDR_VAR 0 6
58619: PUSH
58620: LD_VAR 0 5
58624: PPUSH
58625: LD_INT 91
58627: PUSH
58628: LD_VAR 0 4
58632: PUSH
58633: LD_INT 8
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: LIST
58640: PPUSH
58641: CALL_OW 72
58645: ST_TO_ADDR
// if nearEnemy then
58646: LD_VAR 0 6
58650: IFFALSE 58719
// begin if GetWeapon ( i ) = ru_time_lapser then
58652: LD_VAR 0 4
58656: PPUSH
58657: CALL_OW 264
58661: PUSH
58662: LD_INT 49
58664: EQUAL
58665: IFFALSE 58693
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58667: LD_VAR 0 4
58671: PPUSH
58672: LD_VAR 0 6
58676: PPUSH
58677: LD_VAR 0 4
58681: PPUSH
58682: CALL_OW 74
58686: PPUSH
58687: CALL_OW 112
58691: GO 58717
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
58693: LD_VAR 0 4
58697: PPUSH
58698: LD_VAR 0 6
58702: PPUSH
58703: LD_VAR 0 4
58707: PPUSH
58708: CALL_OW 74
58712: PPUSH
58713: CALL 59977 0 2
// end else
58717: GO 58819
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
58719: LD_VAR 0 4
58723: PPUSH
58724: LD_VAR 0 2
58728: PUSH
58729: LD_VAR 0 9
58733: ARRAY
58734: PUSH
58735: LD_INT 1
58737: ARRAY
58738: PPUSH
58739: LD_VAR 0 2
58743: PUSH
58744: LD_VAR 0 9
58748: ARRAY
58749: PUSH
58750: LD_INT 2
58752: ARRAY
58753: PPUSH
58754: CALL_OW 297
58758: PUSH
58759: LD_INT 6
58761: GREATER
58762: IFFALSE 58805
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
58764: LD_VAR 0 4
58768: PPUSH
58769: LD_VAR 0 2
58773: PUSH
58774: LD_VAR 0 9
58778: ARRAY
58779: PUSH
58780: LD_INT 1
58782: ARRAY
58783: PPUSH
58784: LD_VAR 0 2
58788: PUSH
58789: LD_VAR 0 9
58793: ARRAY
58794: PUSH
58795: LD_INT 2
58797: ARRAY
58798: PPUSH
58799: CALL_OW 114
58803: GO 58819
// SetTag ( i , tag ) ;
58805: LD_VAR 0 4
58809: PPUSH
58810: LD_VAR 0 9
58814: PPUSH
58815: CALL_OW 109
// end else
58819: GO 58892
// if enemy then
58821: LD_VAR 0 5
58825: IFFALSE 58892
// begin if GetWeapon ( i ) = ru_time_lapser then
58827: LD_VAR 0 4
58831: PPUSH
58832: CALL_OW 264
58836: PUSH
58837: LD_INT 49
58839: EQUAL
58840: IFFALSE 58868
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
58842: LD_VAR 0 4
58846: PPUSH
58847: LD_VAR 0 5
58851: PPUSH
58852: LD_VAR 0 4
58856: PPUSH
58857: CALL_OW 74
58861: PPUSH
58862: CALL_OW 112
58866: GO 58892
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
58868: LD_VAR 0 4
58872: PPUSH
58873: LD_VAR 0 5
58877: PPUSH
58878: LD_VAR 0 4
58882: PPUSH
58883: CALL_OW 74
58887: PPUSH
58888: CALL 59977 0 2
// end ; end ;
58892: GO 58464
58894: POP
58895: POP
// end ;
58896: LD_VAR 0 3
58900: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
58901: LD_INT 0
58903: PPUSH
58904: PPUSH
58905: PPUSH
// if not unit or IsInUnit ( unit ) then
58906: LD_VAR 0 1
58910: NOT
58911: IFTRUE 58924
58913: PUSH
58914: LD_VAR 0 1
58918: PPUSH
58919: CALL_OW 310
58923: OR
58924: IFFALSE 58928
// exit ;
58926: GO 59019
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
58928: LD_ADDR_VAR 0 4
58932: PUSH
58933: LD_VAR 0 1
58937: PPUSH
58938: CALL_OW 250
58942: PPUSH
58943: LD_VAR 0 2
58947: PPUSH
58948: LD_INT 1
58950: PPUSH
58951: CALL_OW 272
58955: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
58956: LD_ADDR_VAR 0 5
58960: PUSH
58961: LD_VAR 0 1
58965: PPUSH
58966: CALL_OW 251
58970: PPUSH
58971: LD_VAR 0 2
58975: PPUSH
58976: LD_INT 1
58978: PPUSH
58979: CALL_OW 273
58983: ST_TO_ADDR
// if ValidHex ( x , y ) then
58984: LD_VAR 0 4
58988: PPUSH
58989: LD_VAR 0 5
58993: PPUSH
58994: CALL_OW 488
58998: IFFALSE 59019
// ComTurnXY ( unit , x , y ) ;
59000: LD_VAR 0 1
59004: PPUSH
59005: LD_VAR 0 4
59009: PPUSH
59010: LD_VAR 0 5
59014: PPUSH
59015: CALL_OW 118
// end ;
59019: LD_VAR 0 3
59023: RET
// export function SeeUnits ( side , units ) ; var i ; begin
59024: LD_INT 0
59026: PPUSH
59027: PPUSH
// result := false ;
59028: LD_ADDR_VAR 0 3
59032: PUSH
59033: LD_INT 0
59035: ST_TO_ADDR
// if not units then
59036: LD_VAR 0 2
59040: NOT
59041: IFFALSE 59045
// exit ;
59043: GO 59090
// for i in units do
59045: LD_ADDR_VAR 0 4
59049: PUSH
59050: LD_VAR 0 2
59054: PUSH
59055: FOR_IN
59056: IFFALSE 59088
// if See ( side , i ) then
59058: LD_VAR 0 1
59062: PPUSH
59063: LD_VAR 0 4
59067: PPUSH
59068: CALL_OW 292
59072: IFFALSE 59086
// begin result := true ;
59074: LD_ADDR_VAR 0 3
59078: PUSH
59079: LD_INT 1
59081: ST_TO_ADDR
// exit ;
59082: POP
59083: POP
59084: GO 59090
// end ;
59086: GO 59055
59088: POP
59089: POP
// end ;
59090: LD_VAR 0 3
59094: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59095: LD_INT 0
59097: PPUSH
59098: PPUSH
59099: PPUSH
59100: PPUSH
// if not unit or not points then
59101: LD_VAR 0 1
59105: NOT
59106: IFTRUE 59115
59108: PUSH
59109: LD_VAR 0 2
59113: NOT
59114: OR
59115: IFFALSE 59119
// exit ;
59117: GO 59209
// dist := 99999 ;
59119: LD_ADDR_VAR 0 5
59123: PUSH
59124: LD_INT 99999
59126: ST_TO_ADDR
// for i in points do
59127: LD_ADDR_VAR 0 4
59131: PUSH
59132: LD_VAR 0 2
59136: PUSH
59137: FOR_IN
59138: IFFALSE 59207
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59140: LD_ADDR_VAR 0 6
59144: PUSH
59145: LD_VAR 0 1
59149: PPUSH
59150: LD_VAR 0 4
59154: PUSH
59155: LD_INT 1
59157: ARRAY
59158: PPUSH
59159: LD_VAR 0 4
59163: PUSH
59164: LD_INT 2
59166: ARRAY
59167: PPUSH
59168: CALL_OW 297
59172: ST_TO_ADDR
// if tmpDist < dist then
59173: LD_VAR 0 6
59177: PUSH
59178: LD_VAR 0 5
59182: LESS
59183: IFFALSE 59205
// begin result := i ;
59185: LD_ADDR_VAR 0 3
59189: PUSH
59190: LD_VAR 0 4
59194: ST_TO_ADDR
// dist := tmpDist ;
59195: LD_ADDR_VAR 0 5
59199: PUSH
59200: LD_VAR 0 6
59204: ST_TO_ADDR
// end ; end ;
59205: GO 59137
59207: POP
59208: POP
// end ;
59209: LD_VAR 0 3
59213: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
59214: LD_INT 0
59216: PPUSH
// uc_side := side ;
59217: LD_ADDR_OWVAR 20
59221: PUSH
59222: LD_VAR 0 1
59226: ST_TO_ADDR
// uc_nation := 3 ;
59227: LD_ADDR_OWVAR 21
59231: PUSH
59232: LD_INT 3
59234: ST_TO_ADDR
// vc_chassis := 25 ;
59235: LD_ADDR_OWVAR 37
59239: PUSH
59240: LD_INT 25
59242: ST_TO_ADDR
// vc_engine := engine_siberite ;
59243: LD_ADDR_OWVAR 39
59247: PUSH
59248: LD_INT 3
59250: ST_TO_ADDR
// vc_control := control_computer ;
59251: LD_ADDR_OWVAR 38
59255: PUSH
59256: LD_INT 3
59258: ST_TO_ADDR
// vc_weapon := 59 ;
59259: LD_ADDR_OWVAR 40
59263: PUSH
59264: LD_INT 59
59266: ST_TO_ADDR
// result := CreateVehicle ;
59267: LD_ADDR_VAR 0 5
59271: PUSH
59272: CALL_OW 45
59276: ST_TO_ADDR
// SetDir ( result , d ) ;
59277: LD_VAR 0 5
59281: PPUSH
59282: LD_VAR 0 4
59286: PPUSH
59287: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
59291: LD_VAR 0 5
59295: PPUSH
59296: LD_VAR 0 2
59300: PPUSH
59301: LD_VAR 0 3
59305: PPUSH
59306: LD_INT 0
59308: PPUSH
59309: CALL_OW 48
// end ;
59313: LD_VAR 0 5
59317: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
59318: LD_INT 0
59320: PPUSH
59321: PPUSH
59322: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
59323: LD_ADDR_VAR 0 2
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
59346: LD_VAR 0 1
59350: NOT
59351: IFTRUE 59384
59353: PUSH
59354: LD_VAR 0 1
59358: PPUSH
59359: CALL_OW 264
59363: PUSH
59364: LD_INT 12
59366: PUSH
59367: LD_INT 51
59369: PUSH
59370: LD_INT 32
59372: PUSH
59373: LD_INT 89
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: IN
59382: NOT
59383: OR
59384: IFFALSE 59388
// exit ;
59386: GO 59486
// for i := 1 to 3 do
59388: LD_ADDR_VAR 0 3
59392: PUSH
59393: DOUBLE
59394: LD_INT 1
59396: DEC
59397: ST_TO_ADDR
59398: LD_INT 3
59400: PUSH
59401: FOR_TO
59402: IFFALSE 59484
// begin tmp := GetCargo ( cargo , i ) ;
59404: LD_ADDR_VAR 0 4
59408: PUSH
59409: LD_VAR 0 1
59413: PPUSH
59414: LD_VAR 0 3
59418: PPUSH
59419: CALL_OW 289
59423: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
59424: LD_ADDR_VAR 0 2
59428: PUSH
59429: LD_VAR 0 2
59433: PPUSH
59434: LD_VAR 0 3
59438: PPUSH
59439: LD_VAR 0 4
59443: PPUSH
59444: CALL_OW 1
59448: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
59449: LD_ADDR_VAR 0 2
59453: PUSH
59454: LD_VAR 0 2
59458: PPUSH
59459: LD_INT 4
59461: PPUSH
59462: LD_VAR 0 2
59466: PUSH
59467: LD_INT 4
59469: ARRAY
59470: PUSH
59471: LD_VAR 0 4
59475: PLUS
59476: PPUSH
59477: CALL_OW 1
59481: ST_TO_ADDR
// end ;
59482: GO 59401
59484: POP
59485: POP
// end ;
59486: LD_VAR 0 2
59490: RET
// export function Length ( array ) ; begin
59491: LD_INT 0
59493: PPUSH
// result := array + 0 ;
59494: LD_ADDR_VAR 0 2
59498: PUSH
59499: LD_VAR 0 1
59503: PUSH
59504: LD_INT 0
59506: PLUS
59507: ST_TO_ADDR
// end ;
59508: LD_VAR 0 2
59512: RET
// export function PrepareArray ( array ) ; begin
59513: LD_INT 0
59515: PPUSH
// result := array diff 0 ;
59516: LD_ADDR_VAR 0 2
59520: PUSH
59521: LD_VAR 0 1
59525: PUSH
59526: LD_INT 0
59528: DIFF
59529: ST_TO_ADDR
// if not result [ 1 ] then
59530: LD_VAR 0 2
59534: PUSH
59535: LD_INT 1
59537: ARRAY
59538: NOT
59539: IFFALSE 59559
// result := Delete ( result , 1 ) ;
59541: LD_ADDR_VAR 0 2
59545: PUSH
59546: LD_VAR 0 2
59550: PPUSH
59551: LD_INT 1
59553: PPUSH
59554: CALL_OW 3
59558: ST_TO_ADDR
// end ;
59559: LD_VAR 0 2
59563: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
59564: LD_INT 0
59566: PPUSH
59567: PPUSH
59568: PPUSH
59569: PPUSH
// sibRocketRange := 25 ;
59570: LD_ADDR_VAR 0 6
59574: PUSH
59575: LD_INT 25
59577: ST_TO_ADDR
// result := false ;
59578: LD_ADDR_VAR 0 4
59582: PUSH
59583: LD_INT 0
59585: ST_TO_ADDR
// for i := 0 to 5 do
59586: LD_ADDR_VAR 0 5
59590: PUSH
59591: DOUBLE
59592: LD_INT 0
59594: DEC
59595: ST_TO_ADDR
59596: LD_INT 5
59598: PUSH
59599: FOR_TO
59600: IFFALSE 59667
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
59602: LD_VAR 0 1
59606: PPUSH
59607: LD_VAR 0 5
59611: PPUSH
59612: LD_VAR 0 6
59616: PPUSH
59617: CALL_OW 272
59621: PPUSH
59622: LD_VAR 0 2
59626: PPUSH
59627: LD_VAR 0 5
59631: PPUSH
59632: LD_VAR 0 6
59636: PPUSH
59637: CALL_OW 273
59641: PPUSH
59642: LD_VAR 0 3
59646: PPUSH
59647: CALL_OW 309
59651: IFFALSE 59665
// begin result := true ;
59653: LD_ADDR_VAR 0 4
59657: PUSH
59658: LD_INT 1
59660: ST_TO_ADDR
// exit ;
59661: POP
59662: POP
59663: GO 59669
// end ;
59665: GO 59599
59667: POP
59668: POP
// end ;
59669: LD_VAR 0 4
59673: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
59674: LD_INT 0
59676: PPUSH
59677: PPUSH
59678: PPUSH
// if btype = b_depot then
59679: LD_VAR 0 2
59683: PUSH
59684: LD_INT 0
59686: EQUAL
59687: IFFALSE 59699
// begin result := true ;
59689: LD_ADDR_VAR 0 3
59693: PUSH
59694: LD_INT 1
59696: ST_TO_ADDR
// exit ;
59697: GO 59819
// end ; pom := GetBase ( depot ) ;
59699: LD_ADDR_VAR 0 4
59703: PUSH
59704: LD_VAR 0 1
59708: PPUSH
59709: CALL_OW 274
59713: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59714: LD_ADDR_VAR 0 5
59718: PUSH
59719: LD_VAR 0 2
59723: PPUSH
59724: LD_VAR 0 1
59728: PPUSH
59729: CALL_OW 248
59733: PPUSH
59734: CALL_OW 450
59738: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
59739: LD_ADDR_VAR 0 3
59743: PUSH
59744: LD_VAR 0 4
59748: PPUSH
59749: LD_INT 1
59751: PPUSH
59752: CALL_OW 275
59756: PUSH
59757: LD_VAR 0 5
59761: PUSH
59762: LD_INT 1
59764: ARRAY
59765: GREATEREQUAL
59766: IFFALSE 59792
59768: PUSH
59769: LD_VAR 0 4
59773: PPUSH
59774: LD_INT 2
59776: PPUSH
59777: CALL_OW 275
59781: PUSH
59782: LD_VAR 0 5
59786: PUSH
59787: LD_INT 2
59789: ARRAY
59790: GREATEREQUAL
59791: AND
59792: IFFALSE 59818
59794: PUSH
59795: LD_VAR 0 4
59799: PPUSH
59800: LD_INT 3
59802: PPUSH
59803: CALL_OW 275
59807: PUSH
59808: LD_VAR 0 5
59812: PUSH
59813: LD_INT 3
59815: ARRAY
59816: GREATEREQUAL
59817: AND
59818: ST_TO_ADDR
// end ;
59819: LD_VAR 0 3
59823: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
59824: LD_INT 0
59826: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
59827: LD_VAR 0 1
59831: PPUSH
59832: LD_VAR 0 2
59836: PPUSH
59837: LD_INT 0
59839: PPUSH
59840: LD_INT 0
59842: PPUSH
59843: LD_INT 1
59845: PPUSH
59846: LD_INT 0
59848: PPUSH
59849: CALL_OW 587
// end ;
59853: LD_VAR 0 3
59857: RET
// export function CenterOnNow ( unit ) ; begin
59858: LD_INT 0
59860: PPUSH
// result := IsInUnit ( unit ) ;
59861: LD_ADDR_VAR 0 2
59865: PUSH
59866: LD_VAR 0 1
59870: PPUSH
59871: CALL_OW 310
59875: ST_TO_ADDR
// if not result then
59876: LD_VAR 0 2
59880: NOT
59881: IFFALSE 59893
// result := unit ;
59883: LD_ADDR_VAR 0 2
59887: PUSH
59888: LD_VAR 0 1
59892: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
59893: LD_VAR 0 1
59897: PPUSH
59898: CALL_OW 87
// end ;
59902: LD_VAR 0 2
59906: RET
// export function ComMoveHex ( unit , hex ) ; begin
59907: LD_INT 0
59909: PPUSH
// if not hex then
59910: LD_VAR 0 2
59914: NOT
59915: IFFALSE 59919
// exit ;
59917: GO 59972
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
59919: LD_VAR 0 2
59923: PUSH
59924: LD_INT 1
59926: ARRAY
59927: PPUSH
59928: LD_VAR 0 2
59932: PUSH
59933: LD_INT 2
59935: ARRAY
59936: PPUSH
59937: CALL_OW 428
59941: IFFALSE 59945
// exit ;
59943: GO 59972
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
59945: LD_VAR 0 1
59949: PPUSH
59950: LD_VAR 0 2
59954: PUSH
59955: LD_INT 1
59957: ARRAY
59958: PPUSH
59959: LD_VAR 0 2
59963: PUSH
59964: LD_INT 2
59966: ARRAY
59967: PPUSH
59968: CALL_OW 111
// end ;
59972: LD_VAR 0 3
59976: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
59977: LD_INT 0
59979: PPUSH
59980: PPUSH
59981: PPUSH
// if not unit or not enemy then
59982: LD_VAR 0 1
59986: NOT
59987: IFTRUE 59996
59989: PUSH
59990: LD_VAR 0 2
59994: NOT
59995: OR
59996: IFFALSE 60000
// exit ;
59998: GO 60126
// x := GetX ( enemy ) ;
60000: LD_ADDR_VAR 0 4
60004: PUSH
60005: LD_VAR 0 2
60009: PPUSH
60010: CALL_OW 250
60014: ST_TO_ADDR
// y := GetY ( enemy ) ;
60015: LD_ADDR_VAR 0 5
60019: PUSH
60020: LD_VAR 0 2
60024: PPUSH
60025: CALL_OW 251
60029: ST_TO_ADDR
// if ValidHex ( x , y ) then
60030: LD_VAR 0 4
60034: PPUSH
60035: LD_VAR 0 5
60039: PPUSH
60040: CALL_OW 488
60044: IFFALSE 60126
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
60046: LD_VAR 0 2
60050: PPUSH
60051: CALL_OW 247
60055: PUSH
60056: LD_INT 3
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: IN
60066: IFTRUE 60089
60068: PUSH
60069: LD_VAR 0 1
60073: PPUSH
60074: CALL_OW 255
60078: PPUSH
60079: LD_VAR 0 2
60083: PPUSH
60084: CALL_OW 292
60088: OR
60089: IFFALSE 60107
// ComAttackUnit ( unit , enemy ) else
60091: LD_VAR 0 1
60095: PPUSH
60096: LD_VAR 0 2
60100: PPUSH
60101: CALL_OW 115
60105: GO 60126
// ComAgressiveMove ( unit , x , y ) ;
60107: LD_VAR 0 1
60111: PPUSH
60112: LD_VAR 0 4
60116: PPUSH
60117: LD_VAR 0 5
60121: PPUSH
60122: CALL_OW 114
// end ;
60126: LD_VAR 0 3
60130: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
60131: LD_INT 0
60133: PPUSH
60134: PPUSH
60135: PPUSH
// list := AreaToList ( area , 0 ) ;
60136: LD_ADDR_VAR 0 5
60140: PUSH
60141: LD_VAR 0 1
60145: PPUSH
60146: LD_INT 0
60148: PPUSH
60149: CALL_OW 517
60153: ST_TO_ADDR
// if not list then
60154: LD_VAR 0 5
60158: NOT
60159: IFFALSE 60163
// exit ;
60161: GO 60293
// if all then
60163: LD_VAR 0 2
60167: IFFALSE 60255
// begin for i := 1 to list [ 1 ] do
60169: LD_ADDR_VAR 0 4
60173: PUSH
60174: DOUBLE
60175: LD_INT 1
60177: DEC
60178: ST_TO_ADDR
60179: LD_VAR 0 5
60183: PUSH
60184: LD_INT 1
60186: ARRAY
60187: PUSH
60188: FOR_TO
60189: IFFALSE 60251
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
60191: LD_ADDR_VAR 0 3
60195: PUSH
60196: LD_VAR 0 3
60200: PPUSH
60201: LD_VAR 0 3
60205: PUSH
60206: LD_INT 1
60208: PLUS
60209: PPUSH
60210: LD_VAR 0 5
60214: PUSH
60215: LD_INT 1
60217: ARRAY
60218: PUSH
60219: LD_VAR 0 4
60223: ARRAY
60224: PUSH
60225: LD_VAR 0 5
60229: PUSH
60230: LD_INT 2
60232: ARRAY
60233: PUSH
60234: LD_VAR 0 4
60238: ARRAY
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PPUSH
60244: CALL_OW 1
60248: ST_TO_ADDR
60249: GO 60188
60251: POP
60252: POP
// exit ;
60253: GO 60293
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
60255: LD_ADDR_VAR 0 3
60259: PUSH
60260: LD_VAR 0 5
60264: PUSH
60265: LD_INT 1
60267: ARRAY
60268: PUSH
60269: LD_INT 1
60271: ARRAY
60272: PUSH
60273: LD_VAR 0 5
60277: PUSH
60278: LD_INT 2
60280: ARRAY
60281: PUSH
60282: LD_INT 1
60284: ARRAY
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: EMPTY
60291: LIST
60292: ST_TO_ADDR
// end ;
60293: LD_VAR 0 3
60297: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
60298: LD_INT 0
60300: PPUSH
60301: PPUSH
// list := AreaToList ( area , 0 ) ;
60302: LD_ADDR_VAR 0 4
60306: PUSH
60307: LD_VAR 0 1
60311: PPUSH
60312: LD_INT 0
60314: PPUSH
60315: CALL_OW 517
60319: ST_TO_ADDR
// if not list then
60320: LD_VAR 0 4
60324: NOT
60325: IFFALSE 60329
// exit ;
60327: GO 60370
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
60329: LD_ADDR_VAR 0 3
60333: PUSH
60334: LD_VAR 0 4
60338: PUSH
60339: LD_INT 1
60341: ARRAY
60342: PUSH
60343: LD_INT 1
60345: ARRAY
60346: PUSH
60347: LD_VAR 0 4
60351: PUSH
60352: LD_INT 2
60354: ARRAY
60355: PUSH
60356: LD_INT 1
60358: ARRAY
60359: PUSH
60360: LD_VAR 0 2
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: LIST
60369: ST_TO_ADDR
// end ;
60370: LD_VAR 0 3
60374: RET
// export function First ( array ) ; begin
60375: LD_INT 0
60377: PPUSH
// if not array then
60378: LD_VAR 0 1
60382: NOT
60383: IFFALSE 60387
// exit ;
60385: GO 60401
// result := array [ 1 ] ;
60387: LD_ADDR_VAR 0 2
60391: PUSH
60392: LD_VAR 0 1
60396: PUSH
60397: LD_INT 1
60399: ARRAY
60400: ST_TO_ADDR
// end ;
60401: LD_VAR 0 2
60405: RET
// export function Last ( array ) ; begin
60406: LD_INT 0
60408: PPUSH
// if not array then
60409: LD_VAR 0 1
60413: NOT
60414: IFFALSE 60418
// exit ;
60416: GO 60434
// result := array [ array ] ;
60418: LD_ADDR_VAR 0 2
60422: PUSH
60423: LD_VAR 0 1
60427: PUSH
60428: LD_VAR 0 1
60432: ARRAY
60433: ST_TO_ADDR
// end ;
60434: LD_VAR 0 2
60438: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
60439: LD_INT 0
60441: PPUSH
60442: PPUSH
// result := [ ] ;
60443: LD_ADDR_VAR 0 5
60447: PUSH
60448: EMPTY
60449: ST_TO_ADDR
// if not array then
60450: LD_VAR 0 1
60454: NOT
60455: IFFALSE 60459
// exit ;
60457: GO 60571
// for i := 1 to array do
60459: LD_ADDR_VAR 0 6
60463: PUSH
60464: DOUBLE
60465: LD_INT 1
60467: DEC
60468: ST_TO_ADDR
60469: LD_VAR 0 1
60473: PUSH
60474: FOR_TO
60475: IFFALSE 60569
// if array [ i ] [ index ] = value then
60477: LD_VAR 0 1
60481: PUSH
60482: LD_VAR 0 6
60486: ARRAY
60487: PUSH
60488: LD_VAR 0 2
60492: ARRAY
60493: PUSH
60494: LD_VAR 0 3
60498: EQUAL
60499: IFFALSE 60567
// begin if indexColumn then
60501: LD_VAR 0 4
60505: IFFALSE 60541
// result := Join ( result , array [ i ] [ indexColumn ] ) else
60507: LD_ADDR_VAR 0 5
60511: PUSH
60512: LD_VAR 0 5
60516: PPUSH
60517: LD_VAR 0 1
60521: PUSH
60522: LD_VAR 0 6
60526: ARRAY
60527: PUSH
60528: LD_VAR 0 4
60532: ARRAY
60533: PPUSH
60534: CALL 55579 0 2
60538: ST_TO_ADDR
60539: GO 60567
// result := Join ( result , array [ i ] ) ;
60541: LD_ADDR_VAR 0 5
60545: PUSH
60546: LD_VAR 0 5
60550: PPUSH
60551: LD_VAR 0 1
60555: PUSH
60556: LD_VAR 0 6
60560: ARRAY
60561: PPUSH
60562: CALL 55579 0 2
60566: ST_TO_ADDR
// end ;
60567: GO 60474
60569: POP
60570: POP
// end ;
60571: LD_VAR 0 5
60575: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
60576: LD_INT 0
60578: PPUSH
// if not vehicles or not parkingPoint then
60579: LD_VAR 0 1
60583: NOT
60584: IFTRUE 60593
60586: PUSH
60587: LD_VAR 0 2
60591: NOT
60592: OR
60593: IFFALSE 60597
// exit ;
60595: GO 60695
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
60597: LD_ADDR_VAR 0 1
60601: PUSH
60602: LD_VAR 0 1
60606: PPUSH
60607: LD_INT 50
60609: PUSH
60610: EMPTY
60611: LIST
60612: PUSH
60613: LD_INT 3
60615: PUSH
60616: LD_INT 92
60618: PUSH
60619: LD_VAR 0 2
60623: PUSH
60624: LD_INT 1
60626: ARRAY
60627: PUSH
60628: LD_VAR 0 2
60632: PUSH
60633: LD_INT 2
60635: ARRAY
60636: PUSH
60637: LD_INT 8
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PPUSH
60654: CALL_OW 72
60658: ST_TO_ADDR
// if not vehicles then
60659: LD_VAR 0 1
60663: NOT
60664: IFFALSE 60668
// exit ;
60666: GO 60695
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
60668: LD_VAR 0 1
60672: PPUSH
60673: LD_VAR 0 2
60677: PUSH
60678: LD_INT 1
60680: ARRAY
60681: PPUSH
60682: LD_VAR 0 2
60686: PUSH
60687: LD_INT 2
60689: ARRAY
60690: PPUSH
60691: CALL_OW 111
// end ;
60695: LD_VAR 0 3
60699: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
60700: LD_INT 0
60702: PPUSH
60703: PPUSH
60704: PPUSH
// if not side or not area then
60705: LD_VAR 0 1
60709: NOT
60710: IFTRUE 60719
60712: PUSH
60713: LD_VAR 0 2
60717: NOT
60718: OR
60719: IFFALSE 60723
// exit ;
60721: GO 60842
// tmp := AreaToList ( area , 0 ) ;
60723: LD_ADDR_VAR 0 5
60727: PUSH
60728: LD_VAR 0 2
60732: PPUSH
60733: LD_INT 0
60735: PPUSH
60736: CALL_OW 517
60740: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60741: LD_ADDR_VAR 0 4
60745: PUSH
60746: DOUBLE
60747: LD_INT 1
60749: DEC
60750: ST_TO_ADDR
60751: LD_VAR 0 5
60755: PUSH
60756: LD_INT 1
60758: ARRAY
60759: PUSH
60760: FOR_TO
60761: IFFALSE 60840
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
60763: LD_VAR 0 5
60767: PUSH
60768: LD_INT 1
60770: ARRAY
60771: PUSH
60772: LD_VAR 0 4
60776: ARRAY
60777: PPUSH
60778: LD_VAR 0 5
60782: PUSH
60783: LD_INT 2
60785: ARRAY
60786: PUSH
60787: LD_VAR 0 4
60791: ARRAY
60792: PPUSH
60793: CALL_OW 351
60797: IFFALSE 60838
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
60799: LD_VAR 0 5
60803: PUSH
60804: LD_INT 1
60806: ARRAY
60807: PUSH
60808: LD_VAR 0 4
60812: ARRAY
60813: PPUSH
60814: LD_VAR 0 5
60818: PUSH
60819: LD_INT 2
60821: ARRAY
60822: PUSH
60823: LD_VAR 0 4
60827: ARRAY
60828: PPUSH
60829: LD_VAR 0 1
60833: PPUSH
60834: CALL_OW 244
// end ;
60838: GO 60760
60840: POP
60841: POP
// end ;
60842: LD_VAR 0 3
60846: RET
// export function UniqueArray ( array ) ; var i ; begin
60847: LD_INT 0
60849: PPUSH
60850: PPUSH
// result := [ ] ;
60851: LD_ADDR_VAR 0 2
60855: PUSH
60856: EMPTY
60857: ST_TO_ADDR
// if not array then
60858: LD_VAR 0 1
60862: NOT
60863: IFFALSE 60867
// exit ;
60865: GO 60928
// for i := 1 to array do
60867: LD_ADDR_VAR 0 3
60871: PUSH
60872: DOUBLE
60873: LD_INT 1
60875: DEC
60876: ST_TO_ADDR
60877: LD_VAR 0 1
60881: PUSH
60882: FOR_TO
60883: IFFALSE 60926
// if not array [ i ] in result then
60885: LD_VAR 0 1
60889: PUSH
60890: LD_VAR 0 3
60894: ARRAY
60895: PUSH
60896: LD_VAR 0 2
60900: IN
60901: NOT
60902: IFFALSE 60924
// result := Join ( result , i ) ;
60904: LD_ADDR_VAR 0 2
60908: PUSH
60909: LD_VAR 0 2
60913: PPUSH
60914: LD_VAR 0 3
60918: PPUSH
60919: CALL 55579 0 2
60923: ST_TO_ADDR
60924: GO 60882
60926: POP
60927: POP
// end ; end_of_file
60928: LD_VAR 0 2
60932: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60933: PPOPN 6
60935: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60936: LD_EXP 1
60940: PUSH
60941: LD_INT 4
60943: EQUAL
60944: IFFALSE 60980
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60946: LD_STRING setGameDifficulty(
60948: PUSH
60949: LD_OWVAR 67
60953: STR
60954: PUSH
60955: LD_STRING )
60957: STR
60958: PPUSH
60959: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60963: LD_STRING displayDifficulty(
60965: PUSH
60966: LD_OWVAR 67
60970: STR
60971: PUSH
60972: LD_STRING )
60974: STR
60975: PPUSH
60976: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60980: CALL 61009 0 0
// end ; end_of_file
60984: PPOPN 1
60986: END
// every 0 0$1 do
60987: GO 60989
60989: DISABLE
// begin enable ;
60990: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60991: LD_STRING updateTimer(
60993: PUSH
60994: LD_OWVAR 1
60998: STR
60999: PUSH
61000: LD_STRING );
61002: STR
61003: PPUSH
61004: CALL_OW 559
// end ;
61008: END
// export function SOS_MapStart ( ) ; begin
61009: LD_INT 0
61011: PPUSH
// UpdateFactoryWaypoints ( ) ;
61012: CALL 61943 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61016: CALL 62195 0 0
// ParseMultiDataToLua ( ) ;
61020: CALL 62342 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
61024: LD_STRING setSpecLogoNumber(
61026: PUSH
61027: LD_INT 2
61029: STR
61030: PUSH
61031: LD_STRING ,
61033: STR
61034: PUSH
61035: LD_INT 1
61037: STR
61038: PUSH
61039: LD_STRING )
61041: STR
61042: PPUSH
61043: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
61047: LD_STRING setSpecLogoNumber(
61049: PUSH
61050: LD_INT 3
61052: STR
61053: PUSH
61054: LD_STRING ,
61056: STR
61057: PUSH
61058: LD_INT 2
61060: STR
61061: PUSH
61062: LD_STRING )
61064: STR
61065: PPUSH
61066: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
61070: LD_STRING setSpecLogoNumber(
61072: PUSH
61073: LD_INT 4
61075: STR
61076: PUSH
61077: LD_STRING ,
61079: STR
61080: PUSH
61081: LD_INT 3
61083: STR
61084: PUSH
61085: LD_STRING )
61087: STR
61088: PPUSH
61089: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
61093: LD_STRING setSpecLogoNumber(
61095: PUSH
61096: LD_INT 5
61098: STR
61099: PUSH
61100: LD_STRING ,
61102: STR
61103: PUSH
61104: LD_INT 4
61106: STR
61107: PUSH
61108: LD_STRING )
61110: STR
61111: PPUSH
61112: CALL_OW 559
// end ;
61116: LD_VAR 0 1
61120: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
61121: LD_INT 0
61123: PPUSH
61124: PPUSH
61125: PPUSH
61126: PPUSH
61127: PPUSH
61128: PPUSH
61129: PPUSH
61130: PPUSH
61131: PPUSH
// for i := 1 to 8 do
61132: LD_ADDR_VAR 0 2
61136: PUSH
61137: DOUBLE
61138: LD_INT 1
61140: DEC
61141: ST_TO_ADDR
61142: LD_INT 8
61144: PUSH
61145: FOR_TO
61146: IFFALSE 61531
// begin if mpSidePositions [ i ] then
61148: LD_EXP 5
61152: PUSH
61153: LD_VAR 0 2
61157: ARRAY
61158: IFFALSE 61529
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61160: LD_ADDR_VAR 0 7
61164: PUSH
61165: LD_INT 22
61167: PUSH
61168: LD_VAR 0 2
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 21
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PPUSH
61191: CALL_OW 69
61195: PPUSH
61196: CALL 19647 0 1
61200: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61201: LD_ADDR_VAR 0 9
61205: PUSH
61206: LD_INT 22
61208: PUSH
61209: LD_VAR 0 2
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 2
61220: PUSH
61221: LD_INT 30
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 30
61233: PUSH
61234: LD_INT 1
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: LIST
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PPUSH
61250: CALL_OW 69
61254: ST_TO_ADDR
// crates := 0 ;
61255: LD_ADDR_VAR 0 4
61259: PUSH
61260: LD_INT 0
61262: ST_TO_ADDR
// oil := 0 ;
61263: LD_ADDR_VAR 0 5
61267: PUSH
61268: LD_INT 0
61270: ST_TO_ADDR
// sib := 0 ;
61271: LD_ADDR_VAR 0 6
61275: PUSH
61276: LD_INT 0
61278: ST_TO_ADDR
// if bases then
61279: LD_VAR 0 9
61283: IFFALSE 61389
// begin for j in bases do
61285: LD_ADDR_VAR 0 3
61289: PUSH
61290: LD_VAR 0 9
61294: PUSH
61295: FOR_IN
61296: IFFALSE 61387
// begin base := GetBase ( j ) ;
61298: LD_ADDR_VAR 0 8
61302: PUSH
61303: LD_VAR 0 3
61307: PPUSH
61308: CALL_OW 274
61312: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61313: LD_ADDR_VAR 0 4
61317: PUSH
61318: LD_VAR 0 4
61322: PUSH
61323: LD_VAR 0 8
61327: PPUSH
61328: LD_INT 1
61330: PPUSH
61331: CALL_OW 275
61335: PLUS
61336: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61337: LD_ADDR_VAR 0 5
61341: PUSH
61342: LD_VAR 0 5
61346: PUSH
61347: LD_VAR 0 8
61351: PPUSH
61352: LD_INT 2
61354: PPUSH
61355: CALL_OW 275
61359: PLUS
61360: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61361: LD_ADDR_VAR 0 6
61365: PUSH
61366: LD_VAR 0 6
61370: PUSH
61371: LD_VAR 0 8
61375: PPUSH
61376: LD_INT 3
61378: PPUSH
61379: CALL_OW 275
61383: PLUS
61384: ST_TO_ADDR
// end ;
61385: GO 61295
61387: POP
61388: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61389: LD_STRING setSpecText(
61391: PUSH
61392: LD_VAR 0 2
61396: STR
61397: PUSH
61398: LD_STRING ,
61400: STR
61401: PUSH
61402: LD_INT 2
61404: STR
61405: PUSH
61406: LD_STRING ,
61408: STR
61409: PUSH
61410: LD_VAR 0 4
61414: STR
61415: PUSH
61416: LD_STRING )
61418: STR
61419: PPUSH
61420: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61424: LD_STRING setSpecText(
61426: PUSH
61427: LD_VAR 0 2
61431: STR
61432: PUSH
61433: LD_STRING ,
61435: STR
61436: PUSH
61437: LD_INT 3
61439: STR
61440: PUSH
61441: LD_STRING ,
61443: STR
61444: PUSH
61445: LD_VAR 0 5
61449: STR
61450: PUSH
61451: LD_STRING )
61453: STR
61454: PPUSH
61455: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61459: LD_STRING setSpecText(
61461: PUSH
61462: LD_VAR 0 2
61466: STR
61467: PUSH
61468: LD_STRING ,
61470: STR
61471: PUSH
61472: LD_INT 4
61474: STR
61475: PUSH
61476: LD_STRING ,
61478: STR
61479: PUSH
61480: LD_VAR 0 6
61484: STR
61485: PUSH
61486: LD_STRING )
61488: STR
61489: PPUSH
61490: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61494: LD_STRING setSpecText(
61496: PUSH
61497: LD_VAR 0 2
61501: STR
61502: PUSH
61503: LD_STRING ,
61505: STR
61506: PUSH
61507: LD_INT 5
61509: STR
61510: PUSH
61511: LD_STRING ,
61513: STR
61514: PUSH
61515: LD_VAR 0 7
61519: STR
61520: PUSH
61521: LD_STRING )
61523: STR
61524: PPUSH
61525: CALL_OW 559
// end ; end ;
61529: GO 61145
61531: POP
61532: POP
// end ;
61533: LD_VAR 0 1
61537: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61538: LD_INT 2
61540: PUSH
61541: LD_INT 30
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 30
61553: PUSH
61554: LD_INT 1
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: LIST
61565: PPUSH
61566: CALL_OW 69
61570: IFFALSE 61580
61572: GO 61574
61574: DISABLE
// begin enable ;
61575: ENABLE
// UpdateSpectatorBar ;
61576: CALL 61121 0 0
// end ;
61580: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61581: LD_INT 0
61583: PPUSH
// end ;
61584: LD_VAR 0 12
61588: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61589: LD_INT 0
61591: PPUSH
61592: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61593: LD_VAR 0 1
61597: NOT
61598: IFTRUE 61617
61600: PUSH
61601: LD_VAR 0 2
61605: PPUSH
61606: LD_VAR 0 3
61610: PPUSH
61611: CALL_OW 488
61615: NOT
61616: OR
61617: IFTRUE 61652
61619: PUSH
61620: LD_VAR 0 1
61624: PPUSH
61625: CALL_OW 266
61629: PUSH
61630: LD_INT 3
61632: NONEQUAL
61633: IFFALSE 61651
61635: PUSH
61636: LD_VAR 0 1
61640: PPUSH
61641: CALL_OW 247
61645: PUSH
61646: LD_INT 1
61648: EQUAL
61649: NOT
61650: AND
61651: OR
61652: IFFALSE 61656
// exit ;
61654: GO 61938
// if GetType ( factory ) = unit_human then
61656: LD_VAR 0 1
61660: PPUSH
61661: CALL_OW 247
61665: PUSH
61666: LD_INT 1
61668: EQUAL
61669: IFFALSE 61686
// factory := IsInUnit ( factory ) ;
61671: LD_ADDR_VAR 0 1
61675: PUSH
61676: LD_VAR 0 1
61680: PPUSH
61681: CALL_OW 310
61685: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61686: LD_VAR 0 1
61690: PPUSH
61691: CALL_OW 266
61695: PUSH
61696: LD_INT 3
61698: NONEQUAL
61699: IFFALSE 61703
// exit ;
61701: GO 61938
// for i := 1 to Count ( factoryWaypoints ) do
61703: LD_ADDR_VAR 0 5
61707: PUSH
61708: DOUBLE
61709: LD_INT 1
61711: DEC
61712: ST_TO_ADDR
61713: LD_EXP 57
61717: PPUSH
61718: CALL 19647 0 1
61722: PUSH
61723: FOR_TO
61724: IFFALSE 61886
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61726: LD_VAR 0 2
61730: PPUSH
61731: LD_VAR 0 3
61735: PPUSH
61736: CALL_OW 428
61740: PUSH
61741: LD_EXP 57
61745: PUSH
61746: LD_VAR 0 5
61750: ARRAY
61751: PUSH
61752: LD_INT 2
61754: ARRAY
61755: EQUAL
61756: IFFALSE 61788
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61758: LD_ADDR_EXP 57
61762: PUSH
61763: LD_EXP 57
61767: PPUSH
61768: LD_VAR 0 5
61772: PPUSH
61773: CALL_OW 3
61777: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61778: CALL 61943 0 0
// exit ;
61782: POP
61783: POP
61784: GO 61938
// end else
61786: GO 61884
// if factory = factoryWaypoints [ i ] [ 2 ] then
61788: LD_VAR 0 1
61792: PUSH
61793: LD_EXP 57
61797: PUSH
61798: LD_VAR 0 5
61802: ARRAY
61803: PUSH
61804: LD_INT 2
61806: ARRAY
61807: EQUAL
61808: IFFALSE 61884
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61810: LD_ADDR_EXP 57
61814: PUSH
61815: LD_EXP 57
61819: PPUSH
61820: LD_VAR 0 5
61824: PPUSH
61825: CALL_OW 3
61829: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61830: LD_ADDR_EXP 57
61834: PUSH
61835: LD_EXP 57
61839: PPUSH
61840: LD_VAR 0 1
61844: PPUSH
61845: CALL_OW 255
61849: PUSH
61850: LD_VAR 0 1
61854: PUSH
61855: LD_VAR 0 2
61859: PUSH
61860: LD_VAR 0 3
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: PPUSH
61871: CALL 55579 0 2
61875: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61876: CALL 61943 0 0
// exit ;
61880: POP
61881: POP
61882: GO 61938
// end ; end ;
61884: GO 61723
61886: POP
61887: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61888: LD_ADDR_EXP 57
61892: PUSH
61893: LD_EXP 57
61897: PPUSH
61898: LD_VAR 0 1
61902: PPUSH
61903: CALL_OW 255
61907: PUSH
61908: LD_VAR 0 1
61912: PUSH
61913: LD_VAR 0 2
61917: PUSH
61918: LD_VAR 0 3
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: PPUSH
61929: CALL 55579 0 2
61933: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61934: CALL 61943 0 0
// end ;
61938: LD_VAR 0 4
61942: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61943: LD_INT 0
61945: PPUSH
61946: PPUSH
61947: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61948: LD_STRING resetFactoryWaypoint();
61950: PPUSH
61951: CALL_OW 559
// if factoryWaypoints then
61955: LD_EXP 57
61959: IFFALSE 62080
// begin list := factoryWaypoints ;
61961: LD_ADDR_VAR 0 3
61965: PUSH
61966: LD_EXP 57
61970: ST_TO_ADDR
// for i := 1 to list do
61971: LD_ADDR_VAR 0 2
61975: PUSH
61976: DOUBLE
61977: LD_INT 1
61979: DEC
61980: ST_TO_ADDR
61981: LD_VAR 0 3
61985: PUSH
61986: FOR_TO
61987: IFFALSE 62078
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61989: LD_STRING setFactoryWaypointXY(
61991: PUSH
61992: LD_VAR 0 3
61996: PUSH
61997: LD_VAR 0 2
62001: ARRAY
62002: PUSH
62003: LD_INT 1
62005: ARRAY
62006: STR
62007: PUSH
62008: LD_STRING ,
62010: STR
62011: PUSH
62012: LD_VAR 0 3
62016: PUSH
62017: LD_VAR 0 2
62021: ARRAY
62022: PUSH
62023: LD_INT 2
62025: ARRAY
62026: STR
62027: PUSH
62028: LD_STRING ,
62030: STR
62031: PUSH
62032: LD_VAR 0 3
62036: PUSH
62037: LD_VAR 0 2
62041: ARRAY
62042: PUSH
62043: LD_INT 3
62045: ARRAY
62046: STR
62047: PUSH
62048: LD_STRING ,
62050: STR
62051: PUSH
62052: LD_VAR 0 3
62056: PUSH
62057: LD_VAR 0 2
62061: ARRAY
62062: PUSH
62063: LD_INT 4
62065: ARRAY
62066: STR
62067: PUSH
62068: LD_STRING )
62070: STR
62071: PPUSH
62072: CALL_OW 559
62076: GO 61986
62078: POP
62079: POP
// end ; end ;
62080: LD_VAR 0 1
62084: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62085: LD_INT 0
62087: PPUSH
// if HexInfo ( x , y ) = warehouse then
62088: LD_VAR 0 2
62092: PPUSH
62093: LD_VAR 0 3
62097: PPUSH
62098: CALL_OW 428
62102: PUSH
62103: LD_VAR 0 1
62107: EQUAL
62108: IFFALSE 62135
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62110: LD_ADDR_EXP 59
62114: PUSH
62115: LD_EXP 59
62119: PPUSH
62120: LD_VAR 0 1
62124: PPUSH
62125: LD_INT 0
62127: PPUSH
62128: CALL_OW 1
62132: ST_TO_ADDR
62133: GO 62186
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62135: LD_ADDR_EXP 59
62139: PUSH
62140: LD_EXP 59
62144: PPUSH
62145: LD_VAR 0 1
62149: PPUSH
62150: LD_VAR 0 1
62154: PPUSH
62155: CALL_OW 255
62159: PUSH
62160: LD_VAR 0 1
62164: PUSH
62165: LD_VAR 0 2
62169: PUSH
62170: LD_VAR 0 3
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: PPUSH
62181: CALL_OW 1
62185: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62186: CALL 62195 0 0
// end ;
62190: LD_VAR 0 4
62194: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62195: LD_INT 0
62197: PPUSH
62198: PPUSH
62199: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62200: LD_STRING resetWarehouseGatheringPoints();
62202: PPUSH
62203: CALL_OW 559
// if warehouseGatheringPoints then
62207: LD_EXP 59
62211: IFFALSE 62337
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62213: LD_ADDR_VAR 0 3
62217: PUSH
62218: LD_EXP 59
62222: PPUSH
62223: CALL 59513 0 1
62227: ST_TO_ADDR
// for i := 1 to list do
62228: LD_ADDR_VAR 0 2
62232: PUSH
62233: DOUBLE
62234: LD_INT 1
62236: DEC
62237: ST_TO_ADDR
62238: LD_VAR 0 3
62242: PUSH
62243: FOR_TO
62244: IFFALSE 62335
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62246: LD_STRING setWarehouseGatheringPointXY(
62248: PUSH
62249: LD_VAR 0 3
62253: PUSH
62254: LD_VAR 0 2
62258: ARRAY
62259: PUSH
62260: LD_INT 1
62262: ARRAY
62263: STR
62264: PUSH
62265: LD_STRING ,
62267: STR
62268: PUSH
62269: LD_VAR 0 3
62273: PUSH
62274: LD_VAR 0 2
62278: ARRAY
62279: PUSH
62280: LD_INT 2
62282: ARRAY
62283: STR
62284: PUSH
62285: LD_STRING ,
62287: STR
62288: PUSH
62289: LD_VAR 0 3
62293: PUSH
62294: LD_VAR 0 2
62298: ARRAY
62299: PUSH
62300: LD_INT 3
62302: ARRAY
62303: STR
62304: PUSH
62305: LD_STRING ,
62307: STR
62308: PUSH
62309: LD_VAR 0 3
62313: PUSH
62314: LD_VAR 0 2
62318: ARRAY
62319: PUSH
62320: LD_INT 4
62322: ARRAY
62323: STR
62324: PUSH
62325: LD_STRING )
62327: STR
62328: PPUSH
62329: CALL_OW 559
62333: GO 62243
62335: POP
62336: POP
// end ; end ;
62337: LD_VAR 0 1
62341: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62342: LD_INT 0
62344: PPUSH
62345: PPUSH
// if not mpSidePositions then
62346: LD_EXP 5
62350: NOT
62351: IFFALSE 62355
// exit ;
62353: GO 62426
// result :=  ;
62355: LD_ADDR_VAR 0 1
62359: PUSH
62360: LD_STRING 
62362: ST_TO_ADDR
// for i := 1 to 8 do
62363: LD_ADDR_VAR 0 2
62367: PUSH
62368: DOUBLE
62369: LD_INT 1
62371: DEC
62372: ST_TO_ADDR
62373: LD_INT 8
62375: PUSH
62376: FOR_TO
62377: IFFALSE 62407
// begin result := result & mpSidePositions [ i ] & ; ;
62379: LD_ADDR_VAR 0 1
62383: PUSH
62384: LD_VAR 0 1
62388: PUSH
62389: LD_EXP 5
62393: PUSH
62394: LD_VAR 0 2
62398: ARRAY
62399: STR
62400: PUSH
62401: LD_STRING ;
62403: STR
62404: ST_TO_ADDR
// end ;
62405: GO 62376
62407: POP
62408: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62409: LD_STRING setMultiplayerRealPosition("
62411: PUSH
62412: LD_VAR 0 1
62416: STR
62417: PUSH
62418: LD_STRING ");
62420: STR
62421: PPUSH
62422: CALL_OW 559
// end ;
62426: LD_VAR 0 1
62430: RET
