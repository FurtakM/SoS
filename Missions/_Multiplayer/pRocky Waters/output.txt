// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2972 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3318 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 10 10$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 21000
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 51
 852: PUSH
 853: LD_INT 52
 855: PUSH
 856: LD_INT 53
 858: PUSH
 859: LD_INT 54
 861: PUSH
 862: LD_INT 55
 864: PUSH
 865: LD_INT 56
 867: PUSH
 868: LD_INT 57
 870: PUSH
 871: LD_INT 58
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 70
 891: PUSH
 892: LD_INT 71
 894: PUSH
 895: LD_INT 72
 897: PUSH
 898: LD_INT 73
 900: PUSH
 901: LD_INT 68
 903: PUSH
 904: LD_INT 69
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 49
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 33
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 35
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 32
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 33
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 35
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 34
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 31
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 60
1364: PUSH
1365: LD_INT 61
1367: PUSH
1368: LD_INT 62
1370: PUSH
1371: LD_INT 63
1373: PUSH
1374: LD_INT 64
1376: PUSH
1377: LD_INT 65
1379: PUSH
1380: LD_INT 66
1382: PUSH
1383: LD_INT 67
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 1
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 58933 0 2
1411: PUSH
1412: LD_INT 2
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 58933 0 2
1422: PUSH
1423: LD_INT 3
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 58933 0 2
1433: PUSH
1434: LD_INT 4
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 58933 0 2
1444: PUSH
1445: LD_INT 5
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL 58933 0 2
1455: PUSH
1456: LD_INT 6
1458: PPUSH
1459: LD_INT 5
1461: PPUSH
1462: CALL 58933 0 2
1466: PUSH
1467: LD_INT 7
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL 58933 0 2
1477: PUSH
1478: LD_INT 8
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL 58933 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 18779 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 9
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 58766 0 2
1667: PUSH
1668: LD_INT 10
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 58766 0 2
1680: PUSH
1681: LD_INT 11
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 58766 0 2
1693: PUSH
1694: LD_INT 12
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 58766 0 2
1706: PUSH
1707: LD_INT 13
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 58766 0 2
1719: PUSH
1720: LD_INT 14
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 58766 0 2
1732: PUSH
1733: LD_INT 15
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 58766 0 2
1745: PUSH
1746: LD_INT 16
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 58766 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 17
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 58766 0 2
1810: PUSH
1811: LD_INT 18
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 58766 0 2
1823: PUSH
1824: LD_INT 19
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 58766 0 2
1836: PUSH
1837: LD_INT 20
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 58766 0 2
1849: PUSH
1850: LD_INT 21
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 58766 0 2
1862: PUSH
1863: LD_INT 22
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 58766 0 2
1875: PUSH
1876: LD_INT 23
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 58766 0 2
1888: PUSH
1889: LD_INT 24
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 58766 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 25
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 58933 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 26
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 58933 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 41
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 58933 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 27
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: CALL 58933 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 28
2017: PPUSH
2018: LD_INT 4
2020: PPUSH
2021: CALL 58933 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 42
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL 58933 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 29
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 58933 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 30
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL 58933 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 43
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 58933 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 31
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 58933 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 32
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL 58933 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 44
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 58933 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 33
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL 58933 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 34
2167: PPUSH
2168: LD_INT 2
2170: PPUSH
2171: CALL 58933 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 45
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: CALL 58933 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 35
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL 58933 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 36
2217: PPUSH
2218: LD_INT 4
2220: PPUSH
2221: CALL 58933 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 46
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 58933 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 37
2252: PPUSH
2253: LD_INT 3
2255: PPUSH
2256: CALL 58933 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 38
2267: PPUSH
2268: LD_INT 4
2270: PPUSH
2271: CALL 58933 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 47
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: CALL 58933 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 39
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL 58933 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 40
2317: PPUSH
2318: LD_INT 3
2320: PPUSH
2321: CALL 58933 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 48
2332: PPUSH
2333: LD_INT 4
2335: PPUSH
2336: CALL 58933 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2885
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 70
2569: PUSH
2570: LD_INT 71
2572: PUSH
2573: LD_INT 72
2575: PUSH
2576: LD_INT 73
2578: PUSH
2579: LD_INT 68
2581: PUSH
2582: LD_INT 69
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 51
2600: PUSH
2601: LD_INT 52
2603: PUSH
2604: LD_INT 53
2606: PUSH
2607: LD_INT 54
2609: PUSH
2610: LD_INT 55
2612: PUSH
2613: LD_INT 56
2615: PUSH
2616: LD_INT 57
2618: PUSH
2619: LD_INT 58
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 55749 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// if GetResourceArea ( center3 , mat_cans ) < 15 then
2745: LD_INT 74
2747: PPUSH
2748: LD_INT 1
2750: PPUSH
2751: CALL_OW 287
2755: PUSH
2756: LD_INT 15
2758: LESS
2759: IFFALSE 2791
// begin CreateCratesArea ( x , center3 , true ) ;
2761: LD_VAR 0 2
2765: PPUSH
2766: LD_INT 74
2768: PPUSH
2769: LD_INT 1
2771: PPUSH
2772: CALL_OW 55
// CreateCratesArea ( x , center3 , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_INT 74
2783: PPUSH
2784: LD_INT 1
2786: PPUSH
2787: CALL_OW 55
// end ; for i in areas do
2791: LD_ADDR_VAR 0 1
2795: PUSH
2796: LD_VAR 0 4
2800: PUSH
2801: FOR_IN
2802: IFFALSE 2841
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2804: LD_VAR 0 1
2808: PPUSH
2809: LD_INT 1
2811: PPUSH
2812: CALL_OW 287
2816: PUSH
2817: LD_INT 20
2819: LESS
2820: IFFALSE 2839
// begin CreateCratesArea ( x , i , true ) ;
2822: LD_VAR 0 2
2826: PPUSH
2827: LD_VAR 0 1
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: CALL_OW 55
// end ; end ;
2839: GO 2801
2841: POP
2842: POP
// time := time + delayTime ;
2843: LD_ADDR_VAR 0 5
2847: PUSH
2848: LD_VAR 0 5
2852: PUSH
2853: LD_VAR 0 7
2857: PLUS
2858: ST_TO_ADDR
// if time > maxTime then
2859: LD_VAR 0 5
2863: PUSH
2864: LD_VAR 0 8
2868: GREATER
2869: IFFALSE 2881
// time := normalTime ;
2871: LD_ADDR_VAR 0 5
2875: PUSH
2876: LD_VAR 0 6
2880: ST_TO_ADDR
// until false ;
2881: LD_INT 0
2883: IFFALSE 2703
// end ; end_of_file
2885: PPOPN 8
2887: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2888: LD_VAR 0 1
2892: PPUSH
2893: CALL 11259 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2897: LD_VAR 0 1
2901: PPUSH
2902: CALL 7904 0 1
// end ;
2906: PPOPN 1
2908: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL 11276 0 1
// end ;
2918: PPOPN 1
2920: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2921: LD_VAR 0 1
2925: PPUSH
2926: CALL 8569 0 1
2930: PPOPN 1
2932: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2933: LD_VAR 0 1
2937: PPUSH
2938: LD_VAR 0 2
2942: PPUSH
2943: CALL 11317 0 2
2947: PPOPN 2
2949: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2950: LD_VAR 0 1
2954: PPUSH
2955: LD_VAR 0 2
2959: PPUSH
2960: LD_VAR 0 3
2964: PPUSH
2965: CALL 8622 0 3
2969: PPOPN 3
2971: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2972: LD_INT 0
2974: PPUSH
2975: PPUSH
// disable ( mpActive ) ;
2976: LD_INT 100
2978: DISABLE_MARKED
// disable ( mpWin ) ;
2979: LD_INT 101
2981: DISABLE_MARKED
// disable ( mpLose ) ;
2982: LD_INT 102
2984: DISABLE_MARKED
// mpGameType := 0 ;
2985: LD_ADDR_EXP 1
2989: PUSH
2990: LD_INT 0
2992: ST_TO_ADDR
// mpGameSettings := [ ] ;
2993: LD_ADDR_EXP 4
2997: PUSH
2998: EMPTY
2999: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
3000: LD_ADDR_EXP 2
3004: PUSH
3005: EMPTY
3006: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
3007: LD_ADDR_EXP 3
3011: PUSH
3012: EMPTY
3013: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
3014: LD_ADDR_EXP 27
3018: PUSH
3019: LD_INT 2
3021: PUSH
3022: LD_INT 2
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3029: LD_ADDR_EXP 10
3033: PUSH
3034: EMPTY
3035: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3036: LD_ADDR_EXP 11
3040: PUSH
3041: EMPTY
3042: ST_TO_ADDR
// mpDepots := [ ] ;
3043: LD_ADDR_EXP 12
3047: PUSH
3048: EMPTY
3049: ST_TO_ADDR
// mpBuildings := [ ] ;
3050: LD_ADDR_EXP 15
3054: PUSH
3055: EMPTY
3056: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3057: LD_ADDR_EXP 16
3061: PUSH
3062: EMPTY
3063: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3064: LD_ADDR_EXP 17
3068: PUSH
3069: EMPTY
3070: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3071: LD_ADDR_EXP 18
3075: PUSH
3076: EMPTY
3077: ST_TO_ADDR
// mpStartingResources := [ ] ;
3078: LD_ADDR_EXP 13
3082: PUSH
3083: EMPTY
3084: ST_TO_ADDR
// mpStartPos := [ ] ;
3085: LD_ADDR_EXP 19
3089: PUSH
3090: EMPTY
3091: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3092: LD_ADDR_EXP 20
3096: PUSH
3097: LD_INT 1
3099: NEG
3100: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3101: LD_ADDR_EXP 21
3105: PUSH
3106: EMPTY
3107: ST_TO_ADDR
// mpApemans := [ ] ;
3108: LD_ADDR_EXP 28
3112: PUSH
3113: EMPTY
3114: ST_TO_ADDR
// mpApemansArea := [ ] ;
3115: LD_ADDR_EXP 29
3119: PUSH
3120: EMPTY
3121: ST_TO_ADDR
// mpRespawn := [ ] ;
3122: LD_ADDR_EXP 31
3126: PUSH
3127: EMPTY
3128: ST_TO_ADDR
// mpKingArea := 0 ;
3129: LD_ADDR_EXP 32
3133: PUSH
3134: LD_INT 0
3136: ST_TO_ADDR
// mpPoints := [ ] ;
3137: LD_ADDR_EXP 33
3141: PUSH
3142: EMPTY
3143: ST_TO_ADDR
// mpVehicles := 0 ;
3144: LD_ADDR_EXP 34
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// mpShipments := 0 ;
3152: LD_ADDR_EXP 25
3156: PUSH
3157: LD_INT 0
3159: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3160: LD_ADDR_EXP 38
3164: PUSH
3165: EMPTY
3166: PUSH
3167: EMPTY
3168: PUSH
3169: EMPTY
3170: PUSH
3171: EMPTY
3172: PUSH
3173: EMPTY
3174: PUSH
3175: EMPTY
3176: PUSH
3177: EMPTY
3178: PUSH
3179: EMPTY
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3191: LD_ADDR_EXP 30
3195: PUSH
3196: EMPTY
3197: PUSH
3198: EMPTY
3199: PUSH
3200: EMPTY
3201: PUSH
3202: EMPTY
3203: PUSH
3204: EMPTY
3205: PUSH
3206: EMPTY
3207: PUSH
3208: EMPTY
3209: PUSH
3210: EMPTY
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: ST_TO_ADDR
// mpEmissions := 0 ;
3222: LD_ADDR_EXP 35
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3230: LD_ADDR_EXP 23
3234: PUSH
3235: LD_INT 3
3237: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3238: LD_ADDR_EXP 22
3242: PUSH
3243: LD_INT 15
3245: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3246: LD_ADDR_EXP 36
3250: PUSH
3251: LD_INT 0
3253: ST_TO_ADDR
// mpGameActive := false ;
3254: LD_ADDR_EXP 37
3258: PUSH
3259: LD_INT 0
3261: ST_TO_ADDR
// mpBlockRespThread := false ;
3262: LD_ADDR_EXP 39
3266: PUSH
3267: LD_INT 0
3269: ST_TO_ADDR
// for i := 1 to 32 do
3270: LD_ADDR_VAR 0 2
3274: PUSH
3275: DOUBLE
3276: LD_INT 1
3278: DEC
3279: ST_TO_ADDR
3280: LD_INT 32
3282: PUSH
3283: FOR_TO
3284: IFFALSE 3311
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3286: LD_ADDR_EXP 4
3290: PUSH
3291: LD_EXP 4
3295: PPUSH
3296: LD_VAR 0 2
3300: PPUSH
3301: LD_INT 0
3303: PPUSH
3304: CALL_OW 1
3308: ST_TO_ADDR
3309: GO 3283
3311: POP
3312: POP
// end ;
3313: LD_VAR 0 1
3317: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3318: LD_INT 0
3320: PPUSH
3321: PPUSH
3322: PPUSH
3323: PPUSH
3324: PPUSH
3325: PPUSH
3326: PPUSH
3327: PPUSH
3328: PPUSH
3329: PPUSH
3330: PPUSH
3331: PPUSH
3332: PPUSH
3333: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3334: LD_ADDR_VAR 0 14
3338: PUSH
3339: LD_INT 1
3341: PUSH
3342: LD_INT 2
3344: PUSH
3345: LD_INT 3
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: LIST
3352: ST_TO_ADDR
// for i in gameTypes do
3353: LD_ADDR_VAR 0 2
3357: PUSH
3358: LD_VAR 0 14
3362: PUSH
3363: FOR_IN
3364: IFFALSE 3373
// disable ( i ) ;
3366: LD_VAR 0 2
3370: DISABLE_MARKED
3371: GO 3363
3373: POP
3374: POP
// if Multiplayer then
3375: LD_OWVAR 4
3379: IFFALSE 3563
// begin mpGameType := mp_game_type ;
3381: LD_ADDR_EXP 1
3385: PUSH
3386: LD_OWVAR 6
3390: ST_TO_ADDR
// your_side := mp_player_side ;
3391: LD_ADDR_OWVAR 2
3395: PUSH
3396: LD_OWVAR 7
3400: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3401: LD_ADDR_EXP 5
3405: PUSH
3406: LD_OWVAR 17
3410: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3411: LD_ADDR_EXP 6
3415: PUSH
3416: LD_OWVAR 15
3420: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3421: LD_ADDR_EXP 7
3425: PUSH
3426: LD_OWVAR 16
3430: ST_TO_ADDR
// mpTeams := mp_teams ;
3431: LD_ADDR_EXP 8
3435: PUSH
3436: LD_OWVAR 12
3440: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3441: LD_ADDR_VAR 0 2
3445: PUSH
3446: DOUBLE
3447: LD_INT 1
3449: DEC
3450: ST_TO_ADDR
3451: LD_EXP 2
3455: PPUSH
3456: CALL 18779 0 1
3460: PUSH
3461: FOR_TO
3462: IFFALSE 3538
// begin setting := mpGameSettingsKeys [ i ] ;
3464: LD_ADDR_VAR 0 12
3468: PUSH
3469: LD_EXP 2
3473: PUSH
3474: LD_VAR 0 2
3478: ARRAY
3479: ST_TO_ADDR
// if setting then
3480: LD_VAR 0 12
3484: IFFALSE 3536
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3486: LD_ADDR_EXP 4
3490: PUSH
3491: LD_EXP 4
3495: PPUSH
3496: LD_VAR 0 2
3500: PPUSH
3501: LD_EXP 3
3505: PUSH
3506: LD_VAR 0 2
3510: ARRAY
3511: PUSH
3512: LD_VAR 0 2
3516: PUSH
3517: LD_INT 1
3519: MINUS
3520: PPUSH
3521: CALL_OW 426
3525: PUSH
3526: LD_INT 1
3528: PLUS
3529: ARRAY
3530: PPUSH
3531: CALL_OW 1
3535: ST_TO_ADDR
// end ;
3536: GO 3461
3538: POP
3539: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3540: LD_ADDR_EXP 9
3544: PUSH
3545: LD_EXP 6
3549: PUSH
3550: LD_INT 0
3552: PUSH
3553: EMPTY
3554: LIST
3555: DIFF
3556: PUSH
3557: LD_INT 1
3559: GREATER
3560: ST_TO_ADDR
// end else
3561: GO 3563
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3563: LD_EXP 1
3567: PPUSH
3568: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
3572: LD_EXP 16
3576: PPUSH
3577: CALL 18779 0 1
3581: IFFALSE 3612
// begin for i in mpMarkedAreas do
3583: LD_ADDR_VAR 0 2
3587: PUSH
3588: LD_EXP 16
3592: PUSH
3593: FOR_IN
3594: IFFALSE 3610
// SetAreaMapShow ( i , 0 ) ;
3596: LD_VAR 0 2
3600: PPUSH
3601: LD_INT 0
3603: PPUSH
3604: CALL_OW 424
3608: GO 3593
3610: POP
3611: POP
// end ; for i := 1 to 8 do
3612: LD_ADDR_VAR 0 2
3616: PUSH
3617: DOUBLE
3618: LD_INT 1
3620: DEC
3621: ST_TO_ADDR
3622: LD_INT 8
3624: PUSH
3625: FOR_TO
3626: IFFALSE 4877
// begin if not mpSidePositions [ i ] then
3628: LD_EXP 5
3632: PUSH
3633: LD_VAR 0 2
3637: ARRAY
3638: NOT
3639: IFFALSE 3643
// continue ;
3641: GO 3625
// side := i ;
3643: LD_ADDR_VAR 0 7
3647: PUSH
3648: LD_VAR 0 2
3652: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3653: LD_ADDR_VAR 0 9
3657: PUSH
3658: LD_EXP 7
3662: PUSH
3663: LD_VAR 0 2
3667: ARRAY
3668: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3669: LD_ADDR_VAR 0 8
3673: PUSH
3674: LD_EXP 5
3678: PUSH
3679: LD_VAR 0 2
3683: ARRAY
3684: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3685: LD_EXP 10
3689: PPUSH
3690: CALL 18779 0 1
3694: IFFALSE 3771
// begin for j in mpOilDeposits [ pos ] do
3696: LD_ADDR_VAR 0 3
3700: PUSH
3701: LD_EXP 10
3705: PUSH
3706: LD_VAR 0 8
3710: ARRAY
3711: PUSH
3712: FOR_IN
3713: IFFALSE 3769
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3715: LD_VAR 0 3
3719: PUSH
3720: LD_INT 1
3722: ARRAY
3723: PPUSH
3724: LD_VAR 0 3
3728: PUSH
3729: LD_INT 2
3731: ARRAY
3732: PPUSH
3733: LD_INT 2
3735: PPUSH
3736: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3740: LD_VAR 0 3
3744: PUSH
3745: LD_INT 1
3747: ARRAY
3748: PPUSH
3749: LD_VAR 0 3
3753: PUSH
3754: LD_INT 2
3756: ARRAY
3757: PPUSH
3758: LD_VAR 0 7
3762: PPUSH
3763: CALL_OW 441
// end ;
3767: GO 3712
3769: POP
3770: POP
// end ; if Count ( mpSibDeposits ) then
3771: LD_EXP 11
3775: PPUSH
3776: CALL 18779 0 1
3780: IFFALSE 3857
// begin for j in mpSibDeposits [ pos ] do
3782: LD_ADDR_VAR 0 3
3786: PUSH
3787: LD_EXP 11
3791: PUSH
3792: LD_VAR 0 8
3796: ARRAY
3797: PUSH
3798: FOR_IN
3799: IFFALSE 3855
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3801: LD_VAR 0 3
3805: PUSH
3806: LD_INT 1
3808: ARRAY
3809: PPUSH
3810: LD_VAR 0 3
3814: PUSH
3815: LD_INT 2
3817: ARRAY
3818: PPUSH
3819: LD_INT 3
3821: PPUSH
3822: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3826: LD_VAR 0 3
3830: PUSH
3831: LD_INT 1
3833: ARRAY
3834: PPUSH
3835: LD_VAR 0 3
3839: PUSH
3840: LD_INT 2
3842: ARRAY
3843: PPUSH
3844: LD_VAR 0 7
3848: PPUSH
3849: CALL_OW 441
// end ;
3853: GO 3798
3855: POP
3856: POP
// end ; InitBc ;
3857: CALL_OW 21
// InitUc ;
3861: CALL_OW 18
// uc_side := side ;
3865: LD_ADDR_OWVAR 20
3869: PUSH
3870: LD_VAR 0 7
3874: ST_TO_ADDR
// uc_nation := nation ;
3875: LD_ADDR_OWVAR 21
3879: PUSH
3880: LD_VAR 0 9
3884: ST_TO_ADDR
// if Count ( mpDepots ) then
3885: LD_EXP 12
3889: PPUSH
3890: CALL 18779 0 1
3894: IFFALSE 4072
// begin if GameTypeSurvival then
3896: LD_INT 2
3898: IFFALSE 3918
// begin bc_level := 10 ;
3900: LD_ADDR_OWVAR 43
3904: PUSH
3905: LD_INT 10
3907: ST_TO_ADDR
// bc_type := b_warehouse ;
3908: LD_ADDR_OWVAR 42
3912: PUSH
3913: LD_INT 1
3915: ST_TO_ADDR
// end else
3916: GO 3934
// begin bc_level := 0 ;
3918: LD_ADDR_OWVAR 43
3922: PUSH
3923: LD_INT 0
3925: ST_TO_ADDR
// bc_type := b_depot ;
3926: LD_ADDR_OWVAR 42
3930: PUSH
3931: LD_INT 0
3933: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3934: LD_ADDR_VAR 0 4
3938: PUSH
3939: LD_EXP 12
3943: PUSH
3944: LD_VAR 0 8
3948: ARRAY
3949: PUSH
3950: LD_INT 1
3952: ARRAY
3953: PPUSH
3954: LD_EXP 12
3958: PUSH
3959: LD_VAR 0 8
3963: ARRAY
3964: PUSH
3965: LD_INT 2
3967: ARRAY
3968: PPUSH
3969: LD_EXP 12
3973: PUSH
3974: LD_VAR 0 8
3978: ARRAY
3979: PUSH
3980: LD_INT 3
3982: ARRAY
3983: PPUSH
3984: CALL_OW 47
3988: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3989: LD_VAR 0 4
3993: PPUSH
3994: LD_STRING @
3996: PUSH
3997: LD_VAR 0 7
4001: STR
4002: PPUSH
4003: CALL_OW 500
// if Count ( mpStartingResources ) then
4007: LD_EXP 13
4011: PPUSH
4012: CALL 18779 0 1
4016: IFFALSE 4070
// begin for j := 1 to mpStartingResources do
4018: LD_ADDR_VAR 0 3
4022: PUSH
4023: DOUBLE
4024: LD_INT 1
4026: DEC
4027: ST_TO_ADDR
4028: LD_EXP 13
4032: PUSH
4033: FOR_TO
4034: IFFALSE 4068
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4036: LD_VAR 0 4
4040: PPUSH
4041: CALL_OW 274
4045: PPUSH
4046: LD_VAR 0 3
4050: PPUSH
4051: LD_EXP 13
4055: PUSH
4056: LD_VAR 0 3
4060: ARRAY
4061: PPUSH
4062: CALL_OW 277
4066: GO 4033
4068: POP
4069: POP
// end ; end else
4070: GO 4219
// if Count ( mpStartingResources ) then
4072: LD_EXP 13
4076: PPUSH
4077: CALL 18779 0 1
4081: IFFALSE 4219
// begin for j := 1 to mpStartingResources do
4083: LD_ADDR_VAR 0 3
4087: PUSH
4088: DOUBLE
4089: LD_INT 1
4091: DEC
4092: ST_TO_ADDR
4093: LD_EXP 13
4097: PUSH
4098: FOR_TO
4099: IFFALSE 4217
// begin resources := mpStartingResources [ j ] ;
4101: LD_ADDR_VAR 0 13
4105: PUSH
4106: LD_EXP 13
4110: PUSH
4111: LD_VAR 0 3
4115: ARRAY
4116: ST_TO_ADDR
// repeat if resources >= 50 then
4117: LD_VAR 0 13
4121: PUSH
4122: LD_INT 50
4124: GREATEREQUAL
4125: IFFALSE 4171
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
4127: LD_VAR 0 3
4131: PPUSH
4132: LD_INT 5
4134: PPUSH
4135: LD_VAR 0 5
4139: PPUSH
4140: LD_VAR 0 6
4144: PPUSH
4145: LD_INT 4
4147: PPUSH
4148: LD_INT 0
4150: PPUSH
4151: CALL_OW 60
// resources := resources - 50 ;
4155: LD_ADDR_VAR 0 13
4159: PUSH
4160: LD_VAR 0 13
4164: PUSH
4165: LD_INT 50
4167: MINUS
4168: ST_TO_ADDR
// end else
4169: GO 4205
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
4171: LD_VAR 0 3
4175: PPUSH
4176: LD_VAR 0 13
4180: PUSH
4181: LD_INT 10
4183: DIV
4184: PPUSH
4185: LD_VAR 0 5
4189: PPUSH
4190: LD_VAR 0 6
4194: PPUSH
4195: LD_INT 4
4197: PPUSH
4198: LD_INT 0
4200: PPUSH
4201: CALL_OW 60
// until resources <= 0 ;
4205: LD_VAR 0 13
4209: PUSH
4210: LD_INT 0
4212: LESSEQUAL
4213: IFFALSE 4117
// end ;
4215: GO 4098
4217: POP
4218: POP
// end ; if Count ( mpBuildings ) then
4219: LD_EXP 15
4223: PPUSH
4224: CALL 18779 0 1
4228: IFFALSE 4306
// begin for j in mpBuildings [ pos ] do
4230: LD_ADDR_VAR 0 3
4234: PUSH
4235: LD_EXP 15
4239: PUSH
4240: LD_VAR 0 8
4244: ARRAY
4245: PUSH
4246: FOR_IN
4247: IFFALSE 4304
// begin bc_level := 0 ;
4249: LD_ADDR_OWVAR 43
4253: PUSH
4254: LD_INT 0
4256: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4257: LD_ADDR_OWVAR 42
4261: PUSH
4262: LD_VAR 0 3
4266: PUSH
4267: LD_INT 1
4269: ARRAY
4270: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4271: LD_VAR 0 3
4275: PUSH
4276: LD_INT 2
4278: ARRAY
4279: PPUSH
4280: LD_VAR 0 3
4284: PUSH
4285: LD_INT 3
4287: ARRAY
4288: PPUSH
4289: LD_VAR 0 3
4293: PUSH
4294: LD_INT 4
4296: ARRAY
4297: PPUSH
4298: CALL_OW 47
// end ;
4302: GO 4246
4304: POP
4305: POP
// end ; if mpBattleFlag > - 1 then
4306: LD_EXP 20
4310: PUSH
4311: LD_INT 1
4313: NEG
4314: GREATER
4315: IFFALSE 4474
// begin x := mpStartPos [ pos ] [ 1 ] ;
4317: LD_ADDR_VAR 0 5
4321: PUSH
4322: LD_EXP 19
4326: PUSH
4327: LD_VAR 0 8
4331: ARRAY
4332: PUSH
4333: LD_INT 1
4335: ARRAY
4336: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4337: LD_ADDR_VAR 0 6
4341: PUSH
4342: LD_EXP 19
4346: PUSH
4347: LD_VAR 0 8
4351: ARRAY
4352: PUSH
4353: LD_INT 2
4355: ARRAY
4356: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4357: LD_VAR 0 5
4361: PPUSH
4362: LD_VAR 0 6
4366: PPUSH
4367: LD_INT 12
4369: PPUSH
4370: LD_INT 2
4372: PPUSH
4373: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4377: LD_ADDR_EXP 21
4381: PUSH
4382: LD_EXP 21
4386: PPUSH
4387: LD_VAR 0 7
4391: PPUSH
4392: LD_VAR 0 7
4396: PPUSH
4397: LD_VAR 0 5
4401: PPUSH
4402: LD_VAR 0 6
4406: PPUSH
4407: LD_INT 1
4409: PUSH
4410: LD_INT 100
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 2
4419: PUSH
4420: LD_INT 70
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: LD_INT 3
4429: PUSH
4430: LD_INT 40
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: PUSH
4437: LD_INT 10
4439: PUSH
4440: LD_INT 25
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 20
4449: PUSH
4450: LD_INT 100
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: PPUSH
4464: CALL_OW 418
4468: PPUSH
4469: CALL_OW 1
4473: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4474: LD_EXP 24
4478: PUSH
4479: LD_INT 20
4481: PPUSH
4482: LD_VAR 0 7
4486: PPUSH
4487: CALL_OW 321
4491: PUSH
4492: LD_INT 1
4494: EQUAL
4495: AND
4496: IFFALSE 4513
// SetTech ( tech_SibDet , side , state_researched ) ;
4498: LD_INT 20
4500: PPUSH
4501: LD_VAR 0 7
4505: PPUSH
4506: LD_INT 2
4508: PPUSH
4509: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4513: LD_INT 24
4515: PPUSH
4516: LD_VAR 0 7
4520: PPUSH
4521: LD_INT 0
4523: PPUSH
4524: CALL_OW 322
// if mpSibBomb = 1 then
4528: LD_EXP 26
4532: PUSH
4533: LD_INT 1
4535: EQUAL
4536: IFFALSE 4555
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4538: LD_INT 25
4540: PPUSH
4541: LD_VAR 0 7
4545: PPUSH
4546: LD_INT 1
4548: PPUSH
4549: CALL_OW 322
// end else
4553: GO 4570
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4555: LD_INT 25
4557: PPUSH
4558: LD_VAR 0 7
4562: PPUSH
4563: LD_INT 0
4565: PPUSH
4566: CALL_OW 322
// end ; if mpVehicles then
4570: LD_EXP 34
4574: IFFALSE 4673
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4576: LD_ADDR_VAR 0 3
4580: PUSH
4581: LD_VAR 0 7
4585: PPUSH
4586: LD_VAR 0 9
4590: PPUSH
4591: LD_EXP 34
4595: PPUSH
4596: CALL 5787 0 3
4600: PUSH
4601: FOR_IN
4602: IFFALSE 4671
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4604: LD_VAR 0 3
4608: PPUSH
4609: LD_INT 0
4611: PPUSH
4612: LD_INT 5
4614: PPUSH
4615: CALL_OW 12
4619: PPUSH
4620: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4624: LD_VAR 0 3
4628: PPUSH
4629: LD_EXP 19
4633: PUSH
4634: LD_VAR 0 8
4638: ARRAY
4639: PUSH
4640: LD_INT 1
4642: ARRAY
4643: PPUSH
4644: LD_EXP 19
4648: PUSH
4649: LD_VAR 0 8
4653: ARRAY
4654: PUSH
4655: LD_INT 2
4657: ARRAY
4658: PPUSH
4659: LD_INT 12
4661: PPUSH
4662: LD_INT 0
4664: PPUSH
4665: CALL_OW 50
// end ;
4669: GO 4601
4671: POP
4672: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4673: LD_ADDR_VAR 0 11
4677: PUSH
4678: LD_VAR 0 7
4682: PPUSH
4683: LD_VAR 0 9
4687: PPUSH
4688: LD_EXP 22
4692: PPUSH
4693: LD_EXP 23
4697: PPUSH
4698: CALL 5289 0 4
4702: ST_TO_ADDR
// for j in team do
4703: LD_ADDR_VAR 0 3
4707: PUSH
4708: LD_VAR 0 11
4712: PUSH
4713: FOR_IN
4714: IFFALSE 4763
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4716: LD_VAR 0 3
4720: PPUSH
4721: LD_EXP 19
4725: PUSH
4726: LD_VAR 0 8
4730: ARRAY
4731: PUSH
4732: LD_INT 1
4734: ARRAY
4735: PPUSH
4736: LD_EXP 19
4740: PUSH
4741: LD_VAR 0 8
4745: ARRAY
4746: PUSH
4747: LD_INT 2
4749: ARRAY
4750: PPUSH
4751: LD_INT 12
4753: PPUSH
4754: LD_INT 0
4756: PPUSH
4757: CALL_OW 50
4761: GO 4713
4763: POP
4764: POP
// if mpApemans then
4765: LD_EXP 28
4769: IFFALSE 4875
// begin for j := 1 to mpApemans do
4771: LD_ADDR_VAR 0 3
4775: PUSH
4776: DOUBLE
4777: LD_INT 1
4779: DEC
4780: ST_TO_ADDR
4781: LD_EXP 28
4785: PUSH
4786: FOR_TO
4787: IFFALSE 4873
// begin PrepareApeman ( - 5 ) ;
4789: LD_INT 5
4791: NEG
4792: PPUSH
4793: CALL 50636 0 1
// ape := CreateHuman ;
4797: LD_ADDR_VAR 0 10
4801: PUSH
4802: CALL_OW 44
4806: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4807: LD_ADDR_EXP 30
4811: PUSH
4812: LD_EXP 30
4816: PPUSH
4817: LD_VAR 0 8
4821: PPUSH
4822: LD_EXP 30
4826: PUSH
4827: LD_VAR 0 8
4831: ARRAY
4832: PPUSH
4833: LD_VAR 0 10
4837: PPUSH
4838: CALL 54388 0 2
4842: PPUSH
4843: CALL_OW 1
4847: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4848: LD_VAR 0 10
4852: PPUSH
4853: LD_EXP 29
4857: PUSH
4858: LD_VAR 0 8
4862: ARRAY
4863: PPUSH
4864: LD_INT 0
4866: PPUSH
4867: CALL_OW 49
// end ;
4871: GO 4786
4873: POP
4874: POP
// end ; end ;
4875: GO 3625
4877: POP
4878: POP
// if not mpTeamGame then
4879: LD_EXP 9
4883: NOT
4884: IFFALSE 4982
// begin for i := 1 to 8 do
4886: LD_ADDR_VAR 0 2
4890: PUSH
4891: DOUBLE
4892: LD_INT 1
4894: DEC
4895: ST_TO_ADDR
4896: LD_INT 8
4898: PUSH
4899: FOR_TO
4900: IFFALSE 4978
// for j := 1 to 8 do
4902: LD_ADDR_VAR 0 3
4906: PUSH
4907: DOUBLE
4908: LD_INT 1
4910: DEC
4911: ST_TO_ADDR
4912: LD_INT 8
4914: PUSH
4915: FOR_TO
4916: IFFALSE 4974
// if i <> j then
4918: LD_VAR 0 2
4922: PUSH
4923: LD_VAR 0 3
4927: NONEQUAL
4928: IFFALSE 4952
// SetAttitude ( i , j , att_neutral , true ) else
4930: LD_VAR 0 2
4934: PPUSH
4935: LD_VAR 0 3
4939: PPUSH
4940: LD_INT 0
4942: PPUSH
4943: LD_INT 1
4945: PPUSH
4946: CALL_OW 80
4950: GO 4972
// SetAttitude ( i , j , att_friend , true ) ;
4952: LD_VAR 0 2
4956: PPUSH
4957: LD_VAR 0 3
4961: PPUSH
4962: LD_INT 1
4964: PPUSH
4965: LD_INT 1
4967: PPUSH
4968: CALL_OW 80
4972: GO 4915
4974: POP
4975: POP
4976: GO 4899
4978: POP
4979: POP
// end else
4980: GO 5157
// begin if mpSharedVision then
4982: LD_EXP 14
4986: IFFALSE 5051
// begin for i in mpTeams do
4988: LD_ADDR_VAR 0 2
4992: PUSH
4993: LD_EXP 8
4997: PUSH
4998: FOR_IN
4999: IFFALSE 5049
// for j := 2 to i do
5001: LD_ADDR_VAR 0 3
5005: PUSH
5006: DOUBLE
5007: LD_INT 2
5009: DEC
5010: ST_TO_ADDR
5011: LD_VAR 0 2
5015: PUSH
5016: FOR_TO
5017: IFFALSE 5045
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5019: LD_VAR 0 2
5023: PUSH
5024: LD_VAR 0 3
5028: ARRAY
5029: PPUSH
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 1
5037: ARRAY
5038: PPUSH
5039: CALL_OW 343
5043: GO 5016
5045: POP
5046: POP
5047: GO 4998
5049: POP
5050: POP
// end ; for i := 1 to 8 do
5051: LD_ADDR_VAR 0 2
5055: PUSH
5056: DOUBLE
5057: LD_INT 1
5059: DEC
5060: ST_TO_ADDR
5061: LD_INT 8
5063: PUSH
5064: FOR_TO
5065: IFFALSE 5155
// for j := 1 to 8 do
5067: LD_ADDR_VAR 0 3
5071: PUSH
5072: DOUBLE
5073: LD_INT 1
5075: DEC
5076: ST_TO_ADDR
5077: LD_INT 8
5079: PUSH
5080: FOR_TO
5081: IFFALSE 5151
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5083: LD_EXP 6
5087: PUSH
5088: LD_VAR 0 2
5092: ARRAY
5093: PUSH
5094: LD_EXP 6
5098: PUSH
5099: LD_VAR 0 3
5103: ARRAY
5104: EQUAL
5105: IFFALSE 5129
// SetAttitude ( i , j , att_friend , true ) else
5107: LD_VAR 0 2
5111: PPUSH
5112: LD_VAR 0 3
5116: PPUSH
5117: LD_INT 1
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: CALL_OW 80
5127: GO 5149
// SetAttitude ( i , j , att_enemy , true ) ;
5129: LD_VAR 0 2
5133: PPUSH
5134: LD_VAR 0 3
5138: PPUSH
5139: LD_INT 2
5141: PPUSH
5142: LD_INT 1
5144: PPUSH
5145: CALL_OW 80
5149: GO 5080
5151: POP
5152: POP
5153: GO 5064
5155: POP
5156: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5157: LD_ADDR_OWVAR 71
5161: PUSH
5162: LD_EXP 7
5166: PUSH
5167: LD_OWVAR 2
5171: ARRAY
5172: ST_TO_ADDR
// if IAmSpec then
5173: CALL_OW 531
5177: IFFALSE 5218
// begin FogOff ( true ) ;
5179: LD_INT 1
5181: PPUSH
5182: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5186: LD_EXP 27
5190: PUSH
5191: LD_INT 1
5193: ARRAY
5194: PUSH
5195: LD_INT 2
5197: DIV
5198: PPUSH
5199: LD_EXP 27
5203: PUSH
5204: LD_INT 2
5206: ARRAY
5207: PUSH
5208: LD_INT 2
5210: DIV
5211: PPUSH
5212: CALL_OW 86
// end else
5216: GO 5264
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5218: LD_EXP 19
5222: PUSH
5223: LD_EXP 5
5227: PUSH
5228: LD_OWVAR 2
5232: ARRAY
5233: ARRAY
5234: PUSH
5235: LD_INT 1
5237: ARRAY
5238: PPUSH
5239: LD_EXP 19
5243: PUSH
5244: LD_EXP 5
5248: PUSH
5249: LD_OWVAR 2
5253: ARRAY
5254: ARRAY
5255: PUSH
5256: LD_INT 2
5258: ARRAY
5259: PPUSH
5260: CALL_OW 86
// end ; BeginBuildUp ;
5264: CALL 6265 0 0
// enable ( mpActive ) ;
5268: LD_INT 100
5270: ENABLE_MARKED
// enable ( mpGameType ) ;
5271: LD_EXP 1
5275: ENABLE_MARKED
// mpGameActive := true ;
5276: LD_ADDR_EXP 37
5280: PUSH
5281: LD_INT 1
5283: ST_TO_ADDR
// end ;
5284: LD_VAR 0 1
5288: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5289: LD_INT 0
5291: PPUSH
5292: PPUSH
5293: PPUSH
5294: PPUSH
// result := [ ] ;
5295: LD_ADDR_VAR 0 5
5299: PUSH
5300: EMPTY
5301: ST_TO_ADDR
// class := class_soldier ;
5302: LD_ADDR_VAR 0 8
5306: PUSH
5307: LD_INT 1
5309: ST_TO_ADDR
// uc_side := side ;
5310: LD_ADDR_OWVAR 20
5314: PUSH
5315: LD_VAR 0 1
5319: ST_TO_ADDR
// uc_nation := nation ;
5320: LD_ADDR_OWVAR 21
5324: PUSH
5325: LD_VAR 0 2
5329: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5330: LD_ADDR_OWVAR 26
5334: PUSH
5335: LD_OWVAR 19
5339: PUSH
5340: LD_VAR 0 1
5344: ARRAY
5345: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5346: LD_INT 1
5348: PPUSH
5349: LD_INT 2
5351: PPUSH
5352: CALL_OW 12
5356: PPUSH
5357: LD_VAR 0 8
5361: PPUSH
5362: LD_VAR 0 4
5366: PUSH
5367: LD_INT 2
5369: PLUS
5370: PPUSH
5371: CALL_OW 380
// hc_importance := 105 ;
5375: LD_ADDR_OWVAR 32
5379: PUSH
5380: LD_INT 105
5382: ST_TO_ADDR
// if Multiplayer then
5383: LD_OWVAR 4
5387: IFFALSE 5427
// begin hc_gallery := MULTIAVATARS ;
5389: LD_ADDR_OWVAR 33
5393: PUSH
5394: LD_STRING MULTIAVATARS
5396: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5397: LD_ADDR_OWVAR 34
5401: PUSH
5402: LD_VAR 0 1
5406: PPUSH
5407: CALL_OW 525
5411: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5412: LD_ADDR_OWVAR 27
5416: PUSH
5417: LD_VAR 0 1
5421: PPUSH
5422: CALL_OW 526
5426: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5427: LD_ADDR_VAR 0 5
5431: PUSH
5432: LD_VAR 0 5
5436: PPUSH
5437: CALL_OW 44
5441: PPUSH
5442: CALL 54388 0 2
5446: ST_TO_ADDR
// if mpTeamPreset then
5447: LD_LOC 1
5451: IFFALSE 5547
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5453: LD_LOC 1
5457: PUSH
5458: LD_INT 1
5460: ARRAY
5461: PPUSH
5462: LD_VAR 0 5
5466: PUSH
5467: LD_VAR 0 5
5471: ARRAY
5472: PPUSH
5473: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5477: LD_VAR 0 5
5481: PUSH
5482: LD_VAR 0 5
5486: ARRAY
5487: PPUSH
5488: LD_INT 1
5490: PPUSH
5491: LD_LOC 1
5495: PUSH
5496: LD_INT 1
5498: ARRAY
5499: PPUSH
5500: LD_INT 1
5502: PPUSH
5503: CALL_OW 260
5507: PPUSH
5508: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5512: LD_VAR 0 5
5516: PUSH
5517: LD_VAR 0 5
5521: ARRAY
5522: PPUSH
5523: LD_INT 2
5525: PPUSH
5526: LD_LOC 1
5530: PUSH
5531: LD_INT 1
5533: ARRAY
5534: PPUSH
5535: LD_INT 2
5537: PPUSH
5538: CALL_OW 260
5542: PPUSH
5543: CALL_OW 239
// end ; InitHc_All ( ) ;
5547: CALL_OW 584
// class := 2 ;
5551: LD_ADDR_VAR 0 8
5555: PUSH
5556: LD_INT 2
5558: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5559: LD_ADDR_VAR 0 6
5563: PUSH
5564: DOUBLE
5565: LD_INT 1
5567: DEC
5568: ST_TO_ADDR
5569: LD_VAR 0 3
5573: PUSH
5574: LD_INT 1
5576: MINUS
5577: PUSH
5578: FOR_TO
5579: IFFALSE 5763
// begin PrepareHuman ( false , class , skill ) ;
5581: LD_INT 0
5583: PPUSH
5584: LD_VAR 0 8
5588: PPUSH
5589: LD_VAR 0 4
5593: PPUSH
5594: CALL_OW 380
// un := CreateHuman ;
5598: LD_ADDR_VAR 0 7
5602: PUSH
5603: CALL_OW 44
5607: ST_TO_ADDR
// result := Join ( result , un ) ;
5608: LD_ADDR_VAR 0 5
5612: PUSH
5613: LD_VAR 0 5
5617: PPUSH
5618: LD_VAR 0 7
5622: PPUSH
5623: CALL 54388 0 2
5627: ST_TO_ADDR
// if mpTeamPreset then
5628: LD_LOC 1
5632: IFFALSE 5728
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5634: LD_LOC 1
5638: PUSH
5639: LD_VAR 0 6
5643: PUSH
5644: LD_INT 1
5646: PLUS
5647: ARRAY
5648: PPUSH
5649: LD_VAR 0 7
5653: PPUSH
5654: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5658: LD_VAR 0 7
5662: PPUSH
5663: LD_INT 1
5665: PPUSH
5666: LD_LOC 1
5670: PUSH
5671: LD_VAR 0 6
5675: PUSH
5676: LD_INT 1
5678: PLUS
5679: ARRAY
5680: PPUSH
5681: LD_INT 1
5683: PPUSH
5684: CALL_OW 260
5688: PPUSH
5689: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5693: LD_VAR 0 7
5697: PPUSH
5698: LD_INT 2
5700: PPUSH
5701: LD_LOC 1
5705: PUSH
5706: LD_VAR 0 6
5710: PUSH
5711: LD_INT 1
5713: PLUS
5714: ARRAY
5715: PPUSH
5716: LD_INT 2
5718: PPUSH
5719: CALL_OW 260
5723: PPUSH
5724: CALL_OW 239
// end ; class := Inc ( class ) ;
5728: LD_ADDR_VAR 0 8
5732: PUSH
5733: LD_VAR 0 8
5737: PPUSH
5738: CALL 55749 0 1
5742: ST_TO_ADDR
// if class = 5 then
5743: LD_VAR 0 8
5747: PUSH
5748: LD_INT 5
5750: EQUAL
5751: IFFALSE 5761
// class := 1 ;
5753: LD_ADDR_VAR 0 8
5757: PUSH
5758: LD_INT 1
5760: ST_TO_ADDR
// end ;
5761: GO 5578
5763: POP
5764: POP
// if not mpTeamPreset then
5765: LD_LOC 1
5769: NOT
5770: IFFALSE 5782
// mpTeamPreset := result ;
5772: LD_ADDR_LOC 1
5776: PUSH
5777: LD_VAR 0 5
5781: ST_TO_ADDR
// end ;
5782: LD_VAR 0 5
5786: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5787: LD_INT 0
5789: PPUSH
5790: PPUSH
// result := [ ] ;
5791: LD_ADDR_VAR 0 4
5795: PUSH
5796: EMPTY
5797: ST_TO_ADDR
// if not vehicles then
5798: LD_VAR 0 3
5802: NOT
5803: IFFALSE 5807
// exit ;
5805: GO 5966
// for i := 1 to vehicles [ nation ] do
5807: LD_ADDR_VAR 0 5
5811: PUSH
5812: DOUBLE
5813: LD_INT 1
5815: DEC
5816: ST_TO_ADDR
5817: LD_VAR 0 3
5821: PUSH
5822: LD_VAR 0 2
5826: ARRAY
5827: PUSH
5828: FOR_TO
5829: IFFALSE 5964
// begin uc_side := side ;
5831: LD_ADDR_OWVAR 20
5835: PUSH
5836: LD_VAR 0 1
5840: ST_TO_ADDR
// uc_nation := nation ;
5841: LD_ADDR_OWVAR 21
5845: PUSH
5846: LD_VAR 0 2
5850: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5851: LD_VAR 0 3
5855: PUSH
5856: LD_VAR 0 2
5860: ARRAY
5861: PUSH
5862: LD_VAR 0 5
5866: ARRAY
5867: PUSH
5868: LD_INT 1
5870: ARRAY
5871: PPUSH
5872: LD_VAR 0 3
5876: PUSH
5877: LD_VAR 0 2
5881: ARRAY
5882: PUSH
5883: LD_VAR 0 5
5887: ARRAY
5888: PUSH
5889: LD_INT 2
5891: ARRAY
5892: PPUSH
5893: LD_VAR 0 3
5897: PUSH
5898: LD_VAR 0 2
5902: ARRAY
5903: PUSH
5904: LD_VAR 0 5
5908: ARRAY
5909: PUSH
5910: LD_INT 3
5912: ARRAY
5913: PPUSH
5914: LD_VAR 0 3
5918: PUSH
5919: LD_VAR 0 2
5923: ARRAY
5924: PUSH
5925: LD_VAR 0 5
5929: ARRAY
5930: PUSH
5931: LD_INT 4
5933: ARRAY
5934: PPUSH
5935: LD_INT 80
5937: PPUSH
5938: CALL 21517 0 5
// result := Join ( result , CreateVehicle ) ;
5942: LD_ADDR_VAR 0 4
5946: PUSH
5947: LD_VAR 0 4
5951: PPUSH
5952: CALL_OW 45
5956: PPUSH
5957: CALL 54388 0 2
5961: ST_TO_ADDR
// end ;
5962: GO 5828
5964: POP
5965: POP
// end ;
5966: LD_VAR 0 4
5970: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5971: LD_INT 0
5973: PPUSH
5974: PPUSH
// for i in mpBattleFlags do
5975: LD_ADDR_VAR 0 3
5979: PUSH
5980: LD_EXP 21
5984: PUSH
5985: FOR_IN
5986: IFFALSE 6063
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5988: LD_VAR 0 3
5992: PPUSH
5993: LD_INT 1
5995: PUSH
5996: LD_VAR 0 1
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PUSH
6005: LD_INT 2
6007: PUSH
6008: LD_VAR 0 1
6012: PUSH
6013: LD_REAL  7.00000000000000E-0001
6016: MUL
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: PUSH
6022: LD_INT 3
6024: PUSH
6025: LD_VAR 0 1
6029: PUSH
6030: LD_REAL  4.00000000000000E-0001
6033: MUL
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: PUSH
6039: LD_INT 20
6041: PUSH
6042: LD_VAR 0 1
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: PPUSH
6057: CALL_OW 423
6061: GO 5985
6063: POP
6064: POP
// end ;
6065: LD_VAR 0 2
6069: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6070: LD_INT 100
6072: IFFALSE 6167
6074: GO 6076
6076: DISABLE
6077: LD_INT 0
6079: PPUSH
6080: PPUSH
// begin if mpBattleFlag <= 0 then
6081: LD_EXP 20
6085: PUSH
6086: LD_INT 0
6088: LESSEQUAL
6089: IFFALSE 6093
// exit ;
6091: GO 6167
// strength := 100 ;
6093: LD_ADDR_VAR 0 2
6097: PUSH
6098: LD_INT 100
6100: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6101: LD_EXP 20
6105: PPUSH
6106: CALL_OW 67
// strength := Dec ( strength ) ;
6110: LD_ADDR_VAR 0 2
6114: PUSH
6115: LD_VAR 0 2
6119: PPUSH
6120: CALL 55771 0 1
6124: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6125: LD_VAR 0 2
6129: PPUSH
6130: CALL 5971 0 1
// until not strength ;
6134: LD_VAR 0 2
6138: NOT
6139: IFFALSE 6101
// for i in mpBattleFlags do
6141: LD_ADDR_VAR 0 1
6145: PUSH
6146: LD_EXP 21
6150: PUSH
6151: FOR_IN
6152: IFFALSE 6165
// KillBattleFlag ( i ) ;
6154: LD_VAR 0 1
6158: PPUSH
6159: CALL_OW 419
6163: GO 6151
6165: POP
6166: POP
// end ;
6167: PPOPN 2
6169: END
// every 0 0$1 marked mpActive do var side , tmp ;
6170: GO 6172
6172: DISABLE
6173: LD_INT 0
6175: PPUSH
6176: PPUSH
// begin if mpSibBomb <= 1 then
6177: LD_EXP 26
6181: PUSH
6182: LD_INT 1
6184: LESSEQUAL
6185: IFFALSE 6189
// exit ;
6187: GO 6262
// tmp := mpSibBomb ;
6189: LD_ADDR_VAR 0 2
6193: PUSH
6194: LD_EXP 26
6198: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6199: LD_INT 35
6201: PPUSH
6202: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6206: LD_ADDR_VAR 0 2
6210: PUSH
6211: LD_VAR 0 2
6215: PUSH
6216: LD_INT 35
6218: MINUS
6219: ST_TO_ADDR
// until not tmp ;
6220: LD_VAR 0 2
6224: NOT
6225: IFFALSE 6199
// for side := 1 to 8 do
6227: LD_ADDR_VAR 0 1
6231: PUSH
6232: DOUBLE
6233: LD_INT 1
6235: DEC
6236: ST_TO_ADDR
6237: LD_INT 8
6239: PUSH
6240: FOR_TO
6241: IFFALSE 6260
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6243: LD_INT 25
6245: PPUSH
6246: LD_VAR 0 1
6250: PPUSH
6251: LD_INT 1
6253: PPUSH
6254: CALL_OW 322
6258: GO 6240
6260: POP
6261: POP
// end ;
6262: PPOPN 2
6264: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6265: LD_INT 0
6267: PPUSH
6268: PPUSH
6269: PPUSH
// mpBuildUpTimeDelay := 0 ;
6270: LD_ADDR_EXP 40
6274: PUSH
6275: LD_INT 0
6277: ST_TO_ADDR
// if not mpBuildUpTime then
6278: LD_EXP 18
6282: NOT
6283: IFFALSE 6287
// exit ;
6285: GO 6470
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6287: LD_ADDR_EXP 40
6291: PUSH
6292: LD_INT 8400
6294: PUSH
6295: LD_INT 2100
6297: PUSH
6298: LD_EXP 18
6302: MUL
6303: PLUS
6304: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6305: LD_ADDR_EXP 41
6309: PUSH
6310: LD_INT 1
6312: ST_TO_ADDR
// for i := 1 to 8 do
6313: LD_ADDR_VAR 0 2
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_INT 8
6325: PUSH
6326: FOR_TO
6327: IFFALSE 6468
// if mpSidePositions [ i ] then
6329: LD_EXP 5
6333: PUSH
6334: LD_VAR 0 2
6338: ARRAY
6339: IFFALSE 6466
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6341: LD_EXP 17
6345: PUSH
6346: LD_EXP 5
6350: PUSH
6351: LD_VAR 0 2
6355: ARRAY
6356: ARRAY
6357: PPUSH
6358: LD_INT 5
6360: PPUSH
6361: CALL_OW 424
// for j := 1 to 8 do
6365: LD_ADDR_VAR 0 3
6369: PUSH
6370: DOUBLE
6371: LD_INT 1
6373: DEC
6374: ST_TO_ADDR
6375: LD_INT 8
6377: PUSH
6378: FOR_TO
6379: IFFALSE 6464
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6381: LD_EXP 5
6385: PUSH
6386: LD_VAR 0 3
6390: ARRAY
6391: PUSH
6392: LD_EXP 6
6396: PUSH
6397: LD_VAR 0 2
6401: ARRAY
6402: PUSH
6403: LD_EXP 6
6407: PUSH
6408: LD_VAR 0 3
6412: ARRAY
6413: NONEQUAL
6414: PUSH
6415: LD_EXP 9
6419: NOT
6420: PUSH
6421: LD_VAR 0 2
6425: PUSH
6426: LD_VAR 0 3
6430: NONEQUAL
6431: AND
6432: OR
6433: AND
6434: IFFALSE 6462
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6436: LD_VAR 0 3
6440: PPUSH
6441: LD_EXP 17
6445: PUSH
6446: LD_EXP 5
6450: PUSH
6451: LD_VAR 0 2
6455: ARRAY
6456: ARRAY
6457: PPUSH
6458: CALL_OW 333
6462: GO 6378
6464: POP
6465: POP
// end ;
6466: GO 6326
6468: POP
6469: POP
// end ;
6470: LD_VAR 0 1
6474: RET
// function EndBuildUp ; var i , j ; begin
6475: LD_INT 0
6477: PPUSH
6478: PPUSH
6479: PPUSH
// mpBuildUpTimeActive := false ;
6480: LD_ADDR_EXP 41
6484: PUSH
6485: LD_INT 0
6487: ST_TO_ADDR
// for i := 1 to 8 do
6488: LD_ADDR_VAR 0 2
6492: PUSH
6493: DOUBLE
6494: LD_INT 1
6496: DEC
6497: ST_TO_ADDR
6498: LD_INT 8
6500: PUSH
6501: FOR_TO
6502: IFFALSE 6643
// if mpSidePositions [ i ] then
6504: LD_EXP 5
6508: PUSH
6509: LD_VAR 0 2
6513: ARRAY
6514: IFFALSE 6641
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6516: LD_EXP 17
6520: PUSH
6521: LD_EXP 5
6525: PUSH
6526: LD_VAR 0 2
6530: ARRAY
6531: ARRAY
6532: PPUSH
6533: LD_INT 0
6535: PPUSH
6536: CALL_OW 424
// for j := 1 to 8 do
6540: LD_ADDR_VAR 0 3
6544: PUSH
6545: DOUBLE
6546: LD_INT 1
6548: DEC
6549: ST_TO_ADDR
6550: LD_INT 8
6552: PUSH
6553: FOR_TO
6554: IFFALSE 6639
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6556: LD_EXP 5
6560: PUSH
6561: LD_VAR 0 3
6565: ARRAY
6566: PUSH
6567: LD_EXP 6
6571: PUSH
6572: LD_VAR 0 2
6576: ARRAY
6577: PUSH
6578: LD_EXP 6
6582: PUSH
6583: LD_VAR 0 3
6587: ARRAY
6588: NONEQUAL
6589: PUSH
6590: LD_EXP 9
6594: NOT
6595: PUSH
6596: LD_VAR 0 2
6600: PUSH
6601: LD_VAR 0 3
6605: NONEQUAL
6606: AND
6607: OR
6608: AND
6609: IFFALSE 6637
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6611: LD_VAR 0 3
6615: PPUSH
6616: LD_EXP 17
6620: PUSH
6621: LD_EXP 5
6625: PUSH
6626: LD_VAR 0 2
6630: ARRAY
6631: ARRAY
6632: PPUSH
6633: CALL_OW 334
6637: GO 6553
6639: POP
6640: POP
// end ;
6641: GO 6501
6643: POP
6644: POP
// end ;
6645: LD_VAR 0 1
6649: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6650: LD_EXP 41
6654: IFFALSE 6829
6656: GO 6658
6658: DISABLE
6659: LD_INT 0
6661: PPUSH
6662: PPUSH
// begin for i := 1 to 8 do
6663: LD_ADDR_VAR 0 1
6667: PUSH
6668: DOUBLE
6669: LD_INT 1
6671: DEC
6672: ST_TO_ADDR
6673: LD_INT 8
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6826
// if mpSidePositions [ i ] then
6679: LD_EXP 5
6683: PUSH
6684: LD_VAR 0 1
6688: ARRAY
6689: IFFALSE 6824
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6691: LD_ADDR_VAR 0 2
6695: PUSH
6696: LD_EXP 17
6700: PUSH
6701: LD_EXP 5
6705: PUSH
6706: LD_VAR 0 1
6710: ARRAY
6711: ARRAY
6712: PPUSH
6713: LD_INT 2
6715: PUSH
6716: LD_INT 21
6718: PUSH
6719: LD_INT 1
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 21
6728: PUSH
6729: LD_INT 2
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 22
6743: PUSH
6744: LD_OWVAR 2
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PPUSH
6757: CALL_OW 70
6761: PUSH
6762: FOR_IN
6763: IFFALSE 6822
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6765: LD_EXP 6
6769: PUSH
6770: LD_VAR 0 1
6774: ARRAY
6775: PUSH
6776: LD_EXP 6
6780: PUSH
6781: LD_OWVAR 2
6785: ARRAY
6786: NONEQUAL
6787: PUSH
6788: LD_EXP 9
6792: NOT
6793: PUSH
6794: LD_VAR 0 1
6798: PUSH
6799: LD_OWVAR 2
6803: NONEQUAL
6804: AND
6805: OR
6806: IFFALSE 6820
// ComMoveToArea ( un , BuildUpEscape ) ;
6808: LD_VAR 0 2
6812: PPUSH
6813: LD_INT 59
6815: PPUSH
6816: CALL_OW 113
6820: GO 6762
6822: POP
6823: POP
6824: GO 6676
6826: POP
6827: POP
// enable ;
6828: ENABLE
// end ;
6829: PPOPN 2
6831: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6832: LD_EXP 18
6836: IFFALSE 6886
6838: GO 6840
6840: DISABLE
6841: LD_INT 0
6843: PPUSH
// begin tmp := mpBuildUpTime ;
6844: LD_ADDR_VAR 0 1
6848: PUSH
6849: LD_EXP 18
6853: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6854: LD_INT 35
6856: PPUSH
6857: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6861: LD_ADDR_VAR 0 1
6865: PUSH
6866: LD_VAR 0 1
6870: PUSH
6871: LD_INT 35
6873: MINUS
6874: ST_TO_ADDR
// until not tmp ;
6875: LD_VAR 0 1
6879: NOT
6880: IFFALSE 6854
// EndBuildUp ;
6882: CALL 6475 0 0
// end ;
6886: PPOPN 1
6888: END
// every 0 0$1 trigger mpActive marked mpWin do
6889: LD_INT 100
6891: IFFALSE 6925
6893: GO 6895
6895: DISABLE
// begin if IAmServer then
6896: CALL_OW 518
6900: IFFALSE 6909
// wait ( 0 0$3 ) ;
6902: LD_INT 105
6904: PPUSH
6905: CALL_OW 67
// if Multiplayer then
6909: LD_OWVAR 4
6913: IFFALSE 6921
// YouWinInMultiplayer else
6915: CALL_OW 106
6919: GO 6925
// YouWin ;
6921: CALL_OW 103
// end ;
6925: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6926: LD_INT 0
6928: PPUSH
// result := false ;
6929: LD_ADDR_VAR 0 3
6933: PUSH
6934: LD_INT 0
6936: ST_TO_ADDR
// case gameType of GameTypeNormal :
6937: LD_VAR 0 1
6941: PUSH
6942: LD_INT 1
6944: DOUBLE
6945: EQUAL
6946: IFTRUE 6950
6948: GO 7023
6950: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6951: LD_ADDR_VAR 0 3
6955: PUSH
6956: LD_INT 22
6958: PUSH
6959: LD_VAR 0 2
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: LD_INT 2
6970: PUSH
6971: LD_INT 21
6973: PUSH
6974: LD_INT 1
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 33
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: LD_INT 33
6993: PUSH
6994: LD_INT 5
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PPUSH
7011: CALL_OW 69
7015: PPUSH
7016: CALL 18779 0 1
7020: ST_TO_ADDR
// end ; GameTypeSurvival :
7021: GO 7258
7023: LD_INT 2
7025: DOUBLE
7026: EQUAL
7027: IFTRUE 7031
7029: GO 7159
7031: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7032: LD_ADDR_VAR 0 3
7036: PUSH
7037: LD_INT 22
7039: PUSH
7040: LD_VAR 0 2
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 2
7051: PUSH
7052: LD_INT 30
7054: PUSH
7055: LD_INT 0
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 30
7064: PUSH
7065: LD_INT 1
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: LIST
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PPUSH
7081: CALL_OW 69
7085: PPUSH
7086: CALL 18779 0 1
7090: PUSH
7091: LD_INT 22
7093: PUSH
7094: LD_VAR 0 2
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: LD_INT 2
7105: PUSH
7106: LD_INT 21
7108: PUSH
7109: LD_INT 1
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PUSH
7116: LD_INT 33
7118: PUSH
7119: LD_INT 3
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: LD_INT 33
7128: PUSH
7129: LD_INT 5
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PPUSH
7146: CALL_OW 69
7150: PPUSH
7151: CALL 18779 0 1
7155: AND
7156: ST_TO_ADDR
// end ; GameTypeKing :
7157: GO 7258
7159: LD_INT 3
7161: DOUBLE
7162: EQUAL
7163: IFTRUE 7167
7165: GO 7257
7167: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7168: LD_ADDR_VAR 0 3
7172: PUSH
7173: LD_INT 22
7175: PUSH
7176: LD_VAR 0 2
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 2
7187: PUSH
7188: LD_INT 21
7190: PUSH
7191: LD_INT 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 33
7200: PUSH
7201: LD_INT 3
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 33
7210: PUSH
7211: LD_INT 5
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PPUSH
7228: CALL_OW 69
7232: PPUSH
7233: CALL 18779 0 1
7237: PUSH
7238: LD_VAR 0 2
7242: PPUSH
7243: CALL 9786 0 1
7247: PUSH
7248: LD_EXP 33
7252: LESS
7253: AND
7254: ST_TO_ADDR
// end ; end ;
7255: GO 7258
7257: POP
// end ;
7258: LD_VAR 0 3
7262: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7263: LD_INT 100
7265: IFFALSE 7487
7267: GO 7269
7269: DISABLE
7270: LD_INT 0
7272: PPUSH
7273: PPUSH
// begin if Multiplayer then
7274: LD_OWVAR 4
7278: IFFALSE 7286
// SetPlayerSpectator ( ) else
7280: CALL_OW 572
7284: GO 7295
// FogOff ( your_side ) ;
7286: LD_OWVAR 2
7290: PPUSH
7291: CALL_OW 344
// repeat gameIsOn := false ;
7295: LD_ADDR_VAR 0 1
7299: PUSH
7300: LD_INT 0
7302: ST_TO_ADDR
// for i := 1 to 8 do
7303: LD_ADDR_VAR 0 2
7307: PUSH
7308: DOUBLE
7309: LD_INT 1
7311: DEC
7312: ST_TO_ADDR
7313: LD_INT 8
7315: PUSH
7316: FOR_TO
7317: IFFALSE 7439
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7319: LD_EXP 5
7323: PUSH
7324: LD_VAR 0 2
7328: ARRAY
7329: PUSH
7330: LD_VAR 0 2
7334: PPUSH
7335: CALL_OW 108
7339: AND
7340: PUSH
7341: LD_VAR 0 2
7345: PUSH
7346: LD_OWVAR 2
7350: NONEQUAL
7351: AND
7352: IFFALSE 7437
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7354: LD_EXP 6
7358: PUSH
7359: LD_VAR 0 2
7363: ARRAY
7364: NOT
7365: PUSH
7366: LD_EXP 6
7370: PUSH
7371: LD_VAR 0 2
7375: ARRAY
7376: PUSH
7377: LD_EXP 6
7381: PUSH
7382: LD_OWVAR 2
7386: ARRAY
7387: NONEQUAL
7388: PUSH
7389: LD_OWVAR 2
7393: PPUSH
7394: LD_VAR 0 2
7398: PPUSH
7399: CALL_OW 81
7403: PUSH
7404: LD_INT 1
7406: NONEQUAL
7407: AND
7408: OR
7409: IFFALSE 7437
// if HasPowerByGameType ( mpGameType , i ) then
7411: LD_EXP 1
7415: PPUSH
7416: LD_VAR 0 2
7420: PPUSH
7421: CALL 6926 0 2
7425: IFFALSE 7437
// begin gameIsOn := true ;
7427: LD_ADDR_VAR 0 1
7431: PUSH
7432: LD_INT 1
7434: ST_TO_ADDR
// break ;
7435: GO 7439
// end ;
7437: GO 7316
7439: POP
7440: POP
// wait ( 100 ) ;
7441: LD_INT 100
7443: PPUSH
7444: CALL_OW 67
// until not gameIsOn ;
7448: LD_VAR 0 1
7452: NOT
7453: IFFALSE 7295
// if IAmServer then
7455: CALL_OW 518
7459: IFFALSE 7468
// wait ( 0 0$3 ) ;
7461: LD_INT 105
7463: PPUSH
7464: CALL_OW 67
// if Multiplayer then
7468: LD_OWVAR 4
7472: IFFALSE 7480
// YouLostInMultiplayer else
7474: CALL_OW 107
7478: GO 7487
// YouLost (  ) ;
7480: LD_STRING 
7482: PPUSH
7483: CALL_OW 104
// end ;
7487: PPOPN 2
7489: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7490: LD_EXP 31
7494: IFFALSE 7870
7496: GO 7498
7498: DISABLE
7499: LD_INT 0
7501: PPUSH
7502: PPUSH
7503: PPUSH
7504: PPUSH
7505: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7506: LD_ADDR_VAR 0 5
7510: PUSH
7511: LD_INT 1
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 3
7519: PUSH
7520: LD_INT 4
7522: PUSH
7523: LD_INT 5
7525: PUSH
7526: LD_INT 6
7528: PUSH
7529: LD_INT 7
7531: PUSH
7532: LD_INT 8
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7545: LD_INT 350
7547: PPUSH
7548: CALL_OW 67
// for i := 1 to 8 do
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: DOUBLE
7558: LD_INT 1
7560: DEC
7561: ST_TO_ADDR
7562: LD_INT 8
7564: PUSH
7565: FOR_TO
7566: IFFALSE 7840
// begin j := sides [ i ] ;
7568: LD_ADDR_VAR 0 2
7572: PUSH
7573: LD_VAR 0 5
7577: PUSH
7578: LD_VAR 0 1
7582: ARRAY
7583: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7584: LD_EXP 38
7588: PUSH
7589: LD_VAR 0 2
7593: ARRAY
7594: PPUSH
7595: CALL 18779 0 1
7599: PUSH
7600: LD_VAR 0 2
7604: PPUSH
7605: CALL_OW 108
7609: AND
7610: PUSH
7611: LD_EXP 1
7615: PPUSH
7616: LD_VAR 0 2
7620: PPUSH
7621: CALL 6926 0 2
7625: AND
7626: IFFALSE 7838
// begin wait ( mpRespawn div 3 ) ;
7628: LD_EXP 31
7632: PUSH
7633: LD_INT 3
7635: DIV
7636: PPUSH
7637: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7641: LD_ADDR_VAR 0 3
7645: PUSH
7646: LD_INT 22
7648: PUSH
7649: LD_VAR 0 2
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 50
7660: PUSH
7661: EMPTY
7662: LIST
7663: PUSH
7664: LD_INT 2
7666: PUSH
7667: LD_INT 30
7669: PUSH
7670: LD_INT 0
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PUSH
7677: LD_INT 30
7679: PUSH
7680: LD_INT 1
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: LIST
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: LIST
7696: PPUSH
7697: CALL_OW 69
7701: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7702: LD_VAR 0 3
7706: NOT
7707: PUSH
7708: LD_VAR 0 2
7712: PPUSH
7713: CALL_OW 108
7717: NOT
7718: OR
7719: PUSH
7720: LD_EXP 1
7724: PPUSH
7725: LD_VAR 0 2
7729: PPUSH
7730: CALL 6926 0 2
7734: NOT
7735: OR
7736: IFFALSE 7740
// continue ;
7738: GO 7565
// spawn := tmp [ 1 ] ;
7740: LD_ADDR_VAR 0 4
7744: PUSH
7745: LD_VAR 0 3
7749: PUSH
7750: LD_INT 1
7752: ARRAY
7753: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7754: LD_EXP 38
7758: PUSH
7759: LD_VAR 0 2
7763: ARRAY
7764: PUSH
7765: LD_INT 1
7767: ARRAY
7768: PPUSH
7769: LD_VAR 0 4
7773: PPUSH
7774: CALL_OW 250
7778: PPUSH
7779: LD_VAR 0 4
7783: PPUSH
7784: CALL_OW 251
7788: PPUSH
7789: LD_INT 32
7791: PPUSH
7792: LD_INT 1
7794: PPUSH
7795: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7799: LD_ADDR_EXP 38
7803: PUSH
7804: LD_EXP 38
7808: PPUSH
7809: LD_VAR 0 2
7813: PPUSH
7814: LD_EXP 38
7818: PUSH
7819: LD_VAR 0 2
7823: ARRAY
7824: PPUSH
7825: LD_INT 1
7827: PPUSH
7828: CALL_OW 3
7832: PPUSH
7833: CALL_OW 1
7837: ST_TO_ADDR
// end ; end ;
7838: GO 7565
7840: POP
7841: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7842: LD_ADDR_VAR 0 5
7846: PUSH
7847: LD_VAR 0 5
7851: PPUSH
7852: LD_INT 1
7854: PPUSH
7855: LD_INT 8
7857: PPUSH
7858: LD_INT 1
7860: PPUSH
7861: CALL 21057 0 4
7865: ST_TO_ADDR
// until false ;
7866: LD_INT 0
7868: IFFALSE 7545
// end ;
7870: PPOPN 5
7872: END
// every 0 0$1 marked mpActive do
7873: GO 7875
7875: DISABLE
// begin enable ;
7876: ENABLE
// if not mpDisplayStrings then
7877: LD_EXP 36
7881: NOT
7882: IFFALSE 7893
// begin display_strings := [ ] ;
7884: LD_ADDR_OWVAR 47
7888: PUSH
7889: EMPTY
7890: ST_TO_ADDR
// exit ;
7891: GO 7903
// end ; display_strings := mpDisplayStrings ;
7893: LD_ADDR_OWVAR 47
7897: PUSH
7898: LD_EXP 36
7902: ST_TO_ADDR
// end ; end_of_file
7903: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7904: LD_INT 0
7906: PPUSH
7907: PPUSH
7908: PPUSH
7909: PPUSH
7910: PPUSH
7911: PPUSH
7912: PPUSH
7913: PPUSH
7914: PPUSH
// if GetType ( un ) = unit_vehicle then
7915: LD_VAR 0 1
7919: PPUSH
7920: CALL_OW 247
7924: PUSH
7925: LD_INT 2
7927: EQUAL
7928: IFFALSE 7932
// exit ;
7930: GO 8564
// side := GetSide ( un ) ;
7932: LD_ADDR_VAR 0 9
7936: PUSH
7937: LD_VAR 0 1
7941: PPUSH
7942: CALL_OW 255
7946: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7947: LD_EXP 1
7951: PUSH
7952: LD_INT 2
7954: EQUAL
7955: IFFALSE 8031
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7957: LD_VAR 0 1
7961: PPUSH
7962: CALL_OW 266
7966: PUSH
7967: LD_INT 0
7969: PUSH
7970: LD_INT 1
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: IN
7977: IFFALSE 8031
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7979: LD_ADDR_VAR 0 3
7983: PUSH
7984: LD_INT 22
7986: PUSH
7987: LD_VAR 0 9
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: PUSH
7996: LD_INT 21
7998: PUSH
7999: LD_INT 1
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: PPUSH
8010: CALL_OW 69
8014: PUSH
8015: FOR_IN
8016: IFFALSE 8029
// KillUnit ( i ) ;
8018: LD_VAR 0 3
8022: PPUSH
8023: CALL_OW 66
8027: GO 8015
8029: POP
8030: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8031: LD_VAR 0 1
8035: PPUSH
8036: CALL_OW 257
8040: PUSH
8041: LD_INT 12
8043: PUSH
8044: LD_INT 17
8046: PUSH
8047: LD_INT 15
8049: PUSH
8050: LD_INT 16
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: IN
8059: PUSH
8060: LD_VAR 0 1
8064: PPUSH
8065: CALL_OW 263
8069: PUSH
8070: LD_INT 5
8072: EQUAL
8073: OR
8074: IFFALSE 8293
// begin tag := 0 ;
8076: LD_ADDR_VAR 0 5
8080: PUSH
8081: LD_INT 0
8083: ST_TO_ADDR
// for i := 1 to 8 do
8084: LD_ADDR_VAR 0 3
8088: PUSH
8089: DOUBLE
8090: LD_INT 1
8092: DEC
8093: ST_TO_ADDR
8094: LD_INT 8
8096: PUSH
8097: FOR_TO
8098: IFFALSE 8132
// if un in mpApePosIndex [ i ] then
8100: LD_VAR 0 1
8104: PUSH
8105: LD_EXP 30
8109: PUSH
8110: LD_VAR 0 3
8114: ARRAY
8115: IN
8116: IFFALSE 8130
// begin tag := i ;
8118: LD_ADDR_VAR 0 5
8122: PUSH
8123: LD_VAR 0 3
8127: ST_TO_ADDR
// break ;
8128: GO 8132
// end ;
8130: GO 8097
8132: POP
8133: POP
// if not tag then
8134: LD_VAR 0 5
8138: NOT
8139: IFFALSE 8143
// exit ;
8141: GO 8564
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8143: LD_ADDR_VAR 0 7
8147: PUSH
8148: LD_EXP 29
8152: PUSH
8153: LD_EXP 5
8157: PUSH
8158: LD_VAR 0 5
8162: ARRAY
8163: ARRAY
8164: ST_TO_ADDR
// if not area then
8165: LD_VAR 0 7
8169: NOT
8170: IFFALSE 8174
// exit ;
8172: GO 8564
// wait ( 4 4$00 ) ;
8174: LD_INT 8400
8176: PPUSH
8177: CALL_OW 67
// repeat wait ( 10 ) ;
8181: LD_INT 10
8183: PPUSH
8184: CALL_OW 67
// until not mpBlockRespThread ;
8188: LD_EXP 39
8192: NOT
8193: IFFALSE 8181
// mpBlockRespThread := true ;
8195: LD_ADDR_EXP 39
8199: PUSH
8200: LD_INT 1
8202: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8203: LD_INT 0
8205: PPUSH
8206: CALL 50636 0 1
// ape := CreateHuman ;
8210: LD_ADDR_VAR 0 4
8214: PUSH
8215: CALL_OW 44
8219: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8220: LD_ADDR_EXP 30
8224: PUSH
8225: LD_EXP 30
8229: PPUSH
8230: LD_VAR 0 5
8234: PPUSH
8235: LD_EXP 30
8239: PUSH
8240: LD_VAR 0 5
8244: ARRAY
8245: PPUSH
8246: LD_VAR 0 4
8250: PPUSH
8251: CALL 54388 0 2
8255: PPUSH
8256: CALL_OW 1
8260: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8261: LD_VAR 0 4
8265: PPUSH
8266: LD_VAR 0 7
8270: PPUSH
8271: LD_INT 0
8273: PPUSH
8274: CALL_OW 49
// wait ( 10 ) ;
8278: LD_INT 10
8280: PPUSH
8281: CALL_OW 67
// mpBlockRespThread := false ;
8285: LD_ADDR_EXP 39
8289: PUSH
8290: LD_INT 0
8292: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8293: LD_VAR 0 1
8297: PPUSH
8298: CALL_OW 247
8302: PUSH
8303: LD_INT 1
8305: EQUAL
8306: PUSH
8307: LD_VAR 0 1
8311: PPUSH
8312: CALL_OW 248
8316: PUSH
8317: LD_INT 0
8319: GREATER
8320: AND
8321: IFFALSE 8564
// begin if not mpRespawn then
8323: LD_EXP 31
8327: NOT
8328: IFFALSE 8332
// exit ;
8330: GO 8564
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8332: LD_VAR 0 9
8336: PPUSH
8337: CALL_OW 108
8341: NOT
8342: PUSH
8343: LD_EXP 1
8347: PPUSH
8348: LD_VAR 0 9
8352: PPUSH
8353: CALL 6926 0 2
8357: NOT
8358: AND
8359: IFFALSE 8363
// exit ;
8361: GO 8564
// side := GetSide ( un ) ;
8363: LD_ADDR_VAR 0 9
8367: PUSH
8368: LD_VAR 0 1
8372: PPUSH
8373: CALL_OW 255
8377: ST_TO_ADDR
// nation := GetNation ( un ) ;
8378: LD_ADDR_VAR 0 8
8382: PUSH
8383: LD_VAR 0 1
8387: PPUSH
8388: CALL_OW 248
8392: ST_TO_ADDR
// class := GetClass ( un ) ;
8393: LD_ADDR_VAR 0 6
8397: PUSH
8398: LD_VAR 0 1
8402: PPUSH
8403: CALL_OW 257
8407: ST_TO_ADDR
// if class > 4 then
8408: LD_VAR 0 6
8412: PUSH
8413: LD_INT 4
8415: GREATER
8416: IFFALSE 8426
// class := 1 ;
8418: LD_ADDR_VAR 0 6
8422: PUSH
8423: LD_INT 1
8425: ST_TO_ADDR
// repeat wait ( 10 ) ;
8426: LD_INT 10
8428: PPUSH
8429: CALL_OW 67
// until not mpBlockRespThread ;
8433: LD_EXP 39
8437: NOT
8438: IFFALSE 8426
// mpBlockRespThread := true ;
8440: LD_ADDR_EXP 39
8444: PUSH
8445: LD_INT 1
8447: ST_TO_ADDR
// uc_side := side ;
8448: LD_ADDR_OWVAR 20
8452: PUSH
8453: LD_VAR 0 9
8457: ST_TO_ADDR
// uc_nation := nation ;
8458: LD_ADDR_OWVAR 21
8462: PUSH
8463: LD_VAR 0 8
8467: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8468: LD_INT 0
8470: PPUSH
8471: LD_VAR 0 6
8475: PPUSH
8476: LD_INT 2
8478: PPUSH
8479: CALL_OW 380
// un := CreateHuman ;
8483: LD_ADDR_VAR 0 1
8487: PUSH
8488: CALL_OW 44
8492: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8493: LD_ADDR_EXP 38
8497: PUSH
8498: LD_EXP 38
8502: PPUSH
8503: LD_VAR 0 9
8507: PPUSH
8508: LD_EXP 38
8512: PUSH
8513: LD_VAR 0 9
8517: ARRAY
8518: PPUSH
8519: LD_EXP 38
8523: PUSH
8524: LD_VAR 0 9
8528: ARRAY
8529: PUSH
8530: LD_INT 1
8532: PLUS
8533: PPUSH
8534: LD_VAR 0 1
8538: PPUSH
8539: CALL_OW 1
8543: PPUSH
8544: CALL_OW 1
8548: ST_TO_ADDR
// wait ( 10 ) ;
8549: LD_INT 10
8551: PPUSH
8552: CALL_OW 67
// mpBlockRespThread := false ;
8556: LD_ADDR_EXP 39
8560: PUSH
8561: LD_INT 0
8563: ST_TO_ADDR
// end ; end ;
8564: LD_VAR 0 2
8568: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8569: LD_INT 0
8571: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8572: LD_VAR 0 1
8576: PPUSH
8577: CALL_OW 266
8581: PUSH
8582: LD_INT 0
8584: PUSH
8585: LD_INT 1
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: IN
8592: IFFALSE 8617
// SetBName ( building , @ & GetSide ( building ) ) ;
8594: LD_VAR 0 1
8598: PPUSH
8599: LD_STRING @
8601: PUSH
8602: LD_VAR 0 1
8606: PPUSH
8607: CALL_OW 255
8611: STR
8612: PPUSH
8613: CALL_OW 500
// end ;
8617: LD_VAR 0 2
8621: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8622: LD_INT 0
8624: PPUSH
8625: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8626: LD_EXP 1
8630: PUSH
8631: LD_INT 2
8633: EQUAL
8634: PUSH
8635: LD_VAR 0 1
8639: PPUSH
8640: CALL_OW 266
8644: PUSH
8645: LD_INT 0
8647: PUSH
8648: LD_INT 1
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: IN
8655: AND
8656: IFFALSE 8721
// begin KillUnit ( building ) ;
8658: LD_VAR 0 1
8662: PPUSH
8663: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8667: LD_ADDR_VAR 0 5
8671: PUSH
8672: LD_INT 22
8674: PUSH
8675: LD_VAR 0 2
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 21
8686: PUSH
8687: LD_INT 1
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: PUSH
8703: FOR_IN
8704: IFFALSE 8717
// KillUnit ( i ) ;
8706: LD_VAR 0 5
8710: PPUSH
8711: CALL_OW 66
8715: GO 8703
8717: POP
8718: POP
// exit ;
8719: GO 8766
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8721: LD_VAR 0 1
8725: PPUSH
8726: CALL_OW 266
8730: PUSH
8731: LD_INT 0
8733: PUSH
8734: LD_INT 1
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: IN
8741: IFFALSE 8766
// SetBName ( building , @ & GetSide ( building ) ) ;
8743: LD_VAR 0 1
8747: PPUSH
8748: LD_STRING @
8750: PUSH
8751: LD_VAR 0 1
8755: PPUSH
8756: CALL_OW 255
8760: STR
8761: PPUSH
8762: CALL_OW 500
// end ; end_of_file
8766: LD_VAR 0 4
8770: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
8771: LD_EXP 37
8775: IFFALSE 9114
8777: GO 8779
8779: DISABLE
8780: LD_INT 0
8782: PPUSH
8783: PPUSH
8784: PPUSH
// begin mpKingPoints := [ ] ;
8785: LD_ADDR_EXP 42
8789: PUSH
8790: EMPTY
8791: ST_TO_ADDR
// if mpTeamGame then
8792: LD_EXP 9
8796: IFFALSE 8850
// begin for i := 1 to Count ( mpTeams ) do
8798: LD_ADDR_VAR 0 1
8802: PUSH
8803: DOUBLE
8804: LD_INT 1
8806: DEC
8807: ST_TO_ADDR
8808: LD_EXP 8
8812: PPUSH
8813: CALL 18779 0 1
8817: PUSH
8818: FOR_TO
8819: IFFALSE 8846
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
8821: LD_ADDR_EXP 42
8825: PUSH
8826: LD_EXP 42
8830: PPUSH
8831: LD_VAR 0 1
8835: PPUSH
8836: LD_INT 0
8838: PPUSH
8839: CALL_OW 1
8843: ST_TO_ADDR
8844: GO 8818
8846: POP
8847: POP
// end else
8848: GO 8893
// begin for i := 1 to 8 do
8850: LD_ADDR_VAR 0 1
8854: PUSH
8855: DOUBLE
8856: LD_INT 1
8858: DEC
8859: ST_TO_ADDR
8860: LD_INT 8
8862: PUSH
8863: FOR_TO
8864: IFFALSE 8891
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
8866: LD_ADDR_EXP 42
8870: PUSH
8871: LD_EXP 42
8875: PPUSH
8876: LD_VAR 0 1
8880: PPUSH
8881: LD_INT 0
8883: PPUSH
8884: CALL_OW 1
8888: ST_TO_ADDR
8889: GO 8863
8891: POP
8892: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
8893: LD_ADDR_VAR 0 3
8897: PUSH
8898: LD_INT 50
8900: PPUSH
8901: LD_INT 0
8903: PPUSH
8904: CALL_OW 517
8908: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
8909: LD_ADDR_VAR 0 1
8913: PUSH
8914: DOUBLE
8915: LD_INT 1
8917: DEC
8918: ST_TO_ADDR
8919: LD_VAR 0 3
8923: PUSH
8924: LD_INT 1
8926: ARRAY
8927: PUSH
8928: FOR_TO
8929: IFFALSE 8996
// for j := 1 to 8 do
8931: LD_ADDR_VAR 0 2
8935: PUSH
8936: DOUBLE
8937: LD_INT 1
8939: DEC
8940: ST_TO_ADDR
8941: LD_INT 8
8943: PUSH
8944: FOR_TO
8945: IFFALSE 8992
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
8947: LD_VAR 0 3
8951: PUSH
8952: LD_INT 1
8954: ARRAY
8955: PUSH
8956: LD_VAR 0 1
8960: ARRAY
8961: PPUSH
8962: LD_VAR 0 3
8966: PUSH
8967: LD_INT 2
8969: ARRAY
8970: PUSH
8971: LD_VAR 0 1
8975: ARRAY
8976: PPUSH
8977: LD_VAR 0 2
8981: PPUSH
8982: LD_INT 12
8984: NEG
8985: PPUSH
8986: CALL_OW 330
8990: GO 8944
8992: POP
8993: POP
8994: GO 8928
8996: POP
8997: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
8998: LD_EXP 32
9002: PPUSH
9003: LD_INT 1
9005: PPUSH
9006: CALL_OW 424
// UpdateCounter ;
9010: CALL 9616 0 0
// repeat wait ( 0 0$1 ) ;
9014: LD_INT 35
9016: PPUSH
9017: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9021: LD_ADDR_VAR 0 3
9025: PUSH
9026: LD_EXP 32
9030: PPUSH
9031: LD_INT 3
9033: PUSH
9034: LD_INT 57
9036: PUSH
9037: EMPTY
9038: LIST
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PUSH
9044: LD_INT 50
9046: PUSH
9047: EMPTY
9048: LIST
9049: PUSH
9050: LD_INT 2
9052: PUSH
9053: LD_INT 30
9055: PUSH
9056: LD_INT 0
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PUSH
9063: LD_INT 30
9065: PUSH
9066: LD_INT 1
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: LIST
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: LIST
9082: PPUSH
9083: CALL_OW 70
9087: ST_TO_ADDR
// if not tmp then
9088: LD_VAR 0 3
9092: NOT
9093: IFFALSE 9097
// continue ;
9095: GO 9014
// AddPoints ( tmp ) ;
9097: LD_VAR 0 3
9101: PPUSH
9102: CALL 9294 0 1
// UpdateCounter ;
9106: CALL 9616 0 0
// until false ;
9110: LD_INT 0
9112: IFFALSE 9014
// end ;
9114: PPOPN 3
9116: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
9117: LD_EXP 37
9121: PUSH
9122: LD_EXP 35
9126: AND
9127: IFFALSE 9291
9129: GO 9131
9131: DISABLE
9132: LD_INT 0
9134: PPUSH
9135: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
9136: LD_ADDR_VAR 0 2
9140: PUSH
9141: LD_INT 50
9143: PPUSH
9144: LD_INT 0
9146: PPUSH
9147: CALL_OW 517
9151: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
9152: LD_ADDR_VAR 0 1
9156: PUSH
9157: DOUBLE
9158: LD_INT 1
9160: DEC
9161: ST_TO_ADDR
9162: LD_VAR 0 2
9166: PUSH
9167: LD_INT 1
9169: ARRAY
9170: PUSH
9171: FOR_TO
9172: IFFALSE 9213
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
9174: LD_VAR 0 2
9178: PUSH
9179: LD_INT 1
9181: ARRAY
9182: PUSH
9183: LD_VAR 0 1
9187: ARRAY
9188: PPUSH
9189: LD_VAR 0 2
9193: PUSH
9194: LD_INT 2
9196: ARRAY
9197: PUSH
9198: LD_VAR 0 1
9202: ARRAY
9203: PPUSH
9204: LD_INT 125
9206: PPUSH
9207: CALL_OW 495
9211: GO 9171
9213: POP
9214: POP
// repeat wait ( mpEmissions ) ;
9215: LD_EXP 35
9219: PPUSH
9220: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
9224: LD_ADDR_VAR 0 1
9228: PUSH
9229: DOUBLE
9230: LD_INT 1
9232: DEC
9233: ST_TO_ADDR
9234: LD_VAR 0 2
9238: PUSH
9239: LD_INT 1
9241: ARRAY
9242: PUSH
9243: FOR_TO
9244: IFFALSE 9285
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
9246: LD_VAR 0 2
9250: PUSH
9251: LD_INT 1
9253: ARRAY
9254: PUSH
9255: LD_VAR 0 1
9259: ARRAY
9260: PPUSH
9261: LD_VAR 0 2
9265: PUSH
9266: LD_INT 2
9268: ARRAY
9269: PUSH
9270: LD_VAR 0 1
9274: ARRAY
9275: PPUSH
9276: LD_INT 15
9278: PPUSH
9279: CALL_OW 495
9283: GO 9243
9285: POP
9286: POP
// until false ;
9287: LD_INT 0
9289: IFFALSE 9215
// end ;
9291: PPOPN 2
9293: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
9294: LD_INT 0
9296: PPUSH
9297: PPUSH
9298: PPUSH
9299: PPUSH
9300: PPUSH
// if mpTeamGame then
9301: LD_EXP 9
9305: IFFALSE 9502
// begin first := depots [ 1 ] ;
9307: LD_ADDR_VAR 0 4
9311: PUSH
9312: LD_VAR 0 1
9316: PUSH
9317: LD_INT 1
9319: ARRAY
9320: ST_TO_ADDR
// side := GetSide ( first ) ;
9321: LD_ADDR_VAR 0 6
9325: PUSH
9326: LD_VAR 0 4
9330: PPUSH
9331: CALL_OW 255
9335: ST_TO_ADDR
// for i := 1 to mpTeams do
9336: LD_ADDR_VAR 0 3
9340: PUSH
9341: DOUBLE
9342: LD_INT 1
9344: DEC
9345: ST_TO_ADDR
9346: LD_EXP 8
9350: PUSH
9351: FOR_TO
9352: IFFALSE 9386
// if side in mpTeams [ i ] then
9354: LD_VAR 0 6
9358: PUSH
9359: LD_EXP 8
9363: PUSH
9364: LD_VAR 0 3
9368: ARRAY
9369: IN
9370: IFFALSE 9384
// begin team := i ;
9372: LD_ADDR_VAR 0 5
9376: PUSH
9377: LD_VAR 0 3
9381: ST_TO_ADDR
// break ;
9382: GO 9386
// end ;
9384: GO 9351
9386: POP
9387: POP
// if not team then
9388: LD_VAR 0 5
9392: NOT
9393: IFFALSE 9397
// exit ;
9395: GO 9611
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
9397: LD_EXP 32
9401: PPUSH
9402: LD_INT 81
9404: PUSH
9405: LD_VAR 0 6
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PPUSH
9414: CALL_OW 70
9418: IFFALSE 9422
// exit ;
9420: GO 9611
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
9422: LD_ADDR_EXP 42
9426: PUSH
9427: LD_EXP 42
9431: PPUSH
9432: LD_VAR 0 5
9436: PPUSH
9437: LD_EXP 42
9441: PUSH
9442: LD_VAR 0 5
9446: ARRAY
9447: PUSH
9448: LD_INT 1
9450: PLUS
9451: PPUSH
9452: CALL_OW 1
9456: ST_TO_ADDR
// for i in mpTeams [ team ] do
9457: LD_ADDR_VAR 0 3
9461: PUSH
9462: LD_EXP 8
9466: PUSH
9467: LD_VAR 0 5
9471: ARRAY
9472: PUSH
9473: FOR_IN
9474: IFFALSE 9498
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
9476: LD_VAR 0 3
9480: PPUSH
9481: LD_EXP 42
9485: PUSH
9486: LD_VAR 0 5
9490: ARRAY
9491: PPUSH
9492: CALL_OW 506
9496: GO 9473
9498: POP
9499: POP
// end else
9500: GO 9611
// begin first := depots [ 1 ] ;
9502: LD_ADDR_VAR 0 4
9506: PUSH
9507: LD_VAR 0 1
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: ST_TO_ADDR
// side := GetSide ( first ) ;
9516: LD_ADDR_VAR 0 6
9520: PUSH
9521: LD_VAR 0 4
9525: PPUSH
9526: CALL_OW 255
9530: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
9531: LD_EXP 32
9535: PPUSH
9536: LD_INT 81
9538: PUSH
9539: LD_VAR 0 6
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PPUSH
9548: CALL_OW 70
9552: IFFALSE 9556
// exit ;
9554: GO 9611
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
9556: LD_ADDR_EXP 42
9560: PUSH
9561: LD_EXP 42
9565: PPUSH
9566: LD_VAR 0 6
9570: PPUSH
9571: LD_EXP 42
9575: PUSH
9576: LD_VAR 0 6
9580: ARRAY
9581: PUSH
9582: LD_INT 1
9584: PLUS
9585: PPUSH
9586: CALL_OW 1
9590: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
9591: LD_VAR 0 6
9595: PPUSH
9596: LD_EXP 42
9600: PUSH
9601: LD_VAR 0 6
9605: ARRAY
9606: PPUSH
9607: CALL_OW 506
// end ; end ;
9611: LD_VAR 0 2
9615: RET
// function UpdateCounter ; var i ; begin
9616: LD_INT 0
9618: PPUSH
9619: PPUSH
// result := [ ] ;
9620: LD_ADDR_VAR 0 1
9624: PUSH
9625: EMPTY
9626: ST_TO_ADDR
// if mpTeamGame then
9627: LD_EXP 9
9631: IFFALSE 9698
// begin for i := 1 to mpTeams do
9633: LD_ADDR_VAR 0 2
9637: PUSH
9638: DOUBLE
9639: LD_INT 1
9641: DEC
9642: ST_TO_ADDR
9643: LD_EXP 8
9647: PUSH
9648: FOR_TO
9649: IFFALSE 9694
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
9651: LD_ADDR_VAR 0 1
9655: PUSH
9656: LD_VAR 0 1
9660: PUSH
9661: LD_STRING #KingoftheHill-Team
9663: PUSH
9664: LD_VAR 0 2
9668: PUSH
9669: LD_EXP 42
9673: PUSH
9674: LD_VAR 0 2
9678: ARRAY
9679: PUSH
9680: LD_EXP 33
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: ADD
9691: ST_TO_ADDR
9692: GO 9648
9694: POP
9695: POP
// end else
9696: GO 9771
// begin for i := 1 to 8 do
9698: LD_ADDR_VAR 0 2
9702: PUSH
9703: DOUBLE
9704: LD_INT 1
9706: DEC
9707: ST_TO_ADDR
9708: LD_INT 8
9710: PUSH
9711: FOR_TO
9712: IFFALSE 9769
// if mpSidePositions [ i ] then
9714: LD_EXP 5
9718: PUSH
9719: LD_VAR 0 2
9723: ARRAY
9724: IFFALSE 9767
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
9726: LD_ADDR_VAR 0 1
9730: PUSH
9731: LD_VAR 0 1
9735: PUSH
9736: LD_STRING #KingoftheHill-Player
9738: PUSH
9739: LD_VAR 0 2
9743: PUSH
9744: LD_EXP 42
9748: PUSH
9749: LD_VAR 0 2
9753: ARRAY
9754: PUSH
9755: LD_EXP 33
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: ADD
9766: ST_TO_ADDR
9767: GO 9711
9769: POP
9770: POP
// end ; mpDisplayStrings := result ;
9771: LD_ADDR_EXP 36
9775: PUSH
9776: LD_VAR 0 1
9780: ST_TO_ADDR
// end ;
9781: LD_VAR 0 1
9785: RET
// export function HowMuchPointsKing ( side ) ; begin
9786: LD_INT 0
9788: PPUSH
// result := HowMuchPoints ( side ) ;
9789: LD_ADDR_VAR 0 2
9793: PUSH
9794: LD_VAR 0 1
9798: PPUSH
9799: CALL 9809 0 1
9803: ST_TO_ADDR
// end ;
9804: LD_VAR 0 2
9808: RET
// function HowMuchPoints ( side ) ; var i ; begin
9809: LD_INT 0
9811: PPUSH
9812: PPUSH
// if mpTeamGame then
9813: LD_EXP 9
9817: IFFALSE 9886
// begin for i := 1 to Count ( mpTeams ) do
9819: LD_ADDR_VAR 0 3
9823: PUSH
9824: DOUBLE
9825: LD_INT 1
9827: DEC
9828: ST_TO_ADDR
9829: LD_EXP 8
9833: PPUSH
9834: CALL 18779 0 1
9838: PUSH
9839: FOR_TO
9840: IFFALSE 9882
// begin if side in mpTeams [ i ] then
9842: LD_VAR 0 1
9846: PUSH
9847: LD_EXP 8
9851: PUSH
9852: LD_VAR 0 3
9856: ARRAY
9857: IN
9858: IFFALSE 9880
// begin result := mpKingPoints [ i ] ;
9860: LD_ADDR_VAR 0 2
9864: PUSH
9865: LD_EXP 42
9869: PUSH
9870: LD_VAR 0 3
9874: ARRAY
9875: ST_TO_ADDR
// exit ;
9876: POP
9877: POP
9878: GO 9902
// end ; end ;
9880: GO 9839
9882: POP
9883: POP
// end else
9884: GO 9902
// result := mpKingPoints [ side ] ;
9886: LD_ADDR_VAR 0 2
9890: PUSH
9891: LD_EXP 42
9895: PUSH
9896: LD_VAR 0 1
9900: ARRAY
9901: ST_TO_ADDR
// end ;
9902: LD_VAR 0 2
9906: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
9907: LD_EXP 37
9911: PUSH
9912: CALL 10234 0 0
9916: AND
9917: PUSH
9918: LD_OWVAR 4
9922: AND
9923: IFFALSE 10159
9925: GO 9927
9927: DISABLE
9928: LD_INT 0
9930: PPUSH
9931: PPUSH
// begin canWin := false ;
9932: LD_ADDR_VAR 0 2
9936: PUSH
9937: LD_INT 0
9939: ST_TO_ADDR
// if not HasPower ( your_side ) then
9940: LD_OWVAR 2
9944: PPUSH
9945: CALL 10274 0 1
9949: NOT
9950: IFFALSE 9961
// begin Multiplayer_Loose_Message ;
9952: CALL_OW 521
// enable ( mpLose ) ;
9956: LD_INT 102
9958: ENABLE_MARKED
// end else
9959: GO 10159
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
9961: LD_ADDR_VAR 0 2
9965: PUSH
9966: LD_OWVAR 2
9970: PPUSH
9971: CALL 9809 0 1
9975: PUSH
9976: LD_EXP 33
9980: GREATEREQUAL
9981: PUSH
9982: LD_OWVAR 2
9986: PPUSH
9987: CALL 10274 0 1
9991: AND
9992: PUSH
9993: CALL 10162 0 0
9997: NOT
9998: OR
9999: ST_TO_ADDR
// for i := 1 to 8 do
10000: LD_ADDR_VAR 0 1
10004: PUSH
10005: DOUBLE
10006: LD_INT 1
10008: DEC
10009: ST_TO_ADDR
10010: LD_INT 8
10012: PUSH
10013: FOR_TO
10014: IFFALSE 10145
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10016: LD_EXP 5
10020: PUSH
10021: LD_VAR 0 1
10025: ARRAY
10026: PUSH
10027: LD_VAR 0 1
10031: PPUSH
10032: CALL_OW 108
10036: AND
10037: PUSH
10038: LD_VAR 0 1
10042: PUSH
10043: LD_OWVAR 2
10047: NONEQUAL
10048: AND
10049: IFFALSE 10143
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10051: LD_EXP 6
10055: PUSH
10056: LD_VAR 0 1
10060: ARRAY
10061: NOT
10062: PUSH
10063: LD_EXP 6
10067: PUSH
10068: LD_VAR 0 1
10072: ARRAY
10073: PUSH
10074: LD_EXP 6
10078: PUSH
10079: LD_OWVAR 2
10083: ARRAY
10084: NONEQUAL
10085: PUSH
10086: LD_OWVAR 2
10090: PPUSH
10091: LD_VAR 0 1
10095: PPUSH
10096: CALL_OW 81
10100: PUSH
10101: LD_INT 1
10103: NONEQUAL
10104: AND
10105: OR
10106: IFFALSE 10143
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
10108: LD_VAR 0 1
10112: PPUSH
10113: CALL 9809 0 1
10117: PUSH
10118: LD_EXP 33
10122: GREATEREQUAL
10123: PUSH
10124: LD_VAR 0 1
10128: PPUSH
10129: CALL 10274 0 1
10133: AND
10134: IFFALSE 10143
// begin enable ( mpLose ) ;
10136: LD_INT 102
10138: ENABLE_MARKED
// exit ;
10139: POP
10140: POP
10141: GO 10159
// end ;
10143: GO 10013
10145: POP
10146: POP
// if canWin then
10147: LD_VAR 0 2
10151: IFFALSE 10158
// enable ( mpWin ) else
10153: LD_INT 101
10155: ENABLE_MARKED
10156: GO 10159
// enable ;
10158: ENABLE
// end ; end ;
10159: PPOPN 2
10161: END
// function EnemiesInGame ; var i ; begin
10162: LD_INT 0
10164: PPUSH
10165: PPUSH
// result := false ;
10166: LD_ADDR_VAR 0 1
10170: PUSH
10171: LD_INT 0
10173: ST_TO_ADDR
// for i := 1 to 8 do
10174: LD_ADDR_VAR 0 2
10178: PUSH
10179: DOUBLE
10180: LD_INT 1
10182: DEC
10183: ST_TO_ADDR
10184: LD_INT 8
10186: PUSH
10187: FOR_TO
10188: IFFALSE 10227
// if i <> your_side and HasPower ( i ) then
10190: LD_VAR 0 2
10194: PUSH
10195: LD_OWVAR 2
10199: NONEQUAL
10200: PUSH
10201: LD_VAR 0 2
10205: PPUSH
10206: CALL 10274 0 1
10210: AND
10211: IFFALSE 10225
// begin result := true ;
10213: LD_ADDR_VAR 0 1
10217: PUSH
10218: LD_INT 1
10220: ST_TO_ADDR
// exit ;
10221: POP
10222: POP
10223: GO 10229
// end ;
10225: GO 10187
10227: POP
10228: POP
// end ;
10229: LD_VAR 0 1
10233: RET
// function CanWinLoose ; begin
10234: LD_INT 0
10236: PPUSH
// result := true ;
10237: LD_ADDR_VAR 0 1
10241: PUSH
10242: LD_INT 1
10244: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10245: CALL_OW 531
10249: PUSH
10250: CALL_OW 519
10254: PUSH
10255: LD_INT 1
10257: GREATER
10258: AND
10259: IFFALSE 10269
// result := false ;
10261: LD_ADDR_VAR 0 1
10265: PUSH
10266: LD_INT 0
10268: ST_TO_ADDR
// end ;
10269: LD_VAR 0 1
10273: RET
// function HasPower ( i ) ; begin
10274: LD_INT 0
10276: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10277: LD_ADDR_VAR 0 2
10281: PUSH
10282: LD_INT 22
10284: PUSH
10285: LD_VAR 0 1
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 2
10296: PUSH
10297: LD_INT 21
10299: PUSH
10300: LD_INT 1
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 33
10309: PUSH
10310: LD_INT 3
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: LD_INT 33
10319: PUSH
10320: LD_INT 5
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PPUSH
10337: CALL_OW 69
10341: ST_TO_ADDR
// end ; end_of_file
10342: LD_VAR 0 2
10346: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10347: LD_EXP 37
10351: PUSH
10352: CALL 10557 0 0
10356: AND
10357: PUSH
10358: LD_OWVAR 4
10362: AND
10363: IFFALSE 10554
10365: GO 10367
10367: DISABLE
10368: LD_INT 0
10370: PPUSH
10371: PPUSH
// begin canWin := false ;
10372: LD_ADDR_VAR 0 2
10376: PUSH
10377: LD_INT 0
10379: ST_TO_ADDR
// if not HasPower ( your_side ) then
10380: LD_OWVAR 2
10384: PPUSH
10385: CALL 10597 0 1
10389: NOT
10390: IFFALSE 10401
// begin Multiplayer_Loose_Message ;
10392: CALL_OW 521
// enable ( mpLose ) ;
10396: LD_INT 102
10398: ENABLE_MARKED
// end else
10399: GO 10554
// begin canWin := true ;
10401: LD_ADDR_VAR 0 2
10405: PUSH
10406: LD_INT 1
10408: ST_TO_ADDR
// for i := 1 to 8 do
10409: LD_ADDR_VAR 0 1
10413: PUSH
10414: DOUBLE
10415: LD_INT 1
10417: DEC
10418: ST_TO_ADDR
10419: LD_INT 8
10421: PUSH
10422: FOR_TO
10423: IFFALSE 10540
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10425: LD_EXP 5
10429: PUSH
10430: LD_VAR 0 1
10434: ARRAY
10435: PUSH
10436: LD_VAR 0 1
10440: PPUSH
10441: CALL_OW 108
10445: AND
10446: PUSH
10447: LD_VAR 0 1
10451: PUSH
10452: LD_OWVAR 2
10456: NONEQUAL
10457: AND
10458: IFFALSE 10538
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10460: LD_EXP 6
10464: PUSH
10465: LD_VAR 0 1
10469: ARRAY
10470: NOT
10471: PUSH
10472: LD_EXP 6
10476: PUSH
10477: LD_VAR 0 1
10481: ARRAY
10482: PUSH
10483: LD_EXP 6
10487: PUSH
10488: LD_OWVAR 2
10492: ARRAY
10493: NONEQUAL
10494: PUSH
10495: LD_OWVAR 2
10499: PPUSH
10500: LD_VAR 0 1
10504: PPUSH
10505: CALL_OW 81
10509: PUSH
10510: LD_INT 1
10512: NONEQUAL
10513: AND
10514: OR
10515: IFFALSE 10538
// if HasPower ( i ) then
10517: LD_VAR 0 1
10521: PPUSH
10522: CALL 10597 0 1
10526: IFFALSE 10538
// begin canWin := false ;
10528: LD_ADDR_VAR 0 2
10532: PUSH
10533: LD_INT 0
10535: ST_TO_ADDR
// break ;
10536: GO 10540
// end ;
10538: GO 10422
10540: POP
10541: POP
// if canWin then
10542: LD_VAR 0 2
10546: IFFALSE 10553
// enable ( mpWin ) else
10548: LD_INT 101
10550: ENABLE_MARKED
10551: GO 10554
// enable ;
10553: ENABLE
// end ; end ;
10554: PPOPN 2
10556: END
// function CanWinLoose ; begin
10557: LD_INT 0
10559: PPUSH
// result := true ;
10560: LD_ADDR_VAR 0 1
10564: PUSH
10565: LD_INT 1
10567: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10568: CALL_OW 531
10572: PUSH
10573: CALL_OW 519
10577: PUSH
10578: LD_INT 1
10580: GREATER
10581: AND
10582: IFFALSE 10592
// result := false ;
10584: LD_ADDR_VAR 0 1
10588: PUSH
10589: LD_INT 0
10591: ST_TO_ADDR
// end ;
10592: LD_VAR 0 1
10596: RET
// function HasPower ( i ) ; begin
10597: LD_INT 0
10599: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10600: LD_ADDR_VAR 0 2
10604: PUSH
10605: LD_INT 22
10607: PUSH
10608: LD_VAR 0 1
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 2
10619: PUSH
10620: LD_INT 21
10622: PUSH
10623: LD_INT 1
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PUSH
10630: LD_INT 33
10632: PUSH
10633: LD_INT 3
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PUSH
10640: LD_INT 33
10642: PUSH
10643: LD_INT 5
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: CALL_OW 69
10664: ST_TO_ADDR
// end ; end_of_file
10665: LD_VAR 0 2
10669: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10670: LD_EXP 37
10674: IFFALSE 10717
10676: GO 10678
10678: DISABLE
10679: LD_INT 0
10681: PPUSH
// begin for i := 1 to 8 do
10682: LD_ADDR_VAR 0 1
10686: PUSH
10687: DOUBLE
10688: LD_INT 1
10690: DEC
10691: ST_TO_ADDR
10692: LD_INT 8
10694: PUSH
10695: FOR_TO
10696: IFFALSE 10715
// SetRestrict ( b_depot , i , state_disabled ) ;
10698: LD_INT 0
10700: PPUSH
10701: LD_VAR 0 1
10705: PPUSH
10706: LD_INT 0
10708: PPUSH
10709: CALL_OW 324
10713: GO 10695
10715: POP
10716: POP
// end ;
10717: PPOPN 1
10719: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10720: LD_EXP 37
10724: PUSH
10725: CALL 10930 0 0
10729: AND
10730: PUSH
10731: LD_OWVAR 4
10735: AND
10736: IFFALSE 10927
10738: GO 10740
10740: DISABLE
10741: LD_INT 0
10743: PPUSH
10744: PPUSH
// begin canWin := false ;
10745: LD_ADDR_VAR 0 2
10749: PUSH
10750: LD_INT 0
10752: ST_TO_ADDR
// if not HasPower ( your_side ) then
10753: LD_OWVAR 2
10757: PPUSH
10758: CALL 10970 0 1
10762: NOT
10763: IFFALSE 10774
// begin Multiplayer_Loose_Message ;
10765: CALL_OW 521
// enable ( mpLose ) ;
10769: LD_INT 102
10771: ENABLE_MARKED
// end else
10772: GO 10927
// begin canWin := true ;
10774: LD_ADDR_VAR 0 2
10778: PUSH
10779: LD_INT 1
10781: ST_TO_ADDR
// for i := 1 to 8 do
10782: LD_ADDR_VAR 0 1
10786: PUSH
10787: DOUBLE
10788: LD_INT 1
10790: DEC
10791: ST_TO_ADDR
10792: LD_INT 8
10794: PUSH
10795: FOR_TO
10796: IFFALSE 10913
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10798: LD_EXP 5
10802: PUSH
10803: LD_VAR 0 1
10807: ARRAY
10808: PUSH
10809: LD_VAR 0 1
10813: PPUSH
10814: CALL_OW 108
10818: AND
10819: PUSH
10820: LD_VAR 0 1
10824: PUSH
10825: LD_OWVAR 2
10829: NONEQUAL
10830: AND
10831: IFFALSE 10911
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10833: LD_EXP 6
10837: PUSH
10838: LD_VAR 0 1
10842: ARRAY
10843: NOT
10844: PUSH
10845: LD_EXP 6
10849: PUSH
10850: LD_VAR 0 1
10854: ARRAY
10855: PUSH
10856: LD_EXP 6
10860: PUSH
10861: LD_OWVAR 2
10865: ARRAY
10866: NONEQUAL
10867: PUSH
10868: LD_OWVAR 2
10872: PPUSH
10873: LD_VAR 0 1
10877: PPUSH
10878: CALL_OW 81
10882: PUSH
10883: LD_INT 1
10885: NONEQUAL
10886: AND
10887: OR
10888: IFFALSE 10911
// if HasPower ( i ) then
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL 10970 0 1
10899: IFFALSE 10911
// begin canWin := false ;
10901: LD_ADDR_VAR 0 2
10905: PUSH
10906: LD_INT 0
10908: ST_TO_ADDR
// break ;
10909: GO 10913
// end ;
10911: GO 10795
10913: POP
10914: POP
// if canWin then
10915: LD_VAR 0 2
10919: IFFALSE 10926
// enable ( mpWin ) else
10921: LD_INT 101
10923: ENABLE_MARKED
10924: GO 10927
// enable ;
10926: ENABLE
// end ; end ;
10927: PPOPN 2
10929: END
// function CanWinLoose ; begin
10930: LD_INT 0
10932: PPUSH
// result := true ;
10933: LD_ADDR_VAR 0 1
10937: PUSH
10938: LD_INT 1
10940: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10941: CALL_OW 531
10945: PUSH
10946: CALL_OW 519
10950: PUSH
10951: LD_INT 1
10953: GREATER
10954: AND
10955: IFFALSE 10965
// result := false ;
10957: LD_ADDR_VAR 0 1
10961: PUSH
10962: LD_INT 0
10964: ST_TO_ADDR
// end ;
10965: LD_VAR 0 1
10969: RET
// function HasPower ( i ) ; begin
10970: LD_INT 0
10972: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10973: LD_INT 22
10975: PUSH
10976: LD_VAR 0 1
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 2
10987: PUSH
10988: LD_INT 30
10990: PUSH
10991: LD_INT 0
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 30
11000: PUSH
11001: LD_INT 1
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: LIST
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PPUSH
11017: CALL_OW 69
11021: NOT
11022: IFFALSE 11026
// exit ;
11024: GO 11091
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11026: LD_ADDR_VAR 0 2
11030: PUSH
11031: LD_INT 22
11033: PUSH
11034: LD_VAR 0 1
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 2
11045: PUSH
11046: LD_INT 21
11048: PUSH
11049: LD_INT 1
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PUSH
11056: LD_INT 33
11058: PUSH
11059: LD_INT 3
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: LD_INT 33
11068: PUSH
11069: LD_INT 5
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PPUSH
11086: CALL_OW 69
11090: ST_TO_ADDR
// end ; end_of_file
11091: LD_VAR 0 2
11095: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
11096: LD_VAR 0 1
11100: PUSH
11101: LD_INT 200
11103: DOUBLE
11104: GREATEREQUAL
11105: IFFALSE 11113
11107: LD_INT 299
11109: DOUBLE
11110: LESSEQUAL
11111: IFTRUE 11115
11113: GO 11147
11115: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
11116: LD_VAR 0 1
11120: PPUSH
11121: LD_VAR 0 2
11125: PPUSH
11126: LD_VAR 0 3
11130: PPUSH
11131: LD_VAR 0 4
11135: PPUSH
11136: LD_VAR 0 5
11140: PPUSH
11141: CALL 11894 0 5
11145: GO 11224
11147: LD_INT 300
11149: DOUBLE
11150: GREATEREQUAL
11151: IFFALSE 11159
11153: LD_INT 399
11155: DOUBLE
11156: LESSEQUAL
11157: IFTRUE 11161
11159: GO 11223
11161: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
11162: LD_VAR 0 1
11166: PPUSH
11167: LD_VAR 0 2
11171: PPUSH
11172: LD_VAR 0 3
11176: PPUSH
11177: LD_VAR 0 4
11181: PPUSH
11182: LD_VAR 0 5
11186: PPUSH
11187: LD_VAR 0 6
11191: PPUSH
11192: LD_VAR 0 7
11196: PPUSH
11197: LD_VAR 0 8
11201: PPUSH
11202: LD_VAR 0 9
11206: PPUSH
11207: LD_VAR 0 10
11211: PPUSH
11212: LD_VAR 0 11
11216: PPUSH
11217: CALL 59574 0 11
11221: GO 11224
11223: POP
// end ;
11224: PPOPN 11
11226: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
11227: LD_VAR 0 1
11231: PPUSH
11232: LD_VAR 0 2
11236: PPUSH
11237: LD_VAR 0 3
11241: PPUSH
11242: LD_VAR 0 4
11246: PPUSH
11247: LD_VAR 0 5
11251: PPUSH
11252: CALL 11309 0 5
// end ; end_of_file
11256: PPOPN 5
11258: END
// export function SOS_UnitDestroyed ( un ) ; begin
11259: LD_INT 0
11261: PPUSH
// ComRadiation ( un ) ;
11262: LD_VAR 0 1
11266: PPUSH
11267: CALL 12298 0 1
// end ;
11271: LD_VAR 0 2
11275: RET
// export function SOS_UnitKamikazed ( un ) ; begin
11276: LD_INT 0
11278: PPUSH
// ComRadiation ( un ) ;
11279: LD_VAR 0 1
11283: PPUSH
11284: CALL 12298 0 1
// end ;
11288: LD_VAR 0 2
11292: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
11293: LD_INT 0
11295: PPUSH
// end ;
11296: LD_VAR 0 4
11300: RET
// export function SOS_Command ( cmd ) ; begin
11301: LD_INT 0
11303: PPUSH
// end ;
11304: LD_VAR 0 2
11308: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
11309: LD_INT 0
11311: PPUSH
// end ;
11312: LD_VAR 0 6
11316: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
11317: LD_INT 0
11319: PPUSH
11320: PPUSH
11321: PPUSH
11322: PPUSH
// if not vehicle or not factory then
11323: LD_VAR 0 1
11327: NOT
11328: PUSH
11329: LD_VAR 0 2
11333: NOT
11334: OR
11335: IFFALSE 11339
// exit ;
11337: GO 11889
// if not factoryWaypoints then
11339: LD_EXP 53
11343: NOT
11344: IFFALSE 11348
// exit ;
11346: GO 11889
// for i := 1 to Count ( factoryWaypoints ) do
11348: LD_ADDR_VAR 0 4
11352: PUSH
11353: DOUBLE
11354: LD_INT 1
11356: DEC
11357: ST_TO_ADDR
11358: LD_EXP 53
11362: PPUSH
11363: CALL 18779 0 1
11367: PUSH
11368: FOR_TO
11369: IFFALSE 11887
// if factoryWaypoints [ i ] [ 2 ] = factory then
11371: LD_EXP 53
11375: PUSH
11376: LD_VAR 0 4
11380: ARRAY
11381: PUSH
11382: LD_INT 2
11384: ARRAY
11385: PUSH
11386: LD_VAR 0 2
11390: EQUAL
11391: IFFALSE 11885
// begin if GetControl ( vehicle ) = control_manual then
11393: LD_VAR 0 1
11397: PPUSH
11398: CALL_OW 263
11402: PUSH
11403: LD_INT 1
11405: EQUAL
11406: IFFALSE 11768
// begin driver := IsDrivenBy ( vehicle ) ;
11408: LD_ADDR_VAR 0 5
11412: PUSH
11413: LD_VAR 0 1
11417: PPUSH
11418: CALL_OW 311
11422: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
11423: LD_VAR 0 5
11427: PUSH
11428: LD_EXP 54
11432: IN
11433: PUSH
11434: LD_VAR 0 1
11438: PUSH
11439: LD_EXP 54
11443: IN
11444: OR
11445: IFFALSE 11451
// exit ;
11447: POP
11448: POP
11449: GO 11889
// if not HasTask ( driver ) then
11451: LD_VAR 0 5
11455: PPUSH
11456: CALL_OW 314
11460: NOT
11461: IFFALSE 11766
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
11463: LD_ADDR_EXP 54
11467: PUSH
11468: LD_EXP 54
11472: PPUSH
11473: LD_VAR 0 5
11477: PPUSH
11478: CALL 54388 0 2
11482: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
11483: LD_ADDR_EXP 54
11487: PUSH
11488: LD_EXP 54
11492: PPUSH
11493: LD_VAR 0 1
11497: PPUSH
11498: CALL 54388 0 2
11502: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11503: LD_ADDR_VAR 0 6
11507: PUSH
11508: LD_EXP 53
11512: PUSH
11513: LD_VAR 0 4
11517: ARRAY
11518: PUSH
11519: LD_INT 3
11521: ARRAY
11522: PPUSH
11523: LD_EXP 53
11527: PUSH
11528: LD_VAR 0 4
11532: ARRAY
11533: PUSH
11534: LD_INT 4
11536: ARRAY
11537: PPUSH
11538: CALL_OW 428
11542: ST_TO_ADDR
// if hex then
11543: LD_VAR 0 6
11547: IFFALSE 11565
// ComMoveUnit ( driver , hex ) else
11549: LD_VAR 0 5
11553: PPUSH
11554: LD_VAR 0 6
11558: PPUSH
11559: CALL_OW 112
11563: GO 11649
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
11565: LD_VAR 0 1
11569: PPUSH
11570: LD_EXP 53
11574: PUSH
11575: LD_VAR 0 4
11579: ARRAY
11580: PUSH
11581: LD_INT 3
11583: ARRAY
11584: PPUSH
11585: LD_EXP 53
11589: PUSH
11590: LD_VAR 0 4
11594: ARRAY
11595: PUSH
11596: LD_INT 4
11598: ARRAY
11599: PPUSH
11600: CALL_OW 297
11604: PUSH
11605: LD_INT 0
11607: GREATER
11608: IFFALSE 11649
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11610: LD_VAR 0 5
11614: PPUSH
11615: LD_EXP 53
11619: PUSH
11620: LD_VAR 0 4
11624: ARRAY
11625: PUSH
11626: LD_INT 3
11628: ARRAY
11629: PPUSH
11630: LD_EXP 53
11634: PUSH
11635: LD_VAR 0 4
11639: ARRAY
11640: PUSH
11641: LD_INT 4
11643: ARRAY
11644: PPUSH
11645: CALL_OW 111
// AddComExitVehicle ( driver ) ;
11649: LD_VAR 0 5
11653: PPUSH
11654: CALL_OW 181
// if Multiplayer then
11658: LD_OWVAR 4
11662: IFFALSE 11711
// begin repeat wait ( 10 ) ;
11664: LD_INT 10
11666: PPUSH
11667: CALL_OW 67
// until not IsInUnit ( driver ) ;
11671: LD_VAR 0 5
11675: PPUSH
11676: CALL_OW 310
11680: NOT
11681: IFFALSE 11664
// if not HasTask ( driver ) then
11683: LD_VAR 0 5
11687: PPUSH
11688: CALL_OW 314
11692: NOT
11693: IFFALSE 11709
// ComEnterUnit ( driver , factory ) ;
11695: LD_VAR 0 5
11699: PPUSH
11700: LD_VAR 0 2
11704: PPUSH
11705: CALL_OW 120
// end else
11709: GO 11725
// AddComEnterUnit ( driver , factory ) ;
11711: LD_VAR 0 5
11715: PPUSH
11716: LD_VAR 0 2
11720: PPUSH
11721: CALL_OW 180
// wait ( 0 0$1 ) ;
11725: LD_INT 35
11727: PPUSH
11728: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
11732: LD_ADDR_EXP 54
11736: PUSH
11737: LD_EXP 54
11741: PUSH
11742: LD_VAR 0 5
11746: DIFF
11747: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
11748: LD_ADDR_EXP 54
11752: PUSH
11753: LD_EXP 54
11757: PUSH
11758: LD_VAR 0 1
11762: DIFF
11763: ST_TO_ADDR
// break ;
11764: GO 11887
// end ; end else
11766: GO 11885
// if GetControl ( vehicle ) = control_remote then
11768: LD_VAR 0 1
11772: PPUSH
11773: CALL_OW 263
11777: PUSH
11778: LD_INT 2
11780: EQUAL
11781: IFFALSE 11844
// begin wait ( 0 0$2 ) ;
11783: LD_INT 70
11785: PPUSH
11786: CALL_OW 67
// if Connect ( vehicle ) then
11790: LD_VAR 0 1
11794: PPUSH
11795: CALL 24985 0 1
11799: IFFALSE 11840
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11801: LD_VAR 0 1
11805: PPUSH
11806: LD_EXP 53
11810: PUSH
11811: LD_VAR 0 4
11815: ARRAY
11816: PUSH
11817: LD_INT 3
11819: ARRAY
11820: PPUSH
11821: LD_EXP 53
11825: PUSH
11826: LD_VAR 0 4
11830: ARRAY
11831: PUSH
11832: LD_INT 4
11834: ARRAY
11835: PPUSH
11836: CALL_OW 111
// break ;
11840: GO 11887
// end else
11842: GO 11885
// begin ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11844: LD_VAR 0 1
11848: PPUSH
11849: LD_EXP 53
11853: PUSH
11854: LD_VAR 0 4
11858: ARRAY
11859: PUSH
11860: LD_INT 3
11862: ARRAY
11863: PPUSH
11864: LD_EXP 53
11868: PUSH
11869: LD_VAR 0 4
11873: ARRAY
11874: PUSH
11875: LD_INT 4
11877: ARRAY
11878: PPUSH
11879: CALL_OW 111
// break ;
11883: GO 11887
// end ; end ;
11885: GO 11368
11887: POP
11888: POP
// end ;
11889: LD_VAR 0 3
11893: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11894: LD_INT 0
11896: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11897: LD_VAR 0 1
11901: PUSH
11902: LD_INT 250
11904: EQUAL
11905: PUSH
11906: LD_VAR 0 2
11910: PPUSH
11911: CALL_OW 264
11915: PUSH
11916: LD_INT 81
11918: EQUAL
11919: AND
11920: IFFALSE 11941
// MinerPlaceMine ( unit , x , y ) ;
11922: LD_VAR 0 2
11926: PPUSH
11927: LD_VAR 0 4
11931: PPUSH
11932: LD_VAR 0 5
11936: PPUSH
11937: CALL 15033 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11941: LD_VAR 0 1
11945: PUSH
11946: LD_INT 251
11948: EQUAL
11949: PUSH
11950: LD_VAR 0 2
11954: PPUSH
11955: CALL_OW 264
11959: PUSH
11960: LD_INT 81
11962: EQUAL
11963: AND
11964: IFFALSE 11985
// MinerDetonateMine ( unit , x , y ) ;
11966: LD_VAR 0 2
11970: PPUSH
11971: LD_VAR 0 4
11975: PPUSH
11976: LD_VAR 0 5
11980: PPUSH
11981: CALL 15308 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11985: LD_VAR 0 1
11989: PUSH
11990: LD_INT 252
11992: EQUAL
11993: PUSH
11994: LD_VAR 0 2
11998: PPUSH
11999: CALL_OW 264
12003: PUSH
12004: LD_INT 81
12006: EQUAL
12007: AND
12008: IFFALSE 12029
// MinerCreateMinefield ( unit , x , y ) ;
12010: LD_VAR 0 2
12014: PPUSH
12015: LD_VAR 0 4
12019: PPUSH
12020: LD_VAR 0 5
12024: PPUSH
12025: CALL 15725 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
12029: LD_VAR 0 1
12033: PUSH
12034: LD_INT 253
12036: EQUAL
12037: PUSH
12038: LD_VAR 0 2
12042: PPUSH
12043: CALL_OW 257
12047: PUSH
12048: LD_INT 5
12050: EQUAL
12051: AND
12052: IFFALSE 12073
// ComBinocular ( unit , x , y ) ;
12054: LD_VAR 0 2
12058: PPUSH
12059: LD_VAR 0 4
12063: PPUSH
12064: LD_VAR 0 5
12068: PPUSH
12069: CALL 16094 0 3
// if selectedUnit then
12073: LD_VAR 0 3
12077: IFFALSE 12133
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
12079: LD_VAR 0 1
12083: PUSH
12084: LD_INT 254
12086: EQUAL
12087: PUSH
12088: LD_VAR 0 2
12092: PPUSH
12093: CALL_OW 264
12097: PUSH
12098: LD_INT 99
12100: EQUAL
12101: AND
12102: PUSH
12103: LD_VAR 0 3
12107: PPUSH
12108: CALL_OW 263
12112: PUSH
12113: LD_INT 3
12115: EQUAL
12116: AND
12117: IFFALSE 12133
// HackDestroyVehicle ( unit , selectedUnit ) ;
12119: LD_VAR 0 2
12123: PPUSH
12124: LD_VAR 0 3
12128: PPUSH
12129: CALL 14397 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
12133: LD_VAR 0 1
12137: PUSH
12138: LD_INT 255
12140: EQUAL
12141: PUSH
12142: LD_VAR 0 2
12146: PPUSH
12147: CALL_OW 264
12151: PUSH
12152: LD_INT 14
12154: PUSH
12155: LD_INT 53
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: IN
12162: AND
12163: PUSH
12164: LD_VAR 0 4
12168: PPUSH
12169: LD_VAR 0 5
12173: PPUSH
12174: CALL_OW 488
12178: AND
12179: IFFALSE 12203
// CutTreeXYR ( unit , x , y , 12 ) ;
12181: LD_VAR 0 2
12185: PPUSH
12186: LD_VAR 0 4
12190: PPUSH
12191: LD_VAR 0 5
12195: PPUSH
12196: LD_INT 12
12198: PPUSH
12199: CALL 12394 0 4
// if cmd = 256 then
12203: LD_VAR 0 1
12207: PUSH
12208: LD_INT 256
12210: EQUAL
12211: IFFALSE 12232
// SetFactoryWaypoint ( unit , x , y ) ;
12213: LD_VAR 0 2
12217: PPUSH
12218: LD_VAR 0 4
12222: PPUSH
12223: LD_VAR 0 5
12227: PPUSH
12228: CALL 59582 0 3
// if cmd = 257 then
12232: LD_VAR 0 1
12236: PUSH
12237: LD_INT 257
12239: EQUAL
12240: IFFALSE 12261
// SetWarehouseGatheringPoint ( unit , x , y ) ;
12242: LD_VAR 0 2
12246: PPUSH
12247: LD_VAR 0 4
12251: PPUSH
12252: LD_VAR 0 5
12256: PPUSH
12257: CALL 60072 0 3
// if cmd = 258 then
12261: LD_VAR 0 1
12265: PUSH
12266: LD_INT 258
12268: EQUAL
12269: IFFALSE 12293
// BurnTreeXYR ( unit , x , y , 8 ) ;
12271: LD_VAR 0 2
12275: PPUSH
12276: LD_VAR 0 4
12280: PPUSH
12281: LD_VAR 0 5
12285: PPUSH
12286: LD_INT 8
12288: PPUSH
12289: CALL 12788 0 4
// end ;
12293: LD_VAR 0 6
12297: RET
// export function ComRadiation ( un ) ; var eff ; begin
12298: LD_INT 0
12300: PPUSH
12301: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
12302: LD_VAR 0 1
12306: PPUSH
12307: CALL_OW 264
12311: PUSH
12312: LD_INT 91
12314: NONEQUAL
12315: IFFALSE 12319
// exit ;
12317: GO 12389
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
12319: LD_INT 68
12321: PPUSH
12322: LD_VAR 0 1
12326: PPUSH
12327: CALL_OW 255
12331: PPUSH
12332: CALL_OW 321
12336: PUSH
12337: LD_INT 2
12339: EQUAL
12340: IFFALSE 12352
// eff := 50 else
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: LD_INT 50
12349: ST_TO_ADDR
12350: GO 12360
// eff := 25 ;
12352: LD_ADDR_VAR 0 3
12356: PUSH
12357: LD_INT 25
12359: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
12360: LD_VAR 0 1
12364: PPUSH
12365: CALL_OW 250
12369: PPUSH
12370: LD_VAR 0 1
12374: PPUSH
12375: CALL_OW 251
12379: PPUSH
12380: LD_VAR 0 3
12384: PPUSH
12385: CALL_OW 495
// end ;
12389: LD_VAR 0 2
12393: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
12394: LD_INT 0
12396: PPUSH
12397: PPUSH
12398: PPUSH
12399: PPUSH
12400: PPUSH
12401: PPUSH
12402: PPUSH
12403: PPUSH
12404: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
12405: LD_VAR 0 1
12409: PPUSH
12410: CALL_OW 302
12414: NOT
12415: PUSH
12416: LD_VAR 0 2
12420: PPUSH
12421: LD_VAR 0 3
12425: PPUSH
12426: CALL_OW 488
12430: NOT
12431: OR
12432: PUSH
12433: LD_VAR 0 4
12437: NOT
12438: OR
12439: IFFALSE 12443
// exit ;
12441: GO 12783
// list := [ ] ;
12443: LD_ADDR_VAR 0 13
12447: PUSH
12448: EMPTY
12449: ST_TO_ADDR
// if x - r < 0 then
12450: LD_VAR 0 2
12454: PUSH
12455: LD_VAR 0 4
12459: MINUS
12460: PUSH
12461: LD_INT 0
12463: LESS
12464: IFFALSE 12476
// min_x := 0 else
12466: LD_ADDR_VAR 0 7
12470: PUSH
12471: LD_INT 0
12473: ST_TO_ADDR
12474: GO 12492
// min_x := x - r ;
12476: LD_ADDR_VAR 0 7
12480: PUSH
12481: LD_VAR 0 2
12485: PUSH
12486: LD_VAR 0 4
12490: MINUS
12491: ST_TO_ADDR
// if y - r < 0 then
12492: LD_VAR 0 3
12496: PUSH
12497: LD_VAR 0 4
12501: MINUS
12502: PUSH
12503: LD_INT 0
12505: LESS
12506: IFFALSE 12518
// min_y := 0 else
12508: LD_ADDR_VAR 0 8
12512: PUSH
12513: LD_INT 0
12515: ST_TO_ADDR
12516: GO 12534
// min_y := y - r ;
12518: LD_ADDR_VAR 0 8
12522: PUSH
12523: LD_VAR 0 3
12527: PUSH
12528: LD_VAR 0 4
12532: MINUS
12533: ST_TO_ADDR
// max_x := x + r ;
12534: LD_ADDR_VAR 0 9
12538: PUSH
12539: LD_VAR 0 2
12543: PUSH
12544: LD_VAR 0 4
12548: PLUS
12549: ST_TO_ADDR
// max_y := y + r ;
12550: LD_ADDR_VAR 0 10
12554: PUSH
12555: LD_VAR 0 3
12559: PUSH
12560: LD_VAR 0 4
12564: PLUS
12565: ST_TO_ADDR
// for _x = min_x to max_x do
12566: LD_ADDR_VAR 0 11
12570: PUSH
12571: DOUBLE
12572: LD_VAR 0 7
12576: DEC
12577: ST_TO_ADDR
12578: LD_VAR 0 9
12582: PUSH
12583: FOR_TO
12584: IFFALSE 12701
// for _y = min_y to max_y do
12586: LD_ADDR_VAR 0 12
12590: PUSH
12591: DOUBLE
12592: LD_VAR 0 8
12596: DEC
12597: ST_TO_ADDR
12598: LD_VAR 0 10
12602: PUSH
12603: FOR_TO
12604: IFFALSE 12697
// begin if not ValidHex ( _x , _y ) then
12606: LD_VAR 0 11
12610: PPUSH
12611: LD_VAR 0 12
12615: PPUSH
12616: CALL_OW 488
12620: NOT
12621: IFFALSE 12625
// continue ;
12623: GO 12603
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12625: LD_VAR 0 11
12629: PPUSH
12630: LD_VAR 0 12
12634: PPUSH
12635: CALL_OW 351
12639: PUSH
12640: LD_VAR 0 11
12644: PPUSH
12645: LD_VAR 0 12
12649: PPUSH
12650: CALL_OW 554
12654: AND
12655: IFFALSE 12695
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12657: LD_ADDR_VAR 0 13
12661: PUSH
12662: LD_VAR 0 13
12666: PPUSH
12667: LD_VAR 0 13
12671: PUSH
12672: LD_INT 1
12674: PLUS
12675: PPUSH
12676: LD_VAR 0 11
12680: PUSH
12681: LD_VAR 0 12
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 2
12694: ST_TO_ADDR
// end ;
12695: GO 12603
12697: POP
12698: POP
12699: GO 12583
12701: POP
12702: POP
// if not list then
12703: LD_VAR 0 13
12707: NOT
12708: IFFALSE 12712
// exit ;
12710: GO 12783
// for i in list do
12712: LD_ADDR_VAR 0 6
12716: PUSH
12717: LD_VAR 0 13
12721: PUSH
12722: FOR_IN
12723: IFFALSE 12781
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
12725: LD_VAR 0 1
12729: PPUSH
12730: LD_STRING M
12732: PUSH
12733: LD_VAR 0 6
12737: PUSH
12738: LD_INT 1
12740: ARRAY
12741: PUSH
12742: LD_VAR 0 6
12746: PUSH
12747: LD_INT 2
12749: ARRAY
12750: PUSH
12751: LD_INT 0
12753: PUSH
12754: LD_INT 0
12756: PUSH
12757: LD_INT 0
12759: PUSH
12760: LD_INT 0
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: PUSH
12772: EMPTY
12773: LIST
12774: PPUSH
12775: CALL_OW 447
12779: GO 12722
12781: POP
12782: POP
// end ;
12783: LD_VAR 0 5
12787: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
12788: LD_INT 0
12790: PPUSH
12791: PPUSH
12792: PPUSH
12793: PPUSH
12794: PPUSH
12795: PPUSH
12796: PPUSH
12797: PPUSH
12798: PPUSH
12799: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
12800: LD_VAR 0 1
12804: PPUSH
12805: CALL_OW 302
12809: NOT
12810: PUSH
12811: LD_VAR 0 2
12815: PPUSH
12816: LD_VAR 0 3
12820: PPUSH
12821: CALL_OW 488
12825: NOT
12826: OR
12827: PUSH
12828: LD_VAR 0 4
12832: NOT
12833: OR
12834: IFFALSE 12838
// exit ;
12836: GO 13351
// list := [ ] ;
12838: LD_ADDR_VAR 0 13
12842: PUSH
12843: EMPTY
12844: ST_TO_ADDR
// if x - r < 0 then
12845: LD_VAR 0 2
12849: PUSH
12850: LD_VAR 0 4
12854: MINUS
12855: PUSH
12856: LD_INT 0
12858: LESS
12859: IFFALSE 12871
// min_x := 0 else
12861: LD_ADDR_VAR 0 7
12865: PUSH
12866: LD_INT 0
12868: ST_TO_ADDR
12869: GO 12887
// min_x := x - r ;
12871: LD_ADDR_VAR 0 7
12875: PUSH
12876: LD_VAR 0 2
12880: PUSH
12881: LD_VAR 0 4
12885: MINUS
12886: ST_TO_ADDR
// if y - r < 0 then
12887: LD_VAR 0 3
12891: PUSH
12892: LD_VAR 0 4
12896: MINUS
12897: PUSH
12898: LD_INT 0
12900: LESS
12901: IFFALSE 12913
// min_y := 0 else
12903: LD_ADDR_VAR 0 8
12907: PUSH
12908: LD_INT 0
12910: ST_TO_ADDR
12911: GO 12929
// min_y := y - r ;
12913: LD_ADDR_VAR 0 8
12917: PUSH
12918: LD_VAR 0 3
12922: PUSH
12923: LD_VAR 0 4
12927: MINUS
12928: ST_TO_ADDR
// max_x := x + r ;
12929: LD_ADDR_VAR 0 9
12933: PUSH
12934: LD_VAR 0 2
12938: PUSH
12939: LD_VAR 0 4
12943: PLUS
12944: ST_TO_ADDR
// max_y := y + r ;
12945: LD_ADDR_VAR 0 10
12949: PUSH
12950: LD_VAR 0 3
12954: PUSH
12955: LD_VAR 0 4
12959: PLUS
12960: ST_TO_ADDR
// for _x = min_x to max_x do
12961: LD_ADDR_VAR 0 11
12965: PUSH
12966: DOUBLE
12967: LD_VAR 0 7
12971: DEC
12972: ST_TO_ADDR
12973: LD_VAR 0 9
12977: PUSH
12978: FOR_TO
12979: IFFALSE 13096
// for _y = min_y to max_y do
12981: LD_ADDR_VAR 0 12
12985: PUSH
12986: DOUBLE
12987: LD_VAR 0 8
12991: DEC
12992: ST_TO_ADDR
12993: LD_VAR 0 10
12997: PUSH
12998: FOR_TO
12999: IFFALSE 13092
// begin if not ValidHex ( _x , _y ) then
13001: LD_VAR 0 11
13005: PPUSH
13006: LD_VAR 0 12
13010: PPUSH
13011: CALL_OW 488
13015: NOT
13016: IFFALSE 13020
// continue ;
13018: GO 12998
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
13020: LD_VAR 0 11
13024: PPUSH
13025: LD_VAR 0 12
13029: PPUSH
13030: CALL_OW 351
13034: PUSH
13035: LD_VAR 0 11
13039: PPUSH
13040: LD_VAR 0 12
13044: PPUSH
13045: CALL_OW 554
13049: AND
13050: IFFALSE 13090
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
13052: LD_ADDR_VAR 0 13
13056: PUSH
13057: LD_VAR 0 13
13061: PPUSH
13062: LD_VAR 0 13
13066: PUSH
13067: LD_INT 1
13069: PLUS
13070: PPUSH
13071: LD_VAR 0 11
13075: PUSH
13076: LD_VAR 0 12
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PPUSH
13085: CALL_OW 2
13089: ST_TO_ADDR
// end ;
13090: GO 12998
13092: POP
13093: POP
13094: GO 12978
13096: POP
13097: POP
// if not list then
13098: LD_VAR 0 13
13102: NOT
13103: IFFALSE 13107
// exit ;
13105: GO 13351
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
13107: LD_ADDR_VAR 0 13
13111: PUSH
13112: LD_VAR 0 1
13116: PPUSH
13117: LD_VAR 0 13
13121: PPUSH
13122: LD_INT 1
13124: PPUSH
13125: LD_INT 1
13127: PPUSH
13128: CALL 22127 0 4
13132: ST_TO_ADDR
// ComStop ( flame ) ;
13133: LD_VAR 0 1
13137: PPUSH
13138: CALL_OW 141
// for i in list do
13142: LD_ADDR_VAR 0 6
13146: PUSH
13147: LD_VAR 0 13
13151: PUSH
13152: FOR_IN
13153: IFFALSE 13184
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
13155: LD_VAR 0 1
13159: PPUSH
13160: LD_VAR 0 6
13164: PUSH
13165: LD_INT 1
13167: ARRAY
13168: PPUSH
13169: LD_VAR 0 6
13173: PUSH
13174: LD_INT 2
13176: ARRAY
13177: PPUSH
13178: CALL_OW 176
13182: GO 13152
13184: POP
13185: POP
// repeat wait ( 0 0$1 ) ;
13186: LD_INT 35
13188: PPUSH
13189: CALL_OW 67
// task := GetTaskList ( flame ) ;
13193: LD_ADDR_VAR 0 14
13197: PUSH
13198: LD_VAR 0 1
13202: PPUSH
13203: CALL_OW 437
13207: ST_TO_ADDR
// if not task then
13208: LD_VAR 0 14
13212: NOT
13213: IFFALSE 13217
// exit ;
13215: GO 13351
// if task [ 1 ] [ 1 ] <> | then
13217: LD_VAR 0 14
13221: PUSH
13222: LD_INT 1
13224: ARRAY
13225: PUSH
13226: LD_INT 1
13228: ARRAY
13229: PUSH
13230: LD_STRING |
13232: NONEQUAL
13233: IFFALSE 13237
// exit ;
13235: GO 13351
// _x := task [ 1 ] [ 2 ] ;
13237: LD_ADDR_VAR 0 11
13241: PUSH
13242: LD_VAR 0 14
13246: PUSH
13247: LD_INT 1
13249: ARRAY
13250: PUSH
13251: LD_INT 2
13253: ARRAY
13254: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
13255: LD_ADDR_VAR 0 12
13259: PUSH
13260: LD_VAR 0 14
13264: PUSH
13265: LD_INT 1
13267: ARRAY
13268: PUSH
13269: LD_INT 3
13271: ARRAY
13272: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
13273: LD_VAR 0 11
13277: PPUSH
13278: LD_VAR 0 12
13282: PPUSH
13283: CALL_OW 351
13287: NOT
13288: PUSH
13289: LD_VAR 0 11
13293: PPUSH
13294: LD_VAR 0 12
13298: PPUSH
13299: CALL_OW 554
13303: NOT
13304: OR
13305: IFFALSE 13339
// begin task := Delete ( task , 1 ) ;
13307: LD_ADDR_VAR 0 14
13311: PUSH
13312: LD_VAR 0 14
13316: PPUSH
13317: LD_INT 1
13319: PPUSH
13320: CALL_OW 3
13324: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
13325: LD_VAR 0 1
13329: PPUSH
13330: LD_VAR 0 14
13334: PPUSH
13335: CALL_OW 446
// end ; until not HasTask ( flame ) ;
13339: LD_VAR 0 1
13343: PPUSH
13344: CALL_OW 314
13348: NOT
13349: IFFALSE 13186
// end ;
13351: LD_VAR 0 5
13355: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
13356: LD_EXP 43
13360: NOT
13361: IFFALSE 13411
13363: GO 13365
13365: DISABLE
// begin initHack := true ;
13366: LD_ADDR_EXP 43
13370: PUSH
13371: LD_INT 1
13373: ST_TO_ADDR
// hackTanks := [ ] ;
13374: LD_ADDR_EXP 44
13378: PUSH
13379: EMPTY
13380: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
13381: LD_ADDR_EXP 45
13385: PUSH
13386: EMPTY
13387: ST_TO_ADDR
// hackLimit := 3 ;
13388: LD_ADDR_EXP 46
13392: PUSH
13393: LD_INT 3
13395: ST_TO_ADDR
// hackDist := 12 ;
13396: LD_ADDR_EXP 47
13400: PUSH
13401: LD_INT 12
13403: ST_TO_ADDR
// hackCounter := [ ] ;
13404: LD_ADDR_EXP 48
13408: PUSH
13409: EMPTY
13410: ST_TO_ADDR
// end ;
13411: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
13412: LD_EXP 43
13416: PUSH
13417: LD_INT 34
13419: PUSH
13420: LD_INT 99
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PPUSH
13427: CALL_OW 69
13431: AND
13432: IFFALSE 13685
13434: GO 13436
13436: DISABLE
13437: LD_INT 0
13439: PPUSH
13440: PPUSH
// begin enable ;
13441: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
13442: LD_ADDR_VAR 0 1
13446: PUSH
13447: LD_INT 34
13449: PUSH
13450: LD_INT 99
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PPUSH
13457: CALL_OW 69
13461: PUSH
13462: FOR_IN
13463: IFFALSE 13683
// begin if not i in hackTanks then
13465: LD_VAR 0 1
13469: PUSH
13470: LD_EXP 44
13474: IN
13475: NOT
13476: IFFALSE 13559
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
13478: LD_ADDR_EXP 44
13482: PUSH
13483: LD_EXP 44
13487: PPUSH
13488: LD_EXP 44
13492: PUSH
13493: LD_INT 1
13495: PLUS
13496: PPUSH
13497: LD_VAR 0 1
13501: PPUSH
13502: CALL_OW 1
13506: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
13507: LD_ADDR_EXP 45
13511: PUSH
13512: LD_EXP 45
13516: PPUSH
13517: LD_EXP 45
13521: PUSH
13522: LD_INT 1
13524: PLUS
13525: PPUSH
13526: EMPTY
13527: PPUSH
13528: CALL_OW 1
13532: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
13533: LD_ADDR_EXP 48
13537: PUSH
13538: LD_EXP 48
13542: PPUSH
13543: LD_EXP 48
13547: PUSH
13548: LD_INT 1
13550: PLUS
13551: PPUSH
13552: EMPTY
13553: PPUSH
13554: CALL_OW 1
13558: ST_TO_ADDR
// end ; if not IsOk ( i ) then
13559: LD_VAR 0 1
13563: PPUSH
13564: CALL_OW 302
13568: NOT
13569: IFFALSE 13582
// begin HackUnlinkAll ( i ) ;
13571: LD_VAR 0 1
13575: PPUSH
13576: CALL 13688 0 1
// continue ;
13580: GO 13462
// end ; HackCheckCapturedStatus ( i ) ;
13582: LD_VAR 0 1
13586: PPUSH
13587: CALL 14131 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
13591: LD_ADDR_VAR 0 2
13595: PUSH
13596: LD_INT 81
13598: PUSH
13599: LD_VAR 0 1
13603: PPUSH
13604: CALL_OW 255
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: LD_INT 33
13615: PUSH
13616: LD_INT 3
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 91
13625: PUSH
13626: LD_VAR 0 1
13630: PUSH
13631: LD_EXP 47
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: LIST
13640: PUSH
13641: LD_INT 50
13643: PUSH
13644: EMPTY
13645: LIST
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: PPUSH
13653: CALL_OW 69
13657: ST_TO_ADDR
// if not tmp then
13658: LD_VAR 0 2
13662: NOT
13663: IFFALSE 13667
// continue ;
13665: GO 13462
// HackLink ( i , tmp ) ;
13667: LD_VAR 0 1
13671: PPUSH
13672: LD_VAR 0 2
13676: PPUSH
13677: CALL 13824 0 2
// end ;
13681: GO 13462
13683: POP
13684: POP
// end ;
13685: PPOPN 2
13687: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
13688: LD_INT 0
13690: PPUSH
13691: PPUSH
13692: PPUSH
// if not hack in hackTanks then
13693: LD_VAR 0 1
13697: PUSH
13698: LD_EXP 44
13702: IN
13703: NOT
13704: IFFALSE 13708
// exit ;
13706: GO 13819
// index := GetElementIndex ( hackTanks , hack ) ;
13708: LD_ADDR_VAR 0 4
13712: PUSH
13713: LD_EXP 44
13717: PPUSH
13718: LD_VAR 0 1
13722: PPUSH
13723: CALL 21424 0 2
13727: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
13728: LD_EXP 45
13732: PUSH
13733: LD_VAR 0 4
13737: ARRAY
13738: IFFALSE 13819
// begin for i in hackTanksCaptured [ index ] do
13740: LD_ADDR_VAR 0 3
13744: PUSH
13745: LD_EXP 45
13749: PUSH
13750: LD_VAR 0 4
13754: ARRAY
13755: PUSH
13756: FOR_IN
13757: IFFALSE 13783
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
13759: LD_VAR 0 3
13763: PUSH
13764: LD_INT 1
13766: ARRAY
13767: PPUSH
13768: LD_VAR 0 3
13772: PUSH
13773: LD_INT 2
13775: ARRAY
13776: PPUSH
13777: CALL_OW 235
13781: GO 13756
13783: POP
13784: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
13785: LD_ADDR_EXP 45
13789: PUSH
13790: LD_EXP 45
13794: PPUSH
13795: LD_VAR 0 4
13799: PPUSH
13800: EMPTY
13801: PPUSH
13802: CALL_OW 1
13806: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
13807: LD_VAR 0 1
13811: PPUSH
13812: LD_INT 0
13814: PPUSH
13815: CALL_OW 505
// end ; end ;
13819: LD_VAR 0 2
13823: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
13824: LD_INT 0
13826: PPUSH
13827: PPUSH
13828: PPUSH
// if not hack in hackTanks or not vehicles then
13829: LD_VAR 0 1
13833: PUSH
13834: LD_EXP 44
13838: IN
13839: NOT
13840: PUSH
13841: LD_VAR 0 2
13845: NOT
13846: OR
13847: IFFALSE 13851
// exit ;
13849: GO 14126
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
13851: LD_ADDR_VAR 0 2
13855: PUSH
13856: LD_VAR 0 1
13860: PPUSH
13861: LD_VAR 0 2
13865: PPUSH
13866: LD_INT 1
13868: PPUSH
13869: LD_INT 1
13871: PPUSH
13872: CALL 22074 0 4
13876: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
13877: LD_ADDR_VAR 0 5
13881: PUSH
13882: LD_EXP 44
13886: PPUSH
13887: LD_VAR 0 1
13891: PPUSH
13892: CALL 21424 0 2
13896: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
13897: LD_EXP 45
13901: PUSH
13902: LD_VAR 0 5
13906: ARRAY
13907: PUSH
13908: LD_EXP 46
13912: LESS
13913: IFFALSE 14102
// begin for i := 1 to vehicles do
13915: LD_ADDR_VAR 0 4
13919: PUSH
13920: DOUBLE
13921: LD_INT 1
13923: DEC
13924: ST_TO_ADDR
13925: LD_VAR 0 2
13929: PUSH
13930: FOR_TO
13931: IFFALSE 14100
// begin if hackTanksCaptured [ index ] = hackLimit then
13933: LD_EXP 45
13937: PUSH
13938: LD_VAR 0 5
13942: ARRAY
13943: PUSH
13944: LD_EXP 46
13948: EQUAL
13949: IFFALSE 13953
// break ;
13951: GO 14100
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
13953: LD_ADDR_EXP 48
13957: PUSH
13958: LD_EXP 48
13962: PPUSH
13963: LD_VAR 0 5
13967: PPUSH
13968: LD_EXP 48
13972: PUSH
13973: LD_VAR 0 5
13977: ARRAY
13978: PUSH
13979: LD_INT 1
13981: PLUS
13982: PPUSH
13983: CALL_OW 1
13987: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
13988: LD_ADDR_EXP 45
13992: PUSH
13993: LD_EXP 45
13997: PPUSH
13998: LD_VAR 0 5
14002: PUSH
14003: LD_EXP 45
14007: PUSH
14008: LD_VAR 0 5
14012: ARRAY
14013: PUSH
14014: LD_INT 1
14016: PLUS
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PPUSH
14022: LD_VAR 0 2
14026: PUSH
14027: LD_VAR 0 4
14031: ARRAY
14032: PUSH
14033: LD_VAR 0 2
14037: PUSH
14038: LD_VAR 0 4
14042: ARRAY
14043: PPUSH
14044: CALL_OW 255
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PPUSH
14053: CALL 21639 0 3
14057: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
14058: LD_VAR 0 2
14062: PUSH
14063: LD_VAR 0 4
14067: ARRAY
14068: PPUSH
14069: LD_VAR 0 1
14073: PPUSH
14074: CALL_OW 255
14078: PPUSH
14079: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
14083: LD_VAR 0 2
14087: PUSH
14088: LD_VAR 0 4
14092: ARRAY
14093: PPUSH
14094: CALL_OW 141
// end ;
14098: GO 13930
14100: POP
14101: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
14102: LD_VAR 0 1
14106: PPUSH
14107: LD_EXP 45
14111: PUSH
14112: LD_VAR 0 5
14116: ARRAY
14117: PUSH
14118: LD_INT 0
14120: PLUS
14121: PPUSH
14122: CALL_OW 505
// end ;
14126: LD_VAR 0 3
14130: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
14131: LD_INT 0
14133: PPUSH
14134: PPUSH
14135: PPUSH
14136: PPUSH
// if not hack in hackTanks then
14137: LD_VAR 0 1
14141: PUSH
14142: LD_EXP 44
14146: IN
14147: NOT
14148: IFFALSE 14152
// exit ;
14150: GO 14392
// index := GetElementIndex ( hackTanks , hack ) ;
14152: LD_ADDR_VAR 0 4
14156: PUSH
14157: LD_EXP 44
14161: PPUSH
14162: LD_VAR 0 1
14166: PPUSH
14167: CALL 21424 0 2
14171: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
14172: LD_ADDR_VAR 0 3
14176: PUSH
14177: DOUBLE
14178: LD_EXP 45
14182: PUSH
14183: LD_VAR 0 4
14187: ARRAY
14188: INC
14189: ST_TO_ADDR
14190: LD_INT 1
14192: PUSH
14193: FOR_DOWNTO
14194: IFFALSE 14366
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
14196: LD_ADDR_VAR 0 5
14200: PUSH
14201: LD_EXP 45
14205: PUSH
14206: LD_VAR 0 4
14210: ARRAY
14211: PUSH
14212: LD_VAR 0 3
14216: ARRAY
14217: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
14218: LD_VAR 0 5
14222: PUSH
14223: LD_INT 1
14225: ARRAY
14226: PPUSH
14227: CALL_OW 302
14231: NOT
14232: PUSH
14233: LD_VAR 0 5
14237: PUSH
14238: LD_INT 1
14240: ARRAY
14241: PPUSH
14242: CALL_OW 255
14246: PUSH
14247: LD_VAR 0 1
14251: PPUSH
14252: CALL_OW 255
14256: NONEQUAL
14257: OR
14258: IFFALSE 14364
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
14260: LD_VAR 0 5
14264: PUSH
14265: LD_INT 1
14267: ARRAY
14268: PPUSH
14269: CALL_OW 305
14273: PUSH
14274: LD_VAR 0 5
14278: PUSH
14279: LD_INT 1
14281: ARRAY
14282: PPUSH
14283: CALL_OW 255
14287: PUSH
14288: LD_VAR 0 1
14292: PPUSH
14293: CALL_OW 255
14297: EQUAL
14298: AND
14299: IFFALSE 14323
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
14301: LD_VAR 0 5
14305: PUSH
14306: LD_INT 1
14308: ARRAY
14309: PPUSH
14310: LD_VAR 0 5
14314: PUSH
14315: LD_INT 2
14317: ARRAY
14318: PPUSH
14319: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
14323: LD_ADDR_EXP 45
14327: PUSH
14328: LD_EXP 45
14332: PPUSH
14333: LD_VAR 0 4
14337: PPUSH
14338: LD_EXP 45
14342: PUSH
14343: LD_VAR 0 4
14347: ARRAY
14348: PPUSH
14349: LD_VAR 0 3
14353: PPUSH
14354: CALL_OW 3
14358: PPUSH
14359: CALL_OW 1
14363: ST_TO_ADDR
// end ; end ;
14364: GO 14193
14366: POP
14367: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
14368: LD_VAR 0 1
14372: PPUSH
14373: LD_EXP 45
14377: PUSH
14378: LD_VAR 0 4
14382: ARRAY
14383: PUSH
14384: LD_INT 0
14386: PLUS
14387: PPUSH
14388: CALL_OW 505
// end ;
14392: LD_VAR 0 2
14396: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
14397: LD_INT 0
14399: PPUSH
14400: PPUSH
14401: PPUSH
14402: PPUSH
// if not hack in hackTanks then
14403: LD_VAR 0 1
14407: PUSH
14408: LD_EXP 44
14412: IN
14413: NOT
14414: IFFALSE 14418
// exit ;
14416: GO 14503
// index := GetElementIndex ( hackTanks , hack ) ;
14418: LD_ADDR_VAR 0 5
14422: PUSH
14423: LD_EXP 44
14427: PPUSH
14428: LD_VAR 0 1
14432: PPUSH
14433: CALL 21424 0 2
14437: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
14438: LD_ADDR_VAR 0 4
14442: PUSH
14443: DOUBLE
14444: LD_INT 1
14446: DEC
14447: ST_TO_ADDR
14448: LD_EXP 45
14452: PUSH
14453: LD_VAR 0 5
14457: ARRAY
14458: PUSH
14459: FOR_TO
14460: IFFALSE 14501
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
14462: LD_EXP 45
14466: PUSH
14467: LD_VAR 0 5
14471: ARRAY
14472: PUSH
14473: LD_VAR 0 4
14477: ARRAY
14478: PUSH
14479: LD_INT 1
14481: ARRAY
14482: PUSH
14483: LD_VAR 0 2
14487: EQUAL
14488: IFFALSE 14499
// KillUnit ( vehicle ) ;
14490: LD_VAR 0 2
14494: PPUSH
14495: CALL_OW 66
14499: GO 14459
14501: POP
14502: POP
// end ;
14503: LD_VAR 0 3
14507: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
14508: LD_EXP 49
14512: NOT
14513: IFFALSE 14548
14515: GO 14517
14517: DISABLE
// begin initMiner := true ;
14518: LD_ADDR_EXP 49
14522: PUSH
14523: LD_INT 1
14525: ST_TO_ADDR
// minersList := [ ] ;
14526: LD_ADDR_EXP 50
14530: PUSH
14531: EMPTY
14532: ST_TO_ADDR
// minerMinesList := [ ] ;
14533: LD_ADDR_EXP 51
14537: PUSH
14538: EMPTY
14539: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
14540: LD_ADDR_EXP 52
14544: PUSH
14545: LD_INT 5
14547: ST_TO_ADDR
// end ;
14548: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
14549: LD_EXP 49
14553: PUSH
14554: LD_INT 34
14556: PUSH
14557: LD_INT 81
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PPUSH
14564: CALL_OW 69
14568: AND
14569: IFFALSE 15030
14571: GO 14573
14573: DISABLE
14574: LD_INT 0
14576: PPUSH
14577: PPUSH
14578: PPUSH
14579: PPUSH
// begin enable ;
14580: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
14581: LD_ADDR_VAR 0 1
14585: PUSH
14586: LD_INT 34
14588: PUSH
14589: LD_INT 81
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PPUSH
14596: CALL_OW 69
14600: PUSH
14601: FOR_IN
14602: IFFALSE 14674
// begin if not i in minersList then
14604: LD_VAR 0 1
14608: PUSH
14609: LD_EXP 50
14613: IN
14614: NOT
14615: IFFALSE 14672
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
14617: LD_ADDR_EXP 50
14621: PUSH
14622: LD_EXP 50
14626: PPUSH
14627: LD_EXP 50
14631: PUSH
14632: LD_INT 1
14634: PLUS
14635: PPUSH
14636: LD_VAR 0 1
14640: PPUSH
14641: CALL_OW 1
14645: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
14646: LD_ADDR_EXP 51
14650: PUSH
14651: LD_EXP 51
14655: PPUSH
14656: LD_EXP 51
14660: PUSH
14661: LD_INT 1
14663: PLUS
14664: PPUSH
14665: EMPTY
14666: PPUSH
14667: CALL_OW 1
14671: ST_TO_ADDR
// end end ;
14672: GO 14601
14674: POP
14675: POP
// for i := minerMinesList downto 1 do
14676: LD_ADDR_VAR 0 1
14680: PUSH
14681: DOUBLE
14682: LD_EXP 51
14686: INC
14687: ST_TO_ADDR
14688: LD_INT 1
14690: PUSH
14691: FOR_DOWNTO
14692: IFFALSE 15028
// begin if IsLive ( minersList [ i ] ) then
14694: LD_EXP 50
14698: PUSH
14699: LD_VAR 0 1
14703: ARRAY
14704: PPUSH
14705: CALL_OW 300
14709: IFFALSE 14737
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
14711: LD_EXP 50
14715: PUSH
14716: LD_VAR 0 1
14720: ARRAY
14721: PPUSH
14722: LD_EXP 51
14726: PUSH
14727: LD_VAR 0 1
14731: ARRAY
14732: PPUSH
14733: CALL_OW 505
// if not minerMinesList [ i ] then
14737: LD_EXP 51
14741: PUSH
14742: LD_VAR 0 1
14746: ARRAY
14747: NOT
14748: IFFALSE 14752
// continue ;
14750: GO 14691
// for j := minerMinesList [ i ] downto 1 do
14752: LD_ADDR_VAR 0 2
14756: PUSH
14757: DOUBLE
14758: LD_EXP 51
14762: PUSH
14763: LD_VAR 0 1
14767: ARRAY
14768: INC
14769: ST_TO_ADDR
14770: LD_INT 1
14772: PUSH
14773: FOR_DOWNTO
14774: IFFALSE 15024
// begin side := GetSide ( minersList [ i ] ) ;
14776: LD_ADDR_VAR 0 3
14780: PUSH
14781: LD_EXP 50
14785: PUSH
14786: LD_VAR 0 1
14790: ARRAY
14791: PPUSH
14792: CALL_OW 255
14796: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
14797: LD_ADDR_VAR 0 4
14801: PUSH
14802: LD_EXP 51
14806: PUSH
14807: LD_VAR 0 1
14811: ARRAY
14812: PUSH
14813: LD_VAR 0 2
14817: ARRAY
14818: PUSH
14819: LD_INT 1
14821: ARRAY
14822: PPUSH
14823: LD_EXP 51
14827: PUSH
14828: LD_VAR 0 1
14832: ARRAY
14833: PUSH
14834: LD_VAR 0 2
14838: ARRAY
14839: PUSH
14840: LD_INT 2
14842: ARRAY
14843: PPUSH
14844: CALL_OW 428
14848: ST_TO_ADDR
// if not tmp then
14849: LD_VAR 0 4
14853: NOT
14854: IFFALSE 14858
// continue ;
14856: GO 14773
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
14858: LD_VAR 0 4
14862: PUSH
14863: LD_INT 81
14865: PUSH
14866: LD_VAR 0 3
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PPUSH
14875: CALL_OW 69
14879: IN
14880: PUSH
14881: LD_EXP 51
14885: PUSH
14886: LD_VAR 0 1
14890: ARRAY
14891: PUSH
14892: LD_VAR 0 2
14896: ARRAY
14897: PUSH
14898: LD_INT 1
14900: ARRAY
14901: PPUSH
14902: LD_EXP 51
14906: PUSH
14907: LD_VAR 0 1
14911: ARRAY
14912: PUSH
14913: LD_VAR 0 2
14917: ARRAY
14918: PUSH
14919: LD_INT 2
14921: ARRAY
14922: PPUSH
14923: CALL_OW 458
14927: AND
14928: IFFALSE 15022
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
14930: LD_EXP 51
14934: PUSH
14935: LD_VAR 0 1
14939: ARRAY
14940: PUSH
14941: LD_VAR 0 2
14945: ARRAY
14946: PUSH
14947: LD_INT 1
14949: ARRAY
14950: PPUSH
14951: LD_EXP 51
14955: PUSH
14956: LD_VAR 0 1
14960: ARRAY
14961: PUSH
14962: LD_VAR 0 2
14966: ARRAY
14967: PUSH
14968: LD_INT 2
14970: ARRAY
14971: PPUSH
14972: LD_VAR 0 3
14976: PPUSH
14977: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
14981: LD_ADDR_EXP 51
14985: PUSH
14986: LD_EXP 51
14990: PPUSH
14991: LD_VAR 0 1
14995: PPUSH
14996: LD_EXP 51
15000: PUSH
15001: LD_VAR 0 1
15005: ARRAY
15006: PPUSH
15007: LD_VAR 0 2
15011: PPUSH
15012: CALL_OW 3
15016: PPUSH
15017: CALL_OW 1
15021: ST_TO_ADDR
// end ; end ;
15022: GO 14773
15024: POP
15025: POP
// end ;
15026: GO 14691
15028: POP
15029: POP
// end ;
15030: PPOPN 4
15032: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
15033: LD_INT 0
15035: PPUSH
15036: PPUSH
// result := false ;
15037: LD_ADDR_VAR 0 4
15041: PUSH
15042: LD_INT 0
15044: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
15045: LD_VAR 0 1
15049: PPUSH
15050: CALL_OW 264
15054: PUSH
15055: LD_INT 81
15057: EQUAL
15058: NOT
15059: IFFALSE 15063
// exit ;
15061: GO 15303
// index := GetElementIndex ( minersList , unit ) ;
15063: LD_ADDR_VAR 0 5
15067: PUSH
15068: LD_EXP 50
15072: PPUSH
15073: LD_VAR 0 1
15077: PPUSH
15078: CALL 21424 0 2
15082: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
15083: LD_EXP 51
15087: PUSH
15088: LD_VAR 0 5
15092: ARRAY
15093: PUSH
15094: LD_EXP 52
15098: GREATEREQUAL
15099: IFFALSE 15103
// exit ;
15101: GO 15303
// ComMoveXY ( unit , x , y ) ;
15103: LD_VAR 0 1
15107: PPUSH
15108: LD_VAR 0 2
15112: PPUSH
15113: LD_VAR 0 3
15117: PPUSH
15118: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15122: LD_INT 35
15124: PPUSH
15125: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
15129: LD_VAR 0 1
15133: PPUSH
15134: LD_VAR 0 2
15138: PPUSH
15139: LD_VAR 0 3
15143: PPUSH
15144: CALL 53185 0 3
15148: NOT
15149: PUSH
15150: LD_VAR 0 1
15154: PPUSH
15155: CALL_OW 314
15159: AND
15160: IFFALSE 15164
// exit ;
15162: GO 15303
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
15164: LD_VAR 0 2
15168: PPUSH
15169: LD_VAR 0 3
15173: PPUSH
15174: CALL_OW 428
15178: PUSH
15179: LD_VAR 0 1
15183: EQUAL
15184: PUSH
15185: LD_VAR 0 1
15189: PPUSH
15190: CALL_OW 314
15194: NOT
15195: AND
15196: IFFALSE 15122
// PlaySoundXY ( x , y , PlantMine ) ;
15198: LD_VAR 0 2
15202: PPUSH
15203: LD_VAR 0 3
15207: PPUSH
15208: LD_STRING PlantMine
15210: PPUSH
15211: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
15215: LD_VAR 0 2
15219: PPUSH
15220: LD_VAR 0 3
15224: PPUSH
15225: LD_VAR 0 1
15229: PPUSH
15230: CALL_OW 255
15234: PPUSH
15235: LD_INT 0
15237: PPUSH
15238: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
15242: LD_ADDR_EXP 51
15246: PUSH
15247: LD_EXP 51
15251: PPUSH
15252: LD_VAR 0 5
15256: PUSH
15257: LD_EXP 51
15261: PUSH
15262: LD_VAR 0 5
15266: ARRAY
15267: PUSH
15268: LD_INT 1
15270: PLUS
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PPUSH
15276: LD_VAR 0 2
15280: PUSH
15281: LD_VAR 0 3
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PPUSH
15290: CALL 21639 0 3
15294: ST_TO_ADDR
// result := true ;
15295: LD_ADDR_VAR 0 4
15299: PUSH
15300: LD_INT 1
15302: ST_TO_ADDR
// end ;
15303: LD_VAR 0 4
15307: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
15308: LD_INT 0
15310: PPUSH
15311: PPUSH
15312: PPUSH
// if not unit in minersList then
15313: LD_VAR 0 1
15317: PUSH
15318: LD_EXP 50
15322: IN
15323: NOT
15324: IFFALSE 15328
// exit ;
15326: GO 15720
// index := GetElementIndex ( minersList , unit ) ;
15328: LD_ADDR_VAR 0 6
15332: PUSH
15333: LD_EXP 50
15337: PPUSH
15338: LD_VAR 0 1
15342: PPUSH
15343: CALL 21424 0 2
15347: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
15348: LD_ADDR_VAR 0 5
15352: PUSH
15353: DOUBLE
15354: LD_EXP 51
15358: PUSH
15359: LD_VAR 0 6
15363: ARRAY
15364: INC
15365: ST_TO_ADDR
15366: LD_INT 1
15368: PUSH
15369: FOR_DOWNTO
15370: IFFALSE 15531
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
15372: LD_EXP 51
15376: PUSH
15377: LD_VAR 0 6
15381: ARRAY
15382: PUSH
15383: LD_VAR 0 5
15387: ARRAY
15388: PUSH
15389: LD_INT 1
15391: ARRAY
15392: PUSH
15393: LD_VAR 0 2
15397: EQUAL
15398: PUSH
15399: LD_EXP 51
15403: PUSH
15404: LD_VAR 0 6
15408: ARRAY
15409: PUSH
15410: LD_VAR 0 5
15414: ARRAY
15415: PUSH
15416: LD_INT 2
15418: ARRAY
15419: PUSH
15420: LD_VAR 0 3
15424: EQUAL
15425: AND
15426: IFFALSE 15529
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
15428: LD_EXP 51
15432: PUSH
15433: LD_VAR 0 6
15437: ARRAY
15438: PUSH
15439: LD_VAR 0 5
15443: ARRAY
15444: PUSH
15445: LD_INT 1
15447: ARRAY
15448: PPUSH
15449: LD_EXP 51
15453: PUSH
15454: LD_VAR 0 6
15458: ARRAY
15459: PUSH
15460: LD_VAR 0 5
15464: ARRAY
15465: PUSH
15466: LD_INT 2
15468: ARRAY
15469: PPUSH
15470: LD_VAR 0 1
15474: PPUSH
15475: CALL_OW 255
15479: PPUSH
15480: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
15484: LD_ADDR_EXP 51
15488: PUSH
15489: LD_EXP 51
15493: PPUSH
15494: LD_VAR 0 6
15498: PPUSH
15499: LD_EXP 51
15503: PUSH
15504: LD_VAR 0 6
15508: ARRAY
15509: PPUSH
15510: LD_VAR 0 5
15514: PPUSH
15515: CALL_OW 3
15519: PPUSH
15520: CALL_OW 1
15524: ST_TO_ADDR
// exit ;
15525: POP
15526: POP
15527: GO 15720
// end ; end ;
15529: GO 15369
15531: POP
15532: POP
// for i := minerMinesList [ index ] downto 1 do
15533: LD_ADDR_VAR 0 5
15537: PUSH
15538: DOUBLE
15539: LD_EXP 51
15543: PUSH
15544: LD_VAR 0 6
15548: ARRAY
15549: INC
15550: ST_TO_ADDR
15551: LD_INT 1
15553: PUSH
15554: FOR_DOWNTO
15555: IFFALSE 15718
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
15557: LD_EXP 51
15561: PUSH
15562: LD_VAR 0 6
15566: ARRAY
15567: PUSH
15568: LD_VAR 0 5
15572: ARRAY
15573: PUSH
15574: LD_INT 1
15576: ARRAY
15577: PPUSH
15578: LD_EXP 51
15582: PUSH
15583: LD_VAR 0 6
15587: ARRAY
15588: PUSH
15589: LD_VAR 0 5
15593: ARRAY
15594: PUSH
15595: LD_INT 2
15597: ARRAY
15598: PPUSH
15599: LD_VAR 0 2
15603: PPUSH
15604: LD_VAR 0 3
15608: PPUSH
15609: CALL_OW 298
15613: PUSH
15614: LD_INT 6
15616: LESS
15617: IFFALSE 15716
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
15619: LD_EXP 51
15623: PUSH
15624: LD_VAR 0 6
15628: ARRAY
15629: PUSH
15630: LD_VAR 0 5
15634: ARRAY
15635: PUSH
15636: LD_INT 1
15638: ARRAY
15639: PPUSH
15640: LD_EXP 51
15644: PUSH
15645: LD_VAR 0 6
15649: ARRAY
15650: PUSH
15651: LD_VAR 0 5
15655: ARRAY
15656: PUSH
15657: LD_INT 2
15659: ARRAY
15660: PPUSH
15661: LD_VAR 0 1
15665: PPUSH
15666: CALL_OW 255
15670: PPUSH
15671: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
15675: LD_ADDR_EXP 51
15679: PUSH
15680: LD_EXP 51
15684: PPUSH
15685: LD_VAR 0 6
15689: PPUSH
15690: LD_EXP 51
15694: PUSH
15695: LD_VAR 0 6
15699: ARRAY
15700: PPUSH
15701: LD_VAR 0 5
15705: PPUSH
15706: CALL_OW 3
15710: PPUSH
15711: CALL_OW 1
15715: ST_TO_ADDR
// end ; end ;
15716: GO 15554
15718: POP
15719: POP
// end ;
15720: LD_VAR 0 4
15724: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
15725: LD_INT 0
15727: PPUSH
15728: PPUSH
15729: PPUSH
15730: PPUSH
15731: PPUSH
15732: PPUSH
15733: PPUSH
15734: PPUSH
15735: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
15736: LD_VAR 0 1
15740: PPUSH
15741: CALL_OW 264
15745: PUSH
15746: LD_INT 81
15748: EQUAL
15749: NOT
15750: PUSH
15751: LD_VAR 0 1
15755: PUSH
15756: LD_EXP 50
15760: IN
15761: NOT
15762: OR
15763: IFFALSE 15767
// exit ;
15765: GO 16089
// index := GetElementIndex ( minersList , unit ) ;
15767: LD_ADDR_VAR 0 6
15771: PUSH
15772: LD_EXP 50
15776: PPUSH
15777: LD_VAR 0 1
15781: PPUSH
15782: CALL 21424 0 2
15786: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
15787: LD_ADDR_VAR 0 8
15791: PUSH
15792: LD_EXP 52
15796: PUSH
15797: LD_EXP 51
15801: PUSH
15802: LD_VAR 0 6
15806: ARRAY
15807: MINUS
15808: ST_TO_ADDR
// if not minesFreeAmount then
15809: LD_VAR 0 8
15813: NOT
15814: IFFALSE 15818
// exit ;
15816: GO 16089
// tmp := [ ] ;
15818: LD_ADDR_VAR 0 7
15822: PUSH
15823: EMPTY
15824: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
15825: LD_ADDR_VAR 0 5
15829: PUSH
15830: DOUBLE
15831: LD_INT 1
15833: DEC
15834: ST_TO_ADDR
15835: LD_VAR 0 8
15839: PUSH
15840: FOR_TO
15841: IFFALSE 16036
// begin _d := rand ( 0 , 5 ) ;
15843: LD_ADDR_VAR 0 11
15847: PUSH
15848: LD_INT 0
15850: PPUSH
15851: LD_INT 5
15853: PPUSH
15854: CALL_OW 12
15858: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
15859: LD_ADDR_VAR 0 12
15863: PUSH
15864: LD_INT 2
15866: PPUSH
15867: LD_INT 6
15869: PPUSH
15870: CALL_OW 12
15874: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
15875: LD_ADDR_VAR 0 9
15879: PUSH
15880: LD_VAR 0 2
15884: PPUSH
15885: LD_VAR 0 11
15889: PPUSH
15890: LD_VAR 0 12
15894: PPUSH
15895: CALL_OW 272
15899: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
15900: LD_ADDR_VAR 0 10
15904: PUSH
15905: LD_VAR 0 3
15909: PPUSH
15910: LD_VAR 0 11
15914: PPUSH
15915: LD_VAR 0 12
15919: PPUSH
15920: CALL_OW 273
15924: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
15925: LD_VAR 0 9
15929: PPUSH
15930: LD_VAR 0 10
15934: PPUSH
15935: CALL_OW 488
15939: PUSH
15940: LD_VAR 0 9
15944: PUSH
15945: LD_VAR 0 10
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_VAR 0 7
15958: IN
15959: NOT
15960: AND
15961: PUSH
15962: LD_VAR 0 9
15966: PPUSH
15967: LD_VAR 0 10
15971: PPUSH
15972: CALL_OW 458
15976: NOT
15977: AND
15978: IFFALSE 16020
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
15980: LD_ADDR_VAR 0 7
15984: PUSH
15985: LD_VAR 0 7
15989: PPUSH
15990: LD_VAR 0 7
15994: PUSH
15995: LD_INT 1
15997: PLUS
15998: PPUSH
15999: LD_VAR 0 9
16003: PUSH
16004: LD_VAR 0 10
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PPUSH
16013: CALL_OW 1
16017: ST_TO_ADDR
16018: GO 16034
// i := i - 1 ;
16020: LD_ADDR_VAR 0 5
16024: PUSH
16025: LD_VAR 0 5
16029: PUSH
16030: LD_INT 1
16032: MINUS
16033: ST_TO_ADDR
// end ;
16034: GO 15840
16036: POP
16037: POP
// for i in tmp do
16038: LD_ADDR_VAR 0 5
16042: PUSH
16043: LD_VAR 0 7
16047: PUSH
16048: FOR_IN
16049: IFFALSE 16087
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
16051: LD_VAR 0 1
16055: PPUSH
16056: LD_VAR 0 5
16060: PUSH
16061: LD_INT 1
16063: ARRAY
16064: PPUSH
16065: LD_VAR 0 5
16069: PUSH
16070: LD_INT 2
16072: ARRAY
16073: PPUSH
16074: CALL 15033 0 3
16078: NOT
16079: IFFALSE 16085
// exit ;
16081: POP
16082: POP
16083: GO 16089
16085: GO 16048
16087: POP
16088: POP
// end ;
16089: LD_VAR 0 4
16093: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
16094: LD_INT 0
16096: PPUSH
16097: PPUSH
16098: PPUSH
16099: PPUSH
16100: PPUSH
16101: PPUSH
16102: PPUSH
16103: PPUSH
16104: PPUSH
// if GetClass ( unit ) <> class_sniper then
16105: LD_VAR 0 1
16109: PPUSH
16110: CALL_OW 257
16114: PUSH
16115: LD_INT 5
16117: NONEQUAL
16118: IFFALSE 16122
// exit ;
16120: GO 16588
// dist := 8 ;
16122: LD_ADDR_VAR 0 5
16126: PUSH
16127: LD_INT 8
16129: ST_TO_ADDR
// viewRange := 12 ;
16130: LD_ADDR_VAR 0 8
16134: PUSH
16135: LD_INT 12
16137: ST_TO_ADDR
// side := GetSide ( unit ) ;
16138: LD_ADDR_VAR 0 6
16142: PUSH
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 255
16152: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
16153: LD_INT 61
16155: PPUSH
16156: LD_VAR 0 6
16160: PPUSH
16161: CALL_OW 321
16165: PUSH
16166: LD_INT 2
16168: EQUAL
16169: IFFALSE 16179
// viewRange := 16 ;
16171: LD_ADDR_VAR 0 8
16175: PUSH
16176: LD_INT 16
16178: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
16179: LD_VAR 0 1
16183: PPUSH
16184: LD_VAR 0 2
16188: PPUSH
16189: LD_VAR 0 3
16193: PPUSH
16194: CALL_OW 297
16198: PUSH
16199: LD_VAR 0 5
16203: GREATER
16204: IFFALSE 16283
// begin ComMoveXY ( unit , x , y ) ;
16206: LD_VAR 0 1
16210: PPUSH
16211: LD_VAR 0 2
16215: PPUSH
16216: LD_VAR 0 3
16220: PPUSH
16221: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16225: LD_INT 35
16227: PPUSH
16228: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
16232: LD_VAR 0 1
16236: PPUSH
16237: LD_VAR 0 2
16241: PPUSH
16242: LD_VAR 0 3
16246: PPUSH
16247: CALL 53185 0 3
16251: NOT
16252: IFFALSE 16256
// exit ;
16254: GO 16588
// until GetDistUnitXY ( unit , x , y ) < dist ;
16256: LD_VAR 0 1
16260: PPUSH
16261: LD_VAR 0 2
16265: PPUSH
16266: LD_VAR 0 3
16270: PPUSH
16271: CALL_OW 297
16275: PUSH
16276: LD_VAR 0 5
16280: LESS
16281: IFFALSE 16225
// end ; ComTurnXY ( unit , x , y ) ;
16283: LD_VAR 0 1
16287: PPUSH
16288: LD_VAR 0 2
16292: PPUSH
16293: LD_VAR 0 3
16297: PPUSH
16298: CALL_OW 118
// repeat if Multiplayer then
16302: LD_OWVAR 4
16306: IFFALSE 16317
// wait ( 35 ) else
16308: LD_INT 35
16310: PPUSH
16311: CALL_OW 67
16315: GO 16324
// wait ( 5 ) ;
16317: LD_INT 5
16319: PPUSH
16320: CALL_OW 67
// _d := GetDir ( unit ) ;
16324: LD_ADDR_VAR 0 11
16328: PUSH
16329: LD_VAR 0 1
16333: PPUSH
16334: CALL_OW 254
16338: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
16339: LD_ADDR_VAR 0 7
16343: PUSH
16344: LD_VAR 0 1
16348: PPUSH
16349: CALL_OW 250
16353: PPUSH
16354: LD_VAR 0 1
16358: PPUSH
16359: CALL_OW 251
16363: PPUSH
16364: LD_VAR 0 2
16368: PPUSH
16369: LD_VAR 0 3
16373: PPUSH
16374: CALL 55793 0 4
16378: ST_TO_ADDR
// until dir = _d ;
16379: LD_VAR 0 7
16383: PUSH
16384: LD_VAR 0 11
16388: EQUAL
16389: IFFALSE 16302
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
16391: LD_ADDR_VAR 0 9
16395: PUSH
16396: LD_VAR 0 1
16400: PPUSH
16401: CALL_OW 250
16405: PPUSH
16406: LD_VAR 0 7
16410: PPUSH
16411: LD_VAR 0 5
16415: PPUSH
16416: CALL_OW 272
16420: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
16421: LD_ADDR_VAR 0 10
16425: PUSH
16426: LD_VAR 0 1
16430: PPUSH
16431: CALL_OW 251
16435: PPUSH
16436: LD_VAR 0 7
16440: PPUSH
16441: LD_VAR 0 5
16445: PPUSH
16446: CALL_OW 273
16450: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16451: LD_VAR 0 9
16455: PPUSH
16456: LD_VAR 0 10
16460: PPUSH
16461: CALL_OW 488
16465: NOT
16466: IFFALSE 16470
// exit ;
16468: GO 16588
// ComAnimCustom ( unit , 1 ) ;
16470: LD_VAR 0 1
16474: PPUSH
16475: LD_INT 1
16477: PPUSH
16478: CALL_OW 592
// p := 0 ;
16482: LD_ADDR_VAR 0 12
16486: PUSH
16487: LD_INT 0
16489: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
16490: LD_VAR 0 9
16494: PPUSH
16495: LD_VAR 0 10
16499: PPUSH
16500: LD_VAR 0 6
16504: PPUSH
16505: LD_VAR 0 8
16509: PPUSH
16510: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
16514: LD_INT 35
16516: PPUSH
16517: CALL_OW 67
// p := Inc ( p ) ;
16521: LD_ADDR_VAR 0 12
16525: PUSH
16526: LD_VAR 0 12
16530: PPUSH
16531: CALL 55749 0 1
16535: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
16536: LD_VAR 0 12
16540: PUSH
16541: LD_INT 3
16543: EQUAL
16544: PUSH
16545: LD_VAR 0 1
16549: PPUSH
16550: CALL_OW 302
16554: NOT
16555: OR
16556: PUSH
16557: LD_VAR 0 1
16561: PPUSH
16562: CALL_OW 301
16566: OR
16567: IFFALSE 16514
// RemoveSeeing ( _x , _y , side ) ;
16569: LD_VAR 0 9
16573: PPUSH
16574: LD_VAR 0 10
16578: PPUSH
16579: LD_VAR 0 6
16583: PPUSH
16584: CALL_OW 331
// end ; end_of_file
16588: LD_VAR 0 4
16592: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16593: LD_INT 0
16595: PPUSH
16596: PPUSH
// if exist_mode then
16597: LD_VAR 0 2
16601: IFFALSE 16647
// begin unit := CreateCharacter ( prefix & ident ) ;
16603: LD_ADDR_VAR 0 5
16607: PUSH
16608: LD_VAR 0 3
16612: PUSH
16613: LD_VAR 0 1
16617: STR
16618: PPUSH
16619: CALL_OW 34
16623: ST_TO_ADDR
// if unit then
16624: LD_VAR 0 5
16628: IFFALSE 16645
// DeleteCharacters ( prefix & ident ) ;
16630: LD_VAR 0 3
16634: PUSH
16635: LD_VAR 0 1
16639: STR
16640: PPUSH
16641: CALL_OW 40
// end else
16645: GO 16662
// unit := NewCharacter ( ident ) ;
16647: LD_ADDR_VAR 0 5
16651: PUSH
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 25
16661: ST_TO_ADDR
// result := unit ;
16662: LD_ADDR_VAR 0 4
16666: PUSH
16667: LD_VAR 0 5
16671: ST_TO_ADDR
// end ;
16672: LD_VAR 0 4
16676: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
16677: LD_INT 0
16679: PPUSH
16680: PPUSH
// if exist_mode then
16681: LD_VAR 0 2
16685: IFFALSE 16710
// unit := CreateCharacter ( prefix & ident ) else
16687: LD_ADDR_VAR 0 5
16691: PUSH
16692: LD_VAR 0 3
16696: PUSH
16697: LD_VAR 0 1
16701: STR
16702: PPUSH
16703: CALL_OW 34
16707: ST_TO_ADDR
16708: GO 16725
// unit := NewCharacter ( ident ) ;
16710: LD_ADDR_VAR 0 5
16714: PUSH
16715: LD_VAR 0 1
16719: PPUSH
16720: CALL_OW 25
16724: ST_TO_ADDR
// result := unit ;
16725: LD_ADDR_VAR 0 4
16729: PUSH
16730: LD_VAR 0 5
16734: ST_TO_ADDR
// end ;
16735: LD_VAR 0 4
16739: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16740: LD_INT 0
16742: PPUSH
16743: PPUSH
// if not side or not nation then
16744: LD_VAR 0 1
16748: NOT
16749: PUSH
16750: LD_VAR 0 2
16754: NOT
16755: OR
16756: IFFALSE 16760
// exit ;
16758: GO 17528
// case nation of nation_american :
16760: LD_VAR 0 2
16764: PUSH
16765: LD_INT 1
16767: DOUBLE
16768: EQUAL
16769: IFTRUE 16773
16771: GO 16987
16773: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16774: LD_ADDR_VAR 0 4
16778: PUSH
16779: LD_INT 35
16781: PUSH
16782: LD_INT 45
16784: PUSH
16785: LD_INT 46
16787: PUSH
16788: LD_INT 47
16790: PUSH
16791: LD_INT 82
16793: PUSH
16794: LD_INT 83
16796: PUSH
16797: LD_INT 84
16799: PUSH
16800: LD_INT 85
16802: PUSH
16803: LD_INT 86
16805: PUSH
16806: LD_INT 1
16808: PUSH
16809: LD_INT 2
16811: PUSH
16812: LD_INT 6
16814: PUSH
16815: LD_INT 15
16817: PUSH
16818: LD_INT 16
16820: PUSH
16821: LD_INT 7
16823: PUSH
16824: LD_INT 12
16826: PUSH
16827: LD_INT 13
16829: PUSH
16830: LD_INT 10
16832: PUSH
16833: LD_INT 14
16835: PUSH
16836: LD_INT 20
16838: PUSH
16839: LD_INT 21
16841: PUSH
16842: LD_INT 22
16844: PUSH
16845: LD_INT 25
16847: PUSH
16848: LD_INT 32
16850: PUSH
16851: LD_INT 27
16853: PUSH
16854: LD_INT 36
16856: PUSH
16857: LD_INT 69
16859: PUSH
16860: LD_INT 39
16862: PUSH
16863: LD_INT 34
16865: PUSH
16866: LD_INT 40
16868: PUSH
16869: LD_INT 48
16871: PUSH
16872: LD_INT 49
16874: PUSH
16875: LD_INT 50
16877: PUSH
16878: LD_INT 51
16880: PUSH
16881: LD_INT 52
16883: PUSH
16884: LD_INT 53
16886: PUSH
16887: LD_INT 54
16889: PUSH
16890: LD_INT 55
16892: PUSH
16893: LD_INT 56
16895: PUSH
16896: LD_INT 57
16898: PUSH
16899: LD_INT 58
16901: PUSH
16902: LD_INT 59
16904: PUSH
16905: LD_INT 60
16907: PUSH
16908: LD_INT 61
16910: PUSH
16911: LD_INT 62
16913: PUSH
16914: LD_INT 80
16916: PUSH
16917: LD_INT 82
16919: PUSH
16920: LD_INT 83
16922: PUSH
16923: LD_INT 84
16925: PUSH
16926: LD_INT 85
16928: PUSH
16929: LD_INT 86
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: ST_TO_ADDR
16985: GO 17452
16987: LD_INT 2
16989: DOUBLE
16990: EQUAL
16991: IFTRUE 16995
16993: GO 17221
16995: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16996: LD_ADDR_VAR 0 4
17000: PUSH
17001: LD_INT 35
17003: PUSH
17004: LD_INT 45
17006: PUSH
17007: LD_INT 46
17009: PUSH
17010: LD_INT 47
17012: PUSH
17013: LD_INT 82
17015: PUSH
17016: LD_INT 83
17018: PUSH
17019: LD_INT 84
17021: PUSH
17022: LD_INT 85
17024: PUSH
17025: LD_INT 87
17027: PUSH
17028: LD_INT 70
17030: PUSH
17031: LD_INT 1
17033: PUSH
17034: LD_INT 11
17036: PUSH
17037: LD_INT 3
17039: PUSH
17040: LD_INT 4
17042: PUSH
17043: LD_INT 5
17045: PUSH
17046: LD_INT 6
17048: PUSH
17049: LD_INT 15
17051: PUSH
17052: LD_INT 18
17054: PUSH
17055: LD_INT 7
17057: PUSH
17058: LD_INT 17
17060: PUSH
17061: LD_INT 8
17063: PUSH
17064: LD_INT 20
17066: PUSH
17067: LD_INT 21
17069: PUSH
17070: LD_INT 22
17072: PUSH
17073: LD_INT 72
17075: PUSH
17076: LD_INT 26
17078: PUSH
17079: LD_INT 69
17081: PUSH
17082: LD_INT 39
17084: PUSH
17085: LD_INT 40
17087: PUSH
17088: LD_INT 41
17090: PUSH
17091: LD_INT 42
17093: PUSH
17094: LD_INT 43
17096: PUSH
17097: LD_INT 48
17099: PUSH
17100: LD_INT 49
17102: PUSH
17103: LD_INT 50
17105: PUSH
17106: LD_INT 51
17108: PUSH
17109: LD_INT 52
17111: PUSH
17112: LD_INT 53
17114: PUSH
17115: LD_INT 54
17117: PUSH
17118: LD_INT 55
17120: PUSH
17121: LD_INT 56
17123: PUSH
17124: LD_INT 60
17126: PUSH
17127: LD_INT 61
17129: PUSH
17130: LD_INT 62
17132: PUSH
17133: LD_INT 66
17135: PUSH
17136: LD_INT 67
17138: PUSH
17139: LD_INT 68
17141: PUSH
17142: LD_INT 81
17144: PUSH
17145: LD_INT 82
17147: PUSH
17148: LD_INT 83
17150: PUSH
17151: LD_INT 84
17153: PUSH
17154: LD_INT 85
17156: PUSH
17157: LD_INT 87
17159: PUSH
17160: LD_INT 88
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: ST_TO_ADDR
17219: GO 17452
17221: LD_INT 3
17223: DOUBLE
17224: EQUAL
17225: IFTRUE 17229
17227: GO 17451
17229: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17230: LD_ADDR_VAR 0 4
17234: PUSH
17235: LD_INT 46
17237: PUSH
17238: LD_INT 47
17240: PUSH
17241: LD_INT 1
17243: PUSH
17244: LD_INT 2
17246: PUSH
17247: LD_INT 82
17249: PUSH
17250: LD_INT 83
17252: PUSH
17253: LD_INT 84
17255: PUSH
17256: LD_INT 85
17258: PUSH
17259: LD_INT 86
17261: PUSH
17262: LD_INT 11
17264: PUSH
17265: LD_INT 9
17267: PUSH
17268: LD_INT 20
17270: PUSH
17271: LD_INT 19
17273: PUSH
17274: LD_INT 21
17276: PUSH
17277: LD_INT 24
17279: PUSH
17280: LD_INT 22
17282: PUSH
17283: LD_INT 25
17285: PUSH
17286: LD_INT 28
17288: PUSH
17289: LD_INT 29
17291: PUSH
17292: LD_INT 30
17294: PUSH
17295: LD_INT 31
17297: PUSH
17298: LD_INT 37
17300: PUSH
17301: LD_INT 38
17303: PUSH
17304: LD_INT 32
17306: PUSH
17307: LD_INT 27
17309: PUSH
17310: LD_INT 33
17312: PUSH
17313: LD_INT 69
17315: PUSH
17316: LD_INT 39
17318: PUSH
17319: LD_INT 34
17321: PUSH
17322: LD_INT 40
17324: PUSH
17325: LD_INT 71
17327: PUSH
17328: LD_INT 23
17330: PUSH
17331: LD_INT 44
17333: PUSH
17334: LD_INT 48
17336: PUSH
17337: LD_INT 49
17339: PUSH
17340: LD_INT 50
17342: PUSH
17343: LD_INT 51
17345: PUSH
17346: LD_INT 52
17348: PUSH
17349: LD_INT 53
17351: PUSH
17352: LD_INT 54
17354: PUSH
17355: LD_INT 55
17357: PUSH
17358: LD_INT 56
17360: PUSH
17361: LD_INT 57
17363: PUSH
17364: LD_INT 58
17366: PUSH
17367: LD_INT 59
17369: PUSH
17370: LD_INT 63
17372: PUSH
17373: LD_INT 64
17375: PUSH
17376: LD_INT 65
17378: PUSH
17379: LD_INT 82
17381: PUSH
17382: LD_INT 83
17384: PUSH
17385: LD_INT 84
17387: PUSH
17388: LD_INT 85
17390: PUSH
17391: LD_INT 86
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: ST_TO_ADDR
17449: GO 17452
17451: POP
// if state > - 1 and state < 3 then
17452: LD_VAR 0 3
17456: PUSH
17457: LD_INT 1
17459: NEG
17460: GREATER
17461: PUSH
17462: LD_VAR 0 3
17466: PUSH
17467: LD_INT 3
17469: LESS
17470: AND
17471: IFFALSE 17528
// for i in result do
17473: LD_ADDR_VAR 0 5
17477: PUSH
17478: LD_VAR 0 4
17482: PUSH
17483: FOR_IN
17484: IFFALSE 17526
// if GetTech ( i , side ) <> state then
17486: LD_VAR 0 5
17490: PPUSH
17491: LD_VAR 0 1
17495: PPUSH
17496: CALL_OW 321
17500: PUSH
17501: LD_VAR 0 3
17505: NONEQUAL
17506: IFFALSE 17524
// result := result diff i ;
17508: LD_ADDR_VAR 0 4
17512: PUSH
17513: LD_VAR 0 4
17517: PUSH
17518: LD_VAR 0 5
17522: DIFF
17523: ST_TO_ADDR
17524: GO 17483
17526: POP
17527: POP
// end ;
17528: LD_VAR 0 4
17532: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17533: LD_INT 0
17535: PPUSH
17536: PPUSH
17537: PPUSH
// result := true ;
17538: LD_ADDR_VAR 0 3
17542: PUSH
17543: LD_INT 1
17545: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17546: LD_ADDR_VAR 0 5
17550: PUSH
17551: LD_VAR 0 2
17555: PPUSH
17556: CALL_OW 480
17560: ST_TO_ADDR
// if not tmp then
17561: LD_VAR 0 5
17565: NOT
17566: IFFALSE 17570
// exit ;
17568: GO 17619
// for i in tmp do
17570: LD_ADDR_VAR 0 4
17574: PUSH
17575: LD_VAR 0 5
17579: PUSH
17580: FOR_IN
17581: IFFALSE 17617
// if GetTech ( i , side ) <> state_researched then
17583: LD_VAR 0 4
17587: PPUSH
17588: LD_VAR 0 1
17592: PPUSH
17593: CALL_OW 321
17597: PUSH
17598: LD_INT 2
17600: NONEQUAL
17601: IFFALSE 17615
// begin result := false ;
17603: LD_ADDR_VAR 0 3
17607: PUSH
17608: LD_INT 0
17610: ST_TO_ADDR
// exit ;
17611: POP
17612: POP
17613: GO 17619
// end ;
17615: GO 17580
17617: POP
17618: POP
// end ;
17619: LD_VAR 0 3
17623: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17624: LD_INT 0
17626: PPUSH
17627: PPUSH
17628: PPUSH
17629: PPUSH
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
17634: PPUSH
17635: PPUSH
17636: PPUSH
17637: PPUSH
17638: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17639: LD_VAR 0 1
17643: NOT
17644: PUSH
17645: LD_VAR 0 1
17649: PPUSH
17650: CALL_OW 257
17654: PUSH
17655: LD_INT 9
17657: NONEQUAL
17658: OR
17659: IFFALSE 17663
// exit ;
17661: GO 18236
// side := GetSide ( unit ) ;
17663: LD_ADDR_VAR 0 9
17667: PUSH
17668: LD_VAR 0 1
17672: PPUSH
17673: CALL_OW 255
17677: ST_TO_ADDR
// tech_space := tech_spacanom ;
17678: LD_ADDR_VAR 0 12
17682: PUSH
17683: LD_INT 29
17685: ST_TO_ADDR
// tech_time := tech_taurad ;
17686: LD_ADDR_VAR 0 13
17690: PUSH
17691: LD_INT 28
17693: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17694: LD_ADDR_VAR 0 11
17698: PUSH
17699: LD_VAR 0 1
17703: PPUSH
17704: CALL_OW 310
17708: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17709: LD_VAR 0 11
17713: PPUSH
17714: CALL_OW 247
17718: PUSH
17719: LD_INT 2
17721: EQUAL
17722: IFFALSE 17726
// exit ;
17724: GO 18236
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17726: LD_ADDR_VAR 0 8
17730: PUSH
17731: LD_INT 81
17733: PUSH
17734: LD_VAR 0 9
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 3
17745: PUSH
17746: LD_INT 21
17748: PUSH
17749: LD_INT 3
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PPUSH
17764: CALL_OW 69
17768: ST_TO_ADDR
// if not tmp then
17769: LD_VAR 0 8
17773: NOT
17774: IFFALSE 17778
// exit ;
17776: GO 18236
// if in_unit then
17778: LD_VAR 0 11
17782: IFFALSE 17806
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17784: LD_ADDR_VAR 0 10
17788: PUSH
17789: LD_VAR 0 8
17793: PPUSH
17794: LD_VAR 0 11
17798: PPUSH
17799: CALL_OW 74
17803: ST_TO_ADDR
17804: GO 17826
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17806: LD_ADDR_VAR 0 10
17810: PUSH
17811: LD_VAR 0 8
17815: PPUSH
17816: LD_VAR 0 1
17820: PPUSH
17821: CALL_OW 74
17825: ST_TO_ADDR
// if not enemy then
17826: LD_VAR 0 10
17830: NOT
17831: IFFALSE 17835
// exit ;
17833: GO 18236
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17835: LD_VAR 0 11
17839: PUSH
17840: LD_VAR 0 11
17844: PPUSH
17845: LD_VAR 0 10
17849: PPUSH
17850: CALL_OW 296
17854: PUSH
17855: LD_INT 13
17857: GREATER
17858: AND
17859: PUSH
17860: LD_VAR 0 1
17864: PPUSH
17865: LD_VAR 0 10
17869: PPUSH
17870: CALL_OW 296
17874: PUSH
17875: LD_INT 12
17877: GREATER
17878: OR
17879: IFFALSE 17883
// exit ;
17881: GO 18236
// missile := [ 1 ] ;
17883: LD_ADDR_VAR 0 14
17887: PUSH
17888: LD_INT 1
17890: PUSH
17891: EMPTY
17892: LIST
17893: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17894: LD_VAR 0 9
17898: PPUSH
17899: LD_VAR 0 12
17903: PPUSH
17904: CALL_OW 325
17908: IFFALSE 17937
// missile := Replace ( missile , missile + 1 , 2 ) ;
17910: LD_ADDR_VAR 0 14
17914: PUSH
17915: LD_VAR 0 14
17919: PPUSH
17920: LD_VAR 0 14
17924: PUSH
17925: LD_INT 1
17927: PLUS
17928: PPUSH
17929: LD_INT 2
17931: PPUSH
17932: CALL_OW 1
17936: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17937: LD_VAR 0 9
17941: PPUSH
17942: LD_VAR 0 13
17946: PPUSH
17947: CALL_OW 325
17951: PUSH
17952: LD_VAR 0 10
17956: PPUSH
17957: CALL_OW 255
17961: PPUSH
17962: LD_VAR 0 13
17966: PPUSH
17967: CALL_OW 325
17971: NOT
17972: AND
17973: IFFALSE 18002
// missile := Replace ( missile , missile + 1 , 3 ) ;
17975: LD_ADDR_VAR 0 14
17979: PUSH
17980: LD_VAR 0 14
17984: PPUSH
17985: LD_VAR 0 14
17989: PUSH
17990: LD_INT 1
17992: PLUS
17993: PPUSH
17994: LD_INT 3
17996: PPUSH
17997: CALL_OW 1
18001: ST_TO_ADDR
// if missile < 2 then
18002: LD_VAR 0 14
18006: PUSH
18007: LD_INT 2
18009: LESS
18010: IFFALSE 18014
// exit ;
18012: GO 18236
// x := GetX ( enemy ) ;
18014: LD_ADDR_VAR 0 4
18018: PUSH
18019: LD_VAR 0 10
18023: PPUSH
18024: CALL_OW 250
18028: ST_TO_ADDR
// y := GetY ( enemy ) ;
18029: LD_ADDR_VAR 0 5
18033: PUSH
18034: LD_VAR 0 10
18038: PPUSH
18039: CALL_OW 251
18043: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18044: LD_ADDR_VAR 0 6
18048: PUSH
18049: LD_VAR 0 4
18053: PUSH
18054: LD_INT 1
18056: NEG
18057: PPUSH
18058: LD_INT 1
18060: PPUSH
18061: CALL_OW 12
18065: PLUS
18066: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18067: LD_ADDR_VAR 0 7
18071: PUSH
18072: LD_VAR 0 5
18076: PUSH
18077: LD_INT 1
18079: NEG
18080: PPUSH
18081: LD_INT 1
18083: PPUSH
18084: CALL_OW 12
18088: PLUS
18089: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18090: LD_VAR 0 6
18094: PPUSH
18095: LD_VAR 0 7
18099: PPUSH
18100: CALL_OW 488
18104: NOT
18105: IFFALSE 18127
// begin _x := x ;
18107: LD_ADDR_VAR 0 6
18111: PUSH
18112: LD_VAR 0 4
18116: ST_TO_ADDR
// _y := y ;
18117: LD_ADDR_VAR 0 7
18121: PUSH
18122: LD_VAR 0 5
18126: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18127: LD_ADDR_VAR 0 3
18131: PUSH
18132: LD_INT 1
18134: PPUSH
18135: LD_VAR 0 14
18139: PPUSH
18140: CALL_OW 12
18144: ST_TO_ADDR
// case i of 1 :
18145: LD_VAR 0 3
18149: PUSH
18150: LD_INT 1
18152: DOUBLE
18153: EQUAL
18154: IFTRUE 18158
18156: GO 18175
18158: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18159: LD_VAR 0 1
18163: PPUSH
18164: LD_VAR 0 10
18168: PPUSH
18169: CALL_OW 115
18173: GO 18236
18175: LD_INT 2
18177: DOUBLE
18178: EQUAL
18179: IFTRUE 18183
18181: GO 18205
18183: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18184: LD_VAR 0 1
18188: PPUSH
18189: LD_VAR 0 6
18193: PPUSH
18194: LD_VAR 0 7
18198: PPUSH
18199: CALL_OW 153
18203: GO 18236
18205: LD_INT 3
18207: DOUBLE
18208: EQUAL
18209: IFTRUE 18213
18211: GO 18235
18213: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18214: LD_VAR 0 1
18218: PPUSH
18219: LD_VAR 0 6
18223: PPUSH
18224: LD_VAR 0 7
18228: PPUSH
18229: CALL_OW 154
18233: GO 18236
18235: POP
// end ;
18236: LD_VAR 0 2
18240: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18241: LD_INT 0
18243: PPUSH
18244: PPUSH
18245: PPUSH
18246: PPUSH
18247: PPUSH
18248: PPUSH
// if not unit or not building then
18249: LD_VAR 0 1
18253: NOT
18254: PUSH
18255: LD_VAR 0 2
18259: NOT
18260: OR
18261: IFFALSE 18265
// exit ;
18263: GO 18423
// x := GetX ( building ) ;
18265: LD_ADDR_VAR 0 5
18269: PUSH
18270: LD_VAR 0 2
18274: PPUSH
18275: CALL_OW 250
18279: ST_TO_ADDR
// y := GetY ( building ) ;
18280: LD_ADDR_VAR 0 6
18284: PUSH
18285: LD_VAR 0 2
18289: PPUSH
18290: CALL_OW 251
18294: ST_TO_ADDR
// for i = 0 to 5 do
18295: LD_ADDR_VAR 0 4
18299: PUSH
18300: DOUBLE
18301: LD_INT 0
18303: DEC
18304: ST_TO_ADDR
18305: LD_INT 5
18307: PUSH
18308: FOR_TO
18309: IFFALSE 18421
// begin _x := ShiftX ( x , i , 3 ) ;
18311: LD_ADDR_VAR 0 7
18315: PUSH
18316: LD_VAR 0 5
18320: PPUSH
18321: LD_VAR 0 4
18325: PPUSH
18326: LD_INT 3
18328: PPUSH
18329: CALL_OW 272
18333: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18334: LD_ADDR_VAR 0 8
18338: PUSH
18339: LD_VAR 0 6
18343: PPUSH
18344: LD_VAR 0 4
18348: PPUSH
18349: LD_INT 3
18351: PPUSH
18352: CALL_OW 273
18356: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18357: LD_VAR 0 7
18361: PPUSH
18362: LD_VAR 0 8
18366: PPUSH
18367: CALL_OW 488
18371: NOT
18372: IFFALSE 18376
// continue ;
18374: GO 18308
// if HexInfo ( _x , _y ) = 0 then
18376: LD_VAR 0 7
18380: PPUSH
18381: LD_VAR 0 8
18385: PPUSH
18386: CALL_OW 428
18390: PUSH
18391: LD_INT 0
18393: EQUAL
18394: IFFALSE 18419
// begin ComMoveXY ( unit , _x , _y ) ;
18396: LD_VAR 0 1
18400: PPUSH
18401: LD_VAR 0 7
18405: PPUSH
18406: LD_VAR 0 8
18410: PPUSH
18411: CALL_OW 111
// exit ;
18415: POP
18416: POP
18417: GO 18423
// end ; end ;
18419: GO 18308
18421: POP
18422: POP
// end ;
18423: LD_VAR 0 3
18427: RET
// export function ScanBase ( side , base_area ) ; begin
18428: LD_INT 0
18430: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18431: LD_ADDR_VAR 0 3
18435: PUSH
18436: LD_VAR 0 2
18440: PPUSH
18441: LD_INT 81
18443: PUSH
18444: LD_VAR 0 1
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PPUSH
18453: CALL_OW 70
18457: ST_TO_ADDR
// end ;
18458: LD_VAR 0 3
18462: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18463: LD_INT 0
18465: PPUSH
18466: PPUSH
18467: PPUSH
18468: PPUSH
// result := false ;
18469: LD_ADDR_VAR 0 2
18473: PUSH
18474: LD_INT 0
18476: ST_TO_ADDR
// side := GetSide ( unit ) ;
18477: LD_ADDR_VAR 0 3
18481: PUSH
18482: LD_VAR 0 1
18486: PPUSH
18487: CALL_OW 255
18491: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18492: LD_ADDR_VAR 0 4
18496: PUSH
18497: LD_VAR 0 1
18501: PPUSH
18502: CALL_OW 248
18506: ST_TO_ADDR
// case nat of 1 :
18507: LD_VAR 0 4
18511: PUSH
18512: LD_INT 1
18514: DOUBLE
18515: EQUAL
18516: IFTRUE 18520
18518: GO 18531
18520: POP
// tech := tech_lassight ; 2 :
18521: LD_ADDR_VAR 0 5
18525: PUSH
18526: LD_INT 12
18528: ST_TO_ADDR
18529: GO 18570
18531: LD_INT 2
18533: DOUBLE
18534: EQUAL
18535: IFTRUE 18539
18537: GO 18550
18539: POP
// tech := tech_mortar ; 3 :
18540: LD_ADDR_VAR 0 5
18544: PUSH
18545: LD_INT 41
18547: ST_TO_ADDR
18548: GO 18570
18550: LD_INT 3
18552: DOUBLE
18553: EQUAL
18554: IFTRUE 18558
18556: GO 18569
18558: POP
// tech := tech_bazooka ; end ;
18559: LD_ADDR_VAR 0 5
18563: PUSH
18564: LD_INT 44
18566: ST_TO_ADDR
18567: GO 18570
18569: POP
// if Researched ( side , tech ) then
18570: LD_VAR 0 3
18574: PPUSH
18575: LD_VAR 0 5
18579: PPUSH
18580: CALL_OW 325
18584: IFFALSE 18611
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18586: LD_ADDR_VAR 0 2
18590: PUSH
18591: LD_INT 5
18593: PUSH
18594: LD_INT 8
18596: PUSH
18597: LD_INT 9
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: LIST
18604: PUSH
18605: LD_VAR 0 4
18609: ARRAY
18610: ST_TO_ADDR
// end ;
18611: LD_VAR 0 2
18615: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18616: LD_INT 0
18618: PPUSH
18619: PPUSH
18620: PPUSH
// if not mines then
18621: LD_VAR 0 2
18625: NOT
18626: IFFALSE 18630
// exit ;
18628: GO 18774
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18630: LD_ADDR_VAR 0 5
18634: PUSH
18635: LD_INT 81
18637: PUSH
18638: LD_VAR 0 1
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 3
18649: PUSH
18650: LD_INT 21
18652: PUSH
18653: LD_INT 3
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PPUSH
18668: CALL_OW 69
18672: ST_TO_ADDR
// for i in mines do
18673: LD_ADDR_VAR 0 4
18677: PUSH
18678: LD_VAR 0 2
18682: PUSH
18683: FOR_IN
18684: IFFALSE 18772
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18686: LD_VAR 0 4
18690: PUSH
18691: LD_INT 1
18693: ARRAY
18694: PPUSH
18695: LD_VAR 0 4
18699: PUSH
18700: LD_INT 2
18702: ARRAY
18703: PPUSH
18704: CALL_OW 458
18708: NOT
18709: IFFALSE 18713
// continue ;
18711: GO 18683
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18713: LD_VAR 0 4
18717: PUSH
18718: LD_INT 1
18720: ARRAY
18721: PPUSH
18722: LD_VAR 0 4
18726: PUSH
18727: LD_INT 2
18729: ARRAY
18730: PPUSH
18731: CALL_OW 428
18735: PUSH
18736: LD_VAR 0 5
18740: IN
18741: IFFALSE 18770
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18743: LD_VAR 0 4
18747: PUSH
18748: LD_INT 1
18750: ARRAY
18751: PPUSH
18752: LD_VAR 0 4
18756: PUSH
18757: LD_INT 2
18759: ARRAY
18760: PPUSH
18761: LD_VAR 0 1
18765: PPUSH
18766: CALL_OW 456
// end ;
18770: GO 18683
18772: POP
18773: POP
// end ;
18774: LD_VAR 0 3
18778: RET
// export function Count ( array ) ; begin
18779: LD_INT 0
18781: PPUSH
// result := array + 0 ;
18782: LD_ADDR_VAR 0 2
18786: PUSH
18787: LD_VAR 0 1
18791: PUSH
18792: LD_INT 0
18794: PLUS
18795: ST_TO_ADDR
// end ;
18796: LD_VAR 0 2
18800: RET
// export function IsEmpty ( building ) ; begin
18801: LD_INT 0
18803: PPUSH
// if not building then
18804: LD_VAR 0 1
18808: NOT
18809: IFFALSE 18813
// exit ;
18811: GO 18856
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18813: LD_ADDR_VAR 0 2
18817: PUSH
18818: LD_VAR 0 1
18822: PUSH
18823: LD_INT 22
18825: PUSH
18826: LD_VAR 0 1
18830: PPUSH
18831: CALL_OW 255
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 58
18842: PUSH
18843: EMPTY
18844: LIST
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PPUSH
18850: CALL_OW 69
18854: IN
18855: ST_TO_ADDR
// end ;
18856: LD_VAR 0 2
18860: RET
// export function IsNotFull ( building ) ; var places ; begin
18861: LD_INT 0
18863: PPUSH
18864: PPUSH
// if not building then
18865: LD_VAR 0 1
18869: NOT
18870: IFFALSE 18874
// exit ;
18872: GO 18902
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18874: LD_ADDR_VAR 0 2
18878: PUSH
18879: LD_VAR 0 1
18883: PPUSH
18884: LD_INT 3
18886: PUSH
18887: LD_INT 62
18889: PUSH
18890: EMPTY
18891: LIST
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PPUSH
18897: CALL_OW 72
18901: ST_TO_ADDR
// end ;
18902: LD_VAR 0 2
18906: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18907: LD_INT 0
18909: PPUSH
18910: PPUSH
18911: PPUSH
18912: PPUSH
// tmp := [ ] ;
18913: LD_ADDR_VAR 0 3
18917: PUSH
18918: EMPTY
18919: ST_TO_ADDR
// list := [ ] ;
18920: LD_ADDR_VAR 0 5
18924: PUSH
18925: EMPTY
18926: ST_TO_ADDR
// for i = 16 to 25 do
18927: LD_ADDR_VAR 0 4
18931: PUSH
18932: DOUBLE
18933: LD_INT 16
18935: DEC
18936: ST_TO_ADDR
18937: LD_INT 25
18939: PUSH
18940: FOR_TO
18941: IFFALSE 19014
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18943: LD_ADDR_VAR 0 3
18947: PUSH
18948: LD_VAR 0 3
18952: PUSH
18953: LD_INT 22
18955: PUSH
18956: LD_VAR 0 1
18960: PPUSH
18961: CALL_OW 255
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 91
18972: PUSH
18973: LD_VAR 0 1
18977: PUSH
18978: LD_INT 6
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 30
18988: PUSH
18989: LD_VAR 0 4
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: LIST
19002: PUSH
19003: EMPTY
19004: LIST
19005: PPUSH
19006: CALL_OW 69
19010: ADD
19011: ST_TO_ADDR
19012: GO 18940
19014: POP
19015: POP
// for i = 1 to tmp do
19016: LD_ADDR_VAR 0 4
19020: PUSH
19021: DOUBLE
19022: LD_INT 1
19024: DEC
19025: ST_TO_ADDR
19026: LD_VAR 0 3
19030: PUSH
19031: FOR_TO
19032: IFFALSE 19120
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19034: LD_ADDR_VAR 0 5
19038: PUSH
19039: LD_VAR 0 5
19043: PUSH
19044: LD_VAR 0 3
19048: PUSH
19049: LD_VAR 0 4
19053: ARRAY
19054: PPUSH
19055: CALL_OW 266
19059: PUSH
19060: LD_VAR 0 3
19064: PUSH
19065: LD_VAR 0 4
19069: ARRAY
19070: PPUSH
19071: CALL_OW 250
19075: PUSH
19076: LD_VAR 0 3
19080: PUSH
19081: LD_VAR 0 4
19085: ARRAY
19086: PPUSH
19087: CALL_OW 251
19091: PUSH
19092: LD_VAR 0 3
19096: PUSH
19097: LD_VAR 0 4
19101: ARRAY
19102: PPUSH
19103: CALL_OW 254
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: PUSH
19114: EMPTY
19115: LIST
19116: ADD
19117: ST_TO_ADDR
19118: GO 19031
19120: POP
19121: POP
// result := list ;
19122: LD_ADDR_VAR 0 2
19126: PUSH
19127: LD_VAR 0 5
19131: ST_TO_ADDR
// end ;
19132: LD_VAR 0 2
19136: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19137: LD_INT 0
19139: PPUSH
19140: PPUSH
19141: PPUSH
19142: PPUSH
19143: PPUSH
19144: PPUSH
19145: PPUSH
// if not factory then
19146: LD_VAR 0 1
19150: NOT
19151: IFFALSE 19155
// exit ;
19153: GO 19748
// if control = control_apeman then
19155: LD_VAR 0 4
19159: PUSH
19160: LD_INT 5
19162: EQUAL
19163: IFFALSE 19272
// begin tmp := UnitsInside ( factory ) ;
19165: LD_ADDR_VAR 0 8
19169: PUSH
19170: LD_VAR 0 1
19174: PPUSH
19175: CALL_OW 313
19179: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19180: LD_VAR 0 8
19184: PPUSH
19185: LD_INT 25
19187: PUSH
19188: LD_INT 12
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PPUSH
19195: CALL_OW 72
19199: NOT
19200: IFFALSE 19210
// control := control_manual ;
19202: LD_ADDR_VAR 0 4
19206: PUSH
19207: LD_INT 1
19209: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19210: LD_ADDR_VAR 0 8
19214: PUSH
19215: LD_VAR 0 1
19219: PPUSH
19220: CALL 18907 0 1
19224: ST_TO_ADDR
// if tmp then
19225: LD_VAR 0 8
19229: IFFALSE 19272
// begin for i in tmp do
19231: LD_ADDR_VAR 0 7
19235: PUSH
19236: LD_VAR 0 8
19240: PUSH
19241: FOR_IN
19242: IFFALSE 19270
// if i [ 1 ] = b_ext_radio then
19244: LD_VAR 0 7
19248: PUSH
19249: LD_INT 1
19251: ARRAY
19252: PUSH
19253: LD_INT 22
19255: EQUAL
19256: IFFALSE 19268
// begin control := control_remote ;
19258: LD_ADDR_VAR 0 4
19262: PUSH
19263: LD_INT 2
19265: ST_TO_ADDR
// break ;
19266: GO 19270
// end ;
19268: GO 19241
19270: POP
19271: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19272: LD_VAR 0 1
19276: PPUSH
19277: LD_VAR 0 2
19281: PPUSH
19282: LD_VAR 0 3
19286: PPUSH
19287: LD_VAR 0 4
19291: PPUSH
19292: LD_VAR 0 5
19296: PPUSH
19297: CALL_OW 448
19301: IFFALSE 19336
// begin result := [ chassis , engine , control , weapon ] ;
19303: LD_ADDR_VAR 0 6
19307: PUSH
19308: LD_VAR 0 2
19312: PUSH
19313: LD_VAR 0 3
19317: PUSH
19318: LD_VAR 0 4
19322: PUSH
19323: LD_VAR 0 5
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: ST_TO_ADDR
// exit ;
19334: GO 19748
// end ; _chassis := AvailableChassisList ( factory ) ;
19336: LD_ADDR_VAR 0 9
19340: PUSH
19341: LD_VAR 0 1
19345: PPUSH
19346: CALL_OW 475
19350: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19351: LD_ADDR_VAR 0 11
19355: PUSH
19356: LD_VAR 0 1
19360: PPUSH
19361: CALL_OW 476
19365: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19366: LD_ADDR_VAR 0 12
19370: PUSH
19371: LD_VAR 0 1
19375: PPUSH
19376: CALL_OW 477
19380: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19381: LD_ADDR_VAR 0 10
19385: PUSH
19386: LD_VAR 0 1
19390: PPUSH
19391: CALL_OW 478
19395: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19396: LD_VAR 0 9
19400: NOT
19401: PUSH
19402: LD_VAR 0 11
19406: NOT
19407: OR
19408: PUSH
19409: LD_VAR 0 12
19413: NOT
19414: OR
19415: PUSH
19416: LD_VAR 0 10
19420: NOT
19421: OR
19422: IFFALSE 19457
// begin result := [ chassis , engine , control , weapon ] ;
19424: LD_ADDR_VAR 0 6
19428: PUSH
19429: LD_VAR 0 2
19433: PUSH
19434: LD_VAR 0 3
19438: PUSH
19439: LD_VAR 0 4
19443: PUSH
19444: LD_VAR 0 5
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: ST_TO_ADDR
// exit ;
19455: GO 19748
// end ; if not chassis in _chassis then
19457: LD_VAR 0 2
19461: PUSH
19462: LD_VAR 0 9
19466: IN
19467: NOT
19468: IFFALSE 19494
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19470: LD_ADDR_VAR 0 2
19474: PUSH
19475: LD_VAR 0 9
19479: PUSH
19480: LD_INT 1
19482: PPUSH
19483: LD_VAR 0 9
19487: PPUSH
19488: CALL_OW 12
19492: ARRAY
19493: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19494: LD_VAR 0 2
19498: PPUSH
19499: LD_VAR 0 3
19503: PPUSH
19504: CALL 19753 0 2
19508: NOT
19509: IFFALSE 19568
// repeat engine := _engine [ 1 ] ;
19511: LD_ADDR_VAR 0 3
19515: PUSH
19516: LD_VAR 0 11
19520: PUSH
19521: LD_INT 1
19523: ARRAY
19524: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19525: LD_ADDR_VAR 0 11
19529: PUSH
19530: LD_VAR 0 11
19534: PPUSH
19535: LD_INT 1
19537: PPUSH
19538: CALL_OW 3
19542: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19543: LD_VAR 0 2
19547: PPUSH
19548: LD_VAR 0 3
19552: PPUSH
19553: CALL 19753 0 2
19557: PUSH
19558: LD_VAR 0 11
19562: PUSH
19563: EMPTY
19564: EQUAL
19565: OR
19566: IFFALSE 19511
// if not control in _control then
19568: LD_VAR 0 4
19572: PUSH
19573: LD_VAR 0 12
19577: IN
19578: NOT
19579: IFFALSE 19605
// control := _control [ rand ( 1 , _control ) ] ;
19581: LD_ADDR_VAR 0 4
19585: PUSH
19586: LD_VAR 0 12
19590: PUSH
19591: LD_INT 1
19593: PPUSH
19594: LD_VAR 0 12
19598: PPUSH
19599: CALL_OW 12
19603: ARRAY
19604: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19605: LD_VAR 0 2
19609: PPUSH
19610: LD_VAR 0 5
19614: PPUSH
19615: CALL 19973 0 2
19619: NOT
19620: IFFALSE 19679
// repeat weapon := _weapon [ 1 ] ;
19622: LD_ADDR_VAR 0 5
19626: PUSH
19627: LD_VAR 0 10
19631: PUSH
19632: LD_INT 1
19634: ARRAY
19635: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19636: LD_ADDR_VAR 0 10
19640: PUSH
19641: LD_VAR 0 10
19645: PPUSH
19646: LD_INT 1
19648: PPUSH
19649: CALL_OW 3
19653: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19654: LD_VAR 0 2
19658: PPUSH
19659: LD_VAR 0 5
19663: PPUSH
19664: CALL 19973 0 2
19668: PUSH
19669: LD_VAR 0 10
19673: PUSH
19674: EMPTY
19675: EQUAL
19676: OR
19677: IFFALSE 19622
// result := [ ] ;
19679: LD_ADDR_VAR 0 6
19683: PUSH
19684: EMPTY
19685: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19686: LD_VAR 0 1
19690: PPUSH
19691: LD_VAR 0 2
19695: PPUSH
19696: LD_VAR 0 3
19700: PPUSH
19701: LD_VAR 0 4
19705: PPUSH
19706: LD_VAR 0 5
19710: PPUSH
19711: CALL_OW 448
19715: IFFALSE 19748
// result := [ chassis , engine , control , weapon ] ;
19717: LD_ADDR_VAR 0 6
19721: PUSH
19722: LD_VAR 0 2
19726: PUSH
19727: LD_VAR 0 3
19731: PUSH
19732: LD_VAR 0 4
19736: PUSH
19737: LD_VAR 0 5
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: ST_TO_ADDR
// end ;
19748: LD_VAR 0 6
19752: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19753: LD_INT 0
19755: PPUSH
// if not chassis or not engine then
19756: LD_VAR 0 1
19760: NOT
19761: PUSH
19762: LD_VAR 0 2
19766: NOT
19767: OR
19768: IFFALSE 19772
// exit ;
19770: GO 19968
// case engine of engine_solar :
19772: LD_VAR 0 2
19776: PUSH
19777: LD_INT 2
19779: DOUBLE
19780: EQUAL
19781: IFTRUE 19785
19783: GO 19823
19785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19786: LD_ADDR_VAR 0 3
19790: PUSH
19791: LD_INT 11
19793: PUSH
19794: LD_INT 12
19796: PUSH
19797: LD_INT 13
19799: PUSH
19800: LD_INT 14
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: LD_INT 2
19808: PUSH
19809: LD_INT 3
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: ST_TO_ADDR
19821: GO 19952
19823: LD_INT 1
19825: DOUBLE
19826: EQUAL
19827: IFTRUE 19831
19829: GO 19893
19831: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19832: LD_ADDR_VAR 0 3
19836: PUSH
19837: LD_INT 11
19839: PUSH
19840: LD_INT 12
19842: PUSH
19843: LD_INT 13
19845: PUSH
19846: LD_INT 14
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: LD_INT 2
19854: PUSH
19855: LD_INT 3
19857: PUSH
19858: LD_INT 4
19860: PUSH
19861: LD_INT 5
19863: PUSH
19864: LD_INT 21
19866: PUSH
19867: LD_INT 23
19869: PUSH
19870: LD_INT 22
19872: PUSH
19873: LD_INT 24
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: ST_TO_ADDR
19891: GO 19952
19893: LD_INT 3
19895: DOUBLE
19896: EQUAL
19897: IFTRUE 19901
19899: GO 19951
19901: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19902: LD_ADDR_VAR 0 3
19906: PUSH
19907: LD_INT 13
19909: PUSH
19910: LD_INT 14
19912: PUSH
19913: LD_INT 2
19915: PUSH
19916: LD_INT 3
19918: PUSH
19919: LD_INT 4
19921: PUSH
19922: LD_INT 5
19924: PUSH
19925: LD_INT 21
19927: PUSH
19928: LD_INT 22
19930: PUSH
19931: LD_INT 23
19933: PUSH
19934: LD_INT 24
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: ST_TO_ADDR
19949: GO 19952
19951: POP
// result := ( chassis in result ) ;
19952: LD_ADDR_VAR 0 3
19956: PUSH
19957: LD_VAR 0 1
19961: PUSH
19962: LD_VAR 0 3
19966: IN
19967: ST_TO_ADDR
// end ;
19968: LD_VAR 0 3
19972: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19973: LD_INT 0
19975: PPUSH
// if not chassis or not weapon then
19976: LD_VAR 0 1
19980: NOT
19981: PUSH
19982: LD_VAR 0 2
19986: NOT
19987: OR
19988: IFFALSE 19992
// exit ;
19990: GO 21052
// case weapon of us_machine_gun :
19992: LD_VAR 0 2
19996: PUSH
19997: LD_INT 2
19999: DOUBLE
20000: EQUAL
20001: IFTRUE 20005
20003: GO 20035
20005: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20006: LD_ADDR_VAR 0 3
20010: PUSH
20011: LD_INT 1
20013: PUSH
20014: LD_INT 2
20016: PUSH
20017: LD_INT 3
20019: PUSH
20020: LD_INT 4
20022: PUSH
20023: LD_INT 5
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: ST_TO_ADDR
20033: GO 21036
20035: LD_INT 3
20037: DOUBLE
20038: EQUAL
20039: IFTRUE 20043
20041: GO 20073
20043: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20044: LD_ADDR_VAR 0 3
20048: PUSH
20049: LD_INT 1
20051: PUSH
20052: LD_INT 2
20054: PUSH
20055: LD_INT 3
20057: PUSH
20058: LD_INT 4
20060: PUSH
20061: LD_INT 5
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: ST_TO_ADDR
20071: GO 21036
20073: LD_INT 11
20075: DOUBLE
20076: EQUAL
20077: IFTRUE 20081
20079: GO 20111
20081: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20082: LD_ADDR_VAR 0 3
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: LD_INT 2
20092: PUSH
20093: LD_INT 3
20095: PUSH
20096: LD_INT 4
20098: PUSH
20099: LD_INT 5
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: ST_TO_ADDR
20109: GO 21036
20111: LD_INT 4
20113: DOUBLE
20114: EQUAL
20115: IFTRUE 20119
20117: GO 20145
20119: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20120: LD_ADDR_VAR 0 3
20124: PUSH
20125: LD_INT 2
20127: PUSH
20128: LD_INT 3
20130: PUSH
20131: LD_INT 4
20133: PUSH
20134: LD_INT 5
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: ST_TO_ADDR
20143: GO 21036
20145: LD_INT 5
20147: DOUBLE
20148: EQUAL
20149: IFTRUE 20153
20151: GO 20179
20153: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20154: LD_ADDR_VAR 0 3
20158: PUSH
20159: LD_INT 2
20161: PUSH
20162: LD_INT 3
20164: PUSH
20165: LD_INT 4
20167: PUSH
20168: LD_INT 5
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: ST_TO_ADDR
20177: GO 21036
20179: LD_INT 9
20181: DOUBLE
20182: EQUAL
20183: IFTRUE 20187
20185: GO 20213
20187: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20188: LD_ADDR_VAR 0 3
20192: PUSH
20193: LD_INT 2
20195: PUSH
20196: LD_INT 3
20198: PUSH
20199: LD_INT 4
20201: PUSH
20202: LD_INT 5
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: ST_TO_ADDR
20211: GO 21036
20213: LD_INT 7
20215: DOUBLE
20216: EQUAL
20217: IFTRUE 20221
20219: GO 20247
20221: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20222: LD_ADDR_VAR 0 3
20226: PUSH
20227: LD_INT 2
20229: PUSH
20230: LD_INT 3
20232: PUSH
20233: LD_INT 4
20235: PUSH
20236: LD_INT 5
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: ST_TO_ADDR
20245: GO 21036
20247: LD_INT 12
20249: DOUBLE
20250: EQUAL
20251: IFTRUE 20255
20253: GO 20281
20255: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20256: LD_ADDR_VAR 0 3
20260: PUSH
20261: LD_INT 2
20263: PUSH
20264: LD_INT 3
20266: PUSH
20267: LD_INT 4
20269: PUSH
20270: LD_INT 5
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: ST_TO_ADDR
20279: GO 21036
20281: LD_INT 13
20283: DOUBLE
20284: EQUAL
20285: IFTRUE 20289
20287: GO 20315
20289: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20290: LD_ADDR_VAR 0 3
20294: PUSH
20295: LD_INT 2
20297: PUSH
20298: LD_INT 3
20300: PUSH
20301: LD_INT 4
20303: PUSH
20304: LD_INT 5
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: ST_TO_ADDR
20313: GO 21036
20315: LD_INT 14
20317: DOUBLE
20318: EQUAL
20319: IFTRUE 20323
20321: GO 20341
20323: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20324: LD_ADDR_VAR 0 3
20328: PUSH
20329: LD_INT 4
20331: PUSH
20332: LD_INT 5
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: ST_TO_ADDR
20339: GO 21036
20341: LD_INT 6
20343: DOUBLE
20344: EQUAL
20345: IFTRUE 20349
20347: GO 20367
20349: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20350: LD_ADDR_VAR 0 3
20354: PUSH
20355: LD_INT 4
20357: PUSH
20358: LD_INT 5
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: ST_TO_ADDR
20365: GO 21036
20367: LD_INT 10
20369: DOUBLE
20370: EQUAL
20371: IFTRUE 20375
20373: GO 20393
20375: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20376: LD_ADDR_VAR 0 3
20380: PUSH
20381: LD_INT 4
20383: PUSH
20384: LD_INT 5
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: ST_TO_ADDR
20391: GO 21036
20393: LD_INT 22
20395: DOUBLE
20396: EQUAL
20397: IFTRUE 20401
20399: GO 20427
20401: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20402: LD_ADDR_VAR 0 3
20406: PUSH
20407: LD_INT 11
20409: PUSH
20410: LD_INT 12
20412: PUSH
20413: LD_INT 13
20415: PUSH
20416: LD_INT 14
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: ST_TO_ADDR
20425: GO 21036
20427: LD_INT 23
20429: DOUBLE
20430: EQUAL
20431: IFTRUE 20435
20433: GO 20461
20435: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20436: LD_ADDR_VAR 0 3
20440: PUSH
20441: LD_INT 11
20443: PUSH
20444: LD_INT 12
20446: PUSH
20447: LD_INT 13
20449: PUSH
20450: LD_INT 14
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: ST_TO_ADDR
20459: GO 21036
20461: LD_INT 24
20463: DOUBLE
20464: EQUAL
20465: IFTRUE 20469
20467: GO 20495
20469: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20470: LD_ADDR_VAR 0 3
20474: PUSH
20475: LD_INT 11
20477: PUSH
20478: LD_INT 12
20480: PUSH
20481: LD_INT 13
20483: PUSH
20484: LD_INT 14
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: ST_TO_ADDR
20493: GO 21036
20495: LD_INT 30
20497: DOUBLE
20498: EQUAL
20499: IFTRUE 20503
20501: GO 20529
20503: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20504: LD_ADDR_VAR 0 3
20508: PUSH
20509: LD_INT 11
20511: PUSH
20512: LD_INT 12
20514: PUSH
20515: LD_INT 13
20517: PUSH
20518: LD_INT 14
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: ST_TO_ADDR
20527: GO 21036
20529: LD_INT 25
20531: DOUBLE
20532: EQUAL
20533: IFTRUE 20537
20535: GO 20555
20537: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20538: LD_ADDR_VAR 0 3
20542: PUSH
20543: LD_INT 13
20545: PUSH
20546: LD_INT 14
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: ST_TO_ADDR
20553: GO 21036
20555: LD_INT 27
20557: DOUBLE
20558: EQUAL
20559: IFTRUE 20563
20561: GO 20581
20563: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20564: LD_ADDR_VAR 0 3
20568: PUSH
20569: LD_INT 13
20571: PUSH
20572: LD_INT 14
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: ST_TO_ADDR
20579: GO 21036
20581: LD_INT 92
20583: DOUBLE
20584: EQUAL
20585: IFTRUE 20589
20587: GO 20615
20589: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20590: LD_ADDR_VAR 0 3
20594: PUSH
20595: LD_INT 11
20597: PUSH
20598: LD_INT 12
20600: PUSH
20601: LD_INT 13
20603: PUSH
20604: LD_INT 14
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: ST_TO_ADDR
20613: GO 21036
20615: LD_INT 28
20617: DOUBLE
20618: EQUAL
20619: IFTRUE 20623
20621: GO 20641
20623: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20624: LD_ADDR_VAR 0 3
20628: PUSH
20629: LD_INT 13
20631: PUSH
20632: LD_INT 14
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: ST_TO_ADDR
20639: GO 21036
20641: LD_INT 29
20643: DOUBLE
20644: EQUAL
20645: IFTRUE 20649
20647: GO 20667
20649: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20650: LD_ADDR_VAR 0 3
20654: PUSH
20655: LD_INT 13
20657: PUSH
20658: LD_INT 14
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: ST_TO_ADDR
20665: GO 21036
20667: LD_INT 31
20669: DOUBLE
20670: EQUAL
20671: IFTRUE 20675
20673: GO 20693
20675: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20676: LD_ADDR_VAR 0 3
20680: PUSH
20681: LD_INT 13
20683: PUSH
20684: LD_INT 14
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: ST_TO_ADDR
20691: GO 21036
20693: LD_INT 26
20695: DOUBLE
20696: EQUAL
20697: IFTRUE 20701
20699: GO 20719
20701: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20702: LD_ADDR_VAR 0 3
20706: PUSH
20707: LD_INT 13
20709: PUSH
20710: LD_INT 14
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: ST_TO_ADDR
20717: GO 21036
20719: LD_INT 42
20721: DOUBLE
20722: EQUAL
20723: IFTRUE 20727
20725: GO 20753
20727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20728: LD_ADDR_VAR 0 3
20732: PUSH
20733: LD_INT 21
20735: PUSH
20736: LD_INT 22
20738: PUSH
20739: LD_INT 23
20741: PUSH
20742: LD_INT 24
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: ST_TO_ADDR
20751: GO 21036
20753: LD_INT 43
20755: DOUBLE
20756: EQUAL
20757: IFTRUE 20761
20759: GO 20787
20761: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20762: LD_ADDR_VAR 0 3
20766: PUSH
20767: LD_INT 21
20769: PUSH
20770: LD_INT 22
20772: PUSH
20773: LD_INT 23
20775: PUSH
20776: LD_INT 24
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: ST_TO_ADDR
20785: GO 21036
20787: LD_INT 44
20789: DOUBLE
20790: EQUAL
20791: IFTRUE 20795
20793: GO 20821
20795: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20796: LD_ADDR_VAR 0 3
20800: PUSH
20801: LD_INT 21
20803: PUSH
20804: LD_INT 22
20806: PUSH
20807: LD_INT 23
20809: PUSH
20810: LD_INT 24
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: ST_TO_ADDR
20819: GO 21036
20821: LD_INT 45
20823: DOUBLE
20824: EQUAL
20825: IFTRUE 20829
20827: GO 20855
20829: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20830: LD_ADDR_VAR 0 3
20834: PUSH
20835: LD_INT 21
20837: PUSH
20838: LD_INT 22
20840: PUSH
20841: LD_INT 23
20843: PUSH
20844: LD_INT 24
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: ST_TO_ADDR
20853: GO 21036
20855: LD_INT 49
20857: DOUBLE
20858: EQUAL
20859: IFTRUE 20863
20861: GO 20889
20863: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20864: LD_ADDR_VAR 0 3
20868: PUSH
20869: LD_INT 21
20871: PUSH
20872: LD_INT 22
20874: PUSH
20875: LD_INT 23
20877: PUSH
20878: LD_INT 24
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: ST_TO_ADDR
20887: GO 21036
20889: LD_INT 51
20891: DOUBLE
20892: EQUAL
20893: IFTRUE 20897
20895: GO 20923
20897: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20898: LD_ADDR_VAR 0 3
20902: PUSH
20903: LD_INT 21
20905: PUSH
20906: LD_INT 22
20908: PUSH
20909: LD_INT 23
20911: PUSH
20912: LD_INT 24
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: ST_TO_ADDR
20921: GO 21036
20923: LD_INT 52
20925: DOUBLE
20926: EQUAL
20927: IFTRUE 20931
20929: GO 20957
20931: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20932: LD_ADDR_VAR 0 3
20936: PUSH
20937: LD_INT 21
20939: PUSH
20940: LD_INT 22
20942: PUSH
20943: LD_INT 23
20945: PUSH
20946: LD_INT 24
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: ST_TO_ADDR
20955: GO 21036
20957: LD_INT 53
20959: DOUBLE
20960: EQUAL
20961: IFTRUE 20965
20963: GO 20983
20965: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20966: LD_ADDR_VAR 0 3
20970: PUSH
20971: LD_INT 23
20973: PUSH
20974: LD_INT 24
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: ST_TO_ADDR
20981: GO 21036
20983: LD_INT 46
20985: DOUBLE
20986: EQUAL
20987: IFTRUE 20991
20989: GO 21009
20991: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20992: LD_ADDR_VAR 0 3
20996: PUSH
20997: LD_INT 23
20999: PUSH
21000: LD_INT 24
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: ST_TO_ADDR
21007: GO 21036
21009: LD_INT 47
21011: DOUBLE
21012: EQUAL
21013: IFTRUE 21017
21015: GO 21035
21017: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21018: LD_ADDR_VAR 0 3
21022: PUSH
21023: LD_INT 23
21025: PUSH
21026: LD_INT 24
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: ST_TO_ADDR
21033: GO 21036
21035: POP
// result := ( chassis in result ) ;
21036: LD_ADDR_VAR 0 3
21040: PUSH
21041: LD_VAR 0 1
21045: PUSH
21046: LD_VAR 0 3
21050: IN
21051: ST_TO_ADDR
// end ;
21052: LD_VAR 0 3
21056: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21057: LD_INT 0
21059: PPUSH
21060: PPUSH
21061: PPUSH
21062: PPUSH
21063: PPUSH
21064: PPUSH
21065: PPUSH
// result := array ;
21066: LD_ADDR_VAR 0 5
21070: PUSH
21071: LD_VAR 0 1
21075: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21076: LD_VAR 0 1
21080: NOT
21081: PUSH
21082: LD_VAR 0 2
21086: NOT
21087: OR
21088: PUSH
21089: LD_VAR 0 3
21093: NOT
21094: OR
21095: PUSH
21096: LD_VAR 0 2
21100: PUSH
21101: LD_VAR 0 1
21105: GREATER
21106: OR
21107: PUSH
21108: LD_VAR 0 3
21112: PUSH
21113: LD_VAR 0 1
21117: GREATER
21118: OR
21119: IFFALSE 21123
// exit ;
21121: GO 21419
// if direction then
21123: LD_VAR 0 4
21127: IFFALSE 21191
// begin d := 1 ;
21129: LD_ADDR_VAR 0 9
21133: PUSH
21134: LD_INT 1
21136: ST_TO_ADDR
// if i_from > i_to then
21137: LD_VAR 0 2
21141: PUSH
21142: LD_VAR 0 3
21146: GREATER
21147: IFFALSE 21173
// length := ( array - i_from ) + i_to else
21149: LD_ADDR_VAR 0 11
21153: PUSH
21154: LD_VAR 0 1
21158: PUSH
21159: LD_VAR 0 2
21163: MINUS
21164: PUSH
21165: LD_VAR 0 3
21169: PLUS
21170: ST_TO_ADDR
21171: GO 21189
// length := i_to - i_from ;
21173: LD_ADDR_VAR 0 11
21177: PUSH
21178: LD_VAR 0 3
21182: PUSH
21183: LD_VAR 0 2
21187: MINUS
21188: ST_TO_ADDR
// end else
21189: GO 21252
// begin d := - 1 ;
21191: LD_ADDR_VAR 0 9
21195: PUSH
21196: LD_INT 1
21198: NEG
21199: ST_TO_ADDR
// if i_from > i_to then
21200: LD_VAR 0 2
21204: PUSH
21205: LD_VAR 0 3
21209: GREATER
21210: IFFALSE 21230
// length := i_from - i_to else
21212: LD_ADDR_VAR 0 11
21216: PUSH
21217: LD_VAR 0 2
21221: PUSH
21222: LD_VAR 0 3
21226: MINUS
21227: ST_TO_ADDR
21228: GO 21252
// length := ( array - i_to ) + i_from ;
21230: LD_ADDR_VAR 0 11
21234: PUSH
21235: LD_VAR 0 1
21239: PUSH
21240: LD_VAR 0 3
21244: MINUS
21245: PUSH
21246: LD_VAR 0 2
21250: PLUS
21251: ST_TO_ADDR
// end ; if not length then
21252: LD_VAR 0 11
21256: NOT
21257: IFFALSE 21261
// exit ;
21259: GO 21419
// tmp := array ;
21261: LD_ADDR_VAR 0 10
21265: PUSH
21266: LD_VAR 0 1
21270: ST_TO_ADDR
// for i = 1 to length do
21271: LD_ADDR_VAR 0 6
21275: PUSH
21276: DOUBLE
21277: LD_INT 1
21279: DEC
21280: ST_TO_ADDR
21281: LD_VAR 0 11
21285: PUSH
21286: FOR_TO
21287: IFFALSE 21407
// begin for j = 1 to array do
21289: LD_ADDR_VAR 0 7
21293: PUSH
21294: DOUBLE
21295: LD_INT 1
21297: DEC
21298: ST_TO_ADDR
21299: LD_VAR 0 1
21303: PUSH
21304: FOR_TO
21305: IFFALSE 21393
// begin k := j + d ;
21307: LD_ADDR_VAR 0 8
21311: PUSH
21312: LD_VAR 0 7
21316: PUSH
21317: LD_VAR 0 9
21321: PLUS
21322: ST_TO_ADDR
// if k > array then
21323: LD_VAR 0 8
21327: PUSH
21328: LD_VAR 0 1
21332: GREATER
21333: IFFALSE 21343
// k := 1 ;
21335: LD_ADDR_VAR 0 8
21339: PUSH
21340: LD_INT 1
21342: ST_TO_ADDR
// if not k then
21343: LD_VAR 0 8
21347: NOT
21348: IFFALSE 21360
// k := array ;
21350: LD_ADDR_VAR 0 8
21354: PUSH
21355: LD_VAR 0 1
21359: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21360: LD_ADDR_VAR 0 10
21364: PUSH
21365: LD_VAR 0 10
21369: PPUSH
21370: LD_VAR 0 8
21374: PPUSH
21375: LD_VAR 0 1
21379: PUSH
21380: LD_VAR 0 7
21384: ARRAY
21385: PPUSH
21386: CALL_OW 1
21390: ST_TO_ADDR
// end ;
21391: GO 21304
21393: POP
21394: POP
// array := tmp ;
21395: LD_ADDR_VAR 0 1
21399: PUSH
21400: LD_VAR 0 10
21404: ST_TO_ADDR
// end ;
21405: GO 21286
21407: POP
21408: POP
// result := array ;
21409: LD_ADDR_VAR 0 5
21413: PUSH
21414: LD_VAR 0 1
21418: ST_TO_ADDR
// end ;
21419: LD_VAR 0 5
21423: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21424: LD_INT 0
21426: PPUSH
21427: PPUSH
// result := 0 ;
21428: LD_ADDR_VAR 0 3
21432: PUSH
21433: LD_INT 0
21435: ST_TO_ADDR
// if not array or not value in array then
21436: LD_VAR 0 1
21440: NOT
21441: PUSH
21442: LD_VAR 0 2
21446: PUSH
21447: LD_VAR 0 1
21451: IN
21452: NOT
21453: OR
21454: IFFALSE 21458
// exit ;
21456: GO 21512
// for i = 1 to array do
21458: LD_ADDR_VAR 0 4
21462: PUSH
21463: DOUBLE
21464: LD_INT 1
21466: DEC
21467: ST_TO_ADDR
21468: LD_VAR 0 1
21472: PUSH
21473: FOR_TO
21474: IFFALSE 21510
// if value = array [ i ] then
21476: LD_VAR 0 2
21480: PUSH
21481: LD_VAR 0 1
21485: PUSH
21486: LD_VAR 0 4
21490: ARRAY
21491: EQUAL
21492: IFFALSE 21508
// begin result := i ;
21494: LD_ADDR_VAR 0 3
21498: PUSH
21499: LD_VAR 0 4
21503: ST_TO_ADDR
// exit ;
21504: POP
21505: POP
21506: GO 21512
// end ;
21508: GO 21473
21510: POP
21511: POP
// end ;
21512: LD_VAR 0 3
21516: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21517: LD_INT 0
21519: PPUSH
// vc_chassis := chassis ;
21520: LD_ADDR_OWVAR 37
21524: PUSH
21525: LD_VAR 0 1
21529: ST_TO_ADDR
// vc_engine := engine ;
21530: LD_ADDR_OWVAR 39
21534: PUSH
21535: LD_VAR 0 2
21539: ST_TO_ADDR
// vc_control := control ;
21540: LD_ADDR_OWVAR 38
21544: PUSH
21545: LD_VAR 0 3
21549: ST_TO_ADDR
// vc_weapon := weapon ;
21550: LD_ADDR_OWVAR 40
21554: PUSH
21555: LD_VAR 0 4
21559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21560: LD_ADDR_OWVAR 41
21564: PUSH
21565: LD_VAR 0 5
21569: ST_TO_ADDR
// end ;
21570: LD_VAR 0 6
21574: RET
// export function WantPlant ( unit ) ; var task ; begin
21575: LD_INT 0
21577: PPUSH
21578: PPUSH
// result := false ;
21579: LD_ADDR_VAR 0 2
21583: PUSH
21584: LD_INT 0
21586: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21587: LD_ADDR_VAR 0 3
21591: PUSH
21592: LD_VAR 0 1
21596: PPUSH
21597: CALL_OW 437
21601: ST_TO_ADDR
// if task then
21602: LD_VAR 0 3
21606: IFFALSE 21634
// if task [ 1 ] [ 1 ] = p then
21608: LD_VAR 0 3
21612: PUSH
21613: LD_INT 1
21615: ARRAY
21616: PUSH
21617: LD_INT 1
21619: ARRAY
21620: PUSH
21621: LD_STRING p
21623: EQUAL
21624: IFFALSE 21634
// result := true ;
21626: LD_ADDR_VAR 0 2
21630: PUSH
21631: LD_INT 1
21633: ST_TO_ADDR
// end ;
21634: LD_VAR 0 2
21638: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21639: LD_INT 0
21641: PPUSH
21642: PPUSH
21643: PPUSH
21644: PPUSH
// if pos < 1 then
21645: LD_VAR 0 2
21649: PUSH
21650: LD_INT 1
21652: LESS
21653: IFFALSE 21657
// exit ;
21655: GO 21960
// if pos = 1 then
21657: LD_VAR 0 2
21661: PUSH
21662: LD_INT 1
21664: EQUAL
21665: IFFALSE 21698
// result := Replace ( arr , pos [ 1 ] , value ) else
21667: LD_ADDR_VAR 0 4
21671: PUSH
21672: LD_VAR 0 1
21676: PPUSH
21677: LD_VAR 0 2
21681: PUSH
21682: LD_INT 1
21684: ARRAY
21685: PPUSH
21686: LD_VAR 0 3
21690: PPUSH
21691: CALL_OW 1
21695: ST_TO_ADDR
21696: GO 21960
// begin tmp := arr ;
21698: LD_ADDR_VAR 0 6
21702: PUSH
21703: LD_VAR 0 1
21707: ST_TO_ADDR
// s_arr := [ tmp ] ;
21708: LD_ADDR_VAR 0 7
21712: PUSH
21713: LD_VAR 0 6
21717: PUSH
21718: EMPTY
21719: LIST
21720: ST_TO_ADDR
// for i = 1 to pos - 1 do
21721: LD_ADDR_VAR 0 5
21725: PUSH
21726: DOUBLE
21727: LD_INT 1
21729: DEC
21730: ST_TO_ADDR
21731: LD_VAR 0 2
21735: PUSH
21736: LD_INT 1
21738: MINUS
21739: PUSH
21740: FOR_TO
21741: IFFALSE 21786
// begin tmp := tmp [ pos [ i ] ] ;
21743: LD_ADDR_VAR 0 6
21747: PUSH
21748: LD_VAR 0 6
21752: PUSH
21753: LD_VAR 0 2
21757: PUSH
21758: LD_VAR 0 5
21762: ARRAY
21763: ARRAY
21764: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21765: LD_ADDR_VAR 0 7
21769: PUSH
21770: LD_VAR 0 7
21774: PUSH
21775: LD_VAR 0 6
21779: PUSH
21780: EMPTY
21781: LIST
21782: ADD
21783: ST_TO_ADDR
// end ;
21784: GO 21740
21786: POP
21787: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21788: LD_ADDR_VAR 0 6
21792: PUSH
21793: LD_VAR 0 6
21797: PPUSH
21798: LD_VAR 0 2
21802: PUSH
21803: LD_VAR 0 2
21807: ARRAY
21808: PPUSH
21809: LD_VAR 0 3
21813: PPUSH
21814: CALL_OW 1
21818: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21819: LD_ADDR_VAR 0 7
21823: PUSH
21824: LD_VAR 0 7
21828: PPUSH
21829: LD_VAR 0 7
21833: PPUSH
21834: LD_VAR 0 6
21838: PPUSH
21839: CALL_OW 1
21843: ST_TO_ADDR
// for i = s_arr downto 2 do
21844: LD_ADDR_VAR 0 5
21848: PUSH
21849: DOUBLE
21850: LD_VAR 0 7
21854: INC
21855: ST_TO_ADDR
21856: LD_INT 2
21858: PUSH
21859: FOR_DOWNTO
21860: IFFALSE 21944
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21862: LD_ADDR_VAR 0 6
21866: PUSH
21867: LD_VAR 0 7
21871: PUSH
21872: LD_VAR 0 5
21876: PUSH
21877: LD_INT 1
21879: MINUS
21880: ARRAY
21881: PPUSH
21882: LD_VAR 0 2
21886: PUSH
21887: LD_VAR 0 5
21891: PUSH
21892: LD_INT 1
21894: MINUS
21895: ARRAY
21896: PPUSH
21897: LD_VAR 0 7
21901: PUSH
21902: LD_VAR 0 5
21906: ARRAY
21907: PPUSH
21908: CALL_OW 1
21912: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21913: LD_ADDR_VAR 0 7
21917: PUSH
21918: LD_VAR 0 7
21922: PPUSH
21923: LD_VAR 0 5
21927: PUSH
21928: LD_INT 1
21930: MINUS
21931: PPUSH
21932: LD_VAR 0 6
21936: PPUSH
21937: CALL_OW 1
21941: ST_TO_ADDR
// end ;
21942: GO 21859
21944: POP
21945: POP
// result := s_arr [ 1 ] ;
21946: LD_ADDR_VAR 0 4
21950: PUSH
21951: LD_VAR 0 7
21955: PUSH
21956: LD_INT 1
21958: ARRAY
21959: ST_TO_ADDR
// end ; end ;
21960: LD_VAR 0 4
21964: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21965: LD_INT 0
21967: PPUSH
21968: PPUSH
// if not list then
21969: LD_VAR 0 1
21973: NOT
21974: IFFALSE 21978
// exit ;
21976: GO 22069
// i := list [ pos1 ] ;
21978: LD_ADDR_VAR 0 5
21982: PUSH
21983: LD_VAR 0 1
21987: PUSH
21988: LD_VAR 0 2
21992: ARRAY
21993: ST_TO_ADDR
// if not i then
21994: LD_VAR 0 5
21998: NOT
21999: IFFALSE 22003
// exit ;
22001: GO 22069
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22003: LD_ADDR_VAR 0 1
22007: PUSH
22008: LD_VAR 0 1
22012: PPUSH
22013: LD_VAR 0 2
22017: PPUSH
22018: LD_VAR 0 1
22022: PUSH
22023: LD_VAR 0 3
22027: ARRAY
22028: PPUSH
22029: CALL_OW 1
22033: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22034: LD_ADDR_VAR 0 1
22038: PUSH
22039: LD_VAR 0 1
22043: PPUSH
22044: LD_VAR 0 3
22048: PPUSH
22049: LD_VAR 0 5
22053: PPUSH
22054: CALL_OW 1
22058: ST_TO_ADDR
// result := list ;
22059: LD_ADDR_VAR 0 4
22063: PUSH
22064: LD_VAR 0 1
22068: ST_TO_ADDR
// end ;
22069: LD_VAR 0 4
22073: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22074: LD_INT 0
22076: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22077: LD_ADDR_VAR 0 5
22081: PUSH
22082: LD_VAR 0 1
22086: PPUSH
22087: CALL_OW 250
22091: PPUSH
22092: LD_VAR 0 1
22096: PPUSH
22097: CALL_OW 251
22101: PPUSH
22102: LD_VAR 0 2
22106: PPUSH
22107: LD_VAR 0 3
22111: PPUSH
22112: LD_VAR 0 4
22116: PPUSH
22117: CALL 22495 0 5
22121: ST_TO_ADDR
// end ;
22122: LD_VAR 0 5
22126: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22127: LD_INT 0
22129: PPUSH
22130: PPUSH
22131: PPUSH
22132: PPUSH
// if not list or not unit then
22133: LD_VAR 0 2
22137: NOT
22138: PUSH
22139: LD_VAR 0 1
22143: NOT
22144: OR
22145: IFFALSE 22149
// exit ;
22147: GO 22490
// result := [ ] ;
22149: LD_ADDR_VAR 0 5
22153: PUSH
22154: EMPTY
22155: ST_TO_ADDR
// for i in list do
22156: LD_ADDR_VAR 0 6
22160: PUSH
22161: LD_VAR 0 2
22165: PUSH
22166: FOR_IN
22167: IFFALSE 22385
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22169: LD_ADDR_VAR 0 8
22173: PUSH
22174: LD_VAR 0 1
22178: PPUSH
22179: LD_VAR 0 6
22183: PUSH
22184: LD_INT 1
22186: ARRAY
22187: PPUSH
22188: LD_VAR 0 6
22192: PUSH
22193: LD_INT 2
22195: ARRAY
22196: PPUSH
22197: CALL_OW 297
22201: ST_TO_ADDR
// if not Count ( result ) then
22202: LD_VAR 0 5
22206: PPUSH
22207: CALL 18779 0 1
22211: NOT
22212: IFFALSE 22245
// begin result := Join ( result , [ i , tmp ] ) ;
22214: LD_ADDR_VAR 0 5
22218: PUSH
22219: LD_VAR 0 5
22223: PPUSH
22224: LD_VAR 0 6
22228: PUSH
22229: LD_VAR 0 8
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PPUSH
22238: CALL 54388 0 2
22242: ST_TO_ADDR
// continue ;
22243: GO 22166
// end ; if result [ result ] [ 2 ] <= tmp then
22245: LD_VAR 0 5
22249: PUSH
22250: LD_VAR 0 5
22254: ARRAY
22255: PUSH
22256: LD_INT 2
22258: ARRAY
22259: PUSH
22260: LD_VAR 0 8
22264: LESSEQUAL
22265: IFFALSE 22298
// result := Join ( result , [ i , tmp ] ) else
22267: LD_ADDR_VAR 0 5
22271: PUSH
22272: LD_VAR 0 5
22276: PPUSH
22277: LD_VAR 0 6
22281: PUSH
22282: LD_VAR 0 8
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PPUSH
22291: CALL 54388 0 2
22295: ST_TO_ADDR
22296: GO 22383
// begin for j := 1 to Count ( result ) do
22298: LD_ADDR_VAR 0 7
22302: PUSH
22303: DOUBLE
22304: LD_INT 1
22306: DEC
22307: ST_TO_ADDR
22308: LD_VAR 0 5
22312: PPUSH
22313: CALL 18779 0 1
22317: PUSH
22318: FOR_TO
22319: IFFALSE 22381
// begin if tmp < result [ j ] [ 2 ] then
22321: LD_VAR 0 8
22325: PUSH
22326: LD_VAR 0 5
22330: PUSH
22331: LD_VAR 0 7
22335: ARRAY
22336: PUSH
22337: LD_INT 2
22339: ARRAY
22340: LESS
22341: IFFALSE 22379
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22343: LD_ADDR_VAR 0 5
22347: PUSH
22348: LD_VAR 0 5
22352: PPUSH
22353: LD_VAR 0 7
22357: PPUSH
22358: LD_VAR 0 6
22362: PUSH
22363: LD_VAR 0 8
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PPUSH
22372: CALL_OW 2
22376: ST_TO_ADDR
// break ;
22377: GO 22381
// end ; end ;
22379: GO 22318
22381: POP
22382: POP
// end ; end ;
22383: GO 22166
22385: POP
22386: POP
// if result and not asc then
22387: LD_VAR 0 5
22391: PUSH
22392: LD_VAR 0 3
22396: NOT
22397: AND
22398: IFFALSE 22415
// result := ReverseArray ( result ) ;
22400: LD_ADDR_VAR 0 5
22404: PUSH
22405: LD_VAR 0 5
22409: PPUSH
22410: CALL 49655 0 1
22414: ST_TO_ADDR
// tmp := [ ] ;
22415: LD_ADDR_VAR 0 8
22419: PUSH
22420: EMPTY
22421: ST_TO_ADDR
// if mode then
22422: LD_VAR 0 4
22426: IFFALSE 22490
// begin for i := 1 to result do
22428: LD_ADDR_VAR 0 6
22432: PUSH
22433: DOUBLE
22434: LD_INT 1
22436: DEC
22437: ST_TO_ADDR
22438: LD_VAR 0 5
22442: PUSH
22443: FOR_TO
22444: IFFALSE 22478
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22446: LD_ADDR_VAR 0 8
22450: PUSH
22451: LD_VAR 0 8
22455: PPUSH
22456: LD_VAR 0 5
22460: PUSH
22461: LD_VAR 0 6
22465: ARRAY
22466: PUSH
22467: LD_INT 1
22469: ARRAY
22470: PPUSH
22471: CALL 54388 0 2
22475: ST_TO_ADDR
22476: GO 22443
22478: POP
22479: POP
// result := tmp ;
22480: LD_ADDR_VAR 0 5
22484: PUSH
22485: LD_VAR 0 8
22489: ST_TO_ADDR
// end ; end ;
22490: LD_VAR 0 5
22494: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22495: LD_INT 0
22497: PPUSH
22498: PPUSH
22499: PPUSH
22500: PPUSH
// if not list then
22501: LD_VAR 0 3
22505: NOT
22506: IFFALSE 22510
// exit ;
22508: GO 22898
// result := [ ] ;
22510: LD_ADDR_VAR 0 6
22514: PUSH
22515: EMPTY
22516: ST_TO_ADDR
// for i in list do
22517: LD_ADDR_VAR 0 7
22521: PUSH
22522: LD_VAR 0 3
22526: PUSH
22527: FOR_IN
22528: IFFALSE 22730
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22530: LD_ADDR_VAR 0 9
22534: PUSH
22535: LD_VAR 0 7
22539: PPUSH
22540: LD_VAR 0 1
22544: PPUSH
22545: LD_VAR 0 2
22549: PPUSH
22550: CALL_OW 297
22554: ST_TO_ADDR
// if not result then
22555: LD_VAR 0 6
22559: NOT
22560: IFFALSE 22586
// result := [ [ i , tmp ] ] else
22562: LD_ADDR_VAR 0 6
22566: PUSH
22567: LD_VAR 0 7
22571: PUSH
22572: LD_VAR 0 9
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: EMPTY
22582: LIST
22583: ST_TO_ADDR
22584: GO 22728
// begin if result [ result ] [ 2 ] <= tmp then
22586: LD_VAR 0 6
22590: PUSH
22591: LD_VAR 0 6
22595: ARRAY
22596: PUSH
22597: LD_INT 2
22599: ARRAY
22600: PUSH
22601: LD_VAR 0 9
22605: LESSEQUAL
22606: IFFALSE 22648
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22608: LD_ADDR_VAR 0 6
22612: PUSH
22613: LD_VAR 0 6
22617: PPUSH
22618: LD_VAR 0 6
22622: PUSH
22623: LD_INT 1
22625: PLUS
22626: PPUSH
22627: LD_VAR 0 7
22631: PUSH
22632: LD_VAR 0 9
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PPUSH
22641: CALL_OW 2
22645: ST_TO_ADDR
22646: GO 22728
// for j := 1 to result do
22648: LD_ADDR_VAR 0 8
22652: PUSH
22653: DOUBLE
22654: LD_INT 1
22656: DEC
22657: ST_TO_ADDR
22658: LD_VAR 0 6
22662: PUSH
22663: FOR_TO
22664: IFFALSE 22726
// begin if tmp < result [ j ] [ 2 ] then
22666: LD_VAR 0 9
22670: PUSH
22671: LD_VAR 0 6
22675: PUSH
22676: LD_VAR 0 8
22680: ARRAY
22681: PUSH
22682: LD_INT 2
22684: ARRAY
22685: LESS
22686: IFFALSE 22724
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22688: LD_ADDR_VAR 0 6
22692: PUSH
22693: LD_VAR 0 6
22697: PPUSH
22698: LD_VAR 0 8
22702: PPUSH
22703: LD_VAR 0 7
22707: PUSH
22708: LD_VAR 0 9
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PPUSH
22717: CALL_OW 2
22721: ST_TO_ADDR
// break ;
22722: GO 22726
// end ; end ;
22724: GO 22663
22726: POP
22727: POP
// end ; end ;
22728: GO 22527
22730: POP
22731: POP
// if result and not asc then
22732: LD_VAR 0 6
22736: PUSH
22737: LD_VAR 0 4
22741: NOT
22742: AND
22743: IFFALSE 22818
// begin tmp := result ;
22745: LD_ADDR_VAR 0 9
22749: PUSH
22750: LD_VAR 0 6
22754: ST_TO_ADDR
// for i = tmp downto 1 do
22755: LD_ADDR_VAR 0 7
22759: PUSH
22760: DOUBLE
22761: LD_VAR 0 9
22765: INC
22766: ST_TO_ADDR
22767: LD_INT 1
22769: PUSH
22770: FOR_DOWNTO
22771: IFFALSE 22816
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22773: LD_ADDR_VAR 0 6
22777: PUSH
22778: LD_VAR 0 6
22782: PPUSH
22783: LD_VAR 0 9
22787: PUSH
22788: LD_VAR 0 7
22792: MINUS
22793: PUSH
22794: LD_INT 1
22796: PLUS
22797: PPUSH
22798: LD_VAR 0 9
22802: PUSH
22803: LD_VAR 0 7
22807: ARRAY
22808: PPUSH
22809: CALL_OW 1
22813: ST_TO_ADDR
22814: GO 22770
22816: POP
22817: POP
// end ; tmp := [ ] ;
22818: LD_ADDR_VAR 0 9
22822: PUSH
22823: EMPTY
22824: ST_TO_ADDR
// if mode then
22825: LD_VAR 0 5
22829: IFFALSE 22898
// begin for i = 1 to result do
22831: LD_ADDR_VAR 0 7
22835: PUSH
22836: DOUBLE
22837: LD_INT 1
22839: DEC
22840: ST_TO_ADDR
22841: LD_VAR 0 6
22845: PUSH
22846: FOR_TO
22847: IFFALSE 22886
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22849: LD_ADDR_VAR 0 9
22853: PUSH
22854: LD_VAR 0 9
22858: PPUSH
22859: LD_VAR 0 7
22863: PPUSH
22864: LD_VAR 0 6
22868: PUSH
22869: LD_VAR 0 7
22873: ARRAY
22874: PUSH
22875: LD_INT 1
22877: ARRAY
22878: PPUSH
22879: CALL_OW 1
22883: ST_TO_ADDR
22884: GO 22846
22886: POP
22887: POP
// result := tmp ;
22888: LD_ADDR_VAR 0 6
22892: PUSH
22893: LD_VAR 0 9
22897: ST_TO_ADDR
// end ; end ;
22898: LD_VAR 0 6
22902: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22903: LD_INT 0
22905: PPUSH
22906: PPUSH
22907: PPUSH
22908: PPUSH
22909: PPUSH
22910: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22911: LD_ADDR_VAR 0 5
22915: PUSH
22916: LD_INT 0
22918: PUSH
22919: LD_INT 0
22921: PUSH
22922: LD_INT 0
22924: PUSH
22925: EMPTY
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: ST_TO_ADDR
// if not x or not y then
22933: LD_VAR 0 2
22937: NOT
22938: PUSH
22939: LD_VAR 0 3
22943: NOT
22944: OR
22945: IFFALSE 22949
// exit ;
22947: GO 24599
// if not range then
22949: LD_VAR 0 4
22953: NOT
22954: IFFALSE 22964
// range := 10 ;
22956: LD_ADDR_VAR 0 4
22960: PUSH
22961: LD_INT 10
22963: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22964: LD_ADDR_VAR 0 8
22968: PUSH
22969: LD_INT 81
22971: PUSH
22972: LD_VAR 0 1
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 92
22983: PUSH
22984: LD_VAR 0 2
22988: PUSH
22989: LD_VAR 0 3
22993: PUSH
22994: LD_VAR 0 4
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 3
23007: PUSH
23008: LD_INT 21
23010: PUSH
23011: LD_INT 3
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: LIST
23026: PPUSH
23027: CALL_OW 69
23031: ST_TO_ADDR
// if not tmp then
23032: LD_VAR 0 8
23036: NOT
23037: IFFALSE 23041
// exit ;
23039: GO 24599
// for i in tmp do
23041: LD_ADDR_VAR 0 6
23045: PUSH
23046: LD_VAR 0 8
23050: PUSH
23051: FOR_IN
23052: IFFALSE 24574
// begin points := [ 0 , 0 , 0 ] ;
23054: LD_ADDR_VAR 0 9
23058: PUSH
23059: LD_INT 0
23061: PUSH
23062: LD_INT 0
23064: PUSH
23065: LD_INT 0
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: LIST
23072: ST_TO_ADDR
// bpoints := 1 ;
23073: LD_ADDR_VAR 0 10
23077: PUSH
23078: LD_INT 1
23080: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23081: LD_VAR 0 6
23085: PPUSH
23086: CALL_OW 247
23090: PUSH
23091: LD_INT 1
23093: DOUBLE
23094: EQUAL
23095: IFTRUE 23099
23097: GO 23677
23099: POP
// begin if GetClass ( i ) = 1 then
23100: LD_VAR 0 6
23104: PPUSH
23105: CALL_OW 257
23109: PUSH
23110: LD_INT 1
23112: EQUAL
23113: IFFALSE 23134
// points := [ 10 , 5 , 3 ] ;
23115: LD_ADDR_VAR 0 9
23119: PUSH
23120: LD_INT 10
23122: PUSH
23123: LD_INT 5
23125: PUSH
23126: LD_INT 3
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: LIST
23133: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23134: LD_VAR 0 6
23138: PPUSH
23139: CALL_OW 257
23143: PUSH
23144: LD_INT 2
23146: PUSH
23147: LD_INT 3
23149: PUSH
23150: LD_INT 4
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: LIST
23157: IN
23158: IFFALSE 23179
// points := [ 3 , 2 , 1 ] ;
23160: LD_ADDR_VAR 0 9
23164: PUSH
23165: LD_INT 3
23167: PUSH
23168: LD_INT 2
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: LIST
23178: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23179: LD_VAR 0 6
23183: PPUSH
23184: CALL_OW 257
23188: PUSH
23189: LD_INT 5
23191: EQUAL
23192: IFFALSE 23213
// points := [ 130 , 5 , 2 ] ;
23194: LD_ADDR_VAR 0 9
23198: PUSH
23199: LD_INT 130
23201: PUSH
23202: LD_INT 5
23204: PUSH
23205: LD_INT 2
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: LIST
23212: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23213: LD_VAR 0 6
23217: PPUSH
23218: CALL_OW 257
23222: PUSH
23223: LD_INT 8
23225: EQUAL
23226: IFFALSE 23247
// points := [ 35 , 35 , 30 ] ;
23228: LD_ADDR_VAR 0 9
23232: PUSH
23233: LD_INT 35
23235: PUSH
23236: LD_INT 35
23238: PUSH
23239: LD_INT 30
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: LIST
23246: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23247: LD_VAR 0 6
23251: PPUSH
23252: CALL_OW 257
23256: PUSH
23257: LD_INT 9
23259: EQUAL
23260: IFFALSE 23281
// points := [ 20 , 55 , 40 ] ;
23262: LD_ADDR_VAR 0 9
23266: PUSH
23267: LD_INT 20
23269: PUSH
23270: LD_INT 55
23272: PUSH
23273: LD_INT 40
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23281: LD_VAR 0 6
23285: PPUSH
23286: CALL_OW 257
23290: PUSH
23291: LD_INT 12
23293: PUSH
23294: LD_INT 16
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: IN
23301: IFFALSE 23322
// points := [ 5 , 3 , 2 ] ;
23303: LD_ADDR_VAR 0 9
23307: PUSH
23308: LD_INT 5
23310: PUSH
23311: LD_INT 3
23313: PUSH
23314: LD_INT 2
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: LIST
23321: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23322: LD_VAR 0 6
23326: PPUSH
23327: CALL_OW 257
23331: PUSH
23332: LD_INT 17
23334: EQUAL
23335: IFFALSE 23356
// points := [ 100 , 50 , 75 ] ;
23337: LD_ADDR_VAR 0 9
23341: PUSH
23342: LD_INT 100
23344: PUSH
23345: LD_INT 50
23347: PUSH
23348: LD_INT 75
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: LIST
23355: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23356: LD_VAR 0 6
23360: PPUSH
23361: CALL_OW 257
23365: PUSH
23366: LD_INT 15
23368: EQUAL
23369: IFFALSE 23390
// points := [ 10 , 5 , 3 ] ;
23371: LD_ADDR_VAR 0 9
23375: PUSH
23376: LD_INT 10
23378: PUSH
23379: LD_INT 5
23381: PUSH
23382: LD_INT 3
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: LIST
23389: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23390: LD_VAR 0 6
23394: PPUSH
23395: CALL_OW 257
23399: PUSH
23400: LD_INT 14
23402: EQUAL
23403: IFFALSE 23424
// points := [ 10 , 0 , 0 ] ;
23405: LD_ADDR_VAR 0 9
23409: PUSH
23410: LD_INT 10
23412: PUSH
23413: LD_INT 0
23415: PUSH
23416: LD_INT 0
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: LIST
23423: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23424: LD_VAR 0 6
23428: PPUSH
23429: CALL_OW 257
23433: PUSH
23434: LD_INT 11
23436: EQUAL
23437: IFFALSE 23458
// points := [ 30 , 10 , 5 ] ;
23439: LD_ADDR_VAR 0 9
23443: PUSH
23444: LD_INT 30
23446: PUSH
23447: LD_INT 10
23449: PUSH
23450: LD_INT 5
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: LIST
23457: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23458: LD_VAR 0 1
23462: PPUSH
23463: LD_INT 5
23465: PPUSH
23466: CALL_OW 321
23470: PUSH
23471: LD_INT 2
23473: EQUAL
23474: IFFALSE 23491
// bpoints := bpoints * 1.8 ;
23476: LD_ADDR_VAR 0 10
23480: PUSH
23481: LD_VAR 0 10
23485: PUSH
23486: LD_REAL  1.80000000000000E+0000
23489: MUL
23490: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23491: LD_VAR 0 6
23495: PPUSH
23496: CALL_OW 257
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: LD_INT 2
23506: PUSH
23507: LD_INT 3
23509: PUSH
23510: LD_INT 4
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: IN
23519: PUSH
23520: LD_VAR 0 1
23524: PPUSH
23525: LD_INT 51
23527: PPUSH
23528: CALL_OW 321
23532: PUSH
23533: LD_INT 2
23535: EQUAL
23536: AND
23537: IFFALSE 23554
// bpoints := bpoints * 1.2 ;
23539: LD_ADDR_VAR 0 10
23543: PUSH
23544: LD_VAR 0 10
23548: PUSH
23549: LD_REAL  1.20000000000000E+0000
23552: MUL
23553: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23554: LD_VAR 0 6
23558: PPUSH
23559: CALL_OW 257
23563: PUSH
23564: LD_INT 5
23566: PUSH
23567: LD_INT 7
23569: PUSH
23570: LD_INT 9
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: LIST
23577: IN
23578: PUSH
23579: LD_VAR 0 1
23583: PPUSH
23584: LD_INT 52
23586: PPUSH
23587: CALL_OW 321
23591: PUSH
23592: LD_INT 2
23594: EQUAL
23595: AND
23596: IFFALSE 23613
// bpoints := bpoints * 1.5 ;
23598: LD_ADDR_VAR 0 10
23602: PUSH
23603: LD_VAR 0 10
23607: PUSH
23608: LD_REAL  1.50000000000000E+0000
23611: MUL
23612: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23613: LD_VAR 0 1
23617: PPUSH
23618: LD_INT 66
23620: PPUSH
23621: CALL_OW 321
23625: PUSH
23626: LD_INT 2
23628: EQUAL
23629: IFFALSE 23646
// bpoints := bpoints * 1.1 ;
23631: LD_ADDR_VAR 0 10
23635: PUSH
23636: LD_VAR 0 10
23640: PUSH
23641: LD_REAL  1.10000000000000E+0000
23644: MUL
23645: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23646: LD_ADDR_VAR 0 10
23650: PUSH
23651: LD_VAR 0 10
23655: PUSH
23656: LD_VAR 0 6
23660: PPUSH
23661: LD_INT 1
23663: PPUSH
23664: CALL_OW 259
23668: PUSH
23669: LD_REAL  1.15000000000000E+0000
23672: MUL
23673: MUL
23674: ST_TO_ADDR
// end ; unit_vehicle :
23675: GO 24503
23677: LD_INT 2
23679: DOUBLE
23680: EQUAL
23681: IFTRUE 23685
23683: GO 24491
23685: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23686: LD_VAR 0 6
23690: PPUSH
23691: CALL_OW 264
23695: PUSH
23696: LD_INT 2
23698: PUSH
23699: LD_INT 42
23701: PUSH
23702: LD_INT 24
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: LIST
23709: IN
23710: IFFALSE 23731
// points := [ 25 , 5 , 3 ] ;
23712: LD_ADDR_VAR 0 9
23716: PUSH
23717: LD_INT 25
23719: PUSH
23720: LD_INT 5
23722: PUSH
23723: LD_INT 3
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: LIST
23730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23731: LD_VAR 0 6
23735: PPUSH
23736: CALL_OW 264
23740: PUSH
23741: LD_INT 4
23743: PUSH
23744: LD_INT 43
23746: PUSH
23747: LD_INT 25
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: LIST
23754: IN
23755: IFFALSE 23776
// points := [ 40 , 15 , 5 ] ;
23757: LD_ADDR_VAR 0 9
23761: PUSH
23762: LD_INT 40
23764: PUSH
23765: LD_INT 15
23767: PUSH
23768: LD_INT 5
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: LIST
23775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23776: LD_VAR 0 6
23780: PPUSH
23781: CALL_OW 264
23785: PUSH
23786: LD_INT 3
23788: PUSH
23789: LD_INT 23
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: IN
23796: IFFALSE 23817
// points := [ 7 , 25 , 8 ] ;
23798: LD_ADDR_VAR 0 9
23802: PUSH
23803: LD_INT 7
23805: PUSH
23806: LD_INT 25
23808: PUSH
23809: LD_INT 8
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: LIST
23816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23817: LD_VAR 0 6
23821: PPUSH
23822: CALL_OW 264
23826: PUSH
23827: LD_INT 5
23829: PUSH
23830: LD_INT 27
23832: PUSH
23833: LD_INT 44
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: LIST
23840: IN
23841: IFFALSE 23862
// points := [ 14 , 50 , 16 ] ;
23843: LD_ADDR_VAR 0 9
23847: PUSH
23848: LD_INT 14
23850: PUSH
23851: LD_INT 50
23853: PUSH
23854: LD_INT 16
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: LIST
23861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23862: LD_VAR 0 6
23866: PPUSH
23867: CALL_OW 264
23871: PUSH
23872: LD_INT 6
23874: PUSH
23875: LD_INT 46
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: IN
23882: IFFALSE 23903
// points := [ 32 , 120 , 70 ] ;
23884: LD_ADDR_VAR 0 9
23888: PUSH
23889: LD_INT 32
23891: PUSH
23892: LD_INT 120
23894: PUSH
23895: LD_INT 70
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: LIST
23902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23903: LD_VAR 0 6
23907: PPUSH
23908: CALL_OW 264
23912: PUSH
23913: LD_INT 7
23915: PUSH
23916: LD_INT 28
23918: PUSH
23919: LD_INT 45
23921: PUSH
23922: LD_INT 92
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: IN
23931: IFFALSE 23952
// points := [ 35 , 20 , 45 ] ;
23933: LD_ADDR_VAR 0 9
23937: PUSH
23938: LD_INT 35
23940: PUSH
23941: LD_INT 20
23943: PUSH
23944: LD_INT 45
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: LIST
23951: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23952: LD_VAR 0 6
23956: PPUSH
23957: CALL_OW 264
23961: PUSH
23962: LD_INT 47
23964: PUSH
23965: EMPTY
23966: LIST
23967: IN
23968: IFFALSE 23989
// points := [ 67 , 45 , 75 ] ;
23970: LD_ADDR_VAR 0 9
23974: PUSH
23975: LD_INT 67
23977: PUSH
23978: LD_INT 45
23980: PUSH
23981: LD_INT 75
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: LIST
23988: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23989: LD_VAR 0 6
23993: PPUSH
23994: CALL_OW 264
23998: PUSH
23999: LD_INT 26
24001: PUSH
24002: EMPTY
24003: LIST
24004: IN
24005: IFFALSE 24026
// points := [ 120 , 30 , 80 ] ;
24007: LD_ADDR_VAR 0 9
24011: PUSH
24012: LD_INT 120
24014: PUSH
24015: LD_INT 30
24017: PUSH
24018: LD_INT 80
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: LIST
24025: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24026: LD_VAR 0 6
24030: PPUSH
24031: CALL_OW 264
24035: PUSH
24036: LD_INT 22
24038: PUSH
24039: EMPTY
24040: LIST
24041: IN
24042: IFFALSE 24063
// points := [ 40 , 1 , 1 ] ;
24044: LD_ADDR_VAR 0 9
24048: PUSH
24049: LD_INT 40
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: LD_INT 1
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: LIST
24062: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24063: LD_VAR 0 6
24067: PPUSH
24068: CALL_OW 264
24072: PUSH
24073: LD_INT 29
24075: PUSH
24076: EMPTY
24077: LIST
24078: IN
24079: IFFALSE 24100
// points := [ 70 , 200 , 400 ] ;
24081: LD_ADDR_VAR 0 9
24085: PUSH
24086: LD_INT 70
24088: PUSH
24089: LD_INT 200
24091: PUSH
24092: LD_INT 400
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: LIST
24099: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24100: LD_VAR 0 6
24104: PPUSH
24105: CALL_OW 264
24109: PUSH
24110: LD_INT 14
24112: PUSH
24113: LD_INT 53
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: IN
24120: IFFALSE 24141
// points := [ 40 , 10 , 20 ] ;
24122: LD_ADDR_VAR 0 9
24126: PUSH
24127: LD_INT 40
24129: PUSH
24130: LD_INT 10
24132: PUSH
24133: LD_INT 20
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: LIST
24140: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24141: LD_VAR 0 6
24145: PPUSH
24146: CALL_OW 264
24150: PUSH
24151: LD_INT 9
24153: PUSH
24154: EMPTY
24155: LIST
24156: IN
24157: IFFALSE 24178
// points := [ 5 , 70 , 20 ] ;
24159: LD_ADDR_VAR 0 9
24163: PUSH
24164: LD_INT 5
24166: PUSH
24167: LD_INT 70
24169: PUSH
24170: LD_INT 20
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: LIST
24177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24178: LD_VAR 0 6
24182: PPUSH
24183: CALL_OW 264
24187: PUSH
24188: LD_INT 10
24190: PUSH
24191: EMPTY
24192: LIST
24193: IN
24194: IFFALSE 24215
// points := [ 35 , 110 , 70 ] ;
24196: LD_ADDR_VAR 0 9
24200: PUSH
24201: LD_INT 35
24203: PUSH
24204: LD_INT 110
24206: PUSH
24207: LD_INT 70
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: LIST
24214: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24215: LD_VAR 0 6
24219: PPUSH
24220: CALL_OW 265
24224: PUSH
24225: LD_INT 25
24227: EQUAL
24228: IFFALSE 24249
// points := [ 80 , 65 , 100 ] ;
24230: LD_ADDR_VAR 0 9
24234: PUSH
24235: LD_INT 80
24237: PUSH
24238: LD_INT 65
24240: PUSH
24241: LD_INT 100
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: LIST
24248: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24249: LD_VAR 0 6
24253: PPUSH
24254: CALL_OW 263
24258: PUSH
24259: LD_INT 1
24261: EQUAL
24262: IFFALSE 24297
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24264: LD_ADDR_VAR 0 10
24268: PUSH
24269: LD_VAR 0 10
24273: PUSH
24274: LD_VAR 0 6
24278: PPUSH
24279: CALL_OW 311
24283: PPUSH
24284: LD_INT 3
24286: PPUSH
24287: CALL_OW 259
24291: PUSH
24292: LD_INT 4
24294: MUL
24295: MUL
24296: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24297: LD_VAR 0 6
24301: PPUSH
24302: CALL_OW 263
24306: PUSH
24307: LD_INT 2
24309: EQUAL
24310: IFFALSE 24361
// begin j := IsControledBy ( i ) ;
24312: LD_ADDR_VAR 0 7
24316: PUSH
24317: LD_VAR 0 6
24321: PPUSH
24322: CALL_OW 312
24326: ST_TO_ADDR
// if j then
24327: LD_VAR 0 7
24331: IFFALSE 24361
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24333: LD_ADDR_VAR 0 10
24337: PUSH
24338: LD_VAR 0 10
24342: PUSH
24343: LD_VAR 0 7
24347: PPUSH
24348: LD_INT 3
24350: PPUSH
24351: CALL_OW 259
24355: PUSH
24356: LD_INT 3
24358: MUL
24359: MUL
24360: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24361: LD_VAR 0 6
24365: PPUSH
24366: CALL_OW 264
24370: PUSH
24371: LD_INT 5
24373: PUSH
24374: LD_INT 6
24376: PUSH
24377: LD_INT 46
24379: PUSH
24380: LD_INT 44
24382: PUSH
24383: LD_INT 47
24385: PUSH
24386: LD_INT 45
24388: PUSH
24389: LD_INT 28
24391: PUSH
24392: LD_INT 7
24394: PUSH
24395: LD_INT 27
24397: PUSH
24398: LD_INT 29
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: IN
24413: PUSH
24414: LD_VAR 0 1
24418: PPUSH
24419: LD_INT 52
24421: PPUSH
24422: CALL_OW 321
24426: PUSH
24427: LD_INT 2
24429: EQUAL
24430: AND
24431: IFFALSE 24448
// bpoints := bpoints * 1.2 ;
24433: LD_ADDR_VAR 0 10
24437: PUSH
24438: LD_VAR 0 10
24442: PUSH
24443: LD_REAL  1.20000000000000E+0000
24446: MUL
24447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24448: LD_VAR 0 6
24452: PPUSH
24453: CALL_OW 264
24457: PUSH
24458: LD_INT 6
24460: PUSH
24461: LD_INT 46
24463: PUSH
24464: LD_INT 47
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: LIST
24471: IN
24472: IFFALSE 24489
// bpoints := bpoints * 1.2 ;
24474: LD_ADDR_VAR 0 10
24478: PUSH
24479: LD_VAR 0 10
24483: PUSH
24484: LD_REAL  1.20000000000000E+0000
24487: MUL
24488: ST_TO_ADDR
// end ; unit_building :
24489: GO 24503
24491: LD_INT 3
24493: DOUBLE
24494: EQUAL
24495: IFTRUE 24499
24497: GO 24502
24499: POP
// ; end ;
24500: GO 24503
24502: POP
// for j = 1 to 3 do
24503: LD_ADDR_VAR 0 7
24507: PUSH
24508: DOUBLE
24509: LD_INT 1
24511: DEC
24512: ST_TO_ADDR
24513: LD_INT 3
24515: PUSH
24516: FOR_TO
24517: IFFALSE 24570
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24519: LD_ADDR_VAR 0 5
24523: PUSH
24524: LD_VAR 0 5
24528: PPUSH
24529: LD_VAR 0 7
24533: PPUSH
24534: LD_VAR 0 5
24538: PUSH
24539: LD_VAR 0 7
24543: ARRAY
24544: PUSH
24545: LD_VAR 0 9
24549: PUSH
24550: LD_VAR 0 7
24554: ARRAY
24555: PUSH
24556: LD_VAR 0 10
24560: MUL
24561: PLUS
24562: PPUSH
24563: CALL_OW 1
24567: ST_TO_ADDR
24568: GO 24516
24570: POP
24571: POP
// end ;
24572: GO 23051
24574: POP
24575: POP
// result := Replace ( result , 4 , tmp ) ;
24576: LD_ADDR_VAR 0 5
24580: PUSH
24581: LD_VAR 0 5
24585: PPUSH
24586: LD_INT 4
24588: PPUSH
24589: LD_VAR 0 8
24593: PPUSH
24594: CALL_OW 1
24598: ST_TO_ADDR
// end ;
24599: LD_VAR 0 5
24603: RET
// export function DangerAtRange ( unit , range ) ; begin
24604: LD_INT 0
24606: PPUSH
// if not unit then
24607: LD_VAR 0 1
24611: NOT
24612: IFFALSE 24616
// exit ;
24614: GO 24661
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24616: LD_ADDR_VAR 0 3
24620: PUSH
24621: LD_VAR 0 1
24625: PPUSH
24626: CALL_OW 255
24630: PPUSH
24631: LD_VAR 0 1
24635: PPUSH
24636: CALL_OW 250
24640: PPUSH
24641: LD_VAR 0 1
24645: PPUSH
24646: CALL_OW 251
24650: PPUSH
24651: LD_VAR 0 2
24655: PPUSH
24656: CALL 22903 0 4
24660: ST_TO_ADDR
// end ;
24661: LD_VAR 0 3
24665: RET
// export function DangerInArea ( side , area ) ; begin
24666: LD_INT 0
24668: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24669: LD_ADDR_VAR 0 3
24673: PUSH
24674: LD_VAR 0 2
24678: PPUSH
24679: LD_INT 81
24681: PUSH
24682: LD_VAR 0 1
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PPUSH
24691: CALL_OW 70
24695: ST_TO_ADDR
// end ;
24696: LD_VAR 0 3
24700: RET
// export function IsExtension ( b ) ; begin
24701: LD_INT 0
24703: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24704: LD_ADDR_VAR 0 2
24708: PUSH
24709: LD_VAR 0 1
24713: PUSH
24714: LD_INT 23
24716: PUSH
24717: LD_INT 20
24719: PUSH
24720: LD_INT 22
24722: PUSH
24723: LD_INT 17
24725: PUSH
24726: LD_INT 24
24728: PUSH
24729: LD_INT 21
24731: PUSH
24732: LD_INT 19
24734: PUSH
24735: LD_INT 16
24737: PUSH
24738: LD_INT 25
24740: PUSH
24741: LD_INT 18
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: IN
24756: ST_TO_ADDR
// end ;
24757: LD_VAR 0 2
24761: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24762: LD_INT 0
24764: PPUSH
24765: PPUSH
24766: PPUSH
// result := [ ] ;
24767: LD_ADDR_VAR 0 4
24771: PUSH
24772: EMPTY
24773: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24774: LD_ADDR_VAR 0 5
24778: PUSH
24779: LD_VAR 0 2
24783: PPUSH
24784: LD_INT 21
24786: PUSH
24787: LD_INT 3
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PPUSH
24794: CALL_OW 70
24798: ST_TO_ADDR
// if not tmp then
24799: LD_VAR 0 5
24803: NOT
24804: IFFALSE 24808
// exit ;
24806: GO 24872
// if checkLink then
24808: LD_VAR 0 3
24812: IFFALSE 24862
// begin for i in tmp do
24814: LD_ADDR_VAR 0 6
24818: PUSH
24819: LD_VAR 0 5
24823: PUSH
24824: FOR_IN
24825: IFFALSE 24860
// if GetBase ( i ) <> base then
24827: LD_VAR 0 6
24831: PPUSH
24832: CALL_OW 274
24836: PUSH
24837: LD_VAR 0 1
24841: NONEQUAL
24842: IFFALSE 24858
// ComLinkToBase ( base , i ) ;
24844: LD_VAR 0 1
24848: PPUSH
24849: LD_VAR 0 6
24853: PPUSH
24854: CALL_OW 169
24858: GO 24824
24860: POP
24861: POP
// end ; result := tmp ;
24862: LD_ADDR_VAR 0 4
24866: PUSH
24867: LD_VAR 0 5
24871: ST_TO_ADDR
// end ;
24872: LD_VAR 0 4
24876: RET
// export function ComComplete ( units , b ) ; var i ; begin
24877: LD_INT 0
24879: PPUSH
24880: PPUSH
// if not units then
24881: LD_VAR 0 1
24885: NOT
24886: IFFALSE 24890
// exit ;
24888: GO 24980
// for i in units do
24890: LD_ADDR_VAR 0 4
24894: PUSH
24895: LD_VAR 0 1
24899: PUSH
24900: FOR_IN
24901: IFFALSE 24978
// if BuildingStatus ( b ) = bs_build then
24903: LD_VAR 0 2
24907: PPUSH
24908: CALL_OW 461
24912: PUSH
24913: LD_INT 1
24915: EQUAL
24916: IFFALSE 24976
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24918: LD_VAR 0 4
24922: PPUSH
24923: LD_STRING h
24925: PUSH
24926: LD_VAR 0 2
24930: PPUSH
24931: CALL_OW 250
24935: PUSH
24936: LD_VAR 0 2
24940: PPUSH
24941: CALL_OW 251
24945: PUSH
24946: LD_VAR 0 2
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: PUSH
24969: EMPTY
24970: LIST
24971: PPUSH
24972: CALL_OW 446
24976: GO 24900
24978: POP
24979: POP
// end ;
24980: LD_VAR 0 3
24984: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24985: LD_INT 0
24987: PPUSH
24988: PPUSH
24989: PPUSH
24990: PPUSH
24991: PPUSH
24992: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24993: LD_VAR 0 1
24997: NOT
24998: PUSH
24999: LD_VAR 0 1
25003: PPUSH
25004: CALL_OW 263
25008: PUSH
25009: LD_INT 2
25011: NONEQUAL
25012: OR
25013: IFFALSE 25017
// exit ;
25015: GO 25333
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25017: LD_ADDR_VAR 0 6
25021: PUSH
25022: LD_INT 22
25024: PUSH
25025: LD_VAR 0 1
25029: PPUSH
25030: CALL_OW 255
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 2
25041: PUSH
25042: LD_INT 30
25044: PUSH
25045: LD_INT 36
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 34
25054: PUSH
25055: LD_INT 31
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: LIST
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PPUSH
25071: CALL_OW 69
25075: ST_TO_ADDR
// if not tmp then
25076: LD_VAR 0 6
25080: NOT
25081: IFFALSE 25085
// exit ;
25083: GO 25333
// result := [ ] ;
25085: LD_ADDR_VAR 0 2
25089: PUSH
25090: EMPTY
25091: ST_TO_ADDR
// for i in tmp do
25092: LD_ADDR_VAR 0 3
25096: PUSH
25097: LD_VAR 0 6
25101: PUSH
25102: FOR_IN
25103: IFFALSE 25174
// begin t := UnitsInside ( i ) ;
25105: LD_ADDR_VAR 0 4
25109: PUSH
25110: LD_VAR 0 3
25114: PPUSH
25115: CALL_OW 313
25119: ST_TO_ADDR
// if t then
25120: LD_VAR 0 4
25124: IFFALSE 25172
// for j in t do
25126: LD_ADDR_VAR 0 7
25130: PUSH
25131: LD_VAR 0 4
25135: PUSH
25136: FOR_IN
25137: IFFALSE 25170
// result := Replace ( result , result + 1 , j ) ;
25139: LD_ADDR_VAR 0 2
25143: PUSH
25144: LD_VAR 0 2
25148: PPUSH
25149: LD_VAR 0 2
25153: PUSH
25154: LD_INT 1
25156: PLUS
25157: PPUSH
25158: LD_VAR 0 7
25162: PPUSH
25163: CALL_OW 1
25167: ST_TO_ADDR
25168: GO 25136
25170: POP
25171: POP
// end ;
25172: GO 25102
25174: POP
25175: POP
// if not result then
25176: LD_VAR 0 2
25180: NOT
25181: IFFALSE 25185
// exit ;
25183: GO 25333
// mech := result [ 1 ] ;
25185: LD_ADDR_VAR 0 5
25189: PUSH
25190: LD_VAR 0 2
25194: PUSH
25195: LD_INT 1
25197: ARRAY
25198: ST_TO_ADDR
// if result > 1 then
25199: LD_VAR 0 2
25203: PUSH
25204: LD_INT 1
25206: GREATER
25207: IFFALSE 25319
// begin for i = 2 to result do
25209: LD_ADDR_VAR 0 3
25213: PUSH
25214: DOUBLE
25215: LD_INT 2
25217: DEC
25218: ST_TO_ADDR
25219: LD_VAR 0 2
25223: PUSH
25224: FOR_TO
25225: IFFALSE 25317
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25227: LD_ADDR_VAR 0 4
25231: PUSH
25232: LD_VAR 0 2
25236: PUSH
25237: LD_VAR 0 3
25241: ARRAY
25242: PPUSH
25243: LD_INT 3
25245: PPUSH
25246: CALL_OW 259
25250: PUSH
25251: LD_VAR 0 2
25255: PUSH
25256: LD_VAR 0 3
25260: ARRAY
25261: PPUSH
25262: CALL_OW 432
25266: MINUS
25267: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25268: LD_VAR 0 4
25272: PUSH
25273: LD_VAR 0 5
25277: PPUSH
25278: LD_INT 3
25280: PPUSH
25281: CALL_OW 259
25285: PUSH
25286: LD_VAR 0 5
25290: PPUSH
25291: CALL_OW 432
25295: MINUS
25296: GREATEREQUAL
25297: IFFALSE 25315
// mech := result [ i ] ;
25299: LD_ADDR_VAR 0 5
25303: PUSH
25304: LD_VAR 0 2
25308: PUSH
25309: LD_VAR 0 3
25313: ARRAY
25314: ST_TO_ADDR
// end ;
25315: GO 25224
25317: POP
25318: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25319: LD_VAR 0 1
25323: PPUSH
25324: LD_VAR 0 5
25328: PPUSH
25329: CALL_OW 135
// end ;
25333: LD_VAR 0 2
25337: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25338: LD_INT 0
25340: PPUSH
25341: PPUSH
25342: PPUSH
25343: PPUSH
25344: PPUSH
25345: PPUSH
25346: PPUSH
25347: PPUSH
25348: PPUSH
25349: PPUSH
25350: PPUSH
25351: PPUSH
25352: PPUSH
// result := [ ] ;
25353: LD_ADDR_VAR 0 7
25357: PUSH
25358: EMPTY
25359: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25360: LD_VAR 0 1
25364: PPUSH
25365: CALL_OW 266
25369: PUSH
25370: LD_INT 0
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: IN
25380: NOT
25381: IFFALSE 25385
// exit ;
25383: GO 27019
// if name then
25385: LD_VAR 0 3
25389: IFFALSE 25405
// SetBName ( base_dep , name ) ;
25391: LD_VAR 0 1
25395: PPUSH
25396: LD_VAR 0 3
25400: PPUSH
25401: CALL_OW 500
// base := GetBase ( base_dep ) ;
25405: LD_ADDR_VAR 0 15
25409: PUSH
25410: LD_VAR 0 1
25414: PPUSH
25415: CALL_OW 274
25419: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25420: LD_ADDR_VAR 0 16
25424: PUSH
25425: LD_VAR 0 1
25429: PPUSH
25430: CALL_OW 255
25434: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25435: LD_ADDR_VAR 0 17
25439: PUSH
25440: LD_VAR 0 1
25444: PPUSH
25445: CALL_OW 248
25449: ST_TO_ADDR
// if sources then
25450: LD_VAR 0 5
25454: IFFALSE 25501
// for i = 1 to 3 do
25456: LD_ADDR_VAR 0 8
25460: PUSH
25461: DOUBLE
25462: LD_INT 1
25464: DEC
25465: ST_TO_ADDR
25466: LD_INT 3
25468: PUSH
25469: FOR_TO
25470: IFFALSE 25499
// AddResourceType ( base , i , sources [ i ] ) ;
25472: LD_VAR 0 15
25476: PPUSH
25477: LD_VAR 0 8
25481: PPUSH
25482: LD_VAR 0 5
25486: PUSH
25487: LD_VAR 0 8
25491: ARRAY
25492: PPUSH
25493: CALL_OW 276
25497: GO 25469
25499: POP
25500: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25501: LD_ADDR_VAR 0 18
25505: PUSH
25506: LD_VAR 0 15
25510: PPUSH
25511: LD_VAR 0 2
25515: PPUSH
25516: LD_INT 1
25518: PPUSH
25519: CALL 24762 0 3
25523: ST_TO_ADDR
// InitHc ;
25524: CALL_OW 19
// InitUc ;
25528: CALL_OW 18
// uc_side := side ;
25532: LD_ADDR_OWVAR 20
25536: PUSH
25537: LD_VAR 0 16
25541: ST_TO_ADDR
// uc_nation := nation ;
25542: LD_ADDR_OWVAR 21
25546: PUSH
25547: LD_VAR 0 17
25551: ST_TO_ADDR
// if buildings then
25552: LD_VAR 0 18
25556: IFFALSE 26878
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25558: LD_ADDR_VAR 0 19
25562: PUSH
25563: LD_VAR 0 18
25567: PPUSH
25568: LD_INT 2
25570: PUSH
25571: LD_INT 30
25573: PUSH
25574: LD_INT 29
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 30
25583: PUSH
25584: LD_INT 30
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: LIST
25595: PPUSH
25596: CALL_OW 72
25600: ST_TO_ADDR
// if tmp then
25601: LD_VAR 0 19
25605: IFFALSE 25653
// for i in tmp do
25607: LD_ADDR_VAR 0 8
25611: PUSH
25612: LD_VAR 0 19
25616: PUSH
25617: FOR_IN
25618: IFFALSE 25651
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25620: LD_VAR 0 8
25624: PPUSH
25625: CALL_OW 250
25629: PPUSH
25630: LD_VAR 0 8
25634: PPUSH
25635: CALL_OW 251
25639: PPUSH
25640: LD_VAR 0 16
25644: PPUSH
25645: CALL_OW 441
25649: GO 25617
25651: POP
25652: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25653: LD_VAR 0 18
25657: PPUSH
25658: LD_INT 2
25660: PUSH
25661: LD_INT 30
25663: PUSH
25664: LD_INT 32
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 30
25673: PUSH
25674: LD_INT 33
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: LIST
25685: PPUSH
25686: CALL_OW 72
25690: IFFALSE 25778
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25692: LD_ADDR_VAR 0 8
25696: PUSH
25697: LD_VAR 0 18
25701: PPUSH
25702: LD_INT 2
25704: PUSH
25705: LD_INT 30
25707: PUSH
25708: LD_INT 32
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 30
25717: PUSH
25718: LD_INT 33
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: LIST
25729: PPUSH
25730: CALL_OW 72
25734: PUSH
25735: FOR_IN
25736: IFFALSE 25776
// begin if not GetBWeapon ( i ) then
25738: LD_VAR 0 8
25742: PPUSH
25743: CALL_OW 269
25747: NOT
25748: IFFALSE 25774
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25750: LD_VAR 0 8
25754: PPUSH
25755: LD_VAR 0 8
25759: PPUSH
25760: LD_VAR 0 2
25764: PPUSH
25765: CALL 27024 0 2
25769: PPUSH
25770: CALL_OW 431
// end ;
25774: GO 25735
25776: POP
25777: POP
// end ; for i = 1 to personel do
25778: LD_ADDR_VAR 0 8
25782: PUSH
25783: DOUBLE
25784: LD_INT 1
25786: DEC
25787: ST_TO_ADDR
25788: LD_VAR 0 6
25792: PUSH
25793: FOR_TO
25794: IFFALSE 26858
// begin if i > 4 then
25796: LD_VAR 0 8
25800: PUSH
25801: LD_INT 4
25803: GREATER
25804: IFFALSE 25808
// break ;
25806: GO 26858
// case i of 1 :
25808: LD_VAR 0 8
25812: PUSH
25813: LD_INT 1
25815: DOUBLE
25816: EQUAL
25817: IFTRUE 25821
25819: GO 25901
25821: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25822: LD_ADDR_VAR 0 12
25826: PUSH
25827: LD_VAR 0 18
25831: PPUSH
25832: LD_INT 22
25834: PUSH
25835: LD_VAR 0 16
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 58
25846: PUSH
25847: EMPTY
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: PUSH
25853: LD_INT 30
25855: PUSH
25856: LD_INT 32
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 30
25865: PUSH
25866: LD_INT 4
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 30
25875: PUSH
25876: LD_INT 5
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: LIST
25893: PPUSH
25894: CALL_OW 72
25898: ST_TO_ADDR
25899: GO 26123
25901: LD_INT 2
25903: DOUBLE
25904: EQUAL
25905: IFTRUE 25909
25907: GO 25971
25909: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25910: LD_ADDR_VAR 0 12
25914: PUSH
25915: LD_VAR 0 18
25919: PPUSH
25920: LD_INT 22
25922: PUSH
25923: LD_VAR 0 16
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 2
25934: PUSH
25935: LD_INT 30
25937: PUSH
25938: LD_INT 0
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 30
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: LIST
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PPUSH
25964: CALL_OW 72
25968: ST_TO_ADDR
25969: GO 26123
25971: LD_INT 3
25973: DOUBLE
25974: EQUAL
25975: IFTRUE 25979
25977: GO 26041
25979: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25980: LD_ADDR_VAR 0 12
25984: PUSH
25985: LD_VAR 0 18
25989: PPUSH
25990: LD_INT 22
25992: PUSH
25993: LD_VAR 0 16
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 2
26004: PUSH
26005: LD_INT 30
26007: PUSH
26008: LD_INT 2
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 30
26017: PUSH
26018: LD_INT 3
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: LIST
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PPUSH
26034: CALL_OW 72
26038: ST_TO_ADDR
26039: GO 26123
26041: LD_INT 4
26043: DOUBLE
26044: EQUAL
26045: IFTRUE 26049
26047: GO 26122
26049: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26050: LD_ADDR_VAR 0 12
26054: PUSH
26055: LD_VAR 0 18
26059: PPUSH
26060: LD_INT 22
26062: PUSH
26063: LD_VAR 0 16
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 2
26074: PUSH
26075: LD_INT 30
26077: PUSH
26078: LD_INT 6
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 30
26087: PUSH
26088: LD_INT 7
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 30
26097: PUSH
26098: LD_INT 8
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PPUSH
26115: CALL_OW 72
26119: ST_TO_ADDR
26120: GO 26123
26122: POP
// if i = 1 then
26123: LD_VAR 0 8
26127: PUSH
26128: LD_INT 1
26130: EQUAL
26131: IFFALSE 26242
// begin tmp := [ ] ;
26133: LD_ADDR_VAR 0 19
26137: PUSH
26138: EMPTY
26139: ST_TO_ADDR
// for j in f do
26140: LD_ADDR_VAR 0 9
26144: PUSH
26145: LD_VAR 0 12
26149: PUSH
26150: FOR_IN
26151: IFFALSE 26224
// if GetBType ( j ) = b_bunker then
26153: LD_VAR 0 9
26157: PPUSH
26158: CALL_OW 266
26162: PUSH
26163: LD_INT 32
26165: EQUAL
26166: IFFALSE 26193
// tmp := Insert ( tmp , 1 , j ) else
26168: LD_ADDR_VAR 0 19
26172: PUSH
26173: LD_VAR 0 19
26177: PPUSH
26178: LD_INT 1
26180: PPUSH
26181: LD_VAR 0 9
26185: PPUSH
26186: CALL_OW 2
26190: ST_TO_ADDR
26191: GO 26222
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26193: LD_ADDR_VAR 0 19
26197: PUSH
26198: LD_VAR 0 19
26202: PPUSH
26203: LD_VAR 0 19
26207: PUSH
26208: LD_INT 1
26210: PLUS
26211: PPUSH
26212: LD_VAR 0 9
26216: PPUSH
26217: CALL_OW 2
26221: ST_TO_ADDR
26222: GO 26150
26224: POP
26225: POP
// if tmp then
26226: LD_VAR 0 19
26230: IFFALSE 26242
// f := tmp ;
26232: LD_ADDR_VAR 0 12
26236: PUSH
26237: LD_VAR 0 19
26241: ST_TO_ADDR
// end ; x := personel [ i ] ;
26242: LD_ADDR_VAR 0 13
26246: PUSH
26247: LD_VAR 0 6
26251: PUSH
26252: LD_VAR 0 8
26256: ARRAY
26257: ST_TO_ADDR
// if x = - 1 then
26258: LD_VAR 0 13
26262: PUSH
26263: LD_INT 1
26265: NEG
26266: EQUAL
26267: IFFALSE 26476
// begin for j in f do
26269: LD_ADDR_VAR 0 9
26273: PUSH
26274: LD_VAR 0 12
26278: PUSH
26279: FOR_IN
26280: IFFALSE 26472
// repeat InitHc ;
26282: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26286: LD_VAR 0 9
26290: PPUSH
26291: CALL_OW 266
26295: PUSH
26296: LD_INT 5
26298: EQUAL
26299: IFFALSE 26369
// begin if UnitsInside ( j ) < 3 then
26301: LD_VAR 0 9
26305: PPUSH
26306: CALL_OW 313
26310: PUSH
26311: LD_INT 3
26313: LESS
26314: IFFALSE 26350
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26316: LD_INT 0
26318: PPUSH
26319: LD_INT 5
26321: PUSH
26322: LD_INT 8
26324: PUSH
26325: LD_INT 9
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: LIST
26332: PUSH
26333: LD_VAR 0 17
26337: ARRAY
26338: PPUSH
26339: LD_VAR 0 4
26343: PPUSH
26344: CALL_OW 380
26348: GO 26367
// PrepareHuman ( false , i , skill ) ;
26350: LD_INT 0
26352: PPUSH
26353: LD_VAR 0 8
26357: PPUSH
26358: LD_VAR 0 4
26362: PPUSH
26363: CALL_OW 380
// end else
26367: GO 26386
// PrepareHuman ( false , i , skill ) ;
26369: LD_INT 0
26371: PPUSH
26372: LD_VAR 0 8
26376: PPUSH
26377: LD_VAR 0 4
26381: PPUSH
26382: CALL_OW 380
// un := CreateHuman ;
26386: LD_ADDR_VAR 0 14
26390: PUSH
26391: CALL_OW 44
26395: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26396: LD_ADDR_VAR 0 7
26400: PUSH
26401: LD_VAR 0 7
26405: PPUSH
26406: LD_INT 1
26408: PPUSH
26409: LD_VAR 0 14
26413: PPUSH
26414: CALL_OW 2
26418: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26419: LD_VAR 0 14
26423: PPUSH
26424: LD_VAR 0 9
26428: PPUSH
26429: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26433: LD_VAR 0 9
26437: PPUSH
26438: CALL_OW 313
26442: PUSH
26443: LD_INT 6
26445: EQUAL
26446: PUSH
26447: LD_VAR 0 9
26451: PPUSH
26452: CALL_OW 266
26456: PUSH
26457: LD_INT 32
26459: PUSH
26460: LD_INT 31
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: IN
26467: OR
26468: IFFALSE 26282
26470: GO 26279
26472: POP
26473: POP
// end else
26474: GO 26856
// for j = 1 to x do
26476: LD_ADDR_VAR 0 9
26480: PUSH
26481: DOUBLE
26482: LD_INT 1
26484: DEC
26485: ST_TO_ADDR
26486: LD_VAR 0 13
26490: PUSH
26491: FOR_TO
26492: IFFALSE 26854
// begin InitHc ;
26494: CALL_OW 19
// if not f then
26498: LD_VAR 0 12
26502: NOT
26503: IFFALSE 26592
// begin PrepareHuman ( false , i , skill ) ;
26505: LD_INT 0
26507: PPUSH
26508: LD_VAR 0 8
26512: PPUSH
26513: LD_VAR 0 4
26517: PPUSH
26518: CALL_OW 380
// un := CreateHuman ;
26522: LD_ADDR_VAR 0 14
26526: PUSH
26527: CALL_OW 44
26531: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26532: LD_ADDR_VAR 0 7
26536: PUSH
26537: LD_VAR 0 7
26541: PPUSH
26542: LD_INT 1
26544: PPUSH
26545: LD_VAR 0 14
26549: PPUSH
26550: CALL_OW 2
26554: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26555: LD_VAR 0 14
26559: PPUSH
26560: LD_VAR 0 1
26564: PPUSH
26565: CALL_OW 250
26569: PPUSH
26570: LD_VAR 0 1
26574: PPUSH
26575: CALL_OW 251
26579: PPUSH
26580: LD_INT 10
26582: PPUSH
26583: LD_INT 0
26585: PPUSH
26586: CALL_OW 50
// continue ;
26590: GO 26491
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26592: LD_VAR 0 12
26596: PUSH
26597: LD_INT 1
26599: ARRAY
26600: PPUSH
26601: CALL_OW 313
26605: PUSH
26606: LD_VAR 0 12
26610: PUSH
26611: LD_INT 1
26613: ARRAY
26614: PPUSH
26615: CALL_OW 266
26619: PUSH
26620: LD_INT 32
26622: PUSH
26623: LD_INT 31
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: IN
26630: AND
26631: PUSH
26632: LD_VAR 0 12
26636: PUSH
26637: LD_INT 1
26639: ARRAY
26640: PPUSH
26641: CALL_OW 313
26645: PUSH
26646: LD_INT 6
26648: EQUAL
26649: OR
26650: IFFALSE 26670
// f := Delete ( f , 1 ) ;
26652: LD_ADDR_VAR 0 12
26656: PUSH
26657: LD_VAR 0 12
26661: PPUSH
26662: LD_INT 1
26664: PPUSH
26665: CALL_OW 3
26669: ST_TO_ADDR
// if not f then
26670: LD_VAR 0 12
26674: NOT
26675: IFFALSE 26693
// begin x := x + 2 ;
26677: LD_ADDR_VAR 0 13
26681: PUSH
26682: LD_VAR 0 13
26686: PUSH
26687: LD_INT 2
26689: PLUS
26690: ST_TO_ADDR
// continue ;
26691: GO 26491
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26693: LD_VAR 0 12
26697: PUSH
26698: LD_INT 1
26700: ARRAY
26701: PPUSH
26702: CALL_OW 266
26706: PUSH
26707: LD_INT 5
26709: EQUAL
26710: IFFALSE 26784
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26712: LD_VAR 0 12
26716: PUSH
26717: LD_INT 1
26719: ARRAY
26720: PPUSH
26721: CALL_OW 313
26725: PUSH
26726: LD_INT 3
26728: LESS
26729: IFFALSE 26765
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26731: LD_INT 0
26733: PPUSH
26734: LD_INT 5
26736: PUSH
26737: LD_INT 8
26739: PUSH
26740: LD_INT 9
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: LIST
26747: PUSH
26748: LD_VAR 0 17
26752: ARRAY
26753: PPUSH
26754: LD_VAR 0 4
26758: PPUSH
26759: CALL_OW 380
26763: GO 26782
// PrepareHuman ( false , i , skill ) ;
26765: LD_INT 0
26767: PPUSH
26768: LD_VAR 0 8
26772: PPUSH
26773: LD_VAR 0 4
26777: PPUSH
26778: CALL_OW 380
// end else
26782: GO 26801
// PrepareHuman ( false , i , skill ) ;
26784: LD_INT 0
26786: PPUSH
26787: LD_VAR 0 8
26791: PPUSH
26792: LD_VAR 0 4
26796: PPUSH
26797: CALL_OW 380
// un := CreateHuman ;
26801: LD_ADDR_VAR 0 14
26805: PUSH
26806: CALL_OW 44
26810: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26811: LD_ADDR_VAR 0 7
26815: PUSH
26816: LD_VAR 0 7
26820: PPUSH
26821: LD_INT 1
26823: PPUSH
26824: LD_VAR 0 14
26828: PPUSH
26829: CALL_OW 2
26833: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26834: LD_VAR 0 14
26838: PPUSH
26839: LD_VAR 0 12
26843: PUSH
26844: LD_INT 1
26846: ARRAY
26847: PPUSH
26848: CALL_OW 52
// end ;
26852: GO 26491
26854: POP
26855: POP
// end ;
26856: GO 25793
26858: POP
26859: POP
// result := result ^ buildings ;
26860: LD_ADDR_VAR 0 7
26864: PUSH
26865: LD_VAR 0 7
26869: PUSH
26870: LD_VAR 0 18
26874: ADD
26875: ST_TO_ADDR
// end else
26876: GO 27019
// begin for i = 1 to personel do
26878: LD_ADDR_VAR 0 8
26882: PUSH
26883: DOUBLE
26884: LD_INT 1
26886: DEC
26887: ST_TO_ADDR
26888: LD_VAR 0 6
26892: PUSH
26893: FOR_TO
26894: IFFALSE 27017
// begin if i > 4 then
26896: LD_VAR 0 8
26900: PUSH
26901: LD_INT 4
26903: GREATER
26904: IFFALSE 26908
// break ;
26906: GO 27017
// x := personel [ i ] ;
26908: LD_ADDR_VAR 0 13
26912: PUSH
26913: LD_VAR 0 6
26917: PUSH
26918: LD_VAR 0 8
26922: ARRAY
26923: ST_TO_ADDR
// if x = - 1 then
26924: LD_VAR 0 13
26928: PUSH
26929: LD_INT 1
26931: NEG
26932: EQUAL
26933: IFFALSE 26937
// continue ;
26935: GO 26893
// PrepareHuman ( false , i , skill ) ;
26937: LD_INT 0
26939: PPUSH
26940: LD_VAR 0 8
26944: PPUSH
26945: LD_VAR 0 4
26949: PPUSH
26950: CALL_OW 380
// un := CreateHuman ;
26954: LD_ADDR_VAR 0 14
26958: PUSH
26959: CALL_OW 44
26963: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26964: LD_VAR 0 14
26968: PPUSH
26969: LD_VAR 0 1
26973: PPUSH
26974: CALL_OW 250
26978: PPUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 251
26988: PPUSH
26989: LD_INT 10
26991: PPUSH
26992: LD_INT 0
26994: PPUSH
26995: CALL_OW 50
// result := result ^ un ;
26999: LD_ADDR_VAR 0 7
27003: PUSH
27004: LD_VAR 0 7
27008: PUSH
27009: LD_VAR 0 14
27013: ADD
27014: ST_TO_ADDR
// end ;
27015: GO 26893
27017: POP
27018: POP
// end ; end ;
27019: LD_VAR 0 7
27023: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27024: LD_INT 0
27026: PPUSH
27027: PPUSH
27028: PPUSH
27029: PPUSH
27030: PPUSH
27031: PPUSH
27032: PPUSH
27033: PPUSH
27034: PPUSH
27035: PPUSH
27036: PPUSH
27037: PPUSH
27038: PPUSH
27039: PPUSH
27040: PPUSH
27041: PPUSH
// result := false ;
27042: LD_ADDR_VAR 0 3
27046: PUSH
27047: LD_INT 0
27049: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27050: LD_VAR 0 1
27054: NOT
27055: PUSH
27056: LD_VAR 0 1
27060: PPUSH
27061: CALL_OW 266
27065: PUSH
27066: LD_INT 32
27068: PUSH
27069: LD_INT 33
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: IN
27076: NOT
27077: OR
27078: IFFALSE 27082
// exit ;
27080: GO 28191
// nat := GetNation ( tower ) ;
27082: LD_ADDR_VAR 0 12
27086: PUSH
27087: LD_VAR 0 1
27091: PPUSH
27092: CALL_OW 248
27096: ST_TO_ADDR
// side := GetSide ( tower ) ;
27097: LD_ADDR_VAR 0 16
27101: PUSH
27102: LD_VAR 0 1
27106: PPUSH
27107: CALL_OW 255
27111: ST_TO_ADDR
// x := GetX ( tower ) ;
27112: LD_ADDR_VAR 0 10
27116: PUSH
27117: LD_VAR 0 1
27121: PPUSH
27122: CALL_OW 250
27126: ST_TO_ADDR
// y := GetY ( tower ) ;
27127: LD_ADDR_VAR 0 11
27131: PUSH
27132: LD_VAR 0 1
27136: PPUSH
27137: CALL_OW 251
27141: ST_TO_ADDR
// if not x or not y then
27142: LD_VAR 0 10
27146: NOT
27147: PUSH
27148: LD_VAR 0 11
27152: NOT
27153: OR
27154: IFFALSE 27158
// exit ;
27156: GO 28191
// weapon := 0 ;
27158: LD_ADDR_VAR 0 18
27162: PUSH
27163: LD_INT 0
27165: ST_TO_ADDR
// fac_list := [ ] ;
27166: LD_ADDR_VAR 0 17
27170: PUSH
27171: EMPTY
27172: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27173: LD_ADDR_VAR 0 6
27177: PUSH
27178: LD_VAR 0 1
27182: PPUSH
27183: CALL_OW 274
27187: PPUSH
27188: LD_VAR 0 2
27192: PPUSH
27193: LD_INT 0
27195: PPUSH
27196: CALL 24762 0 3
27200: PPUSH
27201: LD_INT 30
27203: PUSH
27204: LD_INT 3
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PPUSH
27211: CALL_OW 72
27215: ST_TO_ADDR
// if not factories then
27216: LD_VAR 0 6
27220: NOT
27221: IFFALSE 27225
// exit ;
27223: GO 28191
// for i in factories do
27225: LD_ADDR_VAR 0 8
27229: PUSH
27230: LD_VAR 0 6
27234: PUSH
27235: FOR_IN
27236: IFFALSE 27261
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27238: LD_ADDR_VAR 0 17
27242: PUSH
27243: LD_VAR 0 17
27247: PUSH
27248: LD_VAR 0 8
27252: PPUSH
27253: CALL_OW 478
27257: UNION
27258: ST_TO_ADDR
27259: GO 27235
27261: POP
27262: POP
// if not fac_list then
27263: LD_VAR 0 17
27267: NOT
27268: IFFALSE 27272
// exit ;
27270: GO 28191
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27272: LD_ADDR_VAR 0 5
27276: PUSH
27277: LD_INT 4
27279: PUSH
27280: LD_INT 5
27282: PUSH
27283: LD_INT 9
27285: PUSH
27286: LD_INT 10
27288: PUSH
27289: LD_INT 6
27291: PUSH
27292: LD_INT 7
27294: PUSH
27295: LD_INT 11
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 27
27309: PUSH
27310: LD_INT 28
27312: PUSH
27313: LD_INT 26
27315: PUSH
27316: LD_INT 30
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 43
27327: PUSH
27328: LD_INT 44
27330: PUSH
27331: LD_INT 46
27333: PUSH
27334: LD_INT 45
27336: PUSH
27337: LD_INT 47
27339: PUSH
27340: LD_INT 49
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: LIST
27355: PUSH
27356: LD_VAR 0 12
27360: ARRAY
27361: ST_TO_ADDR
// list := list isect fac_list ;
27362: LD_ADDR_VAR 0 5
27366: PUSH
27367: LD_VAR 0 5
27371: PUSH
27372: LD_VAR 0 17
27376: ISECT
27377: ST_TO_ADDR
// if not list then
27378: LD_VAR 0 5
27382: NOT
27383: IFFALSE 27387
// exit ;
27385: GO 28191
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27387: LD_VAR 0 12
27391: PUSH
27392: LD_INT 3
27394: EQUAL
27395: PUSH
27396: LD_INT 49
27398: PUSH
27399: LD_VAR 0 5
27403: IN
27404: AND
27405: PUSH
27406: LD_INT 31
27408: PPUSH
27409: LD_VAR 0 16
27413: PPUSH
27414: CALL_OW 321
27418: PUSH
27419: LD_INT 2
27421: EQUAL
27422: AND
27423: IFFALSE 27483
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27425: LD_INT 22
27427: PUSH
27428: LD_VAR 0 16
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 35
27439: PUSH
27440: LD_INT 49
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 91
27449: PUSH
27450: LD_VAR 0 1
27454: PUSH
27455: LD_INT 10
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: LIST
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: LIST
27467: PPUSH
27468: CALL_OW 69
27472: NOT
27473: IFFALSE 27483
// weapon := ru_time_lapser ;
27475: LD_ADDR_VAR 0 18
27479: PUSH
27480: LD_INT 49
27482: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27483: LD_VAR 0 12
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: LD_INT 2
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: IN
27498: PUSH
27499: LD_INT 11
27501: PUSH
27502: LD_VAR 0 5
27506: IN
27507: PUSH
27508: LD_INT 30
27510: PUSH
27511: LD_VAR 0 5
27515: IN
27516: OR
27517: AND
27518: PUSH
27519: LD_INT 6
27521: PPUSH
27522: LD_VAR 0 16
27526: PPUSH
27527: CALL_OW 321
27531: PUSH
27532: LD_INT 2
27534: EQUAL
27535: AND
27536: IFFALSE 27701
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27538: LD_INT 22
27540: PUSH
27541: LD_VAR 0 16
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 2
27552: PUSH
27553: LD_INT 35
27555: PUSH
27556: LD_INT 11
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 35
27565: PUSH
27566: LD_INT 30
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 91
27580: PUSH
27581: LD_VAR 0 1
27585: PUSH
27586: LD_INT 18
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: LIST
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: LIST
27598: PPUSH
27599: CALL_OW 69
27603: NOT
27604: PUSH
27605: LD_INT 22
27607: PUSH
27608: LD_VAR 0 16
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 2
27619: PUSH
27620: LD_INT 30
27622: PUSH
27623: LD_INT 32
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 30
27632: PUSH
27633: LD_INT 33
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 91
27647: PUSH
27648: LD_VAR 0 1
27652: PUSH
27653: LD_INT 12
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: LIST
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: LIST
27665: PUSH
27666: EMPTY
27667: LIST
27668: PPUSH
27669: CALL_OW 69
27673: PUSH
27674: LD_INT 2
27676: GREATER
27677: AND
27678: IFFALSE 27701
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27680: LD_ADDR_VAR 0 18
27684: PUSH
27685: LD_INT 11
27687: PUSH
27688: LD_INT 30
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_VAR 0 12
27699: ARRAY
27700: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27701: LD_VAR 0 18
27705: NOT
27706: PUSH
27707: LD_INT 40
27709: PPUSH
27710: LD_VAR 0 16
27714: PPUSH
27715: CALL_OW 321
27719: PUSH
27720: LD_INT 2
27722: EQUAL
27723: AND
27724: PUSH
27725: LD_INT 7
27727: PUSH
27728: LD_VAR 0 5
27732: IN
27733: PUSH
27734: LD_INT 28
27736: PUSH
27737: LD_VAR 0 5
27741: IN
27742: OR
27743: PUSH
27744: LD_INT 45
27746: PUSH
27747: LD_VAR 0 5
27751: IN
27752: OR
27753: AND
27754: IFFALSE 28008
// begin hex := GetHexInfo ( x , y ) ;
27756: LD_ADDR_VAR 0 4
27760: PUSH
27761: LD_VAR 0 10
27765: PPUSH
27766: LD_VAR 0 11
27770: PPUSH
27771: CALL_OW 546
27775: ST_TO_ADDR
// if hex [ 1 ] then
27776: LD_VAR 0 4
27780: PUSH
27781: LD_INT 1
27783: ARRAY
27784: IFFALSE 27788
// exit ;
27786: GO 28191
// height := hex [ 2 ] ;
27788: LD_ADDR_VAR 0 15
27792: PUSH
27793: LD_VAR 0 4
27797: PUSH
27798: LD_INT 2
27800: ARRAY
27801: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27802: LD_ADDR_VAR 0 14
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: LD_INT 2
27812: PUSH
27813: LD_INT 3
27815: PUSH
27816: LD_INT 5
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: ST_TO_ADDR
// for i in tmp do
27825: LD_ADDR_VAR 0 8
27829: PUSH
27830: LD_VAR 0 14
27834: PUSH
27835: FOR_IN
27836: IFFALSE 28006
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27838: LD_ADDR_VAR 0 9
27842: PUSH
27843: LD_VAR 0 10
27847: PPUSH
27848: LD_VAR 0 8
27852: PPUSH
27853: LD_INT 5
27855: PPUSH
27856: CALL_OW 272
27860: PUSH
27861: LD_VAR 0 11
27865: PPUSH
27866: LD_VAR 0 8
27870: PPUSH
27871: LD_INT 5
27873: PPUSH
27874: CALL_OW 273
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27883: LD_VAR 0 9
27887: PUSH
27888: LD_INT 1
27890: ARRAY
27891: PPUSH
27892: LD_VAR 0 9
27896: PUSH
27897: LD_INT 2
27899: ARRAY
27900: PPUSH
27901: CALL_OW 488
27905: IFFALSE 28004
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27907: LD_ADDR_VAR 0 4
27911: PUSH
27912: LD_VAR 0 9
27916: PUSH
27917: LD_INT 1
27919: ARRAY
27920: PPUSH
27921: LD_VAR 0 9
27925: PUSH
27926: LD_INT 2
27928: ARRAY
27929: PPUSH
27930: CALL_OW 546
27934: ST_TO_ADDR
// if hex [ 1 ] then
27935: LD_VAR 0 4
27939: PUSH
27940: LD_INT 1
27942: ARRAY
27943: IFFALSE 27947
// continue ;
27945: GO 27835
// h := hex [ 2 ] ;
27947: LD_ADDR_VAR 0 13
27951: PUSH
27952: LD_VAR 0 4
27956: PUSH
27957: LD_INT 2
27959: ARRAY
27960: ST_TO_ADDR
// if h + 7 < height then
27961: LD_VAR 0 13
27965: PUSH
27966: LD_INT 7
27968: PLUS
27969: PUSH
27970: LD_VAR 0 15
27974: LESS
27975: IFFALSE 28004
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27977: LD_ADDR_VAR 0 18
27981: PUSH
27982: LD_INT 7
27984: PUSH
27985: LD_INT 28
27987: PUSH
27988: LD_INT 45
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: LIST
27995: PUSH
27996: LD_VAR 0 12
28000: ARRAY
28001: ST_TO_ADDR
// break ;
28002: GO 28006
// end ; end ; end ;
28004: GO 27835
28006: POP
28007: POP
// end ; if not weapon then
28008: LD_VAR 0 18
28012: NOT
28013: IFFALSE 28073
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28015: LD_ADDR_VAR 0 5
28019: PUSH
28020: LD_VAR 0 5
28024: PUSH
28025: LD_INT 11
28027: PUSH
28028: LD_INT 30
28030: PUSH
28031: LD_INT 49
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: LIST
28038: DIFF
28039: ST_TO_ADDR
// if not list then
28040: LD_VAR 0 5
28044: NOT
28045: IFFALSE 28049
// exit ;
28047: GO 28191
// weapon := list [ rand ( 1 , list ) ] ;
28049: LD_ADDR_VAR 0 18
28053: PUSH
28054: LD_VAR 0 5
28058: PUSH
28059: LD_INT 1
28061: PPUSH
28062: LD_VAR 0 5
28066: PPUSH
28067: CALL_OW 12
28071: ARRAY
28072: ST_TO_ADDR
// end ; if weapon then
28073: LD_VAR 0 18
28077: IFFALSE 28191
// begin tmp := CostOfWeapon ( weapon ) ;
28079: LD_ADDR_VAR 0 14
28083: PUSH
28084: LD_VAR 0 18
28088: PPUSH
28089: CALL_OW 451
28093: ST_TO_ADDR
// j := GetBase ( tower ) ;
28094: LD_ADDR_VAR 0 9
28098: PUSH
28099: LD_VAR 0 1
28103: PPUSH
28104: CALL_OW 274
28108: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28109: LD_VAR 0 9
28113: PPUSH
28114: LD_INT 1
28116: PPUSH
28117: CALL_OW 275
28121: PUSH
28122: LD_VAR 0 14
28126: PUSH
28127: LD_INT 1
28129: ARRAY
28130: GREATEREQUAL
28131: PUSH
28132: LD_VAR 0 9
28136: PPUSH
28137: LD_INT 2
28139: PPUSH
28140: CALL_OW 275
28144: PUSH
28145: LD_VAR 0 14
28149: PUSH
28150: LD_INT 2
28152: ARRAY
28153: GREATEREQUAL
28154: AND
28155: PUSH
28156: LD_VAR 0 9
28160: PPUSH
28161: LD_INT 3
28163: PPUSH
28164: CALL_OW 275
28168: PUSH
28169: LD_VAR 0 14
28173: PUSH
28174: LD_INT 3
28176: ARRAY
28177: GREATEREQUAL
28178: AND
28179: IFFALSE 28191
// result := weapon ;
28181: LD_ADDR_VAR 0 3
28185: PUSH
28186: LD_VAR 0 18
28190: ST_TO_ADDR
// end ; end ;
28191: LD_VAR 0 3
28195: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28196: LD_INT 0
28198: PPUSH
28199: PPUSH
// result := true ;
28200: LD_ADDR_VAR 0 3
28204: PUSH
28205: LD_INT 1
28207: ST_TO_ADDR
// if array1 = array2 then
28208: LD_VAR 0 1
28212: PUSH
28213: LD_VAR 0 2
28217: EQUAL
28218: IFFALSE 28278
// begin for i = 1 to array1 do
28220: LD_ADDR_VAR 0 4
28224: PUSH
28225: DOUBLE
28226: LD_INT 1
28228: DEC
28229: ST_TO_ADDR
28230: LD_VAR 0 1
28234: PUSH
28235: FOR_TO
28236: IFFALSE 28274
// if array1 [ i ] <> array2 [ i ] then
28238: LD_VAR 0 1
28242: PUSH
28243: LD_VAR 0 4
28247: ARRAY
28248: PUSH
28249: LD_VAR 0 2
28253: PUSH
28254: LD_VAR 0 4
28258: ARRAY
28259: NONEQUAL
28260: IFFALSE 28272
// begin result := false ;
28262: LD_ADDR_VAR 0 3
28266: PUSH
28267: LD_INT 0
28269: ST_TO_ADDR
// break ;
28270: GO 28274
// end ;
28272: GO 28235
28274: POP
28275: POP
// end else
28276: GO 28286
// result := false ;
28278: LD_ADDR_VAR 0 3
28282: PUSH
28283: LD_INT 0
28285: ST_TO_ADDR
// end ;
28286: LD_VAR 0 3
28290: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28291: LD_INT 0
28293: PPUSH
28294: PPUSH
// if not array1 or not array2 then
28295: LD_VAR 0 1
28299: NOT
28300: PUSH
28301: LD_VAR 0 2
28305: NOT
28306: OR
28307: IFFALSE 28311
// exit ;
28309: GO 28375
// result := true ;
28311: LD_ADDR_VAR 0 3
28315: PUSH
28316: LD_INT 1
28318: ST_TO_ADDR
// for i = 1 to array1 do
28319: LD_ADDR_VAR 0 4
28323: PUSH
28324: DOUBLE
28325: LD_INT 1
28327: DEC
28328: ST_TO_ADDR
28329: LD_VAR 0 1
28333: PUSH
28334: FOR_TO
28335: IFFALSE 28373
// if array1 [ i ] <> array2 [ i ] then
28337: LD_VAR 0 1
28341: PUSH
28342: LD_VAR 0 4
28346: ARRAY
28347: PUSH
28348: LD_VAR 0 2
28352: PUSH
28353: LD_VAR 0 4
28357: ARRAY
28358: NONEQUAL
28359: IFFALSE 28371
// begin result := false ;
28361: LD_ADDR_VAR 0 3
28365: PUSH
28366: LD_INT 0
28368: ST_TO_ADDR
// break ;
28369: GO 28373
// end ;
28371: GO 28334
28373: POP
28374: POP
// end ;
28375: LD_VAR 0 3
28379: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28380: LD_INT 0
28382: PPUSH
28383: PPUSH
28384: PPUSH
// pom := GetBase ( fac ) ;
28385: LD_ADDR_VAR 0 5
28389: PUSH
28390: LD_VAR 0 1
28394: PPUSH
28395: CALL_OW 274
28399: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28400: LD_ADDR_VAR 0 4
28404: PUSH
28405: LD_VAR 0 2
28409: PUSH
28410: LD_INT 1
28412: ARRAY
28413: PPUSH
28414: LD_VAR 0 2
28418: PUSH
28419: LD_INT 2
28421: ARRAY
28422: PPUSH
28423: LD_VAR 0 2
28427: PUSH
28428: LD_INT 3
28430: ARRAY
28431: PPUSH
28432: LD_VAR 0 2
28436: PUSH
28437: LD_INT 4
28439: ARRAY
28440: PPUSH
28441: CALL_OW 449
28445: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28446: LD_ADDR_VAR 0 3
28450: PUSH
28451: LD_VAR 0 5
28455: PPUSH
28456: LD_INT 1
28458: PPUSH
28459: CALL_OW 275
28463: PUSH
28464: LD_VAR 0 4
28468: PUSH
28469: LD_INT 1
28471: ARRAY
28472: GREATEREQUAL
28473: PUSH
28474: LD_VAR 0 5
28478: PPUSH
28479: LD_INT 2
28481: PPUSH
28482: CALL_OW 275
28486: PUSH
28487: LD_VAR 0 4
28491: PUSH
28492: LD_INT 2
28494: ARRAY
28495: GREATEREQUAL
28496: AND
28497: PUSH
28498: LD_VAR 0 5
28502: PPUSH
28503: LD_INT 3
28505: PPUSH
28506: CALL_OW 275
28510: PUSH
28511: LD_VAR 0 4
28515: PUSH
28516: LD_INT 3
28518: ARRAY
28519: GREATEREQUAL
28520: AND
28521: ST_TO_ADDR
// end ;
28522: LD_VAR 0 3
28526: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28527: LD_INT 0
28529: PPUSH
28530: PPUSH
28531: PPUSH
28532: PPUSH
// pom := GetBase ( building ) ;
28533: LD_ADDR_VAR 0 3
28537: PUSH
28538: LD_VAR 0 1
28542: PPUSH
28543: CALL_OW 274
28547: ST_TO_ADDR
// if not pom then
28548: LD_VAR 0 3
28552: NOT
28553: IFFALSE 28557
// exit ;
28555: GO 28727
// btype := GetBType ( building ) ;
28557: LD_ADDR_VAR 0 5
28561: PUSH
28562: LD_VAR 0 1
28566: PPUSH
28567: CALL_OW 266
28571: ST_TO_ADDR
// if btype = b_armoury then
28572: LD_VAR 0 5
28576: PUSH
28577: LD_INT 4
28579: EQUAL
28580: IFFALSE 28590
// btype := b_barracks ;
28582: LD_ADDR_VAR 0 5
28586: PUSH
28587: LD_INT 5
28589: ST_TO_ADDR
// if btype = b_depot then
28590: LD_VAR 0 5
28594: PUSH
28595: LD_INT 0
28597: EQUAL
28598: IFFALSE 28608
// btype := b_warehouse ;
28600: LD_ADDR_VAR 0 5
28604: PUSH
28605: LD_INT 1
28607: ST_TO_ADDR
// if btype = b_workshop then
28608: LD_VAR 0 5
28612: PUSH
28613: LD_INT 2
28615: EQUAL
28616: IFFALSE 28626
// btype := b_factory ;
28618: LD_ADDR_VAR 0 5
28622: PUSH
28623: LD_INT 3
28625: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28626: LD_ADDR_VAR 0 4
28630: PUSH
28631: LD_VAR 0 5
28635: PPUSH
28636: LD_VAR 0 1
28640: PPUSH
28641: CALL_OW 248
28645: PPUSH
28646: CALL_OW 450
28650: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28651: LD_ADDR_VAR 0 2
28655: PUSH
28656: LD_VAR 0 3
28660: PPUSH
28661: LD_INT 1
28663: PPUSH
28664: CALL_OW 275
28668: PUSH
28669: LD_VAR 0 4
28673: PUSH
28674: LD_INT 1
28676: ARRAY
28677: GREATEREQUAL
28678: PUSH
28679: LD_VAR 0 3
28683: PPUSH
28684: LD_INT 2
28686: PPUSH
28687: CALL_OW 275
28691: PUSH
28692: LD_VAR 0 4
28696: PUSH
28697: LD_INT 2
28699: ARRAY
28700: GREATEREQUAL
28701: AND
28702: PUSH
28703: LD_VAR 0 3
28707: PPUSH
28708: LD_INT 3
28710: PPUSH
28711: CALL_OW 275
28715: PUSH
28716: LD_VAR 0 4
28720: PUSH
28721: LD_INT 3
28723: ARRAY
28724: GREATEREQUAL
28725: AND
28726: ST_TO_ADDR
// end ;
28727: LD_VAR 0 2
28731: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28732: LD_INT 0
28734: PPUSH
28735: PPUSH
28736: PPUSH
// pom := GetBase ( building ) ;
28737: LD_ADDR_VAR 0 4
28741: PUSH
28742: LD_VAR 0 1
28746: PPUSH
28747: CALL_OW 274
28751: ST_TO_ADDR
// if not pom then
28752: LD_VAR 0 4
28756: NOT
28757: IFFALSE 28761
// exit ;
28759: GO 28862
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28761: LD_ADDR_VAR 0 5
28765: PUSH
28766: LD_VAR 0 2
28770: PPUSH
28771: LD_VAR 0 1
28775: PPUSH
28776: CALL_OW 248
28780: PPUSH
28781: CALL_OW 450
28785: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28786: LD_ADDR_VAR 0 3
28790: PUSH
28791: LD_VAR 0 4
28795: PPUSH
28796: LD_INT 1
28798: PPUSH
28799: CALL_OW 275
28803: PUSH
28804: LD_VAR 0 5
28808: PUSH
28809: LD_INT 1
28811: ARRAY
28812: GREATEREQUAL
28813: PUSH
28814: LD_VAR 0 4
28818: PPUSH
28819: LD_INT 2
28821: PPUSH
28822: CALL_OW 275
28826: PUSH
28827: LD_VAR 0 5
28831: PUSH
28832: LD_INT 2
28834: ARRAY
28835: GREATEREQUAL
28836: AND
28837: PUSH
28838: LD_VAR 0 4
28842: PPUSH
28843: LD_INT 3
28845: PPUSH
28846: CALL_OW 275
28850: PUSH
28851: LD_VAR 0 5
28855: PUSH
28856: LD_INT 3
28858: ARRAY
28859: GREATEREQUAL
28860: AND
28861: ST_TO_ADDR
// end ;
28862: LD_VAR 0 3
28866: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28867: LD_INT 0
28869: PPUSH
28870: PPUSH
28871: PPUSH
28872: PPUSH
28873: PPUSH
28874: PPUSH
28875: PPUSH
28876: PPUSH
28877: PPUSH
28878: PPUSH
28879: PPUSH
// result := false ;
28880: LD_ADDR_VAR 0 8
28884: PUSH
28885: LD_INT 0
28887: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28888: LD_VAR 0 5
28892: NOT
28893: PUSH
28894: LD_VAR 0 1
28898: NOT
28899: OR
28900: PUSH
28901: LD_VAR 0 2
28905: NOT
28906: OR
28907: PUSH
28908: LD_VAR 0 3
28912: NOT
28913: OR
28914: IFFALSE 28918
// exit ;
28916: GO 29732
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28918: LD_ADDR_VAR 0 14
28922: PUSH
28923: LD_VAR 0 1
28927: PPUSH
28928: LD_VAR 0 2
28932: PPUSH
28933: LD_VAR 0 3
28937: PPUSH
28938: LD_VAR 0 4
28942: PPUSH
28943: LD_VAR 0 5
28947: PUSH
28948: LD_INT 1
28950: ARRAY
28951: PPUSH
28952: CALL_OW 248
28956: PPUSH
28957: LD_INT 0
28959: PPUSH
28960: CALL 30985 0 6
28964: ST_TO_ADDR
// if not hexes then
28965: LD_VAR 0 14
28969: NOT
28970: IFFALSE 28974
// exit ;
28972: GO 29732
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28974: LD_ADDR_VAR 0 17
28978: PUSH
28979: LD_VAR 0 5
28983: PPUSH
28984: LD_INT 22
28986: PUSH
28987: LD_VAR 0 13
28991: PPUSH
28992: CALL_OW 255
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 2
29003: PUSH
29004: LD_INT 30
29006: PUSH
29007: LD_INT 0
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 30
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: LIST
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PPUSH
29033: CALL_OW 72
29037: ST_TO_ADDR
// for i = 1 to hexes do
29038: LD_ADDR_VAR 0 9
29042: PUSH
29043: DOUBLE
29044: LD_INT 1
29046: DEC
29047: ST_TO_ADDR
29048: LD_VAR 0 14
29052: PUSH
29053: FOR_TO
29054: IFFALSE 29730
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29056: LD_ADDR_VAR 0 13
29060: PUSH
29061: LD_VAR 0 14
29065: PUSH
29066: LD_VAR 0 9
29070: ARRAY
29071: PUSH
29072: LD_INT 1
29074: ARRAY
29075: PPUSH
29076: LD_VAR 0 14
29080: PUSH
29081: LD_VAR 0 9
29085: ARRAY
29086: PUSH
29087: LD_INT 2
29089: ARRAY
29090: PPUSH
29091: CALL_OW 428
29095: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29096: LD_VAR 0 14
29100: PUSH
29101: LD_VAR 0 9
29105: ARRAY
29106: PUSH
29107: LD_INT 1
29109: ARRAY
29110: PPUSH
29111: LD_VAR 0 14
29115: PUSH
29116: LD_VAR 0 9
29120: ARRAY
29121: PUSH
29122: LD_INT 2
29124: ARRAY
29125: PPUSH
29126: CALL_OW 351
29130: PUSH
29131: LD_VAR 0 14
29135: PUSH
29136: LD_VAR 0 9
29140: ARRAY
29141: PUSH
29142: LD_INT 1
29144: ARRAY
29145: PPUSH
29146: LD_VAR 0 14
29150: PUSH
29151: LD_VAR 0 9
29155: ARRAY
29156: PUSH
29157: LD_INT 2
29159: ARRAY
29160: PPUSH
29161: CALL_OW 488
29165: NOT
29166: OR
29167: PUSH
29168: LD_VAR 0 13
29172: PPUSH
29173: CALL_OW 247
29177: PUSH
29178: LD_INT 3
29180: EQUAL
29181: OR
29182: IFFALSE 29188
// exit ;
29184: POP
29185: POP
29186: GO 29732
// if not tmp then
29188: LD_VAR 0 13
29192: NOT
29193: IFFALSE 29197
// continue ;
29195: GO 29053
// result := true ;
29197: LD_ADDR_VAR 0 8
29201: PUSH
29202: LD_INT 1
29204: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29205: LD_VAR 0 6
29209: PUSH
29210: LD_VAR 0 13
29214: PPUSH
29215: CALL_OW 247
29219: PUSH
29220: LD_INT 2
29222: EQUAL
29223: AND
29224: PUSH
29225: LD_VAR 0 13
29229: PPUSH
29230: CALL_OW 263
29234: PUSH
29235: LD_INT 1
29237: EQUAL
29238: AND
29239: IFFALSE 29403
// begin if IsDrivenBy ( tmp ) then
29241: LD_VAR 0 13
29245: PPUSH
29246: CALL_OW 311
29250: IFFALSE 29254
// continue ;
29252: GO 29053
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29254: LD_VAR 0 6
29258: PPUSH
29259: LD_INT 3
29261: PUSH
29262: LD_INT 60
29264: PUSH
29265: EMPTY
29266: LIST
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 3
29274: PUSH
29275: LD_INT 55
29277: PUSH
29278: EMPTY
29279: LIST
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PPUSH
29289: CALL_OW 72
29293: IFFALSE 29401
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29295: LD_ADDR_VAR 0 18
29299: PUSH
29300: LD_VAR 0 6
29304: PPUSH
29305: LD_INT 3
29307: PUSH
29308: LD_INT 60
29310: PUSH
29311: EMPTY
29312: LIST
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 3
29320: PUSH
29321: LD_INT 55
29323: PUSH
29324: EMPTY
29325: LIST
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PPUSH
29335: CALL_OW 72
29339: PUSH
29340: LD_INT 1
29342: ARRAY
29343: ST_TO_ADDR
// if IsInUnit ( driver ) then
29344: LD_VAR 0 18
29348: PPUSH
29349: CALL_OW 310
29353: IFFALSE 29364
// ComExit ( driver ) ;
29355: LD_VAR 0 18
29359: PPUSH
29360: CALL 54786 0 1
// AddComEnterUnit ( driver , tmp ) ;
29364: LD_VAR 0 18
29368: PPUSH
29369: LD_VAR 0 13
29373: PPUSH
29374: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29378: LD_VAR 0 18
29382: PPUSH
29383: LD_VAR 0 7
29387: PPUSH
29388: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29392: LD_VAR 0 18
29396: PPUSH
29397: CALL_OW 181
// end ; continue ;
29401: GO 29053
// end ; if not cleaners or not tmp in cleaners then
29403: LD_VAR 0 6
29407: NOT
29408: PUSH
29409: LD_VAR 0 13
29413: PUSH
29414: LD_VAR 0 6
29418: IN
29419: NOT
29420: OR
29421: IFFALSE 29728
// begin if dep then
29423: LD_VAR 0 17
29427: IFFALSE 29563
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29429: LD_ADDR_VAR 0 16
29433: PUSH
29434: LD_VAR 0 17
29438: PUSH
29439: LD_INT 1
29441: ARRAY
29442: PPUSH
29443: CALL_OW 250
29447: PPUSH
29448: LD_VAR 0 17
29452: PUSH
29453: LD_INT 1
29455: ARRAY
29456: PPUSH
29457: CALL_OW 254
29461: PPUSH
29462: LD_INT 5
29464: PPUSH
29465: CALL_OW 272
29469: PUSH
29470: LD_VAR 0 17
29474: PUSH
29475: LD_INT 1
29477: ARRAY
29478: PPUSH
29479: CALL_OW 251
29483: PPUSH
29484: LD_VAR 0 17
29488: PUSH
29489: LD_INT 1
29491: ARRAY
29492: PPUSH
29493: CALL_OW 254
29497: PPUSH
29498: LD_INT 5
29500: PPUSH
29501: CALL_OW 273
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29510: LD_VAR 0 16
29514: PUSH
29515: LD_INT 1
29517: ARRAY
29518: PPUSH
29519: LD_VAR 0 16
29523: PUSH
29524: LD_INT 2
29526: ARRAY
29527: PPUSH
29528: CALL_OW 488
29532: IFFALSE 29563
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29534: LD_VAR 0 13
29538: PPUSH
29539: LD_VAR 0 16
29543: PUSH
29544: LD_INT 1
29546: ARRAY
29547: PPUSH
29548: LD_VAR 0 16
29552: PUSH
29553: LD_INT 2
29555: ARRAY
29556: PPUSH
29557: CALL_OW 111
// continue ;
29561: GO 29053
// end ; end ; r := GetDir ( tmp ) ;
29563: LD_ADDR_VAR 0 15
29567: PUSH
29568: LD_VAR 0 13
29572: PPUSH
29573: CALL_OW 254
29577: ST_TO_ADDR
// if r = 5 then
29578: LD_VAR 0 15
29582: PUSH
29583: LD_INT 5
29585: EQUAL
29586: IFFALSE 29596
// r := 0 ;
29588: LD_ADDR_VAR 0 15
29592: PUSH
29593: LD_INT 0
29595: ST_TO_ADDR
// for j = r to 5 do
29596: LD_ADDR_VAR 0 10
29600: PUSH
29601: DOUBLE
29602: LD_VAR 0 15
29606: DEC
29607: ST_TO_ADDR
29608: LD_INT 5
29610: PUSH
29611: FOR_TO
29612: IFFALSE 29726
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29614: LD_ADDR_VAR 0 11
29618: PUSH
29619: LD_VAR 0 13
29623: PPUSH
29624: CALL_OW 250
29628: PPUSH
29629: LD_VAR 0 10
29633: PPUSH
29634: LD_INT 2
29636: PPUSH
29637: CALL_OW 272
29641: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29642: LD_ADDR_VAR 0 12
29646: PUSH
29647: LD_VAR 0 13
29651: PPUSH
29652: CALL_OW 251
29656: PPUSH
29657: LD_VAR 0 10
29661: PPUSH
29662: LD_INT 2
29664: PPUSH
29665: CALL_OW 273
29669: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29670: LD_VAR 0 11
29674: PPUSH
29675: LD_VAR 0 12
29679: PPUSH
29680: CALL_OW 488
29684: PUSH
29685: LD_VAR 0 11
29689: PPUSH
29690: LD_VAR 0 12
29694: PPUSH
29695: CALL_OW 428
29699: NOT
29700: AND
29701: IFFALSE 29724
// begin ComMoveXY ( tmp , _x , _y ) ;
29703: LD_VAR 0 13
29707: PPUSH
29708: LD_VAR 0 11
29712: PPUSH
29713: LD_VAR 0 12
29717: PPUSH
29718: CALL_OW 111
// break ;
29722: GO 29726
// end ; end ;
29724: GO 29611
29726: POP
29727: POP
// end ; end ;
29728: GO 29053
29730: POP
29731: POP
// end ;
29732: LD_VAR 0 8
29736: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29737: LD_INT 0
29739: PPUSH
// result := true ;
29740: LD_ADDR_VAR 0 3
29744: PUSH
29745: LD_INT 1
29747: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29748: LD_VAR 0 2
29752: PUSH
29753: LD_INT 24
29755: DOUBLE
29756: EQUAL
29757: IFTRUE 29767
29759: LD_INT 33
29761: DOUBLE
29762: EQUAL
29763: IFTRUE 29767
29765: GO 29792
29767: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29768: LD_ADDR_VAR 0 3
29772: PUSH
29773: LD_INT 32
29775: PPUSH
29776: LD_VAR 0 1
29780: PPUSH
29781: CALL_OW 321
29785: PUSH
29786: LD_INT 2
29788: EQUAL
29789: ST_TO_ADDR
29790: GO 30108
29792: LD_INT 20
29794: DOUBLE
29795: EQUAL
29796: IFTRUE 29800
29798: GO 29825
29800: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29801: LD_ADDR_VAR 0 3
29805: PUSH
29806: LD_INT 6
29808: PPUSH
29809: LD_VAR 0 1
29813: PPUSH
29814: CALL_OW 321
29818: PUSH
29819: LD_INT 2
29821: EQUAL
29822: ST_TO_ADDR
29823: GO 30108
29825: LD_INT 22
29827: DOUBLE
29828: EQUAL
29829: IFTRUE 29839
29831: LD_INT 36
29833: DOUBLE
29834: EQUAL
29835: IFTRUE 29839
29837: GO 29864
29839: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29840: LD_ADDR_VAR 0 3
29844: PUSH
29845: LD_INT 15
29847: PPUSH
29848: LD_VAR 0 1
29852: PPUSH
29853: CALL_OW 321
29857: PUSH
29858: LD_INT 2
29860: EQUAL
29861: ST_TO_ADDR
29862: GO 30108
29864: LD_INT 30
29866: DOUBLE
29867: EQUAL
29868: IFTRUE 29872
29870: GO 29897
29872: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29873: LD_ADDR_VAR 0 3
29877: PUSH
29878: LD_INT 20
29880: PPUSH
29881: LD_VAR 0 1
29885: PPUSH
29886: CALL_OW 321
29890: PUSH
29891: LD_INT 2
29893: EQUAL
29894: ST_TO_ADDR
29895: GO 30108
29897: LD_INT 28
29899: DOUBLE
29900: EQUAL
29901: IFTRUE 29911
29903: LD_INT 21
29905: DOUBLE
29906: EQUAL
29907: IFTRUE 29911
29909: GO 29936
29911: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29912: LD_ADDR_VAR 0 3
29916: PUSH
29917: LD_INT 21
29919: PPUSH
29920: LD_VAR 0 1
29924: PPUSH
29925: CALL_OW 321
29929: PUSH
29930: LD_INT 2
29932: EQUAL
29933: ST_TO_ADDR
29934: GO 30108
29936: LD_INT 16
29938: DOUBLE
29939: EQUAL
29940: IFTRUE 29944
29942: GO 29969
29944: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29945: LD_ADDR_VAR 0 3
29949: PUSH
29950: LD_INT 84
29952: PPUSH
29953: LD_VAR 0 1
29957: PPUSH
29958: CALL_OW 321
29962: PUSH
29963: LD_INT 2
29965: EQUAL
29966: ST_TO_ADDR
29967: GO 30108
29969: LD_INT 19
29971: DOUBLE
29972: EQUAL
29973: IFTRUE 29983
29975: LD_INT 23
29977: DOUBLE
29978: EQUAL
29979: IFTRUE 29983
29981: GO 30008
29983: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29984: LD_ADDR_VAR 0 3
29988: PUSH
29989: LD_INT 83
29991: PPUSH
29992: LD_VAR 0 1
29996: PPUSH
29997: CALL_OW 321
30001: PUSH
30002: LD_INT 2
30004: EQUAL
30005: ST_TO_ADDR
30006: GO 30108
30008: LD_INT 17
30010: DOUBLE
30011: EQUAL
30012: IFTRUE 30016
30014: GO 30041
30016: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30017: LD_ADDR_VAR 0 3
30021: PUSH
30022: LD_INT 39
30024: PPUSH
30025: LD_VAR 0 1
30029: PPUSH
30030: CALL_OW 321
30034: PUSH
30035: LD_INT 2
30037: EQUAL
30038: ST_TO_ADDR
30039: GO 30108
30041: LD_INT 18
30043: DOUBLE
30044: EQUAL
30045: IFTRUE 30049
30047: GO 30074
30049: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30050: LD_ADDR_VAR 0 3
30054: PUSH
30055: LD_INT 40
30057: PPUSH
30058: LD_VAR 0 1
30062: PPUSH
30063: CALL_OW 321
30067: PUSH
30068: LD_INT 2
30070: EQUAL
30071: ST_TO_ADDR
30072: GO 30108
30074: LD_INT 27
30076: DOUBLE
30077: EQUAL
30078: IFTRUE 30082
30080: GO 30107
30082: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30083: LD_ADDR_VAR 0 3
30087: PUSH
30088: LD_INT 35
30090: PPUSH
30091: LD_VAR 0 1
30095: PPUSH
30096: CALL_OW 321
30100: PUSH
30101: LD_INT 2
30103: EQUAL
30104: ST_TO_ADDR
30105: GO 30108
30107: POP
// end ;
30108: LD_VAR 0 3
30112: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30113: LD_INT 0
30115: PPUSH
30116: PPUSH
30117: PPUSH
30118: PPUSH
30119: PPUSH
30120: PPUSH
30121: PPUSH
30122: PPUSH
30123: PPUSH
30124: PPUSH
30125: PPUSH
// result := false ;
30126: LD_ADDR_VAR 0 6
30130: PUSH
30131: LD_INT 0
30133: ST_TO_ADDR
// if btype = b_depot then
30134: LD_VAR 0 2
30138: PUSH
30139: LD_INT 0
30141: EQUAL
30142: IFFALSE 30154
// begin result := true ;
30144: LD_ADDR_VAR 0 6
30148: PUSH
30149: LD_INT 1
30151: ST_TO_ADDR
// exit ;
30152: GO 30980
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30154: LD_VAR 0 1
30158: NOT
30159: PUSH
30160: LD_VAR 0 1
30164: PPUSH
30165: CALL_OW 266
30169: PUSH
30170: LD_INT 0
30172: PUSH
30173: LD_INT 1
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: IN
30180: NOT
30181: OR
30182: PUSH
30183: LD_VAR 0 2
30187: NOT
30188: OR
30189: PUSH
30190: LD_VAR 0 5
30194: PUSH
30195: LD_INT 0
30197: PUSH
30198: LD_INT 1
30200: PUSH
30201: LD_INT 2
30203: PUSH
30204: LD_INT 3
30206: PUSH
30207: LD_INT 4
30209: PUSH
30210: LD_INT 5
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: IN
30221: NOT
30222: OR
30223: PUSH
30224: LD_VAR 0 3
30228: PPUSH
30229: LD_VAR 0 4
30233: PPUSH
30234: CALL_OW 488
30238: NOT
30239: OR
30240: IFFALSE 30244
// exit ;
30242: GO 30980
// side := GetSide ( depot ) ;
30244: LD_ADDR_VAR 0 9
30248: PUSH
30249: LD_VAR 0 1
30253: PPUSH
30254: CALL_OW 255
30258: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30259: LD_VAR 0 9
30263: PPUSH
30264: LD_VAR 0 2
30268: PPUSH
30269: CALL 29737 0 2
30273: NOT
30274: IFFALSE 30278
// exit ;
30276: GO 30980
// pom := GetBase ( depot ) ;
30278: LD_ADDR_VAR 0 10
30282: PUSH
30283: LD_VAR 0 1
30287: PPUSH
30288: CALL_OW 274
30292: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30293: LD_ADDR_VAR 0 11
30297: PUSH
30298: LD_VAR 0 2
30302: PPUSH
30303: LD_VAR 0 1
30307: PPUSH
30308: CALL_OW 248
30312: PPUSH
30313: CALL_OW 450
30317: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30318: LD_VAR 0 10
30322: PPUSH
30323: LD_INT 1
30325: PPUSH
30326: CALL_OW 275
30330: PUSH
30331: LD_VAR 0 11
30335: PUSH
30336: LD_INT 1
30338: ARRAY
30339: GREATEREQUAL
30340: PUSH
30341: LD_VAR 0 10
30345: PPUSH
30346: LD_INT 2
30348: PPUSH
30349: CALL_OW 275
30353: PUSH
30354: LD_VAR 0 11
30358: PUSH
30359: LD_INT 2
30361: ARRAY
30362: GREATEREQUAL
30363: AND
30364: PUSH
30365: LD_VAR 0 10
30369: PPUSH
30370: LD_INT 3
30372: PPUSH
30373: CALL_OW 275
30377: PUSH
30378: LD_VAR 0 11
30382: PUSH
30383: LD_INT 3
30385: ARRAY
30386: GREATEREQUAL
30387: AND
30388: NOT
30389: IFFALSE 30393
// exit ;
30391: GO 30980
// if GetBType ( depot ) = b_depot then
30393: LD_VAR 0 1
30397: PPUSH
30398: CALL_OW 266
30402: PUSH
30403: LD_INT 0
30405: EQUAL
30406: IFFALSE 30418
// dist := 28 else
30408: LD_ADDR_VAR 0 14
30412: PUSH
30413: LD_INT 28
30415: ST_TO_ADDR
30416: GO 30426
// dist := 36 ;
30418: LD_ADDR_VAR 0 14
30422: PUSH
30423: LD_INT 36
30425: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30426: LD_VAR 0 1
30430: PPUSH
30431: LD_VAR 0 3
30435: PPUSH
30436: LD_VAR 0 4
30440: PPUSH
30441: CALL_OW 297
30445: PUSH
30446: LD_VAR 0 14
30450: GREATER
30451: IFFALSE 30455
// exit ;
30453: GO 30980
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30455: LD_ADDR_VAR 0 12
30459: PUSH
30460: LD_VAR 0 2
30464: PPUSH
30465: LD_VAR 0 3
30469: PPUSH
30470: LD_VAR 0 4
30474: PPUSH
30475: LD_VAR 0 5
30479: PPUSH
30480: LD_VAR 0 1
30484: PPUSH
30485: CALL_OW 248
30489: PPUSH
30490: LD_INT 0
30492: PPUSH
30493: CALL 30985 0 6
30497: ST_TO_ADDR
// if not hexes then
30498: LD_VAR 0 12
30502: NOT
30503: IFFALSE 30507
// exit ;
30505: GO 30980
// hex := GetHexInfo ( x , y ) ;
30507: LD_ADDR_VAR 0 15
30511: PUSH
30512: LD_VAR 0 3
30516: PPUSH
30517: LD_VAR 0 4
30521: PPUSH
30522: CALL_OW 546
30526: ST_TO_ADDR
// if hex [ 1 ] then
30527: LD_VAR 0 15
30531: PUSH
30532: LD_INT 1
30534: ARRAY
30535: IFFALSE 30539
// exit ;
30537: GO 30980
// height := hex [ 2 ] ;
30539: LD_ADDR_VAR 0 13
30543: PUSH
30544: LD_VAR 0 15
30548: PUSH
30549: LD_INT 2
30551: ARRAY
30552: ST_TO_ADDR
// for i = 1 to hexes do
30553: LD_ADDR_VAR 0 7
30557: PUSH
30558: DOUBLE
30559: LD_INT 1
30561: DEC
30562: ST_TO_ADDR
30563: LD_VAR 0 12
30567: PUSH
30568: FOR_TO
30569: IFFALSE 30899
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30571: LD_VAR 0 12
30575: PUSH
30576: LD_VAR 0 7
30580: ARRAY
30581: PUSH
30582: LD_INT 1
30584: ARRAY
30585: PPUSH
30586: LD_VAR 0 12
30590: PUSH
30591: LD_VAR 0 7
30595: ARRAY
30596: PUSH
30597: LD_INT 2
30599: ARRAY
30600: PPUSH
30601: CALL_OW 488
30605: NOT
30606: PUSH
30607: LD_VAR 0 12
30611: PUSH
30612: LD_VAR 0 7
30616: ARRAY
30617: PUSH
30618: LD_INT 1
30620: ARRAY
30621: PPUSH
30622: LD_VAR 0 12
30626: PUSH
30627: LD_VAR 0 7
30631: ARRAY
30632: PUSH
30633: LD_INT 2
30635: ARRAY
30636: PPUSH
30637: CALL_OW 428
30641: PUSH
30642: LD_INT 0
30644: GREATER
30645: OR
30646: PUSH
30647: LD_VAR 0 12
30651: PUSH
30652: LD_VAR 0 7
30656: ARRAY
30657: PUSH
30658: LD_INT 1
30660: ARRAY
30661: PPUSH
30662: LD_VAR 0 12
30666: PUSH
30667: LD_VAR 0 7
30671: ARRAY
30672: PUSH
30673: LD_INT 2
30675: ARRAY
30676: PPUSH
30677: CALL_OW 351
30681: OR
30682: IFFALSE 30688
// exit ;
30684: POP
30685: POP
30686: GO 30980
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30688: LD_ADDR_VAR 0 8
30692: PUSH
30693: LD_VAR 0 12
30697: PUSH
30698: LD_VAR 0 7
30702: ARRAY
30703: PUSH
30704: LD_INT 1
30706: ARRAY
30707: PPUSH
30708: LD_VAR 0 12
30712: PUSH
30713: LD_VAR 0 7
30717: ARRAY
30718: PUSH
30719: LD_INT 2
30721: ARRAY
30722: PPUSH
30723: CALL_OW 546
30727: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30728: LD_VAR 0 8
30732: PUSH
30733: LD_INT 1
30735: ARRAY
30736: PUSH
30737: LD_VAR 0 8
30741: PUSH
30742: LD_INT 2
30744: ARRAY
30745: PUSH
30746: LD_VAR 0 13
30750: PUSH
30751: LD_INT 2
30753: PLUS
30754: GREATER
30755: OR
30756: PUSH
30757: LD_VAR 0 8
30761: PUSH
30762: LD_INT 2
30764: ARRAY
30765: PUSH
30766: LD_VAR 0 13
30770: PUSH
30771: LD_INT 2
30773: MINUS
30774: LESS
30775: OR
30776: PUSH
30777: LD_VAR 0 8
30781: PUSH
30782: LD_INT 3
30784: ARRAY
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: LD_INT 8
30791: PUSH
30792: LD_INT 9
30794: PUSH
30795: LD_INT 10
30797: PUSH
30798: LD_INT 11
30800: PUSH
30801: LD_INT 12
30803: PUSH
30804: LD_INT 13
30806: PUSH
30807: LD_INT 16
30809: PUSH
30810: LD_INT 17
30812: PUSH
30813: LD_INT 18
30815: PUSH
30816: LD_INT 19
30818: PUSH
30819: LD_INT 20
30821: PUSH
30822: LD_INT 21
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: IN
30840: NOT
30841: OR
30842: PUSH
30843: LD_VAR 0 8
30847: PUSH
30848: LD_INT 5
30850: ARRAY
30851: NOT
30852: OR
30853: PUSH
30854: LD_VAR 0 8
30858: PUSH
30859: LD_INT 6
30861: ARRAY
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: LD_INT 2
30868: PUSH
30869: LD_INT 7
30871: PUSH
30872: LD_INT 9
30874: PUSH
30875: LD_INT 10
30877: PUSH
30878: LD_INT 11
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: IN
30889: NOT
30890: OR
30891: IFFALSE 30897
// exit ;
30893: POP
30894: POP
30895: GO 30980
// end ;
30897: GO 30568
30899: POP
30900: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30901: LD_VAR 0 9
30905: PPUSH
30906: LD_VAR 0 3
30910: PPUSH
30911: LD_VAR 0 4
30915: PPUSH
30916: LD_INT 20
30918: PPUSH
30919: CALL 22903 0 4
30923: PUSH
30924: LD_INT 4
30926: ARRAY
30927: IFFALSE 30931
// exit ;
30929: GO 30980
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30931: LD_VAR 0 2
30935: PUSH
30936: LD_INT 29
30938: PUSH
30939: LD_INT 30
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: IN
30946: PUSH
30947: LD_VAR 0 3
30951: PPUSH
30952: LD_VAR 0 4
30956: PPUSH
30957: LD_VAR 0 9
30961: PPUSH
30962: CALL_OW 440
30966: NOT
30967: AND
30968: IFFALSE 30972
// exit ;
30970: GO 30980
// result := true ;
30972: LD_ADDR_VAR 0 6
30976: PUSH
30977: LD_INT 1
30979: ST_TO_ADDR
// end ;
30980: LD_VAR 0 6
30984: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30985: LD_INT 0
30987: PPUSH
30988: PPUSH
30989: PPUSH
30990: PPUSH
30991: PPUSH
30992: PPUSH
30993: PPUSH
30994: PPUSH
30995: PPUSH
30996: PPUSH
30997: PPUSH
30998: PPUSH
30999: PPUSH
31000: PPUSH
31001: PPUSH
31002: PPUSH
31003: PPUSH
31004: PPUSH
31005: PPUSH
31006: PPUSH
31007: PPUSH
31008: PPUSH
31009: PPUSH
31010: PPUSH
31011: PPUSH
31012: PPUSH
31013: PPUSH
31014: PPUSH
31015: PPUSH
31016: PPUSH
31017: PPUSH
31018: PPUSH
31019: PPUSH
31020: PPUSH
31021: PPUSH
31022: PPUSH
31023: PPUSH
31024: PPUSH
31025: PPUSH
31026: PPUSH
31027: PPUSH
31028: PPUSH
31029: PPUSH
31030: PPUSH
31031: PPUSH
31032: PPUSH
31033: PPUSH
31034: PPUSH
31035: PPUSH
31036: PPUSH
31037: PPUSH
31038: PPUSH
31039: PPUSH
31040: PPUSH
31041: PPUSH
31042: PPUSH
31043: PPUSH
31044: PPUSH
// result = [ ] ;
31045: LD_ADDR_VAR 0 7
31049: PUSH
31050: EMPTY
31051: ST_TO_ADDR
// temp_list = [ ] ;
31052: LD_ADDR_VAR 0 9
31056: PUSH
31057: EMPTY
31058: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31059: LD_VAR 0 4
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: LD_INT 2
31072: PUSH
31073: LD_INT 3
31075: PUSH
31076: LD_INT 4
31078: PUSH
31079: LD_INT 5
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: IN
31090: NOT
31091: PUSH
31092: LD_VAR 0 1
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: IN
31107: PUSH
31108: LD_VAR 0 5
31112: PUSH
31113: LD_INT 1
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: LD_INT 3
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: LIST
31126: IN
31127: NOT
31128: AND
31129: OR
31130: IFFALSE 31134
// exit ;
31132: GO 49525
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31134: LD_VAR 0 1
31138: PUSH
31139: LD_INT 6
31141: PUSH
31142: LD_INT 7
31144: PUSH
31145: LD_INT 8
31147: PUSH
31148: LD_INT 13
31150: PUSH
31151: LD_INT 12
31153: PUSH
31154: LD_INT 15
31156: PUSH
31157: LD_INT 11
31159: PUSH
31160: LD_INT 14
31162: PUSH
31163: LD_INT 10
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: IN
31177: IFFALSE 31187
// btype = b_lab ;
31179: LD_ADDR_VAR 0 1
31183: PUSH
31184: LD_INT 6
31186: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31187: LD_VAR 0 6
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: LD_INT 2
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: LIST
31205: IN
31206: NOT
31207: PUSH
31208: LD_VAR 0 1
31212: PUSH
31213: LD_INT 0
31215: PUSH
31216: LD_INT 1
31218: PUSH
31219: LD_INT 2
31221: PUSH
31222: LD_INT 3
31224: PUSH
31225: LD_INT 6
31227: PUSH
31228: LD_INT 36
31230: PUSH
31231: LD_INT 4
31233: PUSH
31234: LD_INT 5
31236: PUSH
31237: LD_INT 31
31239: PUSH
31240: LD_INT 32
31242: PUSH
31243: LD_INT 33
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: IN
31259: NOT
31260: PUSH
31261: LD_VAR 0 6
31265: PUSH
31266: LD_INT 1
31268: EQUAL
31269: AND
31270: OR
31271: PUSH
31272: LD_VAR 0 1
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: LD_INT 3
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: IN
31287: NOT
31288: PUSH
31289: LD_VAR 0 6
31293: PUSH
31294: LD_INT 2
31296: EQUAL
31297: AND
31298: OR
31299: IFFALSE 31309
// mode = 0 ;
31301: LD_ADDR_VAR 0 6
31305: PUSH
31306: LD_INT 0
31308: ST_TO_ADDR
// case mode of 0 :
31309: LD_VAR 0 6
31313: PUSH
31314: LD_INT 0
31316: DOUBLE
31317: EQUAL
31318: IFTRUE 31322
31320: GO 42775
31322: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31323: LD_ADDR_VAR 0 11
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: LD_INT 1
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 1
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 1
31361: PUSH
31362: LD_INT 1
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 0
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 1
31381: NEG
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 1
31392: NEG
31393: PUSH
31394: LD_INT 1
31396: NEG
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: NEG
31405: PUSH
31406: LD_INT 2
31408: NEG
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: LD_INT 2
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: LD_INT 1
31430: NEG
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: LD_INT 2
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 0
31448: PUSH
31449: LD_INT 2
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: LD_INT 1
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 1
31469: PUSH
31470: LD_INT 3
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 0
31479: PUSH
31480: LD_INT 3
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 1
31489: NEG
31490: PUSH
31491: LD_INT 2
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31516: LD_ADDR_VAR 0 12
31520: PUSH
31521: LD_INT 0
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 0
31533: PUSH
31534: LD_INT 1
31536: NEG
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 1
31544: PUSH
31545: LD_INT 0
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 1
31554: PUSH
31555: LD_INT 1
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: LD_INT 1
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 1
31574: NEG
31575: PUSH
31576: LD_INT 0
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 1
31585: NEG
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 1
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 2
31608: PUSH
31609: LD_INT 0
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 2
31618: PUSH
31619: LD_INT 1
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 2
31639: NEG
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 2
31650: NEG
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 3
31673: NEG
31674: PUSH
31675: LD_INT 0
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 3
31684: NEG
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31712: LD_ADDR_VAR 0 13
31716: PUSH
31717: LD_INT 0
31719: PUSH
31720: LD_INT 0
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 0
31729: PUSH
31730: LD_INT 1
31732: NEG
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 1
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 0
31760: PUSH
31761: LD_INT 1
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 1
31770: NEG
31771: PUSH
31772: LD_INT 0
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 1
31781: NEG
31782: PUSH
31783: LD_INT 1
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 1
31793: NEG
31794: PUSH
31795: LD_INT 2
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 2
31805: PUSH
31806: LD_INT 1
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 2
31815: PUSH
31816: LD_INT 2
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 1
31825: PUSH
31826: LD_INT 2
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 2
31835: NEG
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 2
31847: NEG
31848: PUSH
31849: LD_INT 2
31851: NEG
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 2
31859: NEG
31860: PUSH
31861: LD_INT 3
31863: NEG
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 3
31871: NEG
31872: PUSH
31873: LD_INT 2
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 3
31883: NEG
31884: PUSH
31885: LD_INT 3
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31911: LD_ADDR_VAR 0 14
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: LD_INT 0
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 0
31928: PUSH
31929: LD_INT 1
31931: NEG
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 1
31939: PUSH
31940: LD_INT 0
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 0
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 1
31980: NEG
31981: PUSH
31982: LD_INT 1
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 1
31992: NEG
31993: PUSH
31994: LD_INT 2
31996: NEG
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 0
32004: PUSH
32005: LD_INT 2
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 1
32026: PUSH
32027: LD_INT 2
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 0
32036: PUSH
32037: LD_INT 2
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 1
32046: NEG
32047: PUSH
32048: LD_INT 1
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: LD_INT 3
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 0
32069: PUSH
32070: LD_INT 3
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: LD_INT 2
32083: NEG
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32107: LD_ADDR_VAR 0 15
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: LD_INT 0
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: LD_INT 1
32127: NEG
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 1
32135: PUSH
32136: LD_INT 0
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 1
32145: PUSH
32146: LD_INT 1
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: LD_INT 1
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 1
32165: NEG
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 1
32176: NEG
32177: PUSH
32178: LD_INT 1
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 1
32188: PUSH
32189: LD_INT 1
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 2
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 2
32209: PUSH
32210: LD_INT 1
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 1
32219: NEG
32220: PUSH
32221: LD_INT 1
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 2
32230: NEG
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 2
32253: PUSH
32254: LD_INT 1
32256: NEG
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 3
32264: PUSH
32265: LD_INT 0
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 3
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32300: LD_ADDR_VAR 0 16
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: LD_INT 0
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: LD_INT 1
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: LD_INT 1
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 1
32358: NEG
32359: PUSH
32360: LD_INT 0
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: NEG
32370: PUSH
32371: LD_INT 1
32373: NEG
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: LD_INT 2
32385: NEG
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 2
32393: PUSH
32394: LD_INT 1
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 2
32403: PUSH
32404: LD_INT 2
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: LD_INT 2
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: NEG
32424: PUSH
32425: LD_INT 1
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 2
32435: NEG
32436: PUSH
32437: LD_INT 2
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 3
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 3
32457: PUSH
32458: LD_INT 3
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 2
32467: PUSH
32468: LD_INT 3
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32493: LD_ADDR_VAR 0 17
32497: PUSH
32498: LD_INT 0
32500: PUSH
32501: LD_INT 0
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 0
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 1
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 1
32531: PUSH
32532: LD_INT 1
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 0
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 1
32562: NEG
32563: PUSH
32564: LD_INT 1
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 1
32574: NEG
32575: PUSH
32576: LD_INT 2
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: LD_INT 2
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: PUSH
32598: LD_INT 1
32600: NEG
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 2
32608: PUSH
32609: LD_INT 0
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 2
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 2
32628: PUSH
32629: LD_INT 2
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 1
32638: PUSH
32639: LD_INT 2
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 0
32648: PUSH
32649: LD_INT 2
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 1
32658: NEG
32659: PUSH
32660: LD_INT 1
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 2
32669: NEG
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 2
32680: NEG
32681: PUSH
32682: LD_INT 1
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 2
32692: NEG
32693: PUSH
32694: LD_INT 2
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32723: LD_ADDR_VAR 0 18
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: LD_INT 0
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 0
32740: PUSH
32741: LD_INT 1
32743: NEG
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: PUSH
32752: LD_INT 0
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: LD_INT 1
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: NEG
32793: PUSH
32794: LD_INT 1
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 1
32804: NEG
32805: PUSH
32806: LD_INT 2
32808: NEG
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: LD_INT 2
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: LD_INT 1
32830: NEG
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: PUSH
32839: LD_INT 0
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 2
32848: PUSH
32849: LD_INT 1
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: LD_INT 2
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: LD_INT 2
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 0
32878: PUSH
32879: LD_INT 2
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 1
32888: NEG
32889: PUSH
32890: LD_INT 1
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 2
32899: NEG
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 2
32910: NEG
32911: PUSH
32912: LD_INT 1
32914: NEG
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 2
32922: NEG
32923: PUSH
32924: LD_INT 2
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32953: LD_ADDR_VAR 0 19
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: LD_INT 0
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 0
32970: PUSH
32971: LD_INT 1
32973: NEG
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 1
32981: PUSH
32982: LD_INT 0
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 0
33001: PUSH
33002: LD_INT 1
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 1
33011: NEG
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 1
33022: NEG
33023: PUSH
33024: LD_INT 1
33026: NEG
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 1
33034: NEG
33035: PUSH
33036: LD_INT 2
33038: NEG
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: LD_INT 2
33049: NEG
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 1
33057: PUSH
33058: LD_INT 1
33060: NEG
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 2
33068: PUSH
33069: LD_INT 0
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 2
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: LD_INT 2
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 1
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 0
33108: PUSH
33109: LD_INT 2
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: LD_INT 1
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 2
33129: NEG
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 2
33140: NEG
33141: PUSH
33142: LD_INT 1
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 2
33152: NEG
33153: PUSH
33154: LD_INT 2
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33183: LD_ADDR_VAR 0 20
33187: PUSH
33188: LD_INT 0
33190: PUSH
33191: LD_INT 0
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 0
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 1
33211: PUSH
33212: LD_INT 0
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: LD_INT 1
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 1
33252: NEG
33253: PUSH
33254: LD_INT 1
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: LD_INT 2
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: LD_INT 2
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: PUSH
33288: LD_INT 1
33290: NEG
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 2
33298: PUSH
33299: LD_INT 0
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 2
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 2
33318: PUSH
33319: LD_INT 2
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: LD_INT 2
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 0
33338: PUSH
33339: LD_INT 2
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 2
33359: NEG
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 2
33370: NEG
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 2
33382: NEG
33383: PUSH
33384: LD_INT 2
33386: NEG
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33413: LD_ADDR_VAR 0 21
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: LD_INT 0
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: LD_INT 1
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 1
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: LD_INT 1
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: NEG
33483: PUSH
33484: LD_INT 1
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: LD_INT 2
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: LD_INT 2
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: LD_INT 1
33520: NEG
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 2
33528: PUSH
33529: LD_INT 0
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 2
33538: PUSH
33539: LD_INT 1
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 2
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 1
33558: PUSH
33559: LD_INT 2
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 0
33568: PUSH
33569: LD_INT 2
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 1
33578: NEG
33579: PUSH
33580: LD_INT 1
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 2
33589: NEG
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 2
33600: NEG
33601: PUSH
33602: LD_INT 1
33604: NEG
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 2
33612: NEG
33613: PUSH
33614: LD_INT 2
33616: NEG
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33643: LD_ADDR_VAR 0 22
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: LD_INT 0
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: LD_INT 1
33663: NEG
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 1
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 1
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 1
33712: NEG
33713: PUSH
33714: LD_INT 1
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 1
33724: NEG
33725: PUSH
33726: LD_INT 2
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 0
33736: PUSH
33737: LD_INT 2
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 1
33747: PUSH
33748: LD_INT 1
33750: NEG
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 2
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 2
33768: PUSH
33769: LD_INT 1
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 2
33778: PUSH
33779: LD_INT 2
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 1
33788: PUSH
33789: LD_INT 2
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 0
33798: PUSH
33799: LD_INT 2
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: LD_INT 1
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 2
33819: NEG
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 2
33830: NEG
33831: PUSH
33832: LD_INT 1
33834: NEG
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 2
33842: NEG
33843: PUSH
33844: LD_INT 2
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33873: LD_ADDR_VAR 0 23
33877: PUSH
33878: LD_INT 0
33880: PUSH
33881: LD_INT 0
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: LD_INT 1
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 1
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 1
33931: NEG
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 1
33942: NEG
33943: PUSH
33944: LD_INT 1
33946: NEG
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 1
33954: NEG
33955: PUSH
33956: LD_INT 2
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: LD_INT 2
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 1
33977: PUSH
33978: LD_INT 1
33980: NEG
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 2
33988: PUSH
33989: LD_INT 0
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 2
33998: PUSH
33999: LD_INT 1
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 2
34008: PUSH
34009: LD_INT 2
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: LD_INT 2
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: LD_INT 2
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 2
34049: NEG
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 2
34060: NEG
34061: PUSH
34062: LD_INT 1
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 2
34072: NEG
34073: PUSH
34074: LD_INT 2
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 2
34084: NEG
34085: PUSH
34086: LD_INT 3
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: NEG
34097: PUSH
34098: LD_INT 3
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: LD_INT 2
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 2
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34153: LD_ADDR_VAR 0 24
34157: PUSH
34158: LD_INT 0
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 0
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 1
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 1
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 0
34201: PUSH
34202: LD_INT 1
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 1
34211: NEG
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: NEG
34223: PUSH
34224: LD_INT 1
34226: NEG
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: PUSH
34236: LD_INT 2
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 2
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 1
34257: PUSH
34258: LD_INT 1
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 2
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 2
34278: PUSH
34279: LD_INT 1
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 2
34288: PUSH
34289: LD_INT 2
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 1
34298: PUSH
34299: LD_INT 2
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: LD_INT 2
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 1
34318: NEG
34319: PUSH
34320: LD_INT 1
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 2
34329: NEG
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 2
34340: NEG
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 2
34352: NEG
34353: PUSH
34354: LD_INT 2
34356: NEG
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: LD_INT 2
34367: NEG
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 2
34375: PUSH
34376: LD_INT 1
34378: NEG
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 3
34386: PUSH
34387: LD_INT 1
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 3
34396: PUSH
34397: LD_INT 2
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34429: LD_ADDR_VAR 0 25
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: LD_INT 1
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 1
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 1
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 0
34477: PUSH
34478: LD_INT 1
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 1
34487: NEG
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: LD_INT 1
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: NEG
34511: PUSH
34512: LD_INT 2
34514: NEG
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: LD_INT 2
34525: NEG
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: LD_INT 2
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 1
34574: PUSH
34575: LD_INT 2
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 2
34605: NEG
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 2
34616: NEG
34617: PUSH
34618: LD_INT 1
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 2
34628: NEG
34629: PUSH
34630: LD_INT 2
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 3
34640: PUSH
34641: LD_INT 1
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 3
34650: PUSH
34651: LD_INT 2
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 2
34660: PUSH
34661: LD_INT 3
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: LD_INT 3
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34703: LD_ADDR_VAR 0 26
34707: PUSH
34708: LD_INT 0
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: LD_INT 1
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: LD_INT 0
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 1
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: LD_INT 1
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 1
34761: NEG
34762: PUSH
34763: LD_INT 0
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 1
34772: NEG
34773: PUSH
34774: LD_INT 1
34776: NEG
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: LD_INT 2
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 0
34796: PUSH
34797: LD_INT 2
34799: NEG
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 1
34807: PUSH
34808: LD_INT 1
34810: NEG
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 2
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 2
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 2
34838: PUSH
34839: LD_INT 2
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 1
34848: PUSH
34849: LD_INT 2
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: LD_INT 2
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 1
34868: NEG
34869: PUSH
34870: LD_INT 1
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 2
34879: NEG
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 2
34890: NEG
34891: PUSH
34892: LD_INT 1
34894: NEG
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 2
34902: NEG
34903: PUSH
34904: LD_INT 2
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 2
34914: PUSH
34915: LD_INT 3
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 1
34924: PUSH
34925: LD_INT 3
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 1
34934: NEG
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 2
34945: NEG
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34979: LD_ADDR_VAR 0 27
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 0
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: LD_INT 1
34999: NEG
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 1
35060: NEG
35061: PUSH
35062: LD_INT 2
35064: NEG
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 0
35072: PUSH
35073: LD_INT 2
35075: NEG
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: LD_INT 1
35086: NEG
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 2
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 2
35104: PUSH
35105: LD_INT 1
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 2
35114: PUSH
35115: LD_INT 2
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 1
35124: PUSH
35125: LD_INT 2
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: LD_INT 2
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 1
35144: NEG
35145: PUSH
35146: LD_INT 1
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 2
35155: NEG
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 2
35166: NEG
35167: PUSH
35168: LD_INT 1
35170: NEG
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 2
35178: NEG
35179: PUSH
35180: LD_INT 2
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 1
35190: NEG
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 2
35201: NEG
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 3
35212: NEG
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 3
35224: NEG
35225: PUSH
35226: LD_INT 2
35228: NEG
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35259: LD_ADDR_VAR 0 28
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: LD_INT 0
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 0
35276: PUSH
35277: LD_INT 1
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 1
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 0
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 1
35317: NEG
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 1
35328: NEG
35329: PUSH
35330: LD_INT 1
35332: NEG
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 1
35340: NEG
35341: PUSH
35342: LD_INT 2
35344: NEG
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: LD_INT 2
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 1
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 2
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 2
35384: PUSH
35385: LD_INT 1
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 2
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 1
35404: PUSH
35405: LD_INT 2
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: LD_INT 2
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: LD_INT 1
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 2
35435: NEG
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 2
35446: NEG
35447: PUSH
35448: LD_INT 1
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 2
35458: NEG
35459: PUSH
35460: LD_INT 2
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 2
35470: NEG
35471: PUSH
35472: LD_INT 3
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 1
35482: NEG
35483: PUSH
35484: LD_INT 3
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 3
35494: NEG
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 3
35506: NEG
35507: PUSH
35508: LD_INT 2
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35541: LD_ADDR_VAR 0 29
35545: PUSH
35546: LD_INT 0
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: LD_INT 1
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 1
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: LD_INT 1
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 0
35589: PUSH
35590: LD_INT 1
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 1
35599: NEG
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: NEG
35611: PUSH
35612: LD_INT 1
35614: NEG
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 1
35622: NEG
35623: PUSH
35624: LD_INT 2
35626: NEG
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 0
35634: PUSH
35635: LD_INT 2
35637: NEG
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: LD_INT 1
35648: NEG
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 2
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 2
35666: PUSH
35667: LD_INT 1
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 1
35676: PUSH
35677: LD_INT 2
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: LD_INT 1
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 2
35707: NEG
35708: PUSH
35709: LD_INT 1
35711: NEG
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 2
35719: NEG
35720: PUSH
35721: LD_INT 2
35723: NEG
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 2
35731: NEG
35732: PUSH
35733: LD_INT 3
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 2
35743: PUSH
35744: LD_INT 1
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 3
35754: PUSH
35755: LD_INT 1
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 1
35764: PUSH
35765: LD_INT 3
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: LD_INT 2
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 3
35785: NEG
35786: PUSH
35787: LD_INT 2
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35820: LD_ADDR_VAR 0 30
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: LD_INT 1
35840: NEG
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 1
35848: PUSH
35849: LD_INT 0
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 1
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: LD_INT 1
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 1
35878: NEG
35879: PUSH
35880: LD_INT 0
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 1
35889: NEG
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 1
35901: NEG
35902: PUSH
35903: LD_INT 2
35905: NEG
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: LD_INT 2
35916: NEG
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 1
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 2
35935: PUSH
35936: LD_INT 0
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 2
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 2
35955: PUSH
35956: LD_INT 2
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 1
35965: PUSH
35966: LD_INT 2
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: LD_INT 1
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 2
35986: NEG
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 2
35997: NEG
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 1
36009: NEG
36010: PUSH
36011: LD_INT 3
36013: NEG
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: LD_INT 2
36024: NEG
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 3
36032: PUSH
36033: LD_INT 2
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 2
36042: PUSH
36043: LD_INT 3
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 2
36052: NEG
36053: PUSH
36054: LD_INT 1
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 3
36063: NEG
36064: PUSH
36065: LD_INT 1
36067: NEG
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36098: LD_ADDR_VAR 0 31
36102: PUSH
36103: LD_INT 0
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: LD_INT 1
36118: NEG
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: LD_INT 1
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 1
36167: NEG
36168: PUSH
36169: LD_INT 1
36171: NEG
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 1
36179: NEG
36180: PUSH
36181: LD_INT 2
36183: NEG
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 1
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 2
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 2
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 2
36222: PUSH
36223: LD_INT 2
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: LD_INT 2
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: LD_INT 2
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: PUSH
36254: LD_INT 1
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 2
36263: NEG
36264: PUSH
36265: LD_INT 1
36267: NEG
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 2
36275: NEG
36276: PUSH
36277: LD_INT 2
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 2
36287: NEG
36288: PUSH
36289: LD_INT 3
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 2
36299: PUSH
36300: LD_INT 1
36302: NEG
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 3
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 1
36320: PUSH
36321: LD_INT 3
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: LD_INT 2
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 3
36341: NEG
36342: PUSH
36343: LD_INT 2
36345: NEG
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36376: LD_ADDR_VAR 0 32
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: LD_INT 0
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 0
36393: PUSH
36394: LD_INT 1
36396: NEG
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: LD_INT 0
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: LD_INT 1
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 0
36424: PUSH
36425: LD_INT 1
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 1
36434: NEG
36435: PUSH
36436: LD_INT 0
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: LD_INT 1
36449: NEG
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: LD_INT 2
36461: NEG
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 0
36469: PUSH
36470: LD_INT 2
36472: NEG
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 1
36480: PUSH
36481: LD_INT 1
36483: NEG
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 2
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: LD_INT 2
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: LD_INT 2
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 1
36531: NEG
36532: PUSH
36533: LD_INT 1
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 2
36542: NEG
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 2
36553: NEG
36554: PUSH
36555: LD_INT 1
36557: NEG
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 1
36565: NEG
36566: PUSH
36567: LD_INT 3
36569: NEG
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: LD_INT 2
36580: NEG
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 3
36588: PUSH
36589: LD_INT 2
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 2
36598: PUSH
36599: LD_INT 3
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 2
36608: NEG
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 3
36619: NEG
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36654: LD_ADDR_VAR 0 33
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 1
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 1
36692: PUSH
36693: LD_INT 1
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 0
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 1
36712: NEG
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 1
36723: NEG
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 1
36735: NEG
36736: PUSH
36737: LD_INT 2
36739: NEG
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: LD_INT 1
36750: NEG
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 2
36758: PUSH
36759: LD_INT 0
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 2
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 1
36778: PUSH
36779: LD_INT 2
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: LD_INT 2
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: NEG
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 2
36809: NEG
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 2
36820: NEG
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: NEG
36833: PUSH
36834: LD_INT 2
36836: NEG
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 2
36844: NEG
36845: PUSH
36846: LD_INT 3
36848: NEG
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 2
36856: PUSH
36857: LD_INT 1
36859: NEG
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 3
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 1
36877: PUSH
36878: LD_INT 3
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: LD_INT 2
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 3
36898: NEG
36899: PUSH
36900: LD_INT 2
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36933: LD_ADDR_VAR 0 34
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: LD_INT 0
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 0
36950: PUSH
36951: LD_INT 1
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: LD_INT 1
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: LD_INT 1
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 1
36991: NEG
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 1
37002: NEG
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 1
37014: NEG
37015: PUSH
37016: LD_INT 2
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: LD_INT 2
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: LD_INT 1
37040: NEG
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 2
37048: PUSH
37049: LD_INT 1
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 2
37058: PUSH
37059: LD_INT 2
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 1
37068: PUSH
37069: LD_INT 2
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: NEG
37079: PUSH
37080: LD_INT 1
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 2
37089: NEG
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 2
37100: NEG
37101: PUSH
37102: LD_INT 1
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 2
37112: NEG
37113: PUSH
37114: LD_INT 2
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: LD_INT 3
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: LD_INT 2
37139: NEG
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 3
37147: PUSH
37148: LD_INT 2
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 2
37157: PUSH
37158: LD_INT 3
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 2
37167: NEG
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 3
37178: NEG
37179: PUSH
37180: LD_INT 1
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37213: LD_ADDR_VAR 0 35
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 0
37230: PUSH
37231: LD_INT 1
37233: NEG
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 0
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 1
37271: NEG
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 1
37282: NEG
37283: PUSH
37284: LD_INT 1
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 2
37304: NEG
37305: PUSH
37306: LD_INT 1
37308: NEG
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37325: LD_ADDR_VAR 0 36
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 1
37363: PUSH
37364: LD_INT 1
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 0
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: LD_INT 1
37398: NEG
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: NEG
37407: PUSH
37408: LD_INT 2
37410: NEG
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: LD_INT 2
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37437: LD_ADDR_VAR 0 37
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: LD_INT 0
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 0
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 1
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 1
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 0
37485: PUSH
37486: LD_INT 1
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 1
37495: NEG
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 1
37506: NEG
37507: PUSH
37508: LD_INT 1
37510: NEG
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 1
37518: PUSH
37519: LD_INT 1
37521: NEG
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 1
37529: NEG
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37549: LD_ADDR_VAR 0 38
37553: PUSH
37554: LD_INT 0
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: LD_INT 1
37569: NEG
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 1
37607: NEG
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: NEG
37619: PUSH
37620: LD_INT 1
37622: NEG
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 2
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 2
37640: NEG
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37661: LD_ADDR_VAR 0 39
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: LD_INT 1
37681: NEG
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 1
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 1
37730: NEG
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: PUSH
37744: LD_INT 2
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: LD_INT 2
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37773: LD_ADDR_VAR 0 40
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: LD_INT 0
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: LD_INT 1
37793: NEG
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 1
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: PUSH
37812: LD_INT 1
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 1
37831: NEG
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 1
37842: NEG
37843: PUSH
37844: LD_INT 1
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: LD_INT 1
37857: NEG
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37885: LD_ADDR_VAR 0 41
37889: PUSH
37890: LD_INT 0
37892: PUSH
37893: LD_INT 0
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: LD_INT 1
37905: NEG
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 1
37913: PUSH
37914: LD_INT 0
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: PUSH
37924: LD_INT 1
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: NEG
37955: PUSH
37956: LD_INT 1
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: NEG
37967: PUSH
37968: LD_INT 2
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: LD_INT 1
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 2
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: LD_INT 2
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 2
38040: NEG
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: NEG
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 2
38063: NEG
38064: PUSH
38065: LD_INT 2
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 2
38075: NEG
38076: PUSH
38077: LD_INT 3
38079: NEG
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: LD_INT 1
38090: NEG
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 3
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 3
38108: PUSH
38109: LD_INT 1
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 3
38118: PUSH
38119: LD_INT 2
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 3
38128: PUSH
38129: LD_INT 3
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 2
38138: PUSH
38139: LD_INT 3
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 2
38148: NEG
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 3
38159: NEG
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 3
38170: NEG
38171: PUSH
38172: LD_INT 1
38174: NEG
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 3
38182: NEG
38183: PUSH
38184: LD_INT 2
38186: NEG
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 3
38194: NEG
38195: PUSH
38196: LD_INT 3
38198: NEG
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38235: LD_ADDR_VAR 0 42
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 1
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: LD_INT 1
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 1
38293: NEG
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: LD_INT 1
38308: NEG
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 1
38316: NEG
38317: PUSH
38318: LD_INT 2
38320: NEG
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: LD_INT 2
38331: NEG
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: PUSH
38340: LD_INT 1
38342: NEG
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 2
38350: PUSH
38351: LD_INT 1
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 2
38360: PUSH
38361: LD_INT 2
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 1
38370: PUSH
38371: LD_INT 2
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 0
38380: PUSH
38381: LD_INT 2
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 2
38401: NEG
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 2
38413: NEG
38414: PUSH
38415: LD_INT 2
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 2
38425: NEG
38426: PUSH
38427: LD_INT 3
38429: NEG
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: NEG
38438: PUSH
38439: LD_INT 3
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: LD_INT 3
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: LD_INT 2
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 3
38471: PUSH
38472: LD_INT 2
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 3
38481: PUSH
38482: LD_INT 3
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: LD_INT 3
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: LD_INT 3
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: LD_INT 3
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: LD_INT 2
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 3
38532: NEG
38533: PUSH
38534: LD_INT 2
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 3
38544: NEG
38545: PUSH
38546: LD_INT 3
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38585: LD_ADDR_VAR 0 43
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: LD_INT 1
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: LD_INT 1
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: LD_INT 1
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: LD_INT 2
38670: NEG
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: LD_INT 2
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: LD_INT 2
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 0
38730: PUSH
38731: LD_INT 2
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 1
38740: NEG
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 2
38762: NEG
38763: PUSH
38764: LD_INT 1
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: NEG
38775: PUSH
38776: LD_INT 3
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 3
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 2
38800: NEG
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 2
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 3
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 3
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: LD_INT 3
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 0
38849: PUSH
38850: LD_INT 3
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: NEG
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 2
38870: NEG
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 3
38881: NEG
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 3
38892: NEG
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38933: LD_ADDR_VAR 0 44
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: LD_INT 1
38953: NEG
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 0
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: NEG
39003: PUSH
39004: LD_INT 1
39006: NEG
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: LD_INT 2
39018: NEG
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 2
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 2
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 2
39057: PUSH
39058: LD_INT 2
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 1
39067: PUSH
39068: LD_INT 2
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 2
39088: NEG
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 2
39111: NEG
39112: PUSH
39113: LD_INT 2
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 2
39123: NEG
39124: PUSH
39125: LD_INT 3
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 2
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 3
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 3
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 3
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 3
39176: PUSH
39177: LD_INT 3
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 3
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 3
39207: NEG
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 3
39218: NEG
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 3
39230: NEG
39231: PUSH
39232: LD_INT 2
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 3
39242: NEG
39243: PUSH
39244: LD_INT 3
39246: NEG
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39283: LD_ADDR_VAR 0 45
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: LD_INT 1
39303: NEG
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: LD_INT 2
39368: NEG
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: LD_INT 2
39379: NEG
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: LD_INT 1
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 2
39408: PUSH
39409: LD_INT 2
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 1
39418: PUSH
39419: LD_INT 2
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: LD_INT 2
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: NEG
39439: PUSH
39440: LD_INT 1
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 2
39449: NEG
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 2
39461: NEG
39462: PUSH
39463: LD_INT 2
39465: NEG
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 2
39473: NEG
39474: PUSH
39475: LD_INT 3
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: LD_INT 3
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 0
39497: PUSH
39498: LD_INT 3
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 3
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 3
39529: PUSH
39530: LD_INT 3
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 2
39539: PUSH
39540: LD_INT 3
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 1
39549: PUSH
39550: LD_INT 3
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: LD_INT 3
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: LD_INT 2
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 3
39580: NEG
39581: PUSH
39582: LD_INT 2
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 3
39592: NEG
39593: PUSH
39594: LD_INT 3
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39633: LD_ADDR_VAR 0 46
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: LD_INT 1
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: LD_INT 2
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: LD_INT 2
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 1
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 2
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: LD_INT 2
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: LD_INT 2
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: LD_INT 1
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 2
39799: NEG
39800: PUSH
39801: LD_INT 0
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 2
39810: NEG
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 1
39822: NEG
39823: PUSH
39824: LD_INT 3
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: LD_INT 3
39837: NEG
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: LD_INT 2
39848: NEG
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 2
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 3
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 3
39877: PUSH
39878: LD_INT 1
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: LD_INT 3
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: LD_INT 3
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 2
39918: NEG
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 3
39929: NEG
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 3
39940: NEG
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39981: LD_ADDR_VAR 0 47
39985: PUSH
39986: LD_INT 0
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: LD_INT 1
40054: NEG
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 1
40062: NEG
40063: PUSH
40064: LD_INT 2
40066: NEG
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 2
40096: NEG
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 2
40108: NEG
40109: PUSH
40110: LD_INT 2
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40132: LD_ADDR_VAR 0 48
40136: PUSH
40137: LD_INT 0
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 1
40190: NEG
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: LD_INT 2
40217: NEG
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: LD_INT 2
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40279: LD_ADDR_VAR 0 49
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: LD_INT 1
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: LD_INT 2
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: LD_INT 2
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40423: LD_ADDR_VAR 0 50
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: LD_INT 1
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 2
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: LD_INT 2
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: LD_INT 2
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: LD_INT 1
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40567: LD_ADDR_VAR 0 51
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: LD_INT 1
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: LD_INT 1
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: LD_INT 2
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 2
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 2
40679: NEG
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40714: LD_ADDR_VAR 0 52
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: LD_INT 2
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: NEG
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 2
40818: NEG
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 2
40829: NEG
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: LD_INT 2
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40865: LD_ADDR_VAR 0 53
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 1
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: LD_INT 2
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 2
41000: PUSH
41001: LD_INT 2
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: LD_INT 2
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: LD_INT 1
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 2
41041: NEG
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 2
41052: NEG
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: NEG
41065: PUSH
41066: LD_INT 2
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41095: LD_ADDR_VAR 0 54
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 1
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 1
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: LD_INT 1
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: LD_INT 2
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 2
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 2
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: LD_INT 2
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: LD_INT 2
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 2
41271: NEG
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 2
41282: NEG
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 2
41294: NEG
41295: PUSH
41296: LD_INT 2
41298: NEG
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41325: LD_ADDR_VAR 0 55
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 1
41345: NEG
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: PUSH
41396: LD_INT 1
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: LD_INT 2
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 2
41460: PUSH
41461: LD_INT 2
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: PUSH
41471: LD_INT 2
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: LD_INT 2
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 2
41501: NEG
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 2
41512: NEG
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 2
41524: NEG
41525: PUSH
41526: LD_INT 2
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41555: LD_ADDR_VAR 0 56
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 2
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: LD_INT 2
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: LD_INT 2
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: LD_INT 1
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 2
41731: NEG
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 2
41742: NEG
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: LD_INT 2
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41785: LD_ADDR_VAR 0 57
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: LD_INT 2
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 2
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 2
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 2
41961: NEG
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 2
41972: NEG
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: LD_INT 2
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42015: LD_ADDR_VAR 0 58
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: NEG
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 2
42202: NEG
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PUSH
42216: LD_INT 2
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42245: LD_ADDR_VAR 0 59
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42333: LD_ADDR_VAR 0 60
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42421: LD_ADDR_VAR 0 61
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42509: LD_ADDR_VAR 0 62
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 1
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42597: LD_ADDR_VAR 0 63
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42685: LD_ADDR_VAR 0 64
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: ST_TO_ADDR
// end ; 1 :
42773: GO 48670
42775: LD_INT 1
42777: DOUBLE
42778: EQUAL
42779: IFTRUE 42783
42781: GO 45406
42783: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42784: LD_ADDR_VAR 0 11
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: LD_INT 3
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_INT 3
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: LD_INT 2
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42828: LD_ADDR_VAR 0 12
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 3
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 3
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: LIST
42868: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42869: LD_ADDR_VAR 0 13
42873: PUSH
42874: LD_INT 3
42876: PUSH
42877: LD_INT 2
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 3
42886: PUSH
42887: LD_INT 3
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: LD_INT 3
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42909: LD_ADDR_VAR 0 14
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: LD_INT 3
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: LD_INT 3
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: LIST
42949: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42950: LD_ADDR_VAR 0 15
42954: PUSH
42955: LD_INT 2
42957: NEG
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 3
42968: NEG
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 3
42979: NEG
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: LIST
42993: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42994: LD_ADDR_VAR 0 16
42998: PUSH
42999: LD_INT 2
43001: NEG
43002: PUSH
43003: LD_INT 3
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 3
43013: NEG
43014: PUSH
43015: LD_INT 2
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 3
43025: NEG
43026: PUSH
43027: LD_INT 3
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: LIST
43039: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43040: LD_ADDR_VAR 0 17
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: LD_INT 3
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: LD_INT 3
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: LD_INT 2
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: LIST
43083: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43084: LD_ADDR_VAR 0 18
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 3
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 3
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: LIST
43124: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43125: LD_ADDR_VAR 0 19
43129: PUSH
43130: LD_INT 3
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 3
43142: PUSH
43143: LD_INT 3
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43165: LD_ADDR_VAR 0 20
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: LD_INT 3
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 3
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: LD_INT 2
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: LIST
43205: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43206: LD_ADDR_VAR 0 21
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 3
43224: NEG
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 3
43235: NEG
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: LIST
43249: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43250: LD_ADDR_VAR 0 22
43254: PUSH
43255: LD_INT 2
43257: NEG
43258: PUSH
43259: LD_INT 3
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 3
43269: NEG
43270: PUSH
43271: LD_INT 2
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 3
43281: NEG
43282: PUSH
43283: LD_INT 3
43285: NEG
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43296: LD_ADDR_VAR 0 23
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: LD_INT 3
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: LD_INT 4
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 3
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: LIST
43339: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43340: LD_ADDR_VAR 0 24
43344: PUSH
43345: LD_INT 3
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 3
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 4
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: LIST
43380: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43381: LD_ADDR_VAR 0 25
43385: PUSH
43386: LD_INT 3
43388: PUSH
43389: LD_INT 3
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 4
43398: PUSH
43399: LD_INT 3
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 3
43408: PUSH
43409: LD_INT 4
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: LIST
43420: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43421: LD_ADDR_VAR 0 26
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 3
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: LD_INT 4
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: LD_INT 3
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: LIST
43461: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43462: LD_ADDR_VAR 0 27
43466: PUSH
43467: LD_INT 3
43469: NEG
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 3
43480: NEG
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 4
43491: NEG
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: LIST
43505: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43506: LD_ADDR_VAR 0 28
43510: PUSH
43511: LD_INT 3
43513: NEG
43514: PUSH
43515: LD_INT 3
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 3
43525: NEG
43526: PUSH
43527: LD_INT 4
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 4
43537: NEG
43538: PUSH
43539: LD_INT 3
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: LIST
43551: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43552: LD_ADDR_VAR 0 29
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 3
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: LD_INT 3
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: LD_INT 4
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: LD_INT 4
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: LD_INT 3
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: LD_INT 5
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: LD_INT 5
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: LD_INT 4
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 6
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 6
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 5
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43707: LD_ADDR_VAR 0 30
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 3
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 3
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 3
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 4
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 4
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 4
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 5
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 5
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 5
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 6
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 6
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43850: LD_ADDR_VAR 0 31
43854: PUSH
43855: LD_INT 3
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 3
43867: PUSH
43868: LD_INT 3
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 2
43877: PUSH
43878: LD_INT 3
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 4
43887: PUSH
43888: LD_INT 3
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 4
43897: PUSH
43898: LD_INT 4
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 3
43907: PUSH
43908: LD_INT 4
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 5
43917: PUSH
43918: LD_INT 4
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 5
43927: PUSH
43928: LD_INT 5
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 4
43937: PUSH
43938: LD_INT 5
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 6
43947: PUSH
43948: LD_INT 5
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 6
43957: PUSH
43958: LD_INT 6
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 5
43967: PUSH
43968: LD_INT 6
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43989: LD_ADDR_VAR 0 32
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: LD_INT 3
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 3
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: LD_INT 2
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 4
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 4
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: LD_INT 3
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: LD_INT 5
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: LD_INT 5
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: LD_INT 4
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: LD_INT 6
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: LD_INT 6
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: NEG
44110: PUSH
44111: LD_INT 5
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44132: LD_ADDR_VAR 0 33
44136: PUSH
44137: LD_INT 2
44139: NEG
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 3
44150: NEG
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 3
44161: NEG
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 3
44173: NEG
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 4
44184: NEG
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 4
44195: NEG
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 4
44207: NEG
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 5
44218: NEG
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 5
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 5
44241: NEG
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 6
44252: NEG
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 6
44263: NEG
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44287: LD_ADDR_VAR 0 34
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: LD_INT 3
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 3
44306: NEG
44307: PUSH
44308: LD_INT 2
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 3
44318: NEG
44319: PUSH
44320: LD_INT 3
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 3
44330: NEG
44331: PUSH
44332: LD_INT 4
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 4
44342: NEG
44343: PUSH
44344: LD_INT 3
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 4
44354: NEG
44355: PUSH
44356: LD_INT 4
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 4
44366: NEG
44367: PUSH
44368: LD_INT 5
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 5
44378: NEG
44379: PUSH
44380: LD_INT 4
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 5
44390: NEG
44391: PUSH
44392: LD_INT 5
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 5
44402: NEG
44403: PUSH
44404: LD_INT 6
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 6
44414: NEG
44415: PUSH
44416: LD_INT 5
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 6
44426: NEG
44427: PUSH
44428: LD_INT 6
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44450: LD_ADDR_VAR 0 41
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: LD_INT 3
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44494: LD_ADDR_VAR 0 42
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 3
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: LIST
44534: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44535: LD_ADDR_VAR 0 43
44539: PUSH
44540: LD_INT 2
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 3
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: LD_INT 3
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: LIST
44574: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44575: LD_ADDR_VAR 0 44
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: LD_INT 3
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: LIST
44615: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44616: LD_ADDR_VAR 0 45
44620: PUSH
44621: LD_INT 2
44623: NEG
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: NEG
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 3
44645: NEG
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: LIST
44659: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44660: LD_ADDR_VAR 0 46
44664: PUSH
44665: LD_INT 2
44667: NEG
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 2
44679: NEG
44680: PUSH
44681: LD_INT 3
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 3
44691: NEG
44692: PUSH
44693: LD_INT 2
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: LIST
44705: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44706: LD_ADDR_VAR 0 47
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: LD_INT 3
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: LD_INT 3
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44739: LD_ADDR_VAR 0 48
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44770: LD_ADDR_VAR 0 49
44774: PUSH
44775: LD_INT 3
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 3
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44799: LD_ADDR_VAR 0 50
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: LD_INT 3
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: LD_INT 3
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44828: LD_ADDR_VAR 0 51
44832: PUSH
44833: LD_INT 1
44835: NEG
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: NEG
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44859: LD_ADDR_VAR 0 52
44863: PUSH
44864: LD_INT 3
44866: NEG
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 3
44878: NEG
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44892: LD_ADDR_VAR 0 53
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: LD_INT 3
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 3
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: LD_INT 2
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: LIST
44935: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44936: LD_ADDR_VAR 0 54
44940: PUSH
44941: LD_INT 2
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 3
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 3
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44977: LD_ADDR_VAR 0 55
44981: PUSH
44982: LD_INT 3
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: LD_INT 3
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: LD_INT 3
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: LIST
45016: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45017: LD_ADDR_VAR 0 56
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: LD_INT 3
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 3
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: LD_INT 2
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: LIST
45057: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45058: LD_ADDR_VAR 0 57
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: LD_INT 1
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 3
45076: NEG
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 3
45087: NEG
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: LIST
45101: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45102: LD_ADDR_VAR 0 58
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: LD_INT 3
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 3
45121: NEG
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 3
45133: NEG
45134: PUSH
45135: LD_INT 3
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: LIST
45147: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45148: LD_ADDR_VAR 0 59
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: LD_INT 2
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: LIST
45191: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45192: LD_ADDR_VAR 0 60
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: LIST
45232: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45233: LD_ADDR_VAR 0 61
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: LD_INT 2
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: LIST
45272: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45273: LD_ADDR_VAR 0 62
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 2
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: LIST
45313: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45314: LD_ADDR_VAR 0 63
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 2
45343: NEG
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: LIST
45357: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45358: LD_ADDR_VAR 0 64
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 2
45377: NEG
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 2
45389: NEG
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: LIST
45403: ST_TO_ADDR
// end ; 2 :
45404: GO 48670
45406: LD_INT 2
45408: DOUBLE
45409: EQUAL
45410: IFTRUE 45414
45412: GO 48669
45414: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45415: LD_ADDR_VAR 0 29
45419: PUSH
45420: LD_INT 4
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 4
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 5
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 5
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 4
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 3
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 3
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 3
45494: PUSH
45495: LD_INT 2
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 5
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 3
45515: PUSH
45516: LD_INT 3
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 3
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 4
45535: PUSH
45536: LD_INT 3
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 4
45545: PUSH
45546: LD_INT 4
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 3
45555: PUSH
45556: LD_INT 4
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 2
45565: PUSH
45566: LD_INT 3
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 4
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: LD_INT 4
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: LD_INT 4
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 3
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: LD_INT 4
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: LD_INT 5
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 5
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: LD_INT 4
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: LD_INT 3
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: LD_INT 5
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: LD_INT 3
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 3
45698: NEG
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 3
45709: NEG
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 3
45743: NEG
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 4
45754: NEG
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 4
45765: NEG
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 4
45777: NEG
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 2
45789: NEG
45790: PUSH
45791: LD_INT 2
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 4
45800: NEG
45801: PUSH
45802: LD_INT 4
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 4
45812: NEG
45813: PUSH
45814: LD_INT 5
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 3
45824: NEG
45825: PUSH
45826: LD_INT 4
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 3
45836: NEG
45837: PUSH
45838: LD_INT 3
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 4
45848: NEG
45849: PUSH
45850: LD_INT 3
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 5
45860: NEG
45861: PUSH
45862: LD_INT 4
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 5
45872: NEG
45873: PUSH
45874: LD_INT 5
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 3
45884: NEG
45885: PUSH
45886: LD_INT 5
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 5
45896: NEG
45897: PUSH
45898: LD_INT 3
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45953: LD_ADDR_VAR 0 30
45957: PUSH
45958: LD_INT 4
45960: PUSH
45961: LD_INT 4
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 4
45970: PUSH
45971: LD_INT 3
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 5
45980: PUSH
45981: LD_INT 4
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 5
45990: PUSH
45991: LD_INT 5
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 4
46000: PUSH
46001: LD_INT 5
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 3
46010: PUSH
46011: LD_INT 4
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 3
46020: PUSH
46021: LD_INT 3
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 5
46030: PUSH
46031: LD_INT 3
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 3
46040: PUSH
46041: LD_INT 5
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: LD_INT 3
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 2
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: LD_INT 3
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: LD_INT 4
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: LD_INT 4
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: LD_INT 3
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: LD_INT 4
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 4
46143: NEG
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 4
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 3
46166: NEG
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 3
46177: NEG
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 4
46188: NEG
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 5
46199: NEG
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 5
46210: NEG
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 5
46222: NEG
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 3
46234: NEG
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 3
46245: NEG
46246: PUSH
46247: LD_INT 3
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 3
46257: NEG
46258: PUSH
46259: LD_INT 4
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: LD_INT 3
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: NEG
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 3
46293: NEG
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 4
46305: NEG
46306: PUSH
46307: LD_INT 3
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 4
46317: NEG
46318: PUSH
46319: LD_INT 4
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: NEG
46330: PUSH
46331: LD_INT 4
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 4
46341: NEG
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 4
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: LD_INT 5
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: LD_INT 4
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 3
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: LD_INT 3
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: LD_INT 4
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: LD_INT 5
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: LD_INT 3
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: LD_INT 5
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46500: LD_ADDR_VAR 0 31
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 4
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 3
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: LD_INT 4
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: LD_INT 5
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 5
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: LD_INT 4
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: LD_INT 3
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 5
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: LD_INT 3
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 3
46600: NEG
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 3
46611: NEG
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 3
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 4
46656: NEG
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 4
46667: NEG
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 4
46679: NEG
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: NEG
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 4
46702: NEG
46703: PUSH
46704: LD_INT 4
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 4
46714: NEG
46715: PUSH
46716: LD_INT 5
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 3
46726: NEG
46727: PUSH
46728: LD_INT 4
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 3
46738: NEG
46739: PUSH
46740: LD_INT 3
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 4
46750: NEG
46751: PUSH
46752: LD_INT 3
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 5
46762: NEG
46763: PUSH
46764: LD_INT 4
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 5
46774: NEG
46775: PUSH
46776: LD_INT 5
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 3
46786: NEG
46787: PUSH
46788: LD_INT 5
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 5
46798: NEG
46799: PUSH
46800: LD_INT 3
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 3
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 4
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 3
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: LD_INT 2
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 3
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 4
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 2
46889: PUSH
46890: LD_INT 2
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: LD_INT 4
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 4
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 4
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 5
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 5
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 4
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 3
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 3
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 3
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 5
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47050: LD_ADDR_VAR 0 32
47054: PUSH
47055: LD_INT 4
47057: NEG
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 4
47068: NEG
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 3
47080: NEG
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 3
47091: NEG
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 4
47102: NEG
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 5
47113: NEG
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 5
47124: NEG
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 5
47136: NEG
47137: PUSH
47138: LD_INT 2
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 3
47148: NEG
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 3
47159: NEG
47160: PUSH
47161: LD_INT 3
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 3
47171: NEG
47172: PUSH
47173: LD_INT 4
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 2
47183: NEG
47184: PUSH
47185: LD_INT 3
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: NEG
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 3
47207: NEG
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 4
47219: NEG
47220: PUSH
47221: LD_INT 3
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 4
47231: NEG
47232: PUSH
47233: LD_INT 4
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: LD_INT 4
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 4
47255: NEG
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 4
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 5
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 4
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: LD_INT 3
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: LD_INT 3
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 4
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: LD_INT 5
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: LD_INT 3
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: LD_INT 5
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 3
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 3
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 4
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 4
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 3
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 2
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 4
47452: PUSH
47453: LD_INT 2
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 4
47462: PUSH
47463: LD_INT 4
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 4
47472: PUSH
47473: LD_INT 3
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 5
47482: PUSH
47483: LD_INT 4
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 5
47492: PUSH
47493: LD_INT 5
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 4
47502: PUSH
47503: LD_INT 5
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 3
47512: PUSH
47513: LD_INT 4
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 3
47522: PUSH
47523: LD_INT 3
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 5
47532: PUSH
47533: LD_INT 3
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 3
47542: PUSH
47543: LD_INT 5
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47597: LD_ADDR_VAR 0 33
47601: PUSH
47602: LD_INT 4
47604: NEG
47605: PUSH
47606: LD_INT 4
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 4
47616: NEG
47617: PUSH
47618: LD_INT 5
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 3
47628: NEG
47629: PUSH
47630: LD_INT 4
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 3
47640: NEG
47641: PUSH
47642: LD_INT 3
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 4
47652: NEG
47653: PUSH
47654: LD_INT 3
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 5
47664: NEG
47665: PUSH
47666: LD_INT 4
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 5
47676: NEG
47677: PUSH
47678: LD_INT 5
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 3
47688: NEG
47689: PUSH
47690: LD_INT 5
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 5
47700: NEG
47701: PUSH
47702: LD_INT 3
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: LD_INT 3
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 4
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: LD_INT 3
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: LD_INT 2
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 2
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: LD_INT 3
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: LD_INT 4
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 2
47802: NEG
47803: PUSH
47804: LD_INT 4
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 4
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 4
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 5
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 5
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 4
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 3
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 3
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 3
47886: PUSH
47887: LD_INT 2
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 5
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 3
47907: PUSH
47908: LD_INT 3
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 3
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 4
47927: PUSH
47928: LD_INT 3
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 4
47937: PUSH
47938: LD_INT 4
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 3
47947: PUSH
47948: LD_INT 4
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: LD_INT 3
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: LD_INT 2
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 4
47977: PUSH
47978: LD_INT 2
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: LD_INT 4
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 4
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 3
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: LD_INT 4
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: LD_INT 5
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: LD_INT 5
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: LD_INT 4
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: LD_INT 3
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: LD_INT 5
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48135: LD_ADDR_VAR 0 34
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 4
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: LD_INT 5
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: LD_INT 4
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 3
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 3
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: LD_INT 4
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: LD_INT 5
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: PUSH
48222: LD_INT 3
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: LD_INT 5
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 3
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 4
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 4
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 3
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 4
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 4
48337: PUSH
48338: LD_INT 4
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 4
48347: PUSH
48348: LD_INT 3
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 5
48357: PUSH
48358: LD_INT 4
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 5
48367: PUSH
48368: LD_INT 5
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 4
48377: PUSH
48378: LD_INT 5
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 3
48387: PUSH
48388: LD_INT 4
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 3
48397: PUSH
48398: LD_INT 3
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 5
48407: PUSH
48408: LD_INT 3
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 3
48417: PUSH
48418: LD_INT 5
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 3
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: LD_INT 2
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: LD_INT 3
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 4
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 4
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: LD_INT 3
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: LD_INT 4
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 4
48520: NEG
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 4
48531: NEG
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 3
48543: NEG
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 3
48554: NEG
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 4
48565: NEG
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 5
48576: NEG
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 5
48587: NEG
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 5
48599: NEG
48600: PUSH
48601: LD_INT 2
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 3
48611: NEG
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: ST_TO_ADDR
// end ; end ;
48667: GO 48670
48669: POP
// case btype of b_depot , b_warehouse :
48670: LD_VAR 0 1
48674: PUSH
48675: LD_INT 0
48677: DOUBLE
48678: EQUAL
48679: IFTRUE 48689
48681: LD_INT 1
48683: DOUBLE
48684: EQUAL
48685: IFTRUE 48689
48687: GO 48890
48689: POP
// case nation of nation_american :
48690: LD_VAR 0 5
48694: PUSH
48695: LD_INT 1
48697: DOUBLE
48698: EQUAL
48699: IFTRUE 48703
48701: GO 48759
48703: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48704: LD_ADDR_VAR 0 9
48708: PUSH
48709: LD_VAR 0 11
48713: PUSH
48714: LD_VAR 0 12
48718: PUSH
48719: LD_VAR 0 13
48723: PUSH
48724: LD_VAR 0 14
48728: PUSH
48729: LD_VAR 0 15
48733: PUSH
48734: LD_VAR 0 16
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: PUSH
48747: LD_VAR 0 4
48751: PUSH
48752: LD_INT 1
48754: PLUS
48755: ARRAY
48756: ST_TO_ADDR
48757: GO 48888
48759: LD_INT 2
48761: DOUBLE
48762: EQUAL
48763: IFTRUE 48767
48765: GO 48823
48767: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48768: LD_ADDR_VAR 0 9
48772: PUSH
48773: LD_VAR 0 17
48777: PUSH
48778: LD_VAR 0 18
48782: PUSH
48783: LD_VAR 0 19
48787: PUSH
48788: LD_VAR 0 20
48792: PUSH
48793: LD_VAR 0 21
48797: PUSH
48798: LD_VAR 0 22
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: PUSH
48811: LD_VAR 0 4
48815: PUSH
48816: LD_INT 1
48818: PLUS
48819: ARRAY
48820: ST_TO_ADDR
48821: GO 48888
48823: LD_INT 3
48825: DOUBLE
48826: EQUAL
48827: IFTRUE 48831
48829: GO 48887
48831: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48832: LD_ADDR_VAR 0 9
48836: PUSH
48837: LD_VAR 0 23
48841: PUSH
48842: LD_VAR 0 24
48846: PUSH
48847: LD_VAR 0 25
48851: PUSH
48852: LD_VAR 0 26
48856: PUSH
48857: LD_VAR 0 27
48861: PUSH
48862: LD_VAR 0 28
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: PUSH
48875: LD_VAR 0 4
48879: PUSH
48880: LD_INT 1
48882: PLUS
48883: ARRAY
48884: ST_TO_ADDR
48885: GO 48888
48887: POP
48888: GO 49443
48890: LD_INT 2
48892: DOUBLE
48893: EQUAL
48894: IFTRUE 48904
48896: LD_INT 3
48898: DOUBLE
48899: EQUAL
48900: IFTRUE 48904
48902: GO 48960
48904: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48905: LD_ADDR_VAR 0 9
48909: PUSH
48910: LD_VAR 0 29
48914: PUSH
48915: LD_VAR 0 30
48919: PUSH
48920: LD_VAR 0 31
48924: PUSH
48925: LD_VAR 0 32
48929: PUSH
48930: LD_VAR 0 33
48934: PUSH
48935: LD_VAR 0 34
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: PUSH
48948: LD_VAR 0 4
48952: PUSH
48953: LD_INT 1
48955: PLUS
48956: ARRAY
48957: ST_TO_ADDR
48958: GO 49443
48960: LD_INT 16
48962: DOUBLE
48963: EQUAL
48964: IFTRUE 49022
48966: LD_INT 17
48968: DOUBLE
48969: EQUAL
48970: IFTRUE 49022
48972: LD_INT 18
48974: DOUBLE
48975: EQUAL
48976: IFTRUE 49022
48978: LD_INT 19
48980: DOUBLE
48981: EQUAL
48982: IFTRUE 49022
48984: LD_INT 22
48986: DOUBLE
48987: EQUAL
48988: IFTRUE 49022
48990: LD_INT 20
48992: DOUBLE
48993: EQUAL
48994: IFTRUE 49022
48996: LD_INT 21
48998: DOUBLE
48999: EQUAL
49000: IFTRUE 49022
49002: LD_INT 23
49004: DOUBLE
49005: EQUAL
49006: IFTRUE 49022
49008: LD_INT 24
49010: DOUBLE
49011: EQUAL
49012: IFTRUE 49022
49014: LD_INT 25
49016: DOUBLE
49017: EQUAL
49018: IFTRUE 49022
49020: GO 49078
49022: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49023: LD_ADDR_VAR 0 9
49027: PUSH
49028: LD_VAR 0 35
49032: PUSH
49033: LD_VAR 0 36
49037: PUSH
49038: LD_VAR 0 37
49042: PUSH
49043: LD_VAR 0 38
49047: PUSH
49048: LD_VAR 0 39
49052: PUSH
49053: LD_VAR 0 40
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: PUSH
49066: LD_VAR 0 4
49070: PUSH
49071: LD_INT 1
49073: PLUS
49074: ARRAY
49075: ST_TO_ADDR
49076: GO 49443
49078: LD_INT 6
49080: DOUBLE
49081: EQUAL
49082: IFTRUE 49134
49084: LD_INT 7
49086: DOUBLE
49087: EQUAL
49088: IFTRUE 49134
49090: LD_INT 8
49092: DOUBLE
49093: EQUAL
49094: IFTRUE 49134
49096: LD_INT 13
49098: DOUBLE
49099: EQUAL
49100: IFTRUE 49134
49102: LD_INT 12
49104: DOUBLE
49105: EQUAL
49106: IFTRUE 49134
49108: LD_INT 15
49110: DOUBLE
49111: EQUAL
49112: IFTRUE 49134
49114: LD_INT 11
49116: DOUBLE
49117: EQUAL
49118: IFTRUE 49134
49120: LD_INT 14
49122: DOUBLE
49123: EQUAL
49124: IFTRUE 49134
49126: LD_INT 10
49128: DOUBLE
49129: EQUAL
49130: IFTRUE 49134
49132: GO 49190
49134: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49135: LD_ADDR_VAR 0 9
49139: PUSH
49140: LD_VAR 0 41
49144: PUSH
49145: LD_VAR 0 42
49149: PUSH
49150: LD_VAR 0 43
49154: PUSH
49155: LD_VAR 0 44
49159: PUSH
49160: LD_VAR 0 45
49164: PUSH
49165: LD_VAR 0 46
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: PUSH
49178: LD_VAR 0 4
49182: PUSH
49183: LD_INT 1
49185: PLUS
49186: ARRAY
49187: ST_TO_ADDR
49188: GO 49443
49190: LD_INT 36
49192: DOUBLE
49193: EQUAL
49194: IFTRUE 49198
49196: GO 49254
49198: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49199: LD_ADDR_VAR 0 9
49203: PUSH
49204: LD_VAR 0 47
49208: PUSH
49209: LD_VAR 0 48
49213: PUSH
49214: LD_VAR 0 49
49218: PUSH
49219: LD_VAR 0 50
49223: PUSH
49224: LD_VAR 0 51
49228: PUSH
49229: LD_VAR 0 52
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: PUSH
49242: LD_VAR 0 4
49246: PUSH
49247: LD_INT 1
49249: PLUS
49250: ARRAY
49251: ST_TO_ADDR
49252: GO 49443
49254: LD_INT 4
49256: DOUBLE
49257: EQUAL
49258: IFTRUE 49280
49260: LD_INT 5
49262: DOUBLE
49263: EQUAL
49264: IFTRUE 49280
49266: LD_INT 34
49268: DOUBLE
49269: EQUAL
49270: IFTRUE 49280
49272: LD_INT 37
49274: DOUBLE
49275: EQUAL
49276: IFTRUE 49280
49278: GO 49336
49280: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49281: LD_ADDR_VAR 0 9
49285: PUSH
49286: LD_VAR 0 53
49290: PUSH
49291: LD_VAR 0 54
49295: PUSH
49296: LD_VAR 0 55
49300: PUSH
49301: LD_VAR 0 56
49305: PUSH
49306: LD_VAR 0 57
49310: PUSH
49311: LD_VAR 0 58
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: PUSH
49324: LD_VAR 0 4
49328: PUSH
49329: LD_INT 1
49331: PLUS
49332: ARRAY
49333: ST_TO_ADDR
49334: GO 49443
49336: LD_INT 31
49338: DOUBLE
49339: EQUAL
49340: IFTRUE 49386
49342: LD_INT 32
49344: DOUBLE
49345: EQUAL
49346: IFTRUE 49386
49348: LD_INT 33
49350: DOUBLE
49351: EQUAL
49352: IFTRUE 49386
49354: LD_INT 27
49356: DOUBLE
49357: EQUAL
49358: IFTRUE 49386
49360: LD_INT 26
49362: DOUBLE
49363: EQUAL
49364: IFTRUE 49386
49366: LD_INT 28
49368: DOUBLE
49369: EQUAL
49370: IFTRUE 49386
49372: LD_INT 29
49374: DOUBLE
49375: EQUAL
49376: IFTRUE 49386
49378: LD_INT 30
49380: DOUBLE
49381: EQUAL
49382: IFTRUE 49386
49384: GO 49442
49386: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49387: LD_ADDR_VAR 0 9
49391: PUSH
49392: LD_VAR 0 59
49396: PUSH
49397: LD_VAR 0 60
49401: PUSH
49402: LD_VAR 0 61
49406: PUSH
49407: LD_VAR 0 62
49411: PUSH
49412: LD_VAR 0 63
49416: PUSH
49417: LD_VAR 0 64
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: PUSH
49430: LD_VAR 0 4
49434: PUSH
49435: LD_INT 1
49437: PLUS
49438: ARRAY
49439: ST_TO_ADDR
49440: GO 49443
49442: POP
// temp_list2 = [ ] ;
49443: LD_ADDR_VAR 0 10
49447: PUSH
49448: EMPTY
49449: ST_TO_ADDR
// for i in temp_list do
49450: LD_ADDR_VAR 0 8
49454: PUSH
49455: LD_VAR 0 9
49459: PUSH
49460: FOR_IN
49461: IFFALSE 49513
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49463: LD_ADDR_VAR 0 10
49467: PUSH
49468: LD_VAR 0 10
49472: PUSH
49473: LD_VAR 0 8
49477: PUSH
49478: LD_INT 1
49480: ARRAY
49481: PUSH
49482: LD_VAR 0 2
49486: PLUS
49487: PUSH
49488: LD_VAR 0 8
49492: PUSH
49493: LD_INT 2
49495: ARRAY
49496: PUSH
49497: LD_VAR 0 3
49501: PLUS
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: EMPTY
49508: LIST
49509: ADD
49510: ST_TO_ADDR
49511: GO 49460
49513: POP
49514: POP
// result = temp_list2 ;
49515: LD_ADDR_VAR 0 7
49519: PUSH
49520: LD_VAR 0 10
49524: ST_TO_ADDR
// end ;
49525: LD_VAR 0 7
49529: RET
// export function EnemyInRange ( unit , dist ) ; begin
49530: LD_INT 0
49532: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49533: LD_ADDR_VAR 0 3
49537: PUSH
49538: LD_VAR 0 1
49542: PPUSH
49543: CALL_OW 255
49547: PPUSH
49548: LD_VAR 0 1
49552: PPUSH
49553: CALL_OW 250
49557: PPUSH
49558: LD_VAR 0 1
49562: PPUSH
49563: CALL_OW 251
49567: PPUSH
49568: LD_VAR 0 2
49572: PPUSH
49573: CALL 22903 0 4
49577: PUSH
49578: LD_INT 4
49580: ARRAY
49581: ST_TO_ADDR
// end ;
49582: LD_VAR 0 3
49586: RET
// export function PlayerSeeMe ( unit ) ; begin
49587: LD_INT 0
49589: PPUSH
// result := See ( your_side , unit ) ;
49590: LD_ADDR_VAR 0 2
49594: PUSH
49595: LD_OWVAR 2
49599: PPUSH
49600: LD_VAR 0 1
49604: PPUSH
49605: CALL_OW 292
49609: ST_TO_ADDR
// end ;
49610: LD_VAR 0 2
49614: RET
// export function ReverseDir ( unit ) ; begin
49615: LD_INT 0
49617: PPUSH
// if not unit then
49618: LD_VAR 0 1
49622: NOT
49623: IFFALSE 49627
// exit ;
49625: GO 49650
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49627: LD_ADDR_VAR 0 2
49631: PUSH
49632: LD_VAR 0 1
49636: PPUSH
49637: CALL_OW 254
49641: PUSH
49642: LD_INT 3
49644: PLUS
49645: PUSH
49646: LD_INT 6
49648: MOD
49649: ST_TO_ADDR
// end ;
49650: LD_VAR 0 2
49654: RET
// export function ReverseArray ( array ) ; var i ; begin
49655: LD_INT 0
49657: PPUSH
49658: PPUSH
// if not array then
49659: LD_VAR 0 1
49663: NOT
49664: IFFALSE 49668
// exit ;
49666: GO 49723
// result := [ ] ;
49668: LD_ADDR_VAR 0 2
49672: PUSH
49673: EMPTY
49674: ST_TO_ADDR
// for i := array downto 1 do
49675: LD_ADDR_VAR 0 3
49679: PUSH
49680: DOUBLE
49681: LD_VAR 0 1
49685: INC
49686: ST_TO_ADDR
49687: LD_INT 1
49689: PUSH
49690: FOR_DOWNTO
49691: IFFALSE 49721
// result := Join ( result , array [ i ] ) ;
49693: LD_ADDR_VAR 0 2
49697: PUSH
49698: LD_VAR 0 2
49702: PPUSH
49703: LD_VAR 0 1
49707: PUSH
49708: LD_VAR 0 3
49712: ARRAY
49713: PPUSH
49714: CALL 54388 0 2
49718: ST_TO_ADDR
49719: GO 49690
49721: POP
49722: POP
// end ;
49723: LD_VAR 0 2
49727: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49728: LD_INT 0
49730: PPUSH
49731: PPUSH
49732: PPUSH
49733: PPUSH
49734: PPUSH
49735: PPUSH
// if not unit or not hexes then
49736: LD_VAR 0 1
49740: NOT
49741: PUSH
49742: LD_VAR 0 2
49746: NOT
49747: OR
49748: IFFALSE 49752
// exit ;
49750: GO 49875
// dist := 9999 ;
49752: LD_ADDR_VAR 0 5
49756: PUSH
49757: LD_INT 9999
49759: ST_TO_ADDR
// for i = 1 to hexes do
49760: LD_ADDR_VAR 0 4
49764: PUSH
49765: DOUBLE
49766: LD_INT 1
49768: DEC
49769: ST_TO_ADDR
49770: LD_VAR 0 2
49774: PUSH
49775: FOR_TO
49776: IFFALSE 49863
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49778: LD_ADDR_VAR 0 6
49782: PUSH
49783: LD_VAR 0 1
49787: PPUSH
49788: LD_VAR 0 2
49792: PUSH
49793: LD_VAR 0 4
49797: ARRAY
49798: PUSH
49799: LD_INT 1
49801: ARRAY
49802: PPUSH
49803: LD_VAR 0 2
49807: PUSH
49808: LD_VAR 0 4
49812: ARRAY
49813: PUSH
49814: LD_INT 2
49816: ARRAY
49817: PPUSH
49818: CALL_OW 297
49822: ST_TO_ADDR
// if tdist < dist then
49823: LD_VAR 0 6
49827: PUSH
49828: LD_VAR 0 5
49832: LESS
49833: IFFALSE 49861
// begin hex := hexes [ i ] ;
49835: LD_ADDR_VAR 0 8
49839: PUSH
49840: LD_VAR 0 2
49844: PUSH
49845: LD_VAR 0 4
49849: ARRAY
49850: ST_TO_ADDR
// dist := tdist ;
49851: LD_ADDR_VAR 0 5
49855: PUSH
49856: LD_VAR 0 6
49860: ST_TO_ADDR
// end ; end ;
49861: GO 49775
49863: POP
49864: POP
// result := hex ;
49865: LD_ADDR_VAR 0 3
49869: PUSH
49870: LD_VAR 0 8
49874: ST_TO_ADDR
// end ;
49875: LD_VAR 0 3
49879: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49880: LD_INT 0
49882: PPUSH
49883: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49884: LD_VAR 0 1
49888: NOT
49889: PUSH
49890: LD_VAR 0 1
49894: PUSH
49895: LD_INT 21
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 23
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PPUSH
49919: CALL_OW 69
49923: IN
49924: NOT
49925: OR
49926: IFFALSE 49930
// exit ;
49928: GO 49977
// for i = 1 to 3 do
49930: LD_ADDR_VAR 0 3
49934: PUSH
49935: DOUBLE
49936: LD_INT 1
49938: DEC
49939: ST_TO_ADDR
49940: LD_INT 3
49942: PUSH
49943: FOR_TO
49944: IFFALSE 49975
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49946: LD_VAR 0 1
49950: PPUSH
49951: CALL_OW 250
49955: PPUSH
49956: LD_VAR 0 1
49960: PPUSH
49961: CALL_OW 251
49965: PPUSH
49966: LD_INT 1
49968: PPUSH
49969: CALL_OW 453
49973: GO 49943
49975: POP
49976: POP
// end ;
49977: LD_VAR 0 2
49981: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49982: LD_INT 0
49984: PPUSH
49985: PPUSH
49986: PPUSH
49987: PPUSH
49988: PPUSH
49989: PPUSH
// if not unit or not enemy_unit then
49990: LD_VAR 0 1
49994: NOT
49995: PUSH
49996: LD_VAR 0 2
50000: NOT
50001: OR
50002: IFFALSE 50006
// exit ;
50004: GO 50473
// if GetLives ( i ) < 250 then
50006: LD_VAR 0 4
50010: PPUSH
50011: CALL_OW 256
50015: PUSH
50016: LD_INT 250
50018: LESS
50019: IFFALSE 50032
// begin ComAutodestruct ( i ) ;
50021: LD_VAR 0 4
50025: PPUSH
50026: CALL 49880 0 1
// exit ;
50030: GO 50473
// end ; x := GetX ( enemy_unit ) ;
50032: LD_ADDR_VAR 0 7
50036: PUSH
50037: LD_VAR 0 2
50041: PPUSH
50042: CALL_OW 250
50046: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50047: LD_ADDR_VAR 0 8
50051: PUSH
50052: LD_VAR 0 2
50056: PPUSH
50057: CALL_OW 251
50061: ST_TO_ADDR
// if not x or not y then
50062: LD_VAR 0 7
50066: NOT
50067: PUSH
50068: LD_VAR 0 8
50072: NOT
50073: OR
50074: IFFALSE 50078
// exit ;
50076: GO 50473
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50078: LD_ADDR_VAR 0 6
50082: PUSH
50083: LD_VAR 0 7
50087: PPUSH
50088: LD_INT 0
50090: PPUSH
50091: LD_INT 4
50093: PPUSH
50094: CALL_OW 272
50098: PUSH
50099: LD_VAR 0 8
50103: PPUSH
50104: LD_INT 0
50106: PPUSH
50107: LD_INT 4
50109: PPUSH
50110: CALL_OW 273
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_VAR 0 7
50123: PPUSH
50124: LD_INT 1
50126: PPUSH
50127: LD_INT 4
50129: PPUSH
50130: CALL_OW 272
50134: PUSH
50135: LD_VAR 0 8
50139: PPUSH
50140: LD_INT 1
50142: PPUSH
50143: LD_INT 4
50145: PPUSH
50146: CALL_OW 273
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_VAR 0 7
50159: PPUSH
50160: LD_INT 2
50162: PPUSH
50163: LD_INT 4
50165: PPUSH
50166: CALL_OW 272
50170: PUSH
50171: LD_VAR 0 8
50175: PPUSH
50176: LD_INT 2
50178: PPUSH
50179: LD_INT 4
50181: PPUSH
50182: CALL_OW 273
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_VAR 0 7
50195: PPUSH
50196: LD_INT 3
50198: PPUSH
50199: LD_INT 4
50201: PPUSH
50202: CALL_OW 272
50206: PUSH
50207: LD_VAR 0 8
50211: PPUSH
50212: LD_INT 3
50214: PPUSH
50215: LD_INT 4
50217: PPUSH
50218: CALL_OW 273
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_VAR 0 7
50231: PPUSH
50232: LD_INT 4
50234: PPUSH
50235: LD_INT 4
50237: PPUSH
50238: CALL_OW 272
50242: PUSH
50243: LD_VAR 0 8
50247: PPUSH
50248: LD_INT 4
50250: PPUSH
50251: LD_INT 4
50253: PPUSH
50254: CALL_OW 273
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_VAR 0 7
50267: PPUSH
50268: LD_INT 5
50270: PPUSH
50271: LD_INT 4
50273: PPUSH
50274: CALL_OW 272
50278: PUSH
50279: LD_VAR 0 8
50283: PPUSH
50284: LD_INT 5
50286: PPUSH
50287: LD_INT 4
50289: PPUSH
50290: CALL_OW 273
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: ST_TO_ADDR
// for i = tmp downto 1 do
50307: LD_ADDR_VAR 0 4
50311: PUSH
50312: DOUBLE
50313: LD_VAR 0 6
50317: INC
50318: ST_TO_ADDR
50319: LD_INT 1
50321: PUSH
50322: FOR_DOWNTO
50323: IFFALSE 50424
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50325: LD_VAR 0 6
50329: PUSH
50330: LD_VAR 0 4
50334: ARRAY
50335: PUSH
50336: LD_INT 1
50338: ARRAY
50339: PPUSH
50340: LD_VAR 0 6
50344: PUSH
50345: LD_VAR 0 4
50349: ARRAY
50350: PUSH
50351: LD_INT 2
50353: ARRAY
50354: PPUSH
50355: CALL_OW 488
50359: NOT
50360: PUSH
50361: LD_VAR 0 6
50365: PUSH
50366: LD_VAR 0 4
50370: ARRAY
50371: PUSH
50372: LD_INT 1
50374: ARRAY
50375: PPUSH
50376: LD_VAR 0 6
50380: PUSH
50381: LD_VAR 0 4
50385: ARRAY
50386: PUSH
50387: LD_INT 2
50389: ARRAY
50390: PPUSH
50391: CALL_OW 428
50395: PUSH
50396: LD_INT 0
50398: NONEQUAL
50399: OR
50400: IFFALSE 50422
// tmp := Delete ( tmp , i ) ;
50402: LD_ADDR_VAR 0 6
50406: PUSH
50407: LD_VAR 0 6
50411: PPUSH
50412: LD_VAR 0 4
50416: PPUSH
50417: CALL_OW 3
50421: ST_TO_ADDR
50422: GO 50322
50424: POP
50425: POP
// j := GetClosestHex ( unit , tmp ) ;
50426: LD_ADDR_VAR 0 5
50430: PUSH
50431: LD_VAR 0 1
50435: PPUSH
50436: LD_VAR 0 6
50440: PPUSH
50441: CALL 49728 0 2
50445: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50446: LD_VAR 0 1
50450: PPUSH
50451: LD_VAR 0 5
50455: PUSH
50456: LD_INT 1
50458: ARRAY
50459: PPUSH
50460: LD_VAR 0 5
50464: PUSH
50465: LD_INT 2
50467: ARRAY
50468: PPUSH
50469: CALL_OW 111
// end ;
50473: LD_VAR 0 3
50477: RET
// export function PrepareApemanSoldier ( ) ; begin
50478: LD_INT 0
50480: PPUSH
// uc_nation := 0 ;
50481: LD_ADDR_OWVAR 21
50485: PUSH
50486: LD_INT 0
50488: ST_TO_ADDR
// hc_sex := sex_male ;
50489: LD_ADDR_OWVAR 27
50493: PUSH
50494: LD_INT 1
50496: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50497: LD_ADDR_OWVAR 28
50501: PUSH
50502: LD_INT 15
50504: ST_TO_ADDR
// hc_gallery :=  ;
50505: LD_ADDR_OWVAR 33
50509: PUSH
50510: LD_STRING 
50512: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50513: LD_ADDR_OWVAR 31
50517: PUSH
50518: LD_INT 0
50520: PPUSH
50521: LD_INT 3
50523: PPUSH
50524: CALL_OW 12
50528: PUSH
50529: LD_INT 0
50531: PPUSH
50532: LD_INT 3
50534: PPUSH
50535: CALL_OW 12
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: ST_TO_ADDR
// end ;
50552: LD_VAR 0 1
50556: RET
// export function PrepareApemanEngineer ( ) ; begin
50557: LD_INT 0
50559: PPUSH
// uc_nation := 0 ;
50560: LD_ADDR_OWVAR 21
50564: PUSH
50565: LD_INT 0
50567: ST_TO_ADDR
// hc_sex := sex_male ;
50568: LD_ADDR_OWVAR 27
50572: PUSH
50573: LD_INT 1
50575: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50576: LD_ADDR_OWVAR 28
50580: PUSH
50581: LD_INT 16
50583: ST_TO_ADDR
// hc_gallery :=  ;
50584: LD_ADDR_OWVAR 33
50588: PUSH
50589: LD_STRING 
50591: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50592: LD_ADDR_OWVAR 31
50596: PUSH
50597: LD_INT 0
50599: PPUSH
50600: LD_INT 3
50602: PPUSH
50603: CALL_OW 12
50607: PUSH
50608: LD_INT 0
50610: PPUSH
50611: LD_INT 3
50613: PPUSH
50614: CALL_OW 12
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: ST_TO_ADDR
// end ;
50631: LD_VAR 0 1
50635: RET
// export function PrepareApeman ( agressivity ) ; begin
50636: LD_INT 0
50638: PPUSH
// uc_side := 0 ;
50639: LD_ADDR_OWVAR 20
50643: PUSH
50644: LD_INT 0
50646: ST_TO_ADDR
// uc_nation := 0 ;
50647: LD_ADDR_OWVAR 21
50651: PUSH
50652: LD_INT 0
50654: ST_TO_ADDR
// hc_sex := sex_male ;
50655: LD_ADDR_OWVAR 27
50659: PUSH
50660: LD_INT 1
50662: ST_TO_ADDR
// hc_class := class_apeman ;
50663: LD_ADDR_OWVAR 28
50667: PUSH
50668: LD_INT 12
50670: ST_TO_ADDR
// hc_gallery :=  ;
50671: LD_ADDR_OWVAR 33
50675: PUSH
50676: LD_STRING 
50678: ST_TO_ADDR
// if agressivity = 0 then
50679: LD_VAR 0 1
50683: PUSH
50684: LD_INT 0
50686: EQUAL
50687: IFFALSE 50699
// hc_agressivity := 0 else
50689: LD_ADDR_OWVAR 35
50693: PUSH
50694: LD_INT 0
50696: ST_TO_ADDR
50697: GO 50720
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50699: LD_ADDR_OWVAR 35
50703: PUSH
50704: LD_VAR 0 1
50708: NEG
50709: PPUSH
50710: LD_VAR 0 1
50714: PPUSH
50715: CALL_OW 12
50719: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50720: LD_ADDR_OWVAR 31
50724: PUSH
50725: LD_INT 0
50727: PPUSH
50728: LD_INT 3
50730: PPUSH
50731: CALL_OW 12
50735: PUSH
50736: LD_INT 0
50738: PPUSH
50739: LD_INT 3
50741: PPUSH
50742: CALL_OW 12
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: ST_TO_ADDR
// end ;
50759: LD_VAR 0 2
50763: RET
// export function PrepareTiger ( agressivity ) ; begin
50764: LD_INT 0
50766: PPUSH
// uc_side := 0 ;
50767: LD_ADDR_OWVAR 20
50771: PUSH
50772: LD_INT 0
50774: ST_TO_ADDR
// uc_nation := 0 ;
50775: LD_ADDR_OWVAR 21
50779: PUSH
50780: LD_INT 0
50782: ST_TO_ADDR
// hc_class := class_tiger ;
50783: LD_ADDR_OWVAR 28
50787: PUSH
50788: LD_INT 14
50790: ST_TO_ADDR
// hc_gallery :=  ;
50791: LD_ADDR_OWVAR 33
50795: PUSH
50796: LD_STRING 
50798: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50799: LD_ADDR_OWVAR 35
50803: PUSH
50804: LD_VAR 0 1
50808: NEG
50809: PPUSH
50810: LD_VAR 0 1
50814: PPUSH
50815: CALL_OW 12
50819: ST_TO_ADDR
// end ;
50820: LD_VAR 0 2
50824: RET
// export function PrepareEnchidna ( ) ; begin
50825: LD_INT 0
50827: PPUSH
// uc_side := 0 ;
50828: LD_ADDR_OWVAR 20
50832: PUSH
50833: LD_INT 0
50835: ST_TO_ADDR
// uc_nation := 0 ;
50836: LD_ADDR_OWVAR 21
50840: PUSH
50841: LD_INT 0
50843: ST_TO_ADDR
// hc_class := class_baggie ;
50844: LD_ADDR_OWVAR 28
50848: PUSH
50849: LD_INT 13
50851: ST_TO_ADDR
// hc_gallery :=  ;
50852: LD_ADDR_OWVAR 33
50856: PUSH
50857: LD_STRING 
50859: ST_TO_ADDR
// end ;
50860: LD_VAR 0 1
50864: RET
// export function PrepareFrog ( ) ; begin
50865: LD_INT 0
50867: PPUSH
// uc_side := 0 ;
50868: LD_ADDR_OWVAR 20
50872: PUSH
50873: LD_INT 0
50875: ST_TO_ADDR
// uc_nation := 0 ;
50876: LD_ADDR_OWVAR 21
50880: PUSH
50881: LD_INT 0
50883: ST_TO_ADDR
// hc_class := class_frog ;
50884: LD_ADDR_OWVAR 28
50888: PUSH
50889: LD_INT 19
50891: ST_TO_ADDR
// hc_gallery :=  ;
50892: LD_ADDR_OWVAR 33
50896: PUSH
50897: LD_STRING 
50899: ST_TO_ADDR
// end ;
50900: LD_VAR 0 1
50904: RET
// export function PrepareFish ( ) ; begin
50905: LD_INT 0
50907: PPUSH
// uc_side := 0 ;
50908: LD_ADDR_OWVAR 20
50912: PUSH
50913: LD_INT 0
50915: ST_TO_ADDR
// uc_nation := 0 ;
50916: LD_ADDR_OWVAR 21
50920: PUSH
50921: LD_INT 0
50923: ST_TO_ADDR
// hc_class := class_fish ;
50924: LD_ADDR_OWVAR 28
50928: PUSH
50929: LD_INT 20
50931: ST_TO_ADDR
// hc_gallery :=  ;
50932: LD_ADDR_OWVAR 33
50936: PUSH
50937: LD_STRING 
50939: ST_TO_ADDR
// end ;
50940: LD_VAR 0 1
50944: RET
// export function PrepareBird ( ) ; begin
50945: LD_INT 0
50947: PPUSH
// uc_side := 0 ;
50948: LD_ADDR_OWVAR 20
50952: PUSH
50953: LD_INT 0
50955: ST_TO_ADDR
// uc_nation := 0 ;
50956: LD_ADDR_OWVAR 21
50960: PUSH
50961: LD_INT 0
50963: ST_TO_ADDR
// hc_class := class_phororhacos ;
50964: LD_ADDR_OWVAR 28
50968: PUSH
50969: LD_INT 18
50971: ST_TO_ADDR
// hc_gallery :=  ;
50972: LD_ADDR_OWVAR 33
50976: PUSH
50977: LD_STRING 
50979: ST_TO_ADDR
// end ;
50980: LD_VAR 0 1
50984: RET
// export function PrepareHorse ( ) ; begin
50985: LD_INT 0
50987: PPUSH
// uc_side := 0 ;
50988: LD_ADDR_OWVAR 20
50992: PUSH
50993: LD_INT 0
50995: ST_TO_ADDR
// uc_nation := 0 ;
50996: LD_ADDR_OWVAR 21
51000: PUSH
51001: LD_INT 0
51003: ST_TO_ADDR
// hc_class := class_horse ;
51004: LD_ADDR_OWVAR 28
51008: PUSH
51009: LD_INT 21
51011: ST_TO_ADDR
// hc_gallery :=  ;
51012: LD_ADDR_OWVAR 33
51016: PUSH
51017: LD_STRING 
51019: ST_TO_ADDR
// end ;
51020: LD_VAR 0 1
51024: RET
// export function PrepareMastodont ( ) ; begin
51025: LD_INT 0
51027: PPUSH
// uc_side := 0 ;
51028: LD_ADDR_OWVAR 20
51032: PUSH
51033: LD_INT 0
51035: ST_TO_ADDR
// uc_nation := 0 ;
51036: LD_ADDR_OWVAR 21
51040: PUSH
51041: LD_INT 0
51043: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51044: LD_ADDR_OWVAR 37
51048: PUSH
51049: LD_INT 31
51051: ST_TO_ADDR
// vc_control := control_rider ;
51052: LD_ADDR_OWVAR 38
51056: PUSH
51057: LD_INT 4
51059: ST_TO_ADDR
// end ;
51060: LD_VAR 0 1
51064: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51065: LD_INT 0
51067: PPUSH
51068: PPUSH
51069: PPUSH
// uc_side = 0 ;
51070: LD_ADDR_OWVAR 20
51074: PUSH
51075: LD_INT 0
51077: ST_TO_ADDR
// uc_nation = 0 ;
51078: LD_ADDR_OWVAR 21
51082: PUSH
51083: LD_INT 0
51085: ST_TO_ADDR
// InitHc_All ( ) ;
51086: CALL_OW 584
// InitVc ;
51090: CALL_OW 20
// if mastodonts then
51094: LD_VAR 0 6
51098: IFFALSE 51165
// for i = 1 to mastodonts do
51100: LD_ADDR_VAR 0 11
51104: PUSH
51105: DOUBLE
51106: LD_INT 1
51108: DEC
51109: ST_TO_ADDR
51110: LD_VAR 0 6
51114: PUSH
51115: FOR_TO
51116: IFFALSE 51163
// begin vc_chassis := 31 ;
51118: LD_ADDR_OWVAR 37
51122: PUSH
51123: LD_INT 31
51125: ST_TO_ADDR
// vc_control := control_rider ;
51126: LD_ADDR_OWVAR 38
51130: PUSH
51131: LD_INT 4
51133: ST_TO_ADDR
// animal := CreateVehicle ;
51134: LD_ADDR_VAR 0 12
51138: PUSH
51139: CALL_OW 45
51143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51144: LD_VAR 0 12
51148: PPUSH
51149: LD_VAR 0 8
51153: PPUSH
51154: LD_INT 0
51156: PPUSH
51157: CALL 53293 0 3
// end ;
51161: GO 51115
51163: POP
51164: POP
// if horses then
51165: LD_VAR 0 5
51169: IFFALSE 51236
// for i = 1 to horses do
51171: LD_ADDR_VAR 0 11
51175: PUSH
51176: DOUBLE
51177: LD_INT 1
51179: DEC
51180: ST_TO_ADDR
51181: LD_VAR 0 5
51185: PUSH
51186: FOR_TO
51187: IFFALSE 51234
// begin hc_class := 21 ;
51189: LD_ADDR_OWVAR 28
51193: PUSH
51194: LD_INT 21
51196: ST_TO_ADDR
// hc_gallery :=  ;
51197: LD_ADDR_OWVAR 33
51201: PUSH
51202: LD_STRING 
51204: ST_TO_ADDR
// animal := CreateHuman ;
51205: LD_ADDR_VAR 0 12
51209: PUSH
51210: CALL_OW 44
51214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51215: LD_VAR 0 12
51219: PPUSH
51220: LD_VAR 0 8
51224: PPUSH
51225: LD_INT 0
51227: PPUSH
51228: CALL 53293 0 3
// end ;
51232: GO 51186
51234: POP
51235: POP
// if birds then
51236: LD_VAR 0 1
51240: IFFALSE 51307
// for i = 1 to birds do
51242: LD_ADDR_VAR 0 11
51246: PUSH
51247: DOUBLE
51248: LD_INT 1
51250: DEC
51251: ST_TO_ADDR
51252: LD_VAR 0 1
51256: PUSH
51257: FOR_TO
51258: IFFALSE 51305
// begin hc_class := 18 ;
51260: LD_ADDR_OWVAR 28
51264: PUSH
51265: LD_INT 18
51267: ST_TO_ADDR
// hc_gallery =  ;
51268: LD_ADDR_OWVAR 33
51272: PUSH
51273: LD_STRING 
51275: ST_TO_ADDR
// animal := CreateHuman ;
51276: LD_ADDR_VAR 0 12
51280: PUSH
51281: CALL_OW 44
51285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51286: LD_VAR 0 12
51290: PPUSH
51291: LD_VAR 0 8
51295: PPUSH
51296: LD_INT 0
51298: PPUSH
51299: CALL 53293 0 3
// end ;
51303: GO 51257
51305: POP
51306: POP
// if tigers then
51307: LD_VAR 0 2
51311: IFFALSE 51395
// for i = 1 to tigers do
51313: LD_ADDR_VAR 0 11
51317: PUSH
51318: DOUBLE
51319: LD_INT 1
51321: DEC
51322: ST_TO_ADDR
51323: LD_VAR 0 2
51327: PUSH
51328: FOR_TO
51329: IFFALSE 51393
// begin hc_class = class_tiger ;
51331: LD_ADDR_OWVAR 28
51335: PUSH
51336: LD_INT 14
51338: ST_TO_ADDR
// hc_gallery =  ;
51339: LD_ADDR_OWVAR 33
51343: PUSH
51344: LD_STRING 
51346: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51347: LD_ADDR_OWVAR 35
51351: PUSH
51352: LD_INT 7
51354: NEG
51355: PPUSH
51356: LD_INT 7
51358: PPUSH
51359: CALL_OW 12
51363: ST_TO_ADDR
// animal := CreateHuman ;
51364: LD_ADDR_VAR 0 12
51368: PUSH
51369: CALL_OW 44
51373: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51374: LD_VAR 0 12
51378: PPUSH
51379: LD_VAR 0 8
51383: PPUSH
51384: LD_INT 0
51386: PPUSH
51387: CALL 53293 0 3
// end ;
51391: GO 51328
51393: POP
51394: POP
// if apemans then
51395: LD_VAR 0 3
51399: IFFALSE 51522
// for i = 1 to apemans do
51401: LD_ADDR_VAR 0 11
51405: PUSH
51406: DOUBLE
51407: LD_INT 1
51409: DEC
51410: ST_TO_ADDR
51411: LD_VAR 0 3
51415: PUSH
51416: FOR_TO
51417: IFFALSE 51520
// begin hc_class = class_apeman ;
51419: LD_ADDR_OWVAR 28
51423: PUSH
51424: LD_INT 12
51426: ST_TO_ADDR
// hc_gallery =  ;
51427: LD_ADDR_OWVAR 33
51431: PUSH
51432: LD_STRING 
51434: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51435: LD_ADDR_OWVAR 35
51439: PUSH
51440: LD_INT 2
51442: NEG
51443: PPUSH
51444: LD_INT 2
51446: PPUSH
51447: CALL_OW 12
51451: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51452: LD_ADDR_OWVAR 31
51456: PUSH
51457: LD_INT 1
51459: PPUSH
51460: LD_INT 3
51462: PPUSH
51463: CALL_OW 12
51467: PUSH
51468: LD_INT 1
51470: PPUSH
51471: LD_INT 3
51473: PPUSH
51474: CALL_OW 12
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: ST_TO_ADDR
// animal := CreateHuman ;
51491: LD_ADDR_VAR 0 12
51495: PUSH
51496: CALL_OW 44
51500: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51501: LD_VAR 0 12
51505: PPUSH
51506: LD_VAR 0 8
51510: PPUSH
51511: LD_INT 0
51513: PPUSH
51514: CALL 53293 0 3
// end ;
51518: GO 51416
51520: POP
51521: POP
// if enchidnas then
51522: LD_VAR 0 4
51526: IFFALSE 51593
// for i = 1 to enchidnas do
51528: LD_ADDR_VAR 0 11
51532: PUSH
51533: DOUBLE
51534: LD_INT 1
51536: DEC
51537: ST_TO_ADDR
51538: LD_VAR 0 4
51542: PUSH
51543: FOR_TO
51544: IFFALSE 51591
// begin hc_class = 13 ;
51546: LD_ADDR_OWVAR 28
51550: PUSH
51551: LD_INT 13
51553: ST_TO_ADDR
// hc_gallery =  ;
51554: LD_ADDR_OWVAR 33
51558: PUSH
51559: LD_STRING 
51561: ST_TO_ADDR
// animal := CreateHuman ;
51562: LD_ADDR_VAR 0 12
51566: PUSH
51567: CALL_OW 44
51571: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51572: LD_VAR 0 12
51576: PPUSH
51577: LD_VAR 0 8
51581: PPUSH
51582: LD_INT 0
51584: PPUSH
51585: CALL 53293 0 3
// end ;
51589: GO 51543
51591: POP
51592: POP
// if fishes then
51593: LD_VAR 0 7
51597: IFFALSE 51664
// for i = 1 to fishes do
51599: LD_ADDR_VAR 0 11
51603: PUSH
51604: DOUBLE
51605: LD_INT 1
51607: DEC
51608: ST_TO_ADDR
51609: LD_VAR 0 7
51613: PUSH
51614: FOR_TO
51615: IFFALSE 51662
// begin hc_class = 20 ;
51617: LD_ADDR_OWVAR 28
51621: PUSH
51622: LD_INT 20
51624: ST_TO_ADDR
// hc_gallery =  ;
51625: LD_ADDR_OWVAR 33
51629: PUSH
51630: LD_STRING 
51632: ST_TO_ADDR
// animal := CreateHuman ;
51633: LD_ADDR_VAR 0 12
51637: PUSH
51638: CALL_OW 44
51642: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51643: LD_VAR 0 12
51647: PPUSH
51648: LD_VAR 0 9
51652: PPUSH
51653: LD_INT 0
51655: PPUSH
51656: CALL 53293 0 3
// end ;
51660: GO 51614
51662: POP
51663: POP
// end ;
51664: LD_VAR 0 10
51668: RET
// export function WantHeal ( sci , unit ) ; begin
51669: LD_INT 0
51671: PPUSH
// if GetTaskList ( sci ) > 0 then
51672: LD_VAR 0 1
51676: PPUSH
51677: CALL_OW 437
51681: PUSH
51682: LD_INT 0
51684: GREATER
51685: IFFALSE 51755
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51687: LD_VAR 0 1
51691: PPUSH
51692: CALL_OW 437
51696: PUSH
51697: LD_INT 1
51699: ARRAY
51700: PUSH
51701: LD_INT 1
51703: ARRAY
51704: PUSH
51705: LD_STRING l
51707: EQUAL
51708: PUSH
51709: LD_VAR 0 1
51713: PPUSH
51714: CALL_OW 437
51718: PUSH
51719: LD_INT 1
51721: ARRAY
51722: PUSH
51723: LD_INT 4
51725: ARRAY
51726: PUSH
51727: LD_VAR 0 2
51731: EQUAL
51732: AND
51733: IFFALSE 51745
// result := true else
51735: LD_ADDR_VAR 0 3
51739: PUSH
51740: LD_INT 1
51742: ST_TO_ADDR
51743: GO 51753
// result := false ;
51745: LD_ADDR_VAR 0 3
51749: PUSH
51750: LD_INT 0
51752: ST_TO_ADDR
// end else
51753: GO 51763
// result := false ;
51755: LD_ADDR_VAR 0 3
51759: PUSH
51760: LD_INT 0
51762: ST_TO_ADDR
// end ;
51763: LD_VAR 0 3
51767: RET
// export function HealTarget ( sci ) ; begin
51768: LD_INT 0
51770: PPUSH
// if not sci then
51771: LD_VAR 0 1
51775: NOT
51776: IFFALSE 51780
// exit ;
51778: GO 51845
// result := 0 ;
51780: LD_ADDR_VAR 0 2
51784: PUSH
51785: LD_INT 0
51787: ST_TO_ADDR
// if GetTaskList ( sci ) then
51788: LD_VAR 0 1
51792: PPUSH
51793: CALL_OW 437
51797: IFFALSE 51845
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51799: LD_VAR 0 1
51803: PPUSH
51804: CALL_OW 437
51808: PUSH
51809: LD_INT 1
51811: ARRAY
51812: PUSH
51813: LD_INT 1
51815: ARRAY
51816: PUSH
51817: LD_STRING l
51819: EQUAL
51820: IFFALSE 51845
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51822: LD_ADDR_VAR 0 2
51826: PUSH
51827: LD_VAR 0 1
51831: PPUSH
51832: CALL_OW 437
51836: PUSH
51837: LD_INT 1
51839: ARRAY
51840: PUSH
51841: LD_INT 4
51843: ARRAY
51844: ST_TO_ADDR
// end ;
51845: LD_VAR 0 2
51849: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51850: LD_INT 0
51852: PPUSH
51853: PPUSH
51854: PPUSH
51855: PPUSH
// if not base_units then
51856: LD_VAR 0 1
51860: NOT
51861: IFFALSE 51865
// exit ;
51863: GO 51952
// result := false ;
51865: LD_ADDR_VAR 0 2
51869: PUSH
51870: LD_INT 0
51872: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51873: LD_ADDR_VAR 0 5
51877: PUSH
51878: LD_VAR 0 1
51882: PPUSH
51883: LD_INT 21
51885: PUSH
51886: LD_INT 3
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PPUSH
51893: CALL_OW 72
51897: ST_TO_ADDR
// if not tmp then
51898: LD_VAR 0 5
51902: NOT
51903: IFFALSE 51907
// exit ;
51905: GO 51952
// for i in tmp do
51907: LD_ADDR_VAR 0 3
51911: PUSH
51912: LD_VAR 0 5
51916: PUSH
51917: FOR_IN
51918: IFFALSE 51950
// begin result := EnemyInRange ( i , 22 ) ;
51920: LD_ADDR_VAR 0 2
51924: PUSH
51925: LD_VAR 0 3
51929: PPUSH
51930: LD_INT 22
51932: PPUSH
51933: CALL 49530 0 2
51937: ST_TO_ADDR
// if result then
51938: LD_VAR 0 2
51942: IFFALSE 51948
// exit ;
51944: POP
51945: POP
51946: GO 51952
// end ;
51948: GO 51917
51950: POP
51951: POP
// end ;
51952: LD_VAR 0 2
51956: RET
// export function FilterByTag ( units , tag ) ; begin
51957: LD_INT 0
51959: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51960: LD_ADDR_VAR 0 3
51964: PUSH
51965: LD_VAR 0 1
51969: PPUSH
51970: LD_INT 120
51972: PUSH
51973: LD_VAR 0 2
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PPUSH
51982: CALL_OW 72
51986: ST_TO_ADDR
// end ;
51987: LD_VAR 0 3
51991: RET
// export function IsDriver ( un ) ; begin
51992: LD_INT 0
51994: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51995: LD_ADDR_VAR 0 2
51999: PUSH
52000: LD_VAR 0 1
52004: PUSH
52005: LD_INT 55
52007: PUSH
52008: EMPTY
52009: LIST
52010: PPUSH
52011: CALL_OW 69
52015: IN
52016: ST_TO_ADDR
// end ;
52017: LD_VAR 0 2
52021: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52022: LD_INT 0
52024: PPUSH
52025: PPUSH
// list := [ ] ;
52026: LD_ADDR_VAR 0 5
52030: PUSH
52031: EMPTY
52032: ST_TO_ADDR
// case d of 0 :
52033: LD_VAR 0 3
52037: PUSH
52038: LD_INT 0
52040: DOUBLE
52041: EQUAL
52042: IFTRUE 52046
52044: GO 52179
52046: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52047: LD_ADDR_VAR 0 5
52051: PUSH
52052: LD_VAR 0 1
52056: PUSH
52057: LD_INT 4
52059: MINUS
52060: PUSH
52061: LD_VAR 0 2
52065: PUSH
52066: LD_INT 4
52068: MINUS
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: LIST
52077: PUSH
52078: LD_VAR 0 1
52082: PUSH
52083: LD_INT 3
52085: MINUS
52086: PUSH
52087: LD_VAR 0 2
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: LIST
52099: PUSH
52100: LD_VAR 0 1
52104: PUSH
52105: LD_INT 4
52107: PLUS
52108: PUSH
52109: LD_VAR 0 2
52113: PUSH
52114: LD_INT 4
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: LIST
52121: PUSH
52122: LD_VAR 0 1
52126: PUSH
52127: LD_INT 3
52129: PLUS
52130: PUSH
52131: LD_VAR 0 2
52135: PUSH
52136: LD_INT 3
52138: PLUS
52139: PUSH
52140: LD_INT 5
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: LIST
52147: PUSH
52148: LD_VAR 0 1
52152: PUSH
52153: LD_VAR 0 2
52157: PUSH
52158: LD_INT 4
52160: PLUS
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: LIST
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: ST_TO_ADDR
// end ; 1 :
52177: GO 52877
52179: LD_INT 1
52181: DOUBLE
52182: EQUAL
52183: IFTRUE 52187
52185: GO 52320
52187: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52188: LD_ADDR_VAR 0 5
52192: PUSH
52193: LD_VAR 0 1
52197: PUSH
52198: LD_VAR 0 2
52202: PUSH
52203: LD_INT 4
52205: MINUS
52206: PUSH
52207: LD_INT 3
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: LIST
52214: PUSH
52215: LD_VAR 0 1
52219: PUSH
52220: LD_INT 3
52222: MINUS
52223: PUSH
52224: LD_VAR 0 2
52228: PUSH
52229: LD_INT 3
52231: MINUS
52232: PUSH
52233: LD_INT 2
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: LIST
52240: PUSH
52241: LD_VAR 0 1
52245: PUSH
52246: LD_INT 4
52248: MINUS
52249: PUSH
52250: LD_VAR 0 2
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: LIST
52262: PUSH
52263: LD_VAR 0 1
52267: PUSH
52268: LD_VAR 0 2
52272: PUSH
52273: LD_INT 3
52275: PLUS
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: LIST
52284: PUSH
52285: LD_VAR 0 1
52289: PUSH
52290: LD_INT 4
52292: PLUS
52293: PUSH
52294: LD_VAR 0 2
52298: PUSH
52299: LD_INT 4
52301: PLUS
52302: PUSH
52303: LD_INT 5
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: LIST
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: ST_TO_ADDR
// end ; 2 :
52318: GO 52877
52320: LD_INT 2
52322: DOUBLE
52323: EQUAL
52324: IFTRUE 52328
52326: GO 52457
52328: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52329: LD_ADDR_VAR 0 5
52333: PUSH
52334: LD_VAR 0 1
52338: PUSH
52339: LD_VAR 0 2
52343: PUSH
52344: LD_INT 3
52346: MINUS
52347: PUSH
52348: LD_INT 3
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: LIST
52355: PUSH
52356: LD_VAR 0 1
52360: PUSH
52361: LD_INT 4
52363: PLUS
52364: PUSH
52365: LD_VAR 0 2
52369: PUSH
52370: LD_INT 4
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: LIST
52377: PUSH
52378: LD_VAR 0 1
52382: PUSH
52383: LD_VAR 0 2
52387: PUSH
52388: LD_INT 4
52390: PLUS
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: LIST
52399: PUSH
52400: LD_VAR 0 1
52404: PUSH
52405: LD_INT 3
52407: MINUS
52408: PUSH
52409: LD_VAR 0 2
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: LIST
52421: PUSH
52422: LD_VAR 0 1
52426: PUSH
52427: LD_INT 4
52429: MINUS
52430: PUSH
52431: LD_VAR 0 2
52435: PUSH
52436: LD_INT 4
52438: MINUS
52439: PUSH
52440: LD_INT 2
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: LIST
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: ST_TO_ADDR
// end ; 3 :
52455: GO 52877
52457: LD_INT 3
52459: DOUBLE
52460: EQUAL
52461: IFTRUE 52465
52463: GO 52598
52465: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52466: LD_ADDR_VAR 0 5
52470: PUSH
52471: LD_VAR 0 1
52475: PUSH
52476: LD_INT 3
52478: PLUS
52479: PUSH
52480: LD_VAR 0 2
52484: PUSH
52485: LD_INT 4
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: LIST
52492: PUSH
52493: LD_VAR 0 1
52497: PUSH
52498: LD_INT 4
52500: PLUS
52501: PUSH
52502: LD_VAR 0 2
52506: PUSH
52507: LD_INT 4
52509: PLUS
52510: PUSH
52511: LD_INT 5
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: LIST
52518: PUSH
52519: LD_VAR 0 1
52523: PUSH
52524: LD_INT 4
52526: MINUS
52527: PUSH
52528: LD_VAR 0 2
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: LIST
52540: PUSH
52541: LD_VAR 0 1
52545: PUSH
52546: LD_VAR 0 2
52550: PUSH
52551: LD_INT 4
52553: MINUS
52554: PUSH
52555: LD_INT 3
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: LIST
52562: PUSH
52563: LD_VAR 0 1
52567: PUSH
52568: LD_INT 3
52570: MINUS
52571: PUSH
52572: LD_VAR 0 2
52576: PUSH
52577: LD_INT 3
52579: MINUS
52580: PUSH
52581: LD_INT 2
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: LIST
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: ST_TO_ADDR
// end ; 4 :
52596: GO 52877
52598: LD_INT 4
52600: DOUBLE
52601: EQUAL
52602: IFTRUE 52606
52604: GO 52739
52606: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52607: LD_ADDR_VAR 0 5
52611: PUSH
52612: LD_VAR 0 1
52616: PUSH
52617: LD_VAR 0 2
52621: PUSH
52622: LD_INT 4
52624: PLUS
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: LIST
52633: PUSH
52634: LD_VAR 0 1
52638: PUSH
52639: LD_INT 3
52641: PLUS
52642: PUSH
52643: LD_VAR 0 2
52647: PUSH
52648: LD_INT 3
52650: PLUS
52651: PUSH
52652: LD_INT 5
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: LIST
52659: PUSH
52660: LD_VAR 0 1
52664: PUSH
52665: LD_INT 4
52667: PLUS
52668: PUSH
52669: LD_VAR 0 2
52673: PUSH
52674: LD_INT 4
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: LIST
52681: PUSH
52682: LD_VAR 0 1
52686: PUSH
52687: LD_VAR 0 2
52691: PUSH
52692: LD_INT 3
52694: MINUS
52695: PUSH
52696: LD_INT 3
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: LIST
52703: PUSH
52704: LD_VAR 0 1
52708: PUSH
52709: LD_INT 4
52711: MINUS
52712: PUSH
52713: LD_VAR 0 2
52717: PUSH
52718: LD_INT 4
52720: MINUS
52721: PUSH
52722: LD_INT 2
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: LIST
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: ST_TO_ADDR
// end ; 5 :
52737: GO 52877
52739: LD_INT 5
52741: DOUBLE
52742: EQUAL
52743: IFTRUE 52747
52745: GO 52876
52747: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52748: LD_ADDR_VAR 0 5
52752: PUSH
52753: LD_VAR 0 1
52757: PUSH
52758: LD_INT 4
52760: MINUS
52761: PUSH
52762: LD_VAR 0 2
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: PUSH
52775: LD_VAR 0 1
52779: PUSH
52780: LD_VAR 0 2
52784: PUSH
52785: LD_INT 4
52787: MINUS
52788: PUSH
52789: LD_INT 3
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: LIST
52796: PUSH
52797: LD_VAR 0 1
52801: PUSH
52802: LD_INT 4
52804: PLUS
52805: PUSH
52806: LD_VAR 0 2
52810: PUSH
52811: LD_INT 4
52813: PLUS
52814: PUSH
52815: LD_INT 5
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: PUSH
52823: LD_VAR 0 1
52827: PUSH
52828: LD_INT 3
52830: PLUS
52831: PUSH
52832: LD_VAR 0 2
52836: PUSH
52837: LD_INT 4
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: LIST
52844: PUSH
52845: LD_VAR 0 1
52849: PUSH
52850: LD_VAR 0 2
52854: PUSH
52855: LD_INT 3
52857: PLUS
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: LIST
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: ST_TO_ADDR
// end ; end ;
52874: GO 52877
52876: POP
// result := list ;
52877: LD_ADDR_VAR 0 4
52881: PUSH
52882: LD_VAR 0 5
52886: ST_TO_ADDR
// end ;
52887: LD_VAR 0 4
52891: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52892: LD_INT 0
52894: PPUSH
52895: PPUSH
52896: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52897: LD_VAR 0 1
52901: NOT
52902: PUSH
52903: LD_VAR 0 2
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: LD_INT 2
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: LD_INT 4
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: IN
52926: NOT
52927: OR
52928: IFFALSE 52932
// exit ;
52930: GO 53015
// tmp := [ ] ;
52932: LD_ADDR_VAR 0 5
52936: PUSH
52937: EMPTY
52938: ST_TO_ADDR
// for i in units do
52939: LD_ADDR_VAR 0 4
52943: PUSH
52944: LD_VAR 0 1
52948: PUSH
52949: FOR_IN
52950: IFFALSE 52984
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52952: LD_ADDR_VAR 0 5
52956: PUSH
52957: LD_VAR 0 5
52961: PPUSH
52962: LD_VAR 0 4
52966: PPUSH
52967: LD_VAR 0 2
52971: PPUSH
52972: CALL_OW 259
52976: PPUSH
52977: CALL 54388 0 2
52981: ST_TO_ADDR
52982: GO 52949
52984: POP
52985: POP
// if not tmp then
52986: LD_VAR 0 5
52990: NOT
52991: IFFALSE 52995
// exit ;
52993: GO 53015
// result := SortListByListDesc ( units , tmp ) ;
52995: LD_ADDR_VAR 0 3
52999: PUSH
53000: LD_VAR 0 1
53004: PPUSH
53005: LD_VAR 0 5
53009: PPUSH
53010: CALL_OW 77
53014: ST_TO_ADDR
// end ;
53015: LD_VAR 0 3
53019: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53020: LD_INT 0
53022: PPUSH
53023: PPUSH
53024: PPUSH
// result := false ;
53025: LD_ADDR_VAR 0 3
53029: PUSH
53030: LD_INT 0
53032: ST_TO_ADDR
// if not building then
53033: LD_VAR 0 2
53037: NOT
53038: IFFALSE 53042
// exit ;
53040: GO 53180
// x := GetX ( building ) ;
53042: LD_ADDR_VAR 0 4
53046: PUSH
53047: LD_VAR 0 2
53051: PPUSH
53052: CALL_OW 250
53056: ST_TO_ADDR
// y := GetY ( building ) ;
53057: LD_ADDR_VAR 0 5
53061: PUSH
53062: LD_VAR 0 2
53066: PPUSH
53067: CALL_OW 251
53071: ST_TO_ADDR
// if not x or not y then
53072: LD_VAR 0 4
53076: NOT
53077: PUSH
53078: LD_VAR 0 5
53082: NOT
53083: OR
53084: IFFALSE 53088
// exit ;
53086: GO 53180
// if GetTaskList ( unit ) then
53088: LD_VAR 0 1
53092: PPUSH
53093: CALL_OW 437
53097: IFFALSE 53180
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53099: LD_STRING e
53101: PUSH
53102: LD_VAR 0 1
53106: PPUSH
53107: CALL_OW 437
53111: PUSH
53112: LD_INT 1
53114: ARRAY
53115: PUSH
53116: LD_INT 1
53118: ARRAY
53119: EQUAL
53120: PUSH
53121: LD_VAR 0 4
53125: PUSH
53126: LD_VAR 0 1
53130: PPUSH
53131: CALL_OW 437
53135: PUSH
53136: LD_INT 1
53138: ARRAY
53139: PUSH
53140: LD_INT 2
53142: ARRAY
53143: EQUAL
53144: AND
53145: PUSH
53146: LD_VAR 0 5
53150: PUSH
53151: LD_VAR 0 1
53155: PPUSH
53156: CALL_OW 437
53160: PUSH
53161: LD_INT 1
53163: ARRAY
53164: PUSH
53165: LD_INT 3
53167: ARRAY
53168: EQUAL
53169: AND
53170: IFFALSE 53180
// result := true end ;
53172: LD_ADDR_VAR 0 3
53176: PUSH
53177: LD_INT 1
53179: ST_TO_ADDR
// end ;
53180: LD_VAR 0 3
53184: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53185: LD_INT 0
53187: PPUSH
// result := false ;
53188: LD_ADDR_VAR 0 4
53192: PUSH
53193: LD_INT 0
53195: ST_TO_ADDR
// if GetTaskList ( unit ) then
53196: LD_VAR 0 1
53200: PPUSH
53201: CALL_OW 437
53205: IFFALSE 53288
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53207: LD_STRING M
53209: PUSH
53210: LD_VAR 0 1
53214: PPUSH
53215: CALL_OW 437
53219: PUSH
53220: LD_INT 1
53222: ARRAY
53223: PUSH
53224: LD_INT 1
53226: ARRAY
53227: EQUAL
53228: PUSH
53229: LD_VAR 0 2
53233: PUSH
53234: LD_VAR 0 1
53238: PPUSH
53239: CALL_OW 437
53243: PUSH
53244: LD_INT 1
53246: ARRAY
53247: PUSH
53248: LD_INT 2
53250: ARRAY
53251: EQUAL
53252: AND
53253: PUSH
53254: LD_VAR 0 3
53258: PUSH
53259: LD_VAR 0 1
53263: PPUSH
53264: CALL_OW 437
53268: PUSH
53269: LD_INT 1
53271: ARRAY
53272: PUSH
53273: LD_INT 3
53275: ARRAY
53276: EQUAL
53277: AND
53278: IFFALSE 53288
// result := true ;
53280: LD_ADDR_VAR 0 4
53284: PUSH
53285: LD_INT 1
53287: ST_TO_ADDR
// end ; end ;
53288: LD_VAR 0 4
53292: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53293: LD_INT 0
53295: PPUSH
53296: PPUSH
53297: PPUSH
53298: PPUSH
// if not unit or not area then
53299: LD_VAR 0 1
53303: NOT
53304: PUSH
53305: LD_VAR 0 2
53309: NOT
53310: OR
53311: IFFALSE 53315
// exit ;
53313: GO 53491
// tmp := AreaToList ( area , i ) ;
53315: LD_ADDR_VAR 0 6
53319: PUSH
53320: LD_VAR 0 2
53324: PPUSH
53325: LD_VAR 0 5
53329: PPUSH
53330: CALL_OW 517
53334: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53335: LD_ADDR_VAR 0 5
53339: PUSH
53340: DOUBLE
53341: LD_INT 1
53343: DEC
53344: ST_TO_ADDR
53345: LD_VAR 0 6
53349: PUSH
53350: LD_INT 1
53352: ARRAY
53353: PUSH
53354: FOR_TO
53355: IFFALSE 53489
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53357: LD_ADDR_VAR 0 7
53361: PUSH
53362: LD_VAR 0 6
53366: PUSH
53367: LD_INT 1
53369: ARRAY
53370: PUSH
53371: LD_VAR 0 5
53375: ARRAY
53376: PUSH
53377: LD_VAR 0 6
53381: PUSH
53382: LD_INT 2
53384: ARRAY
53385: PUSH
53386: LD_VAR 0 5
53390: ARRAY
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53396: LD_INT 92
53398: PUSH
53399: LD_VAR 0 7
53403: PUSH
53404: LD_INT 1
53406: ARRAY
53407: PUSH
53408: LD_VAR 0 7
53412: PUSH
53413: LD_INT 2
53415: ARRAY
53416: PUSH
53417: LD_INT 2
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: PPUSH
53426: CALL_OW 69
53430: PUSH
53431: LD_INT 0
53433: EQUAL
53434: IFFALSE 53487
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53436: LD_VAR 0 1
53440: PPUSH
53441: LD_VAR 0 7
53445: PUSH
53446: LD_INT 1
53448: ARRAY
53449: PPUSH
53450: LD_VAR 0 7
53454: PUSH
53455: LD_INT 2
53457: ARRAY
53458: PPUSH
53459: LD_VAR 0 3
53463: PPUSH
53464: CALL_OW 48
// result := IsPlaced ( unit ) ;
53468: LD_ADDR_VAR 0 4
53472: PUSH
53473: LD_VAR 0 1
53477: PPUSH
53478: CALL_OW 305
53482: ST_TO_ADDR
// exit ;
53483: POP
53484: POP
53485: GO 53491
// end ; end ;
53487: GO 53354
53489: POP
53490: POP
// end ;
53491: LD_VAR 0 4
53495: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53496: LD_INT 0
53498: PPUSH
53499: PPUSH
53500: PPUSH
// if not side or side > 8 then
53501: LD_VAR 0 1
53505: NOT
53506: PUSH
53507: LD_VAR 0 1
53511: PUSH
53512: LD_INT 8
53514: GREATER
53515: OR
53516: IFFALSE 53520
// exit ;
53518: GO 53707
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53520: LD_ADDR_VAR 0 4
53524: PUSH
53525: LD_INT 22
53527: PUSH
53528: LD_VAR 0 1
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 21
53539: PUSH
53540: LD_INT 3
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PPUSH
53551: CALL_OW 69
53555: ST_TO_ADDR
// if not tmp then
53556: LD_VAR 0 4
53560: NOT
53561: IFFALSE 53565
// exit ;
53563: GO 53707
// enable_addtolog := true ;
53565: LD_ADDR_OWVAR 81
53569: PUSH
53570: LD_INT 1
53572: ST_TO_ADDR
// AddToLog ( [ ) ;
53573: LD_STRING [
53575: PPUSH
53576: CALL_OW 561
// for i in tmp do
53580: LD_ADDR_VAR 0 3
53584: PUSH
53585: LD_VAR 0 4
53589: PUSH
53590: FOR_IN
53591: IFFALSE 53698
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53593: LD_STRING [
53595: PUSH
53596: LD_VAR 0 3
53600: PPUSH
53601: CALL_OW 266
53605: STR
53606: PUSH
53607: LD_STRING , 
53609: STR
53610: PUSH
53611: LD_VAR 0 3
53615: PPUSH
53616: CALL_OW 250
53620: STR
53621: PUSH
53622: LD_STRING , 
53624: STR
53625: PUSH
53626: LD_VAR 0 3
53630: PPUSH
53631: CALL_OW 251
53635: STR
53636: PUSH
53637: LD_STRING , 
53639: STR
53640: PUSH
53641: LD_VAR 0 3
53645: PPUSH
53646: CALL_OW 254
53650: STR
53651: PUSH
53652: LD_STRING , 
53654: STR
53655: PUSH
53656: LD_VAR 0 3
53660: PPUSH
53661: LD_INT 1
53663: PPUSH
53664: CALL_OW 268
53668: STR
53669: PUSH
53670: LD_STRING , 
53672: STR
53673: PUSH
53674: LD_VAR 0 3
53678: PPUSH
53679: LD_INT 2
53681: PPUSH
53682: CALL_OW 268
53686: STR
53687: PUSH
53688: LD_STRING ],
53690: STR
53691: PPUSH
53692: CALL_OW 561
// end ;
53696: GO 53590
53698: POP
53699: POP
// AddToLog ( ]; ) ;
53700: LD_STRING ];
53702: PPUSH
53703: CALL_OW 561
// end ;
53707: LD_VAR 0 2
53711: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53712: LD_INT 0
53714: PPUSH
53715: PPUSH
53716: PPUSH
53717: PPUSH
53718: PPUSH
// if not area or not rate or not max then
53719: LD_VAR 0 1
53723: NOT
53724: PUSH
53725: LD_VAR 0 2
53729: NOT
53730: OR
53731: PUSH
53732: LD_VAR 0 4
53736: NOT
53737: OR
53738: IFFALSE 53742
// exit ;
53740: GO 53931
// while 1 do
53742: LD_INT 1
53744: IFFALSE 53931
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53746: LD_ADDR_VAR 0 9
53750: PUSH
53751: LD_VAR 0 1
53755: PPUSH
53756: LD_INT 1
53758: PPUSH
53759: CALL_OW 287
53763: PUSH
53764: LD_INT 10
53766: MUL
53767: ST_TO_ADDR
// r := rate / 10 ;
53768: LD_ADDR_VAR 0 7
53772: PUSH
53773: LD_VAR 0 2
53777: PUSH
53778: LD_INT 10
53780: DIVREAL
53781: ST_TO_ADDR
// time := 1 1$00 ;
53782: LD_ADDR_VAR 0 8
53786: PUSH
53787: LD_INT 2100
53789: ST_TO_ADDR
// if amount < min then
53790: LD_VAR 0 9
53794: PUSH
53795: LD_VAR 0 3
53799: LESS
53800: IFFALSE 53818
// r := r * 2 else
53802: LD_ADDR_VAR 0 7
53806: PUSH
53807: LD_VAR 0 7
53811: PUSH
53812: LD_INT 2
53814: MUL
53815: ST_TO_ADDR
53816: GO 53844
// if amount > max then
53818: LD_VAR 0 9
53822: PUSH
53823: LD_VAR 0 4
53827: GREATER
53828: IFFALSE 53844
// r := r / 2 ;
53830: LD_ADDR_VAR 0 7
53834: PUSH
53835: LD_VAR 0 7
53839: PUSH
53840: LD_INT 2
53842: DIVREAL
53843: ST_TO_ADDR
// time := time / r ;
53844: LD_ADDR_VAR 0 8
53848: PUSH
53849: LD_VAR 0 8
53853: PUSH
53854: LD_VAR 0 7
53858: DIVREAL
53859: ST_TO_ADDR
// if time < 0 then
53860: LD_VAR 0 8
53864: PUSH
53865: LD_INT 0
53867: LESS
53868: IFFALSE 53885
// time := time * - 1 ;
53870: LD_ADDR_VAR 0 8
53874: PUSH
53875: LD_VAR 0 8
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: MUL
53884: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53885: LD_VAR 0 8
53889: PUSH
53890: LD_INT 35
53892: PPUSH
53893: LD_INT 875
53895: PPUSH
53896: CALL_OW 12
53900: PLUS
53901: PPUSH
53902: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53906: LD_INT 1
53908: PPUSH
53909: LD_INT 5
53911: PPUSH
53912: CALL_OW 12
53916: PPUSH
53917: LD_VAR 0 1
53921: PPUSH
53922: LD_INT 1
53924: PPUSH
53925: CALL_OW 55
// end ;
53929: GO 53742
// end ;
53931: LD_VAR 0 5
53935: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53936: LD_INT 0
53938: PPUSH
53939: PPUSH
53940: PPUSH
53941: PPUSH
53942: PPUSH
53943: PPUSH
53944: PPUSH
53945: PPUSH
// if not turrets or not factories then
53946: LD_VAR 0 1
53950: NOT
53951: PUSH
53952: LD_VAR 0 2
53956: NOT
53957: OR
53958: IFFALSE 53962
// exit ;
53960: GO 54269
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53962: LD_ADDR_VAR 0 10
53966: PUSH
53967: LD_INT 5
53969: PUSH
53970: LD_INT 6
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: LD_INT 4
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 3
53989: PUSH
53990: LD_INT 5
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 24
54004: PUSH
54005: LD_INT 25
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 23
54014: PUSH
54015: LD_INT 27
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 42
54028: PUSH
54029: LD_INT 43
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 44
54038: PUSH
54039: LD_INT 46
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 45
54048: PUSH
54049: LD_INT 47
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: LIST
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: LIST
54065: ST_TO_ADDR
// result := [ ] ;
54066: LD_ADDR_VAR 0 3
54070: PUSH
54071: EMPTY
54072: ST_TO_ADDR
// for i in turrets do
54073: LD_ADDR_VAR 0 4
54077: PUSH
54078: LD_VAR 0 1
54082: PUSH
54083: FOR_IN
54084: IFFALSE 54267
// begin nat := GetNation ( i ) ;
54086: LD_ADDR_VAR 0 7
54090: PUSH
54091: LD_VAR 0 4
54095: PPUSH
54096: CALL_OW 248
54100: ST_TO_ADDR
// weapon := 0 ;
54101: LD_ADDR_VAR 0 8
54105: PUSH
54106: LD_INT 0
54108: ST_TO_ADDR
// if not nat then
54109: LD_VAR 0 7
54113: NOT
54114: IFFALSE 54118
// continue ;
54116: GO 54083
// for j in list [ nat ] do
54118: LD_ADDR_VAR 0 5
54122: PUSH
54123: LD_VAR 0 10
54127: PUSH
54128: LD_VAR 0 7
54132: ARRAY
54133: PUSH
54134: FOR_IN
54135: IFFALSE 54176
// if GetBWeapon ( i ) = j [ 1 ] then
54137: LD_VAR 0 4
54141: PPUSH
54142: CALL_OW 269
54146: PUSH
54147: LD_VAR 0 5
54151: PUSH
54152: LD_INT 1
54154: ARRAY
54155: EQUAL
54156: IFFALSE 54174
// begin weapon := j [ 2 ] ;
54158: LD_ADDR_VAR 0 8
54162: PUSH
54163: LD_VAR 0 5
54167: PUSH
54168: LD_INT 2
54170: ARRAY
54171: ST_TO_ADDR
// break ;
54172: GO 54176
// end ;
54174: GO 54134
54176: POP
54177: POP
// if not weapon then
54178: LD_VAR 0 8
54182: NOT
54183: IFFALSE 54187
// continue ;
54185: GO 54083
// for k in factories do
54187: LD_ADDR_VAR 0 6
54191: PUSH
54192: LD_VAR 0 2
54196: PUSH
54197: FOR_IN
54198: IFFALSE 54263
// begin weapons := AvailableWeaponList ( k ) ;
54200: LD_ADDR_VAR 0 9
54204: PUSH
54205: LD_VAR 0 6
54209: PPUSH
54210: CALL_OW 478
54214: ST_TO_ADDR
// if not weapons then
54215: LD_VAR 0 9
54219: NOT
54220: IFFALSE 54224
// continue ;
54222: GO 54197
// if weapon in weapons then
54224: LD_VAR 0 8
54228: PUSH
54229: LD_VAR 0 9
54233: IN
54234: IFFALSE 54261
// begin result := [ i , weapon ] ;
54236: LD_ADDR_VAR 0 3
54240: PUSH
54241: LD_VAR 0 4
54245: PUSH
54246: LD_VAR 0 8
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: ST_TO_ADDR
// exit ;
54255: POP
54256: POP
54257: POP
54258: POP
54259: GO 54269
// end ; end ;
54261: GO 54197
54263: POP
54264: POP
// end ;
54265: GO 54083
54267: POP
54268: POP
// end ;
54269: LD_VAR 0 3
54273: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54274: LD_INT 0
54276: PPUSH
// if not side or side > 8 then
54277: LD_VAR 0 3
54281: NOT
54282: PUSH
54283: LD_VAR 0 3
54287: PUSH
54288: LD_INT 8
54290: GREATER
54291: OR
54292: IFFALSE 54296
// exit ;
54294: GO 54355
// if not range then
54296: LD_VAR 0 4
54300: NOT
54301: IFFALSE 54312
// range := - 12 ;
54303: LD_ADDR_VAR 0 4
54307: PUSH
54308: LD_INT 12
54310: NEG
54311: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54312: LD_VAR 0 1
54316: PPUSH
54317: LD_VAR 0 2
54321: PPUSH
54322: LD_VAR 0 3
54326: PPUSH
54327: LD_VAR 0 4
54331: PPUSH
54332: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54336: LD_VAR 0 1
54340: PPUSH
54341: LD_VAR 0 2
54345: PPUSH
54346: LD_VAR 0 3
54350: PPUSH
54351: CALL_OW 331
// end ;
54355: LD_VAR 0 5
54359: RET
// export function Video ( mode ) ; begin
54360: LD_INT 0
54362: PPUSH
// ingame_video = mode ;
54363: LD_ADDR_OWVAR 52
54367: PUSH
54368: LD_VAR 0 1
54372: ST_TO_ADDR
// interface_hidden = mode ;
54373: LD_ADDR_OWVAR 54
54377: PUSH
54378: LD_VAR 0 1
54382: ST_TO_ADDR
// end ;
54383: LD_VAR 0 2
54387: RET
// export function Join ( array , element ) ; begin
54388: LD_INT 0
54390: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54391: LD_ADDR_VAR 0 3
54395: PUSH
54396: LD_VAR 0 1
54400: PPUSH
54401: LD_VAR 0 1
54405: PUSH
54406: LD_INT 1
54408: PLUS
54409: PPUSH
54410: LD_VAR 0 2
54414: PPUSH
54415: CALL_OW 1
54419: ST_TO_ADDR
// end ;
54420: LD_VAR 0 3
54424: RET
// export function JoinUnion ( array , element ) ; begin
54425: LD_INT 0
54427: PPUSH
// result := array union element ;
54428: LD_ADDR_VAR 0 3
54432: PUSH
54433: LD_VAR 0 1
54437: PUSH
54438: LD_VAR 0 2
54442: UNION
54443: ST_TO_ADDR
// end ;
54444: LD_VAR 0 3
54448: RET
// export function GetBehemoths ( side ) ; begin
54449: LD_INT 0
54451: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54452: LD_ADDR_VAR 0 2
54456: PUSH
54457: LD_INT 22
54459: PUSH
54460: LD_VAR 0 1
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 31
54471: PUSH
54472: LD_INT 25
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PPUSH
54483: CALL_OW 69
54487: ST_TO_ADDR
// end ;
54488: LD_VAR 0 2
54492: RET
// export function Shuffle ( array ) ; var i , index ; begin
54493: LD_INT 0
54495: PPUSH
54496: PPUSH
54497: PPUSH
// result := [ ] ;
54498: LD_ADDR_VAR 0 2
54502: PUSH
54503: EMPTY
54504: ST_TO_ADDR
// if not array then
54505: LD_VAR 0 1
54509: NOT
54510: IFFALSE 54514
// exit ;
54512: GO 54613
// Randomize ;
54514: CALL_OW 10
// for i = array downto 1 do
54518: LD_ADDR_VAR 0 3
54522: PUSH
54523: DOUBLE
54524: LD_VAR 0 1
54528: INC
54529: ST_TO_ADDR
54530: LD_INT 1
54532: PUSH
54533: FOR_DOWNTO
54534: IFFALSE 54611
// begin index := rand ( 1 , array ) ;
54536: LD_ADDR_VAR 0 4
54540: PUSH
54541: LD_INT 1
54543: PPUSH
54544: LD_VAR 0 1
54548: PPUSH
54549: CALL_OW 12
54553: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54554: LD_ADDR_VAR 0 2
54558: PUSH
54559: LD_VAR 0 2
54563: PPUSH
54564: LD_VAR 0 2
54568: PUSH
54569: LD_INT 1
54571: PLUS
54572: PPUSH
54573: LD_VAR 0 1
54577: PUSH
54578: LD_VAR 0 4
54582: ARRAY
54583: PPUSH
54584: CALL_OW 2
54588: ST_TO_ADDR
// array := Delete ( array , index ) ;
54589: LD_ADDR_VAR 0 1
54593: PUSH
54594: LD_VAR 0 1
54598: PPUSH
54599: LD_VAR 0 4
54603: PPUSH
54604: CALL_OW 3
54608: ST_TO_ADDR
// end ;
54609: GO 54533
54611: POP
54612: POP
// end ;
54613: LD_VAR 0 2
54617: RET
// export function GetBaseMaterials ( base ) ; begin
54618: LD_INT 0
54620: PPUSH
// result := [ 0 , 0 , 0 ] ;
54621: LD_ADDR_VAR 0 2
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: LIST
54639: ST_TO_ADDR
// if not base then
54640: LD_VAR 0 1
54644: NOT
54645: IFFALSE 54649
// exit ;
54647: GO 54698
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54649: LD_ADDR_VAR 0 2
54653: PUSH
54654: LD_VAR 0 1
54658: PPUSH
54659: LD_INT 1
54661: PPUSH
54662: CALL_OW 275
54666: PUSH
54667: LD_VAR 0 1
54671: PPUSH
54672: LD_INT 2
54674: PPUSH
54675: CALL_OW 275
54679: PUSH
54680: LD_VAR 0 1
54684: PPUSH
54685: LD_INT 3
54687: PPUSH
54688: CALL_OW 275
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: LIST
54697: ST_TO_ADDR
// end ;
54698: LD_VAR 0 2
54702: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54703: LD_INT 0
54705: PPUSH
54706: PPUSH
// result := array ;
54707: LD_ADDR_VAR 0 3
54711: PUSH
54712: LD_VAR 0 1
54716: ST_TO_ADDR
// if size >= result then
54717: LD_VAR 0 2
54721: PUSH
54722: LD_VAR 0 3
54726: GREATEREQUAL
54727: IFFALSE 54731
// exit ;
54729: GO 54781
// if size then
54731: LD_VAR 0 2
54735: IFFALSE 54781
// for i := array downto size do
54737: LD_ADDR_VAR 0 4
54741: PUSH
54742: DOUBLE
54743: LD_VAR 0 1
54747: INC
54748: ST_TO_ADDR
54749: LD_VAR 0 2
54753: PUSH
54754: FOR_DOWNTO
54755: IFFALSE 54779
// result := Delete ( result , result ) ;
54757: LD_ADDR_VAR 0 3
54761: PUSH
54762: LD_VAR 0 3
54766: PPUSH
54767: LD_VAR 0 3
54771: PPUSH
54772: CALL_OW 3
54776: ST_TO_ADDR
54777: GO 54754
54779: POP
54780: POP
// end ;
54781: LD_VAR 0 3
54785: RET
// export function ComExit ( unit ) ; var tmp ; begin
54786: LD_INT 0
54788: PPUSH
54789: PPUSH
// if not IsInUnit ( unit ) then
54790: LD_VAR 0 1
54794: PPUSH
54795: CALL_OW 310
54799: NOT
54800: IFFALSE 54804
// exit ;
54802: GO 54864
// tmp := IsInUnit ( unit ) ;
54804: LD_ADDR_VAR 0 3
54808: PUSH
54809: LD_VAR 0 1
54813: PPUSH
54814: CALL_OW 310
54818: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54819: LD_VAR 0 3
54823: PPUSH
54824: CALL_OW 247
54828: PUSH
54829: LD_INT 2
54831: EQUAL
54832: IFFALSE 54845
// ComExitVehicle ( unit ) else
54834: LD_VAR 0 1
54838: PPUSH
54839: CALL_OW 121
54843: GO 54854
// ComExitBuilding ( unit ) ;
54845: LD_VAR 0 1
54849: PPUSH
54850: CALL_OW 122
// result := tmp ;
54854: LD_ADDR_VAR 0 2
54858: PUSH
54859: LD_VAR 0 3
54863: ST_TO_ADDR
// end ;
54864: LD_VAR 0 2
54868: RET
// export function ComExitAll ( units ) ; var i ; begin
54869: LD_INT 0
54871: PPUSH
54872: PPUSH
// if not units then
54873: LD_VAR 0 1
54877: NOT
54878: IFFALSE 54882
// exit ;
54880: GO 54908
// for i in units do
54882: LD_ADDR_VAR 0 3
54886: PUSH
54887: LD_VAR 0 1
54891: PUSH
54892: FOR_IN
54893: IFFALSE 54906
// ComExit ( i ) ;
54895: LD_VAR 0 3
54899: PPUSH
54900: CALL 54786 0 1
54904: GO 54892
54906: POP
54907: POP
// end ;
54908: LD_VAR 0 2
54912: RET
// export function ResetHc ; begin
54913: LD_INT 0
54915: PPUSH
// InitHc ;
54916: CALL_OW 19
// hc_importance := 0 ;
54920: LD_ADDR_OWVAR 32
54924: PUSH
54925: LD_INT 0
54927: ST_TO_ADDR
// end ;
54928: LD_VAR 0 1
54932: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54933: LD_INT 0
54935: PPUSH
54936: PPUSH
54937: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54938: LD_ADDR_VAR 0 6
54942: PUSH
54943: LD_VAR 0 1
54947: PUSH
54948: LD_VAR 0 3
54952: PLUS
54953: PUSH
54954: LD_INT 2
54956: DIV
54957: ST_TO_ADDR
// if _x < 0 then
54958: LD_VAR 0 6
54962: PUSH
54963: LD_INT 0
54965: LESS
54966: IFFALSE 54983
// _x := _x * - 1 ;
54968: LD_ADDR_VAR 0 6
54972: PUSH
54973: LD_VAR 0 6
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: MUL
54982: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54983: LD_ADDR_VAR 0 7
54987: PUSH
54988: LD_VAR 0 2
54992: PUSH
54993: LD_VAR 0 4
54997: PLUS
54998: PUSH
54999: LD_INT 2
55001: DIV
55002: ST_TO_ADDR
// if _y < 0 then
55003: LD_VAR 0 7
55007: PUSH
55008: LD_INT 0
55010: LESS
55011: IFFALSE 55028
// _y := _y * - 1 ;
55013: LD_ADDR_VAR 0 7
55017: PUSH
55018: LD_VAR 0 7
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: MUL
55027: ST_TO_ADDR
// result := [ _x , _y ] ;
55028: LD_ADDR_VAR 0 5
55032: PUSH
55033: LD_VAR 0 6
55037: PUSH
55038: LD_VAR 0 7
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: ST_TO_ADDR
// end ;
55047: LD_VAR 0 5
55051: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55052: LD_INT 0
55054: PPUSH
55055: PPUSH
55056: PPUSH
55057: PPUSH
// task := GetTaskList ( unit ) ;
55058: LD_ADDR_VAR 0 7
55062: PUSH
55063: LD_VAR 0 1
55067: PPUSH
55068: CALL_OW 437
55072: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55073: LD_VAR 0 7
55077: NOT
55078: PUSH
55079: LD_VAR 0 1
55083: PPUSH
55084: LD_VAR 0 2
55088: PPUSH
55089: CALL_OW 308
55093: NOT
55094: AND
55095: IFFALSE 55099
// exit ;
55097: GO 55217
// if IsInArea ( unit , area ) then
55099: LD_VAR 0 1
55103: PPUSH
55104: LD_VAR 0 2
55108: PPUSH
55109: CALL_OW 308
55113: IFFALSE 55131
// begin ComMoveToArea ( unit , goAway ) ;
55115: LD_VAR 0 1
55119: PPUSH
55120: LD_VAR 0 3
55124: PPUSH
55125: CALL_OW 113
// exit ;
55129: GO 55217
// end ; if task [ 1 ] [ 1 ] <> M then
55131: LD_VAR 0 7
55135: PUSH
55136: LD_INT 1
55138: ARRAY
55139: PUSH
55140: LD_INT 1
55142: ARRAY
55143: PUSH
55144: LD_STRING M
55146: NONEQUAL
55147: IFFALSE 55151
// exit ;
55149: GO 55217
// x := task [ 1 ] [ 2 ] ;
55151: LD_ADDR_VAR 0 5
55155: PUSH
55156: LD_VAR 0 7
55160: PUSH
55161: LD_INT 1
55163: ARRAY
55164: PUSH
55165: LD_INT 2
55167: ARRAY
55168: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55169: LD_ADDR_VAR 0 6
55173: PUSH
55174: LD_VAR 0 7
55178: PUSH
55179: LD_INT 1
55181: ARRAY
55182: PUSH
55183: LD_INT 3
55185: ARRAY
55186: ST_TO_ADDR
// if InArea ( x , y , area ) then
55187: LD_VAR 0 5
55191: PPUSH
55192: LD_VAR 0 6
55196: PPUSH
55197: LD_VAR 0 2
55201: PPUSH
55202: CALL_OW 309
55206: IFFALSE 55217
// ComStop ( unit ) ;
55208: LD_VAR 0 1
55212: PPUSH
55213: CALL_OW 141
// end ;
55217: LD_VAR 0 4
55221: RET
// export function Abs ( value ) ; begin
55222: LD_INT 0
55224: PPUSH
// result := value ;
55225: LD_ADDR_VAR 0 2
55229: PUSH
55230: LD_VAR 0 1
55234: ST_TO_ADDR
// if value < 0 then
55235: LD_VAR 0 1
55239: PUSH
55240: LD_INT 0
55242: LESS
55243: IFFALSE 55260
// result := value * - 1 ;
55245: LD_ADDR_VAR 0 2
55249: PUSH
55250: LD_VAR 0 1
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: MUL
55259: ST_TO_ADDR
// end ;
55260: LD_VAR 0 2
55264: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55265: LD_INT 0
55267: PPUSH
55268: PPUSH
55269: PPUSH
55270: PPUSH
55271: PPUSH
55272: PPUSH
55273: PPUSH
55274: PPUSH
// if not unit or not building then
55275: LD_VAR 0 1
55279: NOT
55280: PUSH
55281: LD_VAR 0 2
55285: NOT
55286: OR
55287: IFFALSE 55291
// exit ;
55289: GO 55517
// x := GetX ( building ) ;
55291: LD_ADDR_VAR 0 4
55295: PUSH
55296: LD_VAR 0 2
55300: PPUSH
55301: CALL_OW 250
55305: ST_TO_ADDR
// y := GetY ( building ) ;
55306: LD_ADDR_VAR 0 6
55310: PUSH
55311: LD_VAR 0 2
55315: PPUSH
55316: CALL_OW 251
55320: ST_TO_ADDR
// d := GetDir ( building ) ;
55321: LD_ADDR_VAR 0 8
55325: PUSH
55326: LD_VAR 0 2
55330: PPUSH
55331: CALL_OW 254
55335: ST_TO_ADDR
// r := 4 ;
55336: LD_ADDR_VAR 0 9
55340: PUSH
55341: LD_INT 4
55343: ST_TO_ADDR
// for i := 1 to 5 do
55344: LD_ADDR_VAR 0 10
55348: PUSH
55349: DOUBLE
55350: LD_INT 1
55352: DEC
55353: ST_TO_ADDR
55354: LD_INT 5
55356: PUSH
55357: FOR_TO
55358: IFFALSE 55515
// begin _x := ShiftX ( x , d , r + i ) ;
55360: LD_ADDR_VAR 0 5
55364: PUSH
55365: LD_VAR 0 4
55369: PPUSH
55370: LD_VAR 0 8
55374: PPUSH
55375: LD_VAR 0 9
55379: PUSH
55380: LD_VAR 0 10
55384: PLUS
55385: PPUSH
55386: CALL_OW 272
55390: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55391: LD_ADDR_VAR 0 7
55395: PUSH
55396: LD_VAR 0 6
55400: PPUSH
55401: LD_VAR 0 8
55405: PPUSH
55406: LD_VAR 0 9
55410: PUSH
55411: LD_VAR 0 10
55415: PLUS
55416: PPUSH
55417: CALL_OW 273
55421: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55422: LD_VAR 0 5
55426: PPUSH
55427: LD_VAR 0 7
55431: PPUSH
55432: CALL_OW 488
55436: PUSH
55437: LD_VAR 0 5
55441: PPUSH
55442: LD_VAR 0 7
55446: PPUSH
55447: CALL_OW 428
55451: PPUSH
55452: CALL_OW 247
55456: PUSH
55457: LD_INT 3
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: IN
55467: NOT
55468: AND
55469: IFFALSE 55513
// begin ComMoveXY ( unit , _x , _y ) ;
55471: LD_VAR 0 1
55475: PPUSH
55476: LD_VAR 0 5
55480: PPUSH
55481: LD_VAR 0 7
55485: PPUSH
55486: CALL_OW 111
// result := [ _x , _y ] ;
55490: LD_ADDR_VAR 0 3
55494: PUSH
55495: LD_VAR 0 5
55499: PUSH
55500: LD_VAR 0 7
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: ST_TO_ADDR
// exit ;
55509: POP
55510: POP
55511: GO 55517
// end ; end ;
55513: GO 55357
55515: POP
55516: POP
// end ;
55517: LD_VAR 0 3
55521: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55522: LD_INT 0
55524: PPUSH
55525: PPUSH
55526: PPUSH
// result := 0 ;
55527: LD_ADDR_VAR 0 3
55531: PUSH
55532: LD_INT 0
55534: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55535: LD_VAR 0 1
55539: PUSH
55540: LD_INT 0
55542: LESS
55543: PUSH
55544: LD_VAR 0 1
55548: PUSH
55549: LD_INT 8
55551: GREATER
55552: OR
55553: PUSH
55554: LD_VAR 0 2
55558: PUSH
55559: LD_INT 0
55561: LESS
55562: OR
55563: PUSH
55564: LD_VAR 0 2
55568: PUSH
55569: LD_INT 8
55571: GREATER
55572: OR
55573: IFFALSE 55577
// exit ;
55575: GO 55652
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55577: LD_ADDR_VAR 0 4
55581: PUSH
55582: LD_INT 22
55584: PUSH
55585: LD_VAR 0 2
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PPUSH
55594: CALL_OW 69
55598: PUSH
55599: FOR_IN
55600: IFFALSE 55650
// begin un := UnitShoot ( i ) ;
55602: LD_ADDR_VAR 0 5
55606: PUSH
55607: LD_VAR 0 4
55611: PPUSH
55612: CALL_OW 504
55616: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55617: LD_VAR 0 5
55621: PPUSH
55622: CALL_OW 255
55626: PUSH
55627: LD_VAR 0 1
55631: EQUAL
55632: IFFALSE 55648
// begin result := un ;
55634: LD_ADDR_VAR 0 3
55638: PUSH
55639: LD_VAR 0 5
55643: ST_TO_ADDR
// exit ;
55644: POP
55645: POP
55646: GO 55652
// end ; end ;
55648: GO 55599
55650: POP
55651: POP
// end ;
55652: LD_VAR 0 3
55656: RET
// export function GetCargoBay ( units ) ; begin
55657: LD_INT 0
55659: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55660: LD_ADDR_VAR 0 2
55664: PUSH
55665: LD_VAR 0 1
55669: PPUSH
55670: LD_INT 2
55672: PUSH
55673: LD_INT 34
55675: PUSH
55676: LD_INT 12
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 34
55685: PUSH
55686: LD_INT 51
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 34
55695: PUSH
55696: LD_INT 32
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 34
55705: PUSH
55706: LD_INT 89
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: PPUSH
55720: CALL_OW 72
55724: ST_TO_ADDR
// end ;
55725: LD_VAR 0 2
55729: RET
// export function Negate ( value ) ; begin
55730: LD_INT 0
55732: PPUSH
// result := not value ;
55733: LD_ADDR_VAR 0 2
55737: PUSH
55738: LD_VAR 0 1
55742: NOT
55743: ST_TO_ADDR
// end ;
55744: LD_VAR 0 2
55748: RET
// export function Inc ( value ) ; begin
55749: LD_INT 0
55751: PPUSH
// result := value + 1 ;
55752: LD_ADDR_VAR 0 2
55756: PUSH
55757: LD_VAR 0 1
55761: PUSH
55762: LD_INT 1
55764: PLUS
55765: ST_TO_ADDR
// end ;
55766: LD_VAR 0 2
55770: RET
// export function Dec ( value ) ; begin
55771: LD_INT 0
55773: PPUSH
// result := value - 1 ;
55774: LD_ADDR_VAR 0 2
55778: PUSH
55779: LD_VAR 0 1
55783: PUSH
55784: LD_INT 1
55786: MINUS
55787: ST_TO_ADDR
// end ;
55788: LD_VAR 0 2
55792: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55793: LD_INT 0
55795: PPUSH
55796: PPUSH
55797: PPUSH
55798: PPUSH
55799: PPUSH
55800: PPUSH
55801: PPUSH
55802: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55803: LD_VAR 0 1
55807: PPUSH
55808: LD_VAR 0 2
55812: PPUSH
55813: CALL_OW 488
55817: NOT
55818: PUSH
55819: LD_VAR 0 3
55823: PPUSH
55824: LD_VAR 0 4
55828: PPUSH
55829: CALL_OW 488
55833: NOT
55834: OR
55835: IFFALSE 55848
// begin result := - 1 ;
55837: LD_ADDR_VAR 0 5
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: ST_TO_ADDR
// exit ;
55846: GO 56083
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55848: LD_ADDR_VAR 0 12
55852: PUSH
55853: LD_VAR 0 1
55857: PPUSH
55858: LD_VAR 0 2
55862: PPUSH
55863: LD_VAR 0 3
55867: PPUSH
55868: LD_VAR 0 4
55872: PPUSH
55873: CALL 54933 0 4
55877: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55878: LD_ADDR_VAR 0 11
55882: PUSH
55883: LD_VAR 0 1
55887: PPUSH
55888: LD_VAR 0 2
55892: PPUSH
55893: LD_VAR 0 12
55897: PUSH
55898: LD_INT 1
55900: ARRAY
55901: PPUSH
55902: LD_VAR 0 12
55906: PUSH
55907: LD_INT 2
55909: ARRAY
55910: PPUSH
55911: CALL_OW 298
55915: ST_TO_ADDR
// distance := 9999 ;
55916: LD_ADDR_VAR 0 10
55920: PUSH
55921: LD_INT 9999
55923: ST_TO_ADDR
// for i := 0 to 5 do
55924: LD_ADDR_VAR 0 6
55928: PUSH
55929: DOUBLE
55930: LD_INT 0
55932: DEC
55933: ST_TO_ADDR
55934: LD_INT 5
55936: PUSH
55937: FOR_TO
55938: IFFALSE 56081
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55940: LD_ADDR_VAR 0 7
55944: PUSH
55945: LD_VAR 0 1
55949: PPUSH
55950: LD_VAR 0 6
55954: PPUSH
55955: LD_VAR 0 11
55959: PPUSH
55960: CALL_OW 272
55964: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55965: LD_ADDR_VAR 0 8
55969: PUSH
55970: LD_VAR 0 2
55974: PPUSH
55975: LD_VAR 0 6
55979: PPUSH
55980: LD_VAR 0 11
55984: PPUSH
55985: CALL_OW 273
55989: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55990: LD_VAR 0 7
55994: PPUSH
55995: LD_VAR 0 8
55999: PPUSH
56000: CALL_OW 488
56004: NOT
56005: IFFALSE 56009
// continue ;
56007: GO 55937
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56009: LD_ADDR_VAR 0 9
56013: PUSH
56014: LD_VAR 0 12
56018: PUSH
56019: LD_INT 1
56021: ARRAY
56022: PPUSH
56023: LD_VAR 0 12
56027: PUSH
56028: LD_INT 2
56030: ARRAY
56031: PPUSH
56032: LD_VAR 0 7
56036: PPUSH
56037: LD_VAR 0 8
56041: PPUSH
56042: CALL_OW 298
56046: ST_TO_ADDR
// if tmp < distance then
56047: LD_VAR 0 9
56051: PUSH
56052: LD_VAR 0 10
56056: LESS
56057: IFFALSE 56079
// begin result := i ;
56059: LD_ADDR_VAR 0 5
56063: PUSH
56064: LD_VAR 0 6
56068: ST_TO_ADDR
// distance := tmp ;
56069: LD_ADDR_VAR 0 10
56073: PUSH
56074: LD_VAR 0 9
56078: ST_TO_ADDR
// end ; end ;
56079: GO 55937
56081: POP
56082: POP
// end ;
56083: LD_VAR 0 5
56087: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56088: LD_INT 0
56090: PPUSH
56091: PPUSH
// if not driver or not IsInUnit ( driver ) then
56092: LD_VAR 0 1
56096: NOT
56097: PUSH
56098: LD_VAR 0 1
56102: PPUSH
56103: CALL_OW 310
56107: NOT
56108: OR
56109: IFFALSE 56113
// exit ;
56111: GO 56203
// vehicle := IsInUnit ( driver ) ;
56113: LD_ADDR_VAR 0 3
56117: PUSH
56118: LD_VAR 0 1
56122: PPUSH
56123: CALL_OW 310
56127: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56128: LD_VAR 0 1
56132: PPUSH
56133: LD_STRING \
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: PUSH
56163: LD_STRING E
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_VAR 0 3
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PPUSH
56199: CALL_OW 446
// end ;
56203: LD_VAR 0 2
56207: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56208: LD_INT 0
56210: PPUSH
56211: PPUSH
// if not driver or not IsInUnit ( driver ) then
56212: LD_VAR 0 1
56216: NOT
56217: PUSH
56218: LD_VAR 0 1
56222: PPUSH
56223: CALL_OW 310
56227: NOT
56228: OR
56229: IFFALSE 56233
// exit ;
56231: GO 56323
// vehicle := IsInUnit ( driver ) ;
56233: LD_ADDR_VAR 0 3
56237: PUSH
56238: LD_VAR 0 1
56242: PPUSH
56243: CALL_OW 310
56247: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56248: LD_VAR 0 1
56252: PPUSH
56253: LD_STRING \
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: PUSH
56283: LD_STRING E
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: LD_VAR 0 3
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PPUSH
56319: CALL_OW 447
// end ;
56323: LD_VAR 0 2
56327: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56328: LD_INT 0
56330: PPUSH
56331: PPUSH
56332: PPUSH
// tmp := [ ] ;
56333: LD_ADDR_VAR 0 5
56337: PUSH
56338: EMPTY
56339: ST_TO_ADDR
// for i in units do
56340: LD_ADDR_VAR 0 4
56344: PUSH
56345: LD_VAR 0 1
56349: PUSH
56350: FOR_IN
56351: IFFALSE 56389
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56353: LD_ADDR_VAR 0 5
56357: PUSH
56358: LD_VAR 0 5
56362: PPUSH
56363: LD_VAR 0 5
56367: PUSH
56368: LD_INT 1
56370: PLUS
56371: PPUSH
56372: LD_VAR 0 4
56376: PPUSH
56377: CALL_OW 256
56381: PPUSH
56382: CALL_OW 2
56386: ST_TO_ADDR
56387: GO 56350
56389: POP
56390: POP
// if not tmp then
56391: LD_VAR 0 5
56395: NOT
56396: IFFALSE 56400
// exit ;
56398: GO 56448
// if asc then
56400: LD_VAR 0 2
56404: IFFALSE 56428
// result := SortListByListAsc ( units , tmp ) else
56406: LD_ADDR_VAR 0 3
56410: PUSH
56411: LD_VAR 0 1
56415: PPUSH
56416: LD_VAR 0 5
56420: PPUSH
56421: CALL_OW 76
56425: ST_TO_ADDR
56426: GO 56448
// result := SortListByListDesc ( units , tmp ) ;
56428: LD_ADDR_VAR 0 3
56432: PUSH
56433: LD_VAR 0 1
56437: PPUSH
56438: LD_VAR 0 5
56442: PPUSH
56443: CALL_OW 77
56447: ST_TO_ADDR
// end ;
56448: LD_VAR 0 3
56452: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56453: LD_INT 0
56455: PPUSH
56456: PPUSH
// task := GetTaskList ( mech ) ;
56457: LD_ADDR_VAR 0 4
56461: PUSH
56462: LD_VAR 0 1
56466: PPUSH
56467: CALL_OW 437
56471: ST_TO_ADDR
// if not task then
56472: LD_VAR 0 4
56476: NOT
56477: IFFALSE 56481
// exit ;
56479: GO 56523
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56481: LD_ADDR_VAR 0 3
56485: PUSH
56486: LD_VAR 0 4
56490: PUSH
56491: LD_INT 1
56493: ARRAY
56494: PUSH
56495: LD_INT 1
56497: ARRAY
56498: PUSH
56499: LD_STRING r
56501: EQUAL
56502: PUSH
56503: LD_VAR 0 4
56507: PUSH
56508: LD_INT 1
56510: ARRAY
56511: PUSH
56512: LD_INT 4
56514: ARRAY
56515: PUSH
56516: LD_VAR 0 2
56520: EQUAL
56521: AND
56522: ST_TO_ADDR
// end ;
56523: LD_VAR 0 3
56527: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56528: LD_INT 0
56530: PPUSH
// SetDir ( unit , d ) ;
56531: LD_VAR 0 1
56535: PPUSH
56536: LD_VAR 0 4
56540: PPUSH
56541: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56545: LD_ADDR_VAR 0 6
56549: PUSH
56550: LD_VAR 0 1
56554: PPUSH
56555: LD_VAR 0 2
56559: PPUSH
56560: LD_VAR 0 3
56564: PPUSH
56565: LD_VAR 0 5
56569: PPUSH
56570: CALL_OW 48
56574: ST_TO_ADDR
// end ;
56575: LD_VAR 0 6
56579: RET
// export function ToNaturalNumber ( number ) ; begin
56580: LD_INT 0
56582: PPUSH
// result := number div 1 ;
56583: LD_ADDR_VAR 0 2
56587: PUSH
56588: LD_VAR 0 1
56592: PUSH
56593: LD_INT 1
56595: DIV
56596: ST_TO_ADDR
// if number < 0 then
56597: LD_VAR 0 1
56601: PUSH
56602: LD_INT 0
56604: LESS
56605: IFFALSE 56615
// result := 0 ;
56607: LD_ADDR_VAR 0 2
56611: PUSH
56612: LD_INT 0
56614: ST_TO_ADDR
// end ;
56615: LD_VAR 0 2
56619: RET
// export function SortByClass ( units , class ) ; var un ; begin
56620: LD_INT 0
56622: PPUSH
56623: PPUSH
// if not units or not class then
56624: LD_VAR 0 1
56628: NOT
56629: PUSH
56630: LD_VAR 0 2
56634: NOT
56635: OR
56636: IFFALSE 56640
// exit ;
56638: GO 56735
// result := [ ] ;
56640: LD_ADDR_VAR 0 3
56644: PUSH
56645: EMPTY
56646: ST_TO_ADDR
// for un in units do
56647: LD_ADDR_VAR 0 4
56651: PUSH
56652: LD_VAR 0 1
56656: PUSH
56657: FOR_IN
56658: IFFALSE 56733
// if GetClass ( un ) = class then
56660: LD_VAR 0 4
56664: PPUSH
56665: CALL_OW 257
56669: PUSH
56670: LD_VAR 0 2
56674: EQUAL
56675: IFFALSE 56702
// result := Insert ( result , 1 , un ) else
56677: LD_ADDR_VAR 0 3
56681: PUSH
56682: LD_VAR 0 3
56686: PPUSH
56687: LD_INT 1
56689: PPUSH
56690: LD_VAR 0 4
56694: PPUSH
56695: CALL_OW 2
56699: ST_TO_ADDR
56700: GO 56731
// result := Replace ( result , result + 1 , un ) ;
56702: LD_ADDR_VAR 0 3
56706: PUSH
56707: LD_VAR 0 3
56711: PPUSH
56712: LD_VAR 0 3
56716: PUSH
56717: LD_INT 1
56719: PLUS
56720: PPUSH
56721: LD_VAR 0 4
56725: PPUSH
56726: CALL_OW 1
56730: ST_TO_ADDR
56731: GO 56657
56733: POP
56734: POP
// end ;
56735: LD_VAR 0 3
56739: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56740: LD_INT 0
56742: PPUSH
56743: PPUSH
56744: PPUSH
56745: PPUSH
56746: PPUSH
56747: PPUSH
56748: PPUSH
// result := [ ] ;
56749: LD_ADDR_VAR 0 4
56753: PUSH
56754: EMPTY
56755: ST_TO_ADDR
// if x - r < 0 then
56756: LD_VAR 0 1
56760: PUSH
56761: LD_VAR 0 3
56765: MINUS
56766: PUSH
56767: LD_INT 0
56769: LESS
56770: IFFALSE 56782
// min_x := 0 else
56772: LD_ADDR_VAR 0 8
56776: PUSH
56777: LD_INT 0
56779: ST_TO_ADDR
56780: GO 56798
// min_x := x - r ;
56782: LD_ADDR_VAR 0 8
56786: PUSH
56787: LD_VAR 0 1
56791: PUSH
56792: LD_VAR 0 3
56796: MINUS
56797: ST_TO_ADDR
// if y - r < 0 then
56798: LD_VAR 0 2
56802: PUSH
56803: LD_VAR 0 3
56807: MINUS
56808: PUSH
56809: LD_INT 0
56811: LESS
56812: IFFALSE 56824
// min_y := 0 else
56814: LD_ADDR_VAR 0 7
56818: PUSH
56819: LD_INT 0
56821: ST_TO_ADDR
56822: GO 56840
// min_y := y - r ;
56824: LD_ADDR_VAR 0 7
56828: PUSH
56829: LD_VAR 0 2
56833: PUSH
56834: LD_VAR 0 3
56838: MINUS
56839: ST_TO_ADDR
// max_x := x + r ;
56840: LD_ADDR_VAR 0 9
56844: PUSH
56845: LD_VAR 0 1
56849: PUSH
56850: LD_VAR 0 3
56854: PLUS
56855: ST_TO_ADDR
// max_y := y + r ;
56856: LD_ADDR_VAR 0 10
56860: PUSH
56861: LD_VAR 0 2
56865: PUSH
56866: LD_VAR 0 3
56870: PLUS
56871: ST_TO_ADDR
// for _x = min_x to max_x do
56872: LD_ADDR_VAR 0 5
56876: PUSH
56877: DOUBLE
56878: LD_VAR 0 8
56882: DEC
56883: ST_TO_ADDR
56884: LD_VAR 0 9
56888: PUSH
56889: FOR_TO
56890: IFFALSE 56991
// for _y = min_y to max_y do
56892: LD_ADDR_VAR 0 6
56896: PUSH
56897: DOUBLE
56898: LD_VAR 0 7
56902: DEC
56903: ST_TO_ADDR
56904: LD_VAR 0 10
56908: PUSH
56909: FOR_TO
56910: IFFALSE 56987
// begin if not ValidHex ( _x , _y ) then
56912: LD_VAR 0 5
56916: PPUSH
56917: LD_VAR 0 6
56921: PPUSH
56922: CALL_OW 488
56926: NOT
56927: IFFALSE 56931
// continue ;
56929: GO 56909
// if GetResourceTypeXY ( _x , _y ) then
56931: LD_VAR 0 5
56935: PPUSH
56936: LD_VAR 0 6
56940: PPUSH
56941: CALL_OW 283
56945: IFFALSE 56985
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56947: LD_ADDR_VAR 0 4
56951: PUSH
56952: LD_VAR 0 4
56956: PPUSH
56957: LD_VAR 0 4
56961: PUSH
56962: LD_INT 1
56964: PLUS
56965: PPUSH
56966: LD_VAR 0 5
56970: PUSH
56971: LD_VAR 0 6
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PPUSH
56980: CALL_OW 1
56984: ST_TO_ADDR
// end ;
56985: GO 56909
56987: POP
56988: POP
56989: GO 56889
56991: POP
56992: POP
// end ;
56993: LD_VAR 0 4
56997: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56998: LD_INT 0
57000: PPUSH
57001: PPUSH
57002: PPUSH
57003: PPUSH
57004: PPUSH
57005: PPUSH
57006: PPUSH
57007: PPUSH
// if not units then
57008: LD_VAR 0 1
57012: NOT
57013: IFFALSE 57017
// exit ;
57015: GO 57545
// result := UnitFilter ( units , [ f_ok ] ) ;
57017: LD_ADDR_VAR 0 3
57021: PUSH
57022: LD_VAR 0 1
57026: PPUSH
57027: LD_INT 50
57029: PUSH
57030: EMPTY
57031: LIST
57032: PPUSH
57033: CALL_OW 72
57037: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57038: LD_ADDR_VAR 0 8
57042: PUSH
57043: LD_VAR 0 1
57047: PUSH
57048: LD_INT 1
57050: ARRAY
57051: PPUSH
57052: CALL_OW 255
57056: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57057: LD_ADDR_VAR 0 10
57061: PUSH
57062: LD_INT 29
57064: PUSH
57065: LD_INT 91
57067: PUSH
57068: LD_INT 49
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: LIST
57075: ST_TO_ADDR
// if not result then
57076: LD_VAR 0 3
57080: NOT
57081: IFFALSE 57085
// exit ;
57083: GO 57545
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57085: LD_ADDR_VAR 0 5
57089: PUSH
57090: LD_INT 81
57092: PUSH
57093: LD_VAR 0 8
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PPUSH
57102: CALL_OW 69
57106: ST_TO_ADDR
// for i in result do
57107: LD_ADDR_VAR 0 4
57111: PUSH
57112: LD_VAR 0 3
57116: PUSH
57117: FOR_IN
57118: IFFALSE 57543
// begin tag := GetTag ( i ) + 1 ;
57120: LD_ADDR_VAR 0 9
57124: PUSH
57125: LD_VAR 0 4
57129: PPUSH
57130: CALL_OW 110
57134: PUSH
57135: LD_INT 1
57137: PLUS
57138: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57139: LD_ADDR_VAR 0 7
57143: PUSH
57144: LD_VAR 0 4
57148: PPUSH
57149: CALL_OW 250
57153: PPUSH
57154: LD_VAR 0 4
57158: PPUSH
57159: CALL_OW 251
57163: PPUSH
57164: LD_INT 4
57166: PPUSH
57167: CALL 56740 0 3
57171: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57172: LD_VAR 0 4
57176: PPUSH
57177: CALL_OW 247
57181: PUSH
57182: LD_INT 2
57184: EQUAL
57185: PUSH
57186: LD_VAR 0 7
57190: PUSH
57191: LD_INT 2
57193: GREATER
57194: AND
57195: PUSH
57196: LD_VAR 0 4
57200: PPUSH
57201: CALL_OW 264
57205: PUSH
57206: LD_VAR 0 10
57210: IN
57211: NOT
57212: AND
57213: IFFALSE 57252
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57215: LD_VAR 0 4
57219: PPUSH
57220: LD_VAR 0 7
57224: PUSH
57225: LD_INT 1
57227: ARRAY
57228: PUSH
57229: LD_INT 1
57231: ARRAY
57232: PPUSH
57233: LD_VAR 0 7
57237: PUSH
57238: LD_INT 1
57240: ARRAY
57241: PUSH
57242: LD_INT 2
57244: ARRAY
57245: PPUSH
57246: CALL_OW 116
57250: GO 57541
// if path > tag then
57252: LD_VAR 0 2
57256: PUSH
57257: LD_VAR 0 9
57261: GREATER
57262: IFFALSE 57470
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57264: LD_ADDR_VAR 0 6
57268: PUSH
57269: LD_VAR 0 5
57273: PPUSH
57274: LD_INT 91
57276: PUSH
57277: LD_VAR 0 4
57281: PUSH
57282: LD_INT 8
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: LIST
57289: PPUSH
57290: CALL_OW 72
57294: ST_TO_ADDR
// if nearEnemy then
57295: LD_VAR 0 6
57299: IFFALSE 57368
// begin if GetWeapon ( i ) = ru_time_lapser then
57301: LD_VAR 0 4
57305: PPUSH
57306: CALL_OW 264
57310: PUSH
57311: LD_INT 49
57313: EQUAL
57314: IFFALSE 57342
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57316: LD_VAR 0 4
57320: PPUSH
57321: LD_VAR 0 6
57325: PPUSH
57326: LD_VAR 0 4
57330: PPUSH
57331: CALL_OW 74
57335: PPUSH
57336: CALL_OW 112
57340: GO 57366
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57342: LD_VAR 0 4
57346: PPUSH
57347: LD_VAR 0 6
57351: PPUSH
57352: LD_VAR 0 4
57356: PPUSH
57357: CALL_OW 74
57361: PPUSH
57362: CALL 58616 0 2
// end else
57366: GO 57468
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57368: LD_VAR 0 4
57372: PPUSH
57373: LD_VAR 0 2
57377: PUSH
57378: LD_VAR 0 9
57382: ARRAY
57383: PUSH
57384: LD_INT 1
57386: ARRAY
57387: PPUSH
57388: LD_VAR 0 2
57392: PUSH
57393: LD_VAR 0 9
57397: ARRAY
57398: PUSH
57399: LD_INT 2
57401: ARRAY
57402: PPUSH
57403: CALL_OW 297
57407: PUSH
57408: LD_INT 6
57410: GREATER
57411: IFFALSE 57454
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57413: LD_VAR 0 4
57417: PPUSH
57418: LD_VAR 0 2
57422: PUSH
57423: LD_VAR 0 9
57427: ARRAY
57428: PUSH
57429: LD_INT 1
57431: ARRAY
57432: PPUSH
57433: LD_VAR 0 2
57437: PUSH
57438: LD_VAR 0 9
57442: ARRAY
57443: PUSH
57444: LD_INT 2
57446: ARRAY
57447: PPUSH
57448: CALL_OW 114
57452: GO 57468
// SetTag ( i , tag ) ;
57454: LD_VAR 0 4
57458: PPUSH
57459: LD_VAR 0 9
57463: PPUSH
57464: CALL_OW 109
// end else
57468: GO 57541
// if enemy then
57470: LD_VAR 0 5
57474: IFFALSE 57541
// begin if GetWeapon ( i ) = ru_time_lapser then
57476: LD_VAR 0 4
57480: PPUSH
57481: CALL_OW 264
57485: PUSH
57486: LD_INT 49
57488: EQUAL
57489: IFFALSE 57517
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57491: LD_VAR 0 4
57495: PPUSH
57496: LD_VAR 0 5
57500: PPUSH
57501: LD_VAR 0 4
57505: PPUSH
57506: CALL_OW 74
57510: PPUSH
57511: CALL_OW 112
57515: GO 57541
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57517: LD_VAR 0 4
57521: PPUSH
57522: LD_VAR 0 5
57526: PPUSH
57527: LD_VAR 0 4
57531: PPUSH
57532: CALL_OW 74
57536: PPUSH
57537: CALL 58616 0 2
// end ; end ;
57541: GO 57117
57543: POP
57544: POP
// end ;
57545: LD_VAR 0 3
57549: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57550: LD_INT 0
57552: PPUSH
57553: PPUSH
57554: PPUSH
// if not unit or IsInUnit ( unit ) then
57555: LD_VAR 0 1
57559: NOT
57560: PUSH
57561: LD_VAR 0 1
57565: PPUSH
57566: CALL_OW 310
57570: OR
57571: IFFALSE 57575
// exit ;
57573: GO 57666
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57575: LD_ADDR_VAR 0 4
57579: PUSH
57580: LD_VAR 0 1
57584: PPUSH
57585: CALL_OW 250
57589: PPUSH
57590: LD_VAR 0 2
57594: PPUSH
57595: LD_INT 1
57597: PPUSH
57598: CALL_OW 272
57602: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57603: LD_ADDR_VAR 0 5
57607: PUSH
57608: LD_VAR 0 1
57612: PPUSH
57613: CALL_OW 251
57617: PPUSH
57618: LD_VAR 0 2
57622: PPUSH
57623: LD_INT 1
57625: PPUSH
57626: CALL_OW 273
57630: ST_TO_ADDR
// if ValidHex ( x , y ) then
57631: LD_VAR 0 4
57635: PPUSH
57636: LD_VAR 0 5
57640: PPUSH
57641: CALL_OW 488
57645: IFFALSE 57666
// ComTurnXY ( unit , x , y ) ;
57647: LD_VAR 0 1
57651: PPUSH
57652: LD_VAR 0 4
57656: PPUSH
57657: LD_VAR 0 5
57661: PPUSH
57662: CALL_OW 118
// end ;
57666: LD_VAR 0 3
57670: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57671: LD_INT 0
57673: PPUSH
57674: PPUSH
// result := false ;
57675: LD_ADDR_VAR 0 3
57679: PUSH
57680: LD_INT 0
57682: ST_TO_ADDR
// if not units then
57683: LD_VAR 0 2
57687: NOT
57688: IFFALSE 57692
// exit ;
57690: GO 57737
// for i in units do
57692: LD_ADDR_VAR 0 4
57696: PUSH
57697: LD_VAR 0 2
57701: PUSH
57702: FOR_IN
57703: IFFALSE 57735
// if See ( side , i ) then
57705: LD_VAR 0 1
57709: PPUSH
57710: LD_VAR 0 4
57714: PPUSH
57715: CALL_OW 292
57719: IFFALSE 57733
// begin result := true ;
57721: LD_ADDR_VAR 0 3
57725: PUSH
57726: LD_INT 1
57728: ST_TO_ADDR
// exit ;
57729: POP
57730: POP
57731: GO 57737
// end ;
57733: GO 57702
57735: POP
57736: POP
// end ;
57737: LD_VAR 0 3
57741: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57742: LD_INT 0
57744: PPUSH
57745: PPUSH
57746: PPUSH
57747: PPUSH
// if not unit or not points then
57748: LD_VAR 0 1
57752: NOT
57753: PUSH
57754: LD_VAR 0 2
57758: NOT
57759: OR
57760: IFFALSE 57764
// exit ;
57762: GO 57854
// dist := 99999 ;
57764: LD_ADDR_VAR 0 5
57768: PUSH
57769: LD_INT 99999
57771: ST_TO_ADDR
// for i in points do
57772: LD_ADDR_VAR 0 4
57776: PUSH
57777: LD_VAR 0 2
57781: PUSH
57782: FOR_IN
57783: IFFALSE 57852
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57785: LD_ADDR_VAR 0 6
57789: PUSH
57790: LD_VAR 0 1
57794: PPUSH
57795: LD_VAR 0 4
57799: PUSH
57800: LD_INT 1
57802: ARRAY
57803: PPUSH
57804: LD_VAR 0 4
57808: PUSH
57809: LD_INT 2
57811: ARRAY
57812: PPUSH
57813: CALL_OW 297
57817: ST_TO_ADDR
// if tmpDist < dist then
57818: LD_VAR 0 6
57822: PUSH
57823: LD_VAR 0 5
57827: LESS
57828: IFFALSE 57850
// begin result := i ;
57830: LD_ADDR_VAR 0 3
57834: PUSH
57835: LD_VAR 0 4
57839: ST_TO_ADDR
// dist := tmpDist ;
57840: LD_ADDR_VAR 0 5
57844: PUSH
57845: LD_VAR 0 6
57849: ST_TO_ADDR
// end ; end ;
57850: GO 57782
57852: POP
57853: POP
// end ;
57854: LD_VAR 0 3
57858: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57859: LD_INT 0
57861: PPUSH
// uc_side := side ;
57862: LD_ADDR_OWVAR 20
57866: PUSH
57867: LD_VAR 0 1
57871: ST_TO_ADDR
// uc_nation := 3 ;
57872: LD_ADDR_OWVAR 21
57876: PUSH
57877: LD_INT 3
57879: ST_TO_ADDR
// vc_chassis := 25 ;
57880: LD_ADDR_OWVAR 37
57884: PUSH
57885: LD_INT 25
57887: ST_TO_ADDR
// vc_engine := engine_siberite ;
57888: LD_ADDR_OWVAR 39
57892: PUSH
57893: LD_INT 3
57895: ST_TO_ADDR
// vc_control := control_computer ;
57896: LD_ADDR_OWVAR 38
57900: PUSH
57901: LD_INT 3
57903: ST_TO_ADDR
// vc_weapon := 59 ;
57904: LD_ADDR_OWVAR 40
57908: PUSH
57909: LD_INT 59
57911: ST_TO_ADDR
// result := CreateVehicle ;
57912: LD_ADDR_VAR 0 5
57916: PUSH
57917: CALL_OW 45
57921: ST_TO_ADDR
// SetDir ( result , d ) ;
57922: LD_VAR 0 5
57926: PPUSH
57927: LD_VAR 0 4
57931: PPUSH
57932: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57936: LD_VAR 0 5
57940: PPUSH
57941: LD_VAR 0 2
57945: PPUSH
57946: LD_VAR 0 3
57950: PPUSH
57951: LD_INT 0
57953: PPUSH
57954: CALL_OW 48
// end ;
57958: LD_VAR 0 5
57962: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57963: LD_INT 0
57965: PPUSH
57966: PPUSH
57967: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57968: LD_ADDR_VAR 0 2
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57991: LD_VAR 0 1
57995: NOT
57996: PUSH
57997: LD_VAR 0 1
58001: PPUSH
58002: CALL_OW 264
58006: PUSH
58007: LD_INT 12
58009: PUSH
58010: LD_INT 51
58012: PUSH
58013: LD_INT 32
58015: PUSH
58016: LD_INT 89
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: IN
58025: NOT
58026: OR
58027: IFFALSE 58031
// exit ;
58029: GO 58129
// for i := 1 to 3 do
58031: LD_ADDR_VAR 0 3
58035: PUSH
58036: DOUBLE
58037: LD_INT 1
58039: DEC
58040: ST_TO_ADDR
58041: LD_INT 3
58043: PUSH
58044: FOR_TO
58045: IFFALSE 58127
// begin tmp := GetCargo ( cargo , i ) ;
58047: LD_ADDR_VAR 0 4
58051: PUSH
58052: LD_VAR 0 1
58056: PPUSH
58057: LD_VAR 0 3
58061: PPUSH
58062: CALL_OW 289
58066: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58067: LD_ADDR_VAR 0 2
58071: PUSH
58072: LD_VAR 0 2
58076: PPUSH
58077: LD_VAR 0 3
58081: PPUSH
58082: LD_VAR 0 4
58086: PPUSH
58087: CALL_OW 1
58091: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58092: LD_ADDR_VAR 0 2
58096: PUSH
58097: LD_VAR 0 2
58101: PPUSH
58102: LD_INT 4
58104: PPUSH
58105: LD_VAR 0 2
58109: PUSH
58110: LD_INT 4
58112: ARRAY
58113: PUSH
58114: LD_VAR 0 4
58118: PLUS
58119: PPUSH
58120: CALL_OW 1
58124: ST_TO_ADDR
// end ;
58125: GO 58044
58127: POP
58128: POP
// end ;
58129: LD_VAR 0 2
58133: RET
// export function Length ( array ) ; begin
58134: LD_INT 0
58136: PPUSH
// result := array + 0 ;
58137: LD_ADDR_VAR 0 2
58141: PUSH
58142: LD_VAR 0 1
58146: PUSH
58147: LD_INT 0
58149: PLUS
58150: ST_TO_ADDR
// end ;
58151: LD_VAR 0 2
58155: RET
// export function PrepareArray ( array ) ; begin
58156: LD_INT 0
58158: PPUSH
// result := array diff 0 ;
58159: LD_ADDR_VAR 0 2
58163: PUSH
58164: LD_VAR 0 1
58168: PUSH
58169: LD_INT 0
58171: DIFF
58172: ST_TO_ADDR
// if not result [ 1 ] then
58173: LD_VAR 0 2
58177: PUSH
58178: LD_INT 1
58180: ARRAY
58181: NOT
58182: IFFALSE 58202
// result := Delete ( result , 1 ) ;
58184: LD_ADDR_VAR 0 2
58188: PUSH
58189: LD_VAR 0 2
58193: PPUSH
58194: LD_INT 1
58196: PPUSH
58197: CALL_OW 3
58201: ST_TO_ADDR
// end ;
58202: LD_VAR 0 2
58206: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58207: LD_INT 0
58209: PPUSH
58210: PPUSH
58211: PPUSH
58212: PPUSH
// sibRocketRange := 25 ;
58213: LD_ADDR_VAR 0 6
58217: PUSH
58218: LD_INT 25
58220: ST_TO_ADDR
// result := false ;
58221: LD_ADDR_VAR 0 4
58225: PUSH
58226: LD_INT 0
58228: ST_TO_ADDR
// for i := 0 to 5 do
58229: LD_ADDR_VAR 0 5
58233: PUSH
58234: DOUBLE
58235: LD_INT 0
58237: DEC
58238: ST_TO_ADDR
58239: LD_INT 5
58241: PUSH
58242: FOR_TO
58243: IFFALSE 58310
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58245: LD_VAR 0 1
58249: PPUSH
58250: LD_VAR 0 5
58254: PPUSH
58255: LD_VAR 0 6
58259: PPUSH
58260: CALL_OW 272
58264: PPUSH
58265: LD_VAR 0 2
58269: PPUSH
58270: LD_VAR 0 5
58274: PPUSH
58275: LD_VAR 0 6
58279: PPUSH
58280: CALL_OW 273
58284: PPUSH
58285: LD_VAR 0 3
58289: PPUSH
58290: CALL_OW 309
58294: IFFALSE 58308
// begin result := true ;
58296: LD_ADDR_VAR 0 4
58300: PUSH
58301: LD_INT 1
58303: ST_TO_ADDR
// exit ;
58304: POP
58305: POP
58306: GO 58312
// end ;
58308: GO 58242
58310: POP
58311: POP
// end ;
58312: LD_VAR 0 4
58316: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58317: LD_INT 0
58319: PPUSH
58320: PPUSH
58321: PPUSH
// if btype = b_depot then
58322: LD_VAR 0 2
58326: PUSH
58327: LD_INT 0
58329: EQUAL
58330: IFFALSE 58342
// begin result := true ;
58332: LD_ADDR_VAR 0 3
58336: PUSH
58337: LD_INT 1
58339: ST_TO_ADDR
// exit ;
58340: GO 58458
// end ; pom := GetBase ( depot ) ;
58342: LD_ADDR_VAR 0 4
58346: PUSH
58347: LD_VAR 0 1
58351: PPUSH
58352: CALL_OW 274
58356: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58357: LD_ADDR_VAR 0 5
58361: PUSH
58362: LD_VAR 0 2
58366: PPUSH
58367: LD_VAR 0 1
58371: PPUSH
58372: CALL_OW 248
58376: PPUSH
58377: CALL_OW 450
58381: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58382: LD_ADDR_VAR 0 3
58386: PUSH
58387: LD_VAR 0 4
58391: PPUSH
58392: LD_INT 1
58394: PPUSH
58395: CALL_OW 275
58399: PUSH
58400: LD_VAR 0 5
58404: PUSH
58405: LD_INT 1
58407: ARRAY
58408: GREATEREQUAL
58409: PUSH
58410: LD_VAR 0 4
58414: PPUSH
58415: LD_INT 2
58417: PPUSH
58418: CALL_OW 275
58422: PUSH
58423: LD_VAR 0 5
58427: PUSH
58428: LD_INT 2
58430: ARRAY
58431: GREATEREQUAL
58432: AND
58433: PUSH
58434: LD_VAR 0 4
58438: PPUSH
58439: LD_INT 3
58441: PPUSH
58442: CALL_OW 275
58446: PUSH
58447: LD_VAR 0 5
58451: PUSH
58452: LD_INT 3
58454: ARRAY
58455: GREATEREQUAL
58456: AND
58457: ST_TO_ADDR
// end ;
58458: LD_VAR 0 3
58462: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58463: LD_INT 0
58465: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58466: LD_VAR 0 1
58470: PPUSH
58471: LD_VAR 0 2
58475: PPUSH
58476: LD_INT 0
58478: PPUSH
58479: LD_INT 0
58481: PPUSH
58482: LD_INT 1
58484: PPUSH
58485: LD_INT 0
58487: PPUSH
58488: CALL_OW 587
// end ;
58492: LD_VAR 0 3
58496: RET
// export function CenterOnNow ( unit ) ; begin
58497: LD_INT 0
58499: PPUSH
// result := IsInUnit ( unit ) ;
58500: LD_ADDR_VAR 0 2
58504: PUSH
58505: LD_VAR 0 1
58509: PPUSH
58510: CALL_OW 310
58514: ST_TO_ADDR
// if not result then
58515: LD_VAR 0 2
58519: NOT
58520: IFFALSE 58532
// result := unit ;
58522: LD_ADDR_VAR 0 2
58526: PUSH
58527: LD_VAR 0 1
58531: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58532: LD_VAR 0 1
58536: PPUSH
58537: CALL_OW 87
// end ;
58541: LD_VAR 0 2
58545: RET
// export function ComMoveHex ( unit , hex ) ; begin
58546: LD_INT 0
58548: PPUSH
// if not hex then
58549: LD_VAR 0 2
58553: NOT
58554: IFFALSE 58558
// exit ;
58556: GO 58611
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58558: LD_VAR 0 2
58562: PUSH
58563: LD_INT 1
58565: ARRAY
58566: PPUSH
58567: LD_VAR 0 2
58571: PUSH
58572: LD_INT 2
58574: ARRAY
58575: PPUSH
58576: CALL_OW 428
58580: IFFALSE 58584
// exit ;
58582: GO 58611
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58584: LD_VAR 0 1
58588: PPUSH
58589: LD_VAR 0 2
58593: PUSH
58594: LD_INT 1
58596: ARRAY
58597: PPUSH
58598: LD_VAR 0 2
58602: PUSH
58603: LD_INT 2
58605: ARRAY
58606: PPUSH
58607: CALL_OW 111
// end ;
58611: LD_VAR 0 3
58615: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58616: LD_INT 0
58618: PPUSH
58619: PPUSH
58620: PPUSH
// if not unit or not enemy then
58621: LD_VAR 0 1
58625: NOT
58626: PUSH
58627: LD_VAR 0 2
58631: NOT
58632: OR
58633: IFFALSE 58637
// exit ;
58635: GO 58761
// x := GetX ( enemy ) ;
58637: LD_ADDR_VAR 0 4
58641: PUSH
58642: LD_VAR 0 2
58646: PPUSH
58647: CALL_OW 250
58651: ST_TO_ADDR
// y := GetY ( enemy ) ;
58652: LD_ADDR_VAR 0 5
58656: PUSH
58657: LD_VAR 0 2
58661: PPUSH
58662: CALL_OW 251
58666: ST_TO_ADDR
// if ValidHex ( x , y ) then
58667: LD_VAR 0 4
58671: PPUSH
58672: LD_VAR 0 5
58676: PPUSH
58677: CALL_OW 488
58681: IFFALSE 58761
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58683: LD_VAR 0 2
58687: PPUSH
58688: CALL_OW 247
58692: PUSH
58693: LD_INT 3
58695: PUSH
58696: LD_INT 2
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: IN
58703: PUSH
58704: LD_VAR 0 1
58708: PPUSH
58709: CALL_OW 255
58713: PPUSH
58714: LD_VAR 0 2
58718: PPUSH
58719: CALL_OW 292
58723: OR
58724: IFFALSE 58742
// ComAttackUnit ( unit , enemy ) else
58726: LD_VAR 0 1
58730: PPUSH
58731: LD_VAR 0 2
58735: PPUSH
58736: CALL_OW 115
58740: GO 58761
// ComAgressiveMove ( unit , x , y ) ;
58742: LD_VAR 0 1
58746: PPUSH
58747: LD_VAR 0 4
58751: PPUSH
58752: LD_VAR 0 5
58756: PPUSH
58757: CALL_OW 114
// end ;
58761: LD_VAR 0 3
58765: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58766: LD_INT 0
58768: PPUSH
58769: PPUSH
58770: PPUSH
// list := AreaToList ( area , 0 ) ;
58771: LD_ADDR_VAR 0 5
58775: PUSH
58776: LD_VAR 0 1
58780: PPUSH
58781: LD_INT 0
58783: PPUSH
58784: CALL_OW 517
58788: ST_TO_ADDR
// if not list then
58789: LD_VAR 0 5
58793: NOT
58794: IFFALSE 58798
// exit ;
58796: GO 58928
// if all then
58798: LD_VAR 0 2
58802: IFFALSE 58890
// begin for i := 1 to list [ 1 ] do
58804: LD_ADDR_VAR 0 4
58808: PUSH
58809: DOUBLE
58810: LD_INT 1
58812: DEC
58813: ST_TO_ADDR
58814: LD_VAR 0 5
58818: PUSH
58819: LD_INT 1
58821: ARRAY
58822: PUSH
58823: FOR_TO
58824: IFFALSE 58886
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58826: LD_ADDR_VAR 0 3
58830: PUSH
58831: LD_VAR 0 3
58835: PPUSH
58836: LD_VAR 0 3
58840: PUSH
58841: LD_INT 1
58843: PLUS
58844: PPUSH
58845: LD_VAR 0 5
58849: PUSH
58850: LD_INT 1
58852: ARRAY
58853: PUSH
58854: LD_VAR 0 4
58858: ARRAY
58859: PUSH
58860: LD_VAR 0 5
58864: PUSH
58865: LD_INT 2
58867: ARRAY
58868: PUSH
58869: LD_VAR 0 4
58873: ARRAY
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PPUSH
58879: CALL_OW 1
58883: ST_TO_ADDR
58884: GO 58823
58886: POP
58887: POP
// exit ;
58888: GO 58928
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58890: LD_ADDR_VAR 0 3
58894: PUSH
58895: LD_VAR 0 5
58899: PUSH
58900: LD_INT 1
58902: ARRAY
58903: PUSH
58904: LD_INT 1
58906: ARRAY
58907: PUSH
58908: LD_VAR 0 5
58912: PUSH
58913: LD_INT 2
58915: ARRAY
58916: PUSH
58917: LD_INT 1
58919: ARRAY
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: ST_TO_ADDR
// end ;
58928: LD_VAR 0 3
58932: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58933: LD_INT 0
58935: PPUSH
58936: PPUSH
// list := AreaToList ( area , 0 ) ;
58937: LD_ADDR_VAR 0 4
58941: PUSH
58942: LD_VAR 0 1
58946: PPUSH
58947: LD_INT 0
58949: PPUSH
58950: CALL_OW 517
58954: ST_TO_ADDR
// if not list then
58955: LD_VAR 0 4
58959: NOT
58960: IFFALSE 58964
// exit ;
58962: GO 59005
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58964: LD_ADDR_VAR 0 3
58968: PUSH
58969: LD_VAR 0 4
58973: PUSH
58974: LD_INT 1
58976: ARRAY
58977: PUSH
58978: LD_INT 1
58980: ARRAY
58981: PUSH
58982: LD_VAR 0 4
58986: PUSH
58987: LD_INT 2
58989: ARRAY
58990: PUSH
58991: LD_INT 1
58993: ARRAY
58994: PUSH
58995: LD_VAR 0 2
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: LIST
59004: ST_TO_ADDR
// end ;
59005: LD_VAR 0 3
59009: RET
// export function First ( array ) ; begin
59010: LD_INT 0
59012: PPUSH
// if not array then
59013: LD_VAR 0 1
59017: NOT
59018: IFFALSE 59022
// exit ;
59020: GO 59036
// result := array [ 1 ] ;
59022: LD_ADDR_VAR 0 2
59026: PUSH
59027: LD_VAR 0 1
59031: PUSH
59032: LD_INT 1
59034: ARRAY
59035: ST_TO_ADDR
// end ;
59036: LD_VAR 0 2
59040: RET
// export function Last ( array ) ; begin
59041: LD_INT 0
59043: PPUSH
// if not array then
59044: LD_VAR 0 1
59048: NOT
59049: IFFALSE 59053
// exit ;
59051: GO 59069
// result := array [ array ] ;
59053: LD_ADDR_VAR 0 2
59057: PUSH
59058: LD_VAR 0 1
59062: PUSH
59063: LD_VAR 0 1
59067: ARRAY
59068: ST_TO_ADDR
// end ;
59069: LD_VAR 0 2
59073: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59074: LD_INT 0
59076: PPUSH
59077: PPUSH
// result := [ ] ;
59078: LD_ADDR_VAR 0 5
59082: PUSH
59083: EMPTY
59084: ST_TO_ADDR
// if not array then
59085: LD_VAR 0 1
59089: NOT
59090: IFFALSE 59094
// exit ;
59092: GO 59206
// for i := 1 to array do
59094: LD_ADDR_VAR 0 6
59098: PUSH
59099: DOUBLE
59100: LD_INT 1
59102: DEC
59103: ST_TO_ADDR
59104: LD_VAR 0 1
59108: PUSH
59109: FOR_TO
59110: IFFALSE 59204
// if array [ i ] [ index ] = value then
59112: LD_VAR 0 1
59116: PUSH
59117: LD_VAR 0 6
59121: ARRAY
59122: PUSH
59123: LD_VAR 0 2
59127: ARRAY
59128: PUSH
59129: LD_VAR 0 3
59133: EQUAL
59134: IFFALSE 59202
// begin if indexColumn then
59136: LD_VAR 0 4
59140: IFFALSE 59176
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59142: LD_ADDR_VAR 0 5
59146: PUSH
59147: LD_VAR 0 5
59151: PPUSH
59152: LD_VAR 0 1
59156: PUSH
59157: LD_VAR 0 6
59161: ARRAY
59162: PUSH
59163: LD_VAR 0 4
59167: ARRAY
59168: PPUSH
59169: CALL 54388 0 2
59173: ST_TO_ADDR
59174: GO 59202
// result := Join ( result , array [ i ] ) ;
59176: LD_ADDR_VAR 0 5
59180: PUSH
59181: LD_VAR 0 5
59185: PPUSH
59186: LD_VAR 0 1
59190: PUSH
59191: LD_VAR 0 6
59195: ARRAY
59196: PPUSH
59197: CALL 54388 0 2
59201: ST_TO_ADDR
// end ;
59202: GO 59109
59204: POP
59205: POP
// end ;
59206: LD_VAR 0 5
59210: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59211: LD_INT 0
59213: PPUSH
// if not vehicles or not parkingPoint then
59214: LD_VAR 0 1
59218: NOT
59219: PUSH
59220: LD_VAR 0 2
59224: NOT
59225: OR
59226: IFFALSE 59230
// exit ;
59228: GO 59328
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59230: LD_ADDR_VAR 0 1
59234: PUSH
59235: LD_VAR 0 1
59239: PPUSH
59240: LD_INT 50
59242: PUSH
59243: EMPTY
59244: LIST
59245: PUSH
59246: LD_INT 3
59248: PUSH
59249: LD_INT 92
59251: PUSH
59252: LD_VAR 0 2
59256: PUSH
59257: LD_INT 1
59259: ARRAY
59260: PUSH
59261: LD_VAR 0 2
59265: PUSH
59266: LD_INT 2
59268: ARRAY
59269: PUSH
59270: LD_INT 8
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PPUSH
59287: CALL_OW 72
59291: ST_TO_ADDR
// if not vehicles then
59292: LD_VAR 0 1
59296: NOT
59297: IFFALSE 59301
// exit ;
59299: GO 59328
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59301: LD_VAR 0 1
59305: PPUSH
59306: LD_VAR 0 2
59310: PUSH
59311: LD_INT 1
59313: ARRAY
59314: PPUSH
59315: LD_VAR 0 2
59319: PUSH
59320: LD_INT 2
59322: ARRAY
59323: PPUSH
59324: CALL_OW 111
// end ;
59328: LD_VAR 0 3
59332: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59333: LD_INT 0
59335: PPUSH
59336: PPUSH
59337: PPUSH
// if not side or not area then
59338: LD_VAR 0 1
59342: NOT
59343: PUSH
59344: LD_VAR 0 2
59348: NOT
59349: OR
59350: IFFALSE 59354
// exit ;
59352: GO 59473
// tmp := AreaToList ( area , 0 ) ;
59354: LD_ADDR_VAR 0 5
59358: PUSH
59359: LD_VAR 0 2
59363: PPUSH
59364: LD_INT 0
59366: PPUSH
59367: CALL_OW 517
59371: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59372: LD_ADDR_VAR 0 4
59376: PUSH
59377: DOUBLE
59378: LD_INT 1
59380: DEC
59381: ST_TO_ADDR
59382: LD_VAR 0 5
59386: PUSH
59387: LD_INT 1
59389: ARRAY
59390: PUSH
59391: FOR_TO
59392: IFFALSE 59471
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59394: LD_VAR 0 5
59398: PUSH
59399: LD_INT 1
59401: ARRAY
59402: PUSH
59403: LD_VAR 0 4
59407: ARRAY
59408: PPUSH
59409: LD_VAR 0 5
59413: PUSH
59414: LD_INT 2
59416: ARRAY
59417: PUSH
59418: LD_VAR 0 4
59422: ARRAY
59423: PPUSH
59424: CALL_OW 351
59428: IFFALSE 59469
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59430: LD_VAR 0 5
59434: PUSH
59435: LD_INT 1
59437: ARRAY
59438: PUSH
59439: LD_VAR 0 4
59443: ARRAY
59444: PPUSH
59445: LD_VAR 0 5
59449: PUSH
59450: LD_INT 2
59452: ARRAY
59453: PUSH
59454: LD_VAR 0 4
59458: ARRAY
59459: PPUSH
59460: LD_VAR 0 1
59464: PPUSH
59465: CALL_OW 244
// end ;
59469: GO 59391
59471: POP
59472: POP
// end ; end_of_file
59473: LD_VAR 0 3
59477: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59478: PPOPN 6
59480: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59481: LD_EXP 1
59485: PUSH
59486: LD_INT 4
59488: EQUAL
59489: IFFALSE 59525
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59491: LD_STRING setGameDifficulty(
59493: PUSH
59494: LD_OWVAR 67
59498: STR
59499: PUSH
59500: LD_STRING )
59502: STR
59503: PPUSH
59504: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59508: LD_STRING displayDifficulty(
59510: PUSH
59511: LD_OWVAR 67
59515: STR
59516: PUSH
59517: LD_STRING )
59519: STR
59520: PPUSH
59521: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59525: CALL 59554 0 0
// end ; end_of_file
59529: PPOPN 1
59531: END
// every 0 0$1 do
59532: GO 59534
59534: DISABLE
// begin enable ;
59535: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59536: LD_STRING updateTimer(
59538: PUSH
59539: LD_OWVAR 1
59543: STR
59544: PUSH
59545: LD_STRING );
59547: STR
59548: PPUSH
59549: CALL_OW 559
// end ;
59553: END
// export function SOS_MapStart ( ) ; begin
59554: LD_INT 0
59556: PPUSH
// UpdateFactoryWaypoints ( ) ;
59557: CALL 59930 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59561: CALL 60182 0 0
// ParseMultiDataToLua ( ) ;
59565: CALL 60329 0 0
// end ;
59569: LD_VAR 0 1
59573: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59574: LD_INT 0
59576: PPUSH
// end ;
59577: LD_VAR 0 12
59581: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59582: LD_INT 0
59584: PPUSH
59585: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59586: LD_VAR 0 1
59590: NOT
59591: PUSH
59592: LD_VAR 0 2
59596: PPUSH
59597: LD_VAR 0 3
59601: PPUSH
59602: CALL_OW 488
59606: NOT
59607: OR
59608: PUSH
59609: LD_VAR 0 1
59613: PPUSH
59614: CALL_OW 266
59618: PUSH
59619: LD_INT 3
59621: NONEQUAL
59622: PUSH
59623: LD_VAR 0 1
59627: PPUSH
59628: CALL_OW 247
59632: PUSH
59633: LD_INT 1
59635: EQUAL
59636: NOT
59637: AND
59638: OR
59639: IFFALSE 59643
// exit ;
59641: GO 59925
// if GetType ( factory ) = unit_human then
59643: LD_VAR 0 1
59647: PPUSH
59648: CALL_OW 247
59652: PUSH
59653: LD_INT 1
59655: EQUAL
59656: IFFALSE 59673
// factory := IsInUnit ( factory ) ;
59658: LD_ADDR_VAR 0 1
59662: PUSH
59663: LD_VAR 0 1
59667: PPUSH
59668: CALL_OW 310
59672: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59673: LD_VAR 0 1
59677: PPUSH
59678: CALL_OW 266
59682: PUSH
59683: LD_INT 3
59685: NONEQUAL
59686: IFFALSE 59690
// exit ;
59688: GO 59925
// for i := 1 to Count ( factoryWaypoints ) do
59690: LD_ADDR_VAR 0 5
59694: PUSH
59695: DOUBLE
59696: LD_INT 1
59698: DEC
59699: ST_TO_ADDR
59700: LD_EXP 53
59704: PPUSH
59705: CALL 18779 0 1
59709: PUSH
59710: FOR_TO
59711: IFFALSE 59873
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59713: LD_VAR 0 2
59717: PPUSH
59718: LD_VAR 0 3
59722: PPUSH
59723: CALL_OW 428
59727: PUSH
59728: LD_EXP 53
59732: PUSH
59733: LD_VAR 0 5
59737: ARRAY
59738: PUSH
59739: LD_INT 2
59741: ARRAY
59742: EQUAL
59743: IFFALSE 59775
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59745: LD_ADDR_EXP 53
59749: PUSH
59750: LD_EXP 53
59754: PPUSH
59755: LD_VAR 0 5
59759: PPUSH
59760: CALL_OW 3
59764: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59765: CALL 59930 0 0
// exit ;
59769: POP
59770: POP
59771: GO 59925
// end else
59773: GO 59871
// if factory = factoryWaypoints [ i ] [ 2 ] then
59775: LD_VAR 0 1
59779: PUSH
59780: LD_EXP 53
59784: PUSH
59785: LD_VAR 0 5
59789: ARRAY
59790: PUSH
59791: LD_INT 2
59793: ARRAY
59794: EQUAL
59795: IFFALSE 59871
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59797: LD_ADDR_EXP 53
59801: PUSH
59802: LD_EXP 53
59806: PPUSH
59807: LD_VAR 0 5
59811: PPUSH
59812: CALL_OW 3
59816: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59817: LD_ADDR_EXP 53
59821: PUSH
59822: LD_EXP 53
59826: PPUSH
59827: LD_VAR 0 1
59831: PPUSH
59832: CALL_OW 255
59836: PUSH
59837: LD_VAR 0 1
59841: PUSH
59842: LD_VAR 0 2
59846: PUSH
59847: LD_VAR 0 3
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: PPUSH
59858: CALL 54388 0 2
59862: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59863: CALL 59930 0 0
// exit ;
59867: POP
59868: POP
59869: GO 59925
// end ; end ;
59871: GO 59710
59873: POP
59874: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59875: LD_ADDR_EXP 53
59879: PUSH
59880: LD_EXP 53
59884: PPUSH
59885: LD_VAR 0 1
59889: PPUSH
59890: CALL_OW 255
59894: PUSH
59895: LD_VAR 0 1
59899: PUSH
59900: LD_VAR 0 2
59904: PUSH
59905: LD_VAR 0 3
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: PPUSH
59916: CALL 54388 0 2
59920: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59921: CALL 59930 0 0
// end ;
59925: LD_VAR 0 4
59929: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59930: LD_INT 0
59932: PPUSH
59933: PPUSH
59934: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59935: LD_STRING resetFactoryWaypoint();
59937: PPUSH
59938: CALL_OW 559
// if factoryWaypoints then
59942: LD_EXP 53
59946: IFFALSE 60067
// begin list := factoryWaypoints ;
59948: LD_ADDR_VAR 0 3
59952: PUSH
59953: LD_EXP 53
59957: ST_TO_ADDR
// for i := 1 to list do
59958: LD_ADDR_VAR 0 2
59962: PUSH
59963: DOUBLE
59964: LD_INT 1
59966: DEC
59967: ST_TO_ADDR
59968: LD_VAR 0 3
59972: PUSH
59973: FOR_TO
59974: IFFALSE 60065
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59976: LD_STRING setFactoryWaypointXY(
59978: PUSH
59979: LD_VAR 0 3
59983: PUSH
59984: LD_VAR 0 2
59988: ARRAY
59989: PUSH
59990: LD_INT 1
59992: ARRAY
59993: STR
59994: PUSH
59995: LD_STRING ,
59997: STR
59998: PUSH
59999: LD_VAR 0 3
60003: PUSH
60004: LD_VAR 0 2
60008: ARRAY
60009: PUSH
60010: LD_INT 2
60012: ARRAY
60013: STR
60014: PUSH
60015: LD_STRING ,
60017: STR
60018: PUSH
60019: LD_VAR 0 3
60023: PUSH
60024: LD_VAR 0 2
60028: ARRAY
60029: PUSH
60030: LD_INT 3
60032: ARRAY
60033: STR
60034: PUSH
60035: LD_STRING ,
60037: STR
60038: PUSH
60039: LD_VAR 0 3
60043: PUSH
60044: LD_VAR 0 2
60048: ARRAY
60049: PUSH
60050: LD_INT 4
60052: ARRAY
60053: STR
60054: PUSH
60055: LD_STRING )
60057: STR
60058: PPUSH
60059: CALL_OW 559
60063: GO 59973
60065: POP
60066: POP
// end ; end ;
60067: LD_VAR 0 1
60071: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60072: LD_INT 0
60074: PPUSH
// if HexInfo ( x , y ) = warehouse then
60075: LD_VAR 0 2
60079: PPUSH
60080: LD_VAR 0 3
60084: PPUSH
60085: CALL_OW 428
60089: PUSH
60090: LD_VAR 0 1
60094: EQUAL
60095: IFFALSE 60122
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60097: LD_ADDR_EXP 55
60101: PUSH
60102: LD_EXP 55
60106: PPUSH
60107: LD_VAR 0 1
60111: PPUSH
60112: LD_INT 0
60114: PPUSH
60115: CALL_OW 1
60119: ST_TO_ADDR
60120: GO 60173
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60122: LD_ADDR_EXP 55
60126: PUSH
60127: LD_EXP 55
60131: PPUSH
60132: LD_VAR 0 1
60136: PPUSH
60137: LD_VAR 0 1
60141: PPUSH
60142: CALL_OW 255
60146: PUSH
60147: LD_VAR 0 1
60151: PUSH
60152: LD_VAR 0 2
60156: PUSH
60157: LD_VAR 0 3
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: PPUSH
60168: CALL_OW 1
60172: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60173: CALL 60182 0 0
// end ;
60177: LD_VAR 0 4
60181: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60182: LD_INT 0
60184: PPUSH
60185: PPUSH
60186: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60187: LD_STRING resetWarehouseGatheringPoints();
60189: PPUSH
60190: CALL_OW 559
// if warehouseGatheringPoints then
60194: LD_EXP 55
60198: IFFALSE 60324
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60200: LD_ADDR_VAR 0 3
60204: PUSH
60205: LD_EXP 55
60209: PPUSH
60210: CALL 58156 0 1
60214: ST_TO_ADDR
// for i := 1 to list do
60215: LD_ADDR_VAR 0 2
60219: PUSH
60220: DOUBLE
60221: LD_INT 1
60223: DEC
60224: ST_TO_ADDR
60225: LD_VAR 0 3
60229: PUSH
60230: FOR_TO
60231: IFFALSE 60322
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60233: LD_STRING setWarehouseGatheringPointXY(
60235: PUSH
60236: LD_VAR 0 3
60240: PUSH
60241: LD_VAR 0 2
60245: ARRAY
60246: PUSH
60247: LD_INT 1
60249: ARRAY
60250: STR
60251: PUSH
60252: LD_STRING ,
60254: STR
60255: PUSH
60256: LD_VAR 0 3
60260: PUSH
60261: LD_VAR 0 2
60265: ARRAY
60266: PUSH
60267: LD_INT 2
60269: ARRAY
60270: STR
60271: PUSH
60272: LD_STRING ,
60274: STR
60275: PUSH
60276: LD_VAR 0 3
60280: PUSH
60281: LD_VAR 0 2
60285: ARRAY
60286: PUSH
60287: LD_INT 3
60289: ARRAY
60290: STR
60291: PUSH
60292: LD_STRING ,
60294: STR
60295: PUSH
60296: LD_VAR 0 3
60300: PUSH
60301: LD_VAR 0 2
60305: ARRAY
60306: PUSH
60307: LD_INT 4
60309: ARRAY
60310: STR
60311: PUSH
60312: LD_STRING )
60314: STR
60315: PPUSH
60316: CALL_OW 559
60320: GO 60230
60322: POP
60323: POP
// end ; end ;
60324: LD_VAR 0 1
60328: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
60329: LD_INT 0
60331: PPUSH
60332: PPUSH
// if not mpSidePositions then
60333: LD_EXP 5
60337: NOT
60338: IFFALSE 60342
// exit ;
60340: GO 60413
// result :=  ;
60342: LD_ADDR_VAR 0 1
60346: PUSH
60347: LD_STRING 
60349: ST_TO_ADDR
// for i := 1 to 8 do
60350: LD_ADDR_VAR 0 2
60354: PUSH
60355: DOUBLE
60356: LD_INT 1
60358: DEC
60359: ST_TO_ADDR
60360: LD_INT 8
60362: PUSH
60363: FOR_TO
60364: IFFALSE 60394
// begin result := result & mpSidePositions [ i ] & ; ;
60366: LD_ADDR_VAR 0 1
60370: PUSH
60371: LD_VAR 0 1
60375: PUSH
60376: LD_EXP 5
60380: PUSH
60381: LD_VAR 0 2
60385: ARRAY
60386: STR
60387: PUSH
60388: LD_STRING ;
60390: STR
60391: ST_TO_ADDR
// end ;
60392: GO 60363
60394: POP
60395: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
60396: LD_STRING setMultiplayerRealPosition("
60398: PUSH
60399: LD_VAR 0 1
60403: STR
60404: PUSH
60405: LD_STRING ");
60407: STR
60408: PPUSH
60409: CALL_OW 559
// end ;
60413: LD_VAR 0 1
60417: RET
