// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2926 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3241 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 10 10$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 21000
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 51
 852: PUSH
 853: LD_INT 52
 855: PUSH
 856: LD_INT 53
 858: PUSH
 859: LD_INT 54
 861: PUSH
 862: LD_INT 55
 864: PUSH
 865: LD_INT 56
 867: PUSH
 868: LD_INT 57
 870: PUSH
 871: LD_INT 58
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 70
 891: PUSH
 892: LD_INT 71
 894: PUSH
 895: LD_INT 72
 897: PUSH
 898: LD_INT 73
 900: PUSH
 901: LD_INT 68
 903: PUSH
 904: LD_INT 69
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 31
1061: PUSH
1062: LD_INT 49
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 32
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 34
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 31
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 32
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 34
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 33
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 30
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 60
1364: PUSH
1365: LD_INT 61
1367: PUSH
1368: LD_INT 62
1370: PUSH
1371: LD_INT 63
1373: PUSH
1374: LD_INT 64
1376: PUSH
1377: LD_INT 65
1379: PUSH
1380: LD_INT 66
1382: PUSH
1383: LD_INT 67
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 1
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 58590 0 2
1411: PUSH
1412: LD_INT 2
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 58590 0 2
1422: PUSH
1423: LD_INT 3
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 58590 0 2
1433: PUSH
1434: LD_INT 4
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 58590 0 2
1444: PUSH
1445: LD_INT 5
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL 58590 0 2
1455: PUSH
1456: LD_INT 6
1458: PPUSH
1459: LD_INT 5
1461: PPUSH
1462: CALL 58590 0 2
1466: PUSH
1467: LD_INT 7
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL 58590 0 2
1477: PUSH
1478: LD_INT 8
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL 58590 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 18442 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 9
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 58423 0 2
1667: PUSH
1668: LD_INT 10
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 58423 0 2
1680: PUSH
1681: LD_INT 11
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 58423 0 2
1693: PUSH
1694: LD_INT 12
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 58423 0 2
1706: PUSH
1707: LD_INT 13
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 58423 0 2
1719: PUSH
1720: LD_INT 14
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 58423 0 2
1732: PUSH
1733: LD_INT 15
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 58423 0 2
1745: PUSH
1746: LD_INT 16
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 58423 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 17
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 58423 0 2
1810: PUSH
1811: LD_INT 18
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 58423 0 2
1823: PUSH
1824: LD_INT 19
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 58423 0 2
1836: PUSH
1837: LD_INT 20
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 58423 0 2
1849: PUSH
1850: LD_INT 21
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 58423 0 2
1862: PUSH
1863: LD_INT 22
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 58423 0 2
1875: PUSH
1876: LD_INT 23
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 58423 0 2
1888: PUSH
1889: LD_INT 24
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 58423 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 25
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 58590 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 26
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 58590 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 41
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 58590 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 27
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: CALL 58590 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 28
2017: PPUSH
2018: LD_INT 4
2020: PPUSH
2021: CALL 58590 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 42
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL 58590 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 29
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 58590 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 30
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL 58590 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 43
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 58590 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 31
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 58590 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 32
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL 58590 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 44
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 58590 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 33
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL 58590 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 34
2167: PPUSH
2168: LD_INT 2
2170: PPUSH
2171: CALL 58590 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 45
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: CALL 58590 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 35
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL 58590 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 36
2217: PPUSH
2218: LD_INT 4
2220: PPUSH
2221: CALL 58590 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 46
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 58590 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 37
2252: PPUSH
2253: LD_INT 3
2255: PPUSH
2256: CALL 58590 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 38
2267: PPUSH
2268: LD_INT 4
2270: PPUSH
2271: CALL 58590 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 47
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: CALL 58590 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 39
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL 58590 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 40
2317: PPUSH
2318: LD_INT 3
2320: PPUSH
2321: CALL 58590 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 48
2332: PPUSH
2333: LD_INT 4
2335: PPUSH
2336: CALL 58590 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2839
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 70
2569: PUSH
2570: LD_INT 71
2572: PUSH
2573: LD_INT 72
2575: PUSH
2576: LD_INT 73
2578: PUSH
2579: LD_INT 68
2581: PUSH
2582: LD_INT 69
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 51
2600: PUSH
2601: LD_INT 52
2603: PUSH
2604: LD_INT 53
2606: PUSH
2607: LD_INT 54
2609: PUSH
2610: LD_INT 55
2612: PUSH
2613: LD_INT 56
2615: PUSH
2616: LD_INT 57
2618: PUSH
2619: LD_INT 58
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 55412 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// for i in areas do
2745: LD_ADDR_VAR 0 1
2749: PUSH
2750: LD_VAR 0 4
2754: PUSH
2755: FOR_IN
2756: IFFALSE 2795
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2758: LD_VAR 0 1
2762: PPUSH
2763: LD_INT 1
2765: PPUSH
2766: CALL_OW 287
2770: PUSH
2771: LD_INT 20
2773: LESS
2774: IFFALSE 2793
// begin CreateCratesArea ( x , i , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_VAR 0 1
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 55
// end ; end ;
2793: GO 2755
2795: POP
2796: POP
// time := time + delayTime ;
2797: LD_ADDR_VAR 0 5
2801: PUSH
2802: LD_VAR 0 5
2806: PUSH
2807: LD_VAR 0 7
2811: PLUS
2812: ST_TO_ADDR
// if time > maxTime then
2813: LD_VAR 0 5
2817: PUSH
2818: LD_VAR 0 8
2822: GREATER
2823: IFFALSE 2835
// time := normalTime ;
2825: LD_ADDR_VAR 0 5
2829: PUSH
2830: LD_VAR 0 6
2834: ST_TO_ADDR
// until false ;
2835: LD_INT 0
2837: IFFALSE 2703
// end ; end_of_file
2839: PPOPN 8
2841: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: CALL 11056 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2851: LD_VAR 0 1
2855: PPUSH
2856: CALL 7763 0 1
// end ;
2860: PPOPN 1
2862: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL 11073 0 1
// end ;
2872: PPOPN 1
2874: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2875: LD_VAR 0 1
2879: PPUSH
2880: CALL 8366 0 1
2884: PPOPN 1
2886: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: LD_VAR 0 2
2896: PPUSH
2897: CALL 11114 0 2
2901: PPOPN 2
2903: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2904: LD_VAR 0 1
2908: PPUSH
2909: LD_VAR 0 2
2913: PPUSH
2914: LD_VAR 0 3
2918: PPUSH
2919: CALL 8419 0 3
2923: PPOPN 3
2925: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
// disable ( mpActive ) ;
2930: LD_INT 100
2932: DISABLE_MARKED
// disable ( mpWin ) ;
2933: LD_INT 101
2935: DISABLE_MARKED
// disable ( mpLose ) ;
2936: LD_INT 102
2938: DISABLE_MARKED
// mpGameType := 0 ;
2939: LD_ADDR_EXP 1
2943: PUSH
2944: LD_INT 0
2946: ST_TO_ADDR
// mpGameSettings := [ ] ;
2947: LD_ADDR_EXP 4
2951: PUSH
2952: EMPTY
2953: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2954: LD_ADDR_EXP 2
2958: PUSH
2959: EMPTY
2960: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2961: LD_ADDR_EXP 3
2965: PUSH
2966: EMPTY
2967: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2968: LD_ADDR_EXP 27
2972: PUSH
2973: LD_INT 2
2975: PUSH
2976: LD_INT 2
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2983: LD_ADDR_EXP 10
2987: PUSH
2988: EMPTY
2989: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2990: LD_ADDR_EXP 11
2994: PUSH
2995: EMPTY
2996: ST_TO_ADDR
// mpDepots := [ ] ;
2997: LD_ADDR_EXP 12
3001: PUSH
3002: EMPTY
3003: ST_TO_ADDR
// mpBuildings := [ ] ;
3004: LD_ADDR_EXP 15
3008: PUSH
3009: EMPTY
3010: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3011: LD_ADDR_EXP 16
3015: PUSH
3016: EMPTY
3017: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3018: LD_ADDR_EXP 17
3022: PUSH
3023: EMPTY
3024: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3025: LD_ADDR_EXP 18
3029: PUSH
3030: EMPTY
3031: ST_TO_ADDR
// mpStartingResources := [ ] ;
3032: LD_ADDR_EXP 13
3036: PUSH
3037: EMPTY
3038: ST_TO_ADDR
// mpStartPos := [ ] ;
3039: LD_ADDR_EXP 19
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3046: LD_ADDR_EXP 20
3050: PUSH
3051: LD_INT 1
3053: NEG
3054: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3055: LD_ADDR_EXP 21
3059: PUSH
3060: EMPTY
3061: ST_TO_ADDR
// mpApemans := [ ] ;
3062: LD_ADDR_EXP 28
3066: PUSH
3067: EMPTY
3068: ST_TO_ADDR
// mpApemansArea := [ ] ;
3069: LD_ADDR_EXP 29
3073: PUSH
3074: EMPTY
3075: ST_TO_ADDR
// mpRespawn := [ ] ;
3076: LD_ADDR_EXP 30
3080: PUSH
3081: EMPTY
3082: ST_TO_ADDR
// mpKingArea := 0 ;
3083: LD_ADDR_EXP 31
3087: PUSH
3088: LD_INT 0
3090: ST_TO_ADDR
// mpPoints := [ ] ;
3091: LD_ADDR_EXP 32
3095: PUSH
3096: EMPTY
3097: ST_TO_ADDR
// mpVehicles := 0 ;
3098: LD_ADDR_EXP 33
3102: PUSH
3103: LD_INT 0
3105: ST_TO_ADDR
// mpShipments := 0 ;
3106: LD_ADDR_EXP 25
3110: PUSH
3111: LD_INT 0
3113: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3114: LD_ADDR_EXP 37
3118: PUSH
3119: EMPTY
3120: PUSH
3121: EMPTY
3122: PUSH
3123: EMPTY
3124: PUSH
3125: EMPTY
3126: PUSH
3127: EMPTY
3128: PUSH
3129: EMPTY
3130: PUSH
3131: EMPTY
3132: PUSH
3133: EMPTY
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: ST_TO_ADDR
// mpEmissions := 0 ;
3145: LD_ADDR_EXP 34
3149: PUSH
3150: LD_INT 0
3152: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3153: LD_ADDR_EXP 23
3157: PUSH
3158: LD_INT 3
3160: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3161: LD_ADDR_EXP 22
3165: PUSH
3166: LD_INT 15
3168: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3169: LD_ADDR_EXP 35
3173: PUSH
3174: LD_INT 0
3176: ST_TO_ADDR
// mpGameActive := false ;
3177: LD_ADDR_EXP 36
3181: PUSH
3182: LD_INT 0
3184: ST_TO_ADDR
// mpBlockRespThread := false ;
3185: LD_ADDR_EXP 38
3189: PUSH
3190: LD_INT 0
3192: ST_TO_ADDR
// for i := 1 to 32 do
3193: LD_ADDR_VAR 0 2
3197: PUSH
3198: DOUBLE
3199: LD_INT 1
3201: DEC
3202: ST_TO_ADDR
3203: LD_INT 32
3205: PUSH
3206: FOR_TO
3207: IFFALSE 3234
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3209: LD_ADDR_EXP 4
3213: PUSH
3214: LD_EXP 4
3218: PPUSH
3219: LD_VAR 0 2
3223: PPUSH
3224: LD_INT 0
3226: PPUSH
3227: CALL_OW 1
3231: ST_TO_ADDR
3232: GO 3206
3234: POP
3235: POP
// end ;
3236: LD_VAR 0 1
3240: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3241: LD_INT 0
3243: PPUSH
3244: PPUSH
3245: PPUSH
3246: PPUSH
3247: PPUSH
3248: PPUSH
3249: PPUSH
3250: PPUSH
3251: PPUSH
3252: PPUSH
3253: PPUSH
3254: PPUSH
3255: PPUSH
3256: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3257: LD_ADDR_VAR 0 14
3261: PUSH
3262: LD_INT 1
3264: PUSH
3265: LD_INT 2
3267: PUSH
3268: LD_INT 3
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: LIST
3275: ST_TO_ADDR
// for i in gameTypes do
3276: LD_ADDR_VAR 0 2
3280: PUSH
3281: LD_VAR 0 14
3285: PUSH
3286: FOR_IN
3287: IFFALSE 3296
// disable ( i ) ;
3289: LD_VAR 0 2
3293: DISABLE_MARKED
3294: GO 3286
3296: POP
3297: POP
// if Multiplayer then
3298: LD_OWVAR 4
3302: IFFALSE 3486
// begin mpGameType := mp_game_type ;
3304: LD_ADDR_EXP 1
3308: PUSH
3309: LD_OWVAR 6
3313: ST_TO_ADDR
// your_side := mp_player_side ;
3314: LD_ADDR_OWVAR 2
3318: PUSH
3319: LD_OWVAR 7
3323: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3324: LD_ADDR_EXP 5
3328: PUSH
3329: LD_OWVAR 17
3333: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3334: LD_ADDR_EXP 6
3338: PUSH
3339: LD_OWVAR 15
3343: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3344: LD_ADDR_EXP 7
3348: PUSH
3349: LD_OWVAR 16
3353: ST_TO_ADDR
// mpTeams := mp_teams ;
3354: LD_ADDR_EXP 8
3358: PUSH
3359: LD_OWVAR 12
3363: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3364: LD_ADDR_VAR 0 2
3368: PUSH
3369: DOUBLE
3370: LD_INT 1
3372: DEC
3373: ST_TO_ADDR
3374: LD_EXP 2
3378: PPUSH
3379: CALL 18442 0 1
3383: PUSH
3384: FOR_TO
3385: IFFALSE 3461
// begin setting := mpGameSettingsKeys [ i ] ;
3387: LD_ADDR_VAR 0 12
3391: PUSH
3392: LD_EXP 2
3396: PUSH
3397: LD_VAR 0 2
3401: ARRAY
3402: ST_TO_ADDR
// if setting then
3403: LD_VAR 0 12
3407: IFFALSE 3459
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3409: LD_ADDR_EXP 4
3413: PUSH
3414: LD_EXP 4
3418: PPUSH
3419: LD_VAR 0 2
3423: PPUSH
3424: LD_EXP 3
3428: PUSH
3429: LD_VAR 0 2
3433: ARRAY
3434: PUSH
3435: LD_VAR 0 2
3439: PUSH
3440: LD_INT 1
3442: MINUS
3443: PPUSH
3444: CALL_OW 426
3448: PUSH
3449: LD_INT 1
3451: PLUS
3452: ARRAY
3453: PPUSH
3454: CALL_OW 1
3458: ST_TO_ADDR
// end ;
3459: GO 3384
3461: POP
3462: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3463: LD_ADDR_EXP 9
3467: PUSH
3468: LD_EXP 6
3472: PUSH
3473: LD_INT 0
3475: PUSH
3476: EMPTY
3477: LIST
3478: DIFF
3479: PUSH
3480: LD_INT 1
3482: GREATER
3483: ST_TO_ADDR
// end else
3484: GO 3486
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3486: LD_EXP 1
3490: PPUSH
3491: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
3495: LD_EXP 16
3499: PPUSH
3500: CALL 18442 0 1
3504: IFFALSE 3535
// begin for i in mpMarkedAreas do
3506: LD_ADDR_VAR 0 2
3510: PUSH
3511: LD_EXP 16
3515: PUSH
3516: FOR_IN
3517: IFFALSE 3533
// SetAreaMapShow ( i , 0 ) ;
3519: LD_VAR 0 2
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: CALL_OW 424
3531: GO 3516
3533: POP
3534: POP
// end ; for i := 1 to 8 do
3535: LD_ADDR_VAR 0 2
3539: PUSH
3540: DOUBLE
3541: LD_INT 1
3543: DEC
3544: ST_TO_ADDR
3545: LD_INT 8
3547: PUSH
3548: FOR_TO
3549: IFFALSE 4765
// begin if not mpSidePositions [ i ] then
3551: LD_EXP 5
3555: PUSH
3556: LD_VAR 0 2
3560: ARRAY
3561: NOT
3562: IFFALSE 3566
// continue ;
3564: GO 3548
// side := i ;
3566: LD_ADDR_VAR 0 7
3570: PUSH
3571: LD_VAR 0 2
3575: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3576: LD_ADDR_VAR 0 9
3580: PUSH
3581: LD_EXP 7
3585: PUSH
3586: LD_VAR 0 2
3590: ARRAY
3591: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3592: LD_ADDR_VAR 0 8
3596: PUSH
3597: LD_EXP 5
3601: PUSH
3602: LD_VAR 0 2
3606: ARRAY
3607: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3608: LD_EXP 10
3612: PPUSH
3613: CALL 18442 0 1
3617: IFFALSE 3694
// begin for j in mpOilDeposits [ pos ] do
3619: LD_ADDR_VAR 0 3
3623: PUSH
3624: LD_EXP 10
3628: PUSH
3629: LD_VAR 0 8
3633: ARRAY
3634: PUSH
3635: FOR_IN
3636: IFFALSE 3692
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3638: LD_VAR 0 3
3642: PUSH
3643: LD_INT 1
3645: ARRAY
3646: PPUSH
3647: LD_VAR 0 3
3651: PUSH
3652: LD_INT 2
3654: ARRAY
3655: PPUSH
3656: LD_INT 2
3658: PPUSH
3659: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3663: LD_VAR 0 3
3667: PUSH
3668: LD_INT 1
3670: ARRAY
3671: PPUSH
3672: LD_VAR 0 3
3676: PUSH
3677: LD_INT 2
3679: ARRAY
3680: PPUSH
3681: LD_VAR 0 7
3685: PPUSH
3686: CALL_OW 441
// end ;
3690: GO 3635
3692: POP
3693: POP
// end ; if Count ( mpSibDeposits ) then
3694: LD_EXP 11
3698: PPUSH
3699: CALL 18442 0 1
3703: IFFALSE 3780
// begin for j in mpSibDeposits [ pos ] do
3705: LD_ADDR_VAR 0 3
3709: PUSH
3710: LD_EXP 11
3714: PUSH
3715: LD_VAR 0 8
3719: ARRAY
3720: PUSH
3721: FOR_IN
3722: IFFALSE 3778
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3724: LD_VAR 0 3
3728: PUSH
3729: LD_INT 1
3731: ARRAY
3732: PPUSH
3733: LD_VAR 0 3
3737: PUSH
3738: LD_INT 2
3740: ARRAY
3741: PPUSH
3742: LD_INT 3
3744: PPUSH
3745: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3749: LD_VAR 0 3
3753: PUSH
3754: LD_INT 1
3756: ARRAY
3757: PPUSH
3758: LD_VAR 0 3
3762: PUSH
3763: LD_INT 2
3765: ARRAY
3766: PPUSH
3767: LD_VAR 0 7
3771: PPUSH
3772: CALL_OW 441
// end ;
3776: GO 3721
3778: POP
3779: POP
// end ; InitBc ;
3780: CALL_OW 21
// InitUc ;
3784: CALL_OW 18
// uc_side := side ;
3788: LD_ADDR_OWVAR 20
3792: PUSH
3793: LD_VAR 0 7
3797: ST_TO_ADDR
// uc_nation := nation ;
3798: LD_ADDR_OWVAR 21
3802: PUSH
3803: LD_VAR 0 9
3807: ST_TO_ADDR
// if Count ( mpDepots ) then
3808: LD_EXP 12
3812: PPUSH
3813: CALL 18442 0 1
3817: IFFALSE 3987
// begin bc_level := 0 ;
3819: LD_ADDR_OWVAR 43
3823: PUSH
3824: LD_INT 0
3826: ST_TO_ADDR
// bc_type := b_depot ;
3827: LD_ADDR_OWVAR 42
3831: PUSH
3832: LD_INT 0
3834: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3835: LD_ADDR_VAR 0 4
3839: PUSH
3840: LD_EXP 12
3844: PUSH
3845: LD_VAR 0 8
3849: ARRAY
3850: PUSH
3851: LD_INT 1
3853: ARRAY
3854: PPUSH
3855: LD_EXP 12
3859: PUSH
3860: LD_VAR 0 8
3864: ARRAY
3865: PUSH
3866: LD_INT 2
3868: ARRAY
3869: PPUSH
3870: LD_EXP 12
3874: PUSH
3875: LD_VAR 0 8
3879: ARRAY
3880: PUSH
3881: LD_INT 3
3883: ARRAY
3884: PPUSH
3885: CALL_OW 47
3889: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3890: LD_VAR 0 4
3894: PPUSH
3895: LD_STRING @
3897: PUSH
3898: LD_VAR 0 7
3902: STR
3903: PPUSH
3904: CALL_OW 500
// SetTag ( b , side ) ;
3908: LD_VAR 0 4
3912: PPUSH
3913: LD_VAR 0 7
3917: PPUSH
3918: CALL_OW 109
// if Count ( mpStartingResources ) then
3922: LD_EXP 13
3926: PPUSH
3927: CALL 18442 0 1
3931: IFFALSE 3985
// begin for j := 1 to mpStartingResources do
3933: LD_ADDR_VAR 0 3
3937: PUSH
3938: DOUBLE
3939: LD_INT 1
3941: DEC
3942: ST_TO_ADDR
3943: LD_EXP 13
3947: PUSH
3948: FOR_TO
3949: IFFALSE 3983
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3951: LD_VAR 0 4
3955: PPUSH
3956: CALL_OW 274
3960: PPUSH
3961: LD_VAR 0 3
3965: PPUSH
3966: LD_EXP 13
3970: PUSH
3971: LD_VAR 0 3
3975: ARRAY
3976: PPUSH
3977: CALL_OW 277
3981: GO 3948
3983: POP
3984: POP
// end ; end else
3985: GO 4134
// if Count ( mpStartingResources ) then
3987: LD_EXP 13
3991: PPUSH
3992: CALL 18442 0 1
3996: IFFALSE 4134
// begin for j := 1 to mpStartingResources do
3998: LD_ADDR_VAR 0 3
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_EXP 13
4012: PUSH
4013: FOR_TO
4014: IFFALSE 4132
// begin resources := mpStartingResources [ j ] ;
4016: LD_ADDR_VAR 0 13
4020: PUSH
4021: LD_EXP 13
4025: PUSH
4026: LD_VAR 0 3
4030: ARRAY
4031: ST_TO_ADDR
// repeat if resources >= 50 then
4032: LD_VAR 0 13
4036: PUSH
4037: LD_INT 50
4039: GREATEREQUAL
4040: IFFALSE 4086
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
4042: LD_VAR 0 3
4046: PPUSH
4047: LD_INT 5
4049: PPUSH
4050: LD_VAR 0 5
4054: PPUSH
4055: LD_VAR 0 6
4059: PPUSH
4060: LD_INT 4
4062: PPUSH
4063: LD_INT 0
4065: PPUSH
4066: CALL_OW 60
// resources := resources - 50 ;
4070: LD_ADDR_VAR 0 13
4074: PUSH
4075: LD_VAR 0 13
4079: PUSH
4080: LD_INT 50
4082: MINUS
4083: ST_TO_ADDR
// end else
4084: GO 4120
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
4086: LD_VAR 0 3
4090: PPUSH
4091: LD_VAR 0 13
4095: PUSH
4096: LD_INT 10
4098: DIV
4099: PPUSH
4100: LD_VAR 0 5
4104: PPUSH
4105: LD_VAR 0 6
4109: PPUSH
4110: LD_INT 4
4112: PPUSH
4113: LD_INT 0
4115: PPUSH
4116: CALL_OW 60
// until resources <= 0 ;
4120: LD_VAR 0 13
4124: PUSH
4125: LD_INT 0
4127: LESSEQUAL
4128: IFFALSE 4032
// end ;
4130: GO 4013
4132: POP
4133: POP
// end ; if Count ( mpBuildings ) then
4134: LD_EXP 15
4138: PPUSH
4139: CALL 18442 0 1
4143: IFFALSE 4221
// begin for j in mpBuildings [ pos ] do
4145: LD_ADDR_VAR 0 3
4149: PUSH
4150: LD_EXP 15
4154: PUSH
4155: LD_VAR 0 8
4159: ARRAY
4160: PUSH
4161: FOR_IN
4162: IFFALSE 4219
// begin bc_level := 0 ;
4164: LD_ADDR_OWVAR 43
4168: PUSH
4169: LD_INT 0
4171: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4172: LD_ADDR_OWVAR 42
4176: PUSH
4177: LD_VAR 0 3
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4186: LD_VAR 0 3
4190: PUSH
4191: LD_INT 2
4193: ARRAY
4194: PPUSH
4195: LD_VAR 0 3
4199: PUSH
4200: LD_INT 3
4202: ARRAY
4203: PPUSH
4204: LD_VAR 0 3
4208: PUSH
4209: LD_INT 4
4211: ARRAY
4212: PPUSH
4213: CALL_OW 47
// end ;
4217: GO 4161
4219: POP
4220: POP
// end ; if mpBattleFlag > - 1 then
4221: LD_EXP 20
4225: PUSH
4226: LD_INT 1
4228: NEG
4229: GREATER
4230: IFFALSE 4389
// begin x := mpStartPos [ pos ] [ 1 ] ;
4232: LD_ADDR_VAR 0 5
4236: PUSH
4237: LD_EXP 19
4241: PUSH
4242: LD_VAR 0 8
4246: ARRAY
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4252: LD_ADDR_VAR 0 6
4256: PUSH
4257: LD_EXP 19
4261: PUSH
4262: LD_VAR 0 8
4266: ARRAY
4267: PUSH
4268: LD_INT 2
4270: ARRAY
4271: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4272: LD_VAR 0 5
4276: PPUSH
4277: LD_VAR 0 6
4281: PPUSH
4282: LD_INT 12
4284: PPUSH
4285: LD_INT 2
4287: PPUSH
4288: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4292: LD_ADDR_EXP 21
4296: PUSH
4297: LD_EXP 21
4301: PPUSH
4302: LD_VAR 0 7
4306: PPUSH
4307: LD_VAR 0 7
4311: PPUSH
4312: LD_VAR 0 5
4316: PPUSH
4317: LD_VAR 0 6
4321: PPUSH
4322: LD_INT 1
4324: PUSH
4325: LD_INT 100
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: LD_INT 2
4334: PUSH
4335: LD_INT 70
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PUSH
4342: LD_INT 3
4344: PUSH
4345: LD_INT 40
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: PUSH
4352: LD_INT 10
4354: PUSH
4355: LD_INT 25
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: PUSH
4362: LD_INT 20
4364: PUSH
4365: LD_INT 100
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 418
4383: PPUSH
4384: CALL_OW 1
4388: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4389: LD_EXP 24
4393: PUSH
4394: LD_INT 20
4396: PPUSH
4397: LD_VAR 0 7
4401: PPUSH
4402: CALL_OW 321
4406: PUSH
4407: LD_INT 1
4409: EQUAL
4410: AND
4411: IFFALSE 4428
// SetTech ( tech_SibDet , side , state_researched ) ;
4413: LD_INT 20
4415: PPUSH
4416: LD_VAR 0 7
4420: PPUSH
4421: LD_INT 2
4423: PPUSH
4424: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4428: LD_INT 24
4430: PPUSH
4431: LD_VAR 0 7
4435: PPUSH
4436: LD_INT 0
4438: PPUSH
4439: CALL_OW 322
// if mpSibBomb = 1 then
4443: LD_EXP 26
4447: PUSH
4448: LD_INT 1
4450: EQUAL
4451: IFFALSE 4470
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4453: LD_INT 25
4455: PPUSH
4456: LD_VAR 0 7
4460: PPUSH
4461: LD_INT 1
4463: PPUSH
4464: CALL_OW 322
// end else
4468: GO 4485
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4470: LD_INT 25
4472: PPUSH
4473: LD_VAR 0 7
4477: PPUSH
4478: LD_INT 0
4480: PPUSH
4481: CALL_OW 322
// end ; if mpVehicles then
4485: LD_EXP 33
4489: IFFALSE 4588
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_VAR 0 7
4500: PPUSH
4501: LD_VAR 0 9
4505: PPUSH
4506: LD_EXP 33
4510: PPUSH
4511: CALL 5675 0 3
4515: PUSH
4516: FOR_IN
4517: IFFALSE 4586
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4519: LD_VAR 0 3
4523: PPUSH
4524: LD_INT 0
4526: PPUSH
4527: LD_INT 5
4529: PPUSH
4530: CALL_OW 12
4534: PPUSH
4535: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_EXP 19
4548: PUSH
4549: LD_VAR 0 8
4553: ARRAY
4554: PUSH
4555: LD_INT 1
4557: ARRAY
4558: PPUSH
4559: LD_EXP 19
4563: PUSH
4564: LD_VAR 0 8
4568: ARRAY
4569: PUSH
4570: LD_INT 2
4572: ARRAY
4573: PPUSH
4574: LD_INT 12
4576: PPUSH
4577: LD_INT 0
4579: PPUSH
4580: CALL_OW 50
// end ;
4584: GO 4516
4586: POP
4587: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4588: LD_ADDR_VAR 0 11
4592: PUSH
4593: LD_VAR 0 7
4597: PPUSH
4598: LD_VAR 0 9
4602: PPUSH
4603: LD_EXP 22
4607: PPUSH
4608: LD_EXP 23
4612: PPUSH
4613: CALL 5177 0 4
4617: ST_TO_ADDR
// for j in team do
4618: LD_ADDR_VAR 0 3
4622: PUSH
4623: LD_VAR 0 11
4627: PUSH
4628: FOR_IN
4629: IFFALSE 4678
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4631: LD_VAR 0 3
4635: PPUSH
4636: LD_EXP 19
4640: PUSH
4641: LD_VAR 0 8
4645: ARRAY
4646: PUSH
4647: LD_INT 1
4649: ARRAY
4650: PPUSH
4651: LD_EXP 19
4655: PUSH
4656: LD_VAR 0 8
4660: ARRAY
4661: PUSH
4662: LD_INT 2
4664: ARRAY
4665: PPUSH
4666: LD_INT 12
4668: PPUSH
4669: LD_INT 0
4671: PPUSH
4672: CALL_OW 50
4676: GO 4628
4678: POP
4679: POP
// if mpApemans then
4680: LD_EXP 28
4684: IFFALSE 4763
// begin for j := 1 to mpApemans do
4686: LD_ADDR_VAR 0 3
4690: PUSH
4691: DOUBLE
4692: LD_INT 1
4694: DEC
4695: ST_TO_ADDR
4696: LD_EXP 28
4700: PUSH
4701: FOR_TO
4702: IFFALSE 4761
// begin PrepareApeman ( - 5 ) ;
4704: LD_INT 5
4706: NEG
4707: PPUSH
4708: CALL 50299 0 1
// ape := CreateHuman ;
4712: LD_ADDR_VAR 0 10
4716: PUSH
4717: CALL_OW 44
4721: ST_TO_ADDR
// SetTag ( ape , side ) ;
4722: LD_VAR 0 10
4726: PPUSH
4727: LD_VAR 0 7
4731: PPUSH
4732: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4736: LD_VAR 0 10
4740: PPUSH
4741: LD_EXP 29
4745: PUSH
4746: LD_VAR 0 8
4750: ARRAY
4751: PPUSH
4752: LD_INT 0
4754: PPUSH
4755: CALL_OW 49
// end ;
4759: GO 4701
4761: POP
4762: POP
// end ; end ;
4763: GO 3548
4765: POP
4766: POP
// if not mpTeamGame then
4767: LD_EXP 9
4771: NOT
4772: IFFALSE 4870
// begin for i := 1 to 8 do
4774: LD_ADDR_VAR 0 2
4778: PUSH
4779: DOUBLE
4780: LD_INT 1
4782: DEC
4783: ST_TO_ADDR
4784: LD_INT 8
4786: PUSH
4787: FOR_TO
4788: IFFALSE 4866
// for j := 1 to 8 do
4790: LD_ADDR_VAR 0 3
4794: PUSH
4795: DOUBLE
4796: LD_INT 1
4798: DEC
4799: ST_TO_ADDR
4800: LD_INT 8
4802: PUSH
4803: FOR_TO
4804: IFFALSE 4862
// if i <> j then
4806: LD_VAR 0 2
4810: PUSH
4811: LD_VAR 0 3
4815: NONEQUAL
4816: IFFALSE 4840
// SetAttitude ( i , j , att_neutral , true ) else
4818: LD_VAR 0 2
4822: PPUSH
4823: LD_VAR 0 3
4827: PPUSH
4828: LD_INT 0
4830: PPUSH
4831: LD_INT 1
4833: PPUSH
4834: CALL_OW 80
4838: GO 4860
// SetAttitude ( i , j , att_friend , true ) ;
4840: LD_VAR 0 2
4844: PPUSH
4845: LD_VAR 0 3
4849: PPUSH
4850: LD_INT 1
4852: PPUSH
4853: LD_INT 1
4855: PPUSH
4856: CALL_OW 80
4860: GO 4803
4862: POP
4863: POP
4864: GO 4787
4866: POP
4867: POP
// end else
4868: GO 5045
// begin if mpSharedVision then
4870: LD_EXP 14
4874: IFFALSE 4939
// begin for i in mpTeams do
4876: LD_ADDR_VAR 0 2
4880: PUSH
4881: LD_EXP 8
4885: PUSH
4886: FOR_IN
4887: IFFALSE 4937
// for j := 2 to i do
4889: LD_ADDR_VAR 0 3
4893: PUSH
4894: DOUBLE
4895: LD_INT 2
4897: DEC
4898: ST_TO_ADDR
4899: LD_VAR 0 2
4903: PUSH
4904: FOR_TO
4905: IFFALSE 4933
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4907: LD_VAR 0 2
4911: PUSH
4912: LD_VAR 0 3
4916: ARRAY
4917: PPUSH
4918: LD_VAR 0 2
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: CALL_OW 343
4931: GO 4904
4933: POP
4934: POP
4935: GO 4886
4937: POP
4938: POP
// end ; for i := 1 to 8 do
4939: LD_ADDR_VAR 0 2
4943: PUSH
4944: DOUBLE
4945: LD_INT 1
4947: DEC
4948: ST_TO_ADDR
4949: LD_INT 8
4951: PUSH
4952: FOR_TO
4953: IFFALSE 5043
// for j := 1 to 8 do
4955: LD_ADDR_VAR 0 3
4959: PUSH
4960: DOUBLE
4961: LD_INT 1
4963: DEC
4964: ST_TO_ADDR
4965: LD_INT 8
4967: PUSH
4968: FOR_TO
4969: IFFALSE 5039
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4971: LD_EXP 6
4975: PUSH
4976: LD_VAR 0 2
4980: ARRAY
4981: PUSH
4982: LD_EXP 6
4986: PUSH
4987: LD_VAR 0 3
4991: ARRAY
4992: EQUAL
4993: IFFALSE 5017
// SetAttitude ( i , j , att_friend , true ) else
4995: LD_VAR 0 2
4999: PPUSH
5000: LD_VAR 0 3
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: LD_INT 1
5010: PPUSH
5011: CALL_OW 80
5015: GO 5037
// SetAttitude ( i , j , att_enemy , true ) ;
5017: LD_VAR 0 2
5021: PPUSH
5022: LD_VAR 0 3
5026: PPUSH
5027: LD_INT 2
5029: PPUSH
5030: LD_INT 1
5032: PPUSH
5033: CALL_OW 80
5037: GO 4968
5039: POP
5040: POP
5041: GO 4952
5043: POP
5044: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5045: LD_ADDR_OWVAR 71
5049: PUSH
5050: LD_EXP 7
5054: PUSH
5055: LD_OWVAR 2
5059: ARRAY
5060: ST_TO_ADDR
// if IAmSpec then
5061: CALL_OW 531
5065: IFFALSE 5106
// begin FogOff ( true ) ;
5067: LD_INT 1
5069: PPUSH
5070: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5074: LD_EXP 27
5078: PUSH
5079: LD_INT 1
5081: ARRAY
5082: PUSH
5083: LD_INT 2
5085: DIV
5086: PPUSH
5087: LD_EXP 27
5091: PUSH
5092: LD_INT 2
5094: ARRAY
5095: PUSH
5096: LD_INT 2
5098: DIV
5099: PPUSH
5100: CALL_OW 86
// end else
5104: GO 5152
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5106: LD_EXP 19
5110: PUSH
5111: LD_EXP 5
5115: PUSH
5116: LD_OWVAR 2
5120: ARRAY
5121: ARRAY
5122: PUSH
5123: LD_INT 1
5125: ARRAY
5126: PPUSH
5127: LD_EXP 19
5131: PUSH
5132: LD_EXP 5
5136: PUSH
5137: LD_OWVAR 2
5141: ARRAY
5142: ARRAY
5143: PUSH
5144: LD_INT 2
5146: ARRAY
5147: PPUSH
5148: CALL_OW 86
// end ; BeginBuildUp ;
5152: CALL 6153 0 0
// enable ( mpActive ) ;
5156: LD_INT 100
5158: ENABLE_MARKED
// enable ( mpGameType ) ;
5159: LD_EXP 1
5163: ENABLE_MARKED
// mpGameActive := true ;
5164: LD_ADDR_EXP 36
5168: PUSH
5169: LD_INT 1
5171: ST_TO_ADDR
// end ;
5172: LD_VAR 0 1
5176: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5177: LD_INT 0
5179: PPUSH
5180: PPUSH
5181: PPUSH
5182: PPUSH
// result := [ ] ;
5183: LD_ADDR_VAR 0 5
5187: PUSH
5188: EMPTY
5189: ST_TO_ADDR
// class := class_soldier ;
5190: LD_ADDR_VAR 0 8
5194: PUSH
5195: LD_INT 1
5197: ST_TO_ADDR
// uc_side := side ;
5198: LD_ADDR_OWVAR 20
5202: PUSH
5203: LD_VAR 0 1
5207: ST_TO_ADDR
// uc_nation := nation ;
5208: LD_ADDR_OWVAR 21
5212: PUSH
5213: LD_VAR 0 2
5217: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5218: LD_ADDR_OWVAR 26
5222: PUSH
5223: LD_OWVAR 19
5227: PUSH
5228: LD_VAR 0 1
5232: ARRAY
5233: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5234: LD_INT 1
5236: PPUSH
5237: LD_INT 2
5239: PPUSH
5240: CALL_OW 12
5244: PPUSH
5245: LD_VAR 0 8
5249: PPUSH
5250: LD_VAR 0 4
5254: PUSH
5255: LD_INT 2
5257: PLUS
5258: PPUSH
5259: CALL_OW 380
// hc_importance := 105 ;
5263: LD_ADDR_OWVAR 32
5267: PUSH
5268: LD_INT 105
5270: ST_TO_ADDR
// if Multiplayer then
5271: LD_OWVAR 4
5275: IFFALSE 5315
// begin hc_gallery := MULTIAVATARS ;
5277: LD_ADDR_OWVAR 33
5281: PUSH
5282: LD_STRING MULTIAVATARS
5284: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5285: LD_ADDR_OWVAR 34
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 525
5299: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5300: LD_ADDR_OWVAR 27
5304: PUSH
5305: LD_VAR 0 1
5309: PPUSH
5310: CALL_OW 526
5314: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5315: LD_ADDR_VAR 0 5
5319: PUSH
5320: LD_VAR 0 5
5324: PPUSH
5325: CALL_OW 44
5329: PPUSH
5330: CALL 54051 0 2
5334: ST_TO_ADDR
// if mpTeamPreset then
5335: LD_LOC 1
5339: IFFALSE 5435
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5341: LD_LOC 1
5345: PUSH
5346: LD_INT 1
5348: ARRAY
5349: PPUSH
5350: LD_VAR 0 5
5354: PUSH
5355: LD_VAR 0 5
5359: ARRAY
5360: PPUSH
5361: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5365: LD_VAR 0 5
5369: PUSH
5370: LD_VAR 0 5
5374: ARRAY
5375: PPUSH
5376: LD_INT 1
5378: PPUSH
5379: LD_LOC 1
5383: PUSH
5384: LD_INT 1
5386: ARRAY
5387: PPUSH
5388: LD_INT 1
5390: PPUSH
5391: CALL_OW 260
5395: PPUSH
5396: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5400: LD_VAR 0 5
5404: PUSH
5405: LD_VAR 0 5
5409: ARRAY
5410: PPUSH
5411: LD_INT 2
5413: PPUSH
5414: LD_LOC 1
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PPUSH
5423: LD_INT 2
5425: PPUSH
5426: CALL_OW 260
5430: PPUSH
5431: CALL_OW 239
// end ; InitHc_All ( ) ;
5435: CALL_OW 584
// class := 2 ;
5439: LD_ADDR_VAR 0 8
5443: PUSH
5444: LD_INT 2
5446: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5447: LD_ADDR_VAR 0 6
5451: PUSH
5452: DOUBLE
5453: LD_INT 1
5455: DEC
5456: ST_TO_ADDR
5457: LD_VAR 0 3
5461: PUSH
5462: LD_INT 1
5464: MINUS
5465: PUSH
5466: FOR_TO
5467: IFFALSE 5651
// begin PrepareHuman ( false , class , skill ) ;
5469: LD_INT 0
5471: PPUSH
5472: LD_VAR 0 8
5476: PPUSH
5477: LD_VAR 0 4
5481: PPUSH
5482: CALL_OW 380
// un := CreateHuman ;
5486: LD_ADDR_VAR 0 7
5490: PUSH
5491: CALL_OW 44
5495: ST_TO_ADDR
// result := Join ( result , un ) ;
5496: LD_ADDR_VAR 0 5
5500: PUSH
5501: LD_VAR 0 5
5505: PPUSH
5506: LD_VAR 0 7
5510: PPUSH
5511: CALL 54051 0 2
5515: ST_TO_ADDR
// if mpTeamPreset then
5516: LD_LOC 1
5520: IFFALSE 5616
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5522: LD_LOC 1
5526: PUSH
5527: LD_VAR 0 6
5531: PUSH
5532: LD_INT 1
5534: PLUS
5535: ARRAY
5536: PPUSH
5537: LD_VAR 0 7
5541: PPUSH
5542: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5546: LD_VAR 0 7
5550: PPUSH
5551: LD_INT 1
5553: PPUSH
5554: LD_LOC 1
5558: PUSH
5559: LD_VAR 0 6
5563: PUSH
5564: LD_INT 1
5566: PLUS
5567: ARRAY
5568: PPUSH
5569: LD_INT 1
5571: PPUSH
5572: CALL_OW 260
5576: PPUSH
5577: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5581: LD_VAR 0 7
5585: PPUSH
5586: LD_INT 2
5588: PPUSH
5589: LD_LOC 1
5593: PUSH
5594: LD_VAR 0 6
5598: PUSH
5599: LD_INT 1
5601: PLUS
5602: ARRAY
5603: PPUSH
5604: LD_INT 2
5606: PPUSH
5607: CALL_OW 260
5611: PPUSH
5612: CALL_OW 239
// end ; class := Inc ( class ) ;
5616: LD_ADDR_VAR 0 8
5620: PUSH
5621: LD_VAR 0 8
5625: PPUSH
5626: CALL 55412 0 1
5630: ST_TO_ADDR
// if class = 5 then
5631: LD_VAR 0 8
5635: PUSH
5636: LD_INT 5
5638: EQUAL
5639: IFFALSE 5649
// class := 1 ;
5641: LD_ADDR_VAR 0 8
5645: PUSH
5646: LD_INT 1
5648: ST_TO_ADDR
// end ;
5649: GO 5466
5651: POP
5652: POP
// if not mpTeamPreset then
5653: LD_LOC 1
5657: NOT
5658: IFFALSE 5670
// mpTeamPreset := result ;
5660: LD_ADDR_LOC 1
5664: PUSH
5665: LD_VAR 0 5
5669: ST_TO_ADDR
// end ;
5670: LD_VAR 0 5
5674: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5675: LD_INT 0
5677: PPUSH
5678: PPUSH
// result := [ ] ;
5679: LD_ADDR_VAR 0 4
5683: PUSH
5684: EMPTY
5685: ST_TO_ADDR
// if not vehicles then
5686: LD_VAR 0 3
5690: NOT
5691: IFFALSE 5695
// exit ;
5693: GO 5854
// for i := 1 to vehicles [ nation ] do
5695: LD_ADDR_VAR 0 5
5699: PUSH
5700: DOUBLE
5701: LD_INT 1
5703: DEC
5704: ST_TO_ADDR
5705: LD_VAR 0 3
5709: PUSH
5710: LD_VAR 0 2
5714: ARRAY
5715: PUSH
5716: FOR_TO
5717: IFFALSE 5852
// begin uc_side := side ;
5719: LD_ADDR_OWVAR 20
5723: PUSH
5724: LD_VAR 0 1
5728: ST_TO_ADDR
// uc_nation := nation ;
5729: LD_ADDR_OWVAR 21
5733: PUSH
5734: LD_VAR 0 2
5738: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5739: LD_VAR 0 3
5743: PUSH
5744: LD_VAR 0 2
5748: ARRAY
5749: PUSH
5750: LD_VAR 0 5
5754: ARRAY
5755: PUSH
5756: LD_INT 1
5758: ARRAY
5759: PPUSH
5760: LD_VAR 0 3
5764: PUSH
5765: LD_VAR 0 2
5769: ARRAY
5770: PUSH
5771: LD_VAR 0 5
5775: ARRAY
5776: PUSH
5777: LD_INT 2
5779: ARRAY
5780: PPUSH
5781: LD_VAR 0 3
5785: PUSH
5786: LD_VAR 0 2
5790: ARRAY
5791: PUSH
5792: LD_VAR 0 5
5796: ARRAY
5797: PUSH
5798: LD_INT 3
5800: ARRAY
5801: PPUSH
5802: LD_VAR 0 3
5806: PUSH
5807: LD_VAR 0 2
5811: ARRAY
5812: PUSH
5813: LD_VAR 0 5
5817: ARRAY
5818: PUSH
5819: LD_INT 4
5821: ARRAY
5822: PPUSH
5823: LD_INT 80
5825: PPUSH
5826: CALL 21180 0 5
// result := Join ( result , CreateVehicle ) ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: LD_VAR 0 4
5839: PPUSH
5840: CALL_OW 45
5844: PPUSH
5845: CALL 54051 0 2
5849: ST_TO_ADDR
// end ;
5850: GO 5716
5852: POP
5853: POP
// end ;
5854: LD_VAR 0 4
5858: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5859: LD_INT 0
5861: PPUSH
5862: PPUSH
// for i in mpBattleFlags do
5863: LD_ADDR_VAR 0 3
5867: PUSH
5868: LD_EXP 21
5872: PUSH
5873: FOR_IN
5874: IFFALSE 5951
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5876: LD_VAR 0 3
5880: PPUSH
5881: LD_INT 1
5883: PUSH
5884: LD_VAR 0 1
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PUSH
5893: LD_INT 2
5895: PUSH
5896: LD_VAR 0 1
5900: PUSH
5901: LD_REAL  7.00000000000000E-0001
5904: MUL
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 3
5912: PUSH
5913: LD_VAR 0 1
5917: PUSH
5918: LD_REAL  4.00000000000000E-0001
5921: MUL
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 20
5929: PUSH
5930: LD_VAR 0 1
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: PPUSH
5945: CALL_OW 423
5949: GO 5873
5951: POP
5952: POP
// end ;
5953: LD_VAR 0 2
5957: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5958: LD_INT 100
5960: IFFALSE 6055
5962: GO 5964
5964: DISABLE
5965: LD_INT 0
5967: PPUSH
5968: PPUSH
// begin if mpBattleFlag <= 0 then
5969: LD_EXP 20
5973: PUSH
5974: LD_INT 0
5976: LESSEQUAL
5977: IFFALSE 5981
// exit ;
5979: GO 6055
// strength := 100 ;
5981: LD_ADDR_VAR 0 2
5985: PUSH
5986: LD_INT 100
5988: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5989: LD_EXP 20
5993: PPUSH
5994: CALL_OW 67
// strength := Dec ( strength ) ;
5998: LD_ADDR_VAR 0 2
6002: PUSH
6003: LD_VAR 0 2
6007: PPUSH
6008: CALL 55434 0 1
6012: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6013: LD_VAR 0 2
6017: PPUSH
6018: CALL 5859 0 1
// until not strength ;
6022: LD_VAR 0 2
6026: NOT
6027: IFFALSE 5989
// for i in mpBattleFlags do
6029: LD_ADDR_VAR 0 1
6033: PUSH
6034: LD_EXP 21
6038: PUSH
6039: FOR_IN
6040: IFFALSE 6053
// KillBattleFlag ( i ) ;
6042: LD_VAR 0 1
6046: PPUSH
6047: CALL_OW 419
6051: GO 6039
6053: POP
6054: POP
// end ;
6055: PPOPN 2
6057: END
// every 0 0$1 marked mpActive do var side , tmp ;
6058: GO 6060
6060: DISABLE
6061: LD_INT 0
6063: PPUSH
6064: PPUSH
// begin if mpSibBomb <= 1 then
6065: LD_EXP 26
6069: PUSH
6070: LD_INT 1
6072: LESSEQUAL
6073: IFFALSE 6077
// exit ;
6075: GO 6150
// tmp := mpSibBomb ;
6077: LD_ADDR_VAR 0 2
6081: PUSH
6082: LD_EXP 26
6086: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6087: LD_INT 35
6089: PPUSH
6090: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_VAR 0 2
6103: PUSH
6104: LD_INT 35
6106: MINUS
6107: ST_TO_ADDR
// until not tmp ;
6108: LD_VAR 0 2
6112: NOT
6113: IFFALSE 6087
// for side := 1 to 8 do
6115: LD_ADDR_VAR 0 1
6119: PUSH
6120: DOUBLE
6121: LD_INT 1
6123: DEC
6124: ST_TO_ADDR
6125: LD_INT 8
6127: PUSH
6128: FOR_TO
6129: IFFALSE 6148
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6131: LD_INT 25
6133: PPUSH
6134: LD_VAR 0 1
6138: PPUSH
6139: LD_INT 1
6141: PPUSH
6142: CALL_OW 322
6146: GO 6128
6148: POP
6149: POP
// end ;
6150: PPOPN 2
6152: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6153: LD_INT 0
6155: PPUSH
6156: PPUSH
6157: PPUSH
// mpBuildUpTimeDelay := 0 ;
6158: LD_ADDR_EXP 39
6162: PUSH
6163: LD_INT 0
6165: ST_TO_ADDR
// if not mpBuildUpTime then
6166: LD_EXP 18
6170: NOT
6171: IFFALSE 6175
// exit ;
6173: GO 6358
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6175: LD_ADDR_EXP 39
6179: PUSH
6180: LD_INT 8400
6182: PUSH
6183: LD_INT 2100
6185: PUSH
6186: LD_EXP 18
6190: MUL
6191: PLUS
6192: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6193: LD_ADDR_EXP 40
6197: PUSH
6198: LD_INT 1
6200: ST_TO_ADDR
// for i := 1 to 8 do
6201: LD_ADDR_VAR 0 2
6205: PUSH
6206: DOUBLE
6207: LD_INT 1
6209: DEC
6210: ST_TO_ADDR
6211: LD_INT 8
6213: PUSH
6214: FOR_TO
6215: IFFALSE 6356
// if mpSidePositions [ i ] then
6217: LD_EXP 5
6221: PUSH
6222: LD_VAR 0 2
6226: ARRAY
6227: IFFALSE 6354
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6229: LD_EXP 17
6233: PUSH
6234: LD_EXP 5
6238: PUSH
6239: LD_VAR 0 2
6243: ARRAY
6244: ARRAY
6245: PPUSH
6246: LD_INT 5
6248: PPUSH
6249: CALL_OW 424
// for j := 1 to 8 do
6253: LD_ADDR_VAR 0 3
6257: PUSH
6258: DOUBLE
6259: LD_INT 1
6261: DEC
6262: ST_TO_ADDR
6263: LD_INT 8
6265: PUSH
6266: FOR_TO
6267: IFFALSE 6352
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6269: LD_EXP 5
6273: PUSH
6274: LD_VAR 0 3
6278: ARRAY
6279: PUSH
6280: LD_EXP 6
6284: PUSH
6285: LD_VAR 0 2
6289: ARRAY
6290: PUSH
6291: LD_EXP 6
6295: PUSH
6296: LD_VAR 0 3
6300: ARRAY
6301: NONEQUAL
6302: PUSH
6303: LD_EXP 9
6307: NOT
6308: PUSH
6309: LD_VAR 0 2
6313: PUSH
6314: LD_VAR 0 3
6318: NONEQUAL
6319: AND
6320: OR
6321: AND
6322: IFFALSE 6350
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6324: LD_VAR 0 3
6328: PPUSH
6329: LD_EXP 17
6333: PUSH
6334: LD_EXP 5
6338: PUSH
6339: LD_VAR 0 2
6343: ARRAY
6344: ARRAY
6345: PPUSH
6346: CALL_OW 333
6350: GO 6266
6352: POP
6353: POP
// end ;
6354: GO 6214
6356: POP
6357: POP
// end ;
6358: LD_VAR 0 1
6362: RET
// function EndBuildUp ; var i , j ; begin
6363: LD_INT 0
6365: PPUSH
6366: PPUSH
6367: PPUSH
// mpBuildUpTimeActive := false ;
6368: LD_ADDR_EXP 40
6372: PUSH
6373: LD_INT 0
6375: ST_TO_ADDR
// for i := 1 to 8 do
6376: LD_ADDR_VAR 0 2
6380: PUSH
6381: DOUBLE
6382: LD_INT 1
6384: DEC
6385: ST_TO_ADDR
6386: LD_INT 8
6388: PUSH
6389: FOR_TO
6390: IFFALSE 6531
// if mpSidePositions [ i ] then
6392: LD_EXP 5
6396: PUSH
6397: LD_VAR 0 2
6401: ARRAY
6402: IFFALSE 6529
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6404: LD_EXP 17
6408: PUSH
6409: LD_EXP 5
6413: PUSH
6414: LD_VAR 0 2
6418: ARRAY
6419: ARRAY
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: CALL_OW 424
// for j := 1 to 8 do
6428: LD_ADDR_VAR 0 3
6432: PUSH
6433: DOUBLE
6434: LD_INT 1
6436: DEC
6437: ST_TO_ADDR
6438: LD_INT 8
6440: PUSH
6441: FOR_TO
6442: IFFALSE 6527
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6444: LD_EXP 5
6448: PUSH
6449: LD_VAR 0 3
6453: ARRAY
6454: PUSH
6455: LD_EXP 6
6459: PUSH
6460: LD_VAR 0 2
6464: ARRAY
6465: PUSH
6466: LD_EXP 6
6470: PUSH
6471: LD_VAR 0 3
6475: ARRAY
6476: NONEQUAL
6477: PUSH
6478: LD_EXP 9
6482: NOT
6483: PUSH
6484: LD_VAR 0 2
6488: PUSH
6489: LD_VAR 0 3
6493: NONEQUAL
6494: AND
6495: OR
6496: AND
6497: IFFALSE 6525
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6499: LD_VAR 0 3
6503: PPUSH
6504: LD_EXP 17
6508: PUSH
6509: LD_EXP 5
6513: PUSH
6514: LD_VAR 0 2
6518: ARRAY
6519: ARRAY
6520: PPUSH
6521: CALL_OW 334
6525: GO 6441
6527: POP
6528: POP
// end ;
6529: GO 6389
6531: POP
6532: POP
// end ;
6533: LD_VAR 0 1
6537: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6538: LD_EXP 40
6542: IFFALSE 6717
6544: GO 6546
6546: DISABLE
6547: LD_INT 0
6549: PPUSH
6550: PPUSH
// begin for i := 1 to 8 do
6551: LD_ADDR_VAR 0 1
6555: PUSH
6556: DOUBLE
6557: LD_INT 1
6559: DEC
6560: ST_TO_ADDR
6561: LD_INT 8
6563: PUSH
6564: FOR_TO
6565: IFFALSE 6714
// if mpSidePositions [ i ] then
6567: LD_EXP 5
6571: PUSH
6572: LD_VAR 0 1
6576: ARRAY
6577: IFFALSE 6712
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6579: LD_ADDR_VAR 0 2
6583: PUSH
6584: LD_EXP 17
6588: PUSH
6589: LD_EXP 5
6593: PUSH
6594: LD_VAR 0 1
6598: ARRAY
6599: ARRAY
6600: PPUSH
6601: LD_INT 2
6603: PUSH
6604: LD_INT 21
6606: PUSH
6607: LD_INT 1
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 21
6616: PUSH
6617: LD_INT 2
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 22
6631: PUSH
6632: LD_OWVAR 2
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PPUSH
6645: CALL_OW 70
6649: PUSH
6650: FOR_IN
6651: IFFALSE 6710
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6653: LD_EXP 6
6657: PUSH
6658: LD_VAR 0 1
6662: ARRAY
6663: PUSH
6664: LD_EXP 6
6668: PUSH
6669: LD_OWVAR 2
6673: ARRAY
6674: NONEQUAL
6675: PUSH
6676: LD_EXP 9
6680: NOT
6681: PUSH
6682: LD_VAR 0 1
6686: PUSH
6687: LD_OWVAR 2
6691: NONEQUAL
6692: AND
6693: OR
6694: IFFALSE 6708
// ComMoveToArea ( un , BuildUpEscape ) ;
6696: LD_VAR 0 2
6700: PPUSH
6701: LD_INT 59
6703: PPUSH
6704: CALL_OW 113
6708: GO 6650
6710: POP
6711: POP
6712: GO 6564
6714: POP
6715: POP
// enable ;
6716: ENABLE
// end ;
6717: PPOPN 2
6719: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6720: LD_EXP 18
6724: IFFALSE 6774
6726: GO 6728
6728: DISABLE
6729: LD_INT 0
6731: PPUSH
// begin tmp := mpBuildUpTime ;
6732: LD_ADDR_VAR 0 1
6736: PUSH
6737: LD_EXP 18
6741: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6742: LD_INT 35
6744: PPUSH
6745: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6749: LD_ADDR_VAR 0 1
6753: PUSH
6754: LD_VAR 0 1
6758: PUSH
6759: LD_INT 35
6761: MINUS
6762: ST_TO_ADDR
// until not tmp ;
6763: LD_VAR 0 1
6767: NOT
6768: IFFALSE 6742
// EndBuildUp ;
6770: CALL 6363 0 0
// end ;
6774: PPOPN 1
6776: END
// every 0 0$1 trigger mpActive marked mpWin do
6777: LD_INT 100
6779: IFFALSE 6813
6781: GO 6783
6783: DISABLE
// begin if IAmServer then
6784: CALL_OW 518
6788: IFFALSE 6797
// wait ( 0 0$3 ) ;
6790: LD_INT 105
6792: PPUSH
6793: CALL_OW 67
// if Multiplayer then
6797: LD_OWVAR 4
6801: IFFALSE 6809
// YouWinInMultiplayer else
6803: CALL_OW 106
6807: GO 6813
// YouWin ;
6809: CALL_OW 103
// end ;
6813: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6814: LD_INT 0
6816: PPUSH
// result := false ;
6817: LD_ADDR_VAR 0 3
6821: PUSH
6822: LD_INT 0
6824: ST_TO_ADDR
// case gameType of GameTypeNormal :
6825: LD_VAR 0 1
6829: PUSH
6830: LD_INT 1
6832: DOUBLE
6833: EQUAL
6834: IFTRUE 6838
6836: GO 6911
6838: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6839: LD_ADDR_VAR 0 3
6843: PUSH
6844: LD_INT 22
6846: PUSH
6847: LD_VAR 0 2
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 2
6858: PUSH
6859: LD_INT 21
6861: PUSH
6862: LD_INT 1
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: LD_INT 33
6871: PUSH
6872: LD_INT 3
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 33
6881: PUSH
6882: LD_INT 5
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PPUSH
6899: CALL_OW 69
6903: PPUSH
6904: CALL 18442 0 1
6908: ST_TO_ADDR
// end ; GameTypeSurvival :
6909: GO 7146
6911: LD_INT 2
6913: DOUBLE
6914: EQUAL
6915: IFTRUE 6919
6917: GO 7047
6919: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6920: LD_ADDR_VAR 0 3
6924: PUSH
6925: LD_INT 22
6927: PUSH
6928: LD_VAR 0 2
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 2
6939: PUSH
6940: LD_INT 30
6942: PUSH
6943: LD_INT 0
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 30
6952: PUSH
6953: LD_INT 1
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PPUSH
6969: CALL_OW 69
6973: PPUSH
6974: CALL 18442 0 1
6978: PUSH
6979: LD_INT 22
6981: PUSH
6982: LD_VAR 0 2
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: LD_INT 2
6993: PUSH
6994: LD_INT 21
6996: PUSH
6997: LD_INT 1
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 33
7006: PUSH
7007: LD_INT 3
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 33
7016: PUSH
7017: LD_INT 5
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PPUSH
7034: CALL_OW 69
7038: PPUSH
7039: CALL 18442 0 1
7043: AND
7044: ST_TO_ADDR
// end ; GameTypeKing :
7045: GO 7146
7047: LD_INT 3
7049: DOUBLE
7050: EQUAL
7051: IFTRUE 7055
7053: GO 7145
7055: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7056: LD_ADDR_VAR 0 3
7060: PUSH
7061: LD_INT 22
7063: PUSH
7064: LD_VAR 0 2
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PUSH
7073: LD_INT 2
7075: PUSH
7076: LD_INT 21
7078: PUSH
7079: LD_INT 1
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: LD_INT 33
7088: PUSH
7089: LD_INT 3
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: LD_INT 33
7098: PUSH
7099: LD_INT 5
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PPUSH
7116: CALL_OW 69
7120: PPUSH
7121: CALL 18442 0 1
7125: PUSH
7126: LD_VAR 0 2
7130: PPUSH
7131: CALL 9583 0 1
7135: PUSH
7136: LD_EXP 32
7140: LESS
7141: AND
7142: ST_TO_ADDR
// end ; end ;
7143: GO 7146
7145: POP
// end ;
7146: LD_VAR 0 3
7150: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7151: LD_INT 100
7153: IFFALSE 7375
7155: GO 7157
7157: DISABLE
7158: LD_INT 0
7160: PPUSH
7161: PPUSH
// begin if Multiplayer then
7162: LD_OWVAR 4
7166: IFFALSE 7174
// SetPlayerSpectator ( ) else
7168: CALL_OW 572
7172: GO 7183
// FogOff ( your_side ) ;
7174: LD_OWVAR 2
7178: PPUSH
7179: CALL_OW 344
// repeat gameIsOn := false ;
7183: LD_ADDR_VAR 0 1
7187: PUSH
7188: LD_INT 0
7190: ST_TO_ADDR
// for i := 1 to 8 do
7191: LD_ADDR_VAR 0 2
7195: PUSH
7196: DOUBLE
7197: LD_INT 1
7199: DEC
7200: ST_TO_ADDR
7201: LD_INT 8
7203: PUSH
7204: FOR_TO
7205: IFFALSE 7327
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7207: LD_EXP 5
7211: PUSH
7212: LD_VAR 0 2
7216: ARRAY
7217: PUSH
7218: LD_VAR 0 2
7222: PPUSH
7223: CALL_OW 108
7227: AND
7228: PUSH
7229: LD_VAR 0 2
7233: PUSH
7234: LD_OWVAR 2
7238: NONEQUAL
7239: AND
7240: IFFALSE 7325
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7242: LD_EXP 6
7246: PUSH
7247: LD_VAR 0 2
7251: ARRAY
7252: NOT
7253: PUSH
7254: LD_EXP 6
7258: PUSH
7259: LD_VAR 0 2
7263: ARRAY
7264: PUSH
7265: LD_EXP 6
7269: PUSH
7270: LD_OWVAR 2
7274: ARRAY
7275: NONEQUAL
7276: PUSH
7277: LD_OWVAR 2
7281: PPUSH
7282: LD_VAR 0 2
7286: PPUSH
7287: CALL_OW 81
7291: PUSH
7292: LD_INT 1
7294: NONEQUAL
7295: AND
7296: OR
7297: IFFALSE 7325
// if HasPowerByGameType ( mpGameType , i ) then
7299: LD_EXP 1
7303: PPUSH
7304: LD_VAR 0 2
7308: PPUSH
7309: CALL 6814 0 2
7313: IFFALSE 7325
// begin gameIsOn := true ;
7315: LD_ADDR_VAR 0 1
7319: PUSH
7320: LD_INT 1
7322: ST_TO_ADDR
// break ;
7323: GO 7327
// end ;
7325: GO 7204
7327: POP
7328: POP
// wait ( 100 ) ;
7329: LD_INT 100
7331: PPUSH
7332: CALL_OW 67
// until not gameIsOn ;
7336: LD_VAR 0 1
7340: NOT
7341: IFFALSE 7183
// if IAmServer then
7343: CALL_OW 518
7347: IFFALSE 7356
// wait ( 0 0$3 ) ;
7349: LD_INT 105
7351: PPUSH
7352: CALL_OW 67
// if Multiplayer then
7356: LD_OWVAR 4
7360: IFFALSE 7368
// YouLostInMultiplayer else
7362: CALL_OW 107
7366: GO 7375
// YouLost (  ) ;
7368: LD_STRING 
7370: PPUSH
7371: CALL_OW 104
// end ;
7375: PPOPN 2
7377: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7378: LD_EXP 30
7382: IFFALSE 7729
7384: GO 7386
7386: DISABLE
7387: LD_INT 0
7389: PPUSH
7390: PPUSH
7391: PPUSH
7392: PPUSH
7393: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7394: LD_ADDR_VAR 0 5
7398: PUSH
7399: LD_INT 1
7401: PUSH
7402: LD_INT 2
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: LD_INT 4
7410: PUSH
7411: LD_INT 5
7413: PUSH
7414: LD_INT 6
7416: PUSH
7417: LD_INT 7
7419: PUSH
7420: LD_INT 8
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7433: LD_INT 350
7435: PPUSH
7436: CALL_OW 67
// for i := 1 to 8 do
7440: LD_ADDR_VAR 0 1
7444: PUSH
7445: DOUBLE
7446: LD_INT 1
7448: DEC
7449: ST_TO_ADDR
7450: LD_INT 8
7452: PUSH
7453: FOR_TO
7454: IFFALSE 7699
// begin j := sides [ i ] ;
7456: LD_ADDR_VAR 0 2
7460: PUSH
7461: LD_VAR 0 5
7465: PUSH
7466: LD_VAR 0 1
7470: ARRAY
7471: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7472: LD_EXP 37
7476: PUSH
7477: LD_VAR 0 2
7481: ARRAY
7482: PPUSH
7483: CALL 18442 0 1
7487: PUSH
7488: LD_VAR 0 2
7492: PPUSH
7493: CALL_OW 108
7497: AND
7498: PUSH
7499: LD_EXP 1
7503: PPUSH
7504: LD_VAR 0 2
7508: PPUSH
7509: CALL 6814 0 2
7513: AND
7514: IFFALSE 7697
// begin wait ( mpRespawn div 3 ) ;
7516: LD_EXP 30
7520: PUSH
7521: LD_INT 3
7523: DIV
7524: PPUSH
7525: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7529: LD_ADDR_VAR 0 3
7533: PUSH
7534: LD_INT 22
7536: PUSH
7537: LD_VAR 0 2
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 50
7548: PUSH
7549: EMPTY
7550: LIST
7551: PUSH
7552: LD_INT 2
7554: PUSH
7555: LD_INT 30
7557: PUSH
7558: LD_INT 0
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PUSH
7565: LD_INT 30
7567: PUSH
7568: LD_INT 1
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 69
7589: ST_TO_ADDR
// if not tmp then
7590: LD_VAR 0 3
7594: NOT
7595: IFFALSE 7599
// continue ;
7597: GO 7453
// spawn := tmp [ 1 ] ;
7599: LD_ADDR_VAR 0 4
7603: PUSH
7604: LD_VAR 0 3
7608: PUSH
7609: LD_INT 1
7611: ARRAY
7612: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7613: LD_EXP 37
7617: PUSH
7618: LD_VAR 0 2
7622: ARRAY
7623: PUSH
7624: LD_INT 1
7626: ARRAY
7627: PPUSH
7628: LD_VAR 0 4
7632: PPUSH
7633: CALL_OW 250
7637: PPUSH
7638: LD_VAR 0 4
7642: PPUSH
7643: CALL_OW 251
7647: PPUSH
7648: LD_INT 32
7650: PPUSH
7651: LD_INT 1
7653: PPUSH
7654: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7658: LD_ADDR_EXP 37
7662: PUSH
7663: LD_EXP 37
7667: PPUSH
7668: LD_VAR 0 2
7672: PPUSH
7673: LD_EXP 37
7677: PUSH
7678: LD_VAR 0 2
7682: ARRAY
7683: PPUSH
7684: LD_INT 1
7686: PPUSH
7687: CALL_OW 3
7691: PPUSH
7692: CALL_OW 1
7696: ST_TO_ADDR
// end ; end ;
7697: GO 7453
7699: POP
7700: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7701: LD_ADDR_VAR 0 5
7705: PUSH
7706: LD_VAR 0 5
7710: PPUSH
7711: LD_INT 1
7713: PPUSH
7714: LD_INT 8
7716: PPUSH
7717: LD_INT 1
7719: PPUSH
7720: CALL 20720 0 4
7724: ST_TO_ADDR
// until false ;
7725: LD_INT 0
7727: IFFALSE 7433
// end ;
7729: PPOPN 5
7731: END
// every 0 0$1 marked mpActive do
7732: GO 7734
7734: DISABLE
// begin enable ;
7735: ENABLE
// if not mpDisplayStrings then
7736: LD_EXP 35
7740: NOT
7741: IFFALSE 7752
// begin display_strings := [ ] ;
7743: LD_ADDR_OWVAR 47
7747: PUSH
7748: EMPTY
7749: ST_TO_ADDR
// exit ;
7750: GO 7762
// end ; display_strings := mpDisplayStrings ;
7752: LD_ADDR_OWVAR 47
7756: PUSH
7757: LD_EXP 35
7761: ST_TO_ADDR
// end ; end_of_file
7762: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7763: LD_INT 0
7765: PPUSH
7766: PPUSH
7767: PPUSH
7768: PPUSH
7769: PPUSH
7770: PPUSH
7771: PPUSH
7772: PPUSH
7773: PPUSH
// if GetType ( un ) = unit_vehicle then
7774: LD_VAR 0 1
7778: PPUSH
7779: CALL_OW 247
7783: PUSH
7784: LD_INT 2
7786: EQUAL
7787: IFFALSE 7791
// exit ;
7789: GO 8361
// side := GetSide ( un ) ;
7791: LD_ADDR_VAR 0 9
7795: PUSH
7796: LD_VAR 0 1
7800: PPUSH
7801: CALL_OW 255
7805: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7806: LD_EXP 1
7810: PUSH
7811: LD_INT 2
7813: EQUAL
7814: IFFALSE 7907
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
7816: LD_VAR 0 1
7820: PPUSH
7821: CALL_OW 266
7825: PUSH
7826: LD_INT 0
7828: PUSH
7829: LD_INT 1
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: IN
7836: PUSH
7837: LD_VAR 0 1
7841: PPUSH
7842: CALL_OW 110
7846: PUSH
7847: LD_VAR 0 9
7851: EQUAL
7852: AND
7853: IFFALSE 7907
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7855: LD_ADDR_VAR 0 3
7859: PUSH
7860: LD_INT 22
7862: PUSH
7863: LD_VAR 0 9
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 21
7874: PUSH
7875: LD_INT 1
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PPUSH
7886: CALL_OW 69
7890: PUSH
7891: FOR_IN
7892: IFFALSE 7905
// KillUnit ( i ) ;
7894: LD_VAR 0 3
7898: PPUSH
7899: CALL_OW 66
7903: GO 7891
7905: POP
7906: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7907: LD_VAR 0 1
7911: PPUSH
7912: CALL_OW 257
7916: PUSH
7917: LD_INT 12
7919: PUSH
7920: LD_INT 17
7922: PUSH
7923: LD_INT 15
7925: PUSH
7926: LD_INT 16
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: IN
7935: PUSH
7936: LD_VAR 0 1
7940: PPUSH
7941: CALL_OW 263
7945: PUSH
7946: LD_INT 5
7948: EQUAL
7949: OR
7950: IFFALSE 8090
// begin tag := GetTag ( un ) ;
7952: LD_ADDR_VAR 0 5
7956: PUSH
7957: LD_VAR 0 1
7961: PPUSH
7962: CALL_OW 110
7966: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7967: LD_ADDR_VAR 0 7
7971: PUSH
7972: LD_EXP 29
7976: PUSH
7977: LD_EXP 5
7981: PUSH
7982: LD_VAR 0 5
7986: ARRAY
7987: ARRAY
7988: ST_TO_ADDR
// if not area then
7989: LD_VAR 0 7
7993: NOT
7994: IFFALSE 7998
// exit ;
7996: GO 8361
// wait ( 4 4$00 ) ;
7998: LD_INT 8400
8000: PPUSH
8001: CALL_OW 67
// repeat wait ( 10 ) ;
8005: LD_INT 10
8007: PPUSH
8008: CALL_OW 67
// until not mpBlockRespThread ;
8012: LD_EXP 38
8016: NOT
8017: IFFALSE 8005
// mpBlockRespThread := true ;
8019: LD_ADDR_EXP 38
8023: PUSH
8024: LD_INT 1
8026: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8027: LD_INT 0
8029: PPUSH
8030: CALL 50299 0 1
// ape := CreateHuman ;
8034: LD_ADDR_VAR 0 4
8038: PUSH
8039: CALL_OW 44
8043: ST_TO_ADDR
// SetTag ( ape , tag ) ;
8044: LD_VAR 0 4
8048: PPUSH
8049: LD_VAR 0 5
8053: PPUSH
8054: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
8058: LD_VAR 0 4
8062: PPUSH
8063: LD_VAR 0 7
8067: PPUSH
8068: LD_INT 0
8070: PPUSH
8071: CALL_OW 49
// wait ( 10 ) ;
8075: LD_INT 10
8077: PPUSH
8078: CALL_OW 67
// mpBlockRespThread := false ;
8082: LD_ADDR_EXP 38
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8090: LD_VAR 0 1
8094: PPUSH
8095: CALL_OW 247
8099: PUSH
8100: LD_INT 1
8102: EQUAL
8103: PUSH
8104: LD_VAR 0 1
8108: PPUSH
8109: CALL_OW 248
8113: PUSH
8114: LD_INT 0
8116: GREATER
8117: AND
8118: IFFALSE 8361
// begin if not mpRespawn then
8120: LD_EXP 30
8124: NOT
8125: IFFALSE 8129
// exit ;
8127: GO 8361
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8129: LD_VAR 0 9
8133: PPUSH
8134: CALL_OW 108
8138: NOT
8139: PUSH
8140: LD_EXP 1
8144: PPUSH
8145: LD_VAR 0 9
8149: PPUSH
8150: CALL 6814 0 2
8154: NOT
8155: AND
8156: IFFALSE 8160
// exit ;
8158: GO 8361
// side := GetSide ( un ) ;
8160: LD_ADDR_VAR 0 9
8164: PUSH
8165: LD_VAR 0 1
8169: PPUSH
8170: CALL_OW 255
8174: ST_TO_ADDR
// nation := GetNation ( un ) ;
8175: LD_ADDR_VAR 0 8
8179: PUSH
8180: LD_VAR 0 1
8184: PPUSH
8185: CALL_OW 248
8189: ST_TO_ADDR
// class := GetClass ( un ) ;
8190: LD_ADDR_VAR 0 6
8194: PUSH
8195: LD_VAR 0 1
8199: PPUSH
8200: CALL_OW 257
8204: ST_TO_ADDR
// if class > 4 then
8205: LD_VAR 0 6
8209: PUSH
8210: LD_INT 4
8212: GREATER
8213: IFFALSE 8223
// class := 1 ;
8215: LD_ADDR_VAR 0 6
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// repeat wait ( 10 ) ;
8223: LD_INT 10
8225: PPUSH
8226: CALL_OW 67
// until not mpBlockRespThread ;
8230: LD_EXP 38
8234: NOT
8235: IFFALSE 8223
// mpBlockRespThread := true ;
8237: LD_ADDR_EXP 38
8241: PUSH
8242: LD_INT 1
8244: ST_TO_ADDR
// uc_side := side ;
8245: LD_ADDR_OWVAR 20
8249: PUSH
8250: LD_VAR 0 9
8254: ST_TO_ADDR
// uc_nation := nation ;
8255: LD_ADDR_OWVAR 21
8259: PUSH
8260: LD_VAR 0 8
8264: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8265: LD_INT 0
8267: PPUSH
8268: LD_VAR 0 6
8272: PPUSH
8273: LD_INT 2
8275: PPUSH
8276: CALL_OW 380
// un := CreateHuman ;
8280: LD_ADDR_VAR 0 1
8284: PUSH
8285: CALL_OW 44
8289: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8290: LD_ADDR_EXP 37
8294: PUSH
8295: LD_EXP 37
8299: PPUSH
8300: LD_VAR 0 9
8304: PPUSH
8305: LD_EXP 37
8309: PUSH
8310: LD_VAR 0 9
8314: ARRAY
8315: PPUSH
8316: LD_EXP 37
8320: PUSH
8321: LD_VAR 0 9
8325: ARRAY
8326: PUSH
8327: LD_INT 1
8329: PLUS
8330: PPUSH
8331: LD_VAR 0 1
8335: PPUSH
8336: CALL_OW 1
8340: PPUSH
8341: CALL_OW 1
8345: ST_TO_ADDR
// wait ( 10 ) ;
8346: LD_INT 10
8348: PPUSH
8349: CALL_OW 67
// mpBlockRespThread := false ;
8353: LD_ADDR_EXP 38
8357: PUSH
8358: LD_INT 0
8360: ST_TO_ADDR
// end ; end ;
8361: LD_VAR 0 2
8365: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8366: LD_INT 0
8368: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8369: LD_VAR 0 1
8373: PPUSH
8374: CALL_OW 266
8378: PUSH
8379: LD_INT 0
8381: PUSH
8382: LD_INT 1
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: IN
8389: IFFALSE 8414
// SetBName ( building , @ & GetSide ( building ) ) ;
8391: LD_VAR 0 1
8395: PPUSH
8396: LD_STRING @
8398: PUSH
8399: LD_VAR 0 1
8403: PPUSH
8404: CALL_OW 255
8408: STR
8409: PPUSH
8410: CALL_OW 500
// end ;
8414: LD_VAR 0 2
8418: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8419: LD_INT 0
8421: PPUSH
8422: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8423: LD_EXP 1
8427: PUSH
8428: LD_INT 2
8430: EQUAL
8431: PUSH
8432: LD_VAR 0 1
8436: PPUSH
8437: CALL_OW 266
8441: PUSH
8442: LD_INT 0
8444: PUSH
8445: LD_INT 1
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: IN
8452: AND
8453: IFFALSE 8518
// begin KillUnit ( building ) ;
8455: LD_VAR 0 1
8459: PPUSH
8460: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8464: LD_ADDR_VAR 0 5
8468: PUSH
8469: LD_INT 22
8471: PUSH
8472: LD_VAR 0 2
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: LD_INT 21
8483: PUSH
8484: LD_INT 1
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PPUSH
8495: CALL_OW 69
8499: PUSH
8500: FOR_IN
8501: IFFALSE 8514
// KillUnit ( i ) ;
8503: LD_VAR 0 5
8507: PPUSH
8508: CALL_OW 66
8512: GO 8500
8514: POP
8515: POP
// exit ;
8516: GO 8563
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8518: LD_VAR 0 1
8522: PPUSH
8523: CALL_OW 266
8527: PUSH
8528: LD_INT 0
8530: PUSH
8531: LD_INT 1
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: IN
8538: IFFALSE 8563
// SetBName ( building , @ & GetSide ( building ) ) ;
8540: LD_VAR 0 1
8544: PPUSH
8545: LD_STRING @
8547: PUSH
8548: LD_VAR 0 1
8552: PPUSH
8553: CALL_OW 255
8557: STR
8558: PPUSH
8559: CALL_OW 500
// end ; end_of_file
8563: LD_VAR 0 4
8567: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
8568: LD_EXP 36
8572: IFFALSE 8911
8574: GO 8576
8576: DISABLE
8577: LD_INT 0
8579: PPUSH
8580: PPUSH
8581: PPUSH
// begin mpKingPoints := [ ] ;
8582: LD_ADDR_EXP 41
8586: PUSH
8587: EMPTY
8588: ST_TO_ADDR
// if mpTeamGame then
8589: LD_EXP 9
8593: IFFALSE 8647
// begin for i := 1 to Count ( mpTeams ) do
8595: LD_ADDR_VAR 0 1
8599: PUSH
8600: DOUBLE
8601: LD_INT 1
8603: DEC
8604: ST_TO_ADDR
8605: LD_EXP 8
8609: PPUSH
8610: CALL 18442 0 1
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8643
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
8618: LD_ADDR_EXP 41
8622: PUSH
8623: LD_EXP 41
8627: PPUSH
8628: LD_VAR 0 1
8632: PPUSH
8633: LD_INT 0
8635: PPUSH
8636: CALL_OW 1
8640: ST_TO_ADDR
8641: GO 8615
8643: POP
8644: POP
// end else
8645: GO 8690
// begin for i := 1 to 8 do
8647: LD_ADDR_VAR 0 1
8651: PUSH
8652: DOUBLE
8653: LD_INT 1
8655: DEC
8656: ST_TO_ADDR
8657: LD_INT 8
8659: PUSH
8660: FOR_TO
8661: IFFALSE 8688
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
8663: LD_ADDR_EXP 41
8667: PUSH
8668: LD_EXP 41
8672: PPUSH
8673: LD_VAR 0 1
8677: PPUSH
8678: LD_INT 0
8680: PPUSH
8681: CALL_OW 1
8685: ST_TO_ADDR
8686: GO 8660
8688: POP
8689: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
8690: LD_ADDR_VAR 0 3
8694: PUSH
8695: LD_INT 50
8697: PPUSH
8698: LD_INT 0
8700: PPUSH
8701: CALL_OW 517
8705: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
8706: LD_ADDR_VAR 0 1
8710: PUSH
8711: DOUBLE
8712: LD_INT 1
8714: DEC
8715: ST_TO_ADDR
8716: LD_VAR 0 3
8720: PUSH
8721: LD_INT 1
8723: ARRAY
8724: PUSH
8725: FOR_TO
8726: IFFALSE 8793
// for j := 1 to 8 do
8728: LD_ADDR_VAR 0 2
8732: PUSH
8733: DOUBLE
8734: LD_INT 1
8736: DEC
8737: ST_TO_ADDR
8738: LD_INT 8
8740: PUSH
8741: FOR_TO
8742: IFFALSE 8789
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
8744: LD_VAR 0 3
8748: PUSH
8749: LD_INT 1
8751: ARRAY
8752: PUSH
8753: LD_VAR 0 1
8757: ARRAY
8758: PPUSH
8759: LD_VAR 0 3
8763: PUSH
8764: LD_INT 2
8766: ARRAY
8767: PUSH
8768: LD_VAR 0 1
8772: ARRAY
8773: PPUSH
8774: LD_VAR 0 2
8778: PPUSH
8779: LD_INT 12
8781: NEG
8782: PPUSH
8783: CALL_OW 330
8787: GO 8741
8789: POP
8790: POP
8791: GO 8725
8793: POP
8794: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
8795: LD_EXP 31
8799: PPUSH
8800: LD_INT 1
8802: PPUSH
8803: CALL_OW 424
// UpdateCounter ;
8807: CALL 9413 0 0
// repeat wait ( 0 0$1 ) ;
8811: LD_INT 35
8813: PPUSH
8814: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8818: LD_ADDR_VAR 0 3
8822: PUSH
8823: LD_EXP 31
8827: PPUSH
8828: LD_INT 3
8830: PUSH
8831: LD_INT 57
8833: PUSH
8834: EMPTY
8835: LIST
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PUSH
8841: LD_INT 50
8843: PUSH
8844: EMPTY
8845: LIST
8846: PUSH
8847: LD_INT 2
8849: PUSH
8850: LD_INT 30
8852: PUSH
8853: LD_INT 0
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 30
8862: PUSH
8863: LD_INT 1
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: LIST
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: LIST
8879: PPUSH
8880: CALL_OW 70
8884: ST_TO_ADDR
// if not tmp then
8885: LD_VAR 0 3
8889: NOT
8890: IFFALSE 8894
// continue ;
8892: GO 8811
// AddPoints ( tmp ) ;
8894: LD_VAR 0 3
8898: PPUSH
8899: CALL 9091 0 1
// UpdateCounter ;
8903: CALL 9413 0 0
// until false ;
8907: LD_INT 0
8909: IFFALSE 8811
// end ;
8911: PPOPN 3
8913: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
8914: LD_EXP 36
8918: PUSH
8919: LD_EXP 34
8923: AND
8924: IFFALSE 9088
8926: GO 8928
8928: DISABLE
8929: LD_INT 0
8931: PPUSH
8932: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
8933: LD_ADDR_VAR 0 2
8937: PUSH
8938: LD_INT 50
8940: PPUSH
8941: LD_INT 0
8943: PPUSH
8944: CALL_OW 517
8948: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
8949: LD_ADDR_VAR 0 1
8953: PUSH
8954: DOUBLE
8955: LD_INT 1
8957: DEC
8958: ST_TO_ADDR
8959: LD_VAR 0 2
8963: PUSH
8964: LD_INT 1
8966: ARRAY
8967: PUSH
8968: FOR_TO
8969: IFFALSE 9010
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
8971: LD_VAR 0 2
8975: PUSH
8976: LD_INT 1
8978: ARRAY
8979: PUSH
8980: LD_VAR 0 1
8984: ARRAY
8985: PPUSH
8986: LD_VAR 0 2
8990: PUSH
8991: LD_INT 2
8993: ARRAY
8994: PUSH
8995: LD_VAR 0 1
8999: ARRAY
9000: PPUSH
9001: LD_INT 125
9003: PPUSH
9004: CALL_OW 495
9008: GO 8968
9010: POP
9011: POP
// repeat wait ( mpEmissions ) ;
9012: LD_EXP 34
9016: PPUSH
9017: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
9021: LD_ADDR_VAR 0 1
9025: PUSH
9026: DOUBLE
9027: LD_INT 1
9029: DEC
9030: ST_TO_ADDR
9031: LD_VAR 0 2
9035: PUSH
9036: LD_INT 1
9038: ARRAY
9039: PUSH
9040: FOR_TO
9041: IFFALSE 9082
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
9043: LD_VAR 0 2
9047: PUSH
9048: LD_INT 1
9050: ARRAY
9051: PUSH
9052: LD_VAR 0 1
9056: ARRAY
9057: PPUSH
9058: LD_VAR 0 2
9062: PUSH
9063: LD_INT 2
9065: ARRAY
9066: PUSH
9067: LD_VAR 0 1
9071: ARRAY
9072: PPUSH
9073: LD_INT 15
9075: PPUSH
9076: CALL_OW 495
9080: GO 9040
9082: POP
9083: POP
// until false ;
9084: LD_INT 0
9086: IFFALSE 9012
// end ;
9088: PPOPN 2
9090: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
9091: LD_INT 0
9093: PPUSH
9094: PPUSH
9095: PPUSH
9096: PPUSH
9097: PPUSH
// if mpTeamGame then
9098: LD_EXP 9
9102: IFFALSE 9299
// begin first := depots [ 1 ] ;
9104: LD_ADDR_VAR 0 4
9108: PUSH
9109: LD_VAR 0 1
9113: PUSH
9114: LD_INT 1
9116: ARRAY
9117: ST_TO_ADDR
// side := GetSide ( first ) ;
9118: LD_ADDR_VAR 0 6
9122: PUSH
9123: LD_VAR 0 4
9127: PPUSH
9128: CALL_OW 255
9132: ST_TO_ADDR
// for i := 1 to mpTeams do
9133: LD_ADDR_VAR 0 3
9137: PUSH
9138: DOUBLE
9139: LD_INT 1
9141: DEC
9142: ST_TO_ADDR
9143: LD_EXP 8
9147: PUSH
9148: FOR_TO
9149: IFFALSE 9183
// if side in mpTeams [ i ] then
9151: LD_VAR 0 6
9155: PUSH
9156: LD_EXP 8
9160: PUSH
9161: LD_VAR 0 3
9165: ARRAY
9166: IN
9167: IFFALSE 9181
// begin team := i ;
9169: LD_ADDR_VAR 0 5
9173: PUSH
9174: LD_VAR 0 3
9178: ST_TO_ADDR
// break ;
9179: GO 9183
// end ;
9181: GO 9148
9183: POP
9184: POP
// if not team then
9185: LD_VAR 0 5
9189: NOT
9190: IFFALSE 9194
// exit ;
9192: GO 9408
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
9194: LD_EXP 31
9198: PPUSH
9199: LD_INT 81
9201: PUSH
9202: LD_VAR 0 6
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PPUSH
9211: CALL_OW 70
9215: IFFALSE 9219
// exit ;
9217: GO 9408
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
9219: LD_ADDR_EXP 41
9223: PUSH
9224: LD_EXP 41
9228: PPUSH
9229: LD_VAR 0 5
9233: PPUSH
9234: LD_EXP 41
9238: PUSH
9239: LD_VAR 0 5
9243: ARRAY
9244: PUSH
9245: LD_INT 1
9247: PLUS
9248: PPUSH
9249: CALL_OW 1
9253: ST_TO_ADDR
// for i in mpTeams [ team ] do
9254: LD_ADDR_VAR 0 3
9258: PUSH
9259: LD_EXP 8
9263: PUSH
9264: LD_VAR 0 5
9268: ARRAY
9269: PUSH
9270: FOR_IN
9271: IFFALSE 9295
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
9273: LD_VAR 0 3
9277: PPUSH
9278: LD_EXP 41
9282: PUSH
9283: LD_VAR 0 5
9287: ARRAY
9288: PPUSH
9289: CALL_OW 506
9293: GO 9270
9295: POP
9296: POP
// end else
9297: GO 9408
// begin first := depots [ 1 ] ;
9299: LD_ADDR_VAR 0 4
9303: PUSH
9304: LD_VAR 0 1
9308: PUSH
9309: LD_INT 1
9311: ARRAY
9312: ST_TO_ADDR
// side := GetSide ( first ) ;
9313: LD_ADDR_VAR 0 6
9317: PUSH
9318: LD_VAR 0 4
9322: PPUSH
9323: CALL_OW 255
9327: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
9328: LD_EXP 31
9332: PPUSH
9333: LD_INT 81
9335: PUSH
9336: LD_VAR 0 6
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: PPUSH
9345: CALL_OW 70
9349: IFFALSE 9353
// exit ;
9351: GO 9408
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
9353: LD_ADDR_EXP 41
9357: PUSH
9358: LD_EXP 41
9362: PPUSH
9363: LD_VAR 0 6
9367: PPUSH
9368: LD_EXP 41
9372: PUSH
9373: LD_VAR 0 6
9377: ARRAY
9378: PUSH
9379: LD_INT 1
9381: PLUS
9382: PPUSH
9383: CALL_OW 1
9387: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
9388: LD_VAR 0 6
9392: PPUSH
9393: LD_EXP 41
9397: PUSH
9398: LD_VAR 0 6
9402: ARRAY
9403: PPUSH
9404: CALL_OW 506
// end ; end ;
9408: LD_VAR 0 2
9412: RET
// function UpdateCounter ; var i ; begin
9413: LD_INT 0
9415: PPUSH
9416: PPUSH
// result := [ ] ;
9417: LD_ADDR_VAR 0 1
9421: PUSH
9422: EMPTY
9423: ST_TO_ADDR
// if mpTeamGame then
9424: LD_EXP 9
9428: IFFALSE 9495
// begin for i := 1 to mpTeams do
9430: LD_ADDR_VAR 0 2
9434: PUSH
9435: DOUBLE
9436: LD_INT 1
9438: DEC
9439: ST_TO_ADDR
9440: LD_EXP 8
9444: PUSH
9445: FOR_TO
9446: IFFALSE 9491
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
9448: LD_ADDR_VAR 0 1
9452: PUSH
9453: LD_VAR 0 1
9457: PUSH
9458: LD_STRING #KingoftheHill-Team
9460: PUSH
9461: LD_VAR 0 2
9465: PUSH
9466: LD_EXP 41
9470: PUSH
9471: LD_VAR 0 2
9475: ARRAY
9476: PUSH
9477: LD_EXP 32
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: ADD
9488: ST_TO_ADDR
9489: GO 9445
9491: POP
9492: POP
// end else
9493: GO 9568
// begin for i := 1 to 8 do
9495: LD_ADDR_VAR 0 2
9499: PUSH
9500: DOUBLE
9501: LD_INT 1
9503: DEC
9504: ST_TO_ADDR
9505: LD_INT 8
9507: PUSH
9508: FOR_TO
9509: IFFALSE 9566
// if mpSidePositions [ i ] then
9511: LD_EXP 5
9515: PUSH
9516: LD_VAR 0 2
9520: ARRAY
9521: IFFALSE 9564
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
9523: LD_ADDR_VAR 0 1
9527: PUSH
9528: LD_VAR 0 1
9532: PUSH
9533: LD_STRING #KingoftheHill-Player
9535: PUSH
9536: LD_VAR 0 2
9540: PUSH
9541: LD_EXP 41
9545: PUSH
9546: LD_VAR 0 2
9550: ARRAY
9551: PUSH
9552: LD_EXP 32
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: ADD
9563: ST_TO_ADDR
9564: GO 9508
9566: POP
9567: POP
// end ; mpDisplayStrings := result ;
9568: LD_ADDR_EXP 35
9572: PUSH
9573: LD_VAR 0 1
9577: ST_TO_ADDR
// end ;
9578: LD_VAR 0 1
9582: RET
// export function HowMuchPointsKing ( side ) ; begin
9583: LD_INT 0
9585: PPUSH
// result := HowMuchPoints ( side ) ;
9586: LD_ADDR_VAR 0 2
9590: PUSH
9591: LD_VAR 0 1
9595: PPUSH
9596: CALL 9606 0 1
9600: ST_TO_ADDR
// end ;
9601: LD_VAR 0 2
9605: RET
// function HowMuchPoints ( side ) ; var i ; begin
9606: LD_INT 0
9608: PPUSH
9609: PPUSH
// if mpTeamGame then
9610: LD_EXP 9
9614: IFFALSE 9683
// begin for i := 1 to Count ( mpTeams ) do
9616: LD_ADDR_VAR 0 3
9620: PUSH
9621: DOUBLE
9622: LD_INT 1
9624: DEC
9625: ST_TO_ADDR
9626: LD_EXP 8
9630: PPUSH
9631: CALL 18442 0 1
9635: PUSH
9636: FOR_TO
9637: IFFALSE 9679
// begin if side in mpTeams [ i ] then
9639: LD_VAR 0 1
9643: PUSH
9644: LD_EXP 8
9648: PUSH
9649: LD_VAR 0 3
9653: ARRAY
9654: IN
9655: IFFALSE 9677
// begin result := mpKingPoints [ i ] ;
9657: LD_ADDR_VAR 0 2
9661: PUSH
9662: LD_EXP 41
9666: PUSH
9667: LD_VAR 0 3
9671: ARRAY
9672: ST_TO_ADDR
// exit ;
9673: POP
9674: POP
9675: GO 9699
// end ; end ;
9677: GO 9636
9679: POP
9680: POP
// end else
9681: GO 9699
// result := mpKingPoints [ side ] ;
9683: LD_ADDR_VAR 0 2
9687: PUSH
9688: LD_EXP 41
9692: PUSH
9693: LD_VAR 0 1
9697: ARRAY
9698: ST_TO_ADDR
// end ;
9699: LD_VAR 0 2
9703: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
9704: LD_EXP 36
9708: PUSH
9709: CALL 10031 0 0
9713: AND
9714: PUSH
9715: LD_OWVAR 4
9719: AND
9720: IFFALSE 9956
9722: GO 9724
9724: DISABLE
9725: LD_INT 0
9727: PPUSH
9728: PPUSH
// begin canWin := false ;
9729: LD_ADDR_VAR 0 2
9733: PUSH
9734: LD_INT 0
9736: ST_TO_ADDR
// if not HasPower ( your_side ) then
9737: LD_OWVAR 2
9741: PPUSH
9742: CALL 10071 0 1
9746: NOT
9747: IFFALSE 9758
// begin Multiplayer_Loose_Message ;
9749: CALL_OW 521
// enable ( mpLose ) ;
9753: LD_INT 102
9755: ENABLE_MARKED
// end else
9756: GO 9956
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
9758: LD_ADDR_VAR 0 2
9762: PUSH
9763: LD_OWVAR 2
9767: PPUSH
9768: CALL 9606 0 1
9772: PUSH
9773: LD_EXP 32
9777: GREATEREQUAL
9778: PUSH
9779: LD_OWVAR 2
9783: PPUSH
9784: CALL 10071 0 1
9788: AND
9789: PUSH
9790: CALL 9959 0 0
9794: NOT
9795: OR
9796: ST_TO_ADDR
// for i := 1 to 8 do
9797: LD_ADDR_VAR 0 1
9801: PUSH
9802: DOUBLE
9803: LD_INT 1
9805: DEC
9806: ST_TO_ADDR
9807: LD_INT 8
9809: PUSH
9810: FOR_TO
9811: IFFALSE 9942
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9813: LD_EXP 5
9817: PUSH
9818: LD_VAR 0 1
9822: ARRAY
9823: PUSH
9824: LD_VAR 0 1
9828: PPUSH
9829: CALL_OW 108
9833: AND
9834: PUSH
9835: LD_VAR 0 1
9839: PUSH
9840: LD_OWVAR 2
9844: NONEQUAL
9845: AND
9846: IFFALSE 9940
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9848: LD_EXP 6
9852: PUSH
9853: LD_VAR 0 1
9857: ARRAY
9858: NOT
9859: PUSH
9860: LD_EXP 6
9864: PUSH
9865: LD_VAR 0 1
9869: ARRAY
9870: PUSH
9871: LD_EXP 6
9875: PUSH
9876: LD_OWVAR 2
9880: ARRAY
9881: NONEQUAL
9882: PUSH
9883: LD_OWVAR 2
9887: PPUSH
9888: LD_VAR 0 1
9892: PPUSH
9893: CALL_OW 81
9897: PUSH
9898: LD_INT 1
9900: NONEQUAL
9901: AND
9902: OR
9903: IFFALSE 9940
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
9905: LD_VAR 0 1
9909: PPUSH
9910: CALL 9606 0 1
9914: PUSH
9915: LD_EXP 32
9919: GREATEREQUAL
9920: PUSH
9921: LD_VAR 0 1
9925: PPUSH
9926: CALL 10071 0 1
9930: AND
9931: IFFALSE 9940
// begin enable ( mpLose ) ;
9933: LD_INT 102
9935: ENABLE_MARKED
// exit ;
9936: POP
9937: POP
9938: GO 9956
// end ;
9940: GO 9810
9942: POP
9943: POP
// if canWin then
9944: LD_VAR 0 2
9948: IFFALSE 9955
// enable ( mpWin ) else
9950: LD_INT 101
9952: ENABLE_MARKED
9953: GO 9956
// enable ;
9955: ENABLE
// end ; end ;
9956: PPOPN 2
9958: END
// function EnemiesInGame ; var i ; begin
9959: LD_INT 0
9961: PPUSH
9962: PPUSH
// result := false ;
9963: LD_ADDR_VAR 0 1
9967: PUSH
9968: LD_INT 0
9970: ST_TO_ADDR
// for i := 1 to 8 do
9971: LD_ADDR_VAR 0 2
9975: PUSH
9976: DOUBLE
9977: LD_INT 1
9979: DEC
9980: ST_TO_ADDR
9981: LD_INT 8
9983: PUSH
9984: FOR_TO
9985: IFFALSE 10024
// if i <> your_side and HasPower ( i ) then
9987: LD_VAR 0 2
9991: PUSH
9992: LD_OWVAR 2
9996: NONEQUAL
9997: PUSH
9998: LD_VAR 0 2
10002: PPUSH
10003: CALL 10071 0 1
10007: AND
10008: IFFALSE 10022
// begin result := true ;
10010: LD_ADDR_VAR 0 1
10014: PUSH
10015: LD_INT 1
10017: ST_TO_ADDR
// exit ;
10018: POP
10019: POP
10020: GO 10026
// end ;
10022: GO 9984
10024: POP
10025: POP
// end ;
10026: LD_VAR 0 1
10030: RET
// function CanWinLoose ; begin
10031: LD_INT 0
10033: PPUSH
// result := true ;
10034: LD_ADDR_VAR 0 1
10038: PUSH
10039: LD_INT 1
10041: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10042: CALL_OW 531
10046: PUSH
10047: CALL_OW 519
10051: PUSH
10052: LD_INT 1
10054: GREATER
10055: AND
10056: IFFALSE 10066
// result := false ;
10058: LD_ADDR_VAR 0 1
10062: PUSH
10063: LD_INT 0
10065: ST_TO_ADDR
// end ;
10066: LD_VAR 0 1
10070: RET
// function HasPower ( i ) ; begin
10071: LD_INT 0
10073: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10074: LD_ADDR_VAR 0 2
10078: PUSH
10079: LD_INT 22
10081: PUSH
10082: LD_VAR 0 1
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PUSH
10091: LD_INT 2
10093: PUSH
10094: LD_INT 21
10096: PUSH
10097: LD_INT 1
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 33
10106: PUSH
10107: LD_INT 3
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 33
10116: PUSH
10117: LD_INT 5
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PPUSH
10134: CALL_OW 69
10138: ST_TO_ADDR
// end ; end_of_file
10139: LD_VAR 0 2
10143: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10144: LD_EXP 36
10148: PUSH
10149: CALL 10354 0 0
10153: AND
10154: PUSH
10155: LD_OWVAR 4
10159: AND
10160: IFFALSE 10351
10162: GO 10164
10164: DISABLE
10165: LD_INT 0
10167: PPUSH
10168: PPUSH
// begin canWin := false ;
10169: LD_ADDR_VAR 0 2
10173: PUSH
10174: LD_INT 0
10176: ST_TO_ADDR
// if not HasPower ( your_side ) then
10177: LD_OWVAR 2
10181: PPUSH
10182: CALL 10394 0 1
10186: NOT
10187: IFFALSE 10198
// begin Multiplayer_Loose_Message ;
10189: CALL_OW 521
// enable ( mpLose ) ;
10193: LD_INT 102
10195: ENABLE_MARKED
// end else
10196: GO 10351
// begin canWin := true ;
10198: LD_ADDR_VAR 0 2
10202: PUSH
10203: LD_INT 1
10205: ST_TO_ADDR
// for i := 1 to 8 do
10206: LD_ADDR_VAR 0 1
10210: PUSH
10211: DOUBLE
10212: LD_INT 1
10214: DEC
10215: ST_TO_ADDR
10216: LD_INT 8
10218: PUSH
10219: FOR_TO
10220: IFFALSE 10337
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10222: LD_EXP 5
10226: PUSH
10227: LD_VAR 0 1
10231: ARRAY
10232: PUSH
10233: LD_VAR 0 1
10237: PPUSH
10238: CALL_OW 108
10242: AND
10243: PUSH
10244: LD_VAR 0 1
10248: PUSH
10249: LD_OWVAR 2
10253: NONEQUAL
10254: AND
10255: IFFALSE 10335
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10257: LD_EXP 6
10261: PUSH
10262: LD_VAR 0 1
10266: ARRAY
10267: NOT
10268: PUSH
10269: LD_EXP 6
10273: PUSH
10274: LD_VAR 0 1
10278: ARRAY
10279: PUSH
10280: LD_EXP 6
10284: PUSH
10285: LD_OWVAR 2
10289: ARRAY
10290: NONEQUAL
10291: PUSH
10292: LD_OWVAR 2
10296: PPUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 81
10306: PUSH
10307: LD_INT 1
10309: NONEQUAL
10310: AND
10311: OR
10312: IFFALSE 10335
// if HasPower ( i ) then
10314: LD_VAR 0 1
10318: PPUSH
10319: CALL 10394 0 1
10323: IFFALSE 10335
// begin canWin := false ;
10325: LD_ADDR_VAR 0 2
10329: PUSH
10330: LD_INT 0
10332: ST_TO_ADDR
// break ;
10333: GO 10337
// end ;
10335: GO 10219
10337: POP
10338: POP
// if canWin then
10339: LD_VAR 0 2
10343: IFFALSE 10350
// enable ( mpWin ) else
10345: LD_INT 101
10347: ENABLE_MARKED
10348: GO 10351
// enable ;
10350: ENABLE
// end ; end ;
10351: PPOPN 2
10353: END
// function CanWinLoose ; begin
10354: LD_INT 0
10356: PPUSH
// result := true ;
10357: LD_ADDR_VAR 0 1
10361: PUSH
10362: LD_INT 1
10364: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10365: CALL_OW 531
10369: PUSH
10370: CALL_OW 519
10374: PUSH
10375: LD_INT 1
10377: GREATER
10378: AND
10379: IFFALSE 10389
// result := false ;
10381: LD_ADDR_VAR 0 1
10385: PUSH
10386: LD_INT 0
10388: ST_TO_ADDR
// end ;
10389: LD_VAR 0 1
10393: RET
// function HasPower ( i ) ; begin
10394: LD_INT 0
10396: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10397: LD_ADDR_VAR 0 2
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_VAR 0 1
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: LD_INT 2
10416: PUSH
10417: LD_INT 21
10419: PUSH
10420: LD_INT 1
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: LD_INT 33
10429: PUSH
10430: LD_INT 3
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PUSH
10437: LD_INT 33
10439: PUSH
10440: LD_INT 5
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PPUSH
10457: CALL_OW 69
10461: ST_TO_ADDR
// end ; end_of_file
10462: LD_VAR 0 2
10466: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10467: LD_EXP 36
10471: IFFALSE 10514
10473: GO 10475
10475: DISABLE
10476: LD_INT 0
10478: PPUSH
// begin for i := 1 to 8 do
10479: LD_ADDR_VAR 0 1
10483: PUSH
10484: DOUBLE
10485: LD_INT 1
10487: DEC
10488: ST_TO_ADDR
10489: LD_INT 8
10491: PUSH
10492: FOR_TO
10493: IFFALSE 10512
// SetRestrict ( b_depot , i , state_disabled ) ;
10495: LD_INT 0
10497: PPUSH
10498: LD_VAR 0 1
10502: PPUSH
10503: LD_INT 0
10505: PPUSH
10506: CALL_OW 324
10510: GO 10492
10512: POP
10513: POP
// end ;
10514: PPOPN 1
10516: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10517: LD_EXP 36
10521: PUSH
10522: CALL 10727 0 0
10526: AND
10527: PUSH
10528: LD_OWVAR 4
10532: AND
10533: IFFALSE 10724
10535: GO 10537
10537: DISABLE
10538: LD_INT 0
10540: PPUSH
10541: PPUSH
// begin canWin := false ;
10542: LD_ADDR_VAR 0 2
10546: PUSH
10547: LD_INT 0
10549: ST_TO_ADDR
// if not HasPower ( your_side ) then
10550: LD_OWVAR 2
10554: PPUSH
10555: CALL 10767 0 1
10559: NOT
10560: IFFALSE 10571
// begin Multiplayer_Loose_Message ;
10562: CALL_OW 521
// enable ( mpLose ) ;
10566: LD_INT 102
10568: ENABLE_MARKED
// end else
10569: GO 10724
// begin canWin := true ;
10571: LD_ADDR_VAR 0 2
10575: PUSH
10576: LD_INT 1
10578: ST_TO_ADDR
// for i := 1 to 8 do
10579: LD_ADDR_VAR 0 1
10583: PUSH
10584: DOUBLE
10585: LD_INT 1
10587: DEC
10588: ST_TO_ADDR
10589: LD_INT 8
10591: PUSH
10592: FOR_TO
10593: IFFALSE 10710
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10595: LD_EXP 5
10599: PUSH
10600: LD_VAR 0 1
10604: ARRAY
10605: PUSH
10606: LD_VAR 0 1
10610: PPUSH
10611: CALL_OW 108
10615: AND
10616: PUSH
10617: LD_VAR 0 1
10621: PUSH
10622: LD_OWVAR 2
10626: NONEQUAL
10627: AND
10628: IFFALSE 10708
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10630: LD_EXP 6
10634: PUSH
10635: LD_VAR 0 1
10639: ARRAY
10640: NOT
10641: PUSH
10642: LD_EXP 6
10646: PUSH
10647: LD_VAR 0 1
10651: ARRAY
10652: PUSH
10653: LD_EXP 6
10657: PUSH
10658: LD_OWVAR 2
10662: ARRAY
10663: NONEQUAL
10664: PUSH
10665: LD_OWVAR 2
10669: PPUSH
10670: LD_VAR 0 1
10674: PPUSH
10675: CALL_OW 81
10679: PUSH
10680: LD_INT 1
10682: NONEQUAL
10683: AND
10684: OR
10685: IFFALSE 10708
// if HasPower ( i ) then
10687: LD_VAR 0 1
10691: PPUSH
10692: CALL 10767 0 1
10696: IFFALSE 10708
// begin canWin := false ;
10698: LD_ADDR_VAR 0 2
10702: PUSH
10703: LD_INT 0
10705: ST_TO_ADDR
// break ;
10706: GO 10710
// end ;
10708: GO 10592
10710: POP
10711: POP
// if canWin then
10712: LD_VAR 0 2
10716: IFFALSE 10723
// enable ( mpWin ) else
10718: LD_INT 101
10720: ENABLE_MARKED
10721: GO 10724
// enable ;
10723: ENABLE
// end ; end ;
10724: PPOPN 2
10726: END
// function CanWinLoose ; begin
10727: LD_INT 0
10729: PPUSH
// result := true ;
10730: LD_ADDR_VAR 0 1
10734: PUSH
10735: LD_INT 1
10737: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10738: CALL_OW 531
10742: PUSH
10743: CALL_OW 519
10747: PUSH
10748: LD_INT 1
10750: GREATER
10751: AND
10752: IFFALSE 10762
// result := false ;
10754: LD_ADDR_VAR 0 1
10758: PUSH
10759: LD_INT 0
10761: ST_TO_ADDR
// end ;
10762: LD_VAR 0 1
10766: RET
// function HasPower ( i ) ; begin
10767: LD_INT 0
10769: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10770: LD_INT 22
10772: PUSH
10773: LD_VAR 0 1
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: LD_INT 2
10784: PUSH
10785: LD_INT 30
10787: PUSH
10788: LD_INT 0
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PUSH
10795: LD_INT 30
10797: PUSH
10798: LD_INT 1
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: LIST
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: CALL_OW 69
10818: NOT
10819: IFFALSE 10823
// exit ;
10821: GO 10888
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10823: LD_ADDR_VAR 0 2
10827: PUSH
10828: LD_INT 22
10830: PUSH
10831: LD_VAR 0 1
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 2
10842: PUSH
10843: LD_INT 21
10845: PUSH
10846: LD_INT 1
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 33
10855: PUSH
10856: LD_INT 3
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 33
10865: PUSH
10866: LD_INT 5
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PPUSH
10883: CALL_OW 69
10887: ST_TO_ADDR
// end ; end_of_file
10888: LD_VAR 0 2
10892: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
10893: LD_VAR 0 1
10897: PUSH
10898: LD_INT 200
10900: DOUBLE
10901: GREATEREQUAL
10902: IFFALSE 10910
10904: LD_INT 299
10906: DOUBLE
10907: LESSEQUAL
10908: IFTRUE 10912
10910: GO 10944
10912: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
10913: LD_VAR 0 1
10917: PPUSH
10918: LD_VAR 0 2
10922: PPUSH
10923: LD_VAR 0 3
10927: PPUSH
10928: LD_VAR 0 4
10932: PPUSH
10933: LD_VAR 0 5
10937: PPUSH
10938: CALL 11641 0 5
10942: GO 11021
10944: LD_INT 300
10946: DOUBLE
10947: GREATEREQUAL
10948: IFFALSE 10956
10950: LD_INT 399
10952: DOUBLE
10953: LESSEQUAL
10954: IFTRUE 10958
10956: GO 11020
10958: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
10959: LD_VAR 0 1
10963: PPUSH
10964: LD_VAR 0 2
10968: PPUSH
10969: LD_VAR 0 3
10973: PPUSH
10974: LD_VAR 0 4
10978: PPUSH
10979: LD_VAR 0 5
10983: PPUSH
10984: LD_VAR 0 6
10988: PPUSH
10989: LD_VAR 0 7
10993: PPUSH
10994: LD_VAR 0 8
10998: PPUSH
10999: LD_VAR 0 9
11003: PPUSH
11004: LD_VAR 0 10
11008: PPUSH
11009: LD_VAR 0 11
11013: PPUSH
11014: CALL 59183 0 11
11018: GO 11021
11020: POP
// end ;
11021: PPOPN 11
11023: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
11024: LD_VAR 0 1
11028: PPUSH
11029: LD_VAR 0 2
11033: PPUSH
11034: LD_VAR 0 3
11038: PPUSH
11039: LD_VAR 0 4
11043: PPUSH
11044: LD_VAR 0 5
11048: PPUSH
11049: CALL 11106 0 5
// end ; end_of_file
11053: PPOPN 5
11055: END
// export function SOS_UnitDestroyed ( un ) ; begin
11056: LD_INT 0
11058: PPUSH
// ComRadiation ( un ) ;
11059: LD_VAR 0 1
11063: PPUSH
11064: CALL 12045 0 1
// end ;
11068: LD_VAR 0 2
11072: RET
// export function SOS_UnitKamikazed ( un ) ; begin
11073: LD_INT 0
11075: PPUSH
// ComRadiation ( un ) ;
11076: LD_VAR 0 1
11080: PPUSH
11081: CALL 12045 0 1
// end ;
11085: LD_VAR 0 2
11089: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
11090: LD_INT 0
11092: PPUSH
// end ;
11093: LD_VAR 0 4
11097: RET
// export function SOS_Command ( cmd ) ; begin
11098: LD_INT 0
11100: PPUSH
// end ;
11101: LD_VAR 0 2
11105: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
11106: LD_INT 0
11108: PPUSH
// end ;
11109: LD_VAR 0 6
11113: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
11114: LD_INT 0
11116: PPUSH
11117: PPUSH
11118: PPUSH
11119: PPUSH
11120: PPUSH
// if not vehicle or not factory then
11121: LD_VAR 0 1
11125: NOT
11126: PUSH
11127: LD_VAR 0 2
11131: NOT
11132: OR
11133: IFFALSE 11137
// exit ;
11135: GO 11636
// if not factoryWaypoints then
11137: LD_EXP 52
11141: NOT
11142: IFFALSE 11146
// exit ;
11144: GO 11636
// for i := 1 to Count ( factoryWaypoints ) do
11146: LD_ADDR_VAR 0 4
11150: PUSH
11151: DOUBLE
11152: LD_INT 1
11154: DEC
11155: ST_TO_ADDR
11156: LD_EXP 52
11160: PPUSH
11161: CALL 18442 0 1
11165: PUSH
11166: FOR_TO
11167: IFFALSE 11634
// if factoryWaypoints [ i ] [ 2 ] = factory then
11169: LD_EXP 52
11173: PUSH
11174: LD_VAR 0 4
11178: ARRAY
11179: PUSH
11180: LD_INT 2
11182: ARRAY
11183: PUSH
11184: LD_VAR 0 2
11188: EQUAL
11189: IFFALSE 11632
// begin if GetControl ( vehicle ) = control_manual then
11191: LD_VAR 0 1
11195: PPUSH
11196: CALL_OW 263
11200: PUSH
11201: LD_INT 1
11203: EQUAL
11204: IFFALSE 11515
// begin driver := IsDrivenBy ( vehicle ) ;
11206: LD_ADDR_VAR 0 6
11210: PUSH
11211: LD_VAR 0 1
11215: PPUSH
11216: CALL_OW 311
11220: ST_TO_ADDR
// tag := GetTag ( driver ) ;
11221: LD_ADDR_VAR 0 5
11225: PUSH
11226: LD_VAR 0 6
11230: PPUSH
11231: CALL_OW 110
11235: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
11236: LD_VAR 0 5
11240: PUSH
11241: LD_INT 501
11243: EQUAL
11244: PUSH
11245: LD_VAR 0 1
11249: PPUSH
11250: CALL_OW 110
11254: PUSH
11255: LD_INT 501
11257: EQUAL
11258: OR
11259: IFFALSE 11265
// exit ;
11261: POP
11262: POP
11263: GO 11636
// if not HasTask ( driver ) then
11265: LD_VAR 0 6
11269: PPUSH
11270: CALL_OW 314
11274: NOT
11275: IFFALSE 11513
// begin SetTag ( driver , tDriver ) ;
11277: LD_VAR 0 6
11281: PPUSH
11282: LD_INT 501
11284: PPUSH
11285: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
11289: LD_VAR 0 1
11293: PPUSH
11294: LD_INT 501
11296: PPUSH
11297: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11301: LD_ADDR_VAR 0 7
11305: PUSH
11306: LD_EXP 52
11310: PUSH
11311: LD_VAR 0 4
11315: ARRAY
11316: PUSH
11317: LD_INT 3
11319: ARRAY
11320: PPUSH
11321: LD_EXP 52
11325: PUSH
11326: LD_VAR 0 4
11330: ARRAY
11331: PUSH
11332: LD_INT 4
11334: ARRAY
11335: PPUSH
11336: CALL_OW 428
11340: ST_TO_ADDR
// if hex then
11341: LD_VAR 0 7
11345: IFFALSE 11363
// ComMoveUnit ( driver , hex ) else
11347: LD_VAR 0 6
11351: PPUSH
11352: LD_VAR 0 7
11356: PPUSH
11357: CALL_OW 112
11361: GO 11402
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11363: LD_VAR 0 6
11367: PPUSH
11368: LD_EXP 52
11372: PUSH
11373: LD_VAR 0 4
11377: ARRAY
11378: PUSH
11379: LD_INT 3
11381: ARRAY
11382: PPUSH
11383: LD_EXP 52
11387: PUSH
11388: LD_VAR 0 4
11392: ARRAY
11393: PUSH
11394: LD_INT 4
11396: ARRAY
11397: PPUSH
11398: CALL_OW 111
// AddComExitVehicle ( driver ) ;
11402: LD_VAR 0 6
11406: PPUSH
11407: CALL_OW 181
// if Multiplayer then
11411: LD_OWVAR 4
11415: IFFALSE 11464
// begin repeat wait ( 10 ) ;
11417: LD_INT 10
11419: PPUSH
11420: CALL_OW 67
// until not IsInUnit ( driver ) ;
11424: LD_VAR 0 6
11428: PPUSH
11429: CALL_OW 310
11433: NOT
11434: IFFALSE 11417
// if not HasTask ( driver ) then
11436: LD_VAR 0 6
11440: PPUSH
11441: CALL_OW 314
11445: NOT
11446: IFFALSE 11462
// ComEnterUnit ( driver , factory ) ;
11448: LD_VAR 0 6
11452: PPUSH
11453: LD_VAR 0 2
11457: PPUSH
11458: CALL_OW 120
// end else
11462: GO 11478
// AddComEnterUnit ( driver , factory ) ;
11464: LD_VAR 0 6
11468: PPUSH
11469: LD_VAR 0 2
11473: PPUSH
11474: CALL_OW 180
// wait ( 0 0$1 ) ;
11478: LD_INT 35
11480: PPUSH
11481: CALL_OW 67
// SetTag ( driver , tag ) ;
11485: LD_VAR 0 6
11489: PPUSH
11490: LD_VAR 0 5
11494: PPUSH
11495: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
11499: LD_VAR 0 1
11503: PPUSH
11504: LD_INT 0
11506: PPUSH
11507: CALL_OW 109
// break ;
11511: GO 11634
// end ; end else
11513: GO 11632
// if GetControl ( vehicle ) = control_remote then
11515: LD_VAR 0 1
11519: PPUSH
11520: CALL_OW 263
11524: PUSH
11525: LD_INT 2
11527: EQUAL
11528: IFFALSE 11591
// begin wait ( 0 0$2 ) ;
11530: LD_INT 70
11532: PPUSH
11533: CALL_OW 67
// if Connect ( vehicle ) then
11537: LD_VAR 0 1
11541: PPUSH
11542: CALL 24648 0 1
11546: IFFALSE 11587
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11548: LD_VAR 0 1
11552: PPUSH
11553: LD_EXP 52
11557: PUSH
11558: LD_VAR 0 4
11562: ARRAY
11563: PUSH
11564: LD_INT 3
11566: ARRAY
11567: PPUSH
11568: LD_EXP 52
11572: PUSH
11573: LD_VAR 0 4
11577: ARRAY
11578: PUSH
11579: LD_INT 4
11581: ARRAY
11582: PPUSH
11583: CALL_OW 171
// break ;
11587: GO 11634
// end else
11589: GO 11632
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11591: LD_VAR 0 1
11595: PPUSH
11596: LD_EXP 52
11600: PUSH
11601: LD_VAR 0 4
11605: ARRAY
11606: PUSH
11607: LD_INT 3
11609: ARRAY
11610: PPUSH
11611: LD_EXP 52
11615: PUSH
11616: LD_VAR 0 4
11620: ARRAY
11621: PUSH
11622: LD_INT 4
11624: ARRAY
11625: PPUSH
11626: CALL_OW 171
// break ;
11630: GO 11634
// end ; end ;
11632: GO 11166
11634: POP
11635: POP
// end ;
11636: LD_VAR 0 3
11640: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11641: LD_INT 0
11643: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11644: LD_VAR 0 1
11648: PUSH
11649: LD_INT 250
11651: EQUAL
11652: PUSH
11653: LD_VAR 0 2
11657: PPUSH
11658: CALL_OW 264
11662: PUSH
11663: LD_INT 81
11665: EQUAL
11666: AND
11667: IFFALSE 11688
// MinerPlaceMine ( unit , x , y ) ;
11669: LD_VAR 0 2
11673: PPUSH
11674: LD_VAR 0 4
11678: PPUSH
11679: LD_VAR 0 5
11683: PPUSH
11684: CALL 14780 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11688: LD_VAR 0 1
11692: PUSH
11693: LD_INT 251
11695: EQUAL
11696: PUSH
11697: LD_VAR 0 2
11701: PPUSH
11702: CALL_OW 264
11706: PUSH
11707: LD_INT 81
11709: EQUAL
11710: AND
11711: IFFALSE 11732
// MinerDetonateMine ( unit , x , y ) ;
11713: LD_VAR 0 2
11717: PPUSH
11718: LD_VAR 0 4
11722: PPUSH
11723: LD_VAR 0 5
11727: PPUSH
11728: CALL 15055 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11732: LD_VAR 0 1
11736: PUSH
11737: LD_INT 252
11739: EQUAL
11740: PUSH
11741: LD_VAR 0 2
11745: PPUSH
11746: CALL_OW 264
11750: PUSH
11751: LD_INT 81
11753: EQUAL
11754: AND
11755: IFFALSE 11776
// MinerCreateMinefield ( unit , x , y ) ;
11757: LD_VAR 0 2
11761: PPUSH
11762: LD_VAR 0 4
11766: PPUSH
11767: LD_VAR 0 5
11771: PPUSH
11772: CALL 15472 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11776: LD_VAR 0 1
11780: PUSH
11781: LD_INT 253
11783: EQUAL
11784: PUSH
11785: LD_VAR 0 2
11789: PPUSH
11790: CALL_OW 257
11794: PUSH
11795: LD_INT 5
11797: EQUAL
11798: AND
11799: IFFALSE 11820
// ComBinocular ( unit , x , y ) ;
11801: LD_VAR 0 2
11805: PPUSH
11806: LD_VAR 0 4
11810: PPUSH
11811: LD_VAR 0 5
11815: PPUSH
11816: CALL 15841 0 3
// if selectedUnit then
11820: LD_VAR 0 3
11824: IFFALSE 11880
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11826: LD_VAR 0 1
11830: PUSH
11831: LD_INT 254
11833: EQUAL
11834: PUSH
11835: LD_VAR 0 2
11839: PPUSH
11840: CALL_OW 264
11844: PUSH
11845: LD_INT 99
11847: EQUAL
11848: AND
11849: PUSH
11850: LD_VAR 0 3
11854: PPUSH
11855: CALL_OW 263
11859: PUSH
11860: LD_INT 3
11862: EQUAL
11863: AND
11864: IFFALSE 11880
// HackDestroyVehicle ( unit , selectedUnit ) ;
11866: LD_VAR 0 2
11870: PPUSH
11871: LD_VAR 0 3
11875: PPUSH
11876: CALL 14144 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11880: LD_VAR 0 1
11884: PUSH
11885: LD_INT 255
11887: EQUAL
11888: PUSH
11889: LD_VAR 0 2
11893: PPUSH
11894: CALL_OW 264
11898: PUSH
11899: LD_INT 14
11901: PUSH
11902: LD_INT 53
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: IN
11909: AND
11910: PUSH
11911: LD_VAR 0 4
11915: PPUSH
11916: LD_VAR 0 5
11920: PPUSH
11921: CALL_OW 488
11925: AND
11926: IFFALSE 11950
// CutTreeXYR ( unit , x , y , 12 ) ;
11928: LD_VAR 0 2
11932: PPUSH
11933: LD_VAR 0 4
11937: PPUSH
11938: LD_VAR 0 5
11942: PPUSH
11943: LD_INT 12
11945: PPUSH
11946: CALL 12141 0 4
// if cmd = 256 then
11950: LD_VAR 0 1
11954: PUSH
11955: LD_INT 256
11957: EQUAL
11958: IFFALSE 11979
// SetFactoryWaypoint ( unit , x , y ) ;
11960: LD_VAR 0 2
11964: PPUSH
11965: LD_VAR 0 4
11969: PPUSH
11970: LD_VAR 0 5
11974: PPUSH
11975: CALL 59191 0 3
// if cmd = 257 then
11979: LD_VAR 0 1
11983: PUSH
11984: LD_INT 257
11986: EQUAL
11987: IFFALSE 12008
// SetWarehouseGatheringPoint ( unit , x , y ) ;
11989: LD_VAR 0 2
11993: PPUSH
11994: LD_VAR 0 4
11998: PPUSH
11999: LD_VAR 0 5
12003: PPUSH
12004: CALL 59681 0 3
// if cmd = 258 then
12008: LD_VAR 0 1
12012: PUSH
12013: LD_INT 258
12015: EQUAL
12016: IFFALSE 12040
// BurnTreeXYR ( unit , x , y , 8 ) ;
12018: LD_VAR 0 2
12022: PPUSH
12023: LD_VAR 0 4
12027: PPUSH
12028: LD_VAR 0 5
12032: PPUSH
12033: LD_INT 8
12035: PPUSH
12036: CALL 12535 0 4
// end ;
12040: LD_VAR 0 6
12044: RET
// export function ComRadiation ( un ) ; var eff ; begin
12045: LD_INT 0
12047: PPUSH
12048: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
12049: LD_VAR 0 1
12053: PPUSH
12054: CALL_OW 264
12058: PUSH
12059: LD_INT 91
12061: NONEQUAL
12062: IFFALSE 12066
// exit ;
12064: GO 12136
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
12066: LD_INT 68
12068: PPUSH
12069: LD_VAR 0 1
12073: PPUSH
12074: CALL_OW 255
12078: PPUSH
12079: CALL_OW 321
12083: PUSH
12084: LD_INT 2
12086: EQUAL
12087: IFFALSE 12099
// eff := 70 else
12089: LD_ADDR_VAR 0 3
12093: PUSH
12094: LD_INT 70
12096: ST_TO_ADDR
12097: GO 12107
// eff := 30 ;
12099: LD_ADDR_VAR 0 3
12103: PUSH
12104: LD_INT 30
12106: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
12107: LD_VAR 0 1
12111: PPUSH
12112: CALL_OW 250
12116: PPUSH
12117: LD_VAR 0 1
12121: PPUSH
12122: CALL_OW 251
12126: PPUSH
12127: LD_VAR 0 3
12131: PPUSH
12132: CALL_OW 495
// end ;
12136: LD_VAR 0 2
12140: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
12141: LD_INT 0
12143: PPUSH
12144: PPUSH
12145: PPUSH
12146: PPUSH
12147: PPUSH
12148: PPUSH
12149: PPUSH
12150: PPUSH
12151: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
12152: LD_VAR 0 1
12156: PPUSH
12157: CALL_OW 302
12161: NOT
12162: PUSH
12163: LD_VAR 0 2
12167: PPUSH
12168: LD_VAR 0 3
12172: PPUSH
12173: CALL_OW 488
12177: NOT
12178: OR
12179: PUSH
12180: LD_VAR 0 4
12184: NOT
12185: OR
12186: IFFALSE 12190
// exit ;
12188: GO 12530
// list := [ ] ;
12190: LD_ADDR_VAR 0 13
12194: PUSH
12195: EMPTY
12196: ST_TO_ADDR
// if x - r < 0 then
12197: LD_VAR 0 2
12201: PUSH
12202: LD_VAR 0 4
12206: MINUS
12207: PUSH
12208: LD_INT 0
12210: LESS
12211: IFFALSE 12223
// min_x := 0 else
12213: LD_ADDR_VAR 0 7
12217: PUSH
12218: LD_INT 0
12220: ST_TO_ADDR
12221: GO 12239
// min_x := x - r ;
12223: LD_ADDR_VAR 0 7
12227: PUSH
12228: LD_VAR 0 2
12232: PUSH
12233: LD_VAR 0 4
12237: MINUS
12238: ST_TO_ADDR
// if y - r < 0 then
12239: LD_VAR 0 3
12243: PUSH
12244: LD_VAR 0 4
12248: MINUS
12249: PUSH
12250: LD_INT 0
12252: LESS
12253: IFFALSE 12265
// min_y := 0 else
12255: LD_ADDR_VAR 0 8
12259: PUSH
12260: LD_INT 0
12262: ST_TO_ADDR
12263: GO 12281
// min_y := y - r ;
12265: LD_ADDR_VAR 0 8
12269: PUSH
12270: LD_VAR 0 3
12274: PUSH
12275: LD_VAR 0 4
12279: MINUS
12280: ST_TO_ADDR
// max_x := x + r ;
12281: LD_ADDR_VAR 0 9
12285: PUSH
12286: LD_VAR 0 2
12290: PUSH
12291: LD_VAR 0 4
12295: PLUS
12296: ST_TO_ADDR
// max_y := y + r ;
12297: LD_ADDR_VAR 0 10
12301: PUSH
12302: LD_VAR 0 3
12306: PUSH
12307: LD_VAR 0 4
12311: PLUS
12312: ST_TO_ADDR
// for _x = min_x to max_x do
12313: LD_ADDR_VAR 0 11
12317: PUSH
12318: DOUBLE
12319: LD_VAR 0 7
12323: DEC
12324: ST_TO_ADDR
12325: LD_VAR 0 9
12329: PUSH
12330: FOR_TO
12331: IFFALSE 12448
// for _y = min_y to max_y do
12333: LD_ADDR_VAR 0 12
12337: PUSH
12338: DOUBLE
12339: LD_VAR 0 8
12343: DEC
12344: ST_TO_ADDR
12345: LD_VAR 0 10
12349: PUSH
12350: FOR_TO
12351: IFFALSE 12444
// begin if not ValidHex ( _x , _y ) then
12353: LD_VAR 0 11
12357: PPUSH
12358: LD_VAR 0 12
12362: PPUSH
12363: CALL_OW 488
12367: NOT
12368: IFFALSE 12372
// continue ;
12370: GO 12350
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12372: LD_VAR 0 11
12376: PPUSH
12377: LD_VAR 0 12
12381: PPUSH
12382: CALL_OW 351
12386: PUSH
12387: LD_VAR 0 11
12391: PPUSH
12392: LD_VAR 0 12
12396: PPUSH
12397: CALL_OW 554
12401: AND
12402: IFFALSE 12442
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12404: LD_ADDR_VAR 0 13
12408: PUSH
12409: LD_VAR 0 13
12413: PPUSH
12414: LD_VAR 0 13
12418: PUSH
12419: LD_INT 1
12421: PLUS
12422: PPUSH
12423: LD_VAR 0 11
12427: PUSH
12428: LD_VAR 0 12
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PPUSH
12437: CALL_OW 2
12441: ST_TO_ADDR
// end ;
12442: GO 12350
12444: POP
12445: POP
12446: GO 12330
12448: POP
12449: POP
// if not list then
12450: LD_VAR 0 13
12454: NOT
12455: IFFALSE 12459
// exit ;
12457: GO 12530
// for i in list do
12459: LD_ADDR_VAR 0 6
12463: PUSH
12464: LD_VAR 0 13
12468: PUSH
12469: FOR_IN
12470: IFFALSE 12528
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
12472: LD_VAR 0 1
12476: PPUSH
12477: LD_STRING M
12479: PUSH
12480: LD_VAR 0 6
12484: PUSH
12485: LD_INT 1
12487: ARRAY
12488: PUSH
12489: LD_VAR 0 6
12493: PUSH
12494: LD_INT 2
12496: ARRAY
12497: PUSH
12498: LD_INT 0
12500: PUSH
12501: LD_INT 0
12503: PUSH
12504: LD_INT 0
12506: PUSH
12507: LD_INT 0
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: PUSH
12519: EMPTY
12520: LIST
12521: PPUSH
12522: CALL_OW 447
12526: GO 12469
12528: POP
12529: POP
// end ;
12530: LD_VAR 0 5
12534: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
12535: LD_INT 0
12537: PPUSH
12538: PPUSH
12539: PPUSH
12540: PPUSH
12541: PPUSH
12542: PPUSH
12543: PPUSH
12544: PPUSH
12545: PPUSH
12546: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
12547: LD_VAR 0 1
12551: PPUSH
12552: CALL_OW 302
12556: NOT
12557: PUSH
12558: LD_VAR 0 2
12562: PPUSH
12563: LD_VAR 0 3
12567: PPUSH
12568: CALL_OW 488
12572: NOT
12573: OR
12574: PUSH
12575: LD_VAR 0 4
12579: NOT
12580: OR
12581: IFFALSE 12585
// exit ;
12583: GO 13098
// list := [ ] ;
12585: LD_ADDR_VAR 0 13
12589: PUSH
12590: EMPTY
12591: ST_TO_ADDR
// if x - r < 0 then
12592: LD_VAR 0 2
12596: PUSH
12597: LD_VAR 0 4
12601: MINUS
12602: PUSH
12603: LD_INT 0
12605: LESS
12606: IFFALSE 12618
// min_x := 0 else
12608: LD_ADDR_VAR 0 7
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
12616: GO 12634
// min_x := x - r ;
12618: LD_ADDR_VAR 0 7
12622: PUSH
12623: LD_VAR 0 2
12627: PUSH
12628: LD_VAR 0 4
12632: MINUS
12633: ST_TO_ADDR
// if y - r < 0 then
12634: LD_VAR 0 3
12638: PUSH
12639: LD_VAR 0 4
12643: MINUS
12644: PUSH
12645: LD_INT 0
12647: LESS
12648: IFFALSE 12660
// min_y := 0 else
12650: LD_ADDR_VAR 0 8
12654: PUSH
12655: LD_INT 0
12657: ST_TO_ADDR
12658: GO 12676
// min_y := y - r ;
12660: LD_ADDR_VAR 0 8
12664: PUSH
12665: LD_VAR 0 3
12669: PUSH
12670: LD_VAR 0 4
12674: MINUS
12675: ST_TO_ADDR
// max_x := x + r ;
12676: LD_ADDR_VAR 0 9
12680: PUSH
12681: LD_VAR 0 2
12685: PUSH
12686: LD_VAR 0 4
12690: PLUS
12691: ST_TO_ADDR
// max_y := y + r ;
12692: LD_ADDR_VAR 0 10
12696: PUSH
12697: LD_VAR 0 3
12701: PUSH
12702: LD_VAR 0 4
12706: PLUS
12707: ST_TO_ADDR
// for _x = min_x to max_x do
12708: LD_ADDR_VAR 0 11
12712: PUSH
12713: DOUBLE
12714: LD_VAR 0 7
12718: DEC
12719: ST_TO_ADDR
12720: LD_VAR 0 9
12724: PUSH
12725: FOR_TO
12726: IFFALSE 12843
// for _y = min_y to max_y do
12728: LD_ADDR_VAR 0 12
12732: PUSH
12733: DOUBLE
12734: LD_VAR 0 8
12738: DEC
12739: ST_TO_ADDR
12740: LD_VAR 0 10
12744: PUSH
12745: FOR_TO
12746: IFFALSE 12839
// begin if not ValidHex ( _x , _y ) then
12748: LD_VAR 0 11
12752: PPUSH
12753: LD_VAR 0 12
12757: PPUSH
12758: CALL_OW 488
12762: NOT
12763: IFFALSE 12767
// continue ;
12765: GO 12745
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12767: LD_VAR 0 11
12771: PPUSH
12772: LD_VAR 0 12
12776: PPUSH
12777: CALL_OW 351
12781: PUSH
12782: LD_VAR 0 11
12786: PPUSH
12787: LD_VAR 0 12
12791: PPUSH
12792: CALL_OW 554
12796: AND
12797: IFFALSE 12837
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12799: LD_ADDR_VAR 0 13
12803: PUSH
12804: LD_VAR 0 13
12808: PPUSH
12809: LD_VAR 0 13
12813: PUSH
12814: LD_INT 1
12816: PLUS
12817: PPUSH
12818: LD_VAR 0 11
12822: PUSH
12823: LD_VAR 0 12
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PPUSH
12832: CALL_OW 2
12836: ST_TO_ADDR
// end ;
12837: GO 12745
12839: POP
12840: POP
12841: GO 12725
12843: POP
12844: POP
// if not list then
12845: LD_VAR 0 13
12849: NOT
12850: IFFALSE 12854
// exit ;
12852: GO 13098
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
12854: LD_ADDR_VAR 0 13
12858: PUSH
12859: LD_VAR 0 1
12863: PPUSH
12864: LD_VAR 0 13
12868: PPUSH
12869: LD_INT 1
12871: PPUSH
12872: LD_INT 1
12874: PPUSH
12875: CALL 21790 0 4
12879: ST_TO_ADDR
// ComStop ( flame ) ;
12880: LD_VAR 0 1
12884: PPUSH
12885: CALL_OW 141
// for i in list do
12889: LD_ADDR_VAR 0 6
12893: PUSH
12894: LD_VAR 0 13
12898: PUSH
12899: FOR_IN
12900: IFFALSE 12931
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
12902: LD_VAR 0 1
12906: PPUSH
12907: LD_VAR 0 6
12911: PUSH
12912: LD_INT 1
12914: ARRAY
12915: PPUSH
12916: LD_VAR 0 6
12920: PUSH
12921: LD_INT 2
12923: ARRAY
12924: PPUSH
12925: CALL_OW 176
12929: GO 12899
12931: POP
12932: POP
// repeat wait ( 0 0$1 ) ;
12933: LD_INT 35
12935: PPUSH
12936: CALL_OW 67
// task := GetTaskList ( flame ) ;
12940: LD_ADDR_VAR 0 14
12944: PUSH
12945: LD_VAR 0 1
12949: PPUSH
12950: CALL_OW 437
12954: ST_TO_ADDR
// if not task then
12955: LD_VAR 0 14
12959: NOT
12960: IFFALSE 12964
// exit ;
12962: GO 13098
// if task [ 1 ] [ 1 ] <> | then
12964: LD_VAR 0 14
12968: PUSH
12969: LD_INT 1
12971: ARRAY
12972: PUSH
12973: LD_INT 1
12975: ARRAY
12976: PUSH
12977: LD_STRING |
12979: NONEQUAL
12980: IFFALSE 12984
// exit ;
12982: GO 13098
// _x := task [ 1 ] [ 2 ] ;
12984: LD_ADDR_VAR 0 11
12988: PUSH
12989: LD_VAR 0 14
12993: PUSH
12994: LD_INT 1
12996: ARRAY
12997: PUSH
12998: LD_INT 2
13000: ARRAY
13001: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
13002: LD_ADDR_VAR 0 12
13006: PUSH
13007: LD_VAR 0 14
13011: PUSH
13012: LD_INT 1
13014: ARRAY
13015: PUSH
13016: LD_INT 3
13018: ARRAY
13019: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
13020: LD_VAR 0 11
13024: PPUSH
13025: LD_VAR 0 12
13029: PPUSH
13030: CALL_OW 351
13034: NOT
13035: PUSH
13036: LD_VAR 0 11
13040: PPUSH
13041: LD_VAR 0 12
13045: PPUSH
13046: CALL_OW 554
13050: NOT
13051: OR
13052: IFFALSE 13086
// begin task := Delete ( task , 1 ) ;
13054: LD_ADDR_VAR 0 14
13058: PUSH
13059: LD_VAR 0 14
13063: PPUSH
13064: LD_INT 1
13066: PPUSH
13067: CALL_OW 3
13071: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
13072: LD_VAR 0 1
13076: PPUSH
13077: LD_VAR 0 14
13081: PPUSH
13082: CALL_OW 446
// end ; until not HasTask ( flame ) ;
13086: LD_VAR 0 1
13090: PPUSH
13091: CALL_OW 314
13095: NOT
13096: IFFALSE 12933
// end ;
13098: LD_VAR 0 5
13102: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
13103: LD_EXP 42
13107: NOT
13108: IFFALSE 13158
13110: GO 13112
13112: DISABLE
// begin initHack := true ;
13113: LD_ADDR_EXP 42
13117: PUSH
13118: LD_INT 1
13120: ST_TO_ADDR
// hackTanks := [ ] ;
13121: LD_ADDR_EXP 43
13125: PUSH
13126: EMPTY
13127: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
13128: LD_ADDR_EXP 44
13132: PUSH
13133: EMPTY
13134: ST_TO_ADDR
// hackLimit := 3 ;
13135: LD_ADDR_EXP 45
13139: PUSH
13140: LD_INT 3
13142: ST_TO_ADDR
// hackDist := 12 ;
13143: LD_ADDR_EXP 46
13147: PUSH
13148: LD_INT 12
13150: ST_TO_ADDR
// hackCounter := [ ] ;
13151: LD_ADDR_EXP 47
13155: PUSH
13156: EMPTY
13157: ST_TO_ADDR
// end ;
13158: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
13159: LD_EXP 42
13163: PUSH
13164: LD_INT 34
13166: PUSH
13167: LD_INT 99
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PPUSH
13174: CALL_OW 69
13178: AND
13179: IFFALSE 13432
13181: GO 13183
13183: DISABLE
13184: LD_INT 0
13186: PPUSH
13187: PPUSH
// begin enable ;
13188: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
13189: LD_ADDR_VAR 0 1
13193: PUSH
13194: LD_INT 34
13196: PUSH
13197: LD_INT 99
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PPUSH
13204: CALL_OW 69
13208: PUSH
13209: FOR_IN
13210: IFFALSE 13430
// begin if not i in hackTanks then
13212: LD_VAR 0 1
13216: PUSH
13217: LD_EXP 43
13221: IN
13222: NOT
13223: IFFALSE 13306
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
13225: LD_ADDR_EXP 43
13229: PUSH
13230: LD_EXP 43
13234: PPUSH
13235: LD_EXP 43
13239: PUSH
13240: LD_INT 1
13242: PLUS
13243: PPUSH
13244: LD_VAR 0 1
13248: PPUSH
13249: CALL_OW 1
13253: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
13254: LD_ADDR_EXP 44
13258: PUSH
13259: LD_EXP 44
13263: PPUSH
13264: LD_EXP 44
13268: PUSH
13269: LD_INT 1
13271: PLUS
13272: PPUSH
13273: EMPTY
13274: PPUSH
13275: CALL_OW 1
13279: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
13280: LD_ADDR_EXP 47
13284: PUSH
13285: LD_EXP 47
13289: PPUSH
13290: LD_EXP 47
13294: PUSH
13295: LD_INT 1
13297: PLUS
13298: PPUSH
13299: EMPTY
13300: PPUSH
13301: CALL_OW 1
13305: ST_TO_ADDR
// end ; if not IsOk ( i ) then
13306: LD_VAR 0 1
13310: PPUSH
13311: CALL_OW 302
13315: NOT
13316: IFFALSE 13329
// begin HackUnlinkAll ( i ) ;
13318: LD_VAR 0 1
13322: PPUSH
13323: CALL 13435 0 1
// continue ;
13327: GO 13209
// end ; HackCheckCapturedStatus ( i ) ;
13329: LD_VAR 0 1
13333: PPUSH
13334: CALL 13878 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
13338: LD_ADDR_VAR 0 2
13342: PUSH
13343: LD_INT 81
13345: PUSH
13346: LD_VAR 0 1
13350: PPUSH
13351: CALL_OW 255
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PUSH
13360: LD_INT 33
13362: PUSH
13363: LD_INT 3
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 91
13372: PUSH
13373: LD_VAR 0 1
13377: PUSH
13378: LD_EXP 46
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 50
13390: PUSH
13391: EMPTY
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: PPUSH
13400: CALL_OW 69
13404: ST_TO_ADDR
// if not tmp then
13405: LD_VAR 0 2
13409: NOT
13410: IFFALSE 13414
// continue ;
13412: GO 13209
// HackLink ( i , tmp ) ;
13414: LD_VAR 0 1
13418: PPUSH
13419: LD_VAR 0 2
13423: PPUSH
13424: CALL 13571 0 2
// end ;
13428: GO 13209
13430: POP
13431: POP
// end ;
13432: PPOPN 2
13434: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
13435: LD_INT 0
13437: PPUSH
13438: PPUSH
13439: PPUSH
// if not hack in hackTanks then
13440: LD_VAR 0 1
13444: PUSH
13445: LD_EXP 43
13449: IN
13450: NOT
13451: IFFALSE 13455
// exit ;
13453: GO 13566
// index := GetElementIndex ( hackTanks , hack ) ;
13455: LD_ADDR_VAR 0 4
13459: PUSH
13460: LD_EXP 43
13464: PPUSH
13465: LD_VAR 0 1
13469: PPUSH
13470: CALL 21087 0 2
13474: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
13475: LD_EXP 44
13479: PUSH
13480: LD_VAR 0 4
13484: ARRAY
13485: IFFALSE 13566
// begin for i in hackTanksCaptured [ index ] do
13487: LD_ADDR_VAR 0 3
13491: PUSH
13492: LD_EXP 44
13496: PUSH
13497: LD_VAR 0 4
13501: ARRAY
13502: PUSH
13503: FOR_IN
13504: IFFALSE 13530
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
13506: LD_VAR 0 3
13510: PUSH
13511: LD_INT 1
13513: ARRAY
13514: PPUSH
13515: LD_VAR 0 3
13519: PUSH
13520: LD_INT 2
13522: ARRAY
13523: PPUSH
13524: CALL_OW 235
13528: GO 13503
13530: POP
13531: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
13532: LD_ADDR_EXP 44
13536: PUSH
13537: LD_EXP 44
13541: PPUSH
13542: LD_VAR 0 4
13546: PPUSH
13547: EMPTY
13548: PPUSH
13549: CALL_OW 1
13553: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
13554: LD_VAR 0 1
13558: PPUSH
13559: LD_INT 0
13561: PPUSH
13562: CALL_OW 505
// end ; end ;
13566: LD_VAR 0 2
13570: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
13571: LD_INT 0
13573: PPUSH
13574: PPUSH
13575: PPUSH
// if not hack in hackTanks or not vehicles then
13576: LD_VAR 0 1
13580: PUSH
13581: LD_EXP 43
13585: IN
13586: NOT
13587: PUSH
13588: LD_VAR 0 2
13592: NOT
13593: OR
13594: IFFALSE 13598
// exit ;
13596: GO 13873
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
13598: LD_ADDR_VAR 0 2
13602: PUSH
13603: LD_VAR 0 1
13607: PPUSH
13608: LD_VAR 0 2
13612: PPUSH
13613: LD_INT 1
13615: PPUSH
13616: LD_INT 1
13618: PPUSH
13619: CALL 21737 0 4
13623: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
13624: LD_ADDR_VAR 0 5
13628: PUSH
13629: LD_EXP 43
13633: PPUSH
13634: LD_VAR 0 1
13638: PPUSH
13639: CALL 21087 0 2
13643: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
13644: LD_EXP 44
13648: PUSH
13649: LD_VAR 0 5
13653: ARRAY
13654: PUSH
13655: LD_EXP 45
13659: LESS
13660: IFFALSE 13849
// begin for i := 1 to vehicles do
13662: LD_ADDR_VAR 0 4
13666: PUSH
13667: DOUBLE
13668: LD_INT 1
13670: DEC
13671: ST_TO_ADDR
13672: LD_VAR 0 2
13676: PUSH
13677: FOR_TO
13678: IFFALSE 13847
// begin if hackTanksCaptured [ index ] = hackLimit then
13680: LD_EXP 44
13684: PUSH
13685: LD_VAR 0 5
13689: ARRAY
13690: PUSH
13691: LD_EXP 45
13695: EQUAL
13696: IFFALSE 13700
// break ;
13698: GO 13847
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
13700: LD_ADDR_EXP 47
13704: PUSH
13705: LD_EXP 47
13709: PPUSH
13710: LD_VAR 0 5
13714: PPUSH
13715: LD_EXP 47
13719: PUSH
13720: LD_VAR 0 5
13724: ARRAY
13725: PUSH
13726: LD_INT 1
13728: PLUS
13729: PPUSH
13730: CALL_OW 1
13734: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
13735: LD_ADDR_EXP 44
13739: PUSH
13740: LD_EXP 44
13744: PPUSH
13745: LD_VAR 0 5
13749: PUSH
13750: LD_EXP 44
13754: PUSH
13755: LD_VAR 0 5
13759: ARRAY
13760: PUSH
13761: LD_INT 1
13763: PLUS
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PPUSH
13769: LD_VAR 0 2
13773: PUSH
13774: LD_VAR 0 4
13778: ARRAY
13779: PUSH
13780: LD_VAR 0 2
13784: PUSH
13785: LD_VAR 0 4
13789: ARRAY
13790: PPUSH
13791: CALL_OW 255
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PPUSH
13800: CALL 21302 0 3
13804: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
13805: LD_VAR 0 2
13809: PUSH
13810: LD_VAR 0 4
13814: ARRAY
13815: PPUSH
13816: LD_VAR 0 1
13820: PPUSH
13821: CALL_OW 255
13825: PPUSH
13826: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
13830: LD_VAR 0 2
13834: PUSH
13835: LD_VAR 0 4
13839: ARRAY
13840: PPUSH
13841: CALL_OW 141
// end ;
13845: GO 13677
13847: POP
13848: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13849: LD_VAR 0 1
13853: PPUSH
13854: LD_EXP 44
13858: PUSH
13859: LD_VAR 0 5
13863: ARRAY
13864: PUSH
13865: LD_INT 0
13867: PLUS
13868: PPUSH
13869: CALL_OW 505
// end ;
13873: LD_VAR 0 3
13877: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
13878: LD_INT 0
13880: PPUSH
13881: PPUSH
13882: PPUSH
13883: PPUSH
// if not hack in hackTanks then
13884: LD_VAR 0 1
13888: PUSH
13889: LD_EXP 43
13893: IN
13894: NOT
13895: IFFALSE 13899
// exit ;
13897: GO 14139
// index := GetElementIndex ( hackTanks , hack ) ;
13899: LD_ADDR_VAR 0 4
13903: PUSH
13904: LD_EXP 43
13908: PPUSH
13909: LD_VAR 0 1
13913: PPUSH
13914: CALL 21087 0 2
13918: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
13919: LD_ADDR_VAR 0 3
13923: PUSH
13924: DOUBLE
13925: LD_EXP 44
13929: PUSH
13930: LD_VAR 0 4
13934: ARRAY
13935: INC
13936: ST_TO_ADDR
13937: LD_INT 1
13939: PUSH
13940: FOR_DOWNTO
13941: IFFALSE 14113
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
13943: LD_ADDR_VAR 0 5
13947: PUSH
13948: LD_EXP 44
13952: PUSH
13953: LD_VAR 0 4
13957: ARRAY
13958: PUSH
13959: LD_VAR 0 3
13963: ARRAY
13964: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
13965: LD_VAR 0 5
13969: PUSH
13970: LD_INT 1
13972: ARRAY
13973: PPUSH
13974: CALL_OW 302
13978: NOT
13979: PUSH
13980: LD_VAR 0 5
13984: PUSH
13985: LD_INT 1
13987: ARRAY
13988: PPUSH
13989: CALL_OW 255
13993: PUSH
13994: LD_VAR 0 1
13998: PPUSH
13999: CALL_OW 255
14003: NONEQUAL
14004: OR
14005: IFFALSE 14111
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
14007: LD_VAR 0 5
14011: PUSH
14012: LD_INT 1
14014: ARRAY
14015: PPUSH
14016: CALL_OW 305
14020: PUSH
14021: LD_VAR 0 5
14025: PUSH
14026: LD_INT 1
14028: ARRAY
14029: PPUSH
14030: CALL_OW 255
14034: PUSH
14035: LD_VAR 0 1
14039: PPUSH
14040: CALL_OW 255
14044: EQUAL
14045: AND
14046: IFFALSE 14070
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
14048: LD_VAR 0 5
14052: PUSH
14053: LD_INT 1
14055: ARRAY
14056: PPUSH
14057: LD_VAR 0 5
14061: PUSH
14062: LD_INT 2
14064: ARRAY
14065: PPUSH
14066: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
14070: LD_ADDR_EXP 44
14074: PUSH
14075: LD_EXP 44
14079: PPUSH
14080: LD_VAR 0 4
14084: PPUSH
14085: LD_EXP 44
14089: PUSH
14090: LD_VAR 0 4
14094: ARRAY
14095: PPUSH
14096: LD_VAR 0 3
14100: PPUSH
14101: CALL_OW 3
14105: PPUSH
14106: CALL_OW 1
14110: ST_TO_ADDR
// end ; end ;
14111: GO 13940
14113: POP
14114: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
14115: LD_VAR 0 1
14119: PPUSH
14120: LD_EXP 44
14124: PUSH
14125: LD_VAR 0 4
14129: ARRAY
14130: PUSH
14131: LD_INT 0
14133: PLUS
14134: PPUSH
14135: CALL_OW 505
// end ;
14139: LD_VAR 0 2
14143: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
14144: LD_INT 0
14146: PPUSH
14147: PPUSH
14148: PPUSH
14149: PPUSH
// if not hack in hackTanks then
14150: LD_VAR 0 1
14154: PUSH
14155: LD_EXP 43
14159: IN
14160: NOT
14161: IFFALSE 14165
// exit ;
14163: GO 14250
// index := GetElementIndex ( hackTanks , hack ) ;
14165: LD_ADDR_VAR 0 5
14169: PUSH
14170: LD_EXP 43
14174: PPUSH
14175: LD_VAR 0 1
14179: PPUSH
14180: CALL 21087 0 2
14184: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
14185: LD_ADDR_VAR 0 4
14189: PUSH
14190: DOUBLE
14191: LD_INT 1
14193: DEC
14194: ST_TO_ADDR
14195: LD_EXP 44
14199: PUSH
14200: LD_VAR 0 5
14204: ARRAY
14205: PUSH
14206: FOR_TO
14207: IFFALSE 14248
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
14209: LD_EXP 44
14213: PUSH
14214: LD_VAR 0 5
14218: ARRAY
14219: PUSH
14220: LD_VAR 0 4
14224: ARRAY
14225: PUSH
14226: LD_INT 1
14228: ARRAY
14229: PUSH
14230: LD_VAR 0 2
14234: EQUAL
14235: IFFALSE 14246
// KillUnit ( vehicle ) ;
14237: LD_VAR 0 2
14241: PPUSH
14242: CALL_OW 66
14246: GO 14206
14248: POP
14249: POP
// end ;
14250: LD_VAR 0 3
14254: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
14255: LD_EXP 48
14259: NOT
14260: IFFALSE 14295
14262: GO 14264
14264: DISABLE
// begin initMiner := true ;
14265: LD_ADDR_EXP 48
14269: PUSH
14270: LD_INT 1
14272: ST_TO_ADDR
// minersList := [ ] ;
14273: LD_ADDR_EXP 49
14277: PUSH
14278: EMPTY
14279: ST_TO_ADDR
// minerMinesList := [ ] ;
14280: LD_ADDR_EXP 50
14284: PUSH
14285: EMPTY
14286: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
14287: LD_ADDR_EXP 51
14291: PUSH
14292: LD_INT 5
14294: ST_TO_ADDR
// end ;
14295: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
14296: LD_EXP 48
14300: PUSH
14301: LD_INT 34
14303: PUSH
14304: LD_INT 81
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PPUSH
14311: CALL_OW 69
14315: AND
14316: IFFALSE 14777
14318: GO 14320
14320: DISABLE
14321: LD_INT 0
14323: PPUSH
14324: PPUSH
14325: PPUSH
14326: PPUSH
// begin enable ;
14327: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
14328: LD_ADDR_VAR 0 1
14332: PUSH
14333: LD_INT 34
14335: PUSH
14336: LD_INT 81
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PPUSH
14343: CALL_OW 69
14347: PUSH
14348: FOR_IN
14349: IFFALSE 14421
// begin if not i in minersList then
14351: LD_VAR 0 1
14355: PUSH
14356: LD_EXP 49
14360: IN
14361: NOT
14362: IFFALSE 14419
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
14364: LD_ADDR_EXP 49
14368: PUSH
14369: LD_EXP 49
14373: PPUSH
14374: LD_EXP 49
14378: PUSH
14379: LD_INT 1
14381: PLUS
14382: PPUSH
14383: LD_VAR 0 1
14387: PPUSH
14388: CALL_OW 1
14392: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
14393: LD_ADDR_EXP 50
14397: PUSH
14398: LD_EXP 50
14402: PPUSH
14403: LD_EXP 50
14407: PUSH
14408: LD_INT 1
14410: PLUS
14411: PPUSH
14412: EMPTY
14413: PPUSH
14414: CALL_OW 1
14418: ST_TO_ADDR
// end end ;
14419: GO 14348
14421: POP
14422: POP
// for i := minerMinesList downto 1 do
14423: LD_ADDR_VAR 0 1
14427: PUSH
14428: DOUBLE
14429: LD_EXP 50
14433: INC
14434: ST_TO_ADDR
14435: LD_INT 1
14437: PUSH
14438: FOR_DOWNTO
14439: IFFALSE 14775
// begin if IsLive ( minersList [ i ] ) then
14441: LD_EXP 49
14445: PUSH
14446: LD_VAR 0 1
14450: ARRAY
14451: PPUSH
14452: CALL_OW 300
14456: IFFALSE 14484
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
14458: LD_EXP 49
14462: PUSH
14463: LD_VAR 0 1
14467: ARRAY
14468: PPUSH
14469: LD_EXP 50
14473: PUSH
14474: LD_VAR 0 1
14478: ARRAY
14479: PPUSH
14480: CALL_OW 505
// if not minerMinesList [ i ] then
14484: LD_EXP 50
14488: PUSH
14489: LD_VAR 0 1
14493: ARRAY
14494: NOT
14495: IFFALSE 14499
// continue ;
14497: GO 14438
// for j := minerMinesList [ i ] downto 1 do
14499: LD_ADDR_VAR 0 2
14503: PUSH
14504: DOUBLE
14505: LD_EXP 50
14509: PUSH
14510: LD_VAR 0 1
14514: ARRAY
14515: INC
14516: ST_TO_ADDR
14517: LD_INT 1
14519: PUSH
14520: FOR_DOWNTO
14521: IFFALSE 14771
// begin side := GetSide ( minersList [ i ] ) ;
14523: LD_ADDR_VAR 0 3
14527: PUSH
14528: LD_EXP 49
14532: PUSH
14533: LD_VAR 0 1
14537: ARRAY
14538: PPUSH
14539: CALL_OW 255
14543: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
14544: LD_ADDR_VAR 0 4
14548: PUSH
14549: LD_EXP 50
14553: PUSH
14554: LD_VAR 0 1
14558: ARRAY
14559: PUSH
14560: LD_VAR 0 2
14564: ARRAY
14565: PUSH
14566: LD_INT 1
14568: ARRAY
14569: PPUSH
14570: LD_EXP 50
14574: PUSH
14575: LD_VAR 0 1
14579: ARRAY
14580: PUSH
14581: LD_VAR 0 2
14585: ARRAY
14586: PUSH
14587: LD_INT 2
14589: ARRAY
14590: PPUSH
14591: CALL_OW 428
14595: ST_TO_ADDR
// if not tmp then
14596: LD_VAR 0 4
14600: NOT
14601: IFFALSE 14605
// continue ;
14603: GO 14520
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
14605: LD_VAR 0 4
14609: PUSH
14610: LD_INT 81
14612: PUSH
14613: LD_VAR 0 3
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PPUSH
14622: CALL_OW 69
14626: IN
14627: PUSH
14628: LD_EXP 50
14632: PUSH
14633: LD_VAR 0 1
14637: ARRAY
14638: PUSH
14639: LD_VAR 0 2
14643: ARRAY
14644: PUSH
14645: LD_INT 1
14647: ARRAY
14648: PPUSH
14649: LD_EXP 50
14653: PUSH
14654: LD_VAR 0 1
14658: ARRAY
14659: PUSH
14660: LD_VAR 0 2
14664: ARRAY
14665: PUSH
14666: LD_INT 2
14668: ARRAY
14669: PPUSH
14670: CALL_OW 458
14674: AND
14675: IFFALSE 14769
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
14677: LD_EXP 50
14681: PUSH
14682: LD_VAR 0 1
14686: ARRAY
14687: PUSH
14688: LD_VAR 0 2
14692: ARRAY
14693: PUSH
14694: LD_INT 1
14696: ARRAY
14697: PPUSH
14698: LD_EXP 50
14702: PUSH
14703: LD_VAR 0 1
14707: ARRAY
14708: PUSH
14709: LD_VAR 0 2
14713: ARRAY
14714: PUSH
14715: LD_INT 2
14717: ARRAY
14718: PPUSH
14719: LD_VAR 0 3
14723: PPUSH
14724: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
14728: LD_ADDR_EXP 50
14732: PUSH
14733: LD_EXP 50
14737: PPUSH
14738: LD_VAR 0 1
14742: PPUSH
14743: LD_EXP 50
14747: PUSH
14748: LD_VAR 0 1
14752: ARRAY
14753: PPUSH
14754: LD_VAR 0 2
14758: PPUSH
14759: CALL_OW 3
14763: PPUSH
14764: CALL_OW 1
14768: ST_TO_ADDR
// end ; end ;
14769: GO 14520
14771: POP
14772: POP
// end ;
14773: GO 14438
14775: POP
14776: POP
// end ;
14777: PPOPN 4
14779: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
14780: LD_INT 0
14782: PPUSH
14783: PPUSH
// result := false ;
14784: LD_ADDR_VAR 0 4
14788: PUSH
14789: LD_INT 0
14791: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
14792: LD_VAR 0 1
14796: PPUSH
14797: CALL_OW 264
14801: PUSH
14802: LD_INT 81
14804: EQUAL
14805: NOT
14806: IFFALSE 14810
// exit ;
14808: GO 15050
// index := GetElementIndex ( minersList , unit ) ;
14810: LD_ADDR_VAR 0 5
14814: PUSH
14815: LD_EXP 49
14819: PPUSH
14820: LD_VAR 0 1
14824: PPUSH
14825: CALL 21087 0 2
14829: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
14830: LD_EXP 50
14834: PUSH
14835: LD_VAR 0 5
14839: ARRAY
14840: PUSH
14841: LD_EXP 51
14845: GREATEREQUAL
14846: IFFALSE 14850
// exit ;
14848: GO 15050
// ComMoveXY ( unit , x , y ) ;
14850: LD_VAR 0 1
14854: PPUSH
14855: LD_VAR 0 2
14859: PPUSH
14860: LD_VAR 0 3
14864: PPUSH
14865: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14869: LD_INT 35
14871: PPUSH
14872: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
14876: LD_VAR 0 1
14880: PPUSH
14881: LD_VAR 0 2
14885: PPUSH
14886: LD_VAR 0 3
14890: PPUSH
14891: CALL 52848 0 3
14895: NOT
14896: PUSH
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 314
14906: AND
14907: IFFALSE 14911
// exit ;
14909: GO 15050
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
14911: LD_VAR 0 2
14915: PPUSH
14916: LD_VAR 0 3
14920: PPUSH
14921: CALL_OW 428
14925: PUSH
14926: LD_VAR 0 1
14930: EQUAL
14931: PUSH
14932: LD_VAR 0 1
14936: PPUSH
14937: CALL_OW 314
14941: NOT
14942: AND
14943: IFFALSE 14869
// PlaySoundXY ( x , y , PlantMine ) ;
14945: LD_VAR 0 2
14949: PPUSH
14950: LD_VAR 0 3
14954: PPUSH
14955: LD_STRING PlantMine
14957: PPUSH
14958: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
14962: LD_VAR 0 2
14966: PPUSH
14967: LD_VAR 0 3
14971: PPUSH
14972: LD_VAR 0 1
14976: PPUSH
14977: CALL_OW 255
14981: PPUSH
14982: LD_INT 0
14984: PPUSH
14985: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
14989: LD_ADDR_EXP 50
14993: PUSH
14994: LD_EXP 50
14998: PPUSH
14999: LD_VAR 0 5
15003: PUSH
15004: LD_EXP 50
15008: PUSH
15009: LD_VAR 0 5
15013: ARRAY
15014: PUSH
15015: LD_INT 1
15017: PLUS
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PPUSH
15023: LD_VAR 0 2
15027: PUSH
15028: LD_VAR 0 3
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PPUSH
15037: CALL 21302 0 3
15041: ST_TO_ADDR
// result := true ;
15042: LD_ADDR_VAR 0 4
15046: PUSH
15047: LD_INT 1
15049: ST_TO_ADDR
// end ;
15050: LD_VAR 0 4
15054: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
15055: LD_INT 0
15057: PPUSH
15058: PPUSH
15059: PPUSH
// if not unit in minersList then
15060: LD_VAR 0 1
15064: PUSH
15065: LD_EXP 49
15069: IN
15070: NOT
15071: IFFALSE 15075
// exit ;
15073: GO 15467
// index := GetElementIndex ( minersList , unit ) ;
15075: LD_ADDR_VAR 0 6
15079: PUSH
15080: LD_EXP 49
15084: PPUSH
15085: LD_VAR 0 1
15089: PPUSH
15090: CALL 21087 0 2
15094: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
15095: LD_ADDR_VAR 0 5
15099: PUSH
15100: DOUBLE
15101: LD_EXP 50
15105: PUSH
15106: LD_VAR 0 6
15110: ARRAY
15111: INC
15112: ST_TO_ADDR
15113: LD_INT 1
15115: PUSH
15116: FOR_DOWNTO
15117: IFFALSE 15278
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
15119: LD_EXP 50
15123: PUSH
15124: LD_VAR 0 6
15128: ARRAY
15129: PUSH
15130: LD_VAR 0 5
15134: ARRAY
15135: PUSH
15136: LD_INT 1
15138: ARRAY
15139: PUSH
15140: LD_VAR 0 2
15144: EQUAL
15145: PUSH
15146: LD_EXP 50
15150: PUSH
15151: LD_VAR 0 6
15155: ARRAY
15156: PUSH
15157: LD_VAR 0 5
15161: ARRAY
15162: PUSH
15163: LD_INT 2
15165: ARRAY
15166: PUSH
15167: LD_VAR 0 3
15171: EQUAL
15172: AND
15173: IFFALSE 15276
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
15175: LD_EXP 50
15179: PUSH
15180: LD_VAR 0 6
15184: ARRAY
15185: PUSH
15186: LD_VAR 0 5
15190: ARRAY
15191: PUSH
15192: LD_INT 1
15194: ARRAY
15195: PPUSH
15196: LD_EXP 50
15200: PUSH
15201: LD_VAR 0 6
15205: ARRAY
15206: PUSH
15207: LD_VAR 0 5
15211: ARRAY
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: LD_VAR 0 1
15221: PPUSH
15222: CALL_OW 255
15226: PPUSH
15227: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
15231: LD_ADDR_EXP 50
15235: PUSH
15236: LD_EXP 50
15240: PPUSH
15241: LD_VAR 0 6
15245: PPUSH
15246: LD_EXP 50
15250: PUSH
15251: LD_VAR 0 6
15255: ARRAY
15256: PPUSH
15257: LD_VAR 0 5
15261: PPUSH
15262: CALL_OW 3
15266: PPUSH
15267: CALL_OW 1
15271: ST_TO_ADDR
// exit ;
15272: POP
15273: POP
15274: GO 15467
// end ; end ;
15276: GO 15116
15278: POP
15279: POP
// for i := minerMinesList [ index ] downto 1 do
15280: LD_ADDR_VAR 0 5
15284: PUSH
15285: DOUBLE
15286: LD_EXP 50
15290: PUSH
15291: LD_VAR 0 6
15295: ARRAY
15296: INC
15297: ST_TO_ADDR
15298: LD_INT 1
15300: PUSH
15301: FOR_DOWNTO
15302: IFFALSE 15465
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
15304: LD_EXP 50
15308: PUSH
15309: LD_VAR 0 6
15313: ARRAY
15314: PUSH
15315: LD_VAR 0 5
15319: ARRAY
15320: PUSH
15321: LD_INT 1
15323: ARRAY
15324: PPUSH
15325: LD_EXP 50
15329: PUSH
15330: LD_VAR 0 6
15334: ARRAY
15335: PUSH
15336: LD_VAR 0 5
15340: ARRAY
15341: PUSH
15342: LD_INT 2
15344: ARRAY
15345: PPUSH
15346: LD_VAR 0 2
15350: PPUSH
15351: LD_VAR 0 3
15355: PPUSH
15356: CALL_OW 298
15360: PUSH
15361: LD_INT 6
15363: LESS
15364: IFFALSE 15463
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
15366: LD_EXP 50
15370: PUSH
15371: LD_VAR 0 6
15375: ARRAY
15376: PUSH
15377: LD_VAR 0 5
15381: ARRAY
15382: PUSH
15383: LD_INT 1
15385: ARRAY
15386: PPUSH
15387: LD_EXP 50
15391: PUSH
15392: LD_VAR 0 6
15396: ARRAY
15397: PUSH
15398: LD_VAR 0 5
15402: ARRAY
15403: PUSH
15404: LD_INT 2
15406: ARRAY
15407: PPUSH
15408: LD_VAR 0 1
15412: PPUSH
15413: CALL_OW 255
15417: PPUSH
15418: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
15422: LD_ADDR_EXP 50
15426: PUSH
15427: LD_EXP 50
15431: PPUSH
15432: LD_VAR 0 6
15436: PPUSH
15437: LD_EXP 50
15441: PUSH
15442: LD_VAR 0 6
15446: ARRAY
15447: PPUSH
15448: LD_VAR 0 5
15452: PPUSH
15453: CALL_OW 3
15457: PPUSH
15458: CALL_OW 1
15462: ST_TO_ADDR
// end ; end ;
15463: GO 15301
15465: POP
15466: POP
// end ;
15467: LD_VAR 0 4
15471: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
15472: LD_INT 0
15474: PPUSH
15475: PPUSH
15476: PPUSH
15477: PPUSH
15478: PPUSH
15479: PPUSH
15480: PPUSH
15481: PPUSH
15482: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
15483: LD_VAR 0 1
15487: PPUSH
15488: CALL_OW 264
15492: PUSH
15493: LD_INT 81
15495: EQUAL
15496: NOT
15497: PUSH
15498: LD_VAR 0 1
15502: PUSH
15503: LD_EXP 49
15507: IN
15508: NOT
15509: OR
15510: IFFALSE 15514
// exit ;
15512: GO 15836
// index := GetElementIndex ( minersList , unit ) ;
15514: LD_ADDR_VAR 0 6
15518: PUSH
15519: LD_EXP 49
15523: PPUSH
15524: LD_VAR 0 1
15528: PPUSH
15529: CALL 21087 0 2
15533: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
15534: LD_ADDR_VAR 0 8
15538: PUSH
15539: LD_EXP 51
15543: PUSH
15544: LD_EXP 50
15548: PUSH
15549: LD_VAR 0 6
15553: ARRAY
15554: MINUS
15555: ST_TO_ADDR
// if not minesFreeAmount then
15556: LD_VAR 0 8
15560: NOT
15561: IFFALSE 15565
// exit ;
15563: GO 15836
// tmp := [ ] ;
15565: LD_ADDR_VAR 0 7
15569: PUSH
15570: EMPTY
15571: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
15572: LD_ADDR_VAR 0 5
15576: PUSH
15577: DOUBLE
15578: LD_INT 1
15580: DEC
15581: ST_TO_ADDR
15582: LD_VAR 0 8
15586: PUSH
15587: FOR_TO
15588: IFFALSE 15783
// begin _d := rand ( 0 , 5 ) ;
15590: LD_ADDR_VAR 0 11
15594: PUSH
15595: LD_INT 0
15597: PPUSH
15598: LD_INT 5
15600: PPUSH
15601: CALL_OW 12
15605: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
15606: LD_ADDR_VAR 0 12
15610: PUSH
15611: LD_INT 2
15613: PPUSH
15614: LD_INT 6
15616: PPUSH
15617: CALL_OW 12
15621: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
15622: LD_ADDR_VAR 0 9
15626: PUSH
15627: LD_VAR 0 2
15631: PPUSH
15632: LD_VAR 0 11
15636: PPUSH
15637: LD_VAR 0 12
15641: PPUSH
15642: CALL_OW 272
15646: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
15647: LD_ADDR_VAR 0 10
15651: PUSH
15652: LD_VAR 0 3
15656: PPUSH
15657: LD_VAR 0 11
15661: PPUSH
15662: LD_VAR 0 12
15666: PPUSH
15667: CALL_OW 273
15671: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
15672: LD_VAR 0 9
15676: PPUSH
15677: LD_VAR 0 10
15681: PPUSH
15682: CALL_OW 488
15686: PUSH
15687: LD_VAR 0 9
15691: PUSH
15692: LD_VAR 0 10
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_VAR 0 7
15705: IN
15706: NOT
15707: AND
15708: PUSH
15709: LD_VAR 0 9
15713: PPUSH
15714: LD_VAR 0 10
15718: PPUSH
15719: CALL_OW 458
15723: NOT
15724: AND
15725: IFFALSE 15767
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
15727: LD_ADDR_VAR 0 7
15731: PUSH
15732: LD_VAR 0 7
15736: PPUSH
15737: LD_VAR 0 7
15741: PUSH
15742: LD_INT 1
15744: PLUS
15745: PPUSH
15746: LD_VAR 0 9
15750: PUSH
15751: LD_VAR 0 10
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: PPUSH
15760: CALL_OW 1
15764: ST_TO_ADDR
15765: GO 15781
// i := i - 1 ;
15767: LD_ADDR_VAR 0 5
15771: PUSH
15772: LD_VAR 0 5
15776: PUSH
15777: LD_INT 1
15779: MINUS
15780: ST_TO_ADDR
// end ;
15781: GO 15587
15783: POP
15784: POP
// for i in tmp do
15785: LD_ADDR_VAR 0 5
15789: PUSH
15790: LD_VAR 0 7
15794: PUSH
15795: FOR_IN
15796: IFFALSE 15834
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
15798: LD_VAR 0 1
15802: PPUSH
15803: LD_VAR 0 5
15807: PUSH
15808: LD_INT 1
15810: ARRAY
15811: PPUSH
15812: LD_VAR 0 5
15816: PUSH
15817: LD_INT 2
15819: ARRAY
15820: PPUSH
15821: CALL 14780 0 3
15825: NOT
15826: IFFALSE 15832
// exit ;
15828: POP
15829: POP
15830: GO 15836
15832: GO 15795
15834: POP
15835: POP
// end ;
15836: LD_VAR 0 4
15840: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
15841: LD_INT 0
15843: PPUSH
15844: PPUSH
15845: PPUSH
15846: PPUSH
15847: PPUSH
15848: PPUSH
15849: PPUSH
15850: PPUSH
15851: PPUSH
// if GetClass ( unit ) <> class_sniper then
15852: LD_VAR 0 1
15856: PPUSH
15857: CALL_OW 257
15861: PUSH
15862: LD_INT 5
15864: NONEQUAL
15865: IFFALSE 15869
// exit ;
15867: GO 16335
// dist := 8 ;
15869: LD_ADDR_VAR 0 5
15873: PUSH
15874: LD_INT 8
15876: ST_TO_ADDR
// viewRange := 12 ;
15877: LD_ADDR_VAR 0 8
15881: PUSH
15882: LD_INT 12
15884: ST_TO_ADDR
// side := GetSide ( unit ) ;
15885: LD_ADDR_VAR 0 6
15889: PUSH
15890: LD_VAR 0 1
15894: PPUSH
15895: CALL_OW 255
15899: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
15900: LD_INT 61
15902: PPUSH
15903: LD_VAR 0 6
15907: PPUSH
15908: CALL_OW 321
15912: PUSH
15913: LD_INT 2
15915: EQUAL
15916: IFFALSE 15926
// viewRange := 16 ;
15918: LD_ADDR_VAR 0 8
15922: PUSH
15923: LD_INT 16
15925: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
15926: LD_VAR 0 1
15930: PPUSH
15931: LD_VAR 0 2
15935: PPUSH
15936: LD_VAR 0 3
15940: PPUSH
15941: CALL_OW 297
15945: PUSH
15946: LD_VAR 0 5
15950: GREATER
15951: IFFALSE 16030
// begin ComMoveXY ( unit , x , y ) ;
15953: LD_VAR 0 1
15957: PPUSH
15958: LD_VAR 0 2
15962: PPUSH
15963: LD_VAR 0 3
15967: PPUSH
15968: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15972: LD_INT 35
15974: PPUSH
15975: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
15979: LD_VAR 0 1
15983: PPUSH
15984: LD_VAR 0 2
15988: PPUSH
15989: LD_VAR 0 3
15993: PPUSH
15994: CALL 52848 0 3
15998: NOT
15999: IFFALSE 16003
// exit ;
16001: GO 16335
// until GetDistUnitXY ( unit , x , y ) < dist ;
16003: LD_VAR 0 1
16007: PPUSH
16008: LD_VAR 0 2
16012: PPUSH
16013: LD_VAR 0 3
16017: PPUSH
16018: CALL_OW 297
16022: PUSH
16023: LD_VAR 0 5
16027: LESS
16028: IFFALSE 15972
// end ; ComTurnXY ( unit , x , y ) ;
16030: LD_VAR 0 1
16034: PPUSH
16035: LD_VAR 0 2
16039: PPUSH
16040: LD_VAR 0 3
16044: PPUSH
16045: CALL_OW 118
// repeat if Multiplayer then
16049: LD_OWVAR 4
16053: IFFALSE 16064
// wait ( 35 ) else
16055: LD_INT 35
16057: PPUSH
16058: CALL_OW 67
16062: GO 16071
// wait ( 5 ) ;
16064: LD_INT 5
16066: PPUSH
16067: CALL_OW 67
// _d := GetDir ( unit ) ;
16071: LD_ADDR_VAR 0 11
16075: PUSH
16076: LD_VAR 0 1
16080: PPUSH
16081: CALL_OW 254
16085: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
16086: LD_ADDR_VAR 0 7
16090: PUSH
16091: LD_VAR 0 1
16095: PPUSH
16096: CALL_OW 250
16100: PPUSH
16101: LD_VAR 0 1
16105: PPUSH
16106: CALL_OW 251
16110: PPUSH
16111: LD_VAR 0 2
16115: PPUSH
16116: LD_VAR 0 3
16120: PPUSH
16121: CALL 55456 0 4
16125: ST_TO_ADDR
// until dir = _d ;
16126: LD_VAR 0 7
16130: PUSH
16131: LD_VAR 0 11
16135: EQUAL
16136: IFFALSE 16049
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
16138: LD_ADDR_VAR 0 9
16142: PUSH
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 250
16152: PPUSH
16153: LD_VAR 0 7
16157: PPUSH
16158: LD_VAR 0 5
16162: PPUSH
16163: CALL_OW 272
16167: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
16168: LD_ADDR_VAR 0 10
16172: PUSH
16173: LD_VAR 0 1
16177: PPUSH
16178: CALL_OW 251
16182: PPUSH
16183: LD_VAR 0 7
16187: PPUSH
16188: LD_VAR 0 5
16192: PPUSH
16193: CALL_OW 273
16197: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16198: LD_VAR 0 9
16202: PPUSH
16203: LD_VAR 0 10
16207: PPUSH
16208: CALL_OW 488
16212: NOT
16213: IFFALSE 16217
// exit ;
16215: GO 16335
// ComAnimCustom ( unit , 1 ) ;
16217: LD_VAR 0 1
16221: PPUSH
16222: LD_INT 1
16224: PPUSH
16225: CALL_OW 592
// p := 0 ;
16229: LD_ADDR_VAR 0 12
16233: PUSH
16234: LD_INT 0
16236: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
16237: LD_VAR 0 9
16241: PPUSH
16242: LD_VAR 0 10
16246: PPUSH
16247: LD_VAR 0 6
16251: PPUSH
16252: LD_VAR 0 8
16256: PPUSH
16257: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
16261: LD_INT 35
16263: PPUSH
16264: CALL_OW 67
// p := Inc ( p ) ;
16268: LD_ADDR_VAR 0 12
16272: PUSH
16273: LD_VAR 0 12
16277: PPUSH
16278: CALL 55412 0 1
16282: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
16283: LD_VAR 0 12
16287: PUSH
16288: LD_INT 3
16290: EQUAL
16291: PUSH
16292: LD_VAR 0 1
16296: PPUSH
16297: CALL_OW 302
16301: NOT
16302: OR
16303: PUSH
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 301
16313: OR
16314: IFFALSE 16261
// RemoveSeeing ( _x , _y , side ) ;
16316: LD_VAR 0 9
16320: PPUSH
16321: LD_VAR 0 10
16325: PPUSH
16326: LD_VAR 0 6
16330: PPUSH
16331: CALL_OW 331
// end ; end_of_file
16335: LD_VAR 0 4
16339: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16340: LD_INT 0
16342: PPUSH
16343: PPUSH
// if exist_mode then
16344: LD_VAR 0 2
16348: IFFALSE 16373
// unit := CreateCharacter ( prefix & ident ) else
16350: LD_ADDR_VAR 0 5
16354: PUSH
16355: LD_VAR 0 3
16359: PUSH
16360: LD_VAR 0 1
16364: STR
16365: PPUSH
16366: CALL_OW 34
16370: ST_TO_ADDR
16371: GO 16388
// unit := NewCharacter ( ident ) ;
16373: LD_ADDR_VAR 0 5
16377: PUSH
16378: LD_VAR 0 1
16382: PPUSH
16383: CALL_OW 25
16387: ST_TO_ADDR
// result := unit ;
16388: LD_ADDR_VAR 0 4
16392: PUSH
16393: LD_VAR 0 5
16397: ST_TO_ADDR
// end ;
16398: LD_VAR 0 4
16402: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16403: LD_INT 0
16405: PPUSH
16406: PPUSH
// if not side or not nation then
16407: LD_VAR 0 1
16411: NOT
16412: PUSH
16413: LD_VAR 0 2
16417: NOT
16418: OR
16419: IFFALSE 16423
// exit ;
16421: GO 17191
// case nation of nation_american :
16423: LD_VAR 0 2
16427: PUSH
16428: LD_INT 1
16430: DOUBLE
16431: EQUAL
16432: IFTRUE 16436
16434: GO 16650
16436: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16437: LD_ADDR_VAR 0 4
16441: PUSH
16442: LD_INT 35
16444: PUSH
16445: LD_INT 45
16447: PUSH
16448: LD_INT 46
16450: PUSH
16451: LD_INT 47
16453: PUSH
16454: LD_INT 82
16456: PUSH
16457: LD_INT 83
16459: PUSH
16460: LD_INT 84
16462: PUSH
16463: LD_INT 85
16465: PUSH
16466: LD_INT 86
16468: PUSH
16469: LD_INT 1
16471: PUSH
16472: LD_INT 2
16474: PUSH
16475: LD_INT 6
16477: PUSH
16478: LD_INT 15
16480: PUSH
16481: LD_INT 16
16483: PUSH
16484: LD_INT 7
16486: PUSH
16487: LD_INT 12
16489: PUSH
16490: LD_INT 13
16492: PUSH
16493: LD_INT 10
16495: PUSH
16496: LD_INT 14
16498: PUSH
16499: LD_INT 20
16501: PUSH
16502: LD_INT 21
16504: PUSH
16505: LD_INT 22
16507: PUSH
16508: LD_INT 25
16510: PUSH
16511: LD_INT 32
16513: PUSH
16514: LD_INT 27
16516: PUSH
16517: LD_INT 36
16519: PUSH
16520: LD_INT 69
16522: PUSH
16523: LD_INT 39
16525: PUSH
16526: LD_INT 34
16528: PUSH
16529: LD_INT 40
16531: PUSH
16532: LD_INT 48
16534: PUSH
16535: LD_INT 49
16537: PUSH
16538: LD_INT 50
16540: PUSH
16541: LD_INT 51
16543: PUSH
16544: LD_INT 52
16546: PUSH
16547: LD_INT 53
16549: PUSH
16550: LD_INT 54
16552: PUSH
16553: LD_INT 55
16555: PUSH
16556: LD_INT 56
16558: PUSH
16559: LD_INT 57
16561: PUSH
16562: LD_INT 58
16564: PUSH
16565: LD_INT 59
16567: PUSH
16568: LD_INT 60
16570: PUSH
16571: LD_INT 61
16573: PUSH
16574: LD_INT 62
16576: PUSH
16577: LD_INT 80
16579: PUSH
16580: LD_INT 82
16582: PUSH
16583: LD_INT 83
16585: PUSH
16586: LD_INT 84
16588: PUSH
16589: LD_INT 85
16591: PUSH
16592: LD_INT 86
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: ST_TO_ADDR
16648: GO 17115
16650: LD_INT 2
16652: DOUBLE
16653: EQUAL
16654: IFTRUE 16658
16656: GO 16884
16658: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16659: LD_ADDR_VAR 0 4
16663: PUSH
16664: LD_INT 35
16666: PUSH
16667: LD_INT 45
16669: PUSH
16670: LD_INT 46
16672: PUSH
16673: LD_INT 47
16675: PUSH
16676: LD_INT 82
16678: PUSH
16679: LD_INT 83
16681: PUSH
16682: LD_INT 84
16684: PUSH
16685: LD_INT 85
16687: PUSH
16688: LD_INT 87
16690: PUSH
16691: LD_INT 70
16693: PUSH
16694: LD_INT 1
16696: PUSH
16697: LD_INT 11
16699: PUSH
16700: LD_INT 3
16702: PUSH
16703: LD_INT 4
16705: PUSH
16706: LD_INT 5
16708: PUSH
16709: LD_INT 6
16711: PUSH
16712: LD_INT 15
16714: PUSH
16715: LD_INT 18
16717: PUSH
16718: LD_INT 7
16720: PUSH
16721: LD_INT 17
16723: PUSH
16724: LD_INT 8
16726: PUSH
16727: LD_INT 20
16729: PUSH
16730: LD_INT 21
16732: PUSH
16733: LD_INT 22
16735: PUSH
16736: LD_INT 72
16738: PUSH
16739: LD_INT 26
16741: PUSH
16742: LD_INT 69
16744: PUSH
16745: LD_INT 39
16747: PUSH
16748: LD_INT 40
16750: PUSH
16751: LD_INT 41
16753: PUSH
16754: LD_INT 42
16756: PUSH
16757: LD_INT 43
16759: PUSH
16760: LD_INT 48
16762: PUSH
16763: LD_INT 49
16765: PUSH
16766: LD_INT 50
16768: PUSH
16769: LD_INT 51
16771: PUSH
16772: LD_INT 52
16774: PUSH
16775: LD_INT 53
16777: PUSH
16778: LD_INT 54
16780: PUSH
16781: LD_INT 55
16783: PUSH
16784: LD_INT 56
16786: PUSH
16787: LD_INT 60
16789: PUSH
16790: LD_INT 61
16792: PUSH
16793: LD_INT 62
16795: PUSH
16796: LD_INT 66
16798: PUSH
16799: LD_INT 67
16801: PUSH
16802: LD_INT 68
16804: PUSH
16805: LD_INT 81
16807: PUSH
16808: LD_INT 82
16810: PUSH
16811: LD_INT 83
16813: PUSH
16814: LD_INT 84
16816: PUSH
16817: LD_INT 85
16819: PUSH
16820: LD_INT 87
16822: PUSH
16823: LD_INT 88
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: ST_TO_ADDR
16882: GO 17115
16884: LD_INT 3
16886: DOUBLE
16887: EQUAL
16888: IFTRUE 16892
16890: GO 17114
16892: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16893: LD_ADDR_VAR 0 4
16897: PUSH
16898: LD_INT 46
16900: PUSH
16901: LD_INT 47
16903: PUSH
16904: LD_INT 1
16906: PUSH
16907: LD_INT 2
16909: PUSH
16910: LD_INT 82
16912: PUSH
16913: LD_INT 83
16915: PUSH
16916: LD_INT 84
16918: PUSH
16919: LD_INT 85
16921: PUSH
16922: LD_INT 86
16924: PUSH
16925: LD_INT 11
16927: PUSH
16928: LD_INT 9
16930: PUSH
16931: LD_INT 20
16933: PUSH
16934: LD_INT 19
16936: PUSH
16937: LD_INT 21
16939: PUSH
16940: LD_INT 24
16942: PUSH
16943: LD_INT 22
16945: PUSH
16946: LD_INT 25
16948: PUSH
16949: LD_INT 28
16951: PUSH
16952: LD_INT 29
16954: PUSH
16955: LD_INT 30
16957: PUSH
16958: LD_INT 31
16960: PUSH
16961: LD_INT 37
16963: PUSH
16964: LD_INT 38
16966: PUSH
16967: LD_INT 32
16969: PUSH
16970: LD_INT 27
16972: PUSH
16973: LD_INT 33
16975: PUSH
16976: LD_INT 69
16978: PUSH
16979: LD_INT 39
16981: PUSH
16982: LD_INT 34
16984: PUSH
16985: LD_INT 40
16987: PUSH
16988: LD_INT 71
16990: PUSH
16991: LD_INT 23
16993: PUSH
16994: LD_INT 44
16996: PUSH
16997: LD_INT 48
16999: PUSH
17000: LD_INT 49
17002: PUSH
17003: LD_INT 50
17005: PUSH
17006: LD_INT 51
17008: PUSH
17009: LD_INT 52
17011: PUSH
17012: LD_INT 53
17014: PUSH
17015: LD_INT 54
17017: PUSH
17018: LD_INT 55
17020: PUSH
17021: LD_INT 56
17023: PUSH
17024: LD_INT 57
17026: PUSH
17027: LD_INT 58
17029: PUSH
17030: LD_INT 59
17032: PUSH
17033: LD_INT 63
17035: PUSH
17036: LD_INT 64
17038: PUSH
17039: LD_INT 65
17041: PUSH
17042: LD_INT 82
17044: PUSH
17045: LD_INT 83
17047: PUSH
17048: LD_INT 84
17050: PUSH
17051: LD_INT 85
17053: PUSH
17054: LD_INT 86
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: ST_TO_ADDR
17112: GO 17115
17114: POP
// if state > - 1 and state < 3 then
17115: LD_VAR 0 3
17119: PUSH
17120: LD_INT 1
17122: NEG
17123: GREATER
17124: PUSH
17125: LD_VAR 0 3
17129: PUSH
17130: LD_INT 3
17132: LESS
17133: AND
17134: IFFALSE 17191
// for i in result do
17136: LD_ADDR_VAR 0 5
17140: PUSH
17141: LD_VAR 0 4
17145: PUSH
17146: FOR_IN
17147: IFFALSE 17189
// if GetTech ( i , side ) <> state then
17149: LD_VAR 0 5
17153: PPUSH
17154: LD_VAR 0 1
17158: PPUSH
17159: CALL_OW 321
17163: PUSH
17164: LD_VAR 0 3
17168: NONEQUAL
17169: IFFALSE 17187
// result := result diff i ;
17171: LD_ADDR_VAR 0 4
17175: PUSH
17176: LD_VAR 0 4
17180: PUSH
17181: LD_VAR 0 5
17185: DIFF
17186: ST_TO_ADDR
17187: GO 17146
17189: POP
17190: POP
// end ;
17191: LD_VAR 0 4
17195: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17196: LD_INT 0
17198: PPUSH
17199: PPUSH
17200: PPUSH
// result := true ;
17201: LD_ADDR_VAR 0 3
17205: PUSH
17206: LD_INT 1
17208: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17209: LD_ADDR_VAR 0 5
17213: PUSH
17214: LD_VAR 0 2
17218: PPUSH
17219: CALL_OW 480
17223: ST_TO_ADDR
// if not tmp then
17224: LD_VAR 0 5
17228: NOT
17229: IFFALSE 17233
// exit ;
17231: GO 17282
// for i in tmp do
17233: LD_ADDR_VAR 0 4
17237: PUSH
17238: LD_VAR 0 5
17242: PUSH
17243: FOR_IN
17244: IFFALSE 17280
// if GetTech ( i , side ) <> state_researched then
17246: LD_VAR 0 4
17250: PPUSH
17251: LD_VAR 0 1
17255: PPUSH
17256: CALL_OW 321
17260: PUSH
17261: LD_INT 2
17263: NONEQUAL
17264: IFFALSE 17278
// begin result := false ;
17266: LD_ADDR_VAR 0 3
17270: PUSH
17271: LD_INT 0
17273: ST_TO_ADDR
// exit ;
17274: POP
17275: POP
17276: GO 17282
// end ;
17278: GO 17243
17280: POP
17281: POP
// end ;
17282: LD_VAR 0 3
17286: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17287: LD_INT 0
17289: PPUSH
17290: PPUSH
17291: PPUSH
17292: PPUSH
17293: PPUSH
17294: PPUSH
17295: PPUSH
17296: PPUSH
17297: PPUSH
17298: PPUSH
17299: PPUSH
17300: PPUSH
17301: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17302: LD_VAR 0 1
17306: NOT
17307: PUSH
17308: LD_VAR 0 1
17312: PPUSH
17313: CALL_OW 257
17317: PUSH
17318: LD_INT 9
17320: NONEQUAL
17321: OR
17322: IFFALSE 17326
// exit ;
17324: GO 17899
// side := GetSide ( unit ) ;
17326: LD_ADDR_VAR 0 9
17330: PUSH
17331: LD_VAR 0 1
17335: PPUSH
17336: CALL_OW 255
17340: ST_TO_ADDR
// tech_space := tech_spacanom ;
17341: LD_ADDR_VAR 0 12
17345: PUSH
17346: LD_INT 29
17348: ST_TO_ADDR
// tech_time := tech_taurad ;
17349: LD_ADDR_VAR 0 13
17353: PUSH
17354: LD_INT 28
17356: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17357: LD_ADDR_VAR 0 11
17361: PUSH
17362: LD_VAR 0 1
17366: PPUSH
17367: CALL_OW 310
17371: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17372: LD_VAR 0 11
17376: PPUSH
17377: CALL_OW 247
17381: PUSH
17382: LD_INT 2
17384: EQUAL
17385: IFFALSE 17389
// exit ;
17387: GO 17899
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17389: LD_ADDR_VAR 0 8
17393: PUSH
17394: LD_INT 81
17396: PUSH
17397: LD_VAR 0 9
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: LD_INT 21
17411: PUSH
17412: LD_INT 3
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PPUSH
17427: CALL_OW 69
17431: ST_TO_ADDR
// if not tmp then
17432: LD_VAR 0 8
17436: NOT
17437: IFFALSE 17441
// exit ;
17439: GO 17899
// if in_unit then
17441: LD_VAR 0 11
17445: IFFALSE 17469
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17447: LD_ADDR_VAR 0 10
17451: PUSH
17452: LD_VAR 0 8
17456: PPUSH
17457: LD_VAR 0 11
17461: PPUSH
17462: CALL_OW 74
17466: ST_TO_ADDR
17467: GO 17489
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17469: LD_ADDR_VAR 0 10
17473: PUSH
17474: LD_VAR 0 8
17478: PPUSH
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL_OW 74
17488: ST_TO_ADDR
// if not enemy then
17489: LD_VAR 0 10
17493: NOT
17494: IFFALSE 17498
// exit ;
17496: GO 17899
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17498: LD_VAR 0 11
17502: PUSH
17503: LD_VAR 0 11
17507: PPUSH
17508: LD_VAR 0 10
17512: PPUSH
17513: CALL_OW 296
17517: PUSH
17518: LD_INT 13
17520: GREATER
17521: AND
17522: PUSH
17523: LD_VAR 0 1
17527: PPUSH
17528: LD_VAR 0 10
17532: PPUSH
17533: CALL_OW 296
17537: PUSH
17538: LD_INT 12
17540: GREATER
17541: OR
17542: IFFALSE 17546
// exit ;
17544: GO 17899
// missile := [ 1 ] ;
17546: LD_ADDR_VAR 0 14
17550: PUSH
17551: LD_INT 1
17553: PUSH
17554: EMPTY
17555: LIST
17556: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17557: LD_VAR 0 9
17561: PPUSH
17562: LD_VAR 0 12
17566: PPUSH
17567: CALL_OW 325
17571: IFFALSE 17600
// missile := Replace ( missile , missile + 1 , 2 ) ;
17573: LD_ADDR_VAR 0 14
17577: PUSH
17578: LD_VAR 0 14
17582: PPUSH
17583: LD_VAR 0 14
17587: PUSH
17588: LD_INT 1
17590: PLUS
17591: PPUSH
17592: LD_INT 2
17594: PPUSH
17595: CALL_OW 1
17599: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17600: LD_VAR 0 9
17604: PPUSH
17605: LD_VAR 0 13
17609: PPUSH
17610: CALL_OW 325
17614: PUSH
17615: LD_VAR 0 10
17619: PPUSH
17620: CALL_OW 255
17624: PPUSH
17625: LD_VAR 0 13
17629: PPUSH
17630: CALL_OW 325
17634: NOT
17635: AND
17636: IFFALSE 17665
// missile := Replace ( missile , missile + 1 , 3 ) ;
17638: LD_ADDR_VAR 0 14
17642: PUSH
17643: LD_VAR 0 14
17647: PPUSH
17648: LD_VAR 0 14
17652: PUSH
17653: LD_INT 1
17655: PLUS
17656: PPUSH
17657: LD_INT 3
17659: PPUSH
17660: CALL_OW 1
17664: ST_TO_ADDR
// if missile < 2 then
17665: LD_VAR 0 14
17669: PUSH
17670: LD_INT 2
17672: LESS
17673: IFFALSE 17677
// exit ;
17675: GO 17899
// x := GetX ( enemy ) ;
17677: LD_ADDR_VAR 0 4
17681: PUSH
17682: LD_VAR 0 10
17686: PPUSH
17687: CALL_OW 250
17691: ST_TO_ADDR
// y := GetY ( enemy ) ;
17692: LD_ADDR_VAR 0 5
17696: PUSH
17697: LD_VAR 0 10
17701: PPUSH
17702: CALL_OW 251
17706: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17707: LD_ADDR_VAR 0 6
17711: PUSH
17712: LD_VAR 0 4
17716: PUSH
17717: LD_INT 1
17719: NEG
17720: PPUSH
17721: LD_INT 1
17723: PPUSH
17724: CALL_OW 12
17728: PLUS
17729: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17730: LD_ADDR_VAR 0 7
17734: PUSH
17735: LD_VAR 0 5
17739: PUSH
17740: LD_INT 1
17742: NEG
17743: PPUSH
17744: LD_INT 1
17746: PPUSH
17747: CALL_OW 12
17751: PLUS
17752: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17753: LD_VAR 0 6
17757: PPUSH
17758: LD_VAR 0 7
17762: PPUSH
17763: CALL_OW 488
17767: NOT
17768: IFFALSE 17790
// begin _x := x ;
17770: LD_ADDR_VAR 0 6
17774: PUSH
17775: LD_VAR 0 4
17779: ST_TO_ADDR
// _y := y ;
17780: LD_ADDR_VAR 0 7
17784: PUSH
17785: LD_VAR 0 5
17789: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17790: LD_ADDR_VAR 0 3
17794: PUSH
17795: LD_INT 1
17797: PPUSH
17798: LD_VAR 0 14
17802: PPUSH
17803: CALL_OW 12
17807: ST_TO_ADDR
// case i of 1 :
17808: LD_VAR 0 3
17812: PUSH
17813: LD_INT 1
17815: DOUBLE
17816: EQUAL
17817: IFTRUE 17821
17819: GO 17838
17821: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17822: LD_VAR 0 1
17826: PPUSH
17827: LD_VAR 0 10
17831: PPUSH
17832: CALL_OW 115
17836: GO 17899
17838: LD_INT 2
17840: DOUBLE
17841: EQUAL
17842: IFTRUE 17846
17844: GO 17868
17846: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17847: LD_VAR 0 1
17851: PPUSH
17852: LD_VAR 0 6
17856: PPUSH
17857: LD_VAR 0 7
17861: PPUSH
17862: CALL_OW 153
17866: GO 17899
17868: LD_INT 3
17870: DOUBLE
17871: EQUAL
17872: IFTRUE 17876
17874: GO 17898
17876: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17877: LD_VAR 0 1
17881: PPUSH
17882: LD_VAR 0 6
17886: PPUSH
17887: LD_VAR 0 7
17891: PPUSH
17892: CALL_OW 154
17896: GO 17899
17898: POP
// end ;
17899: LD_VAR 0 2
17903: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17904: LD_INT 0
17906: PPUSH
17907: PPUSH
17908: PPUSH
17909: PPUSH
17910: PPUSH
17911: PPUSH
// if not unit or not building then
17912: LD_VAR 0 1
17916: NOT
17917: PUSH
17918: LD_VAR 0 2
17922: NOT
17923: OR
17924: IFFALSE 17928
// exit ;
17926: GO 18086
// x := GetX ( building ) ;
17928: LD_ADDR_VAR 0 5
17932: PUSH
17933: LD_VAR 0 2
17937: PPUSH
17938: CALL_OW 250
17942: ST_TO_ADDR
// y := GetY ( building ) ;
17943: LD_ADDR_VAR 0 6
17947: PUSH
17948: LD_VAR 0 2
17952: PPUSH
17953: CALL_OW 251
17957: ST_TO_ADDR
// for i = 0 to 5 do
17958: LD_ADDR_VAR 0 4
17962: PUSH
17963: DOUBLE
17964: LD_INT 0
17966: DEC
17967: ST_TO_ADDR
17968: LD_INT 5
17970: PUSH
17971: FOR_TO
17972: IFFALSE 18084
// begin _x := ShiftX ( x , i , 3 ) ;
17974: LD_ADDR_VAR 0 7
17978: PUSH
17979: LD_VAR 0 5
17983: PPUSH
17984: LD_VAR 0 4
17988: PPUSH
17989: LD_INT 3
17991: PPUSH
17992: CALL_OW 272
17996: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17997: LD_ADDR_VAR 0 8
18001: PUSH
18002: LD_VAR 0 6
18006: PPUSH
18007: LD_VAR 0 4
18011: PPUSH
18012: LD_INT 3
18014: PPUSH
18015: CALL_OW 273
18019: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18020: LD_VAR 0 7
18024: PPUSH
18025: LD_VAR 0 8
18029: PPUSH
18030: CALL_OW 488
18034: NOT
18035: IFFALSE 18039
// continue ;
18037: GO 17971
// if HexInfo ( _x , _y ) = 0 then
18039: LD_VAR 0 7
18043: PPUSH
18044: LD_VAR 0 8
18048: PPUSH
18049: CALL_OW 428
18053: PUSH
18054: LD_INT 0
18056: EQUAL
18057: IFFALSE 18082
// begin ComMoveXY ( unit , _x , _y ) ;
18059: LD_VAR 0 1
18063: PPUSH
18064: LD_VAR 0 7
18068: PPUSH
18069: LD_VAR 0 8
18073: PPUSH
18074: CALL_OW 111
// exit ;
18078: POP
18079: POP
18080: GO 18086
// end ; end ;
18082: GO 17971
18084: POP
18085: POP
// end ;
18086: LD_VAR 0 3
18090: RET
// export function ScanBase ( side , base_area ) ; begin
18091: LD_INT 0
18093: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18094: LD_ADDR_VAR 0 3
18098: PUSH
18099: LD_VAR 0 2
18103: PPUSH
18104: LD_INT 81
18106: PUSH
18107: LD_VAR 0 1
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PPUSH
18116: CALL_OW 70
18120: ST_TO_ADDR
// end ;
18121: LD_VAR 0 3
18125: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18126: LD_INT 0
18128: PPUSH
18129: PPUSH
18130: PPUSH
18131: PPUSH
// result := false ;
18132: LD_ADDR_VAR 0 2
18136: PUSH
18137: LD_INT 0
18139: ST_TO_ADDR
// side := GetSide ( unit ) ;
18140: LD_ADDR_VAR 0 3
18144: PUSH
18145: LD_VAR 0 1
18149: PPUSH
18150: CALL_OW 255
18154: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18155: LD_ADDR_VAR 0 4
18159: PUSH
18160: LD_VAR 0 1
18164: PPUSH
18165: CALL_OW 248
18169: ST_TO_ADDR
// case nat of 1 :
18170: LD_VAR 0 4
18174: PUSH
18175: LD_INT 1
18177: DOUBLE
18178: EQUAL
18179: IFTRUE 18183
18181: GO 18194
18183: POP
// tech := tech_lassight ; 2 :
18184: LD_ADDR_VAR 0 5
18188: PUSH
18189: LD_INT 12
18191: ST_TO_ADDR
18192: GO 18233
18194: LD_INT 2
18196: DOUBLE
18197: EQUAL
18198: IFTRUE 18202
18200: GO 18213
18202: POP
// tech := tech_mortar ; 3 :
18203: LD_ADDR_VAR 0 5
18207: PUSH
18208: LD_INT 41
18210: ST_TO_ADDR
18211: GO 18233
18213: LD_INT 3
18215: DOUBLE
18216: EQUAL
18217: IFTRUE 18221
18219: GO 18232
18221: POP
// tech := tech_bazooka ; end ;
18222: LD_ADDR_VAR 0 5
18226: PUSH
18227: LD_INT 44
18229: ST_TO_ADDR
18230: GO 18233
18232: POP
// if Researched ( side , tech ) then
18233: LD_VAR 0 3
18237: PPUSH
18238: LD_VAR 0 5
18242: PPUSH
18243: CALL_OW 325
18247: IFFALSE 18274
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18249: LD_ADDR_VAR 0 2
18253: PUSH
18254: LD_INT 5
18256: PUSH
18257: LD_INT 8
18259: PUSH
18260: LD_INT 9
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: PUSH
18268: LD_VAR 0 4
18272: ARRAY
18273: ST_TO_ADDR
// end ;
18274: LD_VAR 0 2
18278: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18279: LD_INT 0
18281: PPUSH
18282: PPUSH
18283: PPUSH
// if not mines then
18284: LD_VAR 0 2
18288: NOT
18289: IFFALSE 18293
// exit ;
18291: GO 18437
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18293: LD_ADDR_VAR 0 5
18297: PUSH
18298: LD_INT 81
18300: PUSH
18301: LD_VAR 0 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 3
18312: PUSH
18313: LD_INT 21
18315: PUSH
18316: LD_INT 3
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PPUSH
18331: CALL_OW 69
18335: ST_TO_ADDR
// for i in mines do
18336: LD_ADDR_VAR 0 4
18340: PUSH
18341: LD_VAR 0 2
18345: PUSH
18346: FOR_IN
18347: IFFALSE 18435
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18349: LD_VAR 0 4
18353: PUSH
18354: LD_INT 1
18356: ARRAY
18357: PPUSH
18358: LD_VAR 0 4
18362: PUSH
18363: LD_INT 2
18365: ARRAY
18366: PPUSH
18367: CALL_OW 458
18371: NOT
18372: IFFALSE 18376
// continue ;
18374: GO 18346
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18376: LD_VAR 0 4
18380: PUSH
18381: LD_INT 1
18383: ARRAY
18384: PPUSH
18385: LD_VAR 0 4
18389: PUSH
18390: LD_INT 2
18392: ARRAY
18393: PPUSH
18394: CALL_OW 428
18398: PUSH
18399: LD_VAR 0 5
18403: IN
18404: IFFALSE 18433
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18406: LD_VAR 0 4
18410: PUSH
18411: LD_INT 1
18413: ARRAY
18414: PPUSH
18415: LD_VAR 0 4
18419: PUSH
18420: LD_INT 2
18422: ARRAY
18423: PPUSH
18424: LD_VAR 0 1
18428: PPUSH
18429: CALL_OW 456
// end ;
18433: GO 18346
18435: POP
18436: POP
// end ;
18437: LD_VAR 0 3
18441: RET
// export function Count ( array ) ; begin
18442: LD_INT 0
18444: PPUSH
// result := array + 0 ;
18445: LD_ADDR_VAR 0 2
18449: PUSH
18450: LD_VAR 0 1
18454: PUSH
18455: LD_INT 0
18457: PLUS
18458: ST_TO_ADDR
// end ;
18459: LD_VAR 0 2
18463: RET
// export function IsEmpty ( building ) ; begin
18464: LD_INT 0
18466: PPUSH
// if not building then
18467: LD_VAR 0 1
18471: NOT
18472: IFFALSE 18476
// exit ;
18474: GO 18519
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18476: LD_ADDR_VAR 0 2
18480: PUSH
18481: LD_VAR 0 1
18485: PUSH
18486: LD_INT 22
18488: PUSH
18489: LD_VAR 0 1
18493: PPUSH
18494: CALL_OW 255
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 58
18505: PUSH
18506: EMPTY
18507: LIST
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PPUSH
18513: CALL_OW 69
18517: IN
18518: ST_TO_ADDR
// end ;
18519: LD_VAR 0 2
18523: RET
// export function IsNotFull ( building ) ; var places ; begin
18524: LD_INT 0
18526: PPUSH
18527: PPUSH
// if not building then
18528: LD_VAR 0 1
18532: NOT
18533: IFFALSE 18537
// exit ;
18535: GO 18565
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18537: LD_ADDR_VAR 0 2
18541: PUSH
18542: LD_VAR 0 1
18546: PPUSH
18547: LD_INT 3
18549: PUSH
18550: LD_INT 62
18552: PUSH
18553: EMPTY
18554: LIST
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PPUSH
18560: CALL_OW 72
18564: ST_TO_ADDR
// end ;
18565: LD_VAR 0 2
18569: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18570: LD_INT 0
18572: PPUSH
18573: PPUSH
18574: PPUSH
18575: PPUSH
// tmp := [ ] ;
18576: LD_ADDR_VAR 0 3
18580: PUSH
18581: EMPTY
18582: ST_TO_ADDR
// list := [ ] ;
18583: LD_ADDR_VAR 0 5
18587: PUSH
18588: EMPTY
18589: ST_TO_ADDR
// for i = 16 to 25 do
18590: LD_ADDR_VAR 0 4
18594: PUSH
18595: DOUBLE
18596: LD_INT 16
18598: DEC
18599: ST_TO_ADDR
18600: LD_INT 25
18602: PUSH
18603: FOR_TO
18604: IFFALSE 18677
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18606: LD_ADDR_VAR 0 3
18610: PUSH
18611: LD_VAR 0 3
18615: PUSH
18616: LD_INT 22
18618: PUSH
18619: LD_VAR 0 1
18623: PPUSH
18624: CALL_OW 255
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 91
18635: PUSH
18636: LD_VAR 0 1
18640: PUSH
18641: LD_INT 6
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 30
18651: PUSH
18652: LD_VAR 0 4
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: LIST
18665: PUSH
18666: EMPTY
18667: LIST
18668: PPUSH
18669: CALL_OW 69
18673: ADD
18674: ST_TO_ADDR
18675: GO 18603
18677: POP
18678: POP
// for i = 1 to tmp do
18679: LD_ADDR_VAR 0 4
18683: PUSH
18684: DOUBLE
18685: LD_INT 1
18687: DEC
18688: ST_TO_ADDR
18689: LD_VAR 0 3
18693: PUSH
18694: FOR_TO
18695: IFFALSE 18783
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18697: LD_ADDR_VAR 0 5
18701: PUSH
18702: LD_VAR 0 5
18706: PUSH
18707: LD_VAR 0 3
18711: PUSH
18712: LD_VAR 0 4
18716: ARRAY
18717: PPUSH
18718: CALL_OW 266
18722: PUSH
18723: LD_VAR 0 3
18727: PUSH
18728: LD_VAR 0 4
18732: ARRAY
18733: PPUSH
18734: CALL_OW 250
18738: PUSH
18739: LD_VAR 0 3
18743: PUSH
18744: LD_VAR 0 4
18748: ARRAY
18749: PPUSH
18750: CALL_OW 251
18754: PUSH
18755: LD_VAR 0 3
18759: PUSH
18760: LD_VAR 0 4
18764: ARRAY
18765: PPUSH
18766: CALL_OW 254
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: PUSH
18777: EMPTY
18778: LIST
18779: ADD
18780: ST_TO_ADDR
18781: GO 18694
18783: POP
18784: POP
// result := list ;
18785: LD_ADDR_VAR 0 2
18789: PUSH
18790: LD_VAR 0 5
18794: ST_TO_ADDR
// end ;
18795: LD_VAR 0 2
18799: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18800: LD_INT 0
18802: PPUSH
18803: PPUSH
18804: PPUSH
18805: PPUSH
18806: PPUSH
18807: PPUSH
18808: PPUSH
// if not factory then
18809: LD_VAR 0 1
18813: NOT
18814: IFFALSE 18818
// exit ;
18816: GO 19411
// if control = control_apeman then
18818: LD_VAR 0 4
18822: PUSH
18823: LD_INT 5
18825: EQUAL
18826: IFFALSE 18935
// begin tmp := UnitsInside ( factory ) ;
18828: LD_ADDR_VAR 0 8
18832: PUSH
18833: LD_VAR 0 1
18837: PPUSH
18838: CALL_OW 313
18842: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18843: LD_VAR 0 8
18847: PPUSH
18848: LD_INT 25
18850: PUSH
18851: LD_INT 12
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PPUSH
18858: CALL_OW 72
18862: NOT
18863: IFFALSE 18873
// control := control_manual ;
18865: LD_ADDR_VAR 0 4
18869: PUSH
18870: LD_INT 1
18872: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18873: LD_ADDR_VAR 0 8
18877: PUSH
18878: LD_VAR 0 1
18882: PPUSH
18883: CALL 18570 0 1
18887: ST_TO_ADDR
// if tmp then
18888: LD_VAR 0 8
18892: IFFALSE 18935
// begin for i in tmp do
18894: LD_ADDR_VAR 0 7
18898: PUSH
18899: LD_VAR 0 8
18903: PUSH
18904: FOR_IN
18905: IFFALSE 18933
// if i [ 1 ] = b_ext_radio then
18907: LD_VAR 0 7
18911: PUSH
18912: LD_INT 1
18914: ARRAY
18915: PUSH
18916: LD_INT 22
18918: EQUAL
18919: IFFALSE 18931
// begin control := control_remote ;
18921: LD_ADDR_VAR 0 4
18925: PUSH
18926: LD_INT 2
18928: ST_TO_ADDR
// break ;
18929: GO 18933
// end ;
18931: GO 18904
18933: POP
18934: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18935: LD_VAR 0 1
18939: PPUSH
18940: LD_VAR 0 2
18944: PPUSH
18945: LD_VAR 0 3
18949: PPUSH
18950: LD_VAR 0 4
18954: PPUSH
18955: LD_VAR 0 5
18959: PPUSH
18960: CALL_OW 448
18964: IFFALSE 18999
// begin result := [ chassis , engine , control , weapon ] ;
18966: LD_ADDR_VAR 0 6
18970: PUSH
18971: LD_VAR 0 2
18975: PUSH
18976: LD_VAR 0 3
18980: PUSH
18981: LD_VAR 0 4
18985: PUSH
18986: LD_VAR 0 5
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: ST_TO_ADDR
// exit ;
18997: GO 19411
// end ; _chassis := AvailableChassisList ( factory ) ;
18999: LD_ADDR_VAR 0 9
19003: PUSH
19004: LD_VAR 0 1
19008: PPUSH
19009: CALL_OW 475
19013: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19014: LD_ADDR_VAR 0 11
19018: PUSH
19019: LD_VAR 0 1
19023: PPUSH
19024: CALL_OW 476
19028: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19029: LD_ADDR_VAR 0 12
19033: PUSH
19034: LD_VAR 0 1
19038: PPUSH
19039: CALL_OW 477
19043: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19044: LD_ADDR_VAR 0 10
19048: PUSH
19049: LD_VAR 0 1
19053: PPUSH
19054: CALL_OW 478
19058: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19059: LD_VAR 0 9
19063: NOT
19064: PUSH
19065: LD_VAR 0 11
19069: NOT
19070: OR
19071: PUSH
19072: LD_VAR 0 12
19076: NOT
19077: OR
19078: PUSH
19079: LD_VAR 0 10
19083: NOT
19084: OR
19085: IFFALSE 19120
// begin result := [ chassis , engine , control , weapon ] ;
19087: LD_ADDR_VAR 0 6
19091: PUSH
19092: LD_VAR 0 2
19096: PUSH
19097: LD_VAR 0 3
19101: PUSH
19102: LD_VAR 0 4
19106: PUSH
19107: LD_VAR 0 5
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: ST_TO_ADDR
// exit ;
19118: GO 19411
// end ; if not chassis in _chassis then
19120: LD_VAR 0 2
19124: PUSH
19125: LD_VAR 0 9
19129: IN
19130: NOT
19131: IFFALSE 19157
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19133: LD_ADDR_VAR 0 2
19137: PUSH
19138: LD_VAR 0 9
19142: PUSH
19143: LD_INT 1
19145: PPUSH
19146: LD_VAR 0 9
19150: PPUSH
19151: CALL_OW 12
19155: ARRAY
19156: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19157: LD_VAR 0 2
19161: PPUSH
19162: LD_VAR 0 3
19166: PPUSH
19167: CALL 19416 0 2
19171: NOT
19172: IFFALSE 19231
// repeat engine := _engine [ 1 ] ;
19174: LD_ADDR_VAR 0 3
19178: PUSH
19179: LD_VAR 0 11
19183: PUSH
19184: LD_INT 1
19186: ARRAY
19187: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19188: LD_ADDR_VAR 0 11
19192: PUSH
19193: LD_VAR 0 11
19197: PPUSH
19198: LD_INT 1
19200: PPUSH
19201: CALL_OW 3
19205: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19206: LD_VAR 0 2
19210: PPUSH
19211: LD_VAR 0 3
19215: PPUSH
19216: CALL 19416 0 2
19220: PUSH
19221: LD_VAR 0 11
19225: PUSH
19226: EMPTY
19227: EQUAL
19228: OR
19229: IFFALSE 19174
// if not control in _control then
19231: LD_VAR 0 4
19235: PUSH
19236: LD_VAR 0 12
19240: IN
19241: NOT
19242: IFFALSE 19268
// control := _control [ rand ( 1 , _control ) ] ;
19244: LD_ADDR_VAR 0 4
19248: PUSH
19249: LD_VAR 0 12
19253: PUSH
19254: LD_INT 1
19256: PPUSH
19257: LD_VAR 0 12
19261: PPUSH
19262: CALL_OW 12
19266: ARRAY
19267: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19268: LD_VAR 0 2
19272: PPUSH
19273: LD_VAR 0 5
19277: PPUSH
19278: CALL 19636 0 2
19282: NOT
19283: IFFALSE 19342
// repeat weapon := _weapon [ 1 ] ;
19285: LD_ADDR_VAR 0 5
19289: PUSH
19290: LD_VAR 0 10
19294: PUSH
19295: LD_INT 1
19297: ARRAY
19298: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19299: LD_ADDR_VAR 0 10
19303: PUSH
19304: LD_VAR 0 10
19308: PPUSH
19309: LD_INT 1
19311: PPUSH
19312: CALL_OW 3
19316: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19317: LD_VAR 0 2
19321: PPUSH
19322: LD_VAR 0 5
19326: PPUSH
19327: CALL 19636 0 2
19331: PUSH
19332: LD_VAR 0 10
19336: PUSH
19337: EMPTY
19338: EQUAL
19339: OR
19340: IFFALSE 19285
// result := [ ] ;
19342: LD_ADDR_VAR 0 6
19346: PUSH
19347: EMPTY
19348: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19349: LD_VAR 0 1
19353: PPUSH
19354: LD_VAR 0 2
19358: PPUSH
19359: LD_VAR 0 3
19363: PPUSH
19364: LD_VAR 0 4
19368: PPUSH
19369: LD_VAR 0 5
19373: PPUSH
19374: CALL_OW 448
19378: IFFALSE 19411
// result := [ chassis , engine , control , weapon ] ;
19380: LD_ADDR_VAR 0 6
19384: PUSH
19385: LD_VAR 0 2
19389: PUSH
19390: LD_VAR 0 3
19394: PUSH
19395: LD_VAR 0 4
19399: PUSH
19400: LD_VAR 0 5
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: ST_TO_ADDR
// end ;
19411: LD_VAR 0 6
19415: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19416: LD_INT 0
19418: PPUSH
// if not chassis or not engine then
19419: LD_VAR 0 1
19423: NOT
19424: PUSH
19425: LD_VAR 0 2
19429: NOT
19430: OR
19431: IFFALSE 19435
// exit ;
19433: GO 19631
// case engine of engine_solar :
19435: LD_VAR 0 2
19439: PUSH
19440: LD_INT 2
19442: DOUBLE
19443: EQUAL
19444: IFTRUE 19448
19446: GO 19486
19448: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19449: LD_ADDR_VAR 0 3
19453: PUSH
19454: LD_INT 11
19456: PUSH
19457: LD_INT 12
19459: PUSH
19460: LD_INT 13
19462: PUSH
19463: LD_INT 14
19465: PUSH
19466: LD_INT 1
19468: PUSH
19469: LD_INT 2
19471: PUSH
19472: LD_INT 3
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: ST_TO_ADDR
19484: GO 19615
19486: LD_INT 1
19488: DOUBLE
19489: EQUAL
19490: IFTRUE 19494
19492: GO 19556
19494: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19495: LD_ADDR_VAR 0 3
19499: PUSH
19500: LD_INT 11
19502: PUSH
19503: LD_INT 12
19505: PUSH
19506: LD_INT 13
19508: PUSH
19509: LD_INT 14
19511: PUSH
19512: LD_INT 1
19514: PUSH
19515: LD_INT 2
19517: PUSH
19518: LD_INT 3
19520: PUSH
19521: LD_INT 4
19523: PUSH
19524: LD_INT 5
19526: PUSH
19527: LD_INT 21
19529: PUSH
19530: LD_INT 23
19532: PUSH
19533: LD_INT 22
19535: PUSH
19536: LD_INT 24
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: ST_TO_ADDR
19554: GO 19615
19556: LD_INT 3
19558: DOUBLE
19559: EQUAL
19560: IFTRUE 19564
19562: GO 19614
19564: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19565: LD_ADDR_VAR 0 3
19569: PUSH
19570: LD_INT 13
19572: PUSH
19573: LD_INT 14
19575: PUSH
19576: LD_INT 2
19578: PUSH
19579: LD_INT 3
19581: PUSH
19582: LD_INT 4
19584: PUSH
19585: LD_INT 5
19587: PUSH
19588: LD_INT 21
19590: PUSH
19591: LD_INT 22
19593: PUSH
19594: LD_INT 23
19596: PUSH
19597: LD_INT 24
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: ST_TO_ADDR
19612: GO 19615
19614: POP
// result := ( chassis in result ) ;
19615: LD_ADDR_VAR 0 3
19619: PUSH
19620: LD_VAR 0 1
19624: PUSH
19625: LD_VAR 0 3
19629: IN
19630: ST_TO_ADDR
// end ;
19631: LD_VAR 0 3
19635: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19636: LD_INT 0
19638: PPUSH
// if not chassis or not weapon then
19639: LD_VAR 0 1
19643: NOT
19644: PUSH
19645: LD_VAR 0 2
19649: NOT
19650: OR
19651: IFFALSE 19655
// exit ;
19653: GO 20715
// case weapon of us_machine_gun :
19655: LD_VAR 0 2
19659: PUSH
19660: LD_INT 2
19662: DOUBLE
19663: EQUAL
19664: IFTRUE 19668
19666: GO 19698
19668: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19669: LD_ADDR_VAR 0 3
19673: PUSH
19674: LD_INT 1
19676: PUSH
19677: LD_INT 2
19679: PUSH
19680: LD_INT 3
19682: PUSH
19683: LD_INT 4
19685: PUSH
19686: LD_INT 5
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: ST_TO_ADDR
19696: GO 20699
19698: LD_INT 3
19700: DOUBLE
19701: EQUAL
19702: IFTRUE 19706
19704: GO 19736
19706: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19707: LD_ADDR_VAR 0 3
19711: PUSH
19712: LD_INT 1
19714: PUSH
19715: LD_INT 2
19717: PUSH
19718: LD_INT 3
19720: PUSH
19721: LD_INT 4
19723: PUSH
19724: LD_INT 5
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: ST_TO_ADDR
19734: GO 20699
19736: LD_INT 11
19738: DOUBLE
19739: EQUAL
19740: IFTRUE 19744
19742: GO 19774
19744: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19745: LD_ADDR_VAR 0 3
19749: PUSH
19750: LD_INT 1
19752: PUSH
19753: LD_INT 2
19755: PUSH
19756: LD_INT 3
19758: PUSH
19759: LD_INT 4
19761: PUSH
19762: LD_INT 5
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: ST_TO_ADDR
19772: GO 20699
19774: LD_INT 4
19776: DOUBLE
19777: EQUAL
19778: IFTRUE 19782
19780: GO 19808
19782: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19783: LD_ADDR_VAR 0 3
19787: PUSH
19788: LD_INT 2
19790: PUSH
19791: LD_INT 3
19793: PUSH
19794: LD_INT 4
19796: PUSH
19797: LD_INT 5
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: ST_TO_ADDR
19806: GO 20699
19808: LD_INT 5
19810: DOUBLE
19811: EQUAL
19812: IFTRUE 19816
19814: GO 19842
19816: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19817: LD_ADDR_VAR 0 3
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: LD_INT 3
19827: PUSH
19828: LD_INT 4
19830: PUSH
19831: LD_INT 5
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: ST_TO_ADDR
19840: GO 20699
19842: LD_INT 9
19844: DOUBLE
19845: EQUAL
19846: IFTRUE 19850
19848: GO 19876
19850: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19851: LD_ADDR_VAR 0 3
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: LD_INT 3
19861: PUSH
19862: LD_INT 4
19864: PUSH
19865: LD_INT 5
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: ST_TO_ADDR
19874: GO 20699
19876: LD_INT 7
19878: DOUBLE
19879: EQUAL
19880: IFTRUE 19884
19882: GO 19910
19884: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19885: LD_ADDR_VAR 0 3
19889: PUSH
19890: LD_INT 2
19892: PUSH
19893: LD_INT 3
19895: PUSH
19896: LD_INT 4
19898: PUSH
19899: LD_INT 5
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: ST_TO_ADDR
19908: GO 20699
19910: LD_INT 12
19912: DOUBLE
19913: EQUAL
19914: IFTRUE 19918
19916: GO 19944
19918: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19919: LD_ADDR_VAR 0 3
19923: PUSH
19924: LD_INT 2
19926: PUSH
19927: LD_INT 3
19929: PUSH
19930: LD_INT 4
19932: PUSH
19933: LD_INT 5
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: ST_TO_ADDR
19942: GO 20699
19944: LD_INT 13
19946: DOUBLE
19947: EQUAL
19948: IFTRUE 19952
19950: GO 19978
19952: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19953: LD_ADDR_VAR 0 3
19957: PUSH
19958: LD_INT 2
19960: PUSH
19961: LD_INT 3
19963: PUSH
19964: LD_INT 4
19966: PUSH
19967: LD_INT 5
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: ST_TO_ADDR
19976: GO 20699
19978: LD_INT 14
19980: DOUBLE
19981: EQUAL
19982: IFTRUE 19986
19984: GO 20004
19986: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19987: LD_ADDR_VAR 0 3
19991: PUSH
19992: LD_INT 4
19994: PUSH
19995: LD_INT 5
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: ST_TO_ADDR
20002: GO 20699
20004: LD_INT 6
20006: DOUBLE
20007: EQUAL
20008: IFTRUE 20012
20010: GO 20030
20012: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20013: LD_ADDR_VAR 0 3
20017: PUSH
20018: LD_INT 4
20020: PUSH
20021: LD_INT 5
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: ST_TO_ADDR
20028: GO 20699
20030: LD_INT 10
20032: DOUBLE
20033: EQUAL
20034: IFTRUE 20038
20036: GO 20056
20038: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20039: LD_ADDR_VAR 0 3
20043: PUSH
20044: LD_INT 4
20046: PUSH
20047: LD_INT 5
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: ST_TO_ADDR
20054: GO 20699
20056: LD_INT 22
20058: DOUBLE
20059: EQUAL
20060: IFTRUE 20064
20062: GO 20090
20064: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20065: LD_ADDR_VAR 0 3
20069: PUSH
20070: LD_INT 11
20072: PUSH
20073: LD_INT 12
20075: PUSH
20076: LD_INT 13
20078: PUSH
20079: LD_INT 14
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: ST_TO_ADDR
20088: GO 20699
20090: LD_INT 23
20092: DOUBLE
20093: EQUAL
20094: IFTRUE 20098
20096: GO 20124
20098: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20099: LD_ADDR_VAR 0 3
20103: PUSH
20104: LD_INT 11
20106: PUSH
20107: LD_INT 12
20109: PUSH
20110: LD_INT 13
20112: PUSH
20113: LD_INT 14
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: ST_TO_ADDR
20122: GO 20699
20124: LD_INT 24
20126: DOUBLE
20127: EQUAL
20128: IFTRUE 20132
20130: GO 20158
20132: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20133: LD_ADDR_VAR 0 3
20137: PUSH
20138: LD_INT 11
20140: PUSH
20141: LD_INT 12
20143: PUSH
20144: LD_INT 13
20146: PUSH
20147: LD_INT 14
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: ST_TO_ADDR
20156: GO 20699
20158: LD_INT 30
20160: DOUBLE
20161: EQUAL
20162: IFTRUE 20166
20164: GO 20192
20166: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20167: LD_ADDR_VAR 0 3
20171: PUSH
20172: LD_INT 11
20174: PUSH
20175: LD_INT 12
20177: PUSH
20178: LD_INT 13
20180: PUSH
20181: LD_INT 14
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: ST_TO_ADDR
20190: GO 20699
20192: LD_INT 25
20194: DOUBLE
20195: EQUAL
20196: IFTRUE 20200
20198: GO 20218
20200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20201: LD_ADDR_VAR 0 3
20205: PUSH
20206: LD_INT 13
20208: PUSH
20209: LD_INT 14
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: ST_TO_ADDR
20216: GO 20699
20218: LD_INT 27
20220: DOUBLE
20221: EQUAL
20222: IFTRUE 20226
20224: GO 20244
20226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20227: LD_ADDR_VAR 0 3
20231: PUSH
20232: LD_INT 13
20234: PUSH
20235: LD_INT 14
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: ST_TO_ADDR
20242: GO 20699
20244: LD_INT 92
20246: DOUBLE
20247: EQUAL
20248: IFTRUE 20252
20250: GO 20278
20252: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20253: LD_ADDR_VAR 0 3
20257: PUSH
20258: LD_INT 11
20260: PUSH
20261: LD_INT 12
20263: PUSH
20264: LD_INT 13
20266: PUSH
20267: LD_INT 14
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: ST_TO_ADDR
20276: GO 20699
20278: LD_INT 28
20280: DOUBLE
20281: EQUAL
20282: IFTRUE 20286
20284: GO 20304
20286: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20287: LD_ADDR_VAR 0 3
20291: PUSH
20292: LD_INT 13
20294: PUSH
20295: LD_INT 14
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: ST_TO_ADDR
20302: GO 20699
20304: LD_INT 29
20306: DOUBLE
20307: EQUAL
20308: IFTRUE 20312
20310: GO 20330
20312: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20313: LD_ADDR_VAR 0 3
20317: PUSH
20318: LD_INT 13
20320: PUSH
20321: LD_INT 14
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: ST_TO_ADDR
20328: GO 20699
20330: LD_INT 31
20332: DOUBLE
20333: EQUAL
20334: IFTRUE 20338
20336: GO 20356
20338: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20339: LD_ADDR_VAR 0 3
20343: PUSH
20344: LD_INT 13
20346: PUSH
20347: LD_INT 14
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: ST_TO_ADDR
20354: GO 20699
20356: LD_INT 26
20358: DOUBLE
20359: EQUAL
20360: IFTRUE 20364
20362: GO 20382
20364: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20365: LD_ADDR_VAR 0 3
20369: PUSH
20370: LD_INT 13
20372: PUSH
20373: LD_INT 14
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: ST_TO_ADDR
20380: GO 20699
20382: LD_INT 42
20384: DOUBLE
20385: EQUAL
20386: IFTRUE 20390
20388: GO 20416
20390: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20391: LD_ADDR_VAR 0 3
20395: PUSH
20396: LD_INT 21
20398: PUSH
20399: LD_INT 22
20401: PUSH
20402: LD_INT 23
20404: PUSH
20405: LD_INT 24
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: ST_TO_ADDR
20414: GO 20699
20416: LD_INT 43
20418: DOUBLE
20419: EQUAL
20420: IFTRUE 20424
20422: GO 20450
20424: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20425: LD_ADDR_VAR 0 3
20429: PUSH
20430: LD_INT 21
20432: PUSH
20433: LD_INT 22
20435: PUSH
20436: LD_INT 23
20438: PUSH
20439: LD_INT 24
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: ST_TO_ADDR
20448: GO 20699
20450: LD_INT 44
20452: DOUBLE
20453: EQUAL
20454: IFTRUE 20458
20456: GO 20484
20458: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20459: LD_ADDR_VAR 0 3
20463: PUSH
20464: LD_INT 21
20466: PUSH
20467: LD_INT 22
20469: PUSH
20470: LD_INT 23
20472: PUSH
20473: LD_INT 24
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: ST_TO_ADDR
20482: GO 20699
20484: LD_INT 45
20486: DOUBLE
20487: EQUAL
20488: IFTRUE 20492
20490: GO 20518
20492: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20493: LD_ADDR_VAR 0 3
20497: PUSH
20498: LD_INT 21
20500: PUSH
20501: LD_INT 22
20503: PUSH
20504: LD_INT 23
20506: PUSH
20507: LD_INT 24
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: ST_TO_ADDR
20516: GO 20699
20518: LD_INT 49
20520: DOUBLE
20521: EQUAL
20522: IFTRUE 20526
20524: GO 20552
20526: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20527: LD_ADDR_VAR 0 3
20531: PUSH
20532: LD_INT 21
20534: PUSH
20535: LD_INT 22
20537: PUSH
20538: LD_INT 23
20540: PUSH
20541: LD_INT 24
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: ST_TO_ADDR
20550: GO 20699
20552: LD_INT 51
20554: DOUBLE
20555: EQUAL
20556: IFTRUE 20560
20558: GO 20586
20560: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20561: LD_ADDR_VAR 0 3
20565: PUSH
20566: LD_INT 21
20568: PUSH
20569: LD_INT 22
20571: PUSH
20572: LD_INT 23
20574: PUSH
20575: LD_INT 24
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: ST_TO_ADDR
20584: GO 20699
20586: LD_INT 52
20588: DOUBLE
20589: EQUAL
20590: IFTRUE 20594
20592: GO 20620
20594: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20595: LD_ADDR_VAR 0 3
20599: PUSH
20600: LD_INT 21
20602: PUSH
20603: LD_INT 22
20605: PUSH
20606: LD_INT 23
20608: PUSH
20609: LD_INT 24
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: ST_TO_ADDR
20618: GO 20699
20620: LD_INT 53
20622: DOUBLE
20623: EQUAL
20624: IFTRUE 20628
20626: GO 20646
20628: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20629: LD_ADDR_VAR 0 3
20633: PUSH
20634: LD_INT 23
20636: PUSH
20637: LD_INT 24
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: ST_TO_ADDR
20644: GO 20699
20646: LD_INT 46
20648: DOUBLE
20649: EQUAL
20650: IFTRUE 20654
20652: GO 20672
20654: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20655: LD_ADDR_VAR 0 3
20659: PUSH
20660: LD_INT 23
20662: PUSH
20663: LD_INT 24
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: ST_TO_ADDR
20670: GO 20699
20672: LD_INT 47
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20698
20680: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20681: LD_ADDR_VAR 0 3
20685: PUSH
20686: LD_INT 23
20688: PUSH
20689: LD_INT 24
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: ST_TO_ADDR
20696: GO 20699
20698: POP
// result := ( chassis in result ) ;
20699: LD_ADDR_VAR 0 3
20703: PUSH
20704: LD_VAR 0 1
20708: PUSH
20709: LD_VAR 0 3
20713: IN
20714: ST_TO_ADDR
// end ;
20715: LD_VAR 0 3
20719: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20720: LD_INT 0
20722: PPUSH
20723: PPUSH
20724: PPUSH
20725: PPUSH
20726: PPUSH
20727: PPUSH
20728: PPUSH
// result := array ;
20729: LD_ADDR_VAR 0 5
20733: PUSH
20734: LD_VAR 0 1
20738: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20739: LD_VAR 0 1
20743: NOT
20744: PUSH
20745: LD_VAR 0 2
20749: NOT
20750: OR
20751: PUSH
20752: LD_VAR 0 3
20756: NOT
20757: OR
20758: PUSH
20759: LD_VAR 0 2
20763: PUSH
20764: LD_VAR 0 1
20768: GREATER
20769: OR
20770: PUSH
20771: LD_VAR 0 3
20775: PUSH
20776: LD_VAR 0 1
20780: GREATER
20781: OR
20782: IFFALSE 20786
// exit ;
20784: GO 21082
// if direction then
20786: LD_VAR 0 4
20790: IFFALSE 20854
// begin d := 1 ;
20792: LD_ADDR_VAR 0 9
20796: PUSH
20797: LD_INT 1
20799: ST_TO_ADDR
// if i_from > i_to then
20800: LD_VAR 0 2
20804: PUSH
20805: LD_VAR 0 3
20809: GREATER
20810: IFFALSE 20836
// length := ( array - i_from ) + i_to else
20812: LD_ADDR_VAR 0 11
20816: PUSH
20817: LD_VAR 0 1
20821: PUSH
20822: LD_VAR 0 2
20826: MINUS
20827: PUSH
20828: LD_VAR 0 3
20832: PLUS
20833: ST_TO_ADDR
20834: GO 20852
// length := i_to - i_from ;
20836: LD_ADDR_VAR 0 11
20840: PUSH
20841: LD_VAR 0 3
20845: PUSH
20846: LD_VAR 0 2
20850: MINUS
20851: ST_TO_ADDR
// end else
20852: GO 20915
// begin d := - 1 ;
20854: LD_ADDR_VAR 0 9
20858: PUSH
20859: LD_INT 1
20861: NEG
20862: ST_TO_ADDR
// if i_from > i_to then
20863: LD_VAR 0 2
20867: PUSH
20868: LD_VAR 0 3
20872: GREATER
20873: IFFALSE 20893
// length := i_from - i_to else
20875: LD_ADDR_VAR 0 11
20879: PUSH
20880: LD_VAR 0 2
20884: PUSH
20885: LD_VAR 0 3
20889: MINUS
20890: ST_TO_ADDR
20891: GO 20915
// length := ( array - i_to ) + i_from ;
20893: LD_ADDR_VAR 0 11
20897: PUSH
20898: LD_VAR 0 1
20902: PUSH
20903: LD_VAR 0 3
20907: MINUS
20908: PUSH
20909: LD_VAR 0 2
20913: PLUS
20914: ST_TO_ADDR
// end ; if not length then
20915: LD_VAR 0 11
20919: NOT
20920: IFFALSE 20924
// exit ;
20922: GO 21082
// tmp := array ;
20924: LD_ADDR_VAR 0 10
20928: PUSH
20929: LD_VAR 0 1
20933: ST_TO_ADDR
// for i = 1 to length do
20934: LD_ADDR_VAR 0 6
20938: PUSH
20939: DOUBLE
20940: LD_INT 1
20942: DEC
20943: ST_TO_ADDR
20944: LD_VAR 0 11
20948: PUSH
20949: FOR_TO
20950: IFFALSE 21070
// begin for j = 1 to array do
20952: LD_ADDR_VAR 0 7
20956: PUSH
20957: DOUBLE
20958: LD_INT 1
20960: DEC
20961: ST_TO_ADDR
20962: LD_VAR 0 1
20966: PUSH
20967: FOR_TO
20968: IFFALSE 21056
// begin k := j + d ;
20970: LD_ADDR_VAR 0 8
20974: PUSH
20975: LD_VAR 0 7
20979: PUSH
20980: LD_VAR 0 9
20984: PLUS
20985: ST_TO_ADDR
// if k > array then
20986: LD_VAR 0 8
20990: PUSH
20991: LD_VAR 0 1
20995: GREATER
20996: IFFALSE 21006
// k := 1 ;
20998: LD_ADDR_VAR 0 8
21002: PUSH
21003: LD_INT 1
21005: ST_TO_ADDR
// if not k then
21006: LD_VAR 0 8
21010: NOT
21011: IFFALSE 21023
// k := array ;
21013: LD_ADDR_VAR 0 8
21017: PUSH
21018: LD_VAR 0 1
21022: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21023: LD_ADDR_VAR 0 10
21027: PUSH
21028: LD_VAR 0 10
21032: PPUSH
21033: LD_VAR 0 8
21037: PPUSH
21038: LD_VAR 0 1
21042: PUSH
21043: LD_VAR 0 7
21047: ARRAY
21048: PPUSH
21049: CALL_OW 1
21053: ST_TO_ADDR
// end ;
21054: GO 20967
21056: POP
21057: POP
// array := tmp ;
21058: LD_ADDR_VAR 0 1
21062: PUSH
21063: LD_VAR 0 10
21067: ST_TO_ADDR
// end ;
21068: GO 20949
21070: POP
21071: POP
// result := array ;
21072: LD_ADDR_VAR 0 5
21076: PUSH
21077: LD_VAR 0 1
21081: ST_TO_ADDR
// end ;
21082: LD_VAR 0 5
21086: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21087: LD_INT 0
21089: PPUSH
21090: PPUSH
// result := 0 ;
21091: LD_ADDR_VAR 0 3
21095: PUSH
21096: LD_INT 0
21098: ST_TO_ADDR
// if not array or not value in array then
21099: LD_VAR 0 1
21103: NOT
21104: PUSH
21105: LD_VAR 0 2
21109: PUSH
21110: LD_VAR 0 1
21114: IN
21115: NOT
21116: OR
21117: IFFALSE 21121
// exit ;
21119: GO 21175
// for i = 1 to array do
21121: LD_ADDR_VAR 0 4
21125: PUSH
21126: DOUBLE
21127: LD_INT 1
21129: DEC
21130: ST_TO_ADDR
21131: LD_VAR 0 1
21135: PUSH
21136: FOR_TO
21137: IFFALSE 21173
// if value = array [ i ] then
21139: LD_VAR 0 2
21143: PUSH
21144: LD_VAR 0 1
21148: PUSH
21149: LD_VAR 0 4
21153: ARRAY
21154: EQUAL
21155: IFFALSE 21171
// begin result := i ;
21157: LD_ADDR_VAR 0 3
21161: PUSH
21162: LD_VAR 0 4
21166: ST_TO_ADDR
// exit ;
21167: POP
21168: POP
21169: GO 21175
// end ;
21171: GO 21136
21173: POP
21174: POP
// end ;
21175: LD_VAR 0 3
21179: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21180: LD_INT 0
21182: PPUSH
// vc_chassis := chassis ;
21183: LD_ADDR_OWVAR 37
21187: PUSH
21188: LD_VAR 0 1
21192: ST_TO_ADDR
// vc_engine := engine ;
21193: LD_ADDR_OWVAR 39
21197: PUSH
21198: LD_VAR 0 2
21202: ST_TO_ADDR
// vc_control := control ;
21203: LD_ADDR_OWVAR 38
21207: PUSH
21208: LD_VAR 0 3
21212: ST_TO_ADDR
// vc_weapon := weapon ;
21213: LD_ADDR_OWVAR 40
21217: PUSH
21218: LD_VAR 0 4
21222: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21223: LD_ADDR_OWVAR 41
21227: PUSH
21228: LD_VAR 0 5
21232: ST_TO_ADDR
// end ;
21233: LD_VAR 0 6
21237: RET
// export function WantPlant ( unit ) ; var task ; begin
21238: LD_INT 0
21240: PPUSH
21241: PPUSH
// result := false ;
21242: LD_ADDR_VAR 0 2
21246: PUSH
21247: LD_INT 0
21249: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21250: LD_ADDR_VAR 0 3
21254: PUSH
21255: LD_VAR 0 1
21259: PPUSH
21260: CALL_OW 437
21264: ST_TO_ADDR
// if task then
21265: LD_VAR 0 3
21269: IFFALSE 21297
// if task [ 1 ] [ 1 ] = p then
21271: LD_VAR 0 3
21275: PUSH
21276: LD_INT 1
21278: ARRAY
21279: PUSH
21280: LD_INT 1
21282: ARRAY
21283: PUSH
21284: LD_STRING p
21286: EQUAL
21287: IFFALSE 21297
// result := true ;
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: LD_INT 1
21296: ST_TO_ADDR
// end ;
21297: LD_VAR 0 2
21301: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21302: LD_INT 0
21304: PPUSH
21305: PPUSH
21306: PPUSH
21307: PPUSH
// if pos < 1 then
21308: LD_VAR 0 2
21312: PUSH
21313: LD_INT 1
21315: LESS
21316: IFFALSE 21320
// exit ;
21318: GO 21623
// if pos = 1 then
21320: LD_VAR 0 2
21324: PUSH
21325: LD_INT 1
21327: EQUAL
21328: IFFALSE 21361
// result := Replace ( arr , pos [ 1 ] , value ) else
21330: LD_ADDR_VAR 0 4
21334: PUSH
21335: LD_VAR 0 1
21339: PPUSH
21340: LD_VAR 0 2
21344: PUSH
21345: LD_INT 1
21347: ARRAY
21348: PPUSH
21349: LD_VAR 0 3
21353: PPUSH
21354: CALL_OW 1
21358: ST_TO_ADDR
21359: GO 21623
// begin tmp := arr ;
21361: LD_ADDR_VAR 0 6
21365: PUSH
21366: LD_VAR 0 1
21370: ST_TO_ADDR
// s_arr := [ tmp ] ;
21371: LD_ADDR_VAR 0 7
21375: PUSH
21376: LD_VAR 0 6
21380: PUSH
21381: EMPTY
21382: LIST
21383: ST_TO_ADDR
// for i = 1 to pos - 1 do
21384: LD_ADDR_VAR 0 5
21388: PUSH
21389: DOUBLE
21390: LD_INT 1
21392: DEC
21393: ST_TO_ADDR
21394: LD_VAR 0 2
21398: PUSH
21399: LD_INT 1
21401: MINUS
21402: PUSH
21403: FOR_TO
21404: IFFALSE 21449
// begin tmp := tmp [ pos [ i ] ] ;
21406: LD_ADDR_VAR 0 6
21410: PUSH
21411: LD_VAR 0 6
21415: PUSH
21416: LD_VAR 0 2
21420: PUSH
21421: LD_VAR 0 5
21425: ARRAY
21426: ARRAY
21427: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21428: LD_ADDR_VAR 0 7
21432: PUSH
21433: LD_VAR 0 7
21437: PUSH
21438: LD_VAR 0 6
21442: PUSH
21443: EMPTY
21444: LIST
21445: ADD
21446: ST_TO_ADDR
// end ;
21447: GO 21403
21449: POP
21450: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21451: LD_ADDR_VAR 0 6
21455: PUSH
21456: LD_VAR 0 6
21460: PPUSH
21461: LD_VAR 0 2
21465: PUSH
21466: LD_VAR 0 2
21470: ARRAY
21471: PPUSH
21472: LD_VAR 0 3
21476: PPUSH
21477: CALL_OW 1
21481: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21482: LD_ADDR_VAR 0 7
21486: PUSH
21487: LD_VAR 0 7
21491: PPUSH
21492: LD_VAR 0 7
21496: PPUSH
21497: LD_VAR 0 6
21501: PPUSH
21502: CALL_OW 1
21506: ST_TO_ADDR
// for i = s_arr downto 2 do
21507: LD_ADDR_VAR 0 5
21511: PUSH
21512: DOUBLE
21513: LD_VAR 0 7
21517: INC
21518: ST_TO_ADDR
21519: LD_INT 2
21521: PUSH
21522: FOR_DOWNTO
21523: IFFALSE 21607
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21525: LD_ADDR_VAR 0 6
21529: PUSH
21530: LD_VAR 0 7
21534: PUSH
21535: LD_VAR 0 5
21539: PUSH
21540: LD_INT 1
21542: MINUS
21543: ARRAY
21544: PPUSH
21545: LD_VAR 0 2
21549: PUSH
21550: LD_VAR 0 5
21554: PUSH
21555: LD_INT 1
21557: MINUS
21558: ARRAY
21559: PPUSH
21560: LD_VAR 0 7
21564: PUSH
21565: LD_VAR 0 5
21569: ARRAY
21570: PPUSH
21571: CALL_OW 1
21575: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21576: LD_ADDR_VAR 0 7
21580: PUSH
21581: LD_VAR 0 7
21585: PPUSH
21586: LD_VAR 0 5
21590: PUSH
21591: LD_INT 1
21593: MINUS
21594: PPUSH
21595: LD_VAR 0 6
21599: PPUSH
21600: CALL_OW 1
21604: ST_TO_ADDR
// end ;
21605: GO 21522
21607: POP
21608: POP
// result := s_arr [ 1 ] ;
21609: LD_ADDR_VAR 0 4
21613: PUSH
21614: LD_VAR 0 7
21618: PUSH
21619: LD_INT 1
21621: ARRAY
21622: ST_TO_ADDR
// end ; end ;
21623: LD_VAR 0 4
21627: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21628: LD_INT 0
21630: PPUSH
21631: PPUSH
// if not list then
21632: LD_VAR 0 1
21636: NOT
21637: IFFALSE 21641
// exit ;
21639: GO 21732
// i := list [ pos1 ] ;
21641: LD_ADDR_VAR 0 5
21645: PUSH
21646: LD_VAR 0 1
21650: PUSH
21651: LD_VAR 0 2
21655: ARRAY
21656: ST_TO_ADDR
// if not i then
21657: LD_VAR 0 5
21661: NOT
21662: IFFALSE 21666
// exit ;
21664: GO 21732
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21666: LD_ADDR_VAR 0 1
21670: PUSH
21671: LD_VAR 0 1
21675: PPUSH
21676: LD_VAR 0 2
21680: PPUSH
21681: LD_VAR 0 1
21685: PUSH
21686: LD_VAR 0 3
21690: ARRAY
21691: PPUSH
21692: CALL_OW 1
21696: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21697: LD_ADDR_VAR 0 1
21701: PUSH
21702: LD_VAR 0 1
21706: PPUSH
21707: LD_VAR 0 3
21711: PPUSH
21712: LD_VAR 0 5
21716: PPUSH
21717: CALL_OW 1
21721: ST_TO_ADDR
// result := list ;
21722: LD_ADDR_VAR 0 4
21726: PUSH
21727: LD_VAR 0 1
21731: ST_TO_ADDR
// end ;
21732: LD_VAR 0 4
21736: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21737: LD_INT 0
21739: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21740: LD_ADDR_VAR 0 5
21744: PUSH
21745: LD_VAR 0 1
21749: PPUSH
21750: CALL_OW 250
21754: PPUSH
21755: LD_VAR 0 1
21759: PPUSH
21760: CALL_OW 251
21764: PPUSH
21765: LD_VAR 0 2
21769: PPUSH
21770: LD_VAR 0 3
21774: PPUSH
21775: LD_VAR 0 4
21779: PPUSH
21780: CALL 22158 0 5
21784: ST_TO_ADDR
// end ;
21785: LD_VAR 0 5
21789: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21790: LD_INT 0
21792: PPUSH
21793: PPUSH
21794: PPUSH
21795: PPUSH
// if not list or not unit then
21796: LD_VAR 0 2
21800: NOT
21801: PUSH
21802: LD_VAR 0 1
21806: NOT
21807: OR
21808: IFFALSE 21812
// exit ;
21810: GO 22153
// result := [ ] ;
21812: LD_ADDR_VAR 0 5
21816: PUSH
21817: EMPTY
21818: ST_TO_ADDR
// for i in list do
21819: LD_ADDR_VAR 0 6
21823: PUSH
21824: LD_VAR 0 2
21828: PUSH
21829: FOR_IN
21830: IFFALSE 22048
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21832: LD_ADDR_VAR 0 8
21836: PUSH
21837: LD_VAR 0 1
21841: PPUSH
21842: LD_VAR 0 6
21846: PUSH
21847: LD_INT 1
21849: ARRAY
21850: PPUSH
21851: LD_VAR 0 6
21855: PUSH
21856: LD_INT 2
21858: ARRAY
21859: PPUSH
21860: CALL_OW 297
21864: ST_TO_ADDR
// if not Count ( result ) then
21865: LD_VAR 0 5
21869: PPUSH
21870: CALL 18442 0 1
21874: NOT
21875: IFFALSE 21908
// begin result := Join ( result , [ i , tmp ] ) ;
21877: LD_ADDR_VAR 0 5
21881: PUSH
21882: LD_VAR 0 5
21886: PPUSH
21887: LD_VAR 0 6
21891: PUSH
21892: LD_VAR 0 8
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PPUSH
21901: CALL 54051 0 2
21905: ST_TO_ADDR
// continue ;
21906: GO 21829
// end ; if result [ result ] [ 2 ] <= tmp then
21908: LD_VAR 0 5
21912: PUSH
21913: LD_VAR 0 5
21917: ARRAY
21918: PUSH
21919: LD_INT 2
21921: ARRAY
21922: PUSH
21923: LD_VAR 0 8
21927: LESSEQUAL
21928: IFFALSE 21961
// result := Join ( result , [ i , tmp ] ) else
21930: LD_ADDR_VAR 0 5
21934: PUSH
21935: LD_VAR 0 5
21939: PPUSH
21940: LD_VAR 0 6
21944: PUSH
21945: LD_VAR 0 8
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PPUSH
21954: CALL 54051 0 2
21958: ST_TO_ADDR
21959: GO 22046
// begin for j := 1 to Count ( result ) do
21961: LD_ADDR_VAR 0 7
21965: PUSH
21966: DOUBLE
21967: LD_INT 1
21969: DEC
21970: ST_TO_ADDR
21971: LD_VAR 0 5
21975: PPUSH
21976: CALL 18442 0 1
21980: PUSH
21981: FOR_TO
21982: IFFALSE 22044
// begin if tmp < result [ j ] [ 2 ] then
21984: LD_VAR 0 8
21988: PUSH
21989: LD_VAR 0 5
21993: PUSH
21994: LD_VAR 0 7
21998: ARRAY
21999: PUSH
22000: LD_INT 2
22002: ARRAY
22003: LESS
22004: IFFALSE 22042
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22006: LD_ADDR_VAR 0 5
22010: PUSH
22011: LD_VAR 0 5
22015: PPUSH
22016: LD_VAR 0 7
22020: PPUSH
22021: LD_VAR 0 6
22025: PUSH
22026: LD_VAR 0 8
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PPUSH
22035: CALL_OW 2
22039: ST_TO_ADDR
// break ;
22040: GO 22044
// end ; end ;
22042: GO 21981
22044: POP
22045: POP
// end ; end ;
22046: GO 21829
22048: POP
22049: POP
// if result and not asc then
22050: LD_VAR 0 5
22054: PUSH
22055: LD_VAR 0 3
22059: NOT
22060: AND
22061: IFFALSE 22078
// result := ReverseArray ( result ) ;
22063: LD_ADDR_VAR 0 5
22067: PUSH
22068: LD_VAR 0 5
22072: PPUSH
22073: CALL 49318 0 1
22077: ST_TO_ADDR
// tmp := [ ] ;
22078: LD_ADDR_VAR 0 8
22082: PUSH
22083: EMPTY
22084: ST_TO_ADDR
// if mode then
22085: LD_VAR 0 4
22089: IFFALSE 22153
// begin for i := 1 to result do
22091: LD_ADDR_VAR 0 6
22095: PUSH
22096: DOUBLE
22097: LD_INT 1
22099: DEC
22100: ST_TO_ADDR
22101: LD_VAR 0 5
22105: PUSH
22106: FOR_TO
22107: IFFALSE 22141
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22109: LD_ADDR_VAR 0 8
22113: PUSH
22114: LD_VAR 0 8
22118: PPUSH
22119: LD_VAR 0 5
22123: PUSH
22124: LD_VAR 0 6
22128: ARRAY
22129: PUSH
22130: LD_INT 1
22132: ARRAY
22133: PPUSH
22134: CALL 54051 0 2
22138: ST_TO_ADDR
22139: GO 22106
22141: POP
22142: POP
// result := tmp ;
22143: LD_ADDR_VAR 0 5
22147: PUSH
22148: LD_VAR 0 8
22152: ST_TO_ADDR
// end ; end ;
22153: LD_VAR 0 5
22157: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22158: LD_INT 0
22160: PPUSH
22161: PPUSH
22162: PPUSH
22163: PPUSH
// if not list then
22164: LD_VAR 0 3
22168: NOT
22169: IFFALSE 22173
// exit ;
22171: GO 22561
// result := [ ] ;
22173: LD_ADDR_VAR 0 6
22177: PUSH
22178: EMPTY
22179: ST_TO_ADDR
// for i in list do
22180: LD_ADDR_VAR 0 7
22184: PUSH
22185: LD_VAR 0 3
22189: PUSH
22190: FOR_IN
22191: IFFALSE 22393
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22193: LD_ADDR_VAR 0 9
22197: PUSH
22198: LD_VAR 0 7
22202: PPUSH
22203: LD_VAR 0 1
22207: PPUSH
22208: LD_VAR 0 2
22212: PPUSH
22213: CALL_OW 297
22217: ST_TO_ADDR
// if not result then
22218: LD_VAR 0 6
22222: NOT
22223: IFFALSE 22249
// result := [ [ i , tmp ] ] else
22225: LD_ADDR_VAR 0 6
22229: PUSH
22230: LD_VAR 0 7
22234: PUSH
22235: LD_VAR 0 9
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: EMPTY
22245: LIST
22246: ST_TO_ADDR
22247: GO 22391
// begin if result [ result ] [ 2 ] < tmp then
22249: LD_VAR 0 6
22253: PUSH
22254: LD_VAR 0 6
22258: ARRAY
22259: PUSH
22260: LD_INT 2
22262: ARRAY
22263: PUSH
22264: LD_VAR 0 9
22268: LESS
22269: IFFALSE 22311
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22271: LD_ADDR_VAR 0 6
22275: PUSH
22276: LD_VAR 0 6
22280: PPUSH
22281: LD_VAR 0 6
22285: PUSH
22286: LD_INT 1
22288: PLUS
22289: PPUSH
22290: LD_VAR 0 7
22294: PUSH
22295: LD_VAR 0 9
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PPUSH
22304: CALL_OW 2
22308: ST_TO_ADDR
22309: GO 22391
// for j = 1 to result do
22311: LD_ADDR_VAR 0 8
22315: PUSH
22316: DOUBLE
22317: LD_INT 1
22319: DEC
22320: ST_TO_ADDR
22321: LD_VAR 0 6
22325: PUSH
22326: FOR_TO
22327: IFFALSE 22389
// begin if tmp < result [ j ] [ 2 ] then
22329: LD_VAR 0 9
22333: PUSH
22334: LD_VAR 0 6
22338: PUSH
22339: LD_VAR 0 8
22343: ARRAY
22344: PUSH
22345: LD_INT 2
22347: ARRAY
22348: LESS
22349: IFFALSE 22387
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22351: LD_ADDR_VAR 0 6
22355: PUSH
22356: LD_VAR 0 6
22360: PPUSH
22361: LD_VAR 0 8
22365: PPUSH
22366: LD_VAR 0 7
22370: PUSH
22371: LD_VAR 0 9
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PPUSH
22380: CALL_OW 2
22384: ST_TO_ADDR
// break ;
22385: GO 22389
// end ; end ;
22387: GO 22326
22389: POP
22390: POP
// end ; end ;
22391: GO 22190
22393: POP
22394: POP
// if result and not asc then
22395: LD_VAR 0 6
22399: PUSH
22400: LD_VAR 0 4
22404: NOT
22405: AND
22406: IFFALSE 22481
// begin tmp := result ;
22408: LD_ADDR_VAR 0 9
22412: PUSH
22413: LD_VAR 0 6
22417: ST_TO_ADDR
// for i = tmp downto 1 do
22418: LD_ADDR_VAR 0 7
22422: PUSH
22423: DOUBLE
22424: LD_VAR 0 9
22428: INC
22429: ST_TO_ADDR
22430: LD_INT 1
22432: PUSH
22433: FOR_DOWNTO
22434: IFFALSE 22479
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22436: LD_ADDR_VAR 0 6
22440: PUSH
22441: LD_VAR 0 6
22445: PPUSH
22446: LD_VAR 0 9
22450: PUSH
22451: LD_VAR 0 7
22455: MINUS
22456: PUSH
22457: LD_INT 1
22459: PLUS
22460: PPUSH
22461: LD_VAR 0 9
22465: PUSH
22466: LD_VAR 0 7
22470: ARRAY
22471: PPUSH
22472: CALL_OW 1
22476: ST_TO_ADDR
22477: GO 22433
22479: POP
22480: POP
// end ; tmp := [ ] ;
22481: LD_ADDR_VAR 0 9
22485: PUSH
22486: EMPTY
22487: ST_TO_ADDR
// if mode then
22488: LD_VAR 0 5
22492: IFFALSE 22561
// begin for i = 1 to result do
22494: LD_ADDR_VAR 0 7
22498: PUSH
22499: DOUBLE
22500: LD_INT 1
22502: DEC
22503: ST_TO_ADDR
22504: LD_VAR 0 6
22508: PUSH
22509: FOR_TO
22510: IFFALSE 22549
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22512: LD_ADDR_VAR 0 9
22516: PUSH
22517: LD_VAR 0 9
22521: PPUSH
22522: LD_VAR 0 7
22526: PPUSH
22527: LD_VAR 0 6
22531: PUSH
22532: LD_VAR 0 7
22536: ARRAY
22537: PUSH
22538: LD_INT 1
22540: ARRAY
22541: PPUSH
22542: CALL_OW 1
22546: ST_TO_ADDR
22547: GO 22509
22549: POP
22550: POP
// result := tmp ;
22551: LD_ADDR_VAR 0 6
22555: PUSH
22556: LD_VAR 0 9
22560: ST_TO_ADDR
// end ; end ;
22561: LD_VAR 0 6
22565: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22566: LD_INT 0
22568: PPUSH
22569: PPUSH
22570: PPUSH
22571: PPUSH
22572: PPUSH
22573: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22574: LD_ADDR_VAR 0 5
22578: PUSH
22579: LD_INT 0
22581: PUSH
22582: LD_INT 0
22584: PUSH
22585: LD_INT 0
22587: PUSH
22588: EMPTY
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: ST_TO_ADDR
// if not x or not y then
22596: LD_VAR 0 2
22600: NOT
22601: PUSH
22602: LD_VAR 0 3
22606: NOT
22607: OR
22608: IFFALSE 22612
// exit ;
22610: GO 24262
// if not range then
22612: LD_VAR 0 4
22616: NOT
22617: IFFALSE 22627
// range := 10 ;
22619: LD_ADDR_VAR 0 4
22623: PUSH
22624: LD_INT 10
22626: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22627: LD_ADDR_VAR 0 8
22631: PUSH
22632: LD_INT 81
22634: PUSH
22635: LD_VAR 0 1
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 92
22646: PUSH
22647: LD_VAR 0 2
22651: PUSH
22652: LD_VAR 0 3
22656: PUSH
22657: LD_VAR 0 4
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 3
22670: PUSH
22671: LD_INT 21
22673: PUSH
22674: LD_INT 3
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: LIST
22689: PPUSH
22690: CALL_OW 69
22694: ST_TO_ADDR
// if not tmp then
22695: LD_VAR 0 8
22699: NOT
22700: IFFALSE 22704
// exit ;
22702: GO 24262
// for i in tmp do
22704: LD_ADDR_VAR 0 6
22708: PUSH
22709: LD_VAR 0 8
22713: PUSH
22714: FOR_IN
22715: IFFALSE 24237
// begin points := [ 0 , 0 , 0 ] ;
22717: LD_ADDR_VAR 0 9
22721: PUSH
22722: LD_INT 0
22724: PUSH
22725: LD_INT 0
22727: PUSH
22728: LD_INT 0
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: LIST
22735: ST_TO_ADDR
// bpoints := 1 ;
22736: LD_ADDR_VAR 0 10
22740: PUSH
22741: LD_INT 1
22743: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22744: LD_VAR 0 6
22748: PPUSH
22749: CALL_OW 247
22753: PUSH
22754: LD_INT 1
22756: DOUBLE
22757: EQUAL
22758: IFTRUE 22762
22760: GO 23340
22762: POP
// begin if GetClass ( i ) = 1 then
22763: LD_VAR 0 6
22767: PPUSH
22768: CALL_OW 257
22772: PUSH
22773: LD_INT 1
22775: EQUAL
22776: IFFALSE 22797
// points := [ 10 , 5 , 3 ] ;
22778: LD_ADDR_VAR 0 9
22782: PUSH
22783: LD_INT 10
22785: PUSH
22786: LD_INT 5
22788: PUSH
22789: LD_INT 3
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: LIST
22796: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22797: LD_VAR 0 6
22801: PPUSH
22802: CALL_OW 257
22806: PUSH
22807: LD_INT 2
22809: PUSH
22810: LD_INT 3
22812: PUSH
22813: LD_INT 4
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: LIST
22820: IN
22821: IFFALSE 22842
// points := [ 3 , 2 , 1 ] ;
22823: LD_ADDR_VAR 0 9
22827: PUSH
22828: LD_INT 3
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: LD_INT 1
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: LIST
22841: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22842: LD_VAR 0 6
22846: PPUSH
22847: CALL_OW 257
22851: PUSH
22852: LD_INT 5
22854: EQUAL
22855: IFFALSE 22876
// points := [ 130 , 5 , 2 ] ;
22857: LD_ADDR_VAR 0 9
22861: PUSH
22862: LD_INT 130
22864: PUSH
22865: LD_INT 5
22867: PUSH
22868: LD_INT 2
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: LIST
22875: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22876: LD_VAR 0 6
22880: PPUSH
22881: CALL_OW 257
22885: PUSH
22886: LD_INT 8
22888: EQUAL
22889: IFFALSE 22910
// points := [ 35 , 35 , 30 ] ;
22891: LD_ADDR_VAR 0 9
22895: PUSH
22896: LD_INT 35
22898: PUSH
22899: LD_INT 35
22901: PUSH
22902: LD_INT 30
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: LIST
22909: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22910: LD_VAR 0 6
22914: PPUSH
22915: CALL_OW 257
22919: PUSH
22920: LD_INT 9
22922: EQUAL
22923: IFFALSE 22944
// points := [ 20 , 55 , 40 ] ;
22925: LD_ADDR_VAR 0 9
22929: PUSH
22930: LD_INT 20
22932: PUSH
22933: LD_INT 55
22935: PUSH
22936: LD_INT 40
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: LIST
22943: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22944: LD_VAR 0 6
22948: PPUSH
22949: CALL_OW 257
22953: PUSH
22954: LD_INT 12
22956: PUSH
22957: LD_INT 16
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: IN
22964: IFFALSE 22985
// points := [ 5 , 3 , 2 ] ;
22966: LD_ADDR_VAR 0 9
22970: PUSH
22971: LD_INT 5
22973: PUSH
22974: LD_INT 3
22976: PUSH
22977: LD_INT 2
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22985: LD_VAR 0 6
22989: PPUSH
22990: CALL_OW 257
22994: PUSH
22995: LD_INT 17
22997: EQUAL
22998: IFFALSE 23019
// points := [ 100 , 50 , 75 ] ;
23000: LD_ADDR_VAR 0 9
23004: PUSH
23005: LD_INT 100
23007: PUSH
23008: LD_INT 50
23010: PUSH
23011: LD_INT 75
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: LIST
23018: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23019: LD_VAR 0 6
23023: PPUSH
23024: CALL_OW 257
23028: PUSH
23029: LD_INT 15
23031: EQUAL
23032: IFFALSE 23053
// points := [ 10 , 5 , 3 ] ;
23034: LD_ADDR_VAR 0 9
23038: PUSH
23039: LD_INT 10
23041: PUSH
23042: LD_INT 5
23044: PUSH
23045: LD_INT 3
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: LIST
23052: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23053: LD_VAR 0 6
23057: PPUSH
23058: CALL_OW 257
23062: PUSH
23063: LD_INT 14
23065: EQUAL
23066: IFFALSE 23087
// points := [ 10 , 0 , 0 ] ;
23068: LD_ADDR_VAR 0 9
23072: PUSH
23073: LD_INT 10
23075: PUSH
23076: LD_INT 0
23078: PUSH
23079: LD_INT 0
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: LIST
23086: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23087: LD_VAR 0 6
23091: PPUSH
23092: CALL_OW 257
23096: PUSH
23097: LD_INT 11
23099: EQUAL
23100: IFFALSE 23121
// points := [ 30 , 10 , 5 ] ;
23102: LD_ADDR_VAR 0 9
23106: PUSH
23107: LD_INT 30
23109: PUSH
23110: LD_INT 10
23112: PUSH
23113: LD_INT 5
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: LIST
23120: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23121: LD_VAR 0 1
23125: PPUSH
23126: LD_INT 5
23128: PPUSH
23129: CALL_OW 321
23133: PUSH
23134: LD_INT 2
23136: EQUAL
23137: IFFALSE 23154
// bpoints := bpoints * 1.8 ;
23139: LD_ADDR_VAR 0 10
23143: PUSH
23144: LD_VAR 0 10
23148: PUSH
23149: LD_REAL  1.80000000000000E+0000
23152: MUL
23153: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23154: LD_VAR 0 6
23158: PPUSH
23159: CALL_OW 257
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: LD_INT 2
23169: PUSH
23170: LD_INT 3
23172: PUSH
23173: LD_INT 4
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: IN
23182: PUSH
23183: LD_VAR 0 1
23187: PPUSH
23188: LD_INT 51
23190: PPUSH
23191: CALL_OW 321
23195: PUSH
23196: LD_INT 2
23198: EQUAL
23199: AND
23200: IFFALSE 23217
// bpoints := bpoints * 1.2 ;
23202: LD_ADDR_VAR 0 10
23206: PUSH
23207: LD_VAR 0 10
23211: PUSH
23212: LD_REAL  1.20000000000000E+0000
23215: MUL
23216: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23217: LD_VAR 0 6
23221: PPUSH
23222: CALL_OW 257
23226: PUSH
23227: LD_INT 5
23229: PUSH
23230: LD_INT 7
23232: PUSH
23233: LD_INT 9
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: IN
23241: PUSH
23242: LD_VAR 0 1
23246: PPUSH
23247: LD_INT 52
23249: PPUSH
23250: CALL_OW 321
23254: PUSH
23255: LD_INT 2
23257: EQUAL
23258: AND
23259: IFFALSE 23276
// bpoints := bpoints * 1.5 ;
23261: LD_ADDR_VAR 0 10
23265: PUSH
23266: LD_VAR 0 10
23270: PUSH
23271: LD_REAL  1.50000000000000E+0000
23274: MUL
23275: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23276: LD_VAR 0 1
23280: PPUSH
23281: LD_INT 66
23283: PPUSH
23284: CALL_OW 321
23288: PUSH
23289: LD_INT 2
23291: EQUAL
23292: IFFALSE 23309
// bpoints := bpoints * 1.1 ;
23294: LD_ADDR_VAR 0 10
23298: PUSH
23299: LD_VAR 0 10
23303: PUSH
23304: LD_REAL  1.10000000000000E+0000
23307: MUL
23308: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23309: LD_ADDR_VAR 0 10
23313: PUSH
23314: LD_VAR 0 10
23318: PUSH
23319: LD_VAR 0 6
23323: PPUSH
23324: LD_INT 1
23326: PPUSH
23327: CALL_OW 259
23331: PUSH
23332: LD_REAL  1.15000000000000E+0000
23335: MUL
23336: MUL
23337: ST_TO_ADDR
// end ; unit_vehicle :
23338: GO 24166
23340: LD_INT 2
23342: DOUBLE
23343: EQUAL
23344: IFTRUE 23348
23346: GO 24154
23348: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23349: LD_VAR 0 6
23353: PPUSH
23354: CALL_OW 264
23358: PUSH
23359: LD_INT 2
23361: PUSH
23362: LD_INT 42
23364: PUSH
23365: LD_INT 24
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: LIST
23372: IN
23373: IFFALSE 23394
// points := [ 25 , 5 , 3 ] ;
23375: LD_ADDR_VAR 0 9
23379: PUSH
23380: LD_INT 25
23382: PUSH
23383: LD_INT 5
23385: PUSH
23386: LD_INT 3
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: LIST
23393: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23394: LD_VAR 0 6
23398: PPUSH
23399: CALL_OW 264
23403: PUSH
23404: LD_INT 4
23406: PUSH
23407: LD_INT 43
23409: PUSH
23410: LD_INT 25
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: LIST
23417: IN
23418: IFFALSE 23439
// points := [ 40 , 15 , 5 ] ;
23420: LD_ADDR_VAR 0 9
23424: PUSH
23425: LD_INT 40
23427: PUSH
23428: LD_INT 15
23430: PUSH
23431: LD_INT 5
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: LIST
23438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23439: LD_VAR 0 6
23443: PPUSH
23444: CALL_OW 264
23448: PUSH
23449: LD_INT 3
23451: PUSH
23452: LD_INT 23
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: IN
23459: IFFALSE 23480
// points := [ 7 , 25 , 8 ] ;
23461: LD_ADDR_VAR 0 9
23465: PUSH
23466: LD_INT 7
23468: PUSH
23469: LD_INT 25
23471: PUSH
23472: LD_INT 8
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: LIST
23479: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23480: LD_VAR 0 6
23484: PPUSH
23485: CALL_OW 264
23489: PUSH
23490: LD_INT 5
23492: PUSH
23493: LD_INT 27
23495: PUSH
23496: LD_INT 44
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: IN
23504: IFFALSE 23525
// points := [ 14 , 50 , 16 ] ;
23506: LD_ADDR_VAR 0 9
23510: PUSH
23511: LD_INT 14
23513: PUSH
23514: LD_INT 50
23516: PUSH
23517: LD_INT 16
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: LIST
23524: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23525: LD_VAR 0 6
23529: PPUSH
23530: CALL_OW 264
23534: PUSH
23535: LD_INT 6
23537: PUSH
23538: LD_INT 46
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: IN
23545: IFFALSE 23566
// points := [ 32 , 120 , 70 ] ;
23547: LD_ADDR_VAR 0 9
23551: PUSH
23552: LD_INT 32
23554: PUSH
23555: LD_INT 120
23557: PUSH
23558: LD_INT 70
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: LIST
23565: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23566: LD_VAR 0 6
23570: PPUSH
23571: CALL_OW 264
23575: PUSH
23576: LD_INT 7
23578: PUSH
23579: LD_INT 28
23581: PUSH
23582: LD_INT 45
23584: PUSH
23585: LD_INT 92
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: IN
23594: IFFALSE 23615
// points := [ 35 , 20 , 45 ] ;
23596: LD_ADDR_VAR 0 9
23600: PUSH
23601: LD_INT 35
23603: PUSH
23604: LD_INT 20
23606: PUSH
23607: LD_INT 45
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: LIST
23614: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23615: LD_VAR 0 6
23619: PPUSH
23620: CALL_OW 264
23624: PUSH
23625: LD_INT 47
23627: PUSH
23628: EMPTY
23629: LIST
23630: IN
23631: IFFALSE 23652
// points := [ 67 , 45 , 75 ] ;
23633: LD_ADDR_VAR 0 9
23637: PUSH
23638: LD_INT 67
23640: PUSH
23641: LD_INT 45
23643: PUSH
23644: LD_INT 75
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: LIST
23651: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23652: LD_VAR 0 6
23656: PPUSH
23657: CALL_OW 264
23661: PUSH
23662: LD_INT 26
23664: PUSH
23665: EMPTY
23666: LIST
23667: IN
23668: IFFALSE 23689
// points := [ 120 , 30 , 80 ] ;
23670: LD_ADDR_VAR 0 9
23674: PUSH
23675: LD_INT 120
23677: PUSH
23678: LD_INT 30
23680: PUSH
23681: LD_INT 80
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: LIST
23688: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23689: LD_VAR 0 6
23693: PPUSH
23694: CALL_OW 264
23698: PUSH
23699: LD_INT 22
23701: PUSH
23702: EMPTY
23703: LIST
23704: IN
23705: IFFALSE 23726
// points := [ 40 , 1 , 1 ] ;
23707: LD_ADDR_VAR 0 9
23711: PUSH
23712: LD_INT 40
23714: PUSH
23715: LD_INT 1
23717: PUSH
23718: LD_INT 1
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: LIST
23725: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23726: LD_VAR 0 6
23730: PPUSH
23731: CALL_OW 264
23735: PUSH
23736: LD_INT 29
23738: PUSH
23739: EMPTY
23740: LIST
23741: IN
23742: IFFALSE 23763
// points := [ 70 , 200 , 400 ] ;
23744: LD_ADDR_VAR 0 9
23748: PUSH
23749: LD_INT 70
23751: PUSH
23752: LD_INT 200
23754: PUSH
23755: LD_INT 400
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23763: LD_VAR 0 6
23767: PPUSH
23768: CALL_OW 264
23772: PUSH
23773: LD_INT 14
23775: PUSH
23776: LD_INT 53
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: IN
23783: IFFALSE 23804
// points := [ 40 , 10 , 20 ] ;
23785: LD_ADDR_VAR 0 9
23789: PUSH
23790: LD_INT 40
23792: PUSH
23793: LD_INT 10
23795: PUSH
23796: LD_INT 20
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: LIST
23803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23804: LD_VAR 0 6
23808: PPUSH
23809: CALL_OW 264
23813: PUSH
23814: LD_INT 9
23816: PUSH
23817: EMPTY
23818: LIST
23819: IN
23820: IFFALSE 23841
// points := [ 5 , 70 , 20 ] ;
23822: LD_ADDR_VAR 0 9
23826: PUSH
23827: LD_INT 5
23829: PUSH
23830: LD_INT 70
23832: PUSH
23833: LD_INT 20
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: LIST
23840: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23841: LD_VAR 0 6
23845: PPUSH
23846: CALL_OW 264
23850: PUSH
23851: LD_INT 10
23853: PUSH
23854: EMPTY
23855: LIST
23856: IN
23857: IFFALSE 23878
// points := [ 35 , 110 , 70 ] ;
23859: LD_ADDR_VAR 0 9
23863: PUSH
23864: LD_INT 35
23866: PUSH
23867: LD_INT 110
23869: PUSH
23870: LD_INT 70
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23878: LD_VAR 0 6
23882: PPUSH
23883: CALL_OW 265
23887: PUSH
23888: LD_INT 25
23890: EQUAL
23891: IFFALSE 23912
// points := [ 80 , 65 , 100 ] ;
23893: LD_ADDR_VAR 0 9
23897: PUSH
23898: LD_INT 80
23900: PUSH
23901: LD_INT 65
23903: PUSH
23904: LD_INT 100
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: LIST
23911: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23912: LD_VAR 0 6
23916: PPUSH
23917: CALL_OW 263
23921: PUSH
23922: LD_INT 1
23924: EQUAL
23925: IFFALSE 23960
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23927: LD_ADDR_VAR 0 10
23931: PUSH
23932: LD_VAR 0 10
23936: PUSH
23937: LD_VAR 0 6
23941: PPUSH
23942: CALL_OW 311
23946: PPUSH
23947: LD_INT 3
23949: PPUSH
23950: CALL_OW 259
23954: PUSH
23955: LD_INT 4
23957: MUL
23958: MUL
23959: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23960: LD_VAR 0 6
23964: PPUSH
23965: CALL_OW 263
23969: PUSH
23970: LD_INT 2
23972: EQUAL
23973: IFFALSE 24024
// begin j := IsControledBy ( i ) ;
23975: LD_ADDR_VAR 0 7
23979: PUSH
23980: LD_VAR 0 6
23984: PPUSH
23985: CALL_OW 312
23989: ST_TO_ADDR
// if j then
23990: LD_VAR 0 7
23994: IFFALSE 24024
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23996: LD_ADDR_VAR 0 10
24000: PUSH
24001: LD_VAR 0 10
24005: PUSH
24006: LD_VAR 0 7
24010: PPUSH
24011: LD_INT 3
24013: PPUSH
24014: CALL_OW 259
24018: PUSH
24019: LD_INT 3
24021: MUL
24022: MUL
24023: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24024: LD_VAR 0 6
24028: PPUSH
24029: CALL_OW 264
24033: PUSH
24034: LD_INT 5
24036: PUSH
24037: LD_INT 6
24039: PUSH
24040: LD_INT 46
24042: PUSH
24043: LD_INT 44
24045: PUSH
24046: LD_INT 47
24048: PUSH
24049: LD_INT 45
24051: PUSH
24052: LD_INT 28
24054: PUSH
24055: LD_INT 7
24057: PUSH
24058: LD_INT 27
24060: PUSH
24061: LD_INT 29
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: IN
24076: PUSH
24077: LD_VAR 0 1
24081: PPUSH
24082: LD_INT 52
24084: PPUSH
24085: CALL_OW 321
24089: PUSH
24090: LD_INT 2
24092: EQUAL
24093: AND
24094: IFFALSE 24111
// bpoints := bpoints * 1.2 ;
24096: LD_ADDR_VAR 0 10
24100: PUSH
24101: LD_VAR 0 10
24105: PUSH
24106: LD_REAL  1.20000000000000E+0000
24109: MUL
24110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24111: LD_VAR 0 6
24115: PPUSH
24116: CALL_OW 264
24120: PUSH
24121: LD_INT 6
24123: PUSH
24124: LD_INT 46
24126: PUSH
24127: LD_INT 47
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: LIST
24134: IN
24135: IFFALSE 24152
// bpoints := bpoints * 1.2 ;
24137: LD_ADDR_VAR 0 10
24141: PUSH
24142: LD_VAR 0 10
24146: PUSH
24147: LD_REAL  1.20000000000000E+0000
24150: MUL
24151: ST_TO_ADDR
// end ; unit_building :
24152: GO 24166
24154: LD_INT 3
24156: DOUBLE
24157: EQUAL
24158: IFTRUE 24162
24160: GO 24165
24162: POP
// ; end ;
24163: GO 24166
24165: POP
// for j = 1 to 3 do
24166: LD_ADDR_VAR 0 7
24170: PUSH
24171: DOUBLE
24172: LD_INT 1
24174: DEC
24175: ST_TO_ADDR
24176: LD_INT 3
24178: PUSH
24179: FOR_TO
24180: IFFALSE 24233
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24182: LD_ADDR_VAR 0 5
24186: PUSH
24187: LD_VAR 0 5
24191: PPUSH
24192: LD_VAR 0 7
24196: PPUSH
24197: LD_VAR 0 5
24201: PUSH
24202: LD_VAR 0 7
24206: ARRAY
24207: PUSH
24208: LD_VAR 0 9
24212: PUSH
24213: LD_VAR 0 7
24217: ARRAY
24218: PUSH
24219: LD_VAR 0 10
24223: MUL
24224: PLUS
24225: PPUSH
24226: CALL_OW 1
24230: ST_TO_ADDR
24231: GO 24179
24233: POP
24234: POP
// end ;
24235: GO 22714
24237: POP
24238: POP
// result := Replace ( result , 4 , tmp ) ;
24239: LD_ADDR_VAR 0 5
24243: PUSH
24244: LD_VAR 0 5
24248: PPUSH
24249: LD_INT 4
24251: PPUSH
24252: LD_VAR 0 8
24256: PPUSH
24257: CALL_OW 1
24261: ST_TO_ADDR
// end ;
24262: LD_VAR 0 5
24266: RET
// export function DangerAtRange ( unit , range ) ; begin
24267: LD_INT 0
24269: PPUSH
// if not unit then
24270: LD_VAR 0 1
24274: NOT
24275: IFFALSE 24279
// exit ;
24277: GO 24324
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24279: LD_ADDR_VAR 0 3
24283: PUSH
24284: LD_VAR 0 1
24288: PPUSH
24289: CALL_OW 255
24293: PPUSH
24294: LD_VAR 0 1
24298: PPUSH
24299: CALL_OW 250
24303: PPUSH
24304: LD_VAR 0 1
24308: PPUSH
24309: CALL_OW 251
24313: PPUSH
24314: LD_VAR 0 2
24318: PPUSH
24319: CALL 22566 0 4
24323: ST_TO_ADDR
// end ;
24324: LD_VAR 0 3
24328: RET
// export function DangerInArea ( side , area ) ; begin
24329: LD_INT 0
24331: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24332: LD_ADDR_VAR 0 3
24336: PUSH
24337: LD_VAR 0 2
24341: PPUSH
24342: LD_INT 81
24344: PUSH
24345: LD_VAR 0 1
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PPUSH
24354: CALL_OW 70
24358: ST_TO_ADDR
// end ;
24359: LD_VAR 0 3
24363: RET
// export function IsExtension ( b ) ; begin
24364: LD_INT 0
24366: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24367: LD_ADDR_VAR 0 2
24371: PUSH
24372: LD_VAR 0 1
24376: PUSH
24377: LD_INT 23
24379: PUSH
24380: LD_INT 20
24382: PUSH
24383: LD_INT 22
24385: PUSH
24386: LD_INT 17
24388: PUSH
24389: LD_INT 24
24391: PUSH
24392: LD_INT 21
24394: PUSH
24395: LD_INT 19
24397: PUSH
24398: LD_INT 16
24400: PUSH
24401: LD_INT 25
24403: PUSH
24404: LD_INT 18
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: IN
24419: ST_TO_ADDR
// end ;
24420: LD_VAR 0 2
24424: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24425: LD_INT 0
24427: PPUSH
24428: PPUSH
24429: PPUSH
// result := [ ] ;
24430: LD_ADDR_VAR 0 4
24434: PUSH
24435: EMPTY
24436: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24437: LD_ADDR_VAR 0 5
24441: PUSH
24442: LD_VAR 0 2
24446: PPUSH
24447: LD_INT 21
24449: PUSH
24450: LD_INT 3
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PPUSH
24457: CALL_OW 70
24461: ST_TO_ADDR
// if not tmp then
24462: LD_VAR 0 5
24466: NOT
24467: IFFALSE 24471
// exit ;
24469: GO 24535
// if checkLink then
24471: LD_VAR 0 3
24475: IFFALSE 24525
// begin for i in tmp do
24477: LD_ADDR_VAR 0 6
24481: PUSH
24482: LD_VAR 0 5
24486: PUSH
24487: FOR_IN
24488: IFFALSE 24523
// if GetBase ( i ) <> base then
24490: LD_VAR 0 6
24494: PPUSH
24495: CALL_OW 274
24499: PUSH
24500: LD_VAR 0 1
24504: NONEQUAL
24505: IFFALSE 24521
// ComLinkToBase ( base , i ) ;
24507: LD_VAR 0 1
24511: PPUSH
24512: LD_VAR 0 6
24516: PPUSH
24517: CALL_OW 169
24521: GO 24487
24523: POP
24524: POP
// end ; result := tmp ;
24525: LD_ADDR_VAR 0 4
24529: PUSH
24530: LD_VAR 0 5
24534: ST_TO_ADDR
// end ;
24535: LD_VAR 0 4
24539: RET
// export function ComComplete ( units , b ) ; var i ; begin
24540: LD_INT 0
24542: PPUSH
24543: PPUSH
// if not units then
24544: LD_VAR 0 1
24548: NOT
24549: IFFALSE 24553
// exit ;
24551: GO 24643
// for i in units do
24553: LD_ADDR_VAR 0 4
24557: PUSH
24558: LD_VAR 0 1
24562: PUSH
24563: FOR_IN
24564: IFFALSE 24641
// if BuildingStatus ( b ) = bs_build then
24566: LD_VAR 0 2
24570: PPUSH
24571: CALL_OW 461
24575: PUSH
24576: LD_INT 1
24578: EQUAL
24579: IFFALSE 24639
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24581: LD_VAR 0 4
24585: PPUSH
24586: LD_STRING h
24588: PUSH
24589: LD_VAR 0 2
24593: PPUSH
24594: CALL_OW 250
24598: PUSH
24599: LD_VAR 0 2
24603: PPUSH
24604: CALL_OW 251
24608: PUSH
24609: LD_VAR 0 2
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: LD_INT 0
24619: PUSH
24620: LD_INT 0
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: PUSH
24632: EMPTY
24633: LIST
24634: PPUSH
24635: CALL_OW 446
24639: GO 24563
24641: POP
24642: POP
// end ;
24643: LD_VAR 0 3
24647: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24648: LD_INT 0
24650: PPUSH
24651: PPUSH
24652: PPUSH
24653: PPUSH
24654: PPUSH
24655: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24656: LD_VAR 0 1
24660: NOT
24661: PUSH
24662: LD_VAR 0 1
24666: PPUSH
24667: CALL_OW 263
24671: PUSH
24672: LD_INT 2
24674: NONEQUAL
24675: OR
24676: IFFALSE 24680
// exit ;
24678: GO 24996
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24680: LD_ADDR_VAR 0 6
24684: PUSH
24685: LD_INT 22
24687: PUSH
24688: LD_VAR 0 1
24692: PPUSH
24693: CALL_OW 255
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 2
24704: PUSH
24705: LD_INT 30
24707: PUSH
24708: LD_INT 36
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 34
24717: PUSH
24718: LD_INT 31
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: LIST
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PPUSH
24734: CALL_OW 69
24738: ST_TO_ADDR
// if not tmp then
24739: LD_VAR 0 6
24743: NOT
24744: IFFALSE 24748
// exit ;
24746: GO 24996
// result := [ ] ;
24748: LD_ADDR_VAR 0 2
24752: PUSH
24753: EMPTY
24754: ST_TO_ADDR
// for i in tmp do
24755: LD_ADDR_VAR 0 3
24759: PUSH
24760: LD_VAR 0 6
24764: PUSH
24765: FOR_IN
24766: IFFALSE 24837
// begin t := UnitsInside ( i ) ;
24768: LD_ADDR_VAR 0 4
24772: PUSH
24773: LD_VAR 0 3
24777: PPUSH
24778: CALL_OW 313
24782: ST_TO_ADDR
// if t then
24783: LD_VAR 0 4
24787: IFFALSE 24835
// for j in t do
24789: LD_ADDR_VAR 0 7
24793: PUSH
24794: LD_VAR 0 4
24798: PUSH
24799: FOR_IN
24800: IFFALSE 24833
// result := Replace ( result , result + 1 , j ) ;
24802: LD_ADDR_VAR 0 2
24806: PUSH
24807: LD_VAR 0 2
24811: PPUSH
24812: LD_VAR 0 2
24816: PUSH
24817: LD_INT 1
24819: PLUS
24820: PPUSH
24821: LD_VAR 0 7
24825: PPUSH
24826: CALL_OW 1
24830: ST_TO_ADDR
24831: GO 24799
24833: POP
24834: POP
// end ;
24835: GO 24765
24837: POP
24838: POP
// if not result then
24839: LD_VAR 0 2
24843: NOT
24844: IFFALSE 24848
// exit ;
24846: GO 24996
// mech := result [ 1 ] ;
24848: LD_ADDR_VAR 0 5
24852: PUSH
24853: LD_VAR 0 2
24857: PUSH
24858: LD_INT 1
24860: ARRAY
24861: ST_TO_ADDR
// if result > 1 then
24862: LD_VAR 0 2
24866: PUSH
24867: LD_INT 1
24869: GREATER
24870: IFFALSE 24982
// begin for i = 2 to result do
24872: LD_ADDR_VAR 0 3
24876: PUSH
24877: DOUBLE
24878: LD_INT 2
24880: DEC
24881: ST_TO_ADDR
24882: LD_VAR 0 2
24886: PUSH
24887: FOR_TO
24888: IFFALSE 24980
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24890: LD_ADDR_VAR 0 4
24894: PUSH
24895: LD_VAR 0 2
24899: PUSH
24900: LD_VAR 0 3
24904: ARRAY
24905: PPUSH
24906: LD_INT 3
24908: PPUSH
24909: CALL_OW 259
24913: PUSH
24914: LD_VAR 0 2
24918: PUSH
24919: LD_VAR 0 3
24923: ARRAY
24924: PPUSH
24925: CALL_OW 432
24929: MINUS
24930: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24931: LD_VAR 0 4
24935: PUSH
24936: LD_VAR 0 5
24940: PPUSH
24941: LD_INT 3
24943: PPUSH
24944: CALL_OW 259
24948: PUSH
24949: LD_VAR 0 5
24953: PPUSH
24954: CALL_OW 432
24958: MINUS
24959: GREATEREQUAL
24960: IFFALSE 24978
// mech := result [ i ] ;
24962: LD_ADDR_VAR 0 5
24966: PUSH
24967: LD_VAR 0 2
24971: PUSH
24972: LD_VAR 0 3
24976: ARRAY
24977: ST_TO_ADDR
// end ;
24978: GO 24887
24980: POP
24981: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24982: LD_VAR 0 1
24986: PPUSH
24987: LD_VAR 0 5
24991: PPUSH
24992: CALL_OW 135
// end ;
24996: LD_VAR 0 2
25000: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25001: LD_INT 0
25003: PPUSH
25004: PPUSH
25005: PPUSH
25006: PPUSH
25007: PPUSH
25008: PPUSH
25009: PPUSH
25010: PPUSH
25011: PPUSH
25012: PPUSH
25013: PPUSH
25014: PPUSH
25015: PPUSH
// result := [ ] ;
25016: LD_ADDR_VAR 0 7
25020: PUSH
25021: EMPTY
25022: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25023: LD_VAR 0 1
25027: PPUSH
25028: CALL_OW 266
25032: PUSH
25033: LD_INT 0
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: IN
25043: NOT
25044: IFFALSE 25048
// exit ;
25046: GO 26682
// if name then
25048: LD_VAR 0 3
25052: IFFALSE 25068
// SetBName ( base_dep , name ) ;
25054: LD_VAR 0 1
25058: PPUSH
25059: LD_VAR 0 3
25063: PPUSH
25064: CALL_OW 500
// base := GetBase ( base_dep ) ;
25068: LD_ADDR_VAR 0 15
25072: PUSH
25073: LD_VAR 0 1
25077: PPUSH
25078: CALL_OW 274
25082: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25083: LD_ADDR_VAR 0 16
25087: PUSH
25088: LD_VAR 0 1
25092: PPUSH
25093: CALL_OW 255
25097: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25098: LD_ADDR_VAR 0 17
25102: PUSH
25103: LD_VAR 0 1
25107: PPUSH
25108: CALL_OW 248
25112: ST_TO_ADDR
// if sources then
25113: LD_VAR 0 5
25117: IFFALSE 25164
// for i = 1 to 3 do
25119: LD_ADDR_VAR 0 8
25123: PUSH
25124: DOUBLE
25125: LD_INT 1
25127: DEC
25128: ST_TO_ADDR
25129: LD_INT 3
25131: PUSH
25132: FOR_TO
25133: IFFALSE 25162
// AddResourceType ( base , i , sources [ i ] ) ;
25135: LD_VAR 0 15
25139: PPUSH
25140: LD_VAR 0 8
25144: PPUSH
25145: LD_VAR 0 5
25149: PUSH
25150: LD_VAR 0 8
25154: ARRAY
25155: PPUSH
25156: CALL_OW 276
25160: GO 25132
25162: POP
25163: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25164: LD_ADDR_VAR 0 18
25168: PUSH
25169: LD_VAR 0 15
25173: PPUSH
25174: LD_VAR 0 2
25178: PPUSH
25179: LD_INT 1
25181: PPUSH
25182: CALL 24425 0 3
25186: ST_TO_ADDR
// InitHc ;
25187: CALL_OW 19
// InitUc ;
25191: CALL_OW 18
// uc_side := side ;
25195: LD_ADDR_OWVAR 20
25199: PUSH
25200: LD_VAR 0 16
25204: ST_TO_ADDR
// uc_nation := nation ;
25205: LD_ADDR_OWVAR 21
25209: PUSH
25210: LD_VAR 0 17
25214: ST_TO_ADDR
// if buildings then
25215: LD_VAR 0 18
25219: IFFALSE 26541
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25221: LD_ADDR_VAR 0 19
25225: PUSH
25226: LD_VAR 0 18
25230: PPUSH
25231: LD_INT 2
25233: PUSH
25234: LD_INT 30
25236: PUSH
25237: LD_INT 29
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 30
25246: PUSH
25247: LD_INT 30
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: LIST
25258: PPUSH
25259: CALL_OW 72
25263: ST_TO_ADDR
// if tmp then
25264: LD_VAR 0 19
25268: IFFALSE 25316
// for i in tmp do
25270: LD_ADDR_VAR 0 8
25274: PUSH
25275: LD_VAR 0 19
25279: PUSH
25280: FOR_IN
25281: IFFALSE 25314
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25283: LD_VAR 0 8
25287: PPUSH
25288: CALL_OW 250
25292: PPUSH
25293: LD_VAR 0 8
25297: PPUSH
25298: CALL_OW 251
25302: PPUSH
25303: LD_VAR 0 16
25307: PPUSH
25308: CALL_OW 441
25312: GO 25280
25314: POP
25315: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25316: LD_VAR 0 18
25320: PPUSH
25321: LD_INT 2
25323: PUSH
25324: LD_INT 30
25326: PUSH
25327: LD_INT 32
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 30
25336: PUSH
25337: LD_INT 33
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: LIST
25348: PPUSH
25349: CALL_OW 72
25353: IFFALSE 25441
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25355: LD_ADDR_VAR 0 8
25359: PUSH
25360: LD_VAR 0 18
25364: PPUSH
25365: LD_INT 2
25367: PUSH
25368: LD_INT 30
25370: PUSH
25371: LD_INT 32
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 30
25380: PUSH
25381: LD_INT 33
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: LIST
25392: PPUSH
25393: CALL_OW 72
25397: PUSH
25398: FOR_IN
25399: IFFALSE 25439
// begin if not GetBWeapon ( i ) then
25401: LD_VAR 0 8
25405: PPUSH
25406: CALL_OW 269
25410: NOT
25411: IFFALSE 25437
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25413: LD_VAR 0 8
25417: PPUSH
25418: LD_VAR 0 8
25422: PPUSH
25423: LD_VAR 0 2
25427: PPUSH
25428: CALL 26687 0 2
25432: PPUSH
25433: CALL_OW 431
// end ;
25437: GO 25398
25439: POP
25440: POP
// end ; for i = 1 to personel do
25441: LD_ADDR_VAR 0 8
25445: PUSH
25446: DOUBLE
25447: LD_INT 1
25449: DEC
25450: ST_TO_ADDR
25451: LD_VAR 0 6
25455: PUSH
25456: FOR_TO
25457: IFFALSE 26521
// begin if i > 4 then
25459: LD_VAR 0 8
25463: PUSH
25464: LD_INT 4
25466: GREATER
25467: IFFALSE 25471
// break ;
25469: GO 26521
// case i of 1 :
25471: LD_VAR 0 8
25475: PUSH
25476: LD_INT 1
25478: DOUBLE
25479: EQUAL
25480: IFTRUE 25484
25482: GO 25564
25484: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25485: LD_ADDR_VAR 0 12
25489: PUSH
25490: LD_VAR 0 18
25494: PPUSH
25495: LD_INT 22
25497: PUSH
25498: LD_VAR 0 16
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 58
25509: PUSH
25510: EMPTY
25511: LIST
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: LD_INT 30
25518: PUSH
25519: LD_INT 32
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 30
25528: PUSH
25529: LD_INT 4
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 30
25538: PUSH
25539: LD_INT 5
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: LIST
25556: PPUSH
25557: CALL_OW 72
25561: ST_TO_ADDR
25562: GO 25786
25564: LD_INT 2
25566: DOUBLE
25567: EQUAL
25568: IFTRUE 25572
25570: GO 25634
25572: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25573: LD_ADDR_VAR 0 12
25577: PUSH
25578: LD_VAR 0 18
25582: PPUSH
25583: LD_INT 22
25585: PUSH
25586: LD_VAR 0 16
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 2
25597: PUSH
25598: LD_INT 30
25600: PUSH
25601: LD_INT 0
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 30
25610: PUSH
25611: LD_INT 1
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: LIST
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PPUSH
25627: CALL_OW 72
25631: ST_TO_ADDR
25632: GO 25786
25634: LD_INT 3
25636: DOUBLE
25637: EQUAL
25638: IFTRUE 25642
25640: GO 25704
25642: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25643: LD_ADDR_VAR 0 12
25647: PUSH
25648: LD_VAR 0 18
25652: PPUSH
25653: LD_INT 22
25655: PUSH
25656: LD_VAR 0 16
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 2
25667: PUSH
25668: LD_INT 30
25670: PUSH
25671: LD_INT 2
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 30
25680: PUSH
25681: LD_INT 3
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: LIST
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PPUSH
25697: CALL_OW 72
25701: ST_TO_ADDR
25702: GO 25786
25704: LD_INT 4
25706: DOUBLE
25707: EQUAL
25708: IFTRUE 25712
25710: GO 25785
25712: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25713: LD_ADDR_VAR 0 12
25717: PUSH
25718: LD_VAR 0 18
25722: PPUSH
25723: LD_INT 22
25725: PUSH
25726: LD_VAR 0 16
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 2
25737: PUSH
25738: LD_INT 30
25740: PUSH
25741: LD_INT 6
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 30
25750: PUSH
25751: LD_INT 7
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 30
25760: PUSH
25761: LD_INT 8
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PPUSH
25778: CALL_OW 72
25782: ST_TO_ADDR
25783: GO 25786
25785: POP
// if i = 1 then
25786: LD_VAR 0 8
25790: PUSH
25791: LD_INT 1
25793: EQUAL
25794: IFFALSE 25905
// begin tmp := [ ] ;
25796: LD_ADDR_VAR 0 19
25800: PUSH
25801: EMPTY
25802: ST_TO_ADDR
// for j in f do
25803: LD_ADDR_VAR 0 9
25807: PUSH
25808: LD_VAR 0 12
25812: PUSH
25813: FOR_IN
25814: IFFALSE 25887
// if GetBType ( j ) = b_bunker then
25816: LD_VAR 0 9
25820: PPUSH
25821: CALL_OW 266
25825: PUSH
25826: LD_INT 32
25828: EQUAL
25829: IFFALSE 25856
// tmp := Insert ( tmp , 1 , j ) else
25831: LD_ADDR_VAR 0 19
25835: PUSH
25836: LD_VAR 0 19
25840: PPUSH
25841: LD_INT 1
25843: PPUSH
25844: LD_VAR 0 9
25848: PPUSH
25849: CALL_OW 2
25853: ST_TO_ADDR
25854: GO 25885
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25856: LD_ADDR_VAR 0 19
25860: PUSH
25861: LD_VAR 0 19
25865: PPUSH
25866: LD_VAR 0 19
25870: PUSH
25871: LD_INT 1
25873: PLUS
25874: PPUSH
25875: LD_VAR 0 9
25879: PPUSH
25880: CALL_OW 2
25884: ST_TO_ADDR
25885: GO 25813
25887: POP
25888: POP
// if tmp then
25889: LD_VAR 0 19
25893: IFFALSE 25905
// f := tmp ;
25895: LD_ADDR_VAR 0 12
25899: PUSH
25900: LD_VAR 0 19
25904: ST_TO_ADDR
// end ; x := personel [ i ] ;
25905: LD_ADDR_VAR 0 13
25909: PUSH
25910: LD_VAR 0 6
25914: PUSH
25915: LD_VAR 0 8
25919: ARRAY
25920: ST_TO_ADDR
// if x = - 1 then
25921: LD_VAR 0 13
25925: PUSH
25926: LD_INT 1
25928: NEG
25929: EQUAL
25930: IFFALSE 26139
// begin for j in f do
25932: LD_ADDR_VAR 0 9
25936: PUSH
25937: LD_VAR 0 12
25941: PUSH
25942: FOR_IN
25943: IFFALSE 26135
// repeat InitHc ;
25945: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25949: LD_VAR 0 9
25953: PPUSH
25954: CALL_OW 266
25958: PUSH
25959: LD_INT 5
25961: EQUAL
25962: IFFALSE 26032
// begin if UnitsInside ( j ) < 3 then
25964: LD_VAR 0 9
25968: PPUSH
25969: CALL_OW 313
25973: PUSH
25974: LD_INT 3
25976: LESS
25977: IFFALSE 26013
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25979: LD_INT 0
25981: PPUSH
25982: LD_INT 5
25984: PUSH
25985: LD_INT 8
25987: PUSH
25988: LD_INT 9
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: LIST
25995: PUSH
25996: LD_VAR 0 17
26000: ARRAY
26001: PPUSH
26002: LD_VAR 0 4
26006: PPUSH
26007: CALL_OW 380
26011: GO 26030
// PrepareHuman ( false , i , skill ) ;
26013: LD_INT 0
26015: PPUSH
26016: LD_VAR 0 8
26020: PPUSH
26021: LD_VAR 0 4
26025: PPUSH
26026: CALL_OW 380
// end else
26030: GO 26049
// PrepareHuman ( false , i , skill ) ;
26032: LD_INT 0
26034: PPUSH
26035: LD_VAR 0 8
26039: PPUSH
26040: LD_VAR 0 4
26044: PPUSH
26045: CALL_OW 380
// un := CreateHuman ;
26049: LD_ADDR_VAR 0 14
26053: PUSH
26054: CALL_OW 44
26058: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26059: LD_ADDR_VAR 0 7
26063: PUSH
26064: LD_VAR 0 7
26068: PPUSH
26069: LD_INT 1
26071: PPUSH
26072: LD_VAR 0 14
26076: PPUSH
26077: CALL_OW 2
26081: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26082: LD_VAR 0 14
26086: PPUSH
26087: LD_VAR 0 9
26091: PPUSH
26092: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26096: LD_VAR 0 9
26100: PPUSH
26101: CALL_OW 313
26105: PUSH
26106: LD_INT 6
26108: EQUAL
26109: PUSH
26110: LD_VAR 0 9
26114: PPUSH
26115: CALL_OW 266
26119: PUSH
26120: LD_INT 32
26122: PUSH
26123: LD_INT 31
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: IN
26130: OR
26131: IFFALSE 25945
26133: GO 25942
26135: POP
26136: POP
// end else
26137: GO 26519
// for j = 1 to x do
26139: LD_ADDR_VAR 0 9
26143: PUSH
26144: DOUBLE
26145: LD_INT 1
26147: DEC
26148: ST_TO_ADDR
26149: LD_VAR 0 13
26153: PUSH
26154: FOR_TO
26155: IFFALSE 26517
// begin InitHc ;
26157: CALL_OW 19
// if not f then
26161: LD_VAR 0 12
26165: NOT
26166: IFFALSE 26255
// begin PrepareHuman ( false , i , skill ) ;
26168: LD_INT 0
26170: PPUSH
26171: LD_VAR 0 8
26175: PPUSH
26176: LD_VAR 0 4
26180: PPUSH
26181: CALL_OW 380
// un := CreateHuman ;
26185: LD_ADDR_VAR 0 14
26189: PUSH
26190: CALL_OW 44
26194: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26195: LD_ADDR_VAR 0 7
26199: PUSH
26200: LD_VAR 0 7
26204: PPUSH
26205: LD_INT 1
26207: PPUSH
26208: LD_VAR 0 14
26212: PPUSH
26213: CALL_OW 2
26217: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26218: LD_VAR 0 14
26222: PPUSH
26223: LD_VAR 0 1
26227: PPUSH
26228: CALL_OW 250
26232: PPUSH
26233: LD_VAR 0 1
26237: PPUSH
26238: CALL_OW 251
26242: PPUSH
26243: LD_INT 10
26245: PPUSH
26246: LD_INT 0
26248: PPUSH
26249: CALL_OW 50
// continue ;
26253: GO 26154
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26255: LD_VAR 0 12
26259: PUSH
26260: LD_INT 1
26262: ARRAY
26263: PPUSH
26264: CALL_OW 313
26268: PUSH
26269: LD_VAR 0 12
26273: PUSH
26274: LD_INT 1
26276: ARRAY
26277: PPUSH
26278: CALL_OW 266
26282: PUSH
26283: LD_INT 32
26285: PUSH
26286: LD_INT 31
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: IN
26293: AND
26294: PUSH
26295: LD_VAR 0 12
26299: PUSH
26300: LD_INT 1
26302: ARRAY
26303: PPUSH
26304: CALL_OW 313
26308: PUSH
26309: LD_INT 6
26311: EQUAL
26312: OR
26313: IFFALSE 26333
// f := Delete ( f , 1 ) ;
26315: LD_ADDR_VAR 0 12
26319: PUSH
26320: LD_VAR 0 12
26324: PPUSH
26325: LD_INT 1
26327: PPUSH
26328: CALL_OW 3
26332: ST_TO_ADDR
// if not f then
26333: LD_VAR 0 12
26337: NOT
26338: IFFALSE 26356
// begin x := x + 2 ;
26340: LD_ADDR_VAR 0 13
26344: PUSH
26345: LD_VAR 0 13
26349: PUSH
26350: LD_INT 2
26352: PLUS
26353: ST_TO_ADDR
// continue ;
26354: GO 26154
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26356: LD_VAR 0 12
26360: PUSH
26361: LD_INT 1
26363: ARRAY
26364: PPUSH
26365: CALL_OW 266
26369: PUSH
26370: LD_INT 5
26372: EQUAL
26373: IFFALSE 26447
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26375: LD_VAR 0 12
26379: PUSH
26380: LD_INT 1
26382: ARRAY
26383: PPUSH
26384: CALL_OW 313
26388: PUSH
26389: LD_INT 3
26391: LESS
26392: IFFALSE 26428
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26394: LD_INT 0
26396: PPUSH
26397: LD_INT 5
26399: PUSH
26400: LD_INT 8
26402: PUSH
26403: LD_INT 9
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: LIST
26410: PUSH
26411: LD_VAR 0 17
26415: ARRAY
26416: PPUSH
26417: LD_VAR 0 4
26421: PPUSH
26422: CALL_OW 380
26426: GO 26445
// PrepareHuman ( false , i , skill ) ;
26428: LD_INT 0
26430: PPUSH
26431: LD_VAR 0 8
26435: PPUSH
26436: LD_VAR 0 4
26440: PPUSH
26441: CALL_OW 380
// end else
26445: GO 26464
// PrepareHuman ( false , i , skill ) ;
26447: LD_INT 0
26449: PPUSH
26450: LD_VAR 0 8
26454: PPUSH
26455: LD_VAR 0 4
26459: PPUSH
26460: CALL_OW 380
// un := CreateHuman ;
26464: LD_ADDR_VAR 0 14
26468: PUSH
26469: CALL_OW 44
26473: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26474: LD_ADDR_VAR 0 7
26478: PUSH
26479: LD_VAR 0 7
26483: PPUSH
26484: LD_INT 1
26486: PPUSH
26487: LD_VAR 0 14
26491: PPUSH
26492: CALL_OW 2
26496: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26497: LD_VAR 0 14
26501: PPUSH
26502: LD_VAR 0 12
26506: PUSH
26507: LD_INT 1
26509: ARRAY
26510: PPUSH
26511: CALL_OW 52
// end ;
26515: GO 26154
26517: POP
26518: POP
// end ;
26519: GO 25456
26521: POP
26522: POP
// result := result ^ buildings ;
26523: LD_ADDR_VAR 0 7
26527: PUSH
26528: LD_VAR 0 7
26532: PUSH
26533: LD_VAR 0 18
26537: ADD
26538: ST_TO_ADDR
// end else
26539: GO 26682
// begin for i = 1 to personel do
26541: LD_ADDR_VAR 0 8
26545: PUSH
26546: DOUBLE
26547: LD_INT 1
26549: DEC
26550: ST_TO_ADDR
26551: LD_VAR 0 6
26555: PUSH
26556: FOR_TO
26557: IFFALSE 26680
// begin if i > 4 then
26559: LD_VAR 0 8
26563: PUSH
26564: LD_INT 4
26566: GREATER
26567: IFFALSE 26571
// break ;
26569: GO 26680
// x := personel [ i ] ;
26571: LD_ADDR_VAR 0 13
26575: PUSH
26576: LD_VAR 0 6
26580: PUSH
26581: LD_VAR 0 8
26585: ARRAY
26586: ST_TO_ADDR
// if x = - 1 then
26587: LD_VAR 0 13
26591: PUSH
26592: LD_INT 1
26594: NEG
26595: EQUAL
26596: IFFALSE 26600
// continue ;
26598: GO 26556
// PrepareHuman ( false , i , skill ) ;
26600: LD_INT 0
26602: PPUSH
26603: LD_VAR 0 8
26607: PPUSH
26608: LD_VAR 0 4
26612: PPUSH
26613: CALL_OW 380
// un := CreateHuman ;
26617: LD_ADDR_VAR 0 14
26621: PUSH
26622: CALL_OW 44
26626: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26627: LD_VAR 0 14
26631: PPUSH
26632: LD_VAR 0 1
26636: PPUSH
26637: CALL_OW 250
26641: PPUSH
26642: LD_VAR 0 1
26646: PPUSH
26647: CALL_OW 251
26651: PPUSH
26652: LD_INT 10
26654: PPUSH
26655: LD_INT 0
26657: PPUSH
26658: CALL_OW 50
// result := result ^ un ;
26662: LD_ADDR_VAR 0 7
26666: PUSH
26667: LD_VAR 0 7
26671: PUSH
26672: LD_VAR 0 14
26676: ADD
26677: ST_TO_ADDR
// end ;
26678: GO 26556
26680: POP
26681: POP
// end ; end ;
26682: LD_VAR 0 7
26686: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26687: LD_INT 0
26689: PPUSH
26690: PPUSH
26691: PPUSH
26692: PPUSH
26693: PPUSH
26694: PPUSH
26695: PPUSH
26696: PPUSH
26697: PPUSH
26698: PPUSH
26699: PPUSH
26700: PPUSH
26701: PPUSH
26702: PPUSH
26703: PPUSH
26704: PPUSH
// result := false ;
26705: LD_ADDR_VAR 0 3
26709: PUSH
26710: LD_INT 0
26712: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26713: LD_VAR 0 1
26717: NOT
26718: PUSH
26719: LD_VAR 0 1
26723: PPUSH
26724: CALL_OW 266
26728: PUSH
26729: LD_INT 32
26731: PUSH
26732: LD_INT 33
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: IN
26739: NOT
26740: OR
26741: IFFALSE 26745
// exit ;
26743: GO 27854
// nat := GetNation ( tower ) ;
26745: LD_ADDR_VAR 0 12
26749: PUSH
26750: LD_VAR 0 1
26754: PPUSH
26755: CALL_OW 248
26759: ST_TO_ADDR
// side := GetSide ( tower ) ;
26760: LD_ADDR_VAR 0 16
26764: PUSH
26765: LD_VAR 0 1
26769: PPUSH
26770: CALL_OW 255
26774: ST_TO_ADDR
// x := GetX ( tower ) ;
26775: LD_ADDR_VAR 0 10
26779: PUSH
26780: LD_VAR 0 1
26784: PPUSH
26785: CALL_OW 250
26789: ST_TO_ADDR
// y := GetY ( tower ) ;
26790: LD_ADDR_VAR 0 11
26794: PUSH
26795: LD_VAR 0 1
26799: PPUSH
26800: CALL_OW 251
26804: ST_TO_ADDR
// if not x or not y then
26805: LD_VAR 0 10
26809: NOT
26810: PUSH
26811: LD_VAR 0 11
26815: NOT
26816: OR
26817: IFFALSE 26821
// exit ;
26819: GO 27854
// weapon := 0 ;
26821: LD_ADDR_VAR 0 18
26825: PUSH
26826: LD_INT 0
26828: ST_TO_ADDR
// fac_list := [ ] ;
26829: LD_ADDR_VAR 0 17
26833: PUSH
26834: EMPTY
26835: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26836: LD_ADDR_VAR 0 6
26840: PUSH
26841: LD_VAR 0 1
26845: PPUSH
26846: CALL_OW 274
26850: PPUSH
26851: LD_VAR 0 2
26855: PPUSH
26856: LD_INT 0
26858: PPUSH
26859: CALL 24425 0 3
26863: PPUSH
26864: LD_INT 30
26866: PUSH
26867: LD_INT 3
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PPUSH
26874: CALL_OW 72
26878: ST_TO_ADDR
// if not factories then
26879: LD_VAR 0 6
26883: NOT
26884: IFFALSE 26888
// exit ;
26886: GO 27854
// for i in factories do
26888: LD_ADDR_VAR 0 8
26892: PUSH
26893: LD_VAR 0 6
26897: PUSH
26898: FOR_IN
26899: IFFALSE 26924
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26901: LD_ADDR_VAR 0 17
26905: PUSH
26906: LD_VAR 0 17
26910: PUSH
26911: LD_VAR 0 8
26915: PPUSH
26916: CALL_OW 478
26920: UNION
26921: ST_TO_ADDR
26922: GO 26898
26924: POP
26925: POP
// if not fac_list then
26926: LD_VAR 0 17
26930: NOT
26931: IFFALSE 26935
// exit ;
26933: GO 27854
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26935: LD_ADDR_VAR 0 5
26939: PUSH
26940: LD_INT 4
26942: PUSH
26943: LD_INT 5
26945: PUSH
26946: LD_INT 9
26948: PUSH
26949: LD_INT 10
26951: PUSH
26952: LD_INT 6
26954: PUSH
26955: LD_INT 7
26957: PUSH
26958: LD_INT 11
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 27
26972: PUSH
26973: LD_INT 28
26975: PUSH
26976: LD_INT 26
26978: PUSH
26979: LD_INT 30
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 43
26990: PUSH
26991: LD_INT 44
26993: PUSH
26994: LD_INT 46
26996: PUSH
26997: LD_INT 45
26999: PUSH
27000: LD_INT 47
27002: PUSH
27003: LD_INT 49
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: LIST
27018: PUSH
27019: LD_VAR 0 12
27023: ARRAY
27024: ST_TO_ADDR
// list := list isect fac_list ;
27025: LD_ADDR_VAR 0 5
27029: PUSH
27030: LD_VAR 0 5
27034: PUSH
27035: LD_VAR 0 17
27039: ISECT
27040: ST_TO_ADDR
// if not list then
27041: LD_VAR 0 5
27045: NOT
27046: IFFALSE 27050
// exit ;
27048: GO 27854
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27050: LD_VAR 0 12
27054: PUSH
27055: LD_INT 3
27057: EQUAL
27058: PUSH
27059: LD_INT 49
27061: PUSH
27062: LD_VAR 0 5
27066: IN
27067: AND
27068: PUSH
27069: LD_INT 31
27071: PPUSH
27072: LD_VAR 0 16
27076: PPUSH
27077: CALL_OW 321
27081: PUSH
27082: LD_INT 2
27084: EQUAL
27085: AND
27086: IFFALSE 27146
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27088: LD_INT 22
27090: PUSH
27091: LD_VAR 0 16
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 35
27102: PUSH
27103: LD_INT 49
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 91
27112: PUSH
27113: LD_VAR 0 1
27117: PUSH
27118: LD_INT 10
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: LIST
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: LIST
27130: PPUSH
27131: CALL_OW 69
27135: NOT
27136: IFFALSE 27146
// weapon := ru_time_lapser ;
27138: LD_ADDR_VAR 0 18
27142: PUSH
27143: LD_INT 49
27145: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27146: LD_VAR 0 12
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: LD_INT 2
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: IN
27161: PUSH
27162: LD_INT 11
27164: PUSH
27165: LD_VAR 0 5
27169: IN
27170: PUSH
27171: LD_INT 30
27173: PUSH
27174: LD_VAR 0 5
27178: IN
27179: OR
27180: AND
27181: PUSH
27182: LD_INT 6
27184: PPUSH
27185: LD_VAR 0 16
27189: PPUSH
27190: CALL_OW 321
27194: PUSH
27195: LD_INT 2
27197: EQUAL
27198: AND
27199: IFFALSE 27364
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27201: LD_INT 22
27203: PUSH
27204: LD_VAR 0 16
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 2
27215: PUSH
27216: LD_INT 35
27218: PUSH
27219: LD_INT 11
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 35
27228: PUSH
27229: LD_INT 30
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 91
27243: PUSH
27244: LD_VAR 0 1
27248: PUSH
27249: LD_INT 18
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: LIST
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: LIST
27261: PPUSH
27262: CALL_OW 69
27266: NOT
27267: PUSH
27268: LD_INT 22
27270: PUSH
27271: LD_VAR 0 16
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 2
27282: PUSH
27283: LD_INT 30
27285: PUSH
27286: LD_INT 32
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 30
27295: PUSH
27296: LD_INT 33
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 91
27310: PUSH
27311: LD_VAR 0 1
27315: PUSH
27316: LD_INT 12
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: LIST
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: LIST
27328: PUSH
27329: EMPTY
27330: LIST
27331: PPUSH
27332: CALL_OW 69
27336: PUSH
27337: LD_INT 2
27339: GREATER
27340: AND
27341: IFFALSE 27364
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27343: LD_ADDR_VAR 0 18
27347: PUSH
27348: LD_INT 11
27350: PUSH
27351: LD_INT 30
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_VAR 0 12
27362: ARRAY
27363: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27364: LD_VAR 0 18
27368: NOT
27369: PUSH
27370: LD_INT 40
27372: PPUSH
27373: LD_VAR 0 16
27377: PPUSH
27378: CALL_OW 321
27382: PUSH
27383: LD_INT 2
27385: EQUAL
27386: AND
27387: PUSH
27388: LD_INT 7
27390: PUSH
27391: LD_VAR 0 5
27395: IN
27396: PUSH
27397: LD_INT 28
27399: PUSH
27400: LD_VAR 0 5
27404: IN
27405: OR
27406: PUSH
27407: LD_INT 45
27409: PUSH
27410: LD_VAR 0 5
27414: IN
27415: OR
27416: AND
27417: IFFALSE 27671
// begin hex := GetHexInfo ( x , y ) ;
27419: LD_ADDR_VAR 0 4
27423: PUSH
27424: LD_VAR 0 10
27428: PPUSH
27429: LD_VAR 0 11
27433: PPUSH
27434: CALL_OW 546
27438: ST_TO_ADDR
// if hex [ 1 ] then
27439: LD_VAR 0 4
27443: PUSH
27444: LD_INT 1
27446: ARRAY
27447: IFFALSE 27451
// exit ;
27449: GO 27854
// height := hex [ 2 ] ;
27451: LD_ADDR_VAR 0 15
27455: PUSH
27456: LD_VAR 0 4
27460: PUSH
27461: LD_INT 2
27463: ARRAY
27464: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27465: LD_ADDR_VAR 0 14
27469: PUSH
27470: LD_INT 0
27472: PUSH
27473: LD_INT 2
27475: PUSH
27476: LD_INT 3
27478: PUSH
27479: LD_INT 5
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: ST_TO_ADDR
// for i in tmp do
27488: LD_ADDR_VAR 0 8
27492: PUSH
27493: LD_VAR 0 14
27497: PUSH
27498: FOR_IN
27499: IFFALSE 27669
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27501: LD_ADDR_VAR 0 9
27505: PUSH
27506: LD_VAR 0 10
27510: PPUSH
27511: LD_VAR 0 8
27515: PPUSH
27516: LD_INT 5
27518: PPUSH
27519: CALL_OW 272
27523: PUSH
27524: LD_VAR 0 11
27528: PPUSH
27529: LD_VAR 0 8
27533: PPUSH
27534: LD_INT 5
27536: PPUSH
27537: CALL_OW 273
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27546: LD_VAR 0 9
27550: PUSH
27551: LD_INT 1
27553: ARRAY
27554: PPUSH
27555: LD_VAR 0 9
27559: PUSH
27560: LD_INT 2
27562: ARRAY
27563: PPUSH
27564: CALL_OW 488
27568: IFFALSE 27667
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27570: LD_ADDR_VAR 0 4
27574: PUSH
27575: LD_VAR 0 9
27579: PUSH
27580: LD_INT 1
27582: ARRAY
27583: PPUSH
27584: LD_VAR 0 9
27588: PUSH
27589: LD_INT 2
27591: ARRAY
27592: PPUSH
27593: CALL_OW 546
27597: ST_TO_ADDR
// if hex [ 1 ] then
27598: LD_VAR 0 4
27602: PUSH
27603: LD_INT 1
27605: ARRAY
27606: IFFALSE 27610
// continue ;
27608: GO 27498
// h := hex [ 2 ] ;
27610: LD_ADDR_VAR 0 13
27614: PUSH
27615: LD_VAR 0 4
27619: PUSH
27620: LD_INT 2
27622: ARRAY
27623: ST_TO_ADDR
// if h + 7 < height then
27624: LD_VAR 0 13
27628: PUSH
27629: LD_INT 7
27631: PLUS
27632: PUSH
27633: LD_VAR 0 15
27637: LESS
27638: IFFALSE 27667
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27640: LD_ADDR_VAR 0 18
27644: PUSH
27645: LD_INT 7
27647: PUSH
27648: LD_INT 28
27650: PUSH
27651: LD_INT 45
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: PUSH
27659: LD_VAR 0 12
27663: ARRAY
27664: ST_TO_ADDR
// break ;
27665: GO 27669
// end ; end ; end ;
27667: GO 27498
27669: POP
27670: POP
// end ; if not weapon then
27671: LD_VAR 0 18
27675: NOT
27676: IFFALSE 27736
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27678: LD_ADDR_VAR 0 5
27682: PUSH
27683: LD_VAR 0 5
27687: PUSH
27688: LD_INT 11
27690: PUSH
27691: LD_INT 30
27693: PUSH
27694: LD_INT 49
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: LIST
27701: DIFF
27702: ST_TO_ADDR
// if not list then
27703: LD_VAR 0 5
27707: NOT
27708: IFFALSE 27712
// exit ;
27710: GO 27854
// weapon := list [ rand ( 1 , list ) ] ;
27712: LD_ADDR_VAR 0 18
27716: PUSH
27717: LD_VAR 0 5
27721: PUSH
27722: LD_INT 1
27724: PPUSH
27725: LD_VAR 0 5
27729: PPUSH
27730: CALL_OW 12
27734: ARRAY
27735: ST_TO_ADDR
// end ; if weapon then
27736: LD_VAR 0 18
27740: IFFALSE 27854
// begin tmp := CostOfWeapon ( weapon ) ;
27742: LD_ADDR_VAR 0 14
27746: PUSH
27747: LD_VAR 0 18
27751: PPUSH
27752: CALL_OW 451
27756: ST_TO_ADDR
// j := GetBase ( tower ) ;
27757: LD_ADDR_VAR 0 9
27761: PUSH
27762: LD_VAR 0 1
27766: PPUSH
27767: CALL_OW 274
27771: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27772: LD_VAR 0 9
27776: PPUSH
27777: LD_INT 1
27779: PPUSH
27780: CALL_OW 275
27784: PUSH
27785: LD_VAR 0 14
27789: PUSH
27790: LD_INT 1
27792: ARRAY
27793: GREATEREQUAL
27794: PUSH
27795: LD_VAR 0 9
27799: PPUSH
27800: LD_INT 2
27802: PPUSH
27803: CALL_OW 275
27807: PUSH
27808: LD_VAR 0 14
27812: PUSH
27813: LD_INT 2
27815: ARRAY
27816: GREATEREQUAL
27817: AND
27818: PUSH
27819: LD_VAR 0 9
27823: PPUSH
27824: LD_INT 3
27826: PPUSH
27827: CALL_OW 275
27831: PUSH
27832: LD_VAR 0 14
27836: PUSH
27837: LD_INT 3
27839: ARRAY
27840: GREATEREQUAL
27841: AND
27842: IFFALSE 27854
// result := weapon ;
27844: LD_ADDR_VAR 0 3
27848: PUSH
27849: LD_VAR 0 18
27853: ST_TO_ADDR
// end ; end ;
27854: LD_VAR 0 3
27858: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27859: LD_INT 0
27861: PPUSH
27862: PPUSH
// result := true ;
27863: LD_ADDR_VAR 0 3
27867: PUSH
27868: LD_INT 1
27870: ST_TO_ADDR
// if array1 = array2 then
27871: LD_VAR 0 1
27875: PUSH
27876: LD_VAR 0 2
27880: EQUAL
27881: IFFALSE 27941
// begin for i = 1 to array1 do
27883: LD_ADDR_VAR 0 4
27887: PUSH
27888: DOUBLE
27889: LD_INT 1
27891: DEC
27892: ST_TO_ADDR
27893: LD_VAR 0 1
27897: PUSH
27898: FOR_TO
27899: IFFALSE 27937
// if array1 [ i ] <> array2 [ i ] then
27901: LD_VAR 0 1
27905: PUSH
27906: LD_VAR 0 4
27910: ARRAY
27911: PUSH
27912: LD_VAR 0 2
27916: PUSH
27917: LD_VAR 0 4
27921: ARRAY
27922: NONEQUAL
27923: IFFALSE 27935
// begin result := false ;
27925: LD_ADDR_VAR 0 3
27929: PUSH
27930: LD_INT 0
27932: ST_TO_ADDR
// break ;
27933: GO 27937
// end ;
27935: GO 27898
27937: POP
27938: POP
// end else
27939: GO 27949
// result := false ;
27941: LD_ADDR_VAR 0 3
27945: PUSH
27946: LD_INT 0
27948: ST_TO_ADDR
// end ;
27949: LD_VAR 0 3
27953: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27954: LD_INT 0
27956: PPUSH
27957: PPUSH
// if not array1 or not array2 then
27958: LD_VAR 0 1
27962: NOT
27963: PUSH
27964: LD_VAR 0 2
27968: NOT
27969: OR
27970: IFFALSE 27974
// exit ;
27972: GO 28038
// result := true ;
27974: LD_ADDR_VAR 0 3
27978: PUSH
27979: LD_INT 1
27981: ST_TO_ADDR
// for i = 1 to array1 do
27982: LD_ADDR_VAR 0 4
27986: PUSH
27987: DOUBLE
27988: LD_INT 1
27990: DEC
27991: ST_TO_ADDR
27992: LD_VAR 0 1
27996: PUSH
27997: FOR_TO
27998: IFFALSE 28036
// if array1 [ i ] <> array2 [ i ] then
28000: LD_VAR 0 1
28004: PUSH
28005: LD_VAR 0 4
28009: ARRAY
28010: PUSH
28011: LD_VAR 0 2
28015: PUSH
28016: LD_VAR 0 4
28020: ARRAY
28021: NONEQUAL
28022: IFFALSE 28034
// begin result := false ;
28024: LD_ADDR_VAR 0 3
28028: PUSH
28029: LD_INT 0
28031: ST_TO_ADDR
// break ;
28032: GO 28036
// end ;
28034: GO 27997
28036: POP
28037: POP
// end ;
28038: LD_VAR 0 3
28042: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28043: LD_INT 0
28045: PPUSH
28046: PPUSH
28047: PPUSH
// pom := GetBase ( fac ) ;
28048: LD_ADDR_VAR 0 5
28052: PUSH
28053: LD_VAR 0 1
28057: PPUSH
28058: CALL_OW 274
28062: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28063: LD_ADDR_VAR 0 4
28067: PUSH
28068: LD_VAR 0 2
28072: PUSH
28073: LD_INT 1
28075: ARRAY
28076: PPUSH
28077: LD_VAR 0 2
28081: PUSH
28082: LD_INT 2
28084: ARRAY
28085: PPUSH
28086: LD_VAR 0 2
28090: PUSH
28091: LD_INT 3
28093: ARRAY
28094: PPUSH
28095: LD_VAR 0 2
28099: PUSH
28100: LD_INT 4
28102: ARRAY
28103: PPUSH
28104: CALL_OW 449
28108: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28109: LD_ADDR_VAR 0 3
28113: PUSH
28114: LD_VAR 0 5
28118: PPUSH
28119: LD_INT 1
28121: PPUSH
28122: CALL_OW 275
28126: PUSH
28127: LD_VAR 0 4
28131: PUSH
28132: LD_INT 1
28134: ARRAY
28135: GREATEREQUAL
28136: PUSH
28137: LD_VAR 0 5
28141: PPUSH
28142: LD_INT 2
28144: PPUSH
28145: CALL_OW 275
28149: PUSH
28150: LD_VAR 0 4
28154: PUSH
28155: LD_INT 2
28157: ARRAY
28158: GREATEREQUAL
28159: AND
28160: PUSH
28161: LD_VAR 0 5
28165: PPUSH
28166: LD_INT 3
28168: PPUSH
28169: CALL_OW 275
28173: PUSH
28174: LD_VAR 0 4
28178: PUSH
28179: LD_INT 3
28181: ARRAY
28182: GREATEREQUAL
28183: AND
28184: ST_TO_ADDR
// end ;
28185: LD_VAR 0 3
28189: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28190: LD_INT 0
28192: PPUSH
28193: PPUSH
28194: PPUSH
28195: PPUSH
// pom := GetBase ( building ) ;
28196: LD_ADDR_VAR 0 3
28200: PUSH
28201: LD_VAR 0 1
28205: PPUSH
28206: CALL_OW 274
28210: ST_TO_ADDR
// if not pom then
28211: LD_VAR 0 3
28215: NOT
28216: IFFALSE 28220
// exit ;
28218: GO 28390
// btype := GetBType ( building ) ;
28220: LD_ADDR_VAR 0 5
28224: PUSH
28225: LD_VAR 0 1
28229: PPUSH
28230: CALL_OW 266
28234: ST_TO_ADDR
// if btype = b_armoury then
28235: LD_VAR 0 5
28239: PUSH
28240: LD_INT 4
28242: EQUAL
28243: IFFALSE 28253
// btype := b_barracks ;
28245: LD_ADDR_VAR 0 5
28249: PUSH
28250: LD_INT 5
28252: ST_TO_ADDR
// if btype = b_depot then
28253: LD_VAR 0 5
28257: PUSH
28258: LD_INT 0
28260: EQUAL
28261: IFFALSE 28271
// btype := b_warehouse ;
28263: LD_ADDR_VAR 0 5
28267: PUSH
28268: LD_INT 1
28270: ST_TO_ADDR
// if btype = b_workshop then
28271: LD_VAR 0 5
28275: PUSH
28276: LD_INT 2
28278: EQUAL
28279: IFFALSE 28289
// btype := b_factory ;
28281: LD_ADDR_VAR 0 5
28285: PUSH
28286: LD_INT 3
28288: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28289: LD_ADDR_VAR 0 4
28293: PUSH
28294: LD_VAR 0 5
28298: PPUSH
28299: LD_VAR 0 1
28303: PPUSH
28304: CALL_OW 248
28308: PPUSH
28309: CALL_OW 450
28313: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28314: LD_ADDR_VAR 0 2
28318: PUSH
28319: LD_VAR 0 3
28323: PPUSH
28324: LD_INT 1
28326: PPUSH
28327: CALL_OW 275
28331: PUSH
28332: LD_VAR 0 4
28336: PUSH
28337: LD_INT 1
28339: ARRAY
28340: GREATEREQUAL
28341: PUSH
28342: LD_VAR 0 3
28346: PPUSH
28347: LD_INT 2
28349: PPUSH
28350: CALL_OW 275
28354: PUSH
28355: LD_VAR 0 4
28359: PUSH
28360: LD_INT 2
28362: ARRAY
28363: GREATEREQUAL
28364: AND
28365: PUSH
28366: LD_VAR 0 3
28370: PPUSH
28371: LD_INT 3
28373: PPUSH
28374: CALL_OW 275
28378: PUSH
28379: LD_VAR 0 4
28383: PUSH
28384: LD_INT 3
28386: ARRAY
28387: GREATEREQUAL
28388: AND
28389: ST_TO_ADDR
// end ;
28390: LD_VAR 0 2
28394: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28395: LD_INT 0
28397: PPUSH
28398: PPUSH
28399: PPUSH
// pom := GetBase ( building ) ;
28400: LD_ADDR_VAR 0 4
28404: PUSH
28405: LD_VAR 0 1
28409: PPUSH
28410: CALL_OW 274
28414: ST_TO_ADDR
// if not pom then
28415: LD_VAR 0 4
28419: NOT
28420: IFFALSE 28424
// exit ;
28422: GO 28525
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28424: LD_ADDR_VAR 0 5
28428: PUSH
28429: LD_VAR 0 2
28433: PPUSH
28434: LD_VAR 0 1
28438: PPUSH
28439: CALL_OW 248
28443: PPUSH
28444: CALL_OW 450
28448: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28449: LD_ADDR_VAR 0 3
28453: PUSH
28454: LD_VAR 0 4
28458: PPUSH
28459: LD_INT 1
28461: PPUSH
28462: CALL_OW 275
28466: PUSH
28467: LD_VAR 0 5
28471: PUSH
28472: LD_INT 1
28474: ARRAY
28475: GREATEREQUAL
28476: PUSH
28477: LD_VAR 0 4
28481: PPUSH
28482: LD_INT 2
28484: PPUSH
28485: CALL_OW 275
28489: PUSH
28490: LD_VAR 0 5
28494: PUSH
28495: LD_INT 2
28497: ARRAY
28498: GREATEREQUAL
28499: AND
28500: PUSH
28501: LD_VAR 0 4
28505: PPUSH
28506: LD_INT 3
28508: PPUSH
28509: CALL_OW 275
28513: PUSH
28514: LD_VAR 0 5
28518: PUSH
28519: LD_INT 3
28521: ARRAY
28522: GREATEREQUAL
28523: AND
28524: ST_TO_ADDR
// end ;
28525: LD_VAR 0 3
28529: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28530: LD_INT 0
28532: PPUSH
28533: PPUSH
28534: PPUSH
28535: PPUSH
28536: PPUSH
28537: PPUSH
28538: PPUSH
28539: PPUSH
28540: PPUSH
28541: PPUSH
28542: PPUSH
// result := false ;
28543: LD_ADDR_VAR 0 8
28547: PUSH
28548: LD_INT 0
28550: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28551: LD_VAR 0 5
28555: NOT
28556: PUSH
28557: LD_VAR 0 1
28561: NOT
28562: OR
28563: PUSH
28564: LD_VAR 0 2
28568: NOT
28569: OR
28570: PUSH
28571: LD_VAR 0 3
28575: NOT
28576: OR
28577: IFFALSE 28581
// exit ;
28579: GO 29395
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28581: LD_ADDR_VAR 0 14
28585: PUSH
28586: LD_VAR 0 1
28590: PPUSH
28591: LD_VAR 0 2
28595: PPUSH
28596: LD_VAR 0 3
28600: PPUSH
28601: LD_VAR 0 4
28605: PPUSH
28606: LD_VAR 0 5
28610: PUSH
28611: LD_INT 1
28613: ARRAY
28614: PPUSH
28615: CALL_OW 248
28619: PPUSH
28620: LD_INT 0
28622: PPUSH
28623: CALL 30648 0 6
28627: ST_TO_ADDR
// if not hexes then
28628: LD_VAR 0 14
28632: NOT
28633: IFFALSE 28637
// exit ;
28635: GO 29395
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28637: LD_ADDR_VAR 0 17
28641: PUSH
28642: LD_VAR 0 5
28646: PPUSH
28647: LD_INT 22
28649: PUSH
28650: LD_VAR 0 13
28654: PPUSH
28655: CALL_OW 255
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 2
28666: PUSH
28667: LD_INT 30
28669: PUSH
28670: LD_INT 0
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 30
28679: PUSH
28680: LD_INT 1
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PPUSH
28696: CALL_OW 72
28700: ST_TO_ADDR
// for i = 1 to hexes do
28701: LD_ADDR_VAR 0 9
28705: PUSH
28706: DOUBLE
28707: LD_INT 1
28709: DEC
28710: ST_TO_ADDR
28711: LD_VAR 0 14
28715: PUSH
28716: FOR_TO
28717: IFFALSE 29393
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28719: LD_ADDR_VAR 0 13
28723: PUSH
28724: LD_VAR 0 14
28728: PUSH
28729: LD_VAR 0 9
28733: ARRAY
28734: PUSH
28735: LD_INT 1
28737: ARRAY
28738: PPUSH
28739: LD_VAR 0 14
28743: PUSH
28744: LD_VAR 0 9
28748: ARRAY
28749: PUSH
28750: LD_INT 2
28752: ARRAY
28753: PPUSH
28754: CALL_OW 428
28758: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28759: LD_VAR 0 14
28763: PUSH
28764: LD_VAR 0 9
28768: ARRAY
28769: PUSH
28770: LD_INT 1
28772: ARRAY
28773: PPUSH
28774: LD_VAR 0 14
28778: PUSH
28779: LD_VAR 0 9
28783: ARRAY
28784: PUSH
28785: LD_INT 2
28787: ARRAY
28788: PPUSH
28789: CALL_OW 351
28793: PUSH
28794: LD_VAR 0 14
28798: PUSH
28799: LD_VAR 0 9
28803: ARRAY
28804: PUSH
28805: LD_INT 1
28807: ARRAY
28808: PPUSH
28809: LD_VAR 0 14
28813: PUSH
28814: LD_VAR 0 9
28818: ARRAY
28819: PUSH
28820: LD_INT 2
28822: ARRAY
28823: PPUSH
28824: CALL_OW 488
28828: NOT
28829: OR
28830: PUSH
28831: LD_VAR 0 13
28835: PPUSH
28836: CALL_OW 247
28840: PUSH
28841: LD_INT 3
28843: EQUAL
28844: OR
28845: IFFALSE 28851
// exit ;
28847: POP
28848: POP
28849: GO 29395
// if not tmp then
28851: LD_VAR 0 13
28855: NOT
28856: IFFALSE 28860
// continue ;
28858: GO 28716
// result := true ;
28860: LD_ADDR_VAR 0 8
28864: PUSH
28865: LD_INT 1
28867: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28868: LD_VAR 0 6
28872: PUSH
28873: LD_VAR 0 13
28877: PPUSH
28878: CALL_OW 247
28882: PUSH
28883: LD_INT 2
28885: EQUAL
28886: AND
28887: PUSH
28888: LD_VAR 0 13
28892: PPUSH
28893: CALL_OW 263
28897: PUSH
28898: LD_INT 1
28900: EQUAL
28901: AND
28902: IFFALSE 29066
// begin if IsDrivenBy ( tmp ) then
28904: LD_VAR 0 13
28908: PPUSH
28909: CALL_OW 311
28913: IFFALSE 28917
// continue ;
28915: GO 28716
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28917: LD_VAR 0 6
28921: PPUSH
28922: LD_INT 3
28924: PUSH
28925: LD_INT 60
28927: PUSH
28928: EMPTY
28929: LIST
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 3
28937: PUSH
28938: LD_INT 55
28940: PUSH
28941: EMPTY
28942: LIST
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PPUSH
28952: CALL_OW 72
28956: IFFALSE 29064
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28958: LD_ADDR_VAR 0 18
28962: PUSH
28963: LD_VAR 0 6
28967: PPUSH
28968: LD_INT 3
28970: PUSH
28971: LD_INT 60
28973: PUSH
28974: EMPTY
28975: LIST
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 3
28983: PUSH
28984: LD_INT 55
28986: PUSH
28987: EMPTY
28988: LIST
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PPUSH
28998: CALL_OW 72
29002: PUSH
29003: LD_INT 1
29005: ARRAY
29006: ST_TO_ADDR
// if IsInUnit ( driver ) then
29007: LD_VAR 0 18
29011: PPUSH
29012: CALL_OW 310
29016: IFFALSE 29027
// ComExit ( driver ) ;
29018: LD_VAR 0 18
29022: PPUSH
29023: CALL 54449 0 1
// AddComEnterUnit ( driver , tmp ) ;
29027: LD_VAR 0 18
29031: PPUSH
29032: LD_VAR 0 13
29036: PPUSH
29037: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29041: LD_VAR 0 18
29045: PPUSH
29046: LD_VAR 0 7
29050: PPUSH
29051: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29055: LD_VAR 0 18
29059: PPUSH
29060: CALL_OW 181
// end ; continue ;
29064: GO 28716
// end ; if not cleaners or not tmp in cleaners then
29066: LD_VAR 0 6
29070: NOT
29071: PUSH
29072: LD_VAR 0 13
29076: PUSH
29077: LD_VAR 0 6
29081: IN
29082: NOT
29083: OR
29084: IFFALSE 29391
// begin if dep then
29086: LD_VAR 0 17
29090: IFFALSE 29226
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29092: LD_ADDR_VAR 0 16
29096: PUSH
29097: LD_VAR 0 17
29101: PUSH
29102: LD_INT 1
29104: ARRAY
29105: PPUSH
29106: CALL_OW 250
29110: PPUSH
29111: LD_VAR 0 17
29115: PUSH
29116: LD_INT 1
29118: ARRAY
29119: PPUSH
29120: CALL_OW 254
29124: PPUSH
29125: LD_INT 5
29127: PPUSH
29128: CALL_OW 272
29132: PUSH
29133: LD_VAR 0 17
29137: PUSH
29138: LD_INT 1
29140: ARRAY
29141: PPUSH
29142: CALL_OW 251
29146: PPUSH
29147: LD_VAR 0 17
29151: PUSH
29152: LD_INT 1
29154: ARRAY
29155: PPUSH
29156: CALL_OW 254
29160: PPUSH
29161: LD_INT 5
29163: PPUSH
29164: CALL_OW 273
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29173: LD_VAR 0 16
29177: PUSH
29178: LD_INT 1
29180: ARRAY
29181: PPUSH
29182: LD_VAR 0 16
29186: PUSH
29187: LD_INT 2
29189: ARRAY
29190: PPUSH
29191: CALL_OW 488
29195: IFFALSE 29226
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29197: LD_VAR 0 13
29201: PPUSH
29202: LD_VAR 0 16
29206: PUSH
29207: LD_INT 1
29209: ARRAY
29210: PPUSH
29211: LD_VAR 0 16
29215: PUSH
29216: LD_INT 2
29218: ARRAY
29219: PPUSH
29220: CALL_OW 111
// continue ;
29224: GO 28716
// end ; end ; r := GetDir ( tmp ) ;
29226: LD_ADDR_VAR 0 15
29230: PUSH
29231: LD_VAR 0 13
29235: PPUSH
29236: CALL_OW 254
29240: ST_TO_ADDR
// if r = 5 then
29241: LD_VAR 0 15
29245: PUSH
29246: LD_INT 5
29248: EQUAL
29249: IFFALSE 29259
// r := 0 ;
29251: LD_ADDR_VAR 0 15
29255: PUSH
29256: LD_INT 0
29258: ST_TO_ADDR
// for j = r to 5 do
29259: LD_ADDR_VAR 0 10
29263: PUSH
29264: DOUBLE
29265: LD_VAR 0 15
29269: DEC
29270: ST_TO_ADDR
29271: LD_INT 5
29273: PUSH
29274: FOR_TO
29275: IFFALSE 29389
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29277: LD_ADDR_VAR 0 11
29281: PUSH
29282: LD_VAR 0 13
29286: PPUSH
29287: CALL_OW 250
29291: PPUSH
29292: LD_VAR 0 10
29296: PPUSH
29297: LD_INT 2
29299: PPUSH
29300: CALL_OW 272
29304: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29305: LD_ADDR_VAR 0 12
29309: PUSH
29310: LD_VAR 0 13
29314: PPUSH
29315: CALL_OW 251
29319: PPUSH
29320: LD_VAR 0 10
29324: PPUSH
29325: LD_INT 2
29327: PPUSH
29328: CALL_OW 273
29332: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29333: LD_VAR 0 11
29337: PPUSH
29338: LD_VAR 0 12
29342: PPUSH
29343: CALL_OW 488
29347: PUSH
29348: LD_VAR 0 11
29352: PPUSH
29353: LD_VAR 0 12
29357: PPUSH
29358: CALL_OW 428
29362: NOT
29363: AND
29364: IFFALSE 29387
// begin ComMoveXY ( tmp , _x , _y ) ;
29366: LD_VAR 0 13
29370: PPUSH
29371: LD_VAR 0 11
29375: PPUSH
29376: LD_VAR 0 12
29380: PPUSH
29381: CALL_OW 111
// break ;
29385: GO 29389
// end ; end ;
29387: GO 29274
29389: POP
29390: POP
// end ; end ;
29391: GO 28716
29393: POP
29394: POP
// end ;
29395: LD_VAR 0 8
29399: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29400: LD_INT 0
29402: PPUSH
// result := true ;
29403: LD_ADDR_VAR 0 3
29407: PUSH
29408: LD_INT 1
29410: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29411: LD_VAR 0 2
29415: PUSH
29416: LD_INT 24
29418: DOUBLE
29419: EQUAL
29420: IFTRUE 29430
29422: LD_INT 33
29424: DOUBLE
29425: EQUAL
29426: IFTRUE 29430
29428: GO 29455
29430: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29431: LD_ADDR_VAR 0 3
29435: PUSH
29436: LD_INT 32
29438: PPUSH
29439: LD_VAR 0 1
29443: PPUSH
29444: CALL_OW 321
29448: PUSH
29449: LD_INT 2
29451: EQUAL
29452: ST_TO_ADDR
29453: GO 29771
29455: LD_INT 20
29457: DOUBLE
29458: EQUAL
29459: IFTRUE 29463
29461: GO 29488
29463: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29464: LD_ADDR_VAR 0 3
29468: PUSH
29469: LD_INT 6
29471: PPUSH
29472: LD_VAR 0 1
29476: PPUSH
29477: CALL_OW 321
29481: PUSH
29482: LD_INT 2
29484: EQUAL
29485: ST_TO_ADDR
29486: GO 29771
29488: LD_INT 22
29490: DOUBLE
29491: EQUAL
29492: IFTRUE 29502
29494: LD_INT 36
29496: DOUBLE
29497: EQUAL
29498: IFTRUE 29502
29500: GO 29527
29502: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29503: LD_ADDR_VAR 0 3
29507: PUSH
29508: LD_INT 15
29510: PPUSH
29511: LD_VAR 0 1
29515: PPUSH
29516: CALL_OW 321
29520: PUSH
29521: LD_INT 2
29523: EQUAL
29524: ST_TO_ADDR
29525: GO 29771
29527: LD_INT 30
29529: DOUBLE
29530: EQUAL
29531: IFTRUE 29535
29533: GO 29560
29535: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29536: LD_ADDR_VAR 0 3
29540: PUSH
29541: LD_INT 20
29543: PPUSH
29544: LD_VAR 0 1
29548: PPUSH
29549: CALL_OW 321
29553: PUSH
29554: LD_INT 2
29556: EQUAL
29557: ST_TO_ADDR
29558: GO 29771
29560: LD_INT 28
29562: DOUBLE
29563: EQUAL
29564: IFTRUE 29574
29566: LD_INT 21
29568: DOUBLE
29569: EQUAL
29570: IFTRUE 29574
29572: GO 29599
29574: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29575: LD_ADDR_VAR 0 3
29579: PUSH
29580: LD_INT 21
29582: PPUSH
29583: LD_VAR 0 1
29587: PPUSH
29588: CALL_OW 321
29592: PUSH
29593: LD_INT 2
29595: EQUAL
29596: ST_TO_ADDR
29597: GO 29771
29599: LD_INT 16
29601: DOUBLE
29602: EQUAL
29603: IFTRUE 29607
29605: GO 29632
29607: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29608: LD_ADDR_VAR 0 3
29612: PUSH
29613: LD_INT 84
29615: PPUSH
29616: LD_VAR 0 1
29620: PPUSH
29621: CALL_OW 321
29625: PUSH
29626: LD_INT 2
29628: EQUAL
29629: ST_TO_ADDR
29630: GO 29771
29632: LD_INT 19
29634: DOUBLE
29635: EQUAL
29636: IFTRUE 29646
29638: LD_INT 23
29640: DOUBLE
29641: EQUAL
29642: IFTRUE 29646
29644: GO 29671
29646: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29647: LD_ADDR_VAR 0 3
29651: PUSH
29652: LD_INT 83
29654: PPUSH
29655: LD_VAR 0 1
29659: PPUSH
29660: CALL_OW 321
29664: PUSH
29665: LD_INT 2
29667: EQUAL
29668: ST_TO_ADDR
29669: GO 29771
29671: LD_INT 17
29673: DOUBLE
29674: EQUAL
29675: IFTRUE 29679
29677: GO 29704
29679: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29680: LD_ADDR_VAR 0 3
29684: PUSH
29685: LD_INT 39
29687: PPUSH
29688: LD_VAR 0 1
29692: PPUSH
29693: CALL_OW 321
29697: PUSH
29698: LD_INT 2
29700: EQUAL
29701: ST_TO_ADDR
29702: GO 29771
29704: LD_INT 18
29706: DOUBLE
29707: EQUAL
29708: IFTRUE 29712
29710: GO 29737
29712: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29713: LD_ADDR_VAR 0 3
29717: PUSH
29718: LD_INT 40
29720: PPUSH
29721: LD_VAR 0 1
29725: PPUSH
29726: CALL_OW 321
29730: PUSH
29731: LD_INT 2
29733: EQUAL
29734: ST_TO_ADDR
29735: GO 29771
29737: LD_INT 27
29739: DOUBLE
29740: EQUAL
29741: IFTRUE 29745
29743: GO 29770
29745: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29746: LD_ADDR_VAR 0 3
29750: PUSH
29751: LD_INT 35
29753: PPUSH
29754: LD_VAR 0 1
29758: PPUSH
29759: CALL_OW 321
29763: PUSH
29764: LD_INT 2
29766: EQUAL
29767: ST_TO_ADDR
29768: GO 29771
29770: POP
// end ;
29771: LD_VAR 0 3
29775: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29776: LD_INT 0
29778: PPUSH
29779: PPUSH
29780: PPUSH
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
29786: PPUSH
29787: PPUSH
29788: PPUSH
// result := false ;
29789: LD_ADDR_VAR 0 6
29793: PUSH
29794: LD_INT 0
29796: ST_TO_ADDR
// if btype = b_depot then
29797: LD_VAR 0 2
29801: PUSH
29802: LD_INT 0
29804: EQUAL
29805: IFFALSE 29817
// begin result := true ;
29807: LD_ADDR_VAR 0 6
29811: PUSH
29812: LD_INT 1
29814: ST_TO_ADDR
// exit ;
29815: GO 30643
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29817: LD_VAR 0 1
29821: NOT
29822: PUSH
29823: LD_VAR 0 1
29827: PPUSH
29828: CALL_OW 266
29832: PUSH
29833: LD_INT 0
29835: PUSH
29836: LD_INT 1
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: IN
29843: NOT
29844: OR
29845: PUSH
29846: LD_VAR 0 2
29850: NOT
29851: OR
29852: PUSH
29853: LD_VAR 0 5
29857: PUSH
29858: LD_INT 0
29860: PUSH
29861: LD_INT 1
29863: PUSH
29864: LD_INT 2
29866: PUSH
29867: LD_INT 3
29869: PUSH
29870: LD_INT 4
29872: PUSH
29873: LD_INT 5
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: IN
29884: NOT
29885: OR
29886: PUSH
29887: LD_VAR 0 3
29891: PPUSH
29892: LD_VAR 0 4
29896: PPUSH
29897: CALL_OW 488
29901: NOT
29902: OR
29903: IFFALSE 29907
// exit ;
29905: GO 30643
// side := GetSide ( depot ) ;
29907: LD_ADDR_VAR 0 9
29911: PUSH
29912: LD_VAR 0 1
29916: PPUSH
29917: CALL_OW 255
29921: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29922: LD_VAR 0 9
29926: PPUSH
29927: LD_VAR 0 2
29931: PPUSH
29932: CALL 29400 0 2
29936: NOT
29937: IFFALSE 29941
// exit ;
29939: GO 30643
// pom := GetBase ( depot ) ;
29941: LD_ADDR_VAR 0 10
29945: PUSH
29946: LD_VAR 0 1
29950: PPUSH
29951: CALL_OW 274
29955: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29956: LD_ADDR_VAR 0 11
29960: PUSH
29961: LD_VAR 0 2
29965: PPUSH
29966: LD_VAR 0 1
29970: PPUSH
29971: CALL_OW 248
29975: PPUSH
29976: CALL_OW 450
29980: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29981: LD_VAR 0 10
29985: PPUSH
29986: LD_INT 1
29988: PPUSH
29989: CALL_OW 275
29993: PUSH
29994: LD_VAR 0 11
29998: PUSH
29999: LD_INT 1
30001: ARRAY
30002: GREATEREQUAL
30003: PUSH
30004: LD_VAR 0 10
30008: PPUSH
30009: LD_INT 2
30011: PPUSH
30012: CALL_OW 275
30016: PUSH
30017: LD_VAR 0 11
30021: PUSH
30022: LD_INT 2
30024: ARRAY
30025: GREATEREQUAL
30026: AND
30027: PUSH
30028: LD_VAR 0 10
30032: PPUSH
30033: LD_INT 3
30035: PPUSH
30036: CALL_OW 275
30040: PUSH
30041: LD_VAR 0 11
30045: PUSH
30046: LD_INT 3
30048: ARRAY
30049: GREATEREQUAL
30050: AND
30051: NOT
30052: IFFALSE 30056
// exit ;
30054: GO 30643
// if GetBType ( depot ) = b_depot then
30056: LD_VAR 0 1
30060: PPUSH
30061: CALL_OW 266
30065: PUSH
30066: LD_INT 0
30068: EQUAL
30069: IFFALSE 30081
// dist := 28 else
30071: LD_ADDR_VAR 0 14
30075: PUSH
30076: LD_INT 28
30078: ST_TO_ADDR
30079: GO 30089
// dist := 36 ;
30081: LD_ADDR_VAR 0 14
30085: PUSH
30086: LD_INT 36
30088: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30089: LD_VAR 0 1
30093: PPUSH
30094: LD_VAR 0 3
30098: PPUSH
30099: LD_VAR 0 4
30103: PPUSH
30104: CALL_OW 297
30108: PUSH
30109: LD_VAR 0 14
30113: GREATER
30114: IFFALSE 30118
// exit ;
30116: GO 30643
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30118: LD_ADDR_VAR 0 12
30122: PUSH
30123: LD_VAR 0 2
30127: PPUSH
30128: LD_VAR 0 3
30132: PPUSH
30133: LD_VAR 0 4
30137: PPUSH
30138: LD_VAR 0 5
30142: PPUSH
30143: LD_VAR 0 1
30147: PPUSH
30148: CALL_OW 248
30152: PPUSH
30153: LD_INT 0
30155: PPUSH
30156: CALL 30648 0 6
30160: ST_TO_ADDR
// if not hexes then
30161: LD_VAR 0 12
30165: NOT
30166: IFFALSE 30170
// exit ;
30168: GO 30643
// hex := GetHexInfo ( x , y ) ;
30170: LD_ADDR_VAR 0 15
30174: PUSH
30175: LD_VAR 0 3
30179: PPUSH
30180: LD_VAR 0 4
30184: PPUSH
30185: CALL_OW 546
30189: ST_TO_ADDR
// if hex [ 1 ] then
30190: LD_VAR 0 15
30194: PUSH
30195: LD_INT 1
30197: ARRAY
30198: IFFALSE 30202
// exit ;
30200: GO 30643
// height := hex [ 2 ] ;
30202: LD_ADDR_VAR 0 13
30206: PUSH
30207: LD_VAR 0 15
30211: PUSH
30212: LD_INT 2
30214: ARRAY
30215: ST_TO_ADDR
// for i = 1 to hexes do
30216: LD_ADDR_VAR 0 7
30220: PUSH
30221: DOUBLE
30222: LD_INT 1
30224: DEC
30225: ST_TO_ADDR
30226: LD_VAR 0 12
30230: PUSH
30231: FOR_TO
30232: IFFALSE 30562
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30234: LD_VAR 0 12
30238: PUSH
30239: LD_VAR 0 7
30243: ARRAY
30244: PUSH
30245: LD_INT 1
30247: ARRAY
30248: PPUSH
30249: LD_VAR 0 12
30253: PUSH
30254: LD_VAR 0 7
30258: ARRAY
30259: PUSH
30260: LD_INT 2
30262: ARRAY
30263: PPUSH
30264: CALL_OW 488
30268: NOT
30269: PUSH
30270: LD_VAR 0 12
30274: PUSH
30275: LD_VAR 0 7
30279: ARRAY
30280: PUSH
30281: LD_INT 1
30283: ARRAY
30284: PPUSH
30285: LD_VAR 0 12
30289: PUSH
30290: LD_VAR 0 7
30294: ARRAY
30295: PUSH
30296: LD_INT 2
30298: ARRAY
30299: PPUSH
30300: CALL_OW 428
30304: PUSH
30305: LD_INT 0
30307: GREATER
30308: OR
30309: PUSH
30310: LD_VAR 0 12
30314: PUSH
30315: LD_VAR 0 7
30319: ARRAY
30320: PUSH
30321: LD_INT 1
30323: ARRAY
30324: PPUSH
30325: LD_VAR 0 12
30329: PUSH
30330: LD_VAR 0 7
30334: ARRAY
30335: PUSH
30336: LD_INT 2
30338: ARRAY
30339: PPUSH
30340: CALL_OW 351
30344: OR
30345: IFFALSE 30351
// exit ;
30347: POP
30348: POP
30349: GO 30643
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30351: LD_ADDR_VAR 0 8
30355: PUSH
30356: LD_VAR 0 12
30360: PUSH
30361: LD_VAR 0 7
30365: ARRAY
30366: PUSH
30367: LD_INT 1
30369: ARRAY
30370: PPUSH
30371: LD_VAR 0 12
30375: PUSH
30376: LD_VAR 0 7
30380: ARRAY
30381: PUSH
30382: LD_INT 2
30384: ARRAY
30385: PPUSH
30386: CALL_OW 546
30390: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30391: LD_VAR 0 8
30395: PUSH
30396: LD_INT 1
30398: ARRAY
30399: PUSH
30400: LD_VAR 0 8
30404: PUSH
30405: LD_INT 2
30407: ARRAY
30408: PUSH
30409: LD_VAR 0 13
30413: PUSH
30414: LD_INT 2
30416: PLUS
30417: GREATER
30418: OR
30419: PUSH
30420: LD_VAR 0 8
30424: PUSH
30425: LD_INT 2
30427: ARRAY
30428: PUSH
30429: LD_VAR 0 13
30433: PUSH
30434: LD_INT 2
30436: MINUS
30437: LESS
30438: OR
30439: PUSH
30440: LD_VAR 0 8
30444: PUSH
30445: LD_INT 3
30447: ARRAY
30448: PUSH
30449: LD_INT 0
30451: PUSH
30452: LD_INT 8
30454: PUSH
30455: LD_INT 9
30457: PUSH
30458: LD_INT 10
30460: PUSH
30461: LD_INT 11
30463: PUSH
30464: LD_INT 12
30466: PUSH
30467: LD_INT 13
30469: PUSH
30470: LD_INT 16
30472: PUSH
30473: LD_INT 17
30475: PUSH
30476: LD_INT 18
30478: PUSH
30479: LD_INT 19
30481: PUSH
30482: LD_INT 20
30484: PUSH
30485: LD_INT 21
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: IN
30503: NOT
30504: OR
30505: PUSH
30506: LD_VAR 0 8
30510: PUSH
30511: LD_INT 5
30513: ARRAY
30514: NOT
30515: OR
30516: PUSH
30517: LD_VAR 0 8
30521: PUSH
30522: LD_INT 6
30524: ARRAY
30525: PUSH
30526: LD_INT 1
30528: PUSH
30529: LD_INT 2
30531: PUSH
30532: LD_INT 7
30534: PUSH
30535: LD_INT 9
30537: PUSH
30538: LD_INT 10
30540: PUSH
30541: LD_INT 11
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: IN
30552: NOT
30553: OR
30554: IFFALSE 30560
// exit ;
30556: POP
30557: POP
30558: GO 30643
// end ;
30560: GO 30231
30562: POP
30563: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30564: LD_VAR 0 9
30568: PPUSH
30569: LD_VAR 0 3
30573: PPUSH
30574: LD_VAR 0 4
30578: PPUSH
30579: LD_INT 20
30581: PPUSH
30582: CALL 22566 0 4
30586: PUSH
30587: LD_INT 4
30589: ARRAY
30590: IFFALSE 30594
// exit ;
30592: GO 30643
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30594: LD_VAR 0 2
30598: PUSH
30599: LD_INT 29
30601: PUSH
30602: LD_INT 30
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: IN
30609: PUSH
30610: LD_VAR 0 3
30614: PPUSH
30615: LD_VAR 0 4
30619: PPUSH
30620: LD_VAR 0 9
30624: PPUSH
30625: CALL_OW 440
30629: NOT
30630: AND
30631: IFFALSE 30635
// exit ;
30633: GO 30643
// result := true ;
30635: LD_ADDR_VAR 0 6
30639: PUSH
30640: LD_INT 1
30642: ST_TO_ADDR
// end ;
30643: LD_VAR 0 6
30647: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30648: LD_INT 0
30650: PPUSH
30651: PPUSH
30652: PPUSH
30653: PPUSH
30654: PPUSH
30655: PPUSH
30656: PPUSH
30657: PPUSH
30658: PPUSH
30659: PPUSH
30660: PPUSH
30661: PPUSH
30662: PPUSH
30663: PPUSH
30664: PPUSH
30665: PPUSH
30666: PPUSH
30667: PPUSH
30668: PPUSH
30669: PPUSH
30670: PPUSH
30671: PPUSH
30672: PPUSH
30673: PPUSH
30674: PPUSH
30675: PPUSH
30676: PPUSH
30677: PPUSH
30678: PPUSH
30679: PPUSH
30680: PPUSH
30681: PPUSH
30682: PPUSH
30683: PPUSH
30684: PPUSH
30685: PPUSH
30686: PPUSH
30687: PPUSH
30688: PPUSH
30689: PPUSH
30690: PPUSH
30691: PPUSH
30692: PPUSH
30693: PPUSH
30694: PPUSH
30695: PPUSH
30696: PPUSH
30697: PPUSH
30698: PPUSH
30699: PPUSH
30700: PPUSH
30701: PPUSH
30702: PPUSH
30703: PPUSH
30704: PPUSH
30705: PPUSH
30706: PPUSH
30707: PPUSH
// result = [ ] ;
30708: LD_ADDR_VAR 0 7
30712: PUSH
30713: EMPTY
30714: ST_TO_ADDR
// temp_list = [ ] ;
30715: LD_ADDR_VAR 0 9
30719: PUSH
30720: EMPTY
30721: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30722: LD_VAR 0 4
30726: PUSH
30727: LD_INT 0
30729: PUSH
30730: LD_INT 1
30732: PUSH
30733: LD_INT 2
30735: PUSH
30736: LD_INT 3
30738: PUSH
30739: LD_INT 4
30741: PUSH
30742: LD_INT 5
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: IN
30753: NOT
30754: PUSH
30755: LD_VAR 0 1
30759: PUSH
30760: LD_INT 0
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: IN
30770: PUSH
30771: LD_VAR 0 5
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: LD_INT 2
30781: PUSH
30782: LD_INT 3
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: LIST
30789: IN
30790: NOT
30791: AND
30792: OR
30793: IFFALSE 30797
// exit ;
30795: GO 49188
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30797: LD_VAR 0 1
30801: PUSH
30802: LD_INT 6
30804: PUSH
30805: LD_INT 7
30807: PUSH
30808: LD_INT 8
30810: PUSH
30811: LD_INT 13
30813: PUSH
30814: LD_INT 12
30816: PUSH
30817: LD_INT 15
30819: PUSH
30820: LD_INT 11
30822: PUSH
30823: LD_INT 14
30825: PUSH
30826: LD_INT 10
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: IN
30840: IFFALSE 30850
// btype = b_lab ;
30842: LD_ADDR_VAR 0 1
30846: PUSH
30847: LD_INT 6
30849: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30850: LD_VAR 0 6
30854: PUSH
30855: LD_INT 0
30857: PUSH
30858: LD_INT 1
30860: PUSH
30861: LD_INT 2
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: LIST
30868: IN
30869: NOT
30870: PUSH
30871: LD_VAR 0 1
30875: PUSH
30876: LD_INT 0
30878: PUSH
30879: LD_INT 1
30881: PUSH
30882: LD_INT 2
30884: PUSH
30885: LD_INT 3
30887: PUSH
30888: LD_INT 6
30890: PUSH
30891: LD_INT 36
30893: PUSH
30894: LD_INT 4
30896: PUSH
30897: LD_INT 5
30899: PUSH
30900: LD_INT 31
30902: PUSH
30903: LD_INT 32
30905: PUSH
30906: LD_INT 33
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: IN
30922: NOT
30923: PUSH
30924: LD_VAR 0 6
30928: PUSH
30929: LD_INT 1
30931: EQUAL
30932: AND
30933: OR
30934: PUSH
30935: LD_VAR 0 1
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: LD_INT 3
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: IN
30950: NOT
30951: PUSH
30952: LD_VAR 0 6
30956: PUSH
30957: LD_INT 2
30959: EQUAL
30960: AND
30961: OR
30962: IFFALSE 30972
// mode = 0 ;
30964: LD_ADDR_VAR 0 6
30968: PUSH
30969: LD_INT 0
30971: ST_TO_ADDR
// case mode of 0 :
30972: LD_VAR 0 6
30976: PUSH
30977: LD_INT 0
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 30985
30983: GO 42438
30985: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30986: LD_ADDR_VAR 0 11
30990: PUSH
30991: LD_INT 0
30993: PUSH
30994: LD_INT 0
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: LD_INT 1
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 1
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 1
31024: PUSH
31025: LD_INT 1
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 0
31034: PUSH
31035: LD_INT 1
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 1
31044: NEG
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 1
31055: NEG
31056: PUSH
31057: LD_INT 1
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 1
31067: NEG
31068: PUSH
31069: LD_INT 2
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: LD_INT 2
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: LD_INT 1
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: LD_INT 2
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: LD_INT 1
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 0
31142: PUSH
31143: LD_INT 3
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 1
31152: NEG
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31179: LD_ADDR_VAR 0 12
31183: PUSH
31184: LD_INT 0
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: LD_INT 1
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 1
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 1
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 0
31227: PUSH
31228: LD_INT 1
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: LD_INT 0
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 2
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 1
31291: NEG
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 2
31302: NEG
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 2
31313: NEG
31314: PUSH
31315: LD_INT 1
31317: NEG
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 2
31325: NEG
31326: PUSH
31327: LD_INT 1
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 3
31336: NEG
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 3
31347: NEG
31348: PUSH
31349: LD_INT 1
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31375: LD_ADDR_VAR 0 13
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: LD_INT 1
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 0
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 1
31433: NEG
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 1
31444: NEG
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 1
31456: NEG
31457: PUSH
31458: LD_INT 2
31460: NEG
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 2
31478: PUSH
31479: LD_INT 2
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 2
31498: NEG
31499: PUSH
31500: LD_INT 1
31502: NEG
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 2
31510: NEG
31511: PUSH
31512: LD_INT 2
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 2
31522: NEG
31523: PUSH
31524: LD_INT 3
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 3
31534: NEG
31535: PUSH
31536: LD_INT 2
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 3
31546: NEG
31547: PUSH
31548: LD_INT 3
31550: NEG
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31574: LD_ADDR_VAR 0 14
31578: PUSH
31579: LD_INT 0
31581: PUSH
31582: LD_INT 0
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: LD_INT 1
31594: NEG
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 1
31632: NEG
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: NEG
31656: PUSH
31657: LD_INT 2
31659: NEG
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 0
31667: PUSH
31668: LD_INT 2
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: LD_INT 1
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 1
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 0
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: NEG
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 1
31720: NEG
31721: PUSH
31722: LD_INT 3
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 0
31732: PUSH
31733: LD_INT 3
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: LD_INT 2
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31770: LD_ADDR_VAR 0 15
31774: PUSH
31775: LD_INT 0
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 0
31787: PUSH
31788: LD_INT 1
31790: NEG
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 1
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 1
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 1
31828: NEG
31829: PUSH
31830: LD_INT 0
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 2
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 2
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 1
31882: NEG
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 2
31893: NEG
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 2
31904: NEG
31905: PUSH
31906: LD_INT 1
31908: NEG
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 2
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 3
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 3
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31963: LD_ADDR_VAR 0 16
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 0
31980: PUSH
31981: LD_INT 1
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 1
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 1
32021: NEG
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: NEG
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 1
32044: NEG
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: LD_INT 1
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 2
32086: NEG
32087: PUSH
32088: LD_INT 1
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: LD_INT 2
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 3
32110: PUSH
32111: LD_INT 2
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 3
32120: PUSH
32121: LD_INT 3
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 2
32130: PUSH
32131: LD_INT 3
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32156: LD_ADDR_VAR 0 17
32160: PUSH
32161: LD_INT 0
32163: PUSH
32164: LD_INT 0
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 0
32173: PUSH
32174: LD_INT 1
32176: NEG
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 1
32184: PUSH
32185: LD_INT 0
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: LD_INT 1
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 0
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 1
32214: NEG
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 1
32225: NEG
32226: PUSH
32227: LD_INT 1
32229: NEG
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 1
32237: NEG
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: LD_INT 2
32252: NEG
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 1
32260: PUSH
32261: LD_INT 1
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 2
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 2
32281: PUSH
32282: LD_INT 1
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 2
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 0
32311: PUSH
32312: LD_INT 2
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 2
32332: NEG
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: NEG
32344: PUSH
32345: LD_INT 1
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 2
32355: NEG
32356: PUSH
32357: LD_INT 2
32359: NEG
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32386: LD_ADDR_VAR 0 18
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 0
32403: PUSH
32404: LD_INT 1
32406: NEG
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: LD_INT 0
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: LD_INT 1
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 0
32434: PUSH
32435: LD_INT 1
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 1
32444: NEG
32445: PUSH
32446: LD_INT 0
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: LD_INT 1
32459: NEG
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: LD_INT 2
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: LD_INT 2
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 2
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 2
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 2
32521: PUSH
32522: LD_INT 2
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 1
32531: PUSH
32532: LD_INT 2
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 0
32541: PUSH
32542: LD_INT 2
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 2
32562: NEG
32563: PUSH
32564: LD_INT 0
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 2
32573: NEG
32574: PUSH
32575: LD_INT 1
32577: NEG
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 2
32585: NEG
32586: PUSH
32587: LD_INT 2
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32616: LD_ADDR_VAR 0 19
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: LD_INT 0
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 1
32674: NEG
32675: PUSH
32676: LD_INT 0
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: NEG
32686: PUSH
32687: LD_INT 1
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: LD_INT 2
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: LD_INT 2
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 2
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 2
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 2
32751: PUSH
32752: LD_INT 2
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: LD_INT 2
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 2
32792: NEG
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 2
32803: NEG
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: NEG
32816: PUSH
32817: LD_INT 2
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32846: LD_ADDR_VAR 0 20
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 0
32863: PUSH
32864: LD_INT 1
32866: NEG
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 1
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 1
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 0
32894: PUSH
32895: LD_INT 1
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 1
32904: NEG
32905: PUSH
32906: LD_INT 0
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 1
32915: NEG
32916: PUSH
32917: LD_INT 1
32919: NEG
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 1
32927: NEG
32928: PUSH
32929: LD_INT 2
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 0
32939: PUSH
32940: LD_INT 2
32942: NEG
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: LD_INT 1
32953: NEG
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 2
32961: PUSH
32962: LD_INT 0
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 2
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 2
32981: PUSH
32982: LD_INT 2
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: LD_INT 2
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 0
33001: PUSH
33002: LD_INT 2
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 1
33011: NEG
33012: PUSH
33013: LD_INT 1
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 2
33022: NEG
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 2
33033: NEG
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 2
33045: NEG
33046: PUSH
33047: LD_INT 2
33049: NEG
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33076: LD_ADDR_VAR 0 21
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 0
33093: PUSH
33094: LD_INT 1
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 1
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: LD_INT 1
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 1
33134: NEG
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 1
33145: NEG
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: LD_INT 2
33161: NEG
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: LD_INT 2
33172: NEG
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: LD_INT 1
33183: NEG
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 2
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: LD_INT 1
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 2
33211: PUSH
33212: LD_INT 2
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: LD_INT 2
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: LD_INT 2
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 2
33252: NEG
33253: PUSH
33254: LD_INT 0
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 2
33263: NEG
33264: PUSH
33265: LD_INT 1
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 2
33275: NEG
33276: PUSH
33277: LD_INT 2
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33306: LD_ADDR_VAR 0 22
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 0
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 1
33364: NEG
33365: PUSH
33366: LD_INT 0
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 1
33375: NEG
33376: PUSH
33377: LD_INT 1
33379: NEG
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: LD_INT 2
33391: NEG
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: LD_INT 2
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: LD_INT 1
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 2
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 2
33431: PUSH
33432: LD_INT 1
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 2
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 1
33451: PUSH
33452: LD_INT 2
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: LD_INT 2
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 2
33482: NEG
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 2
33493: NEG
33494: PUSH
33495: LD_INT 1
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 2
33505: NEG
33506: PUSH
33507: LD_INT 2
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33536: LD_ADDR_VAR 0 23
33540: PUSH
33541: LD_INT 0
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: LD_INT 1
33556: NEG
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 1
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 1
33574: PUSH
33575: LD_INT 1
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 1
33594: NEG
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 1
33605: NEG
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 1
33617: NEG
33618: PUSH
33619: LD_INT 2
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: LD_INT 2
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 1
33640: PUSH
33641: LD_INT 1
33643: NEG
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 2
33651: PUSH
33652: LD_INT 0
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 2
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 2
33671: PUSH
33672: LD_INT 2
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 1
33681: PUSH
33682: LD_INT 2
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: LD_INT 2
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: LD_INT 1
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 2
33712: NEG
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 2
33723: NEG
33724: PUSH
33725: LD_INT 1
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 2
33735: NEG
33736: PUSH
33737: LD_INT 2
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 2
33747: NEG
33748: PUSH
33749: LD_INT 3
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 1
33759: NEG
33760: PUSH
33761: LD_INT 3
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 1
33771: PUSH
33772: LD_INT 2
33774: NEG
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 2
33782: PUSH
33783: LD_INT 1
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33816: LD_ADDR_VAR 0 24
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 0
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 1
33844: PUSH
33845: LD_INT 0
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 1
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 0
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 1
33885: NEG
33886: PUSH
33887: LD_INT 1
33889: NEG
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 1
33897: NEG
33898: PUSH
33899: LD_INT 2
33901: NEG
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 0
33909: PUSH
33910: LD_INT 2
33912: NEG
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 1
33920: PUSH
33921: LD_INT 1
33923: NEG
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: LD_INT 0
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 2
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 2
33951: PUSH
33952: LD_INT 2
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 1
33961: PUSH
33962: LD_INT 2
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: LD_INT 2
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 1
33981: NEG
33982: PUSH
33983: LD_INT 1
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 2
33992: NEG
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 2
34003: NEG
34004: PUSH
34005: LD_INT 1
34007: NEG
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 2
34015: NEG
34016: PUSH
34017: LD_INT 2
34019: NEG
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: LD_INT 2
34030: NEG
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 2
34038: PUSH
34039: LD_INT 1
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 3
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 3
34059: PUSH
34060: LD_INT 2
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34092: LD_ADDR_VAR 0 25
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: LD_INT 1
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 0
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 1
34150: NEG
34151: PUSH
34152: LD_INT 0
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 1
34161: NEG
34162: PUSH
34163: LD_INT 1
34165: NEG
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: PUSH
34175: LD_INT 2
34177: NEG
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: LD_INT 2
34188: NEG
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: LD_INT 1
34199: NEG
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 2
34207: PUSH
34208: LD_INT 0
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 2
34217: PUSH
34218: LD_INT 1
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 2
34227: PUSH
34228: LD_INT 2
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 1
34237: PUSH
34238: LD_INT 2
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: LD_INT 2
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: LD_INT 1
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 2
34268: NEG
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 2
34279: NEG
34280: PUSH
34281: LD_INT 1
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 2
34291: NEG
34292: PUSH
34293: LD_INT 2
34295: NEG
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 3
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 3
34313: PUSH
34314: LD_INT 2
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 2
34323: PUSH
34324: LD_INT 3
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: LD_INT 3
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34366: LD_ADDR_VAR 0 26
34370: PUSH
34371: LD_INT 0
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 1
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 1
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: NEG
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 1
34447: NEG
34448: PUSH
34449: LD_INT 2
34451: NEG
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: LD_INT 2
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 2
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 2
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 2
34501: PUSH
34502: LD_INT 2
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 1
34511: PUSH
34512: LD_INT 2
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: LD_INT 2
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 1
34531: NEG
34532: PUSH
34533: LD_INT 1
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 2
34542: NEG
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 2
34553: NEG
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 2
34565: NEG
34566: PUSH
34567: LD_INT 2
34569: NEG
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 2
34577: PUSH
34578: LD_INT 3
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: LD_INT 3
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 2
34608: NEG
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34642: LD_ADDR_VAR 0 27
34646: PUSH
34647: LD_INT 0
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 0
34659: PUSH
34660: LD_INT 1
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 1
34680: PUSH
34681: LD_INT 1
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: LD_INT 1
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 1
34711: NEG
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 1
34723: NEG
34724: PUSH
34725: LD_INT 2
34727: NEG
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 2
34738: NEG
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 2
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 2
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: LD_INT 2
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: LD_INT 2
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: LD_INT 2
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 1
34807: NEG
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 2
34818: NEG
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 2
34829: NEG
34830: PUSH
34831: LD_INT 1
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 2
34841: NEG
34842: PUSH
34843: LD_INT 2
34845: NEG
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: NEG
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 3
34875: NEG
34876: PUSH
34877: LD_INT 1
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 3
34887: NEG
34888: PUSH
34889: LD_INT 2
34891: NEG
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34922: LD_ADDR_VAR 0 28
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: LD_INT 1
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 1
34991: NEG
34992: PUSH
34993: LD_INT 1
34995: NEG
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 1
35003: NEG
35004: PUSH
35005: LD_INT 2
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 0
35015: PUSH
35016: LD_INT 2
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 2
35037: PUSH
35038: LD_INT 0
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 2
35047: PUSH
35048: LD_INT 1
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 2
35057: PUSH
35058: LD_INT 2
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: LD_INT 2
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: LD_INT 2
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: LD_INT 1
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 2
35098: NEG
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 2
35109: NEG
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 2
35121: NEG
35122: PUSH
35123: LD_INT 2
35125: NEG
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 2
35133: NEG
35134: PUSH
35135: LD_INT 3
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: NEG
35146: PUSH
35147: LD_INT 3
35149: NEG
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 3
35157: NEG
35158: PUSH
35159: LD_INT 1
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 3
35169: NEG
35170: PUSH
35171: LD_INT 2
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35204: LD_ADDR_VAR 0 29
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: LD_INT 1
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 1
35273: NEG
35274: PUSH
35275: LD_INT 1
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 1
35285: NEG
35286: PUSH
35287: LD_INT 2
35289: NEG
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: LD_INT 2
35300: NEG
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 2
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 2
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: LD_INT 2
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 0
35349: PUSH
35350: LD_INT 2
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 1
35359: NEG
35360: PUSH
35361: LD_INT 1
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 2
35370: NEG
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 2
35382: NEG
35383: PUSH
35384: LD_INT 2
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 2
35394: NEG
35395: PUSH
35396: LD_INT 3
35398: NEG
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 2
35406: PUSH
35407: LD_INT 1
35409: NEG
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 3
35417: PUSH
35418: LD_INT 1
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: LD_INT 3
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: LD_INT 2
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 3
35448: NEG
35449: PUSH
35450: LD_INT 2
35452: NEG
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35483: LD_ADDR_VAR 0 30
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 0
35500: PUSH
35501: LD_INT 1
35503: NEG
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: LD_INT 0
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 1
35521: PUSH
35522: LD_INT 1
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 1
35541: NEG
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 1
35552: NEG
35553: PUSH
35554: LD_INT 1
35556: NEG
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: PUSH
35566: LD_INT 2
35568: NEG
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: LD_INT 2
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 2
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 2
35608: PUSH
35609: LD_INT 1
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 2
35618: PUSH
35619: LD_INT 2
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 1
35628: PUSH
35629: LD_INT 2
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 1
35638: NEG
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 2
35649: NEG
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 2
35660: NEG
35661: PUSH
35662: LD_INT 1
35664: NEG
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 1
35672: NEG
35673: PUSH
35674: LD_INT 3
35676: NEG
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 1
35684: PUSH
35685: LD_INT 2
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 3
35695: PUSH
35696: LD_INT 2
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 2
35705: PUSH
35706: LD_INT 3
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 2
35715: NEG
35716: PUSH
35717: LD_INT 1
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 3
35726: NEG
35727: PUSH
35728: LD_INT 1
35730: NEG
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35761: LD_ADDR_VAR 0 31
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 1
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 1
35819: NEG
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 1
35830: NEG
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 1
35842: NEG
35843: PUSH
35844: LD_INT 2
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: LD_INT 1
35857: NEG
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 2
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 2
35875: PUSH
35876: LD_INT 1
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 2
35885: PUSH
35886: LD_INT 2
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 1
35895: PUSH
35896: LD_INT 2
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: LD_INT 2
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 1
35915: NEG
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 2
35926: NEG
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 2
35938: NEG
35939: PUSH
35940: LD_INT 2
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 2
35950: NEG
35951: PUSH
35952: LD_INT 3
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 2
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 3
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 1
35983: PUSH
35984: LD_INT 3
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: LD_INT 2
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 3
36004: NEG
36005: PUSH
36006: LD_INT 2
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36039: LD_ADDR_VAR 0 32
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 0
36056: PUSH
36057: LD_INT 1
36059: NEG
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: NEG
36121: PUSH
36122: LD_INT 2
36124: NEG
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: LD_INT 2
36135: NEG
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: LD_INT 1
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 2
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 2
36164: PUSH
36165: LD_INT 2
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: LD_INT 2
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 2
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 2
36205: NEG
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 2
36216: NEG
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: LD_INT 3
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 3
36251: PUSH
36252: LD_INT 2
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 2
36261: PUSH
36262: LD_INT 3
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 2
36271: NEG
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 3
36282: NEG
36283: PUSH
36284: LD_INT 1
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36317: LD_ADDR_VAR 0 33
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 0
36334: PUSH
36335: LD_INT 1
36337: NEG
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 1
36355: PUSH
36356: LD_INT 1
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: LD_INT 1
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: NEG
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 1
36386: NEG
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: NEG
36399: PUSH
36400: LD_INT 2
36402: NEG
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: LD_INT 1
36413: NEG
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: LD_INT 0
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 2
36431: PUSH
36432: LD_INT 1
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 1
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: LD_INT 2
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 2
36472: NEG
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 2
36483: NEG
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: NEG
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 2
36507: NEG
36508: PUSH
36509: LD_INT 3
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 2
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 3
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: LD_INT 3
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 1
36550: NEG
36551: PUSH
36552: LD_INT 2
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 3
36561: NEG
36562: PUSH
36563: LD_INT 2
36565: NEG
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36596: LD_ADDR_VAR 0 34
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 0
36613: PUSH
36614: LD_INT 1
36616: NEG
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: PUSH
36635: LD_INT 1
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: LD_INT 1
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 1
36654: NEG
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: NEG
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 1
36677: NEG
36678: PUSH
36679: LD_INT 2
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 0
36689: PUSH
36690: LD_INT 2
36692: NEG
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 1
36700: PUSH
36701: LD_INT 1
36703: NEG
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 2
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 2
36721: PUSH
36722: LD_INT 2
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: LD_INT 2
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 2
36752: NEG
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 2
36763: NEG
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 2
36775: NEG
36776: PUSH
36777: LD_INT 2
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: LD_INT 3
36791: NEG
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: LD_INT 2
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 3
36810: PUSH
36811: LD_INT 2
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: LD_INT 3
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 2
36830: NEG
36831: PUSH
36832: LD_INT 1
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 3
36841: NEG
36842: PUSH
36843: LD_INT 1
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36876: LD_ADDR_VAR 0 35
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 0
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 0
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 1
36934: NEG
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 2
36967: NEG
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36988: LD_ADDR_VAR 0 36
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: LD_INT 1
37061: NEG
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: LD_INT 2
37073: NEG
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 1
37081: PUSH
37082: LD_INT 2
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37100: LD_ADDR_VAR 0 37
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: LD_INT 1
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 1
37158: NEG
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: LD_INT 1
37184: NEG
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: NEG
37193: PUSH
37194: LD_INT 1
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37212: LD_ADDR_VAR 0 38
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: LD_INT 1
37232: NEG
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: LD_INT 1
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 1
37270: NEG
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: LD_INT 1
37285: NEG
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 2
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 2
37303: NEG
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37324: LD_ADDR_VAR 0 39
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 1
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 0
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 1
37393: NEG
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: NEG
37406: PUSH
37407: LD_INT 2
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: LD_INT 2
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37436: LD_ADDR_VAR 0 40
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 1
37474: PUSH
37475: LD_INT 1
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 1
37505: NEG
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: LD_INT 1
37520: NEG
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37548: LD_ADDR_VAR 0 41
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: LD_INT 0
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: LD_INT 1
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: LD_INT 1
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: NEG
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: NEG
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: NEG
37630: PUSH
37631: LD_INT 2
37633: NEG
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 2
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 2
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 2
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: LD_INT 2
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: NEG
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 2
37703: NEG
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 2
37714: NEG
37715: PUSH
37716: LD_INT 1
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 2
37726: NEG
37727: PUSH
37728: LD_INT 2
37730: NEG
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 2
37738: NEG
37739: PUSH
37740: LD_INT 3
37742: NEG
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 2
37750: PUSH
37751: LD_INT 1
37753: NEG
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 3
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 3
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 3
37781: PUSH
37782: LD_INT 2
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 3
37791: PUSH
37792: LD_INT 3
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: LD_INT 3
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 2
37811: NEG
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 3
37822: NEG
37823: PUSH
37824: LD_INT 0
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 3
37833: NEG
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 3
37845: NEG
37846: PUSH
37847: LD_INT 2
37849: NEG
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 3
37857: NEG
37858: PUSH
37859: LD_INT 3
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37898: LD_ADDR_VAR 0 42
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: LD_INT 0
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: LD_INT 1
37918: NEG
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 1
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: LD_INT 1
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: NEG
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: NEG
37968: PUSH
37969: LD_INT 1
37971: NEG
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 1
37979: NEG
37980: PUSH
37981: LD_INT 2
37983: NEG
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: LD_INT 2
37994: NEG
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 1
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 2
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 2
38023: PUSH
38024: LD_INT 2
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: LD_INT 2
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: LD_INT 2
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: NEG
38065: PUSH
38066: LD_INT 1
38068: NEG
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 2
38076: NEG
38077: PUSH
38078: LD_INT 2
38080: NEG
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 2
38088: NEG
38089: PUSH
38090: LD_INT 3
38092: NEG
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 1
38100: NEG
38101: PUSH
38102: LD_INT 3
38104: NEG
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: LD_INT 3
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: LD_INT 2
38126: NEG
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 3
38134: PUSH
38135: LD_INT 2
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 3
38144: PUSH
38145: LD_INT 3
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 2
38154: PUSH
38155: LD_INT 3
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 1
38164: PUSH
38165: LD_INT 3
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: LD_INT 3
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 3
38195: NEG
38196: PUSH
38197: LD_INT 2
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 3
38207: NEG
38208: PUSH
38209: LD_INT 3
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38248: LD_ADDR_VAR 0 43
38252: PUSH
38253: LD_INT 0
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 1
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: LD_INT 1
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: LD_INT 0
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 2
38333: NEG
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: LD_INT 2
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 2
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 2
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 1
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 1
38403: NEG
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 2
38414: NEG
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 2
38425: NEG
38426: PUSH
38427: LD_INT 1
38429: NEG
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: NEG
38438: PUSH
38439: LD_INT 3
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: LD_INT 3
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: LD_INT 2
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 2
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 3
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 3
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 3
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: LD_INT 3
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: LD_INT 2
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 2
38533: NEG
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 3
38544: NEG
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 3
38555: NEG
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38596: LD_ADDR_VAR 0 44
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: LD_INT 0
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: LD_INT 1
38616: NEG
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 1
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: LD_INT 1
38669: NEG
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: LD_INT 2
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: LD_INT 2
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: LD_INT 2
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 1
38740: NEG
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 2
38762: NEG
38763: PUSH
38764: LD_INT 1
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 2
38774: NEG
38775: PUSH
38776: LD_INT 2
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 2
38786: NEG
38787: PUSH
38788: LD_INT 3
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 3
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 3
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 3
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 3
38839: PUSH
38840: LD_INT 3
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: LD_INT 3
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 2
38859: NEG
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 3
38870: NEG
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 3
38881: NEG
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 3
38893: NEG
38894: PUSH
38895: LD_INT 2
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 3
38905: NEG
38906: PUSH
38907: LD_INT 3
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38946: LD_ADDR_VAR 0 45
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: LD_INT 0
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: NEG
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: LD_INT 1
39019: NEG
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: LD_INT 2
39031: NEG
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 2
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 2
39061: PUSH
39062: LD_INT 1
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 2
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: LD_INT 2
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: NEG
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 2
39112: NEG
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: LD_INT 2
39128: NEG
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 2
39136: NEG
39137: PUSH
39138: LD_INT 3
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: LD_INT 3
39152: NEG
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: LD_INT 3
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: PUSH
39172: LD_INT 2
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 3
39182: PUSH
39183: LD_INT 2
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 3
39192: PUSH
39193: LD_INT 3
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: LD_INT 3
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: PUSH
39213: LD_INT 3
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: LD_INT 3
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 3
39243: NEG
39244: PUSH
39245: LD_INT 2
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 3
39255: NEG
39256: PUSH
39257: LD_INT 3
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39296: LD_ADDR_VAR 0 46
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 0
39313: PUSH
39314: LD_INT 1
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: LD_INT 1
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: LD_INT 1
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: LD_INT 2
39392: NEG
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: PUSH
39401: LD_INT 1
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 2
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 2
39421: PUSH
39422: LD_INT 1
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: LD_INT 2
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 2
39462: NEG
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 2
39473: NEG
39474: PUSH
39475: LD_INT 1
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: LD_INT 3
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 0
39497: PUSH
39498: LD_INT 3
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 2
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 3
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 3
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: LD_INT 3
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: LD_INT 3
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 1
39570: NEG
39571: PUSH
39572: LD_INT 2
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 2
39581: NEG
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 3
39592: NEG
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 3
39603: NEG
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39644: LD_ADDR_VAR 0 47
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: LD_INT 1
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 1
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: LD_INT 1
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: LD_INT 2
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: LD_INT 2
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 2
39759: NEG
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 2
39771: NEG
39772: PUSH
39773: LD_INT 2
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39795: LD_ADDR_VAR 0 48
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 1
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: NEG
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: LD_INT 2
39880: NEG
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: LD_INT 2
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 2
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39942: LD_ADDR_VAR 0 49
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 2
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 2
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: LD_INT 2
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40086: LD_ADDR_VAR 0 50
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: LD_INT 1
40106: NEG
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 2
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: LD_INT 2
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: LD_INT 2
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: NEG
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40230: LD_ADDR_VAR 0 51
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: LD_INT 2
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: LD_INT 2
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40377: LD_ADDR_VAR 0 52
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: LD_INT 1
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 2
40504: NEG
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40528: LD_ADDR_VAR 0 53
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: LD_INT 2
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 2
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 2
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: LD_INT 2
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 2
40704: NEG
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: NEG
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40758: LD_ADDR_VAR 0 54
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 2
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 2
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: NEG
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40988: LD_ADDR_VAR 0 55
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: NEG
41070: PUSH
41071: LD_INT 2
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 2
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 2
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 2
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: LD_INT 2
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 2
41164: NEG
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 2
41175: NEG
41176: PUSH
41177: LD_INT 1
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 2
41187: NEG
41188: PUSH
41189: LD_INT 2
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41218: LD_ADDR_VAR 0 56
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: NEG
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 2
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: LD_INT 2
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 2
41405: NEG
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 2
41417: NEG
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41448: LD_ADDR_VAR 0 57
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: LD_INT 2
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 2
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 2
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 2
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 2
41624: NEG
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: NEG
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 2
41647: NEG
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41678: LD_ADDR_VAR 0 58
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 2
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: LD_INT 2
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 2
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 2
41865: NEG
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 2
41877: NEG
41878: PUSH
41879: LD_INT 2
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41908: LD_ADDR_VAR 0 59
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41996: LD_ADDR_VAR 0 60
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: LD_INT 1
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42084: LD_ADDR_VAR 0 61
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: LD_INT 1
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42172: LD_ADDR_VAR 0 62
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: LD_INT 1
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42260: LD_ADDR_VAR 0 63
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42348: LD_ADDR_VAR 0 64
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: ST_TO_ADDR
// end ; 1 :
42436: GO 48333
42438: LD_INT 1
42440: DOUBLE
42441: EQUAL
42442: IFTRUE 42446
42444: GO 45069
42446: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42447: LD_ADDR_VAR 0 11
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: LD_INT 3
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: LD_INT 3
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: LD_INT 2
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: LIST
42490: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42491: LD_ADDR_VAR 0 12
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 3
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: LIST
42531: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42532: LD_ADDR_VAR 0 13
42536: PUSH
42537: LD_INT 3
42539: PUSH
42540: LD_INT 2
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 3
42549: PUSH
42550: LD_INT 3
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: LD_INT 3
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: LIST
42571: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42572: LD_ADDR_VAR 0 14
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: LD_INT 3
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: LD_INT 3
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: LD_INT 2
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: LIST
42612: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42613: LD_ADDR_VAR 0 15
42617: PUSH
42618: LD_INT 2
42620: NEG
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 3
42631: NEG
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 3
42642: NEG
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: LIST
42656: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42657: LD_ADDR_VAR 0 16
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: LD_INT 3
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 3
42676: NEG
42677: PUSH
42678: LD_INT 2
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 3
42688: NEG
42689: PUSH
42690: LD_INT 3
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: LIST
42702: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42703: LD_ADDR_VAR 0 17
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: LD_INT 3
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 3
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 2
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: LIST
42746: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42747: LD_ADDR_VAR 0 18
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 3
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: LIST
42787: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42788: LD_ADDR_VAR 0 19
42792: PUSH
42793: LD_INT 3
42795: PUSH
42796: LD_INT 2
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 3
42805: PUSH
42806: LD_INT 3
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 2
42815: PUSH
42816: LD_INT 3
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42828: LD_ADDR_VAR 0 20
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: LD_INT 3
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 3
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: LIST
42868: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42869: LD_ADDR_VAR 0 21
42873: PUSH
42874: LD_INT 2
42876: NEG
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 3
42887: NEG
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 3
42898: NEG
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: LIST
42912: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42913: LD_ADDR_VAR 0 22
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: LD_INT 3
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 3
42932: NEG
42933: PUSH
42934: LD_INT 2
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 3
42944: NEG
42945: PUSH
42946: LD_INT 3
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: LIST
42958: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42959: LD_ADDR_VAR 0 23
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: LD_INT 3
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: LD_INT 4
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: LD_INT 3
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43003: LD_ADDR_VAR 0 24
43007: PUSH
43008: LD_INT 3
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 3
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 4
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43044: LD_ADDR_VAR 0 25
43048: PUSH
43049: LD_INT 3
43051: PUSH
43052: LD_INT 3
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 4
43061: PUSH
43062: LD_INT 3
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 3
43071: PUSH
43072: LD_INT 4
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: LIST
43083: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43084: LD_ADDR_VAR 0 26
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 3
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: LD_INT 4
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: LD_INT 3
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: LIST
43124: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43125: LD_ADDR_VAR 0 27
43129: PUSH
43130: LD_INT 3
43132: NEG
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 3
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 4
43154: NEG
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: LIST
43168: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43169: LD_ADDR_VAR 0 28
43173: PUSH
43174: LD_INT 3
43176: NEG
43177: PUSH
43178: LD_INT 3
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 3
43188: NEG
43189: PUSH
43190: LD_INT 4
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 4
43200: NEG
43201: PUSH
43202: LD_INT 3
43204: NEG
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: LIST
43214: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43215: LD_ADDR_VAR 0 29
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: LD_INT 3
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 3
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: LD_INT 2
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 4
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 4
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 3
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: LD_INT 5
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: LD_INT 5
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: LD_INT 4
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 6
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: LD_INT 6
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: LD_INT 5
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43370: LD_ADDR_VAR 0 30
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 3
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 3
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 3
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 4
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 4
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 4
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 5
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 5
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 5
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 6
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 6
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43513: LD_ADDR_VAR 0 31
43517: PUSH
43518: LD_INT 3
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 3
43530: PUSH
43531: LD_INT 3
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: LD_INT 3
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 4
43550: PUSH
43551: LD_INT 3
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 4
43560: PUSH
43561: LD_INT 4
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 3
43570: PUSH
43571: LD_INT 4
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 5
43580: PUSH
43581: LD_INT 4
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 5
43590: PUSH
43591: LD_INT 5
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 4
43600: PUSH
43601: LD_INT 5
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 6
43610: PUSH
43611: LD_INT 5
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 6
43620: PUSH
43621: LD_INT 6
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 5
43630: PUSH
43631: LD_INT 6
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43652: LD_ADDR_VAR 0 32
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: LD_INT 3
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 3
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 4
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 4
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: LD_INT 3
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: LD_INT 5
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: LD_INT 5
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: LD_INT 4
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: LD_INT 6
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: LD_INT 6
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: LD_INT 5
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43795: LD_ADDR_VAR 0 33
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 3
43813: NEG
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 3
43824: NEG
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 3
43836: NEG
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 4
43847: NEG
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 4
43858: NEG
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 4
43870: NEG
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 5
43881: NEG
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 5
43892: NEG
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 5
43904: NEG
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 6
43915: NEG
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 6
43926: NEG
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43950: LD_ADDR_VAR 0 34
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: LD_INT 3
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 3
43969: NEG
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 3
43981: NEG
43982: PUSH
43983: LD_INT 3
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 3
43993: NEG
43994: PUSH
43995: LD_INT 4
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 4
44005: NEG
44006: PUSH
44007: LD_INT 3
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 4
44017: NEG
44018: PUSH
44019: LD_INT 4
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 4
44029: NEG
44030: PUSH
44031: LD_INT 5
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 5
44041: NEG
44042: PUSH
44043: LD_INT 4
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 5
44053: NEG
44054: PUSH
44055: LD_INT 5
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 5
44065: NEG
44066: PUSH
44067: LD_INT 6
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 6
44077: NEG
44078: PUSH
44079: LD_INT 5
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 6
44089: NEG
44090: PUSH
44091: LD_INT 6
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44113: LD_ADDR_VAR 0 41
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: LD_INT 3
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: LIST
44156: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44157: LD_ADDR_VAR 0 42
44161: PUSH
44162: LD_INT 2
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 3
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: LIST
44197: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44198: LD_ADDR_VAR 0 43
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 3
44215: PUSH
44216: LD_INT 2
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: PUSH
44226: LD_INT 3
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: LIST
44237: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44238: LD_ADDR_VAR 0 44
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: LD_INT 3
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: LIST
44278: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44279: LD_ADDR_VAR 0 45
44283: PUSH
44284: LD_INT 2
44286: NEG
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 2
44297: NEG
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 3
44308: NEG
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: LIST
44322: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44323: LD_ADDR_VAR 0 46
44327: PUSH
44328: LD_INT 2
44330: NEG
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 2
44342: NEG
44343: PUSH
44344: LD_INT 3
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 3
44354: NEG
44355: PUSH
44356: LD_INT 2
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44369: LD_ADDR_VAR 0 47
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: LD_INT 3
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 3
44392: NEG
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44402: LD_ADDR_VAR 0 48
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: LD_INT 2
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44433: LD_ADDR_VAR 0 49
44437: PUSH
44438: LD_INT 3
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 3
44450: PUSH
44451: LD_INT 2
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44462: LD_ADDR_VAR 0 50
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: LD_INT 3
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: LD_INT 3
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44491: LD_ADDR_VAR 0 51
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44522: LD_ADDR_VAR 0 52
44526: PUSH
44527: LD_INT 3
44529: NEG
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 3
44541: NEG
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44555: LD_ADDR_VAR 0 53
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 3
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: LD_INT 3
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: LD_INT 2
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: LIST
44598: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44599: LD_ADDR_VAR 0 54
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 3
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 3
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: LIST
44639: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44640: LD_ADDR_VAR 0 55
44644: PUSH
44645: LD_INT 3
44647: PUSH
44648: LD_INT 2
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 3
44657: PUSH
44658: LD_INT 3
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: LD_INT 3
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44680: LD_ADDR_VAR 0 56
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: LD_INT 3
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: LD_INT 3
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: LIST
44720: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44721: LD_ADDR_VAR 0 57
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 3
44739: NEG
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 3
44750: NEG
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: LIST
44764: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44765: LD_ADDR_VAR 0 58
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: LD_INT 3
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 3
44784: NEG
44785: PUSH
44786: LD_INT 2
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 3
44796: NEG
44797: PUSH
44798: LD_INT 3
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: LIST
44810: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44811: LD_ADDR_VAR 0 59
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 2
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 2
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: LIST
44854: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44855: LD_ADDR_VAR 0 60
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 2
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 2
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: LIST
44895: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44896: LD_ADDR_VAR 0 61
44900: PUSH
44901: LD_INT 2
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: LIST
44935: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44936: LD_ADDR_VAR 0 62
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 2
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44977: LD_ADDR_VAR 0 63
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 2
44995: NEG
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: NEG
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: LIST
45020: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45021: LD_ADDR_VAR 0 64
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: LD_INT 2
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: LIST
45066: ST_TO_ADDR
// end ; 2 :
45067: GO 48333
45069: LD_INT 2
45071: DOUBLE
45072: EQUAL
45073: IFTRUE 45077
45075: GO 48332
45077: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45078: LD_ADDR_VAR 0 29
45082: PUSH
45083: LD_INT 4
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 4
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 5
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 5
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 4
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 3
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 3
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 3
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 5
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 3
45178: PUSH
45179: LD_INT 3
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 3
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 4
45198: PUSH
45199: LD_INT 3
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 4
45208: PUSH
45209: LD_INT 4
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 3
45218: PUSH
45219: LD_INT 4
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: LD_INT 3
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 4
45248: PUSH
45249: LD_INT 2
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: LD_INT 4
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: LD_INT 4
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 4
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: LD_INT 5
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: LD_INT 5
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: LD_INT 4
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: LD_INT 3
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: LD_INT 5
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: LD_INT 3
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 3
45361: NEG
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 3
45372: NEG
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 3
45406: NEG
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 4
45417: NEG
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 4
45428: NEG
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 4
45440: NEG
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: NEG
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 4
45463: NEG
45464: PUSH
45465: LD_INT 4
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 4
45475: NEG
45476: PUSH
45477: LD_INT 5
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 3
45487: NEG
45488: PUSH
45489: LD_INT 4
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 3
45499: NEG
45500: PUSH
45501: LD_INT 3
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 4
45511: NEG
45512: PUSH
45513: LD_INT 3
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 5
45523: NEG
45524: PUSH
45525: LD_INT 4
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 5
45535: NEG
45536: PUSH
45537: LD_INT 5
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 3
45547: NEG
45548: PUSH
45549: LD_INT 5
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 5
45559: NEG
45560: PUSH
45561: LD_INT 3
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45616: LD_ADDR_VAR 0 30
45620: PUSH
45621: LD_INT 4
45623: PUSH
45624: LD_INT 4
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 4
45633: PUSH
45634: LD_INT 3
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 5
45643: PUSH
45644: LD_INT 4
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 5
45653: PUSH
45654: LD_INT 5
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 4
45663: PUSH
45664: LD_INT 5
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 3
45673: PUSH
45674: LD_INT 4
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 3
45683: PUSH
45684: LD_INT 3
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 5
45693: PUSH
45694: LD_INT 3
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 3
45703: PUSH
45704: LD_INT 5
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 3
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 3
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: LD_INT 4
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: LD_INT 4
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: LD_INT 3
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 2
45785: PUSH
45786: LD_INT 4
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 4
45806: NEG
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 4
45817: NEG
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 3
45829: NEG
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 3
45840: NEG
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 4
45851: NEG
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 5
45862: NEG
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 5
45873: NEG
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 5
45885: NEG
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 3
45897: NEG
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 3
45908: NEG
45909: PUSH
45910: LD_INT 3
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 3
45920: NEG
45921: PUSH
45922: LD_INT 4
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: LD_INT 3
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 3
45956: NEG
45957: PUSH
45958: LD_INT 2
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 4
45968: NEG
45969: PUSH
45970: LD_INT 3
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 4
45980: NEG
45981: PUSH
45982: LD_INT 4
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 2
45992: NEG
45993: PUSH
45994: LD_INT 4
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 4
46004: NEG
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 4
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: LD_INT 5
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: LD_INT 4
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: LD_INT 3
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 3
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: LD_INT 4
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: LD_INT 5
46087: NEG
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: PUSH
46096: LD_INT 3
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: LD_INT 5
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46163: LD_ADDR_VAR 0 31
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: LD_INT 4
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 3
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: LD_INT 4
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: LD_INT 5
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 5
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: LD_INT 4
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 3
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: LD_INT 5
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: LD_INT 3
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 3
46263: NEG
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 3
46274: NEG
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: NEG
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 3
46308: NEG
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 4
46319: NEG
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 4
46330: NEG
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 4
46342: NEG
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 4
46365: NEG
46366: PUSH
46367: LD_INT 4
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 4
46377: NEG
46378: PUSH
46379: LD_INT 5
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 3
46389: NEG
46390: PUSH
46391: LD_INT 4
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 3
46401: NEG
46402: PUSH
46403: LD_INT 3
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 4
46413: NEG
46414: PUSH
46415: LD_INT 3
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 5
46425: NEG
46426: PUSH
46427: LD_INT 4
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 5
46437: NEG
46438: PUSH
46439: LD_INT 5
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 3
46449: NEG
46450: PUSH
46451: LD_INT 5
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 5
46461: NEG
46462: PUSH
46463: LD_INT 3
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 3
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 4
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 3
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 3
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: LD_INT 4
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: LD_INT 4
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 4
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 4
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 5
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 5
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 4
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 3
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 3
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 3
46647: PUSH
46648: LD_INT 2
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 5
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46713: LD_ADDR_VAR 0 32
46717: PUSH
46718: LD_INT 4
46720: NEG
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 4
46731: NEG
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 3
46743: NEG
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 3
46754: NEG
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 4
46765: NEG
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 5
46776: NEG
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 5
46787: NEG
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 5
46799: NEG
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 3
46811: NEG
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 3
46822: NEG
46823: PUSH
46824: LD_INT 3
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 3
46834: NEG
46835: PUSH
46836: LD_INT 4
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: LD_INT 3
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 3
46870: NEG
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 4
46882: NEG
46883: PUSH
46884: LD_INT 3
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 4
46894: NEG
46895: PUSH
46896: LD_INT 4
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: LD_INT 4
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 4
46918: NEG
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 4
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: LD_INT 5
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: LD_INT 4
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 3
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: LD_INT 3
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: LD_INT 4
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: LD_INT 5
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 2
47009: PUSH
47010: LD_INT 3
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: LD_INT 5
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 3
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 3
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 4
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 4
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 3
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 4
47115: PUSH
47116: LD_INT 2
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 4
47125: PUSH
47126: LD_INT 4
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 4
47135: PUSH
47136: LD_INT 3
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 5
47145: PUSH
47146: LD_INT 4
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 5
47155: PUSH
47156: LD_INT 5
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 4
47165: PUSH
47166: LD_INT 5
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 3
47175: PUSH
47176: LD_INT 4
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 3
47185: PUSH
47186: LD_INT 3
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 5
47195: PUSH
47196: LD_INT 3
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 3
47205: PUSH
47206: LD_INT 5
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47260: LD_ADDR_VAR 0 33
47264: PUSH
47265: LD_INT 4
47267: NEG
47268: PUSH
47269: LD_INT 4
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 4
47279: NEG
47280: PUSH
47281: LD_INT 5
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 3
47291: NEG
47292: PUSH
47293: LD_INT 4
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 3
47303: NEG
47304: PUSH
47305: LD_INT 3
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 4
47315: NEG
47316: PUSH
47317: LD_INT 3
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 5
47327: NEG
47328: PUSH
47329: LD_INT 4
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 5
47339: NEG
47340: PUSH
47341: LD_INT 5
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 3
47351: NEG
47352: PUSH
47353: LD_INT 5
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 5
47363: NEG
47364: PUSH
47365: LD_INT 3
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 3
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 4
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 3
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: LD_INT 2
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 3
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 4
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 2
47465: NEG
47466: PUSH
47467: LD_INT 4
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 4
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 4
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 5
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 5
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 4
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 3
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 3
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 3
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 5
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 3
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 3
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 4
47590: PUSH
47591: LD_INT 3
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 4
47600: PUSH
47601: LD_INT 4
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 3
47610: PUSH
47611: LD_INT 4
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: LD_INT 3
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 4
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: LD_INT 4
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 4
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 3
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: LD_INT 4
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 5
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: LD_INT 5
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: LD_INT 4
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: LD_INT 5
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: NEG
47743: PUSH
47744: LD_INT 3
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47798: LD_ADDR_VAR 0 34
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 4
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: LD_INT 5
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: LD_INT 4
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: LD_INT 3
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 3
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: LD_INT 4
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: LD_INT 5
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: PUSH
47885: LD_INT 3
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: LD_INT 5
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 3
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 3
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 4
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 4
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 3
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 2
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 4
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 4
48000: PUSH
48001: LD_INT 4
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 4
48010: PUSH
48011: LD_INT 3
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 5
48020: PUSH
48021: LD_INT 4
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 5
48030: PUSH
48031: LD_INT 5
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 4
48040: PUSH
48041: LD_INT 5
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 3
48050: PUSH
48051: LD_INT 4
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 3
48060: PUSH
48061: LD_INT 3
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 5
48070: PUSH
48071: LD_INT 3
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 3
48080: PUSH
48081: LD_INT 5
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: LD_INT 3
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: LD_INT 3
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 4
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 4
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: LD_INT 3
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: LD_INT 4
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 4
48183: NEG
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 4
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 3
48206: NEG
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 3
48217: NEG
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 4
48228: NEG
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 5
48239: NEG
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 5
48250: NEG
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 5
48262: NEG
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 3
48274: NEG
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: ST_TO_ADDR
// end ; end ;
48330: GO 48333
48332: POP
// case btype of b_depot , b_warehouse :
48333: LD_VAR 0 1
48337: PUSH
48338: LD_INT 0
48340: DOUBLE
48341: EQUAL
48342: IFTRUE 48352
48344: LD_INT 1
48346: DOUBLE
48347: EQUAL
48348: IFTRUE 48352
48350: GO 48553
48352: POP
// case nation of nation_american :
48353: LD_VAR 0 5
48357: PUSH
48358: LD_INT 1
48360: DOUBLE
48361: EQUAL
48362: IFTRUE 48366
48364: GO 48422
48366: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48367: LD_ADDR_VAR 0 9
48371: PUSH
48372: LD_VAR 0 11
48376: PUSH
48377: LD_VAR 0 12
48381: PUSH
48382: LD_VAR 0 13
48386: PUSH
48387: LD_VAR 0 14
48391: PUSH
48392: LD_VAR 0 15
48396: PUSH
48397: LD_VAR 0 16
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: PUSH
48410: LD_VAR 0 4
48414: PUSH
48415: LD_INT 1
48417: PLUS
48418: ARRAY
48419: ST_TO_ADDR
48420: GO 48551
48422: LD_INT 2
48424: DOUBLE
48425: EQUAL
48426: IFTRUE 48430
48428: GO 48486
48430: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48431: LD_ADDR_VAR 0 9
48435: PUSH
48436: LD_VAR 0 17
48440: PUSH
48441: LD_VAR 0 18
48445: PUSH
48446: LD_VAR 0 19
48450: PUSH
48451: LD_VAR 0 20
48455: PUSH
48456: LD_VAR 0 21
48460: PUSH
48461: LD_VAR 0 22
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: PUSH
48474: LD_VAR 0 4
48478: PUSH
48479: LD_INT 1
48481: PLUS
48482: ARRAY
48483: ST_TO_ADDR
48484: GO 48551
48486: LD_INT 3
48488: DOUBLE
48489: EQUAL
48490: IFTRUE 48494
48492: GO 48550
48494: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48495: LD_ADDR_VAR 0 9
48499: PUSH
48500: LD_VAR 0 23
48504: PUSH
48505: LD_VAR 0 24
48509: PUSH
48510: LD_VAR 0 25
48514: PUSH
48515: LD_VAR 0 26
48519: PUSH
48520: LD_VAR 0 27
48524: PUSH
48525: LD_VAR 0 28
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: PUSH
48538: LD_VAR 0 4
48542: PUSH
48543: LD_INT 1
48545: PLUS
48546: ARRAY
48547: ST_TO_ADDR
48548: GO 48551
48550: POP
48551: GO 49106
48553: LD_INT 2
48555: DOUBLE
48556: EQUAL
48557: IFTRUE 48567
48559: LD_INT 3
48561: DOUBLE
48562: EQUAL
48563: IFTRUE 48567
48565: GO 48623
48567: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48568: LD_ADDR_VAR 0 9
48572: PUSH
48573: LD_VAR 0 29
48577: PUSH
48578: LD_VAR 0 30
48582: PUSH
48583: LD_VAR 0 31
48587: PUSH
48588: LD_VAR 0 32
48592: PUSH
48593: LD_VAR 0 33
48597: PUSH
48598: LD_VAR 0 34
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: PUSH
48611: LD_VAR 0 4
48615: PUSH
48616: LD_INT 1
48618: PLUS
48619: ARRAY
48620: ST_TO_ADDR
48621: GO 49106
48623: LD_INT 16
48625: DOUBLE
48626: EQUAL
48627: IFTRUE 48685
48629: LD_INT 17
48631: DOUBLE
48632: EQUAL
48633: IFTRUE 48685
48635: LD_INT 18
48637: DOUBLE
48638: EQUAL
48639: IFTRUE 48685
48641: LD_INT 19
48643: DOUBLE
48644: EQUAL
48645: IFTRUE 48685
48647: LD_INT 22
48649: DOUBLE
48650: EQUAL
48651: IFTRUE 48685
48653: LD_INT 20
48655: DOUBLE
48656: EQUAL
48657: IFTRUE 48685
48659: LD_INT 21
48661: DOUBLE
48662: EQUAL
48663: IFTRUE 48685
48665: LD_INT 23
48667: DOUBLE
48668: EQUAL
48669: IFTRUE 48685
48671: LD_INT 24
48673: DOUBLE
48674: EQUAL
48675: IFTRUE 48685
48677: LD_INT 25
48679: DOUBLE
48680: EQUAL
48681: IFTRUE 48685
48683: GO 48741
48685: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48686: LD_ADDR_VAR 0 9
48690: PUSH
48691: LD_VAR 0 35
48695: PUSH
48696: LD_VAR 0 36
48700: PUSH
48701: LD_VAR 0 37
48705: PUSH
48706: LD_VAR 0 38
48710: PUSH
48711: LD_VAR 0 39
48715: PUSH
48716: LD_VAR 0 40
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: PUSH
48729: LD_VAR 0 4
48733: PUSH
48734: LD_INT 1
48736: PLUS
48737: ARRAY
48738: ST_TO_ADDR
48739: GO 49106
48741: LD_INT 6
48743: DOUBLE
48744: EQUAL
48745: IFTRUE 48797
48747: LD_INT 7
48749: DOUBLE
48750: EQUAL
48751: IFTRUE 48797
48753: LD_INT 8
48755: DOUBLE
48756: EQUAL
48757: IFTRUE 48797
48759: LD_INT 13
48761: DOUBLE
48762: EQUAL
48763: IFTRUE 48797
48765: LD_INT 12
48767: DOUBLE
48768: EQUAL
48769: IFTRUE 48797
48771: LD_INT 15
48773: DOUBLE
48774: EQUAL
48775: IFTRUE 48797
48777: LD_INT 11
48779: DOUBLE
48780: EQUAL
48781: IFTRUE 48797
48783: LD_INT 14
48785: DOUBLE
48786: EQUAL
48787: IFTRUE 48797
48789: LD_INT 10
48791: DOUBLE
48792: EQUAL
48793: IFTRUE 48797
48795: GO 48853
48797: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48798: LD_ADDR_VAR 0 9
48802: PUSH
48803: LD_VAR 0 41
48807: PUSH
48808: LD_VAR 0 42
48812: PUSH
48813: LD_VAR 0 43
48817: PUSH
48818: LD_VAR 0 44
48822: PUSH
48823: LD_VAR 0 45
48827: PUSH
48828: LD_VAR 0 46
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: PUSH
48841: LD_VAR 0 4
48845: PUSH
48846: LD_INT 1
48848: PLUS
48849: ARRAY
48850: ST_TO_ADDR
48851: GO 49106
48853: LD_INT 36
48855: DOUBLE
48856: EQUAL
48857: IFTRUE 48861
48859: GO 48917
48861: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48862: LD_ADDR_VAR 0 9
48866: PUSH
48867: LD_VAR 0 47
48871: PUSH
48872: LD_VAR 0 48
48876: PUSH
48877: LD_VAR 0 49
48881: PUSH
48882: LD_VAR 0 50
48886: PUSH
48887: LD_VAR 0 51
48891: PUSH
48892: LD_VAR 0 52
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: PUSH
48905: LD_VAR 0 4
48909: PUSH
48910: LD_INT 1
48912: PLUS
48913: ARRAY
48914: ST_TO_ADDR
48915: GO 49106
48917: LD_INT 4
48919: DOUBLE
48920: EQUAL
48921: IFTRUE 48943
48923: LD_INT 5
48925: DOUBLE
48926: EQUAL
48927: IFTRUE 48943
48929: LD_INT 34
48931: DOUBLE
48932: EQUAL
48933: IFTRUE 48943
48935: LD_INT 37
48937: DOUBLE
48938: EQUAL
48939: IFTRUE 48943
48941: GO 48999
48943: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48944: LD_ADDR_VAR 0 9
48948: PUSH
48949: LD_VAR 0 53
48953: PUSH
48954: LD_VAR 0 54
48958: PUSH
48959: LD_VAR 0 55
48963: PUSH
48964: LD_VAR 0 56
48968: PUSH
48969: LD_VAR 0 57
48973: PUSH
48974: LD_VAR 0 58
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: PUSH
48987: LD_VAR 0 4
48991: PUSH
48992: LD_INT 1
48994: PLUS
48995: ARRAY
48996: ST_TO_ADDR
48997: GO 49106
48999: LD_INT 31
49001: DOUBLE
49002: EQUAL
49003: IFTRUE 49049
49005: LD_INT 32
49007: DOUBLE
49008: EQUAL
49009: IFTRUE 49049
49011: LD_INT 33
49013: DOUBLE
49014: EQUAL
49015: IFTRUE 49049
49017: LD_INT 27
49019: DOUBLE
49020: EQUAL
49021: IFTRUE 49049
49023: LD_INT 26
49025: DOUBLE
49026: EQUAL
49027: IFTRUE 49049
49029: LD_INT 28
49031: DOUBLE
49032: EQUAL
49033: IFTRUE 49049
49035: LD_INT 29
49037: DOUBLE
49038: EQUAL
49039: IFTRUE 49049
49041: LD_INT 30
49043: DOUBLE
49044: EQUAL
49045: IFTRUE 49049
49047: GO 49105
49049: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49050: LD_ADDR_VAR 0 9
49054: PUSH
49055: LD_VAR 0 59
49059: PUSH
49060: LD_VAR 0 60
49064: PUSH
49065: LD_VAR 0 61
49069: PUSH
49070: LD_VAR 0 62
49074: PUSH
49075: LD_VAR 0 63
49079: PUSH
49080: LD_VAR 0 64
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: PUSH
49093: LD_VAR 0 4
49097: PUSH
49098: LD_INT 1
49100: PLUS
49101: ARRAY
49102: ST_TO_ADDR
49103: GO 49106
49105: POP
// temp_list2 = [ ] ;
49106: LD_ADDR_VAR 0 10
49110: PUSH
49111: EMPTY
49112: ST_TO_ADDR
// for i in temp_list do
49113: LD_ADDR_VAR 0 8
49117: PUSH
49118: LD_VAR 0 9
49122: PUSH
49123: FOR_IN
49124: IFFALSE 49176
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49126: LD_ADDR_VAR 0 10
49130: PUSH
49131: LD_VAR 0 10
49135: PUSH
49136: LD_VAR 0 8
49140: PUSH
49141: LD_INT 1
49143: ARRAY
49144: PUSH
49145: LD_VAR 0 2
49149: PLUS
49150: PUSH
49151: LD_VAR 0 8
49155: PUSH
49156: LD_INT 2
49158: ARRAY
49159: PUSH
49160: LD_VAR 0 3
49164: PLUS
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: EMPTY
49171: LIST
49172: ADD
49173: ST_TO_ADDR
49174: GO 49123
49176: POP
49177: POP
// result = temp_list2 ;
49178: LD_ADDR_VAR 0 7
49182: PUSH
49183: LD_VAR 0 10
49187: ST_TO_ADDR
// end ;
49188: LD_VAR 0 7
49192: RET
// export function EnemyInRange ( unit , dist ) ; begin
49193: LD_INT 0
49195: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49196: LD_ADDR_VAR 0 3
49200: PUSH
49201: LD_VAR 0 1
49205: PPUSH
49206: CALL_OW 255
49210: PPUSH
49211: LD_VAR 0 1
49215: PPUSH
49216: CALL_OW 250
49220: PPUSH
49221: LD_VAR 0 1
49225: PPUSH
49226: CALL_OW 251
49230: PPUSH
49231: LD_VAR 0 2
49235: PPUSH
49236: CALL 22566 0 4
49240: PUSH
49241: LD_INT 4
49243: ARRAY
49244: ST_TO_ADDR
// end ;
49245: LD_VAR 0 3
49249: RET
// export function PlayerSeeMe ( unit ) ; begin
49250: LD_INT 0
49252: PPUSH
// result := See ( your_side , unit ) ;
49253: LD_ADDR_VAR 0 2
49257: PUSH
49258: LD_OWVAR 2
49262: PPUSH
49263: LD_VAR 0 1
49267: PPUSH
49268: CALL_OW 292
49272: ST_TO_ADDR
// end ;
49273: LD_VAR 0 2
49277: RET
// export function ReverseDir ( unit ) ; begin
49278: LD_INT 0
49280: PPUSH
// if not unit then
49281: LD_VAR 0 1
49285: NOT
49286: IFFALSE 49290
// exit ;
49288: GO 49313
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49290: LD_ADDR_VAR 0 2
49294: PUSH
49295: LD_VAR 0 1
49299: PPUSH
49300: CALL_OW 254
49304: PUSH
49305: LD_INT 3
49307: PLUS
49308: PUSH
49309: LD_INT 6
49311: MOD
49312: ST_TO_ADDR
// end ;
49313: LD_VAR 0 2
49317: RET
// export function ReverseArray ( array ) ; var i ; begin
49318: LD_INT 0
49320: PPUSH
49321: PPUSH
// if not array then
49322: LD_VAR 0 1
49326: NOT
49327: IFFALSE 49331
// exit ;
49329: GO 49386
// result := [ ] ;
49331: LD_ADDR_VAR 0 2
49335: PUSH
49336: EMPTY
49337: ST_TO_ADDR
// for i := array downto 1 do
49338: LD_ADDR_VAR 0 3
49342: PUSH
49343: DOUBLE
49344: LD_VAR 0 1
49348: INC
49349: ST_TO_ADDR
49350: LD_INT 1
49352: PUSH
49353: FOR_DOWNTO
49354: IFFALSE 49384
// result := Join ( result , array [ i ] ) ;
49356: LD_ADDR_VAR 0 2
49360: PUSH
49361: LD_VAR 0 2
49365: PPUSH
49366: LD_VAR 0 1
49370: PUSH
49371: LD_VAR 0 3
49375: ARRAY
49376: PPUSH
49377: CALL 54051 0 2
49381: ST_TO_ADDR
49382: GO 49353
49384: POP
49385: POP
// end ;
49386: LD_VAR 0 2
49390: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49391: LD_INT 0
49393: PPUSH
49394: PPUSH
49395: PPUSH
49396: PPUSH
49397: PPUSH
49398: PPUSH
// if not unit or not hexes then
49399: LD_VAR 0 1
49403: NOT
49404: PUSH
49405: LD_VAR 0 2
49409: NOT
49410: OR
49411: IFFALSE 49415
// exit ;
49413: GO 49538
// dist := 9999 ;
49415: LD_ADDR_VAR 0 5
49419: PUSH
49420: LD_INT 9999
49422: ST_TO_ADDR
// for i = 1 to hexes do
49423: LD_ADDR_VAR 0 4
49427: PUSH
49428: DOUBLE
49429: LD_INT 1
49431: DEC
49432: ST_TO_ADDR
49433: LD_VAR 0 2
49437: PUSH
49438: FOR_TO
49439: IFFALSE 49526
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49441: LD_ADDR_VAR 0 6
49445: PUSH
49446: LD_VAR 0 1
49450: PPUSH
49451: LD_VAR 0 2
49455: PUSH
49456: LD_VAR 0 4
49460: ARRAY
49461: PUSH
49462: LD_INT 1
49464: ARRAY
49465: PPUSH
49466: LD_VAR 0 2
49470: PUSH
49471: LD_VAR 0 4
49475: ARRAY
49476: PUSH
49477: LD_INT 2
49479: ARRAY
49480: PPUSH
49481: CALL_OW 297
49485: ST_TO_ADDR
// if tdist < dist then
49486: LD_VAR 0 6
49490: PUSH
49491: LD_VAR 0 5
49495: LESS
49496: IFFALSE 49524
// begin hex := hexes [ i ] ;
49498: LD_ADDR_VAR 0 8
49502: PUSH
49503: LD_VAR 0 2
49507: PUSH
49508: LD_VAR 0 4
49512: ARRAY
49513: ST_TO_ADDR
// dist := tdist ;
49514: LD_ADDR_VAR 0 5
49518: PUSH
49519: LD_VAR 0 6
49523: ST_TO_ADDR
// end ; end ;
49524: GO 49438
49526: POP
49527: POP
// result := hex ;
49528: LD_ADDR_VAR 0 3
49532: PUSH
49533: LD_VAR 0 8
49537: ST_TO_ADDR
// end ;
49538: LD_VAR 0 3
49542: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49543: LD_INT 0
49545: PPUSH
49546: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49547: LD_VAR 0 1
49551: NOT
49552: PUSH
49553: LD_VAR 0 1
49557: PUSH
49558: LD_INT 21
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 23
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PPUSH
49582: CALL_OW 69
49586: IN
49587: NOT
49588: OR
49589: IFFALSE 49593
// exit ;
49591: GO 49640
// for i = 1 to 3 do
49593: LD_ADDR_VAR 0 3
49597: PUSH
49598: DOUBLE
49599: LD_INT 1
49601: DEC
49602: ST_TO_ADDR
49603: LD_INT 3
49605: PUSH
49606: FOR_TO
49607: IFFALSE 49638
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49609: LD_VAR 0 1
49613: PPUSH
49614: CALL_OW 250
49618: PPUSH
49619: LD_VAR 0 1
49623: PPUSH
49624: CALL_OW 251
49628: PPUSH
49629: LD_INT 1
49631: PPUSH
49632: CALL_OW 453
49636: GO 49606
49638: POP
49639: POP
// end ;
49640: LD_VAR 0 2
49644: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49645: LD_INT 0
49647: PPUSH
49648: PPUSH
49649: PPUSH
49650: PPUSH
49651: PPUSH
49652: PPUSH
// if not unit or not enemy_unit then
49653: LD_VAR 0 1
49657: NOT
49658: PUSH
49659: LD_VAR 0 2
49663: NOT
49664: OR
49665: IFFALSE 49669
// exit ;
49667: GO 50136
// if GetLives ( i ) < 250 then
49669: LD_VAR 0 4
49673: PPUSH
49674: CALL_OW 256
49678: PUSH
49679: LD_INT 250
49681: LESS
49682: IFFALSE 49695
// begin ComAutodestruct ( i ) ;
49684: LD_VAR 0 4
49688: PPUSH
49689: CALL 49543 0 1
// exit ;
49693: GO 50136
// end ; x := GetX ( enemy_unit ) ;
49695: LD_ADDR_VAR 0 7
49699: PUSH
49700: LD_VAR 0 2
49704: PPUSH
49705: CALL_OW 250
49709: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49710: LD_ADDR_VAR 0 8
49714: PUSH
49715: LD_VAR 0 2
49719: PPUSH
49720: CALL_OW 251
49724: ST_TO_ADDR
// if not x or not y then
49725: LD_VAR 0 7
49729: NOT
49730: PUSH
49731: LD_VAR 0 8
49735: NOT
49736: OR
49737: IFFALSE 49741
// exit ;
49739: GO 50136
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49741: LD_ADDR_VAR 0 6
49745: PUSH
49746: LD_VAR 0 7
49750: PPUSH
49751: LD_INT 0
49753: PPUSH
49754: LD_INT 4
49756: PPUSH
49757: CALL_OW 272
49761: PUSH
49762: LD_VAR 0 8
49766: PPUSH
49767: LD_INT 0
49769: PPUSH
49770: LD_INT 4
49772: PPUSH
49773: CALL_OW 273
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_VAR 0 7
49786: PPUSH
49787: LD_INT 1
49789: PPUSH
49790: LD_INT 4
49792: PPUSH
49793: CALL_OW 272
49797: PUSH
49798: LD_VAR 0 8
49802: PPUSH
49803: LD_INT 1
49805: PPUSH
49806: LD_INT 4
49808: PPUSH
49809: CALL_OW 273
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_VAR 0 7
49822: PPUSH
49823: LD_INT 2
49825: PPUSH
49826: LD_INT 4
49828: PPUSH
49829: CALL_OW 272
49833: PUSH
49834: LD_VAR 0 8
49838: PPUSH
49839: LD_INT 2
49841: PPUSH
49842: LD_INT 4
49844: PPUSH
49845: CALL_OW 273
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_VAR 0 7
49858: PPUSH
49859: LD_INT 3
49861: PPUSH
49862: LD_INT 4
49864: PPUSH
49865: CALL_OW 272
49869: PUSH
49870: LD_VAR 0 8
49874: PPUSH
49875: LD_INT 3
49877: PPUSH
49878: LD_INT 4
49880: PPUSH
49881: CALL_OW 273
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_VAR 0 7
49894: PPUSH
49895: LD_INT 4
49897: PPUSH
49898: LD_INT 4
49900: PPUSH
49901: CALL_OW 272
49905: PUSH
49906: LD_VAR 0 8
49910: PPUSH
49911: LD_INT 4
49913: PPUSH
49914: LD_INT 4
49916: PPUSH
49917: CALL_OW 273
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_VAR 0 7
49930: PPUSH
49931: LD_INT 5
49933: PPUSH
49934: LD_INT 4
49936: PPUSH
49937: CALL_OW 272
49941: PUSH
49942: LD_VAR 0 8
49946: PPUSH
49947: LD_INT 5
49949: PPUSH
49950: LD_INT 4
49952: PPUSH
49953: CALL_OW 273
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: ST_TO_ADDR
// for i = tmp downto 1 do
49970: LD_ADDR_VAR 0 4
49974: PUSH
49975: DOUBLE
49976: LD_VAR 0 6
49980: INC
49981: ST_TO_ADDR
49982: LD_INT 1
49984: PUSH
49985: FOR_DOWNTO
49986: IFFALSE 50087
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49988: LD_VAR 0 6
49992: PUSH
49993: LD_VAR 0 4
49997: ARRAY
49998: PUSH
49999: LD_INT 1
50001: ARRAY
50002: PPUSH
50003: LD_VAR 0 6
50007: PUSH
50008: LD_VAR 0 4
50012: ARRAY
50013: PUSH
50014: LD_INT 2
50016: ARRAY
50017: PPUSH
50018: CALL_OW 488
50022: NOT
50023: PUSH
50024: LD_VAR 0 6
50028: PUSH
50029: LD_VAR 0 4
50033: ARRAY
50034: PUSH
50035: LD_INT 1
50037: ARRAY
50038: PPUSH
50039: LD_VAR 0 6
50043: PUSH
50044: LD_VAR 0 4
50048: ARRAY
50049: PUSH
50050: LD_INT 2
50052: ARRAY
50053: PPUSH
50054: CALL_OW 428
50058: PUSH
50059: LD_INT 0
50061: NONEQUAL
50062: OR
50063: IFFALSE 50085
// tmp := Delete ( tmp , i ) ;
50065: LD_ADDR_VAR 0 6
50069: PUSH
50070: LD_VAR 0 6
50074: PPUSH
50075: LD_VAR 0 4
50079: PPUSH
50080: CALL_OW 3
50084: ST_TO_ADDR
50085: GO 49985
50087: POP
50088: POP
// j := GetClosestHex ( unit , tmp ) ;
50089: LD_ADDR_VAR 0 5
50093: PUSH
50094: LD_VAR 0 1
50098: PPUSH
50099: LD_VAR 0 6
50103: PPUSH
50104: CALL 49391 0 2
50108: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50109: LD_VAR 0 1
50113: PPUSH
50114: LD_VAR 0 5
50118: PUSH
50119: LD_INT 1
50121: ARRAY
50122: PPUSH
50123: LD_VAR 0 5
50127: PUSH
50128: LD_INT 2
50130: ARRAY
50131: PPUSH
50132: CALL_OW 111
// end ;
50136: LD_VAR 0 3
50140: RET
// export function PrepareApemanSoldier ( ) ; begin
50141: LD_INT 0
50143: PPUSH
// uc_nation := 0 ;
50144: LD_ADDR_OWVAR 21
50148: PUSH
50149: LD_INT 0
50151: ST_TO_ADDR
// hc_sex := sex_male ;
50152: LD_ADDR_OWVAR 27
50156: PUSH
50157: LD_INT 1
50159: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50160: LD_ADDR_OWVAR 28
50164: PUSH
50165: LD_INT 15
50167: ST_TO_ADDR
// hc_gallery :=  ;
50168: LD_ADDR_OWVAR 33
50172: PUSH
50173: LD_STRING 
50175: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50176: LD_ADDR_OWVAR 31
50180: PUSH
50181: LD_INT 0
50183: PPUSH
50184: LD_INT 3
50186: PPUSH
50187: CALL_OW 12
50191: PUSH
50192: LD_INT 0
50194: PPUSH
50195: LD_INT 3
50197: PPUSH
50198: CALL_OW 12
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: ST_TO_ADDR
// end ;
50215: LD_VAR 0 1
50219: RET
// export function PrepareApemanEngineer ( ) ; begin
50220: LD_INT 0
50222: PPUSH
// uc_nation := 0 ;
50223: LD_ADDR_OWVAR 21
50227: PUSH
50228: LD_INT 0
50230: ST_TO_ADDR
// hc_sex := sex_male ;
50231: LD_ADDR_OWVAR 27
50235: PUSH
50236: LD_INT 1
50238: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50239: LD_ADDR_OWVAR 28
50243: PUSH
50244: LD_INT 16
50246: ST_TO_ADDR
// hc_gallery :=  ;
50247: LD_ADDR_OWVAR 33
50251: PUSH
50252: LD_STRING 
50254: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50255: LD_ADDR_OWVAR 31
50259: PUSH
50260: LD_INT 0
50262: PPUSH
50263: LD_INT 3
50265: PPUSH
50266: CALL_OW 12
50270: PUSH
50271: LD_INT 0
50273: PPUSH
50274: LD_INT 3
50276: PPUSH
50277: CALL_OW 12
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: ST_TO_ADDR
// end ;
50294: LD_VAR 0 1
50298: RET
// export function PrepareApeman ( agressivity ) ; begin
50299: LD_INT 0
50301: PPUSH
// uc_side := 0 ;
50302: LD_ADDR_OWVAR 20
50306: PUSH
50307: LD_INT 0
50309: ST_TO_ADDR
// uc_nation := 0 ;
50310: LD_ADDR_OWVAR 21
50314: PUSH
50315: LD_INT 0
50317: ST_TO_ADDR
// hc_sex := sex_male ;
50318: LD_ADDR_OWVAR 27
50322: PUSH
50323: LD_INT 1
50325: ST_TO_ADDR
// hc_class := class_apeman ;
50326: LD_ADDR_OWVAR 28
50330: PUSH
50331: LD_INT 12
50333: ST_TO_ADDR
// hc_gallery :=  ;
50334: LD_ADDR_OWVAR 33
50338: PUSH
50339: LD_STRING 
50341: ST_TO_ADDR
// if agressivity = 0 then
50342: LD_VAR 0 1
50346: PUSH
50347: LD_INT 0
50349: EQUAL
50350: IFFALSE 50362
// hc_agressivity := 0 else
50352: LD_ADDR_OWVAR 35
50356: PUSH
50357: LD_INT 0
50359: ST_TO_ADDR
50360: GO 50383
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50362: LD_ADDR_OWVAR 35
50366: PUSH
50367: LD_VAR 0 1
50371: NEG
50372: PPUSH
50373: LD_VAR 0 1
50377: PPUSH
50378: CALL_OW 12
50382: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50383: LD_ADDR_OWVAR 31
50387: PUSH
50388: LD_INT 0
50390: PPUSH
50391: LD_INT 3
50393: PPUSH
50394: CALL_OW 12
50398: PUSH
50399: LD_INT 0
50401: PPUSH
50402: LD_INT 3
50404: PPUSH
50405: CALL_OW 12
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: ST_TO_ADDR
// end ;
50422: LD_VAR 0 2
50426: RET
// export function PrepareTiger ( agressivity ) ; begin
50427: LD_INT 0
50429: PPUSH
// uc_side := 0 ;
50430: LD_ADDR_OWVAR 20
50434: PUSH
50435: LD_INT 0
50437: ST_TO_ADDR
// uc_nation := 0 ;
50438: LD_ADDR_OWVAR 21
50442: PUSH
50443: LD_INT 0
50445: ST_TO_ADDR
// hc_class := class_tiger ;
50446: LD_ADDR_OWVAR 28
50450: PUSH
50451: LD_INT 14
50453: ST_TO_ADDR
// hc_gallery :=  ;
50454: LD_ADDR_OWVAR 33
50458: PUSH
50459: LD_STRING 
50461: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50462: LD_ADDR_OWVAR 35
50466: PUSH
50467: LD_VAR 0 1
50471: NEG
50472: PPUSH
50473: LD_VAR 0 1
50477: PPUSH
50478: CALL_OW 12
50482: ST_TO_ADDR
// end ;
50483: LD_VAR 0 2
50487: RET
// export function PrepareEnchidna ( ) ; begin
50488: LD_INT 0
50490: PPUSH
// uc_side := 0 ;
50491: LD_ADDR_OWVAR 20
50495: PUSH
50496: LD_INT 0
50498: ST_TO_ADDR
// uc_nation := 0 ;
50499: LD_ADDR_OWVAR 21
50503: PUSH
50504: LD_INT 0
50506: ST_TO_ADDR
// hc_class := class_baggie ;
50507: LD_ADDR_OWVAR 28
50511: PUSH
50512: LD_INT 13
50514: ST_TO_ADDR
// hc_gallery :=  ;
50515: LD_ADDR_OWVAR 33
50519: PUSH
50520: LD_STRING 
50522: ST_TO_ADDR
// end ;
50523: LD_VAR 0 1
50527: RET
// export function PrepareFrog ( ) ; begin
50528: LD_INT 0
50530: PPUSH
// uc_side := 0 ;
50531: LD_ADDR_OWVAR 20
50535: PUSH
50536: LD_INT 0
50538: ST_TO_ADDR
// uc_nation := 0 ;
50539: LD_ADDR_OWVAR 21
50543: PUSH
50544: LD_INT 0
50546: ST_TO_ADDR
// hc_class := class_frog ;
50547: LD_ADDR_OWVAR 28
50551: PUSH
50552: LD_INT 19
50554: ST_TO_ADDR
// hc_gallery :=  ;
50555: LD_ADDR_OWVAR 33
50559: PUSH
50560: LD_STRING 
50562: ST_TO_ADDR
// end ;
50563: LD_VAR 0 1
50567: RET
// export function PrepareFish ( ) ; begin
50568: LD_INT 0
50570: PPUSH
// uc_side := 0 ;
50571: LD_ADDR_OWVAR 20
50575: PUSH
50576: LD_INT 0
50578: ST_TO_ADDR
// uc_nation := 0 ;
50579: LD_ADDR_OWVAR 21
50583: PUSH
50584: LD_INT 0
50586: ST_TO_ADDR
// hc_class := class_fish ;
50587: LD_ADDR_OWVAR 28
50591: PUSH
50592: LD_INT 20
50594: ST_TO_ADDR
// hc_gallery :=  ;
50595: LD_ADDR_OWVAR 33
50599: PUSH
50600: LD_STRING 
50602: ST_TO_ADDR
// end ;
50603: LD_VAR 0 1
50607: RET
// export function PrepareBird ( ) ; begin
50608: LD_INT 0
50610: PPUSH
// uc_side := 0 ;
50611: LD_ADDR_OWVAR 20
50615: PUSH
50616: LD_INT 0
50618: ST_TO_ADDR
// uc_nation := 0 ;
50619: LD_ADDR_OWVAR 21
50623: PUSH
50624: LD_INT 0
50626: ST_TO_ADDR
// hc_class := class_phororhacos ;
50627: LD_ADDR_OWVAR 28
50631: PUSH
50632: LD_INT 18
50634: ST_TO_ADDR
// hc_gallery :=  ;
50635: LD_ADDR_OWVAR 33
50639: PUSH
50640: LD_STRING 
50642: ST_TO_ADDR
// end ;
50643: LD_VAR 0 1
50647: RET
// export function PrepareHorse ( ) ; begin
50648: LD_INT 0
50650: PPUSH
// uc_side := 0 ;
50651: LD_ADDR_OWVAR 20
50655: PUSH
50656: LD_INT 0
50658: ST_TO_ADDR
// uc_nation := 0 ;
50659: LD_ADDR_OWVAR 21
50663: PUSH
50664: LD_INT 0
50666: ST_TO_ADDR
// hc_class := class_horse ;
50667: LD_ADDR_OWVAR 28
50671: PUSH
50672: LD_INT 21
50674: ST_TO_ADDR
// hc_gallery :=  ;
50675: LD_ADDR_OWVAR 33
50679: PUSH
50680: LD_STRING 
50682: ST_TO_ADDR
// end ;
50683: LD_VAR 0 1
50687: RET
// export function PrepareMastodont ( ) ; begin
50688: LD_INT 0
50690: PPUSH
// uc_side := 0 ;
50691: LD_ADDR_OWVAR 20
50695: PUSH
50696: LD_INT 0
50698: ST_TO_ADDR
// uc_nation := 0 ;
50699: LD_ADDR_OWVAR 21
50703: PUSH
50704: LD_INT 0
50706: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50707: LD_ADDR_OWVAR 37
50711: PUSH
50712: LD_INT 31
50714: ST_TO_ADDR
// vc_control := control_rider ;
50715: LD_ADDR_OWVAR 38
50719: PUSH
50720: LD_INT 4
50722: ST_TO_ADDR
// end ;
50723: LD_VAR 0 1
50727: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50728: LD_INT 0
50730: PPUSH
50731: PPUSH
50732: PPUSH
// uc_side = 0 ;
50733: LD_ADDR_OWVAR 20
50737: PUSH
50738: LD_INT 0
50740: ST_TO_ADDR
// uc_nation = 0 ;
50741: LD_ADDR_OWVAR 21
50745: PUSH
50746: LD_INT 0
50748: ST_TO_ADDR
// InitHc_All ( ) ;
50749: CALL_OW 584
// InitVc ;
50753: CALL_OW 20
// if mastodonts then
50757: LD_VAR 0 6
50761: IFFALSE 50828
// for i = 1 to mastodonts do
50763: LD_ADDR_VAR 0 11
50767: PUSH
50768: DOUBLE
50769: LD_INT 1
50771: DEC
50772: ST_TO_ADDR
50773: LD_VAR 0 6
50777: PUSH
50778: FOR_TO
50779: IFFALSE 50826
// begin vc_chassis := 31 ;
50781: LD_ADDR_OWVAR 37
50785: PUSH
50786: LD_INT 31
50788: ST_TO_ADDR
// vc_control := control_rider ;
50789: LD_ADDR_OWVAR 38
50793: PUSH
50794: LD_INT 4
50796: ST_TO_ADDR
// animal := CreateVehicle ;
50797: LD_ADDR_VAR 0 12
50801: PUSH
50802: CALL_OW 45
50806: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50807: LD_VAR 0 12
50811: PPUSH
50812: LD_VAR 0 8
50816: PPUSH
50817: LD_INT 0
50819: PPUSH
50820: CALL 52956 0 3
// end ;
50824: GO 50778
50826: POP
50827: POP
// if horses then
50828: LD_VAR 0 5
50832: IFFALSE 50899
// for i = 1 to horses do
50834: LD_ADDR_VAR 0 11
50838: PUSH
50839: DOUBLE
50840: LD_INT 1
50842: DEC
50843: ST_TO_ADDR
50844: LD_VAR 0 5
50848: PUSH
50849: FOR_TO
50850: IFFALSE 50897
// begin hc_class := 21 ;
50852: LD_ADDR_OWVAR 28
50856: PUSH
50857: LD_INT 21
50859: ST_TO_ADDR
// hc_gallery :=  ;
50860: LD_ADDR_OWVAR 33
50864: PUSH
50865: LD_STRING 
50867: ST_TO_ADDR
// animal := CreateHuman ;
50868: LD_ADDR_VAR 0 12
50872: PUSH
50873: CALL_OW 44
50877: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50878: LD_VAR 0 12
50882: PPUSH
50883: LD_VAR 0 8
50887: PPUSH
50888: LD_INT 0
50890: PPUSH
50891: CALL 52956 0 3
// end ;
50895: GO 50849
50897: POP
50898: POP
// if birds then
50899: LD_VAR 0 1
50903: IFFALSE 50970
// for i = 1 to birds do
50905: LD_ADDR_VAR 0 11
50909: PUSH
50910: DOUBLE
50911: LD_INT 1
50913: DEC
50914: ST_TO_ADDR
50915: LD_VAR 0 1
50919: PUSH
50920: FOR_TO
50921: IFFALSE 50968
// begin hc_class := 18 ;
50923: LD_ADDR_OWVAR 28
50927: PUSH
50928: LD_INT 18
50930: ST_TO_ADDR
// hc_gallery =  ;
50931: LD_ADDR_OWVAR 33
50935: PUSH
50936: LD_STRING 
50938: ST_TO_ADDR
// animal := CreateHuman ;
50939: LD_ADDR_VAR 0 12
50943: PUSH
50944: CALL_OW 44
50948: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50949: LD_VAR 0 12
50953: PPUSH
50954: LD_VAR 0 8
50958: PPUSH
50959: LD_INT 0
50961: PPUSH
50962: CALL 52956 0 3
// end ;
50966: GO 50920
50968: POP
50969: POP
// if tigers then
50970: LD_VAR 0 2
50974: IFFALSE 51058
// for i = 1 to tigers do
50976: LD_ADDR_VAR 0 11
50980: PUSH
50981: DOUBLE
50982: LD_INT 1
50984: DEC
50985: ST_TO_ADDR
50986: LD_VAR 0 2
50990: PUSH
50991: FOR_TO
50992: IFFALSE 51056
// begin hc_class = class_tiger ;
50994: LD_ADDR_OWVAR 28
50998: PUSH
50999: LD_INT 14
51001: ST_TO_ADDR
// hc_gallery =  ;
51002: LD_ADDR_OWVAR 33
51006: PUSH
51007: LD_STRING 
51009: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51010: LD_ADDR_OWVAR 35
51014: PUSH
51015: LD_INT 7
51017: NEG
51018: PPUSH
51019: LD_INT 7
51021: PPUSH
51022: CALL_OW 12
51026: ST_TO_ADDR
// animal := CreateHuman ;
51027: LD_ADDR_VAR 0 12
51031: PUSH
51032: CALL_OW 44
51036: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51037: LD_VAR 0 12
51041: PPUSH
51042: LD_VAR 0 8
51046: PPUSH
51047: LD_INT 0
51049: PPUSH
51050: CALL 52956 0 3
// end ;
51054: GO 50991
51056: POP
51057: POP
// if apemans then
51058: LD_VAR 0 3
51062: IFFALSE 51185
// for i = 1 to apemans do
51064: LD_ADDR_VAR 0 11
51068: PUSH
51069: DOUBLE
51070: LD_INT 1
51072: DEC
51073: ST_TO_ADDR
51074: LD_VAR 0 3
51078: PUSH
51079: FOR_TO
51080: IFFALSE 51183
// begin hc_class = class_apeman ;
51082: LD_ADDR_OWVAR 28
51086: PUSH
51087: LD_INT 12
51089: ST_TO_ADDR
// hc_gallery =  ;
51090: LD_ADDR_OWVAR 33
51094: PUSH
51095: LD_STRING 
51097: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51098: LD_ADDR_OWVAR 35
51102: PUSH
51103: LD_INT 2
51105: NEG
51106: PPUSH
51107: LD_INT 2
51109: PPUSH
51110: CALL_OW 12
51114: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51115: LD_ADDR_OWVAR 31
51119: PUSH
51120: LD_INT 1
51122: PPUSH
51123: LD_INT 3
51125: PPUSH
51126: CALL_OW 12
51130: PUSH
51131: LD_INT 1
51133: PPUSH
51134: LD_INT 3
51136: PPUSH
51137: CALL_OW 12
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: ST_TO_ADDR
// animal := CreateHuman ;
51154: LD_ADDR_VAR 0 12
51158: PUSH
51159: CALL_OW 44
51163: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51164: LD_VAR 0 12
51168: PPUSH
51169: LD_VAR 0 8
51173: PPUSH
51174: LD_INT 0
51176: PPUSH
51177: CALL 52956 0 3
// end ;
51181: GO 51079
51183: POP
51184: POP
// if enchidnas then
51185: LD_VAR 0 4
51189: IFFALSE 51256
// for i = 1 to enchidnas do
51191: LD_ADDR_VAR 0 11
51195: PUSH
51196: DOUBLE
51197: LD_INT 1
51199: DEC
51200: ST_TO_ADDR
51201: LD_VAR 0 4
51205: PUSH
51206: FOR_TO
51207: IFFALSE 51254
// begin hc_class = 13 ;
51209: LD_ADDR_OWVAR 28
51213: PUSH
51214: LD_INT 13
51216: ST_TO_ADDR
// hc_gallery =  ;
51217: LD_ADDR_OWVAR 33
51221: PUSH
51222: LD_STRING 
51224: ST_TO_ADDR
// animal := CreateHuman ;
51225: LD_ADDR_VAR 0 12
51229: PUSH
51230: CALL_OW 44
51234: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51235: LD_VAR 0 12
51239: PPUSH
51240: LD_VAR 0 8
51244: PPUSH
51245: LD_INT 0
51247: PPUSH
51248: CALL 52956 0 3
// end ;
51252: GO 51206
51254: POP
51255: POP
// if fishes then
51256: LD_VAR 0 7
51260: IFFALSE 51327
// for i = 1 to fishes do
51262: LD_ADDR_VAR 0 11
51266: PUSH
51267: DOUBLE
51268: LD_INT 1
51270: DEC
51271: ST_TO_ADDR
51272: LD_VAR 0 7
51276: PUSH
51277: FOR_TO
51278: IFFALSE 51325
// begin hc_class = 20 ;
51280: LD_ADDR_OWVAR 28
51284: PUSH
51285: LD_INT 20
51287: ST_TO_ADDR
// hc_gallery =  ;
51288: LD_ADDR_OWVAR 33
51292: PUSH
51293: LD_STRING 
51295: ST_TO_ADDR
// animal := CreateHuman ;
51296: LD_ADDR_VAR 0 12
51300: PUSH
51301: CALL_OW 44
51305: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51306: LD_VAR 0 12
51310: PPUSH
51311: LD_VAR 0 9
51315: PPUSH
51316: LD_INT 0
51318: PPUSH
51319: CALL 52956 0 3
// end ;
51323: GO 51277
51325: POP
51326: POP
// end ;
51327: LD_VAR 0 10
51331: RET
// export function WantHeal ( sci , unit ) ; begin
51332: LD_INT 0
51334: PPUSH
// if GetTaskList ( sci ) > 0 then
51335: LD_VAR 0 1
51339: PPUSH
51340: CALL_OW 437
51344: PUSH
51345: LD_INT 0
51347: GREATER
51348: IFFALSE 51418
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51350: LD_VAR 0 1
51354: PPUSH
51355: CALL_OW 437
51359: PUSH
51360: LD_INT 1
51362: ARRAY
51363: PUSH
51364: LD_INT 1
51366: ARRAY
51367: PUSH
51368: LD_STRING l
51370: EQUAL
51371: PUSH
51372: LD_VAR 0 1
51376: PPUSH
51377: CALL_OW 437
51381: PUSH
51382: LD_INT 1
51384: ARRAY
51385: PUSH
51386: LD_INT 4
51388: ARRAY
51389: PUSH
51390: LD_VAR 0 2
51394: EQUAL
51395: AND
51396: IFFALSE 51408
// result := true else
51398: LD_ADDR_VAR 0 3
51402: PUSH
51403: LD_INT 1
51405: ST_TO_ADDR
51406: GO 51416
// result := false ;
51408: LD_ADDR_VAR 0 3
51412: PUSH
51413: LD_INT 0
51415: ST_TO_ADDR
// end else
51416: GO 51426
// result := false ;
51418: LD_ADDR_VAR 0 3
51422: PUSH
51423: LD_INT 0
51425: ST_TO_ADDR
// end ;
51426: LD_VAR 0 3
51430: RET
// export function HealTarget ( sci ) ; begin
51431: LD_INT 0
51433: PPUSH
// if not sci then
51434: LD_VAR 0 1
51438: NOT
51439: IFFALSE 51443
// exit ;
51441: GO 51508
// result := 0 ;
51443: LD_ADDR_VAR 0 2
51447: PUSH
51448: LD_INT 0
51450: ST_TO_ADDR
// if GetTaskList ( sci ) then
51451: LD_VAR 0 1
51455: PPUSH
51456: CALL_OW 437
51460: IFFALSE 51508
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51462: LD_VAR 0 1
51466: PPUSH
51467: CALL_OW 437
51471: PUSH
51472: LD_INT 1
51474: ARRAY
51475: PUSH
51476: LD_INT 1
51478: ARRAY
51479: PUSH
51480: LD_STRING l
51482: EQUAL
51483: IFFALSE 51508
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51485: LD_ADDR_VAR 0 2
51489: PUSH
51490: LD_VAR 0 1
51494: PPUSH
51495: CALL_OW 437
51499: PUSH
51500: LD_INT 1
51502: ARRAY
51503: PUSH
51504: LD_INT 4
51506: ARRAY
51507: ST_TO_ADDR
// end ;
51508: LD_VAR 0 2
51512: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51513: LD_INT 0
51515: PPUSH
51516: PPUSH
51517: PPUSH
51518: PPUSH
// if not base_units then
51519: LD_VAR 0 1
51523: NOT
51524: IFFALSE 51528
// exit ;
51526: GO 51615
// result := false ;
51528: LD_ADDR_VAR 0 2
51532: PUSH
51533: LD_INT 0
51535: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51536: LD_ADDR_VAR 0 5
51540: PUSH
51541: LD_VAR 0 1
51545: PPUSH
51546: LD_INT 21
51548: PUSH
51549: LD_INT 3
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PPUSH
51556: CALL_OW 72
51560: ST_TO_ADDR
// if not tmp then
51561: LD_VAR 0 5
51565: NOT
51566: IFFALSE 51570
// exit ;
51568: GO 51615
// for i in tmp do
51570: LD_ADDR_VAR 0 3
51574: PUSH
51575: LD_VAR 0 5
51579: PUSH
51580: FOR_IN
51581: IFFALSE 51613
// begin result := EnemyInRange ( i , 22 ) ;
51583: LD_ADDR_VAR 0 2
51587: PUSH
51588: LD_VAR 0 3
51592: PPUSH
51593: LD_INT 22
51595: PPUSH
51596: CALL 49193 0 2
51600: ST_TO_ADDR
// if result then
51601: LD_VAR 0 2
51605: IFFALSE 51611
// exit ;
51607: POP
51608: POP
51609: GO 51615
// end ;
51611: GO 51580
51613: POP
51614: POP
// end ;
51615: LD_VAR 0 2
51619: RET
// export function FilterByTag ( units , tag ) ; begin
51620: LD_INT 0
51622: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51623: LD_ADDR_VAR 0 3
51627: PUSH
51628: LD_VAR 0 1
51632: PPUSH
51633: LD_INT 120
51635: PUSH
51636: LD_VAR 0 2
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PPUSH
51645: CALL_OW 72
51649: ST_TO_ADDR
// end ;
51650: LD_VAR 0 3
51654: RET
// export function IsDriver ( un ) ; begin
51655: LD_INT 0
51657: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51658: LD_ADDR_VAR 0 2
51662: PUSH
51663: LD_VAR 0 1
51667: PUSH
51668: LD_INT 55
51670: PUSH
51671: EMPTY
51672: LIST
51673: PPUSH
51674: CALL_OW 69
51678: IN
51679: ST_TO_ADDR
// end ;
51680: LD_VAR 0 2
51684: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51685: LD_INT 0
51687: PPUSH
51688: PPUSH
// list := [ ] ;
51689: LD_ADDR_VAR 0 5
51693: PUSH
51694: EMPTY
51695: ST_TO_ADDR
// case d of 0 :
51696: LD_VAR 0 3
51700: PUSH
51701: LD_INT 0
51703: DOUBLE
51704: EQUAL
51705: IFTRUE 51709
51707: GO 51842
51709: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51710: LD_ADDR_VAR 0 5
51714: PUSH
51715: LD_VAR 0 1
51719: PUSH
51720: LD_INT 4
51722: MINUS
51723: PUSH
51724: LD_VAR 0 2
51728: PUSH
51729: LD_INT 4
51731: MINUS
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: LIST
51740: PUSH
51741: LD_VAR 0 1
51745: PUSH
51746: LD_INT 3
51748: MINUS
51749: PUSH
51750: LD_VAR 0 2
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: LIST
51762: PUSH
51763: LD_VAR 0 1
51767: PUSH
51768: LD_INT 4
51770: PLUS
51771: PUSH
51772: LD_VAR 0 2
51776: PUSH
51777: LD_INT 4
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: LIST
51784: PUSH
51785: LD_VAR 0 1
51789: PUSH
51790: LD_INT 3
51792: PLUS
51793: PUSH
51794: LD_VAR 0 2
51798: PUSH
51799: LD_INT 3
51801: PLUS
51802: PUSH
51803: LD_INT 5
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: LIST
51810: PUSH
51811: LD_VAR 0 1
51815: PUSH
51816: LD_VAR 0 2
51820: PUSH
51821: LD_INT 4
51823: PLUS
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: ST_TO_ADDR
// end ; 1 :
51840: GO 52540
51842: LD_INT 1
51844: DOUBLE
51845: EQUAL
51846: IFTRUE 51850
51848: GO 51983
51850: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51851: LD_ADDR_VAR 0 5
51855: PUSH
51856: LD_VAR 0 1
51860: PUSH
51861: LD_VAR 0 2
51865: PUSH
51866: LD_INT 4
51868: MINUS
51869: PUSH
51870: LD_INT 3
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: LIST
51877: PUSH
51878: LD_VAR 0 1
51882: PUSH
51883: LD_INT 3
51885: MINUS
51886: PUSH
51887: LD_VAR 0 2
51891: PUSH
51892: LD_INT 3
51894: MINUS
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: LIST
51903: PUSH
51904: LD_VAR 0 1
51908: PUSH
51909: LD_INT 4
51911: MINUS
51912: PUSH
51913: LD_VAR 0 2
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: LIST
51925: PUSH
51926: LD_VAR 0 1
51930: PUSH
51931: LD_VAR 0 2
51935: PUSH
51936: LD_INT 3
51938: PLUS
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: LIST
51947: PUSH
51948: LD_VAR 0 1
51952: PUSH
51953: LD_INT 4
51955: PLUS
51956: PUSH
51957: LD_VAR 0 2
51961: PUSH
51962: LD_INT 4
51964: PLUS
51965: PUSH
51966: LD_INT 5
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: LIST
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: ST_TO_ADDR
// end ; 2 :
51981: GO 52540
51983: LD_INT 2
51985: DOUBLE
51986: EQUAL
51987: IFTRUE 51991
51989: GO 52120
51991: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51992: LD_ADDR_VAR 0 5
51996: PUSH
51997: LD_VAR 0 1
52001: PUSH
52002: LD_VAR 0 2
52006: PUSH
52007: LD_INT 3
52009: MINUS
52010: PUSH
52011: LD_INT 3
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: LIST
52018: PUSH
52019: LD_VAR 0 1
52023: PUSH
52024: LD_INT 4
52026: PLUS
52027: PUSH
52028: LD_VAR 0 2
52032: PUSH
52033: LD_INT 4
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: LIST
52040: PUSH
52041: LD_VAR 0 1
52045: PUSH
52046: LD_VAR 0 2
52050: PUSH
52051: LD_INT 4
52053: PLUS
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: LIST
52062: PUSH
52063: LD_VAR 0 1
52067: PUSH
52068: LD_INT 3
52070: MINUS
52071: PUSH
52072: LD_VAR 0 2
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: LIST
52084: PUSH
52085: LD_VAR 0 1
52089: PUSH
52090: LD_INT 4
52092: MINUS
52093: PUSH
52094: LD_VAR 0 2
52098: PUSH
52099: LD_INT 4
52101: MINUS
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: LIST
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: ST_TO_ADDR
// end ; 3 :
52118: GO 52540
52120: LD_INT 3
52122: DOUBLE
52123: EQUAL
52124: IFTRUE 52128
52126: GO 52261
52128: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52129: LD_ADDR_VAR 0 5
52133: PUSH
52134: LD_VAR 0 1
52138: PUSH
52139: LD_INT 3
52141: PLUS
52142: PUSH
52143: LD_VAR 0 2
52147: PUSH
52148: LD_INT 4
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: LIST
52155: PUSH
52156: LD_VAR 0 1
52160: PUSH
52161: LD_INT 4
52163: PLUS
52164: PUSH
52165: LD_VAR 0 2
52169: PUSH
52170: LD_INT 4
52172: PLUS
52173: PUSH
52174: LD_INT 5
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: LIST
52181: PUSH
52182: LD_VAR 0 1
52186: PUSH
52187: LD_INT 4
52189: MINUS
52190: PUSH
52191: LD_VAR 0 2
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: LIST
52203: PUSH
52204: LD_VAR 0 1
52208: PUSH
52209: LD_VAR 0 2
52213: PUSH
52214: LD_INT 4
52216: MINUS
52217: PUSH
52218: LD_INT 3
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: LIST
52225: PUSH
52226: LD_VAR 0 1
52230: PUSH
52231: LD_INT 3
52233: MINUS
52234: PUSH
52235: LD_VAR 0 2
52239: PUSH
52240: LD_INT 3
52242: MINUS
52243: PUSH
52244: LD_INT 2
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: LIST
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: ST_TO_ADDR
// end ; 4 :
52259: GO 52540
52261: LD_INT 4
52263: DOUBLE
52264: EQUAL
52265: IFTRUE 52269
52267: GO 52402
52269: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52270: LD_ADDR_VAR 0 5
52274: PUSH
52275: LD_VAR 0 1
52279: PUSH
52280: LD_VAR 0 2
52284: PUSH
52285: LD_INT 4
52287: PLUS
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: LIST
52296: PUSH
52297: LD_VAR 0 1
52301: PUSH
52302: LD_INT 3
52304: PLUS
52305: PUSH
52306: LD_VAR 0 2
52310: PUSH
52311: LD_INT 3
52313: PLUS
52314: PUSH
52315: LD_INT 5
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: LIST
52322: PUSH
52323: LD_VAR 0 1
52327: PUSH
52328: LD_INT 4
52330: PLUS
52331: PUSH
52332: LD_VAR 0 2
52336: PUSH
52337: LD_INT 4
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: PUSH
52345: LD_VAR 0 1
52349: PUSH
52350: LD_VAR 0 2
52354: PUSH
52355: LD_INT 3
52357: MINUS
52358: PUSH
52359: LD_INT 3
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: LIST
52366: PUSH
52367: LD_VAR 0 1
52371: PUSH
52372: LD_INT 4
52374: MINUS
52375: PUSH
52376: LD_VAR 0 2
52380: PUSH
52381: LD_INT 4
52383: MINUS
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: LIST
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: ST_TO_ADDR
// end ; 5 :
52400: GO 52540
52402: LD_INT 5
52404: DOUBLE
52405: EQUAL
52406: IFTRUE 52410
52408: GO 52539
52410: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52411: LD_ADDR_VAR 0 5
52415: PUSH
52416: LD_VAR 0 1
52420: PUSH
52421: LD_INT 4
52423: MINUS
52424: PUSH
52425: LD_VAR 0 2
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: LIST
52437: PUSH
52438: LD_VAR 0 1
52442: PUSH
52443: LD_VAR 0 2
52447: PUSH
52448: LD_INT 4
52450: MINUS
52451: PUSH
52452: LD_INT 3
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: LIST
52459: PUSH
52460: LD_VAR 0 1
52464: PUSH
52465: LD_INT 4
52467: PLUS
52468: PUSH
52469: LD_VAR 0 2
52473: PUSH
52474: LD_INT 4
52476: PLUS
52477: PUSH
52478: LD_INT 5
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: LIST
52485: PUSH
52486: LD_VAR 0 1
52490: PUSH
52491: LD_INT 3
52493: PLUS
52494: PUSH
52495: LD_VAR 0 2
52499: PUSH
52500: LD_INT 4
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: LIST
52507: PUSH
52508: LD_VAR 0 1
52512: PUSH
52513: LD_VAR 0 2
52517: PUSH
52518: LD_INT 3
52520: PLUS
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: LIST
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: ST_TO_ADDR
// end ; end ;
52537: GO 52540
52539: POP
// result := list ;
52540: LD_ADDR_VAR 0 4
52544: PUSH
52545: LD_VAR 0 5
52549: ST_TO_ADDR
// end ;
52550: LD_VAR 0 4
52554: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52555: LD_INT 0
52557: PPUSH
52558: PPUSH
52559: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52560: LD_VAR 0 1
52564: NOT
52565: PUSH
52566: LD_VAR 0 2
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: LD_INT 3
52579: PUSH
52580: LD_INT 4
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: IN
52589: NOT
52590: OR
52591: IFFALSE 52595
// exit ;
52593: GO 52678
// tmp := [ ] ;
52595: LD_ADDR_VAR 0 5
52599: PUSH
52600: EMPTY
52601: ST_TO_ADDR
// for i in units do
52602: LD_ADDR_VAR 0 4
52606: PUSH
52607: LD_VAR 0 1
52611: PUSH
52612: FOR_IN
52613: IFFALSE 52647
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52615: LD_ADDR_VAR 0 5
52619: PUSH
52620: LD_VAR 0 5
52624: PPUSH
52625: LD_VAR 0 4
52629: PPUSH
52630: LD_VAR 0 2
52634: PPUSH
52635: CALL_OW 259
52639: PPUSH
52640: CALL 54051 0 2
52644: ST_TO_ADDR
52645: GO 52612
52647: POP
52648: POP
// if not tmp then
52649: LD_VAR 0 5
52653: NOT
52654: IFFALSE 52658
// exit ;
52656: GO 52678
// result := SortListByListDesc ( units , tmp ) ;
52658: LD_ADDR_VAR 0 3
52662: PUSH
52663: LD_VAR 0 1
52667: PPUSH
52668: LD_VAR 0 5
52672: PPUSH
52673: CALL_OW 77
52677: ST_TO_ADDR
// end ;
52678: LD_VAR 0 3
52682: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52683: LD_INT 0
52685: PPUSH
52686: PPUSH
52687: PPUSH
// result := false ;
52688: LD_ADDR_VAR 0 3
52692: PUSH
52693: LD_INT 0
52695: ST_TO_ADDR
// if not building then
52696: LD_VAR 0 2
52700: NOT
52701: IFFALSE 52705
// exit ;
52703: GO 52843
// x := GetX ( building ) ;
52705: LD_ADDR_VAR 0 4
52709: PUSH
52710: LD_VAR 0 2
52714: PPUSH
52715: CALL_OW 250
52719: ST_TO_ADDR
// y := GetY ( building ) ;
52720: LD_ADDR_VAR 0 5
52724: PUSH
52725: LD_VAR 0 2
52729: PPUSH
52730: CALL_OW 251
52734: ST_TO_ADDR
// if not x or not y then
52735: LD_VAR 0 4
52739: NOT
52740: PUSH
52741: LD_VAR 0 5
52745: NOT
52746: OR
52747: IFFALSE 52751
// exit ;
52749: GO 52843
// if GetTaskList ( unit ) then
52751: LD_VAR 0 1
52755: PPUSH
52756: CALL_OW 437
52760: IFFALSE 52843
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52762: LD_STRING e
52764: PUSH
52765: LD_VAR 0 1
52769: PPUSH
52770: CALL_OW 437
52774: PUSH
52775: LD_INT 1
52777: ARRAY
52778: PUSH
52779: LD_INT 1
52781: ARRAY
52782: EQUAL
52783: PUSH
52784: LD_VAR 0 4
52788: PUSH
52789: LD_VAR 0 1
52793: PPUSH
52794: CALL_OW 437
52798: PUSH
52799: LD_INT 1
52801: ARRAY
52802: PUSH
52803: LD_INT 2
52805: ARRAY
52806: EQUAL
52807: AND
52808: PUSH
52809: LD_VAR 0 5
52813: PUSH
52814: LD_VAR 0 1
52818: PPUSH
52819: CALL_OW 437
52823: PUSH
52824: LD_INT 1
52826: ARRAY
52827: PUSH
52828: LD_INT 3
52830: ARRAY
52831: EQUAL
52832: AND
52833: IFFALSE 52843
// result := true end ;
52835: LD_ADDR_VAR 0 3
52839: PUSH
52840: LD_INT 1
52842: ST_TO_ADDR
// end ;
52843: LD_VAR 0 3
52847: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52848: LD_INT 0
52850: PPUSH
// result := false ;
52851: LD_ADDR_VAR 0 4
52855: PUSH
52856: LD_INT 0
52858: ST_TO_ADDR
// if GetTaskList ( unit ) then
52859: LD_VAR 0 1
52863: PPUSH
52864: CALL_OW 437
52868: IFFALSE 52951
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52870: LD_STRING M
52872: PUSH
52873: LD_VAR 0 1
52877: PPUSH
52878: CALL_OW 437
52882: PUSH
52883: LD_INT 1
52885: ARRAY
52886: PUSH
52887: LD_INT 1
52889: ARRAY
52890: EQUAL
52891: PUSH
52892: LD_VAR 0 2
52896: PUSH
52897: LD_VAR 0 1
52901: PPUSH
52902: CALL_OW 437
52906: PUSH
52907: LD_INT 1
52909: ARRAY
52910: PUSH
52911: LD_INT 2
52913: ARRAY
52914: EQUAL
52915: AND
52916: PUSH
52917: LD_VAR 0 3
52921: PUSH
52922: LD_VAR 0 1
52926: PPUSH
52927: CALL_OW 437
52931: PUSH
52932: LD_INT 1
52934: ARRAY
52935: PUSH
52936: LD_INT 3
52938: ARRAY
52939: EQUAL
52940: AND
52941: IFFALSE 52951
// result := true ;
52943: LD_ADDR_VAR 0 4
52947: PUSH
52948: LD_INT 1
52950: ST_TO_ADDR
// end ; end ;
52951: LD_VAR 0 4
52955: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52956: LD_INT 0
52958: PPUSH
52959: PPUSH
52960: PPUSH
52961: PPUSH
// if not unit or not area then
52962: LD_VAR 0 1
52966: NOT
52967: PUSH
52968: LD_VAR 0 2
52972: NOT
52973: OR
52974: IFFALSE 52978
// exit ;
52976: GO 53154
// tmp := AreaToList ( area , i ) ;
52978: LD_ADDR_VAR 0 6
52982: PUSH
52983: LD_VAR 0 2
52987: PPUSH
52988: LD_VAR 0 5
52992: PPUSH
52993: CALL_OW 517
52997: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52998: LD_ADDR_VAR 0 5
53002: PUSH
53003: DOUBLE
53004: LD_INT 1
53006: DEC
53007: ST_TO_ADDR
53008: LD_VAR 0 6
53012: PUSH
53013: LD_INT 1
53015: ARRAY
53016: PUSH
53017: FOR_TO
53018: IFFALSE 53152
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53020: LD_ADDR_VAR 0 7
53024: PUSH
53025: LD_VAR 0 6
53029: PUSH
53030: LD_INT 1
53032: ARRAY
53033: PUSH
53034: LD_VAR 0 5
53038: ARRAY
53039: PUSH
53040: LD_VAR 0 6
53044: PUSH
53045: LD_INT 2
53047: ARRAY
53048: PUSH
53049: LD_VAR 0 5
53053: ARRAY
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53059: LD_INT 92
53061: PUSH
53062: LD_VAR 0 7
53066: PUSH
53067: LD_INT 1
53069: ARRAY
53070: PUSH
53071: LD_VAR 0 7
53075: PUSH
53076: LD_INT 2
53078: ARRAY
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: PPUSH
53089: CALL_OW 69
53093: PUSH
53094: LD_INT 0
53096: EQUAL
53097: IFFALSE 53150
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53099: LD_VAR 0 1
53103: PPUSH
53104: LD_VAR 0 7
53108: PUSH
53109: LD_INT 1
53111: ARRAY
53112: PPUSH
53113: LD_VAR 0 7
53117: PUSH
53118: LD_INT 2
53120: ARRAY
53121: PPUSH
53122: LD_VAR 0 3
53126: PPUSH
53127: CALL_OW 48
// result := IsPlaced ( unit ) ;
53131: LD_ADDR_VAR 0 4
53135: PUSH
53136: LD_VAR 0 1
53140: PPUSH
53141: CALL_OW 305
53145: ST_TO_ADDR
// exit ;
53146: POP
53147: POP
53148: GO 53154
// end ; end ;
53150: GO 53017
53152: POP
53153: POP
// end ;
53154: LD_VAR 0 4
53158: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53159: LD_INT 0
53161: PPUSH
53162: PPUSH
53163: PPUSH
// if not side or side > 8 then
53164: LD_VAR 0 1
53168: NOT
53169: PUSH
53170: LD_VAR 0 1
53174: PUSH
53175: LD_INT 8
53177: GREATER
53178: OR
53179: IFFALSE 53183
// exit ;
53181: GO 53370
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53183: LD_ADDR_VAR 0 4
53187: PUSH
53188: LD_INT 22
53190: PUSH
53191: LD_VAR 0 1
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 21
53202: PUSH
53203: LD_INT 3
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PPUSH
53214: CALL_OW 69
53218: ST_TO_ADDR
// if not tmp then
53219: LD_VAR 0 4
53223: NOT
53224: IFFALSE 53228
// exit ;
53226: GO 53370
// enable_addtolog := true ;
53228: LD_ADDR_OWVAR 81
53232: PUSH
53233: LD_INT 1
53235: ST_TO_ADDR
// AddToLog ( [ ) ;
53236: LD_STRING [
53238: PPUSH
53239: CALL_OW 561
// for i in tmp do
53243: LD_ADDR_VAR 0 3
53247: PUSH
53248: LD_VAR 0 4
53252: PUSH
53253: FOR_IN
53254: IFFALSE 53361
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53256: LD_STRING [
53258: PUSH
53259: LD_VAR 0 3
53263: PPUSH
53264: CALL_OW 266
53268: STR
53269: PUSH
53270: LD_STRING , 
53272: STR
53273: PUSH
53274: LD_VAR 0 3
53278: PPUSH
53279: CALL_OW 250
53283: STR
53284: PUSH
53285: LD_STRING , 
53287: STR
53288: PUSH
53289: LD_VAR 0 3
53293: PPUSH
53294: CALL_OW 251
53298: STR
53299: PUSH
53300: LD_STRING , 
53302: STR
53303: PUSH
53304: LD_VAR 0 3
53308: PPUSH
53309: CALL_OW 254
53313: STR
53314: PUSH
53315: LD_STRING , 
53317: STR
53318: PUSH
53319: LD_VAR 0 3
53323: PPUSH
53324: LD_INT 1
53326: PPUSH
53327: CALL_OW 268
53331: STR
53332: PUSH
53333: LD_STRING , 
53335: STR
53336: PUSH
53337: LD_VAR 0 3
53341: PPUSH
53342: LD_INT 2
53344: PPUSH
53345: CALL_OW 268
53349: STR
53350: PUSH
53351: LD_STRING ],
53353: STR
53354: PPUSH
53355: CALL_OW 561
// end ;
53359: GO 53253
53361: POP
53362: POP
// AddToLog ( ]; ) ;
53363: LD_STRING ];
53365: PPUSH
53366: CALL_OW 561
// end ;
53370: LD_VAR 0 2
53374: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53375: LD_INT 0
53377: PPUSH
53378: PPUSH
53379: PPUSH
53380: PPUSH
53381: PPUSH
// if not area or not rate or not max then
53382: LD_VAR 0 1
53386: NOT
53387: PUSH
53388: LD_VAR 0 2
53392: NOT
53393: OR
53394: PUSH
53395: LD_VAR 0 4
53399: NOT
53400: OR
53401: IFFALSE 53405
// exit ;
53403: GO 53594
// while 1 do
53405: LD_INT 1
53407: IFFALSE 53594
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53409: LD_ADDR_VAR 0 9
53413: PUSH
53414: LD_VAR 0 1
53418: PPUSH
53419: LD_INT 1
53421: PPUSH
53422: CALL_OW 287
53426: PUSH
53427: LD_INT 10
53429: MUL
53430: ST_TO_ADDR
// r := rate / 10 ;
53431: LD_ADDR_VAR 0 7
53435: PUSH
53436: LD_VAR 0 2
53440: PUSH
53441: LD_INT 10
53443: DIVREAL
53444: ST_TO_ADDR
// time := 1 1$00 ;
53445: LD_ADDR_VAR 0 8
53449: PUSH
53450: LD_INT 2100
53452: ST_TO_ADDR
// if amount < min then
53453: LD_VAR 0 9
53457: PUSH
53458: LD_VAR 0 3
53462: LESS
53463: IFFALSE 53481
// r := r * 2 else
53465: LD_ADDR_VAR 0 7
53469: PUSH
53470: LD_VAR 0 7
53474: PUSH
53475: LD_INT 2
53477: MUL
53478: ST_TO_ADDR
53479: GO 53507
// if amount > max then
53481: LD_VAR 0 9
53485: PUSH
53486: LD_VAR 0 4
53490: GREATER
53491: IFFALSE 53507
// r := r / 2 ;
53493: LD_ADDR_VAR 0 7
53497: PUSH
53498: LD_VAR 0 7
53502: PUSH
53503: LD_INT 2
53505: DIVREAL
53506: ST_TO_ADDR
// time := time / r ;
53507: LD_ADDR_VAR 0 8
53511: PUSH
53512: LD_VAR 0 8
53516: PUSH
53517: LD_VAR 0 7
53521: DIVREAL
53522: ST_TO_ADDR
// if time < 0 then
53523: LD_VAR 0 8
53527: PUSH
53528: LD_INT 0
53530: LESS
53531: IFFALSE 53548
// time := time * - 1 ;
53533: LD_ADDR_VAR 0 8
53537: PUSH
53538: LD_VAR 0 8
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: MUL
53547: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53548: LD_VAR 0 8
53552: PUSH
53553: LD_INT 35
53555: PPUSH
53556: LD_INT 875
53558: PPUSH
53559: CALL_OW 12
53563: PLUS
53564: PPUSH
53565: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53569: LD_INT 1
53571: PPUSH
53572: LD_INT 5
53574: PPUSH
53575: CALL_OW 12
53579: PPUSH
53580: LD_VAR 0 1
53584: PPUSH
53585: LD_INT 1
53587: PPUSH
53588: CALL_OW 55
// end ;
53592: GO 53405
// end ;
53594: LD_VAR 0 5
53598: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53599: LD_INT 0
53601: PPUSH
53602: PPUSH
53603: PPUSH
53604: PPUSH
53605: PPUSH
53606: PPUSH
53607: PPUSH
53608: PPUSH
// if not turrets or not factories then
53609: LD_VAR 0 1
53613: NOT
53614: PUSH
53615: LD_VAR 0 2
53619: NOT
53620: OR
53621: IFFALSE 53625
// exit ;
53623: GO 53932
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53625: LD_ADDR_VAR 0 10
53629: PUSH
53630: LD_INT 5
53632: PUSH
53633: LD_INT 6
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: LD_INT 4
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 3
53652: PUSH
53653: LD_INT 5
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 24
53667: PUSH
53668: LD_INT 25
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 23
53677: PUSH
53678: LD_INT 27
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 42
53691: PUSH
53692: LD_INT 43
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 44
53701: PUSH
53702: LD_INT 46
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 45
53711: PUSH
53712: LD_INT 47
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: LIST
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: ST_TO_ADDR
// result := [ ] ;
53729: LD_ADDR_VAR 0 3
53733: PUSH
53734: EMPTY
53735: ST_TO_ADDR
// for i in turrets do
53736: LD_ADDR_VAR 0 4
53740: PUSH
53741: LD_VAR 0 1
53745: PUSH
53746: FOR_IN
53747: IFFALSE 53930
// begin nat := GetNation ( i ) ;
53749: LD_ADDR_VAR 0 7
53753: PUSH
53754: LD_VAR 0 4
53758: PPUSH
53759: CALL_OW 248
53763: ST_TO_ADDR
// weapon := 0 ;
53764: LD_ADDR_VAR 0 8
53768: PUSH
53769: LD_INT 0
53771: ST_TO_ADDR
// if not nat then
53772: LD_VAR 0 7
53776: NOT
53777: IFFALSE 53781
// continue ;
53779: GO 53746
// for j in list [ nat ] do
53781: LD_ADDR_VAR 0 5
53785: PUSH
53786: LD_VAR 0 10
53790: PUSH
53791: LD_VAR 0 7
53795: ARRAY
53796: PUSH
53797: FOR_IN
53798: IFFALSE 53839
// if GetBWeapon ( i ) = j [ 1 ] then
53800: LD_VAR 0 4
53804: PPUSH
53805: CALL_OW 269
53809: PUSH
53810: LD_VAR 0 5
53814: PUSH
53815: LD_INT 1
53817: ARRAY
53818: EQUAL
53819: IFFALSE 53837
// begin weapon := j [ 2 ] ;
53821: LD_ADDR_VAR 0 8
53825: PUSH
53826: LD_VAR 0 5
53830: PUSH
53831: LD_INT 2
53833: ARRAY
53834: ST_TO_ADDR
// break ;
53835: GO 53839
// end ;
53837: GO 53797
53839: POP
53840: POP
// if not weapon then
53841: LD_VAR 0 8
53845: NOT
53846: IFFALSE 53850
// continue ;
53848: GO 53746
// for k in factories do
53850: LD_ADDR_VAR 0 6
53854: PUSH
53855: LD_VAR 0 2
53859: PUSH
53860: FOR_IN
53861: IFFALSE 53926
// begin weapons := AvailableWeaponList ( k ) ;
53863: LD_ADDR_VAR 0 9
53867: PUSH
53868: LD_VAR 0 6
53872: PPUSH
53873: CALL_OW 478
53877: ST_TO_ADDR
// if not weapons then
53878: LD_VAR 0 9
53882: NOT
53883: IFFALSE 53887
// continue ;
53885: GO 53860
// if weapon in weapons then
53887: LD_VAR 0 8
53891: PUSH
53892: LD_VAR 0 9
53896: IN
53897: IFFALSE 53924
// begin result := [ i , weapon ] ;
53899: LD_ADDR_VAR 0 3
53903: PUSH
53904: LD_VAR 0 4
53908: PUSH
53909: LD_VAR 0 8
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: ST_TO_ADDR
// exit ;
53918: POP
53919: POP
53920: POP
53921: POP
53922: GO 53932
// end ; end ;
53924: GO 53860
53926: POP
53927: POP
// end ;
53928: GO 53746
53930: POP
53931: POP
// end ;
53932: LD_VAR 0 3
53936: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53937: LD_INT 0
53939: PPUSH
// if not side or side > 8 then
53940: LD_VAR 0 3
53944: NOT
53945: PUSH
53946: LD_VAR 0 3
53950: PUSH
53951: LD_INT 8
53953: GREATER
53954: OR
53955: IFFALSE 53959
// exit ;
53957: GO 54018
// if not range then
53959: LD_VAR 0 4
53963: NOT
53964: IFFALSE 53975
// range := - 12 ;
53966: LD_ADDR_VAR 0 4
53970: PUSH
53971: LD_INT 12
53973: NEG
53974: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53975: LD_VAR 0 1
53979: PPUSH
53980: LD_VAR 0 2
53984: PPUSH
53985: LD_VAR 0 3
53989: PPUSH
53990: LD_VAR 0 4
53994: PPUSH
53995: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53999: LD_VAR 0 1
54003: PPUSH
54004: LD_VAR 0 2
54008: PPUSH
54009: LD_VAR 0 3
54013: PPUSH
54014: CALL_OW 331
// end ;
54018: LD_VAR 0 5
54022: RET
// export function Video ( mode ) ; begin
54023: LD_INT 0
54025: PPUSH
// ingame_video = mode ;
54026: LD_ADDR_OWVAR 52
54030: PUSH
54031: LD_VAR 0 1
54035: ST_TO_ADDR
// interface_hidden = mode ;
54036: LD_ADDR_OWVAR 54
54040: PUSH
54041: LD_VAR 0 1
54045: ST_TO_ADDR
// end ;
54046: LD_VAR 0 2
54050: RET
// export function Join ( array , element ) ; begin
54051: LD_INT 0
54053: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54054: LD_ADDR_VAR 0 3
54058: PUSH
54059: LD_VAR 0 1
54063: PPUSH
54064: LD_VAR 0 1
54068: PUSH
54069: LD_INT 1
54071: PLUS
54072: PPUSH
54073: LD_VAR 0 2
54077: PPUSH
54078: CALL_OW 1
54082: ST_TO_ADDR
// end ;
54083: LD_VAR 0 3
54087: RET
// export function JoinUnion ( array , element ) ; begin
54088: LD_INT 0
54090: PPUSH
// result := array union element ;
54091: LD_ADDR_VAR 0 3
54095: PUSH
54096: LD_VAR 0 1
54100: PUSH
54101: LD_VAR 0 2
54105: UNION
54106: ST_TO_ADDR
// end ;
54107: LD_VAR 0 3
54111: RET
// export function GetBehemoths ( side ) ; begin
54112: LD_INT 0
54114: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54115: LD_ADDR_VAR 0 2
54119: PUSH
54120: LD_INT 22
54122: PUSH
54123: LD_VAR 0 1
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 31
54134: PUSH
54135: LD_INT 25
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PPUSH
54146: CALL_OW 69
54150: ST_TO_ADDR
// end ;
54151: LD_VAR 0 2
54155: RET
// export function Shuffle ( array ) ; var i , index ; begin
54156: LD_INT 0
54158: PPUSH
54159: PPUSH
54160: PPUSH
// result := [ ] ;
54161: LD_ADDR_VAR 0 2
54165: PUSH
54166: EMPTY
54167: ST_TO_ADDR
// if not array then
54168: LD_VAR 0 1
54172: NOT
54173: IFFALSE 54177
// exit ;
54175: GO 54276
// Randomize ;
54177: CALL_OW 10
// for i = array downto 1 do
54181: LD_ADDR_VAR 0 3
54185: PUSH
54186: DOUBLE
54187: LD_VAR 0 1
54191: INC
54192: ST_TO_ADDR
54193: LD_INT 1
54195: PUSH
54196: FOR_DOWNTO
54197: IFFALSE 54274
// begin index := rand ( 1 , array ) ;
54199: LD_ADDR_VAR 0 4
54203: PUSH
54204: LD_INT 1
54206: PPUSH
54207: LD_VAR 0 1
54211: PPUSH
54212: CALL_OW 12
54216: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54217: LD_ADDR_VAR 0 2
54221: PUSH
54222: LD_VAR 0 2
54226: PPUSH
54227: LD_VAR 0 2
54231: PUSH
54232: LD_INT 1
54234: PLUS
54235: PPUSH
54236: LD_VAR 0 1
54240: PUSH
54241: LD_VAR 0 4
54245: ARRAY
54246: PPUSH
54247: CALL_OW 2
54251: ST_TO_ADDR
// array := Delete ( array , index ) ;
54252: LD_ADDR_VAR 0 1
54256: PUSH
54257: LD_VAR 0 1
54261: PPUSH
54262: LD_VAR 0 4
54266: PPUSH
54267: CALL_OW 3
54271: ST_TO_ADDR
// end ;
54272: GO 54196
54274: POP
54275: POP
// end ;
54276: LD_VAR 0 2
54280: RET
// export function GetBaseMaterials ( base ) ; begin
54281: LD_INT 0
54283: PPUSH
// result := [ 0 , 0 , 0 ] ;
54284: LD_ADDR_VAR 0 2
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: ST_TO_ADDR
// if not base then
54303: LD_VAR 0 1
54307: NOT
54308: IFFALSE 54312
// exit ;
54310: GO 54361
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54312: LD_ADDR_VAR 0 2
54316: PUSH
54317: LD_VAR 0 1
54321: PPUSH
54322: LD_INT 1
54324: PPUSH
54325: CALL_OW 275
54329: PUSH
54330: LD_VAR 0 1
54334: PPUSH
54335: LD_INT 2
54337: PPUSH
54338: CALL_OW 275
54342: PUSH
54343: LD_VAR 0 1
54347: PPUSH
54348: LD_INT 3
54350: PPUSH
54351: CALL_OW 275
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: LIST
54360: ST_TO_ADDR
// end ;
54361: LD_VAR 0 2
54365: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54366: LD_INT 0
54368: PPUSH
54369: PPUSH
// result := array ;
54370: LD_ADDR_VAR 0 3
54374: PUSH
54375: LD_VAR 0 1
54379: ST_TO_ADDR
// if size >= result then
54380: LD_VAR 0 2
54384: PUSH
54385: LD_VAR 0 3
54389: GREATEREQUAL
54390: IFFALSE 54394
// exit ;
54392: GO 54444
// if size then
54394: LD_VAR 0 2
54398: IFFALSE 54444
// for i := array downto size do
54400: LD_ADDR_VAR 0 4
54404: PUSH
54405: DOUBLE
54406: LD_VAR 0 1
54410: INC
54411: ST_TO_ADDR
54412: LD_VAR 0 2
54416: PUSH
54417: FOR_DOWNTO
54418: IFFALSE 54442
// result := Delete ( result , result ) ;
54420: LD_ADDR_VAR 0 3
54424: PUSH
54425: LD_VAR 0 3
54429: PPUSH
54430: LD_VAR 0 3
54434: PPUSH
54435: CALL_OW 3
54439: ST_TO_ADDR
54440: GO 54417
54442: POP
54443: POP
// end ;
54444: LD_VAR 0 3
54448: RET
// export function ComExit ( unit ) ; var tmp ; begin
54449: LD_INT 0
54451: PPUSH
54452: PPUSH
// if not IsInUnit ( unit ) then
54453: LD_VAR 0 1
54457: PPUSH
54458: CALL_OW 310
54462: NOT
54463: IFFALSE 54467
// exit ;
54465: GO 54527
// tmp := IsInUnit ( unit ) ;
54467: LD_ADDR_VAR 0 3
54471: PUSH
54472: LD_VAR 0 1
54476: PPUSH
54477: CALL_OW 310
54481: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54482: LD_VAR 0 3
54486: PPUSH
54487: CALL_OW 247
54491: PUSH
54492: LD_INT 2
54494: EQUAL
54495: IFFALSE 54508
// ComExitVehicle ( unit ) else
54497: LD_VAR 0 1
54501: PPUSH
54502: CALL_OW 121
54506: GO 54517
// ComExitBuilding ( unit ) ;
54508: LD_VAR 0 1
54512: PPUSH
54513: CALL_OW 122
// result := tmp ;
54517: LD_ADDR_VAR 0 2
54521: PUSH
54522: LD_VAR 0 3
54526: ST_TO_ADDR
// end ;
54527: LD_VAR 0 2
54531: RET
// export function ComExitAll ( units ) ; var i ; begin
54532: LD_INT 0
54534: PPUSH
54535: PPUSH
// if not units then
54536: LD_VAR 0 1
54540: NOT
54541: IFFALSE 54545
// exit ;
54543: GO 54571
// for i in units do
54545: LD_ADDR_VAR 0 3
54549: PUSH
54550: LD_VAR 0 1
54554: PUSH
54555: FOR_IN
54556: IFFALSE 54569
// ComExit ( i ) ;
54558: LD_VAR 0 3
54562: PPUSH
54563: CALL 54449 0 1
54567: GO 54555
54569: POP
54570: POP
// end ;
54571: LD_VAR 0 2
54575: RET
// export function ResetHc ; begin
54576: LD_INT 0
54578: PPUSH
// InitHc ;
54579: CALL_OW 19
// hc_importance := 0 ;
54583: LD_ADDR_OWVAR 32
54587: PUSH
54588: LD_INT 0
54590: ST_TO_ADDR
// end ;
54591: LD_VAR 0 1
54595: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54596: LD_INT 0
54598: PPUSH
54599: PPUSH
54600: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54601: LD_ADDR_VAR 0 6
54605: PUSH
54606: LD_VAR 0 1
54610: PUSH
54611: LD_VAR 0 3
54615: PLUS
54616: PUSH
54617: LD_INT 2
54619: DIV
54620: ST_TO_ADDR
// if _x < 0 then
54621: LD_VAR 0 6
54625: PUSH
54626: LD_INT 0
54628: LESS
54629: IFFALSE 54646
// _x := _x * - 1 ;
54631: LD_ADDR_VAR 0 6
54635: PUSH
54636: LD_VAR 0 6
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: MUL
54645: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54646: LD_ADDR_VAR 0 7
54650: PUSH
54651: LD_VAR 0 2
54655: PUSH
54656: LD_VAR 0 4
54660: PLUS
54661: PUSH
54662: LD_INT 2
54664: DIV
54665: ST_TO_ADDR
// if _y < 0 then
54666: LD_VAR 0 7
54670: PUSH
54671: LD_INT 0
54673: LESS
54674: IFFALSE 54691
// _y := _y * - 1 ;
54676: LD_ADDR_VAR 0 7
54680: PUSH
54681: LD_VAR 0 7
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: MUL
54690: ST_TO_ADDR
// result := [ _x , _y ] ;
54691: LD_ADDR_VAR 0 5
54695: PUSH
54696: LD_VAR 0 6
54700: PUSH
54701: LD_VAR 0 7
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: ST_TO_ADDR
// end ;
54710: LD_VAR 0 5
54714: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54715: LD_INT 0
54717: PPUSH
54718: PPUSH
54719: PPUSH
54720: PPUSH
// task := GetTaskList ( unit ) ;
54721: LD_ADDR_VAR 0 7
54725: PUSH
54726: LD_VAR 0 1
54730: PPUSH
54731: CALL_OW 437
54735: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54736: LD_VAR 0 7
54740: NOT
54741: PUSH
54742: LD_VAR 0 1
54746: PPUSH
54747: LD_VAR 0 2
54751: PPUSH
54752: CALL_OW 308
54756: NOT
54757: AND
54758: IFFALSE 54762
// exit ;
54760: GO 54880
// if IsInArea ( unit , area ) then
54762: LD_VAR 0 1
54766: PPUSH
54767: LD_VAR 0 2
54771: PPUSH
54772: CALL_OW 308
54776: IFFALSE 54794
// begin ComMoveToArea ( unit , goAway ) ;
54778: LD_VAR 0 1
54782: PPUSH
54783: LD_VAR 0 3
54787: PPUSH
54788: CALL_OW 113
// exit ;
54792: GO 54880
// end ; if task [ 1 ] [ 1 ] <> M then
54794: LD_VAR 0 7
54798: PUSH
54799: LD_INT 1
54801: ARRAY
54802: PUSH
54803: LD_INT 1
54805: ARRAY
54806: PUSH
54807: LD_STRING M
54809: NONEQUAL
54810: IFFALSE 54814
// exit ;
54812: GO 54880
// x := task [ 1 ] [ 2 ] ;
54814: LD_ADDR_VAR 0 5
54818: PUSH
54819: LD_VAR 0 7
54823: PUSH
54824: LD_INT 1
54826: ARRAY
54827: PUSH
54828: LD_INT 2
54830: ARRAY
54831: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54832: LD_ADDR_VAR 0 6
54836: PUSH
54837: LD_VAR 0 7
54841: PUSH
54842: LD_INT 1
54844: ARRAY
54845: PUSH
54846: LD_INT 3
54848: ARRAY
54849: ST_TO_ADDR
// if InArea ( x , y , area ) then
54850: LD_VAR 0 5
54854: PPUSH
54855: LD_VAR 0 6
54859: PPUSH
54860: LD_VAR 0 2
54864: PPUSH
54865: CALL_OW 309
54869: IFFALSE 54880
// ComStop ( unit ) ;
54871: LD_VAR 0 1
54875: PPUSH
54876: CALL_OW 141
// end ;
54880: LD_VAR 0 4
54884: RET
// export function Abs ( value ) ; begin
54885: LD_INT 0
54887: PPUSH
// result := value ;
54888: LD_ADDR_VAR 0 2
54892: PUSH
54893: LD_VAR 0 1
54897: ST_TO_ADDR
// if value < 0 then
54898: LD_VAR 0 1
54902: PUSH
54903: LD_INT 0
54905: LESS
54906: IFFALSE 54923
// result := value * - 1 ;
54908: LD_ADDR_VAR 0 2
54912: PUSH
54913: LD_VAR 0 1
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: MUL
54922: ST_TO_ADDR
// end ;
54923: LD_VAR 0 2
54927: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54928: LD_INT 0
54930: PPUSH
54931: PPUSH
54932: PPUSH
54933: PPUSH
54934: PPUSH
54935: PPUSH
54936: PPUSH
54937: PPUSH
// if not unit or not building then
54938: LD_VAR 0 1
54942: NOT
54943: PUSH
54944: LD_VAR 0 2
54948: NOT
54949: OR
54950: IFFALSE 54954
// exit ;
54952: GO 55180
// x := GetX ( building ) ;
54954: LD_ADDR_VAR 0 4
54958: PUSH
54959: LD_VAR 0 2
54963: PPUSH
54964: CALL_OW 250
54968: ST_TO_ADDR
// y := GetY ( building ) ;
54969: LD_ADDR_VAR 0 6
54973: PUSH
54974: LD_VAR 0 2
54978: PPUSH
54979: CALL_OW 251
54983: ST_TO_ADDR
// d := GetDir ( building ) ;
54984: LD_ADDR_VAR 0 8
54988: PUSH
54989: LD_VAR 0 2
54993: PPUSH
54994: CALL_OW 254
54998: ST_TO_ADDR
// r := 4 ;
54999: LD_ADDR_VAR 0 9
55003: PUSH
55004: LD_INT 4
55006: ST_TO_ADDR
// for i := 1 to 5 do
55007: LD_ADDR_VAR 0 10
55011: PUSH
55012: DOUBLE
55013: LD_INT 1
55015: DEC
55016: ST_TO_ADDR
55017: LD_INT 5
55019: PUSH
55020: FOR_TO
55021: IFFALSE 55178
// begin _x := ShiftX ( x , d , r + i ) ;
55023: LD_ADDR_VAR 0 5
55027: PUSH
55028: LD_VAR 0 4
55032: PPUSH
55033: LD_VAR 0 8
55037: PPUSH
55038: LD_VAR 0 9
55042: PUSH
55043: LD_VAR 0 10
55047: PLUS
55048: PPUSH
55049: CALL_OW 272
55053: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55054: LD_ADDR_VAR 0 7
55058: PUSH
55059: LD_VAR 0 6
55063: PPUSH
55064: LD_VAR 0 8
55068: PPUSH
55069: LD_VAR 0 9
55073: PUSH
55074: LD_VAR 0 10
55078: PLUS
55079: PPUSH
55080: CALL_OW 273
55084: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55085: LD_VAR 0 5
55089: PPUSH
55090: LD_VAR 0 7
55094: PPUSH
55095: CALL_OW 488
55099: PUSH
55100: LD_VAR 0 5
55104: PPUSH
55105: LD_VAR 0 7
55109: PPUSH
55110: CALL_OW 428
55114: PPUSH
55115: CALL_OW 247
55119: PUSH
55120: LD_INT 3
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: IN
55130: NOT
55131: AND
55132: IFFALSE 55176
// begin ComMoveXY ( unit , _x , _y ) ;
55134: LD_VAR 0 1
55138: PPUSH
55139: LD_VAR 0 5
55143: PPUSH
55144: LD_VAR 0 7
55148: PPUSH
55149: CALL_OW 111
// result := [ _x , _y ] ;
55153: LD_ADDR_VAR 0 3
55157: PUSH
55158: LD_VAR 0 5
55162: PUSH
55163: LD_VAR 0 7
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: ST_TO_ADDR
// exit ;
55172: POP
55173: POP
55174: GO 55180
// end ; end ;
55176: GO 55020
55178: POP
55179: POP
// end ;
55180: LD_VAR 0 3
55184: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55185: LD_INT 0
55187: PPUSH
55188: PPUSH
55189: PPUSH
// result := 0 ;
55190: LD_ADDR_VAR 0 3
55194: PUSH
55195: LD_INT 0
55197: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55198: LD_VAR 0 1
55202: PUSH
55203: LD_INT 0
55205: LESS
55206: PUSH
55207: LD_VAR 0 1
55211: PUSH
55212: LD_INT 8
55214: GREATER
55215: OR
55216: PUSH
55217: LD_VAR 0 2
55221: PUSH
55222: LD_INT 0
55224: LESS
55225: OR
55226: PUSH
55227: LD_VAR 0 2
55231: PUSH
55232: LD_INT 8
55234: GREATER
55235: OR
55236: IFFALSE 55240
// exit ;
55238: GO 55315
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55240: LD_ADDR_VAR 0 4
55244: PUSH
55245: LD_INT 22
55247: PUSH
55248: LD_VAR 0 2
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PPUSH
55257: CALL_OW 69
55261: PUSH
55262: FOR_IN
55263: IFFALSE 55313
// begin un := UnitShoot ( i ) ;
55265: LD_ADDR_VAR 0 5
55269: PUSH
55270: LD_VAR 0 4
55274: PPUSH
55275: CALL_OW 504
55279: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55280: LD_VAR 0 5
55284: PPUSH
55285: CALL_OW 255
55289: PUSH
55290: LD_VAR 0 1
55294: EQUAL
55295: IFFALSE 55311
// begin result := un ;
55297: LD_ADDR_VAR 0 3
55301: PUSH
55302: LD_VAR 0 5
55306: ST_TO_ADDR
// exit ;
55307: POP
55308: POP
55309: GO 55315
// end ; end ;
55311: GO 55262
55313: POP
55314: POP
// end ;
55315: LD_VAR 0 3
55319: RET
// export function GetCargoBay ( units ) ; begin
55320: LD_INT 0
55322: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55323: LD_ADDR_VAR 0 2
55327: PUSH
55328: LD_VAR 0 1
55332: PPUSH
55333: LD_INT 2
55335: PUSH
55336: LD_INT 34
55338: PUSH
55339: LD_INT 12
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 34
55348: PUSH
55349: LD_INT 51
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 34
55358: PUSH
55359: LD_INT 32
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 34
55368: PUSH
55369: LD_INT 89
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: PPUSH
55383: CALL_OW 72
55387: ST_TO_ADDR
// end ;
55388: LD_VAR 0 2
55392: RET
// export function Negate ( value ) ; begin
55393: LD_INT 0
55395: PPUSH
// result := not value ;
55396: LD_ADDR_VAR 0 2
55400: PUSH
55401: LD_VAR 0 1
55405: NOT
55406: ST_TO_ADDR
// end ;
55407: LD_VAR 0 2
55411: RET
// export function Inc ( value ) ; begin
55412: LD_INT 0
55414: PPUSH
// result := value + 1 ;
55415: LD_ADDR_VAR 0 2
55419: PUSH
55420: LD_VAR 0 1
55424: PUSH
55425: LD_INT 1
55427: PLUS
55428: ST_TO_ADDR
// end ;
55429: LD_VAR 0 2
55433: RET
// export function Dec ( value ) ; begin
55434: LD_INT 0
55436: PPUSH
// result := value - 1 ;
55437: LD_ADDR_VAR 0 2
55441: PUSH
55442: LD_VAR 0 1
55446: PUSH
55447: LD_INT 1
55449: MINUS
55450: ST_TO_ADDR
// end ;
55451: LD_VAR 0 2
55455: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55456: LD_INT 0
55458: PPUSH
55459: PPUSH
55460: PPUSH
55461: PPUSH
55462: PPUSH
55463: PPUSH
55464: PPUSH
55465: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55466: LD_VAR 0 1
55470: PPUSH
55471: LD_VAR 0 2
55475: PPUSH
55476: CALL_OW 488
55480: NOT
55481: PUSH
55482: LD_VAR 0 3
55486: PPUSH
55487: LD_VAR 0 4
55491: PPUSH
55492: CALL_OW 488
55496: NOT
55497: OR
55498: IFFALSE 55511
// begin result := - 1 ;
55500: LD_ADDR_VAR 0 5
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: ST_TO_ADDR
// exit ;
55509: GO 55746
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55511: LD_ADDR_VAR 0 12
55515: PUSH
55516: LD_VAR 0 1
55520: PPUSH
55521: LD_VAR 0 2
55525: PPUSH
55526: LD_VAR 0 3
55530: PPUSH
55531: LD_VAR 0 4
55535: PPUSH
55536: CALL 54596 0 4
55540: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55541: LD_ADDR_VAR 0 11
55545: PUSH
55546: LD_VAR 0 1
55550: PPUSH
55551: LD_VAR 0 2
55555: PPUSH
55556: LD_VAR 0 12
55560: PUSH
55561: LD_INT 1
55563: ARRAY
55564: PPUSH
55565: LD_VAR 0 12
55569: PUSH
55570: LD_INT 2
55572: ARRAY
55573: PPUSH
55574: CALL_OW 298
55578: ST_TO_ADDR
// distance := 9999 ;
55579: LD_ADDR_VAR 0 10
55583: PUSH
55584: LD_INT 9999
55586: ST_TO_ADDR
// for i := 0 to 5 do
55587: LD_ADDR_VAR 0 6
55591: PUSH
55592: DOUBLE
55593: LD_INT 0
55595: DEC
55596: ST_TO_ADDR
55597: LD_INT 5
55599: PUSH
55600: FOR_TO
55601: IFFALSE 55744
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55603: LD_ADDR_VAR 0 7
55607: PUSH
55608: LD_VAR 0 1
55612: PPUSH
55613: LD_VAR 0 6
55617: PPUSH
55618: LD_VAR 0 11
55622: PPUSH
55623: CALL_OW 272
55627: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55628: LD_ADDR_VAR 0 8
55632: PUSH
55633: LD_VAR 0 2
55637: PPUSH
55638: LD_VAR 0 6
55642: PPUSH
55643: LD_VAR 0 11
55647: PPUSH
55648: CALL_OW 273
55652: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55653: LD_VAR 0 7
55657: PPUSH
55658: LD_VAR 0 8
55662: PPUSH
55663: CALL_OW 488
55667: NOT
55668: IFFALSE 55672
// continue ;
55670: GO 55600
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55672: LD_ADDR_VAR 0 9
55676: PUSH
55677: LD_VAR 0 12
55681: PUSH
55682: LD_INT 1
55684: ARRAY
55685: PPUSH
55686: LD_VAR 0 12
55690: PUSH
55691: LD_INT 2
55693: ARRAY
55694: PPUSH
55695: LD_VAR 0 7
55699: PPUSH
55700: LD_VAR 0 8
55704: PPUSH
55705: CALL_OW 298
55709: ST_TO_ADDR
// if tmp < distance then
55710: LD_VAR 0 9
55714: PUSH
55715: LD_VAR 0 10
55719: LESS
55720: IFFALSE 55742
// begin result := i ;
55722: LD_ADDR_VAR 0 5
55726: PUSH
55727: LD_VAR 0 6
55731: ST_TO_ADDR
// distance := tmp ;
55732: LD_ADDR_VAR 0 10
55736: PUSH
55737: LD_VAR 0 9
55741: ST_TO_ADDR
// end ; end ;
55742: GO 55600
55744: POP
55745: POP
// end ;
55746: LD_VAR 0 5
55750: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55751: LD_INT 0
55753: PPUSH
55754: PPUSH
// if not driver or not IsInUnit ( driver ) then
55755: LD_VAR 0 1
55759: NOT
55760: PUSH
55761: LD_VAR 0 1
55765: PPUSH
55766: CALL_OW 310
55770: NOT
55771: OR
55772: IFFALSE 55776
// exit ;
55774: GO 55866
// vehicle := IsInUnit ( driver ) ;
55776: LD_ADDR_VAR 0 3
55780: PUSH
55781: LD_VAR 0 1
55785: PPUSH
55786: CALL_OW 310
55790: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55791: LD_VAR 0 1
55795: PPUSH
55796: LD_STRING \
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: PUSH
55826: LD_STRING E
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_VAR 0 3
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PPUSH
55862: CALL_OW 446
// end ;
55866: LD_VAR 0 2
55870: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55871: LD_INT 0
55873: PPUSH
55874: PPUSH
// if not driver or not IsInUnit ( driver ) then
55875: LD_VAR 0 1
55879: NOT
55880: PUSH
55881: LD_VAR 0 1
55885: PPUSH
55886: CALL_OW 310
55890: NOT
55891: OR
55892: IFFALSE 55896
// exit ;
55894: GO 55986
// vehicle := IsInUnit ( driver ) ;
55896: LD_ADDR_VAR 0 3
55900: PUSH
55901: LD_VAR 0 1
55905: PPUSH
55906: CALL_OW 310
55910: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55911: LD_VAR 0 1
55915: PPUSH
55916: LD_STRING \
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: PUSH
55946: LD_STRING E
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_VAR 0 3
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PPUSH
55982: CALL_OW 447
// end ;
55986: LD_VAR 0 2
55990: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55991: LD_INT 0
55993: PPUSH
55994: PPUSH
55995: PPUSH
// tmp := [ ] ;
55996: LD_ADDR_VAR 0 5
56000: PUSH
56001: EMPTY
56002: ST_TO_ADDR
// for i in units do
56003: LD_ADDR_VAR 0 4
56007: PUSH
56008: LD_VAR 0 1
56012: PUSH
56013: FOR_IN
56014: IFFALSE 56052
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56016: LD_ADDR_VAR 0 5
56020: PUSH
56021: LD_VAR 0 5
56025: PPUSH
56026: LD_VAR 0 5
56030: PUSH
56031: LD_INT 1
56033: PLUS
56034: PPUSH
56035: LD_VAR 0 4
56039: PPUSH
56040: CALL_OW 256
56044: PPUSH
56045: CALL_OW 2
56049: ST_TO_ADDR
56050: GO 56013
56052: POP
56053: POP
// if not tmp then
56054: LD_VAR 0 5
56058: NOT
56059: IFFALSE 56063
// exit ;
56061: GO 56111
// if asc then
56063: LD_VAR 0 2
56067: IFFALSE 56091
// result := SortListByListAsc ( units , tmp ) else
56069: LD_ADDR_VAR 0 3
56073: PUSH
56074: LD_VAR 0 1
56078: PPUSH
56079: LD_VAR 0 5
56083: PPUSH
56084: CALL_OW 76
56088: ST_TO_ADDR
56089: GO 56111
// result := SortListByListDesc ( units , tmp ) ;
56091: LD_ADDR_VAR 0 3
56095: PUSH
56096: LD_VAR 0 1
56100: PPUSH
56101: LD_VAR 0 5
56105: PPUSH
56106: CALL_OW 77
56110: ST_TO_ADDR
// end ;
56111: LD_VAR 0 3
56115: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56116: LD_INT 0
56118: PPUSH
56119: PPUSH
// task := GetTaskList ( mech ) ;
56120: LD_ADDR_VAR 0 4
56124: PUSH
56125: LD_VAR 0 1
56129: PPUSH
56130: CALL_OW 437
56134: ST_TO_ADDR
// if not task then
56135: LD_VAR 0 4
56139: NOT
56140: IFFALSE 56144
// exit ;
56142: GO 56186
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56144: LD_ADDR_VAR 0 3
56148: PUSH
56149: LD_VAR 0 4
56153: PUSH
56154: LD_INT 1
56156: ARRAY
56157: PUSH
56158: LD_INT 1
56160: ARRAY
56161: PUSH
56162: LD_STRING r
56164: EQUAL
56165: PUSH
56166: LD_VAR 0 4
56170: PUSH
56171: LD_INT 1
56173: ARRAY
56174: PUSH
56175: LD_INT 4
56177: ARRAY
56178: PUSH
56179: LD_VAR 0 2
56183: EQUAL
56184: AND
56185: ST_TO_ADDR
// end ;
56186: LD_VAR 0 3
56190: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56191: LD_INT 0
56193: PPUSH
// SetDir ( unit , d ) ;
56194: LD_VAR 0 1
56198: PPUSH
56199: LD_VAR 0 4
56203: PPUSH
56204: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56208: LD_VAR 0 1
56212: PPUSH
56213: LD_VAR 0 2
56217: PPUSH
56218: LD_VAR 0 3
56222: PPUSH
56223: LD_VAR 0 5
56227: PPUSH
56228: CALL_OW 48
// end ;
56232: LD_VAR 0 6
56236: RET
// export function ToNaturalNumber ( number ) ; begin
56237: LD_INT 0
56239: PPUSH
// result := number div 1 ;
56240: LD_ADDR_VAR 0 2
56244: PUSH
56245: LD_VAR 0 1
56249: PUSH
56250: LD_INT 1
56252: DIV
56253: ST_TO_ADDR
// if number < 0 then
56254: LD_VAR 0 1
56258: PUSH
56259: LD_INT 0
56261: LESS
56262: IFFALSE 56272
// result := 0 ;
56264: LD_ADDR_VAR 0 2
56268: PUSH
56269: LD_INT 0
56271: ST_TO_ADDR
// end ;
56272: LD_VAR 0 2
56276: RET
// export function SortByClass ( units , class ) ; var un ; begin
56277: LD_INT 0
56279: PPUSH
56280: PPUSH
// if not units or not class then
56281: LD_VAR 0 1
56285: NOT
56286: PUSH
56287: LD_VAR 0 2
56291: NOT
56292: OR
56293: IFFALSE 56297
// exit ;
56295: GO 56392
// result := [ ] ;
56297: LD_ADDR_VAR 0 3
56301: PUSH
56302: EMPTY
56303: ST_TO_ADDR
// for un in units do
56304: LD_ADDR_VAR 0 4
56308: PUSH
56309: LD_VAR 0 1
56313: PUSH
56314: FOR_IN
56315: IFFALSE 56390
// if GetClass ( un ) = class then
56317: LD_VAR 0 4
56321: PPUSH
56322: CALL_OW 257
56326: PUSH
56327: LD_VAR 0 2
56331: EQUAL
56332: IFFALSE 56359
// result := Insert ( result , 1 , un ) else
56334: LD_ADDR_VAR 0 3
56338: PUSH
56339: LD_VAR 0 3
56343: PPUSH
56344: LD_INT 1
56346: PPUSH
56347: LD_VAR 0 4
56351: PPUSH
56352: CALL_OW 2
56356: ST_TO_ADDR
56357: GO 56388
// result := Replace ( result , result + 1 , un ) ;
56359: LD_ADDR_VAR 0 3
56363: PUSH
56364: LD_VAR 0 3
56368: PPUSH
56369: LD_VAR 0 3
56373: PUSH
56374: LD_INT 1
56376: PLUS
56377: PPUSH
56378: LD_VAR 0 4
56382: PPUSH
56383: CALL_OW 1
56387: ST_TO_ADDR
56388: GO 56314
56390: POP
56391: POP
// end ;
56392: LD_VAR 0 3
56396: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56397: LD_INT 0
56399: PPUSH
56400: PPUSH
56401: PPUSH
56402: PPUSH
56403: PPUSH
56404: PPUSH
56405: PPUSH
// result := [ ] ;
56406: LD_ADDR_VAR 0 4
56410: PUSH
56411: EMPTY
56412: ST_TO_ADDR
// if x - r < 0 then
56413: LD_VAR 0 1
56417: PUSH
56418: LD_VAR 0 3
56422: MINUS
56423: PUSH
56424: LD_INT 0
56426: LESS
56427: IFFALSE 56439
// min_x := 0 else
56429: LD_ADDR_VAR 0 8
56433: PUSH
56434: LD_INT 0
56436: ST_TO_ADDR
56437: GO 56455
// min_x := x - r ;
56439: LD_ADDR_VAR 0 8
56443: PUSH
56444: LD_VAR 0 1
56448: PUSH
56449: LD_VAR 0 3
56453: MINUS
56454: ST_TO_ADDR
// if y - r < 0 then
56455: LD_VAR 0 2
56459: PUSH
56460: LD_VAR 0 3
56464: MINUS
56465: PUSH
56466: LD_INT 0
56468: LESS
56469: IFFALSE 56481
// min_y := 0 else
56471: LD_ADDR_VAR 0 7
56475: PUSH
56476: LD_INT 0
56478: ST_TO_ADDR
56479: GO 56497
// min_y := y - r ;
56481: LD_ADDR_VAR 0 7
56485: PUSH
56486: LD_VAR 0 2
56490: PUSH
56491: LD_VAR 0 3
56495: MINUS
56496: ST_TO_ADDR
// max_x := x + r ;
56497: LD_ADDR_VAR 0 9
56501: PUSH
56502: LD_VAR 0 1
56506: PUSH
56507: LD_VAR 0 3
56511: PLUS
56512: ST_TO_ADDR
// max_y := y + r ;
56513: LD_ADDR_VAR 0 10
56517: PUSH
56518: LD_VAR 0 2
56522: PUSH
56523: LD_VAR 0 3
56527: PLUS
56528: ST_TO_ADDR
// for _x = min_x to max_x do
56529: LD_ADDR_VAR 0 5
56533: PUSH
56534: DOUBLE
56535: LD_VAR 0 8
56539: DEC
56540: ST_TO_ADDR
56541: LD_VAR 0 9
56545: PUSH
56546: FOR_TO
56547: IFFALSE 56648
// for _y = min_y to max_y do
56549: LD_ADDR_VAR 0 6
56553: PUSH
56554: DOUBLE
56555: LD_VAR 0 7
56559: DEC
56560: ST_TO_ADDR
56561: LD_VAR 0 10
56565: PUSH
56566: FOR_TO
56567: IFFALSE 56644
// begin if not ValidHex ( _x , _y ) then
56569: LD_VAR 0 5
56573: PPUSH
56574: LD_VAR 0 6
56578: PPUSH
56579: CALL_OW 488
56583: NOT
56584: IFFALSE 56588
// continue ;
56586: GO 56566
// if GetResourceTypeXY ( _x , _y ) then
56588: LD_VAR 0 5
56592: PPUSH
56593: LD_VAR 0 6
56597: PPUSH
56598: CALL_OW 283
56602: IFFALSE 56642
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56604: LD_ADDR_VAR 0 4
56608: PUSH
56609: LD_VAR 0 4
56613: PPUSH
56614: LD_VAR 0 4
56618: PUSH
56619: LD_INT 1
56621: PLUS
56622: PPUSH
56623: LD_VAR 0 5
56627: PUSH
56628: LD_VAR 0 6
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PPUSH
56637: CALL_OW 1
56641: ST_TO_ADDR
// end ;
56642: GO 56566
56644: POP
56645: POP
56646: GO 56546
56648: POP
56649: POP
// end ;
56650: LD_VAR 0 4
56654: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56655: LD_INT 0
56657: PPUSH
56658: PPUSH
56659: PPUSH
56660: PPUSH
56661: PPUSH
56662: PPUSH
56663: PPUSH
56664: PPUSH
// if not units then
56665: LD_VAR 0 1
56669: NOT
56670: IFFALSE 56674
// exit ;
56672: GO 57202
// result := UnitFilter ( units , [ f_ok ] ) ;
56674: LD_ADDR_VAR 0 3
56678: PUSH
56679: LD_VAR 0 1
56683: PPUSH
56684: LD_INT 50
56686: PUSH
56687: EMPTY
56688: LIST
56689: PPUSH
56690: CALL_OW 72
56694: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56695: LD_ADDR_VAR 0 8
56699: PUSH
56700: LD_VAR 0 1
56704: PUSH
56705: LD_INT 1
56707: ARRAY
56708: PPUSH
56709: CALL_OW 255
56713: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56714: LD_ADDR_VAR 0 10
56718: PUSH
56719: LD_INT 29
56721: PUSH
56722: LD_INT 91
56724: PUSH
56725: LD_INT 49
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: LIST
56732: ST_TO_ADDR
// if not result then
56733: LD_VAR 0 3
56737: NOT
56738: IFFALSE 56742
// exit ;
56740: GO 57202
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56742: LD_ADDR_VAR 0 5
56746: PUSH
56747: LD_INT 81
56749: PUSH
56750: LD_VAR 0 8
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PPUSH
56759: CALL_OW 69
56763: ST_TO_ADDR
// for i in result do
56764: LD_ADDR_VAR 0 4
56768: PUSH
56769: LD_VAR 0 3
56773: PUSH
56774: FOR_IN
56775: IFFALSE 57200
// begin tag := GetTag ( i ) + 1 ;
56777: LD_ADDR_VAR 0 9
56781: PUSH
56782: LD_VAR 0 4
56786: PPUSH
56787: CALL_OW 110
56791: PUSH
56792: LD_INT 1
56794: PLUS
56795: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56796: LD_ADDR_VAR 0 7
56800: PUSH
56801: LD_VAR 0 4
56805: PPUSH
56806: CALL_OW 250
56810: PPUSH
56811: LD_VAR 0 4
56815: PPUSH
56816: CALL_OW 251
56820: PPUSH
56821: LD_INT 4
56823: PPUSH
56824: CALL 56397 0 3
56828: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56829: LD_VAR 0 4
56833: PPUSH
56834: CALL_OW 247
56838: PUSH
56839: LD_INT 2
56841: EQUAL
56842: PUSH
56843: LD_VAR 0 7
56847: PUSH
56848: LD_INT 2
56850: GREATER
56851: AND
56852: PUSH
56853: LD_VAR 0 4
56857: PPUSH
56858: CALL_OW 264
56862: PUSH
56863: LD_VAR 0 10
56867: IN
56868: NOT
56869: AND
56870: IFFALSE 56909
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56872: LD_VAR 0 4
56876: PPUSH
56877: LD_VAR 0 7
56881: PUSH
56882: LD_INT 1
56884: ARRAY
56885: PUSH
56886: LD_INT 1
56888: ARRAY
56889: PPUSH
56890: LD_VAR 0 7
56894: PUSH
56895: LD_INT 1
56897: ARRAY
56898: PUSH
56899: LD_INT 2
56901: ARRAY
56902: PPUSH
56903: CALL_OW 116
56907: GO 57198
// if path > tag then
56909: LD_VAR 0 2
56913: PUSH
56914: LD_VAR 0 9
56918: GREATER
56919: IFFALSE 57127
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56921: LD_ADDR_VAR 0 6
56925: PUSH
56926: LD_VAR 0 5
56930: PPUSH
56931: LD_INT 91
56933: PUSH
56934: LD_VAR 0 4
56938: PUSH
56939: LD_INT 8
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: LIST
56946: PPUSH
56947: CALL_OW 72
56951: ST_TO_ADDR
// if nearEnemy then
56952: LD_VAR 0 6
56956: IFFALSE 57025
// begin if GetWeapon ( i ) = ru_time_lapser then
56958: LD_VAR 0 4
56962: PPUSH
56963: CALL_OW 264
56967: PUSH
56968: LD_INT 49
56970: EQUAL
56971: IFFALSE 56999
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56973: LD_VAR 0 4
56977: PPUSH
56978: LD_VAR 0 6
56982: PPUSH
56983: LD_VAR 0 4
56987: PPUSH
56988: CALL_OW 74
56992: PPUSH
56993: CALL_OW 112
56997: GO 57023
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56999: LD_VAR 0 4
57003: PPUSH
57004: LD_VAR 0 6
57008: PPUSH
57009: LD_VAR 0 4
57013: PPUSH
57014: CALL_OW 74
57018: PPUSH
57019: CALL 58273 0 2
// end else
57023: GO 57125
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57025: LD_VAR 0 4
57029: PPUSH
57030: LD_VAR 0 2
57034: PUSH
57035: LD_VAR 0 9
57039: ARRAY
57040: PUSH
57041: LD_INT 1
57043: ARRAY
57044: PPUSH
57045: LD_VAR 0 2
57049: PUSH
57050: LD_VAR 0 9
57054: ARRAY
57055: PUSH
57056: LD_INT 2
57058: ARRAY
57059: PPUSH
57060: CALL_OW 297
57064: PUSH
57065: LD_INT 6
57067: GREATER
57068: IFFALSE 57111
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57070: LD_VAR 0 4
57074: PPUSH
57075: LD_VAR 0 2
57079: PUSH
57080: LD_VAR 0 9
57084: ARRAY
57085: PUSH
57086: LD_INT 1
57088: ARRAY
57089: PPUSH
57090: LD_VAR 0 2
57094: PUSH
57095: LD_VAR 0 9
57099: ARRAY
57100: PUSH
57101: LD_INT 2
57103: ARRAY
57104: PPUSH
57105: CALL_OW 114
57109: GO 57125
// SetTag ( i , tag ) ;
57111: LD_VAR 0 4
57115: PPUSH
57116: LD_VAR 0 9
57120: PPUSH
57121: CALL_OW 109
// end else
57125: GO 57198
// if enemy then
57127: LD_VAR 0 5
57131: IFFALSE 57198
// begin if GetWeapon ( i ) = ru_time_lapser then
57133: LD_VAR 0 4
57137: PPUSH
57138: CALL_OW 264
57142: PUSH
57143: LD_INT 49
57145: EQUAL
57146: IFFALSE 57174
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57148: LD_VAR 0 4
57152: PPUSH
57153: LD_VAR 0 5
57157: PPUSH
57158: LD_VAR 0 4
57162: PPUSH
57163: CALL_OW 74
57167: PPUSH
57168: CALL_OW 112
57172: GO 57198
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57174: LD_VAR 0 4
57178: PPUSH
57179: LD_VAR 0 5
57183: PPUSH
57184: LD_VAR 0 4
57188: PPUSH
57189: CALL_OW 74
57193: PPUSH
57194: CALL 58273 0 2
// end ; end ;
57198: GO 56774
57200: POP
57201: POP
// end ;
57202: LD_VAR 0 3
57206: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57207: LD_INT 0
57209: PPUSH
57210: PPUSH
57211: PPUSH
// if not unit or IsInUnit ( unit ) then
57212: LD_VAR 0 1
57216: NOT
57217: PUSH
57218: LD_VAR 0 1
57222: PPUSH
57223: CALL_OW 310
57227: OR
57228: IFFALSE 57232
// exit ;
57230: GO 57323
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57232: LD_ADDR_VAR 0 4
57236: PUSH
57237: LD_VAR 0 1
57241: PPUSH
57242: CALL_OW 250
57246: PPUSH
57247: LD_VAR 0 2
57251: PPUSH
57252: LD_INT 1
57254: PPUSH
57255: CALL_OW 272
57259: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57260: LD_ADDR_VAR 0 5
57264: PUSH
57265: LD_VAR 0 1
57269: PPUSH
57270: CALL_OW 251
57274: PPUSH
57275: LD_VAR 0 2
57279: PPUSH
57280: LD_INT 1
57282: PPUSH
57283: CALL_OW 273
57287: ST_TO_ADDR
// if ValidHex ( x , y ) then
57288: LD_VAR 0 4
57292: PPUSH
57293: LD_VAR 0 5
57297: PPUSH
57298: CALL_OW 488
57302: IFFALSE 57323
// ComTurnXY ( unit , x , y ) ;
57304: LD_VAR 0 1
57308: PPUSH
57309: LD_VAR 0 4
57313: PPUSH
57314: LD_VAR 0 5
57318: PPUSH
57319: CALL_OW 118
// end ;
57323: LD_VAR 0 3
57327: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57328: LD_INT 0
57330: PPUSH
57331: PPUSH
// result := false ;
57332: LD_ADDR_VAR 0 3
57336: PUSH
57337: LD_INT 0
57339: ST_TO_ADDR
// if not units then
57340: LD_VAR 0 2
57344: NOT
57345: IFFALSE 57349
// exit ;
57347: GO 57394
// for i in units do
57349: LD_ADDR_VAR 0 4
57353: PUSH
57354: LD_VAR 0 2
57358: PUSH
57359: FOR_IN
57360: IFFALSE 57392
// if See ( side , i ) then
57362: LD_VAR 0 1
57366: PPUSH
57367: LD_VAR 0 4
57371: PPUSH
57372: CALL_OW 292
57376: IFFALSE 57390
// begin result := true ;
57378: LD_ADDR_VAR 0 3
57382: PUSH
57383: LD_INT 1
57385: ST_TO_ADDR
// exit ;
57386: POP
57387: POP
57388: GO 57394
// end ;
57390: GO 57359
57392: POP
57393: POP
// end ;
57394: LD_VAR 0 3
57398: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57399: LD_INT 0
57401: PPUSH
57402: PPUSH
57403: PPUSH
57404: PPUSH
// if not unit or not points then
57405: LD_VAR 0 1
57409: NOT
57410: PUSH
57411: LD_VAR 0 2
57415: NOT
57416: OR
57417: IFFALSE 57421
// exit ;
57419: GO 57511
// dist := 99999 ;
57421: LD_ADDR_VAR 0 5
57425: PUSH
57426: LD_INT 99999
57428: ST_TO_ADDR
// for i in points do
57429: LD_ADDR_VAR 0 4
57433: PUSH
57434: LD_VAR 0 2
57438: PUSH
57439: FOR_IN
57440: IFFALSE 57509
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57442: LD_ADDR_VAR 0 6
57446: PUSH
57447: LD_VAR 0 1
57451: PPUSH
57452: LD_VAR 0 4
57456: PUSH
57457: LD_INT 1
57459: ARRAY
57460: PPUSH
57461: LD_VAR 0 4
57465: PUSH
57466: LD_INT 2
57468: ARRAY
57469: PPUSH
57470: CALL_OW 297
57474: ST_TO_ADDR
// if tmpDist < dist then
57475: LD_VAR 0 6
57479: PUSH
57480: LD_VAR 0 5
57484: LESS
57485: IFFALSE 57507
// begin result := i ;
57487: LD_ADDR_VAR 0 3
57491: PUSH
57492: LD_VAR 0 4
57496: ST_TO_ADDR
// dist := tmpDist ;
57497: LD_ADDR_VAR 0 5
57501: PUSH
57502: LD_VAR 0 6
57506: ST_TO_ADDR
// end ; end ;
57507: GO 57439
57509: POP
57510: POP
// end ;
57511: LD_VAR 0 3
57515: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57516: LD_INT 0
57518: PPUSH
// uc_side := side ;
57519: LD_ADDR_OWVAR 20
57523: PUSH
57524: LD_VAR 0 1
57528: ST_TO_ADDR
// uc_nation := 3 ;
57529: LD_ADDR_OWVAR 21
57533: PUSH
57534: LD_INT 3
57536: ST_TO_ADDR
// vc_chassis := 25 ;
57537: LD_ADDR_OWVAR 37
57541: PUSH
57542: LD_INT 25
57544: ST_TO_ADDR
// vc_engine := engine_siberite ;
57545: LD_ADDR_OWVAR 39
57549: PUSH
57550: LD_INT 3
57552: ST_TO_ADDR
// vc_control := control_computer ;
57553: LD_ADDR_OWVAR 38
57557: PUSH
57558: LD_INT 3
57560: ST_TO_ADDR
// vc_weapon := 59 ;
57561: LD_ADDR_OWVAR 40
57565: PUSH
57566: LD_INT 59
57568: ST_TO_ADDR
// result := CreateVehicle ;
57569: LD_ADDR_VAR 0 5
57573: PUSH
57574: CALL_OW 45
57578: ST_TO_ADDR
// SetDir ( result , d ) ;
57579: LD_VAR 0 5
57583: PPUSH
57584: LD_VAR 0 4
57588: PPUSH
57589: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57593: LD_VAR 0 5
57597: PPUSH
57598: LD_VAR 0 2
57602: PPUSH
57603: LD_VAR 0 3
57607: PPUSH
57608: LD_INT 0
57610: PPUSH
57611: CALL_OW 48
// end ;
57615: LD_VAR 0 5
57619: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57620: LD_INT 0
57622: PPUSH
57623: PPUSH
57624: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57625: LD_ADDR_VAR 0 2
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57648: LD_VAR 0 1
57652: NOT
57653: PUSH
57654: LD_VAR 0 1
57658: PPUSH
57659: CALL_OW 264
57663: PUSH
57664: LD_INT 12
57666: PUSH
57667: LD_INT 51
57669: PUSH
57670: LD_INT 32
57672: PUSH
57673: LD_INT 89
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: IN
57682: NOT
57683: OR
57684: IFFALSE 57688
// exit ;
57686: GO 57786
// for i := 1 to 3 do
57688: LD_ADDR_VAR 0 3
57692: PUSH
57693: DOUBLE
57694: LD_INT 1
57696: DEC
57697: ST_TO_ADDR
57698: LD_INT 3
57700: PUSH
57701: FOR_TO
57702: IFFALSE 57784
// begin tmp := GetCargo ( cargo , i ) ;
57704: LD_ADDR_VAR 0 4
57708: PUSH
57709: LD_VAR 0 1
57713: PPUSH
57714: LD_VAR 0 3
57718: PPUSH
57719: CALL_OW 289
57723: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57724: LD_ADDR_VAR 0 2
57728: PUSH
57729: LD_VAR 0 2
57733: PPUSH
57734: LD_VAR 0 3
57738: PPUSH
57739: LD_VAR 0 4
57743: PPUSH
57744: CALL_OW 1
57748: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57749: LD_ADDR_VAR 0 2
57753: PUSH
57754: LD_VAR 0 2
57758: PPUSH
57759: LD_INT 4
57761: PPUSH
57762: LD_VAR 0 2
57766: PUSH
57767: LD_INT 4
57769: ARRAY
57770: PUSH
57771: LD_VAR 0 4
57775: PLUS
57776: PPUSH
57777: CALL_OW 1
57781: ST_TO_ADDR
// end ;
57782: GO 57701
57784: POP
57785: POP
// end ;
57786: LD_VAR 0 2
57790: RET
// export function Length ( array ) ; begin
57791: LD_INT 0
57793: PPUSH
// result := array + 0 ;
57794: LD_ADDR_VAR 0 2
57798: PUSH
57799: LD_VAR 0 1
57803: PUSH
57804: LD_INT 0
57806: PLUS
57807: ST_TO_ADDR
// end ;
57808: LD_VAR 0 2
57812: RET
// export function PrepareArray ( array ) ; begin
57813: LD_INT 0
57815: PPUSH
// result := array diff 0 ;
57816: LD_ADDR_VAR 0 2
57820: PUSH
57821: LD_VAR 0 1
57825: PUSH
57826: LD_INT 0
57828: DIFF
57829: ST_TO_ADDR
// if not result [ 1 ] then
57830: LD_VAR 0 2
57834: PUSH
57835: LD_INT 1
57837: ARRAY
57838: NOT
57839: IFFALSE 57859
// result := Delete ( result , 1 ) ;
57841: LD_ADDR_VAR 0 2
57845: PUSH
57846: LD_VAR 0 2
57850: PPUSH
57851: LD_INT 1
57853: PPUSH
57854: CALL_OW 3
57858: ST_TO_ADDR
// end ;
57859: LD_VAR 0 2
57863: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57864: LD_INT 0
57866: PPUSH
57867: PPUSH
57868: PPUSH
57869: PPUSH
// sibRocketRange := 25 ;
57870: LD_ADDR_VAR 0 6
57874: PUSH
57875: LD_INT 25
57877: ST_TO_ADDR
// result := false ;
57878: LD_ADDR_VAR 0 4
57882: PUSH
57883: LD_INT 0
57885: ST_TO_ADDR
// for i := 0 to 5 do
57886: LD_ADDR_VAR 0 5
57890: PUSH
57891: DOUBLE
57892: LD_INT 0
57894: DEC
57895: ST_TO_ADDR
57896: LD_INT 5
57898: PUSH
57899: FOR_TO
57900: IFFALSE 57967
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57902: LD_VAR 0 1
57906: PPUSH
57907: LD_VAR 0 5
57911: PPUSH
57912: LD_VAR 0 6
57916: PPUSH
57917: CALL_OW 272
57921: PPUSH
57922: LD_VAR 0 2
57926: PPUSH
57927: LD_VAR 0 5
57931: PPUSH
57932: LD_VAR 0 6
57936: PPUSH
57937: CALL_OW 273
57941: PPUSH
57942: LD_VAR 0 3
57946: PPUSH
57947: CALL_OW 309
57951: IFFALSE 57965
// begin result := true ;
57953: LD_ADDR_VAR 0 4
57957: PUSH
57958: LD_INT 1
57960: ST_TO_ADDR
// exit ;
57961: POP
57962: POP
57963: GO 57969
// end ;
57965: GO 57899
57967: POP
57968: POP
// end ;
57969: LD_VAR 0 4
57973: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57974: LD_INT 0
57976: PPUSH
57977: PPUSH
57978: PPUSH
// if btype = b_depot then
57979: LD_VAR 0 2
57983: PUSH
57984: LD_INT 0
57986: EQUAL
57987: IFFALSE 57999
// begin result := true ;
57989: LD_ADDR_VAR 0 3
57993: PUSH
57994: LD_INT 1
57996: ST_TO_ADDR
// exit ;
57997: GO 58115
// end ; pom := GetBase ( depot ) ;
57999: LD_ADDR_VAR 0 4
58003: PUSH
58004: LD_VAR 0 1
58008: PPUSH
58009: CALL_OW 274
58013: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58014: LD_ADDR_VAR 0 5
58018: PUSH
58019: LD_VAR 0 2
58023: PPUSH
58024: LD_VAR 0 1
58028: PPUSH
58029: CALL_OW 248
58033: PPUSH
58034: CALL_OW 450
58038: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58039: LD_ADDR_VAR 0 3
58043: PUSH
58044: LD_VAR 0 4
58048: PPUSH
58049: LD_INT 1
58051: PPUSH
58052: CALL_OW 275
58056: PUSH
58057: LD_VAR 0 5
58061: PUSH
58062: LD_INT 1
58064: ARRAY
58065: GREATEREQUAL
58066: PUSH
58067: LD_VAR 0 4
58071: PPUSH
58072: LD_INT 2
58074: PPUSH
58075: CALL_OW 275
58079: PUSH
58080: LD_VAR 0 5
58084: PUSH
58085: LD_INT 2
58087: ARRAY
58088: GREATEREQUAL
58089: AND
58090: PUSH
58091: LD_VAR 0 4
58095: PPUSH
58096: LD_INT 3
58098: PPUSH
58099: CALL_OW 275
58103: PUSH
58104: LD_VAR 0 5
58108: PUSH
58109: LD_INT 3
58111: ARRAY
58112: GREATEREQUAL
58113: AND
58114: ST_TO_ADDR
// end ;
58115: LD_VAR 0 3
58119: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58120: LD_INT 0
58122: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58123: LD_VAR 0 1
58127: PPUSH
58128: LD_VAR 0 2
58132: PPUSH
58133: LD_INT 0
58135: PPUSH
58136: LD_INT 0
58138: PPUSH
58139: LD_INT 1
58141: PPUSH
58142: LD_INT 0
58144: PPUSH
58145: CALL_OW 587
// end ;
58149: LD_VAR 0 3
58153: RET
// export function CenterOnNow ( unit ) ; begin
58154: LD_INT 0
58156: PPUSH
// result := IsInUnit ( unit ) ;
58157: LD_ADDR_VAR 0 2
58161: PUSH
58162: LD_VAR 0 1
58166: PPUSH
58167: CALL_OW 310
58171: ST_TO_ADDR
// if not result then
58172: LD_VAR 0 2
58176: NOT
58177: IFFALSE 58189
// result := unit ;
58179: LD_ADDR_VAR 0 2
58183: PUSH
58184: LD_VAR 0 1
58188: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58189: LD_VAR 0 1
58193: PPUSH
58194: CALL_OW 87
// end ;
58198: LD_VAR 0 2
58202: RET
// export function ComMoveHex ( unit , hex ) ; begin
58203: LD_INT 0
58205: PPUSH
// if not hex then
58206: LD_VAR 0 2
58210: NOT
58211: IFFALSE 58215
// exit ;
58213: GO 58268
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58215: LD_VAR 0 2
58219: PUSH
58220: LD_INT 1
58222: ARRAY
58223: PPUSH
58224: LD_VAR 0 2
58228: PUSH
58229: LD_INT 2
58231: ARRAY
58232: PPUSH
58233: CALL_OW 428
58237: IFFALSE 58241
// exit ;
58239: GO 58268
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58241: LD_VAR 0 1
58245: PPUSH
58246: LD_VAR 0 2
58250: PUSH
58251: LD_INT 1
58253: ARRAY
58254: PPUSH
58255: LD_VAR 0 2
58259: PUSH
58260: LD_INT 2
58262: ARRAY
58263: PPUSH
58264: CALL_OW 111
// end ;
58268: LD_VAR 0 3
58272: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58273: LD_INT 0
58275: PPUSH
58276: PPUSH
58277: PPUSH
// if not unit or not enemy then
58278: LD_VAR 0 1
58282: NOT
58283: PUSH
58284: LD_VAR 0 2
58288: NOT
58289: OR
58290: IFFALSE 58294
// exit ;
58292: GO 58418
// x := GetX ( enemy ) ;
58294: LD_ADDR_VAR 0 4
58298: PUSH
58299: LD_VAR 0 2
58303: PPUSH
58304: CALL_OW 250
58308: ST_TO_ADDR
// y := GetY ( enemy ) ;
58309: LD_ADDR_VAR 0 5
58313: PUSH
58314: LD_VAR 0 2
58318: PPUSH
58319: CALL_OW 251
58323: ST_TO_ADDR
// if ValidHex ( x , y ) then
58324: LD_VAR 0 4
58328: PPUSH
58329: LD_VAR 0 5
58333: PPUSH
58334: CALL_OW 488
58338: IFFALSE 58418
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58340: LD_VAR 0 2
58344: PPUSH
58345: CALL_OW 247
58349: PUSH
58350: LD_INT 3
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: IN
58360: PUSH
58361: LD_VAR 0 1
58365: PPUSH
58366: CALL_OW 255
58370: PPUSH
58371: LD_VAR 0 2
58375: PPUSH
58376: CALL_OW 292
58380: OR
58381: IFFALSE 58399
// ComAttackUnit ( unit , enemy ) else
58383: LD_VAR 0 1
58387: PPUSH
58388: LD_VAR 0 2
58392: PPUSH
58393: CALL_OW 115
58397: GO 58418
// ComAgressiveMove ( unit , x , y ) ;
58399: LD_VAR 0 1
58403: PPUSH
58404: LD_VAR 0 4
58408: PPUSH
58409: LD_VAR 0 5
58413: PPUSH
58414: CALL_OW 114
// end ;
58418: LD_VAR 0 3
58422: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58423: LD_INT 0
58425: PPUSH
58426: PPUSH
58427: PPUSH
// list := AreaToList ( area , 0 ) ;
58428: LD_ADDR_VAR 0 5
58432: PUSH
58433: LD_VAR 0 1
58437: PPUSH
58438: LD_INT 0
58440: PPUSH
58441: CALL_OW 517
58445: ST_TO_ADDR
// if not list then
58446: LD_VAR 0 5
58450: NOT
58451: IFFALSE 58455
// exit ;
58453: GO 58585
// if all then
58455: LD_VAR 0 2
58459: IFFALSE 58547
// begin for i := 1 to list [ 1 ] do
58461: LD_ADDR_VAR 0 4
58465: PUSH
58466: DOUBLE
58467: LD_INT 1
58469: DEC
58470: ST_TO_ADDR
58471: LD_VAR 0 5
58475: PUSH
58476: LD_INT 1
58478: ARRAY
58479: PUSH
58480: FOR_TO
58481: IFFALSE 58543
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58483: LD_ADDR_VAR 0 3
58487: PUSH
58488: LD_VAR 0 3
58492: PPUSH
58493: LD_VAR 0 3
58497: PUSH
58498: LD_INT 1
58500: PLUS
58501: PPUSH
58502: LD_VAR 0 5
58506: PUSH
58507: LD_INT 1
58509: ARRAY
58510: PUSH
58511: LD_VAR 0 4
58515: ARRAY
58516: PUSH
58517: LD_VAR 0 5
58521: PUSH
58522: LD_INT 2
58524: ARRAY
58525: PUSH
58526: LD_VAR 0 4
58530: ARRAY
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PPUSH
58536: CALL_OW 1
58540: ST_TO_ADDR
58541: GO 58480
58543: POP
58544: POP
// exit ;
58545: GO 58585
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58547: LD_ADDR_VAR 0 3
58551: PUSH
58552: LD_VAR 0 5
58556: PUSH
58557: LD_INT 1
58559: ARRAY
58560: PUSH
58561: LD_INT 1
58563: ARRAY
58564: PUSH
58565: LD_VAR 0 5
58569: PUSH
58570: LD_INT 2
58572: ARRAY
58573: PUSH
58574: LD_INT 1
58576: ARRAY
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: EMPTY
58583: LIST
58584: ST_TO_ADDR
// end ;
58585: LD_VAR 0 3
58589: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58590: LD_INT 0
58592: PPUSH
58593: PPUSH
// list := AreaToList ( area , 0 ) ;
58594: LD_ADDR_VAR 0 4
58598: PUSH
58599: LD_VAR 0 1
58603: PPUSH
58604: LD_INT 0
58606: PPUSH
58607: CALL_OW 517
58611: ST_TO_ADDR
// if not list then
58612: LD_VAR 0 4
58616: NOT
58617: IFFALSE 58621
// exit ;
58619: GO 58662
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58621: LD_ADDR_VAR 0 3
58625: PUSH
58626: LD_VAR 0 4
58630: PUSH
58631: LD_INT 1
58633: ARRAY
58634: PUSH
58635: LD_INT 1
58637: ARRAY
58638: PUSH
58639: LD_VAR 0 4
58643: PUSH
58644: LD_INT 2
58646: ARRAY
58647: PUSH
58648: LD_INT 1
58650: ARRAY
58651: PUSH
58652: LD_VAR 0 2
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: LIST
58661: ST_TO_ADDR
// end ;
58662: LD_VAR 0 3
58666: RET
// export function First ( array ) ; begin
58667: LD_INT 0
58669: PPUSH
// if not array then
58670: LD_VAR 0 1
58674: NOT
58675: IFFALSE 58679
// exit ;
58677: GO 58693
// result := array [ 1 ] ;
58679: LD_ADDR_VAR 0 2
58683: PUSH
58684: LD_VAR 0 1
58688: PUSH
58689: LD_INT 1
58691: ARRAY
58692: ST_TO_ADDR
// end ;
58693: LD_VAR 0 2
58697: RET
// export function Last ( array ) ; begin
58698: LD_INT 0
58700: PPUSH
// if not array then
58701: LD_VAR 0 1
58705: NOT
58706: IFFALSE 58710
// exit ;
58708: GO 58726
// result := array [ array ] ;
58710: LD_ADDR_VAR 0 2
58714: PUSH
58715: LD_VAR 0 1
58719: PUSH
58720: LD_VAR 0 1
58724: ARRAY
58725: ST_TO_ADDR
// end ;
58726: LD_VAR 0 2
58730: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58731: LD_INT 0
58733: PPUSH
58734: PPUSH
// result := [ ] ;
58735: LD_ADDR_VAR 0 5
58739: PUSH
58740: EMPTY
58741: ST_TO_ADDR
// if not array then
58742: LD_VAR 0 1
58746: NOT
58747: IFFALSE 58751
// exit ;
58749: GO 58863
// for i := 1 to array do
58751: LD_ADDR_VAR 0 6
58755: PUSH
58756: DOUBLE
58757: LD_INT 1
58759: DEC
58760: ST_TO_ADDR
58761: LD_VAR 0 1
58765: PUSH
58766: FOR_TO
58767: IFFALSE 58861
// if array [ i ] [ index ] = value then
58769: LD_VAR 0 1
58773: PUSH
58774: LD_VAR 0 6
58778: ARRAY
58779: PUSH
58780: LD_VAR 0 2
58784: ARRAY
58785: PUSH
58786: LD_VAR 0 3
58790: EQUAL
58791: IFFALSE 58859
// begin if indexColumn then
58793: LD_VAR 0 4
58797: IFFALSE 58833
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58799: LD_ADDR_VAR 0 5
58803: PUSH
58804: LD_VAR 0 5
58808: PPUSH
58809: LD_VAR 0 1
58813: PUSH
58814: LD_VAR 0 6
58818: ARRAY
58819: PUSH
58820: LD_VAR 0 4
58824: ARRAY
58825: PPUSH
58826: CALL 54051 0 2
58830: ST_TO_ADDR
58831: GO 58859
// result := Join ( result , array [ i ] ) ;
58833: LD_ADDR_VAR 0 5
58837: PUSH
58838: LD_VAR 0 5
58842: PPUSH
58843: LD_VAR 0 1
58847: PUSH
58848: LD_VAR 0 6
58852: ARRAY
58853: PPUSH
58854: CALL 54051 0 2
58858: ST_TO_ADDR
// end ;
58859: GO 58766
58861: POP
58862: POP
// end ;
58863: LD_VAR 0 5
58867: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58868: LD_INT 0
58870: PPUSH
// if not vehicles or not parkingPoint then
58871: LD_VAR 0 1
58875: NOT
58876: PUSH
58877: LD_VAR 0 2
58881: NOT
58882: OR
58883: IFFALSE 58887
// exit ;
58885: GO 58985
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58887: LD_ADDR_VAR 0 1
58891: PUSH
58892: LD_VAR 0 1
58896: PPUSH
58897: LD_INT 50
58899: PUSH
58900: EMPTY
58901: LIST
58902: PUSH
58903: LD_INT 3
58905: PUSH
58906: LD_INT 92
58908: PUSH
58909: LD_VAR 0 2
58913: PUSH
58914: LD_INT 1
58916: ARRAY
58917: PUSH
58918: LD_VAR 0 2
58922: PUSH
58923: LD_INT 2
58925: ARRAY
58926: PUSH
58927: LD_INT 8
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PPUSH
58944: CALL_OW 72
58948: ST_TO_ADDR
// if not vehicles then
58949: LD_VAR 0 1
58953: NOT
58954: IFFALSE 58958
// exit ;
58956: GO 58985
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58958: LD_VAR 0 1
58962: PPUSH
58963: LD_VAR 0 2
58967: PUSH
58968: LD_INT 1
58970: ARRAY
58971: PPUSH
58972: LD_VAR 0 2
58976: PUSH
58977: LD_INT 2
58979: ARRAY
58980: PPUSH
58981: CALL_OW 111
// end ;
58985: LD_VAR 0 3
58989: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58990: LD_INT 0
58992: PPUSH
58993: PPUSH
58994: PPUSH
// if not side or not area then
58995: LD_VAR 0 1
58999: NOT
59000: PUSH
59001: LD_VAR 0 2
59005: NOT
59006: OR
59007: IFFALSE 59011
// exit ;
59009: GO 59130
// tmp := AreaToList ( area , 0 ) ;
59011: LD_ADDR_VAR 0 5
59015: PUSH
59016: LD_VAR 0 2
59020: PPUSH
59021: LD_INT 0
59023: PPUSH
59024: CALL_OW 517
59028: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59029: LD_ADDR_VAR 0 4
59033: PUSH
59034: DOUBLE
59035: LD_INT 1
59037: DEC
59038: ST_TO_ADDR
59039: LD_VAR 0 5
59043: PUSH
59044: LD_INT 1
59046: ARRAY
59047: PUSH
59048: FOR_TO
59049: IFFALSE 59128
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59051: LD_VAR 0 5
59055: PUSH
59056: LD_INT 1
59058: ARRAY
59059: PUSH
59060: LD_VAR 0 4
59064: ARRAY
59065: PPUSH
59066: LD_VAR 0 5
59070: PUSH
59071: LD_INT 2
59073: ARRAY
59074: PUSH
59075: LD_VAR 0 4
59079: ARRAY
59080: PPUSH
59081: CALL_OW 351
59085: IFFALSE 59126
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59087: LD_VAR 0 5
59091: PUSH
59092: LD_INT 1
59094: ARRAY
59095: PUSH
59096: LD_VAR 0 4
59100: ARRAY
59101: PPUSH
59102: LD_VAR 0 5
59106: PUSH
59107: LD_INT 2
59109: ARRAY
59110: PUSH
59111: LD_VAR 0 4
59115: ARRAY
59116: PPUSH
59117: LD_VAR 0 1
59121: PPUSH
59122: CALL_OW 244
// end ;
59126: GO 59048
59128: POP
59129: POP
// end ; end_of_file
59130: LD_VAR 0 3
59134: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59135: PPOPN 6
59137: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
59138: CALL 59167 0 0
// end ; end_of_file
59142: PPOPN 1
59144: END
// every 0 0$1 do
59145: GO 59147
59147: DISABLE
// begin enable ;
59148: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59149: LD_STRING updateTimer(
59151: PUSH
59152: LD_OWVAR 1
59156: STR
59157: PUSH
59158: LD_STRING );
59160: STR
59161: PPUSH
59162: CALL_OW 559
// end ;
59166: END
// export function SOS_MapStart ( ) ; begin
59167: LD_INT 0
59169: PPUSH
// UpdateFactoryWaypoints ( ) ;
59170: CALL 59539 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59174: CALL 59791 0 0
// end ;
59178: LD_VAR 0 1
59182: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59183: LD_INT 0
59185: PPUSH
// end ;
59186: LD_VAR 0 12
59190: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59191: LD_INT 0
59193: PPUSH
59194: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59195: LD_VAR 0 1
59199: NOT
59200: PUSH
59201: LD_VAR 0 2
59205: PPUSH
59206: LD_VAR 0 3
59210: PPUSH
59211: CALL_OW 488
59215: NOT
59216: OR
59217: PUSH
59218: LD_VAR 0 1
59222: PPUSH
59223: CALL_OW 266
59227: PUSH
59228: LD_INT 3
59230: NONEQUAL
59231: PUSH
59232: LD_VAR 0 1
59236: PPUSH
59237: CALL_OW 247
59241: PUSH
59242: LD_INT 1
59244: EQUAL
59245: NOT
59246: AND
59247: OR
59248: IFFALSE 59252
// exit ;
59250: GO 59534
// if GetType ( factory ) = unit_human then
59252: LD_VAR 0 1
59256: PPUSH
59257: CALL_OW 247
59261: PUSH
59262: LD_INT 1
59264: EQUAL
59265: IFFALSE 59282
// factory := IsInUnit ( factory ) ;
59267: LD_ADDR_VAR 0 1
59271: PUSH
59272: LD_VAR 0 1
59276: PPUSH
59277: CALL_OW 310
59281: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59282: LD_VAR 0 1
59286: PPUSH
59287: CALL_OW 266
59291: PUSH
59292: LD_INT 3
59294: NONEQUAL
59295: IFFALSE 59299
// exit ;
59297: GO 59534
// for i := 1 to Count ( factoryWaypoints ) do
59299: LD_ADDR_VAR 0 5
59303: PUSH
59304: DOUBLE
59305: LD_INT 1
59307: DEC
59308: ST_TO_ADDR
59309: LD_EXP 52
59313: PPUSH
59314: CALL 18442 0 1
59318: PUSH
59319: FOR_TO
59320: IFFALSE 59482
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59322: LD_VAR 0 2
59326: PPUSH
59327: LD_VAR 0 3
59331: PPUSH
59332: CALL_OW 428
59336: PUSH
59337: LD_EXP 52
59341: PUSH
59342: LD_VAR 0 5
59346: ARRAY
59347: PUSH
59348: LD_INT 2
59350: ARRAY
59351: EQUAL
59352: IFFALSE 59384
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59354: LD_ADDR_EXP 52
59358: PUSH
59359: LD_EXP 52
59363: PPUSH
59364: LD_VAR 0 5
59368: PPUSH
59369: CALL_OW 3
59373: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59374: CALL 59539 0 0
// exit ;
59378: POP
59379: POP
59380: GO 59534
// end else
59382: GO 59480
// if factory = factoryWaypoints [ i ] [ 2 ] then
59384: LD_VAR 0 1
59388: PUSH
59389: LD_EXP 52
59393: PUSH
59394: LD_VAR 0 5
59398: ARRAY
59399: PUSH
59400: LD_INT 2
59402: ARRAY
59403: EQUAL
59404: IFFALSE 59480
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59406: LD_ADDR_EXP 52
59410: PUSH
59411: LD_EXP 52
59415: PPUSH
59416: LD_VAR 0 5
59420: PPUSH
59421: CALL_OW 3
59425: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59426: LD_ADDR_EXP 52
59430: PUSH
59431: LD_EXP 52
59435: PPUSH
59436: LD_VAR 0 1
59440: PPUSH
59441: CALL_OW 255
59445: PUSH
59446: LD_VAR 0 1
59450: PUSH
59451: LD_VAR 0 2
59455: PUSH
59456: LD_VAR 0 3
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: PPUSH
59467: CALL 54051 0 2
59471: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59472: CALL 59539 0 0
// exit ;
59476: POP
59477: POP
59478: GO 59534
// end ; end ;
59480: GO 59319
59482: POP
59483: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59484: LD_ADDR_EXP 52
59488: PUSH
59489: LD_EXP 52
59493: PPUSH
59494: LD_VAR 0 1
59498: PPUSH
59499: CALL_OW 255
59503: PUSH
59504: LD_VAR 0 1
59508: PUSH
59509: LD_VAR 0 2
59513: PUSH
59514: LD_VAR 0 3
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: PPUSH
59525: CALL 54051 0 2
59529: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59530: CALL 59539 0 0
// end ;
59534: LD_VAR 0 4
59538: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59539: LD_INT 0
59541: PPUSH
59542: PPUSH
59543: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59544: LD_STRING resetFactoryWaypoint();
59546: PPUSH
59547: CALL_OW 559
// if factoryWaypoints then
59551: LD_EXP 52
59555: IFFALSE 59676
// begin list := factoryWaypoints ;
59557: LD_ADDR_VAR 0 3
59561: PUSH
59562: LD_EXP 52
59566: ST_TO_ADDR
// for i := 1 to list do
59567: LD_ADDR_VAR 0 2
59571: PUSH
59572: DOUBLE
59573: LD_INT 1
59575: DEC
59576: ST_TO_ADDR
59577: LD_VAR 0 3
59581: PUSH
59582: FOR_TO
59583: IFFALSE 59674
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59585: LD_STRING setFactoryWaypointXY(
59587: PUSH
59588: LD_VAR 0 3
59592: PUSH
59593: LD_VAR 0 2
59597: ARRAY
59598: PUSH
59599: LD_INT 1
59601: ARRAY
59602: STR
59603: PUSH
59604: LD_STRING ,
59606: STR
59607: PUSH
59608: LD_VAR 0 3
59612: PUSH
59613: LD_VAR 0 2
59617: ARRAY
59618: PUSH
59619: LD_INT 2
59621: ARRAY
59622: STR
59623: PUSH
59624: LD_STRING ,
59626: STR
59627: PUSH
59628: LD_VAR 0 3
59632: PUSH
59633: LD_VAR 0 2
59637: ARRAY
59638: PUSH
59639: LD_INT 3
59641: ARRAY
59642: STR
59643: PUSH
59644: LD_STRING ,
59646: STR
59647: PUSH
59648: LD_VAR 0 3
59652: PUSH
59653: LD_VAR 0 2
59657: ARRAY
59658: PUSH
59659: LD_INT 4
59661: ARRAY
59662: STR
59663: PUSH
59664: LD_STRING )
59666: STR
59667: PPUSH
59668: CALL_OW 559
59672: GO 59582
59674: POP
59675: POP
// end ; end ;
59676: LD_VAR 0 1
59680: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59681: LD_INT 0
59683: PPUSH
// if HexInfo ( x , y ) = warehouse then
59684: LD_VAR 0 2
59688: PPUSH
59689: LD_VAR 0 3
59693: PPUSH
59694: CALL_OW 428
59698: PUSH
59699: LD_VAR 0 1
59703: EQUAL
59704: IFFALSE 59731
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59706: LD_ADDR_EXP 53
59710: PUSH
59711: LD_EXP 53
59715: PPUSH
59716: LD_VAR 0 1
59720: PPUSH
59721: LD_INT 0
59723: PPUSH
59724: CALL_OW 1
59728: ST_TO_ADDR
59729: GO 59782
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59731: LD_ADDR_EXP 53
59735: PUSH
59736: LD_EXP 53
59740: PPUSH
59741: LD_VAR 0 1
59745: PPUSH
59746: LD_VAR 0 1
59750: PPUSH
59751: CALL_OW 255
59755: PUSH
59756: LD_VAR 0 1
59760: PUSH
59761: LD_VAR 0 2
59765: PUSH
59766: LD_VAR 0 3
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: PPUSH
59777: CALL_OW 1
59781: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59782: CALL 59791 0 0
// end ;
59786: LD_VAR 0 4
59790: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59791: LD_INT 0
59793: PPUSH
59794: PPUSH
59795: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59796: LD_STRING resetWarehouseGatheringPoints();
59798: PPUSH
59799: CALL_OW 559
// if warehouseGatheringPoints then
59803: LD_EXP 53
59807: IFFALSE 59933
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59809: LD_ADDR_VAR 0 3
59813: PUSH
59814: LD_EXP 53
59818: PPUSH
59819: CALL 57813 0 1
59823: ST_TO_ADDR
// for i := 1 to list do
59824: LD_ADDR_VAR 0 2
59828: PUSH
59829: DOUBLE
59830: LD_INT 1
59832: DEC
59833: ST_TO_ADDR
59834: LD_VAR 0 3
59838: PUSH
59839: FOR_TO
59840: IFFALSE 59931
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59842: LD_STRING setWarehouseGatheringPointXY(
59844: PUSH
59845: LD_VAR 0 3
59849: PUSH
59850: LD_VAR 0 2
59854: ARRAY
59855: PUSH
59856: LD_INT 1
59858: ARRAY
59859: STR
59860: PUSH
59861: LD_STRING ,
59863: STR
59864: PUSH
59865: LD_VAR 0 3
59869: PUSH
59870: LD_VAR 0 2
59874: ARRAY
59875: PUSH
59876: LD_INT 2
59878: ARRAY
59879: STR
59880: PUSH
59881: LD_STRING ,
59883: STR
59884: PUSH
59885: LD_VAR 0 3
59889: PUSH
59890: LD_VAR 0 2
59894: ARRAY
59895: PUSH
59896: LD_INT 3
59898: ARRAY
59899: STR
59900: PUSH
59901: LD_STRING ,
59903: STR
59904: PUSH
59905: LD_VAR 0 3
59909: PUSH
59910: LD_VAR 0 2
59914: ARRAY
59915: PUSH
59916: LD_INT 4
59918: ARRAY
59919: STR
59920: PUSH
59921: LD_STRING )
59923: STR
59924: PPUSH
59925: CALL_OW 559
59929: GO 59839
59931: POP
59932: POP
// end ; end ;
59933: LD_VAR 0 1
59937: RET
