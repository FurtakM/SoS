// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2926 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3241 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 10 10$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 21000
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 51
 852: PUSH
 853: LD_INT 52
 855: PUSH
 856: LD_INT 53
 858: PUSH
 859: LD_INT 54
 861: PUSH
 862: LD_INT 55
 864: PUSH
 865: LD_INT 56
 867: PUSH
 868: LD_INT 57
 870: PUSH
 871: LD_INT 58
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 70
 891: PUSH
 892: LD_INT 71
 894: PUSH
 895: LD_INT 72
 897: PUSH
 898: LD_INT 73
 900: PUSH
 901: LD_INT 68
 903: PUSH
 904: LD_INT 69
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 31
1061: PUSH
1062: LD_INT 49
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 32
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 34
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 31
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 32
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 34
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 33
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 30
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 60
1364: PUSH
1365: LD_INT 61
1367: PUSH
1368: LD_INT 62
1370: PUSH
1371: LD_INT 63
1373: PUSH
1374: LD_INT 64
1376: PUSH
1377: LD_INT 65
1379: PUSH
1380: LD_INT 66
1382: PUSH
1383: LD_INT 67
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 1
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 58611 0 2
1411: PUSH
1412: LD_INT 2
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 58611 0 2
1422: PUSH
1423: LD_INT 3
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 58611 0 2
1433: PUSH
1434: LD_INT 4
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 58611 0 2
1444: PUSH
1445: LD_INT 5
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL 58611 0 2
1455: PUSH
1456: LD_INT 6
1458: PPUSH
1459: LD_INT 5
1461: PPUSH
1462: CALL 58611 0 2
1466: PUSH
1467: LD_INT 7
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL 58611 0 2
1477: PUSH
1478: LD_INT 8
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL 58611 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 18463 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 9
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 58444 0 2
1667: PUSH
1668: LD_INT 10
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 58444 0 2
1680: PUSH
1681: LD_INT 11
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 58444 0 2
1693: PUSH
1694: LD_INT 12
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 58444 0 2
1706: PUSH
1707: LD_INT 13
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 58444 0 2
1719: PUSH
1720: LD_INT 14
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 58444 0 2
1732: PUSH
1733: LD_INT 15
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 58444 0 2
1745: PUSH
1746: LD_INT 16
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 58444 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 17
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 58444 0 2
1810: PUSH
1811: LD_INT 18
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 58444 0 2
1823: PUSH
1824: LD_INT 19
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 58444 0 2
1836: PUSH
1837: LD_INT 20
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 58444 0 2
1849: PUSH
1850: LD_INT 21
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 58444 0 2
1862: PUSH
1863: LD_INT 22
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 58444 0 2
1875: PUSH
1876: LD_INT 23
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 58444 0 2
1888: PUSH
1889: LD_INT 24
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 58444 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 25
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 58611 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 26
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 58611 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 41
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 58611 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 27
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: CALL 58611 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 28
2017: PPUSH
2018: LD_INT 4
2020: PPUSH
2021: CALL 58611 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 42
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL 58611 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 29
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 58611 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 30
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL 58611 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 43
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 58611 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 31
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 58611 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 32
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL 58611 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 44
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 58611 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 33
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL 58611 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 34
2167: PPUSH
2168: LD_INT 2
2170: PPUSH
2171: CALL 58611 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 45
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: CALL 58611 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 35
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL 58611 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 36
2217: PPUSH
2218: LD_INT 4
2220: PPUSH
2221: CALL 58611 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 46
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 58611 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 37
2252: PPUSH
2253: LD_INT 3
2255: PPUSH
2256: CALL 58611 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 38
2267: PPUSH
2268: LD_INT 4
2270: PPUSH
2271: CALL 58611 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 47
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: CALL 58611 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 39
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL 58611 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 40
2317: PPUSH
2318: LD_INT 3
2320: PPUSH
2321: CALL 58611 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 48
2332: PPUSH
2333: LD_INT 4
2335: PPUSH
2336: CALL 58611 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2839
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 70
2569: PUSH
2570: LD_INT 71
2572: PUSH
2573: LD_INT 72
2575: PUSH
2576: LD_INT 73
2578: PUSH
2579: LD_INT 68
2581: PUSH
2582: LD_INT 69
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 51
2600: PUSH
2601: LD_INT 52
2603: PUSH
2604: LD_INT 53
2606: PUSH
2607: LD_INT 54
2609: PUSH
2610: LD_INT 55
2612: PUSH
2613: LD_INT 56
2615: PUSH
2616: LD_INT 57
2618: PUSH
2619: LD_INT 58
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 55433 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// for i in areas do
2745: LD_ADDR_VAR 0 1
2749: PUSH
2750: LD_VAR 0 4
2754: PUSH
2755: FOR_IN
2756: IFFALSE 2795
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2758: LD_VAR 0 1
2762: PPUSH
2763: LD_INT 1
2765: PPUSH
2766: CALL_OW 287
2770: PUSH
2771: LD_INT 20
2773: LESS
2774: IFFALSE 2793
// begin CreateCratesArea ( x , i , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_VAR 0 1
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 55
// end ; end ;
2793: GO 2755
2795: POP
2796: POP
// time := time + delayTime ;
2797: LD_ADDR_VAR 0 5
2801: PUSH
2802: LD_VAR 0 5
2806: PUSH
2807: LD_VAR 0 7
2811: PLUS
2812: ST_TO_ADDR
// if time > maxTime then
2813: LD_VAR 0 5
2817: PUSH
2818: LD_VAR 0 8
2822: GREATER
2823: IFFALSE 2835
// time := normalTime ;
2825: LD_ADDR_VAR 0 5
2829: PUSH
2830: LD_VAR 0 6
2834: ST_TO_ADDR
// until false ;
2835: LD_INT 0
2837: IFFALSE 2703
// end ; end_of_file
2839: PPOPN 8
2841: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: CALL 11056 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2851: LD_VAR 0 1
2855: PPUSH
2856: CALL 7763 0 1
// end ;
2860: PPOPN 1
2862: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL 11073 0 1
// end ;
2872: PPOPN 1
2874: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2875: LD_VAR 0 1
2879: PPUSH
2880: CALL 8366 0 1
2884: PPOPN 1
2886: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: LD_VAR 0 2
2896: PPUSH
2897: CALL 11114 0 2
2901: PPOPN 2
2903: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2904: LD_VAR 0 1
2908: PPUSH
2909: LD_VAR 0 2
2913: PPUSH
2914: LD_VAR 0 3
2918: PPUSH
2919: CALL 8419 0 3
2923: PPOPN 3
2925: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
// disable ( mpActive ) ;
2930: LD_INT 100
2932: DISABLE_MARKED
// disable ( mpWin ) ;
2933: LD_INT 101
2935: DISABLE_MARKED
// disable ( mpLose ) ;
2936: LD_INT 102
2938: DISABLE_MARKED
// mpGameType := 0 ;
2939: LD_ADDR_EXP 1
2943: PUSH
2944: LD_INT 0
2946: ST_TO_ADDR
// mpGameSettings := [ ] ;
2947: LD_ADDR_EXP 4
2951: PUSH
2952: EMPTY
2953: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2954: LD_ADDR_EXP 2
2958: PUSH
2959: EMPTY
2960: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2961: LD_ADDR_EXP 3
2965: PUSH
2966: EMPTY
2967: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2968: LD_ADDR_EXP 27
2972: PUSH
2973: LD_INT 2
2975: PUSH
2976: LD_INT 2
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2983: LD_ADDR_EXP 10
2987: PUSH
2988: EMPTY
2989: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2990: LD_ADDR_EXP 11
2994: PUSH
2995: EMPTY
2996: ST_TO_ADDR
// mpDepots := [ ] ;
2997: LD_ADDR_EXP 12
3001: PUSH
3002: EMPTY
3003: ST_TO_ADDR
// mpBuildings := [ ] ;
3004: LD_ADDR_EXP 15
3008: PUSH
3009: EMPTY
3010: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3011: LD_ADDR_EXP 16
3015: PUSH
3016: EMPTY
3017: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3018: LD_ADDR_EXP 17
3022: PUSH
3023: EMPTY
3024: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3025: LD_ADDR_EXP 18
3029: PUSH
3030: EMPTY
3031: ST_TO_ADDR
// mpStartingResources := [ ] ;
3032: LD_ADDR_EXP 13
3036: PUSH
3037: EMPTY
3038: ST_TO_ADDR
// mpStartPos := [ ] ;
3039: LD_ADDR_EXP 19
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3046: LD_ADDR_EXP 20
3050: PUSH
3051: LD_INT 1
3053: NEG
3054: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3055: LD_ADDR_EXP 21
3059: PUSH
3060: EMPTY
3061: ST_TO_ADDR
// mpApemans := [ ] ;
3062: LD_ADDR_EXP 28
3066: PUSH
3067: EMPTY
3068: ST_TO_ADDR
// mpApemansArea := [ ] ;
3069: LD_ADDR_EXP 29
3073: PUSH
3074: EMPTY
3075: ST_TO_ADDR
// mpRespawn := [ ] ;
3076: LD_ADDR_EXP 30
3080: PUSH
3081: EMPTY
3082: ST_TO_ADDR
// mpKingArea := 0 ;
3083: LD_ADDR_EXP 31
3087: PUSH
3088: LD_INT 0
3090: ST_TO_ADDR
// mpPoints := [ ] ;
3091: LD_ADDR_EXP 32
3095: PUSH
3096: EMPTY
3097: ST_TO_ADDR
// mpVehicles := 0 ;
3098: LD_ADDR_EXP 33
3102: PUSH
3103: LD_INT 0
3105: ST_TO_ADDR
// mpShipments := 0 ;
3106: LD_ADDR_EXP 25
3110: PUSH
3111: LD_INT 0
3113: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3114: LD_ADDR_EXP 37
3118: PUSH
3119: EMPTY
3120: PUSH
3121: EMPTY
3122: PUSH
3123: EMPTY
3124: PUSH
3125: EMPTY
3126: PUSH
3127: EMPTY
3128: PUSH
3129: EMPTY
3130: PUSH
3131: EMPTY
3132: PUSH
3133: EMPTY
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: ST_TO_ADDR
// mpEmissions := 0 ;
3145: LD_ADDR_EXP 34
3149: PUSH
3150: LD_INT 0
3152: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3153: LD_ADDR_EXP 23
3157: PUSH
3158: LD_INT 3
3160: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3161: LD_ADDR_EXP 22
3165: PUSH
3166: LD_INT 15
3168: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3169: LD_ADDR_EXP 35
3173: PUSH
3174: LD_INT 0
3176: ST_TO_ADDR
// mpGameActive := false ;
3177: LD_ADDR_EXP 36
3181: PUSH
3182: LD_INT 0
3184: ST_TO_ADDR
// mpBlockRespThread := false ;
3185: LD_ADDR_EXP 38
3189: PUSH
3190: LD_INT 0
3192: ST_TO_ADDR
// for i := 1 to 32 do
3193: LD_ADDR_VAR 0 2
3197: PUSH
3198: DOUBLE
3199: LD_INT 1
3201: DEC
3202: ST_TO_ADDR
3203: LD_INT 32
3205: PUSH
3206: FOR_TO
3207: IFFALSE 3234
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3209: LD_ADDR_EXP 4
3213: PUSH
3214: LD_EXP 4
3218: PPUSH
3219: LD_VAR 0 2
3223: PPUSH
3224: LD_INT 0
3226: PPUSH
3227: CALL_OW 1
3231: ST_TO_ADDR
3232: GO 3206
3234: POP
3235: POP
// end ;
3236: LD_VAR 0 1
3240: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3241: LD_INT 0
3243: PPUSH
3244: PPUSH
3245: PPUSH
3246: PPUSH
3247: PPUSH
3248: PPUSH
3249: PPUSH
3250: PPUSH
3251: PPUSH
3252: PPUSH
3253: PPUSH
3254: PPUSH
3255: PPUSH
3256: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3257: LD_ADDR_VAR 0 14
3261: PUSH
3262: LD_INT 1
3264: PUSH
3265: LD_INT 2
3267: PUSH
3268: LD_INT 3
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: LIST
3275: ST_TO_ADDR
// for i in gameTypes do
3276: LD_ADDR_VAR 0 2
3280: PUSH
3281: LD_VAR 0 14
3285: PUSH
3286: FOR_IN
3287: IFFALSE 3296
// disable ( i ) ;
3289: LD_VAR 0 2
3293: DISABLE_MARKED
3294: GO 3286
3296: POP
3297: POP
// if Multiplayer then
3298: LD_OWVAR 4
3302: IFFALSE 3486
// begin mpGameType := mp_game_type ;
3304: LD_ADDR_EXP 1
3308: PUSH
3309: LD_OWVAR 6
3313: ST_TO_ADDR
// your_side := mp_player_side ;
3314: LD_ADDR_OWVAR 2
3318: PUSH
3319: LD_OWVAR 7
3323: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3324: LD_ADDR_EXP 5
3328: PUSH
3329: LD_OWVAR 17
3333: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3334: LD_ADDR_EXP 6
3338: PUSH
3339: LD_OWVAR 15
3343: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3344: LD_ADDR_EXP 7
3348: PUSH
3349: LD_OWVAR 16
3353: ST_TO_ADDR
// mpTeams := mp_teams ;
3354: LD_ADDR_EXP 8
3358: PUSH
3359: LD_OWVAR 12
3363: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3364: LD_ADDR_VAR 0 2
3368: PUSH
3369: DOUBLE
3370: LD_INT 1
3372: DEC
3373: ST_TO_ADDR
3374: LD_EXP 2
3378: PPUSH
3379: CALL 18463 0 1
3383: PUSH
3384: FOR_TO
3385: IFFALSE 3461
// begin setting := mpGameSettingsKeys [ i ] ;
3387: LD_ADDR_VAR 0 12
3391: PUSH
3392: LD_EXP 2
3396: PUSH
3397: LD_VAR 0 2
3401: ARRAY
3402: ST_TO_ADDR
// if setting then
3403: LD_VAR 0 12
3407: IFFALSE 3459
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3409: LD_ADDR_EXP 4
3413: PUSH
3414: LD_EXP 4
3418: PPUSH
3419: LD_VAR 0 2
3423: PPUSH
3424: LD_EXP 3
3428: PUSH
3429: LD_VAR 0 2
3433: ARRAY
3434: PUSH
3435: LD_VAR 0 2
3439: PUSH
3440: LD_INT 1
3442: MINUS
3443: PPUSH
3444: CALL_OW 426
3448: PUSH
3449: LD_INT 1
3451: PLUS
3452: ARRAY
3453: PPUSH
3454: CALL_OW 1
3458: ST_TO_ADDR
// end ;
3459: GO 3384
3461: POP
3462: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3463: LD_ADDR_EXP 9
3467: PUSH
3468: LD_EXP 6
3472: PUSH
3473: LD_INT 0
3475: PUSH
3476: EMPTY
3477: LIST
3478: DIFF
3479: PUSH
3480: LD_INT 1
3482: GREATER
3483: ST_TO_ADDR
// end else
3484: GO 3486
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3486: LD_EXP 1
3490: PPUSH
3491: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
3495: LD_EXP 16
3499: PPUSH
3500: CALL 18463 0 1
3504: IFFALSE 3535
// begin for i in mpMarkedAreas do
3506: LD_ADDR_VAR 0 2
3510: PUSH
3511: LD_EXP 16
3515: PUSH
3516: FOR_IN
3517: IFFALSE 3533
// SetAreaMapShow ( i , 0 ) ;
3519: LD_VAR 0 2
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: CALL_OW 424
3531: GO 3516
3533: POP
3534: POP
// end ; for i := 1 to 8 do
3535: LD_ADDR_VAR 0 2
3539: PUSH
3540: DOUBLE
3541: LD_INT 1
3543: DEC
3544: ST_TO_ADDR
3545: LD_INT 8
3547: PUSH
3548: FOR_TO
3549: IFFALSE 4765
// begin if not mpSidePositions [ i ] then
3551: LD_EXP 5
3555: PUSH
3556: LD_VAR 0 2
3560: ARRAY
3561: NOT
3562: IFFALSE 3566
// continue ;
3564: GO 3548
// side := i ;
3566: LD_ADDR_VAR 0 7
3570: PUSH
3571: LD_VAR 0 2
3575: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3576: LD_ADDR_VAR 0 9
3580: PUSH
3581: LD_EXP 7
3585: PUSH
3586: LD_VAR 0 2
3590: ARRAY
3591: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3592: LD_ADDR_VAR 0 8
3596: PUSH
3597: LD_EXP 5
3601: PUSH
3602: LD_VAR 0 2
3606: ARRAY
3607: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3608: LD_EXP 10
3612: PPUSH
3613: CALL 18463 0 1
3617: IFFALSE 3694
// begin for j in mpOilDeposits [ pos ] do
3619: LD_ADDR_VAR 0 3
3623: PUSH
3624: LD_EXP 10
3628: PUSH
3629: LD_VAR 0 8
3633: ARRAY
3634: PUSH
3635: FOR_IN
3636: IFFALSE 3692
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3638: LD_VAR 0 3
3642: PUSH
3643: LD_INT 1
3645: ARRAY
3646: PPUSH
3647: LD_VAR 0 3
3651: PUSH
3652: LD_INT 2
3654: ARRAY
3655: PPUSH
3656: LD_INT 2
3658: PPUSH
3659: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3663: LD_VAR 0 3
3667: PUSH
3668: LD_INT 1
3670: ARRAY
3671: PPUSH
3672: LD_VAR 0 3
3676: PUSH
3677: LD_INT 2
3679: ARRAY
3680: PPUSH
3681: LD_VAR 0 7
3685: PPUSH
3686: CALL_OW 441
// end ;
3690: GO 3635
3692: POP
3693: POP
// end ; if Count ( mpSibDeposits ) then
3694: LD_EXP 11
3698: PPUSH
3699: CALL 18463 0 1
3703: IFFALSE 3780
// begin for j in mpSibDeposits [ pos ] do
3705: LD_ADDR_VAR 0 3
3709: PUSH
3710: LD_EXP 11
3714: PUSH
3715: LD_VAR 0 8
3719: ARRAY
3720: PUSH
3721: FOR_IN
3722: IFFALSE 3778
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3724: LD_VAR 0 3
3728: PUSH
3729: LD_INT 1
3731: ARRAY
3732: PPUSH
3733: LD_VAR 0 3
3737: PUSH
3738: LD_INT 2
3740: ARRAY
3741: PPUSH
3742: LD_INT 3
3744: PPUSH
3745: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3749: LD_VAR 0 3
3753: PUSH
3754: LD_INT 1
3756: ARRAY
3757: PPUSH
3758: LD_VAR 0 3
3762: PUSH
3763: LD_INT 2
3765: ARRAY
3766: PPUSH
3767: LD_VAR 0 7
3771: PPUSH
3772: CALL_OW 441
// end ;
3776: GO 3721
3778: POP
3779: POP
// end ; InitBc ;
3780: CALL_OW 21
// InitUc ;
3784: CALL_OW 18
// uc_side := side ;
3788: LD_ADDR_OWVAR 20
3792: PUSH
3793: LD_VAR 0 7
3797: ST_TO_ADDR
// uc_nation := nation ;
3798: LD_ADDR_OWVAR 21
3802: PUSH
3803: LD_VAR 0 9
3807: ST_TO_ADDR
// if Count ( mpDepots ) then
3808: LD_EXP 12
3812: PPUSH
3813: CALL 18463 0 1
3817: IFFALSE 3987
// begin bc_level := 0 ;
3819: LD_ADDR_OWVAR 43
3823: PUSH
3824: LD_INT 0
3826: ST_TO_ADDR
// bc_type := b_depot ;
3827: LD_ADDR_OWVAR 42
3831: PUSH
3832: LD_INT 0
3834: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3835: LD_ADDR_VAR 0 4
3839: PUSH
3840: LD_EXP 12
3844: PUSH
3845: LD_VAR 0 8
3849: ARRAY
3850: PUSH
3851: LD_INT 1
3853: ARRAY
3854: PPUSH
3855: LD_EXP 12
3859: PUSH
3860: LD_VAR 0 8
3864: ARRAY
3865: PUSH
3866: LD_INT 2
3868: ARRAY
3869: PPUSH
3870: LD_EXP 12
3874: PUSH
3875: LD_VAR 0 8
3879: ARRAY
3880: PUSH
3881: LD_INT 3
3883: ARRAY
3884: PPUSH
3885: CALL_OW 47
3889: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3890: LD_VAR 0 4
3894: PPUSH
3895: LD_STRING @
3897: PUSH
3898: LD_VAR 0 7
3902: STR
3903: PPUSH
3904: CALL_OW 500
// SetTag ( b , side ) ;
3908: LD_VAR 0 4
3912: PPUSH
3913: LD_VAR 0 7
3917: PPUSH
3918: CALL_OW 109
// if Count ( mpStartingResources ) then
3922: LD_EXP 13
3926: PPUSH
3927: CALL 18463 0 1
3931: IFFALSE 3985
// begin for j := 1 to mpStartingResources do
3933: LD_ADDR_VAR 0 3
3937: PUSH
3938: DOUBLE
3939: LD_INT 1
3941: DEC
3942: ST_TO_ADDR
3943: LD_EXP 13
3947: PUSH
3948: FOR_TO
3949: IFFALSE 3983
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3951: LD_VAR 0 4
3955: PPUSH
3956: CALL_OW 274
3960: PPUSH
3961: LD_VAR 0 3
3965: PPUSH
3966: LD_EXP 13
3970: PUSH
3971: LD_VAR 0 3
3975: ARRAY
3976: PPUSH
3977: CALL_OW 277
3981: GO 3948
3983: POP
3984: POP
// end ; end else
3985: GO 4134
// if Count ( mpStartingResources ) then
3987: LD_EXP 13
3991: PPUSH
3992: CALL 18463 0 1
3996: IFFALSE 4134
// begin for j := 1 to mpStartingResources do
3998: LD_ADDR_VAR 0 3
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_EXP 13
4012: PUSH
4013: FOR_TO
4014: IFFALSE 4132
// begin resources := mpStartingResources [ j ] ;
4016: LD_ADDR_VAR 0 13
4020: PUSH
4021: LD_EXP 13
4025: PUSH
4026: LD_VAR 0 3
4030: ARRAY
4031: ST_TO_ADDR
// repeat if resources >= 50 then
4032: LD_VAR 0 13
4036: PUSH
4037: LD_INT 50
4039: GREATEREQUAL
4040: IFFALSE 4086
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
4042: LD_VAR 0 3
4046: PPUSH
4047: LD_INT 5
4049: PPUSH
4050: LD_VAR 0 5
4054: PPUSH
4055: LD_VAR 0 6
4059: PPUSH
4060: LD_INT 4
4062: PPUSH
4063: LD_INT 0
4065: PPUSH
4066: CALL_OW 60
// resources := resources - 50 ;
4070: LD_ADDR_VAR 0 13
4074: PUSH
4075: LD_VAR 0 13
4079: PUSH
4080: LD_INT 50
4082: MINUS
4083: ST_TO_ADDR
// end else
4084: GO 4120
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
4086: LD_VAR 0 3
4090: PPUSH
4091: LD_VAR 0 13
4095: PUSH
4096: LD_INT 10
4098: DIV
4099: PPUSH
4100: LD_VAR 0 5
4104: PPUSH
4105: LD_VAR 0 6
4109: PPUSH
4110: LD_INT 4
4112: PPUSH
4113: LD_INT 0
4115: PPUSH
4116: CALL_OW 60
// until resources <= 0 ;
4120: LD_VAR 0 13
4124: PUSH
4125: LD_INT 0
4127: LESSEQUAL
4128: IFFALSE 4032
// end ;
4130: GO 4013
4132: POP
4133: POP
// end ; if Count ( mpBuildings ) then
4134: LD_EXP 15
4138: PPUSH
4139: CALL 18463 0 1
4143: IFFALSE 4221
// begin for j in mpBuildings [ pos ] do
4145: LD_ADDR_VAR 0 3
4149: PUSH
4150: LD_EXP 15
4154: PUSH
4155: LD_VAR 0 8
4159: ARRAY
4160: PUSH
4161: FOR_IN
4162: IFFALSE 4219
// begin bc_level := 0 ;
4164: LD_ADDR_OWVAR 43
4168: PUSH
4169: LD_INT 0
4171: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4172: LD_ADDR_OWVAR 42
4176: PUSH
4177: LD_VAR 0 3
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4186: LD_VAR 0 3
4190: PUSH
4191: LD_INT 2
4193: ARRAY
4194: PPUSH
4195: LD_VAR 0 3
4199: PUSH
4200: LD_INT 3
4202: ARRAY
4203: PPUSH
4204: LD_VAR 0 3
4208: PUSH
4209: LD_INT 4
4211: ARRAY
4212: PPUSH
4213: CALL_OW 47
// end ;
4217: GO 4161
4219: POP
4220: POP
// end ; if mpBattleFlag > - 1 then
4221: LD_EXP 20
4225: PUSH
4226: LD_INT 1
4228: NEG
4229: GREATER
4230: IFFALSE 4389
// begin x := mpStartPos [ pos ] [ 1 ] ;
4232: LD_ADDR_VAR 0 5
4236: PUSH
4237: LD_EXP 19
4241: PUSH
4242: LD_VAR 0 8
4246: ARRAY
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4252: LD_ADDR_VAR 0 6
4256: PUSH
4257: LD_EXP 19
4261: PUSH
4262: LD_VAR 0 8
4266: ARRAY
4267: PUSH
4268: LD_INT 2
4270: ARRAY
4271: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4272: LD_VAR 0 5
4276: PPUSH
4277: LD_VAR 0 6
4281: PPUSH
4282: LD_INT 12
4284: PPUSH
4285: LD_INT 2
4287: PPUSH
4288: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4292: LD_ADDR_EXP 21
4296: PUSH
4297: LD_EXP 21
4301: PPUSH
4302: LD_VAR 0 7
4306: PPUSH
4307: LD_VAR 0 7
4311: PPUSH
4312: LD_VAR 0 5
4316: PPUSH
4317: LD_VAR 0 6
4321: PPUSH
4322: LD_INT 1
4324: PUSH
4325: LD_INT 100
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: LD_INT 2
4334: PUSH
4335: LD_INT 70
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PUSH
4342: LD_INT 3
4344: PUSH
4345: LD_INT 40
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: PUSH
4352: LD_INT 10
4354: PUSH
4355: LD_INT 25
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: PUSH
4362: LD_INT 20
4364: PUSH
4365: LD_INT 100
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 418
4383: PPUSH
4384: CALL_OW 1
4388: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4389: LD_EXP 24
4393: PUSH
4394: LD_INT 20
4396: PPUSH
4397: LD_VAR 0 7
4401: PPUSH
4402: CALL_OW 321
4406: PUSH
4407: LD_INT 1
4409: EQUAL
4410: AND
4411: IFFALSE 4428
// SetTech ( tech_SibDet , side , state_researched ) ;
4413: LD_INT 20
4415: PPUSH
4416: LD_VAR 0 7
4420: PPUSH
4421: LD_INT 2
4423: PPUSH
4424: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4428: LD_INT 24
4430: PPUSH
4431: LD_VAR 0 7
4435: PPUSH
4436: LD_INT 0
4438: PPUSH
4439: CALL_OW 322
// if mpSibBomb = 1 then
4443: LD_EXP 26
4447: PUSH
4448: LD_INT 1
4450: EQUAL
4451: IFFALSE 4470
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4453: LD_INT 25
4455: PPUSH
4456: LD_VAR 0 7
4460: PPUSH
4461: LD_INT 1
4463: PPUSH
4464: CALL_OW 322
// end else
4468: GO 4485
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4470: LD_INT 25
4472: PPUSH
4473: LD_VAR 0 7
4477: PPUSH
4478: LD_INT 0
4480: PPUSH
4481: CALL_OW 322
// end ; if mpVehicles then
4485: LD_EXP 33
4489: IFFALSE 4588
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_VAR 0 7
4500: PPUSH
4501: LD_VAR 0 9
4505: PPUSH
4506: LD_EXP 33
4510: PPUSH
4511: CALL 5675 0 3
4515: PUSH
4516: FOR_IN
4517: IFFALSE 4586
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4519: LD_VAR 0 3
4523: PPUSH
4524: LD_INT 0
4526: PPUSH
4527: LD_INT 5
4529: PPUSH
4530: CALL_OW 12
4534: PPUSH
4535: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_EXP 19
4548: PUSH
4549: LD_VAR 0 8
4553: ARRAY
4554: PUSH
4555: LD_INT 1
4557: ARRAY
4558: PPUSH
4559: LD_EXP 19
4563: PUSH
4564: LD_VAR 0 8
4568: ARRAY
4569: PUSH
4570: LD_INT 2
4572: ARRAY
4573: PPUSH
4574: LD_INT 12
4576: PPUSH
4577: LD_INT 0
4579: PPUSH
4580: CALL_OW 50
// end ;
4584: GO 4516
4586: POP
4587: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4588: LD_ADDR_VAR 0 11
4592: PUSH
4593: LD_VAR 0 7
4597: PPUSH
4598: LD_VAR 0 9
4602: PPUSH
4603: LD_EXP 22
4607: PPUSH
4608: LD_EXP 23
4612: PPUSH
4613: CALL 5177 0 4
4617: ST_TO_ADDR
// for j in team do
4618: LD_ADDR_VAR 0 3
4622: PUSH
4623: LD_VAR 0 11
4627: PUSH
4628: FOR_IN
4629: IFFALSE 4678
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4631: LD_VAR 0 3
4635: PPUSH
4636: LD_EXP 19
4640: PUSH
4641: LD_VAR 0 8
4645: ARRAY
4646: PUSH
4647: LD_INT 1
4649: ARRAY
4650: PPUSH
4651: LD_EXP 19
4655: PUSH
4656: LD_VAR 0 8
4660: ARRAY
4661: PUSH
4662: LD_INT 2
4664: ARRAY
4665: PPUSH
4666: LD_INT 12
4668: PPUSH
4669: LD_INT 0
4671: PPUSH
4672: CALL_OW 50
4676: GO 4628
4678: POP
4679: POP
// if mpApemans then
4680: LD_EXP 28
4684: IFFALSE 4763
// begin for j := 1 to mpApemans do
4686: LD_ADDR_VAR 0 3
4690: PUSH
4691: DOUBLE
4692: LD_INT 1
4694: DEC
4695: ST_TO_ADDR
4696: LD_EXP 28
4700: PUSH
4701: FOR_TO
4702: IFFALSE 4761
// begin PrepareApeman ( - 5 ) ;
4704: LD_INT 5
4706: NEG
4707: PPUSH
4708: CALL 50320 0 1
// ape := CreateHuman ;
4712: LD_ADDR_VAR 0 10
4716: PUSH
4717: CALL_OW 44
4721: ST_TO_ADDR
// SetTag ( ape , side ) ;
4722: LD_VAR 0 10
4726: PPUSH
4727: LD_VAR 0 7
4731: PPUSH
4732: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4736: LD_VAR 0 10
4740: PPUSH
4741: LD_EXP 29
4745: PUSH
4746: LD_VAR 0 8
4750: ARRAY
4751: PPUSH
4752: LD_INT 0
4754: PPUSH
4755: CALL_OW 49
// end ;
4759: GO 4701
4761: POP
4762: POP
// end ; end ;
4763: GO 3548
4765: POP
4766: POP
// if not mpTeamGame then
4767: LD_EXP 9
4771: NOT
4772: IFFALSE 4870
// begin for i := 1 to 8 do
4774: LD_ADDR_VAR 0 2
4778: PUSH
4779: DOUBLE
4780: LD_INT 1
4782: DEC
4783: ST_TO_ADDR
4784: LD_INT 8
4786: PUSH
4787: FOR_TO
4788: IFFALSE 4866
// for j := 1 to 8 do
4790: LD_ADDR_VAR 0 3
4794: PUSH
4795: DOUBLE
4796: LD_INT 1
4798: DEC
4799: ST_TO_ADDR
4800: LD_INT 8
4802: PUSH
4803: FOR_TO
4804: IFFALSE 4862
// if i <> j then
4806: LD_VAR 0 2
4810: PUSH
4811: LD_VAR 0 3
4815: NONEQUAL
4816: IFFALSE 4840
// SetAttitude ( i , j , att_neutral , true ) else
4818: LD_VAR 0 2
4822: PPUSH
4823: LD_VAR 0 3
4827: PPUSH
4828: LD_INT 0
4830: PPUSH
4831: LD_INT 1
4833: PPUSH
4834: CALL_OW 80
4838: GO 4860
// SetAttitude ( i , j , att_friend , true ) ;
4840: LD_VAR 0 2
4844: PPUSH
4845: LD_VAR 0 3
4849: PPUSH
4850: LD_INT 1
4852: PPUSH
4853: LD_INT 1
4855: PPUSH
4856: CALL_OW 80
4860: GO 4803
4862: POP
4863: POP
4864: GO 4787
4866: POP
4867: POP
// end else
4868: GO 5045
// begin if mpSharedVision then
4870: LD_EXP 14
4874: IFFALSE 4939
// begin for i in mpTeams do
4876: LD_ADDR_VAR 0 2
4880: PUSH
4881: LD_EXP 8
4885: PUSH
4886: FOR_IN
4887: IFFALSE 4937
// for j := 2 to i do
4889: LD_ADDR_VAR 0 3
4893: PUSH
4894: DOUBLE
4895: LD_INT 2
4897: DEC
4898: ST_TO_ADDR
4899: LD_VAR 0 2
4903: PUSH
4904: FOR_TO
4905: IFFALSE 4933
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4907: LD_VAR 0 2
4911: PUSH
4912: LD_VAR 0 3
4916: ARRAY
4917: PPUSH
4918: LD_VAR 0 2
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: CALL_OW 343
4931: GO 4904
4933: POP
4934: POP
4935: GO 4886
4937: POP
4938: POP
// end ; for i := 1 to 8 do
4939: LD_ADDR_VAR 0 2
4943: PUSH
4944: DOUBLE
4945: LD_INT 1
4947: DEC
4948: ST_TO_ADDR
4949: LD_INT 8
4951: PUSH
4952: FOR_TO
4953: IFFALSE 5043
// for j := 1 to 8 do
4955: LD_ADDR_VAR 0 3
4959: PUSH
4960: DOUBLE
4961: LD_INT 1
4963: DEC
4964: ST_TO_ADDR
4965: LD_INT 8
4967: PUSH
4968: FOR_TO
4969: IFFALSE 5039
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4971: LD_EXP 6
4975: PUSH
4976: LD_VAR 0 2
4980: ARRAY
4981: PUSH
4982: LD_EXP 6
4986: PUSH
4987: LD_VAR 0 3
4991: ARRAY
4992: EQUAL
4993: IFFALSE 5017
// SetAttitude ( i , j , att_friend , true ) else
4995: LD_VAR 0 2
4999: PPUSH
5000: LD_VAR 0 3
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: LD_INT 1
5010: PPUSH
5011: CALL_OW 80
5015: GO 5037
// SetAttitude ( i , j , att_enemy , true ) ;
5017: LD_VAR 0 2
5021: PPUSH
5022: LD_VAR 0 3
5026: PPUSH
5027: LD_INT 2
5029: PPUSH
5030: LD_INT 1
5032: PPUSH
5033: CALL_OW 80
5037: GO 4968
5039: POP
5040: POP
5041: GO 4952
5043: POP
5044: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5045: LD_ADDR_OWVAR 71
5049: PUSH
5050: LD_EXP 7
5054: PUSH
5055: LD_OWVAR 2
5059: ARRAY
5060: ST_TO_ADDR
// if IAmSpec then
5061: CALL_OW 531
5065: IFFALSE 5106
// begin FogOff ( true ) ;
5067: LD_INT 1
5069: PPUSH
5070: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5074: LD_EXP 27
5078: PUSH
5079: LD_INT 1
5081: ARRAY
5082: PUSH
5083: LD_INT 2
5085: DIV
5086: PPUSH
5087: LD_EXP 27
5091: PUSH
5092: LD_INT 2
5094: ARRAY
5095: PUSH
5096: LD_INT 2
5098: DIV
5099: PPUSH
5100: CALL_OW 86
// end else
5104: GO 5152
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5106: LD_EXP 19
5110: PUSH
5111: LD_EXP 5
5115: PUSH
5116: LD_OWVAR 2
5120: ARRAY
5121: ARRAY
5122: PUSH
5123: LD_INT 1
5125: ARRAY
5126: PPUSH
5127: LD_EXP 19
5131: PUSH
5132: LD_EXP 5
5136: PUSH
5137: LD_OWVAR 2
5141: ARRAY
5142: ARRAY
5143: PUSH
5144: LD_INT 2
5146: ARRAY
5147: PPUSH
5148: CALL_OW 86
// end ; BeginBuildUp ;
5152: CALL 6153 0 0
// enable ( mpActive ) ;
5156: LD_INT 100
5158: ENABLE_MARKED
// enable ( mpGameType ) ;
5159: LD_EXP 1
5163: ENABLE_MARKED
// mpGameActive := true ;
5164: LD_ADDR_EXP 36
5168: PUSH
5169: LD_INT 1
5171: ST_TO_ADDR
// end ;
5172: LD_VAR 0 1
5176: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5177: LD_INT 0
5179: PPUSH
5180: PPUSH
5181: PPUSH
5182: PPUSH
// result := [ ] ;
5183: LD_ADDR_VAR 0 5
5187: PUSH
5188: EMPTY
5189: ST_TO_ADDR
// class := class_soldier ;
5190: LD_ADDR_VAR 0 8
5194: PUSH
5195: LD_INT 1
5197: ST_TO_ADDR
// uc_side := side ;
5198: LD_ADDR_OWVAR 20
5202: PUSH
5203: LD_VAR 0 1
5207: ST_TO_ADDR
// uc_nation := nation ;
5208: LD_ADDR_OWVAR 21
5212: PUSH
5213: LD_VAR 0 2
5217: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5218: LD_ADDR_OWVAR 26
5222: PUSH
5223: LD_OWVAR 19
5227: PUSH
5228: LD_VAR 0 1
5232: ARRAY
5233: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5234: LD_INT 1
5236: PPUSH
5237: LD_INT 2
5239: PPUSH
5240: CALL_OW 12
5244: PPUSH
5245: LD_VAR 0 8
5249: PPUSH
5250: LD_VAR 0 4
5254: PUSH
5255: LD_INT 2
5257: PLUS
5258: PPUSH
5259: CALL_OW 380
// hc_importance := 105 ;
5263: LD_ADDR_OWVAR 32
5267: PUSH
5268: LD_INT 105
5270: ST_TO_ADDR
// if Multiplayer then
5271: LD_OWVAR 4
5275: IFFALSE 5315
// begin hc_gallery := MULTIAVATARS ;
5277: LD_ADDR_OWVAR 33
5281: PUSH
5282: LD_STRING MULTIAVATARS
5284: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5285: LD_ADDR_OWVAR 34
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 525
5299: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5300: LD_ADDR_OWVAR 27
5304: PUSH
5305: LD_VAR 0 1
5309: PPUSH
5310: CALL_OW 526
5314: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5315: LD_ADDR_VAR 0 5
5319: PUSH
5320: LD_VAR 0 5
5324: PPUSH
5325: CALL_OW 44
5329: PPUSH
5330: CALL 54072 0 2
5334: ST_TO_ADDR
// if mpTeamPreset then
5335: LD_LOC 1
5339: IFFALSE 5435
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5341: LD_LOC 1
5345: PUSH
5346: LD_INT 1
5348: ARRAY
5349: PPUSH
5350: LD_VAR 0 5
5354: PUSH
5355: LD_VAR 0 5
5359: ARRAY
5360: PPUSH
5361: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5365: LD_VAR 0 5
5369: PUSH
5370: LD_VAR 0 5
5374: ARRAY
5375: PPUSH
5376: LD_INT 1
5378: PPUSH
5379: LD_LOC 1
5383: PUSH
5384: LD_INT 1
5386: ARRAY
5387: PPUSH
5388: LD_INT 1
5390: PPUSH
5391: CALL_OW 260
5395: PPUSH
5396: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5400: LD_VAR 0 5
5404: PUSH
5405: LD_VAR 0 5
5409: ARRAY
5410: PPUSH
5411: LD_INT 2
5413: PPUSH
5414: LD_LOC 1
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PPUSH
5423: LD_INT 2
5425: PPUSH
5426: CALL_OW 260
5430: PPUSH
5431: CALL_OW 239
// end ; InitHc_All ( ) ;
5435: CALL_OW 584
// class := 2 ;
5439: LD_ADDR_VAR 0 8
5443: PUSH
5444: LD_INT 2
5446: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5447: LD_ADDR_VAR 0 6
5451: PUSH
5452: DOUBLE
5453: LD_INT 1
5455: DEC
5456: ST_TO_ADDR
5457: LD_VAR 0 3
5461: PUSH
5462: LD_INT 1
5464: MINUS
5465: PUSH
5466: FOR_TO
5467: IFFALSE 5651
// begin PrepareHuman ( false , class , skill ) ;
5469: LD_INT 0
5471: PPUSH
5472: LD_VAR 0 8
5476: PPUSH
5477: LD_VAR 0 4
5481: PPUSH
5482: CALL_OW 380
// un := CreateHuman ;
5486: LD_ADDR_VAR 0 7
5490: PUSH
5491: CALL_OW 44
5495: ST_TO_ADDR
// result := Join ( result , un ) ;
5496: LD_ADDR_VAR 0 5
5500: PUSH
5501: LD_VAR 0 5
5505: PPUSH
5506: LD_VAR 0 7
5510: PPUSH
5511: CALL 54072 0 2
5515: ST_TO_ADDR
// if mpTeamPreset then
5516: LD_LOC 1
5520: IFFALSE 5616
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5522: LD_LOC 1
5526: PUSH
5527: LD_VAR 0 6
5531: PUSH
5532: LD_INT 1
5534: PLUS
5535: ARRAY
5536: PPUSH
5537: LD_VAR 0 7
5541: PPUSH
5542: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5546: LD_VAR 0 7
5550: PPUSH
5551: LD_INT 1
5553: PPUSH
5554: LD_LOC 1
5558: PUSH
5559: LD_VAR 0 6
5563: PUSH
5564: LD_INT 1
5566: PLUS
5567: ARRAY
5568: PPUSH
5569: LD_INT 1
5571: PPUSH
5572: CALL_OW 260
5576: PPUSH
5577: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5581: LD_VAR 0 7
5585: PPUSH
5586: LD_INT 2
5588: PPUSH
5589: LD_LOC 1
5593: PUSH
5594: LD_VAR 0 6
5598: PUSH
5599: LD_INT 1
5601: PLUS
5602: ARRAY
5603: PPUSH
5604: LD_INT 2
5606: PPUSH
5607: CALL_OW 260
5611: PPUSH
5612: CALL_OW 239
// end ; class := Inc ( class ) ;
5616: LD_ADDR_VAR 0 8
5620: PUSH
5621: LD_VAR 0 8
5625: PPUSH
5626: CALL 55433 0 1
5630: ST_TO_ADDR
// if class = 5 then
5631: LD_VAR 0 8
5635: PUSH
5636: LD_INT 5
5638: EQUAL
5639: IFFALSE 5649
// class := 1 ;
5641: LD_ADDR_VAR 0 8
5645: PUSH
5646: LD_INT 1
5648: ST_TO_ADDR
// end ;
5649: GO 5466
5651: POP
5652: POP
// if not mpTeamPreset then
5653: LD_LOC 1
5657: NOT
5658: IFFALSE 5670
// mpTeamPreset := result ;
5660: LD_ADDR_LOC 1
5664: PUSH
5665: LD_VAR 0 5
5669: ST_TO_ADDR
// end ;
5670: LD_VAR 0 5
5674: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5675: LD_INT 0
5677: PPUSH
5678: PPUSH
// result := [ ] ;
5679: LD_ADDR_VAR 0 4
5683: PUSH
5684: EMPTY
5685: ST_TO_ADDR
// if not vehicles then
5686: LD_VAR 0 3
5690: NOT
5691: IFFALSE 5695
// exit ;
5693: GO 5854
// for i := 1 to vehicles [ nation ] do
5695: LD_ADDR_VAR 0 5
5699: PUSH
5700: DOUBLE
5701: LD_INT 1
5703: DEC
5704: ST_TO_ADDR
5705: LD_VAR 0 3
5709: PUSH
5710: LD_VAR 0 2
5714: ARRAY
5715: PUSH
5716: FOR_TO
5717: IFFALSE 5852
// begin uc_side := side ;
5719: LD_ADDR_OWVAR 20
5723: PUSH
5724: LD_VAR 0 1
5728: ST_TO_ADDR
// uc_nation := nation ;
5729: LD_ADDR_OWVAR 21
5733: PUSH
5734: LD_VAR 0 2
5738: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5739: LD_VAR 0 3
5743: PUSH
5744: LD_VAR 0 2
5748: ARRAY
5749: PUSH
5750: LD_VAR 0 5
5754: ARRAY
5755: PUSH
5756: LD_INT 1
5758: ARRAY
5759: PPUSH
5760: LD_VAR 0 3
5764: PUSH
5765: LD_VAR 0 2
5769: ARRAY
5770: PUSH
5771: LD_VAR 0 5
5775: ARRAY
5776: PUSH
5777: LD_INT 2
5779: ARRAY
5780: PPUSH
5781: LD_VAR 0 3
5785: PUSH
5786: LD_VAR 0 2
5790: ARRAY
5791: PUSH
5792: LD_VAR 0 5
5796: ARRAY
5797: PUSH
5798: LD_INT 3
5800: ARRAY
5801: PPUSH
5802: LD_VAR 0 3
5806: PUSH
5807: LD_VAR 0 2
5811: ARRAY
5812: PUSH
5813: LD_VAR 0 5
5817: ARRAY
5818: PUSH
5819: LD_INT 4
5821: ARRAY
5822: PPUSH
5823: LD_INT 80
5825: PPUSH
5826: CALL 21201 0 5
// result := Join ( result , CreateVehicle ) ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: LD_VAR 0 4
5839: PPUSH
5840: CALL_OW 45
5844: PPUSH
5845: CALL 54072 0 2
5849: ST_TO_ADDR
// end ;
5850: GO 5716
5852: POP
5853: POP
// end ;
5854: LD_VAR 0 4
5858: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5859: LD_INT 0
5861: PPUSH
5862: PPUSH
// for i in mpBattleFlags do
5863: LD_ADDR_VAR 0 3
5867: PUSH
5868: LD_EXP 21
5872: PUSH
5873: FOR_IN
5874: IFFALSE 5951
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5876: LD_VAR 0 3
5880: PPUSH
5881: LD_INT 1
5883: PUSH
5884: LD_VAR 0 1
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PUSH
5893: LD_INT 2
5895: PUSH
5896: LD_VAR 0 1
5900: PUSH
5901: LD_REAL  7.00000000000000E-0001
5904: MUL
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 3
5912: PUSH
5913: LD_VAR 0 1
5917: PUSH
5918: LD_REAL  4.00000000000000E-0001
5921: MUL
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 20
5929: PUSH
5930: LD_VAR 0 1
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: PPUSH
5945: CALL_OW 423
5949: GO 5873
5951: POP
5952: POP
// end ;
5953: LD_VAR 0 2
5957: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5958: LD_INT 100
5960: IFFALSE 6055
5962: GO 5964
5964: DISABLE
5965: LD_INT 0
5967: PPUSH
5968: PPUSH
// begin if mpBattleFlag <= 0 then
5969: LD_EXP 20
5973: PUSH
5974: LD_INT 0
5976: LESSEQUAL
5977: IFFALSE 5981
// exit ;
5979: GO 6055
// strength := 100 ;
5981: LD_ADDR_VAR 0 2
5985: PUSH
5986: LD_INT 100
5988: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5989: LD_EXP 20
5993: PPUSH
5994: CALL_OW 67
// strength := Dec ( strength ) ;
5998: LD_ADDR_VAR 0 2
6002: PUSH
6003: LD_VAR 0 2
6007: PPUSH
6008: CALL 55455 0 1
6012: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6013: LD_VAR 0 2
6017: PPUSH
6018: CALL 5859 0 1
// until not strength ;
6022: LD_VAR 0 2
6026: NOT
6027: IFFALSE 5989
// for i in mpBattleFlags do
6029: LD_ADDR_VAR 0 1
6033: PUSH
6034: LD_EXP 21
6038: PUSH
6039: FOR_IN
6040: IFFALSE 6053
// KillBattleFlag ( i ) ;
6042: LD_VAR 0 1
6046: PPUSH
6047: CALL_OW 419
6051: GO 6039
6053: POP
6054: POP
// end ;
6055: PPOPN 2
6057: END
// every 0 0$1 marked mpActive do var side , tmp ;
6058: GO 6060
6060: DISABLE
6061: LD_INT 0
6063: PPUSH
6064: PPUSH
// begin if mpSibBomb <= 1 then
6065: LD_EXP 26
6069: PUSH
6070: LD_INT 1
6072: LESSEQUAL
6073: IFFALSE 6077
// exit ;
6075: GO 6150
// tmp := mpSibBomb ;
6077: LD_ADDR_VAR 0 2
6081: PUSH
6082: LD_EXP 26
6086: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6087: LD_INT 35
6089: PPUSH
6090: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_VAR 0 2
6103: PUSH
6104: LD_INT 35
6106: MINUS
6107: ST_TO_ADDR
// until not tmp ;
6108: LD_VAR 0 2
6112: NOT
6113: IFFALSE 6087
// for side := 1 to 8 do
6115: LD_ADDR_VAR 0 1
6119: PUSH
6120: DOUBLE
6121: LD_INT 1
6123: DEC
6124: ST_TO_ADDR
6125: LD_INT 8
6127: PUSH
6128: FOR_TO
6129: IFFALSE 6148
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6131: LD_INT 25
6133: PPUSH
6134: LD_VAR 0 1
6138: PPUSH
6139: LD_INT 1
6141: PPUSH
6142: CALL_OW 322
6146: GO 6128
6148: POP
6149: POP
// end ;
6150: PPOPN 2
6152: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6153: LD_INT 0
6155: PPUSH
6156: PPUSH
6157: PPUSH
// mpBuildUpTimeDelay := 0 ;
6158: LD_ADDR_EXP 39
6162: PUSH
6163: LD_INT 0
6165: ST_TO_ADDR
// if not mpBuildUpTime then
6166: LD_EXP 18
6170: NOT
6171: IFFALSE 6175
// exit ;
6173: GO 6358
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6175: LD_ADDR_EXP 39
6179: PUSH
6180: LD_INT 8400
6182: PUSH
6183: LD_INT 2100
6185: PUSH
6186: LD_EXP 18
6190: MUL
6191: PLUS
6192: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6193: LD_ADDR_EXP 40
6197: PUSH
6198: LD_INT 1
6200: ST_TO_ADDR
// for i := 1 to 8 do
6201: LD_ADDR_VAR 0 2
6205: PUSH
6206: DOUBLE
6207: LD_INT 1
6209: DEC
6210: ST_TO_ADDR
6211: LD_INT 8
6213: PUSH
6214: FOR_TO
6215: IFFALSE 6356
// if mpSidePositions [ i ] then
6217: LD_EXP 5
6221: PUSH
6222: LD_VAR 0 2
6226: ARRAY
6227: IFFALSE 6354
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6229: LD_EXP 17
6233: PUSH
6234: LD_EXP 5
6238: PUSH
6239: LD_VAR 0 2
6243: ARRAY
6244: ARRAY
6245: PPUSH
6246: LD_INT 5
6248: PPUSH
6249: CALL_OW 424
// for j := 1 to 8 do
6253: LD_ADDR_VAR 0 3
6257: PUSH
6258: DOUBLE
6259: LD_INT 1
6261: DEC
6262: ST_TO_ADDR
6263: LD_INT 8
6265: PUSH
6266: FOR_TO
6267: IFFALSE 6352
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6269: LD_EXP 5
6273: PUSH
6274: LD_VAR 0 3
6278: ARRAY
6279: PUSH
6280: LD_EXP 6
6284: PUSH
6285: LD_VAR 0 2
6289: ARRAY
6290: PUSH
6291: LD_EXP 6
6295: PUSH
6296: LD_VAR 0 3
6300: ARRAY
6301: NONEQUAL
6302: PUSH
6303: LD_EXP 9
6307: NOT
6308: PUSH
6309: LD_VAR 0 2
6313: PUSH
6314: LD_VAR 0 3
6318: NONEQUAL
6319: AND
6320: OR
6321: AND
6322: IFFALSE 6350
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6324: LD_VAR 0 3
6328: PPUSH
6329: LD_EXP 17
6333: PUSH
6334: LD_EXP 5
6338: PUSH
6339: LD_VAR 0 2
6343: ARRAY
6344: ARRAY
6345: PPUSH
6346: CALL_OW 333
6350: GO 6266
6352: POP
6353: POP
// end ;
6354: GO 6214
6356: POP
6357: POP
// end ;
6358: LD_VAR 0 1
6362: RET
// function EndBuildUp ; var i , j ; begin
6363: LD_INT 0
6365: PPUSH
6366: PPUSH
6367: PPUSH
// mpBuildUpTimeActive := false ;
6368: LD_ADDR_EXP 40
6372: PUSH
6373: LD_INT 0
6375: ST_TO_ADDR
// for i := 1 to 8 do
6376: LD_ADDR_VAR 0 2
6380: PUSH
6381: DOUBLE
6382: LD_INT 1
6384: DEC
6385: ST_TO_ADDR
6386: LD_INT 8
6388: PUSH
6389: FOR_TO
6390: IFFALSE 6531
// if mpSidePositions [ i ] then
6392: LD_EXP 5
6396: PUSH
6397: LD_VAR 0 2
6401: ARRAY
6402: IFFALSE 6529
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6404: LD_EXP 17
6408: PUSH
6409: LD_EXP 5
6413: PUSH
6414: LD_VAR 0 2
6418: ARRAY
6419: ARRAY
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: CALL_OW 424
// for j := 1 to 8 do
6428: LD_ADDR_VAR 0 3
6432: PUSH
6433: DOUBLE
6434: LD_INT 1
6436: DEC
6437: ST_TO_ADDR
6438: LD_INT 8
6440: PUSH
6441: FOR_TO
6442: IFFALSE 6527
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6444: LD_EXP 5
6448: PUSH
6449: LD_VAR 0 3
6453: ARRAY
6454: PUSH
6455: LD_EXP 6
6459: PUSH
6460: LD_VAR 0 2
6464: ARRAY
6465: PUSH
6466: LD_EXP 6
6470: PUSH
6471: LD_VAR 0 3
6475: ARRAY
6476: NONEQUAL
6477: PUSH
6478: LD_EXP 9
6482: NOT
6483: PUSH
6484: LD_VAR 0 2
6488: PUSH
6489: LD_VAR 0 3
6493: NONEQUAL
6494: AND
6495: OR
6496: AND
6497: IFFALSE 6525
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6499: LD_VAR 0 3
6503: PPUSH
6504: LD_EXP 17
6508: PUSH
6509: LD_EXP 5
6513: PUSH
6514: LD_VAR 0 2
6518: ARRAY
6519: ARRAY
6520: PPUSH
6521: CALL_OW 334
6525: GO 6441
6527: POP
6528: POP
// end ;
6529: GO 6389
6531: POP
6532: POP
// end ;
6533: LD_VAR 0 1
6537: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6538: LD_EXP 40
6542: IFFALSE 6717
6544: GO 6546
6546: DISABLE
6547: LD_INT 0
6549: PPUSH
6550: PPUSH
// begin for i := 1 to 8 do
6551: LD_ADDR_VAR 0 1
6555: PUSH
6556: DOUBLE
6557: LD_INT 1
6559: DEC
6560: ST_TO_ADDR
6561: LD_INT 8
6563: PUSH
6564: FOR_TO
6565: IFFALSE 6714
// if mpSidePositions [ i ] then
6567: LD_EXP 5
6571: PUSH
6572: LD_VAR 0 1
6576: ARRAY
6577: IFFALSE 6712
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6579: LD_ADDR_VAR 0 2
6583: PUSH
6584: LD_EXP 17
6588: PUSH
6589: LD_EXP 5
6593: PUSH
6594: LD_VAR 0 1
6598: ARRAY
6599: ARRAY
6600: PPUSH
6601: LD_INT 2
6603: PUSH
6604: LD_INT 21
6606: PUSH
6607: LD_INT 1
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 21
6616: PUSH
6617: LD_INT 2
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 22
6631: PUSH
6632: LD_OWVAR 2
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PPUSH
6645: CALL_OW 70
6649: PUSH
6650: FOR_IN
6651: IFFALSE 6710
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6653: LD_EXP 6
6657: PUSH
6658: LD_VAR 0 1
6662: ARRAY
6663: PUSH
6664: LD_EXP 6
6668: PUSH
6669: LD_OWVAR 2
6673: ARRAY
6674: NONEQUAL
6675: PUSH
6676: LD_EXP 9
6680: NOT
6681: PUSH
6682: LD_VAR 0 1
6686: PUSH
6687: LD_OWVAR 2
6691: NONEQUAL
6692: AND
6693: OR
6694: IFFALSE 6708
// ComMoveToArea ( un , BuildUpEscape ) ;
6696: LD_VAR 0 2
6700: PPUSH
6701: LD_INT 59
6703: PPUSH
6704: CALL_OW 113
6708: GO 6650
6710: POP
6711: POP
6712: GO 6564
6714: POP
6715: POP
// enable ;
6716: ENABLE
// end ;
6717: PPOPN 2
6719: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6720: LD_EXP 18
6724: IFFALSE 6774
6726: GO 6728
6728: DISABLE
6729: LD_INT 0
6731: PPUSH
// begin tmp := mpBuildUpTime ;
6732: LD_ADDR_VAR 0 1
6736: PUSH
6737: LD_EXP 18
6741: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6742: LD_INT 35
6744: PPUSH
6745: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6749: LD_ADDR_VAR 0 1
6753: PUSH
6754: LD_VAR 0 1
6758: PUSH
6759: LD_INT 35
6761: MINUS
6762: ST_TO_ADDR
// until not tmp ;
6763: LD_VAR 0 1
6767: NOT
6768: IFFALSE 6742
// EndBuildUp ;
6770: CALL 6363 0 0
// end ;
6774: PPOPN 1
6776: END
// every 0 0$1 trigger mpActive marked mpWin do
6777: LD_INT 100
6779: IFFALSE 6813
6781: GO 6783
6783: DISABLE
// begin if IAmServer then
6784: CALL_OW 518
6788: IFFALSE 6797
// wait ( 0 0$3 ) ;
6790: LD_INT 105
6792: PPUSH
6793: CALL_OW 67
// if Multiplayer then
6797: LD_OWVAR 4
6801: IFFALSE 6809
// YouWinInMultiplayer else
6803: CALL_OW 106
6807: GO 6813
// YouWin ;
6809: CALL_OW 103
// end ;
6813: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6814: LD_INT 0
6816: PPUSH
// result := false ;
6817: LD_ADDR_VAR 0 3
6821: PUSH
6822: LD_INT 0
6824: ST_TO_ADDR
// case gameType of GameTypeNormal :
6825: LD_VAR 0 1
6829: PUSH
6830: LD_INT 1
6832: DOUBLE
6833: EQUAL
6834: IFTRUE 6838
6836: GO 6911
6838: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6839: LD_ADDR_VAR 0 3
6843: PUSH
6844: LD_INT 22
6846: PUSH
6847: LD_VAR 0 2
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 2
6858: PUSH
6859: LD_INT 21
6861: PUSH
6862: LD_INT 1
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: LD_INT 33
6871: PUSH
6872: LD_INT 3
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 33
6881: PUSH
6882: LD_INT 5
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PPUSH
6899: CALL_OW 69
6903: PPUSH
6904: CALL 18463 0 1
6908: ST_TO_ADDR
// end ; GameTypeSurvival :
6909: GO 7146
6911: LD_INT 2
6913: DOUBLE
6914: EQUAL
6915: IFTRUE 6919
6917: GO 7047
6919: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6920: LD_ADDR_VAR 0 3
6924: PUSH
6925: LD_INT 22
6927: PUSH
6928: LD_VAR 0 2
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 2
6939: PUSH
6940: LD_INT 30
6942: PUSH
6943: LD_INT 0
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 30
6952: PUSH
6953: LD_INT 1
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PPUSH
6969: CALL_OW 69
6973: PPUSH
6974: CALL 18463 0 1
6978: PUSH
6979: LD_INT 22
6981: PUSH
6982: LD_VAR 0 2
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: LD_INT 2
6993: PUSH
6994: LD_INT 21
6996: PUSH
6997: LD_INT 1
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 33
7006: PUSH
7007: LD_INT 3
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 33
7016: PUSH
7017: LD_INT 5
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PPUSH
7034: CALL_OW 69
7038: PPUSH
7039: CALL 18463 0 1
7043: AND
7044: ST_TO_ADDR
// end ; GameTypeKing :
7045: GO 7146
7047: LD_INT 3
7049: DOUBLE
7050: EQUAL
7051: IFTRUE 7055
7053: GO 7145
7055: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7056: LD_ADDR_VAR 0 3
7060: PUSH
7061: LD_INT 22
7063: PUSH
7064: LD_VAR 0 2
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PUSH
7073: LD_INT 2
7075: PUSH
7076: LD_INT 21
7078: PUSH
7079: LD_INT 1
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: LD_INT 33
7088: PUSH
7089: LD_INT 3
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: LD_INT 33
7098: PUSH
7099: LD_INT 5
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PPUSH
7116: CALL_OW 69
7120: PPUSH
7121: CALL 18463 0 1
7125: PUSH
7126: LD_VAR 0 2
7130: PPUSH
7131: CALL 9583 0 1
7135: PUSH
7136: LD_EXP 32
7140: LESS
7141: AND
7142: ST_TO_ADDR
// end ; end ;
7143: GO 7146
7145: POP
// end ;
7146: LD_VAR 0 3
7150: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7151: LD_INT 100
7153: IFFALSE 7375
7155: GO 7157
7157: DISABLE
7158: LD_INT 0
7160: PPUSH
7161: PPUSH
// begin if Multiplayer then
7162: LD_OWVAR 4
7166: IFFALSE 7174
// SetPlayerSpectator ( ) else
7168: CALL_OW 572
7172: GO 7183
// FogOff ( your_side ) ;
7174: LD_OWVAR 2
7178: PPUSH
7179: CALL_OW 344
// repeat gameIsOn := false ;
7183: LD_ADDR_VAR 0 1
7187: PUSH
7188: LD_INT 0
7190: ST_TO_ADDR
// for i := 1 to 8 do
7191: LD_ADDR_VAR 0 2
7195: PUSH
7196: DOUBLE
7197: LD_INT 1
7199: DEC
7200: ST_TO_ADDR
7201: LD_INT 8
7203: PUSH
7204: FOR_TO
7205: IFFALSE 7327
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7207: LD_EXP 5
7211: PUSH
7212: LD_VAR 0 2
7216: ARRAY
7217: PUSH
7218: LD_VAR 0 2
7222: PPUSH
7223: CALL_OW 108
7227: AND
7228: PUSH
7229: LD_VAR 0 2
7233: PUSH
7234: LD_OWVAR 2
7238: NONEQUAL
7239: AND
7240: IFFALSE 7325
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7242: LD_EXP 6
7246: PUSH
7247: LD_VAR 0 2
7251: ARRAY
7252: NOT
7253: PUSH
7254: LD_EXP 6
7258: PUSH
7259: LD_VAR 0 2
7263: ARRAY
7264: PUSH
7265: LD_EXP 6
7269: PUSH
7270: LD_OWVAR 2
7274: ARRAY
7275: NONEQUAL
7276: PUSH
7277: LD_OWVAR 2
7281: PPUSH
7282: LD_VAR 0 2
7286: PPUSH
7287: CALL_OW 81
7291: PUSH
7292: LD_INT 1
7294: NONEQUAL
7295: AND
7296: OR
7297: IFFALSE 7325
// if HasPowerByGameType ( mpGameType , i ) then
7299: LD_EXP 1
7303: PPUSH
7304: LD_VAR 0 2
7308: PPUSH
7309: CALL 6814 0 2
7313: IFFALSE 7325
// begin gameIsOn := true ;
7315: LD_ADDR_VAR 0 1
7319: PUSH
7320: LD_INT 1
7322: ST_TO_ADDR
// break ;
7323: GO 7327
// end ;
7325: GO 7204
7327: POP
7328: POP
// wait ( 100 ) ;
7329: LD_INT 100
7331: PPUSH
7332: CALL_OW 67
// until not gameIsOn ;
7336: LD_VAR 0 1
7340: NOT
7341: IFFALSE 7183
// if IAmServer then
7343: CALL_OW 518
7347: IFFALSE 7356
// wait ( 0 0$3 ) ;
7349: LD_INT 105
7351: PPUSH
7352: CALL_OW 67
// if Multiplayer then
7356: LD_OWVAR 4
7360: IFFALSE 7368
// YouLostInMultiplayer else
7362: CALL_OW 107
7366: GO 7375
// YouLost (  ) ;
7368: LD_STRING 
7370: PPUSH
7371: CALL_OW 104
// end ;
7375: PPOPN 2
7377: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7378: LD_EXP 30
7382: IFFALSE 7729
7384: GO 7386
7386: DISABLE
7387: LD_INT 0
7389: PPUSH
7390: PPUSH
7391: PPUSH
7392: PPUSH
7393: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7394: LD_ADDR_VAR 0 5
7398: PUSH
7399: LD_INT 1
7401: PUSH
7402: LD_INT 2
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: LD_INT 4
7410: PUSH
7411: LD_INT 5
7413: PUSH
7414: LD_INT 6
7416: PUSH
7417: LD_INT 7
7419: PUSH
7420: LD_INT 8
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7433: LD_INT 350
7435: PPUSH
7436: CALL_OW 67
// for i := 1 to 8 do
7440: LD_ADDR_VAR 0 1
7444: PUSH
7445: DOUBLE
7446: LD_INT 1
7448: DEC
7449: ST_TO_ADDR
7450: LD_INT 8
7452: PUSH
7453: FOR_TO
7454: IFFALSE 7699
// begin j := sides [ i ] ;
7456: LD_ADDR_VAR 0 2
7460: PUSH
7461: LD_VAR 0 5
7465: PUSH
7466: LD_VAR 0 1
7470: ARRAY
7471: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7472: LD_EXP 37
7476: PUSH
7477: LD_VAR 0 2
7481: ARRAY
7482: PPUSH
7483: CALL 18463 0 1
7487: PUSH
7488: LD_VAR 0 2
7492: PPUSH
7493: CALL_OW 108
7497: AND
7498: PUSH
7499: LD_EXP 1
7503: PPUSH
7504: LD_VAR 0 2
7508: PPUSH
7509: CALL 6814 0 2
7513: AND
7514: IFFALSE 7697
// begin wait ( mpRespawn div 3 ) ;
7516: LD_EXP 30
7520: PUSH
7521: LD_INT 3
7523: DIV
7524: PPUSH
7525: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7529: LD_ADDR_VAR 0 3
7533: PUSH
7534: LD_INT 22
7536: PUSH
7537: LD_VAR 0 2
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 50
7548: PUSH
7549: EMPTY
7550: LIST
7551: PUSH
7552: LD_INT 2
7554: PUSH
7555: LD_INT 30
7557: PUSH
7558: LD_INT 0
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PUSH
7565: LD_INT 30
7567: PUSH
7568: LD_INT 1
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 69
7589: ST_TO_ADDR
// if not tmp then
7590: LD_VAR 0 3
7594: NOT
7595: IFFALSE 7599
// continue ;
7597: GO 7453
// spawn := tmp [ 1 ] ;
7599: LD_ADDR_VAR 0 4
7603: PUSH
7604: LD_VAR 0 3
7608: PUSH
7609: LD_INT 1
7611: ARRAY
7612: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7613: LD_EXP 37
7617: PUSH
7618: LD_VAR 0 2
7622: ARRAY
7623: PUSH
7624: LD_INT 1
7626: ARRAY
7627: PPUSH
7628: LD_VAR 0 4
7632: PPUSH
7633: CALL_OW 250
7637: PPUSH
7638: LD_VAR 0 4
7642: PPUSH
7643: CALL_OW 251
7647: PPUSH
7648: LD_INT 32
7650: PPUSH
7651: LD_INT 1
7653: PPUSH
7654: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7658: LD_ADDR_EXP 37
7662: PUSH
7663: LD_EXP 37
7667: PPUSH
7668: LD_VAR 0 2
7672: PPUSH
7673: LD_EXP 37
7677: PUSH
7678: LD_VAR 0 2
7682: ARRAY
7683: PPUSH
7684: LD_INT 1
7686: PPUSH
7687: CALL_OW 3
7691: PPUSH
7692: CALL_OW 1
7696: ST_TO_ADDR
// end ; end ;
7697: GO 7453
7699: POP
7700: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7701: LD_ADDR_VAR 0 5
7705: PUSH
7706: LD_VAR 0 5
7710: PPUSH
7711: LD_INT 1
7713: PPUSH
7714: LD_INT 8
7716: PPUSH
7717: LD_INT 1
7719: PPUSH
7720: CALL 20741 0 4
7724: ST_TO_ADDR
// until false ;
7725: LD_INT 0
7727: IFFALSE 7433
// end ;
7729: PPOPN 5
7731: END
// every 0 0$1 marked mpActive do
7732: GO 7734
7734: DISABLE
// begin enable ;
7735: ENABLE
// if not mpDisplayStrings then
7736: LD_EXP 35
7740: NOT
7741: IFFALSE 7752
// begin display_strings := [ ] ;
7743: LD_ADDR_OWVAR 47
7747: PUSH
7748: EMPTY
7749: ST_TO_ADDR
// exit ;
7750: GO 7762
// end ; display_strings := mpDisplayStrings ;
7752: LD_ADDR_OWVAR 47
7756: PUSH
7757: LD_EXP 35
7761: ST_TO_ADDR
// end ; end_of_file
7762: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7763: LD_INT 0
7765: PPUSH
7766: PPUSH
7767: PPUSH
7768: PPUSH
7769: PPUSH
7770: PPUSH
7771: PPUSH
7772: PPUSH
7773: PPUSH
// if GetType ( un ) = unit_vehicle then
7774: LD_VAR 0 1
7778: PPUSH
7779: CALL_OW 247
7783: PUSH
7784: LD_INT 2
7786: EQUAL
7787: IFFALSE 7791
// exit ;
7789: GO 8361
// side := GetSide ( un ) ;
7791: LD_ADDR_VAR 0 9
7795: PUSH
7796: LD_VAR 0 1
7800: PPUSH
7801: CALL_OW 255
7805: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7806: LD_EXP 1
7810: PUSH
7811: LD_INT 2
7813: EQUAL
7814: IFFALSE 7907
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
7816: LD_VAR 0 1
7820: PPUSH
7821: CALL_OW 266
7825: PUSH
7826: LD_INT 0
7828: PUSH
7829: LD_INT 1
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: IN
7836: PUSH
7837: LD_VAR 0 1
7841: PPUSH
7842: CALL_OW 110
7846: PUSH
7847: LD_VAR 0 9
7851: EQUAL
7852: AND
7853: IFFALSE 7907
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7855: LD_ADDR_VAR 0 3
7859: PUSH
7860: LD_INT 22
7862: PUSH
7863: LD_VAR 0 9
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 21
7874: PUSH
7875: LD_INT 1
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PPUSH
7886: CALL_OW 69
7890: PUSH
7891: FOR_IN
7892: IFFALSE 7905
// KillUnit ( i ) ;
7894: LD_VAR 0 3
7898: PPUSH
7899: CALL_OW 66
7903: GO 7891
7905: POP
7906: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7907: LD_VAR 0 1
7911: PPUSH
7912: CALL_OW 257
7916: PUSH
7917: LD_INT 12
7919: PUSH
7920: LD_INT 17
7922: PUSH
7923: LD_INT 15
7925: PUSH
7926: LD_INT 16
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: IN
7935: PUSH
7936: LD_VAR 0 1
7940: PPUSH
7941: CALL_OW 263
7945: PUSH
7946: LD_INT 5
7948: EQUAL
7949: OR
7950: IFFALSE 8090
// begin tag := GetTag ( un ) ;
7952: LD_ADDR_VAR 0 5
7956: PUSH
7957: LD_VAR 0 1
7961: PPUSH
7962: CALL_OW 110
7966: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7967: LD_ADDR_VAR 0 7
7971: PUSH
7972: LD_EXP 29
7976: PUSH
7977: LD_EXP 5
7981: PUSH
7982: LD_VAR 0 5
7986: ARRAY
7987: ARRAY
7988: ST_TO_ADDR
// if not area then
7989: LD_VAR 0 7
7993: NOT
7994: IFFALSE 7998
// exit ;
7996: GO 8361
// wait ( 4 4$00 ) ;
7998: LD_INT 8400
8000: PPUSH
8001: CALL_OW 67
// repeat wait ( 10 ) ;
8005: LD_INT 10
8007: PPUSH
8008: CALL_OW 67
// until not mpBlockRespThread ;
8012: LD_EXP 38
8016: NOT
8017: IFFALSE 8005
// mpBlockRespThread := true ;
8019: LD_ADDR_EXP 38
8023: PUSH
8024: LD_INT 1
8026: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8027: LD_INT 0
8029: PPUSH
8030: CALL 50320 0 1
// ape := CreateHuman ;
8034: LD_ADDR_VAR 0 4
8038: PUSH
8039: CALL_OW 44
8043: ST_TO_ADDR
// SetTag ( ape , tag ) ;
8044: LD_VAR 0 4
8048: PPUSH
8049: LD_VAR 0 5
8053: PPUSH
8054: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
8058: LD_VAR 0 4
8062: PPUSH
8063: LD_VAR 0 7
8067: PPUSH
8068: LD_INT 0
8070: PPUSH
8071: CALL_OW 49
// wait ( 10 ) ;
8075: LD_INT 10
8077: PPUSH
8078: CALL_OW 67
// mpBlockRespThread := false ;
8082: LD_ADDR_EXP 38
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8090: LD_VAR 0 1
8094: PPUSH
8095: CALL_OW 247
8099: PUSH
8100: LD_INT 1
8102: EQUAL
8103: PUSH
8104: LD_VAR 0 1
8108: PPUSH
8109: CALL_OW 248
8113: PUSH
8114: LD_INT 0
8116: GREATER
8117: AND
8118: IFFALSE 8361
// begin if not mpRespawn then
8120: LD_EXP 30
8124: NOT
8125: IFFALSE 8129
// exit ;
8127: GO 8361
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8129: LD_VAR 0 9
8133: PPUSH
8134: CALL_OW 108
8138: NOT
8139: PUSH
8140: LD_EXP 1
8144: PPUSH
8145: LD_VAR 0 9
8149: PPUSH
8150: CALL 6814 0 2
8154: NOT
8155: AND
8156: IFFALSE 8160
// exit ;
8158: GO 8361
// side := GetSide ( un ) ;
8160: LD_ADDR_VAR 0 9
8164: PUSH
8165: LD_VAR 0 1
8169: PPUSH
8170: CALL_OW 255
8174: ST_TO_ADDR
// nation := GetNation ( un ) ;
8175: LD_ADDR_VAR 0 8
8179: PUSH
8180: LD_VAR 0 1
8184: PPUSH
8185: CALL_OW 248
8189: ST_TO_ADDR
// class := GetClass ( un ) ;
8190: LD_ADDR_VAR 0 6
8194: PUSH
8195: LD_VAR 0 1
8199: PPUSH
8200: CALL_OW 257
8204: ST_TO_ADDR
// if class > 4 then
8205: LD_VAR 0 6
8209: PUSH
8210: LD_INT 4
8212: GREATER
8213: IFFALSE 8223
// class := 1 ;
8215: LD_ADDR_VAR 0 6
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// repeat wait ( 10 ) ;
8223: LD_INT 10
8225: PPUSH
8226: CALL_OW 67
// until not mpBlockRespThread ;
8230: LD_EXP 38
8234: NOT
8235: IFFALSE 8223
// mpBlockRespThread := true ;
8237: LD_ADDR_EXP 38
8241: PUSH
8242: LD_INT 1
8244: ST_TO_ADDR
// uc_side := side ;
8245: LD_ADDR_OWVAR 20
8249: PUSH
8250: LD_VAR 0 9
8254: ST_TO_ADDR
// uc_nation := nation ;
8255: LD_ADDR_OWVAR 21
8259: PUSH
8260: LD_VAR 0 8
8264: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8265: LD_INT 0
8267: PPUSH
8268: LD_VAR 0 6
8272: PPUSH
8273: LD_INT 2
8275: PPUSH
8276: CALL_OW 380
// un := CreateHuman ;
8280: LD_ADDR_VAR 0 1
8284: PUSH
8285: CALL_OW 44
8289: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8290: LD_ADDR_EXP 37
8294: PUSH
8295: LD_EXP 37
8299: PPUSH
8300: LD_VAR 0 9
8304: PPUSH
8305: LD_EXP 37
8309: PUSH
8310: LD_VAR 0 9
8314: ARRAY
8315: PPUSH
8316: LD_EXP 37
8320: PUSH
8321: LD_VAR 0 9
8325: ARRAY
8326: PUSH
8327: LD_INT 1
8329: PLUS
8330: PPUSH
8331: LD_VAR 0 1
8335: PPUSH
8336: CALL_OW 1
8340: PPUSH
8341: CALL_OW 1
8345: ST_TO_ADDR
// wait ( 10 ) ;
8346: LD_INT 10
8348: PPUSH
8349: CALL_OW 67
// mpBlockRespThread := false ;
8353: LD_ADDR_EXP 38
8357: PUSH
8358: LD_INT 0
8360: ST_TO_ADDR
// end ; end ;
8361: LD_VAR 0 2
8365: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8366: LD_INT 0
8368: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8369: LD_VAR 0 1
8373: PPUSH
8374: CALL_OW 266
8378: PUSH
8379: LD_INT 0
8381: PUSH
8382: LD_INT 1
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: IN
8389: IFFALSE 8414
// SetBName ( building , @ & GetSide ( building ) ) ;
8391: LD_VAR 0 1
8395: PPUSH
8396: LD_STRING @
8398: PUSH
8399: LD_VAR 0 1
8403: PPUSH
8404: CALL_OW 255
8408: STR
8409: PPUSH
8410: CALL_OW 500
// end ;
8414: LD_VAR 0 2
8418: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8419: LD_INT 0
8421: PPUSH
8422: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8423: LD_EXP 1
8427: PUSH
8428: LD_INT 2
8430: EQUAL
8431: PUSH
8432: LD_VAR 0 1
8436: PPUSH
8437: CALL_OW 266
8441: PUSH
8442: LD_INT 0
8444: PUSH
8445: LD_INT 1
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: IN
8452: AND
8453: IFFALSE 8518
// begin KillUnit ( building ) ;
8455: LD_VAR 0 1
8459: PPUSH
8460: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8464: LD_ADDR_VAR 0 5
8468: PUSH
8469: LD_INT 22
8471: PUSH
8472: LD_VAR 0 2
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: LD_INT 21
8483: PUSH
8484: LD_INT 1
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PPUSH
8495: CALL_OW 69
8499: PUSH
8500: FOR_IN
8501: IFFALSE 8514
// KillUnit ( i ) ;
8503: LD_VAR 0 5
8507: PPUSH
8508: CALL_OW 66
8512: GO 8500
8514: POP
8515: POP
// exit ;
8516: GO 8563
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8518: LD_VAR 0 1
8522: PPUSH
8523: CALL_OW 266
8527: PUSH
8528: LD_INT 0
8530: PUSH
8531: LD_INT 1
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: IN
8538: IFFALSE 8563
// SetBName ( building , @ & GetSide ( building ) ) ;
8540: LD_VAR 0 1
8544: PPUSH
8545: LD_STRING @
8547: PUSH
8548: LD_VAR 0 1
8552: PPUSH
8553: CALL_OW 255
8557: STR
8558: PPUSH
8559: CALL_OW 500
// end ; end_of_file
8563: LD_VAR 0 4
8567: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
8568: LD_EXP 36
8572: IFFALSE 8911
8574: GO 8576
8576: DISABLE
8577: LD_INT 0
8579: PPUSH
8580: PPUSH
8581: PPUSH
// begin mpKingPoints := [ ] ;
8582: LD_ADDR_EXP 41
8586: PUSH
8587: EMPTY
8588: ST_TO_ADDR
// if mpTeamGame then
8589: LD_EXP 9
8593: IFFALSE 8647
// begin for i := 1 to Count ( mpTeams ) do
8595: LD_ADDR_VAR 0 1
8599: PUSH
8600: DOUBLE
8601: LD_INT 1
8603: DEC
8604: ST_TO_ADDR
8605: LD_EXP 8
8609: PPUSH
8610: CALL 18463 0 1
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8643
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
8618: LD_ADDR_EXP 41
8622: PUSH
8623: LD_EXP 41
8627: PPUSH
8628: LD_VAR 0 1
8632: PPUSH
8633: LD_INT 0
8635: PPUSH
8636: CALL_OW 1
8640: ST_TO_ADDR
8641: GO 8615
8643: POP
8644: POP
// end else
8645: GO 8690
// begin for i := 1 to 8 do
8647: LD_ADDR_VAR 0 1
8651: PUSH
8652: DOUBLE
8653: LD_INT 1
8655: DEC
8656: ST_TO_ADDR
8657: LD_INT 8
8659: PUSH
8660: FOR_TO
8661: IFFALSE 8688
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
8663: LD_ADDR_EXP 41
8667: PUSH
8668: LD_EXP 41
8672: PPUSH
8673: LD_VAR 0 1
8677: PPUSH
8678: LD_INT 0
8680: PPUSH
8681: CALL_OW 1
8685: ST_TO_ADDR
8686: GO 8660
8688: POP
8689: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
8690: LD_ADDR_VAR 0 3
8694: PUSH
8695: LD_INT 50
8697: PPUSH
8698: LD_INT 0
8700: PPUSH
8701: CALL_OW 517
8705: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
8706: LD_ADDR_VAR 0 1
8710: PUSH
8711: DOUBLE
8712: LD_INT 1
8714: DEC
8715: ST_TO_ADDR
8716: LD_VAR 0 3
8720: PUSH
8721: LD_INT 1
8723: ARRAY
8724: PUSH
8725: FOR_TO
8726: IFFALSE 8793
// for j := 1 to 8 do
8728: LD_ADDR_VAR 0 2
8732: PUSH
8733: DOUBLE
8734: LD_INT 1
8736: DEC
8737: ST_TO_ADDR
8738: LD_INT 8
8740: PUSH
8741: FOR_TO
8742: IFFALSE 8789
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
8744: LD_VAR 0 3
8748: PUSH
8749: LD_INT 1
8751: ARRAY
8752: PUSH
8753: LD_VAR 0 1
8757: ARRAY
8758: PPUSH
8759: LD_VAR 0 3
8763: PUSH
8764: LD_INT 2
8766: ARRAY
8767: PUSH
8768: LD_VAR 0 1
8772: ARRAY
8773: PPUSH
8774: LD_VAR 0 2
8778: PPUSH
8779: LD_INT 12
8781: NEG
8782: PPUSH
8783: CALL_OW 330
8787: GO 8741
8789: POP
8790: POP
8791: GO 8725
8793: POP
8794: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
8795: LD_EXP 31
8799: PPUSH
8800: LD_INT 1
8802: PPUSH
8803: CALL_OW 424
// UpdateCounter ;
8807: CALL 9413 0 0
// repeat wait ( 0 0$1 ) ;
8811: LD_INT 35
8813: PPUSH
8814: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8818: LD_ADDR_VAR 0 3
8822: PUSH
8823: LD_EXP 31
8827: PPUSH
8828: LD_INT 3
8830: PUSH
8831: LD_INT 57
8833: PUSH
8834: EMPTY
8835: LIST
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PUSH
8841: LD_INT 50
8843: PUSH
8844: EMPTY
8845: LIST
8846: PUSH
8847: LD_INT 2
8849: PUSH
8850: LD_INT 30
8852: PUSH
8853: LD_INT 0
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 30
8862: PUSH
8863: LD_INT 1
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: LIST
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: LIST
8879: PPUSH
8880: CALL_OW 70
8884: ST_TO_ADDR
// if not tmp then
8885: LD_VAR 0 3
8889: NOT
8890: IFFALSE 8894
// continue ;
8892: GO 8811
// AddPoints ( tmp ) ;
8894: LD_VAR 0 3
8898: PPUSH
8899: CALL 9091 0 1
// UpdateCounter ;
8903: CALL 9413 0 0
// until false ;
8907: LD_INT 0
8909: IFFALSE 8811
// end ;
8911: PPOPN 3
8913: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
8914: LD_EXP 36
8918: PUSH
8919: LD_EXP 34
8923: AND
8924: IFFALSE 9088
8926: GO 8928
8928: DISABLE
8929: LD_INT 0
8931: PPUSH
8932: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
8933: LD_ADDR_VAR 0 2
8937: PUSH
8938: LD_INT 50
8940: PPUSH
8941: LD_INT 0
8943: PPUSH
8944: CALL_OW 517
8948: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
8949: LD_ADDR_VAR 0 1
8953: PUSH
8954: DOUBLE
8955: LD_INT 1
8957: DEC
8958: ST_TO_ADDR
8959: LD_VAR 0 2
8963: PUSH
8964: LD_INT 1
8966: ARRAY
8967: PUSH
8968: FOR_TO
8969: IFFALSE 9010
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
8971: LD_VAR 0 2
8975: PUSH
8976: LD_INT 1
8978: ARRAY
8979: PUSH
8980: LD_VAR 0 1
8984: ARRAY
8985: PPUSH
8986: LD_VAR 0 2
8990: PUSH
8991: LD_INT 2
8993: ARRAY
8994: PUSH
8995: LD_VAR 0 1
8999: ARRAY
9000: PPUSH
9001: LD_INT 125
9003: PPUSH
9004: CALL_OW 495
9008: GO 8968
9010: POP
9011: POP
// repeat wait ( mpEmissions ) ;
9012: LD_EXP 34
9016: PPUSH
9017: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
9021: LD_ADDR_VAR 0 1
9025: PUSH
9026: DOUBLE
9027: LD_INT 1
9029: DEC
9030: ST_TO_ADDR
9031: LD_VAR 0 2
9035: PUSH
9036: LD_INT 1
9038: ARRAY
9039: PUSH
9040: FOR_TO
9041: IFFALSE 9082
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
9043: LD_VAR 0 2
9047: PUSH
9048: LD_INT 1
9050: ARRAY
9051: PUSH
9052: LD_VAR 0 1
9056: ARRAY
9057: PPUSH
9058: LD_VAR 0 2
9062: PUSH
9063: LD_INT 2
9065: ARRAY
9066: PUSH
9067: LD_VAR 0 1
9071: ARRAY
9072: PPUSH
9073: LD_INT 15
9075: PPUSH
9076: CALL_OW 495
9080: GO 9040
9082: POP
9083: POP
// until false ;
9084: LD_INT 0
9086: IFFALSE 9012
// end ;
9088: PPOPN 2
9090: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
9091: LD_INT 0
9093: PPUSH
9094: PPUSH
9095: PPUSH
9096: PPUSH
9097: PPUSH
// if mpTeamGame then
9098: LD_EXP 9
9102: IFFALSE 9299
// begin first := depots [ 1 ] ;
9104: LD_ADDR_VAR 0 4
9108: PUSH
9109: LD_VAR 0 1
9113: PUSH
9114: LD_INT 1
9116: ARRAY
9117: ST_TO_ADDR
// side := GetSide ( first ) ;
9118: LD_ADDR_VAR 0 6
9122: PUSH
9123: LD_VAR 0 4
9127: PPUSH
9128: CALL_OW 255
9132: ST_TO_ADDR
// for i := 1 to mpTeams do
9133: LD_ADDR_VAR 0 3
9137: PUSH
9138: DOUBLE
9139: LD_INT 1
9141: DEC
9142: ST_TO_ADDR
9143: LD_EXP 8
9147: PUSH
9148: FOR_TO
9149: IFFALSE 9183
// if side in mpTeams [ i ] then
9151: LD_VAR 0 6
9155: PUSH
9156: LD_EXP 8
9160: PUSH
9161: LD_VAR 0 3
9165: ARRAY
9166: IN
9167: IFFALSE 9181
// begin team := i ;
9169: LD_ADDR_VAR 0 5
9173: PUSH
9174: LD_VAR 0 3
9178: ST_TO_ADDR
// break ;
9179: GO 9183
// end ;
9181: GO 9148
9183: POP
9184: POP
// if not team then
9185: LD_VAR 0 5
9189: NOT
9190: IFFALSE 9194
// exit ;
9192: GO 9408
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
9194: LD_EXP 31
9198: PPUSH
9199: LD_INT 81
9201: PUSH
9202: LD_VAR 0 6
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PPUSH
9211: CALL_OW 70
9215: IFFALSE 9219
// exit ;
9217: GO 9408
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
9219: LD_ADDR_EXP 41
9223: PUSH
9224: LD_EXP 41
9228: PPUSH
9229: LD_VAR 0 5
9233: PPUSH
9234: LD_EXP 41
9238: PUSH
9239: LD_VAR 0 5
9243: ARRAY
9244: PUSH
9245: LD_INT 1
9247: PLUS
9248: PPUSH
9249: CALL_OW 1
9253: ST_TO_ADDR
// for i in mpTeams [ team ] do
9254: LD_ADDR_VAR 0 3
9258: PUSH
9259: LD_EXP 8
9263: PUSH
9264: LD_VAR 0 5
9268: ARRAY
9269: PUSH
9270: FOR_IN
9271: IFFALSE 9295
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
9273: LD_VAR 0 3
9277: PPUSH
9278: LD_EXP 41
9282: PUSH
9283: LD_VAR 0 5
9287: ARRAY
9288: PPUSH
9289: CALL_OW 506
9293: GO 9270
9295: POP
9296: POP
// end else
9297: GO 9408
// begin first := depots [ 1 ] ;
9299: LD_ADDR_VAR 0 4
9303: PUSH
9304: LD_VAR 0 1
9308: PUSH
9309: LD_INT 1
9311: ARRAY
9312: ST_TO_ADDR
// side := GetSide ( first ) ;
9313: LD_ADDR_VAR 0 6
9317: PUSH
9318: LD_VAR 0 4
9322: PPUSH
9323: CALL_OW 255
9327: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
9328: LD_EXP 31
9332: PPUSH
9333: LD_INT 81
9335: PUSH
9336: LD_VAR 0 6
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: PPUSH
9345: CALL_OW 70
9349: IFFALSE 9353
// exit ;
9351: GO 9408
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
9353: LD_ADDR_EXP 41
9357: PUSH
9358: LD_EXP 41
9362: PPUSH
9363: LD_VAR 0 6
9367: PPUSH
9368: LD_EXP 41
9372: PUSH
9373: LD_VAR 0 6
9377: ARRAY
9378: PUSH
9379: LD_INT 1
9381: PLUS
9382: PPUSH
9383: CALL_OW 1
9387: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
9388: LD_VAR 0 6
9392: PPUSH
9393: LD_EXP 41
9397: PUSH
9398: LD_VAR 0 6
9402: ARRAY
9403: PPUSH
9404: CALL_OW 506
// end ; end ;
9408: LD_VAR 0 2
9412: RET
// function UpdateCounter ; var i ; begin
9413: LD_INT 0
9415: PPUSH
9416: PPUSH
// result := [ ] ;
9417: LD_ADDR_VAR 0 1
9421: PUSH
9422: EMPTY
9423: ST_TO_ADDR
// if mpTeamGame then
9424: LD_EXP 9
9428: IFFALSE 9495
// begin for i := 1 to mpTeams do
9430: LD_ADDR_VAR 0 2
9434: PUSH
9435: DOUBLE
9436: LD_INT 1
9438: DEC
9439: ST_TO_ADDR
9440: LD_EXP 8
9444: PUSH
9445: FOR_TO
9446: IFFALSE 9491
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
9448: LD_ADDR_VAR 0 1
9452: PUSH
9453: LD_VAR 0 1
9457: PUSH
9458: LD_STRING #KingoftheHill-Team
9460: PUSH
9461: LD_VAR 0 2
9465: PUSH
9466: LD_EXP 41
9470: PUSH
9471: LD_VAR 0 2
9475: ARRAY
9476: PUSH
9477: LD_EXP 32
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: ADD
9488: ST_TO_ADDR
9489: GO 9445
9491: POP
9492: POP
// end else
9493: GO 9568
// begin for i := 1 to 8 do
9495: LD_ADDR_VAR 0 2
9499: PUSH
9500: DOUBLE
9501: LD_INT 1
9503: DEC
9504: ST_TO_ADDR
9505: LD_INT 8
9507: PUSH
9508: FOR_TO
9509: IFFALSE 9566
// if mpSidePositions [ i ] then
9511: LD_EXP 5
9515: PUSH
9516: LD_VAR 0 2
9520: ARRAY
9521: IFFALSE 9564
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
9523: LD_ADDR_VAR 0 1
9527: PUSH
9528: LD_VAR 0 1
9532: PUSH
9533: LD_STRING #KingoftheHill-Player
9535: PUSH
9536: LD_VAR 0 2
9540: PUSH
9541: LD_EXP 41
9545: PUSH
9546: LD_VAR 0 2
9550: ARRAY
9551: PUSH
9552: LD_EXP 32
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: ADD
9563: ST_TO_ADDR
9564: GO 9508
9566: POP
9567: POP
// end ; mpDisplayStrings := result ;
9568: LD_ADDR_EXP 35
9572: PUSH
9573: LD_VAR 0 1
9577: ST_TO_ADDR
// end ;
9578: LD_VAR 0 1
9582: RET
// export function HowMuchPointsKing ( side ) ; begin
9583: LD_INT 0
9585: PPUSH
// result := HowMuchPoints ( side ) ;
9586: LD_ADDR_VAR 0 2
9590: PUSH
9591: LD_VAR 0 1
9595: PPUSH
9596: CALL 9606 0 1
9600: ST_TO_ADDR
// end ;
9601: LD_VAR 0 2
9605: RET
// function HowMuchPoints ( side ) ; var i ; begin
9606: LD_INT 0
9608: PPUSH
9609: PPUSH
// if mpTeamGame then
9610: LD_EXP 9
9614: IFFALSE 9683
// begin for i := 1 to Count ( mpTeams ) do
9616: LD_ADDR_VAR 0 3
9620: PUSH
9621: DOUBLE
9622: LD_INT 1
9624: DEC
9625: ST_TO_ADDR
9626: LD_EXP 8
9630: PPUSH
9631: CALL 18463 0 1
9635: PUSH
9636: FOR_TO
9637: IFFALSE 9679
// begin if side in mpTeams [ i ] then
9639: LD_VAR 0 1
9643: PUSH
9644: LD_EXP 8
9648: PUSH
9649: LD_VAR 0 3
9653: ARRAY
9654: IN
9655: IFFALSE 9677
// begin result := mpKingPoints [ i ] ;
9657: LD_ADDR_VAR 0 2
9661: PUSH
9662: LD_EXP 41
9666: PUSH
9667: LD_VAR 0 3
9671: ARRAY
9672: ST_TO_ADDR
// exit ;
9673: POP
9674: POP
9675: GO 9699
// end ; end ;
9677: GO 9636
9679: POP
9680: POP
// end else
9681: GO 9699
// result := mpKingPoints [ side ] ;
9683: LD_ADDR_VAR 0 2
9687: PUSH
9688: LD_EXP 41
9692: PUSH
9693: LD_VAR 0 1
9697: ARRAY
9698: ST_TO_ADDR
// end ;
9699: LD_VAR 0 2
9703: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
9704: LD_EXP 36
9708: PUSH
9709: CALL 10031 0 0
9713: AND
9714: PUSH
9715: LD_OWVAR 4
9719: AND
9720: IFFALSE 9956
9722: GO 9724
9724: DISABLE
9725: LD_INT 0
9727: PPUSH
9728: PPUSH
// begin canWin := false ;
9729: LD_ADDR_VAR 0 2
9733: PUSH
9734: LD_INT 0
9736: ST_TO_ADDR
// if not HasPower ( your_side ) then
9737: LD_OWVAR 2
9741: PPUSH
9742: CALL 10071 0 1
9746: NOT
9747: IFFALSE 9758
// begin Multiplayer_Loose_Message ;
9749: CALL_OW 521
// enable ( mpLose ) ;
9753: LD_INT 102
9755: ENABLE_MARKED
// end else
9756: GO 9956
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
9758: LD_ADDR_VAR 0 2
9762: PUSH
9763: LD_OWVAR 2
9767: PPUSH
9768: CALL 9606 0 1
9772: PUSH
9773: LD_EXP 32
9777: GREATEREQUAL
9778: PUSH
9779: LD_OWVAR 2
9783: PPUSH
9784: CALL 10071 0 1
9788: AND
9789: PUSH
9790: CALL 9959 0 0
9794: NOT
9795: OR
9796: ST_TO_ADDR
// for i := 1 to 8 do
9797: LD_ADDR_VAR 0 1
9801: PUSH
9802: DOUBLE
9803: LD_INT 1
9805: DEC
9806: ST_TO_ADDR
9807: LD_INT 8
9809: PUSH
9810: FOR_TO
9811: IFFALSE 9942
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9813: LD_EXP 5
9817: PUSH
9818: LD_VAR 0 1
9822: ARRAY
9823: PUSH
9824: LD_VAR 0 1
9828: PPUSH
9829: CALL_OW 108
9833: AND
9834: PUSH
9835: LD_VAR 0 1
9839: PUSH
9840: LD_OWVAR 2
9844: NONEQUAL
9845: AND
9846: IFFALSE 9940
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9848: LD_EXP 6
9852: PUSH
9853: LD_VAR 0 1
9857: ARRAY
9858: NOT
9859: PUSH
9860: LD_EXP 6
9864: PUSH
9865: LD_VAR 0 1
9869: ARRAY
9870: PUSH
9871: LD_EXP 6
9875: PUSH
9876: LD_OWVAR 2
9880: ARRAY
9881: NONEQUAL
9882: PUSH
9883: LD_OWVAR 2
9887: PPUSH
9888: LD_VAR 0 1
9892: PPUSH
9893: CALL_OW 81
9897: PUSH
9898: LD_INT 1
9900: NONEQUAL
9901: AND
9902: OR
9903: IFFALSE 9940
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
9905: LD_VAR 0 1
9909: PPUSH
9910: CALL 9606 0 1
9914: PUSH
9915: LD_EXP 32
9919: GREATEREQUAL
9920: PUSH
9921: LD_VAR 0 1
9925: PPUSH
9926: CALL 10071 0 1
9930: AND
9931: IFFALSE 9940
// begin enable ( mpLose ) ;
9933: LD_INT 102
9935: ENABLE_MARKED
// exit ;
9936: POP
9937: POP
9938: GO 9956
// end ;
9940: GO 9810
9942: POP
9943: POP
// if canWin then
9944: LD_VAR 0 2
9948: IFFALSE 9955
// enable ( mpWin ) else
9950: LD_INT 101
9952: ENABLE_MARKED
9953: GO 9956
// enable ;
9955: ENABLE
// end ; end ;
9956: PPOPN 2
9958: END
// function EnemiesInGame ; var i ; begin
9959: LD_INT 0
9961: PPUSH
9962: PPUSH
// result := false ;
9963: LD_ADDR_VAR 0 1
9967: PUSH
9968: LD_INT 0
9970: ST_TO_ADDR
// for i := 1 to 8 do
9971: LD_ADDR_VAR 0 2
9975: PUSH
9976: DOUBLE
9977: LD_INT 1
9979: DEC
9980: ST_TO_ADDR
9981: LD_INT 8
9983: PUSH
9984: FOR_TO
9985: IFFALSE 10024
// if i <> your_side and HasPower ( i ) then
9987: LD_VAR 0 2
9991: PUSH
9992: LD_OWVAR 2
9996: NONEQUAL
9997: PUSH
9998: LD_VAR 0 2
10002: PPUSH
10003: CALL 10071 0 1
10007: AND
10008: IFFALSE 10022
// begin result := true ;
10010: LD_ADDR_VAR 0 1
10014: PUSH
10015: LD_INT 1
10017: ST_TO_ADDR
// exit ;
10018: POP
10019: POP
10020: GO 10026
// end ;
10022: GO 9984
10024: POP
10025: POP
// end ;
10026: LD_VAR 0 1
10030: RET
// function CanWinLoose ; begin
10031: LD_INT 0
10033: PPUSH
// result := true ;
10034: LD_ADDR_VAR 0 1
10038: PUSH
10039: LD_INT 1
10041: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10042: CALL_OW 531
10046: PUSH
10047: CALL_OW 519
10051: PUSH
10052: LD_INT 1
10054: GREATER
10055: AND
10056: IFFALSE 10066
// result := false ;
10058: LD_ADDR_VAR 0 1
10062: PUSH
10063: LD_INT 0
10065: ST_TO_ADDR
// end ;
10066: LD_VAR 0 1
10070: RET
// function HasPower ( i ) ; begin
10071: LD_INT 0
10073: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10074: LD_ADDR_VAR 0 2
10078: PUSH
10079: LD_INT 22
10081: PUSH
10082: LD_VAR 0 1
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PUSH
10091: LD_INT 2
10093: PUSH
10094: LD_INT 21
10096: PUSH
10097: LD_INT 1
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 33
10106: PUSH
10107: LD_INT 3
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 33
10116: PUSH
10117: LD_INT 5
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PPUSH
10134: CALL_OW 69
10138: ST_TO_ADDR
// end ; end_of_file
10139: LD_VAR 0 2
10143: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10144: LD_EXP 36
10148: PUSH
10149: CALL 10354 0 0
10153: AND
10154: PUSH
10155: LD_OWVAR 4
10159: AND
10160: IFFALSE 10351
10162: GO 10164
10164: DISABLE
10165: LD_INT 0
10167: PPUSH
10168: PPUSH
// begin canWin := false ;
10169: LD_ADDR_VAR 0 2
10173: PUSH
10174: LD_INT 0
10176: ST_TO_ADDR
// if not HasPower ( your_side ) then
10177: LD_OWVAR 2
10181: PPUSH
10182: CALL 10394 0 1
10186: NOT
10187: IFFALSE 10198
// begin Multiplayer_Loose_Message ;
10189: CALL_OW 521
// enable ( mpLose ) ;
10193: LD_INT 102
10195: ENABLE_MARKED
// end else
10196: GO 10351
// begin canWin := true ;
10198: LD_ADDR_VAR 0 2
10202: PUSH
10203: LD_INT 1
10205: ST_TO_ADDR
// for i := 1 to 8 do
10206: LD_ADDR_VAR 0 1
10210: PUSH
10211: DOUBLE
10212: LD_INT 1
10214: DEC
10215: ST_TO_ADDR
10216: LD_INT 8
10218: PUSH
10219: FOR_TO
10220: IFFALSE 10337
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10222: LD_EXP 5
10226: PUSH
10227: LD_VAR 0 1
10231: ARRAY
10232: PUSH
10233: LD_VAR 0 1
10237: PPUSH
10238: CALL_OW 108
10242: AND
10243: PUSH
10244: LD_VAR 0 1
10248: PUSH
10249: LD_OWVAR 2
10253: NONEQUAL
10254: AND
10255: IFFALSE 10335
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10257: LD_EXP 6
10261: PUSH
10262: LD_VAR 0 1
10266: ARRAY
10267: NOT
10268: PUSH
10269: LD_EXP 6
10273: PUSH
10274: LD_VAR 0 1
10278: ARRAY
10279: PUSH
10280: LD_EXP 6
10284: PUSH
10285: LD_OWVAR 2
10289: ARRAY
10290: NONEQUAL
10291: PUSH
10292: LD_OWVAR 2
10296: PPUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 81
10306: PUSH
10307: LD_INT 1
10309: NONEQUAL
10310: AND
10311: OR
10312: IFFALSE 10335
// if HasPower ( i ) then
10314: LD_VAR 0 1
10318: PPUSH
10319: CALL 10394 0 1
10323: IFFALSE 10335
// begin canWin := false ;
10325: LD_ADDR_VAR 0 2
10329: PUSH
10330: LD_INT 0
10332: ST_TO_ADDR
// break ;
10333: GO 10337
// end ;
10335: GO 10219
10337: POP
10338: POP
// if canWin then
10339: LD_VAR 0 2
10343: IFFALSE 10350
// enable ( mpWin ) else
10345: LD_INT 101
10347: ENABLE_MARKED
10348: GO 10351
// enable ;
10350: ENABLE
// end ; end ;
10351: PPOPN 2
10353: END
// function CanWinLoose ; begin
10354: LD_INT 0
10356: PPUSH
// result := true ;
10357: LD_ADDR_VAR 0 1
10361: PUSH
10362: LD_INT 1
10364: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10365: CALL_OW 531
10369: PUSH
10370: CALL_OW 519
10374: PUSH
10375: LD_INT 1
10377: GREATER
10378: AND
10379: IFFALSE 10389
// result := false ;
10381: LD_ADDR_VAR 0 1
10385: PUSH
10386: LD_INT 0
10388: ST_TO_ADDR
// end ;
10389: LD_VAR 0 1
10393: RET
// function HasPower ( i ) ; begin
10394: LD_INT 0
10396: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10397: LD_ADDR_VAR 0 2
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_VAR 0 1
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: LD_INT 2
10416: PUSH
10417: LD_INT 21
10419: PUSH
10420: LD_INT 1
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: LD_INT 33
10429: PUSH
10430: LD_INT 3
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PUSH
10437: LD_INT 33
10439: PUSH
10440: LD_INT 5
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PPUSH
10457: CALL_OW 69
10461: ST_TO_ADDR
// end ; end_of_file
10462: LD_VAR 0 2
10466: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10467: LD_EXP 36
10471: IFFALSE 10514
10473: GO 10475
10475: DISABLE
10476: LD_INT 0
10478: PPUSH
// begin for i := 1 to 8 do
10479: LD_ADDR_VAR 0 1
10483: PUSH
10484: DOUBLE
10485: LD_INT 1
10487: DEC
10488: ST_TO_ADDR
10489: LD_INT 8
10491: PUSH
10492: FOR_TO
10493: IFFALSE 10512
// SetRestrict ( b_depot , i , state_disabled ) ;
10495: LD_INT 0
10497: PPUSH
10498: LD_VAR 0 1
10502: PPUSH
10503: LD_INT 0
10505: PPUSH
10506: CALL_OW 324
10510: GO 10492
10512: POP
10513: POP
// end ;
10514: PPOPN 1
10516: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10517: LD_EXP 36
10521: PUSH
10522: CALL 10727 0 0
10526: AND
10527: PUSH
10528: LD_OWVAR 4
10532: AND
10533: IFFALSE 10724
10535: GO 10537
10537: DISABLE
10538: LD_INT 0
10540: PPUSH
10541: PPUSH
// begin canWin := false ;
10542: LD_ADDR_VAR 0 2
10546: PUSH
10547: LD_INT 0
10549: ST_TO_ADDR
// if not HasPower ( your_side ) then
10550: LD_OWVAR 2
10554: PPUSH
10555: CALL 10767 0 1
10559: NOT
10560: IFFALSE 10571
// begin Multiplayer_Loose_Message ;
10562: CALL_OW 521
// enable ( mpLose ) ;
10566: LD_INT 102
10568: ENABLE_MARKED
// end else
10569: GO 10724
// begin canWin := true ;
10571: LD_ADDR_VAR 0 2
10575: PUSH
10576: LD_INT 1
10578: ST_TO_ADDR
// for i := 1 to 8 do
10579: LD_ADDR_VAR 0 1
10583: PUSH
10584: DOUBLE
10585: LD_INT 1
10587: DEC
10588: ST_TO_ADDR
10589: LD_INT 8
10591: PUSH
10592: FOR_TO
10593: IFFALSE 10710
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10595: LD_EXP 5
10599: PUSH
10600: LD_VAR 0 1
10604: ARRAY
10605: PUSH
10606: LD_VAR 0 1
10610: PPUSH
10611: CALL_OW 108
10615: AND
10616: PUSH
10617: LD_VAR 0 1
10621: PUSH
10622: LD_OWVAR 2
10626: NONEQUAL
10627: AND
10628: IFFALSE 10708
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10630: LD_EXP 6
10634: PUSH
10635: LD_VAR 0 1
10639: ARRAY
10640: NOT
10641: PUSH
10642: LD_EXP 6
10646: PUSH
10647: LD_VAR 0 1
10651: ARRAY
10652: PUSH
10653: LD_EXP 6
10657: PUSH
10658: LD_OWVAR 2
10662: ARRAY
10663: NONEQUAL
10664: PUSH
10665: LD_OWVAR 2
10669: PPUSH
10670: LD_VAR 0 1
10674: PPUSH
10675: CALL_OW 81
10679: PUSH
10680: LD_INT 1
10682: NONEQUAL
10683: AND
10684: OR
10685: IFFALSE 10708
// if HasPower ( i ) then
10687: LD_VAR 0 1
10691: PPUSH
10692: CALL 10767 0 1
10696: IFFALSE 10708
// begin canWin := false ;
10698: LD_ADDR_VAR 0 2
10702: PUSH
10703: LD_INT 0
10705: ST_TO_ADDR
// break ;
10706: GO 10710
// end ;
10708: GO 10592
10710: POP
10711: POP
// if canWin then
10712: LD_VAR 0 2
10716: IFFALSE 10723
// enable ( mpWin ) else
10718: LD_INT 101
10720: ENABLE_MARKED
10721: GO 10724
// enable ;
10723: ENABLE
// end ; end ;
10724: PPOPN 2
10726: END
// function CanWinLoose ; begin
10727: LD_INT 0
10729: PPUSH
// result := true ;
10730: LD_ADDR_VAR 0 1
10734: PUSH
10735: LD_INT 1
10737: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10738: CALL_OW 531
10742: PUSH
10743: CALL_OW 519
10747: PUSH
10748: LD_INT 1
10750: GREATER
10751: AND
10752: IFFALSE 10762
// result := false ;
10754: LD_ADDR_VAR 0 1
10758: PUSH
10759: LD_INT 0
10761: ST_TO_ADDR
// end ;
10762: LD_VAR 0 1
10766: RET
// function HasPower ( i ) ; begin
10767: LD_INT 0
10769: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10770: LD_INT 22
10772: PUSH
10773: LD_VAR 0 1
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: LD_INT 2
10784: PUSH
10785: LD_INT 30
10787: PUSH
10788: LD_INT 0
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PUSH
10795: LD_INT 30
10797: PUSH
10798: LD_INT 1
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: LIST
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: CALL_OW 69
10818: NOT
10819: IFFALSE 10823
// exit ;
10821: GO 10888
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10823: LD_ADDR_VAR 0 2
10827: PUSH
10828: LD_INT 22
10830: PUSH
10831: LD_VAR 0 1
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 2
10842: PUSH
10843: LD_INT 21
10845: PUSH
10846: LD_INT 1
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 33
10855: PUSH
10856: LD_INT 3
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 33
10865: PUSH
10866: LD_INT 5
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PPUSH
10883: CALL_OW 69
10887: ST_TO_ADDR
// end ; end_of_file
10888: LD_VAR 0 2
10892: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
10893: LD_VAR 0 1
10897: PUSH
10898: LD_INT 200
10900: DOUBLE
10901: GREATEREQUAL
10902: IFFALSE 10910
10904: LD_INT 299
10906: DOUBLE
10907: LESSEQUAL
10908: IFTRUE 10912
10910: GO 10944
10912: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
10913: LD_VAR 0 1
10917: PPUSH
10918: LD_VAR 0 2
10922: PPUSH
10923: LD_VAR 0 3
10927: PPUSH
10928: LD_VAR 0 4
10932: PPUSH
10933: LD_VAR 0 5
10937: PPUSH
10938: CALL 11641 0 5
10942: GO 11021
10944: LD_INT 300
10946: DOUBLE
10947: GREATEREQUAL
10948: IFFALSE 10956
10950: LD_INT 399
10952: DOUBLE
10953: LESSEQUAL
10954: IFTRUE 10958
10956: GO 11020
10958: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
10959: LD_VAR 0 1
10963: PPUSH
10964: LD_VAR 0 2
10968: PPUSH
10969: LD_VAR 0 3
10973: PPUSH
10974: LD_VAR 0 4
10978: PPUSH
10979: LD_VAR 0 5
10983: PPUSH
10984: LD_VAR 0 6
10988: PPUSH
10989: LD_VAR 0 7
10993: PPUSH
10994: LD_VAR 0 8
10998: PPUSH
10999: LD_VAR 0 9
11003: PPUSH
11004: LD_VAR 0 10
11008: PPUSH
11009: LD_VAR 0 11
11013: PPUSH
11014: CALL 59204 0 11
11018: GO 11021
11020: POP
// end ;
11021: PPOPN 11
11023: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
11024: LD_VAR 0 1
11028: PPUSH
11029: LD_VAR 0 2
11033: PPUSH
11034: LD_VAR 0 3
11038: PPUSH
11039: LD_VAR 0 4
11043: PPUSH
11044: LD_VAR 0 5
11048: PPUSH
11049: CALL 11106 0 5
// end ; end_of_file
11053: PPOPN 5
11055: END
// export function SOS_UnitDestroyed ( un ) ; begin
11056: LD_INT 0
11058: PPUSH
// ComRadiation ( un ) ;
11059: LD_VAR 0 1
11063: PPUSH
11064: CALL 12045 0 1
// end ;
11068: LD_VAR 0 2
11072: RET
// export function SOS_UnitKamikazed ( un ) ; begin
11073: LD_INT 0
11075: PPUSH
// ComRadiation ( un ) ;
11076: LD_VAR 0 1
11080: PPUSH
11081: CALL 12045 0 1
// end ;
11085: LD_VAR 0 2
11089: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
11090: LD_INT 0
11092: PPUSH
// end ;
11093: LD_VAR 0 4
11097: RET
// export function SOS_Command ( cmd ) ; begin
11098: LD_INT 0
11100: PPUSH
// end ;
11101: LD_VAR 0 2
11105: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
11106: LD_INT 0
11108: PPUSH
// end ;
11109: LD_VAR 0 6
11113: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
11114: LD_INT 0
11116: PPUSH
11117: PPUSH
11118: PPUSH
11119: PPUSH
11120: PPUSH
// if not vehicle or not factory then
11121: LD_VAR 0 1
11125: NOT
11126: PUSH
11127: LD_VAR 0 2
11131: NOT
11132: OR
11133: IFFALSE 11137
// exit ;
11135: GO 11636
// if not factoryWaypoints then
11137: LD_EXP 52
11141: NOT
11142: IFFALSE 11146
// exit ;
11144: GO 11636
// for i := 1 to Count ( factoryWaypoints ) do
11146: LD_ADDR_VAR 0 4
11150: PUSH
11151: DOUBLE
11152: LD_INT 1
11154: DEC
11155: ST_TO_ADDR
11156: LD_EXP 52
11160: PPUSH
11161: CALL 18463 0 1
11165: PUSH
11166: FOR_TO
11167: IFFALSE 11634
// if factoryWaypoints [ i ] [ 2 ] = factory then
11169: LD_EXP 52
11173: PUSH
11174: LD_VAR 0 4
11178: ARRAY
11179: PUSH
11180: LD_INT 2
11182: ARRAY
11183: PUSH
11184: LD_VAR 0 2
11188: EQUAL
11189: IFFALSE 11632
// begin if GetControl ( vehicle ) = control_manual then
11191: LD_VAR 0 1
11195: PPUSH
11196: CALL_OW 263
11200: PUSH
11201: LD_INT 1
11203: EQUAL
11204: IFFALSE 11515
// begin driver := IsDrivenBy ( vehicle ) ;
11206: LD_ADDR_VAR 0 6
11210: PUSH
11211: LD_VAR 0 1
11215: PPUSH
11216: CALL_OW 311
11220: ST_TO_ADDR
// tag := GetTag ( driver ) ;
11221: LD_ADDR_VAR 0 5
11225: PUSH
11226: LD_VAR 0 6
11230: PPUSH
11231: CALL_OW 110
11235: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
11236: LD_VAR 0 5
11240: PUSH
11241: LD_INT 501
11243: EQUAL
11244: PUSH
11245: LD_VAR 0 1
11249: PPUSH
11250: CALL_OW 110
11254: PUSH
11255: LD_INT 501
11257: EQUAL
11258: OR
11259: IFFALSE 11265
// exit ;
11261: POP
11262: POP
11263: GO 11636
// if not HasTask ( driver ) then
11265: LD_VAR 0 6
11269: PPUSH
11270: CALL_OW 314
11274: NOT
11275: IFFALSE 11513
// begin SetTag ( driver , tDriver ) ;
11277: LD_VAR 0 6
11281: PPUSH
11282: LD_INT 501
11284: PPUSH
11285: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
11289: LD_VAR 0 1
11293: PPUSH
11294: LD_INT 501
11296: PPUSH
11297: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11301: LD_ADDR_VAR 0 7
11305: PUSH
11306: LD_EXP 52
11310: PUSH
11311: LD_VAR 0 4
11315: ARRAY
11316: PUSH
11317: LD_INT 3
11319: ARRAY
11320: PPUSH
11321: LD_EXP 52
11325: PUSH
11326: LD_VAR 0 4
11330: ARRAY
11331: PUSH
11332: LD_INT 4
11334: ARRAY
11335: PPUSH
11336: CALL_OW 428
11340: ST_TO_ADDR
// if hex then
11341: LD_VAR 0 7
11345: IFFALSE 11363
// ComMoveUnit ( driver , hex ) else
11347: LD_VAR 0 6
11351: PPUSH
11352: LD_VAR 0 7
11356: PPUSH
11357: CALL_OW 112
11361: GO 11402
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11363: LD_VAR 0 6
11367: PPUSH
11368: LD_EXP 52
11372: PUSH
11373: LD_VAR 0 4
11377: ARRAY
11378: PUSH
11379: LD_INT 3
11381: ARRAY
11382: PPUSH
11383: LD_EXP 52
11387: PUSH
11388: LD_VAR 0 4
11392: ARRAY
11393: PUSH
11394: LD_INT 4
11396: ARRAY
11397: PPUSH
11398: CALL_OW 111
// AddComExitVehicle ( driver ) ;
11402: LD_VAR 0 6
11406: PPUSH
11407: CALL_OW 181
// if Multiplayer then
11411: LD_OWVAR 4
11415: IFFALSE 11464
// begin repeat wait ( 10 ) ;
11417: LD_INT 10
11419: PPUSH
11420: CALL_OW 67
// until not IsInUnit ( driver ) ;
11424: LD_VAR 0 6
11428: PPUSH
11429: CALL_OW 310
11433: NOT
11434: IFFALSE 11417
// if not HasTask ( driver ) then
11436: LD_VAR 0 6
11440: PPUSH
11441: CALL_OW 314
11445: NOT
11446: IFFALSE 11462
// ComEnterUnit ( driver , factory ) ;
11448: LD_VAR 0 6
11452: PPUSH
11453: LD_VAR 0 2
11457: PPUSH
11458: CALL_OW 120
// end else
11462: GO 11478
// AddComEnterUnit ( driver , factory ) ;
11464: LD_VAR 0 6
11468: PPUSH
11469: LD_VAR 0 2
11473: PPUSH
11474: CALL_OW 180
// wait ( 0 0$1 ) ;
11478: LD_INT 35
11480: PPUSH
11481: CALL_OW 67
// SetTag ( driver , tag ) ;
11485: LD_VAR 0 6
11489: PPUSH
11490: LD_VAR 0 5
11494: PPUSH
11495: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
11499: LD_VAR 0 1
11503: PPUSH
11504: LD_INT 0
11506: PPUSH
11507: CALL_OW 109
// break ;
11511: GO 11634
// end ; end else
11513: GO 11632
// if GetControl ( vehicle ) = control_remote then
11515: LD_VAR 0 1
11519: PPUSH
11520: CALL_OW 263
11524: PUSH
11525: LD_INT 2
11527: EQUAL
11528: IFFALSE 11591
// begin wait ( 0 0$2 ) ;
11530: LD_INT 70
11532: PPUSH
11533: CALL_OW 67
// if Connect ( vehicle ) then
11537: LD_VAR 0 1
11541: PPUSH
11542: CALL 24669 0 1
11546: IFFALSE 11587
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11548: LD_VAR 0 1
11552: PPUSH
11553: LD_EXP 52
11557: PUSH
11558: LD_VAR 0 4
11562: ARRAY
11563: PUSH
11564: LD_INT 3
11566: ARRAY
11567: PPUSH
11568: LD_EXP 52
11572: PUSH
11573: LD_VAR 0 4
11577: ARRAY
11578: PUSH
11579: LD_INT 4
11581: ARRAY
11582: PPUSH
11583: CALL_OW 171
// break ;
11587: GO 11634
// end else
11589: GO 11632
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11591: LD_VAR 0 1
11595: PPUSH
11596: LD_EXP 52
11600: PUSH
11601: LD_VAR 0 4
11605: ARRAY
11606: PUSH
11607: LD_INT 3
11609: ARRAY
11610: PPUSH
11611: LD_EXP 52
11615: PUSH
11616: LD_VAR 0 4
11620: ARRAY
11621: PUSH
11622: LD_INT 4
11624: ARRAY
11625: PPUSH
11626: CALL_OW 171
// break ;
11630: GO 11634
// end ; end ;
11632: GO 11166
11634: POP
11635: POP
// end ;
11636: LD_VAR 0 3
11640: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11641: LD_INT 0
11643: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11644: LD_VAR 0 1
11648: PUSH
11649: LD_INT 250
11651: EQUAL
11652: PUSH
11653: LD_VAR 0 2
11657: PPUSH
11658: CALL_OW 264
11662: PUSH
11663: LD_INT 81
11665: EQUAL
11666: AND
11667: IFFALSE 11688
// MinerPlaceMine ( unit , x , y ) ;
11669: LD_VAR 0 2
11673: PPUSH
11674: LD_VAR 0 4
11678: PPUSH
11679: LD_VAR 0 5
11683: PPUSH
11684: CALL 14780 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11688: LD_VAR 0 1
11692: PUSH
11693: LD_INT 251
11695: EQUAL
11696: PUSH
11697: LD_VAR 0 2
11701: PPUSH
11702: CALL_OW 264
11706: PUSH
11707: LD_INT 81
11709: EQUAL
11710: AND
11711: IFFALSE 11732
// MinerDetonateMine ( unit , x , y ) ;
11713: LD_VAR 0 2
11717: PPUSH
11718: LD_VAR 0 4
11722: PPUSH
11723: LD_VAR 0 5
11727: PPUSH
11728: CALL 15055 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11732: LD_VAR 0 1
11736: PUSH
11737: LD_INT 252
11739: EQUAL
11740: PUSH
11741: LD_VAR 0 2
11745: PPUSH
11746: CALL_OW 264
11750: PUSH
11751: LD_INT 81
11753: EQUAL
11754: AND
11755: IFFALSE 11776
// MinerCreateMinefield ( unit , x , y ) ;
11757: LD_VAR 0 2
11761: PPUSH
11762: LD_VAR 0 4
11766: PPUSH
11767: LD_VAR 0 5
11771: PPUSH
11772: CALL 15472 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11776: LD_VAR 0 1
11780: PUSH
11781: LD_INT 253
11783: EQUAL
11784: PUSH
11785: LD_VAR 0 2
11789: PPUSH
11790: CALL_OW 257
11794: PUSH
11795: LD_INT 5
11797: EQUAL
11798: AND
11799: IFFALSE 11820
// ComBinocular ( unit , x , y ) ;
11801: LD_VAR 0 2
11805: PPUSH
11806: LD_VAR 0 4
11810: PPUSH
11811: LD_VAR 0 5
11815: PPUSH
11816: CALL 15841 0 3
// if selectedUnit then
11820: LD_VAR 0 3
11824: IFFALSE 11880
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11826: LD_VAR 0 1
11830: PUSH
11831: LD_INT 254
11833: EQUAL
11834: PUSH
11835: LD_VAR 0 2
11839: PPUSH
11840: CALL_OW 264
11844: PUSH
11845: LD_INT 99
11847: EQUAL
11848: AND
11849: PUSH
11850: LD_VAR 0 3
11854: PPUSH
11855: CALL_OW 263
11859: PUSH
11860: LD_INT 3
11862: EQUAL
11863: AND
11864: IFFALSE 11880
// HackDestroyVehicle ( unit , selectedUnit ) ;
11866: LD_VAR 0 2
11870: PPUSH
11871: LD_VAR 0 3
11875: PPUSH
11876: CALL 14144 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11880: LD_VAR 0 1
11884: PUSH
11885: LD_INT 255
11887: EQUAL
11888: PUSH
11889: LD_VAR 0 2
11893: PPUSH
11894: CALL_OW 264
11898: PUSH
11899: LD_INT 14
11901: PUSH
11902: LD_INT 53
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: IN
11909: AND
11910: PUSH
11911: LD_VAR 0 4
11915: PPUSH
11916: LD_VAR 0 5
11920: PPUSH
11921: CALL_OW 488
11925: AND
11926: IFFALSE 11950
// CutTreeXYR ( unit , x , y , 12 ) ;
11928: LD_VAR 0 2
11932: PPUSH
11933: LD_VAR 0 4
11937: PPUSH
11938: LD_VAR 0 5
11942: PPUSH
11943: LD_INT 12
11945: PPUSH
11946: CALL 12141 0 4
// if cmd = 256 then
11950: LD_VAR 0 1
11954: PUSH
11955: LD_INT 256
11957: EQUAL
11958: IFFALSE 11979
// SetFactoryWaypoint ( unit , x , y ) ;
11960: LD_VAR 0 2
11964: PPUSH
11965: LD_VAR 0 4
11969: PPUSH
11970: LD_VAR 0 5
11974: PPUSH
11975: CALL 59212 0 3
// if cmd = 257 then
11979: LD_VAR 0 1
11983: PUSH
11984: LD_INT 257
11986: EQUAL
11987: IFFALSE 12008
// SetWarehouseGatheringPoint ( unit , x , y ) ;
11989: LD_VAR 0 2
11993: PPUSH
11994: LD_VAR 0 4
11998: PPUSH
11999: LD_VAR 0 5
12003: PPUSH
12004: CALL 59702 0 3
// if cmd = 258 then
12008: LD_VAR 0 1
12012: PUSH
12013: LD_INT 258
12015: EQUAL
12016: IFFALSE 12040
// BurnTreeXYR ( unit , x , y , 8 ) ;
12018: LD_VAR 0 2
12022: PPUSH
12023: LD_VAR 0 4
12027: PPUSH
12028: LD_VAR 0 5
12032: PPUSH
12033: LD_INT 8
12035: PPUSH
12036: CALL 12535 0 4
// end ;
12040: LD_VAR 0 6
12044: RET
// export function ComRadiation ( un ) ; var eff ; begin
12045: LD_INT 0
12047: PPUSH
12048: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
12049: LD_VAR 0 1
12053: PPUSH
12054: CALL_OW 264
12058: PUSH
12059: LD_INT 91
12061: NONEQUAL
12062: IFFALSE 12066
// exit ;
12064: GO 12136
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
12066: LD_INT 68
12068: PPUSH
12069: LD_VAR 0 1
12073: PPUSH
12074: CALL_OW 255
12078: PPUSH
12079: CALL_OW 321
12083: PUSH
12084: LD_INT 2
12086: EQUAL
12087: IFFALSE 12099
// eff := 70 else
12089: LD_ADDR_VAR 0 3
12093: PUSH
12094: LD_INT 70
12096: ST_TO_ADDR
12097: GO 12107
// eff := 30 ;
12099: LD_ADDR_VAR 0 3
12103: PUSH
12104: LD_INT 30
12106: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
12107: LD_VAR 0 1
12111: PPUSH
12112: CALL_OW 250
12116: PPUSH
12117: LD_VAR 0 1
12121: PPUSH
12122: CALL_OW 251
12126: PPUSH
12127: LD_VAR 0 3
12131: PPUSH
12132: CALL_OW 495
// end ;
12136: LD_VAR 0 2
12140: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
12141: LD_INT 0
12143: PPUSH
12144: PPUSH
12145: PPUSH
12146: PPUSH
12147: PPUSH
12148: PPUSH
12149: PPUSH
12150: PPUSH
12151: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
12152: LD_VAR 0 1
12156: PPUSH
12157: CALL_OW 302
12161: NOT
12162: PUSH
12163: LD_VAR 0 2
12167: PPUSH
12168: LD_VAR 0 3
12172: PPUSH
12173: CALL_OW 488
12177: NOT
12178: OR
12179: PUSH
12180: LD_VAR 0 4
12184: NOT
12185: OR
12186: IFFALSE 12190
// exit ;
12188: GO 12530
// list := [ ] ;
12190: LD_ADDR_VAR 0 13
12194: PUSH
12195: EMPTY
12196: ST_TO_ADDR
// if x - r < 0 then
12197: LD_VAR 0 2
12201: PUSH
12202: LD_VAR 0 4
12206: MINUS
12207: PUSH
12208: LD_INT 0
12210: LESS
12211: IFFALSE 12223
// min_x := 0 else
12213: LD_ADDR_VAR 0 7
12217: PUSH
12218: LD_INT 0
12220: ST_TO_ADDR
12221: GO 12239
// min_x := x - r ;
12223: LD_ADDR_VAR 0 7
12227: PUSH
12228: LD_VAR 0 2
12232: PUSH
12233: LD_VAR 0 4
12237: MINUS
12238: ST_TO_ADDR
// if y - r < 0 then
12239: LD_VAR 0 3
12243: PUSH
12244: LD_VAR 0 4
12248: MINUS
12249: PUSH
12250: LD_INT 0
12252: LESS
12253: IFFALSE 12265
// min_y := 0 else
12255: LD_ADDR_VAR 0 8
12259: PUSH
12260: LD_INT 0
12262: ST_TO_ADDR
12263: GO 12281
// min_y := y - r ;
12265: LD_ADDR_VAR 0 8
12269: PUSH
12270: LD_VAR 0 3
12274: PUSH
12275: LD_VAR 0 4
12279: MINUS
12280: ST_TO_ADDR
// max_x := x + r ;
12281: LD_ADDR_VAR 0 9
12285: PUSH
12286: LD_VAR 0 2
12290: PUSH
12291: LD_VAR 0 4
12295: PLUS
12296: ST_TO_ADDR
// max_y := y + r ;
12297: LD_ADDR_VAR 0 10
12301: PUSH
12302: LD_VAR 0 3
12306: PUSH
12307: LD_VAR 0 4
12311: PLUS
12312: ST_TO_ADDR
// for _x = min_x to max_x do
12313: LD_ADDR_VAR 0 11
12317: PUSH
12318: DOUBLE
12319: LD_VAR 0 7
12323: DEC
12324: ST_TO_ADDR
12325: LD_VAR 0 9
12329: PUSH
12330: FOR_TO
12331: IFFALSE 12448
// for _y = min_y to max_y do
12333: LD_ADDR_VAR 0 12
12337: PUSH
12338: DOUBLE
12339: LD_VAR 0 8
12343: DEC
12344: ST_TO_ADDR
12345: LD_VAR 0 10
12349: PUSH
12350: FOR_TO
12351: IFFALSE 12444
// begin if not ValidHex ( _x , _y ) then
12353: LD_VAR 0 11
12357: PPUSH
12358: LD_VAR 0 12
12362: PPUSH
12363: CALL_OW 488
12367: NOT
12368: IFFALSE 12372
// continue ;
12370: GO 12350
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12372: LD_VAR 0 11
12376: PPUSH
12377: LD_VAR 0 12
12381: PPUSH
12382: CALL_OW 351
12386: PUSH
12387: LD_VAR 0 11
12391: PPUSH
12392: LD_VAR 0 12
12396: PPUSH
12397: CALL_OW 554
12401: AND
12402: IFFALSE 12442
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12404: LD_ADDR_VAR 0 13
12408: PUSH
12409: LD_VAR 0 13
12413: PPUSH
12414: LD_VAR 0 13
12418: PUSH
12419: LD_INT 1
12421: PLUS
12422: PPUSH
12423: LD_VAR 0 11
12427: PUSH
12428: LD_VAR 0 12
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PPUSH
12437: CALL_OW 2
12441: ST_TO_ADDR
// end ;
12442: GO 12350
12444: POP
12445: POP
12446: GO 12330
12448: POP
12449: POP
// if not list then
12450: LD_VAR 0 13
12454: NOT
12455: IFFALSE 12459
// exit ;
12457: GO 12530
// for i in list do
12459: LD_ADDR_VAR 0 6
12463: PUSH
12464: LD_VAR 0 13
12468: PUSH
12469: FOR_IN
12470: IFFALSE 12528
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
12472: LD_VAR 0 1
12476: PPUSH
12477: LD_STRING M
12479: PUSH
12480: LD_VAR 0 6
12484: PUSH
12485: LD_INT 1
12487: ARRAY
12488: PUSH
12489: LD_VAR 0 6
12493: PUSH
12494: LD_INT 2
12496: ARRAY
12497: PUSH
12498: LD_INT 0
12500: PUSH
12501: LD_INT 0
12503: PUSH
12504: LD_INT 0
12506: PUSH
12507: LD_INT 0
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: PUSH
12519: EMPTY
12520: LIST
12521: PPUSH
12522: CALL_OW 447
12526: GO 12469
12528: POP
12529: POP
// end ;
12530: LD_VAR 0 5
12534: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
12535: LD_INT 0
12537: PPUSH
12538: PPUSH
12539: PPUSH
12540: PPUSH
12541: PPUSH
12542: PPUSH
12543: PPUSH
12544: PPUSH
12545: PPUSH
12546: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
12547: LD_VAR 0 1
12551: PPUSH
12552: CALL_OW 302
12556: NOT
12557: PUSH
12558: LD_VAR 0 2
12562: PPUSH
12563: LD_VAR 0 3
12567: PPUSH
12568: CALL_OW 488
12572: NOT
12573: OR
12574: PUSH
12575: LD_VAR 0 4
12579: NOT
12580: OR
12581: IFFALSE 12585
// exit ;
12583: GO 13098
// list := [ ] ;
12585: LD_ADDR_VAR 0 13
12589: PUSH
12590: EMPTY
12591: ST_TO_ADDR
// if x - r < 0 then
12592: LD_VAR 0 2
12596: PUSH
12597: LD_VAR 0 4
12601: MINUS
12602: PUSH
12603: LD_INT 0
12605: LESS
12606: IFFALSE 12618
// min_x := 0 else
12608: LD_ADDR_VAR 0 7
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
12616: GO 12634
// min_x := x - r ;
12618: LD_ADDR_VAR 0 7
12622: PUSH
12623: LD_VAR 0 2
12627: PUSH
12628: LD_VAR 0 4
12632: MINUS
12633: ST_TO_ADDR
// if y - r < 0 then
12634: LD_VAR 0 3
12638: PUSH
12639: LD_VAR 0 4
12643: MINUS
12644: PUSH
12645: LD_INT 0
12647: LESS
12648: IFFALSE 12660
// min_y := 0 else
12650: LD_ADDR_VAR 0 8
12654: PUSH
12655: LD_INT 0
12657: ST_TO_ADDR
12658: GO 12676
// min_y := y - r ;
12660: LD_ADDR_VAR 0 8
12664: PUSH
12665: LD_VAR 0 3
12669: PUSH
12670: LD_VAR 0 4
12674: MINUS
12675: ST_TO_ADDR
// max_x := x + r ;
12676: LD_ADDR_VAR 0 9
12680: PUSH
12681: LD_VAR 0 2
12685: PUSH
12686: LD_VAR 0 4
12690: PLUS
12691: ST_TO_ADDR
// max_y := y + r ;
12692: LD_ADDR_VAR 0 10
12696: PUSH
12697: LD_VAR 0 3
12701: PUSH
12702: LD_VAR 0 4
12706: PLUS
12707: ST_TO_ADDR
// for _x = min_x to max_x do
12708: LD_ADDR_VAR 0 11
12712: PUSH
12713: DOUBLE
12714: LD_VAR 0 7
12718: DEC
12719: ST_TO_ADDR
12720: LD_VAR 0 9
12724: PUSH
12725: FOR_TO
12726: IFFALSE 12843
// for _y = min_y to max_y do
12728: LD_ADDR_VAR 0 12
12732: PUSH
12733: DOUBLE
12734: LD_VAR 0 8
12738: DEC
12739: ST_TO_ADDR
12740: LD_VAR 0 10
12744: PUSH
12745: FOR_TO
12746: IFFALSE 12839
// begin if not ValidHex ( _x , _y ) then
12748: LD_VAR 0 11
12752: PPUSH
12753: LD_VAR 0 12
12757: PPUSH
12758: CALL_OW 488
12762: NOT
12763: IFFALSE 12767
// continue ;
12765: GO 12745
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12767: LD_VAR 0 11
12771: PPUSH
12772: LD_VAR 0 12
12776: PPUSH
12777: CALL_OW 351
12781: PUSH
12782: LD_VAR 0 11
12786: PPUSH
12787: LD_VAR 0 12
12791: PPUSH
12792: CALL_OW 554
12796: AND
12797: IFFALSE 12837
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12799: LD_ADDR_VAR 0 13
12803: PUSH
12804: LD_VAR 0 13
12808: PPUSH
12809: LD_VAR 0 13
12813: PUSH
12814: LD_INT 1
12816: PLUS
12817: PPUSH
12818: LD_VAR 0 11
12822: PUSH
12823: LD_VAR 0 12
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PPUSH
12832: CALL_OW 2
12836: ST_TO_ADDR
// end ;
12837: GO 12745
12839: POP
12840: POP
12841: GO 12725
12843: POP
12844: POP
// if not list then
12845: LD_VAR 0 13
12849: NOT
12850: IFFALSE 12854
// exit ;
12852: GO 13098
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
12854: LD_ADDR_VAR 0 13
12858: PUSH
12859: LD_VAR 0 1
12863: PPUSH
12864: LD_VAR 0 13
12868: PPUSH
12869: LD_INT 1
12871: PPUSH
12872: LD_INT 1
12874: PPUSH
12875: CALL 21811 0 4
12879: ST_TO_ADDR
// ComStop ( flame ) ;
12880: LD_VAR 0 1
12884: PPUSH
12885: CALL_OW 141
// for i in list do
12889: LD_ADDR_VAR 0 6
12893: PUSH
12894: LD_VAR 0 13
12898: PUSH
12899: FOR_IN
12900: IFFALSE 12931
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
12902: LD_VAR 0 1
12906: PPUSH
12907: LD_VAR 0 6
12911: PUSH
12912: LD_INT 1
12914: ARRAY
12915: PPUSH
12916: LD_VAR 0 6
12920: PUSH
12921: LD_INT 2
12923: ARRAY
12924: PPUSH
12925: CALL_OW 176
12929: GO 12899
12931: POP
12932: POP
// repeat wait ( 0 0$1 ) ;
12933: LD_INT 35
12935: PPUSH
12936: CALL_OW 67
// task := GetTaskList ( flame ) ;
12940: LD_ADDR_VAR 0 14
12944: PUSH
12945: LD_VAR 0 1
12949: PPUSH
12950: CALL_OW 437
12954: ST_TO_ADDR
// if not task then
12955: LD_VAR 0 14
12959: NOT
12960: IFFALSE 12964
// exit ;
12962: GO 13098
// if task [ 1 ] [ 1 ] <> | then
12964: LD_VAR 0 14
12968: PUSH
12969: LD_INT 1
12971: ARRAY
12972: PUSH
12973: LD_INT 1
12975: ARRAY
12976: PUSH
12977: LD_STRING |
12979: NONEQUAL
12980: IFFALSE 12984
// exit ;
12982: GO 13098
// _x := task [ 1 ] [ 2 ] ;
12984: LD_ADDR_VAR 0 11
12988: PUSH
12989: LD_VAR 0 14
12993: PUSH
12994: LD_INT 1
12996: ARRAY
12997: PUSH
12998: LD_INT 2
13000: ARRAY
13001: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
13002: LD_ADDR_VAR 0 12
13006: PUSH
13007: LD_VAR 0 14
13011: PUSH
13012: LD_INT 1
13014: ARRAY
13015: PUSH
13016: LD_INT 3
13018: ARRAY
13019: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
13020: LD_VAR 0 11
13024: PPUSH
13025: LD_VAR 0 12
13029: PPUSH
13030: CALL_OW 351
13034: NOT
13035: PUSH
13036: LD_VAR 0 11
13040: PPUSH
13041: LD_VAR 0 12
13045: PPUSH
13046: CALL_OW 554
13050: NOT
13051: OR
13052: IFFALSE 13086
// begin task := Delete ( task , 1 ) ;
13054: LD_ADDR_VAR 0 14
13058: PUSH
13059: LD_VAR 0 14
13063: PPUSH
13064: LD_INT 1
13066: PPUSH
13067: CALL_OW 3
13071: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
13072: LD_VAR 0 1
13076: PPUSH
13077: LD_VAR 0 14
13081: PPUSH
13082: CALL_OW 446
// end ; until not HasTask ( flame ) ;
13086: LD_VAR 0 1
13090: PPUSH
13091: CALL_OW 314
13095: NOT
13096: IFFALSE 12933
// end ;
13098: LD_VAR 0 5
13102: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
13103: LD_EXP 42
13107: NOT
13108: IFFALSE 13158
13110: GO 13112
13112: DISABLE
// begin initHack := true ;
13113: LD_ADDR_EXP 42
13117: PUSH
13118: LD_INT 1
13120: ST_TO_ADDR
// hackTanks := [ ] ;
13121: LD_ADDR_EXP 43
13125: PUSH
13126: EMPTY
13127: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
13128: LD_ADDR_EXP 44
13132: PUSH
13133: EMPTY
13134: ST_TO_ADDR
// hackLimit := 3 ;
13135: LD_ADDR_EXP 45
13139: PUSH
13140: LD_INT 3
13142: ST_TO_ADDR
// hackDist := 12 ;
13143: LD_ADDR_EXP 46
13147: PUSH
13148: LD_INT 12
13150: ST_TO_ADDR
// hackCounter := [ ] ;
13151: LD_ADDR_EXP 47
13155: PUSH
13156: EMPTY
13157: ST_TO_ADDR
// end ;
13158: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
13159: LD_EXP 42
13163: PUSH
13164: LD_INT 34
13166: PUSH
13167: LD_INT 99
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PPUSH
13174: CALL_OW 69
13178: AND
13179: IFFALSE 13432
13181: GO 13183
13183: DISABLE
13184: LD_INT 0
13186: PPUSH
13187: PPUSH
// begin enable ;
13188: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
13189: LD_ADDR_VAR 0 1
13193: PUSH
13194: LD_INT 34
13196: PUSH
13197: LD_INT 99
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PPUSH
13204: CALL_OW 69
13208: PUSH
13209: FOR_IN
13210: IFFALSE 13430
// begin if not i in hackTanks then
13212: LD_VAR 0 1
13216: PUSH
13217: LD_EXP 43
13221: IN
13222: NOT
13223: IFFALSE 13306
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
13225: LD_ADDR_EXP 43
13229: PUSH
13230: LD_EXP 43
13234: PPUSH
13235: LD_EXP 43
13239: PUSH
13240: LD_INT 1
13242: PLUS
13243: PPUSH
13244: LD_VAR 0 1
13248: PPUSH
13249: CALL_OW 1
13253: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
13254: LD_ADDR_EXP 44
13258: PUSH
13259: LD_EXP 44
13263: PPUSH
13264: LD_EXP 44
13268: PUSH
13269: LD_INT 1
13271: PLUS
13272: PPUSH
13273: EMPTY
13274: PPUSH
13275: CALL_OW 1
13279: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
13280: LD_ADDR_EXP 47
13284: PUSH
13285: LD_EXP 47
13289: PPUSH
13290: LD_EXP 47
13294: PUSH
13295: LD_INT 1
13297: PLUS
13298: PPUSH
13299: EMPTY
13300: PPUSH
13301: CALL_OW 1
13305: ST_TO_ADDR
// end ; if not IsOk ( i ) then
13306: LD_VAR 0 1
13310: PPUSH
13311: CALL_OW 302
13315: NOT
13316: IFFALSE 13329
// begin HackUnlinkAll ( i ) ;
13318: LD_VAR 0 1
13322: PPUSH
13323: CALL 13435 0 1
// continue ;
13327: GO 13209
// end ; HackCheckCapturedStatus ( i ) ;
13329: LD_VAR 0 1
13333: PPUSH
13334: CALL 13878 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
13338: LD_ADDR_VAR 0 2
13342: PUSH
13343: LD_INT 81
13345: PUSH
13346: LD_VAR 0 1
13350: PPUSH
13351: CALL_OW 255
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PUSH
13360: LD_INT 33
13362: PUSH
13363: LD_INT 3
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 91
13372: PUSH
13373: LD_VAR 0 1
13377: PUSH
13378: LD_EXP 46
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 50
13390: PUSH
13391: EMPTY
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: PPUSH
13400: CALL_OW 69
13404: ST_TO_ADDR
// if not tmp then
13405: LD_VAR 0 2
13409: NOT
13410: IFFALSE 13414
// continue ;
13412: GO 13209
// HackLink ( i , tmp ) ;
13414: LD_VAR 0 1
13418: PPUSH
13419: LD_VAR 0 2
13423: PPUSH
13424: CALL 13571 0 2
// end ;
13428: GO 13209
13430: POP
13431: POP
// end ;
13432: PPOPN 2
13434: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
13435: LD_INT 0
13437: PPUSH
13438: PPUSH
13439: PPUSH
// if not hack in hackTanks then
13440: LD_VAR 0 1
13444: PUSH
13445: LD_EXP 43
13449: IN
13450: NOT
13451: IFFALSE 13455
// exit ;
13453: GO 13566
// index := GetElementIndex ( hackTanks , hack ) ;
13455: LD_ADDR_VAR 0 4
13459: PUSH
13460: LD_EXP 43
13464: PPUSH
13465: LD_VAR 0 1
13469: PPUSH
13470: CALL 21108 0 2
13474: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
13475: LD_EXP 44
13479: PUSH
13480: LD_VAR 0 4
13484: ARRAY
13485: IFFALSE 13566
// begin for i in hackTanksCaptured [ index ] do
13487: LD_ADDR_VAR 0 3
13491: PUSH
13492: LD_EXP 44
13496: PUSH
13497: LD_VAR 0 4
13501: ARRAY
13502: PUSH
13503: FOR_IN
13504: IFFALSE 13530
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
13506: LD_VAR 0 3
13510: PUSH
13511: LD_INT 1
13513: ARRAY
13514: PPUSH
13515: LD_VAR 0 3
13519: PUSH
13520: LD_INT 2
13522: ARRAY
13523: PPUSH
13524: CALL_OW 235
13528: GO 13503
13530: POP
13531: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
13532: LD_ADDR_EXP 44
13536: PUSH
13537: LD_EXP 44
13541: PPUSH
13542: LD_VAR 0 4
13546: PPUSH
13547: EMPTY
13548: PPUSH
13549: CALL_OW 1
13553: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
13554: LD_VAR 0 1
13558: PPUSH
13559: LD_INT 0
13561: PPUSH
13562: CALL_OW 505
// end ; end ;
13566: LD_VAR 0 2
13570: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
13571: LD_INT 0
13573: PPUSH
13574: PPUSH
13575: PPUSH
// if not hack in hackTanks or not vehicles then
13576: LD_VAR 0 1
13580: PUSH
13581: LD_EXP 43
13585: IN
13586: NOT
13587: PUSH
13588: LD_VAR 0 2
13592: NOT
13593: OR
13594: IFFALSE 13598
// exit ;
13596: GO 13873
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
13598: LD_ADDR_VAR 0 2
13602: PUSH
13603: LD_VAR 0 1
13607: PPUSH
13608: LD_VAR 0 2
13612: PPUSH
13613: LD_INT 1
13615: PPUSH
13616: LD_INT 1
13618: PPUSH
13619: CALL 21758 0 4
13623: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
13624: LD_ADDR_VAR 0 5
13628: PUSH
13629: LD_EXP 43
13633: PPUSH
13634: LD_VAR 0 1
13638: PPUSH
13639: CALL 21108 0 2
13643: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
13644: LD_EXP 44
13648: PUSH
13649: LD_VAR 0 5
13653: ARRAY
13654: PUSH
13655: LD_EXP 45
13659: LESS
13660: IFFALSE 13849
// begin for i := 1 to vehicles do
13662: LD_ADDR_VAR 0 4
13666: PUSH
13667: DOUBLE
13668: LD_INT 1
13670: DEC
13671: ST_TO_ADDR
13672: LD_VAR 0 2
13676: PUSH
13677: FOR_TO
13678: IFFALSE 13847
// begin if hackTanksCaptured [ index ] = hackLimit then
13680: LD_EXP 44
13684: PUSH
13685: LD_VAR 0 5
13689: ARRAY
13690: PUSH
13691: LD_EXP 45
13695: EQUAL
13696: IFFALSE 13700
// break ;
13698: GO 13847
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
13700: LD_ADDR_EXP 47
13704: PUSH
13705: LD_EXP 47
13709: PPUSH
13710: LD_VAR 0 5
13714: PPUSH
13715: LD_EXP 47
13719: PUSH
13720: LD_VAR 0 5
13724: ARRAY
13725: PUSH
13726: LD_INT 1
13728: PLUS
13729: PPUSH
13730: CALL_OW 1
13734: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
13735: LD_ADDR_EXP 44
13739: PUSH
13740: LD_EXP 44
13744: PPUSH
13745: LD_VAR 0 5
13749: PUSH
13750: LD_EXP 44
13754: PUSH
13755: LD_VAR 0 5
13759: ARRAY
13760: PUSH
13761: LD_INT 1
13763: PLUS
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PPUSH
13769: LD_VAR 0 2
13773: PUSH
13774: LD_VAR 0 4
13778: ARRAY
13779: PUSH
13780: LD_VAR 0 2
13784: PUSH
13785: LD_VAR 0 4
13789: ARRAY
13790: PPUSH
13791: CALL_OW 255
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PPUSH
13800: CALL 21323 0 3
13804: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
13805: LD_VAR 0 2
13809: PUSH
13810: LD_VAR 0 4
13814: ARRAY
13815: PPUSH
13816: LD_VAR 0 1
13820: PPUSH
13821: CALL_OW 255
13825: PPUSH
13826: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
13830: LD_VAR 0 2
13834: PUSH
13835: LD_VAR 0 4
13839: ARRAY
13840: PPUSH
13841: CALL_OW 141
// end ;
13845: GO 13677
13847: POP
13848: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13849: LD_VAR 0 1
13853: PPUSH
13854: LD_EXP 44
13858: PUSH
13859: LD_VAR 0 5
13863: ARRAY
13864: PUSH
13865: LD_INT 0
13867: PLUS
13868: PPUSH
13869: CALL_OW 505
// end ;
13873: LD_VAR 0 3
13877: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
13878: LD_INT 0
13880: PPUSH
13881: PPUSH
13882: PPUSH
13883: PPUSH
// if not hack in hackTanks then
13884: LD_VAR 0 1
13888: PUSH
13889: LD_EXP 43
13893: IN
13894: NOT
13895: IFFALSE 13899
// exit ;
13897: GO 14139
// index := GetElementIndex ( hackTanks , hack ) ;
13899: LD_ADDR_VAR 0 4
13903: PUSH
13904: LD_EXP 43
13908: PPUSH
13909: LD_VAR 0 1
13913: PPUSH
13914: CALL 21108 0 2
13918: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
13919: LD_ADDR_VAR 0 3
13923: PUSH
13924: DOUBLE
13925: LD_EXP 44
13929: PUSH
13930: LD_VAR 0 4
13934: ARRAY
13935: INC
13936: ST_TO_ADDR
13937: LD_INT 1
13939: PUSH
13940: FOR_DOWNTO
13941: IFFALSE 14113
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
13943: LD_ADDR_VAR 0 5
13947: PUSH
13948: LD_EXP 44
13952: PUSH
13953: LD_VAR 0 4
13957: ARRAY
13958: PUSH
13959: LD_VAR 0 3
13963: ARRAY
13964: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
13965: LD_VAR 0 5
13969: PUSH
13970: LD_INT 1
13972: ARRAY
13973: PPUSH
13974: CALL_OW 302
13978: NOT
13979: PUSH
13980: LD_VAR 0 5
13984: PUSH
13985: LD_INT 1
13987: ARRAY
13988: PPUSH
13989: CALL_OW 255
13993: PUSH
13994: LD_VAR 0 1
13998: PPUSH
13999: CALL_OW 255
14003: NONEQUAL
14004: OR
14005: IFFALSE 14111
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
14007: LD_VAR 0 5
14011: PUSH
14012: LD_INT 1
14014: ARRAY
14015: PPUSH
14016: CALL_OW 305
14020: PUSH
14021: LD_VAR 0 5
14025: PUSH
14026: LD_INT 1
14028: ARRAY
14029: PPUSH
14030: CALL_OW 255
14034: PUSH
14035: LD_VAR 0 1
14039: PPUSH
14040: CALL_OW 255
14044: EQUAL
14045: AND
14046: IFFALSE 14070
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
14048: LD_VAR 0 5
14052: PUSH
14053: LD_INT 1
14055: ARRAY
14056: PPUSH
14057: LD_VAR 0 5
14061: PUSH
14062: LD_INT 2
14064: ARRAY
14065: PPUSH
14066: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
14070: LD_ADDR_EXP 44
14074: PUSH
14075: LD_EXP 44
14079: PPUSH
14080: LD_VAR 0 4
14084: PPUSH
14085: LD_EXP 44
14089: PUSH
14090: LD_VAR 0 4
14094: ARRAY
14095: PPUSH
14096: LD_VAR 0 3
14100: PPUSH
14101: CALL_OW 3
14105: PPUSH
14106: CALL_OW 1
14110: ST_TO_ADDR
// end ; end ;
14111: GO 13940
14113: POP
14114: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
14115: LD_VAR 0 1
14119: PPUSH
14120: LD_EXP 44
14124: PUSH
14125: LD_VAR 0 4
14129: ARRAY
14130: PUSH
14131: LD_INT 0
14133: PLUS
14134: PPUSH
14135: CALL_OW 505
// end ;
14139: LD_VAR 0 2
14143: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
14144: LD_INT 0
14146: PPUSH
14147: PPUSH
14148: PPUSH
14149: PPUSH
// if not hack in hackTanks then
14150: LD_VAR 0 1
14154: PUSH
14155: LD_EXP 43
14159: IN
14160: NOT
14161: IFFALSE 14165
// exit ;
14163: GO 14250
// index := GetElementIndex ( hackTanks , hack ) ;
14165: LD_ADDR_VAR 0 5
14169: PUSH
14170: LD_EXP 43
14174: PPUSH
14175: LD_VAR 0 1
14179: PPUSH
14180: CALL 21108 0 2
14184: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
14185: LD_ADDR_VAR 0 4
14189: PUSH
14190: DOUBLE
14191: LD_INT 1
14193: DEC
14194: ST_TO_ADDR
14195: LD_EXP 44
14199: PUSH
14200: LD_VAR 0 5
14204: ARRAY
14205: PUSH
14206: FOR_TO
14207: IFFALSE 14248
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
14209: LD_EXP 44
14213: PUSH
14214: LD_VAR 0 5
14218: ARRAY
14219: PUSH
14220: LD_VAR 0 4
14224: ARRAY
14225: PUSH
14226: LD_INT 1
14228: ARRAY
14229: PUSH
14230: LD_VAR 0 2
14234: EQUAL
14235: IFFALSE 14246
// KillUnit ( vehicle ) ;
14237: LD_VAR 0 2
14241: PPUSH
14242: CALL_OW 66
14246: GO 14206
14248: POP
14249: POP
// end ;
14250: LD_VAR 0 3
14254: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
14255: LD_EXP 48
14259: NOT
14260: IFFALSE 14295
14262: GO 14264
14264: DISABLE
// begin initMiner := true ;
14265: LD_ADDR_EXP 48
14269: PUSH
14270: LD_INT 1
14272: ST_TO_ADDR
// minersList := [ ] ;
14273: LD_ADDR_EXP 49
14277: PUSH
14278: EMPTY
14279: ST_TO_ADDR
// minerMinesList := [ ] ;
14280: LD_ADDR_EXP 50
14284: PUSH
14285: EMPTY
14286: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
14287: LD_ADDR_EXP 51
14291: PUSH
14292: LD_INT 5
14294: ST_TO_ADDR
// end ;
14295: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
14296: LD_EXP 48
14300: PUSH
14301: LD_INT 34
14303: PUSH
14304: LD_INT 81
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PPUSH
14311: CALL_OW 69
14315: AND
14316: IFFALSE 14777
14318: GO 14320
14320: DISABLE
14321: LD_INT 0
14323: PPUSH
14324: PPUSH
14325: PPUSH
14326: PPUSH
// begin enable ;
14327: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
14328: LD_ADDR_VAR 0 1
14332: PUSH
14333: LD_INT 34
14335: PUSH
14336: LD_INT 81
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PPUSH
14343: CALL_OW 69
14347: PUSH
14348: FOR_IN
14349: IFFALSE 14421
// begin if not i in minersList then
14351: LD_VAR 0 1
14355: PUSH
14356: LD_EXP 49
14360: IN
14361: NOT
14362: IFFALSE 14419
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
14364: LD_ADDR_EXP 49
14368: PUSH
14369: LD_EXP 49
14373: PPUSH
14374: LD_EXP 49
14378: PUSH
14379: LD_INT 1
14381: PLUS
14382: PPUSH
14383: LD_VAR 0 1
14387: PPUSH
14388: CALL_OW 1
14392: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
14393: LD_ADDR_EXP 50
14397: PUSH
14398: LD_EXP 50
14402: PPUSH
14403: LD_EXP 50
14407: PUSH
14408: LD_INT 1
14410: PLUS
14411: PPUSH
14412: EMPTY
14413: PPUSH
14414: CALL_OW 1
14418: ST_TO_ADDR
// end end ;
14419: GO 14348
14421: POP
14422: POP
// for i := minerMinesList downto 1 do
14423: LD_ADDR_VAR 0 1
14427: PUSH
14428: DOUBLE
14429: LD_EXP 50
14433: INC
14434: ST_TO_ADDR
14435: LD_INT 1
14437: PUSH
14438: FOR_DOWNTO
14439: IFFALSE 14775
// begin if IsLive ( minersList [ i ] ) then
14441: LD_EXP 49
14445: PUSH
14446: LD_VAR 0 1
14450: ARRAY
14451: PPUSH
14452: CALL_OW 300
14456: IFFALSE 14484
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
14458: LD_EXP 49
14462: PUSH
14463: LD_VAR 0 1
14467: ARRAY
14468: PPUSH
14469: LD_EXP 50
14473: PUSH
14474: LD_VAR 0 1
14478: ARRAY
14479: PPUSH
14480: CALL_OW 505
// if not minerMinesList [ i ] then
14484: LD_EXP 50
14488: PUSH
14489: LD_VAR 0 1
14493: ARRAY
14494: NOT
14495: IFFALSE 14499
// continue ;
14497: GO 14438
// for j := minerMinesList [ i ] downto 1 do
14499: LD_ADDR_VAR 0 2
14503: PUSH
14504: DOUBLE
14505: LD_EXP 50
14509: PUSH
14510: LD_VAR 0 1
14514: ARRAY
14515: INC
14516: ST_TO_ADDR
14517: LD_INT 1
14519: PUSH
14520: FOR_DOWNTO
14521: IFFALSE 14771
// begin side := GetSide ( minersList [ i ] ) ;
14523: LD_ADDR_VAR 0 3
14527: PUSH
14528: LD_EXP 49
14532: PUSH
14533: LD_VAR 0 1
14537: ARRAY
14538: PPUSH
14539: CALL_OW 255
14543: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
14544: LD_ADDR_VAR 0 4
14548: PUSH
14549: LD_EXP 50
14553: PUSH
14554: LD_VAR 0 1
14558: ARRAY
14559: PUSH
14560: LD_VAR 0 2
14564: ARRAY
14565: PUSH
14566: LD_INT 1
14568: ARRAY
14569: PPUSH
14570: LD_EXP 50
14574: PUSH
14575: LD_VAR 0 1
14579: ARRAY
14580: PUSH
14581: LD_VAR 0 2
14585: ARRAY
14586: PUSH
14587: LD_INT 2
14589: ARRAY
14590: PPUSH
14591: CALL_OW 428
14595: ST_TO_ADDR
// if not tmp then
14596: LD_VAR 0 4
14600: NOT
14601: IFFALSE 14605
// continue ;
14603: GO 14520
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
14605: LD_VAR 0 4
14609: PUSH
14610: LD_INT 81
14612: PUSH
14613: LD_VAR 0 3
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PPUSH
14622: CALL_OW 69
14626: IN
14627: PUSH
14628: LD_EXP 50
14632: PUSH
14633: LD_VAR 0 1
14637: ARRAY
14638: PUSH
14639: LD_VAR 0 2
14643: ARRAY
14644: PUSH
14645: LD_INT 1
14647: ARRAY
14648: PPUSH
14649: LD_EXP 50
14653: PUSH
14654: LD_VAR 0 1
14658: ARRAY
14659: PUSH
14660: LD_VAR 0 2
14664: ARRAY
14665: PUSH
14666: LD_INT 2
14668: ARRAY
14669: PPUSH
14670: CALL_OW 458
14674: AND
14675: IFFALSE 14769
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
14677: LD_EXP 50
14681: PUSH
14682: LD_VAR 0 1
14686: ARRAY
14687: PUSH
14688: LD_VAR 0 2
14692: ARRAY
14693: PUSH
14694: LD_INT 1
14696: ARRAY
14697: PPUSH
14698: LD_EXP 50
14702: PUSH
14703: LD_VAR 0 1
14707: ARRAY
14708: PUSH
14709: LD_VAR 0 2
14713: ARRAY
14714: PUSH
14715: LD_INT 2
14717: ARRAY
14718: PPUSH
14719: LD_VAR 0 3
14723: PPUSH
14724: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
14728: LD_ADDR_EXP 50
14732: PUSH
14733: LD_EXP 50
14737: PPUSH
14738: LD_VAR 0 1
14742: PPUSH
14743: LD_EXP 50
14747: PUSH
14748: LD_VAR 0 1
14752: ARRAY
14753: PPUSH
14754: LD_VAR 0 2
14758: PPUSH
14759: CALL_OW 3
14763: PPUSH
14764: CALL_OW 1
14768: ST_TO_ADDR
// end ; end ;
14769: GO 14520
14771: POP
14772: POP
// end ;
14773: GO 14438
14775: POP
14776: POP
// end ;
14777: PPOPN 4
14779: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
14780: LD_INT 0
14782: PPUSH
14783: PPUSH
// result := false ;
14784: LD_ADDR_VAR 0 4
14788: PUSH
14789: LD_INT 0
14791: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
14792: LD_VAR 0 1
14796: PPUSH
14797: CALL_OW 264
14801: PUSH
14802: LD_INT 81
14804: EQUAL
14805: NOT
14806: IFFALSE 14810
// exit ;
14808: GO 15050
// index := GetElementIndex ( minersList , unit ) ;
14810: LD_ADDR_VAR 0 5
14814: PUSH
14815: LD_EXP 49
14819: PPUSH
14820: LD_VAR 0 1
14824: PPUSH
14825: CALL 21108 0 2
14829: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
14830: LD_EXP 50
14834: PUSH
14835: LD_VAR 0 5
14839: ARRAY
14840: PUSH
14841: LD_EXP 51
14845: GREATEREQUAL
14846: IFFALSE 14850
// exit ;
14848: GO 15050
// ComMoveXY ( unit , x , y ) ;
14850: LD_VAR 0 1
14854: PPUSH
14855: LD_VAR 0 2
14859: PPUSH
14860: LD_VAR 0 3
14864: PPUSH
14865: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14869: LD_INT 35
14871: PPUSH
14872: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
14876: LD_VAR 0 1
14880: PPUSH
14881: LD_VAR 0 2
14885: PPUSH
14886: LD_VAR 0 3
14890: PPUSH
14891: CALL 52869 0 3
14895: NOT
14896: PUSH
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 314
14906: AND
14907: IFFALSE 14911
// exit ;
14909: GO 15050
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
14911: LD_VAR 0 2
14915: PPUSH
14916: LD_VAR 0 3
14920: PPUSH
14921: CALL_OW 428
14925: PUSH
14926: LD_VAR 0 1
14930: EQUAL
14931: PUSH
14932: LD_VAR 0 1
14936: PPUSH
14937: CALL_OW 314
14941: NOT
14942: AND
14943: IFFALSE 14869
// PlaySoundXY ( x , y , PlantMine ) ;
14945: LD_VAR 0 2
14949: PPUSH
14950: LD_VAR 0 3
14954: PPUSH
14955: LD_STRING PlantMine
14957: PPUSH
14958: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
14962: LD_VAR 0 2
14966: PPUSH
14967: LD_VAR 0 3
14971: PPUSH
14972: LD_VAR 0 1
14976: PPUSH
14977: CALL_OW 255
14981: PPUSH
14982: LD_INT 0
14984: PPUSH
14985: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
14989: LD_ADDR_EXP 50
14993: PUSH
14994: LD_EXP 50
14998: PPUSH
14999: LD_VAR 0 5
15003: PUSH
15004: LD_EXP 50
15008: PUSH
15009: LD_VAR 0 5
15013: ARRAY
15014: PUSH
15015: LD_INT 1
15017: PLUS
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PPUSH
15023: LD_VAR 0 2
15027: PUSH
15028: LD_VAR 0 3
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PPUSH
15037: CALL 21323 0 3
15041: ST_TO_ADDR
// result := true ;
15042: LD_ADDR_VAR 0 4
15046: PUSH
15047: LD_INT 1
15049: ST_TO_ADDR
// end ;
15050: LD_VAR 0 4
15054: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
15055: LD_INT 0
15057: PPUSH
15058: PPUSH
15059: PPUSH
// if not unit in minersList then
15060: LD_VAR 0 1
15064: PUSH
15065: LD_EXP 49
15069: IN
15070: NOT
15071: IFFALSE 15075
// exit ;
15073: GO 15467
// index := GetElementIndex ( minersList , unit ) ;
15075: LD_ADDR_VAR 0 6
15079: PUSH
15080: LD_EXP 49
15084: PPUSH
15085: LD_VAR 0 1
15089: PPUSH
15090: CALL 21108 0 2
15094: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
15095: LD_ADDR_VAR 0 5
15099: PUSH
15100: DOUBLE
15101: LD_EXP 50
15105: PUSH
15106: LD_VAR 0 6
15110: ARRAY
15111: INC
15112: ST_TO_ADDR
15113: LD_INT 1
15115: PUSH
15116: FOR_DOWNTO
15117: IFFALSE 15278
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
15119: LD_EXP 50
15123: PUSH
15124: LD_VAR 0 6
15128: ARRAY
15129: PUSH
15130: LD_VAR 0 5
15134: ARRAY
15135: PUSH
15136: LD_INT 1
15138: ARRAY
15139: PUSH
15140: LD_VAR 0 2
15144: EQUAL
15145: PUSH
15146: LD_EXP 50
15150: PUSH
15151: LD_VAR 0 6
15155: ARRAY
15156: PUSH
15157: LD_VAR 0 5
15161: ARRAY
15162: PUSH
15163: LD_INT 2
15165: ARRAY
15166: PUSH
15167: LD_VAR 0 3
15171: EQUAL
15172: AND
15173: IFFALSE 15276
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
15175: LD_EXP 50
15179: PUSH
15180: LD_VAR 0 6
15184: ARRAY
15185: PUSH
15186: LD_VAR 0 5
15190: ARRAY
15191: PUSH
15192: LD_INT 1
15194: ARRAY
15195: PPUSH
15196: LD_EXP 50
15200: PUSH
15201: LD_VAR 0 6
15205: ARRAY
15206: PUSH
15207: LD_VAR 0 5
15211: ARRAY
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: LD_VAR 0 1
15221: PPUSH
15222: CALL_OW 255
15226: PPUSH
15227: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
15231: LD_ADDR_EXP 50
15235: PUSH
15236: LD_EXP 50
15240: PPUSH
15241: LD_VAR 0 6
15245: PPUSH
15246: LD_EXP 50
15250: PUSH
15251: LD_VAR 0 6
15255: ARRAY
15256: PPUSH
15257: LD_VAR 0 5
15261: PPUSH
15262: CALL_OW 3
15266: PPUSH
15267: CALL_OW 1
15271: ST_TO_ADDR
// exit ;
15272: POP
15273: POP
15274: GO 15467
// end ; end ;
15276: GO 15116
15278: POP
15279: POP
// for i := minerMinesList [ index ] downto 1 do
15280: LD_ADDR_VAR 0 5
15284: PUSH
15285: DOUBLE
15286: LD_EXP 50
15290: PUSH
15291: LD_VAR 0 6
15295: ARRAY
15296: INC
15297: ST_TO_ADDR
15298: LD_INT 1
15300: PUSH
15301: FOR_DOWNTO
15302: IFFALSE 15465
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
15304: LD_EXP 50
15308: PUSH
15309: LD_VAR 0 6
15313: ARRAY
15314: PUSH
15315: LD_VAR 0 5
15319: ARRAY
15320: PUSH
15321: LD_INT 1
15323: ARRAY
15324: PPUSH
15325: LD_EXP 50
15329: PUSH
15330: LD_VAR 0 6
15334: ARRAY
15335: PUSH
15336: LD_VAR 0 5
15340: ARRAY
15341: PUSH
15342: LD_INT 2
15344: ARRAY
15345: PPUSH
15346: LD_VAR 0 2
15350: PPUSH
15351: LD_VAR 0 3
15355: PPUSH
15356: CALL_OW 298
15360: PUSH
15361: LD_INT 6
15363: LESS
15364: IFFALSE 15463
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
15366: LD_EXP 50
15370: PUSH
15371: LD_VAR 0 6
15375: ARRAY
15376: PUSH
15377: LD_VAR 0 5
15381: ARRAY
15382: PUSH
15383: LD_INT 1
15385: ARRAY
15386: PPUSH
15387: LD_EXP 50
15391: PUSH
15392: LD_VAR 0 6
15396: ARRAY
15397: PUSH
15398: LD_VAR 0 5
15402: ARRAY
15403: PUSH
15404: LD_INT 2
15406: ARRAY
15407: PPUSH
15408: LD_VAR 0 1
15412: PPUSH
15413: CALL_OW 255
15417: PPUSH
15418: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
15422: LD_ADDR_EXP 50
15426: PUSH
15427: LD_EXP 50
15431: PPUSH
15432: LD_VAR 0 6
15436: PPUSH
15437: LD_EXP 50
15441: PUSH
15442: LD_VAR 0 6
15446: ARRAY
15447: PPUSH
15448: LD_VAR 0 5
15452: PPUSH
15453: CALL_OW 3
15457: PPUSH
15458: CALL_OW 1
15462: ST_TO_ADDR
// end ; end ;
15463: GO 15301
15465: POP
15466: POP
// end ;
15467: LD_VAR 0 4
15471: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
15472: LD_INT 0
15474: PPUSH
15475: PPUSH
15476: PPUSH
15477: PPUSH
15478: PPUSH
15479: PPUSH
15480: PPUSH
15481: PPUSH
15482: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
15483: LD_VAR 0 1
15487: PPUSH
15488: CALL_OW 264
15492: PUSH
15493: LD_INT 81
15495: EQUAL
15496: NOT
15497: PUSH
15498: LD_VAR 0 1
15502: PUSH
15503: LD_EXP 49
15507: IN
15508: NOT
15509: OR
15510: IFFALSE 15514
// exit ;
15512: GO 15836
// index := GetElementIndex ( minersList , unit ) ;
15514: LD_ADDR_VAR 0 6
15518: PUSH
15519: LD_EXP 49
15523: PPUSH
15524: LD_VAR 0 1
15528: PPUSH
15529: CALL 21108 0 2
15533: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
15534: LD_ADDR_VAR 0 8
15538: PUSH
15539: LD_EXP 51
15543: PUSH
15544: LD_EXP 50
15548: PUSH
15549: LD_VAR 0 6
15553: ARRAY
15554: MINUS
15555: ST_TO_ADDR
// if not minesFreeAmount then
15556: LD_VAR 0 8
15560: NOT
15561: IFFALSE 15565
// exit ;
15563: GO 15836
// tmp := [ ] ;
15565: LD_ADDR_VAR 0 7
15569: PUSH
15570: EMPTY
15571: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
15572: LD_ADDR_VAR 0 5
15576: PUSH
15577: DOUBLE
15578: LD_INT 1
15580: DEC
15581: ST_TO_ADDR
15582: LD_VAR 0 8
15586: PUSH
15587: FOR_TO
15588: IFFALSE 15783
// begin _d := rand ( 0 , 5 ) ;
15590: LD_ADDR_VAR 0 11
15594: PUSH
15595: LD_INT 0
15597: PPUSH
15598: LD_INT 5
15600: PPUSH
15601: CALL_OW 12
15605: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
15606: LD_ADDR_VAR 0 12
15610: PUSH
15611: LD_INT 2
15613: PPUSH
15614: LD_INT 6
15616: PPUSH
15617: CALL_OW 12
15621: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
15622: LD_ADDR_VAR 0 9
15626: PUSH
15627: LD_VAR 0 2
15631: PPUSH
15632: LD_VAR 0 11
15636: PPUSH
15637: LD_VAR 0 12
15641: PPUSH
15642: CALL_OW 272
15646: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
15647: LD_ADDR_VAR 0 10
15651: PUSH
15652: LD_VAR 0 3
15656: PPUSH
15657: LD_VAR 0 11
15661: PPUSH
15662: LD_VAR 0 12
15666: PPUSH
15667: CALL_OW 273
15671: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
15672: LD_VAR 0 9
15676: PPUSH
15677: LD_VAR 0 10
15681: PPUSH
15682: CALL_OW 488
15686: PUSH
15687: LD_VAR 0 9
15691: PUSH
15692: LD_VAR 0 10
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_VAR 0 7
15705: IN
15706: NOT
15707: AND
15708: PUSH
15709: LD_VAR 0 9
15713: PPUSH
15714: LD_VAR 0 10
15718: PPUSH
15719: CALL_OW 458
15723: NOT
15724: AND
15725: IFFALSE 15767
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
15727: LD_ADDR_VAR 0 7
15731: PUSH
15732: LD_VAR 0 7
15736: PPUSH
15737: LD_VAR 0 7
15741: PUSH
15742: LD_INT 1
15744: PLUS
15745: PPUSH
15746: LD_VAR 0 9
15750: PUSH
15751: LD_VAR 0 10
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: PPUSH
15760: CALL_OW 1
15764: ST_TO_ADDR
15765: GO 15781
// i := i - 1 ;
15767: LD_ADDR_VAR 0 5
15771: PUSH
15772: LD_VAR 0 5
15776: PUSH
15777: LD_INT 1
15779: MINUS
15780: ST_TO_ADDR
// end ;
15781: GO 15587
15783: POP
15784: POP
// for i in tmp do
15785: LD_ADDR_VAR 0 5
15789: PUSH
15790: LD_VAR 0 7
15794: PUSH
15795: FOR_IN
15796: IFFALSE 15834
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
15798: LD_VAR 0 1
15802: PPUSH
15803: LD_VAR 0 5
15807: PUSH
15808: LD_INT 1
15810: ARRAY
15811: PPUSH
15812: LD_VAR 0 5
15816: PUSH
15817: LD_INT 2
15819: ARRAY
15820: PPUSH
15821: CALL 14780 0 3
15825: NOT
15826: IFFALSE 15832
// exit ;
15828: POP
15829: POP
15830: GO 15836
15832: GO 15795
15834: POP
15835: POP
// end ;
15836: LD_VAR 0 4
15840: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
15841: LD_INT 0
15843: PPUSH
15844: PPUSH
15845: PPUSH
15846: PPUSH
15847: PPUSH
15848: PPUSH
15849: PPUSH
15850: PPUSH
15851: PPUSH
// if GetClass ( unit ) <> class_sniper then
15852: LD_VAR 0 1
15856: PPUSH
15857: CALL_OW 257
15861: PUSH
15862: LD_INT 5
15864: NONEQUAL
15865: IFFALSE 15869
// exit ;
15867: GO 16335
// dist := 8 ;
15869: LD_ADDR_VAR 0 5
15873: PUSH
15874: LD_INT 8
15876: ST_TO_ADDR
// viewRange := 12 ;
15877: LD_ADDR_VAR 0 8
15881: PUSH
15882: LD_INT 12
15884: ST_TO_ADDR
// side := GetSide ( unit ) ;
15885: LD_ADDR_VAR 0 6
15889: PUSH
15890: LD_VAR 0 1
15894: PPUSH
15895: CALL_OW 255
15899: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
15900: LD_INT 61
15902: PPUSH
15903: LD_VAR 0 6
15907: PPUSH
15908: CALL_OW 321
15912: PUSH
15913: LD_INT 2
15915: EQUAL
15916: IFFALSE 15926
// viewRange := 16 ;
15918: LD_ADDR_VAR 0 8
15922: PUSH
15923: LD_INT 16
15925: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
15926: LD_VAR 0 1
15930: PPUSH
15931: LD_VAR 0 2
15935: PPUSH
15936: LD_VAR 0 3
15940: PPUSH
15941: CALL_OW 297
15945: PUSH
15946: LD_VAR 0 5
15950: GREATER
15951: IFFALSE 16030
// begin ComMoveXY ( unit , x , y ) ;
15953: LD_VAR 0 1
15957: PPUSH
15958: LD_VAR 0 2
15962: PPUSH
15963: LD_VAR 0 3
15967: PPUSH
15968: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15972: LD_INT 35
15974: PPUSH
15975: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
15979: LD_VAR 0 1
15983: PPUSH
15984: LD_VAR 0 2
15988: PPUSH
15989: LD_VAR 0 3
15993: PPUSH
15994: CALL 52869 0 3
15998: NOT
15999: IFFALSE 16003
// exit ;
16001: GO 16335
// until GetDistUnitXY ( unit , x , y ) < dist ;
16003: LD_VAR 0 1
16007: PPUSH
16008: LD_VAR 0 2
16012: PPUSH
16013: LD_VAR 0 3
16017: PPUSH
16018: CALL_OW 297
16022: PUSH
16023: LD_VAR 0 5
16027: LESS
16028: IFFALSE 15972
// end ; ComTurnXY ( unit , x , y ) ;
16030: LD_VAR 0 1
16034: PPUSH
16035: LD_VAR 0 2
16039: PPUSH
16040: LD_VAR 0 3
16044: PPUSH
16045: CALL_OW 118
// repeat if Multiplayer then
16049: LD_OWVAR 4
16053: IFFALSE 16064
// wait ( 35 ) else
16055: LD_INT 35
16057: PPUSH
16058: CALL_OW 67
16062: GO 16071
// wait ( 5 ) ;
16064: LD_INT 5
16066: PPUSH
16067: CALL_OW 67
// _d := GetDir ( unit ) ;
16071: LD_ADDR_VAR 0 11
16075: PUSH
16076: LD_VAR 0 1
16080: PPUSH
16081: CALL_OW 254
16085: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
16086: LD_ADDR_VAR 0 7
16090: PUSH
16091: LD_VAR 0 1
16095: PPUSH
16096: CALL_OW 250
16100: PPUSH
16101: LD_VAR 0 1
16105: PPUSH
16106: CALL_OW 251
16110: PPUSH
16111: LD_VAR 0 2
16115: PPUSH
16116: LD_VAR 0 3
16120: PPUSH
16121: CALL 55477 0 4
16125: ST_TO_ADDR
// until dir = _d ;
16126: LD_VAR 0 7
16130: PUSH
16131: LD_VAR 0 11
16135: EQUAL
16136: IFFALSE 16049
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
16138: LD_ADDR_VAR 0 9
16142: PUSH
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 250
16152: PPUSH
16153: LD_VAR 0 7
16157: PPUSH
16158: LD_VAR 0 5
16162: PPUSH
16163: CALL_OW 272
16167: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
16168: LD_ADDR_VAR 0 10
16172: PUSH
16173: LD_VAR 0 1
16177: PPUSH
16178: CALL_OW 251
16182: PPUSH
16183: LD_VAR 0 7
16187: PPUSH
16188: LD_VAR 0 5
16192: PPUSH
16193: CALL_OW 273
16197: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16198: LD_VAR 0 9
16202: PPUSH
16203: LD_VAR 0 10
16207: PPUSH
16208: CALL_OW 488
16212: NOT
16213: IFFALSE 16217
// exit ;
16215: GO 16335
// ComAnimCustom ( unit , 1 ) ;
16217: LD_VAR 0 1
16221: PPUSH
16222: LD_INT 1
16224: PPUSH
16225: CALL_OW 592
// p := 0 ;
16229: LD_ADDR_VAR 0 12
16233: PUSH
16234: LD_INT 0
16236: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
16237: LD_VAR 0 9
16241: PPUSH
16242: LD_VAR 0 10
16246: PPUSH
16247: LD_VAR 0 6
16251: PPUSH
16252: LD_VAR 0 8
16256: PPUSH
16257: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
16261: LD_INT 35
16263: PPUSH
16264: CALL_OW 67
// p := Inc ( p ) ;
16268: LD_ADDR_VAR 0 12
16272: PUSH
16273: LD_VAR 0 12
16277: PPUSH
16278: CALL 55433 0 1
16282: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
16283: LD_VAR 0 12
16287: PUSH
16288: LD_INT 3
16290: EQUAL
16291: PUSH
16292: LD_VAR 0 1
16296: PPUSH
16297: CALL_OW 302
16301: NOT
16302: OR
16303: PUSH
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 301
16313: OR
16314: IFFALSE 16261
// RemoveSeeing ( _x , _y , side ) ;
16316: LD_VAR 0 9
16320: PPUSH
16321: LD_VAR 0 10
16325: PPUSH
16326: LD_VAR 0 6
16330: PPUSH
16331: CALL_OW 331
// end ; end_of_file
16335: LD_VAR 0 4
16339: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16340: LD_INT 0
16342: PPUSH
16343: PPUSH
// if exist_mode then
16344: LD_VAR 0 2
16348: IFFALSE 16394
// begin unit := CreateCharacter ( prefix & ident ) ;
16350: LD_ADDR_VAR 0 5
16354: PUSH
16355: LD_VAR 0 3
16359: PUSH
16360: LD_VAR 0 1
16364: STR
16365: PPUSH
16366: CALL_OW 34
16370: ST_TO_ADDR
// if unit then
16371: LD_VAR 0 5
16375: IFFALSE 16392
// DeleteCharacters ( prefix & ident ) ;
16377: LD_VAR 0 3
16381: PUSH
16382: LD_VAR 0 1
16386: STR
16387: PPUSH
16388: CALL_OW 40
// end else
16392: GO 16409
// unit := NewCharacter ( ident ) ;
16394: LD_ADDR_VAR 0 5
16398: PUSH
16399: LD_VAR 0 1
16403: PPUSH
16404: CALL_OW 25
16408: ST_TO_ADDR
// result := unit ;
16409: LD_ADDR_VAR 0 4
16413: PUSH
16414: LD_VAR 0 5
16418: ST_TO_ADDR
// end ;
16419: LD_VAR 0 4
16423: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16424: LD_INT 0
16426: PPUSH
16427: PPUSH
// if not side or not nation then
16428: LD_VAR 0 1
16432: NOT
16433: PUSH
16434: LD_VAR 0 2
16438: NOT
16439: OR
16440: IFFALSE 16444
// exit ;
16442: GO 17212
// case nation of nation_american :
16444: LD_VAR 0 2
16448: PUSH
16449: LD_INT 1
16451: DOUBLE
16452: EQUAL
16453: IFTRUE 16457
16455: GO 16671
16457: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16458: LD_ADDR_VAR 0 4
16462: PUSH
16463: LD_INT 35
16465: PUSH
16466: LD_INT 45
16468: PUSH
16469: LD_INT 46
16471: PUSH
16472: LD_INT 47
16474: PUSH
16475: LD_INT 82
16477: PUSH
16478: LD_INT 83
16480: PUSH
16481: LD_INT 84
16483: PUSH
16484: LD_INT 85
16486: PUSH
16487: LD_INT 86
16489: PUSH
16490: LD_INT 1
16492: PUSH
16493: LD_INT 2
16495: PUSH
16496: LD_INT 6
16498: PUSH
16499: LD_INT 15
16501: PUSH
16502: LD_INT 16
16504: PUSH
16505: LD_INT 7
16507: PUSH
16508: LD_INT 12
16510: PUSH
16511: LD_INT 13
16513: PUSH
16514: LD_INT 10
16516: PUSH
16517: LD_INT 14
16519: PUSH
16520: LD_INT 20
16522: PUSH
16523: LD_INT 21
16525: PUSH
16526: LD_INT 22
16528: PUSH
16529: LD_INT 25
16531: PUSH
16532: LD_INT 32
16534: PUSH
16535: LD_INT 27
16537: PUSH
16538: LD_INT 36
16540: PUSH
16541: LD_INT 69
16543: PUSH
16544: LD_INT 39
16546: PUSH
16547: LD_INT 34
16549: PUSH
16550: LD_INT 40
16552: PUSH
16553: LD_INT 48
16555: PUSH
16556: LD_INT 49
16558: PUSH
16559: LD_INT 50
16561: PUSH
16562: LD_INT 51
16564: PUSH
16565: LD_INT 52
16567: PUSH
16568: LD_INT 53
16570: PUSH
16571: LD_INT 54
16573: PUSH
16574: LD_INT 55
16576: PUSH
16577: LD_INT 56
16579: PUSH
16580: LD_INT 57
16582: PUSH
16583: LD_INT 58
16585: PUSH
16586: LD_INT 59
16588: PUSH
16589: LD_INT 60
16591: PUSH
16592: LD_INT 61
16594: PUSH
16595: LD_INT 62
16597: PUSH
16598: LD_INT 80
16600: PUSH
16601: LD_INT 82
16603: PUSH
16604: LD_INT 83
16606: PUSH
16607: LD_INT 84
16609: PUSH
16610: LD_INT 85
16612: PUSH
16613: LD_INT 86
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: ST_TO_ADDR
16669: GO 17136
16671: LD_INT 2
16673: DOUBLE
16674: EQUAL
16675: IFTRUE 16679
16677: GO 16905
16679: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16680: LD_ADDR_VAR 0 4
16684: PUSH
16685: LD_INT 35
16687: PUSH
16688: LD_INT 45
16690: PUSH
16691: LD_INT 46
16693: PUSH
16694: LD_INT 47
16696: PUSH
16697: LD_INT 82
16699: PUSH
16700: LD_INT 83
16702: PUSH
16703: LD_INT 84
16705: PUSH
16706: LD_INT 85
16708: PUSH
16709: LD_INT 87
16711: PUSH
16712: LD_INT 70
16714: PUSH
16715: LD_INT 1
16717: PUSH
16718: LD_INT 11
16720: PUSH
16721: LD_INT 3
16723: PUSH
16724: LD_INT 4
16726: PUSH
16727: LD_INT 5
16729: PUSH
16730: LD_INT 6
16732: PUSH
16733: LD_INT 15
16735: PUSH
16736: LD_INT 18
16738: PUSH
16739: LD_INT 7
16741: PUSH
16742: LD_INT 17
16744: PUSH
16745: LD_INT 8
16747: PUSH
16748: LD_INT 20
16750: PUSH
16751: LD_INT 21
16753: PUSH
16754: LD_INT 22
16756: PUSH
16757: LD_INT 72
16759: PUSH
16760: LD_INT 26
16762: PUSH
16763: LD_INT 69
16765: PUSH
16766: LD_INT 39
16768: PUSH
16769: LD_INT 40
16771: PUSH
16772: LD_INT 41
16774: PUSH
16775: LD_INT 42
16777: PUSH
16778: LD_INT 43
16780: PUSH
16781: LD_INT 48
16783: PUSH
16784: LD_INT 49
16786: PUSH
16787: LD_INT 50
16789: PUSH
16790: LD_INT 51
16792: PUSH
16793: LD_INT 52
16795: PUSH
16796: LD_INT 53
16798: PUSH
16799: LD_INT 54
16801: PUSH
16802: LD_INT 55
16804: PUSH
16805: LD_INT 56
16807: PUSH
16808: LD_INT 60
16810: PUSH
16811: LD_INT 61
16813: PUSH
16814: LD_INT 62
16816: PUSH
16817: LD_INT 66
16819: PUSH
16820: LD_INT 67
16822: PUSH
16823: LD_INT 68
16825: PUSH
16826: LD_INT 81
16828: PUSH
16829: LD_INT 82
16831: PUSH
16832: LD_INT 83
16834: PUSH
16835: LD_INT 84
16837: PUSH
16838: LD_INT 85
16840: PUSH
16841: LD_INT 87
16843: PUSH
16844: LD_INT 88
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: ST_TO_ADDR
16903: GO 17136
16905: LD_INT 3
16907: DOUBLE
16908: EQUAL
16909: IFTRUE 16913
16911: GO 17135
16913: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16914: LD_ADDR_VAR 0 4
16918: PUSH
16919: LD_INT 46
16921: PUSH
16922: LD_INT 47
16924: PUSH
16925: LD_INT 1
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: LD_INT 82
16933: PUSH
16934: LD_INT 83
16936: PUSH
16937: LD_INT 84
16939: PUSH
16940: LD_INT 85
16942: PUSH
16943: LD_INT 86
16945: PUSH
16946: LD_INT 11
16948: PUSH
16949: LD_INT 9
16951: PUSH
16952: LD_INT 20
16954: PUSH
16955: LD_INT 19
16957: PUSH
16958: LD_INT 21
16960: PUSH
16961: LD_INT 24
16963: PUSH
16964: LD_INT 22
16966: PUSH
16967: LD_INT 25
16969: PUSH
16970: LD_INT 28
16972: PUSH
16973: LD_INT 29
16975: PUSH
16976: LD_INT 30
16978: PUSH
16979: LD_INT 31
16981: PUSH
16982: LD_INT 37
16984: PUSH
16985: LD_INT 38
16987: PUSH
16988: LD_INT 32
16990: PUSH
16991: LD_INT 27
16993: PUSH
16994: LD_INT 33
16996: PUSH
16997: LD_INT 69
16999: PUSH
17000: LD_INT 39
17002: PUSH
17003: LD_INT 34
17005: PUSH
17006: LD_INT 40
17008: PUSH
17009: LD_INT 71
17011: PUSH
17012: LD_INT 23
17014: PUSH
17015: LD_INT 44
17017: PUSH
17018: LD_INT 48
17020: PUSH
17021: LD_INT 49
17023: PUSH
17024: LD_INT 50
17026: PUSH
17027: LD_INT 51
17029: PUSH
17030: LD_INT 52
17032: PUSH
17033: LD_INT 53
17035: PUSH
17036: LD_INT 54
17038: PUSH
17039: LD_INT 55
17041: PUSH
17042: LD_INT 56
17044: PUSH
17045: LD_INT 57
17047: PUSH
17048: LD_INT 58
17050: PUSH
17051: LD_INT 59
17053: PUSH
17054: LD_INT 63
17056: PUSH
17057: LD_INT 64
17059: PUSH
17060: LD_INT 65
17062: PUSH
17063: LD_INT 82
17065: PUSH
17066: LD_INT 83
17068: PUSH
17069: LD_INT 84
17071: PUSH
17072: LD_INT 85
17074: PUSH
17075: LD_INT 86
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: ST_TO_ADDR
17133: GO 17136
17135: POP
// if state > - 1 and state < 3 then
17136: LD_VAR 0 3
17140: PUSH
17141: LD_INT 1
17143: NEG
17144: GREATER
17145: PUSH
17146: LD_VAR 0 3
17150: PUSH
17151: LD_INT 3
17153: LESS
17154: AND
17155: IFFALSE 17212
// for i in result do
17157: LD_ADDR_VAR 0 5
17161: PUSH
17162: LD_VAR 0 4
17166: PUSH
17167: FOR_IN
17168: IFFALSE 17210
// if GetTech ( i , side ) <> state then
17170: LD_VAR 0 5
17174: PPUSH
17175: LD_VAR 0 1
17179: PPUSH
17180: CALL_OW 321
17184: PUSH
17185: LD_VAR 0 3
17189: NONEQUAL
17190: IFFALSE 17208
// result := result diff i ;
17192: LD_ADDR_VAR 0 4
17196: PUSH
17197: LD_VAR 0 4
17201: PUSH
17202: LD_VAR 0 5
17206: DIFF
17207: ST_TO_ADDR
17208: GO 17167
17210: POP
17211: POP
// end ;
17212: LD_VAR 0 4
17216: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17217: LD_INT 0
17219: PPUSH
17220: PPUSH
17221: PPUSH
// result := true ;
17222: LD_ADDR_VAR 0 3
17226: PUSH
17227: LD_INT 1
17229: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17230: LD_ADDR_VAR 0 5
17234: PUSH
17235: LD_VAR 0 2
17239: PPUSH
17240: CALL_OW 480
17244: ST_TO_ADDR
// if not tmp then
17245: LD_VAR 0 5
17249: NOT
17250: IFFALSE 17254
// exit ;
17252: GO 17303
// for i in tmp do
17254: LD_ADDR_VAR 0 4
17258: PUSH
17259: LD_VAR 0 5
17263: PUSH
17264: FOR_IN
17265: IFFALSE 17301
// if GetTech ( i , side ) <> state_researched then
17267: LD_VAR 0 4
17271: PPUSH
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 321
17281: PUSH
17282: LD_INT 2
17284: NONEQUAL
17285: IFFALSE 17299
// begin result := false ;
17287: LD_ADDR_VAR 0 3
17291: PUSH
17292: LD_INT 0
17294: ST_TO_ADDR
// exit ;
17295: POP
17296: POP
17297: GO 17303
// end ;
17299: GO 17264
17301: POP
17302: POP
// end ;
17303: LD_VAR 0 3
17307: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17308: LD_INT 0
17310: PPUSH
17311: PPUSH
17312: PPUSH
17313: PPUSH
17314: PPUSH
17315: PPUSH
17316: PPUSH
17317: PPUSH
17318: PPUSH
17319: PPUSH
17320: PPUSH
17321: PPUSH
17322: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17323: LD_VAR 0 1
17327: NOT
17328: PUSH
17329: LD_VAR 0 1
17333: PPUSH
17334: CALL_OW 257
17338: PUSH
17339: LD_INT 9
17341: NONEQUAL
17342: OR
17343: IFFALSE 17347
// exit ;
17345: GO 17920
// side := GetSide ( unit ) ;
17347: LD_ADDR_VAR 0 9
17351: PUSH
17352: LD_VAR 0 1
17356: PPUSH
17357: CALL_OW 255
17361: ST_TO_ADDR
// tech_space := tech_spacanom ;
17362: LD_ADDR_VAR 0 12
17366: PUSH
17367: LD_INT 29
17369: ST_TO_ADDR
// tech_time := tech_taurad ;
17370: LD_ADDR_VAR 0 13
17374: PUSH
17375: LD_INT 28
17377: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17378: LD_ADDR_VAR 0 11
17382: PUSH
17383: LD_VAR 0 1
17387: PPUSH
17388: CALL_OW 310
17392: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17393: LD_VAR 0 11
17397: PPUSH
17398: CALL_OW 247
17402: PUSH
17403: LD_INT 2
17405: EQUAL
17406: IFFALSE 17410
// exit ;
17408: GO 17920
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17410: LD_ADDR_VAR 0 8
17414: PUSH
17415: LD_INT 81
17417: PUSH
17418: LD_VAR 0 9
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: LD_INT 21
17432: PUSH
17433: LD_INT 3
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PPUSH
17448: CALL_OW 69
17452: ST_TO_ADDR
// if not tmp then
17453: LD_VAR 0 8
17457: NOT
17458: IFFALSE 17462
// exit ;
17460: GO 17920
// if in_unit then
17462: LD_VAR 0 11
17466: IFFALSE 17490
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17468: LD_ADDR_VAR 0 10
17472: PUSH
17473: LD_VAR 0 8
17477: PPUSH
17478: LD_VAR 0 11
17482: PPUSH
17483: CALL_OW 74
17487: ST_TO_ADDR
17488: GO 17510
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17490: LD_ADDR_VAR 0 10
17494: PUSH
17495: LD_VAR 0 8
17499: PPUSH
17500: LD_VAR 0 1
17504: PPUSH
17505: CALL_OW 74
17509: ST_TO_ADDR
// if not enemy then
17510: LD_VAR 0 10
17514: NOT
17515: IFFALSE 17519
// exit ;
17517: GO 17920
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17519: LD_VAR 0 11
17523: PUSH
17524: LD_VAR 0 11
17528: PPUSH
17529: LD_VAR 0 10
17533: PPUSH
17534: CALL_OW 296
17538: PUSH
17539: LD_INT 13
17541: GREATER
17542: AND
17543: PUSH
17544: LD_VAR 0 1
17548: PPUSH
17549: LD_VAR 0 10
17553: PPUSH
17554: CALL_OW 296
17558: PUSH
17559: LD_INT 12
17561: GREATER
17562: OR
17563: IFFALSE 17567
// exit ;
17565: GO 17920
// missile := [ 1 ] ;
17567: LD_ADDR_VAR 0 14
17571: PUSH
17572: LD_INT 1
17574: PUSH
17575: EMPTY
17576: LIST
17577: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17578: LD_VAR 0 9
17582: PPUSH
17583: LD_VAR 0 12
17587: PPUSH
17588: CALL_OW 325
17592: IFFALSE 17621
// missile := Replace ( missile , missile + 1 , 2 ) ;
17594: LD_ADDR_VAR 0 14
17598: PUSH
17599: LD_VAR 0 14
17603: PPUSH
17604: LD_VAR 0 14
17608: PUSH
17609: LD_INT 1
17611: PLUS
17612: PPUSH
17613: LD_INT 2
17615: PPUSH
17616: CALL_OW 1
17620: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17621: LD_VAR 0 9
17625: PPUSH
17626: LD_VAR 0 13
17630: PPUSH
17631: CALL_OW 325
17635: PUSH
17636: LD_VAR 0 10
17640: PPUSH
17641: CALL_OW 255
17645: PPUSH
17646: LD_VAR 0 13
17650: PPUSH
17651: CALL_OW 325
17655: NOT
17656: AND
17657: IFFALSE 17686
// missile := Replace ( missile , missile + 1 , 3 ) ;
17659: LD_ADDR_VAR 0 14
17663: PUSH
17664: LD_VAR 0 14
17668: PPUSH
17669: LD_VAR 0 14
17673: PUSH
17674: LD_INT 1
17676: PLUS
17677: PPUSH
17678: LD_INT 3
17680: PPUSH
17681: CALL_OW 1
17685: ST_TO_ADDR
// if missile < 2 then
17686: LD_VAR 0 14
17690: PUSH
17691: LD_INT 2
17693: LESS
17694: IFFALSE 17698
// exit ;
17696: GO 17920
// x := GetX ( enemy ) ;
17698: LD_ADDR_VAR 0 4
17702: PUSH
17703: LD_VAR 0 10
17707: PPUSH
17708: CALL_OW 250
17712: ST_TO_ADDR
// y := GetY ( enemy ) ;
17713: LD_ADDR_VAR 0 5
17717: PUSH
17718: LD_VAR 0 10
17722: PPUSH
17723: CALL_OW 251
17727: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17728: LD_ADDR_VAR 0 6
17732: PUSH
17733: LD_VAR 0 4
17737: PUSH
17738: LD_INT 1
17740: NEG
17741: PPUSH
17742: LD_INT 1
17744: PPUSH
17745: CALL_OW 12
17749: PLUS
17750: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17751: LD_ADDR_VAR 0 7
17755: PUSH
17756: LD_VAR 0 5
17760: PUSH
17761: LD_INT 1
17763: NEG
17764: PPUSH
17765: LD_INT 1
17767: PPUSH
17768: CALL_OW 12
17772: PLUS
17773: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17774: LD_VAR 0 6
17778: PPUSH
17779: LD_VAR 0 7
17783: PPUSH
17784: CALL_OW 488
17788: NOT
17789: IFFALSE 17811
// begin _x := x ;
17791: LD_ADDR_VAR 0 6
17795: PUSH
17796: LD_VAR 0 4
17800: ST_TO_ADDR
// _y := y ;
17801: LD_ADDR_VAR 0 7
17805: PUSH
17806: LD_VAR 0 5
17810: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17811: LD_ADDR_VAR 0 3
17815: PUSH
17816: LD_INT 1
17818: PPUSH
17819: LD_VAR 0 14
17823: PPUSH
17824: CALL_OW 12
17828: ST_TO_ADDR
// case i of 1 :
17829: LD_VAR 0 3
17833: PUSH
17834: LD_INT 1
17836: DOUBLE
17837: EQUAL
17838: IFTRUE 17842
17840: GO 17859
17842: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17843: LD_VAR 0 1
17847: PPUSH
17848: LD_VAR 0 10
17852: PPUSH
17853: CALL_OW 115
17857: GO 17920
17859: LD_INT 2
17861: DOUBLE
17862: EQUAL
17863: IFTRUE 17867
17865: GO 17889
17867: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17868: LD_VAR 0 1
17872: PPUSH
17873: LD_VAR 0 6
17877: PPUSH
17878: LD_VAR 0 7
17882: PPUSH
17883: CALL_OW 153
17887: GO 17920
17889: LD_INT 3
17891: DOUBLE
17892: EQUAL
17893: IFTRUE 17897
17895: GO 17919
17897: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17898: LD_VAR 0 1
17902: PPUSH
17903: LD_VAR 0 6
17907: PPUSH
17908: LD_VAR 0 7
17912: PPUSH
17913: CALL_OW 154
17917: GO 17920
17919: POP
// end ;
17920: LD_VAR 0 2
17924: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17925: LD_INT 0
17927: PPUSH
17928: PPUSH
17929: PPUSH
17930: PPUSH
17931: PPUSH
17932: PPUSH
// if not unit or not building then
17933: LD_VAR 0 1
17937: NOT
17938: PUSH
17939: LD_VAR 0 2
17943: NOT
17944: OR
17945: IFFALSE 17949
// exit ;
17947: GO 18107
// x := GetX ( building ) ;
17949: LD_ADDR_VAR 0 5
17953: PUSH
17954: LD_VAR 0 2
17958: PPUSH
17959: CALL_OW 250
17963: ST_TO_ADDR
// y := GetY ( building ) ;
17964: LD_ADDR_VAR 0 6
17968: PUSH
17969: LD_VAR 0 2
17973: PPUSH
17974: CALL_OW 251
17978: ST_TO_ADDR
// for i = 0 to 5 do
17979: LD_ADDR_VAR 0 4
17983: PUSH
17984: DOUBLE
17985: LD_INT 0
17987: DEC
17988: ST_TO_ADDR
17989: LD_INT 5
17991: PUSH
17992: FOR_TO
17993: IFFALSE 18105
// begin _x := ShiftX ( x , i , 3 ) ;
17995: LD_ADDR_VAR 0 7
17999: PUSH
18000: LD_VAR 0 5
18004: PPUSH
18005: LD_VAR 0 4
18009: PPUSH
18010: LD_INT 3
18012: PPUSH
18013: CALL_OW 272
18017: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18018: LD_ADDR_VAR 0 8
18022: PUSH
18023: LD_VAR 0 6
18027: PPUSH
18028: LD_VAR 0 4
18032: PPUSH
18033: LD_INT 3
18035: PPUSH
18036: CALL_OW 273
18040: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18041: LD_VAR 0 7
18045: PPUSH
18046: LD_VAR 0 8
18050: PPUSH
18051: CALL_OW 488
18055: NOT
18056: IFFALSE 18060
// continue ;
18058: GO 17992
// if HexInfo ( _x , _y ) = 0 then
18060: LD_VAR 0 7
18064: PPUSH
18065: LD_VAR 0 8
18069: PPUSH
18070: CALL_OW 428
18074: PUSH
18075: LD_INT 0
18077: EQUAL
18078: IFFALSE 18103
// begin ComMoveXY ( unit , _x , _y ) ;
18080: LD_VAR 0 1
18084: PPUSH
18085: LD_VAR 0 7
18089: PPUSH
18090: LD_VAR 0 8
18094: PPUSH
18095: CALL_OW 111
// exit ;
18099: POP
18100: POP
18101: GO 18107
// end ; end ;
18103: GO 17992
18105: POP
18106: POP
// end ;
18107: LD_VAR 0 3
18111: RET
// export function ScanBase ( side , base_area ) ; begin
18112: LD_INT 0
18114: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18115: LD_ADDR_VAR 0 3
18119: PUSH
18120: LD_VAR 0 2
18124: PPUSH
18125: LD_INT 81
18127: PUSH
18128: LD_VAR 0 1
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 70
18141: ST_TO_ADDR
// end ;
18142: LD_VAR 0 3
18146: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18147: LD_INT 0
18149: PPUSH
18150: PPUSH
18151: PPUSH
18152: PPUSH
// result := false ;
18153: LD_ADDR_VAR 0 2
18157: PUSH
18158: LD_INT 0
18160: ST_TO_ADDR
// side := GetSide ( unit ) ;
18161: LD_ADDR_VAR 0 3
18165: PUSH
18166: LD_VAR 0 1
18170: PPUSH
18171: CALL_OW 255
18175: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18176: LD_ADDR_VAR 0 4
18180: PUSH
18181: LD_VAR 0 1
18185: PPUSH
18186: CALL_OW 248
18190: ST_TO_ADDR
// case nat of 1 :
18191: LD_VAR 0 4
18195: PUSH
18196: LD_INT 1
18198: DOUBLE
18199: EQUAL
18200: IFTRUE 18204
18202: GO 18215
18204: POP
// tech := tech_lassight ; 2 :
18205: LD_ADDR_VAR 0 5
18209: PUSH
18210: LD_INT 12
18212: ST_TO_ADDR
18213: GO 18254
18215: LD_INT 2
18217: DOUBLE
18218: EQUAL
18219: IFTRUE 18223
18221: GO 18234
18223: POP
// tech := tech_mortar ; 3 :
18224: LD_ADDR_VAR 0 5
18228: PUSH
18229: LD_INT 41
18231: ST_TO_ADDR
18232: GO 18254
18234: LD_INT 3
18236: DOUBLE
18237: EQUAL
18238: IFTRUE 18242
18240: GO 18253
18242: POP
// tech := tech_bazooka ; end ;
18243: LD_ADDR_VAR 0 5
18247: PUSH
18248: LD_INT 44
18250: ST_TO_ADDR
18251: GO 18254
18253: POP
// if Researched ( side , tech ) then
18254: LD_VAR 0 3
18258: PPUSH
18259: LD_VAR 0 5
18263: PPUSH
18264: CALL_OW 325
18268: IFFALSE 18295
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18270: LD_ADDR_VAR 0 2
18274: PUSH
18275: LD_INT 5
18277: PUSH
18278: LD_INT 8
18280: PUSH
18281: LD_INT 9
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: LIST
18288: PUSH
18289: LD_VAR 0 4
18293: ARRAY
18294: ST_TO_ADDR
// end ;
18295: LD_VAR 0 2
18299: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18300: LD_INT 0
18302: PPUSH
18303: PPUSH
18304: PPUSH
// if not mines then
18305: LD_VAR 0 2
18309: NOT
18310: IFFALSE 18314
// exit ;
18312: GO 18458
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18314: LD_ADDR_VAR 0 5
18318: PUSH
18319: LD_INT 81
18321: PUSH
18322: LD_VAR 0 1
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 3
18333: PUSH
18334: LD_INT 21
18336: PUSH
18337: LD_INT 3
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PPUSH
18352: CALL_OW 69
18356: ST_TO_ADDR
// for i in mines do
18357: LD_ADDR_VAR 0 4
18361: PUSH
18362: LD_VAR 0 2
18366: PUSH
18367: FOR_IN
18368: IFFALSE 18456
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18370: LD_VAR 0 4
18374: PUSH
18375: LD_INT 1
18377: ARRAY
18378: PPUSH
18379: LD_VAR 0 4
18383: PUSH
18384: LD_INT 2
18386: ARRAY
18387: PPUSH
18388: CALL_OW 458
18392: NOT
18393: IFFALSE 18397
// continue ;
18395: GO 18367
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18397: LD_VAR 0 4
18401: PUSH
18402: LD_INT 1
18404: ARRAY
18405: PPUSH
18406: LD_VAR 0 4
18410: PUSH
18411: LD_INT 2
18413: ARRAY
18414: PPUSH
18415: CALL_OW 428
18419: PUSH
18420: LD_VAR 0 5
18424: IN
18425: IFFALSE 18454
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18427: LD_VAR 0 4
18431: PUSH
18432: LD_INT 1
18434: ARRAY
18435: PPUSH
18436: LD_VAR 0 4
18440: PUSH
18441: LD_INT 2
18443: ARRAY
18444: PPUSH
18445: LD_VAR 0 1
18449: PPUSH
18450: CALL_OW 456
// end ;
18454: GO 18367
18456: POP
18457: POP
// end ;
18458: LD_VAR 0 3
18462: RET
// export function Count ( array ) ; begin
18463: LD_INT 0
18465: PPUSH
// result := array + 0 ;
18466: LD_ADDR_VAR 0 2
18470: PUSH
18471: LD_VAR 0 1
18475: PUSH
18476: LD_INT 0
18478: PLUS
18479: ST_TO_ADDR
// end ;
18480: LD_VAR 0 2
18484: RET
// export function IsEmpty ( building ) ; begin
18485: LD_INT 0
18487: PPUSH
// if not building then
18488: LD_VAR 0 1
18492: NOT
18493: IFFALSE 18497
// exit ;
18495: GO 18540
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18497: LD_ADDR_VAR 0 2
18501: PUSH
18502: LD_VAR 0 1
18506: PUSH
18507: LD_INT 22
18509: PUSH
18510: LD_VAR 0 1
18514: PPUSH
18515: CALL_OW 255
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 58
18526: PUSH
18527: EMPTY
18528: LIST
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL_OW 69
18538: IN
18539: ST_TO_ADDR
// end ;
18540: LD_VAR 0 2
18544: RET
// export function IsNotFull ( building ) ; var places ; begin
18545: LD_INT 0
18547: PPUSH
18548: PPUSH
// if not building then
18549: LD_VAR 0 1
18553: NOT
18554: IFFALSE 18558
// exit ;
18556: GO 18586
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18558: LD_ADDR_VAR 0 2
18562: PUSH
18563: LD_VAR 0 1
18567: PPUSH
18568: LD_INT 3
18570: PUSH
18571: LD_INT 62
18573: PUSH
18574: EMPTY
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PPUSH
18581: CALL_OW 72
18585: ST_TO_ADDR
// end ;
18586: LD_VAR 0 2
18590: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18591: LD_INT 0
18593: PPUSH
18594: PPUSH
18595: PPUSH
18596: PPUSH
// tmp := [ ] ;
18597: LD_ADDR_VAR 0 3
18601: PUSH
18602: EMPTY
18603: ST_TO_ADDR
// list := [ ] ;
18604: LD_ADDR_VAR 0 5
18608: PUSH
18609: EMPTY
18610: ST_TO_ADDR
// for i = 16 to 25 do
18611: LD_ADDR_VAR 0 4
18615: PUSH
18616: DOUBLE
18617: LD_INT 16
18619: DEC
18620: ST_TO_ADDR
18621: LD_INT 25
18623: PUSH
18624: FOR_TO
18625: IFFALSE 18698
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18627: LD_ADDR_VAR 0 3
18631: PUSH
18632: LD_VAR 0 3
18636: PUSH
18637: LD_INT 22
18639: PUSH
18640: LD_VAR 0 1
18644: PPUSH
18645: CALL_OW 255
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 91
18656: PUSH
18657: LD_VAR 0 1
18661: PUSH
18662: LD_INT 6
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 30
18672: PUSH
18673: LD_VAR 0 4
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: LIST
18686: PUSH
18687: EMPTY
18688: LIST
18689: PPUSH
18690: CALL_OW 69
18694: ADD
18695: ST_TO_ADDR
18696: GO 18624
18698: POP
18699: POP
// for i = 1 to tmp do
18700: LD_ADDR_VAR 0 4
18704: PUSH
18705: DOUBLE
18706: LD_INT 1
18708: DEC
18709: ST_TO_ADDR
18710: LD_VAR 0 3
18714: PUSH
18715: FOR_TO
18716: IFFALSE 18804
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18718: LD_ADDR_VAR 0 5
18722: PUSH
18723: LD_VAR 0 5
18727: PUSH
18728: LD_VAR 0 3
18732: PUSH
18733: LD_VAR 0 4
18737: ARRAY
18738: PPUSH
18739: CALL_OW 266
18743: PUSH
18744: LD_VAR 0 3
18748: PUSH
18749: LD_VAR 0 4
18753: ARRAY
18754: PPUSH
18755: CALL_OW 250
18759: PUSH
18760: LD_VAR 0 3
18764: PUSH
18765: LD_VAR 0 4
18769: ARRAY
18770: PPUSH
18771: CALL_OW 251
18775: PUSH
18776: LD_VAR 0 3
18780: PUSH
18781: LD_VAR 0 4
18785: ARRAY
18786: PPUSH
18787: CALL_OW 254
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: PUSH
18798: EMPTY
18799: LIST
18800: ADD
18801: ST_TO_ADDR
18802: GO 18715
18804: POP
18805: POP
// result := list ;
18806: LD_ADDR_VAR 0 2
18810: PUSH
18811: LD_VAR 0 5
18815: ST_TO_ADDR
// end ;
18816: LD_VAR 0 2
18820: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18821: LD_INT 0
18823: PPUSH
18824: PPUSH
18825: PPUSH
18826: PPUSH
18827: PPUSH
18828: PPUSH
18829: PPUSH
// if not factory then
18830: LD_VAR 0 1
18834: NOT
18835: IFFALSE 18839
// exit ;
18837: GO 19432
// if control = control_apeman then
18839: LD_VAR 0 4
18843: PUSH
18844: LD_INT 5
18846: EQUAL
18847: IFFALSE 18956
// begin tmp := UnitsInside ( factory ) ;
18849: LD_ADDR_VAR 0 8
18853: PUSH
18854: LD_VAR 0 1
18858: PPUSH
18859: CALL_OW 313
18863: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18864: LD_VAR 0 8
18868: PPUSH
18869: LD_INT 25
18871: PUSH
18872: LD_INT 12
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PPUSH
18879: CALL_OW 72
18883: NOT
18884: IFFALSE 18894
// control := control_manual ;
18886: LD_ADDR_VAR 0 4
18890: PUSH
18891: LD_INT 1
18893: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18894: LD_ADDR_VAR 0 8
18898: PUSH
18899: LD_VAR 0 1
18903: PPUSH
18904: CALL 18591 0 1
18908: ST_TO_ADDR
// if tmp then
18909: LD_VAR 0 8
18913: IFFALSE 18956
// begin for i in tmp do
18915: LD_ADDR_VAR 0 7
18919: PUSH
18920: LD_VAR 0 8
18924: PUSH
18925: FOR_IN
18926: IFFALSE 18954
// if i [ 1 ] = b_ext_radio then
18928: LD_VAR 0 7
18932: PUSH
18933: LD_INT 1
18935: ARRAY
18936: PUSH
18937: LD_INT 22
18939: EQUAL
18940: IFFALSE 18952
// begin control := control_remote ;
18942: LD_ADDR_VAR 0 4
18946: PUSH
18947: LD_INT 2
18949: ST_TO_ADDR
// break ;
18950: GO 18954
// end ;
18952: GO 18925
18954: POP
18955: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18956: LD_VAR 0 1
18960: PPUSH
18961: LD_VAR 0 2
18965: PPUSH
18966: LD_VAR 0 3
18970: PPUSH
18971: LD_VAR 0 4
18975: PPUSH
18976: LD_VAR 0 5
18980: PPUSH
18981: CALL_OW 448
18985: IFFALSE 19020
// begin result := [ chassis , engine , control , weapon ] ;
18987: LD_ADDR_VAR 0 6
18991: PUSH
18992: LD_VAR 0 2
18996: PUSH
18997: LD_VAR 0 3
19001: PUSH
19002: LD_VAR 0 4
19006: PUSH
19007: LD_VAR 0 5
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: ST_TO_ADDR
// exit ;
19018: GO 19432
// end ; _chassis := AvailableChassisList ( factory ) ;
19020: LD_ADDR_VAR 0 9
19024: PUSH
19025: LD_VAR 0 1
19029: PPUSH
19030: CALL_OW 475
19034: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19035: LD_ADDR_VAR 0 11
19039: PUSH
19040: LD_VAR 0 1
19044: PPUSH
19045: CALL_OW 476
19049: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19050: LD_ADDR_VAR 0 12
19054: PUSH
19055: LD_VAR 0 1
19059: PPUSH
19060: CALL_OW 477
19064: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19065: LD_ADDR_VAR 0 10
19069: PUSH
19070: LD_VAR 0 1
19074: PPUSH
19075: CALL_OW 478
19079: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19080: LD_VAR 0 9
19084: NOT
19085: PUSH
19086: LD_VAR 0 11
19090: NOT
19091: OR
19092: PUSH
19093: LD_VAR 0 12
19097: NOT
19098: OR
19099: PUSH
19100: LD_VAR 0 10
19104: NOT
19105: OR
19106: IFFALSE 19141
// begin result := [ chassis , engine , control , weapon ] ;
19108: LD_ADDR_VAR 0 6
19112: PUSH
19113: LD_VAR 0 2
19117: PUSH
19118: LD_VAR 0 3
19122: PUSH
19123: LD_VAR 0 4
19127: PUSH
19128: LD_VAR 0 5
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: ST_TO_ADDR
// exit ;
19139: GO 19432
// end ; if not chassis in _chassis then
19141: LD_VAR 0 2
19145: PUSH
19146: LD_VAR 0 9
19150: IN
19151: NOT
19152: IFFALSE 19178
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19154: LD_ADDR_VAR 0 2
19158: PUSH
19159: LD_VAR 0 9
19163: PUSH
19164: LD_INT 1
19166: PPUSH
19167: LD_VAR 0 9
19171: PPUSH
19172: CALL_OW 12
19176: ARRAY
19177: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19178: LD_VAR 0 2
19182: PPUSH
19183: LD_VAR 0 3
19187: PPUSH
19188: CALL 19437 0 2
19192: NOT
19193: IFFALSE 19252
// repeat engine := _engine [ 1 ] ;
19195: LD_ADDR_VAR 0 3
19199: PUSH
19200: LD_VAR 0 11
19204: PUSH
19205: LD_INT 1
19207: ARRAY
19208: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19209: LD_ADDR_VAR 0 11
19213: PUSH
19214: LD_VAR 0 11
19218: PPUSH
19219: LD_INT 1
19221: PPUSH
19222: CALL_OW 3
19226: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19227: LD_VAR 0 2
19231: PPUSH
19232: LD_VAR 0 3
19236: PPUSH
19237: CALL 19437 0 2
19241: PUSH
19242: LD_VAR 0 11
19246: PUSH
19247: EMPTY
19248: EQUAL
19249: OR
19250: IFFALSE 19195
// if not control in _control then
19252: LD_VAR 0 4
19256: PUSH
19257: LD_VAR 0 12
19261: IN
19262: NOT
19263: IFFALSE 19289
// control := _control [ rand ( 1 , _control ) ] ;
19265: LD_ADDR_VAR 0 4
19269: PUSH
19270: LD_VAR 0 12
19274: PUSH
19275: LD_INT 1
19277: PPUSH
19278: LD_VAR 0 12
19282: PPUSH
19283: CALL_OW 12
19287: ARRAY
19288: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19289: LD_VAR 0 2
19293: PPUSH
19294: LD_VAR 0 5
19298: PPUSH
19299: CALL 19657 0 2
19303: NOT
19304: IFFALSE 19363
// repeat weapon := _weapon [ 1 ] ;
19306: LD_ADDR_VAR 0 5
19310: PUSH
19311: LD_VAR 0 10
19315: PUSH
19316: LD_INT 1
19318: ARRAY
19319: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19320: LD_ADDR_VAR 0 10
19324: PUSH
19325: LD_VAR 0 10
19329: PPUSH
19330: LD_INT 1
19332: PPUSH
19333: CALL_OW 3
19337: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19338: LD_VAR 0 2
19342: PPUSH
19343: LD_VAR 0 5
19347: PPUSH
19348: CALL 19657 0 2
19352: PUSH
19353: LD_VAR 0 10
19357: PUSH
19358: EMPTY
19359: EQUAL
19360: OR
19361: IFFALSE 19306
// result := [ ] ;
19363: LD_ADDR_VAR 0 6
19367: PUSH
19368: EMPTY
19369: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19370: LD_VAR 0 1
19374: PPUSH
19375: LD_VAR 0 2
19379: PPUSH
19380: LD_VAR 0 3
19384: PPUSH
19385: LD_VAR 0 4
19389: PPUSH
19390: LD_VAR 0 5
19394: PPUSH
19395: CALL_OW 448
19399: IFFALSE 19432
// result := [ chassis , engine , control , weapon ] ;
19401: LD_ADDR_VAR 0 6
19405: PUSH
19406: LD_VAR 0 2
19410: PUSH
19411: LD_VAR 0 3
19415: PUSH
19416: LD_VAR 0 4
19420: PUSH
19421: LD_VAR 0 5
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: ST_TO_ADDR
// end ;
19432: LD_VAR 0 6
19436: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19437: LD_INT 0
19439: PPUSH
// if not chassis or not engine then
19440: LD_VAR 0 1
19444: NOT
19445: PUSH
19446: LD_VAR 0 2
19450: NOT
19451: OR
19452: IFFALSE 19456
// exit ;
19454: GO 19652
// case engine of engine_solar :
19456: LD_VAR 0 2
19460: PUSH
19461: LD_INT 2
19463: DOUBLE
19464: EQUAL
19465: IFTRUE 19469
19467: GO 19507
19469: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19470: LD_ADDR_VAR 0 3
19474: PUSH
19475: LD_INT 11
19477: PUSH
19478: LD_INT 12
19480: PUSH
19481: LD_INT 13
19483: PUSH
19484: LD_INT 14
19486: PUSH
19487: LD_INT 1
19489: PUSH
19490: LD_INT 2
19492: PUSH
19493: LD_INT 3
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: ST_TO_ADDR
19505: GO 19636
19507: LD_INT 1
19509: DOUBLE
19510: EQUAL
19511: IFTRUE 19515
19513: GO 19577
19515: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19516: LD_ADDR_VAR 0 3
19520: PUSH
19521: LD_INT 11
19523: PUSH
19524: LD_INT 12
19526: PUSH
19527: LD_INT 13
19529: PUSH
19530: LD_INT 14
19532: PUSH
19533: LD_INT 1
19535: PUSH
19536: LD_INT 2
19538: PUSH
19539: LD_INT 3
19541: PUSH
19542: LD_INT 4
19544: PUSH
19545: LD_INT 5
19547: PUSH
19548: LD_INT 21
19550: PUSH
19551: LD_INT 23
19553: PUSH
19554: LD_INT 22
19556: PUSH
19557: LD_INT 24
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: ST_TO_ADDR
19575: GO 19636
19577: LD_INT 3
19579: DOUBLE
19580: EQUAL
19581: IFTRUE 19585
19583: GO 19635
19585: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19586: LD_ADDR_VAR 0 3
19590: PUSH
19591: LD_INT 13
19593: PUSH
19594: LD_INT 14
19596: PUSH
19597: LD_INT 2
19599: PUSH
19600: LD_INT 3
19602: PUSH
19603: LD_INT 4
19605: PUSH
19606: LD_INT 5
19608: PUSH
19609: LD_INT 21
19611: PUSH
19612: LD_INT 22
19614: PUSH
19615: LD_INT 23
19617: PUSH
19618: LD_INT 24
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: ST_TO_ADDR
19633: GO 19636
19635: POP
// result := ( chassis in result ) ;
19636: LD_ADDR_VAR 0 3
19640: PUSH
19641: LD_VAR 0 1
19645: PUSH
19646: LD_VAR 0 3
19650: IN
19651: ST_TO_ADDR
// end ;
19652: LD_VAR 0 3
19656: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19657: LD_INT 0
19659: PPUSH
// if not chassis or not weapon then
19660: LD_VAR 0 1
19664: NOT
19665: PUSH
19666: LD_VAR 0 2
19670: NOT
19671: OR
19672: IFFALSE 19676
// exit ;
19674: GO 20736
// case weapon of us_machine_gun :
19676: LD_VAR 0 2
19680: PUSH
19681: LD_INT 2
19683: DOUBLE
19684: EQUAL
19685: IFTRUE 19689
19687: GO 19719
19689: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19690: LD_ADDR_VAR 0 3
19694: PUSH
19695: LD_INT 1
19697: PUSH
19698: LD_INT 2
19700: PUSH
19701: LD_INT 3
19703: PUSH
19704: LD_INT 4
19706: PUSH
19707: LD_INT 5
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: ST_TO_ADDR
19717: GO 20720
19719: LD_INT 3
19721: DOUBLE
19722: EQUAL
19723: IFTRUE 19727
19725: GO 19757
19727: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19728: LD_ADDR_VAR 0 3
19732: PUSH
19733: LD_INT 1
19735: PUSH
19736: LD_INT 2
19738: PUSH
19739: LD_INT 3
19741: PUSH
19742: LD_INT 4
19744: PUSH
19745: LD_INT 5
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: ST_TO_ADDR
19755: GO 20720
19757: LD_INT 11
19759: DOUBLE
19760: EQUAL
19761: IFTRUE 19765
19763: GO 19795
19765: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19766: LD_ADDR_VAR 0 3
19770: PUSH
19771: LD_INT 1
19773: PUSH
19774: LD_INT 2
19776: PUSH
19777: LD_INT 3
19779: PUSH
19780: LD_INT 4
19782: PUSH
19783: LD_INT 5
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: ST_TO_ADDR
19793: GO 20720
19795: LD_INT 4
19797: DOUBLE
19798: EQUAL
19799: IFTRUE 19803
19801: GO 19829
19803: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19804: LD_ADDR_VAR 0 3
19808: PUSH
19809: LD_INT 2
19811: PUSH
19812: LD_INT 3
19814: PUSH
19815: LD_INT 4
19817: PUSH
19818: LD_INT 5
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: ST_TO_ADDR
19827: GO 20720
19829: LD_INT 5
19831: DOUBLE
19832: EQUAL
19833: IFTRUE 19837
19835: GO 19863
19837: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19838: LD_ADDR_VAR 0 3
19842: PUSH
19843: LD_INT 2
19845: PUSH
19846: LD_INT 3
19848: PUSH
19849: LD_INT 4
19851: PUSH
19852: LD_INT 5
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: ST_TO_ADDR
19861: GO 20720
19863: LD_INT 9
19865: DOUBLE
19866: EQUAL
19867: IFTRUE 19871
19869: GO 19897
19871: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19872: LD_ADDR_VAR 0 3
19876: PUSH
19877: LD_INT 2
19879: PUSH
19880: LD_INT 3
19882: PUSH
19883: LD_INT 4
19885: PUSH
19886: LD_INT 5
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: ST_TO_ADDR
19895: GO 20720
19897: LD_INT 7
19899: DOUBLE
19900: EQUAL
19901: IFTRUE 19905
19903: GO 19931
19905: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19906: LD_ADDR_VAR 0 3
19910: PUSH
19911: LD_INT 2
19913: PUSH
19914: LD_INT 3
19916: PUSH
19917: LD_INT 4
19919: PUSH
19920: LD_INT 5
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: ST_TO_ADDR
19929: GO 20720
19931: LD_INT 12
19933: DOUBLE
19934: EQUAL
19935: IFTRUE 19939
19937: GO 19965
19939: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19940: LD_ADDR_VAR 0 3
19944: PUSH
19945: LD_INT 2
19947: PUSH
19948: LD_INT 3
19950: PUSH
19951: LD_INT 4
19953: PUSH
19954: LD_INT 5
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: ST_TO_ADDR
19963: GO 20720
19965: LD_INT 13
19967: DOUBLE
19968: EQUAL
19969: IFTRUE 19973
19971: GO 19999
19973: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19974: LD_ADDR_VAR 0 3
19978: PUSH
19979: LD_INT 2
19981: PUSH
19982: LD_INT 3
19984: PUSH
19985: LD_INT 4
19987: PUSH
19988: LD_INT 5
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: ST_TO_ADDR
19997: GO 20720
19999: LD_INT 14
20001: DOUBLE
20002: EQUAL
20003: IFTRUE 20007
20005: GO 20025
20007: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20008: LD_ADDR_VAR 0 3
20012: PUSH
20013: LD_INT 4
20015: PUSH
20016: LD_INT 5
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: ST_TO_ADDR
20023: GO 20720
20025: LD_INT 6
20027: DOUBLE
20028: EQUAL
20029: IFTRUE 20033
20031: GO 20051
20033: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20034: LD_ADDR_VAR 0 3
20038: PUSH
20039: LD_INT 4
20041: PUSH
20042: LD_INT 5
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: ST_TO_ADDR
20049: GO 20720
20051: LD_INT 10
20053: DOUBLE
20054: EQUAL
20055: IFTRUE 20059
20057: GO 20077
20059: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20060: LD_ADDR_VAR 0 3
20064: PUSH
20065: LD_INT 4
20067: PUSH
20068: LD_INT 5
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: ST_TO_ADDR
20075: GO 20720
20077: LD_INT 22
20079: DOUBLE
20080: EQUAL
20081: IFTRUE 20085
20083: GO 20111
20085: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20086: LD_ADDR_VAR 0 3
20090: PUSH
20091: LD_INT 11
20093: PUSH
20094: LD_INT 12
20096: PUSH
20097: LD_INT 13
20099: PUSH
20100: LD_INT 14
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: ST_TO_ADDR
20109: GO 20720
20111: LD_INT 23
20113: DOUBLE
20114: EQUAL
20115: IFTRUE 20119
20117: GO 20145
20119: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20120: LD_ADDR_VAR 0 3
20124: PUSH
20125: LD_INT 11
20127: PUSH
20128: LD_INT 12
20130: PUSH
20131: LD_INT 13
20133: PUSH
20134: LD_INT 14
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: ST_TO_ADDR
20143: GO 20720
20145: LD_INT 24
20147: DOUBLE
20148: EQUAL
20149: IFTRUE 20153
20151: GO 20179
20153: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20154: LD_ADDR_VAR 0 3
20158: PUSH
20159: LD_INT 11
20161: PUSH
20162: LD_INT 12
20164: PUSH
20165: LD_INT 13
20167: PUSH
20168: LD_INT 14
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: ST_TO_ADDR
20177: GO 20720
20179: LD_INT 30
20181: DOUBLE
20182: EQUAL
20183: IFTRUE 20187
20185: GO 20213
20187: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20188: LD_ADDR_VAR 0 3
20192: PUSH
20193: LD_INT 11
20195: PUSH
20196: LD_INT 12
20198: PUSH
20199: LD_INT 13
20201: PUSH
20202: LD_INT 14
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: ST_TO_ADDR
20211: GO 20720
20213: LD_INT 25
20215: DOUBLE
20216: EQUAL
20217: IFTRUE 20221
20219: GO 20239
20221: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20222: LD_ADDR_VAR 0 3
20226: PUSH
20227: LD_INT 13
20229: PUSH
20230: LD_INT 14
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: ST_TO_ADDR
20237: GO 20720
20239: LD_INT 27
20241: DOUBLE
20242: EQUAL
20243: IFTRUE 20247
20245: GO 20265
20247: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20248: LD_ADDR_VAR 0 3
20252: PUSH
20253: LD_INT 13
20255: PUSH
20256: LD_INT 14
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: ST_TO_ADDR
20263: GO 20720
20265: LD_INT 92
20267: DOUBLE
20268: EQUAL
20269: IFTRUE 20273
20271: GO 20299
20273: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20274: LD_ADDR_VAR 0 3
20278: PUSH
20279: LD_INT 11
20281: PUSH
20282: LD_INT 12
20284: PUSH
20285: LD_INT 13
20287: PUSH
20288: LD_INT 14
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: ST_TO_ADDR
20297: GO 20720
20299: LD_INT 28
20301: DOUBLE
20302: EQUAL
20303: IFTRUE 20307
20305: GO 20325
20307: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20308: LD_ADDR_VAR 0 3
20312: PUSH
20313: LD_INT 13
20315: PUSH
20316: LD_INT 14
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: ST_TO_ADDR
20323: GO 20720
20325: LD_INT 29
20327: DOUBLE
20328: EQUAL
20329: IFTRUE 20333
20331: GO 20351
20333: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20334: LD_ADDR_VAR 0 3
20338: PUSH
20339: LD_INT 13
20341: PUSH
20342: LD_INT 14
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: ST_TO_ADDR
20349: GO 20720
20351: LD_INT 31
20353: DOUBLE
20354: EQUAL
20355: IFTRUE 20359
20357: GO 20377
20359: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20360: LD_ADDR_VAR 0 3
20364: PUSH
20365: LD_INT 13
20367: PUSH
20368: LD_INT 14
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: ST_TO_ADDR
20375: GO 20720
20377: LD_INT 26
20379: DOUBLE
20380: EQUAL
20381: IFTRUE 20385
20383: GO 20403
20385: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20386: LD_ADDR_VAR 0 3
20390: PUSH
20391: LD_INT 13
20393: PUSH
20394: LD_INT 14
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: ST_TO_ADDR
20401: GO 20720
20403: LD_INT 42
20405: DOUBLE
20406: EQUAL
20407: IFTRUE 20411
20409: GO 20437
20411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20412: LD_ADDR_VAR 0 3
20416: PUSH
20417: LD_INT 21
20419: PUSH
20420: LD_INT 22
20422: PUSH
20423: LD_INT 23
20425: PUSH
20426: LD_INT 24
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: ST_TO_ADDR
20435: GO 20720
20437: LD_INT 43
20439: DOUBLE
20440: EQUAL
20441: IFTRUE 20445
20443: GO 20471
20445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20446: LD_ADDR_VAR 0 3
20450: PUSH
20451: LD_INT 21
20453: PUSH
20454: LD_INT 22
20456: PUSH
20457: LD_INT 23
20459: PUSH
20460: LD_INT 24
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: ST_TO_ADDR
20469: GO 20720
20471: LD_INT 44
20473: DOUBLE
20474: EQUAL
20475: IFTRUE 20479
20477: GO 20505
20479: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20480: LD_ADDR_VAR 0 3
20484: PUSH
20485: LD_INT 21
20487: PUSH
20488: LD_INT 22
20490: PUSH
20491: LD_INT 23
20493: PUSH
20494: LD_INT 24
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: ST_TO_ADDR
20503: GO 20720
20505: LD_INT 45
20507: DOUBLE
20508: EQUAL
20509: IFTRUE 20513
20511: GO 20539
20513: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20514: LD_ADDR_VAR 0 3
20518: PUSH
20519: LD_INT 21
20521: PUSH
20522: LD_INT 22
20524: PUSH
20525: LD_INT 23
20527: PUSH
20528: LD_INT 24
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: ST_TO_ADDR
20537: GO 20720
20539: LD_INT 49
20541: DOUBLE
20542: EQUAL
20543: IFTRUE 20547
20545: GO 20573
20547: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20548: LD_ADDR_VAR 0 3
20552: PUSH
20553: LD_INT 21
20555: PUSH
20556: LD_INT 22
20558: PUSH
20559: LD_INT 23
20561: PUSH
20562: LD_INT 24
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: ST_TO_ADDR
20571: GO 20720
20573: LD_INT 51
20575: DOUBLE
20576: EQUAL
20577: IFTRUE 20581
20579: GO 20607
20581: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20582: LD_ADDR_VAR 0 3
20586: PUSH
20587: LD_INT 21
20589: PUSH
20590: LD_INT 22
20592: PUSH
20593: LD_INT 23
20595: PUSH
20596: LD_INT 24
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: ST_TO_ADDR
20605: GO 20720
20607: LD_INT 52
20609: DOUBLE
20610: EQUAL
20611: IFTRUE 20615
20613: GO 20641
20615: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20616: LD_ADDR_VAR 0 3
20620: PUSH
20621: LD_INT 21
20623: PUSH
20624: LD_INT 22
20626: PUSH
20627: LD_INT 23
20629: PUSH
20630: LD_INT 24
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: ST_TO_ADDR
20639: GO 20720
20641: LD_INT 53
20643: DOUBLE
20644: EQUAL
20645: IFTRUE 20649
20647: GO 20667
20649: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20650: LD_ADDR_VAR 0 3
20654: PUSH
20655: LD_INT 23
20657: PUSH
20658: LD_INT 24
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: ST_TO_ADDR
20665: GO 20720
20667: LD_INT 46
20669: DOUBLE
20670: EQUAL
20671: IFTRUE 20675
20673: GO 20693
20675: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20676: LD_ADDR_VAR 0 3
20680: PUSH
20681: LD_INT 23
20683: PUSH
20684: LD_INT 24
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: ST_TO_ADDR
20691: GO 20720
20693: LD_INT 47
20695: DOUBLE
20696: EQUAL
20697: IFTRUE 20701
20699: GO 20719
20701: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20702: LD_ADDR_VAR 0 3
20706: PUSH
20707: LD_INT 23
20709: PUSH
20710: LD_INT 24
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: ST_TO_ADDR
20717: GO 20720
20719: POP
// result := ( chassis in result ) ;
20720: LD_ADDR_VAR 0 3
20724: PUSH
20725: LD_VAR 0 1
20729: PUSH
20730: LD_VAR 0 3
20734: IN
20735: ST_TO_ADDR
// end ;
20736: LD_VAR 0 3
20740: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20741: LD_INT 0
20743: PPUSH
20744: PPUSH
20745: PPUSH
20746: PPUSH
20747: PPUSH
20748: PPUSH
20749: PPUSH
// result := array ;
20750: LD_ADDR_VAR 0 5
20754: PUSH
20755: LD_VAR 0 1
20759: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20760: LD_VAR 0 1
20764: NOT
20765: PUSH
20766: LD_VAR 0 2
20770: NOT
20771: OR
20772: PUSH
20773: LD_VAR 0 3
20777: NOT
20778: OR
20779: PUSH
20780: LD_VAR 0 2
20784: PUSH
20785: LD_VAR 0 1
20789: GREATER
20790: OR
20791: PUSH
20792: LD_VAR 0 3
20796: PUSH
20797: LD_VAR 0 1
20801: GREATER
20802: OR
20803: IFFALSE 20807
// exit ;
20805: GO 21103
// if direction then
20807: LD_VAR 0 4
20811: IFFALSE 20875
// begin d := 1 ;
20813: LD_ADDR_VAR 0 9
20817: PUSH
20818: LD_INT 1
20820: ST_TO_ADDR
// if i_from > i_to then
20821: LD_VAR 0 2
20825: PUSH
20826: LD_VAR 0 3
20830: GREATER
20831: IFFALSE 20857
// length := ( array - i_from ) + i_to else
20833: LD_ADDR_VAR 0 11
20837: PUSH
20838: LD_VAR 0 1
20842: PUSH
20843: LD_VAR 0 2
20847: MINUS
20848: PUSH
20849: LD_VAR 0 3
20853: PLUS
20854: ST_TO_ADDR
20855: GO 20873
// length := i_to - i_from ;
20857: LD_ADDR_VAR 0 11
20861: PUSH
20862: LD_VAR 0 3
20866: PUSH
20867: LD_VAR 0 2
20871: MINUS
20872: ST_TO_ADDR
// end else
20873: GO 20936
// begin d := - 1 ;
20875: LD_ADDR_VAR 0 9
20879: PUSH
20880: LD_INT 1
20882: NEG
20883: ST_TO_ADDR
// if i_from > i_to then
20884: LD_VAR 0 2
20888: PUSH
20889: LD_VAR 0 3
20893: GREATER
20894: IFFALSE 20914
// length := i_from - i_to else
20896: LD_ADDR_VAR 0 11
20900: PUSH
20901: LD_VAR 0 2
20905: PUSH
20906: LD_VAR 0 3
20910: MINUS
20911: ST_TO_ADDR
20912: GO 20936
// length := ( array - i_to ) + i_from ;
20914: LD_ADDR_VAR 0 11
20918: PUSH
20919: LD_VAR 0 1
20923: PUSH
20924: LD_VAR 0 3
20928: MINUS
20929: PUSH
20930: LD_VAR 0 2
20934: PLUS
20935: ST_TO_ADDR
// end ; if not length then
20936: LD_VAR 0 11
20940: NOT
20941: IFFALSE 20945
// exit ;
20943: GO 21103
// tmp := array ;
20945: LD_ADDR_VAR 0 10
20949: PUSH
20950: LD_VAR 0 1
20954: ST_TO_ADDR
// for i = 1 to length do
20955: LD_ADDR_VAR 0 6
20959: PUSH
20960: DOUBLE
20961: LD_INT 1
20963: DEC
20964: ST_TO_ADDR
20965: LD_VAR 0 11
20969: PUSH
20970: FOR_TO
20971: IFFALSE 21091
// begin for j = 1 to array do
20973: LD_ADDR_VAR 0 7
20977: PUSH
20978: DOUBLE
20979: LD_INT 1
20981: DEC
20982: ST_TO_ADDR
20983: LD_VAR 0 1
20987: PUSH
20988: FOR_TO
20989: IFFALSE 21077
// begin k := j + d ;
20991: LD_ADDR_VAR 0 8
20995: PUSH
20996: LD_VAR 0 7
21000: PUSH
21001: LD_VAR 0 9
21005: PLUS
21006: ST_TO_ADDR
// if k > array then
21007: LD_VAR 0 8
21011: PUSH
21012: LD_VAR 0 1
21016: GREATER
21017: IFFALSE 21027
// k := 1 ;
21019: LD_ADDR_VAR 0 8
21023: PUSH
21024: LD_INT 1
21026: ST_TO_ADDR
// if not k then
21027: LD_VAR 0 8
21031: NOT
21032: IFFALSE 21044
// k := array ;
21034: LD_ADDR_VAR 0 8
21038: PUSH
21039: LD_VAR 0 1
21043: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21044: LD_ADDR_VAR 0 10
21048: PUSH
21049: LD_VAR 0 10
21053: PPUSH
21054: LD_VAR 0 8
21058: PPUSH
21059: LD_VAR 0 1
21063: PUSH
21064: LD_VAR 0 7
21068: ARRAY
21069: PPUSH
21070: CALL_OW 1
21074: ST_TO_ADDR
// end ;
21075: GO 20988
21077: POP
21078: POP
// array := tmp ;
21079: LD_ADDR_VAR 0 1
21083: PUSH
21084: LD_VAR 0 10
21088: ST_TO_ADDR
// end ;
21089: GO 20970
21091: POP
21092: POP
// result := array ;
21093: LD_ADDR_VAR 0 5
21097: PUSH
21098: LD_VAR 0 1
21102: ST_TO_ADDR
// end ;
21103: LD_VAR 0 5
21107: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21108: LD_INT 0
21110: PPUSH
21111: PPUSH
// result := 0 ;
21112: LD_ADDR_VAR 0 3
21116: PUSH
21117: LD_INT 0
21119: ST_TO_ADDR
// if not array or not value in array then
21120: LD_VAR 0 1
21124: NOT
21125: PUSH
21126: LD_VAR 0 2
21130: PUSH
21131: LD_VAR 0 1
21135: IN
21136: NOT
21137: OR
21138: IFFALSE 21142
// exit ;
21140: GO 21196
// for i = 1 to array do
21142: LD_ADDR_VAR 0 4
21146: PUSH
21147: DOUBLE
21148: LD_INT 1
21150: DEC
21151: ST_TO_ADDR
21152: LD_VAR 0 1
21156: PUSH
21157: FOR_TO
21158: IFFALSE 21194
// if value = array [ i ] then
21160: LD_VAR 0 2
21164: PUSH
21165: LD_VAR 0 1
21169: PUSH
21170: LD_VAR 0 4
21174: ARRAY
21175: EQUAL
21176: IFFALSE 21192
// begin result := i ;
21178: LD_ADDR_VAR 0 3
21182: PUSH
21183: LD_VAR 0 4
21187: ST_TO_ADDR
// exit ;
21188: POP
21189: POP
21190: GO 21196
// end ;
21192: GO 21157
21194: POP
21195: POP
// end ;
21196: LD_VAR 0 3
21200: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21201: LD_INT 0
21203: PPUSH
// vc_chassis := chassis ;
21204: LD_ADDR_OWVAR 37
21208: PUSH
21209: LD_VAR 0 1
21213: ST_TO_ADDR
// vc_engine := engine ;
21214: LD_ADDR_OWVAR 39
21218: PUSH
21219: LD_VAR 0 2
21223: ST_TO_ADDR
// vc_control := control ;
21224: LD_ADDR_OWVAR 38
21228: PUSH
21229: LD_VAR 0 3
21233: ST_TO_ADDR
// vc_weapon := weapon ;
21234: LD_ADDR_OWVAR 40
21238: PUSH
21239: LD_VAR 0 4
21243: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21244: LD_ADDR_OWVAR 41
21248: PUSH
21249: LD_VAR 0 5
21253: ST_TO_ADDR
// end ;
21254: LD_VAR 0 6
21258: RET
// export function WantPlant ( unit ) ; var task ; begin
21259: LD_INT 0
21261: PPUSH
21262: PPUSH
// result := false ;
21263: LD_ADDR_VAR 0 2
21267: PUSH
21268: LD_INT 0
21270: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21271: LD_ADDR_VAR 0 3
21275: PUSH
21276: LD_VAR 0 1
21280: PPUSH
21281: CALL_OW 437
21285: ST_TO_ADDR
// if task then
21286: LD_VAR 0 3
21290: IFFALSE 21318
// if task [ 1 ] [ 1 ] = p then
21292: LD_VAR 0 3
21296: PUSH
21297: LD_INT 1
21299: ARRAY
21300: PUSH
21301: LD_INT 1
21303: ARRAY
21304: PUSH
21305: LD_STRING p
21307: EQUAL
21308: IFFALSE 21318
// result := true ;
21310: LD_ADDR_VAR 0 2
21314: PUSH
21315: LD_INT 1
21317: ST_TO_ADDR
// end ;
21318: LD_VAR 0 2
21322: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21323: LD_INT 0
21325: PPUSH
21326: PPUSH
21327: PPUSH
21328: PPUSH
// if pos < 1 then
21329: LD_VAR 0 2
21333: PUSH
21334: LD_INT 1
21336: LESS
21337: IFFALSE 21341
// exit ;
21339: GO 21644
// if pos = 1 then
21341: LD_VAR 0 2
21345: PUSH
21346: LD_INT 1
21348: EQUAL
21349: IFFALSE 21382
// result := Replace ( arr , pos [ 1 ] , value ) else
21351: LD_ADDR_VAR 0 4
21355: PUSH
21356: LD_VAR 0 1
21360: PPUSH
21361: LD_VAR 0 2
21365: PUSH
21366: LD_INT 1
21368: ARRAY
21369: PPUSH
21370: LD_VAR 0 3
21374: PPUSH
21375: CALL_OW 1
21379: ST_TO_ADDR
21380: GO 21644
// begin tmp := arr ;
21382: LD_ADDR_VAR 0 6
21386: PUSH
21387: LD_VAR 0 1
21391: ST_TO_ADDR
// s_arr := [ tmp ] ;
21392: LD_ADDR_VAR 0 7
21396: PUSH
21397: LD_VAR 0 6
21401: PUSH
21402: EMPTY
21403: LIST
21404: ST_TO_ADDR
// for i = 1 to pos - 1 do
21405: LD_ADDR_VAR 0 5
21409: PUSH
21410: DOUBLE
21411: LD_INT 1
21413: DEC
21414: ST_TO_ADDR
21415: LD_VAR 0 2
21419: PUSH
21420: LD_INT 1
21422: MINUS
21423: PUSH
21424: FOR_TO
21425: IFFALSE 21470
// begin tmp := tmp [ pos [ i ] ] ;
21427: LD_ADDR_VAR 0 6
21431: PUSH
21432: LD_VAR 0 6
21436: PUSH
21437: LD_VAR 0 2
21441: PUSH
21442: LD_VAR 0 5
21446: ARRAY
21447: ARRAY
21448: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21449: LD_ADDR_VAR 0 7
21453: PUSH
21454: LD_VAR 0 7
21458: PUSH
21459: LD_VAR 0 6
21463: PUSH
21464: EMPTY
21465: LIST
21466: ADD
21467: ST_TO_ADDR
// end ;
21468: GO 21424
21470: POP
21471: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21472: LD_ADDR_VAR 0 6
21476: PUSH
21477: LD_VAR 0 6
21481: PPUSH
21482: LD_VAR 0 2
21486: PUSH
21487: LD_VAR 0 2
21491: ARRAY
21492: PPUSH
21493: LD_VAR 0 3
21497: PPUSH
21498: CALL_OW 1
21502: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21503: LD_ADDR_VAR 0 7
21507: PUSH
21508: LD_VAR 0 7
21512: PPUSH
21513: LD_VAR 0 7
21517: PPUSH
21518: LD_VAR 0 6
21522: PPUSH
21523: CALL_OW 1
21527: ST_TO_ADDR
// for i = s_arr downto 2 do
21528: LD_ADDR_VAR 0 5
21532: PUSH
21533: DOUBLE
21534: LD_VAR 0 7
21538: INC
21539: ST_TO_ADDR
21540: LD_INT 2
21542: PUSH
21543: FOR_DOWNTO
21544: IFFALSE 21628
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21546: LD_ADDR_VAR 0 6
21550: PUSH
21551: LD_VAR 0 7
21555: PUSH
21556: LD_VAR 0 5
21560: PUSH
21561: LD_INT 1
21563: MINUS
21564: ARRAY
21565: PPUSH
21566: LD_VAR 0 2
21570: PUSH
21571: LD_VAR 0 5
21575: PUSH
21576: LD_INT 1
21578: MINUS
21579: ARRAY
21580: PPUSH
21581: LD_VAR 0 7
21585: PUSH
21586: LD_VAR 0 5
21590: ARRAY
21591: PPUSH
21592: CALL_OW 1
21596: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21597: LD_ADDR_VAR 0 7
21601: PUSH
21602: LD_VAR 0 7
21606: PPUSH
21607: LD_VAR 0 5
21611: PUSH
21612: LD_INT 1
21614: MINUS
21615: PPUSH
21616: LD_VAR 0 6
21620: PPUSH
21621: CALL_OW 1
21625: ST_TO_ADDR
// end ;
21626: GO 21543
21628: POP
21629: POP
// result := s_arr [ 1 ] ;
21630: LD_ADDR_VAR 0 4
21634: PUSH
21635: LD_VAR 0 7
21639: PUSH
21640: LD_INT 1
21642: ARRAY
21643: ST_TO_ADDR
// end ; end ;
21644: LD_VAR 0 4
21648: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21649: LD_INT 0
21651: PPUSH
21652: PPUSH
// if not list then
21653: LD_VAR 0 1
21657: NOT
21658: IFFALSE 21662
// exit ;
21660: GO 21753
// i := list [ pos1 ] ;
21662: LD_ADDR_VAR 0 5
21666: PUSH
21667: LD_VAR 0 1
21671: PUSH
21672: LD_VAR 0 2
21676: ARRAY
21677: ST_TO_ADDR
// if not i then
21678: LD_VAR 0 5
21682: NOT
21683: IFFALSE 21687
// exit ;
21685: GO 21753
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21687: LD_ADDR_VAR 0 1
21691: PUSH
21692: LD_VAR 0 1
21696: PPUSH
21697: LD_VAR 0 2
21701: PPUSH
21702: LD_VAR 0 1
21706: PUSH
21707: LD_VAR 0 3
21711: ARRAY
21712: PPUSH
21713: CALL_OW 1
21717: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21718: LD_ADDR_VAR 0 1
21722: PUSH
21723: LD_VAR 0 1
21727: PPUSH
21728: LD_VAR 0 3
21732: PPUSH
21733: LD_VAR 0 5
21737: PPUSH
21738: CALL_OW 1
21742: ST_TO_ADDR
// result := list ;
21743: LD_ADDR_VAR 0 4
21747: PUSH
21748: LD_VAR 0 1
21752: ST_TO_ADDR
// end ;
21753: LD_VAR 0 4
21757: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21758: LD_INT 0
21760: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21761: LD_ADDR_VAR 0 5
21765: PUSH
21766: LD_VAR 0 1
21770: PPUSH
21771: CALL_OW 250
21775: PPUSH
21776: LD_VAR 0 1
21780: PPUSH
21781: CALL_OW 251
21785: PPUSH
21786: LD_VAR 0 2
21790: PPUSH
21791: LD_VAR 0 3
21795: PPUSH
21796: LD_VAR 0 4
21800: PPUSH
21801: CALL 22179 0 5
21805: ST_TO_ADDR
// end ;
21806: LD_VAR 0 5
21810: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21811: LD_INT 0
21813: PPUSH
21814: PPUSH
21815: PPUSH
21816: PPUSH
// if not list or not unit then
21817: LD_VAR 0 2
21821: NOT
21822: PUSH
21823: LD_VAR 0 1
21827: NOT
21828: OR
21829: IFFALSE 21833
// exit ;
21831: GO 22174
// result := [ ] ;
21833: LD_ADDR_VAR 0 5
21837: PUSH
21838: EMPTY
21839: ST_TO_ADDR
// for i in list do
21840: LD_ADDR_VAR 0 6
21844: PUSH
21845: LD_VAR 0 2
21849: PUSH
21850: FOR_IN
21851: IFFALSE 22069
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21853: LD_ADDR_VAR 0 8
21857: PUSH
21858: LD_VAR 0 1
21862: PPUSH
21863: LD_VAR 0 6
21867: PUSH
21868: LD_INT 1
21870: ARRAY
21871: PPUSH
21872: LD_VAR 0 6
21876: PUSH
21877: LD_INT 2
21879: ARRAY
21880: PPUSH
21881: CALL_OW 297
21885: ST_TO_ADDR
// if not Count ( result ) then
21886: LD_VAR 0 5
21890: PPUSH
21891: CALL 18463 0 1
21895: NOT
21896: IFFALSE 21929
// begin result := Join ( result , [ i , tmp ] ) ;
21898: LD_ADDR_VAR 0 5
21902: PUSH
21903: LD_VAR 0 5
21907: PPUSH
21908: LD_VAR 0 6
21912: PUSH
21913: LD_VAR 0 8
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PPUSH
21922: CALL 54072 0 2
21926: ST_TO_ADDR
// continue ;
21927: GO 21850
// end ; if result [ result ] [ 2 ] <= tmp then
21929: LD_VAR 0 5
21933: PUSH
21934: LD_VAR 0 5
21938: ARRAY
21939: PUSH
21940: LD_INT 2
21942: ARRAY
21943: PUSH
21944: LD_VAR 0 8
21948: LESSEQUAL
21949: IFFALSE 21982
// result := Join ( result , [ i , tmp ] ) else
21951: LD_ADDR_VAR 0 5
21955: PUSH
21956: LD_VAR 0 5
21960: PPUSH
21961: LD_VAR 0 6
21965: PUSH
21966: LD_VAR 0 8
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PPUSH
21975: CALL 54072 0 2
21979: ST_TO_ADDR
21980: GO 22067
// begin for j := 1 to Count ( result ) do
21982: LD_ADDR_VAR 0 7
21986: PUSH
21987: DOUBLE
21988: LD_INT 1
21990: DEC
21991: ST_TO_ADDR
21992: LD_VAR 0 5
21996: PPUSH
21997: CALL 18463 0 1
22001: PUSH
22002: FOR_TO
22003: IFFALSE 22065
// begin if tmp < result [ j ] [ 2 ] then
22005: LD_VAR 0 8
22009: PUSH
22010: LD_VAR 0 5
22014: PUSH
22015: LD_VAR 0 7
22019: ARRAY
22020: PUSH
22021: LD_INT 2
22023: ARRAY
22024: LESS
22025: IFFALSE 22063
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22027: LD_ADDR_VAR 0 5
22031: PUSH
22032: LD_VAR 0 5
22036: PPUSH
22037: LD_VAR 0 7
22041: PPUSH
22042: LD_VAR 0 6
22046: PUSH
22047: LD_VAR 0 8
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PPUSH
22056: CALL_OW 2
22060: ST_TO_ADDR
// break ;
22061: GO 22065
// end ; end ;
22063: GO 22002
22065: POP
22066: POP
// end ; end ;
22067: GO 21850
22069: POP
22070: POP
// if result and not asc then
22071: LD_VAR 0 5
22075: PUSH
22076: LD_VAR 0 3
22080: NOT
22081: AND
22082: IFFALSE 22099
// result := ReverseArray ( result ) ;
22084: LD_ADDR_VAR 0 5
22088: PUSH
22089: LD_VAR 0 5
22093: PPUSH
22094: CALL 49339 0 1
22098: ST_TO_ADDR
// tmp := [ ] ;
22099: LD_ADDR_VAR 0 8
22103: PUSH
22104: EMPTY
22105: ST_TO_ADDR
// if mode then
22106: LD_VAR 0 4
22110: IFFALSE 22174
// begin for i := 1 to result do
22112: LD_ADDR_VAR 0 6
22116: PUSH
22117: DOUBLE
22118: LD_INT 1
22120: DEC
22121: ST_TO_ADDR
22122: LD_VAR 0 5
22126: PUSH
22127: FOR_TO
22128: IFFALSE 22162
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22130: LD_ADDR_VAR 0 8
22134: PUSH
22135: LD_VAR 0 8
22139: PPUSH
22140: LD_VAR 0 5
22144: PUSH
22145: LD_VAR 0 6
22149: ARRAY
22150: PUSH
22151: LD_INT 1
22153: ARRAY
22154: PPUSH
22155: CALL 54072 0 2
22159: ST_TO_ADDR
22160: GO 22127
22162: POP
22163: POP
// result := tmp ;
22164: LD_ADDR_VAR 0 5
22168: PUSH
22169: LD_VAR 0 8
22173: ST_TO_ADDR
// end ; end ;
22174: LD_VAR 0 5
22178: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22179: LD_INT 0
22181: PPUSH
22182: PPUSH
22183: PPUSH
22184: PPUSH
// if not list then
22185: LD_VAR 0 3
22189: NOT
22190: IFFALSE 22194
// exit ;
22192: GO 22582
// result := [ ] ;
22194: LD_ADDR_VAR 0 6
22198: PUSH
22199: EMPTY
22200: ST_TO_ADDR
// for i in list do
22201: LD_ADDR_VAR 0 7
22205: PUSH
22206: LD_VAR 0 3
22210: PUSH
22211: FOR_IN
22212: IFFALSE 22414
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22214: LD_ADDR_VAR 0 9
22218: PUSH
22219: LD_VAR 0 7
22223: PPUSH
22224: LD_VAR 0 1
22228: PPUSH
22229: LD_VAR 0 2
22233: PPUSH
22234: CALL_OW 297
22238: ST_TO_ADDR
// if not result then
22239: LD_VAR 0 6
22243: NOT
22244: IFFALSE 22270
// result := [ [ i , tmp ] ] else
22246: LD_ADDR_VAR 0 6
22250: PUSH
22251: LD_VAR 0 7
22255: PUSH
22256: LD_VAR 0 9
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: EMPTY
22266: LIST
22267: ST_TO_ADDR
22268: GO 22412
// begin if result [ result ] [ 2 ] <= tmp then
22270: LD_VAR 0 6
22274: PUSH
22275: LD_VAR 0 6
22279: ARRAY
22280: PUSH
22281: LD_INT 2
22283: ARRAY
22284: PUSH
22285: LD_VAR 0 9
22289: LESSEQUAL
22290: IFFALSE 22332
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22292: LD_ADDR_VAR 0 6
22296: PUSH
22297: LD_VAR 0 6
22301: PPUSH
22302: LD_VAR 0 6
22306: PUSH
22307: LD_INT 1
22309: PLUS
22310: PPUSH
22311: LD_VAR 0 7
22315: PUSH
22316: LD_VAR 0 9
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PPUSH
22325: CALL_OW 2
22329: ST_TO_ADDR
22330: GO 22412
// for j := 1 to result do
22332: LD_ADDR_VAR 0 8
22336: PUSH
22337: DOUBLE
22338: LD_INT 1
22340: DEC
22341: ST_TO_ADDR
22342: LD_VAR 0 6
22346: PUSH
22347: FOR_TO
22348: IFFALSE 22410
// begin if tmp < result [ j ] [ 2 ] then
22350: LD_VAR 0 9
22354: PUSH
22355: LD_VAR 0 6
22359: PUSH
22360: LD_VAR 0 8
22364: ARRAY
22365: PUSH
22366: LD_INT 2
22368: ARRAY
22369: LESS
22370: IFFALSE 22408
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22372: LD_ADDR_VAR 0 6
22376: PUSH
22377: LD_VAR 0 6
22381: PPUSH
22382: LD_VAR 0 8
22386: PPUSH
22387: LD_VAR 0 7
22391: PUSH
22392: LD_VAR 0 9
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PPUSH
22401: CALL_OW 2
22405: ST_TO_ADDR
// break ;
22406: GO 22410
// end ; end ;
22408: GO 22347
22410: POP
22411: POP
// end ; end ;
22412: GO 22211
22414: POP
22415: POP
// if result and not asc then
22416: LD_VAR 0 6
22420: PUSH
22421: LD_VAR 0 4
22425: NOT
22426: AND
22427: IFFALSE 22502
// begin tmp := result ;
22429: LD_ADDR_VAR 0 9
22433: PUSH
22434: LD_VAR 0 6
22438: ST_TO_ADDR
// for i = tmp downto 1 do
22439: LD_ADDR_VAR 0 7
22443: PUSH
22444: DOUBLE
22445: LD_VAR 0 9
22449: INC
22450: ST_TO_ADDR
22451: LD_INT 1
22453: PUSH
22454: FOR_DOWNTO
22455: IFFALSE 22500
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22457: LD_ADDR_VAR 0 6
22461: PUSH
22462: LD_VAR 0 6
22466: PPUSH
22467: LD_VAR 0 9
22471: PUSH
22472: LD_VAR 0 7
22476: MINUS
22477: PUSH
22478: LD_INT 1
22480: PLUS
22481: PPUSH
22482: LD_VAR 0 9
22486: PUSH
22487: LD_VAR 0 7
22491: ARRAY
22492: PPUSH
22493: CALL_OW 1
22497: ST_TO_ADDR
22498: GO 22454
22500: POP
22501: POP
// end ; tmp := [ ] ;
22502: LD_ADDR_VAR 0 9
22506: PUSH
22507: EMPTY
22508: ST_TO_ADDR
// if mode then
22509: LD_VAR 0 5
22513: IFFALSE 22582
// begin for i = 1 to result do
22515: LD_ADDR_VAR 0 7
22519: PUSH
22520: DOUBLE
22521: LD_INT 1
22523: DEC
22524: ST_TO_ADDR
22525: LD_VAR 0 6
22529: PUSH
22530: FOR_TO
22531: IFFALSE 22570
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22533: LD_ADDR_VAR 0 9
22537: PUSH
22538: LD_VAR 0 9
22542: PPUSH
22543: LD_VAR 0 7
22547: PPUSH
22548: LD_VAR 0 6
22552: PUSH
22553: LD_VAR 0 7
22557: ARRAY
22558: PUSH
22559: LD_INT 1
22561: ARRAY
22562: PPUSH
22563: CALL_OW 1
22567: ST_TO_ADDR
22568: GO 22530
22570: POP
22571: POP
// result := tmp ;
22572: LD_ADDR_VAR 0 6
22576: PUSH
22577: LD_VAR 0 9
22581: ST_TO_ADDR
// end ; end ;
22582: LD_VAR 0 6
22586: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22587: LD_INT 0
22589: PPUSH
22590: PPUSH
22591: PPUSH
22592: PPUSH
22593: PPUSH
22594: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22595: LD_ADDR_VAR 0 5
22599: PUSH
22600: LD_INT 0
22602: PUSH
22603: LD_INT 0
22605: PUSH
22606: LD_INT 0
22608: PUSH
22609: EMPTY
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: ST_TO_ADDR
// if not x or not y then
22617: LD_VAR 0 2
22621: NOT
22622: PUSH
22623: LD_VAR 0 3
22627: NOT
22628: OR
22629: IFFALSE 22633
// exit ;
22631: GO 24283
// if not range then
22633: LD_VAR 0 4
22637: NOT
22638: IFFALSE 22648
// range := 10 ;
22640: LD_ADDR_VAR 0 4
22644: PUSH
22645: LD_INT 10
22647: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22648: LD_ADDR_VAR 0 8
22652: PUSH
22653: LD_INT 81
22655: PUSH
22656: LD_VAR 0 1
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 92
22667: PUSH
22668: LD_VAR 0 2
22672: PUSH
22673: LD_VAR 0 3
22677: PUSH
22678: LD_VAR 0 4
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 3
22691: PUSH
22692: LD_INT 21
22694: PUSH
22695: LD_INT 3
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: LIST
22710: PPUSH
22711: CALL_OW 69
22715: ST_TO_ADDR
// if not tmp then
22716: LD_VAR 0 8
22720: NOT
22721: IFFALSE 22725
// exit ;
22723: GO 24283
// for i in tmp do
22725: LD_ADDR_VAR 0 6
22729: PUSH
22730: LD_VAR 0 8
22734: PUSH
22735: FOR_IN
22736: IFFALSE 24258
// begin points := [ 0 , 0 , 0 ] ;
22738: LD_ADDR_VAR 0 9
22742: PUSH
22743: LD_INT 0
22745: PUSH
22746: LD_INT 0
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: LIST
22756: ST_TO_ADDR
// bpoints := 1 ;
22757: LD_ADDR_VAR 0 10
22761: PUSH
22762: LD_INT 1
22764: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22765: LD_VAR 0 6
22769: PPUSH
22770: CALL_OW 247
22774: PUSH
22775: LD_INT 1
22777: DOUBLE
22778: EQUAL
22779: IFTRUE 22783
22781: GO 23361
22783: POP
// begin if GetClass ( i ) = 1 then
22784: LD_VAR 0 6
22788: PPUSH
22789: CALL_OW 257
22793: PUSH
22794: LD_INT 1
22796: EQUAL
22797: IFFALSE 22818
// points := [ 10 , 5 , 3 ] ;
22799: LD_ADDR_VAR 0 9
22803: PUSH
22804: LD_INT 10
22806: PUSH
22807: LD_INT 5
22809: PUSH
22810: LD_INT 3
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: LIST
22817: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22818: LD_VAR 0 6
22822: PPUSH
22823: CALL_OW 257
22827: PUSH
22828: LD_INT 2
22830: PUSH
22831: LD_INT 3
22833: PUSH
22834: LD_INT 4
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: LIST
22841: IN
22842: IFFALSE 22863
// points := [ 3 , 2 , 1 ] ;
22844: LD_ADDR_VAR 0 9
22848: PUSH
22849: LD_INT 3
22851: PUSH
22852: LD_INT 2
22854: PUSH
22855: LD_INT 1
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22863: LD_VAR 0 6
22867: PPUSH
22868: CALL_OW 257
22872: PUSH
22873: LD_INT 5
22875: EQUAL
22876: IFFALSE 22897
// points := [ 130 , 5 , 2 ] ;
22878: LD_ADDR_VAR 0 9
22882: PUSH
22883: LD_INT 130
22885: PUSH
22886: LD_INT 5
22888: PUSH
22889: LD_INT 2
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: LIST
22896: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22897: LD_VAR 0 6
22901: PPUSH
22902: CALL_OW 257
22906: PUSH
22907: LD_INT 8
22909: EQUAL
22910: IFFALSE 22931
// points := [ 35 , 35 , 30 ] ;
22912: LD_ADDR_VAR 0 9
22916: PUSH
22917: LD_INT 35
22919: PUSH
22920: LD_INT 35
22922: PUSH
22923: LD_INT 30
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: LIST
22930: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22931: LD_VAR 0 6
22935: PPUSH
22936: CALL_OW 257
22940: PUSH
22941: LD_INT 9
22943: EQUAL
22944: IFFALSE 22965
// points := [ 20 , 55 , 40 ] ;
22946: LD_ADDR_VAR 0 9
22950: PUSH
22951: LD_INT 20
22953: PUSH
22954: LD_INT 55
22956: PUSH
22957: LD_INT 40
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: LIST
22964: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22965: LD_VAR 0 6
22969: PPUSH
22970: CALL_OW 257
22974: PUSH
22975: LD_INT 12
22977: PUSH
22978: LD_INT 16
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: IN
22985: IFFALSE 23006
// points := [ 5 , 3 , 2 ] ;
22987: LD_ADDR_VAR 0 9
22991: PUSH
22992: LD_INT 5
22994: PUSH
22995: LD_INT 3
22997: PUSH
22998: LD_INT 2
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: LIST
23005: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23006: LD_VAR 0 6
23010: PPUSH
23011: CALL_OW 257
23015: PUSH
23016: LD_INT 17
23018: EQUAL
23019: IFFALSE 23040
// points := [ 100 , 50 , 75 ] ;
23021: LD_ADDR_VAR 0 9
23025: PUSH
23026: LD_INT 100
23028: PUSH
23029: LD_INT 50
23031: PUSH
23032: LD_INT 75
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23040: LD_VAR 0 6
23044: PPUSH
23045: CALL_OW 257
23049: PUSH
23050: LD_INT 15
23052: EQUAL
23053: IFFALSE 23074
// points := [ 10 , 5 , 3 ] ;
23055: LD_ADDR_VAR 0 9
23059: PUSH
23060: LD_INT 10
23062: PUSH
23063: LD_INT 5
23065: PUSH
23066: LD_INT 3
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: LIST
23073: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23074: LD_VAR 0 6
23078: PPUSH
23079: CALL_OW 257
23083: PUSH
23084: LD_INT 14
23086: EQUAL
23087: IFFALSE 23108
// points := [ 10 , 0 , 0 ] ;
23089: LD_ADDR_VAR 0 9
23093: PUSH
23094: LD_INT 10
23096: PUSH
23097: LD_INT 0
23099: PUSH
23100: LD_INT 0
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: LIST
23107: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23108: LD_VAR 0 6
23112: PPUSH
23113: CALL_OW 257
23117: PUSH
23118: LD_INT 11
23120: EQUAL
23121: IFFALSE 23142
// points := [ 30 , 10 , 5 ] ;
23123: LD_ADDR_VAR 0 9
23127: PUSH
23128: LD_INT 30
23130: PUSH
23131: LD_INT 10
23133: PUSH
23134: LD_INT 5
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: LIST
23141: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23142: LD_VAR 0 1
23146: PPUSH
23147: LD_INT 5
23149: PPUSH
23150: CALL_OW 321
23154: PUSH
23155: LD_INT 2
23157: EQUAL
23158: IFFALSE 23175
// bpoints := bpoints * 1.8 ;
23160: LD_ADDR_VAR 0 10
23164: PUSH
23165: LD_VAR 0 10
23169: PUSH
23170: LD_REAL  1.80000000000000E+0000
23173: MUL
23174: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23175: LD_VAR 0 6
23179: PPUSH
23180: CALL_OW 257
23184: PUSH
23185: LD_INT 1
23187: PUSH
23188: LD_INT 2
23190: PUSH
23191: LD_INT 3
23193: PUSH
23194: LD_INT 4
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: IN
23203: PUSH
23204: LD_VAR 0 1
23208: PPUSH
23209: LD_INT 51
23211: PPUSH
23212: CALL_OW 321
23216: PUSH
23217: LD_INT 2
23219: EQUAL
23220: AND
23221: IFFALSE 23238
// bpoints := bpoints * 1.2 ;
23223: LD_ADDR_VAR 0 10
23227: PUSH
23228: LD_VAR 0 10
23232: PUSH
23233: LD_REAL  1.20000000000000E+0000
23236: MUL
23237: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23238: LD_VAR 0 6
23242: PPUSH
23243: CALL_OW 257
23247: PUSH
23248: LD_INT 5
23250: PUSH
23251: LD_INT 7
23253: PUSH
23254: LD_INT 9
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: LIST
23261: IN
23262: PUSH
23263: LD_VAR 0 1
23267: PPUSH
23268: LD_INT 52
23270: PPUSH
23271: CALL_OW 321
23275: PUSH
23276: LD_INT 2
23278: EQUAL
23279: AND
23280: IFFALSE 23297
// bpoints := bpoints * 1.5 ;
23282: LD_ADDR_VAR 0 10
23286: PUSH
23287: LD_VAR 0 10
23291: PUSH
23292: LD_REAL  1.50000000000000E+0000
23295: MUL
23296: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23297: LD_VAR 0 1
23301: PPUSH
23302: LD_INT 66
23304: PPUSH
23305: CALL_OW 321
23309: PUSH
23310: LD_INT 2
23312: EQUAL
23313: IFFALSE 23330
// bpoints := bpoints * 1.1 ;
23315: LD_ADDR_VAR 0 10
23319: PUSH
23320: LD_VAR 0 10
23324: PUSH
23325: LD_REAL  1.10000000000000E+0000
23328: MUL
23329: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23330: LD_ADDR_VAR 0 10
23334: PUSH
23335: LD_VAR 0 10
23339: PUSH
23340: LD_VAR 0 6
23344: PPUSH
23345: LD_INT 1
23347: PPUSH
23348: CALL_OW 259
23352: PUSH
23353: LD_REAL  1.15000000000000E+0000
23356: MUL
23357: MUL
23358: ST_TO_ADDR
// end ; unit_vehicle :
23359: GO 24187
23361: LD_INT 2
23363: DOUBLE
23364: EQUAL
23365: IFTRUE 23369
23367: GO 24175
23369: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23370: LD_VAR 0 6
23374: PPUSH
23375: CALL_OW 264
23379: PUSH
23380: LD_INT 2
23382: PUSH
23383: LD_INT 42
23385: PUSH
23386: LD_INT 24
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: LIST
23393: IN
23394: IFFALSE 23415
// points := [ 25 , 5 , 3 ] ;
23396: LD_ADDR_VAR 0 9
23400: PUSH
23401: LD_INT 25
23403: PUSH
23404: LD_INT 5
23406: PUSH
23407: LD_INT 3
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: LIST
23414: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23415: LD_VAR 0 6
23419: PPUSH
23420: CALL_OW 264
23424: PUSH
23425: LD_INT 4
23427: PUSH
23428: LD_INT 43
23430: PUSH
23431: LD_INT 25
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: LIST
23438: IN
23439: IFFALSE 23460
// points := [ 40 , 15 , 5 ] ;
23441: LD_ADDR_VAR 0 9
23445: PUSH
23446: LD_INT 40
23448: PUSH
23449: LD_INT 15
23451: PUSH
23452: LD_INT 5
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: LIST
23459: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23460: LD_VAR 0 6
23464: PPUSH
23465: CALL_OW 264
23469: PUSH
23470: LD_INT 3
23472: PUSH
23473: LD_INT 23
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: IN
23480: IFFALSE 23501
// points := [ 7 , 25 , 8 ] ;
23482: LD_ADDR_VAR 0 9
23486: PUSH
23487: LD_INT 7
23489: PUSH
23490: LD_INT 25
23492: PUSH
23493: LD_INT 8
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: LIST
23500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23501: LD_VAR 0 6
23505: PPUSH
23506: CALL_OW 264
23510: PUSH
23511: LD_INT 5
23513: PUSH
23514: LD_INT 27
23516: PUSH
23517: LD_INT 44
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: LIST
23524: IN
23525: IFFALSE 23546
// points := [ 14 , 50 , 16 ] ;
23527: LD_ADDR_VAR 0 9
23531: PUSH
23532: LD_INT 14
23534: PUSH
23535: LD_INT 50
23537: PUSH
23538: LD_INT 16
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: LIST
23545: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23546: LD_VAR 0 6
23550: PPUSH
23551: CALL_OW 264
23555: PUSH
23556: LD_INT 6
23558: PUSH
23559: LD_INT 46
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: IN
23566: IFFALSE 23587
// points := [ 32 , 120 , 70 ] ;
23568: LD_ADDR_VAR 0 9
23572: PUSH
23573: LD_INT 32
23575: PUSH
23576: LD_INT 120
23578: PUSH
23579: LD_INT 70
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: LIST
23586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23587: LD_VAR 0 6
23591: PPUSH
23592: CALL_OW 264
23596: PUSH
23597: LD_INT 7
23599: PUSH
23600: LD_INT 28
23602: PUSH
23603: LD_INT 45
23605: PUSH
23606: LD_INT 92
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: IN
23615: IFFALSE 23636
// points := [ 35 , 20 , 45 ] ;
23617: LD_ADDR_VAR 0 9
23621: PUSH
23622: LD_INT 35
23624: PUSH
23625: LD_INT 20
23627: PUSH
23628: LD_INT 45
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: LIST
23635: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23636: LD_VAR 0 6
23640: PPUSH
23641: CALL_OW 264
23645: PUSH
23646: LD_INT 47
23648: PUSH
23649: EMPTY
23650: LIST
23651: IN
23652: IFFALSE 23673
// points := [ 67 , 45 , 75 ] ;
23654: LD_ADDR_VAR 0 9
23658: PUSH
23659: LD_INT 67
23661: PUSH
23662: LD_INT 45
23664: PUSH
23665: LD_INT 75
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: LIST
23672: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23673: LD_VAR 0 6
23677: PPUSH
23678: CALL_OW 264
23682: PUSH
23683: LD_INT 26
23685: PUSH
23686: EMPTY
23687: LIST
23688: IN
23689: IFFALSE 23710
// points := [ 120 , 30 , 80 ] ;
23691: LD_ADDR_VAR 0 9
23695: PUSH
23696: LD_INT 120
23698: PUSH
23699: LD_INT 30
23701: PUSH
23702: LD_INT 80
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: LIST
23709: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23710: LD_VAR 0 6
23714: PPUSH
23715: CALL_OW 264
23719: PUSH
23720: LD_INT 22
23722: PUSH
23723: EMPTY
23724: LIST
23725: IN
23726: IFFALSE 23747
// points := [ 40 , 1 , 1 ] ;
23728: LD_ADDR_VAR 0 9
23732: PUSH
23733: LD_INT 40
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: LIST
23746: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23747: LD_VAR 0 6
23751: PPUSH
23752: CALL_OW 264
23756: PUSH
23757: LD_INT 29
23759: PUSH
23760: EMPTY
23761: LIST
23762: IN
23763: IFFALSE 23784
// points := [ 70 , 200 , 400 ] ;
23765: LD_ADDR_VAR 0 9
23769: PUSH
23770: LD_INT 70
23772: PUSH
23773: LD_INT 200
23775: PUSH
23776: LD_INT 400
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: LIST
23783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23784: LD_VAR 0 6
23788: PPUSH
23789: CALL_OW 264
23793: PUSH
23794: LD_INT 14
23796: PUSH
23797: LD_INT 53
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: IN
23804: IFFALSE 23825
// points := [ 40 , 10 , 20 ] ;
23806: LD_ADDR_VAR 0 9
23810: PUSH
23811: LD_INT 40
23813: PUSH
23814: LD_INT 10
23816: PUSH
23817: LD_INT 20
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: LIST
23824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23825: LD_VAR 0 6
23829: PPUSH
23830: CALL_OW 264
23834: PUSH
23835: LD_INT 9
23837: PUSH
23838: EMPTY
23839: LIST
23840: IN
23841: IFFALSE 23862
// points := [ 5 , 70 , 20 ] ;
23843: LD_ADDR_VAR 0 9
23847: PUSH
23848: LD_INT 5
23850: PUSH
23851: LD_INT 70
23853: PUSH
23854: LD_INT 20
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: LIST
23861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23862: LD_VAR 0 6
23866: PPUSH
23867: CALL_OW 264
23871: PUSH
23872: LD_INT 10
23874: PUSH
23875: EMPTY
23876: LIST
23877: IN
23878: IFFALSE 23899
// points := [ 35 , 110 , 70 ] ;
23880: LD_ADDR_VAR 0 9
23884: PUSH
23885: LD_INT 35
23887: PUSH
23888: LD_INT 110
23890: PUSH
23891: LD_INT 70
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23899: LD_VAR 0 6
23903: PPUSH
23904: CALL_OW 265
23908: PUSH
23909: LD_INT 25
23911: EQUAL
23912: IFFALSE 23933
// points := [ 80 , 65 , 100 ] ;
23914: LD_ADDR_VAR 0 9
23918: PUSH
23919: LD_INT 80
23921: PUSH
23922: LD_INT 65
23924: PUSH
23925: LD_INT 100
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: LIST
23932: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23933: LD_VAR 0 6
23937: PPUSH
23938: CALL_OW 263
23942: PUSH
23943: LD_INT 1
23945: EQUAL
23946: IFFALSE 23981
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23948: LD_ADDR_VAR 0 10
23952: PUSH
23953: LD_VAR 0 10
23957: PUSH
23958: LD_VAR 0 6
23962: PPUSH
23963: CALL_OW 311
23967: PPUSH
23968: LD_INT 3
23970: PPUSH
23971: CALL_OW 259
23975: PUSH
23976: LD_INT 4
23978: MUL
23979: MUL
23980: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23981: LD_VAR 0 6
23985: PPUSH
23986: CALL_OW 263
23990: PUSH
23991: LD_INT 2
23993: EQUAL
23994: IFFALSE 24045
// begin j := IsControledBy ( i ) ;
23996: LD_ADDR_VAR 0 7
24000: PUSH
24001: LD_VAR 0 6
24005: PPUSH
24006: CALL_OW 312
24010: ST_TO_ADDR
// if j then
24011: LD_VAR 0 7
24015: IFFALSE 24045
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24017: LD_ADDR_VAR 0 10
24021: PUSH
24022: LD_VAR 0 10
24026: PUSH
24027: LD_VAR 0 7
24031: PPUSH
24032: LD_INT 3
24034: PPUSH
24035: CALL_OW 259
24039: PUSH
24040: LD_INT 3
24042: MUL
24043: MUL
24044: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24045: LD_VAR 0 6
24049: PPUSH
24050: CALL_OW 264
24054: PUSH
24055: LD_INT 5
24057: PUSH
24058: LD_INT 6
24060: PUSH
24061: LD_INT 46
24063: PUSH
24064: LD_INT 44
24066: PUSH
24067: LD_INT 47
24069: PUSH
24070: LD_INT 45
24072: PUSH
24073: LD_INT 28
24075: PUSH
24076: LD_INT 7
24078: PUSH
24079: LD_INT 27
24081: PUSH
24082: LD_INT 29
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: IN
24097: PUSH
24098: LD_VAR 0 1
24102: PPUSH
24103: LD_INT 52
24105: PPUSH
24106: CALL_OW 321
24110: PUSH
24111: LD_INT 2
24113: EQUAL
24114: AND
24115: IFFALSE 24132
// bpoints := bpoints * 1.2 ;
24117: LD_ADDR_VAR 0 10
24121: PUSH
24122: LD_VAR 0 10
24126: PUSH
24127: LD_REAL  1.20000000000000E+0000
24130: MUL
24131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24132: LD_VAR 0 6
24136: PPUSH
24137: CALL_OW 264
24141: PUSH
24142: LD_INT 6
24144: PUSH
24145: LD_INT 46
24147: PUSH
24148: LD_INT 47
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: LIST
24155: IN
24156: IFFALSE 24173
// bpoints := bpoints * 1.2 ;
24158: LD_ADDR_VAR 0 10
24162: PUSH
24163: LD_VAR 0 10
24167: PUSH
24168: LD_REAL  1.20000000000000E+0000
24171: MUL
24172: ST_TO_ADDR
// end ; unit_building :
24173: GO 24187
24175: LD_INT 3
24177: DOUBLE
24178: EQUAL
24179: IFTRUE 24183
24181: GO 24186
24183: POP
// ; end ;
24184: GO 24187
24186: POP
// for j = 1 to 3 do
24187: LD_ADDR_VAR 0 7
24191: PUSH
24192: DOUBLE
24193: LD_INT 1
24195: DEC
24196: ST_TO_ADDR
24197: LD_INT 3
24199: PUSH
24200: FOR_TO
24201: IFFALSE 24254
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24203: LD_ADDR_VAR 0 5
24207: PUSH
24208: LD_VAR 0 5
24212: PPUSH
24213: LD_VAR 0 7
24217: PPUSH
24218: LD_VAR 0 5
24222: PUSH
24223: LD_VAR 0 7
24227: ARRAY
24228: PUSH
24229: LD_VAR 0 9
24233: PUSH
24234: LD_VAR 0 7
24238: ARRAY
24239: PUSH
24240: LD_VAR 0 10
24244: MUL
24245: PLUS
24246: PPUSH
24247: CALL_OW 1
24251: ST_TO_ADDR
24252: GO 24200
24254: POP
24255: POP
// end ;
24256: GO 22735
24258: POP
24259: POP
// result := Replace ( result , 4 , tmp ) ;
24260: LD_ADDR_VAR 0 5
24264: PUSH
24265: LD_VAR 0 5
24269: PPUSH
24270: LD_INT 4
24272: PPUSH
24273: LD_VAR 0 8
24277: PPUSH
24278: CALL_OW 1
24282: ST_TO_ADDR
// end ;
24283: LD_VAR 0 5
24287: RET
// export function DangerAtRange ( unit , range ) ; begin
24288: LD_INT 0
24290: PPUSH
// if not unit then
24291: LD_VAR 0 1
24295: NOT
24296: IFFALSE 24300
// exit ;
24298: GO 24345
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24300: LD_ADDR_VAR 0 3
24304: PUSH
24305: LD_VAR 0 1
24309: PPUSH
24310: CALL_OW 255
24314: PPUSH
24315: LD_VAR 0 1
24319: PPUSH
24320: CALL_OW 250
24324: PPUSH
24325: LD_VAR 0 1
24329: PPUSH
24330: CALL_OW 251
24334: PPUSH
24335: LD_VAR 0 2
24339: PPUSH
24340: CALL 22587 0 4
24344: ST_TO_ADDR
// end ;
24345: LD_VAR 0 3
24349: RET
// export function DangerInArea ( side , area ) ; begin
24350: LD_INT 0
24352: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24353: LD_ADDR_VAR 0 3
24357: PUSH
24358: LD_VAR 0 2
24362: PPUSH
24363: LD_INT 81
24365: PUSH
24366: LD_VAR 0 1
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PPUSH
24375: CALL_OW 70
24379: ST_TO_ADDR
// end ;
24380: LD_VAR 0 3
24384: RET
// export function IsExtension ( b ) ; begin
24385: LD_INT 0
24387: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24388: LD_ADDR_VAR 0 2
24392: PUSH
24393: LD_VAR 0 1
24397: PUSH
24398: LD_INT 23
24400: PUSH
24401: LD_INT 20
24403: PUSH
24404: LD_INT 22
24406: PUSH
24407: LD_INT 17
24409: PUSH
24410: LD_INT 24
24412: PUSH
24413: LD_INT 21
24415: PUSH
24416: LD_INT 19
24418: PUSH
24419: LD_INT 16
24421: PUSH
24422: LD_INT 25
24424: PUSH
24425: LD_INT 18
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: IN
24440: ST_TO_ADDR
// end ;
24441: LD_VAR 0 2
24445: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24446: LD_INT 0
24448: PPUSH
24449: PPUSH
24450: PPUSH
// result := [ ] ;
24451: LD_ADDR_VAR 0 4
24455: PUSH
24456: EMPTY
24457: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24458: LD_ADDR_VAR 0 5
24462: PUSH
24463: LD_VAR 0 2
24467: PPUSH
24468: LD_INT 21
24470: PUSH
24471: LD_INT 3
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PPUSH
24478: CALL_OW 70
24482: ST_TO_ADDR
// if not tmp then
24483: LD_VAR 0 5
24487: NOT
24488: IFFALSE 24492
// exit ;
24490: GO 24556
// if checkLink then
24492: LD_VAR 0 3
24496: IFFALSE 24546
// begin for i in tmp do
24498: LD_ADDR_VAR 0 6
24502: PUSH
24503: LD_VAR 0 5
24507: PUSH
24508: FOR_IN
24509: IFFALSE 24544
// if GetBase ( i ) <> base then
24511: LD_VAR 0 6
24515: PPUSH
24516: CALL_OW 274
24520: PUSH
24521: LD_VAR 0 1
24525: NONEQUAL
24526: IFFALSE 24542
// ComLinkToBase ( base , i ) ;
24528: LD_VAR 0 1
24532: PPUSH
24533: LD_VAR 0 6
24537: PPUSH
24538: CALL_OW 169
24542: GO 24508
24544: POP
24545: POP
// end ; result := tmp ;
24546: LD_ADDR_VAR 0 4
24550: PUSH
24551: LD_VAR 0 5
24555: ST_TO_ADDR
// end ;
24556: LD_VAR 0 4
24560: RET
// export function ComComplete ( units , b ) ; var i ; begin
24561: LD_INT 0
24563: PPUSH
24564: PPUSH
// if not units then
24565: LD_VAR 0 1
24569: NOT
24570: IFFALSE 24574
// exit ;
24572: GO 24664
// for i in units do
24574: LD_ADDR_VAR 0 4
24578: PUSH
24579: LD_VAR 0 1
24583: PUSH
24584: FOR_IN
24585: IFFALSE 24662
// if BuildingStatus ( b ) = bs_build then
24587: LD_VAR 0 2
24591: PPUSH
24592: CALL_OW 461
24596: PUSH
24597: LD_INT 1
24599: EQUAL
24600: IFFALSE 24660
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24602: LD_VAR 0 4
24606: PPUSH
24607: LD_STRING h
24609: PUSH
24610: LD_VAR 0 2
24614: PPUSH
24615: CALL_OW 250
24619: PUSH
24620: LD_VAR 0 2
24624: PPUSH
24625: CALL_OW 251
24629: PUSH
24630: LD_VAR 0 2
24634: PUSH
24635: LD_INT 0
24637: PUSH
24638: LD_INT 0
24640: PUSH
24641: LD_INT 0
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: PUSH
24653: EMPTY
24654: LIST
24655: PPUSH
24656: CALL_OW 446
24660: GO 24584
24662: POP
24663: POP
// end ;
24664: LD_VAR 0 3
24668: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24669: LD_INT 0
24671: PPUSH
24672: PPUSH
24673: PPUSH
24674: PPUSH
24675: PPUSH
24676: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24677: LD_VAR 0 1
24681: NOT
24682: PUSH
24683: LD_VAR 0 1
24687: PPUSH
24688: CALL_OW 263
24692: PUSH
24693: LD_INT 2
24695: NONEQUAL
24696: OR
24697: IFFALSE 24701
// exit ;
24699: GO 25017
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24701: LD_ADDR_VAR 0 6
24705: PUSH
24706: LD_INT 22
24708: PUSH
24709: LD_VAR 0 1
24713: PPUSH
24714: CALL_OW 255
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 2
24725: PUSH
24726: LD_INT 30
24728: PUSH
24729: LD_INT 36
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 34
24738: PUSH
24739: LD_INT 31
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: LIST
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PPUSH
24755: CALL_OW 69
24759: ST_TO_ADDR
// if not tmp then
24760: LD_VAR 0 6
24764: NOT
24765: IFFALSE 24769
// exit ;
24767: GO 25017
// result := [ ] ;
24769: LD_ADDR_VAR 0 2
24773: PUSH
24774: EMPTY
24775: ST_TO_ADDR
// for i in tmp do
24776: LD_ADDR_VAR 0 3
24780: PUSH
24781: LD_VAR 0 6
24785: PUSH
24786: FOR_IN
24787: IFFALSE 24858
// begin t := UnitsInside ( i ) ;
24789: LD_ADDR_VAR 0 4
24793: PUSH
24794: LD_VAR 0 3
24798: PPUSH
24799: CALL_OW 313
24803: ST_TO_ADDR
// if t then
24804: LD_VAR 0 4
24808: IFFALSE 24856
// for j in t do
24810: LD_ADDR_VAR 0 7
24814: PUSH
24815: LD_VAR 0 4
24819: PUSH
24820: FOR_IN
24821: IFFALSE 24854
// result := Replace ( result , result + 1 , j ) ;
24823: LD_ADDR_VAR 0 2
24827: PUSH
24828: LD_VAR 0 2
24832: PPUSH
24833: LD_VAR 0 2
24837: PUSH
24838: LD_INT 1
24840: PLUS
24841: PPUSH
24842: LD_VAR 0 7
24846: PPUSH
24847: CALL_OW 1
24851: ST_TO_ADDR
24852: GO 24820
24854: POP
24855: POP
// end ;
24856: GO 24786
24858: POP
24859: POP
// if not result then
24860: LD_VAR 0 2
24864: NOT
24865: IFFALSE 24869
// exit ;
24867: GO 25017
// mech := result [ 1 ] ;
24869: LD_ADDR_VAR 0 5
24873: PUSH
24874: LD_VAR 0 2
24878: PUSH
24879: LD_INT 1
24881: ARRAY
24882: ST_TO_ADDR
// if result > 1 then
24883: LD_VAR 0 2
24887: PUSH
24888: LD_INT 1
24890: GREATER
24891: IFFALSE 25003
// begin for i = 2 to result do
24893: LD_ADDR_VAR 0 3
24897: PUSH
24898: DOUBLE
24899: LD_INT 2
24901: DEC
24902: ST_TO_ADDR
24903: LD_VAR 0 2
24907: PUSH
24908: FOR_TO
24909: IFFALSE 25001
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24911: LD_ADDR_VAR 0 4
24915: PUSH
24916: LD_VAR 0 2
24920: PUSH
24921: LD_VAR 0 3
24925: ARRAY
24926: PPUSH
24927: LD_INT 3
24929: PPUSH
24930: CALL_OW 259
24934: PUSH
24935: LD_VAR 0 2
24939: PUSH
24940: LD_VAR 0 3
24944: ARRAY
24945: PPUSH
24946: CALL_OW 432
24950: MINUS
24951: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24952: LD_VAR 0 4
24956: PUSH
24957: LD_VAR 0 5
24961: PPUSH
24962: LD_INT 3
24964: PPUSH
24965: CALL_OW 259
24969: PUSH
24970: LD_VAR 0 5
24974: PPUSH
24975: CALL_OW 432
24979: MINUS
24980: GREATEREQUAL
24981: IFFALSE 24999
// mech := result [ i ] ;
24983: LD_ADDR_VAR 0 5
24987: PUSH
24988: LD_VAR 0 2
24992: PUSH
24993: LD_VAR 0 3
24997: ARRAY
24998: ST_TO_ADDR
// end ;
24999: GO 24908
25001: POP
25002: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25003: LD_VAR 0 1
25007: PPUSH
25008: LD_VAR 0 5
25012: PPUSH
25013: CALL_OW 135
// end ;
25017: LD_VAR 0 2
25021: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25022: LD_INT 0
25024: PPUSH
25025: PPUSH
25026: PPUSH
25027: PPUSH
25028: PPUSH
25029: PPUSH
25030: PPUSH
25031: PPUSH
25032: PPUSH
25033: PPUSH
25034: PPUSH
25035: PPUSH
25036: PPUSH
// result := [ ] ;
25037: LD_ADDR_VAR 0 7
25041: PUSH
25042: EMPTY
25043: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25044: LD_VAR 0 1
25048: PPUSH
25049: CALL_OW 266
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: LD_INT 1
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: IN
25064: NOT
25065: IFFALSE 25069
// exit ;
25067: GO 26703
// if name then
25069: LD_VAR 0 3
25073: IFFALSE 25089
// SetBName ( base_dep , name ) ;
25075: LD_VAR 0 1
25079: PPUSH
25080: LD_VAR 0 3
25084: PPUSH
25085: CALL_OW 500
// base := GetBase ( base_dep ) ;
25089: LD_ADDR_VAR 0 15
25093: PUSH
25094: LD_VAR 0 1
25098: PPUSH
25099: CALL_OW 274
25103: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25104: LD_ADDR_VAR 0 16
25108: PUSH
25109: LD_VAR 0 1
25113: PPUSH
25114: CALL_OW 255
25118: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25119: LD_ADDR_VAR 0 17
25123: PUSH
25124: LD_VAR 0 1
25128: PPUSH
25129: CALL_OW 248
25133: ST_TO_ADDR
// if sources then
25134: LD_VAR 0 5
25138: IFFALSE 25185
// for i = 1 to 3 do
25140: LD_ADDR_VAR 0 8
25144: PUSH
25145: DOUBLE
25146: LD_INT 1
25148: DEC
25149: ST_TO_ADDR
25150: LD_INT 3
25152: PUSH
25153: FOR_TO
25154: IFFALSE 25183
// AddResourceType ( base , i , sources [ i ] ) ;
25156: LD_VAR 0 15
25160: PPUSH
25161: LD_VAR 0 8
25165: PPUSH
25166: LD_VAR 0 5
25170: PUSH
25171: LD_VAR 0 8
25175: ARRAY
25176: PPUSH
25177: CALL_OW 276
25181: GO 25153
25183: POP
25184: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25185: LD_ADDR_VAR 0 18
25189: PUSH
25190: LD_VAR 0 15
25194: PPUSH
25195: LD_VAR 0 2
25199: PPUSH
25200: LD_INT 1
25202: PPUSH
25203: CALL 24446 0 3
25207: ST_TO_ADDR
// InitHc ;
25208: CALL_OW 19
// InitUc ;
25212: CALL_OW 18
// uc_side := side ;
25216: LD_ADDR_OWVAR 20
25220: PUSH
25221: LD_VAR 0 16
25225: ST_TO_ADDR
// uc_nation := nation ;
25226: LD_ADDR_OWVAR 21
25230: PUSH
25231: LD_VAR 0 17
25235: ST_TO_ADDR
// if buildings then
25236: LD_VAR 0 18
25240: IFFALSE 26562
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25242: LD_ADDR_VAR 0 19
25246: PUSH
25247: LD_VAR 0 18
25251: PPUSH
25252: LD_INT 2
25254: PUSH
25255: LD_INT 30
25257: PUSH
25258: LD_INT 29
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 30
25267: PUSH
25268: LD_INT 30
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: LIST
25279: PPUSH
25280: CALL_OW 72
25284: ST_TO_ADDR
// if tmp then
25285: LD_VAR 0 19
25289: IFFALSE 25337
// for i in tmp do
25291: LD_ADDR_VAR 0 8
25295: PUSH
25296: LD_VAR 0 19
25300: PUSH
25301: FOR_IN
25302: IFFALSE 25335
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25304: LD_VAR 0 8
25308: PPUSH
25309: CALL_OW 250
25313: PPUSH
25314: LD_VAR 0 8
25318: PPUSH
25319: CALL_OW 251
25323: PPUSH
25324: LD_VAR 0 16
25328: PPUSH
25329: CALL_OW 441
25333: GO 25301
25335: POP
25336: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25337: LD_VAR 0 18
25341: PPUSH
25342: LD_INT 2
25344: PUSH
25345: LD_INT 30
25347: PUSH
25348: LD_INT 32
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 30
25357: PUSH
25358: LD_INT 33
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: LIST
25369: PPUSH
25370: CALL_OW 72
25374: IFFALSE 25462
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25376: LD_ADDR_VAR 0 8
25380: PUSH
25381: LD_VAR 0 18
25385: PPUSH
25386: LD_INT 2
25388: PUSH
25389: LD_INT 30
25391: PUSH
25392: LD_INT 32
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 30
25401: PUSH
25402: LD_INT 33
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: LIST
25413: PPUSH
25414: CALL_OW 72
25418: PUSH
25419: FOR_IN
25420: IFFALSE 25460
// begin if not GetBWeapon ( i ) then
25422: LD_VAR 0 8
25426: PPUSH
25427: CALL_OW 269
25431: NOT
25432: IFFALSE 25458
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25434: LD_VAR 0 8
25438: PPUSH
25439: LD_VAR 0 8
25443: PPUSH
25444: LD_VAR 0 2
25448: PPUSH
25449: CALL 26708 0 2
25453: PPUSH
25454: CALL_OW 431
// end ;
25458: GO 25419
25460: POP
25461: POP
// end ; for i = 1 to personel do
25462: LD_ADDR_VAR 0 8
25466: PUSH
25467: DOUBLE
25468: LD_INT 1
25470: DEC
25471: ST_TO_ADDR
25472: LD_VAR 0 6
25476: PUSH
25477: FOR_TO
25478: IFFALSE 26542
// begin if i > 4 then
25480: LD_VAR 0 8
25484: PUSH
25485: LD_INT 4
25487: GREATER
25488: IFFALSE 25492
// break ;
25490: GO 26542
// case i of 1 :
25492: LD_VAR 0 8
25496: PUSH
25497: LD_INT 1
25499: DOUBLE
25500: EQUAL
25501: IFTRUE 25505
25503: GO 25585
25505: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25506: LD_ADDR_VAR 0 12
25510: PUSH
25511: LD_VAR 0 18
25515: PPUSH
25516: LD_INT 22
25518: PUSH
25519: LD_VAR 0 16
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 58
25530: PUSH
25531: EMPTY
25532: LIST
25533: PUSH
25534: LD_INT 2
25536: PUSH
25537: LD_INT 30
25539: PUSH
25540: LD_INT 32
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 30
25549: PUSH
25550: LD_INT 4
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 30
25559: PUSH
25560: LD_INT 5
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: LIST
25577: PPUSH
25578: CALL_OW 72
25582: ST_TO_ADDR
25583: GO 25807
25585: LD_INT 2
25587: DOUBLE
25588: EQUAL
25589: IFTRUE 25593
25591: GO 25655
25593: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25594: LD_ADDR_VAR 0 12
25598: PUSH
25599: LD_VAR 0 18
25603: PPUSH
25604: LD_INT 22
25606: PUSH
25607: LD_VAR 0 16
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 2
25618: PUSH
25619: LD_INT 30
25621: PUSH
25622: LD_INT 0
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 30
25631: PUSH
25632: LD_INT 1
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PPUSH
25648: CALL_OW 72
25652: ST_TO_ADDR
25653: GO 25807
25655: LD_INT 3
25657: DOUBLE
25658: EQUAL
25659: IFTRUE 25663
25661: GO 25725
25663: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25664: LD_ADDR_VAR 0 12
25668: PUSH
25669: LD_VAR 0 18
25673: PPUSH
25674: LD_INT 22
25676: PUSH
25677: LD_VAR 0 16
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 2
25688: PUSH
25689: LD_INT 30
25691: PUSH
25692: LD_INT 2
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 30
25701: PUSH
25702: LD_INT 3
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: LIST
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PPUSH
25718: CALL_OW 72
25722: ST_TO_ADDR
25723: GO 25807
25725: LD_INT 4
25727: DOUBLE
25728: EQUAL
25729: IFTRUE 25733
25731: GO 25806
25733: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25734: LD_ADDR_VAR 0 12
25738: PUSH
25739: LD_VAR 0 18
25743: PPUSH
25744: LD_INT 22
25746: PUSH
25747: LD_VAR 0 16
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 2
25758: PUSH
25759: LD_INT 30
25761: PUSH
25762: LD_INT 6
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 30
25771: PUSH
25772: LD_INT 7
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 30
25781: PUSH
25782: LD_INT 8
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PPUSH
25799: CALL_OW 72
25803: ST_TO_ADDR
25804: GO 25807
25806: POP
// if i = 1 then
25807: LD_VAR 0 8
25811: PUSH
25812: LD_INT 1
25814: EQUAL
25815: IFFALSE 25926
// begin tmp := [ ] ;
25817: LD_ADDR_VAR 0 19
25821: PUSH
25822: EMPTY
25823: ST_TO_ADDR
// for j in f do
25824: LD_ADDR_VAR 0 9
25828: PUSH
25829: LD_VAR 0 12
25833: PUSH
25834: FOR_IN
25835: IFFALSE 25908
// if GetBType ( j ) = b_bunker then
25837: LD_VAR 0 9
25841: PPUSH
25842: CALL_OW 266
25846: PUSH
25847: LD_INT 32
25849: EQUAL
25850: IFFALSE 25877
// tmp := Insert ( tmp , 1 , j ) else
25852: LD_ADDR_VAR 0 19
25856: PUSH
25857: LD_VAR 0 19
25861: PPUSH
25862: LD_INT 1
25864: PPUSH
25865: LD_VAR 0 9
25869: PPUSH
25870: CALL_OW 2
25874: ST_TO_ADDR
25875: GO 25906
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25877: LD_ADDR_VAR 0 19
25881: PUSH
25882: LD_VAR 0 19
25886: PPUSH
25887: LD_VAR 0 19
25891: PUSH
25892: LD_INT 1
25894: PLUS
25895: PPUSH
25896: LD_VAR 0 9
25900: PPUSH
25901: CALL_OW 2
25905: ST_TO_ADDR
25906: GO 25834
25908: POP
25909: POP
// if tmp then
25910: LD_VAR 0 19
25914: IFFALSE 25926
// f := tmp ;
25916: LD_ADDR_VAR 0 12
25920: PUSH
25921: LD_VAR 0 19
25925: ST_TO_ADDR
// end ; x := personel [ i ] ;
25926: LD_ADDR_VAR 0 13
25930: PUSH
25931: LD_VAR 0 6
25935: PUSH
25936: LD_VAR 0 8
25940: ARRAY
25941: ST_TO_ADDR
// if x = - 1 then
25942: LD_VAR 0 13
25946: PUSH
25947: LD_INT 1
25949: NEG
25950: EQUAL
25951: IFFALSE 26160
// begin for j in f do
25953: LD_ADDR_VAR 0 9
25957: PUSH
25958: LD_VAR 0 12
25962: PUSH
25963: FOR_IN
25964: IFFALSE 26156
// repeat InitHc ;
25966: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25970: LD_VAR 0 9
25974: PPUSH
25975: CALL_OW 266
25979: PUSH
25980: LD_INT 5
25982: EQUAL
25983: IFFALSE 26053
// begin if UnitsInside ( j ) < 3 then
25985: LD_VAR 0 9
25989: PPUSH
25990: CALL_OW 313
25994: PUSH
25995: LD_INT 3
25997: LESS
25998: IFFALSE 26034
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26000: LD_INT 0
26002: PPUSH
26003: LD_INT 5
26005: PUSH
26006: LD_INT 8
26008: PUSH
26009: LD_INT 9
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: LIST
26016: PUSH
26017: LD_VAR 0 17
26021: ARRAY
26022: PPUSH
26023: LD_VAR 0 4
26027: PPUSH
26028: CALL_OW 380
26032: GO 26051
// PrepareHuman ( false , i , skill ) ;
26034: LD_INT 0
26036: PPUSH
26037: LD_VAR 0 8
26041: PPUSH
26042: LD_VAR 0 4
26046: PPUSH
26047: CALL_OW 380
// end else
26051: GO 26070
// PrepareHuman ( false , i , skill ) ;
26053: LD_INT 0
26055: PPUSH
26056: LD_VAR 0 8
26060: PPUSH
26061: LD_VAR 0 4
26065: PPUSH
26066: CALL_OW 380
// un := CreateHuman ;
26070: LD_ADDR_VAR 0 14
26074: PUSH
26075: CALL_OW 44
26079: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26080: LD_ADDR_VAR 0 7
26084: PUSH
26085: LD_VAR 0 7
26089: PPUSH
26090: LD_INT 1
26092: PPUSH
26093: LD_VAR 0 14
26097: PPUSH
26098: CALL_OW 2
26102: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26103: LD_VAR 0 14
26107: PPUSH
26108: LD_VAR 0 9
26112: PPUSH
26113: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26117: LD_VAR 0 9
26121: PPUSH
26122: CALL_OW 313
26126: PUSH
26127: LD_INT 6
26129: EQUAL
26130: PUSH
26131: LD_VAR 0 9
26135: PPUSH
26136: CALL_OW 266
26140: PUSH
26141: LD_INT 32
26143: PUSH
26144: LD_INT 31
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: IN
26151: OR
26152: IFFALSE 25966
26154: GO 25963
26156: POP
26157: POP
// end else
26158: GO 26540
// for j = 1 to x do
26160: LD_ADDR_VAR 0 9
26164: PUSH
26165: DOUBLE
26166: LD_INT 1
26168: DEC
26169: ST_TO_ADDR
26170: LD_VAR 0 13
26174: PUSH
26175: FOR_TO
26176: IFFALSE 26538
// begin InitHc ;
26178: CALL_OW 19
// if not f then
26182: LD_VAR 0 12
26186: NOT
26187: IFFALSE 26276
// begin PrepareHuman ( false , i , skill ) ;
26189: LD_INT 0
26191: PPUSH
26192: LD_VAR 0 8
26196: PPUSH
26197: LD_VAR 0 4
26201: PPUSH
26202: CALL_OW 380
// un := CreateHuman ;
26206: LD_ADDR_VAR 0 14
26210: PUSH
26211: CALL_OW 44
26215: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26216: LD_ADDR_VAR 0 7
26220: PUSH
26221: LD_VAR 0 7
26225: PPUSH
26226: LD_INT 1
26228: PPUSH
26229: LD_VAR 0 14
26233: PPUSH
26234: CALL_OW 2
26238: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26239: LD_VAR 0 14
26243: PPUSH
26244: LD_VAR 0 1
26248: PPUSH
26249: CALL_OW 250
26253: PPUSH
26254: LD_VAR 0 1
26258: PPUSH
26259: CALL_OW 251
26263: PPUSH
26264: LD_INT 10
26266: PPUSH
26267: LD_INT 0
26269: PPUSH
26270: CALL_OW 50
// continue ;
26274: GO 26175
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26276: LD_VAR 0 12
26280: PUSH
26281: LD_INT 1
26283: ARRAY
26284: PPUSH
26285: CALL_OW 313
26289: PUSH
26290: LD_VAR 0 12
26294: PUSH
26295: LD_INT 1
26297: ARRAY
26298: PPUSH
26299: CALL_OW 266
26303: PUSH
26304: LD_INT 32
26306: PUSH
26307: LD_INT 31
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: IN
26314: AND
26315: PUSH
26316: LD_VAR 0 12
26320: PUSH
26321: LD_INT 1
26323: ARRAY
26324: PPUSH
26325: CALL_OW 313
26329: PUSH
26330: LD_INT 6
26332: EQUAL
26333: OR
26334: IFFALSE 26354
// f := Delete ( f , 1 ) ;
26336: LD_ADDR_VAR 0 12
26340: PUSH
26341: LD_VAR 0 12
26345: PPUSH
26346: LD_INT 1
26348: PPUSH
26349: CALL_OW 3
26353: ST_TO_ADDR
// if not f then
26354: LD_VAR 0 12
26358: NOT
26359: IFFALSE 26377
// begin x := x + 2 ;
26361: LD_ADDR_VAR 0 13
26365: PUSH
26366: LD_VAR 0 13
26370: PUSH
26371: LD_INT 2
26373: PLUS
26374: ST_TO_ADDR
// continue ;
26375: GO 26175
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26377: LD_VAR 0 12
26381: PUSH
26382: LD_INT 1
26384: ARRAY
26385: PPUSH
26386: CALL_OW 266
26390: PUSH
26391: LD_INT 5
26393: EQUAL
26394: IFFALSE 26468
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26396: LD_VAR 0 12
26400: PUSH
26401: LD_INT 1
26403: ARRAY
26404: PPUSH
26405: CALL_OW 313
26409: PUSH
26410: LD_INT 3
26412: LESS
26413: IFFALSE 26449
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26415: LD_INT 0
26417: PPUSH
26418: LD_INT 5
26420: PUSH
26421: LD_INT 8
26423: PUSH
26424: LD_INT 9
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: LIST
26431: PUSH
26432: LD_VAR 0 17
26436: ARRAY
26437: PPUSH
26438: LD_VAR 0 4
26442: PPUSH
26443: CALL_OW 380
26447: GO 26466
// PrepareHuman ( false , i , skill ) ;
26449: LD_INT 0
26451: PPUSH
26452: LD_VAR 0 8
26456: PPUSH
26457: LD_VAR 0 4
26461: PPUSH
26462: CALL_OW 380
// end else
26466: GO 26485
// PrepareHuman ( false , i , skill ) ;
26468: LD_INT 0
26470: PPUSH
26471: LD_VAR 0 8
26475: PPUSH
26476: LD_VAR 0 4
26480: PPUSH
26481: CALL_OW 380
// un := CreateHuman ;
26485: LD_ADDR_VAR 0 14
26489: PUSH
26490: CALL_OW 44
26494: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26495: LD_ADDR_VAR 0 7
26499: PUSH
26500: LD_VAR 0 7
26504: PPUSH
26505: LD_INT 1
26507: PPUSH
26508: LD_VAR 0 14
26512: PPUSH
26513: CALL_OW 2
26517: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26518: LD_VAR 0 14
26522: PPUSH
26523: LD_VAR 0 12
26527: PUSH
26528: LD_INT 1
26530: ARRAY
26531: PPUSH
26532: CALL_OW 52
// end ;
26536: GO 26175
26538: POP
26539: POP
// end ;
26540: GO 25477
26542: POP
26543: POP
// result := result ^ buildings ;
26544: LD_ADDR_VAR 0 7
26548: PUSH
26549: LD_VAR 0 7
26553: PUSH
26554: LD_VAR 0 18
26558: ADD
26559: ST_TO_ADDR
// end else
26560: GO 26703
// begin for i = 1 to personel do
26562: LD_ADDR_VAR 0 8
26566: PUSH
26567: DOUBLE
26568: LD_INT 1
26570: DEC
26571: ST_TO_ADDR
26572: LD_VAR 0 6
26576: PUSH
26577: FOR_TO
26578: IFFALSE 26701
// begin if i > 4 then
26580: LD_VAR 0 8
26584: PUSH
26585: LD_INT 4
26587: GREATER
26588: IFFALSE 26592
// break ;
26590: GO 26701
// x := personel [ i ] ;
26592: LD_ADDR_VAR 0 13
26596: PUSH
26597: LD_VAR 0 6
26601: PUSH
26602: LD_VAR 0 8
26606: ARRAY
26607: ST_TO_ADDR
// if x = - 1 then
26608: LD_VAR 0 13
26612: PUSH
26613: LD_INT 1
26615: NEG
26616: EQUAL
26617: IFFALSE 26621
// continue ;
26619: GO 26577
// PrepareHuman ( false , i , skill ) ;
26621: LD_INT 0
26623: PPUSH
26624: LD_VAR 0 8
26628: PPUSH
26629: LD_VAR 0 4
26633: PPUSH
26634: CALL_OW 380
// un := CreateHuman ;
26638: LD_ADDR_VAR 0 14
26642: PUSH
26643: CALL_OW 44
26647: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26648: LD_VAR 0 14
26652: PPUSH
26653: LD_VAR 0 1
26657: PPUSH
26658: CALL_OW 250
26662: PPUSH
26663: LD_VAR 0 1
26667: PPUSH
26668: CALL_OW 251
26672: PPUSH
26673: LD_INT 10
26675: PPUSH
26676: LD_INT 0
26678: PPUSH
26679: CALL_OW 50
// result := result ^ un ;
26683: LD_ADDR_VAR 0 7
26687: PUSH
26688: LD_VAR 0 7
26692: PUSH
26693: LD_VAR 0 14
26697: ADD
26698: ST_TO_ADDR
// end ;
26699: GO 26577
26701: POP
26702: POP
// end ; end ;
26703: LD_VAR 0 7
26707: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26708: LD_INT 0
26710: PPUSH
26711: PPUSH
26712: PPUSH
26713: PPUSH
26714: PPUSH
26715: PPUSH
26716: PPUSH
26717: PPUSH
26718: PPUSH
26719: PPUSH
26720: PPUSH
26721: PPUSH
26722: PPUSH
26723: PPUSH
26724: PPUSH
26725: PPUSH
// result := false ;
26726: LD_ADDR_VAR 0 3
26730: PUSH
26731: LD_INT 0
26733: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26734: LD_VAR 0 1
26738: NOT
26739: PUSH
26740: LD_VAR 0 1
26744: PPUSH
26745: CALL_OW 266
26749: PUSH
26750: LD_INT 32
26752: PUSH
26753: LD_INT 33
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: IN
26760: NOT
26761: OR
26762: IFFALSE 26766
// exit ;
26764: GO 27875
// nat := GetNation ( tower ) ;
26766: LD_ADDR_VAR 0 12
26770: PUSH
26771: LD_VAR 0 1
26775: PPUSH
26776: CALL_OW 248
26780: ST_TO_ADDR
// side := GetSide ( tower ) ;
26781: LD_ADDR_VAR 0 16
26785: PUSH
26786: LD_VAR 0 1
26790: PPUSH
26791: CALL_OW 255
26795: ST_TO_ADDR
// x := GetX ( tower ) ;
26796: LD_ADDR_VAR 0 10
26800: PUSH
26801: LD_VAR 0 1
26805: PPUSH
26806: CALL_OW 250
26810: ST_TO_ADDR
// y := GetY ( tower ) ;
26811: LD_ADDR_VAR 0 11
26815: PUSH
26816: LD_VAR 0 1
26820: PPUSH
26821: CALL_OW 251
26825: ST_TO_ADDR
// if not x or not y then
26826: LD_VAR 0 10
26830: NOT
26831: PUSH
26832: LD_VAR 0 11
26836: NOT
26837: OR
26838: IFFALSE 26842
// exit ;
26840: GO 27875
// weapon := 0 ;
26842: LD_ADDR_VAR 0 18
26846: PUSH
26847: LD_INT 0
26849: ST_TO_ADDR
// fac_list := [ ] ;
26850: LD_ADDR_VAR 0 17
26854: PUSH
26855: EMPTY
26856: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26857: LD_ADDR_VAR 0 6
26861: PUSH
26862: LD_VAR 0 1
26866: PPUSH
26867: CALL_OW 274
26871: PPUSH
26872: LD_VAR 0 2
26876: PPUSH
26877: LD_INT 0
26879: PPUSH
26880: CALL 24446 0 3
26884: PPUSH
26885: LD_INT 30
26887: PUSH
26888: LD_INT 3
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PPUSH
26895: CALL_OW 72
26899: ST_TO_ADDR
// if not factories then
26900: LD_VAR 0 6
26904: NOT
26905: IFFALSE 26909
// exit ;
26907: GO 27875
// for i in factories do
26909: LD_ADDR_VAR 0 8
26913: PUSH
26914: LD_VAR 0 6
26918: PUSH
26919: FOR_IN
26920: IFFALSE 26945
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26922: LD_ADDR_VAR 0 17
26926: PUSH
26927: LD_VAR 0 17
26931: PUSH
26932: LD_VAR 0 8
26936: PPUSH
26937: CALL_OW 478
26941: UNION
26942: ST_TO_ADDR
26943: GO 26919
26945: POP
26946: POP
// if not fac_list then
26947: LD_VAR 0 17
26951: NOT
26952: IFFALSE 26956
// exit ;
26954: GO 27875
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26956: LD_ADDR_VAR 0 5
26960: PUSH
26961: LD_INT 4
26963: PUSH
26964: LD_INT 5
26966: PUSH
26967: LD_INT 9
26969: PUSH
26970: LD_INT 10
26972: PUSH
26973: LD_INT 6
26975: PUSH
26976: LD_INT 7
26978: PUSH
26979: LD_INT 11
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 27
26993: PUSH
26994: LD_INT 28
26996: PUSH
26997: LD_INT 26
26999: PUSH
27000: LD_INT 30
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 43
27011: PUSH
27012: LD_INT 44
27014: PUSH
27015: LD_INT 46
27017: PUSH
27018: LD_INT 45
27020: PUSH
27021: LD_INT 47
27023: PUSH
27024: LD_INT 49
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: LIST
27039: PUSH
27040: LD_VAR 0 12
27044: ARRAY
27045: ST_TO_ADDR
// list := list isect fac_list ;
27046: LD_ADDR_VAR 0 5
27050: PUSH
27051: LD_VAR 0 5
27055: PUSH
27056: LD_VAR 0 17
27060: ISECT
27061: ST_TO_ADDR
// if not list then
27062: LD_VAR 0 5
27066: NOT
27067: IFFALSE 27071
// exit ;
27069: GO 27875
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27071: LD_VAR 0 12
27075: PUSH
27076: LD_INT 3
27078: EQUAL
27079: PUSH
27080: LD_INT 49
27082: PUSH
27083: LD_VAR 0 5
27087: IN
27088: AND
27089: PUSH
27090: LD_INT 31
27092: PPUSH
27093: LD_VAR 0 16
27097: PPUSH
27098: CALL_OW 321
27102: PUSH
27103: LD_INT 2
27105: EQUAL
27106: AND
27107: IFFALSE 27167
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27109: LD_INT 22
27111: PUSH
27112: LD_VAR 0 16
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 35
27123: PUSH
27124: LD_INT 49
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 91
27133: PUSH
27134: LD_VAR 0 1
27138: PUSH
27139: LD_INT 10
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: LIST
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: LIST
27151: PPUSH
27152: CALL_OW 69
27156: NOT
27157: IFFALSE 27167
// weapon := ru_time_lapser ;
27159: LD_ADDR_VAR 0 18
27163: PUSH
27164: LD_INT 49
27166: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27167: LD_VAR 0 12
27171: PUSH
27172: LD_INT 1
27174: PUSH
27175: LD_INT 2
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: IN
27182: PUSH
27183: LD_INT 11
27185: PUSH
27186: LD_VAR 0 5
27190: IN
27191: PUSH
27192: LD_INT 30
27194: PUSH
27195: LD_VAR 0 5
27199: IN
27200: OR
27201: AND
27202: PUSH
27203: LD_INT 6
27205: PPUSH
27206: LD_VAR 0 16
27210: PPUSH
27211: CALL_OW 321
27215: PUSH
27216: LD_INT 2
27218: EQUAL
27219: AND
27220: IFFALSE 27385
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27222: LD_INT 22
27224: PUSH
27225: LD_VAR 0 16
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 2
27236: PUSH
27237: LD_INT 35
27239: PUSH
27240: LD_INT 11
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 35
27249: PUSH
27250: LD_INT 30
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 91
27264: PUSH
27265: LD_VAR 0 1
27269: PUSH
27270: LD_INT 18
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: LIST
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: LIST
27282: PPUSH
27283: CALL_OW 69
27287: NOT
27288: PUSH
27289: LD_INT 22
27291: PUSH
27292: LD_VAR 0 16
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 2
27303: PUSH
27304: LD_INT 30
27306: PUSH
27307: LD_INT 32
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 30
27316: PUSH
27317: LD_INT 33
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 91
27331: PUSH
27332: LD_VAR 0 1
27336: PUSH
27337: LD_INT 12
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: LIST
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: LIST
27349: PUSH
27350: EMPTY
27351: LIST
27352: PPUSH
27353: CALL_OW 69
27357: PUSH
27358: LD_INT 2
27360: GREATER
27361: AND
27362: IFFALSE 27385
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27364: LD_ADDR_VAR 0 18
27368: PUSH
27369: LD_INT 11
27371: PUSH
27372: LD_INT 30
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_VAR 0 12
27383: ARRAY
27384: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27385: LD_VAR 0 18
27389: NOT
27390: PUSH
27391: LD_INT 40
27393: PPUSH
27394: LD_VAR 0 16
27398: PPUSH
27399: CALL_OW 321
27403: PUSH
27404: LD_INT 2
27406: EQUAL
27407: AND
27408: PUSH
27409: LD_INT 7
27411: PUSH
27412: LD_VAR 0 5
27416: IN
27417: PUSH
27418: LD_INT 28
27420: PUSH
27421: LD_VAR 0 5
27425: IN
27426: OR
27427: PUSH
27428: LD_INT 45
27430: PUSH
27431: LD_VAR 0 5
27435: IN
27436: OR
27437: AND
27438: IFFALSE 27692
// begin hex := GetHexInfo ( x , y ) ;
27440: LD_ADDR_VAR 0 4
27444: PUSH
27445: LD_VAR 0 10
27449: PPUSH
27450: LD_VAR 0 11
27454: PPUSH
27455: CALL_OW 546
27459: ST_TO_ADDR
// if hex [ 1 ] then
27460: LD_VAR 0 4
27464: PUSH
27465: LD_INT 1
27467: ARRAY
27468: IFFALSE 27472
// exit ;
27470: GO 27875
// height := hex [ 2 ] ;
27472: LD_ADDR_VAR 0 15
27476: PUSH
27477: LD_VAR 0 4
27481: PUSH
27482: LD_INT 2
27484: ARRAY
27485: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27486: LD_ADDR_VAR 0 14
27490: PUSH
27491: LD_INT 0
27493: PUSH
27494: LD_INT 2
27496: PUSH
27497: LD_INT 3
27499: PUSH
27500: LD_INT 5
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: ST_TO_ADDR
// for i in tmp do
27509: LD_ADDR_VAR 0 8
27513: PUSH
27514: LD_VAR 0 14
27518: PUSH
27519: FOR_IN
27520: IFFALSE 27690
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27522: LD_ADDR_VAR 0 9
27526: PUSH
27527: LD_VAR 0 10
27531: PPUSH
27532: LD_VAR 0 8
27536: PPUSH
27537: LD_INT 5
27539: PPUSH
27540: CALL_OW 272
27544: PUSH
27545: LD_VAR 0 11
27549: PPUSH
27550: LD_VAR 0 8
27554: PPUSH
27555: LD_INT 5
27557: PPUSH
27558: CALL_OW 273
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27567: LD_VAR 0 9
27571: PUSH
27572: LD_INT 1
27574: ARRAY
27575: PPUSH
27576: LD_VAR 0 9
27580: PUSH
27581: LD_INT 2
27583: ARRAY
27584: PPUSH
27585: CALL_OW 488
27589: IFFALSE 27688
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27591: LD_ADDR_VAR 0 4
27595: PUSH
27596: LD_VAR 0 9
27600: PUSH
27601: LD_INT 1
27603: ARRAY
27604: PPUSH
27605: LD_VAR 0 9
27609: PUSH
27610: LD_INT 2
27612: ARRAY
27613: PPUSH
27614: CALL_OW 546
27618: ST_TO_ADDR
// if hex [ 1 ] then
27619: LD_VAR 0 4
27623: PUSH
27624: LD_INT 1
27626: ARRAY
27627: IFFALSE 27631
// continue ;
27629: GO 27519
// h := hex [ 2 ] ;
27631: LD_ADDR_VAR 0 13
27635: PUSH
27636: LD_VAR 0 4
27640: PUSH
27641: LD_INT 2
27643: ARRAY
27644: ST_TO_ADDR
// if h + 7 < height then
27645: LD_VAR 0 13
27649: PUSH
27650: LD_INT 7
27652: PLUS
27653: PUSH
27654: LD_VAR 0 15
27658: LESS
27659: IFFALSE 27688
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27661: LD_ADDR_VAR 0 18
27665: PUSH
27666: LD_INT 7
27668: PUSH
27669: LD_INT 28
27671: PUSH
27672: LD_INT 45
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: LIST
27679: PUSH
27680: LD_VAR 0 12
27684: ARRAY
27685: ST_TO_ADDR
// break ;
27686: GO 27690
// end ; end ; end ;
27688: GO 27519
27690: POP
27691: POP
// end ; if not weapon then
27692: LD_VAR 0 18
27696: NOT
27697: IFFALSE 27757
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27699: LD_ADDR_VAR 0 5
27703: PUSH
27704: LD_VAR 0 5
27708: PUSH
27709: LD_INT 11
27711: PUSH
27712: LD_INT 30
27714: PUSH
27715: LD_INT 49
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: LIST
27722: DIFF
27723: ST_TO_ADDR
// if not list then
27724: LD_VAR 0 5
27728: NOT
27729: IFFALSE 27733
// exit ;
27731: GO 27875
// weapon := list [ rand ( 1 , list ) ] ;
27733: LD_ADDR_VAR 0 18
27737: PUSH
27738: LD_VAR 0 5
27742: PUSH
27743: LD_INT 1
27745: PPUSH
27746: LD_VAR 0 5
27750: PPUSH
27751: CALL_OW 12
27755: ARRAY
27756: ST_TO_ADDR
// end ; if weapon then
27757: LD_VAR 0 18
27761: IFFALSE 27875
// begin tmp := CostOfWeapon ( weapon ) ;
27763: LD_ADDR_VAR 0 14
27767: PUSH
27768: LD_VAR 0 18
27772: PPUSH
27773: CALL_OW 451
27777: ST_TO_ADDR
// j := GetBase ( tower ) ;
27778: LD_ADDR_VAR 0 9
27782: PUSH
27783: LD_VAR 0 1
27787: PPUSH
27788: CALL_OW 274
27792: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27793: LD_VAR 0 9
27797: PPUSH
27798: LD_INT 1
27800: PPUSH
27801: CALL_OW 275
27805: PUSH
27806: LD_VAR 0 14
27810: PUSH
27811: LD_INT 1
27813: ARRAY
27814: GREATEREQUAL
27815: PUSH
27816: LD_VAR 0 9
27820: PPUSH
27821: LD_INT 2
27823: PPUSH
27824: CALL_OW 275
27828: PUSH
27829: LD_VAR 0 14
27833: PUSH
27834: LD_INT 2
27836: ARRAY
27837: GREATEREQUAL
27838: AND
27839: PUSH
27840: LD_VAR 0 9
27844: PPUSH
27845: LD_INT 3
27847: PPUSH
27848: CALL_OW 275
27852: PUSH
27853: LD_VAR 0 14
27857: PUSH
27858: LD_INT 3
27860: ARRAY
27861: GREATEREQUAL
27862: AND
27863: IFFALSE 27875
// result := weapon ;
27865: LD_ADDR_VAR 0 3
27869: PUSH
27870: LD_VAR 0 18
27874: ST_TO_ADDR
// end ; end ;
27875: LD_VAR 0 3
27879: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27880: LD_INT 0
27882: PPUSH
27883: PPUSH
// result := true ;
27884: LD_ADDR_VAR 0 3
27888: PUSH
27889: LD_INT 1
27891: ST_TO_ADDR
// if array1 = array2 then
27892: LD_VAR 0 1
27896: PUSH
27897: LD_VAR 0 2
27901: EQUAL
27902: IFFALSE 27962
// begin for i = 1 to array1 do
27904: LD_ADDR_VAR 0 4
27908: PUSH
27909: DOUBLE
27910: LD_INT 1
27912: DEC
27913: ST_TO_ADDR
27914: LD_VAR 0 1
27918: PUSH
27919: FOR_TO
27920: IFFALSE 27958
// if array1 [ i ] <> array2 [ i ] then
27922: LD_VAR 0 1
27926: PUSH
27927: LD_VAR 0 4
27931: ARRAY
27932: PUSH
27933: LD_VAR 0 2
27937: PUSH
27938: LD_VAR 0 4
27942: ARRAY
27943: NONEQUAL
27944: IFFALSE 27956
// begin result := false ;
27946: LD_ADDR_VAR 0 3
27950: PUSH
27951: LD_INT 0
27953: ST_TO_ADDR
// break ;
27954: GO 27958
// end ;
27956: GO 27919
27958: POP
27959: POP
// end else
27960: GO 27970
// result := false ;
27962: LD_ADDR_VAR 0 3
27966: PUSH
27967: LD_INT 0
27969: ST_TO_ADDR
// end ;
27970: LD_VAR 0 3
27974: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27975: LD_INT 0
27977: PPUSH
27978: PPUSH
// if not array1 or not array2 then
27979: LD_VAR 0 1
27983: NOT
27984: PUSH
27985: LD_VAR 0 2
27989: NOT
27990: OR
27991: IFFALSE 27995
// exit ;
27993: GO 28059
// result := true ;
27995: LD_ADDR_VAR 0 3
27999: PUSH
28000: LD_INT 1
28002: ST_TO_ADDR
// for i = 1 to array1 do
28003: LD_ADDR_VAR 0 4
28007: PUSH
28008: DOUBLE
28009: LD_INT 1
28011: DEC
28012: ST_TO_ADDR
28013: LD_VAR 0 1
28017: PUSH
28018: FOR_TO
28019: IFFALSE 28057
// if array1 [ i ] <> array2 [ i ] then
28021: LD_VAR 0 1
28025: PUSH
28026: LD_VAR 0 4
28030: ARRAY
28031: PUSH
28032: LD_VAR 0 2
28036: PUSH
28037: LD_VAR 0 4
28041: ARRAY
28042: NONEQUAL
28043: IFFALSE 28055
// begin result := false ;
28045: LD_ADDR_VAR 0 3
28049: PUSH
28050: LD_INT 0
28052: ST_TO_ADDR
// break ;
28053: GO 28057
// end ;
28055: GO 28018
28057: POP
28058: POP
// end ;
28059: LD_VAR 0 3
28063: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28064: LD_INT 0
28066: PPUSH
28067: PPUSH
28068: PPUSH
// pom := GetBase ( fac ) ;
28069: LD_ADDR_VAR 0 5
28073: PUSH
28074: LD_VAR 0 1
28078: PPUSH
28079: CALL_OW 274
28083: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28084: LD_ADDR_VAR 0 4
28088: PUSH
28089: LD_VAR 0 2
28093: PUSH
28094: LD_INT 1
28096: ARRAY
28097: PPUSH
28098: LD_VAR 0 2
28102: PUSH
28103: LD_INT 2
28105: ARRAY
28106: PPUSH
28107: LD_VAR 0 2
28111: PUSH
28112: LD_INT 3
28114: ARRAY
28115: PPUSH
28116: LD_VAR 0 2
28120: PUSH
28121: LD_INT 4
28123: ARRAY
28124: PPUSH
28125: CALL_OW 449
28129: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28130: LD_ADDR_VAR 0 3
28134: PUSH
28135: LD_VAR 0 5
28139: PPUSH
28140: LD_INT 1
28142: PPUSH
28143: CALL_OW 275
28147: PUSH
28148: LD_VAR 0 4
28152: PUSH
28153: LD_INT 1
28155: ARRAY
28156: GREATEREQUAL
28157: PUSH
28158: LD_VAR 0 5
28162: PPUSH
28163: LD_INT 2
28165: PPUSH
28166: CALL_OW 275
28170: PUSH
28171: LD_VAR 0 4
28175: PUSH
28176: LD_INT 2
28178: ARRAY
28179: GREATEREQUAL
28180: AND
28181: PUSH
28182: LD_VAR 0 5
28186: PPUSH
28187: LD_INT 3
28189: PPUSH
28190: CALL_OW 275
28194: PUSH
28195: LD_VAR 0 4
28199: PUSH
28200: LD_INT 3
28202: ARRAY
28203: GREATEREQUAL
28204: AND
28205: ST_TO_ADDR
// end ;
28206: LD_VAR 0 3
28210: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28211: LD_INT 0
28213: PPUSH
28214: PPUSH
28215: PPUSH
28216: PPUSH
// pom := GetBase ( building ) ;
28217: LD_ADDR_VAR 0 3
28221: PUSH
28222: LD_VAR 0 1
28226: PPUSH
28227: CALL_OW 274
28231: ST_TO_ADDR
// if not pom then
28232: LD_VAR 0 3
28236: NOT
28237: IFFALSE 28241
// exit ;
28239: GO 28411
// btype := GetBType ( building ) ;
28241: LD_ADDR_VAR 0 5
28245: PUSH
28246: LD_VAR 0 1
28250: PPUSH
28251: CALL_OW 266
28255: ST_TO_ADDR
// if btype = b_armoury then
28256: LD_VAR 0 5
28260: PUSH
28261: LD_INT 4
28263: EQUAL
28264: IFFALSE 28274
// btype := b_barracks ;
28266: LD_ADDR_VAR 0 5
28270: PUSH
28271: LD_INT 5
28273: ST_TO_ADDR
// if btype = b_depot then
28274: LD_VAR 0 5
28278: PUSH
28279: LD_INT 0
28281: EQUAL
28282: IFFALSE 28292
// btype := b_warehouse ;
28284: LD_ADDR_VAR 0 5
28288: PUSH
28289: LD_INT 1
28291: ST_TO_ADDR
// if btype = b_workshop then
28292: LD_VAR 0 5
28296: PUSH
28297: LD_INT 2
28299: EQUAL
28300: IFFALSE 28310
// btype := b_factory ;
28302: LD_ADDR_VAR 0 5
28306: PUSH
28307: LD_INT 3
28309: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28310: LD_ADDR_VAR 0 4
28314: PUSH
28315: LD_VAR 0 5
28319: PPUSH
28320: LD_VAR 0 1
28324: PPUSH
28325: CALL_OW 248
28329: PPUSH
28330: CALL_OW 450
28334: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28335: LD_ADDR_VAR 0 2
28339: PUSH
28340: LD_VAR 0 3
28344: PPUSH
28345: LD_INT 1
28347: PPUSH
28348: CALL_OW 275
28352: PUSH
28353: LD_VAR 0 4
28357: PUSH
28358: LD_INT 1
28360: ARRAY
28361: GREATEREQUAL
28362: PUSH
28363: LD_VAR 0 3
28367: PPUSH
28368: LD_INT 2
28370: PPUSH
28371: CALL_OW 275
28375: PUSH
28376: LD_VAR 0 4
28380: PUSH
28381: LD_INT 2
28383: ARRAY
28384: GREATEREQUAL
28385: AND
28386: PUSH
28387: LD_VAR 0 3
28391: PPUSH
28392: LD_INT 3
28394: PPUSH
28395: CALL_OW 275
28399: PUSH
28400: LD_VAR 0 4
28404: PUSH
28405: LD_INT 3
28407: ARRAY
28408: GREATEREQUAL
28409: AND
28410: ST_TO_ADDR
// end ;
28411: LD_VAR 0 2
28415: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28416: LD_INT 0
28418: PPUSH
28419: PPUSH
28420: PPUSH
// pom := GetBase ( building ) ;
28421: LD_ADDR_VAR 0 4
28425: PUSH
28426: LD_VAR 0 1
28430: PPUSH
28431: CALL_OW 274
28435: ST_TO_ADDR
// if not pom then
28436: LD_VAR 0 4
28440: NOT
28441: IFFALSE 28445
// exit ;
28443: GO 28546
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28445: LD_ADDR_VAR 0 5
28449: PUSH
28450: LD_VAR 0 2
28454: PPUSH
28455: LD_VAR 0 1
28459: PPUSH
28460: CALL_OW 248
28464: PPUSH
28465: CALL_OW 450
28469: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28470: LD_ADDR_VAR 0 3
28474: PUSH
28475: LD_VAR 0 4
28479: PPUSH
28480: LD_INT 1
28482: PPUSH
28483: CALL_OW 275
28487: PUSH
28488: LD_VAR 0 5
28492: PUSH
28493: LD_INT 1
28495: ARRAY
28496: GREATEREQUAL
28497: PUSH
28498: LD_VAR 0 4
28502: PPUSH
28503: LD_INT 2
28505: PPUSH
28506: CALL_OW 275
28510: PUSH
28511: LD_VAR 0 5
28515: PUSH
28516: LD_INT 2
28518: ARRAY
28519: GREATEREQUAL
28520: AND
28521: PUSH
28522: LD_VAR 0 4
28526: PPUSH
28527: LD_INT 3
28529: PPUSH
28530: CALL_OW 275
28534: PUSH
28535: LD_VAR 0 5
28539: PUSH
28540: LD_INT 3
28542: ARRAY
28543: GREATEREQUAL
28544: AND
28545: ST_TO_ADDR
// end ;
28546: LD_VAR 0 3
28550: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28551: LD_INT 0
28553: PPUSH
28554: PPUSH
28555: PPUSH
28556: PPUSH
28557: PPUSH
28558: PPUSH
28559: PPUSH
28560: PPUSH
28561: PPUSH
28562: PPUSH
28563: PPUSH
// result := false ;
28564: LD_ADDR_VAR 0 8
28568: PUSH
28569: LD_INT 0
28571: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28572: LD_VAR 0 5
28576: NOT
28577: PUSH
28578: LD_VAR 0 1
28582: NOT
28583: OR
28584: PUSH
28585: LD_VAR 0 2
28589: NOT
28590: OR
28591: PUSH
28592: LD_VAR 0 3
28596: NOT
28597: OR
28598: IFFALSE 28602
// exit ;
28600: GO 29416
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28602: LD_ADDR_VAR 0 14
28606: PUSH
28607: LD_VAR 0 1
28611: PPUSH
28612: LD_VAR 0 2
28616: PPUSH
28617: LD_VAR 0 3
28621: PPUSH
28622: LD_VAR 0 4
28626: PPUSH
28627: LD_VAR 0 5
28631: PUSH
28632: LD_INT 1
28634: ARRAY
28635: PPUSH
28636: CALL_OW 248
28640: PPUSH
28641: LD_INT 0
28643: PPUSH
28644: CALL 30669 0 6
28648: ST_TO_ADDR
// if not hexes then
28649: LD_VAR 0 14
28653: NOT
28654: IFFALSE 28658
// exit ;
28656: GO 29416
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28658: LD_ADDR_VAR 0 17
28662: PUSH
28663: LD_VAR 0 5
28667: PPUSH
28668: LD_INT 22
28670: PUSH
28671: LD_VAR 0 13
28675: PPUSH
28676: CALL_OW 255
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 2
28687: PUSH
28688: LD_INT 30
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 30
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: LIST
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PPUSH
28717: CALL_OW 72
28721: ST_TO_ADDR
// for i = 1 to hexes do
28722: LD_ADDR_VAR 0 9
28726: PUSH
28727: DOUBLE
28728: LD_INT 1
28730: DEC
28731: ST_TO_ADDR
28732: LD_VAR 0 14
28736: PUSH
28737: FOR_TO
28738: IFFALSE 29414
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28740: LD_ADDR_VAR 0 13
28744: PUSH
28745: LD_VAR 0 14
28749: PUSH
28750: LD_VAR 0 9
28754: ARRAY
28755: PUSH
28756: LD_INT 1
28758: ARRAY
28759: PPUSH
28760: LD_VAR 0 14
28764: PUSH
28765: LD_VAR 0 9
28769: ARRAY
28770: PUSH
28771: LD_INT 2
28773: ARRAY
28774: PPUSH
28775: CALL_OW 428
28779: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28780: LD_VAR 0 14
28784: PUSH
28785: LD_VAR 0 9
28789: ARRAY
28790: PUSH
28791: LD_INT 1
28793: ARRAY
28794: PPUSH
28795: LD_VAR 0 14
28799: PUSH
28800: LD_VAR 0 9
28804: ARRAY
28805: PUSH
28806: LD_INT 2
28808: ARRAY
28809: PPUSH
28810: CALL_OW 351
28814: PUSH
28815: LD_VAR 0 14
28819: PUSH
28820: LD_VAR 0 9
28824: ARRAY
28825: PUSH
28826: LD_INT 1
28828: ARRAY
28829: PPUSH
28830: LD_VAR 0 14
28834: PUSH
28835: LD_VAR 0 9
28839: ARRAY
28840: PUSH
28841: LD_INT 2
28843: ARRAY
28844: PPUSH
28845: CALL_OW 488
28849: NOT
28850: OR
28851: PUSH
28852: LD_VAR 0 13
28856: PPUSH
28857: CALL_OW 247
28861: PUSH
28862: LD_INT 3
28864: EQUAL
28865: OR
28866: IFFALSE 28872
// exit ;
28868: POP
28869: POP
28870: GO 29416
// if not tmp then
28872: LD_VAR 0 13
28876: NOT
28877: IFFALSE 28881
// continue ;
28879: GO 28737
// result := true ;
28881: LD_ADDR_VAR 0 8
28885: PUSH
28886: LD_INT 1
28888: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28889: LD_VAR 0 6
28893: PUSH
28894: LD_VAR 0 13
28898: PPUSH
28899: CALL_OW 247
28903: PUSH
28904: LD_INT 2
28906: EQUAL
28907: AND
28908: PUSH
28909: LD_VAR 0 13
28913: PPUSH
28914: CALL_OW 263
28918: PUSH
28919: LD_INT 1
28921: EQUAL
28922: AND
28923: IFFALSE 29087
// begin if IsDrivenBy ( tmp ) then
28925: LD_VAR 0 13
28929: PPUSH
28930: CALL_OW 311
28934: IFFALSE 28938
// continue ;
28936: GO 28737
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28938: LD_VAR 0 6
28942: PPUSH
28943: LD_INT 3
28945: PUSH
28946: LD_INT 60
28948: PUSH
28949: EMPTY
28950: LIST
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 3
28958: PUSH
28959: LD_INT 55
28961: PUSH
28962: EMPTY
28963: LIST
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PPUSH
28973: CALL_OW 72
28977: IFFALSE 29085
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28979: LD_ADDR_VAR 0 18
28983: PUSH
28984: LD_VAR 0 6
28988: PPUSH
28989: LD_INT 3
28991: PUSH
28992: LD_INT 60
28994: PUSH
28995: EMPTY
28996: LIST
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 3
29004: PUSH
29005: LD_INT 55
29007: PUSH
29008: EMPTY
29009: LIST
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PPUSH
29019: CALL_OW 72
29023: PUSH
29024: LD_INT 1
29026: ARRAY
29027: ST_TO_ADDR
// if IsInUnit ( driver ) then
29028: LD_VAR 0 18
29032: PPUSH
29033: CALL_OW 310
29037: IFFALSE 29048
// ComExit ( driver ) ;
29039: LD_VAR 0 18
29043: PPUSH
29044: CALL 54470 0 1
// AddComEnterUnit ( driver , tmp ) ;
29048: LD_VAR 0 18
29052: PPUSH
29053: LD_VAR 0 13
29057: PPUSH
29058: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29062: LD_VAR 0 18
29066: PPUSH
29067: LD_VAR 0 7
29071: PPUSH
29072: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29076: LD_VAR 0 18
29080: PPUSH
29081: CALL_OW 181
// end ; continue ;
29085: GO 28737
// end ; if not cleaners or not tmp in cleaners then
29087: LD_VAR 0 6
29091: NOT
29092: PUSH
29093: LD_VAR 0 13
29097: PUSH
29098: LD_VAR 0 6
29102: IN
29103: NOT
29104: OR
29105: IFFALSE 29412
// begin if dep then
29107: LD_VAR 0 17
29111: IFFALSE 29247
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29113: LD_ADDR_VAR 0 16
29117: PUSH
29118: LD_VAR 0 17
29122: PUSH
29123: LD_INT 1
29125: ARRAY
29126: PPUSH
29127: CALL_OW 250
29131: PPUSH
29132: LD_VAR 0 17
29136: PUSH
29137: LD_INT 1
29139: ARRAY
29140: PPUSH
29141: CALL_OW 254
29145: PPUSH
29146: LD_INT 5
29148: PPUSH
29149: CALL_OW 272
29153: PUSH
29154: LD_VAR 0 17
29158: PUSH
29159: LD_INT 1
29161: ARRAY
29162: PPUSH
29163: CALL_OW 251
29167: PPUSH
29168: LD_VAR 0 17
29172: PUSH
29173: LD_INT 1
29175: ARRAY
29176: PPUSH
29177: CALL_OW 254
29181: PPUSH
29182: LD_INT 5
29184: PPUSH
29185: CALL_OW 273
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29194: LD_VAR 0 16
29198: PUSH
29199: LD_INT 1
29201: ARRAY
29202: PPUSH
29203: LD_VAR 0 16
29207: PUSH
29208: LD_INT 2
29210: ARRAY
29211: PPUSH
29212: CALL_OW 488
29216: IFFALSE 29247
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29218: LD_VAR 0 13
29222: PPUSH
29223: LD_VAR 0 16
29227: PUSH
29228: LD_INT 1
29230: ARRAY
29231: PPUSH
29232: LD_VAR 0 16
29236: PUSH
29237: LD_INT 2
29239: ARRAY
29240: PPUSH
29241: CALL_OW 111
// continue ;
29245: GO 28737
// end ; end ; r := GetDir ( tmp ) ;
29247: LD_ADDR_VAR 0 15
29251: PUSH
29252: LD_VAR 0 13
29256: PPUSH
29257: CALL_OW 254
29261: ST_TO_ADDR
// if r = 5 then
29262: LD_VAR 0 15
29266: PUSH
29267: LD_INT 5
29269: EQUAL
29270: IFFALSE 29280
// r := 0 ;
29272: LD_ADDR_VAR 0 15
29276: PUSH
29277: LD_INT 0
29279: ST_TO_ADDR
// for j = r to 5 do
29280: LD_ADDR_VAR 0 10
29284: PUSH
29285: DOUBLE
29286: LD_VAR 0 15
29290: DEC
29291: ST_TO_ADDR
29292: LD_INT 5
29294: PUSH
29295: FOR_TO
29296: IFFALSE 29410
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29298: LD_ADDR_VAR 0 11
29302: PUSH
29303: LD_VAR 0 13
29307: PPUSH
29308: CALL_OW 250
29312: PPUSH
29313: LD_VAR 0 10
29317: PPUSH
29318: LD_INT 2
29320: PPUSH
29321: CALL_OW 272
29325: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29326: LD_ADDR_VAR 0 12
29330: PUSH
29331: LD_VAR 0 13
29335: PPUSH
29336: CALL_OW 251
29340: PPUSH
29341: LD_VAR 0 10
29345: PPUSH
29346: LD_INT 2
29348: PPUSH
29349: CALL_OW 273
29353: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29354: LD_VAR 0 11
29358: PPUSH
29359: LD_VAR 0 12
29363: PPUSH
29364: CALL_OW 488
29368: PUSH
29369: LD_VAR 0 11
29373: PPUSH
29374: LD_VAR 0 12
29378: PPUSH
29379: CALL_OW 428
29383: NOT
29384: AND
29385: IFFALSE 29408
// begin ComMoveXY ( tmp , _x , _y ) ;
29387: LD_VAR 0 13
29391: PPUSH
29392: LD_VAR 0 11
29396: PPUSH
29397: LD_VAR 0 12
29401: PPUSH
29402: CALL_OW 111
// break ;
29406: GO 29410
// end ; end ;
29408: GO 29295
29410: POP
29411: POP
// end ; end ;
29412: GO 28737
29414: POP
29415: POP
// end ;
29416: LD_VAR 0 8
29420: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29421: LD_INT 0
29423: PPUSH
// result := true ;
29424: LD_ADDR_VAR 0 3
29428: PUSH
29429: LD_INT 1
29431: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29432: LD_VAR 0 2
29436: PUSH
29437: LD_INT 24
29439: DOUBLE
29440: EQUAL
29441: IFTRUE 29451
29443: LD_INT 33
29445: DOUBLE
29446: EQUAL
29447: IFTRUE 29451
29449: GO 29476
29451: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29452: LD_ADDR_VAR 0 3
29456: PUSH
29457: LD_INT 32
29459: PPUSH
29460: LD_VAR 0 1
29464: PPUSH
29465: CALL_OW 321
29469: PUSH
29470: LD_INT 2
29472: EQUAL
29473: ST_TO_ADDR
29474: GO 29792
29476: LD_INT 20
29478: DOUBLE
29479: EQUAL
29480: IFTRUE 29484
29482: GO 29509
29484: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29485: LD_ADDR_VAR 0 3
29489: PUSH
29490: LD_INT 6
29492: PPUSH
29493: LD_VAR 0 1
29497: PPUSH
29498: CALL_OW 321
29502: PUSH
29503: LD_INT 2
29505: EQUAL
29506: ST_TO_ADDR
29507: GO 29792
29509: LD_INT 22
29511: DOUBLE
29512: EQUAL
29513: IFTRUE 29523
29515: LD_INT 36
29517: DOUBLE
29518: EQUAL
29519: IFTRUE 29523
29521: GO 29548
29523: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29524: LD_ADDR_VAR 0 3
29528: PUSH
29529: LD_INT 15
29531: PPUSH
29532: LD_VAR 0 1
29536: PPUSH
29537: CALL_OW 321
29541: PUSH
29542: LD_INT 2
29544: EQUAL
29545: ST_TO_ADDR
29546: GO 29792
29548: LD_INT 30
29550: DOUBLE
29551: EQUAL
29552: IFTRUE 29556
29554: GO 29581
29556: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29557: LD_ADDR_VAR 0 3
29561: PUSH
29562: LD_INT 20
29564: PPUSH
29565: LD_VAR 0 1
29569: PPUSH
29570: CALL_OW 321
29574: PUSH
29575: LD_INT 2
29577: EQUAL
29578: ST_TO_ADDR
29579: GO 29792
29581: LD_INT 28
29583: DOUBLE
29584: EQUAL
29585: IFTRUE 29595
29587: LD_INT 21
29589: DOUBLE
29590: EQUAL
29591: IFTRUE 29595
29593: GO 29620
29595: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29596: LD_ADDR_VAR 0 3
29600: PUSH
29601: LD_INT 21
29603: PPUSH
29604: LD_VAR 0 1
29608: PPUSH
29609: CALL_OW 321
29613: PUSH
29614: LD_INT 2
29616: EQUAL
29617: ST_TO_ADDR
29618: GO 29792
29620: LD_INT 16
29622: DOUBLE
29623: EQUAL
29624: IFTRUE 29628
29626: GO 29653
29628: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29629: LD_ADDR_VAR 0 3
29633: PUSH
29634: LD_INT 84
29636: PPUSH
29637: LD_VAR 0 1
29641: PPUSH
29642: CALL_OW 321
29646: PUSH
29647: LD_INT 2
29649: EQUAL
29650: ST_TO_ADDR
29651: GO 29792
29653: LD_INT 19
29655: DOUBLE
29656: EQUAL
29657: IFTRUE 29667
29659: LD_INT 23
29661: DOUBLE
29662: EQUAL
29663: IFTRUE 29667
29665: GO 29692
29667: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29668: LD_ADDR_VAR 0 3
29672: PUSH
29673: LD_INT 83
29675: PPUSH
29676: LD_VAR 0 1
29680: PPUSH
29681: CALL_OW 321
29685: PUSH
29686: LD_INT 2
29688: EQUAL
29689: ST_TO_ADDR
29690: GO 29792
29692: LD_INT 17
29694: DOUBLE
29695: EQUAL
29696: IFTRUE 29700
29698: GO 29725
29700: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29701: LD_ADDR_VAR 0 3
29705: PUSH
29706: LD_INT 39
29708: PPUSH
29709: LD_VAR 0 1
29713: PPUSH
29714: CALL_OW 321
29718: PUSH
29719: LD_INT 2
29721: EQUAL
29722: ST_TO_ADDR
29723: GO 29792
29725: LD_INT 18
29727: DOUBLE
29728: EQUAL
29729: IFTRUE 29733
29731: GO 29758
29733: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29734: LD_ADDR_VAR 0 3
29738: PUSH
29739: LD_INT 40
29741: PPUSH
29742: LD_VAR 0 1
29746: PPUSH
29747: CALL_OW 321
29751: PUSH
29752: LD_INT 2
29754: EQUAL
29755: ST_TO_ADDR
29756: GO 29792
29758: LD_INT 27
29760: DOUBLE
29761: EQUAL
29762: IFTRUE 29766
29764: GO 29791
29766: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29767: LD_ADDR_VAR 0 3
29771: PUSH
29772: LD_INT 35
29774: PPUSH
29775: LD_VAR 0 1
29779: PPUSH
29780: CALL_OW 321
29784: PUSH
29785: LD_INT 2
29787: EQUAL
29788: ST_TO_ADDR
29789: GO 29792
29791: POP
// end ;
29792: LD_VAR 0 3
29796: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29797: LD_INT 0
29799: PPUSH
29800: PPUSH
29801: PPUSH
29802: PPUSH
29803: PPUSH
29804: PPUSH
29805: PPUSH
29806: PPUSH
29807: PPUSH
29808: PPUSH
29809: PPUSH
// result := false ;
29810: LD_ADDR_VAR 0 6
29814: PUSH
29815: LD_INT 0
29817: ST_TO_ADDR
// if btype = b_depot then
29818: LD_VAR 0 2
29822: PUSH
29823: LD_INT 0
29825: EQUAL
29826: IFFALSE 29838
// begin result := true ;
29828: LD_ADDR_VAR 0 6
29832: PUSH
29833: LD_INT 1
29835: ST_TO_ADDR
// exit ;
29836: GO 30664
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29838: LD_VAR 0 1
29842: NOT
29843: PUSH
29844: LD_VAR 0 1
29848: PPUSH
29849: CALL_OW 266
29853: PUSH
29854: LD_INT 0
29856: PUSH
29857: LD_INT 1
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: IN
29864: NOT
29865: OR
29866: PUSH
29867: LD_VAR 0 2
29871: NOT
29872: OR
29873: PUSH
29874: LD_VAR 0 5
29878: PUSH
29879: LD_INT 0
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: LD_INT 2
29887: PUSH
29888: LD_INT 3
29890: PUSH
29891: LD_INT 4
29893: PUSH
29894: LD_INT 5
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: IN
29905: NOT
29906: OR
29907: PUSH
29908: LD_VAR 0 3
29912: PPUSH
29913: LD_VAR 0 4
29917: PPUSH
29918: CALL_OW 488
29922: NOT
29923: OR
29924: IFFALSE 29928
// exit ;
29926: GO 30664
// side := GetSide ( depot ) ;
29928: LD_ADDR_VAR 0 9
29932: PUSH
29933: LD_VAR 0 1
29937: PPUSH
29938: CALL_OW 255
29942: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29943: LD_VAR 0 9
29947: PPUSH
29948: LD_VAR 0 2
29952: PPUSH
29953: CALL 29421 0 2
29957: NOT
29958: IFFALSE 29962
// exit ;
29960: GO 30664
// pom := GetBase ( depot ) ;
29962: LD_ADDR_VAR 0 10
29966: PUSH
29967: LD_VAR 0 1
29971: PPUSH
29972: CALL_OW 274
29976: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29977: LD_ADDR_VAR 0 11
29981: PUSH
29982: LD_VAR 0 2
29986: PPUSH
29987: LD_VAR 0 1
29991: PPUSH
29992: CALL_OW 248
29996: PPUSH
29997: CALL_OW 450
30001: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30002: LD_VAR 0 10
30006: PPUSH
30007: LD_INT 1
30009: PPUSH
30010: CALL_OW 275
30014: PUSH
30015: LD_VAR 0 11
30019: PUSH
30020: LD_INT 1
30022: ARRAY
30023: GREATEREQUAL
30024: PUSH
30025: LD_VAR 0 10
30029: PPUSH
30030: LD_INT 2
30032: PPUSH
30033: CALL_OW 275
30037: PUSH
30038: LD_VAR 0 11
30042: PUSH
30043: LD_INT 2
30045: ARRAY
30046: GREATEREQUAL
30047: AND
30048: PUSH
30049: LD_VAR 0 10
30053: PPUSH
30054: LD_INT 3
30056: PPUSH
30057: CALL_OW 275
30061: PUSH
30062: LD_VAR 0 11
30066: PUSH
30067: LD_INT 3
30069: ARRAY
30070: GREATEREQUAL
30071: AND
30072: NOT
30073: IFFALSE 30077
// exit ;
30075: GO 30664
// if GetBType ( depot ) = b_depot then
30077: LD_VAR 0 1
30081: PPUSH
30082: CALL_OW 266
30086: PUSH
30087: LD_INT 0
30089: EQUAL
30090: IFFALSE 30102
// dist := 28 else
30092: LD_ADDR_VAR 0 14
30096: PUSH
30097: LD_INT 28
30099: ST_TO_ADDR
30100: GO 30110
// dist := 36 ;
30102: LD_ADDR_VAR 0 14
30106: PUSH
30107: LD_INT 36
30109: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30110: LD_VAR 0 1
30114: PPUSH
30115: LD_VAR 0 3
30119: PPUSH
30120: LD_VAR 0 4
30124: PPUSH
30125: CALL_OW 297
30129: PUSH
30130: LD_VAR 0 14
30134: GREATER
30135: IFFALSE 30139
// exit ;
30137: GO 30664
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30139: LD_ADDR_VAR 0 12
30143: PUSH
30144: LD_VAR 0 2
30148: PPUSH
30149: LD_VAR 0 3
30153: PPUSH
30154: LD_VAR 0 4
30158: PPUSH
30159: LD_VAR 0 5
30163: PPUSH
30164: LD_VAR 0 1
30168: PPUSH
30169: CALL_OW 248
30173: PPUSH
30174: LD_INT 0
30176: PPUSH
30177: CALL 30669 0 6
30181: ST_TO_ADDR
// if not hexes then
30182: LD_VAR 0 12
30186: NOT
30187: IFFALSE 30191
// exit ;
30189: GO 30664
// hex := GetHexInfo ( x , y ) ;
30191: LD_ADDR_VAR 0 15
30195: PUSH
30196: LD_VAR 0 3
30200: PPUSH
30201: LD_VAR 0 4
30205: PPUSH
30206: CALL_OW 546
30210: ST_TO_ADDR
// if hex [ 1 ] then
30211: LD_VAR 0 15
30215: PUSH
30216: LD_INT 1
30218: ARRAY
30219: IFFALSE 30223
// exit ;
30221: GO 30664
// height := hex [ 2 ] ;
30223: LD_ADDR_VAR 0 13
30227: PUSH
30228: LD_VAR 0 15
30232: PUSH
30233: LD_INT 2
30235: ARRAY
30236: ST_TO_ADDR
// for i = 1 to hexes do
30237: LD_ADDR_VAR 0 7
30241: PUSH
30242: DOUBLE
30243: LD_INT 1
30245: DEC
30246: ST_TO_ADDR
30247: LD_VAR 0 12
30251: PUSH
30252: FOR_TO
30253: IFFALSE 30583
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30255: LD_VAR 0 12
30259: PUSH
30260: LD_VAR 0 7
30264: ARRAY
30265: PUSH
30266: LD_INT 1
30268: ARRAY
30269: PPUSH
30270: LD_VAR 0 12
30274: PUSH
30275: LD_VAR 0 7
30279: ARRAY
30280: PUSH
30281: LD_INT 2
30283: ARRAY
30284: PPUSH
30285: CALL_OW 488
30289: NOT
30290: PUSH
30291: LD_VAR 0 12
30295: PUSH
30296: LD_VAR 0 7
30300: ARRAY
30301: PUSH
30302: LD_INT 1
30304: ARRAY
30305: PPUSH
30306: LD_VAR 0 12
30310: PUSH
30311: LD_VAR 0 7
30315: ARRAY
30316: PUSH
30317: LD_INT 2
30319: ARRAY
30320: PPUSH
30321: CALL_OW 428
30325: PUSH
30326: LD_INT 0
30328: GREATER
30329: OR
30330: PUSH
30331: LD_VAR 0 12
30335: PUSH
30336: LD_VAR 0 7
30340: ARRAY
30341: PUSH
30342: LD_INT 1
30344: ARRAY
30345: PPUSH
30346: LD_VAR 0 12
30350: PUSH
30351: LD_VAR 0 7
30355: ARRAY
30356: PUSH
30357: LD_INT 2
30359: ARRAY
30360: PPUSH
30361: CALL_OW 351
30365: OR
30366: IFFALSE 30372
// exit ;
30368: POP
30369: POP
30370: GO 30664
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30372: LD_ADDR_VAR 0 8
30376: PUSH
30377: LD_VAR 0 12
30381: PUSH
30382: LD_VAR 0 7
30386: ARRAY
30387: PUSH
30388: LD_INT 1
30390: ARRAY
30391: PPUSH
30392: LD_VAR 0 12
30396: PUSH
30397: LD_VAR 0 7
30401: ARRAY
30402: PUSH
30403: LD_INT 2
30405: ARRAY
30406: PPUSH
30407: CALL_OW 546
30411: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30412: LD_VAR 0 8
30416: PUSH
30417: LD_INT 1
30419: ARRAY
30420: PUSH
30421: LD_VAR 0 8
30425: PUSH
30426: LD_INT 2
30428: ARRAY
30429: PUSH
30430: LD_VAR 0 13
30434: PUSH
30435: LD_INT 2
30437: PLUS
30438: GREATER
30439: OR
30440: PUSH
30441: LD_VAR 0 8
30445: PUSH
30446: LD_INT 2
30448: ARRAY
30449: PUSH
30450: LD_VAR 0 13
30454: PUSH
30455: LD_INT 2
30457: MINUS
30458: LESS
30459: OR
30460: PUSH
30461: LD_VAR 0 8
30465: PUSH
30466: LD_INT 3
30468: ARRAY
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: LD_INT 8
30475: PUSH
30476: LD_INT 9
30478: PUSH
30479: LD_INT 10
30481: PUSH
30482: LD_INT 11
30484: PUSH
30485: LD_INT 12
30487: PUSH
30488: LD_INT 13
30490: PUSH
30491: LD_INT 16
30493: PUSH
30494: LD_INT 17
30496: PUSH
30497: LD_INT 18
30499: PUSH
30500: LD_INT 19
30502: PUSH
30503: LD_INT 20
30505: PUSH
30506: LD_INT 21
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: IN
30524: NOT
30525: OR
30526: PUSH
30527: LD_VAR 0 8
30531: PUSH
30532: LD_INT 5
30534: ARRAY
30535: NOT
30536: OR
30537: PUSH
30538: LD_VAR 0 8
30542: PUSH
30543: LD_INT 6
30545: ARRAY
30546: PUSH
30547: LD_INT 1
30549: PUSH
30550: LD_INT 2
30552: PUSH
30553: LD_INT 7
30555: PUSH
30556: LD_INT 9
30558: PUSH
30559: LD_INT 10
30561: PUSH
30562: LD_INT 11
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: IN
30573: NOT
30574: OR
30575: IFFALSE 30581
// exit ;
30577: POP
30578: POP
30579: GO 30664
// end ;
30581: GO 30252
30583: POP
30584: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30585: LD_VAR 0 9
30589: PPUSH
30590: LD_VAR 0 3
30594: PPUSH
30595: LD_VAR 0 4
30599: PPUSH
30600: LD_INT 20
30602: PPUSH
30603: CALL 22587 0 4
30607: PUSH
30608: LD_INT 4
30610: ARRAY
30611: IFFALSE 30615
// exit ;
30613: GO 30664
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30615: LD_VAR 0 2
30619: PUSH
30620: LD_INT 29
30622: PUSH
30623: LD_INT 30
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: IN
30630: PUSH
30631: LD_VAR 0 3
30635: PPUSH
30636: LD_VAR 0 4
30640: PPUSH
30641: LD_VAR 0 9
30645: PPUSH
30646: CALL_OW 440
30650: NOT
30651: AND
30652: IFFALSE 30656
// exit ;
30654: GO 30664
// result := true ;
30656: LD_ADDR_VAR 0 6
30660: PUSH
30661: LD_INT 1
30663: ST_TO_ADDR
// end ;
30664: LD_VAR 0 6
30668: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30669: LD_INT 0
30671: PPUSH
30672: PPUSH
30673: PPUSH
30674: PPUSH
30675: PPUSH
30676: PPUSH
30677: PPUSH
30678: PPUSH
30679: PPUSH
30680: PPUSH
30681: PPUSH
30682: PPUSH
30683: PPUSH
30684: PPUSH
30685: PPUSH
30686: PPUSH
30687: PPUSH
30688: PPUSH
30689: PPUSH
30690: PPUSH
30691: PPUSH
30692: PPUSH
30693: PPUSH
30694: PPUSH
30695: PPUSH
30696: PPUSH
30697: PPUSH
30698: PPUSH
30699: PPUSH
30700: PPUSH
30701: PPUSH
30702: PPUSH
30703: PPUSH
30704: PPUSH
30705: PPUSH
30706: PPUSH
30707: PPUSH
30708: PPUSH
30709: PPUSH
30710: PPUSH
30711: PPUSH
30712: PPUSH
30713: PPUSH
30714: PPUSH
30715: PPUSH
30716: PPUSH
30717: PPUSH
30718: PPUSH
30719: PPUSH
30720: PPUSH
30721: PPUSH
30722: PPUSH
30723: PPUSH
30724: PPUSH
30725: PPUSH
30726: PPUSH
30727: PPUSH
30728: PPUSH
// result = [ ] ;
30729: LD_ADDR_VAR 0 7
30733: PUSH
30734: EMPTY
30735: ST_TO_ADDR
// temp_list = [ ] ;
30736: LD_ADDR_VAR 0 9
30740: PUSH
30741: EMPTY
30742: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30743: LD_VAR 0 4
30747: PUSH
30748: LD_INT 0
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: LD_INT 2
30756: PUSH
30757: LD_INT 3
30759: PUSH
30760: LD_INT 4
30762: PUSH
30763: LD_INT 5
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: IN
30774: NOT
30775: PUSH
30776: LD_VAR 0 1
30780: PUSH
30781: LD_INT 0
30783: PUSH
30784: LD_INT 1
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: IN
30791: PUSH
30792: LD_VAR 0 5
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: LD_INT 3
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: LIST
30810: IN
30811: NOT
30812: AND
30813: OR
30814: IFFALSE 30818
// exit ;
30816: GO 49209
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30818: LD_VAR 0 1
30822: PUSH
30823: LD_INT 6
30825: PUSH
30826: LD_INT 7
30828: PUSH
30829: LD_INT 8
30831: PUSH
30832: LD_INT 13
30834: PUSH
30835: LD_INT 12
30837: PUSH
30838: LD_INT 15
30840: PUSH
30841: LD_INT 11
30843: PUSH
30844: LD_INT 14
30846: PUSH
30847: LD_INT 10
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: IN
30861: IFFALSE 30871
// btype = b_lab ;
30863: LD_ADDR_VAR 0 1
30867: PUSH
30868: LD_INT 6
30870: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30871: LD_VAR 0 6
30875: PUSH
30876: LD_INT 0
30878: PUSH
30879: LD_INT 1
30881: PUSH
30882: LD_INT 2
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: LIST
30889: IN
30890: NOT
30891: PUSH
30892: LD_VAR 0 1
30896: PUSH
30897: LD_INT 0
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: LD_INT 2
30905: PUSH
30906: LD_INT 3
30908: PUSH
30909: LD_INT 6
30911: PUSH
30912: LD_INT 36
30914: PUSH
30915: LD_INT 4
30917: PUSH
30918: LD_INT 5
30920: PUSH
30921: LD_INT 31
30923: PUSH
30924: LD_INT 32
30926: PUSH
30927: LD_INT 33
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: IN
30943: NOT
30944: PUSH
30945: LD_VAR 0 6
30949: PUSH
30950: LD_INT 1
30952: EQUAL
30953: AND
30954: OR
30955: PUSH
30956: LD_VAR 0 1
30960: PUSH
30961: LD_INT 2
30963: PUSH
30964: LD_INT 3
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: IN
30971: NOT
30972: PUSH
30973: LD_VAR 0 6
30977: PUSH
30978: LD_INT 2
30980: EQUAL
30981: AND
30982: OR
30983: IFFALSE 30993
// mode = 0 ;
30985: LD_ADDR_VAR 0 6
30989: PUSH
30990: LD_INT 0
30992: ST_TO_ADDR
// case mode of 0 :
30993: LD_VAR 0 6
30997: PUSH
30998: LD_INT 0
31000: DOUBLE
31001: EQUAL
31002: IFTRUE 31006
31004: GO 42459
31006: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31007: LD_ADDR_VAR 0 11
31011: PUSH
31012: LD_INT 0
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 0
31024: PUSH
31025: LD_INT 1
31027: NEG
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 1
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: LD_INT 1
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 0
31055: PUSH
31056: LD_INT 1
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 1
31065: NEG
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 1
31076: NEG
31077: PUSH
31078: LD_INT 1
31080: NEG
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 1
31088: NEG
31089: PUSH
31090: LD_INT 2
31092: NEG
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 0
31100: PUSH
31101: LD_INT 2
31103: NEG
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: LD_INT 1
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 1
31122: PUSH
31123: LD_INT 2
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 0
31132: PUSH
31133: LD_INT 2
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 1
31142: NEG
31143: PUSH
31144: LD_INT 1
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 1
31153: PUSH
31154: LD_INT 3
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: LD_INT 3
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 1
31173: NEG
31174: PUSH
31175: LD_INT 2
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31200: LD_ADDR_VAR 0 12
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 0
31217: PUSH
31218: LD_INT 1
31220: NEG
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 1
31228: PUSH
31229: LD_INT 0
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 1
31238: PUSH
31239: LD_INT 1
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 0
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 1
31258: NEG
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 1
31269: NEG
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: LD_INT 1
31284: NEG
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 2
31292: PUSH
31293: LD_INT 0
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 2
31302: PUSH
31303: LD_INT 1
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 1
31312: NEG
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 2
31323: NEG
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 2
31334: NEG
31335: PUSH
31336: LD_INT 1
31338: NEG
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 2
31346: NEG
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 3
31357: NEG
31358: PUSH
31359: LD_INT 0
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 3
31368: NEG
31369: PUSH
31370: LD_INT 1
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31396: LD_ADDR_VAR 0 13
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: LD_INT 1
31416: NEG
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 1
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 1
31465: NEG
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 1
31477: NEG
31478: PUSH
31479: LD_INT 2
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 2
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 2
31499: PUSH
31500: LD_INT 2
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: LD_INT 2
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 2
31519: NEG
31520: PUSH
31521: LD_INT 1
31523: NEG
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 2
31531: NEG
31532: PUSH
31533: LD_INT 2
31535: NEG
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 2
31543: NEG
31544: PUSH
31545: LD_INT 3
31547: NEG
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 3
31555: NEG
31556: PUSH
31557: LD_INT 2
31559: NEG
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 3
31567: NEG
31568: PUSH
31569: LD_INT 3
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31595: LD_ADDR_VAR 0 14
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: LD_INT 1
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 1
31664: NEG
31665: PUSH
31666: LD_INT 1
31668: NEG
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 1
31676: NEG
31677: PUSH
31678: LD_INT 2
31680: NEG
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 0
31688: PUSH
31689: LD_INT 2
31691: NEG
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 1
31699: PUSH
31700: LD_INT 1
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 1
31710: PUSH
31711: LD_INT 2
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 0
31720: PUSH
31721: LD_INT 2
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 1
31730: NEG
31731: PUSH
31732: LD_INT 1
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 1
31741: NEG
31742: PUSH
31743: LD_INT 3
31745: NEG
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: LD_INT 3
31756: NEG
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 1
31764: PUSH
31765: LD_INT 2
31767: NEG
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31791: LD_ADDR_VAR 0 15
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: LD_INT 1
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 1
31849: NEG
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: LD_INT 1
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: LD_INT 1
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 2
31914: NEG
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 2
31925: NEG
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: PUSH
31938: LD_INT 1
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 3
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 3
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31984: LD_ADDR_VAR 0 16
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: LD_INT 1
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: LD_INT 1
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 1
32042: NEG
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 1
32065: NEG
32066: PUSH
32067: LD_INT 2
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 2
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 2
32087: PUSH
32088: LD_INT 2
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 1
32097: PUSH
32098: LD_INT 2
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 2
32107: NEG
32108: PUSH
32109: LD_INT 1
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 2
32119: NEG
32120: PUSH
32121: LD_INT 2
32123: NEG
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: LD_INT 2
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 3
32141: PUSH
32142: LD_INT 3
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 2
32151: PUSH
32152: LD_INT 3
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32177: LD_ADDR_VAR 0 17
32181: PUSH
32182: LD_INT 0
32184: PUSH
32185: LD_INT 0
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 0
32194: PUSH
32195: LD_INT 1
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 1
32205: PUSH
32206: LD_INT 0
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 1
32215: PUSH
32216: LD_INT 1
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 1
32235: NEG
32236: PUSH
32237: LD_INT 0
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 1
32246: NEG
32247: PUSH
32248: LD_INT 1
32250: NEG
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: LD_INT 2
32262: NEG
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: LD_INT 2
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 1
32281: PUSH
32282: LD_INT 1
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 2
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: LD_INT 1
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 2
32312: PUSH
32313: LD_INT 2
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 1
32322: PUSH
32323: LD_INT 2
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: LD_INT 2
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 1
32342: NEG
32343: PUSH
32344: LD_INT 1
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 2
32353: NEG
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 2
32364: NEG
32365: PUSH
32366: LD_INT 1
32368: NEG
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 2
32376: NEG
32377: PUSH
32378: LD_INT 2
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32407: LD_ADDR_VAR 0 18
32411: PUSH
32412: LD_INT 0
32414: PUSH
32415: LD_INT 0
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 0
32424: PUSH
32425: LD_INT 1
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 1
32435: PUSH
32436: LD_INT 0
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: LD_INT 1
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 0
32455: PUSH
32456: LD_INT 1
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 1
32465: NEG
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 1
32476: NEG
32477: PUSH
32478: LD_INT 1
32480: NEG
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 1
32488: NEG
32489: PUSH
32490: LD_INT 2
32492: NEG
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 0
32500: PUSH
32501: LD_INT 2
32503: NEG
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 1
32511: PUSH
32512: LD_INT 1
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 2
32522: PUSH
32523: LD_INT 0
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: LD_INT 1
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 2
32542: PUSH
32543: LD_INT 2
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: LD_INT 2
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: LD_INT 2
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 2
32583: NEG
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 2
32594: NEG
32595: PUSH
32596: LD_INT 1
32598: NEG
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 2
32606: NEG
32607: PUSH
32608: LD_INT 2
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32637: LD_ADDR_VAR 0 19
32641: PUSH
32642: LD_INT 0
32644: PUSH
32645: LD_INT 0
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 0
32654: PUSH
32655: LD_INT 1
32657: NEG
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: LD_INT 0
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 1
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 0
32685: PUSH
32686: LD_INT 1
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 1
32695: NEG
32696: PUSH
32697: LD_INT 0
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 1
32706: NEG
32707: PUSH
32708: LD_INT 1
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 1
32718: NEG
32719: PUSH
32720: LD_INT 2
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: LD_INT 2
32733: NEG
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: LD_INT 1
32744: NEG
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 2
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 2
32762: PUSH
32763: LD_INT 1
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 2
32772: PUSH
32773: LD_INT 2
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 1
32782: PUSH
32783: LD_INT 2
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: LD_INT 2
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: LD_INT 1
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: NEG
32814: PUSH
32815: LD_INT 0
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 2
32824: NEG
32825: PUSH
32826: LD_INT 1
32828: NEG
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 2
32836: NEG
32837: PUSH
32838: LD_INT 2
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32867: LD_ADDR_VAR 0 20
32871: PUSH
32872: LD_INT 0
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 0
32884: PUSH
32885: LD_INT 1
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 1
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 1
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 0
32915: PUSH
32916: LD_INT 1
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 1
32925: NEG
32926: PUSH
32927: LD_INT 0
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 1
32936: NEG
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: LD_INT 2
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: LD_INT 2
32963: NEG
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: LD_INT 1
32974: NEG
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 2
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 2
32992: PUSH
32993: LD_INT 1
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 2
33002: PUSH
33003: LD_INT 2
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 1
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: LD_INT 2
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 2
33043: NEG
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 2
33054: NEG
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 2
33066: NEG
33067: PUSH
33068: LD_INT 2
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33097: LD_ADDR_VAR 0 21
33101: PUSH
33102: LD_INT 0
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 0
33114: PUSH
33115: LD_INT 1
33117: NEG
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 1
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: LD_INT 1
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 0
33145: PUSH
33146: LD_INT 1
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 1
33155: NEG
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 1
33166: NEG
33167: PUSH
33168: LD_INT 1
33170: NEG
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 1
33178: NEG
33179: PUSH
33180: LD_INT 2
33182: NEG
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 0
33190: PUSH
33191: LD_INT 2
33193: NEG
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 1
33201: PUSH
33202: LD_INT 1
33204: NEG
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 2
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 2
33222: PUSH
33223: LD_INT 1
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 2
33232: PUSH
33233: LD_INT 2
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 1
33242: PUSH
33243: LD_INT 2
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 0
33252: PUSH
33253: LD_INT 2
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 1
33262: NEG
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 2
33273: NEG
33274: PUSH
33275: LD_INT 0
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 2
33284: NEG
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 2
33296: NEG
33297: PUSH
33298: LD_INT 2
33300: NEG
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33327: LD_ADDR_VAR 0 22
33331: PUSH
33332: LD_INT 0
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: LD_INT 1
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: LD_INT 1
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 0
33375: PUSH
33376: LD_INT 1
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 1
33385: NEG
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 1
33396: NEG
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 1
33408: NEG
33409: PUSH
33410: LD_INT 2
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: LD_INT 2
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: LD_INT 1
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 2
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 2
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 2
33462: PUSH
33463: LD_INT 2
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: LD_INT 2
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 1
33492: NEG
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 2
33503: NEG
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 2
33514: NEG
33515: PUSH
33516: LD_INT 1
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 2
33526: NEG
33527: PUSH
33528: LD_INT 2
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33557: LD_ADDR_VAR 0 23
33561: PUSH
33562: LD_INT 0
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: LD_INT 1
33577: NEG
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 1
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 1
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 1
33615: NEG
33616: PUSH
33617: LD_INT 0
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: NEG
33627: PUSH
33628: LD_INT 1
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 1
33638: NEG
33639: PUSH
33640: LD_INT 2
33642: NEG
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: LD_INT 2
33653: NEG
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 1
33661: PUSH
33662: LD_INT 1
33664: NEG
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 2
33672: PUSH
33673: LD_INT 0
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 2
33682: PUSH
33683: LD_INT 1
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 2
33692: PUSH
33693: LD_INT 2
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 1
33702: PUSH
33703: LD_INT 2
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: LD_INT 2
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 1
33722: NEG
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 2
33733: NEG
33734: PUSH
33735: LD_INT 0
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 2
33744: NEG
33745: PUSH
33746: LD_INT 1
33748: NEG
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 2
33756: NEG
33757: PUSH
33758: LD_INT 2
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 2
33768: NEG
33769: PUSH
33770: LD_INT 3
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 1
33780: NEG
33781: PUSH
33782: LD_INT 3
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: LD_INT 2
33795: NEG
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: LD_INT 1
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33837: LD_ADDR_VAR 0 24
33841: PUSH
33842: LD_INT 0
33844: PUSH
33845: LD_INT 0
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: LD_INT 1
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 1
33875: PUSH
33876: LD_INT 1
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 1
33895: NEG
33896: PUSH
33897: LD_INT 0
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 1
33906: NEG
33907: PUSH
33908: LD_INT 1
33910: NEG
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: LD_INT 2
33922: NEG
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 0
33930: PUSH
33931: LD_INT 2
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: LD_INT 1
33944: NEG
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 2
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 2
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 2
33972: PUSH
33973: LD_INT 2
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 1
33982: PUSH
33983: LD_INT 2
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: LD_INT 2
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 1
34002: NEG
34003: PUSH
34004: LD_INT 1
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 2
34013: NEG
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 2
34024: NEG
34025: PUSH
34026: LD_INT 1
34028: NEG
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 2
34036: NEG
34037: PUSH
34038: LD_INT 2
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 1
34048: PUSH
34049: LD_INT 2
34051: NEG
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 2
34059: PUSH
34060: LD_INT 1
34062: NEG
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 3
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 3
34080: PUSH
34081: LD_INT 2
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34113: LD_ADDR_VAR 0 25
34117: PUSH
34118: LD_INT 0
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: LD_INT 1
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 1
34141: PUSH
34142: LD_INT 0
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: PUSH
34152: LD_INT 1
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: LD_INT 1
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 1
34171: NEG
34172: PUSH
34173: LD_INT 0
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: NEG
34183: PUSH
34184: LD_INT 1
34186: NEG
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 1
34194: NEG
34195: PUSH
34196: LD_INT 2
34198: NEG
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: LD_INT 2
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: LD_INT 1
34220: NEG
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 2
34228: PUSH
34229: LD_INT 0
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 2
34238: PUSH
34239: LD_INT 1
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 2
34248: PUSH
34249: LD_INT 2
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 1
34258: PUSH
34259: LD_INT 2
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 0
34268: PUSH
34269: LD_INT 2
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: NEG
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 2
34289: NEG
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 2
34300: NEG
34301: PUSH
34302: LD_INT 1
34304: NEG
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 2
34312: NEG
34313: PUSH
34314: LD_INT 2
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 3
34324: PUSH
34325: LD_INT 1
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 3
34334: PUSH
34335: LD_INT 2
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 2
34344: PUSH
34345: LD_INT 3
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: LD_INT 3
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34387: LD_ADDR_VAR 0 26
34391: PUSH
34392: LD_INT 0
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: LD_INT 1
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 1
34445: NEG
34446: PUSH
34447: LD_INT 0
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: LD_INT 1
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 1
34468: NEG
34469: PUSH
34470: LD_INT 2
34472: NEG
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: LD_INT 2
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 1
34491: PUSH
34492: LD_INT 1
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 2
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 2
34512: PUSH
34513: LD_INT 1
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 2
34522: PUSH
34523: LD_INT 2
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 1
34532: PUSH
34533: LD_INT 2
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: LD_INT 2
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 1
34552: NEG
34553: PUSH
34554: LD_INT 1
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 2
34563: NEG
34564: PUSH
34565: LD_INT 0
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 2
34574: NEG
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 2
34586: NEG
34587: PUSH
34588: LD_INT 2
34590: NEG
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 2
34598: PUSH
34599: LD_INT 3
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 1
34608: PUSH
34609: LD_INT 3
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 1
34618: NEG
34619: PUSH
34620: LD_INT 2
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 2
34629: NEG
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34663: LD_ADDR_VAR 0 27
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 0
34680: PUSH
34681: LD_INT 1
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 1
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 1
34701: PUSH
34702: LD_INT 1
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: LD_INT 1
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 1
34721: NEG
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 1
34732: NEG
34733: PUSH
34734: LD_INT 1
34736: NEG
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 1
34744: NEG
34745: PUSH
34746: LD_INT 2
34748: NEG
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: LD_INT 2
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: LD_INT 1
34770: NEG
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 2
34778: PUSH
34779: LD_INT 0
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 2
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 2
34798: PUSH
34799: LD_INT 2
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: LD_INT 2
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: LD_INT 2
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 1
34828: NEG
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 2
34839: NEG
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 2
34850: NEG
34851: PUSH
34852: LD_INT 1
34854: NEG
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 2
34862: NEG
34863: PUSH
34864: LD_INT 2
34866: NEG
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 2
34885: NEG
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 3
34896: NEG
34897: PUSH
34898: LD_INT 1
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 3
34908: NEG
34909: PUSH
34910: LD_INT 2
34912: NEG
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34943: LD_ADDR_VAR 0 28
34947: PUSH
34948: LD_INT 0
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 1
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 1
34981: PUSH
34982: LD_INT 1
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: LD_INT 1
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 1
35001: NEG
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: NEG
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 1
35024: NEG
35025: PUSH
35026: LD_INT 2
35028: NEG
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 0
35036: PUSH
35037: LD_INT 2
35039: NEG
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 1
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 2
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 2
35068: PUSH
35069: LD_INT 1
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 2
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: LD_INT 2
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: LD_INT 2
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 1
35108: NEG
35109: PUSH
35110: LD_INT 1
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 2
35119: NEG
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 2
35130: NEG
35131: PUSH
35132: LD_INT 1
35134: NEG
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 2
35142: NEG
35143: PUSH
35144: LD_INT 2
35146: NEG
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 2
35154: NEG
35155: PUSH
35156: LD_INT 3
35158: NEG
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: LD_INT 3
35170: NEG
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 3
35178: NEG
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 3
35190: NEG
35191: PUSH
35192: LD_INT 2
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35225: LD_ADDR_VAR 0 29
35229: PUSH
35230: LD_INT 0
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 1
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 1
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 1
35283: NEG
35284: PUSH
35285: LD_INT 0
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 1
35294: NEG
35295: PUSH
35296: LD_INT 1
35298: NEG
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PUSH
35308: LD_INT 2
35310: NEG
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: LD_INT 2
35321: NEG
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: LD_INT 1
35332: NEG
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 2
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 2
35350: PUSH
35351: LD_INT 1
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 1
35360: PUSH
35361: LD_INT 2
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: LD_INT 2
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 1
35380: NEG
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 2
35391: NEG
35392: PUSH
35393: LD_INT 1
35395: NEG
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 2
35403: NEG
35404: PUSH
35405: LD_INT 2
35407: NEG
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 2
35415: NEG
35416: PUSH
35417: LD_INT 3
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 2
35427: PUSH
35428: LD_INT 1
35430: NEG
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 3
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: LD_INT 3
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 3
35469: NEG
35470: PUSH
35471: LD_INT 2
35473: NEG
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35504: LD_ADDR_VAR 0 30
35508: PUSH
35509: LD_INT 0
35511: PUSH
35512: LD_INT 0
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 0
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 1
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 1
35562: NEG
35563: PUSH
35564: LD_INT 0
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 1
35573: NEG
35574: PUSH
35575: LD_INT 1
35577: NEG
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: LD_INT 2
35589: NEG
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 0
35597: PUSH
35598: LD_INT 2
35600: NEG
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 1
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 2
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 2
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 2
35639: PUSH
35640: LD_INT 2
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 1
35649: PUSH
35650: LD_INT 2
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 1
35659: NEG
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 2
35670: NEG
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 2
35681: NEG
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: NEG
35694: PUSH
35695: LD_INT 3
35697: NEG
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: LD_INT 2
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 3
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 2
35726: PUSH
35727: LD_INT 3
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 2
35736: NEG
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 3
35747: NEG
35748: PUSH
35749: LD_INT 1
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35782: LD_ADDR_VAR 0 31
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 0
35799: PUSH
35800: LD_INT 1
35802: NEG
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 1
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 1
35840: NEG
35841: PUSH
35842: LD_INT 0
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: LD_INT 1
35855: NEG
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 1
35863: NEG
35864: PUSH
35865: LD_INT 2
35867: NEG
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: PUSH
35876: LD_INT 1
35878: NEG
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 2
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 2
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 2
35906: PUSH
35907: LD_INT 2
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 1
35916: PUSH
35917: LD_INT 2
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 0
35926: PUSH
35927: LD_INT 2
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 1
35936: NEG
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 2
35947: NEG
35948: PUSH
35949: LD_INT 1
35951: NEG
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 2
35959: NEG
35960: PUSH
35961: LD_INT 2
35963: NEG
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 2
35971: NEG
35972: PUSH
35973: LD_INT 3
35975: NEG
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 2
35983: PUSH
35984: LD_INT 1
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 3
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 1
36004: PUSH
36005: LD_INT 3
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 1
36014: NEG
36015: PUSH
36016: LD_INT 2
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 3
36025: NEG
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36060: LD_ADDR_VAR 0 32
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 1
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 1
36098: PUSH
36099: LD_INT 1
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 1
36118: NEG
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 1
36129: NEG
36130: PUSH
36131: LD_INT 1
36133: NEG
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 1
36141: NEG
36142: PUSH
36143: LD_INT 2
36145: NEG
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: LD_INT 2
36156: NEG
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: LD_INT 1
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 2
36175: PUSH
36176: LD_INT 1
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 2
36185: PUSH
36186: LD_INT 2
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: LD_INT 2
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: LD_INT 2
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 1
36215: NEG
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 2
36226: NEG
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 2
36237: NEG
36238: PUSH
36239: LD_INT 1
36241: NEG
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: LD_INT 3
36253: NEG
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 1
36261: PUSH
36262: LD_INT 2
36264: NEG
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 3
36272: PUSH
36273: LD_INT 2
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 2
36282: PUSH
36283: LD_INT 3
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 2
36292: NEG
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 3
36303: NEG
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36338: LD_ADDR_VAR 0 33
36342: PUSH
36343: LD_INT 0
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 0
36386: PUSH
36387: LD_INT 1
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 1
36396: NEG
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 1
36407: NEG
36408: PUSH
36409: LD_INT 1
36411: NEG
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: LD_INT 2
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: PUSH
36432: LD_INT 1
36434: NEG
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 2
36442: PUSH
36443: LD_INT 0
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 2
36452: PUSH
36453: LD_INT 1
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 1
36462: PUSH
36463: LD_INT 2
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 0
36472: PUSH
36473: LD_INT 2
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 1
36482: NEG
36483: PUSH
36484: LD_INT 1
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 2
36493: NEG
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 2
36504: NEG
36505: PUSH
36506: LD_INT 1
36508: NEG
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 2
36516: NEG
36517: PUSH
36518: LD_INT 2
36520: NEG
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 2
36528: NEG
36529: PUSH
36530: LD_INT 3
36532: NEG
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 2
36540: PUSH
36541: LD_INT 1
36543: NEG
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 3
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 1
36561: PUSH
36562: LD_INT 3
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 2
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 3
36582: NEG
36583: PUSH
36584: LD_INT 2
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36617: LD_ADDR_VAR 0 34
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 1
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 0
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: PUSH
36688: LD_INT 1
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 1
36698: NEG
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: LD_INT 2
36713: NEG
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 2
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: LD_INT 2
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: LD_INT 2
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: NEG
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 2
36773: NEG
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 2
36784: NEG
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 2
36796: NEG
36797: PUSH
36798: LD_INT 2
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: LD_INT 3
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 2
36823: NEG
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 3
36831: PUSH
36832: LD_INT 2
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 2
36841: PUSH
36842: LD_INT 3
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 2
36851: NEG
36852: PUSH
36853: LD_INT 1
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 3
36862: NEG
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36897: LD_ADDR_VAR 0 35
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 0
36914: PUSH
36915: LD_INT 1
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 1
36955: NEG
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 1
36966: NEG
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 2
36978: PUSH
36979: LD_INT 1
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 2
36988: NEG
36989: PUSH
36990: LD_INT 1
36992: NEG
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37009: LD_ADDR_VAR 0 36
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: LD_INT 1
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: NEG
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: NEG
37091: PUSH
37092: LD_INT 2
37094: NEG
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37121: LD_ADDR_VAR 0 37
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 1
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: LD_INT 1
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: LD_INT 1
37205: NEG
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 1
37213: NEG
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37233: LD_ADDR_VAR 0 38
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: LD_INT 0
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: LD_INT 1
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: LD_INT 1
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 1
37291: NEG
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: NEG
37303: PUSH
37304: LD_INT 1
37306: NEG
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 2
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 2
37324: NEG
37325: PUSH
37326: LD_INT 1
37328: NEG
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37345: LD_ADDR_VAR 0 39
37349: PUSH
37350: LD_INT 0
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 1
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 1
37403: NEG
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 1
37414: NEG
37415: PUSH
37416: LD_INT 1
37418: NEG
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: LD_INT 2
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: LD_INT 2
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37457: LD_ADDR_VAR 0 40
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 1
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: LD_INT 1
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: NEG
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 1
37549: NEG
37550: PUSH
37551: LD_INT 1
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37569: LD_ADDR_VAR 0 41
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: LD_INT 1
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 1
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 1
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: NEG
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: LD_INT 1
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: LD_INT 2
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 2
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 2
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 2
37693: PUSH
37694: LD_INT 2
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: LD_INT 2
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 1
37713: NEG
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 2
37724: NEG
37725: PUSH
37726: LD_INT 0
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 2
37735: NEG
37736: PUSH
37737: LD_INT 1
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 2
37747: NEG
37748: PUSH
37749: LD_INT 2
37751: NEG
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 2
37759: NEG
37760: PUSH
37761: LD_INT 3
37763: NEG
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 2
37771: PUSH
37772: LD_INT 1
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 3
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 3
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 3
37802: PUSH
37803: LD_INT 2
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 3
37812: PUSH
37813: LD_INT 3
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 2
37822: PUSH
37823: LD_INT 3
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 2
37832: NEG
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 3
37843: NEG
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 3
37854: NEG
37855: PUSH
37856: LD_INT 1
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 3
37866: NEG
37867: PUSH
37868: LD_INT 2
37870: NEG
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 3
37878: NEG
37879: PUSH
37880: LD_INT 3
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37919: LD_ADDR_VAR 0 42
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: LD_INT 1
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 1
37988: NEG
37989: PUSH
37990: LD_INT 1
37992: NEG
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 1
38000: NEG
38001: PUSH
38002: LD_INT 2
38004: NEG
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 0
38012: PUSH
38013: LD_INT 2
38015: NEG
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 1
38023: PUSH
38024: LD_INT 1
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 2
38034: PUSH
38035: LD_INT 1
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 2
38044: PUSH
38045: LD_INT 2
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: LD_INT 2
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 1
38074: NEG
38075: PUSH
38076: LD_INT 1
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 2
38085: NEG
38086: PUSH
38087: LD_INT 1
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 2
38097: NEG
38098: PUSH
38099: LD_INT 2
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 2
38109: NEG
38110: PUSH
38111: LD_INT 3
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: LD_INT 3
38125: NEG
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: LD_INT 3
38136: NEG
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: LD_INT 2
38147: NEG
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 3
38155: PUSH
38156: LD_INT 2
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 3
38165: PUSH
38166: LD_INT 3
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 2
38175: PUSH
38176: LD_INT 3
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: LD_INT 3
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: LD_INT 3
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: LD_INT 2
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 3
38216: NEG
38217: PUSH
38218: LD_INT 2
38220: NEG
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 3
38228: NEG
38229: PUSH
38230: LD_INT 3
38232: NEG
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38269: LD_ADDR_VAR 0 43
38273: PUSH
38274: LD_INT 0
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 0
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 1
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 1
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 1
38327: NEG
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: NEG
38339: PUSH
38340: LD_INT 1
38342: NEG
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: LD_INT 2
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: LD_INT 2
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: LD_INT 1
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 2
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 2
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: LD_INT 2
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: LD_INT 2
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 1
38424: NEG
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 2
38435: NEG
38436: PUSH
38437: LD_INT 0
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 2
38446: NEG
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 1
38458: NEG
38459: PUSH
38460: LD_INT 3
38462: NEG
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: LD_INT 3
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: PUSH
38482: LD_INT 2
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 2
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 3
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 3
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: LD_INT 3
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 3
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: LD_INT 2
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 2
38554: NEG
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 3
38565: NEG
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 3
38576: NEG
38577: PUSH
38578: LD_INT 1
38580: NEG
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38617: LD_ADDR_VAR 0 44
38621: PUSH
38622: LD_INT 0
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: NEG
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: LD_INT 2
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: LD_INT 1
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 2
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 2
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: LD_INT 2
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: LD_INT 2
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: NEG
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 2
38772: NEG
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 2
38783: NEG
38784: PUSH
38785: LD_INT 1
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 2
38795: NEG
38796: PUSH
38797: LD_INT 2
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 2
38807: NEG
38808: PUSH
38809: LD_INT 3
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 3
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 3
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 3
38850: PUSH
38851: LD_INT 2
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 3
38860: PUSH
38861: LD_INT 3
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: LD_INT 3
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 2
38880: NEG
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 3
38891: NEG
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 3
38902: NEG
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 3
38914: NEG
38915: PUSH
38916: LD_INT 2
38918: NEG
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 3
38926: NEG
38927: PUSH
38928: LD_INT 3
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38967: LD_ADDR_VAR 0 45
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: NEG
39037: PUSH
39038: LD_INT 1
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 1
39048: NEG
39049: PUSH
39050: LD_INT 2
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: LD_INT 2
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 2
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 2
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: LD_INT 2
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 2
39133: NEG
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: NEG
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 2
39157: NEG
39158: PUSH
39159: LD_INT 3
39161: NEG
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: NEG
39170: PUSH
39171: LD_INT 3
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 0
39181: PUSH
39182: LD_INT 3
39184: NEG
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: LD_INT 2
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 3
39203: PUSH
39204: LD_INT 2
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 3
39213: PUSH
39214: LD_INT 3
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 2
39223: PUSH
39224: LD_INT 3
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 1
39233: PUSH
39234: LD_INT 3
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: LD_INT 3
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: LD_INT 2
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 3
39264: NEG
39265: PUSH
39266: LD_INT 2
39268: NEG
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 3
39276: NEG
39277: PUSH
39278: LD_INT 3
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39317: LD_ADDR_VAR 0 46
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: LD_INT 1
39337: NEG
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 1
39355: PUSH
39356: LD_INT 1
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: LD_INT 1
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: LD_INT 2
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: LD_INT 2
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 2
39442: PUSH
39443: LD_INT 1
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 1
39452: PUSH
39453: LD_INT 2
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: LD_INT 2
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: LD_INT 1
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 2
39483: NEG
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 2
39494: NEG
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: LD_INT 3
39510: NEG
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: LD_INT 3
39521: NEG
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: LD_INT 2
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 2
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 3
39551: PUSH
39552: LD_INT 0
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 3
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: LD_INT 3
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: LD_INT 3
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: LD_INT 2
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 2
39602: NEG
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 3
39613: NEG
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 3
39624: NEG
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39665: LD_ADDR_VAR 0 47
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 1
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: NEG
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: NEG
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: LD_INT 2
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: LD_INT 2
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: LD_INT 1
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 2
39780: NEG
39781: PUSH
39782: LD_INT 1
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 2
39792: NEG
39793: PUSH
39794: LD_INT 2
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39816: LD_ADDR_VAR 0 48
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: LD_INT 0
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: LD_INT 1
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 0
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 1
39897: NEG
39898: PUSH
39899: LD_INT 2
39901: NEG
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 0
39909: PUSH
39910: LD_INT 2
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 2
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39963: LD_ADDR_VAR 0 49
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: LD_INT 1
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 1
40021: NEG
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: NEG
40033: PUSH
40034: LD_INT 1
40036: NEG
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: LD_INT 1
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 2
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 2
40075: PUSH
40076: LD_INT 2
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40107: LD_ADDR_VAR 0 50
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 2
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 2
40198: PUSH
40199: LD_INT 2
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: LD_INT 2
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40251: LD_ADDR_VAR 0 51
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 1
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 1
40309: NEG
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 1
40320: NEG
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: PUSH
40333: LD_INT 2
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 2
40363: NEG
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 2
40374: NEG
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40398: LD_ADDR_VAR 0 52
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: NEG
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 2
40502: NEG
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 2
40513: NEG
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: NEG
40526: PUSH
40527: LD_INT 2
40529: NEG
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40549: LD_ADDR_VAR 0 53
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: LD_INT 2
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: LD_INT 2
40645: NEG
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: LD_INT 1
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 2
40684: PUSH
40685: LD_INT 2
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: LD_INT 2
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 2
40725: NEG
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 2
40736: NEG
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 2
40748: NEG
40749: PUSH
40750: LD_INT 2
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40779: LD_ADDR_VAR 0 54
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: LD_INT 2
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: LD_INT 2
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: LD_INT 1
40886: NEG
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 2
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 2
40914: PUSH
40915: LD_INT 2
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: PUSH
40925: LD_INT 2
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: LD_INT 2
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 1
40944: NEG
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 2
40955: NEG
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 2
40966: NEG
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 2
40978: NEG
40979: PUSH
40980: LD_INT 2
40982: NEG
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41009: LD_ADDR_VAR 0 55
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 1
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: LD_INT 2
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: LD_INT 2
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 2
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: LD_INT 2
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: LD_INT 2
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 2
41185: NEG
41186: PUSH
41187: LD_INT 0
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 2
41196: NEG
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 2
41208: NEG
41209: PUSH
41210: LD_INT 2
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41239: LD_ADDR_VAR 0 56
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: NEG
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: LD_INT 2
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: LD_INT 2
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: LD_INT 1
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 2
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 2
41364: PUSH
41365: LD_INT 1
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 2
41374: PUSH
41375: LD_INT 2
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: PUSH
41385: LD_INT 2
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: LD_INT 2
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 2
41415: NEG
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 2
41426: NEG
41427: PUSH
41428: LD_INT 1
41430: NEG
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 2
41438: NEG
41439: PUSH
41440: LD_INT 2
41442: NEG
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41469: LD_ADDR_VAR 0 57
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: NEG
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 1
41550: NEG
41551: PUSH
41552: LD_INT 2
41554: NEG
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 2
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 2
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 2
41604: PUSH
41605: LD_INT 2
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: LD_INT 2
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 2
41645: NEG
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 2
41656: NEG
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 2
41668: NEG
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41699: LD_ADDR_VAR 0 58
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 1
41719: NEG
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 1
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 2
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 2
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: LD_INT 2
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 2
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 2
41875: NEG
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 2
41886: NEG
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 2
41898: NEG
41899: PUSH
41900: LD_INT 2
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41929: LD_ADDR_VAR 0 59
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: LD_INT 1
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42017: LD_ADDR_VAR 0 60
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42105: LD_ADDR_VAR 0 61
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42193: LD_ADDR_VAR 0 62
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42281: LD_ADDR_VAR 0 63
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42369: LD_ADDR_VAR 0 64
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: ST_TO_ADDR
// end ; 1 :
42457: GO 48354
42459: LD_INT 1
42461: DOUBLE
42462: EQUAL
42463: IFTRUE 42467
42465: GO 45090
42467: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42468: LD_ADDR_VAR 0 11
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: PUSH
42477: LD_INT 3
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 3
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: LD_INT 2
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: LIST
42511: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42512: LD_ADDR_VAR 0 12
42516: PUSH
42517: LD_INT 2
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 3
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 3
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: LIST
42552: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42553: LD_ADDR_VAR 0 13
42557: PUSH
42558: LD_INT 3
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 3
42570: PUSH
42571: LD_INT 3
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 2
42580: PUSH
42581: LD_INT 3
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: LIST
42592: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42593: LD_ADDR_VAR 0 14
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: LD_INT 3
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: LD_INT 3
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: LD_INT 2
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: LIST
42633: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42634: LD_ADDR_VAR 0 15
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 3
42652: NEG
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 3
42663: NEG
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: LIST
42677: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42678: LD_ADDR_VAR 0 16
42682: PUSH
42683: LD_INT 2
42685: NEG
42686: PUSH
42687: LD_INT 3
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 3
42697: NEG
42698: PUSH
42699: LD_INT 2
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 3
42709: NEG
42710: PUSH
42711: LD_INT 3
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: LIST
42723: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42724: LD_ADDR_VAR 0 17
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: LD_INT 3
42735: NEG
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: LD_INT 3
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: LD_INT 2
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: LIST
42767: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42768: LD_ADDR_VAR 0 18
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 3
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 3
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: LIST
42808: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42809: LD_ADDR_VAR 0 19
42813: PUSH
42814: LD_INT 3
42816: PUSH
42817: LD_INT 2
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 3
42826: PUSH
42827: LD_INT 3
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: LD_INT 3
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: LIST
42848: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42849: LD_ADDR_VAR 0 20
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: LD_INT 3
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: LD_INT 3
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: LD_INT 2
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: LIST
42889: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42890: LD_ADDR_VAR 0 21
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 3
42908: NEG
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 3
42919: NEG
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: LIST
42933: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42934: LD_ADDR_VAR 0 22
42938: PUSH
42939: LD_INT 2
42941: NEG
42942: PUSH
42943: LD_INT 3
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 3
42953: NEG
42954: PUSH
42955: LD_INT 2
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 3
42965: NEG
42966: PUSH
42967: LD_INT 3
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42980: LD_ADDR_VAR 0 23
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: LD_INT 3
42990: NEG
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: LD_INT 4
43002: NEG
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: LD_INT 3
43013: NEG
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: LIST
43023: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43024: LD_ADDR_VAR 0 24
43028: PUSH
43029: LD_INT 3
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 3
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 4
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: LIST
43064: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43065: LD_ADDR_VAR 0 25
43069: PUSH
43070: LD_INT 3
43072: PUSH
43073: LD_INT 3
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 4
43082: PUSH
43083: LD_INT 3
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 3
43092: PUSH
43093: LD_INT 4
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: LIST
43104: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43105: LD_ADDR_VAR 0 26
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: LD_INT 3
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: LD_INT 4
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: LD_INT 3
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: LIST
43145: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43146: LD_ADDR_VAR 0 27
43150: PUSH
43151: LD_INT 3
43153: NEG
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 3
43164: NEG
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 4
43175: NEG
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: LIST
43189: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43190: LD_ADDR_VAR 0 28
43194: PUSH
43195: LD_INT 3
43197: NEG
43198: PUSH
43199: LD_INT 3
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 3
43209: NEG
43210: PUSH
43211: LD_INT 4
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 4
43221: NEG
43222: PUSH
43223: LD_INT 3
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: LIST
43235: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43236: LD_ADDR_VAR 0 29
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: LD_INT 3
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: LD_INT 3
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: LD_INT 2
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: LD_INT 4
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 4
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: LD_INT 3
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: LD_INT 5
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: LD_INT 5
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: LD_INT 4
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: LD_INT 6
43349: NEG
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: LD_INT 6
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: LD_INT 5
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43391: LD_ADDR_VAR 0 30
43395: PUSH
43396: LD_INT 2
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 3
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 3
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 3
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 4
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 4
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 4
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 5
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 5
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 5
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 6
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 6
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43534: LD_ADDR_VAR 0 31
43538: PUSH
43539: LD_INT 3
43541: PUSH
43542: LD_INT 2
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 3
43551: PUSH
43552: LD_INT 3
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: LD_INT 3
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 4
43571: PUSH
43572: LD_INT 3
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 4
43581: PUSH
43582: LD_INT 4
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 3
43591: PUSH
43592: LD_INT 4
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 5
43601: PUSH
43602: LD_INT 4
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 5
43611: PUSH
43612: LD_INT 5
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 4
43621: PUSH
43622: LD_INT 5
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 6
43631: PUSH
43632: LD_INT 5
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 6
43641: PUSH
43642: LD_INT 6
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 5
43651: PUSH
43652: LD_INT 6
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43673: LD_ADDR_VAR 0 32
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: LD_INT 3
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: LD_INT 3
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: NEG
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: LD_INT 4
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: LD_INT 4
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: LD_INT 3
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: LD_INT 5
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: LD_INT 5
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: LD_INT 4
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: LD_INT 6
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: LD_INT 6
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: LD_INT 5
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43816: LD_ADDR_VAR 0 33
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 3
43834: NEG
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 3
43845: NEG
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 3
43857: NEG
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 4
43868: NEG
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 4
43879: NEG
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 4
43891: NEG
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 5
43902: NEG
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 5
43913: NEG
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 5
43925: NEG
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 6
43936: NEG
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 6
43947: NEG
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43971: LD_ADDR_VAR 0 34
43975: PUSH
43976: LD_INT 2
43978: NEG
43979: PUSH
43980: LD_INT 3
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 3
43990: NEG
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 3
44002: NEG
44003: PUSH
44004: LD_INT 3
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 3
44014: NEG
44015: PUSH
44016: LD_INT 4
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 4
44026: NEG
44027: PUSH
44028: LD_INT 3
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 4
44038: NEG
44039: PUSH
44040: LD_INT 4
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 4
44050: NEG
44051: PUSH
44052: LD_INT 5
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 5
44062: NEG
44063: PUSH
44064: LD_INT 4
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 5
44074: NEG
44075: PUSH
44076: LD_INT 5
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 5
44086: NEG
44087: PUSH
44088: LD_INT 6
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 6
44098: NEG
44099: PUSH
44100: LD_INT 5
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 6
44110: NEG
44111: PUSH
44112: LD_INT 6
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44134: LD_ADDR_VAR 0 41
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: LD_INT 2
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: LD_INT 3
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 2
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: LIST
44177: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44178: LD_ADDR_VAR 0 42
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 3
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: LIST
44218: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44219: LD_ADDR_VAR 0 43
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: LD_INT 2
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 3
44236: PUSH
44237: LD_INT 2
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 2
44246: PUSH
44247: LD_INT 3
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: LIST
44258: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44259: LD_ADDR_VAR 0 44
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 3
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: LIST
44299: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44300: LD_ADDR_VAR 0 45
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 3
44329: NEG
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: LIST
44343: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44344: LD_ADDR_VAR 0 46
44348: PUSH
44349: LD_INT 2
44351: NEG
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: NEG
44364: PUSH
44365: LD_INT 3
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 3
44375: NEG
44376: PUSH
44377: LD_INT 2
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: LIST
44389: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44390: LD_ADDR_VAR 0 47
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: LD_INT 3
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: LD_INT 3
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44423: LD_ADDR_VAR 0 48
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44454: LD_ADDR_VAR 0 49
44458: PUSH
44459: LD_INT 3
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 3
44471: PUSH
44472: LD_INT 2
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44483: LD_ADDR_VAR 0 50
44487: PUSH
44488: LD_INT 2
44490: PUSH
44491: LD_INT 3
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: LD_INT 3
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44512: LD_ADDR_VAR 0 51
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: LD_INT 2
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 2
44530: NEG
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44543: LD_ADDR_VAR 0 52
44547: PUSH
44548: LD_INT 3
44550: NEG
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 3
44562: NEG
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44576: LD_ADDR_VAR 0 53
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 3
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: LD_INT 3
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: LD_INT 2
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: LIST
44619: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44620: LD_ADDR_VAR 0 54
44624: PUSH
44625: LD_INT 2
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 3
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 3
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: LIST
44660: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44661: LD_ADDR_VAR 0 55
44665: PUSH
44666: LD_INT 3
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: LD_INT 3
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: LD_INT 3
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: LIST
44700: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44701: LD_ADDR_VAR 0 56
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: LD_INT 3
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: LD_INT 3
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: LD_INT 2
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: LIST
44741: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44742: LD_ADDR_VAR 0 57
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 3
44760: NEG
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 3
44771: NEG
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: LIST
44785: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44786: LD_ADDR_VAR 0 58
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: LD_INT 3
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 3
44805: NEG
44806: PUSH
44807: LD_INT 2
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 3
44817: NEG
44818: PUSH
44819: LD_INT 3
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: LIST
44831: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44832: LD_ADDR_VAR 0 59
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: LIST
44875: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44876: LD_ADDR_VAR 0 60
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 2
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: LIST
44916: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44917: LD_ADDR_VAR 0 61
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: LIST
44956: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44957: LD_ADDR_VAR 0 62
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: LD_INT 2
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: LD_INT 2
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: LIST
44997: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44998: LD_ADDR_VAR 0 63
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: LIST
45041: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45042: LD_ADDR_VAR 0 64
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: LD_INT 2
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: LD_INT 2
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: LIST
45087: ST_TO_ADDR
// end ; 2 :
45088: GO 48354
45090: LD_INT 2
45092: DOUBLE
45093: EQUAL
45094: IFTRUE 45098
45096: GO 48353
45098: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45099: LD_ADDR_VAR 0 29
45103: PUSH
45104: LD_INT 4
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 4
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 5
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 5
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 4
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 3
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 3
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 3
45178: PUSH
45179: LD_INT 2
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 5
45189: PUSH
45190: LD_INT 2
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 3
45199: PUSH
45200: LD_INT 3
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 3
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 4
45219: PUSH
45220: LD_INT 3
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 4
45229: PUSH
45230: LD_INT 4
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 3
45239: PUSH
45240: LD_INT 4
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: LD_INT 3
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 2
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 4
45269: PUSH
45270: LD_INT 2
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 4
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 4
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: LD_INT 4
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: LD_INT 5
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: LD_INT 5
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: LD_INT 4
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: LD_INT 3
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: LD_INT 5
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: NEG
45372: PUSH
45373: LD_INT 3
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 3
45382: NEG
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 3
45393: NEG
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 2
45416: NEG
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 3
45427: NEG
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 4
45438: NEG
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 4
45449: NEG
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 4
45461: NEG
45462: PUSH
45463: LD_INT 2
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 4
45484: NEG
45485: PUSH
45486: LD_INT 4
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 4
45496: NEG
45497: PUSH
45498: LD_INT 5
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 3
45508: NEG
45509: PUSH
45510: LD_INT 4
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 3
45520: NEG
45521: PUSH
45522: LD_INT 3
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 4
45532: NEG
45533: PUSH
45534: LD_INT 3
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 5
45544: NEG
45545: PUSH
45546: LD_INT 4
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 5
45556: NEG
45557: PUSH
45558: LD_INT 5
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 3
45568: NEG
45569: PUSH
45570: LD_INT 5
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 5
45580: NEG
45581: PUSH
45582: LD_INT 3
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45637: LD_ADDR_VAR 0 30
45641: PUSH
45642: LD_INT 4
45644: PUSH
45645: LD_INT 4
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 4
45654: PUSH
45655: LD_INT 3
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 5
45664: PUSH
45665: LD_INT 4
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 5
45674: PUSH
45675: LD_INT 5
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 4
45684: PUSH
45685: LD_INT 5
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 3
45694: PUSH
45695: LD_INT 4
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 3
45704: PUSH
45705: LD_INT 3
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 5
45714: PUSH
45715: LD_INT 3
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 3
45724: PUSH
45725: LD_INT 5
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: LD_INT 3
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 3
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: LD_INT 4
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 4
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: LD_INT 3
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: PUSH
45807: LD_INT 4
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: NEG
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 4
45827: NEG
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 4
45838: NEG
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 3
45850: NEG
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 3
45861: NEG
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 4
45872: NEG
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 5
45883: NEG
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 5
45894: NEG
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 5
45906: NEG
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 3
45918: NEG
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 3
45929: NEG
45930: PUSH
45931: LD_INT 3
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: LD_INT 4
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: LD_INT 3
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 2
45965: NEG
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 3
45977: NEG
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 4
45989: NEG
45990: PUSH
45991: LD_INT 3
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 4
46001: NEG
46002: PUSH
46003: LD_INT 4
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: NEG
46014: PUSH
46015: LD_INT 4
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 4
46025: NEG
46026: PUSH
46027: LD_INT 2
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 4
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: LD_INT 5
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: LD_INT 4
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: LD_INT 3
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 3
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: LD_INT 4
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: LD_INT 5
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: LD_INT 3
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: LD_INT 5
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46184: LD_ADDR_VAR 0 31
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: LD_INT 4
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 3
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 4
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 5
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 5
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: LD_INT 4
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 3
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: LD_INT 5
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: LD_INT 3
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 3
46284: NEG
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 3
46295: NEG
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 2
46307: NEG
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: NEG
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 3
46329: NEG
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 4
46340: NEG
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 4
46351: NEG
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 4
46363: NEG
46364: PUSH
46365: LD_INT 2
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: LD_INT 2
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 4
46386: NEG
46387: PUSH
46388: LD_INT 4
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 4
46398: NEG
46399: PUSH
46400: LD_INT 5
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 3
46410: NEG
46411: PUSH
46412: LD_INT 4
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 3
46422: NEG
46423: PUSH
46424: LD_INT 3
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 4
46434: NEG
46435: PUSH
46436: LD_INT 3
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 5
46446: NEG
46447: PUSH
46448: LD_INT 4
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 5
46458: NEG
46459: PUSH
46460: LD_INT 5
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 3
46470: NEG
46471: PUSH
46472: LD_INT 5
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 5
46482: NEG
46483: PUSH
46484: LD_INT 3
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 3
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 4
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: LD_INT 3
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: LD_INT 2
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: LD_INT 3
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: LD_INT 4
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: LD_INT 4
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 4
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 4
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 5
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 5
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 4
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 3
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 3
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: LD_INT 2
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 5
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46734: LD_ADDR_VAR 0 32
46738: PUSH
46739: LD_INT 4
46741: NEG
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 4
46752: NEG
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 3
46764: NEG
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 3
46775: NEG
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 4
46786: NEG
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 5
46797: NEG
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 5
46808: NEG
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 5
46820: NEG
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 3
46832: NEG
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 3
46843: NEG
46844: PUSH
46845: LD_INT 3
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 3
46855: NEG
46856: PUSH
46857: LD_INT 4
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 2
46867: NEG
46868: PUSH
46869: LD_INT 3
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 3
46891: NEG
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 4
46903: NEG
46904: PUSH
46905: LD_INT 3
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 4
46915: NEG
46916: PUSH
46917: LD_INT 4
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 2
46927: NEG
46928: PUSH
46929: LD_INT 4
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 4
46939: NEG
46940: PUSH
46941: LD_INT 2
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 4
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: LD_INT 5
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 4
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: LD_INT 3
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: LD_INT 4
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: LD_INT 5
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: LD_INT 3
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: LD_INT 5
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 3
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 3
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 4
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 4
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 3
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: LD_INT 2
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 4
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 4
47146: PUSH
47147: LD_INT 4
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 4
47156: PUSH
47157: LD_INT 3
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 5
47166: PUSH
47167: LD_INT 4
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 5
47176: PUSH
47177: LD_INT 5
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 4
47186: PUSH
47187: LD_INT 5
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 3
47196: PUSH
47197: LD_INT 4
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 3
47206: PUSH
47207: LD_INT 3
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 5
47216: PUSH
47217: LD_INT 3
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 3
47226: PUSH
47227: LD_INT 5
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47281: LD_ADDR_VAR 0 33
47285: PUSH
47286: LD_INT 4
47288: NEG
47289: PUSH
47290: LD_INT 4
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 4
47300: NEG
47301: PUSH
47302: LD_INT 5
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 3
47312: NEG
47313: PUSH
47314: LD_INT 4
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 3
47324: NEG
47325: PUSH
47326: LD_INT 3
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 4
47336: NEG
47337: PUSH
47338: LD_INT 3
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 5
47348: NEG
47349: PUSH
47350: LD_INT 4
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 5
47360: NEG
47361: PUSH
47362: LD_INT 5
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 3
47372: NEG
47373: PUSH
47374: LD_INT 5
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 5
47384: NEG
47385: PUSH
47386: LD_INT 3
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 3
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 4
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 3
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: LD_INT 2
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: LD_INT 3
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: LD_INT 4
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: LD_INT 2
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: LD_INT 4
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 4
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 4
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 5
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 5
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 4
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 3
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 3
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 3
47570: PUSH
47571: LD_INT 2
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 5
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 3
47591: PUSH
47592: LD_INT 3
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 3
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 4
47611: PUSH
47612: LD_INT 3
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 4
47621: PUSH
47622: LD_INT 4
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 3
47631: PUSH
47632: LD_INT 4
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: LD_INT 3
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 4
47661: PUSH
47662: LD_INT 2
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: LD_INT 4
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 4
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 3
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: LD_INT 4
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: LD_INT 5
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: LD_INT 5
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: LD_INT 4
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: LD_INT 3
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: LD_INT 5
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: LD_INT 3
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47819: LD_ADDR_VAR 0 34
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: LD_INT 4
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: LD_INT 5
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: LD_INT 4
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: LD_INT 3
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 3
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: LD_INT 4
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: LD_INT 5
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: LD_INT 3
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: LD_INT 5
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 3
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 3
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 4
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 4
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 3
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 4
48011: PUSH
48012: LD_INT 2
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 4
48021: PUSH
48022: LD_INT 4
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 4
48031: PUSH
48032: LD_INT 3
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 5
48041: PUSH
48042: LD_INT 4
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 5
48051: PUSH
48052: LD_INT 5
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 4
48061: PUSH
48062: LD_INT 5
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 3
48071: PUSH
48072: LD_INT 4
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 3
48081: PUSH
48082: LD_INT 3
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 5
48091: PUSH
48092: LD_INT 3
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 3
48101: PUSH
48102: LD_INT 5
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 3
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 3
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 4
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: LD_INT 4
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: LD_INT 3
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: LD_INT 4
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 4
48204: NEG
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 4
48215: NEG
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 3
48227: NEG
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 3
48238: NEG
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 4
48249: NEG
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 5
48260: NEG
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 5
48271: NEG
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 5
48283: NEG
48284: PUSH
48285: LD_INT 2
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 3
48295: NEG
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: ST_TO_ADDR
// end ; end ;
48351: GO 48354
48353: POP
// case btype of b_depot , b_warehouse :
48354: LD_VAR 0 1
48358: PUSH
48359: LD_INT 0
48361: DOUBLE
48362: EQUAL
48363: IFTRUE 48373
48365: LD_INT 1
48367: DOUBLE
48368: EQUAL
48369: IFTRUE 48373
48371: GO 48574
48373: POP
// case nation of nation_american :
48374: LD_VAR 0 5
48378: PUSH
48379: LD_INT 1
48381: DOUBLE
48382: EQUAL
48383: IFTRUE 48387
48385: GO 48443
48387: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48388: LD_ADDR_VAR 0 9
48392: PUSH
48393: LD_VAR 0 11
48397: PUSH
48398: LD_VAR 0 12
48402: PUSH
48403: LD_VAR 0 13
48407: PUSH
48408: LD_VAR 0 14
48412: PUSH
48413: LD_VAR 0 15
48417: PUSH
48418: LD_VAR 0 16
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: PUSH
48431: LD_VAR 0 4
48435: PUSH
48436: LD_INT 1
48438: PLUS
48439: ARRAY
48440: ST_TO_ADDR
48441: GO 48572
48443: LD_INT 2
48445: DOUBLE
48446: EQUAL
48447: IFTRUE 48451
48449: GO 48507
48451: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48452: LD_ADDR_VAR 0 9
48456: PUSH
48457: LD_VAR 0 17
48461: PUSH
48462: LD_VAR 0 18
48466: PUSH
48467: LD_VAR 0 19
48471: PUSH
48472: LD_VAR 0 20
48476: PUSH
48477: LD_VAR 0 21
48481: PUSH
48482: LD_VAR 0 22
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: PUSH
48495: LD_VAR 0 4
48499: PUSH
48500: LD_INT 1
48502: PLUS
48503: ARRAY
48504: ST_TO_ADDR
48505: GO 48572
48507: LD_INT 3
48509: DOUBLE
48510: EQUAL
48511: IFTRUE 48515
48513: GO 48571
48515: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48516: LD_ADDR_VAR 0 9
48520: PUSH
48521: LD_VAR 0 23
48525: PUSH
48526: LD_VAR 0 24
48530: PUSH
48531: LD_VAR 0 25
48535: PUSH
48536: LD_VAR 0 26
48540: PUSH
48541: LD_VAR 0 27
48545: PUSH
48546: LD_VAR 0 28
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: PUSH
48559: LD_VAR 0 4
48563: PUSH
48564: LD_INT 1
48566: PLUS
48567: ARRAY
48568: ST_TO_ADDR
48569: GO 48572
48571: POP
48572: GO 49127
48574: LD_INT 2
48576: DOUBLE
48577: EQUAL
48578: IFTRUE 48588
48580: LD_INT 3
48582: DOUBLE
48583: EQUAL
48584: IFTRUE 48588
48586: GO 48644
48588: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48589: LD_ADDR_VAR 0 9
48593: PUSH
48594: LD_VAR 0 29
48598: PUSH
48599: LD_VAR 0 30
48603: PUSH
48604: LD_VAR 0 31
48608: PUSH
48609: LD_VAR 0 32
48613: PUSH
48614: LD_VAR 0 33
48618: PUSH
48619: LD_VAR 0 34
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: PUSH
48632: LD_VAR 0 4
48636: PUSH
48637: LD_INT 1
48639: PLUS
48640: ARRAY
48641: ST_TO_ADDR
48642: GO 49127
48644: LD_INT 16
48646: DOUBLE
48647: EQUAL
48648: IFTRUE 48706
48650: LD_INT 17
48652: DOUBLE
48653: EQUAL
48654: IFTRUE 48706
48656: LD_INT 18
48658: DOUBLE
48659: EQUAL
48660: IFTRUE 48706
48662: LD_INT 19
48664: DOUBLE
48665: EQUAL
48666: IFTRUE 48706
48668: LD_INT 22
48670: DOUBLE
48671: EQUAL
48672: IFTRUE 48706
48674: LD_INT 20
48676: DOUBLE
48677: EQUAL
48678: IFTRUE 48706
48680: LD_INT 21
48682: DOUBLE
48683: EQUAL
48684: IFTRUE 48706
48686: LD_INT 23
48688: DOUBLE
48689: EQUAL
48690: IFTRUE 48706
48692: LD_INT 24
48694: DOUBLE
48695: EQUAL
48696: IFTRUE 48706
48698: LD_INT 25
48700: DOUBLE
48701: EQUAL
48702: IFTRUE 48706
48704: GO 48762
48706: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48707: LD_ADDR_VAR 0 9
48711: PUSH
48712: LD_VAR 0 35
48716: PUSH
48717: LD_VAR 0 36
48721: PUSH
48722: LD_VAR 0 37
48726: PUSH
48727: LD_VAR 0 38
48731: PUSH
48732: LD_VAR 0 39
48736: PUSH
48737: LD_VAR 0 40
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: PUSH
48750: LD_VAR 0 4
48754: PUSH
48755: LD_INT 1
48757: PLUS
48758: ARRAY
48759: ST_TO_ADDR
48760: GO 49127
48762: LD_INT 6
48764: DOUBLE
48765: EQUAL
48766: IFTRUE 48818
48768: LD_INT 7
48770: DOUBLE
48771: EQUAL
48772: IFTRUE 48818
48774: LD_INT 8
48776: DOUBLE
48777: EQUAL
48778: IFTRUE 48818
48780: LD_INT 13
48782: DOUBLE
48783: EQUAL
48784: IFTRUE 48818
48786: LD_INT 12
48788: DOUBLE
48789: EQUAL
48790: IFTRUE 48818
48792: LD_INT 15
48794: DOUBLE
48795: EQUAL
48796: IFTRUE 48818
48798: LD_INT 11
48800: DOUBLE
48801: EQUAL
48802: IFTRUE 48818
48804: LD_INT 14
48806: DOUBLE
48807: EQUAL
48808: IFTRUE 48818
48810: LD_INT 10
48812: DOUBLE
48813: EQUAL
48814: IFTRUE 48818
48816: GO 48874
48818: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48819: LD_ADDR_VAR 0 9
48823: PUSH
48824: LD_VAR 0 41
48828: PUSH
48829: LD_VAR 0 42
48833: PUSH
48834: LD_VAR 0 43
48838: PUSH
48839: LD_VAR 0 44
48843: PUSH
48844: LD_VAR 0 45
48848: PUSH
48849: LD_VAR 0 46
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: PUSH
48862: LD_VAR 0 4
48866: PUSH
48867: LD_INT 1
48869: PLUS
48870: ARRAY
48871: ST_TO_ADDR
48872: GO 49127
48874: LD_INT 36
48876: DOUBLE
48877: EQUAL
48878: IFTRUE 48882
48880: GO 48938
48882: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48883: LD_ADDR_VAR 0 9
48887: PUSH
48888: LD_VAR 0 47
48892: PUSH
48893: LD_VAR 0 48
48897: PUSH
48898: LD_VAR 0 49
48902: PUSH
48903: LD_VAR 0 50
48907: PUSH
48908: LD_VAR 0 51
48912: PUSH
48913: LD_VAR 0 52
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: PUSH
48926: LD_VAR 0 4
48930: PUSH
48931: LD_INT 1
48933: PLUS
48934: ARRAY
48935: ST_TO_ADDR
48936: GO 49127
48938: LD_INT 4
48940: DOUBLE
48941: EQUAL
48942: IFTRUE 48964
48944: LD_INT 5
48946: DOUBLE
48947: EQUAL
48948: IFTRUE 48964
48950: LD_INT 34
48952: DOUBLE
48953: EQUAL
48954: IFTRUE 48964
48956: LD_INT 37
48958: DOUBLE
48959: EQUAL
48960: IFTRUE 48964
48962: GO 49020
48964: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48965: LD_ADDR_VAR 0 9
48969: PUSH
48970: LD_VAR 0 53
48974: PUSH
48975: LD_VAR 0 54
48979: PUSH
48980: LD_VAR 0 55
48984: PUSH
48985: LD_VAR 0 56
48989: PUSH
48990: LD_VAR 0 57
48994: PUSH
48995: LD_VAR 0 58
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: PUSH
49008: LD_VAR 0 4
49012: PUSH
49013: LD_INT 1
49015: PLUS
49016: ARRAY
49017: ST_TO_ADDR
49018: GO 49127
49020: LD_INT 31
49022: DOUBLE
49023: EQUAL
49024: IFTRUE 49070
49026: LD_INT 32
49028: DOUBLE
49029: EQUAL
49030: IFTRUE 49070
49032: LD_INT 33
49034: DOUBLE
49035: EQUAL
49036: IFTRUE 49070
49038: LD_INT 27
49040: DOUBLE
49041: EQUAL
49042: IFTRUE 49070
49044: LD_INT 26
49046: DOUBLE
49047: EQUAL
49048: IFTRUE 49070
49050: LD_INT 28
49052: DOUBLE
49053: EQUAL
49054: IFTRUE 49070
49056: LD_INT 29
49058: DOUBLE
49059: EQUAL
49060: IFTRUE 49070
49062: LD_INT 30
49064: DOUBLE
49065: EQUAL
49066: IFTRUE 49070
49068: GO 49126
49070: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49071: LD_ADDR_VAR 0 9
49075: PUSH
49076: LD_VAR 0 59
49080: PUSH
49081: LD_VAR 0 60
49085: PUSH
49086: LD_VAR 0 61
49090: PUSH
49091: LD_VAR 0 62
49095: PUSH
49096: LD_VAR 0 63
49100: PUSH
49101: LD_VAR 0 64
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: PUSH
49114: LD_VAR 0 4
49118: PUSH
49119: LD_INT 1
49121: PLUS
49122: ARRAY
49123: ST_TO_ADDR
49124: GO 49127
49126: POP
// temp_list2 = [ ] ;
49127: LD_ADDR_VAR 0 10
49131: PUSH
49132: EMPTY
49133: ST_TO_ADDR
// for i in temp_list do
49134: LD_ADDR_VAR 0 8
49138: PUSH
49139: LD_VAR 0 9
49143: PUSH
49144: FOR_IN
49145: IFFALSE 49197
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49147: LD_ADDR_VAR 0 10
49151: PUSH
49152: LD_VAR 0 10
49156: PUSH
49157: LD_VAR 0 8
49161: PUSH
49162: LD_INT 1
49164: ARRAY
49165: PUSH
49166: LD_VAR 0 2
49170: PLUS
49171: PUSH
49172: LD_VAR 0 8
49176: PUSH
49177: LD_INT 2
49179: ARRAY
49180: PUSH
49181: LD_VAR 0 3
49185: PLUS
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: EMPTY
49192: LIST
49193: ADD
49194: ST_TO_ADDR
49195: GO 49144
49197: POP
49198: POP
// result = temp_list2 ;
49199: LD_ADDR_VAR 0 7
49203: PUSH
49204: LD_VAR 0 10
49208: ST_TO_ADDR
// end ;
49209: LD_VAR 0 7
49213: RET
// export function EnemyInRange ( unit , dist ) ; begin
49214: LD_INT 0
49216: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49217: LD_ADDR_VAR 0 3
49221: PUSH
49222: LD_VAR 0 1
49226: PPUSH
49227: CALL_OW 255
49231: PPUSH
49232: LD_VAR 0 1
49236: PPUSH
49237: CALL_OW 250
49241: PPUSH
49242: LD_VAR 0 1
49246: PPUSH
49247: CALL_OW 251
49251: PPUSH
49252: LD_VAR 0 2
49256: PPUSH
49257: CALL 22587 0 4
49261: PUSH
49262: LD_INT 4
49264: ARRAY
49265: ST_TO_ADDR
// end ;
49266: LD_VAR 0 3
49270: RET
// export function PlayerSeeMe ( unit ) ; begin
49271: LD_INT 0
49273: PPUSH
// result := See ( your_side , unit ) ;
49274: LD_ADDR_VAR 0 2
49278: PUSH
49279: LD_OWVAR 2
49283: PPUSH
49284: LD_VAR 0 1
49288: PPUSH
49289: CALL_OW 292
49293: ST_TO_ADDR
// end ;
49294: LD_VAR 0 2
49298: RET
// export function ReverseDir ( unit ) ; begin
49299: LD_INT 0
49301: PPUSH
// if not unit then
49302: LD_VAR 0 1
49306: NOT
49307: IFFALSE 49311
// exit ;
49309: GO 49334
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49311: LD_ADDR_VAR 0 2
49315: PUSH
49316: LD_VAR 0 1
49320: PPUSH
49321: CALL_OW 254
49325: PUSH
49326: LD_INT 3
49328: PLUS
49329: PUSH
49330: LD_INT 6
49332: MOD
49333: ST_TO_ADDR
// end ;
49334: LD_VAR 0 2
49338: RET
// export function ReverseArray ( array ) ; var i ; begin
49339: LD_INT 0
49341: PPUSH
49342: PPUSH
// if not array then
49343: LD_VAR 0 1
49347: NOT
49348: IFFALSE 49352
// exit ;
49350: GO 49407
// result := [ ] ;
49352: LD_ADDR_VAR 0 2
49356: PUSH
49357: EMPTY
49358: ST_TO_ADDR
// for i := array downto 1 do
49359: LD_ADDR_VAR 0 3
49363: PUSH
49364: DOUBLE
49365: LD_VAR 0 1
49369: INC
49370: ST_TO_ADDR
49371: LD_INT 1
49373: PUSH
49374: FOR_DOWNTO
49375: IFFALSE 49405
// result := Join ( result , array [ i ] ) ;
49377: LD_ADDR_VAR 0 2
49381: PUSH
49382: LD_VAR 0 2
49386: PPUSH
49387: LD_VAR 0 1
49391: PUSH
49392: LD_VAR 0 3
49396: ARRAY
49397: PPUSH
49398: CALL 54072 0 2
49402: ST_TO_ADDR
49403: GO 49374
49405: POP
49406: POP
// end ;
49407: LD_VAR 0 2
49411: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49412: LD_INT 0
49414: PPUSH
49415: PPUSH
49416: PPUSH
49417: PPUSH
49418: PPUSH
49419: PPUSH
// if not unit or not hexes then
49420: LD_VAR 0 1
49424: NOT
49425: PUSH
49426: LD_VAR 0 2
49430: NOT
49431: OR
49432: IFFALSE 49436
// exit ;
49434: GO 49559
// dist := 9999 ;
49436: LD_ADDR_VAR 0 5
49440: PUSH
49441: LD_INT 9999
49443: ST_TO_ADDR
// for i = 1 to hexes do
49444: LD_ADDR_VAR 0 4
49448: PUSH
49449: DOUBLE
49450: LD_INT 1
49452: DEC
49453: ST_TO_ADDR
49454: LD_VAR 0 2
49458: PUSH
49459: FOR_TO
49460: IFFALSE 49547
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49462: LD_ADDR_VAR 0 6
49466: PUSH
49467: LD_VAR 0 1
49471: PPUSH
49472: LD_VAR 0 2
49476: PUSH
49477: LD_VAR 0 4
49481: ARRAY
49482: PUSH
49483: LD_INT 1
49485: ARRAY
49486: PPUSH
49487: LD_VAR 0 2
49491: PUSH
49492: LD_VAR 0 4
49496: ARRAY
49497: PUSH
49498: LD_INT 2
49500: ARRAY
49501: PPUSH
49502: CALL_OW 297
49506: ST_TO_ADDR
// if tdist < dist then
49507: LD_VAR 0 6
49511: PUSH
49512: LD_VAR 0 5
49516: LESS
49517: IFFALSE 49545
// begin hex := hexes [ i ] ;
49519: LD_ADDR_VAR 0 8
49523: PUSH
49524: LD_VAR 0 2
49528: PUSH
49529: LD_VAR 0 4
49533: ARRAY
49534: ST_TO_ADDR
// dist := tdist ;
49535: LD_ADDR_VAR 0 5
49539: PUSH
49540: LD_VAR 0 6
49544: ST_TO_ADDR
// end ; end ;
49545: GO 49459
49547: POP
49548: POP
// result := hex ;
49549: LD_ADDR_VAR 0 3
49553: PUSH
49554: LD_VAR 0 8
49558: ST_TO_ADDR
// end ;
49559: LD_VAR 0 3
49563: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49564: LD_INT 0
49566: PPUSH
49567: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49568: LD_VAR 0 1
49572: NOT
49573: PUSH
49574: LD_VAR 0 1
49578: PUSH
49579: LD_INT 21
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 23
49591: PUSH
49592: LD_INT 2
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PPUSH
49603: CALL_OW 69
49607: IN
49608: NOT
49609: OR
49610: IFFALSE 49614
// exit ;
49612: GO 49661
// for i = 1 to 3 do
49614: LD_ADDR_VAR 0 3
49618: PUSH
49619: DOUBLE
49620: LD_INT 1
49622: DEC
49623: ST_TO_ADDR
49624: LD_INT 3
49626: PUSH
49627: FOR_TO
49628: IFFALSE 49659
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49630: LD_VAR 0 1
49634: PPUSH
49635: CALL_OW 250
49639: PPUSH
49640: LD_VAR 0 1
49644: PPUSH
49645: CALL_OW 251
49649: PPUSH
49650: LD_INT 1
49652: PPUSH
49653: CALL_OW 453
49657: GO 49627
49659: POP
49660: POP
// end ;
49661: LD_VAR 0 2
49665: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49666: LD_INT 0
49668: PPUSH
49669: PPUSH
49670: PPUSH
49671: PPUSH
49672: PPUSH
49673: PPUSH
// if not unit or not enemy_unit then
49674: LD_VAR 0 1
49678: NOT
49679: PUSH
49680: LD_VAR 0 2
49684: NOT
49685: OR
49686: IFFALSE 49690
// exit ;
49688: GO 50157
// if GetLives ( i ) < 250 then
49690: LD_VAR 0 4
49694: PPUSH
49695: CALL_OW 256
49699: PUSH
49700: LD_INT 250
49702: LESS
49703: IFFALSE 49716
// begin ComAutodestruct ( i ) ;
49705: LD_VAR 0 4
49709: PPUSH
49710: CALL 49564 0 1
// exit ;
49714: GO 50157
// end ; x := GetX ( enemy_unit ) ;
49716: LD_ADDR_VAR 0 7
49720: PUSH
49721: LD_VAR 0 2
49725: PPUSH
49726: CALL_OW 250
49730: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49731: LD_ADDR_VAR 0 8
49735: PUSH
49736: LD_VAR 0 2
49740: PPUSH
49741: CALL_OW 251
49745: ST_TO_ADDR
// if not x or not y then
49746: LD_VAR 0 7
49750: NOT
49751: PUSH
49752: LD_VAR 0 8
49756: NOT
49757: OR
49758: IFFALSE 49762
// exit ;
49760: GO 50157
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49762: LD_ADDR_VAR 0 6
49766: PUSH
49767: LD_VAR 0 7
49771: PPUSH
49772: LD_INT 0
49774: PPUSH
49775: LD_INT 4
49777: PPUSH
49778: CALL_OW 272
49782: PUSH
49783: LD_VAR 0 8
49787: PPUSH
49788: LD_INT 0
49790: PPUSH
49791: LD_INT 4
49793: PPUSH
49794: CALL_OW 273
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_VAR 0 7
49807: PPUSH
49808: LD_INT 1
49810: PPUSH
49811: LD_INT 4
49813: PPUSH
49814: CALL_OW 272
49818: PUSH
49819: LD_VAR 0 8
49823: PPUSH
49824: LD_INT 1
49826: PPUSH
49827: LD_INT 4
49829: PPUSH
49830: CALL_OW 273
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_VAR 0 7
49843: PPUSH
49844: LD_INT 2
49846: PPUSH
49847: LD_INT 4
49849: PPUSH
49850: CALL_OW 272
49854: PUSH
49855: LD_VAR 0 8
49859: PPUSH
49860: LD_INT 2
49862: PPUSH
49863: LD_INT 4
49865: PPUSH
49866: CALL_OW 273
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_VAR 0 7
49879: PPUSH
49880: LD_INT 3
49882: PPUSH
49883: LD_INT 4
49885: PPUSH
49886: CALL_OW 272
49890: PUSH
49891: LD_VAR 0 8
49895: PPUSH
49896: LD_INT 3
49898: PPUSH
49899: LD_INT 4
49901: PPUSH
49902: CALL_OW 273
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_VAR 0 7
49915: PPUSH
49916: LD_INT 4
49918: PPUSH
49919: LD_INT 4
49921: PPUSH
49922: CALL_OW 272
49926: PUSH
49927: LD_VAR 0 8
49931: PPUSH
49932: LD_INT 4
49934: PPUSH
49935: LD_INT 4
49937: PPUSH
49938: CALL_OW 273
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_VAR 0 7
49951: PPUSH
49952: LD_INT 5
49954: PPUSH
49955: LD_INT 4
49957: PPUSH
49958: CALL_OW 272
49962: PUSH
49963: LD_VAR 0 8
49967: PPUSH
49968: LD_INT 5
49970: PPUSH
49971: LD_INT 4
49973: PPUSH
49974: CALL_OW 273
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: ST_TO_ADDR
// for i = tmp downto 1 do
49991: LD_ADDR_VAR 0 4
49995: PUSH
49996: DOUBLE
49997: LD_VAR 0 6
50001: INC
50002: ST_TO_ADDR
50003: LD_INT 1
50005: PUSH
50006: FOR_DOWNTO
50007: IFFALSE 50108
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50009: LD_VAR 0 6
50013: PUSH
50014: LD_VAR 0 4
50018: ARRAY
50019: PUSH
50020: LD_INT 1
50022: ARRAY
50023: PPUSH
50024: LD_VAR 0 6
50028: PUSH
50029: LD_VAR 0 4
50033: ARRAY
50034: PUSH
50035: LD_INT 2
50037: ARRAY
50038: PPUSH
50039: CALL_OW 488
50043: NOT
50044: PUSH
50045: LD_VAR 0 6
50049: PUSH
50050: LD_VAR 0 4
50054: ARRAY
50055: PUSH
50056: LD_INT 1
50058: ARRAY
50059: PPUSH
50060: LD_VAR 0 6
50064: PUSH
50065: LD_VAR 0 4
50069: ARRAY
50070: PUSH
50071: LD_INT 2
50073: ARRAY
50074: PPUSH
50075: CALL_OW 428
50079: PUSH
50080: LD_INT 0
50082: NONEQUAL
50083: OR
50084: IFFALSE 50106
// tmp := Delete ( tmp , i ) ;
50086: LD_ADDR_VAR 0 6
50090: PUSH
50091: LD_VAR 0 6
50095: PPUSH
50096: LD_VAR 0 4
50100: PPUSH
50101: CALL_OW 3
50105: ST_TO_ADDR
50106: GO 50006
50108: POP
50109: POP
// j := GetClosestHex ( unit , tmp ) ;
50110: LD_ADDR_VAR 0 5
50114: PUSH
50115: LD_VAR 0 1
50119: PPUSH
50120: LD_VAR 0 6
50124: PPUSH
50125: CALL 49412 0 2
50129: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50130: LD_VAR 0 1
50134: PPUSH
50135: LD_VAR 0 5
50139: PUSH
50140: LD_INT 1
50142: ARRAY
50143: PPUSH
50144: LD_VAR 0 5
50148: PUSH
50149: LD_INT 2
50151: ARRAY
50152: PPUSH
50153: CALL_OW 111
// end ;
50157: LD_VAR 0 3
50161: RET
// export function PrepareApemanSoldier ( ) ; begin
50162: LD_INT 0
50164: PPUSH
// uc_nation := 0 ;
50165: LD_ADDR_OWVAR 21
50169: PUSH
50170: LD_INT 0
50172: ST_TO_ADDR
// hc_sex := sex_male ;
50173: LD_ADDR_OWVAR 27
50177: PUSH
50178: LD_INT 1
50180: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50181: LD_ADDR_OWVAR 28
50185: PUSH
50186: LD_INT 15
50188: ST_TO_ADDR
// hc_gallery :=  ;
50189: LD_ADDR_OWVAR 33
50193: PUSH
50194: LD_STRING 
50196: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50197: LD_ADDR_OWVAR 31
50201: PUSH
50202: LD_INT 0
50204: PPUSH
50205: LD_INT 3
50207: PPUSH
50208: CALL_OW 12
50212: PUSH
50213: LD_INT 0
50215: PPUSH
50216: LD_INT 3
50218: PPUSH
50219: CALL_OW 12
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: ST_TO_ADDR
// end ;
50236: LD_VAR 0 1
50240: RET
// export function PrepareApemanEngineer ( ) ; begin
50241: LD_INT 0
50243: PPUSH
// uc_nation := 0 ;
50244: LD_ADDR_OWVAR 21
50248: PUSH
50249: LD_INT 0
50251: ST_TO_ADDR
// hc_sex := sex_male ;
50252: LD_ADDR_OWVAR 27
50256: PUSH
50257: LD_INT 1
50259: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50260: LD_ADDR_OWVAR 28
50264: PUSH
50265: LD_INT 16
50267: ST_TO_ADDR
// hc_gallery :=  ;
50268: LD_ADDR_OWVAR 33
50272: PUSH
50273: LD_STRING 
50275: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50276: LD_ADDR_OWVAR 31
50280: PUSH
50281: LD_INT 0
50283: PPUSH
50284: LD_INT 3
50286: PPUSH
50287: CALL_OW 12
50291: PUSH
50292: LD_INT 0
50294: PPUSH
50295: LD_INT 3
50297: PPUSH
50298: CALL_OW 12
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: ST_TO_ADDR
// end ;
50315: LD_VAR 0 1
50319: RET
// export function PrepareApeman ( agressivity ) ; begin
50320: LD_INT 0
50322: PPUSH
// uc_side := 0 ;
50323: LD_ADDR_OWVAR 20
50327: PUSH
50328: LD_INT 0
50330: ST_TO_ADDR
// uc_nation := 0 ;
50331: LD_ADDR_OWVAR 21
50335: PUSH
50336: LD_INT 0
50338: ST_TO_ADDR
// hc_sex := sex_male ;
50339: LD_ADDR_OWVAR 27
50343: PUSH
50344: LD_INT 1
50346: ST_TO_ADDR
// hc_class := class_apeman ;
50347: LD_ADDR_OWVAR 28
50351: PUSH
50352: LD_INT 12
50354: ST_TO_ADDR
// hc_gallery :=  ;
50355: LD_ADDR_OWVAR 33
50359: PUSH
50360: LD_STRING 
50362: ST_TO_ADDR
// if agressivity = 0 then
50363: LD_VAR 0 1
50367: PUSH
50368: LD_INT 0
50370: EQUAL
50371: IFFALSE 50383
// hc_agressivity := 0 else
50373: LD_ADDR_OWVAR 35
50377: PUSH
50378: LD_INT 0
50380: ST_TO_ADDR
50381: GO 50404
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50383: LD_ADDR_OWVAR 35
50387: PUSH
50388: LD_VAR 0 1
50392: NEG
50393: PPUSH
50394: LD_VAR 0 1
50398: PPUSH
50399: CALL_OW 12
50403: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50404: LD_ADDR_OWVAR 31
50408: PUSH
50409: LD_INT 0
50411: PPUSH
50412: LD_INT 3
50414: PPUSH
50415: CALL_OW 12
50419: PUSH
50420: LD_INT 0
50422: PPUSH
50423: LD_INT 3
50425: PPUSH
50426: CALL_OW 12
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: ST_TO_ADDR
// end ;
50443: LD_VAR 0 2
50447: RET
// export function PrepareTiger ( agressivity ) ; begin
50448: LD_INT 0
50450: PPUSH
// uc_side := 0 ;
50451: LD_ADDR_OWVAR 20
50455: PUSH
50456: LD_INT 0
50458: ST_TO_ADDR
// uc_nation := 0 ;
50459: LD_ADDR_OWVAR 21
50463: PUSH
50464: LD_INT 0
50466: ST_TO_ADDR
// hc_class := class_tiger ;
50467: LD_ADDR_OWVAR 28
50471: PUSH
50472: LD_INT 14
50474: ST_TO_ADDR
// hc_gallery :=  ;
50475: LD_ADDR_OWVAR 33
50479: PUSH
50480: LD_STRING 
50482: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50483: LD_ADDR_OWVAR 35
50487: PUSH
50488: LD_VAR 0 1
50492: NEG
50493: PPUSH
50494: LD_VAR 0 1
50498: PPUSH
50499: CALL_OW 12
50503: ST_TO_ADDR
// end ;
50504: LD_VAR 0 2
50508: RET
// export function PrepareEnchidna ( ) ; begin
50509: LD_INT 0
50511: PPUSH
// uc_side := 0 ;
50512: LD_ADDR_OWVAR 20
50516: PUSH
50517: LD_INT 0
50519: ST_TO_ADDR
// uc_nation := 0 ;
50520: LD_ADDR_OWVAR 21
50524: PUSH
50525: LD_INT 0
50527: ST_TO_ADDR
// hc_class := class_baggie ;
50528: LD_ADDR_OWVAR 28
50532: PUSH
50533: LD_INT 13
50535: ST_TO_ADDR
// hc_gallery :=  ;
50536: LD_ADDR_OWVAR 33
50540: PUSH
50541: LD_STRING 
50543: ST_TO_ADDR
// end ;
50544: LD_VAR 0 1
50548: RET
// export function PrepareFrog ( ) ; begin
50549: LD_INT 0
50551: PPUSH
// uc_side := 0 ;
50552: LD_ADDR_OWVAR 20
50556: PUSH
50557: LD_INT 0
50559: ST_TO_ADDR
// uc_nation := 0 ;
50560: LD_ADDR_OWVAR 21
50564: PUSH
50565: LD_INT 0
50567: ST_TO_ADDR
// hc_class := class_frog ;
50568: LD_ADDR_OWVAR 28
50572: PUSH
50573: LD_INT 19
50575: ST_TO_ADDR
// hc_gallery :=  ;
50576: LD_ADDR_OWVAR 33
50580: PUSH
50581: LD_STRING 
50583: ST_TO_ADDR
// end ;
50584: LD_VAR 0 1
50588: RET
// export function PrepareFish ( ) ; begin
50589: LD_INT 0
50591: PPUSH
// uc_side := 0 ;
50592: LD_ADDR_OWVAR 20
50596: PUSH
50597: LD_INT 0
50599: ST_TO_ADDR
// uc_nation := 0 ;
50600: LD_ADDR_OWVAR 21
50604: PUSH
50605: LD_INT 0
50607: ST_TO_ADDR
// hc_class := class_fish ;
50608: LD_ADDR_OWVAR 28
50612: PUSH
50613: LD_INT 20
50615: ST_TO_ADDR
// hc_gallery :=  ;
50616: LD_ADDR_OWVAR 33
50620: PUSH
50621: LD_STRING 
50623: ST_TO_ADDR
// end ;
50624: LD_VAR 0 1
50628: RET
// export function PrepareBird ( ) ; begin
50629: LD_INT 0
50631: PPUSH
// uc_side := 0 ;
50632: LD_ADDR_OWVAR 20
50636: PUSH
50637: LD_INT 0
50639: ST_TO_ADDR
// uc_nation := 0 ;
50640: LD_ADDR_OWVAR 21
50644: PUSH
50645: LD_INT 0
50647: ST_TO_ADDR
// hc_class := class_phororhacos ;
50648: LD_ADDR_OWVAR 28
50652: PUSH
50653: LD_INT 18
50655: ST_TO_ADDR
// hc_gallery :=  ;
50656: LD_ADDR_OWVAR 33
50660: PUSH
50661: LD_STRING 
50663: ST_TO_ADDR
// end ;
50664: LD_VAR 0 1
50668: RET
// export function PrepareHorse ( ) ; begin
50669: LD_INT 0
50671: PPUSH
// uc_side := 0 ;
50672: LD_ADDR_OWVAR 20
50676: PUSH
50677: LD_INT 0
50679: ST_TO_ADDR
// uc_nation := 0 ;
50680: LD_ADDR_OWVAR 21
50684: PUSH
50685: LD_INT 0
50687: ST_TO_ADDR
// hc_class := class_horse ;
50688: LD_ADDR_OWVAR 28
50692: PUSH
50693: LD_INT 21
50695: ST_TO_ADDR
// hc_gallery :=  ;
50696: LD_ADDR_OWVAR 33
50700: PUSH
50701: LD_STRING 
50703: ST_TO_ADDR
// end ;
50704: LD_VAR 0 1
50708: RET
// export function PrepareMastodont ( ) ; begin
50709: LD_INT 0
50711: PPUSH
// uc_side := 0 ;
50712: LD_ADDR_OWVAR 20
50716: PUSH
50717: LD_INT 0
50719: ST_TO_ADDR
// uc_nation := 0 ;
50720: LD_ADDR_OWVAR 21
50724: PUSH
50725: LD_INT 0
50727: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50728: LD_ADDR_OWVAR 37
50732: PUSH
50733: LD_INT 31
50735: ST_TO_ADDR
// vc_control := control_rider ;
50736: LD_ADDR_OWVAR 38
50740: PUSH
50741: LD_INT 4
50743: ST_TO_ADDR
// end ;
50744: LD_VAR 0 1
50748: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50749: LD_INT 0
50751: PPUSH
50752: PPUSH
50753: PPUSH
// uc_side = 0 ;
50754: LD_ADDR_OWVAR 20
50758: PUSH
50759: LD_INT 0
50761: ST_TO_ADDR
// uc_nation = 0 ;
50762: LD_ADDR_OWVAR 21
50766: PUSH
50767: LD_INT 0
50769: ST_TO_ADDR
// InitHc_All ( ) ;
50770: CALL_OW 584
// InitVc ;
50774: CALL_OW 20
// if mastodonts then
50778: LD_VAR 0 6
50782: IFFALSE 50849
// for i = 1 to mastodonts do
50784: LD_ADDR_VAR 0 11
50788: PUSH
50789: DOUBLE
50790: LD_INT 1
50792: DEC
50793: ST_TO_ADDR
50794: LD_VAR 0 6
50798: PUSH
50799: FOR_TO
50800: IFFALSE 50847
// begin vc_chassis := 31 ;
50802: LD_ADDR_OWVAR 37
50806: PUSH
50807: LD_INT 31
50809: ST_TO_ADDR
// vc_control := control_rider ;
50810: LD_ADDR_OWVAR 38
50814: PUSH
50815: LD_INT 4
50817: ST_TO_ADDR
// animal := CreateVehicle ;
50818: LD_ADDR_VAR 0 12
50822: PUSH
50823: CALL_OW 45
50827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50828: LD_VAR 0 12
50832: PPUSH
50833: LD_VAR 0 8
50837: PPUSH
50838: LD_INT 0
50840: PPUSH
50841: CALL 52977 0 3
// end ;
50845: GO 50799
50847: POP
50848: POP
// if horses then
50849: LD_VAR 0 5
50853: IFFALSE 50920
// for i = 1 to horses do
50855: LD_ADDR_VAR 0 11
50859: PUSH
50860: DOUBLE
50861: LD_INT 1
50863: DEC
50864: ST_TO_ADDR
50865: LD_VAR 0 5
50869: PUSH
50870: FOR_TO
50871: IFFALSE 50918
// begin hc_class := 21 ;
50873: LD_ADDR_OWVAR 28
50877: PUSH
50878: LD_INT 21
50880: ST_TO_ADDR
// hc_gallery :=  ;
50881: LD_ADDR_OWVAR 33
50885: PUSH
50886: LD_STRING 
50888: ST_TO_ADDR
// animal := CreateHuman ;
50889: LD_ADDR_VAR 0 12
50893: PUSH
50894: CALL_OW 44
50898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50899: LD_VAR 0 12
50903: PPUSH
50904: LD_VAR 0 8
50908: PPUSH
50909: LD_INT 0
50911: PPUSH
50912: CALL 52977 0 3
// end ;
50916: GO 50870
50918: POP
50919: POP
// if birds then
50920: LD_VAR 0 1
50924: IFFALSE 50991
// for i = 1 to birds do
50926: LD_ADDR_VAR 0 11
50930: PUSH
50931: DOUBLE
50932: LD_INT 1
50934: DEC
50935: ST_TO_ADDR
50936: LD_VAR 0 1
50940: PUSH
50941: FOR_TO
50942: IFFALSE 50989
// begin hc_class := 18 ;
50944: LD_ADDR_OWVAR 28
50948: PUSH
50949: LD_INT 18
50951: ST_TO_ADDR
// hc_gallery =  ;
50952: LD_ADDR_OWVAR 33
50956: PUSH
50957: LD_STRING 
50959: ST_TO_ADDR
// animal := CreateHuman ;
50960: LD_ADDR_VAR 0 12
50964: PUSH
50965: CALL_OW 44
50969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50970: LD_VAR 0 12
50974: PPUSH
50975: LD_VAR 0 8
50979: PPUSH
50980: LD_INT 0
50982: PPUSH
50983: CALL 52977 0 3
// end ;
50987: GO 50941
50989: POP
50990: POP
// if tigers then
50991: LD_VAR 0 2
50995: IFFALSE 51079
// for i = 1 to tigers do
50997: LD_ADDR_VAR 0 11
51001: PUSH
51002: DOUBLE
51003: LD_INT 1
51005: DEC
51006: ST_TO_ADDR
51007: LD_VAR 0 2
51011: PUSH
51012: FOR_TO
51013: IFFALSE 51077
// begin hc_class = class_tiger ;
51015: LD_ADDR_OWVAR 28
51019: PUSH
51020: LD_INT 14
51022: ST_TO_ADDR
// hc_gallery =  ;
51023: LD_ADDR_OWVAR 33
51027: PUSH
51028: LD_STRING 
51030: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51031: LD_ADDR_OWVAR 35
51035: PUSH
51036: LD_INT 7
51038: NEG
51039: PPUSH
51040: LD_INT 7
51042: PPUSH
51043: CALL_OW 12
51047: ST_TO_ADDR
// animal := CreateHuman ;
51048: LD_ADDR_VAR 0 12
51052: PUSH
51053: CALL_OW 44
51057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51058: LD_VAR 0 12
51062: PPUSH
51063: LD_VAR 0 8
51067: PPUSH
51068: LD_INT 0
51070: PPUSH
51071: CALL 52977 0 3
// end ;
51075: GO 51012
51077: POP
51078: POP
// if apemans then
51079: LD_VAR 0 3
51083: IFFALSE 51206
// for i = 1 to apemans do
51085: LD_ADDR_VAR 0 11
51089: PUSH
51090: DOUBLE
51091: LD_INT 1
51093: DEC
51094: ST_TO_ADDR
51095: LD_VAR 0 3
51099: PUSH
51100: FOR_TO
51101: IFFALSE 51204
// begin hc_class = class_apeman ;
51103: LD_ADDR_OWVAR 28
51107: PUSH
51108: LD_INT 12
51110: ST_TO_ADDR
// hc_gallery =  ;
51111: LD_ADDR_OWVAR 33
51115: PUSH
51116: LD_STRING 
51118: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51119: LD_ADDR_OWVAR 35
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PPUSH
51128: LD_INT 2
51130: PPUSH
51131: CALL_OW 12
51135: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51136: LD_ADDR_OWVAR 31
51140: PUSH
51141: LD_INT 1
51143: PPUSH
51144: LD_INT 3
51146: PPUSH
51147: CALL_OW 12
51151: PUSH
51152: LD_INT 1
51154: PPUSH
51155: LD_INT 3
51157: PPUSH
51158: CALL_OW 12
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: ST_TO_ADDR
// animal := CreateHuman ;
51175: LD_ADDR_VAR 0 12
51179: PUSH
51180: CALL_OW 44
51184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51185: LD_VAR 0 12
51189: PPUSH
51190: LD_VAR 0 8
51194: PPUSH
51195: LD_INT 0
51197: PPUSH
51198: CALL 52977 0 3
// end ;
51202: GO 51100
51204: POP
51205: POP
// if enchidnas then
51206: LD_VAR 0 4
51210: IFFALSE 51277
// for i = 1 to enchidnas do
51212: LD_ADDR_VAR 0 11
51216: PUSH
51217: DOUBLE
51218: LD_INT 1
51220: DEC
51221: ST_TO_ADDR
51222: LD_VAR 0 4
51226: PUSH
51227: FOR_TO
51228: IFFALSE 51275
// begin hc_class = 13 ;
51230: LD_ADDR_OWVAR 28
51234: PUSH
51235: LD_INT 13
51237: ST_TO_ADDR
// hc_gallery =  ;
51238: LD_ADDR_OWVAR 33
51242: PUSH
51243: LD_STRING 
51245: ST_TO_ADDR
// animal := CreateHuman ;
51246: LD_ADDR_VAR 0 12
51250: PUSH
51251: CALL_OW 44
51255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51256: LD_VAR 0 12
51260: PPUSH
51261: LD_VAR 0 8
51265: PPUSH
51266: LD_INT 0
51268: PPUSH
51269: CALL 52977 0 3
// end ;
51273: GO 51227
51275: POP
51276: POP
// if fishes then
51277: LD_VAR 0 7
51281: IFFALSE 51348
// for i = 1 to fishes do
51283: LD_ADDR_VAR 0 11
51287: PUSH
51288: DOUBLE
51289: LD_INT 1
51291: DEC
51292: ST_TO_ADDR
51293: LD_VAR 0 7
51297: PUSH
51298: FOR_TO
51299: IFFALSE 51346
// begin hc_class = 20 ;
51301: LD_ADDR_OWVAR 28
51305: PUSH
51306: LD_INT 20
51308: ST_TO_ADDR
// hc_gallery =  ;
51309: LD_ADDR_OWVAR 33
51313: PUSH
51314: LD_STRING 
51316: ST_TO_ADDR
// animal := CreateHuman ;
51317: LD_ADDR_VAR 0 12
51321: PUSH
51322: CALL_OW 44
51326: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51327: LD_VAR 0 12
51331: PPUSH
51332: LD_VAR 0 9
51336: PPUSH
51337: LD_INT 0
51339: PPUSH
51340: CALL 52977 0 3
// end ;
51344: GO 51298
51346: POP
51347: POP
// end ;
51348: LD_VAR 0 10
51352: RET
// export function WantHeal ( sci , unit ) ; begin
51353: LD_INT 0
51355: PPUSH
// if GetTaskList ( sci ) > 0 then
51356: LD_VAR 0 1
51360: PPUSH
51361: CALL_OW 437
51365: PUSH
51366: LD_INT 0
51368: GREATER
51369: IFFALSE 51439
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51371: LD_VAR 0 1
51375: PPUSH
51376: CALL_OW 437
51380: PUSH
51381: LD_INT 1
51383: ARRAY
51384: PUSH
51385: LD_INT 1
51387: ARRAY
51388: PUSH
51389: LD_STRING l
51391: EQUAL
51392: PUSH
51393: LD_VAR 0 1
51397: PPUSH
51398: CALL_OW 437
51402: PUSH
51403: LD_INT 1
51405: ARRAY
51406: PUSH
51407: LD_INT 4
51409: ARRAY
51410: PUSH
51411: LD_VAR 0 2
51415: EQUAL
51416: AND
51417: IFFALSE 51429
// result := true else
51419: LD_ADDR_VAR 0 3
51423: PUSH
51424: LD_INT 1
51426: ST_TO_ADDR
51427: GO 51437
// result := false ;
51429: LD_ADDR_VAR 0 3
51433: PUSH
51434: LD_INT 0
51436: ST_TO_ADDR
// end else
51437: GO 51447
// result := false ;
51439: LD_ADDR_VAR 0 3
51443: PUSH
51444: LD_INT 0
51446: ST_TO_ADDR
// end ;
51447: LD_VAR 0 3
51451: RET
// export function HealTarget ( sci ) ; begin
51452: LD_INT 0
51454: PPUSH
// if not sci then
51455: LD_VAR 0 1
51459: NOT
51460: IFFALSE 51464
// exit ;
51462: GO 51529
// result := 0 ;
51464: LD_ADDR_VAR 0 2
51468: PUSH
51469: LD_INT 0
51471: ST_TO_ADDR
// if GetTaskList ( sci ) then
51472: LD_VAR 0 1
51476: PPUSH
51477: CALL_OW 437
51481: IFFALSE 51529
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51483: LD_VAR 0 1
51487: PPUSH
51488: CALL_OW 437
51492: PUSH
51493: LD_INT 1
51495: ARRAY
51496: PUSH
51497: LD_INT 1
51499: ARRAY
51500: PUSH
51501: LD_STRING l
51503: EQUAL
51504: IFFALSE 51529
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51506: LD_ADDR_VAR 0 2
51510: PUSH
51511: LD_VAR 0 1
51515: PPUSH
51516: CALL_OW 437
51520: PUSH
51521: LD_INT 1
51523: ARRAY
51524: PUSH
51525: LD_INT 4
51527: ARRAY
51528: ST_TO_ADDR
// end ;
51529: LD_VAR 0 2
51533: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51534: LD_INT 0
51536: PPUSH
51537: PPUSH
51538: PPUSH
51539: PPUSH
// if not base_units then
51540: LD_VAR 0 1
51544: NOT
51545: IFFALSE 51549
// exit ;
51547: GO 51636
// result := false ;
51549: LD_ADDR_VAR 0 2
51553: PUSH
51554: LD_INT 0
51556: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51557: LD_ADDR_VAR 0 5
51561: PUSH
51562: LD_VAR 0 1
51566: PPUSH
51567: LD_INT 21
51569: PUSH
51570: LD_INT 3
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PPUSH
51577: CALL_OW 72
51581: ST_TO_ADDR
// if not tmp then
51582: LD_VAR 0 5
51586: NOT
51587: IFFALSE 51591
// exit ;
51589: GO 51636
// for i in tmp do
51591: LD_ADDR_VAR 0 3
51595: PUSH
51596: LD_VAR 0 5
51600: PUSH
51601: FOR_IN
51602: IFFALSE 51634
// begin result := EnemyInRange ( i , 22 ) ;
51604: LD_ADDR_VAR 0 2
51608: PUSH
51609: LD_VAR 0 3
51613: PPUSH
51614: LD_INT 22
51616: PPUSH
51617: CALL 49214 0 2
51621: ST_TO_ADDR
// if result then
51622: LD_VAR 0 2
51626: IFFALSE 51632
// exit ;
51628: POP
51629: POP
51630: GO 51636
// end ;
51632: GO 51601
51634: POP
51635: POP
// end ;
51636: LD_VAR 0 2
51640: RET
// export function FilterByTag ( units , tag ) ; begin
51641: LD_INT 0
51643: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51644: LD_ADDR_VAR 0 3
51648: PUSH
51649: LD_VAR 0 1
51653: PPUSH
51654: LD_INT 120
51656: PUSH
51657: LD_VAR 0 2
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PPUSH
51666: CALL_OW 72
51670: ST_TO_ADDR
// end ;
51671: LD_VAR 0 3
51675: RET
// export function IsDriver ( un ) ; begin
51676: LD_INT 0
51678: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51679: LD_ADDR_VAR 0 2
51683: PUSH
51684: LD_VAR 0 1
51688: PUSH
51689: LD_INT 55
51691: PUSH
51692: EMPTY
51693: LIST
51694: PPUSH
51695: CALL_OW 69
51699: IN
51700: ST_TO_ADDR
// end ;
51701: LD_VAR 0 2
51705: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51706: LD_INT 0
51708: PPUSH
51709: PPUSH
// list := [ ] ;
51710: LD_ADDR_VAR 0 5
51714: PUSH
51715: EMPTY
51716: ST_TO_ADDR
// case d of 0 :
51717: LD_VAR 0 3
51721: PUSH
51722: LD_INT 0
51724: DOUBLE
51725: EQUAL
51726: IFTRUE 51730
51728: GO 51863
51730: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51731: LD_ADDR_VAR 0 5
51735: PUSH
51736: LD_VAR 0 1
51740: PUSH
51741: LD_INT 4
51743: MINUS
51744: PUSH
51745: LD_VAR 0 2
51749: PUSH
51750: LD_INT 4
51752: MINUS
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: LIST
51761: PUSH
51762: LD_VAR 0 1
51766: PUSH
51767: LD_INT 3
51769: MINUS
51770: PUSH
51771: LD_VAR 0 2
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: LIST
51783: PUSH
51784: LD_VAR 0 1
51788: PUSH
51789: LD_INT 4
51791: PLUS
51792: PUSH
51793: LD_VAR 0 2
51797: PUSH
51798: LD_INT 4
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: LIST
51805: PUSH
51806: LD_VAR 0 1
51810: PUSH
51811: LD_INT 3
51813: PLUS
51814: PUSH
51815: LD_VAR 0 2
51819: PUSH
51820: LD_INT 3
51822: PLUS
51823: PUSH
51824: LD_INT 5
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: LIST
51831: PUSH
51832: LD_VAR 0 1
51836: PUSH
51837: LD_VAR 0 2
51841: PUSH
51842: LD_INT 4
51844: PLUS
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: LIST
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: ST_TO_ADDR
// end ; 1 :
51861: GO 52561
51863: LD_INT 1
51865: DOUBLE
51866: EQUAL
51867: IFTRUE 51871
51869: GO 52004
51871: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51872: LD_ADDR_VAR 0 5
51876: PUSH
51877: LD_VAR 0 1
51881: PUSH
51882: LD_VAR 0 2
51886: PUSH
51887: LD_INT 4
51889: MINUS
51890: PUSH
51891: LD_INT 3
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: LIST
51898: PUSH
51899: LD_VAR 0 1
51903: PUSH
51904: LD_INT 3
51906: MINUS
51907: PUSH
51908: LD_VAR 0 2
51912: PUSH
51913: LD_INT 3
51915: MINUS
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: LIST
51924: PUSH
51925: LD_VAR 0 1
51929: PUSH
51930: LD_INT 4
51932: MINUS
51933: PUSH
51934: LD_VAR 0 2
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: LIST
51946: PUSH
51947: LD_VAR 0 1
51951: PUSH
51952: LD_VAR 0 2
51956: PUSH
51957: LD_INT 3
51959: PLUS
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: LIST
51968: PUSH
51969: LD_VAR 0 1
51973: PUSH
51974: LD_INT 4
51976: PLUS
51977: PUSH
51978: LD_VAR 0 2
51982: PUSH
51983: LD_INT 4
51985: PLUS
51986: PUSH
51987: LD_INT 5
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: LIST
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: ST_TO_ADDR
// end ; 2 :
52002: GO 52561
52004: LD_INT 2
52006: DOUBLE
52007: EQUAL
52008: IFTRUE 52012
52010: GO 52141
52012: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52013: LD_ADDR_VAR 0 5
52017: PUSH
52018: LD_VAR 0 1
52022: PUSH
52023: LD_VAR 0 2
52027: PUSH
52028: LD_INT 3
52030: MINUS
52031: PUSH
52032: LD_INT 3
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: PUSH
52040: LD_VAR 0 1
52044: PUSH
52045: LD_INT 4
52047: PLUS
52048: PUSH
52049: LD_VAR 0 2
52053: PUSH
52054: LD_INT 4
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: LIST
52061: PUSH
52062: LD_VAR 0 1
52066: PUSH
52067: LD_VAR 0 2
52071: PUSH
52072: LD_INT 4
52074: PLUS
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: LIST
52083: PUSH
52084: LD_VAR 0 1
52088: PUSH
52089: LD_INT 3
52091: MINUS
52092: PUSH
52093: LD_VAR 0 2
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: LIST
52105: PUSH
52106: LD_VAR 0 1
52110: PUSH
52111: LD_INT 4
52113: MINUS
52114: PUSH
52115: LD_VAR 0 2
52119: PUSH
52120: LD_INT 4
52122: MINUS
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: LIST
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: ST_TO_ADDR
// end ; 3 :
52139: GO 52561
52141: LD_INT 3
52143: DOUBLE
52144: EQUAL
52145: IFTRUE 52149
52147: GO 52282
52149: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52150: LD_ADDR_VAR 0 5
52154: PUSH
52155: LD_VAR 0 1
52159: PUSH
52160: LD_INT 3
52162: PLUS
52163: PUSH
52164: LD_VAR 0 2
52168: PUSH
52169: LD_INT 4
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: LIST
52176: PUSH
52177: LD_VAR 0 1
52181: PUSH
52182: LD_INT 4
52184: PLUS
52185: PUSH
52186: LD_VAR 0 2
52190: PUSH
52191: LD_INT 4
52193: PLUS
52194: PUSH
52195: LD_INT 5
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: LIST
52202: PUSH
52203: LD_VAR 0 1
52207: PUSH
52208: LD_INT 4
52210: MINUS
52211: PUSH
52212: LD_VAR 0 2
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: LIST
52224: PUSH
52225: LD_VAR 0 1
52229: PUSH
52230: LD_VAR 0 2
52234: PUSH
52235: LD_INT 4
52237: MINUS
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: LIST
52246: PUSH
52247: LD_VAR 0 1
52251: PUSH
52252: LD_INT 3
52254: MINUS
52255: PUSH
52256: LD_VAR 0 2
52260: PUSH
52261: LD_INT 3
52263: MINUS
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: ST_TO_ADDR
// end ; 4 :
52280: GO 52561
52282: LD_INT 4
52284: DOUBLE
52285: EQUAL
52286: IFTRUE 52290
52288: GO 52423
52290: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52291: LD_ADDR_VAR 0 5
52295: PUSH
52296: LD_VAR 0 1
52300: PUSH
52301: LD_VAR 0 2
52305: PUSH
52306: LD_INT 4
52308: PLUS
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: LIST
52317: PUSH
52318: LD_VAR 0 1
52322: PUSH
52323: LD_INT 3
52325: PLUS
52326: PUSH
52327: LD_VAR 0 2
52331: PUSH
52332: LD_INT 3
52334: PLUS
52335: PUSH
52336: LD_INT 5
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: LIST
52343: PUSH
52344: LD_VAR 0 1
52348: PUSH
52349: LD_INT 4
52351: PLUS
52352: PUSH
52353: LD_VAR 0 2
52357: PUSH
52358: LD_INT 4
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: LIST
52365: PUSH
52366: LD_VAR 0 1
52370: PUSH
52371: LD_VAR 0 2
52375: PUSH
52376: LD_INT 3
52378: MINUS
52379: PUSH
52380: LD_INT 3
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: PUSH
52388: LD_VAR 0 1
52392: PUSH
52393: LD_INT 4
52395: MINUS
52396: PUSH
52397: LD_VAR 0 2
52401: PUSH
52402: LD_INT 4
52404: MINUS
52405: PUSH
52406: LD_INT 2
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: LIST
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: ST_TO_ADDR
// end ; 5 :
52421: GO 52561
52423: LD_INT 5
52425: DOUBLE
52426: EQUAL
52427: IFTRUE 52431
52429: GO 52560
52431: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52432: LD_ADDR_VAR 0 5
52436: PUSH
52437: LD_VAR 0 1
52441: PUSH
52442: LD_INT 4
52444: MINUS
52445: PUSH
52446: LD_VAR 0 2
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: LIST
52458: PUSH
52459: LD_VAR 0 1
52463: PUSH
52464: LD_VAR 0 2
52468: PUSH
52469: LD_INT 4
52471: MINUS
52472: PUSH
52473: LD_INT 3
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: LIST
52480: PUSH
52481: LD_VAR 0 1
52485: PUSH
52486: LD_INT 4
52488: PLUS
52489: PUSH
52490: LD_VAR 0 2
52494: PUSH
52495: LD_INT 4
52497: PLUS
52498: PUSH
52499: LD_INT 5
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: LIST
52506: PUSH
52507: LD_VAR 0 1
52511: PUSH
52512: LD_INT 3
52514: PLUS
52515: PUSH
52516: LD_VAR 0 2
52520: PUSH
52521: LD_INT 4
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: LIST
52528: PUSH
52529: LD_VAR 0 1
52533: PUSH
52534: LD_VAR 0 2
52538: PUSH
52539: LD_INT 3
52541: PLUS
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: LIST
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: ST_TO_ADDR
// end ; end ;
52558: GO 52561
52560: POP
// result := list ;
52561: LD_ADDR_VAR 0 4
52565: PUSH
52566: LD_VAR 0 5
52570: ST_TO_ADDR
// end ;
52571: LD_VAR 0 4
52575: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52576: LD_INT 0
52578: PPUSH
52579: PPUSH
52580: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52581: LD_VAR 0 1
52585: NOT
52586: PUSH
52587: LD_VAR 0 2
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: LD_INT 2
52597: PUSH
52598: LD_INT 3
52600: PUSH
52601: LD_INT 4
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: IN
52610: NOT
52611: OR
52612: IFFALSE 52616
// exit ;
52614: GO 52699
// tmp := [ ] ;
52616: LD_ADDR_VAR 0 5
52620: PUSH
52621: EMPTY
52622: ST_TO_ADDR
// for i in units do
52623: LD_ADDR_VAR 0 4
52627: PUSH
52628: LD_VAR 0 1
52632: PUSH
52633: FOR_IN
52634: IFFALSE 52668
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52636: LD_ADDR_VAR 0 5
52640: PUSH
52641: LD_VAR 0 5
52645: PPUSH
52646: LD_VAR 0 4
52650: PPUSH
52651: LD_VAR 0 2
52655: PPUSH
52656: CALL_OW 259
52660: PPUSH
52661: CALL 54072 0 2
52665: ST_TO_ADDR
52666: GO 52633
52668: POP
52669: POP
// if not tmp then
52670: LD_VAR 0 5
52674: NOT
52675: IFFALSE 52679
// exit ;
52677: GO 52699
// result := SortListByListDesc ( units , tmp ) ;
52679: LD_ADDR_VAR 0 3
52683: PUSH
52684: LD_VAR 0 1
52688: PPUSH
52689: LD_VAR 0 5
52693: PPUSH
52694: CALL_OW 77
52698: ST_TO_ADDR
// end ;
52699: LD_VAR 0 3
52703: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52704: LD_INT 0
52706: PPUSH
52707: PPUSH
52708: PPUSH
// result := false ;
52709: LD_ADDR_VAR 0 3
52713: PUSH
52714: LD_INT 0
52716: ST_TO_ADDR
// if not building then
52717: LD_VAR 0 2
52721: NOT
52722: IFFALSE 52726
// exit ;
52724: GO 52864
// x := GetX ( building ) ;
52726: LD_ADDR_VAR 0 4
52730: PUSH
52731: LD_VAR 0 2
52735: PPUSH
52736: CALL_OW 250
52740: ST_TO_ADDR
// y := GetY ( building ) ;
52741: LD_ADDR_VAR 0 5
52745: PUSH
52746: LD_VAR 0 2
52750: PPUSH
52751: CALL_OW 251
52755: ST_TO_ADDR
// if not x or not y then
52756: LD_VAR 0 4
52760: NOT
52761: PUSH
52762: LD_VAR 0 5
52766: NOT
52767: OR
52768: IFFALSE 52772
// exit ;
52770: GO 52864
// if GetTaskList ( unit ) then
52772: LD_VAR 0 1
52776: PPUSH
52777: CALL_OW 437
52781: IFFALSE 52864
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52783: LD_STRING e
52785: PUSH
52786: LD_VAR 0 1
52790: PPUSH
52791: CALL_OW 437
52795: PUSH
52796: LD_INT 1
52798: ARRAY
52799: PUSH
52800: LD_INT 1
52802: ARRAY
52803: EQUAL
52804: PUSH
52805: LD_VAR 0 4
52809: PUSH
52810: LD_VAR 0 1
52814: PPUSH
52815: CALL_OW 437
52819: PUSH
52820: LD_INT 1
52822: ARRAY
52823: PUSH
52824: LD_INT 2
52826: ARRAY
52827: EQUAL
52828: AND
52829: PUSH
52830: LD_VAR 0 5
52834: PUSH
52835: LD_VAR 0 1
52839: PPUSH
52840: CALL_OW 437
52844: PUSH
52845: LD_INT 1
52847: ARRAY
52848: PUSH
52849: LD_INT 3
52851: ARRAY
52852: EQUAL
52853: AND
52854: IFFALSE 52864
// result := true end ;
52856: LD_ADDR_VAR 0 3
52860: PUSH
52861: LD_INT 1
52863: ST_TO_ADDR
// end ;
52864: LD_VAR 0 3
52868: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52869: LD_INT 0
52871: PPUSH
// result := false ;
52872: LD_ADDR_VAR 0 4
52876: PUSH
52877: LD_INT 0
52879: ST_TO_ADDR
// if GetTaskList ( unit ) then
52880: LD_VAR 0 1
52884: PPUSH
52885: CALL_OW 437
52889: IFFALSE 52972
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52891: LD_STRING M
52893: PUSH
52894: LD_VAR 0 1
52898: PPUSH
52899: CALL_OW 437
52903: PUSH
52904: LD_INT 1
52906: ARRAY
52907: PUSH
52908: LD_INT 1
52910: ARRAY
52911: EQUAL
52912: PUSH
52913: LD_VAR 0 2
52917: PUSH
52918: LD_VAR 0 1
52922: PPUSH
52923: CALL_OW 437
52927: PUSH
52928: LD_INT 1
52930: ARRAY
52931: PUSH
52932: LD_INT 2
52934: ARRAY
52935: EQUAL
52936: AND
52937: PUSH
52938: LD_VAR 0 3
52942: PUSH
52943: LD_VAR 0 1
52947: PPUSH
52948: CALL_OW 437
52952: PUSH
52953: LD_INT 1
52955: ARRAY
52956: PUSH
52957: LD_INT 3
52959: ARRAY
52960: EQUAL
52961: AND
52962: IFFALSE 52972
// result := true ;
52964: LD_ADDR_VAR 0 4
52968: PUSH
52969: LD_INT 1
52971: ST_TO_ADDR
// end ; end ;
52972: LD_VAR 0 4
52976: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52977: LD_INT 0
52979: PPUSH
52980: PPUSH
52981: PPUSH
52982: PPUSH
// if not unit or not area then
52983: LD_VAR 0 1
52987: NOT
52988: PUSH
52989: LD_VAR 0 2
52993: NOT
52994: OR
52995: IFFALSE 52999
// exit ;
52997: GO 53175
// tmp := AreaToList ( area , i ) ;
52999: LD_ADDR_VAR 0 6
53003: PUSH
53004: LD_VAR 0 2
53008: PPUSH
53009: LD_VAR 0 5
53013: PPUSH
53014: CALL_OW 517
53018: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53019: LD_ADDR_VAR 0 5
53023: PUSH
53024: DOUBLE
53025: LD_INT 1
53027: DEC
53028: ST_TO_ADDR
53029: LD_VAR 0 6
53033: PUSH
53034: LD_INT 1
53036: ARRAY
53037: PUSH
53038: FOR_TO
53039: IFFALSE 53173
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53041: LD_ADDR_VAR 0 7
53045: PUSH
53046: LD_VAR 0 6
53050: PUSH
53051: LD_INT 1
53053: ARRAY
53054: PUSH
53055: LD_VAR 0 5
53059: ARRAY
53060: PUSH
53061: LD_VAR 0 6
53065: PUSH
53066: LD_INT 2
53068: ARRAY
53069: PUSH
53070: LD_VAR 0 5
53074: ARRAY
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53080: LD_INT 92
53082: PUSH
53083: LD_VAR 0 7
53087: PUSH
53088: LD_INT 1
53090: ARRAY
53091: PUSH
53092: LD_VAR 0 7
53096: PUSH
53097: LD_INT 2
53099: ARRAY
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: PPUSH
53110: CALL_OW 69
53114: PUSH
53115: LD_INT 0
53117: EQUAL
53118: IFFALSE 53171
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53120: LD_VAR 0 1
53124: PPUSH
53125: LD_VAR 0 7
53129: PUSH
53130: LD_INT 1
53132: ARRAY
53133: PPUSH
53134: LD_VAR 0 7
53138: PUSH
53139: LD_INT 2
53141: ARRAY
53142: PPUSH
53143: LD_VAR 0 3
53147: PPUSH
53148: CALL_OW 48
// result := IsPlaced ( unit ) ;
53152: LD_ADDR_VAR 0 4
53156: PUSH
53157: LD_VAR 0 1
53161: PPUSH
53162: CALL_OW 305
53166: ST_TO_ADDR
// exit ;
53167: POP
53168: POP
53169: GO 53175
// end ; end ;
53171: GO 53038
53173: POP
53174: POP
// end ;
53175: LD_VAR 0 4
53179: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53180: LD_INT 0
53182: PPUSH
53183: PPUSH
53184: PPUSH
// if not side or side > 8 then
53185: LD_VAR 0 1
53189: NOT
53190: PUSH
53191: LD_VAR 0 1
53195: PUSH
53196: LD_INT 8
53198: GREATER
53199: OR
53200: IFFALSE 53204
// exit ;
53202: GO 53391
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53204: LD_ADDR_VAR 0 4
53208: PUSH
53209: LD_INT 22
53211: PUSH
53212: LD_VAR 0 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 21
53223: PUSH
53224: LD_INT 3
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PPUSH
53235: CALL_OW 69
53239: ST_TO_ADDR
// if not tmp then
53240: LD_VAR 0 4
53244: NOT
53245: IFFALSE 53249
// exit ;
53247: GO 53391
// enable_addtolog := true ;
53249: LD_ADDR_OWVAR 81
53253: PUSH
53254: LD_INT 1
53256: ST_TO_ADDR
// AddToLog ( [ ) ;
53257: LD_STRING [
53259: PPUSH
53260: CALL_OW 561
// for i in tmp do
53264: LD_ADDR_VAR 0 3
53268: PUSH
53269: LD_VAR 0 4
53273: PUSH
53274: FOR_IN
53275: IFFALSE 53382
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53277: LD_STRING [
53279: PUSH
53280: LD_VAR 0 3
53284: PPUSH
53285: CALL_OW 266
53289: STR
53290: PUSH
53291: LD_STRING , 
53293: STR
53294: PUSH
53295: LD_VAR 0 3
53299: PPUSH
53300: CALL_OW 250
53304: STR
53305: PUSH
53306: LD_STRING , 
53308: STR
53309: PUSH
53310: LD_VAR 0 3
53314: PPUSH
53315: CALL_OW 251
53319: STR
53320: PUSH
53321: LD_STRING , 
53323: STR
53324: PUSH
53325: LD_VAR 0 3
53329: PPUSH
53330: CALL_OW 254
53334: STR
53335: PUSH
53336: LD_STRING , 
53338: STR
53339: PUSH
53340: LD_VAR 0 3
53344: PPUSH
53345: LD_INT 1
53347: PPUSH
53348: CALL_OW 268
53352: STR
53353: PUSH
53354: LD_STRING , 
53356: STR
53357: PUSH
53358: LD_VAR 0 3
53362: PPUSH
53363: LD_INT 2
53365: PPUSH
53366: CALL_OW 268
53370: STR
53371: PUSH
53372: LD_STRING ],
53374: STR
53375: PPUSH
53376: CALL_OW 561
// end ;
53380: GO 53274
53382: POP
53383: POP
// AddToLog ( ]; ) ;
53384: LD_STRING ];
53386: PPUSH
53387: CALL_OW 561
// end ;
53391: LD_VAR 0 2
53395: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53396: LD_INT 0
53398: PPUSH
53399: PPUSH
53400: PPUSH
53401: PPUSH
53402: PPUSH
// if not area or not rate or not max then
53403: LD_VAR 0 1
53407: NOT
53408: PUSH
53409: LD_VAR 0 2
53413: NOT
53414: OR
53415: PUSH
53416: LD_VAR 0 4
53420: NOT
53421: OR
53422: IFFALSE 53426
// exit ;
53424: GO 53615
// while 1 do
53426: LD_INT 1
53428: IFFALSE 53615
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53430: LD_ADDR_VAR 0 9
53434: PUSH
53435: LD_VAR 0 1
53439: PPUSH
53440: LD_INT 1
53442: PPUSH
53443: CALL_OW 287
53447: PUSH
53448: LD_INT 10
53450: MUL
53451: ST_TO_ADDR
// r := rate / 10 ;
53452: LD_ADDR_VAR 0 7
53456: PUSH
53457: LD_VAR 0 2
53461: PUSH
53462: LD_INT 10
53464: DIVREAL
53465: ST_TO_ADDR
// time := 1 1$00 ;
53466: LD_ADDR_VAR 0 8
53470: PUSH
53471: LD_INT 2100
53473: ST_TO_ADDR
// if amount < min then
53474: LD_VAR 0 9
53478: PUSH
53479: LD_VAR 0 3
53483: LESS
53484: IFFALSE 53502
// r := r * 2 else
53486: LD_ADDR_VAR 0 7
53490: PUSH
53491: LD_VAR 0 7
53495: PUSH
53496: LD_INT 2
53498: MUL
53499: ST_TO_ADDR
53500: GO 53528
// if amount > max then
53502: LD_VAR 0 9
53506: PUSH
53507: LD_VAR 0 4
53511: GREATER
53512: IFFALSE 53528
// r := r / 2 ;
53514: LD_ADDR_VAR 0 7
53518: PUSH
53519: LD_VAR 0 7
53523: PUSH
53524: LD_INT 2
53526: DIVREAL
53527: ST_TO_ADDR
// time := time / r ;
53528: LD_ADDR_VAR 0 8
53532: PUSH
53533: LD_VAR 0 8
53537: PUSH
53538: LD_VAR 0 7
53542: DIVREAL
53543: ST_TO_ADDR
// if time < 0 then
53544: LD_VAR 0 8
53548: PUSH
53549: LD_INT 0
53551: LESS
53552: IFFALSE 53569
// time := time * - 1 ;
53554: LD_ADDR_VAR 0 8
53558: PUSH
53559: LD_VAR 0 8
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: MUL
53568: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53569: LD_VAR 0 8
53573: PUSH
53574: LD_INT 35
53576: PPUSH
53577: LD_INT 875
53579: PPUSH
53580: CALL_OW 12
53584: PLUS
53585: PPUSH
53586: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53590: LD_INT 1
53592: PPUSH
53593: LD_INT 5
53595: PPUSH
53596: CALL_OW 12
53600: PPUSH
53601: LD_VAR 0 1
53605: PPUSH
53606: LD_INT 1
53608: PPUSH
53609: CALL_OW 55
// end ;
53613: GO 53426
// end ;
53615: LD_VAR 0 5
53619: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53620: LD_INT 0
53622: PPUSH
53623: PPUSH
53624: PPUSH
53625: PPUSH
53626: PPUSH
53627: PPUSH
53628: PPUSH
53629: PPUSH
// if not turrets or not factories then
53630: LD_VAR 0 1
53634: NOT
53635: PUSH
53636: LD_VAR 0 2
53640: NOT
53641: OR
53642: IFFALSE 53646
// exit ;
53644: GO 53953
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53646: LD_ADDR_VAR 0 10
53650: PUSH
53651: LD_INT 5
53653: PUSH
53654: LD_INT 6
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: PUSH
53664: LD_INT 4
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 3
53673: PUSH
53674: LD_INT 5
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 24
53688: PUSH
53689: LD_INT 25
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 23
53698: PUSH
53699: LD_INT 27
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 42
53712: PUSH
53713: LD_INT 43
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 44
53722: PUSH
53723: LD_INT 46
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 45
53732: PUSH
53733: LD_INT 47
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: LIST
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: LIST
53749: ST_TO_ADDR
// result := [ ] ;
53750: LD_ADDR_VAR 0 3
53754: PUSH
53755: EMPTY
53756: ST_TO_ADDR
// for i in turrets do
53757: LD_ADDR_VAR 0 4
53761: PUSH
53762: LD_VAR 0 1
53766: PUSH
53767: FOR_IN
53768: IFFALSE 53951
// begin nat := GetNation ( i ) ;
53770: LD_ADDR_VAR 0 7
53774: PUSH
53775: LD_VAR 0 4
53779: PPUSH
53780: CALL_OW 248
53784: ST_TO_ADDR
// weapon := 0 ;
53785: LD_ADDR_VAR 0 8
53789: PUSH
53790: LD_INT 0
53792: ST_TO_ADDR
// if not nat then
53793: LD_VAR 0 7
53797: NOT
53798: IFFALSE 53802
// continue ;
53800: GO 53767
// for j in list [ nat ] do
53802: LD_ADDR_VAR 0 5
53806: PUSH
53807: LD_VAR 0 10
53811: PUSH
53812: LD_VAR 0 7
53816: ARRAY
53817: PUSH
53818: FOR_IN
53819: IFFALSE 53860
// if GetBWeapon ( i ) = j [ 1 ] then
53821: LD_VAR 0 4
53825: PPUSH
53826: CALL_OW 269
53830: PUSH
53831: LD_VAR 0 5
53835: PUSH
53836: LD_INT 1
53838: ARRAY
53839: EQUAL
53840: IFFALSE 53858
// begin weapon := j [ 2 ] ;
53842: LD_ADDR_VAR 0 8
53846: PUSH
53847: LD_VAR 0 5
53851: PUSH
53852: LD_INT 2
53854: ARRAY
53855: ST_TO_ADDR
// break ;
53856: GO 53860
// end ;
53858: GO 53818
53860: POP
53861: POP
// if not weapon then
53862: LD_VAR 0 8
53866: NOT
53867: IFFALSE 53871
// continue ;
53869: GO 53767
// for k in factories do
53871: LD_ADDR_VAR 0 6
53875: PUSH
53876: LD_VAR 0 2
53880: PUSH
53881: FOR_IN
53882: IFFALSE 53947
// begin weapons := AvailableWeaponList ( k ) ;
53884: LD_ADDR_VAR 0 9
53888: PUSH
53889: LD_VAR 0 6
53893: PPUSH
53894: CALL_OW 478
53898: ST_TO_ADDR
// if not weapons then
53899: LD_VAR 0 9
53903: NOT
53904: IFFALSE 53908
// continue ;
53906: GO 53881
// if weapon in weapons then
53908: LD_VAR 0 8
53912: PUSH
53913: LD_VAR 0 9
53917: IN
53918: IFFALSE 53945
// begin result := [ i , weapon ] ;
53920: LD_ADDR_VAR 0 3
53924: PUSH
53925: LD_VAR 0 4
53929: PUSH
53930: LD_VAR 0 8
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: ST_TO_ADDR
// exit ;
53939: POP
53940: POP
53941: POP
53942: POP
53943: GO 53953
// end ; end ;
53945: GO 53881
53947: POP
53948: POP
// end ;
53949: GO 53767
53951: POP
53952: POP
// end ;
53953: LD_VAR 0 3
53957: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53958: LD_INT 0
53960: PPUSH
// if not side or side > 8 then
53961: LD_VAR 0 3
53965: NOT
53966: PUSH
53967: LD_VAR 0 3
53971: PUSH
53972: LD_INT 8
53974: GREATER
53975: OR
53976: IFFALSE 53980
// exit ;
53978: GO 54039
// if not range then
53980: LD_VAR 0 4
53984: NOT
53985: IFFALSE 53996
// range := - 12 ;
53987: LD_ADDR_VAR 0 4
53991: PUSH
53992: LD_INT 12
53994: NEG
53995: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53996: LD_VAR 0 1
54000: PPUSH
54001: LD_VAR 0 2
54005: PPUSH
54006: LD_VAR 0 3
54010: PPUSH
54011: LD_VAR 0 4
54015: PPUSH
54016: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54020: LD_VAR 0 1
54024: PPUSH
54025: LD_VAR 0 2
54029: PPUSH
54030: LD_VAR 0 3
54034: PPUSH
54035: CALL_OW 331
// end ;
54039: LD_VAR 0 5
54043: RET
// export function Video ( mode ) ; begin
54044: LD_INT 0
54046: PPUSH
// ingame_video = mode ;
54047: LD_ADDR_OWVAR 52
54051: PUSH
54052: LD_VAR 0 1
54056: ST_TO_ADDR
// interface_hidden = mode ;
54057: LD_ADDR_OWVAR 54
54061: PUSH
54062: LD_VAR 0 1
54066: ST_TO_ADDR
// end ;
54067: LD_VAR 0 2
54071: RET
// export function Join ( array , element ) ; begin
54072: LD_INT 0
54074: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54075: LD_ADDR_VAR 0 3
54079: PUSH
54080: LD_VAR 0 1
54084: PPUSH
54085: LD_VAR 0 1
54089: PUSH
54090: LD_INT 1
54092: PLUS
54093: PPUSH
54094: LD_VAR 0 2
54098: PPUSH
54099: CALL_OW 1
54103: ST_TO_ADDR
// end ;
54104: LD_VAR 0 3
54108: RET
// export function JoinUnion ( array , element ) ; begin
54109: LD_INT 0
54111: PPUSH
// result := array union element ;
54112: LD_ADDR_VAR 0 3
54116: PUSH
54117: LD_VAR 0 1
54121: PUSH
54122: LD_VAR 0 2
54126: UNION
54127: ST_TO_ADDR
// end ;
54128: LD_VAR 0 3
54132: RET
// export function GetBehemoths ( side ) ; begin
54133: LD_INT 0
54135: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54136: LD_ADDR_VAR 0 2
54140: PUSH
54141: LD_INT 22
54143: PUSH
54144: LD_VAR 0 1
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 31
54155: PUSH
54156: LD_INT 25
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PPUSH
54167: CALL_OW 69
54171: ST_TO_ADDR
// end ;
54172: LD_VAR 0 2
54176: RET
// export function Shuffle ( array ) ; var i , index ; begin
54177: LD_INT 0
54179: PPUSH
54180: PPUSH
54181: PPUSH
// result := [ ] ;
54182: LD_ADDR_VAR 0 2
54186: PUSH
54187: EMPTY
54188: ST_TO_ADDR
// if not array then
54189: LD_VAR 0 1
54193: NOT
54194: IFFALSE 54198
// exit ;
54196: GO 54297
// Randomize ;
54198: CALL_OW 10
// for i = array downto 1 do
54202: LD_ADDR_VAR 0 3
54206: PUSH
54207: DOUBLE
54208: LD_VAR 0 1
54212: INC
54213: ST_TO_ADDR
54214: LD_INT 1
54216: PUSH
54217: FOR_DOWNTO
54218: IFFALSE 54295
// begin index := rand ( 1 , array ) ;
54220: LD_ADDR_VAR 0 4
54224: PUSH
54225: LD_INT 1
54227: PPUSH
54228: LD_VAR 0 1
54232: PPUSH
54233: CALL_OW 12
54237: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54238: LD_ADDR_VAR 0 2
54242: PUSH
54243: LD_VAR 0 2
54247: PPUSH
54248: LD_VAR 0 2
54252: PUSH
54253: LD_INT 1
54255: PLUS
54256: PPUSH
54257: LD_VAR 0 1
54261: PUSH
54262: LD_VAR 0 4
54266: ARRAY
54267: PPUSH
54268: CALL_OW 2
54272: ST_TO_ADDR
// array := Delete ( array , index ) ;
54273: LD_ADDR_VAR 0 1
54277: PUSH
54278: LD_VAR 0 1
54282: PPUSH
54283: LD_VAR 0 4
54287: PPUSH
54288: CALL_OW 3
54292: ST_TO_ADDR
// end ;
54293: GO 54217
54295: POP
54296: POP
// end ;
54297: LD_VAR 0 2
54301: RET
// export function GetBaseMaterials ( base ) ; begin
54302: LD_INT 0
54304: PPUSH
// result := [ 0 , 0 , 0 ] ;
54305: LD_ADDR_VAR 0 2
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: LIST
54323: ST_TO_ADDR
// if not base then
54324: LD_VAR 0 1
54328: NOT
54329: IFFALSE 54333
// exit ;
54331: GO 54382
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54333: LD_ADDR_VAR 0 2
54337: PUSH
54338: LD_VAR 0 1
54342: PPUSH
54343: LD_INT 1
54345: PPUSH
54346: CALL_OW 275
54350: PUSH
54351: LD_VAR 0 1
54355: PPUSH
54356: LD_INT 2
54358: PPUSH
54359: CALL_OW 275
54363: PUSH
54364: LD_VAR 0 1
54368: PPUSH
54369: LD_INT 3
54371: PPUSH
54372: CALL_OW 275
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: LIST
54381: ST_TO_ADDR
// end ;
54382: LD_VAR 0 2
54386: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54387: LD_INT 0
54389: PPUSH
54390: PPUSH
// result := array ;
54391: LD_ADDR_VAR 0 3
54395: PUSH
54396: LD_VAR 0 1
54400: ST_TO_ADDR
// if size >= result then
54401: LD_VAR 0 2
54405: PUSH
54406: LD_VAR 0 3
54410: GREATEREQUAL
54411: IFFALSE 54415
// exit ;
54413: GO 54465
// if size then
54415: LD_VAR 0 2
54419: IFFALSE 54465
// for i := array downto size do
54421: LD_ADDR_VAR 0 4
54425: PUSH
54426: DOUBLE
54427: LD_VAR 0 1
54431: INC
54432: ST_TO_ADDR
54433: LD_VAR 0 2
54437: PUSH
54438: FOR_DOWNTO
54439: IFFALSE 54463
// result := Delete ( result , result ) ;
54441: LD_ADDR_VAR 0 3
54445: PUSH
54446: LD_VAR 0 3
54450: PPUSH
54451: LD_VAR 0 3
54455: PPUSH
54456: CALL_OW 3
54460: ST_TO_ADDR
54461: GO 54438
54463: POP
54464: POP
// end ;
54465: LD_VAR 0 3
54469: RET
// export function ComExit ( unit ) ; var tmp ; begin
54470: LD_INT 0
54472: PPUSH
54473: PPUSH
// if not IsInUnit ( unit ) then
54474: LD_VAR 0 1
54478: PPUSH
54479: CALL_OW 310
54483: NOT
54484: IFFALSE 54488
// exit ;
54486: GO 54548
// tmp := IsInUnit ( unit ) ;
54488: LD_ADDR_VAR 0 3
54492: PUSH
54493: LD_VAR 0 1
54497: PPUSH
54498: CALL_OW 310
54502: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54503: LD_VAR 0 3
54507: PPUSH
54508: CALL_OW 247
54512: PUSH
54513: LD_INT 2
54515: EQUAL
54516: IFFALSE 54529
// ComExitVehicle ( unit ) else
54518: LD_VAR 0 1
54522: PPUSH
54523: CALL_OW 121
54527: GO 54538
// ComExitBuilding ( unit ) ;
54529: LD_VAR 0 1
54533: PPUSH
54534: CALL_OW 122
// result := tmp ;
54538: LD_ADDR_VAR 0 2
54542: PUSH
54543: LD_VAR 0 3
54547: ST_TO_ADDR
// end ;
54548: LD_VAR 0 2
54552: RET
// export function ComExitAll ( units ) ; var i ; begin
54553: LD_INT 0
54555: PPUSH
54556: PPUSH
// if not units then
54557: LD_VAR 0 1
54561: NOT
54562: IFFALSE 54566
// exit ;
54564: GO 54592
// for i in units do
54566: LD_ADDR_VAR 0 3
54570: PUSH
54571: LD_VAR 0 1
54575: PUSH
54576: FOR_IN
54577: IFFALSE 54590
// ComExit ( i ) ;
54579: LD_VAR 0 3
54583: PPUSH
54584: CALL 54470 0 1
54588: GO 54576
54590: POP
54591: POP
// end ;
54592: LD_VAR 0 2
54596: RET
// export function ResetHc ; begin
54597: LD_INT 0
54599: PPUSH
// InitHc ;
54600: CALL_OW 19
// hc_importance := 0 ;
54604: LD_ADDR_OWVAR 32
54608: PUSH
54609: LD_INT 0
54611: ST_TO_ADDR
// end ;
54612: LD_VAR 0 1
54616: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54617: LD_INT 0
54619: PPUSH
54620: PPUSH
54621: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54622: LD_ADDR_VAR 0 6
54626: PUSH
54627: LD_VAR 0 1
54631: PUSH
54632: LD_VAR 0 3
54636: PLUS
54637: PUSH
54638: LD_INT 2
54640: DIV
54641: ST_TO_ADDR
// if _x < 0 then
54642: LD_VAR 0 6
54646: PUSH
54647: LD_INT 0
54649: LESS
54650: IFFALSE 54667
// _x := _x * - 1 ;
54652: LD_ADDR_VAR 0 6
54656: PUSH
54657: LD_VAR 0 6
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: MUL
54666: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54667: LD_ADDR_VAR 0 7
54671: PUSH
54672: LD_VAR 0 2
54676: PUSH
54677: LD_VAR 0 4
54681: PLUS
54682: PUSH
54683: LD_INT 2
54685: DIV
54686: ST_TO_ADDR
// if _y < 0 then
54687: LD_VAR 0 7
54691: PUSH
54692: LD_INT 0
54694: LESS
54695: IFFALSE 54712
// _y := _y * - 1 ;
54697: LD_ADDR_VAR 0 7
54701: PUSH
54702: LD_VAR 0 7
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: MUL
54711: ST_TO_ADDR
// result := [ _x , _y ] ;
54712: LD_ADDR_VAR 0 5
54716: PUSH
54717: LD_VAR 0 6
54721: PUSH
54722: LD_VAR 0 7
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: ST_TO_ADDR
// end ;
54731: LD_VAR 0 5
54735: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54736: LD_INT 0
54738: PPUSH
54739: PPUSH
54740: PPUSH
54741: PPUSH
// task := GetTaskList ( unit ) ;
54742: LD_ADDR_VAR 0 7
54746: PUSH
54747: LD_VAR 0 1
54751: PPUSH
54752: CALL_OW 437
54756: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54757: LD_VAR 0 7
54761: NOT
54762: PUSH
54763: LD_VAR 0 1
54767: PPUSH
54768: LD_VAR 0 2
54772: PPUSH
54773: CALL_OW 308
54777: NOT
54778: AND
54779: IFFALSE 54783
// exit ;
54781: GO 54901
// if IsInArea ( unit , area ) then
54783: LD_VAR 0 1
54787: PPUSH
54788: LD_VAR 0 2
54792: PPUSH
54793: CALL_OW 308
54797: IFFALSE 54815
// begin ComMoveToArea ( unit , goAway ) ;
54799: LD_VAR 0 1
54803: PPUSH
54804: LD_VAR 0 3
54808: PPUSH
54809: CALL_OW 113
// exit ;
54813: GO 54901
// end ; if task [ 1 ] [ 1 ] <> M then
54815: LD_VAR 0 7
54819: PUSH
54820: LD_INT 1
54822: ARRAY
54823: PUSH
54824: LD_INT 1
54826: ARRAY
54827: PUSH
54828: LD_STRING M
54830: NONEQUAL
54831: IFFALSE 54835
// exit ;
54833: GO 54901
// x := task [ 1 ] [ 2 ] ;
54835: LD_ADDR_VAR 0 5
54839: PUSH
54840: LD_VAR 0 7
54844: PUSH
54845: LD_INT 1
54847: ARRAY
54848: PUSH
54849: LD_INT 2
54851: ARRAY
54852: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54853: LD_ADDR_VAR 0 6
54857: PUSH
54858: LD_VAR 0 7
54862: PUSH
54863: LD_INT 1
54865: ARRAY
54866: PUSH
54867: LD_INT 3
54869: ARRAY
54870: ST_TO_ADDR
// if InArea ( x , y , area ) then
54871: LD_VAR 0 5
54875: PPUSH
54876: LD_VAR 0 6
54880: PPUSH
54881: LD_VAR 0 2
54885: PPUSH
54886: CALL_OW 309
54890: IFFALSE 54901
// ComStop ( unit ) ;
54892: LD_VAR 0 1
54896: PPUSH
54897: CALL_OW 141
// end ;
54901: LD_VAR 0 4
54905: RET
// export function Abs ( value ) ; begin
54906: LD_INT 0
54908: PPUSH
// result := value ;
54909: LD_ADDR_VAR 0 2
54913: PUSH
54914: LD_VAR 0 1
54918: ST_TO_ADDR
// if value < 0 then
54919: LD_VAR 0 1
54923: PUSH
54924: LD_INT 0
54926: LESS
54927: IFFALSE 54944
// result := value * - 1 ;
54929: LD_ADDR_VAR 0 2
54933: PUSH
54934: LD_VAR 0 1
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: MUL
54943: ST_TO_ADDR
// end ;
54944: LD_VAR 0 2
54948: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54949: LD_INT 0
54951: PPUSH
54952: PPUSH
54953: PPUSH
54954: PPUSH
54955: PPUSH
54956: PPUSH
54957: PPUSH
54958: PPUSH
// if not unit or not building then
54959: LD_VAR 0 1
54963: NOT
54964: PUSH
54965: LD_VAR 0 2
54969: NOT
54970: OR
54971: IFFALSE 54975
// exit ;
54973: GO 55201
// x := GetX ( building ) ;
54975: LD_ADDR_VAR 0 4
54979: PUSH
54980: LD_VAR 0 2
54984: PPUSH
54985: CALL_OW 250
54989: ST_TO_ADDR
// y := GetY ( building ) ;
54990: LD_ADDR_VAR 0 6
54994: PUSH
54995: LD_VAR 0 2
54999: PPUSH
55000: CALL_OW 251
55004: ST_TO_ADDR
// d := GetDir ( building ) ;
55005: LD_ADDR_VAR 0 8
55009: PUSH
55010: LD_VAR 0 2
55014: PPUSH
55015: CALL_OW 254
55019: ST_TO_ADDR
// r := 4 ;
55020: LD_ADDR_VAR 0 9
55024: PUSH
55025: LD_INT 4
55027: ST_TO_ADDR
// for i := 1 to 5 do
55028: LD_ADDR_VAR 0 10
55032: PUSH
55033: DOUBLE
55034: LD_INT 1
55036: DEC
55037: ST_TO_ADDR
55038: LD_INT 5
55040: PUSH
55041: FOR_TO
55042: IFFALSE 55199
// begin _x := ShiftX ( x , d , r + i ) ;
55044: LD_ADDR_VAR 0 5
55048: PUSH
55049: LD_VAR 0 4
55053: PPUSH
55054: LD_VAR 0 8
55058: PPUSH
55059: LD_VAR 0 9
55063: PUSH
55064: LD_VAR 0 10
55068: PLUS
55069: PPUSH
55070: CALL_OW 272
55074: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55075: LD_ADDR_VAR 0 7
55079: PUSH
55080: LD_VAR 0 6
55084: PPUSH
55085: LD_VAR 0 8
55089: PPUSH
55090: LD_VAR 0 9
55094: PUSH
55095: LD_VAR 0 10
55099: PLUS
55100: PPUSH
55101: CALL_OW 273
55105: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55106: LD_VAR 0 5
55110: PPUSH
55111: LD_VAR 0 7
55115: PPUSH
55116: CALL_OW 488
55120: PUSH
55121: LD_VAR 0 5
55125: PPUSH
55126: LD_VAR 0 7
55130: PPUSH
55131: CALL_OW 428
55135: PPUSH
55136: CALL_OW 247
55140: PUSH
55141: LD_INT 3
55143: PUSH
55144: LD_INT 2
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: IN
55151: NOT
55152: AND
55153: IFFALSE 55197
// begin ComMoveXY ( unit , _x , _y ) ;
55155: LD_VAR 0 1
55159: PPUSH
55160: LD_VAR 0 5
55164: PPUSH
55165: LD_VAR 0 7
55169: PPUSH
55170: CALL_OW 111
// result := [ _x , _y ] ;
55174: LD_ADDR_VAR 0 3
55178: PUSH
55179: LD_VAR 0 5
55183: PUSH
55184: LD_VAR 0 7
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: ST_TO_ADDR
// exit ;
55193: POP
55194: POP
55195: GO 55201
// end ; end ;
55197: GO 55041
55199: POP
55200: POP
// end ;
55201: LD_VAR 0 3
55205: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55206: LD_INT 0
55208: PPUSH
55209: PPUSH
55210: PPUSH
// result := 0 ;
55211: LD_ADDR_VAR 0 3
55215: PUSH
55216: LD_INT 0
55218: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55219: LD_VAR 0 1
55223: PUSH
55224: LD_INT 0
55226: LESS
55227: PUSH
55228: LD_VAR 0 1
55232: PUSH
55233: LD_INT 8
55235: GREATER
55236: OR
55237: PUSH
55238: LD_VAR 0 2
55242: PUSH
55243: LD_INT 0
55245: LESS
55246: OR
55247: PUSH
55248: LD_VAR 0 2
55252: PUSH
55253: LD_INT 8
55255: GREATER
55256: OR
55257: IFFALSE 55261
// exit ;
55259: GO 55336
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55261: LD_ADDR_VAR 0 4
55265: PUSH
55266: LD_INT 22
55268: PUSH
55269: LD_VAR 0 2
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PPUSH
55278: CALL_OW 69
55282: PUSH
55283: FOR_IN
55284: IFFALSE 55334
// begin un := UnitShoot ( i ) ;
55286: LD_ADDR_VAR 0 5
55290: PUSH
55291: LD_VAR 0 4
55295: PPUSH
55296: CALL_OW 504
55300: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55301: LD_VAR 0 5
55305: PPUSH
55306: CALL_OW 255
55310: PUSH
55311: LD_VAR 0 1
55315: EQUAL
55316: IFFALSE 55332
// begin result := un ;
55318: LD_ADDR_VAR 0 3
55322: PUSH
55323: LD_VAR 0 5
55327: ST_TO_ADDR
// exit ;
55328: POP
55329: POP
55330: GO 55336
// end ; end ;
55332: GO 55283
55334: POP
55335: POP
// end ;
55336: LD_VAR 0 3
55340: RET
// export function GetCargoBay ( units ) ; begin
55341: LD_INT 0
55343: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55344: LD_ADDR_VAR 0 2
55348: PUSH
55349: LD_VAR 0 1
55353: PPUSH
55354: LD_INT 2
55356: PUSH
55357: LD_INT 34
55359: PUSH
55360: LD_INT 12
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 34
55369: PUSH
55370: LD_INT 51
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 34
55379: PUSH
55380: LD_INT 32
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 34
55389: PUSH
55390: LD_INT 89
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: PPUSH
55404: CALL_OW 72
55408: ST_TO_ADDR
// end ;
55409: LD_VAR 0 2
55413: RET
// export function Negate ( value ) ; begin
55414: LD_INT 0
55416: PPUSH
// result := not value ;
55417: LD_ADDR_VAR 0 2
55421: PUSH
55422: LD_VAR 0 1
55426: NOT
55427: ST_TO_ADDR
// end ;
55428: LD_VAR 0 2
55432: RET
// export function Inc ( value ) ; begin
55433: LD_INT 0
55435: PPUSH
// result := value + 1 ;
55436: LD_ADDR_VAR 0 2
55440: PUSH
55441: LD_VAR 0 1
55445: PUSH
55446: LD_INT 1
55448: PLUS
55449: ST_TO_ADDR
// end ;
55450: LD_VAR 0 2
55454: RET
// export function Dec ( value ) ; begin
55455: LD_INT 0
55457: PPUSH
// result := value - 1 ;
55458: LD_ADDR_VAR 0 2
55462: PUSH
55463: LD_VAR 0 1
55467: PUSH
55468: LD_INT 1
55470: MINUS
55471: ST_TO_ADDR
// end ;
55472: LD_VAR 0 2
55476: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55477: LD_INT 0
55479: PPUSH
55480: PPUSH
55481: PPUSH
55482: PPUSH
55483: PPUSH
55484: PPUSH
55485: PPUSH
55486: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55487: LD_VAR 0 1
55491: PPUSH
55492: LD_VAR 0 2
55496: PPUSH
55497: CALL_OW 488
55501: NOT
55502: PUSH
55503: LD_VAR 0 3
55507: PPUSH
55508: LD_VAR 0 4
55512: PPUSH
55513: CALL_OW 488
55517: NOT
55518: OR
55519: IFFALSE 55532
// begin result := - 1 ;
55521: LD_ADDR_VAR 0 5
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: ST_TO_ADDR
// exit ;
55530: GO 55767
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55532: LD_ADDR_VAR 0 12
55536: PUSH
55537: LD_VAR 0 1
55541: PPUSH
55542: LD_VAR 0 2
55546: PPUSH
55547: LD_VAR 0 3
55551: PPUSH
55552: LD_VAR 0 4
55556: PPUSH
55557: CALL 54617 0 4
55561: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55562: LD_ADDR_VAR 0 11
55566: PUSH
55567: LD_VAR 0 1
55571: PPUSH
55572: LD_VAR 0 2
55576: PPUSH
55577: LD_VAR 0 12
55581: PUSH
55582: LD_INT 1
55584: ARRAY
55585: PPUSH
55586: LD_VAR 0 12
55590: PUSH
55591: LD_INT 2
55593: ARRAY
55594: PPUSH
55595: CALL_OW 298
55599: ST_TO_ADDR
// distance := 9999 ;
55600: LD_ADDR_VAR 0 10
55604: PUSH
55605: LD_INT 9999
55607: ST_TO_ADDR
// for i := 0 to 5 do
55608: LD_ADDR_VAR 0 6
55612: PUSH
55613: DOUBLE
55614: LD_INT 0
55616: DEC
55617: ST_TO_ADDR
55618: LD_INT 5
55620: PUSH
55621: FOR_TO
55622: IFFALSE 55765
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55624: LD_ADDR_VAR 0 7
55628: PUSH
55629: LD_VAR 0 1
55633: PPUSH
55634: LD_VAR 0 6
55638: PPUSH
55639: LD_VAR 0 11
55643: PPUSH
55644: CALL_OW 272
55648: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55649: LD_ADDR_VAR 0 8
55653: PUSH
55654: LD_VAR 0 2
55658: PPUSH
55659: LD_VAR 0 6
55663: PPUSH
55664: LD_VAR 0 11
55668: PPUSH
55669: CALL_OW 273
55673: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55674: LD_VAR 0 7
55678: PPUSH
55679: LD_VAR 0 8
55683: PPUSH
55684: CALL_OW 488
55688: NOT
55689: IFFALSE 55693
// continue ;
55691: GO 55621
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55693: LD_ADDR_VAR 0 9
55697: PUSH
55698: LD_VAR 0 12
55702: PUSH
55703: LD_INT 1
55705: ARRAY
55706: PPUSH
55707: LD_VAR 0 12
55711: PUSH
55712: LD_INT 2
55714: ARRAY
55715: PPUSH
55716: LD_VAR 0 7
55720: PPUSH
55721: LD_VAR 0 8
55725: PPUSH
55726: CALL_OW 298
55730: ST_TO_ADDR
// if tmp < distance then
55731: LD_VAR 0 9
55735: PUSH
55736: LD_VAR 0 10
55740: LESS
55741: IFFALSE 55763
// begin result := i ;
55743: LD_ADDR_VAR 0 5
55747: PUSH
55748: LD_VAR 0 6
55752: ST_TO_ADDR
// distance := tmp ;
55753: LD_ADDR_VAR 0 10
55757: PUSH
55758: LD_VAR 0 9
55762: ST_TO_ADDR
// end ; end ;
55763: GO 55621
55765: POP
55766: POP
// end ;
55767: LD_VAR 0 5
55771: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55772: LD_INT 0
55774: PPUSH
55775: PPUSH
// if not driver or not IsInUnit ( driver ) then
55776: LD_VAR 0 1
55780: NOT
55781: PUSH
55782: LD_VAR 0 1
55786: PPUSH
55787: CALL_OW 310
55791: NOT
55792: OR
55793: IFFALSE 55797
// exit ;
55795: GO 55887
// vehicle := IsInUnit ( driver ) ;
55797: LD_ADDR_VAR 0 3
55801: PUSH
55802: LD_VAR 0 1
55806: PPUSH
55807: CALL_OW 310
55811: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55812: LD_VAR 0 1
55816: PPUSH
55817: LD_STRING \
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: PUSH
55847: LD_STRING E
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_VAR 0 3
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PPUSH
55883: CALL_OW 446
// end ;
55887: LD_VAR 0 2
55891: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55892: LD_INT 0
55894: PPUSH
55895: PPUSH
// if not driver or not IsInUnit ( driver ) then
55896: LD_VAR 0 1
55900: NOT
55901: PUSH
55902: LD_VAR 0 1
55906: PPUSH
55907: CALL_OW 310
55911: NOT
55912: OR
55913: IFFALSE 55917
// exit ;
55915: GO 56007
// vehicle := IsInUnit ( driver ) ;
55917: LD_ADDR_VAR 0 3
55921: PUSH
55922: LD_VAR 0 1
55926: PPUSH
55927: CALL_OW 310
55931: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55932: LD_VAR 0 1
55936: PPUSH
55937: LD_STRING \
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: PUSH
55967: LD_STRING E
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_VAR 0 3
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PPUSH
56003: CALL_OW 447
// end ;
56007: LD_VAR 0 2
56011: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56012: LD_INT 0
56014: PPUSH
56015: PPUSH
56016: PPUSH
// tmp := [ ] ;
56017: LD_ADDR_VAR 0 5
56021: PUSH
56022: EMPTY
56023: ST_TO_ADDR
// for i in units do
56024: LD_ADDR_VAR 0 4
56028: PUSH
56029: LD_VAR 0 1
56033: PUSH
56034: FOR_IN
56035: IFFALSE 56073
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56037: LD_ADDR_VAR 0 5
56041: PUSH
56042: LD_VAR 0 5
56046: PPUSH
56047: LD_VAR 0 5
56051: PUSH
56052: LD_INT 1
56054: PLUS
56055: PPUSH
56056: LD_VAR 0 4
56060: PPUSH
56061: CALL_OW 256
56065: PPUSH
56066: CALL_OW 2
56070: ST_TO_ADDR
56071: GO 56034
56073: POP
56074: POP
// if not tmp then
56075: LD_VAR 0 5
56079: NOT
56080: IFFALSE 56084
// exit ;
56082: GO 56132
// if asc then
56084: LD_VAR 0 2
56088: IFFALSE 56112
// result := SortListByListAsc ( units , tmp ) else
56090: LD_ADDR_VAR 0 3
56094: PUSH
56095: LD_VAR 0 1
56099: PPUSH
56100: LD_VAR 0 5
56104: PPUSH
56105: CALL_OW 76
56109: ST_TO_ADDR
56110: GO 56132
// result := SortListByListDesc ( units , tmp ) ;
56112: LD_ADDR_VAR 0 3
56116: PUSH
56117: LD_VAR 0 1
56121: PPUSH
56122: LD_VAR 0 5
56126: PPUSH
56127: CALL_OW 77
56131: ST_TO_ADDR
// end ;
56132: LD_VAR 0 3
56136: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56137: LD_INT 0
56139: PPUSH
56140: PPUSH
// task := GetTaskList ( mech ) ;
56141: LD_ADDR_VAR 0 4
56145: PUSH
56146: LD_VAR 0 1
56150: PPUSH
56151: CALL_OW 437
56155: ST_TO_ADDR
// if not task then
56156: LD_VAR 0 4
56160: NOT
56161: IFFALSE 56165
// exit ;
56163: GO 56207
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56165: LD_ADDR_VAR 0 3
56169: PUSH
56170: LD_VAR 0 4
56174: PUSH
56175: LD_INT 1
56177: ARRAY
56178: PUSH
56179: LD_INT 1
56181: ARRAY
56182: PUSH
56183: LD_STRING r
56185: EQUAL
56186: PUSH
56187: LD_VAR 0 4
56191: PUSH
56192: LD_INT 1
56194: ARRAY
56195: PUSH
56196: LD_INT 4
56198: ARRAY
56199: PUSH
56200: LD_VAR 0 2
56204: EQUAL
56205: AND
56206: ST_TO_ADDR
// end ;
56207: LD_VAR 0 3
56211: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56212: LD_INT 0
56214: PPUSH
// SetDir ( unit , d ) ;
56215: LD_VAR 0 1
56219: PPUSH
56220: LD_VAR 0 4
56224: PPUSH
56225: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56229: LD_VAR 0 1
56233: PPUSH
56234: LD_VAR 0 2
56238: PPUSH
56239: LD_VAR 0 3
56243: PPUSH
56244: LD_VAR 0 5
56248: PPUSH
56249: CALL_OW 48
// end ;
56253: LD_VAR 0 6
56257: RET
// export function ToNaturalNumber ( number ) ; begin
56258: LD_INT 0
56260: PPUSH
// result := number div 1 ;
56261: LD_ADDR_VAR 0 2
56265: PUSH
56266: LD_VAR 0 1
56270: PUSH
56271: LD_INT 1
56273: DIV
56274: ST_TO_ADDR
// if number < 0 then
56275: LD_VAR 0 1
56279: PUSH
56280: LD_INT 0
56282: LESS
56283: IFFALSE 56293
// result := 0 ;
56285: LD_ADDR_VAR 0 2
56289: PUSH
56290: LD_INT 0
56292: ST_TO_ADDR
// end ;
56293: LD_VAR 0 2
56297: RET
// export function SortByClass ( units , class ) ; var un ; begin
56298: LD_INT 0
56300: PPUSH
56301: PPUSH
// if not units or not class then
56302: LD_VAR 0 1
56306: NOT
56307: PUSH
56308: LD_VAR 0 2
56312: NOT
56313: OR
56314: IFFALSE 56318
// exit ;
56316: GO 56413
// result := [ ] ;
56318: LD_ADDR_VAR 0 3
56322: PUSH
56323: EMPTY
56324: ST_TO_ADDR
// for un in units do
56325: LD_ADDR_VAR 0 4
56329: PUSH
56330: LD_VAR 0 1
56334: PUSH
56335: FOR_IN
56336: IFFALSE 56411
// if GetClass ( un ) = class then
56338: LD_VAR 0 4
56342: PPUSH
56343: CALL_OW 257
56347: PUSH
56348: LD_VAR 0 2
56352: EQUAL
56353: IFFALSE 56380
// result := Insert ( result , 1 , un ) else
56355: LD_ADDR_VAR 0 3
56359: PUSH
56360: LD_VAR 0 3
56364: PPUSH
56365: LD_INT 1
56367: PPUSH
56368: LD_VAR 0 4
56372: PPUSH
56373: CALL_OW 2
56377: ST_TO_ADDR
56378: GO 56409
// result := Replace ( result , result + 1 , un ) ;
56380: LD_ADDR_VAR 0 3
56384: PUSH
56385: LD_VAR 0 3
56389: PPUSH
56390: LD_VAR 0 3
56394: PUSH
56395: LD_INT 1
56397: PLUS
56398: PPUSH
56399: LD_VAR 0 4
56403: PPUSH
56404: CALL_OW 1
56408: ST_TO_ADDR
56409: GO 56335
56411: POP
56412: POP
// end ;
56413: LD_VAR 0 3
56417: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56418: LD_INT 0
56420: PPUSH
56421: PPUSH
56422: PPUSH
56423: PPUSH
56424: PPUSH
56425: PPUSH
56426: PPUSH
// result := [ ] ;
56427: LD_ADDR_VAR 0 4
56431: PUSH
56432: EMPTY
56433: ST_TO_ADDR
// if x - r < 0 then
56434: LD_VAR 0 1
56438: PUSH
56439: LD_VAR 0 3
56443: MINUS
56444: PUSH
56445: LD_INT 0
56447: LESS
56448: IFFALSE 56460
// min_x := 0 else
56450: LD_ADDR_VAR 0 8
56454: PUSH
56455: LD_INT 0
56457: ST_TO_ADDR
56458: GO 56476
// min_x := x - r ;
56460: LD_ADDR_VAR 0 8
56464: PUSH
56465: LD_VAR 0 1
56469: PUSH
56470: LD_VAR 0 3
56474: MINUS
56475: ST_TO_ADDR
// if y - r < 0 then
56476: LD_VAR 0 2
56480: PUSH
56481: LD_VAR 0 3
56485: MINUS
56486: PUSH
56487: LD_INT 0
56489: LESS
56490: IFFALSE 56502
// min_y := 0 else
56492: LD_ADDR_VAR 0 7
56496: PUSH
56497: LD_INT 0
56499: ST_TO_ADDR
56500: GO 56518
// min_y := y - r ;
56502: LD_ADDR_VAR 0 7
56506: PUSH
56507: LD_VAR 0 2
56511: PUSH
56512: LD_VAR 0 3
56516: MINUS
56517: ST_TO_ADDR
// max_x := x + r ;
56518: LD_ADDR_VAR 0 9
56522: PUSH
56523: LD_VAR 0 1
56527: PUSH
56528: LD_VAR 0 3
56532: PLUS
56533: ST_TO_ADDR
// max_y := y + r ;
56534: LD_ADDR_VAR 0 10
56538: PUSH
56539: LD_VAR 0 2
56543: PUSH
56544: LD_VAR 0 3
56548: PLUS
56549: ST_TO_ADDR
// for _x = min_x to max_x do
56550: LD_ADDR_VAR 0 5
56554: PUSH
56555: DOUBLE
56556: LD_VAR 0 8
56560: DEC
56561: ST_TO_ADDR
56562: LD_VAR 0 9
56566: PUSH
56567: FOR_TO
56568: IFFALSE 56669
// for _y = min_y to max_y do
56570: LD_ADDR_VAR 0 6
56574: PUSH
56575: DOUBLE
56576: LD_VAR 0 7
56580: DEC
56581: ST_TO_ADDR
56582: LD_VAR 0 10
56586: PUSH
56587: FOR_TO
56588: IFFALSE 56665
// begin if not ValidHex ( _x , _y ) then
56590: LD_VAR 0 5
56594: PPUSH
56595: LD_VAR 0 6
56599: PPUSH
56600: CALL_OW 488
56604: NOT
56605: IFFALSE 56609
// continue ;
56607: GO 56587
// if GetResourceTypeXY ( _x , _y ) then
56609: LD_VAR 0 5
56613: PPUSH
56614: LD_VAR 0 6
56618: PPUSH
56619: CALL_OW 283
56623: IFFALSE 56663
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56625: LD_ADDR_VAR 0 4
56629: PUSH
56630: LD_VAR 0 4
56634: PPUSH
56635: LD_VAR 0 4
56639: PUSH
56640: LD_INT 1
56642: PLUS
56643: PPUSH
56644: LD_VAR 0 5
56648: PUSH
56649: LD_VAR 0 6
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PPUSH
56658: CALL_OW 1
56662: ST_TO_ADDR
// end ;
56663: GO 56587
56665: POP
56666: POP
56667: GO 56567
56669: POP
56670: POP
// end ;
56671: LD_VAR 0 4
56675: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56676: LD_INT 0
56678: PPUSH
56679: PPUSH
56680: PPUSH
56681: PPUSH
56682: PPUSH
56683: PPUSH
56684: PPUSH
56685: PPUSH
// if not units then
56686: LD_VAR 0 1
56690: NOT
56691: IFFALSE 56695
// exit ;
56693: GO 57223
// result := UnitFilter ( units , [ f_ok ] ) ;
56695: LD_ADDR_VAR 0 3
56699: PUSH
56700: LD_VAR 0 1
56704: PPUSH
56705: LD_INT 50
56707: PUSH
56708: EMPTY
56709: LIST
56710: PPUSH
56711: CALL_OW 72
56715: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56716: LD_ADDR_VAR 0 8
56720: PUSH
56721: LD_VAR 0 1
56725: PUSH
56726: LD_INT 1
56728: ARRAY
56729: PPUSH
56730: CALL_OW 255
56734: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56735: LD_ADDR_VAR 0 10
56739: PUSH
56740: LD_INT 29
56742: PUSH
56743: LD_INT 91
56745: PUSH
56746: LD_INT 49
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: LIST
56753: ST_TO_ADDR
// if not result then
56754: LD_VAR 0 3
56758: NOT
56759: IFFALSE 56763
// exit ;
56761: GO 57223
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56763: LD_ADDR_VAR 0 5
56767: PUSH
56768: LD_INT 81
56770: PUSH
56771: LD_VAR 0 8
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PPUSH
56780: CALL_OW 69
56784: ST_TO_ADDR
// for i in result do
56785: LD_ADDR_VAR 0 4
56789: PUSH
56790: LD_VAR 0 3
56794: PUSH
56795: FOR_IN
56796: IFFALSE 57221
// begin tag := GetTag ( i ) + 1 ;
56798: LD_ADDR_VAR 0 9
56802: PUSH
56803: LD_VAR 0 4
56807: PPUSH
56808: CALL_OW 110
56812: PUSH
56813: LD_INT 1
56815: PLUS
56816: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56817: LD_ADDR_VAR 0 7
56821: PUSH
56822: LD_VAR 0 4
56826: PPUSH
56827: CALL_OW 250
56831: PPUSH
56832: LD_VAR 0 4
56836: PPUSH
56837: CALL_OW 251
56841: PPUSH
56842: LD_INT 4
56844: PPUSH
56845: CALL 56418 0 3
56849: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56850: LD_VAR 0 4
56854: PPUSH
56855: CALL_OW 247
56859: PUSH
56860: LD_INT 2
56862: EQUAL
56863: PUSH
56864: LD_VAR 0 7
56868: PUSH
56869: LD_INT 2
56871: GREATER
56872: AND
56873: PUSH
56874: LD_VAR 0 4
56878: PPUSH
56879: CALL_OW 264
56883: PUSH
56884: LD_VAR 0 10
56888: IN
56889: NOT
56890: AND
56891: IFFALSE 56930
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56893: LD_VAR 0 4
56897: PPUSH
56898: LD_VAR 0 7
56902: PUSH
56903: LD_INT 1
56905: ARRAY
56906: PUSH
56907: LD_INT 1
56909: ARRAY
56910: PPUSH
56911: LD_VAR 0 7
56915: PUSH
56916: LD_INT 1
56918: ARRAY
56919: PUSH
56920: LD_INT 2
56922: ARRAY
56923: PPUSH
56924: CALL_OW 116
56928: GO 57219
// if path > tag then
56930: LD_VAR 0 2
56934: PUSH
56935: LD_VAR 0 9
56939: GREATER
56940: IFFALSE 57148
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56942: LD_ADDR_VAR 0 6
56946: PUSH
56947: LD_VAR 0 5
56951: PPUSH
56952: LD_INT 91
56954: PUSH
56955: LD_VAR 0 4
56959: PUSH
56960: LD_INT 8
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: LIST
56967: PPUSH
56968: CALL_OW 72
56972: ST_TO_ADDR
// if nearEnemy then
56973: LD_VAR 0 6
56977: IFFALSE 57046
// begin if GetWeapon ( i ) = ru_time_lapser then
56979: LD_VAR 0 4
56983: PPUSH
56984: CALL_OW 264
56988: PUSH
56989: LD_INT 49
56991: EQUAL
56992: IFFALSE 57020
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56994: LD_VAR 0 4
56998: PPUSH
56999: LD_VAR 0 6
57003: PPUSH
57004: LD_VAR 0 4
57008: PPUSH
57009: CALL_OW 74
57013: PPUSH
57014: CALL_OW 112
57018: GO 57044
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57020: LD_VAR 0 4
57024: PPUSH
57025: LD_VAR 0 6
57029: PPUSH
57030: LD_VAR 0 4
57034: PPUSH
57035: CALL_OW 74
57039: PPUSH
57040: CALL 58294 0 2
// end else
57044: GO 57146
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57046: LD_VAR 0 4
57050: PPUSH
57051: LD_VAR 0 2
57055: PUSH
57056: LD_VAR 0 9
57060: ARRAY
57061: PUSH
57062: LD_INT 1
57064: ARRAY
57065: PPUSH
57066: LD_VAR 0 2
57070: PUSH
57071: LD_VAR 0 9
57075: ARRAY
57076: PUSH
57077: LD_INT 2
57079: ARRAY
57080: PPUSH
57081: CALL_OW 297
57085: PUSH
57086: LD_INT 6
57088: GREATER
57089: IFFALSE 57132
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57091: LD_VAR 0 4
57095: PPUSH
57096: LD_VAR 0 2
57100: PUSH
57101: LD_VAR 0 9
57105: ARRAY
57106: PUSH
57107: LD_INT 1
57109: ARRAY
57110: PPUSH
57111: LD_VAR 0 2
57115: PUSH
57116: LD_VAR 0 9
57120: ARRAY
57121: PUSH
57122: LD_INT 2
57124: ARRAY
57125: PPUSH
57126: CALL_OW 114
57130: GO 57146
// SetTag ( i , tag ) ;
57132: LD_VAR 0 4
57136: PPUSH
57137: LD_VAR 0 9
57141: PPUSH
57142: CALL_OW 109
// end else
57146: GO 57219
// if enemy then
57148: LD_VAR 0 5
57152: IFFALSE 57219
// begin if GetWeapon ( i ) = ru_time_lapser then
57154: LD_VAR 0 4
57158: PPUSH
57159: CALL_OW 264
57163: PUSH
57164: LD_INT 49
57166: EQUAL
57167: IFFALSE 57195
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57169: LD_VAR 0 4
57173: PPUSH
57174: LD_VAR 0 5
57178: PPUSH
57179: LD_VAR 0 4
57183: PPUSH
57184: CALL_OW 74
57188: PPUSH
57189: CALL_OW 112
57193: GO 57219
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57195: LD_VAR 0 4
57199: PPUSH
57200: LD_VAR 0 5
57204: PPUSH
57205: LD_VAR 0 4
57209: PPUSH
57210: CALL_OW 74
57214: PPUSH
57215: CALL 58294 0 2
// end ; end ;
57219: GO 56795
57221: POP
57222: POP
// end ;
57223: LD_VAR 0 3
57227: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57228: LD_INT 0
57230: PPUSH
57231: PPUSH
57232: PPUSH
// if not unit or IsInUnit ( unit ) then
57233: LD_VAR 0 1
57237: NOT
57238: PUSH
57239: LD_VAR 0 1
57243: PPUSH
57244: CALL_OW 310
57248: OR
57249: IFFALSE 57253
// exit ;
57251: GO 57344
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57253: LD_ADDR_VAR 0 4
57257: PUSH
57258: LD_VAR 0 1
57262: PPUSH
57263: CALL_OW 250
57267: PPUSH
57268: LD_VAR 0 2
57272: PPUSH
57273: LD_INT 1
57275: PPUSH
57276: CALL_OW 272
57280: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57281: LD_ADDR_VAR 0 5
57285: PUSH
57286: LD_VAR 0 1
57290: PPUSH
57291: CALL_OW 251
57295: PPUSH
57296: LD_VAR 0 2
57300: PPUSH
57301: LD_INT 1
57303: PPUSH
57304: CALL_OW 273
57308: ST_TO_ADDR
// if ValidHex ( x , y ) then
57309: LD_VAR 0 4
57313: PPUSH
57314: LD_VAR 0 5
57318: PPUSH
57319: CALL_OW 488
57323: IFFALSE 57344
// ComTurnXY ( unit , x , y ) ;
57325: LD_VAR 0 1
57329: PPUSH
57330: LD_VAR 0 4
57334: PPUSH
57335: LD_VAR 0 5
57339: PPUSH
57340: CALL_OW 118
// end ;
57344: LD_VAR 0 3
57348: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57349: LD_INT 0
57351: PPUSH
57352: PPUSH
// result := false ;
57353: LD_ADDR_VAR 0 3
57357: PUSH
57358: LD_INT 0
57360: ST_TO_ADDR
// if not units then
57361: LD_VAR 0 2
57365: NOT
57366: IFFALSE 57370
// exit ;
57368: GO 57415
// for i in units do
57370: LD_ADDR_VAR 0 4
57374: PUSH
57375: LD_VAR 0 2
57379: PUSH
57380: FOR_IN
57381: IFFALSE 57413
// if See ( side , i ) then
57383: LD_VAR 0 1
57387: PPUSH
57388: LD_VAR 0 4
57392: PPUSH
57393: CALL_OW 292
57397: IFFALSE 57411
// begin result := true ;
57399: LD_ADDR_VAR 0 3
57403: PUSH
57404: LD_INT 1
57406: ST_TO_ADDR
// exit ;
57407: POP
57408: POP
57409: GO 57415
// end ;
57411: GO 57380
57413: POP
57414: POP
// end ;
57415: LD_VAR 0 3
57419: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57420: LD_INT 0
57422: PPUSH
57423: PPUSH
57424: PPUSH
57425: PPUSH
// if not unit or not points then
57426: LD_VAR 0 1
57430: NOT
57431: PUSH
57432: LD_VAR 0 2
57436: NOT
57437: OR
57438: IFFALSE 57442
// exit ;
57440: GO 57532
// dist := 99999 ;
57442: LD_ADDR_VAR 0 5
57446: PUSH
57447: LD_INT 99999
57449: ST_TO_ADDR
// for i in points do
57450: LD_ADDR_VAR 0 4
57454: PUSH
57455: LD_VAR 0 2
57459: PUSH
57460: FOR_IN
57461: IFFALSE 57530
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57463: LD_ADDR_VAR 0 6
57467: PUSH
57468: LD_VAR 0 1
57472: PPUSH
57473: LD_VAR 0 4
57477: PUSH
57478: LD_INT 1
57480: ARRAY
57481: PPUSH
57482: LD_VAR 0 4
57486: PUSH
57487: LD_INT 2
57489: ARRAY
57490: PPUSH
57491: CALL_OW 297
57495: ST_TO_ADDR
// if tmpDist < dist then
57496: LD_VAR 0 6
57500: PUSH
57501: LD_VAR 0 5
57505: LESS
57506: IFFALSE 57528
// begin result := i ;
57508: LD_ADDR_VAR 0 3
57512: PUSH
57513: LD_VAR 0 4
57517: ST_TO_ADDR
// dist := tmpDist ;
57518: LD_ADDR_VAR 0 5
57522: PUSH
57523: LD_VAR 0 6
57527: ST_TO_ADDR
// end ; end ;
57528: GO 57460
57530: POP
57531: POP
// end ;
57532: LD_VAR 0 3
57536: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57537: LD_INT 0
57539: PPUSH
// uc_side := side ;
57540: LD_ADDR_OWVAR 20
57544: PUSH
57545: LD_VAR 0 1
57549: ST_TO_ADDR
// uc_nation := 3 ;
57550: LD_ADDR_OWVAR 21
57554: PUSH
57555: LD_INT 3
57557: ST_TO_ADDR
// vc_chassis := 25 ;
57558: LD_ADDR_OWVAR 37
57562: PUSH
57563: LD_INT 25
57565: ST_TO_ADDR
// vc_engine := engine_siberite ;
57566: LD_ADDR_OWVAR 39
57570: PUSH
57571: LD_INT 3
57573: ST_TO_ADDR
// vc_control := control_computer ;
57574: LD_ADDR_OWVAR 38
57578: PUSH
57579: LD_INT 3
57581: ST_TO_ADDR
// vc_weapon := 59 ;
57582: LD_ADDR_OWVAR 40
57586: PUSH
57587: LD_INT 59
57589: ST_TO_ADDR
// result := CreateVehicle ;
57590: LD_ADDR_VAR 0 5
57594: PUSH
57595: CALL_OW 45
57599: ST_TO_ADDR
// SetDir ( result , d ) ;
57600: LD_VAR 0 5
57604: PPUSH
57605: LD_VAR 0 4
57609: PPUSH
57610: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57614: LD_VAR 0 5
57618: PPUSH
57619: LD_VAR 0 2
57623: PPUSH
57624: LD_VAR 0 3
57628: PPUSH
57629: LD_INT 0
57631: PPUSH
57632: CALL_OW 48
// end ;
57636: LD_VAR 0 5
57640: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57641: LD_INT 0
57643: PPUSH
57644: PPUSH
57645: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57646: LD_ADDR_VAR 0 2
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57669: LD_VAR 0 1
57673: NOT
57674: PUSH
57675: LD_VAR 0 1
57679: PPUSH
57680: CALL_OW 264
57684: PUSH
57685: LD_INT 12
57687: PUSH
57688: LD_INT 51
57690: PUSH
57691: LD_INT 32
57693: PUSH
57694: LD_INT 89
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: IN
57703: NOT
57704: OR
57705: IFFALSE 57709
// exit ;
57707: GO 57807
// for i := 1 to 3 do
57709: LD_ADDR_VAR 0 3
57713: PUSH
57714: DOUBLE
57715: LD_INT 1
57717: DEC
57718: ST_TO_ADDR
57719: LD_INT 3
57721: PUSH
57722: FOR_TO
57723: IFFALSE 57805
// begin tmp := GetCargo ( cargo , i ) ;
57725: LD_ADDR_VAR 0 4
57729: PUSH
57730: LD_VAR 0 1
57734: PPUSH
57735: LD_VAR 0 3
57739: PPUSH
57740: CALL_OW 289
57744: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57745: LD_ADDR_VAR 0 2
57749: PUSH
57750: LD_VAR 0 2
57754: PPUSH
57755: LD_VAR 0 3
57759: PPUSH
57760: LD_VAR 0 4
57764: PPUSH
57765: CALL_OW 1
57769: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57770: LD_ADDR_VAR 0 2
57774: PUSH
57775: LD_VAR 0 2
57779: PPUSH
57780: LD_INT 4
57782: PPUSH
57783: LD_VAR 0 2
57787: PUSH
57788: LD_INT 4
57790: ARRAY
57791: PUSH
57792: LD_VAR 0 4
57796: PLUS
57797: PPUSH
57798: CALL_OW 1
57802: ST_TO_ADDR
// end ;
57803: GO 57722
57805: POP
57806: POP
// end ;
57807: LD_VAR 0 2
57811: RET
// export function Length ( array ) ; begin
57812: LD_INT 0
57814: PPUSH
// result := array + 0 ;
57815: LD_ADDR_VAR 0 2
57819: PUSH
57820: LD_VAR 0 1
57824: PUSH
57825: LD_INT 0
57827: PLUS
57828: ST_TO_ADDR
// end ;
57829: LD_VAR 0 2
57833: RET
// export function PrepareArray ( array ) ; begin
57834: LD_INT 0
57836: PPUSH
// result := array diff 0 ;
57837: LD_ADDR_VAR 0 2
57841: PUSH
57842: LD_VAR 0 1
57846: PUSH
57847: LD_INT 0
57849: DIFF
57850: ST_TO_ADDR
// if not result [ 1 ] then
57851: LD_VAR 0 2
57855: PUSH
57856: LD_INT 1
57858: ARRAY
57859: NOT
57860: IFFALSE 57880
// result := Delete ( result , 1 ) ;
57862: LD_ADDR_VAR 0 2
57866: PUSH
57867: LD_VAR 0 2
57871: PPUSH
57872: LD_INT 1
57874: PPUSH
57875: CALL_OW 3
57879: ST_TO_ADDR
// end ;
57880: LD_VAR 0 2
57884: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57885: LD_INT 0
57887: PPUSH
57888: PPUSH
57889: PPUSH
57890: PPUSH
// sibRocketRange := 25 ;
57891: LD_ADDR_VAR 0 6
57895: PUSH
57896: LD_INT 25
57898: ST_TO_ADDR
// result := false ;
57899: LD_ADDR_VAR 0 4
57903: PUSH
57904: LD_INT 0
57906: ST_TO_ADDR
// for i := 0 to 5 do
57907: LD_ADDR_VAR 0 5
57911: PUSH
57912: DOUBLE
57913: LD_INT 0
57915: DEC
57916: ST_TO_ADDR
57917: LD_INT 5
57919: PUSH
57920: FOR_TO
57921: IFFALSE 57988
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57923: LD_VAR 0 1
57927: PPUSH
57928: LD_VAR 0 5
57932: PPUSH
57933: LD_VAR 0 6
57937: PPUSH
57938: CALL_OW 272
57942: PPUSH
57943: LD_VAR 0 2
57947: PPUSH
57948: LD_VAR 0 5
57952: PPUSH
57953: LD_VAR 0 6
57957: PPUSH
57958: CALL_OW 273
57962: PPUSH
57963: LD_VAR 0 3
57967: PPUSH
57968: CALL_OW 309
57972: IFFALSE 57986
// begin result := true ;
57974: LD_ADDR_VAR 0 4
57978: PUSH
57979: LD_INT 1
57981: ST_TO_ADDR
// exit ;
57982: POP
57983: POP
57984: GO 57990
// end ;
57986: GO 57920
57988: POP
57989: POP
// end ;
57990: LD_VAR 0 4
57994: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57995: LD_INT 0
57997: PPUSH
57998: PPUSH
57999: PPUSH
// if btype = b_depot then
58000: LD_VAR 0 2
58004: PUSH
58005: LD_INT 0
58007: EQUAL
58008: IFFALSE 58020
// begin result := true ;
58010: LD_ADDR_VAR 0 3
58014: PUSH
58015: LD_INT 1
58017: ST_TO_ADDR
// exit ;
58018: GO 58136
// end ; pom := GetBase ( depot ) ;
58020: LD_ADDR_VAR 0 4
58024: PUSH
58025: LD_VAR 0 1
58029: PPUSH
58030: CALL_OW 274
58034: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58035: LD_ADDR_VAR 0 5
58039: PUSH
58040: LD_VAR 0 2
58044: PPUSH
58045: LD_VAR 0 1
58049: PPUSH
58050: CALL_OW 248
58054: PPUSH
58055: CALL_OW 450
58059: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58060: LD_ADDR_VAR 0 3
58064: PUSH
58065: LD_VAR 0 4
58069: PPUSH
58070: LD_INT 1
58072: PPUSH
58073: CALL_OW 275
58077: PUSH
58078: LD_VAR 0 5
58082: PUSH
58083: LD_INT 1
58085: ARRAY
58086: GREATEREQUAL
58087: PUSH
58088: LD_VAR 0 4
58092: PPUSH
58093: LD_INT 2
58095: PPUSH
58096: CALL_OW 275
58100: PUSH
58101: LD_VAR 0 5
58105: PUSH
58106: LD_INT 2
58108: ARRAY
58109: GREATEREQUAL
58110: AND
58111: PUSH
58112: LD_VAR 0 4
58116: PPUSH
58117: LD_INT 3
58119: PPUSH
58120: CALL_OW 275
58124: PUSH
58125: LD_VAR 0 5
58129: PUSH
58130: LD_INT 3
58132: ARRAY
58133: GREATEREQUAL
58134: AND
58135: ST_TO_ADDR
// end ;
58136: LD_VAR 0 3
58140: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58141: LD_INT 0
58143: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58144: LD_VAR 0 1
58148: PPUSH
58149: LD_VAR 0 2
58153: PPUSH
58154: LD_INT 0
58156: PPUSH
58157: LD_INT 0
58159: PPUSH
58160: LD_INT 1
58162: PPUSH
58163: LD_INT 0
58165: PPUSH
58166: CALL_OW 587
// end ;
58170: LD_VAR 0 3
58174: RET
// export function CenterOnNow ( unit ) ; begin
58175: LD_INT 0
58177: PPUSH
// result := IsInUnit ( unit ) ;
58178: LD_ADDR_VAR 0 2
58182: PUSH
58183: LD_VAR 0 1
58187: PPUSH
58188: CALL_OW 310
58192: ST_TO_ADDR
// if not result then
58193: LD_VAR 0 2
58197: NOT
58198: IFFALSE 58210
// result := unit ;
58200: LD_ADDR_VAR 0 2
58204: PUSH
58205: LD_VAR 0 1
58209: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58210: LD_VAR 0 1
58214: PPUSH
58215: CALL_OW 87
// end ;
58219: LD_VAR 0 2
58223: RET
// export function ComMoveHex ( unit , hex ) ; begin
58224: LD_INT 0
58226: PPUSH
// if not hex then
58227: LD_VAR 0 2
58231: NOT
58232: IFFALSE 58236
// exit ;
58234: GO 58289
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58236: LD_VAR 0 2
58240: PUSH
58241: LD_INT 1
58243: ARRAY
58244: PPUSH
58245: LD_VAR 0 2
58249: PUSH
58250: LD_INT 2
58252: ARRAY
58253: PPUSH
58254: CALL_OW 428
58258: IFFALSE 58262
// exit ;
58260: GO 58289
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58262: LD_VAR 0 1
58266: PPUSH
58267: LD_VAR 0 2
58271: PUSH
58272: LD_INT 1
58274: ARRAY
58275: PPUSH
58276: LD_VAR 0 2
58280: PUSH
58281: LD_INT 2
58283: ARRAY
58284: PPUSH
58285: CALL_OW 111
// end ;
58289: LD_VAR 0 3
58293: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58294: LD_INT 0
58296: PPUSH
58297: PPUSH
58298: PPUSH
// if not unit or not enemy then
58299: LD_VAR 0 1
58303: NOT
58304: PUSH
58305: LD_VAR 0 2
58309: NOT
58310: OR
58311: IFFALSE 58315
// exit ;
58313: GO 58439
// x := GetX ( enemy ) ;
58315: LD_ADDR_VAR 0 4
58319: PUSH
58320: LD_VAR 0 2
58324: PPUSH
58325: CALL_OW 250
58329: ST_TO_ADDR
// y := GetY ( enemy ) ;
58330: LD_ADDR_VAR 0 5
58334: PUSH
58335: LD_VAR 0 2
58339: PPUSH
58340: CALL_OW 251
58344: ST_TO_ADDR
// if ValidHex ( x , y ) then
58345: LD_VAR 0 4
58349: PPUSH
58350: LD_VAR 0 5
58354: PPUSH
58355: CALL_OW 488
58359: IFFALSE 58439
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58361: LD_VAR 0 2
58365: PPUSH
58366: CALL_OW 247
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: IN
58381: PUSH
58382: LD_VAR 0 1
58386: PPUSH
58387: CALL_OW 255
58391: PPUSH
58392: LD_VAR 0 2
58396: PPUSH
58397: CALL_OW 292
58401: OR
58402: IFFALSE 58420
// ComAttackUnit ( unit , enemy ) else
58404: LD_VAR 0 1
58408: PPUSH
58409: LD_VAR 0 2
58413: PPUSH
58414: CALL_OW 115
58418: GO 58439
// ComAgressiveMove ( unit , x , y ) ;
58420: LD_VAR 0 1
58424: PPUSH
58425: LD_VAR 0 4
58429: PPUSH
58430: LD_VAR 0 5
58434: PPUSH
58435: CALL_OW 114
// end ;
58439: LD_VAR 0 3
58443: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58444: LD_INT 0
58446: PPUSH
58447: PPUSH
58448: PPUSH
// list := AreaToList ( area , 0 ) ;
58449: LD_ADDR_VAR 0 5
58453: PUSH
58454: LD_VAR 0 1
58458: PPUSH
58459: LD_INT 0
58461: PPUSH
58462: CALL_OW 517
58466: ST_TO_ADDR
// if not list then
58467: LD_VAR 0 5
58471: NOT
58472: IFFALSE 58476
// exit ;
58474: GO 58606
// if all then
58476: LD_VAR 0 2
58480: IFFALSE 58568
// begin for i := 1 to list [ 1 ] do
58482: LD_ADDR_VAR 0 4
58486: PUSH
58487: DOUBLE
58488: LD_INT 1
58490: DEC
58491: ST_TO_ADDR
58492: LD_VAR 0 5
58496: PUSH
58497: LD_INT 1
58499: ARRAY
58500: PUSH
58501: FOR_TO
58502: IFFALSE 58564
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58504: LD_ADDR_VAR 0 3
58508: PUSH
58509: LD_VAR 0 3
58513: PPUSH
58514: LD_VAR 0 3
58518: PUSH
58519: LD_INT 1
58521: PLUS
58522: PPUSH
58523: LD_VAR 0 5
58527: PUSH
58528: LD_INT 1
58530: ARRAY
58531: PUSH
58532: LD_VAR 0 4
58536: ARRAY
58537: PUSH
58538: LD_VAR 0 5
58542: PUSH
58543: LD_INT 2
58545: ARRAY
58546: PUSH
58547: LD_VAR 0 4
58551: ARRAY
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PPUSH
58557: CALL_OW 1
58561: ST_TO_ADDR
58562: GO 58501
58564: POP
58565: POP
// exit ;
58566: GO 58606
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58568: LD_ADDR_VAR 0 3
58572: PUSH
58573: LD_VAR 0 5
58577: PUSH
58578: LD_INT 1
58580: ARRAY
58581: PUSH
58582: LD_INT 1
58584: ARRAY
58585: PUSH
58586: LD_VAR 0 5
58590: PUSH
58591: LD_INT 2
58593: ARRAY
58594: PUSH
58595: LD_INT 1
58597: ARRAY
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: EMPTY
58604: LIST
58605: ST_TO_ADDR
// end ;
58606: LD_VAR 0 3
58610: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58611: LD_INT 0
58613: PPUSH
58614: PPUSH
// list := AreaToList ( area , 0 ) ;
58615: LD_ADDR_VAR 0 4
58619: PUSH
58620: LD_VAR 0 1
58624: PPUSH
58625: LD_INT 0
58627: PPUSH
58628: CALL_OW 517
58632: ST_TO_ADDR
// if not list then
58633: LD_VAR 0 4
58637: NOT
58638: IFFALSE 58642
// exit ;
58640: GO 58683
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58642: LD_ADDR_VAR 0 3
58646: PUSH
58647: LD_VAR 0 4
58651: PUSH
58652: LD_INT 1
58654: ARRAY
58655: PUSH
58656: LD_INT 1
58658: ARRAY
58659: PUSH
58660: LD_VAR 0 4
58664: PUSH
58665: LD_INT 2
58667: ARRAY
58668: PUSH
58669: LD_INT 1
58671: ARRAY
58672: PUSH
58673: LD_VAR 0 2
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: LIST
58682: ST_TO_ADDR
// end ;
58683: LD_VAR 0 3
58687: RET
// export function First ( array ) ; begin
58688: LD_INT 0
58690: PPUSH
// if not array then
58691: LD_VAR 0 1
58695: NOT
58696: IFFALSE 58700
// exit ;
58698: GO 58714
// result := array [ 1 ] ;
58700: LD_ADDR_VAR 0 2
58704: PUSH
58705: LD_VAR 0 1
58709: PUSH
58710: LD_INT 1
58712: ARRAY
58713: ST_TO_ADDR
// end ;
58714: LD_VAR 0 2
58718: RET
// export function Last ( array ) ; begin
58719: LD_INT 0
58721: PPUSH
// if not array then
58722: LD_VAR 0 1
58726: NOT
58727: IFFALSE 58731
// exit ;
58729: GO 58747
// result := array [ array ] ;
58731: LD_ADDR_VAR 0 2
58735: PUSH
58736: LD_VAR 0 1
58740: PUSH
58741: LD_VAR 0 1
58745: ARRAY
58746: ST_TO_ADDR
// end ;
58747: LD_VAR 0 2
58751: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58752: LD_INT 0
58754: PPUSH
58755: PPUSH
// result := [ ] ;
58756: LD_ADDR_VAR 0 5
58760: PUSH
58761: EMPTY
58762: ST_TO_ADDR
// if not array then
58763: LD_VAR 0 1
58767: NOT
58768: IFFALSE 58772
// exit ;
58770: GO 58884
// for i := 1 to array do
58772: LD_ADDR_VAR 0 6
58776: PUSH
58777: DOUBLE
58778: LD_INT 1
58780: DEC
58781: ST_TO_ADDR
58782: LD_VAR 0 1
58786: PUSH
58787: FOR_TO
58788: IFFALSE 58882
// if array [ i ] [ index ] = value then
58790: LD_VAR 0 1
58794: PUSH
58795: LD_VAR 0 6
58799: ARRAY
58800: PUSH
58801: LD_VAR 0 2
58805: ARRAY
58806: PUSH
58807: LD_VAR 0 3
58811: EQUAL
58812: IFFALSE 58880
// begin if indexColumn then
58814: LD_VAR 0 4
58818: IFFALSE 58854
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58820: LD_ADDR_VAR 0 5
58824: PUSH
58825: LD_VAR 0 5
58829: PPUSH
58830: LD_VAR 0 1
58834: PUSH
58835: LD_VAR 0 6
58839: ARRAY
58840: PUSH
58841: LD_VAR 0 4
58845: ARRAY
58846: PPUSH
58847: CALL 54072 0 2
58851: ST_TO_ADDR
58852: GO 58880
// result := Join ( result , array [ i ] ) ;
58854: LD_ADDR_VAR 0 5
58858: PUSH
58859: LD_VAR 0 5
58863: PPUSH
58864: LD_VAR 0 1
58868: PUSH
58869: LD_VAR 0 6
58873: ARRAY
58874: PPUSH
58875: CALL 54072 0 2
58879: ST_TO_ADDR
// end ;
58880: GO 58787
58882: POP
58883: POP
// end ;
58884: LD_VAR 0 5
58888: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58889: LD_INT 0
58891: PPUSH
// if not vehicles or not parkingPoint then
58892: LD_VAR 0 1
58896: NOT
58897: PUSH
58898: LD_VAR 0 2
58902: NOT
58903: OR
58904: IFFALSE 58908
// exit ;
58906: GO 59006
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58908: LD_ADDR_VAR 0 1
58912: PUSH
58913: LD_VAR 0 1
58917: PPUSH
58918: LD_INT 50
58920: PUSH
58921: EMPTY
58922: LIST
58923: PUSH
58924: LD_INT 3
58926: PUSH
58927: LD_INT 92
58929: PUSH
58930: LD_VAR 0 2
58934: PUSH
58935: LD_INT 1
58937: ARRAY
58938: PUSH
58939: LD_VAR 0 2
58943: PUSH
58944: LD_INT 2
58946: ARRAY
58947: PUSH
58948: LD_INT 8
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PPUSH
58965: CALL_OW 72
58969: ST_TO_ADDR
// if not vehicles then
58970: LD_VAR 0 1
58974: NOT
58975: IFFALSE 58979
// exit ;
58977: GO 59006
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58979: LD_VAR 0 1
58983: PPUSH
58984: LD_VAR 0 2
58988: PUSH
58989: LD_INT 1
58991: ARRAY
58992: PPUSH
58993: LD_VAR 0 2
58997: PUSH
58998: LD_INT 2
59000: ARRAY
59001: PPUSH
59002: CALL_OW 111
// end ;
59006: LD_VAR 0 3
59010: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59011: LD_INT 0
59013: PPUSH
59014: PPUSH
59015: PPUSH
// if not side or not area then
59016: LD_VAR 0 1
59020: NOT
59021: PUSH
59022: LD_VAR 0 2
59026: NOT
59027: OR
59028: IFFALSE 59032
// exit ;
59030: GO 59151
// tmp := AreaToList ( area , 0 ) ;
59032: LD_ADDR_VAR 0 5
59036: PUSH
59037: LD_VAR 0 2
59041: PPUSH
59042: LD_INT 0
59044: PPUSH
59045: CALL_OW 517
59049: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59050: LD_ADDR_VAR 0 4
59054: PUSH
59055: DOUBLE
59056: LD_INT 1
59058: DEC
59059: ST_TO_ADDR
59060: LD_VAR 0 5
59064: PUSH
59065: LD_INT 1
59067: ARRAY
59068: PUSH
59069: FOR_TO
59070: IFFALSE 59149
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59072: LD_VAR 0 5
59076: PUSH
59077: LD_INT 1
59079: ARRAY
59080: PUSH
59081: LD_VAR 0 4
59085: ARRAY
59086: PPUSH
59087: LD_VAR 0 5
59091: PUSH
59092: LD_INT 2
59094: ARRAY
59095: PUSH
59096: LD_VAR 0 4
59100: ARRAY
59101: PPUSH
59102: CALL_OW 351
59106: IFFALSE 59147
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59108: LD_VAR 0 5
59112: PUSH
59113: LD_INT 1
59115: ARRAY
59116: PUSH
59117: LD_VAR 0 4
59121: ARRAY
59122: PPUSH
59123: LD_VAR 0 5
59127: PUSH
59128: LD_INT 2
59130: ARRAY
59131: PUSH
59132: LD_VAR 0 4
59136: ARRAY
59137: PPUSH
59138: LD_VAR 0 1
59142: PPUSH
59143: CALL_OW 244
// end ;
59147: GO 59069
59149: POP
59150: POP
// end ; end_of_file
59151: LD_VAR 0 3
59155: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59156: PPOPN 6
59158: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
59159: CALL 59188 0 0
// end ; end_of_file
59163: PPOPN 1
59165: END
// every 0 0$1 do
59166: GO 59168
59168: DISABLE
// begin enable ;
59169: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59170: LD_STRING updateTimer(
59172: PUSH
59173: LD_OWVAR 1
59177: STR
59178: PUSH
59179: LD_STRING );
59181: STR
59182: PPUSH
59183: CALL_OW 559
// end ;
59187: END
// export function SOS_MapStart ( ) ; begin
59188: LD_INT 0
59190: PPUSH
// UpdateFactoryWaypoints ( ) ;
59191: CALL 59560 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59195: CALL 59812 0 0
// end ;
59199: LD_VAR 0 1
59203: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59204: LD_INT 0
59206: PPUSH
// end ;
59207: LD_VAR 0 12
59211: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59212: LD_INT 0
59214: PPUSH
59215: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59216: LD_VAR 0 1
59220: NOT
59221: PUSH
59222: LD_VAR 0 2
59226: PPUSH
59227: LD_VAR 0 3
59231: PPUSH
59232: CALL_OW 488
59236: NOT
59237: OR
59238: PUSH
59239: LD_VAR 0 1
59243: PPUSH
59244: CALL_OW 266
59248: PUSH
59249: LD_INT 3
59251: NONEQUAL
59252: PUSH
59253: LD_VAR 0 1
59257: PPUSH
59258: CALL_OW 247
59262: PUSH
59263: LD_INT 1
59265: EQUAL
59266: NOT
59267: AND
59268: OR
59269: IFFALSE 59273
// exit ;
59271: GO 59555
// if GetType ( factory ) = unit_human then
59273: LD_VAR 0 1
59277: PPUSH
59278: CALL_OW 247
59282: PUSH
59283: LD_INT 1
59285: EQUAL
59286: IFFALSE 59303
// factory := IsInUnit ( factory ) ;
59288: LD_ADDR_VAR 0 1
59292: PUSH
59293: LD_VAR 0 1
59297: PPUSH
59298: CALL_OW 310
59302: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59303: LD_VAR 0 1
59307: PPUSH
59308: CALL_OW 266
59312: PUSH
59313: LD_INT 3
59315: NONEQUAL
59316: IFFALSE 59320
// exit ;
59318: GO 59555
// for i := 1 to Count ( factoryWaypoints ) do
59320: LD_ADDR_VAR 0 5
59324: PUSH
59325: DOUBLE
59326: LD_INT 1
59328: DEC
59329: ST_TO_ADDR
59330: LD_EXP 52
59334: PPUSH
59335: CALL 18463 0 1
59339: PUSH
59340: FOR_TO
59341: IFFALSE 59503
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59343: LD_VAR 0 2
59347: PPUSH
59348: LD_VAR 0 3
59352: PPUSH
59353: CALL_OW 428
59357: PUSH
59358: LD_EXP 52
59362: PUSH
59363: LD_VAR 0 5
59367: ARRAY
59368: PUSH
59369: LD_INT 2
59371: ARRAY
59372: EQUAL
59373: IFFALSE 59405
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59375: LD_ADDR_EXP 52
59379: PUSH
59380: LD_EXP 52
59384: PPUSH
59385: LD_VAR 0 5
59389: PPUSH
59390: CALL_OW 3
59394: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59395: CALL 59560 0 0
// exit ;
59399: POP
59400: POP
59401: GO 59555
// end else
59403: GO 59501
// if factory = factoryWaypoints [ i ] [ 2 ] then
59405: LD_VAR 0 1
59409: PUSH
59410: LD_EXP 52
59414: PUSH
59415: LD_VAR 0 5
59419: ARRAY
59420: PUSH
59421: LD_INT 2
59423: ARRAY
59424: EQUAL
59425: IFFALSE 59501
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59427: LD_ADDR_EXP 52
59431: PUSH
59432: LD_EXP 52
59436: PPUSH
59437: LD_VAR 0 5
59441: PPUSH
59442: CALL_OW 3
59446: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59447: LD_ADDR_EXP 52
59451: PUSH
59452: LD_EXP 52
59456: PPUSH
59457: LD_VAR 0 1
59461: PPUSH
59462: CALL_OW 255
59466: PUSH
59467: LD_VAR 0 1
59471: PUSH
59472: LD_VAR 0 2
59476: PUSH
59477: LD_VAR 0 3
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: PPUSH
59488: CALL 54072 0 2
59492: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59493: CALL 59560 0 0
// exit ;
59497: POP
59498: POP
59499: GO 59555
// end ; end ;
59501: GO 59340
59503: POP
59504: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59505: LD_ADDR_EXP 52
59509: PUSH
59510: LD_EXP 52
59514: PPUSH
59515: LD_VAR 0 1
59519: PPUSH
59520: CALL_OW 255
59524: PUSH
59525: LD_VAR 0 1
59529: PUSH
59530: LD_VAR 0 2
59534: PUSH
59535: LD_VAR 0 3
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: PPUSH
59546: CALL 54072 0 2
59550: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59551: CALL 59560 0 0
// end ;
59555: LD_VAR 0 4
59559: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59560: LD_INT 0
59562: PPUSH
59563: PPUSH
59564: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59565: LD_STRING resetFactoryWaypoint();
59567: PPUSH
59568: CALL_OW 559
// if factoryWaypoints then
59572: LD_EXP 52
59576: IFFALSE 59697
// begin list := factoryWaypoints ;
59578: LD_ADDR_VAR 0 3
59582: PUSH
59583: LD_EXP 52
59587: ST_TO_ADDR
// for i := 1 to list do
59588: LD_ADDR_VAR 0 2
59592: PUSH
59593: DOUBLE
59594: LD_INT 1
59596: DEC
59597: ST_TO_ADDR
59598: LD_VAR 0 3
59602: PUSH
59603: FOR_TO
59604: IFFALSE 59695
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59606: LD_STRING setFactoryWaypointXY(
59608: PUSH
59609: LD_VAR 0 3
59613: PUSH
59614: LD_VAR 0 2
59618: ARRAY
59619: PUSH
59620: LD_INT 1
59622: ARRAY
59623: STR
59624: PUSH
59625: LD_STRING ,
59627: STR
59628: PUSH
59629: LD_VAR 0 3
59633: PUSH
59634: LD_VAR 0 2
59638: ARRAY
59639: PUSH
59640: LD_INT 2
59642: ARRAY
59643: STR
59644: PUSH
59645: LD_STRING ,
59647: STR
59648: PUSH
59649: LD_VAR 0 3
59653: PUSH
59654: LD_VAR 0 2
59658: ARRAY
59659: PUSH
59660: LD_INT 3
59662: ARRAY
59663: STR
59664: PUSH
59665: LD_STRING ,
59667: STR
59668: PUSH
59669: LD_VAR 0 3
59673: PUSH
59674: LD_VAR 0 2
59678: ARRAY
59679: PUSH
59680: LD_INT 4
59682: ARRAY
59683: STR
59684: PUSH
59685: LD_STRING )
59687: STR
59688: PPUSH
59689: CALL_OW 559
59693: GO 59603
59695: POP
59696: POP
// end ; end ;
59697: LD_VAR 0 1
59701: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59702: LD_INT 0
59704: PPUSH
// if HexInfo ( x , y ) = warehouse then
59705: LD_VAR 0 2
59709: PPUSH
59710: LD_VAR 0 3
59714: PPUSH
59715: CALL_OW 428
59719: PUSH
59720: LD_VAR 0 1
59724: EQUAL
59725: IFFALSE 59752
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59727: LD_ADDR_EXP 53
59731: PUSH
59732: LD_EXP 53
59736: PPUSH
59737: LD_VAR 0 1
59741: PPUSH
59742: LD_INT 0
59744: PPUSH
59745: CALL_OW 1
59749: ST_TO_ADDR
59750: GO 59803
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59752: LD_ADDR_EXP 53
59756: PUSH
59757: LD_EXP 53
59761: PPUSH
59762: LD_VAR 0 1
59766: PPUSH
59767: LD_VAR 0 1
59771: PPUSH
59772: CALL_OW 255
59776: PUSH
59777: LD_VAR 0 1
59781: PUSH
59782: LD_VAR 0 2
59786: PUSH
59787: LD_VAR 0 3
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: PPUSH
59798: CALL_OW 1
59802: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59803: CALL 59812 0 0
// end ;
59807: LD_VAR 0 4
59811: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59812: LD_INT 0
59814: PPUSH
59815: PPUSH
59816: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59817: LD_STRING resetWarehouseGatheringPoints();
59819: PPUSH
59820: CALL_OW 559
// if warehouseGatheringPoints then
59824: LD_EXP 53
59828: IFFALSE 59954
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59830: LD_ADDR_VAR 0 3
59834: PUSH
59835: LD_EXP 53
59839: PPUSH
59840: CALL 57834 0 1
59844: ST_TO_ADDR
// for i := 1 to list do
59845: LD_ADDR_VAR 0 2
59849: PUSH
59850: DOUBLE
59851: LD_INT 1
59853: DEC
59854: ST_TO_ADDR
59855: LD_VAR 0 3
59859: PUSH
59860: FOR_TO
59861: IFFALSE 59952
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59863: LD_STRING setWarehouseGatheringPointXY(
59865: PUSH
59866: LD_VAR 0 3
59870: PUSH
59871: LD_VAR 0 2
59875: ARRAY
59876: PUSH
59877: LD_INT 1
59879: ARRAY
59880: STR
59881: PUSH
59882: LD_STRING ,
59884: STR
59885: PUSH
59886: LD_VAR 0 3
59890: PUSH
59891: LD_VAR 0 2
59895: ARRAY
59896: PUSH
59897: LD_INT 2
59899: ARRAY
59900: STR
59901: PUSH
59902: LD_STRING ,
59904: STR
59905: PUSH
59906: LD_VAR 0 3
59910: PUSH
59911: LD_VAR 0 2
59915: ARRAY
59916: PUSH
59917: LD_INT 3
59919: ARRAY
59920: STR
59921: PUSH
59922: LD_STRING ,
59924: STR
59925: PUSH
59926: LD_VAR 0 3
59930: PUSH
59931: LD_VAR 0 2
59935: ARRAY
59936: PUSH
59937: LD_INT 4
59939: ARRAY
59940: STR
59941: PUSH
59942: LD_STRING )
59944: STR
59945: PPUSH
59946: CALL_OW 559
59950: GO 59860
59952: POP
59953: POP
// end ; end ;
59954: LD_VAR 0 1
59958: RET
