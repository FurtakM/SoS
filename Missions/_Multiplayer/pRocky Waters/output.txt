// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2926 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3241 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 10 10$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 21000
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 51
 852: PUSH
 853: LD_INT 52
 855: PUSH
 856: LD_INT 53
 858: PUSH
 859: LD_INT 54
 861: PUSH
 862: LD_INT 55
 864: PUSH
 865: LD_INT 56
 867: PUSH
 868: LD_INT 57
 870: PUSH
 871: LD_INT 58
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 70
 891: PUSH
 892: LD_INT 71
 894: PUSH
 895: LD_INT 72
 897: PUSH
 898: LD_INT 73
 900: PUSH
 901: LD_INT 68
 903: PUSH
 904: LD_INT 69
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 31
1061: PUSH
1062: LD_INT 49
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 32
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 34
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 31
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 32
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 34
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 33
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 30
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 60
1364: PUSH
1365: LD_INT 61
1367: PUSH
1368: LD_INT 62
1370: PUSH
1371: LD_INT 63
1373: PUSH
1374: LD_INT 64
1376: PUSH
1377: LD_INT 65
1379: PUSH
1380: LD_INT 66
1382: PUSH
1383: LD_INT 67
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 1
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 74164 0 2
1411: PUSH
1412: LD_INT 2
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 74164 0 2
1422: PUSH
1423: LD_INT 3
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 74164 0 2
1433: PUSH
1434: LD_INT 4
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 74164 0 2
1444: PUSH
1445: LD_INT 5
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL 74164 0 2
1455: PUSH
1456: LD_INT 6
1458: PPUSH
1459: LD_INT 5
1461: PPUSH
1462: CALL 74164 0 2
1466: PUSH
1467: LD_INT 7
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL 74164 0 2
1477: PUSH
1478: LD_INT 8
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL 74164 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 34036 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 9
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 73997 0 2
1667: PUSH
1668: LD_INT 10
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 73997 0 2
1680: PUSH
1681: LD_INT 11
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 73997 0 2
1693: PUSH
1694: LD_INT 12
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 73997 0 2
1706: PUSH
1707: LD_INT 13
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 73997 0 2
1719: PUSH
1720: LD_INT 14
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 73997 0 2
1732: PUSH
1733: LD_INT 15
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 73997 0 2
1745: PUSH
1746: LD_INT 16
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 73997 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 17
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 73997 0 2
1810: PUSH
1811: LD_INT 18
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 73997 0 2
1823: PUSH
1824: LD_INT 19
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 73997 0 2
1836: PUSH
1837: LD_INT 20
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 73997 0 2
1849: PUSH
1850: LD_INT 21
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 73997 0 2
1862: PUSH
1863: LD_INT 22
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 73997 0 2
1875: PUSH
1876: LD_INT 23
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 73997 0 2
1888: PUSH
1889: LD_INT 24
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 73997 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 25
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 74164 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 26
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 74164 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 41
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 74164 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 27
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: CALL 74164 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 28
2017: PPUSH
2018: LD_INT 4
2020: PPUSH
2021: CALL 74164 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 42
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL 74164 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 29
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 74164 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 30
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL 74164 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 43
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 74164 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 31
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 74164 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 32
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL 74164 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 44
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 74164 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 33
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL 74164 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 34
2167: PPUSH
2168: LD_INT 2
2170: PPUSH
2171: CALL 74164 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 45
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: CALL 74164 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 35
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL 74164 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 36
2217: PPUSH
2218: LD_INT 4
2220: PPUSH
2221: CALL 74164 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 46
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 74164 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 37
2252: PPUSH
2253: LD_INT 3
2255: PPUSH
2256: CALL 74164 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 38
2267: PPUSH
2268: LD_INT 4
2270: PPUSH
2271: CALL 74164 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 47
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: CALL 74164 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 39
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL 74164 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 40
2317: PPUSH
2318: LD_INT 3
2320: PPUSH
2321: CALL 74164 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 48
2332: PPUSH
2333: LD_INT 4
2335: PPUSH
2336: CALL 74164 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2839
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 70
2569: PUSH
2570: LD_INT 71
2572: PUSH
2573: LD_INT 72
2575: PUSH
2576: LD_INT 73
2578: PUSH
2579: LD_INT 68
2581: PUSH
2582: LD_INT 69
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 51
2600: PUSH
2601: LD_INT 52
2603: PUSH
2604: LD_INT 53
2606: PUSH
2607: LD_INT 54
2609: PUSH
2610: LD_INT 55
2612: PUSH
2613: LD_INT 56
2615: PUSH
2616: LD_INT 57
2618: PUSH
2619: LD_INT 58
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 70986 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// for i in areas do
2745: LD_ADDR_VAR 0 1
2749: PUSH
2750: LD_VAR 0 4
2754: PUSH
2755: FOR_IN
2756: IFFALSE 2795
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2758: LD_VAR 0 1
2762: PPUSH
2763: LD_INT 1
2765: PPUSH
2766: CALL_OW 287
2770: PUSH
2771: LD_INT 20
2773: LESS
2774: IFFALSE 2793
// begin CreateCratesArea ( x , i , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_VAR 0 1
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 55
// end ; end ;
2793: GO 2755
2795: POP
2796: POP
// time := time + delayTime ;
2797: LD_ADDR_VAR 0 5
2801: PUSH
2802: LD_VAR 0 5
2806: PUSH
2807: LD_VAR 0 7
2811: PLUS
2812: ST_TO_ADDR
// if time > maxTime then
2813: LD_VAR 0 5
2817: PUSH
2818: LD_VAR 0 8
2822: GREATER
2823: IFFALSE 2835
// time := normalTime ;
2825: LD_ADDR_VAR 0 5
2829: PUSH
2830: LD_VAR 0 6
2834: ST_TO_ADDR
// until false ;
2835: LD_INT 0
2837: IFFALSE 2703
// end ; end_of_file
2839: PPOPN 8
2841: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: CALL 10815 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2851: LD_VAR 0 1
2855: PPUSH
2856: CALL 7535 0 1
// end ;
2860: PPOPN 1
2862: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL 10832 0 1
// end ;
2872: PPOPN 1
2874: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2875: LD_VAR 0 1
2879: PPUSH
2880: CALL 8125 0 1
2884: PPOPN 1
2886: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: LD_VAR 0 2
2896: PPUSH
2897: CALL 10873 0 2
2901: PPOPN 2
2903: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2904: LD_VAR 0 1
2908: PPUSH
2909: LD_VAR 0 2
2913: PPUSH
2914: LD_VAR 0 3
2918: PPUSH
2919: CALL 8178 0 3
2923: PPOPN 3
2925: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
// disable ( mpActive ) ;
2930: LD_INT 100
2932: DISABLE_MARKED
// disable ( mpWin ) ;
2933: LD_INT 101
2935: DISABLE_MARKED
// disable ( mpLose ) ;
2936: LD_INT 102
2938: DISABLE_MARKED
// mpGameType := 0 ;
2939: LD_ADDR_EXP 1
2943: PUSH
2944: LD_INT 0
2946: ST_TO_ADDR
// mpGameSettings := [ ] ;
2947: LD_ADDR_EXP 4
2951: PUSH
2952: EMPTY
2953: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2954: LD_ADDR_EXP 2
2958: PUSH
2959: EMPTY
2960: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2961: LD_ADDR_EXP 3
2965: PUSH
2966: EMPTY
2967: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2968: LD_ADDR_EXP 27
2972: PUSH
2973: LD_INT 2
2975: PUSH
2976: LD_INT 2
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2983: LD_ADDR_EXP 10
2987: PUSH
2988: EMPTY
2989: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2990: LD_ADDR_EXP 11
2994: PUSH
2995: EMPTY
2996: ST_TO_ADDR
// mpDepots := [ ] ;
2997: LD_ADDR_EXP 12
3001: PUSH
3002: EMPTY
3003: ST_TO_ADDR
// mpBuildings := [ ] ;
3004: LD_ADDR_EXP 15
3008: PUSH
3009: EMPTY
3010: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3011: LD_ADDR_EXP 16
3015: PUSH
3016: EMPTY
3017: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3018: LD_ADDR_EXP 17
3022: PUSH
3023: EMPTY
3024: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3025: LD_ADDR_EXP 18
3029: PUSH
3030: EMPTY
3031: ST_TO_ADDR
// mpStartingResources := [ ] ;
3032: LD_ADDR_EXP 13
3036: PUSH
3037: EMPTY
3038: ST_TO_ADDR
// mpStartPos := [ ] ;
3039: LD_ADDR_EXP 19
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3046: LD_ADDR_EXP 20
3050: PUSH
3051: LD_INT 1
3053: NEG
3054: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3055: LD_ADDR_EXP 21
3059: PUSH
3060: EMPTY
3061: ST_TO_ADDR
// mpApemans := [ ] ;
3062: LD_ADDR_EXP 28
3066: PUSH
3067: EMPTY
3068: ST_TO_ADDR
// mpApemansArea := [ ] ;
3069: LD_ADDR_EXP 29
3073: PUSH
3074: EMPTY
3075: ST_TO_ADDR
// mpRespawn := [ ] ;
3076: LD_ADDR_EXP 30
3080: PUSH
3081: EMPTY
3082: ST_TO_ADDR
// mpKingArea := 0 ;
3083: LD_ADDR_EXP 31
3087: PUSH
3088: LD_INT 0
3090: ST_TO_ADDR
// mpPoints := [ ] ;
3091: LD_ADDR_EXP 32
3095: PUSH
3096: EMPTY
3097: ST_TO_ADDR
// mpVehicles := 0 ;
3098: LD_ADDR_EXP 33
3102: PUSH
3103: LD_INT 0
3105: ST_TO_ADDR
// mpShipments := 0 ;
3106: LD_ADDR_EXP 25
3110: PUSH
3111: LD_INT 0
3113: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3114: LD_ADDR_EXP 37
3118: PUSH
3119: EMPTY
3120: PUSH
3121: EMPTY
3122: PUSH
3123: EMPTY
3124: PUSH
3125: EMPTY
3126: PUSH
3127: EMPTY
3128: PUSH
3129: EMPTY
3130: PUSH
3131: EMPTY
3132: PUSH
3133: EMPTY
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: ST_TO_ADDR
// mpEmissions := 0 ;
3145: LD_ADDR_EXP 34
3149: PUSH
3150: LD_INT 0
3152: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3153: LD_ADDR_EXP 23
3157: PUSH
3158: LD_INT 3
3160: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3161: LD_ADDR_EXP 22
3165: PUSH
3166: LD_INT 15
3168: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3169: LD_ADDR_EXP 35
3173: PUSH
3174: LD_INT 0
3176: ST_TO_ADDR
// mpGameActive := false ;
3177: LD_ADDR_EXP 36
3181: PUSH
3182: LD_INT 0
3184: ST_TO_ADDR
// mpBlockRespThread := false ;
3185: LD_ADDR_EXP 38
3189: PUSH
3190: LD_INT 0
3192: ST_TO_ADDR
// for i := 1 to 32 do
3193: LD_ADDR_VAR 0 2
3197: PUSH
3198: DOUBLE
3199: LD_INT 1
3201: DEC
3202: ST_TO_ADDR
3203: LD_INT 32
3205: PUSH
3206: FOR_TO
3207: IFFALSE 3234
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3209: LD_ADDR_EXP 4
3213: PUSH
3214: LD_EXP 4
3218: PPUSH
3219: LD_VAR 0 2
3223: PPUSH
3224: LD_INT 0
3226: PPUSH
3227: CALL_OW 1
3231: ST_TO_ADDR
3232: GO 3206
3234: POP
3235: POP
// end ;
3236: LD_VAR 0 1
3240: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3241: LD_INT 0
3243: PPUSH
3244: PPUSH
3245: PPUSH
3246: PPUSH
3247: PPUSH
3248: PPUSH
3249: PPUSH
3250: PPUSH
3251: PPUSH
3252: PPUSH
3253: PPUSH
3254: PPUSH
3255: PPUSH
3256: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3257: LD_ADDR_VAR 0 14
3261: PUSH
3262: LD_INT 1
3264: PUSH
3265: LD_INT 2
3267: PUSH
3268: LD_INT 3
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: LIST
3275: ST_TO_ADDR
// for i in gameTypes do
3276: LD_ADDR_VAR 0 2
3280: PUSH
3281: LD_VAR 0 14
3285: PUSH
3286: FOR_IN
3287: IFFALSE 3296
// disable ( i ) ;
3289: LD_VAR 0 2
3293: DISABLE_MARKED
3294: GO 3286
3296: POP
3297: POP
// if Multiplayer then
3298: LD_OWVAR 4
3302: IFFALSE 3486
// begin mpGameType := mp_game_type ;
3304: LD_ADDR_EXP 1
3308: PUSH
3309: LD_OWVAR 6
3313: ST_TO_ADDR
// your_side := mp_player_side ;
3314: LD_ADDR_OWVAR 2
3318: PUSH
3319: LD_OWVAR 7
3323: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3324: LD_ADDR_EXP 5
3328: PUSH
3329: LD_OWVAR 17
3333: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3334: LD_ADDR_EXP 6
3338: PUSH
3339: LD_OWVAR 15
3343: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3344: LD_ADDR_EXP 7
3348: PUSH
3349: LD_OWVAR 16
3353: ST_TO_ADDR
// mpTeams := mp_teams ;
3354: LD_ADDR_EXP 8
3358: PUSH
3359: LD_OWVAR 12
3363: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3364: LD_ADDR_VAR 0 2
3368: PUSH
3369: DOUBLE
3370: LD_INT 1
3372: DEC
3373: ST_TO_ADDR
3374: LD_EXP 2
3378: PPUSH
3379: CALL 34036 0 1
3383: PUSH
3384: FOR_TO
3385: IFFALSE 3461
// begin setting := mpGameSettingsKeys [ i ] ;
3387: LD_ADDR_VAR 0 12
3391: PUSH
3392: LD_EXP 2
3396: PUSH
3397: LD_VAR 0 2
3401: ARRAY
3402: ST_TO_ADDR
// if setting then
3403: LD_VAR 0 12
3407: IFFALSE 3459
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3409: LD_ADDR_EXP 4
3413: PUSH
3414: LD_EXP 4
3418: PPUSH
3419: LD_VAR 0 2
3423: PPUSH
3424: LD_EXP 3
3428: PUSH
3429: LD_VAR 0 2
3433: ARRAY
3434: PUSH
3435: LD_VAR 0 2
3439: PUSH
3440: LD_INT 1
3442: MINUS
3443: PPUSH
3444: CALL_OW 426
3448: PUSH
3449: LD_INT 1
3451: PLUS
3452: ARRAY
3453: PPUSH
3454: CALL_OW 1
3458: ST_TO_ADDR
// end ;
3459: GO 3384
3461: POP
3462: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3463: LD_ADDR_EXP 9
3467: PUSH
3468: LD_EXP 6
3472: PUSH
3473: LD_INT 0
3475: PUSH
3476: EMPTY
3477: LIST
3478: DIFF
3479: PUSH
3480: LD_INT 1
3482: GREATER
3483: ST_TO_ADDR
// end else
3484: GO 3486
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3486: LD_EXP 1
3490: PPUSH
3491: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
3495: LD_EXP 16
3499: PPUSH
3500: CALL 34036 0 1
3504: IFFALSE 3535
// begin for i in mpMarkedAreas do
3506: LD_ADDR_VAR 0 2
3510: PUSH
3511: LD_EXP 16
3515: PUSH
3516: FOR_IN
3517: IFFALSE 3533
// SetAreaMapShow ( i , 0 ) ;
3519: LD_VAR 0 2
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: CALL_OW 424
3531: GO 3516
3533: POP
3534: POP
// end ; for i := 1 to 8 do
3535: LD_ADDR_VAR 0 2
3539: PUSH
3540: DOUBLE
3541: LD_INT 1
3543: DEC
3544: ST_TO_ADDR
3545: LD_INT 8
3547: PUSH
3548: FOR_TO
3549: IFFALSE 4765
// begin if not mpSidePositions [ i ] then
3551: LD_EXP 5
3555: PUSH
3556: LD_VAR 0 2
3560: ARRAY
3561: NOT
3562: IFFALSE 3566
// continue ;
3564: GO 3548
// side := i ;
3566: LD_ADDR_VAR 0 7
3570: PUSH
3571: LD_VAR 0 2
3575: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3576: LD_ADDR_VAR 0 9
3580: PUSH
3581: LD_EXP 7
3585: PUSH
3586: LD_VAR 0 2
3590: ARRAY
3591: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3592: LD_ADDR_VAR 0 8
3596: PUSH
3597: LD_EXP 5
3601: PUSH
3602: LD_VAR 0 2
3606: ARRAY
3607: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3608: LD_EXP 10
3612: PPUSH
3613: CALL 34036 0 1
3617: IFFALSE 3694
// begin for j in mpOilDeposits [ pos ] do
3619: LD_ADDR_VAR 0 3
3623: PUSH
3624: LD_EXP 10
3628: PUSH
3629: LD_VAR 0 8
3633: ARRAY
3634: PUSH
3635: FOR_IN
3636: IFFALSE 3692
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3638: LD_VAR 0 3
3642: PUSH
3643: LD_INT 1
3645: ARRAY
3646: PPUSH
3647: LD_VAR 0 3
3651: PUSH
3652: LD_INT 2
3654: ARRAY
3655: PPUSH
3656: LD_INT 2
3658: PPUSH
3659: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3663: LD_VAR 0 3
3667: PUSH
3668: LD_INT 1
3670: ARRAY
3671: PPUSH
3672: LD_VAR 0 3
3676: PUSH
3677: LD_INT 2
3679: ARRAY
3680: PPUSH
3681: LD_VAR 0 7
3685: PPUSH
3686: CALL_OW 441
// end ;
3690: GO 3635
3692: POP
3693: POP
// end ; if Count ( mpSibDeposits ) then
3694: LD_EXP 11
3698: PPUSH
3699: CALL 34036 0 1
3703: IFFALSE 3780
// begin for j in mpSibDeposits [ pos ] do
3705: LD_ADDR_VAR 0 3
3709: PUSH
3710: LD_EXP 11
3714: PUSH
3715: LD_VAR 0 8
3719: ARRAY
3720: PUSH
3721: FOR_IN
3722: IFFALSE 3778
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3724: LD_VAR 0 3
3728: PUSH
3729: LD_INT 1
3731: ARRAY
3732: PPUSH
3733: LD_VAR 0 3
3737: PUSH
3738: LD_INT 2
3740: ARRAY
3741: PPUSH
3742: LD_INT 3
3744: PPUSH
3745: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3749: LD_VAR 0 3
3753: PUSH
3754: LD_INT 1
3756: ARRAY
3757: PPUSH
3758: LD_VAR 0 3
3762: PUSH
3763: LD_INT 2
3765: ARRAY
3766: PPUSH
3767: LD_VAR 0 7
3771: PPUSH
3772: CALL_OW 441
// end ;
3776: GO 3721
3778: POP
3779: POP
// end ; InitBc ;
3780: CALL_OW 21
// InitUc ;
3784: CALL_OW 18
// uc_side := side ;
3788: LD_ADDR_OWVAR 20
3792: PUSH
3793: LD_VAR 0 7
3797: ST_TO_ADDR
// uc_nation := nation ;
3798: LD_ADDR_OWVAR 21
3802: PUSH
3803: LD_VAR 0 9
3807: ST_TO_ADDR
// if Count ( mpDepots ) then
3808: LD_EXP 12
3812: PPUSH
3813: CALL 34036 0 1
3817: IFFALSE 3987
// begin bc_level := 0 ;
3819: LD_ADDR_OWVAR 43
3823: PUSH
3824: LD_INT 0
3826: ST_TO_ADDR
// bc_type := b_depot ;
3827: LD_ADDR_OWVAR 42
3831: PUSH
3832: LD_INT 0
3834: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3835: LD_ADDR_VAR 0 4
3839: PUSH
3840: LD_EXP 12
3844: PUSH
3845: LD_VAR 0 8
3849: ARRAY
3850: PUSH
3851: LD_INT 1
3853: ARRAY
3854: PPUSH
3855: LD_EXP 12
3859: PUSH
3860: LD_VAR 0 8
3864: ARRAY
3865: PUSH
3866: LD_INT 2
3868: ARRAY
3869: PPUSH
3870: LD_EXP 12
3874: PUSH
3875: LD_VAR 0 8
3879: ARRAY
3880: PUSH
3881: LD_INT 3
3883: ARRAY
3884: PPUSH
3885: CALL_OW 47
3889: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3890: LD_VAR 0 4
3894: PPUSH
3895: LD_STRING @
3897: PUSH
3898: LD_VAR 0 7
3902: STR
3903: PPUSH
3904: CALL_OW 500
// SetTag ( b , side ) ;
3908: LD_VAR 0 4
3912: PPUSH
3913: LD_VAR 0 7
3917: PPUSH
3918: CALL_OW 109
// if Count ( mpStartingResources ) then
3922: LD_EXP 13
3926: PPUSH
3927: CALL 34036 0 1
3931: IFFALSE 3985
// begin for j := 1 to mpStartingResources do
3933: LD_ADDR_VAR 0 3
3937: PUSH
3938: DOUBLE
3939: LD_INT 1
3941: DEC
3942: ST_TO_ADDR
3943: LD_EXP 13
3947: PUSH
3948: FOR_TO
3949: IFFALSE 3983
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3951: LD_VAR 0 4
3955: PPUSH
3956: CALL_OW 274
3960: PPUSH
3961: LD_VAR 0 3
3965: PPUSH
3966: LD_EXP 13
3970: PUSH
3971: LD_VAR 0 3
3975: ARRAY
3976: PPUSH
3977: CALL_OW 277
3981: GO 3948
3983: POP
3984: POP
// end ; end else
3985: GO 4134
// if Count ( mpStartingResources ) then
3987: LD_EXP 13
3991: PPUSH
3992: CALL 34036 0 1
3996: IFFALSE 4134
// begin for j := 1 to mpStartingResources do
3998: LD_ADDR_VAR 0 3
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_EXP 13
4012: PUSH
4013: FOR_TO
4014: IFFALSE 4132
// begin resources := mpStartingResources [ j ] ;
4016: LD_ADDR_VAR 0 13
4020: PUSH
4021: LD_EXP 13
4025: PUSH
4026: LD_VAR 0 3
4030: ARRAY
4031: ST_TO_ADDR
// repeat if resources >= 50 then
4032: LD_VAR 0 13
4036: PUSH
4037: LD_INT 50
4039: GREATEREQUAL
4040: IFFALSE 4086
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
4042: LD_VAR 0 3
4046: PPUSH
4047: LD_INT 5
4049: PPUSH
4050: LD_VAR 0 5
4054: PPUSH
4055: LD_VAR 0 6
4059: PPUSH
4060: LD_INT 4
4062: PPUSH
4063: LD_INT 0
4065: PPUSH
4066: CALL_OW 60
// resources := resources - 50 ;
4070: LD_ADDR_VAR 0 13
4074: PUSH
4075: LD_VAR 0 13
4079: PUSH
4080: LD_INT 50
4082: MINUS
4083: ST_TO_ADDR
// end else
4084: GO 4120
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
4086: LD_VAR 0 3
4090: PPUSH
4091: LD_VAR 0 13
4095: PUSH
4096: LD_INT 10
4098: DIV
4099: PPUSH
4100: LD_VAR 0 5
4104: PPUSH
4105: LD_VAR 0 6
4109: PPUSH
4110: LD_INT 4
4112: PPUSH
4113: LD_INT 0
4115: PPUSH
4116: CALL_OW 60
// until resources <= 0 ;
4120: LD_VAR 0 13
4124: PUSH
4125: LD_INT 0
4127: LESSEQUAL
4128: IFFALSE 4032
// end ;
4130: GO 4013
4132: POP
4133: POP
// end ; if Count ( mpBuildings ) then
4134: LD_EXP 15
4138: PPUSH
4139: CALL 34036 0 1
4143: IFFALSE 4221
// begin for j in mpBuildings [ pos ] do
4145: LD_ADDR_VAR 0 3
4149: PUSH
4150: LD_EXP 15
4154: PUSH
4155: LD_VAR 0 8
4159: ARRAY
4160: PUSH
4161: FOR_IN
4162: IFFALSE 4219
// begin bc_level := 0 ;
4164: LD_ADDR_OWVAR 43
4168: PUSH
4169: LD_INT 0
4171: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4172: LD_ADDR_OWVAR 42
4176: PUSH
4177: LD_VAR 0 3
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4186: LD_VAR 0 3
4190: PUSH
4191: LD_INT 2
4193: ARRAY
4194: PPUSH
4195: LD_VAR 0 3
4199: PUSH
4200: LD_INT 3
4202: ARRAY
4203: PPUSH
4204: LD_VAR 0 3
4208: PUSH
4209: LD_INT 4
4211: ARRAY
4212: PPUSH
4213: CALL_OW 47
// end ;
4217: GO 4161
4219: POP
4220: POP
// end ; if mpBattleFlag > - 1 then
4221: LD_EXP 20
4225: PUSH
4226: LD_INT 1
4228: NEG
4229: GREATER
4230: IFFALSE 4389
// begin x := mpStartPos [ pos ] [ 1 ] ;
4232: LD_ADDR_VAR 0 5
4236: PUSH
4237: LD_EXP 19
4241: PUSH
4242: LD_VAR 0 8
4246: ARRAY
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4252: LD_ADDR_VAR 0 6
4256: PUSH
4257: LD_EXP 19
4261: PUSH
4262: LD_VAR 0 8
4266: ARRAY
4267: PUSH
4268: LD_INT 2
4270: ARRAY
4271: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4272: LD_VAR 0 5
4276: PPUSH
4277: LD_VAR 0 6
4281: PPUSH
4282: LD_INT 12
4284: PPUSH
4285: LD_INT 2
4287: PPUSH
4288: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4292: LD_ADDR_EXP 21
4296: PUSH
4297: LD_EXP 21
4301: PPUSH
4302: LD_VAR 0 7
4306: PPUSH
4307: LD_VAR 0 7
4311: PPUSH
4312: LD_VAR 0 5
4316: PPUSH
4317: LD_VAR 0 6
4321: PPUSH
4322: LD_INT 1
4324: PUSH
4325: LD_INT 100
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: LD_INT 2
4334: PUSH
4335: LD_INT 70
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PUSH
4342: LD_INT 3
4344: PUSH
4345: LD_INT 40
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: PUSH
4352: LD_INT 10
4354: PUSH
4355: LD_INT 25
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: PUSH
4362: LD_INT 20
4364: PUSH
4365: LD_INT 100
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 418
4383: PPUSH
4384: CALL_OW 1
4388: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4389: LD_EXP 24
4393: PUSH
4394: LD_INT 20
4396: PPUSH
4397: LD_VAR 0 7
4401: PPUSH
4402: CALL_OW 321
4406: PUSH
4407: LD_INT 1
4409: EQUAL
4410: AND
4411: IFFALSE 4428
// SetTech ( tech_SibDet , side , state_researched ) ;
4413: LD_INT 20
4415: PPUSH
4416: LD_VAR 0 7
4420: PPUSH
4421: LD_INT 2
4423: PPUSH
4424: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4428: LD_INT 24
4430: PPUSH
4431: LD_VAR 0 7
4435: PPUSH
4436: LD_INT 0
4438: PPUSH
4439: CALL_OW 322
// if mpSibBomb = 1 then
4443: LD_EXP 26
4447: PUSH
4448: LD_INT 1
4450: EQUAL
4451: IFFALSE 4470
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4453: LD_INT 25
4455: PPUSH
4456: LD_VAR 0 7
4460: PPUSH
4461: LD_INT 1
4463: PPUSH
4464: CALL_OW 322
// end else
4468: GO 4485
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4470: LD_INT 25
4472: PPUSH
4473: LD_VAR 0 7
4477: PPUSH
4478: LD_INT 0
4480: PPUSH
4481: CALL_OW 322
// end ; if mpVehicles then
4485: LD_EXP 33
4489: IFFALSE 4588
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_VAR 0 7
4500: PPUSH
4501: LD_VAR 0 9
4505: PPUSH
4506: LD_EXP 33
4510: PPUSH
4511: CALL 5447 0 3
4515: PUSH
4516: FOR_IN
4517: IFFALSE 4586
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4519: LD_VAR 0 3
4523: PPUSH
4524: LD_INT 0
4526: PPUSH
4527: LD_INT 5
4529: PPUSH
4530: CALL_OW 12
4534: PPUSH
4535: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_EXP 19
4548: PUSH
4549: LD_VAR 0 8
4553: ARRAY
4554: PUSH
4555: LD_INT 1
4557: ARRAY
4558: PPUSH
4559: LD_EXP 19
4563: PUSH
4564: LD_VAR 0 8
4568: ARRAY
4569: PUSH
4570: LD_INT 2
4572: ARRAY
4573: PPUSH
4574: LD_INT 12
4576: PPUSH
4577: LD_INT 0
4579: PPUSH
4580: CALL_OW 50
// end ;
4584: GO 4516
4586: POP
4587: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4588: LD_ADDR_VAR 0 11
4592: PUSH
4593: LD_VAR 0 7
4597: PPUSH
4598: LD_VAR 0 9
4602: PPUSH
4603: LD_EXP 22
4607: PPUSH
4608: LD_EXP 23
4612: PPUSH
4613: CALL 5177 0 4
4617: ST_TO_ADDR
// for j in team do
4618: LD_ADDR_VAR 0 3
4622: PUSH
4623: LD_VAR 0 11
4627: PUSH
4628: FOR_IN
4629: IFFALSE 4678
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4631: LD_VAR 0 3
4635: PPUSH
4636: LD_EXP 19
4640: PUSH
4641: LD_VAR 0 8
4645: ARRAY
4646: PUSH
4647: LD_INT 1
4649: ARRAY
4650: PPUSH
4651: LD_EXP 19
4655: PUSH
4656: LD_VAR 0 8
4660: ARRAY
4661: PUSH
4662: LD_INT 2
4664: ARRAY
4665: PPUSH
4666: LD_INT 12
4668: PPUSH
4669: LD_INT 0
4671: PPUSH
4672: CALL_OW 50
4676: GO 4628
4678: POP
4679: POP
// if mpApemans then
4680: LD_EXP 28
4684: IFFALSE 4763
// begin for j := 1 to mpApemans do
4686: LD_ADDR_VAR 0 3
4690: PUSH
4691: DOUBLE
4692: LD_INT 1
4694: DEC
4695: ST_TO_ADDR
4696: LD_EXP 28
4700: PUSH
4701: FOR_TO
4702: IFFALSE 4761
// begin PrepareApeman ( - 5 ) ;
4704: LD_INT 5
4706: NEG
4707: PPUSH
4708: CALL 65893 0 1
// ape := CreateHuman ;
4712: LD_ADDR_VAR 0 10
4716: PUSH
4717: CALL_OW 44
4721: ST_TO_ADDR
// SetTag ( ape , side ) ;
4722: LD_VAR 0 10
4726: PPUSH
4727: LD_VAR 0 7
4731: PPUSH
4732: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4736: LD_VAR 0 10
4740: PPUSH
4741: LD_EXP 29
4745: PUSH
4746: LD_VAR 0 8
4750: ARRAY
4751: PPUSH
4752: LD_INT 0
4754: PPUSH
4755: CALL_OW 49
// end ;
4759: GO 4701
4761: POP
4762: POP
// end ; end ;
4763: GO 3548
4765: POP
4766: POP
// if not mpTeamGame then
4767: LD_EXP 9
4771: NOT
4772: IFFALSE 4870
// begin for i := 1 to 8 do
4774: LD_ADDR_VAR 0 2
4778: PUSH
4779: DOUBLE
4780: LD_INT 1
4782: DEC
4783: ST_TO_ADDR
4784: LD_INT 8
4786: PUSH
4787: FOR_TO
4788: IFFALSE 4866
// for j := 1 to 8 do
4790: LD_ADDR_VAR 0 3
4794: PUSH
4795: DOUBLE
4796: LD_INT 1
4798: DEC
4799: ST_TO_ADDR
4800: LD_INT 8
4802: PUSH
4803: FOR_TO
4804: IFFALSE 4862
// if i <> j then
4806: LD_VAR 0 2
4810: PUSH
4811: LD_VAR 0 3
4815: NONEQUAL
4816: IFFALSE 4840
// SetAttitude ( i , j , att_neutral , true ) else
4818: LD_VAR 0 2
4822: PPUSH
4823: LD_VAR 0 3
4827: PPUSH
4828: LD_INT 0
4830: PPUSH
4831: LD_INT 1
4833: PPUSH
4834: CALL_OW 80
4838: GO 4860
// SetAttitude ( i , j , att_friend , true ) ;
4840: LD_VAR 0 2
4844: PPUSH
4845: LD_VAR 0 3
4849: PPUSH
4850: LD_INT 1
4852: PPUSH
4853: LD_INT 1
4855: PPUSH
4856: CALL_OW 80
4860: GO 4803
4862: POP
4863: POP
4864: GO 4787
4866: POP
4867: POP
// end else
4868: GO 5045
// begin if mpSharedVision then
4870: LD_EXP 14
4874: IFFALSE 4939
// begin for i in mpTeams do
4876: LD_ADDR_VAR 0 2
4880: PUSH
4881: LD_EXP 8
4885: PUSH
4886: FOR_IN
4887: IFFALSE 4937
// for j := 2 to i do
4889: LD_ADDR_VAR 0 3
4893: PUSH
4894: DOUBLE
4895: LD_INT 2
4897: DEC
4898: ST_TO_ADDR
4899: LD_VAR 0 2
4903: PUSH
4904: FOR_TO
4905: IFFALSE 4933
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4907: LD_VAR 0 2
4911: PUSH
4912: LD_VAR 0 3
4916: ARRAY
4917: PPUSH
4918: LD_VAR 0 2
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: CALL_OW 343
4931: GO 4904
4933: POP
4934: POP
4935: GO 4886
4937: POP
4938: POP
// end ; for i := 1 to 8 do
4939: LD_ADDR_VAR 0 2
4943: PUSH
4944: DOUBLE
4945: LD_INT 1
4947: DEC
4948: ST_TO_ADDR
4949: LD_INT 8
4951: PUSH
4952: FOR_TO
4953: IFFALSE 5043
// for j := 1 to 8 do
4955: LD_ADDR_VAR 0 3
4959: PUSH
4960: DOUBLE
4961: LD_INT 1
4963: DEC
4964: ST_TO_ADDR
4965: LD_INT 8
4967: PUSH
4968: FOR_TO
4969: IFFALSE 5039
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4971: LD_EXP 6
4975: PUSH
4976: LD_VAR 0 2
4980: ARRAY
4981: PUSH
4982: LD_EXP 6
4986: PUSH
4987: LD_VAR 0 3
4991: ARRAY
4992: EQUAL
4993: IFFALSE 5017
// SetAttitude ( i , j , att_friend , true ) else
4995: LD_VAR 0 2
4999: PPUSH
5000: LD_VAR 0 3
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: LD_INT 1
5010: PPUSH
5011: CALL_OW 80
5015: GO 5037
// SetAttitude ( i , j , att_enemy , true ) ;
5017: LD_VAR 0 2
5021: PPUSH
5022: LD_VAR 0 3
5026: PPUSH
5027: LD_INT 2
5029: PPUSH
5030: LD_INT 1
5032: PPUSH
5033: CALL_OW 80
5037: GO 4968
5039: POP
5040: POP
5041: GO 4952
5043: POP
5044: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5045: LD_ADDR_OWVAR 71
5049: PUSH
5050: LD_EXP 7
5054: PUSH
5055: LD_OWVAR 2
5059: ARRAY
5060: ST_TO_ADDR
// if IAmSpec then
5061: CALL_OW 531
5065: IFFALSE 5106
// begin FogOff ( true ) ;
5067: LD_INT 1
5069: PPUSH
5070: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5074: LD_EXP 27
5078: PUSH
5079: LD_INT 1
5081: ARRAY
5082: PUSH
5083: LD_INT 2
5085: DIV
5086: PPUSH
5087: LD_EXP 27
5091: PUSH
5092: LD_INT 2
5094: ARRAY
5095: PUSH
5096: LD_INT 2
5098: DIV
5099: PPUSH
5100: CALL_OW 86
// end else
5104: GO 5152
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5106: LD_EXP 19
5110: PUSH
5111: LD_EXP 5
5115: PUSH
5116: LD_OWVAR 2
5120: ARRAY
5121: ARRAY
5122: PUSH
5123: LD_INT 1
5125: ARRAY
5126: PPUSH
5127: LD_EXP 19
5131: PUSH
5132: LD_EXP 5
5136: PUSH
5137: LD_OWVAR 2
5141: ARRAY
5142: ARRAY
5143: PUSH
5144: LD_INT 2
5146: ARRAY
5147: PPUSH
5148: CALL_OW 86
// end ; BeginBuildUp ;
5152: CALL 5925 0 0
// enable ( mpActive ) ;
5156: LD_INT 100
5158: ENABLE_MARKED
// enable ( mpGameType ) ;
5159: LD_EXP 1
5163: ENABLE_MARKED
// mpGameActive := true ;
5164: LD_ADDR_EXP 36
5168: PUSH
5169: LD_INT 1
5171: ST_TO_ADDR
// end ;
5172: LD_VAR 0 1
5176: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , class ; begin
5177: LD_INT 0
5179: PPUSH
5180: PPUSH
5181: PPUSH
// result := [ ] ;
5182: LD_ADDR_VAR 0 5
5186: PUSH
5187: EMPTY
5188: ST_TO_ADDR
// class := class_soldier ;
5189: LD_ADDR_VAR 0 7
5193: PUSH
5194: LD_INT 1
5196: ST_TO_ADDR
// uc_side := side ;
5197: LD_ADDR_OWVAR 20
5201: PUSH
5202: LD_VAR 0 1
5206: ST_TO_ADDR
// uc_nation := nation ;
5207: LD_ADDR_OWVAR 21
5211: PUSH
5212: LD_VAR 0 2
5216: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5217: LD_ADDR_OWVAR 26
5221: PUSH
5222: LD_OWVAR 19
5226: PUSH
5227: LD_VAR 0 1
5231: ARRAY
5232: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5233: LD_INT 1
5235: PPUSH
5236: LD_INT 2
5238: PPUSH
5239: CALL_OW 12
5243: PPUSH
5244: LD_VAR 0 7
5248: PPUSH
5249: LD_VAR 0 4
5253: PUSH
5254: LD_INT 2
5256: PLUS
5257: PPUSH
5258: CALL_OW 380
// hc_importance := 105 ;
5262: LD_ADDR_OWVAR 32
5266: PUSH
5267: LD_INT 105
5269: ST_TO_ADDR
// if Multiplayer then
5270: LD_OWVAR 4
5274: IFFALSE 5314
// begin hc_gallery := MULTIAVATARS ;
5276: LD_ADDR_OWVAR 33
5280: PUSH
5281: LD_STRING MULTIAVATARS
5283: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5284: LD_ADDR_OWVAR 34
5288: PUSH
5289: LD_VAR 0 1
5293: PPUSH
5294: CALL_OW 525
5298: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5299: LD_ADDR_OWVAR 27
5303: PUSH
5304: LD_VAR 0 1
5308: PPUSH
5309: CALL_OW 526
5313: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5314: LD_ADDR_VAR 0 5
5318: PUSH
5319: LD_VAR 0 5
5323: PPUSH
5324: CALL_OW 44
5328: PPUSH
5329: CALL 69625 0 2
5333: ST_TO_ADDR
// InitHc_All ( ) ;
5334: CALL_OW 584
// class := 2 ;
5338: LD_ADDR_VAR 0 7
5342: PUSH
5343: LD_INT 2
5345: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5346: LD_ADDR_VAR 0 6
5350: PUSH
5351: DOUBLE
5352: LD_INT 1
5354: DEC
5355: ST_TO_ADDR
5356: LD_VAR 0 3
5360: PUSH
5361: LD_INT 1
5363: MINUS
5364: PUSH
5365: FOR_TO
5366: IFFALSE 5440
// begin PrepareHuman ( false , class , skill ) ;
5368: LD_INT 0
5370: PPUSH
5371: LD_VAR 0 7
5375: PPUSH
5376: LD_VAR 0 4
5380: PPUSH
5381: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
5385: LD_ADDR_VAR 0 5
5389: PUSH
5390: LD_VAR 0 5
5394: PPUSH
5395: CALL_OW 44
5399: PPUSH
5400: CALL 69625 0 2
5404: ST_TO_ADDR
// class := Inc ( class ) ;
5405: LD_ADDR_VAR 0 7
5409: PUSH
5410: LD_VAR 0 7
5414: PPUSH
5415: CALL 70986 0 1
5419: ST_TO_ADDR
// if class = 5 then
5420: LD_VAR 0 7
5424: PUSH
5425: LD_INT 5
5427: EQUAL
5428: IFFALSE 5438
// class := 1 ;
5430: LD_ADDR_VAR 0 7
5434: PUSH
5435: LD_INT 1
5437: ST_TO_ADDR
// end ;
5438: GO 5365
5440: POP
5441: POP
// end ;
5442: LD_VAR 0 5
5446: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5447: LD_INT 0
5449: PPUSH
5450: PPUSH
// result := [ ] ;
5451: LD_ADDR_VAR 0 4
5455: PUSH
5456: EMPTY
5457: ST_TO_ADDR
// if not vehicles then
5458: LD_VAR 0 3
5462: NOT
5463: IFFALSE 5467
// exit ;
5465: GO 5626
// for i := 1 to vehicles [ nation ] do
5467: LD_ADDR_VAR 0 5
5471: PUSH
5472: DOUBLE
5473: LD_INT 1
5475: DEC
5476: ST_TO_ADDR
5477: LD_VAR 0 3
5481: PUSH
5482: LD_VAR 0 2
5486: ARRAY
5487: PUSH
5488: FOR_TO
5489: IFFALSE 5624
// begin uc_side := side ;
5491: LD_ADDR_OWVAR 20
5495: PUSH
5496: LD_VAR 0 1
5500: ST_TO_ADDR
// uc_nation := nation ;
5501: LD_ADDR_OWVAR 21
5505: PUSH
5506: LD_VAR 0 2
5510: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5511: LD_VAR 0 3
5515: PUSH
5516: LD_VAR 0 2
5520: ARRAY
5521: PUSH
5522: LD_VAR 0 5
5526: ARRAY
5527: PUSH
5528: LD_INT 1
5530: ARRAY
5531: PPUSH
5532: LD_VAR 0 3
5536: PUSH
5537: LD_VAR 0 2
5541: ARRAY
5542: PUSH
5543: LD_VAR 0 5
5547: ARRAY
5548: PUSH
5549: LD_INT 2
5551: ARRAY
5552: PPUSH
5553: LD_VAR 0 3
5557: PUSH
5558: LD_VAR 0 2
5562: ARRAY
5563: PUSH
5564: LD_VAR 0 5
5568: ARRAY
5569: PUSH
5570: LD_INT 3
5572: ARRAY
5573: PPUSH
5574: LD_VAR 0 3
5578: PUSH
5579: LD_VAR 0 2
5583: ARRAY
5584: PUSH
5585: LD_VAR 0 5
5589: ARRAY
5590: PUSH
5591: LD_INT 4
5593: ARRAY
5594: PPUSH
5595: LD_INT 80
5597: PPUSH
5598: CALL 36774 0 5
// result := Join ( result , CreateVehicle ) ;
5602: LD_ADDR_VAR 0 4
5606: PUSH
5607: LD_VAR 0 4
5611: PPUSH
5612: CALL_OW 45
5616: PPUSH
5617: CALL 69625 0 2
5621: ST_TO_ADDR
// end ;
5622: GO 5488
5624: POP
5625: POP
// end ;
5626: LD_VAR 0 4
5630: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5631: LD_INT 0
5633: PPUSH
5634: PPUSH
// for i in mpBattleFlags do
5635: LD_ADDR_VAR 0 3
5639: PUSH
5640: LD_EXP 21
5644: PUSH
5645: FOR_IN
5646: IFFALSE 5723
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5648: LD_VAR 0 3
5652: PPUSH
5653: LD_INT 1
5655: PUSH
5656: LD_VAR 0 1
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: PUSH
5665: LD_INT 2
5667: PUSH
5668: LD_VAR 0 1
5672: PUSH
5673: LD_REAL  7.00000000000000E-0001
5676: MUL
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 3
5684: PUSH
5685: LD_VAR 0 1
5689: PUSH
5690: LD_REAL  4.00000000000000E-0001
5693: MUL
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: LD_INT 20
5701: PUSH
5702: LD_VAR 0 1
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: PPUSH
5717: CALL_OW 423
5721: GO 5645
5723: POP
5724: POP
// end ;
5725: LD_VAR 0 2
5729: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5730: LD_INT 100
5732: IFFALSE 5827
5734: GO 5736
5736: DISABLE
5737: LD_INT 0
5739: PPUSH
5740: PPUSH
// begin if mpBattleFlag <= 0 then
5741: LD_EXP 20
5745: PUSH
5746: LD_INT 0
5748: LESSEQUAL
5749: IFFALSE 5753
// exit ;
5751: GO 5827
// strength := 100 ;
5753: LD_ADDR_VAR 0 2
5757: PUSH
5758: LD_INT 100
5760: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5761: LD_EXP 20
5765: PPUSH
5766: CALL_OW 67
// strength := Dec ( strength ) ;
5770: LD_ADDR_VAR 0 2
5774: PUSH
5775: LD_VAR 0 2
5779: PPUSH
5780: CALL 71008 0 1
5784: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5785: LD_VAR 0 2
5789: PPUSH
5790: CALL 5631 0 1
// until not strength ;
5794: LD_VAR 0 2
5798: NOT
5799: IFFALSE 5761
// for i in mpBattleFlags do
5801: LD_ADDR_VAR 0 1
5805: PUSH
5806: LD_EXP 21
5810: PUSH
5811: FOR_IN
5812: IFFALSE 5825
// KillBattleFlag ( i ) ;
5814: LD_VAR 0 1
5818: PPUSH
5819: CALL_OW 419
5823: GO 5811
5825: POP
5826: POP
// end ;
5827: PPOPN 2
5829: END
// every 0 0$1 marked mpActive do var side , tmp ;
5830: GO 5832
5832: DISABLE
5833: LD_INT 0
5835: PPUSH
5836: PPUSH
// begin if mpSibBomb <= 1 then
5837: LD_EXP 26
5841: PUSH
5842: LD_INT 1
5844: LESSEQUAL
5845: IFFALSE 5849
// exit ;
5847: GO 5922
// tmp := mpSibBomb ;
5849: LD_ADDR_VAR 0 2
5853: PUSH
5854: LD_EXP 26
5858: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5859: LD_INT 35
5861: PPUSH
5862: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5866: LD_ADDR_VAR 0 2
5870: PUSH
5871: LD_VAR 0 2
5875: PUSH
5876: LD_INT 35
5878: MINUS
5879: ST_TO_ADDR
// until not tmp ;
5880: LD_VAR 0 2
5884: NOT
5885: IFFALSE 5859
// for side := 1 to 8 do
5887: LD_ADDR_VAR 0 1
5891: PUSH
5892: DOUBLE
5893: LD_INT 1
5895: DEC
5896: ST_TO_ADDR
5897: LD_INT 8
5899: PUSH
5900: FOR_TO
5901: IFFALSE 5920
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5903: LD_INT 25
5905: PPUSH
5906: LD_VAR 0 1
5910: PPUSH
5911: LD_INT 1
5913: PPUSH
5914: CALL_OW 322
5918: GO 5900
5920: POP
5921: POP
// end ;
5922: PPOPN 2
5924: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5925: LD_INT 0
5927: PPUSH
5928: PPUSH
5929: PPUSH
// mpBuildUpTimeDelay := 0 ;
5930: LD_ADDR_EXP 39
5934: PUSH
5935: LD_INT 0
5937: ST_TO_ADDR
// if not mpBuildUpTime then
5938: LD_EXP 18
5942: NOT
5943: IFFALSE 5947
// exit ;
5945: GO 6130
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
5947: LD_ADDR_EXP 39
5951: PUSH
5952: LD_INT 8400
5954: PUSH
5955: LD_INT 2100
5957: PUSH
5958: LD_EXP 18
5962: MUL
5963: PLUS
5964: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
5965: LD_ADDR_EXP 40
5969: PUSH
5970: LD_INT 1
5972: ST_TO_ADDR
// for i := 1 to 8 do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_INT 8
5985: PUSH
5986: FOR_TO
5987: IFFALSE 6128
// if mpSidePositions [ i ] then
5989: LD_EXP 5
5993: PUSH
5994: LD_VAR 0 2
5998: ARRAY
5999: IFFALSE 6126
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6001: LD_EXP 17
6005: PUSH
6006: LD_EXP 5
6010: PUSH
6011: LD_VAR 0 2
6015: ARRAY
6016: ARRAY
6017: PPUSH
6018: LD_INT 5
6020: PPUSH
6021: CALL_OW 424
// for j := 1 to 8 do
6025: LD_ADDR_VAR 0 3
6029: PUSH
6030: DOUBLE
6031: LD_INT 1
6033: DEC
6034: ST_TO_ADDR
6035: LD_INT 8
6037: PUSH
6038: FOR_TO
6039: IFFALSE 6124
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6041: LD_EXP 5
6045: PUSH
6046: LD_VAR 0 3
6050: ARRAY
6051: PUSH
6052: LD_EXP 6
6056: PUSH
6057: LD_VAR 0 2
6061: ARRAY
6062: PUSH
6063: LD_EXP 6
6067: PUSH
6068: LD_VAR 0 3
6072: ARRAY
6073: NONEQUAL
6074: PUSH
6075: LD_EXP 9
6079: NOT
6080: PUSH
6081: LD_VAR 0 2
6085: PUSH
6086: LD_VAR 0 3
6090: NONEQUAL
6091: AND
6092: OR
6093: AND
6094: IFFALSE 6122
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6096: LD_VAR 0 3
6100: PPUSH
6101: LD_EXP 17
6105: PUSH
6106: LD_EXP 5
6110: PUSH
6111: LD_VAR 0 2
6115: ARRAY
6116: ARRAY
6117: PPUSH
6118: CALL_OW 333
6122: GO 6038
6124: POP
6125: POP
// end ;
6126: GO 5986
6128: POP
6129: POP
// end ;
6130: LD_VAR 0 1
6134: RET
// function EndBuildUp ; var i , j ; begin
6135: LD_INT 0
6137: PPUSH
6138: PPUSH
6139: PPUSH
// mpBuildUpTimeActive := false ;
6140: LD_ADDR_EXP 40
6144: PUSH
6145: LD_INT 0
6147: ST_TO_ADDR
// for i := 1 to 8 do
6148: LD_ADDR_VAR 0 2
6152: PUSH
6153: DOUBLE
6154: LD_INT 1
6156: DEC
6157: ST_TO_ADDR
6158: LD_INT 8
6160: PUSH
6161: FOR_TO
6162: IFFALSE 6303
// if mpSidePositions [ i ] then
6164: LD_EXP 5
6168: PUSH
6169: LD_VAR 0 2
6173: ARRAY
6174: IFFALSE 6301
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6176: LD_EXP 17
6180: PUSH
6181: LD_EXP 5
6185: PUSH
6186: LD_VAR 0 2
6190: ARRAY
6191: ARRAY
6192: PPUSH
6193: LD_INT 0
6195: PPUSH
6196: CALL_OW 424
// for j := 1 to 8 do
6200: LD_ADDR_VAR 0 3
6204: PUSH
6205: DOUBLE
6206: LD_INT 1
6208: DEC
6209: ST_TO_ADDR
6210: LD_INT 8
6212: PUSH
6213: FOR_TO
6214: IFFALSE 6299
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6216: LD_EXP 5
6220: PUSH
6221: LD_VAR 0 3
6225: ARRAY
6226: PUSH
6227: LD_EXP 6
6231: PUSH
6232: LD_VAR 0 2
6236: ARRAY
6237: PUSH
6238: LD_EXP 6
6242: PUSH
6243: LD_VAR 0 3
6247: ARRAY
6248: NONEQUAL
6249: PUSH
6250: LD_EXP 9
6254: NOT
6255: PUSH
6256: LD_VAR 0 2
6260: PUSH
6261: LD_VAR 0 3
6265: NONEQUAL
6266: AND
6267: OR
6268: AND
6269: IFFALSE 6297
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6271: LD_VAR 0 3
6275: PPUSH
6276: LD_EXP 17
6280: PUSH
6281: LD_EXP 5
6285: PUSH
6286: LD_VAR 0 2
6290: ARRAY
6291: ARRAY
6292: PPUSH
6293: CALL_OW 334
6297: GO 6213
6299: POP
6300: POP
// end ;
6301: GO 6161
6303: POP
6304: POP
// end ;
6305: LD_VAR 0 1
6309: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6310: LD_EXP 40
6314: IFFALSE 6489
6316: GO 6318
6318: DISABLE
6319: LD_INT 0
6321: PPUSH
6322: PPUSH
// begin for i := 1 to 8 do
6323: LD_ADDR_VAR 0 1
6327: PUSH
6328: DOUBLE
6329: LD_INT 1
6331: DEC
6332: ST_TO_ADDR
6333: LD_INT 8
6335: PUSH
6336: FOR_TO
6337: IFFALSE 6486
// if mpSidePositions [ i ] then
6339: LD_EXP 5
6343: PUSH
6344: LD_VAR 0 1
6348: ARRAY
6349: IFFALSE 6484
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6351: LD_ADDR_VAR 0 2
6355: PUSH
6356: LD_EXP 17
6360: PUSH
6361: LD_EXP 5
6365: PUSH
6366: LD_VAR 0 1
6370: ARRAY
6371: ARRAY
6372: PPUSH
6373: LD_INT 2
6375: PUSH
6376: LD_INT 21
6378: PUSH
6379: LD_INT 1
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 21
6388: PUSH
6389: LD_INT 2
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 22
6403: PUSH
6404: LD_OWVAR 2
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: PPUSH
6417: CALL_OW 70
6421: PUSH
6422: FOR_IN
6423: IFFALSE 6482
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6425: LD_EXP 6
6429: PUSH
6430: LD_VAR 0 1
6434: ARRAY
6435: PUSH
6436: LD_EXP 6
6440: PUSH
6441: LD_OWVAR 2
6445: ARRAY
6446: NONEQUAL
6447: PUSH
6448: LD_EXP 9
6452: NOT
6453: PUSH
6454: LD_VAR 0 1
6458: PUSH
6459: LD_OWVAR 2
6463: NONEQUAL
6464: AND
6465: OR
6466: IFFALSE 6480
// ComMoveToArea ( un , BuildUpEscape ) ;
6468: LD_VAR 0 2
6472: PPUSH
6473: LD_INT 59
6475: PPUSH
6476: CALL_OW 113
6480: GO 6422
6482: POP
6483: POP
6484: GO 6336
6486: POP
6487: POP
// enable ;
6488: ENABLE
// end ;
6489: PPOPN 2
6491: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6492: LD_EXP 18
6496: IFFALSE 6546
6498: GO 6500
6500: DISABLE
6501: LD_INT 0
6503: PPUSH
// begin tmp := mpBuildUpTime ;
6504: LD_ADDR_VAR 0 1
6508: PUSH
6509: LD_EXP 18
6513: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6514: LD_INT 35
6516: PPUSH
6517: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6521: LD_ADDR_VAR 0 1
6525: PUSH
6526: LD_VAR 0 1
6530: PUSH
6531: LD_INT 35
6533: MINUS
6534: ST_TO_ADDR
// until not tmp ;
6535: LD_VAR 0 1
6539: NOT
6540: IFFALSE 6514
// EndBuildUp ;
6542: CALL 6135 0 0
// end ;
6546: PPOPN 1
6548: END
// every 0 0$1 trigger mpActive marked mpWin do
6549: LD_INT 100
6551: IFFALSE 6585
6553: GO 6555
6555: DISABLE
// begin if IAmServer then
6556: CALL_OW 518
6560: IFFALSE 6569
// wait ( 0 0$3 ) ;
6562: LD_INT 105
6564: PPUSH
6565: CALL_OW 67
// if Multiplayer then
6569: LD_OWVAR 4
6573: IFFALSE 6581
// YouWinInMultiplayer else
6575: CALL_OW 106
6579: GO 6585
// YouWin ;
6581: CALL_OW 103
// end ;
6585: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6586: LD_INT 0
6588: PPUSH
// result := false ;
6589: LD_ADDR_VAR 0 3
6593: PUSH
6594: LD_INT 0
6596: ST_TO_ADDR
// case gameType of GameTypeNormal :
6597: LD_VAR 0 1
6601: PUSH
6602: LD_INT 1
6604: DOUBLE
6605: EQUAL
6606: IFTRUE 6610
6608: GO 6683
6610: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6611: LD_ADDR_VAR 0 3
6615: PUSH
6616: LD_INT 22
6618: PUSH
6619: LD_VAR 0 2
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: LD_INT 2
6630: PUSH
6631: LD_INT 21
6633: PUSH
6634: LD_INT 1
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 33
6643: PUSH
6644: LD_INT 3
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 33
6653: PUSH
6654: LD_INT 5
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 69
6675: PPUSH
6676: CALL 34036 0 1
6680: ST_TO_ADDR
// end ; GameTypeSurvival :
6681: GO 6918
6683: LD_INT 2
6685: DOUBLE
6686: EQUAL
6687: IFTRUE 6691
6689: GO 6819
6691: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6692: LD_ADDR_VAR 0 3
6696: PUSH
6697: LD_INT 22
6699: PUSH
6700: LD_VAR 0 2
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PUSH
6709: LD_INT 2
6711: PUSH
6712: LD_INT 30
6714: PUSH
6715: LD_INT 0
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PUSH
6722: LD_INT 30
6724: PUSH
6725: LD_INT 1
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: LIST
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PPUSH
6741: CALL_OW 69
6745: PPUSH
6746: CALL 34036 0 1
6750: PUSH
6751: LD_INT 22
6753: PUSH
6754: LD_VAR 0 2
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PUSH
6763: LD_INT 2
6765: PUSH
6766: LD_INT 21
6768: PUSH
6769: LD_INT 1
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PUSH
6776: LD_INT 33
6778: PUSH
6779: LD_INT 3
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PUSH
6786: LD_INT 33
6788: PUSH
6789: LD_INT 5
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PPUSH
6806: CALL_OW 69
6810: PPUSH
6811: CALL 34036 0 1
6815: AND
6816: ST_TO_ADDR
// end ; GameTypeKing :
6817: GO 6918
6819: LD_INT 3
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 6917
6827: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) or HowMuchPointsKing ( side ) >= mpPoints ;
6828: LD_ADDR_VAR 0 3
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_VAR 0 2
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: LD_INT 2
6847: PUSH
6848: LD_INT 21
6850: PUSH
6851: LD_INT 1
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 33
6860: PUSH
6861: LD_INT 3
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PUSH
6868: LD_INT 33
6870: PUSH
6871: LD_INT 5
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PPUSH
6888: CALL_OW 69
6892: PPUSH
6893: CALL 34036 0 1
6897: PUSH
6898: LD_VAR 0 2
6902: PPUSH
6903: CALL 9342 0 1
6907: PUSH
6908: LD_EXP 32
6912: GREATEREQUAL
6913: OR
6914: ST_TO_ADDR
// end ; end ;
6915: GO 6918
6917: POP
// end ;
6918: LD_VAR 0 3
6922: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
6923: LD_INT 100
6925: IFFALSE 7147
6927: GO 6929
6929: DISABLE
6930: LD_INT 0
6932: PPUSH
6933: PPUSH
// begin if Multiplayer then
6934: LD_OWVAR 4
6938: IFFALSE 6946
// SetPlayerSpectator ( ) else
6940: CALL_OW 572
6944: GO 6955
// FogOff ( your_side ) ;
6946: LD_OWVAR 2
6950: PPUSH
6951: CALL_OW 344
// repeat gameIsOn := false ;
6955: LD_ADDR_VAR 0 1
6959: PUSH
6960: LD_INT 0
6962: ST_TO_ADDR
// for i := 1 to 8 do
6963: LD_ADDR_VAR 0 2
6967: PUSH
6968: DOUBLE
6969: LD_INT 1
6971: DEC
6972: ST_TO_ADDR
6973: LD_INT 8
6975: PUSH
6976: FOR_TO
6977: IFFALSE 7099
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
6979: LD_EXP 5
6983: PUSH
6984: LD_VAR 0 2
6988: ARRAY
6989: PUSH
6990: LD_VAR 0 2
6994: PPUSH
6995: CALL_OW 108
6999: AND
7000: PUSH
7001: LD_VAR 0 2
7005: PUSH
7006: LD_OWVAR 2
7010: NONEQUAL
7011: AND
7012: IFFALSE 7097
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7014: LD_EXP 6
7018: PUSH
7019: LD_VAR 0 2
7023: ARRAY
7024: NOT
7025: PUSH
7026: LD_EXP 6
7030: PUSH
7031: LD_VAR 0 2
7035: ARRAY
7036: PUSH
7037: LD_EXP 6
7041: PUSH
7042: LD_OWVAR 2
7046: ARRAY
7047: NONEQUAL
7048: PUSH
7049: LD_OWVAR 2
7053: PPUSH
7054: LD_VAR 0 2
7058: PPUSH
7059: CALL_OW 81
7063: PUSH
7064: LD_INT 1
7066: NONEQUAL
7067: AND
7068: OR
7069: IFFALSE 7097
// if HasPowerByGameType ( mpGameType , i ) then
7071: LD_EXP 1
7075: PPUSH
7076: LD_VAR 0 2
7080: PPUSH
7081: CALL 6586 0 2
7085: IFFALSE 7097
// begin gameIsOn := true ;
7087: LD_ADDR_VAR 0 1
7091: PUSH
7092: LD_INT 1
7094: ST_TO_ADDR
// break ;
7095: GO 7099
// end ;
7097: GO 6976
7099: POP
7100: POP
// wait ( 100 ) ;
7101: LD_INT 100
7103: PPUSH
7104: CALL_OW 67
// until not gameIsOn ;
7108: LD_VAR 0 1
7112: NOT
7113: IFFALSE 6955
// if IAmServer then
7115: CALL_OW 518
7119: IFFALSE 7128
// wait ( 0 0$3 ) ;
7121: LD_INT 105
7123: PPUSH
7124: CALL_OW 67
// if Multiplayer then
7128: LD_OWVAR 4
7132: IFFALSE 7140
// YouLostInMultiplayer else
7134: CALL_OW 107
7138: GO 7147
// YouLost (  ) ;
7140: LD_STRING 
7142: PPUSH
7143: CALL_OW 104
// end ;
7147: PPOPN 2
7149: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7150: LD_EXP 30
7154: IFFALSE 7501
7156: GO 7158
7158: DISABLE
7159: LD_INT 0
7161: PPUSH
7162: PPUSH
7163: PPUSH
7164: PPUSH
7165: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7166: LD_ADDR_VAR 0 5
7170: PUSH
7171: LD_INT 1
7173: PUSH
7174: LD_INT 2
7176: PUSH
7177: LD_INT 3
7179: PUSH
7180: LD_INT 4
7182: PUSH
7183: LD_INT 5
7185: PUSH
7186: LD_INT 6
7188: PUSH
7189: LD_INT 7
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7205: LD_INT 350
7207: PPUSH
7208: CALL_OW 67
// for i := 1 to 8 do
7212: LD_ADDR_VAR 0 1
7216: PUSH
7217: DOUBLE
7218: LD_INT 1
7220: DEC
7221: ST_TO_ADDR
7222: LD_INT 8
7224: PUSH
7225: FOR_TO
7226: IFFALSE 7471
// begin j := sides [ i ] ;
7228: LD_ADDR_VAR 0 2
7232: PUSH
7233: LD_VAR 0 5
7237: PUSH
7238: LD_VAR 0 1
7242: ARRAY
7243: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7244: LD_EXP 37
7248: PUSH
7249: LD_VAR 0 2
7253: ARRAY
7254: PPUSH
7255: CALL 34036 0 1
7259: PUSH
7260: LD_VAR 0 2
7264: PPUSH
7265: CALL_OW 108
7269: AND
7270: PUSH
7271: LD_EXP 1
7275: PPUSH
7276: LD_VAR 0 2
7280: PPUSH
7281: CALL 6586 0 2
7285: AND
7286: IFFALSE 7469
// begin wait ( mpRespawn div 3 ) ;
7288: LD_EXP 30
7292: PUSH
7293: LD_INT 3
7295: DIV
7296: PPUSH
7297: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7301: LD_ADDR_VAR 0 3
7305: PUSH
7306: LD_INT 22
7308: PUSH
7309: LD_VAR 0 2
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 50
7320: PUSH
7321: EMPTY
7322: LIST
7323: PUSH
7324: LD_INT 2
7326: PUSH
7327: LD_INT 30
7329: PUSH
7330: LD_INT 0
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 30
7339: PUSH
7340: LD_INT 1
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: LIST
7356: PPUSH
7357: CALL_OW 69
7361: ST_TO_ADDR
// if not tmp then
7362: LD_VAR 0 3
7366: NOT
7367: IFFALSE 7371
// continue ;
7369: GO 7225
// spawn := tmp [ 1 ] ;
7371: LD_ADDR_VAR 0 4
7375: PUSH
7376: LD_VAR 0 3
7380: PUSH
7381: LD_INT 1
7383: ARRAY
7384: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7385: LD_EXP 37
7389: PUSH
7390: LD_VAR 0 2
7394: ARRAY
7395: PUSH
7396: LD_INT 1
7398: ARRAY
7399: PPUSH
7400: LD_VAR 0 4
7404: PPUSH
7405: CALL_OW 250
7409: PPUSH
7410: LD_VAR 0 4
7414: PPUSH
7415: CALL_OW 251
7419: PPUSH
7420: LD_INT 32
7422: PPUSH
7423: LD_INT 1
7425: PPUSH
7426: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7430: LD_ADDR_EXP 37
7434: PUSH
7435: LD_EXP 37
7439: PPUSH
7440: LD_VAR 0 2
7444: PPUSH
7445: LD_EXP 37
7449: PUSH
7450: LD_VAR 0 2
7454: ARRAY
7455: PPUSH
7456: LD_INT 1
7458: PPUSH
7459: CALL_OW 3
7463: PPUSH
7464: CALL_OW 1
7468: ST_TO_ADDR
// end ; end ;
7469: GO 7225
7471: POP
7472: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7473: LD_ADDR_VAR 0 5
7477: PUSH
7478: LD_VAR 0 5
7482: PPUSH
7483: LD_INT 1
7485: PPUSH
7486: LD_INT 8
7488: PPUSH
7489: LD_INT 1
7491: PPUSH
7492: CALL 36314 0 4
7496: ST_TO_ADDR
// until false ;
7497: LD_INT 0
7499: IFFALSE 7205
// end ;
7501: PPOPN 5
7503: END
// every 0 0$1 marked mpActive do
7504: GO 7506
7506: DISABLE
// begin enable ;
7507: ENABLE
// if not mpDisplayStrings then
7508: LD_EXP 35
7512: NOT
7513: IFFALSE 7524
// begin display_strings := [ ] ;
7515: LD_ADDR_OWVAR 47
7519: PUSH
7520: EMPTY
7521: ST_TO_ADDR
// exit ;
7522: GO 7534
// end ; display_strings := mpDisplayStrings ;
7524: LD_ADDR_OWVAR 47
7528: PUSH
7529: LD_EXP 35
7533: ST_TO_ADDR
// end ; end_of_file
7534: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7535: LD_INT 0
7537: PPUSH
7538: PPUSH
7539: PPUSH
7540: PPUSH
7541: PPUSH
7542: PPUSH
7543: PPUSH
7544: PPUSH
7545: PPUSH
// if GetType ( un ) = unit_vehicle then
7546: LD_VAR 0 1
7550: PPUSH
7551: CALL_OW 247
7555: PUSH
7556: LD_INT 2
7558: EQUAL
7559: IFFALSE 7563
// exit ;
7561: GO 8120
// side := GetSide ( un ) ;
7563: LD_ADDR_VAR 0 9
7567: PUSH
7568: LD_VAR 0 1
7572: PPUSH
7573: CALL_OW 255
7577: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7578: LD_EXP 1
7582: PUSH
7583: LD_INT 2
7585: EQUAL
7586: IFFALSE 7679
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
7588: LD_VAR 0 1
7592: PPUSH
7593: CALL_OW 266
7597: PUSH
7598: LD_INT 0
7600: PUSH
7601: LD_INT 1
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: IN
7608: PUSH
7609: LD_VAR 0 1
7613: PPUSH
7614: CALL_OW 110
7618: PUSH
7619: LD_VAR 0 9
7623: EQUAL
7624: AND
7625: IFFALSE 7679
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7627: LD_ADDR_VAR 0 3
7631: PUSH
7632: LD_INT 22
7634: PUSH
7635: LD_VAR 0 9
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 21
7646: PUSH
7647: LD_INT 1
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PPUSH
7658: CALL_OW 69
7662: PUSH
7663: FOR_IN
7664: IFFALSE 7677
// KillUnit ( i ) ;
7666: LD_VAR 0 3
7670: PPUSH
7671: CALL_OW 66
7675: GO 7663
7677: POP
7678: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7679: LD_VAR 0 1
7683: PPUSH
7684: CALL_OW 257
7688: PUSH
7689: LD_INT 12
7691: PUSH
7692: LD_INT 17
7694: PUSH
7695: LD_INT 15
7697: PUSH
7698: LD_INT 16
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: IN
7707: PUSH
7708: LD_VAR 0 1
7712: PPUSH
7713: CALL_OW 263
7717: PUSH
7718: LD_INT 5
7720: EQUAL
7721: OR
7722: IFFALSE 7856
// begin tag := GetTag ( un ) ;
7724: LD_ADDR_VAR 0 5
7728: PUSH
7729: LD_VAR 0 1
7733: PPUSH
7734: CALL_OW 110
7738: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7739: LD_ADDR_VAR 0 7
7743: PUSH
7744: LD_EXP 29
7748: PUSH
7749: LD_EXP 5
7753: PUSH
7754: LD_VAR 0 5
7758: ARRAY
7759: ARRAY
7760: ST_TO_ADDR
// if not area then
7761: LD_VAR 0 7
7765: NOT
7766: IFFALSE 7770
// exit ;
7768: GO 8120
// wait ( 4 4$00 ) ;
7770: LD_INT 8400
7772: PPUSH
7773: CALL_OW 67
// repeat wait ( 10 ) ;
7777: LD_INT 10
7779: PPUSH
7780: CALL_OW 67
// until not mpBlockRespThread ;
7784: LD_EXP 38
7788: NOT
7789: IFFALSE 7777
// mpBlockRespThread := true ;
7791: LD_ADDR_EXP 38
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
7799: LD_INT 5
7801: NEG
7802: PPUSH
7803: CALL 65893 0 1
// ape := CreateHuman ;
7807: LD_ADDR_VAR 0 4
7811: PUSH
7812: CALL_OW 44
7816: ST_TO_ADDR
// SetTag ( ape , tag ) ;
7817: LD_VAR 0 4
7821: PPUSH
7822: LD_VAR 0 5
7826: PPUSH
7827: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
7831: LD_VAR 0 4
7835: PPUSH
7836: LD_VAR 0 7
7840: PPUSH
7841: LD_INT 0
7843: PPUSH
7844: CALL_OW 49
// mpBlockRespThread := false ;
7848: LD_ADDR_EXP 38
7852: PUSH
7853: LD_INT 0
7855: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
7856: LD_VAR 0 1
7860: PPUSH
7861: CALL_OW 247
7865: PUSH
7866: LD_INT 1
7868: EQUAL
7869: PUSH
7870: LD_VAR 0 1
7874: PPUSH
7875: CALL_OW 248
7879: PUSH
7880: LD_INT 0
7882: GREATER
7883: AND
7884: IFFALSE 8120
// begin if not mpRespawn then
7886: LD_EXP 30
7890: NOT
7891: IFFALSE 7895
// exit ;
7893: GO 8120
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
7895: LD_VAR 0 9
7899: PPUSH
7900: CALL_OW 108
7904: NOT
7905: PUSH
7906: LD_EXP 1
7910: PPUSH
7911: LD_VAR 0 9
7915: PPUSH
7916: CALL 6586 0 2
7920: NOT
7921: AND
7922: IFFALSE 7926
// exit ;
7924: GO 8120
// side := GetSide ( un ) ;
7926: LD_ADDR_VAR 0 9
7930: PUSH
7931: LD_VAR 0 1
7935: PPUSH
7936: CALL_OW 255
7940: ST_TO_ADDR
// nation := GetNation ( un ) ;
7941: LD_ADDR_VAR 0 8
7945: PUSH
7946: LD_VAR 0 1
7950: PPUSH
7951: CALL_OW 248
7955: ST_TO_ADDR
// class := GetClass ( un ) ;
7956: LD_ADDR_VAR 0 6
7960: PUSH
7961: LD_VAR 0 1
7965: PPUSH
7966: CALL_OW 257
7970: ST_TO_ADDR
// if class > 4 then
7971: LD_VAR 0 6
7975: PUSH
7976: LD_INT 4
7978: GREATER
7979: IFFALSE 7989
// class := 1 ;
7981: LD_ADDR_VAR 0 6
7985: PUSH
7986: LD_INT 1
7988: ST_TO_ADDR
// repeat wait ( 10 ) ;
7989: LD_INT 10
7991: PPUSH
7992: CALL_OW 67
// until not mpBlockRespThread ;
7996: LD_EXP 38
8000: NOT
8001: IFFALSE 7989
// mpBlockRespThread := true ;
8003: LD_ADDR_EXP 38
8007: PUSH
8008: LD_INT 1
8010: ST_TO_ADDR
// uc_side := side ;
8011: LD_ADDR_OWVAR 20
8015: PUSH
8016: LD_VAR 0 9
8020: ST_TO_ADDR
// uc_nation := nation ;
8021: LD_ADDR_OWVAR 21
8025: PUSH
8026: LD_VAR 0 8
8030: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8031: LD_INT 0
8033: PPUSH
8034: LD_VAR 0 6
8038: PPUSH
8039: LD_INT 2
8041: PPUSH
8042: CALL_OW 380
// un := CreateHuman ;
8046: LD_ADDR_VAR 0 1
8050: PUSH
8051: CALL_OW 44
8055: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8056: LD_ADDR_EXP 37
8060: PUSH
8061: LD_EXP 37
8065: PPUSH
8066: LD_VAR 0 9
8070: PPUSH
8071: LD_EXP 37
8075: PUSH
8076: LD_VAR 0 9
8080: ARRAY
8081: PPUSH
8082: LD_EXP 37
8086: PUSH
8087: LD_VAR 0 9
8091: ARRAY
8092: PUSH
8093: LD_INT 1
8095: PLUS
8096: PPUSH
8097: LD_VAR 0 1
8101: PPUSH
8102: CALL_OW 1
8106: PPUSH
8107: CALL_OW 1
8111: ST_TO_ADDR
// mpBlockRespThread := false ;
8112: LD_ADDR_EXP 38
8116: PUSH
8117: LD_INT 0
8119: ST_TO_ADDR
// end ; end ;
8120: LD_VAR 0 2
8124: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8125: LD_INT 0
8127: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8128: LD_VAR 0 1
8132: PPUSH
8133: CALL_OW 266
8137: PUSH
8138: LD_INT 0
8140: PUSH
8141: LD_INT 1
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: IN
8148: IFFALSE 8173
// SetBName ( building , @ & GetSide ( building ) ) ;
8150: LD_VAR 0 1
8154: PPUSH
8155: LD_STRING @
8157: PUSH
8158: LD_VAR 0 1
8162: PPUSH
8163: CALL_OW 255
8167: STR
8168: PPUSH
8169: CALL_OW 500
// end ;
8173: LD_VAR 0 2
8177: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8178: LD_INT 0
8180: PPUSH
8181: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8182: LD_EXP 1
8186: PUSH
8187: LD_INT 2
8189: EQUAL
8190: PUSH
8191: LD_VAR 0 1
8195: PPUSH
8196: CALL_OW 266
8200: PUSH
8201: LD_INT 0
8203: PUSH
8204: LD_INT 1
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: IN
8211: AND
8212: IFFALSE 8277
// begin KillUnit ( building ) ;
8214: LD_VAR 0 1
8218: PPUSH
8219: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8223: LD_ADDR_VAR 0 5
8227: PUSH
8228: LD_INT 22
8230: PUSH
8231: LD_VAR 0 2
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PUSH
8240: LD_INT 21
8242: PUSH
8243: LD_INT 1
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 69
8258: PUSH
8259: FOR_IN
8260: IFFALSE 8273
// KillUnit ( i ) ;
8262: LD_VAR 0 5
8266: PPUSH
8267: CALL_OW 66
8271: GO 8259
8273: POP
8274: POP
// exit ;
8275: GO 8322
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8277: LD_VAR 0 1
8281: PPUSH
8282: CALL_OW 266
8286: PUSH
8287: LD_INT 0
8289: PUSH
8290: LD_INT 1
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: IN
8297: IFFALSE 8322
// SetBName ( building , @ & GetSide ( building ) ) ;
8299: LD_VAR 0 1
8303: PPUSH
8304: LD_STRING @
8306: PUSH
8307: LD_VAR 0 1
8311: PPUSH
8312: CALL_OW 255
8316: STR
8317: PPUSH
8318: CALL_OW 500
// end ; end_of_file
8322: LD_VAR 0 4
8326: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
8327: LD_EXP 36
8331: IFFALSE 8670
8333: GO 8335
8335: DISABLE
8336: LD_INT 0
8338: PPUSH
8339: PPUSH
8340: PPUSH
// begin mpKingPoints := [ ] ;
8341: LD_ADDR_EXP 41
8345: PUSH
8346: EMPTY
8347: ST_TO_ADDR
// if mpTeamGame then
8348: LD_EXP 9
8352: IFFALSE 8406
// begin for i := 1 to Count ( mpTeams ) do
8354: LD_ADDR_VAR 0 1
8358: PUSH
8359: DOUBLE
8360: LD_INT 1
8362: DEC
8363: ST_TO_ADDR
8364: LD_EXP 8
8368: PPUSH
8369: CALL 34036 0 1
8373: PUSH
8374: FOR_TO
8375: IFFALSE 8402
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
8377: LD_ADDR_EXP 41
8381: PUSH
8382: LD_EXP 41
8386: PPUSH
8387: LD_VAR 0 1
8391: PPUSH
8392: LD_INT 0
8394: PPUSH
8395: CALL_OW 1
8399: ST_TO_ADDR
8400: GO 8374
8402: POP
8403: POP
// end else
8404: GO 8449
// begin for i := 1 to 8 do
8406: LD_ADDR_VAR 0 1
8410: PUSH
8411: DOUBLE
8412: LD_INT 1
8414: DEC
8415: ST_TO_ADDR
8416: LD_INT 8
8418: PUSH
8419: FOR_TO
8420: IFFALSE 8447
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
8422: LD_ADDR_EXP 41
8426: PUSH
8427: LD_EXP 41
8431: PPUSH
8432: LD_VAR 0 1
8436: PPUSH
8437: LD_INT 0
8439: PPUSH
8440: CALL_OW 1
8444: ST_TO_ADDR
8445: GO 8419
8447: POP
8448: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
8449: LD_ADDR_VAR 0 3
8453: PUSH
8454: LD_INT 50
8456: PPUSH
8457: LD_INT 0
8459: PPUSH
8460: CALL_OW 517
8464: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
8465: LD_ADDR_VAR 0 1
8469: PUSH
8470: DOUBLE
8471: LD_INT 1
8473: DEC
8474: ST_TO_ADDR
8475: LD_VAR 0 3
8479: PUSH
8480: LD_INT 1
8482: ARRAY
8483: PUSH
8484: FOR_TO
8485: IFFALSE 8552
// for j := 1 to 8 do
8487: LD_ADDR_VAR 0 2
8491: PUSH
8492: DOUBLE
8493: LD_INT 1
8495: DEC
8496: ST_TO_ADDR
8497: LD_INT 8
8499: PUSH
8500: FOR_TO
8501: IFFALSE 8548
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
8503: LD_VAR 0 3
8507: PUSH
8508: LD_INT 1
8510: ARRAY
8511: PUSH
8512: LD_VAR 0 1
8516: ARRAY
8517: PPUSH
8518: LD_VAR 0 3
8522: PUSH
8523: LD_INT 2
8525: ARRAY
8526: PUSH
8527: LD_VAR 0 1
8531: ARRAY
8532: PPUSH
8533: LD_VAR 0 2
8537: PPUSH
8538: LD_INT 12
8540: NEG
8541: PPUSH
8542: CALL_OW 330
8546: GO 8500
8548: POP
8549: POP
8550: GO 8484
8552: POP
8553: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
8554: LD_EXP 31
8558: PPUSH
8559: LD_INT 1
8561: PPUSH
8562: CALL_OW 424
// UpdateCounter ;
8566: CALL 9172 0 0
// repeat wait ( 0 0$1 ) ;
8570: LD_INT 35
8572: PPUSH
8573: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8577: LD_ADDR_VAR 0 3
8581: PUSH
8582: LD_EXP 31
8586: PPUSH
8587: LD_INT 3
8589: PUSH
8590: LD_INT 57
8592: PUSH
8593: EMPTY
8594: LIST
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PUSH
8600: LD_INT 50
8602: PUSH
8603: EMPTY
8604: LIST
8605: PUSH
8606: LD_INT 2
8608: PUSH
8609: LD_INT 30
8611: PUSH
8612: LD_INT 0
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: LD_INT 30
8621: PUSH
8622: LD_INT 1
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: LIST
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: LIST
8638: PPUSH
8639: CALL_OW 70
8643: ST_TO_ADDR
// if not tmp then
8644: LD_VAR 0 3
8648: NOT
8649: IFFALSE 8653
// continue ;
8651: GO 8570
// AddPoints ( tmp ) ;
8653: LD_VAR 0 3
8657: PPUSH
8658: CALL 8850 0 1
// UpdateCounter ;
8662: CALL 9172 0 0
// until false ;
8666: LD_INT 0
8668: IFFALSE 8570
// end ;
8670: PPOPN 3
8672: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
8673: LD_EXP 36
8677: PUSH
8678: LD_EXP 34
8682: AND
8683: IFFALSE 8847
8685: GO 8687
8687: DISABLE
8688: LD_INT 0
8690: PPUSH
8691: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
8692: LD_ADDR_VAR 0 2
8696: PUSH
8697: LD_INT 50
8699: PPUSH
8700: LD_INT 0
8702: PPUSH
8703: CALL_OW 517
8707: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
8708: LD_ADDR_VAR 0 1
8712: PUSH
8713: DOUBLE
8714: LD_INT 1
8716: DEC
8717: ST_TO_ADDR
8718: LD_VAR 0 2
8722: PUSH
8723: LD_INT 1
8725: ARRAY
8726: PUSH
8727: FOR_TO
8728: IFFALSE 8769
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
8730: LD_VAR 0 2
8734: PUSH
8735: LD_INT 1
8737: ARRAY
8738: PUSH
8739: LD_VAR 0 1
8743: ARRAY
8744: PPUSH
8745: LD_VAR 0 2
8749: PUSH
8750: LD_INT 2
8752: ARRAY
8753: PUSH
8754: LD_VAR 0 1
8758: ARRAY
8759: PPUSH
8760: LD_INT 125
8762: PPUSH
8763: CALL_OW 495
8767: GO 8727
8769: POP
8770: POP
// repeat wait ( mpEmissions ) ;
8771: LD_EXP 34
8775: PPUSH
8776: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
8780: LD_ADDR_VAR 0 1
8784: PUSH
8785: DOUBLE
8786: LD_INT 1
8788: DEC
8789: ST_TO_ADDR
8790: LD_VAR 0 2
8794: PUSH
8795: LD_INT 1
8797: ARRAY
8798: PUSH
8799: FOR_TO
8800: IFFALSE 8841
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
8802: LD_VAR 0 2
8806: PUSH
8807: LD_INT 1
8809: ARRAY
8810: PUSH
8811: LD_VAR 0 1
8815: ARRAY
8816: PPUSH
8817: LD_VAR 0 2
8821: PUSH
8822: LD_INT 2
8824: ARRAY
8825: PUSH
8826: LD_VAR 0 1
8830: ARRAY
8831: PPUSH
8832: LD_INT 15
8834: PPUSH
8835: CALL_OW 495
8839: GO 8799
8841: POP
8842: POP
// until false ;
8843: LD_INT 0
8845: IFFALSE 8771
// end ;
8847: PPOPN 2
8849: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
8850: LD_INT 0
8852: PPUSH
8853: PPUSH
8854: PPUSH
8855: PPUSH
8856: PPUSH
// if mpTeamGame then
8857: LD_EXP 9
8861: IFFALSE 9058
// begin first := depots [ 1 ] ;
8863: LD_ADDR_VAR 0 4
8867: PUSH
8868: LD_VAR 0 1
8872: PUSH
8873: LD_INT 1
8875: ARRAY
8876: ST_TO_ADDR
// side := GetSide ( first ) ;
8877: LD_ADDR_VAR 0 6
8881: PUSH
8882: LD_VAR 0 4
8886: PPUSH
8887: CALL_OW 255
8891: ST_TO_ADDR
// for i := 1 to mpTeams do
8892: LD_ADDR_VAR 0 3
8896: PUSH
8897: DOUBLE
8898: LD_INT 1
8900: DEC
8901: ST_TO_ADDR
8902: LD_EXP 8
8906: PUSH
8907: FOR_TO
8908: IFFALSE 8942
// if side in mpTeams [ i ] then
8910: LD_VAR 0 6
8914: PUSH
8915: LD_EXP 8
8919: PUSH
8920: LD_VAR 0 3
8924: ARRAY
8925: IN
8926: IFFALSE 8940
// begin team := i ;
8928: LD_ADDR_VAR 0 5
8932: PUSH
8933: LD_VAR 0 3
8937: ST_TO_ADDR
// break ;
8938: GO 8942
// end ;
8940: GO 8907
8942: POP
8943: POP
// if not team then
8944: LD_VAR 0 5
8948: NOT
8949: IFFALSE 8953
// exit ;
8951: GO 9167
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
8953: LD_EXP 31
8957: PPUSH
8958: LD_INT 81
8960: PUSH
8961: LD_VAR 0 6
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PPUSH
8970: CALL_OW 70
8974: IFFALSE 8978
// exit ;
8976: GO 9167
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
8978: LD_ADDR_EXP 41
8982: PUSH
8983: LD_EXP 41
8987: PPUSH
8988: LD_VAR 0 5
8992: PPUSH
8993: LD_EXP 41
8997: PUSH
8998: LD_VAR 0 5
9002: ARRAY
9003: PUSH
9004: LD_INT 1
9006: PLUS
9007: PPUSH
9008: CALL_OW 1
9012: ST_TO_ADDR
// for i in mpTeams [ team ] do
9013: LD_ADDR_VAR 0 3
9017: PUSH
9018: LD_EXP 8
9022: PUSH
9023: LD_VAR 0 5
9027: ARRAY
9028: PUSH
9029: FOR_IN
9030: IFFALSE 9054
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
9032: LD_VAR 0 3
9036: PPUSH
9037: LD_EXP 41
9041: PUSH
9042: LD_VAR 0 5
9046: ARRAY
9047: PPUSH
9048: CALL_OW 506
9052: GO 9029
9054: POP
9055: POP
// end else
9056: GO 9167
// begin first := depots [ 1 ] ;
9058: LD_ADDR_VAR 0 4
9062: PUSH
9063: LD_VAR 0 1
9067: PUSH
9068: LD_INT 1
9070: ARRAY
9071: ST_TO_ADDR
// side := GetSide ( first ) ;
9072: LD_ADDR_VAR 0 6
9076: PUSH
9077: LD_VAR 0 4
9081: PPUSH
9082: CALL_OW 255
9086: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
9087: LD_EXP 31
9091: PPUSH
9092: LD_INT 81
9094: PUSH
9095: LD_VAR 0 6
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PPUSH
9104: CALL_OW 70
9108: IFFALSE 9112
// exit ;
9110: GO 9167
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
9112: LD_ADDR_EXP 41
9116: PUSH
9117: LD_EXP 41
9121: PPUSH
9122: LD_VAR 0 6
9126: PPUSH
9127: LD_EXP 41
9131: PUSH
9132: LD_VAR 0 6
9136: ARRAY
9137: PUSH
9138: LD_INT 1
9140: PLUS
9141: PPUSH
9142: CALL_OW 1
9146: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
9147: LD_VAR 0 6
9151: PPUSH
9152: LD_EXP 41
9156: PUSH
9157: LD_VAR 0 6
9161: ARRAY
9162: PPUSH
9163: CALL_OW 506
// end ; end ;
9167: LD_VAR 0 2
9171: RET
// function UpdateCounter ; var i ; begin
9172: LD_INT 0
9174: PPUSH
9175: PPUSH
// result := [ ] ;
9176: LD_ADDR_VAR 0 1
9180: PUSH
9181: EMPTY
9182: ST_TO_ADDR
// if mpTeamGame then
9183: LD_EXP 9
9187: IFFALSE 9254
// begin for i := 1 to mpTeams do
9189: LD_ADDR_VAR 0 2
9193: PUSH
9194: DOUBLE
9195: LD_INT 1
9197: DEC
9198: ST_TO_ADDR
9199: LD_EXP 8
9203: PUSH
9204: FOR_TO
9205: IFFALSE 9250
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
9207: LD_ADDR_VAR 0 1
9211: PUSH
9212: LD_VAR 0 1
9216: PUSH
9217: LD_STRING #KingoftheHill-Team
9219: PUSH
9220: LD_VAR 0 2
9224: PUSH
9225: LD_EXP 41
9229: PUSH
9230: LD_VAR 0 2
9234: ARRAY
9235: PUSH
9236: LD_EXP 32
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: ADD
9247: ST_TO_ADDR
9248: GO 9204
9250: POP
9251: POP
// end else
9252: GO 9327
// begin for i := 1 to 8 do
9254: LD_ADDR_VAR 0 2
9258: PUSH
9259: DOUBLE
9260: LD_INT 1
9262: DEC
9263: ST_TO_ADDR
9264: LD_INT 8
9266: PUSH
9267: FOR_TO
9268: IFFALSE 9325
// if mpSidePositions [ i ] then
9270: LD_EXP 5
9274: PUSH
9275: LD_VAR 0 2
9279: ARRAY
9280: IFFALSE 9323
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
9282: LD_ADDR_VAR 0 1
9286: PUSH
9287: LD_VAR 0 1
9291: PUSH
9292: LD_STRING #KingoftheHill-Player
9294: PUSH
9295: LD_VAR 0 2
9299: PUSH
9300: LD_EXP 41
9304: PUSH
9305: LD_VAR 0 2
9309: ARRAY
9310: PUSH
9311: LD_EXP 32
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: ADD
9322: ST_TO_ADDR
9323: GO 9267
9325: POP
9326: POP
// end ; mpDisplayStrings := result ;
9327: LD_ADDR_EXP 35
9331: PUSH
9332: LD_VAR 0 1
9336: ST_TO_ADDR
// end ;
9337: LD_VAR 0 1
9341: RET
// export function HowMuchPointsKing ( side ) ; begin
9342: LD_INT 0
9344: PPUSH
// result := HowMuchPoints ( side ) ;
9345: LD_ADDR_VAR 0 2
9349: PUSH
9350: LD_VAR 0 1
9354: PPUSH
9355: CALL 9365 0 1
9359: ST_TO_ADDR
// end ;
9360: LD_VAR 0 2
9364: RET
// function HowMuchPoints ( side ) ; var i ; begin
9365: LD_INT 0
9367: PPUSH
9368: PPUSH
// if mpTeamGame then
9369: LD_EXP 9
9373: IFFALSE 9442
// begin for i := 1 to Count ( mpTeams ) do
9375: LD_ADDR_VAR 0 3
9379: PUSH
9380: DOUBLE
9381: LD_INT 1
9383: DEC
9384: ST_TO_ADDR
9385: LD_EXP 8
9389: PPUSH
9390: CALL 34036 0 1
9394: PUSH
9395: FOR_TO
9396: IFFALSE 9438
// begin if side in mpTeams [ i ] then
9398: LD_VAR 0 1
9402: PUSH
9403: LD_EXP 8
9407: PUSH
9408: LD_VAR 0 3
9412: ARRAY
9413: IN
9414: IFFALSE 9436
// begin result := mpKingPoints [ i ] ;
9416: LD_ADDR_VAR 0 2
9420: PUSH
9421: LD_EXP 41
9425: PUSH
9426: LD_VAR 0 3
9430: ARRAY
9431: ST_TO_ADDR
// exit ;
9432: POP
9433: POP
9434: GO 9458
// end ; end ;
9436: GO 9395
9438: POP
9439: POP
// end else
9440: GO 9458
// result := mpKingPoints [ side ] ;
9442: LD_ADDR_VAR 0 2
9446: PUSH
9447: LD_EXP 41
9451: PUSH
9452: LD_VAR 0 1
9456: ARRAY
9457: ST_TO_ADDR
// end ;
9458: LD_VAR 0 2
9462: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
9463: LD_EXP 36
9467: PUSH
9468: CALL 9790 0 0
9472: AND
9473: PUSH
9474: LD_OWVAR 4
9478: AND
9479: IFFALSE 9715
9481: GO 9483
9483: DISABLE
9484: LD_INT 0
9486: PPUSH
9487: PPUSH
// begin canWin := false ;
9488: LD_ADDR_VAR 0 2
9492: PUSH
9493: LD_INT 0
9495: ST_TO_ADDR
// if not HasPower ( your_side ) then
9496: LD_OWVAR 2
9500: PPUSH
9501: CALL 9830 0 1
9505: NOT
9506: IFFALSE 9517
// begin Multiplayer_Loose_Message ;
9508: CALL_OW 521
// enable ( mpLose ) ;
9512: LD_INT 102
9514: ENABLE_MARKED
// end else
9515: GO 9715
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
9517: LD_ADDR_VAR 0 2
9521: PUSH
9522: LD_OWVAR 2
9526: PPUSH
9527: CALL 9365 0 1
9531: PUSH
9532: LD_EXP 32
9536: GREATEREQUAL
9537: PUSH
9538: LD_OWVAR 2
9542: PPUSH
9543: CALL 9830 0 1
9547: AND
9548: PUSH
9549: CALL 9718 0 0
9553: NOT
9554: OR
9555: ST_TO_ADDR
// for i := 1 to 8 do
9556: LD_ADDR_VAR 0 1
9560: PUSH
9561: DOUBLE
9562: LD_INT 1
9564: DEC
9565: ST_TO_ADDR
9566: LD_INT 8
9568: PUSH
9569: FOR_TO
9570: IFFALSE 9701
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9572: LD_EXP 5
9576: PUSH
9577: LD_VAR 0 1
9581: ARRAY
9582: PUSH
9583: LD_VAR 0 1
9587: PPUSH
9588: CALL_OW 108
9592: AND
9593: PUSH
9594: LD_VAR 0 1
9598: PUSH
9599: LD_OWVAR 2
9603: NONEQUAL
9604: AND
9605: IFFALSE 9699
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9607: LD_EXP 6
9611: PUSH
9612: LD_VAR 0 1
9616: ARRAY
9617: NOT
9618: PUSH
9619: LD_EXP 6
9623: PUSH
9624: LD_VAR 0 1
9628: ARRAY
9629: PUSH
9630: LD_EXP 6
9634: PUSH
9635: LD_OWVAR 2
9639: ARRAY
9640: NONEQUAL
9641: PUSH
9642: LD_OWVAR 2
9646: PPUSH
9647: LD_VAR 0 1
9651: PPUSH
9652: CALL_OW 81
9656: PUSH
9657: LD_INT 1
9659: NONEQUAL
9660: AND
9661: OR
9662: IFFALSE 9699
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
9664: LD_VAR 0 1
9668: PPUSH
9669: CALL 9365 0 1
9673: PUSH
9674: LD_EXP 32
9678: GREATEREQUAL
9679: PUSH
9680: LD_VAR 0 1
9684: PPUSH
9685: CALL 9830 0 1
9689: AND
9690: IFFALSE 9699
// begin enable ( mpLose ) ;
9692: LD_INT 102
9694: ENABLE_MARKED
// exit ;
9695: POP
9696: POP
9697: GO 9715
// end ;
9699: GO 9569
9701: POP
9702: POP
// if canWin then
9703: LD_VAR 0 2
9707: IFFALSE 9714
// enable ( mpWin ) else
9709: LD_INT 101
9711: ENABLE_MARKED
9712: GO 9715
// enable ;
9714: ENABLE
// end ; end ;
9715: PPOPN 2
9717: END
// function EnemiesInGame ; var i ; begin
9718: LD_INT 0
9720: PPUSH
9721: PPUSH
// result := false ;
9722: LD_ADDR_VAR 0 1
9726: PUSH
9727: LD_INT 0
9729: ST_TO_ADDR
// for i := 1 to 8 do
9730: LD_ADDR_VAR 0 2
9734: PUSH
9735: DOUBLE
9736: LD_INT 1
9738: DEC
9739: ST_TO_ADDR
9740: LD_INT 8
9742: PUSH
9743: FOR_TO
9744: IFFALSE 9783
// if i <> your_side and HasPower ( i ) then
9746: LD_VAR 0 2
9750: PUSH
9751: LD_OWVAR 2
9755: NONEQUAL
9756: PUSH
9757: LD_VAR 0 2
9761: PPUSH
9762: CALL 9830 0 1
9766: AND
9767: IFFALSE 9781
// begin result := true ;
9769: LD_ADDR_VAR 0 1
9773: PUSH
9774: LD_INT 1
9776: ST_TO_ADDR
// exit ;
9777: POP
9778: POP
9779: GO 9785
// end ;
9781: GO 9743
9783: POP
9784: POP
// end ;
9785: LD_VAR 0 1
9789: RET
// function CanWinLoose ; begin
9790: LD_INT 0
9792: PPUSH
// result := true ;
9793: LD_ADDR_VAR 0 1
9797: PUSH
9798: LD_INT 1
9800: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9801: CALL_OW 531
9805: PUSH
9806: CALL_OW 519
9810: PUSH
9811: LD_INT 1
9813: GREATER
9814: AND
9815: IFFALSE 9825
// result := false ;
9817: LD_ADDR_VAR 0 1
9821: PUSH
9822: LD_INT 0
9824: ST_TO_ADDR
// end ;
9825: LD_VAR 0 1
9829: RET
// function HasPower ( i ) ; begin
9830: LD_INT 0
9832: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9833: LD_ADDR_VAR 0 2
9837: PUSH
9838: LD_INT 22
9840: PUSH
9841: LD_VAR 0 1
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: LD_INT 21
9855: PUSH
9856: LD_INT 1
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 33
9865: PUSH
9866: LD_INT 3
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 33
9875: PUSH
9876: LD_INT 5
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PPUSH
9893: CALL_OW 69
9897: ST_TO_ADDR
// end ; end_of_file
9898: LD_VAR 0 2
9902: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9903: LD_EXP 36
9907: PUSH
9908: CALL 10113 0 0
9912: AND
9913: PUSH
9914: LD_OWVAR 4
9918: AND
9919: IFFALSE 10110
9921: GO 9923
9923: DISABLE
9924: LD_INT 0
9926: PPUSH
9927: PPUSH
// begin canWin := false ;
9928: LD_ADDR_VAR 0 2
9932: PUSH
9933: LD_INT 0
9935: ST_TO_ADDR
// if not HasPower ( your_side ) then
9936: LD_OWVAR 2
9940: PPUSH
9941: CALL 10153 0 1
9945: NOT
9946: IFFALSE 9957
// begin Multiplayer_Loose_Message ;
9948: CALL_OW 521
// enable ( mpLose ) ;
9952: LD_INT 102
9954: ENABLE_MARKED
// end else
9955: GO 10110
// begin canWin := true ;
9957: LD_ADDR_VAR 0 2
9961: PUSH
9962: LD_INT 1
9964: ST_TO_ADDR
// for i := 1 to 8 do
9965: LD_ADDR_VAR 0 1
9969: PUSH
9970: DOUBLE
9971: LD_INT 1
9973: DEC
9974: ST_TO_ADDR
9975: LD_INT 8
9977: PUSH
9978: FOR_TO
9979: IFFALSE 10096
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9981: LD_EXP 5
9985: PUSH
9986: LD_VAR 0 1
9990: ARRAY
9991: PUSH
9992: LD_VAR 0 1
9996: PPUSH
9997: CALL_OW 108
10001: AND
10002: PUSH
10003: LD_VAR 0 1
10007: PUSH
10008: LD_OWVAR 2
10012: NONEQUAL
10013: AND
10014: IFFALSE 10094
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10016: LD_EXP 6
10020: PUSH
10021: LD_VAR 0 1
10025: ARRAY
10026: NOT
10027: PUSH
10028: LD_EXP 6
10032: PUSH
10033: LD_VAR 0 1
10037: ARRAY
10038: PUSH
10039: LD_EXP 6
10043: PUSH
10044: LD_OWVAR 2
10048: ARRAY
10049: NONEQUAL
10050: PUSH
10051: LD_OWVAR 2
10055: PPUSH
10056: LD_VAR 0 1
10060: PPUSH
10061: CALL_OW 81
10065: PUSH
10066: LD_INT 1
10068: NONEQUAL
10069: AND
10070: OR
10071: IFFALSE 10094
// if HasPower ( i ) then
10073: LD_VAR 0 1
10077: PPUSH
10078: CALL 10153 0 1
10082: IFFALSE 10094
// begin canWin := false ;
10084: LD_ADDR_VAR 0 2
10088: PUSH
10089: LD_INT 0
10091: ST_TO_ADDR
// break ;
10092: GO 10096
// end ;
10094: GO 9978
10096: POP
10097: POP
// if canWin then
10098: LD_VAR 0 2
10102: IFFALSE 10109
// enable ( mpWin ) else
10104: LD_INT 101
10106: ENABLE_MARKED
10107: GO 10110
// enable ;
10109: ENABLE
// end ; end ;
10110: PPOPN 2
10112: END
// function CanWinLoose ; begin
10113: LD_INT 0
10115: PPUSH
// result := true ;
10116: LD_ADDR_VAR 0 1
10120: PUSH
10121: LD_INT 1
10123: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10124: CALL_OW 531
10128: PUSH
10129: CALL_OW 519
10133: PUSH
10134: LD_INT 1
10136: GREATER
10137: AND
10138: IFFALSE 10148
// result := false ;
10140: LD_ADDR_VAR 0 1
10144: PUSH
10145: LD_INT 0
10147: ST_TO_ADDR
// end ;
10148: LD_VAR 0 1
10152: RET
// function HasPower ( i ) ; begin
10153: LD_INT 0
10155: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10156: LD_ADDR_VAR 0 2
10160: PUSH
10161: LD_INT 22
10163: PUSH
10164: LD_VAR 0 1
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PUSH
10173: LD_INT 2
10175: PUSH
10176: LD_INT 21
10178: PUSH
10179: LD_INT 1
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PUSH
10186: LD_INT 33
10188: PUSH
10189: LD_INT 3
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: LD_INT 33
10198: PUSH
10199: LD_INT 5
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PPUSH
10216: CALL_OW 69
10220: ST_TO_ADDR
// end ; end_of_file
10221: LD_VAR 0 2
10225: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10226: LD_EXP 36
10230: IFFALSE 10273
10232: GO 10234
10234: DISABLE
10235: LD_INT 0
10237: PPUSH
// begin for i := 1 to 8 do
10238: LD_ADDR_VAR 0 1
10242: PUSH
10243: DOUBLE
10244: LD_INT 1
10246: DEC
10247: ST_TO_ADDR
10248: LD_INT 8
10250: PUSH
10251: FOR_TO
10252: IFFALSE 10271
// SetRestrict ( b_depot , i , state_disabled ) ;
10254: LD_INT 0
10256: PPUSH
10257: LD_VAR 0 1
10261: PPUSH
10262: LD_INT 0
10264: PPUSH
10265: CALL_OW 324
10269: GO 10251
10271: POP
10272: POP
// end ;
10273: PPOPN 1
10275: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10276: LD_EXP 36
10280: PUSH
10281: CALL 10486 0 0
10285: AND
10286: PUSH
10287: LD_OWVAR 4
10291: AND
10292: IFFALSE 10483
10294: GO 10296
10296: DISABLE
10297: LD_INT 0
10299: PPUSH
10300: PPUSH
// begin canWin := false ;
10301: LD_ADDR_VAR 0 2
10305: PUSH
10306: LD_INT 0
10308: ST_TO_ADDR
// if not HasPower ( your_side ) then
10309: LD_OWVAR 2
10313: PPUSH
10314: CALL 10526 0 1
10318: NOT
10319: IFFALSE 10330
// begin Multiplayer_Loose_Message ;
10321: CALL_OW 521
// enable ( mpLose ) ;
10325: LD_INT 102
10327: ENABLE_MARKED
// end else
10328: GO 10483
// begin canWin := true ;
10330: LD_ADDR_VAR 0 2
10334: PUSH
10335: LD_INT 1
10337: ST_TO_ADDR
// for i := 1 to 8 do
10338: LD_ADDR_VAR 0 1
10342: PUSH
10343: DOUBLE
10344: LD_INT 1
10346: DEC
10347: ST_TO_ADDR
10348: LD_INT 8
10350: PUSH
10351: FOR_TO
10352: IFFALSE 10469
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10354: LD_EXP 5
10358: PUSH
10359: LD_VAR 0 1
10363: ARRAY
10364: PUSH
10365: LD_VAR 0 1
10369: PPUSH
10370: CALL_OW 108
10374: AND
10375: PUSH
10376: LD_VAR 0 1
10380: PUSH
10381: LD_OWVAR 2
10385: NONEQUAL
10386: AND
10387: IFFALSE 10467
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10389: LD_EXP 6
10393: PUSH
10394: LD_VAR 0 1
10398: ARRAY
10399: NOT
10400: PUSH
10401: LD_EXP 6
10405: PUSH
10406: LD_VAR 0 1
10410: ARRAY
10411: PUSH
10412: LD_EXP 6
10416: PUSH
10417: LD_OWVAR 2
10421: ARRAY
10422: NONEQUAL
10423: PUSH
10424: LD_OWVAR 2
10428: PPUSH
10429: LD_VAR 0 1
10433: PPUSH
10434: CALL_OW 81
10438: PUSH
10439: LD_INT 1
10441: NONEQUAL
10442: AND
10443: OR
10444: IFFALSE 10467
// if HasPower ( i ) then
10446: LD_VAR 0 1
10450: PPUSH
10451: CALL 10526 0 1
10455: IFFALSE 10467
// begin canWin := false ;
10457: LD_ADDR_VAR 0 2
10461: PUSH
10462: LD_INT 0
10464: ST_TO_ADDR
// break ;
10465: GO 10469
// end ;
10467: GO 10351
10469: POP
10470: POP
// if canWin then
10471: LD_VAR 0 2
10475: IFFALSE 10482
// enable ( mpWin ) else
10477: LD_INT 101
10479: ENABLE_MARKED
10480: GO 10483
// enable ;
10482: ENABLE
// end ; end ;
10483: PPOPN 2
10485: END
// function CanWinLoose ; begin
10486: LD_INT 0
10488: PPUSH
// result := true ;
10489: LD_ADDR_VAR 0 1
10493: PUSH
10494: LD_INT 1
10496: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10497: CALL_OW 531
10501: PUSH
10502: CALL_OW 519
10506: PUSH
10507: LD_INT 1
10509: GREATER
10510: AND
10511: IFFALSE 10521
// result := false ;
10513: LD_ADDR_VAR 0 1
10517: PUSH
10518: LD_INT 0
10520: ST_TO_ADDR
// end ;
10521: LD_VAR 0 1
10525: RET
// function HasPower ( i ) ; begin
10526: LD_INT 0
10528: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10529: LD_INT 22
10531: PUSH
10532: LD_VAR 0 1
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 2
10543: PUSH
10544: LD_INT 30
10546: PUSH
10547: LD_INT 0
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PUSH
10554: LD_INT 30
10556: PUSH
10557: LD_INT 1
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: LIST
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PPUSH
10573: CALL_OW 69
10577: NOT
10578: IFFALSE 10582
// exit ;
10580: GO 10647
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10582: LD_ADDR_VAR 0 2
10586: PUSH
10587: LD_INT 22
10589: PUSH
10590: LD_VAR 0 1
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 2
10601: PUSH
10602: LD_INT 21
10604: PUSH
10605: LD_INT 1
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PUSH
10612: LD_INT 33
10614: PUSH
10615: LD_INT 3
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 33
10624: PUSH
10625: LD_INT 5
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PPUSH
10642: CALL_OW 69
10646: ST_TO_ADDR
// end ; end_of_file
10647: LD_VAR 0 2
10651: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
10652: LD_VAR 0 1
10656: PUSH
10657: LD_INT 200
10659: DOUBLE
10660: GREATEREQUAL
10661: IFFALSE 10669
10663: LD_INT 299
10665: DOUBLE
10666: LESSEQUAL
10667: IFTRUE 10671
10669: GO 10703
10671: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
10672: LD_VAR 0 1
10676: PPUSH
10677: LD_VAR 0 2
10681: PPUSH
10682: LD_VAR 0 3
10686: PPUSH
10687: LD_VAR 0 4
10691: PPUSH
10692: LD_VAR 0 5
10696: PPUSH
10697: CALL 11357 0 5
10701: GO 10780
10703: LD_INT 300
10705: DOUBLE
10706: GREATEREQUAL
10707: IFFALSE 10715
10709: LD_INT 399
10711: DOUBLE
10712: LESSEQUAL
10713: IFTRUE 10717
10715: GO 10779
10717: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
10718: LD_VAR 0 1
10722: PPUSH
10723: LD_VAR 0 2
10727: PPUSH
10728: LD_VAR 0 3
10732: PPUSH
10733: LD_VAR 0 4
10737: PPUSH
10738: LD_VAR 0 5
10742: PPUSH
10743: LD_VAR 0 6
10747: PPUSH
10748: LD_VAR 0 7
10752: PPUSH
10753: LD_VAR 0 8
10757: PPUSH
10758: LD_VAR 0 9
10762: PPUSH
10763: LD_VAR 0 10
10767: PPUSH
10768: LD_VAR 0 11
10772: PPUSH
10773: CALL 28635 0 11
10777: GO 10780
10779: POP
// end ;
10780: PPOPN 11
10782: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
10783: LD_VAR 0 1
10787: PPUSH
10788: LD_VAR 0 2
10792: PPUSH
10793: LD_VAR 0 3
10797: PPUSH
10798: LD_VAR 0 4
10802: PPUSH
10803: LD_VAR 0 5
10807: PPUSH
10808: CALL 10865 0 5
// end ; end_of_file
10812: PPOPN 5
10814: END
// export function SOS_UnitDestroyed ( un ) ; begin
10815: LD_INT 0
10817: PPUSH
// ComRadiation ( un ) ;
10818: LD_VAR 0 1
10822: PPUSH
10823: CALL 11761 0 1
// end ;
10827: LD_VAR 0 2
10831: RET
// export function SOS_UnitKamikazed ( un ) ; begin
10832: LD_INT 0
10834: PPUSH
// ComRadiation ( un ) ;
10835: LD_VAR 0 1
10839: PPUSH
10840: CALL 11761 0 1
// end ;
10844: LD_VAR 0 2
10848: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10849: LD_INT 0
10851: PPUSH
// end ;
10852: LD_VAR 0 4
10856: RET
// export function SOS_Command ( cmd ) ; begin
10857: LD_INT 0
10859: PPUSH
// end ;
10860: LD_VAR 0 2
10864: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10865: LD_INT 0
10867: PPUSH
// end ;
10868: LD_VAR 0 6
10872: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
10873: LD_INT 0
10875: PPUSH
10876: PPUSH
10877: PPUSH
10878: PPUSH
// if not vehicle or not factory then
10879: LD_VAR 0 1
10883: NOT
10884: PUSH
10885: LD_VAR 0 2
10889: NOT
10890: OR
10891: IFFALSE 10895
// exit ;
10893: GO 11352
// if factoryWaypoints >= factory then
10895: LD_EXP 111
10899: PUSH
10900: LD_VAR 0 2
10904: GREATEREQUAL
10905: IFFALSE 11352
// if factoryWaypoints [ factory ] then
10907: LD_EXP 111
10911: PUSH
10912: LD_VAR 0 2
10916: ARRAY
10917: IFFALSE 11352
// begin if GetControl ( vehicle ) = control_manual then
10919: LD_VAR 0 1
10923: PPUSH
10924: CALL_OW 263
10928: PUSH
10929: LD_INT 1
10931: EQUAL
10932: IFFALSE 11239
// begin driver := IsDrivenBy ( vehicle ) ;
10934: LD_ADDR_VAR 0 5
10938: PUSH
10939: LD_VAR 0 1
10943: PPUSH
10944: CALL_OW 311
10948: ST_TO_ADDR
// tag := GetTag ( driver ) ;
10949: LD_ADDR_VAR 0 4
10953: PUSH
10954: LD_VAR 0 5
10958: PPUSH
10959: CALL_OW 110
10963: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
10964: LD_VAR 0 4
10968: PUSH
10969: LD_INT 501
10971: EQUAL
10972: PUSH
10973: LD_VAR 0 1
10977: PPUSH
10978: CALL_OW 110
10982: PUSH
10983: LD_INT 501
10985: EQUAL
10986: OR
10987: IFFALSE 10991
// exit ;
10989: GO 11352
// if not HasTask ( driver ) then
10991: LD_VAR 0 5
10995: PPUSH
10996: CALL_OW 314
11000: NOT
11001: IFFALSE 11237
// begin SetTag ( driver , tDriver ) ;
11003: LD_VAR 0 5
11007: PPUSH
11008: LD_INT 501
11010: PPUSH
11011: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
11015: LD_VAR 0 1
11019: PPUSH
11020: LD_INT 501
11022: PPUSH
11023: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11027: LD_ADDR_VAR 0 6
11031: PUSH
11032: LD_EXP 111
11036: PUSH
11037: LD_VAR 0 2
11041: ARRAY
11042: PUSH
11043: LD_INT 3
11045: ARRAY
11046: PPUSH
11047: LD_EXP 111
11051: PUSH
11052: LD_VAR 0 2
11056: ARRAY
11057: PUSH
11058: LD_INT 4
11060: ARRAY
11061: PPUSH
11062: CALL_OW 428
11066: ST_TO_ADDR
// if hex then
11067: LD_VAR 0 6
11071: IFFALSE 11089
// ComMoveUnit ( driver , hex ) else
11073: LD_VAR 0 5
11077: PPUSH
11078: LD_VAR 0 6
11082: PPUSH
11083: CALL_OW 112
11087: GO 11128
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11089: LD_VAR 0 5
11093: PPUSH
11094: LD_EXP 111
11098: PUSH
11099: LD_VAR 0 2
11103: ARRAY
11104: PUSH
11105: LD_INT 3
11107: ARRAY
11108: PPUSH
11109: LD_EXP 111
11113: PUSH
11114: LD_VAR 0 2
11118: ARRAY
11119: PUSH
11120: LD_INT 4
11122: ARRAY
11123: PPUSH
11124: CALL_OW 111
// AddComExitVehicle ( driver ) ;
11128: LD_VAR 0 5
11132: PPUSH
11133: CALL_OW 181
// if Multiplayer then
11137: LD_OWVAR 4
11141: IFFALSE 11190
// begin repeat wait ( 10 ) ;
11143: LD_INT 10
11145: PPUSH
11146: CALL_OW 67
// until not IsInUnit ( driver ) ;
11150: LD_VAR 0 5
11154: PPUSH
11155: CALL_OW 310
11159: NOT
11160: IFFALSE 11143
// if not HasTask ( driver ) then
11162: LD_VAR 0 5
11166: PPUSH
11167: CALL_OW 314
11171: NOT
11172: IFFALSE 11188
// ComEnterUnit ( driver , factory ) ;
11174: LD_VAR 0 5
11178: PPUSH
11179: LD_VAR 0 2
11183: PPUSH
11184: CALL_OW 120
// end else
11188: GO 11204
// AddComEnterUnit ( driver , factory ) ;
11190: LD_VAR 0 5
11194: PPUSH
11195: LD_VAR 0 2
11199: PPUSH
11200: CALL_OW 180
// wait ( 0 0$1 ) ;
11204: LD_INT 35
11206: PPUSH
11207: CALL_OW 67
// SetTag ( driver , tag ) ;
11211: LD_VAR 0 5
11215: PPUSH
11216: LD_VAR 0 4
11220: PPUSH
11221: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
11225: LD_VAR 0 1
11229: PPUSH
11230: LD_INT 0
11232: PPUSH
11233: CALL_OW 109
// end ; end else
11237: GO 11352
// if GetControl ( vehicle ) = control_remote then
11239: LD_VAR 0 1
11243: PPUSH
11244: CALL_OW 263
11248: PUSH
11249: LD_INT 2
11251: EQUAL
11252: IFFALSE 11313
// begin wait ( 0 0$2 ) ;
11254: LD_INT 70
11256: PPUSH
11257: CALL_OW 67
// if Connect ( vehicle ) then
11261: LD_VAR 0 1
11265: PPUSH
11266: CALL 40242 0 1
11270: IFFALSE 11311
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11272: LD_VAR 0 1
11276: PPUSH
11277: LD_EXP 111
11281: PUSH
11282: LD_VAR 0 2
11286: ARRAY
11287: PUSH
11288: LD_INT 3
11290: ARRAY
11291: PPUSH
11292: LD_EXP 111
11296: PUSH
11297: LD_VAR 0 2
11301: ARRAY
11302: PUSH
11303: LD_INT 4
11305: ARRAY
11306: PPUSH
11307: CALL_OW 171
// end else
11311: GO 11352
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11313: LD_VAR 0 1
11317: PPUSH
11318: LD_EXP 111
11322: PUSH
11323: LD_VAR 0 2
11327: ARRAY
11328: PUSH
11329: LD_INT 3
11331: ARRAY
11332: PPUSH
11333: LD_EXP 111
11337: PUSH
11338: LD_VAR 0 2
11342: ARRAY
11343: PUSH
11344: LD_INT 4
11346: ARRAY
11347: PPUSH
11348: CALL_OW 171
// end ; end ;
11352: LD_VAR 0 3
11356: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11357: LD_INT 0
11359: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11360: LD_VAR 0 1
11364: PUSH
11365: LD_INT 250
11367: EQUAL
11368: PUSH
11369: LD_VAR 0 2
11373: PPUSH
11374: CALL_OW 264
11378: PUSH
11379: LD_INT 81
11381: EQUAL
11382: AND
11383: IFFALSE 11404
// MinerPlaceMine ( unit , x , y ) ;
11385: LD_VAR 0 2
11389: PPUSH
11390: LD_VAR 0 4
11394: PPUSH
11395: LD_VAR 0 5
11399: PPUSH
11400: CALL 14496 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11404: LD_VAR 0 1
11408: PUSH
11409: LD_INT 251
11411: EQUAL
11412: PUSH
11413: LD_VAR 0 2
11417: PPUSH
11418: CALL_OW 264
11422: PUSH
11423: LD_INT 81
11425: EQUAL
11426: AND
11427: IFFALSE 11448
// MinerDetonateMine ( unit , x , y ) ;
11429: LD_VAR 0 2
11433: PPUSH
11434: LD_VAR 0 4
11438: PPUSH
11439: LD_VAR 0 5
11443: PPUSH
11444: CALL 14771 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11448: LD_VAR 0 1
11452: PUSH
11453: LD_INT 252
11455: EQUAL
11456: PUSH
11457: LD_VAR 0 2
11461: PPUSH
11462: CALL_OW 264
11466: PUSH
11467: LD_INT 81
11469: EQUAL
11470: AND
11471: IFFALSE 11492
// MinerCreateMinefield ( unit , x , y ) ;
11473: LD_VAR 0 2
11477: PPUSH
11478: LD_VAR 0 4
11482: PPUSH
11483: LD_VAR 0 5
11487: PPUSH
11488: CALL 15188 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11492: LD_VAR 0 1
11496: PUSH
11497: LD_INT 253
11499: EQUAL
11500: PUSH
11501: LD_VAR 0 2
11505: PPUSH
11506: CALL_OW 257
11510: PUSH
11511: LD_INT 5
11513: EQUAL
11514: AND
11515: IFFALSE 11536
// ComBinocular ( unit , x , y ) ;
11517: LD_VAR 0 2
11521: PPUSH
11522: LD_VAR 0 4
11526: PPUSH
11527: LD_VAR 0 5
11531: PPUSH
11532: CALL 15557 0 3
// if selectedUnit then
11536: LD_VAR 0 3
11540: IFFALSE 11596
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11542: LD_VAR 0 1
11546: PUSH
11547: LD_INT 254
11549: EQUAL
11550: PUSH
11551: LD_VAR 0 2
11555: PPUSH
11556: CALL_OW 264
11560: PUSH
11561: LD_INT 99
11563: EQUAL
11564: AND
11565: PUSH
11566: LD_VAR 0 3
11570: PPUSH
11571: CALL_OW 263
11575: PUSH
11576: LD_INT 3
11578: EQUAL
11579: AND
11580: IFFALSE 11596
// HackDestroyVehicle ( unit , selectedUnit ) ;
11582: LD_VAR 0 2
11586: PPUSH
11587: LD_VAR 0 3
11591: PPUSH
11592: CALL 13860 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11596: LD_VAR 0 1
11600: PUSH
11601: LD_INT 255
11603: EQUAL
11604: PUSH
11605: LD_VAR 0 2
11609: PPUSH
11610: CALL_OW 264
11614: PUSH
11615: LD_INT 14
11617: PUSH
11618: LD_INT 53
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: IN
11625: AND
11626: PUSH
11627: LD_VAR 0 4
11631: PPUSH
11632: LD_VAR 0 5
11636: PPUSH
11637: CALL_OW 488
11641: AND
11642: IFFALSE 11666
// CutTreeXYR ( unit , x , y , 12 ) ;
11644: LD_VAR 0 2
11648: PPUSH
11649: LD_VAR 0 4
11653: PPUSH
11654: LD_VAR 0 5
11658: PPUSH
11659: LD_INT 12
11661: PPUSH
11662: CALL 11857 0 4
// if cmd = 256 then
11666: LD_VAR 0 1
11670: PUSH
11671: LD_INT 256
11673: EQUAL
11674: IFFALSE 11695
// SetFactoryWaypoint ( unit , x , y ) ;
11676: LD_VAR 0 2
11680: PPUSH
11681: LD_VAR 0 4
11685: PPUSH
11686: LD_VAR 0 5
11690: PPUSH
11691: CALL 30623 0 3
// if cmd = 257 then
11695: LD_VAR 0 1
11699: PUSH
11700: LD_INT 257
11702: EQUAL
11703: IFFALSE 11724
// SetWarehouseGatheringPoint ( unit , x , y ) ;
11705: LD_VAR 0 2
11709: PPUSH
11710: LD_VAR 0 4
11714: PPUSH
11715: LD_VAR 0 5
11719: PPUSH
11720: CALL 30985 0 3
// if cmd = 258 then
11724: LD_VAR 0 1
11728: PUSH
11729: LD_INT 258
11731: EQUAL
11732: IFFALSE 11756
// BurnTreeXYR ( unit , x , y , 8 ) ;
11734: LD_VAR 0 2
11738: PPUSH
11739: LD_VAR 0 4
11743: PPUSH
11744: LD_VAR 0 5
11748: PPUSH
11749: LD_INT 8
11751: PPUSH
11752: CALL 12251 0 4
// end ;
11756: LD_VAR 0 6
11760: RET
// export function ComRadiation ( un ) ; var eff ; begin
11761: LD_INT 0
11763: PPUSH
11764: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
11765: LD_VAR 0 1
11769: PPUSH
11770: CALL_OW 264
11774: PUSH
11775: LD_INT 91
11777: NONEQUAL
11778: IFFALSE 11782
// exit ;
11780: GO 11852
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
11782: LD_INT 68
11784: PPUSH
11785: LD_VAR 0 1
11789: PPUSH
11790: CALL_OW 255
11794: PPUSH
11795: CALL_OW 321
11799: PUSH
11800: LD_INT 2
11802: EQUAL
11803: IFFALSE 11815
// eff := 70 else
11805: LD_ADDR_VAR 0 3
11809: PUSH
11810: LD_INT 70
11812: ST_TO_ADDR
11813: GO 11823
// eff := 30 ;
11815: LD_ADDR_VAR 0 3
11819: PUSH
11820: LD_INT 30
11822: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
11823: LD_VAR 0 1
11827: PPUSH
11828: CALL_OW 250
11832: PPUSH
11833: LD_VAR 0 1
11837: PPUSH
11838: CALL_OW 251
11842: PPUSH
11843: LD_VAR 0 3
11847: PPUSH
11848: CALL_OW 495
// end ;
11852: LD_VAR 0 2
11856: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11857: LD_INT 0
11859: PPUSH
11860: PPUSH
11861: PPUSH
11862: PPUSH
11863: PPUSH
11864: PPUSH
11865: PPUSH
11866: PPUSH
11867: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
11868: LD_VAR 0 1
11872: PPUSH
11873: CALL_OW 302
11877: NOT
11878: PUSH
11879: LD_VAR 0 2
11883: PPUSH
11884: LD_VAR 0 3
11888: PPUSH
11889: CALL_OW 488
11893: NOT
11894: OR
11895: PUSH
11896: LD_VAR 0 4
11900: NOT
11901: OR
11902: IFFALSE 11906
// exit ;
11904: GO 12246
// list := [ ] ;
11906: LD_ADDR_VAR 0 13
11910: PUSH
11911: EMPTY
11912: ST_TO_ADDR
// if x - r < 0 then
11913: LD_VAR 0 2
11917: PUSH
11918: LD_VAR 0 4
11922: MINUS
11923: PUSH
11924: LD_INT 0
11926: LESS
11927: IFFALSE 11939
// min_x := 0 else
11929: LD_ADDR_VAR 0 7
11933: PUSH
11934: LD_INT 0
11936: ST_TO_ADDR
11937: GO 11955
// min_x := x - r ;
11939: LD_ADDR_VAR 0 7
11943: PUSH
11944: LD_VAR 0 2
11948: PUSH
11949: LD_VAR 0 4
11953: MINUS
11954: ST_TO_ADDR
// if y - r < 0 then
11955: LD_VAR 0 3
11959: PUSH
11960: LD_VAR 0 4
11964: MINUS
11965: PUSH
11966: LD_INT 0
11968: LESS
11969: IFFALSE 11981
// min_y := 0 else
11971: LD_ADDR_VAR 0 8
11975: PUSH
11976: LD_INT 0
11978: ST_TO_ADDR
11979: GO 11997
// min_y := y - r ;
11981: LD_ADDR_VAR 0 8
11985: PUSH
11986: LD_VAR 0 3
11990: PUSH
11991: LD_VAR 0 4
11995: MINUS
11996: ST_TO_ADDR
// max_x := x + r ;
11997: LD_ADDR_VAR 0 9
12001: PUSH
12002: LD_VAR 0 2
12006: PUSH
12007: LD_VAR 0 4
12011: PLUS
12012: ST_TO_ADDR
// max_y := y + r ;
12013: LD_ADDR_VAR 0 10
12017: PUSH
12018: LD_VAR 0 3
12022: PUSH
12023: LD_VAR 0 4
12027: PLUS
12028: ST_TO_ADDR
// for _x = min_x to max_x do
12029: LD_ADDR_VAR 0 11
12033: PUSH
12034: DOUBLE
12035: LD_VAR 0 7
12039: DEC
12040: ST_TO_ADDR
12041: LD_VAR 0 9
12045: PUSH
12046: FOR_TO
12047: IFFALSE 12164
// for _y = min_y to max_y do
12049: LD_ADDR_VAR 0 12
12053: PUSH
12054: DOUBLE
12055: LD_VAR 0 8
12059: DEC
12060: ST_TO_ADDR
12061: LD_VAR 0 10
12065: PUSH
12066: FOR_TO
12067: IFFALSE 12160
// begin if not ValidHex ( _x , _y ) then
12069: LD_VAR 0 11
12073: PPUSH
12074: LD_VAR 0 12
12078: PPUSH
12079: CALL_OW 488
12083: NOT
12084: IFFALSE 12088
// continue ;
12086: GO 12066
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12088: LD_VAR 0 11
12092: PPUSH
12093: LD_VAR 0 12
12097: PPUSH
12098: CALL_OW 351
12102: PUSH
12103: LD_VAR 0 11
12107: PPUSH
12108: LD_VAR 0 12
12112: PPUSH
12113: CALL_OW 554
12117: AND
12118: IFFALSE 12158
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12120: LD_ADDR_VAR 0 13
12124: PUSH
12125: LD_VAR 0 13
12129: PPUSH
12130: LD_VAR 0 13
12134: PUSH
12135: LD_INT 1
12137: PLUS
12138: PPUSH
12139: LD_VAR 0 11
12143: PUSH
12144: LD_VAR 0 12
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 2
12157: ST_TO_ADDR
// end ;
12158: GO 12066
12160: POP
12161: POP
12162: GO 12046
12164: POP
12165: POP
// if not list then
12166: LD_VAR 0 13
12170: NOT
12171: IFFALSE 12175
// exit ;
12173: GO 12246
// for i in list do
12175: LD_ADDR_VAR 0 6
12179: PUSH
12180: LD_VAR 0 13
12184: PUSH
12185: FOR_IN
12186: IFFALSE 12244
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
12188: LD_VAR 0 1
12192: PPUSH
12193: LD_STRING M
12195: PUSH
12196: LD_VAR 0 6
12200: PUSH
12201: LD_INT 1
12203: ARRAY
12204: PUSH
12205: LD_VAR 0 6
12209: PUSH
12210: LD_INT 2
12212: ARRAY
12213: PUSH
12214: LD_INT 0
12216: PUSH
12217: LD_INT 0
12219: PUSH
12220: LD_INT 0
12222: PUSH
12223: LD_INT 0
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: PPUSH
12238: CALL_OW 447
12242: GO 12185
12244: POP
12245: POP
// end ;
12246: LD_VAR 0 5
12250: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
12251: LD_INT 0
12253: PPUSH
12254: PPUSH
12255: PPUSH
12256: PPUSH
12257: PPUSH
12258: PPUSH
12259: PPUSH
12260: PPUSH
12261: PPUSH
12262: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
12263: LD_VAR 0 1
12267: PPUSH
12268: CALL_OW 302
12272: NOT
12273: PUSH
12274: LD_VAR 0 2
12278: PPUSH
12279: LD_VAR 0 3
12283: PPUSH
12284: CALL_OW 488
12288: NOT
12289: OR
12290: PUSH
12291: LD_VAR 0 4
12295: NOT
12296: OR
12297: IFFALSE 12301
// exit ;
12299: GO 12814
// list := [ ] ;
12301: LD_ADDR_VAR 0 13
12305: PUSH
12306: EMPTY
12307: ST_TO_ADDR
// if x - r < 0 then
12308: LD_VAR 0 2
12312: PUSH
12313: LD_VAR 0 4
12317: MINUS
12318: PUSH
12319: LD_INT 0
12321: LESS
12322: IFFALSE 12334
// min_x := 0 else
12324: LD_ADDR_VAR 0 7
12328: PUSH
12329: LD_INT 0
12331: ST_TO_ADDR
12332: GO 12350
// min_x := x - r ;
12334: LD_ADDR_VAR 0 7
12338: PUSH
12339: LD_VAR 0 2
12343: PUSH
12344: LD_VAR 0 4
12348: MINUS
12349: ST_TO_ADDR
// if y - r < 0 then
12350: LD_VAR 0 3
12354: PUSH
12355: LD_VAR 0 4
12359: MINUS
12360: PUSH
12361: LD_INT 0
12363: LESS
12364: IFFALSE 12376
// min_y := 0 else
12366: LD_ADDR_VAR 0 8
12370: PUSH
12371: LD_INT 0
12373: ST_TO_ADDR
12374: GO 12392
// min_y := y - r ;
12376: LD_ADDR_VAR 0 8
12380: PUSH
12381: LD_VAR 0 3
12385: PUSH
12386: LD_VAR 0 4
12390: MINUS
12391: ST_TO_ADDR
// max_x := x + r ;
12392: LD_ADDR_VAR 0 9
12396: PUSH
12397: LD_VAR 0 2
12401: PUSH
12402: LD_VAR 0 4
12406: PLUS
12407: ST_TO_ADDR
// max_y := y + r ;
12408: LD_ADDR_VAR 0 10
12412: PUSH
12413: LD_VAR 0 3
12417: PUSH
12418: LD_VAR 0 4
12422: PLUS
12423: ST_TO_ADDR
// for _x = min_x to max_x do
12424: LD_ADDR_VAR 0 11
12428: PUSH
12429: DOUBLE
12430: LD_VAR 0 7
12434: DEC
12435: ST_TO_ADDR
12436: LD_VAR 0 9
12440: PUSH
12441: FOR_TO
12442: IFFALSE 12559
// for _y = min_y to max_y do
12444: LD_ADDR_VAR 0 12
12448: PUSH
12449: DOUBLE
12450: LD_VAR 0 8
12454: DEC
12455: ST_TO_ADDR
12456: LD_VAR 0 10
12460: PUSH
12461: FOR_TO
12462: IFFALSE 12555
// begin if not ValidHex ( _x , _y ) then
12464: LD_VAR 0 11
12468: PPUSH
12469: LD_VAR 0 12
12473: PPUSH
12474: CALL_OW 488
12478: NOT
12479: IFFALSE 12483
// continue ;
12481: GO 12461
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12483: LD_VAR 0 11
12487: PPUSH
12488: LD_VAR 0 12
12492: PPUSH
12493: CALL_OW 351
12497: PUSH
12498: LD_VAR 0 11
12502: PPUSH
12503: LD_VAR 0 12
12507: PPUSH
12508: CALL_OW 554
12512: AND
12513: IFFALSE 12553
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12515: LD_ADDR_VAR 0 13
12519: PUSH
12520: LD_VAR 0 13
12524: PPUSH
12525: LD_VAR 0 13
12529: PUSH
12530: LD_INT 1
12532: PLUS
12533: PPUSH
12534: LD_VAR 0 11
12538: PUSH
12539: LD_VAR 0 12
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PPUSH
12548: CALL_OW 2
12552: ST_TO_ADDR
// end ;
12553: GO 12461
12555: POP
12556: POP
12557: GO 12441
12559: POP
12560: POP
// if not list then
12561: LD_VAR 0 13
12565: NOT
12566: IFFALSE 12570
// exit ;
12568: GO 12814
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
12570: LD_ADDR_VAR 0 13
12574: PUSH
12575: LD_VAR 0 1
12579: PPUSH
12580: LD_VAR 0 13
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: CALL 37384 0 4
12595: ST_TO_ADDR
// ComStop ( flame ) ;
12596: LD_VAR 0 1
12600: PPUSH
12601: CALL_OW 141
// for i in list do
12605: LD_ADDR_VAR 0 6
12609: PUSH
12610: LD_VAR 0 13
12614: PUSH
12615: FOR_IN
12616: IFFALSE 12647
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
12618: LD_VAR 0 1
12622: PPUSH
12623: LD_VAR 0 6
12627: PUSH
12628: LD_INT 1
12630: ARRAY
12631: PPUSH
12632: LD_VAR 0 6
12636: PUSH
12637: LD_INT 2
12639: ARRAY
12640: PPUSH
12641: CALL_OW 176
12645: GO 12615
12647: POP
12648: POP
// repeat wait ( 0 0$1 ) ;
12649: LD_INT 35
12651: PPUSH
12652: CALL_OW 67
// task := GetTaskList ( flame ) ;
12656: LD_ADDR_VAR 0 14
12660: PUSH
12661: LD_VAR 0 1
12665: PPUSH
12666: CALL_OW 437
12670: ST_TO_ADDR
// if not task then
12671: LD_VAR 0 14
12675: NOT
12676: IFFALSE 12680
// exit ;
12678: GO 12814
// if task [ 1 ] [ 1 ] <> | then
12680: LD_VAR 0 14
12684: PUSH
12685: LD_INT 1
12687: ARRAY
12688: PUSH
12689: LD_INT 1
12691: ARRAY
12692: PUSH
12693: LD_STRING |
12695: NONEQUAL
12696: IFFALSE 12700
// exit ;
12698: GO 12814
// _x := task [ 1 ] [ 2 ] ;
12700: LD_ADDR_VAR 0 11
12704: PUSH
12705: LD_VAR 0 14
12709: PUSH
12710: LD_INT 1
12712: ARRAY
12713: PUSH
12714: LD_INT 2
12716: ARRAY
12717: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
12718: LD_ADDR_VAR 0 12
12722: PUSH
12723: LD_VAR 0 14
12727: PUSH
12728: LD_INT 1
12730: ARRAY
12731: PUSH
12732: LD_INT 3
12734: ARRAY
12735: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
12736: LD_VAR 0 11
12740: PPUSH
12741: LD_VAR 0 12
12745: PPUSH
12746: CALL_OW 351
12750: NOT
12751: PUSH
12752: LD_VAR 0 11
12756: PPUSH
12757: LD_VAR 0 12
12761: PPUSH
12762: CALL_OW 554
12766: NOT
12767: OR
12768: IFFALSE 12802
// begin task := Delete ( task , 1 ) ;
12770: LD_ADDR_VAR 0 14
12774: PUSH
12775: LD_VAR 0 14
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL_OW 3
12787: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
12788: LD_VAR 0 1
12792: PPUSH
12793: LD_VAR 0 14
12797: PPUSH
12798: CALL_OW 446
// end ; until not HasTask ( flame ) ;
12802: LD_VAR 0 1
12806: PPUSH
12807: CALL_OW 314
12811: NOT
12812: IFFALSE 12649
// end ;
12814: LD_VAR 0 5
12818: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
12819: LD_EXP 42
12823: NOT
12824: IFFALSE 12874
12826: GO 12828
12828: DISABLE
// begin initHack := true ;
12829: LD_ADDR_EXP 42
12833: PUSH
12834: LD_INT 1
12836: ST_TO_ADDR
// hackTanks := [ ] ;
12837: LD_ADDR_EXP 43
12841: PUSH
12842: EMPTY
12843: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
12844: LD_ADDR_EXP 44
12848: PUSH
12849: EMPTY
12850: ST_TO_ADDR
// hackLimit := 3 ;
12851: LD_ADDR_EXP 45
12855: PUSH
12856: LD_INT 3
12858: ST_TO_ADDR
// hackDist := 12 ;
12859: LD_ADDR_EXP 46
12863: PUSH
12864: LD_INT 12
12866: ST_TO_ADDR
// hackCounter := [ ] ;
12867: LD_ADDR_EXP 47
12871: PUSH
12872: EMPTY
12873: ST_TO_ADDR
// end ;
12874: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
12875: LD_EXP 42
12879: PUSH
12880: LD_INT 34
12882: PUSH
12883: LD_INT 99
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PPUSH
12890: CALL_OW 69
12894: AND
12895: IFFALSE 13148
12897: GO 12899
12899: DISABLE
12900: LD_INT 0
12902: PPUSH
12903: PPUSH
// begin enable ;
12904: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
12905: LD_ADDR_VAR 0 1
12909: PUSH
12910: LD_INT 34
12912: PUSH
12913: LD_INT 99
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PPUSH
12920: CALL_OW 69
12924: PUSH
12925: FOR_IN
12926: IFFALSE 13146
// begin if not i in hackTanks then
12928: LD_VAR 0 1
12932: PUSH
12933: LD_EXP 43
12937: IN
12938: NOT
12939: IFFALSE 13022
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
12941: LD_ADDR_EXP 43
12945: PUSH
12946: LD_EXP 43
12950: PPUSH
12951: LD_EXP 43
12955: PUSH
12956: LD_INT 1
12958: PLUS
12959: PPUSH
12960: LD_VAR 0 1
12964: PPUSH
12965: CALL_OW 1
12969: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
12970: LD_ADDR_EXP 44
12974: PUSH
12975: LD_EXP 44
12979: PPUSH
12980: LD_EXP 44
12984: PUSH
12985: LD_INT 1
12987: PLUS
12988: PPUSH
12989: EMPTY
12990: PPUSH
12991: CALL_OW 1
12995: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
12996: LD_ADDR_EXP 47
13000: PUSH
13001: LD_EXP 47
13005: PPUSH
13006: LD_EXP 47
13010: PUSH
13011: LD_INT 1
13013: PLUS
13014: PPUSH
13015: EMPTY
13016: PPUSH
13017: CALL_OW 1
13021: ST_TO_ADDR
// end ; if not IsOk ( i ) then
13022: LD_VAR 0 1
13026: PPUSH
13027: CALL_OW 302
13031: NOT
13032: IFFALSE 13045
// begin HackUnlinkAll ( i ) ;
13034: LD_VAR 0 1
13038: PPUSH
13039: CALL 13151 0 1
// continue ;
13043: GO 12925
// end ; HackCheckCapturedStatus ( i ) ;
13045: LD_VAR 0 1
13049: PPUSH
13050: CALL 13594 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
13054: LD_ADDR_VAR 0 2
13058: PUSH
13059: LD_INT 81
13061: PUSH
13062: LD_VAR 0 1
13066: PPUSH
13067: CALL_OW 255
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: LD_INT 33
13078: PUSH
13079: LD_INT 3
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PUSH
13086: LD_INT 91
13088: PUSH
13089: LD_VAR 0 1
13093: PUSH
13094: LD_EXP 46
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 50
13106: PUSH
13107: EMPTY
13108: LIST
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: PPUSH
13116: CALL_OW 69
13120: ST_TO_ADDR
// if not tmp then
13121: LD_VAR 0 2
13125: NOT
13126: IFFALSE 13130
// continue ;
13128: GO 12925
// HackLink ( i , tmp ) ;
13130: LD_VAR 0 1
13134: PPUSH
13135: LD_VAR 0 2
13139: PPUSH
13140: CALL 13287 0 2
// end ;
13144: GO 12925
13146: POP
13147: POP
// end ;
13148: PPOPN 2
13150: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
13151: LD_INT 0
13153: PPUSH
13154: PPUSH
13155: PPUSH
// if not hack in hackTanks then
13156: LD_VAR 0 1
13160: PUSH
13161: LD_EXP 43
13165: IN
13166: NOT
13167: IFFALSE 13171
// exit ;
13169: GO 13282
// index := GetElementIndex ( hackTanks , hack ) ;
13171: LD_ADDR_VAR 0 4
13175: PUSH
13176: LD_EXP 43
13180: PPUSH
13181: LD_VAR 0 1
13185: PPUSH
13186: CALL 36681 0 2
13190: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
13191: LD_EXP 44
13195: PUSH
13196: LD_VAR 0 4
13200: ARRAY
13201: IFFALSE 13282
// begin for i in hackTanksCaptured [ index ] do
13203: LD_ADDR_VAR 0 3
13207: PUSH
13208: LD_EXP 44
13212: PUSH
13213: LD_VAR 0 4
13217: ARRAY
13218: PUSH
13219: FOR_IN
13220: IFFALSE 13246
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
13222: LD_VAR 0 3
13226: PUSH
13227: LD_INT 1
13229: ARRAY
13230: PPUSH
13231: LD_VAR 0 3
13235: PUSH
13236: LD_INT 2
13238: ARRAY
13239: PPUSH
13240: CALL_OW 235
13244: GO 13219
13246: POP
13247: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
13248: LD_ADDR_EXP 44
13252: PUSH
13253: LD_EXP 44
13257: PPUSH
13258: LD_VAR 0 4
13262: PPUSH
13263: EMPTY
13264: PPUSH
13265: CALL_OW 1
13269: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
13270: LD_VAR 0 1
13274: PPUSH
13275: LD_INT 0
13277: PPUSH
13278: CALL_OW 505
// end ; end ;
13282: LD_VAR 0 2
13286: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
13287: LD_INT 0
13289: PPUSH
13290: PPUSH
13291: PPUSH
// if not hack in hackTanks or not vehicles then
13292: LD_VAR 0 1
13296: PUSH
13297: LD_EXP 43
13301: IN
13302: NOT
13303: PUSH
13304: LD_VAR 0 2
13308: NOT
13309: OR
13310: IFFALSE 13314
// exit ;
13312: GO 13589
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
13314: LD_ADDR_VAR 0 2
13318: PUSH
13319: LD_VAR 0 1
13323: PPUSH
13324: LD_VAR 0 2
13328: PPUSH
13329: LD_INT 1
13331: PPUSH
13332: LD_INT 1
13334: PPUSH
13335: CALL 37331 0 4
13339: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
13340: LD_ADDR_VAR 0 5
13344: PUSH
13345: LD_EXP 43
13349: PPUSH
13350: LD_VAR 0 1
13354: PPUSH
13355: CALL 36681 0 2
13359: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
13360: LD_EXP 44
13364: PUSH
13365: LD_VAR 0 5
13369: ARRAY
13370: PUSH
13371: LD_EXP 45
13375: LESS
13376: IFFALSE 13565
// begin for i := 1 to vehicles do
13378: LD_ADDR_VAR 0 4
13382: PUSH
13383: DOUBLE
13384: LD_INT 1
13386: DEC
13387: ST_TO_ADDR
13388: LD_VAR 0 2
13392: PUSH
13393: FOR_TO
13394: IFFALSE 13563
// begin if hackTanksCaptured [ index ] = hackLimit then
13396: LD_EXP 44
13400: PUSH
13401: LD_VAR 0 5
13405: ARRAY
13406: PUSH
13407: LD_EXP 45
13411: EQUAL
13412: IFFALSE 13416
// break ;
13414: GO 13563
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
13416: LD_ADDR_EXP 47
13420: PUSH
13421: LD_EXP 47
13425: PPUSH
13426: LD_VAR 0 5
13430: PPUSH
13431: LD_EXP 47
13435: PUSH
13436: LD_VAR 0 5
13440: ARRAY
13441: PUSH
13442: LD_INT 1
13444: PLUS
13445: PPUSH
13446: CALL_OW 1
13450: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
13451: LD_ADDR_EXP 44
13455: PUSH
13456: LD_EXP 44
13460: PPUSH
13461: LD_VAR 0 5
13465: PUSH
13466: LD_EXP 44
13470: PUSH
13471: LD_VAR 0 5
13475: ARRAY
13476: PUSH
13477: LD_INT 1
13479: PLUS
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PPUSH
13485: LD_VAR 0 2
13489: PUSH
13490: LD_VAR 0 4
13494: ARRAY
13495: PUSH
13496: LD_VAR 0 2
13500: PUSH
13501: LD_VAR 0 4
13505: ARRAY
13506: PPUSH
13507: CALL_OW 255
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PPUSH
13516: CALL 36896 0 3
13520: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
13521: LD_VAR 0 2
13525: PUSH
13526: LD_VAR 0 4
13530: ARRAY
13531: PPUSH
13532: LD_VAR 0 1
13536: PPUSH
13537: CALL_OW 255
13541: PPUSH
13542: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
13546: LD_VAR 0 2
13550: PUSH
13551: LD_VAR 0 4
13555: ARRAY
13556: PPUSH
13557: CALL_OW 141
// end ;
13561: GO 13393
13563: POP
13564: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13565: LD_VAR 0 1
13569: PPUSH
13570: LD_EXP 44
13574: PUSH
13575: LD_VAR 0 5
13579: ARRAY
13580: PUSH
13581: LD_INT 0
13583: PLUS
13584: PPUSH
13585: CALL_OW 505
// end ;
13589: LD_VAR 0 3
13593: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
13594: LD_INT 0
13596: PPUSH
13597: PPUSH
13598: PPUSH
13599: PPUSH
// if not hack in hackTanks then
13600: LD_VAR 0 1
13604: PUSH
13605: LD_EXP 43
13609: IN
13610: NOT
13611: IFFALSE 13615
// exit ;
13613: GO 13855
// index := GetElementIndex ( hackTanks , hack ) ;
13615: LD_ADDR_VAR 0 4
13619: PUSH
13620: LD_EXP 43
13624: PPUSH
13625: LD_VAR 0 1
13629: PPUSH
13630: CALL 36681 0 2
13634: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
13635: LD_ADDR_VAR 0 3
13639: PUSH
13640: DOUBLE
13641: LD_EXP 44
13645: PUSH
13646: LD_VAR 0 4
13650: ARRAY
13651: INC
13652: ST_TO_ADDR
13653: LD_INT 1
13655: PUSH
13656: FOR_DOWNTO
13657: IFFALSE 13829
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
13659: LD_ADDR_VAR 0 5
13663: PUSH
13664: LD_EXP 44
13668: PUSH
13669: LD_VAR 0 4
13673: ARRAY
13674: PUSH
13675: LD_VAR 0 3
13679: ARRAY
13680: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
13681: LD_VAR 0 5
13685: PUSH
13686: LD_INT 1
13688: ARRAY
13689: PPUSH
13690: CALL_OW 302
13694: NOT
13695: PUSH
13696: LD_VAR 0 5
13700: PUSH
13701: LD_INT 1
13703: ARRAY
13704: PPUSH
13705: CALL_OW 255
13709: PUSH
13710: LD_VAR 0 1
13714: PPUSH
13715: CALL_OW 255
13719: NONEQUAL
13720: OR
13721: IFFALSE 13827
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
13723: LD_VAR 0 5
13727: PUSH
13728: LD_INT 1
13730: ARRAY
13731: PPUSH
13732: CALL_OW 305
13736: PUSH
13737: LD_VAR 0 5
13741: PUSH
13742: LD_INT 1
13744: ARRAY
13745: PPUSH
13746: CALL_OW 255
13750: PUSH
13751: LD_VAR 0 1
13755: PPUSH
13756: CALL_OW 255
13760: EQUAL
13761: AND
13762: IFFALSE 13786
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
13764: LD_VAR 0 5
13768: PUSH
13769: LD_INT 1
13771: ARRAY
13772: PPUSH
13773: LD_VAR 0 5
13777: PUSH
13778: LD_INT 2
13780: ARRAY
13781: PPUSH
13782: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
13786: LD_ADDR_EXP 44
13790: PUSH
13791: LD_EXP 44
13795: PPUSH
13796: LD_VAR 0 4
13800: PPUSH
13801: LD_EXP 44
13805: PUSH
13806: LD_VAR 0 4
13810: ARRAY
13811: PPUSH
13812: LD_VAR 0 3
13816: PPUSH
13817: CALL_OW 3
13821: PPUSH
13822: CALL_OW 1
13826: ST_TO_ADDR
// end ; end ;
13827: GO 13656
13829: POP
13830: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13831: LD_VAR 0 1
13835: PPUSH
13836: LD_EXP 44
13840: PUSH
13841: LD_VAR 0 4
13845: ARRAY
13846: PUSH
13847: LD_INT 0
13849: PLUS
13850: PPUSH
13851: CALL_OW 505
// end ;
13855: LD_VAR 0 2
13859: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
13860: LD_INT 0
13862: PPUSH
13863: PPUSH
13864: PPUSH
13865: PPUSH
// if not hack in hackTanks then
13866: LD_VAR 0 1
13870: PUSH
13871: LD_EXP 43
13875: IN
13876: NOT
13877: IFFALSE 13881
// exit ;
13879: GO 13966
// index := GetElementIndex ( hackTanks , hack ) ;
13881: LD_ADDR_VAR 0 5
13885: PUSH
13886: LD_EXP 43
13890: PPUSH
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL 36681 0 2
13900: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
13901: LD_ADDR_VAR 0 4
13905: PUSH
13906: DOUBLE
13907: LD_INT 1
13909: DEC
13910: ST_TO_ADDR
13911: LD_EXP 44
13915: PUSH
13916: LD_VAR 0 5
13920: ARRAY
13921: PUSH
13922: FOR_TO
13923: IFFALSE 13964
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
13925: LD_EXP 44
13929: PUSH
13930: LD_VAR 0 5
13934: ARRAY
13935: PUSH
13936: LD_VAR 0 4
13940: ARRAY
13941: PUSH
13942: LD_INT 1
13944: ARRAY
13945: PUSH
13946: LD_VAR 0 2
13950: EQUAL
13951: IFFALSE 13962
// KillUnit ( vehicle ) ;
13953: LD_VAR 0 2
13957: PPUSH
13958: CALL_OW 66
13962: GO 13922
13964: POP
13965: POP
// end ;
13966: LD_VAR 0 3
13970: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
13971: LD_EXP 48
13975: NOT
13976: IFFALSE 14011
13978: GO 13980
13980: DISABLE
// begin initMiner := true ;
13981: LD_ADDR_EXP 48
13985: PUSH
13986: LD_INT 1
13988: ST_TO_ADDR
// minersList := [ ] ;
13989: LD_ADDR_EXP 49
13993: PUSH
13994: EMPTY
13995: ST_TO_ADDR
// minerMinesList := [ ] ;
13996: LD_ADDR_EXP 50
14000: PUSH
14001: EMPTY
14002: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
14003: LD_ADDR_EXP 51
14007: PUSH
14008: LD_INT 5
14010: ST_TO_ADDR
// end ;
14011: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
14012: LD_EXP 48
14016: PUSH
14017: LD_INT 34
14019: PUSH
14020: LD_INT 81
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PPUSH
14027: CALL_OW 69
14031: AND
14032: IFFALSE 14493
14034: GO 14036
14036: DISABLE
14037: LD_INT 0
14039: PPUSH
14040: PPUSH
14041: PPUSH
14042: PPUSH
// begin enable ;
14043: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
14044: LD_ADDR_VAR 0 1
14048: PUSH
14049: LD_INT 34
14051: PUSH
14052: LD_INT 81
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: CALL_OW 69
14063: PUSH
14064: FOR_IN
14065: IFFALSE 14137
// begin if not i in minersList then
14067: LD_VAR 0 1
14071: PUSH
14072: LD_EXP 49
14076: IN
14077: NOT
14078: IFFALSE 14135
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
14080: LD_ADDR_EXP 49
14084: PUSH
14085: LD_EXP 49
14089: PPUSH
14090: LD_EXP 49
14094: PUSH
14095: LD_INT 1
14097: PLUS
14098: PPUSH
14099: LD_VAR 0 1
14103: PPUSH
14104: CALL_OW 1
14108: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
14109: LD_ADDR_EXP 50
14113: PUSH
14114: LD_EXP 50
14118: PPUSH
14119: LD_EXP 50
14123: PUSH
14124: LD_INT 1
14126: PLUS
14127: PPUSH
14128: EMPTY
14129: PPUSH
14130: CALL_OW 1
14134: ST_TO_ADDR
// end end ;
14135: GO 14064
14137: POP
14138: POP
// for i := minerMinesList downto 1 do
14139: LD_ADDR_VAR 0 1
14143: PUSH
14144: DOUBLE
14145: LD_EXP 50
14149: INC
14150: ST_TO_ADDR
14151: LD_INT 1
14153: PUSH
14154: FOR_DOWNTO
14155: IFFALSE 14491
// begin if IsLive ( minersList [ i ] ) then
14157: LD_EXP 49
14161: PUSH
14162: LD_VAR 0 1
14166: ARRAY
14167: PPUSH
14168: CALL_OW 300
14172: IFFALSE 14200
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
14174: LD_EXP 49
14178: PUSH
14179: LD_VAR 0 1
14183: ARRAY
14184: PPUSH
14185: LD_EXP 50
14189: PUSH
14190: LD_VAR 0 1
14194: ARRAY
14195: PPUSH
14196: CALL_OW 505
// if not minerMinesList [ i ] then
14200: LD_EXP 50
14204: PUSH
14205: LD_VAR 0 1
14209: ARRAY
14210: NOT
14211: IFFALSE 14215
// continue ;
14213: GO 14154
// for j := minerMinesList [ i ] downto 1 do
14215: LD_ADDR_VAR 0 2
14219: PUSH
14220: DOUBLE
14221: LD_EXP 50
14225: PUSH
14226: LD_VAR 0 1
14230: ARRAY
14231: INC
14232: ST_TO_ADDR
14233: LD_INT 1
14235: PUSH
14236: FOR_DOWNTO
14237: IFFALSE 14487
// begin side := GetSide ( minersList [ i ] ) ;
14239: LD_ADDR_VAR 0 3
14243: PUSH
14244: LD_EXP 49
14248: PUSH
14249: LD_VAR 0 1
14253: ARRAY
14254: PPUSH
14255: CALL_OW 255
14259: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
14260: LD_ADDR_VAR 0 4
14264: PUSH
14265: LD_EXP 50
14269: PUSH
14270: LD_VAR 0 1
14274: ARRAY
14275: PUSH
14276: LD_VAR 0 2
14280: ARRAY
14281: PUSH
14282: LD_INT 1
14284: ARRAY
14285: PPUSH
14286: LD_EXP 50
14290: PUSH
14291: LD_VAR 0 1
14295: ARRAY
14296: PUSH
14297: LD_VAR 0 2
14301: ARRAY
14302: PUSH
14303: LD_INT 2
14305: ARRAY
14306: PPUSH
14307: CALL_OW 428
14311: ST_TO_ADDR
// if not tmp then
14312: LD_VAR 0 4
14316: NOT
14317: IFFALSE 14321
// continue ;
14319: GO 14236
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
14321: LD_VAR 0 4
14325: PUSH
14326: LD_INT 81
14328: PUSH
14329: LD_VAR 0 3
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PPUSH
14338: CALL_OW 69
14342: IN
14343: PUSH
14344: LD_EXP 50
14348: PUSH
14349: LD_VAR 0 1
14353: ARRAY
14354: PUSH
14355: LD_VAR 0 2
14359: ARRAY
14360: PUSH
14361: LD_INT 1
14363: ARRAY
14364: PPUSH
14365: LD_EXP 50
14369: PUSH
14370: LD_VAR 0 1
14374: ARRAY
14375: PUSH
14376: LD_VAR 0 2
14380: ARRAY
14381: PUSH
14382: LD_INT 2
14384: ARRAY
14385: PPUSH
14386: CALL_OW 458
14390: AND
14391: IFFALSE 14485
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
14393: LD_EXP 50
14397: PUSH
14398: LD_VAR 0 1
14402: ARRAY
14403: PUSH
14404: LD_VAR 0 2
14408: ARRAY
14409: PUSH
14410: LD_INT 1
14412: ARRAY
14413: PPUSH
14414: LD_EXP 50
14418: PUSH
14419: LD_VAR 0 1
14423: ARRAY
14424: PUSH
14425: LD_VAR 0 2
14429: ARRAY
14430: PUSH
14431: LD_INT 2
14433: ARRAY
14434: PPUSH
14435: LD_VAR 0 3
14439: PPUSH
14440: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
14444: LD_ADDR_EXP 50
14448: PUSH
14449: LD_EXP 50
14453: PPUSH
14454: LD_VAR 0 1
14458: PPUSH
14459: LD_EXP 50
14463: PUSH
14464: LD_VAR 0 1
14468: ARRAY
14469: PPUSH
14470: LD_VAR 0 2
14474: PPUSH
14475: CALL_OW 3
14479: PPUSH
14480: CALL_OW 1
14484: ST_TO_ADDR
// end ; end ;
14485: GO 14236
14487: POP
14488: POP
// end ;
14489: GO 14154
14491: POP
14492: POP
// end ;
14493: PPOPN 4
14495: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
14496: LD_INT 0
14498: PPUSH
14499: PPUSH
// result := false ;
14500: LD_ADDR_VAR 0 4
14504: PUSH
14505: LD_INT 0
14507: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
14508: LD_VAR 0 1
14512: PPUSH
14513: CALL_OW 264
14517: PUSH
14518: LD_INT 81
14520: EQUAL
14521: NOT
14522: IFFALSE 14526
// exit ;
14524: GO 14766
// index := GetElementIndex ( minersList , unit ) ;
14526: LD_ADDR_VAR 0 5
14530: PUSH
14531: LD_EXP 49
14535: PPUSH
14536: LD_VAR 0 1
14540: PPUSH
14541: CALL 36681 0 2
14545: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
14546: LD_EXP 50
14550: PUSH
14551: LD_VAR 0 5
14555: ARRAY
14556: PUSH
14557: LD_EXP 51
14561: GREATEREQUAL
14562: IFFALSE 14566
// exit ;
14564: GO 14766
// ComMoveXY ( unit , x , y ) ;
14566: LD_VAR 0 1
14570: PPUSH
14571: LD_VAR 0 2
14575: PPUSH
14576: LD_VAR 0 3
14580: PPUSH
14581: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14585: LD_INT 35
14587: PPUSH
14588: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
14592: LD_VAR 0 1
14596: PPUSH
14597: LD_VAR 0 2
14601: PPUSH
14602: LD_VAR 0 3
14606: PPUSH
14607: CALL 68422 0 3
14611: NOT
14612: PUSH
14613: LD_VAR 0 1
14617: PPUSH
14618: CALL_OW 314
14622: AND
14623: IFFALSE 14627
// exit ;
14625: GO 14766
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
14627: LD_VAR 0 2
14631: PPUSH
14632: LD_VAR 0 3
14636: PPUSH
14637: CALL_OW 428
14641: PUSH
14642: LD_VAR 0 1
14646: EQUAL
14647: PUSH
14648: LD_VAR 0 1
14652: PPUSH
14653: CALL_OW 314
14657: NOT
14658: AND
14659: IFFALSE 14585
// PlaySoundXY ( x , y , PlantMine ) ;
14661: LD_VAR 0 2
14665: PPUSH
14666: LD_VAR 0 3
14670: PPUSH
14671: LD_STRING PlantMine
14673: PPUSH
14674: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
14678: LD_VAR 0 2
14682: PPUSH
14683: LD_VAR 0 3
14687: PPUSH
14688: LD_VAR 0 1
14692: PPUSH
14693: CALL_OW 255
14697: PPUSH
14698: LD_INT 0
14700: PPUSH
14701: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
14705: LD_ADDR_EXP 50
14709: PUSH
14710: LD_EXP 50
14714: PPUSH
14715: LD_VAR 0 5
14719: PUSH
14720: LD_EXP 50
14724: PUSH
14725: LD_VAR 0 5
14729: ARRAY
14730: PUSH
14731: LD_INT 1
14733: PLUS
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: LD_VAR 0 2
14743: PUSH
14744: LD_VAR 0 3
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PPUSH
14753: CALL 36896 0 3
14757: ST_TO_ADDR
// result := true ;
14758: LD_ADDR_VAR 0 4
14762: PUSH
14763: LD_INT 1
14765: ST_TO_ADDR
// end ;
14766: LD_VAR 0 4
14770: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
14771: LD_INT 0
14773: PPUSH
14774: PPUSH
14775: PPUSH
// if not unit in minersList then
14776: LD_VAR 0 1
14780: PUSH
14781: LD_EXP 49
14785: IN
14786: NOT
14787: IFFALSE 14791
// exit ;
14789: GO 15183
// index := GetElementIndex ( minersList , unit ) ;
14791: LD_ADDR_VAR 0 6
14795: PUSH
14796: LD_EXP 49
14800: PPUSH
14801: LD_VAR 0 1
14805: PPUSH
14806: CALL 36681 0 2
14810: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
14811: LD_ADDR_VAR 0 5
14815: PUSH
14816: DOUBLE
14817: LD_EXP 50
14821: PUSH
14822: LD_VAR 0 6
14826: ARRAY
14827: INC
14828: ST_TO_ADDR
14829: LD_INT 1
14831: PUSH
14832: FOR_DOWNTO
14833: IFFALSE 14994
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
14835: LD_EXP 50
14839: PUSH
14840: LD_VAR 0 6
14844: ARRAY
14845: PUSH
14846: LD_VAR 0 5
14850: ARRAY
14851: PUSH
14852: LD_INT 1
14854: ARRAY
14855: PUSH
14856: LD_VAR 0 2
14860: EQUAL
14861: PUSH
14862: LD_EXP 50
14866: PUSH
14867: LD_VAR 0 6
14871: ARRAY
14872: PUSH
14873: LD_VAR 0 5
14877: ARRAY
14878: PUSH
14879: LD_INT 2
14881: ARRAY
14882: PUSH
14883: LD_VAR 0 3
14887: EQUAL
14888: AND
14889: IFFALSE 14992
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14891: LD_EXP 50
14895: PUSH
14896: LD_VAR 0 6
14900: ARRAY
14901: PUSH
14902: LD_VAR 0 5
14906: ARRAY
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: PPUSH
14912: LD_EXP 50
14916: PUSH
14917: LD_VAR 0 6
14921: ARRAY
14922: PUSH
14923: LD_VAR 0 5
14927: ARRAY
14928: PUSH
14929: LD_INT 2
14931: ARRAY
14932: PPUSH
14933: LD_VAR 0 1
14937: PPUSH
14938: CALL_OW 255
14942: PPUSH
14943: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14947: LD_ADDR_EXP 50
14951: PUSH
14952: LD_EXP 50
14956: PPUSH
14957: LD_VAR 0 6
14961: PPUSH
14962: LD_EXP 50
14966: PUSH
14967: LD_VAR 0 6
14971: ARRAY
14972: PPUSH
14973: LD_VAR 0 5
14977: PPUSH
14978: CALL_OW 3
14982: PPUSH
14983: CALL_OW 1
14987: ST_TO_ADDR
// exit ;
14988: POP
14989: POP
14990: GO 15183
// end ; end ;
14992: GO 14832
14994: POP
14995: POP
// for i := minerMinesList [ index ] downto 1 do
14996: LD_ADDR_VAR 0 5
15000: PUSH
15001: DOUBLE
15002: LD_EXP 50
15006: PUSH
15007: LD_VAR 0 6
15011: ARRAY
15012: INC
15013: ST_TO_ADDR
15014: LD_INT 1
15016: PUSH
15017: FOR_DOWNTO
15018: IFFALSE 15181
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
15020: LD_EXP 50
15024: PUSH
15025: LD_VAR 0 6
15029: ARRAY
15030: PUSH
15031: LD_VAR 0 5
15035: ARRAY
15036: PUSH
15037: LD_INT 1
15039: ARRAY
15040: PPUSH
15041: LD_EXP 50
15045: PUSH
15046: LD_VAR 0 6
15050: ARRAY
15051: PUSH
15052: LD_VAR 0 5
15056: ARRAY
15057: PUSH
15058: LD_INT 2
15060: ARRAY
15061: PPUSH
15062: LD_VAR 0 2
15066: PPUSH
15067: LD_VAR 0 3
15071: PPUSH
15072: CALL_OW 298
15076: PUSH
15077: LD_INT 6
15079: LESS
15080: IFFALSE 15179
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
15082: LD_EXP 50
15086: PUSH
15087: LD_VAR 0 6
15091: ARRAY
15092: PUSH
15093: LD_VAR 0 5
15097: ARRAY
15098: PUSH
15099: LD_INT 1
15101: ARRAY
15102: PPUSH
15103: LD_EXP 50
15107: PUSH
15108: LD_VAR 0 6
15112: ARRAY
15113: PUSH
15114: LD_VAR 0 5
15118: ARRAY
15119: PUSH
15120: LD_INT 2
15122: ARRAY
15123: PPUSH
15124: LD_VAR 0 1
15128: PPUSH
15129: CALL_OW 255
15133: PPUSH
15134: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
15138: LD_ADDR_EXP 50
15142: PUSH
15143: LD_EXP 50
15147: PPUSH
15148: LD_VAR 0 6
15152: PPUSH
15153: LD_EXP 50
15157: PUSH
15158: LD_VAR 0 6
15162: ARRAY
15163: PPUSH
15164: LD_VAR 0 5
15168: PPUSH
15169: CALL_OW 3
15173: PPUSH
15174: CALL_OW 1
15178: ST_TO_ADDR
// end ; end ;
15179: GO 15017
15181: POP
15182: POP
// end ;
15183: LD_VAR 0 4
15187: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
15188: LD_INT 0
15190: PPUSH
15191: PPUSH
15192: PPUSH
15193: PPUSH
15194: PPUSH
15195: PPUSH
15196: PPUSH
15197: PPUSH
15198: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
15199: LD_VAR 0 1
15203: PPUSH
15204: CALL_OW 264
15208: PUSH
15209: LD_INT 81
15211: EQUAL
15212: NOT
15213: PUSH
15214: LD_VAR 0 1
15218: PUSH
15219: LD_EXP 49
15223: IN
15224: NOT
15225: OR
15226: IFFALSE 15230
// exit ;
15228: GO 15552
// index := GetElementIndex ( minersList , unit ) ;
15230: LD_ADDR_VAR 0 6
15234: PUSH
15235: LD_EXP 49
15239: PPUSH
15240: LD_VAR 0 1
15244: PPUSH
15245: CALL 36681 0 2
15249: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
15250: LD_ADDR_VAR 0 8
15254: PUSH
15255: LD_EXP 51
15259: PUSH
15260: LD_EXP 50
15264: PUSH
15265: LD_VAR 0 6
15269: ARRAY
15270: MINUS
15271: ST_TO_ADDR
// if not minesFreeAmount then
15272: LD_VAR 0 8
15276: NOT
15277: IFFALSE 15281
// exit ;
15279: GO 15552
// tmp := [ ] ;
15281: LD_ADDR_VAR 0 7
15285: PUSH
15286: EMPTY
15287: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
15288: LD_ADDR_VAR 0 5
15292: PUSH
15293: DOUBLE
15294: LD_INT 1
15296: DEC
15297: ST_TO_ADDR
15298: LD_VAR 0 8
15302: PUSH
15303: FOR_TO
15304: IFFALSE 15499
// begin _d := rand ( 0 , 5 ) ;
15306: LD_ADDR_VAR 0 11
15310: PUSH
15311: LD_INT 0
15313: PPUSH
15314: LD_INT 5
15316: PPUSH
15317: CALL_OW 12
15321: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
15322: LD_ADDR_VAR 0 12
15326: PUSH
15327: LD_INT 2
15329: PPUSH
15330: LD_INT 6
15332: PPUSH
15333: CALL_OW 12
15337: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
15338: LD_ADDR_VAR 0 9
15342: PUSH
15343: LD_VAR 0 2
15347: PPUSH
15348: LD_VAR 0 11
15352: PPUSH
15353: LD_VAR 0 12
15357: PPUSH
15358: CALL_OW 272
15362: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
15363: LD_ADDR_VAR 0 10
15367: PUSH
15368: LD_VAR 0 3
15372: PPUSH
15373: LD_VAR 0 11
15377: PPUSH
15378: LD_VAR 0 12
15382: PPUSH
15383: CALL_OW 273
15387: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
15388: LD_VAR 0 9
15392: PPUSH
15393: LD_VAR 0 10
15397: PPUSH
15398: CALL_OW 488
15402: PUSH
15403: LD_VAR 0 9
15407: PUSH
15408: LD_VAR 0 10
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: LD_VAR 0 7
15421: IN
15422: NOT
15423: AND
15424: PUSH
15425: LD_VAR 0 9
15429: PPUSH
15430: LD_VAR 0 10
15434: PPUSH
15435: CALL_OW 458
15439: NOT
15440: AND
15441: IFFALSE 15483
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
15443: LD_ADDR_VAR 0 7
15447: PUSH
15448: LD_VAR 0 7
15452: PPUSH
15453: LD_VAR 0 7
15457: PUSH
15458: LD_INT 1
15460: PLUS
15461: PPUSH
15462: LD_VAR 0 9
15466: PUSH
15467: LD_VAR 0 10
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PPUSH
15476: CALL_OW 1
15480: ST_TO_ADDR
15481: GO 15497
// i := i - 1 ;
15483: LD_ADDR_VAR 0 5
15487: PUSH
15488: LD_VAR 0 5
15492: PUSH
15493: LD_INT 1
15495: MINUS
15496: ST_TO_ADDR
// end ;
15497: GO 15303
15499: POP
15500: POP
// for i in tmp do
15501: LD_ADDR_VAR 0 5
15505: PUSH
15506: LD_VAR 0 7
15510: PUSH
15511: FOR_IN
15512: IFFALSE 15550
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
15514: LD_VAR 0 1
15518: PPUSH
15519: LD_VAR 0 5
15523: PUSH
15524: LD_INT 1
15526: ARRAY
15527: PPUSH
15528: LD_VAR 0 5
15532: PUSH
15533: LD_INT 2
15535: ARRAY
15536: PPUSH
15537: CALL 14496 0 3
15541: NOT
15542: IFFALSE 15548
// exit ;
15544: POP
15545: POP
15546: GO 15552
15548: GO 15511
15550: POP
15551: POP
// end ;
15552: LD_VAR 0 4
15556: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
15557: LD_INT 0
15559: PPUSH
15560: PPUSH
15561: PPUSH
15562: PPUSH
15563: PPUSH
15564: PPUSH
15565: PPUSH
15566: PPUSH
15567: PPUSH
// if GetClass ( unit ) <> class_sniper then
15568: LD_VAR 0 1
15572: PPUSH
15573: CALL_OW 257
15577: PUSH
15578: LD_INT 5
15580: NONEQUAL
15581: IFFALSE 15585
// exit ;
15583: GO 16051
// dist := 8 ;
15585: LD_ADDR_VAR 0 5
15589: PUSH
15590: LD_INT 8
15592: ST_TO_ADDR
// viewRange := 12 ;
15593: LD_ADDR_VAR 0 8
15597: PUSH
15598: LD_INT 12
15600: ST_TO_ADDR
// side := GetSide ( unit ) ;
15601: LD_ADDR_VAR 0 6
15605: PUSH
15606: LD_VAR 0 1
15610: PPUSH
15611: CALL_OW 255
15615: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
15616: LD_INT 61
15618: PPUSH
15619: LD_VAR 0 6
15623: PPUSH
15624: CALL_OW 321
15628: PUSH
15629: LD_INT 2
15631: EQUAL
15632: IFFALSE 15642
// viewRange := 16 ;
15634: LD_ADDR_VAR 0 8
15638: PUSH
15639: LD_INT 16
15641: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
15642: LD_VAR 0 1
15646: PPUSH
15647: LD_VAR 0 2
15651: PPUSH
15652: LD_VAR 0 3
15656: PPUSH
15657: CALL_OW 297
15661: PUSH
15662: LD_VAR 0 5
15666: GREATER
15667: IFFALSE 15746
// begin ComMoveXY ( unit , x , y ) ;
15669: LD_VAR 0 1
15673: PPUSH
15674: LD_VAR 0 2
15678: PPUSH
15679: LD_VAR 0 3
15683: PPUSH
15684: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15688: LD_INT 35
15690: PPUSH
15691: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
15695: LD_VAR 0 1
15699: PPUSH
15700: LD_VAR 0 2
15704: PPUSH
15705: LD_VAR 0 3
15709: PPUSH
15710: CALL 68422 0 3
15714: NOT
15715: IFFALSE 15719
// exit ;
15717: GO 16051
// until GetDistUnitXY ( unit , x , y ) < dist ;
15719: LD_VAR 0 1
15723: PPUSH
15724: LD_VAR 0 2
15728: PPUSH
15729: LD_VAR 0 3
15733: PPUSH
15734: CALL_OW 297
15738: PUSH
15739: LD_VAR 0 5
15743: LESS
15744: IFFALSE 15688
// end ; ComTurnXY ( unit , x , y ) ;
15746: LD_VAR 0 1
15750: PPUSH
15751: LD_VAR 0 2
15755: PPUSH
15756: LD_VAR 0 3
15760: PPUSH
15761: CALL_OW 118
// repeat if Multiplayer then
15765: LD_OWVAR 4
15769: IFFALSE 15780
// wait ( 35 ) else
15771: LD_INT 35
15773: PPUSH
15774: CALL_OW 67
15778: GO 15787
// wait ( 5 ) ;
15780: LD_INT 5
15782: PPUSH
15783: CALL_OW 67
// _d := GetDir ( unit ) ;
15787: LD_ADDR_VAR 0 11
15791: PUSH
15792: LD_VAR 0 1
15796: PPUSH
15797: CALL_OW 254
15801: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
15802: LD_ADDR_VAR 0 7
15806: PUSH
15807: LD_VAR 0 1
15811: PPUSH
15812: CALL_OW 250
15816: PPUSH
15817: LD_VAR 0 1
15821: PPUSH
15822: CALL_OW 251
15826: PPUSH
15827: LD_VAR 0 2
15831: PPUSH
15832: LD_VAR 0 3
15836: PPUSH
15837: CALL 71030 0 4
15841: ST_TO_ADDR
// until dir = _d ;
15842: LD_VAR 0 7
15846: PUSH
15847: LD_VAR 0 11
15851: EQUAL
15852: IFFALSE 15765
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
15854: LD_ADDR_VAR 0 9
15858: PUSH
15859: LD_VAR 0 1
15863: PPUSH
15864: CALL_OW 250
15868: PPUSH
15869: LD_VAR 0 7
15873: PPUSH
15874: LD_VAR 0 5
15878: PPUSH
15879: CALL_OW 272
15883: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
15884: LD_ADDR_VAR 0 10
15888: PUSH
15889: LD_VAR 0 1
15893: PPUSH
15894: CALL_OW 251
15898: PPUSH
15899: LD_VAR 0 7
15903: PPUSH
15904: LD_VAR 0 5
15908: PPUSH
15909: CALL_OW 273
15913: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15914: LD_VAR 0 9
15918: PPUSH
15919: LD_VAR 0 10
15923: PPUSH
15924: CALL_OW 488
15928: NOT
15929: IFFALSE 15933
// exit ;
15931: GO 16051
// ComAnimCustom ( unit , 1 ) ;
15933: LD_VAR 0 1
15937: PPUSH
15938: LD_INT 1
15940: PPUSH
15941: CALL_OW 592
// p := 0 ;
15945: LD_ADDR_VAR 0 12
15949: PUSH
15950: LD_INT 0
15952: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
15953: LD_VAR 0 9
15957: PPUSH
15958: LD_VAR 0 10
15962: PPUSH
15963: LD_VAR 0 6
15967: PPUSH
15968: LD_VAR 0 8
15972: PPUSH
15973: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
15977: LD_INT 35
15979: PPUSH
15980: CALL_OW 67
// p := Inc ( p ) ;
15984: LD_ADDR_VAR 0 12
15988: PUSH
15989: LD_VAR 0 12
15993: PPUSH
15994: CALL 70986 0 1
15998: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
15999: LD_VAR 0 12
16003: PUSH
16004: LD_INT 3
16006: EQUAL
16007: PUSH
16008: LD_VAR 0 1
16012: PPUSH
16013: CALL_OW 302
16017: NOT
16018: OR
16019: PUSH
16020: LD_VAR 0 1
16024: PPUSH
16025: CALL_OW 301
16029: OR
16030: IFFALSE 15977
// RemoveSeeing ( _x , _y , side ) ;
16032: LD_VAR 0 9
16036: PPUSH
16037: LD_VAR 0 10
16041: PPUSH
16042: LD_VAR 0 6
16046: PPUSH
16047: CALL_OW 331
// end ; end_of_file
16051: LD_VAR 0 4
16055: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
16056: LD_VAR 0 1
16060: PPUSH
16061: LD_VAR 0 2
16065: PPUSH
16066: LD_VAR 0 3
16070: PPUSH
16071: LD_VAR 0 4
16075: PPUSH
16076: LD_VAR 0 5
16080: PPUSH
16081: LD_VAR 0 6
16085: PPUSH
16086: CALL 16287 0 6
// end ;
16090: PPOPN 6
16092: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
16093: LD_INT 0
16095: PPUSH
// begin if not units then
16096: LD_VAR 0 1
16100: NOT
16101: IFFALSE 16105
// exit ;
16103: GO 16105
// end ;
16105: PPOPN 7
16107: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
16108: CALL 16174 0 0
// end ; end_of_file
16112: PPOPN 1
16114: END
// export globalGameSaveCounter ; every 0 0$1 do
16115: GO 16117
16117: DISABLE
// begin enable ;
16118: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16119: LD_STRING updateTimer(
16121: PUSH
16122: LD_OWVAR 1
16126: STR
16127: PUSH
16128: LD_STRING );
16130: STR
16131: PPUSH
16132: CALL_OW 559
// end ;
16136: END
// every 0 0$1 do
16137: GO 16139
16139: DISABLE
// begin globalGameSaveCounter := 0 ;
16140: LD_ADDR_EXP 52
16144: PUSH
16145: LD_INT 0
16147: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
16148: LD_STRING setGameSaveCounter(0)
16150: PPUSH
16151: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
16155: LD_STRING initStreamRollete();
16157: PPUSH
16158: CALL_OW 559
// InitStreamMode ;
16162: CALL 17505 0 0
// DefineStreamItems ( false ) ;
16166: LD_INT 0
16168: PPUSH
16169: CALL 17969 0 1
// end ;
16173: END
// export function SOS_MapStart ( ) ; begin
16174: LD_INT 0
16176: PPUSH
// if streamModeActive then
16177: LD_EXP 53
16181: IFFALSE 16190
// DefineStreamItems ( true ) ;
16183: LD_INT 1
16185: PPUSH
16186: CALL 17969 0 1
// UpdateLuaVariables ( ) ;
16190: CALL 16207 0 0
// UpdateFactoryWaypoints ( ) ;
16194: CALL 30838 0 0
// UpdateWarehouseGatheringPoints ( ) ;
16198: CALL 31095 0 0
// end ;
16202: LD_VAR 0 1
16206: RET
// function UpdateLuaVariables ( ) ; begin
16207: LD_INT 0
16209: PPUSH
// if globalGameSaveCounter then
16210: LD_EXP 52
16214: IFFALSE 16248
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
16216: LD_ADDR_EXP 52
16220: PUSH
16221: LD_EXP 52
16225: PPUSH
16226: CALL 70986 0 1
16230: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16231: LD_STRING setGameSaveCounter(
16233: PUSH
16234: LD_EXP 52
16238: STR
16239: PUSH
16240: LD_STRING )
16242: STR
16243: PPUSH
16244: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
16248: LD_STRING setGameDifficulty(
16250: PUSH
16251: LD_OWVAR 67
16255: STR
16256: PUSH
16257: LD_STRING )
16259: STR
16260: PPUSH
16261: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
16265: LD_STRING displayDifficulty(
16267: PUSH
16268: LD_OWVAR 67
16272: STR
16273: PUSH
16274: LD_STRING )
16276: STR
16277: PPUSH
16278: CALL_OW 559
// end ;
16282: LD_VAR 0 1
16286: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16287: LD_INT 0
16289: PPUSH
// if p2 = stream_mode then
16290: LD_VAR 0 2
16294: PUSH
16295: LD_INT 100
16297: EQUAL
16298: IFFALSE 17301
// begin if not StreamModeActive then
16300: LD_EXP 53
16304: NOT
16305: IFFALSE 16315
// StreamModeActive := true ;
16307: LD_ADDR_EXP 53
16311: PUSH
16312: LD_INT 1
16314: ST_TO_ADDR
// if p3 = 0 then
16315: LD_VAR 0 3
16319: PUSH
16320: LD_INT 0
16322: EQUAL
16323: IFFALSE 16329
// InitStreamMode ;
16325: CALL 17505 0 0
// if p3 = 1 then
16329: LD_VAR 0 3
16333: PUSH
16334: LD_INT 1
16336: EQUAL
16337: IFFALSE 16347
// sRocket := true ;
16339: LD_ADDR_EXP 58
16343: PUSH
16344: LD_INT 1
16346: ST_TO_ADDR
// if p3 = 2 then
16347: LD_VAR 0 3
16351: PUSH
16352: LD_INT 2
16354: EQUAL
16355: IFFALSE 16365
// sSpeed := true ;
16357: LD_ADDR_EXP 57
16361: PUSH
16362: LD_INT 1
16364: ST_TO_ADDR
// if p3 = 3 then
16365: LD_VAR 0 3
16369: PUSH
16370: LD_INT 3
16372: EQUAL
16373: IFFALSE 16383
// sEngine := true ;
16375: LD_ADDR_EXP 59
16379: PUSH
16380: LD_INT 1
16382: ST_TO_ADDR
// if p3 = 4 then
16383: LD_VAR 0 3
16387: PUSH
16388: LD_INT 4
16390: EQUAL
16391: IFFALSE 16401
// sSpec := true ;
16393: LD_ADDR_EXP 56
16397: PUSH
16398: LD_INT 1
16400: ST_TO_ADDR
// if p3 = 5 then
16401: LD_VAR 0 3
16405: PUSH
16406: LD_INT 5
16408: EQUAL
16409: IFFALSE 16419
// sLevel := true ;
16411: LD_ADDR_EXP 60
16415: PUSH
16416: LD_INT 1
16418: ST_TO_ADDR
// if p3 = 6 then
16419: LD_VAR 0 3
16423: PUSH
16424: LD_INT 6
16426: EQUAL
16427: IFFALSE 16437
// sArmoury := true ;
16429: LD_ADDR_EXP 61
16433: PUSH
16434: LD_INT 1
16436: ST_TO_ADDR
// if p3 = 7 then
16437: LD_VAR 0 3
16441: PUSH
16442: LD_INT 7
16444: EQUAL
16445: IFFALSE 16455
// sRadar := true ;
16447: LD_ADDR_EXP 62
16451: PUSH
16452: LD_INT 1
16454: ST_TO_ADDR
// if p3 = 8 then
16455: LD_VAR 0 3
16459: PUSH
16460: LD_INT 8
16462: EQUAL
16463: IFFALSE 16473
// sBunker := true ;
16465: LD_ADDR_EXP 63
16469: PUSH
16470: LD_INT 1
16472: ST_TO_ADDR
// if p3 = 9 then
16473: LD_VAR 0 3
16477: PUSH
16478: LD_INT 9
16480: EQUAL
16481: IFFALSE 16491
// sHack := true ;
16483: LD_ADDR_EXP 64
16487: PUSH
16488: LD_INT 1
16490: ST_TO_ADDR
// if p3 = 10 then
16491: LD_VAR 0 3
16495: PUSH
16496: LD_INT 10
16498: EQUAL
16499: IFFALSE 16509
// sFire := true ;
16501: LD_ADDR_EXP 65
16505: PUSH
16506: LD_INT 1
16508: ST_TO_ADDR
// if p3 = 11 then
16509: LD_VAR 0 3
16513: PUSH
16514: LD_INT 11
16516: EQUAL
16517: IFFALSE 16527
// sRefresh := true ;
16519: LD_ADDR_EXP 66
16523: PUSH
16524: LD_INT 1
16526: ST_TO_ADDR
// if p3 = 12 then
16527: LD_VAR 0 3
16531: PUSH
16532: LD_INT 12
16534: EQUAL
16535: IFFALSE 16545
// sExp := true ;
16537: LD_ADDR_EXP 67
16541: PUSH
16542: LD_INT 1
16544: ST_TO_ADDR
// if p3 = 13 then
16545: LD_VAR 0 3
16549: PUSH
16550: LD_INT 13
16552: EQUAL
16553: IFFALSE 16563
// sDepot := true ;
16555: LD_ADDR_EXP 68
16559: PUSH
16560: LD_INT 1
16562: ST_TO_ADDR
// if p3 = 14 then
16563: LD_VAR 0 3
16567: PUSH
16568: LD_INT 14
16570: EQUAL
16571: IFFALSE 16581
// sFlag := true ;
16573: LD_ADDR_EXP 69
16577: PUSH
16578: LD_INT 1
16580: ST_TO_ADDR
// if p3 = 15 then
16581: LD_VAR 0 3
16585: PUSH
16586: LD_INT 15
16588: EQUAL
16589: IFFALSE 16599
// sKamikadze := true ;
16591: LD_ADDR_EXP 77
16595: PUSH
16596: LD_INT 1
16598: ST_TO_ADDR
// if p3 = 16 then
16599: LD_VAR 0 3
16603: PUSH
16604: LD_INT 16
16606: EQUAL
16607: IFFALSE 16617
// sTroll := true ;
16609: LD_ADDR_EXP 78
16613: PUSH
16614: LD_INT 1
16616: ST_TO_ADDR
// if p3 = 17 then
16617: LD_VAR 0 3
16621: PUSH
16622: LD_INT 17
16624: EQUAL
16625: IFFALSE 16635
// sSlow := true ;
16627: LD_ADDR_EXP 79
16631: PUSH
16632: LD_INT 1
16634: ST_TO_ADDR
// if p3 = 18 then
16635: LD_VAR 0 3
16639: PUSH
16640: LD_INT 18
16642: EQUAL
16643: IFFALSE 16653
// sLack := true ;
16645: LD_ADDR_EXP 80
16649: PUSH
16650: LD_INT 1
16652: ST_TO_ADDR
// if p3 = 19 then
16653: LD_VAR 0 3
16657: PUSH
16658: LD_INT 19
16660: EQUAL
16661: IFFALSE 16671
// sTank := true ;
16663: LD_ADDR_EXP 82
16667: PUSH
16668: LD_INT 1
16670: ST_TO_ADDR
// if p3 = 20 then
16671: LD_VAR 0 3
16675: PUSH
16676: LD_INT 20
16678: EQUAL
16679: IFFALSE 16689
// sRemote := true ;
16681: LD_ADDR_EXP 83
16685: PUSH
16686: LD_INT 1
16688: ST_TO_ADDR
// if p3 = 21 then
16689: LD_VAR 0 3
16693: PUSH
16694: LD_INT 21
16696: EQUAL
16697: IFFALSE 16707
// sPowell := true ;
16699: LD_ADDR_EXP 84
16703: PUSH
16704: LD_INT 1
16706: ST_TO_ADDR
// if p3 = 22 then
16707: LD_VAR 0 3
16711: PUSH
16712: LD_INT 22
16714: EQUAL
16715: IFFALSE 16725
// sTeleport := true ;
16717: LD_ADDR_EXP 87
16721: PUSH
16722: LD_INT 1
16724: ST_TO_ADDR
// if p3 = 23 then
16725: LD_VAR 0 3
16729: PUSH
16730: LD_INT 23
16732: EQUAL
16733: IFFALSE 16743
// sOilTower := true ;
16735: LD_ADDR_EXP 89
16739: PUSH
16740: LD_INT 1
16742: ST_TO_ADDR
// if p3 = 24 then
16743: LD_VAR 0 3
16747: PUSH
16748: LD_INT 24
16750: EQUAL
16751: IFFALSE 16761
// sShovel := true ;
16753: LD_ADDR_EXP 90
16757: PUSH
16758: LD_INT 1
16760: ST_TO_ADDR
// if p3 = 25 then
16761: LD_VAR 0 3
16765: PUSH
16766: LD_INT 25
16768: EQUAL
16769: IFFALSE 16779
// sSheik := true ;
16771: LD_ADDR_EXP 91
16775: PUSH
16776: LD_INT 1
16778: ST_TO_ADDR
// if p3 = 26 then
16779: LD_VAR 0 3
16783: PUSH
16784: LD_INT 26
16786: EQUAL
16787: IFFALSE 16797
// sEarthquake := true ;
16789: LD_ADDR_EXP 93
16793: PUSH
16794: LD_INT 1
16796: ST_TO_ADDR
// if p3 = 27 then
16797: LD_VAR 0 3
16801: PUSH
16802: LD_INT 27
16804: EQUAL
16805: IFFALSE 16815
// sAI := true ;
16807: LD_ADDR_EXP 94
16811: PUSH
16812: LD_INT 1
16814: ST_TO_ADDR
// if p3 = 28 then
16815: LD_VAR 0 3
16819: PUSH
16820: LD_INT 28
16822: EQUAL
16823: IFFALSE 16833
// sCargo := true ;
16825: LD_ADDR_EXP 97
16829: PUSH
16830: LD_INT 1
16832: ST_TO_ADDR
// if p3 = 29 then
16833: LD_VAR 0 3
16837: PUSH
16838: LD_INT 29
16840: EQUAL
16841: IFFALSE 16851
// sDLaser := true ;
16843: LD_ADDR_EXP 98
16847: PUSH
16848: LD_INT 1
16850: ST_TO_ADDR
// if p3 = 30 then
16851: LD_VAR 0 3
16855: PUSH
16856: LD_INT 30
16858: EQUAL
16859: IFFALSE 16869
// sExchange := true ;
16861: LD_ADDR_EXP 99
16865: PUSH
16866: LD_INT 1
16868: ST_TO_ADDR
// if p3 = 31 then
16869: LD_VAR 0 3
16873: PUSH
16874: LD_INT 31
16876: EQUAL
16877: IFFALSE 16887
// sFac := true ;
16879: LD_ADDR_EXP 100
16883: PUSH
16884: LD_INT 1
16886: ST_TO_ADDR
// if p3 = 32 then
16887: LD_VAR 0 3
16891: PUSH
16892: LD_INT 32
16894: EQUAL
16895: IFFALSE 16905
// sPower := true ;
16897: LD_ADDR_EXP 101
16901: PUSH
16902: LD_INT 1
16904: ST_TO_ADDR
// if p3 = 33 then
16905: LD_VAR 0 3
16909: PUSH
16910: LD_INT 33
16912: EQUAL
16913: IFFALSE 16923
// sRandom := true ;
16915: LD_ADDR_EXP 102
16919: PUSH
16920: LD_INT 1
16922: ST_TO_ADDR
// if p3 = 34 then
16923: LD_VAR 0 3
16927: PUSH
16928: LD_INT 34
16930: EQUAL
16931: IFFALSE 16941
// sShield := true ;
16933: LD_ADDR_EXP 103
16937: PUSH
16938: LD_INT 1
16940: ST_TO_ADDR
// if p3 = 35 then
16941: LD_VAR 0 3
16945: PUSH
16946: LD_INT 35
16948: EQUAL
16949: IFFALSE 16959
// sTime := true ;
16951: LD_ADDR_EXP 104
16955: PUSH
16956: LD_INT 1
16958: ST_TO_ADDR
// if p3 = 36 then
16959: LD_VAR 0 3
16963: PUSH
16964: LD_INT 36
16966: EQUAL
16967: IFFALSE 16977
// sTools := true ;
16969: LD_ADDR_EXP 105
16973: PUSH
16974: LD_INT 1
16976: ST_TO_ADDR
// if p3 = 101 then
16977: LD_VAR 0 3
16981: PUSH
16982: LD_INT 101
16984: EQUAL
16985: IFFALSE 16995
// sSold := true ;
16987: LD_ADDR_EXP 70
16991: PUSH
16992: LD_INT 1
16994: ST_TO_ADDR
// if p3 = 102 then
16995: LD_VAR 0 3
16999: PUSH
17000: LD_INT 102
17002: EQUAL
17003: IFFALSE 17013
// sDiff := true ;
17005: LD_ADDR_EXP 71
17009: PUSH
17010: LD_INT 1
17012: ST_TO_ADDR
// if p3 = 103 then
17013: LD_VAR 0 3
17017: PUSH
17018: LD_INT 103
17020: EQUAL
17021: IFFALSE 17031
// sFog := true ;
17023: LD_ADDR_EXP 74
17027: PUSH
17028: LD_INT 1
17030: ST_TO_ADDR
// if p3 = 104 then
17031: LD_VAR 0 3
17035: PUSH
17036: LD_INT 104
17038: EQUAL
17039: IFFALSE 17049
// sReset := true ;
17041: LD_ADDR_EXP 75
17045: PUSH
17046: LD_INT 1
17048: ST_TO_ADDR
// if p3 = 105 then
17049: LD_VAR 0 3
17053: PUSH
17054: LD_INT 105
17056: EQUAL
17057: IFFALSE 17067
// sSun := true ;
17059: LD_ADDR_EXP 76
17063: PUSH
17064: LD_INT 1
17066: ST_TO_ADDR
// if p3 = 106 then
17067: LD_VAR 0 3
17071: PUSH
17072: LD_INT 106
17074: EQUAL
17075: IFFALSE 17085
// sTiger := true ;
17077: LD_ADDR_EXP 72
17081: PUSH
17082: LD_INT 1
17084: ST_TO_ADDR
// if p3 = 107 then
17085: LD_VAR 0 3
17089: PUSH
17090: LD_INT 107
17092: EQUAL
17093: IFFALSE 17103
// sBomb := true ;
17095: LD_ADDR_EXP 73
17099: PUSH
17100: LD_INT 1
17102: ST_TO_ADDR
// if p3 = 108 then
17103: LD_VAR 0 3
17107: PUSH
17108: LD_INT 108
17110: EQUAL
17111: IFFALSE 17121
// sWound := true ;
17113: LD_ADDR_EXP 81
17117: PUSH
17118: LD_INT 1
17120: ST_TO_ADDR
// if p3 = 109 then
17121: LD_VAR 0 3
17125: PUSH
17126: LD_INT 109
17128: EQUAL
17129: IFFALSE 17139
// sBetray := true ;
17131: LD_ADDR_EXP 85
17135: PUSH
17136: LD_INT 1
17138: ST_TO_ADDR
// if p3 = 110 then
17139: LD_VAR 0 3
17143: PUSH
17144: LD_INT 110
17146: EQUAL
17147: IFFALSE 17157
// sContamin := true ;
17149: LD_ADDR_EXP 86
17153: PUSH
17154: LD_INT 1
17156: ST_TO_ADDR
// if p3 = 111 then
17157: LD_VAR 0 3
17161: PUSH
17162: LD_INT 111
17164: EQUAL
17165: IFFALSE 17175
// sOil := true ;
17167: LD_ADDR_EXP 88
17171: PUSH
17172: LD_INT 1
17174: ST_TO_ADDR
// if p3 = 112 then
17175: LD_VAR 0 3
17179: PUSH
17180: LD_INT 112
17182: EQUAL
17183: IFFALSE 17193
// sStu := true ;
17185: LD_ADDR_EXP 92
17189: PUSH
17190: LD_INT 1
17192: ST_TO_ADDR
// if p3 = 113 then
17193: LD_VAR 0 3
17197: PUSH
17198: LD_INT 113
17200: EQUAL
17201: IFFALSE 17211
// sBazooka := true ;
17203: LD_ADDR_EXP 95
17207: PUSH
17208: LD_INT 1
17210: ST_TO_ADDR
// if p3 = 114 then
17211: LD_VAR 0 3
17215: PUSH
17216: LD_INT 114
17218: EQUAL
17219: IFFALSE 17229
// sMortar := true ;
17221: LD_ADDR_EXP 96
17225: PUSH
17226: LD_INT 1
17228: ST_TO_ADDR
// if p3 = 115 then
17229: LD_VAR 0 3
17233: PUSH
17234: LD_INT 115
17236: EQUAL
17237: IFFALSE 17247
// sRanger := true ;
17239: LD_ADDR_EXP 106
17243: PUSH
17244: LD_INT 1
17246: ST_TO_ADDR
// if p3 = 116 then
17247: LD_VAR 0 3
17251: PUSH
17252: LD_INT 116
17254: EQUAL
17255: IFFALSE 17265
// sComputer := true ;
17257: LD_ADDR_EXP 107
17261: PUSH
17262: LD_INT 1
17264: ST_TO_ADDR
// if p3 = 117 then
17265: LD_VAR 0 3
17269: PUSH
17270: LD_INT 117
17272: EQUAL
17273: IFFALSE 17283
// s30 := true ;
17275: LD_ADDR_EXP 108
17279: PUSH
17280: LD_INT 1
17282: ST_TO_ADDR
// if p3 = 118 then
17283: LD_VAR 0 3
17287: PUSH
17288: LD_INT 118
17290: EQUAL
17291: IFFALSE 17301
// s60 := true ;
17293: LD_ADDR_EXP 109
17297: PUSH
17298: LD_INT 1
17300: ST_TO_ADDR
// end ; if p2 = hack_mode then
17301: LD_VAR 0 2
17305: PUSH
17306: LD_INT 101
17308: EQUAL
17309: IFFALSE 17437
// begin case p3 of 1 :
17311: LD_VAR 0 3
17315: PUSH
17316: LD_INT 1
17318: DOUBLE
17319: EQUAL
17320: IFTRUE 17324
17322: GO 17331
17324: POP
// hHackUnlimitedResources ; 2 :
17325: CALL 29584 0 0
17329: GO 17437
17331: LD_INT 2
17333: DOUBLE
17334: EQUAL
17335: IFTRUE 17339
17337: GO 17346
17339: POP
// hHackSetLevel10 ; 3 :
17340: CALL 29717 0 0
17344: GO 17437
17346: LD_INT 3
17348: DOUBLE
17349: EQUAL
17350: IFTRUE 17354
17352: GO 17361
17354: POP
// hHackSetLevel10YourUnits ; 4 :
17355: CALL 29802 0 0
17359: GO 17437
17361: LD_INT 4
17363: DOUBLE
17364: EQUAL
17365: IFTRUE 17369
17367: GO 17376
17369: POP
// hHackInvincible ; 5 :
17370: CALL 30250 0 0
17374: GO 17437
17376: LD_INT 5
17378: DOUBLE
17379: EQUAL
17380: IFTRUE 17384
17382: GO 17391
17384: POP
// hHackInvisible ; 6 :
17385: CALL 30361 0 0
17389: GO 17437
17391: LD_INT 6
17393: DOUBLE
17394: EQUAL
17395: IFTRUE 17399
17397: GO 17406
17399: POP
// hHackChangeYourSide ; 7 :
17400: CALL 30418 0 0
17404: GO 17437
17406: LD_INT 7
17408: DOUBLE
17409: EQUAL
17410: IFTRUE 17414
17412: GO 17421
17414: POP
// hHackChangeUnitSide ; 8 :
17415: CALL 30460 0 0
17419: GO 17437
17421: LD_INT 8
17423: DOUBLE
17424: EQUAL
17425: IFTRUE 17429
17427: GO 17436
17429: POP
// hHackFog ; end ;
17430: CALL 30561 0 0
17434: GO 17437
17436: POP
// end ; if p2 = game_save_mode then
17437: LD_VAR 0 2
17441: PUSH
17442: LD_INT 102
17444: EQUAL
17445: IFFALSE 17500
// begin if p3 = 1 then
17447: LD_VAR 0 3
17451: PUSH
17452: LD_INT 1
17454: EQUAL
17455: IFFALSE 17467
// globalGameSaveCounter := p4 ;
17457: LD_ADDR_EXP 52
17461: PUSH
17462: LD_VAR 0 4
17466: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
17467: LD_VAR 0 3
17471: PUSH
17472: LD_INT 2
17474: EQUAL
17475: PUSH
17476: LD_EXP 52
17480: AND
17481: IFFALSE 17500
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17483: LD_STRING setGameSaveCounter(
17485: PUSH
17486: LD_EXP 52
17490: STR
17491: PUSH
17492: LD_STRING )
17494: STR
17495: PPUSH
17496: CALL_OW 559
// end ; end ;
17500: LD_VAR 0 7
17504: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
17505: LD_INT 0
17507: PPUSH
// streamModeActive := false ;
17508: LD_ADDR_EXP 53
17512: PUSH
17513: LD_INT 0
17515: ST_TO_ADDR
// normalCounter := 36 ;
17516: LD_ADDR_EXP 54
17520: PUSH
17521: LD_INT 36
17523: ST_TO_ADDR
// hardcoreCounter := 18 ;
17524: LD_ADDR_EXP 55
17528: PUSH
17529: LD_INT 18
17531: ST_TO_ADDR
// sRocket := false ;
17532: LD_ADDR_EXP 58
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// sSpeed := false ;
17540: LD_ADDR_EXP 57
17544: PUSH
17545: LD_INT 0
17547: ST_TO_ADDR
// sEngine := false ;
17548: LD_ADDR_EXP 59
17552: PUSH
17553: LD_INT 0
17555: ST_TO_ADDR
// sSpec := false ;
17556: LD_ADDR_EXP 56
17560: PUSH
17561: LD_INT 0
17563: ST_TO_ADDR
// sLevel := false ;
17564: LD_ADDR_EXP 60
17568: PUSH
17569: LD_INT 0
17571: ST_TO_ADDR
// sArmoury := false ;
17572: LD_ADDR_EXP 61
17576: PUSH
17577: LD_INT 0
17579: ST_TO_ADDR
// sRadar := false ;
17580: LD_ADDR_EXP 62
17584: PUSH
17585: LD_INT 0
17587: ST_TO_ADDR
// sBunker := false ;
17588: LD_ADDR_EXP 63
17592: PUSH
17593: LD_INT 0
17595: ST_TO_ADDR
// sHack := false ;
17596: LD_ADDR_EXP 64
17600: PUSH
17601: LD_INT 0
17603: ST_TO_ADDR
// sFire := false ;
17604: LD_ADDR_EXP 65
17608: PUSH
17609: LD_INT 0
17611: ST_TO_ADDR
// sRefresh := false ;
17612: LD_ADDR_EXP 66
17616: PUSH
17617: LD_INT 0
17619: ST_TO_ADDR
// sExp := false ;
17620: LD_ADDR_EXP 67
17624: PUSH
17625: LD_INT 0
17627: ST_TO_ADDR
// sDepot := false ;
17628: LD_ADDR_EXP 68
17632: PUSH
17633: LD_INT 0
17635: ST_TO_ADDR
// sFlag := false ;
17636: LD_ADDR_EXP 69
17640: PUSH
17641: LD_INT 0
17643: ST_TO_ADDR
// sKamikadze := false ;
17644: LD_ADDR_EXP 77
17648: PUSH
17649: LD_INT 0
17651: ST_TO_ADDR
// sTroll := false ;
17652: LD_ADDR_EXP 78
17656: PUSH
17657: LD_INT 0
17659: ST_TO_ADDR
// sSlow := false ;
17660: LD_ADDR_EXP 79
17664: PUSH
17665: LD_INT 0
17667: ST_TO_ADDR
// sLack := false ;
17668: LD_ADDR_EXP 80
17672: PUSH
17673: LD_INT 0
17675: ST_TO_ADDR
// sTank := false ;
17676: LD_ADDR_EXP 82
17680: PUSH
17681: LD_INT 0
17683: ST_TO_ADDR
// sRemote := false ;
17684: LD_ADDR_EXP 83
17688: PUSH
17689: LD_INT 0
17691: ST_TO_ADDR
// sPowell := false ;
17692: LD_ADDR_EXP 84
17696: PUSH
17697: LD_INT 0
17699: ST_TO_ADDR
// sTeleport := false ;
17700: LD_ADDR_EXP 87
17704: PUSH
17705: LD_INT 0
17707: ST_TO_ADDR
// sOilTower := false ;
17708: LD_ADDR_EXP 89
17712: PUSH
17713: LD_INT 0
17715: ST_TO_ADDR
// sShovel := false ;
17716: LD_ADDR_EXP 90
17720: PUSH
17721: LD_INT 0
17723: ST_TO_ADDR
// sSheik := false ;
17724: LD_ADDR_EXP 91
17728: PUSH
17729: LD_INT 0
17731: ST_TO_ADDR
// sEarthquake := false ;
17732: LD_ADDR_EXP 93
17736: PUSH
17737: LD_INT 0
17739: ST_TO_ADDR
// sAI := false ;
17740: LD_ADDR_EXP 94
17744: PUSH
17745: LD_INT 0
17747: ST_TO_ADDR
// sCargo := false ;
17748: LD_ADDR_EXP 97
17752: PUSH
17753: LD_INT 0
17755: ST_TO_ADDR
// sDLaser := false ;
17756: LD_ADDR_EXP 98
17760: PUSH
17761: LD_INT 0
17763: ST_TO_ADDR
// sExchange := false ;
17764: LD_ADDR_EXP 99
17768: PUSH
17769: LD_INT 0
17771: ST_TO_ADDR
// sFac := false ;
17772: LD_ADDR_EXP 100
17776: PUSH
17777: LD_INT 0
17779: ST_TO_ADDR
// sPower := false ;
17780: LD_ADDR_EXP 101
17784: PUSH
17785: LD_INT 0
17787: ST_TO_ADDR
// sRandom := false ;
17788: LD_ADDR_EXP 102
17792: PUSH
17793: LD_INT 0
17795: ST_TO_ADDR
// sShield := false ;
17796: LD_ADDR_EXP 103
17800: PUSH
17801: LD_INT 0
17803: ST_TO_ADDR
// sTime := false ;
17804: LD_ADDR_EXP 104
17808: PUSH
17809: LD_INT 0
17811: ST_TO_ADDR
// sTools := false ;
17812: LD_ADDR_EXP 105
17816: PUSH
17817: LD_INT 0
17819: ST_TO_ADDR
// sSold := false ;
17820: LD_ADDR_EXP 70
17824: PUSH
17825: LD_INT 0
17827: ST_TO_ADDR
// sDiff := false ;
17828: LD_ADDR_EXP 71
17832: PUSH
17833: LD_INT 0
17835: ST_TO_ADDR
// sFog := false ;
17836: LD_ADDR_EXP 74
17840: PUSH
17841: LD_INT 0
17843: ST_TO_ADDR
// sReset := false ;
17844: LD_ADDR_EXP 75
17848: PUSH
17849: LD_INT 0
17851: ST_TO_ADDR
// sSun := false ;
17852: LD_ADDR_EXP 76
17856: PUSH
17857: LD_INT 0
17859: ST_TO_ADDR
// sTiger := false ;
17860: LD_ADDR_EXP 72
17864: PUSH
17865: LD_INT 0
17867: ST_TO_ADDR
// sBomb := false ;
17868: LD_ADDR_EXP 73
17872: PUSH
17873: LD_INT 0
17875: ST_TO_ADDR
// sWound := false ;
17876: LD_ADDR_EXP 81
17880: PUSH
17881: LD_INT 0
17883: ST_TO_ADDR
// sBetray := false ;
17884: LD_ADDR_EXP 85
17888: PUSH
17889: LD_INT 0
17891: ST_TO_ADDR
// sContamin := false ;
17892: LD_ADDR_EXP 86
17896: PUSH
17897: LD_INT 0
17899: ST_TO_ADDR
// sOil := false ;
17900: LD_ADDR_EXP 88
17904: PUSH
17905: LD_INT 0
17907: ST_TO_ADDR
// sStu := false ;
17908: LD_ADDR_EXP 92
17912: PUSH
17913: LD_INT 0
17915: ST_TO_ADDR
// sBazooka := false ;
17916: LD_ADDR_EXP 95
17920: PUSH
17921: LD_INT 0
17923: ST_TO_ADDR
// sMortar := false ;
17924: LD_ADDR_EXP 96
17928: PUSH
17929: LD_INT 0
17931: ST_TO_ADDR
// sRanger := false ;
17932: LD_ADDR_EXP 106
17936: PUSH
17937: LD_INT 0
17939: ST_TO_ADDR
// sComputer := false ;
17940: LD_ADDR_EXP 107
17944: PUSH
17945: LD_INT 0
17947: ST_TO_ADDR
// s30 := false ;
17948: LD_ADDR_EXP 108
17952: PUSH
17953: LD_INT 0
17955: ST_TO_ADDR
// s60 := false ;
17956: LD_ADDR_EXP 109
17960: PUSH
17961: LD_INT 0
17963: ST_TO_ADDR
// end ;
17964: LD_VAR 0 1
17968: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17969: LD_INT 0
17971: PPUSH
17972: PPUSH
17973: PPUSH
17974: PPUSH
17975: PPUSH
17976: PPUSH
17977: PPUSH
// result := [ ] ;
17978: LD_ADDR_VAR 0 2
17982: PUSH
17983: EMPTY
17984: ST_TO_ADDR
// if campaign_id = 1 then
17985: LD_OWVAR 69
17989: PUSH
17990: LD_INT 1
17992: EQUAL
17993: IFFALSE 21159
// begin case mission_number of 1 :
17995: LD_OWVAR 70
17999: PUSH
18000: LD_INT 1
18002: DOUBLE
18003: EQUAL
18004: IFTRUE 18008
18006: GO 18084
18008: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18009: LD_ADDR_VAR 0 2
18013: PUSH
18014: LD_INT 2
18016: PUSH
18017: LD_INT 4
18019: PUSH
18020: LD_INT 11
18022: PUSH
18023: LD_INT 12
18025: PUSH
18026: LD_INT 15
18028: PUSH
18029: LD_INT 16
18031: PUSH
18032: LD_INT 22
18034: PUSH
18035: LD_INT 23
18037: PUSH
18038: LD_INT 26
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 101
18054: PUSH
18055: LD_INT 102
18057: PUSH
18058: LD_INT 106
18060: PUSH
18061: LD_INT 116
18063: PUSH
18064: LD_INT 117
18066: PUSH
18067: LD_INT 118
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: ST_TO_ADDR
18082: GO 21157
18084: LD_INT 2
18086: DOUBLE
18087: EQUAL
18088: IFTRUE 18092
18090: GO 18176
18092: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18093: LD_ADDR_VAR 0 2
18097: PUSH
18098: LD_INT 2
18100: PUSH
18101: LD_INT 4
18103: PUSH
18104: LD_INT 11
18106: PUSH
18107: LD_INT 12
18109: PUSH
18110: LD_INT 15
18112: PUSH
18113: LD_INT 16
18115: PUSH
18116: LD_INT 22
18118: PUSH
18119: LD_INT 23
18121: PUSH
18122: LD_INT 26
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 101
18138: PUSH
18139: LD_INT 102
18141: PUSH
18142: LD_INT 105
18144: PUSH
18145: LD_INT 106
18147: PUSH
18148: LD_INT 108
18150: PUSH
18151: LD_INT 116
18153: PUSH
18154: LD_INT 117
18156: PUSH
18157: LD_INT 118
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: ST_TO_ADDR
18174: GO 21157
18176: LD_INT 3
18178: DOUBLE
18179: EQUAL
18180: IFTRUE 18184
18182: GO 18272
18184: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18185: LD_ADDR_VAR 0 2
18189: PUSH
18190: LD_INT 2
18192: PUSH
18193: LD_INT 4
18195: PUSH
18196: LD_INT 5
18198: PUSH
18199: LD_INT 11
18201: PUSH
18202: LD_INT 12
18204: PUSH
18205: LD_INT 15
18207: PUSH
18208: LD_INT 16
18210: PUSH
18211: LD_INT 22
18213: PUSH
18214: LD_INT 26
18216: PUSH
18217: LD_INT 36
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 101
18234: PUSH
18235: LD_INT 102
18237: PUSH
18238: LD_INT 105
18240: PUSH
18241: LD_INT 106
18243: PUSH
18244: LD_INT 108
18246: PUSH
18247: LD_INT 116
18249: PUSH
18250: LD_INT 117
18252: PUSH
18253: LD_INT 118
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: ST_TO_ADDR
18270: GO 21157
18272: LD_INT 4
18274: DOUBLE
18275: EQUAL
18276: IFTRUE 18280
18278: GO 18376
18280: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18281: LD_ADDR_VAR 0 2
18285: PUSH
18286: LD_INT 2
18288: PUSH
18289: LD_INT 4
18291: PUSH
18292: LD_INT 5
18294: PUSH
18295: LD_INT 8
18297: PUSH
18298: LD_INT 11
18300: PUSH
18301: LD_INT 12
18303: PUSH
18304: LD_INT 15
18306: PUSH
18307: LD_INT 16
18309: PUSH
18310: LD_INT 22
18312: PUSH
18313: LD_INT 23
18315: PUSH
18316: LD_INT 26
18318: PUSH
18319: LD_INT 36
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 101
18338: PUSH
18339: LD_INT 102
18341: PUSH
18342: LD_INT 105
18344: PUSH
18345: LD_INT 106
18347: PUSH
18348: LD_INT 108
18350: PUSH
18351: LD_INT 116
18353: PUSH
18354: LD_INT 117
18356: PUSH
18357: LD_INT 118
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: ST_TO_ADDR
18374: GO 21157
18376: LD_INT 5
18378: DOUBLE
18379: EQUAL
18380: IFTRUE 18384
18382: GO 18496
18384: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18385: LD_ADDR_VAR 0 2
18389: PUSH
18390: LD_INT 2
18392: PUSH
18393: LD_INT 4
18395: PUSH
18396: LD_INT 5
18398: PUSH
18399: LD_INT 6
18401: PUSH
18402: LD_INT 8
18404: PUSH
18405: LD_INT 11
18407: PUSH
18408: LD_INT 12
18410: PUSH
18411: LD_INT 15
18413: PUSH
18414: LD_INT 16
18416: PUSH
18417: LD_INT 22
18419: PUSH
18420: LD_INT 23
18422: PUSH
18423: LD_INT 25
18425: PUSH
18426: LD_INT 26
18428: PUSH
18429: LD_INT 36
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 101
18450: PUSH
18451: LD_INT 102
18453: PUSH
18454: LD_INT 105
18456: PUSH
18457: LD_INT 106
18459: PUSH
18460: LD_INT 108
18462: PUSH
18463: LD_INT 109
18465: PUSH
18466: LD_INT 112
18468: PUSH
18469: LD_INT 116
18471: PUSH
18472: LD_INT 117
18474: PUSH
18475: LD_INT 118
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: ST_TO_ADDR
18494: GO 21157
18496: LD_INT 6
18498: DOUBLE
18499: EQUAL
18500: IFTRUE 18504
18502: GO 18636
18504: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18505: LD_ADDR_VAR 0 2
18509: PUSH
18510: LD_INT 2
18512: PUSH
18513: LD_INT 4
18515: PUSH
18516: LD_INT 5
18518: PUSH
18519: LD_INT 6
18521: PUSH
18522: LD_INT 8
18524: PUSH
18525: LD_INT 11
18527: PUSH
18528: LD_INT 12
18530: PUSH
18531: LD_INT 15
18533: PUSH
18534: LD_INT 16
18536: PUSH
18537: LD_INT 20
18539: PUSH
18540: LD_INT 21
18542: PUSH
18543: LD_INT 22
18545: PUSH
18546: LD_INT 23
18548: PUSH
18549: LD_INT 25
18551: PUSH
18552: LD_INT 26
18554: PUSH
18555: LD_INT 30
18557: PUSH
18558: LD_INT 31
18560: PUSH
18561: LD_INT 32
18563: PUSH
18564: LD_INT 36
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 101
18590: PUSH
18591: LD_INT 102
18593: PUSH
18594: LD_INT 105
18596: PUSH
18597: LD_INT 106
18599: PUSH
18600: LD_INT 108
18602: PUSH
18603: LD_INT 109
18605: PUSH
18606: LD_INT 112
18608: PUSH
18609: LD_INT 116
18611: PUSH
18612: LD_INT 117
18614: PUSH
18615: LD_INT 118
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: ST_TO_ADDR
18634: GO 21157
18636: LD_INT 7
18638: DOUBLE
18639: EQUAL
18640: IFTRUE 18644
18642: GO 18756
18644: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18645: LD_ADDR_VAR 0 2
18649: PUSH
18650: LD_INT 2
18652: PUSH
18653: LD_INT 4
18655: PUSH
18656: LD_INT 5
18658: PUSH
18659: LD_INT 7
18661: PUSH
18662: LD_INT 11
18664: PUSH
18665: LD_INT 12
18667: PUSH
18668: LD_INT 15
18670: PUSH
18671: LD_INT 16
18673: PUSH
18674: LD_INT 20
18676: PUSH
18677: LD_INT 21
18679: PUSH
18680: LD_INT 22
18682: PUSH
18683: LD_INT 23
18685: PUSH
18686: LD_INT 25
18688: PUSH
18689: LD_INT 26
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 101
18710: PUSH
18711: LD_INT 102
18713: PUSH
18714: LD_INT 103
18716: PUSH
18717: LD_INT 105
18719: PUSH
18720: LD_INT 106
18722: PUSH
18723: LD_INT 108
18725: PUSH
18726: LD_INT 112
18728: PUSH
18729: LD_INT 116
18731: PUSH
18732: LD_INT 117
18734: PUSH
18735: LD_INT 118
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: ST_TO_ADDR
18754: GO 21157
18756: LD_INT 8
18758: DOUBLE
18759: EQUAL
18760: IFTRUE 18764
18762: GO 18904
18764: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18765: LD_ADDR_VAR 0 2
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: LD_INT 4
18775: PUSH
18776: LD_INT 5
18778: PUSH
18779: LD_INT 6
18781: PUSH
18782: LD_INT 7
18784: PUSH
18785: LD_INT 8
18787: PUSH
18788: LD_INT 11
18790: PUSH
18791: LD_INT 12
18793: PUSH
18794: LD_INT 15
18796: PUSH
18797: LD_INT 16
18799: PUSH
18800: LD_INT 20
18802: PUSH
18803: LD_INT 21
18805: PUSH
18806: LD_INT 22
18808: PUSH
18809: LD_INT 23
18811: PUSH
18812: LD_INT 25
18814: PUSH
18815: LD_INT 26
18817: PUSH
18818: LD_INT 30
18820: PUSH
18821: LD_INT 31
18823: PUSH
18824: LD_INT 32
18826: PUSH
18827: LD_INT 36
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 101
18854: PUSH
18855: LD_INT 102
18857: PUSH
18858: LD_INT 103
18860: PUSH
18861: LD_INT 105
18863: PUSH
18864: LD_INT 106
18866: PUSH
18867: LD_INT 108
18869: PUSH
18870: LD_INT 109
18872: PUSH
18873: LD_INT 112
18875: PUSH
18876: LD_INT 116
18878: PUSH
18879: LD_INT 117
18881: PUSH
18882: LD_INT 118
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: ST_TO_ADDR
18902: GO 21157
18904: LD_INT 9
18906: DOUBLE
18907: EQUAL
18908: IFTRUE 18912
18910: GO 19060
18912: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18913: LD_ADDR_VAR 0 2
18917: PUSH
18918: LD_INT 2
18920: PUSH
18921: LD_INT 4
18923: PUSH
18924: LD_INT 5
18926: PUSH
18927: LD_INT 6
18929: PUSH
18930: LD_INT 7
18932: PUSH
18933: LD_INT 8
18935: PUSH
18936: LD_INT 11
18938: PUSH
18939: LD_INT 12
18941: PUSH
18942: LD_INT 15
18944: PUSH
18945: LD_INT 16
18947: PUSH
18948: LD_INT 20
18950: PUSH
18951: LD_INT 21
18953: PUSH
18954: LD_INT 22
18956: PUSH
18957: LD_INT 23
18959: PUSH
18960: LD_INT 25
18962: PUSH
18963: LD_INT 26
18965: PUSH
18966: LD_INT 28
18968: PUSH
18969: LD_INT 30
18971: PUSH
18972: LD_INT 31
18974: PUSH
18975: LD_INT 32
18977: PUSH
18978: LD_INT 36
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 101
19006: PUSH
19007: LD_INT 102
19009: PUSH
19010: LD_INT 103
19012: PUSH
19013: LD_INT 105
19015: PUSH
19016: LD_INT 106
19018: PUSH
19019: LD_INT 108
19021: PUSH
19022: LD_INT 109
19024: PUSH
19025: LD_INT 112
19027: PUSH
19028: LD_INT 114
19030: PUSH
19031: LD_INT 116
19033: PUSH
19034: LD_INT 117
19036: PUSH
19037: LD_INT 118
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: ST_TO_ADDR
19058: GO 21157
19060: LD_INT 10
19062: DOUBLE
19063: EQUAL
19064: IFTRUE 19068
19066: GO 19264
19068: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19069: LD_ADDR_VAR 0 2
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: LD_INT 4
19079: PUSH
19080: LD_INT 5
19082: PUSH
19083: LD_INT 6
19085: PUSH
19086: LD_INT 7
19088: PUSH
19089: LD_INT 8
19091: PUSH
19092: LD_INT 9
19094: PUSH
19095: LD_INT 10
19097: PUSH
19098: LD_INT 11
19100: PUSH
19101: LD_INT 12
19103: PUSH
19104: LD_INT 13
19106: PUSH
19107: LD_INT 14
19109: PUSH
19110: LD_INT 15
19112: PUSH
19113: LD_INT 16
19115: PUSH
19116: LD_INT 17
19118: PUSH
19119: LD_INT 18
19121: PUSH
19122: LD_INT 19
19124: PUSH
19125: LD_INT 20
19127: PUSH
19128: LD_INT 21
19130: PUSH
19131: LD_INT 22
19133: PUSH
19134: LD_INT 23
19136: PUSH
19137: LD_INT 24
19139: PUSH
19140: LD_INT 25
19142: PUSH
19143: LD_INT 26
19145: PUSH
19146: LD_INT 28
19148: PUSH
19149: LD_INT 30
19151: PUSH
19152: LD_INT 31
19154: PUSH
19155: LD_INT 32
19157: PUSH
19158: LD_INT 36
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 101
19194: PUSH
19195: LD_INT 102
19197: PUSH
19198: LD_INT 103
19200: PUSH
19201: LD_INT 104
19203: PUSH
19204: LD_INT 105
19206: PUSH
19207: LD_INT 106
19209: PUSH
19210: LD_INT 107
19212: PUSH
19213: LD_INT 108
19215: PUSH
19216: LD_INT 109
19218: PUSH
19219: LD_INT 110
19221: PUSH
19222: LD_INT 111
19224: PUSH
19225: LD_INT 112
19227: PUSH
19228: LD_INT 114
19230: PUSH
19231: LD_INT 116
19233: PUSH
19234: LD_INT 117
19236: PUSH
19237: LD_INT 118
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: ST_TO_ADDR
19262: GO 21157
19264: LD_INT 11
19266: DOUBLE
19267: EQUAL
19268: IFTRUE 19272
19270: GO 19476
19272: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19273: LD_ADDR_VAR 0 2
19277: PUSH
19278: LD_INT 2
19280: PUSH
19281: LD_INT 3
19283: PUSH
19284: LD_INT 4
19286: PUSH
19287: LD_INT 5
19289: PUSH
19290: LD_INT 6
19292: PUSH
19293: LD_INT 7
19295: PUSH
19296: LD_INT 8
19298: PUSH
19299: LD_INT 9
19301: PUSH
19302: LD_INT 10
19304: PUSH
19305: LD_INT 11
19307: PUSH
19308: LD_INT 12
19310: PUSH
19311: LD_INT 13
19313: PUSH
19314: LD_INT 14
19316: PUSH
19317: LD_INT 15
19319: PUSH
19320: LD_INT 16
19322: PUSH
19323: LD_INT 17
19325: PUSH
19326: LD_INT 18
19328: PUSH
19329: LD_INT 19
19331: PUSH
19332: LD_INT 20
19334: PUSH
19335: LD_INT 21
19337: PUSH
19338: LD_INT 22
19340: PUSH
19341: LD_INT 23
19343: PUSH
19344: LD_INT 24
19346: PUSH
19347: LD_INT 25
19349: PUSH
19350: LD_INT 26
19352: PUSH
19353: LD_INT 28
19355: PUSH
19356: LD_INT 30
19358: PUSH
19359: LD_INT 31
19361: PUSH
19362: LD_INT 32
19364: PUSH
19365: LD_INT 34
19367: PUSH
19368: LD_INT 36
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 101
19406: PUSH
19407: LD_INT 102
19409: PUSH
19410: LD_INT 103
19412: PUSH
19413: LD_INT 104
19415: PUSH
19416: LD_INT 105
19418: PUSH
19419: LD_INT 106
19421: PUSH
19422: LD_INT 107
19424: PUSH
19425: LD_INT 108
19427: PUSH
19428: LD_INT 109
19430: PUSH
19431: LD_INT 110
19433: PUSH
19434: LD_INT 111
19436: PUSH
19437: LD_INT 112
19439: PUSH
19440: LD_INT 114
19442: PUSH
19443: LD_INT 116
19445: PUSH
19446: LD_INT 117
19448: PUSH
19449: LD_INT 118
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: ST_TO_ADDR
19474: GO 21157
19476: LD_INT 12
19478: DOUBLE
19479: EQUAL
19480: IFTRUE 19484
19482: GO 19704
19484: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19485: LD_ADDR_VAR 0 2
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: LD_INT 3
19498: PUSH
19499: LD_INT 4
19501: PUSH
19502: LD_INT 5
19504: PUSH
19505: LD_INT 6
19507: PUSH
19508: LD_INT 7
19510: PUSH
19511: LD_INT 8
19513: PUSH
19514: LD_INT 9
19516: PUSH
19517: LD_INT 10
19519: PUSH
19520: LD_INT 11
19522: PUSH
19523: LD_INT 12
19525: PUSH
19526: LD_INT 13
19528: PUSH
19529: LD_INT 14
19531: PUSH
19532: LD_INT 15
19534: PUSH
19535: LD_INT 16
19537: PUSH
19538: LD_INT 17
19540: PUSH
19541: LD_INT 18
19543: PUSH
19544: LD_INT 19
19546: PUSH
19547: LD_INT 20
19549: PUSH
19550: LD_INT 21
19552: PUSH
19553: LD_INT 22
19555: PUSH
19556: LD_INT 23
19558: PUSH
19559: LD_INT 24
19561: PUSH
19562: LD_INT 25
19564: PUSH
19565: LD_INT 26
19567: PUSH
19568: LD_INT 27
19570: PUSH
19571: LD_INT 28
19573: PUSH
19574: LD_INT 30
19576: PUSH
19577: LD_INT 31
19579: PUSH
19580: LD_INT 32
19582: PUSH
19583: LD_INT 33
19585: PUSH
19586: LD_INT 34
19588: PUSH
19589: LD_INT 36
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 101
19630: PUSH
19631: LD_INT 102
19633: PUSH
19634: LD_INT 103
19636: PUSH
19637: LD_INT 104
19639: PUSH
19640: LD_INT 105
19642: PUSH
19643: LD_INT 106
19645: PUSH
19646: LD_INT 107
19648: PUSH
19649: LD_INT 108
19651: PUSH
19652: LD_INT 109
19654: PUSH
19655: LD_INT 110
19657: PUSH
19658: LD_INT 111
19660: PUSH
19661: LD_INT 112
19663: PUSH
19664: LD_INT 113
19666: PUSH
19667: LD_INT 114
19669: PUSH
19670: LD_INT 116
19672: PUSH
19673: LD_INT 117
19675: PUSH
19676: LD_INT 118
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: ST_TO_ADDR
19702: GO 21157
19704: LD_INT 13
19706: DOUBLE
19707: EQUAL
19708: IFTRUE 19712
19710: GO 19920
19712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19713: LD_ADDR_VAR 0 2
19717: PUSH
19718: LD_INT 1
19720: PUSH
19721: LD_INT 2
19723: PUSH
19724: LD_INT 3
19726: PUSH
19727: LD_INT 4
19729: PUSH
19730: LD_INT 5
19732: PUSH
19733: LD_INT 8
19735: PUSH
19736: LD_INT 9
19738: PUSH
19739: LD_INT 10
19741: PUSH
19742: LD_INT 11
19744: PUSH
19745: LD_INT 12
19747: PUSH
19748: LD_INT 14
19750: PUSH
19751: LD_INT 15
19753: PUSH
19754: LD_INT 16
19756: PUSH
19757: LD_INT 17
19759: PUSH
19760: LD_INT 18
19762: PUSH
19763: LD_INT 19
19765: PUSH
19766: LD_INT 20
19768: PUSH
19769: LD_INT 21
19771: PUSH
19772: LD_INT 22
19774: PUSH
19775: LD_INT 23
19777: PUSH
19778: LD_INT 24
19780: PUSH
19781: LD_INT 25
19783: PUSH
19784: LD_INT 26
19786: PUSH
19787: LD_INT 27
19789: PUSH
19790: LD_INT 28
19792: PUSH
19793: LD_INT 30
19795: PUSH
19796: LD_INT 31
19798: PUSH
19799: LD_INT 32
19801: PUSH
19802: LD_INT 33
19804: PUSH
19805: LD_INT 34
19807: PUSH
19808: LD_INT 36
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 101
19846: PUSH
19847: LD_INT 102
19849: PUSH
19850: LD_INT 103
19852: PUSH
19853: LD_INT 104
19855: PUSH
19856: LD_INT 105
19858: PUSH
19859: LD_INT 106
19861: PUSH
19862: LD_INT 107
19864: PUSH
19865: LD_INT 108
19867: PUSH
19868: LD_INT 109
19870: PUSH
19871: LD_INT 110
19873: PUSH
19874: LD_INT 111
19876: PUSH
19877: LD_INT 112
19879: PUSH
19880: LD_INT 113
19882: PUSH
19883: LD_INT 114
19885: PUSH
19886: LD_INT 116
19888: PUSH
19889: LD_INT 117
19891: PUSH
19892: LD_INT 118
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: ST_TO_ADDR
19918: GO 21157
19920: LD_INT 14
19922: DOUBLE
19923: EQUAL
19924: IFTRUE 19928
19926: GO 20152
19928: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19929: LD_ADDR_VAR 0 2
19933: PUSH
19934: LD_INT 1
19936: PUSH
19937: LD_INT 2
19939: PUSH
19940: LD_INT 3
19942: PUSH
19943: LD_INT 4
19945: PUSH
19946: LD_INT 5
19948: PUSH
19949: LD_INT 6
19951: PUSH
19952: LD_INT 7
19954: PUSH
19955: LD_INT 8
19957: PUSH
19958: LD_INT 9
19960: PUSH
19961: LD_INT 10
19963: PUSH
19964: LD_INT 11
19966: PUSH
19967: LD_INT 12
19969: PUSH
19970: LD_INT 13
19972: PUSH
19973: LD_INT 14
19975: PUSH
19976: LD_INT 15
19978: PUSH
19979: LD_INT 16
19981: PUSH
19982: LD_INT 17
19984: PUSH
19985: LD_INT 18
19987: PUSH
19988: LD_INT 19
19990: PUSH
19991: LD_INT 20
19993: PUSH
19994: LD_INT 21
19996: PUSH
19997: LD_INT 22
19999: PUSH
20000: LD_INT 23
20002: PUSH
20003: LD_INT 24
20005: PUSH
20006: LD_INT 25
20008: PUSH
20009: LD_INT 26
20011: PUSH
20012: LD_INT 27
20014: PUSH
20015: LD_INT 28
20017: PUSH
20018: LD_INT 29
20020: PUSH
20021: LD_INT 30
20023: PUSH
20024: LD_INT 31
20026: PUSH
20027: LD_INT 32
20029: PUSH
20030: LD_INT 33
20032: PUSH
20033: LD_INT 34
20035: PUSH
20036: LD_INT 36
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 101
20078: PUSH
20079: LD_INT 102
20081: PUSH
20082: LD_INT 103
20084: PUSH
20085: LD_INT 104
20087: PUSH
20088: LD_INT 105
20090: PUSH
20091: LD_INT 106
20093: PUSH
20094: LD_INT 107
20096: PUSH
20097: LD_INT 108
20099: PUSH
20100: LD_INT 109
20102: PUSH
20103: LD_INT 110
20105: PUSH
20106: LD_INT 111
20108: PUSH
20109: LD_INT 112
20111: PUSH
20112: LD_INT 113
20114: PUSH
20115: LD_INT 114
20117: PUSH
20118: LD_INT 116
20120: PUSH
20121: LD_INT 117
20123: PUSH
20124: LD_INT 118
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: ST_TO_ADDR
20150: GO 21157
20152: LD_INT 15
20154: DOUBLE
20155: EQUAL
20156: IFTRUE 20160
20158: GO 20384
20160: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20161: LD_ADDR_VAR 0 2
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: LD_INT 2
20171: PUSH
20172: LD_INT 3
20174: PUSH
20175: LD_INT 4
20177: PUSH
20178: LD_INT 5
20180: PUSH
20181: LD_INT 6
20183: PUSH
20184: LD_INT 7
20186: PUSH
20187: LD_INT 8
20189: PUSH
20190: LD_INT 9
20192: PUSH
20193: LD_INT 10
20195: PUSH
20196: LD_INT 11
20198: PUSH
20199: LD_INT 12
20201: PUSH
20202: LD_INT 13
20204: PUSH
20205: LD_INT 14
20207: PUSH
20208: LD_INT 15
20210: PUSH
20211: LD_INT 16
20213: PUSH
20214: LD_INT 17
20216: PUSH
20217: LD_INT 18
20219: PUSH
20220: LD_INT 19
20222: PUSH
20223: LD_INT 20
20225: PUSH
20226: LD_INT 21
20228: PUSH
20229: LD_INT 22
20231: PUSH
20232: LD_INT 23
20234: PUSH
20235: LD_INT 24
20237: PUSH
20238: LD_INT 25
20240: PUSH
20241: LD_INT 26
20243: PUSH
20244: LD_INT 27
20246: PUSH
20247: LD_INT 28
20249: PUSH
20250: LD_INT 29
20252: PUSH
20253: LD_INT 30
20255: PUSH
20256: LD_INT 31
20258: PUSH
20259: LD_INT 32
20261: PUSH
20262: LD_INT 33
20264: PUSH
20265: LD_INT 34
20267: PUSH
20268: LD_INT 36
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 101
20310: PUSH
20311: LD_INT 102
20313: PUSH
20314: LD_INT 103
20316: PUSH
20317: LD_INT 104
20319: PUSH
20320: LD_INT 105
20322: PUSH
20323: LD_INT 106
20325: PUSH
20326: LD_INT 107
20328: PUSH
20329: LD_INT 108
20331: PUSH
20332: LD_INT 109
20334: PUSH
20335: LD_INT 110
20337: PUSH
20338: LD_INT 111
20340: PUSH
20341: LD_INT 112
20343: PUSH
20344: LD_INT 113
20346: PUSH
20347: LD_INT 114
20349: PUSH
20350: LD_INT 116
20352: PUSH
20353: LD_INT 117
20355: PUSH
20356: LD_INT 118
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: ST_TO_ADDR
20382: GO 21157
20384: LD_INT 16
20386: DOUBLE
20387: EQUAL
20388: IFTRUE 20392
20390: GO 20528
20392: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20393: LD_ADDR_VAR 0 2
20397: PUSH
20398: LD_INT 2
20400: PUSH
20401: LD_INT 4
20403: PUSH
20404: LD_INT 5
20406: PUSH
20407: LD_INT 7
20409: PUSH
20410: LD_INT 11
20412: PUSH
20413: LD_INT 12
20415: PUSH
20416: LD_INT 15
20418: PUSH
20419: LD_INT 16
20421: PUSH
20422: LD_INT 20
20424: PUSH
20425: LD_INT 21
20427: PUSH
20428: LD_INT 22
20430: PUSH
20431: LD_INT 23
20433: PUSH
20434: LD_INT 25
20436: PUSH
20437: LD_INT 26
20439: PUSH
20440: LD_INT 30
20442: PUSH
20443: LD_INT 31
20445: PUSH
20446: LD_INT 32
20448: PUSH
20449: LD_INT 33
20451: PUSH
20452: LD_INT 34
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 101
20478: PUSH
20479: LD_INT 102
20481: PUSH
20482: LD_INT 103
20484: PUSH
20485: LD_INT 106
20487: PUSH
20488: LD_INT 108
20490: PUSH
20491: LD_INT 112
20493: PUSH
20494: LD_INT 113
20496: PUSH
20497: LD_INT 114
20499: PUSH
20500: LD_INT 116
20502: PUSH
20503: LD_INT 117
20505: PUSH
20506: LD_INT 118
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: ST_TO_ADDR
20526: GO 21157
20528: LD_INT 17
20530: DOUBLE
20531: EQUAL
20532: IFTRUE 20536
20534: GO 20760
20536: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20537: LD_ADDR_VAR 0 2
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: LD_INT 2
20547: PUSH
20548: LD_INT 3
20550: PUSH
20551: LD_INT 4
20553: PUSH
20554: LD_INT 5
20556: PUSH
20557: LD_INT 6
20559: PUSH
20560: LD_INT 7
20562: PUSH
20563: LD_INT 8
20565: PUSH
20566: LD_INT 9
20568: PUSH
20569: LD_INT 10
20571: PUSH
20572: LD_INT 11
20574: PUSH
20575: LD_INT 12
20577: PUSH
20578: LD_INT 13
20580: PUSH
20581: LD_INT 14
20583: PUSH
20584: LD_INT 15
20586: PUSH
20587: LD_INT 16
20589: PUSH
20590: LD_INT 17
20592: PUSH
20593: LD_INT 18
20595: PUSH
20596: LD_INT 19
20598: PUSH
20599: LD_INT 20
20601: PUSH
20602: LD_INT 21
20604: PUSH
20605: LD_INT 22
20607: PUSH
20608: LD_INT 23
20610: PUSH
20611: LD_INT 24
20613: PUSH
20614: LD_INT 25
20616: PUSH
20617: LD_INT 26
20619: PUSH
20620: LD_INT 27
20622: PUSH
20623: LD_INT 28
20625: PUSH
20626: LD_INT 29
20628: PUSH
20629: LD_INT 30
20631: PUSH
20632: LD_INT 31
20634: PUSH
20635: LD_INT 32
20637: PUSH
20638: LD_INT 33
20640: PUSH
20641: LD_INT 34
20643: PUSH
20644: LD_INT 36
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 101
20686: PUSH
20687: LD_INT 102
20689: PUSH
20690: LD_INT 103
20692: PUSH
20693: LD_INT 104
20695: PUSH
20696: LD_INT 105
20698: PUSH
20699: LD_INT 106
20701: PUSH
20702: LD_INT 107
20704: PUSH
20705: LD_INT 108
20707: PUSH
20708: LD_INT 109
20710: PUSH
20711: LD_INT 110
20713: PUSH
20714: LD_INT 111
20716: PUSH
20717: LD_INT 112
20719: PUSH
20720: LD_INT 113
20722: PUSH
20723: LD_INT 114
20725: PUSH
20726: LD_INT 116
20728: PUSH
20729: LD_INT 117
20731: PUSH
20732: LD_INT 118
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: ST_TO_ADDR
20758: GO 21157
20760: LD_INT 18
20762: DOUBLE
20763: EQUAL
20764: IFTRUE 20768
20766: GO 20916
20768: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20769: LD_ADDR_VAR 0 2
20773: PUSH
20774: LD_INT 2
20776: PUSH
20777: LD_INT 4
20779: PUSH
20780: LD_INT 5
20782: PUSH
20783: LD_INT 7
20785: PUSH
20786: LD_INT 11
20788: PUSH
20789: LD_INT 12
20791: PUSH
20792: LD_INT 15
20794: PUSH
20795: LD_INT 16
20797: PUSH
20798: LD_INT 20
20800: PUSH
20801: LD_INT 21
20803: PUSH
20804: LD_INT 22
20806: PUSH
20807: LD_INT 23
20809: PUSH
20810: LD_INT 25
20812: PUSH
20813: LD_INT 26
20815: PUSH
20816: LD_INT 30
20818: PUSH
20819: LD_INT 31
20821: PUSH
20822: LD_INT 32
20824: PUSH
20825: LD_INT 33
20827: PUSH
20828: LD_INT 34
20830: PUSH
20831: LD_INT 35
20833: PUSH
20834: LD_INT 36
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 101
20862: PUSH
20863: LD_INT 102
20865: PUSH
20866: LD_INT 103
20868: PUSH
20869: LD_INT 106
20871: PUSH
20872: LD_INT 108
20874: PUSH
20875: LD_INT 112
20877: PUSH
20878: LD_INT 113
20880: PUSH
20881: LD_INT 114
20883: PUSH
20884: LD_INT 115
20886: PUSH
20887: LD_INT 116
20889: PUSH
20890: LD_INT 117
20892: PUSH
20893: LD_INT 118
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: ST_TO_ADDR
20914: GO 21157
20916: LD_INT 19
20918: DOUBLE
20919: EQUAL
20920: IFTRUE 20924
20922: GO 21156
20924: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20925: LD_ADDR_VAR 0 2
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: LD_INT 2
20935: PUSH
20936: LD_INT 3
20938: PUSH
20939: LD_INT 4
20941: PUSH
20942: LD_INT 5
20944: PUSH
20945: LD_INT 6
20947: PUSH
20948: LD_INT 7
20950: PUSH
20951: LD_INT 8
20953: PUSH
20954: LD_INT 9
20956: PUSH
20957: LD_INT 10
20959: PUSH
20960: LD_INT 11
20962: PUSH
20963: LD_INT 12
20965: PUSH
20966: LD_INT 13
20968: PUSH
20969: LD_INT 14
20971: PUSH
20972: LD_INT 15
20974: PUSH
20975: LD_INT 16
20977: PUSH
20978: LD_INT 17
20980: PUSH
20981: LD_INT 18
20983: PUSH
20984: LD_INT 19
20986: PUSH
20987: LD_INT 20
20989: PUSH
20990: LD_INT 21
20992: PUSH
20993: LD_INT 22
20995: PUSH
20996: LD_INT 23
20998: PUSH
20999: LD_INT 24
21001: PUSH
21002: LD_INT 25
21004: PUSH
21005: LD_INT 26
21007: PUSH
21008: LD_INT 27
21010: PUSH
21011: LD_INT 28
21013: PUSH
21014: LD_INT 29
21016: PUSH
21017: LD_INT 30
21019: PUSH
21020: LD_INT 31
21022: PUSH
21023: LD_INT 32
21025: PUSH
21026: LD_INT 33
21028: PUSH
21029: LD_INT 34
21031: PUSH
21032: LD_INT 35
21034: PUSH
21035: LD_INT 36
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 101
21078: PUSH
21079: LD_INT 102
21081: PUSH
21082: LD_INT 103
21084: PUSH
21085: LD_INT 104
21087: PUSH
21088: LD_INT 105
21090: PUSH
21091: LD_INT 106
21093: PUSH
21094: LD_INT 107
21096: PUSH
21097: LD_INT 108
21099: PUSH
21100: LD_INT 109
21102: PUSH
21103: LD_INT 110
21105: PUSH
21106: LD_INT 111
21108: PUSH
21109: LD_INT 112
21111: PUSH
21112: LD_INT 113
21114: PUSH
21115: LD_INT 114
21117: PUSH
21118: LD_INT 115
21120: PUSH
21121: LD_INT 116
21123: PUSH
21124: LD_INT 117
21126: PUSH
21127: LD_INT 118
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: ST_TO_ADDR
21154: GO 21157
21156: POP
// end else
21157: GO 21388
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21159: LD_ADDR_VAR 0 2
21163: PUSH
21164: LD_INT 1
21166: PUSH
21167: LD_INT 2
21169: PUSH
21170: LD_INT 3
21172: PUSH
21173: LD_INT 4
21175: PUSH
21176: LD_INT 5
21178: PUSH
21179: LD_INT 6
21181: PUSH
21182: LD_INT 7
21184: PUSH
21185: LD_INT 8
21187: PUSH
21188: LD_INT 9
21190: PUSH
21191: LD_INT 10
21193: PUSH
21194: LD_INT 11
21196: PUSH
21197: LD_INT 12
21199: PUSH
21200: LD_INT 13
21202: PUSH
21203: LD_INT 14
21205: PUSH
21206: LD_INT 15
21208: PUSH
21209: LD_INT 16
21211: PUSH
21212: LD_INT 17
21214: PUSH
21215: LD_INT 18
21217: PUSH
21218: LD_INT 19
21220: PUSH
21221: LD_INT 20
21223: PUSH
21224: LD_INT 21
21226: PUSH
21227: LD_INT 22
21229: PUSH
21230: LD_INT 23
21232: PUSH
21233: LD_INT 24
21235: PUSH
21236: LD_INT 25
21238: PUSH
21239: LD_INT 26
21241: PUSH
21242: LD_INT 27
21244: PUSH
21245: LD_INT 28
21247: PUSH
21248: LD_INT 29
21250: PUSH
21251: LD_INT 30
21253: PUSH
21254: LD_INT 31
21256: PUSH
21257: LD_INT 32
21259: PUSH
21260: LD_INT 33
21262: PUSH
21263: LD_INT 34
21265: PUSH
21266: LD_INT 35
21268: PUSH
21269: LD_INT 36
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 101
21312: PUSH
21313: LD_INT 102
21315: PUSH
21316: LD_INT 103
21318: PUSH
21319: LD_INT 104
21321: PUSH
21322: LD_INT 105
21324: PUSH
21325: LD_INT 106
21327: PUSH
21328: LD_INT 107
21330: PUSH
21331: LD_INT 108
21333: PUSH
21334: LD_INT 109
21336: PUSH
21337: LD_INT 110
21339: PUSH
21340: LD_INT 111
21342: PUSH
21343: LD_INT 112
21345: PUSH
21346: LD_INT 113
21348: PUSH
21349: LD_INT 114
21351: PUSH
21352: LD_INT 115
21354: PUSH
21355: LD_INT 116
21357: PUSH
21358: LD_INT 117
21360: PUSH
21361: LD_INT 118
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: ST_TO_ADDR
// if result then
21388: LD_VAR 0 2
21392: IFFALSE 22178
// begin normal :=  ;
21394: LD_ADDR_VAR 0 5
21398: PUSH
21399: LD_STRING 
21401: ST_TO_ADDR
// hardcore :=  ;
21402: LD_ADDR_VAR 0 6
21406: PUSH
21407: LD_STRING 
21409: ST_TO_ADDR
// active :=  ;
21410: LD_ADDR_VAR 0 7
21414: PUSH
21415: LD_STRING 
21417: ST_TO_ADDR
// for i = 1 to normalCounter do
21418: LD_ADDR_VAR 0 8
21422: PUSH
21423: DOUBLE
21424: LD_INT 1
21426: DEC
21427: ST_TO_ADDR
21428: LD_EXP 54
21432: PUSH
21433: FOR_TO
21434: IFFALSE 21535
// begin tmp := 0 ;
21436: LD_ADDR_VAR 0 3
21440: PUSH
21441: LD_STRING 0
21443: ST_TO_ADDR
// if result [ 1 ] then
21444: LD_VAR 0 2
21448: PUSH
21449: LD_INT 1
21451: ARRAY
21452: IFFALSE 21517
// if result [ 1 ] [ 1 ] = i then
21454: LD_VAR 0 2
21458: PUSH
21459: LD_INT 1
21461: ARRAY
21462: PUSH
21463: LD_INT 1
21465: ARRAY
21466: PUSH
21467: LD_VAR 0 8
21471: EQUAL
21472: IFFALSE 21517
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21474: LD_ADDR_VAR 0 2
21478: PUSH
21479: LD_VAR 0 2
21483: PPUSH
21484: LD_INT 1
21486: PPUSH
21487: LD_VAR 0 2
21491: PUSH
21492: LD_INT 1
21494: ARRAY
21495: PPUSH
21496: LD_INT 1
21498: PPUSH
21499: CALL_OW 3
21503: PPUSH
21504: CALL_OW 1
21508: ST_TO_ADDR
// tmp := 1 ;
21509: LD_ADDR_VAR 0 3
21513: PUSH
21514: LD_STRING 1
21516: ST_TO_ADDR
// end ; normal := normal & tmp ;
21517: LD_ADDR_VAR 0 5
21521: PUSH
21522: LD_VAR 0 5
21526: PUSH
21527: LD_VAR 0 3
21531: STR
21532: ST_TO_ADDR
// end ;
21533: GO 21433
21535: POP
21536: POP
// for i = 1 to hardcoreCounter do
21537: LD_ADDR_VAR 0 8
21541: PUSH
21542: DOUBLE
21543: LD_INT 1
21545: DEC
21546: ST_TO_ADDR
21547: LD_EXP 55
21551: PUSH
21552: FOR_TO
21553: IFFALSE 21658
// begin tmp := 0 ;
21555: LD_ADDR_VAR 0 3
21559: PUSH
21560: LD_STRING 0
21562: ST_TO_ADDR
// if result [ 2 ] then
21563: LD_VAR 0 2
21567: PUSH
21568: LD_INT 2
21570: ARRAY
21571: IFFALSE 21640
// if result [ 2 ] [ 1 ] = 100 + i then
21573: LD_VAR 0 2
21577: PUSH
21578: LD_INT 2
21580: ARRAY
21581: PUSH
21582: LD_INT 1
21584: ARRAY
21585: PUSH
21586: LD_INT 100
21588: PUSH
21589: LD_VAR 0 8
21593: PLUS
21594: EQUAL
21595: IFFALSE 21640
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21597: LD_ADDR_VAR 0 2
21601: PUSH
21602: LD_VAR 0 2
21606: PPUSH
21607: LD_INT 2
21609: PPUSH
21610: LD_VAR 0 2
21614: PUSH
21615: LD_INT 2
21617: ARRAY
21618: PPUSH
21619: LD_INT 1
21621: PPUSH
21622: CALL_OW 3
21626: PPUSH
21627: CALL_OW 1
21631: ST_TO_ADDR
// tmp := 1 ;
21632: LD_ADDR_VAR 0 3
21636: PUSH
21637: LD_STRING 1
21639: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21640: LD_ADDR_VAR 0 6
21644: PUSH
21645: LD_VAR 0 6
21649: PUSH
21650: LD_VAR 0 3
21654: STR
21655: ST_TO_ADDR
// end ;
21656: GO 21552
21658: POP
21659: POP
// if isGameLoad then
21660: LD_VAR 0 1
21664: IFFALSE 22139
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21666: LD_ADDR_VAR 0 4
21670: PUSH
21671: LD_EXP 58
21675: PUSH
21676: LD_EXP 57
21680: PUSH
21681: LD_EXP 59
21685: PUSH
21686: LD_EXP 56
21690: PUSH
21691: LD_EXP 60
21695: PUSH
21696: LD_EXP 61
21700: PUSH
21701: LD_EXP 62
21705: PUSH
21706: LD_EXP 63
21710: PUSH
21711: LD_EXP 64
21715: PUSH
21716: LD_EXP 65
21720: PUSH
21721: LD_EXP 66
21725: PUSH
21726: LD_EXP 67
21730: PUSH
21731: LD_EXP 68
21735: PUSH
21736: LD_EXP 69
21740: PUSH
21741: LD_EXP 77
21745: PUSH
21746: LD_EXP 78
21750: PUSH
21751: LD_EXP 79
21755: PUSH
21756: LD_EXP 80
21760: PUSH
21761: LD_EXP 82
21765: PUSH
21766: LD_EXP 83
21770: PUSH
21771: LD_EXP 84
21775: PUSH
21776: LD_EXP 87
21780: PUSH
21781: LD_EXP 89
21785: PUSH
21786: LD_EXP 90
21790: PUSH
21791: LD_EXP 91
21795: PUSH
21796: LD_EXP 93
21800: PUSH
21801: LD_EXP 94
21805: PUSH
21806: LD_EXP 97
21810: PUSH
21811: LD_EXP 98
21815: PUSH
21816: LD_EXP 99
21820: PUSH
21821: LD_EXP 100
21825: PUSH
21826: LD_EXP 101
21830: PUSH
21831: LD_EXP 102
21835: PUSH
21836: LD_EXP 103
21840: PUSH
21841: LD_EXP 104
21845: PUSH
21846: LD_EXP 105
21850: PUSH
21851: LD_EXP 70
21855: PUSH
21856: LD_EXP 71
21860: PUSH
21861: LD_EXP 74
21865: PUSH
21866: LD_EXP 75
21870: PUSH
21871: LD_EXP 76
21875: PUSH
21876: LD_EXP 72
21880: PUSH
21881: LD_EXP 73
21885: PUSH
21886: LD_EXP 81
21890: PUSH
21891: LD_EXP 85
21895: PUSH
21896: LD_EXP 86
21900: PUSH
21901: LD_EXP 88
21905: PUSH
21906: LD_EXP 92
21910: PUSH
21911: LD_EXP 95
21915: PUSH
21916: LD_EXP 96
21920: PUSH
21921: LD_EXP 106
21925: PUSH
21926: LD_EXP 107
21930: PUSH
21931: LD_EXP 108
21935: PUSH
21936: LD_EXP 109
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: ST_TO_ADDR
// tmp :=  ;
21997: LD_ADDR_VAR 0 3
22001: PUSH
22002: LD_STRING 
22004: ST_TO_ADDR
// for i = 1 to normalCounter do
22005: LD_ADDR_VAR 0 8
22009: PUSH
22010: DOUBLE
22011: LD_INT 1
22013: DEC
22014: ST_TO_ADDR
22015: LD_EXP 54
22019: PUSH
22020: FOR_TO
22021: IFFALSE 22057
// begin if flags [ i ] then
22023: LD_VAR 0 4
22027: PUSH
22028: LD_VAR 0 8
22032: ARRAY
22033: IFFALSE 22055
// tmp := tmp & i & ; ;
22035: LD_ADDR_VAR 0 3
22039: PUSH
22040: LD_VAR 0 3
22044: PUSH
22045: LD_VAR 0 8
22049: STR
22050: PUSH
22051: LD_STRING ;
22053: STR
22054: ST_TO_ADDR
// end ;
22055: GO 22020
22057: POP
22058: POP
// for i = 1 to hardcoreCounter do
22059: LD_ADDR_VAR 0 8
22063: PUSH
22064: DOUBLE
22065: LD_INT 1
22067: DEC
22068: ST_TO_ADDR
22069: LD_EXP 55
22073: PUSH
22074: FOR_TO
22075: IFFALSE 22121
// begin if flags [ normalCounter + i ] then
22077: LD_VAR 0 4
22081: PUSH
22082: LD_EXP 54
22086: PUSH
22087: LD_VAR 0 8
22091: PLUS
22092: ARRAY
22093: IFFALSE 22119
// tmp := tmp & ( 100 + i ) & ; ;
22095: LD_ADDR_VAR 0 3
22099: PUSH
22100: LD_VAR 0 3
22104: PUSH
22105: LD_INT 100
22107: PUSH
22108: LD_VAR 0 8
22112: PLUS
22113: STR
22114: PUSH
22115: LD_STRING ;
22117: STR
22118: ST_TO_ADDR
// end ;
22119: GO 22074
22121: POP
22122: POP
// if tmp then
22123: LD_VAR 0 3
22127: IFFALSE 22139
// active := tmp ;
22129: LD_ADDR_VAR 0 7
22133: PUSH
22134: LD_VAR 0 3
22138: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22139: LD_STRING getStreamItemsFromMission("
22141: PUSH
22142: LD_VAR 0 5
22146: STR
22147: PUSH
22148: LD_STRING ","
22150: STR
22151: PUSH
22152: LD_VAR 0 6
22156: STR
22157: PUSH
22158: LD_STRING ","
22160: STR
22161: PUSH
22162: LD_VAR 0 7
22166: STR
22167: PUSH
22168: LD_STRING ")
22170: STR
22171: PPUSH
22172: CALL_OW 559
// end else
22176: GO 22185
// ToLua ( getStreamItemsFromMission("","","") ) ;
22178: LD_STRING getStreamItemsFromMission("","","")
22180: PPUSH
22181: CALL_OW 559
// end ;
22185: LD_VAR 0 2
22189: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22190: LD_EXP 53
22194: PUSH
22195: LD_EXP 58
22199: AND
22200: IFFALSE 22324
22202: GO 22204
22204: DISABLE
22205: LD_INT 0
22207: PPUSH
22208: PPUSH
// begin enable ;
22209: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22210: LD_ADDR_VAR 0 2
22214: PUSH
22215: LD_INT 22
22217: PUSH
22218: LD_OWVAR 2
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 2
22229: PUSH
22230: LD_INT 34
22232: PUSH
22233: LD_INT 7
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 34
22242: PUSH
22243: LD_INT 45
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 34
22252: PUSH
22253: LD_INT 28
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 34
22262: PUSH
22263: LD_INT 47
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PPUSH
22281: CALL_OW 69
22285: ST_TO_ADDR
// if not tmp then
22286: LD_VAR 0 2
22290: NOT
22291: IFFALSE 22295
// exit ;
22293: GO 22324
// for i in tmp do
22295: LD_ADDR_VAR 0 1
22299: PUSH
22300: LD_VAR 0 2
22304: PUSH
22305: FOR_IN
22306: IFFALSE 22322
// begin SetLives ( i , 0 ) ;
22308: LD_VAR 0 1
22312: PPUSH
22313: LD_INT 0
22315: PPUSH
22316: CALL_OW 234
// end ;
22320: GO 22305
22322: POP
22323: POP
// end ;
22324: PPOPN 2
22326: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22327: LD_EXP 53
22331: PUSH
22332: LD_EXP 59
22336: AND
22337: IFFALSE 22421
22339: GO 22341
22341: DISABLE
22342: LD_INT 0
22344: PPUSH
22345: PPUSH
// begin enable ;
22346: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22347: LD_ADDR_VAR 0 2
22351: PUSH
22352: LD_INT 22
22354: PUSH
22355: LD_OWVAR 2
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 32
22366: PUSH
22367: LD_INT 3
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PPUSH
22378: CALL_OW 69
22382: ST_TO_ADDR
// if not tmp then
22383: LD_VAR 0 2
22387: NOT
22388: IFFALSE 22392
// exit ;
22390: GO 22421
// for i in tmp do
22392: LD_ADDR_VAR 0 1
22396: PUSH
22397: LD_VAR 0 2
22401: PUSH
22402: FOR_IN
22403: IFFALSE 22419
// begin SetLives ( i , 0 ) ;
22405: LD_VAR 0 1
22409: PPUSH
22410: LD_INT 0
22412: PPUSH
22413: CALL_OW 234
// end ;
22417: GO 22402
22419: POP
22420: POP
// end ;
22421: PPOPN 2
22423: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22424: LD_EXP 53
22428: PUSH
22429: LD_EXP 56
22433: AND
22434: IFFALSE 22527
22436: GO 22438
22438: DISABLE
22439: LD_INT 0
22441: PPUSH
// begin enable ;
22442: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22443: LD_ADDR_VAR 0 1
22447: PUSH
22448: LD_INT 22
22450: PUSH
22451: LD_OWVAR 2
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: LD_INT 25
22465: PUSH
22466: LD_INT 5
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 25
22475: PUSH
22476: LD_INT 9
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 25
22485: PUSH
22486: LD_INT 8
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PPUSH
22503: CALL_OW 69
22507: PUSH
22508: FOR_IN
22509: IFFALSE 22525
// begin SetClass ( i , 1 ) ;
22511: LD_VAR 0 1
22515: PPUSH
22516: LD_INT 1
22518: PPUSH
22519: CALL_OW 336
// end ;
22523: GO 22508
22525: POP
22526: POP
// end ;
22527: PPOPN 1
22529: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22530: LD_EXP 53
22534: PUSH
22535: LD_EXP 57
22539: AND
22540: PUSH
22541: LD_OWVAR 65
22545: PUSH
22546: LD_INT 7
22548: LESS
22549: AND
22550: IFFALSE 22564
22552: GO 22554
22554: DISABLE
// begin enable ;
22555: ENABLE
// game_speed := 7 ;
22556: LD_ADDR_OWVAR 65
22560: PUSH
22561: LD_INT 7
22563: ST_TO_ADDR
// end ;
22564: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22565: LD_EXP 53
22569: PUSH
22570: LD_EXP 60
22574: AND
22575: IFFALSE 22777
22577: GO 22579
22579: DISABLE
22580: LD_INT 0
22582: PPUSH
22583: PPUSH
22584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22585: LD_ADDR_VAR 0 3
22589: PUSH
22590: LD_INT 81
22592: PUSH
22593: LD_OWVAR 2
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 21
22604: PUSH
22605: LD_INT 1
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PPUSH
22616: CALL_OW 69
22620: ST_TO_ADDR
// if not tmp then
22621: LD_VAR 0 3
22625: NOT
22626: IFFALSE 22630
// exit ;
22628: GO 22777
// if tmp > 5 then
22630: LD_VAR 0 3
22634: PUSH
22635: LD_INT 5
22637: GREATER
22638: IFFALSE 22650
// k := 5 else
22640: LD_ADDR_VAR 0 2
22644: PUSH
22645: LD_INT 5
22647: ST_TO_ADDR
22648: GO 22660
// k := tmp ;
22650: LD_ADDR_VAR 0 2
22654: PUSH
22655: LD_VAR 0 3
22659: ST_TO_ADDR
// for i := 1 to k do
22660: LD_ADDR_VAR 0 1
22664: PUSH
22665: DOUBLE
22666: LD_INT 1
22668: DEC
22669: ST_TO_ADDR
22670: LD_VAR 0 2
22674: PUSH
22675: FOR_TO
22676: IFFALSE 22775
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22678: LD_VAR 0 3
22682: PUSH
22683: LD_VAR 0 1
22687: ARRAY
22688: PPUSH
22689: LD_VAR 0 1
22693: PUSH
22694: LD_INT 4
22696: MOD
22697: PUSH
22698: LD_INT 1
22700: PLUS
22701: PPUSH
22702: CALL_OW 259
22706: PUSH
22707: LD_INT 10
22709: LESS
22710: IFFALSE 22773
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22712: LD_VAR 0 3
22716: PUSH
22717: LD_VAR 0 1
22721: ARRAY
22722: PPUSH
22723: LD_VAR 0 1
22727: PUSH
22728: LD_INT 4
22730: MOD
22731: PUSH
22732: LD_INT 1
22734: PLUS
22735: PPUSH
22736: LD_VAR 0 3
22740: PUSH
22741: LD_VAR 0 1
22745: ARRAY
22746: PPUSH
22747: LD_VAR 0 1
22751: PUSH
22752: LD_INT 4
22754: MOD
22755: PUSH
22756: LD_INT 1
22758: PLUS
22759: PPUSH
22760: CALL_OW 259
22764: PUSH
22765: LD_INT 1
22767: PLUS
22768: PPUSH
22769: CALL_OW 237
22773: GO 22675
22775: POP
22776: POP
// end ;
22777: PPOPN 3
22779: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22780: LD_EXP 53
22784: PUSH
22785: LD_EXP 61
22789: AND
22790: IFFALSE 22810
22792: GO 22794
22794: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22795: LD_INT 4
22797: PPUSH
22798: LD_OWVAR 2
22802: PPUSH
22803: LD_INT 0
22805: PPUSH
22806: CALL_OW 324
22810: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22811: LD_EXP 53
22815: PUSH
22816: LD_EXP 90
22820: AND
22821: IFFALSE 22841
22823: GO 22825
22825: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22826: LD_INT 19
22828: PPUSH
22829: LD_OWVAR 2
22833: PPUSH
22834: LD_INT 0
22836: PPUSH
22837: CALL_OW 324
22841: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22842: LD_EXP 53
22846: PUSH
22847: LD_EXP 62
22851: AND
22852: IFFALSE 22954
22854: GO 22856
22856: DISABLE
22857: LD_INT 0
22859: PPUSH
22860: PPUSH
// begin enable ;
22861: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22862: LD_ADDR_VAR 0 2
22866: PUSH
22867: LD_INT 22
22869: PUSH
22870: LD_OWVAR 2
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 2
22881: PUSH
22882: LD_INT 34
22884: PUSH
22885: LD_INT 11
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 34
22894: PUSH
22895: LD_INT 30
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: LIST
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PPUSH
22911: CALL_OW 69
22915: ST_TO_ADDR
// if not tmp then
22916: LD_VAR 0 2
22920: NOT
22921: IFFALSE 22925
// exit ;
22923: GO 22954
// for i in tmp do
22925: LD_ADDR_VAR 0 1
22929: PUSH
22930: LD_VAR 0 2
22934: PUSH
22935: FOR_IN
22936: IFFALSE 22952
// begin SetLives ( i , 0 ) ;
22938: LD_VAR 0 1
22942: PPUSH
22943: LD_INT 0
22945: PPUSH
22946: CALL_OW 234
// end ;
22950: GO 22935
22952: POP
22953: POP
// end ;
22954: PPOPN 2
22956: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22957: LD_EXP 53
22961: PUSH
22962: LD_EXP 63
22966: AND
22967: IFFALSE 22987
22969: GO 22971
22971: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22972: LD_INT 32
22974: PPUSH
22975: LD_OWVAR 2
22979: PPUSH
22980: LD_INT 0
22982: PPUSH
22983: CALL_OW 324
22987: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22988: LD_EXP 53
22992: PUSH
22993: LD_EXP 64
22997: AND
22998: IFFALSE 23179
23000: GO 23002
23002: DISABLE
23003: LD_INT 0
23005: PPUSH
23006: PPUSH
23007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23008: LD_ADDR_VAR 0 2
23012: PUSH
23013: LD_INT 22
23015: PUSH
23016: LD_OWVAR 2
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 33
23027: PUSH
23028: LD_INT 3
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PPUSH
23039: CALL_OW 69
23043: ST_TO_ADDR
// if not tmp then
23044: LD_VAR 0 2
23048: NOT
23049: IFFALSE 23053
// exit ;
23051: GO 23179
// side := 0 ;
23053: LD_ADDR_VAR 0 3
23057: PUSH
23058: LD_INT 0
23060: ST_TO_ADDR
// for i := 1 to 8 do
23061: LD_ADDR_VAR 0 1
23065: PUSH
23066: DOUBLE
23067: LD_INT 1
23069: DEC
23070: ST_TO_ADDR
23071: LD_INT 8
23073: PUSH
23074: FOR_TO
23075: IFFALSE 23123
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23077: LD_OWVAR 2
23081: PUSH
23082: LD_VAR 0 1
23086: NONEQUAL
23087: PUSH
23088: LD_OWVAR 2
23092: PPUSH
23093: LD_VAR 0 1
23097: PPUSH
23098: CALL_OW 81
23102: PUSH
23103: LD_INT 2
23105: EQUAL
23106: AND
23107: IFFALSE 23121
// begin side := i ;
23109: LD_ADDR_VAR 0 3
23113: PUSH
23114: LD_VAR 0 1
23118: ST_TO_ADDR
// break ;
23119: GO 23123
// end ;
23121: GO 23074
23123: POP
23124: POP
// if not side then
23125: LD_VAR 0 3
23129: NOT
23130: IFFALSE 23134
// exit ;
23132: GO 23179
// for i := 1 to tmp do
23134: LD_ADDR_VAR 0 1
23138: PUSH
23139: DOUBLE
23140: LD_INT 1
23142: DEC
23143: ST_TO_ADDR
23144: LD_VAR 0 2
23148: PUSH
23149: FOR_TO
23150: IFFALSE 23177
// if Prob ( 60 ) then
23152: LD_INT 60
23154: PPUSH
23155: CALL_OW 13
23159: IFFALSE 23175
// SetSide ( i , side ) ;
23161: LD_VAR 0 1
23165: PPUSH
23166: LD_VAR 0 3
23170: PPUSH
23171: CALL_OW 235
23175: GO 23149
23177: POP
23178: POP
// end ;
23179: PPOPN 3
23181: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23182: LD_EXP 53
23186: PUSH
23187: LD_EXP 66
23191: AND
23192: IFFALSE 23311
23194: GO 23196
23196: DISABLE
23197: LD_INT 0
23199: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23200: LD_ADDR_VAR 0 1
23204: PUSH
23205: LD_INT 22
23207: PUSH
23208: LD_OWVAR 2
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 21
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 3
23229: PUSH
23230: LD_INT 23
23232: PUSH
23233: LD_INT 0
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: LIST
23248: PPUSH
23249: CALL_OW 69
23253: PUSH
23254: FOR_IN
23255: IFFALSE 23309
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23257: LD_VAR 0 1
23261: PPUSH
23262: CALL_OW 257
23266: PUSH
23267: LD_INT 1
23269: PUSH
23270: LD_INT 2
23272: PUSH
23273: LD_INT 3
23275: PUSH
23276: LD_INT 4
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: IN
23285: IFFALSE 23307
// SetClass ( un , rand ( 1 , 4 ) ) ;
23287: LD_VAR 0 1
23291: PPUSH
23292: LD_INT 1
23294: PPUSH
23295: LD_INT 4
23297: PPUSH
23298: CALL_OW 12
23302: PPUSH
23303: CALL_OW 336
23307: GO 23254
23309: POP
23310: POP
// end ;
23311: PPOPN 1
23313: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23314: LD_EXP 53
23318: PUSH
23319: LD_EXP 65
23323: AND
23324: IFFALSE 23403
23326: GO 23328
23328: DISABLE
23329: LD_INT 0
23331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23332: LD_ADDR_VAR 0 1
23336: PUSH
23337: LD_INT 22
23339: PUSH
23340: LD_OWVAR 2
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 21
23351: PUSH
23352: LD_INT 3
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PPUSH
23363: CALL_OW 69
23367: ST_TO_ADDR
// if not tmp then
23368: LD_VAR 0 1
23372: NOT
23373: IFFALSE 23377
// exit ;
23375: GO 23403
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23377: LD_VAR 0 1
23381: PUSH
23382: LD_INT 1
23384: PPUSH
23385: LD_VAR 0 1
23389: PPUSH
23390: CALL_OW 12
23394: ARRAY
23395: PPUSH
23396: LD_INT 100
23398: PPUSH
23399: CALL_OW 234
// end ;
23403: PPOPN 1
23405: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23406: LD_EXP 53
23410: PUSH
23411: LD_EXP 67
23415: AND
23416: IFFALSE 23514
23418: GO 23420
23420: DISABLE
23421: LD_INT 0
23423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23424: LD_ADDR_VAR 0 1
23428: PUSH
23429: LD_INT 22
23431: PUSH
23432: LD_OWVAR 2
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 21
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PPUSH
23455: CALL_OW 69
23459: ST_TO_ADDR
// if not tmp then
23460: LD_VAR 0 1
23464: NOT
23465: IFFALSE 23469
// exit ;
23467: GO 23514
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23469: LD_VAR 0 1
23473: PUSH
23474: LD_INT 1
23476: PPUSH
23477: LD_VAR 0 1
23481: PPUSH
23482: CALL_OW 12
23486: ARRAY
23487: PPUSH
23488: LD_INT 1
23490: PPUSH
23491: LD_INT 4
23493: PPUSH
23494: CALL_OW 12
23498: PPUSH
23499: LD_INT 3000
23501: PPUSH
23502: LD_INT 9000
23504: PPUSH
23505: CALL_OW 12
23509: PPUSH
23510: CALL_OW 492
// end ;
23514: PPOPN 1
23516: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23517: LD_EXP 53
23521: PUSH
23522: LD_EXP 68
23526: AND
23527: IFFALSE 23547
23529: GO 23531
23531: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23532: LD_INT 1
23534: PPUSH
23535: LD_OWVAR 2
23539: PPUSH
23540: LD_INT 0
23542: PPUSH
23543: CALL_OW 324
23547: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23548: LD_EXP 53
23552: PUSH
23553: LD_EXP 69
23557: AND
23558: IFFALSE 23641
23560: GO 23562
23562: DISABLE
23563: LD_INT 0
23565: PPUSH
23566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23567: LD_ADDR_VAR 0 2
23571: PUSH
23572: LD_INT 22
23574: PUSH
23575: LD_OWVAR 2
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 21
23586: PUSH
23587: LD_INT 3
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PPUSH
23598: CALL_OW 69
23602: ST_TO_ADDR
// if not tmp then
23603: LD_VAR 0 2
23607: NOT
23608: IFFALSE 23612
// exit ;
23610: GO 23641
// for i in tmp do
23612: LD_ADDR_VAR 0 1
23616: PUSH
23617: LD_VAR 0 2
23621: PUSH
23622: FOR_IN
23623: IFFALSE 23639
// SetBLevel ( i , 10 ) ;
23625: LD_VAR 0 1
23629: PPUSH
23630: LD_INT 10
23632: PPUSH
23633: CALL_OW 241
23637: GO 23622
23639: POP
23640: POP
// end ;
23641: PPOPN 2
23643: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23644: LD_EXP 53
23648: PUSH
23649: LD_EXP 70
23653: AND
23654: IFFALSE 23765
23656: GO 23658
23658: DISABLE
23659: LD_INT 0
23661: PPUSH
23662: PPUSH
23663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23664: LD_ADDR_VAR 0 3
23668: PUSH
23669: LD_INT 22
23671: PUSH
23672: LD_OWVAR 2
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 25
23683: PUSH
23684: LD_INT 1
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PPUSH
23695: CALL_OW 69
23699: ST_TO_ADDR
// if not tmp then
23700: LD_VAR 0 3
23704: NOT
23705: IFFALSE 23709
// exit ;
23707: GO 23765
// un := tmp [ rand ( 1 , tmp ) ] ;
23709: LD_ADDR_VAR 0 2
23713: PUSH
23714: LD_VAR 0 3
23718: PUSH
23719: LD_INT 1
23721: PPUSH
23722: LD_VAR 0 3
23726: PPUSH
23727: CALL_OW 12
23731: ARRAY
23732: ST_TO_ADDR
// if Crawls ( un ) then
23733: LD_VAR 0 2
23737: PPUSH
23738: CALL_OW 318
23742: IFFALSE 23753
// ComWalk ( un ) ;
23744: LD_VAR 0 2
23748: PPUSH
23749: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23753: LD_VAR 0 2
23757: PPUSH
23758: LD_INT 5
23760: PPUSH
23761: CALL_OW 336
// end ;
23765: PPOPN 3
23767: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23768: LD_EXP 53
23772: PUSH
23773: LD_EXP 71
23777: AND
23778: PUSH
23779: LD_OWVAR 67
23783: PUSH
23784: LD_INT 4
23786: LESS
23787: AND
23788: IFFALSE 23807
23790: GO 23792
23792: DISABLE
// begin Difficulty := Difficulty + 1 ;
23793: LD_ADDR_OWVAR 67
23797: PUSH
23798: LD_OWVAR 67
23802: PUSH
23803: LD_INT 1
23805: PLUS
23806: ST_TO_ADDR
// end ;
23807: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23808: LD_EXP 53
23812: PUSH
23813: LD_EXP 72
23817: AND
23818: IFFALSE 23921
23820: GO 23822
23822: DISABLE
23823: LD_INT 0
23825: PPUSH
// begin for i := 1 to 5 do
23826: LD_ADDR_VAR 0 1
23830: PUSH
23831: DOUBLE
23832: LD_INT 1
23834: DEC
23835: ST_TO_ADDR
23836: LD_INT 5
23838: PUSH
23839: FOR_TO
23840: IFFALSE 23919
// begin uc_nation := nation_nature ;
23842: LD_ADDR_OWVAR 21
23846: PUSH
23847: LD_INT 0
23849: ST_TO_ADDR
// uc_side := 0 ;
23850: LD_ADDR_OWVAR 20
23854: PUSH
23855: LD_INT 0
23857: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23858: LD_ADDR_OWVAR 29
23862: PUSH
23863: LD_INT 12
23865: PUSH
23866: LD_INT 12
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: ST_TO_ADDR
// hc_agressivity := 20 ;
23873: LD_ADDR_OWVAR 35
23877: PUSH
23878: LD_INT 20
23880: ST_TO_ADDR
// hc_class := class_tiger ;
23881: LD_ADDR_OWVAR 28
23885: PUSH
23886: LD_INT 14
23888: ST_TO_ADDR
// hc_gallery :=  ;
23889: LD_ADDR_OWVAR 33
23893: PUSH
23894: LD_STRING 
23896: ST_TO_ADDR
// hc_name :=  ;
23897: LD_ADDR_OWVAR 26
23901: PUSH
23902: LD_STRING 
23904: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23905: CALL_OW 44
23909: PPUSH
23910: LD_INT 0
23912: PPUSH
23913: CALL_OW 51
// end ;
23917: GO 23839
23919: POP
23920: POP
// end ;
23921: PPOPN 1
23923: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23924: LD_EXP 53
23928: PUSH
23929: LD_EXP 73
23933: AND
23934: IFFALSE 23943
23936: GO 23938
23938: DISABLE
// StreamSibBomb ;
23939: CALL 23944 0 0
23943: END
// export function StreamSibBomb ; var i , x , y ; begin
23944: LD_INT 0
23946: PPUSH
23947: PPUSH
23948: PPUSH
23949: PPUSH
// result := false ;
23950: LD_ADDR_VAR 0 1
23954: PUSH
23955: LD_INT 0
23957: ST_TO_ADDR
// for i := 1 to 16 do
23958: LD_ADDR_VAR 0 2
23962: PUSH
23963: DOUBLE
23964: LD_INT 1
23966: DEC
23967: ST_TO_ADDR
23968: LD_INT 16
23970: PUSH
23971: FOR_TO
23972: IFFALSE 24171
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23974: LD_ADDR_VAR 0 3
23978: PUSH
23979: LD_INT 10
23981: PUSH
23982: LD_INT 20
23984: PUSH
23985: LD_INT 30
23987: PUSH
23988: LD_INT 40
23990: PUSH
23991: LD_INT 50
23993: PUSH
23994: LD_INT 60
23996: PUSH
23997: LD_INT 70
23999: PUSH
24000: LD_INT 80
24002: PUSH
24003: LD_INT 90
24005: PUSH
24006: LD_INT 100
24008: PUSH
24009: LD_INT 110
24011: PUSH
24012: LD_INT 120
24014: PUSH
24015: LD_INT 130
24017: PUSH
24018: LD_INT 140
24020: PUSH
24021: LD_INT 150
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 1
24043: PPUSH
24044: LD_INT 15
24046: PPUSH
24047: CALL_OW 12
24051: ARRAY
24052: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24053: LD_ADDR_VAR 0 4
24057: PUSH
24058: LD_INT 10
24060: PUSH
24061: LD_INT 20
24063: PUSH
24064: LD_INT 30
24066: PUSH
24067: LD_INT 40
24069: PUSH
24070: LD_INT 50
24072: PUSH
24073: LD_INT 60
24075: PUSH
24076: LD_INT 70
24078: PUSH
24079: LD_INT 80
24081: PUSH
24082: LD_INT 90
24084: PUSH
24085: LD_INT 100
24087: PUSH
24088: LD_INT 110
24090: PUSH
24091: LD_INT 120
24093: PUSH
24094: LD_INT 130
24096: PUSH
24097: LD_INT 140
24099: PUSH
24100: LD_INT 150
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 1
24122: PPUSH
24123: LD_INT 15
24125: PPUSH
24126: CALL_OW 12
24130: ARRAY
24131: ST_TO_ADDR
// if ValidHex ( x , y ) then
24132: LD_VAR 0 3
24136: PPUSH
24137: LD_VAR 0 4
24141: PPUSH
24142: CALL_OW 488
24146: IFFALSE 24169
// begin result := [ x , y ] ;
24148: LD_ADDR_VAR 0 1
24152: PUSH
24153: LD_VAR 0 3
24157: PUSH
24158: LD_VAR 0 4
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: ST_TO_ADDR
// break ;
24167: GO 24171
// end ; end ;
24169: GO 23971
24171: POP
24172: POP
// if result then
24173: LD_VAR 0 1
24177: IFFALSE 24237
// begin ToLua ( playSibBomb() ) ;
24179: LD_STRING playSibBomb()
24181: PPUSH
24182: CALL_OW 559
// wait ( 0 0$14 ) ;
24186: LD_INT 490
24188: PPUSH
24189: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24193: LD_VAR 0 1
24197: PUSH
24198: LD_INT 1
24200: ARRAY
24201: PPUSH
24202: LD_VAR 0 1
24206: PUSH
24207: LD_INT 2
24209: ARRAY
24210: PPUSH
24211: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24215: LD_VAR 0 1
24219: PUSH
24220: LD_INT 1
24222: ARRAY
24223: PPUSH
24224: LD_VAR 0 1
24228: PUSH
24229: LD_INT 2
24231: ARRAY
24232: PPUSH
24233: CALL_OW 429
// end ; end ;
24237: LD_VAR 0 1
24241: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24242: LD_EXP 53
24246: PUSH
24247: LD_EXP 75
24251: AND
24252: IFFALSE 24264
24254: GO 24256
24256: DISABLE
// YouLost (  ) ;
24257: LD_STRING 
24259: PPUSH
24260: CALL_OW 104
24264: END
// every 0 0$1 trigger StreamModeActive and sFog do
24265: LD_EXP 53
24269: PUSH
24270: LD_EXP 74
24274: AND
24275: IFFALSE 24289
24277: GO 24279
24279: DISABLE
// FogOff ( your_side ) ;
24280: LD_OWVAR 2
24284: PPUSH
24285: CALL_OW 344
24289: END
// every 0 0$1 trigger StreamModeActive and sSun do
24290: LD_EXP 53
24294: PUSH
24295: LD_EXP 76
24299: AND
24300: IFFALSE 24328
24302: GO 24304
24304: DISABLE
// begin solar_recharge_percent := 0 ;
24305: LD_ADDR_OWVAR 79
24309: PUSH
24310: LD_INT 0
24312: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24313: LD_INT 10500
24315: PPUSH
24316: CALL_OW 67
// solar_recharge_percent := 100 ;
24320: LD_ADDR_OWVAR 79
24324: PUSH
24325: LD_INT 100
24327: ST_TO_ADDR
// end ;
24328: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24329: LD_EXP 53
24333: PUSH
24334: LD_EXP 77
24338: AND
24339: IFFALSE 24578
24341: GO 24343
24343: DISABLE
24344: LD_INT 0
24346: PPUSH
24347: PPUSH
24348: PPUSH
// begin tmp := [ ] ;
24349: LD_ADDR_VAR 0 3
24353: PUSH
24354: EMPTY
24355: ST_TO_ADDR
// for i := 1 to 6 do
24356: LD_ADDR_VAR 0 1
24360: PUSH
24361: DOUBLE
24362: LD_INT 1
24364: DEC
24365: ST_TO_ADDR
24366: LD_INT 6
24368: PUSH
24369: FOR_TO
24370: IFFALSE 24475
// begin uc_nation := nation_nature ;
24372: LD_ADDR_OWVAR 21
24376: PUSH
24377: LD_INT 0
24379: ST_TO_ADDR
// uc_side := 0 ;
24380: LD_ADDR_OWVAR 20
24384: PUSH
24385: LD_INT 0
24387: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24388: LD_ADDR_OWVAR 29
24392: PUSH
24393: LD_INT 12
24395: PUSH
24396: LD_INT 12
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: ST_TO_ADDR
// hc_agressivity := 20 ;
24403: LD_ADDR_OWVAR 35
24407: PUSH
24408: LD_INT 20
24410: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24411: LD_ADDR_OWVAR 28
24415: PUSH
24416: LD_INT 17
24418: ST_TO_ADDR
// hc_gallery :=  ;
24419: LD_ADDR_OWVAR 33
24423: PUSH
24424: LD_STRING 
24426: ST_TO_ADDR
// hc_name :=  ;
24427: LD_ADDR_OWVAR 26
24431: PUSH
24432: LD_STRING 
24434: ST_TO_ADDR
// un := CreateHuman ;
24435: LD_ADDR_VAR 0 2
24439: PUSH
24440: CALL_OW 44
24444: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24445: LD_VAR 0 2
24449: PPUSH
24450: LD_INT 1
24452: PPUSH
24453: CALL_OW 51
// tmp := tmp ^ un ;
24457: LD_ADDR_VAR 0 3
24461: PUSH
24462: LD_VAR 0 3
24466: PUSH
24467: LD_VAR 0 2
24471: ADD
24472: ST_TO_ADDR
// end ;
24473: GO 24369
24475: POP
24476: POP
// repeat wait ( 0 0$1 ) ;
24477: LD_INT 35
24479: PPUSH
24480: CALL_OW 67
// for un in tmp do
24484: LD_ADDR_VAR 0 2
24488: PUSH
24489: LD_VAR 0 3
24493: PUSH
24494: FOR_IN
24495: IFFALSE 24569
// begin if IsDead ( un ) then
24497: LD_VAR 0 2
24501: PPUSH
24502: CALL_OW 301
24506: IFFALSE 24526
// begin tmp := tmp diff un ;
24508: LD_ADDR_VAR 0 3
24512: PUSH
24513: LD_VAR 0 3
24517: PUSH
24518: LD_VAR 0 2
24522: DIFF
24523: ST_TO_ADDR
// continue ;
24524: GO 24494
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24526: LD_VAR 0 2
24530: PPUSH
24531: LD_INT 3
24533: PUSH
24534: LD_INT 22
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PPUSH
24548: CALL_OW 69
24552: PPUSH
24553: LD_VAR 0 2
24557: PPUSH
24558: CALL_OW 74
24562: PPUSH
24563: CALL_OW 115
// end ;
24567: GO 24494
24569: POP
24570: POP
// until not tmp ;
24571: LD_VAR 0 3
24575: NOT
24576: IFFALSE 24477
// end ;
24578: PPOPN 3
24580: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24581: LD_EXP 53
24585: PUSH
24586: LD_EXP 78
24590: AND
24591: IFFALSE 24645
24593: GO 24595
24595: DISABLE
// begin ToLua ( displayTroll(); ) ;
24596: LD_STRING displayTroll();
24598: PPUSH
24599: CALL_OW 559
// wait ( 3 3$00 ) ;
24603: LD_INT 6300
24605: PPUSH
24606: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24610: LD_STRING hideTroll();
24612: PPUSH
24613: CALL_OW 559
// wait ( 1 1$00 ) ;
24617: LD_INT 2100
24619: PPUSH
24620: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24624: LD_STRING displayTroll();
24626: PPUSH
24627: CALL_OW 559
// wait ( 1 1$00 ) ;
24631: LD_INT 2100
24633: PPUSH
24634: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24638: LD_STRING hideTroll();
24640: PPUSH
24641: CALL_OW 559
// end ;
24645: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24646: LD_EXP 53
24650: PUSH
24651: LD_EXP 79
24655: AND
24656: IFFALSE 24719
24658: GO 24660
24660: DISABLE
24661: LD_INT 0
24663: PPUSH
// begin p := 0 ;
24664: LD_ADDR_VAR 0 1
24668: PUSH
24669: LD_INT 0
24671: ST_TO_ADDR
// repeat game_speed := 1 ;
24672: LD_ADDR_OWVAR 65
24676: PUSH
24677: LD_INT 1
24679: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24680: LD_INT 35
24682: PPUSH
24683: CALL_OW 67
// p := p + 1 ;
24687: LD_ADDR_VAR 0 1
24691: PUSH
24692: LD_VAR 0 1
24696: PUSH
24697: LD_INT 1
24699: PLUS
24700: ST_TO_ADDR
// until p >= 60 ;
24701: LD_VAR 0 1
24705: PUSH
24706: LD_INT 60
24708: GREATEREQUAL
24709: IFFALSE 24672
// game_speed := 4 ;
24711: LD_ADDR_OWVAR 65
24715: PUSH
24716: LD_INT 4
24718: ST_TO_ADDR
// end ;
24719: PPOPN 1
24721: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24722: LD_EXP 53
24726: PUSH
24727: LD_EXP 80
24731: AND
24732: IFFALSE 24878
24734: GO 24736
24736: DISABLE
24737: LD_INT 0
24739: PPUSH
24740: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24741: LD_ADDR_VAR 0 1
24745: PUSH
24746: LD_INT 22
24748: PUSH
24749: LD_OWVAR 2
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 2
24760: PUSH
24761: LD_INT 30
24763: PUSH
24764: LD_INT 0
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 30
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: LIST
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PPUSH
24790: CALL_OW 69
24794: ST_TO_ADDR
// if not depot then
24795: LD_VAR 0 1
24799: NOT
24800: IFFALSE 24804
// exit ;
24802: GO 24878
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24804: LD_ADDR_VAR 0 2
24808: PUSH
24809: LD_VAR 0 1
24813: PUSH
24814: LD_INT 1
24816: PPUSH
24817: LD_VAR 0 1
24821: PPUSH
24822: CALL_OW 12
24826: ARRAY
24827: PPUSH
24828: CALL_OW 274
24832: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24833: LD_VAR 0 2
24837: PPUSH
24838: LD_INT 1
24840: PPUSH
24841: LD_INT 0
24843: PPUSH
24844: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24848: LD_VAR 0 2
24852: PPUSH
24853: LD_INT 2
24855: PPUSH
24856: LD_INT 0
24858: PPUSH
24859: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24863: LD_VAR 0 2
24867: PPUSH
24868: LD_INT 3
24870: PPUSH
24871: LD_INT 0
24873: PPUSH
24874: CALL_OW 277
// end ;
24878: PPOPN 2
24880: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24881: LD_EXP 53
24885: PUSH
24886: LD_EXP 81
24890: AND
24891: IFFALSE 24988
24893: GO 24895
24895: DISABLE
24896: LD_INT 0
24898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24899: LD_ADDR_VAR 0 1
24903: PUSH
24904: LD_INT 22
24906: PUSH
24907: LD_OWVAR 2
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 21
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 3
24928: PUSH
24929: LD_INT 23
24931: PUSH
24932: LD_INT 0
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: LIST
24947: PPUSH
24948: CALL_OW 69
24952: ST_TO_ADDR
// if not tmp then
24953: LD_VAR 0 1
24957: NOT
24958: IFFALSE 24962
// exit ;
24960: GO 24988
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24962: LD_VAR 0 1
24966: PUSH
24967: LD_INT 1
24969: PPUSH
24970: LD_VAR 0 1
24974: PPUSH
24975: CALL_OW 12
24979: ARRAY
24980: PPUSH
24981: LD_INT 200
24983: PPUSH
24984: CALL_OW 234
// end ;
24988: PPOPN 1
24990: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24991: LD_EXP 53
24995: PUSH
24996: LD_EXP 82
25000: AND
25001: IFFALSE 25080
25003: GO 25005
25005: DISABLE
25006: LD_INT 0
25008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25009: LD_ADDR_VAR 0 1
25013: PUSH
25014: LD_INT 22
25016: PUSH
25017: LD_OWVAR 2
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 21
25028: PUSH
25029: LD_INT 2
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PPUSH
25040: CALL_OW 69
25044: ST_TO_ADDR
// if not tmp then
25045: LD_VAR 0 1
25049: NOT
25050: IFFALSE 25054
// exit ;
25052: GO 25080
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25054: LD_VAR 0 1
25058: PUSH
25059: LD_INT 1
25061: PPUSH
25062: LD_VAR 0 1
25066: PPUSH
25067: CALL_OW 12
25071: ARRAY
25072: PPUSH
25073: LD_INT 60
25075: PPUSH
25076: CALL_OW 234
// end ;
25080: PPOPN 1
25082: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25083: LD_EXP 53
25087: PUSH
25088: LD_EXP 83
25092: AND
25093: IFFALSE 25192
25095: GO 25097
25097: DISABLE
25098: LD_INT 0
25100: PPUSH
25101: PPUSH
// begin enable ;
25102: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25103: LD_ADDR_VAR 0 1
25107: PUSH
25108: LD_INT 22
25110: PUSH
25111: LD_OWVAR 2
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 61
25122: PUSH
25123: EMPTY
25124: LIST
25125: PUSH
25126: LD_INT 33
25128: PUSH
25129: LD_INT 2
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: LIST
25140: PPUSH
25141: CALL_OW 69
25145: ST_TO_ADDR
// if not tmp then
25146: LD_VAR 0 1
25150: NOT
25151: IFFALSE 25155
// exit ;
25153: GO 25192
// for i in tmp do
25155: LD_ADDR_VAR 0 2
25159: PUSH
25160: LD_VAR 0 1
25164: PUSH
25165: FOR_IN
25166: IFFALSE 25190
// if IsControledBy ( i ) then
25168: LD_VAR 0 2
25172: PPUSH
25173: CALL_OW 312
25177: IFFALSE 25188
// ComUnlink ( i ) ;
25179: LD_VAR 0 2
25183: PPUSH
25184: CALL_OW 136
25188: GO 25165
25190: POP
25191: POP
// end ;
25192: PPOPN 2
25194: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25195: LD_EXP 53
25199: PUSH
25200: LD_EXP 84
25204: AND
25205: IFFALSE 25345
25207: GO 25209
25209: DISABLE
25210: LD_INT 0
25212: PPUSH
25213: PPUSH
// begin ToLua ( displayPowell(); ) ;
25214: LD_STRING displayPowell();
25216: PPUSH
25217: CALL_OW 559
// uc_side := 0 ;
25221: LD_ADDR_OWVAR 20
25225: PUSH
25226: LD_INT 0
25228: ST_TO_ADDR
// uc_nation := 2 ;
25229: LD_ADDR_OWVAR 21
25233: PUSH
25234: LD_INT 2
25236: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25237: LD_ADDR_OWVAR 37
25241: PUSH
25242: LD_INT 14
25244: ST_TO_ADDR
// vc_engine := engine_siberite ;
25245: LD_ADDR_OWVAR 39
25249: PUSH
25250: LD_INT 3
25252: ST_TO_ADDR
// vc_control := control_apeman ;
25253: LD_ADDR_OWVAR 38
25257: PUSH
25258: LD_INT 5
25260: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25261: LD_ADDR_OWVAR 40
25265: PUSH
25266: LD_INT 29
25268: ST_TO_ADDR
// un := CreateVehicle ;
25269: LD_ADDR_VAR 0 2
25273: PUSH
25274: CALL_OW 45
25278: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25279: LD_VAR 0 2
25283: PPUSH
25284: LD_INT 1
25286: PPUSH
25287: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25291: LD_INT 35
25293: PPUSH
25294: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25298: LD_VAR 0 2
25302: PPUSH
25303: LD_INT 22
25305: PUSH
25306: LD_OWVAR 2
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PPUSH
25315: CALL_OW 69
25319: PPUSH
25320: LD_VAR 0 2
25324: PPUSH
25325: CALL_OW 74
25329: PPUSH
25330: CALL_OW 115
// until IsDead ( un ) ;
25334: LD_VAR 0 2
25338: PPUSH
25339: CALL_OW 301
25343: IFFALSE 25291
// end ;
25345: PPOPN 2
25347: END
// every 0 0$1 trigger StreamModeActive and sStu do
25348: LD_EXP 53
25352: PUSH
25353: LD_EXP 92
25357: AND
25358: IFFALSE 25374
25360: GO 25362
25362: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25363: LD_STRING displayStucuk();
25365: PPUSH
25366: CALL_OW 559
// ResetFog ;
25370: CALL_OW 335
// end ;
25374: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25375: LD_EXP 53
25379: PUSH
25380: LD_EXP 85
25384: AND
25385: IFFALSE 25526
25387: GO 25389
25389: DISABLE
25390: LD_INT 0
25392: PPUSH
25393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25394: LD_ADDR_VAR 0 2
25398: PUSH
25399: LD_INT 22
25401: PUSH
25402: LD_OWVAR 2
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 21
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PPUSH
25425: CALL_OW 69
25429: ST_TO_ADDR
// if not tmp then
25430: LD_VAR 0 2
25434: NOT
25435: IFFALSE 25439
// exit ;
25437: GO 25526
// un := tmp [ rand ( 1 , tmp ) ] ;
25439: LD_ADDR_VAR 0 1
25443: PUSH
25444: LD_VAR 0 2
25448: PUSH
25449: LD_INT 1
25451: PPUSH
25452: LD_VAR 0 2
25456: PPUSH
25457: CALL_OW 12
25461: ARRAY
25462: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25463: LD_VAR 0 1
25467: PPUSH
25468: LD_INT 0
25470: PPUSH
25471: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25475: LD_VAR 0 1
25479: PPUSH
25480: LD_OWVAR 3
25484: PUSH
25485: LD_VAR 0 1
25489: DIFF
25490: PPUSH
25491: LD_VAR 0 1
25495: PPUSH
25496: CALL_OW 74
25500: PPUSH
25501: CALL_OW 115
// wait ( 0 0$20 ) ;
25505: LD_INT 700
25507: PPUSH
25508: CALL_OW 67
// SetSide ( un , your_side ) ;
25512: LD_VAR 0 1
25516: PPUSH
25517: LD_OWVAR 2
25521: PPUSH
25522: CALL_OW 235
// end ;
25526: PPOPN 2
25528: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25529: LD_EXP 53
25533: PUSH
25534: LD_EXP 86
25538: AND
25539: IFFALSE 25645
25541: GO 25543
25543: DISABLE
25544: LD_INT 0
25546: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25547: LD_ADDR_VAR 0 1
25551: PUSH
25552: LD_INT 22
25554: PUSH
25555: LD_OWVAR 2
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 2
25566: PUSH
25567: LD_INT 30
25569: PUSH
25570: LD_INT 0
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 30
25579: PUSH
25580: LD_INT 1
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: LIST
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PPUSH
25596: CALL_OW 69
25600: ST_TO_ADDR
// if not depot then
25601: LD_VAR 0 1
25605: NOT
25606: IFFALSE 25610
// exit ;
25608: GO 25645
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25610: LD_VAR 0 1
25614: PUSH
25615: LD_INT 1
25617: ARRAY
25618: PPUSH
25619: CALL_OW 250
25623: PPUSH
25624: LD_VAR 0 1
25628: PUSH
25629: LD_INT 1
25631: ARRAY
25632: PPUSH
25633: CALL_OW 251
25637: PPUSH
25638: LD_INT 70
25640: PPUSH
25641: CALL_OW 495
// end ;
25645: PPOPN 1
25647: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25648: LD_EXP 53
25652: PUSH
25653: LD_EXP 87
25657: AND
25658: IFFALSE 25869
25660: GO 25662
25662: DISABLE
25663: LD_INT 0
25665: PPUSH
25666: PPUSH
25667: PPUSH
25668: PPUSH
25669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25670: LD_ADDR_VAR 0 5
25674: PUSH
25675: LD_INT 22
25677: PUSH
25678: LD_OWVAR 2
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 21
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PPUSH
25701: CALL_OW 69
25705: ST_TO_ADDR
// if not tmp then
25706: LD_VAR 0 5
25710: NOT
25711: IFFALSE 25715
// exit ;
25713: GO 25869
// for i in tmp do
25715: LD_ADDR_VAR 0 1
25719: PUSH
25720: LD_VAR 0 5
25724: PUSH
25725: FOR_IN
25726: IFFALSE 25867
// begin d := rand ( 0 , 5 ) ;
25728: LD_ADDR_VAR 0 4
25732: PUSH
25733: LD_INT 0
25735: PPUSH
25736: LD_INT 5
25738: PPUSH
25739: CALL_OW 12
25743: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25744: LD_ADDR_VAR 0 2
25748: PUSH
25749: LD_VAR 0 1
25753: PPUSH
25754: CALL_OW 250
25758: PPUSH
25759: LD_VAR 0 4
25763: PPUSH
25764: LD_INT 3
25766: PPUSH
25767: LD_INT 12
25769: PPUSH
25770: CALL_OW 12
25774: PPUSH
25775: CALL_OW 272
25779: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25780: LD_ADDR_VAR 0 3
25784: PUSH
25785: LD_VAR 0 1
25789: PPUSH
25790: CALL_OW 251
25794: PPUSH
25795: LD_VAR 0 4
25799: PPUSH
25800: LD_INT 3
25802: PPUSH
25803: LD_INT 12
25805: PPUSH
25806: CALL_OW 12
25810: PPUSH
25811: CALL_OW 273
25815: ST_TO_ADDR
// if ValidHex ( x , y ) then
25816: LD_VAR 0 2
25820: PPUSH
25821: LD_VAR 0 3
25825: PPUSH
25826: CALL_OW 488
25830: IFFALSE 25865
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25832: LD_VAR 0 1
25836: PPUSH
25837: LD_VAR 0 2
25841: PPUSH
25842: LD_VAR 0 3
25846: PPUSH
25847: LD_INT 3
25849: PPUSH
25850: LD_INT 6
25852: PPUSH
25853: CALL_OW 12
25857: PPUSH
25858: LD_INT 1
25860: PPUSH
25861: CALL_OW 483
// end ;
25865: GO 25725
25867: POP
25868: POP
// end ;
25869: PPOPN 5
25871: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25872: LD_EXP 53
25876: PUSH
25877: LD_EXP 88
25881: AND
25882: IFFALSE 25976
25884: GO 25886
25886: DISABLE
25887: LD_INT 0
25889: PPUSH
25890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25891: LD_ADDR_VAR 0 2
25895: PUSH
25896: LD_INT 22
25898: PUSH
25899: LD_OWVAR 2
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 32
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 21
25920: PUSH
25921: LD_INT 2
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: LIST
25932: PPUSH
25933: CALL_OW 69
25937: ST_TO_ADDR
// if not tmp then
25938: LD_VAR 0 2
25942: NOT
25943: IFFALSE 25947
// exit ;
25945: GO 25976
// for i in tmp do
25947: LD_ADDR_VAR 0 1
25951: PUSH
25952: LD_VAR 0 2
25956: PUSH
25957: FOR_IN
25958: IFFALSE 25974
// SetFuel ( i , 0 ) ;
25960: LD_VAR 0 1
25964: PPUSH
25965: LD_INT 0
25967: PPUSH
25968: CALL_OW 240
25972: GO 25957
25974: POP
25975: POP
// end ;
25976: PPOPN 2
25978: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25979: LD_EXP 53
25983: PUSH
25984: LD_EXP 89
25988: AND
25989: IFFALSE 26055
25991: GO 25993
25993: DISABLE
25994: LD_INT 0
25996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25997: LD_ADDR_VAR 0 1
26001: PUSH
26002: LD_INT 22
26004: PUSH
26005: LD_OWVAR 2
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 30
26016: PUSH
26017: LD_INT 29
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PPUSH
26028: CALL_OW 69
26032: ST_TO_ADDR
// if not tmp then
26033: LD_VAR 0 1
26037: NOT
26038: IFFALSE 26042
// exit ;
26040: GO 26055
// DestroyUnit ( tmp [ 1 ] ) ;
26042: LD_VAR 0 1
26046: PUSH
26047: LD_INT 1
26049: ARRAY
26050: PPUSH
26051: CALL_OW 65
// end ;
26055: PPOPN 1
26057: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26058: LD_EXP 53
26062: PUSH
26063: LD_EXP 91
26067: AND
26068: IFFALSE 26197
26070: GO 26072
26072: DISABLE
26073: LD_INT 0
26075: PPUSH
// begin uc_side := 0 ;
26076: LD_ADDR_OWVAR 20
26080: PUSH
26081: LD_INT 0
26083: ST_TO_ADDR
// uc_nation := nation_arabian ;
26084: LD_ADDR_OWVAR 21
26088: PUSH
26089: LD_INT 2
26091: ST_TO_ADDR
// hc_gallery :=  ;
26092: LD_ADDR_OWVAR 33
26096: PUSH
26097: LD_STRING 
26099: ST_TO_ADDR
// hc_name :=  ;
26100: LD_ADDR_OWVAR 26
26104: PUSH
26105: LD_STRING 
26107: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26108: LD_INT 1
26110: PPUSH
26111: LD_INT 11
26113: PPUSH
26114: LD_INT 10
26116: PPUSH
26117: CALL_OW 380
// un := CreateHuman ;
26121: LD_ADDR_VAR 0 1
26125: PUSH
26126: CALL_OW 44
26130: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26131: LD_VAR 0 1
26135: PPUSH
26136: LD_INT 1
26138: PPUSH
26139: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26143: LD_INT 35
26145: PPUSH
26146: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26150: LD_VAR 0 1
26154: PPUSH
26155: LD_INT 22
26157: PUSH
26158: LD_OWVAR 2
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PPUSH
26167: CALL_OW 69
26171: PPUSH
26172: LD_VAR 0 1
26176: PPUSH
26177: CALL_OW 74
26181: PPUSH
26182: CALL_OW 115
// until IsDead ( un ) ;
26186: LD_VAR 0 1
26190: PPUSH
26191: CALL_OW 301
26195: IFFALSE 26143
// end ;
26197: PPOPN 1
26199: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26200: LD_EXP 53
26204: PUSH
26205: LD_EXP 93
26209: AND
26210: IFFALSE 26222
26212: GO 26214
26214: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26215: LD_STRING earthquake(getX(game), 0, 32)
26217: PPUSH
26218: CALL_OW 559
26222: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26223: LD_EXP 53
26227: PUSH
26228: LD_EXP 94
26232: AND
26233: IFFALSE 26324
26235: GO 26237
26237: DISABLE
26238: LD_INT 0
26240: PPUSH
// begin enable ;
26241: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26242: LD_ADDR_VAR 0 1
26246: PUSH
26247: LD_INT 22
26249: PUSH
26250: LD_OWVAR 2
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 21
26261: PUSH
26262: LD_INT 2
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 33
26271: PUSH
26272: LD_INT 3
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: LIST
26283: PPUSH
26284: CALL_OW 69
26288: ST_TO_ADDR
// if not tmp then
26289: LD_VAR 0 1
26293: NOT
26294: IFFALSE 26298
// exit ;
26296: GO 26324
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26298: LD_VAR 0 1
26302: PUSH
26303: LD_INT 1
26305: PPUSH
26306: LD_VAR 0 1
26310: PPUSH
26311: CALL_OW 12
26315: ARRAY
26316: PPUSH
26317: LD_INT 1
26319: PPUSH
26320: CALL_OW 234
// end ;
26324: PPOPN 1
26326: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26327: LD_EXP 53
26331: PUSH
26332: LD_EXP 95
26336: AND
26337: IFFALSE 26478
26339: GO 26341
26341: DISABLE
26342: LD_INT 0
26344: PPUSH
26345: PPUSH
26346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26347: LD_ADDR_VAR 0 3
26351: PUSH
26352: LD_INT 22
26354: PUSH
26355: LD_OWVAR 2
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 25
26366: PUSH
26367: LD_INT 1
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PPUSH
26378: CALL_OW 69
26382: ST_TO_ADDR
// if not tmp then
26383: LD_VAR 0 3
26387: NOT
26388: IFFALSE 26392
// exit ;
26390: GO 26478
// un := tmp [ rand ( 1 , tmp ) ] ;
26392: LD_ADDR_VAR 0 2
26396: PUSH
26397: LD_VAR 0 3
26401: PUSH
26402: LD_INT 1
26404: PPUSH
26405: LD_VAR 0 3
26409: PPUSH
26410: CALL_OW 12
26414: ARRAY
26415: ST_TO_ADDR
// if Crawls ( un ) then
26416: LD_VAR 0 2
26420: PPUSH
26421: CALL_OW 318
26425: IFFALSE 26436
// ComWalk ( un ) ;
26427: LD_VAR 0 2
26431: PPUSH
26432: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26436: LD_VAR 0 2
26440: PPUSH
26441: LD_INT 9
26443: PPUSH
26444: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26448: LD_INT 28
26450: PPUSH
26451: LD_OWVAR 2
26455: PPUSH
26456: LD_INT 2
26458: PPUSH
26459: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26463: LD_INT 29
26465: PPUSH
26466: LD_OWVAR 2
26470: PPUSH
26471: LD_INT 2
26473: PPUSH
26474: CALL_OW 322
// end ;
26478: PPOPN 3
26480: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26481: LD_EXP 53
26485: PUSH
26486: LD_EXP 96
26490: AND
26491: IFFALSE 26602
26493: GO 26495
26495: DISABLE
26496: LD_INT 0
26498: PPUSH
26499: PPUSH
26500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26501: LD_ADDR_VAR 0 3
26505: PUSH
26506: LD_INT 22
26508: PUSH
26509: LD_OWVAR 2
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 25
26520: PUSH
26521: LD_INT 1
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PPUSH
26532: CALL_OW 69
26536: ST_TO_ADDR
// if not tmp then
26537: LD_VAR 0 3
26541: NOT
26542: IFFALSE 26546
// exit ;
26544: GO 26602
// un := tmp [ rand ( 1 , tmp ) ] ;
26546: LD_ADDR_VAR 0 2
26550: PUSH
26551: LD_VAR 0 3
26555: PUSH
26556: LD_INT 1
26558: PPUSH
26559: LD_VAR 0 3
26563: PPUSH
26564: CALL_OW 12
26568: ARRAY
26569: ST_TO_ADDR
// if Crawls ( un ) then
26570: LD_VAR 0 2
26574: PPUSH
26575: CALL_OW 318
26579: IFFALSE 26590
// ComWalk ( un ) ;
26581: LD_VAR 0 2
26585: PPUSH
26586: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26590: LD_VAR 0 2
26594: PPUSH
26595: LD_INT 8
26597: PPUSH
26598: CALL_OW 336
// end ;
26602: PPOPN 3
26604: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26605: LD_EXP 53
26609: PUSH
26610: LD_EXP 97
26614: AND
26615: IFFALSE 26759
26617: GO 26619
26619: DISABLE
26620: LD_INT 0
26622: PPUSH
26623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26624: LD_ADDR_VAR 0 2
26628: PUSH
26629: LD_INT 22
26631: PUSH
26632: LD_OWVAR 2
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 21
26643: PUSH
26644: LD_INT 2
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 2
26653: PUSH
26654: LD_INT 34
26656: PUSH
26657: LD_INT 12
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 34
26666: PUSH
26667: LD_INT 51
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 34
26676: PUSH
26677: LD_INT 32
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: LIST
26694: PPUSH
26695: CALL_OW 69
26699: ST_TO_ADDR
// if not tmp then
26700: LD_VAR 0 2
26704: NOT
26705: IFFALSE 26709
// exit ;
26707: GO 26759
// for i in tmp do
26709: LD_ADDR_VAR 0 1
26713: PUSH
26714: LD_VAR 0 2
26718: PUSH
26719: FOR_IN
26720: IFFALSE 26757
// if GetCargo ( i , mat_artifact ) = 0 then
26722: LD_VAR 0 1
26726: PPUSH
26727: LD_INT 4
26729: PPUSH
26730: CALL_OW 289
26734: PUSH
26735: LD_INT 0
26737: EQUAL
26738: IFFALSE 26755
// SetCargo ( i , mat_siberit , 100 ) ;
26740: LD_VAR 0 1
26744: PPUSH
26745: LD_INT 3
26747: PPUSH
26748: LD_INT 100
26750: PPUSH
26751: CALL_OW 290
26755: GO 26719
26757: POP
26758: POP
// end ;
26759: PPOPN 2
26761: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26762: LD_EXP 53
26766: PUSH
26767: LD_EXP 98
26771: AND
26772: IFFALSE 26955
26774: GO 26776
26776: DISABLE
26777: LD_INT 0
26779: PPUSH
26780: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26781: LD_ADDR_VAR 0 2
26785: PUSH
26786: LD_INT 22
26788: PUSH
26789: LD_OWVAR 2
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PPUSH
26798: CALL_OW 69
26802: ST_TO_ADDR
// if not tmp then
26803: LD_VAR 0 2
26807: NOT
26808: IFFALSE 26812
// exit ;
26810: GO 26955
// for i := 1 to 2 do
26812: LD_ADDR_VAR 0 1
26816: PUSH
26817: DOUBLE
26818: LD_INT 1
26820: DEC
26821: ST_TO_ADDR
26822: LD_INT 2
26824: PUSH
26825: FOR_TO
26826: IFFALSE 26953
// begin uc_side := your_side ;
26828: LD_ADDR_OWVAR 20
26832: PUSH
26833: LD_OWVAR 2
26837: ST_TO_ADDR
// uc_nation := nation_american ;
26838: LD_ADDR_OWVAR 21
26842: PUSH
26843: LD_INT 1
26845: ST_TO_ADDR
// vc_chassis := us_morphling ;
26846: LD_ADDR_OWVAR 37
26850: PUSH
26851: LD_INT 5
26853: ST_TO_ADDR
// vc_engine := engine_siberite ;
26854: LD_ADDR_OWVAR 39
26858: PUSH
26859: LD_INT 3
26861: ST_TO_ADDR
// vc_control := control_computer ;
26862: LD_ADDR_OWVAR 38
26866: PUSH
26867: LD_INT 3
26869: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26870: LD_ADDR_OWVAR 40
26874: PUSH
26875: LD_INT 10
26877: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26878: LD_VAR 0 2
26882: PUSH
26883: LD_INT 1
26885: ARRAY
26886: PPUSH
26887: CALL_OW 310
26891: NOT
26892: IFFALSE 26939
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26894: CALL_OW 45
26898: PPUSH
26899: LD_VAR 0 2
26903: PUSH
26904: LD_INT 1
26906: ARRAY
26907: PPUSH
26908: CALL_OW 250
26912: PPUSH
26913: LD_VAR 0 2
26917: PUSH
26918: LD_INT 1
26920: ARRAY
26921: PPUSH
26922: CALL_OW 251
26926: PPUSH
26927: LD_INT 12
26929: PPUSH
26930: LD_INT 1
26932: PPUSH
26933: CALL_OW 50
26937: GO 26951
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26939: CALL_OW 45
26943: PPUSH
26944: LD_INT 1
26946: PPUSH
26947: CALL_OW 51
// end ;
26951: GO 26825
26953: POP
26954: POP
// end ;
26955: PPOPN 2
26957: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26958: LD_EXP 53
26962: PUSH
26963: LD_EXP 99
26967: AND
26968: IFFALSE 27190
26970: GO 26972
26972: DISABLE
26973: LD_INT 0
26975: PPUSH
26976: PPUSH
26977: PPUSH
26978: PPUSH
26979: PPUSH
26980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26981: LD_ADDR_VAR 0 6
26985: PUSH
26986: LD_INT 22
26988: PUSH
26989: LD_OWVAR 2
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 21
27000: PUSH
27001: LD_INT 1
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 3
27010: PUSH
27011: LD_INT 23
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: LIST
27029: PPUSH
27030: CALL_OW 69
27034: ST_TO_ADDR
// if not tmp then
27035: LD_VAR 0 6
27039: NOT
27040: IFFALSE 27044
// exit ;
27042: GO 27190
// s1 := rand ( 1 , 4 ) ;
27044: LD_ADDR_VAR 0 2
27048: PUSH
27049: LD_INT 1
27051: PPUSH
27052: LD_INT 4
27054: PPUSH
27055: CALL_OW 12
27059: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27060: LD_ADDR_VAR 0 4
27064: PUSH
27065: LD_VAR 0 6
27069: PUSH
27070: LD_INT 1
27072: ARRAY
27073: PPUSH
27074: LD_VAR 0 2
27078: PPUSH
27079: CALL_OW 259
27083: ST_TO_ADDR
// if s1 = 1 then
27084: LD_VAR 0 2
27088: PUSH
27089: LD_INT 1
27091: EQUAL
27092: IFFALSE 27112
// s2 := rand ( 2 , 4 ) else
27094: LD_ADDR_VAR 0 3
27098: PUSH
27099: LD_INT 2
27101: PPUSH
27102: LD_INT 4
27104: PPUSH
27105: CALL_OW 12
27109: ST_TO_ADDR
27110: GO 27120
// s2 := 1 ;
27112: LD_ADDR_VAR 0 3
27116: PUSH
27117: LD_INT 1
27119: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27120: LD_ADDR_VAR 0 5
27124: PUSH
27125: LD_VAR 0 6
27129: PUSH
27130: LD_INT 1
27132: ARRAY
27133: PPUSH
27134: LD_VAR 0 3
27138: PPUSH
27139: CALL_OW 259
27143: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27144: LD_VAR 0 6
27148: PUSH
27149: LD_INT 1
27151: ARRAY
27152: PPUSH
27153: LD_VAR 0 2
27157: PPUSH
27158: LD_VAR 0 5
27162: PPUSH
27163: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27167: LD_VAR 0 6
27171: PUSH
27172: LD_INT 1
27174: ARRAY
27175: PPUSH
27176: LD_VAR 0 3
27180: PPUSH
27181: LD_VAR 0 4
27185: PPUSH
27186: CALL_OW 237
// end ;
27190: PPOPN 6
27192: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27193: LD_EXP 53
27197: PUSH
27198: LD_EXP 100
27202: AND
27203: IFFALSE 27282
27205: GO 27207
27207: DISABLE
27208: LD_INT 0
27210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27211: LD_ADDR_VAR 0 1
27215: PUSH
27216: LD_INT 22
27218: PUSH
27219: LD_OWVAR 2
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 30
27230: PUSH
27231: LD_INT 3
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PPUSH
27242: CALL_OW 69
27246: ST_TO_ADDR
// if not tmp then
27247: LD_VAR 0 1
27251: NOT
27252: IFFALSE 27256
// exit ;
27254: GO 27282
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27256: LD_VAR 0 1
27260: PUSH
27261: LD_INT 1
27263: PPUSH
27264: LD_VAR 0 1
27268: PPUSH
27269: CALL_OW 12
27273: ARRAY
27274: PPUSH
27275: LD_INT 1
27277: PPUSH
27278: CALL_OW 234
// end ;
27282: PPOPN 1
27284: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27285: LD_EXP 53
27289: PUSH
27290: LD_EXP 101
27294: AND
27295: IFFALSE 27407
27297: GO 27299
27299: DISABLE
27300: LD_INT 0
27302: PPUSH
27303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27304: LD_ADDR_VAR 0 2
27308: PUSH
27309: LD_INT 22
27311: PUSH
27312: LD_OWVAR 2
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: LD_INT 30
27326: PUSH
27327: LD_INT 27
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 30
27336: PUSH
27337: LD_INT 26
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 30
27346: PUSH
27347: LD_INT 28
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PPUSH
27364: CALL_OW 69
27368: ST_TO_ADDR
// if not tmp then
27369: LD_VAR 0 2
27373: NOT
27374: IFFALSE 27378
// exit ;
27376: GO 27407
// for i in tmp do
27378: LD_ADDR_VAR 0 1
27382: PUSH
27383: LD_VAR 0 2
27387: PUSH
27388: FOR_IN
27389: IFFALSE 27405
// SetLives ( i , 1 ) ;
27391: LD_VAR 0 1
27395: PPUSH
27396: LD_INT 1
27398: PPUSH
27399: CALL_OW 234
27403: GO 27388
27405: POP
27406: POP
// end ;
27407: PPOPN 2
27409: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27410: LD_EXP 53
27414: PUSH
27415: LD_EXP 102
27419: AND
27420: IFFALSE 27707
27422: GO 27424
27424: DISABLE
27425: LD_INT 0
27427: PPUSH
27428: PPUSH
27429: PPUSH
// begin i := rand ( 1 , 7 ) ;
27430: LD_ADDR_VAR 0 1
27434: PUSH
27435: LD_INT 1
27437: PPUSH
27438: LD_INT 7
27440: PPUSH
27441: CALL_OW 12
27445: ST_TO_ADDR
// case i of 1 :
27446: LD_VAR 0 1
27450: PUSH
27451: LD_INT 1
27453: DOUBLE
27454: EQUAL
27455: IFTRUE 27459
27457: GO 27469
27459: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27460: LD_STRING earthquake(getX(game), 0, 32)
27462: PPUSH
27463: CALL_OW 559
27467: GO 27707
27469: LD_INT 2
27471: DOUBLE
27472: EQUAL
27473: IFTRUE 27477
27475: GO 27491
27477: POP
// begin ToLua ( displayStucuk(); ) ;
27478: LD_STRING displayStucuk();
27480: PPUSH
27481: CALL_OW 559
// ResetFog ;
27485: CALL_OW 335
// end ; 3 :
27489: GO 27707
27491: LD_INT 3
27493: DOUBLE
27494: EQUAL
27495: IFTRUE 27499
27497: GO 27603
27499: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27500: LD_ADDR_VAR 0 2
27504: PUSH
27505: LD_INT 22
27507: PUSH
27508: LD_OWVAR 2
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 25
27519: PUSH
27520: LD_INT 1
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PPUSH
27531: CALL_OW 69
27535: ST_TO_ADDR
// if not tmp then
27536: LD_VAR 0 2
27540: NOT
27541: IFFALSE 27545
// exit ;
27543: GO 27707
// un := tmp [ rand ( 1 , tmp ) ] ;
27545: LD_ADDR_VAR 0 3
27549: PUSH
27550: LD_VAR 0 2
27554: PUSH
27555: LD_INT 1
27557: PPUSH
27558: LD_VAR 0 2
27562: PPUSH
27563: CALL_OW 12
27567: ARRAY
27568: ST_TO_ADDR
// if Crawls ( un ) then
27569: LD_VAR 0 3
27573: PPUSH
27574: CALL_OW 318
27578: IFFALSE 27589
// ComWalk ( un ) ;
27580: LD_VAR 0 3
27584: PPUSH
27585: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27589: LD_VAR 0 3
27593: PPUSH
27594: LD_INT 8
27596: PPUSH
27597: CALL_OW 336
// end ; 4 :
27601: GO 27707
27603: LD_INT 4
27605: DOUBLE
27606: EQUAL
27607: IFTRUE 27611
27609: GO 27685
27611: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27612: LD_ADDR_VAR 0 2
27616: PUSH
27617: LD_INT 22
27619: PUSH
27620: LD_OWVAR 2
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 30
27631: PUSH
27632: LD_INT 29
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PPUSH
27643: CALL_OW 69
27647: ST_TO_ADDR
// if not tmp then
27648: LD_VAR 0 2
27652: NOT
27653: IFFALSE 27657
// exit ;
27655: GO 27707
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27657: LD_VAR 0 2
27661: PUSH
27662: LD_INT 1
27664: ARRAY
27665: PPUSH
27666: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27670: LD_VAR 0 2
27674: PUSH
27675: LD_INT 1
27677: ARRAY
27678: PPUSH
27679: CALL_OW 65
// end ; 5 .. 7 :
27683: GO 27707
27685: LD_INT 5
27687: DOUBLE
27688: GREATEREQUAL
27689: IFFALSE 27697
27691: LD_INT 7
27693: DOUBLE
27694: LESSEQUAL
27695: IFTRUE 27699
27697: GO 27706
27699: POP
// StreamSibBomb ; end ;
27700: CALL 23944 0 0
27704: GO 27707
27706: POP
// end ;
27707: PPOPN 3
27709: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27710: LD_EXP 53
27714: PUSH
27715: LD_EXP 103
27719: AND
27720: IFFALSE 27876
27722: GO 27724
27724: DISABLE
27725: LD_INT 0
27727: PPUSH
27728: PPUSH
27729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27730: LD_ADDR_VAR 0 2
27734: PUSH
27735: LD_INT 81
27737: PUSH
27738: LD_OWVAR 2
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 2
27749: PUSH
27750: LD_INT 21
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 21
27762: PUSH
27763: LD_INT 2
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: LIST
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PPUSH
27779: CALL_OW 69
27783: ST_TO_ADDR
// if not tmp then
27784: LD_VAR 0 2
27788: NOT
27789: IFFALSE 27793
// exit ;
27791: GO 27876
// p := 0 ;
27793: LD_ADDR_VAR 0 3
27797: PUSH
27798: LD_INT 0
27800: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27801: LD_INT 35
27803: PPUSH
27804: CALL_OW 67
// p := p + 1 ;
27808: LD_ADDR_VAR 0 3
27812: PUSH
27813: LD_VAR 0 3
27817: PUSH
27818: LD_INT 1
27820: PLUS
27821: ST_TO_ADDR
// for i in tmp do
27822: LD_ADDR_VAR 0 1
27826: PUSH
27827: LD_VAR 0 2
27831: PUSH
27832: FOR_IN
27833: IFFALSE 27864
// if GetLives ( i ) < 1000 then
27835: LD_VAR 0 1
27839: PPUSH
27840: CALL_OW 256
27844: PUSH
27845: LD_INT 1000
27847: LESS
27848: IFFALSE 27862
// SetLives ( i , 1000 ) ;
27850: LD_VAR 0 1
27854: PPUSH
27855: LD_INT 1000
27857: PPUSH
27858: CALL_OW 234
27862: GO 27832
27864: POP
27865: POP
// until p > 20 ;
27866: LD_VAR 0 3
27870: PUSH
27871: LD_INT 20
27873: GREATER
27874: IFFALSE 27801
// end ;
27876: PPOPN 3
27878: END
// every 0 0$1 trigger StreamModeActive and sTime do
27879: LD_EXP 53
27883: PUSH
27884: LD_EXP 104
27888: AND
27889: IFFALSE 27924
27891: GO 27893
27893: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27894: LD_INT 28
27896: PPUSH
27897: LD_OWVAR 2
27901: PPUSH
27902: LD_INT 2
27904: PPUSH
27905: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27909: LD_INT 30
27911: PPUSH
27912: LD_OWVAR 2
27916: PPUSH
27917: LD_INT 2
27919: PPUSH
27920: CALL_OW 322
// end ;
27924: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27925: LD_EXP 53
27929: PUSH
27930: LD_EXP 105
27934: AND
27935: IFFALSE 28056
27937: GO 27939
27939: DISABLE
27940: LD_INT 0
27942: PPUSH
27943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27944: LD_ADDR_VAR 0 2
27948: PUSH
27949: LD_INT 22
27951: PUSH
27952: LD_OWVAR 2
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 21
27963: PUSH
27964: LD_INT 1
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 3
27973: PUSH
27974: LD_INT 23
27976: PUSH
27977: LD_INT 0
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: LIST
27992: PPUSH
27993: CALL_OW 69
27997: ST_TO_ADDR
// if not tmp then
27998: LD_VAR 0 2
28002: NOT
28003: IFFALSE 28007
// exit ;
28005: GO 28056
// for i in tmp do
28007: LD_ADDR_VAR 0 1
28011: PUSH
28012: LD_VAR 0 2
28016: PUSH
28017: FOR_IN
28018: IFFALSE 28054
// begin if Crawls ( i ) then
28020: LD_VAR 0 1
28024: PPUSH
28025: CALL_OW 318
28029: IFFALSE 28040
// ComWalk ( i ) ;
28031: LD_VAR 0 1
28035: PPUSH
28036: CALL_OW 138
// SetClass ( i , 2 ) ;
28040: LD_VAR 0 1
28044: PPUSH
28045: LD_INT 2
28047: PPUSH
28048: CALL_OW 336
// end ;
28052: GO 28017
28054: POP
28055: POP
// end ;
28056: PPOPN 2
28058: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28059: LD_EXP 53
28063: PUSH
28064: LD_EXP 106
28068: AND
28069: IFFALSE 28357
28071: GO 28073
28073: DISABLE
28074: LD_INT 0
28076: PPUSH
28077: PPUSH
28078: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28079: LD_OWVAR 2
28083: PPUSH
28084: LD_INT 9
28086: PPUSH
28087: LD_INT 1
28089: PPUSH
28090: LD_INT 1
28092: PPUSH
28093: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28097: LD_INT 9
28099: PPUSH
28100: LD_OWVAR 2
28104: PPUSH
28105: CALL_OW 343
// uc_side := 9 ;
28109: LD_ADDR_OWVAR 20
28113: PUSH
28114: LD_INT 9
28116: ST_TO_ADDR
// uc_nation := 2 ;
28117: LD_ADDR_OWVAR 21
28121: PUSH
28122: LD_INT 2
28124: ST_TO_ADDR
// hc_name := Dark Warrior ;
28125: LD_ADDR_OWVAR 26
28129: PUSH
28130: LD_STRING Dark Warrior
28132: ST_TO_ADDR
// hc_gallery :=  ;
28133: LD_ADDR_OWVAR 33
28137: PUSH
28138: LD_STRING 
28140: ST_TO_ADDR
// hc_noskilllimit := true ;
28141: LD_ADDR_OWVAR 76
28145: PUSH
28146: LD_INT 1
28148: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28149: LD_ADDR_OWVAR 31
28153: PUSH
28154: LD_INT 30
28156: PUSH
28157: LD_INT 30
28159: PUSH
28160: LD_INT 30
28162: PUSH
28163: LD_INT 30
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: ST_TO_ADDR
// un := CreateHuman ;
28172: LD_ADDR_VAR 0 3
28176: PUSH
28177: CALL_OW 44
28181: ST_TO_ADDR
// hc_noskilllimit := false ;
28182: LD_ADDR_OWVAR 76
28186: PUSH
28187: LD_INT 0
28189: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28190: LD_VAR 0 3
28194: PPUSH
28195: LD_INT 1
28197: PPUSH
28198: CALL_OW 51
// ToLua ( playRanger() ) ;
28202: LD_STRING playRanger()
28204: PPUSH
28205: CALL_OW 559
// p := 0 ;
28209: LD_ADDR_VAR 0 2
28213: PUSH
28214: LD_INT 0
28216: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28217: LD_INT 35
28219: PPUSH
28220: CALL_OW 67
// p := p + 1 ;
28224: LD_ADDR_VAR 0 2
28228: PUSH
28229: LD_VAR 0 2
28233: PUSH
28234: LD_INT 1
28236: PLUS
28237: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28238: LD_VAR 0 3
28242: PPUSH
28243: CALL_OW 256
28247: PUSH
28248: LD_INT 1000
28250: LESS
28251: IFFALSE 28265
// SetLives ( un , 1000 ) ;
28253: LD_VAR 0 3
28257: PPUSH
28258: LD_INT 1000
28260: PPUSH
28261: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28265: LD_VAR 0 3
28269: PPUSH
28270: LD_INT 81
28272: PUSH
28273: LD_OWVAR 2
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 91
28284: PUSH
28285: LD_VAR 0 3
28289: PUSH
28290: LD_INT 30
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: LIST
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PPUSH
28302: CALL_OW 69
28306: PPUSH
28307: LD_VAR 0 3
28311: PPUSH
28312: CALL_OW 74
28316: PPUSH
28317: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28321: LD_VAR 0 2
28325: PUSH
28326: LD_INT 80
28328: GREATER
28329: PUSH
28330: LD_VAR 0 3
28334: PPUSH
28335: CALL_OW 301
28339: OR
28340: IFFALSE 28217
// if un then
28342: LD_VAR 0 3
28346: IFFALSE 28357
// RemoveUnit ( un ) ;
28348: LD_VAR 0 3
28352: PPUSH
28353: CALL_OW 64
// end ;
28357: PPOPN 3
28359: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28360: LD_EXP 107
28364: IFFALSE 28480
28366: GO 28368
28368: DISABLE
28369: LD_INT 0
28371: PPUSH
28372: PPUSH
28373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28374: LD_ADDR_VAR 0 2
28378: PUSH
28379: LD_INT 81
28381: PUSH
28382: LD_OWVAR 2
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 21
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PPUSH
28405: CALL_OW 69
28409: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28410: LD_STRING playComputer()
28412: PPUSH
28413: CALL_OW 559
// if not tmp then
28417: LD_VAR 0 2
28421: NOT
28422: IFFALSE 28426
// exit ;
28424: GO 28480
// for i in tmp do
28426: LD_ADDR_VAR 0 1
28430: PUSH
28431: LD_VAR 0 2
28435: PUSH
28436: FOR_IN
28437: IFFALSE 28478
// for j := 1 to 4 do
28439: LD_ADDR_VAR 0 3
28443: PUSH
28444: DOUBLE
28445: LD_INT 1
28447: DEC
28448: ST_TO_ADDR
28449: LD_INT 4
28451: PUSH
28452: FOR_TO
28453: IFFALSE 28474
// SetSkill ( i , j , 10 ) ;
28455: LD_VAR 0 1
28459: PPUSH
28460: LD_VAR 0 3
28464: PPUSH
28465: LD_INT 10
28467: PPUSH
28468: CALL_OW 237
28472: GO 28452
28474: POP
28475: POP
28476: GO 28436
28478: POP
28479: POP
// end ;
28480: PPOPN 3
28482: END
// every 0 0$1 trigger s30 do var i , tmp ;
28483: LD_EXP 108
28487: IFFALSE 28556
28489: GO 28491
28491: DISABLE
28492: LD_INT 0
28494: PPUSH
28495: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28496: LD_ADDR_VAR 0 2
28500: PUSH
28501: LD_INT 22
28503: PUSH
28504: LD_OWVAR 2
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PPUSH
28513: CALL_OW 69
28517: ST_TO_ADDR
// if not tmp then
28518: LD_VAR 0 2
28522: NOT
28523: IFFALSE 28527
// exit ;
28525: GO 28556
// for i in tmp do
28527: LD_ADDR_VAR 0 1
28531: PUSH
28532: LD_VAR 0 2
28536: PUSH
28537: FOR_IN
28538: IFFALSE 28554
// SetLives ( i , 300 ) ;
28540: LD_VAR 0 1
28544: PPUSH
28545: LD_INT 300
28547: PPUSH
28548: CALL_OW 234
28552: GO 28537
28554: POP
28555: POP
// end ;
28556: PPOPN 2
28558: END
// every 0 0$1 trigger s60 do var i , tmp ;
28559: LD_EXP 109
28563: IFFALSE 28632
28565: GO 28567
28567: DISABLE
28568: LD_INT 0
28570: PPUSH
28571: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28572: LD_ADDR_VAR 0 2
28576: PUSH
28577: LD_INT 22
28579: PUSH
28580: LD_OWVAR 2
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PPUSH
28589: CALL_OW 69
28593: ST_TO_ADDR
// if not tmp then
28594: LD_VAR 0 2
28598: NOT
28599: IFFALSE 28603
// exit ;
28601: GO 28632
// for i in tmp do
28603: LD_ADDR_VAR 0 1
28607: PUSH
28608: LD_VAR 0 2
28612: PUSH
28613: FOR_IN
28614: IFFALSE 28630
// SetLives ( i , 600 ) ;
28616: LD_VAR 0 1
28620: PPUSH
28621: LD_INT 600
28623: PPUSH
28624: CALL_OW 234
28628: GO 28613
28630: POP
28631: POP
// end ;
28632: PPOPN 2
28634: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28635: LD_INT 0
28637: PPUSH
// case cmd of 301 :
28638: LD_VAR 0 1
28642: PUSH
28643: LD_INT 301
28645: DOUBLE
28646: EQUAL
28647: IFTRUE 28651
28649: GO 28683
28651: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28652: LD_VAR 0 6
28656: PPUSH
28657: LD_VAR 0 7
28661: PPUSH
28662: LD_VAR 0 8
28666: PPUSH
28667: LD_VAR 0 4
28671: PPUSH
28672: LD_VAR 0 5
28676: PPUSH
28677: CALL 29892 0 5
28681: GO 28804
28683: LD_INT 302
28685: DOUBLE
28686: EQUAL
28687: IFTRUE 28691
28689: GO 28728
28691: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28692: LD_VAR 0 6
28696: PPUSH
28697: LD_VAR 0 7
28701: PPUSH
28702: LD_VAR 0 8
28706: PPUSH
28707: LD_VAR 0 9
28711: PPUSH
28712: LD_VAR 0 4
28716: PPUSH
28717: LD_VAR 0 5
28721: PPUSH
28722: CALL 29983 0 6
28726: GO 28804
28728: LD_INT 303
28730: DOUBLE
28731: EQUAL
28732: IFTRUE 28736
28734: GO 28773
28736: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28737: LD_VAR 0 6
28741: PPUSH
28742: LD_VAR 0 7
28746: PPUSH
28747: LD_VAR 0 8
28751: PPUSH
28752: LD_VAR 0 9
28756: PPUSH
28757: LD_VAR 0 4
28761: PPUSH
28762: LD_VAR 0 5
28766: PPUSH
28767: CALL 28809 0 6
28771: GO 28804
28773: LD_INT 304
28775: DOUBLE
28776: EQUAL
28777: IFTRUE 28781
28779: GO 28803
28781: POP
// hHackTeleport ( unit , x , y ) ; end ;
28782: LD_VAR 0 2
28786: PPUSH
28787: LD_VAR 0 4
28791: PPUSH
28792: LD_VAR 0 5
28796: PPUSH
28797: CALL 30576 0 3
28801: GO 28804
28803: POP
// end ;
28804: LD_VAR 0 12
28808: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28809: LD_INT 0
28811: PPUSH
28812: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28813: LD_VAR 0 1
28817: PUSH
28818: LD_INT 1
28820: LESS
28821: PUSH
28822: LD_VAR 0 1
28826: PUSH
28827: LD_INT 3
28829: GREATER
28830: OR
28831: PUSH
28832: LD_VAR 0 5
28836: PPUSH
28837: LD_VAR 0 6
28841: PPUSH
28842: CALL_OW 428
28846: OR
28847: IFFALSE 28851
// exit ;
28849: GO 29579
// uc_side := your_side ;
28851: LD_ADDR_OWVAR 20
28855: PUSH
28856: LD_OWVAR 2
28860: ST_TO_ADDR
// uc_nation := nation ;
28861: LD_ADDR_OWVAR 21
28865: PUSH
28866: LD_VAR 0 1
28870: ST_TO_ADDR
// bc_level = 1 ;
28871: LD_ADDR_OWVAR 43
28875: PUSH
28876: LD_INT 1
28878: ST_TO_ADDR
// case btype of 1 :
28879: LD_VAR 0 2
28883: PUSH
28884: LD_INT 1
28886: DOUBLE
28887: EQUAL
28888: IFTRUE 28892
28890: GO 28903
28892: POP
// bc_type := b_depot ; 2 :
28893: LD_ADDR_OWVAR 42
28897: PUSH
28898: LD_INT 0
28900: ST_TO_ADDR
28901: GO 29523
28903: LD_INT 2
28905: DOUBLE
28906: EQUAL
28907: IFTRUE 28911
28909: GO 28922
28911: POP
// bc_type := b_warehouse ; 3 :
28912: LD_ADDR_OWVAR 42
28916: PUSH
28917: LD_INT 1
28919: ST_TO_ADDR
28920: GO 29523
28922: LD_INT 3
28924: DOUBLE
28925: EQUAL
28926: IFTRUE 28930
28928: GO 28941
28930: POP
// bc_type := b_lab ; 4 .. 9 :
28931: LD_ADDR_OWVAR 42
28935: PUSH
28936: LD_INT 6
28938: ST_TO_ADDR
28939: GO 29523
28941: LD_INT 4
28943: DOUBLE
28944: GREATEREQUAL
28945: IFFALSE 28953
28947: LD_INT 9
28949: DOUBLE
28950: LESSEQUAL
28951: IFTRUE 28955
28953: GO 29015
28955: POP
// begin bc_type := b_lab_half ;
28956: LD_ADDR_OWVAR 42
28960: PUSH
28961: LD_INT 7
28963: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28964: LD_ADDR_OWVAR 44
28968: PUSH
28969: LD_INT 10
28971: PUSH
28972: LD_INT 11
28974: PUSH
28975: LD_INT 12
28977: PUSH
28978: LD_INT 15
28980: PUSH
28981: LD_INT 14
28983: PUSH
28984: LD_INT 13
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: PUSH
28995: LD_VAR 0 2
28999: PUSH
29000: LD_INT 3
29002: MINUS
29003: ARRAY
29004: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
29005: LD_ADDR_OWVAR 45
29009: PUSH
29010: LD_INT 9
29012: ST_TO_ADDR
// end ; 10 .. 13 :
29013: GO 29523
29015: LD_INT 10
29017: DOUBLE
29018: GREATEREQUAL
29019: IFFALSE 29027
29021: LD_INT 13
29023: DOUBLE
29024: LESSEQUAL
29025: IFTRUE 29029
29027: GO 29106
29029: POP
// begin bc_type := b_lab_full ;
29030: LD_ADDR_OWVAR 42
29034: PUSH
29035: LD_INT 8
29037: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29038: LD_ADDR_OWVAR 44
29042: PUSH
29043: LD_INT 10
29045: PUSH
29046: LD_INT 12
29048: PUSH
29049: LD_INT 14
29051: PUSH
29052: LD_INT 13
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: PUSH
29061: LD_VAR 0 2
29065: PUSH
29066: LD_INT 9
29068: MINUS
29069: ARRAY
29070: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29071: LD_ADDR_OWVAR 45
29075: PUSH
29076: LD_INT 11
29078: PUSH
29079: LD_INT 15
29081: PUSH
29082: LD_INT 12
29084: PUSH
29085: LD_INT 15
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: PUSH
29094: LD_VAR 0 2
29098: PUSH
29099: LD_INT 9
29101: MINUS
29102: ARRAY
29103: ST_TO_ADDR
// end ; 14 :
29104: GO 29523
29106: LD_INT 14
29108: DOUBLE
29109: EQUAL
29110: IFTRUE 29114
29112: GO 29125
29114: POP
// bc_type := b_workshop ; 15 :
29115: LD_ADDR_OWVAR 42
29119: PUSH
29120: LD_INT 2
29122: ST_TO_ADDR
29123: GO 29523
29125: LD_INT 15
29127: DOUBLE
29128: EQUAL
29129: IFTRUE 29133
29131: GO 29144
29133: POP
// bc_type := b_factory ; 16 :
29134: LD_ADDR_OWVAR 42
29138: PUSH
29139: LD_INT 3
29141: ST_TO_ADDR
29142: GO 29523
29144: LD_INT 16
29146: DOUBLE
29147: EQUAL
29148: IFTRUE 29152
29150: GO 29163
29152: POP
// bc_type := b_ext_gun ; 17 :
29153: LD_ADDR_OWVAR 42
29157: PUSH
29158: LD_INT 17
29160: ST_TO_ADDR
29161: GO 29523
29163: LD_INT 17
29165: DOUBLE
29166: EQUAL
29167: IFTRUE 29171
29169: GO 29199
29171: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29172: LD_ADDR_OWVAR 42
29176: PUSH
29177: LD_INT 19
29179: PUSH
29180: LD_INT 23
29182: PUSH
29183: LD_INT 19
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: LIST
29190: PUSH
29191: LD_VAR 0 1
29195: ARRAY
29196: ST_TO_ADDR
29197: GO 29523
29199: LD_INT 18
29201: DOUBLE
29202: EQUAL
29203: IFTRUE 29207
29205: GO 29218
29207: POP
// bc_type := b_ext_radar ; 19 :
29208: LD_ADDR_OWVAR 42
29212: PUSH
29213: LD_INT 20
29215: ST_TO_ADDR
29216: GO 29523
29218: LD_INT 19
29220: DOUBLE
29221: EQUAL
29222: IFTRUE 29226
29224: GO 29237
29226: POP
// bc_type := b_ext_radio ; 20 :
29227: LD_ADDR_OWVAR 42
29231: PUSH
29232: LD_INT 22
29234: ST_TO_ADDR
29235: GO 29523
29237: LD_INT 20
29239: DOUBLE
29240: EQUAL
29241: IFTRUE 29245
29243: GO 29256
29245: POP
// bc_type := b_ext_siberium ; 21 :
29246: LD_ADDR_OWVAR 42
29250: PUSH
29251: LD_INT 21
29253: ST_TO_ADDR
29254: GO 29523
29256: LD_INT 21
29258: DOUBLE
29259: EQUAL
29260: IFTRUE 29264
29262: GO 29275
29264: POP
// bc_type := b_ext_computer ; 22 :
29265: LD_ADDR_OWVAR 42
29269: PUSH
29270: LD_INT 24
29272: ST_TO_ADDR
29273: GO 29523
29275: LD_INT 22
29277: DOUBLE
29278: EQUAL
29279: IFTRUE 29283
29281: GO 29294
29283: POP
// bc_type := b_ext_track ; 23 :
29284: LD_ADDR_OWVAR 42
29288: PUSH
29289: LD_INT 16
29291: ST_TO_ADDR
29292: GO 29523
29294: LD_INT 23
29296: DOUBLE
29297: EQUAL
29298: IFTRUE 29302
29300: GO 29313
29302: POP
// bc_type := b_ext_laser ; 24 :
29303: LD_ADDR_OWVAR 42
29307: PUSH
29308: LD_INT 25
29310: ST_TO_ADDR
29311: GO 29523
29313: LD_INT 24
29315: DOUBLE
29316: EQUAL
29317: IFTRUE 29321
29319: GO 29332
29321: POP
// bc_type := b_control_tower ; 25 :
29322: LD_ADDR_OWVAR 42
29326: PUSH
29327: LD_INT 36
29329: ST_TO_ADDR
29330: GO 29523
29332: LD_INT 25
29334: DOUBLE
29335: EQUAL
29336: IFTRUE 29340
29338: GO 29351
29340: POP
// bc_type := b_breastwork ; 26 :
29341: LD_ADDR_OWVAR 42
29345: PUSH
29346: LD_INT 31
29348: ST_TO_ADDR
29349: GO 29523
29351: LD_INT 26
29353: DOUBLE
29354: EQUAL
29355: IFTRUE 29359
29357: GO 29370
29359: POP
// bc_type := b_bunker ; 27 :
29360: LD_ADDR_OWVAR 42
29364: PUSH
29365: LD_INT 32
29367: ST_TO_ADDR
29368: GO 29523
29370: LD_INT 27
29372: DOUBLE
29373: EQUAL
29374: IFTRUE 29378
29376: GO 29389
29378: POP
// bc_type := b_turret ; 28 :
29379: LD_ADDR_OWVAR 42
29383: PUSH
29384: LD_INT 33
29386: ST_TO_ADDR
29387: GO 29523
29389: LD_INT 28
29391: DOUBLE
29392: EQUAL
29393: IFTRUE 29397
29395: GO 29408
29397: POP
// bc_type := b_armoury ; 29 :
29398: LD_ADDR_OWVAR 42
29402: PUSH
29403: LD_INT 4
29405: ST_TO_ADDR
29406: GO 29523
29408: LD_INT 29
29410: DOUBLE
29411: EQUAL
29412: IFTRUE 29416
29414: GO 29427
29416: POP
// bc_type := b_barracks ; 30 :
29417: LD_ADDR_OWVAR 42
29421: PUSH
29422: LD_INT 5
29424: ST_TO_ADDR
29425: GO 29523
29427: LD_INT 30
29429: DOUBLE
29430: EQUAL
29431: IFTRUE 29435
29433: GO 29446
29435: POP
// bc_type := b_solar_power ; 31 :
29436: LD_ADDR_OWVAR 42
29440: PUSH
29441: LD_INT 27
29443: ST_TO_ADDR
29444: GO 29523
29446: LD_INT 31
29448: DOUBLE
29449: EQUAL
29450: IFTRUE 29454
29452: GO 29465
29454: POP
// bc_type := b_oil_power ; 32 :
29455: LD_ADDR_OWVAR 42
29459: PUSH
29460: LD_INT 26
29462: ST_TO_ADDR
29463: GO 29523
29465: LD_INT 32
29467: DOUBLE
29468: EQUAL
29469: IFTRUE 29473
29471: GO 29484
29473: POP
// bc_type := b_siberite_power ; 33 :
29474: LD_ADDR_OWVAR 42
29478: PUSH
29479: LD_INT 28
29481: ST_TO_ADDR
29482: GO 29523
29484: LD_INT 33
29486: DOUBLE
29487: EQUAL
29488: IFTRUE 29492
29490: GO 29503
29492: POP
// bc_type := b_oil_mine ; 34 :
29493: LD_ADDR_OWVAR 42
29497: PUSH
29498: LD_INT 29
29500: ST_TO_ADDR
29501: GO 29523
29503: LD_INT 34
29505: DOUBLE
29506: EQUAL
29507: IFTRUE 29511
29509: GO 29522
29511: POP
// bc_type := b_siberite_mine ; end ;
29512: LD_ADDR_OWVAR 42
29516: PUSH
29517: LD_INT 30
29519: ST_TO_ADDR
29520: GO 29523
29522: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29523: LD_ADDR_VAR 0 8
29527: PUSH
29528: LD_VAR 0 5
29532: PPUSH
29533: LD_VAR 0 6
29537: PPUSH
29538: LD_VAR 0 3
29542: PPUSH
29543: CALL_OW 47
29547: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29548: LD_OWVAR 42
29552: PUSH
29553: LD_INT 32
29555: PUSH
29556: LD_INT 33
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: IN
29563: IFFALSE 29579
// PlaceWeaponTurret ( b , weapon ) ;
29565: LD_VAR 0 8
29569: PPUSH
29570: LD_VAR 0 4
29574: PPUSH
29575: CALL_OW 431
// end ;
29579: LD_VAR 0 7
29583: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29584: LD_INT 0
29586: PPUSH
29587: PPUSH
29588: PPUSH
29589: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29590: LD_ADDR_VAR 0 4
29594: PUSH
29595: LD_INT 22
29597: PUSH
29598: LD_OWVAR 2
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 2
29609: PUSH
29610: LD_INT 30
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 30
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: LIST
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PPUSH
29639: CALL_OW 69
29643: ST_TO_ADDR
// if not tmp then
29644: LD_VAR 0 4
29648: NOT
29649: IFFALSE 29653
// exit ;
29651: GO 29712
// for i in tmp do
29653: LD_ADDR_VAR 0 2
29657: PUSH
29658: LD_VAR 0 4
29662: PUSH
29663: FOR_IN
29664: IFFALSE 29710
// for j = 1 to 3 do
29666: LD_ADDR_VAR 0 3
29670: PUSH
29671: DOUBLE
29672: LD_INT 1
29674: DEC
29675: ST_TO_ADDR
29676: LD_INT 3
29678: PUSH
29679: FOR_TO
29680: IFFALSE 29706
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29682: LD_VAR 0 2
29686: PPUSH
29687: CALL_OW 274
29691: PPUSH
29692: LD_VAR 0 3
29696: PPUSH
29697: LD_INT 99999
29699: PPUSH
29700: CALL_OW 277
29704: GO 29679
29706: POP
29707: POP
29708: GO 29663
29710: POP
29711: POP
// end ;
29712: LD_VAR 0 1
29716: RET
// export function hHackSetLevel10 ; var i , j ; begin
29717: LD_INT 0
29719: PPUSH
29720: PPUSH
29721: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29722: LD_ADDR_VAR 0 2
29726: PUSH
29727: LD_INT 21
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PPUSH
29737: CALL_OW 69
29741: PUSH
29742: FOR_IN
29743: IFFALSE 29795
// if IsSelected ( i ) then
29745: LD_VAR 0 2
29749: PPUSH
29750: CALL_OW 306
29754: IFFALSE 29793
// begin for j := 1 to 4 do
29756: LD_ADDR_VAR 0 3
29760: PUSH
29761: DOUBLE
29762: LD_INT 1
29764: DEC
29765: ST_TO_ADDR
29766: LD_INT 4
29768: PUSH
29769: FOR_TO
29770: IFFALSE 29791
// SetSkill ( i , j , 10 ) ;
29772: LD_VAR 0 2
29776: PPUSH
29777: LD_VAR 0 3
29781: PPUSH
29782: LD_INT 10
29784: PPUSH
29785: CALL_OW 237
29789: GO 29769
29791: POP
29792: POP
// end ;
29793: GO 29742
29795: POP
29796: POP
// end ;
29797: LD_VAR 0 1
29801: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29802: LD_INT 0
29804: PPUSH
29805: PPUSH
29806: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29807: LD_ADDR_VAR 0 2
29811: PUSH
29812: LD_INT 22
29814: PUSH
29815: LD_OWVAR 2
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 21
29826: PUSH
29827: LD_INT 1
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PPUSH
29838: CALL_OW 69
29842: PUSH
29843: FOR_IN
29844: IFFALSE 29885
// begin for j := 1 to 4 do
29846: LD_ADDR_VAR 0 3
29850: PUSH
29851: DOUBLE
29852: LD_INT 1
29854: DEC
29855: ST_TO_ADDR
29856: LD_INT 4
29858: PUSH
29859: FOR_TO
29860: IFFALSE 29881
// SetSkill ( i , j , 10 ) ;
29862: LD_VAR 0 2
29866: PPUSH
29867: LD_VAR 0 3
29871: PPUSH
29872: LD_INT 10
29874: PPUSH
29875: CALL_OW 237
29879: GO 29859
29881: POP
29882: POP
// end ;
29883: GO 29843
29885: POP
29886: POP
// end ;
29887: LD_VAR 0 1
29891: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29892: LD_INT 0
29894: PPUSH
// uc_side := your_side ;
29895: LD_ADDR_OWVAR 20
29899: PUSH
29900: LD_OWVAR 2
29904: ST_TO_ADDR
// uc_nation := nation ;
29905: LD_ADDR_OWVAR 21
29909: PUSH
29910: LD_VAR 0 1
29914: ST_TO_ADDR
// InitHc ;
29915: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29919: LD_INT 0
29921: PPUSH
29922: LD_VAR 0 2
29926: PPUSH
29927: LD_VAR 0 3
29931: PPUSH
29932: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29936: LD_VAR 0 4
29940: PPUSH
29941: LD_VAR 0 5
29945: PPUSH
29946: CALL_OW 428
29950: PUSH
29951: LD_INT 0
29953: EQUAL
29954: IFFALSE 29978
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29956: CALL_OW 44
29960: PPUSH
29961: LD_VAR 0 4
29965: PPUSH
29966: LD_VAR 0 5
29970: PPUSH
29971: LD_INT 1
29973: PPUSH
29974: CALL_OW 48
// end ;
29978: LD_VAR 0 6
29982: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29983: LD_INT 0
29985: PPUSH
29986: PPUSH
// uc_side := your_side ;
29987: LD_ADDR_OWVAR 20
29991: PUSH
29992: LD_OWVAR 2
29996: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29997: LD_VAR 0 1
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: LD_INT 2
30007: PUSH
30008: LD_INT 3
30010: PUSH
30011: LD_INT 4
30013: PUSH
30014: LD_INT 5
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: IN
30024: IFFALSE 30036
// uc_nation := nation_american else
30026: LD_ADDR_OWVAR 21
30030: PUSH
30031: LD_INT 1
30033: ST_TO_ADDR
30034: GO 30079
// if chassis in [ 11 , 12 , 13 , 14 ] then
30036: LD_VAR 0 1
30040: PUSH
30041: LD_INT 11
30043: PUSH
30044: LD_INT 12
30046: PUSH
30047: LD_INT 13
30049: PUSH
30050: LD_INT 14
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: IN
30059: IFFALSE 30071
// uc_nation := nation_arabian else
30061: LD_ADDR_OWVAR 21
30065: PUSH
30066: LD_INT 2
30068: ST_TO_ADDR
30069: GO 30079
// uc_nation := nation_russian ;
30071: LD_ADDR_OWVAR 21
30075: PUSH
30076: LD_INT 3
30078: ST_TO_ADDR
// vc_chassis := chassis ;
30079: LD_ADDR_OWVAR 37
30083: PUSH
30084: LD_VAR 0 1
30088: ST_TO_ADDR
// vc_engine := engine ;
30089: LD_ADDR_OWVAR 39
30093: PUSH
30094: LD_VAR 0 2
30098: ST_TO_ADDR
// vc_control := control ;
30099: LD_ADDR_OWVAR 38
30103: PUSH
30104: LD_VAR 0 3
30108: ST_TO_ADDR
// vc_weapon := weapon ;
30109: LD_ADDR_OWVAR 40
30113: PUSH
30114: LD_VAR 0 4
30118: ST_TO_ADDR
// un := CreateVehicle ;
30119: LD_ADDR_VAR 0 8
30123: PUSH
30124: CALL_OW 45
30128: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30129: LD_VAR 0 8
30133: PPUSH
30134: LD_INT 0
30136: PPUSH
30137: LD_INT 5
30139: PPUSH
30140: CALL_OW 12
30144: PPUSH
30145: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30149: LD_VAR 0 8
30153: PPUSH
30154: LD_VAR 0 5
30158: PPUSH
30159: LD_VAR 0 6
30163: PPUSH
30164: LD_INT 1
30166: PPUSH
30167: CALL_OW 48
// end ;
30171: LD_VAR 0 7
30175: RET
// export hInvincible ; every 1 do
30176: GO 30178
30178: DISABLE
// hInvincible := [ ] ;
30179: LD_ADDR_EXP 110
30183: PUSH
30184: EMPTY
30185: ST_TO_ADDR
30186: END
// every 10 do var i ;
30187: GO 30189
30189: DISABLE
30190: LD_INT 0
30192: PPUSH
// begin enable ;
30193: ENABLE
// if not hInvincible then
30194: LD_EXP 110
30198: NOT
30199: IFFALSE 30203
// exit ;
30201: GO 30247
// for i in hInvincible do
30203: LD_ADDR_VAR 0 1
30207: PUSH
30208: LD_EXP 110
30212: PUSH
30213: FOR_IN
30214: IFFALSE 30245
// if GetLives ( i ) < 1000 then
30216: LD_VAR 0 1
30220: PPUSH
30221: CALL_OW 256
30225: PUSH
30226: LD_INT 1000
30228: LESS
30229: IFFALSE 30243
// SetLives ( i , 1000 ) ;
30231: LD_VAR 0 1
30235: PPUSH
30236: LD_INT 1000
30238: PPUSH
30239: CALL_OW 234
30243: GO 30213
30245: POP
30246: POP
// end ;
30247: PPOPN 1
30249: END
// export function hHackInvincible ; var i ; begin
30250: LD_INT 0
30252: PPUSH
30253: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30254: LD_ADDR_VAR 0 2
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: LD_INT 21
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 21
30274: PUSH
30275: LD_INT 2
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: LIST
30286: PPUSH
30287: CALL_OW 69
30291: PUSH
30292: FOR_IN
30293: IFFALSE 30354
// if IsSelected ( i ) then
30295: LD_VAR 0 2
30299: PPUSH
30300: CALL_OW 306
30304: IFFALSE 30352
// begin if i in hInvincible then
30306: LD_VAR 0 2
30310: PUSH
30311: LD_EXP 110
30315: IN
30316: IFFALSE 30336
// hInvincible := hInvincible diff i else
30318: LD_ADDR_EXP 110
30322: PUSH
30323: LD_EXP 110
30327: PUSH
30328: LD_VAR 0 2
30332: DIFF
30333: ST_TO_ADDR
30334: GO 30352
// hInvincible := hInvincible union i ;
30336: LD_ADDR_EXP 110
30340: PUSH
30341: LD_EXP 110
30345: PUSH
30346: LD_VAR 0 2
30350: UNION
30351: ST_TO_ADDR
// end ;
30352: GO 30292
30354: POP
30355: POP
// end ;
30356: LD_VAR 0 1
30360: RET
// export function hHackInvisible ; var i , j ; begin
30361: LD_INT 0
30363: PPUSH
30364: PPUSH
30365: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30366: LD_ADDR_VAR 0 2
30370: PUSH
30371: LD_INT 21
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PPUSH
30381: CALL_OW 69
30385: PUSH
30386: FOR_IN
30387: IFFALSE 30411
// if IsSelected ( i ) then
30389: LD_VAR 0 2
30393: PPUSH
30394: CALL_OW 306
30398: IFFALSE 30409
// ComForceInvisible ( i ) ;
30400: LD_VAR 0 2
30404: PPUSH
30405: CALL_OW 496
30409: GO 30386
30411: POP
30412: POP
// end ;
30413: LD_VAR 0 1
30417: RET
// export function hHackChangeYourSide ; begin
30418: LD_INT 0
30420: PPUSH
// if your_side = 8 then
30421: LD_OWVAR 2
30425: PUSH
30426: LD_INT 8
30428: EQUAL
30429: IFFALSE 30441
// your_side := 0 else
30431: LD_ADDR_OWVAR 2
30435: PUSH
30436: LD_INT 0
30438: ST_TO_ADDR
30439: GO 30455
// your_side := your_side + 1 ;
30441: LD_ADDR_OWVAR 2
30445: PUSH
30446: LD_OWVAR 2
30450: PUSH
30451: LD_INT 1
30453: PLUS
30454: ST_TO_ADDR
// end ;
30455: LD_VAR 0 1
30459: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30460: LD_INT 0
30462: PPUSH
30463: PPUSH
30464: PPUSH
// for i in all_units do
30465: LD_ADDR_VAR 0 2
30469: PUSH
30470: LD_OWVAR 3
30474: PUSH
30475: FOR_IN
30476: IFFALSE 30554
// if IsSelected ( i ) then
30478: LD_VAR 0 2
30482: PPUSH
30483: CALL_OW 306
30487: IFFALSE 30552
// begin j := GetSide ( i ) ;
30489: LD_ADDR_VAR 0 3
30493: PUSH
30494: LD_VAR 0 2
30498: PPUSH
30499: CALL_OW 255
30503: ST_TO_ADDR
// if j = 8 then
30504: LD_VAR 0 3
30508: PUSH
30509: LD_INT 8
30511: EQUAL
30512: IFFALSE 30524
// j := 0 else
30514: LD_ADDR_VAR 0 3
30518: PUSH
30519: LD_INT 0
30521: ST_TO_ADDR
30522: GO 30538
// j := j + 1 ;
30524: LD_ADDR_VAR 0 3
30528: PUSH
30529: LD_VAR 0 3
30533: PUSH
30534: LD_INT 1
30536: PLUS
30537: ST_TO_ADDR
// SetSide ( i , j ) ;
30538: LD_VAR 0 2
30542: PPUSH
30543: LD_VAR 0 3
30547: PPUSH
30548: CALL_OW 235
// end ;
30552: GO 30475
30554: POP
30555: POP
// end ;
30556: LD_VAR 0 1
30560: RET
// export function hHackFog ; begin
30561: LD_INT 0
30563: PPUSH
// FogOff ( true ) ;
30564: LD_INT 1
30566: PPUSH
30567: CALL_OW 344
// end ;
30571: LD_VAR 0 1
30575: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30576: LD_INT 0
30578: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30579: LD_VAR 0 1
30583: PPUSH
30584: LD_VAR 0 2
30588: PPUSH
30589: LD_VAR 0 3
30593: PPUSH
30594: LD_INT 1
30596: PPUSH
30597: LD_INT 1
30599: PPUSH
30600: CALL_OW 483
// CenterOnXY ( x , y ) ;
30604: LD_VAR 0 2
30608: PPUSH
30609: LD_VAR 0 3
30613: PPUSH
30614: CALL_OW 84
// end ;
30618: LD_VAR 0 4
30622: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30623: LD_INT 0
30625: PPUSH
30626: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30627: LD_VAR 0 1
30631: NOT
30632: PUSH
30633: LD_VAR 0 2
30637: PPUSH
30638: LD_VAR 0 3
30642: PPUSH
30643: CALL_OW 488
30647: NOT
30648: OR
30649: PUSH
30650: LD_VAR 0 1
30654: PPUSH
30655: CALL_OW 266
30659: PUSH
30660: LD_INT 3
30662: NONEQUAL
30663: PUSH
30664: LD_VAR 0 1
30668: PPUSH
30669: CALL_OW 247
30673: PUSH
30674: LD_INT 1
30676: EQUAL
30677: NOT
30678: AND
30679: OR
30680: IFFALSE 30684
// exit ;
30682: GO 30833
// if GetType ( factory ) = unit_human then
30684: LD_VAR 0 1
30688: PPUSH
30689: CALL_OW 247
30693: PUSH
30694: LD_INT 1
30696: EQUAL
30697: IFFALSE 30714
// factory := IsInUnit ( factory ) ;
30699: LD_ADDR_VAR 0 1
30703: PUSH
30704: LD_VAR 0 1
30708: PPUSH
30709: CALL_OW 310
30713: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30714: LD_VAR 0 1
30718: PPUSH
30719: CALL_OW 266
30723: PUSH
30724: LD_INT 3
30726: NONEQUAL
30727: IFFALSE 30731
// exit ;
30729: GO 30833
// if HexInfo ( x , y ) = factory then
30731: LD_VAR 0 2
30735: PPUSH
30736: LD_VAR 0 3
30740: PPUSH
30741: CALL_OW 428
30745: PUSH
30746: LD_VAR 0 1
30750: EQUAL
30751: IFFALSE 30778
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30753: LD_ADDR_EXP 111
30757: PUSH
30758: LD_EXP 111
30762: PPUSH
30763: LD_VAR 0 1
30767: PPUSH
30768: LD_INT 0
30770: PPUSH
30771: CALL_OW 1
30775: ST_TO_ADDR
30776: GO 30829
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30778: LD_ADDR_EXP 111
30782: PUSH
30783: LD_EXP 111
30787: PPUSH
30788: LD_VAR 0 1
30792: PPUSH
30793: LD_VAR 0 1
30797: PPUSH
30798: CALL_OW 255
30802: PUSH
30803: LD_VAR 0 1
30807: PUSH
30808: LD_VAR 0 2
30812: PUSH
30813: LD_VAR 0 3
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: PPUSH
30824: CALL_OW 1
30828: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30829: CALL 30838 0 0
// end ;
30833: LD_VAR 0 4
30837: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30838: LD_INT 0
30840: PPUSH
30841: PPUSH
30842: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30843: LD_STRING resetFactoryWaypoint();
30845: PPUSH
30846: CALL_OW 559
// if factoryWaypoints then
30850: LD_EXP 111
30854: IFFALSE 30980
// begin list := PrepareArray ( factoryWaypoints ) ;
30856: LD_ADDR_VAR 0 3
30860: PUSH
30861: LD_EXP 111
30865: PPUSH
30866: CALL 73387 0 1
30870: ST_TO_ADDR
// for i := 1 to list do
30871: LD_ADDR_VAR 0 2
30875: PUSH
30876: DOUBLE
30877: LD_INT 1
30879: DEC
30880: ST_TO_ADDR
30881: LD_VAR 0 3
30885: PUSH
30886: FOR_TO
30887: IFFALSE 30978
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30889: LD_STRING setFactoryWaypointXY(
30891: PUSH
30892: LD_VAR 0 3
30896: PUSH
30897: LD_VAR 0 2
30901: ARRAY
30902: PUSH
30903: LD_INT 1
30905: ARRAY
30906: STR
30907: PUSH
30908: LD_STRING ,
30910: STR
30911: PUSH
30912: LD_VAR 0 3
30916: PUSH
30917: LD_VAR 0 2
30921: ARRAY
30922: PUSH
30923: LD_INT 2
30925: ARRAY
30926: STR
30927: PUSH
30928: LD_STRING ,
30930: STR
30931: PUSH
30932: LD_VAR 0 3
30936: PUSH
30937: LD_VAR 0 2
30941: ARRAY
30942: PUSH
30943: LD_INT 3
30945: ARRAY
30946: STR
30947: PUSH
30948: LD_STRING ,
30950: STR
30951: PUSH
30952: LD_VAR 0 3
30956: PUSH
30957: LD_VAR 0 2
30961: ARRAY
30962: PUSH
30963: LD_INT 4
30965: ARRAY
30966: STR
30967: PUSH
30968: LD_STRING )
30970: STR
30971: PPUSH
30972: CALL_OW 559
30976: GO 30886
30978: POP
30979: POP
// end ; end ;
30980: LD_VAR 0 1
30984: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30985: LD_INT 0
30987: PPUSH
// if HexInfo ( x , y ) = warehouse then
30988: LD_VAR 0 2
30992: PPUSH
30993: LD_VAR 0 3
30997: PPUSH
30998: CALL_OW 428
31002: PUSH
31003: LD_VAR 0 1
31007: EQUAL
31008: IFFALSE 31035
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31010: LD_ADDR_EXP 112
31014: PUSH
31015: LD_EXP 112
31019: PPUSH
31020: LD_VAR 0 1
31024: PPUSH
31025: LD_INT 0
31027: PPUSH
31028: CALL_OW 1
31032: ST_TO_ADDR
31033: GO 31086
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31035: LD_ADDR_EXP 112
31039: PUSH
31040: LD_EXP 112
31044: PPUSH
31045: LD_VAR 0 1
31049: PPUSH
31050: LD_VAR 0 1
31054: PPUSH
31055: CALL_OW 255
31059: PUSH
31060: LD_VAR 0 1
31064: PUSH
31065: LD_VAR 0 2
31069: PUSH
31070: LD_VAR 0 3
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: PPUSH
31081: CALL_OW 1
31085: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31086: CALL 31095 0 0
// end ;
31090: LD_VAR 0 4
31094: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31095: LD_INT 0
31097: PPUSH
31098: PPUSH
31099: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31100: LD_STRING resetWarehouseGatheringPoints();
31102: PPUSH
31103: CALL_OW 559
// if warehouseGatheringPoints then
31107: LD_EXP 112
31111: IFFALSE 31237
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31113: LD_ADDR_VAR 0 3
31117: PUSH
31118: LD_EXP 112
31122: PPUSH
31123: CALL 73387 0 1
31127: ST_TO_ADDR
// for i := 1 to list do
31128: LD_ADDR_VAR 0 2
31132: PUSH
31133: DOUBLE
31134: LD_INT 1
31136: DEC
31137: ST_TO_ADDR
31138: LD_VAR 0 3
31142: PUSH
31143: FOR_TO
31144: IFFALSE 31235
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31146: LD_STRING setWarehouseGatheringPointXY(
31148: PUSH
31149: LD_VAR 0 3
31153: PUSH
31154: LD_VAR 0 2
31158: ARRAY
31159: PUSH
31160: LD_INT 1
31162: ARRAY
31163: STR
31164: PUSH
31165: LD_STRING ,
31167: STR
31168: PUSH
31169: LD_VAR 0 3
31173: PUSH
31174: LD_VAR 0 2
31178: ARRAY
31179: PUSH
31180: LD_INT 2
31182: ARRAY
31183: STR
31184: PUSH
31185: LD_STRING ,
31187: STR
31188: PUSH
31189: LD_VAR 0 3
31193: PUSH
31194: LD_VAR 0 2
31198: ARRAY
31199: PUSH
31200: LD_INT 3
31202: ARRAY
31203: STR
31204: PUSH
31205: LD_STRING ,
31207: STR
31208: PUSH
31209: LD_VAR 0 3
31213: PUSH
31214: LD_VAR 0 2
31218: ARRAY
31219: PUSH
31220: LD_INT 4
31222: ARRAY
31223: STR
31224: PUSH
31225: LD_STRING )
31227: STR
31228: PPUSH
31229: CALL_OW 559
31233: GO 31143
31235: POP
31236: POP
// end ; end ;
31237: LD_VAR 0 1
31241: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31242: LD_EXP 112
31246: IFFALSE 31931
31248: GO 31250
31250: DISABLE
31251: LD_INT 0
31253: PPUSH
31254: PPUSH
31255: PPUSH
31256: PPUSH
31257: PPUSH
31258: PPUSH
31259: PPUSH
31260: PPUSH
31261: PPUSH
// begin enable ;
31262: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31263: LD_ADDR_VAR 0 3
31267: PUSH
31268: LD_EXP 112
31272: PPUSH
31273: CALL 73387 0 1
31277: ST_TO_ADDR
// if not list then
31278: LD_VAR 0 3
31282: NOT
31283: IFFALSE 31287
// exit ;
31285: GO 31931
// for i := 1 to list do
31287: LD_ADDR_VAR 0 1
31291: PUSH
31292: DOUBLE
31293: LD_INT 1
31295: DEC
31296: ST_TO_ADDR
31297: LD_VAR 0 3
31301: PUSH
31302: FOR_TO
31303: IFFALSE 31929
// begin depot := list [ i ] [ 2 ] ;
31305: LD_ADDR_VAR 0 8
31309: PUSH
31310: LD_VAR 0 3
31314: PUSH
31315: LD_VAR 0 1
31319: ARRAY
31320: PUSH
31321: LD_INT 2
31323: ARRAY
31324: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31325: LD_ADDR_VAR 0 5
31329: PUSH
31330: LD_VAR 0 3
31334: PUSH
31335: LD_VAR 0 1
31339: ARRAY
31340: PUSH
31341: LD_INT 1
31343: ARRAY
31344: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31345: LD_VAR 0 8
31349: PPUSH
31350: CALL_OW 301
31354: PUSH
31355: LD_VAR 0 5
31359: PUSH
31360: LD_VAR 0 8
31364: PPUSH
31365: CALL_OW 255
31369: NONEQUAL
31370: OR
31371: IFFALSE 31400
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31373: LD_ADDR_EXP 112
31377: PUSH
31378: LD_EXP 112
31382: PPUSH
31383: LD_VAR 0 8
31387: PPUSH
31388: LD_INT 0
31390: PPUSH
31391: CALL_OW 1
31395: ST_TO_ADDR
// exit ;
31396: POP
31397: POP
31398: GO 31931
// end ; x := list [ i ] [ 3 ] ;
31400: LD_ADDR_VAR 0 6
31404: PUSH
31405: LD_VAR 0 3
31409: PUSH
31410: LD_VAR 0 1
31414: ARRAY
31415: PUSH
31416: LD_INT 3
31418: ARRAY
31419: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31420: LD_ADDR_VAR 0 7
31424: PUSH
31425: LD_VAR 0 3
31429: PUSH
31430: LD_VAR 0 1
31434: ARRAY
31435: PUSH
31436: LD_INT 4
31438: ARRAY
31439: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31440: LD_ADDR_VAR 0 9
31444: PUSH
31445: LD_VAR 0 6
31449: PPUSH
31450: LD_VAR 0 7
31454: PPUSH
31455: LD_INT 16
31457: PPUSH
31458: CALL 71971 0 3
31462: ST_TO_ADDR
// if not cratesNearbyPoint then
31463: LD_VAR 0 9
31467: NOT
31468: IFFALSE 31474
// exit ;
31470: POP
31471: POP
31472: GO 31931
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31474: LD_ADDR_VAR 0 4
31478: PUSH
31479: LD_INT 22
31481: PUSH
31482: LD_VAR 0 5
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 3
31493: PUSH
31494: LD_INT 60
31496: PUSH
31497: EMPTY
31498: LIST
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 91
31506: PUSH
31507: LD_VAR 0 8
31511: PUSH
31512: LD_INT 6
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 2
31522: PUSH
31523: LD_INT 25
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 25
31535: PUSH
31536: LD_INT 16
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: LIST
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: PPUSH
31554: CALL_OW 69
31558: PUSH
31559: LD_VAR 0 8
31563: PPUSH
31564: CALL_OW 313
31568: PPUSH
31569: LD_INT 3
31571: PUSH
31572: LD_INT 60
31574: PUSH
31575: EMPTY
31576: LIST
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 2
31584: PUSH
31585: LD_INT 25
31587: PUSH
31588: LD_INT 2
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 25
31597: PUSH
31598: LD_INT 16
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: LIST
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PPUSH
31614: CALL_OW 72
31618: UNION
31619: ST_TO_ADDR
// if tmp then
31620: LD_VAR 0 4
31624: IFFALSE 31704
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31626: LD_ADDR_VAR 0 4
31630: PUSH
31631: LD_VAR 0 4
31635: PPUSH
31636: LD_INT 3
31638: PPUSH
31639: CALL 69940 0 2
31643: ST_TO_ADDR
// for j in tmp do
31644: LD_ADDR_VAR 0 2
31648: PUSH
31649: LD_VAR 0 4
31653: PUSH
31654: FOR_IN
31655: IFFALSE 31698
// begin if IsInUnit ( j ) then
31657: LD_VAR 0 2
31661: PPUSH
31662: CALL_OW 310
31666: IFFALSE 31677
// ComExit ( j ) ;
31668: LD_VAR 0 2
31672: PPUSH
31673: CALL 70023 0 1
// AddComCollect ( j , x , y ) ;
31677: LD_VAR 0 2
31681: PPUSH
31682: LD_VAR 0 6
31686: PPUSH
31687: LD_VAR 0 7
31691: PPUSH
31692: CALL_OW 177
// end ;
31696: GO 31654
31698: POP
31699: POP
// exit ;
31700: POP
31701: POP
31702: GO 31931
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31704: LD_ADDR_VAR 0 4
31708: PUSH
31709: LD_INT 22
31711: PUSH
31712: LD_VAR 0 5
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 91
31723: PUSH
31724: LD_VAR 0 8
31728: PUSH
31729: LD_INT 8
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 2
31739: PUSH
31740: LD_INT 34
31742: PUSH
31743: LD_INT 12
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 34
31752: PUSH
31753: LD_INT 51
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 34
31762: PUSH
31763: LD_INT 32
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 34
31772: PUSH
31773: LD_INT 89
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: LIST
31791: PPUSH
31792: CALL_OW 69
31796: ST_TO_ADDR
// if tmp then
31797: LD_VAR 0 4
31801: IFFALSE 31927
// begin for j in tmp do
31803: LD_ADDR_VAR 0 2
31807: PUSH
31808: LD_VAR 0 4
31812: PUSH
31813: FOR_IN
31814: IFFALSE 31925
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31816: LD_VAR 0 2
31820: PPUSH
31821: CALL_OW 262
31825: PUSH
31826: LD_INT 3
31828: EQUAL
31829: PUSH
31830: LD_VAR 0 2
31834: PPUSH
31835: CALL_OW 261
31839: PUSH
31840: LD_INT 20
31842: GREATER
31843: OR
31844: PUSH
31845: LD_VAR 0 2
31849: PPUSH
31850: CALL_OW 314
31854: NOT
31855: AND
31856: PUSH
31857: LD_VAR 0 2
31861: PPUSH
31862: CALL_OW 263
31866: PUSH
31867: LD_INT 1
31869: NONEQUAL
31870: PUSH
31871: LD_VAR 0 2
31875: PPUSH
31876: CALL_OW 311
31880: OR
31881: AND
31882: IFFALSE 31923
// begin ComCollect ( j , x , y ) ;
31884: LD_VAR 0 2
31888: PPUSH
31889: LD_VAR 0 6
31893: PPUSH
31894: LD_VAR 0 7
31898: PPUSH
31899: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31903: LD_VAR 0 2
31907: PPUSH
31908: LD_VAR 0 8
31912: PPUSH
31913: CALL_OW 172
// exit ;
31917: POP
31918: POP
31919: POP
31920: POP
31921: GO 31931
// end ;
31923: GO 31813
31925: POP
31926: POP
// end ; end ;
31927: GO 31302
31929: POP
31930: POP
// end ; end_of_file
31931: PPOPN 9
31933: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31934: LD_INT 0
31936: PPUSH
31937: PPUSH
// if exist_mode then
31938: LD_VAR 0 2
31942: IFFALSE 31967
// unit := CreateCharacter ( prefix & ident ) else
31944: LD_ADDR_VAR 0 5
31948: PUSH
31949: LD_VAR 0 3
31953: PUSH
31954: LD_VAR 0 1
31958: STR
31959: PPUSH
31960: CALL_OW 34
31964: ST_TO_ADDR
31965: GO 31982
// unit := NewCharacter ( ident ) ;
31967: LD_ADDR_VAR 0 5
31971: PUSH
31972: LD_VAR 0 1
31976: PPUSH
31977: CALL_OW 25
31981: ST_TO_ADDR
// result := unit ;
31982: LD_ADDR_VAR 0 4
31986: PUSH
31987: LD_VAR 0 5
31991: ST_TO_ADDR
// end ;
31992: LD_VAR 0 4
31996: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31997: LD_INT 0
31999: PPUSH
32000: PPUSH
// if not side or not nation then
32001: LD_VAR 0 1
32005: NOT
32006: PUSH
32007: LD_VAR 0 2
32011: NOT
32012: OR
32013: IFFALSE 32017
// exit ;
32015: GO 32785
// case nation of nation_american :
32017: LD_VAR 0 2
32021: PUSH
32022: LD_INT 1
32024: DOUBLE
32025: EQUAL
32026: IFTRUE 32030
32028: GO 32244
32030: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32031: LD_ADDR_VAR 0 4
32035: PUSH
32036: LD_INT 35
32038: PUSH
32039: LD_INT 45
32041: PUSH
32042: LD_INT 46
32044: PUSH
32045: LD_INT 47
32047: PUSH
32048: LD_INT 82
32050: PUSH
32051: LD_INT 83
32053: PUSH
32054: LD_INT 84
32056: PUSH
32057: LD_INT 85
32059: PUSH
32060: LD_INT 86
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: LD_INT 2
32068: PUSH
32069: LD_INT 6
32071: PUSH
32072: LD_INT 15
32074: PUSH
32075: LD_INT 16
32077: PUSH
32078: LD_INT 7
32080: PUSH
32081: LD_INT 12
32083: PUSH
32084: LD_INT 13
32086: PUSH
32087: LD_INT 10
32089: PUSH
32090: LD_INT 14
32092: PUSH
32093: LD_INT 20
32095: PUSH
32096: LD_INT 21
32098: PUSH
32099: LD_INT 22
32101: PUSH
32102: LD_INT 25
32104: PUSH
32105: LD_INT 32
32107: PUSH
32108: LD_INT 27
32110: PUSH
32111: LD_INT 36
32113: PUSH
32114: LD_INT 69
32116: PUSH
32117: LD_INT 39
32119: PUSH
32120: LD_INT 34
32122: PUSH
32123: LD_INT 40
32125: PUSH
32126: LD_INT 48
32128: PUSH
32129: LD_INT 49
32131: PUSH
32132: LD_INT 50
32134: PUSH
32135: LD_INT 51
32137: PUSH
32138: LD_INT 52
32140: PUSH
32141: LD_INT 53
32143: PUSH
32144: LD_INT 54
32146: PUSH
32147: LD_INT 55
32149: PUSH
32150: LD_INT 56
32152: PUSH
32153: LD_INT 57
32155: PUSH
32156: LD_INT 58
32158: PUSH
32159: LD_INT 59
32161: PUSH
32162: LD_INT 60
32164: PUSH
32165: LD_INT 61
32167: PUSH
32168: LD_INT 62
32170: PUSH
32171: LD_INT 80
32173: PUSH
32174: LD_INT 82
32176: PUSH
32177: LD_INT 83
32179: PUSH
32180: LD_INT 84
32182: PUSH
32183: LD_INT 85
32185: PUSH
32186: LD_INT 86
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: ST_TO_ADDR
32242: GO 32709
32244: LD_INT 2
32246: DOUBLE
32247: EQUAL
32248: IFTRUE 32252
32250: GO 32478
32252: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32253: LD_ADDR_VAR 0 4
32257: PUSH
32258: LD_INT 35
32260: PUSH
32261: LD_INT 45
32263: PUSH
32264: LD_INT 46
32266: PUSH
32267: LD_INT 47
32269: PUSH
32270: LD_INT 82
32272: PUSH
32273: LD_INT 83
32275: PUSH
32276: LD_INT 84
32278: PUSH
32279: LD_INT 85
32281: PUSH
32282: LD_INT 87
32284: PUSH
32285: LD_INT 70
32287: PUSH
32288: LD_INT 1
32290: PUSH
32291: LD_INT 11
32293: PUSH
32294: LD_INT 3
32296: PUSH
32297: LD_INT 4
32299: PUSH
32300: LD_INT 5
32302: PUSH
32303: LD_INT 6
32305: PUSH
32306: LD_INT 15
32308: PUSH
32309: LD_INT 18
32311: PUSH
32312: LD_INT 7
32314: PUSH
32315: LD_INT 17
32317: PUSH
32318: LD_INT 8
32320: PUSH
32321: LD_INT 20
32323: PUSH
32324: LD_INT 21
32326: PUSH
32327: LD_INT 22
32329: PUSH
32330: LD_INT 72
32332: PUSH
32333: LD_INT 26
32335: PUSH
32336: LD_INT 69
32338: PUSH
32339: LD_INT 39
32341: PUSH
32342: LD_INT 40
32344: PUSH
32345: LD_INT 41
32347: PUSH
32348: LD_INT 42
32350: PUSH
32351: LD_INT 43
32353: PUSH
32354: LD_INT 48
32356: PUSH
32357: LD_INT 49
32359: PUSH
32360: LD_INT 50
32362: PUSH
32363: LD_INT 51
32365: PUSH
32366: LD_INT 52
32368: PUSH
32369: LD_INT 53
32371: PUSH
32372: LD_INT 54
32374: PUSH
32375: LD_INT 55
32377: PUSH
32378: LD_INT 56
32380: PUSH
32381: LD_INT 60
32383: PUSH
32384: LD_INT 61
32386: PUSH
32387: LD_INT 62
32389: PUSH
32390: LD_INT 66
32392: PUSH
32393: LD_INT 67
32395: PUSH
32396: LD_INT 68
32398: PUSH
32399: LD_INT 81
32401: PUSH
32402: LD_INT 82
32404: PUSH
32405: LD_INT 83
32407: PUSH
32408: LD_INT 84
32410: PUSH
32411: LD_INT 85
32413: PUSH
32414: LD_INT 87
32416: PUSH
32417: LD_INT 88
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: ST_TO_ADDR
32476: GO 32709
32478: LD_INT 3
32480: DOUBLE
32481: EQUAL
32482: IFTRUE 32486
32484: GO 32708
32486: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32487: LD_ADDR_VAR 0 4
32491: PUSH
32492: LD_INT 46
32494: PUSH
32495: LD_INT 47
32497: PUSH
32498: LD_INT 1
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: LD_INT 82
32506: PUSH
32507: LD_INT 83
32509: PUSH
32510: LD_INT 84
32512: PUSH
32513: LD_INT 85
32515: PUSH
32516: LD_INT 86
32518: PUSH
32519: LD_INT 11
32521: PUSH
32522: LD_INT 9
32524: PUSH
32525: LD_INT 20
32527: PUSH
32528: LD_INT 19
32530: PUSH
32531: LD_INT 21
32533: PUSH
32534: LD_INT 24
32536: PUSH
32537: LD_INT 22
32539: PUSH
32540: LD_INT 25
32542: PUSH
32543: LD_INT 28
32545: PUSH
32546: LD_INT 29
32548: PUSH
32549: LD_INT 30
32551: PUSH
32552: LD_INT 31
32554: PUSH
32555: LD_INT 37
32557: PUSH
32558: LD_INT 38
32560: PUSH
32561: LD_INT 32
32563: PUSH
32564: LD_INT 27
32566: PUSH
32567: LD_INT 33
32569: PUSH
32570: LD_INT 69
32572: PUSH
32573: LD_INT 39
32575: PUSH
32576: LD_INT 34
32578: PUSH
32579: LD_INT 40
32581: PUSH
32582: LD_INT 71
32584: PUSH
32585: LD_INT 23
32587: PUSH
32588: LD_INT 44
32590: PUSH
32591: LD_INT 48
32593: PUSH
32594: LD_INT 49
32596: PUSH
32597: LD_INT 50
32599: PUSH
32600: LD_INT 51
32602: PUSH
32603: LD_INT 52
32605: PUSH
32606: LD_INT 53
32608: PUSH
32609: LD_INT 54
32611: PUSH
32612: LD_INT 55
32614: PUSH
32615: LD_INT 56
32617: PUSH
32618: LD_INT 57
32620: PUSH
32621: LD_INT 58
32623: PUSH
32624: LD_INT 59
32626: PUSH
32627: LD_INT 63
32629: PUSH
32630: LD_INT 64
32632: PUSH
32633: LD_INT 65
32635: PUSH
32636: LD_INT 82
32638: PUSH
32639: LD_INT 83
32641: PUSH
32642: LD_INT 84
32644: PUSH
32645: LD_INT 85
32647: PUSH
32648: LD_INT 86
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: ST_TO_ADDR
32706: GO 32709
32708: POP
// if state > - 1 and state < 3 then
32709: LD_VAR 0 3
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: GREATER
32718: PUSH
32719: LD_VAR 0 3
32723: PUSH
32724: LD_INT 3
32726: LESS
32727: AND
32728: IFFALSE 32785
// for i in result do
32730: LD_ADDR_VAR 0 5
32734: PUSH
32735: LD_VAR 0 4
32739: PUSH
32740: FOR_IN
32741: IFFALSE 32783
// if GetTech ( i , side ) <> state then
32743: LD_VAR 0 5
32747: PPUSH
32748: LD_VAR 0 1
32752: PPUSH
32753: CALL_OW 321
32757: PUSH
32758: LD_VAR 0 3
32762: NONEQUAL
32763: IFFALSE 32781
// result := result diff i ;
32765: LD_ADDR_VAR 0 4
32769: PUSH
32770: LD_VAR 0 4
32774: PUSH
32775: LD_VAR 0 5
32779: DIFF
32780: ST_TO_ADDR
32781: GO 32740
32783: POP
32784: POP
// end ;
32785: LD_VAR 0 4
32789: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32790: LD_INT 0
32792: PPUSH
32793: PPUSH
32794: PPUSH
// result := true ;
32795: LD_ADDR_VAR 0 3
32799: PUSH
32800: LD_INT 1
32802: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32803: LD_ADDR_VAR 0 5
32807: PUSH
32808: LD_VAR 0 2
32812: PPUSH
32813: CALL_OW 480
32817: ST_TO_ADDR
// if not tmp then
32818: LD_VAR 0 5
32822: NOT
32823: IFFALSE 32827
// exit ;
32825: GO 32876
// for i in tmp do
32827: LD_ADDR_VAR 0 4
32831: PUSH
32832: LD_VAR 0 5
32836: PUSH
32837: FOR_IN
32838: IFFALSE 32874
// if GetTech ( i , side ) <> state_researched then
32840: LD_VAR 0 4
32844: PPUSH
32845: LD_VAR 0 1
32849: PPUSH
32850: CALL_OW 321
32854: PUSH
32855: LD_INT 2
32857: NONEQUAL
32858: IFFALSE 32872
// begin result := false ;
32860: LD_ADDR_VAR 0 3
32864: PUSH
32865: LD_INT 0
32867: ST_TO_ADDR
// exit ;
32868: POP
32869: POP
32870: GO 32876
// end ;
32872: GO 32837
32874: POP
32875: POP
// end ;
32876: LD_VAR 0 3
32880: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32881: LD_INT 0
32883: PPUSH
32884: PPUSH
32885: PPUSH
32886: PPUSH
32887: PPUSH
32888: PPUSH
32889: PPUSH
32890: PPUSH
32891: PPUSH
32892: PPUSH
32893: PPUSH
32894: PPUSH
32895: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32896: LD_VAR 0 1
32900: NOT
32901: PUSH
32902: LD_VAR 0 1
32906: PPUSH
32907: CALL_OW 257
32911: PUSH
32912: LD_INT 9
32914: NONEQUAL
32915: OR
32916: IFFALSE 32920
// exit ;
32918: GO 33493
// side := GetSide ( unit ) ;
32920: LD_ADDR_VAR 0 9
32924: PUSH
32925: LD_VAR 0 1
32929: PPUSH
32930: CALL_OW 255
32934: ST_TO_ADDR
// tech_space := tech_spacanom ;
32935: LD_ADDR_VAR 0 12
32939: PUSH
32940: LD_INT 29
32942: ST_TO_ADDR
// tech_time := tech_taurad ;
32943: LD_ADDR_VAR 0 13
32947: PUSH
32948: LD_INT 28
32950: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32951: LD_ADDR_VAR 0 11
32955: PUSH
32956: LD_VAR 0 1
32960: PPUSH
32961: CALL_OW 310
32965: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32966: LD_VAR 0 11
32970: PPUSH
32971: CALL_OW 247
32975: PUSH
32976: LD_INT 2
32978: EQUAL
32979: IFFALSE 32983
// exit ;
32981: GO 33493
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32983: LD_ADDR_VAR 0 8
32987: PUSH
32988: LD_INT 81
32990: PUSH
32991: LD_VAR 0 9
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 3
33002: PUSH
33003: LD_INT 21
33005: PUSH
33006: LD_INT 3
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PPUSH
33021: CALL_OW 69
33025: ST_TO_ADDR
// if not tmp then
33026: LD_VAR 0 8
33030: NOT
33031: IFFALSE 33035
// exit ;
33033: GO 33493
// if in_unit then
33035: LD_VAR 0 11
33039: IFFALSE 33063
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33041: LD_ADDR_VAR 0 10
33045: PUSH
33046: LD_VAR 0 8
33050: PPUSH
33051: LD_VAR 0 11
33055: PPUSH
33056: CALL_OW 74
33060: ST_TO_ADDR
33061: GO 33083
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33063: LD_ADDR_VAR 0 10
33067: PUSH
33068: LD_VAR 0 8
33072: PPUSH
33073: LD_VAR 0 1
33077: PPUSH
33078: CALL_OW 74
33082: ST_TO_ADDR
// if not enemy then
33083: LD_VAR 0 10
33087: NOT
33088: IFFALSE 33092
// exit ;
33090: GO 33493
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33092: LD_VAR 0 11
33096: PUSH
33097: LD_VAR 0 11
33101: PPUSH
33102: LD_VAR 0 10
33106: PPUSH
33107: CALL_OW 296
33111: PUSH
33112: LD_INT 13
33114: GREATER
33115: AND
33116: PUSH
33117: LD_VAR 0 1
33121: PPUSH
33122: LD_VAR 0 10
33126: PPUSH
33127: CALL_OW 296
33131: PUSH
33132: LD_INT 12
33134: GREATER
33135: OR
33136: IFFALSE 33140
// exit ;
33138: GO 33493
// missile := [ 1 ] ;
33140: LD_ADDR_VAR 0 14
33144: PUSH
33145: LD_INT 1
33147: PUSH
33148: EMPTY
33149: LIST
33150: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33151: LD_VAR 0 9
33155: PPUSH
33156: LD_VAR 0 12
33160: PPUSH
33161: CALL_OW 325
33165: IFFALSE 33194
// missile := Replace ( missile , missile + 1 , 2 ) ;
33167: LD_ADDR_VAR 0 14
33171: PUSH
33172: LD_VAR 0 14
33176: PPUSH
33177: LD_VAR 0 14
33181: PUSH
33182: LD_INT 1
33184: PLUS
33185: PPUSH
33186: LD_INT 2
33188: PPUSH
33189: CALL_OW 1
33193: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33194: LD_VAR 0 9
33198: PPUSH
33199: LD_VAR 0 13
33203: PPUSH
33204: CALL_OW 325
33208: PUSH
33209: LD_VAR 0 10
33213: PPUSH
33214: CALL_OW 255
33218: PPUSH
33219: LD_VAR 0 13
33223: PPUSH
33224: CALL_OW 325
33228: NOT
33229: AND
33230: IFFALSE 33259
// missile := Replace ( missile , missile + 1 , 3 ) ;
33232: LD_ADDR_VAR 0 14
33236: PUSH
33237: LD_VAR 0 14
33241: PPUSH
33242: LD_VAR 0 14
33246: PUSH
33247: LD_INT 1
33249: PLUS
33250: PPUSH
33251: LD_INT 3
33253: PPUSH
33254: CALL_OW 1
33258: ST_TO_ADDR
// if missile < 2 then
33259: LD_VAR 0 14
33263: PUSH
33264: LD_INT 2
33266: LESS
33267: IFFALSE 33271
// exit ;
33269: GO 33493
// x := GetX ( enemy ) ;
33271: LD_ADDR_VAR 0 4
33275: PUSH
33276: LD_VAR 0 10
33280: PPUSH
33281: CALL_OW 250
33285: ST_TO_ADDR
// y := GetY ( enemy ) ;
33286: LD_ADDR_VAR 0 5
33290: PUSH
33291: LD_VAR 0 10
33295: PPUSH
33296: CALL_OW 251
33300: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33301: LD_ADDR_VAR 0 6
33305: PUSH
33306: LD_VAR 0 4
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PPUSH
33315: LD_INT 1
33317: PPUSH
33318: CALL_OW 12
33322: PLUS
33323: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33324: LD_ADDR_VAR 0 7
33328: PUSH
33329: LD_VAR 0 5
33333: PUSH
33334: LD_INT 1
33336: NEG
33337: PPUSH
33338: LD_INT 1
33340: PPUSH
33341: CALL_OW 12
33345: PLUS
33346: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33347: LD_VAR 0 6
33351: PPUSH
33352: LD_VAR 0 7
33356: PPUSH
33357: CALL_OW 488
33361: NOT
33362: IFFALSE 33384
// begin _x := x ;
33364: LD_ADDR_VAR 0 6
33368: PUSH
33369: LD_VAR 0 4
33373: ST_TO_ADDR
// _y := y ;
33374: LD_ADDR_VAR 0 7
33378: PUSH
33379: LD_VAR 0 5
33383: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33384: LD_ADDR_VAR 0 3
33388: PUSH
33389: LD_INT 1
33391: PPUSH
33392: LD_VAR 0 14
33396: PPUSH
33397: CALL_OW 12
33401: ST_TO_ADDR
// case i of 1 :
33402: LD_VAR 0 3
33406: PUSH
33407: LD_INT 1
33409: DOUBLE
33410: EQUAL
33411: IFTRUE 33415
33413: GO 33432
33415: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33416: LD_VAR 0 1
33420: PPUSH
33421: LD_VAR 0 10
33425: PPUSH
33426: CALL_OW 115
33430: GO 33493
33432: LD_INT 2
33434: DOUBLE
33435: EQUAL
33436: IFTRUE 33440
33438: GO 33462
33440: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33441: LD_VAR 0 1
33445: PPUSH
33446: LD_VAR 0 6
33450: PPUSH
33451: LD_VAR 0 7
33455: PPUSH
33456: CALL_OW 153
33460: GO 33493
33462: LD_INT 3
33464: DOUBLE
33465: EQUAL
33466: IFTRUE 33470
33468: GO 33492
33470: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33471: LD_VAR 0 1
33475: PPUSH
33476: LD_VAR 0 6
33480: PPUSH
33481: LD_VAR 0 7
33485: PPUSH
33486: CALL_OW 154
33490: GO 33493
33492: POP
// end ;
33493: LD_VAR 0 2
33497: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33498: LD_INT 0
33500: PPUSH
33501: PPUSH
33502: PPUSH
33503: PPUSH
33504: PPUSH
33505: PPUSH
// if not unit or not building then
33506: LD_VAR 0 1
33510: NOT
33511: PUSH
33512: LD_VAR 0 2
33516: NOT
33517: OR
33518: IFFALSE 33522
// exit ;
33520: GO 33680
// x := GetX ( building ) ;
33522: LD_ADDR_VAR 0 5
33526: PUSH
33527: LD_VAR 0 2
33531: PPUSH
33532: CALL_OW 250
33536: ST_TO_ADDR
// y := GetY ( building ) ;
33537: LD_ADDR_VAR 0 6
33541: PUSH
33542: LD_VAR 0 2
33546: PPUSH
33547: CALL_OW 251
33551: ST_TO_ADDR
// for i = 0 to 5 do
33552: LD_ADDR_VAR 0 4
33556: PUSH
33557: DOUBLE
33558: LD_INT 0
33560: DEC
33561: ST_TO_ADDR
33562: LD_INT 5
33564: PUSH
33565: FOR_TO
33566: IFFALSE 33678
// begin _x := ShiftX ( x , i , 3 ) ;
33568: LD_ADDR_VAR 0 7
33572: PUSH
33573: LD_VAR 0 5
33577: PPUSH
33578: LD_VAR 0 4
33582: PPUSH
33583: LD_INT 3
33585: PPUSH
33586: CALL_OW 272
33590: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33591: LD_ADDR_VAR 0 8
33595: PUSH
33596: LD_VAR 0 6
33600: PPUSH
33601: LD_VAR 0 4
33605: PPUSH
33606: LD_INT 3
33608: PPUSH
33609: CALL_OW 273
33613: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33614: LD_VAR 0 7
33618: PPUSH
33619: LD_VAR 0 8
33623: PPUSH
33624: CALL_OW 488
33628: NOT
33629: IFFALSE 33633
// continue ;
33631: GO 33565
// if HexInfo ( _x , _y ) = 0 then
33633: LD_VAR 0 7
33637: PPUSH
33638: LD_VAR 0 8
33642: PPUSH
33643: CALL_OW 428
33647: PUSH
33648: LD_INT 0
33650: EQUAL
33651: IFFALSE 33676
// begin ComMoveXY ( unit , _x , _y ) ;
33653: LD_VAR 0 1
33657: PPUSH
33658: LD_VAR 0 7
33662: PPUSH
33663: LD_VAR 0 8
33667: PPUSH
33668: CALL_OW 111
// exit ;
33672: POP
33673: POP
33674: GO 33680
// end ; end ;
33676: GO 33565
33678: POP
33679: POP
// end ;
33680: LD_VAR 0 3
33684: RET
// export function ScanBase ( side , base_area ) ; begin
33685: LD_INT 0
33687: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33688: LD_ADDR_VAR 0 3
33692: PUSH
33693: LD_VAR 0 2
33697: PPUSH
33698: LD_INT 81
33700: PUSH
33701: LD_VAR 0 1
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PPUSH
33710: CALL_OW 70
33714: ST_TO_ADDR
// end ;
33715: LD_VAR 0 3
33719: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33720: LD_INT 0
33722: PPUSH
33723: PPUSH
33724: PPUSH
33725: PPUSH
// result := false ;
33726: LD_ADDR_VAR 0 2
33730: PUSH
33731: LD_INT 0
33733: ST_TO_ADDR
// side := GetSide ( unit ) ;
33734: LD_ADDR_VAR 0 3
33738: PUSH
33739: LD_VAR 0 1
33743: PPUSH
33744: CALL_OW 255
33748: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33749: LD_ADDR_VAR 0 4
33753: PUSH
33754: LD_VAR 0 1
33758: PPUSH
33759: CALL_OW 248
33763: ST_TO_ADDR
// case nat of 1 :
33764: LD_VAR 0 4
33768: PUSH
33769: LD_INT 1
33771: DOUBLE
33772: EQUAL
33773: IFTRUE 33777
33775: GO 33788
33777: POP
// tech := tech_lassight ; 2 :
33778: LD_ADDR_VAR 0 5
33782: PUSH
33783: LD_INT 12
33785: ST_TO_ADDR
33786: GO 33827
33788: LD_INT 2
33790: DOUBLE
33791: EQUAL
33792: IFTRUE 33796
33794: GO 33807
33796: POP
// tech := tech_mortar ; 3 :
33797: LD_ADDR_VAR 0 5
33801: PUSH
33802: LD_INT 41
33804: ST_TO_ADDR
33805: GO 33827
33807: LD_INT 3
33809: DOUBLE
33810: EQUAL
33811: IFTRUE 33815
33813: GO 33826
33815: POP
// tech := tech_bazooka ; end ;
33816: LD_ADDR_VAR 0 5
33820: PUSH
33821: LD_INT 44
33823: ST_TO_ADDR
33824: GO 33827
33826: POP
// if Researched ( side , tech ) then
33827: LD_VAR 0 3
33831: PPUSH
33832: LD_VAR 0 5
33836: PPUSH
33837: CALL_OW 325
33841: IFFALSE 33868
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33843: LD_ADDR_VAR 0 2
33847: PUSH
33848: LD_INT 5
33850: PUSH
33851: LD_INT 8
33853: PUSH
33854: LD_INT 9
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: LIST
33861: PUSH
33862: LD_VAR 0 4
33866: ARRAY
33867: ST_TO_ADDR
// end ;
33868: LD_VAR 0 2
33872: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33873: LD_INT 0
33875: PPUSH
33876: PPUSH
33877: PPUSH
// if not mines then
33878: LD_VAR 0 2
33882: NOT
33883: IFFALSE 33887
// exit ;
33885: GO 34031
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33887: LD_ADDR_VAR 0 5
33891: PUSH
33892: LD_INT 81
33894: PUSH
33895: LD_VAR 0 1
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 3
33906: PUSH
33907: LD_INT 21
33909: PUSH
33910: LD_INT 3
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PPUSH
33925: CALL_OW 69
33929: ST_TO_ADDR
// for i in mines do
33930: LD_ADDR_VAR 0 4
33934: PUSH
33935: LD_VAR 0 2
33939: PUSH
33940: FOR_IN
33941: IFFALSE 34029
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33943: LD_VAR 0 4
33947: PUSH
33948: LD_INT 1
33950: ARRAY
33951: PPUSH
33952: LD_VAR 0 4
33956: PUSH
33957: LD_INT 2
33959: ARRAY
33960: PPUSH
33961: CALL_OW 458
33965: NOT
33966: IFFALSE 33970
// continue ;
33968: GO 33940
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33970: LD_VAR 0 4
33974: PUSH
33975: LD_INT 1
33977: ARRAY
33978: PPUSH
33979: LD_VAR 0 4
33983: PUSH
33984: LD_INT 2
33986: ARRAY
33987: PPUSH
33988: CALL_OW 428
33992: PUSH
33993: LD_VAR 0 5
33997: IN
33998: IFFALSE 34027
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34000: LD_VAR 0 4
34004: PUSH
34005: LD_INT 1
34007: ARRAY
34008: PPUSH
34009: LD_VAR 0 4
34013: PUSH
34014: LD_INT 2
34016: ARRAY
34017: PPUSH
34018: LD_VAR 0 1
34022: PPUSH
34023: CALL_OW 456
// end ;
34027: GO 33940
34029: POP
34030: POP
// end ;
34031: LD_VAR 0 3
34035: RET
// export function Count ( array ) ; begin
34036: LD_INT 0
34038: PPUSH
// result := array + 0 ;
34039: LD_ADDR_VAR 0 2
34043: PUSH
34044: LD_VAR 0 1
34048: PUSH
34049: LD_INT 0
34051: PLUS
34052: ST_TO_ADDR
// end ;
34053: LD_VAR 0 2
34057: RET
// export function IsEmpty ( building ) ; begin
34058: LD_INT 0
34060: PPUSH
// if not building then
34061: LD_VAR 0 1
34065: NOT
34066: IFFALSE 34070
// exit ;
34068: GO 34113
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34070: LD_ADDR_VAR 0 2
34074: PUSH
34075: LD_VAR 0 1
34079: PUSH
34080: LD_INT 22
34082: PUSH
34083: LD_VAR 0 1
34087: PPUSH
34088: CALL_OW 255
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 58
34099: PUSH
34100: EMPTY
34101: LIST
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PPUSH
34107: CALL_OW 69
34111: IN
34112: ST_TO_ADDR
// end ;
34113: LD_VAR 0 2
34117: RET
// export function IsNotFull ( building ) ; var places ; begin
34118: LD_INT 0
34120: PPUSH
34121: PPUSH
// if not building then
34122: LD_VAR 0 1
34126: NOT
34127: IFFALSE 34131
// exit ;
34129: GO 34159
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34131: LD_ADDR_VAR 0 2
34135: PUSH
34136: LD_VAR 0 1
34140: PPUSH
34141: LD_INT 3
34143: PUSH
34144: LD_INT 62
34146: PUSH
34147: EMPTY
34148: LIST
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PPUSH
34154: CALL_OW 72
34158: ST_TO_ADDR
// end ;
34159: LD_VAR 0 2
34163: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34164: LD_INT 0
34166: PPUSH
34167: PPUSH
34168: PPUSH
34169: PPUSH
// tmp := [ ] ;
34170: LD_ADDR_VAR 0 3
34174: PUSH
34175: EMPTY
34176: ST_TO_ADDR
// list := [ ] ;
34177: LD_ADDR_VAR 0 5
34181: PUSH
34182: EMPTY
34183: ST_TO_ADDR
// for i = 16 to 25 do
34184: LD_ADDR_VAR 0 4
34188: PUSH
34189: DOUBLE
34190: LD_INT 16
34192: DEC
34193: ST_TO_ADDR
34194: LD_INT 25
34196: PUSH
34197: FOR_TO
34198: IFFALSE 34271
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34200: LD_ADDR_VAR 0 3
34204: PUSH
34205: LD_VAR 0 3
34209: PUSH
34210: LD_INT 22
34212: PUSH
34213: LD_VAR 0 1
34217: PPUSH
34218: CALL_OW 255
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 91
34229: PUSH
34230: LD_VAR 0 1
34234: PUSH
34235: LD_INT 6
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 30
34245: PUSH
34246: LD_VAR 0 4
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: LIST
34259: PUSH
34260: EMPTY
34261: LIST
34262: PPUSH
34263: CALL_OW 69
34267: ADD
34268: ST_TO_ADDR
34269: GO 34197
34271: POP
34272: POP
// for i = 1 to tmp do
34273: LD_ADDR_VAR 0 4
34277: PUSH
34278: DOUBLE
34279: LD_INT 1
34281: DEC
34282: ST_TO_ADDR
34283: LD_VAR 0 3
34287: PUSH
34288: FOR_TO
34289: IFFALSE 34377
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34291: LD_ADDR_VAR 0 5
34295: PUSH
34296: LD_VAR 0 5
34300: PUSH
34301: LD_VAR 0 3
34305: PUSH
34306: LD_VAR 0 4
34310: ARRAY
34311: PPUSH
34312: CALL_OW 266
34316: PUSH
34317: LD_VAR 0 3
34321: PUSH
34322: LD_VAR 0 4
34326: ARRAY
34327: PPUSH
34328: CALL_OW 250
34332: PUSH
34333: LD_VAR 0 3
34337: PUSH
34338: LD_VAR 0 4
34342: ARRAY
34343: PPUSH
34344: CALL_OW 251
34348: PUSH
34349: LD_VAR 0 3
34353: PUSH
34354: LD_VAR 0 4
34358: ARRAY
34359: PPUSH
34360: CALL_OW 254
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: PUSH
34371: EMPTY
34372: LIST
34373: ADD
34374: ST_TO_ADDR
34375: GO 34288
34377: POP
34378: POP
// result := list ;
34379: LD_ADDR_VAR 0 2
34383: PUSH
34384: LD_VAR 0 5
34388: ST_TO_ADDR
// end ;
34389: LD_VAR 0 2
34393: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34394: LD_INT 0
34396: PPUSH
34397: PPUSH
34398: PPUSH
34399: PPUSH
34400: PPUSH
34401: PPUSH
34402: PPUSH
// if not factory then
34403: LD_VAR 0 1
34407: NOT
34408: IFFALSE 34412
// exit ;
34410: GO 35005
// if control = control_apeman then
34412: LD_VAR 0 4
34416: PUSH
34417: LD_INT 5
34419: EQUAL
34420: IFFALSE 34529
// begin tmp := UnitsInside ( factory ) ;
34422: LD_ADDR_VAR 0 8
34426: PUSH
34427: LD_VAR 0 1
34431: PPUSH
34432: CALL_OW 313
34436: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34437: LD_VAR 0 8
34441: PPUSH
34442: LD_INT 25
34444: PUSH
34445: LD_INT 12
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PPUSH
34452: CALL_OW 72
34456: NOT
34457: IFFALSE 34467
// control := control_manual ;
34459: LD_ADDR_VAR 0 4
34463: PUSH
34464: LD_INT 1
34466: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34467: LD_ADDR_VAR 0 8
34471: PUSH
34472: LD_VAR 0 1
34476: PPUSH
34477: CALL 34164 0 1
34481: ST_TO_ADDR
// if tmp then
34482: LD_VAR 0 8
34486: IFFALSE 34529
// begin for i in tmp do
34488: LD_ADDR_VAR 0 7
34492: PUSH
34493: LD_VAR 0 8
34497: PUSH
34498: FOR_IN
34499: IFFALSE 34527
// if i [ 1 ] = b_ext_radio then
34501: LD_VAR 0 7
34505: PUSH
34506: LD_INT 1
34508: ARRAY
34509: PUSH
34510: LD_INT 22
34512: EQUAL
34513: IFFALSE 34525
// begin control := control_remote ;
34515: LD_ADDR_VAR 0 4
34519: PUSH
34520: LD_INT 2
34522: ST_TO_ADDR
// break ;
34523: GO 34527
// end ;
34525: GO 34498
34527: POP
34528: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34529: LD_VAR 0 1
34533: PPUSH
34534: LD_VAR 0 2
34538: PPUSH
34539: LD_VAR 0 3
34543: PPUSH
34544: LD_VAR 0 4
34548: PPUSH
34549: LD_VAR 0 5
34553: PPUSH
34554: CALL_OW 448
34558: IFFALSE 34593
// begin result := [ chassis , engine , control , weapon ] ;
34560: LD_ADDR_VAR 0 6
34564: PUSH
34565: LD_VAR 0 2
34569: PUSH
34570: LD_VAR 0 3
34574: PUSH
34575: LD_VAR 0 4
34579: PUSH
34580: LD_VAR 0 5
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: ST_TO_ADDR
// exit ;
34591: GO 35005
// end ; _chassis := AvailableChassisList ( factory ) ;
34593: LD_ADDR_VAR 0 9
34597: PUSH
34598: LD_VAR 0 1
34602: PPUSH
34603: CALL_OW 475
34607: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34608: LD_ADDR_VAR 0 11
34612: PUSH
34613: LD_VAR 0 1
34617: PPUSH
34618: CALL_OW 476
34622: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34623: LD_ADDR_VAR 0 12
34627: PUSH
34628: LD_VAR 0 1
34632: PPUSH
34633: CALL_OW 477
34637: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34638: LD_ADDR_VAR 0 10
34642: PUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: CALL_OW 478
34652: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34653: LD_VAR 0 9
34657: NOT
34658: PUSH
34659: LD_VAR 0 11
34663: NOT
34664: OR
34665: PUSH
34666: LD_VAR 0 12
34670: NOT
34671: OR
34672: PUSH
34673: LD_VAR 0 10
34677: NOT
34678: OR
34679: IFFALSE 34714
// begin result := [ chassis , engine , control , weapon ] ;
34681: LD_ADDR_VAR 0 6
34685: PUSH
34686: LD_VAR 0 2
34690: PUSH
34691: LD_VAR 0 3
34695: PUSH
34696: LD_VAR 0 4
34700: PUSH
34701: LD_VAR 0 5
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: ST_TO_ADDR
// exit ;
34712: GO 35005
// end ; if not chassis in _chassis then
34714: LD_VAR 0 2
34718: PUSH
34719: LD_VAR 0 9
34723: IN
34724: NOT
34725: IFFALSE 34751
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34727: LD_ADDR_VAR 0 2
34731: PUSH
34732: LD_VAR 0 9
34736: PUSH
34737: LD_INT 1
34739: PPUSH
34740: LD_VAR 0 9
34744: PPUSH
34745: CALL_OW 12
34749: ARRAY
34750: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34751: LD_VAR 0 2
34755: PPUSH
34756: LD_VAR 0 3
34760: PPUSH
34761: CALL 35010 0 2
34765: NOT
34766: IFFALSE 34825
// repeat engine := _engine [ 1 ] ;
34768: LD_ADDR_VAR 0 3
34772: PUSH
34773: LD_VAR 0 11
34777: PUSH
34778: LD_INT 1
34780: ARRAY
34781: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34782: LD_ADDR_VAR 0 11
34786: PUSH
34787: LD_VAR 0 11
34791: PPUSH
34792: LD_INT 1
34794: PPUSH
34795: CALL_OW 3
34799: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34800: LD_VAR 0 2
34804: PPUSH
34805: LD_VAR 0 3
34809: PPUSH
34810: CALL 35010 0 2
34814: PUSH
34815: LD_VAR 0 11
34819: PUSH
34820: EMPTY
34821: EQUAL
34822: OR
34823: IFFALSE 34768
// if not control in _control then
34825: LD_VAR 0 4
34829: PUSH
34830: LD_VAR 0 12
34834: IN
34835: NOT
34836: IFFALSE 34862
// control := _control [ rand ( 1 , _control ) ] ;
34838: LD_ADDR_VAR 0 4
34842: PUSH
34843: LD_VAR 0 12
34847: PUSH
34848: LD_INT 1
34850: PPUSH
34851: LD_VAR 0 12
34855: PPUSH
34856: CALL_OW 12
34860: ARRAY
34861: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34862: LD_VAR 0 2
34866: PPUSH
34867: LD_VAR 0 5
34871: PPUSH
34872: CALL 35230 0 2
34876: NOT
34877: IFFALSE 34936
// repeat weapon := _weapon [ 1 ] ;
34879: LD_ADDR_VAR 0 5
34883: PUSH
34884: LD_VAR 0 10
34888: PUSH
34889: LD_INT 1
34891: ARRAY
34892: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34893: LD_ADDR_VAR 0 10
34897: PUSH
34898: LD_VAR 0 10
34902: PPUSH
34903: LD_INT 1
34905: PPUSH
34906: CALL_OW 3
34910: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34911: LD_VAR 0 2
34915: PPUSH
34916: LD_VAR 0 5
34920: PPUSH
34921: CALL 35230 0 2
34925: PUSH
34926: LD_VAR 0 10
34930: PUSH
34931: EMPTY
34932: EQUAL
34933: OR
34934: IFFALSE 34879
// result := [ ] ;
34936: LD_ADDR_VAR 0 6
34940: PUSH
34941: EMPTY
34942: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34943: LD_VAR 0 1
34947: PPUSH
34948: LD_VAR 0 2
34952: PPUSH
34953: LD_VAR 0 3
34957: PPUSH
34958: LD_VAR 0 4
34962: PPUSH
34963: LD_VAR 0 5
34967: PPUSH
34968: CALL_OW 448
34972: IFFALSE 35005
// result := [ chassis , engine , control , weapon ] ;
34974: LD_ADDR_VAR 0 6
34978: PUSH
34979: LD_VAR 0 2
34983: PUSH
34984: LD_VAR 0 3
34988: PUSH
34989: LD_VAR 0 4
34993: PUSH
34994: LD_VAR 0 5
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: ST_TO_ADDR
// end ;
35005: LD_VAR 0 6
35009: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35010: LD_INT 0
35012: PPUSH
// if not chassis or not engine then
35013: LD_VAR 0 1
35017: NOT
35018: PUSH
35019: LD_VAR 0 2
35023: NOT
35024: OR
35025: IFFALSE 35029
// exit ;
35027: GO 35225
// case engine of engine_solar :
35029: LD_VAR 0 2
35033: PUSH
35034: LD_INT 2
35036: DOUBLE
35037: EQUAL
35038: IFTRUE 35042
35040: GO 35080
35042: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35043: LD_ADDR_VAR 0 3
35047: PUSH
35048: LD_INT 11
35050: PUSH
35051: LD_INT 12
35053: PUSH
35054: LD_INT 13
35056: PUSH
35057: LD_INT 14
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: LD_INT 2
35065: PUSH
35066: LD_INT 3
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: ST_TO_ADDR
35078: GO 35209
35080: LD_INT 1
35082: DOUBLE
35083: EQUAL
35084: IFTRUE 35088
35086: GO 35150
35088: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35089: LD_ADDR_VAR 0 3
35093: PUSH
35094: LD_INT 11
35096: PUSH
35097: LD_INT 12
35099: PUSH
35100: LD_INT 13
35102: PUSH
35103: LD_INT 14
35105: PUSH
35106: LD_INT 1
35108: PUSH
35109: LD_INT 2
35111: PUSH
35112: LD_INT 3
35114: PUSH
35115: LD_INT 4
35117: PUSH
35118: LD_INT 5
35120: PUSH
35121: LD_INT 21
35123: PUSH
35124: LD_INT 23
35126: PUSH
35127: LD_INT 22
35129: PUSH
35130: LD_INT 24
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: ST_TO_ADDR
35148: GO 35209
35150: LD_INT 3
35152: DOUBLE
35153: EQUAL
35154: IFTRUE 35158
35156: GO 35208
35158: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35159: LD_ADDR_VAR 0 3
35163: PUSH
35164: LD_INT 13
35166: PUSH
35167: LD_INT 14
35169: PUSH
35170: LD_INT 2
35172: PUSH
35173: LD_INT 3
35175: PUSH
35176: LD_INT 4
35178: PUSH
35179: LD_INT 5
35181: PUSH
35182: LD_INT 21
35184: PUSH
35185: LD_INT 22
35187: PUSH
35188: LD_INT 23
35190: PUSH
35191: LD_INT 24
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: ST_TO_ADDR
35206: GO 35209
35208: POP
// result := ( chassis in result ) ;
35209: LD_ADDR_VAR 0 3
35213: PUSH
35214: LD_VAR 0 1
35218: PUSH
35219: LD_VAR 0 3
35223: IN
35224: ST_TO_ADDR
// end ;
35225: LD_VAR 0 3
35229: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35230: LD_INT 0
35232: PPUSH
// if not chassis or not weapon then
35233: LD_VAR 0 1
35237: NOT
35238: PUSH
35239: LD_VAR 0 2
35243: NOT
35244: OR
35245: IFFALSE 35249
// exit ;
35247: GO 36309
// case weapon of us_machine_gun :
35249: LD_VAR 0 2
35253: PUSH
35254: LD_INT 2
35256: DOUBLE
35257: EQUAL
35258: IFTRUE 35262
35260: GO 35292
35262: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35263: LD_ADDR_VAR 0 3
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: LD_INT 2
35273: PUSH
35274: LD_INT 3
35276: PUSH
35277: LD_INT 4
35279: PUSH
35280: LD_INT 5
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: ST_TO_ADDR
35290: GO 36293
35292: LD_INT 3
35294: DOUBLE
35295: EQUAL
35296: IFTRUE 35300
35298: GO 35330
35300: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35301: LD_ADDR_VAR 0 3
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: LD_INT 2
35311: PUSH
35312: LD_INT 3
35314: PUSH
35315: LD_INT 4
35317: PUSH
35318: LD_INT 5
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: ST_TO_ADDR
35328: GO 36293
35330: LD_INT 11
35332: DOUBLE
35333: EQUAL
35334: IFTRUE 35338
35336: GO 35368
35338: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35339: LD_ADDR_VAR 0 3
35343: PUSH
35344: LD_INT 1
35346: PUSH
35347: LD_INT 2
35349: PUSH
35350: LD_INT 3
35352: PUSH
35353: LD_INT 4
35355: PUSH
35356: LD_INT 5
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: ST_TO_ADDR
35366: GO 36293
35368: LD_INT 4
35370: DOUBLE
35371: EQUAL
35372: IFTRUE 35376
35374: GO 35402
35376: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35377: LD_ADDR_VAR 0 3
35381: PUSH
35382: LD_INT 2
35384: PUSH
35385: LD_INT 3
35387: PUSH
35388: LD_INT 4
35390: PUSH
35391: LD_INT 5
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: ST_TO_ADDR
35400: GO 36293
35402: LD_INT 5
35404: DOUBLE
35405: EQUAL
35406: IFTRUE 35410
35408: GO 35436
35410: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35411: LD_ADDR_VAR 0 3
35415: PUSH
35416: LD_INT 2
35418: PUSH
35419: LD_INT 3
35421: PUSH
35422: LD_INT 4
35424: PUSH
35425: LD_INT 5
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: ST_TO_ADDR
35434: GO 36293
35436: LD_INT 9
35438: DOUBLE
35439: EQUAL
35440: IFTRUE 35444
35442: GO 35470
35444: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35445: LD_ADDR_VAR 0 3
35449: PUSH
35450: LD_INT 2
35452: PUSH
35453: LD_INT 3
35455: PUSH
35456: LD_INT 4
35458: PUSH
35459: LD_INT 5
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: ST_TO_ADDR
35468: GO 36293
35470: LD_INT 7
35472: DOUBLE
35473: EQUAL
35474: IFTRUE 35478
35476: GO 35504
35478: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35479: LD_ADDR_VAR 0 3
35483: PUSH
35484: LD_INT 2
35486: PUSH
35487: LD_INT 3
35489: PUSH
35490: LD_INT 4
35492: PUSH
35493: LD_INT 5
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: ST_TO_ADDR
35502: GO 36293
35504: LD_INT 12
35506: DOUBLE
35507: EQUAL
35508: IFTRUE 35512
35510: GO 35538
35512: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35513: LD_ADDR_VAR 0 3
35517: PUSH
35518: LD_INT 2
35520: PUSH
35521: LD_INT 3
35523: PUSH
35524: LD_INT 4
35526: PUSH
35527: LD_INT 5
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: ST_TO_ADDR
35536: GO 36293
35538: LD_INT 13
35540: DOUBLE
35541: EQUAL
35542: IFTRUE 35546
35544: GO 35572
35546: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35547: LD_ADDR_VAR 0 3
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: LD_INT 3
35557: PUSH
35558: LD_INT 4
35560: PUSH
35561: LD_INT 5
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: ST_TO_ADDR
35570: GO 36293
35572: LD_INT 14
35574: DOUBLE
35575: EQUAL
35576: IFTRUE 35580
35578: GO 35598
35580: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35581: LD_ADDR_VAR 0 3
35585: PUSH
35586: LD_INT 4
35588: PUSH
35589: LD_INT 5
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: ST_TO_ADDR
35596: GO 36293
35598: LD_INT 6
35600: DOUBLE
35601: EQUAL
35602: IFTRUE 35606
35604: GO 35624
35606: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35607: LD_ADDR_VAR 0 3
35611: PUSH
35612: LD_INT 4
35614: PUSH
35615: LD_INT 5
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: ST_TO_ADDR
35622: GO 36293
35624: LD_INT 10
35626: DOUBLE
35627: EQUAL
35628: IFTRUE 35632
35630: GO 35650
35632: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35633: LD_ADDR_VAR 0 3
35637: PUSH
35638: LD_INT 4
35640: PUSH
35641: LD_INT 5
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: ST_TO_ADDR
35648: GO 36293
35650: LD_INT 22
35652: DOUBLE
35653: EQUAL
35654: IFTRUE 35658
35656: GO 35684
35658: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35659: LD_ADDR_VAR 0 3
35663: PUSH
35664: LD_INT 11
35666: PUSH
35667: LD_INT 12
35669: PUSH
35670: LD_INT 13
35672: PUSH
35673: LD_INT 14
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: ST_TO_ADDR
35682: GO 36293
35684: LD_INT 23
35686: DOUBLE
35687: EQUAL
35688: IFTRUE 35692
35690: GO 35718
35692: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35693: LD_ADDR_VAR 0 3
35697: PUSH
35698: LD_INT 11
35700: PUSH
35701: LD_INT 12
35703: PUSH
35704: LD_INT 13
35706: PUSH
35707: LD_INT 14
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: ST_TO_ADDR
35716: GO 36293
35718: LD_INT 24
35720: DOUBLE
35721: EQUAL
35722: IFTRUE 35726
35724: GO 35752
35726: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35727: LD_ADDR_VAR 0 3
35731: PUSH
35732: LD_INT 11
35734: PUSH
35735: LD_INT 12
35737: PUSH
35738: LD_INT 13
35740: PUSH
35741: LD_INT 14
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: ST_TO_ADDR
35750: GO 36293
35752: LD_INT 30
35754: DOUBLE
35755: EQUAL
35756: IFTRUE 35760
35758: GO 35786
35760: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35761: LD_ADDR_VAR 0 3
35765: PUSH
35766: LD_INT 11
35768: PUSH
35769: LD_INT 12
35771: PUSH
35772: LD_INT 13
35774: PUSH
35775: LD_INT 14
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: ST_TO_ADDR
35784: GO 36293
35786: LD_INT 25
35788: DOUBLE
35789: EQUAL
35790: IFTRUE 35794
35792: GO 35812
35794: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35795: LD_ADDR_VAR 0 3
35799: PUSH
35800: LD_INT 13
35802: PUSH
35803: LD_INT 14
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: ST_TO_ADDR
35810: GO 36293
35812: LD_INT 27
35814: DOUBLE
35815: EQUAL
35816: IFTRUE 35820
35818: GO 35838
35820: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35821: LD_ADDR_VAR 0 3
35825: PUSH
35826: LD_INT 13
35828: PUSH
35829: LD_INT 14
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: ST_TO_ADDR
35836: GO 36293
35838: LD_INT 92
35840: DOUBLE
35841: EQUAL
35842: IFTRUE 35846
35844: GO 35872
35846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35847: LD_ADDR_VAR 0 3
35851: PUSH
35852: LD_INT 11
35854: PUSH
35855: LD_INT 12
35857: PUSH
35858: LD_INT 13
35860: PUSH
35861: LD_INT 14
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: ST_TO_ADDR
35870: GO 36293
35872: LD_INT 28
35874: DOUBLE
35875: EQUAL
35876: IFTRUE 35880
35878: GO 35898
35880: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35881: LD_ADDR_VAR 0 3
35885: PUSH
35886: LD_INT 13
35888: PUSH
35889: LD_INT 14
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: ST_TO_ADDR
35896: GO 36293
35898: LD_INT 29
35900: DOUBLE
35901: EQUAL
35902: IFTRUE 35906
35904: GO 35924
35906: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35907: LD_ADDR_VAR 0 3
35911: PUSH
35912: LD_INT 13
35914: PUSH
35915: LD_INT 14
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: ST_TO_ADDR
35922: GO 36293
35924: LD_INT 31
35926: DOUBLE
35927: EQUAL
35928: IFTRUE 35932
35930: GO 35950
35932: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35933: LD_ADDR_VAR 0 3
35937: PUSH
35938: LD_INT 13
35940: PUSH
35941: LD_INT 14
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: ST_TO_ADDR
35948: GO 36293
35950: LD_INT 26
35952: DOUBLE
35953: EQUAL
35954: IFTRUE 35958
35956: GO 35976
35958: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35959: LD_ADDR_VAR 0 3
35963: PUSH
35964: LD_INT 13
35966: PUSH
35967: LD_INT 14
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: ST_TO_ADDR
35974: GO 36293
35976: LD_INT 42
35978: DOUBLE
35979: EQUAL
35980: IFTRUE 35984
35982: GO 36010
35984: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35985: LD_ADDR_VAR 0 3
35989: PUSH
35990: LD_INT 21
35992: PUSH
35993: LD_INT 22
35995: PUSH
35996: LD_INT 23
35998: PUSH
35999: LD_INT 24
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: ST_TO_ADDR
36008: GO 36293
36010: LD_INT 43
36012: DOUBLE
36013: EQUAL
36014: IFTRUE 36018
36016: GO 36044
36018: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36019: LD_ADDR_VAR 0 3
36023: PUSH
36024: LD_INT 21
36026: PUSH
36027: LD_INT 22
36029: PUSH
36030: LD_INT 23
36032: PUSH
36033: LD_INT 24
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: ST_TO_ADDR
36042: GO 36293
36044: LD_INT 44
36046: DOUBLE
36047: EQUAL
36048: IFTRUE 36052
36050: GO 36078
36052: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36053: LD_ADDR_VAR 0 3
36057: PUSH
36058: LD_INT 21
36060: PUSH
36061: LD_INT 22
36063: PUSH
36064: LD_INT 23
36066: PUSH
36067: LD_INT 24
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: ST_TO_ADDR
36076: GO 36293
36078: LD_INT 45
36080: DOUBLE
36081: EQUAL
36082: IFTRUE 36086
36084: GO 36112
36086: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36087: LD_ADDR_VAR 0 3
36091: PUSH
36092: LD_INT 21
36094: PUSH
36095: LD_INT 22
36097: PUSH
36098: LD_INT 23
36100: PUSH
36101: LD_INT 24
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: ST_TO_ADDR
36110: GO 36293
36112: LD_INT 49
36114: DOUBLE
36115: EQUAL
36116: IFTRUE 36120
36118: GO 36146
36120: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36121: LD_ADDR_VAR 0 3
36125: PUSH
36126: LD_INT 21
36128: PUSH
36129: LD_INT 22
36131: PUSH
36132: LD_INT 23
36134: PUSH
36135: LD_INT 24
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: ST_TO_ADDR
36144: GO 36293
36146: LD_INT 51
36148: DOUBLE
36149: EQUAL
36150: IFTRUE 36154
36152: GO 36180
36154: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36155: LD_ADDR_VAR 0 3
36159: PUSH
36160: LD_INT 21
36162: PUSH
36163: LD_INT 22
36165: PUSH
36166: LD_INT 23
36168: PUSH
36169: LD_INT 24
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: ST_TO_ADDR
36178: GO 36293
36180: LD_INT 52
36182: DOUBLE
36183: EQUAL
36184: IFTRUE 36188
36186: GO 36214
36188: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36189: LD_ADDR_VAR 0 3
36193: PUSH
36194: LD_INT 21
36196: PUSH
36197: LD_INT 22
36199: PUSH
36200: LD_INT 23
36202: PUSH
36203: LD_INT 24
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: ST_TO_ADDR
36212: GO 36293
36214: LD_INT 53
36216: DOUBLE
36217: EQUAL
36218: IFTRUE 36222
36220: GO 36240
36222: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36223: LD_ADDR_VAR 0 3
36227: PUSH
36228: LD_INT 23
36230: PUSH
36231: LD_INT 24
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: ST_TO_ADDR
36238: GO 36293
36240: LD_INT 46
36242: DOUBLE
36243: EQUAL
36244: IFTRUE 36248
36246: GO 36266
36248: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36249: LD_ADDR_VAR 0 3
36253: PUSH
36254: LD_INT 23
36256: PUSH
36257: LD_INT 24
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: ST_TO_ADDR
36264: GO 36293
36266: LD_INT 47
36268: DOUBLE
36269: EQUAL
36270: IFTRUE 36274
36272: GO 36292
36274: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36275: LD_ADDR_VAR 0 3
36279: PUSH
36280: LD_INT 23
36282: PUSH
36283: LD_INT 24
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: ST_TO_ADDR
36290: GO 36293
36292: POP
// result := ( chassis in result ) ;
36293: LD_ADDR_VAR 0 3
36297: PUSH
36298: LD_VAR 0 1
36302: PUSH
36303: LD_VAR 0 3
36307: IN
36308: ST_TO_ADDR
// end ;
36309: LD_VAR 0 3
36313: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36314: LD_INT 0
36316: PPUSH
36317: PPUSH
36318: PPUSH
36319: PPUSH
36320: PPUSH
36321: PPUSH
36322: PPUSH
// result := array ;
36323: LD_ADDR_VAR 0 5
36327: PUSH
36328: LD_VAR 0 1
36332: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36333: LD_VAR 0 1
36337: NOT
36338: PUSH
36339: LD_VAR 0 2
36343: NOT
36344: OR
36345: PUSH
36346: LD_VAR 0 3
36350: NOT
36351: OR
36352: PUSH
36353: LD_VAR 0 2
36357: PUSH
36358: LD_VAR 0 1
36362: GREATER
36363: OR
36364: PUSH
36365: LD_VAR 0 3
36369: PUSH
36370: LD_VAR 0 1
36374: GREATER
36375: OR
36376: IFFALSE 36380
// exit ;
36378: GO 36676
// if direction then
36380: LD_VAR 0 4
36384: IFFALSE 36448
// begin d := 1 ;
36386: LD_ADDR_VAR 0 9
36390: PUSH
36391: LD_INT 1
36393: ST_TO_ADDR
// if i_from > i_to then
36394: LD_VAR 0 2
36398: PUSH
36399: LD_VAR 0 3
36403: GREATER
36404: IFFALSE 36430
// length := ( array - i_from ) + i_to else
36406: LD_ADDR_VAR 0 11
36410: PUSH
36411: LD_VAR 0 1
36415: PUSH
36416: LD_VAR 0 2
36420: MINUS
36421: PUSH
36422: LD_VAR 0 3
36426: PLUS
36427: ST_TO_ADDR
36428: GO 36446
// length := i_to - i_from ;
36430: LD_ADDR_VAR 0 11
36434: PUSH
36435: LD_VAR 0 3
36439: PUSH
36440: LD_VAR 0 2
36444: MINUS
36445: ST_TO_ADDR
// end else
36446: GO 36509
// begin d := - 1 ;
36448: LD_ADDR_VAR 0 9
36452: PUSH
36453: LD_INT 1
36455: NEG
36456: ST_TO_ADDR
// if i_from > i_to then
36457: LD_VAR 0 2
36461: PUSH
36462: LD_VAR 0 3
36466: GREATER
36467: IFFALSE 36487
// length := i_from - i_to else
36469: LD_ADDR_VAR 0 11
36473: PUSH
36474: LD_VAR 0 2
36478: PUSH
36479: LD_VAR 0 3
36483: MINUS
36484: ST_TO_ADDR
36485: GO 36509
// length := ( array - i_to ) + i_from ;
36487: LD_ADDR_VAR 0 11
36491: PUSH
36492: LD_VAR 0 1
36496: PUSH
36497: LD_VAR 0 3
36501: MINUS
36502: PUSH
36503: LD_VAR 0 2
36507: PLUS
36508: ST_TO_ADDR
// end ; if not length then
36509: LD_VAR 0 11
36513: NOT
36514: IFFALSE 36518
// exit ;
36516: GO 36676
// tmp := array ;
36518: LD_ADDR_VAR 0 10
36522: PUSH
36523: LD_VAR 0 1
36527: ST_TO_ADDR
// for i = 1 to length do
36528: LD_ADDR_VAR 0 6
36532: PUSH
36533: DOUBLE
36534: LD_INT 1
36536: DEC
36537: ST_TO_ADDR
36538: LD_VAR 0 11
36542: PUSH
36543: FOR_TO
36544: IFFALSE 36664
// begin for j = 1 to array do
36546: LD_ADDR_VAR 0 7
36550: PUSH
36551: DOUBLE
36552: LD_INT 1
36554: DEC
36555: ST_TO_ADDR
36556: LD_VAR 0 1
36560: PUSH
36561: FOR_TO
36562: IFFALSE 36650
// begin k := j + d ;
36564: LD_ADDR_VAR 0 8
36568: PUSH
36569: LD_VAR 0 7
36573: PUSH
36574: LD_VAR 0 9
36578: PLUS
36579: ST_TO_ADDR
// if k > array then
36580: LD_VAR 0 8
36584: PUSH
36585: LD_VAR 0 1
36589: GREATER
36590: IFFALSE 36600
// k := 1 ;
36592: LD_ADDR_VAR 0 8
36596: PUSH
36597: LD_INT 1
36599: ST_TO_ADDR
// if not k then
36600: LD_VAR 0 8
36604: NOT
36605: IFFALSE 36617
// k := array ;
36607: LD_ADDR_VAR 0 8
36611: PUSH
36612: LD_VAR 0 1
36616: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36617: LD_ADDR_VAR 0 10
36621: PUSH
36622: LD_VAR 0 10
36626: PPUSH
36627: LD_VAR 0 8
36631: PPUSH
36632: LD_VAR 0 1
36636: PUSH
36637: LD_VAR 0 7
36641: ARRAY
36642: PPUSH
36643: CALL_OW 1
36647: ST_TO_ADDR
// end ;
36648: GO 36561
36650: POP
36651: POP
// array := tmp ;
36652: LD_ADDR_VAR 0 1
36656: PUSH
36657: LD_VAR 0 10
36661: ST_TO_ADDR
// end ;
36662: GO 36543
36664: POP
36665: POP
// result := array ;
36666: LD_ADDR_VAR 0 5
36670: PUSH
36671: LD_VAR 0 1
36675: ST_TO_ADDR
// end ;
36676: LD_VAR 0 5
36680: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36681: LD_INT 0
36683: PPUSH
36684: PPUSH
// result := 0 ;
36685: LD_ADDR_VAR 0 3
36689: PUSH
36690: LD_INT 0
36692: ST_TO_ADDR
// if not array or not value in array then
36693: LD_VAR 0 1
36697: NOT
36698: PUSH
36699: LD_VAR 0 2
36703: PUSH
36704: LD_VAR 0 1
36708: IN
36709: NOT
36710: OR
36711: IFFALSE 36715
// exit ;
36713: GO 36769
// for i = 1 to array do
36715: LD_ADDR_VAR 0 4
36719: PUSH
36720: DOUBLE
36721: LD_INT 1
36723: DEC
36724: ST_TO_ADDR
36725: LD_VAR 0 1
36729: PUSH
36730: FOR_TO
36731: IFFALSE 36767
// if value = array [ i ] then
36733: LD_VAR 0 2
36737: PUSH
36738: LD_VAR 0 1
36742: PUSH
36743: LD_VAR 0 4
36747: ARRAY
36748: EQUAL
36749: IFFALSE 36765
// begin result := i ;
36751: LD_ADDR_VAR 0 3
36755: PUSH
36756: LD_VAR 0 4
36760: ST_TO_ADDR
// exit ;
36761: POP
36762: POP
36763: GO 36769
// end ;
36765: GO 36730
36767: POP
36768: POP
// end ;
36769: LD_VAR 0 3
36773: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36774: LD_INT 0
36776: PPUSH
// vc_chassis := chassis ;
36777: LD_ADDR_OWVAR 37
36781: PUSH
36782: LD_VAR 0 1
36786: ST_TO_ADDR
// vc_engine := engine ;
36787: LD_ADDR_OWVAR 39
36791: PUSH
36792: LD_VAR 0 2
36796: ST_TO_ADDR
// vc_control := control ;
36797: LD_ADDR_OWVAR 38
36801: PUSH
36802: LD_VAR 0 3
36806: ST_TO_ADDR
// vc_weapon := weapon ;
36807: LD_ADDR_OWVAR 40
36811: PUSH
36812: LD_VAR 0 4
36816: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36817: LD_ADDR_OWVAR 41
36821: PUSH
36822: LD_VAR 0 5
36826: ST_TO_ADDR
// end ;
36827: LD_VAR 0 6
36831: RET
// export function WantPlant ( unit ) ; var task ; begin
36832: LD_INT 0
36834: PPUSH
36835: PPUSH
// result := false ;
36836: LD_ADDR_VAR 0 2
36840: PUSH
36841: LD_INT 0
36843: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36844: LD_ADDR_VAR 0 3
36848: PUSH
36849: LD_VAR 0 1
36853: PPUSH
36854: CALL_OW 437
36858: ST_TO_ADDR
// if task then
36859: LD_VAR 0 3
36863: IFFALSE 36891
// if task [ 1 ] [ 1 ] = p then
36865: LD_VAR 0 3
36869: PUSH
36870: LD_INT 1
36872: ARRAY
36873: PUSH
36874: LD_INT 1
36876: ARRAY
36877: PUSH
36878: LD_STRING p
36880: EQUAL
36881: IFFALSE 36891
// result := true ;
36883: LD_ADDR_VAR 0 2
36887: PUSH
36888: LD_INT 1
36890: ST_TO_ADDR
// end ;
36891: LD_VAR 0 2
36895: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36896: LD_INT 0
36898: PPUSH
36899: PPUSH
36900: PPUSH
36901: PPUSH
// if pos < 1 then
36902: LD_VAR 0 2
36906: PUSH
36907: LD_INT 1
36909: LESS
36910: IFFALSE 36914
// exit ;
36912: GO 37217
// if pos = 1 then
36914: LD_VAR 0 2
36918: PUSH
36919: LD_INT 1
36921: EQUAL
36922: IFFALSE 36955
// result := Replace ( arr , pos [ 1 ] , value ) else
36924: LD_ADDR_VAR 0 4
36928: PUSH
36929: LD_VAR 0 1
36933: PPUSH
36934: LD_VAR 0 2
36938: PUSH
36939: LD_INT 1
36941: ARRAY
36942: PPUSH
36943: LD_VAR 0 3
36947: PPUSH
36948: CALL_OW 1
36952: ST_TO_ADDR
36953: GO 37217
// begin tmp := arr ;
36955: LD_ADDR_VAR 0 6
36959: PUSH
36960: LD_VAR 0 1
36964: ST_TO_ADDR
// s_arr := [ tmp ] ;
36965: LD_ADDR_VAR 0 7
36969: PUSH
36970: LD_VAR 0 6
36974: PUSH
36975: EMPTY
36976: LIST
36977: ST_TO_ADDR
// for i = 1 to pos - 1 do
36978: LD_ADDR_VAR 0 5
36982: PUSH
36983: DOUBLE
36984: LD_INT 1
36986: DEC
36987: ST_TO_ADDR
36988: LD_VAR 0 2
36992: PUSH
36993: LD_INT 1
36995: MINUS
36996: PUSH
36997: FOR_TO
36998: IFFALSE 37043
// begin tmp := tmp [ pos [ i ] ] ;
37000: LD_ADDR_VAR 0 6
37004: PUSH
37005: LD_VAR 0 6
37009: PUSH
37010: LD_VAR 0 2
37014: PUSH
37015: LD_VAR 0 5
37019: ARRAY
37020: ARRAY
37021: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37022: LD_ADDR_VAR 0 7
37026: PUSH
37027: LD_VAR 0 7
37031: PUSH
37032: LD_VAR 0 6
37036: PUSH
37037: EMPTY
37038: LIST
37039: ADD
37040: ST_TO_ADDR
// end ;
37041: GO 36997
37043: POP
37044: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37045: LD_ADDR_VAR 0 6
37049: PUSH
37050: LD_VAR 0 6
37054: PPUSH
37055: LD_VAR 0 2
37059: PUSH
37060: LD_VAR 0 2
37064: ARRAY
37065: PPUSH
37066: LD_VAR 0 3
37070: PPUSH
37071: CALL_OW 1
37075: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37076: LD_ADDR_VAR 0 7
37080: PUSH
37081: LD_VAR 0 7
37085: PPUSH
37086: LD_VAR 0 7
37090: PPUSH
37091: LD_VAR 0 6
37095: PPUSH
37096: CALL_OW 1
37100: ST_TO_ADDR
// for i = s_arr downto 2 do
37101: LD_ADDR_VAR 0 5
37105: PUSH
37106: DOUBLE
37107: LD_VAR 0 7
37111: INC
37112: ST_TO_ADDR
37113: LD_INT 2
37115: PUSH
37116: FOR_DOWNTO
37117: IFFALSE 37201
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37119: LD_ADDR_VAR 0 6
37123: PUSH
37124: LD_VAR 0 7
37128: PUSH
37129: LD_VAR 0 5
37133: PUSH
37134: LD_INT 1
37136: MINUS
37137: ARRAY
37138: PPUSH
37139: LD_VAR 0 2
37143: PUSH
37144: LD_VAR 0 5
37148: PUSH
37149: LD_INT 1
37151: MINUS
37152: ARRAY
37153: PPUSH
37154: LD_VAR 0 7
37158: PUSH
37159: LD_VAR 0 5
37163: ARRAY
37164: PPUSH
37165: CALL_OW 1
37169: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37170: LD_ADDR_VAR 0 7
37174: PUSH
37175: LD_VAR 0 7
37179: PPUSH
37180: LD_VAR 0 5
37184: PUSH
37185: LD_INT 1
37187: MINUS
37188: PPUSH
37189: LD_VAR 0 6
37193: PPUSH
37194: CALL_OW 1
37198: ST_TO_ADDR
// end ;
37199: GO 37116
37201: POP
37202: POP
// result := s_arr [ 1 ] ;
37203: LD_ADDR_VAR 0 4
37207: PUSH
37208: LD_VAR 0 7
37212: PUSH
37213: LD_INT 1
37215: ARRAY
37216: ST_TO_ADDR
// end ; end ;
37217: LD_VAR 0 4
37221: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37222: LD_INT 0
37224: PPUSH
37225: PPUSH
// if not list then
37226: LD_VAR 0 1
37230: NOT
37231: IFFALSE 37235
// exit ;
37233: GO 37326
// i := list [ pos1 ] ;
37235: LD_ADDR_VAR 0 5
37239: PUSH
37240: LD_VAR 0 1
37244: PUSH
37245: LD_VAR 0 2
37249: ARRAY
37250: ST_TO_ADDR
// if not i then
37251: LD_VAR 0 5
37255: NOT
37256: IFFALSE 37260
// exit ;
37258: GO 37326
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37260: LD_ADDR_VAR 0 1
37264: PUSH
37265: LD_VAR 0 1
37269: PPUSH
37270: LD_VAR 0 2
37274: PPUSH
37275: LD_VAR 0 1
37279: PUSH
37280: LD_VAR 0 3
37284: ARRAY
37285: PPUSH
37286: CALL_OW 1
37290: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37291: LD_ADDR_VAR 0 1
37295: PUSH
37296: LD_VAR 0 1
37300: PPUSH
37301: LD_VAR 0 3
37305: PPUSH
37306: LD_VAR 0 5
37310: PPUSH
37311: CALL_OW 1
37315: ST_TO_ADDR
// result := list ;
37316: LD_ADDR_VAR 0 4
37320: PUSH
37321: LD_VAR 0 1
37325: ST_TO_ADDR
// end ;
37326: LD_VAR 0 4
37330: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37331: LD_INT 0
37333: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37334: LD_ADDR_VAR 0 5
37338: PUSH
37339: LD_VAR 0 1
37343: PPUSH
37344: CALL_OW 250
37348: PPUSH
37349: LD_VAR 0 1
37353: PPUSH
37354: CALL_OW 251
37358: PPUSH
37359: LD_VAR 0 2
37363: PPUSH
37364: LD_VAR 0 3
37368: PPUSH
37369: LD_VAR 0 4
37373: PPUSH
37374: CALL 37752 0 5
37378: ST_TO_ADDR
// end ;
37379: LD_VAR 0 5
37383: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37384: LD_INT 0
37386: PPUSH
37387: PPUSH
37388: PPUSH
37389: PPUSH
// if not list or not unit then
37390: LD_VAR 0 2
37394: NOT
37395: PUSH
37396: LD_VAR 0 1
37400: NOT
37401: OR
37402: IFFALSE 37406
// exit ;
37404: GO 37747
// result := [ ] ;
37406: LD_ADDR_VAR 0 5
37410: PUSH
37411: EMPTY
37412: ST_TO_ADDR
// for i in list do
37413: LD_ADDR_VAR 0 6
37417: PUSH
37418: LD_VAR 0 2
37422: PUSH
37423: FOR_IN
37424: IFFALSE 37642
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37426: LD_ADDR_VAR 0 8
37430: PUSH
37431: LD_VAR 0 1
37435: PPUSH
37436: LD_VAR 0 6
37440: PUSH
37441: LD_INT 1
37443: ARRAY
37444: PPUSH
37445: LD_VAR 0 6
37449: PUSH
37450: LD_INT 2
37452: ARRAY
37453: PPUSH
37454: CALL_OW 297
37458: ST_TO_ADDR
// if not Count ( result ) then
37459: LD_VAR 0 5
37463: PPUSH
37464: CALL 34036 0 1
37468: NOT
37469: IFFALSE 37502
// begin result := Join ( result , [ i , tmp ] ) ;
37471: LD_ADDR_VAR 0 5
37475: PUSH
37476: LD_VAR 0 5
37480: PPUSH
37481: LD_VAR 0 6
37485: PUSH
37486: LD_VAR 0 8
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PPUSH
37495: CALL 69625 0 2
37499: ST_TO_ADDR
// continue ;
37500: GO 37423
// end ; if result [ result ] [ 2 ] <= tmp then
37502: LD_VAR 0 5
37506: PUSH
37507: LD_VAR 0 5
37511: ARRAY
37512: PUSH
37513: LD_INT 2
37515: ARRAY
37516: PUSH
37517: LD_VAR 0 8
37521: LESSEQUAL
37522: IFFALSE 37555
// result := Join ( result , [ i , tmp ] ) else
37524: LD_ADDR_VAR 0 5
37528: PUSH
37529: LD_VAR 0 5
37533: PPUSH
37534: LD_VAR 0 6
37538: PUSH
37539: LD_VAR 0 8
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PPUSH
37548: CALL 69625 0 2
37552: ST_TO_ADDR
37553: GO 37640
// begin for j := 1 to Count ( result ) do
37555: LD_ADDR_VAR 0 7
37559: PUSH
37560: DOUBLE
37561: LD_INT 1
37563: DEC
37564: ST_TO_ADDR
37565: LD_VAR 0 5
37569: PPUSH
37570: CALL 34036 0 1
37574: PUSH
37575: FOR_TO
37576: IFFALSE 37638
// begin if tmp < result [ j ] [ 2 ] then
37578: LD_VAR 0 8
37582: PUSH
37583: LD_VAR 0 5
37587: PUSH
37588: LD_VAR 0 7
37592: ARRAY
37593: PUSH
37594: LD_INT 2
37596: ARRAY
37597: LESS
37598: IFFALSE 37636
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37600: LD_ADDR_VAR 0 5
37604: PUSH
37605: LD_VAR 0 5
37609: PPUSH
37610: LD_VAR 0 7
37614: PPUSH
37615: LD_VAR 0 6
37619: PUSH
37620: LD_VAR 0 8
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PPUSH
37629: CALL_OW 2
37633: ST_TO_ADDR
// break ;
37634: GO 37638
// end ; end ;
37636: GO 37575
37638: POP
37639: POP
// end ; end ;
37640: GO 37423
37642: POP
37643: POP
// if result and not asc then
37644: LD_VAR 0 5
37648: PUSH
37649: LD_VAR 0 3
37653: NOT
37654: AND
37655: IFFALSE 37672
// result := ReverseArray ( result ) ;
37657: LD_ADDR_VAR 0 5
37661: PUSH
37662: LD_VAR 0 5
37666: PPUSH
37667: CALL 64912 0 1
37671: ST_TO_ADDR
// tmp := [ ] ;
37672: LD_ADDR_VAR 0 8
37676: PUSH
37677: EMPTY
37678: ST_TO_ADDR
// if mode then
37679: LD_VAR 0 4
37683: IFFALSE 37747
// begin for i := 1 to result do
37685: LD_ADDR_VAR 0 6
37689: PUSH
37690: DOUBLE
37691: LD_INT 1
37693: DEC
37694: ST_TO_ADDR
37695: LD_VAR 0 5
37699: PUSH
37700: FOR_TO
37701: IFFALSE 37735
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37703: LD_ADDR_VAR 0 8
37707: PUSH
37708: LD_VAR 0 8
37712: PPUSH
37713: LD_VAR 0 5
37717: PUSH
37718: LD_VAR 0 6
37722: ARRAY
37723: PUSH
37724: LD_INT 1
37726: ARRAY
37727: PPUSH
37728: CALL 69625 0 2
37732: ST_TO_ADDR
37733: GO 37700
37735: POP
37736: POP
// result := tmp ;
37737: LD_ADDR_VAR 0 5
37741: PUSH
37742: LD_VAR 0 8
37746: ST_TO_ADDR
// end ; end ;
37747: LD_VAR 0 5
37751: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37752: LD_INT 0
37754: PPUSH
37755: PPUSH
37756: PPUSH
37757: PPUSH
// if not list then
37758: LD_VAR 0 3
37762: NOT
37763: IFFALSE 37767
// exit ;
37765: GO 38155
// result := [ ] ;
37767: LD_ADDR_VAR 0 6
37771: PUSH
37772: EMPTY
37773: ST_TO_ADDR
// for i in list do
37774: LD_ADDR_VAR 0 7
37778: PUSH
37779: LD_VAR 0 3
37783: PUSH
37784: FOR_IN
37785: IFFALSE 37987
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37787: LD_ADDR_VAR 0 9
37791: PUSH
37792: LD_VAR 0 7
37796: PPUSH
37797: LD_VAR 0 1
37801: PPUSH
37802: LD_VAR 0 2
37806: PPUSH
37807: CALL_OW 297
37811: ST_TO_ADDR
// if not result then
37812: LD_VAR 0 6
37816: NOT
37817: IFFALSE 37843
// result := [ [ i , tmp ] ] else
37819: LD_ADDR_VAR 0 6
37823: PUSH
37824: LD_VAR 0 7
37828: PUSH
37829: LD_VAR 0 9
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: EMPTY
37839: LIST
37840: ST_TO_ADDR
37841: GO 37985
// begin if result [ result ] [ 2 ] < tmp then
37843: LD_VAR 0 6
37847: PUSH
37848: LD_VAR 0 6
37852: ARRAY
37853: PUSH
37854: LD_INT 2
37856: ARRAY
37857: PUSH
37858: LD_VAR 0 9
37862: LESS
37863: IFFALSE 37905
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37865: LD_ADDR_VAR 0 6
37869: PUSH
37870: LD_VAR 0 6
37874: PPUSH
37875: LD_VAR 0 6
37879: PUSH
37880: LD_INT 1
37882: PLUS
37883: PPUSH
37884: LD_VAR 0 7
37888: PUSH
37889: LD_VAR 0 9
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PPUSH
37898: CALL_OW 2
37902: ST_TO_ADDR
37903: GO 37985
// for j = 1 to result do
37905: LD_ADDR_VAR 0 8
37909: PUSH
37910: DOUBLE
37911: LD_INT 1
37913: DEC
37914: ST_TO_ADDR
37915: LD_VAR 0 6
37919: PUSH
37920: FOR_TO
37921: IFFALSE 37983
// begin if tmp < result [ j ] [ 2 ] then
37923: LD_VAR 0 9
37927: PUSH
37928: LD_VAR 0 6
37932: PUSH
37933: LD_VAR 0 8
37937: ARRAY
37938: PUSH
37939: LD_INT 2
37941: ARRAY
37942: LESS
37943: IFFALSE 37981
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37945: LD_ADDR_VAR 0 6
37949: PUSH
37950: LD_VAR 0 6
37954: PPUSH
37955: LD_VAR 0 8
37959: PPUSH
37960: LD_VAR 0 7
37964: PUSH
37965: LD_VAR 0 9
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PPUSH
37974: CALL_OW 2
37978: ST_TO_ADDR
// break ;
37979: GO 37983
// end ; end ;
37981: GO 37920
37983: POP
37984: POP
// end ; end ;
37985: GO 37784
37987: POP
37988: POP
// if result and not asc then
37989: LD_VAR 0 6
37993: PUSH
37994: LD_VAR 0 4
37998: NOT
37999: AND
38000: IFFALSE 38075
// begin tmp := result ;
38002: LD_ADDR_VAR 0 9
38006: PUSH
38007: LD_VAR 0 6
38011: ST_TO_ADDR
// for i = tmp downto 1 do
38012: LD_ADDR_VAR 0 7
38016: PUSH
38017: DOUBLE
38018: LD_VAR 0 9
38022: INC
38023: ST_TO_ADDR
38024: LD_INT 1
38026: PUSH
38027: FOR_DOWNTO
38028: IFFALSE 38073
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38030: LD_ADDR_VAR 0 6
38034: PUSH
38035: LD_VAR 0 6
38039: PPUSH
38040: LD_VAR 0 9
38044: PUSH
38045: LD_VAR 0 7
38049: MINUS
38050: PUSH
38051: LD_INT 1
38053: PLUS
38054: PPUSH
38055: LD_VAR 0 9
38059: PUSH
38060: LD_VAR 0 7
38064: ARRAY
38065: PPUSH
38066: CALL_OW 1
38070: ST_TO_ADDR
38071: GO 38027
38073: POP
38074: POP
// end ; tmp := [ ] ;
38075: LD_ADDR_VAR 0 9
38079: PUSH
38080: EMPTY
38081: ST_TO_ADDR
// if mode then
38082: LD_VAR 0 5
38086: IFFALSE 38155
// begin for i = 1 to result do
38088: LD_ADDR_VAR 0 7
38092: PUSH
38093: DOUBLE
38094: LD_INT 1
38096: DEC
38097: ST_TO_ADDR
38098: LD_VAR 0 6
38102: PUSH
38103: FOR_TO
38104: IFFALSE 38143
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38106: LD_ADDR_VAR 0 9
38110: PUSH
38111: LD_VAR 0 9
38115: PPUSH
38116: LD_VAR 0 7
38120: PPUSH
38121: LD_VAR 0 6
38125: PUSH
38126: LD_VAR 0 7
38130: ARRAY
38131: PUSH
38132: LD_INT 1
38134: ARRAY
38135: PPUSH
38136: CALL_OW 1
38140: ST_TO_ADDR
38141: GO 38103
38143: POP
38144: POP
// result := tmp ;
38145: LD_ADDR_VAR 0 6
38149: PUSH
38150: LD_VAR 0 9
38154: ST_TO_ADDR
// end ; end ;
38155: LD_VAR 0 6
38159: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38160: LD_INT 0
38162: PPUSH
38163: PPUSH
38164: PPUSH
38165: PPUSH
38166: PPUSH
38167: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38168: LD_ADDR_VAR 0 5
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: EMPTY
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: ST_TO_ADDR
// if not x or not y then
38190: LD_VAR 0 2
38194: NOT
38195: PUSH
38196: LD_VAR 0 3
38200: NOT
38201: OR
38202: IFFALSE 38206
// exit ;
38204: GO 39856
// if not range then
38206: LD_VAR 0 4
38210: NOT
38211: IFFALSE 38221
// range := 10 ;
38213: LD_ADDR_VAR 0 4
38217: PUSH
38218: LD_INT 10
38220: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38221: LD_ADDR_VAR 0 8
38225: PUSH
38226: LD_INT 81
38228: PUSH
38229: LD_VAR 0 1
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 92
38240: PUSH
38241: LD_VAR 0 2
38245: PUSH
38246: LD_VAR 0 3
38250: PUSH
38251: LD_VAR 0 4
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 3
38264: PUSH
38265: LD_INT 21
38267: PUSH
38268: LD_INT 3
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: LIST
38283: PPUSH
38284: CALL_OW 69
38288: ST_TO_ADDR
// if not tmp then
38289: LD_VAR 0 8
38293: NOT
38294: IFFALSE 38298
// exit ;
38296: GO 39856
// for i in tmp do
38298: LD_ADDR_VAR 0 6
38302: PUSH
38303: LD_VAR 0 8
38307: PUSH
38308: FOR_IN
38309: IFFALSE 39831
// begin points := [ 0 , 0 , 0 ] ;
38311: LD_ADDR_VAR 0 9
38315: PUSH
38316: LD_INT 0
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: LD_INT 0
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: LIST
38329: ST_TO_ADDR
// bpoints := 1 ;
38330: LD_ADDR_VAR 0 10
38334: PUSH
38335: LD_INT 1
38337: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38338: LD_VAR 0 6
38342: PPUSH
38343: CALL_OW 247
38347: PUSH
38348: LD_INT 1
38350: DOUBLE
38351: EQUAL
38352: IFTRUE 38356
38354: GO 38934
38356: POP
// begin if GetClass ( i ) = 1 then
38357: LD_VAR 0 6
38361: PPUSH
38362: CALL_OW 257
38366: PUSH
38367: LD_INT 1
38369: EQUAL
38370: IFFALSE 38391
// points := [ 10 , 5 , 3 ] ;
38372: LD_ADDR_VAR 0 9
38376: PUSH
38377: LD_INT 10
38379: PUSH
38380: LD_INT 5
38382: PUSH
38383: LD_INT 3
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: LIST
38390: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38391: LD_VAR 0 6
38395: PPUSH
38396: CALL_OW 257
38400: PUSH
38401: LD_INT 2
38403: PUSH
38404: LD_INT 3
38406: PUSH
38407: LD_INT 4
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: LIST
38414: IN
38415: IFFALSE 38436
// points := [ 3 , 2 , 1 ] ;
38417: LD_ADDR_VAR 0 9
38421: PUSH
38422: LD_INT 3
38424: PUSH
38425: LD_INT 2
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: LIST
38435: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38436: LD_VAR 0 6
38440: PPUSH
38441: CALL_OW 257
38445: PUSH
38446: LD_INT 5
38448: EQUAL
38449: IFFALSE 38470
// points := [ 130 , 5 , 2 ] ;
38451: LD_ADDR_VAR 0 9
38455: PUSH
38456: LD_INT 130
38458: PUSH
38459: LD_INT 5
38461: PUSH
38462: LD_INT 2
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38470: LD_VAR 0 6
38474: PPUSH
38475: CALL_OW 257
38479: PUSH
38480: LD_INT 8
38482: EQUAL
38483: IFFALSE 38504
// points := [ 35 , 35 , 30 ] ;
38485: LD_ADDR_VAR 0 9
38489: PUSH
38490: LD_INT 35
38492: PUSH
38493: LD_INT 35
38495: PUSH
38496: LD_INT 30
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: LIST
38503: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38504: LD_VAR 0 6
38508: PPUSH
38509: CALL_OW 257
38513: PUSH
38514: LD_INT 9
38516: EQUAL
38517: IFFALSE 38538
// points := [ 20 , 55 , 40 ] ;
38519: LD_ADDR_VAR 0 9
38523: PUSH
38524: LD_INT 20
38526: PUSH
38527: LD_INT 55
38529: PUSH
38530: LD_INT 40
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: LIST
38537: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38538: LD_VAR 0 6
38542: PPUSH
38543: CALL_OW 257
38547: PUSH
38548: LD_INT 12
38550: PUSH
38551: LD_INT 16
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: IN
38558: IFFALSE 38579
// points := [ 5 , 3 , 2 ] ;
38560: LD_ADDR_VAR 0 9
38564: PUSH
38565: LD_INT 5
38567: PUSH
38568: LD_INT 3
38570: PUSH
38571: LD_INT 2
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: LIST
38578: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38579: LD_VAR 0 6
38583: PPUSH
38584: CALL_OW 257
38588: PUSH
38589: LD_INT 17
38591: EQUAL
38592: IFFALSE 38613
// points := [ 100 , 50 , 75 ] ;
38594: LD_ADDR_VAR 0 9
38598: PUSH
38599: LD_INT 100
38601: PUSH
38602: LD_INT 50
38604: PUSH
38605: LD_INT 75
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: LIST
38612: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38613: LD_VAR 0 6
38617: PPUSH
38618: CALL_OW 257
38622: PUSH
38623: LD_INT 15
38625: EQUAL
38626: IFFALSE 38647
// points := [ 10 , 5 , 3 ] ;
38628: LD_ADDR_VAR 0 9
38632: PUSH
38633: LD_INT 10
38635: PUSH
38636: LD_INT 5
38638: PUSH
38639: LD_INT 3
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: LIST
38646: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38647: LD_VAR 0 6
38651: PPUSH
38652: CALL_OW 257
38656: PUSH
38657: LD_INT 14
38659: EQUAL
38660: IFFALSE 38681
// points := [ 10 , 0 , 0 ] ;
38662: LD_ADDR_VAR 0 9
38666: PUSH
38667: LD_INT 10
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: LIST
38680: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38681: LD_VAR 0 6
38685: PPUSH
38686: CALL_OW 257
38690: PUSH
38691: LD_INT 11
38693: EQUAL
38694: IFFALSE 38715
// points := [ 30 , 10 , 5 ] ;
38696: LD_ADDR_VAR 0 9
38700: PUSH
38701: LD_INT 30
38703: PUSH
38704: LD_INT 10
38706: PUSH
38707: LD_INT 5
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: LIST
38714: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38715: LD_VAR 0 1
38719: PPUSH
38720: LD_INT 5
38722: PPUSH
38723: CALL_OW 321
38727: PUSH
38728: LD_INT 2
38730: EQUAL
38731: IFFALSE 38748
// bpoints := bpoints * 1.8 ;
38733: LD_ADDR_VAR 0 10
38737: PUSH
38738: LD_VAR 0 10
38742: PUSH
38743: LD_REAL  1.80000000000000E+0000
38746: MUL
38747: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38748: LD_VAR 0 6
38752: PPUSH
38753: CALL_OW 257
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: LD_INT 3
38766: PUSH
38767: LD_INT 4
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: IN
38776: PUSH
38777: LD_VAR 0 1
38781: PPUSH
38782: LD_INT 51
38784: PPUSH
38785: CALL_OW 321
38789: PUSH
38790: LD_INT 2
38792: EQUAL
38793: AND
38794: IFFALSE 38811
// bpoints := bpoints * 1.2 ;
38796: LD_ADDR_VAR 0 10
38800: PUSH
38801: LD_VAR 0 10
38805: PUSH
38806: LD_REAL  1.20000000000000E+0000
38809: MUL
38810: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38811: LD_VAR 0 6
38815: PPUSH
38816: CALL_OW 257
38820: PUSH
38821: LD_INT 5
38823: PUSH
38824: LD_INT 7
38826: PUSH
38827: LD_INT 9
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: LIST
38834: IN
38835: PUSH
38836: LD_VAR 0 1
38840: PPUSH
38841: LD_INT 52
38843: PPUSH
38844: CALL_OW 321
38848: PUSH
38849: LD_INT 2
38851: EQUAL
38852: AND
38853: IFFALSE 38870
// bpoints := bpoints * 1.5 ;
38855: LD_ADDR_VAR 0 10
38859: PUSH
38860: LD_VAR 0 10
38864: PUSH
38865: LD_REAL  1.50000000000000E+0000
38868: MUL
38869: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38870: LD_VAR 0 1
38874: PPUSH
38875: LD_INT 66
38877: PPUSH
38878: CALL_OW 321
38882: PUSH
38883: LD_INT 2
38885: EQUAL
38886: IFFALSE 38903
// bpoints := bpoints * 1.1 ;
38888: LD_ADDR_VAR 0 10
38892: PUSH
38893: LD_VAR 0 10
38897: PUSH
38898: LD_REAL  1.10000000000000E+0000
38901: MUL
38902: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38903: LD_ADDR_VAR 0 10
38907: PUSH
38908: LD_VAR 0 10
38912: PUSH
38913: LD_VAR 0 6
38917: PPUSH
38918: LD_INT 1
38920: PPUSH
38921: CALL_OW 259
38925: PUSH
38926: LD_REAL  1.15000000000000E+0000
38929: MUL
38930: MUL
38931: ST_TO_ADDR
// end ; unit_vehicle :
38932: GO 39760
38934: LD_INT 2
38936: DOUBLE
38937: EQUAL
38938: IFTRUE 38942
38940: GO 39748
38942: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38943: LD_VAR 0 6
38947: PPUSH
38948: CALL_OW 264
38952: PUSH
38953: LD_INT 2
38955: PUSH
38956: LD_INT 42
38958: PUSH
38959: LD_INT 24
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: LIST
38966: IN
38967: IFFALSE 38988
// points := [ 25 , 5 , 3 ] ;
38969: LD_ADDR_VAR 0 9
38973: PUSH
38974: LD_INT 25
38976: PUSH
38977: LD_INT 5
38979: PUSH
38980: LD_INT 3
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: LIST
38987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38988: LD_VAR 0 6
38992: PPUSH
38993: CALL_OW 264
38997: PUSH
38998: LD_INT 4
39000: PUSH
39001: LD_INT 43
39003: PUSH
39004: LD_INT 25
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: LIST
39011: IN
39012: IFFALSE 39033
// points := [ 40 , 15 , 5 ] ;
39014: LD_ADDR_VAR 0 9
39018: PUSH
39019: LD_INT 40
39021: PUSH
39022: LD_INT 15
39024: PUSH
39025: LD_INT 5
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: LIST
39032: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39033: LD_VAR 0 6
39037: PPUSH
39038: CALL_OW 264
39042: PUSH
39043: LD_INT 3
39045: PUSH
39046: LD_INT 23
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: IN
39053: IFFALSE 39074
// points := [ 7 , 25 , 8 ] ;
39055: LD_ADDR_VAR 0 9
39059: PUSH
39060: LD_INT 7
39062: PUSH
39063: LD_INT 25
39065: PUSH
39066: LD_INT 8
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39074: LD_VAR 0 6
39078: PPUSH
39079: CALL_OW 264
39083: PUSH
39084: LD_INT 5
39086: PUSH
39087: LD_INT 27
39089: PUSH
39090: LD_INT 44
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: IN
39098: IFFALSE 39119
// points := [ 14 , 50 , 16 ] ;
39100: LD_ADDR_VAR 0 9
39104: PUSH
39105: LD_INT 14
39107: PUSH
39108: LD_INT 50
39110: PUSH
39111: LD_INT 16
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: LIST
39118: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39119: LD_VAR 0 6
39123: PPUSH
39124: CALL_OW 264
39128: PUSH
39129: LD_INT 6
39131: PUSH
39132: LD_INT 46
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: IN
39139: IFFALSE 39160
// points := [ 32 , 120 , 70 ] ;
39141: LD_ADDR_VAR 0 9
39145: PUSH
39146: LD_INT 32
39148: PUSH
39149: LD_INT 120
39151: PUSH
39152: LD_INT 70
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: LIST
39159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39160: LD_VAR 0 6
39164: PPUSH
39165: CALL_OW 264
39169: PUSH
39170: LD_INT 7
39172: PUSH
39173: LD_INT 28
39175: PUSH
39176: LD_INT 45
39178: PUSH
39179: LD_INT 92
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: IN
39188: IFFALSE 39209
// points := [ 35 , 20 , 45 ] ;
39190: LD_ADDR_VAR 0 9
39194: PUSH
39195: LD_INT 35
39197: PUSH
39198: LD_INT 20
39200: PUSH
39201: LD_INT 45
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: LIST
39208: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39209: LD_VAR 0 6
39213: PPUSH
39214: CALL_OW 264
39218: PUSH
39219: LD_INT 47
39221: PUSH
39222: EMPTY
39223: LIST
39224: IN
39225: IFFALSE 39246
// points := [ 67 , 45 , 75 ] ;
39227: LD_ADDR_VAR 0 9
39231: PUSH
39232: LD_INT 67
39234: PUSH
39235: LD_INT 45
39237: PUSH
39238: LD_INT 75
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: LIST
39245: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39246: LD_VAR 0 6
39250: PPUSH
39251: CALL_OW 264
39255: PUSH
39256: LD_INT 26
39258: PUSH
39259: EMPTY
39260: LIST
39261: IN
39262: IFFALSE 39283
// points := [ 120 , 30 , 80 ] ;
39264: LD_ADDR_VAR 0 9
39268: PUSH
39269: LD_INT 120
39271: PUSH
39272: LD_INT 30
39274: PUSH
39275: LD_INT 80
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: LIST
39282: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39283: LD_VAR 0 6
39287: PPUSH
39288: CALL_OW 264
39292: PUSH
39293: LD_INT 22
39295: PUSH
39296: EMPTY
39297: LIST
39298: IN
39299: IFFALSE 39320
// points := [ 40 , 1 , 1 ] ;
39301: LD_ADDR_VAR 0 9
39305: PUSH
39306: LD_INT 40
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: LIST
39319: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39320: LD_VAR 0 6
39324: PPUSH
39325: CALL_OW 264
39329: PUSH
39330: LD_INT 29
39332: PUSH
39333: EMPTY
39334: LIST
39335: IN
39336: IFFALSE 39357
// points := [ 70 , 200 , 400 ] ;
39338: LD_ADDR_VAR 0 9
39342: PUSH
39343: LD_INT 70
39345: PUSH
39346: LD_INT 200
39348: PUSH
39349: LD_INT 400
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: LIST
39356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39357: LD_VAR 0 6
39361: PPUSH
39362: CALL_OW 264
39366: PUSH
39367: LD_INT 14
39369: PUSH
39370: LD_INT 53
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: IN
39377: IFFALSE 39398
// points := [ 40 , 10 , 20 ] ;
39379: LD_ADDR_VAR 0 9
39383: PUSH
39384: LD_INT 40
39386: PUSH
39387: LD_INT 10
39389: PUSH
39390: LD_INT 20
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: LIST
39397: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39398: LD_VAR 0 6
39402: PPUSH
39403: CALL_OW 264
39407: PUSH
39408: LD_INT 9
39410: PUSH
39411: EMPTY
39412: LIST
39413: IN
39414: IFFALSE 39435
// points := [ 5 , 70 , 20 ] ;
39416: LD_ADDR_VAR 0 9
39420: PUSH
39421: LD_INT 5
39423: PUSH
39424: LD_INT 70
39426: PUSH
39427: LD_INT 20
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39435: LD_VAR 0 6
39439: PPUSH
39440: CALL_OW 264
39444: PUSH
39445: LD_INT 10
39447: PUSH
39448: EMPTY
39449: LIST
39450: IN
39451: IFFALSE 39472
// points := [ 35 , 110 , 70 ] ;
39453: LD_ADDR_VAR 0 9
39457: PUSH
39458: LD_INT 35
39460: PUSH
39461: LD_INT 110
39463: PUSH
39464: LD_INT 70
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: LIST
39471: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39472: LD_VAR 0 6
39476: PPUSH
39477: CALL_OW 265
39481: PUSH
39482: LD_INT 25
39484: EQUAL
39485: IFFALSE 39506
// points := [ 80 , 65 , 100 ] ;
39487: LD_ADDR_VAR 0 9
39491: PUSH
39492: LD_INT 80
39494: PUSH
39495: LD_INT 65
39497: PUSH
39498: LD_INT 100
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: LIST
39505: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39506: LD_VAR 0 6
39510: PPUSH
39511: CALL_OW 263
39515: PUSH
39516: LD_INT 1
39518: EQUAL
39519: IFFALSE 39554
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39521: LD_ADDR_VAR 0 10
39525: PUSH
39526: LD_VAR 0 10
39530: PUSH
39531: LD_VAR 0 6
39535: PPUSH
39536: CALL_OW 311
39540: PPUSH
39541: LD_INT 3
39543: PPUSH
39544: CALL_OW 259
39548: PUSH
39549: LD_INT 4
39551: MUL
39552: MUL
39553: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39554: LD_VAR 0 6
39558: PPUSH
39559: CALL_OW 263
39563: PUSH
39564: LD_INT 2
39566: EQUAL
39567: IFFALSE 39618
// begin j := IsControledBy ( i ) ;
39569: LD_ADDR_VAR 0 7
39573: PUSH
39574: LD_VAR 0 6
39578: PPUSH
39579: CALL_OW 312
39583: ST_TO_ADDR
// if j then
39584: LD_VAR 0 7
39588: IFFALSE 39618
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39590: LD_ADDR_VAR 0 10
39594: PUSH
39595: LD_VAR 0 10
39599: PUSH
39600: LD_VAR 0 7
39604: PPUSH
39605: LD_INT 3
39607: PPUSH
39608: CALL_OW 259
39612: PUSH
39613: LD_INT 3
39615: MUL
39616: MUL
39617: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39618: LD_VAR 0 6
39622: PPUSH
39623: CALL_OW 264
39627: PUSH
39628: LD_INT 5
39630: PUSH
39631: LD_INT 6
39633: PUSH
39634: LD_INT 46
39636: PUSH
39637: LD_INT 44
39639: PUSH
39640: LD_INT 47
39642: PUSH
39643: LD_INT 45
39645: PUSH
39646: LD_INT 28
39648: PUSH
39649: LD_INT 7
39651: PUSH
39652: LD_INT 27
39654: PUSH
39655: LD_INT 29
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: IN
39670: PUSH
39671: LD_VAR 0 1
39675: PPUSH
39676: LD_INT 52
39678: PPUSH
39679: CALL_OW 321
39683: PUSH
39684: LD_INT 2
39686: EQUAL
39687: AND
39688: IFFALSE 39705
// bpoints := bpoints * 1.2 ;
39690: LD_ADDR_VAR 0 10
39694: PUSH
39695: LD_VAR 0 10
39699: PUSH
39700: LD_REAL  1.20000000000000E+0000
39703: MUL
39704: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39705: LD_VAR 0 6
39709: PPUSH
39710: CALL_OW 264
39714: PUSH
39715: LD_INT 6
39717: PUSH
39718: LD_INT 46
39720: PUSH
39721: LD_INT 47
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: LIST
39728: IN
39729: IFFALSE 39746
// bpoints := bpoints * 1.2 ;
39731: LD_ADDR_VAR 0 10
39735: PUSH
39736: LD_VAR 0 10
39740: PUSH
39741: LD_REAL  1.20000000000000E+0000
39744: MUL
39745: ST_TO_ADDR
// end ; unit_building :
39746: GO 39760
39748: LD_INT 3
39750: DOUBLE
39751: EQUAL
39752: IFTRUE 39756
39754: GO 39759
39756: POP
// ; end ;
39757: GO 39760
39759: POP
// for j = 1 to 3 do
39760: LD_ADDR_VAR 0 7
39764: PUSH
39765: DOUBLE
39766: LD_INT 1
39768: DEC
39769: ST_TO_ADDR
39770: LD_INT 3
39772: PUSH
39773: FOR_TO
39774: IFFALSE 39827
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39776: LD_ADDR_VAR 0 5
39780: PUSH
39781: LD_VAR 0 5
39785: PPUSH
39786: LD_VAR 0 7
39790: PPUSH
39791: LD_VAR 0 5
39795: PUSH
39796: LD_VAR 0 7
39800: ARRAY
39801: PUSH
39802: LD_VAR 0 9
39806: PUSH
39807: LD_VAR 0 7
39811: ARRAY
39812: PUSH
39813: LD_VAR 0 10
39817: MUL
39818: PLUS
39819: PPUSH
39820: CALL_OW 1
39824: ST_TO_ADDR
39825: GO 39773
39827: POP
39828: POP
// end ;
39829: GO 38308
39831: POP
39832: POP
// result := Replace ( result , 4 , tmp ) ;
39833: LD_ADDR_VAR 0 5
39837: PUSH
39838: LD_VAR 0 5
39842: PPUSH
39843: LD_INT 4
39845: PPUSH
39846: LD_VAR 0 8
39850: PPUSH
39851: CALL_OW 1
39855: ST_TO_ADDR
// end ;
39856: LD_VAR 0 5
39860: RET
// export function DangerAtRange ( unit , range ) ; begin
39861: LD_INT 0
39863: PPUSH
// if not unit then
39864: LD_VAR 0 1
39868: NOT
39869: IFFALSE 39873
// exit ;
39871: GO 39918
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39873: LD_ADDR_VAR 0 3
39877: PUSH
39878: LD_VAR 0 1
39882: PPUSH
39883: CALL_OW 255
39887: PPUSH
39888: LD_VAR 0 1
39892: PPUSH
39893: CALL_OW 250
39897: PPUSH
39898: LD_VAR 0 1
39902: PPUSH
39903: CALL_OW 251
39907: PPUSH
39908: LD_VAR 0 2
39912: PPUSH
39913: CALL 38160 0 4
39917: ST_TO_ADDR
// end ;
39918: LD_VAR 0 3
39922: RET
// export function DangerInArea ( side , area ) ; begin
39923: LD_INT 0
39925: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39926: LD_ADDR_VAR 0 3
39930: PUSH
39931: LD_VAR 0 2
39935: PPUSH
39936: LD_INT 81
39938: PUSH
39939: LD_VAR 0 1
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PPUSH
39948: CALL_OW 70
39952: ST_TO_ADDR
// end ;
39953: LD_VAR 0 3
39957: RET
// export function IsExtension ( b ) ; begin
39958: LD_INT 0
39960: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39961: LD_ADDR_VAR 0 2
39965: PUSH
39966: LD_VAR 0 1
39970: PUSH
39971: LD_INT 23
39973: PUSH
39974: LD_INT 20
39976: PUSH
39977: LD_INT 22
39979: PUSH
39980: LD_INT 17
39982: PUSH
39983: LD_INT 24
39985: PUSH
39986: LD_INT 21
39988: PUSH
39989: LD_INT 19
39991: PUSH
39992: LD_INT 16
39994: PUSH
39995: LD_INT 25
39997: PUSH
39998: LD_INT 18
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: IN
40013: ST_TO_ADDR
// end ;
40014: LD_VAR 0 2
40018: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40019: LD_INT 0
40021: PPUSH
40022: PPUSH
40023: PPUSH
// result := [ ] ;
40024: LD_ADDR_VAR 0 4
40028: PUSH
40029: EMPTY
40030: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40031: LD_ADDR_VAR 0 5
40035: PUSH
40036: LD_VAR 0 2
40040: PPUSH
40041: LD_INT 21
40043: PUSH
40044: LD_INT 3
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PPUSH
40051: CALL_OW 70
40055: ST_TO_ADDR
// if not tmp then
40056: LD_VAR 0 5
40060: NOT
40061: IFFALSE 40065
// exit ;
40063: GO 40129
// if checkLink then
40065: LD_VAR 0 3
40069: IFFALSE 40119
// begin for i in tmp do
40071: LD_ADDR_VAR 0 6
40075: PUSH
40076: LD_VAR 0 5
40080: PUSH
40081: FOR_IN
40082: IFFALSE 40117
// if GetBase ( i ) <> base then
40084: LD_VAR 0 6
40088: PPUSH
40089: CALL_OW 274
40093: PUSH
40094: LD_VAR 0 1
40098: NONEQUAL
40099: IFFALSE 40115
// ComLinkToBase ( base , i ) ;
40101: LD_VAR 0 1
40105: PPUSH
40106: LD_VAR 0 6
40110: PPUSH
40111: CALL_OW 169
40115: GO 40081
40117: POP
40118: POP
// end ; result := tmp ;
40119: LD_ADDR_VAR 0 4
40123: PUSH
40124: LD_VAR 0 5
40128: ST_TO_ADDR
// end ;
40129: LD_VAR 0 4
40133: RET
// export function ComComplete ( units , b ) ; var i ; begin
40134: LD_INT 0
40136: PPUSH
40137: PPUSH
// if not units then
40138: LD_VAR 0 1
40142: NOT
40143: IFFALSE 40147
// exit ;
40145: GO 40237
// for i in units do
40147: LD_ADDR_VAR 0 4
40151: PUSH
40152: LD_VAR 0 1
40156: PUSH
40157: FOR_IN
40158: IFFALSE 40235
// if BuildingStatus ( b ) = bs_build then
40160: LD_VAR 0 2
40164: PPUSH
40165: CALL_OW 461
40169: PUSH
40170: LD_INT 1
40172: EQUAL
40173: IFFALSE 40233
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40175: LD_VAR 0 4
40179: PPUSH
40180: LD_STRING h
40182: PUSH
40183: LD_VAR 0 2
40187: PPUSH
40188: CALL_OW 250
40192: PUSH
40193: LD_VAR 0 2
40197: PPUSH
40198: CALL_OW 251
40202: PUSH
40203: LD_VAR 0 2
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: PUSH
40226: EMPTY
40227: LIST
40228: PPUSH
40229: CALL_OW 446
40233: GO 40157
40235: POP
40236: POP
// end ;
40237: LD_VAR 0 3
40241: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40242: LD_INT 0
40244: PPUSH
40245: PPUSH
40246: PPUSH
40247: PPUSH
40248: PPUSH
40249: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40250: LD_VAR 0 1
40254: NOT
40255: PUSH
40256: LD_VAR 0 1
40260: PPUSH
40261: CALL_OW 263
40265: PUSH
40266: LD_INT 2
40268: NONEQUAL
40269: OR
40270: IFFALSE 40274
// exit ;
40272: GO 40590
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40274: LD_ADDR_VAR 0 6
40278: PUSH
40279: LD_INT 22
40281: PUSH
40282: LD_VAR 0 1
40286: PPUSH
40287: CALL_OW 255
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: LD_INT 30
40301: PUSH
40302: LD_INT 36
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 34
40311: PUSH
40312: LD_INT 31
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: LIST
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PPUSH
40328: CALL_OW 69
40332: ST_TO_ADDR
// if not tmp then
40333: LD_VAR 0 6
40337: NOT
40338: IFFALSE 40342
// exit ;
40340: GO 40590
// result := [ ] ;
40342: LD_ADDR_VAR 0 2
40346: PUSH
40347: EMPTY
40348: ST_TO_ADDR
// for i in tmp do
40349: LD_ADDR_VAR 0 3
40353: PUSH
40354: LD_VAR 0 6
40358: PUSH
40359: FOR_IN
40360: IFFALSE 40431
// begin t := UnitsInside ( i ) ;
40362: LD_ADDR_VAR 0 4
40366: PUSH
40367: LD_VAR 0 3
40371: PPUSH
40372: CALL_OW 313
40376: ST_TO_ADDR
// if t then
40377: LD_VAR 0 4
40381: IFFALSE 40429
// for j in t do
40383: LD_ADDR_VAR 0 7
40387: PUSH
40388: LD_VAR 0 4
40392: PUSH
40393: FOR_IN
40394: IFFALSE 40427
// result := Replace ( result , result + 1 , j ) ;
40396: LD_ADDR_VAR 0 2
40400: PUSH
40401: LD_VAR 0 2
40405: PPUSH
40406: LD_VAR 0 2
40410: PUSH
40411: LD_INT 1
40413: PLUS
40414: PPUSH
40415: LD_VAR 0 7
40419: PPUSH
40420: CALL_OW 1
40424: ST_TO_ADDR
40425: GO 40393
40427: POP
40428: POP
// end ;
40429: GO 40359
40431: POP
40432: POP
// if not result then
40433: LD_VAR 0 2
40437: NOT
40438: IFFALSE 40442
// exit ;
40440: GO 40590
// mech := result [ 1 ] ;
40442: LD_ADDR_VAR 0 5
40446: PUSH
40447: LD_VAR 0 2
40451: PUSH
40452: LD_INT 1
40454: ARRAY
40455: ST_TO_ADDR
// if result > 1 then
40456: LD_VAR 0 2
40460: PUSH
40461: LD_INT 1
40463: GREATER
40464: IFFALSE 40576
// begin for i = 2 to result do
40466: LD_ADDR_VAR 0 3
40470: PUSH
40471: DOUBLE
40472: LD_INT 2
40474: DEC
40475: ST_TO_ADDR
40476: LD_VAR 0 2
40480: PUSH
40481: FOR_TO
40482: IFFALSE 40574
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40484: LD_ADDR_VAR 0 4
40488: PUSH
40489: LD_VAR 0 2
40493: PUSH
40494: LD_VAR 0 3
40498: ARRAY
40499: PPUSH
40500: LD_INT 3
40502: PPUSH
40503: CALL_OW 259
40507: PUSH
40508: LD_VAR 0 2
40512: PUSH
40513: LD_VAR 0 3
40517: ARRAY
40518: PPUSH
40519: CALL_OW 432
40523: MINUS
40524: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40525: LD_VAR 0 4
40529: PUSH
40530: LD_VAR 0 5
40534: PPUSH
40535: LD_INT 3
40537: PPUSH
40538: CALL_OW 259
40542: PUSH
40543: LD_VAR 0 5
40547: PPUSH
40548: CALL_OW 432
40552: MINUS
40553: GREATEREQUAL
40554: IFFALSE 40572
// mech := result [ i ] ;
40556: LD_ADDR_VAR 0 5
40560: PUSH
40561: LD_VAR 0 2
40565: PUSH
40566: LD_VAR 0 3
40570: ARRAY
40571: ST_TO_ADDR
// end ;
40572: GO 40481
40574: POP
40575: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40576: LD_VAR 0 1
40580: PPUSH
40581: LD_VAR 0 5
40585: PPUSH
40586: CALL_OW 135
// end ;
40590: LD_VAR 0 2
40594: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40595: LD_INT 0
40597: PPUSH
40598: PPUSH
40599: PPUSH
40600: PPUSH
40601: PPUSH
40602: PPUSH
40603: PPUSH
40604: PPUSH
40605: PPUSH
40606: PPUSH
40607: PPUSH
40608: PPUSH
40609: PPUSH
// result := [ ] ;
40610: LD_ADDR_VAR 0 7
40614: PUSH
40615: EMPTY
40616: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40617: LD_VAR 0 1
40621: PPUSH
40622: CALL_OW 266
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: IN
40637: NOT
40638: IFFALSE 40642
// exit ;
40640: GO 42276
// if name then
40642: LD_VAR 0 3
40646: IFFALSE 40662
// SetBName ( base_dep , name ) ;
40648: LD_VAR 0 1
40652: PPUSH
40653: LD_VAR 0 3
40657: PPUSH
40658: CALL_OW 500
// base := GetBase ( base_dep ) ;
40662: LD_ADDR_VAR 0 15
40666: PUSH
40667: LD_VAR 0 1
40671: PPUSH
40672: CALL_OW 274
40676: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40677: LD_ADDR_VAR 0 16
40681: PUSH
40682: LD_VAR 0 1
40686: PPUSH
40687: CALL_OW 255
40691: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40692: LD_ADDR_VAR 0 17
40696: PUSH
40697: LD_VAR 0 1
40701: PPUSH
40702: CALL_OW 248
40706: ST_TO_ADDR
// if sources then
40707: LD_VAR 0 5
40711: IFFALSE 40758
// for i = 1 to 3 do
40713: LD_ADDR_VAR 0 8
40717: PUSH
40718: DOUBLE
40719: LD_INT 1
40721: DEC
40722: ST_TO_ADDR
40723: LD_INT 3
40725: PUSH
40726: FOR_TO
40727: IFFALSE 40756
// AddResourceType ( base , i , sources [ i ] ) ;
40729: LD_VAR 0 15
40733: PPUSH
40734: LD_VAR 0 8
40738: PPUSH
40739: LD_VAR 0 5
40743: PUSH
40744: LD_VAR 0 8
40748: ARRAY
40749: PPUSH
40750: CALL_OW 276
40754: GO 40726
40756: POP
40757: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40758: LD_ADDR_VAR 0 18
40762: PUSH
40763: LD_VAR 0 15
40767: PPUSH
40768: LD_VAR 0 2
40772: PPUSH
40773: LD_INT 1
40775: PPUSH
40776: CALL 40019 0 3
40780: ST_TO_ADDR
// InitHc ;
40781: CALL_OW 19
// InitUc ;
40785: CALL_OW 18
// uc_side := side ;
40789: LD_ADDR_OWVAR 20
40793: PUSH
40794: LD_VAR 0 16
40798: ST_TO_ADDR
// uc_nation := nation ;
40799: LD_ADDR_OWVAR 21
40803: PUSH
40804: LD_VAR 0 17
40808: ST_TO_ADDR
// if buildings then
40809: LD_VAR 0 18
40813: IFFALSE 42135
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40815: LD_ADDR_VAR 0 19
40819: PUSH
40820: LD_VAR 0 18
40824: PPUSH
40825: LD_INT 2
40827: PUSH
40828: LD_INT 30
40830: PUSH
40831: LD_INT 29
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 30
40840: PUSH
40841: LD_INT 30
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: LIST
40852: PPUSH
40853: CALL_OW 72
40857: ST_TO_ADDR
// if tmp then
40858: LD_VAR 0 19
40862: IFFALSE 40910
// for i in tmp do
40864: LD_ADDR_VAR 0 8
40868: PUSH
40869: LD_VAR 0 19
40873: PUSH
40874: FOR_IN
40875: IFFALSE 40908
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40877: LD_VAR 0 8
40881: PPUSH
40882: CALL_OW 250
40886: PPUSH
40887: LD_VAR 0 8
40891: PPUSH
40892: CALL_OW 251
40896: PPUSH
40897: LD_VAR 0 16
40901: PPUSH
40902: CALL_OW 441
40906: GO 40874
40908: POP
40909: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40910: LD_VAR 0 18
40914: PPUSH
40915: LD_INT 2
40917: PUSH
40918: LD_INT 30
40920: PUSH
40921: LD_INT 32
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 30
40930: PUSH
40931: LD_INT 33
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: LIST
40942: PPUSH
40943: CALL_OW 72
40947: IFFALSE 41035
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40949: LD_ADDR_VAR 0 8
40953: PUSH
40954: LD_VAR 0 18
40958: PPUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 30
40964: PUSH
40965: LD_INT 32
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 30
40974: PUSH
40975: LD_INT 33
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: LIST
40986: PPUSH
40987: CALL_OW 72
40991: PUSH
40992: FOR_IN
40993: IFFALSE 41033
// begin if not GetBWeapon ( i ) then
40995: LD_VAR 0 8
40999: PPUSH
41000: CALL_OW 269
41004: NOT
41005: IFFALSE 41031
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41007: LD_VAR 0 8
41011: PPUSH
41012: LD_VAR 0 8
41016: PPUSH
41017: LD_VAR 0 2
41021: PPUSH
41022: CALL 42281 0 2
41026: PPUSH
41027: CALL_OW 431
// end ;
41031: GO 40992
41033: POP
41034: POP
// end ; for i = 1 to personel do
41035: LD_ADDR_VAR 0 8
41039: PUSH
41040: DOUBLE
41041: LD_INT 1
41043: DEC
41044: ST_TO_ADDR
41045: LD_VAR 0 6
41049: PUSH
41050: FOR_TO
41051: IFFALSE 42115
// begin if i > 4 then
41053: LD_VAR 0 8
41057: PUSH
41058: LD_INT 4
41060: GREATER
41061: IFFALSE 41065
// break ;
41063: GO 42115
// case i of 1 :
41065: LD_VAR 0 8
41069: PUSH
41070: LD_INT 1
41072: DOUBLE
41073: EQUAL
41074: IFTRUE 41078
41076: GO 41158
41078: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41079: LD_ADDR_VAR 0 12
41083: PUSH
41084: LD_VAR 0 18
41088: PPUSH
41089: LD_INT 22
41091: PUSH
41092: LD_VAR 0 16
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 58
41103: PUSH
41104: EMPTY
41105: LIST
41106: PUSH
41107: LD_INT 2
41109: PUSH
41110: LD_INT 30
41112: PUSH
41113: LD_INT 32
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 30
41122: PUSH
41123: LD_INT 4
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 30
41132: PUSH
41133: LD_INT 5
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: LIST
41150: PPUSH
41151: CALL_OW 72
41155: ST_TO_ADDR
41156: GO 41380
41158: LD_INT 2
41160: DOUBLE
41161: EQUAL
41162: IFTRUE 41166
41164: GO 41228
41166: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41167: LD_ADDR_VAR 0 12
41171: PUSH
41172: LD_VAR 0 18
41176: PPUSH
41177: LD_INT 22
41179: PUSH
41180: LD_VAR 0 16
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: LD_INT 30
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 30
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: LIST
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PPUSH
41221: CALL_OW 72
41225: ST_TO_ADDR
41226: GO 41380
41228: LD_INT 3
41230: DOUBLE
41231: EQUAL
41232: IFTRUE 41236
41234: GO 41298
41236: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41237: LD_ADDR_VAR 0 12
41241: PUSH
41242: LD_VAR 0 18
41246: PPUSH
41247: LD_INT 22
41249: PUSH
41250: LD_VAR 0 16
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: LD_INT 30
41264: PUSH
41265: LD_INT 2
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 30
41274: PUSH
41275: LD_INT 3
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: LIST
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PPUSH
41291: CALL_OW 72
41295: ST_TO_ADDR
41296: GO 41380
41298: LD_INT 4
41300: DOUBLE
41301: EQUAL
41302: IFTRUE 41306
41304: GO 41379
41306: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41307: LD_ADDR_VAR 0 12
41311: PUSH
41312: LD_VAR 0 18
41316: PPUSH
41317: LD_INT 22
41319: PUSH
41320: LD_VAR 0 16
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: LD_INT 30
41334: PUSH
41335: LD_INT 6
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 30
41344: PUSH
41345: LD_INT 7
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 30
41354: PUSH
41355: LD_INT 8
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PPUSH
41372: CALL_OW 72
41376: ST_TO_ADDR
41377: GO 41380
41379: POP
// if i = 1 then
41380: LD_VAR 0 8
41384: PUSH
41385: LD_INT 1
41387: EQUAL
41388: IFFALSE 41499
// begin tmp := [ ] ;
41390: LD_ADDR_VAR 0 19
41394: PUSH
41395: EMPTY
41396: ST_TO_ADDR
// for j in f do
41397: LD_ADDR_VAR 0 9
41401: PUSH
41402: LD_VAR 0 12
41406: PUSH
41407: FOR_IN
41408: IFFALSE 41481
// if GetBType ( j ) = b_bunker then
41410: LD_VAR 0 9
41414: PPUSH
41415: CALL_OW 266
41419: PUSH
41420: LD_INT 32
41422: EQUAL
41423: IFFALSE 41450
// tmp := Insert ( tmp , 1 , j ) else
41425: LD_ADDR_VAR 0 19
41429: PUSH
41430: LD_VAR 0 19
41434: PPUSH
41435: LD_INT 1
41437: PPUSH
41438: LD_VAR 0 9
41442: PPUSH
41443: CALL_OW 2
41447: ST_TO_ADDR
41448: GO 41479
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41450: LD_ADDR_VAR 0 19
41454: PUSH
41455: LD_VAR 0 19
41459: PPUSH
41460: LD_VAR 0 19
41464: PUSH
41465: LD_INT 1
41467: PLUS
41468: PPUSH
41469: LD_VAR 0 9
41473: PPUSH
41474: CALL_OW 2
41478: ST_TO_ADDR
41479: GO 41407
41481: POP
41482: POP
// if tmp then
41483: LD_VAR 0 19
41487: IFFALSE 41499
// f := tmp ;
41489: LD_ADDR_VAR 0 12
41493: PUSH
41494: LD_VAR 0 19
41498: ST_TO_ADDR
// end ; x := personel [ i ] ;
41499: LD_ADDR_VAR 0 13
41503: PUSH
41504: LD_VAR 0 6
41508: PUSH
41509: LD_VAR 0 8
41513: ARRAY
41514: ST_TO_ADDR
// if x = - 1 then
41515: LD_VAR 0 13
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: EQUAL
41524: IFFALSE 41733
// begin for j in f do
41526: LD_ADDR_VAR 0 9
41530: PUSH
41531: LD_VAR 0 12
41535: PUSH
41536: FOR_IN
41537: IFFALSE 41729
// repeat InitHc ;
41539: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41543: LD_VAR 0 9
41547: PPUSH
41548: CALL_OW 266
41552: PUSH
41553: LD_INT 5
41555: EQUAL
41556: IFFALSE 41626
// begin if UnitsInside ( j ) < 3 then
41558: LD_VAR 0 9
41562: PPUSH
41563: CALL_OW 313
41567: PUSH
41568: LD_INT 3
41570: LESS
41571: IFFALSE 41607
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41573: LD_INT 0
41575: PPUSH
41576: LD_INT 5
41578: PUSH
41579: LD_INT 8
41581: PUSH
41582: LD_INT 9
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: LIST
41589: PUSH
41590: LD_VAR 0 17
41594: ARRAY
41595: PPUSH
41596: LD_VAR 0 4
41600: PPUSH
41601: CALL_OW 380
41605: GO 41624
// PrepareHuman ( false , i , skill ) ;
41607: LD_INT 0
41609: PPUSH
41610: LD_VAR 0 8
41614: PPUSH
41615: LD_VAR 0 4
41619: PPUSH
41620: CALL_OW 380
// end else
41624: GO 41643
// PrepareHuman ( false , i , skill ) ;
41626: LD_INT 0
41628: PPUSH
41629: LD_VAR 0 8
41633: PPUSH
41634: LD_VAR 0 4
41638: PPUSH
41639: CALL_OW 380
// un := CreateHuman ;
41643: LD_ADDR_VAR 0 14
41647: PUSH
41648: CALL_OW 44
41652: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41653: LD_ADDR_VAR 0 7
41657: PUSH
41658: LD_VAR 0 7
41662: PPUSH
41663: LD_INT 1
41665: PPUSH
41666: LD_VAR 0 14
41670: PPUSH
41671: CALL_OW 2
41675: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41676: LD_VAR 0 14
41680: PPUSH
41681: LD_VAR 0 9
41685: PPUSH
41686: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41690: LD_VAR 0 9
41694: PPUSH
41695: CALL_OW 313
41699: PUSH
41700: LD_INT 6
41702: EQUAL
41703: PUSH
41704: LD_VAR 0 9
41708: PPUSH
41709: CALL_OW 266
41713: PUSH
41714: LD_INT 32
41716: PUSH
41717: LD_INT 31
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: IN
41724: OR
41725: IFFALSE 41539
41727: GO 41536
41729: POP
41730: POP
// end else
41731: GO 42113
// for j = 1 to x do
41733: LD_ADDR_VAR 0 9
41737: PUSH
41738: DOUBLE
41739: LD_INT 1
41741: DEC
41742: ST_TO_ADDR
41743: LD_VAR 0 13
41747: PUSH
41748: FOR_TO
41749: IFFALSE 42111
// begin InitHc ;
41751: CALL_OW 19
// if not f then
41755: LD_VAR 0 12
41759: NOT
41760: IFFALSE 41849
// begin PrepareHuman ( false , i , skill ) ;
41762: LD_INT 0
41764: PPUSH
41765: LD_VAR 0 8
41769: PPUSH
41770: LD_VAR 0 4
41774: PPUSH
41775: CALL_OW 380
// un := CreateHuman ;
41779: LD_ADDR_VAR 0 14
41783: PUSH
41784: CALL_OW 44
41788: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41789: LD_ADDR_VAR 0 7
41793: PUSH
41794: LD_VAR 0 7
41798: PPUSH
41799: LD_INT 1
41801: PPUSH
41802: LD_VAR 0 14
41806: PPUSH
41807: CALL_OW 2
41811: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41812: LD_VAR 0 14
41816: PPUSH
41817: LD_VAR 0 1
41821: PPUSH
41822: CALL_OW 250
41826: PPUSH
41827: LD_VAR 0 1
41831: PPUSH
41832: CALL_OW 251
41836: PPUSH
41837: LD_INT 10
41839: PPUSH
41840: LD_INT 0
41842: PPUSH
41843: CALL_OW 50
// continue ;
41847: GO 41748
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41849: LD_VAR 0 12
41853: PUSH
41854: LD_INT 1
41856: ARRAY
41857: PPUSH
41858: CALL_OW 313
41862: PUSH
41863: LD_VAR 0 12
41867: PUSH
41868: LD_INT 1
41870: ARRAY
41871: PPUSH
41872: CALL_OW 266
41876: PUSH
41877: LD_INT 32
41879: PUSH
41880: LD_INT 31
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: IN
41887: AND
41888: PUSH
41889: LD_VAR 0 12
41893: PUSH
41894: LD_INT 1
41896: ARRAY
41897: PPUSH
41898: CALL_OW 313
41902: PUSH
41903: LD_INT 6
41905: EQUAL
41906: OR
41907: IFFALSE 41927
// f := Delete ( f , 1 ) ;
41909: LD_ADDR_VAR 0 12
41913: PUSH
41914: LD_VAR 0 12
41918: PPUSH
41919: LD_INT 1
41921: PPUSH
41922: CALL_OW 3
41926: ST_TO_ADDR
// if not f then
41927: LD_VAR 0 12
41931: NOT
41932: IFFALSE 41950
// begin x := x + 2 ;
41934: LD_ADDR_VAR 0 13
41938: PUSH
41939: LD_VAR 0 13
41943: PUSH
41944: LD_INT 2
41946: PLUS
41947: ST_TO_ADDR
// continue ;
41948: GO 41748
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41950: LD_VAR 0 12
41954: PUSH
41955: LD_INT 1
41957: ARRAY
41958: PPUSH
41959: CALL_OW 266
41963: PUSH
41964: LD_INT 5
41966: EQUAL
41967: IFFALSE 42041
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41969: LD_VAR 0 12
41973: PUSH
41974: LD_INT 1
41976: ARRAY
41977: PPUSH
41978: CALL_OW 313
41982: PUSH
41983: LD_INT 3
41985: LESS
41986: IFFALSE 42022
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41988: LD_INT 0
41990: PPUSH
41991: LD_INT 5
41993: PUSH
41994: LD_INT 8
41996: PUSH
41997: LD_INT 9
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: LIST
42004: PUSH
42005: LD_VAR 0 17
42009: ARRAY
42010: PPUSH
42011: LD_VAR 0 4
42015: PPUSH
42016: CALL_OW 380
42020: GO 42039
// PrepareHuman ( false , i , skill ) ;
42022: LD_INT 0
42024: PPUSH
42025: LD_VAR 0 8
42029: PPUSH
42030: LD_VAR 0 4
42034: PPUSH
42035: CALL_OW 380
// end else
42039: GO 42058
// PrepareHuman ( false , i , skill ) ;
42041: LD_INT 0
42043: PPUSH
42044: LD_VAR 0 8
42048: PPUSH
42049: LD_VAR 0 4
42053: PPUSH
42054: CALL_OW 380
// un := CreateHuman ;
42058: LD_ADDR_VAR 0 14
42062: PUSH
42063: CALL_OW 44
42067: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42068: LD_ADDR_VAR 0 7
42072: PUSH
42073: LD_VAR 0 7
42077: PPUSH
42078: LD_INT 1
42080: PPUSH
42081: LD_VAR 0 14
42085: PPUSH
42086: CALL_OW 2
42090: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42091: LD_VAR 0 14
42095: PPUSH
42096: LD_VAR 0 12
42100: PUSH
42101: LD_INT 1
42103: ARRAY
42104: PPUSH
42105: CALL_OW 52
// end ;
42109: GO 41748
42111: POP
42112: POP
// end ;
42113: GO 41050
42115: POP
42116: POP
// result := result ^ buildings ;
42117: LD_ADDR_VAR 0 7
42121: PUSH
42122: LD_VAR 0 7
42126: PUSH
42127: LD_VAR 0 18
42131: ADD
42132: ST_TO_ADDR
// end else
42133: GO 42276
// begin for i = 1 to personel do
42135: LD_ADDR_VAR 0 8
42139: PUSH
42140: DOUBLE
42141: LD_INT 1
42143: DEC
42144: ST_TO_ADDR
42145: LD_VAR 0 6
42149: PUSH
42150: FOR_TO
42151: IFFALSE 42274
// begin if i > 4 then
42153: LD_VAR 0 8
42157: PUSH
42158: LD_INT 4
42160: GREATER
42161: IFFALSE 42165
// break ;
42163: GO 42274
// x := personel [ i ] ;
42165: LD_ADDR_VAR 0 13
42169: PUSH
42170: LD_VAR 0 6
42174: PUSH
42175: LD_VAR 0 8
42179: ARRAY
42180: ST_TO_ADDR
// if x = - 1 then
42181: LD_VAR 0 13
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: EQUAL
42190: IFFALSE 42194
// continue ;
42192: GO 42150
// PrepareHuman ( false , i , skill ) ;
42194: LD_INT 0
42196: PPUSH
42197: LD_VAR 0 8
42201: PPUSH
42202: LD_VAR 0 4
42206: PPUSH
42207: CALL_OW 380
// un := CreateHuman ;
42211: LD_ADDR_VAR 0 14
42215: PUSH
42216: CALL_OW 44
42220: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42221: LD_VAR 0 14
42225: PPUSH
42226: LD_VAR 0 1
42230: PPUSH
42231: CALL_OW 250
42235: PPUSH
42236: LD_VAR 0 1
42240: PPUSH
42241: CALL_OW 251
42245: PPUSH
42246: LD_INT 10
42248: PPUSH
42249: LD_INT 0
42251: PPUSH
42252: CALL_OW 50
// result := result ^ un ;
42256: LD_ADDR_VAR 0 7
42260: PUSH
42261: LD_VAR 0 7
42265: PUSH
42266: LD_VAR 0 14
42270: ADD
42271: ST_TO_ADDR
// end ;
42272: GO 42150
42274: POP
42275: POP
// end ; end ;
42276: LD_VAR 0 7
42280: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42281: LD_INT 0
42283: PPUSH
42284: PPUSH
42285: PPUSH
42286: PPUSH
42287: PPUSH
42288: PPUSH
42289: PPUSH
42290: PPUSH
42291: PPUSH
42292: PPUSH
42293: PPUSH
42294: PPUSH
42295: PPUSH
42296: PPUSH
42297: PPUSH
42298: PPUSH
// result := false ;
42299: LD_ADDR_VAR 0 3
42303: PUSH
42304: LD_INT 0
42306: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42307: LD_VAR 0 1
42311: NOT
42312: PUSH
42313: LD_VAR 0 1
42317: PPUSH
42318: CALL_OW 266
42322: PUSH
42323: LD_INT 32
42325: PUSH
42326: LD_INT 33
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: IN
42333: NOT
42334: OR
42335: IFFALSE 42339
// exit ;
42337: GO 43448
// nat := GetNation ( tower ) ;
42339: LD_ADDR_VAR 0 12
42343: PUSH
42344: LD_VAR 0 1
42348: PPUSH
42349: CALL_OW 248
42353: ST_TO_ADDR
// side := GetSide ( tower ) ;
42354: LD_ADDR_VAR 0 16
42358: PUSH
42359: LD_VAR 0 1
42363: PPUSH
42364: CALL_OW 255
42368: ST_TO_ADDR
// x := GetX ( tower ) ;
42369: LD_ADDR_VAR 0 10
42373: PUSH
42374: LD_VAR 0 1
42378: PPUSH
42379: CALL_OW 250
42383: ST_TO_ADDR
// y := GetY ( tower ) ;
42384: LD_ADDR_VAR 0 11
42388: PUSH
42389: LD_VAR 0 1
42393: PPUSH
42394: CALL_OW 251
42398: ST_TO_ADDR
// if not x or not y then
42399: LD_VAR 0 10
42403: NOT
42404: PUSH
42405: LD_VAR 0 11
42409: NOT
42410: OR
42411: IFFALSE 42415
// exit ;
42413: GO 43448
// weapon := 0 ;
42415: LD_ADDR_VAR 0 18
42419: PUSH
42420: LD_INT 0
42422: ST_TO_ADDR
// fac_list := [ ] ;
42423: LD_ADDR_VAR 0 17
42427: PUSH
42428: EMPTY
42429: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42430: LD_ADDR_VAR 0 6
42434: PUSH
42435: LD_VAR 0 1
42439: PPUSH
42440: CALL_OW 274
42444: PPUSH
42445: LD_VAR 0 2
42449: PPUSH
42450: LD_INT 0
42452: PPUSH
42453: CALL 40019 0 3
42457: PPUSH
42458: LD_INT 30
42460: PUSH
42461: LD_INT 3
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PPUSH
42468: CALL_OW 72
42472: ST_TO_ADDR
// if not factories then
42473: LD_VAR 0 6
42477: NOT
42478: IFFALSE 42482
// exit ;
42480: GO 43448
// for i in factories do
42482: LD_ADDR_VAR 0 8
42486: PUSH
42487: LD_VAR 0 6
42491: PUSH
42492: FOR_IN
42493: IFFALSE 42518
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42495: LD_ADDR_VAR 0 17
42499: PUSH
42500: LD_VAR 0 17
42504: PUSH
42505: LD_VAR 0 8
42509: PPUSH
42510: CALL_OW 478
42514: UNION
42515: ST_TO_ADDR
42516: GO 42492
42518: POP
42519: POP
// if not fac_list then
42520: LD_VAR 0 17
42524: NOT
42525: IFFALSE 42529
// exit ;
42527: GO 43448
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42529: LD_ADDR_VAR 0 5
42533: PUSH
42534: LD_INT 4
42536: PUSH
42537: LD_INT 5
42539: PUSH
42540: LD_INT 9
42542: PUSH
42543: LD_INT 10
42545: PUSH
42546: LD_INT 6
42548: PUSH
42549: LD_INT 7
42551: PUSH
42552: LD_INT 11
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 27
42566: PUSH
42567: LD_INT 28
42569: PUSH
42570: LD_INT 26
42572: PUSH
42573: LD_INT 30
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 43
42584: PUSH
42585: LD_INT 44
42587: PUSH
42588: LD_INT 46
42590: PUSH
42591: LD_INT 45
42593: PUSH
42594: LD_INT 47
42596: PUSH
42597: LD_INT 49
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: LIST
42612: PUSH
42613: LD_VAR 0 12
42617: ARRAY
42618: ST_TO_ADDR
// list := list isect fac_list ;
42619: LD_ADDR_VAR 0 5
42623: PUSH
42624: LD_VAR 0 5
42628: PUSH
42629: LD_VAR 0 17
42633: ISECT
42634: ST_TO_ADDR
// if not list then
42635: LD_VAR 0 5
42639: NOT
42640: IFFALSE 42644
// exit ;
42642: GO 43448
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42644: LD_VAR 0 12
42648: PUSH
42649: LD_INT 3
42651: EQUAL
42652: PUSH
42653: LD_INT 49
42655: PUSH
42656: LD_VAR 0 5
42660: IN
42661: AND
42662: PUSH
42663: LD_INT 31
42665: PPUSH
42666: LD_VAR 0 16
42670: PPUSH
42671: CALL_OW 321
42675: PUSH
42676: LD_INT 2
42678: EQUAL
42679: AND
42680: IFFALSE 42740
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42682: LD_INT 22
42684: PUSH
42685: LD_VAR 0 16
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 35
42696: PUSH
42697: LD_INT 49
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 91
42706: PUSH
42707: LD_VAR 0 1
42711: PUSH
42712: LD_INT 10
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: LIST
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: LIST
42724: PPUSH
42725: CALL_OW 69
42729: NOT
42730: IFFALSE 42740
// weapon := ru_time_lapser ;
42732: LD_ADDR_VAR 0 18
42736: PUSH
42737: LD_INT 49
42739: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42740: LD_VAR 0 12
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: IN
42755: PUSH
42756: LD_INT 11
42758: PUSH
42759: LD_VAR 0 5
42763: IN
42764: PUSH
42765: LD_INT 30
42767: PUSH
42768: LD_VAR 0 5
42772: IN
42773: OR
42774: AND
42775: PUSH
42776: LD_INT 6
42778: PPUSH
42779: LD_VAR 0 16
42783: PPUSH
42784: CALL_OW 321
42788: PUSH
42789: LD_INT 2
42791: EQUAL
42792: AND
42793: IFFALSE 42958
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42795: LD_INT 22
42797: PUSH
42798: LD_VAR 0 16
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: LD_INT 35
42812: PUSH
42813: LD_INT 11
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 35
42822: PUSH
42823: LD_INT 30
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 91
42837: PUSH
42838: LD_VAR 0 1
42842: PUSH
42843: LD_INT 18
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: LIST
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: PPUSH
42856: CALL_OW 69
42860: NOT
42861: PUSH
42862: LD_INT 22
42864: PUSH
42865: LD_VAR 0 16
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: LD_INT 30
42879: PUSH
42880: LD_INT 32
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 30
42889: PUSH
42890: LD_INT 33
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 91
42904: PUSH
42905: LD_VAR 0 1
42909: PUSH
42910: LD_INT 12
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: LIST
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: LIST
42922: PUSH
42923: EMPTY
42924: LIST
42925: PPUSH
42926: CALL_OW 69
42930: PUSH
42931: LD_INT 2
42933: GREATER
42934: AND
42935: IFFALSE 42958
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42937: LD_ADDR_VAR 0 18
42941: PUSH
42942: LD_INT 11
42944: PUSH
42945: LD_INT 30
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_VAR 0 12
42956: ARRAY
42957: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42958: LD_VAR 0 18
42962: NOT
42963: PUSH
42964: LD_INT 40
42966: PPUSH
42967: LD_VAR 0 16
42971: PPUSH
42972: CALL_OW 321
42976: PUSH
42977: LD_INT 2
42979: EQUAL
42980: AND
42981: PUSH
42982: LD_INT 7
42984: PUSH
42985: LD_VAR 0 5
42989: IN
42990: PUSH
42991: LD_INT 28
42993: PUSH
42994: LD_VAR 0 5
42998: IN
42999: OR
43000: PUSH
43001: LD_INT 45
43003: PUSH
43004: LD_VAR 0 5
43008: IN
43009: OR
43010: AND
43011: IFFALSE 43265
// begin hex := GetHexInfo ( x , y ) ;
43013: LD_ADDR_VAR 0 4
43017: PUSH
43018: LD_VAR 0 10
43022: PPUSH
43023: LD_VAR 0 11
43027: PPUSH
43028: CALL_OW 546
43032: ST_TO_ADDR
// if hex [ 1 ] then
43033: LD_VAR 0 4
43037: PUSH
43038: LD_INT 1
43040: ARRAY
43041: IFFALSE 43045
// exit ;
43043: GO 43448
// height := hex [ 2 ] ;
43045: LD_ADDR_VAR 0 15
43049: PUSH
43050: LD_VAR 0 4
43054: PUSH
43055: LD_INT 2
43057: ARRAY
43058: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43059: LD_ADDR_VAR 0 14
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: LD_INT 3
43072: PUSH
43073: LD_INT 5
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: ST_TO_ADDR
// for i in tmp do
43082: LD_ADDR_VAR 0 8
43086: PUSH
43087: LD_VAR 0 14
43091: PUSH
43092: FOR_IN
43093: IFFALSE 43263
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43095: LD_ADDR_VAR 0 9
43099: PUSH
43100: LD_VAR 0 10
43104: PPUSH
43105: LD_VAR 0 8
43109: PPUSH
43110: LD_INT 5
43112: PPUSH
43113: CALL_OW 272
43117: PUSH
43118: LD_VAR 0 11
43122: PPUSH
43123: LD_VAR 0 8
43127: PPUSH
43128: LD_INT 5
43130: PPUSH
43131: CALL_OW 273
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43140: LD_VAR 0 9
43144: PUSH
43145: LD_INT 1
43147: ARRAY
43148: PPUSH
43149: LD_VAR 0 9
43153: PUSH
43154: LD_INT 2
43156: ARRAY
43157: PPUSH
43158: CALL_OW 488
43162: IFFALSE 43261
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43164: LD_ADDR_VAR 0 4
43168: PUSH
43169: LD_VAR 0 9
43173: PUSH
43174: LD_INT 1
43176: ARRAY
43177: PPUSH
43178: LD_VAR 0 9
43182: PUSH
43183: LD_INT 2
43185: ARRAY
43186: PPUSH
43187: CALL_OW 546
43191: ST_TO_ADDR
// if hex [ 1 ] then
43192: LD_VAR 0 4
43196: PUSH
43197: LD_INT 1
43199: ARRAY
43200: IFFALSE 43204
// continue ;
43202: GO 43092
// h := hex [ 2 ] ;
43204: LD_ADDR_VAR 0 13
43208: PUSH
43209: LD_VAR 0 4
43213: PUSH
43214: LD_INT 2
43216: ARRAY
43217: ST_TO_ADDR
// if h + 7 < height then
43218: LD_VAR 0 13
43222: PUSH
43223: LD_INT 7
43225: PLUS
43226: PUSH
43227: LD_VAR 0 15
43231: LESS
43232: IFFALSE 43261
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43234: LD_ADDR_VAR 0 18
43238: PUSH
43239: LD_INT 7
43241: PUSH
43242: LD_INT 28
43244: PUSH
43245: LD_INT 45
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: LIST
43252: PUSH
43253: LD_VAR 0 12
43257: ARRAY
43258: ST_TO_ADDR
// break ;
43259: GO 43263
// end ; end ; end ;
43261: GO 43092
43263: POP
43264: POP
// end ; if not weapon then
43265: LD_VAR 0 18
43269: NOT
43270: IFFALSE 43330
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43272: LD_ADDR_VAR 0 5
43276: PUSH
43277: LD_VAR 0 5
43281: PUSH
43282: LD_INT 11
43284: PUSH
43285: LD_INT 30
43287: PUSH
43288: LD_INT 49
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: DIFF
43296: ST_TO_ADDR
// if not list then
43297: LD_VAR 0 5
43301: NOT
43302: IFFALSE 43306
// exit ;
43304: GO 43448
// weapon := list [ rand ( 1 , list ) ] ;
43306: LD_ADDR_VAR 0 18
43310: PUSH
43311: LD_VAR 0 5
43315: PUSH
43316: LD_INT 1
43318: PPUSH
43319: LD_VAR 0 5
43323: PPUSH
43324: CALL_OW 12
43328: ARRAY
43329: ST_TO_ADDR
// end ; if weapon then
43330: LD_VAR 0 18
43334: IFFALSE 43448
// begin tmp := CostOfWeapon ( weapon ) ;
43336: LD_ADDR_VAR 0 14
43340: PUSH
43341: LD_VAR 0 18
43345: PPUSH
43346: CALL_OW 451
43350: ST_TO_ADDR
// j := GetBase ( tower ) ;
43351: LD_ADDR_VAR 0 9
43355: PUSH
43356: LD_VAR 0 1
43360: PPUSH
43361: CALL_OW 274
43365: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43366: LD_VAR 0 9
43370: PPUSH
43371: LD_INT 1
43373: PPUSH
43374: CALL_OW 275
43378: PUSH
43379: LD_VAR 0 14
43383: PUSH
43384: LD_INT 1
43386: ARRAY
43387: GREATEREQUAL
43388: PUSH
43389: LD_VAR 0 9
43393: PPUSH
43394: LD_INT 2
43396: PPUSH
43397: CALL_OW 275
43401: PUSH
43402: LD_VAR 0 14
43406: PUSH
43407: LD_INT 2
43409: ARRAY
43410: GREATEREQUAL
43411: AND
43412: PUSH
43413: LD_VAR 0 9
43417: PPUSH
43418: LD_INT 3
43420: PPUSH
43421: CALL_OW 275
43425: PUSH
43426: LD_VAR 0 14
43430: PUSH
43431: LD_INT 3
43433: ARRAY
43434: GREATEREQUAL
43435: AND
43436: IFFALSE 43448
// result := weapon ;
43438: LD_ADDR_VAR 0 3
43442: PUSH
43443: LD_VAR 0 18
43447: ST_TO_ADDR
// end ; end ;
43448: LD_VAR 0 3
43452: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43453: LD_INT 0
43455: PPUSH
43456: PPUSH
// result := true ;
43457: LD_ADDR_VAR 0 3
43461: PUSH
43462: LD_INT 1
43464: ST_TO_ADDR
// if array1 = array2 then
43465: LD_VAR 0 1
43469: PUSH
43470: LD_VAR 0 2
43474: EQUAL
43475: IFFALSE 43535
// begin for i = 1 to array1 do
43477: LD_ADDR_VAR 0 4
43481: PUSH
43482: DOUBLE
43483: LD_INT 1
43485: DEC
43486: ST_TO_ADDR
43487: LD_VAR 0 1
43491: PUSH
43492: FOR_TO
43493: IFFALSE 43531
// if array1 [ i ] <> array2 [ i ] then
43495: LD_VAR 0 1
43499: PUSH
43500: LD_VAR 0 4
43504: ARRAY
43505: PUSH
43506: LD_VAR 0 2
43510: PUSH
43511: LD_VAR 0 4
43515: ARRAY
43516: NONEQUAL
43517: IFFALSE 43529
// begin result := false ;
43519: LD_ADDR_VAR 0 3
43523: PUSH
43524: LD_INT 0
43526: ST_TO_ADDR
// break ;
43527: GO 43531
// end ;
43529: GO 43492
43531: POP
43532: POP
// end else
43533: GO 43543
// result := false ;
43535: LD_ADDR_VAR 0 3
43539: PUSH
43540: LD_INT 0
43542: ST_TO_ADDR
// end ;
43543: LD_VAR 0 3
43547: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43548: LD_INT 0
43550: PPUSH
43551: PPUSH
// if not array1 or not array2 then
43552: LD_VAR 0 1
43556: NOT
43557: PUSH
43558: LD_VAR 0 2
43562: NOT
43563: OR
43564: IFFALSE 43568
// exit ;
43566: GO 43632
// result := true ;
43568: LD_ADDR_VAR 0 3
43572: PUSH
43573: LD_INT 1
43575: ST_TO_ADDR
// for i = 1 to array1 do
43576: LD_ADDR_VAR 0 4
43580: PUSH
43581: DOUBLE
43582: LD_INT 1
43584: DEC
43585: ST_TO_ADDR
43586: LD_VAR 0 1
43590: PUSH
43591: FOR_TO
43592: IFFALSE 43630
// if array1 [ i ] <> array2 [ i ] then
43594: LD_VAR 0 1
43598: PUSH
43599: LD_VAR 0 4
43603: ARRAY
43604: PUSH
43605: LD_VAR 0 2
43609: PUSH
43610: LD_VAR 0 4
43614: ARRAY
43615: NONEQUAL
43616: IFFALSE 43628
// begin result := false ;
43618: LD_ADDR_VAR 0 3
43622: PUSH
43623: LD_INT 0
43625: ST_TO_ADDR
// break ;
43626: GO 43630
// end ;
43628: GO 43591
43630: POP
43631: POP
// end ;
43632: LD_VAR 0 3
43636: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43637: LD_INT 0
43639: PPUSH
43640: PPUSH
43641: PPUSH
// pom := GetBase ( fac ) ;
43642: LD_ADDR_VAR 0 5
43646: PUSH
43647: LD_VAR 0 1
43651: PPUSH
43652: CALL_OW 274
43656: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43657: LD_ADDR_VAR 0 4
43661: PUSH
43662: LD_VAR 0 2
43666: PUSH
43667: LD_INT 1
43669: ARRAY
43670: PPUSH
43671: LD_VAR 0 2
43675: PUSH
43676: LD_INT 2
43678: ARRAY
43679: PPUSH
43680: LD_VAR 0 2
43684: PUSH
43685: LD_INT 3
43687: ARRAY
43688: PPUSH
43689: LD_VAR 0 2
43693: PUSH
43694: LD_INT 4
43696: ARRAY
43697: PPUSH
43698: CALL_OW 449
43702: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43703: LD_ADDR_VAR 0 3
43707: PUSH
43708: LD_VAR 0 5
43712: PPUSH
43713: LD_INT 1
43715: PPUSH
43716: CALL_OW 275
43720: PUSH
43721: LD_VAR 0 4
43725: PUSH
43726: LD_INT 1
43728: ARRAY
43729: GREATEREQUAL
43730: PUSH
43731: LD_VAR 0 5
43735: PPUSH
43736: LD_INT 2
43738: PPUSH
43739: CALL_OW 275
43743: PUSH
43744: LD_VAR 0 4
43748: PUSH
43749: LD_INT 2
43751: ARRAY
43752: GREATEREQUAL
43753: AND
43754: PUSH
43755: LD_VAR 0 5
43759: PPUSH
43760: LD_INT 3
43762: PPUSH
43763: CALL_OW 275
43767: PUSH
43768: LD_VAR 0 4
43772: PUSH
43773: LD_INT 3
43775: ARRAY
43776: GREATEREQUAL
43777: AND
43778: ST_TO_ADDR
// end ;
43779: LD_VAR 0 3
43783: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43784: LD_INT 0
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
// pom := GetBase ( building ) ;
43790: LD_ADDR_VAR 0 3
43794: PUSH
43795: LD_VAR 0 1
43799: PPUSH
43800: CALL_OW 274
43804: ST_TO_ADDR
// if not pom then
43805: LD_VAR 0 3
43809: NOT
43810: IFFALSE 43814
// exit ;
43812: GO 43984
// btype := GetBType ( building ) ;
43814: LD_ADDR_VAR 0 5
43818: PUSH
43819: LD_VAR 0 1
43823: PPUSH
43824: CALL_OW 266
43828: ST_TO_ADDR
// if btype = b_armoury then
43829: LD_VAR 0 5
43833: PUSH
43834: LD_INT 4
43836: EQUAL
43837: IFFALSE 43847
// btype := b_barracks ;
43839: LD_ADDR_VAR 0 5
43843: PUSH
43844: LD_INT 5
43846: ST_TO_ADDR
// if btype = b_depot then
43847: LD_VAR 0 5
43851: PUSH
43852: LD_INT 0
43854: EQUAL
43855: IFFALSE 43865
// btype := b_warehouse ;
43857: LD_ADDR_VAR 0 5
43861: PUSH
43862: LD_INT 1
43864: ST_TO_ADDR
// if btype = b_workshop then
43865: LD_VAR 0 5
43869: PUSH
43870: LD_INT 2
43872: EQUAL
43873: IFFALSE 43883
// btype := b_factory ;
43875: LD_ADDR_VAR 0 5
43879: PUSH
43880: LD_INT 3
43882: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43883: LD_ADDR_VAR 0 4
43887: PUSH
43888: LD_VAR 0 5
43892: PPUSH
43893: LD_VAR 0 1
43897: PPUSH
43898: CALL_OW 248
43902: PPUSH
43903: CALL_OW 450
43907: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43908: LD_ADDR_VAR 0 2
43912: PUSH
43913: LD_VAR 0 3
43917: PPUSH
43918: LD_INT 1
43920: PPUSH
43921: CALL_OW 275
43925: PUSH
43926: LD_VAR 0 4
43930: PUSH
43931: LD_INT 1
43933: ARRAY
43934: GREATEREQUAL
43935: PUSH
43936: LD_VAR 0 3
43940: PPUSH
43941: LD_INT 2
43943: PPUSH
43944: CALL_OW 275
43948: PUSH
43949: LD_VAR 0 4
43953: PUSH
43954: LD_INT 2
43956: ARRAY
43957: GREATEREQUAL
43958: AND
43959: PUSH
43960: LD_VAR 0 3
43964: PPUSH
43965: LD_INT 3
43967: PPUSH
43968: CALL_OW 275
43972: PUSH
43973: LD_VAR 0 4
43977: PUSH
43978: LD_INT 3
43980: ARRAY
43981: GREATEREQUAL
43982: AND
43983: ST_TO_ADDR
// end ;
43984: LD_VAR 0 2
43988: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43989: LD_INT 0
43991: PPUSH
43992: PPUSH
43993: PPUSH
// pom := GetBase ( building ) ;
43994: LD_ADDR_VAR 0 4
43998: PUSH
43999: LD_VAR 0 1
44003: PPUSH
44004: CALL_OW 274
44008: ST_TO_ADDR
// if not pom then
44009: LD_VAR 0 4
44013: NOT
44014: IFFALSE 44018
// exit ;
44016: GO 44119
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44018: LD_ADDR_VAR 0 5
44022: PUSH
44023: LD_VAR 0 2
44027: PPUSH
44028: LD_VAR 0 1
44032: PPUSH
44033: CALL_OW 248
44037: PPUSH
44038: CALL_OW 450
44042: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44043: LD_ADDR_VAR 0 3
44047: PUSH
44048: LD_VAR 0 4
44052: PPUSH
44053: LD_INT 1
44055: PPUSH
44056: CALL_OW 275
44060: PUSH
44061: LD_VAR 0 5
44065: PUSH
44066: LD_INT 1
44068: ARRAY
44069: GREATEREQUAL
44070: PUSH
44071: LD_VAR 0 4
44075: PPUSH
44076: LD_INT 2
44078: PPUSH
44079: CALL_OW 275
44083: PUSH
44084: LD_VAR 0 5
44088: PUSH
44089: LD_INT 2
44091: ARRAY
44092: GREATEREQUAL
44093: AND
44094: PUSH
44095: LD_VAR 0 4
44099: PPUSH
44100: LD_INT 3
44102: PPUSH
44103: CALL_OW 275
44107: PUSH
44108: LD_VAR 0 5
44112: PUSH
44113: LD_INT 3
44115: ARRAY
44116: GREATEREQUAL
44117: AND
44118: ST_TO_ADDR
// end ;
44119: LD_VAR 0 3
44123: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44124: LD_INT 0
44126: PPUSH
44127: PPUSH
44128: PPUSH
44129: PPUSH
44130: PPUSH
44131: PPUSH
44132: PPUSH
44133: PPUSH
44134: PPUSH
44135: PPUSH
44136: PPUSH
// result := false ;
44137: LD_ADDR_VAR 0 8
44141: PUSH
44142: LD_INT 0
44144: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44145: LD_VAR 0 5
44149: NOT
44150: PUSH
44151: LD_VAR 0 1
44155: NOT
44156: OR
44157: PUSH
44158: LD_VAR 0 2
44162: NOT
44163: OR
44164: PUSH
44165: LD_VAR 0 3
44169: NOT
44170: OR
44171: IFFALSE 44175
// exit ;
44173: GO 44989
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44175: LD_ADDR_VAR 0 14
44179: PUSH
44180: LD_VAR 0 1
44184: PPUSH
44185: LD_VAR 0 2
44189: PPUSH
44190: LD_VAR 0 3
44194: PPUSH
44195: LD_VAR 0 4
44199: PPUSH
44200: LD_VAR 0 5
44204: PUSH
44205: LD_INT 1
44207: ARRAY
44208: PPUSH
44209: CALL_OW 248
44213: PPUSH
44214: LD_INT 0
44216: PPUSH
44217: CALL 46242 0 6
44221: ST_TO_ADDR
// if not hexes then
44222: LD_VAR 0 14
44226: NOT
44227: IFFALSE 44231
// exit ;
44229: GO 44989
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44231: LD_ADDR_VAR 0 17
44235: PUSH
44236: LD_VAR 0 5
44240: PPUSH
44241: LD_INT 22
44243: PUSH
44244: LD_VAR 0 13
44248: PPUSH
44249: CALL_OW 255
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: LD_INT 30
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 30
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: LIST
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PPUSH
44290: CALL_OW 72
44294: ST_TO_ADDR
// for i = 1 to hexes do
44295: LD_ADDR_VAR 0 9
44299: PUSH
44300: DOUBLE
44301: LD_INT 1
44303: DEC
44304: ST_TO_ADDR
44305: LD_VAR 0 14
44309: PUSH
44310: FOR_TO
44311: IFFALSE 44987
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44313: LD_ADDR_VAR 0 13
44317: PUSH
44318: LD_VAR 0 14
44322: PUSH
44323: LD_VAR 0 9
44327: ARRAY
44328: PUSH
44329: LD_INT 1
44331: ARRAY
44332: PPUSH
44333: LD_VAR 0 14
44337: PUSH
44338: LD_VAR 0 9
44342: ARRAY
44343: PUSH
44344: LD_INT 2
44346: ARRAY
44347: PPUSH
44348: CALL_OW 428
44352: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44353: LD_VAR 0 14
44357: PUSH
44358: LD_VAR 0 9
44362: ARRAY
44363: PUSH
44364: LD_INT 1
44366: ARRAY
44367: PPUSH
44368: LD_VAR 0 14
44372: PUSH
44373: LD_VAR 0 9
44377: ARRAY
44378: PUSH
44379: LD_INT 2
44381: ARRAY
44382: PPUSH
44383: CALL_OW 351
44387: PUSH
44388: LD_VAR 0 14
44392: PUSH
44393: LD_VAR 0 9
44397: ARRAY
44398: PUSH
44399: LD_INT 1
44401: ARRAY
44402: PPUSH
44403: LD_VAR 0 14
44407: PUSH
44408: LD_VAR 0 9
44412: ARRAY
44413: PUSH
44414: LD_INT 2
44416: ARRAY
44417: PPUSH
44418: CALL_OW 488
44422: NOT
44423: OR
44424: PUSH
44425: LD_VAR 0 13
44429: PPUSH
44430: CALL_OW 247
44434: PUSH
44435: LD_INT 3
44437: EQUAL
44438: OR
44439: IFFALSE 44445
// exit ;
44441: POP
44442: POP
44443: GO 44989
// if not tmp then
44445: LD_VAR 0 13
44449: NOT
44450: IFFALSE 44454
// continue ;
44452: GO 44310
// result := true ;
44454: LD_ADDR_VAR 0 8
44458: PUSH
44459: LD_INT 1
44461: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44462: LD_VAR 0 6
44466: PUSH
44467: LD_VAR 0 13
44471: PPUSH
44472: CALL_OW 247
44476: PUSH
44477: LD_INT 2
44479: EQUAL
44480: AND
44481: PUSH
44482: LD_VAR 0 13
44486: PPUSH
44487: CALL_OW 263
44491: PUSH
44492: LD_INT 1
44494: EQUAL
44495: AND
44496: IFFALSE 44660
// begin if IsDrivenBy ( tmp ) then
44498: LD_VAR 0 13
44502: PPUSH
44503: CALL_OW 311
44507: IFFALSE 44511
// continue ;
44509: GO 44310
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44511: LD_VAR 0 6
44515: PPUSH
44516: LD_INT 3
44518: PUSH
44519: LD_INT 60
44521: PUSH
44522: EMPTY
44523: LIST
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 3
44531: PUSH
44532: LD_INT 55
44534: PUSH
44535: EMPTY
44536: LIST
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PPUSH
44546: CALL_OW 72
44550: IFFALSE 44658
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44552: LD_ADDR_VAR 0 18
44556: PUSH
44557: LD_VAR 0 6
44561: PPUSH
44562: LD_INT 3
44564: PUSH
44565: LD_INT 60
44567: PUSH
44568: EMPTY
44569: LIST
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 3
44577: PUSH
44578: LD_INT 55
44580: PUSH
44581: EMPTY
44582: LIST
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PPUSH
44592: CALL_OW 72
44596: PUSH
44597: LD_INT 1
44599: ARRAY
44600: ST_TO_ADDR
// if IsInUnit ( driver ) then
44601: LD_VAR 0 18
44605: PPUSH
44606: CALL_OW 310
44610: IFFALSE 44621
// ComExit ( driver ) ;
44612: LD_VAR 0 18
44616: PPUSH
44617: CALL 70023 0 1
// AddComEnterUnit ( driver , tmp ) ;
44621: LD_VAR 0 18
44625: PPUSH
44626: LD_VAR 0 13
44630: PPUSH
44631: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44635: LD_VAR 0 18
44639: PPUSH
44640: LD_VAR 0 7
44644: PPUSH
44645: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44649: LD_VAR 0 18
44653: PPUSH
44654: CALL_OW 181
// end ; continue ;
44658: GO 44310
// end ; if not cleaners or not tmp in cleaners then
44660: LD_VAR 0 6
44664: NOT
44665: PUSH
44666: LD_VAR 0 13
44670: PUSH
44671: LD_VAR 0 6
44675: IN
44676: NOT
44677: OR
44678: IFFALSE 44985
// begin if dep then
44680: LD_VAR 0 17
44684: IFFALSE 44820
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44686: LD_ADDR_VAR 0 16
44690: PUSH
44691: LD_VAR 0 17
44695: PUSH
44696: LD_INT 1
44698: ARRAY
44699: PPUSH
44700: CALL_OW 250
44704: PPUSH
44705: LD_VAR 0 17
44709: PUSH
44710: LD_INT 1
44712: ARRAY
44713: PPUSH
44714: CALL_OW 254
44718: PPUSH
44719: LD_INT 5
44721: PPUSH
44722: CALL_OW 272
44726: PUSH
44727: LD_VAR 0 17
44731: PUSH
44732: LD_INT 1
44734: ARRAY
44735: PPUSH
44736: CALL_OW 251
44740: PPUSH
44741: LD_VAR 0 17
44745: PUSH
44746: LD_INT 1
44748: ARRAY
44749: PPUSH
44750: CALL_OW 254
44754: PPUSH
44755: LD_INT 5
44757: PPUSH
44758: CALL_OW 273
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44767: LD_VAR 0 16
44771: PUSH
44772: LD_INT 1
44774: ARRAY
44775: PPUSH
44776: LD_VAR 0 16
44780: PUSH
44781: LD_INT 2
44783: ARRAY
44784: PPUSH
44785: CALL_OW 488
44789: IFFALSE 44820
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44791: LD_VAR 0 13
44795: PPUSH
44796: LD_VAR 0 16
44800: PUSH
44801: LD_INT 1
44803: ARRAY
44804: PPUSH
44805: LD_VAR 0 16
44809: PUSH
44810: LD_INT 2
44812: ARRAY
44813: PPUSH
44814: CALL_OW 111
// continue ;
44818: GO 44310
// end ; end ; r := GetDir ( tmp ) ;
44820: LD_ADDR_VAR 0 15
44824: PUSH
44825: LD_VAR 0 13
44829: PPUSH
44830: CALL_OW 254
44834: ST_TO_ADDR
// if r = 5 then
44835: LD_VAR 0 15
44839: PUSH
44840: LD_INT 5
44842: EQUAL
44843: IFFALSE 44853
// r := 0 ;
44845: LD_ADDR_VAR 0 15
44849: PUSH
44850: LD_INT 0
44852: ST_TO_ADDR
// for j = r to 5 do
44853: LD_ADDR_VAR 0 10
44857: PUSH
44858: DOUBLE
44859: LD_VAR 0 15
44863: DEC
44864: ST_TO_ADDR
44865: LD_INT 5
44867: PUSH
44868: FOR_TO
44869: IFFALSE 44983
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44871: LD_ADDR_VAR 0 11
44875: PUSH
44876: LD_VAR 0 13
44880: PPUSH
44881: CALL_OW 250
44885: PPUSH
44886: LD_VAR 0 10
44890: PPUSH
44891: LD_INT 2
44893: PPUSH
44894: CALL_OW 272
44898: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44899: LD_ADDR_VAR 0 12
44903: PUSH
44904: LD_VAR 0 13
44908: PPUSH
44909: CALL_OW 251
44913: PPUSH
44914: LD_VAR 0 10
44918: PPUSH
44919: LD_INT 2
44921: PPUSH
44922: CALL_OW 273
44926: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44927: LD_VAR 0 11
44931: PPUSH
44932: LD_VAR 0 12
44936: PPUSH
44937: CALL_OW 488
44941: PUSH
44942: LD_VAR 0 11
44946: PPUSH
44947: LD_VAR 0 12
44951: PPUSH
44952: CALL_OW 428
44956: NOT
44957: AND
44958: IFFALSE 44981
// begin ComMoveXY ( tmp , _x , _y ) ;
44960: LD_VAR 0 13
44964: PPUSH
44965: LD_VAR 0 11
44969: PPUSH
44970: LD_VAR 0 12
44974: PPUSH
44975: CALL_OW 111
// break ;
44979: GO 44983
// end ; end ;
44981: GO 44868
44983: POP
44984: POP
// end ; end ;
44985: GO 44310
44987: POP
44988: POP
// end ;
44989: LD_VAR 0 8
44993: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44994: LD_INT 0
44996: PPUSH
// result := true ;
44997: LD_ADDR_VAR 0 3
45001: PUSH
45002: LD_INT 1
45004: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45005: LD_VAR 0 2
45009: PUSH
45010: LD_INT 24
45012: DOUBLE
45013: EQUAL
45014: IFTRUE 45024
45016: LD_INT 33
45018: DOUBLE
45019: EQUAL
45020: IFTRUE 45024
45022: GO 45049
45024: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45025: LD_ADDR_VAR 0 3
45029: PUSH
45030: LD_INT 32
45032: PPUSH
45033: LD_VAR 0 1
45037: PPUSH
45038: CALL_OW 321
45042: PUSH
45043: LD_INT 2
45045: EQUAL
45046: ST_TO_ADDR
45047: GO 45365
45049: LD_INT 20
45051: DOUBLE
45052: EQUAL
45053: IFTRUE 45057
45055: GO 45082
45057: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45058: LD_ADDR_VAR 0 3
45062: PUSH
45063: LD_INT 6
45065: PPUSH
45066: LD_VAR 0 1
45070: PPUSH
45071: CALL_OW 321
45075: PUSH
45076: LD_INT 2
45078: EQUAL
45079: ST_TO_ADDR
45080: GO 45365
45082: LD_INT 22
45084: DOUBLE
45085: EQUAL
45086: IFTRUE 45096
45088: LD_INT 36
45090: DOUBLE
45091: EQUAL
45092: IFTRUE 45096
45094: GO 45121
45096: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45097: LD_ADDR_VAR 0 3
45101: PUSH
45102: LD_INT 15
45104: PPUSH
45105: LD_VAR 0 1
45109: PPUSH
45110: CALL_OW 321
45114: PUSH
45115: LD_INT 2
45117: EQUAL
45118: ST_TO_ADDR
45119: GO 45365
45121: LD_INT 30
45123: DOUBLE
45124: EQUAL
45125: IFTRUE 45129
45127: GO 45154
45129: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45130: LD_ADDR_VAR 0 3
45134: PUSH
45135: LD_INT 20
45137: PPUSH
45138: LD_VAR 0 1
45142: PPUSH
45143: CALL_OW 321
45147: PUSH
45148: LD_INT 2
45150: EQUAL
45151: ST_TO_ADDR
45152: GO 45365
45154: LD_INT 28
45156: DOUBLE
45157: EQUAL
45158: IFTRUE 45168
45160: LD_INT 21
45162: DOUBLE
45163: EQUAL
45164: IFTRUE 45168
45166: GO 45193
45168: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45169: LD_ADDR_VAR 0 3
45173: PUSH
45174: LD_INT 21
45176: PPUSH
45177: LD_VAR 0 1
45181: PPUSH
45182: CALL_OW 321
45186: PUSH
45187: LD_INT 2
45189: EQUAL
45190: ST_TO_ADDR
45191: GO 45365
45193: LD_INT 16
45195: DOUBLE
45196: EQUAL
45197: IFTRUE 45201
45199: GO 45226
45201: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45202: LD_ADDR_VAR 0 3
45206: PUSH
45207: LD_INT 84
45209: PPUSH
45210: LD_VAR 0 1
45214: PPUSH
45215: CALL_OW 321
45219: PUSH
45220: LD_INT 2
45222: EQUAL
45223: ST_TO_ADDR
45224: GO 45365
45226: LD_INT 19
45228: DOUBLE
45229: EQUAL
45230: IFTRUE 45240
45232: LD_INT 23
45234: DOUBLE
45235: EQUAL
45236: IFTRUE 45240
45238: GO 45265
45240: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45241: LD_ADDR_VAR 0 3
45245: PUSH
45246: LD_INT 83
45248: PPUSH
45249: LD_VAR 0 1
45253: PPUSH
45254: CALL_OW 321
45258: PUSH
45259: LD_INT 2
45261: EQUAL
45262: ST_TO_ADDR
45263: GO 45365
45265: LD_INT 17
45267: DOUBLE
45268: EQUAL
45269: IFTRUE 45273
45271: GO 45298
45273: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45274: LD_ADDR_VAR 0 3
45278: PUSH
45279: LD_INT 39
45281: PPUSH
45282: LD_VAR 0 1
45286: PPUSH
45287: CALL_OW 321
45291: PUSH
45292: LD_INT 2
45294: EQUAL
45295: ST_TO_ADDR
45296: GO 45365
45298: LD_INT 18
45300: DOUBLE
45301: EQUAL
45302: IFTRUE 45306
45304: GO 45331
45306: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45307: LD_ADDR_VAR 0 3
45311: PUSH
45312: LD_INT 40
45314: PPUSH
45315: LD_VAR 0 1
45319: PPUSH
45320: CALL_OW 321
45324: PUSH
45325: LD_INT 2
45327: EQUAL
45328: ST_TO_ADDR
45329: GO 45365
45331: LD_INT 27
45333: DOUBLE
45334: EQUAL
45335: IFTRUE 45339
45337: GO 45364
45339: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45340: LD_ADDR_VAR 0 3
45344: PUSH
45345: LD_INT 35
45347: PPUSH
45348: LD_VAR 0 1
45352: PPUSH
45353: CALL_OW 321
45357: PUSH
45358: LD_INT 2
45360: EQUAL
45361: ST_TO_ADDR
45362: GO 45365
45364: POP
// end ;
45365: LD_VAR 0 3
45369: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45370: LD_INT 0
45372: PPUSH
45373: PPUSH
45374: PPUSH
45375: PPUSH
45376: PPUSH
45377: PPUSH
45378: PPUSH
45379: PPUSH
45380: PPUSH
45381: PPUSH
45382: PPUSH
// result := false ;
45383: LD_ADDR_VAR 0 6
45387: PUSH
45388: LD_INT 0
45390: ST_TO_ADDR
// if btype = b_depot then
45391: LD_VAR 0 2
45395: PUSH
45396: LD_INT 0
45398: EQUAL
45399: IFFALSE 45411
// begin result := true ;
45401: LD_ADDR_VAR 0 6
45405: PUSH
45406: LD_INT 1
45408: ST_TO_ADDR
// exit ;
45409: GO 46237
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45411: LD_VAR 0 1
45415: NOT
45416: PUSH
45417: LD_VAR 0 1
45421: PPUSH
45422: CALL_OW 266
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: IN
45437: NOT
45438: OR
45439: PUSH
45440: LD_VAR 0 2
45444: NOT
45445: OR
45446: PUSH
45447: LD_VAR 0 5
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: LD_INT 3
45463: PUSH
45464: LD_INT 4
45466: PUSH
45467: LD_INT 5
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: IN
45478: NOT
45479: OR
45480: PUSH
45481: LD_VAR 0 3
45485: PPUSH
45486: LD_VAR 0 4
45490: PPUSH
45491: CALL_OW 488
45495: NOT
45496: OR
45497: IFFALSE 45501
// exit ;
45499: GO 46237
// side := GetSide ( depot ) ;
45501: LD_ADDR_VAR 0 9
45505: PUSH
45506: LD_VAR 0 1
45510: PPUSH
45511: CALL_OW 255
45515: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45516: LD_VAR 0 9
45520: PPUSH
45521: LD_VAR 0 2
45525: PPUSH
45526: CALL 44994 0 2
45530: NOT
45531: IFFALSE 45535
// exit ;
45533: GO 46237
// pom := GetBase ( depot ) ;
45535: LD_ADDR_VAR 0 10
45539: PUSH
45540: LD_VAR 0 1
45544: PPUSH
45545: CALL_OW 274
45549: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45550: LD_ADDR_VAR 0 11
45554: PUSH
45555: LD_VAR 0 2
45559: PPUSH
45560: LD_VAR 0 1
45564: PPUSH
45565: CALL_OW 248
45569: PPUSH
45570: CALL_OW 450
45574: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45575: LD_VAR 0 10
45579: PPUSH
45580: LD_INT 1
45582: PPUSH
45583: CALL_OW 275
45587: PUSH
45588: LD_VAR 0 11
45592: PUSH
45593: LD_INT 1
45595: ARRAY
45596: GREATEREQUAL
45597: PUSH
45598: LD_VAR 0 10
45602: PPUSH
45603: LD_INT 2
45605: PPUSH
45606: CALL_OW 275
45610: PUSH
45611: LD_VAR 0 11
45615: PUSH
45616: LD_INT 2
45618: ARRAY
45619: GREATEREQUAL
45620: AND
45621: PUSH
45622: LD_VAR 0 10
45626: PPUSH
45627: LD_INT 3
45629: PPUSH
45630: CALL_OW 275
45634: PUSH
45635: LD_VAR 0 11
45639: PUSH
45640: LD_INT 3
45642: ARRAY
45643: GREATEREQUAL
45644: AND
45645: NOT
45646: IFFALSE 45650
// exit ;
45648: GO 46237
// if GetBType ( depot ) = b_depot then
45650: LD_VAR 0 1
45654: PPUSH
45655: CALL_OW 266
45659: PUSH
45660: LD_INT 0
45662: EQUAL
45663: IFFALSE 45675
// dist := 28 else
45665: LD_ADDR_VAR 0 14
45669: PUSH
45670: LD_INT 28
45672: ST_TO_ADDR
45673: GO 45683
// dist := 36 ;
45675: LD_ADDR_VAR 0 14
45679: PUSH
45680: LD_INT 36
45682: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45683: LD_VAR 0 1
45687: PPUSH
45688: LD_VAR 0 3
45692: PPUSH
45693: LD_VAR 0 4
45697: PPUSH
45698: CALL_OW 297
45702: PUSH
45703: LD_VAR 0 14
45707: GREATER
45708: IFFALSE 45712
// exit ;
45710: GO 46237
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45712: LD_ADDR_VAR 0 12
45716: PUSH
45717: LD_VAR 0 2
45721: PPUSH
45722: LD_VAR 0 3
45726: PPUSH
45727: LD_VAR 0 4
45731: PPUSH
45732: LD_VAR 0 5
45736: PPUSH
45737: LD_VAR 0 1
45741: PPUSH
45742: CALL_OW 248
45746: PPUSH
45747: LD_INT 0
45749: PPUSH
45750: CALL 46242 0 6
45754: ST_TO_ADDR
// if not hexes then
45755: LD_VAR 0 12
45759: NOT
45760: IFFALSE 45764
// exit ;
45762: GO 46237
// hex := GetHexInfo ( x , y ) ;
45764: LD_ADDR_VAR 0 15
45768: PUSH
45769: LD_VAR 0 3
45773: PPUSH
45774: LD_VAR 0 4
45778: PPUSH
45779: CALL_OW 546
45783: ST_TO_ADDR
// if hex [ 1 ] then
45784: LD_VAR 0 15
45788: PUSH
45789: LD_INT 1
45791: ARRAY
45792: IFFALSE 45796
// exit ;
45794: GO 46237
// height := hex [ 2 ] ;
45796: LD_ADDR_VAR 0 13
45800: PUSH
45801: LD_VAR 0 15
45805: PUSH
45806: LD_INT 2
45808: ARRAY
45809: ST_TO_ADDR
// for i = 1 to hexes do
45810: LD_ADDR_VAR 0 7
45814: PUSH
45815: DOUBLE
45816: LD_INT 1
45818: DEC
45819: ST_TO_ADDR
45820: LD_VAR 0 12
45824: PUSH
45825: FOR_TO
45826: IFFALSE 46156
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45828: LD_VAR 0 12
45832: PUSH
45833: LD_VAR 0 7
45837: ARRAY
45838: PUSH
45839: LD_INT 1
45841: ARRAY
45842: PPUSH
45843: LD_VAR 0 12
45847: PUSH
45848: LD_VAR 0 7
45852: ARRAY
45853: PUSH
45854: LD_INT 2
45856: ARRAY
45857: PPUSH
45858: CALL_OW 488
45862: NOT
45863: PUSH
45864: LD_VAR 0 12
45868: PUSH
45869: LD_VAR 0 7
45873: ARRAY
45874: PUSH
45875: LD_INT 1
45877: ARRAY
45878: PPUSH
45879: LD_VAR 0 12
45883: PUSH
45884: LD_VAR 0 7
45888: ARRAY
45889: PUSH
45890: LD_INT 2
45892: ARRAY
45893: PPUSH
45894: CALL_OW 428
45898: PUSH
45899: LD_INT 0
45901: GREATER
45902: OR
45903: PUSH
45904: LD_VAR 0 12
45908: PUSH
45909: LD_VAR 0 7
45913: ARRAY
45914: PUSH
45915: LD_INT 1
45917: ARRAY
45918: PPUSH
45919: LD_VAR 0 12
45923: PUSH
45924: LD_VAR 0 7
45928: ARRAY
45929: PUSH
45930: LD_INT 2
45932: ARRAY
45933: PPUSH
45934: CALL_OW 351
45938: OR
45939: IFFALSE 45945
// exit ;
45941: POP
45942: POP
45943: GO 46237
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45945: LD_ADDR_VAR 0 8
45949: PUSH
45950: LD_VAR 0 12
45954: PUSH
45955: LD_VAR 0 7
45959: ARRAY
45960: PUSH
45961: LD_INT 1
45963: ARRAY
45964: PPUSH
45965: LD_VAR 0 12
45969: PUSH
45970: LD_VAR 0 7
45974: ARRAY
45975: PUSH
45976: LD_INT 2
45978: ARRAY
45979: PPUSH
45980: CALL_OW 546
45984: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45985: LD_VAR 0 8
45989: PUSH
45990: LD_INT 1
45992: ARRAY
45993: PUSH
45994: LD_VAR 0 8
45998: PUSH
45999: LD_INT 2
46001: ARRAY
46002: PUSH
46003: LD_VAR 0 13
46007: PUSH
46008: LD_INT 2
46010: PLUS
46011: GREATER
46012: OR
46013: PUSH
46014: LD_VAR 0 8
46018: PUSH
46019: LD_INT 2
46021: ARRAY
46022: PUSH
46023: LD_VAR 0 13
46027: PUSH
46028: LD_INT 2
46030: MINUS
46031: LESS
46032: OR
46033: PUSH
46034: LD_VAR 0 8
46038: PUSH
46039: LD_INT 3
46041: ARRAY
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: LD_INT 8
46048: PUSH
46049: LD_INT 9
46051: PUSH
46052: LD_INT 10
46054: PUSH
46055: LD_INT 11
46057: PUSH
46058: LD_INT 12
46060: PUSH
46061: LD_INT 13
46063: PUSH
46064: LD_INT 16
46066: PUSH
46067: LD_INT 17
46069: PUSH
46070: LD_INT 18
46072: PUSH
46073: LD_INT 19
46075: PUSH
46076: LD_INT 20
46078: PUSH
46079: LD_INT 21
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: IN
46097: NOT
46098: OR
46099: PUSH
46100: LD_VAR 0 8
46104: PUSH
46105: LD_INT 5
46107: ARRAY
46108: NOT
46109: OR
46110: PUSH
46111: LD_VAR 0 8
46115: PUSH
46116: LD_INT 6
46118: ARRAY
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 7
46128: PUSH
46129: LD_INT 9
46131: PUSH
46132: LD_INT 10
46134: PUSH
46135: LD_INT 11
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: IN
46146: NOT
46147: OR
46148: IFFALSE 46154
// exit ;
46150: POP
46151: POP
46152: GO 46237
// end ;
46154: GO 45825
46156: POP
46157: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46158: LD_VAR 0 9
46162: PPUSH
46163: LD_VAR 0 3
46167: PPUSH
46168: LD_VAR 0 4
46172: PPUSH
46173: LD_INT 20
46175: PPUSH
46176: CALL 38160 0 4
46180: PUSH
46181: LD_INT 4
46183: ARRAY
46184: IFFALSE 46188
// exit ;
46186: GO 46237
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46188: LD_VAR 0 2
46192: PUSH
46193: LD_INT 29
46195: PUSH
46196: LD_INT 30
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: IN
46203: PUSH
46204: LD_VAR 0 3
46208: PPUSH
46209: LD_VAR 0 4
46213: PPUSH
46214: LD_VAR 0 9
46218: PPUSH
46219: CALL_OW 440
46223: NOT
46224: AND
46225: IFFALSE 46229
// exit ;
46227: GO 46237
// result := true ;
46229: LD_ADDR_VAR 0 6
46233: PUSH
46234: LD_INT 1
46236: ST_TO_ADDR
// end ;
46237: LD_VAR 0 6
46241: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46242: LD_INT 0
46244: PPUSH
46245: PPUSH
46246: PPUSH
46247: PPUSH
46248: PPUSH
46249: PPUSH
46250: PPUSH
46251: PPUSH
46252: PPUSH
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
46257: PPUSH
46258: PPUSH
46259: PPUSH
46260: PPUSH
46261: PPUSH
46262: PPUSH
46263: PPUSH
46264: PPUSH
46265: PPUSH
46266: PPUSH
46267: PPUSH
46268: PPUSH
46269: PPUSH
46270: PPUSH
46271: PPUSH
46272: PPUSH
46273: PPUSH
46274: PPUSH
46275: PPUSH
46276: PPUSH
46277: PPUSH
46278: PPUSH
46279: PPUSH
46280: PPUSH
46281: PPUSH
46282: PPUSH
46283: PPUSH
46284: PPUSH
46285: PPUSH
46286: PPUSH
46287: PPUSH
46288: PPUSH
46289: PPUSH
46290: PPUSH
46291: PPUSH
46292: PPUSH
46293: PPUSH
46294: PPUSH
46295: PPUSH
46296: PPUSH
46297: PPUSH
46298: PPUSH
46299: PPUSH
46300: PPUSH
46301: PPUSH
// result = [ ] ;
46302: LD_ADDR_VAR 0 7
46306: PUSH
46307: EMPTY
46308: ST_TO_ADDR
// temp_list = [ ] ;
46309: LD_ADDR_VAR 0 9
46313: PUSH
46314: EMPTY
46315: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46316: LD_VAR 0 4
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: LD_INT 3
46332: PUSH
46333: LD_INT 4
46335: PUSH
46336: LD_INT 5
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: IN
46347: NOT
46348: PUSH
46349: LD_VAR 0 1
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: IN
46364: PUSH
46365: LD_VAR 0 5
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: LD_INT 3
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: LIST
46383: IN
46384: NOT
46385: AND
46386: OR
46387: IFFALSE 46391
// exit ;
46389: GO 64782
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46391: LD_VAR 0 1
46395: PUSH
46396: LD_INT 6
46398: PUSH
46399: LD_INT 7
46401: PUSH
46402: LD_INT 8
46404: PUSH
46405: LD_INT 13
46407: PUSH
46408: LD_INT 12
46410: PUSH
46411: LD_INT 15
46413: PUSH
46414: LD_INT 11
46416: PUSH
46417: LD_INT 14
46419: PUSH
46420: LD_INT 10
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: IN
46434: IFFALSE 46444
// btype = b_lab ;
46436: LD_ADDR_VAR 0 1
46440: PUSH
46441: LD_INT 6
46443: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46444: LD_VAR 0 6
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: LIST
46462: IN
46463: NOT
46464: PUSH
46465: LD_VAR 0 1
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: LD_INT 3
46481: PUSH
46482: LD_INT 6
46484: PUSH
46485: LD_INT 36
46487: PUSH
46488: LD_INT 4
46490: PUSH
46491: LD_INT 5
46493: PUSH
46494: LD_INT 31
46496: PUSH
46497: LD_INT 32
46499: PUSH
46500: LD_INT 33
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: IN
46516: NOT
46517: PUSH
46518: LD_VAR 0 6
46522: PUSH
46523: LD_INT 1
46525: EQUAL
46526: AND
46527: OR
46528: PUSH
46529: LD_VAR 0 1
46533: PUSH
46534: LD_INT 2
46536: PUSH
46537: LD_INT 3
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: IN
46544: NOT
46545: PUSH
46546: LD_VAR 0 6
46550: PUSH
46551: LD_INT 2
46553: EQUAL
46554: AND
46555: OR
46556: IFFALSE 46566
// mode = 0 ;
46558: LD_ADDR_VAR 0 6
46562: PUSH
46563: LD_INT 0
46565: ST_TO_ADDR
// case mode of 0 :
46566: LD_VAR 0 6
46570: PUSH
46571: LD_INT 0
46573: DOUBLE
46574: EQUAL
46575: IFTRUE 46579
46577: GO 58032
46579: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46580: LD_ADDR_VAR 0 11
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 3
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: LD_INT 3
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46773: LD_ADDR_VAR 0 12
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 3
46930: NEG
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 3
46941: NEG
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46969: LD_ADDR_VAR 0 13
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: LD_INT 3
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 3
47128: NEG
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 3
47140: NEG
47141: PUSH
47142: LD_INT 3
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47168: LD_ADDR_VAR 0 14
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 2
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 3
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 3
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: LD_INT 2
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47364: LD_ADDR_VAR 0 15
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: LD_INT 1
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 2
47498: NEG
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 3
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 3
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47557: LD_ADDR_VAR 0 16
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 2
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: LD_INT 2
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 3
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 3
47714: PUSH
47715: LD_INT 3
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: LD_INT 3
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47750: LD_ADDR_VAR 0 17
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 2
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47980: LD_ADDR_VAR 0 18
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: LD_INT 2
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 2
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: NEG
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: NEG
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: LD_INT 2
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48210: LD_ADDR_VAR 0 19
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 2
48386: NEG
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48440: LD_ADDR_VAR 0 20
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 2
48616: NEG
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48670: LD_ADDR_VAR 0 21
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: LD_INT 2
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: LD_INT 2
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48900: LD_ADDR_VAR 0 22
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 2
49076: NEG
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49130: LD_ADDR_VAR 0 23
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 2
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 2
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: LD_INT 3
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: LD_INT 3
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49410: LD_ADDR_VAR 0 24
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: LD_INT 2
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: LD_INT 2
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: LD_INT 2
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 2
49586: NEG
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 2
49597: NEG
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 2
49609: NEG
49610: PUSH
49611: LD_INT 2
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 2
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 3
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 3
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49686: LD_ADDR_VAR 0 25
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 3
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 3
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: PUSH
49918: LD_INT 3
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: LD_INT 3
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49960: LD_ADDR_VAR 0 26
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: LD_INT 2
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: LD_INT 2
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 2
50147: NEG
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: LD_INT 2
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 2
50171: PUSH
50172: LD_INT 3
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 3
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: NEG
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50236: LD_ADDR_VAR 0 27
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 2
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: NEG
50436: PUSH
50437: LD_INT 2
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 3
50469: NEG
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 3
50481: NEG
50482: PUSH
50483: LD_INT 2
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50516: LD_ADDR_VAR 0 28
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: NEG
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: LD_INT 2
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 2
50727: NEG
50728: PUSH
50729: LD_INT 3
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: LD_INT 3
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 3
50751: NEG
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 3
50763: NEG
50764: PUSH
50765: LD_INT 2
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50798: LD_ADDR_VAR 0 29
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: LD_INT 2
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: NEG
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: LD_INT 2
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: NEG
50989: PUSH
50990: LD_INT 3
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 3
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: LD_INT 2
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 3
51042: NEG
51043: PUSH
51044: LD_INT 2
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51077: LD_ADDR_VAR 0 30
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 3
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 3
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 2
51299: PUSH
51300: LD_INT 3
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 3
51320: NEG
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51355: LD_ADDR_VAR 0 31
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: LD_INT 2
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 2
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: LD_INT 2
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 0
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 2
51532: NEG
51533: PUSH
51534: LD_INT 2
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 2
51544: NEG
51545: PUSH
51546: LD_INT 3
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 3
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 3
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: LD_INT 2
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 3
51598: NEG
51599: PUSH
51600: LD_INT 2
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51633: LD_ADDR_VAR 0 32
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: LD_INT 2
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 2
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 2
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: LD_INT 2
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 2
51810: NEG
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 3
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 3
51845: PUSH
51846: LD_INT 2
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: LD_INT 3
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 3
51876: NEG
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51911: LD_ADDR_VAR 0 33
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: LD_INT 2
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: NEG
52102: PUSH
52103: LD_INT 3
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 3
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: LD_INT 3
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 3
52155: NEG
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52190: LD_ADDR_VAR 0 34
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: LD_INT 2
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: NEG
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: NEG
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: NEG
52370: PUSH
52371: LD_INT 2
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: LD_INT 3
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 3
52404: PUSH
52405: LD_INT 2
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: LD_INT 3
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 3
52435: NEG
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52470: LD_ADDR_VAR 0 35
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52582: LD_ADDR_VAR 0 36
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: LD_INT 2
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52694: LD_ADDR_VAR 0 37
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52806: LD_ADDR_VAR 0 38
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 0
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 2
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52918: LD_ADDR_VAR 0 39
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53030: LD_ADDR_VAR 0 40
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53142: LD_ADDR_VAR 0 41
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: LD_INT 2
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 2
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: NEG
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: NEG
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: LD_INT 2
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: NEG
53333: PUSH
53334: LD_INT 3
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 3
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 3
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 3
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 3
53385: PUSH
53386: LD_INT 3
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: LD_INT 3
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 2
53405: NEG
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 3
53416: NEG
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 3
53427: NEG
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 3
53439: NEG
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 3
53451: NEG
53452: PUSH
53453: LD_INT 3
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53492: LD_ADDR_VAR 0 42
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 2
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: LD_INT 2
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 2
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 2
53670: NEG
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: NEG
53683: PUSH
53684: LD_INT 3
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: LD_INT 3
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 3
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 3
53728: PUSH
53729: LD_INT 2
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 3
53738: PUSH
53739: LD_INT 3
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 2
53748: PUSH
53749: LD_INT 3
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: LD_INT 3
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: LD_INT 3
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: LD_INT 2
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 3
53789: NEG
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 3
53801: NEG
53802: PUSH
53803: LD_INT 3
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53842: LD_ADDR_VAR 0 43
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: LD_INT 2
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 2
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 2
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: NEG
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: LD_INT 3
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: LD_INT 3
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: LD_INT 2
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 3
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 3
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 3
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 2
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 3
54138: NEG
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 3
54149: NEG
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54190: LD_ADDR_VAR 0 44
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: LD_INT 2
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 2
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: PUSH
54315: LD_INT 2
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 2
54356: NEG
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: LD_INT 3
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 3
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 3
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 3
54423: PUSH
54424: LD_INT 2
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 3
54433: PUSH
54434: LD_INT 3
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 3
54464: NEG
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 3
54475: NEG
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 3
54487: NEG
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 3
54499: NEG
54500: PUSH
54501: LD_INT 3
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54540: LD_ADDR_VAR 0 45
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 2
54730: NEG
54731: PUSH
54732: LD_INT 3
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 3
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 3
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 3
54786: PUSH
54787: LD_INT 3
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: LD_INT 3
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: LD_INT 3
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 3
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 3
54837: NEG
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 3
54849: NEG
54850: PUSH
54851: LD_INT 3
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54890: LD_ADDR_VAR 0 46
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 2
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 2
55056: NEG
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: LD_INT 3
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 3
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 3
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: LD_INT 3
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 3
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: LD_INT 2
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: NEG
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 3
55186: NEG
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 3
55197: NEG
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55238: LD_ADDR_VAR 0 47
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: LD_INT 2
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 2
55353: NEG
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55389: LD_ADDR_VAR 0 48
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 2
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55536: LD_ADDR_VAR 0 49
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 2
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55680: LD_ADDR_VAR 0 50
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: LD_INT 2
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: LD_INT 2
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55824: LD_ADDR_VAR 0 51
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 2
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 2
55947: NEG
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55971: LD_ADDR_VAR 0 52
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 2
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56122: LD_ADDR_VAR 0 53
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: LD_INT 2
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 2
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: PUSH
56258: LD_INT 2
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: LD_INT 2
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 2
56298: NEG
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: NEG
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56352: LD_ADDR_VAR 0 54
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: LD_INT 2
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 2
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: NEG
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56582: LD_ADDR_VAR 0 55
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: LD_INT 2
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 2
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 2
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 2
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 2
56758: NEG
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 2
56769: NEG
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: LD_INT 2
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56812: LD_ADDR_VAR 0 56
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 2
56988: NEG
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 2
56999: NEG
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: NEG
57012: PUSH
57013: LD_INT 2
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57042: LD_ADDR_VAR 0 57
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 2
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 2
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: LD_INT 2
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: LD_INT 2
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57272: LD_ADDR_VAR 0 58
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: LD_INT 2
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: LD_INT 2
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 2
57448: NEG
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 2
57459: NEG
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: LD_INT 2
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57502: LD_ADDR_VAR 0 59
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57590: LD_ADDR_VAR 0 60
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57678: LD_ADDR_VAR 0 61
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57766: LD_ADDR_VAR 0 62
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57854: LD_ADDR_VAR 0 63
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57942: LD_ADDR_VAR 0 64
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: ST_TO_ADDR
// end ; 1 :
58030: GO 63927
58032: LD_INT 1
58034: DOUBLE
58035: EQUAL
58036: IFTRUE 58040
58038: GO 60663
58040: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58041: LD_ADDR_VAR 0 11
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: LD_INT 3
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: LD_INT 3
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: LD_INT 2
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: LIST
58084: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58085: LD_ADDR_VAR 0 12
58089: PUSH
58090: LD_INT 2
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 3
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 3
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: LIST
58125: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58126: LD_ADDR_VAR 0 13
58130: PUSH
58131: LD_INT 3
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 3
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: LD_INT 3
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: LIST
58165: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58166: LD_ADDR_VAR 0 14
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: LD_INT 3
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 3
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: LD_INT 2
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: LIST
58206: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58207: LD_ADDR_VAR 0 15
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 3
58225: NEG
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 3
58236: NEG
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: LIST
58250: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58251: LD_ADDR_VAR 0 16
58255: PUSH
58256: LD_INT 2
58258: NEG
58259: PUSH
58260: LD_INT 3
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 3
58270: NEG
58271: PUSH
58272: LD_INT 2
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 3
58282: NEG
58283: PUSH
58284: LD_INT 3
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: LIST
58296: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58297: LD_ADDR_VAR 0 17
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: LD_INT 3
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: LD_INT 3
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: LIST
58340: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58341: LD_ADDR_VAR 0 18
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 3
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 3
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: LIST
58381: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58382: LD_ADDR_VAR 0 19
58386: PUSH
58387: LD_INT 3
58389: PUSH
58390: LD_INT 2
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 3
58399: PUSH
58400: LD_INT 3
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 2
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: LIST
58421: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58422: LD_ADDR_VAR 0 20
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: LD_INT 3
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: LD_INT 3
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: LIST
58462: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58463: LD_ADDR_VAR 0 21
58467: PUSH
58468: LD_INT 2
58470: NEG
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 3
58481: NEG
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 3
58492: NEG
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: LIST
58506: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58507: LD_ADDR_VAR 0 22
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: LD_INT 3
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 3
58526: NEG
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 3
58538: NEG
58539: PUSH
58540: LD_INT 3
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: LIST
58552: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58553: LD_ADDR_VAR 0 23
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: LD_INT 3
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: LD_INT 4
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 3
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: LIST
58596: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58597: LD_ADDR_VAR 0 24
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 3
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 4
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: LIST
58637: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58638: LD_ADDR_VAR 0 25
58642: PUSH
58643: LD_INT 3
58645: PUSH
58646: LD_INT 3
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 4
58655: PUSH
58656: LD_INT 3
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 3
58665: PUSH
58666: LD_INT 4
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: LIST
58677: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58678: LD_ADDR_VAR 0 26
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: LD_INT 3
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: LD_INT 4
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: LD_INT 3
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: LIST
58718: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58719: LD_ADDR_VAR 0 27
58723: PUSH
58724: LD_INT 3
58726: NEG
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 3
58737: NEG
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 4
58748: NEG
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: LIST
58762: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58763: LD_ADDR_VAR 0 28
58767: PUSH
58768: LD_INT 3
58770: NEG
58771: PUSH
58772: LD_INT 3
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 3
58782: NEG
58783: PUSH
58784: LD_INT 4
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 4
58794: NEG
58795: PUSH
58796: LD_INT 3
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: LIST
58808: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58809: LD_ADDR_VAR 0 29
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: LD_INT 3
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: LD_INT 3
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: LD_INT 4
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: LD_INT 4
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: LD_INT 3
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: LD_INT 5
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: LD_INT 5
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: LD_INT 4
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: LD_INT 6
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: LD_INT 6
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: LD_INT 5
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58964: LD_ADDR_VAR 0 30
58968: PUSH
58969: LD_INT 2
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 3
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 3
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 3
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 4
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 4
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 4
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 5
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 5
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 5
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 6
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 6
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59107: LD_ADDR_VAR 0 31
59111: PUSH
59112: LD_INT 3
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 3
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: LD_INT 3
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 4
59144: PUSH
59145: LD_INT 3
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 4
59154: PUSH
59155: LD_INT 4
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 3
59164: PUSH
59165: LD_INT 4
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 5
59174: PUSH
59175: LD_INT 4
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 5
59184: PUSH
59185: LD_INT 5
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 4
59194: PUSH
59195: LD_INT 5
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 6
59204: PUSH
59205: LD_INT 5
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 6
59214: PUSH
59215: LD_INT 6
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 5
59224: PUSH
59225: LD_INT 6
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59246: LD_ADDR_VAR 0 32
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: LD_INT 3
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: LD_INT 3
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: LD_INT 4
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: LD_INT 4
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: LD_INT 3
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: LD_INT 5
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: LD_INT 5
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: LD_INT 4
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: LD_INT 6
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: LD_INT 6
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: LD_INT 5
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59389: LD_ADDR_VAR 0 33
59393: PUSH
59394: LD_INT 2
59396: NEG
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 3
59407: NEG
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 3
59418: NEG
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 3
59430: NEG
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 4
59441: NEG
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 4
59452: NEG
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 4
59464: NEG
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 5
59475: NEG
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 5
59486: NEG
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 5
59498: NEG
59499: PUSH
59500: LD_INT 1
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 6
59509: NEG
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 6
59520: NEG
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59544: LD_ADDR_VAR 0 34
59548: PUSH
59549: LD_INT 2
59551: NEG
59552: PUSH
59553: LD_INT 3
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 3
59563: NEG
59564: PUSH
59565: LD_INT 2
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 3
59575: NEG
59576: PUSH
59577: LD_INT 3
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 3
59587: NEG
59588: PUSH
59589: LD_INT 4
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 4
59599: NEG
59600: PUSH
59601: LD_INT 3
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 4
59611: NEG
59612: PUSH
59613: LD_INT 4
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 4
59623: NEG
59624: PUSH
59625: LD_INT 5
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 5
59635: NEG
59636: PUSH
59637: LD_INT 4
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 5
59647: NEG
59648: PUSH
59649: LD_INT 5
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 5
59659: NEG
59660: PUSH
59661: LD_INT 6
59663: NEG
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 6
59671: NEG
59672: PUSH
59673: LD_INT 5
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 6
59683: NEG
59684: PUSH
59685: LD_INT 6
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59707: LD_ADDR_VAR 0 41
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: LD_INT 2
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: LD_INT 3
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: LIST
59750: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59751: LD_ADDR_VAR 0 42
59755: PUSH
59756: LD_INT 2
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 3
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: LIST
59791: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59792: LD_ADDR_VAR 0 43
59796: PUSH
59797: LD_INT 2
59799: PUSH
59800: LD_INT 2
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 3
59809: PUSH
59810: LD_INT 2
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: LD_INT 3
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59832: LD_ADDR_VAR 0 44
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: LD_INT 2
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: LIST
59872: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59873: LD_ADDR_VAR 0 45
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 2
59891: NEG
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 3
59902: NEG
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: LIST
59916: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59917: LD_ADDR_VAR 0 46
59921: PUSH
59922: LD_INT 2
59924: NEG
59925: PUSH
59926: LD_INT 2
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: NEG
59937: PUSH
59938: LD_INT 3
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 3
59948: NEG
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59963: LD_ADDR_VAR 0 47
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: LD_INT 3
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59996: LD_ADDR_VAR 0 48
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: LD_INT 2
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60027: LD_ADDR_VAR 0 49
60031: PUSH
60032: LD_INT 3
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 3
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60056: LD_ADDR_VAR 0 50
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: LD_INT 3
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: LD_INT 3
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60085: LD_ADDR_VAR 0 51
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: LD_INT 2
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 2
60103: NEG
60104: PUSH
60105: LD_INT 1
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60116: LD_ADDR_VAR 0 52
60120: PUSH
60121: LD_INT 3
60123: NEG
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 3
60135: NEG
60136: PUSH
60137: LD_INT 2
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60149: LD_ADDR_VAR 0 53
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: LD_INT 3
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: LD_INT 3
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: LD_INT 2
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: LIST
60192: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60193: LD_ADDR_VAR 0 54
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 3
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 3
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: LIST
60233: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60234: LD_ADDR_VAR 0 55
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: LD_INT 2
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 3
60251: PUSH
60252: LD_INT 3
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: LD_INT 3
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: LIST
60273: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60274: LD_ADDR_VAR 0 56
60278: PUSH
60279: LD_INT 1
60281: PUSH
60282: LD_INT 3
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: LD_INT 3
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: LD_INT 2
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: LIST
60314: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60315: LD_ADDR_VAR 0 57
60319: PUSH
60320: LD_INT 2
60322: NEG
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 3
60333: NEG
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 3
60344: NEG
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: LIST
60358: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60359: LD_ADDR_VAR 0 58
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: LD_INT 3
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 3
60378: NEG
60379: PUSH
60380: LD_INT 2
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 3
60390: NEG
60391: PUSH
60392: LD_INT 3
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: LIST
60404: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60405: LD_ADDR_VAR 0 59
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: LD_INT 2
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: LD_INT 2
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: LIST
60448: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60449: LD_ADDR_VAR 0 60
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: LD_INT 1
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 2
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: LIST
60489: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60490: LD_ADDR_VAR 0 61
60494: PUSH
60495: LD_INT 2
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: LD_INT 2
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: LIST
60529: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60530: LD_ADDR_VAR 0 62
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: LD_INT 2
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: LIST
60570: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60571: LD_ADDR_VAR 0 63
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 2
60589: NEG
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 2
60600: NEG
60601: PUSH
60602: LD_INT 1
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: LIST
60614: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60615: LD_ADDR_VAR 0 64
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: LD_INT 2
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 2
60634: NEG
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: LD_INT 2
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: LIST
60660: ST_TO_ADDR
// end ; 2 :
60661: GO 63927
60663: LD_INT 2
60665: DOUBLE
60666: EQUAL
60667: IFTRUE 60671
60669: GO 63926
60671: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60672: LD_ADDR_VAR 0 29
60676: PUSH
60677: LD_INT 4
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 4
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 5
60700: PUSH
60701: LD_INT 0
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 5
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 4
60720: PUSH
60721: LD_INT 1
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 3
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 3
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 3
60751: PUSH
60752: LD_INT 2
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 5
60762: PUSH
60763: LD_INT 2
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 3
60772: PUSH
60773: LD_INT 3
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 3
60782: PUSH
60783: LD_INT 2
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 4
60792: PUSH
60793: LD_INT 3
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 4
60802: PUSH
60803: LD_INT 4
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 3
60812: PUSH
60813: LD_INT 4
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 2
60822: PUSH
60823: LD_INT 3
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: PUSH
60833: LD_INT 2
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 4
60842: PUSH
60843: LD_INT 2
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 2
60852: PUSH
60853: LD_INT 4
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: LD_INT 4
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: LD_INT 3
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 1
60882: PUSH
60883: LD_INT 4
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: LD_INT 5
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: LD_INT 5
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: LD_INT 4
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: PUSH
60925: LD_INT 3
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: LD_INT 5
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 2
60944: NEG
60945: PUSH
60946: LD_INT 3
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 3
60955: NEG
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 3
60966: NEG
60967: PUSH
60968: LD_INT 1
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: NEG
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 2
60989: NEG
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 3
61000: NEG
61001: PUSH
61002: LD_INT 1
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 4
61011: NEG
61012: PUSH
61013: LD_INT 0
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 4
61022: NEG
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 4
61034: NEG
61035: PUSH
61036: LD_INT 2
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 2
61046: NEG
61047: PUSH
61048: LD_INT 2
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 4
61057: NEG
61058: PUSH
61059: LD_INT 4
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 4
61069: NEG
61070: PUSH
61071: LD_INT 5
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 3
61081: NEG
61082: PUSH
61083: LD_INT 4
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 3
61093: NEG
61094: PUSH
61095: LD_INT 3
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 4
61105: NEG
61106: PUSH
61107: LD_INT 3
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 5
61117: NEG
61118: PUSH
61119: LD_INT 4
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 5
61129: NEG
61130: PUSH
61131: LD_INT 5
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 3
61141: NEG
61142: PUSH
61143: LD_INT 5
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 5
61153: NEG
61154: PUSH
61155: LD_INT 3
61157: NEG
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61210: LD_ADDR_VAR 0 30
61214: PUSH
61215: LD_INT 4
61217: PUSH
61218: LD_INT 4
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 4
61227: PUSH
61228: LD_INT 3
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 5
61237: PUSH
61238: LD_INT 4
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 5
61247: PUSH
61248: LD_INT 5
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 4
61257: PUSH
61258: LD_INT 5
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 3
61267: PUSH
61268: LD_INT 4
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 3
61277: PUSH
61278: LD_INT 3
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 5
61287: PUSH
61288: LD_INT 3
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 3
61297: PUSH
61298: LD_INT 5
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: LD_INT 3
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: LD_INT 2
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: LD_INT 3
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 1
61337: PUSH
61338: LD_INT 4
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: LD_INT 4
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: LD_INT 3
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: NEG
61369: PUSH
61370: LD_INT 2
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 2
61379: PUSH
61380: LD_INT 4
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 2
61389: NEG
61390: PUSH
61391: LD_INT 2
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 4
61400: NEG
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 4
61411: NEG
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 3
61423: NEG
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 3
61434: NEG
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 4
61445: NEG
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 5
61456: NEG
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 5
61467: NEG
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 5
61479: NEG
61480: PUSH
61481: LD_INT 2
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 3
61491: NEG
61492: PUSH
61493: LD_INT 2
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 3
61502: NEG
61503: PUSH
61504: LD_INT 3
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 3
61514: NEG
61515: PUSH
61516: LD_INT 4
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: LD_INT 3
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 2
61538: NEG
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 3
61550: NEG
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 4
61562: NEG
61563: PUSH
61564: LD_INT 3
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 4
61574: NEG
61575: PUSH
61576: LD_INT 4
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: LD_INT 4
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 4
61598: NEG
61599: PUSH
61600: LD_INT 2
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: LD_INT 4
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 0
61621: PUSH
61622: LD_INT 5
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 1
61632: PUSH
61633: LD_INT 4
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: LD_INT 3
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: LD_INT 3
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 1
61665: NEG
61666: PUSH
61667: LD_INT 4
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 1
61677: NEG
61678: PUSH
61679: LD_INT 5
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 2
61689: PUSH
61690: LD_INT 3
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 2
61700: NEG
61701: PUSH
61702: LD_INT 5
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61757: LD_ADDR_VAR 0 31
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: LD_INT 4
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: LD_INT 3
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: LD_INT 4
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 1
61794: PUSH
61795: LD_INT 5
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: LD_INT 5
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: NEG
61815: PUSH
61816: LD_INT 4
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: PUSH
61827: LD_INT 3
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 2
61836: PUSH
61837: LD_INT 5
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 2
61846: NEG
61847: PUSH
61848: LD_INT 3
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 3
61857: NEG
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 3
61868: NEG
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 2
61880: NEG
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 2
61891: NEG
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 3
61902: NEG
61903: PUSH
61904: LD_INT 1
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 4
61913: NEG
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 4
61924: NEG
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 4
61936: NEG
61937: PUSH
61938: LD_INT 2
61940: NEG
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 2
61948: NEG
61949: PUSH
61950: LD_INT 2
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 4
61959: NEG
61960: PUSH
61961: LD_INT 4
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 4
61971: NEG
61972: PUSH
61973: LD_INT 5
61975: NEG
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 3
61983: NEG
61984: PUSH
61985: LD_INT 4
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 3
61995: NEG
61996: PUSH
61997: LD_INT 3
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 4
62007: NEG
62008: PUSH
62009: LD_INT 3
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 5
62019: NEG
62020: PUSH
62021: LD_INT 4
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 5
62031: NEG
62032: PUSH
62033: LD_INT 5
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 3
62043: NEG
62044: PUSH
62045: LD_INT 5
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 5
62055: NEG
62056: PUSH
62057: LD_INT 3
62059: NEG
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: LD_INT 3
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: LD_INT 4
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: LD_INT 3
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: LD_INT 2
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: LD_INT 2
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: LD_INT 3
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: LD_INT 4
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 2
62146: PUSH
62147: LD_INT 2
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: LD_INT 4
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 4
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 4
62179: PUSH
62180: LD_INT 1
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 5
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 5
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 4
62210: PUSH
62211: LD_INT 1
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 3
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 3
62230: PUSH
62231: LD_INT 1
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 3
62241: PUSH
62242: LD_INT 2
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 5
62252: PUSH
62253: LD_INT 2
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62307: LD_ADDR_VAR 0 32
62311: PUSH
62312: LD_INT 4
62314: NEG
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 4
62325: NEG
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 3
62337: NEG
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 3
62348: NEG
62349: PUSH
62350: LD_INT 1
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 4
62359: NEG
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 5
62370: NEG
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 5
62381: NEG
62382: PUSH
62383: LD_INT 1
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 5
62393: NEG
62394: PUSH
62395: LD_INT 2
62397: NEG
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 3
62405: NEG
62406: PUSH
62407: LD_INT 2
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 3
62416: NEG
62417: PUSH
62418: LD_INT 3
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 3
62428: NEG
62429: PUSH
62430: LD_INT 4
62432: NEG
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 2
62440: NEG
62441: PUSH
62442: LD_INT 3
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 2
62452: NEG
62453: PUSH
62454: LD_INT 2
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 3
62464: NEG
62465: PUSH
62466: LD_INT 2
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 4
62476: NEG
62477: PUSH
62478: LD_INT 3
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 4
62488: NEG
62489: PUSH
62490: LD_INT 4
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 2
62500: NEG
62501: PUSH
62502: LD_INT 4
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 4
62512: NEG
62513: PUSH
62514: LD_INT 2
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: LD_INT 4
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: LD_INT 5
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 1
62546: PUSH
62547: LD_INT 4
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 1
62557: PUSH
62558: LD_INT 3
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: LD_INT 3
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: NEG
62580: PUSH
62581: LD_INT 4
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 1
62591: NEG
62592: PUSH
62593: LD_INT 5
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: LD_INT 3
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 2
62614: NEG
62615: PUSH
62616: LD_INT 5
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 3
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 3
62636: PUSH
62637: LD_INT 1
62639: NEG
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 4
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 4
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 3
62667: PUSH
62668: LD_INT 1
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 2
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 2
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: LD_INT 2
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 4
62709: PUSH
62710: LD_INT 2
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 4
62719: PUSH
62720: LD_INT 4
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 4
62729: PUSH
62730: LD_INT 3
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 5
62739: PUSH
62740: LD_INT 4
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 5
62749: PUSH
62750: LD_INT 5
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 4
62759: PUSH
62760: LD_INT 5
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 3
62769: PUSH
62770: LD_INT 4
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 3
62779: PUSH
62780: LD_INT 3
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 5
62789: PUSH
62790: LD_INT 3
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 3
62799: PUSH
62800: LD_INT 5
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62854: LD_ADDR_VAR 0 33
62858: PUSH
62859: LD_INT 4
62861: NEG
62862: PUSH
62863: LD_INT 4
62865: NEG
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 4
62873: NEG
62874: PUSH
62875: LD_INT 5
62877: NEG
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 3
62885: NEG
62886: PUSH
62887: LD_INT 4
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 3
62897: NEG
62898: PUSH
62899: LD_INT 3
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 4
62909: NEG
62910: PUSH
62911: LD_INT 3
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 5
62921: NEG
62922: PUSH
62923: LD_INT 4
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 5
62933: NEG
62934: PUSH
62935: LD_INT 5
62937: NEG
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 3
62945: NEG
62946: PUSH
62947: LD_INT 5
62949: NEG
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 5
62957: NEG
62958: PUSH
62959: LD_INT 3
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: LD_INT 3
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: LD_INT 4
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 1
62991: PUSH
62992: LD_INT 3
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: PUSH
63003: LD_INT 2
63005: NEG
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 0
63013: PUSH
63014: LD_INT 2
63016: NEG
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: NEG
63025: PUSH
63026: LD_INT 3
63028: NEG
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: NEG
63037: PUSH
63038: LD_INT 4
63040: NEG
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 2
63048: PUSH
63049: LD_INT 2
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 2
63059: NEG
63060: PUSH
63061: LD_INT 4
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 4
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 4
63081: PUSH
63082: LD_INT 1
63084: NEG
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 5
63092: PUSH
63093: LD_INT 0
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 5
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 4
63112: PUSH
63113: LD_INT 1
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 3
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 3
63132: PUSH
63133: LD_INT 1
63135: NEG
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 3
63143: PUSH
63144: LD_INT 2
63146: NEG
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 5
63154: PUSH
63155: LD_INT 2
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 3
63164: PUSH
63165: LD_INT 3
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 3
63174: PUSH
63175: LD_INT 2
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 4
63184: PUSH
63185: LD_INT 3
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 4
63194: PUSH
63195: LD_INT 4
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 3
63204: PUSH
63205: LD_INT 4
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 2
63214: PUSH
63215: LD_INT 3
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 2
63224: PUSH
63225: LD_INT 2
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 4
63234: PUSH
63235: LD_INT 2
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 2
63244: PUSH
63245: LD_INT 4
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: LD_INT 4
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 3
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 1
63274: PUSH
63275: LD_INT 4
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: LD_INT 5
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 0
63294: PUSH
63295: LD_INT 5
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 1
63304: NEG
63305: PUSH
63306: LD_INT 4
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 1
63315: NEG
63316: PUSH
63317: LD_INT 3
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 2
63326: PUSH
63327: LD_INT 5
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 2
63336: NEG
63337: PUSH
63338: LD_INT 3
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63392: LD_ADDR_VAR 0 34
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: LD_INT 4
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 0
63410: PUSH
63411: LD_INT 5
63413: NEG
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 1
63421: PUSH
63422: LD_INT 4
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 1
63432: PUSH
63433: LD_INT 3
63435: NEG
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: LD_INT 3
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 1
63454: NEG
63455: PUSH
63456: LD_INT 4
63458: NEG
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 1
63466: NEG
63467: PUSH
63468: LD_INT 5
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 2
63478: PUSH
63479: LD_INT 3
63481: NEG
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 2
63489: NEG
63490: PUSH
63491: LD_INT 5
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 3
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 3
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 4
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 4
63532: PUSH
63533: LD_INT 1
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 3
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 2
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 2
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 2
63573: PUSH
63574: LD_INT 2
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 4
63584: PUSH
63585: LD_INT 2
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 4
63594: PUSH
63595: LD_INT 4
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 4
63604: PUSH
63605: LD_INT 3
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 5
63614: PUSH
63615: LD_INT 4
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 5
63624: PUSH
63625: LD_INT 5
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 4
63634: PUSH
63635: LD_INT 5
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 3
63644: PUSH
63645: LD_INT 4
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 3
63654: PUSH
63655: LD_INT 3
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 5
63664: PUSH
63665: LD_INT 3
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 3
63674: PUSH
63675: LD_INT 5
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 0
63684: PUSH
63685: LD_INT 3
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: LD_INT 2
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: LD_INT 3
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: PUSH
63715: LD_INT 4
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: LD_INT 4
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: LD_INT 3
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 2
63756: PUSH
63757: LD_INT 4
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 2
63766: NEG
63767: PUSH
63768: LD_INT 2
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 4
63777: NEG
63778: PUSH
63779: LD_INT 0
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 4
63788: NEG
63789: PUSH
63790: LD_INT 1
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 3
63800: NEG
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 3
63811: NEG
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 4
63822: NEG
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 5
63833: NEG
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 5
63844: NEG
63845: PUSH
63846: LD_INT 1
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 5
63856: NEG
63857: PUSH
63858: LD_INT 2
63860: NEG
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 3
63868: NEG
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: ST_TO_ADDR
// end ; end ;
63924: GO 63927
63926: POP
// case btype of b_depot , b_warehouse :
63927: LD_VAR 0 1
63931: PUSH
63932: LD_INT 0
63934: DOUBLE
63935: EQUAL
63936: IFTRUE 63946
63938: LD_INT 1
63940: DOUBLE
63941: EQUAL
63942: IFTRUE 63946
63944: GO 64147
63946: POP
// case nation of nation_american :
63947: LD_VAR 0 5
63951: PUSH
63952: LD_INT 1
63954: DOUBLE
63955: EQUAL
63956: IFTRUE 63960
63958: GO 64016
63960: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63961: LD_ADDR_VAR 0 9
63965: PUSH
63966: LD_VAR 0 11
63970: PUSH
63971: LD_VAR 0 12
63975: PUSH
63976: LD_VAR 0 13
63980: PUSH
63981: LD_VAR 0 14
63985: PUSH
63986: LD_VAR 0 15
63990: PUSH
63991: LD_VAR 0 16
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: PUSH
64004: LD_VAR 0 4
64008: PUSH
64009: LD_INT 1
64011: PLUS
64012: ARRAY
64013: ST_TO_ADDR
64014: GO 64145
64016: LD_INT 2
64018: DOUBLE
64019: EQUAL
64020: IFTRUE 64024
64022: GO 64080
64024: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64025: LD_ADDR_VAR 0 9
64029: PUSH
64030: LD_VAR 0 17
64034: PUSH
64035: LD_VAR 0 18
64039: PUSH
64040: LD_VAR 0 19
64044: PUSH
64045: LD_VAR 0 20
64049: PUSH
64050: LD_VAR 0 21
64054: PUSH
64055: LD_VAR 0 22
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: PUSH
64068: LD_VAR 0 4
64072: PUSH
64073: LD_INT 1
64075: PLUS
64076: ARRAY
64077: ST_TO_ADDR
64078: GO 64145
64080: LD_INT 3
64082: DOUBLE
64083: EQUAL
64084: IFTRUE 64088
64086: GO 64144
64088: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64089: LD_ADDR_VAR 0 9
64093: PUSH
64094: LD_VAR 0 23
64098: PUSH
64099: LD_VAR 0 24
64103: PUSH
64104: LD_VAR 0 25
64108: PUSH
64109: LD_VAR 0 26
64113: PUSH
64114: LD_VAR 0 27
64118: PUSH
64119: LD_VAR 0 28
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: PUSH
64132: LD_VAR 0 4
64136: PUSH
64137: LD_INT 1
64139: PLUS
64140: ARRAY
64141: ST_TO_ADDR
64142: GO 64145
64144: POP
64145: GO 64700
64147: LD_INT 2
64149: DOUBLE
64150: EQUAL
64151: IFTRUE 64161
64153: LD_INT 3
64155: DOUBLE
64156: EQUAL
64157: IFTRUE 64161
64159: GO 64217
64161: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64162: LD_ADDR_VAR 0 9
64166: PUSH
64167: LD_VAR 0 29
64171: PUSH
64172: LD_VAR 0 30
64176: PUSH
64177: LD_VAR 0 31
64181: PUSH
64182: LD_VAR 0 32
64186: PUSH
64187: LD_VAR 0 33
64191: PUSH
64192: LD_VAR 0 34
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: PUSH
64205: LD_VAR 0 4
64209: PUSH
64210: LD_INT 1
64212: PLUS
64213: ARRAY
64214: ST_TO_ADDR
64215: GO 64700
64217: LD_INT 16
64219: DOUBLE
64220: EQUAL
64221: IFTRUE 64279
64223: LD_INT 17
64225: DOUBLE
64226: EQUAL
64227: IFTRUE 64279
64229: LD_INT 18
64231: DOUBLE
64232: EQUAL
64233: IFTRUE 64279
64235: LD_INT 19
64237: DOUBLE
64238: EQUAL
64239: IFTRUE 64279
64241: LD_INT 22
64243: DOUBLE
64244: EQUAL
64245: IFTRUE 64279
64247: LD_INT 20
64249: DOUBLE
64250: EQUAL
64251: IFTRUE 64279
64253: LD_INT 21
64255: DOUBLE
64256: EQUAL
64257: IFTRUE 64279
64259: LD_INT 23
64261: DOUBLE
64262: EQUAL
64263: IFTRUE 64279
64265: LD_INT 24
64267: DOUBLE
64268: EQUAL
64269: IFTRUE 64279
64271: LD_INT 25
64273: DOUBLE
64274: EQUAL
64275: IFTRUE 64279
64277: GO 64335
64279: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64280: LD_ADDR_VAR 0 9
64284: PUSH
64285: LD_VAR 0 35
64289: PUSH
64290: LD_VAR 0 36
64294: PUSH
64295: LD_VAR 0 37
64299: PUSH
64300: LD_VAR 0 38
64304: PUSH
64305: LD_VAR 0 39
64309: PUSH
64310: LD_VAR 0 40
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: PUSH
64323: LD_VAR 0 4
64327: PUSH
64328: LD_INT 1
64330: PLUS
64331: ARRAY
64332: ST_TO_ADDR
64333: GO 64700
64335: LD_INT 6
64337: DOUBLE
64338: EQUAL
64339: IFTRUE 64391
64341: LD_INT 7
64343: DOUBLE
64344: EQUAL
64345: IFTRUE 64391
64347: LD_INT 8
64349: DOUBLE
64350: EQUAL
64351: IFTRUE 64391
64353: LD_INT 13
64355: DOUBLE
64356: EQUAL
64357: IFTRUE 64391
64359: LD_INT 12
64361: DOUBLE
64362: EQUAL
64363: IFTRUE 64391
64365: LD_INT 15
64367: DOUBLE
64368: EQUAL
64369: IFTRUE 64391
64371: LD_INT 11
64373: DOUBLE
64374: EQUAL
64375: IFTRUE 64391
64377: LD_INT 14
64379: DOUBLE
64380: EQUAL
64381: IFTRUE 64391
64383: LD_INT 10
64385: DOUBLE
64386: EQUAL
64387: IFTRUE 64391
64389: GO 64447
64391: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64392: LD_ADDR_VAR 0 9
64396: PUSH
64397: LD_VAR 0 41
64401: PUSH
64402: LD_VAR 0 42
64406: PUSH
64407: LD_VAR 0 43
64411: PUSH
64412: LD_VAR 0 44
64416: PUSH
64417: LD_VAR 0 45
64421: PUSH
64422: LD_VAR 0 46
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: PUSH
64435: LD_VAR 0 4
64439: PUSH
64440: LD_INT 1
64442: PLUS
64443: ARRAY
64444: ST_TO_ADDR
64445: GO 64700
64447: LD_INT 36
64449: DOUBLE
64450: EQUAL
64451: IFTRUE 64455
64453: GO 64511
64455: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64456: LD_ADDR_VAR 0 9
64460: PUSH
64461: LD_VAR 0 47
64465: PUSH
64466: LD_VAR 0 48
64470: PUSH
64471: LD_VAR 0 49
64475: PUSH
64476: LD_VAR 0 50
64480: PUSH
64481: LD_VAR 0 51
64485: PUSH
64486: LD_VAR 0 52
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: PUSH
64499: LD_VAR 0 4
64503: PUSH
64504: LD_INT 1
64506: PLUS
64507: ARRAY
64508: ST_TO_ADDR
64509: GO 64700
64511: LD_INT 4
64513: DOUBLE
64514: EQUAL
64515: IFTRUE 64537
64517: LD_INT 5
64519: DOUBLE
64520: EQUAL
64521: IFTRUE 64537
64523: LD_INT 34
64525: DOUBLE
64526: EQUAL
64527: IFTRUE 64537
64529: LD_INT 37
64531: DOUBLE
64532: EQUAL
64533: IFTRUE 64537
64535: GO 64593
64537: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64538: LD_ADDR_VAR 0 9
64542: PUSH
64543: LD_VAR 0 53
64547: PUSH
64548: LD_VAR 0 54
64552: PUSH
64553: LD_VAR 0 55
64557: PUSH
64558: LD_VAR 0 56
64562: PUSH
64563: LD_VAR 0 57
64567: PUSH
64568: LD_VAR 0 58
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: PUSH
64581: LD_VAR 0 4
64585: PUSH
64586: LD_INT 1
64588: PLUS
64589: ARRAY
64590: ST_TO_ADDR
64591: GO 64700
64593: LD_INT 31
64595: DOUBLE
64596: EQUAL
64597: IFTRUE 64643
64599: LD_INT 32
64601: DOUBLE
64602: EQUAL
64603: IFTRUE 64643
64605: LD_INT 33
64607: DOUBLE
64608: EQUAL
64609: IFTRUE 64643
64611: LD_INT 27
64613: DOUBLE
64614: EQUAL
64615: IFTRUE 64643
64617: LD_INT 26
64619: DOUBLE
64620: EQUAL
64621: IFTRUE 64643
64623: LD_INT 28
64625: DOUBLE
64626: EQUAL
64627: IFTRUE 64643
64629: LD_INT 29
64631: DOUBLE
64632: EQUAL
64633: IFTRUE 64643
64635: LD_INT 30
64637: DOUBLE
64638: EQUAL
64639: IFTRUE 64643
64641: GO 64699
64643: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64644: LD_ADDR_VAR 0 9
64648: PUSH
64649: LD_VAR 0 59
64653: PUSH
64654: LD_VAR 0 60
64658: PUSH
64659: LD_VAR 0 61
64663: PUSH
64664: LD_VAR 0 62
64668: PUSH
64669: LD_VAR 0 63
64673: PUSH
64674: LD_VAR 0 64
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: PUSH
64687: LD_VAR 0 4
64691: PUSH
64692: LD_INT 1
64694: PLUS
64695: ARRAY
64696: ST_TO_ADDR
64697: GO 64700
64699: POP
// temp_list2 = [ ] ;
64700: LD_ADDR_VAR 0 10
64704: PUSH
64705: EMPTY
64706: ST_TO_ADDR
// for i in temp_list do
64707: LD_ADDR_VAR 0 8
64711: PUSH
64712: LD_VAR 0 9
64716: PUSH
64717: FOR_IN
64718: IFFALSE 64770
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64720: LD_ADDR_VAR 0 10
64724: PUSH
64725: LD_VAR 0 10
64729: PUSH
64730: LD_VAR 0 8
64734: PUSH
64735: LD_INT 1
64737: ARRAY
64738: PUSH
64739: LD_VAR 0 2
64743: PLUS
64744: PUSH
64745: LD_VAR 0 8
64749: PUSH
64750: LD_INT 2
64752: ARRAY
64753: PUSH
64754: LD_VAR 0 3
64758: PLUS
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: EMPTY
64765: LIST
64766: ADD
64767: ST_TO_ADDR
64768: GO 64717
64770: POP
64771: POP
// result = temp_list2 ;
64772: LD_ADDR_VAR 0 7
64776: PUSH
64777: LD_VAR 0 10
64781: ST_TO_ADDR
// end ;
64782: LD_VAR 0 7
64786: RET
// export function EnemyInRange ( unit , dist ) ; begin
64787: LD_INT 0
64789: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64790: LD_ADDR_VAR 0 3
64794: PUSH
64795: LD_VAR 0 1
64799: PPUSH
64800: CALL_OW 255
64804: PPUSH
64805: LD_VAR 0 1
64809: PPUSH
64810: CALL_OW 250
64814: PPUSH
64815: LD_VAR 0 1
64819: PPUSH
64820: CALL_OW 251
64824: PPUSH
64825: LD_VAR 0 2
64829: PPUSH
64830: CALL 38160 0 4
64834: PUSH
64835: LD_INT 4
64837: ARRAY
64838: ST_TO_ADDR
// end ;
64839: LD_VAR 0 3
64843: RET
// export function PlayerSeeMe ( unit ) ; begin
64844: LD_INT 0
64846: PPUSH
// result := See ( your_side , unit ) ;
64847: LD_ADDR_VAR 0 2
64851: PUSH
64852: LD_OWVAR 2
64856: PPUSH
64857: LD_VAR 0 1
64861: PPUSH
64862: CALL_OW 292
64866: ST_TO_ADDR
// end ;
64867: LD_VAR 0 2
64871: RET
// export function ReverseDir ( unit ) ; begin
64872: LD_INT 0
64874: PPUSH
// if not unit then
64875: LD_VAR 0 1
64879: NOT
64880: IFFALSE 64884
// exit ;
64882: GO 64907
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64884: LD_ADDR_VAR 0 2
64888: PUSH
64889: LD_VAR 0 1
64893: PPUSH
64894: CALL_OW 254
64898: PUSH
64899: LD_INT 3
64901: PLUS
64902: PUSH
64903: LD_INT 6
64905: MOD
64906: ST_TO_ADDR
// end ;
64907: LD_VAR 0 2
64911: RET
// export function ReverseArray ( array ) ; var i ; begin
64912: LD_INT 0
64914: PPUSH
64915: PPUSH
// if not array then
64916: LD_VAR 0 1
64920: NOT
64921: IFFALSE 64925
// exit ;
64923: GO 64980
// result := [ ] ;
64925: LD_ADDR_VAR 0 2
64929: PUSH
64930: EMPTY
64931: ST_TO_ADDR
// for i := array downto 1 do
64932: LD_ADDR_VAR 0 3
64936: PUSH
64937: DOUBLE
64938: LD_VAR 0 1
64942: INC
64943: ST_TO_ADDR
64944: LD_INT 1
64946: PUSH
64947: FOR_DOWNTO
64948: IFFALSE 64978
// result := Join ( result , array [ i ] ) ;
64950: LD_ADDR_VAR 0 2
64954: PUSH
64955: LD_VAR 0 2
64959: PPUSH
64960: LD_VAR 0 1
64964: PUSH
64965: LD_VAR 0 3
64969: ARRAY
64970: PPUSH
64971: CALL 69625 0 2
64975: ST_TO_ADDR
64976: GO 64947
64978: POP
64979: POP
// end ;
64980: LD_VAR 0 2
64984: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64985: LD_INT 0
64987: PPUSH
64988: PPUSH
64989: PPUSH
64990: PPUSH
64991: PPUSH
64992: PPUSH
// if not unit or not hexes then
64993: LD_VAR 0 1
64997: NOT
64998: PUSH
64999: LD_VAR 0 2
65003: NOT
65004: OR
65005: IFFALSE 65009
// exit ;
65007: GO 65132
// dist := 9999 ;
65009: LD_ADDR_VAR 0 5
65013: PUSH
65014: LD_INT 9999
65016: ST_TO_ADDR
// for i = 1 to hexes do
65017: LD_ADDR_VAR 0 4
65021: PUSH
65022: DOUBLE
65023: LD_INT 1
65025: DEC
65026: ST_TO_ADDR
65027: LD_VAR 0 2
65031: PUSH
65032: FOR_TO
65033: IFFALSE 65120
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65035: LD_ADDR_VAR 0 6
65039: PUSH
65040: LD_VAR 0 1
65044: PPUSH
65045: LD_VAR 0 2
65049: PUSH
65050: LD_VAR 0 4
65054: ARRAY
65055: PUSH
65056: LD_INT 1
65058: ARRAY
65059: PPUSH
65060: LD_VAR 0 2
65064: PUSH
65065: LD_VAR 0 4
65069: ARRAY
65070: PUSH
65071: LD_INT 2
65073: ARRAY
65074: PPUSH
65075: CALL_OW 297
65079: ST_TO_ADDR
// if tdist < dist then
65080: LD_VAR 0 6
65084: PUSH
65085: LD_VAR 0 5
65089: LESS
65090: IFFALSE 65118
// begin hex := hexes [ i ] ;
65092: LD_ADDR_VAR 0 8
65096: PUSH
65097: LD_VAR 0 2
65101: PUSH
65102: LD_VAR 0 4
65106: ARRAY
65107: ST_TO_ADDR
// dist := tdist ;
65108: LD_ADDR_VAR 0 5
65112: PUSH
65113: LD_VAR 0 6
65117: ST_TO_ADDR
// end ; end ;
65118: GO 65032
65120: POP
65121: POP
// result := hex ;
65122: LD_ADDR_VAR 0 3
65126: PUSH
65127: LD_VAR 0 8
65131: ST_TO_ADDR
// end ;
65132: LD_VAR 0 3
65136: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65137: LD_INT 0
65139: PPUSH
65140: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65141: LD_VAR 0 1
65145: NOT
65146: PUSH
65147: LD_VAR 0 1
65151: PUSH
65152: LD_INT 21
65154: PUSH
65155: LD_INT 2
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 23
65164: PUSH
65165: LD_INT 2
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PPUSH
65176: CALL_OW 69
65180: IN
65181: NOT
65182: OR
65183: IFFALSE 65187
// exit ;
65185: GO 65234
// for i = 1 to 3 do
65187: LD_ADDR_VAR 0 3
65191: PUSH
65192: DOUBLE
65193: LD_INT 1
65195: DEC
65196: ST_TO_ADDR
65197: LD_INT 3
65199: PUSH
65200: FOR_TO
65201: IFFALSE 65232
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65203: LD_VAR 0 1
65207: PPUSH
65208: CALL_OW 250
65212: PPUSH
65213: LD_VAR 0 1
65217: PPUSH
65218: CALL_OW 251
65222: PPUSH
65223: LD_INT 1
65225: PPUSH
65226: CALL_OW 453
65230: GO 65200
65232: POP
65233: POP
// end ;
65234: LD_VAR 0 2
65238: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65239: LD_INT 0
65241: PPUSH
65242: PPUSH
65243: PPUSH
65244: PPUSH
65245: PPUSH
65246: PPUSH
// if not unit or not enemy_unit then
65247: LD_VAR 0 1
65251: NOT
65252: PUSH
65253: LD_VAR 0 2
65257: NOT
65258: OR
65259: IFFALSE 65263
// exit ;
65261: GO 65730
// if GetLives ( i ) < 250 then
65263: LD_VAR 0 4
65267: PPUSH
65268: CALL_OW 256
65272: PUSH
65273: LD_INT 250
65275: LESS
65276: IFFALSE 65289
// begin ComAutodestruct ( i ) ;
65278: LD_VAR 0 4
65282: PPUSH
65283: CALL 65137 0 1
// exit ;
65287: GO 65730
// end ; x := GetX ( enemy_unit ) ;
65289: LD_ADDR_VAR 0 7
65293: PUSH
65294: LD_VAR 0 2
65298: PPUSH
65299: CALL_OW 250
65303: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65304: LD_ADDR_VAR 0 8
65308: PUSH
65309: LD_VAR 0 2
65313: PPUSH
65314: CALL_OW 251
65318: ST_TO_ADDR
// if not x or not y then
65319: LD_VAR 0 7
65323: NOT
65324: PUSH
65325: LD_VAR 0 8
65329: NOT
65330: OR
65331: IFFALSE 65335
// exit ;
65333: GO 65730
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65335: LD_ADDR_VAR 0 6
65339: PUSH
65340: LD_VAR 0 7
65344: PPUSH
65345: LD_INT 0
65347: PPUSH
65348: LD_INT 4
65350: PPUSH
65351: CALL_OW 272
65355: PUSH
65356: LD_VAR 0 8
65360: PPUSH
65361: LD_INT 0
65363: PPUSH
65364: LD_INT 4
65366: PPUSH
65367: CALL_OW 273
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_VAR 0 7
65380: PPUSH
65381: LD_INT 1
65383: PPUSH
65384: LD_INT 4
65386: PPUSH
65387: CALL_OW 272
65391: PUSH
65392: LD_VAR 0 8
65396: PPUSH
65397: LD_INT 1
65399: PPUSH
65400: LD_INT 4
65402: PPUSH
65403: CALL_OW 273
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_VAR 0 7
65416: PPUSH
65417: LD_INT 2
65419: PPUSH
65420: LD_INT 4
65422: PPUSH
65423: CALL_OW 272
65427: PUSH
65428: LD_VAR 0 8
65432: PPUSH
65433: LD_INT 2
65435: PPUSH
65436: LD_INT 4
65438: PPUSH
65439: CALL_OW 273
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_VAR 0 7
65452: PPUSH
65453: LD_INT 3
65455: PPUSH
65456: LD_INT 4
65458: PPUSH
65459: CALL_OW 272
65463: PUSH
65464: LD_VAR 0 8
65468: PPUSH
65469: LD_INT 3
65471: PPUSH
65472: LD_INT 4
65474: PPUSH
65475: CALL_OW 273
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_VAR 0 7
65488: PPUSH
65489: LD_INT 4
65491: PPUSH
65492: LD_INT 4
65494: PPUSH
65495: CALL_OW 272
65499: PUSH
65500: LD_VAR 0 8
65504: PPUSH
65505: LD_INT 4
65507: PPUSH
65508: LD_INT 4
65510: PPUSH
65511: CALL_OW 273
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_VAR 0 7
65524: PPUSH
65525: LD_INT 5
65527: PPUSH
65528: LD_INT 4
65530: PPUSH
65531: CALL_OW 272
65535: PUSH
65536: LD_VAR 0 8
65540: PPUSH
65541: LD_INT 5
65543: PPUSH
65544: LD_INT 4
65546: PPUSH
65547: CALL_OW 273
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: ST_TO_ADDR
// for i = tmp downto 1 do
65564: LD_ADDR_VAR 0 4
65568: PUSH
65569: DOUBLE
65570: LD_VAR 0 6
65574: INC
65575: ST_TO_ADDR
65576: LD_INT 1
65578: PUSH
65579: FOR_DOWNTO
65580: IFFALSE 65681
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65582: LD_VAR 0 6
65586: PUSH
65587: LD_VAR 0 4
65591: ARRAY
65592: PUSH
65593: LD_INT 1
65595: ARRAY
65596: PPUSH
65597: LD_VAR 0 6
65601: PUSH
65602: LD_VAR 0 4
65606: ARRAY
65607: PUSH
65608: LD_INT 2
65610: ARRAY
65611: PPUSH
65612: CALL_OW 488
65616: NOT
65617: PUSH
65618: LD_VAR 0 6
65622: PUSH
65623: LD_VAR 0 4
65627: ARRAY
65628: PUSH
65629: LD_INT 1
65631: ARRAY
65632: PPUSH
65633: LD_VAR 0 6
65637: PUSH
65638: LD_VAR 0 4
65642: ARRAY
65643: PUSH
65644: LD_INT 2
65646: ARRAY
65647: PPUSH
65648: CALL_OW 428
65652: PUSH
65653: LD_INT 0
65655: NONEQUAL
65656: OR
65657: IFFALSE 65679
// tmp := Delete ( tmp , i ) ;
65659: LD_ADDR_VAR 0 6
65663: PUSH
65664: LD_VAR 0 6
65668: PPUSH
65669: LD_VAR 0 4
65673: PPUSH
65674: CALL_OW 3
65678: ST_TO_ADDR
65679: GO 65579
65681: POP
65682: POP
// j := GetClosestHex ( unit , tmp ) ;
65683: LD_ADDR_VAR 0 5
65687: PUSH
65688: LD_VAR 0 1
65692: PPUSH
65693: LD_VAR 0 6
65697: PPUSH
65698: CALL 64985 0 2
65702: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65703: LD_VAR 0 1
65707: PPUSH
65708: LD_VAR 0 5
65712: PUSH
65713: LD_INT 1
65715: ARRAY
65716: PPUSH
65717: LD_VAR 0 5
65721: PUSH
65722: LD_INT 2
65724: ARRAY
65725: PPUSH
65726: CALL_OW 111
// end ;
65730: LD_VAR 0 3
65734: RET
// export function PrepareApemanSoldier ( ) ; begin
65735: LD_INT 0
65737: PPUSH
// uc_nation := 0 ;
65738: LD_ADDR_OWVAR 21
65742: PUSH
65743: LD_INT 0
65745: ST_TO_ADDR
// hc_sex := sex_male ;
65746: LD_ADDR_OWVAR 27
65750: PUSH
65751: LD_INT 1
65753: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65754: LD_ADDR_OWVAR 28
65758: PUSH
65759: LD_INT 15
65761: ST_TO_ADDR
// hc_gallery :=  ;
65762: LD_ADDR_OWVAR 33
65766: PUSH
65767: LD_STRING 
65769: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65770: LD_ADDR_OWVAR 31
65774: PUSH
65775: LD_INT 0
65777: PPUSH
65778: LD_INT 3
65780: PPUSH
65781: CALL_OW 12
65785: PUSH
65786: LD_INT 0
65788: PPUSH
65789: LD_INT 3
65791: PPUSH
65792: CALL_OW 12
65796: PUSH
65797: LD_INT 0
65799: PUSH
65800: LD_INT 0
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: ST_TO_ADDR
// end ;
65809: LD_VAR 0 1
65813: RET
// export function PrepareApemanEngineer ( ) ; begin
65814: LD_INT 0
65816: PPUSH
// uc_nation := 0 ;
65817: LD_ADDR_OWVAR 21
65821: PUSH
65822: LD_INT 0
65824: ST_TO_ADDR
// hc_sex := sex_male ;
65825: LD_ADDR_OWVAR 27
65829: PUSH
65830: LD_INT 1
65832: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65833: LD_ADDR_OWVAR 28
65837: PUSH
65838: LD_INT 16
65840: ST_TO_ADDR
// hc_gallery :=  ;
65841: LD_ADDR_OWVAR 33
65845: PUSH
65846: LD_STRING 
65848: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65849: LD_ADDR_OWVAR 31
65853: PUSH
65854: LD_INT 0
65856: PPUSH
65857: LD_INT 3
65859: PPUSH
65860: CALL_OW 12
65864: PUSH
65865: LD_INT 0
65867: PPUSH
65868: LD_INT 3
65870: PPUSH
65871: CALL_OW 12
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: ST_TO_ADDR
// end ;
65888: LD_VAR 0 1
65892: RET
// export function PrepareApeman ( agressivity ) ; begin
65893: LD_INT 0
65895: PPUSH
// uc_side := 0 ;
65896: LD_ADDR_OWVAR 20
65900: PUSH
65901: LD_INT 0
65903: ST_TO_ADDR
// uc_nation := 0 ;
65904: LD_ADDR_OWVAR 21
65908: PUSH
65909: LD_INT 0
65911: ST_TO_ADDR
// hc_sex := sex_male ;
65912: LD_ADDR_OWVAR 27
65916: PUSH
65917: LD_INT 1
65919: ST_TO_ADDR
// hc_class := class_apeman ;
65920: LD_ADDR_OWVAR 28
65924: PUSH
65925: LD_INT 12
65927: ST_TO_ADDR
// hc_gallery :=  ;
65928: LD_ADDR_OWVAR 33
65932: PUSH
65933: LD_STRING 
65935: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65936: LD_ADDR_OWVAR 35
65940: PUSH
65941: LD_VAR 0 1
65945: NEG
65946: PPUSH
65947: LD_VAR 0 1
65951: PPUSH
65952: CALL_OW 12
65956: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65957: LD_ADDR_OWVAR 31
65961: PUSH
65962: LD_INT 0
65964: PPUSH
65965: LD_INT 3
65967: PPUSH
65968: CALL_OW 12
65972: PUSH
65973: LD_INT 0
65975: PPUSH
65976: LD_INT 3
65978: PPUSH
65979: CALL_OW 12
65983: PUSH
65984: LD_INT 0
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: ST_TO_ADDR
// end ;
65996: LD_VAR 0 2
66000: RET
// export function PrepareTiger ( agressivity ) ; begin
66001: LD_INT 0
66003: PPUSH
// uc_side := 0 ;
66004: LD_ADDR_OWVAR 20
66008: PUSH
66009: LD_INT 0
66011: ST_TO_ADDR
// uc_nation := 0 ;
66012: LD_ADDR_OWVAR 21
66016: PUSH
66017: LD_INT 0
66019: ST_TO_ADDR
// hc_class := class_tiger ;
66020: LD_ADDR_OWVAR 28
66024: PUSH
66025: LD_INT 14
66027: ST_TO_ADDR
// hc_gallery :=  ;
66028: LD_ADDR_OWVAR 33
66032: PUSH
66033: LD_STRING 
66035: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66036: LD_ADDR_OWVAR 35
66040: PUSH
66041: LD_VAR 0 1
66045: NEG
66046: PPUSH
66047: LD_VAR 0 1
66051: PPUSH
66052: CALL_OW 12
66056: ST_TO_ADDR
// end ;
66057: LD_VAR 0 2
66061: RET
// export function PrepareEnchidna ( ) ; begin
66062: LD_INT 0
66064: PPUSH
// uc_side := 0 ;
66065: LD_ADDR_OWVAR 20
66069: PUSH
66070: LD_INT 0
66072: ST_TO_ADDR
// uc_nation := 0 ;
66073: LD_ADDR_OWVAR 21
66077: PUSH
66078: LD_INT 0
66080: ST_TO_ADDR
// hc_class := class_baggie ;
66081: LD_ADDR_OWVAR 28
66085: PUSH
66086: LD_INT 13
66088: ST_TO_ADDR
// hc_gallery :=  ;
66089: LD_ADDR_OWVAR 33
66093: PUSH
66094: LD_STRING 
66096: ST_TO_ADDR
// end ;
66097: LD_VAR 0 1
66101: RET
// export function PrepareFrog ( ) ; begin
66102: LD_INT 0
66104: PPUSH
// uc_side := 0 ;
66105: LD_ADDR_OWVAR 20
66109: PUSH
66110: LD_INT 0
66112: ST_TO_ADDR
// uc_nation := 0 ;
66113: LD_ADDR_OWVAR 21
66117: PUSH
66118: LD_INT 0
66120: ST_TO_ADDR
// hc_class := class_frog ;
66121: LD_ADDR_OWVAR 28
66125: PUSH
66126: LD_INT 19
66128: ST_TO_ADDR
// hc_gallery :=  ;
66129: LD_ADDR_OWVAR 33
66133: PUSH
66134: LD_STRING 
66136: ST_TO_ADDR
// end ;
66137: LD_VAR 0 1
66141: RET
// export function PrepareFish ( ) ; begin
66142: LD_INT 0
66144: PPUSH
// uc_side := 0 ;
66145: LD_ADDR_OWVAR 20
66149: PUSH
66150: LD_INT 0
66152: ST_TO_ADDR
// uc_nation := 0 ;
66153: LD_ADDR_OWVAR 21
66157: PUSH
66158: LD_INT 0
66160: ST_TO_ADDR
// hc_class := class_fish ;
66161: LD_ADDR_OWVAR 28
66165: PUSH
66166: LD_INT 20
66168: ST_TO_ADDR
// hc_gallery :=  ;
66169: LD_ADDR_OWVAR 33
66173: PUSH
66174: LD_STRING 
66176: ST_TO_ADDR
// end ;
66177: LD_VAR 0 1
66181: RET
// export function PrepareBird ( ) ; begin
66182: LD_INT 0
66184: PPUSH
// uc_side := 0 ;
66185: LD_ADDR_OWVAR 20
66189: PUSH
66190: LD_INT 0
66192: ST_TO_ADDR
// uc_nation := 0 ;
66193: LD_ADDR_OWVAR 21
66197: PUSH
66198: LD_INT 0
66200: ST_TO_ADDR
// hc_class := class_phororhacos ;
66201: LD_ADDR_OWVAR 28
66205: PUSH
66206: LD_INT 18
66208: ST_TO_ADDR
// hc_gallery :=  ;
66209: LD_ADDR_OWVAR 33
66213: PUSH
66214: LD_STRING 
66216: ST_TO_ADDR
// end ;
66217: LD_VAR 0 1
66221: RET
// export function PrepareHorse ( ) ; begin
66222: LD_INT 0
66224: PPUSH
// uc_side := 0 ;
66225: LD_ADDR_OWVAR 20
66229: PUSH
66230: LD_INT 0
66232: ST_TO_ADDR
// uc_nation := 0 ;
66233: LD_ADDR_OWVAR 21
66237: PUSH
66238: LD_INT 0
66240: ST_TO_ADDR
// hc_class := class_horse ;
66241: LD_ADDR_OWVAR 28
66245: PUSH
66246: LD_INT 21
66248: ST_TO_ADDR
// hc_gallery :=  ;
66249: LD_ADDR_OWVAR 33
66253: PUSH
66254: LD_STRING 
66256: ST_TO_ADDR
// end ;
66257: LD_VAR 0 1
66261: RET
// export function PrepareMastodont ( ) ; begin
66262: LD_INT 0
66264: PPUSH
// uc_side := 0 ;
66265: LD_ADDR_OWVAR 20
66269: PUSH
66270: LD_INT 0
66272: ST_TO_ADDR
// uc_nation := 0 ;
66273: LD_ADDR_OWVAR 21
66277: PUSH
66278: LD_INT 0
66280: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66281: LD_ADDR_OWVAR 37
66285: PUSH
66286: LD_INT 31
66288: ST_TO_ADDR
// vc_control := control_rider ;
66289: LD_ADDR_OWVAR 38
66293: PUSH
66294: LD_INT 4
66296: ST_TO_ADDR
// end ;
66297: LD_VAR 0 1
66301: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66302: LD_INT 0
66304: PPUSH
66305: PPUSH
66306: PPUSH
// uc_side = 0 ;
66307: LD_ADDR_OWVAR 20
66311: PUSH
66312: LD_INT 0
66314: ST_TO_ADDR
// uc_nation = 0 ;
66315: LD_ADDR_OWVAR 21
66319: PUSH
66320: LD_INT 0
66322: ST_TO_ADDR
// InitHc_All ( ) ;
66323: CALL_OW 584
// InitVc ;
66327: CALL_OW 20
// if mastodonts then
66331: LD_VAR 0 6
66335: IFFALSE 66402
// for i = 1 to mastodonts do
66337: LD_ADDR_VAR 0 11
66341: PUSH
66342: DOUBLE
66343: LD_INT 1
66345: DEC
66346: ST_TO_ADDR
66347: LD_VAR 0 6
66351: PUSH
66352: FOR_TO
66353: IFFALSE 66400
// begin vc_chassis := 31 ;
66355: LD_ADDR_OWVAR 37
66359: PUSH
66360: LD_INT 31
66362: ST_TO_ADDR
// vc_control := control_rider ;
66363: LD_ADDR_OWVAR 38
66367: PUSH
66368: LD_INT 4
66370: ST_TO_ADDR
// animal := CreateVehicle ;
66371: LD_ADDR_VAR 0 12
66375: PUSH
66376: CALL_OW 45
66380: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66381: LD_VAR 0 12
66385: PPUSH
66386: LD_VAR 0 8
66390: PPUSH
66391: LD_INT 0
66393: PPUSH
66394: CALL 68530 0 3
// end ;
66398: GO 66352
66400: POP
66401: POP
// if horses then
66402: LD_VAR 0 5
66406: IFFALSE 66473
// for i = 1 to horses do
66408: LD_ADDR_VAR 0 11
66412: PUSH
66413: DOUBLE
66414: LD_INT 1
66416: DEC
66417: ST_TO_ADDR
66418: LD_VAR 0 5
66422: PUSH
66423: FOR_TO
66424: IFFALSE 66471
// begin hc_class := 21 ;
66426: LD_ADDR_OWVAR 28
66430: PUSH
66431: LD_INT 21
66433: ST_TO_ADDR
// hc_gallery :=  ;
66434: LD_ADDR_OWVAR 33
66438: PUSH
66439: LD_STRING 
66441: ST_TO_ADDR
// animal := CreateHuman ;
66442: LD_ADDR_VAR 0 12
66446: PUSH
66447: CALL_OW 44
66451: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66452: LD_VAR 0 12
66456: PPUSH
66457: LD_VAR 0 8
66461: PPUSH
66462: LD_INT 0
66464: PPUSH
66465: CALL 68530 0 3
// end ;
66469: GO 66423
66471: POP
66472: POP
// if birds then
66473: LD_VAR 0 1
66477: IFFALSE 66544
// for i = 1 to birds do
66479: LD_ADDR_VAR 0 11
66483: PUSH
66484: DOUBLE
66485: LD_INT 1
66487: DEC
66488: ST_TO_ADDR
66489: LD_VAR 0 1
66493: PUSH
66494: FOR_TO
66495: IFFALSE 66542
// begin hc_class := 18 ;
66497: LD_ADDR_OWVAR 28
66501: PUSH
66502: LD_INT 18
66504: ST_TO_ADDR
// hc_gallery =  ;
66505: LD_ADDR_OWVAR 33
66509: PUSH
66510: LD_STRING 
66512: ST_TO_ADDR
// animal := CreateHuman ;
66513: LD_ADDR_VAR 0 12
66517: PUSH
66518: CALL_OW 44
66522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66523: LD_VAR 0 12
66527: PPUSH
66528: LD_VAR 0 8
66532: PPUSH
66533: LD_INT 0
66535: PPUSH
66536: CALL 68530 0 3
// end ;
66540: GO 66494
66542: POP
66543: POP
// if tigers then
66544: LD_VAR 0 2
66548: IFFALSE 66632
// for i = 1 to tigers do
66550: LD_ADDR_VAR 0 11
66554: PUSH
66555: DOUBLE
66556: LD_INT 1
66558: DEC
66559: ST_TO_ADDR
66560: LD_VAR 0 2
66564: PUSH
66565: FOR_TO
66566: IFFALSE 66630
// begin hc_class = class_tiger ;
66568: LD_ADDR_OWVAR 28
66572: PUSH
66573: LD_INT 14
66575: ST_TO_ADDR
// hc_gallery =  ;
66576: LD_ADDR_OWVAR 33
66580: PUSH
66581: LD_STRING 
66583: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66584: LD_ADDR_OWVAR 35
66588: PUSH
66589: LD_INT 7
66591: NEG
66592: PPUSH
66593: LD_INT 7
66595: PPUSH
66596: CALL_OW 12
66600: ST_TO_ADDR
// animal := CreateHuman ;
66601: LD_ADDR_VAR 0 12
66605: PUSH
66606: CALL_OW 44
66610: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66611: LD_VAR 0 12
66615: PPUSH
66616: LD_VAR 0 8
66620: PPUSH
66621: LD_INT 0
66623: PPUSH
66624: CALL 68530 0 3
// end ;
66628: GO 66565
66630: POP
66631: POP
// if apemans then
66632: LD_VAR 0 3
66636: IFFALSE 66759
// for i = 1 to apemans do
66638: LD_ADDR_VAR 0 11
66642: PUSH
66643: DOUBLE
66644: LD_INT 1
66646: DEC
66647: ST_TO_ADDR
66648: LD_VAR 0 3
66652: PUSH
66653: FOR_TO
66654: IFFALSE 66757
// begin hc_class = class_apeman ;
66656: LD_ADDR_OWVAR 28
66660: PUSH
66661: LD_INT 12
66663: ST_TO_ADDR
// hc_gallery =  ;
66664: LD_ADDR_OWVAR 33
66668: PUSH
66669: LD_STRING 
66671: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66672: LD_ADDR_OWVAR 35
66676: PUSH
66677: LD_INT 2
66679: NEG
66680: PPUSH
66681: LD_INT 2
66683: PPUSH
66684: CALL_OW 12
66688: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66689: LD_ADDR_OWVAR 31
66693: PUSH
66694: LD_INT 1
66696: PPUSH
66697: LD_INT 3
66699: PPUSH
66700: CALL_OW 12
66704: PUSH
66705: LD_INT 1
66707: PPUSH
66708: LD_INT 3
66710: PPUSH
66711: CALL_OW 12
66715: PUSH
66716: LD_INT 0
66718: PUSH
66719: LD_INT 0
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: ST_TO_ADDR
// animal := CreateHuman ;
66728: LD_ADDR_VAR 0 12
66732: PUSH
66733: CALL_OW 44
66737: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66738: LD_VAR 0 12
66742: PPUSH
66743: LD_VAR 0 8
66747: PPUSH
66748: LD_INT 0
66750: PPUSH
66751: CALL 68530 0 3
// end ;
66755: GO 66653
66757: POP
66758: POP
// if enchidnas then
66759: LD_VAR 0 4
66763: IFFALSE 66830
// for i = 1 to enchidnas do
66765: LD_ADDR_VAR 0 11
66769: PUSH
66770: DOUBLE
66771: LD_INT 1
66773: DEC
66774: ST_TO_ADDR
66775: LD_VAR 0 4
66779: PUSH
66780: FOR_TO
66781: IFFALSE 66828
// begin hc_class = 13 ;
66783: LD_ADDR_OWVAR 28
66787: PUSH
66788: LD_INT 13
66790: ST_TO_ADDR
// hc_gallery =  ;
66791: LD_ADDR_OWVAR 33
66795: PUSH
66796: LD_STRING 
66798: ST_TO_ADDR
// animal := CreateHuman ;
66799: LD_ADDR_VAR 0 12
66803: PUSH
66804: CALL_OW 44
66808: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66809: LD_VAR 0 12
66813: PPUSH
66814: LD_VAR 0 8
66818: PPUSH
66819: LD_INT 0
66821: PPUSH
66822: CALL 68530 0 3
// end ;
66826: GO 66780
66828: POP
66829: POP
// if fishes then
66830: LD_VAR 0 7
66834: IFFALSE 66901
// for i = 1 to fishes do
66836: LD_ADDR_VAR 0 11
66840: PUSH
66841: DOUBLE
66842: LD_INT 1
66844: DEC
66845: ST_TO_ADDR
66846: LD_VAR 0 7
66850: PUSH
66851: FOR_TO
66852: IFFALSE 66899
// begin hc_class = 20 ;
66854: LD_ADDR_OWVAR 28
66858: PUSH
66859: LD_INT 20
66861: ST_TO_ADDR
// hc_gallery =  ;
66862: LD_ADDR_OWVAR 33
66866: PUSH
66867: LD_STRING 
66869: ST_TO_ADDR
// animal := CreateHuman ;
66870: LD_ADDR_VAR 0 12
66874: PUSH
66875: CALL_OW 44
66879: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66880: LD_VAR 0 12
66884: PPUSH
66885: LD_VAR 0 9
66889: PPUSH
66890: LD_INT 0
66892: PPUSH
66893: CALL 68530 0 3
// end ;
66897: GO 66851
66899: POP
66900: POP
// end ;
66901: LD_VAR 0 10
66905: RET
// export function WantHeal ( sci , unit ) ; begin
66906: LD_INT 0
66908: PPUSH
// if GetTaskList ( sci ) > 0 then
66909: LD_VAR 0 1
66913: PPUSH
66914: CALL_OW 437
66918: PUSH
66919: LD_INT 0
66921: GREATER
66922: IFFALSE 66992
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66924: LD_VAR 0 1
66928: PPUSH
66929: CALL_OW 437
66933: PUSH
66934: LD_INT 1
66936: ARRAY
66937: PUSH
66938: LD_INT 1
66940: ARRAY
66941: PUSH
66942: LD_STRING l
66944: EQUAL
66945: PUSH
66946: LD_VAR 0 1
66950: PPUSH
66951: CALL_OW 437
66955: PUSH
66956: LD_INT 1
66958: ARRAY
66959: PUSH
66960: LD_INT 4
66962: ARRAY
66963: PUSH
66964: LD_VAR 0 2
66968: EQUAL
66969: AND
66970: IFFALSE 66982
// result := true else
66972: LD_ADDR_VAR 0 3
66976: PUSH
66977: LD_INT 1
66979: ST_TO_ADDR
66980: GO 66990
// result := false ;
66982: LD_ADDR_VAR 0 3
66986: PUSH
66987: LD_INT 0
66989: ST_TO_ADDR
// end else
66990: GO 67000
// result := false ;
66992: LD_ADDR_VAR 0 3
66996: PUSH
66997: LD_INT 0
66999: ST_TO_ADDR
// end ;
67000: LD_VAR 0 3
67004: RET
// export function HealTarget ( sci ) ; begin
67005: LD_INT 0
67007: PPUSH
// if not sci then
67008: LD_VAR 0 1
67012: NOT
67013: IFFALSE 67017
// exit ;
67015: GO 67082
// result := 0 ;
67017: LD_ADDR_VAR 0 2
67021: PUSH
67022: LD_INT 0
67024: ST_TO_ADDR
// if GetTaskList ( sci ) then
67025: LD_VAR 0 1
67029: PPUSH
67030: CALL_OW 437
67034: IFFALSE 67082
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67036: LD_VAR 0 1
67040: PPUSH
67041: CALL_OW 437
67045: PUSH
67046: LD_INT 1
67048: ARRAY
67049: PUSH
67050: LD_INT 1
67052: ARRAY
67053: PUSH
67054: LD_STRING l
67056: EQUAL
67057: IFFALSE 67082
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67059: LD_ADDR_VAR 0 2
67063: PUSH
67064: LD_VAR 0 1
67068: PPUSH
67069: CALL_OW 437
67073: PUSH
67074: LD_INT 1
67076: ARRAY
67077: PUSH
67078: LD_INT 4
67080: ARRAY
67081: ST_TO_ADDR
// end ;
67082: LD_VAR 0 2
67086: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67087: LD_INT 0
67089: PPUSH
67090: PPUSH
67091: PPUSH
67092: PPUSH
// if not base_units then
67093: LD_VAR 0 1
67097: NOT
67098: IFFALSE 67102
// exit ;
67100: GO 67189
// result := false ;
67102: LD_ADDR_VAR 0 2
67106: PUSH
67107: LD_INT 0
67109: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67110: LD_ADDR_VAR 0 5
67114: PUSH
67115: LD_VAR 0 1
67119: PPUSH
67120: LD_INT 21
67122: PUSH
67123: LD_INT 3
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PPUSH
67130: CALL_OW 72
67134: ST_TO_ADDR
// if not tmp then
67135: LD_VAR 0 5
67139: NOT
67140: IFFALSE 67144
// exit ;
67142: GO 67189
// for i in tmp do
67144: LD_ADDR_VAR 0 3
67148: PUSH
67149: LD_VAR 0 5
67153: PUSH
67154: FOR_IN
67155: IFFALSE 67187
// begin result := EnemyInRange ( i , 22 ) ;
67157: LD_ADDR_VAR 0 2
67161: PUSH
67162: LD_VAR 0 3
67166: PPUSH
67167: LD_INT 22
67169: PPUSH
67170: CALL 64787 0 2
67174: ST_TO_ADDR
// if result then
67175: LD_VAR 0 2
67179: IFFALSE 67185
// exit ;
67181: POP
67182: POP
67183: GO 67189
// end ;
67185: GO 67154
67187: POP
67188: POP
// end ;
67189: LD_VAR 0 2
67193: RET
// export function FilterByTag ( units , tag ) ; begin
67194: LD_INT 0
67196: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67197: LD_ADDR_VAR 0 3
67201: PUSH
67202: LD_VAR 0 1
67206: PPUSH
67207: LD_INT 120
67209: PUSH
67210: LD_VAR 0 2
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PPUSH
67219: CALL_OW 72
67223: ST_TO_ADDR
// end ;
67224: LD_VAR 0 3
67228: RET
// export function IsDriver ( un ) ; begin
67229: LD_INT 0
67231: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67232: LD_ADDR_VAR 0 2
67236: PUSH
67237: LD_VAR 0 1
67241: PUSH
67242: LD_INT 55
67244: PUSH
67245: EMPTY
67246: LIST
67247: PPUSH
67248: CALL_OW 69
67252: IN
67253: ST_TO_ADDR
// end ;
67254: LD_VAR 0 2
67258: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67259: LD_INT 0
67261: PPUSH
67262: PPUSH
// list := [ ] ;
67263: LD_ADDR_VAR 0 5
67267: PUSH
67268: EMPTY
67269: ST_TO_ADDR
// case d of 0 :
67270: LD_VAR 0 3
67274: PUSH
67275: LD_INT 0
67277: DOUBLE
67278: EQUAL
67279: IFTRUE 67283
67281: GO 67416
67283: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67284: LD_ADDR_VAR 0 5
67288: PUSH
67289: LD_VAR 0 1
67293: PUSH
67294: LD_INT 4
67296: MINUS
67297: PUSH
67298: LD_VAR 0 2
67302: PUSH
67303: LD_INT 4
67305: MINUS
67306: PUSH
67307: LD_INT 2
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: LIST
67314: PUSH
67315: LD_VAR 0 1
67319: PUSH
67320: LD_INT 3
67322: MINUS
67323: PUSH
67324: LD_VAR 0 2
67328: PUSH
67329: LD_INT 1
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: LIST
67336: PUSH
67337: LD_VAR 0 1
67341: PUSH
67342: LD_INT 4
67344: PLUS
67345: PUSH
67346: LD_VAR 0 2
67350: PUSH
67351: LD_INT 4
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: LIST
67358: PUSH
67359: LD_VAR 0 1
67363: PUSH
67364: LD_INT 3
67366: PLUS
67367: PUSH
67368: LD_VAR 0 2
67372: PUSH
67373: LD_INT 3
67375: PLUS
67376: PUSH
67377: LD_INT 5
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: LIST
67384: PUSH
67385: LD_VAR 0 1
67389: PUSH
67390: LD_VAR 0 2
67394: PUSH
67395: LD_INT 4
67397: PLUS
67398: PUSH
67399: LD_INT 0
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: LIST
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: ST_TO_ADDR
// end ; 1 :
67414: GO 68114
67416: LD_INT 1
67418: DOUBLE
67419: EQUAL
67420: IFTRUE 67424
67422: GO 67557
67424: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67425: LD_ADDR_VAR 0 5
67429: PUSH
67430: LD_VAR 0 1
67434: PUSH
67435: LD_VAR 0 2
67439: PUSH
67440: LD_INT 4
67442: MINUS
67443: PUSH
67444: LD_INT 3
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: LIST
67451: PUSH
67452: LD_VAR 0 1
67456: PUSH
67457: LD_INT 3
67459: MINUS
67460: PUSH
67461: LD_VAR 0 2
67465: PUSH
67466: LD_INT 3
67468: MINUS
67469: PUSH
67470: LD_INT 2
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: LIST
67477: PUSH
67478: LD_VAR 0 1
67482: PUSH
67483: LD_INT 4
67485: MINUS
67486: PUSH
67487: LD_VAR 0 2
67491: PUSH
67492: LD_INT 1
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: LIST
67499: PUSH
67500: LD_VAR 0 1
67504: PUSH
67505: LD_VAR 0 2
67509: PUSH
67510: LD_INT 3
67512: PLUS
67513: PUSH
67514: LD_INT 0
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: LIST
67521: PUSH
67522: LD_VAR 0 1
67526: PUSH
67527: LD_INT 4
67529: PLUS
67530: PUSH
67531: LD_VAR 0 2
67535: PUSH
67536: LD_INT 4
67538: PLUS
67539: PUSH
67540: LD_INT 5
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: LIST
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: ST_TO_ADDR
// end ; 2 :
67555: GO 68114
67557: LD_INT 2
67559: DOUBLE
67560: EQUAL
67561: IFTRUE 67565
67563: GO 67694
67565: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67566: LD_ADDR_VAR 0 5
67570: PUSH
67571: LD_VAR 0 1
67575: PUSH
67576: LD_VAR 0 2
67580: PUSH
67581: LD_INT 3
67583: MINUS
67584: PUSH
67585: LD_INT 3
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: LIST
67592: PUSH
67593: LD_VAR 0 1
67597: PUSH
67598: LD_INT 4
67600: PLUS
67601: PUSH
67602: LD_VAR 0 2
67606: PUSH
67607: LD_INT 4
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: LIST
67614: PUSH
67615: LD_VAR 0 1
67619: PUSH
67620: LD_VAR 0 2
67624: PUSH
67625: LD_INT 4
67627: PLUS
67628: PUSH
67629: LD_INT 0
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: LIST
67636: PUSH
67637: LD_VAR 0 1
67641: PUSH
67642: LD_INT 3
67644: MINUS
67645: PUSH
67646: LD_VAR 0 2
67650: PUSH
67651: LD_INT 1
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: LIST
67658: PUSH
67659: LD_VAR 0 1
67663: PUSH
67664: LD_INT 4
67666: MINUS
67667: PUSH
67668: LD_VAR 0 2
67672: PUSH
67673: LD_INT 4
67675: MINUS
67676: PUSH
67677: LD_INT 2
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: LIST
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: ST_TO_ADDR
// end ; 3 :
67692: GO 68114
67694: LD_INT 3
67696: DOUBLE
67697: EQUAL
67698: IFTRUE 67702
67700: GO 67835
67702: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67703: LD_ADDR_VAR 0 5
67707: PUSH
67708: LD_VAR 0 1
67712: PUSH
67713: LD_INT 3
67715: PLUS
67716: PUSH
67717: LD_VAR 0 2
67721: PUSH
67722: LD_INT 4
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: LIST
67729: PUSH
67730: LD_VAR 0 1
67734: PUSH
67735: LD_INT 4
67737: PLUS
67738: PUSH
67739: LD_VAR 0 2
67743: PUSH
67744: LD_INT 4
67746: PLUS
67747: PUSH
67748: LD_INT 5
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: LIST
67755: PUSH
67756: LD_VAR 0 1
67760: PUSH
67761: LD_INT 4
67763: MINUS
67764: PUSH
67765: LD_VAR 0 2
67769: PUSH
67770: LD_INT 1
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: LIST
67777: PUSH
67778: LD_VAR 0 1
67782: PUSH
67783: LD_VAR 0 2
67787: PUSH
67788: LD_INT 4
67790: MINUS
67791: PUSH
67792: LD_INT 3
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: LIST
67799: PUSH
67800: LD_VAR 0 1
67804: PUSH
67805: LD_INT 3
67807: MINUS
67808: PUSH
67809: LD_VAR 0 2
67813: PUSH
67814: LD_INT 3
67816: MINUS
67817: PUSH
67818: LD_INT 2
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: LIST
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: ST_TO_ADDR
// end ; 4 :
67833: GO 68114
67835: LD_INT 4
67837: DOUBLE
67838: EQUAL
67839: IFTRUE 67843
67841: GO 67976
67843: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67844: LD_ADDR_VAR 0 5
67848: PUSH
67849: LD_VAR 0 1
67853: PUSH
67854: LD_VAR 0 2
67858: PUSH
67859: LD_INT 4
67861: PLUS
67862: PUSH
67863: LD_INT 0
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: LIST
67870: PUSH
67871: LD_VAR 0 1
67875: PUSH
67876: LD_INT 3
67878: PLUS
67879: PUSH
67880: LD_VAR 0 2
67884: PUSH
67885: LD_INT 3
67887: PLUS
67888: PUSH
67889: LD_INT 5
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: LIST
67896: PUSH
67897: LD_VAR 0 1
67901: PUSH
67902: LD_INT 4
67904: PLUS
67905: PUSH
67906: LD_VAR 0 2
67910: PUSH
67911: LD_INT 4
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: LIST
67918: PUSH
67919: LD_VAR 0 1
67923: PUSH
67924: LD_VAR 0 2
67928: PUSH
67929: LD_INT 3
67931: MINUS
67932: PUSH
67933: LD_INT 3
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: LIST
67940: PUSH
67941: LD_VAR 0 1
67945: PUSH
67946: LD_INT 4
67948: MINUS
67949: PUSH
67950: LD_VAR 0 2
67954: PUSH
67955: LD_INT 4
67957: MINUS
67958: PUSH
67959: LD_INT 2
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: LIST
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: ST_TO_ADDR
// end ; 5 :
67974: GO 68114
67976: LD_INT 5
67978: DOUBLE
67979: EQUAL
67980: IFTRUE 67984
67982: GO 68113
67984: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67985: LD_ADDR_VAR 0 5
67989: PUSH
67990: LD_VAR 0 1
67994: PUSH
67995: LD_INT 4
67997: MINUS
67998: PUSH
67999: LD_VAR 0 2
68003: PUSH
68004: LD_INT 1
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: LIST
68011: PUSH
68012: LD_VAR 0 1
68016: PUSH
68017: LD_VAR 0 2
68021: PUSH
68022: LD_INT 4
68024: MINUS
68025: PUSH
68026: LD_INT 3
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: LIST
68033: PUSH
68034: LD_VAR 0 1
68038: PUSH
68039: LD_INT 4
68041: PLUS
68042: PUSH
68043: LD_VAR 0 2
68047: PUSH
68048: LD_INT 4
68050: PLUS
68051: PUSH
68052: LD_INT 5
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: LIST
68059: PUSH
68060: LD_VAR 0 1
68064: PUSH
68065: LD_INT 3
68067: PLUS
68068: PUSH
68069: LD_VAR 0 2
68073: PUSH
68074: LD_INT 4
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: LIST
68081: PUSH
68082: LD_VAR 0 1
68086: PUSH
68087: LD_VAR 0 2
68091: PUSH
68092: LD_INT 3
68094: PLUS
68095: PUSH
68096: LD_INT 0
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: LIST
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: ST_TO_ADDR
// end ; end ;
68111: GO 68114
68113: POP
// result := list ;
68114: LD_ADDR_VAR 0 4
68118: PUSH
68119: LD_VAR 0 5
68123: ST_TO_ADDR
// end ;
68124: LD_VAR 0 4
68128: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68129: LD_INT 0
68131: PPUSH
68132: PPUSH
68133: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68134: LD_VAR 0 1
68138: NOT
68139: PUSH
68140: LD_VAR 0 2
68144: PUSH
68145: LD_INT 1
68147: PUSH
68148: LD_INT 2
68150: PUSH
68151: LD_INT 3
68153: PUSH
68154: LD_INT 4
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: IN
68163: NOT
68164: OR
68165: IFFALSE 68169
// exit ;
68167: GO 68252
// tmp := [ ] ;
68169: LD_ADDR_VAR 0 5
68173: PUSH
68174: EMPTY
68175: ST_TO_ADDR
// for i in units do
68176: LD_ADDR_VAR 0 4
68180: PUSH
68181: LD_VAR 0 1
68185: PUSH
68186: FOR_IN
68187: IFFALSE 68221
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68189: LD_ADDR_VAR 0 5
68193: PUSH
68194: LD_VAR 0 5
68198: PPUSH
68199: LD_VAR 0 4
68203: PPUSH
68204: LD_VAR 0 2
68208: PPUSH
68209: CALL_OW 259
68213: PPUSH
68214: CALL 69625 0 2
68218: ST_TO_ADDR
68219: GO 68186
68221: POP
68222: POP
// if not tmp then
68223: LD_VAR 0 5
68227: NOT
68228: IFFALSE 68232
// exit ;
68230: GO 68252
// result := SortListByListDesc ( units , tmp ) ;
68232: LD_ADDR_VAR 0 3
68236: PUSH
68237: LD_VAR 0 1
68241: PPUSH
68242: LD_VAR 0 5
68246: PPUSH
68247: CALL_OW 77
68251: ST_TO_ADDR
// end ;
68252: LD_VAR 0 3
68256: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68257: LD_INT 0
68259: PPUSH
68260: PPUSH
68261: PPUSH
// result := false ;
68262: LD_ADDR_VAR 0 3
68266: PUSH
68267: LD_INT 0
68269: ST_TO_ADDR
// if not building then
68270: LD_VAR 0 2
68274: NOT
68275: IFFALSE 68279
// exit ;
68277: GO 68417
// x := GetX ( building ) ;
68279: LD_ADDR_VAR 0 4
68283: PUSH
68284: LD_VAR 0 2
68288: PPUSH
68289: CALL_OW 250
68293: ST_TO_ADDR
// y := GetY ( building ) ;
68294: LD_ADDR_VAR 0 5
68298: PUSH
68299: LD_VAR 0 2
68303: PPUSH
68304: CALL_OW 251
68308: ST_TO_ADDR
// if not x or not y then
68309: LD_VAR 0 4
68313: NOT
68314: PUSH
68315: LD_VAR 0 5
68319: NOT
68320: OR
68321: IFFALSE 68325
// exit ;
68323: GO 68417
// if GetTaskList ( unit ) then
68325: LD_VAR 0 1
68329: PPUSH
68330: CALL_OW 437
68334: IFFALSE 68417
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68336: LD_STRING e
68338: PUSH
68339: LD_VAR 0 1
68343: PPUSH
68344: CALL_OW 437
68348: PUSH
68349: LD_INT 1
68351: ARRAY
68352: PUSH
68353: LD_INT 1
68355: ARRAY
68356: EQUAL
68357: PUSH
68358: LD_VAR 0 4
68362: PUSH
68363: LD_VAR 0 1
68367: PPUSH
68368: CALL_OW 437
68372: PUSH
68373: LD_INT 1
68375: ARRAY
68376: PUSH
68377: LD_INT 2
68379: ARRAY
68380: EQUAL
68381: AND
68382: PUSH
68383: LD_VAR 0 5
68387: PUSH
68388: LD_VAR 0 1
68392: PPUSH
68393: CALL_OW 437
68397: PUSH
68398: LD_INT 1
68400: ARRAY
68401: PUSH
68402: LD_INT 3
68404: ARRAY
68405: EQUAL
68406: AND
68407: IFFALSE 68417
// result := true end ;
68409: LD_ADDR_VAR 0 3
68413: PUSH
68414: LD_INT 1
68416: ST_TO_ADDR
// end ;
68417: LD_VAR 0 3
68421: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68422: LD_INT 0
68424: PPUSH
// result := false ;
68425: LD_ADDR_VAR 0 4
68429: PUSH
68430: LD_INT 0
68432: ST_TO_ADDR
// if GetTaskList ( unit ) then
68433: LD_VAR 0 1
68437: PPUSH
68438: CALL_OW 437
68442: IFFALSE 68525
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68444: LD_STRING M
68446: PUSH
68447: LD_VAR 0 1
68451: PPUSH
68452: CALL_OW 437
68456: PUSH
68457: LD_INT 1
68459: ARRAY
68460: PUSH
68461: LD_INT 1
68463: ARRAY
68464: EQUAL
68465: PUSH
68466: LD_VAR 0 2
68470: PUSH
68471: LD_VAR 0 1
68475: PPUSH
68476: CALL_OW 437
68480: PUSH
68481: LD_INT 1
68483: ARRAY
68484: PUSH
68485: LD_INT 2
68487: ARRAY
68488: EQUAL
68489: AND
68490: PUSH
68491: LD_VAR 0 3
68495: PUSH
68496: LD_VAR 0 1
68500: PPUSH
68501: CALL_OW 437
68505: PUSH
68506: LD_INT 1
68508: ARRAY
68509: PUSH
68510: LD_INT 3
68512: ARRAY
68513: EQUAL
68514: AND
68515: IFFALSE 68525
// result := true ;
68517: LD_ADDR_VAR 0 4
68521: PUSH
68522: LD_INT 1
68524: ST_TO_ADDR
// end ; end ;
68525: LD_VAR 0 4
68529: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68530: LD_INT 0
68532: PPUSH
68533: PPUSH
68534: PPUSH
68535: PPUSH
// if not unit or not area then
68536: LD_VAR 0 1
68540: NOT
68541: PUSH
68542: LD_VAR 0 2
68546: NOT
68547: OR
68548: IFFALSE 68552
// exit ;
68550: GO 68728
// tmp := AreaToList ( area , i ) ;
68552: LD_ADDR_VAR 0 6
68556: PUSH
68557: LD_VAR 0 2
68561: PPUSH
68562: LD_VAR 0 5
68566: PPUSH
68567: CALL_OW 517
68571: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68572: LD_ADDR_VAR 0 5
68576: PUSH
68577: DOUBLE
68578: LD_INT 1
68580: DEC
68581: ST_TO_ADDR
68582: LD_VAR 0 6
68586: PUSH
68587: LD_INT 1
68589: ARRAY
68590: PUSH
68591: FOR_TO
68592: IFFALSE 68726
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68594: LD_ADDR_VAR 0 7
68598: PUSH
68599: LD_VAR 0 6
68603: PUSH
68604: LD_INT 1
68606: ARRAY
68607: PUSH
68608: LD_VAR 0 5
68612: ARRAY
68613: PUSH
68614: LD_VAR 0 6
68618: PUSH
68619: LD_INT 2
68621: ARRAY
68622: PUSH
68623: LD_VAR 0 5
68627: ARRAY
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68633: LD_INT 92
68635: PUSH
68636: LD_VAR 0 7
68640: PUSH
68641: LD_INT 1
68643: ARRAY
68644: PUSH
68645: LD_VAR 0 7
68649: PUSH
68650: LD_INT 2
68652: ARRAY
68653: PUSH
68654: LD_INT 2
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: PPUSH
68663: CALL_OW 69
68667: PUSH
68668: LD_INT 0
68670: EQUAL
68671: IFFALSE 68724
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68673: LD_VAR 0 1
68677: PPUSH
68678: LD_VAR 0 7
68682: PUSH
68683: LD_INT 1
68685: ARRAY
68686: PPUSH
68687: LD_VAR 0 7
68691: PUSH
68692: LD_INT 2
68694: ARRAY
68695: PPUSH
68696: LD_VAR 0 3
68700: PPUSH
68701: CALL_OW 48
// result := IsPlaced ( unit ) ;
68705: LD_ADDR_VAR 0 4
68709: PUSH
68710: LD_VAR 0 1
68714: PPUSH
68715: CALL_OW 305
68719: ST_TO_ADDR
// exit ;
68720: POP
68721: POP
68722: GO 68728
// end ; end ;
68724: GO 68591
68726: POP
68727: POP
// end ;
68728: LD_VAR 0 4
68732: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68733: LD_INT 0
68735: PPUSH
68736: PPUSH
68737: PPUSH
// if not side or side > 8 then
68738: LD_VAR 0 1
68742: NOT
68743: PUSH
68744: LD_VAR 0 1
68748: PUSH
68749: LD_INT 8
68751: GREATER
68752: OR
68753: IFFALSE 68757
// exit ;
68755: GO 68944
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68757: LD_ADDR_VAR 0 4
68761: PUSH
68762: LD_INT 22
68764: PUSH
68765: LD_VAR 0 1
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 21
68776: PUSH
68777: LD_INT 3
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PPUSH
68788: CALL_OW 69
68792: ST_TO_ADDR
// if not tmp then
68793: LD_VAR 0 4
68797: NOT
68798: IFFALSE 68802
// exit ;
68800: GO 68944
// enable_addtolog := true ;
68802: LD_ADDR_OWVAR 81
68806: PUSH
68807: LD_INT 1
68809: ST_TO_ADDR
// AddToLog ( [ ) ;
68810: LD_STRING [
68812: PPUSH
68813: CALL_OW 561
// for i in tmp do
68817: LD_ADDR_VAR 0 3
68821: PUSH
68822: LD_VAR 0 4
68826: PUSH
68827: FOR_IN
68828: IFFALSE 68935
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68830: LD_STRING [
68832: PUSH
68833: LD_VAR 0 3
68837: PPUSH
68838: CALL_OW 266
68842: STR
68843: PUSH
68844: LD_STRING , 
68846: STR
68847: PUSH
68848: LD_VAR 0 3
68852: PPUSH
68853: CALL_OW 250
68857: STR
68858: PUSH
68859: LD_STRING , 
68861: STR
68862: PUSH
68863: LD_VAR 0 3
68867: PPUSH
68868: CALL_OW 251
68872: STR
68873: PUSH
68874: LD_STRING , 
68876: STR
68877: PUSH
68878: LD_VAR 0 3
68882: PPUSH
68883: CALL_OW 254
68887: STR
68888: PUSH
68889: LD_STRING , 
68891: STR
68892: PUSH
68893: LD_VAR 0 3
68897: PPUSH
68898: LD_INT 1
68900: PPUSH
68901: CALL_OW 268
68905: STR
68906: PUSH
68907: LD_STRING , 
68909: STR
68910: PUSH
68911: LD_VAR 0 3
68915: PPUSH
68916: LD_INT 2
68918: PPUSH
68919: CALL_OW 268
68923: STR
68924: PUSH
68925: LD_STRING ],
68927: STR
68928: PPUSH
68929: CALL_OW 561
// end ;
68933: GO 68827
68935: POP
68936: POP
// AddToLog ( ]; ) ;
68937: LD_STRING ];
68939: PPUSH
68940: CALL_OW 561
// end ;
68944: LD_VAR 0 2
68948: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68949: LD_INT 0
68951: PPUSH
68952: PPUSH
68953: PPUSH
68954: PPUSH
68955: PPUSH
// if not area or not rate or not max then
68956: LD_VAR 0 1
68960: NOT
68961: PUSH
68962: LD_VAR 0 2
68966: NOT
68967: OR
68968: PUSH
68969: LD_VAR 0 4
68973: NOT
68974: OR
68975: IFFALSE 68979
// exit ;
68977: GO 69168
// while 1 do
68979: LD_INT 1
68981: IFFALSE 69168
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68983: LD_ADDR_VAR 0 9
68987: PUSH
68988: LD_VAR 0 1
68992: PPUSH
68993: LD_INT 1
68995: PPUSH
68996: CALL_OW 287
69000: PUSH
69001: LD_INT 10
69003: MUL
69004: ST_TO_ADDR
// r := rate / 10 ;
69005: LD_ADDR_VAR 0 7
69009: PUSH
69010: LD_VAR 0 2
69014: PUSH
69015: LD_INT 10
69017: DIVREAL
69018: ST_TO_ADDR
// time := 1 1$00 ;
69019: LD_ADDR_VAR 0 8
69023: PUSH
69024: LD_INT 2100
69026: ST_TO_ADDR
// if amount < min then
69027: LD_VAR 0 9
69031: PUSH
69032: LD_VAR 0 3
69036: LESS
69037: IFFALSE 69055
// r := r * 2 else
69039: LD_ADDR_VAR 0 7
69043: PUSH
69044: LD_VAR 0 7
69048: PUSH
69049: LD_INT 2
69051: MUL
69052: ST_TO_ADDR
69053: GO 69081
// if amount > max then
69055: LD_VAR 0 9
69059: PUSH
69060: LD_VAR 0 4
69064: GREATER
69065: IFFALSE 69081
// r := r / 2 ;
69067: LD_ADDR_VAR 0 7
69071: PUSH
69072: LD_VAR 0 7
69076: PUSH
69077: LD_INT 2
69079: DIVREAL
69080: ST_TO_ADDR
// time := time / r ;
69081: LD_ADDR_VAR 0 8
69085: PUSH
69086: LD_VAR 0 8
69090: PUSH
69091: LD_VAR 0 7
69095: DIVREAL
69096: ST_TO_ADDR
// if time < 0 then
69097: LD_VAR 0 8
69101: PUSH
69102: LD_INT 0
69104: LESS
69105: IFFALSE 69122
// time := time * - 1 ;
69107: LD_ADDR_VAR 0 8
69111: PUSH
69112: LD_VAR 0 8
69116: PUSH
69117: LD_INT 1
69119: NEG
69120: MUL
69121: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69122: LD_VAR 0 8
69126: PUSH
69127: LD_INT 35
69129: PPUSH
69130: LD_INT 875
69132: PPUSH
69133: CALL_OW 12
69137: PLUS
69138: PPUSH
69139: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69143: LD_INT 1
69145: PPUSH
69146: LD_INT 5
69148: PPUSH
69149: CALL_OW 12
69153: PPUSH
69154: LD_VAR 0 1
69158: PPUSH
69159: LD_INT 1
69161: PPUSH
69162: CALL_OW 55
// end ;
69166: GO 68979
// end ;
69168: LD_VAR 0 5
69172: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69173: LD_INT 0
69175: PPUSH
69176: PPUSH
69177: PPUSH
69178: PPUSH
69179: PPUSH
69180: PPUSH
69181: PPUSH
69182: PPUSH
// if not turrets or not factories then
69183: LD_VAR 0 1
69187: NOT
69188: PUSH
69189: LD_VAR 0 2
69193: NOT
69194: OR
69195: IFFALSE 69199
// exit ;
69197: GO 69506
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69199: LD_ADDR_VAR 0 10
69203: PUSH
69204: LD_INT 5
69206: PUSH
69207: LD_INT 6
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 2
69216: PUSH
69217: LD_INT 4
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 3
69226: PUSH
69227: LD_INT 5
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 24
69241: PUSH
69242: LD_INT 25
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 23
69251: PUSH
69252: LD_INT 27
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 42
69265: PUSH
69266: LD_INT 43
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 44
69275: PUSH
69276: LD_INT 46
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 45
69285: PUSH
69286: LD_INT 47
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: LIST
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: LIST
69302: ST_TO_ADDR
// result := [ ] ;
69303: LD_ADDR_VAR 0 3
69307: PUSH
69308: EMPTY
69309: ST_TO_ADDR
// for i in turrets do
69310: LD_ADDR_VAR 0 4
69314: PUSH
69315: LD_VAR 0 1
69319: PUSH
69320: FOR_IN
69321: IFFALSE 69504
// begin nat := GetNation ( i ) ;
69323: LD_ADDR_VAR 0 7
69327: PUSH
69328: LD_VAR 0 4
69332: PPUSH
69333: CALL_OW 248
69337: ST_TO_ADDR
// weapon := 0 ;
69338: LD_ADDR_VAR 0 8
69342: PUSH
69343: LD_INT 0
69345: ST_TO_ADDR
// if not nat then
69346: LD_VAR 0 7
69350: NOT
69351: IFFALSE 69355
// continue ;
69353: GO 69320
// for j in list [ nat ] do
69355: LD_ADDR_VAR 0 5
69359: PUSH
69360: LD_VAR 0 10
69364: PUSH
69365: LD_VAR 0 7
69369: ARRAY
69370: PUSH
69371: FOR_IN
69372: IFFALSE 69413
// if GetBWeapon ( i ) = j [ 1 ] then
69374: LD_VAR 0 4
69378: PPUSH
69379: CALL_OW 269
69383: PUSH
69384: LD_VAR 0 5
69388: PUSH
69389: LD_INT 1
69391: ARRAY
69392: EQUAL
69393: IFFALSE 69411
// begin weapon := j [ 2 ] ;
69395: LD_ADDR_VAR 0 8
69399: PUSH
69400: LD_VAR 0 5
69404: PUSH
69405: LD_INT 2
69407: ARRAY
69408: ST_TO_ADDR
// break ;
69409: GO 69413
// end ;
69411: GO 69371
69413: POP
69414: POP
// if not weapon then
69415: LD_VAR 0 8
69419: NOT
69420: IFFALSE 69424
// continue ;
69422: GO 69320
// for k in factories do
69424: LD_ADDR_VAR 0 6
69428: PUSH
69429: LD_VAR 0 2
69433: PUSH
69434: FOR_IN
69435: IFFALSE 69500
// begin weapons := AvailableWeaponList ( k ) ;
69437: LD_ADDR_VAR 0 9
69441: PUSH
69442: LD_VAR 0 6
69446: PPUSH
69447: CALL_OW 478
69451: ST_TO_ADDR
// if not weapons then
69452: LD_VAR 0 9
69456: NOT
69457: IFFALSE 69461
// continue ;
69459: GO 69434
// if weapon in weapons then
69461: LD_VAR 0 8
69465: PUSH
69466: LD_VAR 0 9
69470: IN
69471: IFFALSE 69498
// begin result := [ i , weapon ] ;
69473: LD_ADDR_VAR 0 3
69477: PUSH
69478: LD_VAR 0 4
69482: PUSH
69483: LD_VAR 0 8
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: ST_TO_ADDR
// exit ;
69492: POP
69493: POP
69494: POP
69495: POP
69496: GO 69506
// end ; end ;
69498: GO 69434
69500: POP
69501: POP
// end ;
69502: GO 69320
69504: POP
69505: POP
// end ;
69506: LD_VAR 0 3
69510: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69511: LD_INT 0
69513: PPUSH
// if not side or side > 8 then
69514: LD_VAR 0 3
69518: NOT
69519: PUSH
69520: LD_VAR 0 3
69524: PUSH
69525: LD_INT 8
69527: GREATER
69528: OR
69529: IFFALSE 69533
// exit ;
69531: GO 69592
// if not range then
69533: LD_VAR 0 4
69537: NOT
69538: IFFALSE 69549
// range := - 12 ;
69540: LD_ADDR_VAR 0 4
69544: PUSH
69545: LD_INT 12
69547: NEG
69548: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69549: LD_VAR 0 1
69553: PPUSH
69554: LD_VAR 0 2
69558: PPUSH
69559: LD_VAR 0 3
69563: PPUSH
69564: LD_VAR 0 4
69568: PPUSH
69569: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69573: LD_VAR 0 1
69577: PPUSH
69578: LD_VAR 0 2
69582: PPUSH
69583: LD_VAR 0 3
69587: PPUSH
69588: CALL_OW 331
// end ;
69592: LD_VAR 0 5
69596: RET
// export function Video ( mode ) ; begin
69597: LD_INT 0
69599: PPUSH
// ingame_video = mode ;
69600: LD_ADDR_OWVAR 52
69604: PUSH
69605: LD_VAR 0 1
69609: ST_TO_ADDR
// interface_hidden = mode ;
69610: LD_ADDR_OWVAR 54
69614: PUSH
69615: LD_VAR 0 1
69619: ST_TO_ADDR
// end ;
69620: LD_VAR 0 2
69624: RET
// export function Join ( array , element ) ; begin
69625: LD_INT 0
69627: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69628: LD_ADDR_VAR 0 3
69632: PUSH
69633: LD_VAR 0 1
69637: PPUSH
69638: LD_VAR 0 1
69642: PUSH
69643: LD_INT 1
69645: PLUS
69646: PPUSH
69647: LD_VAR 0 2
69651: PPUSH
69652: CALL_OW 1
69656: ST_TO_ADDR
// end ;
69657: LD_VAR 0 3
69661: RET
// export function JoinUnion ( array , element ) ; begin
69662: LD_INT 0
69664: PPUSH
// result := array union element ;
69665: LD_ADDR_VAR 0 3
69669: PUSH
69670: LD_VAR 0 1
69674: PUSH
69675: LD_VAR 0 2
69679: UNION
69680: ST_TO_ADDR
// end ;
69681: LD_VAR 0 3
69685: RET
// export function GetBehemoths ( side ) ; begin
69686: LD_INT 0
69688: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69689: LD_ADDR_VAR 0 2
69693: PUSH
69694: LD_INT 22
69696: PUSH
69697: LD_VAR 0 1
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 31
69708: PUSH
69709: LD_INT 25
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PPUSH
69720: CALL_OW 69
69724: ST_TO_ADDR
// end ;
69725: LD_VAR 0 2
69729: RET
// export function Shuffle ( array ) ; var i , index ; begin
69730: LD_INT 0
69732: PPUSH
69733: PPUSH
69734: PPUSH
// result := [ ] ;
69735: LD_ADDR_VAR 0 2
69739: PUSH
69740: EMPTY
69741: ST_TO_ADDR
// if not array then
69742: LD_VAR 0 1
69746: NOT
69747: IFFALSE 69751
// exit ;
69749: GO 69850
// Randomize ;
69751: CALL_OW 10
// for i = array downto 1 do
69755: LD_ADDR_VAR 0 3
69759: PUSH
69760: DOUBLE
69761: LD_VAR 0 1
69765: INC
69766: ST_TO_ADDR
69767: LD_INT 1
69769: PUSH
69770: FOR_DOWNTO
69771: IFFALSE 69848
// begin index := rand ( 1 , array ) ;
69773: LD_ADDR_VAR 0 4
69777: PUSH
69778: LD_INT 1
69780: PPUSH
69781: LD_VAR 0 1
69785: PPUSH
69786: CALL_OW 12
69790: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69791: LD_ADDR_VAR 0 2
69795: PUSH
69796: LD_VAR 0 2
69800: PPUSH
69801: LD_VAR 0 2
69805: PUSH
69806: LD_INT 1
69808: PLUS
69809: PPUSH
69810: LD_VAR 0 1
69814: PUSH
69815: LD_VAR 0 4
69819: ARRAY
69820: PPUSH
69821: CALL_OW 2
69825: ST_TO_ADDR
// array := Delete ( array , index ) ;
69826: LD_ADDR_VAR 0 1
69830: PUSH
69831: LD_VAR 0 1
69835: PPUSH
69836: LD_VAR 0 4
69840: PPUSH
69841: CALL_OW 3
69845: ST_TO_ADDR
// end ;
69846: GO 69770
69848: POP
69849: POP
// end ;
69850: LD_VAR 0 2
69854: RET
// export function GetBaseMaterials ( base ) ; begin
69855: LD_INT 0
69857: PPUSH
// result := [ 0 , 0 , 0 ] ;
69858: LD_ADDR_VAR 0 2
69862: PUSH
69863: LD_INT 0
69865: PUSH
69866: LD_INT 0
69868: PUSH
69869: LD_INT 0
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: LIST
69876: ST_TO_ADDR
// if not base then
69877: LD_VAR 0 1
69881: NOT
69882: IFFALSE 69886
// exit ;
69884: GO 69935
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69886: LD_ADDR_VAR 0 2
69890: PUSH
69891: LD_VAR 0 1
69895: PPUSH
69896: LD_INT 1
69898: PPUSH
69899: CALL_OW 275
69903: PUSH
69904: LD_VAR 0 1
69908: PPUSH
69909: LD_INT 2
69911: PPUSH
69912: CALL_OW 275
69916: PUSH
69917: LD_VAR 0 1
69921: PPUSH
69922: LD_INT 3
69924: PPUSH
69925: CALL_OW 275
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: LIST
69934: ST_TO_ADDR
// end ;
69935: LD_VAR 0 2
69939: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69940: LD_INT 0
69942: PPUSH
69943: PPUSH
// result := array ;
69944: LD_ADDR_VAR 0 3
69948: PUSH
69949: LD_VAR 0 1
69953: ST_TO_ADDR
// if size >= result then
69954: LD_VAR 0 2
69958: PUSH
69959: LD_VAR 0 3
69963: GREATEREQUAL
69964: IFFALSE 69968
// exit ;
69966: GO 70018
// if size then
69968: LD_VAR 0 2
69972: IFFALSE 70018
// for i := array downto size do
69974: LD_ADDR_VAR 0 4
69978: PUSH
69979: DOUBLE
69980: LD_VAR 0 1
69984: INC
69985: ST_TO_ADDR
69986: LD_VAR 0 2
69990: PUSH
69991: FOR_DOWNTO
69992: IFFALSE 70016
// result := Delete ( result , result ) ;
69994: LD_ADDR_VAR 0 3
69998: PUSH
69999: LD_VAR 0 3
70003: PPUSH
70004: LD_VAR 0 3
70008: PPUSH
70009: CALL_OW 3
70013: ST_TO_ADDR
70014: GO 69991
70016: POP
70017: POP
// end ;
70018: LD_VAR 0 3
70022: RET
// export function ComExit ( unit ) ; var tmp ; begin
70023: LD_INT 0
70025: PPUSH
70026: PPUSH
// if not IsInUnit ( unit ) then
70027: LD_VAR 0 1
70031: PPUSH
70032: CALL_OW 310
70036: NOT
70037: IFFALSE 70041
// exit ;
70039: GO 70101
// tmp := IsInUnit ( unit ) ;
70041: LD_ADDR_VAR 0 3
70045: PUSH
70046: LD_VAR 0 1
70050: PPUSH
70051: CALL_OW 310
70055: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70056: LD_VAR 0 3
70060: PPUSH
70061: CALL_OW 247
70065: PUSH
70066: LD_INT 2
70068: EQUAL
70069: IFFALSE 70082
// ComExitVehicle ( unit ) else
70071: LD_VAR 0 1
70075: PPUSH
70076: CALL_OW 121
70080: GO 70091
// ComExitBuilding ( unit ) ;
70082: LD_VAR 0 1
70086: PPUSH
70087: CALL_OW 122
// result := tmp ;
70091: LD_ADDR_VAR 0 2
70095: PUSH
70096: LD_VAR 0 3
70100: ST_TO_ADDR
// end ;
70101: LD_VAR 0 2
70105: RET
// export function ComExitAll ( units ) ; var i ; begin
70106: LD_INT 0
70108: PPUSH
70109: PPUSH
// if not units then
70110: LD_VAR 0 1
70114: NOT
70115: IFFALSE 70119
// exit ;
70117: GO 70145
// for i in units do
70119: LD_ADDR_VAR 0 3
70123: PUSH
70124: LD_VAR 0 1
70128: PUSH
70129: FOR_IN
70130: IFFALSE 70143
// ComExit ( i ) ;
70132: LD_VAR 0 3
70136: PPUSH
70137: CALL 70023 0 1
70141: GO 70129
70143: POP
70144: POP
// end ;
70145: LD_VAR 0 2
70149: RET
// export function ResetHc ; begin
70150: LD_INT 0
70152: PPUSH
// InitHc ;
70153: CALL_OW 19
// hc_importance := 0 ;
70157: LD_ADDR_OWVAR 32
70161: PUSH
70162: LD_INT 0
70164: ST_TO_ADDR
// end ;
70165: LD_VAR 0 1
70169: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70170: LD_INT 0
70172: PPUSH
70173: PPUSH
70174: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70175: LD_ADDR_VAR 0 6
70179: PUSH
70180: LD_VAR 0 1
70184: PUSH
70185: LD_VAR 0 3
70189: PLUS
70190: PUSH
70191: LD_INT 2
70193: DIV
70194: ST_TO_ADDR
// if _x < 0 then
70195: LD_VAR 0 6
70199: PUSH
70200: LD_INT 0
70202: LESS
70203: IFFALSE 70220
// _x := _x * - 1 ;
70205: LD_ADDR_VAR 0 6
70209: PUSH
70210: LD_VAR 0 6
70214: PUSH
70215: LD_INT 1
70217: NEG
70218: MUL
70219: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70220: LD_ADDR_VAR 0 7
70224: PUSH
70225: LD_VAR 0 2
70229: PUSH
70230: LD_VAR 0 4
70234: PLUS
70235: PUSH
70236: LD_INT 2
70238: DIV
70239: ST_TO_ADDR
// if _y < 0 then
70240: LD_VAR 0 7
70244: PUSH
70245: LD_INT 0
70247: LESS
70248: IFFALSE 70265
// _y := _y * - 1 ;
70250: LD_ADDR_VAR 0 7
70254: PUSH
70255: LD_VAR 0 7
70259: PUSH
70260: LD_INT 1
70262: NEG
70263: MUL
70264: ST_TO_ADDR
// result := [ _x , _y ] ;
70265: LD_ADDR_VAR 0 5
70269: PUSH
70270: LD_VAR 0 6
70274: PUSH
70275: LD_VAR 0 7
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: ST_TO_ADDR
// end ;
70284: LD_VAR 0 5
70288: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70289: LD_INT 0
70291: PPUSH
70292: PPUSH
70293: PPUSH
70294: PPUSH
// task := GetTaskList ( unit ) ;
70295: LD_ADDR_VAR 0 7
70299: PUSH
70300: LD_VAR 0 1
70304: PPUSH
70305: CALL_OW 437
70309: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70310: LD_VAR 0 7
70314: NOT
70315: PUSH
70316: LD_VAR 0 1
70320: PPUSH
70321: LD_VAR 0 2
70325: PPUSH
70326: CALL_OW 308
70330: NOT
70331: AND
70332: IFFALSE 70336
// exit ;
70334: GO 70454
// if IsInArea ( unit , area ) then
70336: LD_VAR 0 1
70340: PPUSH
70341: LD_VAR 0 2
70345: PPUSH
70346: CALL_OW 308
70350: IFFALSE 70368
// begin ComMoveToArea ( unit , goAway ) ;
70352: LD_VAR 0 1
70356: PPUSH
70357: LD_VAR 0 3
70361: PPUSH
70362: CALL_OW 113
// exit ;
70366: GO 70454
// end ; if task [ 1 ] [ 1 ] <> M then
70368: LD_VAR 0 7
70372: PUSH
70373: LD_INT 1
70375: ARRAY
70376: PUSH
70377: LD_INT 1
70379: ARRAY
70380: PUSH
70381: LD_STRING M
70383: NONEQUAL
70384: IFFALSE 70388
// exit ;
70386: GO 70454
// x := task [ 1 ] [ 2 ] ;
70388: LD_ADDR_VAR 0 5
70392: PUSH
70393: LD_VAR 0 7
70397: PUSH
70398: LD_INT 1
70400: ARRAY
70401: PUSH
70402: LD_INT 2
70404: ARRAY
70405: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70406: LD_ADDR_VAR 0 6
70410: PUSH
70411: LD_VAR 0 7
70415: PUSH
70416: LD_INT 1
70418: ARRAY
70419: PUSH
70420: LD_INT 3
70422: ARRAY
70423: ST_TO_ADDR
// if InArea ( x , y , area ) then
70424: LD_VAR 0 5
70428: PPUSH
70429: LD_VAR 0 6
70433: PPUSH
70434: LD_VAR 0 2
70438: PPUSH
70439: CALL_OW 309
70443: IFFALSE 70454
// ComStop ( unit ) ;
70445: LD_VAR 0 1
70449: PPUSH
70450: CALL_OW 141
// end ;
70454: LD_VAR 0 4
70458: RET
// export function Abs ( value ) ; begin
70459: LD_INT 0
70461: PPUSH
// result := value ;
70462: LD_ADDR_VAR 0 2
70466: PUSH
70467: LD_VAR 0 1
70471: ST_TO_ADDR
// if value < 0 then
70472: LD_VAR 0 1
70476: PUSH
70477: LD_INT 0
70479: LESS
70480: IFFALSE 70497
// result := value * - 1 ;
70482: LD_ADDR_VAR 0 2
70486: PUSH
70487: LD_VAR 0 1
70491: PUSH
70492: LD_INT 1
70494: NEG
70495: MUL
70496: ST_TO_ADDR
// end ;
70497: LD_VAR 0 2
70501: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70502: LD_INT 0
70504: PPUSH
70505: PPUSH
70506: PPUSH
70507: PPUSH
70508: PPUSH
70509: PPUSH
70510: PPUSH
70511: PPUSH
// if not unit or not building then
70512: LD_VAR 0 1
70516: NOT
70517: PUSH
70518: LD_VAR 0 2
70522: NOT
70523: OR
70524: IFFALSE 70528
// exit ;
70526: GO 70754
// x := GetX ( building ) ;
70528: LD_ADDR_VAR 0 4
70532: PUSH
70533: LD_VAR 0 2
70537: PPUSH
70538: CALL_OW 250
70542: ST_TO_ADDR
// y := GetY ( building ) ;
70543: LD_ADDR_VAR 0 6
70547: PUSH
70548: LD_VAR 0 2
70552: PPUSH
70553: CALL_OW 251
70557: ST_TO_ADDR
// d := GetDir ( building ) ;
70558: LD_ADDR_VAR 0 8
70562: PUSH
70563: LD_VAR 0 2
70567: PPUSH
70568: CALL_OW 254
70572: ST_TO_ADDR
// r := 4 ;
70573: LD_ADDR_VAR 0 9
70577: PUSH
70578: LD_INT 4
70580: ST_TO_ADDR
// for i := 1 to 5 do
70581: LD_ADDR_VAR 0 10
70585: PUSH
70586: DOUBLE
70587: LD_INT 1
70589: DEC
70590: ST_TO_ADDR
70591: LD_INT 5
70593: PUSH
70594: FOR_TO
70595: IFFALSE 70752
// begin _x := ShiftX ( x , d , r + i ) ;
70597: LD_ADDR_VAR 0 5
70601: PUSH
70602: LD_VAR 0 4
70606: PPUSH
70607: LD_VAR 0 8
70611: PPUSH
70612: LD_VAR 0 9
70616: PUSH
70617: LD_VAR 0 10
70621: PLUS
70622: PPUSH
70623: CALL_OW 272
70627: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70628: LD_ADDR_VAR 0 7
70632: PUSH
70633: LD_VAR 0 6
70637: PPUSH
70638: LD_VAR 0 8
70642: PPUSH
70643: LD_VAR 0 9
70647: PUSH
70648: LD_VAR 0 10
70652: PLUS
70653: PPUSH
70654: CALL_OW 273
70658: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70659: LD_VAR 0 5
70663: PPUSH
70664: LD_VAR 0 7
70668: PPUSH
70669: CALL_OW 488
70673: PUSH
70674: LD_VAR 0 5
70678: PPUSH
70679: LD_VAR 0 7
70683: PPUSH
70684: CALL_OW 428
70688: PPUSH
70689: CALL_OW 247
70693: PUSH
70694: LD_INT 3
70696: PUSH
70697: LD_INT 2
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: IN
70704: NOT
70705: AND
70706: IFFALSE 70750
// begin ComMoveXY ( unit , _x , _y ) ;
70708: LD_VAR 0 1
70712: PPUSH
70713: LD_VAR 0 5
70717: PPUSH
70718: LD_VAR 0 7
70722: PPUSH
70723: CALL_OW 111
// result := [ _x , _y ] ;
70727: LD_ADDR_VAR 0 3
70731: PUSH
70732: LD_VAR 0 5
70736: PUSH
70737: LD_VAR 0 7
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: ST_TO_ADDR
// exit ;
70746: POP
70747: POP
70748: GO 70754
// end ; end ;
70750: GO 70594
70752: POP
70753: POP
// end ;
70754: LD_VAR 0 3
70758: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70759: LD_INT 0
70761: PPUSH
70762: PPUSH
70763: PPUSH
// result := 0 ;
70764: LD_ADDR_VAR 0 3
70768: PUSH
70769: LD_INT 0
70771: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70772: LD_VAR 0 1
70776: PUSH
70777: LD_INT 0
70779: LESS
70780: PUSH
70781: LD_VAR 0 1
70785: PUSH
70786: LD_INT 8
70788: GREATER
70789: OR
70790: PUSH
70791: LD_VAR 0 2
70795: PUSH
70796: LD_INT 0
70798: LESS
70799: OR
70800: PUSH
70801: LD_VAR 0 2
70805: PUSH
70806: LD_INT 8
70808: GREATER
70809: OR
70810: IFFALSE 70814
// exit ;
70812: GO 70889
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70814: LD_ADDR_VAR 0 4
70818: PUSH
70819: LD_INT 22
70821: PUSH
70822: LD_VAR 0 2
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PPUSH
70831: CALL_OW 69
70835: PUSH
70836: FOR_IN
70837: IFFALSE 70887
// begin un := UnitShoot ( i ) ;
70839: LD_ADDR_VAR 0 5
70843: PUSH
70844: LD_VAR 0 4
70848: PPUSH
70849: CALL_OW 504
70853: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70854: LD_VAR 0 5
70858: PPUSH
70859: CALL_OW 255
70863: PUSH
70864: LD_VAR 0 1
70868: EQUAL
70869: IFFALSE 70885
// begin result := un ;
70871: LD_ADDR_VAR 0 3
70875: PUSH
70876: LD_VAR 0 5
70880: ST_TO_ADDR
// exit ;
70881: POP
70882: POP
70883: GO 70889
// end ; end ;
70885: GO 70836
70887: POP
70888: POP
// end ;
70889: LD_VAR 0 3
70893: RET
// export function GetCargoBay ( units ) ; begin
70894: LD_INT 0
70896: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70897: LD_ADDR_VAR 0 2
70901: PUSH
70902: LD_VAR 0 1
70906: PPUSH
70907: LD_INT 2
70909: PUSH
70910: LD_INT 34
70912: PUSH
70913: LD_INT 12
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 34
70922: PUSH
70923: LD_INT 51
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: LD_INT 34
70932: PUSH
70933: LD_INT 32
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 34
70942: PUSH
70943: LD_INT 89
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: PPUSH
70957: CALL_OW 72
70961: ST_TO_ADDR
// end ;
70962: LD_VAR 0 2
70966: RET
// export function Negate ( value ) ; begin
70967: LD_INT 0
70969: PPUSH
// result := not value ;
70970: LD_ADDR_VAR 0 2
70974: PUSH
70975: LD_VAR 0 1
70979: NOT
70980: ST_TO_ADDR
// end ;
70981: LD_VAR 0 2
70985: RET
// export function Inc ( value ) ; begin
70986: LD_INT 0
70988: PPUSH
// result := value + 1 ;
70989: LD_ADDR_VAR 0 2
70993: PUSH
70994: LD_VAR 0 1
70998: PUSH
70999: LD_INT 1
71001: PLUS
71002: ST_TO_ADDR
// end ;
71003: LD_VAR 0 2
71007: RET
// export function Dec ( value ) ; begin
71008: LD_INT 0
71010: PPUSH
// result := value - 1 ;
71011: LD_ADDR_VAR 0 2
71015: PUSH
71016: LD_VAR 0 1
71020: PUSH
71021: LD_INT 1
71023: MINUS
71024: ST_TO_ADDR
// end ;
71025: LD_VAR 0 2
71029: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71030: LD_INT 0
71032: PPUSH
71033: PPUSH
71034: PPUSH
71035: PPUSH
71036: PPUSH
71037: PPUSH
71038: PPUSH
71039: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71040: LD_VAR 0 1
71044: PPUSH
71045: LD_VAR 0 2
71049: PPUSH
71050: CALL_OW 488
71054: NOT
71055: PUSH
71056: LD_VAR 0 3
71060: PPUSH
71061: LD_VAR 0 4
71065: PPUSH
71066: CALL_OW 488
71070: NOT
71071: OR
71072: IFFALSE 71085
// begin result := - 1 ;
71074: LD_ADDR_VAR 0 5
71078: PUSH
71079: LD_INT 1
71081: NEG
71082: ST_TO_ADDR
// exit ;
71083: GO 71320
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71085: LD_ADDR_VAR 0 12
71089: PUSH
71090: LD_VAR 0 1
71094: PPUSH
71095: LD_VAR 0 2
71099: PPUSH
71100: LD_VAR 0 3
71104: PPUSH
71105: LD_VAR 0 4
71109: PPUSH
71110: CALL 70170 0 4
71114: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71115: LD_ADDR_VAR 0 11
71119: PUSH
71120: LD_VAR 0 1
71124: PPUSH
71125: LD_VAR 0 2
71129: PPUSH
71130: LD_VAR 0 12
71134: PUSH
71135: LD_INT 1
71137: ARRAY
71138: PPUSH
71139: LD_VAR 0 12
71143: PUSH
71144: LD_INT 2
71146: ARRAY
71147: PPUSH
71148: CALL_OW 298
71152: ST_TO_ADDR
// distance := 9999 ;
71153: LD_ADDR_VAR 0 10
71157: PUSH
71158: LD_INT 9999
71160: ST_TO_ADDR
// for i := 0 to 5 do
71161: LD_ADDR_VAR 0 6
71165: PUSH
71166: DOUBLE
71167: LD_INT 0
71169: DEC
71170: ST_TO_ADDR
71171: LD_INT 5
71173: PUSH
71174: FOR_TO
71175: IFFALSE 71318
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71177: LD_ADDR_VAR 0 7
71181: PUSH
71182: LD_VAR 0 1
71186: PPUSH
71187: LD_VAR 0 6
71191: PPUSH
71192: LD_VAR 0 11
71196: PPUSH
71197: CALL_OW 272
71201: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71202: LD_ADDR_VAR 0 8
71206: PUSH
71207: LD_VAR 0 2
71211: PPUSH
71212: LD_VAR 0 6
71216: PPUSH
71217: LD_VAR 0 11
71221: PPUSH
71222: CALL_OW 273
71226: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71227: LD_VAR 0 7
71231: PPUSH
71232: LD_VAR 0 8
71236: PPUSH
71237: CALL_OW 488
71241: NOT
71242: IFFALSE 71246
// continue ;
71244: GO 71174
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71246: LD_ADDR_VAR 0 9
71250: PUSH
71251: LD_VAR 0 12
71255: PUSH
71256: LD_INT 1
71258: ARRAY
71259: PPUSH
71260: LD_VAR 0 12
71264: PUSH
71265: LD_INT 2
71267: ARRAY
71268: PPUSH
71269: LD_VAR 0 7
71273: PPUSH
71274: LD_VAR 0 8
71278: PPUSH
71279: CALL_OW 298
71283: ST_TO_ADDR
// if tmp < distance then
71284: LD_VAR 0 9
71288: PUSH
71289: LD_VAR 0 10
71293: LESS
71294: IFFALSE 71316
// begin result := i ;
71296: LD_ADDR_VAR 0 5
71300: PUSH
71301: LD_VAR 0 6
71305: ST_TO_ADDR
// distance := tmp ;
71306: LD_ADDR_VAR 0 10
71310: PUSH
71311: LD_VAR 0 9
71315: ST_TO_ADDR
// end ; end ;
71316: GO 71174
71318: POP
71319: POP
// end ;
71320: LD_VAR 0 5
71324: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71325: LD_INT 0
71327: PPUSH
71328: PPUSH
// if not driver or not IsInUnit ( driver ) then
71329: LD_VAR 0 1
71333: NOT
71334: PUSH
71335: LD_VAR 0 1
71339: PPUSH
71340: CALL_OW 310
71344: NOT
71345: OR
71346: IFFALSE 71350
// exit ;
71348: GO 71440
// vehicle := IsInUnit ( driver ) ;
71350: LD_ADDR_VAR 0 3
71354: PUSH
71355: LD_VAR 0 1
71359: PPUSH
71360: CALL_OW 310
71364: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71365: LD_VAR 0 1
71369: PPUSH
71370: LD_STRING \
71372: PUSH
71373: LD_INT 0
71375: PUSH
71376: LD_INT 0
71378: PUSH
71379: LD_INT 0
71381: PUSH
71382: LD_INT 0
71384: PUSH
71385: LD_INT 0
71387: PUSH
71388: LD_INT 0
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: PUSH
71400: LD_STRING E
71402: PUSH
71403: LD_INT 0
71405: PUSH
71406: LD_INT 0
71408: PUSH
71409: LD_VAR 0 3
71413: PUSH
71414: LD_INT 0
71416: PUSH
71417: LD_INT 0
71419: PUSH
71420: LD_INT 0
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PPUSH
71436: CALL_OW 446
// end ;
71440: LD_VAR 0 2
71444: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71445: LD_INT 0
71447: PPUSH
71448: PPUSH
// if not driver or not IsInUnit ( driver ) then
71449: LD_VAR 0 1
71453: NOT
71454: PUSH
71455: LD_VAR 0 1
71459: PPUSH
71460: CALL_OW 310
71464: NOT
71465: OR
71466: IFFALSE 71470
// exit ;
71468: GO 71560
// vehicle := IsInUnit ( driver ) ;
71470: LD_ADDR_VAR 0 3
71474: PUSH
71475: LD_VAR 0 1
71479: PPUSH
71480: CALL_OW 310
71484: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71485: LD_VAR 0 1
71489: PPUSH
71490: LD_STRING \
71492: PUSH
71493: LD_INT 0
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: LD_INT 0
71501: PUSH
71502: LD_INT 0
71504: PUSH
71505: LD_INT 0
71507: PUSH
71508: LD_INT 0
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: PUSH
71520: LD_STRING E
71522: PUSH
71523: LD_INT 0
71525: PUSH
71526: LD_INT 0
71528: PUSH
71529: LD_VAR 0 3
71533: PUSH
71534: LD_INT 0
71536: PUSH
71537: LD_INT 0
71539: PUSH
71540: LD_INT 0
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: LIST
71550: LIST
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PPUSH
71556: CALL_OW 447
// end ;
71560: LD_VAR 0 2
71564: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71565: LD_INT 0
71567: PPUSH
71568: PPUSH
71569: PPUSH
// tmp := [ ] ;
71570: LD_ADDR_VAR 0 5
71574: PUSH
71575: EMPTY
71576: ST_TO_ADDR
// for i in units do
71577: LD_ADDR_VAR 0 4
71581: PUSH
71582: LD_VAR 0 1
71586: PUSH
71587: FOR_IN
71588: IFFALSE 71626
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71590: LD_ADDR_VAR 0 5
71594: PUSH
71595: LD_VAR 0 5
71599: PPUSH
71600: LD_VAR 0 5
71604: PUSH
71605: LD_INT 1
71607: PLUS
71608: PPUSH
71609: LD_VAR 0 4
71613: PPUSH
71614: CALL_OW 256
71618: PPUSH
71619: CALL_OW 2
71623: ST_TO_ADDR
71624: GO 71587
71626: POP
71627: POP
// if not tmp then
71628: LD_VAR 0 5
71632: NOT
71633: IFFALSE 71637
// exit ;
71635: GO 71685
// if asc then
71637: LD_VAR 0 2
71641: IFFALSE 71665
// result := SortListByListAsc ( units , tmp ) else
71643: LD_ADDR_VAR 0 3
71647: PUSH
71648: LD_VAR 0 1
71652: PPUSH
71653: LD_VAR 0 5
71657: PPUSH
71658: CALL_OW 76
71662: ST_TO_ADDR
71663: GO 71685
// result := SortListByListDesc ( units , tmp ) ;
71665: LD_ADDR_VAR 0 3
71669: PUSH
71670: LD_VAR 0 1
71674: PPUSH
71675: LD_VAR 0 5
71679: PPUSH
71680: CALL_OW 77
71684: ST_TO_ADDR
// end ;
71685: LD_VAR 0 3
71689: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71690: LD_INT 0
71692: PPUSH
71693: PPUSH
// task := GetTaskList ( mech ) ;
71694: LD_ADDR_VAR 0 4
71698: PUSH
71699: LD_VAR 0 1
71703: PPUSH
71704: CALL_OW 437
71708: ST_TO_ADDR
// if not task then
71709: LD_VAR 0 4
71713: NOT
71714: IFFALSE 71718
// exit ;
71716: GO 71760
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71718: LD_ADDR_VAR 0 3
71722: PUSH
71723: LD_VAR 0 4
71727: PUSH
71728: LD_INT 1
71730: ARRAY
71731: PUSH
71732: LD_INT 1
71734: ARRAY
71735: PUSH
71736: LD_STRING r
71738: EQUAL
71739: PUSH
71740: LD_VAR 0 4
71744: PUSH
71745: LD_INT 1
71747: ARRAY
71748: PUSH
71749: LD_INT 4
71751: ARRAY
71752: PUSH
71753: LD_VAR 0 2
71757: EQUAL
71758: AND
71759: ST_TO_ADDR
// end ;
71760: LD_VAR 0 3
71764: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71765: LD_INT 0
71767: PPUSH
// SetDir ( unit , d ) ;
71768: LD_VAR 0 1
71772: PPUSH
71773: LD_VAR 0 4
71777: PPUSH
71778: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71782: LD_VAR 0 1
71786: PPUSH
71787: LD_VAR 0 2
71791: PPUSH
71792: LD_VAR 0 3
71796: PPUSH
71797: LD_VAR 0 5
71801: PPUSH
71802: CALL_OW 48
// end ;
71806: LD_VAR 0 6
71810: RET
// export function ToNaturalNumber ( number ) ; begin
71811: LD_INT 0
71813: PPUSH
// result := number div 1 ;
71814: LD_ADDR_VAR 0 2
71818: PUSH
71819: LD_VAR 0 1
71823: PUSH
71824: LD_INT 1
71826: DIV
71827: ST_TO_ADDR
// if number < 0 then
71828: LD_VAR 0 1
71832: PUSH
71833: LD_INT 0
71835: LESS
71836: IFFALSE 71846
// result := 0 ;
71838: LD_ADDR_VAR 0 2
71842: PUSH
71843: LD_INT 0
71845: ST_TO_ADDR
// end ;
71846: LD_VAR 0 2
71850: RET
// export function SortByClass ( units , class ) ; var un ; begin
71851: LD_INT 0
71853: PPUSH
71854: PPUSH
// if not units or not class then
71855: LD_VAR 0 1
71859: NOT
71860: PUSH
71861: LD_VAR 0 2
71865: NOT
71866: OR
71867: IFFALSE 71871
// exit ;
71869: GO 71966
// result := [ ] ;
71871: LD_ADDR_VAR 0 3
71875: PUSH
71876: EMPTY
71877: ST_TO_ADDR
// for un in units do
71878: LD_ADDR_VAR 0 4
71882: PUSH
71883: LD_VAR 0 1
71887: PUSH
71888: FOR_IN
71889: IFFALSE 71964
// if GetClass ( un ) = class then
71891: LD_VAR 0 4
71895: PPUSH
71896: CALL_OW 257
71900: PUSH
71901: LD_VAR 0 2
71905: EQUAL
71906: IFFALSE 71933
// result := Insert ( result , 1 , un ) else
71908: LD_ADDR_VAR 0 3
71912: PUSH
71913: LD_VAR 0 3
71917: PPUSH
71918: LD_INT 1
71920: PPUSH
71921: LD_VAR 0 4
71925: PPUSH
71926: CALL_OW 2
71930: ST_TO_ADDR
71931: GO 71962
// result := Replace ( result , result + 1 , un ) ;
71933: LD_ADDR_VAR 0 3
71937: PUSH
71938: LD_VAR 0 3
71942: PPUSH
71943: LD_VAR 0 3
71947: PUSH
71948: LD_INT 1
71950: PLUS
71951: PPUSH
71952: LD_VAR 0 4
71956: PPUSH
71957: CALL_OW 1
71961: ST_TO_ADDR
71962: GO 71888
71964: POP
71965: POP
// end ;
71966: LD_VAR 0 3
71970: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71971: LD_INT 0
71973: PPUSH
71974: PPUSH
71975: PPUSH
71976: PPUSH
71977: PPUSH
71978: PPUSH
71979: PPUSH
// result := [ ] ;
71980: LD_ADDR_VAR 0 4
71984: PUSH
71985: EMPTY
71986: ST_TO_ADDR
// if x - r < 0 then
71987: LD_VAR 0 1
71991: PUSH
71992: LD_VAR 0 3
71996: MINUS
71997: PUSH
71998: LD_INT 0
72000: LESS
72001: IFFALSE 72013
// min_x := 0 else
72003: LD_ADDR_VAR 0 8
72007: PUSH
72008: LD_INT 0
72010: ST_TO_ADDR
72011: GO 72029
// min_x := x - r ;
72013: LD_ADDR_VAR 0 8
72017: PUSH
72018: LD_VAR 0 1
72022: PUSH
72023: LD_VAR 0 3
72027: MINUS
72028: ST_TO_ADDR
// if y - r < 0 then
72029: LD_VAR 0 2
72033: PUSH
72034: LD_VAR 0 3
72038: MINUS
72039: PUSH
72040: LD_INT 0
72042: LESS
72043: IFFALSE 72055
// min_y := 0 else
72045: LD_ADDR_VAR 0 7
72049: PUSH
72050: LD_INT 0
72052: ST_TO_ADDR
72053: GO 72071
// min_y := y - r ;
72055: LD_ADDR_VAR 0 7
72059: PUSH
72060: LD_VAR 0 2
72064: PUSH
72065: LD_VAR 0 3
72069: MINUS
72070: ST_TO_ADDR
// max_x := x + r ;
72071: LD_ADDR_VAR 0 9
72075: PUSH
72076: LD_VAR 0 1
72080: PUSH
72081: LD_VAR 0 3
72085: PLUS
72086: ST_TO_ADDR
// max_y := y + r ;
72087: LD_ADDR_VAR 0 10
72091: PUSH
72092: LD_VAR 0 2
72096: PUSH
72097: LD_VAR 0 3
72101: PLUS
72102: ST_TO_ADDR
// for _x = min_x to max_x do
72103: LD_ADDR_VAR 0 5
72107: PUSH
72108: DOUBLE
72109: LD_VAR 0 8
72113: DEC
72114: ST_TO_ADDR
72115: LD_VAR 0 9
72119: PUSH
72120: FOR_TO
72121: IFFALSE 72222
// for _y = min_y to max_y do
72123: LD_ADDR_VAR 0 6
72127: PUSH
72128: DOUBLE
72129: LD_VAR 0 7
72133: DEC
72134: ST_TO_ADDR
72135: LD_VAR 0 10
72139: PUSH
72140: FOR_TO
72141: IFFALSE 72218
// begin if not ValidHex ( _x , _y ) then
72143: LD_VAR 0 5
72147: PPUSH
72148: LD_VAR 0 6
72152: PPUSH
72153: CALL_OW 488
72157: NOT
72158: IFFALSE 72162
// continue ;
72160: GO 72140
// if GetResourceTypeXY ( _x , _y ) then
72162: LD_VAR 0 5
72166: PPUSH
72167: LD_VAR 0 6
72171: PPUSH
72172: CALL_OW 283
72176: IFFALSE 72216
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72178: LD_ADDR_VAR 0 4
72182: PUSH
72183: LD_VAR 0 4
72187: PPUSH
72188: LD_VAR 0 4
72192: PUSH
72193: LD_INT 1
72195: PLUS
72196: PPUSH
72197: LD_VAR 0 5
72201: PUSH
72202: LD_VAR 0 6
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PPUSH
72211: CALL_OW 1
72215: ST_TO_ADDR
// end ;
72216: GO 72140
72218: POP
72219: POP
72220: GO 72120
72222: POP
72223: POP
// end ;
72224: LD_VAR 0 4
72228: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72229: LD_INT 0
72231: PPUSH
72232: PPUSH
72233: PPUSH
72234: PPUSH
72235: PPUSH
72236: PPUSH
72237: PPUSH
72238: PPUSH
// if not units then
72239: LD_VAR 0 1
72243: NOT
72244: IFFALSE 72248
// exit ;
72246: GO 72776
// result := UnitFilter ( units , [ f_ok ] ) ;
72248: LD_ADDR_VAR 0 3
72252: PUSH
72253: LD_VAR 0 1
72257: PPUSH
72258: LD_INT 50
72260: PUSH
72261: EMPTY
72262: LIST
72263: PPUSH
72264: CALL_OW 72
72268: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72269: LD_ADDR_VAR 0 8
72273: PUSH
72274: LD_VAR 0 1
72278: PUSH
72279: LD_INT 1
72281: ARRAY
72282: PPUSH
72283: CALL_OW 255
72287: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72288: LD_ADDR_VAR 0 10
72292: PUSH
72293: LD_INT 29
72295: PUSH
72296: LD_INT 91
72298: PUSH
72299: LD_INT 49
72301: PUSH
72302: EMPTY
72303: LIST
72304: LIST
72305: LIST
72306: ST_TO_ADDR
// if not result then
72307: LD_VAR 0 3
72311: NOT
72312: IFFALSE 72316
// exit ;
72314: GO 72776
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72316: LD_ADDR_VAR 0 5
72320: PUSH
72321: LD_INT 81
72323: PUSH
72324: LD_VAR 0 8
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: PPUSH
72333: CALL_OW 69
72337: ST_TO_ADDR
// for i in result do
72338: LD_ADDR_VAR 0 4
72342: PUSH
72343: LD_VAR 0 3
72347: PUSH
72348: FOR_IN
72349: IFFALSE 72774
// begin tag := GetTag ( i ) + 1 ;
72351: LD_ADDR_VAR 0 9
72355: PUSH
72356: LD_VAR 0 4
72360: PPUSH
72361: CALL_OW 110
72365: PUSH
72366: LD_INT 1
72368: PLUS
72369: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
72370: LD_ADDR_VAR 0 7
72374: PUSH
72375: LD_VAR 0 4
72379: PPUSH
72380: CALL_OW 250
72384: PPUSH
72385: LD_VAR 0 4
72389: PPUSH
72390: CALL_OW 251
72394: PPUSH
72395: LD_INT 4
72397: PPUSH
72398: CALL 71971 0 3
72402: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
72403: LD_VAR 0 4
72407: PPUSH
72408: CALL_OW 247
72412: PUSH
72413: LD_INT 2
72415: EQUAL
72416: PUSH
72417: LD_VAR 0 7
72421: PUSH
72422: LD_INT 2
72424: GREATER
72425: AND
72426: PUSH
72427: LD_VAR 0 4
72431: PPUSH
72432: CALL_OW 264
72436: PUSH
72437: LD_VAR 0 10
72441: IN
72442: NOT
72443: AND
72444: IFFALSE 72483
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72446: LD_VAR 0 4
72450: PPUSH
72451: LD_VAR 0 7
72455: PUSH
72456: LD_INT 1
72458: ARRAY
72459: PUSH
72460: LD_INT 1
72462: ARRAY
72463: PPUSH
72464: LD_VAR 0 7
72468: PUSH
72469: LD_INT 1
72471: ARRAY
72472: PUSH
72473: LD_INT 2
72475: ARRAY
72476: PPUSH
72477: CALL_OW 116
72481: GO 72772
// if path > tag then
72483: LD_VAR 0 2
72487: PUSH
72488: LD_VAR 0 9
72492: GREATER
72493: IFFALSE 72701
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72495: LD_ADDR_VAR 0 6
72499: PUSH
72500: LD_VAR 0 5
72504: PPUSH
72505: LD_INT 91
72507: PUSH
72508: LD_VAR 0 4
72512: PUSH
72513: LD_INT 8
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: LIST
72520: PPUSH
72521: CALL_OW 72
72525: ST_TO_ADDR
// if nearEnemy then
72526: LD_VAR 0 6
72530: IFFALSE 72599
// begin if GetWeapon ( i ) = ru_time_lapser then
72532: LD_VAR 0 4
72536: PPUSH
72537: CALL_OW 264
72541: PUSH
72542: LD_INT 49
72544: EQUAL
72545: IFFALSE 72573
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72547: LD_VAR 0 4
72551: PPUSH
72552: LD_VAR 0 6
72556: PPUSH
72557: LD_VAR 0 4
72561: PPUSH
72562: CALL_OW 74
72566: PPUSH
72567: CALL_OW 112
72571: GO 72597
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72573: LD_VAR 0 4
72577: PPUSH
72578: LD_VAR 0 6
72582: PPUSH
72583: LD_VAR 0 4
72587: PPUSH
72588: CALL_OW 74
72592: PPUSH
72593: CALL 73847 0 2
// end else
72597: GO 72699
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72599: LD_VAR 0 4
72603: PPUSH
72604: LD_VAR 0 2
72608: PUSH
72609: LD_VAR 0 9
72613: ARRAY
72614: PUSH
72615: LD_INT 1
72617: ARRAY
72618: PPUSH
72619: LD_VAR 0 2
72623: PUSH
72624: LD_VAR 0 9
72628: ARRAY
72629: PUSH
72630: LD_INT 2
72632: ARRAY
72633: PPUSH
72634: CALL_OW 297
72638: PUSH
72639: LD_INT 6
72641: GREATER
72642: IFFALSE 72685
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72644: LD_VAR 0 4
72648: PPUSH
72649: LD_VAR 0 2
72653: PUSH
72654: LD_VAR 0 9
72658: ARRAY
72659: PUSH
72660: LD_INT 1
72662: ARRAY
72663: PPUSH
72664: LD_VAR 0 2
72668: PUSH
72669: LD_VAR 0 9
72673: ARRAY
72674: PUSH
72675: LD_INT 2
72677: ARRAY
72678: PPUSH
72679: CALL_OW 114
72683: GO 72699
// SetTag ( i , tag ) ;
72685: LD_VAR 0 4
72689: PPUSH
72690: LD_VAR 0 9
72694: PPUSH
72695: CALL_OW 109
// end else
72699: GO 72772
// if enemy then
72701: LD_VAR 0 5
72705: IFFALSE 72772
// begin if GetWeapon ( i ) = ru_time_lapser then
72707: LD_VAR 0 4
72711: PPUSH
72712: CALL_OW 264
72716: PUSH
72717: LD_INT 49
72719: EQUAL
72720: IFFALSE 72748
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72722: LD_VAR 0 4
72726: PPUSH
72727: LD_VAR 0 5
72731: PPUSH
72732: LD_VAR 0 4
72736: PPUSH
72737: CALL_OW 74
72741: PPUSH
72742: CALL_OW 112
72746: GO 72772
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72748: LD_VAR 0 4
72752: PPUSH
72753: LD_VAR 0 5
72757: PPUSH
72758: LD_VAR 0 4
72762: PPUSH
72763: CALL_OW 74
72767: PPUSH
72768: CALL 73847 0 2
// end ; end ;
72772: GO 72348
72774: POP
72775: POP
// end ;
72776: LD_VAR 0 3
72780: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72781: LD_INT 0
72783: PPUSH
72784: PPUSH
72785: PPUSH
// if not unit or IsInUnit ( unit ) then
72786: LD_VAR 0 1
72790: NOT
72791: PUSH
72792: LD_VAR 0 1
72796: PPUSH
72797: CALL_OW 310
72801: OR
72802: IFFALSE 72806
// exit ;
72804: GO 72897
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72806: LD_ADDR_VAR 0 4
72810: PUSH
72811: LD_VAR 0 1
72815: PPUSH
72816: CALL_OW 250
72820: PPUSH
72821: LD_VAR 0 2
72825: PPUSH
72826: LD_INT 1
72828: PPUSH
72829: CALL_OW 272
72833: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72834: LD_ADDR_VAR 0 5
72838: PUSH
72839: LD_VAR 0 1
72843: PPUSH
72844: CALL_OW 251
72848: PPUSH
72849: LD_VAR 0 2
72853: PPUSH
72854: LD_INT 1
72856: PPUSH
72857: CALL_OW 273
72861: ST_TO_ADDR
// if ValidHex ( x , y ) then
72862: LD_VAR 0 4
72866: PPUSH
72867: LD_VAR 0 5
72871: PPUSH
72872: CALL_OW 488
72876: IFFALSE 72897
// ComTurnXY ( unit , x , y ) ;
72878: LD_VAR 0 1
72882: PPUSH
72883: LD_VAR 0 4
72887: PPUSH
72888: LD_VAR 0 5
72892: PPUSH
72893: CALL_OW 118
// end ;
72897: LD_VAR 0 3
72901: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72902: LD_INT 0
72904: PPUSH
72905: PPUSH
// result := false ;
72906: LD_ADDR_VAR 0 3
72910: PUSH
72911: LD_INT 0
72913: ST_TO_ADDR
// if not units then
72914: LD_VAR 0 2
72918: NOT
72919: IFFALSE 72923
// exit ;
72921: GO 72968
// for i in units do
72923: LD_ADDR_VAR 0 4
72927: PUSH
72928: LD_VAR 0 2
72932: PUSH
72933: FOR_IN
72934: IFFALSE 72966
// if See ( side , i ) then
72936: LD_VAR 0 1
72940: PPUSH
72941: LD_VAR 0 4
72945: PPUSH
72946: CALL_OW 292
72950: IFFALSE 72964
// begin result := true ;
72952: LD_ADDR_VAR 0 3
72956: PUSH
72957: LD_INT 1
72959: ST_TO_ADDR
// exit ;
72960: POP
72961: POP
72962: GO 72968
// end ;
72964: GO 72933
72966: POP
72967: POP
// end ;
72968: LD_VAR 0 3
72972: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72973: LD_INT 0
72975: PPUSH
72976: PPUSH
72977: PPUSH
72978: PPUSH
// if not unit or not points then
72979: LD_VAR 0 1
72983: NOT
72984: PUSH
72985: LD_VAR 0 2
72989: NOT
72990: OR
72991: IFFALSE 72995
// exit ;
72993: GO 73085
// dist := 99999 ;
72995: LD_ADDR_VAR 0 5
72999: PUSH
73000: LD_INT 99999
73002: ST_TO_ADDR
// for i in points do
73003: LD_ADDR_VAR 0 4
73007: PUSH
73008: LD_VAR 0 2
73012: PUSH
73013: FOR_IN
73014: IFFALSE 73083
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73016: LD_ADDR_VAR 0 6
73020: PUSH
73021: LD_VAR 0 1
73025: PPUSH
73026: LD_VAR 0 4
73030: PUSH
73031: LD_INT 1
73033: ARRAY
73034: PPUSH
73035: LD_VAR 0 4
73039: PUSH
73040: LD_INT 2
73042: ARRAY
73043: PPUSH
73044: CALL_OW 297
73048: ST_TO_ADDR
// if tmpDist < dist then
73049: LD_VAR 0 6
73053: PUSH
73054: LD_VAR 0 5
73058: LESS
73059: IFFALSE 73081
// begin result := i ;
73061: LD_ADDR_VAR 0 3
73065: PUSH
73066: LD_VAR 0 4
73070: ST_TO_ADDR
// dist := tmpDist ;
73071: LD_ADDR_VAR 0 5
73075: PUSH
73076: LD_VAR 0 6
73080: ST_TO_ADDR
// end ; end ;
73081: GO 73013
73083: POP
73084: POP
// end ;
73085: LD_VAR 0 3
73089: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73090: LD_INT 0
73092: PPUSH
// uc_side := side ;
73093: LD_ADDR_OWVAR 20
73097: PUSH
73098: LD_VAR 0 1
73102: ST_TO_ADDR
// uc_nation := 3 ;
73103: LD_ADDR_OWVAR 21
73107: PUSH
73108: LD_INT 3
73110: ST_TO_ADDR
// vc_chassis := 25 ;
73111: LD_ADDR_OWVAR 37
73115: PUSH
73116: LD_INT 25
73118: ST_TO_ADDR
// vc_engine := engine_siberite ;
73119: LD_ADDR_OWVAR 39
73123: PUSH
73124: LD_INT 3
73126: ST_TO_ADDR
// vc_control := control_computer ;
73127: LD_ADDR_OWVAR 38
73131: PUSH
73132: LD_INT 3
73134: ST_TO_ADDR
// vc_weapon := 59 ;
73135: LD_ADDR_OWVAR 40
73139: PUSH
73140: LD_INT 59
73142: ST_TO_ADDR
// result := CreateVehicle ;
73143: LD_ADDR_VAR 0 5
73147: PUSH
73148: CALL_OW 45
73152: ST_TO_ADDR
// SetDir ( result , d ) ;
73153: LD_VAR 0 5
73157: PPUSH
73158: LD_VAR 0 4
73162: PPUSH
73163: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73167: LD_VAR 0 5
73171: PPUSH
73172: LD_VAR 0 2
73176: PPUSH
73177: LD_VAR 0 3
73181: PPUSH
73182: LD_INT 0
73184: PPUSH
73185: CALL_OW 48
// end ;
73189: LD_VAR 0 5
73193: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73194: LD_INT 0
73196: PPUSH
73197: PPUSH
73198: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73199: LD_ADDR_VAR 0 2
73203: PUSH
73204: LD_INT 0
73206: PUSH
73207: LD_INT 0
73209: PUSH
73210: LD_INT 0
73212: PUSH
73213: LD_INT 0
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73222: LD_VAR 0 1
73226: NOT
73227: PUSH
73228: LD_VAR 0 1
73232: PPUSH
73233: CALL_OW 264
73237: PUSH
73238: LD_INT 12
73240: PUSH
73241: LD_INT 51
73243: PUSH
73244: LD_INT 32
73246: PUSH
73247: LD_INT 89
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: IN
73256: NOT
73257: OR
73258: IFFALSE 73262
// exit ;
73260: GO 73360
// for i := 1 to 3 do
73262: LD_ADDR_VAR 0 3
73266: PUSH
73267: DOUBLE
73268: LD_INT 1
73270: DEC
73271: ST_TO_ADDR
73272: LD_INT 3
73274: PUSH
73275: FOR_TO
73276: IFFALSE 73358
// begin tmp := GetCargo ( cargo , i ) ;
73278: LD_ADDR_VAR 0 4
73282: PUSH
73283: LD_VAR 0 1
73287: PPUSH
73288: LD_VAR 0 3
73292: PPUSH
73293: CALL_OW 289
73297: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73298: LD_ADDR_VAR 0 2
73302: PUSH
73303: LD_VAR 0 2
73307: PPUSH
73308: LD_VAR 0 3
73312: PPUSH
73313: LD_VAR 0 4
73317: PPUSH
73318: CALL_OW 1
73322: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73323: LD_ADDR_VAR 0 2
73327: PUSH
73328: LD_VAR 0 2
73332: PPUSH
73333: LD_INT 4
73335: PPUSH
73336: LD_VAR 0 2
73340: PUSH
73341: LD_INT 4
73343: ARRAY
73344: PUSH
73345: LD_VAR 0 4
73349: PLUS
73350: PPUSH
73351: CALL_OW 1
73355: ST_TO_ADDR
// end ;
73356: GO 73275
73358: POP
73359: POP
// end ;
73360: LD_VAR 0 2
73364: RET
// export function Length ( array ) ; begin
73365: LD_INT 0
73367: PPUSH
// result := array + 0 ;
73368: LD_ADDR_VAR 0 2
73372: PUSH
73373: LD_VAR 0 1
73377: PUSH
73378: LD_INT 0
73380: PLUS
73381: ST_TO_ADDR
// end ;
73382: LD_VAR 0 2
73386: RET
// export function PrepareArray ( array ) ; begin
73387: LD_INT 0
73389: PPUSH
// result := array diff 0 ;
73390: LD_ADDR_VAR 0 2
73394: PUSH
73395: LD_VAR 0 1
73399: PUSH
73400: LD_INT 0
73402: DIFF
73403: ST_TO_ADDR
// if not result [ 1 ] then
73404: LD_VAR 0 2
73408: PUSH
73409: LD_INT 1
73411: ARRAY
73412: NOT
73413: IFFALSE 73433
// result := Delete ( result , 1 ) ;
73415: LD_ADDR_VAR 0 2
73419: PUSH
73420: LD_VAR 0 2
73424: PPUSH
73425: LD_INT 1
73427: PPUSH
73428: CALL_OW 3
73432: ST_TO_ADDR
// end ;
73433: LD_VAR 0 2
73437: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73438: LD_INT 0
73440: PPUSH
73441: PPUSH
73442: PPUSH
73443: PPUSH
// sibRocketRange := 25 ;
73444: LD_ADDR_VAR 0 6
73448: PUSH
73449: LD_INT 25
73451: ST_TO_ADDR
// result := false ;
73452: LD_ADDR_VAR 0 4
73456: PUSH
73457: LD_INT 0
73459: ST_TO_ADDR
// for i := 0 to 5 do
73460: LD_ADDR_VAR 0 5
73464: PUSH
73465: DOUBLE
73466: LD_INT 0
73468: DEC
73469: ST_TO_ADDR
73470: LD_INT 5
73472: PUSH
73473: FOR_TO
73474: IFFALSE 73541
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73476: LD_VAR 0 1
73480: PPUSH
73481: LD_VAR 0 5
73485: PPUSH
73486: LD_VAR 0 6
73490: PPUSH
73491: CALL_OW 272
73495: PPUSH
73496: LD_VAR 0 2
73500: PPUSH
73501: LD_VAR 0 5
73505: PPUSH
73506: LD_VAR 0 6
73510: PPUSH
73511: CALL_OW 273
73515: PPUSH
73516: LD_VAR 0 3
73520: PPUSH
73521: CALL_OW 309
73525: IFFALSE 73539
// begin result := true ;
73527: LD_ADDR_VAR 0 4
73531: PUSH
73532: LD_INT 1
73534: ST_TO_ADDR
// exit ;
73535: POP
73536: POP
73537: GO 73543
// end ;
73539: GO 73473
73541: POP
73542: POP
// end ;
73543: LD_VAR 0 4
73547: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
73548: LD_INT 0
73550: PPUSH
73551: PPUSH
73552: PPUSH
// if btype = b_depot then
73553: LD_VAR 0 2
73557: PUSH
73558: LD_INT 0
73560: EQUAL
73561: IFFALSE 73573
// begin result := true ;
73563: LD_ADDR_VAR 0 3
73567: PUSH
73568: LD_INT 1
73570: ST_TO_ADDR
// exit ;
73571: GO 73689
// end ; pom := GetBase ( depot ) ;
73573: LD_ADDR_VAR 0 4
73577: PUSH
73578: LD_VAR 0 1
73582: PPUSH
73583: CALL_OW 274
73587: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
73588: LD_ADDR_VAR 0 5
73592: PUSH
73593: LD_VAR 0 2
73597: PPUSH
73598: LD_VAR 0 1
73602: PPUSH
73603: CALL_OW 248
73607: PPUSH
73608: CALL_OW 450
73612: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
73613: LD_ADDR_VAR 0 3
73617: PUSH
73618: LD_VAR 0 4
73622: PPUSH
73623: LD_INT 1
73625: PPUSH
73626: CALL_OW 275
73630: PUSH
73631: LD_VAR 0 5
73635: PUSH
73636: LD_INT 1
73638: ARRAY
73639: GREATEREQUAL
73640: PUSH
73641: LD_VAR 0 4
73645: PPUSH
73646: LD_INT 2
73648: PPUSH
73649: CALL_OW 275
73653: PUSH
73654: LD_VAR 0 5
73658: PUSH
73659: LD_INT 2
73661: ARRAY
73662: GREATEREQUAL
73663: AND
73664: PUSH
73665: LD_VAR 0 4
73669: PPUSH
73670: LD_INT 3
73672: PPUSH
73673: CALL_OW 275
73677: PUSH
73678: LD_VAR 0 5
73682: PUSH
73683: LD_INT 3
73685: ARRAY
73686: GREATEREQUAL
73687: AND
73688: ST_TO_ADDR
// end ;
73689: LD_VAR 0 3
73693: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73694: LD_INT 0
73696: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73697: LD_VAR 0 1
73701: PPUSH
73702: LD_VAR 0 2
73706: PPUSH
73707: LD_INT 0
73709: PPUSH
73710: LD_INT 0
73712: PPUSH
73713: LD_INT 1
73715: PPUSH
73716: LD_INT 0
73718: PPUSH
73719: CALL_OW 587
// end ;
73723: LD_VAR 0 3
73727: RET
// export function CenterOnNow ( unit ) ; begin
73728: LD_INT 0
73730: PPUSH
// result := IsInUnit ( unit ) ;
73731: LD_ADDR_VAR 0 2
73735: PUSH
73736: LD_VAR 0 1
73740: PPUSH
73741: CALL_OW 310
73745: ST_TO_ADDR
// if not result then
73746: LD_VAR 0 2
73750: NOT
73751: IFFALSE 73763
// result := unit ;
73753: LD_ADDR_VAR 0 2
73757: PUSH
73758: LD_VAR 0 1
73762: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73763: LD_VAR 0 1
73767: PPUSH
73768: CALL_OW 87
// end ;
73772: LD_VAR 0 2
73776: RET
// export function ComMoveHex ( unit , hex ) ; begin
73777: LD_INT 0
73779: PPUSH
// if not hex then
73780: LD_VAR 0 2
73784: NOT
73785: IFFALSE 73789
// exit ;
73787: GO 73842
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73789: LD_VAR 0 2
73793: PUSH
73794: LD_INT 1
73796: ARRAY
73797: PPUSH
73798: LD_VAR 0 2
73802: PUSH
73803: LD_INT 2
73805: ARRAY
73806: PPUSH
73807: CALL_OW 428
73811: IFFALSE 73815
// exit ;
73813: GO 73842
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73815: LD_VAR 0 1
73819: PPUSH
73820: LD_VAR 0 2
73824: PUSH
73825: LD_INT 1
73827: ARRAY
73828: PPUSH
73829: LD_VAR 0 2
73833: PUSH
73834: LD_INT 2
73836: ARRAY
73837: PPUSH
73838: CALL_OW 111
// end ;
73842: LD_VAR 0 3
73846: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73847: LD_INT 0
73849: PPUSH
73850: PPUSH
73851: PPUSH
// if not unit or not enemy then
73852: LD_VAR 0 1
73856: NOT
73857: PUSH
73858: LD_VAR 0 2
73862: NOT
73863: OR
73864: IFFALSE 73868
// exit ;
73866: GO 73992
// x := GetX ( enemy ) ;
73868: LD_ADDR_VAR 0 4
73872: PUSH
73873: LD_VAR 0 2
73877: PPUSH
73878: CALL_OW 250
73882: ST_TO_ADDR
// y := GetY ( enemy ) ;
73883: LD_ADDR_VAR 0 5
73887: PUSH
73888: LD_VAR 0 2
73892: PPUSH
73893: CALL_OW 251
73897: ST_TO_ADDR
// if ValidHex ( x , y ) then
73898: LD_VAR 0 4
73902: PPUSH
73903: LD_VAR 0 5
73907: PPUSH
73908: CALL_OW 488
73912: IFFALSE 73992
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73914: LD_VAR 0 2
73918: PPUSH
73919: CALL_OW 247
73923: PUSH
73924: LD_INT 3
73926: PUSH
73927: LD_INT 2
73929: PUSH
73930: EMPTY
73931: LIST
73932: LIST
73933: IN
73934: PUSH
73935: LD_VAR 0 1
73939: PPUSH
73940: CALL_OW 255
73944: PPUSH
73945: LD_VAR 0 2
73949: PPUSH
73950: CALL_OW 292
73954: OR
73955: IFFALSE 73973
// ComAttackUnit ( unit , enemy ) else
73957: LD_VAR 0 1
73961: PPUSH
73962: LD_VAR 0 2
73966: PPUSH
73967: CALL_OW 115
73971: GO 73992
// ComAgressiveMove ( unit , x , y ) ;
73973: LD_VAR 0 1
73977: PPUSH
73978: LD_VAR 0 4
73982: PPUSH
73983: LD_VAR 0 5
73987: PPUSH
73988: CALL_OW 114
// end ;
73992: LD_VAR 0 3
73996: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73997: LD_INT 0
73999: PPUSH
74000: PPUSH
74001: PPUSH
// list := AreaToList ( area , 0 ) ;
74002: LD_ADDR_VAR 0 5
74006: PUSH
74007: LD_VAR 0 1
74011: PPUSH
74012: LD_INT 0
74014: PPUSH
74015: CALL_OW 517
74019: ST_TO_ADDR
// if not list then
74020: LD_VAR 0 5
74024: NOT
74025: IFFALSE 74029
// exit ;
74027: GO 74159
// if all then
74029: LD_VAR 0 2
74033: IFFALSE 74121
// begin for i := 1 to list [ 1 ] do
74035: LD_ADDR_VAR 0 4
74039: PUSH
74040: DOUBLE
74041: LD_INT 1
74043: DEC
74044: ST_TO_ADDR
74045: LD_VAR 0 5
74049: PUSH
74050: LD_INT 1
74052: ARRAY
74053: PUSH
74054: FOR_TO
74055: IFFALSE 74117
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74057: LD_ADDR_VAR 0 3
74061: PUSH
74062: LD_VAR 0 3
74066: PPUSH
74067: LD_VAR 0 3
74071: PUSH
74072: LD_INT 1
74074: PLUS
74075: PPUSH
74076: LD_VAR 0 5
74080: PUSH
74081: LD_INT 1
74083: ARRAY
74084: PUSH
74085: LD_VAR 0 4
74089: ARRAY
74090: PUSH
74091: LD_VAR 0 5
74095: PUSH
74096: LD_INT 2
74098: ARRAY
74099: PUSH
74100: LD_VAR 0 4
74104: ARRAY
74105: PUSH
74106: EMPTY
74107: LIST
74108: LIST
74109: PPUSH
74110: CALL_OW 1
74114: ST_TO_ADDR
74115: GO 74054
74117: POP
74118: POP
// exit ;
74119: GO 74159
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
74121: LD_ADDR_VAR 0 3
74125: PUSH
74126: LD_VAR 0 5
74130: PUSH
74131: LD_INT 1
74133: ARRAY
74134: PUSH
74135: LD_INT 1
74137: ARRAY
74138: PUSH
74139: LD_VAR 0 5
74143: PUSH
74144: LD_INT 2
74146: ARRAY
74147: PUSH
74148: LD_INT 1
74150: ARRAY
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: EMPTY
74157: LIST
74158: ST_TO_ADDR
// end ;
74159: LD_VAR 0 3
74163: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
74164: LD_INT 0
74166: PPUSH
74167: PPUSH
// list := AreaToList ( area , 0 ) ;
74168: LD_ADDR_VAR 0 4
74172: PUSH
74173: LD_VAR 0 1
74177: PPUSH
74178: LD_INT 0
74180: PPUSH
74181: CALL_OW 517
74185: ST_TO_ADDR
// if not list then
74186: LD_VAR 0 4
74190: NOT
74191: IFFALSE 74195
// exit ;
74193: GO 74236
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
74195: LD_ADDR_VAR 0 3
74199: PUSH
74200: LD_VAR 0 4
74204: PUSH
74205: LD_INT 1
74207: ARRAY
74208: PUSH
74209: LD_INT 1
74211: ARRAY
74212: PUSH
74213: LD_VAR 0 4
74217: PUSH
74218: LD_INT 2
74220: ARRAY
74221: PUSH
74222: LD_INT 1
74224: ARRAY
74225: PUSH
74226: LD_VAR 0 2
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: LIST
74235: ST_TO_ADDR
// end ;
74236: LD_VAR 0 3
74240: RET
// export function First ( array ) ; begin
74241: LD_INT 0
74243: PPUSH
// if not array then
74244: LD_VAR 0 1
74248: NOT
74249: IFFALSE 74253
// exit ;
74251: GO 74267
// result := array [ 1 ] ;
74253: LD_ADDR_VAR 0 2
74257: PUSH
74258: LD_VAR 0 1
74262: PUSH
74263: LD_INT 1
74265: ARRAY
74266: ST_TO_ADDR
// end ;
74267: LD_VAR 0 2
74271: RET
// export function Last ( array ) ; begin
74272: LD_INT 0
74274: PPUSH
// if not array then
74275: LD_VAR 0 1
74279: NOT
74280: IFFALSE 74284
// exit ;
74282: GO 74300
// result := array [ array ] ;
74284: LD_ADDR_VAR 0 2
74288: PUSH
74289: LD_VAR 0 1
74293: PUSH
74294: LD_VAR 0 1
74298: ARRAY
74299: ST_TO_ADDR
// end ;
74300: LD_VAR 0 2
74304: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
74305: LD_INT 0
74307: PPUSH
74308: PPUSH
// result := [ ] ;
74309: LD_ADDR_VAR 0 5
74313: PUSH
74314: EMPTY
74315: ST_TO_ADDR
// if not array then
74316: LD_VAR 0 1
74320: NOT
74321: IFFALSE 74325
// exit ;
74323: GO 74437
// for i := 1 to array do
74325: LD_ADDR_VAR 0 6
74329: PUSH
74330: DOUBLE
74331: LD_INT 1
74333: DEC
74334: ST_TO_ADDR
74335: LD_VAR 0 1
74339: PUSH
74340: FOR_TO
74341: IFFALSE 74435
// if array [ i ] [ index ] = value then
74343: LD_VAR 0 1
74347: PUSH
74348: LD_VAR 0 6
74352: ARRAY
74353: PUSH
74354: LD_VAR 0 2
74358: ARRAY
74359: PUSH
74360: LD_VAR 0 3
74364: EQUAL
74365: IFFALSE 74433
// begin if indexColumn then
74367: LD_VAR 0 4
74371: IFFALSE 74407
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74373: LD_ADDR_VAR 0 5
74377: PUSH
74378: LD_VAR 0 5
74382: PPUSH
74383: LD_VAR 0 1
74387: PUSH
74388: LD_VAR 0 6
74392: ARRAY
74393: PUSH
74394: LD_VAR 0 4
74398: ARRAY
74399: PPUSH
74400: CALL 69625 0 2
74404: ST_TO_ADDR
74405: GO 74433
// result := Join ( result , array [ i ] ) ;
74407: LD_ADDR_VAR 0 5
74411: PUSH
74412: LD_VAR 0 5
74416: PPUSH
74417: LD_VAR 0 1
74421: PUSH
74422: LD_VAR 0 6
74426: ARRAY
74427: PPUSH
74428: CALL 69625 0 2
74432: ST_TO_ADDR
// end ;
74433: GO 74340
74435: POP
74436: POP
// end ;
74437: LD_VAR 0 5
74441: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74442: LD_INT 0
74444: PPUSH
// if not vehicles or not parkingPoint then
74445: LD_VAR 0 1
74449: NOT
74450: PUSH
74451: LD_VAR 0 2
74455: NOT
74456: OR
74457: IFFALSE 74461
// exit ;
74459: GO 74559
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74461: LD_ADDR_VAR 0 1
74465: PUSH
74466: LD_VAR 0 1
74470: PPUSH
74471: LD_INT 50
74473: PUSH
74474: EMPTY
74475: LIST
74476: PUSH
74477: LD_INT 3
74479: PUSH
74480: LD_INT 92
74482: PUSH
74483: LD_VAR 0 2
74487: PUSH
74488: LD_INT 1
74490: ARRAY
74491: PUSH
74492: LD_VAR 0 2
74496: PUSH
74497: LD_INT 2
74499: ARRAY
74500: PUSH
74501: LD_INT 8
74503: PUSH
74504: EMPTY
74505: LIST
74506: LIST
74507: LIST
74508: LIST
74509: PUSH
74510: EMPTY
74511: LIST
74512: LIST
74513: PUSH
74514: EMPTY
74515: LIST
74516: LIST
74517: PPUSH
74518: CALL_OW 72
74522: ST_TO_ADDR
// if not vehicles then
74523: LD_VAR 0 1
74527: NOT
74528: IFFALSE 74532
// exit ;
74530: GO 74559
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
74532: LD_VAR 0 1
74536: PPUSH
74537: LD_VAR 0 2
74541: PUSH
74542: LD_INT 1
74544: ARRAY
74545: PPUSH
74546: LD_VAR 0 2
74550: PUSH
74551: LD_INT 2
74553: ARRAY
74554: PPUSH
74555: CALL_OW 111
// end ;
74559: LD_VAR 0 3
74563: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
74564: LD_INT 0
74566: PPUSH
74567: PPUSH
74568: PPUSH
// if not side or not area then
74569: LD_VAR 0 1
74573: NOT
74574: PUSH
74575: LD_VAR 0 2
74579: NOT
74580: OR
74581: IFFALSE 74585
// exit ;
74583: GO 74704
// tmp := AreaToList ( area , 0 ) ;
74585: LD_ADDR_VAR 0 5
74589: PUSH
74590: LD_VAR 0 2
74594: PPUSH
74595: LD_INT 0
74597: PPUSH
74598: CALL_OW 517
74602: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
74603: LD_ADDR_VAR 0 4
74607: PUSH
74608: DOUBLE
74609: LD_INT 1
74611: DEC
74612: ST_TO_ADDR
74613: LD_VAR 0 5
74617: PUSH
74618: LD_INT 1
74620: ARRAY
74621: PUSH
74622: FOR_TO
74623: IFFALSE 74702
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
74625: LD_VAR 0 5
74629: PUSH
74630: LD_INT 1
74632: ARRAY
74633: PUSH
74634: LD_VAR 0 4
74638: ARRAY
74639: PPUSH
74640: LD_VAR 0 5
74644: PUSH
74645: LD_INT 2
74647: ARRAY
74648: PUSH
74649: LD_VAR 0 4
74653: ARRAY
74654: PPUSH
74655: CALL_OW 351
74659: IFFALSE 74700
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
74661: LD_VAR 0 5
74665: PUSH
74666: LD_INT 1
74668: ARRAY
74669: PUSH
74670: LD_VAR 0 4
74674: ARRAY
74675: PPUSH
74676: LD_VAR 0 5
74680: PUSH
74681: LD_INT 2
74683: ARRAY
74684: PUSH
74685: LD_VAR 0 4
74689: ARRAY
74690: PPUSH
74691: LD_VAR 0 1
74695: PPUSH
74696: CALL_OW 244
// end ;
74700: GO 74622
74702: POP
74703: POP
// end ;
74704: LD_VAR 0 3
74708: RET
