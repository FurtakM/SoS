// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2972 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3318 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 10 10$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 21000
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 51
 852: PUSH
 853: LD_INT 52
 855: PUSH
 856: LD_INT 53
 858: PUSH
 859: LD_INT 54
 861: PUSH
 862: LD_INT 55
 864: PUSH
 865: LD_INT 56
 867: PUSH
 868: LD_INT 57
 870: PUSH
 871: LD_INT 58
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 70
 891: PUSH
 892: LD_INT 71
 894: PUSH
 895: LD_INT 72
 897: PUSH
 898: LD_INT 73
 900: PUSH
 901: LD_INT 68
 903: PUSH
 904: LD_INT 69
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 49
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 33
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 35
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 32
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 33
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 35
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 34
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 31
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 60
1364: PUSH
1365: LD_INT 61
1367: PUSH
1368: LD_INT 62
1370: PUSH
1371: LD_INT 63
1373: PUSH
1374: LD_INT 64
1376: PUSH
1377: LD_INT 65
1379: PUSH
1380: LD_INT 66
1382: PUSH
1383: LD_INT 67
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 1
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 58969 0 2
1411: PUSH
1412: LD_INT 2
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 58969 0 2
1422: PUSH
1423: LD_INT 3
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 58969 0 2
1433: PUSH
1434: LD_INT 4
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 58969 0 2
1444: PUSH
1445: LD_INT 5
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL 58969 0 2
1455: PUSH
1456: LD_INT 6
1458: PPUSH
1459: LD_INT 5
1461: PPUSH
1462: CALL 58969 0 2
1466: PUSH
1467: LD_INT 7
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL 58969 0 2
1477: PUSH
1478: LD_INT 8
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL 58969 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 18815 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 9
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 58802 0 2
1667: PUSH
1668: LD_INT 10
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 58802 0 2
1680: PUSH
1681: LD_INT 11
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 58802 0 2
1693: PUSH
1694: LD_INT 12
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 58802 0 2
1706: PUSH
1707: LD_INT 13
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 58802 0 2
1719: PUSH
1720: LD_INT 14
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 58802 0 2
1732: PUSH
1733: LD_INT 15
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 58802 0 2
1745: PUSH
1746: LD_INT 16
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 58802 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 17
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 58802 0 2
1810: PUSH
1811: LD_INT 18
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 58802 0 2
1823: PUSH
1824: LD_INT 19
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 58802 0 2
1836: PUSH
1837: LD_INT 20
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 58802 0 2
1849: PUSH
1850: LD_INT 21
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 58802 0 2
1862: PUSH
1863: LD_INT 22
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 58802 0 2
1875: PUSH
1876: LD_INT 23
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 58802 0 2
1888: PUSH
1889: LD_INT 24
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 58802 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 25
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 58969 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 26
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 58969 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 41
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 58969 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 27
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: CALL 58969 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 28
2017: PPUSH
2018: LD_INT 4
2020: PPUSH
2021: CALL 58969 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 42
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL 58969 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 29
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 58969 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 30
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL 58969 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 43
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 58969 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 31
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 58969 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 32
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL 58969 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 44
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 58969 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 33
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL 58969 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 34
2167: PPUSH
2168: LD_INT 2
2170: PPUSH
2171: CALL 58969 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 45
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: CALL 58969 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 35
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL 58969 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 36
2217: PPUSH
2218: LD_INT 4
2220: PPUSH
2221: CALL 58969 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 46
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 58969 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 37
2252: PPUSH
2253: LD_INT 3
2255: PPUSH
2256: CALL 58969 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 38
2267: PPUSH
2268: LD_INT 4
2270: PPUSH
2271: CALL 58969 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 47
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: CALL 58969 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 39
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL 58969 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 40
2317: PPUSH
2318: LD_INT 3
2320: PPUSH
2321: CALL 58969 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 48
2332: PPUSH
2333: LD_INT 4
2335: PPUSH
2336: CALL 58969 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2885
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 70
2569: PUSH
2570: LD_INT 71
2572: PUSH
2573: LD_INT 72
2575: PUSH
2576: LD_INT 73
2578: PUSH
2579: LD_INT 68
2581: PUSH
2582: LD_INT 69
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 51
2600: PUSH
2601: LD_INT 52
2603: PUSH
2604: LD_INT 53
2606: PUSH
2607: LD_INT 54
2609: PUSH
2610: LD_INT 55
2612: PUSH
2613: LD_INT 56
2615: PUSH
2616: LD_INT 57
2618: PUSH
2619: LD_INT 58
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 55785 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// if GetResourceArea ( center3 , mat_cans ) < 15 then
2745: LD_INT 74
2747: PPUSH
2748: LD_INT 1
2750: PPUSH
2751: CALL_OW 287
2755: PUSH
2756: LD_INT 15
2758: LESS
2759: IFFALSE 2791
// begin CreateCratesArea ( x , center3 , true ) ;
2761: LD_VAR 0 2
2765: PPUSH
2766: LD_INT 74
2768: PPUSH
2769: LD_INT 1
2771: PPUSH
2772: CALL_OW 55
// CreateCratesArea ( x , center3 , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_INT 74
2783: PPUSH
2784: LD_INT 1
2786: PPUSH
2787: CALL_OW 55
// end ; for i in areas do
2791: LD_ADDR_VAR 0 1
2795: PUSH
2796: LD_VAR 0 4
2800: PUSH
2801: FOR_IN
2802: IFFALSE 2841
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2804: LD_VAR 0 1
2808: PPUSH
2809: LD_INT 1
2811: PPUSH
2812: CALL_OW 287
2816: PUSH
2817: LD_INT 20
2819: LESS
2820: IFFALSE 2839
// begin CreateCratesArea ( x , i , true ) ;
2822: LD_VAR 0 2
2826: PPUSH
2827: LD_VAR 0 1
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: CALL_OW 55
// end ; end ;
2839: GO 2801
2841: POP
2842: POP
// time := time + delayTime ;
2843: LD_ADDR_VAR 0 5
2847: PUSH
2848: LD_VAR 0 5
2852: PUSH
2853: LD_VAR 0 7
2857: PLUS
2858: ST_TO_ADDR
// if time > maxTime then
2859: LD_VAR 0 5
2863: PUSH
2864: LD_VAR 0 8
2868: GREATER
2869: IFFALSE 2881
// time := normalTime ;
2871: LD_ADDR_VAR 0 5
2875: PUSH
2876: LD_VAR 0 6
2880: ST_TO_ADDR
// until false ;
2881: LD_INT 0
2883: IFFALSE 2703
// end ; end_of_file
2885: PPOPN 8
2887: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2888: LD_VAR 0 1
2892: PPUSH
2893: CALL 11265 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2897: LD_VAR 0 1
2901: PPUSH
2902: CALL 7910 0 1
// end ;
2906: PPOPN 1
2908: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL 11282 0 1
// end ;
2918: PPOPN 1
2920: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2921: LD_VAR 0 1
2925: PPUSH
2926: CALL 8575 0 1
2930: PPOPN 1
2932: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2933: LD_VAR 0 1
2937: PPUSH
2938: LD_VAR 0 2
2942: PPUSH
2943: CALL 11323 0 2
2947: PPOPN 2
2949: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2950: LD_VAR 0 1
2954: PPUSH
2955: LD_VAR 0 2
2959: PPUSH
2960: LD_VAR 0 3
2964: PPUSH
2965: CALL 8628 0 3
2969: PPOPN 3
2971: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2972: LD_INT 0
2974: PPUSH
2975: PPUSH
// disable ( mpActive ) ;
2976: LD_INT 100
2978: DISABLE_MARKED
// disable ( mpWin ) ;
2979: LD_INT 101
2981: DISABLE_MARKED
// disable ( mpLose ) ;
2982: LD_INT 102
2984: DISABLE_MARKED
// mpGameType := 0 ;
2985: LD_ADDR_EXP 1
2989: PUSH
2990: LD_INT 0
2992: ST_TO_ADDR
// mpGameSettings := [ ] ;
2993: LD_ADDR_EXP 4
2997: PUSH
2998: EMPTY
2999: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
3000: LD_ADDR_EXP 2
3004: PUSH
3005: EMPTY
3006: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
3007: LD_ADDR_EXP 3
3011: PUSH
3012: EMPTY
3013: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
3014: LD_ADDR_EXP 27
3018: PUSH
3019: LD_INT 2
3021: PUSH
3022: LD_INT 2
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3029: LD_ADDR_EXP 10
3033: PUSH
3034: EMPTY
3035: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3036: LD_ADDR_EXP 11
3040: PUSH
3041: EMPTY
3042: ST_TO_ADDR
// mpDepots := [ ] ;
3043: LD_ADDR_EXP 12
3047: PUSH
3048: EMPTY
3049: ST_TO_ADDR
// mpBuildings := [ ] ;
3050: LD_ADDR_EXP 15
3054: PUSH
3055: EMPTY
3056: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3057: LD_ADDR_EXP 16
3061: PUSH
3062: EMPTY
3063: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3064: LD_ADDR_EXP 17
3068: PUSH
3069: EMPTY
3070: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3071: LD_ADDR_EXP 18
3075: PUSH
3076: EMPTY
3077: ST_TO_ADDR
// mpStartingResources := [ ] ;
3078: LD_ADDR_EXP 13
3082: PUSH
3083: EMPTY
3084: ST_TO_ADDR
// mpStartPos := [ ] ;
3085: LD_ADDR_EXP 19
3089: PUSH
3090: EMPTY
3091: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3092: LD_ADDR_EXP 20
3096: PUSH
3097: LD_INT 1
3099: NEG
3100: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3101: LD_ADDR_EXP 21
3105: PUSH
3106: EMPTY
3107: ST_TO_ADDR
// mpApemans := [ ] ;
3108: LD_ADDR_EXP 28
3112: PUSH
3113: EMPTY
3114: ST_TO_ADDR
// mpApemansArea := [ ] ;
3115: LD_ADDR_EXP 29
3119: PUSH
3120: EMPTY
3121: ST_TO_ADDR
// mpRespawn := [ ] ;
3122: LD_ADDR_EXP 31
3126: PUSH
3127: EMPTY
3128: ST_TO_ADDR
// mpKingArea := 0 ;
3129: LD_ADDR_EXP 32
3133: PUSH
3134: LD_INT 0
3136: ST_TO_ADDR
// mpPoints := [ ] ;
3137: LD_ADDR_EXP 33
3141: PUSH
3142: EMPTY
3143: ST_TO_ADDR
// mpVehicles := 0 ;
3144: LD_ADDR_EXP 34
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// mpShipments := 0 ;
3152: LD_ADDR_EXP 25
3156: PUSH
3157: LD_INT 0
3159: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3160: LD_ADDR_EXP 38
3164: PUSH
3165: EMPTY
3166: PUSH
3167: EMPTY
3168: PUSH
3169: EMPTY
3170: PUSH
3171: EMPTY
3172: PUSH
3173: EMPTY
3174: PUSH
3175: EMPTY
3176: PUSH
3177: EMPTY
3178: PUSH
3179: EMPTY
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3191: LD_ADDR_EXP 30
3195: PUSH
3196: EMPTY
3197: PUSH
3198: EMPTY
3199: PUSH
3200: EMPTY
3201: PUSH
3202: EMPTY
3203: PUSH
3204: EMPTY
3205: PUSH
3206: EMPTY
3207: PUSH
3208: EMPTY
3209: PUSH
3210: EMPTY
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: ST_TO_ADDR
// mpEmissions := 0 ;
3222: LD_ADDR_EXP 35
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3230: LD_ADDR_EXP 23
3234: PUSH
3235: LD_INT 3
3237: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3238: LD_ADDR_EXP 22
3242: PUSH
3243: LD_INT 15
3245: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3246: LD_ADDR_EXP 36
3250: PUSH
3251: LD_INT 0
3253: ST_TO_ADDR
// mpGameActive := false ;
3254: LD_ADDR_EXP 37
3258: PUSH
3259: LD_INT 0
3261: ST_TO_ADDR
// mpBlockRespThread := false ;
3262: LD_ADDR_EXP 39
3266: PUSH
3267: LD_INT 0
3269: ST_TO_ADDR
// for i := 1 to 32 do
3270: LD_ADDR_VAR 0 2
3274: PUSH
3275: DOUBLE
3276: LD_INT 1
3278: DEC
3279: ST_TO_ADDR
3280: LD_INT 32
3282: PUSH
3283: FOR_TO
3284: IFFALSE 3311
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3286: LD_ADDR_EXP 4
3290: PUSH
3291: LD_EXP 4
3295: PPUSH
3296: LD_VAR 0 2
3300: PPUSH
3301: LD_INT 0
3303: PPUSH
3304: CALL_OW 1
3308: ST_TO_ADDR
3309: GO 3283
3311: POP
3312: POP
// end ;
3313: LD_VAR 0 1
3317: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3318: LD_INT 0
3320: PPUSH
3321: PPUSH
3322: PPUSH
3323: PPUSH
3324: PPUSH
3325: PPUSH
3326: PPUSH
3327: PPUSH
3328: PPUSH
3329: PPUSH
3330: PPUSH
3331: PPUSH
3332: PPUSH
3333: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3334: LD_ADDR_VAR 0 14
3338: PUSH
3339: LD_INT 1
3341: PUSH
3342: LD_INT 2
3344: PUSH
3345: LD_INT 3
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: LIST
3352: ST_TO_ADDR
// for i in gameTypes do
3353: LD_ADDR_VAR 0 2
3357: PUSH
3358: LD_VAR 0 14
3362: PUSH
3363: FOR_IN
3364: IFFALSE 3373
// disable ( i ) ;
3366: LD_VAR 0 2
3370: DISABLE_MARKED
3371: GO 3363
3373: POP
3374: POP
// if Multiplayer then
3375: LD_OWVAR 4
3379: IFFALSE 3563
// begin mpGameType := mp_game_type ;
3381: LD_ADDR_EXP 1
3385: PUSH
3386: LD_OWVAR 6
3390: ST_TO_ADDR
// your_side := mp_player_side ;
3391: LD_ADDR_OWVAR 2
3395: PUSH
3396: LD_OWVAR 7
3400: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3401: LD_ADDR_EXP 5
3405: PUSH
3406: LD_OWVAR 17
3410: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3411: LD_ADDR_EXP 6
3415: PUSH
3416: LD_OWVAR 15
3420: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3421: LD_ADDR_EXP 7
3425: PUSH
3426: LD_OWVAR 16
3430: ST_TO_ADDR
// mpTeams := mp_teams ;
3431: LD_ADDR_EXP 8
3435: PUSH
3436: LD_OWVAR 12
3440: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3441: LD_ADDR_VAR 0 2
3445: PUSH
3446: DOUBLE
3447: LD_INT 1
3449: DEC
3450: ST_TO_ADDR
3451: LD_EXP 2
3455: PPUSH
3456: CALL 18815 0 1
3460: PUSH
3461: FOR_TO
3462: IFFALSE 3538
// begin setting := mpGameSettingsKeys [ i ] ;
3464: LD_ADDR_VAR 0 12
3468: PUSH
3469: LD_EXP 2
3473: PUSH
3474: LD_VAR 0 2
3478: ARRAY
3479: ST_TO_ADDR
// if setting then
3480: LD_VAR 0 12
3484: IFFALSE 3536
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3486: LD_ADDR_EXP 4
3490: PUSH
3491: LD_EXP 4
3495: PPUSH
3496: LD_VAR 0 2
3500: PPUSH
3501: LD_EXP 3
3505: PUSH
3506: LD_VAR 0 2
3510: ARRAY
3511: PUSH
3512: LD_VAR 0 2
3516: PUSH
3517: LD_INT 1
3519: MINUS
3520: PPUSH
3521: CALL_OW 426
3525: PUSH
3526: LD_INT 1
3528: PLUS
3529: ARRAY
3530: PPUSH
3531: CALL_OW 1
3535: ST_TO_ADDR
// end ;
3536: GO 3461
3538: POP
3539: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3540: LD_ADDR_EXP 9
3544: PUSH
3545: LD_EXP 6
3549: PUSH
3550: LD_INT 0
3552: PUSH
3553: EMPTY
3554: LIST
3555: DIFF
3556: PUSH
3557: LD_INT 1
3559: GREATER
3560: ST_TO_ADDR
// end else
3561: GO 3563
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3563: LD_EXP 1
3567: PPUSH
3568: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
3572: LD_EXP 16
3576: PPUSH
3577: CALL 18815 0 1
3581: IFFALSE 3612
// begin for i in mpMarkedAreas do
3583: LD_ADDR_VAR 0 2
3587: PUSH
3588: LD_EXP 16
3592: PUSH
3593: FOR_IN
3594: IFFALSE 3610
// SetAreaMapShow ( i , 0 ) ;
3596: LD_VAR 0 2
3600: PPUSH
3601: LD_INT 0
3603: PPUSH
3604: CALL_OW 424
3608: GO 3593
3610: POP
3611: POP
// end ; for i := 1 to 8 do
3612: LD_ADDR_VAR 0 2
3616: PUSH
3617: DOUBLE
3618: LD_INT 1
3620: DEC
3621: ST_TO_ADDR
3622: LD_INT 8
3624: PUSH
3625: FOR_TO
3626: IFFALSE 4883
// begin if not mpSidePositions [ i ] then
3628: LD_EXP 5
3632: PUSH
3633: LD_VAR 0 2
3637: ARRAY
3638: NOT
3639: IFFALSE 3643
// continue ;
3641: GO 3625
// side := i ;
3643: LD_ADDR_VAR 0 7
3647: PUSH
3648: LD_VAR 0 2
3652: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3653: LD_ADDR_VAR 0 9
3657: PUSH
3658: LD_EXP 7
3662: PUSH
3663: LD_VAR 0 2
3667: ARRAY
3668: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3669: LD_ADDR_VAR 0 8
3673: PUSH
3674: LD_EXP 5
3678: PUSH
3679: LD_VAR 0 2
3683: ARRAY
3684: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3685: LD_EXP 10
3689: PPUSH
3690: CALL 18815 0 1
3694: IFFALSE 3771
// begin for j in mpOilDeposits [ pos ] do
3696: LD_ADDR_VAR 0 3
3700: PUSH
3701: LD_EXP 10
3705: PUSH
3706: LD_VAR 0 8
3710: ARRAY
3711: PUSH
3712: FOR_IN
3713: IFFALSE 3769
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3715: LD_VAR 0 3
3719: PUSH
3720: LD_INT 1
3722: ARRAY
3723: PPUSH
3724: LD_VAR 0 3
3728: PUSH
3729: LD_INT 2
3731: ARRAY
3732: PPUSH
3733: LD_INT 2
3735: PPUSH
3736: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3740: LD_VAR 0 3
3744: PUSH
3745: LD_INT 1
3747: ARRAY
3748: PPUSH
3749: LD_VAR 0 3
3753: PUSH
3754: LD_INT 2
3756: ARRAY
3757: PPUSH
3758: LD_VAR 0 7
3762: PPUSH
3763: CALL_OW 441
// end ;
3767: GO 3712
3769: POP
3770: POP
// end ; if Count ( mpSibDeposits ) then
3771: LD_EXP 11
3775: PPUSH
3776: CALL 18815 0 1
3780: IFFALSE 3857
// begin for j in mpSibDeposits [ pos ] do
3782: LD_ADDR_VAR 0 3
3786: PUSH
3787: LD_EXP 11
3791: PUSH
3792: LD_VAR 0 8
3796: ARRAY
3797: PUSH
3798: FOR_IN
3799: IFFALSE 3855
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3801: LD_VAR 0 3
3805: PUSH
3806: LD_INT 1
3808: ARRAY
3809: PPUSH
3810: LD_VAR 0 3
3814: PUSH
3815: LD_INT 2
3817: ARRAY
3818: PPUSH
3819: LD_INT 3
3821: PPUSH
3822: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3826: LD_VAR 0 3
3830: PUSH
3831: LD_INT 1
3833: ARRAY
3834: PPUSH
3835: LD_VAR 0 3
3839: PUSH
3840: LD_INT 2
3842: ARRAY
3843: PPUSH
3844: LD_VAR 0 7
3848: PPUSH
3849: CALL_OW 441
// end ;
3853: GO 3798
3855: POP
3856: POP
// end ; InitBc ;
3857: CALL_OW 21
// InitUc ;
3861: CALL_OW 18
// uc_side := side ;
3865: LD_ADDR_OWVAR 20
3869: PUSH
3870: LD_VAR 0 7
3874: ST_TO_ADDR
// uc_nation := nation ;
3875: LD_ADDR_OWVAR 21
3879: PUSH
3880: LD_VAR 0 9
3884: ST_TO_ADDR
// if Count ( mpDepots ) then
3885: LD_EXP 12
3889: PPUSH
3890: CALL 18815 0 1
3894: IFFALSE 4078
// begin if mpGameType = GameTypeSurvival then
3896: LD_EXP 1
3900: PUSH
3901: LD_INT 2
3903: EQUAL
3904: IFFALSE 3924
// begin bc_level := 10 ;
3906: LD_ADDR_OWVAR 43
3910: PUSH
3911: LD_INT 10
3913: ST_TO_ADDR
// bc_type := b_warehouse ;
3914: LD_ADDR_OWVAR 42
3918: PUSH
3919: LD_INT 1
3921: ST_TO_ADDR
// end else
3922: GO 3940
// begin bc_level := 0 ;
3924: LD_ADDR_OWVAR 43
3928: PUSH
3929: LD_INT 0
3931: ST_TO_ADDR
// bc_type := b_depot ;
3932: LD_ADDR_OWVAR 42
3936: PUSH
3937: LD_INT 0
3939: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3940: LD_ADDR_VAR 0 4
3944: PUSH
3945: LD_EXP 12
3949: PUSH
3950: LD_VAR 0 8
3954: ARRAY
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PPUSH
3960: LD_EXP 12
3964: PUSH
3965: LD_VAR 0 8
3969: ARRAY
3970: PUSH
3971: LD_INT 2
3973: ARRAY
3974: PPUSH
3975: LD_EXP 12
3979: PUSH
3980: LD_VAR 0 8
3984: ARRAY
3985: PUSH
3986: LD_INT 3
3988: ARRAY
3989: PPUSH
3990: CALL_OW 47
3994: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3995: LD_VAR 0 4
3999: PPUSH
4000: LD_STRING @
4002: PUSH
4003: LD_VAR 0 7
4007: STR
4008: PPUSH
4009: CALL_OW 500
// if Count ( mpStartingResources ) then
4013: LD_EXP 13
4017: PPUSH
4018: CALL 18815 0 1
4022: IFFALSE 4076
// begin for j := 1 to mpStartingResources do
4024: LD_ADDR_VAR 0 3
4028: PUSH
4029: DOUBLE
4030: LD_INT 1
4032: DEC
4033: ST_TO_ADDR
4034: LD_EXP 13
4038: PUSH
4039: FOR_TO
4040: IFFALSE 4074
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4042: LD_VAR 0 4
4046: PPUSH
4047: CALL_OW 274
4051: PPUSH
4052: LD_VAR 0 3
4056: PPUSH
4057: LD_EXP 13
4061: PUSH
4062: LD_VAR 0 3
4066: ARRAY
4067: PPUSH
4068: CALL_OW 277
4072: GO 4039
4074: POP
4075: POP
// end ; end else
4076: GO 4225
// if Count ( mpStartingResources ) then
4078: LD_EXP 13
4082: PPUSH
4083: CALL 18815 0 1
4087: IFFALSE 4225
// begin for j := 1 to mpStartingResources do
4089: LD_ADDR_VAR 0 3
4093: PUSH
4094: DOUBLE
4095: LD_INT 1
4097: DEC
4098: ST_TO_ADDR
4099: LD_EXP 13
4103: PUSH
4104: FOR_TO
4105: IFFALSE 4223
// begin resources := mpStartingResources [ j ] ;
4107: LD_ADDR_VAR 0 13
4111: PUSH
4112: LD_EXP 13
4116: PUSH
4117: LD_VAR 0 3
4121: ARRAY
4122: ST_TO_ADDR
// repeat if resources >= 50 then
4123: LD_VAR 0 13
4127: PUSH
4128: LD_INT 50
4130: GREATEREQUAL
4131: IFFALSE 4177
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
4133: LD_VAR 0 3
4137: PPUSH
4138: LD_INT 5
4140: PPUSH
4141: LD_VAR 0 5
4145: PPUSH
4146: LD_VAR 0 6
4150: PPUSH
4151: LD_INT 4
4153: PPUSH
4154: LD_INT 0
4156: PPUSH
4157: CALL_OW 60
// resources := resources - 50 ;
4161: LD_ADDR_VAR 0 13
4165: PUSH
4166: LD_VAR 0 13
4170: PUSH
4171: LD_INT 50
4173: MINUS
4174: ST_TO_ADDR
// end else
4175: GO 4211
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
4177: LD_VAR 0 3
4181: PPUSH
4182: LD_VAR 0 13
4186: PUSH
4187: LD_INT 10
4189: DIV
4190: PPUSH
4191: LD_VAR 0 5
4195: PPUSH
4196: LD_VAR 0 6
4200: PPUSH
4201: LD_INT 4
4203: PPUSH
4204: LD_INT 0
4206: PPUSH
4207: CALL_OW 60
// until resources <= 0 ;
4211: LD_VAR 0 13
4215: PUSH
4216: LD_INT 0
4218: LESSEQUAL
4219: IFFALSE 4123
// end ;
4221: GO 4104
4223: POP
4224: POP
// end ; if Count ( mpBuildings ) then
4225: LD_EXP 15
4229: PPUSH
4230: CALL 18815 0 1
4234: IFFALSE 4312
// begin for j in mpBuildings [ pos ] do
4236: LD_ADDR_VAR 0 3
4240: PUSH
4241: LD_EXP 15
4245: PUSH
4246: LD_VAR 0 8
4250: ARRAY
4251: PUSH
4252: FOR_IN
4253: IFFALSE 4310
// begin bc_level := 0 ;
4255: LD_ADDR_OWVAR 43
4259: PUSH
4260: LD_INT 0
4262: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4263: LD_ADDR_OWVAR 42
4267: PUSH
4268: LD_VAR 0 3
4272: PUSH
4273: LD_INT 1
4275: ARRAY
4276: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4277: LD_VAR 0 3
4281: PUSH
4282: LD_INT 2
4284: ARRAY
4285: PPUSH
4286: LD_VAR 0 3
4290: PUSH
4291: LD_INT 3
4293: ARRAY
4294: PPUSH
4295: LD_VAR 0 3
4299: PUSH
4300: LD_INT 4
4302: ARRAY
4303: PPUSH
4304: CALL_OW 47
// end ;
4308: GO 4252
4310: POP
4311: POP
// end ; if mpBattleFlag > - 1 then
4312: LD_EXP 20
4316: PUSH
4317: LD_INT 1
4319: NEG
4320: GREATER
4321: IFFALSE 4480
// begin x := mpStartPos [ pos ] [ 1 ] ;
4323: LD_ADDR_VAR 0 5
4327: PUSH
4328: LD_EXP 19
4332: PUSH
4333: LD_VAR 0 8
4337: ARRAY
4338: PUSH
4339: LD_INT 1
4341: ARRAY
4342: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4343: LD_ADDR_VAR 0 6
4347: PUSH
4348: LD_EXP 19
4352: PUSH
4353: LD_VAR 0 8
4357: ARRAY
4358: PUSH
4359: LD_INT 2
4361: ARRAY
4362: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4363: LD_VAR 0 5
4367: PPUSH
4368: LD_VAR 0 6
4372: PPUSH
4373: LD_INT 12
4375: PPUSH
4376: LD_INT 2
4378: PPUSH
4379: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4383: LD_ADDR_EXP 21
4387: PUSH
4388: LD_EXP 21
4392: PPUSH
4393: LD_VAR 0 7
4397: PPUSH
4398: LD_VAR 0 7
4402: PPUSH
4403: LD_VAR 0 5
4407: PPUSH
4408: LD_VAR 0 6
4412: PPUSH
4413: LD_INT 1
4415: PUSH
4416: LD_INT 100
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_INT 2
4425: PUSH
4426: LD_INT 70
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PUSH
4433: LD_INT 3
4435: PUSH
4436: LD_INT 40
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PUSH
4443: LD_INT 10
4445: PUSH
4446: LD_INT 25
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: PUSH
4453: LD_INT 20
4455: PUSH
4456: LD_INT 100
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: PPUSH
4470: CALL_OW 418
4474: PPUSH
4475: CALL_OW 1
4479: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4480: LD_EXP 24
4484: PUSH
4485: LD_INT 20
4487: PPUSH
4488: LD_VAR 0 7
4492: PPUSH
4493: CALL_OW 321
4497: PUSH
4498: LD_INT 1
4500: EQUAL
4501: AND
4502: IFFALSE 4519
// SetTech ( tech_SibDet , side , state_researched ) ;
4504: LD_INT 20
4506: PPUSH
4507: LD_VAR 0 7
4511: PPUSH
4512: LD_INT 2
4514: PPUSH
4515: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4519: LD_INT 24
4521: PPUSH
4522: LD_VAR 0 7
4526: PPUSH
4527: LD_INT 0
4529: PPUSH
4530: CALL_OW 322
// if mpSibBomb = 1 then
4534: LD_EXP 26
4538: PUSH
4539: LD_INT 1
4541: EQUAL
4542: IFFALSE 4561
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4544: LD_INT 25
4546: PPUSH
4547: LD_VAR 0 7
4551: PPUSH
4552: LD_INT 1
4554: PPUSH
4555: CALL_OW 322
// end else
4559: GO 4576
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4561: LD_INT 25
4563: PPUSH
4564: LD_VAR 0 7
4568: PPUSH
4569: LD_INT 0
4571: PPUSH
4572: CALL_OW 322
// end ; if mpVehicles then
4576: LD_EXP 34
4580: IFFALSE 4679
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4582: LD_ADDR_VAR 0 3
4586: PUSH
4587: LD_VAR 0 7
4591: PPUSH
4592: LD_VAR 0 9
4596: PPUSH
4597: LD_EXP 34
4601: PPUSH
4602: CALL 5793 0 3
4606: PUSH
4607: FOR_IN
4608: IFFALSE 4677
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4610: LD_VAR 0 3
4614: PPUSH
4615: LD_INT 0
4617: PPUSH
4618: LD_INT 5
4620: PPUSH
4621: CALL_OW 12
4625: PPUSH
4626: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4630: LD_VAR 0 3
4634: PPUSH
4635: LD_EXP 19
4639: PUSH
4640: LD_VAR 0 8
4644: ARRAY
4645: PUSH
4646: LD_INT 1
4648: ARRAY
4649: PPUSH
4650: LD_EXP 19
4654: PUSH
4655: LD_VAR 0 8
4659: ARRAY
4660: PUSH
4661: LD_INT 2
4663: ARRAY
4664: PPUSH
4665: LD_INT 12
4667: PPUSH
4668: LD_INT 0
4670: PPUSH
4671: CALL_OW 50
// end ;
4675: GO 4607
4677: POP
4678: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4679: LD_ADDR_VAR 0 11
4683: PUSH
4684: LD_VAR 0 7
4688: PPUSH
4689: LD_VAR 0 9
4693: PPUSH
4694: LD_EXP 22
4698: PPUSH
4699: LD_EXP 23
4703: PPUSH
4704: CALL 5295 0 4
4708: ST_TO_ADDR
// for j in team do
4709: LD_ADDR_VAR 0 3
4713: PUSH
4714: LD_VAR 0 11
4718: PUSH
4719: FOR_IN
4720: IFFALSE 4769
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4722: LD_VAR 0 3
4726: PPUSH
4727: LD_EXP 19
4731: PUSH
4732: LD_VAR 0 8
4736: ARRAY
4737: PUSH
4738: LD_INT 1
4740: ARRAY
4741: PPUSH
4742: LD_EXP 19
4746: PUSH
4747: LD_VAR 0 8
4751: ARRAY
4752: PUSH
4753: LD_INT 2
4755: ARRAY
4756: PPUSH
4757: LD_INT 12
4759: PPUSH
4760: LD_INT 0
4762: PPUSH
4763: CALL_OW 50
4767: GO 4719
4769: POP
4770: POP
// if mpApemans then
4771: LD_EXP 28
4775: IFFALSE 4881
// begin for j := 1 to mpApemans do
4777: LD_ADDR_VAR 0 3
4781: PUSH
4782: DOUBLE
4783: LD_INT 1
4785: DEC
4786: ST_TO_ADDR
4787: LD_EXP 28
4791: PUSH
4792: FOR_TO
4793: IFFALSE 4879
// begin PrepareApeman ( - 5 ) ;
4795: LD_INT 5
4797: NEG
4798: PPUSH
4799: CALL 50672 0 1
// ape := CreateHuman ;
4803: LD_ADDR_VAR 0 10
4807: PUSH
4808: CALL_OW 44
4812: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4813: LD_ADDR_EXP 30
4817: PUSH
4818: LD_EXP 30
4822: PPUSH
4823: LD_VAR 0 8
4827: PPUSH
4828: LD_EXP 30
4832: PUSH
4833: LD_VAR 0 8
4837: ARRAY
4838: PPUSH
4839: LD_VAR 0 10
4843: PPUSH
4844: CALL 54424 0 2
4848: PPUSH
4849: CALL_OW 1
4853: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4854: LD_VAR 0 10
4858: PPUSH
4859: LD_EXP 29
4863: PUSH
4864: LD_VAR 0 8
4868: ARRAY
4869: PPUSH
4870: LD_INT 0
4872: PPUSH
4873: CALL_OW 49
// end ;
4877: GO 4792
4879: POP
4880: POP
// end ; end ;
4881: GO 3625
4883: POP
4884: POP
// if not mpTeamGame then
4885: LD_EXP 9
4889: NOT
4890: IFFALSE 4988
// begin for i := 1 to 8 do
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: DOUBLE
4898: LD_INT 1
4900: DEC
4901: ST_TO_ADDR
4902: LD_INT 8
4904: PUSH
4905: FOR_TO
4906: IFFALSE 4984
// for j := 1 to 8 do
4908: LD_ADDR_VAR 0 3
4912: PUSH
4913: DOUBLE
4914: LD_INT 1
4916: DEC
4917: ST_TO_ADDR
4918: LD_INT 8
4920: PUSH
4921: FOR_TO
4922: IFFALSE 4980
// if i <> j then
4924: LD_VAR 0 2
4928: PUSH
4929: LD_VAR 0 3
4933: NONEQUAL
4934: IFFALSE 4958
// SetAttitude ( i , j , att_neutral , true ) else
4936: LD_VAR 0 2
4940: PPUSH
4941: LD_VAR 0 3
4945: PPUSH
4946: LD_INT 0
4948: PPUSH
4949: LD_INT 1
4951: PPUSH
4952: CALL_OW 80
4956: GO 4978
// SetAttitude ( i , j , att_friend , true ) ;
4958: LD_VAR 0 2
4962: PPUSH
4963: LD_VAR 0 3
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: LD_INT 1
4973: PPUSH
4974: CALL_OW 80
4978: GO 4921
4980: POP
4981: POP
4982: GO 4905
4984: POP
4985: POP
// end else
4986: GO 5163
// begin if mpSharedVision then
4988: LD_EXP 14
4992: IFFALSE 5057
// begin for i in mpTeams do
4994: LD_ADDR_VAR 0 2
4998: PUSH
4999: LD_EXP 8
5003: PUSH
5004: FOR_IN
5005: IFFALSE 5055
// for j := 2 to i do
5007: LD_ADDR_VAR 0 3
5011: PUSH
5012: DOUBLE
5013: LD_INT 2
5015: DEC
5016: ST_TO_ADDR
5017: LD_VAR 0 2
5021: PUSH
5022: FOR_TO
5023: IFFALSE 5051
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5025: LD_VAR 0 2
5029: PUSH
5030: LD_VAR 0 3
5034: ARRAY
5035: PPUSH
5036: LD_VAR 0 2
5040: PUSH
5041: LD_INT 1
5043: ARRAY
5044: PPUSH
5045: CALL_OW 343
5049: GO 5022
5051: POP
5052: POP
5053: GO 5004
5055: POP
5056: POP
// end ; for i := 1 to 8 do
5057: LD_ADDR_VAR 0 2
5061: PUSH
5062: DOUBLE
5063: LD_INT 1
5065: DEC
5066: ST_TO_ADDR
5067: LD_INT 8
5069: PUSH
5070: FOR_TO
5071: IFFALSE 5161
// for j := 1 to 8 do
5073: LD_ADDR_VAR 0 3
5077: PUSH
5078: DOUBLE
5079: LD_INT 1
5081: DEC
5082: ST_TO_ADDR
5083: LD_INT 8
5085: PUSH
5086: FOR_TO
5087: IFFALSE 5157
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5089: LD_EXP 6
5093: PUSH
5094: LD_VAR 0 2
5098: ARRAY
5099: PUSH
5100: LD_EXP 6
5104: PUSH
5105: LD_VAR 0 3
5109: ARRAY
5110: EQUAL
5111: IFFALSE 5135
// SetAttitude ( i , j , att_friend , true ) else
5113: LD_VAR 0 2
5117: PPUSH
5118: LD_VAR 0 3
5122: PPUSH
5123: LD_INT 1
5125: PPUSH
5126: LD_INT 1
5128: PPUSH
5129: CALL_OW 80
5133: GO 5155
// SetAttitude ( i , j , att_enemy , true ) ;
5135: LD_VAR 0 2
5139: PPUSH
5140: LD_VAR 0 3
5144: PPUSH
5145: LD_INT 2
5147: PPUSH
5148: LD_INT 1
5150: PPUSH
5151: CALL_OW 80
5155: GO 5086
5157: POP
5158: POP
5159: GO 5070
5161: POP
5162: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5163: LD_ADDR_OWVAR 71
5167: PUSH
5168: LD_EXP 7
5172: PUSH
5173: LD_OWVAR 2
5177: ARRAY
5178: ST_TO_ADDR
// if IAmSpec then
5179: CALL_OW 531
5183: IFFALSE 5224
// begin FogOff ( true ) ;
5185: LD_INT 1
5187: PPUSH
5188: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5192: LD_EXP 27
5196: PUSH
5197: LD_INT 1
5199: ARRAY
5200: PUSH
5201: LD_INT 2
5203: DIV
5204: PPUSH
5205: LD_EXP 27
5209: PUSH
5210: LD_INT 2
5212: ARRAY
5213: PUSH
5214: LD_INT 2
5216: DIV
5217: PPUSH
5218: CALL_OW 86
// end else
5222: GO 5270
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5224: LD_EXP 19
5228: PUSH
5229: LD_EXP 5
5233: PUSH
5234: LD_OWVAR 2
5238: ARRAY
5239: ARRAY
5240: PUSH
5241: LD_INT 1
5243: ARRAY
5244: PPUSH
5245: LD_EXP 19
5249: PUSH
5250: LD_EXP 5
5254: PUSH
5255: LD_OWVAR 2
5259: ARRAY
5260: ARRAY
5261: PUSH
5262: LD_INT 2
5264: ARRAY
5265: PPUSH
5266: CALL_OW 86
// end ; BeginBuildUp ;
5270: CALL 6271 0 0
// enable ( mpActive ) ;
5274: LD_INT 100
5276: ENABLE_MARKED
// enable ( mpGameType ) ;
5277: LD_EXP 1
5281: ENABLE_MARKED
// mpGameActive := true ;
5282: LD_ADDR_EXP 37
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// end ;
5290: LD_VAR 0 1
5294: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5295: LD_INT 0
5297: PPUSH
5298: PPUSH
5299: PPUSH
5300: PPUSH
// result := [ ] ;
5301: LD_ADDR_VAR 0 5
5305: PUSH
5306: EMPTY
5307: ST_TO_ADDR
// class := class_soldier ;
5308: LD_ADDR_VAR 0 8
5312: PUSH
5313: LD_INT 1
5315: ST_TO_ADDR
// uc_side := side ;
5316: LD_ADDR_OWVAR 20
5320: PUSH
5321: LD_VAR 0 1
5325: ST_TO_ADDR
// uc_nation := nation ;
5326: LD_ADDR_OWVAR 21
5330: PUSH
5331: LD_VAR 0 2
5335: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5336: LD_ADDR_OWVAR 26
5340: PUSH
5341: LD_OWVAR 19
5345: PUSH
5346: LD_VAR 0 1
5350: ARRAY
5351: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5352: LD_INT 1
5354: PPUSH
5355: LD_INT 2
5357: PPUSH
5358: CALL_OW 12
5362: PPUSH
5363: LD_VAR 0 8
5367: PPUSH
5368: LD_VAR 0 4
5372: PUSH
5373: LD_INT 2
5375: PLUS
5376: PPUSH
5377: CALL_OW 380
// hc_importance := 105 ;
5381: LD_ADDR_OWVAR 32
5385: PUSH
5386: LD_INT 105
5388: ST_TO_ADDR
// if Multiplayer then
5389: LD_OWVAR 4
5393: IFFALSE 5433
// begin hc_gallery := MULTIAVATARS ;
5395: LD_ADDR_OWVAR 33
5399: PUSH
5400: LD_STRING MULTIAVATARS
5402: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5403: LD_ADDR_OWVAR 34
5407: PUSH
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 525
5417: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5418: LD_ADDR_OWVAR 27
5422: PUSH
5423: LD_VAR 0 1
5427: PPUSH
5428: CALL_OW 526
5432: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5433: LD_ADDR_VAR 0 5
5437: PUSH
5438: LD_VAR 0 5
5442: PPUSH
5443: CALL_OW 44
5447: PPUSH
5448: CALL 54424 0 2
5452: ST_TO_ADDR
// if mpTeamPreset then
5453: LD_LOC 1
5457: IFFALSE 5553
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5459: LD_LOC 1
5463: PUSH
5464: LD_INT 1
5466: ARRAY
5467: PPUSH
5468: LD_VAR 0 5
5472: PUSH
5473: LD_VAR 0 5
5477: ARRAY
5478: PPUSH
5479: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5483: LD_VAR 0 5
5487: PUSH
5488: LD_VAR 0 5
5492: ARRAY
5493: PPUSH
5494: LD_INT 1
5496: PPUSH
5497: LD_LOC 1
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PPUSH
5506: LD_INT 1
5508: PPUSH
5509: CALL_OW 260
5513: PPUSH
5514: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5518: LD_VAR 0 5
5522: PUSH
5523: LD_VAR 0 5
5527: ARRAY
5528: PPUSH
5529: LD_INT 2
5531: PPUSH
5532: LD_LOC 1
5536: PUSH
5537: LD_INT 1
5539: ARRAY
5540: PPUSH
5541: LD_INT 2
5543: PPUSH
5544: CALL_OW 260
5548: PPUSH
5549: CALL_OW 239
// end ; InitHc_All ( ) ;
5553: CALL_OW 584
// class := 2 ;
5557: LD_ADDR_VAR 0 8
5561: PUSH
5562: LD_INT 2
5564: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5565: LD_ADDR_VAR 0 6
5569: PUSH
5570: DOUBLE
5571: LD_INT 1
5573: DEC
5574: ST_TO_ADDR
5575: LD_VAR 0 3
5579: PUSH
5580: LD_INT 1
5582: MINUS
5583: PUSH
5584: FOR_TO
5585: IFFALSE 5769
// begin PrepareHuman ( false , class , skill ) ;
5587: LD_INT 0
5589: PPUSH
5590: LD_VAR 0 8
5594: PPUSH
5595: LD_VAR 0 4
5599: PPUSH
5600: CALL_OW 380
// un := CreateHuman ;
5604: LD_ADDR_VAR 0 7
5608: PUSH
5609: CALL_OW 44
5613: ST_TO_ADDR
// result := Join ( result , un ) ;
5614: LD_ADDR_VAR 0 5
5618: PUSH
5619: LD_VAR 0 5
5623: PPUSH
5624: LD_VAR 0 7
5628: PPUSH
5629: CALL 54424 0 2
5633: ST_TO_ADDR
// if mpTeamPreset then
5634: LD_LOC 1
5638: IFFALSE 5734
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5640: LD_LOC 1
5644: PUSH
5645: LD_VAR 0 6
5649: PUSH
5650: LD_INT 1
5652: PLUS
5653: ARRAY
5654: PPUSH
5655: LD_VAR 0 7
5659: PPUSH
5660: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5664: LD_VAR 0 7
5668: PPUSH
5669: LD_INT 1
5671: PPUSH
5672: LD_LOC 1
5676: PUSH
5677: LD_VAR 0 6
5681: PUSH
5682: LD_INT 1
5684: PLUS
5685: ARRAY
5686: PPUSH
5687: LD_INT 1
5689: PPUSH
5690: CALL_OW 260
5694: PPUSH
5695: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5699: LD_VAR 0 7
5703: PPUSH
5704: LD_INT 2
5706: PPUSH
5707: LD_LOC 1
5711: PUSH
5712: LD_VAR 0 6
5716: PUSH
5717: LD_INT 1
5719: PLUS
5720: ARRAY
5721: PPUSH
5722: LD_INT 2
5724: PPUSH
5725: CALL_OW 260
5729: PPUSH
5730: CALL_OW 239
// end ; class := Inc ( class ) ;
5734: LD_ADDR_VAR 0 8
5738: PUSH
5739: LD_VAR 0 8
5743: PPUSH
5744: CALL 55785 0 1
5748: ST_TO_ADDR
// if class = 5 then
5749: LD_VAR 0 8
5753: PUSH
5754: LD_INT 5
5756: EQUAL
5757: IFFALSE 5767
// class := 1 ;
5759: LD_ADDR_VAR 0 8
5763: PUSH
5764: LD_INT 1
5766: ST_TO_ADDR
// end ;
5767: GO 5584
5769: POP
5770: POP
// if not mpTeamPreset then
5771: LD_LOC 1
5775: NOT
5776: IFFALSE 5788
// mpTeamPreset := result ;
5778: LD_ADDR_LOC 1
5782: PUSH
5783: LD_VAR 0 5
5787: ST_TO_ADDR
// end ;
5788: LD_VAR 0 5
5792: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5793: LD_INT 0
5795: PPUSH
5796: PPUSH
// result := [ ] ;
5797: LD_ADDR_VAR 0 4
5801: PUSH
5802: EMPTY
5803: ST_TO_ADDR
// if not vehicles then
5804: LD_VAR 0 3
5808: NOT
5809: IFFALSE 5813
// exit ;
5811: GO 5972
// for i := 1 to vehicles [ nation ] do
5813: LD_ADDR_VAR 0 5
5817: PUSH
5818: DOUBLE
5819: LD_INT 1
5821: DEC
5822: ST_TO_ADDR
5823: LD_VAR 0 3
5827: PUSH
5828: LD_VAR 0 2
5832: ARRAY
5833: PUSH
5834: FOR_TO
5835: IFFALSE 5970
// begin uc_side := side ;
5837: LD_ADDR_OWVAR 20
5841: PUSH
5842: LD_VAR 0 1
5846: ST_TO_ADDR
// uc_nation := nation ;
5847: LD_ADDR_OWVAR 21
5851: PUSH
5852: LD_VAR 0 2
5856: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5857: LD_VAR 0 3
5861: PUSH
5862: LD_VAR 0 2
5866: ARRAY
5867: PUSH
5868: LD_VAR 0 5
5872: ARRAY
5873: PUSH
5874: LD_INT 1
5876: ARRAY
5877: PPUSH
5878: LD_VAR 0 3
5882: PUSH
5883: LD_VAR 0 2
5887: ARRAY
5888: PUSH
5889: LD_VAR 0 5
5893: ARRAY
5894: PUSH
5895: LD_INT 2
5897: ARRAY
5898: PPUSH
5899: LD_VAR 0 3
5903: PUSH
5904: LD_VAR 0 2
5908: ARRAY
5909: PUSH
5910: LD_VAR 0 5
5914: ARRAY
5915: PUSH
5916: LD_INT 3
5918: ARRAY
5919: PPUSH
5920: LD_VAR 0 3
5924: PUSH
5925: LD_VAR 0 2
5929: ARRAY
5930: PUSH
5931: LD_VAR 0 5
5935: ARRAY
5936: PUSH
5937: LD_INT 4
5939: ARRAY
5940: PPUSH
5941: LD_INT 80
5943: PPUSH
5944: CALL 21553 0 5
// result := Join ( result , CreateVehicle ) ;
5948: LD_ADDR_VAR 0 4
5952: PUSH
5953: LD_VAR 0 4
5957: PPUSH
5958: CALL_OW 45
5962: PPUSH
5963: CALL 54424 0 2
5967: ST_TO_ADDR
// end ;
5968: GO 5834
5970: POP
5971: POP
// end ;
5972: LD_VAR 0 4
5976: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
// for i in mpBattleFlags do
5981: LD_ADDR_VAR 0 3
5985: PUSH
5986: LD_EXP 21
5990: PUSH
5991: FOR_IN
5992: IFFALSE 6069
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5994: LD_VAR 0 3
5998: PPUSH
5999: LD_INT 1
6001: PUSH
6002: LD_VAR 0 1
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 2
6013: PUSH
6014: LD_VAR 0 1
6018: PUSH
6019: LD_REAL  7.00000000000000E-0001
6022: MUL
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PUSH
6028: LD_INT 3
6030: PUSH
6031: LD_VAR 0 1
6035: PUSH
6036: LD_REAL  4.00000000000000E-0001
6039: MUL
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 20
6047: PUSH
6048: LD_VAR 0 1
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: PPUSH
6063: CALL_OW 423
6067: GO 5991
6069: POP
6070: POP
// end ;
6071: LD_VAR 0 2
6075: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6076: LD_INT 100
6078: IFFALSE 6173
6080: GO 6082
6082: DISABLE
6083: LD_INT 0
6085: PPUSH
6086: PPUSH
// begin if mpBattleFlag <= 0 then
6087: LD_EXP 20
6091: PUSH
6092: LD_INT 0
6094: LESSEQUAL
6095: IFFALSE 6099
// exit ;
6097: GO 6173
// strength := 100 ;
6099: LD_ADDR_VAR 0 2
6103: PUSH
6104: LD_INT 100
6106: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6107: LD_EXP 20
6111: PPUSH
6112: CALL_OW 67
// strength := Dec ( strength ) ;
6116: LD_ADDR_VAR 0 2
6120: PUSH
6121: LD_VAR 0 2
6125: PPUSH
6126: CALL 55807 0 1
6130: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6131: LD_VAR 0 2
6135: PPUSH
6136: CALL 5977 0 1
// until not strength ;
6140: LD_VAR 0 2
6144: NOT
6145: IFFALSE 6107
// for i in mpBattleFlags do
6147: LD_ADDR_VAR 0 1
6151: PUSH
6152: LD_EXP 21
6156: PUSH
6157: FOR_IN
6158: IFFALSE 6171
// KillBattleFlag ( i ) ;
6160: LD_VAR 0 1
6164: PPUSH
6165: CALL_OW 419
6169: GO 6157
6171: POP
6172: POP
// end ;
6173: PPOPN 2
6175: END
// every 0 0$1 marked mpActive do var side , tmp ;
6176: GO 6178
6178: DISABLE
6179: LD_INT 0
6181: PPUSH
6182: PPUSH
// begin if mpSibBomb <= 1 then
6183: LD_EXP 26
6187: PUSH
6188: LD_INT 1
6190: LESSEQUAL
6191: IFFALSE 6195
// exit ;
6193: GO 6268
// tmp := mpSibBomb ;
6195: LD_ADDR_VAR 0 2
6199: PUSH
6200: LD_EXP 26
6204: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6205: LD_INT 35
6207: PPUSH
6208: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6212: LD_ADDR_VAR 0 2
6216: PUSH
6217: LD_VAR 0 2
6221: PUSH
6222: LD_INT 35
6224: MINUS
6225: ST_TO_ADDR
// until not tmp ;
6226: LD_VAR 0 2
6230: NOT
6231: IFFALSE 6205
// for side := 1 to 8 do
6233: LD_ADDR_VAR 0 1
6237: PUSH
6238: DOUBLE
6239: LD_INT 1
6241: DEC
6242: ST_TO_ADDR
6243: LD_INT 8
6245: PUSH
6246: FOR_TO
6247: IFFALSE 6266
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6249: LD_INT 25
6251: PPUSH
6252: LD_VAR 0 1
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: CALL_OW 322
6264: GO 6246
6266: POP
6267: POP
// end ;
6268: PPOPN 2
6270: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6271: LD_INT 0
6273: PPUSH
6274: PPUSH
6275: PPUSH
// mpBuildUpTimeDelay := 0 ;
6276: LD_ADDR_EXP 40
6280: PUSH
6281: LD_INT 0
6283: ST_TO_ADDR
// if not mpBuildUpTime then
6284: LD_EXP 18
6288: NOT
6289: IFFALSE 6293
// exit ;
6291: GO 6476
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6293: LD_ADDR_EXP 40
6297: PUSH
6298: LD_INT 8400
6300: PUSH
6301: LD_INT 2100
6303: PUSH
6304: LD_EXP 18
6308: MUL
6309: PLUS
6310: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6311: LD_ADDR_EXP 41
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// for i := 1 to 8 do
6319: LD_ADDR_VAR 0 2
6323: PUSH
6324: DOUBLE
6325: LD_INT 1
6327: DEC
6328: ST_TO_ADDR
6329: LD_INT 8
6331: PUSH
6332: FOR_TO
6333: IFFALSE 6474
// if mpSidePositions [ i ] then
6335: LD_EXP 5
6339: PUSH
6340: LD_VAR 0 2
6344: ARRAY
6345: IFFALSE 6472
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6347: LD_EXP 17
6351: PUSH
6352: LD_EXP 5
6356: PUSH
6357: LD_VAR 0 2
6361: ARRAY
6362: ARRAY
6363: PPUSH
6364: LD_INT 5
6366: PPUSH
6367: CALL_OW 424
// for j := 1 to 8 do
6371: LD_ADDR_VAR 0 3
6375: PUSH
6376: DOUBLE
6377: LD_INT 1
6379: DEC
6380: ST_TO_ADDR
6381: LD_INT 8
6383: PUSH
6384: FOR_TO
6385: IFFALSE 6470
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6387: LD_EXP 5
6391: PUSH
6392: LD_VAR 0 3
6396: ARRAY
6397: PUSH
6398: LD_EXP 6
6402: PUSH
6403: LD_VAR 0 2
6407: ARRAY
6408: PUSH
6409: LD_EXP 6
6413: PUSH
6414: LD_VAR 0 3
6418: ARRAY
6419: NONEQUAL
6420: PUSH
6421: LD_EXP 9
6425: NOT
6426: PUSH
6427: LD_VAR 0 2
6431: PUSH
6432: LD_VAR 0 3
6436: NONEQUAL
6437: AND
6438: OR
6439: AND
6440: IFFALSE 6468
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6442: LD_VAR 0 3
6446: PPUSH
6447: LD_EXP 17
6451: PUSH
6452: LD_EXP 5
6456: PUSH
6457: LD_VAR 0 2
6461: ARRAY
6462: ARRAY
6463: PPUSH
6464: CALL_OW 333
6468: GO 6384
6470: POP
6471: POP
// end ;
6472: GO 6332
6474: POP
6475: POP
// end ;
6476: LD_VAR 0 1
6480: RET
// function EndBuildUp ; var i , j ; begin
6481: LD_INT 0
6483: PPUSH
6484: PPUSH
6485: PPUSH
// mpBuildUpTimeActive := false ;
6486: LD_ADDR_EXP 41
6490: PUSH
6491: LD_INT 0
6493: ST_TO_ADDR
// for i := 1 to 8 do
6494: LD_ADDR_VAR 0 2
6498: PUSH
6499: DOUBLE
6500: LD_INT 1
6502: DEC
6503: ST_TO_ADDR
6504: LD_INT 8
6506: PUSH
6507: FOR_TO
6508: IFFALSE 6649
// if mpSidePositions [ i ] then
6510: LD_EXP 5
6514: PUSH
6515: LD_VAR 0 2
6519: ARRAY
6520: IFFALSE 6647
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6522: LD_EXP 17
6526: PUSH
6527: LD_EXP 5
6531: PUSH
6532: LD_VAR 0 2
6536: ARRAY
6537: ARRAY
6538: PPUSH
6539: LD_INT 0
6541: PPUSH
6542: CALL_OW 424
// for j := 1 to 8 do
6546: LD_ADDR_VAR 0 3
6550: PUSH
6551: DOUBLE
6552: LD_INT 1
6554: DEC
6555: ST_TO_ADDR
6556: LD_INT 8
6558: PUSH
6559: FOR_TO
6560: IFFALSE 6645
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6562: LD_EXP 5
6566: PUSH
6567: LD_VAR 0 3
6571: ARRAY
6572: PUSH
6573: LD_EXP 6
6577: PUSH
6578: LD_VAR 0 2
6582: ARRAY
6583: PUSH
6584: LD_EXP 6
6588: PUSH
6589: LD_VAR 0 3
6593: ARRAY
6594: NONEQUAL
6595: PUSH
6596: LD_EXP 9
6600: NOT
6601: PUSH
6602: LD_VAR 0 2
6606: PUSH
6607: LD_VAR 0 3
6611: NONEQUAL
6612: AND
6613: OR
6614: AND
6615: IFFALSE 6643
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6617: LD_VAR 0 3
6621: PPUSH
6622: LD_EXP 17
6626: PUSH
6627: LD_EXP 5
6631: PUSH
6632: LD_VAR 0 2
6636: ARRAY
6637: ARRAY
6638: PPUSH
6639: CALL_OW 334
6643: GO 6559
6645: POP
6646: POP
// end ;
6647: GO 6507
6649: POP
6650: POP
// end ;
6651: LD_VAR 0 1
6655: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6656: LD_EXP 41
6660: IFFALSE 6835
6662: GO 6664
6664: DISABLE
6665: LD_INT 0
6667: PPUSH
6668: PPUSH
// begin for i := 1 to 8 do
6669: LD_ADDR_VAR 0 1
6673: PUSH
6674: DOUBLE
6675: LD_INT 1
6677: DEC
6678: ST_TO_ADDR
6679: LD_INT 8
6681: PUSH
6682: FOR_TO
6683: IFFALSE 6832
// if mpSidePositions [ i ] then
6685: LD_EXP 5
6689: PUSH
6690: LD_VAR 0 1
6694: ARRAY
6695: IFFALSE 6830
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6697: LD_ADDR_VAR 0 2
6701: PUSH
6702: LD_EXP 17
6706: PUSH
6707: LD_EXP 5
6711: PUSH
6712: LD_VAR 0 1
6716: ARRAY
6717: ARRAY
6718: PPUSH
6719: LD_INT 2
6721: PUSH
6722: LD_INT 21
6724: PUSH
6725: LD_INT 1
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PUSH
6732: LD_INT 21
6734: PUSH
6735: LD_INT 2
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: LIST
6746: PUSH
6747: LD_INT 22
6749: PUSH
6750: LD_OWVAR 2
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 70
6767: PUSH
6768: FOR_IN
6769: IFFALSE 6828
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6771: LD_EXP 6
6775: PUSH
6776: LD_VAR 0 1
6780: ARRAY
6781: PUSH
6782: LD_EXP 6
6786: PUSH
6787: LD_OWVAR 2
6791: ARRAY
6792: NONEQUAL
6793: PUSH
6794: LD_EXP 9
6798: NOT
6799: PUSH
6800: LD_VAR 0 1
6804: PUSH
6805: LD_OWVAR 2
6809: NONEQUAL
6810: AND
6811: OR
6812: IFFALSE 6826
// ComMoveToArea ( un , BuildUpEscape ) ;
6814: LD_VAR 0 2
6818: PPUSH
6819: LD_INT 59
6821: PPUSH
6822: CALL_OW 113
6826: GO 6768
6828: POP
6829: POP
6830: GO 6682
6832: POP
6833: POP
// enable ;
6834: ENABLE
// end ;
6835: PPOPN 2
6837: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6838: LD_EXP 18
6842: IFFALSE 6892
6844: GO 6846
6846: DISABLE
6847: LD_INT 0
6849: PPUSH
// begin tmp := mpBuildUpTime ;
6850: LD_ADDR_VAR 0 1
6854: PUSH
6855: LD_EXP 18
6859: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6860: LD_INT 35
6862: PPUSH
6863: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6867: LD_ADDR_VAR 0 1
6871: PUSH
6872: LD_VAR 0 1
6876: PUSH
6877: LD_INT 35
6879: MINUS
6880: ST_TO_ADDR
// until not tmp ;
6881: LD_VAR 0 1
6885: NOT
6886: IFFALSE 6860
// EndBuildUp ;
6888: CALL 6481 0 0
// end ;
6892: PPOPN 1
6894: END
// every 0 0$1 trigger mpActive marked mpWin do
6895: LD_INT 100
6897: IFFALSE 6931
6899: GO 6901
6901: DISABLE
// begin if IAmServer then
6902: CALL_OW 518
6906: IFFALSE 6915
// wait ( 0 0$3 ) ;
6908: LD_INT 105
6910: PPUSH
6911: CALL_OW 67
// if Multiplayer then
6915: LD_OWVAR 4
6919: IFFALSE 6927
// YouWinInMultiplayer else
6921: CALL_OW 106
6925: GO 6931
// YouWin ;
6927: CALL_OW 103
// end ;
6931: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6932: LD_INT 0
6934: PPUSH
// result := false ;
6935: LD_ADDR_VAR 0 3
6939: PUSH
6940: LD_INT 0
6942: ST_TO_ADDR
// case gameType of GameTypeNormal :
6943: LD_VAR 0 1
6947: PUSH
6948: LD_INT 1
6950: DOUBLE
6951: EQUAL
6952: IFTRUE 6956
6954: GO 7029
6956: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6957: LD_ADDR_VAR 0 3
6961: PUSH
6962: LD_INT 22
6964: PUSH
6965: LD_VAR 0 2
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: LD_INT 21
6979: PUSH
6980: LD_INT 1
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 33
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 33
6999: PUSH
7000: LD_INT 5
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PPUSH
7017: CALL_OW 69
7021: PPUSH
7022: CALL 18815 0 1
7026: ST_TO_ADDR
// end ; GameTypeSurvival :
7027: GO 7264
7029: LD_INT 2
7031: DOUBLE
7032: EQUAL
7033: IFTRUE 7037
7035: GO 7165
7037: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7038: LD_ADDR_VAR 0 3
7042: PUSH
7043: LD_INT 22
7045: PUSH
7046: LD_VAR 0 2
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PUSH
7055: LD_INT 2
7057: PUSH
7058: LD_INT 30
7060: PUSH
7061: LD_INT 0
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 30
7070: PUSH
7071: LD_INT 1
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: PPUSH
7092: CALL 18815 0 1
7096: PUSH
7097: LD_INT 22
7099: PUSH
7100: LD_VAR 0 2
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PUSH
7109: LD_INT 2
7111: PUSH
7112: LD_INT 21
7114: PUSH
7115: LD_INT 1
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: LD_INT 33
7124: PUSH
7125: LD_INT 3
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 33
7134: PUSH
7135: LD_INT 5
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PPUSH
7152: CALL_OW 69
7156: PPUSH
7157: CALL 18815 0 1
7161: AND
7162: ST_TO_ADDR
// end ; GameTypeKing :
7163: GO 7264
7165: LD_INT 3
7167: DOUBLE
7168: EQUAL
7169: IFTRUE 7173
7171: GO 7263
7173: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7174: LD_ADDR_VAR 0 3
7178: PUSH
7179: LD_INT 22
7181: PUSH
7182: LD_VAR 0 2
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: LD_INT 2
7193: PUSH
7194: LD_INT 21
7196: PUSH
7197: LD_INT 1
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: LD_INT 33
7206: PUSH
7207: LD_INT 3
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 33
7216: PUSH
7217: LD_INT 5
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PPUSH
7234: CALL_OW 69
7238: PPUSH
7239: CALL 18815 0 1
7243: PUSH
7244: LD_VAR 0 2
7248: PPUSH
7249: CALL 9792 0 1
7253: PUSH
7254: LD_EXP 33
7258: LESS
7259: AND
7260: ST_TO_ADDR
// end ; end ;
7261: GO 7264
7263: POP
// end ;
7264: LD_VAR 0 3
7268: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7269: LD_INT 100
7271: IFFALSE 7493
7273: GO 7275
7275: DISABLE
7276: LD_INT 0
7278: PPUSH
7279: PPUSH
// begin if Multiplayer then
7280: LD_OWVAR 4
7284: IFFALSE 7292
// SetPlayerSpectator ( ) else
7286: CALL_OW 572
7290: GO 7301
// FogOff ( your_side ) ;
7292: LD_OWVAR 2
7296: PPUSH
7297: CALL_OW 344
// repeat gameIsOn := false ;
7301: LD_ADDR_VAR 0 1
7305: PUSH
7306: LD_INT 0
7308: ST_TO_ADDR
// for i := 1 to 8 do
7309: LD_ADDR_VAR 0 2
7313: PUSH
7314: DOUBLE
7315: LD_INT 1
7317: DEC
7318: ST_TO_ADDR
7319: LD_INT 8
7321: PUSH
7322: FOR_TO
7323: IFFALSE 7445
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7325: LD_EXP 5
7329: PUSH
7330: LD_VAR 0 2
7334: ARRAY
7335: PUSH
7336: LD_VAR 0 2
7340: PPUSH
7341: CALL_OW 108
7345: AND
7346: PUSH
7347: LD_VAR 0 2
7351: PUSH
7352: LD_OWVAR 2
7356: NONEQUAL
7357: AND
7358: IFFALSE 7443
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7360: LD_EXP 6
7364: PUSH
7365: LD_VAR 0 2
7369: ARRAY
7370: NOT
7371: PUSH
7372: LD_EXP 6
7376: PUSH
7377: LD_VAR 0 2
7381: ARRAY
7382: PUSH
7383: LD_EXP 6
7387: PUSH
7388: LD_OWVAR 2
7392: ARRAY
7393: NONEQUAL
7394: PUSH
7395: LD_OWVAR 2
7399: PPUSH
7400: LD_VAR 0 2
7404: PPUSH
7405: CALL_OW 81
7409: PUSH
7410: LD_INT 1
7412: NONEQUAL
7413: AND
7414: OR
7415: IFFALSE 7443
// if HasPowerByGameType ( mpGameType , i ) then
7417: LD_EXP 1
7421: PPUSH
7422: LD_VAR 0 2
7426: PPUSH
7427: CALL 6932 0 2
7431: IFFALSE 7443
// begin gameIsOn := true ;
7433: LD_ADDR_VAR 0 1
7437: PUSH
7438: LD_INT 1
7440: ST_TO_ADDR
// break ;
7441: GO 7445
// end ;
7443: GO 7322
7445: POP
7446: POP
// wait ( 100 ) ;
7447: LD_INT 100
7449: PPUSH
7450: CALL_OW 67
// until not gameIsOn ;
7454: LD_VAR 0 1
7458: NOT
7459: IFFALSE 7301
// if IAmServer then
7461: CALL_OW 518
7465: IFFALSE 7474
// wait ( 0 0$3 ) ;
7467: LD_INT 105
7469: PPUSH
7470: CALL_OW 67
// if Multiplayer then
7474: LD_OWVAR 4
7478: IFFALSE 7486
// YouLostInMultiplayer else
7480: CALL_OW 107
7484: GO 7493
// YouLost (  ) ;
7486: LD_STRING 
7488: PPUSH
7489: CALL_OW 104
// end ;
7493: PPOPN 2
7495: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7496: LD_EXP 31
7500: IFFALSE 7876
7502: GO 7504
7504: DISABLE
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
7511: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7512: LD_ADDR_VAR 0 5
7516: PUSH
7517: LD_INT 1
7519: PUSH
7520: LD_INT 2
7522: PUSH
7523: LD_INT 3
7525: PUSH
7526: LD_INT 4
7528: PUSH
7529: LD_INT 5
7531: PUSH
7532: LD_INT 6
7534: PUSH
7535: LD_INT 7
7537: PUSH
7538: LD_INT 8
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7551: LD_INT 350
7553: PPUSH
7554: CALL_OW 67
// for i := 1 to 8 do
7558: LD_ADDR_VAR 0 1
7562: PUSH
7563: DOUBLE
7564: LD_INT 1
7566: DEC
7567: ST_TO_ADDR
7568: LD_INT 8
7570: PUSH
7571: FOR_TO
7572: IFFALSE 7846
// begin j := sides [ i ] ;
7574: LD_ADDR_VAR 0 2
7578: PUSH
7579: LD_VAR 0 5
7583: PUSH
7584: LD_VAR 0 1
7588: ARRAY
7589: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7590: LD_EXP 38
7594: PUSH
7595: LD_VAR 0 2
7599: ARRAY
7600: PPUSH
7601: CALL 18815 0 1
7605: PUSH
7606: LD_VAR 0 2
7610: PPUSH
7611: CALL_OW 108
7615: AND
7616: PUSH
7617: LD_EXP 1
7621: PPUSH
7622: LD_VAR 0 2
7626: PPUSH
7627: CALL 6932 0 2
7631: AND
7632: IFFALSE 7844
// begin wait ( mpRespawn div 3 ) ;
7634: LD_EXP 31
7638: PUSH
7639: LD_INT 3
7641: DIV
7642: PPUSH
7643: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7647: LD_ADDR_VAR 0 3
7651: PUSH
7652: LD_INT 22
7654: PUSH
7655: LD_VAR 0 2
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 50
7666: PUSH
7667: EMPTY
7668: LIST
7669: PUSH
7670: LD_INT 2
7672: PUSH
7673: LD_INT 30
7675: PUSH
7676: LD_INT 0
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 30
7685: PUSH
7686: LD_INT 1
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PPUSH
7703: CALL_OW 69
7707: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7708: LD_VAR 0 3
7712: NOT
7713: PUSH
7714: LD_VAR 0 2
7718: PPUSH
7719: CALL_OW 108
7723: NOT
7724: OR
7725: PUSH
7726: LD_EXP 1
7730: PPUSH
7731: LD_VAR 0 2
7735: PPUSH
7736: CALL 6932 0 2
7740: NOT
7741: OR
7742: IFFALSE 7746
// continue ;
7744: GO 7571
// spawn := tmp [ 1 ] ;
7746: LD_ADDR_VAR 0 4
7750: PUSH
7751: LD_VAR 0 3
7755: PUSH
7756: LD_INT 1
7758: ARRAY
7759: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7760: LD_EXP 38
7764: PUSH
7765: LD_VAR 0 2
7769: ARRAY
7770: PUSH
7771: LD_INT 1
7773: ARRAY
7774: PPUSH
7775: LD_VAR 0 4
7779: PPUSH
7780: CALL_OW 250
7784: PPUSH
7785: LD_VAR 0 4
7789: PPUSH
7790: CALL_OW 251
7794: PPUSH
7795: LD_INT 32
7797: PPUSH
7798: LD_INT 1
7800: PPUSH
7801: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7805: LD_ADDR_EXP 38
7809: PUSH
7810: LD_EXP 38
7814: PPUSH
7815: LD_VAR 0 2
7819: PPUSH
7820: LD_EXP 38
7824: PUSH
7825: LD_VAR 0 2
7829: ARRAY
7830: PPUSH
7831: LD_INT 1
7833: PPUSH
7834: CALL_OW 3
7838: PPUSH
7839: CALL_OW 1
7843: ST_TO_ADDR
// end ; end ;
7844: GO 7571
7846: POP
7847: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7848: LD_ADDR_VAR 0 5
7852: PUSH
7853: LD_VAR 0 5
7857: PPUSH
7858: LD_INT 1
7860: PPUSH
7861: LD_INT 8
7863: PPUSH
7864: LD_INT 1
7866: PPUSH
7867: CALL 21093 0 4
7871: ST_TO_ADDR
// until false ;
7872: LD_INT 0
7874: IFFALSE 7551
// end ;
7876: PPOPN 5
7878: END
// every 0 0$1 marked mpActive do
7879: GO 7881
7881: DISABLE
// begin enable ;
7882: ENABLE
// if not mpDisplayStrings then
7883: LD_EXP 36
7887: NOT
7888: IFFALSE 7899
// begin display_strings := [ ] ;
7890: LD_ADDR_OWVAR 47
7894: PUSH
7895: EMPTY
7896: ST_TO_ADDR
// exit ;
7897: GO 7909
// end ; display_strings := mpDisplayStrings ;
7899: LD_ADDR_OWVAR 47
7903: PUSH
7904: LD_EXP 36
7908: ST_TO_ADDR
// end ; end_of_file
7909: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7910: LD_INT 0
7912: PPUSH
7913: PPUSH
7914: PPUSH
7915: PPUSH
7916: PPUSH
7917: PPUSH
7918: PPUSH
7919: PPUSH
7920: PPUSH
// if GetType ( un ) = unit_vehicle then
7921: LD_VAR 0 1
7925: PPUSH
7926: CALL_OW 247
7930: PUSH
7931: LD_INT 2
7933: EQUAL
7934: IFFALSE 7938
// exit ;
7936: GO 8570
// side := GetSide ( un ) ;
7938: LD_ADDR_VAR 0 9
7942: PUSH
7943: LD_VAR 0 1
7947: PPUSH
7948: CALL_OW 255
7952: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7953: LD_EXP 1
7957: PUSH
7958: LD_INT 2
7960: EQUAL
7961: IFFALSE 8037
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7963: LD_VAR 0 1
7967: PPUSH
7968: CALL_OW 266
7972: PUSH
7973: LD_INT 0
7975: PUSH
7976: LD_INT 1
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: IN
7983: IFFALSE 8037
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7985: LD_ADDR_VAR 0 3
7989: PUSH
7990: LD_INT 22
7992: PUSH
7993: LD_VAR 0 9
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PUSH
8002: LD_INT 21
8004: PUSH
8005: LD_INT 1
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PPUSH
8016: CALL_OW 69
8020: PUSH
8021: FOR_IN
8022: IFFALSE 8035
// KillUnit ( i ) ;
8024: LD_VAR 0 3
8028: PPUSH
8029: CALL_OW 66
8033: GO 8021
8035: POP
8036: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8037: LD_VAR 0 1
8041: PPUSH
8042: CALL_OW 257
8046: PUSH
8047: LD_INT 12
8049: PUSH
8050: LD_INT 17
8052: PUSH
8053: LD_INT 15
8055: PUSH
8056: LD_INT 16
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: IN
8065: PUSH
8066: LD_VAR 0 1
8070: PPUSH
8071: CALL_OW 263
8075: PUSH
8076: LD_INT 5
8078: EQUAL
8079: OR
8080: IFFALSE 8299
// begin tag := 0 ;
8082: LD_ADDR_VAR 0 5
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// for i := 1 to 8 do
8090: LD_ADDR_VAR 0 3
8094: PUSH
8095: DOUBLE
8096: LD_INT 1
8098: DEC
8099: ST_TO_ADDR
8100: LD_INT 8
8102: PUSH
8103: FOR_TO
8104: IFFALSE 8138
// if un in mpApePosIndex [ i ] then
8106: LD_VAR 0 1
8110: PUSH
8111: LD_EXP 30
8115: PUSH
8116: LD_VAR 0 3
8120: ARRAY
8121: IN
8122: IFFALSE 8136
// begin tag := i ;
8124: LD_ADDR_VAR 0 5
8128: PUSH
8129: LD_VAR 0 3
8133: ST_TO_ADDR
// break ;
8134: GO 8138
// end ;
8136: GO 8103
8138: POP
8139: POP
// if not tag then
8140: LD_VAR 0 5
8144: NOT
8145: IFFALSE 8149
// exit ;
8147: GO 8570
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8149: LD_ADDR_VAR 0 7
8153: PUSH
8154: LD_EXP 29
8158: PUSH
8159: LD_EXP 5
8163: PUSH
8164: LD_VAR 0 5
8168: ARRAY
8169: ARRAY
8170: ST_TO_ADDR
// if not area then
8171: LD_VAR 0 7
8175: NOT
8176: IFFALSE 8180
// exit ;
8178: GO 8570
// wait ( 4 4$00 ) ;
8180: LD_INT 8400
8182: PPUSH
8183: CALL_OW 67
// repeat wait ( 10 ) ;
8187: LD_INT 10
8189: PPUSH
8190: CALL_OW 67
// until not mpBlockRespThread ;
8194: LD_EXP 39
8198: NOT
8199: IFFALSE 8187
// mpBlockRespThread := true ;
8201: LD_ADDR_EXP 39
8205: PUSH
8206: LD_INT 1
8208: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8209: LD_INT 0
8211: PPUSH
8212: CALL 50672 0 1
// ape := CreateHuman ;
8216: LD_ADDR_VAR 0 4
8220: PUSH
8221: CALL_OW 44
8225: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8226: LD_ADDR_EXP 30
8230: PUSH
8231: LD_EXP 30
8235: PPUSH
8236: LD_VAR 0 5
8240: PPUSH
8241: LD_EXP 30
8245: PUSH
8246: LD_VAR 0 5
8250: ARRAY
8251: PPUSH
8252: LD_VAR 0 4
8256: PPUSH
8257: CALL 54424 0 2
8261: PPUSH
8262: CALL_OW 1
8266: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8267: LD_VAR 0 4
8271: PPUSH
8272: LD_VAR 0 7
8276: PPUSH
8277: LD_INT 0
8279: PPUSH
8280: CALL_OW 49
// wait ( 10 ) ;
8284: LD_INT 10
8286: PPUSH
8287: CALL_OW 67
// mpBlockRespThread := false ;
8291: LD_ADDR_EXP 39
8295: PUSH
8296: LD_INT 0
8298: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8299: LD_VAR 0 1
8303: PPUSH
8304: CALL_OW 247
8308: PUSH
8309: LD_INT 1
8311: EQUAL
8312: PUSH
8313: LD_VAR 0 1
8317: PPUSH
8318: CALL_OW 248
8322: PUSH
8323: LD_INT 0
8325: GREATER
8326: AND
8327: IFFALSE 8570
// begin if not mpRespawn then
8329: LD_EXP 31
8333: NOT
8334: IFFALSE 8338
// exit ;
8336: GO 8570
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8338: LD_VAR 0 9
8342: PPUSH
8343: CALL_OW 108
8347: NOT
8348: PUSH
8349: LD_EXP 1
8353: PPUSH
8354: LD_VAR 0 9
8358: PPUSH
8359: CALL 6932 0 2
8363: NOT
8364: AND
8365: IFFALSE 8369
// exit ;
8367: GO 8570
// side := GetSide ( un ) ;
8369: LD_ADDR_VAR 0 9
8373: PUSH
8374: LD_VAR 0 1
8378: PPUSH
8379: CALL_OW 255
8383: ST_TO_ADDR
// nation := GetNation ( un ) ;
8384: LD_ADDR_VAR 0 8
8388: PUSH
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL_OW 248
8398: ST_TO_ADDR
// class := GetClass ( un ) ;
8399: LD_ADDR_VAR 0 6
8403: PUSH
8404: LD_VAR 0 1
8408: PPUSH
8409: CALL_OW 257
8413: ST_TO_ADDR
// if class > 4 then
8414: LD_VAR 0 6
8418: PUSH
8419: LD_INT 4
8421: GREATER
8422: IFFALSE 8432
// class := 1 ;
8424: LD_ADDR_VAR 0 6
8428: PUSH
8429: LD_INT 1
8431: ST_TO_ADDR
// repeat wait ( 10 ) ;
8432: LD_INT 10
8434: PPUSH
8435: CALL_OW 67
// until not mpBlockRespThread ;
8439: LD_EXP 39
8443: NOT
8444: IFFALSE 8432
// mpBlockRespThread := true ;
8446: LD_ADDR_EXP 39
8450: PUSH
8451: LD_INT 1
8453: ST_TO_ADDR
// uc_side := side ;
8454: LD_ADDR_OWVAR 20
8458: PUSH
8459: LD_VAR 0 9
8463: ST_TO_ADDR
// uc_nation := nation ;
8464: LD_ADDR_OWVAR 21
8468: PUSH
8469: LD_VAR 0 8
8473: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8474: LD_INT 0
8476: PPUSH
8477: LD_VAR 0 6
8481: PPUSH
8482: LD_INT 2
8484: PPUSH
8485: CALL_OW 380
// un := CreateHuman ;
8489: LD_ADDR_VAR 0 1
8493: PUSH
8494: CALL_OW 44
8498: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8499: LD_ADDR_EXP 38
8503: PUSH
8504: LD_EXP 38
8508: PPUSH
8509: LD_VAR 0 9
8513: PPUSH
8514: LD_EXP 38
8518: PUSH
8519: LD_VAR 0 9
8523: ARRAY
8524: PPUSH
8525: LD_EXP 38
8529: PUSH
8530: LD_VAR 0 9
8534: ARRAY
8535: PUSH
8536: LD_INT 1
8538: PLUS
8539: PPUSH
8540: LD_VAR 0 1
8544: PPUSH
8545: CALL_OW 1
8549: PPUSH
8550: CALL_OW 1
8554: ST_TO_ADDR
// wait ( 10 ) ;
8555: LD_INT 10
8557: PPUSH
8558: CALL_OW 67
// mpBlockRespThread := false ;
8562: LD_ADDR_EXP 39
8566: PUSH
8567: LD_INT 0
8569: ST_TO_ADDR
// end ; end ;
8570: LD_VAR 0 2
8574: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8575: LD_INT 0
8577: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8578: LD_VAR 0 1
8582: PPUSH
8583: CALL_OW 266
8587: PUSH
8588: LD_INT 0
8590: PUSH
8591: LD_INT 1
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: IN
8598: IFFALSE 8623
// SetBName ( building , @ & GetSide ( building ) ) ;
8600: LD_VAR 0 1
8604: PPUSH
8605: LD_STRING @
8607: PUSH
8608: LD_VAR 0 1
8612: PPUSH
8613: CALL_OW 255
8617: STR
8618: PPUSH
8619: CALL_OW 500
// end ;
8623: LD_VAR 0 2
8627: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8628: LD_INT 0
8630: PPUSH
8631: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8632: LD_EXP 1
8636: PUSH
8637: LD_INT 2
8639: EQUAL
8640: PUSH
8641: LD_VAR 0 1
8645: PPUSH
8646: CALL_OW 266
8650: PUSH
8651: LD_INT 0
8653: PUSH
8654: LD_INT 1
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: IN
8661: AND
8662: IFFALSE 8727
// begin KillUnit ( building ) ;
8664: LD_VAR 0 1
8668: PPUSH
8669: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8673: LD_ADDR_VAR 0 5
8677: PUSH
8678: LD_INT 22
8680: PUSH
8681: LD_VAR 0 2
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PUSH
8690: LD_INT 21
8692: PUSH
8693: LD_INT 1
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PPUSH
8704: CALL_OW 69
8708: PUSH
8709: FOR_IN
8710: IFFALSE 8723
// KillUnit ( i ) ;
8712: LD_VAR 0 5
8716: PPUSH
8717: CALL_OW 66
8721: GO 8709
8723: POP
8724: POP
// exit ;
8725: GO 8772
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8727: LD_VAR 0 1
8731: PPUSH
8732: CALL_OW 266
8736: PUSH
8737: LD_INT 0
8739: PUSH
8740: LD_INT 1
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: IN
8747: IFFALSE 8772
// SetBName ( building , @ & GetSide ( building ) ) ;
8749: LD_VAR 0 1
8753: PPUSH
8754: LD_STRING @
8756: PUSH
8757: LD_VAR 0 1
8761: PPUSH
8762: CALL_OW 255
8766: STR
8767: PPUSH
8768: CALL_OW 500
// end ; end_of_file
8772: LD_VAR 0 4
8776: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
8777: LD_EXP 37
8781: IFFALSE 9120
8783: GO 8785
8785: DISABLE
8786: LD_INT 0
8788: PPUSH
8789: PPUSH
8790: PPUSH
// begin mpKingPoints := [ ] ;
8791: LD_ADDR_EXP 42
8795: PUSH
8796: EMPTY
8797: ST_TO_ADDR
// if mpTeamGame then
8798: LD_EXP 9
8802: IFFALSE 8856
// begin for i := 1 to Count ( mpTeams ) do
8804: LD_ADDR_VAR 0 1
8808: PUSH
8809: DOUBLE
8810: LD_INT 1
8812: DEC
8813: ST_TO_ADDR
8814: LD_EXP 8
8818: PPUSH
8819: CALL 18815 0 1
8823: PUSH
8824: FOR_TO
8825: IFFALSE 8852
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
8827: LD_ADDR_EXP 42
8831: PUSH
8832: LD_EXP 42
8836: PPUSH
8837: LD_VAR 0 1
8841: PPUSH
8842: LD_INT 0
8844: PPUSH
8845: CALL_OW 1
8849: ST_TO_ADDR
8850: GO 8824
8852: POP
8853: POP
// end else
8854: GO 8899
// begin for i := 1 to 8 do
8856: LD_ADDR_VAR 0 1
8860: PUSH
8861: DOUBLE
8862: LD_INT 1
8864: DEC
8865: ST_TO_ADDR
8866: LD_INT 8
8868: PUSH
8869: FOR_TO
8870: IFFALSE 8897
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
8872: LD_ADDR_EXP 42
8876: PUSH
8877: LD_EXP 42
8881: PPUSH
8882: LD_VAR 0 1
8886: PPUSH
8887: LD_INT 0
8889: PPUSH
8890: CALL_OW 1
8894: ST_TO_ADDR
8895: GO 8869
8897: POP
8898: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
8899: LD_ADDR_VAR 0 3
8903: PUSH
8904: LD_INT 50
8906: PPUSH
8907: LD_INT 0
8909: PPUSH
8910: CALL_OW 517
8914: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
8915: LD_ADDR_VAR 0 1
8919: PUSH
8920: DOUBLE
8921: LD_INT 1
8923: DEC
8924: ST_TO_ADDR
8925: LD_VAR 0 3
8929: PUSH
8930: LD_INT 1
8932: ARRAY
8933: PUSH
8934: FOR_TO
8935: IFFALSE 9002
// for j := 1 to 8 do
8937: LD_ADDR_VAR 0 2
8941: PUSH
8942: DOUBLE
8943: LD_INT 1
8945: DEC
8946: ST_TO_ADDR
8947: LD_INT 8
8949: PUSH
8950: FOR_TO
8951: IFFALSE 8998
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
8953: LD_VAR 0 3
8957: PUSH
8958: LD_INT 1
8960: ARRAY
8961: PUSH
8962: LD_VAR 0 1
8966: ARRAY
8967: PPUSH
8968: LD_VAR 0 3
8972: PUSH
8973: LD_INT 2
8975: ARRAY
8976: PUSH
8977: LD_VAR 0 1
8981: ARRAY
8982: PPUSH
8983: LD_VAR 0 2
8987: PPUSH
8988: LD_INT 12
8990: NEG
8991: PPUSH
8992: CALL_OW 330
8996: GO 8950
8998: POP
8999: POP
9000: GO 8934
9002: POP
9003: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
9004: LD_EXP 32
9008: PPUSH
9009: LD_INT 1
9011: PPUSH
9012: CALL_OW 424
// UpdateCounter ;
9016: CALL 9622 0 0
// repeat wait ( 0 0$1 ) ;
9020: LD_INT 35
9022: PPUSH
9023: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9027: LD_ADDR_VAR 0 3
9031: PUSH
9032: LD_EXP 32
9036: PPUSH
9037: LD_INT 3
9039: PUSH
9040: LD_INT 57
9042: PUSH
9043: EMPTY
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: LD_INT 50
9052: PUSH
9053: EMPTY
9054: LIST
9055: PUSH
9056: LD_INT 2
9058: PUSH
9059: LD_INT 30
9061: PUSH
9062: LD_INT 0
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 30
9071: PUSH
9072: LD_INT 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: LIST
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: LIST
9088: PPUSH
9089: CALL_OW 70
9093: ST_TO_ADDR
// if not tmp then
9094: LD_VAR 0 3
9098: NOT
9099: IFFALSE 9103
// continue ;
9101: GO 9020
// AddPoints ( tmp ) ;
9103: LD_VAR 0 3
9107: PPUSH
9108: CALL 9300 0 1
// UpdateCounter ;
9112: CALL 9622 0 0
// until false ;
9116: LD_INT 0
9118: IFFALSE 9020
// end ;
9120: PPOPN 3
9122: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
9123: LD_EXP 37
9127: PUSH
9128: LD_EXP 35
9132: AND
9133: IFFALSE 9297
9135: GO 9137
9137: DISABLE
9138: LD_INT 0
9140: PPUSH
9141: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
9142: LD_ADDR_VAR 0 2
9146: PUSH
9147: LD_INT 50
9149: PPUSH
9150: LD_INT 0
9152: PPUSH
9153: CALL_OW 517
9157: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
9158: LD_ADDR_VAR 0 1
9162: PUSH
9163: DOUBLE
9164: LD_INT 1
9166: DEC
9167: ST_TO_ADDR
9168: LD_VAR 0 2
9172: PUSH
9173: LD_INT 1
9175: ARRAY
9176: PUSH
9177: FOR_TO
9178: IFFALSE 9219
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
9180: LD_VAR 0 2
9184: PUSH
9185: LD_INT 1
9187: ARRAY
9188: PUSH
9189: LD_VAR 0 1
9193: ARRAY
9194: PPUSH
9195: LD_VAR 0 2
9199: PUSH
9200: LD_INT 2
9202: ARRAY
9203: PUSH
9204: LD_VAR 0 1
9208: ARRAY
9209: PPUSH
9210: LD_INT 125
9212: PPUSH
9213: CALL_OW 495
9217: GO 9177
9219: POP
9220: POP
// repeat wait ( mpEmissions ) ;
9221: LD_EXP 35
9225: PPUSH
9226: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
9230: LD_ADDR_VAR 0 1
9234: PUSH
9235: DOUBLE
9236: LD_INT 1
9238: DEC
9239: ST_TO_ADDR
9240: LD_VAR 0 2
9244: PUSH
9245: LD_INT 1
9247: ARRAY
9248: PUSH
9249: FOR_TO
9250: IFFALSE 9291
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
9252: LD_VAR 0 2
9256: PUSH
9257: LD_INT 1
9259: ARRAY
9260: PUSH
9261: LD_VAR 0 1
9265: ARRAY
9266: PPUSH
9267: LD_VAR 0 2
9271: PUSH
9272: LD_INT 2
9274: ARRAY
9275: PUSH
9276: LD_VAR 0 1
9280: ARRAY
9281: PPUSH
9282: LD_INT 15
9284: PPUSH
9285: CALL_OW 495
9289: GO 9249
9291: POP
9292: POP
// until false ;
9293: LD_INT 0
9295: IFFALSE 9221
// end ;
9297: PPOPN 2
9299: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
9300: LD_INT 0
9302: PPUSH
9303: PPUSH
9304: PPUSH
9305: PPUSH
9306: PPUSH
// if mpTeamGame then
9307: LD_EXP 9
9311: IFFALSE 9508
// begin first := depots [ 1 ] ;
9313: LD_ADDR_VAR 0 4
9317: PUSH
9318: LD_VAR 0 1
9322: PUSH
9323: LD_INT 1
9325: ARRAY
9326: ST_TO_ADDR
// side := GetSide ( first ) ;
9327: LD_ADDR_VAR 0 6
9331: PUSH
9332: LD_VAR 0 4
9336: PPUSH
9337: CALL_OW 255
9341: ST_TO_ADDR
// for i := 1 to mpTeams do
9342: LD_ADDR_VAR 0 3
9346: PUSH
9347: DOUBLE
9348: LD_INT 1
9350: DEC
9351: ST_TO_ADDR
9352: LD_EXP 8
9356: PUSH
9357: FOR_TO
9358: IFFALSE 9392
// if side in mpTeams [ i ] then
9360: LD_VAR 0 6
9364: PUSH
9365: LD_EXP 8
9369: PUSH
9370: LD_VAR 0 3
9374: ARRAY
9375: IN
9376: IFFALSE 9390
// begin team := i ;
9378: LD_ADDR_VAR 0 5
9382: PUSH
9383: LD_VAR 0 3
9387: ST_TO_ADDR
// break ;
9388: GO 9392
// end ;
9390: GO 9357
9392: POP
9393: POP
// if not team then
9394: LD_VAR 0 5
9398: NOT
9399: IFFALSE 9403
// exit ;
9401: GO 9617
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
9403: LD_EXP 32
9407: PPUSH
9408: LD_INT 81
9410: PUSH
9411: LD_VAR 0 6
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 70
9424: IFFALSE 9428
// exit ;
9426: GO 9617
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
9428: LD_ADDR_EXP 42
9432: PUSH
9433: LD_EXP 42
9437: PPUSH
9438: LD_VAR 0 5
9442: PPUSH
9443: LD_EXP 42
9447: PUSH
9448: LD_VAR 0 5
9452: ARRAY
9453: PUSH
9454: LD_INT 1
9456: PLUS
9457: PPUSH
9458: CALL_OW 1
9462: ST_TO_ADDR
// for i in mpTeams [ team ] do
9463: LD_ADDR_VAR 0 3
9467: PUSH
9468: LD_EXP 8
9472: PUSH
9473: LD_VAR 0 5
9477: ARRAY
9478: PUSH
9479: FOR_IN
9480: IFFALSE 9504
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
9482: LD_VAR 0 3
9486: PPUSH
9487: LD_EXP 42
9491: PUSH
9492: LD_VAR 0 5
9496: ARRAY
9497: PPUSH
9498: CALL_OW 506
9502: GO 9479
9504: POP
9505: POP
// end else
9506: GO 9617
// begin first := depots [ 1 ] ;
9508: LD_ADDR_VAR 0 4
9512: PUSH
9513: LD_VAR 0 1
9517: PUSH
9518: LD_INT 1
9520: ARRAY
9521: ST_TO_ADDR
// side := GetSide ( first ) ;
9522: LD_ADDR_VAR 0 6
9526: PUSH
9527: LD_VAR 0 4
9531: PPUSH
9532: CALL_OW 255
9536: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
9537: LD_EXP 32
9541: PPUSH
9542: LD_INT 81
9544: PUSH
9545: LD_VAR 0 6
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PPUSH
9554: CALL_OW 70
9558: IFFALSE 9562
// exit ;
9560: GO 9617
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
9562: LD_ADDR_EXP 42
9566: PUSH
9567: LD_EXP 42
9571: PPUSH
9572: LD_VAR 0 6
9576: PPUSH
9577: LD_EXP 42
9581: PUSH
9582: LD_VAR 0 6
9586: ARRAY
9587: PUSH
9588: LD_INT 1
9590: PLUS
9591: PPUSH
9592: CALL_OW 1
9596: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
9597: LD_VAR 0 6
9601: PPUSH
9602: LD_EXP 42
9606: PUSH
9607: LD_VAR 0 6
9611: ARRAY
9612: PPUSH
9613: CALL_OW 506
// end ; end ;
9617: LD_VAR 0 2
9621: RET
// function UpdateCounter ; var i ; begin
9622: LD_INT 0
9624: PPUSH
9625: PPUSH
// result := [ ] ;
9626: LD_ADDR_VAR 0 1
9630: PUSH
9631: EMPTY
9632: ST_TO_ADDR
// if mpTeamGame then
9633: LD_EXP 9
9637: IFFALSE 9704
// begin for i := 1 to mpTeams do
9639: LD_ADDR_VAR 0 2
9643: PUSH
9644: DOUBLE
9645: LD_INT 1
9647: DEC
9648: ST_TO_ADDR
9649: LD_EXP 8
9653: PUSH
9654: FOR_TO
9655: IFFALSE 9700
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
9657: LD_ADDR_VAR 0 1
9661: PUSH
9662: LD_VAR 0 1
9666: PUSH
9667: LD_STRING #KingoftheHill-Team
9669: PUSH
9670: LD_VAR 0 2
9674: PUSH
9675: LD_EXP 42
9679: PUSH
9680: LD_VAR 0 2
9684: ARRAY
9685: PUSH
9686: LD_EXP 33
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: ADD
9697: ST_TO_ADDR
9698: GO 9654
9700: POP
9701: POP
// end else
9702: GO 9777
// begin for i := 1 to 8 do
9704: LD_ADDR_VAR 0 2
9708: PUSH
9709: DOUBLE
9710: LD_INT 1
9712: DEC
9713: ST_TO_ADDR
9714: LD_INT 8
9716: PUSH
9717: FOR_TO
9718: IFFALSE 9775
// if mpSidePositions [ i ] then
9720: LD_EXP 5
9724: PUSH
9725: LD_VAR 0 2
9729: ARRAY
9730: IFFALSE 9773
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
9732: LD_ADDR_VAR 0 1
9736: PUSH
9737: LD_VAR 0 1
9741: PUSH
9742: LD_STRING #KingoftheHill-Player
9744: PUSH
9745: LD_VAR 0 2
9749: PUSH
9750: LD_EXP 42
9754: PUSH
9755: LD_VAR 0 2
9759: ARRAY
9760: PUSH
9761: LD_EXP 33
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: ADD
9772: ST_TO_ADDR
9773: GO 9717
9775: POP
9776: POP
// end ; mpDisplayStrings := result ;
9777: LD_ADDR_EXP 36
9781: PUSH
9782: LD_VAR 0 1
9786: ST_TO_ADDR
// end ;
9787: LD_VAR 0 1
9791: RET
// export function HowMuchPointsKing ( side ) ; begin
9792: LD_INT 0
9794: PPUSH
// result := HowMuchPoints ( side ) ;
9795: LD_ADDR_VAR 0 2
9799: PUSH
9800: LD_VAR 0 1
9804: PPUSH
9805: CALL 9815 0 1
9809: ST_TO_ADDR
// end ;
9810: LD_VAR 0 2
9814: RET
// function HowMuchPoints ( side ) ; var i ; begin
9815: LD_INT 0
9817: PPUSH
9818: PPUSH
// if mpTeamGame then
9819: LD_EXP 9
9823: IFFALSE 9892
// begin for i := 1 to Count ( mpTeams ) do
9825: LD_ADDR_VAR 0 3
9829: PUSH
9830: DOUBLE
9831: LD_INT 1
9833: DEC
9834: ST_TO_ADDR
9835: LD_EXP 8
9839: PPUSH
9840: CALL 18815 0 1
9844: PUSH
9845: FOR_TO
9846: IFFALSE 9888
// begin if side in mpTeams [ i ] then
9848: LD_VAR 0 1
9852: PUSH
9853: LD_EXP 8
9857: PUSH
9858: LD_VAR 0 3
9862: ARRAY
9863: IN
9864: IFFALSE 9886
// begin result := mpKingPoints [ i ] ;
9866: LD_ADDR_VAR 0 2
9870: PUSH
9871: LD_EXP 42
9875: PUSH
9876: LD_VAR 0 3
9880: ARRAY
9881: ST_TO_ADDR
// exit ;
9882: POP
9883: POP
9884: GO 9908
// end ; end ;
9886: GO 9845
9888: POP
9889: POP
// end else
9890: GO 9908
// result := mpKingPoints [ side ] ;
9892: LD_ADDR_VAR 0 2
9896: PUSH
9897: LD_EXP 42
9901: PUSH
9902: LD_VAR 0 1
9906: ARRAY
9907: ST_TO_ADDR
// end ;
9908: LD_VAR 0 2
9912: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
9913: LD_EXP 37
9917: PUSH
9918: CALL 10240 0 0
9922: AND
9923: PUSH
9924: LD_OWVAR 4
9928: AND
9929: IFFALSE 10165
9931: GO 9933
9933: DISABLE
9934: LD_INT 0
9936: PPUSH
9937: PPUSH
// begin canWin := false ;
9938: LD_ADDR_VAR 0 2
9942: PUSH
9943: LD_INT 0
9945: ST_TO_ADDR
// if not HasPower ( your_side ) then
9946: LD_OWVAR 2
9950: PPUSH
9951: CALL 10280 0 1
9955: NOT
9956: IFFALSE 9967
// begin Multiplayer_Loose_Message ;
9958: CALL_OW 521
// enable ( mpLose ) ;
9962: LD_INT 102
9964: ENABLE_MARKED
// end else
9965: GO 10165
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
9967: LD_ADDR_VAR 0 2
9971: PUSH
9972: LD_OWVAR 2
9976: PPUSH
9977: CALL 9815 0 1
9981: PUSH
9982: LD_EXP 33
9986: GREATEREQUAL
9987: PUSH
9988: LD_OWVAR 2
9992: PPUSH
9993: CALL 10280 0 1
9997: AND
9998: PUSH
9999: CALL 10168 0 0
10003: NOT
10004: OR
10005: ST_TO_ADDR
// for i := 1 to 8 do
10006: LD_ADDR_VAR 0 1
10010: PUSH
10011: DOUBLE
10012: LD_INT 1
10014: DEC
10015: ST_TO_ADDR
10016: LD_INT 8
10018: PUSH
10019: FOR_TO
10020: IFFALSE 10151
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10022: LD_EXP 5
10026: PUSH
10027: LD_VAR 0 1
10031: ARRAY
10032: PUSH
10033: LD_VAR 0 1
10037: PPUSH
10038: CALL_OW 108
10042: AND
10043: PUSH
10044: LD_VAR 0 1
10048: PUSH
10049: LD_OWVAR 2
10053: NONEQUAL
10054: AND
10055: IFFALSE 10149
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10057: LD_EXP 6
10061: PUSH
10062: LD_VAR 0 1
10066: ARRAY
10067: NOT
10068: PUSH
10069: LD_EXP 6
10073: PUSH
10074: LD_VAR 0 1
10078: ARRAY
10079: PUSH
10080: LD_EXP 6
10084: PUSH
10085: LD_OWVAR 2
10089: ARRAY
10090: NONEQUAL
10091: PUSH
10092: LD_OWVAR 2
10096: PPUSH
10097: LD_VAR 0 1
10101: PPUSH
10102: CALL_OW 81
10106: PUSH
10107: LD_INT 1
10109: NONEQUAL
10110: AND
10111: OR
10112: IFFALSE 10149
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
10114: LD_VAR 0 1
10118: PPUSH
10119: CALL 9815 0 1
10123: PUSH
10124: LD_EXP 33
10128: GREATEREQUAL
10129: PUSH
10130: LD_VAR 0 1
10134: PPUSH
10135: CALL 10280 0 1
10139: AND
10140: IFFALSE 10149
// begin enable ( mpLose ) ;
10142: LD_INT 102
10144: ENABLE_MARKED
// exit ;
10145: POP
10146: POP
10147: GO 10165
// end ;
10149: GO 10019
10151: POP
10152: POP
// if canWin then
10153: LD_VAR 0 2
10157: IFFALSE 10164
// enable ( mpWin ) else
10159: LD_INT 101
10161: ENABLE_MARKED
10162: GO 10165
// enable ;
10164: ENABLE
// end ; end ;
10165: PPOPN 2
10167: END
// function EnemiesInGame ; var i ; begin
10168: LD_INT 0
10170: PPUSH
10171: PPUSH
// result := false ;
10172: LD_ADDR_VAR 0 1
10176: PUSH
10177: LD_INT 0
10179: ST_TO_ADDR
// for i := 1 to 8 do
10180: LD_ADDR_VAR 0 2
10184: PUSH
10185: DOUBLE
10186: LD_INT 1
10188: DEC
10189: ST_TO_ADDR
10190: LD_INT 8
10192: PUSH
10193: FOR_TO
10194: IFFALSE 10233
// if i <> your_side and HasPower ( i ) then
10196: LD_VAR 0 2
10200: PUSH
10201: LD_OWVAR 2
10205: NONEQUAL
10206: PUSH
10207: LD_VAR 0 2
10211: PPUSH
10212: CALL 10280 0 1
10216: AND
10217: IFFALSE 10231
// begin result := true ;
10219: LD_ADDR_VAR 0 1
10223: PUSH
10224: LD_INT 1
10226: ST_TO_ADDR
// exit ;
10227: POP
10228: POP
10229: GO 10235
// end ;
10231: GO 10193
10233: POP
10234: POP
// end ;
10235: LD_VAR 0 1
10239: RET
// function CanWinLoose ; begin
10240: LD_INT 0
10242: PPUSH
// result := true ;
10243: LD_ADDR_VAR 0 1
10247: PUSH
10248: LD_INT 1
10250: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10251: CALL_OW 531
10255: PUSH
10256: CALL_OW 519
10260: PUSH
10261: LD_INT 1
10263: GREATER
10264: AND
10265: IFFALSE 10275
// result := false ;
10267: LD_ADDR_VAR 0 1
10271: PUSH
10272: LD_INT 0
10274: ST_TO_ADDR
// end ;
10275: LD_VAR 0 1
10279: RET
// function HasPower ( i ) ; begin
10280: LD_INT 0
10282: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10283: LD_ADDR_VAR 0 2
10287: PUSH
10288: LD_INT 22
10290: PUSH
10291: LD_VAR 0 1
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 2
10302: PUSH
10303: LD_INT 21
10305: PUSH
10306: LD_INT 1
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 33
10315: PUSH
10316: LD_INT 3
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 33
10325: PUSH
10326: LD_INT 5
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PPUSH
10343: CALL_OW 69
10347: ST_TO_ADDR
// end ; end_of_file
10348: LD_VAR 0 2
10352: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10353: LD_EXP 37
10357: PUSH
10358: CALL 10563 0 0
10362: AND
10363: PUSH
10364: LD_OWVAR 4
10368: AND
10369: IFFALSE 10560
10371: GO 10373
10373: DISABLE
10374: LD_INT 0
10376: PPUSH
10377: PPUSH
// begin canWin := false ;
10378: LD_ADDR_VAR 0 2
10382: PUSH
10383: LD_INT 0
10385: ST_TO_ADDR
// if not HasPower ( your_side ) then
10386: LD_OWVAR 2
10390: PPUSH
10391: CALL 10603 0 1
10395: NOT
10396: IFFALSE 10407
// begin Multiplayer_Loose_Message ;
10398: CALL_OW 521
// enable ( mpLose ) ;
10402: LD_INT 102
10404: ENABLE_MARKED
// end else
10405: GO 10560
// begin canWin := true ;
10407: LD_ADDR_VAR 0 2
10411: PUSH
10412: LD_INT 1
10414: ST_TO_ADDR
// for i := 1 to 8 do
10415: LD_ADDR_VAR 0 1
10419: PUSH
10420: DOUBLE
10421: LD_INT 1
10423: DEC
10424: ST_TO_ADDR
10425: LD_INT 8
10427: PUSH
10428: FOR_TO
10429: IFFALSE 10546
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10431: LD_EXP 5
10435: PUSH
10436: LD_VAR 0 1
10440: ARRAY
10441: PUSH
10442: LD_VAR 0 1
10446: PPUSH
10447: CALL_OW 108
10451: AND
10452: PUSH
10453: LD_VAR 0 1
10457: PUSH
10458: LD_OWVAR 2
10462: NONEQUAL
10463: AND
10464: IFFALSE 10544
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10466: LD_EXP 6
10470: PUSH
10471: LD_VAR 0 1
10475: ARRAY
10476: NOT
10477: PUSH
10478: LD_EXP 6
10482: PUSH
10483: LD_VAR 0 1
10487: ARRAY
10488: PUSH
10489: LD_EXP 6
10493: PUSH
10494: LD_OWVAR 2
10498: ARRAY
10499: NONEQUAL
10500: PUSH
10501: LD_OWVAR 2
10505: PPUSH
10506: LD_VAR 0 1
10510: PPUSH
10511: CALL_OW 81
10515: PUSH
10516: LD_INT 1
10518: NONEQUAL
10519: AND
10520: OR
10521: IFFALSE 10544
// if HasPower ( i ) then
10523: LD_VAR 0 1
10527: PPUSH
10528: CALL 10603 0 1
10532: IFFALSE 10544
// begin canWin := false ;
10534: LD_ADDR_VAR 0 2
10538: PUSH
10539: LD_INT 0
10541: ST_TO_ADDR
// break ;
10542: GO 10546
// end ;
10544: GO 10428
10546: POP
10547: POP
// if canWin then
10548: LD_VAR 0 2
10552: IFFALSE 10559
// enable ( mpWin ) else
10554: LD_INT 101
10556: ENABLE_MARKED
10557: GO 10560
// enable ;
10559: ENABLE
// end ; end ;
10560: PPOPN 2
10562: END
// function CanWinLoose ; begin
10563: LD_INT 0
10565: PPUSH
// result := true ;
10566: LD_ADDR_VAR 0 1
10570: PUSH
10571: LD_INT 1
10573: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10574: CALL_OW 531
10578: PUSH
10579: CALL_OW 519
10583: PUSH
10584: LD_INT 1
10586: GREATER
10587: AND
10588: IFFALSE 10598
// result := false ;
10590: LD_ADDR_VAR 0 1
10594: PUSH
10595: LD_INT 0
10597: ST_TO_ADDR
// end ;
10598: LD_VAR 0 1
10602: RET
// function HasPower ( i ) ; begin
10603: LD_INT 0
10605: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10606: LD_ADDR_VAR 0 2
10610: PUSH
10611: LD_INT 22
10613: PUSH
10614: LD_VAR 0 1
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: PUSH
10623: LD_INT 2
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 33
10638: PUSH
10639: LD_INT 3
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 33
10648: PUSH
10649: LD_INT 5
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PPUSH
10666: CALL_OW 69
10670: ST_TO_ADDR
// end ; end_of_file
10671: LD_VAR 0 2
10675: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10676: LD_EXP 37
10680: IFFALSE 10723
10682: GO 10684
10684: DISABLE
10685: LD_INT 0
10687: PPUSH
// begin for i := 1 to 8 do
10688: LD_ADDR_VAR 0 1
10692: PUSH
10693: DOUBLE
10694: LD_INT 1
10696: DEC
10697: ST_TO_ADDR
10698: LD_INT 8
10700: PUSH
10701: FOR_TO
10702: IFFALSE 10721
// SetRestrict ( b_depot , i , state_disabled ) ;
10704: LD_INT 0
10706: PPUSH
10707: LD_VAR 0 1
10711: PPUSH
10712: LD_INT 0
10714: PPUSH
10715: CALL_OW 324
10719: GO 10701
10721: POP
10722: POP
// end ;
10723: PPOPN 1
10725: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10726: LD_EXP 37
10730: PUSH
10731: CALL 10936 0 0
10735: AND
10736: PUSH
10737: LD_OWVAR 4
10741: AND
10742: IFFALSE 10933
10744: GO 10746
10746: DISABLE
10747: LD_INT 0
10749: PPUSH
10750: PPUSH
// begin canWin := false ;
10751: LD_ADDR_VAR 0 2
10755: PUSH
10756: LD_INT 0
10758: ST_TO_ADDR
// if not HasPower ( your_side ) then
10759: LD_OWVAR 2
10763: PPUSH
10764: CALL 10976 0 1
10768: NOT
10769: IFFALSE 10780
// begin Multiplayer_Loose_Message ;
10771: CALL_OW 521
// enable ( mpLose ) ;
10775: LD_INT 102
10777: ENABLE_MARKED
// end else
10778: GO 10933
// begin canWin := true ;
10780: LD_ADDR_VAR 0 2
10784: PUSH
10785: LD_INT 1
10787: ST_TO_ADDR
// for i := 1 to 8 do
10788: LD_ADDR_VAR 0 1
10792: PUSH
10793: DOUBLE
10794: LD_INT 1
10796: DEC
10797: ST_TO_ADDR
10798: LD_INT 8
10800: PUSH
10801: FOR_TO
10802: IFFALSE 10919
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10804: LD_EXP 5
10808: PUSH
10809: LD_VAR 0 1
10813: ARRAY
10814: PUSH
10815: LD_VAR 0 1
10819: PPUSH
10820: CALL_OW 108
10824: AND
10825: PUSH
10826: LD_VAR 0 1
10830: PUSH
10831: LD_OWVAR 2
10835: NONEQUAL
10836: AND
10837: IFFALSE 10917
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10839: LD_EXP 6
10843: PUSH
10844: LD_VAR 0 1
10848: ARRAY
10849: NOT
10850: PUSH
10851: LD_EXP 6
10855: PUSH
10856: LD_VAR 0 1
10860: ARRAY
10861: PUSH
10862: LD_EXP 6
10866: PUSH
10867: LD_OWVAR 2
10871: ARRAY
10872: NONEQUAL
10873: PUSH
10874: LD_OWVAR 2
10878: PPUSH
10879: LD_VAR 0 1
10883: PPUSH
10884: CALL_OW 81
10888: PUSH
10889: LD_INT 1
10891: NONEQUAL
10892: AND
10893: OR
10894: IFFALSE 10917
// if HasPower ( i ) then
10896: LD_VAR 0 1
10900: PPUSH
10901: CALL 10976 0 1
10905: IFFALSE 10917
// begin canWin := false ;
10907: LD_ADDR_VAR 0 2
10911: PUSH
10912: LD_INT 0
10914: ST_TO_ADDR
// break ;
10915: GO 10919
// end ;
10917: GO 10801
10919: POP
10920: POP
// if canWin then
10921: LD_VAR 0 2
10925: IFFALSE 10932
// enable ( mpWin ) else
10927: LD_INT 101
10929: ENABLE_MARKED
10930: GO 10933
// enable ;
10932: ENABLE
// end ; end ;
10933: PPOPN 2
10935: END
// function CanWinLoose ; begin
10936: LD_INT 0
10938: PPUSH
// result := true ;
10939: LD_ADDR_VAR 0 1
10943: PUSH
10944: LD_INT 1
10946: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10947: CALL_OW 531
10951: PUSH
10952: CALL_OW 519
10956: PUSH
10957: LD_INT 1
10959: GREATER
10960: AND
10961: IFFALSE 10971
// result := false ;
10963: LD_ADDR_VAR 0 1
10967: PUSH
10968: LD_INT 0
10970: ST_TO_ADDR
// end ;
10971: LD_VAR 0 1
10975: RET
// function HasPower ( i ) ; begin
10976: LD_INT 0
10978: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10979: LD_INT 22
10981: PUSH
10982: LD_VAR 0 1
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 2
10993: PUSH
10994: LD_INT 30
10996: PUSH
10997: LD_INT 0
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: LD_INT 30
11006: PUSH
11007: LD_INT 1
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: NOT
11028: IFFALSE 11032
// exit ;
11030: GO 11097
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11032: LD_ADDR_VAR 0 2
11036: PUSH
11037: LD_INT 22
11039: PUSH
11040: LD_VAR 0 1
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: LD_INT 2
11051: PUSH
11052: LD_INT 21
11054: PUSH
11055: LD_INT 1
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: LD_INT 33
11064: PUSH
11065: LD_INT 3
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PUSH
11072: LD_INT 33
11074: PUSH
11075: LD_INT 5
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PPUSH
11092: CALL_OW 69
11096: ST_TO_ADDR
// end ; end_of_file
11097: LD_VAR 0 2
11101: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
11102: LD_VAR 0 1
11106: PUSH
11107: LD_INT 200
11109: DOUBLE
11110: GREATEREQUAL
11111: IFFALSE 11119
11113: LD_INT 299
11115: DOUBLE
11116: LESSEQUAL
11117: IFTRUE 11121
11119: GO 11153
11121: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
11122: LD_VAR 0 1
11126: PPUSH
11127: LD_VAR 0 2
11131: PPUSH
11132: LD_VAR 0 3
11136: PPUSH
11137: LD_VAR 0 4
11141: PPUSH
11142: LD_VAR 0 5
11146: PPUSH
11147: CALL 11930 0 5
11151: GO 11230
11153: LD_INT 300
11155: DOUBLE
11156: GREATEREQUAL
11157: IFFALSE 11165
11159: LD_INT 399
11161: DOUBLE
11162: LESSEQUAL
11163: IFTRUE 11167
11165: GO 11229
11167: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
11168: LD_VAR 0 1
11172: PPUSH
11173: LD_VAR 0 2
11177: PPUSH
11178: LD_VAR 0 3
11182: PPUSH
11183: LD_VAR 0 4
11187: PPUSH
11188: LD_VAR 0 5
11192: PPUSH
11193: LD_VAR 0 6
11197: PPUSH
11198: LD_VAR 0 7
11202: PPUSH
11203: LD_VAR 0 8
11207: PPUSH
11208: LD_VAR 0 9
11212: PPUSH
11213: LD_VAR 0 10
11217: PPUSH
11218: LD_VAR 0 11
11222: PPUSH
11223: CALL 60162 0 11
11227: GO 11230
11229: POP
// end ;
11230: PPOPN 11
11232: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
11233: LD_VAR 0 1
11237: PPUSH
11238: LD_VAR 0 2
11242: PPUSH
11243: LD_VAR 0 3
11247: PPUSH
11248: LD_VAR 0 4
11252: PPUSH
11253: LD_VAR 0 5
11257: PPUSH
11258: CALL 11315 0 5
// end ; end_of_file
11262: PPOPN 5
11264: END
// export function SOS_UnitDestroyed ( un ) ; begin
11265: LD_INT 0
11267: PPUSH
// ComRadiation ( un ) ;
11268: LD_VAR 0 1
11272: PPUSH
11273: CALL 12334 0 1
// end ;
11277: LD_VAR 0 2
11281: RET
// export function SOS_UnitKamikazed ( un ) ; begin
11282: LD_INT 0
11284: PPUSH
// ComRadiation ( un ) ;
11285: LD_VAR 0 1
11289: PPUSH
11290: CALL 12334 0 1
// end ;
11294: LD_VAR 0 2
11298: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
11299: LD_INT 0
11301: PPUSH
// end ;
11302: LD_VAR 0 4
11306: RET
// export function SOS_Command ( cmd ) ; begin
11307: LD_INT 0
11309: PPUSH
// end ;
11310: LD_VAR 0 2
11314: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
11315: LD_INT 0
11317: PPUSH
// end ;
11318: LD_VAR 0 6
11322: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
11327: PPUSH
11328: PPUSH
// if not vehicle or not factory then
11329: LD_VAR 0 1
11333: NOT
11334: PUSH
11335: LD_VAR 0 2
11339: NOT
11340: OR
11341: IFFALSE 11345
// exit ;
11343: GO 11925
// if not factoryWaypoints then
11345: LD_EXP 53
11349: NOT
11350: IFFALSE 11354
// exit ;
11352: GO 11925
// for i := 1 to Count ( factoryWaypoints ) do
11354: LD_ADDR_VAR 0 4
11358: PUSH
11359: DOUBLE
11360: LD_INT 1
11362: DEC
11363: ST_TO_ADDR
11364: LD_EXP 53
11368: PPUSH
11369: CALL 18815 0 1
11373: PUSH
11374: FOR_TO
11375: IFFALSE 11923
// if factoryWaypoints [ i ] [ 2 ] = factory then
11377: LD_EXP 53
11381: PUSH
11382: LD_VAR 0 4
11386: ARRAY
11387: PUSH
11388: LD_INT 2
11390: ARRAY
11391: PUSH
11392: LD_VAR 0 2
11396: EQUAL
11397: IFFALSE 11921
// begin if GetControl ( vehicle ) = control_manual then
11399: LD_VAR 0 1
11403: PPUSH
11404: CALL_OW 263
11408: PUSH
11409: LD_INT 1
11411: EQUAL
11412: IFFALSE 11774
// begin driver := IsDrivenBy ( vehicle ) ;
11414: LD_ADDR_VAR 0 5
11418: PUSH
11419: LD_VAR 0 1
11423: PPUSH
11424: CALL_OW 311
11428: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
11429: LD_VAR 0 5
11433: PUSH
11434: LD_EXP 54
11438: IN
11439: PUSH
11440: LD_VAR 0 1
11444: PUSH
11445: LD_EXP 54
11449: IN
11450: OR
11451: IFFALSE 11457
// exit ;
11453: POP
11454: POP
11455: GO 11925
// if not HasTask ( driver ) then
11457: LD_VAR 0 5
11461: PPUSH
11462: CALL_OW 314
11466: NOT
11467: IFFALSE 11772
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
11469: LD_ADDR_EXP 54
11473: PUSH
11474: LD_EXP 54
11478: PPUSH
11479: LD_VAR 0 5
11483: PPUSH
11484: CALL 54424 0 2
11488: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
11489: LD_ADDR_EXP 54
11493: PUSH
11494: LD_EXP 54
11498: PPUSH
11499: LD_VAR 0 1
11503: PPUSH
11504: CALL 54424 0 2
11508: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11509: LD_ADDR_VAR 0 6
11513: PUSH
11514: LD_EXP 53
11518: PUSH
11519: LD_VAR 0 4
11523: ARRAY
11524: PUSH
11525: LD_INT 3
11527: ARRAY
11528: PPUSH
11529: LD_EXP 53
11533: PUSH
11534: LD_VAR 0 4
11538: ARRAY
11539: PUSH
11540: LD_INT 4
11542: ARRAY
11543: PPUSH
11544: CALL_OW 428
11548: ST_TO_ADDR
// if hex then
11549: LD_VAR 0 6
11553: IFFALSE 11571
// ComMoveUnit ( driver , hex ) else
11555: LD_VAR 0 5
11559: PPUSH
11560: LD_VAR 0 6
11564: PPUSH
11565: CALL_OW 112
11569: GO 11655
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
11571: LD_VAR 0 1
11575: PPUSH
11576: LD_EXP 53
11580: PUSH
11581: LD_VAR 0 4
11585: ARRAY
11586: PUSH
11587: LD_INT 3
11589: ARRAY
11590: PPUSH
11591: LD_EXP 53
11595: PUSH
11596: LD_VAR 0 4
11600: ARRAY
11601: PUSH
11602: LD_INT 4
11604: ARRAY
11605: PPUSH
11606: CALL_OW 297
11610: PUSH
11611: LD_INT 0
11613: GREATER
11614: IFFALSE 11655
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11616: LD_VAR 0 5
11620: PPUSH
11621: LD_EXP 53
11625: PUSH
11626: LD_VAR 0 4
11630: ARRAY
11631: PUSH
11632: LD_INT 3
11634: ARRAY
11635: PPUSH
11636: LD_EXP 53
11640: PUSH
11641: LD_VAR 0 4
11645: ARRAY
11646: PUSH
11647: LD_INT 4
11649: ARRAY
11650: PPUSH
11651: CALL_OW 111
// AddComExitVehicle ( driver ) ;
11655: LD_VAR 0 5
11659: PPUSH
11660: CALL_OW 181
// if Multiplayer then
11664: LD_OWVAR 4
11668: IFFALSE 11717
// begin repeat wait ( 10 ) ;
11670: LD_INT 10
11672: PPUSH
11673: CALL_OW 67
// until not IsInUnit ( driver ) ;
11677: LD_VAR 0 5
11681: PPUSH
11682: CALL_OW 310
11686: NOT
11687: IFFALSE 11670
// if not HasTask ( driver ) then
11689: LD_VAR 0 5
11693: PPUSH
11694: CALL_OW 314
11698: NOT
11699: IFFALSE 11715
// ComEnterUnit ( driver , factory ) ;
11701: LD_VAR 0 5
11705: PPUSH
11706: LD_VAR 0 2
11710: PPUSH
11711: CALL_OW 120
// end else
11715: GO 11731
// AddComEnterUnit ( driver , factory ) ;
11717: LD_VAR 0 5
11721: PPUSH
11722: LD_VAR 0 2
11726: PPUSH
11727: CALL_OW 180
// wait ( 0 0$1 ) ;
11731: LD_INT 35
11733: PPUSH
11734: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
11738: LD_ADDR_EXP 54
11742: PUSH
11743: LD_EXP 54
11747: PUSH
11748: LD_VAR 0 5
11752: DIFF
11753: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
11754: LD_ADDR_EXP 54
11758: PUSH
11759: LD_EXP 54
11763: PUSH
11764: LD_VAR 0 1
11768: DIFF
11769: ST_TO_ADDR
// break ;
11770: GO 11923
// end ; end else
11772: GO 11921
// if GetControl ( vehicle ) = control_remote then
11774: LD_VAR 0 1
11778: PPUSH
11779: CALL_OW 263
11783: PUSH
11784: LD_INT 2
11786: EQUAL
11787: IFFALSE 11873
// begin wait ( 0 0$2 ) ;
11789: LD_INT 70
11791: PPUSH
11792: CALL_OW 67
// repeat wait ( 10 ) ;
11796: LD_INT 10
11798: PPUSH
11799: CALL_OW 67
// Connect ( vehicle ) ;
11803: LD_VAR 0 1
11807: PPUSH
11808: CALL 25021 0 1
// until IsControledBy ( vehicle ) ;
11812: LD_VAR 0 1
11816: PPUSH
11817: CALL_OW 312
11821: IFFALSE 11796
// wait ( 10 ) ;
11823: LD_INT 10
11825: PPUSH
11826: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11830: LD_VAR 0 1
11834: PPUSH
11835: LD_EXP 53
11839: PUSH
11840: LD_VAR 0 4
11844: ARRAY
11845: PUSH
11846: LD_INT 3
11848: ARRAY
11849: PPUSH
11850: LD_EXP 53
11854: PUSH
11855: LD_VAR 0 4
11859: ARRAY
11860: PUSH
11861: LD_INT 4
11863: ARRAY
11864: PPUSH
11865: CALL_OW 111
// break ;
11869: GO 11923
// end else
11871: GO 11921
// begin wait ( 0 0$3 ) ;
11873: LD_INT 105
11875: PPUSH
11876: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11880: LD_VAR 0 1
11884: PPUSH
11885: LD_EXP 53
11889: PUSH
11890: LD_VAR 0 4
11894: ARRAY
11895: PUSH
11896: LD_INT 3
11898: ARRAY
11899: PPUSH
11900: LD_EXP 53
11904: PUSH
11905: LD_VAR 0 4
11909: ARRAY
11910: PUSH
11911: LD_INT 4
11913: ARRAY
11914: PPUSH
11915: CALL_OW 111
// break ;
11919: GO 11923
// end ; end ;
11921: GO 11374
11923: POP
11924: POP
// end ;
11925: LD_VAR 0 3
11929: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11930: LD_INT 0
11932: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11933: LD_VAR 0 1
11937: PUSH
11938: LD_INT 250
11940: EQUAL
11941: PUSH
11942: LD_VAR 0 2
11946: PPUSH
11947: CALL_OW 264
11951: PUSH
11952: LD_INT 81
11954: EQUAL
11955: AND
11956: IFFALSE 11977
// MinerPlaceMine ( unit , x , y ) ;
11958: LD_VAR 0 2
11962: PPUSH
11963: LD_VAR 0 4
11967: PPUSH
11968: LD_VAR 0 5
11972: PPUSH
11973: CALL 15069 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11977: LD_VAR 0 1
11981: PUSH
11982: LD_INT 251
11984: EQUAL
11985: PUSH
11986: LD_VAR 0 2
11990: PPUSH
11991: CALL_OW 264
11995: PUSH
11996: LD_INT 81
11998: EQUAL
11999: AND
12000: IFFALSE 12021
// MinerDetonateMine ( unit , x , y ) ;
12002: LD_VAR 0 2
12006: PPUSH
12007: LD_VAR 0 4
12011: PPUSH
12012: LD_VAR 0 5
12016: PPUSH
12017: CALL 15344 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
12021: LD_VAR 0 1
12025: PUSH
12026: LD_INT 252
12028: EQUAL
12029: PUSH
12030: LD_VAR 0 2
12034: PPUSH
12035: CALL_OW 264
12039: PUSH
12040: LD_INT 81
12042: EQUAL
12043: AND
12044: IFFALSE 12065
// MinerCreateMinefield ( unit , x , y ) ;
12046: LD_VAR 0 2
12050: PPUSH
12051: LD_VAR 0 4
12055: PPUSH
12056: LD_VAR 0 5
12060: PPUSH
12061: CALL 15761 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
12065: LD_VAR 0 1
12069: PUSH
12070: LD_INT 253
12072: EQUAL
12073: PUSH
12074: LD_VAR 0 2
12078: PPUSH
12079: CALL_OW 257
12083: PUSH
12084: LD_INT 5
12086: EQUAL
12087: AND
12088: IFFALSE 12109
// ComBinocular ( unit , x , y ) ;
12090: LD_VAR 0 2
12094: PPUSH
12095: LD_VAR 0 4
12099: PPUSH
12100: LD_VAR 0 5
12104: PPUSH
12105: CALL 16130 0 3
// if selectedUnit then
12109: LD_VAR 0 3
12113: IFFALSE 12169
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
12115: LD_VAR 0 1
12119: PUSH
12120: LD_INT 254
12122: EQUAL
12123: PUSH
12124: LD_VAR 0 2
12128: PPUSH
12129: CALL_OW 264
12133: PUSH
12134: LD_INT 99
12136: EQUAL
12137: AND
12138: PUSH
12139: LD_VAR 0 3
12143: PPUSH
12144: CALL_OW 263
12148: PUSH
12149: LD_INT 3
12151: EQUAL
12152: AND
12153: IFFALSE 12169
// HackDestroyVehicle ( unit , selectedUnit ) ;
12155: LD_VAR 0 2
12159: PPUSH
12160: LD_VAR 0 3
12164: PPUSH
12165: CALL 14433 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
12169: LD_VAR 0 1
12173: PUSH
12174: LD_INT 255
12176: EQUAL
12177: PUSH
12178: LD_VAR 0 2
12182: PPUSH
12183: CALL_OW 264
12187: PUSH
12188: LD_INT 14
12190: PUSH
12191: LD_INT 53
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: IN
12198: AND
12199: PUSH
12200: LD_VAR 0 4
12204: PPUSH
12205: LD_VAR 0 5
12209: PPUSH
12210: CALL_OW 488
12214: AND
12215: IFFALSE 12239
// CutTreeXYR ( unit , x , y , 12 ) ;
12217: LD_VAR 0 2
12221: PPUSH
12222: LD_VAR 0 4
12226: PPUSH
12227: LD_VAR 0 5
12231: PPUSH
12232: LD_INT 12
12234: PPUSH
12235: CALL 12430 0 4
// if cmd = 256 then
12239: LD_VAR 0 1
12243: PUSH
12244: LD_INT 256
12246: EQUAL
12247: IFFALSE 12268
// SetFactoryWaypoint ( unit , x , y ) ;
12249: LD_VAR 0 2
12253: PPUSH
12254: LD_VAR 0 4
12258: PPUSH
12259: LD_VAR 0 5
12263: PPUSH
12264: CALL 60170 0 3
// if cmd = 257 then
12268: LD_VAR 0 1
12272: PUSH
12273: LD_INT 257
12275: EQUAL
12276: IFFALSE 12297
// SetWarehouseGatheringPoint ( unit , x , y ) ;
12278: LD_VAR 0 2
12282: PPUSH
12283: LD_VAR 0 4
12287: PPUSH
12288: LD_VAR 0 5
12292: PPUSH
12293: CALL 60660 0 3
// if cmd = 258 then
12297: LD_VAR 0 1
12301: PUSH
12302: LD_INT 258
12304: EQUAL
12305: IFFALSE 12329
// BurnTreeXYR ( unit , x , y , 8 ) ;
12307: LD_VAR 0 2
12311: PPUSH
12312: LD_VAR 0 4
12316: PPUSH
12317: LD_VAR 0 5
12321: PPUSH
12322: LD_INT 8
12324: PPUSH
12325: CALL 12824 0 4
// end ;
12329: LD_VAR 0 6
12333: RET
// export function ComRadiation ( un ) ; var eff ; begin
12334: LD_INT 0
12336: PPUSH
12337: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
12338: LD_VAR 0 1
12342: PPUSH
12343: CALL_OW 264
12347: PUSH
12348: LD_INT 91
12350: NONEQUAL
12351: IFFALSE 12355
// exit ;
12353: GO 12425
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
12355: LD_INT 68
12357: PPUSH
12358: LD_VAR 0 1
12362: PPUSH
12363: CALL_OW 255
12367: PPUSH
12368: CALL_OW 321
12372: PUSH
12373: LD_INT 2
12375: EQUAL
12376: IFFALSE 12388
// eff := 50 else
12378: LD_ADDR_VAR 0 3
12382: PUSH
12383: LD_INT 50
12385: ST_TO_ADDR
12386: GO 12396
// eff := 25 ;
12388: LD_ADDR_VAR 0 3
12392: PUSH
12393: LD_INT 25
12395: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
12396: LD_VAR 0 1
12400: PPUSH
12401: CALL_OW 250
12405: PPUSH
12406: LD_VAR 0 1
12410: PPUSH
12411: CALL_OW 251
12415: PPUSH
12416: LD_VAR 0 3
12420: PPUSH
12421: CALL_OW 495
// end ;
12425: LD_VAR 0 2
12429: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
12430: LD_INT 0
12432: PPUSH
12433: PPUSH
12434: PPUSH
12435: PPUSH
12436: PPUSH
12437: PPUSH
12438: PPUSH
12439: PPUSH
12440: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
12441: LD_VAR 0 1
12445: PPUSH
12446: CALL_OW 302
12450: NOT
12451: PUSH
12452: LD_VAR 0 2
12456: PPUSH
12457: LD_VAR 0 3
12461: PPUSH
12462: CALL_OW 488
12466: NOT
12467: OR
12468: PUSH
12469: LD_VAR 0 4
12473: NOT
12474: OR
12475: IFFALSE 12479
// exit ;
12477: GO 12819
// list := [ ] ;
12479: LD_ADDR_VAR 0 13
12483: PUSH
12484: EMPTY
12485: ST_TO_ADDR
// if x - r < 0 then
12486: LD_VAR 0 2
12490: PUSH
12491: LD_VAR 0 4
12495: MINUS
12496: PUSH
12497: LD_INT 0
12499: LESS
12500: IFFALSE 12512
// min_x := 0 else
12502: LD_ADDR_VAR 0 7
12506: PUSH
12507: LD_INT 0
12509: ST_TO_ADDR
12510: GO 12528
// min_x := x - r ;
12512: LD_ADDR_VAR 0 7
12516: PUSH
12517: LD_VAR 0 2
12521: PUSH
12522: LD_VAR 0 4
12526: MINUS
12527: ST_TO_ADDR
// if y - r < 0 then
12528: LD_VAR 0 3
12532: PUSH
12533: LD_VAR 0 4
12537: MINUS
12538: PUSH
12539: LD_INT 0
12541: LESS
12542: IFFALSE 12554
// min_y := 0 else
12544: LD_ADDR_VAR 0 8
12548: PUSH
12549: LD_INT 0
12551: ST_TO_ADDR
12552: GO 12570
// min_y := y - r ;
12554: LD_ADDR_VAR 0 8
12558: PUSH
12559: LD_VAR 0 3
12563: PUSH
12564: LD_VAR 0 4
12568: MINUS
12569: ST_TO_ADDR
// max_x := x + r ;
12570: LD_ADDR_VAR 0 9
12574: PUSH
12575: LD_VAR 0 2
12579: PUSH
12580: LD_VAR 0 4
12584: PLUS
12585: ST_TO_ADDR
// max_y := y + r ;
12586: LD_ADDR_VAR 0 10
12590: PUSH
12591: LD_VAR 0 3
12595: PUSH
12596: LD_VAR 0 4
12600: PLUS
12601: ST_TO_ADDR
// for _x = min_x to max_x do
12602: LD_ADDR_VAR 0 11
12606: PUSH
12607: DOUBLE
12608: LD_VAR 0 7
12612: DEC
12613: ST_TO_ADDR
12614: LD_VAR 0 9
12618: PUSH
12619: FOR_TO
12620: IFFALSE 12737
// for _y = min_y to max_y do
12622: LD_ADDR_VAR 0 12
12626: PUSH
12627: DOUBLE
12628: LD_VAR 0 8
12632: DEC
12633: ST_TO_ADDR
12634: LD_VAR 0 10
12638: PUSH
12639: FOR_TO
12640: IFFALSE 12733
// begin if not ValidHex ( _x , _y ) then
12642: LD_VAR 0 11
12646: PPUSH
12647: LD_VAR 0 12
12651: PPUSH
12652: CALL_OW 488
12656: NOT
12657: IFFALSE 12661
// continue ;
12659: GO 12639
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12661: LD_VAR 0 11
12665: PPUSH
12666: LD_VAR 0 12
12670: PPUSH
12671: CALL_OW 351
12675: PUSH
12676: LD_VAR 0 11
12680: PPUSH
12681: LD_VAR 0 12
12685: PPUSH
12686: CALL_OW 554
12690: AND
12691: IFFALSE 12731
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12693: LD_ADDR_VAR 0 13
12697: PUSH
12698: LD_VAR 0 13
12702: PPUSH
12703: LD_VAR 0 13
12707: PUSH
12708: LD_INT 1
12710: PLUS
12711: PPUSH
12712: LD_VAR 0 11
12716: PUSH
12717: LD_VAR 0 12
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PPUSH
12726: CALL_OW 2
12730: ST_TO_ADDR
// end ;
12731: GO 12639
12733: POP
12734: POP
12735: GO 12619
12737: POP
12738: POP
// if not list then
12739: LD_VAR 0 13
12743: NOT
12744: IFFALSE 12748
// exit ;
12746: GO 12819
// for i in list do
12748: LD_ADDR_VAR 0 6
12752: PUSH
12753: LD_VAR 0 13
12757: PUSH
12758: FOR_IN
12759: IFFALSE 12817
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
12761: LD_VAR 0 1
12765: PPUSH
12766: LD_STRING M
12768: PUSH
12769: LD_VAR 0 6
12773: PUSH
12774: LD_INT 1
12776: ARRAY
12777: PUSH
12778: LD_VAR 0 6
12782: PUSH
12783: LD_INT 2
12785: ARRAY
12786: PUSH
12787: LD_INT 0
12789: PUSH
12790: LD_INT 0
12792: PUSH
12793: LD_INT 0
12795: PUSH
12796: LD_INT 0
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: PUSH
12808: EMPTY
12809: LIST
12810: PPUSH
12811: CALL_OW 447
12815: GO 12758
12817: POP
12818: POP
// end ;
12819: LD_VAR 0 5
12823: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
12824: LD_INT 0
12826: PPUSH
12827: PPUSH
12828: PPUSH
12829: PPUSH
12830: PPUSH
12831: PPUSH
12832: PPUSH
12833: PPUSH
12834: PPUSH
12835: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
12836: LD_VAR 0 1
12840: PPUSH
12841: CALL_OW 302
12845: NOT
12846: PUSH
12847: LD_VAR 0 2
12851: PPUSH
12852: LD_VAR 0 3
12856: PPUSH
12857: CALL_OW 488
12861: NOT
12862: OR
12863: PUSH
12864: LD_VAR 0 4
12868: NOT
12869: OR
12870: IFFALSE 12874
// exit ;
12872: GO 13387
// list := [ ] ;
12874: LD_ADDR_VAR 0 13
12878: PUSH
12879: EMPTY
12880: ST_TO_ADDR
// if x - r < 0 then
12881: LD_VAR 0 2
12885: PUSH
12886: LD_VAR 0 4
12890: MINUS
12891: PUSH
12892: LD_INT 0
12894: LESS
12895: IFFALSE 12907
// min_x := 0 else
12897: LD_ADDR_VAR 0 7
12901: PUSH
12902: LD_INT 0
12904: ST_TO_ADDR
12905: GO 12923
// min_x := x - r ;
12907: LD_ADDR_VAR 0 7
12911: PUSH
12912: LD_VAR 0 2
12916: PUSH
12917: LD_VAR 0 4
12921: MINUS
12922: ST_TO_ADDR
// if y - r < 0 then
12923: LD_VAR 0 3
12927: PUSH
12928: LD_VAR 0 4
12932: MINUS
12933: PUSH
12934: LD_INT 0
12936: LESS
12937: IFFALSE 12949
// min_y := 0 else
12939: LD_ADDR_VAR 0 8
12943: PUSH
12944: LD_INT 0
12946: ST_TO_ADDR
12947: GO 12965
// min_y := y - r ;
12949: LD_ADDR_VAR 0 8
12953: PUSH
12954: LD_VAR 0 3
12958: PUSH
12959: LD_VAR 0 4
12963: MINUS
12964: ST_TO_ADDR
// max_x := x + r ;
12965: LD_ADDR_VAR 0 9
12969: PUSH
12970: LD_VAR 0 2
12974: PUSH
12975: LD_VAR 0 4
12979: PLUS
12980: ST_TO_ADDR
// max_y := y + r ;
12981: LD_ADDR_VAR 0 10
12985: PUSH
12986: LD_VAR 0 3
12990: PUSH
12991: LD_VAR 0 4
12995: PLUS
12996: ST_TO_ADDR
// for _x = min_x to max_x do
12997: LD_ADDR_VAR 0 11
13001: PUSH
13002: DOUBLE
13003: LD_VAR 0 7
13007: DEC
13008: ST_TO_ADDR
13009: LD_VAR 0 9
13013: PUSH
13014: FOR_TO
13015: IFFALSE 13132
// for _y = min_y to max_y do
13017: LD_ADDR_VAR 0 12
13021: PUSH
13022: DOUBLE
13023: LD_VAR 0 8
13027: DEC
13028: ST_TO_ADDR
13029: LD_VAR 0 10
13033: PUSH
13034: FOR_TO
13035: IFFALSE 13128
// begin if not ValidHex ( _x , _y ) then
13037: LD_VAR 0 11
13041: PPUSH
13042: LD_VAR 0 12
13046: PPUSH
13047: CALL_OW 488
13051: NOT
13052: IFFALSE 13056
// continue ;
13054: GO 13034
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
13056: LD_VAR 0 11
13060: PPUSH
13061: LD_VAR 0 12
13065: PPUSH
13066: CALL_OW 351
13070: PUSH
13071: LD_VAR 0 11
13075: PPUSH
13076: LD_VAR 0 12
13080: PPUSH
13081: CALL_OW 554
13085: AND
13086: IFFALSE 13126
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
13088: LD_ADDR_VAR 0 13
13092: PUSH
13093: LD_VAR 0 13
13097: PPUSH
13098: LD_VAR 0 13
13102: PUSH
13103: LD_INT 1
13105: PLUS
13106: PPUSH
13107: LD_VAR 0 11
13111: PUSH
13112: LD_VAR 0 12
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PPUSH
13121: CALL_OW 2
13125: ST_TO_ADDR
// end ;
13126: GO 13034
13128: POP
13129: POP
13130: GO 13014
13132: POP
13133: POP
// if not list then
13134: LD_VAR 0 13
13138: NOT
13139: IFFALSE 13143
// exit ;
13141: GO 13387
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
13143: LD_ADDR_VAR 0 13
13147: PUSH
13148: LD_VAR 0 1
13152: PPUSH
13153: LD_VAR 0 13
13157: PPUSH
13158: LD_INT 1
13160: PPUSH
13161: LD_INT 1
13163: PPUSH
13164: CALL 22163 0 4
13168: ST_TO_ADDR
// ComStop ( flame ) ;
13169: LD_VAR 0 1
13173: PPUSH
13174: CALL_OW 141
// for i in list do
13178: LD_ADDR_VAR 0 6
13182: PUSH
13183: LD_VAR 0 13
13187: PUSH
13188: FOR_IN
13189: IFFALSE 13220
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
13191: LD_VAR 0 1
13195: PPUSH
13196: LD_VAR 0 6
13200: PUSH
13201: LD_INT 1
13203: ARRAY
13204: PPUSH
13205: LD_VAR 0 6
13209: PUSH
13210: LD_INT 2
13212: ARRAY
13213: PPUSH
13214: CALL_OW 176
13218: GO 13188
13220: POP
13221: POP
// repeat wait ( 0 0$1 ) ;
13222: LD_INT 35
13224: PPUSH
13225: CALL_OW 67
// task := GetTaskList ( flame ) ;
13229: LD_ADDR_VAR 0 14
13233: PUSH
13234: LD_VAR 0 1
13238: PPUSH
13239: CALL_OW 437
13243: ST_TO_ADDR
// if not task then
13244: LD_VAR 0 14
13248: NOT
13249: IFFALSE 13253
// exit ;
13251: GO 13387
// if task [ 1 ] [ 1 ] <> | then
13253: LD_VAR 0 14
13257: PUSH
13258: LD_INT 1
13260: ARRAY
13261: PUSH
13262: LD_INT 1
13264: ARRAY
13265: PUSH
13266: LD_STRING |
13268: NONEQUAL
13269: IFFALSE 13273
// exit ;
13271: GO 13387
// _x := task [ 1 ] [ 2 ] ;
13273: LD_ADDR_VAR 0 11
13277: PUSH
13278: LD_VAR 0 14
13282: PUSH
13283: LD_INT 1
13285: ARRAY
13286: PUSH
13287: LD_INT 2
13289: ARRAY
13290: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
13291: LD_ADDR_VAR 0 12
13295: PUSH
13296: LD_VAR 0 14
13300: PUSH
13301: LD_INT 1
13303: ARRAY
13304: PUSH
13305: LD_INT 3
13307: ARRAY
13308: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
13309: LD_VAR 0 11
13313: PPUSH
13314: LD_VAR 0 12
13318: PPUSH
13319: CALL_OW 351
13323: NOT
13324: PUSH
13325: LD_VAR 0 11
13329: PPUSH
13330: LD_VAR 0 12
13334: PPUSH
13335: CALL_OW 554
13339: NOT
13340: OR
13341: IFFALSE 13375
// begin task := Delete ( task , 1 ) ;
13343: LD_ADDR_VAR 0 14
13347: PUSH
13348: LD_VAR 0 14
13352: PPUSH
13353: LD_INT 1
13355: PPUSH
13356: CALL_OW 3
13360: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
13361: LD_VAR 0 1
13365: PPUSH
13366: LD_VAR 0 14
13370: PPUSH
13371: CALL_OW 446
// end ; until not HasTask ( flame ) ;
13375: LD_VAR 0 1
13379: PPUSH
13380: CALL_OW 314
13384: NOT
13385: IFFALSE 13222
// end ;
13387: LD_VAR 0 5
13391: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
13392: LD_EXP 43
13396: NOT
13397: IFFALSE 13447
13399: GO 13401
13401: DISABLE
// begin initHack := true ;
13402: LD_ADDR_EXP 43
13406: PUSH
13407: LD_INT 1
13409: ST_TO_ADDR
// hackTanks := [ ] ;
13410: LD_ADDR_EXP 44
13414: PUSH
13415: EMPTY
13416: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
13417: LD_ADDR_EXP 45
13421: PUSH
13422: EMPTY
13423: ST_TO_ADDR
// hackLimit := 3 ;
13424: LD_ADDR_EXP 46
13428: PUSH
13429: LD_INT 3
13431: ST_TO_ADDR
// hackDist := 12 ;
13432: LD_ADDR_EXP 47
13436: PUSH
13437: LD_INT 12
13439: ST_TO_ADDR
// hackCounter := [ ] ;
13440: LD_ADDR_EXP 48
13444: PUSH
13445: EMPTY
13446: ST_TO_ADDR
// end ;
13447: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
13448: LD_EXP 43
13452: PUSH
13453: LD_INT 34
13455: PUSH
13456: LD_INT 99
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PPUSH
13463: CALL_OW 69
13467: AND
13468: IFFALSE 13721
13470: GO 13472
13472: DISABLE
13473: LD_INT 0
13475: PPUSH
13476: PPUSH
// begin enable ;
13477: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
13478: LD_ADDR_VAR 0 1
13482: PUSH
13483: LD_INT 34
13485: PUSH
13486: LD_INT 99
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PPUSH
13493: CALL_OW 69
13497: PUSH
13498: FOR_IN
13499: IFFALSE 13719
// begin if not i in hackTanks then
13501: LD_VAR 0 1
13505: PUSH
13506: LD_EXP 44
13510: IN
13511: NOT
13512: IFFALSE 13595
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
13514: LD_ADDR_EXP 44
13518: PUSH
13519: LD_EXP 44
13523: PPUSH
13524: LD_EXP 44
13528: PUSH
13529: LD_INT 1
13531: PLUS
13532: PPUSH
13533: LD_VAR 0 1
13537: PPUSH
13538: CALL_OW 1
13542: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
13543: LD_ADDR_EXP 45
13547: PUSH
13548: LD_EXP 45
13552: PPUSH
13553: LD_EXP 45
13557: PUSH
13558: LD_INT 1
13560: PLUS
13561: PPUSH
13562: EMPTY
13563: PPUSH
13564: CALL_OW 1
13568: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
13569: LD_ADDR_EXP 48
13573: PUSH
13574: LD_EXP 48
13578: PPUSH
13579: LD_EXP 48
13583: PUSH
13584: LD_INT 1
13586: PLUS
13587: PPUSH
13588: EMPTY
13589: PPUSH
13590: CALL_OW 1
13594: ST_TO_ADDR
// end ; if not IsOk ( i ) then
13595: LD_VAR 0 1
13599: PPUSH
13600: CALL_OW 302
13604: NOT
13605: IFFALSE 13618
// begin HackUnlinkAll ( i ) ;
13607: LD_VAR 0 1
13611: PPUSH
13612: CALL 13724 0 1
// continue ;
13616: GO 13498
// end ; HackCheckCapturedStatus ( i ) ;
13618: LD_VAR 0 1
13622: PPUSH
13623: CALL 14167 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
13627: LD_ADDR_VAR 0 2
13631: PUSH
13632: LD_INT 81
13634: PUSH
13635: LD_VAR 0 1
13639: PPUSH
13640: CALL_OW 255
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 33
13651: PUSH
13652: LD_INT 3
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 91
13661: PUSH
13662: LD_VAR 0 1
13666: PUSH
13667: LD_EXP 47
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 50
13679: PUSH
13680: EMPTY
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: PPUSH
13689: CALL_OW 69
13693: ST_TO_ADDR
// if not tmp then
13694: LD_VAR 0 2
13698: NOT
13699: IFFALSE 13703
// continue ;
13701: GO 13498
// HackLink ( i , tmp ) ;
13703: LD_VAR 0 1
13707: PPUSH
13708: LD_VAR 0 2
13712: PPUSH
13713: CALL 13860 0 2
// end ;
13717: GO 13498
13719: POP
13720: POP
// end ;
13721: PPOPN 2
13723: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
13724: LD_INT 0
13726: PPUSH
13727: PPUSH
13728: PPUSH
// if not hack in hackTanks then
13729: LD_VAR 0 1
13733: PUSH
13734: LD_EXP 44
13738: IN
13739: NOT
13740: IFFALSE 13744
// exit ;
13742: GO 13855
// index := GetElementIndex ( hackTanks , hack ) ;
13744: LD_ADDR_VAR 0 4
13748: PUSH
13749: LD_EXP 44
13753: PPUSH
13754: LD_VAR 0 1
13758: PPUSH
13759: CALL 21460 0 2
13763: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
13764: LD_EXP 45
13768: PUSH
13769: LD_VAR 0 4
13773: ARRAY
13774: IFFALSE 13855
// begin for i in hackTanksCaptured [ index ] do
13776: LD_ADDR_VAR 0 3
13780: PUSH
13781: LD_EXP 45
13785: PUSH
13786: LD_VAR 0 4
13790: ARRAY
13791: PUSH
13792: FOR_IN
13793: IFFALSE 13819
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
13795: LD_VAR 0 3
13799: PUSH
13800: LD_INT 1
13802: ARRAY
13803: PPUSH
13804: LD_VAR 0 3
13808: PUSH
13809: LD_INT 2
13811: ARRAY
13812: PPUSH
13813: CALL_OW 235
13817: GO 13792
13819: POP
13820: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
13821: LD_ADDR_EXP 45
13825: PUSH
13826: LD_EXP 45
13830: PPUSH
13831: LD_VAR 0 4
13835: PPUSH
13836: EMPTY
13837: PPUSH
13838: CALL_OW 1
13842: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
13843: LD_VAR 0 1
13847: PPUSH
13848: LD_INT 0
13850: PPUSH
13851: CALL_OW 505
// end ; end ;
13855: LD_VAR 0 2
13859: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
13860: LD_INT 0
13862: PPUSH
13863: PPUSH
13864: PPUSH
// if not hack in hackTanks or not vehicles then
13865: LD_VAR 0 1
13869: PUSH
13870: LD_EXP 44
13874: IN
13875: NOT
13876: PUSH
13877: LD_VAR 0 2
13881: NOT
13882: OR
13883: IFFALSE 13887
// exit ;
13885: GO 14162
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
13887: LD_ADDR_VAR 0 2
13891: PUSH
13892: LD_VAR 0 1
13896: PPUSH
13897: LD_VAR 0 2
13901: PPUSH
13902: LD_INT 1
13904: PPUSH
13905: LD_INT 1
13907: PPUSH
13908: CALL 22110 0 4
13912: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
13913: LD_ADDR_VAR 0 5
13917: PUSH
13918: LD_EXP 44
13922: PPUSH
13923: LD_VAR 0 1
13927: PPUSH
13928: CALL 21460 0 2
13932: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
13933: LD_EXP 45
13937: PUSH
13938: LD_VAR 0 5
13942: ARRAY
13943: PUSH
13944: LD_EXP 46
13948: LESS
13949: IFFALSE 14138
// begin for i := 1 to vehicles do
13951: LD_ADDR_VAR 0 4
13955: PUSH
13956: DOUBLE
13957: LD_INT 1
13959: DEC
13960: ST_TO_ADDR
13961: LD_VAR 0 2
13965: PUSH
13966: FOR_TO
13967: IFFALSE 14136
// begin if hackTanksCaptured [ index ] = hackLimit then
13969: LD_EXP 45
13973: PUSH
13974: LD_VAR 0 5
13978: ARRAY
13979: PUSH
13980: LD_EXP 46
13984: EQUAL
13985: IFFALSE 13989
// break ;
13987: GO 14136
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
13989: LD_ADDR_EXP 48
13993: PUSH
13994: LD_EXP 48
13998: PPUSH
13999: LD_VAR 0 5
14003: PPUSH
14004: LD_EXP 48
14008: PUSH
14009: LD_VAR 0 5
14013: ARRAY
14014: PUSH
14015: LD_INT 1
14017: PLUS
14018: PPUSH
14019: CALL_OW 1
14023: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
14024: LD_ADDR_EXP 45
14028: PUSH
14029: LD_EXP 45
14033: PPUSH
14034: LD_VAR 0 5
14038: PUSH
14039: LD_EXP 45
14043: PUSH
14044: LD_VAR 0 5
14048: ARRAY
14049: PUSH
14050: LD_INT 1
14052: PLUS
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PPUSH
14058: LD_VAR 0 2
14062: PUSH
14063: LD_VAR 0 4
14067: ARRAY
14068: PUSH
14069: LD_VAR 0 2
14073: PUSH
14074: LD_VAR 0 4
14078: ARRAY
14079: PPUSH
14080: CALL_OW 255
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PPUSH
14089: CALL 21675 0 3
14093: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
14094: LD_VAR 0 2
14098: PUSH
14099: LD_VAR 0 4
14103: ARRAY
14104: PPUSH
14105: LD_VAR 0 1
14109: PPUSH
14110: CALL_OW 255
14114: PPUSH
14115: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
14119: LD_VAR 0 2
14123: PUSH
14124: LD_VAR 0 4
14128: ARRAY
14129: PPUSH
14130: CALL_OW 141
// end ;
14134: GO 13966
14136: POP
14137: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
14138: LD_VAR 0 1
14142: PPUSH
14143: LD_EXP 45
14147: PUSH
14148: LD_VAR 0 5
14152: ARRAY
14153: PUSH
14154: LD_INT 0
14156: PLUS
14157: PPUSH
14158: CALL_OW 505
// end ;
14162: LD_VAR 0 3
14166: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
14167: LD_INT 0
14169: PPUSH
14170: PPUSH
14171: PPUSH
14172: PPUSH
// if not hack in hackTanks then
14173: LD_VAR 0 1
14177: PUSH
14178: LD_EXP 44
14182: IN
14183: NOT
14184: IFFALSE 14188
// exit ;
14186: GO 14428
// index := GetElementIndex ( hackTanks , hack ) ;
14188: LD_ADDR_VAR 0 4
14192: PUSH
14193: LD_EXP 44
14197: PPUSH
14198: LD_VAR 0 1
14202: PPUSH
14203: CALL 21460 0 2
14207: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
14208: LD_ADDR_VAR 0 3
14212: PUSH
14213: DOUBLE
14214: LD_EXP 45
14218: PUSH
14219: LD_VAR 0 4
14223: ARRAY
14224: INC
14225: ST_TO_ADDR
14226: LD_INT 1
14228: PUSH
14229: FOR_DOWNTO
14230: IFFALSE 14402
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
14232: LD_ADDR_VAR 0 5
14236: PUSH
14237: LD_EXP 45
14241: PUSH
14242: LD_VAR 0 4
14246: ARRAY
14247: PUSH
14248: LD_VAR 0 3
14252: ARRAY
14253: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
14254: LD_VAR 0 5
14258: PUSH
14259: LD_INT 1
14261: ARRAY
14262: PPUSH
14263: CALL_OW 302
14267: NOT
14268: PUSH
14269: LD_VAR 0 5
14273: PUSH
14274: LD_INT 1
14276: ARRAY
14277: PPUSH
14278: CALL_OW 255
14282: PUSH
14283: LD_VAR 0 1
14287: PPUSH
14288: CALL_OW 255
14292: NONEQUAL
14293: OR
14294: IFFALSE 14400
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
14296: LD_VAR 0 5
14300: PUSH
14301: LD_INT 1
14303: ARRAY
14304: PPUSH
14305: CALL_OW 305
14309: PUSH
14310: LD_VAR 0 5
14314: PUSH
14315: LD_INT 1
14317: ARRAY
14318: PPUSH
14319: CALL_OW 255
14323: PUSH
14324: LD_VAR 0 1
14328: PPUSH
14329: CALL_OW 255
14333: EQUAL
14334: AND
14335: IFFALSE 14359
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
14337: LD_VAR 0 5
14341: PUSH
14342: LD_INT 1
14344: ARRAY
14345: PPUSH
14346: LD_VAR 0 5
14350: PUSH
14351: LD_INT 2
14353: ARRAY
14354: PPUSH
14355: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
14359: LD_ADDR_EXP 45
14363: PUSH
14364: LD_EXP 45
14368: PPUSH
14369: LD_VAR 0 4
14373: PPUSH
14374: LD_EXP 45
14378: PUSH
14379: LD_VAR 0 4
14383: ARRAY
14384: PPUSH
14385: LD_VAR 0 3
14389: PPUSH
14390: CALL_OW 3
14394: PPUSH
14395: CALL_OW 1
14399: ST_TO_ADDR
// end ; end ;
14400: GO 14229
14402: POP
14403: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
14404: LD_VAR 0 1
14408: PPUSH
14409: LD_EXP 45
14413: PUSH
14414: LD_VAR 0 4
14418: ARRAY
14419: PUSH
14420: LD_INT 0
14422: PLUS
14423: PPUSH
14424: CALL_OW 505
// end ;
14428: LD_VAR 0 2
14432: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
14433: LD_INT 0
14435: PPUSH
14436: PPUSH
14437: PPUSH
14438: PPUSH
// if not hack in hackTanks then
14439: LD_VAR 0 1
14443: PUSH
14444: LD_EXP 44
14448: IN
14449: NOT
14450: IFFALSE 14454
// exit ;
14452: GO 14539
// index := GetElementIndex ( hackTanks , hack ) ;
14454: LD_ADDR_VAR 0 5
14458: PUSH
14459: LD_EXP 44
14463: PPUSH
14464: LD_VAR 0 1
14468: PPUSH
14469: CALL 21460 0 2
14473: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
14474: LD_ADDR_VAR 0 4
14478: PUSH
14479: DOUBLE
14480: LD_INT 1
14482: DEC
14483: ST_TO_ADDR
14484: LD_EXP 45
14488: PUSH
14489: LD_VAR 0 5
14493: ARRAY
14494: PUSH
14495: FOR_TO
14496: IFFALSE 14537
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
14498: LD_EXP 45
14502: PUSH
14503: LD_VAR 0 5
14507: ARRAY
14508: PUSH
14509: LD_VAR 0 4
14513: ARRAY
14514: PUSH
14515: LD_INT 1
14517: ARRAY
14518: PUSH
14519: LD_VAR 0 2
14523: EQUAL
14524: IFFALSE 14535
// KillUnit ( vehicle ) ;
14526: LD_VAR 0 2
14530: PPUSH
14531: CALL_OW 66
14535: GO 14495
14537: POP
14538: POP
// end ;
14539: LD_VAR 0 3
14543: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
14544: LD_EXP 49
14548: NOT
14549: IFFALSE 14584
14551: GO 14553
14553: DISABLE
// begin initMiner := true ;
14554: LD_ADDR_EXP 49
14558: PUSH
14559: LD_INT 1
14561: ST_TO_ADDR
// minersList := [ ] ;
14562: LD_ADDR_EXP 50
14566: PUSH
14567: EMPTY
14568: ST_TO_ADDR
// minerMinesList := [ ] ;
14569: LD_ADDR_EXP 51
14573: PUSH
14574: EMPTY
14575: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
14576: LD_ADDR_EXP 52
14580: PUSH
14581: LD_INT 5
14583: ST_TO_ADDR
// end ;
14584: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
14585: LD_EXP 49
14589: PUSH
14590: LD_INT 34
14592: PUSH
14593: LD_INT 81
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PPUSH
14600: CALL_OW 69
14604: AND
14605: IFFALSE 15066
14607: GO 14609
14609: DISABLE
14610: LD_INT 0
14612: PPUSH
14613: PPUSH
14614: PPUSH
14615: PPUSH
// begin enable ;
14616: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
14617: LD_ADDR_VAR 0 1
14621: PUSH
14622: LD_INT 34
14624: PUSH
14625: LD_INT 81
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PPUSH
14632: CALL_OW 69
14636: PUSH
14637: FOR_IN
14638: IFFALSE 14710
// begin if not i in minersList then
14640: LD_VAR 0 1
14644: PUSH
14645: LD_EXP 50
14649: IN
14650: NOT
14651: IFFALSE 14708
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
14653: LD_ADDR_EXP 50
14657: PUSH
14658: LD_EXP 50
14662: PPUSH
14663: LD_EXP 50
14667: PUSH
14668: LD_INT 1
14670: PLUS
14671: PPUSH
14672: LD_VAR 0 1
14676: PPUSH
14677: CALL_OW 1
14681: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
14682: LD_ADDR_EXP 51
14686: PUSH
14687: LD_EXP 51
14691: PPUSH
14692: LD_EXP 51
14696: PUSH
14697: LD_INT 1
14699: PLUS
14700: PPUSH
14701: EMPTY
14702: PPUSH
14703: CALL_OW 1
14707: ST_TO_ADDR
// end end ;
14708: GO 14637
14710: POP
14711: POP
// for i := minerMinesList downto 1 do
14712: LD_ADDR_VAR 0 1
14716: PUSH
14717: DOUBLE
14718: LD_EXP 51
14722: INC
14723: ST_TO_ADDR
14724: LD_INT 1
14726: PUSH
14727: FOR_DOWNTO
14728: IFFALSE 15064
// begin if IsLive ( minersList [ i ] ) then
14730: LD_EXP 50
14734: PUSH
14735: LD_VAR 0 1
14739: ARRAY
14740: PPUSH
14741: CALL_OW 300
14745: IFFALSE 14773
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
14747: LD_EXP 50
14751: PUSH
14752: LD_VAR 0 1
14756: ARRAY
14757: PPUSH
14758: LD_EXP 51
14762: PUSH
14763: LD_VAR 0 1
14767: ARRAY
14768: PPUSH
14769: CALL_OW 505
// if not minerMinesList [ i ] then
14773: LD_EXP 51
14777: PUSH
14778: LD_VAR 0 1
14782: ARRAY
14783: NOT
14784: IFFALSE 14788
// continue ;
14786: GO 14727
// for j := minerMinesList [ i ] downto 1 do
14788: LD_ADDR_VAR 0 2
14792: PUSH
14793: DOUBLE
14794: LD_EXP 51
14798: PUSH
14799: LD_VAR 0 1
14803: ARRAY
14804: INC
14805: ST_TO_ADDR
14806: LD_INT 1
14808: PUSH
14809: FOR_DOWNTO
14810: IFFALSE 15060
// begin side := GetSide ( minersList [ i ] ) ;
14812: LD_ADDR_VAR 0 3
14816: PUSH
14817: LD_EXP 50
14821: PUSH
14822: LD_VAR 0 1
14826: ARRAY
14827: PPUSH
14828: CALL_OW 255
14832: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
14833: LD_ADDR_VAR 0 4
14837: PUSH
14838: LD_EXP 51
14842: PUSH
14843: LD_VAR 0 1
14847: ARRAY
14848: PUSH
14849: LD_VAR 0 2
14853: ARRAY
14854: PUSH
14855: LD_INT 1
14857: ARRAY
14858: PPUSH
14859: LD_EXP 51
14863: PUSH
14864: LD_VAR 0 1
14868: ARRAY
14869: PUSH
14870: LD_VAR 0 2
14874: ARRAY
14875: PUSH
14876: LD_INT 2
14878: ARRAY
14879: PPUSH
14880: CALL_OW 428
14884: ST_TO_ADDR
// if not tmp then
14885: LD_VAR 0 4
14889: NOT
14890: IFFALSE 14894
// continue ;
14892: GO 14809
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
14894: LD_VAR 0 4
14898: PUSH
14899: LD_INT 81
14901: PUSH
14902: LD_VAR 0 3
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PPUSH
14911: CALL_OW 69
14915: IN
14916: PUSH
14917: LD_EXP 51
14921: PUSH
14922: LD_VAR 0 1
14926: ARRAY
14927: PUSH
14928: LD_VAR 0 2
14932: ARRAY
14933: PUSH
14934: LD_INT 1
14936: ARRAY
14937: PPUSH
14938: LD_EXP 51
14942: PUSH
14943: LD_VAR 0 1
14947: ARRAY
14948: PUSH
14949: LD_VAR 0 2
14953: ARRAY
14954: PUSH
14955: LD_INT 2
14957: ARRAY
14958: PPUSH
14959: CALL_OW 458
14963: AND
14964: IFFALSE 15058
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
14966: LD_EXP 51
14970: PUSH
14971: LD_VAR 0 1
14975: ARRAY
14976: PUSH
14977: LD_VAR 0 2
14981: ARRAY
14982: PUSH
14983: LD_INT 1
14985: ARRAY
14986: PPUSH
14987: LD_EXP 51
14991: PUSH
14992: LD_VAR 0 1
14996: ARRAY
14997: PUSH
14998: LD_VAR 0 2
15002: ARRAY
15003: PUSH
15004: LD_INT 2
15006: ARRAY
15007: PPUSH
15008: LD_VAR 0 3
15012: PPUSH
15013: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
15017: LD_ADDR_EXP 51
15021: PUSH
15022: LD_EXP 51
15026: PPUSH
15027: LD_VAR 0 1
15031: PPUSH
15032: LD_EXP 51
15036: PUSH
15037: LD_VAR 0 1
15041: ARRAY
15042: PPUSH
15043: LD_VAR 0 2
15047: PPUSH
15048: CALL_OW 3
15052: PPUSH
15053: CALL_OW 1
15057: ST_TO_ADDR
// end ; end ;
15058: GO 14809
15060: POP
15061: POP
// end ;
15062: GO 14727
15064: POP
15065: POP
// end ;
15066: PPOPN 4
15068: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
15069: LD_INT 0
15071: PPUSH
15072: PPUSH
// result := false ;
15073: LD_ADDR_VAR 0 4
15077: PUSH
15078: LD_INT 0
15080: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
15081: LD_VAR 0 1
15085: PPUSH
15086: CALL_OW 264
15090: PUSH
15091: LD_INT 81
15093: EQUAL
15094: NOT
15095: IFFALSE 15099
// exit ;
15097: GO 15339
// index := GetElementIndex ( minersList , unit ) ;
15099: LD_ADDR_VAR 0 5
15103: PUSH
15104: LD_EXP 50
15108: PPUSH
15109: LD_VAR 0 1
15113: PPUSH
15114: CALL 21460 0 2
15118: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
15119: LD_EXP 51
15123: PUSH
15124: LD_VAR 0 5
15128: ARRAY
15129: PUSH
15130: LD_EXP 52
15134: GREATEREQUAL
15135: IFFALSE 15139
// exit ;
15137: GO 15339
// ComMoveXY ( unit , x , y ) ;
15139: LD_VAR 0 1
15143: PPUSH
15144: LD_VAR 0 2
15148: PPUSH
15149: LD_VAR 0 3
15153: PPUSH
15154: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15158: LD_INT 35
15160: PPUSH
15161: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
15165: LD_VAR 0 1
15169: PPUSH
15170: LD_VAR 0 2
15174: PPUSH
15175: LD_VAR 0 3
15179: PPUSH
15180: CALL 53221 0 3
15184: NOT
15185: PUSH
15186: LD_VAR 0 1
15190: PPUSH
15191: CALL_OW 314
15195: AND
15196: IFFALSE 15200
// exit ;
15198: GO 15339
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
15200: LD_VAR 0 2
15204: PPUSH
15205: LD_VAR 0 3
15209: PPUSH
15210: CALL_OW 428
15214: PUSH
15215: LD_VAR 0 1
15219: EQUAL
15220: PUSH
15221: LD_VAR 0 1
15225: PPUSH
15226: CALL_OW 314
15230: NOT
15231: AND
15232: IFFALSE 15158
// PlaySoundXY ( x , y , PlantMine ) ;
15234: LD_VAR 0 2
15238: PPUSH
15239: LD_VAR 0 3
15243: PPUSH
15244: LD_STRING PlantMine
15246: PPUSH
15247: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
15251: LD_VAR 0 2
15255: PPUSH
15256: LD_VAR 0 3
15260: PPUSH
15261: LD_VAR 0 1
15265: PPUSH
15266: CALL_OW 255
15270: PPUSH
15271: LD_INT 0
15273: PPUSH
15274: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
15278: LD_ADDR_EXP 51
15282: PUSH
15283: LD_EXP 51
15287: PPUSH
15288: LD_VAR 0 5
15292: PUSH
15293: LD_EXP 51
15297: PUSH
15298: LD_VAR 0 5
15302: ARRAY
15303: PUSH
15304: LD_INT 1
15306: PLUS
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PPUSH
15312: LD_VAR 0 2
15316: PUSH
15317: LD_VAR 0 3
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PPUSH
15326: CALL 21675 0 3
15330: ST_TO_ADDR
// result := true ;
15331: LD_ADDR_VAR 0 4
15335: PUSH
15336: LD_INT 1
15338: ST_TO_ADDR
// end ;
15339: LD_VAR 0 4
15343: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
15344: LD_INT 0
15346: PPUSH
15347: PPUSH
15348: PPUSH
// if not unit in minersList then
15349: LD_VAR 0 1
15353: PUSH
15354: LD_EXP 50
15358: IN
15359: NOT
15360: IFFALSE 15364
// exit ;
15362: GO 15756
// index := GetElementIndex ( minersList , unit ) ;
15364: LD_ADDR_VAR 0 6
15368: PUSH
15369: LD_EXP 50
15373: PPUSH
15374: LD_VAR 0 1
15378: PPUSH
15379: CALL 21460 0 2
15383: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
15384: LD_ADDR_VAR 0 5
15388: PUSH
15389: DOUBLE
15390: LD_EXP 51
15394: PUSH
15395: LD_VAR 0 6
15399: ARRAY
15400: INC
15401: ST_TO_ADDR
15402: LD_INT 1
15404: PUSH
15405: FOR_DOWNTO
15406: IFFALSE 15567
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
15408: LD_EXP 51
15412: PUSH
15413: LD_VAR 0 6
15417: ARRAY
15418: PUSH
15419: LD_VAR 0 5
15423: ARRAY
15424: PUSH
15425: LD_INT 1
15427: ARRAY
15428: PUSH
15429: LD_VAR 0 2
15433: EQUAL
15434: PUSH
15435: LD_EXP 51
15439: PUSH
15440: LD_VAR 0 6
15444: ARRAY
15445: PUSH
15446: LD_VAR 0 5
15450: ARRAY
15451: PUSH
15452: LD_INT 2
15454: ARRAY
15455: PUSH
15456: LD_VAR 0 3
15460: EQUAL
15461: AND
15462: IFFALSE 15565
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
15464: LD_EXP 51
15468: PUSH
15469: LD_VAR 0 6
15473: ARRAY
15474: PUSH
15475: LD_VAR 0 5
15479: ARRAY
15480: PUSH
15481: LD_INT 1
15483: ARRAY
15484: PPUSH
15485: LD_EXP 51
15489: PUSH
15490: LD_VAR 0 6
15494: ARRAY
15495: PUSH
15496: LD_VAR 0 5
15500: ARRAY
15501: PUSH
15502: LD_INT 2
15504: ARRAY
15505: PPUSH
15506: LD_VAR 0 1
15510: PPUSH
15511: CALL_OW 255
15515: PPUSH
15516: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
15520: LD_ADDR_EXP 51
15524: PUSH
15525: LD_EXP 51
15529: PPUSH
15530: LD_VAR 0 6
15534: PPUSH
15535: LD_EXP 51
15539: PUSH
15540: LD_VAR 0 6
15544: ARRAY
15545: PPUSH
15546: LD_VAR 0 5
15550: PPUSH
15551: CALL_OW 3
15555: PPUSH
15556: CALL_OW 1
15560: ST_TO_ADDR
// exit ;
15561: POP
15562: POP
15563: GO 15756
// end ; end ;
15565: GO 15405
15567: POP
15568: POP
// for i := minerMinesList [ index ] downto 1 do
15569: LD_ADDR_VAR 0 5
15573: PUSH
15574: DOUBLE
15575: LD_EXP 51
15579: PUSH
15580: LD_VAR 0 6
15584: ARRAY
15585: INC
15586: ST_TO_ADDR
15587: LD_INT 1
15589: PUSH
15590: FOR_DOWNTO
15591: IFFALSE 15754
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
15593: LD_EXP 51
15597: PUSH
15598: LD_VAR 0 6
15602: ARRAY
15603: PUSH
15604: LD_VAR 0 5
15608: ARRAY
15609: PUSH
15610: LD_INT 1
15612: ARRAY
15613: PPUSH
15614: LD_EXP 51
15618: PUSH
15619: LD_VAR 0 6
15623: ARRAY
15624: PUSH
15625: LD_VAR 0 5
15629: ARRAY
15630: PUSH
15631: LD_INT 2
15633: ARRAY
15634: PPUSH
15635: LD_VAR 0 2
15639: PPUSH
15640: LD_VAR 0 3
15644: PPUSH
15645: CALL_OW 298
15649: PUSH
15650: LD_INT 6
15652: LESS
15653: IFFALSE 15752
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
15655: LD_EXP 51
15659: PUSH
15660: LD_VAR 0 6
15664: ARRAY
15665: PUSH
15666: LD_VAR 0 5
15670: ARRAY
15671: PUSH
15672: LD_INT 1
15674: ARRAY
15675: PPUSH
15676: LD_EXP 51
15680: PUSH
15681: LD_VAR 0 6
15685: ARRAY
15686: PUSH
15687: LD_VAR 0 5
15691: ARRAY
15692: PUSH
15693: LD_INT 2
15695: ARRAY
15696: PPUSH
15697: LD_VAR 0 1
15701: PPUSH
15702: CALL_OW 255
15706: PPUSH
15707: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
15711: LD_ADDR_EXP 51
15715: PUSH
15716: LD_EXP 51
15720: PPUSH
15721: LD_VAR 0 6
15725: PPUSH
15726: LD_EXP 51
15730: PUSH
15731: LD_VAR 0 6
15735: ARRAY
15736: PPUSH
15737: LD_VAR 0 5
15741: PPUSH
15742: CALL_OW 3
15746: PPUSH
15747: CALL_OW 1
15751: ST_TO_ADDR
// end ; end ;
15752: GO 15590
15754: POP
15755: POP
// end ;
15756: LD_VAR 0 4
15760: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
15761: LD_INT 0
15763: PPUSH
15764: PPUSH
15765: PPUSH
15766: PPUSH
15767: PPUSH
15768: PPUSH
15769: PPUSH
15770: PPUSH
15771: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
15772: LD_VAR 0 1
15776: PPUSH
15777: CALL_OW 264
15781: PUSH
15782: LD_INT 81
15784: EQUAL
15785: NOT
15786: PUSH
15787: LD_VAR 0 1
15791: PUSH
15792: LD_EXP 50
15796: IN
15797: NOT
15798: OR
15799: IFFALSE 15803
// exit ;
15801: GO 16125
// index := GetElementIndex ( minersList , unit ) ;
15803: LD_ADDR_VAR 0 6
15807: PUSH
15808: LD_EXP 50
15812: PPUSH
15813: LD_VAR 0 1
15817: PPUSH
15818: CALL 21460 0 2
15822: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
15823: LD_ADDR_VAR 0 8
15827: PUSH
15828: LD_EXP 52
15832: PUSH
15833: LD_EXP 51
15837: PUSH
15838: LD_VAR 0 6
15842: ARRAY
15843: MINUS
15844: ST_TO_ADDR
// if not minesFreeAmount then
15845: LD_VAR 0 8
15849: NOT
15850: IFFALSE 15854
// exit ;
15852: GO 16125
// tmp := [ ] ;
15854: LD_ADDR_VAR 0 7
15858: PUSH
15859: EMPTY
15860: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
15861: LD_ADDR_VAR 0 5
15865: PUSH
15866: DOUBLE
15867: LD_INT 1
15869: DEC
15870: ST_TO_ADDR
15871: LD_VAR 0 8
15875: PUSH
15876: FOR_TO
15877: IFFALSE 16072
// begin _d := rand ( 0 , 5 ) ;
15879: LD_ADDR_VAR 0 11
15883: PUSH
15884: LD_INT 0
15886: PPUSH
15887: LD_INT 5
15889: PPUSH
15890: CALL_OW 12
15894: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
15895: LD_ADDR_VAR 0 12
15899: PUSH
15900: LD_INT 2
15902: PPUSH
15903: LD_INT 6
15905: PPUSH
15906: CALL_OW 12
15910: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
15911: LD_ADDR_VAR 0 9
15915: PUSH
15916: LD_VAR 0 2
15920: PPUSH
15921: LD_VAR 0 11
15925: PPUSH
15926: LD_VAR 0 12
15930: PPUSH
15931: CALL_OW 272
15935: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
15936: LD_ADDR_VAR 0 10
15940: PUSH
15941: LD_VAR 0 3
15945: PPUSH
15946: LD_VAR 0 11
15950: PPUSH
15951: LD_VAR 0 12
15955: PPUSH
15956: CALL_OW 273
15960: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
15961: LD_VAR 0 9
15965: PPUSH
15966: LD_VAR 0 10
15970: PPUSH
15971: CALL_OW 488
15975: PUSH
15976: LD_VAR 0 9
15980: PUSH
15981: LD_VAR 0 10
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_VAR 0 7
15994: IN
15995: NOT
15996: AND
15997: PUSH
15998: LD_VAR 0 9
16002: PPUSH
16003: LD_VAR 0 10
16007: PPUSH
16008: CALL_OW 458
16012: NOT
16013: AND
16014: IFFALSE 16056
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
16016: LD_ADDR_VAR 0 7
16020: PUSH
16021: LD_VAR 0 7
16025: PPUSH
16026: LD_VAR 0 7
16030: PUSH
16031: LD_INT 1
16033: PLUS
16034: PPUSH
16035: LD_VAR 0 9
16039: PUSH
16040: LD_VAR 0 10
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: PPUSH
16049: CALL_OW 1
16053: ST_TO_ADDR
16054: GO 16070
// i := i - 1 ;
16056: LD_ADDR_VAR 0 5
16060: PUSH
16061: LD_VAR 0 5
16065: PUSH
16066: LD_INT 1
16068: MINUS
16069: ST_TO_ADDR
// end ;
16070: GO 15876
16072: POP
16073: POP
// for i in tmp do
16074: LD_ADDR_VAR 0 5
16078: PUSH
16079: LD_VAR 0 7
16083: PUSH
16084: FOR_IN
16085: IFFALSE 16123
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
16087: LD_VAR 0 1
16091: PPUSH
16092: LD_VAR 0 5
16096: PUSH
16097: LD_INT 1
16099: ARRAY
16100: PPUSH
16101: LD_VAR 0 5
16105: PUSH
16106: LD_INT 2
16108: ARRAY
16109: PPUSH
16110: CALL 15069 0 3
16114: NOT
16115: IFFALSE 16121
// exit ;
16117: POP
16118: POP
16119: GO 16125
16121: GO 16084
16123: POP
16124: POP
// end ;
16125: LD_VAR 0 4
16129: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
16130: LD_INT 0
16132: PPUSH
16133: PPUSH
16134: PPUSH
16135: PPUSH
16136: PPUSH
16137: PPUSH
16138: PPUSH
16139: PPUSH
16140: PPUSH
// if GetClass ( unit ) <> class_sniper then
16141: LD_VAR 0 1
16145: PPUSH
16146: CALL_OW 257
16150: PUSH
16151: LD_INT 5
16153: NONEQUAL
16154: IFFALSE 16158
// exit ;
16156: GO 16624
// dist := 8 ;
16158: LD_ADDR_VAR 0 5
16162: PUSH
16163: LD_INT 8
16165: ST_TO_ADDR
// viewRange := 12 ;
16166: LD_ADDR_VAR 0 8
16170: PUSH
16171: LD_INT 12
16173: ST_TO_ADDR
// side := GetSide ( unit ) ;
16174: LD_ADDR_VAR 0 6
16178: PUSH
16179: LD_VAR 0 1
16183: PPUSH
16184: CALL_OW 255
16188: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
16189: LD_INT 61
16191: PPUSH
16192: LD_VAR 0 6
16196: PPUSH
16197: CALL_OW 321
16201: PUSH
16202: LD_INT 2
16204: EQUAL
16205: IFFALSE 16215
// viewRange := 16 ;
16207: LD_ADDR_VAR 0 8
16211: PUSH
16212: LD_INT 16
16214: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
16215: LD_VAR 0 1
16219: PPUSH
16220: LD_VAR 0 2
16224: PPUSH
16225: LD_VAR 0 3
16229: PPUSH
16230: CALL_OW 297
16234: PUSH
16235: LD_VAR 0 5
16239: GREATER
16240: IFFALSE 16319
// begin ComMoveXY ( unit , x , y ) ;
16242: LD_VAR 0 1
16246: PPUSH
16247: LD_VAR 0 2
16251: PPUSH
16252: LD_VAR 0 3
16256: PPUSH
16257: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16261: LD_INT 35
16263: PPUSH
16264: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
16268: LD_VAR 0 1
16272: PPUSH
16273: LD_VAR 0 2
16277: PPUSH
16278: LD_VAR 0 3
16282: PPUSH
16283: CALL 53221 0 3
16287: NOT
16288: IFFALSE 16292
// exit ;
16290: GO 16624
// until GetDistUnitXY ( unit , x , y ) < dist ;
16292: LD_VAR 0 1
16296: PPUSH
16297: LD_VAR 0 2
16301: PPUSH
16302: LD_VAR 0 3
16306: PPUSH
16307: CALL_OW 297
16311: PUSH
16312: LD_VAR 0 5
16316: LESS
16317: IFFALSE 16261
// end ; ComTurnXY ( unit , x , y ) ;
16319: LD_VAR 0 1
16323: PPUSH
16324: LD_VAR 0 2
16328: PPUSH
16329: LD_VAR 0 3
16333: PPUSH
16334: CALL_OW 118
// repeat if Multiplayer then
16338: LD_OWVAR 4
16342: IFFALSE 16353
// wait ( 35 ) else
16344: LD_INT 35
16346: PPUSH
16347: CALL_OW 67
16351: GO 16360
// wait ( 5 ) ;
16353: LD_INT 5
16355: PPUSH
16356: CALL_OW 67
// _d := GetDir ( unit ) ;
16360: LD_ADDR_VAR 0 11
16364: PUSH
16365: LD_VAR 0 1
16369: PPUSH
16370: CALL_OW 254
16374: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
16375: LD_ADDR_VAR 0 7
16379: PUSH
16380: LD_VAR 0 1
16384: PPUSH
16385: CALL_OW 250
16389: PPUSH
16390: LD_VAR 0 1
16394: PPUSH
16395: CALL_OW 251
16399: PPUSH
16400: LD_VAR 0 2
16404: PPUSH
16405: LD_VAR 0 3
16409: PPUSH
16410: CALL 55829 0 4
16414: ST_TO_ADDR
// until dir = _d ;
16415: LD_VAR 0 7
16419: PUSH
16420: LD_VAR 0 11
16424: EQUAL
16425: IFFALSE 16338
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
16427: LD_ADDR_VAR 0 9
16431: PUSH
16432: LD_VAR 0 1
16436: PPUSH
16437: CALL_OW 250
16441: PPUSH
16442: LD_VAR 0 7
16446: PPUSH
16447: LD_VAR 0 5
16451: PPUSH
16452: CALL_OW 272
16456: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
16457: LD_ADDR_VAR 0 10
16461: PUSH
16462: LD_VAR 0 1
16466: PPUSH
16467: CALL_OW 251
16471: PPUSH
16472: LD_VAR 0 7
16476: PPUSH
16477: LD_VAR 0 5
16481: PPUSH
16482: CALL_OW 273
16486: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16487: LD_VAR 0 9
16491: PPUSH
16492: LD_VAR 0 10
16496: PPUSH
16497: CALL_OW 488
16501: NOT
16502: IFFALSE 16506
// exit ;
16504: GO 16624
// ComAnimCustom ( unit , 1 ) ;
16506: LD_VAR 0 1
16510: PPUSH
16511: LD_INT 1
16513: PPUSH
16514: CALL_OW 592
// p := 0 ;
16518: LD_ADDR_VAR 0 12
16522: PUSH
16523: LD_INT 0
16525: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
16526: LD_VAR 0 9
16530: PPUSH
16531: LD_VAR 0 10
16535: PPUSH
16536: LD_VAR 0 6
16540: PPUSH
16541: LD_VAR 0 8
16545: PPUSH
16546: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
16550: LD_INT 35
16552: PPUSH
16553: CALL_OW 67
// p := Inc ( p ) ;
16557: LD_ADDR_VAR 0 12
16561: PUSH
16562: LD_VAR 0 12
16566: PPUSH
16567: CALL 55785 0 1
16571: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
16572: LD_VAR 0 12
16576: PUSH
16577: LD_INT 3
16579: EQUAL
16580: PUSH
16581: LD_VAR 0 1
16585: PPUSH
16586: CALL_OW 302
16590: NOT
16591: OR
16592: PUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 301
16602: OR
16603: IFFALSE 16550
// RemoveSeeing ( _x , _y , side ) ;
16605: LD_VAR 0 9
16609: PPUSH
16610: LD_VAR 0 10
16614: PPUSH
16615: LD_VAR 0 6
16619: PPUSH
16620: CALL_OW 331
// end ; end_of_file
16624: LD_VAR 0 4
16628: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16629: LD_INT 0
16631: PPUSH
16632: PPUSH
// if exist_mode then
16633: LD_VAR 0 2
16637: IFFALSE 16683
// begin unit := CreateCharacter ( prefix & ident ) ;
16639: LD_ADDR_VAR 0 5
16643: PUSH
16644: LD_VAR 0 3
16648: PUSH
16649: LD_VAR 0 1
16653: STR
16654: PPUSH
16655: CALL_OW 34
16659: ST_TO_ADDR
// if unit then
16660: LD_VAR 0 5
16664: IFFALSE 16681
// DeleteCharacters ( prefix & ident ) ;
16666: LD_VAR 0 3
16670: PUSH
16671: LD_VAR 0 1
16675: STR
16676: PPUSH
16677: CALL_OW 40
// end else
16681: GO 16698
// unit := NewCharacter ( ident ) ;
16683: LD_ADDR_VAR 0 5
16687: PUSH
16688: LD_VAR 0 1
16692: PPUSH
16693: CALL_OW 25
16697: ST_TO_ADDR
// result := unit ;
16698: LD_ADDR_VAR 0 4
16702: PUSH
16703: LD_VAR 0 5
16707: ST_TO_ADDR
// end ;
16708: LD_VAR 0 4
16712: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
16713: LD_INT 0
16715: PPUSH
16716: PPUSH
// if exist_mode then
16717: LD_VAR 0 2
16721: IFFALSE 16746
// unit := CreateCharacter ( prefix & ident ) else
16723: LD_ADDR_VAR 0 5
16727: PUSH
16728: LD_VAR 0 3
16732: PUSH
16733: LD_VAR 0 1
16737: STR
16738: PPUSH
16739: CALL_OW 34
16743: ST_TO_ADDR
16744: GO 16761
// unit := NewCharacter ( ident ) ;
16746: LD_ADDR_VAR 0 5
16750: PUSH
16751: LD_VAR 0 1
16755: PPUSH
16756: CALL_OW 25
16760: ST_TO_ADDR
// result := unit ;
16761: LD_ADDR_VAR 0 4
16765: PUSH
16766: LD_VAR 0 5
16770: ST_TO_ADDR
// end ;
16771: LD_VAR 0 4
16775: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16776: LD_INT 0
16778: PPUSH
16779: PPUSH
// if not side or not nation then
16780: LD_VAR 0 1
16784: NOT
16785: PUSH
16786: LD_VAR 0 2
16790: NOT
16791: OR
16792: IFFALSE 16796
// exit ;
16794: GO 17564
// case nation of nation_american :
16796: LD_VAR 0 2
16800: PUSH
16801: LD_INT 1
16803: DOUBLE
16804: EQUAL
16805: IFTRUE 16809
16807: GO 17023
16809: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16810: LD_ADDR_VAR 0 4
16814: PUSH
16815: LD_INT 35
16817: PUSH
16818: LD_INT 45
16820: PUSH
16821: LD_INT 46
16823: PUSH
16824: LD_INT 47
16826: PUSH
16827: LD_INT 82
16829: PUSH
16830: LD_INT 83
16832: PUSH
16833: LD_INT 84
16835: PUSH
16836: LD_INT 85
16838: PUSH
16839: LD_INT 86
16841: PUSH
16842: LD_INT 1
16844: PUSH
16845: LD_INT 2
16847: PUSH
16848: LD_INT 6
16850: PUSH
16851: LD_INT 15
16853: PUSH
16854: LD_INT 16
16856: PUSH
16857: LD_INT 7
16859: PUSH
16860: LD_INT 12
16862: PUSH
16863: LD_INT 13
16865: PUSH
16866: LD_INT 10
16868: PUSH
16869: LD_INT 14
16871: PUSH
16872: LD_INT 20
16874: PUSH
16875: LD_INT 21
16877: PUSH
16878: LD_INT 22
16880: PUSH
16881: LD_INT 25
16883: PUSH
16884: LD_INT 32
16886: PUSH
16887: LD_INT 27
16889: PUSH
16890: LD_INT 36
16892: PUSH
16893: LD_INT 69
16895: PUSH
16896: LD_INT 39
16898: PUSH
16899: LD_INT 34
16901: PUSH
16902: LD_INT 40
16904: PUSH
16905: LD_INT 48
16907: PUSH
16908: LD_INT 49
16910: PUSH
16911: LD_INT 50
16913: PUSH
16914: LD_INT 51
16916: PUSH
16917: LD_INT 52
16919: PUSH
16920: LD_INT 53
16922: PUSH
16923: LD_INT 54
16925: PUSH
16926: LD_INT 55
16928: PUSH
16929: LD_INT 56
16931: PUSH
16932: LD_INT 57
16934: PUSH
16935: LD_INT 58
16937: PUSH
16938: LD_INT 59
16940: PUSH
16941: LD_INT 60
16943: PUSH
16944: LD_INT 61
16946: PUSH
16947: LD_INT 62
16949: PUSH
16950: LD_INT 80
16952: PUSH
16953: LD_INT 82
16955: PUSH
16956: LD_INT 83
16958: PUSH
16959: LD_INT 84
16961: PUSH
16962: LD_INT 85
16964: PUSH
16965: LD_INT 86
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: ST_TO_ADDR
17021: GO 17488
17023: LD_INT 2
17025: DOUBLE
17026: EQUAL
17027: IFTRUE 17031
17029: GO 17257
17031: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17032: LD_ADDR_VAR 0 4
17036: PUSH
17037: LD_INT 35
17039: PUSH
17040: LD_INT 45
17042: PUSH
17043: LD_INT 46
17045: PUSH
17046: LD_INT 47
17048: PUSH
17049: LD_INT 82
17051: PUSH
17052: LD_INT 83
17054: PUSH
17055: LD_INT 84
17057: PUSH
17058: LD_INT 85
17060: PUSH
17061: LD_INT 87
17063: PUSH
17064: LD_INT 70
17066: PUSH
17067: LD_INT 1
17069: PUSH
17070: LD_INT 11
17072: PUSH
17073: LD_INT 3
17075: PUSH
17076: LD_INT 4
17078: PUSH
17079: LD_INT 5
17081: PUSH
17082: LD_INT 6
17084: PUSH
17085: LD_INT 15
17087: PUSH
17088: LD_INT 18
17090: PUSH
17091: LD_INT 7
17093: PUSH
17094: LD_INT 17
17096: PUSH
17097: LD_INT 8
17099: PUSH
17100: LD_INT 20
17102: PUSH
17103: LD_INT 21
17105: PUSH
17106: LD_INT 22
17108: PUSH
17109: LD_INT 72
17111: PUSH
17112: LD_INT 26
17114: PUSH
17115: LD_INT 69
17117: PUSH
17118: LD_INT 39
17120: PUSH
17121: LD_INT 40
17123: PUSH
17124: LD_INT 41
17126: PUSH
17127: LD_INT 42
17129: PUSH
17130: LD_INT 43
17132: PUSH
17133: LD_INT 48
17135: PUSH
17136: LD_INT 49
17138: PUSH
17139: LD_INT 50
17141: PUSH
17142: LD_INT 51
17144: PUSH
17145: LD_INT 52
17147: PUSH
17148: LD_INT 53
17150: PUSH
17151: LD_INT 54
17153: PUSH
17154: LD_INT 55
17156: PUSH
17157: LD_INT 56
17159: PUSH
17160: LD_INT 60
17162: PUSH
17163: LD_INT 61
17165: PUSH
17166: LD_INT 62
17168: PUSH
17169: LD_INT 66
17171: PUSH
17172: LD_INT 67
17174: PUSH
17175: LD_INT 68
17177: PUSH
17178: LD_INT 81
17180: PUSH
17181: LD_INT 82
17183: PUSH
17184: LD_INT 83
17186: PUSH
17187: LD_INT 84
17189: PUSH
17190: LD_INT 85
17192: PUSH
17193: LD_INT 87
17195: PUSH
17196: LD_INT 88
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: ST_TO_ADDR
17255: GO 17488
17257: LD_INT 3
17259: DOUBLE
17260: EQUAL
17261: IFTRUE 17265
17263: GO 17487
17265: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17266: LD_ADDR_VAR 0 4
17270: PUSH
17271: LD_INT 46
17273: PUSH
17274: LD_INT 47
17276: PUSH
17277: LD_INT 1
17279: PUSH
17280: LD_INT 2
17282: PUSH
17283: LD_INT 82
17285: PUSH
17286: LD_INT 83
17288: PUSH
17289: LD_INT 84
17291: PUSH
17292: LD_INT 85
17294: PUSH
17295: LD_INT 86
17297: PUSH
17298: LD_INT 11
17300: PUSH
17301: LD_INT 9
17303: PUSH
17304: LD_INT 20
17306: PUSH
17307: LD_INT 19
17309: PUSH
17310: LD_INT 21
17312: PUSH
17313: LD_INT 24
17315: PUSH
17316: LD_INT 22
17318: PUSH
17319: LD_INT 25
17321: PUSH
17322: LD_INT 28
17324: PUSH
17325: LD_INT 29
17327: PUSH
17328: LD_INT 30
17330: PUSH
17331: LD_INT 31
17333: PUSH
17334: LD_INT 37
17336: PUSH
17337: LD_INT 38
17339: PUSH
17340: LD_INT 32
17342: PUSH
17343: LD_INT 27
17345: PUSH
17346: LD_INT 33
17348: PUSH
17349: LD_INT 69
17351: PUSH
17352: LD_INT 39
17354: PUSH
17355: LD_INT 34
17357: PUSH
17358: LD_INT 40
17360: PUSH
17361: LD_INT 71
17363: PUSH
17364: LD_INT 23
17366: PUSH
17367: LD_INT 44
17369: PUSH
17370: LD_INT 48
17372: PUSH
17373: LD_INT 49
17375: PUSH
17376: LD_INT 50
17378: PUSH
17379: LD_INT 51
17381: PUSH
17382: LD_INT 52
17384: PUSH
17385: LD_INT 53
17387: PUSH
17388: LD_INT 54
17390: PUSH
17391: LD_INT 55
17393: PUSH
17394: LD_INT 56
17396: PUSH
17397: LD_INT 57
17399: PUSH
17400: LD_INT 58
17402: PUSH
17403: LD_INT 59
17405: PUSH
17406: LD_INT 63
17408: PUSH
17409: LD_INT 64
17411: PUSH
17412: LD_INT 65
17414: PUSH
17415: LD_INT 82
17417: PUSH
17418: LD_INT 83
17420: PUSH
17421: LD_INT 84
17423: PUSH
17424: LD_INT 85
17426: PUSH
17427: LD_INT 86
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: ST_TO_ADDR
17485: GO 17488
17487: POP
// if state > - 1 and state < 3 then
17488: LD_VAR 0 3
17492: PUSH
17493: LD_INT 1
17495: NEG
17496: GREATER
17497: PUSH
17498: LD_VAR 0 3
17502: PUSH
17503: LD_INT 3
17505: LESS
17506: AND
17507: IFFALSE 17564
// for i in result do
17509: LD_ADDR_VAR 0 5
17513: PUSH
17514: LD_VAR 0 4
17518: PUSH
17519: FOR_IN
17520: IFFALSE 17562
// if GetTech ( i , side ) <> state then
17522: LD_VAR 0 5
17526: PPUSH
17527: LD_VAR 0 1
17531: PPUSH
17532: CALL_OW 321
17536: PUSH
17537: LD_VAR 0 3
17541: NONEQUAL
17542: IFFALSE 17560
// result := result diff i ;
17544: LD_ADDR_VAR 0 4
17548: PUSH
17549: LD_VAR 0 4
17553: PUSH
17554: LD_VAR 0 5
17558: DIFF
17559: ST_TO_ADDR
17560: GO 17519
17562: POP
17563: POP
// end ;
17564: LD_VAR 0 4
17568: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17569: LD_INT 0
17571: PPUSH
17572: PPUSH
17573: PPUSH
// result := true ;
17574: LD_ADDR_VAR 0 3
17578: PUSH
17579: LD_INT 1
17581: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17582: LD_ADDR_VAR 0 5
17586: PUSH
17587: LD_VAR 0 2
17591: PPUSH
17592: CALL_OW 480
17596: ST_TO_ADDR
// if not tmp then
17597: LD_VAR 0 5
17601: NOT
17602: IFFALSE 17606
// exit ;
17604: GO 17655
// for i in tmp do
17606: LD_ADDR_VAR 0 4
17610: PUSH
17611: LD_VAR 0 5
17615: PUSH
17616: FOR_IN
17617: IFFALSE 17653
// if GetTech ( i , side ) <> state_researched then
17619: LD_VAR 0 4
17623: PPUSH
17624: LD_VAR 0 1
17628: PPUSH
17629: CALL_OW 321
17633: PUSH
17634: LD_INT 2
17636: NONEQUAL
17637: IFFALSE 17651
// begin result := false ;
17639: LD_ADDR_VAR 0 3
17643: PUSH
17644: LD_INT 0
17646: ST_TO_ADDR
// exit ;
17647: POP
17648: POP
17649: GO 17655
// end ;
17651: GO 17616
17653: POP
17654: POP
// end ;
17655: LD_VAR 0 3
17659: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17660: LD_INT 0
17662: PPUSH
17663: PPUSH
17664: PPUSH
17665: PPUSH
17666: PPUSH
17667: PPUSH
17668: PPUSH
17669: PPUSH
17670: PPUSH
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17675: LD_VAR 0 1
17679: NOT
17680: PUSH
17681: LD_VAR 0 1
17685: PPUSH
17686: CALL_OW 257
17690: PUSH
17691: LD_INT 9
17693: NONEQUAL
17694: OR
17695: IFFALSE 17699
// exit ;
17697: GO 18272
// side := GetSide ( unit ) ;
17699: LD_ADDR_VAR 0 9
17703: PUSH
17704: LD_VAR 0 1
17708: PPUSH
17709: CALL_OW 255
17713: ST_TO_ADDR
// tech_space := tech_spacanom ;
17714: LD_ADDR_VAR 0 12
17718: PUSH
17719: LD_INT 29
17721: ST_TO_ADDR
// tech_time := tech_taurad ;
17722: LD_ADDR_VAR 0 13
17726: PUSH
17727: LD_INT 28
17729: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17730: LD_ADDR_VAR 0 11
17734: PUSH
17735: LD_VAR 0 1
17739: PPUSH
17740: CALL_OW 310
17744: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17745: LD_VAR 0 11
17749: PPUSH
17750: CALL_OW 247
17754: PUSH
17755: LD_INT 2
17757: EQUAL
17758: IFFALSE 17762
// exit ;
17760: GO 18272
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17762: LD_ADDR_VAR 0 8
17766: PUSH
17767: LD_INT 81
17769: PUSH
17770: LD_VAR 0 9
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 3
17781: PUSH
17782: LD_INT 21
17784: PUSH
17785: LD_INT 3
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PPUSH
17800: CALL_OW 69
17804: ST_TO_ADDR
// if not tmp then
17805: LD_VAR 0 8
17809: NOT
17810: IFFALSE 17814
// exit ;
17812: GO 18272
// if in_unit then
17814: LD_VAR 0 11
17818: IFFALSE 17842
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17820: LD_ADDR_VAR 0 10
17824: PUSH
17825: LD_VAR 0 8
17829: PPUSH
17830: LD_VAR 0 11
17834: PPUSH
17835: CALL_OW 74
17839: ST_TO_ADDR
17840: GO 17862
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17842: LD_ADDR_VAR 0 10
17846: PUSH
17847: LD_VAR 0 8
17851: PPUSH
17852: LD_VAR 0 1
17856: PPUSH
17857: CALL_OW 74
17861: ST_TO_ADDR
// if not enemy then
17862: LD_VAR 0 10
17866: NOT
17867: IFFALSE 17871
// exit ;
17869: GO 18272
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17871: LD_VAR 0 11
17875: PUSH
17876: LD_VAR 0 11
17880: PPUSH
17881: LD_VAR 0 10
17885: PPUSH
17886: CALL_OW 296
17890: PUSH
17891: LD_INT 13
17893: GREATER
17894: AND
17895: PUSH
17896: LD_VAR 0 1
17900: PPUSH
17901: LD_VAR 0 10
17905: PPUSH
17906: CALL_OW 296
17910: PUSH
17911: LD_INT 12
17913: GREATER
17914: OR
17915: IFFALSE 17919
// exit ;
17917: GO 18272
// missile := [ 1 ] ;
17919: LD_ADDR_VAR 0 14
17923: PUSH
17924: LD_INT 1
17926: PUSH
17927: EMPTY
17928: LIST
17929: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17930: LD_VAR 0 9
17934: PPUSH
17935: LD_VAR 0 12
17939: PPUSH
17940: CALL_OW 325
17944: IFFALSE 17973
// missile := Replace ( missile , missile + 1 , 2 ) ;
17946: LD_ADDR_VAR 0 14
17950: PUSH
17951: LD_VAR 0 14
17955: PPUSH
17956: LD_VAR 0 14
17960: PUSH
17961: LD_INT 1
17963: PLUS
17964: PPUSH
17965: LD_INT 2
17967: PPUSH
17968: CALL_OW 1
17972: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17973: LD_VAR 0 9
17977: PPUSH
17978: LD_VAR 0 13
17982: PPUSH
17983: CALL_OW 325
17987: PUSH
17988: LD_VAR 0 10
17992: PPUSH
17993: CALL_OW 255
17997: PPUSH
17998: LD_VAR 0 13
18002: PPUSH
18003: CALL_OW 325
18007: NOT
18008: AND
18009: IFFALSE 18038
// missile := Replace ( missile , missile + 1 , 3 ) ;
18011: LD_ADDR_VAR 0 14
18015: PUSH
18016: LD_VAR 0 14
18020: PPUSH
18021: LD_VAR 0 14
18025: PUSH
18026: LD_INT 1
18028: PLUS
18029: PPUSH
18030: LD_INT 3
18032: PPUSH
18033: CALL_OW 1
18037: ST_TO_ADDR
// if missile < 2 then
18038: LD_VAR 0 14
18042: PUSH
18043: LD_INT 2
18045: LESS
18046: IFFALSE 18050
// exit ;
18048: GO 18272
// x := GetX ( enemy ) ;
18050: LD_ADDR_VAR 0 4
18054: PUSH
18055: LD_VAR 0 10
18059: PPUSH
18060: CALL_OW 250
18064: ST_TO_ADDR
// y := GetY ( enemy ) ;
18065: LD_ADDR_VAR 0 5
18069: PUSH
18070: LD_VAR 0 10
18074: PPUSH
18075: CALL_OW 251
18079: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18080: LD_ADDR_VAR 0 6
18084: PUSH
18085: LD_VAR 0 4
18089: PUSH
18090: LD_INT 1
18092: NEG
18093: PPUSH
18094: LD_INT 1
18096: PPUSH
18097: CALL_OW 12
18101: PLUS
18102: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18103: LD_ADDR_VAR 0 7
18107: PUSH
18108: LD_VAR 0 5
18112: PUSH
18113: LD_INT 1
18115: NEG
18116: PPUSH
18117: LD_INT 1
18119: PPUSH
18120: CALL_OW 12
18124: PLUS
18125: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18126: LD_VAR 0 6
18130: PPUSH
18131: LD_VAR 0 7
18135: PPUSH
18136: CALL_OW 488
18140: NOT
18141: IFFALSE 18163
// begin _x := x ;
18143: LD_ADDR_VAR 0 6
18147: PUSH
18148: LD_VAR 0 4
18152: ST_TO_ADDR
// _y := y ;
18153: LD_ADDR_VAR 0 7
18157: PUSH
18158: LD_VAR 0 5
18162: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18163: LD_ADDR_VAR 0 3
18167: PUSH
18168: LD_INT 1
18170: PPUSH
18171: LD_VAR 0 14
18175: PPUSH
18176: CALL_OW 12
18180: ST_TO_ADDR
// case i of 1 :
18181: LD_VAR 0 3
18185: PUSH
18186: LD_INT 1
18188: DOUBLE
18189: EQUAL
18190: IFTRUE 18194
18192: GO 18211
18194: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18195: LD_VAR 0 1
18199: PPUSH
18200: LD_VAR 0 10
18204: PPUSH
18205: CALL_OW 115
18209: GO 18272
18211: LD_INT 2
18213: DOUBLE
18214: EQUAL
18215: IFTRUE 18219
18217: GO 18241
18219: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18220: LD_VAR 0 1
18224: PPUSH
18225: LD_VAR 0 6
18229: PPUSH
18230: LD_VAR 0 7
18234: PPUSH
18235: CALL_OW 153
18239: GO 18272
18241: LD_INT 3
18243: DOUBLE
18244: EQUAL
18245: IFTRUE 18249
18247: GO 18271
18249: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18250: LD_VAR 0 1
18254: PPUSH
18255: LD_VAR 0 6
18259: PPUSH
18260: LD_VAR 0 7
18264: PPUSH
18265: CALL_OW 154
18269: GO 18272
18271: POP
// end ;
18272: LD_VAR 0 2
18276: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18277: LD_INT 0
18279: PPUSH
18280: PPUSH
18281: PPUSH
18282: PPUSH
18283: PPUSH
18284: PPUSH
// if not unit or not building then
18285: LD_VAR 0 1
18289: NOT
18290: PUSH
18291: LD_VAR 0 2
18295: NOT
18296: OR
18297: IFFALSE 18301
// exit ;
18299: GO 18459
// x := GetX ( building ) ;
18301: LD_ADDR_VAR 0 5
18305: PUSH
18306: LD_VAR 0 2
18310: PPUSH
18311: CALL_OW 250
18315: ST_TO_ADDR
// y := GetY ( building ) ;
18316: LD_ADDR_VAR 0 6
18320: PUSH
18321: LD_VAR 0 2
18325: PPUSH
18326: CALL_OW 251
18330: ST_TO_ADDR
// for i = 0 to 5 do
18331: LD_ADDR_VAR 0 4
18335: PUSH
18336: DOUBLE
18337: LD_INT 0
18339: DEC
18340: ST_TO_ADDR
18341: LD_INT 5
18343: PUSH
18344: FOR_TO
18345: IFFALSE 18457
// begin _x := ShiftX ( x , i , 3 ) ;
18347: LD_ADDR_VAR 0 7
18351: PUSH
18352: LD_VAR 0 5
18356: PPUSH
18357: LD_VAR 0 4
18361: PPUSH
18362: LD_INT 3
18364: PPUSH
18365: CALL_OW 272
18369: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18370: LD_ADDR_VAR 0 8
18374: PUSH
18375: LD_VAR 0 6
18379: PPUSH
18380: LD_VAR 0 4
18384: PPUSH
18385: LD_INT 3
18387: PPUSH
18388: CALL_OW 273
18392: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18393: LD_VAR 0 7
18397: PPUSH
18398: LD_VAR 0 8
18402: PPUSH
18403: CALL_OW 488
18407: NOT
18408: IFFALSE 18412
// continue ;
18410: GO 18344
// if HexInfo ( _x , _y ) = 0 then
18412: LD_VAR 0 7
18416: PPUSH
18417: LD_VAR 0 8
18421: PPUSH
18422: CALL_OW 428
18426: PUSH
18427: LD_INT 0
18429: EQUAL
18430: IFFALSE 18455
// begin ComMoveXY ( unit , _x , _y ) ;
18432: LD_VAR 0 1
18436: PPUSH
18437: LD_VAR 0 7
18441: PPUSH
18442: LD_VAR 0 8
18446: PPUSH
18447: CALL_OW 111
// exit ;
18451: POP
18452: POP
18453: GO 18459
// end ; end ;
18455: GO 18344
18457: POP
18458: POP
// end ;
18459: LD_VAR 0 3
18463: RET
// export function ScanBase ( side , base_area ) ; begin
18464: LD_INT 0
18466: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18467: LD_ADDR_VAR 0 3
18471: PUSH
18472: LD_VAR 0 2
18476: PPUSH
18477: LD_INT 81
18479: PUSH
18480: LD_VAR 0 1
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PPUSH
18489: CALL_OW 70
18493: ST_TO_ADDR
// end ;
18494: LD_VAR 0 3
18498: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18499: LD_INT 0
18501: PPUSH
18502: PPUSH
18503: PPUSH
18504: PPUSH
// result := false ;
18505: LD_ADDR_VAR 0 2
18509: PUSH
18510: LD_INT 0
18512: ST_TO_ADDR
// side := GetSide ( unit ) ;
18513: LD_ADDR_VAR 0 3
18517: PUSH
18518: LD_VAR 0 1
18522: PPUSH
18523: CALL_OW 255
18527: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18528: LD_ADDR_VAR 0 4
18532: PUSH
18533: LD_VAR 0 1
18537: PPUSH
18538: CALL_OW 248
18542: ST_TO_ADDR
// case nat of 1 :
18543: LD_VAR 0 4
18547: PUSH
18548: LD_INT 1
18550: DOUBLE
18551: EQUAL
18552: IFTRUE 18556
18554: GO 18567
18556: POP
// tech := tech_lassight ; 2 :
18557: LD_ADDR_VAR 0 5
18561: PUSH
18562: LD_INT 12
18564: ST_TO_ADDR
18565: GO 18606
18567: LD_INT 2
18569: DOUBLE
18570: EQUAL
18571: IFTRUE 18575
18573: GO 18586
18575: POP
// tech := tech_mortar ; 3 :
18576: LD_ADDR_VAR 0 5
18580: PUSH
18581: LD_INT 41
18583: ST_TO_ADDR
18584: GO 18606
18586: LD_INT 3
18588: DOUBLE
18589: EQUAL
18590: IFTRUE 18594
18592: GO 18605
18594: POP
// tech := tech_bazooka ; end ;
18595: LD_ADDR_VAR 0 5
18599: PUSH
18600: LD_INT 44
18602: ST_TO_ADDR
18603: GO 18606
18605: POP
// if Researched ( side , tech ) then
18606: LD_VAR 0 3
18610: PPUSH
18611: LD_VAR 0 5
18615: PPUSH
18616: CALL_OW 325
18620: IFFALSE 18647
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18622: LD_ADDR_VAR 0 2
18626: PUSH
18627: LD_INT 5
18629: PUSH
18630: LD_INT 8
18632: PUSH
18633: LD_INT 9
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: LIST
18640: PUSH
18641: LD_VAR 0 4
18645: ARRAY
18646: ST_TO_ADDR
// end ;
18647: LD_VAR 0 2
18651: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18652: LD_INT 0
18654: PPUSH
18655: PPUSH
18656: PPUSH
// if not mines then
18657: LD_VAR 0 2
18661: NOT
18662: IFFALSE 18666
// exit ;
18664: GO 18810
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18666: LD_ADDR_VAR 0 5
18670: PUSH
18671: LD_INT 81
18673: PUSH
18674: LD_VAR 0 1
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 3
18685: PUSH
18686: LD_INT 21
18688: PUSH
18689: LD_INT 3
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PPUSH
18704: CALL_OW 69
18708: ST_TO_ADDR
// for i in mines do
18709: LD_ADDR_VAR 0 4
18713: PUSH
18714: LD_VAR 0 2
18718: PUSH
18719: FOR_IN
18720: IFFALSE 18808
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18722: LD_VAR 0 4
18726: PUSH
18727: LD_INT 1
18729: ARRAY
18730: PPUSH
18731: LD_VAR 0 4
18735: PUSH
18736: LD_INT 2
18738: ARRAY
18739: PPUSH
18740: CALL_OW 458
18744: NOT
18745: IFFALSE 18749
// continue ;
18747: GO 18719
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18749: LD_VAR 0 4
18753: PUSH
18754: LD_INT 1
18756: ARRAY
18757: PPUSH
18758: LD_VAR 0 4
18762: PUSH
18763: LD_INT 2
18765: ARRAY
18766: PPUSH
18767: CALL_OW 428
18771: PUSH
18772: LD_VAR 0 5
18776: IN
18777: IFFALSE 18806
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18779: LD_VAR 0 4
18783: PUSH
18784: LD_INT 1
18786: ARRAY
18787: PPUSH
18788: LD_VAR 0 4
18792: PUSH
18793: LD_INT 2
18795: ARRAY
18796: PPUSH
18797: LD_VAR 0 1
18801: PPUSH
18802: CALL_OW 456
// end ;
18806: GO 18719
18808: POP
18809: POP
// end ;
18810: LD_VAR 0 3
18814: RET
// export function Count ( array ) ; begin
18815: LD_INT 0
18817: PPUSH
// result := array + 0 ;
18818: LD_ADDR_VAR 0 2
18822: PUSH
18823: LD_VAR 0 1
18827: PUSH
18828: LD_INT 0
18830: PLUS
18831: ST_TO_ADDR
// end ;
18832: LD_VAR 0 2
18836: RET
// export function IsEmpty ( building ) ; begin
18837: LD_INT 0
18839: PPUSH
// if not building then
18840: LD_VAR 0 1
18844: NOT
18845: IFFALSE 18849
// exit ;
18847: GO 18892
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18849: LD_ADDR_VAR 0 2
18853: PUSH
18854: LD_VAR 0 1
18858: PUSH
18859: LD_INT 22
18861: PUSH
18862: LD_VAR 0 1
18866: PPUSH
18867: CALL_OW 255
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 58
18878: PUSH
18879: EMPTY
18880: LIST
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PPUSH
18886: CALL_OW 69
18890: IN
18891: ST_TO_ADDR
// end ;
18892: LD_VAR 0 2
18896: RET
// export function IsNotFull ( building ) ; var places ; begin
18897: LD_INT 0
18899: PPUSH
18900: PPUSH
// if not building then
18901: LD_VAR 0 1
18905: NOT
18906: IFFALSE 18910
// exit ;
18908: GO 18938
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18910: LD_ADDR_VAR 0 2
18914: PUSH
18915: LD_VAR 0 1
18919: PPUSH
18920: LD_INT 3
18922: PUSH
18923: LD_INT 62
18925: PUSH
18926: EMPTY
18927: LIST
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PPUSH
18933: CALL_OW 72
18937: ST_TO_ADDR
// end ;
18938: LD_VAR 0 2
18942: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18943: LD_INT 0
18945: PPUSH
18946: PPUSH
18947: PPUSH
18948: PPUSH
// tmp := [ ] ;
18949: LD_ADDR_VAR 0 3
18953: PUSH
18954: EMPTY
18955: ST_TO_ADDR
// list := [ ] ;
18956: LD_ADDR_VAR 0 5
18960: PUSH
18961: EMPTY
18962: ST_TO_ADDR
// for i = 16 to 25 do
18963: LD_ADDR_VAR 0 4
18967: PUSH
18968: DOUBLE
18969: LD_INT 16
18971: DEC
18972: ST_TO_ADDR
18973: LD_INT 25
18975: PUSH
18976: FOR_TO
18977: IFFALSE 19050
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18979: LD_ADDR_VAR 0 3
18983: PUSH
18984: LD_VAR 0 3
18988: PUSH
18989: LD_INT 22
18991: PUSH
18992: LD_VAR 0 1
18996: PPUSH
18997: CALL_OW 255
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 91
19008: PUSH
19009: LD_VAR 0 1
19013: PUSH
19014: LD_INT 6
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 30
19024: PUSH
19025: LD_VAR 0 4
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: LIST
19038: PUSH
19039: EMPTY
19040: LIST
19041: PPUSH
19042: CALL_OW 69
19046: ADD
19047: ST_TO_ADDR
19048: GO 18976
19050: POP
19051: POP
// for i = 1 to tmp do
19052: LD_ADDR_VAR 0 4
19056: PUSH
19057: DOUBLE
19058: LD_INT 1
19060: DEC
19061: ST_TO_ADDR
19062: LD_VAR 0 3
19066: PUSH
19067: FOR_TO
19068: IFFALSE 19156
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19070: LD_ADDR_VAR 0 5
19074: PUSH
19075: LD_VAR 0 5
19079: PUSH
19080: LD_VAR 0 3
19084: PUSH
19085: LD_VAR 0 4
19089: ARRAY
19090: PPUSH
19091: CALL_OW 266
19095: PUSH
19096: LD_VAR 0 3
19100: PUSH
19101: LD_VAR 0 4
19105: ARRAY
19106: PPUSH
19107: CALL_OW 250
19111: PUSH
19112: LD_VAR 0 3
19116: PUSH
19117: LD_VAR 0 4
19121: ARRAY
19122: PPUSH
19123: CALL_OW 251
19127: PUSH
19128: LD_VAR 0 3
19132: PUSH
19133: LD_VAR 0 4
19137: ARRAY
19138: PPUSH
19139: CALL_OW 254
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: ADD
19153: ST_TO_ADDR
19154: GO 19067
19156: POP
19157: POP
// result := list ;
19158: LD_ADDR_VAR 0 2
19162: PUSH
19163: LD_VAR 0 5
19167: ST_TO_ADDR
// end ;
19168: LD_VAR 0 2
19172: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19173: LD_INT 0
19175: PPUSH
19176: PPUSH
19177: PPUSH
19178: PPUSH
19179: PPUSH
19180: PPUSH
19181: PPUSH
// if not factory then
19182: LD_VAR 0 1
19186: NOT
19187: IFFALSE 19191
// exit ;
19189: GO 19784
// if control = control_apeman then
19191: LD_VAR 0 4
19195: PUSH
19196: LD_INT 5
19198: EQUAL
19199: IFFALSE 19308
// begin tmp := UnitsInside ( factory ) ;
19201: LD_ADDR_VAR 0 8
19205: PUSH
19206: LD_VAR 0 1
19210: PPUSH
19211: CALL_OW 313
19215: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19216: LD_VAR 0 8
19220: PPUSH
19221: LD_INT 25
19223: PUSH
19224: LD_INT 12
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PPUSH
19231: CALL_OW 72
19235: NOT
19236: IFFALSE 19246
// control := control_manual ;
19238: LD_ADDR_VAR 0 4
19242: PUSH
19243: LD_INT 1
19245: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19246: LD_ADDR_VAR 0 8
19250: PUSH
19251: LD_VAR 0 1
19255: PPUSH
19256: CALL 18943 0 1
19260: ST_TO_ADDR
// if tmp then
19261: LD_VAR 0 8
19265: IFFALSE 19308
// begin for i in tmp do
19267: LD_ADDR_VAR 0 7
19271: PUSH
19272: LD_VAR 0 8
19276: PUSH
19277: FOR_IN
19278: IFFALSE 19306
// if i [ 1 ] = b_ext_radio then
19280: LD_VAR 0 7
19284: PUSH
19285: LD_INT 1
19287: ARRAY
19288: PUSH
19289: LD_INT 22
19291: EQUAL
19292: IFFALSE 19304
// begin control := control_remote ;
19294: LD_ADDR_VAR 0 4
19298: PUSH
19299: LD_INT 2
19301: ST_TO_ADDR
// break ;
19302: GO 19306
// end ;
19304: GO 19277
19306: POP
19307: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19308: LD_VAR 0 1
19312: PPUSH
19313: LD_VAR 0 2
19317: PPUSH
19318: LD_VAR 0 3
19322: PPUSH
19323: LD_VAR 0 4
19327: PPUSH
19328: LD_VAR 0 5
19332: PPUSH
19333: CALL_OW 448
19337: IFFALSE 19372
// begin result := [ chassis , engine , control , weapon ] ;
19339: LD_ADDR_VAR 0 6
19343: PUSH
19344: LD_VAR 0 2
19348: PUSH
19349: LD_VAR 0 3
19353: PUSH
19354: LD_VAR 0 4
19358: PUSH
19359: LD_VAR 0 5
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: ST_TO_ADDR
// exit ;
19370: GO 19784
// end ; _chassis := AvailableChassisList ( factory ) ;
19372: LD_ADDR_VAR 0 9
19376: PUSH
19377: LD_VAR 0 1
19381: PPUSH
19382: CALL_OW 475
19386: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19387: LD_ADDR_VAR 0 11
19391: PUSH
19392: LD_VAR 0 1
19396: PPUSH
19397: CALL_OW 476
19401: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19402: LD_ADDR_VAR 0 12
19406: PUSH
19407: LD_VAR 0 1
19411: PPUSH
19412: CALL_OW 477
19416: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19417: LD_ADDR_VAR 0 10
19421: PUSH
19422: LD_VAR 0 1
19426: PPUSH
19427: CALL_OW 478
19431: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19432: LD_VAR 0 9
19436: NOT
19437: PUSH
19438: LD_VAR 0 11
19442: NOT
19443: OR
19444: PUSH
19445: LD_VAR 0 12
19449: NOT
19450: OR
19451: PUSH
19452: LD_VAR 0 10
19456: NOT
19457: OR
19458: IFFALSE 19493
// begin result := [ chassis , engine , control , weapon ] ;
19460: LD_ADDR_VAR 0 6
19464: PUSH
19465: LD_VAR 0 2
19469: PUSH
19470: LD_VAR 0 3
19474: PUSH
19475: LD_VAR 0 4
19479: PUSH
19480: LD_VAR 0 5
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: ST_TO_ADDR
// exit ;
19491: GO 19784
// end ; if not chassis in _chassis then
19493: LD_VAR 0 2
19497: PUSH
19498: LD_VAR 0 9
19502: IN
19503: NOT
19504: IFFALSE 19530
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19506: LD_ADDR_VAR 0 2
19510: PUSH
19511: LD_VAR 0 9
19515: PUSH
19516: LD_INT 1
19518: PPUSH
19519: LD_VAR 0 9
19523: PPUSH
19524: CALL_OW 12
19528: ARRAY
19529: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19530: LD_VAR 0 2
19534: PPUSH
19535: LD_VAR 0 3
19539: PPUSH
19540: CALL 19789 0 2
19544: NOT
19545: IFFALSE 19604
// repeat engine := _engine [ 1 ] ;
19547: LD_ADDR_VAR 0 3
19551: PUSH
19552: LD_VAR 0 11
19556: PUSH
19557: LD_INT 1
19559: ARRAY
19560: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19561: LD_ADDR_VAR 0 11
19565: PUSH
19566: LD_VAR 0 11
19570: PPUSH
19571: LD_INT 1
19573: PPUSH
19574: CALL_OW 3
19578: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19579: LD_VAR 0 2
19583: PPUSH
19584: LD_VAR 0 3
19588: PPUSH
19589: CALL 19789 0 2
19593: PUSH
19594: LD_VAR 0 11
19598: PUSH
19599: EMPTY
19600: EQUAL
19601: OR
19602: IFFALSE 19547
// if not control in _control then
19604: LD_VAR 0 4
19608: PUSH
19609: LD_VAR 0 12
19613: IN
19614: NOT
19615: IFFALSE 19641
// control := _control [ rand ( 1 , _control ) ] ;
19617: LD_ADDR_VAR 0 4
19621: PUSH
19622: LD_VAR 0 12
19626: PUSH
19627: LD_INT 1
19629: PPUSH
19630: LD_VAR 0 12
19634: PPUSH
19635: CALL_OW 12
19639: ARRAY
19640: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19641: LD_VAR 0 2
19645: PPUSH
19646: LD_VAR 0 5
19650: PPUSH
19651: CALL 20009 0 2
19655: NOT
19656: IFFALSE 19715
// repeat weapon := _weapon [ 1 ] ;
19658: LD_ADDR_VAR 0 5
19662: PUSH
19663: LD_VAR 0 10
19667: PUSH
19668: LD_INT 1
19670: ARRAY
19671: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19672: LD_ADDR_VAR 0 10
19676: PUSH
19677: LD_VAR 0 10
19681: PPUSH
19682: LD_INT 1
19684: PPUSH
19685: CALL_OW 3
19689: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19690: LD_VAR 0 2
19694: PPUSH
19695: LD_VAR 0 5
19699: PPUSH
19700: CALL 20009 0 2
19704: PUSH
19705: LD_VAR 0 10
19709: PUSH
19710: EMPTY
19711: EQUAL
19712: OR
19713: IFFALSE 19658
// result := [ ] ;
19715: LD_ADDR_VAR 0 6
19719: PUSH
19720: EMPTY
19721: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19722: LD_VAR 0 1
19726: PPUSH
19727: LD_VAR 0 2
19731: PPUSH
19732: LD_VAR 0 3
19736: PPUSH
19737: LD_VAR 0 4
19741: PPUSH
19742: LD_VAR 0 5
19746: PPUSH
19747: CALL_OW 448
19751: IFFALSE 19784
// result := [ chassis , engine , control , weapon ] ;
19753: LD_ADDR_VAR 0 6
19757: PUSH
19758: LD_VAR 0 2
19762: PUSH
19763: LD_VAR 0 3
19767: PUSH
19768: LD_VAR 0 4
19772: PUSH
19773: LD_VAR 0 5
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: ST_TO_ADDR
// end ;
19784: LD_VAR 0 6
19788: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19789: LD_INT 0
19791: PPUSH
// if not chassis or not engine then
19792: LD_VAR 0 1
19796: NOT
19797: PUSH
19798: LD_VAR 0 2
19802: NOT
19803: OR
19804: IFFALSE 19808
// exit ;
19806: GO 20004
// case engine of engine_solar :
19808: LD_VAR 0 2
19812: PUSH
19813: LD_INT 2
19815: DOUBLE
19816: EQUAL
19817: IFTRUE 19821
19819: GO 19859
19821: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19822: LD_ADDR_VAR 0 3
19826: PUSH
19827: LD_INT 11
19829: PUSH
19830: LD_INT 12
19832: PUSH
19833: LD_INT 13
19835: PUSH
19836: LD_INT 14
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: LD_INT 2
19844: PUSH
19845: LD_INT 3
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: ST_TO_ADDR
19857: GO 19988
19859: LD_INT 1
19861: DOUBLE
19862: EQUAL
19863: IFTRUE 19867
19865: GO 19929
19867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19868: LD_ADDR_VAR 0 3
19872: PUSH
19873: LD_INT 11
19875: PUSH
19876: LD_INT 12
19878: PUSH
19879: LD_INT 13
19881: PUSH
19882: LD_INT 14
19884: PUSH
19885: LD_INT 1
19887: PUSH
19888: LD_INT 2
19890: PUSH
19891: LD_INT 3
19893: PUSH
19894: LD_INT 4
19896: PUSH
19897: LD_INT 5
19899: PUSH
19900: LD_INT 21
19902: PUSH
19903: LD_INT 23
19905: PUSH
19906: LD_INT 22
19908: PUSH
19909: LD_INT 24
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: ST_TO_ADDR
19927: GO 19988
19929: LD_INT 3
19931: DOUBLE
19932: EQUAL
19933: IFTRUE 19937
19935: GO 19987
19937: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19938: LD_ADDR_VAR 0 3
19942: PUSH
19943: LD_INT 13
19945: PUSH
19946: LD_INT 14
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: LD_INT 3
19954: PUSH
19955: LD_INT 4
19957: PUSH
19958: LD_INT 5
19960: PUSH
19961: LD_INT 21
19963: PUSH
19964: LD_INT 22
19966: PUSH
19967: LD_INT 23
19969: PUSH
19970: LD_INT 24
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: ST_TO_ADDR
19985: GO 19988
19987: POP
// result := ( chassis in result ) ;
19988: LD_ADDR_VAR 0 3
19992: PUSH
19993: LD_VAR 0 1
19997: PUSH
19998: LD_VAR 0 3
20002: IN
20003: ST_TO_ADDR
// end ;
20004: LD_VAR 0 3
20008: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20009: LD_INT 0
20011: PPUSH
// if not chassis or not weapon then
20012: LD_VAR 0 1
20016: NOT
20017: PUSH
20018: LD_VAR 0 2
20022: NOT
20023: OR
20024: IFFALSE 20028
// exit ;
20026: GO 21088
// case weapon of us_machine_gun :
20028: LD_VAR 0 2
20032: PUSH
20033: LD_INT 2
20035: DOUBLE
20036: EQUAL
20037: IFTRUE 20041
20039: GO 20071
20041: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20042: LD_ADDR_VAR 0 3
20046: PUSH
20047: LD_INT 1
20049: PUSH
20050: LD_INT 2
20052: PUSH
20053: LD_INT 3
20055: PUSH
20056: LD_INT 4
20058: PUSH
20059: LD_INT 5
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: ST_TO_ADDR
20069: GO 21072
20071: LD_INT 3
20073: DOUBLE
20074: EQUAL
20075: IFTRUE 20079
20077: GO 20109
20079: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20080: LD_ADDR_VAR 0 3
20084: PUSH
20085: LD_INT 1
20087: PUSH
20088: LD_INT 2
20090: PUSH
20091: LD_INT 3
20093: PUSH
20094: LD_INT 4
20096: PUSH
20097: LD_INT 5
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: ST_TO_ADDR
20107: GO 21072
20109: LD_INT 11
20111: DOUBLE
20112: EQUAL
20113: IFTRUE 20117
20115: GO 20147
20117: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20118: LD_ADDR_VAR 0 3
20122: PUSH
20123: LD_INT 1
20125: PUSH
20126: LD_INT 2
20128: PUSH
20129: LD_INT 3
20131: PUSH
20132: LD_INT 4
20134: PUSH
20135: LD_INT 5
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: ST_TO_ADDR
20145: GO 21072
20147: LD_INT 4
20149: DOUBLE
20150: EQUAL
20151: IFTRUE 20155
20153: GO 20181
20155: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20156: LD_ADDR_VAR 0 3
20160: PUSH
20161: LD_INT 2
20163: PUSH
20164: LD_INT 3
20166: PUSH
20167: LD_INT 4
20169: PUSH
20170: LD_INT 5
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: ST_TO_ADDR
20179: GO 21072
20181: LD_INT 5
20183: DOUBLE
20184: EQUAL
20185: IFTRUE 20189
20187: GO 20215
20189: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20190: LD_ADDR_VAR 0 3
20194: PUSH
20195: LD_INT 2
20197: PUSH
20198: LD_INT 3
20200: PUSH
20201: LD_INT 4
20203: PUSH
20204: LD_INT 5
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: ST_TO_ADDR
20213: GO 21072
20215: LD_INT 9
20217: DOUBLE
20218: EQUAL
20219: IFTRUE 20223
20221: GO 20249
20223: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20224: LD_ADDR_VAR 0 3
20228: PUSH
20229: LD_INT 2
20231: PUSH
20232: LD_INT 3
20234: PUSH
20235: LD_INT 4
20237: PUSH
20238: LD_INT 5
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: ST_TO_ADDR
20247: GO 21072
20249: LD_INT 7
20251: DOUBLE
20252: EQUAL
20253: IFTRUE 20257
20255: GO 20283
20257: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20258: LD_ADDR_VAR 0 3
20262: PUSH
20263: LD_INT 2
20265: PUSH
20266: LD_INT 3
20268: PUSH
20269: LD_INT 4
20271: PUSH
20272: LD_INT 5
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: ST_TO_ADDR
20281: GO 21072
20283: LD_INT 12
20285: DOUBLE
20286: EQUAL
20287: IFTRUE 20291
20289: GO 20317
20291: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20292: LD_ADDR_VAR 0 3
20296: PUSH
20297: LD_INT 2
20299: PUSH
20300: LD_INT 3
20302: PUSH
20303: LD_INT 4
20305: PUSH
20306: LD_INT 5
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: ST_TO_ADDR
20315: GO 21072
20317: LD_INT 13
20319: DOUBLE
20320: EQUAL
20321: IFTRUE 20325
20323: GO 20351
20325: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20326: LD_ADDR_VAR 0 3
20330: PUSH
20331: LD_INT 2
20333: PUSH
20334: LD_INT 3
20336: PUSH
20337: LD_INT 4
20339: PUSH
20340: LD_INT 5
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: ST_TO_ADDR
20349: GO 21072
20351: LD_INT 14
20353: DOUBLE
20354: EQUAL
20355: IFTRUE 20359
20357: GO 20377
20359: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20360: LD_ADDR_VAR 0 3
20364: PUSH
20365: LD_INT 4
20367: PUSH
20368: LD_INT 5
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: ST_TO_ADDR
20375: GO 21072
20377: LD_INT 6
20379: DOUBLE
20380: EQUAL
20381: IFTRUE 20385
20383: GO 20403
20385: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20386: LD_ADDR_VAR 0 3
20390: PUSH
20391: LD_INT 4
20393: PUSH
20394: LD_INT 5
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: ST_TO_ADDR
20401: GO 21072
20403: LD_INT 10
20405: DOUBLE
20406: EQUAL
20407: IFTRUE 20411
20409: GO 20429
20411: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20412: LD_ADDR_VAR 0 3
20416: PUSH
20417: LD_INT 4
20419: PUSH
20420: LD_INT 5
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: ST_TO_ADDR
20427: GO 21072
20429: LD_INT 22
20431: DOUBLE
20432: EQUAL
20433: IFTRUE 20437
20435: GO 20463
20437: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20438: LD_ADDR_VAR 0 3
20442: PUSH
20443: LD_INT 11
20445: PUSH
20446: LD_INT 12
20448: PUSH
20449: LD_INT 13
20451: PUSH
20452: LD_INT 14
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: ST_TO_ADDR
20461: GO 21072
20463: LD_INT 23
20465: DOUBLE
20466: EQUAL
20467: IFTRUE 20471
20469: GO 20497
20471: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20472: LD_ADDR_VAR 0 3
20476: PUSH
20477: LD_INT 11
20479: PUSH
20480: LD_INT 12
20482: PUSH
20483: LD_INT 13
20485: PUSH
20486: LD_INT 14
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: ST_TO_ADDR
20495: GO 21072
20497: LD_INT 24
20499: DOUBLE
20500: EQUAL
20501: IFTRUE 20505
20503: GO 20531
20505: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20506: LD_ADDR_VAR 0 3
20510: PUSH
20511: LD_INT 11
20513: PUSH
20514: LD_INT 12
20516: PUSH
20517: LD_INT 13
20519: PUSH
20520: LD_INT 14
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: ST_TO_ADDR
20529: GO 21072
20531: LD_INT 30
20533: DOUBLE
20534: EQUAL
20535: IFTRUE 20539
20537: GO 20565
20539: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20540: LD_ADDR_VAR 0 3
20544: PUSH
20545: LD_INT 11
20547: PUSH
20548: LD_INT 12
20550: PUSH
20551: LD_INT 13
20553: PUSH
20554: LD_INT 14
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: ST_TO_ADDR
20563: GO 21072
20565: LD_INT 25
20567: DOUBLE
20568: EQUAL
20569: IFTRUE 20573
20571: GO 20591
20573: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20574: LD_ADDR_VAR 0 3
20578: PUSH
20579: LD_INT 13
20581: PUSH
20582: LD_INT 14
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: ST_TO_ADDR
20589: GO 21072
20591: LD_INT 27
20593: DOUBLE
20594: EQUAL
20595: IFTRUE 20599
20597: GO 20617
20599: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20600: LD_ADDR_VAR 0 3
20604: PUSH
20605: LD_INT 13
20607: PUSH
20608: LD_INT 14
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: ST_TO_ADDR
20615: GO 21072
20617: LD_INT 92
20619: DOUBLE
20620: EQUAL
20621: IFTRUE 20625
20623: GO 20651
20625: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20626: LD_ADDR_VAR 0 3
20630: PUSH
20631: LD_INT 11
20633: PUSH
20634: LD_INT 12
20636: PUSH
20637: LD_INT 13
20639: PUSH
20640: LD_INT 14
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: ST_TO_ADDR
20649: GO 21072
20651: LD_INT 28
20653: DOUBLE
20654: EQUAL
20655: IFTRUE 20659
20657: GO 20677
20659: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20660: LD_ADDR_VAR 0 3
20664: PUSH
20665: LD_INT 13
20667: PUSH
20668: LD_INT 14
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: ST_TO_ADDR
20675: GO 21072
20677: LD_INT 29
20679: DOUBLE
20680: EQUAL
20681: IFTRUE 20685
20683: GO 20703
20685: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20686: LD_ADDR_VAR 0 3
20690: PUSH
20691: LD_INT 13
20693: PUSH
20694: LD_INT 14
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: ST_TO_ADDR
20701: GO 21072
20703: LD_INT 31
20705: DOUBLE
20706: EQUAL
20707: IFTRUE 20711
20709: GO 20729
20711: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20712: LD_ADDR_VAR 0 3
20716: PUSH
20717: LD_INT 13
20719: PUSH
20720: LD_INT 14
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: ST_TO_ADDR
20727: GO 21072
20729: LD_INT 26
20731: DOUBLE
20732: EQUAL
20733: IFTRUE 20737
20735: GO 20755
20737: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20738: LD_ADDR_VAR 0 3
20742: PUSH
20743: LD_INT 13
20745: PUSH
20746: LD_INT 14
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: ST_TO_ADDR
20753: GO 21072
20755: LD_INT 42
20757: DOUBLE
20758: EQUAL
20759: IFTRUE 20763
20761: GO 20789
20763: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20764: LD_ADDR_VAR 0 3
20768: PUSH
20769: LD_INT 21
20771: PUSH
20772: LD_INT 22
20774: PUSH
20775: LD_INT 23
20777: PUSH
20778: LD_INT 24
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: ST_TO_ADDR
20787: GO 21072
20789: LD_INT 43
20791: DOUBLE
20792: EQUAL
20793: IFTRUE 20797
20795: GO 20823
20797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20798: LD_ADDR_VAR 0 3
20802: PUSH
20803: LD_INT 21
20805: PUSH
20806: LD_INT 22
20808: PUSH
20809: LD_INT 23
20811: PUSH
20812: LD_INT 24
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: ST_TO_ADDR
20821: GO 21072
20823: LD_INT 44
20825: DOUBLE
20826: EQUAL
20827: IFTRUE 20831
20829: GO 20857
20831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20832: LD_ADDR_VAR 0 3
20836: PUSH
20837: LD_INT 21
20839: PUSH
20840: LD_INT 22
20842: PUSH
20843: LD_INT 23
20845: PUSH
20846: LD_INT 24
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: ST_TO_ADDR
20855: GO 21072
20857: LD_INT 45
20859: DOUBLE
20860: EQUAL
20861: IFTRUE 20865
20863: GO 20891
20865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20866: LD_ADDR_VAR 0 3
20870: PUSH
20871: LD_INT 21
20873: PUSH
20874: LD_INT 22
20876: PUSH
20877: LD_INT 23
20879: PUSH
20880: LD_INT 24
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: ST_TO_ADDR
20889: GO 21072
20891: LD_INT 49
20893: DOUBLE
20894: EQUAL
20895: IFTRUE 20899
20897: GO 20925
20899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20900: LD_ADDR_VAR 0 3
20904: PUSH
20905: LD_INT 21
20907: PUSH
20908: LD_INT 22
20910: PUSH
20911: LD_INT 23
20913: PUSH
20914: LD_INT 24
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: ST_TO_ADDR
20923: GO 21072
20925: LD_INT 51
20927: DOUBLE
20928: EQUAL
20929: IFTRUE 20933
20931: GO 20959
20933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20934: LD_ADDR_VAR 0 3
20938: PUSH
20939: LD_INT 21
20941: PUSH
20942: LD_INT 22
20944: PUSH
20945: LD_INT 23
20947: PUSH
20948: LD_INT 24
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: ST_TO_ADDR
20957: GO 21072
20959: LD_INT 52
20961: DOUBLE
20962: EQUAL
20963: IFTRUE 20967
20965: GO 20993
20967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20968: LD_ADDR_VAR 0 3
20972: PUSH
20973: LD_INT 21
20975: PUSH
20976: LD_INT 22
20978: PUSH
20979: LD_INT 23
20981: PUSH
20982: LD_INT 24
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: ST_TO_ADDR
20991: GO 21072
20993: LD_INT 53
20995: DOUBLE
20996: EQUAL
20997: IFTRUE 21001
20999: GO 21019
21001: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21002: LD_ADDR_VAR 0 3
21006: PUSH
21007: LD_INT 23
21009: PUSH
21010: LD_INT 24
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: ST_TO_ADDR
21017: GO 21072
21019: LD_INT 46
21021: DOUBLE
21022: EQUAL
21023: IFTRUE 21027
21025: GO 21045
21027: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21028: LD_ADDR_VAR 0 3
21032: PUSH
21033: LD_INT 23
21035: PUSH
21036: LD_INT 24
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: ST_TO_ADDR
21043: GO 21072
21045: LD_INT 47
21047: DOUBLE
21048: EQUAL
21049: IFTRUE 21053
21051: GO 21071
21053: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21054: LD_ADDR_VAR 0 3
21058: PUSH
21059: LD_INT 23
21061: PUSH
21062: LD_INT 24
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: ST_TO_ADDR
21069: GO 21072
21071: POP
// result := ( chassis in result ) ;
21072: LD_ADDR_VAR 0 3
21076: PUSH
21077: LD_VAR 0 1
21081: PUSH
21082: LD_VAR 0 3
21086: IN
21087: ST_TO_ADDR
// end ;
21088: LD_VAR 0 3
21092: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21093: LD_INT 0
21095: PPUSH
21096: PPUSH
21097: PPUSH
21098: PPUSH
21099: PPUSH
21100: PPUSH
21101: PPUSH
// result := array ;
21102: LD_ADDR_VAR 0 5
21106: PUSH
21107: LD_VAR 0 1
21111: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21112: LD_VAR 0 1
21116: NOT
21117: PUSH
21118: LD_VAR 0 2
21122: NOT
21123: OR
21124: PUSH
21125: LD_VAR 0 3
21129: NOT
21130: OR
21131: PUSH
21132: LD_VAR 0 2
21136: PUSH
21137: LD_VAR 0 1
21141: GREATER
21142: OR
21143: PUSH
21144: LD_VAR 0 3
21148: PUSH
21149: LD_VAR 0 1
21153: GREATER
21154: OR
21155: IFFALSE 21159
// exit ;
21157: GO 21455
// if direction then
21159: LD_VAR 0 4
21163: IFFALSE 21227
// begin d := 1 ;
21165: LD_ADDR_VAR 0 9
21169: PUSH
21170: LD_INT 1
21172: ST_TO_ADDR
// if i_from > i_to then
21173: LD_VAR 0 2
21177: PUSH
21178: LD_VAR 0 3
21182: GREATER
21183: IFFALSE 21209
// length := ( array - i_from ) + i_to else
21185: LD_ADDR_VAR 0 11
21189: PUSH
21190: LD_VAR 0 1
21194: PUSH
21195: LD_VAR 0 2
21199: MINUS
21200: PUSH
21201: LD_VAR 0 3
21205: PLUS
21206: ST_TO_ADDR
21207: GO 21225
// length := i_to - i_from ;
21209: LD_ADDR_VAR 0 11
21213: PUSH
21214: LD_VAR 0 3
21218: PUSH
21219: LD_VAR 0 2
21223: MINUS
21224: ST_TO_ADDR
// end else
21225: GO 21288
// begin d := - 1 ;
21227: LD_ADDR_VAR 0 9
21231: PUSH
21232: LD_INT 1
21234: NEG
21235: ST_TO_ADDR
// if i_from > i_to then
21236: LD_VAR 0 2
21240: PUSH
21241: LD_VAR 0 3
21245: GREATER
21246: IFFALSE 21266
// length := i_from - i_to else
21248: LD_ADDR_VAR 0 11
21252: PUSH
21253: LD_VAR 0 2
21257: PUSH
21258: LD_VAR 0 3
21262: MINUS
21263: ST_TO_ADDR
21264: GO 21288
// length := ( array - i_to ) + i_from ;
21266: LD_ADDR_VAR 0 11
21270: PUSH
21271: LD_VAR 0 1
21275: PUSH
21276: LD_VAR 0 3
21280: MINUS
21281: PUSH
21282: LD_VAR 0 2
21286: PLUS
21287: ST_TO_ADDR
// end ; if not length then
21288: LD_VAR 0 11
21292: NOT
21293: IFFALSE 21297
// exit ;
21295: GO 21455
// tmp := array ;
21297: LD_ADDR_VAR 0 10
21301: PUSH
21302: LD_VAR 0 1
21306: ST_TO_ADDR
// for i = 1 to length do
21307: LD_ADDR_VAR 0 6
21311: PUSH
21312: DOUBLE
21313: LD_INT 1
21315: DEC
21316: ST_TO_ADDR
21317: LD_VAR 0 11
21321: PUSH
21322: FOR_TO
21323: IFFALSE 21443
// begin for j = 1 to array do
21325: LD_ADDR_VAR 0 7
21329: PUSH
21330: DOUBLE
21331: LD_INT 1
21333: DEC
21334: ST_TO_ADDR
21335: LD_VAR 0 1
21339: PUSH
21340: FOR_TO
21341: IFFALSE 21429
// begin k := j + d ;
21343: LD_ADDR_VAR 0 8
21347: PUSH
21348: LD_VAR 0 7
21352: PUSH
21353: LD_VAR 0 9
21357: PLUS
21358: ST_TO_ADDR
// if k > array then
21359: LD_VAR 0 8
21363: PUSH
21364: LD_VAR 0 1
21368: GREATER
21369: IFFALSE 21379
// k := 1 ;
21371: LD_ADDR_VAR 0 8
21375: PUSH
21376: LD_INT 1
21378: ST_TO_ADDR
// if not k then
21379: LD_VAR 0 8
21383: NOT
21384: IFFALSE 21396
// k := array ;
21386: LD_ADDR_VAR 0 8
21390: PUSH
21391: LD_VAR 0 1
21395: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21396: LD_ADDR_VAR 0 10
21400: PUSH
21401: LD_VAR 0 10
21405: PPUSH
21406: LD_VAR 0 8
21410: PPUSH
21411: LD_VAR 0 1
21415: PUSH
21416: LD_VAR 0 7
21420: ARRAY
21421: PPUSH
21422: CALL_OW 1
21426: ST_TO_ADDR
// end ;
21427: GO 21340
21429: POP
21430: POP
// array := tmp ;
21431: LD_ADDR_VAR 0 1
21435: PUSH
21436: LD_VAR 0 10
21440: ST_TO_ADDR
// end ;
21441: GO 21322
21443: POP
21444: POP
// result := array ;
21445: LD_ADDR_VAR 0 5
21449: PUSH
21450: LD_VAR 0 1
21454: ST_TO_ADDR
// end ;
21455: LD_VAR 0 5
21459: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21460: LD_INT 0
21462: PPUSH
21463: PPUSH
// result := 0 ;
21464: LD_ADDR_VAR 0 3
21468: PUSH
21469: LD_INT 0
21471: ST_TO_ADDR
// if not array or not value in array then
21472: LD_VAR 0 1
21476: NOT
21477: PUSH
21478: LD_VAR 0 2
21482: PUSH
21483: LD_VAR 0 1
21487: IN
21488: NOT
21489: OR
21490: IFFALSE 21494
// exit ;
21492: GO 21548
// for i = 1 to array do
21494: LD_ADDR_VAR 0 4
21498: PUSH
21499: DOUBLE
21500: LD_INT 1
21502: DEC
21503: ST_TO_ADDR
21504: LD_VAR 0 1
21508: PUSH
21509: FOR_TO
21510: IFFALSE 21546
// if value = array [ i ] then
21512: LD_VAR 0 2
21516: PUSH
21517: LD_VAR 0 1
21521: PUSH
21522: LD_VAR 0 4
21526: ARRAY
21527: EQUAL
21528: IFFALSE 21544
// begin result := i ;
21530: LD_ADDR_VAR 0 3
21534: PUSH
21535: LD_VAR 0 4
21539: ST_TO_ADDR
// exit ;
21540: POP
21541: POP
21542: GO 21548
// end ;
21544: GO 21509
21546: POP
21547: POP
// end ;
21548: LD_VAR 0 3
21552: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21553: LD_INT 0
21555: PPUSH
// vc_chassis := chassis ;
21556: LD_ADDR_OWVAR 37
21560: PUSH
21561: LD_VAR 0 1
21565: ST_TO_ADDR
// vc_engine := engine ;
21566: LD_ADDR_OWVAR 39
21570: PUSH
21571: LD_VAR 0 2
21575: ST_TO_ADDR
// vc_control := control ;
21576: LD_ADDR_OWVAR 38
21580: PUSH
21581: LD_VAR 0 3
21585: ST_TO_ADDR
// vc_weapon := weapon ;
21586: LD_ADDR_OWVAR 40
21590: PUSH
21591: LD_VAR 0 4
21595: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21596: LD_ADDR_OWVAR 41
21600: PUSH
21601: LD_VAR 0 5
21605: ST_TO_ADDR
// end ;
21606: LD_VAR 0 6
21610: RET
// export function WantPlant ( unit ) ; var task ; begin
21611: LD_INT 0
21613: PPUSH
21614: PPUSH
// result := false ;
21615: LD_ADDR_VAR 0 2
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21623: LD_ADDR_VAR 0 3
21627: PUSH
21628: LD_VAR 0 1
21632: PPUSH
21633: CALL_OW 437
21637: ST_TO_ADDR
// if task then
21638: LD_VAR 0 3
21642: IFFALSE 21670
// if task [ 1 ] [ 1 ] = p then
21644: LD_VAR 0 3
21648: PUSH
21649: LD_INT 1
21651: ARRAY
21652: PUSH
21653: LD_INT 1
21655: ARRAY
21656: PUSH
21657: LD_STRING p
21659: EQUAL
21660: IFFALSE 21670
// result := true ;
21662: LD_ADDR_VAR 0 2
21666: PUSH
21667: LD_INT 1
21669: ST_TO_ADDR
// end ;
21670: LD_VAR 0 2
21674: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21675: LD_INT 0
21677: PPUSH
21678: PPUSH
21679: PPUSH
21680: PPUSH
// if pos < 1 then
21681: LD_VAR 0 2
21685: PUSH
21686: LD_INT 1
21688: LESS
21689: IFFALSE 21693
// exit ;
21691: GO 21996
// if pos = 1 then
21693: LD_VAR 0 2
21697: PUSH
21698: LD_INT 1
21700: EQUAL
21701: IFFALSE 21734
// result := Replace ( arr , pos [ 1 ] , value ) else
21703: LD_ADDR_VAR 0 4
21707: PUSH
21708: LD_VAR 0 1
21712: PPUSH
21713: LD_VAR 0 2
21717: PUSH
21718: LD_INT 1
21720: ARRAY
21721: PPUSH
21722: LD_VAR 0 3
21726: PPUSH
21727: CALL_OW 1
21731: ST_TO_ADDR
21732: GO 21996
// begin tmp := arr ;
21734: LD_ADDR_VAR 0 6
21738: PUSH
21739: LD_VAR 0 1
21743: ST_TO_ADDR
// s_arr := [ tmp ] ;
21744: LD_ADDR_VAR 0 7
21748: PUSH
21749: LD_VAR 0 6
21753: PUSH
21754: EMPTY
21755: LIST
21756: ST_TO_ADDR
// for i = 1 to pos - 1 do
21757: LD_ADDR_VAR 0 5
21761: PUSH
21762: DOUBLE
21763: LD_INT 1
21765: DEC
21766: ST_TO_ADDR
21767: LD_VAR 0 2
21771: PUSH
21772: LD_INT 1
21774: MINUS
21775: PUSH
21776: FOR_TO
21777: IFFALSE 21822
// begin tmp := tmp [ pos [ i ] ] ;
21779: LD_ADDR_VAR 0 6
21783: PUSH
21784: LD_VAR 0 6
21788: PUSH
21789: LD_VAR 0 2
21793: PUSH
21794: LD_VAR 0 5
21798: ARRAY
21799: ARRAY
21800: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21801: LD_ADDR_VAR 0 7
21805: PUSH
21806: LD_VAR 0 7
21810: PUSH
21811: LD_VAR 0 6
21815: PUSH
21816: EMPTY
21817: LIST
21818: ADD
21819: ST_TO_ADDR
// end ;
21820: GO 21776
21822: POP
21823: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21824: LD_ADDR_VAR 0 6
21828: PUSH
21829: LD_VAR 0 6
21833: PPUSH
21834: LD_VAR 0 2
21838: PUSH
21839: LD_VAR 0 2
21843: ARRAY
21844: PPUSH
21845: LD_VAR 0 3
21849: PPUSH
21850: CALL_OW 1
21854: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21855: LD_ADDR_VAR 0 7
21859: PUSH
21860: LD_VAR 0 7
21864: PPUSH
21865: LD_VAR 0 7
21869: PPUSH
21870: LD_VAR 0 6
21874: PPUSH
21875: CALL_OW 1
21879: ST_TO_ADDR
// for i = s_arr downto 2 do
21880: LD_ADDR_VAR 0 5
21884: PUSH
21885: DOUBLE
21886: LD_VAR 0 7
21890: INC
21891: ST_TO_ADDR
21892: LD_INT 2
21894: PUSH
21895: FOR_DOWNTO
21896: IFFALSE 21980
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21898: LD_ADDR_VAR 0 6
21902: PUSH
21903: LD_VAR 0 7
21907: PUSH
21908: LD_VAR 0 5
21912: PUSH
21913: LD_INT 1
21915: MINUS
21916: ARRAY
21917: PPUSH
21918: LD_VAR 0 2
21922: PUSH
21923: LD_VAR 0 5
21927: PUSH
21928: LD_INT 1
21930: MINUS
21931: ARRAY
21932: PPUSH
21933: LD_VAR 0 7
21937: PUSH
21938: LD_VAR 0 5
21942: ARRAY
21943: PPUSH
21944: CALL_OW 1
21948: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21949: LD_ADDR_VAR 0 7
21953: PUSH
21954: LD_VAR 0 7
21958: PPUSH
21959: LD_VAR 0 5
21963: PUSH
21964: LD_INT 1
21966: MINUS
21967: PPUSH
21968: LD_VAR 0 6
21972: PPUSH
21973: CALL_OW 1
21977: ST_TO_ADDR
// end ;
21978: GO 21895
21980: POP
21981: POP
// result := s_arr [ 1 ] ;
21982: LD_ADDR_VAR 0 4
21986: PUSH
21987: LD_VAR 0 7
21991: PUSH
21992: LD_INT 1
21994: ARRAY
21995: ST_TO_ADDR
// end ; end ;
21996: LD_VAR 0 4
22000: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22001: LD_INT 0
22003: PPUSH
22004: PPUSH
// if not list then
22005: LD_VAR 0 1
22009: NOT
22010: IFFALSE 22014
// exit ;
22012: GO 22105
// i := list [ pos1 ] ;
22014: LD_ADDR_VAR 0 5
22018: PUSH
22019: LD_VAR 0 1
22023: PUSH
22024: LD_VAR 0 2
22028: ARRAY
22029: ST_TO_ADDR
// if not i then
22030: LD_VAR 0 5
22034: NOT
22035: IFFALSE 22039
// exit ;
22037: GO 22105
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22039: LD_ADDR_VAR 0 1
22043: PUSH
22044: LD_VAR 0 1
22048: PPUSH
22049: LD_VAR 0 2
22053: PPUSH
22054: LD_VAR 0 1
22058: PUSH
22059: LD_VAR 0 3
22063: ARRAY
22064: PPUSH
22065: CALL_OW 1
22069: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22070: LD_ADDR_VAR 0 1
22074: PUSH
22075: LD_VAR 0 1
22079: PPUSH
22080: LD_VAR 0 3
22084: PPUSH
22085: LD_VAR 0 5
22089: PPUSH
22090: CALL_OW 1
22094: ST_TO_ADDR
// result := list ;
22095: LD_ADDR_VAR 0 4
22099: PUSH
22100: LD_VAR 0 1
22104: ST_TO_ADDR
// end ;
22105: LD_VAR 0 4
22109: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22110: LD_INT 0
22112: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22113: LD_ADDR_VAR 0 5
22117: PUSH
22118: LD_VAR 0 1
22122: PPUSH
22123: CALL_OW 250
22127: PPUSH
22128: LD_VAR 0 1
22132: PPUSH
22133: CALL_OW 251
22137: PPUSH
22138: LD_VAR 0 2
22142: PPUSH
22143: LD_VAR 0 3
22147: PPUSH
22148: LD_VAR 0 4
22152: PPUSH
22153: CALL 22531 0 5
22157: ST_TO_ADDR
// end ;
22158: LD_VAR 0 5
22162: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22163: LD_INT 0
22165: PPUSH
22166: PPUSH
22167: PPUSH
22168: PPUSH
// if not list or not unit then
22169: LD_VAR 0 2
22173: NOT
22174: PUSH
22175: LD_VAR 0 1
22179: NOT
22180: OR
22181: IFFALSE 22185
// exit ;
22183: GO 22526
// result := [ ] ;
22185: LD_ADDR_VAR 0 5
22189: PUSH
22190: EMPTY
22191: ST_TO_ADDR
// for i in list do
22192: LD_ADDR_VAR 0 6
22196: PUSH
22197: LD_VAR 0 2
22201: PUSH
22202: FOR_IN
22203: IFFALSE 22421
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22205: LD_ADDR_VAR 0 8
22209: PUSH
22210: LD_VAR 0 1
22214: PPUSH
22215: LD_VAR 0 6
22219: PUSH
22220: LD_INT 1
22222: ARRAY
22223: PPUSH
22224: LD_VAR 0 6
22228: PUSH
22229: LD_INT 2
22231: ARRAY
22232: PPUSH
22233: CALL_OW 297
22237: ST_TO_ADDR
// if not Count ( result ) then
22238: LD_VAR 0 5
22242: PPUSH
22243: CALL 18815 0 1
22247: NOT
22248: IFFALSE 22281
// begin result := Join ( result , [ i , tmp ] ) ;
22250: LD_ADDR_VAR 0 5
22254: PUSH
22255: LD_VAR 0 5
22259: PPUSH
22260: LD_VAR 0 6
22264: PUSH
22265: LD_VAR 0 8
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PPUSH
22274: CALL 54424 0 2
22278: ST_TO_ADDR
// continue ;
22279: GO 22202
// end ; if result [ result ] [ 2 ] <= tmp then
22281: LD_VAR 0 5
22285: PUSH
22286: LD_VAR 0 5
22290: ARRAY
22291: PUSH
22292: LD_INT 2
22294: ARRAY
22295: PUSH
22296: LD_VAR 0 8
22300: LESSEQUAL
22301: IFFALSE 22334
// result := Join ( result , [ i , tmp ] ) else
22303: LD_ADDR_VAR 0 5
22307: PUSH
22308: LD_VAR 0 5
22312: PPUSH
22313: LD_VAR 0 6
22317: PUSH
22318: LD_VAR 0 8
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PPUSH
22327: CALL 54424 0 2
22331: ST_TO_ADDR
22332: GO 22419
// begin for j := 1 to Count ( result ) do
22334: LD_ADDR_VAR 0 7
22338: PUSH
22339: DOUBLE
22340: LD_INT 1
22342: DEC
22343: ST_TO_ADDR
22344: LD_VAR 0 5
22348: PPUSH
22349: CALL 18815 0 1
22353: PUSH
22354: FOR_TO
22355: IFFALSE 22417
// begin if tmp < result [ j ] [ 2 ] then
22357: LD_VAR 0 8
22361: PUSH
22362: LD_VAR 0 5
22366: PUSH
22367: LD_VAR 0 7
22371: ARRAY
22372: PUSH
22373: LD_INT 2
22375: ARRAY
22376: LESS
22377: IFFALSE 22415
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22379: LD_ADDR_VAR 0 5
22383: PUSH
22384: LD_VAR 0 5
22388: PPUSH
22389: LD_VAR 0 7
22393: PPUSH
22394: LD_VAR 0 6
22398: PUSH
22399: LD_VAR 0 8
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PPUSH
22408: CALL_OW 2
22412: ST_TO_ADDR
// break ;
22413: GO 22417
// end ; end ;
22415: GO 22354
22417: POP
22418: POP
// end ; end ;
22419: GO 22202
22421: POP
22422: POP
// if result and not asc then
22423: LD_VAR 0 5
22427: PUSH
22428: LD_VAR 0 3
22432: NOT
22433: AND
22434: IFFALSE 22451
// result := ReverseArray ( result ) ;
22436: LD_ADDR_VAR 0 5
22440: PUSH
22441: LD_VAR 0 5
22445: PPUSH
22446: CALL 49691 0 1
22450: ST_TO_ADDR
// tmp := [ ] ;
22451: LD_ADDR_VAR 0 8
22455: PUSH
22456: EMPTY
22457: ST_TO_ADDR
// if mode then
22458: LD_VAR 0 4
22462: IFFALSE 22526
// begin for i := 1 to result do
22464: LD_ADDR_VAR 0 6
22468: PUSH
22469: DOUBLE
22470: LD_INT 1
22472: DEC
22473: ST_TO_ADDR
22474: LD_VAR 0 5
22478: PUSH
22479: FOR_TO
22480: IFFALSE 22514
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22482: LD_ADDR_VAR 0 8
22486: PUSH
22487: LD_VAR 0 8
22491: PPUSH
22492: LD_VAR 0 5
22496: PUSH
22497: LD_VAR 0 6
22501: ARRAY
22502: PUSH
22503: LD_INT 1
22505: ARRAY
22506: PPUSH
22507: CALL 54424 0 2
22511: ST_TO_ADDR
22512: GO 22479
22514: POP
22515: POP
// result := tmp ;
22516: LD_ADDR_VAR 0 5
22520: PUSH
22521: LD_VAR 0 8
22525: ST_TO_ADDR
// end ; end ;
22526: LD_VAR 0 5
22530: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22531: LD_INT 0
22533: PPUSH
22534: PPUSH
22535: PPUSH
22536: PPUSH
// if not list then
22537: LD_VAR 0 3
22541: NOT
22542: IFFALSE 22546
// exit ;
22544: GO 22934
// result := [ ] ;
22546: LD_ADDR_VAR 0 6
22550: PUSH
22551: EMPTY
22552: ST_TO_ADDR
// for i in list do
22553: LD_ADDR_VAR 0 7
22557: PUSH
22558: LD_VAR 0 3
22562: PUSH
22563: FOR_IN
22564: IFFALSE 22766
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22566: LD_ADDR_VAR 0 9
22570: PUSH
22571: LD_VAR 0 7
22575: PPUSH
22576: LD_VAR 0 1
22580: PPUSH
22581: LD_VAR 0 2
22585: PPUSH
22586: CALL_OW 297
22590: ST_TO_ADDR
// if not result then
22591: LD_VAR 0 6
22595: NOT
22596: IFFALSE 22622
// result := [ [ i , tmp ] ] else
22598: LD_ADDR_VAR 0 6
22602: PUSH
22603: LD_VAR 0 7
22607: PUSH
22608: LD_VAR 0 9
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: EMPTY
22618: LIST
22619: ST_TO_ADDR
22620: GO 22764
// begin if result [ result ] [ 2 ] <= tmp then
22622: LD_VAR 0 6
22626: PUSH
22627: LD_VAR 0 6
22631: ARRAY
22632: PUSH
22633: LD_INT 2
22635: ARRAY
22636: PUSH
22637: LD_VAR 0 9
22641: LESSEQUAL
22642: IFFALSE 22684
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22644: LD_ADDR_VAR 0 6
22648: PUSH
22649: LD_VAR 0 6
22653: PPUSH
22654: LD_VAR 0 6
22658: PUSH
22659: LD_INT 1
22661: PLUS
22662: PPUSH
22663: LD_VAR 0 7
22667: PUSH
22668: LD_VAR 0 9
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PPUSH
22677: CALL_OW 2
22681: ST_TO_ADDR
22682: GO 22764
// for j := 1 to result do
22684: LD_ADDR_VAR 0 8
22688: PUSH
22689: DOUBLE
22690: LD_INT 1
22692: DEC
22693: ST_TO_ADDR
22694: LD_VAR 0 6
22698: PUSH
22699: FOR_TO
22700: IFFALSE 22762
// begin if tmp < result [ j ] [ 2 ] then
22702: LD_VAR 0 9
22706: PUSH
22707: LD_VAR 0 6
22711: PUSH
22712: LD_VAR 0 8
22716: ARRAY
22717: PUSH
22718: LD_INT 2
22720: ARRAY
22721: LESS
22722: IFFALSE 22760
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22724: LD_ADDR_VAR 0 6
22728: PUSH
22729: LD_VAR 0 6
22733: PPUSH
22734: LD_VAR 0 8
22738: PPUSH
22739: LD_VAR 0 7
22743: PUSH
22744: LD_VAR 0 9
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PPUSH
22753: CALL_OW 2
22757: ST_TO_ADDR
// break ;
22758: GO 22762
// end ; end ;
22760: GO 22699
22762: POP
22763: POP
// end ; end ;
22764: GO 22563
22766: POP
22767: POP
// if result and not asc then
22768: LD_VAR 0 6
22772: PUSH
22773: LD_VAR 0 4
22777: NOT
22778: AND
22779: IFFALSE 22854
// begin tmp := result ;
22781: LD_ADDR_VAR 0 9
22785: PUSH
22786: LD_VAR 0 6
22790: ST_TO_ADDR
// for i = tmp downto 1 do
22791: LD_ADDR_VAR 0 7
22795: PUSH
22796: DOUBLE
22797: LD_VAR 0 9
22801: INC
22802: ST_TO_ADDR
22803: LD_INT 1
22805: PUSH
22806: FOR_DOWNTO
22807: IFFALSE 22852
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22809: LD_ADDR_VAR 0 6
22813: PUSH
22814: LD_VAR 0 6
22818: PPUSH
22819: LD_VAR 0 9
22823: PUSH
22824: LD_VAR 0 7
22828: MINUS
22829: PUSH
22830: LD_INT 1
22832: PLUS
22833: PPUSH
22834: LD_VAR 0 9
22838: PUSH
22839: LD_VAR 0 7
22843: ARRAY
22844: PPUSH
22845: CALL_OW 1
22849: ST_TO_ADDR
22850: GO 22806
22852: POP
22853: POP
// end ; tmp := [ ] ;
22854: LD_ADDR_VAR 0 9
22858: PUSH
22859: EMPTY
22860: ST_TO_ADDR
// if mode then
22861: LD_VAR 0 5
22865: IFFALSE 22934
// begin for i = 1 to result do
22867: LD_ADDR_VAR 0 7
22871: PUSH
22872: DOUBLE
22873: LD_INT 1
22875: DEC
22876: ST_TO_ADDR
22877: LD_VAR 0 6
22881: PUSH
22882: FOR_TO
22883: IFFALSE 22922
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22885: LD_ADDR_VAR 0 9
22889: PUSH
22890: LD_VAR 0 9
22894: PPUSH
22895: LD_VAR 0 7
22899: PPUSH
22900: LD_VAR 0 6
22904: PUSH
22905: LD_VAR 0 7
22909: ARRAY
22910: PUSH
22911: LD_INT 1
22913: ARRAY
22914: PPUSH
22915: CALL_OW 1
22919: ST_TO_ADDR
22920: GO 22882
22922: POP
22923: POP
// result := tmp ;
22924: LD_ADDR_VAR 0 6
22928: PUSH
22929: LD_VAR 0 9
22933: ST_TO_ADDR
// end ; end ;
22934: LD_VAR 0 6
22938: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22939: LD_INT 0
22941: PPUSH
22942: PPUSH
22943: PPUSH
22944: PPUSH
22945: PPUSH
22946: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22947: LD_ADDR_VAR 0 5
22951: PUSH
22952: LD_INT 0
22954: PUSH
22955: LD_INT 0
22957: PUSH
22958: LD_INT 0
22960: PUSH
22961: EMPTY
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: ST_TO_ADDR
// if not x or not y then
22969: LD_VAR 0 2
22973: NOT
22974: PUSH
22975: LD_VAR 0 3
22979: NOT
22980: OR
22981: IFFALSE 22985
// exit ;
22983: GO 24635
// if not range then
22985: LD_VAR 0 4
22989: NOT
22990: IFFALSE 23000
// range := 10 ;
22992: LD_ADDR_VAR 0 4
22996: PUSH
22997: LD_INT 10
22999: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23000: LD_ADDR_VAR 0 8
23004: PUSH
23005: LD_INT 81
23007: PUSH
23008: LD_VAR 0 1
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 92
23019: PUSH
23020: LD_VAR 0 2
23024: PUSH
23025: LD_VAR 0 3
23029: PUSH
23030: LD_VAR 0 4
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 3
23043: PUSH
23044: LD_INT 21
23046: PUSH
23047: LD_INT 3
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: LIST
23062: PPUSH
23063: CALL_OW 69
23067: ST_TO_ADDR
// if not tmp then
23068: LD_VAR 0 8
23072: NOT
23073: IFFALSE 23077
// exit ;
23075: GO 24635
// for i in tmp do
23077: LD_ADDR_VAR 0 6
23081: PUSH
23082: LD_VAR 0 8
23086: PUSH
23087: FOR_IN
23088: IFFALSE 24610
// begin points := [ 0 , 0 , 0 ] ;
23090: LD_ADDR_VAR 0 9
23094: PUSH
23095: LD_INT 0
23097: PUSH
23098: LD_INT 0
23100: PUSH
23101: LD_INT 0
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: LIST
23108: ST_TO_ADDR
// bpoints := 1 ;
23109: LD_ADDR_VAR 0 10
23113: PUSH
23114: LD_INT 1
23116: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23117: LD_VAR 0 6
23121: PPUSH
23122: CALL_OW 247
23126: PUSH
23127: LD_INT 1
23129: DOUBLE
23130: EQUAL
23131: IFTRUE 23135
23133: GO 23713
23135: POP
// begin if GetClass ( i ) = 1 then
23136: LD_VAR 0 6
23140: PPUSH
23141: CALL_OW 257
23145: PUSH
23146: LD_INT 1
23148: EQUAL
23149: IFFALSE 23170
// points := [ 10 , 5 , 3 ] ;
23151: LD_ADDR_VAR 0 9
23155: PUSH
23156: LD_INT 10
23158: PUSH
23159: LD_INT 5
23161: PUSH
23162: LD_INT 3
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: LIST
23169: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23170: LD_VAR 0 6
23174: PPUSH
23175: CALL_OW 257
23179: PUSH
23180: LD_INT 2
23182: PUSH
23183: LD_INT 3
23185: PUSH
23186: LD_INT 4
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: LIST
23193: IN
23194: IFFALSE 23215
// points := [ 3 , 2 , 1 ] ;
23196: LD_ADDR_VAR 0 9
23200: PUSH
23201: LD_INT 3
23203: PUSH
23204: LD_INT 2
23206: PUSH
23207: LD_INT 1
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23215: LD_VAR 0 6
23219: PPUSH
23220: CALL_OW 257
23224: PUSH
23225: LD_INT 5
23227: EQUAL
23228: IFFALSE 23249
// points := [ 130 , 5 , 2 ] ;
23230: LD_ADDR_VAR 0 9
23234: PUSH
23235: LD_INT 130
23237: PUSH
23238: LD_INT 5
23240: PUSH
23241: LD_INT 2
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: LIST
23248: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23249: LD_VAR 0 6
23253: PPUSH
23254: CALL_OW 257
23258: PUSH
23259: LD_INT 8
23261: EQUAL
23262: IFFALSE 23283
// points := [ 35 , 35 , 30 ] ;
23264: LD_ADDR_VAR 0 9
23268: PUSH
23269: LD_INT 35
23271: PUSH
23272: LD_INT 35
23274: PUSH
23275: LD_INT 30
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23283: LD_VAR 0 6
23287: PPUSH
23288: CALL_OW 257
23292: PUSH
23293: LD_INT 9
23295: EQUAL
23296: IFFALSE 23317
// points := [ 20 , 55 , 40 ] ;
23298: LD_ADDR_VAR 0 9
23302: PUSH
23303: LD_INT 20
23305: PUSH
23306: LD_INT 55
23308: PUSH
23309: LD_INT 40
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: LIST
23316: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23317: LD_VAR 0 6
23321: PPUSH
23322: CALL_OW 257
23326: PUSH
23327: LD_INT 12
23329: PUSH
23330: LD_INT 16
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: IN
23337: IFFALSE 23358
// points := [ 5 , 3 , 2 ] ;
23339: LD_ADDR_VAR 0 9
23343: PUSH
23344: LD_INT 5
23346: PUSH
23347: LD_INT 3
23349: PUSH
23350: LD_INT 2
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: LIST
23357: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23358: LD_VAR 0 6
23362: PPUSH
23363: CALL_OW 257
23367: PUSH
23368: LD_INT 17
23370: EQUAL
23371: IFFALSE 23392
// points := [ 100 , 50 , 75 ] ;
23373: LD_ADDR_VAR 0 9
23377: PUSH
23378: LD_INT 100
23380: PUSH
23381: LD_INT 50
23383: PUSH
23384: LD_INT 75
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: LIST
23391: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23392: LD_VAR 0 6
23396: PPUSH
23397: CALL_OW 257
23401: PUSH
23402: LD_INT 15
23404: EQUAL
23405: IFFALSE 23426
// points := [ 10 , 5 , 3 ] ;
23407: LD_ADDR_VAR 0 9
23411: PUSH
23412: LD_INT 10
23414: PUSH
23415: LD_INT 5
23417: PUSH
23418: LD_INT 3
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: LIST
23425: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23426: LD_VAR 0 6
23430: PPUSH
23431: CALL_OW 257
23435: PUSH
23436: LD_INT 14
23438: EQUAL
23439: IFFALSE 23460
// points := [ 10 , 0 , 0 ] ;
23441: LD_ADDR_VAR 0 9
23445: PUSH
23446: LD_INT 10
23448: PUSH
23449: LD_INT 0
23451: PUSH
23452: LD_INT 0
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: LIST
23459: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23460: LD_VAR 0 6
23464: PPUSH
23465: CALL_OW 257
23469: PUSH
23470: LD_INT 11
23472: EQUAL
23473: IFFALSE 23494
// points := [ 30 , 10 , 5 ] ;
23475: LD_ADDR_VAR 0 9
23479: PUSH
23480: LD_INT 30
23482: PUSH
23483: LD_INT 10
23485: PUSH
23486: LD_INT 5
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: LIST
23493: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23494: LD_VAR 0 1
23498: PPUSH
23499: LD_INT 5
23501: PPUSH
23502: CALL_OW 321
23506: PUSH
23507: LD_INT 2
23509: EQUAL
23510: IFFALSE 23527
// bpoints := bpoints * 1.8 ;
23512: LD_ADDR_VAR 0 10
23516: PUSH
23517: LD_VAR 0 10
23521: PUSH
23522: LD_REAL  1.80000000000000E+0000
23525: MUL
23526: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23527: LD_VAR 0 6
23531: PPUSH
23532: CALL_OW 257
23536: PUSH
23537: LD_INT 1
23539: PUSH
23540: LD_INT 2
23542: PUSH
23543: LD_INT 3
23545: PUSH
23546: LD_INT 4
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: IN
23555: PUSH
23556: LD_VAR 0 1
23560: PPUSH
23561: LD_INT 51
23563: PPUSH
23564: CALL_OW 321
23568: PUSH
23569: LD_INT 2
23571: EQUAL
23572: AND
23573: IFFALSE 23590
// bpoints := bpoints * 1.2 ;
23575: LD_ADDR_VAR 0 10
23579: PUSH
23580: LD_VAR 0 10
23584: PUSH
23585: LD_REAL  1.20000000000000E+0000
23588: MUL
23589: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23590: LD_VAR 0 6
23594: PPUSH
23595: CALL_OW 257
23599: PUSH
23600: LD_INT 5
23602: PUSH
23603: LD_INT 7
23605: PUSH
23606: LD_INT 9
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: LIST
23613: IN
23614: PUSH
23615: LD_VAR 0 1
23619: PPUSH
23620: LD_INT 52
23622: PPUSH
23623: CALL_OW 321
23627: PUSH
23628: LD_INT 2
23630: EQUAL
23631: AND
23632: IFFALSE 23649
// bpoints := bpoints * 1.5 ;
23634: LD_ADDR_VAR 0 10
23638: PUSH
23639: LD_VAR 0 10
23643: PUSH
23644: LD_REAL  1.50000000000000E+0000
23647: MUL
23648: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23649: LD_VAR 0 1
23653: PPUSH
23654: LD_INT 66
23656: PPUSH
23657: CALL_OW 321
23661: PUSH
23662: LD_INT 2
23664: EQUAL
23665: IFFALSE 23682
// bpoints := bpoints * 1.1 ;
23667: LD_ADDR_VAR 0 10
23671: PUSH
23672: LD_VAR 0 10
23676: PUSH
23677: LD_REAL  1.10000000000000E+0000
23680: MUL
23681: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23682: LD_ADDR_VAR 0 10
23686: PUSH
23687: LD_VAR 0 10
23691: PUSH
23692: LD_VAR 0 6
23696: PPUSH
23697: LD_INT 1
23699: PPUSH
23700: CALL_OW 259
23704: PUSH
23705: LD_REAL  1.15000000000000E+0000
23708: MUL
23709: MUL
23710: ST_TO_ADDR
// end ; unit_vehicle :
23711: GO 24539
23713: LD_INT 2
23715: DOUBLE
23716: EQUAL
23717: IFTRUE 23721
23719: GO 24527
23721: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23722: LD_VAR 0 6
23726: PPUSH
23727: CALL_OW 264
23731: PUSH
23732: LD_INT 2
23734: PUSH
23735: LD_INT 42
23737: PUSH
23738: LD_INT 24
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: LIST
23745: IN
23746: IFFALSE 23767
// points := [ 25 , 5 , 3 ] ;
23748: LD_ADDR_VAR 0 9
23752: PUSH
23753: LD_INT 25
23755: PUSH
23756: LD_INT 5
23758: PUSH
23759: LD_INT 3
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: LIST
23766: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23767: LD_VAR 0 6
23771: PPUSH
23772: CALL_OW 264
23776: PUSH
23777: LD_INT 4
23779: PUSH
23780: LD_INT 43
23782: PUSH
23783: LD_INT 25
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: LIST
23790: IN
23791: IFFALSE 23812
// points := [ 40 , 15 , 5 ] ;
23793: LD_ADDR_VAR 0 9
23797: PUSH
23798: LD_INT 40
23800: PUSH
23801: LD_INT 15
23803: PUSH
23804: LD_INT 5
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: LIST
23811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23812: LD_VAR 0 6
23816: PPUSH
23817: CALL_OW 264
23821: PUSH
23822: LD_INT 3
23824: PUSH
23825: LD_INT 23
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: IN
23832: IFFALSE 23853
// points := [ 7 , 25 , 8 ] ;
23834: LD_ADDR_VAR 0 9
23838: PUSH
23839: LD_INT 7
23841: PUSH
23842: LD_INT 25
23844: PUSH
23845: LD_INT 8
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: LIST
23852: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23853: LD_VAR 0 6
23857: PPUSH
23858: CALL_OW 264
23862: PUSH
23863: LD_INT 5
23865: PUSH
23866: LD_INT 27
23868: PUSH
23869: LD_INT 44
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: LIST
23876: IN
23877: IFFALSE 23898
// points := [ 14 , 50 , 16 ] ;
23879: LD_ADDR_VAR 0 9
23883: PUSH
23884: LD_INT 14
23886: PUSH
23887: LD_INT 50
23889: PUSH
23890: LD_INT 16
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: LIST
23897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23898: LD_VAR 0 6
23902: PPUSH
23903: CALL_OW 264
23907: PUSH
23908: LD_INT 6
23910: PUSH
23911: LD_INT 46
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: IN
23918: IFFALSE 23939
// points := [ 32 , 120 , 70 ] ;
23920: LD_ADDR_VAR 0 9
23924: PUSH
23925: LD_INT 32
23927: PUSH
23928: LD_INT 120
23930: PUSH
23931: LD_INT 70
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: LIST
23938: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23939: LD_VAR 0 6
23943: PPUSH
23944: CALL_OW 264
23948: PUSH
23949: LD_INT 7
23951: PUSH
23952: LD_INT 28
23954: PUSH
23955: LD_INT 45
23957: PUSH
23958: LD_INT 92
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: IN
23967: IFFALSE 23988
// points := [ 35 , 20 , 45 ] ;
23969: LD_ADDR_VAR 0 9
23973: PUSH
23974: LD_INT 35
23976: PUSH
23977: LD_INT 20
23979: PUSH
23980: LD_INT 45
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: LIST
23987: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23988: LD_VAR 0 6
23992: PPUSH
23993: CALL_OW 264
23997: PUSH
23998: LD_INT 47
24000: PUSH
24001: EMPTY
24002: LIST
24003: IN
24004: IFFALSE 24025
// points := [ 67 , 45 , 75 ] ;
24006: LD_ADDR_VAR 0 9
24010: PUSH
24011: LD_INT 67
24013: PUSH
24014: LD_INT 45
24016: PUSH
24017: LD_INT 75
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: LIST
24024: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24025: LD_VAR 0 6
24029: PPUSH
24030: CALL_OW 264
24034: PUSH
24035: LD_INT 26
24037: PUSH
24038: EMPTY
24039: LIST
24040: IN
24041: IFFALSE 24062
// points := [ 120 , 30 , 80 ] ;
24043: LD_ADDR_VAR 0 9
24047: PUSH
24048: LD_INT 120
24050: PUSH
24051: LD_INT 30
24053: PUSH
24054: LD_INT 80
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: LIST
24061: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24062: LD_VAR 0 6
24066: PPUSH
24067: CALL_OW 264
24071: PUSH
24072: LD_INT 22
24074: PUSH
24075: EMPTY
24076: LIST
24077: IN
24078: IFFALSE 24099
// points := [ 40 , 1 , 1 ] ;
24080: LD_ADDR_VAR 0 9
24084: PUSH
24085: LD_INT 40
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: LIST
24098: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24099: LD_VAR 0 6
24103: PPUSH
24104: CALL_OW 264
24108: PUSH
24109: LD_INT 29
24111: PUSH
24112: EMPTY
24113: LIST
24114: IN
24115: IFFALSE 24136
// points := [ 70 , 200 , 400 ] ;
24117: LD_ADDR_VAR 0 9
24121: PUSH
24122: LD_INT 70
24124: PUSH
24125: LD_INT 200
24127: PUSH
24128: LD_INT 400
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: LIST
24135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24136: LD_VAR 0 6
24140: PPUSH
24141: CALL_OW 264
24145: PUSH
24146: LD_INT 14
24148: PUSH
24149: LD_INT 53
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: IN
24156: IFFALSE 24177
// points := [ 40 , 10 , 20 ] ;
24158: LD_ADDR_VAR 0 9
24162: PUSH
24163: LD_INT 40
24165: PUSH
24166: LD_INT 10
24168: PUSH
24169: LD_INT 20
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: LIST
24176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24177: LD_VAR 0 6
24181: PPUSH
24182: CALL_OW 264
24186: PUSH
24187: LD_INT 9
24189: PUSH
24190: EMPTY
24191: LIST
24192: IN
24193: IFFALSE 24214
// points := [ 5 , 70 , 20 ] ;
24195: LD_ADDR_VAR 0 9
24199: PUSH
24200: LD_INT 5
24202: PUSH
24203: LD_INT 70
24205: PUSH
24206: LD_INT 20
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: LIST
24213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24214: LD_VAR 0 6
24218: PPUSH
24219: CALL_OW 264
24223: PUSH
24224: LD_INT 10
24226: PUSH
24227: EMPTY
24228: LIST
24229: IN
24230: IFFALSE 24251
// points := [ 35 , 110 , 70 ] ;
24232: LD_ADDR_VAR 0 9
24236: PUSH
24237: LD_INT 35
24239: PUSH
24240: LD_INT 110
24242: PUSH
24243: LD_INT 70
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: LIST
24250: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24251: LD_VAR 0 6
24255: PPUSH
24256: CALL_OW 265
24260: PUSH
24261: LD_INT 25
24263: EQUAL
24264: IFFALSE 24285
// points := [ 80 , 65 , 100 ] ;
24266: LD_ADDR_VAR 0 9
24270: PUSH
24271: LD_INT 80
24273: PUSH
24274: LD_INT 65
24276: PUSH
24277: LD_INT 100
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24285: LD_VAR 0 6
24289: PPUSH
24290: CALL_OW 263
24294: PUSH
24295: LD_INT 1
24297: EQUAL
24298: IFFALSE 24333
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24300: LD_ADDR_VAR 0 10
24304: PUSH
24305: LD_VAR 0 10
24309: PUSH
24310: LD_VAR 0 6
24314: PPUSH
24315: CALL_OW 311
24319: PPUSH
24320: LD_INT 3
24322: PPUSH
24323: CALL_OW 259
24327: PUSH
24328: LD_INT 4
24330: MUL
24331: MUL
24332: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24333: LD_VAR 0 6
24337: PPUSH
24338: CALL_OW 263
24342: PUSH
24343: LD_INT 2
24345: EQUAL
24346: IFFALSE 24397
// begin j := IsControledBy ( i ) ;
24348: LD_ADDR_VAR 0 7
24352: PUSH
24353: LD_VAR 0 6
24357: PPUSH
24358: CALL_OW 312
24362: ST_TO_ADDR
// if j then
24363: LD_VAR 0 7
24367: IFFALSE 24397
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24369: LD_ADDR_VAR 0 10
24373: PUSH
24374: LD_VAR 0 10
24378: PUSH
24379: LD_VAR 0 7
24383: PPUSH
24384: LD_INT 3
24386: PPUSH
24387: CALL_OW 259
24391: PUSH
24392: LD_INT 3
24394: MUL
24395: MUL
24396: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24397: LD_VAR 0 6
24401: PPUSH
24402: CALL_OW 264
24406: PUSH
24407: LD_INT 5
24409: PUSH
24410: LD_INT 6
24412: PUSH
24413: LD_INT 46
24415: PUSH
24416: LD_INT 44
24418: PUSH
24419: LD_INT 47
24421: PUSH
24422: LD_INT 45
24424: PUSH
24425: LD_INT 28
24427: PUSH
24428: LD_INT 7
24430: PUSH
24431: LD_INT 27
24433: PUSH
24434: LD_INT 29
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: IN
24449: PUSH
24450: LD_VAR 0 1
24454: PPUSH
24455: LD_INT 52
24457: PPUSH
24458: CALL_OW 321
24462: PUSH
24463: LD_INT 2
24465: EQUAL
24466: AND
24467: IFFALSE 24484
// bpoints := bpoints * 1.2 ;
24469: LD_ADDR_VAR 0 10
24473: PUSH
24474: LD_VAR 0 10
24478: PUSH
24479: LD_REAL  1.20000000000000E+0000
24482: MUL
24483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24484: LD_VAR 0 6
24488: PPUSH
24489: CALL_OW 264
24493: PUSH
24494: LD_INT 6
24496: PUSH
24497: LD_INT 46
24499: PUSH
24500: LD_INT 47
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: LIST
24507: IN
24508: IFFALSE 24525
// bpoints := bpoints * 1.2 ;
24510: LD_ADDR_VAR 0 10
24514: PUSH
24515: LD_VAR 0 10
24519: PUSH
24520: LD_REAL  1.20000000000000E+0000
24523: MUL
24524: ST_TO_ADDR
// end ; unit_building :
24525: GO 24539
24527: LD_INT 3
24529: DOUBLE
24530: EQUAL
24531: IFTRUE 24535
24533: GO 24538
24535: POP
// ; end ;
24536: GO 24539
24538: POP
// for j = 1 to 3 do
24539: LD_ADDR_VAR 0 7
24543: PUSH
24544: DOUBLE
24545: LD_INT 1
24547: DEC
24548: ST_TO_ADDR
24549: LD_INT 3
24551: PUSH
24552: FOR_TO
24553: IFFALSE 24606
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24555: LD_ADDR_VAR 0 5
24559: PUSH
24560: LD_VAR 0 5
24564: PPUSH
24565: LD_VAR 0 7
24569: PPUSH
24570: LD_VAR 0 5
24574: PUSH
24575: LD_VAR 0 7
24579: ARRAY
24580: PUSH
24581: LD_VAR 0 9
24585: PUSH
24586: LD_VAR 0 7
24590: ARRAY
24591: PUSH
24592: LD_VAR 0 10
24596: MUL
24597: PLUS
24598: PPUSH
24599: CALL_OW 1
24603: ST_TO_ADDR
24604: GO 24552
24606: POP
24607: POP
// end ;
24608: GO 23087
24610: POP
24611: POP
// result := Replace ( result , 4 , tmp ) ;
24612: LD_ADDR_VAR 0 5
24616: PUSH
24617: LD_VAR 0 5
24621: PPUSH
24622: LD_INT 4
24624: PPUSH
24625: LD_VAR 0 8
24629: PPUSH
24630: CALL_OW 1
24634: ST_TO_ADDR
// end ;
24635: LD_VAR 0 5
24639: RET
// export function DangerAtRange ( unit , range ) ; begin
24640: LD_INT 0
24642: PPUSH
// if not unit then
24643: LD_VAR 0 1
24647: NOT
24648: IFFALSE 24652
// exit ;
24650: GO 24697
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24652: LD_ADDR_VAR 0 3
24656: PUSH
24657: LD_VAR 0 1
24661: PPUSH
24662: CALL_OW 255
24666: PPUSH
24667: LD_VAR 0 1
24671: PPUSH
24672: CALL_OW 250
24676: PPUSH
24677: LD_VAR 0 1
24681: PPUSH
24682: CALL_OW 251
24686: PPUSH
24687: LD_VAR 0 2
24691: PPUSH
24692: CALL 22939 0 4
24696: ST_TO_ADDR
// end ;
24697: LD_VAR 0 3
24701: RET
// export function DangerInArea ( side , area ) ; begin
24702: LD_INT 0
24704: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24705: LD_ADDR_VAR 0 3
24709: PUSH
24710: LD_VAR 0 2
24714: PPUSH
24715: LD_INT 81
24717: PUSH
24718: LD_VAR 0 1
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PPUSH
24727: CALL_OW 70
24731: ST_TO_ADDR
// end ;
24732: LD_VAR 0 3
24736: RET
// export function IsExtension ( b ) ; begin
24737: LD_INT 0
24739: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24740: LD_ADDR_VAR 0 2
24744: PUSH
24745: LD_VAR 0 1
24749: PUSH
24750: LD_INT 23
24752: PUSH
24753: LD_INT 20
24755: PUSH
24756: LD_INT 22
24758: PUSH
24759: LD_INT 17
24761: PUSH
24762: LD_INT 24
24764: PUSH
24765: LD_INT 21
24767: PUSH
24768: LD_INT 19
24770: PUSH
24771: LD_INT 16
24773: PUSH
24774: LD_INT 25
24776: PUSH
24777: LD_INT 18
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: IN
24792: ST_TO_ADDR
// end ;
24793: LD_VAR 0 2
24797: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24798: LD_INT 0
24800: PPUSH
24801: PPUSH
24802: PPUSH
// result := [ ] ;
24803: LD_ADDR_VAR 0 4
24807: PUSH
24808: EMPTY
24809: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24810: LD_ADDR_VAR 0 5
24814: PUSH
24815: LD_VAR 0 2
24819: PPUSH
24820: LD_INT 21
24822: PUSH
24823: LD_INT 3
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PPUSH
24830: CALL_OW 70
24834: ST_TO_ADDR
// if not tmp then
24835: LD_VAR 0 5
24839: NOT
24840: IFFALSE 24844
// exit ;
24842: GO 24908
// if checkLink then
24844: LD_VAR 0 3
24848: IFFALSE 24898
// begin for i in tmp do
24850: LD_ADDR_VAR 0 6
24854: PUSH
24855: LD_VAR 0 5
24859: PUSH
24860: FOR_IN
24861: IFFALSE 24896
// if GetBase ( i ) <> base then
24863: LD_VAR 0 6
24867: PPUSH
24868: CALL_OW 274
24872: PUSH
24873: LD_VAR 0 1
24877: NONEQUAL
24878: IFFALSE 24894
// ComLinkToBase ( base , i ) ;
24880: LD_VAR 0 1
24884: PPUSH
24885: LD_VAR 0 6
24889: PPUSH
24890: CALL_OW 169
24894: GO 24860
24896: POP
24897: POP
// end ; result := tmp ;
24898: LD_ADDR_VAR 0 4
24902: PUSH
24903: LD_VAR 0 5
24907: ST_TO_ADDR
// end ;
24908: LD_VAR 0 4
24912: RET
// export function ComComplete ( units , b ) ; var i ; begin
24913: LD_INT 0
24915: PPUSH
24916: PPUSH
// if not units then
24917: LD_VAR 0 1
24921: NOT
24922: IFFALSE 24926
// exit ;
24924: GO 25016
// for i in units do
24926: LD_ADDR_VAR 0 4
24930: PUSH
24931: LD_VAR 0 1
24935: PUSH
24936: FOR_IN
24937: IFFALSE 25014
// if BuildingStatus ( b ) = bs_build then
24939: LD_VAR 0 2
24943: PPUSH
24944: CALL_OW 461
24948: PUSH
24949: LD_INT 1
24951: EQUAL
24952: IFFALSE 25012
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24954: LD_VAR 0 4
24958: PPUSH
24959: LD_STRING h
24961: PUSH
24962: LD_VAR 0 2
24966: PPUSH
24967: CALL_OW 250
24971: PUSH
24972: LD_VAR 0 2
24976: PPUSH
24977: CALL_OW 251
24981: PUSH
24982: LD_VAR 0 2
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: PUSH
25005: EMPTY
25006: LIST
25007: PPUSH
25008: CALL_OW 446
25012: GO 24936
25014: POP
25015: POP
// end ;
25016: LD_VAR 0 3
25020: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25021: LD_INT 0
25023: PPUSH
25024: PPUSH
25025: PPUSH
25026: PPUSH
25027: PPUSH
25028: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25029: LD_VAR 0 1
25033: NOT
25034: PUSH
25035: LD_VAR 0 1
25039: PPUSH
25040: CALL_OW 263
25044: PUSH
25045: LD_INT 2
25047: NONEQUAL
25048: OR
25049: IFFALSE 25053
// exit ;
25051: GO 25369
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25053: LD_ADDR_VAR 0 6
25057: PUSH
25058: LD_INT 22
25060: PUSH
25061: LD_VAR 0 1
25065: PPUSH
25066: CALL_OW 255
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 2
25077: PUSH
25078: LD_INT 30
25080: PUSH
25081: LD_INT 36
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 34
25090: PUSH
25091: LD_INT 31
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: LIST
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PPUSH
25107: CALL_OW 69
25111: ST_TO_ADDR
// if not tmp then
25112: LD_VAR 0 6
25116: NOT
25117: IFFALSE 25121
// exit ;
25119: GO 25369
// result := [ ] ;
25121: LD_ADDR_VAR 0 2
25125: PUSH
25126: EMPTY
25127: ST_TO_ADDR
// for i in tmp do
25128: LD_ADDR_VAR 0 3
25132: PUSH
25133: LD_VAR 0 6
25137: PUSH
25138: FOR_IN
25139: IFFALSE 25210
// begin t := UnitsInside ( i ) ;
25141: LD_ADDR_VAR 0 4
25145: PUSH
25146: LD_VAR 0 3
25150: PPUSH
25151: CALL_OW 313
25155: ST_TO_ADDR
// if t then
25156: LD_VAR 0 4
25160: IFFALSE 25208
// for j in t do
25162: LD_ADDR_VAR 0 7
25166: PUSH
25167: LD_VAR 0 4
25171: PUSH
25172: FOR_IN
25173: IFFALSE 25206
// result := Replace ( result , result + 1 , j ) ;
25175: LD_ADDR_VAR 0 2
25179: PUSH
25180: LD_VAR 0 2
25184: PPUSH
25185: LD_VAR 0 2
25189: PUSH
25190: LD_INT 1
25192: PLUS
25193: PPUSH
25194: LD_VAR 0 7
25198: PPUSH
25199: CALL_OW 1
25203: ST_TO_ADDR
25204: GO 25172
25206: POP
25207: POP
// end ;
25208: GO 25138
25210: POP
25211: POP
// if not result then
25212: LD_VAR 0 2
25216: NOT
25217: IFFALSE 25221
// exit ;
25219: GO 25369
// mech := result [ 1 ] ;
25221: LD_ADDR_VAR 0 5
25225: PUSH
25226: LD_VAR 0 2
25230: PUSH
25231: LD_INT 1
25233: ARRAY
25234: ST_TO_ADDR
// if result > 1 then
25235: LD_VAR 0 2
25239: PUSH
25240: LD_INT 1
25242: GREATER
25243: IFFALSE 25355
// begin for i = 2 to result do
25245: LD_ADDR_VAR 0 3
25249: PUSH
25250: DOUBLE
25251: LD_INT 2
25253: DEC
25254: ST_TO_ADDR
25255: LD_VAR 0 2
25259: PUSH
25260: FOR_TO
25261: IFFALSE 25353
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25263: LD_ADDR_VAR 0 4
25267: PUSH
25268: LD_VAR 0 2
25272: PUSH
25273: LD_VAR 0 3
25277: ARRAY
25278: PPUSH
25279: LD_INT 3
25281: PPUSH
25282: CALL_OW 259
25286: PUSH
25287: LD_VAR 0 2
25291: PUSH
25292: LD_VAR 0 3
25296: ARRAY
25297: PPUSH
25298: CALL_OW 432
25302: MINUS
25303: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25304: LD_VAR 0 4
25308: PUSH
25309: LD_VAR 0 5
25313: PPUSH
25314: LD_INT 3
25316: PPUSH
25317: CALL_OW 259
25321: PUSH
25322: LD_VAR 0 5
25326: PPUSH
25327: CALL_OW 432
25331: MINUS
25332: GREATEREQUAL
25333: IFFALSE 25351
// mech := result [ i ] ;
25335: LD_ADDR_VAR 0 5
25339: PUSH
25340: LD_VAR 0 2
25344: PUSH
25345: LD_VAR 0 3
25349: ARRAY
25350: ST_TO_ADDR
// end ;
25351: GO 25260
25353: POP
25354: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25355: LD_VAR 0 1
25359: PPUSH
25360: LD_VAR 0 5
25364: PPUSH
25365: CALL_OW 135
// end ;
25369: LD_VAR 0 2
25373: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25374: LD_INT 0
25376: PPUSH
25377: PPUSH
25378: PPUSH
25379: PPUSH
25380: PPUSH
25381: PPUSH
25382: PPUSH
25383: PPUSH
25384: PPUSH
25385: PPUSH
25386: PPUSH
25387: PPUSH
25388: PPUSH
// result := [ ] ;
25389: LD_ADDR_VAR 0 7
25393: PUSH
25394: EMPTY
25395: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25396: LD_VAR 0 1
25400: PPUSH
25401: CALL_OW 266
25405: PUSH
25406: LD_INT 0
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: IN
25416: NOT
25417: IFFALSE 25421
// exit ;
25419: GO 27055
// if name then
25421: LD_VAR 0 3
25425: IFFALSE 25441
// SetBName ( base_dep , name ) ;
25427: LD_VAR 0 1
25431: PPUSH
25432: LD_VAR 0 3
25436: PPUSH
25437: CALL_OW 500
// base := GetBase ( base_dep ) ;
25441: LD_ADDR_VAR 0 15
25445: PUSH
25446: LD_VAR 0 1
25450: PPUSH
25451: CALL_OW 274
25455: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25456: LD_ADDR_VAR 0 16
25460: PUSH
25461: LD_VAR 0 1
25465: PPUSH
25466: CALL_OW 255
25470: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25471: LD_ADDR_VAR 0 17
25475: PUSH
25476: LD_VAR 0 1
25480: PPUSH
25481: CALL_OW 248
25485: ST_TO_ADDR
// if sources then
25486: LD_VAR 0 5
25490: IFFALSE 25537
// for i = 1 to 3 do
25492: LD_ADDR_VAR 0 8
25496: PUSH
25497: DOUBLE
25498: LD_INT 1
25500: DEC
25501: ST_TO_ADDR
25502: LD_INT 3
25504: PUSH
25505: FOR_TO
25506: IFFALSE 25535
// AddResourceType ( base , i , sources [ i ] ) ;
25508: LD_VAR 0 15
25512: PPUSH
25513: LD_VAR 0 8
25517: PPUSH
25518: LD_VAR 0 5
25522: PUSH
25523: LD_VAR 0 8
25527: ARRAY
25528: PPUSH
25529: CALL_OW 276
25533: GO 25505
25535: POP
25536: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25537: LD_ADDR_VAR 0 18
25541: PUSH
25542: LD_VAR 0 15
25546: PPUSH
25547: LD_VAR 0 2
25551: PPUSH
25552: LD_INT 1
25554: PPUSH
25555: CALL 24798 0 3
25559: ST_TO_ADDR
// InitHc ;
25560: CALL_OW 19
// InitUc ;
25564: CALL_OW 18
// uc_side := side ;
25568: LD_ADDR_OWVAR 20
25572: PUSH
25573: LD_VAR 0 16
25577: ST_TO_ADDR
// uc_nation := nation ;
25578: LD_ADDR_OWVAR 21
25582: PUSH
25583: LD_VAR 0 17
25587: ST_TO_ADDR
// if buildings then
25588: LD_VAR 0 18
25592: IFFALSE 26914
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25594: LD_ADDR_VAR 0 19
25598: PUSH
25599: LD_VAR 0 18
25603: PPUSH
25604: LD_INT 2
25606: PUSH
25607: LD_INT 30
25609: PUSH
25610: LD_INT 29
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 30
25619: PUSH
25620: LD_INT 30
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: LIST
25631: PPUSH
25632: CALL_OW 72
25636: ST_TO_ADDR
// if tmp then
25637: LD_VAR 0 19
25641: IFFALSE 25689
// for i in tmp do
25643: LD_ADDR_VAR 0 8
25647: PUSH
25648: LD_VAR 0 19
25652: PUSH
25653: FOR_IN
25654: IFFALSE 25687
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25656: LD_VAR 0 8
25660: PPUSH
25661: CALL_OW 250
25665: PPUSH
25666: LD_VAR 0 8
25670: PPUSH
25671: CALL_OW 251
25675: PPUSH
25676: LD_VAR 0 16
25680: PPUSH
25681: CALL_OW 441
25685: GO 25653
25687: POP
25688: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25689: LD_VAR 0 18
25693: PPUSH
25694: LD_INT 2
25696: PUSH
25697: LD_INT 30
25699: PUSH
25700: LD_INT 32
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 30
25709: PUSH
25710: LD_INT 33
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: LIST
25721: PPUSH
25722: CALL_OW 72
25726: IFFALSE 25814
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25728: LD_ADDR_VAR 0 8
25732: PUSH
25733: LD_VAR 0 18
25737: PPUSH
25738: LD_INT 2
25740: PUSH
25741: LD_INT 30
25743: PUSH
25744: LD_INT 32
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 30
25753: PUSH
25754: LD_INT 33
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: LIST
25765: PPUSH
25766: CALL_OW 72
25770: PUSH
25771: FOR_IN
25772: IFFALSE 25812
// begin if not GetBWeapon ( i ) then
25774: LD_VAR 0 8
25778: PPUSH
25779: CALL_OW 269
25783: NOT
25784: IFFALSE 25810
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25786: LD_VAR 0 8
25790: PPUSH
25791: LD_VAR 0 8
25795: PPUSH
25796: LD_VAR 0 2
25800: PPUSH
25801: CALL 27060 0 2
25805: PPUSH
25806: CALL_OW 431
// end ;
25810: GO 25771
25812: POP
25813: POP
// end ; for i = 1 to personel do
25814: LD_ADDR_VAR 0 8
25818: PUSH
25819: DOUBLE
25820: LD_INT 1
25822: DEC
25823: ST_TO_ADDR
25824: LD_VAR 0 6
25828: PUSH
25829: FOR_TO
25830: IFFALSE 26894
// begin if i > 4 then
25832: LD_VAR 0 8
25836: PUSH
25837: LD_INT 4
25839: GREATER
25840: IFFALSE 25844
// break ;
25842: GO 26894
// case i of 1 :
25844: LD_VAR 0 8
25848: PUSH
25849: LD_INT 1
25851: DOUBLE
25852: EQUAL
25853: IFTRUE 25857
25855: GO 25937
25857: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25858: LD_ADDR_VAR 0 12
25862: PUSH
25863: LD_VAR 0 18
25867: PPUSH
25868: LD_INT 22
25870: PUSH
25871: LD_VAR 0 16
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 58
25882: PUSH
25883: EMPTY
25884: LIST
25885: PUSH
25886: LD_INT 2
25888: PUSH
25889: LD_INT 30
25891: PUSH
25892: LD_INT 32
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 30
25901: PUSH
25902: LD_INT 4
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 30
25911: PUSH
25912: LD_INT 5
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: LIST
25929: PPUSH
25930: CALL_OW 72
25934: ST_TO_ADDR
25935: GO 26159
25937: LD_INT 2
25939: DOUBLE
25940: EQUAL
25941: IFTRUE 25945
25943: GO 26007
25945: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25946: LD_ADDR_VAR 0 12
25950: PUSH
25951: LD_VAR 0 18
25955: PPUSH
25956: LD_INT 22
25958: PUSH
25959: LD_VAR 0 16
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 30
25973: PUSH
25974: LD_INT 0
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 30
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: LIST
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PPUSH
26000: CALL_OW 72
26004: ST_TO_ADDR
26005: GO 26159
26007: LD_INT 3
26009: DOUBLE
26010: EQUAL
26011: IFTRUE 26015
26013: GO 26077
26015: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26016: LD_ADDR_VAR 0 12
26020: PUSH
26021: LD_VAR 0 18
26025: PPUSH
26026: LD_INT 22
26028: PUSH
26029: LD_VAR 0 16
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 2
26040: PUSH
26041: LD_INT 30
26043: PUSH
26044: LD_INT 2
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 30
26053: PUSH
26054: LD_INT 3
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: LIST
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PPUSH
26070: CALL_OW 72
26074: ST_TO_ADDR
26075: GO 26159
26077: LD_INT 4
26079: DOUBLE
26080: EQUAL
26081: IFTRUE 26085
26083: GO 26158
26085: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26086: LD_ADDR_VAR 0 12
26090: PUSH
26091: LD_VAR 0 18
26095: PPUSH
26096: LD_INT 22
26098: PUSH
26099: LD_VAR 0 16
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 2
26110: PUSH
26111: LD_INT 30
26113: PUSH
26114: LD_INT 6
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 30
26123: PUSH
26124: LD_INT 7
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 30
26133: PUSH
26134: LD_INT 8
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PPUSH
26151: CALL_OW 72
26155: ST_TO_ADDR
26156: GO 26159
26158: POP
// if i = 1 then
26159: LD_VAR 0 8
26163: PUSH
26164: LD_INT 1
26166: EQUAL
26167: IFFALSE 26278
// begin tmp := [ ] ;
26169: LD_ADDR_VAR 0 19
26173: PUSH
26174: EMPTY
26175: ST_TO_ADDR
// for j in f do
26176: LD_ADDR_VAR 0 9
26180: PUSH
26181: LD_VAR 0 12
26185: PUSH
26186: FOR_IN
26187: IFFALSE 26260
// if GetBType ( j ) = b_bunker then
26189: LD_VAR 0 9
26193: PPUSH
26194: CALL_OW 266
26198: PUSH
26199: LD_INT 32
26201: EQUAL
26202: IFFALSE 26229
// tmp := Insert ( tmp , 1 , j ) else
26204: LD_ADDR_VAR 0 19
26208: PUSH
26209: LD_VAR 0 19
26213: PPUSH
26214: LD_INT 1
26216: PPUSH
26217: LD_VAR 0 9
26221: PPUSH
26222: CALL_OW 2
26226: ST_TO_ADDR
26227: GO 26258
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26229: LD_ADDR_VAR 0 19
26233: PUSH
26234: LD_VAR 0 19
26238: PPUSH
26239: LD_VAR 0 19
26243: PUSH
26244: LD_INT 1
26246: PLUS
26247: PPUSH
26248: LD_VAR 0 9
26252: PPUSH
26253: CALL_OW 2
26257: ST_TO_ADDR
26258: GO 26186
26260: POP
26261: POP
// if tmp then
26262: LD_VAR 0 19
26266: IFFALSE 26278
// f := tmp ;
26268: LD_ADDR_VAR 0 12
26272: PUSH
26273: LD_VAR 0 19
26277: ST_TO_ADDR
// end ; x := personel [ i ] ;
26278: LD_ADDR_VAR 0 13
26282: PUSH
26283: LD_VAR 0 6
26287: PUSH
26288: LD_VAR 0 8
26292: ARRAY
26293: ST_TO_ADDR
// if x = - 1 then
26294: LD_VAR 0 13
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: EQUAL
26303: IFFALSE 26512
// begin for j in f do
26305: LD_ADDR_VAR 0 9
26309: PUSH
26310: LD_VAR 0 12
26314: PUSH
26315: FOR_IN
26316: IFFALSE 26508
// repeat InitHc ;
26318: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26322: LD_VAR 0 9
26326: PPUSH
26327: CALL_OW 266
26331: PUSH
26332: LD_INT 5
26334: EQUAL
26335: IFFALSE 26405
// begin if UnitsInside ( j ) < 3 then
26337: LD_VAR 0 9
26341: PPUSH
26342: CALL_OW 313
26346: PUSH
26347: LD_INT 3
26349: LESS
26350: IFFALSE 26386
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26352: LD_INT 0
26354: PPUSH
26355: LD_INT 5
26357: PUSH
26358: LD_INT 8
26360: PUSH
26361: LD_INT 9
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: LIST
26368: PUSH
26369: LD_VAR 0 17
26373: ARRAY
26374: PPUSH
26375: LD_VAR 0 4
26379: PPUSH
26380: CALL_OW 380
26384: GO 26403
// PrepareHuman ( false , i , skill ) ;
26386: LD_INT 0
26388: PPUSH
26389: LD_VAR 0 8
26393: PPUSH
26394: LD_VAR 0 4
26398: PPUSH
26399: CALL_OW 380
// end else
26403: GO 26422
// PrepareHuman ( false , i , skill ) ;
26405: LD_INT 0
26407: PPUSH
26408: LD_VAR 0 8
26412: PPUSH
26413: LD_VAR 0 4
26417: PPUSH
26418: CALL_OW 380
// un := CreateHuman ;
26422: LD_ADDR_VAR 0 14
26426: PUSH
26427: CALL_OW 44
26431: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26432: LD_ADDR_VAR 0 7
26436: PUSH
26437: LD_VAR 0 7
26441: PPUSH
26442: LD_INT 1
26444: PPUSH
26445: LD_VAR 0 14
26449: PPUSH
26450: CALL_OW 2
26454: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26455: LD_VAR 0 14
26459: PPUSH
26460: LD_VAR 0 9
26464: PPUSH
26465: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26469: LD_VAR 0 9
26473: PPUSH
26474: CALL_OW 313
26478: PUSH
26479: LD_INT 6
26481: EQUAL
26482: PUSH
26483: LD_VAR 0 9
26487: PPUSH
26488: CALL_OW 266
26492: PUSH
26493: LD_INT 32
26495: PUSH
26496: LD_INT 31
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: IN
26503: OR
26504: IFFALSE 26318
26506: GO 26315
26508: POP
26509: POP
// end else
26510: GO 26892
// for j = 1 to x do
26512: LD_ADDR_VAR 0 9
26516: PUSH
26517: DOUBLE
26518: LD_INT 1
26520: DEC
26521: ST_TO_ADDR
26522: LD_VAR 0 13
26526: PUSH
26527: FOR_TO
26528: IFFALSE 26890
// begin InitHc ;
26530: CALL_OW 19
// if not f then
26534: LD_VAR 0 12
26538: NOT
26539: IFFALSE 26628
// begin PrepareHuman ( false , i , skill ) ;
26541: LD_INT 0
26543: PPUSH
26544: LD_VAR 0 8
26548: PPUSH
26549: LD_VAR 0 4
26553: PPUSH
26554: CALL_OW 380
// un := CreateHuman ;
26558: LD_ADDR_VAR 0 14
26562: PUSH
26563: CALL_OW 44
26567: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26568: LD_ADDR_VAR 0 7
26572: PUSH
26573: LD_VAR 0 7
26577: PPUSH
26578: LD_INT 1
26580: PPUSH
26581: LD_VAR 0 14
26585: PPUSH
26586: CALL_OW 2
26590: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26591: LD_VAR 0 14
26595: PPUSH
26596: LD_VAR 0 1
26600: PPUSH
26601: CALL_OW 250
26605: PPUSH
26606: LD_VAR 0 1
26610: PPUSH
26611: CALL_OW 251
26615: PPUSH
26616: LD_INT 10
26618: PPUSH
26619: LD_INT 0
26621: PPUSH
26622: CALL_OW 50
// continue ;
26626: GO 26527
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26628: LD_VAR 0 12
26632: PUSH
26633: LD_INT 1
26635: ARRAY
26636: PPUSH
26637: CALL_OW 313
26641: PUSH
26642: LD_VAR 0 12
26646: PUSH
26647: LD_INT 1
26649: ARRAY
26650: PPUSH
26651: CALL_OW 266
26655: PUSH
26656: LD_INT 32
26658: PUSH
26659: LD_INT 31
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: IN
26666: AND
26667: PUSH
26668: LD_VAR 0 12
26672: PUSH
26673: LD_INT 1
26675: ARRAY
26676: PPUSH
26677: CALL_OW 313
26681: PUSH
26682: LD_INT 6
26684: EQUAL
26685: OR
26686: IFFALSE 26706
// f := Delete ( f , 1 ) ;
26688: LD_ADDR_VAR 0 12
26692: PUSH
26693: LD_VAR 0 12
26697: PPUSH
26698: LD_INT 1
26700: PPUSH
26701: CALL_OW 3
26705: ST_TO_ADDR
// if not f then
26706: LD_VAR 0 12
26710: NOT
26711: IFFALSE 26729
// begin x := x + 2 ;
26713: LD_ADDR_VAR 0 13
26717: PUSH
26718: LD_VAR 0 13
26722: PUSH
26723: LD_INT 2
26725: PLUS
26726: ST_TO_ADDR
// continue ;
26727: GO 26527
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26729: LD_VAR 0 12
26733: PUSH
26734: LD_INT 1
26736: ARRAY
26737: PPUSH
26738: CALL_OW 266
26742: PUSH
26743: LD_INT 5
26745: EQUAL
26746: IFFALSE 26820
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26748: LD_VAR 0 12
26752: PUSH
26753: LD_INT 1
26755: ARRAY
26756: PPUSH
26757: CALL_OW 313
26761: PUSH
26762: LD_INT 3
26764: LESS
26765: IFFALSE 26801
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26767: LD_INT 0
26769: PPUSH
26770: LD_INT 5
26772: PUSH
26773: LD_INT 8
26775: PUSH
26776: LD_INT 9
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: LIST
26783: PUSH
26784: LD_VAR 0 17
26788: ARRAY
26789: PPUSH
26790: LD_VAR 0 4
26794: PPUSH
26795: CALL_OW 380
26799: GO 26818
// PrepareHuman ( false , i , skill ) ;
26801: LD_INT 0
26803: PPUSH
26804: LD_VAR 0 8
26808: PPUSH
26809: LD_VAR 0 4
26813: PPUSH
26814: CALL_OW 380
// end else
26818: GO 26837
// PrepareHuman ( false , i , skill ) ;
26820: LD_INT 0
26822: PPUSH
26823: LD_VAR 0 8
26827: PPUSH
26828: LD_VAR 0 4
26832: PPUSH
26833: CALL_OW 380
// un := CreateHuman ;
26837: LD_ADDR_VAR 0 14
26841: PUSH
26842: CALL_OW 44
26846: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26847: LD_ADDR_VAR 0 7
26851: PUSH
26852: LD_VAR 0 7
26856: PPUSH
26857: LD_INT 1
26859: PPUSH
26860: LD_VAR 0 14
26864: PPUSH
26865: CALL_OW 2
26869: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26870: LD_VAR 0 14
26874: PPUSH
26875: LD_VAR 0 12
26879: PUSH
26880: LD_INT 1
26882: ARRAY
26883: PPUSH
26884: CALL_OW 52
// end ;
26888: GO 26527
26890: POP
26891: POP
// end ;
26892: GO 25829
26894: POP
26895: POP
// result := result ^ buildings ;
26896: LD_ADDR_VAR 0 7
26900: PUSH
26901: LD_VAR 0 7
26905: PUSH
26906: LD_VAR 0 18
26910: ADD
26911: ST_TO_ADDR
// end else
26912: GO 27055
// begin for i = 1 to personel do
26914: LD_ADDR_VAR 0 8
26918: PUSH
26919: DOUBLE
26920: LD_INT 1
26922: DEC
26923: ST_TO_ADDR
26924: LD_VAR 0 6
26928: PUSH
26929: FOR_TO
26930: IFFALSE 27053
// begin if i > 4 then
26932: LD_VAR 0 8
26936: PUSH
26937: LD_INT 4
26939: GREATER
26940: IFFALSE 26944
// break ;
26942: GO 27053
// x := personel [ i ] ;
26944: LD_ADDR_VAR 0 13
26948: PUSH
26949: LD_VAR 0 6
26953: PUSH
26954: LD_VAR 0 8
26958: ARRAY
26959: ST_TO_ADDR
// if x = - 1 then
26960: LD_VAR 0 13
26964: PUSH
26965: LD_INT 1
26967: NEG
26968: EQUAL
26969: IFFALSE 26973
// continue ;
26971: GO 26929
// PrepareHuman ( false , i , skill ) ;
26973: LD_INT 0
26975: PPUSH
26976: LD_VAR 0 8
26980: PPUSH
26981: LD_VAR 0 4
26985: PPUSH
26986: CALL_OW 380
// un := CreateHuman ;
26990: LD_ADDR_VAR 0 14
26994: PUSH
26995: CALL_OW 44
26999: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27000: LD_VAR 0 14
27004: PPUSH
27005: LD_VAR 0 1
27009: PPUSH
27010: CALL_OW 250
27014: PPUSH
27015: LD_VAR 0 1
27019: PPUSH
27020: CALL_OW 251
27024: PPUSH
27025: LD_INT 10
27027: PPUSH
27028: LD_INT 0
27030: PPUSH
27031: CALL_OW 50
// result := result ^ un ;
27035: LD_ADDR_VAR 0 7
27039: PUSH
27040: LD_VAR 0 7
27044: PUSH
27045: LD_VAR 0 14
27049: ADD
27050: ST_TO_ADDR
// end ;
27051: GO 26929
27053: POP
27054: POP
// end ; end ;
27055: LD_VAR 0 7
27059: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27060: LD_INT 0
27062: PPUSH
27063: PPUSH
27064: PPUSH
27065: PPUSH
27066: PPUSH
27067: PPUSH
27068: PPUSH
27069: PPUSH
27070: PPUSH
27071: PPUSH
27072: PPUSH
27073: PPUSH
27074: PPUSH
27075: PPUSH
27076: PPUSH
27077: PPUSH
// result := false ;
27078: LD_ADDR_VAR 0 3
27082: PUSH
27083: LD_INT 0
27085: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27086: LD_VAR 0 1
27090: NOT
27091: PUSH
27092: LD_VAR 0 1
27096: PPUSH
27097: CALL_OW 266
27101: PUSH
27102: LD_INT 32
27104: PUSH
27105: LD_INT 33
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: IN
27112: NOT
27113: OR
27114: IFFALSE 27118
// exit ;
27116: GO 28227
// nat := GetNation ( tower ) ;
27118: LD_ADDR_VAR 0 12
27122: PUSH
27123: LD_VAR 0 1
27127: PPUSH
27128: CALL_OW 248
27132: ST_TO_ADDR
// side := GetSide ( tower ) ;
27133: LD_ADDR_VAR 0 16
27137: PUSH
27138: LD_VAR 0 1
27142: PPUSH
27143: CALL_OW 255
27147: ST_TO_ADDR
// x := GetX ( tower ) ;
27148: LD_ADDR_VAR 0 10
27152: PUSH
27153: LD_VAR 0 1
27157: PPUSH
27158: CALL_OW 250
27162: ST_TO_ADDR
// y := GetY ( tower ) ;
27163: LD_ADDR_VAR 0 11
27167: PUSH
27168: LD_VAR 0 1
27172: PPUSH
27173: CALL_OW 251
27177: ST_TO_ADDR
// if not x or not y then
27178: LD_VAR 0 10
27182: NOT
27183: PUSH
27184: LD_VAR 0 11
27188: NOT
27189: OR
27190: IFFALSE 27194
// exit ;
27192: GO 28227
// weapon := 0 ;
27194: LD_ADDR_VAR 0 18
27198: PUSH
27199: LD_INT 0
27201: ST_TO_ADDR
// fac_list := [ ] ;
27202: LD_ADDR_VAR 0 17
27206: PUSH
27207: EMPTY
27208: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27209: LD_ADDR_VAR 0 6
27213: PUSH
27214: LD_VAR 0 1
27218: PPUSH
27219: CALL_OW 274
27223: PPUSH
27224: LD_VAR 0 2
27228: PPUSH
27229: LD_INT 0
27231: PPUSH
27232: CALL 24798 0 3
27236: PPUSH
27237: LD_INT 30
27239: PUSH
27240: LD_INT 3
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PPUSH
27247: CALL_OW 72
27251: ST_TO_ADDR
// if not factories then
27252: LD_VAR 0 6
27256: NOT
27257: IFFALSE 27261
// exit ;
27259: GO 28227
// for i in factories do
27261: LD_ADDR_VAR 0 8
27265: PUSH
27266: LD_VAR 0 6
27270: PUSH
27271: FOR_IN
27272: IFFALSE 27297
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27274: LD_ADDR_VAR 0 17
27278: PUSH
27279: LD_VAR 0 17
27283: PUSH
27284: LD_VAR 0 8
27288: PPUSH
27289: CALL_OW 478
27293: UNION
27294: ST_TO_ADDR
27295: GO 27271
27297: POP
27298: POP
// if not fac_list then
27299: LD_VAR 0 17
27303: NOT
27304: IFFALSE 27308
// exit ;
27306: GO 28227
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27308: LD_ADDR_VAR 0 5
27312: PUSH
27313: LD_INT 4
27315: PUSH
27316: LD_INT 5
27318: PUSH
27319: LD_INT 9
27321: PUSH
27322: LD_INT 10
27324: PUSH
27325: LD_INT 6
27327: PUSH
27328: LD_INT 7
27330: PUSH
27331: LD_INT 11
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 27
27345: PUSH
27346: LD_INT 28
27348: PUSH
27349: LD_INT 26
27351: PUSH
27352: LD_INT 30
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 43
27363: PUSH
27364: LD_INT 44
27366: PUSH
27367: LD_INT 46
27369: PUSH
27370: LD_INT 45
27372: PUSH
27373: LD_INT 47
27375: PUSH
27376: LD_INT 49
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: LIST
27391: PUSH
27392: LD_VAR 0 12
27396: ARRAY
27397: ST_TO_ADDR
// list := list isect fac_list ;
27398: LD_ADDR_VAR 0 5
27402: PUSH
27403: LD_VAR 0 5
27407: PUSH
27408: LD_VAR 0 17
27412: ISECT
27413: ST_TO_ADDR
// if not list then
27414: LD_VAR 0 5
27418: NOT
27419: IFFALSE 27423
// exit ;
27421: GO 28227
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27423: LD_VAR 0 12
27427: PUSH
27428: LD_INT 3
27430: EQUAL
27431: PUSH
27432: LD_INT 49
27434: PUSH
27435: LD_VAR 0 5
27439: IN
27440: AND
27441: PUSH
27442: LD_INT 31
27444: PPUSH
27445: LD_VAR 0 16
27449: PPUSH
27450: CALL_OW 321
27454: PUSH
27455: LD_INT 2
27457: EQUAL
27458: AND
27459: IFFALSE 27519
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27461: LD_INT 22
27463: PUSH
27464: LD_VAR 0 16
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 35
27475: PUSH
27476: LD_INT 49
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 91
27485: PUSH
27486: LD_VAR 0 1
27490: PUSH
27491: LD_INT 10
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: LIST
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: LIST
27503: PPUSH
27504: CALL_OW 69
27508: NOT
27509: IFFALSE 27519
// weapon := ru_time_lapser ;
27511: LD_ADDR_VAR 0 18
27515: PUSH
27516: LD_INT 49
27518: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27519: LD_VAR 0 12
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: LD_INT 2
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: IN
27534: PUSH
27535: LD_INT 11
27537: PUSH
27538: LD_VAR 0 5
27542: IN
27543: PUSH
27544: LD_INT 30
27546: PUSH
27547: LD_VAR 0 5
27551: IN
27552: OR
27553: AND
27554: PUSH
27555: LD_INT 6
27557: PPUSH
27558: LD_VAR 0 16
27562: PPUSH
27563: CALL_OW 321
27567: PUSH
27568: LD_INT 2
27570: EQUAL
27571: AND
27572: IFFALSE 27737
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27574: LD_INT 22
27576: PUSH
27577: LD_VAR 0 16
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 2
27588: PUSH
27589: LD_INT 35
27591: PUSH
27592: LD_INT 11
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 35
27601: PUSH
27602: LD_INT 30
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 91
27616: PUSH
27617: LD_VAR 0 1
27621: PUSH
27622: LD_INT 18
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: LIST
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: LIST
27634: PPUSH
27635: CALL_OW 69
27639: NOT
27640: PUSH
27641: LD_INT 22
27643: PUSH
27644: LD_VAR 0 16
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 2
27655: PUSH
27656: LD_INT 30
27658: PUSH
27659: LD_INT 32
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 30
27668: PUSH
27669: LD_INT 33
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 91
27683: PUSH
27684: LD_VAR 0 1
27688: PUSH
27689: LD_INT 12
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: LIST
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: LIST
27701: PUSH
27702: EMPTY
27703: LIST
27704: PPUSH
27705: CALL_OW 69
27709: PUSH
27710: LD_INT 2
27712: GREATER
27713: AND
27714: IFFALSE 27737
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27716: LD_ADDR_VAR 0 18
27720: PUSH
27721: LD_INT 11
27723: PUSH
27724: LD_INT 30
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_VAR 0 12
27735: ARRAY
27736: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27737: LD_VAR 0 18
27741: NOT
27742: PUSH
27743: LD_INT 40
27745: PPUSH
27746: LD_VAR 0 16
27750: PPUSH
27751: CALL_OW 321
27755: PUSH
27756: LD_INT 2
27758: EQUAL
27759: AND
27760: PUSH
27761: LD_INT 7
27763: PUSH
27764: LD_VAR 0 5
27768: IN
27769: PUSH
27770: LD_INT 28
27772: PUSH
27773: LD_VAR 0 5
27777: IN
27778: OR
27779: PUSH
27780: LD_INT 45
27782: PUSH
27783: LD_VAR 0 5
27787: IN
27788: OR
27789: AND
27790: IFFALSE 28044
// begin hex := GetHexInfo ( x , y ) ;
27792: LD_ADDR_VAR 0 4
27796: PUSH
27797: LD_VAR 0 10
27801: PPUSH
27802: LD_VAR 0 11
27806: PPUSH
27807: CALL_OW 546
27811: ST_TO_ADDR
// if hex [ 1 ] then
27812: LD_VAR 0 4
27816: PUSH
27817: LD_INT 1
27819: ARRAY
27820: IFFALSE 27824
// exit ;
27822: GO 28227
// height := hex [ 2 ] ;
27824: LD_ADDR_VAR 0 15
27828: PUSH
27829: LD_VAR 0 4
27833: PUSH
27834: LD_INT 2
27836: ARRAY
27837: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27838: LD_ADDR_VAR 0 14
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: LD_INT 2
27848: PUSH
27849: LD_INT 3
27851: PUSH
27852: LD_INT 5
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: ST_TO_ADDR
// for i in tmp do
27861: LD_ADDR_VAR 0 8
27865: PUSH
27866: LD_VAR 0 14
27870: PUSH
27871: FOR_IN
27872: IFFALSE 28042
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27874: LD_ADDR_VAR 0 9
27878: PUSH
27879: LD_VAR 0 10
27883: PPUSH
27884: LD_VAR 0 8
27888: PPUSH
27889: LD_INT 5
27891: PPUSH
27892: CALL_OW 272
27896: PUSH
27897: LD_VAR 0 11
27901: PPUSH
27902: LD_VAR 0 8
27906: PPUSH
27907: LD_INT 5
27909: PPUSH
27910: CALL_OW 273
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27919: LD_VAR 0 9
27923: PUSH
27924: LD_INT 1
27926: ARRAY
27927: PPUSH
27928: LD_VAR 0 9
27932: PUSH
27933: LD_INT 2
27935: ARRAY
27936: PPUSH
27937: CALL_OW 488
27941: IFFALSE 28040
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27943: LD_ADDR_VAR 0 4
27947: PUSH
27948: LD_VAR 0 9
27952: PUSH
27953: LD_INT 1
27955: ARRAY
27956: PPUSH
27957: LD_VAR 0 9
27961: PUSH
27962: LD_INT 2
27964: ARRAY
27965: PPUSH
27966: CALL_OW 546
27970: ST_TO_ADDR
// if hex [ 1 ] then
27971: LD_VAR 0 4
27975: PUSH
27976: LD_INT 1
27978: ARRAY
27979: IFFALSE 27983
// continue ;
27981: GO 27871
// h := hex [ 2 ] ;
27983: LD_ADDR_VAR 0 13
27987: PUSH
27988: LD_VAR 0 4
27992: PUSH
27993: LD_INT 2
27995: ARRAY
27996: ST_TO_ADDR
// if h + 7 < height then
27997: LD_VAR 0 13
28001: PUSH
28002: LD_INT 7
28004: PLUS
28005: PUSH
28006: LD_VAR 0 15
28010: LESS
28011: IFFALSE 28040
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28013: LD_ADDR_VAR 0 18
28017: PUSH
28018: LD_INT 7
28020: PUSH
28021: LD_INT 28
28023: PUSH
28024: LD_INT 45
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: LIST
28031: PUSH
28032: LD_VAR 0 12
28036: ARRAY
28037: ST_TO_ADDR
// break ;
28038: GO 28042
// end ; end ; end ;
28040: GO 27871
28042: POP
28043: POP
// end ; if not weapon then
28044: LD_VAR 0 18
28048: NOT
28049: IFFALSE 28109
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28051: LD_ADDR_VAR 0 5
28055: PUSH
28056: LD_VAR 0 5
28060: PUSH
28061: LD_INT 11
28063: PUSH
28064: LD_INT 30
28066: PUSH
28067: LD_INT 49
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: LIST
28074: DIFF
28075: ST_TO_ADDR
// if not list then
28076: LD_VAR 0 5
28080: NOT
28081: IFFALSE 28085
// exit ;
28083: GO 28227
// weapon := list [ rand ( 1 , list ) ] ;
28085: LD_ADDR_VAR 0 18
28089: PUSH
28090: LD_VAR 0 5
28094: PUSH
28095: LD_INT 1
28097: PPUSH
28098: LD_VAR 0 5
28102: PPUSH
28103: CALL_OW 12
28107: ARRAY
28108: ST_TO_ADDR
// end ; if weapon then
28109: LD_VAR 0 18
28113: IFFALSE 28227
// begin tmp := CostOfWeapon ( weapon ) ;
28115: LD_ADDR_VAR 0 14
28119: PUSH
28120: LD_VAR 0 18
28124: PPUSH
28125: CALL_OW 451
28129: ST_TO_ADDR
// j := GetBase ( tower ) ;
28130: LD_ADDR_VAR 0 9
28134: PUSH
28135: LD_VAR 0 1
28139: PPUSH
28140: CALL_OW 274
28144: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28145: LD_VAR 0 9
28149: PPUSH
28150: LD_INT 1
28152: PPUSH
28153: CALL_OW 275
28157: PUSH
28158: LD_VAR 0 14
28162: PUSH
28163: LD_INT 1
28165: ARRAY
28166: GREATEREQUAL
28167: PUSH
28168: LD_VAR 0 9
28172: PPUSH
28173: LD_INT 2
28175: PPUSH
28176: CALL_OW 275
28180: PUSH
28181: LD_VAR 0 14
28185: PUSH
28186: LD_INT 2
28188: ARRAY
28189: GREATEREQUAL
28190: AND
28191: PUSH
28192: LD_VAR 0 9
28196: PPUSH
28197: LD_INT 3
28199: PPUSH
28200: CALL_OW 275
28204: PUSH
28205: LD_VAR 0 14
28209: PUSH
28210: LD_INT 3
28212: ARRAY
28213: GREATEREQUAL
28214: AND
28215: IFFALSE 28227
// result := weapon ;
28217: LD_ADDR_VAR 0 3
28221: PUSH
28222: LD_VAR 0 18
28226: ST_TO_ADDR
// end ; end ;
28227: LD_VAR 0 3
28231: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28232: LD_INT 0
28234: PPUSH
28235: PPUSH
// result := true ;
28236: LD_ADDR_VAR 0 3
28240: PUSH
28241: LD_INT 1
28243: ST_TO_ADDR
// if array1 = array2 then
28244: LD_VAR 0 1
28248: PUSH
28249: LD_VAR 0 2
28253: EQUAL
28254: IFFALSE 28314
// begin for i = 1 to array1 do
28256: LD_ADDR_VAR 0 4
28260: PUSH
28261: DOUBLE
28262: LD_INT 1
28264: DEC
28265: ST_TO_ADDR
28266: LD_VAR 0 1
28270: PUSH
28271: FOR_TO
28272: IFFALSE 28310
// if array1 [ i ] <> array2 [ i ] then
28274: LD_VAR 0 1
28278: PUSH
28279: LD_VAR 0 4
28283: ARRAY
28284: PUSH
28285: LD_VAR 0 2
28289: PUSH
28290: LD_VAR 0 4
28294: ARRAY
28295: NONEQUAL
28296: IFFALSE 28308
// begin result := false ;
28298: LD_ADDR_VAR 0 3
28302: PUSH
28303: LD_INT 0
28305: ST_TO_ADDR
// break ;
28306: GO 28310
// end ;
28308: GO 28271
28310: POP
28311: POP
// end else
28312: GO 28322
// result := false ;
28314: LD_ADDR_VAR 0 3
28318: PUSH
28319: LD_INT 0
28321: ST_TO_ADDR
// end ;
28322: LD_VAR 0 3
28326: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28327: LD_INT 0
28329: PPUSH
28330: PPUSH
// if not array1 or not array2 then
28331: LD_VAR 0 1
28335: NOT
28336: PUSH
28337: LD_VAR 0 2
28341: NOT
28342: OR
28343: IFFALSE 28347
// exit ;
28345: GO 28411
// result := true ;
28347: LD_ADDR_VAR 0 3
28351: PUSH
28352: LD_INT 1
28354: ST_TO_ADDR
// for i = 1 to array1 do
28355: LD_ADDR_VAR 0 4
28359: PUSH
28360: DOUBLE
28361: LD_INT 1
28363: DEC
28364: ST_TO_ADDR
28365: LD_VAR 0 1
28369: PUSH
28370: FOR_TO
28371: IFFALSE 28409
// if array1 [ i ] <> array2 [ i ] then
28373: LD_VAR 0 1
28377: PUSH
28378: LD_VAR 0 4
28382: ARRAY
28383: PUSH
28384: LD_VAR 0 2
28388: PUSH
28389: LD_VAR 0 4
28393: ARRAY
28394: NONEQUAL
28395: IFFALSE 28407
// begin result := false ;
28397: LD_ADDR_VAR 0 3
28401: PUSH
28402: LD_INT 0
28404: ST_TO_ADDR
// break ;
28405: GO 28409
// end ;
28407: GO 28370
28409: POP
28410: POP
// end ;
28411: LD_VAR 0 3
28415: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28416: LD_INT 0
28418: PPUSH
28419: PPUSH
28420: PPUSH
// pom := GetBase ( fac ) ;
28421: LD_ADDR_VAR 0 5
28425: PUSH
28426: LD_VAR 0 1
28430: PPUSH
28431: CALL_OW 274
28435: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28436: LD_ADDR_VAR 0 4
28440: PUSH
28441: LD_VAR 0 2
28445: PUSH
28446: LD_INT 1
28448: ARRAY
28449: PPUSH
28450: LD_VAR 0 2
28454: PUSH
28455: LD_INT 2
28457: ARRAY
28458: PPUSH
28459: LD_VAR 0 2
28463: PUSH
28464: LD_INT 3
28466: ARRAY
28467: PPUSH
28468: LD_VAR 0 2
28472: PUSH
28473: LD_INT 4
28475: ARRAY
28476: PPUSH
28477: CALL_OW 449
28481: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28482: LD_ADDR_VAR 0 3
28486: PUSH
28487: LD_VAR 0 5
28491: PPUSH
28492: LD_INT 1
28494: PPUSH
28495: CALL_OW 275
28499: PUSH
28500: LD_VAR 0 4
28504: PUSH
28505: LD_INT 1
28507: ARRAY
28508: GREATEREQUAL
28509: PUSH
28510: LD_VAR 0 5
28514: PPUSH
28515: LD_INT 2
28517: PPUSH
28518: CALL_OW 275
28522: PUSH
28523: LD_VAR 0 4
28527: PUSH
28528: LD_INT 2
28530: ARRAY
28531: GREATEREQUAL
28532: AND
28533: PUSH
28534: LD_VAR 0 5
28538: PPUSH
28539: LD_INT 3
28541: PPUSH
28542: CALL_OW 275
28546: PUSH
28547: LD_VAR 0 4
28551: PUSH
28552: LD_INT 3
28554: ARRAY
28555: GREATEREQUAL
28556: AND
28557: ST_TO_ADDR
// end ;
28558: LD_VAR 0 3
28562: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28563: LD_INT 0
28565: PPUSH
28566: PPUSH
28567: PPUSH
28568: PPUSH
// pom := GetBase ( building ) ;
28569: LD_ADDR_VAR 0 3
28573: PUSH
28574: LD_VAR 0 1
28578: PPUSH
28579: CALL_OW 274
28583: ST_TO_ADDR
// if not pom then
28584: LD_VAR 0 3
28588: NOT
28589: IFFALSE 28593
// exit ;
28591: GO 28763
// btype := GetBType ( building ) ;
28593: LD_ADDR_VAR 0 5
28597: PUSH
28598: LD_VAR 0 1
28602: PPUSH
28603: CALL_OW 266
28607: ST_TO_ADDR
// if btype = b_armoury then
28608: LD_VAR 0 5
28612: PUSH
28613: LD_INT 4
28615: EQUAL
28616: IFFALSE 28626
// btype := b_barracks ;
28618: LD_ADDR_VAR 0 5
28622: PUSH
28623: LD_INT 5
28625: ST_TO_ADDR
// if btype = b_depot then
28626: LD_VAR 0 5
28630: PUSH
28631: LD_INT 0
28633: EQUAL
28634: IFFALSE 28644
// btype := b_warehouse ;
28636: LD_ADDR_VAR 0 5
28640: PUSH
28641: LD_INT 1
28643: ST_TO_ADDR
// if btype = b_workshop then
28644: LD_VAR 0 5
28648: PUSH
28649: LD_INT 2
28651: EQUAL
28652: IFFALSE 28662
// btype := b_factory ;
28654: LD_ADDR_VAR 0 5
28658: PUSH
28659: LD_INT 3
28661: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28662: LD_ADDR_VAR 0 4
28666: PUSH
28667: LD_VAR 0 5
28671: PPUSH
28672: LD_VAR 0 1
28676: PPUSH
28677: CALL_OW 248
28681: PPUSH
28682: CALL_OW 450
28686: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28687: LD_ADDR_VAR 0 2
28691: PUSH
28692: LD_VAR 0 3
28696: PPUSH
28697: LD_INT 1
28699: PPUSH
28700: CALL_OW 275
28704: PUSH
28705: LD_VAR 0 4
28709: PUSH
28710: LD_INT 1
28712: ARRAY
28713: GREATEREQUAL
28714: PUSH
28715: LD_VAR 0 3
28719: PPUSH
28720: LD_INT 2
28722: PPUSH
28723: CALL_OW 275
28727: PUSH
28728: LD_VAR 0 4
28732: PUSH
28733: LD_INT 2
28735: ARRAY
28736: GREATEREQUAL
28737: AND
28738: PUSH
28739: LD_VAR 0 3
28743: PPUSH
28744: LD_INT 3
28746: PPUSH
28747: CALL_OW 275
28751: PUSH
28752: LD_VAR 0 4
28756: PUSH
28757: LD_INT 3
28759: ARRAY
28760: GREATEREQUAL
28761: AND
28762: ST_TO_ADDR
// end ;
28763: LD_VAR 0 2
28767: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28768: LD_INT 0
28770: PPUSH
28771: PPUSH
28772: PPUSH
// pom := GetBase ( building ) ;
28773: LD_ADDR_VAR 0 4
28777: PUSH
28778: LD_VAR 0 1
28782: PPUSH
28783: CALL_OW 274
28787: ST_TO_ADDR
// if not pom then
28788: LD_VAR 0 4
28792: NOT
28793: IFFALSE 28797
// exit ;
28795: GO 28898
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28797: LD_ADDR_VAR 0 5
28801: PUSH
28802: LD_VAR 0 2
28806: PPUSH
28807: LD_VAR 0 1
28811: PPUSH
28812: CALL_OW 248
28816: PPUSH
28817: CALL_OW 450
28821: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28822: LD_ADDR_VAR 0 3
28826: PUSH
28827: LD_VAR 0 4
28831: PPUSH
28832: LD_INT 1
28834: PPUSH
28835: CALL_OW 275
28839: PUSH
28840: LD_VAR 0 5
28844: PUSH
28845: LD_INT 1
28847: ARRAY
28848: GREATEREQUAL
28849: PUSH
28850: LD_VAR 0 4
28854: PPUSH
28855: LD_INT 2
28857: PPUSH
28858: CALL_OW 275
28862: PUSH
28863: LD_VAR 0 5
28867: PUSH
28868: LD_INT 2
28870: ARRAY
28871: GREATEREQUAL
28872: AND
28873: PUSH
28874: LD_VAR 0 4
28878: PPUSH
28879: LD_INT 3
28881: PPUSH
28882: CALL_OW 275
28886: PUSH
28887: LD_VAR 0 5
28891: PUSH
28892: LD_INT 3
28894: ARRAY
28895: GREATEREQUAL
28896: AND
28897: ST_TO_ADDR
// end ;
28898: LD_VAR 0 3
28902: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28903: LD_INT 0
28905: PPUSH
28906: PPUSH
28907: PPUSH
28908: PPUSH
28909: PPUSH
28910: PPUSH
28911: PPUSH
28912: PPUSH
28913: PPUSH
28914: PPUSH
28915: PPUSH
// result := false ;
28916: LD_ADDR_VAR 0 8
28920: PUSH
28921: LD_INT 0
28923: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28924: LD_VAR 0 5
28928: NOT
28929: PUSH
28930: LD_VAR 0 1
28934: NOT
28935: OR
28936: PUSH
28937: LD_VAR 0 2
28941: NOT
28942: OR
28943: PUSH
28944: LD_VAR 0 3
28948: NOT
28949: OR
28950: IFFALSE 28954
// exit ;
28952: GO 29768
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28954: LD_ADDR_VAR 0 14
28958: PUSH
28959: LD_VAR 0 1
28963: PPUSH
28964: LD_VAR 0 2
28968: PPUSH
28969: LD_VAR 0 3
28973: PPUSH
28974: LD_VAR 0 4
28978: PPUSH
28979: LD_VAR 0 5
28983: PUSH
28984: LD_INT 1
28986: ARRAY
28987: PPUSH
28988: CALL_OW 248
28992: PPUSH
28993: LD_INT 0
28995: PPUSH
28996: CALL 31021 0 6
29000: ST_TO_ADDR
// if not hexes then
29001: LD_VAR 0 14
29005: NOT
29006: IFFALSE 29010
// exit ;
29008: GO 29768
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29010: LD_ADDR_VAR 0 17
29014: PUSH
29015: LD_VAR 0 5
29019: PPUSH
29020: LD_INT 22
29022: PUSH
29023: LD_VAR 0 13
29027: PPUSH
29028: CALL_OW 255
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 2
29039: PUSH
29040: LD_INT 30
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 30
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: LIST
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PPUSH
29069: CALL_OW 72
29073: ST_TO_ADDR
// for i = 1 to hexes do
29074: LD_ADDR_VAR 0 9
29078: PUSH
29079: DOUBLE
29080: LD_INT 1
29082: DEC
29083: ST_TO_ADDR
29084: LD_VAR 0 14
29088: PUSH
29089: FOR_TO
29090: IFFALSE 29766
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29092: LD_ADDR_VAR 0 13
29096: PUSH
29097: LD_VAR 0 14
29101: PUSH
29102: LD_VAR 0 9
29106: ARRAY
29107: PUSH
29108: LD_INT 1
29110: ARRAY
29111: PPUSH
29112: LD_VAR 0 14
29116: PUSH
29117: LD_VAR 0 9
29121: ARRAY
29122: PUSH
29123: LD_INT 2
29125: ARRAY
29126: PPUSH
29127: CALL_OW 428
29131: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29132: LD_VAR 0 14
29136: PUSH
29137: LD_VAR 0 9
29141: ARRAY
29142: PUSH
29143: LD_INT 1
29145: ARRAY
29146: PPUSH
29147: LD_VAR 0 14
29151: PUSH
29152: LD_VAR 0 9
29156: ARRAY
29157: PUSH
29158: LD_INT 2
29160: ARRAY
29161: PPUSH
29162: CALL_OW 351
29166: PUSH
29167: LD_VAR 0 14
29171: PUSH
29172: LD_VAR 0 9
29176: ARRAY
29177: PUSH
29178: LD_INT 1
29180: ARRAY
29181: PPUSH
29182: LD_VAR 0 14
29186: PUSH
29187: LD_VAR 0 9
29191: ARRAY
29192: PUSH
29193: LD_INT 2
29195: ARRAY
29196: PPUSH
29197: CALL_OW 488
29201: NOT
29202: OR
29203: PUSH
29204: LD_VAR 0 13
29208: PPUSH
29209: CALL_OW 247
29213: PUSH
29214: LD_INT 3
29216: EQUAL
29217: OR
29218: IFFALSE 29224
// exit ;
29220: POP
29221: POP
29222: GO 29768
// if not tmp then
29224: LD_VAR 0 13
29228: NOT
29229: IFFALSE 29233
// continue ;
29231: GO 29089
// result := true ;
29233: LD_ADDR_VAR 0 8
29237: PUSH
29238: LD_INT 1
29240: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29241: LD_VAR 0 6
29245: PUSH
29246: LD_VAR 0 13
29250: PPUSH
29251: CALL_OW 247
29255: PUSH
29256: LD_INT 2
29258: EQUAL
29259: AND
29260: PUSH
29261: LD_VAR 0 13
29265: PPUSH
29266: CALL_OW 263
29270: PUSH
29271: LD_INT 1
29273: EQUAL
29274: AND
29275: IFFALSE 29439
// begin if IsDrivenBy ( tmp ) then
29277: LD_VAR 0 13
29281: PPUSH
29282: CALL_OW 311
29286: IFFALSE 29290
// continue ;
29288: GO 29089
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29290: LD_VAR 0 6
29294: PPUSH
29295: LD_INT 3
29297: PUSH
29298: LD_INT 60
29300: PUSH
29301: EMPTY
29302: LIST
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 3
29310: PUSH
29311: LD_INT 55
29313: PUSH
29314: EMPTY
29315: LIST
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PPUSH
29325: CALL_OW 72
29329: IFFALSE 29437
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29331: LD_ADDR_VAR 0 18
29335: PUSH
29336: LD_VAR 0 6
29340: PPUSH
29341: LD_INT 3
29343: PUSH
29344: LD_INT 60
29346: PUSH
29347: EMPTY
29348: LIST
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 3
29356: PUSH
29357: LD_INT 55
29359: PUSH
29360: EMPTY
29361: LIST
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PPUSH
29371: CALL_OW 72
29375: PUSH
29376: LD_INT 1
29378: ARRAY
29379: ST_TO_ADDR
// if IsInUnit ( driver ) then
29380: LD_VAR 0 18
29384: PPUSH
29385: CALL_OW 310
29389: IFFALSE 29400
// ComExit ( driver ) ;
29391: LD_VAR 0 18
29395: PPUSH
29396: CALL 54822 0 1
// AddComEnterUnit ( driver , tmp ) ;
29400: LD_VAR 0 18
29404: PPUSH
29405: LD_VAR 0 13
29409: PPUSH
29410: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29414: LD_VAR 0 18
29418: PPUSH
29419: LD_VAR 0 7
29423: PPUSH
29424: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29428: LD_VAR 0 18
29432: PPUSH
29433: CALL_OW 181
// end ; continue ;
29437: GO 29089
// end ; if not cleaners or not tmp in cleaners then
29439: LD_VAR 0 6
29443: NOT
29444: PUSH
29445: LD_VAR 0 13
29449: PUSH
29450: LD_VAR 0 6
29454: IN
29455: NOT
29456: OR
29457: IFFALSE 29764
// begin if dep then
29459: LD_VAR 0 17
29463: IFFALSE 29599
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29465: LD_ADDR_VAR 0 16
29469: PUSH
29470: LD_VAR 0 17
29474: PUSH
29475: LD_INT 1
29477: ARRAY
29478: PPUSH
29479: CALL_OW 250
29483: PPUSH
29484: LD_VAR 0 17
29488: PUSH
29489: LD_INT 1
29491: ARRAY
29492: PPUSH
29493: CALL_OW 254
29497: PPUSH
29498: LD_INT 5
29500: PPUSH
29501: CALL_OW 272
29505: PUSH
29506: LD_VAR 0 17
29510: PUSH
29511: LD_INT 1
29513: ARRAY
29514: PPUSH
29515: CALL_OW 251
29519: PPUSH
29520: LD_VAR 0 17
29524: PUSH
29525: LD_INT 1
29527: ARRAY
29528: PPUSH
29529: CALL_OW 254
29533: PPUSH
29534: LD_INT 5
29536: PPUSH
29537: CALL_OW 273
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29546: LD_VAR 0 16
29550: PUSH
29551: LD_INT 1
29553: ARRAY
29554: PPUSH
29555: LD_VAR 0 16
29559: PUSH
29560: LD_INT 2
29562: ARRAY
29563: PPUSH
29564: CALL_OW 488
29568: IFFALSE 29599
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29570: LD_VAR 0 13
29574: PPUSH
29575: LD_VAR 0 16
29579: PUSH
29580: LD_INT 1
29582: ARRAY
29583: PPUSH
29584: LD_VAR 0 16
29588: PUSH
29589: LD_INT 2
29591: ARRAY
29592: PPUSH
29593: CALL_OW 111
// continue ;
29597: GO 29089
// end ; end ; r := GetDir ( tmp ) ;
29599: LD_ADDR_VAR 0 15
29603: PUSH
29604: LD_VAR 0 13
29608: PPUSH
29609: CALL_OW 254
29613: ST_TO_ADDR
// if r = 5 then
29614: LD_VAR 0 15
29618: PUSH
29619: LD_INT 5
29621: EQUAL
29622: IFFALSE 29632
// r := 0 ;
29624: LD_ADDR_VAR 0 15
29628: PUSH
29629: LD_INT 0
29631: ST_TO_ADDR
// for j = r to 5 do
29632: LD_ADDR_VAR 0 10
29636: PUSH
29637: DOUBLE
29638: LD_VAR 0 15
29642: DEC
29643: ST_TO_ADDR
29644: LD_INT 5
29646: PUSH
29647: FOR_TO
29648: IFFALSE 29762
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29650: LD_ADDR_VAR 0 11
29654: PUSH
29655: LD_VAR 0 13
29659: PPUSH
29660: CALL_OW 250
29664: PPUSH
29665: LD_VAR 0 10
29669: PPUSH
29670: LD_INT 2
29672: PPUSH
29673: CALL_OW 272
29677: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29678: LD_ADDR_VAR 0 12
29682: PUSH
29683: LD_VAR 0 13
29687: PPUSH
29688: CALL_OW 251
29692: PPUSH
29693: LD_VAR 0 10
29697: PPUSH
29698: LD_INT 2
29700: PPUSH
29701: CALL_OW 273
29705: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29706: LD_VAR 0 11
29710: PPUSH
29711: LD_VAR 0 12
29715: PPUSH
29716: CALL_OW 488
29720: PUSH
29721: LD_VAR 0 11
29725: PPUSH
29726: LD_VAR 0 12
29730: PPUSH
29731: CALL_OW 428
29735: NOT
29736: AND
29737: IFFALSE 29760
// begin ComMoveXY ( tmp , _x , _y ) ;
29739: LD_VAR 0 13
29743: PPUSH
29744: LD_VAR 0 11
29748: PPUSH
29749: LD_VAR 0 12
29753: PPUSH
29754: CALL_OW 111
// break ;
29758: GO 29762
// end ; end ;
29760: GO 29647
29762: POP
29763: POP
// end ; end ;
29764: GO 29089
29766: POP
29767: POP
// end ;
29768: LD_VAR 0 8
29772: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29773: LD_INT 0
29775: PPUSH
// result := true ;
29776: LD_ADDR_VAR 0 3
29780: PUSH
29781: LD_INT 1
29783: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29784: LD_VAR 0 2
29788: PUSH
29789: LD_INT 24
29791: DOUBLE
29792: EQUAL
29793: IFTRUE 29803
29795: LD_INT 33
29797: DOUBLE
29798: EQUAL
29799: IFTRUE 29803
29801: GO 29828
29803: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29804: LD_ADDR_VAR 0 3
29808: PUSH
29809: LD_INT 32
29811: PPUSH
29812: LD_VAR 0 1
29816: PPUSH
29817: CALL_OW 321
29821: PUSH
29822: LD_INT 2
29824: EQUAL
29825: ST_TO_ADDR
29826: GO 30144
29828: LD_INT 20
29830: DOUBLE
29831: EQUAL
29832: IFTRUE 29836
29834: GO 29861
29836: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29837: LD_ADDR_VAR 0 3
29841: PUSH
29842: LD_INT 6
29844: PPUSH
29845: LD_VAR 0 1
29849: PPUSH
29850: CALL_OW 321
29854: PUSH
29855: LD_INT 2
29857: EQUAL
29858: ST_TO_ADDR
29859: GO 30144
29861: LD_INT 22
29863: DOUBLE
29864: EQUAL
29865: IFTRUE 29875
29867: LD_INT 36
29869: DOUBLE
29870: EQUAL
29871: IFTRUE 29875
29873: GO 29900
29875: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29876: LD_ADDR_VAR 0 3
29880: PUSH
29881: LD_INT 15
29883: PPUSH
29884: LD_VAR 0 1
29888: PPUSH
29889: CALL_OW 321
29893: PUSH
29894: LD_INT 2
29896: EQUAL
29897: ST_TO_ADDR
29898: GO 30144
29900: LD_INT 30
29902: DOUBLE
29903: EQUAL
29904: IFTRUE 29908
29906: GO 29933
29908: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29909: LD_ADDR_VAR 0 3
29913: PUSH
29914: LD_INT 20
29916: PPUSH
29917: LD_VAR 0 1
29921: PPUSH
29922: CALL_OW 321
29926: PUSH
29927: LD_INT 2
29929: EQUAL
29930: ST_TO_ADDR
29931: GO 30144
29933: LD_INT 28
29935: DOUBLE
29936: EQUAL
29937: IFTRUE 29947
29939: LD_INT 21
29941: DOUBLE
29942: EQUAL
29943: IFTRUE 29947
29945: GO 29972
29947: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29948: LD_ADDR_VAR 0 3
29952: PUSH
29953: LD_INT 21
29955: PPUSH
29956: LD_VAR 0 1
29960: PPUSH
29961: CALL_OW 321
29965: PUSH
29966: LD_INT 2
29968: EQUAL
29969: ST_TO_ADDR
29970: GO 30144
29972: LD_INT 16
29974: DOUBLE
29975: EQUAL
29976: IFTRUE 29980
29978: GO 30005
29980: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29981: LD_ADDR_VAR 0 3
29985: PUSH
29986: LD_INT 84
29988: PPUSH
29989: LD_VAR 0 1
29993: PPUSH
29994: CALL_OW 321
29998: PUSH
29999: LD_INT 2
30001: EQUAL
30002: ST_TO_ADDR
30003: GO 30144
30005: LD_INT 19
30007: DOUBLE
30008: EQUAL
30009: IFTRUE 30019
30011: LD_INT 23
30013: DOUBLE
30014: EQUAL
30015: IFTRUE 30019
30017: GO 30044
30019: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30020: LD_ADDR_VAR 0 3
30024: PUSH
30025: LD_INT 83
30027: PPUSH
30028: LD_VAR 0 1
30032: PPUSH
30033: CALL_OW 321
30037: PUSH
30038: LD_INT 2
30040: EQUAL
30041: ST_TO_ADDR
30042: GO 30144
30044: LD_INT 17
30046: DOUBLE
30047: EQUAL
30048: IFTRUE 30052
30050: GO 30077
30052: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30053: LD_ADDR_VAR 0 3
30057: PUSH
30058: LD_INT 39
30060: PPUSH
30061: LD_VAR 0 1
30065: PPUSH
30066: CALL_OW 321
30070: PUSH
30071: LD_INT 2
30073: EQUAL
30074: ST_TO_ADDR
30075: GO 30144
30077: LD_INT 18
30079: DOUBLE
30080: EQUAL
30081: IFTRUE 30085
30083: GO 30110
30085: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30086: LD_ADDR_VAR 0 3
30090: PUSH
30091: LD_INT 40
30093: PPUSH
30094: LD_VAR 0 1
30098: PPUSH
30099: CALL_OW 321
30103: PUSH
30104: LD_INT 2
30106: EQUAL
30107: ST_TO_ADDR
30108: GO 30144
30110: LD_INT 27
30112: DOUBLE
30113: EQUAL
30114: IFTRUE 30118
30116: GO 30143
30118: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30119: LD_ADDR_VAR 0 3
30123: PUSH
30124: LD_INT 35
30126: PPUSH
30127: LD_VAR 0 1
30131: PPUSH
30132: CALL_OW 321
30136: PUSH
30137: LD_INT 2
30139: EQUAL
30140: ST_TO_ADDR
30141: GO 30144
30143: POP
// end ;
30144: LD_VAR 0 3
30148: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30149: LD_INT 0
30151: PPUSH
30152: PPUSH
30153: PPUSH
30154: PPUSH
30155: PPUSH
30156: PPUSH
30157: PPUSH
30158: PPUSH
30159: PPUSH
30160: PPUSH
30161: PPUSH
// result := false ;
30162: LD_ADDR_VAR 0 6
30166: PUSH
30167: LD_INT 0
30169: ST_TO_ADDR
// if btype = b_depot then
30170: LD_VAR 0 2
30174: PUSH
30175: LD_INT 0
30177: EQUAL
30178: IFFALSE 30190
// begin result := true ;
30180: LD_ADDR_VAR 0 6
30184: PUSH
30185: LD_INT 1
30187: ST_TO_ADDR
// exit ;
30188: GO 31016
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30190: LD_VAR 0 1
30194: NOT
30195: PUSH
30196: LD_VAR 0 1
30200: PPUSH
30201: CALL_OW 266
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: LD_INT 1
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: IN
30216: NOT
30217: OR
30218: PUSH
30219: LD_VAR 0 2
30223: NOT
30224: OR
30225: PUSH
30226: LD_VAR 0 5
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: LD_INT 1
30236: PUSH
30237: LD_INT 2
30239: PUSH
30240: LD_INT 3
30242: PUSH
30243: LD_INT 4
30245: PUSH
30246: LD_INT 5
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: IN
30257: NOT
30258: OR
30259: PUSH
30260: LD_VAR 0 3
30264: PPUSH
30265: LD_VAR 0 4
30269: PPUSH
30270: CALL_OW 488
30274: NOT
30275: OR
30276: IFFALSE 30280
// exit ;
30278: GO 31016
// side := GetSide ( depot ) ;
30280: LD_ADDR_VAR 0 9
30284: PUSH
30285: LD_VAR 0 1
30289: PPUSH
30290: CALL_OW 255
30294: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30295: LD_VAR 0 9
30299: PPUSH
30300: LD_VAR 0 2
30304: PPUSH
30305: CALL 29773 0 2
30309: NOT
30310: IFFALSE 30314
// exit ;
30312: GO 31016
// pom := GetBase ( depot ) ;
30314: LD_ADDR_VAR 0 10
30318: PUSH
30319: LD_VAR 0 1
30323: PPUSH
30324: CALL_OW 274
30328: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30329: LD_ADDR_VAR 0 11
30333: PUSH
30334: LD_VAR 0 2
30338: PPUSH
30339: LD_VAR 0 1
30343: PPUSH
30344: CALL_OW 248
30348: PPUSH
30349: CALL_OW 450
30353: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30354: LD_VAR 0 10
30358: PPUSH
30359: LD_INT 1
30361: PPUSH
30362: CALL_OW 275
30366: PUSH
30367: LD_VAR 0 11
30371: PUSH
30372: LD_INT 1
30374: ARRAY
30375: GREATEREQUAL
30376: PUSH
30377: LD_VAR 0 10
30381: PPUSH
30382: LD_INT 2
30384: PPUSH
30385: CALL_OW 275
30389: PUSH
30390: LD_VAR 0 11
30394: PUSH
30395: LD_INT 2
30397: ARRAY
30398: GREATEREQUAL
30399: AND
30400: PUSH
30401: LD_VAR 0 10
30405: PPUSH
30406: LD_INT 3
30408: PPUSH
30409: CALL_OW 275
30413: PUSH
30414: LD_VAR 0 11
30418: PUSH
30419: LD_INT 3
30421: ARRAY
30422: GREATEREQUAL
30423: AND
30424: NOT
30425: IFFALSE 30429
// exit ;
30427: GO 31016
// if GetBType ( depot ) = b_depot then
30429: LD_VAR 0 1
30433: PPUSH
30434: CALL_OW 266
30438: PUSH
30439: LD_INT 0
30441: EQUAL
30442: IFFALSE 30454
// dist := 28 else
30444: LD_ADDR_VAR 0 14
30448: PUSH
30449: LD_INT 28
30451: ST_TO_ADDR
30452: GO 30462
// dist := 36 ;
30454: LD_ADDR_VAR 0 14
30458: PUSH
30459: LD_INT 36
30461: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30462: LD_VAR 0 1
30466: PPUSH
30467: LD_VAR 0 3
30471: PPUSH
30472: LD_VAR 0 4
30476: PPUSH
30477: CALL_OW 297
30481: PUSH
30482: LD_VAR 0 14
30486: GREATER
30487: IFFALSE 30491
// exit ;
30489: GO 31016
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30491: LD_ADDR_VAR 0 12
30495: PUSH
30496: LD_VAR 0 2
30500: PPUSH
30501: LD_VAR 0 3
30505: PPUSH
30506: LD_VAR 0 4
30510: PPUSH
30511: LD_VAR 0 5
30515: PPUSH
30516: LD_VAR 0 1
30520: PPUSH
30521: CALL_OW 248
30525: PPUSH
30526: LD_INT 0
30528: PPUSH
30529: CALL 31021 0 6
30533: ST_TO_ADDR
// if not hexes then
30534: LD_VAR 0 12
30538: NOT
30539: IFFALSE 30543
// exit ;
30541: GO 31016
// hex := GetHexInfo ( x , y ) ;
30543: LD_ADDR_VAR 0 15
30547: PUSH
30548: LD_VAR 0 3
30552: PPUSH
30553: LD_VAR 0 4
30557: PPUSH
30558: CALL_OW 546
30562: ST_TO_ADDR
// if hex [ 1 ] then
30563: LD_VAR 0 15
30567: PUSH
30568: LD_INT 1
30570: ARRAY
30571: IFFALSE 30575
// exit ;
30573: GO 31016
// height := hex [ 2 ] ;
30575: LD_ADDR_VAR 0 13
30579: PUSH
30580: LD_VAR 0 15
30584: PUSH
30585: LD_INT 2
30587: ARRAY
30588: ST_TO_ADDR
// for i = 1 to hexes do
30589: LD_ADDR_VAR 0 7
30593: PUSH
30594: DOUBLE
30595: LD_INT 1
30597: DEC
30598: ST_TO_ADDR
30599: LD_VAR 0 12
30603: PUSH
30604: FOR_TO
30605: IFFALSE 30935
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30607: LD_VAR 0 12
30611: PUSH
30612: LD_VAR 0 7
30616: ARRAY
30617: PUSH
30618: LD_INT 1
30620: ARRAY
30621: PPUSH
30622: LD_VAR 0 12
30626: PUSH
30627: LD_VAR 0 7
30631: ARRAY
30632: PUSH
30633: LD_INT 2
30635: ARRAY
30636: PPUSH
30637: CALL_OW 488
30641: NOT
30642: PUSH
30643: LD_VAR 0 12
30647: PUSH
30648: LD_VAR 0 7
30652: ARRAY
30653: PUSH
30654: LD_INT 1
30656: ARRAY
30657: PPUSH
30658: LD_VAR 0 12
30662: PUSH
30663: LD_VAR 0 7
30667: ARRAY
30668: PUSH
30669: LD_INT 2
30671: ARRAY
30672: PPUSH
30673: CALL_OW 428
30677: PUSH
30678: LD_INT 0
30680: GREATER
30681: OR
30682: PUSH
30683: LD_VAR 0 12
30687: PUSH
30688: LD_VAR 0 7
30692: ARRAY
30693: PUSH
30694: LD_INT 1
30696: ARRAY
30697: PPUSH
30698: LD_VAR 0 12
30702: PUSH
30703: LD_VAR 0 7
30707: ARRAY
30708: PUSH
30709: LD_INT 2
30711: ARRAY
30712: PPUSH
30713: CALL_OW 351
30717: OR
30718: IFFALSE 30724
// exit ;
30720: POP
30721: POP
30722: GO 31016
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30724: LD_ADDR_VAR 0 8
30728: PUSH
30729: LD_VAR 0 12
30733: PUSH
30734: LD_VAR 0 7
30738: ARRAY
30739: PUSH
30740: LD_INT 1
30742: ARRAY
30743: PPUSH
30744: LD_VAR 0 12
30748: PUSH
30749: LD_VAR 0 7
30753: ARRAY
30754: PUSH
30755: LD_INT 2
30757: ARRAY
30758: PPUSH
30759: CALL_OW 546
30763: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30764: LD_VAR 0 8
30768: PUSH
30769: LD_INT 1
30771: ARRAY
30772: PUSH
30773: LD_VAR 0 8
30777: PUSH
30778: LD_INT 2
30780: ARRAY
30781: PUSH
30782: LD_VAR 0 13
30786: PUSH
30787: LD_INT 2
30789: PLUS
30790: GREATER
30791: OR
30792: PUSH
30793: LD_VAR 0 8
30797: PUSH
30798: LD_INT 2
30800: ARRAY
30801: PUSH
30802: LD_VAR 0 13
30806: PUSH
30807: LD_INT 2
30809: MINUS
30810: LESS
30811: OR
30812: PUSH
30813: LD_VAR 0 8
30817: PUSH
30818: LD_INT 3
30820: ARRAY
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: LD_INT 8
30827: PUSH
30828: LD_INT 9
30830: PUSH
30831: LD_INT 10
30833: PUSH
30834: LD_INT 11
30836: PUSH
30837: LD_INT 12
30839: PUSH
30840: LD_INT 13
30842: PUSH
30843: LD_INT 16
30845: PUSH
30846: LD_INT 17
30848: PUSH
30849: LD_INT 18
30851: PUSH
30852: LD_INT 19
30854: PUSH
30855: LD_INT 20
30857: PUSH
30858: LD_INT 21
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: IN
30876: NOT
30877: OR
30878: PUSH
30879: LD_VAR 0 8
30883: PUSH
30884: LD_INT 5
30886: ARRAY
30887: NOT
30888: OR
30889: PUSH
30890: LD_VAR 0 8
30894: PUSH
30895: LD_INT 6
30897: ARRAY
30898: PUSH
30899: LD_INT 1
30901: PUSH
30902: LD_INT 2
30904: PUSH
30905: LD_INT 7
30907: PUSH
30908: LD_INT 9
30910: PUSH
30911: LD_INT 10
30913: PUSH
30914: LD_INT 11
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: IN
30925: NOT
30926: OR
30927: IFFALSE 30933
// exit ;
30929: POP
30930: POP
30931: GO 31016
// end ;
30933: GO 30604
30935: POP
30936: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30937: LD_VAR 0 9
30941: PPUSH
30942: LD_VAR 0 3
30946: PPUSH
30947: LD_VAR 0 4
30951: PPUSH
30952: LD_INT 20
30954: PPUSH
30955: CALL 22939 0 4
30959: PUSH
30960: LD_INT 4
30962: ARRAY
30963: IFFALSE 30967
// exit ;
30965: GO 31016
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30967: LD_VAR 0 2
30971: PUSH
30972: LD_INT 29
30974: PUSH
30975: LD_INT 30
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: IN
30982: PUSH
30983: LD_VAR 0 3
30987: PPUSH
30988: LD_VAR 0 4
30992: PPUSH
30993: LD_VAR 0 9
30997: PPUSH
30998: CALL_OW 440
31002: NOT
31003: AND
31004: IFFALSE 31008
// exit ;
31006: GO 31016
// result := true ;
31008: LD_ADDR_VAR 0 6
31012: PUSH
31013: LD_INT 1
31015: ST_TO_ADDR
// end ;
31016: LD_VAR 0 6
31020: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31021: LD_INT 0
31023: PPUSH
31024: PPUSH
31025: PPUSH
31026: PPUSH
31027: PPUSH
31028: PPUSH
31029: PPUSH
31030: PPUSH
31031: PPUSH
31032: PPUSH
31033: PPUSH
31034: PPUSH
31035: PPUSH
31036: PPUSH
31037: PPUSH
31038: PPUSH
31039: PPUSH
31040: PPUSH
31041: PPUSH
31042: PPUSH
31043: PPUSH
31044: PPUSH
31045: PPUSH
31046: PPUSH
31047: PPUSH
31048: PPUSH
31049: PPUSH
31050: PPUSH
31051: PPUSH
31052: PPUSH
31053: PPUSH
31054: PPUSH
31055: PPUSH
31056: PPUSH
31057: PPUSH
31058: PPUSH
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
31063: PPUSH
31064: PPUSH
31065: PPUSH
31066: PPUSH
31067: PPUSH
31068: PPUSH
31069: PPUSH
31070: PPUSH
31071: PPUSH
31072: PPUSH
31073: PPUSH
31074: PPUSH
31075: PPUSH
31076: PPUSH
31077: PPUSH
31078: PPUSH
31079: PPUSH
31080: PPUSH
// result = [ ] ;
31081: LD_ADDR_VAR 0 7
31085: PUSH
31086: EMPTY
31087: ST_TO_ADDR
// temp_list = [ ] ;
31088: LD_ADDR_VAR 0 9
31092: PUSH
31093: EMPTY
31094: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31095: LD_VAR 0 4
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: LD_INT 2
31108: PUSH
31109: LD_INT 3
31111: PUSH
31112: LD_INT 4
31114: PUSH
31115: LD_INT 5
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: IN
31126: NOT
31127: PUSH
31128: LD_VAR 0 1
31132: PUSH
31133: LD_INT 0
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: IN
31143: PUSH
31144: LD_VAR 0 5
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: LD_INT 2
31154: PUSH
31155: LD_INT 3
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: LIST
31162: IN
31163: NOT
31164: AND
31165: OR
31166: IFFALSE 31170
// exit ;
31168: GO 49561
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31170: LD_VAR 0 1
31174: PUSH
31175: LD_INT 6
31177: PUSH
31178: LD_INT 7
31180: PUSH
31181: LD_INT 8
31183: PUSH
31184: LD_INT 13
31186: PUSH
31187: LD_INT 12
31189: PUSH
31190: LD_INT 15
31192: PUSH
31193: LD_INT 11
31195: PUSH
31196: LD_INT 14
31198: PUSH
31199: LD_INT 10
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: IN
31213: IFFALSE 31223
// btype = b_lab ;
31215: LD_ADDR_VAR 0 1
31219: PUSH
31220: LD_INT 6
31222: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31223: LD_VAR 0 6
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: LIST
31241: IN
31242: NOT
31243: PUSH
31244: LD_VAR 0 1
31248: PUSH
31249: LD_INT 0
31251: PUSH
31252: LD_INT 1
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: LD_INT 3
31260: PUSH
31261: LD_INT 6
31263: PUSH
31264: LD_INT 36
31266: PUSH
31267: LD_INT 4
31269: PUSH
31270: LD_INT 5
31272: PUSH
31273: LD_INT 31
31275: PUSH
31276: LD_INT 32
31278: PUSH
31279: LD_INT 33
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: IN
31295: NOT
31296: PUSH
31297: LD_VAR 0 6
31301: PUSH
31302: LD_INT 1
31304: EQUAL
31305: AND
31306: OR
31307: PUSH
31308: LD_VAR 0 1
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: LD_INT 3
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: IN
31323: NOT
31324: PUSH
31325: LD_VAR 0 6
31329: PUSH
31330: LD_INT 2
31332: EQUAL
31333: AND
31334: OR
31335: IFFALSE 31345
// mode = 0 ;
31337: LD_ADDR_VAR 0 6
31341: PUSH
31342: LD_INT 0
31344: ST_TO_ADDR
// case mode of 0 :
31345: LD_VAR 0 6
31349: PUSH
31350: LD_INT 0
31352: DOUBLE
31353: EQUAL
31354: IFTRUE 31358
31356: GO 42811
31358: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31359: LD_ADDR_VAR 0 11
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 0
31376: PUSH
31377: LD_INT 1
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 1
31387: PUSH
31388: LD_INT 0
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: LD_INT 1
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 0
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: NEG
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: NEG
31429: PUSH
31430: LD_INT 1
31432: NEG
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: LD_INT 2
31444: NEG
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: LD_INT 2
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: LD_INT 2
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 0
31484: PUSH
31485: LD_INT 2
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 1
31494: NEG
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: LD_INT 3
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: LD_INT 3
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: LD_INT 2
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31552: LD_ADDR_VAR 0 12
31556: PUSH
31557: LD_INT 0
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 0
31569: PUSH
31570: LD_INT 1
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 0
31600: PUSH
31601: LD_INT 1
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 1
31610: NEG
31611: PUSH
31612: LD_INT 0
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 1
31621: NEG
31622: PUSH
31623: LD_INT 1
31625: NEG
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 2
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 1
31664: NEG
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 2
31675: NEG
31676: PUSH
31677: LD_INT 0
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 2
31686: NEG
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 2
31698: NEG
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 3
31709: NEG
31710: PUSH
31711: LD_INT 0
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 3
31720: NEG
31721: PUSH
31722: LD_INT 1
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31748: LD_ADDR_VAR 0 13
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: LD_INT 0
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 1
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 0
31796: PUSH
31797: LD_INT 1
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 1
31806: NEG
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: LD_INT 1
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: NEG
31830: PUSH
31831: LD_INT 2
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 2
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 2
31851: PUSH
31852: LD_INT 2
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: LD_INT 2
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 2
31871: NEG
31872: PUSH
31873: LD_INT 1
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 2
31883: NEG
31884: PUSH
31885: LD_INT 2
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 2
31895: NEG
31896: PUSH
31897: LD_INT 3
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 3
31907: NEG
31908: PUSH
31909: LD_INT 2
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 3
31919: NEG
31920: PUSH
31921: LD_INT 3
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31947: LD_ADDR_VAR 0 14
31951: PUSH
31952: LD_INT 0
31954: PUSH
31955: LD_INT 0
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: LD_INT 1
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 1
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: LD_INT 1
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 1
32005: NEG
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 1
32016: NEG
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PUSH
32030: LD_INT 2
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: LD_INT 2
32043: NEG
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 1
32051: PUSH
32052: LD_INT 1
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 1
32062: PUSH
32063: LD_INT 2
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: NEG
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 1
32093: NEG
32094: PUSH
32095: LD_INT 3
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: LD_INT 3
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 1
32116: PUSH
32117: LD_INT 2
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32143: LD_ADDR_VAR 0 15
32147: PUSH
32148: LD_INT 0
32150: PUSH
32151: LD_INT 0
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: LD_INT 1
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 1
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 1
32181: PUSH
32182: LD_INT 1
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 1
32201: NEG
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: LD_INT 1
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: LD_INT 1
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 2
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 2
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 1
32255: NEG
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 2
32266: NEG
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 2
32277: NEG
32278: PUSH
32279: LD_INT 1
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 3
32300: PUSH
32301: LD_INT 0
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 3
32310: PUSH
32311: LD_INT 1
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32336: LD_ADDR_VAR 0 16
32340: PUSH
32341: LD_INT 0
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: LD_INT 1
32356: NEG
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: LD_INT 0
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: LD_INT 1
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: LD_INT 1
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 1
32394: NEG
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 1
32417: NEG
32418: PUSH
32419: LD_INT 2
32421: NEG
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 2
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 2
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 1
32449: PUSH
32450: LD_INT 2
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 2
32459: NEG
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 2
32471: NEG
32472: PUSH
32473: LD_INT 2
32475: NEG
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 3
32483: PUSH
32484: LD_INT 2
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 3
32493: PUSH
32494: LD_INT 3
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: LD_INT 3
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32529: LD_ADDR_VAR 0 17
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 0
32546: PUSH
32547: LD_INT 1
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 1
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 1
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: LD_INT 1
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 1
32587: NEG
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 1
32598: NEG
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 1
32610: NEG
32611: PUSH
32612: LD_INT 2
32614: NEG
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: LD_INT 2
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 2
32644: PUSH
32645: LD_INT 0
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 2
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: LD_INT 2
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: LD_INT 2
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 2
32705: NEG
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 2
32716: NEG
32717: PUSH
32718: LD_INT 1
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: LD_INT 2
32732: NEG
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32759: LD_ADDR_VAR 0 18
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 0
32776: PUSH
32777: LD_INT 1
32779: NEG
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 1
32787: PUSH
32788: LD_INT 0
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 0
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: LD_INT 0
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 1
32828: NEG
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: LD_INT 2
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: LD_INT 2
32855: NEG
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 1
32863: PUSH
32864: LD_INT 1
32866: NEG
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 2
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 2
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 2
32894: PUSH
32895: LD_INT 2
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 1
32904: PUSH
32905: LD_INT 2
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: LD_INT 2
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: NEG
32925: PUSH
32926: LD_INT 1
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 2
32935: NEG
32936: PUSH
32937: LD_INT 0
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 2
32946: NEG
32947: PUSH
32948: LD_INT 1
32950: NEG
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 2
32958: NEG
32959: PUSH
32960: LD_INT 2
32962: NEG
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32989: LD_ADDR_VAR 0 19
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: LD_INT 1
33009: NEG
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: LD_INT 0
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: LD_INT 0
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 1
33070: NEG
33071: PUSH
33072: LD_INT 2
33074: NEG
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: LD_INT 2
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 1
33093: PUSH
33094: LD_INT 1
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 2
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 2
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 2
33124: PUSH
33125: LD_INT 2
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 1
33134: PUSH
33135: LD_INT 2
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: LD_INT 2
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 1
33154: NEG
33155: PUSH
33156: LD_INT 1
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 2
33165: NEG
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 2
33176: NEG
33177: PUSH
33178: LD_INT 1
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 2
33188: NEG
33189: PUSH
33190: LD_INT 2
33192: NEG
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33219: LD_ADDR_VAR 0 20
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: LD_INT 1
33239: NEG
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: LD_INT 0
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 0
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 1
33277: NEG
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 1
33300: NEG
33301: PUSH
33302: LD_INT 2
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: LD_INT 2
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 1
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 2
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 2
33354: PUSH
33355: LD_INT 2
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: LD_INT 2
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 0
33374: PUSH
33375: LD_INT 2
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 1
33384: NEG
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 2
33406: NEG
33407: PUSH
33408: LD_INT 1
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 2
33418: NEG
33419: PUSH
33420: LD_INT 2
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33449: LD_ADDR_VAR 0 21
33453: PUSH
33454: LD_INT 0
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: LD_INT 1
33469: NEG
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 1
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: LD_INT 1
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: LD_INT 1
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 1
33507: NEG
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 1
33518: NEG
33519: PUSH
33520: LD_INT 1
33522: NEG
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 1
33530: NEG
33531: PUSH
33532: LD_INT 2
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: LD_INT 2
33545: NEG
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: LD_INT 1
33556: NEG
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 2
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 2
33574: PUSH
33575: LD_INT 1
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 2
33584: PUSH
33585: LD_INT 2
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: LD_INT 2
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: LD_INT 2
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: NEG
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 2
33625: NEG
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 2
33636: NEG
33637: PUSH
33638: LD_INT 1
33640: NEG
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 2
33648: NEG
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33679: LD_ADDR_VAR 0 22
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: LD_INT 0
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 0
33696: PUSH
33697: LD_INT 1
33699: NEG
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: LD_INT 0
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 1
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 1
33748: NEG
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 1
33760: NEG
33761: PUSH
33762: LD_INT 2
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 0
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 2
33804: PUSH
33805: LD_INT 1
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 2
33814: PUSH
33815: LD_INT 2
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: LD_INT 2
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 0
33834: PUSH
33835: LD_INT 2
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 1
33844: NEG
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 2
33855: NEG
33856: PUSH
33857: LD_INT 0
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 2
33866: NEG
33867: PUSH
33868: LD_INT 1
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 2
33878: NEG
33879: PUSH
33880: LD_INT 2
33882: NEG
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33909: LD_ADDR_VAR 0 23
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: LD_INT 0
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 1
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: LD_INT 1
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 1
33978: NEG
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 1
33990: NEG
33991: PUSH
33992: LD_INT 2
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 0
34002: PUSH
34003: LD_INT 2
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 2
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 2
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 2
34044: PUSH
34045: LD_INT 2
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: LD_INT 2
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 0
34064: PUSH
34065: LD_INT 2
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 1
34074: NEG
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 2
34085: NEG
34086: PUSH
34087: LD_INT 0
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 2
34096: NEG
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 2
34108: NEG
34109: PUSH
34110: LD_INT 2
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 2
34120: NEG
34121: PUSH
34122: LD_INT 3
34124: NEG
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 1
34132: NEG
34133: PUSH
34134: LD_INT 3
34136: NEG
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: LD_INT 2
34147: NEG
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 2
34155: PUSH
34156: LD_INT 1
34158: NEG
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34189: LD_ADDR_VAR 0 24
34193: PUSH
34194: LD_INT 0
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: LD_INT 1
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: LD_INT 1
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 0
34237: PUSH
34238: LD_INT 1
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 1
34258: NEG
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 1
34270: NEG
34271: PUSH
34272: LD_INT 2
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: LD_INT 2
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 2
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 2
34324: PUSH
34325: LD_INT 2
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: LD_INT 2
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: LD_INT 2
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: LD_INT 1
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 2
34365: NEG
34366: PUSH
34367: LD_INT 0
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 2
34376: NEG
34377: PUSH
34378: LD_INT 1
34380: NEG
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 2
34388: NEG
34389: PUSH
34390: LD_INT 2
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: LD_INT 2
34403: NEG
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 2
34411: PUSH
34412: LD_INT 1
34414: NEG
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 3
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 3
34432: PUSH
34433: LD_INT 2
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34465: LD_ADDR_VAR 0 25
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 1
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 1
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 0
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: LD_INT 2
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 0
34558: PUSH
34559: LD_INT 2
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 1
34569: PUSH
34570: LD_INT 1
34572: NEG
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 2
34580: PUSH
34581: LD_INT 0
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 2
34590: PUSH
34591: LD_INT 1
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: LD_INT 2
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 0
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 1
34630: NEG
34631: PUSH
34632: LD_INT 1
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 2
34641: NEG
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 2
34652: NEG
34653: PUSH
34654: LD_INT 1
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 2
34664: NEG
34665: PUSH
34666: LD_INT 2
34668: NEG
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 3
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 3
34686: PUSH
34687: LD_INT 2
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: LD_INT 3
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: PUSH
34707: LD_INT 3
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34739: LD_ADDR_VAR 0 26
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: LD_INT 2
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 2
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 2
34926: NEG
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: NEG
34939: PUSH
34940: LD_INT 2
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 2
34950: PUSH
34951: LD_INT 3
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: LD_INT 3
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: LD_INT 2
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 2
34981: NEG
34982: PUSH
34983: LD_INT 1
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35015: LD_ADDR_VAR 0 27
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 1
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: LD_INT 1
35088: NEG
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 1
35096: NEG
35097: PUSH
35098: LD_INT 2
35100: NEG
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: LD_INT 2
35111: NEG
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: LD_INT 1
35122: NEG
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 2
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 2
35140: PUSH
35141: LD_INT 1
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: LD_INT 2
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 1
35160: PUSH
35161: LD_INT 2
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: LD_INT 2
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: LD_INT 1
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 2
35191: NEG
35192: PUSH
35193: LD_INT 0
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 2
35202: NEG
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 2
35214: NEG
35215: PUSH
35216: LD_INT 2
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: LD_INT 2
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 2
35237: NEG
35238: PUSH
35239: LD_INT 1
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 3
35248: NEG
35249: PUSH
35250: LD_INT 1
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 3
35260: NEG
35261: PUSH
35262: LD_INT 2
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35295: LD_ADDR_VAR 0 28
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: LD_INT 0
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: LD_INT 1
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: LD_INT 0
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 1
35333: PUSH
35334: LD_INT 1
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: LD_INT 1
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: LD_INT 1
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: NEG
35377: PUSH
35378: LD_INT 2
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 0
35388: PUSH
35389: LD_INT 2
35391: NEG
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: PUSH
35400: LD_INT 1
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 2
35410: PUSH
35411: LD_INT 0
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: LD_INT 1
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 2
35430: PUSH
35431: LD_INT 2
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: LD_INT 2
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: LD_INT 2
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 1
35460: NEG
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 2
35471: NEG
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: NEG
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 2
35494: NEG
35495: PUSH
35496: LD_INT 2
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 2
35506: NEG
35507: PUSH
35508: LD_INT 3
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: NEG
35519: PUSH
35520: LD_INT 3
35522: NEG
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 3
35530: NEG
35531: PUSH
35532: LD_INT 1
35534: NEG
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 3
35542: NEG
35543: PUSH
35544: LD_INT 2
35546: NEG
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35577: LD_ADDR_VAR 0 29
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 0
35594: PUSH
35595: LD_INT 1
35597: NEG
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: LD_INT 0
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 0
35625: PUSH
35626: LD_INT 1
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 1
35635: NEG
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: LD_INT 2
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 2
35673: NEG
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 2
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 2
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: LD_INT 2
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 0
35722: PUSH
35723: LD_INT 2
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 1
35732: NEG
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 2
35743: NEG
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 2
35755: NEG
35756: PUSH
35757: LD_INT 2
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 2
35767: NEG
35768: PUSH
35769: LD_INT 3
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 2
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 3
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: LD_INT 3
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 1
35810: NEG
35811: PUSH
35812: LD_INT 2
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 3
35821: NEG
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35856: LD_ADDR_VAR 0 30
35860: PUSH
35861: LD_INT 0
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: LD_INT 1
35876: NEG
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: LD_INT 1
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: LD_INT 1
35929: NEG
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: LD_INT 2
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 0
35949: PUSH
35950: LD_INT 2
35952: NEG
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 2
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 2
35981: PUSH
35982: LD_INT 1
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 2
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: LD_INT 2
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 2
36022: NEG
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 2
36033: NEG
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 1
36045: NEG
36046: PUSH
36047: LD_INT 3
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: LD_INT 2
36060: NEG
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 3
36068: PUSH
36069: LD_INT 2
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: LD_INT 3
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 2
36088: NEG
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 3
36099: NEG
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36134: LD_ADDR_VAR 0 31
36138: PUSH
36139: LD_INT 0
36141: PUSH
36142: LD_INT 0
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 1
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 1
36192: NEG
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: LD_INT 1
36207: NEG
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 1
36215: NEG
36216: PUSH
36217: LD_INT 2
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 2
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 2
36258: PUSH
36259: LD_INT 2
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 1
36268: PUSH
36269: LD_INT 2
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 0
36278: PUSH
36279: LD_INT 2
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 2
36299: NEG
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 2
36311: NEG
36312: PUSH
36313: LD_INT 2
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 2
36323: NEG
36324: PUSH
36325: LD_INT 3
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 2
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 3
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: PUSH
36357: LD_INT 3
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: NEG
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 3
36377: NEG
36378: PUSH
36379: LD_INT 2
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36412: LD_ADDR_VAR 0 32
36416: PUSH
36417: LD_INT 0
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 1
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 1
36450: PUSH
36451: LD_INT 1
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 0
36460: PUSH
36461: LD_INT 1
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 1
36470: NEG
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 1
36481: NEG
36482: PUSH
36483: LD_INT 1
36485: NEG
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 1
36493: NEG
36494: PUSH
36495: LD_INT 2
36497: NEG
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: LD_INT 2
36508: NEG
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 1
36516: PUSH
36517: LD_INT 1
36519: NEG
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 2
36527: PUSH
36528: LD_INT 1
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 2
36537: PUSH
36538: LD_INT 2
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 1
36547: PUSH
36548: LD_INT 2
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: LD_INT 2
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: NEG
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 2
36578: NEG
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 2
36589: NEG
36590: PUSH
36591: LD_INT 1
36593: NEG
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 1
36601: NEG
36602: PUSH
36603: LD_INT 3
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: PUSH
36614: LD_INT 2
36616: NEG
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 3
36624: PUSH
36625: LD_INT 2
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: LD_INT 3
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 2
36644: NEG
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 3
36655: NEG
36656: PUSH
36657: LD_INT 1
36659: NEG
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36690: LD_ADDR_VAR 0 33
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: LD_INT 2
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 2
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 2
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: LD_INT 2
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 0
36824: PUSH
36825: LD_INT 2
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 1
36834: NEG
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 2
36845: NEG
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 2
36856: NEG
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 2
36868: NEG
36869: PUSH
36870: LD_INT 2
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 2
36880: NEG
36881: PUSH
36882: LD_INT 3
36884: NEG
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 2
36892: PUSH
36893: LD_INT 1
36895: NEG
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 3
36903: PUSH
36904: LD_INT 1
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 1
36913: PUSH
36914: LD_INT 3
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 3
36934: NEG
36935: PUSH
36936: LD_INT 2
36938: NEG
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36969: LD_ADDR_VAR 0 34
36973: PUSH
36974: LD_INT 0
36976: PUSH
36977: LD_INT 0
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 1
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 1
37007: PUSH
37008: LD_INT 1
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: LD_INT 1
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: LD_INT 1
37042: NEG
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 1
37050: NEG
37051: PUSH
37052: LD_INT 2
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: LD_INT 2
37065: NEG
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 2
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: LD_INT 2
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 1
37104: PUSH
37105: LD_INT 2
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 2
37125: NEG
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 2
37136: NEG
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 2
37148: NEG
37149: PUSH
37150: LD_INT 2
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 1
37160: NEG
37161: PUSH
37162: LD_INT 3
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 3
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 2
37193: PUSH
37194: LD_INT 3
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 2
37203: NEG
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 3
37214: NEG
37215: PUSH
37216: LD_INT 1
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37249: LD_ADDR_VAR 0 35
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 2
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 2
37340: NEG
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37361: LD_ADDR_VAR 0 36
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 1
37442: NEG
37443: PUSH
37444: LD_INT 2
37446: NEG
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 1
37454: PUSH
37455: LD_INT 2
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37473: LD_ADDR_VAR 0 37
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 0
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: NEG
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37585: LD_ADDR_VAR 0 38
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: LD_INT 1
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 1
37643: NEG
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 1
37654: NEG
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 2
37676: NEG
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37697: LD_ADDR_VAR 0 39
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: LD_INT 1
37717: NEG
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: LD_INT 0
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: LD_INT 1
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: NEG
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 1
37778: NEG
37779: PUSH
37780: LD_INT 2
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: LD_INT 2
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37809: LD_ADDR_VAR 0 40
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: LD_INT 0
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 0
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: LD_INT 0
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 1
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: LD_INT 1
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 1
37867: NEG
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 1
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37921: LD_ADDR_VAR 0 41
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: LD_INT 1
37941: NEG
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 1
37959: PUSH
37960: LD_INT 1
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: LD_INT 1
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 1
37979: NEG
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: NEG
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 1
38002: NEG
38003: PUSH
38004: LD_INT 2
38006: NEG
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: PUSH
38015: LD_INT 1
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 2
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 2
38035: PUSH
38036: LD_INT 1
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: LD_INT 2
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: LD_INT 2
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 2
38076: NEG
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 2
38087: NEG
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 2
38099: NEG
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 2
38111: NEG
38112: PUSH
38113: LD_INT 3
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 2
38123: PUSH
38124: LD_INT 1
38126: NEG
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 3
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 3
38144: PUSH
38145: LD_INT 1
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 3
38154: PUSH
38155: LD_INT 2
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: LD_INT 3
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: LD_INT 3
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 2
38184: NEG
38185: PUSH
38186: LD_INT 1
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 3
38195: NEG
38196: PUSH
38197: LD_INT 0
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 3
38206: NEG
38207: PUSH
38208: LD_INT 1
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 3
38218: NEG
38219: PUSH
38220: LD_INT 2
38222: NEG
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 3
38230: NEG
38231: PUSH
38232: LD_INT 3
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38271: LD_ADDR_VAR 0 42
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: NEG
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: LD_INT 2
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: LD_INT 2
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: LD_INT 1
38378: NEG
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: LD_INT 2
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 1
38406: PUSH
38407: LD_INT 2
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 0
38416: PUSH
38417: LD_INT 2
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 2
38437: NEG
38438: PUSH
38439: LD_INT 1
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 2
38449: NEG
38450: PUSH
38451: LD_INT 2
38453: NEG
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 2
38461: NEG
38462: PUSH
38463: LD_INT 3
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: LD_INT 3
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: LD_INT 3
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: LD_INT 2
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 3
38507: PUSH
38508: LD_INT 2
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 3
38517: PUSH
38518: LD_INT 3
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: PUSH
38528: LD_INT 3
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: LD_INT 3
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 0
38547: PUSH
38548: LD_INT 3
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: NEG
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 3
38568: NEG
38569: PUSH
38570: LD_INT 2
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 3
38580: NEG
38581: PUSH
38582: LD_INT 3
38584: NEG
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38621: LD_ADDR_VAR 0 43
38625: PUSH
38626: LD_INT 0
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 0
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: LD_INT 0
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 1
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: LD_INT 1
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 1
38679: NEG
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: LD_INT 1
38694: NEG
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 1
38702: NEG
38703: PUSH
38704: LD_INT 2
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: LD_INT 2
38717: NEG
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 1
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 2
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 2
38746: PUSH
38747: LD_INT 1
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: LD_INT 2
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: LD_INT 2
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 2
38787: NEG
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 2
38798: NEG
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 1
38810: NEG
38811: PUSH
38812: LD_INT 3
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 3
38825: NEG
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: LD_INT 2
38836: NEG
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 2
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 3
38855: PUSH
38856: LD_INT 0
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 3
38865: PUSH
38866: LD_INT 1
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: LD_INT 3
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 3
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: LD_INT 2
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 2
38906: NEG
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 3
38917: NEG
38918: PUSH
38919: LD_INT 0
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 3
38928: NEG
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38969: LD_ADDR_VAR 0 44
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: LD_INT 1
38989: NEG
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: LD_INT 1
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: LD_INT 2
39054: NEG
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: LD_INT 1
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: PUSH
39094: LD_INT 2
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: LD_INT 2
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: NEG
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 2
39135: NEG
39136: PUSH
39137: LD_INT 1
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 2
39147: NEG
39148: PUSH
39149: LD_INT 2
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 2
39159: NEG
39160: PUSH
39161: LD_INT 3
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 3
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 3
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 3
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 3
39212: PUSH
39213: LD_INT 3
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 2
39222: PUSH
39223: LD_INT 3
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: LD_INT 1
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 3
39243: NEG
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 3
39254: NEG
39255: PUSH
39256: LD_INT 1
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 3
39266: NEG
39267: PUSH
39268: LD_INT 2
39270: NEG
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 3
39278: NEG
39279: PUSH
39280: LD_INT 3
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39319: LD_ADDR_VAR 0 45
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: LD_INT 1
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: LD_INT 2
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: LD_INT 1
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 2
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: LD_INT 2
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: LD_INT 2
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: NEG
39475: PUSH
39476: LD_INT 1
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 2
39485: NEG
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 2
39497: NEG
39498: PUSH
39499: LD_INT 2
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: LD_INT 3
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: NEG
39522: PUSH
39523: LD_INT 3
39525: NEG
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: LD_INT 3
39536: NEG
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: LD_INT 2
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 3
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 3
39565: PUSH
39566: LD_INT 3
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 2
39575: PUSH
39576: LD_INT 3
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: LD_INT 3
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: LD_INT 3
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 1
39605: NEG
39606: PUSH
39607: LD_INT 2
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 3
39616: NEG
39617: PUSH
39618: LD_INT 2
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 3
39628: NEG
39629: PUSH
39630: LD_INT 3
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39669: LD_ADDR_VAR 0 46
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: LD_INT 1
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: NEG
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 2
39765: NEG
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 2
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: LD_INT 2
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: LD_INT 1
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 2
39835: NEG
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 2
39846: NEG
39847: PUSH
39848: LD_INT 1
39850: NEG
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: LD_INT 3
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: LD_INT 3
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 2
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 3
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 3
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: LD_INT 3
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: LD_INT 3
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: LD_INT 2
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 3
39965: NEG
39966: PUSH
39967: LD_INT 0
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 3
39976: NEG
39977: PUSH
39978: LD_INT 1
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40017: LD_ADDR_VAR 0 47
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: NEG
40099: PUSH
40100: LD_INT 2
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: LD_INT 2
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: NEG
40145: PUSH
40146: LD_INT 2
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40168: LD_ADDR_VAR 0 48
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: LD_INT 1
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: LD_INT 2
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: LD_INT 2
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40315: LD_ADDR_VAR 0 49
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: LD_INT 1
40335: NEG
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: LD_INT 1
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: LD_INT 1
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 2
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 2
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 2
40427: PUSH
40428: LD_INT 2
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: LD_INT 2
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40459: LD_ADDR_VAR 0 50
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 0
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 2
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 2
40550: PUSH
40551: LD_INT 2
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: LD_INT 2
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: LD_INT 2
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 1
40580: NEG
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40603: LD_ADDR_VAR 0 51
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: LD_INT 2
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 2
40726: NEG
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40750: LD_ADDR_VAR 0 52
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: LD_INT 2
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 2
40854: NEG
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 2
40865: NEG
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 2
40877: NEG
40878: PUSH
40879: LD_INT 2
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40901: LD_ADDR_VAR 0 53
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 0
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: NEG
40983: PUSH
40984: LD_INT 2
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: LD_INT 2
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 2
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 2
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 2
41077: NEG
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: NEG
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 2
41100: NEG
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41131: LD_ADDR_VAR 0 54
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: LD_INT 2
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: LD_INT 2
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 2
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: LD_INT 2
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: LD_INT 2
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 2
41307: NEG
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 2
41318: NEG
41319: PUSH
41320: LD_INT 1
41322: NEG
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: NEG
41331: PUSH
41332: LD_INT 2
41334: NEG
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41361: LD_ADDR_VAR 0 55
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: NEG
41431: PUSH
41432: LD_INT 1
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: LD_INT 2
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: LD_INT 2
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 2
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 2
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 2
41496: PUSH
41497: LD_INT 2
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: LD_INT 2
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 2
41548: NEG
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: NEG
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41591: LD_ADDR_VAR 0 56
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: LD_INT 2
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: LD_INT 2
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 2
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: LD_INT 2
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: LD_INT 2
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: LD_INT 2
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 2
41767: NEG
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 2
41778: NEG
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: NEG
41791: PUSH
41792: LD_INT 2
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41821: LD_ADDR_VAR 0 57
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: LD_INT 2
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 2
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 2
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 2
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: NEG
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 2
42020: NEG
42021: PUSH
42022: LD_INT 2
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42051: LD_ADDR_VAR 0 58
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: NEG
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: LD_INT 2
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: LD_INT 2
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: LD_INT 2
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: NEG
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 2
42227: NEG
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 2
42238: NEG
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 2
42250: NEG
42251: PUSH
42252: LD_INT 2
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42281: LD_ADDR_VAR 0 59
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42369: LD_ADDR_VAR 0 60
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42457: LD_ADDR_VAR 0 61
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: LD_INT 1
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42545: LD_ADDR_VAR 0 62
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 1
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42633: LD_ADDR_VAR 0 63
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 1
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: NEG
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42721: LD_ADDR_VAR 0 64
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: ST_TO_ADDR
// end ; 1 :
42809: GO 48706
42811: LD_INT 1
42813: DOUBLE
42814: EQUAL
42815: IFTRUE 42819
42817: GO 45442
42819: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42820: LD_ADDR_VAR 0 11
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: LD_INT 3
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: LD_INT 3
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: LIST
42863: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42864: LD_ADDR_VAR 0 12
42868: PUSH
42869: LD_INT 2
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 3
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 3
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: LIST
42904: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42905: LD_ADDR_VAR 0 13
42909: PUSH
42910: LD_INT 3
42912: PUSH
42913: LD_INT 2
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 3
42922: PUSH
42923: LD_INT 3
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: LD_INT 3
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42945: LD_ADDR_VAR 0 14
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: LD_INT 3
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: LD_INT 3
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: LD_INT 2
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42986: LD_ADDR_VAR 0 15
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 3
43004: NEG
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 3
43015: NEG
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: LIST
43029: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43030: LD_ADDR_VAR 0 16
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PUSH
43039: LD_INT 3
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 3
43049: NEG
43050: PUSH
43051: LD_INT 2
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 3
43061: NEG
43062: PUSH
43063: LD_INT 3
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: LIST
43075: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43076: LD_ADDR_VAR 0 17
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: LD_INT 3
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 3
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43120: LD_ADDR_VAR 0 18
43124: PUSH
43125: LD_INT 2
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 3
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 3
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: LIST
43160: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43161: LD_ADDR_VAR 0 19
43165: PUSH
43166: LD_INT 3
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 3
43178: PUSH
43179: LD_INT 3
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: LD_INT 3
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: LIST
43200: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43201: LD_ADDR_VAR 0 20
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: LD_INT 3
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: LD_INT 3
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: LD_INT 2
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: LIST
43241: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43242: LD_ADDR_VAR 0 21
43246: PUSH
43247: LD_INT 2
43249: NEG
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 3
43260: NEG
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 3
43271: NEG
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: LIST
43285: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43286: LD_ADDR_VAR 0 22
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: LD_INT 3
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 3
43305: NEG
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 3
43317: NEG
43318: PUSH
43319: LD_INT 3
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: LIST
43331: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43332: LD_ADDR_VAR 0 23
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 3
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: LD_INT 4
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: LD_INT 3
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: LIST
43375: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43376: LD_ADDR_VAR 0 24
43380: PUSH
43381: LD_INT 3
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 3
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 4
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: LIST
43416: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43417: LD_ADDR_VAR 0 25
43421: PUSH
43422: LD_INT 3
43424: PUSH
43425: LD_INT 3
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 4
43434: PUSH
43435: LD_INT 3
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 3
43444: PUSH
43445: LD_INT 4
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: LIST
43456: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43457: LD_ADDR_VAR 0 26
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: LD_INT 4
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: LD_INT 3
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43498: LD_ADDR_VAR 0 27
43502: PUSH
43503: LD_INT 3
43505: NEG
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 3
43516: NEG
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 4
43527: NEG
43528: PUSH
43529: LD_INT 1
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: LIST
43541: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43542: LD_ADDR_VAR 0 28
43546: PUSH
43547: LD_INT 3
43549: NEG
43550: PUSH
43551: LD_INT 3
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 3
43561: NEG
43562: PUSH
43563: LD_INT 4
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 4
43573: NEG
43574: PUSH
43575: LD_INT 3
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43588: LD_ADDR_VAR 0 29
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: LD_INT 3
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: LD_INT 3
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 2
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 4
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: LD_INT 4
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: LD_INT 3
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: LD_INT 5
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: LD_INT 5
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: LD_INT 4
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: LD_INT 6
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 6
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: LD_INT 5
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43743: LD_ADDR_VAR 0 30
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 3
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 3
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 3
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 4
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 4
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 4
43812: PUSH
43813: LD_INT 1
43815: NEG
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 5
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 5
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 5
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 6
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 6
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43886: LD_ADDR_VAR 0 31
43890: PUSH
43891: LD_INT 3
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 3
43903: PUSH
43904: LD_INT 3
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: LD_INT 3
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 4
43923: PUSH
43924: LD_INT 3
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 4
43933: PUSH
43934: LD_INT 4
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 3
43943: PUSH
43944: LD_INT 4
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 5
43953: PUSH
43954: LD_INT 4
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 5
43963: PUSH
43964: LD_INT 5
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 4
43973: PUSH
43974: LD_INT 5
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 6
43983: PUSH
43984: LD_INT 5
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 6
43993: PUSH
43994: LD_INT 6
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 5
44003: PUSH
44004: LD_INT 6
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44025: LD_ADDR_VAR 0 32
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: LD_INT 3
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: LD_INT 3
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: LD_INT 4
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 4
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: LD_INT 3
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: LD_INT 5
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: LD_INT 5
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: LD_INT 4
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: LD_INT 6
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: LD_INT 6
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: LD_INT 5
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44168: LD_ADDR_VAR 0 33
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 3
44186: NEG
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 3
44197: NEG
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 3
44209: NEG
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 4
44220: NEG
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 4
44231: NEG
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 4
44243: NEG
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 5
44254: NEG
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 5
44265: NEG
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 5
44277: NEG
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 6
44288: NEG
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 6
44299: NEG
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44323: LD_ADDR_VAR 0 34
44327: PUSH
44328: LD_INT 2
44330: NEG
44331: PUSH
44332: LD_INT 3
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 3
44342: NEG
44343: PUSH
44344: LD_INT 2
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 3
44354: NEG
44355: PUSH
44356: LD_INT 3
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 3
44366: NEG
44367: PUSH
44368: LD_INT 4
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 4
44378: NEG
44379: PUSH
44380: LD_INT 3
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 4
44390: NEG
44391: PUSH
44392: LD_INT 4
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 4
44402: NEG
44403: PUSH
44404: LD_INT 5
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 5
44414: NEG
44415: PUSH
44416: LD_INT 4
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 5
44426: NEG
44427: PUSH
44428: LD_INT 5
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 5
44438: NEG
44439: PUSH
44440: LD_INT 6
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 6
44450: NEG
44451: PUSH
44452: LD_INT 5
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 6
44462: NEG
44463: PUSH
44464: LD_INT 6
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44486: LD_ADDR_VAR 0 41
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: LD_INT 3
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: LD_INT 2
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: LIST
44529: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44530: LD_ADDR_VAR 0 42
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 2
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 3
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44571: LD_ADDR_VAR 0 43
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 3
44588: PUSH
44589: LD_INT 2
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: LD_INT 3
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: LIST
44610: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44611: LD_ADDR_VAR 0 44
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: LD_INT 2
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 3
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: LIST
44651: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44652: LD_ADDR_VAR 0 45
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 3
44681: NEG
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44696: LD_ADDR_VAR 0 46
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: NEG
44716: PUSH
44717: LD_INT 3
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 3
44727: NEG
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: LIST
44741: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44742: LD_ADDR_VAR 0 47
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: LD_INT 3
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: LD_INT 3
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44775: LD_ADDR_VAR 0 48
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44806: LD_ADDR_VAR 0 49
44810: PUSH
44811: LD_INT 3
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 3
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44835: LD_ADDR_VAR 0 50
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: LD_INT 3
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: LD_INT 3
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44864: LD_ADDR_VAR 0 51
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44895: LD_ADDR_VAR 0 52
44899: PUSH
44900: LD_INT 3
44902: NEG
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 3
44914: NEG
44915: PUSH
44916: LD_INT 2
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44928: LD_ADDR_VAR 0 53
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: LD_INT 3
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: LD_INT 3
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: LIST
44971: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44972: LD_ADDR_VAR 0 54
44976: PUSH
44977: LD_INT 2
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 3
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 3
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: LIST
45012: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45013: LD_ADDR_VAR 0 55
45017: PUSH
45018: LD_INT 3
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 3
45030: PUSH
45031: LD_INT 3
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: PUSH
45041: LD_INT 3
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45053: LD_ADDR_VAR 0 56
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: LD_INT 3
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 3
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: LIST
45093: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45094: LD_ADDR_VAR 0 57
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 3
45112: NEG
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 3
45123: NEG
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: LIST
45137: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45138: LD_ADDR_VAR 0 58
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: LD_INT 3
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 3
45157: NEG
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 3
45169: NEG
45170: PUSH
45171: LD_INT 3
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: LIST
45183: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45184: LD_ADDR_VAR 0 59
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: LD_INT 2
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 2
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: LIST
45227: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45228: LD_ADDR_VAR 0 60
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 2
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: LIST
45268: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45269: LD_ADDR_VAR 0 61
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: LIST
45308: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45309: LD_ADDR_VAR 0 62
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: LIST
45349: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45350: LD_ADDR_VAR 0 63
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45394: LD_ADDR_VAR 0 64
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: LIST
45439: ST_TO_ADDR
// end ; 2 :
45440: GO 48706
45442: LD_INT 2
45444: DOUBLE
45445: EQUAL
45446: IFTRUE 45450
45448: GO 48705
45450: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45451: LD_ADDR_VAR 0 29
45455: PUSH
45456: LD_INT 4
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 4
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 5
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 5
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 4
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 3
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 3
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 3
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 5
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 3
45551: PUSH
45552: LD_INT 3
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 3
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 4
45571: PUSH
45572: LD_INT 3
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 4
45581: PUSH
45582: LD_INT 4
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 3
45591: PUSH
45592: LD_INT 4
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: LD_INT 3
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 4
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: LD_INT 4
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: LD_INT 4
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 3
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: LD_INT 4
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: LD_INT 5
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 5
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: LD_INT 4
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: LD_INT 5
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: NEG
45724: PUSH
45725: LD_INT 3
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 3
45734: NEG
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 3
45745: NEG
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: NEG
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 2
45768: NEG
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 3
45779: NEG
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 4
45790: NEG
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 4
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 4
45813: NEG
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: LD_INT 2
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 4
45836: NEG
45837: PUSH
45838: LD_INT 4
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 4
45848: NEG
45849: PUSH
45850: LD_INT 5
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 3
45860: NEG
45861: PUSH
45862: LD_INT 4
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 3
45872: NEG
45873: PUSH
45874: LD_INT 3
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 4
45884: NEG
45885: PUSH
45886: LD_INT 3
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 5
45896: NEG
45897: PUSH
45898: LD_INT 4
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 5
45908: NEG
45909: PUSH
45910: LD_INT 5
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 3
45920: NEG
45921: PUSH
45922: LD_INT 5
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 5
45932: NEG
45933: PUSH
45934: LD_INT 3
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45989: LD_ADDR_VAR 0 30
45993: PUSH
45994: LD_INT 4
45996: PUSH
45997: LD_INT 4
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 4
46006: PUSH
46007: LD_INT 3
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 5
46016: PUSH
46017: LD_INT 4
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 5
46026: PUSH
46027: LD_INT 5
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 4
46036: PUSH
46037: LD_INT 5
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 3
46046: PUSH
46047: LD_INT 4
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 3
46056: PUSH
46057: LD_INT 3
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 5
46066: PUSH
46067: LD_INT 3
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 3
46076: PUSH
46077: LD_INT 5
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 3
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: LD_INT 3
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 4
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: LD_INT 4
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: LD_INT 3
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: LD_INT 2
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: PUSH
46159: LD_INT 4
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: LD_INT 2
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 4
46179: NEG
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 4
46190: NEG
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 3
46202: NEG
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 3
46213: NEG
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 4
46224: NEG
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 5
46235: NEG
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 5
46246: NEG
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 5
46258: NEG
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 3
46270: NEG
46271: PUSH
46272: LD_INT 2
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 3
46281: NEG
46282: PUSH
46283: LD_INT 3
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 3
46293: NEG
46294: PUSH
46295: LD_INT 4
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: LD_INT 3
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 3
46329: NEG
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 4
46341: NEG
46342: PUSH
46343: LD_INT 3
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 4
46353: NEG
46354: PUSH
46355: LD_INT 4
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: LD_INT 4
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 4
46377: NEG
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: LD_INT 4
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 5
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 4
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 3
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: LD_INT 3
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 4
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: LD_INT 5
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: LD_INT 3
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: NEG
46480: PUSH
46481: LD_INT 5
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46536: LD_ADDR_VAR 0 31
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: LD_INT 4
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 3
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 4
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 5
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 5
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: LD_INT 4
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 3
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 5
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 3
46636: NEG
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 3
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 2
46659: NEG
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 3
46681: NEG
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 4
46692: NEG
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 4
46703: NEG
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 4
46715: NEG
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 2
46727: NEG
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 4
46738: NEG
46739: PUSH
46740: LD_INT 4
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 4
46750: NEG
46751: PUSH
46752: LD_INT 5
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 3
46762: NEG
46763: PUSH
46764: LD_INT 4
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 3
46774: NEG
46775: PUSH
46776: LD_INT 3
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 4
46786: NEG
46787: PUSH
46788: LD_INT 3
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 5
46798: NEG
46799: PUSH
46800: LD_INT 4
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 5
46810: NEG
46811: PUSH
46812: LD_INT 5
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 3
46822: NEG
46823: PUSH
46824: LD_INT 5
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 5
46834: NEG
46835: PUSH
46836: LD_INT 3
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 3
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 4
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: LD_INT 3
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: LD_INT 3
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 4
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: LD_INT 2
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 2
46936: NEG
46937: PUSH
46938: LD_INT 4
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 4
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 4
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 5
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 5
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 4
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 3
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 3
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 3
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 5
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47086: LD_ADDR_VAR 0 32
47090: PUSH
47091: LD_INT 4
47093: NEG
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 4
47104: NEG
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 3
47116: NEG
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 3
47127: NEG
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 4
47138: NEG
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 5
47149: NEG
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 5
47160: NEG
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 5
47172: NEG
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 3
47184: NEG
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 3
47195: NEG
47196: PUSH
47197: LD_INT 3
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 3
47207: NEG
47208: PUSH
47209: LD_INT 4
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: LD_INT 3
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 3
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 4
47255: NEG
47256: PUSH
47257: LD_INT 3
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 4
47267: NEG
47268: PUSH
47269: LD_INT 4
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: LD_INT 4
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 4
47291: NEG
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 4
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 5
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 4
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: LD_INT 3
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: LD_INT 3
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 4
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 5
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: LD_INT 3
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: LD_INT 5
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 3
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 3
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 4
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 4
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 3
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 4
47488: PUSH
47489: LD_INT 2
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 4
47498: PUSH
47499: LD_INT 4
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 4
47508: PUSH
47509: LD_INT 3
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 5
47518: PUSH
47519: LD_INT 4
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 5
47528: PUSH
47529: LD_INT 5
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 4
47538: PUSH
47539: LD_INT 5
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 3
47548: PUSH
47549: LD_INT 4
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 3
47558: PUSH
47559: LD_INT 3
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 5
47568: PUSH
47569: LD_INT 3
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 3
47578: PUSH
47579: LD_INT 5
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47633: LD_ADDR_VAR 0 33
47637: PUSH
47638: LD_INT 4
47640: NEG
47641: PUSH
47642: LD_INT 4
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 4
47652: NEG
47653: PUSH
47654: LD_INT 5
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 3
47664: NEG
47665: PUSH
47666: LD_INT 4
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 3
47676: NEG
47677: PUSH
47678: LD_INT 3
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 4
47688: NEG
47689: PUSH
47690: LD_INT 3
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 5
47700: NEG
47701: PUSH
47702: LD_INT 4
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 5
47712: NEG
47713: PUSH
47714: LD_INT 5
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 3
47724: NEG
47725: PUSH
47726: LD_INT 5
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 5
47736: NEG
47737: PUSH
47738: LD_INT 3
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 3
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: LD_INT 4
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: LD_INT 3
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 3
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: LD_INT 4
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 2
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 2
47838: NEG
47839: PUSH
47840: LD_INT 4
47842: NEG
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 4
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 4
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 5
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 5
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 4
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 3
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 3
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 3
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 5
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 3
47943: PUSH
47944: LD_INT 3
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 3
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 4
47963: PUSH
47964: LD_INT 3
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 4
47973: PUSH
47974: LD_INT 4
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 3
47983: PUSH
47984: LD_INT 4
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: LD_INT 3
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 4
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: LD_INT 4
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: LD_INT 4
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: LD_INT 3
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: LD_INT 4
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 5
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 5
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 4
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: LD_INT 3
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 5
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: LD_INT 3
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48171: LD_ADDR_VAR 0 34
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: LD_INT 4
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: LD_INT 5
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 4
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: LD_INT 3
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: LD_INT 3
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: LD_INT 4
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: LD_INT 5
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: LD_INT 3
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: LD_INT 5
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 3
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 3
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 4
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 4
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 3
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 4
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 4
48373: PUSH
48374: LD_INT 4
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 4
48383: PUSH
48384: LD_INT 3
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 5
48393: PUSH
48394: LD_INT 4
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 5
48403: PUSH
48404: LD_INT 5
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 4
48413: PUSH
48414: LD_INT 5
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 3
48423: PUSH
48424: LD_INT 4
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 3
48433: PUSH
48434: LD_INT 3
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 5
48443: PUSH
48444: LD_INT 3
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 3
48453: PUSH
48454: LD_INT 5
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: LD_INT 3
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: LD_INT 4
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 4
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 3
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: LD_INT 4
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: NEG
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 4
48556: NEG
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 4
48567: NEG
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 3
48579: NEG
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 3
48590: NEG
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 4
48601: NEG
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 5
48612: NEG
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 5
48623: NEG
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 5
48635: NEG
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 3
48647: NEG
48648: PUSH
48649: LD_INT 2
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: ST_TO_ADDR
// end ; end ;
48703: GO 48706
48705: POP
// case btype of b_depot , b_warehouse :
48706: LD_VAR 0 1
48710: PUSH
48711: LD_INT 0
48713: DOUBLE
48714: EQUAL
48715: IFTRUE 48725
48717: LD_INT 1
48719: DOUBLE
48720: EQUAL
48721: IFTRUE 48725
48723: GO 48926
48725: POP
// case nation of nation_american :
48726: LD_VAR 0 5
48730: PUSH
48731: LD_INT 1
48733: DOUBLE
48734: EQUAL
48735: IFTRUE 48739
48737: GO 48795
48739: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48740: LD_ADDR_VAR 0 9
48744: PUSH
48745: LD_VAR 0 11
48749: PUSH
48750: LD_VAR 0 12
48754: PUSH
48755: LD_VAR 0 13
48759: PUSH
48760: LD_VAR 0 14
48764: PUSH
48765: LD_VAR 0 15
48769: PUSH
48770: LD_VAR 0 16
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: PUSH
48783: LD_VAR 0 4
48787: PUSH
48788: LD_INT 1
48790: PLUS
48791: ARRAY
48792: ST_TO_ADDR
48793: GO 48924
48795: LD_INT 2
48797: DOUBLE
48798: EQUAL
48799: IFTRUE 48803
48801: GO 48859
48803: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48804: LD_ADDR_VAR 0 9
48808: PUSH
48809: LD_VAR 0 17
48813: PUSH
48814: LD_VAR 0 18
48818: PUSH
48819: LD_VAR 0 19
48823: PUSH
48824: LD_VAR 0 20
48828: PUSH
48829: LD_VAR 0 21
48833: PUSH
48834: LD_VAR 0 22
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: PUSH
48847: LD_VAR 0 4
48851: PUSH
48852: LD_INT 1
48854: PLUS
48855: ARRAY
48856: ST_TO_ADDR
48857: GO 48924
48859: LD_INT 3
48861: DOUBLE
48862: EQUAL
48863: IFTRUE 48867
48865: GO 48923
48867: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48868: LD_ADDR_VAR 0 9
48872: PUSH
48873: LD_VAR 0 23
48877: PUSH
48878: LD_VAR 0 24
48882: PUSH
48883: LD_VAR 0 25
48887: PUSH
48888: LD_VAR 0 26
48892: PUSH
48893: LD_VAR 0 27
48897: PUSH
48898: LD_VAR 0 28
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: PUSH
48911: LD_VAR 0 4
48915: PUSH
48916: LD_INT 1
48918: PLUS
48919: ARRAY
48920: ST_TO_ADDR
48921: GO 48924
48923: POP
48924: GO 49479
48926: LD_INT 2
48928: DOUBLE
48929: EQUAL
48930: IFTRUE 48940
48932: LD_INT 3
48934: DOUBLE
48935: EQUAL
48936: IFTRUE 48940
48938: GO 48996
48940: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48941: LD_ADDR_VAR 0 9
48945: PUSH
48946: LD_VAR 0 29
48950: PUSH
48951: LD_VAR 0 30
48955: PUSH
48956: LD_VAR 0 31
48960: PUSH
48961: LD_VAR 0 32
48965: PUSH
48966: LD_VAR 0 33
48970: PUSH
48971: LD_VAR 0 34
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: PUSH
48984: LD_VAR 0 4
48988: PUSH
48989: LD_INT 1
48991: PLUS
48992: ARRAY
48993: ST_TO_ADDR
48994: GO 49479
48996: LD_INT 16
48998: DOUBLE
48999: EQUAL
49000: IFTRUE 49058
49002: LD_INT 17
49004: DOUBLE
49005: EQUAL
49006: IFTRUE 49058
49008: LD_INT 18
49010: DOUBLE
49011: EQUAL
49012: IFTRUE 49058
49014: LD_INT 19
49016: DOUBLE
49017: EQUAL
49018: IFTRUE 49058
49020: LD_INT 22
49022: DOUBLE
49023: EQUAL
49024: IFTRUE 49058
49026: LD_INT 20
49028: DOUBLE
49029: EQUAL
49030: IFTRUE 49058
49032: LD_INT 21
49034: DOUBLE
49035: EQUAL
49036: IFTRUE 49058
49038: LD_INT 23
49040: DOUBLE
49041: EQUAL
49042: IFTRUE 49058
49044: LD_INT 24
49046: DOUBLE
49047: EQUAL
49048: IFTRUE 49058
49050: LD_INT 25
49052: DOUBLE
49053: EQUAL
49054: IFTRUE 49058
49056: GO 49114
49058: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49059: LD_ADDR_VAR 0 9
49063: PUSH
49064: LD_VAR 0 35
49068: PUSH
49069: LD_VAR 0 36
49073: PUSH
49074: LD_VAR 0 37
49078: PUSH
49079: LD_VAR 0 38
49083: PUSH
49084: LD_VAR 0 39
49088: PUSH
49089: LD_VAR 0 40
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: PUSH
49102: LD_VAR 0 4
49106: PUSH
49107: LD_INT 1
49109: PLUS
49110: ARRAY
49111: ST_TO_ADDR
49112: GO 49479
49114: LD_INT 6
49116: DOUBLE
49117: EQUAL
49118: IFTRUE 49170
49120: LD_INT 7
49122: DOUBLE
49123: EQUAL
49124: IFTRUE 49170
49126: LD_INT 8
49128: DOUBLE
49129: EQUAL
49130: IFTRUE 49170
49132: LD_INT 13
49134: DOUBLE
49135: EQUAL
49136: IFTRUE 49170
49138: LD_INT 12
49140: DOUBLE
49141: EQUAL
49142: IFTRUE 49170
49144: LD_INT 15
49146: DOUBLE
49147: EQUAL
49148: IFTRUE 49170
49150: LD_INT 11
49152: DOUBLE
49153: EQUAL
49154: IFTRUE 49170
49156: LD_INT 14
49158: DOUBLE
49159: EQUAL
49160: IFTRUE 49170
49162: LD_INT 10
49164: DOUBLE
49165: EQUAL
49166: IFTRUE 49170
49168: GO 49226
49170: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49171: LD_ADDR_VAR 0 9
49175: PUSH
49176: LD_VAR 0 41
49180: PUSH
49181: LD_VAR 0 42
49185: PUSH
49186: LD_VAR 0 43
49190: PUSH
49191: LD_VAR 0 44
49195: PUSH
49196: LD_VAR 0 45
49200: PUSH
49201: LD_VAR 0 46
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: PUSH
49214: LD_VAR 0 4
49218: PUSH
49219: LD_INT 1
49221: PLUS
49222: ARRAY
49223: ST_TO_ADDR
49224: GO 49479
49226: LD_INT 36
49228: DOUBLE
49229: EQUAL
49230: IFTRUE 49234
49232: GO 49290
49234: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49235: LD_ADDR_VAR 0 9
49239: PUSH
49240: LD_VAR 0 47
49244: PUSH
49245: LD_VAR 0 48
49249: PUSH
49250: LD_VAR 0 49
49254: PUSH
49255: LD_VAR 0 50
49259: PUSH
49260: LD_VAR 0 51
49264: PUSH
49265: LD_VAR 0 52
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: PUSH
49278: LD_VAR 0 4
49282: PUSH
49283: LD_INT 1
49285: PLUS
49286: ARRAY
49287: ST_TO_ADDR
49288: GO 49479
49290: LD_INT 4
49292: DOUBLE
49293: EQUAL
49294: IFTRUE 49316
49296: LD_INT 5
49298: DOUBLE
49299: EQUAL
49300: IFTRUE 49316
49302: LD_INT 34
49304: DOUBLE
49305: EQUAL
49306: IFTRUE 49316
49308: LD_INT 37
49310: DOUBLE
49311: EQUAL
49312: IFTRUE 49316
49314: GO 49372
49316: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49317: LD_ADDR_VAR 0 9
49321: PUSH
49322: LD_VAR 0 53
49326: PUSH
49327: LD_VAR 0 54
49331: PUSH
49332: LD_VAR 0 55
49336: PUSH
49337: LD_VAR 0 56
49341: PUSH
49342: LD_VAR 0 57
49346: PUSH
49347: LD_VAR 0 58
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: PUSH
49360: LD_VAR 0 4
49364: PUSH
49365: LD_INT 1
49367: PLUS
49368: ARRAY
49369: ST_TO_ADDR
49370: GO 49479
49372: LD_INT 31
49374: DOUBLE
49375: EQUAL
49376: IFTRUE 49422
49378: LD_INT 32
49380: DOUBLE
49381: EQUAL
49382: IFTRUE 49422
49384: LD_INT 33
49386: DOUBLE
49387: EQUAL
49388: IFTRUE 49422
49390: LD_INT 27
49392: DOUBLE
49393: EQUAL
49394: IFTRUE 49422
49396: LD_INT 26
49398: DOUBLE
49399: EQUAL
49400: IFTRUE 49422
49402: LD_INT 28
49404: DOUBLE
49405: EQUAL
49406: IFTRUE 49422
49408: LD_INT 29
49410: DOUBLE
49411: EQUAL
49412: IFTRUE 49422
49414: LD_INT 30
49416: DOUBLE
49417: EQUAL
49418: IFTRUE 49422
49420: GO 49478
49422: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49423: LD_ADDR_VAR 0 9
49427: PUSH
49428: LD_VAR 0 59
49432: PUSH
49433: LD_VAR 0 60
49437: PUSH
49438: LD_VAR 0 61
49442: PUSH
49443: LD_VAR 0 62
49447: PUSH
49448: LD_VAR 0 63
49452: PUSH
49453: LD_VAR 0 64
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: PUSH
49466: LD_VAR 0 4
49470: PUSH
49471: LD_INT 1
49473: PLUS
49474: ARRAY
49475: ST_TO_ADDR
49476: GO 49479
49478: POP
// temp_list2 = [ ] ;
49479: LD_ADDR_VAR 0 10
49483: PUSH
49484: EMPTY
49485: ST_TO_ADDR
// for i in temp_list do
49486: LD_ADDR_VAR 0 8
49490: PUSH
49491: LD_VAR 0 9
49495: PUSH
49496: FOR_IN
49497: IFFALSE 49549
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49499: LD_ADDR_VAR 0 10
49503: PUSH
49504: LD_VAR 0 10
49508: PUSH
49509: LD_VAR 0 8
49513: PUSH
49514: LD_INT 1
49516: ARRAY
49517: PUSH
49518: LD_VAR 0 2
49522: PLUS
49523: PUSH
49524: LD_VAR 0 8
49528: PUSH
49529: LD_INT 2
49531: ARRAY
49532: PUSH
49533: LD_VAR 0 3
49537: PLUS
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: EMPTY
49544: LIST
49545: ADD
49546: ST_TO_ADDR
49547: GO 49496
49549: POP
49550: POP
// result = temp_list2 ;
49551: LD_ADDR_VAR 0 7
49555: PUSH
49556: LD_VAR 0 10
49560: ST_TO_ADDR
// end ;
49561: LD_VAR 0 7
49565: RET
// export function EnemyInRange ( unit , dist ) ; begin
49566: LD_INT 0
49568: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49569: LD_ADDR_VAR 0 3
49573: PUSH
49574: LD_VAR 0 1
49578: PPUSH
49579: CALL_OW 255
49583: PPUSH
49584: LD_VAR 0 1
49588: PPUSH
49589: CALL_OW 250
49593: PPUSH
49594: LD_VAR 0 1
49598: PPUSH
49599: CALL_OW 251
49603: PPUSH
49604: LD_VAR 0 2
49608: PPUSH
49609: CALL 22939 0 4
49613: PUSH
49614: LD_INT 4
49616: ARRAY
49617: ST_TO_ADDR
// end ;
49618: LD_VAR 0 3
49622: RET
// export function PlayerSeeMe ( unit ) ; begin
49623: LD_INT 0
49625: PPUSH
// result := See ( your_side , unit ) ;
49626: LD_ADDR_VAR 0 2
49630: PUSH
49631: LD_OWVAR 2
49635: PPUSH
49636: LD_VAR 0 1
49640: PPUSH
49641: CALL_OW 292
49645: ST_TO_ADDR
// end ;
49646: LD_VAR 0 2
49650: RET
// export function ReverseDir ( unit ) ; begin
49651: LD_INT 0
49653: PPUSH
// if not unit then
49654: LD_VAR 0 1
49658: NOT
49659: IFFALSE 49663
// exit ;
49661: GO 49686
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49663: LD_ADDR_VAR 0 2
49667: PUSH
49668: LD_VAR 0 1
49672: PPUSH
49673: CALL_OW 254
49677: PUSH
49678: LD_INT 3
49680: PLUS
49681: PUSH
49682: LD_INT 6
49684: MOD
49685: ST_TO_ADDR
// end ;
49686: LD_VAR 0 2
49690: RET
// export function ReverseArray ( array ) ; var i ; begin
49691: LD_INT 0
49693: PPUSH
49694: PPUSH
// if not array then
49695: LD_VAR 0 1
49699: NOT
49700: IFFALSE 49704
// exit ;
49702: GO 49759
// result := [ ] ;
49704: LD_ADDR_VAR 0 2
49708: PUSH
49709: EMPTY
49710: ST_TO_ADDR
// for i := array downto 1 do
49711: LD_ADDR_VAR 0 3
49715: PUSH
49716: DOUBLE
49717: LD_VAR 0 1
49721: INC
49722: ST_TO_ADDR
49723: LD_INT 1
49725: PUSH
49726: FOR_DOWNTO
49727: IFFALSE 49757
// result := Join ( result , array [ i ] ) ;
49729: LD_ADDR_VAR 0 2
49733: PUSH
49734: LD_VAR 0 2
49738: PPUSH
49739: LD_VAR 0 1
49743: PUSH
49744: LD_VAR 0 3
49748: ARRAY
49749: PPUSH
49750: CALL 54424 0 2
49754: ST_TO_ADDR
49755: GO 49726
49757: POP
49758: POP
// end ;
49759: LD_VAR 0 2
49763: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49764: LD_INT 0
49766: PPUSH
49767: PPUSH
49768: PPUSH
49769: PPUSH
49770: PPUSH
49771: PPUSH
// if not unit or not hexes then
49772: LD_VAR 0 1
49776: NOT
49777: PUSH
49778: LD_VAR 0 2
49782: NOT
49783: OR
49784: IFFALSE 49788
// exit ;
49786: GO 49911
// dist := 9999 ;
49788: LD_ADDR_VAR 0 5
49792: PUSH
49793: LD_INT 9999
49795: ST_TO_ADDR
// for i = 1 to hexes do
49796: LD_ADDR_VAR 0 4
49800: PUSH
49801: DOUBLE
49802: LD_INT 1
49804: DEC
49805: ST_TO_ADDR
49806: LD_VAR 0 2
49810: PUSH
49811: FOR_TO
49812: IFFALSE 49899
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49814: LD_ADDR_VAR 0 6
49818: PUSH
49819: LD_VAR 0 1
49823: PPUSH
49824: LD_VAR 0 2
49828: PUSH
49829: LD_VAR 0 4
49833: ARRAY
49834: PUSH
49835: LD_INT 1
49837: ARRAY
49838: PPUSH
49839: LD_VAR 0 2
49843: PUSH
49844: LD_VAR 0 4
49848: ARRAY
49849: PUSH
49850: LD_INT 2
49852: ARRAY
49853: PPUSH
49854: CALL_OW 297
49858: ST_TO_ADDR
// if tdist < dist then
49859: LD_VAR 0 6
49863: PUSH
49864: LD_VAR 0 5
49868: LESS
49869: IFFALSE 49897
// begin hex := hexes [ i ] ;
49871: LD_ADDR_VAR 0 8
49875: PUSH
49876: LD_VAR 0 2
49880: PUSH
49881: LD_VAR 0 4
49885: ARRAY
49886: ST_TO_ADDR
// dist := tdist ;
49887: LD_ADDR_VAR 0 5
49891: PUSH
49892: LD_VAR 0 6
49896: ST_TO_ADDR
// end ; end ;
49897: GO 49811
49899: POP
49900: POP
// result := hex ;
49901: LD_ADDR_VAR 0 3
49905: PUSH
49906: LD_VAR 0 8
49910: ST_TO_ADDR
// end ;
49911: LD_VAR 0 3
49915: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49916: LD_INT 0
49918: PPUSH
49919: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49920: LD_VAR 0 1
49924: NOT
49925: PUSH
49926: LD_VAR 0 1
49930: PUSH
49931: LD_INT 21
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 23
49943: PUSH
49944: LD_INT 2
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PPUSH
49955: CALL_OW 69
49959: IN
49960: NOT
49961: OR
49962: IFFALSE 49966
// exit ;
49964: GO 50013
// for i = 1 to 3 do
49966: LD_ADDR_VAR 0 3
49970: PUSH
49971: DOUBLE
49972: LD_INT 1
49974: DEC
49975: ST_TO_ADDR
49976: LD_INT 3
49978: PUSH
49979: FOR_TO
49980: IFFALSE 50011
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49982: LD_VAR 0 1
49986: PPUSH
49987: CALL_OW 250
49991: PPUSH
49992: LD_VAR 0 1
49996: PPUSH
49997: CALL_OW 251
50001: PPUSH
50002: LD_INT 1
50004: PPUSH
50005: CALL_OW 453
50009: GO 49979
50011: POP
50012: POP
// end ;
50013: LD_VAR 0 2
50017: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50018: LD_INT 0
50020: PPUSH
50021: PPUSH
50022: PPUSH
50023: PPUSH
50024: PPUSH
50025: PPUSH
// if not unit or not enemy_unit then
50026: LD_VAR 0 1
50030: NOT
50031: PUSH
50032: LD_VAR 0 2
50036: NOT
50037: OR
50038: IFFALSE 50042
// exit ;
50040: GO 50509
// if GetLives ( i ) < 250 then
50042: LD_VAR 0 4
50046: PPUSH
50047: CALL_OW 256
50051: PUSH
50052: LD_INT 250
50054: LESS
50055: IFFALSE 50068
// begin ComAutodestruct ( i ) ;
50057: LD_VAR 0 4
50061: PPUSH
50062: CALL 49916 0 1
// exit ;
50066: GO 50509
// end ; x := GetX ( enemy_unit ) ;
50068: LD_ADDR_VAR 0 7
50072: PUSH
50073: LD_VAR 0 2
50077: PPUSH
50078: CALL_OW 250
50082: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50083: LD_ADDR_VAR 0 8
50087: PUSH
50088: LD_VAR 0 2
50092: PPUSH
50093: CALL_OW 251
50097: ST_TO_ADDR
// if not x or not y then
50098: LD_VAR 0 7
50102: NOT
50103: PUSH
50104: LD_VAR 0 8
50108: NOT
50109: OR
50110: IFFALSE 50114
// exit ;
50112: GO 50509
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50114: LD_ADDR_VAR 0 6
50118: PUSH
50119: LD_VAR 0 7
50123: PPUSH
50124: LD_INT 0
50126: PPUSH
50127: LD_INT 4
50129: PPUSH
50130: CALL_OW 272
50134: PUSH
50135: LD_VAR 0 8
50139: PPUSH
50140: LD_INT 0
50142: PPUSH
50143: LD_INT 4
50145: PPUSH
50146: CALL_OW 273
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_VAR 0 7
50159: PPUSH
50160: LD_INT 1
50162: PPUSH
50163: LD_INT 4
50165: PPUSH
50166: CALL_OW 272
50170: PUSH
50171: LD_VAR 0 8
50175: PPUSH
50176: LD_INT 1
50178: PPUSH
50179: LD_INT 4
50181: PPUSH
50182: CALL_OW 273
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_VAR 0 7
50195: PPUSH
50196: LD_INT 2
50198: PPUSH
50199: LD_INT 4
50201: PPUSH
50202: CALL_OW 272
50206: PUSH
50207: LD_VAR 0 8
50211: PPUSH
50212: LD_INT 2
50214: PPUSH
50215: LD_INT 4
50217: PPUSH
50218: CALL_OW 273
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_VAR 0 7
50231: PPUSH
50232: LD_INT 3
50234: PPUSH
50235: LD_INT 4
50237: PPUSH
50238: CALL_OW 272
50242: PUSH
50243: LD_VAR 0 8
50247: PPUSH
50248: LD_INT 3
50250: PPUSH
50251: LD_INT 4
50253: PPUSH
50254: CALL_OW 273
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_VAR 0 7
50267: PPUSH
50268: LD_INT 4
50270: PPUSH
50271: LD_INT 4
50273: PPUSH
50274: CALL_OW 272
50278: PUSH
50279: LD_VAR 0 8
50283: PPUSH
50284: LD_INT 4
50286: PPUSH
50287: LD_INT 4
50289: PPUSH
50290: CALL_OW 273
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_VAR 0 7
50303: PPUSH
50304: LD_INT 5
50306: PPUSH
50307: LD_INT 4
50309: PPUSH
50310: CALL_OW 272
50314: PUSH
50315: LD_VAR 0 8
50319: PPUSH
50320: LD_INT 5
50322: PPUSH
50323: LD_INT 4
50325: PPUSH
50326: CALL_OW 273
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: ST_TO_ADDR
// for i = tmp downto 1 do
50343: LD_ADDR_VAR 0 4
50347: PUSH
50348: DOUBLE
50349: LD_VAR 0 6
50353: INC
50354: ST_TO_ADDR
50355: LD_INT 1
50357: PUSH
50358: FOR_DOWNTO
50359: IFFALSE 50460
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50361: LD_VAR 0 6
50365: PUSH
50366: LD_VAR 0 4
50370: ARRAY
50371: PUSH
50372: LD_INT 1
50374: ARRAY
50375: PPUSH
50376: LD_VAR 0 6
50380: PUSH
50381: LD_VAR 0 4
50385: ARRAY
50386: PUSH
50387: LD_INT 2
50389: ARRAY
50390: PPUSH
50391: CALL_OW 488
50395: NOT
50396: PUSH
50397: LD_VAR 0 6
50401: PUSH
50402: LD_VAR 0 4
50406: ARRAY
50407: PUSH
50408: LD_INT 1
50410: ARRAY
50411: PPUSH
50412: LD_VAR 0 6
50416: PUSH
50417: LD_VAR 0 4
50421: ARRAY
50422: PUSH
50423: LD_INT 2
50425: ARRAY
50426: PPUSH
50427: CALL_OW 428
50431: PUSH
50432: LD_INT 0
50434: NONEQUAL
50435: OR
50436: IFFALSE 50458
// tmp := Delete ( tmp , i ) ;
50438: LD_ADDR_VAR 0 6
50442: PUSH
50443: LD_VAR 0 6
50447: PPUSH
50448: LD_VAR 0 4
50452: PPUSH
50453: CALL_OW 3
50457: ST_TO_ADDR
50458: GO 50358
50460: POP
50461: POP
// j := GetClosestHex ( unit , tmp ) ;
50462: LD_ADDR_VAR 0 5
50466: PUSH
50467: LD_VAR 0 1
50471: PPUSH
50472: LD_VAR 0 6
50476: PPUSH
50477: CALL 49764 0 2
50481: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50482: LD_VAR 0 1
50486: PPUSH
50487: LD_VAR 0 5
50491: PUSH
50492: LD_INT 1
50494: ARRAY
50495: PPUSH
50496: LD_VAR 0 5
50500: PUSH
50501: LD_INT 2
50503: ARRAY
50504: PPUSH
50505: CALL_OW 111
// end ;
50509: LD_VAR 0 3
50513: RET
// export function PrepareApemanSoldier ( ) ; begin
50514: LD_INT 0
50516: PPUSH
// uc_nation := 0 ;
50517: LD_ADDR_OWVAR 21
50521: PUSH
50522: LD_INT 0
50524: ST_TO_ADDR
// hc_sex := sex_male ;
50525: LD_ADDR_OWVAR 27
50529: PUSH
50530: LD_INT 1
50532: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50533: LD_ADDR_OWVAR 28
50537: PUSH
50538: LD_INT 15
50540: ST_TO_ADDR
// hc_gallery :=  ;
50541: LD_ADDR_OWVAR 33
50545: PUSH
50546: LD_STRING 
50548: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50549: LD_ADDR_OWVAR 31
50553: PUSH
50554: LD_INT 0
50556: PPUSH
50557: LD_INT 3
50559: PPUSH
50560: CALL_OW 12
50564: PUSH
50565: LD_INT 0
50567: PPUSH
50568: LD_INT 3
50570: PPUSH
50571: CALL_OW 12
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: ST_TO_ADDR
// end ;
50588: LD_VAR 0 1
50592: RET
// export function PrepareApemanEngineer ( ) ; begin
50593: LD_INT 0
50595: PPUSH
// uc_nation := 0 ;
50596: LD_ADDR_OWVAR 21
50600: PUSH
50601: LD_INT 0
50603: ST_TO_ADDR
// hc_sex := sex_male ;
50604: LD_ADDR_OWVAR 27
50608: PUSH
50609: LD_INT 1
50611: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50612: LD_ADDR_OWVAR 28
50616: PUSH
50617: LD_INT 16
50619: ST_TO_ADDR
// hc_gallery :=  ;
50620: LD_ADDR_OWVAR 33
50624: PUSH
50625: LD_STRING 
50627: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50628: LD_ADDR_OWVAR 31
50632: PUSH
50633: LD_INT 0
50635: PPUSH
50636: LD_INT 3
50638: PPUSH
50639: CALL_OW 12
50643: PUSH
50644: LD_INT 0
50646: PPUSH
50647: LD_INT 3
50649: PPUSH
50650: CALL_OW 12
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: ST_TO_ADDR
// end ;
50667: LD_VAR 0 1
50671: RET
// export function PrepareApeman ( agressivity ) ; begin
50672: LD_INT 0
50674: PPUSH
// uc_side := 0 ;
50675: LD_ADDR_OWVAR 20
50679: PUSH
50680: LD_INT 0
50682: ST_TO_ADDR
// uc_nation := 0 ;
50683: LD_ADDR_OWVAR 21
50687: PUSH
50688: LD_INT 0
50690: ST_TO_ADDR
// hc_sex := sex_male ;
50691: LD_ADDR_OWVAR 27
50695: PUSH
50696: LD_INT 1
50698: ST_TO_ADDR
// hc_class := class_apeman ;
50699: LD_ADDR_OWVAR 28
50703: PUSH
50704: LD_INT 12
50706: ST_TO_ADDR
// hc_gallery :=  ;
50707: LD_ADDR_OWVAR 33
50711: PUSH
50712: LD_STRING 
50714: ST_TO_ADDR
// if agressivity = 0 then
50715: LD_VAR 0 1
50719: PUSH
50720: LD_INT 0
50722: EQUAL
50723: IFFALSE 50735
// hc_agressivity := 0 else
50725: LD_ADDR_OWVAR 35
50729: PUSH
50730: LD_INT 0
50732: ST_TO_ADDR
50733: GO 50756
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50735: LD_ADDR_OWVAR 35
50739: PUSH
50740: LD_VAR 0 1
50744: NEG
50745: PPUSH
50746: LD_VAR 0 1
50750: PPUSH
50751: CALL_OW 12
50755: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50756: LD_ADDR_OWVAR 31
50760: PUSH
50761: LD_INT 0
50763: PPUSH
50764: LD_INT 3
50766: PPUSH
50767: CALL_OW 12
50771: PUSH
50772: LD_INT 0
50774: PPUSH
50775: LD_INT 3
50777: PPUSH
50778: CALL_OW 12
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: ST_TO_ADDR
// end ;
50795: LD_VAR 0 2
50799: RET
// export function PrepareTiger ( agressivity ) ; begin
50800: LD_INT 0
50802: PPUSH
// uc_side := 0 ;
50803: LD_ADDR_OWVAR 20
50807: PUSH
50808: LD_INT 0
50810: ST_TO_ADDR
// uc_nation := 0 ;
50811: LD_ADDR_OWVAR 21
50815: PUSH
50816: LD_INT 0
50818: ST_TO_ADDR
// hc_class := class_tiger ;
50819: LD_ADDR_OWVAR 28
50823: PUSH
50824: LD_INT 14
50826: ST_TO_ADDR
// hc_gallery :=  ;
50827: LD_ADDR_OWVAR 33
50831: PUSH
50832: LD_STRING 
50834: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50835: LD_ADDR_OWVAR 35
50839: PUSH
50840: LD_VAR 0 1
50844: NEG
50845: PPUSH
50846: LD_VAR 0 1
50850: PPUSH
50851: CALL_OW 12
50855: ST_TO_ADDR
// end ;
50856: LD_VAR 0 2
50860: RET
// export function PrepareEnchidna ( ) ; begin
50861: LD_INT 0
50863: PPUSH
// uc_side := 0 ;
50864: LD_ADDR_OWVAR 20
50868: PUSH
50869: LD_INT 0
50871: ST_TO_ADDR
// uc_nation := 0 ;
50872: LD_ADDR_OWVAR 21
50876: PUSH
50877: LD_INT 0
50879: ST_TO_ADDR
// hc_class := class_baggie ;
50880: LD_ADDR_OWVAR 28
50884: PUSH
50885: LD_INT 13
50887: ST_TO_ADDR
// hc_gallery :=  ;
50888: LD_ADDR_OWVAR 33
50892: PUSH
50893: LD_STRING 
50895: ST_TO_ADDR
// end ;
50896: LD_VAR 0 1
50900: RET
// export function PrepareFrog ( ) ; begin
50901: LD_INT 0
50903: PPUSH
// uc_side := 0 ;
50904: LD_ADDR_OWVAR 20
50908: PUSH
50909: LD_INT 0
50911: ST_TO_ADDR
// uc_nation := 0 ;
50912: LD_ADDR_OWVAR 21
50916: PUSH
50917: LD_INT 0
50919: ST_TO_ADDR
// hc_class := class_frog ;
50920: LD_ADDR_OWVAR 28
50924: PUSH
50925: LD_INT 19
50927: ST_TO_ADDR
// hc_gallery :=  ;
50928: LD_ADDR_OWVAR 33
50932: PUSH
50933: LD_STRING 
50935: ST_TO_ADDR
// end ;
50936: LD_VAR 0 1
50940: RET
// export function PrepareFish ( ) ; begin
50941: LD_INT 0
50943: PPUSH
// uc_side := 0 ;
50944: LD_ADDR_OWVAR 20
50948: PUSH
50949: LD_INT 0
50951: ST_TO_ADDR
// uc_nation := 0 ;
50952: LD_ADDR_OWVAR 21
50956: PUSH
50957: LD_INT 0
50959: ST_TO_ADDR
// hc_class := class_fish ;
50960: LD_ADDR_OWVAR 28
50964: PUSH
50965: LD_INT 20
50967: ST_TO_ADDR
// hc_gallery :=  ;
50968: LD_ADDR_OWVAR 33
50972: PUSH
50973: LD_STRING 
50975: ST_TO_ADDR
// end ;
50976: LD_VAR 0 1
50980: RET
// export function PrepareBird ( ) ; begin
50981: LD_INT 0
50983: PPUSH
// uc_side := 0 ;
50984: LD_ADDR_OWVAR 20
50988: PUSH
50989: LD_INT 0
50991: ST_TO_ADDR
// uc_nation := 0 ;
50992: LD_ADDR_OWVAR 21
50996: PUSH
50997: LD_INT 0
50999: ST_TO_ADDR
// hc_class := class_phororhacos ;
51000: LD_ADDR_OWVAR 28
51004: PUSH
51005: LD_INT 18
51007: ST_TO_ADDR
// hc_gallery :=  ;
51008: LD_ADDR_OWVAR 33
51012: PUSH
51013: LD_STRING 
51015: ST_TO_ADDR
// end ;
51016: LD_VAR 0 1
51020: RET
// export function PrepareHorse ( ) ; begin
51021: LD_INT 0
51023: PPUSH
// uc_side := 0 ;
51024: LD_ADDR_OWVAR 20
51028: PUSH
51029: LD_INT 0
51031: ST_TO_ADDR
// uc_nation := 0 ;
51032: LD_ADDR_OWVAR 21
51036: PUSH
51037: LD_INT 0
51039: ST_TO_ADDR
// hc_class := class_horse ;
51040: LD_ADDR_OWVAR 28
51044: PUSH
51045: LD_INT 21
51047: ST_TO_ADDR
// hc_gallery :=  ;
51048: LD_ADDR_OWVAR 33
51052: PUSH
51053: LD_STRING 
51055: ST_TO_ADDR
// end ;
51056: LD_VAR 0 1
51060: RET
// export function PrepareMastodont ( ) ; begin
51061: LD_INT 0
51063: PPUSH
// uc_side := 0 ;
51064: LD_ADDR_OWVAR 20
51068: PUSH
51069: LD_INT 0
51071: ST_TO_ADDR
// uc_nation := 0 ;
51072: LD_ADDR_OWVAR 21
51076: PUSH
51077: LD_INT 0
51079: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51080: LD_ADDR_OWVAR 37
51084: PUSH
51085: LD_INT 31
51087: ST_TO_ADDR
// vc_control := control_rider ;
51088: LD_ADDR_OWVAR 38
51092: PUSH
51093: LD_INT 4
51095: ST_TO_ADDR
// end ;
51096: LD_VAR 0 1
51100: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51101: LD_INT 0
51103: PPUSH
51104: PPUSH
51105: PPUSH
// uc_side = 0 ;
51106: LD_ADDR_OWVAR 20
51110: PUSH
51111: LD_INT 0
51113: ST_TO_ADDR
// uc_nation = 0 ;
51114: LD_ADDR_OWVAR 21
51118: PUSH
51119: LD_INT 0
51121: ST_TO_ADDR
// InitHc_All ( ) ;
51122: CALL_OW 584
// InitVc ;
51126: CALL_OW 20
// if mastodonts then
51130: LD_VAR 0 6
51134: IFFALSE 51201
// for i = 1 to mastodonts do
51136: LD_ADDR_VAR 0 11
51140: PUSH
51141: DOUBLE
51142: LD_INT 1
51144: DEC
51145: ST_TO_ADDR
51146: LD_VAR 0 6
51150: PUSH
51151: FOR_TO
51152: IFFALSE 51199
// begin vc_chassis := 31 ;
51154: LD_ADDR_OWVAR 37
51158: PUSH
51159: LD_INT 31
51161: ST_TO_ADDR
// vc_control := control_rider ;
51162: LD_ADDR_OWVAR 38
51166: PUSH
51167: LD_INT 4
51169: ST_TO_ADDR
// animal := CreateVehicle ;
51170: LD_ADDR_VAR 0 12
51174: PUSH
51175: CALL_OW 45
51179: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51180: LD_VAR 0 12
51184: PPUSH
51185: LD_VAR 0 8
51189: PPUSH
51190: LD_INT 0
51192: PPUSH
51193: CALL 53329 0 3
// end ;
51197: GO 51151
51199: POP
51200: POP
// if horses then
51201: LD_VAR 0 5
51205: IFFALSE 51272
// for i = 1 to horses do
51207: LD_ADDR_VAR 0 11
51211: PUSH
51212: DOUBLE
51213: LD_INT 1
51215: DEC
51216: ST_TO_ADDR
51217: LD_VAR 0 5
51221: PUSH
51222: FOR_TO
51223: IFFALSE 51270
// begin hc_class := 21 ;
51225: LD_ADDR_OWVAR 28
51229: PUSH
51230: LD_INT 21
51232: ST_TO_ADDR
// hc_gallery :=  ;
51233: LD_ADDR_OWVAR 33
51237: PUSH
51238: LD_STRING 
51240: ST_TO_ADDR
// animal := CreateHuman ;
51241: LD_ADDR_VAR 0 12
51245: PUSH
51246: CALL_OW 44
51250: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51251: LD_VAR 0 12
51255: PPUSH
51256: LD_VAR 0 8
51260: PPUSH
51261: LD_INT 0
51263: PPUSH
51264: CALL 53329 0 3
// end ;
51268: GO 51222
51270: POP
51271: POP
// if birds then
51272: LD_VAR 0 1
51276: IFFALSE 51343
// for i = 1 to birds do
51278: LD_ADDR_VAR 0 11
51282: PUSH
51283: DOUBLE
51284: LD_INT 1
51286: DEC
51287: ST_TO_ADDR
51288: LD_VAR 0 1
51292: PUSH
51293: FOR_TO
51294: IFFALSE 51341
// begin hc_class := 18 ;
51296: LD_ADDR_OWVAR 28
51300: PUSH
51301: LD_INT 18
51303: ST_TO_ADDR
// hc_gallery =  ;
51304: LD_ADDR_OWVAR 33
51308: PUSH
51309: LD_STRING 
51311: ST_TO_ADDR
// animal := CreateHuman ;
51312: LD_ADDR_VAR 0 12
51316: PUSH
51317: CALL_OW 44
51321: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51322: LD_VAR 0 12
51326: PPUSH
51327: LD_VAR 0 8
51331: PPUSH
51332: LD_INT 0
51334: PPUSH
51335: CALL 53329 0 3
// end ;
51339: GO 51293
51341: POP
51342: POP
// if tigers then
51343: LD_VAR 0 2
51347: IFFALSE 51431
// for i = 1 to tigers do
51349: LD_ADDR_VAR 0 11
51353: PUSH
51354: DOUBLE
51355: LD_INT 1
51357: DEC
51358: ST_TO_ADDR
51359: LD_VAR 0 2
51363: PUSH
51364: FOR_TO
51365: IFFALSE 51429
// begin hc_class = class_tiger ;
51367: LD_ADDR_OWVAR 28
51371: PUSH
51372: LD_INT 14
51374: ST_TO_ADDR
// hc_gallery =  ;
51375: LD_ADDR_OWVAR 33
51379: PUSH
51380: LD_STRING 
51382: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51383: LD_ADDR_OWVAR 35
51387: PUSH
51388: LD_INT 7
51390: NEG
51391: PPUSH
51392: LD_INT 7
51394: PPUSH
51395: CALL_OW 12
51399: ST_TO_ADDR
// animal := CreateHuman ;
51400: LD_ADDR_VAR 0 12
51404: PUSH
51405: CALL_OW 44
51409: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51410: LD_VAR 0 12
51414: PPUSH
51415: LD_VAR 0 8
51419: PPUSH
51420: LD_INT 0
51422: PPUSH
51423: CALL 53329 0 3
// end ;
51427: GO 51364
51429: POP
51430: POP
// if apemans then
51431: LD_VAR 0 3
51435: IFFALSE 51558
// for i = 1 to apemans do
51437: LD_ADDR_VAR 0 11
51441: PUSH
51442: DOUBLE
51443: LD_INT 1
51445: DEC
51446: ST_TO_ADDR
51447: LD_VAR 0 3
51451: PUSH
51452: FOR_TO
51453: IFFALSE 51556
// begin hc_class = class_apeman ;
51455: LD_ADDR_OWVAR 28
51459: PUSH
51460: LD_INT 12
51462: ST_TO_ADDR
// hc_gallery =  ;
51463: LD_ADDR_OWVAR 33
51467: PUSH
51468: LD_STRING 
51470: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51471: LD_ADDR_OWVAR 35
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PPUSH
51480: LD_INT 2
51482: PPUSH
51483: CALL_OW 12
51487: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51488: LD_ADDR_OWVAR 31
51492: PUSH
51493: LD_INT 1
51495: PPUSH
51496: LD_INT 3
51498: PPUSH
51499: CALL_OW 12
51503: PUSH
51504: LD_INT 1
51506: PPUSH
51507: LD_INT 3
51509: PPUSH
51510: CALL_OW 12
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: ST_TO_ADDR
// animal := CreateHuman ;
51527: LD_ADDR_VAR 0 12
51531: PUSH
51532: CALL_OW 44
51536: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51537: LD_VAR 0 12
51541: PPUSH
51542: LD_VAR 0 8
51546: PPUSH
51547: LD_INT 0
51549: PPUSH
51550: CALL 53329 0 3
// end ;
51554: GO 51452
51556: POP
51557: POP
// if enchidnas then
51558: LD_VAR 0 4
51562: IFFALSE 51629
// for i = 1 to enchidnas do
51564: LD_ADDR_VAR 0 11
51568: PUSH
51569: DOUBLE
51570: LD_INT 1
51572: DEC
51573: ST_TO_ADDR
51574: LD_VAR 0 4
51578: PUSH
51579: FOR_TO
51580: IFFALSE 51627
// begin hc_class = 13 ;
51582: LD_ADDR_OWVAR 28
51586: PUSH
51587: LD_INT 13
51589: ST_TO_ADDR
// hc_gallery =  ;
51590: LD_ADDR_OWVAR 33
51594: PUSH
51595: LD_STRING 
51597: ST_TO_ADDR
// animal := CreateHuman ;
51598: LD_ADDR_VAR 0 12
51602: PUSH
51603: CALL_OW 44
51607: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51608: LD_VAR 0 12
51612: PPUSH
51613: LD_VAR 0 8
51617: PPUSH
51618: LD_INT 0
51620: PPUSH
51621: CALL 53329 0 3
// end ;
51625: GO 51579
51627: POP
51628: POP
// if fishes then
51629: LD_VAR 0 7
51633: IFFALSE 51700
// for i = 1 to fishes do
51635: LD_ADDR_VAR 0 11
51639: PUSH
51640: DOUBLE
51641: LD_INT 1
51643: DEC
51644: ST_TO_ADDR
51645: LD_VAR 0 7
51649: PUSH
51650: FOR_TO
51651: IFFALSE 51698
// begin hc_class = 20 ;
51653: LD_ADDR_OWVAR 28
51657: PUSH
51658: LD_INT 20
51660: ST_TO_ADDR
// hc_gallery =  ;
51661: LD_ADDR_OWVAR 33
51665: PUSH
51666: LD_STRING 
51668: ST_TO_ADDR
// animal := CreateHuman ;
51669: LD_ADDR_VAR 0 12
51673: PUSH
51674: CALL_OW 44
51678: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51679: LD_VAR 0 12
51683: PPUSH
51684: LD_VAR 0 9
51688: PPUSH
51689: LD_INT 0
51691: PPUSH
51692: CALL 53329 0 3
// end ;
51696: GO 51650
51698: POP
51699: POP
// end ;
51700: LD_VAR 0 10
51704: RET
// export function WantHeal ( sci , unit ) ; begin
51705: LD_INT 0
51707: PPUSH
// if GetTaskList ( sci ) > 0 then
51708: LD_VAR 0 1
51712: PPUSH
51713: CALL_OW 437
51717: PUSH
51718: LD_INT 0
51720: GREATER
51721: IFFALSE 51791
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51723: LD_VAR 0 1
51727: PPUSH
51728: CALL_OW 437
51732: PUSH
51733: LD_INT 1
51735: ARRAY
51736: PUSH
51737: LD_INT 1
51739: ARRAY
51740: PUSH
51741: LD_STRING l
51743: EQUAL
51744: PUSH
51745: LD_VAR 0 1
51749: PPUSH
51750: CALL_OW 437
51754: PUSH
51755: LD_INT 1
51757: ARRAY
51758: PUSH
51759: LD_INT 4
51761: ARRAY
51762: PUSH
51763: LD_VAR 0 2
51767: EQUAL
51768: AND
51769: IFFALSE 51781
// result := true else
51771: LD_ADDR_VAR 0 3
51775: PUSH
51776: LD_INT 1
51778: ST_TO_ADDR
51779: GO 51789
// result := false ;
51781: LD_ADDR_VAR 0 3
51785: PUSH
51786: LD_INT 0
51788: ST_TO_ADDR
// end else
51789: GO 51799
// result := false ;
51791: LD_ADDR_VAR 0 3
51795: PUSH
51796: LD_INT 0
51798: ST_TO_ADDR
// end ;
51799: LD_VAR 0 3
51803: RET
// export function HealTarget ( sci ) ; begin
51804: LD_INT 0
51806: PPUSH
// if not sci then
51807: LD_VAR 0 1
51811: NOT
51812: IFFALSE 51816
// exit ;
51814: GO 51881
// result := 0 ;
51816: LD_ADDR_VAR 0 2
51820: PUSH
51821: LD_INT 0
51823: ST_TO_ADDR
// if GetTaskList ( sci ) then
51824: LD_VAR 0 1
51828: PPUSH
51829: CALL_OW 437
51833: IFFALSE 51881
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51835: LD_VAR 0 1
51839: PPUSH
51840: CALL_OW 437
51844: PUSH
51845: LD_INT 1
51847: ARRAY
51848: PUSH
51849: LD_INT 1
51851: ARRAY
51852: PUSH
51853: LD_STRING l
51855: EQUAL
51856: IFFALSE 51881
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51858: LD_ADDR_VAR 0 2
51862: PUSH
51863: LD_VAR 0 1
51867: PPUSH
51868: CALL_OW 437
51872: PUSH
51873: LD_INT 1
51875: ARRAY
51876: PUSH
51877: LD_INT 4
51879: ARRAY
51880: ST_TO_ADDR
// end ;
51881: LD_VAR 0 2
51885: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51886: LD_INT 0
51888: PPUSH
51889: PPUSH
51890: PPUSH
51891: PPUSH
// if not base_units then
51892: LD_VAR 0 1
51896: NOT
51897: IFFALSE 51901
// exit ;
51899: GO 51988
// result := false ;
51901: LD_ADDR_VAR 0 2
51905: PUSH
51906: LD_INT 0
51908: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51909: LD_ADDR_VAR 0 5
51913: PUSH
51914: LD_VAR 0 1
51918: PPUSH
51919: LD_INT 21
51921: PUSH
51922: LD_INT 3
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PPUSH
51929: CALL_OW 72
51933: ST_TO_ADDR
// if not tmp then
51934: LD_VAR 0 5
51938: NOT
51939: IFFALSE 51943
// exit ;
51941: GO 51988
// for i in tmp do
51943: LD_ADDR_VAR 0 3
51947: PUSH
51948: LD_VAR 0 5
51952: PUSH
51953: FOR_IN
51954: IFFALSE 51986
// begin result := EnemyInRange ( i , 22 ) ;
51956: LD_ADDR_VAR 0 2
51960: PUSH
51961: LD_VAR 0 3
51965: PPUSH
51966: LD_INT 22
51968: PPUSH
51969: CALL 49566 0 2
51973: ST_TO_ADDR
// if result then
51974: LD_VAR 0 2
51978: IFFALSE 51984
// exit ;
51980: POP
51981: POP
51982: GO 51988
// end ;
51984: GO 51953
51986: POP
51987: POP
// end ;
51988: LD_VAR 0 2
51992: RET
// export function FilterByTag ( units , tag ) ; begin
51993: LD_INT 0
51995: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51996: LD_ADDR_VAR 0 3
52000: PUSH
52001: LD_VAR 0 1
52005: PPUSH
52006: LD_INT 120
52008: PUSH
52009: LD_VAR 0 2
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PPUSH
52018: CALL_OW 72
52022: ST_TO_ADDR
// end ;
52023: LD_VAR 0 3
52027: RET
// export function IsDriver ( un ) ; begin
52028: LD_INT 0
52030: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52031: LD_ADDR_VAR 0 2
52035: PUSH
52036: LD_VAR 0 1
52040: PUSH
52041: LD_INT 55
52043: PUSH
52044: EMPTY
52045: LIST
52046: PPUSH
52047: CALL_OW 69
52051: IN
52052: ST_TO_ADDR
// end ;
52053: LD_VAR 0 2
52057: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52058: LD_INT 0
52060: PPUSH
52061: PPUSH
// list := [ ] ;
52062: LD_ADDR_VAR 0 5
52066: PUSH
52067: EMPTY
52068: ST_TO_ADDR
// case d of 0 :
52069: LD_VAR 0 3
52073: PUSH
52074: LD_INT 0
52076: DOUBLE
52077: EQUAL
52078: IFTRUE 52082
52080: GO 52215
52082: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52083: LD_ADDR_VAR 0 5
52087: PUSH
52088: LD_VAR 0 1
52092: PUSH
52093: LD_INT 4
52095: MINUS
52096: PUSH
52097: LD_VAR 0 2
52101: PUSH
52102: LD_INT 4
52104: MINUS
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: LIST
52113: PUSH
52114: LD_VAR 0 1
52118: PUSH
52119: LD_INT 3
52121: MINUS
52122: PUSH
52123: LD_VAR 0 2
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: PUSH
52136: LD_VAR 0 1
52140: PUSH
52141: LD_INT 4
52143: PLUS
52144: PUSH
52145: LD_VAR 0 2
52149: PUSH
52150: LD_INT 4
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: LIST
52157: PUSH
52158: LD_VAR 0 1
52162: PUSH
52163: LD_INT 3
52165: PLUS
52166: PUSH
52167: LD_VAR 0 2
52171: PUSH
52172: LD_INT 3
52174: PLUS
52175: PUSH
52176: LD_INT 5
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: LIST
52183: PUSH
52184: LD_VAR 0 1
52188: PUSH
52189: LD_VAR 0 2
52193: PUSH
52194: LD_INT 4
52196: PLUS
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: LIST
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: ST_TO_ADDR
// end ; 1 :
52213: GO 52913
52215: LD_INT 1
52217: DOUBLE
52218: EQUAL
52219: IFTRUE 52223
52221: GO 52356
52223: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52224: LD_ADDR_VAR 0 5
52228: PUSH
52229: LD_VAR 0 1
52233: PUSH
52234: LD_VAR 0 2
52238: PUSH
52239: LD_INT 4
52241: MINUS
52242: PUSH
52243: LD_INT 3
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: LIST
52250: PUSH
52251: LD_VAR 0 1
52255: PUSH
52256: LD_INT 3
52258: MINUS
52259: PUSH
52260: LD_VAR 0 2
52264: PUSH
52265: LD_INT 3
52267: MINUS
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: LIST
52276: PUSH
52277: LD_VAR 0 1
52281: PUSH
52282: LD_INT 4
52284: MINUS
52285: PUSH
52286: LD_VAR 0 2
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: LIST
52298: PUSH
52299: LD_VAR 0 1
52303: PUSH
52304: LD_VAR 0 2
52308: PUSH
52309: LD_INT 3
52311: PLUS
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: LIST
52320: PUSH
52321: LD_VAR 0 1
52325: PUSH
52326: LD_INT 4
52328: PLUS
52329: PUSH
52330: LD_VAR 0 2
52334: PUSH
52335: LD_INT 4
52337: PLUS
52338: PUSH
52339: LD_INT 5
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: LIST
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: ST_TO_ADDR
// end ; 2 :
52354: GO 52913
52356: LD_INT 2
52358: DOUBLE
52359: EQUAL
52360: IFTRUE 52364
52362: GO 52493
52364: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52365: LD_ADDR_VAR 0 5
52369: PUSH
52370: LD_VAR 0 1
52374: PUSH
52375: LD_VAR 0 2
52379: PUSH
52380: LD_INT 3
52382: MINUS
52383: PUSH
52384: LD_INT 3
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: PUSH
52392: LD_VAR 0 1
52396: PUSH
52397: LD_INT 4
52399: PLUS
52400: PUSH
52401: LD_VAR 0 2
52405: PUSH
52406: LD_INT 4
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: LIST
52413: PUSH
52414: LD_VAR 0 1
52418: PUSH
52419: LD_VAR 0 2
52423: PUSH
52424: LD_INT 4
52426: PLUS
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: LIST
52435: PUSH
52436: LD_VAR 0 1
52440: PUSH
52441: LD_INT 3
52443: MINUS
52444: PUSH
52445: LD_VAR 0 2
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: LIST
52457: PUSH
52458: LD_VAR 0 1
52462: PUSH
52463: LD_INT 4
52465: MINUS
52466: PUSH
52467: LD_VAR 0 2
52471: PUSH
52472: LD_INT 4
52474: MINUS
52475: PUSH
52476: LD_INT 2
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: LIST
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: ST_TO_ADDR
// end ; 3 :
52491: GO 52913
52493: LD_INT 3
52495: DOUBLE
52496: EQUAL
52497: IFTRUE 52501
52499: GO 52634
52501: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52502: LD_ADDR_VAR 0 5
52506: PUSH
52507: LD_VAR 0 1
52511: PUSH
52512: LD_INT 3
52514: PLUS
52515: PUSH
52516: LD_VAR 0 2
52520: PUSH
52521: LD_INT 4
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: LIST
52528: PUSH
52529: LD_VAR 0 1
52533: PUSH
52534: LD_INT 4
52536: PLUS
52537: PUSH
52538: LD_VAR 0 2
52542: PUSH
52543: LD_INT 4
52545: PLUS
52546: PUSH
52547: LD_INT 5
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: LIST
52554: PUSH
52555: LD_VAR 0 1
52559: PUSH
52560: LD_INT 4
52562: MINUS
52563: PUSH
52564: LD_VAR 0 2
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: LIST
52576: PUSH
52577: LD_VAR 0 1
52581: PUSH
52582: LD_VAR 0 2
52586: PUSH
52587: LD_INT 4
52589: MINUS
52590: PUSH
52591: LD_INT 3
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: LIST
52598: PUSH
52599: LD_VAR 0 1
52603: PUSH
52604: LD_INT 3
52606: MINUS
52607: PUSH
52608: LD_VAR 0 2
52612: PUSH
52613: LD_INT 3
52615: MINUS
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: LIST
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: ST_TO_ADDR
// end ; 4 :
52632: GO 52913
52634: LD_INT 4
52636: DOUBLE
52637: EQUAL
52638: IFTRUE 52642
52640: GO 52775
52642: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52643: LD_ADDR_VAR 0 5
52647: PUSH
52648: LD_VAR 0 1
52652: PUSH
52653: LD_VAR 0 2
52657: PUSH
52658: LD_INT 4
52660: PLUS
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: LIST
52669: PUSH
52670: LD_VAR 0 1
52674: PUSH
52675: LD_INT 3
52677: PLUS
52678: PUSH
52679: LD_VAR 0 2
52683: PUSH
52684: LD_INT 3
52686: PLUS
52687: PUSH
52688: LD_INT 5
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: LIST
52695: PUSH
52696: LD_VAR 0 1
52700: PUSH
52701: LD_INT 4
52703: PLUS
52704: PUSH
52705: LD_VAR 0 2
52709: PUSH
52710: LD_INT 4
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: LIST
52717: PUSH
52718: LD_VAR 0 1
52722: PUSH
52723: LD_VAR 0 2
52727: PUSH
52728: LD_INT 3
52730: MINUS
52731: PUSH
52732: LD_INT 3
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: LIST
52739: PUSH
52740: LD_VAR 0 1
52744: PUSH
52745: LD_INT 4
52747: MINUS
52748: PUSH
52749: LD_VAR 0 2
52753: PUSH
52754: LD_INT 4
52756: MINUS
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: LIST
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: ST_TO_ADDR
// end ; 5 :
52773: GO 52913
52775: LD_INT 5
52777: DOUBLE
52778: EQUAL
52779: IFTRUE 52783
52781: GO 52912
52783: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52784: LD_ADDR_VAR 0 5
52788: PUSH
52789: LD_VAR 0 1
52793: PUSH
52794: LD_INT 4
52796: MINUS
52797: PUSH
52798: LD_VAR 0 2
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: LIST
52810: PUSH
52811: LD_VAR 0 1
52815: PUSH
52816: LD_VAR 0 2
52820: PUSH
52821: LD_INT 4
52823: MINUS
52824: PUSH
52825: LD_INT 3
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: LIST
52832: PUSH
52833: LD_VAR 0 1
52837: PUSH
52838: LD_INT 4
52840: PLUS
52841: PUSH
52842: LD_VAR 0 2
52846: PUSH
52847: LD_INT 4
52849: PLUS
52850: PUSH
52851: LD_INT 5
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: LIST
52858: PUSH
52859: LD_VAR 0 1
52863: PUSH
52864: LD_INT 3
52866: PLUS
52867: PUSH
52868: LD_VAR 0 2
52872: PUSH
52873: LD_INT 4
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: LIST
52880: PUSH
52881: LD_VAR 0 1
52885: PUSH
52886: LD_VAR 0 2
52890: PUSH
52891: LD_INT 3
52893: PLUS
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: ST_TO_ADDR
// end ; end ;
52910: GO 52913
52912: POP
// result := list ;
52913: LD_ADDR_VAR 0 4
52917: PUSH
52918: LD_VAR 0 5
52922: ST_TO_ADDR
// end ;
52923: LD_VAR 0 4
52927: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52928: LD_INT 0
52930: PPUSH
52931: PPUSH
52932: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52933: LD_VAR 0 1
52937: NOT
52938: PUSH
52939: LD_VAR 0 2
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: LD_INT 4
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: IN
52962: NOT
52963: OR
52964: IFFALSE 52968
// exit ;
52966: GO 53051
// tmp := [ ] ;
52968: LD_ADDR_VAR 0 5
52972: PUSH
52973: EMPTY
52974: ST_TO_ADDR
// for i in units do
52975: LD_ADDR_VAR 0 4
52979: PUSH
52980: LD_VAR 0 1
52984: PUSH
52985: FOR_IN
52986: IFFALSE 53020
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52988: LD_ADDR_VAR 0 5
52992: PUSH
52993: LD_VAR 0 5
52997: PPUSH
52998: LD_VAR 0 4
53002: PPUSH
53003: LD_VAR 0 2
53007: PPUSH
53008: CALL_OW 259
53012: PPUSH
53013: CALL 54424 0 2
53017: ST_TO_ADDR
53018: GO 52985
53020: POP
53021: POP
// if not tmp then
53022: LD_VAR 0 5
53026: NOT
53027: IFFALSE 53031
// exit ;
53029: GO 53051
// result := SortListByListDesc ( units , tmp ) ;
53031: LD_ADDR_VAR 0 3
53035: PUSH
53036: LD_VAR 0 1
53040: PPUSH
53041: LD_VAR 0 5
53045: PPUSH
53046: CALL_OW 77
53050: ST_TO_ADDR
// end ;
53051: LD_VAR 0 3
53055: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53056: LD_INT 0
53058: PPUSH
53059: PPUSH
53060: PPUSH
// result := false ;
53061: LD_ADDR_VAR 0 3
53065: PUSH
53066: LD_INT 0
53068: ST_TO_ADDR
// if not building then
53069: LD_VAR 0 2
53073: NOT
53074: IFFALSE 53078
// exit ;
53076: GO 53216
// x := GetX ( building ) ;
53078: LD_ADDR_VAR 0 4
53082: PUSH
53083: LD_VAR 0 2
53087: PPUSH
53088: CALL_OW 250
53092: ST_TO_ADDR
// y := GetY ( building ) ;
53093: LD_ADDR_VAR 0 5
53097: PUSH
53098: LD_VAR 0 2
53102: PPUSH
53103: CALL_OW 251
53107: ST_TO_ADDR
// if not x or not y then
53108: LD_VAR 0 4
53112: NOT
53113: PUSH
53114: LD_VAR 0 5
53118: NOT
53119: OR
53120: IFFALSE 53124
// exit ;
53122: GO 53216
// if GetTaskList ( unit ) then
53124: LD_VAR 0 1
53128: PPUSH
53129: CALL_OW 437
53133: IFFALSE 53216
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53135: LD_STRING e
53137: PUSH
53138: LD_VAR 0 1
53142: PPUSH
53143: CALL_OW 437
53147: PUSH
53148: LD_INT 1
53150: ARRAY
53151: PUSH
53152: LD_INT 1
53154: ARRAY
53155: EQUAL
53156: PUSH
53157: LD_VAR 0 4
53161: PUSH
53162: LD_VAR 0 1
53166: PPUSH
53167: CALL_OW 437
53171: PUSH
53172: LD_INT 1
53174: ARRAY
53175: PUSH
53176: LD_INT 2
53178: ARRAY
53179: EQUAL
53180: AND
53181: PUSH
53182: LD_VAR 0 5
53186: PUSH
53187: LD_VAR 0 1
53191: PPUSH
53192: CALL_OW 437
53196: PUSH
53197: LD_INT 1
53199: ARRAY
53200: PUSH
53201: LD_INT 3
53203: ARRAY
53204: EQUAL
53205: AND
53206: IFFALSE 53216
// result := true end ;
53208: LD_ADDR_VAR 0 3
53212: PUSH
53213: LD_INT 1
53215: ST_TO_ADDR
// end ;
53216: LD_VAR 0 3
53220: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53221: LD_INT 0
53223: PPUSH
// result := false ;
53224: LD_ADDR_VAR 0 4
53228: PUSH
53229: LD_INT 0
53231: ST_TO_ADDR
// if GetTaskList ( unit ) then
53232: LD_VAR 0 1
53236: PPUSH
53237: CALL_OW 437
53241: IFFALSE 53324
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53243: LD_STRING M
53245: PUSH
53246: LD_VAR 0 1
53250: PPUSH
53251: CALL_OW 437
53255: PUSH
53256: LD_INT 1
53258: ARRAY
53259: PUSH
53260: LD_INT 1
53262: ARRAY
53263: EQUAL
53264: PUSH
53265: LD_VAR 0 2
53269: PUSH
53270: LD_VAR 0 1
53274: PPUSH
53275: CALL_OW 437
53279: PUSH
53280: LD_INT 1
53282: ARRAY
53283: PUSH
53284: LD_INT 2
53286: ARRAY
53287: EQUAL
53288: AND
53289: PUSH
53290: LD_VAR 0 3
53294: PUSH
53295: LD_VAR 0 1
53299: PPUSH
53300: CALL_OW 437
53304: PUSH
53305: LD_INT 1
53307: ARRAY
53308: PUSH
53309: LD_INT 3
53311: ARRAY
53312: EQUAL
53313: AND
53314: IFFALSE 53324
// result := true ;
53316: LD_ADDR_VAR 0 4
53320: PUSH
53321: LD_INT 1
53323: ST_TO_ADDR
// end ; end ;
53324: LD_VAR 0 4
53328: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53329: LD_INT 0
53331: PPUSH
53332: PPUSH
53333: PPUSH
53334: PPUSH
// if not unit or not area then
53335: LD_VAR 0 1
53339: NOT
53340: PUSH
53341: LD_VAR 0 2
53345: NOT
53346: OR
53347: IFFALSE 53351
// exit ;
53349: GO 53527
// tmp := AreaToList ( area , i ) ;
53351: LD_ADDR_VAR 0 6
53355: PUSH
53356: LD_VAR 0 2
53360: PPUSH
53361: LD_VAR 0 5
53365: PPUSH
53366: CALL_OW 517
53370: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53371: LD_ADDR_VAR 0 5
53375: PUSH
53376: DOUBLE
53377: LD_INT 1
53379: DEC
53380: ST_TO_ADDR
53381: LD_VAR 0 6
53385: PUSH
53386: LD_INT 1
53388: ARRAY
53389: PUSH
53390: FOR_TO
53391: IFFALSE 53525
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53393: LD_ADDR_VAR 0 7
53397: PUSH
53398: LD_VAR 0 6
53402: PUSH
53403: LD_INT 1
53405: ARRAY
53406: PUSH
53407: LD_VAR 0 5
53411: ARRAY
53412: PUSH
53413: LD_VAR 0 6
53417: PUSH
53418: LD_INT 2
53420: ARRAY
53421: PUSH
53422: LD_VAR 0 5
53426: ARRAY
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53432: LD_INT 92
53434: PUSH
53435: LD_VAR 0 7
53439: PUSH
53440: LD_INT 1
53442: ARRAY
53443: PUSH
53444: LD_VAR 0 7
53448: PUSH
53449: LD_INT 2
53451: ARRAY
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: PPUSH
53462: CALL_OW 69
53466: PUSH
53467: LD_INT 0
53469: EQUAL
53470: IFFALSE 53523
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53472: LD_VAR 0 1
53476: PPUSH
53477: LD_VAR 0 7
53481: PUSH
53482: LD_INT 1
53484: ARRAY
53485: PPUSH
53486: LD_VAR 0 7
53490: PUSH
53491: LD_INT 2
53493: ARRAY
53494: PPUSH
53495: LD_VAR 0 3
53499: PPUSH
53500: CALL_OW 48
// result := IsPlaced ( unit ) ;
53504: LD_ADDR_VAR 0 4
53508: PUSH
53509: LD_VAR 0 1
53513: PPUSH
53514: CALL_OW 305
53518: ST_TO_ADDR
// exit ;
53519: POP
53520: POP
53521: GO 53527
// end ; end ;
53523: GO 53390
53525: POP
53526: POP
// end ;
53527: LD_VAR 0 4
53531: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53532: LD_INT 0
53534: PPUSH
53535: PPUSH
53536: PPUSH
// if not side or side > 8 then
53537: LD_VAR 0 1
53541: NOT
53542: PUSH
53543: LD_VAR 0 1
53547: PUSH
53548: LD_INT 8
53550: GREATER
53551: OR
53552: IFFALSE 53556
// exit ;
53554: GO 53743
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53556: LD_ADDR_VAR 0 4
53560: PUSH
53561: LD_INT 22
53563: PUSH
53564: LD_VAR 0 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 21
53575: PUSH
53576: LD_INT 3
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PPUSH
53587: CALL_OW 69
53591: ST_TO_ADDR
// if not tmp then
53592: LD_VAR 0 4
53596: NOT
53597: IFFALSE 53601
// exit ;
53599: GO 53743
// enable_addtolog := true ;
53601: LD_ADDR_OWVAR 81
53605: PUSH
53606: LD_INT 1
53608: ST_TO_ADDR
// AddToLog ( [ ) ;
53609: LD_STRING [
53611: PPUSH
53612: CALL_OW 561
// for i in tmp do
53616: LD_ADDR_VAR 0 3
53620: PUSH
53621: LD_VAR 0 4
53625: PUSH
53626: FOR_IN
53627: IFFALSE 53734
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53629: LD_STRING [
53631: PUSH
53632: LD_VAR 0 3
53636: PPUSH
53637: CALL_OW 266
53641: STR
53642: PUSH
53643: LD_STRING , 
53645: STR
53646: PUSH
53647: LD_VAR 0 3
53651: PPUSH
53652: CALL_OW 250
53656: STR
53657: PUSH
53658: LD_STRING , 
53660: STR
53661: PUSH
53662: LD_VAR 0 3
53666: PPUSH
53667: CALL_OW 251
53671: STR
53672: PUSH
53673: LD_STRING , 
53675: STR
53676: PUSH
53677: LD_VAR 0 3
53681: PPUSH
53682: CALL_OW 254
53686: STR
53687: PUSH
53688: LD_STRING , 
53690: STR
53691: PUSH
53692: LD_VAR 0 3
53696: PPUSH
53697: LD_INT 1
53699: PPUSH
53700: CALL_OW 268
53704: STR
53705: PUSH
53706: LD_STRING , 
53708: STR
53709: PUSH
53710: LD_VAR 0 3
53714: PPUSH
53715: LD_INT 2
53717: PPUSH
53718: CALL_OW 268
53722: STR
53723: PUSH
53724: LD_STRING ],
53726: STR
53727: PPUSH
53728: CALL_OW 561
// end ;
53732: GO 53626
53734: POP
53735: POP
// AddToLog ( ]; ) ;
53736: LD_STRING ];
53738: PPUSH
53739: CALL_OW 561
// end ;
53743: LD_VAR 0 2
53747: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53748: LD_INT 0
53750: PPUSH
53751: PPUSH
53752: PPUSH
53753: PPUSH
53754: PPUSH
// if not area or not rate or not max then
53755: LD_VAR 0 1
53759: NOT
53760: PUSH
53761: LD_VAR 0 2
53765: NOT
53766: OR
53767: PUSH
53768: LD_VAR 0 4
53772: NOT
53773: OR
53774: IFFALSE 53778
// exit ;
53776: GO 53967
// while 1 do
53778: LD_INT 1
53780: IFFALSE 53967
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53782: LD_ADDR_VAR 0 9
53786: PUSH
53787: LD_VAR 0 1
53791: PPUSH
53792: LD_INT 1
53794: PPUSH
53795: CALL_OW 287
53799: PUSH
53800: LD_INT 10
53802: MUL
53803: ST_TO_ADDR
// r := rate / 10 ;
53804: LD_ADDR_VAR 0 7
53808: PUSH
53809: LD_VAR 0 2
53813: PUSH
53814: LD_INT 10
53816: DIVREAL
53817: ST_TO_ADDR
// time := 1 1$00 ;
53818: LD_ADDR_VAR 0 8
53822: PUSH
53823: LD_INT 2100
53825: ST_TO_ADDR
// if amount < min then
53826: LD_VAR 0 9
53830: PUSH
53831: LD_VAR 0 3
53835: LESS
53836: IFFALSE 53854
// r := r * 2 else
53838: LD_ADDR_VAR 0 7
53842: PUSH
53843: LD_VAR 0 7
53847: PUSH
53848: LD_INT 2
53850: MUL
53851: ST_TO_ADDR
53852: GO 53880
// if amount > max then
53854: LD_VAR 0 9
53858: PUSH
53859: LD_VAR 0 4
53863: GREATER
53864: IFFALSE 53880
// r := r / 2 ;
53866: LD_ADDR_VAR 0 7
53870: PUSH
53871: LD_VAR 0 7
53875: PUSH
53876: LD_INT 2
53878: DIVREAL
53879: ST_TO_ADDR
// time := time / r ;
53880: LD_ADDR_VAR 0 8
53884: PUSH
53885: LD_VAR 0 8
53889: PUSH
53890: LD_VAR 0 7
53894: DIVREAL
53895: ST_TO_ADDR
// if time < 0 then
53896: LD_VAR 0 8
53900: PUSH
53901: LD_INT 0
53903: LESS
53904: IFFALSE 53921
// time := time * - 1 ;
53906: LD_ADDR_VAR 0 8
53910: PUSH
53911: LD_VAR 0 8
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: MUL
53920: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53921: LD_VAR 0 8
53925: PUSH
53926: LD_INT 35
53928: PPUSH
53929: LD_INT 875
53931: PPUSH
53932: CALL_OW 12
53936: PLUS
53937: PPUSH
53938: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53942: LD_INT 1
53944: PPUSH
53945: LD_INT 5
53947: PPUSH
53948: CALL_OW 12
53952: PPUSH
53953: LD_VAR 0 1
53957: PPUSH
53958: LD_INT 1
53960: PPUSH
53961: CALL_OW 55
// end ;
53965: GO 53778
// end ;
53967: LD_VAR 0 5
53971: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53972: LD_INT 0
53974: PPUSH
53975: PPUSH
53976: PPUSH
53977: PPUSH
53978: PPUSH
53979: PPUSH
53980: PPUSH
53981: PPUSH
// if not turrets or not factories then
53982: LD_VAR 0 1
53986: NOT
53987: PUSH
53988: LD_VAR 0 2
53992: NOT
53993: OR
53994: IFFALSE 53998
// exit ;
53996: GO 54305
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53998: LD_ADDR_VAR 0 10
54002: PUSH
54003: LD_INT 5
54005: PUSH
54006: LD_INT 6
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: LD_INT 4
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 3
54025: PUSH
54026: LD_INT 5
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 24
54040: PUSH
54041: LD_INT 25
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 23
54050: PUSH
54051: LD_INT 27
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 42
54064: PUSH
54065: LD_INT 43
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 44
54074: PUSH
54075: LD_INT 46
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 45
54084: PUSH
54085: LD_INT 47
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: LIST
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: ST_TO_ADDR
// result := [ ] ;
54102: LD_ADDR_VAR 0 3
54106: PUSH
54107: EMPTY
54108: ST_TO_ADDR
// for i in turrets do
54109: LD_ADDR_VAR 0 4
54113: PUSH
54114: LD_VAR 0 1
54118: PUSH
54119: FOR_IN
54120: IFFALSE 54303
// begin nat := GetNation ( i ) ;
54122: LD_ADDR_VAR 0 7
54126: PUSH
54127: LD_VAR 0 4
54131: PPUSH
54132: CALL_OW 248
54136: ST_TO_ADDR
// weapon := 0 ;
54137: LD_ADDR_VAR 0 8
54141: PUSH
54142: LD_INT 0
54144: ST_TO_ADDR
// if not nat then
54145: LD_VAR 0 7
54149: NOT
54150: IFFALSE 54154
// continue ;
54152: GO 54119
// for j in list [ nat ] do
54154: LD_ADDR_VAR 0 5
54158: PUSH
54159: LD_VAR 0 10
54163: PUSH
54164: LD_VAR 0 7
54168: ARRAY
54169: PUSH
54170: FOR_IN
54171: IFFALSE 54212
// if GetBWeapon ( i ) = j [ 1 ] then
54173: LD_VAR 0 4
54177: PPUSH
54178: CALL_OW 269
54182: PUSH
54183: LD_VAR 0 5
54187: PUSH
54188: LD_INT 1
54190: ARRAY
54191: EQUAL
54192: IFFALSE 54210
// begin weapon := j [ 2 ] ;
54194: LD_ADDR_VAR 0 8
54198: PUSH
54199: LD_VAR 0 5
54203: PUSH
54204: LD_INT 2
54206: ARRAY
54207: ST_TO_ADDR
// break ;
54208: GO 54212
// end ;
54210: GO 54170
54212: POP
54213: POP
// if not weapon then
54214: LD_VAR 0 8
54218: NOT
54219: IFFALSE 54223
// continue ;
54221: GO 54119
// for k in factories do
54223: LD_ADDR_VAR 0 6
54227: PUSH
54228: LD_VAR 0 2
54232: PUSH
54233: FOR_IN
54234: IFFALSE 54299
// begin weapons := AvailableWeaponList ( k ) ;
54236: LD_ADDR_VAR 0 9
54240: PUSH
54241: LD_VAR 0 6
54245: PPUSH
54246: CALL_OW 478
54250: ST_TO_ADDR
// if not weapons then
54251: LD_VAR 0 9
54255: NOT
54256: IFFALSE 54260
// continue ;
54258: GO 54233
// if weapon in weapons then
54260: LD_VAR 0 8
54264: PUSH
54265: LD_VAR 0 9
54269: IN
54270: IFFALSE 54297
// begin result := [ i , weapon ] ;
54272: LD_ADDR_VAR 0 3
54276: PUSH
54277: LD_VAR 0 4
54281: PUSH
54282: LD_VAR 0 8
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: ST_TO_ADDR
// exit ;
54291: POP
54292: POP
54293: POP
54294: POP
54295: GO 54305
// end ; end ;
54297: GO 54233
54299: POP
54300: POP
// end ;
54301: GO 54119
54303: POP
54304: POP
// end ;
54305: LD_VAR 0 3
54309: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54310: LD_INT 0
54312: PPUSH
// if not side or side > 8 then
54313: LD_VAR 0 3
54317: NOT
54318: PUSH
54319: LD_VAR 0 3
54323: PUSH
54324: LD_INT 8
54326: GREATER
54327: OR
54328: IFFALSE 54332
// exit ;
54330: GO 54391
// if not range then
54332: LD_VAR 0 4
54336: NOT
54337: IFFALSE 54348
// range := - 12 ;
54339: LD_ADDR_VAR 0 4
54343: PUSH
54344: LD_INT 12
54346: NEG
54347: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54348: LD_VAR 0 1
54352: PPUSH
54353: LD_VAR 0 2
54357: PPUSH
54358: LD_VAR 0 3
54362: PPUSH
54363: LD_VAR 0 4
54367: PPUSH
54368: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54372: LD_VAR 0 1
54376: PPUSH
54377: LD_VAR 0 2
54381: PPUSH
54382: LD_VAR 0 3
54386: PPUSH
54387: CALL_OW 331
// end ;
54391: LD_VAR 0 5
54395: RET
// export function Video ( mode ) ; begin
54396: LD_INT 0
54398: PPUSH
// ingame_video = mode ;
54399: LD_ADDR_OWVAR 52
54403: PUSH
54404: LD_VAR 0 1
54408: ST_TO_ADDR
// interface_hidden = mode ;
54409: LD_ADDR_OWVAR 54
54413: PUSH
54414: LD_VAR 0 1
54418: ST_TO_ADDR
// end ;
54419: LD_VAR 0 2
54423: RET
// export function Join ( array , element ) ; begin
54424: LD_INT 0
54426: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54427: LD_ADDR_VAR 0 3
54431: PUSH
54432: LD_VAR 0 1
54436: PPUSH
54437: LD_VAR 0 1
54441: PUSH
54442: LD_INT 1
54444: PLUS
54445: PPUSH
54446: LD_VAR 0 2
54450: PPUSH
54451: CALL_OW 1
54455: ST_TO_ADDR
// end ;
54456: LD_VAR 0 3
54460: RET
// export function JoinUnion ( array , element ) ; begin
54461: LD_INT 0
54463: PPUSH
// result := array union element ;
54464: LD_ADDR_VAR 0 3
54468: PUSH
54469: LD_VAR 0 1
54473: PUSH
54474: LD_VAR 0 2
54478: UNION
54479: ST_TO_ADDR
// end ;
54480: LD_VAR 0 3
54484: RET
// export function GetBehemoths ( side ) ; begin
54485: LD_INT 0
54487: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54488: LD_ADDR_VAR 0 2
54492: PUSH
54493: LD_INT 22
54495: PUSH
54496: LD_VAR 0 1
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 31
54507: PUSH
54508: LD_INT 25
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PPUSH
54519: CALL_OW 69
54523: ST_TO_ADDR
// end ;
54524: LD_VAR 0 2
54528: RET
// export function Shuffle ( array ) ; var i , index ; begin
54529: LD_INT 0
54531: PPUSH
54532: PPUSH
54533: PPUSH
// result := [ ] ;
54534: LD_ADDR_VAR 0 2
54538: PUSH
54539: EMPTY
54540: ST_TO_ADDR
// if not array then
54541: LD_VAR 0 1
54545: NOT
54546: IFFALSE 54550
// exit ;
54548: GO 54649
// Randomize ;
54550: CALL_OW 10
// for i = array downto 1 do
54554: LD_ADDR_VAR 0 3
54558: PUSH
54559: DOUBLE
54560: LD_VAR 0 1
54564: INC
54565: ST_TO_ADDR
54566: LD_INT 1
54568: PUSH
54569: FOR_DOWNTO
54570: IFFALSE 54647
// begin index := rand ( 1 , array ) ;
54572: LD_ADDR_VAR 0 4
54576: PUSH
54577: LD_INT 1
54579: PPUSH
54580: LD_VAR 0 1
54584: PPUSH
54585: CALL_OW 12
54589: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54590: LD_ADDR_VAR 0 2
54594: PUSH
54595: LD_VAR 0 2
54599: PPUSH
54600: LD_VAR 0 2
54604: PUSH
54605: LD_INT 1
54607: PLUS
54608: PPUSH
54609: LD_VAR 0 1
54613: PUSH
54614: LD_VAR 0 4
54618: ARRAY
54619: PPUSH
54620: CALL_OW 2
54624: ST_TO_ADDR
// array := Delete ( array , index ) ;
54625: LD_ADDR_VAR 0 1
54629: PUSH
54630: LD_VAR 0 1
54634: PPUSH
54635: LD_VAR 0 4
54639: PPUSH
54640: CALL_OW 3
54644: ST_TO_ADDR
// end ;
54645: GO 54569
54647: POP
54648: POP
// end ;
54649: LD_VAR 0 2
54653: RET
// export function GetBaseMaterials ( base ) ; begin
54654: LD_INT 0
54656: PPUSH
// result := [ 0 , 0 , 0 ] ;
54657: LD_ADDR_VAR 0 2
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: LIST
54675: ST_TO_ADDR
// if not base then
54676: LD_VAR 0 1
54680: NOT
54681: IFFALSE 54685
// exit ;
54683: GO 54734
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54685: LD_ADDR_VAR 0 2
54689: PUSH
54690: LD_VAR 0 1
54694: PPUSH
54695: LD_INT 1
54697: PPUSH
54698: CALL_OW 275
54702: PUSH
54703: LD_VAR 0 1
54707: PPUSH
54708: LD_INT 2
54710: PPUSH
54711: CALL_OW 275
54715: PUSH
54716: LD_VAR 0 1
54720: PPUSH
54721: LD_INT 3
54723: PPUSH
54724: CALL_OW 275
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: LIST
54733: ST_TO_ADDR
// end ;
54734: LD_VAR 0 2
54738: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54739: LD_INT 0
54741: PPUSH
54742: PPUSH
// result := array ;
54743: LD_ADDR_VAR 0 3
54747: PUSH
54748: LD_VAR 0 1
54752: ST_TO_ADDR
// if size >= result then
54753: LD_VAR 0 2
54757: PUSH
54758: LD_VAR 0 3
54762: GREATEREQUAL
54763: IFFALSE 54767
// exit ;
54765: GO 54817
// if size then
54767: LD_VAR 0 2
54771: IFFALSE 54817
// for i := array downto size do
54773: LD_ADDR_VAR 0 4
54777: PUSH
54778: DOUBLE
54779: LD_VAR 0 1
54783: INC
54784: ST_TO_ADDR
54785: LD_VAR 0 2
54789: PUSH
54790: FOR_DOWNTO
54791: IFFALSE 54815
// result := Delete ( result , result ) ;
54793: LD_ADDR_VAR 0 3
54797: PUSH
54798: LD_VAR 0 3
54802: PPUSH
54803: LD_VAR 0 3
54807: PPUSH
54808: CALL_OW 3
54812: ST_TO_ADDR
54813: GO 54790
54815: POP
54816: POP
// end ;
54817: LD_VAR 0 3
54821: RET
// export function ComExit ( unit ) ; var tmp ; begin
54822: LD_INT 0
54824: PPUSH
54825: PPUSH
// if not IsInUnit ( unit ) then
54826: LD_VAR 0 1
54830: PPUSH
54831: CALL_OW 310
54835: NOT
54836: IFFALSE 54840
// exit ;
54838: GO 54900
// tmp := IsInUnit ( unit ) ;
54840: LD_ADDR_VAR 0 3
54844: PUSH
54845: LD_VAR 0 1
54849: PPUSH
54850: CALL_OW 310
54854: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54855: LD_VAR 0 3
54859: PPUSH
54860: CALL_OW 247
54864: PUSH
54865: LD_INT 2
54867: EQUAL
54868: IFFALSE 54881
// ComExitVehicle ( unit ) else
54870: LD_VAR 0 1
54874: PPUSH
54875: CALL_OW 121
54879: GO 54890
// ComExitBuilding ( unit ) ;
54881: LD_VAR 0 1
54885: PPUSH
54886: CALL_OW 122
// result := tmp ;
54890: LD_ADDR_VAR 0 2
54894: PUSH
54895: LD_VAR 0 3
54899: ST_TO_ADDR
// end ;
54900: LD_VAR 0 2
54904: RET
// export function ComExitAll ( units ) ; var i ; begin
54905: LD_INT 0
54907: PPUSH
54908: PPUSH
// if not units then
54909: LD_VAR 0 1
54913: NOT
54914: IFFALSE 54918
// exit ;
54916: GO 54944
// for i in units do
54918: LD_ADDR_VAR 0 3
54922: PUSH
54923: LD_VAR 0 1
54927: PUSH
54928: FOR_IN
54929: IFFALSE 54942
// ComExit ( i ) ;
54931: LD_VAR 0 3
54935: PPUSH
54936: CALL 54822 0 1
54940: GO 54928
54942: POP
54943: POP
// end ;
54944: LD_VAR 0 2
54948: RET
// export function ResetHc ; begin
54949: LD_INT 0
54951: PPUSH
// InitHc ;
54952: CALL_OW 19
// hc_importance := 0 ;
54956: LD_ADDR_OWVAR 32
54960: PUSH
54961: LD_INT 0
54963: ST_TO_ADDR
// end ;
54964: LD_VAR 0 1
54968: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54969: LD_INT 0
54971: PPUSH
54972: PPUSH
54973: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54974: LD_ADDR_VAR 0 6
54978: PUSH
54979: LD_VAR 0 1
54983: PUSH
54984: LD_VAR 0 3
54988: PLUS
54989: PUSH
54990: LD_INT 2
54992: DIV
54993: ST_TO_ADDR
// if _x < 0 then
54994: LD_VAR 0 6
54998: PUSH
54999: LD_INT 0
55001: LESS
55002: IFFALSE 55019
// _x := _x * - 1 ;
55004: LD_ADDR_VAR 0 6
55008: PUSH
55009: LD_VAR 0 6
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: MUL
55018: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55019: LD_ADDR_VAR 0 7
55023: PUSH
55024: LD_VAR 0 2
55028: PUSH
55029: LD_VAR 0 4
55033: PLUS
55034: PUSH
55035: LD_INT 2
55037: DIV
55038: ST_TO_ADDR
// if _y < 0 then
55039: LD_VAR 0 7
55043: PUSH
55044: LD_INT 0
55046: LESS
55047: IFFALSE 55064
// _y := _y * - 1 ;
55049: LD_ADDR_VAR 0 7
55053: PUSH
55054: LD_VAR 0 7
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: MUL
55063: ST_TO_ADDR
// result := [ _x , _y ] ;
55064: LD_ADDR_VAR 0 5
55068: PUSH
55069: LD_VAR 0 6
55073: PUSH
55074: LD_VAR 0 7
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: ST_TO_ADDR
// end ;
55083: LD_VAR 0 5
55087: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55088: LD_INT 0
55090: PPUSH
55091: PPUSH
55092: PPUSH
55093: PPUSH
// task := GetTaskList ( unit ) ;
55094: LD_ADDR_VAR 0 7
55098: PUSH
55099: LD_VAR 0 1
55103: PPUSH
55104: CALL_OW 437
55108: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55109: LD_VAR 0 7
55113: NOT
55114: PUSH
55115: LD_VAR 0 1
55119: PPUSH
55120: LD_VAR 0 2
55124: PPUSH
55125: CALL_OW 308
55129: NOT
55130: AND
55131: IFFALSE 55135
// exit ;
55133: GO 55253
// if IsInArea ( unit , area ) then
55135: LD_VAR 0 1
55139: PPUSH
55140: LD_VAR 0 2
55144: PPUSH
55145: CALL_OW 308
55149: IFFALSE 55167
// begin ComMoveToArea ( unit , goAway ) ;
55151: LD_VAR 0 1
55155: PPUSH
55156: LD_VAR 0 3
55160: PPUSH
55161: CALL_OW 113
// exit ;
55165: GO 55253
// end ; if task [ 1 ] [ 1 ] <> M then
55167: LD_VAR 0 7
55171: PUSH
55172: LD_INT 1
55174: ARRAY
55175: PUSH
55176: LD_INT 1
55178: ARRAY
55179: PUSH
55180: LD_STRING M
55182: NONEQUAL
55183: IFFALSE 55187
// exit ;
55185: GO 55253
// x := task [ 1 ] [ 2 ] ;
55187: LD_ADDR_VAR 0 5
55191: PUSH
55192: LD_VAR 0 7
55196: PUSH
55197: LD_INT 1
55199: ARRAY
55200: PUSH
55201: LD_INT 2
55203: ARRAY
55204: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55205: LD_ADDR_VAR 0 6
55209: PUSH
55210: LD_VAR 0 7
55214: PUSH
55215: LD_INT 1
55217: ARRAY
55218: PUSH
55219: LD_INT 3
55221: ARRAY
55222: ST_TO_ADDR
// if InArea ( x , y , area ) then
55223: LD_VAR 0 5
55227: PPUSH
55228: LD_VAR 0 6
55232: PPUSH
55233: LD_VAR 0 2
55237: PPUSH
55238: CALL_OW 309
55242: IFFALSE 55253
// ComStop ( unit ) ;
55244: LD_VAR 0 1
55248: PPUSH
55249: CALL_OW 141
// end ;
55253: LD_VAR 0 4
55257: RET
// export function Abs ( value ) ; begin
55258: LD_INT 0
55260: PPUSH
// result := value ;
55261: LD_ADDR_VAR 0 2
55265: PUSH
55266: LD_VAR 0 1
55270: ST_TO_ADDR
// if value < 0 then
55271: LD_VAR 0 1
55275: PUSH
55276: LD_INT 0
55278: LESS
55279: IFFALSE 55296
// result := value * - 1 ;
55281: LD_ADDR_VAR 0 2
55285: PUSH
55286: LD_VAR 0 1
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: MUL
55295: ST_TO_ADDR
// end ;
55296: LD_VAR 0 2
55300: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55301: LD_INT 0
55303: PPUSH
55304: PPUSH
55305: PPUSH
55306: PPUSH
55307: PPUSH
55308: PPUSH
55309: PPUSH
55310: PPUSH
// if not unit or not building then
55311: LD_VAR 0 1
55315: NOT
55316: PUSH
55317: LD_VAR 0 2
55321: NOT
55322: OR
55323: IFFALSE 55327
// exit ;
55325: GO 55553
// x := GetX ( building ) ;
55327: LD_ADDR_VAR 0 4
55331: PUSH
55332: LD_VAR 0 2
55336: PPUSH
55337: CALL_OW 250
55341: ST_TO_ADDR
// y := GetY ( building ) ;
55342: LD_ADDR_VAR 0 6
55346: PUSH
55347: LD_VAR 0 2
55351: PPUSH
55352: CALL_OW 251
55356: ST_TO_ADDR
// d := GetDir ( building ) ;
55357: LD_ADDR_VAR 0 8
55361: PUSH
55362: LD_VAR 0 2
55366: PPUSH
55367: CALL_OW 254
55371: ST_TO_ADDR
// r := 4 ;
55372: LD_ADDR_VAR 0 9
55376: PUSH
55377: LD_INT 4
55379: ST_TO_ADDR
// for i := 1 to 5 do
55380: LD_ADDR_VAR 0 10
55384: PUSH
55385: DOUBLE
55386: LD_INT 1
55388: DEC
55389: ST_TO_ADDR
55390: LD_INT 5
55392: PUSH
55393: FOR_TO
55394: IFFALSE 55551
// begin _x := ShiftX ( x , d , r + i ) ;
55396: LD_ADDR_VAR 0 5
55400: PUSH
55401: LD_VAR 0 4
55405: PPUSH
55406: LD_VAR 0 8
55410: PPUSH
55411: LD_VAR 0 9
55415: PUSH
55416: LD_VAR 0 10
55420: PLUS
55421: PPUSH
55422: CALL_OW 272
55426: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55427: LD_ADDR_VAR 0 7
55431: PUSH
55432: LD_VAR 0 6
55436: PPUSH
55437: LD_VAR 0 8
55441: PPUSH
55442: LD_VAR 0 9
55446: PUSH
55447: LD_VAR 0 10
55451: PLUS
55452: PPUSH
55453: CALL_OW 273
55457: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55458: LD_VAR 0 5
55462: PPUSH
55463: LD_VAR 0 7
55467: PPUSH
55468: CALL_OW 488
55472: PUSH
55473: LD_VAR 0 5
55477: PPUSH
55478: LD_VAR 0 7
55482: PPUSH
55483: CALL_OW 428
55487: PPUSH
55488: CALL_OW 247
55492: PUSH
55493: LD_INT 3
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: IN
55503: NOT
55504: AND
55505: IFFALSE 55549
// begin ComMoveXY ( unit , _x , _y ) ;
55507: LD_VAR 0 1
55511: PPUSH
55512: LD_VAR 0 5
55516: PPUSH
55517: LD_VAR 0 7
55521: PPUSH
55522: CALL_OW 111
// result := [ _x , _y ] ;
55526: LD_ADDR_VAR 0 3
55530: PUSH
55531: LD_VAR 0 5
55535: PUSH
55536: LD_VAR 0 7
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: ST_TO_ADDR
// exit ;
55545: POP
55546: POP
55547: GO 55553
// end ; end ;
55549: GO 55393
55551: POP
55552: POP
// end ;
55553: LD_VAR 0 3
55557: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55558: LD_INT 0
55560: PPUSH
55561: PPUSH
55562: PPUSH
// result := 0 ;
55563: LD_ADDR_VAR 0 3
55567: PUSH
55568: LD_INT 0
55570: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55571: LD_VAR 0 1
55575: PUSH
55576: LD_INT 0
55578: LESS
55579: PUSH
55580: LD_VAR 0 1
55584: PUSH
55585: LD_INT 8
55587: GREATER
55588: OR
55589: PUSH
55590: LD_VAR 0 2
55594: PUSH
55595: LD_INT 0
55597: LESS
55598: OR
55599: PUSH
55600: LD_VAR 0 2
55604: PUSH
55605: LD_INT 8
55607: GREATER
55608: OR
55609: IFFALSE 55613
// exit ;
55611: GO 55688
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55613: LD_ADDR_VAR 0 4
55617: PUSH
55618: LD_INT 22
55620: PUSH
55621: LD_VAR 0 2
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PPUSH
55630: CALL_OW 69
55634: PUSH
55635: FOR_IN
55636: IFFALSE 55686
// begin un := UnitShoot ( i ) ;
55638: LD_ADDR_VAR 0 5
55642: PUSH
55643: LD_VAR 0 4
55647: PPUSH
55648: CALL_OW 504
55652: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55653: LD_VAR 0 5
55657: PPUSH
55658: CALL_OW 255
55662: PUSH
55663: LD_VAR 0 1
55667: EQUAL
55668: IFFALSE 55684
// begin result := un ;
55670: LD_ADDR_VAR 0 3
55674: PUSH
55675: LD_VAR 0 5
55679: ST_TO_ADDR
// exit ;
55680: POP
55681: POP
55682: GO 55688
// end ; end ;
55684: GO 55635
55686: POP
55687: POP
// end ;
55688: LD_VAR 0 3
55692: RET
// export function GetCargoBay ( units ) ; begin
55693: LD_INT 0
55695: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55696: LD_ADDR_VAR 0 2
55700: PUSH
55701: LD_VAR 0 1
55705: PPUSH
55706: LD_INT 2
55708: PUSH
55709: LD_INT 34
55711: PUSH
55712: LD_INT 12
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 34
55721: PUSH
55722: LD_INT 51
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 34
55731: PUSH
55732: LD_INT 32
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 34
55741: PUSH
55742: LD_INT 89
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: PPUSH
55756: CALL_OW 72
55760: ST_TO_ADDR
// end ;
55761: LD_VAR 0 2
55765: RET
// export function Negate ( value ) ; begin
55766: LD_INT 0
55768: PPUSH
// result := not value ;
55769: LD_ADDR_VAR 0 2
55773: PUSH
55774: LD_VAR 0 1
55778: NOT
55779: ST_TO_ADDR
// end ;
55780: LD_VAR 0 2
55784: RET
// export function Inc ( value ) ; begin
55785: LD_INT 0
55787: PPUSH
// result := value + 1 ;
55788: LD_ADDR_VAR 0 2
55792: PUSH
55793: LD_VAR 0 1
55797: PUSH
55798: LD_INT 1
55800: PLUS
55801: ST_TO_ADDR
// end ;
55802: LD_VAR 0 2
55806: RET
// export function Dec ( value ) ; begin
55807: LD_INT 0
55809: PPUSH
// result := value - 1 ;
55810: LD_ADDR_VAR 0 2
55814: PUSH
55815: LD_VAR 0 1
55819: PUSH
55820: LD_INT 1
55822: MINUS
55823: ST_TO_ADDR
// end ;
55824: LD_VAR 0 2
55828: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55829: LD_INT 0
55831: PPUSH
55832: PPUSH
55833: PPUSH
55834: PPUSH
55835: PPUSH
55836: PPUSH
55837: PPUSH
55838: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55839: LD_VAR 0 1
55843: PPUSH
55844: LD_VAR 0 2
55848: PPUSH
55849: CALL_OW 488
55853: NOT
55854: PUSH
55855: LD_VAR 0 3
55859: PPUSH
55860: LD_VAR 0 4
55864: PPUSH
55865: CALL_OW 488
55869: NOT
55870: OR
55871: IFFALSE 55884
// begin result := - 1 ;
55873: LD_ADDR_VAR 0 5
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: ST_TO_ADDR
// exit ;
55882: GO 56119
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55884: LD_ADDR_VAR 0 12
55888: PUSH
55889: LD_VAR 0 1
55893: PPUSH
55894: LD_VAR 0 2
55898: PPUSH
55899: LD_VAR 0 3
55903: PPUSH
55904: LD_VAR 0 4
55908: PPUSH
55909: CALL 54969 0 4
55913: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55914: LD_ADDR_VAR 0 11
55918: PUSH
55919: LD_VAR 0 1
55923: PPUSH
55924: LD_VAR 0 2
55928: PPUSH
55929: LD_VAR 0 12
55933: PUSH
55934: LD_INT 1
55936: ARRAY
55937: PPUSH
55938: LD_VAR 0 12
55942: PUSH
55943: LD_INT 2
55945: ARRAY
55946: PPUSH
55947: CALL_OW 298
55951: ST_TO_ADDR
// distance := 9999 ;
55952: LD_ADDR_VAR 0 10
55956: PUSH
55957: LD_INT 9999
55959: ST_TO_ADDR
// for i := 0 to 5 do
55960: LD_ADDR_VAR 0 6
55964: PUSH
55965: DOUBLE
55966: LD_INT 0
55968: DEC
55969: ST_TO_ADDR
55970: LD_INT 5
55972: PUSH
55973: FOR_TO
55974: IFFALSE 56117
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55976: LD_ADDR_VAR 0 7
55980: PUSH
55981: LD_VAR 0 1
55985: PPUSH
55986: LD_VAR 0 6
55990: PPUSH
55991: LD_VAR 0 11
55995: PPUSH
55996: CALL_OW 272
56000: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56001: LD_ADDR_VAR 0 8
56005: PUSH
56006: LD_VAR 0 2
56010: PPUSH
56011: LD_VAR 0 6
56015: PPUSH
56016: LD_VAR 0 11
56020: PPUSH
56021: CALL_OW 273
56025: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56026: LD_VAR 0 7
56030: PPUSH
56031: LD_VAR 0 8
56035: PPUSH
56036: CALL_OW 488
56040: NOT
56041: IFFALSE 56045
// continue ;
56043: GO 55973
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56045: LD_ADDR_VAR 0 9
56049: PUSH
56050: LD_VAR 0 12
56054: PUSH
56055: LD_INT 1
56057: ARRAY
56058: PPUSH
56059: LD_VAR 0 12
56063: PUSH
56064: LD_INT 2
56066: ARRAY
56067: PPUSH
56068: LD_VAR 0 7
56072: PPUSH
56073: LD_VAR 0 8
56077: PPUSH
56078: CALL_OW 298
56082: ST_TO_ADDR
// if tmp < distance then
56083: LD_VAR 0 9
56087: PUSH
56088: LD_VAR 0 10
56092: LESS
56093: IFFALSE 56115
// begin result := i ;
56095: LD_ADDR_VAR 0 5
56099: PUSH
56100: LD_VAR 0 6
56104: ST_TO_ADDR
// distance := tmp ;
56105: LD_ADDR_VAR 0 10
56109: PUSH
56110: LD_VAR 0 9
56114: ST_TO_ADDR
// end ; end ;
56115: GO 55973
56117: POP
56118: POP
// end ;
56119: LD_VAR 0 5
56123: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56124: LD_INT 0
56126: PPUSH
56127: PPUSH
// if not driver or not IsInUnit ( driver ) then
56128: LD_VAR 0 1
56132: NOT
56133: PUSH
56134: LD_VAR 0 1
56138: PPUSH
56139: CALL_OW 310
56143: NOT
56144: OR
56145: IFFALSE 56149
// exit ;
56147: GO 56239
// vehicle := IsInUnit ( driver ) ;
56149: LD_ADDR_VAR 0 3
56153: PUSH
56154: LD_VAR 0 1
56158: PPUSH
56159: CALL_OW 310
56163: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56164: LD_VAR 0 1
56168: PPUSH
56169: LD_STRING \
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: PUSH
56199: LD_STRING E
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_VAR 0 3
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PPUSH
56235: CALL_OW 446
// end ;
56239: LD_VAR 0 2
56243: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56244: LD_INT 0
56246: PPUSH
56247: PPUSH
// if not driver or not IsInUnit ( driver ) then
56248: LD_VAR 0 1
56252: NOT
56253: PUSH
56254: LD_VAR 0 1
56258: PPUSH
56259: CALL_OW 310
56263: NOT
56264: OR
56265: IFFALSE 56269
// exit ;
56267: GO 56359
// vehicle := IsInUnit ( driver ) ;
56269: LD_ADDR_VAR 0 3
56273: PUSH
56274: LD_VAR 0 1
56278: PPUSH
56279: CALL_OW 310
56283: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56284: LD_VAR 0 1
56288: PPUSH
56289: LD_STRING \
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: PUSH
56319: LD_STRING E
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: LD_VAR 0 3
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PPUSH
56355: CALL_OW 447
// end ;
56359: LD_VAR 0 2
56363: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56364: LD_INT 0
56366: PPUSH
56367: PPUSH
56368: PPUSH
// tmp := [ ] ;
56369: LD_ADDR_VAR 0 5
56373: PUSH
56374: EMPTY
56375: ST_TO_ADDR
// for i in units do
56376: LD_ADDR_VAR 0 4
56380: PUSH
56381: LD_VAR 0 1
56385: PUSH
56386: FOR_IN
56387: IFFALSE 56425
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56389: LD_ADDR_VAR 0 5
56393: PUSH
56394: LD_VAR 0 5
56398: PPUSH
56399: LD_VAR 0 5
56403: PUSH
56404: LD_INT 1
56406: PLUS
56407: PPUSH
56408: LD_VAR 0 4
56412: PPUSH
56413: CALL_OW 256
56417: PPUSH
56418: CALL_OW 2
56422: ST_TO_ADDR
56423: GO 56386
56425: POP
56426: POP
// if not tmp then
56427: LD_VAR 0 5
56431: NOT
56432: IFFALSE 56436
// exit ;
56434: GO 56484
// if asc then
56436: LD_VAR 0 2
56440: IFFALSE 56464
// result := SortListByListAsc ( units , tmp ) else
56442: LD_ADDR_VAR 0 3
56446: PUSH
56447: LD_VAR 0 1
56451: PPUSH
56452: LD_VAR 0 5
56456: PPUSH
56457: CALL_OW 76
56461: ST_TO_ADDR
56462: GO 56484
// result := SortListByListDesc ( units , tmp ) ;
56464: LD_ADDR_VAR 0 3
56468: PUSH
56469: LD_VAR 0 1
56473: PPUSH
56474: LD_VAR 0 5
56478: PPUSH
56479: CALL_OW 77
56483: ST_TO_ADDR
// end ;
56484: LD_VAR 0 3
56488: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56489: LD_INT 0
56491: PPUSH
56492: PPUSH
// task := GetTaskList ( mech ) ;
56493: LD_ADDR_VAR 0 4
56497: PUSH
56498: LD_VAR 0 1
56502: PPUSH
56503: CALL_OW 437
56507: ST_TO_ADDR
// if not task then
56508: LD_VAR 0 4
56512: NOT
56513: IFFALSE 56517
// exit ;
56515: GO 56559
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56517: LD_ADDR_VAR 0 3
56521: PUSH
56522: LD_VAR 0 4
56526: PUSH
56527: LD_INT 1
56529: ARRAY
56530: PUSH
56531: LD_INT 1
56533: ARRAY
56534: PUSH
56535: LD_STRING r
56537: EQUAL
56538: PUSH
56539: LD_VAR 0 4
56543: PUSH
56544: LD_INT 1
56546: ARRAY
56547: PUSH
56548: LD_INT 4
56550: ARRAY
56551: PUSH
56552: LD_VAR 0 2
56556: EQUAL
56557: AND
56558: ST_TO_ADDR
// end ;
56559: LD_VAR 0 3
56563: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56564: LD_INT 0
56566: PPUSH
// SetDir ( unit , d ) ;
56567: LD_VAR 0 1
56571: PPUSH
56572: LD_VAR 0 4
56576: PPUSH
56577: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56581: LD_ADDR_VAR 0 6
56585: PUSH
56586: LD_VAR 0 1
56590: PPUSH
56591: LD_VAR 0 2
56595: PPUSH
56596: LD_VAR 0 3
56600: PPUSH
56601: LD_VAR 0 5
56605: PPUSH
56606: CALL_OW 48
56610: ST_TO_ADDR
// end ;
56611: LD_VAR 0 6
56615: RET
// export function ToNaturalNumber ( number ) ; begin
56616: LD_INT 0
56618: PPUSH
// result := number div 1 ;
56619: LD_ADDR_VAR 0 2
56623: PUSH
56624: LD_VAR 0 1
56628: PUSH
56629: LD_INT 1
56631: DIV
56632: ST_TO_ADDR
// if number < 0 then
56633: LD_VAR 0 1
56637: PUSH
56638: LD_INT 0
56640: LESS
56641: IFFALSE 56651
// result := 0 ;
56643: LD_ADDR_VAR 0 2
56647: PUSH
56648: LD_INT 0
56650: ST_TO_ADDR
// end ;
56651: LD_VAR 0 2
56655: RET
// export function SortByClass ( units , class ) ; var un ; begin
56656: LD_INT 0
56658: PPUSH
56659: PPUSH
// if not units or not class then
56660: LD_VAR 0 1
56664: NOT
56665: PUSH
56666: LD_VAR 0 2
56670: NOT
56671: OR
56672: IFFALSE 56676
// exit ;
56674: GO 56771
// result := [ ] ;
56676: LD_ADDR_VAR 0 3
56680: PUSH
56681: EMPTY
56682: ST_TO_ADDR
// for un in units do
56683: LD_ADDR_VAR 0 4
56687: PUSH
56688: LD_VAR 0 1
56692: PUSH
56693: FOR_IN
56694: IFFALSE 56769
// if GetClass ( un ) = class then
56696: LD_VAR 0 4
56700: PPUSH
56701: CALL_OW 257
56705: PUSH
56706: LD_VAR 0 2
56710: EQUAL
56711: IFFALSE 56738
// result := Insert ( result , 1 , un ) else
56713: LD_ADDR_VAR 0 3
56717: PUSH
56718: LD_VAR 0 3
56722: PPUSH
56723: LD_INT 1
56725: PPUSH
56726: LD_VAR 0 4
56730: PPUSH
56731: CALL_OW 2
56735: ST_TO_ADDR
56736: GO 56767
// result := Replace ( result , result + 1 , un ) ;
56738: LD_ADDR_VAR 0 3
56742: PUSH
56743: LD_VAR 0 3
56747: PPUSH
56748: LD_VAR 0 3
56752: PUSH
56753: LD_INT 1
56755: PLUS
56756: PPUSH
56757: LD_VAR 0 4
56761: PPUSH
56762: CALL_OW 1
56766: ST_TO_ADDR
56767: GO 56693
56769: POP
56770: POP
// end ;
56771: LD_VAR 0 3
56775: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56776: LD_INT 0
56778: PPUSH
56779: PPUSH
56780: PPUSH
56781: PPUSH
56782: PPUSH
56783: PPUSH
56784: PPUSH
// result := [ ] ;
56785: LD_ADDR_VAR 0 4
56789: PUSH
56790: EMPTY
56791: ST_TO_ADDR
// if x - r < 0 then
56792: LD_VAR 0 1
56796: PUSH
56797: LD_VAR 0 3
56801: MINUS
56802: PUSH
56803: LD_INT 0
56805: LESS
56806: IFFALSE 56818
// min_x := 0 else
56808: LD_ADDR_VAR 0 8
56812: PUSH
56813: LD_INT 0
56815: ST_TO_ADDR
56816: GO 56834
// min_x := x - r ;
56818: LD_ADDR_VAR 0 8
56822: PUSH
56823: LD_VAR 0 1
56827: PUSH
56828: LD_VAR 0 3
56832: MINUS
56833: ST_TO_ADDR
// if y - r < 0 then
56834: LD_VAR 0 2
56838: PUSH
56839: LD_VAR 0 3
56843: MINUS
56844: PUSH
56845: LD_INT 0
56847: LESS
56848: IFFALSE 56860
// min_y := 0 else
56850: LD_ADDR_VAR 0 7
56854: PUSH
56855: LD_INT 0
56857: ST_TO_ADDR
56858: GO 56876
// min_y := y - r ;
56860: LD_ADDR_VAR 0 7
56864: PUSH
56865: LD_VAR 0 2
56869: PUSH
56870: LD_VAR 0 3
56874: MINUS
56875: ST_TO_ADDR
// max_x := x + r ;
56876: LD_ADDR_VAR 0 9
56880: PUSH
56881: LD_VAR 0 1
56885: PUSH
56886: LD_VAR 0 3
56890: PLUS
56891: ST_TO_ADDR
// max_y := y + r ;
56892: LD_ADDR_VAR 0 10
56896: PUSH
56897: LD_VAR 0 2
56901: PUSH
56902: LD_VAR 0 3
56906: PLUS
56907: ST_TO_ADDR
// for _x = min_x to max_x do
56908: LD_ADDR_VAR 0 5
56912: PUSH
56913: DOUBLE
56914: LD_VAR 0 8
56918: DEC
56919: ST_TO_ADDR
56920: LD_VAR 0 9
56924: PUSH
56925: FOR_TO
56926: IFFALSE 57027
// for _y = min_y to max_y do
56928: LD_ADDR_VAR 0 6
56932: PUSH
56933: DOUBLE
56934: LD_VAR 0 7
56938: DEC
56939: ST_TO_ADDR
56940: LD_VAR 0 10
56944: PUSH
56945: FOR_TO
56946: IFFALSE 57023
// begin if not ValidHex ( _x , _y ) then
56948: LD_VAR 0 5
56952: PPUSH
56953: LD_VAR 0 6
56957: PPUSH
56958: CALL_OW 488
56962: NOT
56963: IFFALSE 56967
// continue ;
56965: GO 56945
// if GetResourceTypeXY ( _x , _y ) then
56967: LD_VAR 0 5
56971: PPUSH
56972: LD_VAR 0 6
56976: PPUSH
56977: CALL_OW 283
56981: IFFALSE 57021
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56983: LD_ADDR_VAR 0 4
56987: PUSH
56988: LD_VAR 0 4
56992: PPUSH
56993: LD_VAR 0 4
56997: PUSH
56998: LD_INT 1
57000: PLUS
57001: PPUSH
57002: LD_VAR 0 5
57006: PUSH
57007: LD_VAR 0 6
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PPUSH
57016: CALL_OW 1
57020: ST_TO_ADDR
// end ;
57021: GO 56945
57023: POP
57024: POP
57025: GO 56925
57027: POP
57028: POP
// end ;
57029: LD_VAR 0 4
57033: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57034: LD_INT 0
57036: PPUSH
57037: PPUSH
57038: PPUSH
57039: PPUSH
57040: PPUSH
57041: PPUSH
57042: PPUSH
57043: PPUSH
// if not units then
57044: LD_VAR 0 1
57048: NOT
57049: IFFALSE 57053
// exit ;
57051: GO 57581
// result := UnitFilter ( units , [ f_ok ] ) ;
57053: LD_ADDR_VAR 0 3
57057: PUSH
57058: LD_VAR 0 1
57062: PPUSH
57063: LD_INT 50
57065: PUSH
57066: EMPTY
57067: LIST
57068: PPUSH
57069: CALL_OW 72
57073: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57074: LD_ADDR_VAR 0 8
57078: PUSH
57079: LD_VAR 0 1
57083: PUSH
57084: LD_INT 1
57086: ARRAY
57087: PPUSH
57088: CALL_OW 255
57092: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57093: LD_ADDR_VAR 0 10
57097: PUSH
57098: LD_INT 29
57100: PUSH
57101: LD_INT 91
57103: PUSH
57104: LD_INT 49
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: LIST
57111: ST_TO_ADDR
// if not result then
57112: LD_VAR 0 3
57116: NOT
57117: IFFALSE 57121
// exit ;
57119: GO 57581
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57121: LD_ADDR_VAR 0 5
57125: PUSH
57126: LD_INT 81
57128: PUSH
57129: LD_VAR 0 8
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PPUSH
57138: CALL_OW 69
57142: ST_TO_ADDR
// for i in result do
57143: LD_ADDR_VAR 0 4
57147: PUSH
57148: LD_VAR 0 3
57152: PUSH
57153: FOR_IN
57154: IFFALSE 57579
// begin tag := GetTag ( i ) + 1 ;
57156: LD_ADDR_VAR 0 9
57160: PUSH
57161: LD_VAR 0 4
57165: PPUSH
57166: CALL_OW 110
57170: PUSH
57171: LD_INT 1
57173: PLUS
57174: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57175: LD_ADDR_VAR 0 7
57179: PUSH
57180: LD_VAR 0 4
57184: PPUSH
57185: CALL_OW 250
57189: PPUSH
57190: LD_VAR 0 4
57194: PPUSH
57195: CALL_OW 251
57199: PPUSH
57200: LD_INT 4
57202: PPUSH
57203: CALL 56776 0 3
57207: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57208: LD_VAR 0 4
57212: PPUSH
57213: CALL_OW 247
57217: PUSH
57218: LD_INT 2
57220: EQUAL
57221: PUSH
57222: LD_VAR 0 7
57226: PUSH
57227: LD_INT 2
57229: GREATER
57230: AND
57231: PUSH
57232: LD_VAR 0 4
57236: PPUSH
57237: CALL_OW 264
57241: PUSH
57242: LD_VAR 0 10
57246: IN
57247: NOT
57248: AND
57249: IFFALSE 57288
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57251: LD_VAR 0 4
57255: PPUSH
57256: LD_VAR 0 7
57260: PUSH
57261: LD_INT 1
57263: ARRAY
57264: PUSH
57265: LD_INT 1
57267: ARRAY
57268: PPUSH
57269: LD_VAR 0 7
57273: PUSH
57274: LD_INT 1
57276: ARRAY
57277: PUSH
57278: LD_INT 2
57280: ARRAY
57281: PPUSH
57282: CALL_OW 116
57286: GO 57577
// if path > tag then
57288: LD_VAR 0 2
57292: PUSH
57293: LD_VAR 0 9
57297: GREATER
57298: IFFALSE 57506
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57300: LD_ADDR_VAR 0 6
57304: PUSH
57305: LD_VAR 0 5
57309: PPUSH
57310: LD_INT 91
57312: PUSH
57313: LD_VAR 0 4
57317: PUSH
57318: LD_INT 8
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: LIST
57325: PPUSH
57326: CALL_OW 72
57330: ST_TO_ADDR
// if nearEnemy then
57331: LD_VAR 0 6
57335: IFFALSE 57404
// begin if GetWeapon ( i ) = ru_time_lapser then
57337: LD_VAR 0 4
57341: PPUSH
57342: CALL_OW 264
57346: PUSH
57347: LD_INT 49
57349: EQUAL
57350: IFFALSE 57378
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57352: LD_VAR 0 4
57356: PPUSH
57357: LD_VAR 0 6
57361: PPUSH
57362: LD_VAR 0 4
57366: PPUSH
57367: CALL_OW 74
57371: PPUSH
57372: CALL_OW 112
57376: GO 57402
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57378: LD_VAR 0 4
57382: PPUSH
57383: LD_VAR 0 6
57387: PPUSH
57388: LD_VAR 0 4
57392: PPUSH
57393: CALL_OW 74
57397: PPUSH
57398: CALL 58652 0 2
// end else
57402: GO 57504
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57404: LD_VAR 0 4
57408: PPUSH
57409: LD_VAR 0 2
57413: PUSH
57414: LD_VAR 0 9
57418: ARRAY
57419: PUSH
57420: LD_INT 1
57422: ARRAY
57423: PPUSH
57424: LD_VAR 0 2
57428: PUSH
57429: LD_VAR 0 9
57433: ARRAY
57434: PUSH
57435: LD_INT 2
57437: ARRAY
57438: PPUSH
57439: CALL_OW 297
57443: PUSH
57444: LD_INT 6
57446: GREATER
57447: IFFALSE 57490
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57449: LD_VAR 0 4
57453: PPUSH
57454: LD_VAR 0 2
57458: PUSH
57459: LD_VAR 0 9
57463: ARRAY
57464: PUSH
57465: LD_INT 1
57467: ARRAY
57468: PPUSH
57469: LD_VAR 0 2
57473: PUSH
57474: LD_VAR 0 9
57478: ARRAY
57479: PUSH
57480: LD_INT 2
57482: ARRAY
57483: PPUSH
57484: CALL_OW 114
57488: GO 57504
// SetTag ( i , tag ) ;
57490: LD_VAR 0 4
57494: PPUSH
57495: LD_VAR 0 9
57499: PPUSH
57500: CALL_OW 109
// end else
57504: GO 57577
// if enemy then
57506: LD_VAR 0 5
57510: IFFALSE 57577
// begin if GetWeapon ( i ) = ru_time_lapser then
57512: LD_VAR 0 4
57516: PPUSH
57517: CALL_OW 264
57521: PUSH
57522: LD_INT 49
57524: EQUAL
57525: IFFALSE 57553
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57527: LD_VAR 0 4
57531: PPUSH
57532: LD_VAR 0 5
57536: PPUSH
57537: LD_VAR 0 4
57541: PPUSH
57542: CALL_OW 74
57546: PPUSH
57547: CALL_OW 112
57551: GO 57577
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57553: LD_VAR 0 4
57557: PPUSH
57558: LD_VAR 0 5
57562: PPUSH
57563: LD_VAR 0 4
57567: PPUSH
57568: CALL_OW 74
57572: PPUSH
57573: CALL 58652 0 2
// end ; end ;
57577: GO 57153
57579: POP
57580: POP
// end ;
57581: LD_VAR 0 3
57585: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57586: LD_INT 0
57588: PPUSH
57589: PPUSH
57590: PPUSH
// if not unit or IsInUnit ( unit ) then
57591: LD_VAR 0 1
57595: NOT
57596: PUSH
57597: LD_VAR 0 1
57601: PPUSH
57602: CALL_OW 310
57606: OR
57607: IFFALSE 57611
// exit ;
57609: GO 57702
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57611: LD_ADDR_VAR 0 4
57615: PUSH
57616: LD_VAR 0 1
57620: PPUSH
57621: CALL_OW 250
57625: PPUSH
57626: LD_VAR 0 2
57630: PPUSH
57631: LD_INT 1
57633: PPUSH
57634: CALL_OW 272
57638: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57639: LD_ADDR_VAR 0 5
57643: PUSH
57644: LD_VAR 0 1
57648: PPUSH
57649: CALL_OW 251
57653: PPUSH
57654: LD_VAR 0 2
57658: PPUSH
57659: LD_INT 1
57661: PPUSH
57662: CALL_OW 273
57666: ST_TO_ADDR
// if ValidHex ( x , y ) then
57667: LD_VAR 0 4
57671: PPUSH
57672: LD_VAR 0 5
57676: PPUSH
57677: CALL_OW 488
57681: IFFALSE 57702
// ComTurnXY ( unit , x , y ) ;
57683: LD_VAR 0 1
57687: PPUSH
57688: LD_VAR 0 4
57692: PPUSH
57693: LD_VAR 0 5
57697: PPUSH
57698: CALL_OW 118
// end ;
57702: LD_VAR 0 3
57706: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57707: LD_INT 0
57709: PPUSH
57710: PPUSH
// result := false ;
57711: LD_ADDR_VAR 0 3
57715: PUSH
57716: LD_INT 0
57718: ST_TO_ADDR
// if not units then
57719: LD_VAR 0 2
57723: NOT
57724: IFFALSE 57728
// exit ;
57726: GO 57773
// for i in units do
57728: LD_ADDR_VAR 0 4
57732: PUSH
57733: LD_VAR 0 2
57737: PUSH
57738: FOR_IN
57739: IFFALSE 57771
// if See ( side , i ) then
57741: LD_VAR 0 1
57745: PPUSH
57746: LD_VAR 0 4
57750: PPUSH
57751: CALL_OW 292
57755: IFFALSE 57769
// begin result := true ;
57757: LD_ADDR_VAR 0 3
57761: PUSH
57762: LD_INT 1
57764: ST_TO_ADDR
// exit ;
57765: POP
57766: POP
57767: GO 57773
// end ;
57769: GO 57738
57771: POP
57772: POP
// end ;
57773: LD_VAR 0 3
57777: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57778: LD_INT 0
57780: PPUSH
57781: PPUSH
57782: PPUSH
57783: PPUSH
// if not unit or not points then
57784: LD_VAR 0 1
57788: NOT
57789: PUSH
57790: LD_VAR 0 2
57794: NOT
57795: OR
57796: IFFALSE 57800
// exit ;
57798: GO 57890
// dist := 99999 ;
57800: LD_ADDR_VAR 0 5
57804: PUSH
57805: LD_INT 99999
57807: ST_TO_ADDR
// for i in points do
57808: LD_ADDR_VAR 0 4
57812: PUSH
57813: LD_VAR 0 2
57817: PUSH
57818: FOR_IN
57819: IFFALSE 57888
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57821: LD_ADDR_VAR 0 6
57825: PUSH
57826: LD_VAR 0 1
57830: PPUSH
57831: LD_VAR 0 4
57835: PUSH
57836: LD_INT 1
57838: ARRAY
57839: PPUSH
57840: LD_VAR 0 4
57844: PUSH
57845: LD_INT 2
57847: ARRAY
57848: PPUSH
57849: CALL_OW 297
57853: ST_TO_ADDR
// if tmpDist < dist then
57854: LD_VAR 0 6
57858: PUSH
57859: LD_VAR 0 5
57863: LESS
57864: IFFALSE 57886
// begin result := i ;
57866: LD_ADDR_VAR 0 3
57870: PUSH
57871: LD_VAR 0 4
57875: ST_TO_ADDR
// dist := tmpDist ;
57876: LD_ADDR_VAR 0 5
57880: PUSH
57881: LD_VAR 0 6
57885: ST_TO_ADDR
// end ; end ;
57886: GO 57818
57888: POP
57889: POP
// end ;
57890: LD_VAR 0 3
57894: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57895: LD_INT 0
57897: PPUSH
// uc_side := side ;
57898: LD_ADDR_OWVAR 20
57902: PUSH
57903: LD_VAR 0 1
57907: ST_TO_ADDR
// uc_nation := 3 ;
57908: LD_ADDR_OWVAR 21
57912: PUSH
57913: LD_INT 3
57915: ST_TO_ADDR
// vc_chassis := 25 ;
57916: LD_ADDR_OWVAR 37
57920: PUSH
57921: LD_INT 25
57923: ST_TO_ADDR
// vc_engine := engine_siberite ;
57924: LD_ADDR_OWVAR 39
57928: PUSH
57929: LD_INT 3
57931: ST_TO_ADDR
// vc_control := control_computer ;
57932: LD_ADDR_OWVAR 38
57936: PUSH
57937: LD_INT 3
57939: ST_TO_ADDR
// vc_weapon := 59 ;
57940: LD_ADDR_OWVAR 40
57944: PUSH
57945: LD_INT 59
57947: ST_TO_ADDR
// result := CreateVehicle ;
57948: LD_ADDR_VAR 0 5
57952: PUSH
57953: CALL_OW 45
57957: ST_TO_ADDR
// SetDir ( result , d ) ;
57958: LD_VAR 0 5
57962: PPUSH
57963: LD_VAR 0 4
57967: PPUSH
57968: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57972: LD_VAR 0 5
57976: PPUSH
57977: LD_VAR 0 2
57981: PPUSH
57982: LD_VAR 0 3
57986: PPUSH
57987: LD_INT 0
57989: PPUSH
57990: CALL_OW 48
// end ;
57994: LD_VAR 0 5
57998: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57999: LD_INT 0
58001: PPUSH
58002: PPUSH
58003: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58004: LD_ADDR_VAR 0 2
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58027: LD_VAR 0 1
58031: NOT
58032: PUSH
58033: LD_VAR 0 1
58037: PPUSH
58038: CALL_OW 264
58042: PUSH
58043: LD_INT 12
58045: PUSH
58046: LD_INT 51
58048: PUSH
58049: LD_INT 32
58051: PUSH
58052: LD_INT 89
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: IN
58061: NOT
58062: OR
58063: IFFALSE 58067
// exit ;
58065: GO 58165
// for i := 1 to 3 do
58067: LD_ADDR_VAR 0 3
58071: PUSH
58072: DOUBLE
58073: LD_INT 1
58075: DEC
58076: ST_TO_ADDR
58077: LD_INT 3
58079: PUSH
58080: FOR_TO
58081: IFFALSE 58163
// begin tmp := GetCargo ( cargo , i ) ;
58083: LD_ADDR_VAR 0 4
58087: PUSH
58088: LD_VAR 0 1
58092: PPUSH
58093: LD_VAR 0 3
58097: PPUSH
58098: CALL_OW 289
58102: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58103: LD_ADDR_VAR 0 2
58107: PUSH
58108: LD_VAR 0 2
58112: PPUSH
58113: LD_VAR 0 3
58117: PPUSH
58118: LD_VAR 0 4
58122: PPUSH
58123: CALL_OW 1
58127: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58128: LD_ADDR_VAR 0 2
58132: PUSH
58133: LD_VAR 0 2
58137: PPUSH
58138: LD_INT 4
58140: PPUSH
58141: LD_VAR 0 2
58145: PUSH
58146: LD_INT 4
58148: ARRAY
58149: PUSH
58150: LD_VAR 0 4
58154: PLUS
58155: PPUSH
58156: CALL_OW 1
58160: ST_TO_ADDR
// end ;
58161: GO 58080
58163: POP
58164: POP
// end ;
58165: LD_VAR 0 2
58169: RET
// export function Length ( array ) ; begin
58170: LD_INT 0
58172: PPUSH
// result := array + 0 ;
58173: LD_ADDR_VAR 0 2
58177: PUSH
58178: LD_VAR 0 1
58182: PUSH
58183: LD_INT 0
58185: PLUS
58186: ST_TO_ADDR
// end ;
58187: LD_VAR 0 2
58191: RET
// export function PrepareArray ( array ) ; begin
58192: LD_INT 0
58194: PPUSH
// result := array diff 0 ;
58195: LD_ADDR_VAR 0 2
58199: PUSH
58200: LD_VAR 0 1
58204: PUSH
58205: LD_INT 0
58207: DIFF
58208: ST_TO_ADDR
// if not result [ 1 ] then
58209: LD_VAR 0 2
58213: PUSH
58214: LD_INT 1
58216: ARRAY
58217: NOT
58218: IFFALSE 58238
// result := Delete ( result , 1 ) ;
58220: LD_ADDR_VAR 0 2
58224: PUSH
58225: LD_VAR 0 2
58229: PPUSH
58230: LD_INT 1
58232: PPUSH
58233: CALL_OW 3
58237: ST_TO_ADDR
// end ;
58238: LD_VAR 0 2
58242: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58243: LD_INT 0
58245: PPUSH
58246: PPUSH
58247: PPUSH
58248: PPUSH
// sibRocketRange := 25 ;
58249: LD_ADDR_VAR 0 6
58253: PUSH
58254: LD_INT 25
58256: ST_TO_ADDR
// result := false ;
58257: LD_ADDR_VAR 0 4
58261: PUSH
58262: LD_INT 0
58264: ST_TO_ADDR
// for i := 0 to 5 do
58265: LD_ADDR_VAR 0 5
58269: PUSH
58270: DOUBLE
58271: LD_INT 0
58273: DEC
58274: ST_TO_ADDR
58275: LD_INT 5
58277: PUSH
58278: FOR_TO
58279: IFFALSE 58346
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58281: LD_VAR 0 1
58285: PPUSH
58286: LD_VAR 0 5
58290: PPUSH
58291: LD_VAR 0 6
58295: PPUSH
58296: CALL_OW 272
58300: PPUSH
58301: LD_VAR 0 2
58305: PPUSH
58306: LD_VAR 0 5
58310: PPUSH
58311: LD_VAR 0 6
58315: PPUSH
58316: CALL_OW 273
58320: PPUSH
58321: LD_VAR 0 3
58325: PPUSH
58326: CALL_OW 309
58330: IFFALSE 58344
// begin result := true ;
58332: LD_ADDR_VAR 0 4
58336: PUSH
58337: LD_INT 1
58339: ST_TO_ADDR
// exit ;
58340: POP
58341: POP
58342: GO 58348
// end ;
58344: GO 58278
58346: POP
58347: POP
// end ;
58348: LD_VAR 0 4
58352: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58353: LD_INT 0
58355: PPUSH
58356: PPUSH
58357: PPUSH
// if btype = b_depot then
58358: LD_VAR 0 2
58362: PUSH
58363: LD_INT 0
58365: EQUAL
58366: IFFALSE 58378
// begin result := true ;
58368: LD_ADDR_VAR 0 3
58372: PUSH
58373: LD_INT 1
58375: ST_TO_ADDR
// exit ;
58376: GO 58494
// end ; pom := GetBase ( depot ) ;
58378: LD_ADDR_VAR 0 4
58382: PUSH
58383: LD_VAR 0 1
58387: PPUSH
58388: CALL_OW 274
58392: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58393: LD_ADDR_VAR 0 5
58397: PUSH
58398: LD_VAR 0 2
58402: PPUSH
58403: LD_VAR 0 1
58407: PPUSH
58408: CALL_OW 248
58412: PPUSH
58413: CALL_OW 450
58417: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58418: LD_ADDR_VAR 0 3
58422: PUSH
58423: LD_VAR 0 4
58427: PPUSH
58428: LD_INT 1
58430: PPUSH
58431: CALL_OW 275
58435: PUSH
58436: LD_VAR 0 5
58440: PUSH
58441: LD_INT 1
58443: ARRAY
58444: GREATEREQUAL
58445: PUSH
58446: LD_VAR 0 4
58450: PPUSH
58451: LD_INT 2
58453: PPUSH
58454: CALL_OW 275
58458: PUSH
58459: LD_VAR 0 5
58463: PUSH
58464: LD_INT 2
58466: ARRAY
58467: GREATEREQUAL
58468: AND
58469: PUSH
58470: LD_VAR 0 4
58474: PPUSH
58475: LD_INT 3
58477: PPUSH
58478: CALL_OW 275
58482: PUSH
58483: LD_VAR 0 5
58487: PUSH
58488: LD_INT 3
58490: ARRAY
58491: GREATEREQUAL
58492: AND
58493: ST_TO_ADDR
// end ;
58494: LD_VAR 0 3
58498: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58499: LD_INT 0
58501: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58502: LD_VAR 0 1
58506: PPUSH
58507: LD_VAR 0 2
58511: PPUSH
58512: LD_INT 0
58514: PPUSH
58515: LD_INT 0
58517: PPUSH
58518: LD_INT 1
58520: PPUSH
58521: LD_INT 0
58523: PPUSH
58524: CALL_OW 587
// end ;
58528: LD_VAR 0 3
58532: RET
// export function CenterOnNow ( unit ) ; begin
58533: LD_INT 0
58535: PPUSH
// result := IsInUnit ( unit ) ;
58536: LD_ADDR_VAR 0 2
58540: PUSH
58541: LD_VAR 0 1
58545: PPUSH
58546: CALL_OW 310
58550: ST_TO_ADDR
// if not result then
58551: LD_VAR 0 2
58555: NOT
58556: IFFALSE 58568
// result := unit ;
58558: LD_ADDR_VAR 0 2
58562: PUSH
58563: LD_VAR 0 1
58567: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58568: LD_VAR 0 1
58572: PPUSH
58573: CALL_OW 87
// end ;
58577: LD_VAR 0 2
58581: RET
// export function ComMoveHex ( unit , hex ) ; begin
58582: LD_INT 0
58584: PPUSH
// if not hex then
58585: LD_VAR 0 2
58589: NOT
58590: IFFALSE 58594
// exit ;
58592: GO 58647
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58594: LD_VAR 0 2
58598: PUSH
58599: LD_INT 1
58601: ARRAY
58602: PPUSH
58603: LD_VAR 0 2
58607: PUSH
58608: LD_INT 2
58610: ARRAY
58611: PPUSH
58612: CALL_OW 428
58616: IFFALSE 58620
// exit ;
58618: GO 58647
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58620: LD_VAR 0 1
58624: PPUSH
58625: LD_VAR 0 2
58629: PUSH
58630: LD_INT 1
58632: ARRAY
58633: PPUSH
58634: LD_VAR 0 2
58638: PUSH
58639: LD_INT 2
58641: ARRAY
58642: PPUSH
58643: CALL_OW 111
// end ;
58647: LD_VAR 0 3
58651: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58652: LD_INT 0
58654: PPUSH
58655: PPUSH
58656: PPUSH
// if not unit or not enemy then
58657: LD_VAR 0 1
58661: NOT
58662: PUSH
58663: LD_VAR 0 2
58667: NOT
58668: OR
58669: IFFALSE 58673
// exit ;
58671: GO 58797
// x := GetX ( enemy ) ;
58673: LD_ADDR_VAR 0 4
58677: PUSH
58678: LD_VAR 0 2
58682: PPUSH
58683: CALL_OW 250
58687: ST_TO_ADDR
// y := GetY ( enemy ) ;
58688: LD_ADDR_VAR 0 5
58692: PUSH
58693: LD_VAR 0 2
58697: PPUSH
58698: CALL_OW 251
58702: ST_TO_ADDR
// if ValidHex ( x , y ) then
58703: LD_VAR 0 4
58707: PPUSH
58708: LD_VAR 0 5
58712: PPUSH
58713: CALL_OW 488
58717: IFFALSE 58797
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58719: LD_VAR 0 2
58723: PPUSH
58724: CALL_OW 247
58728: PUSH
58729: LD_INT 3
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: IN
58739: PUSH
58740: LD_VAR 0 1
58744: PPUSH
58745: CALL_OW 255
58749: PPUSH
58750: LD_VAR 0 2
58754: PPUSH
58755: CALL_OW 292
58759: OR
58760: IFFALSE 58778
// ComAttackUnit ( unit , enemy ) else
58762: LD_VAR 0 1
58766: PPUSH
58767: LD_VAR 0 2
58771: PPUSH
58772: CALL_OW 115
58776: GO 58797
// ComAgressiveMove ( unit , x , y ) ;
58778: LD_VAR 0 1
58782: PPUSH
58783: LD_VAR 0 4
58787: PPUSH
58788: LD_VAR 0 5
58792: PPUSH
58793: CALL_OW 114
// end ;
58797: LD_VAR 0 3
58801: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58802: LD_INT 0
58804: PPUSH
58805: PPUSH
58806: PPUSH
// list := AreaToList ( area , 0 ) ;
58807: LD_ADDR_VAR 0 5
58811: PUSH
58812: LD_VAR 0 1
58816: PPUSH
58817: LD_INT 0
58819: PPUSH
58820: CALL_OW 517
58824: ST_TO_ADDR
// if not list then
58825: LD_VAR 0 5
58829: NOT
58830: IFFALSE 58834
// exit ;
58832: GO 58964
// if all then
58834: LD_VAR 0 2
58838: IFFALSE 58926
// begin for i := 1 to list [ 1 ] do
58840: LD_ADDR_VAR 0 4
58844: PUSH
58845: DOUBLE
58846: LD_INT 1
58848: DEC
58849: ST_TO_ADDR
58850: LD_VAR 0 5
58854: PUSH
58855: LD_INT 1
58857: ARRAY
58858: PUSH
58859: FOR_TO
58860: IFFALSE 58922
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58862: LD_ADDR_VAR 0 3
58866: PUSH
58867: LD_VAR 0 3
58871: PPUSH
58872: LD_VAR 0 3
58876: PUSH
58877: LD_INT 1
58879: PLUS
58880: PPUSH
58881: LD_VAR 0 5
58885: PUSH
58886: LD_INT 1
58888: ARRAY
58889: PUSH
58890: LD_VAR 0 4
58894: ARRAY
58895: PUSH
58896: LD_VAR 0 5
58900: PUSH
58901: LD_INT 2
58903: ARRAY
58904: PUSH
58905: LD_VAR 0 4
58909: ARRAY
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PPUSH
58915: CALL_OW 1
58919: ST_TO_ADDR
58920: GO 58859
58922: POP
58923: POP
// exit ;
58924: GO 58964
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58926: LD_ADDR_VAR 0 3
58930: PUSH
58931: LD_VAR 0 5
58935: PUSH
58936: LD_INT 1
58938: ARRAY
58939: PUSH
58940: LD_INT 1
58942: ARRAY
58943: PUSH
58944: LD_VAR 0 5
58948: PUSH
58949: LD_INT 2
58951: ARRAY
58952: PUSH
58953: LD_INT 1
58955: ARRAY
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: EMPTY
58962: LIST
58963: ST_TO_ADDR
// end ;
58964: LD_VAR 0 3
58968: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58969: LD_INT 0
58971: PPUSH
58972: PPUSH
// list := AreaToList ( area , 0 ) ;
58973: LD_ADDR_VAR 0 4
58977: PUSH
58978: LD_VAR 0 1
58982: PPUSH
58983: LD_INT 0
58985: PPUSH
58986: CALL_OW 517
58990: ST_TO_ADDR
// if not list then
58991: LD_VAR 0 4
58995: NOT
58996: IFFALSE 59000
// exit ;
58998: GO 59041
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59000: LD_ADDR_VAR 0 3
59004: PUSH
59005: LD_VAR 0 4
59009: PUSH
59010: LD_INT 1
59012: ARRAY
59013: PUSH
59014: LD_INT 1
59016: ARRAY
59017: PUSH
59018: LD_VAR 0 4
59022: PUSH
59023: LD_INT 2
59025: ARRAY
59026: PUSH
59027: LD_INT 1
59029: ARRAY
59030: PUSH
59031: LD_VAR 0 2
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: LIST
59040: ST_TO_ADDR
// end ;
59041: LD_VAR 0 3
59045: RET
// export function First ( array ) ; begin
59046: LD_INT 0
59048: PPUSH
// if not array then
59049: LD_VAR 0 1
59053: NOT
59054: IFFALSE 59058
// exit ;
59056: GO 59072
// result := array [ 1 ] ;
59058: LD_ADDR_VAR 0 2
59062: PUSH
59063: LD_VAR 0 1
59067: PUSH
59068: LD_INT 1
59070: ARRAY
59071: ST_TO_ADDR
// end ;
59072: LD_VAR 0 2
59076: RET
// export function Last ( array ) ; begin
59077: LD_INT 0
59079: PPUSH
// if not array then
59080: LD_VAR 0 1
59084: NOT
59085: IFFALSE 59089
// exit ;
59087: GO 59105
// result := array [ array ] ;
59089: LD_ADDR_VAR 0 2
59093: PUSH
59094: LD_VAR 0 1
59098: PUSH
59099: LD_VAR 0 1
59103: ARRAY
59104: ST_TO_ADDR
// end ;
59105: LD_VAR 0 2
59109: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59110: LD_INT 0
59112: PPUSH
59113: PPUSH
// result := [ ] ;
59114: LD_ADDR_VAR 0 5
59118: PUSH
59119: EMPTY
59120: ST_TO_ADDR
// if not array then
59121: LD_VAR 0 1
59125: NOT
59126: IFFALSE 59130
// exit ;
59128: GO 59242
// for i := 1 to array do
59130: LD_ADDR_VAR 0 6
59134: PUSH
59135: DOUBLE
59136: LD_INT 1
59138: DEC
59139: ST_TO_ADDR
59140: LD_VAR 0 1
59144: PUSH
59145: FOR_TO
59146: IFFALSE 59240
// if array [ i ] [ index ] = value then
59148: LD_VAR 0 1
59152: PUSH
59153: LD_VAR 0 6
59157: ARRAY
59158: PUSH
59159: LD_VAR 0 2
59163: ARRAY
59164: PUSH
59165: LD_VAR 0 3
59169: EQUAL
59170: IFFALSE 59238
// begin if indexColumn then
59172: LD_VAR 0 4
59176: IFFALSE 59212
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59178: LD_ADDR_VAR 0 5
59182: PUSH
59183: LD_VAR 0 5
59187: PPUSH
59188: LD_VAR 0 1
59192: PUSH
59193: LD_VAR 0 6
59197: ARRAY
59198: PUSH
59199: LD_VAR 0 4
59203: ARRAY
59204: PPUSH
59205: CALL 54424 0 2
59209: ST_TO_ADDR
59210: GO 59238
// result := Join ( result , array [ i ] ) ;
59212: LD_ADDR_VAR 0 5
59216: PUSH
59217: LD_VAR 0 5
59221: PPUSH
59222: LD_VAR 0 1
59226: PUSH
59227: LD_VAR 0 6
59231: ARRAY
59232: PPUSH
59233: CALL 54424 0 2
59237: ST_TO_ADDR
// end ;
59238: GO 59145
59240: POP
59241: POP
// end ;
59242: LD_VAR 0 5
59246: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59247: LD_INT 0
59249: PPUSH
// if not vehicles or not parkingPoint then
59250: LD_VAR 0 1
59254: NOT
59255: PUSH
59256: LD_VAR 0 2
59260: NOT
59261: OR
59262: IFFALSE 59266
// exit ;
59264: GO 59364
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59266: LD_ADDR_VAR 0 1
59270: PUSH
59271: LD_VAR 0 1
59275: PPUSH
59276: LD_INT 50
59278: PUSH
59279: EMPTY
59280: LIST
59281: PUSH
59282: LD_INT 3
59284: PUSH
59285: LD_INT 92
59287: PUSH
59288: LD_VAR 0 2
59292: PUSH
59293: LD_INT 1
59295: ARRAY
59296: PUSH
59297: LD_VAR 0 2
59301: PUSH
59302: LD_INT 2
59304: ARRAY
59305: PUSH
59306: LD_INT 8
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PPUSH
59323: CALL_OW 72
59327: ST_TO_ADDR
// if not vehicles then
59328: LD_VAR 0 1
59332: NOT
59333: IFFALSE 59337
// exit ;
59335: GO 59364
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59337: LD_VAR 0 1
59341: PPUSH
59342: LD_VAR 0 2
59346: PUSH
59347: LD_INT 1
59349: ARRAY
59350: PPUSH
59351: LD_VAR 0 2
59355: PUSH
59356: LD_INT 2
59358: ARRAY
59359: PPUSH
59360: CALL_OW 111
// end ;
59364: LD_VAR 0 3
59368: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59369: LD_INT 0
59371: PPUSH
59372: PPUSH
59373: PPUSH
// if not side or not area then
59374: LD_VAR 0 1
59378: NOT
59379: PUSH
59380: LD_VAR 0 2
59384: NOT
59385: OR
59386: IFFALSE 59390
// exit ;
59388: GO 59509
// tmp := AreaToList ( area , 0 ) ;
59390: LD_ADDR_VAR 0 5
59394: PUSH
59395: LD_VAR 0 2
59399: PPUSH
59400: LD_INT 0
59402: PPUSH
59403: CALL_OW 517
59407: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59408: LD_ADDR_VAR 0 4
59412: PUSH
59413: DOUBLE
59414: LD_INT 1
59416: DEC
59417: ST_TO_ADDR
59418: LD_VAR 0 5
59422: PUSH
59423: LD_INT 1
59425: ARRAY
59426: PUSH
59427: FOR_TO
59428: IFFALSE 59507
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59430: LD_VAR 0 5
59434: PUSH
59435: LD_INT 1
59437: ARRAY
59438: PUSH
59439: LD_VAR 0 4
59443: ARRAY
59444: PPUSH
59445: LD_VAR 0 5
59449: PUSH
59450: LD_INT 2
59452: ARRAY
59453: PUSH
59454: LD_VAR 0 4
59458: ARRAY
59459: PPUSH
59460: CALL_OW 351
59464: IFFALSE 59505
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59466: LD_VAR 0 5
59470: PUSH
59471: LD_INT 1
59473: ARRAY
59474: PUSH
59475: LD_VAR 0 4
59479: ARRAY
59480: PPUSH
59481: LD_VAR 0 5
59485: PUSH
59486: LD_INT 2
59488: ARRAY
59489: PUSH
59490: LD_VAR 0 4
59494: ARRAY
59495: PPUSH
59496: LD_VAR 0 1
59500: PPUSH
59501: CALL_OW 244
// end ;
59505: GO 59427
59507: POP
59508: POP
// end ; end_of_file
59509: LD_VAR 0 3
59513: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59514: PPOPN 6
59516: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59517: LD_EXP 1
59521: PUSH
59522: LD_INT 4
59524: EQUAL
59525: IFFALSE 59561
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59527: LD_STRING setGameDifficulty(
59529: PUSH
59530: LD_OWVAR 67
59534: STR
59535: PUSH
59536: LD_STRING )
59538: STR
59539: PPUSH
59540: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59544: LD_STRING displayDifficulty(
59546: PUSH
59547: LD_OWVAR 67
59551: STR
59552: PUSH
59553: LD_STRING )
59555: STR
59556: PPUSH
59557: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59561: CALL 59590 0 0
// end ; end_of_file
59565: PPOPN 1
59567: END
// every 0 0$1 do
59568: GO 59570
59570: DISABLE
// begin enable ;
59571: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59572: LD_STRING updateTimer(
59574: PUSH
59575: LD_OWVAR 1
59579: STR
59580: PUSH
59581: LD_STRING );
59583: STR
59584: PPUSH
59585: CALL_OW 559
// end ;
59589: END
// export function SOS_MapStart ( ) ; begin
59590: LD_INT 0
59592: PPUSH
// UpdateFactoryWaypoints ( ) ;
59593: CALL 60518 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59597: CALL 60770 0 0
// ParseMultiDataToLua ( ) ;
59601: CALL 60917 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
59605: LD_STRING setSpecLogoNumber(
59607: PUSH
59608: LD_INT 2
59610: STR
59611: PUSH
59612: LD_STRING ,
59614: STR
59615: PUSH
59616: LD_INT 1
59618: STR
59619: PUSH
59620: LD_STRING )
59622: STR
59623: PPUSH
59624: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
59628: LD_STRING setSpecLogoNumber(
59630: PUSH
59631: LD_INT 3
59633: STR
59634: PUSH
59635: LD_STRING ,
59637: STR
59638: PUSH
59639: LD_INT 2
59641: STR
59642: PUSH
59643: LD_STRING )
59645: STR
59646: PPUSH
59647: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
59651: LD_STRING setSpecLogoNumber(
59653: PUSH
59654: LD_INT 4
59656: STR
59657: PUSH
59658: LD_STRING ,
59660: STR
59661: PUSH
59662: LD_INT 3
59664: STR
59665: PUSH
59666: LD_STRING )
59668: STR
59669: PPUSH
59670: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
59674: LD_STRING setSpecLogoNumber(
59676: PUSH
59677: LD_INT 5
59679: STR
59680: PUSH
59681: LD_STRING ,
59683: STR
59684: PUSH
59685: LD_INT 4
59687: STR
59688: PUSH
59689: LD_STRING )
59691: STR
59692: PPUSH
59693: CALL_OW 559
// end ;
59697: LD_VAR 0 1
59701: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
59702: LD_INT 0
59704: PPUSH
59705: PPUSH
59706: PPUSH
59707: PPUSH
59708: PPUSH
59709: PPUSH
59710: PPUSH
59711: PPUSH
59712: PPUSH
// for i := 1 to 8 do
59713: LD_ADDR_VAR 0 2
59717: PUSH
59718: DOUBLE
59719: LD_INT 1
59721: DEC
59722: ST_TO_ADDR
59723: LD_INT 8
59725: PUSH
59726: FOR_TO
59727: IFFALSE 60112
// begin if mpSidePositions [ i ] then
59729: LD_EXP 5
59733: PUSH
59734: LD_VAR 0 2
59738: ARRAY
59739: IFFALSE 60110
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
59741: LD_ADDR_VAR 0 7
59745: PUSH
59746: LD_INT 22
59748: PUSH
59749: LD_VAR 0 2
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 21
59760: PUSH
59761: LD_INT 1
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PPUSH
59772: CALL_OW 69
59776: PPUSH
59777: CALL 18815 0 1
59781: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59782: LD_ADDR_VAR 0 9
59786: PUSH
59787: LD_INT 22
59789: PUSH
59790: LD_VAR 0 2
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 2
59801: PUSH
59802: LD_INT 30
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 30
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: LIST
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PPUSH
59831: CALL_OW 69
59835: ST_TO_ADDR
// crates := 0 ;
59836: LD_ADDR_VAR 0 4
59840: PUSH
59841: LD_INT 0
59843: ST_TO_ADDR
// oil := 0 ;
59844: LD_ADDR_VAR 0 5
59848: PUSH
59849: LD_INT 0
59851: ST_TO_ADDR
// sib := 0 ;
59852: LD_ADDR_VAR 0 6
59856: PUSH
59857: LD_INT 0
59859: ST_TO_ADDR
// if bases then
59860: LD_VAR 0 9
59864: IFFALSE 59970
// begin for j in bases do
59866: LD_ADDR_VAR 0 3
59870: PUSH
59871: LD_VAR 0 9
59875: PUSH
59876: FOR_IN
59877: IFFALSE 59968
// begin base := GetBase ( j ) ;
59879: LD_ADDR_VAR 0 8
59883: PUSH
59884: LD_VAR 0 3
59888: PPUSH
59889: CALL_OW 274
59893: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
59894: LD_ADDR_VAR 0 4
59898: PUSH
59899: LD_VAR 0 4
59903: PUSH
59904: LD_VAR 0 8
59908: PPUSH
59909: LD_INT 1
59911: PPUSH
59912: CALL_OW 275
59916: PLUS
59917: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
59918: LD_ADDR_VAR 0 5
59922: PUSH
59923: LD_VAR 0 5
59927: PUSH
59928: LD_VAR 0 8
59932: PPUSH
59933: LD_INT 2
59935: PPUSH
59936: CALL_OW 275
59940: PLUS
59941: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
59942: LD_ADDR_VAR 0 6
59946: PUSH
59947: LD_VAR 0 6
59951: PUSH
59952: LD_VAR 0 8
59956: PPUSH
59957: LD_INT 3
59959: PPUSH
59960: CALL_OW 275
59964: PLUS
59965: ST_TO_ADDR
// end ;
59966: GO 59876
59968: POP
59969: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
59970: LD_STRING setSpecText(
59972: PUSH
59973: LD_VAR 0 2
59977: STR
59978: PUSH
59979: LD_STRING ,
59981: STR
59982: PUSH
59983: LD_INT 2
59985: STR
59986: PUSH
59987: LD_STRING ,
59989: STR
59990: PUSH
59991: LD_VAR 0 4
59995: STR
59996: PUSH
59997: LD_STRING )
59999: STR
60000: PPUSH
60001: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
60005: LD_STRING setSpecText(
60007: PUSH
60008: LD_VAR 0 2
60012: STR
60013: PUSH
60014: LD_STRING ,
60016: STR
60017: PUSH
60018: LD_INT 3
60020: STR
60021: PUSH
60022: LD_STRING ,
60024: STR
60025: PUSH
60026: LD_VAR 0 5
60030: STR
60031: PUSH
60032: LD_STRING )
60034: STR
60035: PPUSH
60036: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
60040: LD_STRING setSpecText(
60042: PUSH
60043: LD_VAR 0 2
60047: STR
60048: PUSH
60049: LD_STRING ,
60051: STR
60052: PUSH
60053: LD_INT 4
60055: STR
60056: PUSH
60057: LD_STRING ,
60059: STR
60060: PUSH
60061: LD_VAR 0 6
60065: STR
60066: PUSH
60067: LD_STRING )
60069: STR
60070: PPUSH
60071: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
60075: LD_STRING setSpecText(
60077: PUSH
60078: LD_VAR 0 2
60082: STR
60083: PUSH
60084: LD_STRING ,
60086: STR
60087: PUSH
60088: LD_INT 5
60090: STR
60091: PUSH
60092: LD_STRING ,
60094: STR
60095: PUSH
60096: LD_VAR 0 7
60100: STR
60101: PUSH
60102: LD_STRING )
60104: STR
60105: PPUSH
60106: CALL_OW 559
// end ; end ;
60110: GO 59726
60112: POP
60113: POP
// end ;
60114: LD_VAR 0 1
60118: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
60119: LD_INT 2
60121: PUSH
60122: LD_INT 30
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 30
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: LIST
60146: PPUSH
60147: CALL_OW 69
60151: IFFALSE 60161
60153: GO 60155
60155: DISABLE
// begin enable ;
60156: ENABLE
// UpdateSpectatorBar ;
60157: CALL 59702 0 0
// end ;
60161: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60162: LD_INT 0
60164: PPUSH
// end ;
60165: LD_VAR 0 12
60169: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
60170: LD_INT 0
60172: PPUSH
60173: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
60174: LD_VAR 0 1
60178: NOT
60179: PUSH
60180: LD_VAR 0 2
60184: PPUSH
60185: LD_VAR 0 3
60189: PPUSH
60190: CALL_OW 488
60194: NOT
60195: OR
60196: PUSH
60197: LD_VAR 0 1
60201: PPUSH
60202: CALL_OW 266
60206: PUSH
60207: LD_INT 3
60209: NONEQUAL
60210: PUSH
60211: LD_VAR 0 1
60215: PPUSH
60216: CALL_OW 247
60220: PUSH
60221: LD_INT 1
60223: EQUAL
60224: NOT
60225: AND
60226: OR
60227: IFFALSE 60231
// exit ;
60229: GO 60513
// if GetType ( factory ) = unit_human then
60231: LD_VAR 0 1
60235: PPUSH
60236: CALL_OW 247
60240: PUSH
60241: LD_INT 1
60243: EQUAL
60244: IFFALSE 60261
// factory := IsInUnit ( factory ) ;
60246: LD_ADDR_VAR 0 1
60250: PUSH
60251: LD_VAR 0 1
60255: PPUSH
60256: CALL_OW 310
60260: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60261: LD_VAR 0 1
60265: PPUSH
60266: CALL_OW 266
60270: PUSH
60271: LD_INT 3
60273: NONEQUAL
60274: IFFALSE 60278
// exit ;
60276: GO 60513
// for i := 1 to Count ( factoryWaypoints ) do
60278: LD_ADDR_VAR 0 5
60282: PUSH
60283: DOUBLE
60284: LD_INT 1
60286: DEC
60287: ST_TO_ADDR
60288: LD_EXP 53
60292: PPUSH
60293: CALL 18815 0 1
60297: PUSH
60298: FOR_TO
60299: IFFALSE 60461
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
60301: LD_VAR 0 2
60305: PPUSH
60306: LD_VAR 0 3
60310: PPUSH
60311: CALL_OW 428
60315: PUSH
60316: LD_EXP 53
60320: PUSH
60321: LD_VAR 0 5
60325: ARRAY
60326: PUSH
60327: LD_INT 2
60329: ARRAY
60330: EQUAL
60331: IFFALSE 60363
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60333: LD_ADDR_EXP 53
60337: PUSH
60338: LD_EXP 53
60342: PPUSH
60343: LD_VAR 0 5
60347: PPUSH
60348: CALL_OW 3
60352: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60353: CALL 60518 0 0
// exit ;
60357: POP
60358: POP
60359: GO 60513
// end else
60361: GO 60459
// if factory = factoryWaypoints [ i ] [ 2 ] then
60363: LD_VAR 0 1
60367: PUSH
60368: LD_EXP 53
60372: PUSH
60373: LD_VAR 0 5
60377: ARRAY
60378: PUSH
60379: LD_INT 2
60381: ARRAY
60382: EQUAL
60383: IFFALSE 60459
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60385: LD_ADDR_EXP 53
60389: PUSH
60390: LD_EXP 53
60394: PPUSH
60395: LD_VAR 0 5
60399: PPUSH
60400: CALL_OW 3
60404: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60405: LD_ADDR_EXP 53
60409: PUSH
60410: LD_EXP 53
60414: PPUSH
60415: LD_VAR 0 1
60419: PPUSH
60420: CALL_OW 255
60424: PUSH
60425: LD_VAR 0 1
60429: PUSH
60430: LD_VAR 0 2
60434: PUSH
60435: LD_VAR 0 3
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: PPUSH
60446: CALL 54424 0 2
60450: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60451: CALL 60518 0 0
// exit ;
60455: POP
60456: POP
60457: GO 60513
// end ; end ;
60459: GO 60298
60461: POP
60462: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60463: LD_ADDR_EXP 53
60467: PUSH
60468: LD_EXP 53
60472: PPUSH
60473: LD_VAR 0 1
60477: PPUSH
60478: CALL_OW 255
60482: PUSH
60483: LD_VAR 0 1
60487: PUSH
60488: LD_VAR 0 2
60492: PUSH
60493: LD_VAR 0 3
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: PPUSH
60504: CALL 54424 0 2
60508: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60509: CALL 60518 0 0
// end ;
60513: LD_VAR 0 4
60517: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60518: LD_INT 0
60520: PPUSH
60521: PPUSH
60522: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60523: LD_STRING resetFactoryWaypoint();
60525: PPUSH
60526: CALL_OW 559
// if factoryWaypoints then
60530: LD_EXP 53
60534: IFFALSE 60655
// begin list := factoryWaypoints ;
60536: LD_ADDR_VAR 0 3
60540: PUSH
60541: LD_EXP 53
60545: ST_TO_ADDR
// for i := 1 to list do
60546: LD_ADDR_VAR 0 2
60550: PUSH
60551: DOUBLE
60552: LD_INT 1
60554: DEC
60555: ST_TO_ADDR
60556: LD_VAR 0 3
60560: PUSH
60561: FOR_TO
60562: IFFALSE 60653
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60564: LD_STRING setFactoryWaypointXY(
60566: PUSH
60567: LD_VAR 0 3
60571: PUSH
60572: LD_VAR 0 2
60576: ARRAY
60577: PUSH
60578: LD_INT 1
60580: ARRAY
60581: STR
60582: PUSH
60583: LD_STRING ,
60585: STR
60586: PUSH
60587: LD_VAR 0 3
60591: PUSH
60592: LD_VAR 0 2
60596: ARRAY
60597: PUSH
60598: LD_INT 2
60600: ARRAY
60601: STR
60602: PUSH
60603: LD_STRING ,
60605: STR
60606: PUSH
60607: LD_VAR 0 3
60611: PUSH
60612: LD_VAR 0 2
60616: ARRAY
60617: PUSH
60618: LD_INT 3
60620: ARRAY
60621: STR
60622: PUSH
60623: LD_STRING ,
60625: STR
60626: PUSH
60627: LD_VAR 0 3
60631: PUSH
60632: LD_VAR 0 2
60636: ARRAY
60637: PUSH
60638: LD_INT 4
60640: ARRAY
60641: STR
60642: PUSH
60643: LD_STRING )
60645: STR
60646: PPUSH
60647: CALL_OW 559
60651: GO 60561
60653: POP
60654: POP
// end ; end ;
60655: LD_VAR 0 1
60659: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60660: LD_INT 0
60662: PPUSH
// if HexInfo ( x , y ) = warehouse then
60663: LD_VAR 0 2
60667: PPUSH
60668: LD_VAR 0 3
60672: PPUSH
60673: CALL_OW 428
60677: PUSH
60678: LD_VAR 0 1
60682: EQUAL
60683: IFFALSE 60710
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60685: LD_ADDR_EXP 55
60689: PUSH
60690: LD_EXP 55
60694: PPUSH
60695: LD_VAR 0 1
60699: PPUSH
60700: LD_INT 0
60702: PPUSH
60703: CALL_OW 1
60707: ST_TO_ADDR
60708: GO 60761
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60710: LD_ADDR_EXP 55
60714: PUSH
60715: LD_EXP 55
60719: PPUSH
60720: LD_VAR 0 1
60724: PPUSH
60725: LD_VAR 0 1
60729: PPUSH
60730: CALL_OW 255
60734: PUSH
60735: LD_VAR 0 1
60739: PUSH
60740: LD_VAR 0 2
60744: PUSH
60745: LD_VAR 0 3
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: PPUSH
60756: CALL_OW 1
60760: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60761: CALL 60770 0 0
// end ;
60765: LD_VAR 0 4
60769: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60770: LD_INT 0
60772: PPUSH
60773: PPUSH
60774: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60775: LD_STRING resetWarehouseGatheringPoints();
60777: PPUSH
60778: CALL_OW 559
// if warehouseGatheringPoints then
60782: LD_EXP 55
60786: IFFALSE 60912
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60788: LD_ADDR_VAR 0 3
60792: PUSH
60793: LD_EXP 55
60797: PPUSH
60798: CALL 58192 0 1
60802: ST_TO_ADDR
// for i := 1 to list do
60803: LD_ADDR_VAR 0 2
60807: PUSH
60808: DOUBLE
60809: LD_INT 1
60811: DEC
60812: ST_TO_ADDR
60813: LD_VAR 0 3
60817: PUSH
60818: FOR_TO
60819: IFFALSE 60910
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60821: LD_STRING setWarehouseGatheringPointXY(
60823: PUSH
60824: LD_VAR 0 3
60828: PUSH
60829: LD_VAR 0 2
60833: ARRAY
60834: PUSH
60835: LD_INT 1
60837: ARRAY
60838: STR
60839: PUSH
60840: LD_STRING ,
60842: STR
60843: PUSH
60844: LD_VAR 0 3
60848: PUSH
60849: LD_VAR 0 2
60853: ARRAY
60854: PUSH
60855: LD_INT 2
60857: ARRAY
60858: STR
60859: PUSH
60860: LD_STRING ,
60862: STR
60863: PUSH
60864: LD_VAR 0 3
60868: PUSH
60869: LD_VAR 0 2
60873: ARRAY
60874: PUSH
60875: LD_INT 3
60877: ARRAY
60878: STR
60879: PUSH
60880: LD_STRING ,
60882: STR
60883: PUSH
60884: LD_VAR 0 3
60888: PUSH
60889: LD_VAR 0 2
60893: ARRAY
60894: PUSH
60895: LD_INT 4
60897: ARRAY
60898: STR
60899: PUSH
60900: LD_STRING )
60902: STR
60903: PPUSH
60904: CALL_OW 559
60908: GO 60818
60910: POP
60911: POP
// end ; end ;
60912: LD_VAR 0 1
60916: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
60917: LD_INT 0
60919: PPUSH
60920: PPUSH
// if not mpSidePositions then
60921: LD_EXP 5
60925: NOT
60926: IFFALSE 60930
// exit ;
60928: GO 61001
// result :=  ;
60930: LD_ADDR_VAR 0 1
60934: PUSH
60935: LD_STRING 
60937: ST_TO_ADDR
// for i := 1 to 8 do
60938: LD_ADDR_VAR 0 2
60942: PUSH
60943: DOUBLE
60944: LD_INT 1
60946: DEC
60947: ST_TO_ADDR
60948: LD_INT 8
60950: PUSH
60951: FOR_TO
60952: IFFALSE 60982
// begin result := result & mpSidePositions [ i ] & ; ;
60954: LD_ADDR_VAR 0 1
60958: PUSH
60959: LD_VAR 0 1
60963: PUSH
60964: LD_EXP 5
60968: PUSH
60969: LD_VAR 0 2
60973: ARRAY
60974: STR
60975: PUSH
60976: LD_STRING ;
60978: STR
60979: ST_TO_ADDR
// end ;
60980: GO 60951
60982: POP
60983: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
60984: LD_STRING setMultiplayerRealPosition("
60986: PUSH
60987: LD_VAR 0 1
60991: STR
60992: PUSH
60993: LD_STRING ");
60995: STR
60996: PPUSH
60997: CALL_OW 559
// end ;
61001: LD_VAR 0 1
61005: RET
