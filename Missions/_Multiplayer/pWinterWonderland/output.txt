// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45645 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 45991 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 9
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 27
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 17
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 3
 844: PUSH
 845: LD_INT 4
 847: PUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 6
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea , MZSpecialArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 16
 866: PUSH
 867: LD_INT 7
 869: PUSH
 870: LD_INT 8
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 17
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 4
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 22
 921: PUSH
 922: LD_EXP 4
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 23
 935: PUSH
 936: LD_EXP 4
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 13
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 25
 963: PUSH
 964: LD_EXP 4
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 4
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 4
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// mpKingArea := 0 ;
1009: LD_ADDR_EXP 32
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// mpPoints := 0 ;
1017: LD_ADDR_EXP 33
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// mpEmissions := 0 ;
1025: LD_ADDR_EXP 35
1029: PUSH
1030: LD_INT 0
1032: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1033: LD_EXP 4
1037: PUSH
1038: LD_INT 9
1040: ARRAY
1041: IFFALSE 1173
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1043: LD_ADDR_EXP 34
1047: PUSH
1048: LD_INT 1
1050: PUSH
1051: LD_INT 1
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: LD_INT 2
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 1
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PUSH
1088: LD_INT 12
1090: PUSH
1091: LD_INT 1
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: LD_INT 24
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 12
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: LD_INT 23
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 21
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 42
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 21
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 42
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1173: LD_ADDR_EXP 14
1177: PUSH
1178: LD_EXP 4
1182: PUSH
1183: LD_INT 11
1185: ARRAY
1186: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1187: LD_ADDR_EXP 20
1191: PUSH
1192: LD_EXP 4
1196: PUSH
1197: LD_INT 12
1199: ARRAY
1200: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1201: LD_ADDR_EXP 24
1205: PUSH
1206: LD_EXP 4
1210: PUSH
1211: LD_INT 13
1213: ARRAY
1214: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1215: LD_ADDR_EXP 31
1219: PUSH
1220: LD_EXP 4
1224: PUSH
1225: LD_INT 14
1227: ARRAY
1228: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1229: LD_ADDR_EXP 28
1233: PUSH
1234: LD_EXP 4
1238: PUSH
1239: LD_INT 15
1241: ARRAY
1242: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1243: LD_ADDR_EXP 26
1247: PUSH
1248: LD_EXP 4
1252: PUSH
1253: LD_INT 18
1255: ARRAY
1256: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1257: LD_ADDR_EXP 18
1261: PUSH
1262: LD_EXP 4
1266: PUSH
1267: LD_INT 21
1269: ARRAY
1270: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1271: LD_ADDR_EXP 29
1275: PUSH
1276: LD_INT 9
1278: PUSH
1279: LD_INT 10
1281: PUSH
1282: LD_INT 11
1284: PUSH
1285: LD_INT 12
1287: PUSH
1288: LD_INT 13
1290: PUSH
1291: LD_INT 14
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 0 ) , GetBuildingFromArea ( depotArea2 , 0 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 3 ) ] ;
1302: LD_ADDR_VAR 0 8
1306: PUSH
1307: LD_INT 15
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL 45100 0 2
1317: PUSH
1318: LD_INT 16
1320: PPUSH
1321: LD_INT 0
1323: PPUSH
1324: CALL 45100 0 2
1328: PUSH
1329: LD_INT 17
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL 45100 0 2
1339: PUSH
1340: LD_INT 33
1342: PPUSH
1343: LD_INT 3
1345: PPUSH
1346: CALL 45100 0 2
1350: PUSH
1351: LD_INT 39
1353: PPUSH
1354: LD_INT 3
1356: PPUSH
1357: CALL 45100 0 2
1361: PUSH
1362: LD_INT 45
1364: PPUSH
1365: LD_INT 3
1367: PPUSH
1368: CALL 45100 0 2
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1381: LD_ADDR_VAR 0 3
1385: PUSH
1386: DOUBLE
1387: LD_INT 1
1389: DEC
1390: ST_TO_ADDR
1391: LD_VAR 0 8
1395: PPUSH
1396: CALL 4946 0 1
1400: PUSH
1401: FOR_TO
1402: IFFALSE 1506
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1404: LD_ADDR_EXP 19
1408: PUSH
1409: LD_EXP 19
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: LD_VAR 0 8
1423: PUSH
1424: LD_VAR 0 3
1428: ARRAY
1429: PUSH
1430: LD_INT 1
1432: ARRAY
1433: PPUSH
1434: LD_VAR 0 8
1438: PUSH
1439: LD_VAR 0 3
1443: ARRAY
1444: PUSH
1445: LD_INT 3
1447: ARRAY
1448: PPUSH
1449: LD_INT 10
1451: PPUSH
1452: CALL_OW 272
1456: PUSH
1457: LD_VAR 0 8
1461: PUSH
1462: LD_VAR 0 3
1466: ARRAY
1467: PUSH
1468: LD_INT 2
1470: ARRAY
1471: PPUSH
1472: LD_VAR 0 8
1476: PUSH
1477: LD_VAR 0 3
1481: ARRAY
1482: PUSH
1483: LD_INT 3
1485: ARRAY
1486: PPUSH
1487: LD_INT 10
1489: PPUSH
1490: CALL_OW 273
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PPUSH
1499: CALL_OW 1
1503: ST_TO_ADDR
1504: GO 1401
1506: POP
1507: POP
// if hasOil then
1508: LD_VAR 0 5
1512: IFFALSE 1623
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1514: LD_ADDR_VAR 0 4
1518: PUSH
1519: LD_EXP 4
1523: PUSH
1524: LD_INT 6
1526: ARRAY
1527: PUSH
1528: LD_INT 2
1530: EQUAL
1531: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1532: LD_ADDR_EXP 10
1536: PUSH
1537: LD_INT 18
1539: PPUSH
1540: LD_VAR 0 4
1544: PPUSH
1545: CALL 44933 0 2
1549: PUSH
1550: LD_INT 19
1552: PPUSH
1553: LD_VAR 0 4
1557: PPUSH
1558: CALL 44933 0 2
1562: PUSH
1563: LD_INT 20
1565: PPUSH
1566: LD_VAR 0 4
1570: PPUSH
1571: CALL 44933 0 2
1575: PUSH
1576: LD_INT 37
1578: PPUSH
1579: LD_VAR 0 4
1583: PPUSH
1584: CALL 44933 0 2
1588: PUSH
1589: LD_INT 43
1591: PPUSH
1592: LD_VAR 0 4
1596: PPUSH
1597: CALL 44933 0 2
1601: PUSH
1602: LD_INT 49
1604: PPUSH
1605: LD_VAR 0 4
1609: PPUSH
1610: CALL 44933 0 2
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: ST_TO_ADDR
// end ; if hasSib then
1623: LD_VAR 0 6
1627: IFFALSE 1738
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1629: LD_ADDR_VAR 0 4
1633: PUSH
1634: LD_EXP 4
1638: PUSH
1639: LD_INT 7
1641: ARRAY
1642: PUSH
1643: LD_INT 2
1645: EQUAL
1646: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1647: LD_ADDR_EXP 11
1651: PUSH
1652: LD_INT 21
1654: PPUSH
1655: LD_VAR 0 4
1659: PPUSH
1660: CALL 44933 0 2
1664: PUSH
1665: LD_INT 22
1667: PPUSH
1668: LD_VAR 0 4
1672: PPUSH
1673: CALL 44933 0 2
1677: PUSH
1678: LD_INT 23
1680: PPUSH
1681: LD_VAR 0 4
1685: PPUSH
1686: CALL 44933 0 2
1690: PUSH
1691: LD_INT 38
1693: PPUSH
1694: LD_VAR 0 4
1698: PPUSH
1699: CALL 44933 0 2
1703: PUSH
1704: LD_INT 44
1706: PPUSH
1707: LD_VAR 0 4
1711: PPUSH
1712: CALL 44933 0 2
1716: PUSH
1717: LD_INT 50
1719: PPUSH
1720: LD_VAR 0 4
1724: PPUSH
1725: CALL 44933 0 2
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1738: LD_VAR 0 7
1742: PUSH
1743: LD_INT 1
1745: GREATEREQUAL
1746: IFFALSE 1758
// mpDepots := startPos ;
1748: LD_ADDR_EXP 12
1752: PUSH
1753: LD_VAR 0 8
1757: ST_TO_ADDR
// if baseLevel >= 2 then
1758: LD_VAR 0 7
1762: PUSH
1763: LD_INT 2
1765: GREATEREQUAL
1766: IFFALSE 2081
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 0 ) ] ] ;
1768: LD_ADDR_EXP 15
1772: PUSH
1773: LD_INT 31
1775: PUSH
1776: LD_INT 24
1778: PPUSH
1779: LD_INT 3
1781: PPUSH
1782: CALL 45100 0 2
1786: ADD
1787: PUSH
1788: LD_INT 31
1790: PUSH
1791: LD_INT 25
1793: PPUSH
1794: LD_INT 3
1796: PPUSH
1797: CALL 45100 0 2
1801: ADD
1802: PUSH
1803: LD_INT 4
1805: PUSH
1806: LD_INT 26
1808: PPUSH
1809: LD_INT 3
1811: PPUSH
1812: CALL 45100 0 2
1816: ADD
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 31
1825: PUSH
1826: LD_INT 27
1828: PPUSH
1829: LD_INT 3
1831: PPUSH
1832: CALL 45100 0 2
1836: ADD
1837: PUSH
1838: LD_INT 31
1840: PUSH
1841: LD_INT 28
1843: PPUSH
1844: LD_INT 4
1846: PPUSH
1847: CALL 45100 0 2
1851: ADD
1852: PUSH
1853: LD_INT 4
1855: PUSH
1856: LD_INT 29
1858: PPUSH
1859: LD_INT 3
1861: PPUSH
1862: CALL 45100 0 2
1866: ADD
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 31
1875: PUSH
1876: LD_INT 30
1878: PPUSH
1879: LD_INT 3
1881: PPUSH
1882: CALL 45100 0 2
1886: ADD
1887: PUSH
1888: LD_INT 31
1890: PUSH
1891: LD_INT 31
1893: PPUSH
1894: LD_INT 4
1896: PPUSH
1897: CALL 45100 0 2
1901: ADD
1902: PUSH
1903: LD_INT 4
1905: PUSH
1906: LD_INT 32
1908: PPUSH
1909: LD_INT 3
1911: PPUSH
1912: CALL 45100 0 2
1916: ADD
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 31
1925: PUSH
1926: LD_INT 34
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: CALL 45100 0 2
1936: ADD
1937: PUSH
1938: LD_INT 31
1940: PUSH
1941: LD_INT 35
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL 45100 0 2
1951: ADD
1952: PUSH
1953: LD_INT 4
1955: PUSH
1956: LD_INT 36
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL 45100 0 2
1966: ADD
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 31
1975: PUSH
1976: LD_INT 40
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL 45100 0 2
1986: ADD
1987: PUSH
1988: LD_INT 31
1990: PUSH
1991: LD_INT 41
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL 45100 0 2
2001: ADD
2002: PUSH
2003: LD_INT 4
2005: PUSH
2006: LD_INT 42
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL 45100 0 2
2016: ADD
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 31
2025: PUSH
2026: LD_INT 46
2028: PPUSH
2029: LD_INT 0
2031: PPUSH
2032: CALL 45100 0 2
2036: ADD
2037: PUSH
2038: LD_INT 31
2040: PUSH
2041: LD_INT 47
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL 45100 0 2
2051: ADD
2052: PUSH
2053: LD_INT 4
2055: PUSH
2056: LD_INT 48
2058: PPUSH
2059: LD_INT 0
2061: PPUSH
2062: CALL 45100 0 2
2066: ADD
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: ST_TO_ADDR
// end ; end ;
2081: LD_VAR 0 2
2085: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2086: GO 2088
2088: DISABLE
2089: LD_INT 0
2091: PPUSH
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
2096: PPUSH
2097: PPUSH
2098: PPUSH
// begin if not mpShipments then
2099: LD_EXP 25
2103: NOT
2104: IFFALSE 2108
// exit ;
2106: GO 2673
// case mpShipments of 1 :
2108: LD_EXP 25
2112: PUSH
2113: LD_INT 1
2115: DOUBLE
2116: EQUAL
2117: IFTRUE 2121
2119: GO 2156
2121: POP
// begin time := 0 0$30 ;
2122: LD_ADDR_VAR 0 4
2126: PUSH
2127: LD_INT 1050
2129: ST_TO_ADDR
// normalTime := 0 0$30 ;
2130: LD_ADDR_VAR 0 6
2134: PUSH
2135: LD_INT 1050
2137: ST_TO_ADDR
// maxTime := 1 1$20 ;
2138: LD_ADDR_VAR 0 8
2142: PUSH
2143: LD_INT 2800
2145: ST_TO_ADDR
// delayTime := 0 0$5 ;
2146: LD_ADDR_VAR 0 7
2150: PUSH
2151: LD_INT 175
2153: ST_TO_ADDR
// end ; 2 :
2154: GO 2286
2156: LD_INT 2
2158: DOUBLE
2159: EQUAL
2160: IFTRUE 2164
2162: GO 2199
2164: POP
// begin time := 0 0$25 ;
2165: LD_ADDR_VAR 0 4
2169: PUSH
2170: LD_INT 875
2172: ST_TO_ADDR
// normalTime := 0 0$25 ;
2173: LD_ADDR_VAR 0 6
2177: PUSH
2178: LD_INT 875
2180: ST_TO_ADDR
// maxTime := 1 1$10 ;
2181: LD_ADDR_VAR 0 8
2185: PUSH
2186: LD_INT 2450
2188: ST_TO_ADDR
// delayTime := 0 0$4 ;
2189: LD_ADDR_VAR 0 7
2193: PUSH
2194: LD_INT 140
2196: ST_TO_ADDR
// end ; 3 :
2197: GO 2286
2199: LD_INT 3
2201: DOUBLE
2202: EQUAL
2203: IFTRUE 2207
2205: GO 2242
2207: POP
// begin time := 0 0$20 ;
2208: LD_ADDR_VAR 0 4
2212: PUSH
2213: LD_INT 700
2215: ST_TO_ADDR
// normalTime := 0 0$20 ;
2216: LD_ADDR_VAR 0 6
2220: PUSH
2221: LD_INT 700
2223: ST_TO_ADDR
// maxTime := 1 1$00 ;
2224: LD_ADDR_VAR 0 8
2228: PUSH
2229: LD_INT 2100
2231: ST_TO_ADDR
// delayTime := 0 0$3 ;
2232: LD_ADDR_VAR 0 7
2236: PUSH
2237: LD_INT 105
2239: ST_TO_ADDR
// end ; 4 :
2240: GO 2286
2242: LD_INT 4
2244: DOUBLE
2245: EQUAL
2246: IFTRUE 2250
2248: GO 2285
2250: POP
// begin time := 0 0$15 ;
2251: LD_ADDR_VAR 0 4
2255: PUSH
2256: LD_INT 525
2258: ST_TO_ADDR
// normalTime := 0 0$15 ;
2259: LD_ADDR_VAR 0 6
2263: PUSH
2264: LD_INT 525
2266: ST_TO_ADDR
// maxTime := 0 0$55 ;
2267: LD_ADDR_VAR 0 8
2271: PUSH
2272: LD_INT 1925
2274: ST_TO_ADDR
// delayTime := 0 0$2 ;
2275: LD_ADDR_VAR 0 7
2279: PUSH
2280: LD_INT 70
2282: ST_TO_ADDR
// end ; end ;
2283: GO 2286
2285: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 2
2296: PUSH
2297: LD_INT 3
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 5
2305: PUSH
2306: LD_INT 6
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: ST_TO_ADDR
// areas := [ ] ;
2317: LD_ADDR_VAR 0 5
2321: PUSH
2322: EMPTY
2323: ST_TO_ADDR
// for i := 1 to 8 do
2324: LD_ADDR_VAR 0 1
2328: PUSH
2329: DOUBLE
2330: LD_INT 1
2332: DEC
2333: ST_TO_ADDR
2334: LD_INT 8
2336: PUSH
2337: FOR_TO
2338: IFFALSE 2385
// begin if not mpSidePositions [ i ] then
2340: LD_EXP 5
2344: PUSH
2345: LD_VAR 0 1
2349: ARRAY
2350: NOT
2351: IFFALSE 2355
// continue ;
2353: GO 2337
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2355: LD_ADDR_VAR 0 5
2359: PUSH
2360: LD_VAR 0 5
2364: PUSH
2365: LD_VAR 0 3
2369: PUSH
2370: LD_EXP 5
2374: PUSH
2375: LD_VAR 0 1
2379: ARRAY
2380: ARRAY
2381: ADD
2382: ST_TO_ADDR
// end ;
2383: GO 2337
2385: POP
2386: POP
// x := 1 ;
2387: LD_ADDR_VAR 0 2
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// repeat wait ( time ) ;
2395: LD_VAR 0 4
2399: PPUSH
2400: CALL_OW 67
// x := Inc ( x ) ;
2404: LD_ADDR_VAR 0 2
2408: PUSH
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL 41916 0 1
2418: ST_TO_ADDR
// if x > 5 then
2419: LD_VAR 0 2
2423: PUSH
2424: LD_INT 5
2426: GREATER
2427: IFFALSE 2437
// x := 1 ;
2429: LD_ADDR_VAR 0 2
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// for i in areas do
2437: LD_ADDR_VAR 0 1
2441: PUSH
2442: LD_VAR 0 5
2446: PUSH
2447: FOR_IN
2448: IFFALSE 2487
// begin if GetResourceArea ( i , mat_cans ) < 25 then
2450: LD_VAR 0 1
2454: PPUSH
2455: LD_INT 1
2457: PPUSH
2458: CALL_OW 287
2462: PUSH
2463: LD_INT 25
2465: LESS
2466: IFFALSE 2485
// begin CreateCratesArea ( x , i , true ) ;
2468: LD_VAR 0 2
2472: PPUSH
2473: LD_VAR 0 1
2477: PPUSH
2478: LD_INT 1
2480: PPUSH
2481: CALL_OW 55
// end ; end ;
2485: GO 2447
2487: POP
2488: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 100 then
2489: LD_INT 7
2491: PPUSH
2492: LD_INT 1
2494: PPUSH
2495: CALL_OW 287
2499: PUSH
2500: LD_INT 100
2502: LESS
2503: IFFALSE 2547
// for i := 1 to Count ( areas ) do
2505: LD_ADDR_VAR 0 1
2509: PUSH
2510: DOUBLE
2511: LD_INT 1
2513: DEC
2514: ST_TO_ADDR
2515: LD_VAR 0 5
2519: PPUSH
2520: CALL 4946 0 1
2524: PUSH
2525: FOR_TO
2526: IFFALSE 2545
// CreateCratesArea ( x , MZBaseArea , true ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 7
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 55
2543: GO 2525
2545: POP
2546: POP
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 50 then
2547: LD_INT 8
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: CALL_OW 287
2557: PUSH
2558: LD_INT 50
2560: LESS
2561: IFFALSE 2600
// begin for i := 1 to 4 do
2563: LD_ADDR_VAR 0 1
2567: PUSH
2568: DOUBLE
2569: LD_INT 1
2571: DEC
2572: ST_TO_ADDR
2573: LD_INT 4
2575: PUSH
2576: FOR_TO
2577: IFFALSE 2596
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2579: LD_VAR 0 2
2583: PPUSH
2584: LD_INT 8
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: CALL_OW 55
2594: GO 2576
2596: POP
2597: POP
// end else
2598: GO 2631
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 100 then
2600: LD_INT 8
2602: PPUSH
2603: LD_INT 1
2605: PPUSH
2606: CALL_OW 287
2610: PUSH
2611: LD_INT 100
2613: LESS
2614: IFFALSE 2631
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 8
2623: PPUSH
2624: LD_INT 1
2626: PPUSH
2627: CALL_OW 55
// time := time + delayTime ;
2631: LD_ADDR_VAR 0 4
2635: PUSH
2636: LD_VAR 0 4
2640: PUSH
2641: LD_VAR 0 7
2645: PLUS
2646: ST_TO_ADDR
// if time > maxTime then
2647: LD_VAR 0 4
2651: PUSH
2652: LD_VAR 0 8
2656: GREATER
2657: IFFALSE 2669
// time := normalTime ;
2659: LD_ADDR_VAR 0 4
2663: PUSH
2664: LD_VAR 0 6
2668: ST_TO_ADDR
// until false ;
2669: LD_INT 0
2671: IFFALSE 2395
// end ; end_of_file
2673: PPOPN 8
2675: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2676: LD_VAR 0 1
2680: PPUSH
2681: CALL 53932 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2685: LD_VAR 0 1
2689: PPUSH
2690: CALL 50577 0 1
// end ;
2694: PPOPN 1
2696: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2697: LD_VAR 0 1
2701: PPUSH
2702: CALL 53949 0 1
// end ;
2706: PPOPN 1
2708: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2709: LD_VAR 0 1
2713: PPUSH
2714: CALL 51242 0 1
2718: PPOPN 1
2720: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2721: LD_VAR 0 1
2725: PPUSH
2726: LD_VAR 0 2
2730: PPUSH
2731: CALL 53990 0 2
2735: PPOPN 2
2737: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2738: LD_VAR 0 1
2742: PPUSH
2743: LD_VAR 0 2
2747: PPUSH
2748: LD_VAR 0 3
2752: PPUSH
2753: CALL 51295 0 3
2757: PPOPN 3
2759: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2760: LD_INT 0
2762: PPUSH
2763: PPUSH
// if exist_mode then
2764: LD_VAR 0 2
2768: IFFALSE 2814
// begin unit := CreateCharacter ( prefix & ident ) ;
2770: LD_ADDR_VAR 0 5
2774: PUSH
2775: LD_VAR 0 3
2779: PUSH
2780: LD_VAR 0 1
2784: STR
2785: PPUSH
2786: CALL_OW 34
2790: ST_TO_ADDR
// if unit then
2791: LD_VAR 0 5
2795: IFFALSE 2812
// DeleteCharacters ( prefix & ident ) ;
2797: LD_VAR 0 3
2801: PUSH
2802: LD_VAR 0 1
2806: STR
2807: PPUSH
2808: CALL_OW 40
// end else
2812: GO 2829
// unit := NewCharacter ( ident ) ;
2814: LD_ADDR_VAR 0 5
2818: PUSH
2819: LD_VAR 0 1
2823: PPUSH
2824: CALL_OW 25
2828: ST_TO_ADDR
// result := unit ;
2829: LD_ADDR_VAR 0 4
2833: PUSH
2834: LD_VAR 0 5
2838: ST_TO_ADDR
// end ;
2839: LD_VAR 0 4
2843: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
// if exist_mode then
2848: LD_VAR 0 2
2852: IFFALSE 2877
// unit := CreateCharacter ( prefix & ident ) else
2854: LD_ADDR_VAR 0 5
2858: PUSH
2859: LD_VAR 0 3
2863: PUSH
2864: LD_VAR 0 1
2868: STR
2869: PPUSH
2870: CALL_OW 34
2874: ST_TO_ADDR
2875: GO 2892
// unit := NewCharacter ( ident ) ;
2877: LD_ADDR_VAR 0 5
2881: PUSH
2882: LD_VAR 0 1
2886: PPUSH
2887: CALL_OW 25
2891: ST_TO_ADDR
// result := unit ;
2892: LD_ADDR_VAR 0 4
2896: PUSH
2897: LD_VAR 0 5
2901: ST_TO_ADDR
// end ;
2902: LD_VAR 0 4
2906: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2907: LD_INT 0
2909: PPUSH
2910: PPUSH
// if not side or not nation then
2911: LD_VAR 0 1
2915: NOT
2916: PUSH
2917: LD_VAR 0 2
2921: NOT
2922: OR
2923: IFFALSE 2927
// exit ;
2925: GO 3695
// case nation of nation_american :
2927: LD_VAR 0 2
2931: PUSH
2932: LD_INT 1
2934: DOUBLE
2935: EQUAL
2936: IFTRUE 2940
2938: GO 3154
2940: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2941: LD_ADDR_VAR 0 4
2945: PUSH
2946: LD_INT 35
2948: PUSH
2949: LD_INT 45
2951: PUSH
2952: LD_INT 46
2954: PUSH
2955: LD_INT 47
2957: PUSH
2958: LD_INT 82
2960: PUSH
2961: LD_INT 83
2963: PUSH
2964: LD_INT 84
2966: PUSH
2967: LD_INT 85
2969: PUSH
2970: LD_INT 86
2972: PUSH
2973: LD_INT 1
2975: PUSH
2976: LD_INT 2
2978: PUSH
2979: LD_INT 6
2981: PUSH
2982: LD_INT 15
2984: PUSH
2985: LD_INT 16
2987: PUSH
2988: LD_INT 7
2990: PUSH
2991: LD_INT 12
2993: PUSH
2994: LD_INT 13
2996: PUSH
2997: LD_INT 10
2999: PUSH
3000: LD_INT 14
3002: PUSH
3003: LD_INT 20
3005: PUSH
3006: LD_INT 21
3008: PUSH
3009: LD_INT 22
3011: PUSH
3012: LD_INT 25
3014: PUSH
3015: LD_INT 32
3017: PUSH
3018: LD_INT 27
3020: PUSH
3021: LD_INT 36
3023: PUSH
3024: LD_INT 69
3026: PUSH
3027: LD_INT 39
3029: PUSH
3030: LD_INT 34
3032: PUSH
3033: LD_INT 40
3035: PUSH
3036: LD_INT 48
3038: PUSH
3039: LD_INT 49
3041: PUSH
3042: LD_INT 50
3044: PUSH
3045: LD_INT 51
3047: PUSH
3048: LD_INT 52
3050: PUSH
3051: LD_INT 53
3053: PUSH
3054: LD_INT 54
3056: PUSH
3057: LD_INT 55
3059: PUSH
3060: LD_INT 56
3062: PUSH
3063: LD_INT 57
3065: PUSH
3066: LD_INT 58
3068: PUSH
3069: LD_INT 59
3071: PUSH
3072: LD_INT 60
3074: PUSH
3075: LD_INT 61
3077: PUSH
3078: LD_INT 62
3080: PUSH
3081: LD_INT 80
3083: PUSH
3084: LD_INT 82
3086: PUSH
3087: LD_INT 83
3089: PUSH
3090: LD_INT 84
3092: PUSH
3093: LD_INT 85
3095: PUSH
3096: LD_INT 86
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: ST_TO_ADDR
3152: GO 3619
3154: LD_INT 2
3156: DOUBLE
3157: EQUAL
3158: IFTRUE 3162
3160: GO 3388
3162: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3163: LD_ADDR_VAR 0 4
3167: PUSH
3168: LD_INT 35
3170: PUSH
3171: LD_INT 45
3173: PUSH
3174: LD_INT 46
3176: PUSH
3177: LD_INT 47
3179: PUSH
3180: LD_INT 82
3182: PUSH
3183: LD_INT 83
3185: PUSH
3186: LD_INT 84
3188: PUSH
3189: LD_INT 85
3191: PUSH
3192: LD_INT 87
3194: PUSH
3195: LD_INT 70
3197: PUSH
3198: LD_INT 1
3200: PUSH
3201: LD_INT 11
3203: PUSH
3204: LD_INT 3
3206: PUSH
3207: LD_INT 4
3209: PUSH
3210: LD_INT 5
3212: PUSH
3213: LD_INT 6
3215: PUSH
3216: LD_INT 15
3218: PUSH
3219: LD_INT 18
3221: PUSH
3222: LD_INT 7
3224: PUSH
3225: LD_INT 17
3227: PUSH
3228: LD_INT 8
3230: PUSH
3231: LD_INT 20
3233: PUSH
3234: LD_INT 21
3236: PUSH
3237: LD_INT 22
3239: PUSH
3240: LD_INT 72
3242: PUSH
3243: LD_INT 26
3245: PUSH
3246: LD_INT 69
3248: PUSH
3249: LD_INT 39
3251: PUSH
3252: LD_INT 40
3254: PUSH
3255: LD_INT 41
3257: PUSH
3258: LD_INT 42
3260: PUSH
3261: LD_INT 43
3263: PUSH
3264: LD_INT 48
3266: PUSH
3267: LD_INT 49
3269: PUSH
3270: LD_INT 50
3272: PUSH
3273: LD_INT 51
3275: PUSH
3276: LD_INT 52
3278: PUSH
3279: LD_INT 53
3281: PUSH
3282: LD_INT 54
3284: PUSH
3285: LD_INT 55
3287: PUSH
3288: LD_INT 56
3290: PUSH
3291: LD_INT 60
3293: PUSH
3294: LD_INT 61
3296: PUSH
3297: LD_INT 62
3299: PUSH
3300: LD_INT 66
3302: PUSH
3303: LD_INT 67
3305: PUSH
3306: LD_INT 68
3308: PUSH
3309: LD_INT 81
3311: PUSH
3312: LD_INT 82
3314: PUSH
3315: LD_INT 83
3317: PUSH
3318: LD_INT 84
3320: PUSH
3321: LD_INT 85
3323: PUSH
3324: LD_INT 87
3326: PUSH
3327: LD_INT 88
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: ST_TO_ADDR
3386: GO 3619
3388: LD_INT 3
3390: DOUBLE
3391: EQUAL
3392: IFTRUE 3396
3394: GO 3618
3396: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3397: LD_ADDR_VAR 0 4
3401: PUSH
3402: LD_INT 46
3404: PUSH
3405: LD_INT 47
3407: PUSH
3408: LD_INT 1
3410: PUSH
3411: LD_INT 2
3413: PUSH
3414: LD_INT 82
3416: PUSH
3417: LD_INT 83
3419: PUSH
3420: LD_INT 84
3422: PUSH
3423: LD_INT 85
3425: PUSH
3426: LD_INT 86
3428: PUSH
3429: LD_INT 11
3431: PUSH
3432: LD_INT 9
3434: PUSH
3435: LD_INT 20
3437: PUSH
3438: LD_INT 19
3440: PUSH
3441: LD_INT 21
3443: PUSH
3444: LD_INT 24
3446: PUSH
3447: LD_INT 22
3449: PUSH
3450: LD_INT 25
3452: PUSH
3453: LD_INT 28
3455: PUSH
3456: LD_INT 29
3458: PUSH
3459: LD_INT 30
3461: PUSH
3462: LD_INT 31
3464: PUSH
3465: LD_INT 37
3467: PUSH
3468: LD_INT 38
3470: PUSH
3471: LD_INT 32
3473: PUSH
3474: LD_INT 27
3476: PUSH
3477: LD_INT 33
3479: PUSH
3480: LD_INT 69
3482: PUSH
3483: LD_INT 39
3485: PUSH
3486: LD_INT 34
3488: PUSH
3489: LD_INT 40
3491: PUSH
3492: LD_INT 71
3494: PUSH
3495: LD_INT 23
3497: PUSH
3498: LD_INT 44
3500: PUSH
3501: LD_INT 48
3503: PUSH
3504: LD_INT 49
3506: PUSH
3507: LD_INT 50
3509: PUSH
3510: LD_INT 51
3512: PUSH
3513: LD_INT 52
3515: PUSH
3516: LD_INT 53
3518: PUSH
3519: LD_INT 54
3521: PUSH
3522: LD_INT 55
3524: PUSH
3525: LD_INT 56
3527: PUSH
3528: LD_INT 57
3530: PUSH
3531: LD_INT 58
3533: PUSH
3534: LD_INT 59
3536: PUSH
3537: LD_INT 63
3539: PUSH
3540: LD_INT 64
3542: PUSH
3543: LD_INT 65
3545: PUSH
3546: LD_INT 82
3548: PUSH
3549: LD_INT 83
3551: PUSH
3552: LD_INT 84
3554: PUSH
3555: LD_INT 85
3557: PUSH
3558: LD_INT 86
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: ST_TO_ADDR
3616: GO 3619
3618: POP
// if state > - 1 and state < 3 then
3619: LD_VAR 0 3
3623: PUSH
3624: LD_INT 1
3626: NEG
3627: GREATER
3628: PUSH
3629: LD_VAR 0 3
3633: PUSH
3634: LD_INT 3
3636: LESS
3637: AND
3638: IFFALSE 3695
// for i in result do
3640: LD_ADDR_VAR 0 5
3644: PUSH
3645: LD_VAR 0 4
3649: PUSH
3650: FOR_IN
3651: IFFALSE 3693
// if GetTech ( i , side ) <> state then
3653: LD_VAR 0 5
3657: PPUSH
3658: LD_VAR 0 1
3662: PPUSH
3663: CALL_OW 321
3667: PUSH
3668: LD_VAR 0 3
3672: NONEQUAL
3673: IFFALSE 3691
// result := result diff i ;
3675: LD_ADDR_VAR 0 4
3679: PUSH
3680: LD_VAR 0 4
3684: PUSH
3685: LD_VAR 0 5
3689: DIFF
3690: ST_TO_ADDR
3691: GO 3650
3693: POP
3694: POP
// end ;
3695: LD_VAR 0 4
3699: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3700: LD_INT 0
3702: PPUSH
3703: PPUSH
3704: PPUSH
// result := true ;
3705: LD_ADDR_VAR 0 3
3709: PUSH
3710: LD_INT 1
3712: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3713: LD_ADDR_VAR 0 5
3717: PUSH
3718: LD_VAR 0 2
3722: PPUSH
3723: CALL_OW 480
3727: ST_TO_ADDR
// if not tmp then
3728: LD_VAR 0 5
3732: NOT
3733: IFFALSE 3737
// exit ;
3735: GO 3786
// for i in tmp do
3737: LD_ADDR_VAR 0 4
3741: PUSH
3742: LD_VAR 0 5
3746: PUSH
3747: FOR_IN
3748: IFFALSE 3784
// if GetTech ( i , side ) <> state_researched then
3750: LD_VAR 0 4
3754: PPUSH
3755: LD_VAR 0 1
3759: PPUSH
3760: CALL_OW 321
3764: PUSH
3765: LD_INT 2
3767: NONEQUAL
3768: IFFALSE 3782
// begin result := false ;
3770: LD_ADDR_VAR 0 3
3774: PUSH
3775: LD_INT 0
3777: ST_TO_ADDR
// exit ;
3778: POP
3779: POP
3780: GO 3786
// end ;
3782: GO 3747
3784: POP
3785: POP
// end ;
3786: LD_VAR 0 3
3790: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3791: LD_INT 0
3793: PPUSH
3794: PPUSH
3795: PPUSH
3796: PPUSH
3797: PPUSH
3798: PPUSH
3799: PPUSH
3800: PPUSH
3801: PPUSH
3802: PPUSH
3803: PPUSH
3804: PPUSH
3805: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3806: LD_VAR 0 1
3810: NOT
3811: PUSH
3812: LD_VAR 0 1
3816: PPUSH
3817: CALL_OW 257
3821: PUSH
3822: LD_INT 9
3824: NONEQUAL
3825: OR
3826: IFFALSE 3830
// exit ;
3828: GO 4403
// side := GetSide ( unit ) ;
3830: LD_ADDR_VAR 0 9
3834: PUSH
3835: LD_VAR 0 1
3839: PPUSH
3840: CALL_OW 255
3844: ST_TO_ADDR
// tech_space := tech_spacanom ;
3845: LD_ADDR_VAR 0 12
3849: PUSH
3850: LD_INT 29
3852: ST_TO_ADDR
// tech_time := tech_taurad ;
3853: LD_ADDR_VAR 0 13
3857: PUSH
3858: LD_INT 28
3860: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3861: LD_ADDR_VAR 0 11
3865: PUSH
3866: LD_VAR 0 1
3870: PPUSH
3871: CALL_OW 310
3875: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3876: LD_VAR 0 11
3880: PPUSH
3881: CALL_OW 247
3885: PUSH
3886: LD_INT 2
3888: EQUAL
3889: IFFALSE 3893
// exit ;
3891: GO 4403
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3893: LD_ADDR_VAR 0 8
3897: PUSH
3898: LD_INT 81
3900: PUSH
3901: LD_VAR 0 9
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 3
3912: PUSH
3913: LD_INT 21
3915: PUSH
3916: LD_INT 3
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PPUSH
3931: CALL_OW 69
3935: ST_TO_ADDR
// if not tmp then
3936: LD_VAR 0 8
3940: NOT
3941: IFFALSE 3945
// exit ;
3943: GO 4403
// if in_unit then
3945: LD_VAR 0 11
3949: IFFALSE 3973
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3951: LD_ADDR_VAR 0 10
3955: PUSH
3956: LD_VAR 0 8
3960: PPUSH
3961: LD_VAR 0 11
3965: PPUSH
3966: CALL_OW 74
3970: ST_TO_ADDR
3971: GO 3993
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3973: LD_ADDR_VAR 0 10
3977: PUSH
3978: LD_VAR 0 8
3982: PPUSH
3983: LD_VAR 0 1
3987: PPUSH
3988: CALL_OW 74
3992: ST_TO_ADDR
// if not enemy then
3993: LD_VAR 0 10
3997: NOT
3998: IFFALSE 4002
// exit ;
4000: GO 4403
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4002: LD_VAR 0 11
4006: PUSH
4007: LD_VAR 0 11
4011: PPUSH
4012: LD_VAR 0 10
4016: PPUSH
4017: CALL_OW 296
4021: PUSH
4022: LD_INT 13
4024: GREATER
4025: AND
4026: PUSH
4027: LD_VAR 0 1
4031: PPUSH
4032: LD_VAR 0 10
4036: PPUSH
4037: CALL_OW 296
4041: PUSH
4042: LD_INT 12
4044: GREATER
4045: OR
4046: IFFALSE 4050
// exit ;
4048: GO 4403
// missile := [ 1 ] ;
4050: LD_ADDR_VAR 0 14
4054: PUSH
4055: LD_INT 1
4057: PUSH
4058: EMPTY
4059: LIST
4060: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4061: LD_VAR 0 9
4065: PPUSH
4066: LD_VAR 0 12
4070: PPUSH
4071: CALL_OW 325
4075: IFFALSE 4104
// missile := Replace ( missile , missile + 1 , 2 ) ;
4077: LD_ADDR_VAR 0 14
4081: PUSH
4082: LD_VAR 0 14
4086: PPUSH
4087: LD_VAR 0 14
4091: PUSH
4092: LD_INT 1
4094: PLUS
4095: PPUSH
4096: LD_INT 2
4098: PPUSH
4099: CALL_OW 1
4103: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4104: LD_VAR 0 9
4108: PPUSH
4109: LD_VAR 0 13
4113: PPUSH
4114: CALL_OW 325
4118: PUSH
4119: LD_VAR 0 10
4123: PPUSH
4124: CALL_OW 255
4128: PPUSH
4129: LD_VAR 0 13
4133: PPUSH
4134: CALL_OW 325
4138: NOT
4139: AND
4140: IFFALSE 4169
// missile := Replace ( missile , missile + 1 , 3 ) ;
4142: LD_ADDR_VAR 0 14
4146: PUSH
4147: LD_VAR 0 14
4151: PPUSH
4152: LD_VAR 0 14
4156: PUSH
4157: LD_INT 1
4159: PLUS
4160: PPUSH
4161: LD_INT 3
4163: PPUSH
4164: CALL_OW 1
4168: ST_TO_ADDR
// if missile < 2 then
4169: LD_VAR 0 14
4173: PUSH
4174: LD_INT 2
4176: LESS
4177: IFFALSE 4181
// exit ;
4179: GO 4403
// x := GetX ( enemy ) ;
4181: LD_ADDR_VAR 0 4
4185: PUSH
4186: LD_VAR 0 10
4190: PPUSH
4191: CALL_OW 250
4195: ST_TO_ADDR
// y := GetY ( enemy ) ;
4196: LD_ADDR_VAR 0 5
4200: PUSH
4201: LD_VAR 0 10
4205: PPUSH
4206: CALL_OW 251
4210: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4211: LD_ADDR_VAR 0 6
4215: PUSH
4216: LD_VAR 0 4
4220: PUSH
4221: LD_INT 1
4223: NEG
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: CALL_OW 12
4232: PLUS
4233: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4234: LD_ADDR_VAR 0 7
4238: PUSH
4239: LD_VAR 0 5
4243: PUSH
4244: LD_INT 1
4246: NEG
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 12
4255: PLUS
4256: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4257: LD_VAR 0 6
4261: PPUSH
4262: LD_VAR 0 7
4266: PPUSH
4267: CALL_OW 488
4271: NOT
4272: IFFALSE 4294
// begin _x := x ;
4274: LD_ADDR_VAR 0 6
4278: PUSH
4279: LD_VAR 0 4
4283: ST_TO_ADDR
// _y := y ;
4284: LD_ADDR_VAR 0 7
4288: PUSH
4289: LD_VAR 0 5
4293: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4294: LD_ADDR_VAR 0 3
4298: PUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_VAR 0 14
4306: PPUSH
4307: CALL_OW 12
4311: ST_TO_ADDR
// case i of 1 :
4312: LD_VAR 0 3
4316: PUSH
4317: LD_INT 1
4319: DOUBLE
4320: EQUAL
4321: IFTRUE 4325
4323: GO 4342
4325: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4326: LD_VAR 0 1
4330: PPUSH
4331: LD_VAR 0 10
4335: PPUSH
4336: CALL_OW 115
4340: GO 4403
4342: LD_INT 2
4344: DOUBLE
4345: EQUAL
4346: IFTRUE 4350
4348: GO 4372
4350: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_VAR 0 6
4360: PPUSH
4361: LD_VAR 0 7
4365: PPUSH
4366: CALL_OW 153
4370: GO 4403
4372: LD_INT 3
4374: DOUBLE
4375: EQUAL
4376: IFTRUE 4380
4378: GO 4402
4380: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4381: LD_VAR 0 1
4385: PPUSH
4386: LD_VAR 0 6
4390: PPUSH
4391: LD_VAR 0 7
4395: PPUSH
4396: CALL_OW 154
4400: GO 4403
4402: POP
// end ;
4403: LD_VAR 0 2
4407: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4408: LD_INT 0
4410: PPUSH
4411: PPUSH
4412: PPUSH
4413: PPUSH
4414: PPUSH
4415: PPUSH
// if not unit or not building then
4416: LD_VAR 0 1
4420: NOT
4421: PUSH
4422: LD_VAR 0 2
4426: NOT
4427: OR
4428: IFFALSE 4432
// exit ;
4430: GO 4590
// x := GetX ( building ) ;
4432: LD_ADDR_VAR 0 5
4436: PUSH
4437: LD_VAR 0 2
4441: PPUSH
4442: CALL_OW 250
4446: ST_TO_ADDR
// y := GetY ( building ) ;
4447: LD_ADDR_VAR 0 6
4451: PUSH
4452: LD_VAR 0 2
4456: PPUSH
4457: CALL_OW 251
4461: ST_TO_ADDR
// for i = 0 to 5 do
4462: LD_ADDR_VAR 0 4
4466: PUSH
4467: DOUBLE
4468: LD_INT 0
4470: DEC
4471: ST_TO_ADDR
4472: LD_INT 5
4474: PUSH
4475: FOR_TO
4476: IFFALSE 4588
// begin _x := ShiftX ( x , i , 3 ) ;
4478: LD_ADDR_VAR 0 7
4482: PUSH
4483: LD_VAR 0 5
4487: PPUSH
4488: LD_VAR 0 4
4492: PPUSH
4493: LD_INT 3
4495: PPUSH
4496: CALL_OW 272
4500: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4501: LD_ADDR_VAR 0 8
4505: PUSH
4506: LD_VAR 0 6
4510: PPUSH
4511: LD_VAR 0 4
4515: PPUSH
4516: LD_INT 3
4518: PPUSH
4519: CALL_OW 273
4523: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4524: LD_VAR 0 7
4528: PPUSH
4529: LD_VAR 0 8
4533: PPUSH
4534: CALL_OW 488
4538: NOT
4539: IFFALSE 4543
// continue ;
4541: GO 4475
// if HexInfo ( _x , _y ) = 0 then
4543: LD_VAR 0 7
4547: PPUSH
4548: LD_VAR 0 8
4552: PPUSH
4553: CALL_OW 428
4557: PUSH
4558: LD_INT 0
4560: EQUAL
4561: IFFALSE 4586
// begin ComMoveXY ( unit , _x , _y ) ;
4563: LD_VAR 0 1
4567: PPUSH
4568: LD_VAR 0 7
4572: PPUSH
4573: LD_VAR 0 8
4577: PPUSH
4578: CALL_OW 111
// exit ;
4582: POP
4583: POP
4584: GO 4590
// end ; end ;
4586: GO 4475
4588: POP
4589: POP
// end ;
4590: LD_VAR 0 3
4594: RET
// export function ScanBase ( side , base_area ) ; begin
4595: LD_INT 0
4597: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4598: LD_ADDR_VAR 0 3
4602: PUSH
4603: LD_VAR 0 2
4607: PPUSH
4608: LD_INT 81
4610: PUSH
4611: LD_VAR 0 1
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: PPUSH
4620: CALL_OW 70
4624: ST_TO_ADDR
// end ;
4625: LD_VAR 0 3
4629: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4630: LD_INT 0
4632: PPUSH
4633: PPUSH
4634: PPUSH
4635: PPUSH
// result := false ;
4636: LD_ADDR_VAR 0 2
4640: PUSH
4641: LD_INT 0
4643: ST_TO_ADDR
// side := GetSide ( unit ) ;
4644: LD_ADDR_VAR 0 3
4648: PUSH
4649: LD_VAR 0 1
4653: PPUSH
4654: CALL_OW 255
4658: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4659: LD_ADDR_VAR 0 4
4663: PUSH
4664: LD_VAR 0 1
4668: PPUSH
4669: CALL_OW 248
4673: ST_TO_ADDR
// case nat of 1 :
4674: LD_VAR 0 4
4678: PUSH
4679: LD_INT 1
4681: DOUBLE
4682: EQUAL
4683: IFTRUE 4687
4685: GO 4698
4687: POP
// tech := tech_lassight ; 2 :
4688: LD_ADDR_VAR 0 5
4692: PUSH
4693: LD_INT 12
4695: ST_TO_ADDR
4696: GO 4737
4698: LD_INT 2
4700: DOUBLE
4701: EQUAL
4702: IFTRUE 4706
4704: GO 4717
4706: POP
// tech := tech_mortar ; 3 :
4707: LD_ADDR_VAR 0 5
4711: PUSH
4712: LD_INT 41
4714: ST_TO_ADDR
4715: GO 4737
4717: LD_INT 3
4719: DOUBLE
4720: EQUAL
4721: IFTRUE 4725
4723: GO 4736
4725: POP
// tech := tech_bazooka ; end ;
4726: LD_ADDR_VAR 0 5
4730: PUSH
4731: LD_INT 44
4733: ST_TO_ADDR
4734: GO 4737
4736: POP
// if Researched ( side , tech ) then
4737: LD_VAR 0 3
4741: PPUSH
4742: LD_VAR 0 5
4746: PPUSH
4747: CALL_OW 325
4751: IFFALSE 4778
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4753: LD_ADDR_VAR 0 2
4757: PUSH
4758: LD_INT 5
4760: PUSH
4761: LD_INT 8
4763: PUSH
4764: LD_INT 9
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: PUSH
4772: LD_VAR 0 4
4776: ARRAY
4777: ST_TO_ADDR
// end ;
4778: LD_VAR 0 2
4782: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4783: LD_INT 0
4785: PPUSH
4786: PPUSH
4787: PPUSH
// if not mines then
4788: LD_VAR 0 2
4792: NOT
4793: IFFALSE 4797
// exit ;
4795: GO 4941
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4797: LD_ADDR_VAR 0 5
4801: PUSH
4802: LD_INT 81
4804: PUSH
4805: LD_VAR 0 1
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: LD_INT 3
4816: PUSH
4817: LD_INT 21
4819: PUSH
4820: LD_INT 3
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PPUSH
4835: CALL_OW 69
4839: ST_TO_ADDR
// for i in mines do
4840: LD_ADDR_VAR 0 4
4844: PUSH
4845: LD_VAR 0 2
4849: PUSH
4850: FOR_IN
4851: IFFALSE 4939
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4853: LD_VAR 0 4
4857: PUSH
4858: LD_INT 1
4860: ARRAY
4861: PPUSH
4862: LD_VAR 0 4
4866: PUSH
4867: LD_INT 2
4869: ARRAY
4870: PPUSH
4871: CALL_OW 458
4875: NOT
4876: IFFALSE 4880
// continue ;
4878: GO 4850
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4880: LD_VAR 0 4
4884: PUSH
4885: LD_INT 1
4887: ARRAY
4888: PPUSH
4889: LD_VAR 0 4
4893: PUSH
4894: LD_INT 2
4896: ARRAY
4897: PPUSH
4898: CALL_OW 428
4902: PUSH
4903: LD_VAR 0 5
4907: IN
4908: IFFALSE 4937
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4910: LD_VAR 0 4
4914: PUSH
4915: LD_INT 1
4917: ARRAY
4918: PPUSH
4919: LD_VAR 0 4
4923: PUSH
4924: LD_INT 2
4926: ARRAY
4927: PPUSH
4928: LD_VAR 0 1
4932: PPUSH
4933: CALL_OW 456
// end ;
4937: GO 4850
4939: POP
4940: POP
// end ;
4941: LD_VAR 0 3
4945: RET
// export function Count ( array ) ; begin
4946: LD_INT 0
4948: PPUSH
// result := array + 0 ;
4949: LD_ADDR_VAR 0 2
4953: PUSH
4954: LD_VAR 0 1
4958: PUSH
4959: LD_INT 0
4961: PLUS
4962: ST_TO_ADDR
// end ;
4963: LD_VAR 0 2
4967: RET
// export function IsEmpty ( building ) ; begin
4968: LD_INT 0
4970: PPUSH
// if not building then
4971: LD_VAR 0 1
4975: NOT
4976: IFFALSE 4980
// exit ;
4978: GO 5023
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4980: LD_ADDR_VAR 0 2
4984: PUSH
4985: LD_VAR 0 1
4989: PUSH
4990: LD_INT 22
4992: PUSH
4993: LD_VAR 0 1
4997: PPUSH
4998: CALL_OW 255
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: LD_INT 58
5009: PUSH
5010: EMPTY
5011: LIST
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PPUSH
5017: CALL_OW 69
5021: IN
5022: ST_TO_ADDR
// end ;
5023: LD_VAR 0 2
5027: RET
// export function IsNotFull ( building ) ; var places ; begin
5028: LD_INT 0
5030: PPUSH
5031: PPUSH
// if not building then
5032: LD_VAR 0 1
5036: NOT
5037: IFFALSE 5041
// exit ;
5039: GO 5069
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5041: LD_ADDR_VAR 0 2
5045: PUSH
5046: LD_VAR 0 1
5050: PPUSH
5051: LD_INT 3
5053: PUSH
5054: LD_INT 62
5056: PUSH
5057: EMPTY
5058: LIST
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: PPUSH
5064: CALL_OW 72
5068: ST_TO_ADDR
// end ;
5069: LD_VAR 0 2
5073: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5074: LD_INT 0
5076: PPUSH
5077: PPUSH
5078: PPUSH
5079: PPUSH
// tmp := [ ] ;
5080: LD_ADDR_VAR 0 3
5084: PUSH
5085: EMPTY
5086: ST_TO_ADDR
// list := [ ] ;
5087: LD_ADDR_VAR 0 5
5091: PUSH
5092: EMPTY
5093: ST_TO_ADDR
// for i = 16 to 25 do
5094: LD_ADDR_VAR 0 4
5098: PUSH
5099: DOUBLE
5100: LD_INT 16
5102: DEC
5103: ST_TO_ADDR
5104: LD_INT 25
5106: PUSH
5107: FOR_TO
5108: IFFALSE 5181
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5110: LD_ADDR_VAR 0 3
5114: PUSH
5115: LD_VAR 0 3
5119: PUSH
5120: LD_INT 22
5122: PUSH
5123: LD_VAR 0 1
5127: PPUSH
5128: CALL_OW 255
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 91
5139: PUSH
5140: LD_VAR 0 1
5144: PUSH
5145: LD_INT 6
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_INT 30
5155: PUSH
5156: LD_VAR 0 4
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: LIST
5169: PUSH
5170: EMPTY
5171: LIST
5172: PPUSH
5173: CALL_OW 69
5177: ADD
5178: ST_TO_ADDR
5179: GO 5107
5181: POP
5182: POP
// for i = 1 to tmp do
5183: LD_ADDR_VAR 0 4
5187: PUSH
5188: DOUBLE
5189: LD_INT 1
5191: DEC
5192: ST_TO_ADDR
5193: LD_VAR 0 3
5197: PUSH
5198: FOR_TO
5199: IFFALSE 5287
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5201: LD_ADDR_VAR 0 5
5205: PUSH
5206: LD_VAR 0 5
5210: PUSH
5211: LD_VAR 0 3
5215: PUSH
5216: LD_VAR 0 4
5220: ARRAY
5221: PPUSH
5222: CALL_OW 266
5226: PUSH
5227: LD_VAR 0 3
5231: PUSH
5232: LD_VAR 0 4
5236: ARRAY
5237: PPUSH
5238: CALL_OW 250
5242: PUSH
5243: LD_VAR 0 3
5247: PUSH
5248: LD_VAR 0 4
5252: ARRAY
5253: PPUSH
5254: CALL_OW 251
5258: PUSH
5259: LD_VAR 0 3
5263: PUSH
5264: LD_VAR 0 4
5268: ARRAY
5269: PPUSH
5270: CALL_OW 254
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: PUSH
5281: EMPTY
5282: LIST
5283: ADD
5284: ST_TO_ADDR
5285: GO 5198
5287: POP
5288: POP
// result := list ;
5289: LD_ADDR_VAR 0 2
5293: PUSH
5294: LD_VAR 0 5
5298: ST_TO_ADDR
// end ;
5299: LD_VAR 0 2
5303: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5304: LD_INT 0
5306: PPUSH
5307: PPUSH
5308: PPUSH
5309: PPUSH
5310: PPUSH
5311: PPUSH
5312: PPUSH
// if not factory then
5313: LD_VAR 0 1
5317: NOT
5318: IFFALSE 5322
// exit ;
5320: GO 5915
// if control = control_apeman then
5322: LD_VAR 0 4
5326: PUSH
5327: LD_INT 5
5329: EQUAL
5330: IFFALSE 5439
// begin tmp := UnitsInside ( factory ) ;
5332: LD_ADDR_VAR 0 8
5336: PUSH
5337: LD_VAR 0 1
5341: PPUSH
5342: CALL_OW 313
5346: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5347: LD_VAR 0 8
5351: PPUSH
5352: LD_INT 25
5354: PUSH
5355: LD_INT 12
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PPUSH
5362: CALL_OW 72
5366: NOT
5367: IFFALSE 5377
// control := control_manual ;
5369: LD_ADDR_VAR 0 4
5373: PUSH
5374: LD_INT 1
5376: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5377: LD_ADDR_VAR 0 8
5381: PUSH
5382: LD_VAR 0 1
5386: PPUSH
5387: CALL 5074 0 1
5391: ST_TO_ADDR
// if tmp then
5392: LD_VAR 0 8
5396: IFFALSE 5439
// begin for i in tmp do
5398: LD_ADDR_VAR 0 7
5402: PUSH
5403: LD_VAR 0 8
5407: PUSH
5408: FOR_IN
5409: IFFALSE 5437
// if i [ 1 ] = b_ext_radio then
5411: LD_VAR 0 7
5415: PUSH
5416: LD_INT 1
5418: ARRAY
5419: PUSH
5420: LD_INT 22
5422: EQUAL
5423: IFFALSE 5435
// begin control := control_remote ;
5425: LD_ADDR_VAR 0 4
5429: PUSH
5430: LD_INT 2
5432: ST_TO_ADDR
// break ;
5433: GO 5437
// end ;
5435: GO 5408
5437: POP
5438: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5439: LD_VAR 0 1
5443: PPUSH
5444: LD_VAR 0 2
5448: PPUSH
5449: LD_VAR 0 3
5453: PPUSH
5454: LD_VAR 0 4
5458: PPUSH
5459: LD_VAR 0 5
5463: PPUSH
5464: CALL_OW 448
5468: IFFALSE 5503
// begin result := [ chassis , engine , control , weapon ] ;
5470: LD_ADDR_VAR 0 6
5474: PUSH
5475: LD_VAR 0 2
5479: PUSH
5480: LD_VAR 0 3
5484: PUSH
5485: LD_VAR 0 4
5489: PUSH
5490: LD_VAR 0 5
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: ST_TO_ADDR
// exit ;
5501: GO 5915
// end ; _chassis := AvailableChassisList ( factory ) ;
5503: LD_ADDR_VAR 0 9
5507: PUSH
5508: LD_VAR 0 1
5512: PPUSH
5513: CALL_OW 475
5517: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5518: LD_ADDR_VAR 0 11
5522: PUSH
5523: LD_VAR 0 1
5527: PPUSH
5528: CALL_OW 476
5532: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5533: LD_ADDR_VAR 0 12
5537: PUSH
5538: LD_VAR 0 1
5542: PPUSH
5543: CALL_OW 477
5547: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5548: LD_ADDR_VAR 0 10
5552: PUSH
5553: LD_VAR 0 1
5557: PPUSH
5558: CALL_OW 478
5562: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5563: LD_VAR 0 9
5567: NOT
5568: PUSH
5569: LD_VAR 0 11
5573: NOT
5574: OR
5575: PUSH
5576: LD_VAR 0 12
5580: NOT
5581: OR
5582: PUSH
5583: LD_VAR 0 10
5587: NOT
5588: OR
5589: IFFALSE 5624
// begin result := [ chassis , engine , control , weapon ] ;
5591: LD_ADDR_VAR 0 6
5595: PUSH
5596: LD_VAR 0 2
5600: PUSH
5601: LD_VAR 0 3
5605: PUSH
5606: LD_VAR 0 4
5610: PUSH
5611: LD_VAR 0 5
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: ST_TO_ADDR
// exit ;
5622: GO 5915
// end ; if not chassis in _chassis then
5624: LD_VAR 0 2
5628: PUSH
5629: LD_VAR 0 9
5633: IN
5634: NOT
5635: IFFALSE 5661
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5637: LD_ADDR_VAR 0 2
5641: PUSH
5642: LD_VAR 0 9
5646: PUSH
5647: LD_INT 1
5649: PPUSH
5650: LD_VAR 0 9
5654: PPUSH
5655: CALL_OW 12
5659: ARRAY
5660: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5661: LD_VAR 0 2
5665: PPUSH
5666: LD_VAR 0 3
5670: PPUSH
5671: CALL 5920 0 2
5675: NOT
5676: IFFALSE 5735
// repeat engine := _engine [ 1 ] ;
5678: LD_ADDR_VAR 0 3
5682: PUSH
5683: LD_VAR 0 11
5687: PUSH
5688: LD_INT 1
5690: ARRAY
5691: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5692: LD_ADDR_VAR 0 11
5696: PUSH
5697: LD_VAR 0 11
5701: PPUSH
5702: LD_INT 1
5704: PPUSH
5705: CALL_OW 3
5709: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5710: LD_VAR 0 2
5714: PPUSH
5715: LD_VAR 0 3
5719: PPUSH
5720: CALL 5920 0 2
5724: PUSH
5725: LD_VAR 0 11
5729: PUSH
5730: EMPTY
5731: EQUAL
5732: OR
5733: IFFALSE 5678
// if not control in _control then
5735: LD_VAR 0 4
5739: PUSH
5740: LD_VAR 0 12
5744: IN
5745: NOT
5746: IFFALSE 5772
// control := _control [ rand ( 1 , _control ) ] ;
5748: LD_ADDR_VAR 0 4
5752: PUSH
5753: LD_VAR 0 12
5757: PUSH
5758: LD_INT 1
5760: PPUSH
5761: LD_VAR 0 12
5765: PPUSH
5766: CALL_OW 12
5770: ARRAY
5771: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5772: LD_VAR 0 2
5776: PPUSH
5777: LD_VAR 0 5
5781: PPUSH
5782: CALL 6140 0 2
5786: NOT
5787: IFFALSE 5846
// repeat weapon := _weapon [ 1 ] ;
5789: LD_ADDR_VAR 0 5
5793: PUSH
5794: LD_VAR 0 10
5798: PUSH
5799: LD_INT 1
5801: ARRAY
5802: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5803: LD_ADDR_VAR 0 10
5807: PUSH
5808: LD_VAR 0 10
5812: PPUSH
5813: LD_INT 1
5815: PPUSH
5816: CALL_OW 3
5820: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5821: LD_VAR 0 2
5825: PPUSH
5826: LD_VAR 0 5
5830: PPUSH
5831: CALL 6140 0 2
5835: PUSH
5836: LD_VAR 0 10
5840: PUSH
5841: EMPTY
5842: EQUAL
5843: OR
5844: IFFALSE 5789
// result := [ ] ;
5846: LD_ADDR_VAR 0 6
5850: PUSH
5851: EMPTY
5852: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5853: LD_VAR 0 1
5857: PPUSH
5858: LD_VAR 0 2
5862: PPUSH
5863: LD_VAR 0 3
5867: PPUSH
5868: LD_VAR 0 4
5872: PPUSH
5873: LD_VAR 0 5
5877: PPUSH
5878: CALL_OW 448
5882: IFFALSE 5915
// result := [ chassis , engine , control , weapon ] ;
5884: LD_ADDR_VAR 0 6
5888: PUSH
5889: LD_VAR 0 2
5893: PUSH
5894: LD_VAR 0 3
5898: PUSH
5899: LD_VAR 0 4
5903: PUSH
5904: LD_VAR 0 5
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: ST_TO_ADDR
// end ;
5915: LD_VAR 0 6
5919: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5920: LD_INT 0
5922: PPUSH
// if not chassis or not engine then
5923: LD_VAR 0 1
5927: NOT
5928: PUSH
5929: LD_VAR 0 2
5933: NOT
5934: OR
5935: IFFALSE 5939
// exit ;
5937: GO 6135
// case engine of engine_solar :
5939: LD_VAR 0 2
5943: PUSH
5944: LD_INT 2
5946: DOUBLE
5947: EQUAL
5948: IFTRUE 5952
5950: GO 5990
5952: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5953: LD_ADDR_VAR 0 3
5957: PUSH
5958: LD_INT 11
5960: PUSH
5961: LD_INT 12
5963: PUSH
5964: LD_INT 13
5966: PUSH
5967: LD_INT 14
5969: PUSH
5970: LD_INT 1
5972: PUSH
5973: LD_INT 2
5975: PUSH
5976: LD_INT 3
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: ST_TO_ADDR
5988: GO 6119
5990: LD_INT 1
5992: DOUBLE
5993: EQUAL
5994: IFTRUE 5998
5996: GO 6060
5998: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5999: LD_ADDR_VAR 0 3
6003: PUSH
6004: LD_INT 11
6006: PUSH
6007: LD_INT 12
6009: PUSH
6010: LD_INT 13
6012: PUSH
6013: LD_INT 14
6015: PUSH
6016: LD_INT 1
6018: PUSH
6019: LD_INT 2
6021: PUSH
6022: LD_INT 3
6024: PUSH
6025: LD_INT 4
6027: PUSH
6028: LD_INT 5
6030: PUSH
6031: LD_INT 21
6033: PUSH
6034: LD_INT 23
6036: PUSH
6037: LD_INT 22
6039: PUSH
6040: LD_INT 24
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: ST_TO_ADDR
6058: GO 6119
6060: LD_INT 3
6062: DOUBLE
6063: EQUAL
6064: IFTRUE 6068
6066: GO 6118
6068: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6069: LD_ADDR_VAR 0 3
6073: PUSH
6074: LD_INT 13
6076: PUSH
6077: LD_INT 14
6079: PUSH
6080: LD_INT 2
6082: PUSH
6083: LD_INT 3
6085: PUSH
6086: LD_INT 4
6088: PUSH
6089: LD_INT 5
6091: PUSH
6092: LD_INT 21
6094: PUSH
6095: LD_INT 22
6097: PUSH
6098: LD_INT 23
6100: PUSH
6101: LD_INT 24
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: ST_TO_ADDR
6116: GO 6119
6118: POP
// result := ( chassis in result ) ;
6119: LD_ADDR_VAR 0 3
6123: PUSH
6124: LD_VAR 0 1
6128: PUSH
6129: LD_VAR 0 3
6133: IN
6134: ST_TO_ADDR
// end ;
6135: LD_VAR 0 3
6139: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6140: LD_INT 0
6142: PPUSH
// if not chassis or not weapon then
6143: LD_VAR 0 1
6147: NOT
6148: PUSH
6149: LD_VAR 0 2
6153: NOT
6154: OR
6155: IFFALSE 6159
// exit ;
6157: GO 7219
// case weapon of us_machine_gun :
6159: LD_VAR 0 2
6163: PUSH
6164: LD_INT 2
6166: DOUBLE
6167: EQUAL
6168: IFTRUE 6172
6170: GO 6202
6172: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6173: LD_ADDR_VAR 0 3
6177: PUSH
6178: LD_INT 1
6180: PUSH
6181: LD_INT 2
6183: PUSH
6184: LD_INT 3
6186: PUSH
6187: LD_INT 4
6189: PUSH
6190: LD_INT 5
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: ST_TO_ADDR
6200: GO 7203
6202: LD_INT 3
6204: DOUBLE
6205: EQUAL
6206: IFTRUE 6210
6208: GO 6240
6210: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6211: LD_ADDR_VAR 0 3
6215: PUSH
6216: LD_INT 1
6218: PUSH
6219: LD_INT 2
6221: PUSH
6222: LD_INT 3
6224: PUSH
6225: LD_INT 4
6227: PUSH
6228: LD_INT 5
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: ST_TO_ADDR
6238: GO 7203
6240: LD_INT 11
6242: DOUBLE
6243: EQUAL
6244: IFTRUE 6248
6246: GO 6278
6248: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6249: LD_ADDR_VAR 0 3
6253: PUSH
6254: LD_INT 1
6256: PUSH
6257: LD_INT 2
6259: PUSH
6260: LD_INT 3
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: LD_INT 5
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: ST_TO_ADDR
6276: GO 7203
6278: LD_INT 4
6280: DOUBLE
6281: EQUAL
6282: IFTRUE 6286
6284: GO 6312
6286: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6287: LD_ADDR_VAR 0 3
6291: PUSH
6292: LD_INT 2
6294: PUSH
6295: LD_INT 3
6297: PUSH
6298: LD_INT 4
6300: PUSH
6301: LD_INT 5
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: ST_TO_ADDR
6310: GO 7203
6312: LD_INT 5
6314: DOUBLE
6315: EQUAL
6316: IFTRUE 6320
6318: GO 6346
6320: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6321: LD_ADDR_VAR 0 3
6325: PUSH
6326: LD_INT 2
6328: PUSH
6329: LD_INT 3
6331: PUSH
6332: LD_INT 4
6334: PUSH
6335: LD_INT 5
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: ST_TO_ADDR
6344: GO 7203
6346: LD_INT 9
6348: DOUBLE
6349: EQUAL
6350: IFTRUE 6354
6352: GO 6380
6354: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6355: LD_ADDR_VAR 0 3
6359: PUSH
6360: LD_INT 2
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: LD_INT 4
6368: PUSH
6369: LD_INT 5
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: ST_TO_ADDR
6378: GO 7203
6380: LD_INT 7
6382: DOUBLE
6383: EQUAL
6384: IFTRUE 6388
6386: GO 6414
6388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6389: LD_ADDR_VAR 0 3
6393: PUSH
6394: LD_INT 2
6396: PUSH
6397: LD_INT 3
6399: PUSH
6400: LD_INT 4
6402: PUSH
6403: LD_INT 5
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: ST_TO_ADDR
6412: GO 7203
6414: LD_INT 12
6416: DOUBLE
6417: EQUAL
6418: IFTRUE 6422
6420: GO 6448
6422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6423: LD_ADDR_VAR 0 3
6427: PUSH
6428: LD_INT 2
6430: PUSH
6431: LD_INT 3
6433: PUSH
6434: LD_INT 4
6436: PUSH
6437: LD_INT 5
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: ST_TO_ADDR
6446: GO 7203
6448: LD_INT 13
6450: DOUBLE
6451: EQUAL
6452: IFTRUE 6456
6454: GO 6482
6456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6457: LD_ADDR_VAR 0 3
6461: PUSH
6462: LD_INT 2
6464: PUSH
6465: LD_INT 3
6467: PUSH
6468: LD_INT 4
6470: PUSH
6471: LD_INT 5
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: ST_TO_ADDR
6480: GO 7203
6482: LD_INT 14
6484: DOUBLE
6485: EQUAL
6486: IFTRUE 6490
6488: GO 6508
6490: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6491: LD_ADDR_VAR 0 3
6495: PUSH
6496: LD_INT 4
6498: PUSH
6499: LD_INT 5
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: ST_TO_ADDR
6506: GO 7203
6508: LD_INT 6
6510: DOUBLE
6511: EQUAL
6512: IFTRUE 6516
6514: GO 6534
6516: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6517: LD_ADDR_VAR 0 3
6521: PUSH
6522: LD_INT 4
6524: PUSH
6525: LD_INT 5
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: ST_TO_ADDR
6532: GO 7203
6534: LD_INT 10
6536: DOUBLE
6537: EQUAL
6538: IFTRUE 6542
6540: GO 6560
6542: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6543: LD_ADDR_VAR 0 3
6547: PUSH
6548: LD_INT 4
6550: PUSH
6551: LD_INT 5
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: ST_TO_ADDR
6558: GO 7203
6560: LD_INT 22
6562: DOUBLE
6563: EQUAL
6564: IFTRUE 6568
6566: GO 6594
6568: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6569: LD_ADDR_VAR 0 3
6573: PUSH
6574: LD_INT 11
6576: PUSH
6577: LD_INT 12
6579: PUSH
6580: LD_INT 13
6582: PUSH
6583: LD_INT 14
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: ST_TO_ADDR
6592: GO 7203
6594: LD_INT 23
6596: DOUBLE
6597: EQUAL
6598: IFTRUE 6602
6600: GO 6628
6602: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6603: LD_ADDR_VAR 0 3
6607: PUSH
6608: LD_INT 11
6610: PUSH
6611: LD_INT 12
6613: PUSH
6614: LD_INT 13
6616: PUSH
6617: LD_INT 14
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: ST_TO_ADDR
6626: GO 7203
6628: LD_INT 24
6630: DOUBLE
6631: EQUAL
6632: IFTRUE 6636
6634: GO 6662
6636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6637: LD_ADDR_VAR 0 3
6641: PUSH
6642: LD_INT 11
6644: PUSH
6645: LD_INT 12
6647: PUSH
6648: LD_INT 13
6650: PUSH
6651: LD_INT 14
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: ST_TO_ADDR
6660: GO 7203
6662: LD_INT 30
6664: DOUBLE
6665: EQUAL
6666: IFTRUE 6670
6668: GO 6696
6670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6671: LD_ADDR_VAR 0 3
6675: PUSH
6676: LD_INT 11
6678: PUSH
6679: LD_INT 12
6681: PUSH
6682: LD_INT 13
6684: PUSH
6685: LD_INT 14
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: ST_TO_ADDR
6694: GO 7203
6696: LD_INT 25
6698: DOUBLE
6699: EQUAL
6700: IFTRUE 6704
6702: GO 6722
6704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6705: LD_ADDR_VAR 0 3
6709: PUSH
6710: LD_INT 13
6712: PUSH
6713: LD_INT 14
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: ST_TO_ADDR
6720: GO 7203
6722: LD_INT 27
6724: DOUBLE
6725: EQUAL
6726: IFTRUE 6730
6728: GO 6748
6730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6731: LD_ADDR_VAR 0 3
6735: PUSH
6736: LD_INT 13
6738: PUSH
6739: LD_INT 14
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: ST_TO_ADDR
6746: GO 7203
6748: LD_INT 92
6750: DOUBLE
6751: EQUAL
6752: IFTRUE 6756
6754: GO 6782
6756: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6757: LD_ADDR_VAR 0 3
6761: PUSH
6762: LD_INT 11
6764: PUSH
6765: LD_INT 12
6767: PUSH
6768: LD_INT 13
6770: PUSH
6771: LD_INT 14
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: ST_TO_ADDR
6780: GO 7203
6782: LD_INT 28
6784: DOUBLE
6785: EQUAL
6786: IFTRUE 6790
6788: GO 6808
6790: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6791: LD_ADDR_VAR 0 3
6795: PUSH
6796: LD_INT 13
6798: PUSH
6799: LD_INT 14
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: ST_TO_ADDR
6806: GO 7203
6808: LD_INT 29
6810: DOUBLE
6811: EQUAL
6812: IFTRUE 6816
6814: GO 6834
6816: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6817: LD_ADDR_VAR 0 3
6821: PUSH
6822: LD_INT 13
6824: PUSH
6825: LD_INT 14
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: ST_TO_ADDR
6832: GO 7203
6834: LD_INT 31
6836: DOUBLE
6837: EQUAL
6838: IFTRUE 6842
6840: GO 6860
6842: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6843: LD_ADDR_VAR 0 3
6847: PUSH
6848: LD_INT 13
6850: PUSH
6851: LD_INT 14
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: ST_TO_ADDR
6858: GO 7203
6860: LD_INT 26
6862: DOUBLE
6863: EQUAL
6864: IFTRUE 6868
6866: GO 6886
6868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6869: LD_ADDR_VAR 0 3
6873: PUSH
6874: LD_INT 13
6876: PUSH
6877: LD_INT 14
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: ST_TO_ADDR
6884: GO 7203
6886: LD_INT 42
6888: DOUBLE
6889: EQUAL
6890: IFTRUE 6894
6892: GO 6920
6894: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6895: LD_ADDR_VAR 0 3
6899: PUSH
6900: LD_INT 21
6902: PUSH
6903: LD_INT 22
6905: PUSH
6906: LD_INT 23
6908: PUSH
6909: LD_INT 24
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: ST_TO_ADDR
6918: GO 7203
6920: LD_INT 43
6922: DOUBLE
6923: EQUAL
6924: IFTRUE 6928
6926: GO 6954
6928: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6929: LD_ADDR_VAR 0 3
6933: PUSH
6934: LD_INT 21
6936: PUSH
6937: LD_INT 22
6939: PUSH
6940: LD_INT 23
6942: PUSH
6943: LD_INT 24
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: ST_TO_ADDR
6952: GO 7203
6954: LD_INT 44
6956: DOUBLE
6957: EQUAL
6958: IFTRUE 6962
6960: GO 6988
6962: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6963: LD_ADDR_VAR 0 3
6967: PUSH
6968: LD_INT 21
6970: PUSH
6971: LD_INT 22
6973: PUSH
6974: LD_INT 23
6976: PUSH
6977: LD_INT 24
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: ST_TO_ADDR
6986: GO 7203
6988: LD_INT 45
6990: DOUBLE
6991: EQUAL
6992: IFTRUE 6996
6994: GO 7022
6996: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6997: LD_ADDR_VAR 0 3
7001: PUSH
7002: LD_INT 21
7004: PUSH
7005: LD_INT 22
7007: PUSH
7008: LD_INT 23
7010: PUSH
7011: LD_INT 24
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: ST_TO_ADDR
7020: GO 7203
7022: LD_INT 49
7024: DOUBLE
7025: EQUAL
7026: IFTRUE 7030
7028: GO 7056
7030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7031: LD_ADDR_VAR 0 3
7035: PUSH
7036: LD_INT 21
7038: PUSH
7039: LD_INT 22
7041: PUSH
7042: LD_INT 23
7044: PUSH
7045: LD_INT 24
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: ST_TO_ADDR
7054: GO 7203
7056: LD_INT 51
7058: DOUBLE
7059: EQUAL
7060: IFTRUE 7064
7062: GO 7090
7064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7065: LD_ADDR_VAR 0 3
7069: PUSH
7070: LD_INT 21
7072: PUSH
7073: LD_INT 22
7075: PUSH
7076: LD_INT 23
7078: PUSH
7079: LD_INT 24
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: ST_TO_ADDR
7088: GO 7203
7090: LD_INT 52
7092: DOUBLE
7093: EQUAL
7094: IFTRUE 7098
7096: GO 7124
7098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7099: LD_ADDR_VAR 0 3
7103: PUSH
7104: LD_INT 21
7106: PUSH
7107: LD_INT 22
7109: PUSH
7110: LD_INT 23
7112: PUSH
7113: LD_INT 24
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: ST_TO_ADDR
7122: GO 7203
7124: LD_INT 53
7126: DOUBLE
7127: EQUAL
7128: IFTRUE 7132
7130: GO 7150
7132: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7133: LD_ADDR_VAR 0 3
7137: PUSH
7138: LD_INT 23
7140: PUSH
7141: LD_INT 24
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: ST_TO_ADDR
7148: GO 7203
7150: LD_INT 46
7152: DOUBLE
7153: EQUAL
7154: IFTRUE 7158
7156: GO 7176
7158: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7159: LD_ADDR_VAR 0 3
7163: PUSH
7164: LD_INT 23
7166: PUSH
7167: LD_INT 24
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: ST_TO_ADDR
7174: GO 7203
7176: LD_INT 47
7178: DOUBLE
7179: EQUAL
7180: IFTRUE 7184
7182: GO 7202
7184: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7185: LD_ADDR_VAR 0 3
7189: PUSH
7190: LD_INT 23
7192: PUSH
7193: LD_INT 24
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: ST_TO_ADDR
7200: GO 7203
7202: POP
// result := ( chassis in result ) ;
7203: LD_ADDR_VAR 0 3
7207: PUSH
7208: LD_VAR 0 1
7212: PUSH
7213: LD_VAR 0 3
7217: IN
7218: ST_TO_ADDR
// end ;
7219: LD_VAR 0 3
7223: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7224: LD_INT 0
7226: PPUSH
7227: PPUSH
7228: PPUSH
7229: PPUSH
7230: PPUSH
7231: PPUSH
7232: PPUSH
// result := array ;
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_VAR 0 1
7242: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7243: LD_VAR 0 1
7247: NOT
7248: PUSH
7249: LD_VAR 0 2
7253: NOT
7254: OR
7255: PUSH
7256: LD_VAR 0 3
7260: NOT
7261: OR
7262: PUSH
7263: LD_VAR 0 2
7267: PUSH
7268: LD_VAR 0 1
7272: GREATER
7273: OR
7274: PUSH
7275: LD_VAR 0 3
7279: PUSH
7280: LD_VAR 0 1
7284: GREATER
7285: OR
7286: IFFALSE 7290
// exit ;
7288: GO 7586
// if direction then
7290: LD_VAR 0 4
7294: IFFALSE 7358
// begin d := 1 ;
7296: LD_ADDR_VAR 0 9
7300: PUSH
7301: LD_INT 1
7303: ST_TO_ADDR
// if i_from > i_to then
7304: LD_VAR 0 2
7308: PUSH
7309: LD_VAR 0 3
7313: GREATER
7314: IFFALSE 7340
// length := ( array - i_from ) + i_to else
7316: LD_ADDR_VAR 0 11
7320: PUSH
7321: LD_VAR 0 1
7325: PUSH
7326: LD_VAR 0 2
7330: MINUS
7331: PUSH
7332: LD_VAR 0 3
7336: PLUS
7337: ST_TO_ADDR
7338: GO 7356
// length := i_to - i_from ;
7340: LD_ADDR_VAR 0 11
7344: PUSH
7345: LD_VAR 0 3
7349: PUSH
7350: LD_VAR 0 2
7354: MINUS
7355: ST_TO_ADDR
// end else
7356: GO 7419
// begin d := - 1 ;
7358: LD_ADDR_VAR 0 9
7362: PUSH
7363: LD_INT 1
7365: NEG
7366: ST_TO_ADDR
// if i_from > i_to then
7367: LD_VAR 0 2
7371: PUSH
7372: LD_VAR 0 3
7376: GREATER
7377: IFFALSE 7397
// length := i_from - i_to else
7379: LD_ADDR_VAR 0 11
7383: PUSH
7384: LD_VAR 0 2
7388: PUSH
7389: LD_VAR 0 3
7393: MINUS
7394: ST_TO_ADDR
7395: GO 7419
// length := ( array - i_to ) + i_from ;
7397: LD_ADDR_VAR 0 11
7401: PUSH
7402: LD_VAR 0 1
7406: PUSH
7407: LD_VAR 0 3
7411: MINUS
7412: PUSH
7413: LD_VAR 0 2
7417: PLUS
7418: ST_TO_ADDR
// end ; if not length then
7419: LD_VAR 0 11
7423: NOT
7424: IFFALSE 7428
// exit ;
7426: GO 7586
// tmp := array ;
7428: LD_ADDR_VAR 0 10
7432: PUSH
7433: LD_VAR 0 1
7437: ST_TO_ADDR
// for i = 1 to length do
7438: LD_ADDR_VAR 0 6
7442: PUSH
7443: DOUBLE
7444: LD_INT 1
7446: DEC
7447: ST_TO_ADDR
7448: LD_VAR 0 11
7452: PUSH
7453: FOR_TO
7454: IFFALSE 7574
// begin for j = 1 to array do
7456: LD_ADDR_VAR 0 7
7460: PUSH
7461: DOUBLE
7462: LD_INT 1
7464: DEC
7465: ST_TO_ADDR
7466: LD_VAR 0 1
7470: PUSH
7471: FOR_TO
7472: IFFALSE 7560
// begin k := j + d ;
7474: LD_ADDR_VAR 0 8
7478: PUSH
7479: LD_VAR 0 7
7483: PUSH
7484: LD_VAR 0 9
7488: PLUS
7489: ST_TO_ADDR
// if k > array then
7490: LD_VAR 0 8
7494: PUSH
7495: LD_VAR 0 1
7499: GREATER
7500: IFFALSE 7510
// k := 1 ;
7502: LD_ADDR_VAR 0 8
7506: PUSH
7507: LD_INT 1
7509: ST_TO_ADDR
// if not k then
7510: LD_VAR 0 8
7514: NOT
7515: IFFALSE 7527
// k := array ;
7517: LD_ADDR_VAR 0 8
7521: PUSH
7522: LD_VAR 0 1
7526: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7527: LD_ADDR_VAR 0 10
7531: PUSH
7532: LD_VAR 0 10
7536: PPUSH
7537: LD_VAR 0 8
7541: PPUSH
7542: LD_VAR 0 1
7546: PUSH
7547: LD_VAR 0 7
7551: ARRAY
7552: PPUSH
7553: CALL_OW 1
7557: ST_TO_ADDR
// end ;
7558: GO 7471
7560: POP
7561: POP
// array := tmp ;
7562: LD_ADDR_VAR 0 1
7566: PUSH
7567: LD_VAR 0 10
7571: ST_TO_ADDR
// end ;
7572: GO 7453
7574: POP
7575: POP
// result := array ;
7576: LD_ADDR_VAR 0 5
7580: PUSH
7581: LD_VAR 0 1
7585: ST_TO_ADDR
// end ;
7586: LD_VAR 0 5
7590: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7591: LD_INT 0
7593: PPUSH
7594: PPUSH
// result := 0 ;
7595: LD_ADDR_VAR 0 3
7599: PUSH
7600: LD_INT 0
7602: ST_TO_ADDR
// if not array or not value in array then
7603: LD_VAR 0 1
7607: NOT
7608: PUSH
7609: LD_VAR 0 2
7613: PUSH
7614: LD_VAR 0 1
7618: IN
7619: NOT
7620: OR
7621: IFFALSE 7625
// exit ;
7623: GO 7679
// for i = 1 to array do
7625: LD_ADDR_VAR 0 4
7629: PUSH
7630: DOUBLE
7631: LD_INT 1
7633: DEC
7634: ST_TO_ADDR
7635: LD_VAR 0 1
7639: PUSH
7640: FOR_TO
7641: IFFALSE 7677
// if value = array [ i ] then
7643: LD_VAR 0 2
7647: PUSH
7648: LD_VAR 0 1
7652: PUSH
7653: LD_VAR 0 4
7657: ARRAY
7658: EQUAL
7659: IFFALSE 7675
// begin result := i ;
7661: LD_ADDR_VAR 0 3
7665: PUSH
7666: LD_VAR 0 4
7670: ST_TO_ADDR
// exit ;
7671: POP
7672: POP
7673: GO 7679
// end ;
7675: GO 7640
7677: POP
7678: POP
// end ;
7679: LD_VAR 0 3
7683: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7684: LD_INT 0
7686: PPUSH
// vc_chassis := chassis ;
7687: LD_ADDR_OWVAR 37
7691: PUSH
7692: LD_VAR 0 1
7696: ST_TO_ADDR
// vc_engine := engine ;
7697: LD_ADDR_OWVAR 39
7701: PUSH
7702: LD_VAR 0 2
7706: ST_TO_ADDR
// vc_control := control ;
7707: LD_ADDR_OWVAR 38
7711: PUSH
7712: LD_VAR 0 3
7716: ST_TO_ADDR
// vc_weapon := weapon ;
7717: LD_ADDR_OWVAR 40
7721: PUSH
7722: LD_VAR 0 4
7726: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7727: LD_ADDR_OWVAR 41
7731: PUSH
7732: LD_VAR 0 5
7736: ST_TO_ADDR
// end ;
7737: LD_VAR 0 6
7741: RET
// export function WantPlant ( unit ) ; var task ; begin
7742: LD_INT 0
7744: PPUSH
7745: PPUSH
// result := false ;
7746: LD_ADDR_VAR 0 2
7750: PUSH
7751: LD_INT 0
7753: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7754: LD_ADDR_VAR 0 3
7758: PUSH
7759: LD_VAR 0 1
7763: PPUSH
7764: CALL_OW 437
7768: ST_TO_ADDR
// if task then
7769: LD_VAR 0 3
7773: IFFALSE 7801
// if task [ 1 ] [ 1 ] = p then
7775: LD_VAR 0 3
7779: PUSH
7780: LD_INT 1
7782: ARRAY
7783: PUSH
7784: LD_INT 1
7786: ARRAY
7787: PUSH
7788: LD_STRING p
7790: EQUAL
7791: IFFALSE 7801
// result := true ;
7793: LD_ADDR_VAR 0 2
7797: PUSH
7798: LD_INT 1
7800: ST_TO_ADDR
// end ;
7801: LD_VAR 0 2
7805: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7806: LD_INT 0
7808: PPUSH
7809: PPUSH
7810: PPUSH
7811: PPUSH
// if pos < 1 then
7812: LD_VAR 0 2
7816: PUSH
7817: LD_INT 1
7819: LESS
7820: IFFALSE 7824
// exit ;
7822: GO 8127
// if pos = 1 then
7824: LD_VAR 0 2
7828: PUSH
7829: LD_INT 1
7831: EQUAL
7832: IFFALSE 7865
// result := Replace ( arr , pos [ 1 ] , value ) else
7834: LD_ADDR_VAR 0 4
7838: PUSH
7839: LD_VAR 0 1
7843: PPUSH
7844: LD_VAR 0 2
7848: PUSH
7849: LD_INT 1
7851: ARRAY
7852: PPUSH
7853: LD_VAR 0 3
7857: PPUSH
7858: CALL_OW 1
7862: ST_TO_ADDR
7863: GO 8127
// begin tmp := arr ;
7865: LD_ADDR_VAR 0 6
7869: PUSH
7870: LD_VAR 0 1
7874: ST_TO_ADDR
// s_arr := [ tmp ] ;
7875: LD_ADDR_VAR 0 7
7879: PUSH
7880: LD_VAR 0 6
7884: PUSH
7885: EMPTY
7886: LIST
7887: ST_TO_ADDR
// for i = 1 to pos - 1 do
7888: LD_ADDR_VAR 0 5
7892: PUSH
7893: DOUBLE
7894: LD_INT 1
7896: DEC
7897: ST_TO_ADDR
7898: LD_VAR 0 2
7902: PUSH
7903: LD_INT 1
7905: MINUS
7906: PUSH
7907: FOR_TO
7908: IFFALSE 7953
// begin tmp := tmp [ pos [ i ] ] ;
7910: LD_ADDR_VAR 0 6
7914: PUSH
7915: LD_VAR 0 6
7919: PUSH
7920: LD_VAR 0 2
7924: PUSH
7925: LD_VAR 0 5
7929: ARRAY
7930: ARRAY
7931: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7932: LD_ADDR_VAR 0 7
7936: PUSH
7937: LD_VAR 0 7
7941: PUSH
7942: LD_VAR 0 6
7946: PUSH
7947: EMPTY
7948: LIST
7949: ADD
7950: ST_TO_ADDR
// end ;
7951: GO 7907
7953: POP
7954: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7955: LD_ADDR_VAR 0 6
7959: PUSH
7960: LD_VAR 0 6
7964: PPUSH
7965: LD_VAR 0 2
7969: PUSH
7970: LD_VAR 0 2
7974: ARRAY
7975: PPUSH
7976: LD_VAR 0 3
7980: PPUSH
7981: CALL_OW 1
7985: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7986: LD_ADDR_VAR 0 7
7990: PUSH
7991: LD_VAR 0 7
7995: PPUSH
7996: LD_VAR 0 7
8000: PPUSH
8001: LD_VAR 0 6
8005: PPUSH
8006: CALL_OW 1
8010: ST_TO_ADDR
// for i = s_arr downto 2 do
8011: LD_ADDR_VAR 0 5
8015: PUSH
8016: DOUBLE
8017: LD_VAR 0 7
8021: INC
8022: ST_TO_ADDR
8023: LD_INT 2
8025: PUSH
8026: FOR_DOWNTO
8027: IFFALSE 8111
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8029: LD_ADDR_VAR 0 6
8033: PUSH
8034: LD_VAR 0 7
8038: PUSH
8039: LD_VAR 0 5
8043: PUSH
8044: LD_INT 1
8046: MINUS
8047: ARRAY
8048: PPUSH
8049: LD_VAR 0 2
8053: PUSH
8054: LD_VAR 0 5
8058: PUSH
8059: LD_INT 1
8061: MINUS
8062: ARRAY
8063: PPUSH
8064: LD_VAR 0 7
8068: PUSH
8069: LD_VAR 0 5
8073: ARRAY
8074: PPUSH
8075: CALL_OW 1
8079: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8080: LD_ADDR_VAR 0 7
8084: PUSH
8085: LD_VAR 0 7
8089: PPUSH
8090: LD_VAR 0 5
8094: PUSH
8095: LD_INT 1
8097: MINUS
8098: PPUSH
8099: LD_VAR 0 6
8103: PPUSH
8104: CALL_OW 1
8108: ST_TO_ADDR
// end ;
8109: GO 8026
8111: POP
8112: POP
// result := s_arr [ 1 ] ;
8113: LD_ADDR_VAR 0 4
8117: PUSH
8118: LD_VAR 0 7
8122: PUSH
8123: LD_INT 1
8125: ARRAY
8126: ST_TO_ADDR
// end ; end ;
8127: LD_VAR 0 4
8131: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8132: LD_INT 0
8134: PPUSH
8135: PPUSH
// if not list then
8136: LD_VAR 0 1
8140: NOT
8141: IFFALSE 8145
// exit ;
8143: GO 8236
// i := list [ pos1 ] ;
8145: LD_ADDR_VAR 0 5
8149: PUSH
8150: LD_VAR 0 1
8154: PUSH
8155: LD_VAR 0 2
8159: ARRAY
8160: ST_TO_ADDR
// if not i then
8161: LD_VAR 0 5
8165: NOT
8166: IFFALSE 8170
// exit ;
8168: GO 8236
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8170: LD_ADDR_VAR 0 1
8174: PUSH
8175: LD_VAR 0 1
8179: PPUSH
8180: LD_VAR 0 2
8184: PPUSH
8185: LD_VAR 0 1
8189: PUSH
8190: LD_VAR 0 3
8194: ARRAY
8195: PPUSH
8196: CALL_OW 1
8200: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8201: LD_ADDR_VAR 0 1
8205: PUSH
8206: LD_VAR 0 1
8210: PPUSH
8211: LD_VAR 0 3
8215: PPUSH
8216: LD_VAR 0 5
8220: PPUSH
8221: CALL_OW 1
8225: ST_TO_ADDR
// result := list ;
8226: LD_ADDR_VAR 0 4
8230: PUSH
8231: LD_VAR 0 1
8235: ST_TO_ADDR
// end ;
8236: LD_VAR 0 4
8240: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8241: LD_INT 0
8243: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8244: LD_ADDR_VAR 0 5
8248: PUSH
8249: LD_VAR 0 1
8253: PPUSH
8254: CALL_OW 250
8258: PPUSH
8259: LD_VAR 0 1
8263: PPUSH
8264: CALL_OW 251
8268: PPUSH
8269: LD_VAR 0 2
8273: PPUSH
8274: LD_VAR 0 3
8278: PPUSH
8279: LD_VAR 0 4
8283: PPUSH
8284: CALL 8662 0 5
8288: ST_TO_ADDR
// end ;
8289: LD_VAR 0 5
8293: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8294: LD_INT 0
8296: PPUSH
8297: PPUSH
8298: PPUSH
8299: PPUSH
// if not list or not unit then
8300: LD_VAR 0 2
8304: NOT
8305: PUSH
8306: LD_VAR 0 1
8310: NOT
8311: OR
8312: IFFALSE 8316
// exit ;
8314: GO 8657
// result := [ ] ;
8316: LD_ADDR_VAR 0 5
8320: PUSH
8321: EMPTY
8322: ST_TO_ADDR
// for i in list do
8323: LD_ADDR_VAR 0 6
8327: PUSH
8328: LD_VAR 0 2
8332: PUSH
8333: FOR_IN
8334: IFFALSE 8552
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8336: LD_ADDR_VAR 0 8
8340: PUSH
8341: LD_VAR 0 1
8345: PPUSH
8346: LD_VAR 0 6
8350: PUSH
8351: LD_INT 1
8353: ARRAY
8354: PPUSH
8355: LD_VAR 0 6
8359: PUSH
8360: LD_INT 2
8362: ARRAY
8363: PPUSH
8364: CALL_OW 297
8368: ST_TO_ADDR
// if not Count ( result ) then
8369: LD_VAR 0 5
8373: PPUSH
8374: CALL 4946 0 1
8378: NOT
8379: IFFALSE 8412
// begin result := Join ( result , [ i , tmp ] ) ;
8381: LD_ADDR_VAR 0 5
8385: PUSH
8386: LD_VAR 0 5
8390: PPUSH
8391: LD_VAR 0 6
8395: PUSH
8396: LD_VAR 0 8
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PPUSH
8405: CALL 40555 0 2
8409: ST_TO_ADDR
// continue ;
8410: GO 8333
// end ; if result [ result ] [ 2 ] <= tmp then
8412: LD_VAR 0 5
8416: PUSH
8417: LD_VAR 0 5
8421: ARRAY
8422: PUSH
8423: LD_INT 2
8425: ARRAY
8426: PUSH
8427: LD_VAR 0 8
8431: LESSEQUAL
8432: IFFALSE 8465
// result := Join ( result , [ i , tmp ] ) else
8434: LD_ADDR_VAR 0 5
8438: PUSH
8439: LD_VAR 0 5
8443: PPUSH
8444: LD_VAR 0 6
8448: PUSH
8449: LD_VAR 0 8
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PPUSH
8458: CALL 40555 0 2
8462: ST_TO_ADDR
8463: GO 8550
// begin for j := 1 to Count ( result ) do
8465: LD_ADDR_VAR 0 7
8469: PUSH
8470: DOUBLE
8471: LD_INT 1
8473: DEC
8474: ST_TO_ADDR
8475: LD_VAR 0 5
8479: PPUSH
8480: CALL 4946 0 1
8484: PUSH
8485: FOR_TO
8486: IFFALSE 8548
// begin if tmp < result [ j ] [ 2 ] then
8488: LD_VAR 0 8
8492: PUSH
8493: LD_VAR 0 5
8497: PUSH
8498: LD_VAR 0 7
8502: ARRAY
8503: PUSH
8504: LD_INT 2
8506: ARRAY
8507: LESS
8508: IFFALSE 8546
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8510: LD_ADDR_VAR 0 5
8514: PUSH
8515: LD_VAR 0 5
8519: PPUSH
8520: LD_VAR 0 7
8524: PPUSH
8525: LD_VAR 0 6
8529: PUSH
8530: LD_VAR 0 8
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PPUSH
8539: CALL_OW 2
8543: ST_TO_ADDR
// break ;
8544: GO 8548
// end ; end ;
8546: GO 8485
8548: POP
8549: POP
// end ; end ;
8550: GO 8333
8552: POP
8553: POP
// if result and not asc then
8554: LD_VAR 0 5
8558: PUSH
8559: LD_VAR 0 3
8563: NOT
8564: AND
8565: IFFALSE 8582
// result := ReverseArray ( result ) ;
8567: LD_ADDR_VAR 0 5
8571: PUSH
8572: LD_VAR 0 5
8576: PPUSH
8577: CALL 35822 0 1
8581: ST_TO_ADDR
// tmp := [ ] ;
8582: LD_ADDR_VAR 0 8
8586: PUSH
8587: EMPTY
8588: ST_TO_ADDR
// if mode then
8589: LD_VAR 0 4
8593: IFFALSE 8657
// begin for i := 1 to result do
8595: LD_ADDR_VAR 0 6
8599: PUSH
8600: DOUBLE
8601: LD_INT 1
8603: DEC
8604: ST_TO_ADDR
8605: LD_VAR 0 5
8609: PUSH
8610: FOR_TO
8611: IFFALSE 8645
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8613: LD_ADDR_VAR 0 8
8617: PUSH
8618: LD_VAR 0 8
8622: PPUSH
8623: LD_VAR 0 5
8627: PUSH
8628: LD_VAR 0 6
8632: ARRAY
8633: PUSH
8634: LD_INT 1
8636: ARRAY
8637: PPUSH
8638: CALL 40555 0 2
8642: ST_TO_ADDR
8643: GO 8610
8645: POP
8646: POP
// result := tmp ;
8647: LD_ADDR_VAR 0 5
8651: PUSH
8652: LD_VAR 0 8
8656: ST_TO_ADDR
// end ; end ;
8657: LD_VAR 0 5
8661: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8662: LD_INT 0
8664: PPUSH
8665: PPUSH
8666: PPUSH
8667: PPUSH
// if not list then
8668: LD_VAR 0 3
8672: NOT
8673: IFFALSE 8677
// exit ;
8675: GO 9065
// result := [ ] ;
8677: LD_ADDR_VAR 0 6
8681: PUSH
8682: EMPTY
8683: ST_TO_ADDR
// for i in list do
8684: LD_ADDR_VAR 0 7
8688: PUSH
8689: LD_VAR 0 3
8693: PUSH
8694: FOR_IN
8695: IFFALSE 8897
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8697: LD_ADDR_VAR 0 9
8701: PUSH
8702: LD_VAR 0 7
8706: PPUSH
8707: LD_VAR 0 1
8711: PPUSH
8712: LD_VAR 0 2
8716: PPUSH
8717: CALL_OW 297
8721: ST_TO_ADDR
// if not result then
8722: LD_VAR 0 6
8726: NOT
8727: IFFALSE 8753
// result := [ [ i , tmp ] ] else
8729: LD_ADDR_VAR 0 6
8733: PUSH
8734: LD_VAR 0 7
8738: PUSH
8739: LD_VAR 0 9
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PUSH
8748: EMPTY
8749: LIST
8750: ST_TO_ADDR
8751: GO 8895
// begin if result [ result ] [ 2 ] <= tmp then
8753: LD_VAR 0 6
8757: PUSH
8758: LD_VAR 0 6
8762: ARRAY
8763: PUSH
8764: LD_INT 2
8766: ARRAY
8767: PUSH
8768: LD_VAR 0 9
8772: LESSEQUAL
8773: IFFALSE 8815
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8775: LD_ADDR_VAR 0 6
8779: PUSH
8780: LD_VAR 0 6
8784: PPUSH
8785: LD_VAR 0 6
8789: PUSH
8790: LD_INT 1
8792: PLUS
8793: PPUSH
8794: LD_VAR 0 7
8798: PUSH
8799: LD_VAR 0 9
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PPUSH
8808: CALL_OW 2
8812: ST_TO_ADDR
8813: GO 8895
// for j := 1 to result do
8815: LD_ADDR_VAR 0 8
8819: PUSH
8820: DOUBLE
8821: LD_INT 1
8823: DEC
8824: ST_TO_ADDR
8825: LD_VAR 0 6
8829: PUSH
8830: FOR_TO
8831: IFFALSE 8893
// begin if tmp < result [ j ] [ 2 ] then
8833: LD_VAR 0 9
8837: PUSH
8838: LD_VAR 0 6
8842: PUSH
8843: LD_VAR 0 8
8847: ARRAY
8848: PUSH
8849: LD_INT 2
8851: ARRAY
8852: LESS
8853: IFFALSE 8891
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8855: LD_ADDR_VAR 0 6
8859: PUSH
8860: LD_VAR 0 6
8864: PPUSH
8865: LD_VAR 0 8
8869: PPUSH
8870: LD_VAR 0 7
8874: PUSH
8875: LD_VAR 0 9
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: PPUSH
8884: CALL_OW 2
8888: ST_TO_ADDR
// break ;
8889: GO 8893
// end ; end ;
8891: GO 8830
8893: POP
8894: POP
// end ; end ;
8895: GO 8694
8897: POP
8898: POP
// if result and not asc then
8899: LD_VAR 0 6
8903: PUSH
8904: LD_VAR 0 4
8908: NOT
8909: AND
8910: IFFALSE 8985
// begin tmp := result ;
8912: LD_ADDR_VAR 0 9
8916: PUSH
8917: LD_VAR 0 6
8921: ST_TO_ADDR
// for i = tmp downto 1 do
8922: LD_ADDR_VAR 0 7
8926: PUSH
8927: DOUBLE
8928: LD_VAR 0 9
8932: INC
8933: ST_TO_ADDR
8934: LD_INT 1
8936: PUSH
8937: FOR_DOWNTO
8938: IFFALSE 8983
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8940: LD_ADDR_VAR 0 6
8944: PUSH
8945: LD_VAR 0 6
8949: PPUSH
8950: LD_VAR 0 9
8954: PUSH
8955: LD_VAR 0 7
8959: MINUS
8960: PUSH
8961: LD_INT 1
8963: PLUS
8964: PPUSH
8965: LD_VAR 0 9
8969: PUSH
8970: LD_VAR 0 7
8974: ARRAY
8975: PPUSH
8976: CALL_OW 1
8980: ST_TO_ADDR
8981: GO 8937
8983: POP
8984: POP
// end ; tmp := [ ] ;
8985: LD_ADDR_VAR 0 9
8989: PUSH
8990: EMPTY
8991: ST_TO_ADDR
// if mode then
8992: LD_VAR 0 5
8996: IFFALSE 9065
// begin for i = 1 to result do
8998: LD_ADDR_VAR 0 7
9002: PUSH
9003: DOUBLE
9004: LD_INT 1
9006: DEC
9007: ST_TO_ADDR
9008: LD_VAR 0 6
9012: PUSH
9013: FOR_TO
9014: IFFALSE 9053
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9016: LD_ADDR_VAR 0 9
9020: PUSH
9021: LD_VAR 0 9
9025: PPUSH
9026: LD_VAR 0 7
9030: PPUSH
9031: LD_VAR 0 6
9035: PUSH
9036: LD_VAR 0 7
9040: ARRAY
9041: PUSH
9042: LD_INT 1
9044: ARRAY
9045: PPUSH
9046: CALL_OW 1
9050: ST_TO_ADDR
9051: GO 9013
9053: POP
9054: POP
// result := tmp ;
9055: LD_ADDR_VAR 0 6
9059: PUSH
9060: LD_VAR 0 9
9064: ST_TO_ADDR
// end ; end ;
9065: LD_VAR 0 6
9069: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9070: LD_INT 0
9072: PPUSH
9073: PPUSH
9074: PPUSH
9075: PPUSH
9076: PPUSH
9077: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9078: LD_ADDR_VAR 0 5
9082: PUSH
9083: LD_INT 0
9085: PUSH
9086: LD_INT 0
9088: PUSH
9089: LD_INT 0
9091: PUSH
9092: EMPTY
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: ST_TO_ADDR
// if not x or not y then
9100: LD_VAR 0 2
9104: NOT
9105: PUSH
9106: LD_VAR 0 3
9110: NOT
9111: OR
9112: IFFALSE 9116
// exit ;
9114: GO 10766
// if not range then
9116: LD_VAR 0 4
9120: NOT
9121: IFFALSE 9131
// range := 10 ;
9123: LD_ADDR_VAR 0 4
9127: PUSH
9128: LD_INT 10
9130: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9131: LD_ADDR_VAR 0 8
9135: PUSH
9136: LD_INT 81
9138: PUSH
9139: LD_VAR 0 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 92
9150: PUSH
9151: LD_VAR 0 2
9155: PUSH
9156: LD_VAR 0 3
9160: PUSH
9161: LD_VAR 0 4
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: PUSH
9172: LD_INT 3
9174: PUSH
9175: LD_INT 21
9177: PUSH
9178: LD_INT 3
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: PPUSH
9194: CALL_OW 69
9198: ST_TO_ADDR
// if not tmp then
9199: LD_VAR 0 8
9203: NOT
9204: IFFALSE 9208
// exit ;
9206: GO 10766
// for i in tmp do
9208: LD_ADDR_VAR 0 6
9212: PUSH
9213: LD_VAR 0 8
9217: PUSH
9218: FOR_IN
9219: IFFALSE 10741
// begin points := [ 0 , 0 , 0 ] ;
9221: LD_ADDR_VAR 0 9
9225: PUSH
9226: LD_INT 0
9228: PUSH
9229: LD_INT 0
9231: PUSH
9232: LD_INT 0
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: LIST
9239: ST_TO_ADDR
// bpoints := 1 ;
9240: LD_ADDR_VAR 0 10
9244: PUSH
9245: LD_INT 1
9247: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9248: LD_VAR 0 6
9252: PPUSH
9253: CALL_OW 247
9257: PUSH
9258: LD_INT 1
9260: DOUBLE
9261: EQUAL
9262: IFTRUE 9266
9264: GO 9844
9266: POP
// begin if GetClass ( i ) = 1 then
9267: LD_VAR 0 6
9271: PPUSH
9272: CALL_OW 257
9276: PUSH
9277: LD_INT 1
9279: EQUAL
9280: IFFALSE 9301
// points := [ 10 , 5 , 3 ] ;
9282: LD_ADDR_VAR 0 9
9286: PUSH
9287: LD_INT 10
9289: PUSH
9290: LD_INT 5
9292: PUSH
9293: LD_INT 3
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: LIST
9300: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9301: LD_VAR 0 6
9305: PPUSH
9306: CALL_OW 257
9310: PUSH
9311: LD_INT 2
9313: PUSH
9314: LD_INT 3
9316: PUSH
9317: LD_INT 4
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: LIST
9324: IN
9325: IFFALSE 9346
// points := [ 3 , 2 , 1 ] ;
9327: LD_ADDR_VAR 0 9
9331: PUSH
9332: LD_INT 3
9334: PUSH
9335: LD_INT 2
9337: PUSH
9338: LD_INT 1
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9346: LD_VAR 0 6
9350: PPUSH
9351: CALL_OW 257
9355: PUSH
9356: LD_INT 5
9358: EQUAL
9359: IFFALSE 9380
// points := [ 130 , 5 , 2 ] ;
9361: LD_ADDR_VAR 0 9
9365: PUSH
9366: LD_INT 130
9368: PUSH
9369: LD_INT 5
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: LIST
9379: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9380: LD_VAR 0 6
9384: PPUSH
9385: CALL_OW 257
9389: PUSH
9390: LD_INT 8
9392: EQUAL
9393: IFFALSE 9414
// points := [ 35 , 35 , 30 ] ;
9395: LD_ADDR_VAR 0 9
9399: PUSH
9400: LD_INT 35
9402: PUSH
9403: LD_INT 35
9405: PUSH
9406: LD_INT 30
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9414: LD_VAR 0 6
9418: PPUSH
9419: CALL_OW 257
9423: PUSH
9424: LD_INT 9
9426: EQUAL
9427: IFFALSE 9448
// points := [ 20 , 55 , 40 ] ;
9429: LD_ADDR_VAR 0 9
9433: PUSH
9434: LD_INT 20
9436: PUSH
9437: LD_INT 55
9439: PUSH
9440: LD_INT 40
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: LIST
9447: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9448: LD_VAR 0 6
9452: PPUSH
9453: CALL_OW 257
9457: PUSH
9458: LD_INT 12
9460: PUSH
9461: LD_INT 16
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: IN
9468: IFFALSE 9489
// points := [ 5 , 3 , 2 ] ;
9470: LD_ADDR_VAR 0 9
9474: PUSH
9475: LD_INT 5
9477: PUSH
9478: LD_INT 3
9480: PUSH
9481: LD_INT 2
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: LIST
9488: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9489: LD_VAR 0 6
9493: PPUSH
9494: CALL_OW 257
9498: PUSH
9499: LD_INT 17
9501: EQUAL
9502: IFFALSE 9523
// points := [ 100 , 50 , 75 ] ;
9504: LD_ADDR_VAR 0 9
9508: PUSH
9509: LD_INT 100
9511: PUSH
9512: LD_INT 50
9514: PUSH
9515: LD_INT 75
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: LIST
9522: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9523: LD_VAR 0 6
9527: PPUSH
9528: CALL_OW 257
9532: PUSH
9533: LD_INT 15
9535: EQUAL
9536: IFFALSE 9557
// points := [ 10 , 5 , 3 ] ;
9538: LD_ADDR_VAR 0 9
9542: PUSH
9543: LD_INT 10
9545: PUSH
9546: LD_INT 5
9548: PUSH
9549: LD_INT 3
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: LIST
9556: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9557: LD_VAR 0 6
9561: PPUSH
9562: CALL_OW 257
9566: PUSH
9567: LD_INT 14
9569: EQUAL
9570: IFFALSE 9591
// points := [ 10 , 0 , 0 ] ;
9572: LD_ADDR_VAR 0 9
9576: PUSH
9577: LD_INT 10
9579: PUSH
9580: LD_INT 0
9582: PUSH
9583: LD_INT 0
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9591: LD_VAR 0 6
9595: PPUSH
9596: CALL_OW 257
9600: PUSH
9601: LD_INT 11
9603: EQUAL
9604: IFFALSE 9625
// points := [ 30 , 10 , 5 ] ;
9606: LD_ADDR_VAR 0 9
9610: PUSH
9611: LD_INT 30
9613: PUSH
9614: LD_INT 10
9616: PUSH
9617: LD_INT 5
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: LIST
9624: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9625: LD_VAR 0 1
9629: PPUSH
9630: LD_INT 5
9632: PPUSH
9633: CALL_OW 321
9637: PUSH
9638: LD_INT 2
9640: EQUAL
9641: IFFALSE 9658
// bpoints := bpoints * 1.8 ;
9643: LD_ADDR_VAR 0 10
9647: PUSH
9648: LD_VAR 0 10
9652: PUSH
9653: LD_REAL  1.80000000000000E+0000
9656: MUL
9657: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9658: LD_VAR 0 6
9662: PPUSH
9663: CALL_OW 257
9667: PUSH
9668: LD_INT 1
9670: PUSH
9671: LD_INT 2
9673: PUSH
9674: LD_INT 3
9676: PUSH
9677: LD_INT 4
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: IN
9686: PUSH
9687: LD_VAR 0 1
9691: PPUSH
9692: LD_INT 51
9694: PPUSH
9695: CALL_OW 321
9699: PUSH
9700: LD_INT 2
9702: EQUAL
9703: AND
9704: IFFALSE 9721
// bpoints := bpoints * 1.2 ;
9706: LD_ADDR_VAR 0 10
9710: PUSH
9711: LD_VAR 0 10
9715: PUSH
9716: LD_REAL  1.20000000000000E+0000
9719: MUL
9720: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9721: LD_VAR 0 6
9725: PPUSH
9726: CALL_OW 257
9730: PUSH
9731: LD_INT 5
9733: PUSH
9734: LD_INT 7
9736: PUSH
9737: LD_INT 9
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: LIST
9744: IN
9745: PUSH
9746: LD_VAR 0 1
9750: PPUSH
9751: LD_INT 52
9753: PPUSH
9754: CALL_OW 321
9758: PUSH
9759: LD_INT 2
9761: EQUAL
9762: AND
9763: IFFALSE 9780
// bpoints := bpoints * 1.5 ;
9765: LD_ADDR_VAR 0 10
9769: PUSH
9770: LD_VAR 0 10
9774: PUSH
9775: LD_REAL  1.50000000000000E+0000
9778: MUL
9779: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9780: LD_VAR 0 1
9784: PPUSH
9785: LD_INT 66
9787: PPUSH
9788: CALL_OW 321
9792: PUSH
9793: LD_INT 2
9795: EQUAL
9796: IFFALSE 9813
// bpoints := bpoints * 1.1 ;
9798: LD_ADDR_VAR 0 10
9802: PUSH
9803: LD_VAR 0 10
9807: PUSH
9808: LD_REAL  1.10000000000000E+0000
9811: MUL
9812: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9813: LD_ADDR_VAR 0 10
9817: PUSH
9818: LD_VAR 0 10
9822: PUSH
9823: LD_VAR 0 6
9827: PPUSH
9828: LD_INT 1
9830: PPUSH
9831: CALL_OW 259
9835: PUSH
9836: LD_REAL  1.15000000000000E+0000
9839: MUL
9840: MUL
9841: ST_TO_ADDR
// end ; unit_vehicle :
9842: GO 10670
9844: LD_INT 2
9846: DOUBLE
9847: EQUAL
9848: IFTRUE 9852
9850: GO 10658
9852: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9853: LD_VAR 0 6
9857: PPUSH
9858: CALL_OW 264
9862: PUSH
9863: LD_INT 2
9865: PUSH
9866: LD_INT 42
9868: PUSH
9869: LD_INT 24
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: IN
9877: IFFALSE 9898
// points := [ 25 , 5 , 3 ] ;
9879: LD_ADDR_VAR 0 9
9883: PUSH
9884: LD_INT 25
9886: PUSH
9887: LD_INT 5
9889: PUSH
9890: LD_INT 3
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: LIST
9897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9898: LD_VAR 0 6
9902: PPUSH
9903: CALL_OW 264
9907: PUSH
9908: LD_INT 4
9910: PUSH
9911: LD_INT 43
9913: PUSH
9914: LD_INT 25
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: LIST
9921: IN
9922: IFFALSE 9943
// points := [ 40 , 15 , 5 ] ;
9924: LD_ADDR_VAR 0 9
9928: PUSH
9929: LD_INT 40
9931: PUSH
9932: LD_INT 15
9934: PUSH
9935: LD_INT 5
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: LIST
9942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9943: LD_VAR 0 6
9947: PPUSH
9948: CALL_OW 264
9952: PUSH
9953: LD_INT 3
9955: PUSH
9956: LD_INT 23
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: IN
9963: IFFALSE 9984
// points := [ 7 , 25 , 8 ] ;
9965: LD_ADDR_VAR 0 9
9969: PUSH
9970: LD_INT 7
9972: PUSH
9973: LD_INT 25
9975: PUSH
9976: LD_INT 8
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: LIST
9983: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9984: LD_VAR 0 6
9988: PPUSH
9989: CALL_OW 264
9993: PUSH
9994: LD_INT 5
9996: PUSH
9997: LD_INT 27
9999: PUSH
10000: LD_INT 44
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: LIST
10007: IN
10008: IFFALSE 10029
// points := [ 14 , 50 , 16 ] ;
10010: LD_ADDR_VAR 0 9
10014: PUSH
10015: LD_INT 14
10017: PUSH
10018: LD_INT 50
10020: PUSH
10021: LD_INT 16
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: LIST
10028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10029: LD_VAR 0 6
10033: PPUSH
10034: CALL_OW 264
10038: PUSH
10039: LD_INT 6
10041: PUSH
10042: LD_INT 46
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: IN
10049: IFFALSE 10070
// points := [ 32 , 120 , 70 ] ;
10051: LD_ADDR_VAR 0 9
10055: PUSH
10056: LD_INT 32
10058: PUSH
10059: LD_INT 120
10061: PUSH
10062: LD_INT 70
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: LIST
10069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10070: LD_VAR 0 6
10074: PPUSH
10075: CALL_OW 264
10079: PUSH
10080: LD_INT 7
10082: PUSH
10083: LD_INT 28
10085: PUSH
10086: LD_INT 45
10088: PUSH
10089: LD_INT 92
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: IN
10098: IFFALSE 10119
// points := [ 35 , 20 , 45 ] ;
10100: LD_ADDR_VAR 0 9
10104: PUSH
10105: LD_INT 35
10107: PUSH
10108: LD_INT 20
10110: PUSH
10111: LD_INT 45
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10119: LD_VAR 0 6
10123: PPUSH
10124: CALL_OW 264
10128: PUSH
10129: LD_INT 47
10131: PUSH
10132: EMPTY
10133: LIST
10134: IN
10135: IFFALSE 10156
// points := [ 67 , 45 , 75 ] ;
10137: LD_ADDR_VAR 0 9
10141: PUSH
10142: LD_INT 67
10144: PUSH
10145: LD_INT 45
10147: PUSH
10148: LD_INT 75
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10156: LD_VAR 0 6
10160: PPUSH
10161: CALL_OW 264
10165: PUSH
10166: LD_INT 26
10168: PUSH
10169: EMPTY
10170: LIST
10171: IN
10172: IFFALSE 10193
// points := [ 120 , 30 , 80 ] ;
10174: LD_ADDR_VAR 0 9
10178: PUSH
10179: LD_INT 120
10181: PUSH
10182: LD_INT 30
10184: PUSH
10185: LD_INT 80
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10193: LD_VAR 0 6
10197: PPUSH
10198: CALL_OW 264
10202: PUSH
10203: LD_INT 22
10205: PUSH
10206: EMPTY
10207: LIST
10208: IN
10209: IFFALSE 10230
// points := [ 40 , 1 , 1 ] ;
10211: LD_ADDR_VAR 0 9
10215: PUSH
10216: LD_INT 40
10218: PUSH
10219: LD_INT 1
10221: PUSH
10222: LD_INT 1
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: LIST
10229: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10230: LD_VAR 0 6
10234: PPUSH
10235: CALL_OW 264
10239: PUSH
10240: LD_INT 29
10242: PUSH
10243: EMPTY
10244: LIST
10245: IN
10246: IFFALSE 10267
// points := [ 70 , 200 , 400 ] ;
10248: LD_ADDR_VAR 0 9
10252: PUSH
10253: LD_INT 70
10255: PUSH
10256: LD_INT 200
10258: PUSH
10259: LD_INT 400
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: LIST
10266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10267: LD_VAR 0 6
10271: PPUSH
10272: CALL_OW 264
10276: PUSH
10277: LD_INT 14
10279: PUSH
10280: LD_INT 53
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: IN
10287: IFFALSE 10308
// points := [ 40 , 10 , 20 ] ;
10289: LD_ADDR_VAR 0 9
10293: PUSH
10294: LD_INT 40
10296: PUSH
10297: LD_INT 10
10299: PUSH
10300: LD_INT 20
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: LIST
10307: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10308: LD_VAR 0 6
10312: PPUSH
10313: CALL_OW 264
10317: PUSH
10318: LD_INT 9
10320: PUSH
10321: EMPTY
10322: LIST
10323: IN
10324: IFFALSE 10345
// points := [ 5 , 70 , 20 ] ;
10326: LD_ADDR_VAR 0 9
10330: PUSH
10331: LD_INT 5
10333: PUSH
10334: LD_INT 70
10336: PUSH
10337: LD_INT 20
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: LIST
10344: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10345: LD_VAR 0 6
10349: PPUSH
10350: CALL_OW 264
10354: PUSH
10355: LD_INT 10
10357: PUSH
10358: EMPTY
10359: LIST
10360: IN
10361: IFFALSE 10382
// points := [ 35 , 110 , 70 ] ;
10363: LD_ADDR_VAR 0 9
10367: PUSH
10368: LD_INT 35
10370: PUSH
10371: LD_INT 110
10373: PUSH
10374: LD_INT 70
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: LIST
10381: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10382: LD_VAR 0 6
10386: PPUSH
10387: CALL_OW 265
10391: PUSH
10392: LD_INT 25
10394: EQUAL
10395: IFFALSE 10416
// points := [ 80 , 65 , 100 ] ;
10397: LD_ADDR_VAR 0 9
10401: PUSH
10402: LD_INT 80
10404: PUSH
10405: LD_INT 65
10407: PUSH
10408: LD_INT 100
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: LIST
10415: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10416: LD_VAR 0 6
10420: PPUSH
10421: CALL_OW 263
10425: PUSH
10426: LD_INT 1
10428: EQUAL
10429: IFFALSE 10464
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10431: LD_ADDR_VAR 0 10
10435: PUSH
10436: LD_VAR 0 10
10440: PUSH
10441: LD_VAR 0 6
10445: PPUSH
10446: CALL_OW 311
10450: PPUSH
10451: LD_INT 3
10453: PPUSH
10454: CALL_OW 259
10458: PUSH
10459: LD_INT 4
10461: MUL
10462: MUL
10463: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10464: LD_VAR 0 6
10468: PPUSH
10469: CALL_OW 263
10473: PUSH
10474: LD_INT 2
10476: EQUAL
10477: IFFALSE 10528
// begin j := IsControledBy ( i ) ;
10479: LD_ADDR_VAR 0 7
10483: PUSH
10484: LD_VAR 0 6
10488: PPUSH
10489: CALL_OW 312
10493: ST_TO_ADDR
// if j then
10494: LD_VAR 0 7
10498: IFFALSE 10528
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10500: LD_ADDR_VAR 0 10
10504: PUSH
10505: LD_VAR 0 10
10509: PUSH
10510: LD_VAR 0 7
10514: PPUSH
10515: LD_INT 3
10517: PPUSH
10518: CALL_OW 259
10522: PUSH
10523: LD_INT 3
10525: MUL
10526: MUL
10527: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10528: LD_VAR 0 6
10532: PPUSH
10533: CALL_OW 264
10537: PUSH
10538: LD_INT 5
10540: PUSH
10541: LD_INT 6
10543: PUSH
10544: LD_INT 46
10546: PUSH
10547: LD_INT 44
10549: PUSH
10550: LD_INT 47
10552: PUSH
10553: LD_INT 45
10555: PUSH
10556: LD_INT 28
10558: PUSH
10559: LD_INT 7
10561: PUSH
10562: LD_INT 27
10564: PUSH
10565: LD_INT 29
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: IN
10580: PUSH
10581: LD_VAR 0 1
10585: PPUSH
10586: LD_INT 52
10588: PPUSH
10589: CALL_OW 321
10593: PUSH
10594: LD_INT 2
10596: EQUAL
10597: AND
10598: IFFALSE 10615
// bpoints := bpoints * 1.2 ;
10600: LD_ADDR_VAR 0 10
10604: PUSH
10605: LD_VAR 0 10
10609: PUSH
10610: LD_REAL  1.20000000000000E+0000
10613: MUL
10614: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10615: LD_VAR 0 6
10619: PPUSH
10620: CALL_OW 264
10624: PUSH
10625: LD_INT 6
10627: PUSH
10628: LD_INT 46
10630: PUSH
10631: LD_INT 47
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: LIST
10638: IN
10639: IFFALSE 10656
// bpoints := bpoints * 1.2 ;
10641: LD_ADDR_VAR 0 10
10645: PUSH
10646: LD_VAR 0 10
10650: PUSH
10651: LD_REAL  1.20000000000000E+0000
10654: MUL
10655: ST_TO_ADDR
// end ; unit_building :
10656: GO 10670
10658: LD_INT 3
10660: DOUBLE
10661: EQUAL
10662: IFTRUE 10666
10664: GO 10669
10666: POP
// ; end ;
10667: GO 10670
10669: POP
// for j = 1 to 3 do
10670: LD_ADDR_VAR 0 7
10674: PUSH
10675: DOUBLE
10676: LD_INT 1
10678: DEC
10679: ST_TO_ADDR
10680: LD_INT 3
10682: PUSH
10683: FOR_TO
10684: IFFALSE 10737
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10686: LD_ADDR_VAR 0 5
10690: PUSH
10691: LD_VAR 0 5
10695: PPUSH
10696: LD_VAR 0 7
10700: PPUSH
10701: LD_VAR 0 5
10705: PUSH
10706: LD_VAR 0 7
10710: ARRAY
10711: PUSH
10712: LD_VAR 0 9
10716: PUSH
10717: LD_VAR 0 7
10721: ARRAY
10722: PUSH
10723: LD_VAR 0 10
10727: MUL
10728: PLUS
10729: PPUSH
10730: CALL_OW 1
10734: ST_TO_ADDR
10735: GO 10683
10737: POP
10738: POP
// end ;
10739: GO 9218
10741: POP
10742: POP
// result := Replace ( result , 4 , tmp ) ;
10743: LD_ADDR_VAR 0 5
10747: PUSH
10748: LD_VAR 0 5
10752: PPUSH
10753: LD_INT 4
10755: PPUSH
10756: LD_VAR 0 8
10760: PPUSH
10761: CALL_OW 1
10765: ST_TO_ADDR
// end ;
10766: LD_VAR 0 5
10770: RET
// export function DangerAtRange ( unit , range ) ; begin
10771: LD_INT 0
10773: PPUSH
// if not unit then
10774: LD_VAR 0 1
10778: NOT
10779: IFFALSE 10783
// exit ;
10781: GO 10828
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10783: LD_ADDR_VAR 0 3
10787: PUSH
10788: LD_VAR 0 1
10792: PPUSH
10793: CALL_OW 255
10797: PPUSH
10798: LD_VAR 0 1
10802: PPUSH
10803: CALL_OW 250
10807: PPUSH
10808: LD_VAR 0 1
10812: PPUSH
10813: CALL_OW 251
10817: PPUSH
10818: LD_VAR 0 2
10822: PPUSH
10823: CALL 9070 0 4
10827: ST_TO_ADDR
// end ;
10828: LD_VAR 0 3
10832: RET
// export function DangerInArea ( side , area ) ; begin
10833: LD_INT 0
10835: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10836: LD_ADDR_VAR 0 3
10840: PUSH
10841: LD_VAR 0 2
10845: PPUSH
10846: LD_INT 81
10848: PUSH
10849: LD_VAR 0 1
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: PPUSH
10858: CALL_OW 70
10862: ST_TO_ADDR
// end ;
10863: LD_VAR 0 3
10867: RET
// export function IsExtension ( b ) ; begin
10868: LD_INT 0
10870: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10871: LD_ADDR_VAR 0 2
10875: PUSH
10876: LD_VAR 0 1
10880: PUSH
10881: LD_INT 23
10883: PUSH
10884: LD_INT 20
10886: PUSH
10887: LD_INT 22
10889: PUSH
10890: LD_INT 17
10892: PUSH
10893: LD_INT 24
10895: PUSH
10896: LD_INT 21
10898: PUSH
10899: LD_INT 19
10901: PUSH
10902: LD_INT 16
10904: PUSH
10905: LD_INT 25
10907: PUSH
10908: LD_INT 18
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: IN
10923: ST_TO_ADDR
// end ;
10924: LD_VAR 0 2
10928: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10929: LD_INT 0
10931: PPUSH
10932: PPUSH
10933: PPUSH
// result := [ ] ;
10934: LD_ADDR_VAR 0 4
10938: PUSH
10939: EMPTY
10940: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10941: LD_ADDR_VAR 0 5
10945: PUSH
10946: LD_VAR 0 2
10950: PPUSH
10951: LD_INT 21
10953: PUSH
10954: LD_INT 3
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PPUSH
10961: CALL_OW 70
10965: ST_TO_ADDR
// if not tmp then
10966: LD_VAR 0 5
10970: NOT
10971: IFFALSE 10975
// exit ;
10973: GO 11039
// if checkLink then
10975: LD_VAR 0 3
10979: IFFALSE 11029
// begin for i in tmp do
10981: LD_ADDR_VAR 0 6
10985: PUSH
10986: LD_VAR 0 5
10990: PUSH
10991: FOR_IN
10992: IFFALSE 11027
// if GetBase ( i ) <> base then
10994: LD_VAR 0 6
10998: PPUSH
10999: CALL_OW 274
11003: PUSH
11004: LD_VAR 0 1
11008: NONEQUAL
11009: IFFALSE 11025
// ComLinkToBase ( base , i ) ;
11011: LD_VAR 0 1
11015: PPUSH
11016: LD_VAR 0 6
11020: PPUSH
11021: CALL_OW 169
11025: GO 10991
11027: POP
11028: POP
// end ; result := tmp ;
11029: LD_ADDR_VAR 0 4
11033: PUSH
11034: LD_VAR 0 5
11038: ST_TO_ADDR
// end ;
11039: LD_VAR 0 4
11043: RET
// export function ComComplete ( units , b ) ; var i ; begin
11044: LD_INT 0
11046: PPUSH
11047: PPUSH
// if not units then
11048: LD_VAR 0 1
11052: NOT
11053: IFFALSE 11057
// exit ;
11055: GO 11147
// for i in units do
11057: LD_ADDR_VAR 0 4
11061: PUSH
11062: LD_VAR 0 1
11066: PUSH
11067: FOR_IN
11068: IFFALSE 11145
// if BuildingStatus ( b ) = bs_build then
11070: LD_VAR 0 2
11074: PPUSH
11075: CALL_OW 461
11079: PUSH
11080: LD_INT 1
11082: EQUAL
11083: IFFALSE 11143
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11085: LD_VAR 0 4
11089: PPUSH
11090: LD_STRING h
11092: PUSH
11093: LD_VAR 0 2
11097: PPUSH
11098: CALL_OW 250
11102: PUSH
11103: LD_VAR 0 2
11107: PPUSH
11108: CALL_OW 251
11112: PUSH
11113: LD_VAR 0 2
11117: PUSH
11118: LD_INT 0
11120: PUSH
11121: LD_INT 0
11123: PUSH
11124: LD_INT 0
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: PUSH
11136: EMPTY
11137: LIST
11138: PPUSH
11139: CALL_OW 446
11143: GO 11067
11145: POP
11146: POP
// end ;
11147: LD_VAR 0 3
11151: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11152: LD_INT 0
11154: PPUSH
11155: PPUSH
11156: PPUSH
11157: PPUSH
11158: PPUSH
11159: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11160: LD_VAR 0 1
11164: NOT
11165: PUSH
11166: LD_VAR 0 1
11170: PPUSH
11171: CALL_OW 263
11175: PUSH
11176: LD_INT 2
11178: NONEQUAL
11179: OR
11180: IFFALSE 11184
// exit ;
11182: GO 11500
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11184: LD_ADDR_VAR 0 6
11188: PUSH
11189: LD_INT 22
11191: PUSH
11192: LD_VAR 0 1
11196: PPUSH
11197: CALL_OW 255
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 2
11208: PUSH
11209: LD_INT 30
11211: PUSH
11212: LD_INT 36
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 34
11221: PUSH
11222: LD_INT 31
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: LIST
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 69
11242: ST_TO_ADDR
// if not tmp then
11243: LD_VAR 0 6
11247: NOT
11248: IFFALSE 11252
// exit ;
11250: GO 11500
// result := [ ] ;
11252: LD_ADDR_VAR 0 2
11256: PUSH
11257: EMPTY
11258: ST_TO_ADDR
// for i in tmp do
11259: LD_ADDR_VAR 0 3
11263: PUSH
11264: LD_VAR 0 6
11268: PUSH
11269: FOR_IN
11270: IFFALSE 11341
// begin t := UnitsInside ( i ) ;
11272: LD_ADDR_VAR 0 4
11276: PUSH
11277: LD_VAR 0 3
11281: PPUSH
11282: CALL_OW 313
11286: ST_TO_ADDR
// if t then
11287: LD_VAR 0 4
11291: IFFALSE 11339
// for j in t do
11293: LD_ADDR_VAR 0 7
11297: PUSH
11298: LD_VAR 0 4
11302: PUSH
11303: FOR_IN
11304: IFFALSE 11337
// result := Replace ( result , result + 1 , j ) ;
11306: LD_ADDR_VAR 0 2
11310: PUSH
11311: LD_VAR 0 2
11315: PPUSH
11316: LD_VAR 0 2
11320: PUSH
11321: LD_INT 1
11323: PLUS
11324: PPUSH
11325: LD_VAR 0 7
11329: PPUSH
11330: CALL_OW 1
11334: ST_TO_ADDR
11335: GO 11303
11337: POP
11338: POP
// end ;
11339: GO 11269
11341: POP
11342: POP
// if not result then
11343: LD_VAR 0 2
11347: NOT
11348: IFFALSE 11352
// exit ;
11350: GO 11500
// mech := result [ 1 ] ;
11352: LD_ADDR_VAR 0 5
11356: PUSH
11357: LD_VAR 0 2
11361: PUSH
11362: LD_INT 1
11364: ARRAY
11365: ST_TO_ADDR
// if result > 1 then
11366: LD_VAR 0 2
11370: PUSH
11371: LD_INT 1
11373: GREATER
11374: IFFALSE 11486
// begin for i = 2 to result do
11376: LD_ADDR_VAR 0 3
11380: PUSH
11381: DOUBLE
11382: LD_INT 2
11384: DEC
11385: ST_TO_ADDR
11386: LD_VAR 0 2
11390: PUSH
11391: FOR_TO
11392: IFFALSE 11484
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11394: LD_ADDR_VAR 0 4
11398: PUSH
11399: LD_VAR 0 2
11403: PUSH
11404: LD_VAR 0 3
11408: ARRAY
11409: PPUSH
11410: LD_INT 3
11412: PPUSH
11413: CALL_OW 259
11417: PUSH
11418: LD_VAR 0 2
11422: PUSH
11423: LD_VAR 0 3
11427: ARRAY
11428: PPUSH
11429: CALL_OW 432
11433: MINUS
11434: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11435: LD_VAR 0 4
11439: PUSH
11440: LD_VAR 0 5
11444: PPUSH
11445: LD_INT 3
11447: PPUSH
11448: CALL_OW 259
11452: PUSH
11453: LD_VAR 0 5
11457: PPUSH
11458: CALL_OW 432
11462: MINUS
11463: GREATEREQUAL
11464: IFFALSE 11482
// mech := result [ i ] ;
11466: LD_ADDR_VAR 0 5
11470: PUSH
11471: LD_VAR 0 2
11475: PUSH
11476: LD_VAR 0 3
11480: ARRAY
11481: ST_TO_ADDR
// end ;
11482: GO 11391
11484: POP
11485: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11486: LD_VAR 0 1
11490: PPUSH
11491: LD_VAR 0 5
11495: PPUSH
11496: CALL_OW 135
// end ;
11500: LD_VAR 0 2
11504: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11505: LD_INT 0
11507: PPUSH
11508: PPUSH
11509: PPUSH
11510: PPUSH
11511: PPUSH
11512: PPUSH
11513: PPUSH
11514: PPUSH
11515: PPUSH
11516: PPUSH
11517: PPUSH
11518: PPUSH
11519: PPUSH
// result := [ ] ;
11520: LD_ADDR_VAR 0 7
11524: PUSH
11525: EMPTY
11526: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11527: LD_VAR 0 1
11531: PPUSH
11532: CALL_OW 266
11536: PUSH
11537: LD_INT 0
11539: PUSH
11540: LD_INT 1
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: IN
11547: NOT
11548: IFFALSE 11552
// exit ;
11550: GO 13186
// if name then
11552: LD_VAR 0 3
11556: IFFALSE 11572
// SetBName ( base_dep , name ) ;
11558: LD_VAR 0 1
11562: PPUSH
11563: LD_VAR 0 3
11567: PPUSH
11568: CALL_OW 500
// base := GetBase ( base_dep ) ;
11572: LD_ADDR_VAR 0 15
11576: PUSH
11577: LD_VAR 0 1
11581: PPUSH
11582: CALL_OW 274
11586: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11587: LD_ADDR_VAR 0 16
11591: PUSH
11592: LD_VAR 0 1
11596: PPUSH
11597: CALL_OW 255
11601: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11602: LD_ADDR_VAR 0 17
11606: PUSH
11607: LD_VAR 0 1
11611: PPUSH
11612: CALL_OW 248
11616: ST_TO_ADDR
// if sources then
11617: LD_VAR 0 5
11621: IFFALSE 11668
// for i = 1 to 3 do
11623: LD_ADDR_VAR 0 8
11627: PUSH
11628: DOUBLE
11629: LD_INT 1
11631: DEC
11632: ST_TO_ADDR
11633: LD_INT 3
11635: PUSH
11636: FOR_TO
11637: IFFALSE 11666
// AddResourceType ( base , i , sources [ i ] ) ;
11639: LD_VAR 0 15
11643: PPUSH
11644: LD_VAR 0 8
11648: PPUSH
11649: LD_VAR 0 5
11653: PUSH
11654: LD_VAR 0 8
11658: ARRAY
11659: PPUSH
11660: CALL_OW 276
11664: GO 11636
11666: POP
11667: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11668: LD_ADDR_VAR 0 18
11672: PUSH
11673: LD_VAR 0 15
11677: PPUSH
11678: LD_VAR 0 2
11682: PPUSH
11683: LD_INT 1
11685: PPUSH
11686: CALL 10929 0 3
11690: ST_TO_ADDR
// InitHc ;
11691: CALL_OW 19
// InitUc ;
11695: CALL_OW 18
// uc_side := side ;
11699: LD_ADDR_OWVAR 20
11703: PUSH
11704: LD_VAR 0 16
11708: ST_TO_ADDR
// uc_nation := nation ;
11709: LD_ADDR_OWVAR 21
11713: PUSH
11714: LD_VAR 0 17
11718: ST_TO_ADDR
// if buildings then
11719: LD_VAR 0 18
11723: IFFALSE 13045
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11725: LD_ADDR_VAR 0 19
11729: PUSH
11730: LD_VAR 0 18
11734: PPUSH
11735: LD_INT 2
11737: PUSH
11738: LD_INT 30
11740: PUSH
11741: LD_INT 29
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: PUSH
11748: LD_INT 30
11750: PUSH
11751: LD_INT 30
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: LIST
11762: PPUSH
11763: CALL_OW 72
11767: ST_TO_ADDR
// if tmp then
11768: LD_VAR 0 19
11772: IFFALSE 11820
// for i in tmp do
11774: LD_ADDR_VAR 0 8
11778: PUSH
11779: LD_VAR 0 19
11783: PUSH
11784: FOR_IN
11785: IFFALSE 11818
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11787: LD_VAR 0 8
11791: PPUSH
11792: CALL_OW 250
11796: PPUSH
11797: LD_VAR 0 8
11801: PPUSH
11802: CALL_OW 251
11806: PPUSH
11807: LD_VAR 0 16
11811: PPUSH
11812: CALL_OW 441
11816: GO 11784
11818: POP
11819: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11820: LD_VAR 0 18
11824: PPUSH
11825: LD_INT 2
11827: PUSH
11828: LD_INT 30
11830: PUSH
11831: LD_INT 32
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 30
11840: PUSH
11841: LD_INT 33
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: LIST
11852: PPUSH
11853: CALL_OW 72
11857: IFFALSE 11945
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11859: LD_ADDR_VAR 0 8
11863: PUSH
11864: LD_VAR 0 18
11868: PPUSH
11869: LD_INT 2
11871: PUSH
11872: LD_INT 30
11874: PUSH
11875: LD_INT 32
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PUSH
11882: LD_INT 30
11884: PUSH
11885: LD_INT 33
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: LIST
11896: PPUSH
11897: CALL_OW 72
11901: PUSH
11902: FOR_IN
11903: IFFALSE 11943
// begin if not GetBWeapon ( i ) then
11905: LD_VAR 0 8
11909: PPUSH
11910: CALL_OW 269
11914: NOT
11915: IFFALSE 11941
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11917: LD_VAR 0 8
11921: PPUSH
11922: LD_VAR 0 8
11926: PPUSH
11927: LD_VAR 0 2
11931: PPUSH
11932: CALL 13191 0 2
11936: PPUSH
11937: CALL_OW 431
// end ;
11941: GO 11902
11943: POP
11944: POP
// end ; for i = 1 to personel do
11945: LD_ADDR_VAR 0 8
11949: PUSH
11950: DOUBLE
11951: LD_INT 1
11953: DEC
11954: ST_TO_ADDR
11955: LD_VAR 0 6
11959: PUSH
11960: FOR_TO
11961: IFFALSE 13025
// begin if i > 4 then
11963: LD_VAR 0 8
11967: PUSH
11968: LD_INT 4
11970: GREATER
11971: IFFALSE 11975
// break ;
11973: GO 13025
// case i of 1 :
11975: LD_VAR 0 8
11979: PUSH
11980: LD_INT 1
11982: DOUBLE
11983: EQUAL
11984: IFTRUE 11988
11986: GO 12068
11988: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11989: LD_ADDR_VAR 0 12
11993: PUSH
11994: LD_VAR 0 18
11998: PPUSH
11999: LD_INT 22
12001: PUSH
12002: LD_VAR 0 16
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 58
12013: PUSH
12014: EMPTY
12015: LIST
12016: PUSH
12017: LD_INT 2
12019: PUSH
12020: LD_INT 30
12022: PUSH
12023: LD_INT 32
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: LD_INT 30
12032: PUSH
12033: LD_INT 4
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 30
12042: PUSH
12043: LD_INT 5
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: LIST
12060: PPUSH
12061: CALL_OW 72
12065: ST_TO_ADDR
12066: GO 12290
12068: LD_INT 2
12070: DOUBLE
12071: EQUAL
12072: IFTRUE 12076
12074: GO 12138
12076: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12077: LD_ADDR_VAR 0 12
12081: PUSH
12082: LD_VAR 0 18
12086: PPUSH
12087: LD_INT 22
12089: PUSH
12090: LD_VAR 0 16
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 2
12101: PUSH
12102: LD_INT 30
12104: PUSH
12105: LD_INT 0
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 30
12114: PUSH
12115: LD_INT 1
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: LIST
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PPUSH
12131: CALL_OW 72
12135: ST_TO_ADDR
12136: GO 12290
12138: LD_INT 3
12140: DOUBLE
12141: EQUAL
12142: IFTRUE 12146
12144: GO 12208
12146: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12147: LD_ADDR_VAR 0 12
12151: PUSH
12152: LD_VAR 0 18
12156: PPUSH
12157: LD_INT 22
12159: PUSH
12160: LD_VAR 0 16
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PUSH
12169: LD_INT 2
12171: PUSH
12172: LD_INT 30
12174: PUSH
12175: LD_INT 2
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 30
12184: PUSH
12185: LD_INT 3
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PPUSH
12201: CALL_OW 72
12205: ST_TO_ADDR
12206: GO 12290
12208: LD_INT 4
12210: DOUBLE
12211: EQUAL
12212: IFTRUE 12216
12214: GO 12289
12216: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12217: LD_ADDR_VAR 0 12
12221: PUSH
12222: LD_VAR 0 18
12226: PPUSH
12227: LD_INT 22
12229: PUSH
12230: LD_VAR 0 16
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: LD_INT 2
12241: PUSH
12242: LD_INT 30
12244: PUSH
12245: LD_INT 6
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PUSH
12252: LD_INT 30
12254: PUSH
12255: LD_INT 7
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 30
12264: PUSH
12265: LD_INT 8
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PPUSH
12282: CALL_OW 72
12286: ST_TO_ADDR
12287: GO 12290
12289: POP
// if i = 1 then
12290: LD_VAR 0 8
12294: PUSH
12295: LD_INT 1
12297: EQUAL
12298: IFFALSE 12409
// begin tmp := [ ] ;
12300: LD_ADDR_VAR 0 19
12304: PUSH
12305: EMPTY
12306: ST_TO_ADDR
// for j in f do
12307: LD_ADDR_VAR 0 9
12311: PUSH
12312: LD_VAR 0 12
12316: PUSH
12317: FOR_IN
12318: IFFALSE 12391
// if GetBType ( j ) = b_bunker then
12320: LD_VAR 0 9
12324: PPUSH
12325: CALL_OW 266
12329: PUSH
12330: LD_INT 32
12332: EQUAL
12333: IFFALSE 12360
// tmp := Insert ( tmp , 1 , j ) else
12335: LD_ADDR_VAR 0 19
12339: PUSH
12340: LD_VAR 0 19
12344: PPUSH
12345: LD_INT 1
12347: PPUSH
12348: LD_VAR 0 9
12352: PPUSH
12353: CALL_OW 2
12357: ST_TO_ADDR
12358: GO 12389
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12360: LD_ADDR_VAR 0 19
12364: PUSH
12365: LD_VAR 0 19
12369: PPUSH
12370: LD_VAR 0 19
12374: PUSH
12375: LD_INT 1
12377: PLUS
12378: PPUSH
12379: LD_VAR 0 9
12383: PPUSH
12384: CALL_OW 2
12388: ST_TO_ADDR
12389: GO 12317
12391: POP
12392: POP
// if tmp then
12393: LD_VAR 0 19
12397: IFFALSE 12409
// f := tmp ;
12399: LD_ADDR_VAR 0 12
12403: PUSH
12404: LD_VAR 0 19
12408: ST_TO_ADDR
// end ; x := personel [ i ] ;
12409: LD_ADDR_VAR 0 13
12413: PUSH
12414: LD_VAR 0 6
12418: PUSH
12419: LD_VAR 0 8
12423: ARRAY
12424: ST_TO_ADDR
// if x = - 1 then
12425: LD_VAR 0 13
12429: PUSH
12430: LD_INT 1
12432: NEG
12433: EQUAL
12434: IFFALSE 12643
// begin for j in f do
12436: LD_ADDR_VAR 0 9
12440: PUSH
12441: LD_VAR 0 12
12445: PUSH
12446: FOR_IN
12447: IFFALSE 12639
// repeat InitHc ;
12449: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12453: LD_VAR 0 9
12457: PPUSH
12458: CALL_OW 266
12462: PUSH
12463: LD_INT 5
12465: EQUAL
12466: IFFALSE 12536
// begin if UnitsInside ( j ) < 3 then
12468: LD_VAR 0 9
12472: PPUSH
12473: CALL_OW 313
12477: PUSH
12478: LD_INT 3
12480: LESS
12481: IFFALSE 12517
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12483: LD_INT 0
12485: PPUSH
12486: LD_INT 5
12488: PUSH
12489: LD_INT 8
12491: PUSH
12492: LD_INT 9
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: PUSH
12500: LD_VAR 0 17
12504: ARRAY
12505: PPUSH
12506: LD_VAR 0 4
12510: PPUSH
12511: CALL_OW 380
12515: GO 12534
// PrepareHuman ( false , i , skill ) ;
12517: LD_INT 0
12519: PPUSH
12520: LD_VAR 0 8
12524: PPUSH
12525: LD_VAR 0 4
12529: PPUSH
12530: CALL_OW 380
// end else
12534: GO 12553
// PrepareHuman ( false , i , skill ) ;
12536: LD_INT 0
12538: PPUSH
12539: LD_VAR 0 8
12543: PPUSH
12544: LD_VAR 0 4
12548: PPUSH
12549: CALL_OW 380
// un := CreateHuman ;
12553: LD_ADDR_VAR 0 14
12557: PUSH
12558: CALL_OW 44
12562: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12563: LD_ADDR_VAR 0 7
12567: PUSH
12568: LD_VAR 0 7
12572: PPUSH
12573: LD_INT 1
12575: PPUSH
12576: LD_VAR 0 14
12580: PPUSH
12581: CALL_OW 2
12585: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12586: LD_VAR 0 14
12590: PPUSH
12591: LD_VAR 0 9
12595: PPUSH
12596: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12600: LD_VAR 0 9
12604: PPUSH
12605: CALL_OW 313
12609: PUSH
12610: LD_INT 6
12612: EQUAL
12613: PUSH
12614: LD_VAR 0 9
12618: PPUSH
12619: CALL_OW 266
12623: PUSH
12624: LD_INT 32
12626: PUSH
12627: LD_INT 31
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: IN
12634: OR
12635: IFFALSE 12449
12637: GO 12446
12639: POP
12640: POP
// end else
12641: GO 13023
// for j = 1 to x do
12643: LD_ADDR_VAR 0 9
12647: PUSH
12648: DOUBLE
12649: LD_INT 1
12651: DEC
12652: ST_TO_ADDR
12653: LD_VAR 0 13
12657: PUSH
12658: FOR_TO
12659: IFFALSE 13021
// begin InitHc ;
12661: CALL_OW 19
// if not f then
12665: LD_VAR 0 12
12669: NOT
12670: IFFALSE 12759
// begin PrepareHuman ( false , i , skill ) ;
12672: LD_INT 0
12674: PPUSH
12675: LD_VAR 0 8
12679: PPUSH
12680: LD_VAR 0 4
12684: PPUSH
12685: CALL_OW 380
// un := CreateHuman ;
12689: LD_ADDR_VAR 0 14
12693: PUSH
12694: CALL_OW 44
12698: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12699: LD_ADDR_VAR 0 7
12703: PUSH
12704: LD_VAR 0 7
12708: PPUSH
12709: LD_INT 1
12711: PPUSH
12712: LD_VAR 0 14
12716: PPUSH
12717: CALL_OW 2
12721: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12722: LD_VAR 0 14
12726: PPUSH
12727: LD_VAR 0 1
12731: PPUSH
12732: CALL_OW 250
12736: PPUSH
12737: LD_VAR 0 1
12741: PPUSH
12742: CALL_OW 251
12746: PPUSH
12747: LD_INT 10
12749: PPUSH
12750: LD_INT 0
12752: PPUSH
12753: CALL_OW 50
// continue ;
12757: GO 12658
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12759: LD_VAR 0 12
12763: PUSH
12764: LD_INT 1
12766: ARRAY
12767: PPUSH
12768: CALL_OW 313
12772: PUSH
12773: LD_VAR 0 12
12777: PUSH
12778: LD_INT 1
12780: ARRAY
12781: PPUSH
12782: CALL_OW 266
12786: PUSH
12787: LD_INT 32
12789: PUSH
12790: LD_INT 31
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: IN
12797: AND
12798: PUSH
12799: LD_VAR 0 12
12803: PUSH
12804: LD_INT 1
12806: ARRAY
12807: PPUSH
12808: CALL_OW 313
12812: PUSH
12813: LD_INT 6
12815: EQUAL
12816: OR
12817: IFFALSE 12837
// f := Delete ( f , 1 ) ;
12819: LD_ADDR_VAR 0 12
12823: PUSH
12824: LD_VAR 0 12
12828: PPUSH
12829: LD_INT 1
12831: PPUSH
12832: CALL_OW 3
12836: ST_TO_ADDR
// if not f then
12837: LD_VAR 0 12
12841: NOT
12842: IFFALSE 12860
// begin x := x + 2 ;
12844: LD_ADDR_VAR 0 13
12848: PUSH
12849: LD_VAR 0 13
12853: PUSH
12854: LD_INT 2
12856: PLUS
12857: ST_TO_ADDR
// continue ;
12858: GO 12658
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12860: LD_VAR 0 12
12864: PUSH
12865: LD_INT 1
12867: ARRAY
12868: PPUSH
12869: CALL_OW 266
12873: PUSH
12874: LD_INT 5
12876: EQUAL
12877: IFFALSE 12951
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12879: LD_VAR 0 12
12883: PUSH
12884: LD_INT 1
12886: ARRAY
12887: PPUSH
12888: CALL_OW 313
12892: PUSH
12893: LD_INT 3
12895: LESS
12896: IFFALSE 12932
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12898: LD_INT 0
12900: PPUSH
12901: LD_INT 5
12903: PUSH
12904: LD_INT 8
12906: PUSH
12907: LD_INT 9
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: LIST
12914: PUSH
12915: LD_VAR 0 17
12919: ARRAY
12920: PPUSH
12921: LD_VAR 0 4
12925: PPUSH
12926: CALL_OW 380
12930: GO 12949
// PrepareHuman ( false , i , skill ) ;
12932: LD_INT 0
12934: PPUSH
12935: LD_VAR 0 8
12939: PPUSH
12940: LD_VAR 0 4
12944: PPUSH
12945: CALL_OW 380
// end else
12949: GO 12968
// PrepareHuman ( false , i , skill ) ;
12951: LD_INT 0
12953: PPUSH
12954: LD_VAR 0 8
12958: PPUSH
12959: LD_VAR 0 4
12963: PPUSH
12964: CALL_OW 380
// un := CreateHuman ;
12968: LD_ADDR_VAR 0 14
12972: PUSH
12973: CALL_OW 44
12977: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12978: LD_ADDR_VAR 0 7
12982: PUSH
12983: LD_VAR 0 7
12987: PPUSH
12988: LD_INT 1
12990: PPUSH
12991: LD_VAR 0 14
12995: PPUSH
12996: CALL_OW 2
13000: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13001: LD_VAR 0 14
13005: PPUSH
13006: LD_VAR 0 12
13010: PUSH
13011: LD_INT 1
13013: ARRAY
13014: PPUSH
13015: CALL_OW 52
// end ;
13019: GO 12658
13021: POP
13022: POP
// end ;
13023: GO 11960
13025: POP
13026: POP
// result := result ^ buildings ;
13027: LD_ADDR_VAR 0 7
13031: PUSH
13032: LD_VAR 0 7
13036: PUSH
13037: LD_VAR 0 18
13041: ADD
13042: ST_TO_ADDR
// end else
13043: GO 13186
// begin for i = 1 to personel do
13045: LD_ADDR_VAR 0 8
13049: PUSH
13050: DOUBLE
13051: LD_INT 1
13053: DEC
13054: ST_TO_ADDR
13055: LD_VAR 0 6
13059: PUSH
13060: FOR_TO
13061: IFFALSE 13184
// begin if i > 4 then
13063: LD_VAR 0 8
13067: PUSH
13068: LD_INT 4
13070: GREATER
13071: IFFALSE 13075
// break ;
13073: GO 13184
// x := personel [ i ] ;
13075: LD_ADDR_VAR 0 13
13079: PUSH
13080: LD_VAR 0 6
13084: PUSH
13085: LD_VAR 0 8
13089: ARRAY
13090: ST_TO_ADDR
// if x = - 1 then
13091: LD_VAR 0 13
13095: PUSH
13096: LD_INT 1
13098: NEG
13099: EQUAL
13100: IFFALSE 13104
// continue ;
13102: GO 13060
// PrepareHuman ( false , i , skill ) ;
13104: LD_INT 0
13106: PPUSH
13107: LD_VAR 0 8
13111: PPUSH
13112: LD_VAR 0 4
13116: PPUSH
13117: CALL_OW 380
// un := CreateHuman ;
13121: LD_ADDR_VAR 0 14
13125: PUSH
13126: CALL_OW 44
13130: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13131: LD_VAR 0 14
13135: PPUSH
13136: LD_VAR 0 1
13140: PPUSH
13141: CALL_OW 250
13145: PPUSH
13146: LD_VAR 0 1
13150: PPUSH
13151: CALL_OW 251
13155: PPUSH
13156: LD_INT 10
13158: PPUSH
13159: LD_INT 0
13161: PPUSH
13162: CALL_OW 50
// result := result ^ un ;
13166: LD_ADDR_VAR 0 7
13170: PUSH
13171: LD_VAR 0 7
13175: PUSH
13176: LD_VAR 0 14
13180: ADD
13181: ST_TO_ADDR
// end ;
13182: GO 13060
13184: POP
13185: POP
// end ; end ;
13186: LD_VAR 0 7
13190: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13191: LD_INT 0
13193: PPUSH
13194: PPUSH
13195: PPUSH
13196: PPUSH
13197: PPUSH
13198: PPUSH
13199: PPUSH
13200: PPUSH
13201: PPUSH
13202: PPUSH
13203: PPUSH
13204: PPUSH
13205: PPUSH
13206: PPUSH
13207: PPUSH
13208: PPUSH
// result := false ;
13209: LD_ADDR_VAR 0 3
13213: PUSH
13214: LD_INT 0
13216: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13217: LD_VAR 0 1
13221: NOT
13222: PUSH
13223: LD_VAR 0 1
13227: PPUSH
13228: CALL_OW 266
13232: PUSH
13233: LD_INT 32
13235: PUSH
13236: LD_INT 33
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: IN
13243: NOT
13244: OR
13245: IFFALSE 13249
// exit ;
13247: GO 14358
// nat := GetNation ( tower ) ;
13249: LD_ADDR_VAR 0 12
13253: PUSH
13254: LD_VAR 0 1
13258: PPUSH
13259: CALL_OW 248
13263: ST_TO_ADDR
// side := GetSide ( tower ) ;
13264: LD_ADDR_VAR 0 16
13268: PUSH
13269: LD_VAR 0 1
13273: PPUSH
13274: CALL_OW 255
13278: ST_TO_ADDR
// x := GetX ( tower ) ;
13279: LD_ADDR_VAR 0 10
13283: PUSH
13284: LD_VAR 0 1
13288: PPUSH
13289: CALL_OW 250
13293: ST_TO_ADDR
// y := GetY ( tower ) ;
13294: LD_ADDR_VAR 0 11
13298: PUSH
13299: LD_VAR 0 1
13303: PPUSH
13304: CALL_OW 251
13308: ST_TO_ADDR
// if not x or not y then
13309: LD_VAR 0 10
13313: NOT
13314: PUSH
13315: LD_VAR 0 11
13319: NOT
13320: OR
13321: IFFALSE 13325
// exit ;
13323: GO 14358
// weapon := 0 ;
13325: LD_ADDR_VAR 0 18
13329: PUSH
13330: LD_INT 0
13332: ST_TO_ADDR
// fac_list := [ ] ;
13333: LD_ADDR_VAR 0 17
13337: PUSH
13338: EMPTY
13339: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13340: LD_ADDR_VAR 0 6
13344: PUSH
13345: LD_VAR 0 1
13349: PPUSH
13350: CALL_OW 274
13354: PPUSH
13355: LD_VAR 0 2
13359: PPUSH
13360: LD_INT 0
13362: PPUSH
13363: CALL 10929 0 3
13367: PPUSH
13368: LD_INT 30
13370: PUSH
13371: LD_INT 3
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PPUSH
13378: CALL_OW 72
13382: ST_TO_ADDR
// if not factories then
13383: LD_VAR 0 6
13387: NOT
13388: IFFALSE 13392
// exit ;
13390: GO 14358
// for i in factories do
13392: LD_ADDR_VAR 0 8
13396: PUSH
13397: LD_VAR 0 6
13401: PUSH
13402: FOR_IN
13403: IFFALSE 13428
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13405: LD_ADDR_VAR 0 17
13409: PUSH
13410: LD_VAR 0 17
13414: PUSH
13415: LD_VAR 0 8
13419: PPUSH
13420: CALL_OW 478
13424: UNION
13425: ST_TO_ADDR
13426: GO 13402
13428: POP
13429: POP
// if not fac_list then
13430: LD_VAR 0 17
13434: NOT
13435: IFFALSE 13439
// exit ;
13437: GO 14358
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13439: LD_ADDR_VAR 0 5
13443: PUSH
13444: LD_INT 4
13446: PUSH
13447: LD_INT 5
13449: PUSH
13450: LD_INT 9
13452: PUSH
13453: LD_INT 10
13455: PUSH
13456: LD_INT 6
13458: PUSH
13459: LD_INT 7
13461: PUSH
13462: LD_INT 11
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 27
13476: PUSH
13477: LD_INT 28
13479: PUSH
13480: LD_INT 26
13482: PUSH
13483: LD_INT 30
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: PUSH
13492: LD_INT 43
13494: PUSH
13495: LD_INT 44
13497: PUSH
13498: LD_INT 46
13500: PUSH
13501: LD_INT 45
13503: PUSH
13504: LD_INT 47
13506: PUSH
13507: LD_INT 49
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: LIST
13522: PUSH
13523: LD_VAR 0 12
13527: ARRAY
13528: ST_TO_ADDR
// list := list isect fac_list ;
13529: LD_ADDR_VAR 0 5
13533: PUSH
13534: LD_VAR 0 5
13538: PUSH
13539: LD_VAR 0 17
13543: ISECT
13544: ST_TO_ADDR
// if not list then
13545: LD_VAR 0 5
13549: NOT
13550: IFFALSE 13554
// exit ;
13552: GO 14358
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13554: LD_VAR 0 12
13558: PUSH
13559: LD_INT 3
13561: EQUAL
13562: PUSH
13563: LD_INT 49
13565: PUSH
13566: LD_VAR 0 5
13570: IN
13571: AND
13572: PUSH
13573: LD_INT 31
13575: PPUSH
13576: LD_VAR 0 16
13580: PPUSH
13581: CALL_OW 321
13585: PUSH
13586: LD_INT 2
13588: EQUAL
13589: AND
13590: IFFALSE 13650
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13592: LD_INT 22
13594: PUSH
13595: LD_VAR 0 16
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 35
13606: PUSH
13607: LD_INT 49
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 91
13616: PUSH
13617: LD_VAR 0 1
13621: PUSH
13622: LD_INT 10
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: PPUSH
13635: CALL_OW 69
13639: NOT
13640: IFFALSE 13650
// weapon := ru_time_lapser ;
13642: LD_ADDR_VAR 0 18
13646: PUSH
13647: LD_INT 49
13649: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13650: LD_VAR 0 12
13654: PUSH
13655: LD_INT 1
13657: PUSH
13658: LD_INT 2
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: IN
13665: PUSH
13666: LD_INT 11
13668: PUSH
13669: LD_VAR 0 5
13673: IN
13674: PUSH
13675: LD_INT 30
13677: PUSH
13678: LD_VAR 0 5
13682: IN
13683: OR
13684: AND
13685: PUSH
13686: LD_INT 6
13688: PPUSH
13689: LD_VAR 0 16
13693: PPUSH
13694: CALL_OW 321
13698: PUSH
13699: LD_INT 2
13701: EQUAL
13702: AND
13703: IFFALSE 13868
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13705: LD_INT 22
13707: PUSH
13708: LD_VAR 0 16
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PUSH
13717: LD_INT 2
13719: PUSH
13720: LD_INT 35
13722: PUSH
13723: LD_INT 11
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 35
13732: PUSH
13733: LD_INT 30
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: LIST
13744: PUSH
13745: LD_INT 91
13747: PUSH
13748: LD_VAR 0 1
13752: PUSH
13753: LD_INT 18
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: LIST
13765: PPUSH
13766: CALL_OW 69
13770: NOT
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_VAR 0 16
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 2
13786: PUSH
13787: LD_INT 30
13789: PUSH
13790: LD_INT 32
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 30
13799: PUSH
13800: LD_INT 33
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 91
13814: PUSH
13815: LD_VAR 0 1
13819: PUSH
13820: LD_INT 12
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: LIST
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: LIST
13832: PUSH
13833: EMPTY
13834: LIST
13835: PPUSH
13836: CALL_OW 69
13840: PUSH
13841: LD_INT 2
13843: GREATER
13844: AND
13845: IFFALSE 13868
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13847: LD_ADDR_VAR 0 18
13851: PUSH
13852: LD_INT 11
13854: PUSH
13855: LD_INT 30
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: LD_VAR 0 12
13866: ARRAY
13867: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13868: LD_VAR 0 18
13872: NOT
13873: PUSH
13874: LD_INT 40
13876: PPUSH
13877: LD_VAR 0 16
13881: PPUSH
13882: CALL_OW 321
13886: PUSH
13887: LD_INT 2
13889: EQUAL
13890: AND
13891: PUSH
13892: LD_INT 7
13894: PUSH
13895: LD_VAR 0 5
13899: IN
13900: PUSH
13901: LD_INT 28
13903: PUSH
13904: LD_VAR 0 5
13908: IN
13909: OR
13910: PUSH
13911: LD_INT 45
13913: PUSH
13914: LD_VAR 0 5
13918: IN
13919: OR
13920: AND
13921: IFFALSE 14175
// begin hex := GetHexInfo ( x , y ) ;
13923: LD_ADDR_VAR 0 4
13927: PUSH
13928: LD_VAR 0 10
13932: PPUSH
13933: LD_VAR 0 11
13937: PPUSH
13938: CALL_OW 546
13942: ST_TO_ADDR
// if hex [ 1 ] then
13943: LD_VAR 0 4
13947: PUSH
13948: LD_INT 1
13950: ARRAY
13951: IFFALSE 13955
// exit ;
13953: GO 14358
// height := hex [ 2 ] ;
13955: LD_ADDR_VAR 0 15
13959: PUSH
13960: LD_VAR 0 4
13964: PUSH
13965: LD_INT 2
13967: ARRAY
13968: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13969: LD_ADDR_VAR 0 14
13973: PUSH
13974: LD_INT 0
13976: PUSH
13977: LD_INT 2
13979: PUSH
13980: LD_INT 3
13982: PUSH
13983: LD_INT 5
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: ST_TO_ADDR
// for i in tmp do
13992: LD_ADDR_VAR 0 8
13996: PUSH
13997: LD_VAR 0 14
14001: PUSH
14002: FOR_IN
14003: IFFALSE 14173
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14005: LD_ADDR_VAR 0 9
14009: PUSH
14010: LD_VAR 0 10
14014: PPUSH
14015: LD_VAR 0 8
14019: PPUSH
14020: LD_INT 5
14022: PPUSH
14023: CALL_OW 272
14027: PUSH
14028: LD_VAR 0 11
14032: PPUSH
14033: LD_VAR 0 8
14037: PPUSH
14038: LD_INT 5
14040: PPUSH
14041: CALL_OW 273
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14050: LD_VAR 0 9
14054: PUSH
14055: LD_INT 1
14057: ARRAY
14058: PPUSH
14059: LD_VAR 0 9
14063: PUSH
14064: LD_INT 2
14066: ARRAY
14067: PPUSH
14068: CALL_OW 488
14072: IFFALSE 14171
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14074: LD_ADDR_VAR 0 4
14078: PUSH
14079: LD_VAR 0 9
14083: PUSH
14084: LD_INT 1
14086: ARRAY
14087: PPUSH
14088: LD_VAR 0 9
14092: PUSH
14093: LD_INT 2
14095: ARRAY
14096: PPUSH
14097: CALL_OW 546
14101: ST_TO_ADDR
// if hex [ 1 ] then
14102: LD_VAR 0 4
14106: PUSH
14107: LD_INT 1
14109: ARRAY
14110: IFFALSE 14114
// continue ;
14112: GO 14002
// h := hex [ 2 ] ;
14114: LD_ADDR_VAR 0 13
14118: PUSH
14119: LD_VAR 0 4
14123: PUSH
14124: LD_INT 2
14126: ARRAY
14127: ST_TO_ADDR
// if h + 7 < height then
14128: LD_VAR 0 13
14132: PUSH
14133: LD_INT 7
14135: PLUS
14136: PUSH
14137: LD_VAR 0 15
14141: LESS
14142: IFFALSE 14171
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14144: LD_ADDR_VAR 0 18
14148: PUSH
14149: LD_INT 7
14151: PUSH
14152: LD_INT 28
14154: PUSH
14155: LD_INT 45
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: LIST
14162: PUSH
14163: LD_VAR 0 12
14167: ARRAY
14168: ST_TO_ADDR
// break ;
14169: GO 14173
// end ; end ; end ;
14171: GO 14002
14173: POP
14174: POP
// end ; if not weapon then
14175: LD_VAR 0 18
14179: NOT
14180: IFFALSE 14240
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14182: LD_ADDR_VAR 0 5
14186: PUSH
14187: LD_VAR 0 5
14191: PUSH
14192: LD_INT 11
14194: PUSH
14195: LD_INT 30
14197: PUSH
14198: LD_INT 49
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: LIST
14205: DIFF
14206: ST_TO_ADDR
// if not list then
14207: LD_VAR 0 5
14211: NOT
14212: IFFALSE 14216
// exit ;
14214: GO 14358
// weapon := list [ rand ( 1 , list ) ] ;
14216: LD_ADDR_VAR 0 18
14220: PUSH
14221: LD_VAR 0 5
14225: PUSH
14226: LD_INT 1
14228: PPUSH
14229: LD_VAR 0 5
14233: PPUSH
14234: CALL_OW 12
14238: ARRAY
14239: ST_TO_ADDR
// end ; if weapon then
14240: LD_VAR 0 18
14244: IFFALSE 14358
// begin tmp := CostOfWeapon ( weapon ) ;
14246: LD_ADDR_VAR 0 14
14250: PUSH
14251: LD_VAR 0 18
14255: PPUSH
14256: CALL_OW 451
14260: ST_TO_ADDR
// j := GetBase ( tower ) ;
14261: LD_ADDR_VAR 0 9
14265: PUSH
14266: LD_VAR 0 1
14270: PPUSH
14271: CALL_OW 274
14275: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14276: LD_VAR 0 9
14280: PPUSH
14281: LD_INT 1
14283: PPUSH
14284: CALL_OW 275
14288: PUSH
14289: LD_VAR 0 14
14293: PUSH
14294: LD_INT 1
14296: ARRAY
14297: GREATEREQUAL
14298: PUSH
14299: LD_VAR 0 9
14303: PPUSH
14304: LD_INT 2
14306: PPUSH
14307: CALL_OW 275
14311: PUSH
14312: LD_VAR 0 14
14316: PUSH
14317: LD_INT 2
14319: ARRAY
14320: GREATEREQUAL
14321: AND
14322: PUSH
14323: LD_VAR 0 9
14327: PPUSH
14328: LD_INT 3
14330: PPUSH
14331: CALL_OW 275
14335: PUSH
14336: LD_VAR 0 14
14340: PUSH
14341: LD_INT 3
14343: ARRAY
14344: GREATEREQUAL
14345: AND
14346: IFFALSE 14358
// result := weapon ;
14348: LD_ADDR_VAR 0 3
14352: PUSH
14353: LD_VAR 0 18
14357: ST_TO_ADDR
// end ; end ;
14358: LD_VAR 0 3
14362: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14363: LD_INT 0
14365: PPUSH
14366: PPUSH
// result := true ;
14367: LD_ADDR_VAR 0 3
14371: PUSH
14372: LD_INT 1
14374: ST_TO_ADDR
// if array1 = array2 then
14375: LD_VAR 0 1
14379: PUSH
14380: LD_VAR 0 2
14384: EQUAL
14385: IFFALSE 14445
// begin for i = 1 to array1 do
14387: LD_ADDR_VAR 0 4
14391: PUSH
14392: DOUBLE
14393: LD_INT 1
14395: DEC
14396: ST_TO_ADDR
14397: LD_VAR 0 1
14401: PUSH
14402: FOR_TO
14403: IFFALSE 14441
// if array1 [ i ] <> array2 [ i ] then
14405: LD_VAR 0 1
14409: PUSH
14410: LD_VAR 0 4
14414: ARRAY
14415: PUSH
14416: LD_VAR 0 2
14420: PUSH
14421: LD_VAR 0 4
14425: ARRAY
14426: NONEQUAL
14427: IFFALSE 14439
// begin result := false ;
14429: LD_ADDR_VAR 0 3
14433: PUSH
14434: LD_INT 0
14436: ST_TO_ADDR
// break ;
14437: GO 14441
// end ;
14439: GO 14402
14441: POP
14442: POP
// end else
14443: GO 14453
// result := false ;
14445: LD_ADDR_VAR 0 3
14449: PUSH
14450: LD_INT 0
14452: ST_TO_ADDR
// end ;
14453: LD_VAR 0 3
14457: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14458: LD_INT 0
14460: PPUSH
14461: PPUSH
// if not array1 or not array2 then
14462: LD_VAR 0 1
14466: NOT
14467: PUSH
14468: LD_VAR 0 2
14472: NOT
14473: OR
14474: IFFALSE 14478
// exit ;
14476: GO 14542
// result := true ;
14478: LD_ADDR_VAR 0 3
14482: PUSH
14483: LD_INT 1
14485: ST_TO_ADDR
// for i = 1 to array1 do
14486: LD_ADDR_VAR 0 4
14490: PUSH
14491: DOUBLE
14492: LD_INT 1
14494: DEC
14495: ST_TO_ADDR
14496: LD_VAR 0 1
14500: PUSH
14501: FOR_TO
14502: IFFALSE 14540
// if array1 [ i ] <> array2 [ i ] then
14504: LD_VAR 0 1
14508: PUSH
14509: LD_VAR 0 4
14513: ARRAY
14514: PUSH
14515: LD_VAR 0 2
14519: PUSH
14520: LD_VAR 0 4
14524: ARRAY
14525: NONEQUAL
14526: IFFALSE 14538
// begin result := false ;
14528: LD_ADDR_VAR 0 3
14532: PUSH
14533: LD_INT 0
14535: ST_TO_ADDR
// break ;
14536: GO 14540
// end ;
14538: GO 14501
14540: POP
14541: POP
// end ;
14542: LD_VAR 0 3
14546: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14547: LD_INT 0
14549: PPUSH
14550: PPUSH
14551: PPUSH
// pom := GetBase ( fac ) ;
14552: LD_ADDR_VAR 0 5
14556: PUSH
14557: LD_VAR 0 1
14561: PPUSH
14562: CALL_OW 274
14566: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14567: LD_ADDR_VAR 0 4
14571: PUSH
14572: LD_VAR 0 2
14576: PUSH
14577: LD_INT 1
14579: ARRAY
14580: PPUSH
14581: LD_VAR 0 2
14585: PUSH
14586: LD_INT 2
14588: ARRAY
14589: PPUSH
14590: LD_VAR 0 2
14594: PUSH
14595: LD_INT 3
14597: ARRAY
14598: PPUSH
14599: LD_VAR 0 2
14603: PUSH
14604: LD_INT 4
14606: ARRAY
14607: PPUSH
14608: CALL_OW 449
14612: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14613: LD_ADDR_VAR 0 3
14617: PUSH
14618: LD_VAR 0 5
14622: PPUSH
14623: LD_INT 1
14625: PPUSH
14626: CALL_OW 275
14630: PUSH
14631: LD_VAR 0 4
14635: PUSH
14636: LD_INT 1
14638: ARRAY
14639: GREATEREQUAL
14640: PUSH
14641: LD_VAR 0 5
14645: PPUSH
14646: LD_INT 2
14648: PPUSH
14649: CALL_OW 275
14653: PUSH
14654: LD_VAR 0 4
14658: PUSH
14659: LD_INT 2
14661: ARRAY
14662: GREATEREQUAL
14663: AND
14664: PUSH
14665: LD_VAR 0 5
14669: PPUSH
14670: LD_INT 3
14672: PPUSH
14673: CALL_OW 275
14677: PUSH
14678: LD_VAR 0 4
14682: PUSH
14683: LD_INT 3
14685: ARRAY
14686: GREATEREQUAL
14687: AND
14688: ST_TO_ADDR
// end ;
14689: LD_VAR 0 3
14693: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14694: LD_INT 0
14696: PPUSH
14697: PPUSH
14698: PPUSH
14699: PPUSH
// pom := GetBase ( building ) ;
14700: LD_ADDR_VAR 0 3
14704: PUSH
14705: LD_VAR 0 1
14709: PPUSH
14710: CALL_OW 274
14714: ST_TO_ADDR
// if not pom then
14715: LD_VAR 0 3
14719: NOT
14720: IFFALSE 14724
// exit ;
14722: GO 14894
// btype := GetBType ( building ) ;
14724: LD_ADDR_VAR 0 5
14728: PUSH
14729: LD_VAR 0 1
14733: PPUSH
14734: CALL_OW 266
14738: ST_TO_ADDR
// if btype = b_armoury then
14739: LD_VAR 0 5
14743: PUSH
14744: LD_INT 4
14746: EQUAL
14747: IFFALSE 14757
// btype := b_barracks ;
14749: LD_ADDR_VAR 0 5
14753: PUSH
14754: LD_INT 5
14756: ST_TO_ADDR
// if btype = b_depot then
14757: LD_VAR 0 5
14761: PUSH
14762: LD_INT 0
14764: EQUAL
14765: IFFALSE 14775
// btype := b_warehouse ;
14767: LD_ADDR_VAR 0 5
14771: PUSH
14772: LD_INT 1
14774: ST_TO_ADDR
// if btype = b_workshop then
14775: LD_VAR 0 5
14779: PUSH
14780: LD_INT 2
14782: EQUAL
14783: IFFALSE 14793
// btype := b_factory ;
14785: LD_ADDR_VAR 0 5
14789: PUSH
14790: LD_INT 3
14792: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14793: LD_ADDR_VAR 0 4
14797: PUSH
14798: LD_VAR 0 5
14802: PPUSH
14803: LD_VAR 0 1
14807: PPUSH
14808: CALL_OW 248
14812: PPUSH
14813: CALL_OW 450
14817: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14818: LD_ADDR_VAR 0 2
14822: PUSH
14823: LD_VAR 0 3
14827: PPUSH
14828: LD_INT 1
14830: PPUSH
14831: CALL_OW 275
14835: PUSH
14836: LD_VAR 0 4
14840: PUSH
14841: LD_INT 1
14843: ARRAY
14844: GREATEREQUAL
14845: PUSH
14846: LD_VAR 0 3
14850: PPUSH
14851: LD_INT 2
14853: PPUSH
14854: CALL_OW 275
14858: PUSH
14859: LD_VAR 0 4
14863: PUSH
14864: LD_INT 2
14866: ARRAY
14867: GREATEREQUAL
14868: AND
14869: PUSH
14870: LD_VAR 0 3
14874: PPUSH
14875: LD_INT 3
14877: PPUSH
14878: CALL_OW 275
14882: PUSH
14883: LD_VAR 0 4
14887: PUSH
14888: LD_INT 3
14890: ARRAY
14891: GREATEREQUAL
14892: AND
14893: ST_TO_ADDR
// end ;
14894: LD_VAR 0 2
14898: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14899: LD_INT 0
14901: PPUSH
14902: PPUSH
14903: PPUSH
// pom := GetBase ( building ) ;
14904: LD_ADDR_VAR 0 4
14908: PUSH
14909: LD_VAR 0 1
14913: PPUSH
14914: CALL_OW 274
14918: ST_TO_ADDR
// if not pom then
14919: LD_VAR 0 4
14923: NOT
14924: IFFALSE 14928
// exit ;
14926: GO 15029
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14928: LD_ADDR_VAR 0 5
14932: PUSH
14933: LD_VAR 0 2
14937: PPUSH
14938: LD_VAR 0 1
14942: PPUSH
14943: CALL_OW 248
14947: PPUSH
14948: CALL_OW 450
14952: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14953: LD_ADDR_VAR 0 3
14957: PUSH
14958: LD_VAR 0 4
14962: PPUSH
14963: LD_INT 1
14965: PPUSH
14966: CALL_OW 275
14970: PUSH
14971: LD_VAR 0 5
14975: PUSH
14976: LD_INT 1
14978: ARRAY
14979: GREATEREQUAL
14980: PUSH
14981: LD_VAR 0 4
14985: PPUSH
14986: LD_INT 2
14988: PPUSH
14989: CALL_OW 275
14993: PUSH
14994: LD_VAR 0 5
14998: PUSH
14999: LD_INT 2
15001: ARRAY
15002: GREATEREQUAL
15003: AND
15004: PUSH
15005: LD_VAR 0 4
15009: PPUSH
15010: LD_INT 3
15012: PPUSH
15013: CALL_OW 275
15017: PUSH
15018: LD_VAR 0 5
15022: PUSH
15023: LD_INT 3
15025: ARRAY
15026: GREATEREQUAL
15027: AND
15028: ST_TO_ADDR
// end ;
15029: LD_VAR 0 3
15033: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15034: LD_INT 0
15036: PPUSH
15037: PPUSH
15038: PPUSH
15039: PPUSH
15040: PPUSH
15041: PPUSH
15042: PPUSH
15043: PPUSH
15044: PPUSH
15045: PPUSH
15046: PPUSH
// result := false ;
15047: LD_ADDR_VAR 0 8
15051: PUSH
15052: LD_INT 0
15054: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15055: LD_VAR 0 5
15059: NOT
15060: PUSH
15061: LD_VAR 0 1
15065: NOT
15066: OR
15067: PUSH
15068: LD_VAR 0 2
15072: NOT
15073: OR
15074: PUSH
15075: LD_VAR 0 3
15079: NOT
15080: OR
15081: IFFALSE 15085
// exit ;
15083: GO 15899
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15085: LD_ADDR_VAR 0 14
15089: PUSH
15090: LD_VAR 0 1
15094: PPUSH
15095: LD_VAR 0 2
15099: PPUSH
15100: LD_VAR 0 3
15104: PPUSH
15105: LD_VAR 0 4
15109: PPUSH
15110: LD_VAR 0 5
15114: PUSH
15115: LD_INT 1
15117: ARRAY
15118: PPUSH
15119: CALL_OW 248
15123: PPUSH
15124: LD_INT 0
15126: PPUSH
15127: CALL 17152 0 6
15131: ST_TO_ADDR
// if not hexes then
15132: LD_VAR 0 14
15136: NOT
15137: IFFALSE 15141
// exit ;
15139: GO 15899
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15141: LD_ADDR_VAR 0 17
15145: PUSH
15146: LD_VAR 0 5
15150: PPUSH
15151: LD_INT 22
15153: PUSH
15154: LD_VAR 0 13
15158: PPUSH
15159: CALL_OW 255
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: PUSH
15168: LD_INT 2
15170: PUSH
15171: LD_INT 30
15173: PUSH
15174: LD_INT 0
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 30
15183: PUSH
15184: LD_INT 1
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: LIST
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PPUSH
15200: CALL_OW 72
15204: ST_TO_ADDR
// for i = 1 to hexes do
15205: LD_ADDR_VAR 0 9
15209: PUSH
15210: DOUBLE
15211: LD_INT 1
15213: DEC
15214: ST_TO_ADDR
15215: LD_VAR 0 14
15219: PUSH
15220: FOR_TO
15221: IFFALSE 15897
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15223: LD_ADDR_VAR 0 13
15227: PUSH
15228: LD_VAR 0 14
15232: PUSH
15233: LD_VAR 0 9
15237: ARRAY
15238: PUSH
15239: LD_INT 1
15241: ARRAY
15242: PPUSH
15243: LD_VAR 0 14
15247: PUSH
15248: LD_VAR 0 9
15252: ARRAY
15253: PUSH
15254: LD_INT 2
15256: ARRAY
15257: PPUSH
15258: CALL_OW 428
15262: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15263: LD_VAR 0 14
15267: PUSH
15268: LD_VAR 0 9
15272: ARRAY
15273: PUSH
15274: LD_INT 1
15276: ARRAY
15277: PPUSH
15278: LD_VAR 0 14
15282: PUSH
15283: LD_VAR 0 9
15287: ARRAY
15288: PUSH
15289: LD_INT 2
15291: ARRAY
15292: PPUSH
15293: CALL_OW 351
15297: PUSH
15298: LD_VAR 0 14
15302: PUSH
15303: LD_VAR 0 9
15307: ARRAY
15308: PUSH
15309: LD_INT 1
15311: ARRAY
15312: PPUSH
15313: LD_VAR 0 14
15317: PUSH
15318: LD_VAR 0 9
15322: ARRAY
15323: PUSH
15324: LD_INT 2
15326: ARRAY
15327: PPUSH
15328: CALL_OW 488
15332: NOT
15333: OR
15334: PUSH
15335: LD_VAR 0 13
15339: PPUSH
15340: CALL_OW 247
15344: PUSH
15345: LD_INT 3
15347: EQUAL
15348: OR
15349: IFFALSE 15355
// exit ;
15351: POP
15352: POP
15353: GO 15899
// if not tmp then
15355: LD_VAR 0 13
15359: NOT
15360: IFFALSE 15364
// continue ;
15362: GO 15220
// result := true ;
15364: LD_ADDR_VAR 0 8
15368: PUSH
15369: LD_INT 1
15371: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15372: LD_VAR 0 6
15376: PUSH
15377: LD_VAR 0 13
15381: PPUSH
15382: CALL_OW 247
15386: PUSH
15387: LD_INT 2
15389: EQUAL
15390: AND
15391: PUSH
15392: LD_VAR 0 13
15396: PPUSH
15397: CALL_OW 263
15401: PUSH
15402: LD_INT 1
15404: EQUAL
15405: AND
15406: IFFALSE 15570
// begin if IsDrivenBy ( tmp ) then
15408: LD_VAR 0 13
15412: PPUSH
15413: CALL_OW 311
15417: IFFALSE 15421
// continue ;
15419: GO 15220
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15421: LD_VAR 0 6
15425: PPUSH
15426: LD_INT 3
15428: PUSH
15429: LD_INT 60
15431: PUSH
15432: EMPTY
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 3
15441: PUSH
15442: LD_INT 55
15444: PUSH
15445: EMPTY
15446: LIST
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PPUSH
15456: CALL_OW 72
15460: IFFALSE 15568
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15462: LD_ADDR_VAR 0 18
15466: PUSH
15467: LD_VAR 0 6
15471: PPUSH
15472: LD_INT 3
15474: PUSH
15475: LD_INT 60
15477: PUSH
15478: EMPTY
15479: LIST
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 3
15487: PUSH
15488: LD_INT 55
15490: PUSH
15491: EMPTY
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PPUSH
15502: CALL_OW 72
15506: PUSH
15507: LD_INT 1
15509: ARRAY
15510: ST_TO_ADDR
// if IsInUnit ( driver ) then
15511: LD_VAR 0 18
15515: PPUSH
15516: CALL_OW 310
15520: IFFALSE 15531
// ComExit ( driver ) ;
15522: LD_VAR 0 18
15526: PPUSH
15527: CALL 40953 0 1
// AddComEnterUnit ( driver , tmp ) ;
15531: LD_VAR 0 18
15535: PPUSH
15536: LD_VAR 0 13
15540: PPUSH
15541: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15545: LD_VAR 0 18
15549: PPUSH
15550: LD_VAR 0 7
15554: PPUSH
15555: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15559: LD_VAR 0 18
15563: PPUSH
15564: CALL_OW 181
// end ; continue ;
15568: GO 15220
// end ; if not cleaners or not tmp in cleaners then
15570: LD_VAR 0 6
15574: NOT
15575: PUSH
15576: LD_VAR 0 13
15580: PUSH
15581: LD_VAR 0 6
15585: IN
15586: NOT
15587: OR
15588: IFFALSE 15895
// begin if dep then
15590: LD_VAR 0 17
15594: IFFALSE 15730
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15596: LD_ADDR_VAR 0 16
15600: PUSH
15601: LD_VAR 0 17
15605: PUSH
15606: LD_INT 1
15608: ARRAY
15609: PPUSH
15610: CALL_OW 250
15614: PPUSH
15615: LD_VAR 0 17
15619: PUSH
15620: LD_INT 1
15622: ARRAY
15623: PPUSH
15624: CALL_OW 254
15628: PPUSH
15629: LD_INT 5
15631: PPUSH
15632: CALL_OW 272
15636: PUSH
15637: LD_VAR 0 17
15641: PUSH
15642: LD_INT 1
15644: ARRAY
15645: PPUSH
15646: CALL_OW 251
15650: PPUSH
15651: LD_VAR 0 17
15655: PUSH
15656: LD_INT 1
15658: ARRAY
15659: PPUSH
15660: CALL_OW 254
15664: PPUSH
15665: LD_INT 5
15667: PPUSH
15668: CALL_OW 273
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15677: LD_VAR 0 16
15681: PUSH
15682: LD_INT 1
15684: ARRAY
15685: PPUSH
15686: LD_VAR 0 16
15690: PUSH
15691: LD_INT 2
15693: ARRAY
15694: PPUSH
15695: CALL_OW 488
15699: IFFALSE 15730
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15701: LD_VAR 0 13
15705: PPUSH
15706: LD_VAR 0 16
15710: PUSH
15711: LD_INT 1
15713: ARRAY
15714: PPUSH
15715: LD_VAR 0 16
15719: PUSH
15720: LD_INT 2
15722: ARRAY
15723: PPUSH
15724: CALL_OW 111
// continue ;
15728: GO 15220
// end ; end ; r := GetDir ( tmp ) ;
15730: LD_ADDR_VAR 0 15
15734: PUSH
15735: LD_VAR 0 13
15739: PPUSH
15740: CALL_OW 254
15744: ST_TO_ADDR
// if r = 5 then
15745: LD_VAR 0 15
15749: PUSH
15750: LD_INT 5
15752: EQUAL
15753: IFFALSE 15763
// r := 0 ;
15755: LD_ADDR_VAR 0 15
15759: PUSH
15760: LD_INT 0
15762: ST_TO_ADDR
// for j = r to 5 do
15763: LD_ADDR_VAR 0 10
15767: PUSH
15768: DOUBLE
15769: LD_VAR 0 15
15773: DEC
15774: ST_TO_ADDR
15775: LD_INT 5
15777: PUSH
15778: FOR_TO
15779: IFFALSE 15893
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15781: LD_ADDR_VAR 0 11
15785: PUSH
15786: LD_VAR 0 13
15790: PPUSH
15791: CALL_OW 250
15795: PPUSH
15796: LD_VAR 0 10
15800: PPUSH
15801: LD_INT 2
15803: PPUSH
15804: CALL_OW 272
15808: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15809: LD_ADDR_VAR 0 12
15813: PUSH
15814: LD_VAR 0 13
15818: PPUSH
15819: CALL_OW 251
15823: PPUSH
15824: LD_VAR 0 10
15828: PPUSH
15829: LD_INT 2
15831: PPUSH
15832: CALL_OW 273
15836: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15837: LD_VAR 0 11
15841: PPUSH
15842: LD_VAR 0 12
15846: PPUSH
15847: CALL_OW 488
15851: PUSH
15852: LD_VAR 0 11
15856: PPUSH
15857: LD_VAR 0 12
15861: PPUSH
15862: CALL_OW 428
15866: NOT
15867: AND
15868: IFFALSE 15891
// begin ComMoveXY ( tmp , _x , _y ) ;
15870: LD_VAR 0 13
15874: PPUSH
15875: LD_VAR 0 11
15879: PPUSH
15880: LD_VAR 0 12
15884: PPUSH
15885: CALL_OW 111
// break ;
15889: GO 15893
// end ; end ;
15891: GO 15778
15893: POP
15894: POP
// end ; end ;
15895: GO 15220
15897: POP
15898: POP
// end ;
15899: LD_VAR 0 8
15903: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15904: LD_INT 0
15906: PPUSH
// result := true ;
15907: LD_ADDR_VAR 0 3
15911: PUSH
15912: LD_INT 1
15914: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15915: LD_VAR 0 2
15919: PUSH
15920: LD_INT 24
15922: DOUBLE
15923: EQUAL
15924: IFTRUE 15934
15926: LD_INT 33
15928: DOUBLE
15929: EQUAL
15930: IFTRUE 15934
15932: GO 15959
15934: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15935: LD_ADDR_VAR 0 3
15939: PUSH
15940: LD_INT 32
15942: PPUSH
15943: LD_VAR 0 1
15947: PPUSH
15948: CALL_OW 321
15952: PUSH
15953: LD_INT 2
15955: EQUAL
15956: ST_TO_ADDR
15957: GO 16275
15959: LD_INT 20
15961: DOUBLE
15962: EQUAL
15963: IFTRUE 15967
15965: GO 15992
15967: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15968: LD_ADDR_VAR 0 3
15972: PUSH
15973: LD_INT 6
15975: PPUSH
15976: LD_VAR 0 1
15980: PPUSH
15981: CALL_OW 321
15985: PUSH
15986: LD_INT 2
15988: EQUAL
15989: ST_TO_ADDR
15990: GO 16275
15992: LD_INT 22
15994: DOUBLE
15995: EQUAL
15996: IFTRUE 16006
15998: LD_INT 36
16000: DOUBLE
16001: EQUAL
16002: IFTRUE 16006
16004: GO 16031
16006: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16007: LD_ADDR_VAR 0 3
16011: PUSH
16012: LD_INT 15
16014: PPUSH
16015: LD_VAR 0 1
16019: PPUSH
16020: CALL_OW 321
16024: PUSH
16025: LD_INT 2
16027: EQUAL
16028: ST_TO_ADDR
16029: GO 16275
16031: LD_INT 30
16033: DOUBLE
16034: EQUAL
16035: IFTRUE 16039
16037: GO 16064
16039: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16040: LD_ADDR_VAR 0 3
16044: PUSH
16045: LD_INT 20
16047: PPUSH
16048: LD_VAR 0 1
16052: PPUSH
16053: CALL_OW 321
16057: PUSH
16058: LD_INT 2
16060: EQUAL
16061: ST_TO_ADDR
16062: GO 16275
16064: LD_INT 28
16066: DOUBLE
16067: EQUAL
16068: IFTRUE 16078
16070: LD_INT 21
16072: DOUBLE
16073: EQUAL
16074: IFTRUE 16078
16076: GO 16103
16078: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16079: LD_ADDR_VAR 0 3
16083: PUSH
16084: LD_INT 21
16086: PPUSH
16087: LD_VAR 0 1
16091: PPUSH
16092: CALL_OW 321
16096: PUSH
16097: LD_INT 2
16099: EQUAL
16100: ST_TO_ADDR
16101: GO 16275
16103: LD_INT 16
16105: DOUBLE
16106: EQUAL
16107: IFTRUE 16111
16109: GO 16136
16111: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16112: LD_ADDR_VAR 0 3
16116: PUSH
16117: LD_INT 84
16119: PPUSH
16120: LD_VAR 0 1
16124: PPUSH
16125: CALL_OW 321
16129: PUSH
16130: LD_INT 2
16132: EQUAL
16133: ST_TO_ADDR
16134: GO 16275
16136: LD_INT 19
16138: DOUBLE
16139: EQUAL
16140: IFTRUE 16150
16142: LD_INT 23
16144: DOUBLE
16145: EQUAL
16146: IFTRUE 16150
16148: GO 16175
16150: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16151: LD_ADDR_VAR 0 3
16155: PUSH
16156: LD_INT 83
16158: PPUSH
16159: LD_VAR 0 1
16163: PPUSH
16164: CALL_OW 321
16168: PUSH
16169: LD_INT 2
16171: EQUAL
16172: ST_TO_ADDR
16173: GO 16275
16175: LD_INT 17
16177: DOUBLE
16178: EQUAL
16179: IFTRUE 16183
16181: GO 16208
16183: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16184: LD_ADDR_VAR 0 3
16188: PUSH
16189: LD_INT 39
16191: PPUSH
16192: LD_VAR 0 1
16196: PPUSH
16197: CALL_OW 321
16201: PUSH
16202: LD_INT 2
16204: EQUAL
16205: ST_TO_ADDR
16206: GO 16275
16208: LD_INT 18
16210: DOUBLE
16211: EQUAL
16212: IFTRUE 16216
16214: GO 16241
16216: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16217: LD_ADDR_VAR 0 3
16221: PUSH
16222: LD_INT 40
16224: PPUSH
16225: LD_VAR 0 1
16229: PPUSH
16230: CALL_OW 321
16234: PUSH
16235: LD_INT 2
16237: EQUAL
16238: ST_TO_ADDR
16239: GO 16275
16241: LD_INT 27
16243: DOUBLE
16244: EQUAL
16245: IFTRUE 16249
16247: GO 16274
16249: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16250: LD_ADDR_VAR 0 3
16254: PUSH
16255: LD_INT 35
16257: PPUSH
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 321
16267: PUSH
16268: LD_INT 2
16270: EQUAL
16271: ST_TO_ADDR
16272: GO 16275
16274: POP
// end ;
16275: LD_VAR 0 3
16279: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16280: LD_INT 0
16282: PPUSH
16283: PPUSH
16284: PPUSH
16285: PPUSH
16286: PPUSH
16287: PPUSH
16288: PPUSH
16289: PPUSH
16290: PPUSH
16291: PPUSH
16292: PPUSH
// result := false ;
16293: LD_ADDR_VAR 0 6
16297: PUSH
16298: LD_INT 0
16300: ST_TO_ADDR
// if btype = b_depot then
16301: LD_VAR 0 2
16305: PUSH
16306: LD_INT 0
16308: EQUAL
16309: IFFALSE 16321
// begin result := true ;
16311: LD_ADDR_VAR 0 6
16315: PUSH
16316: LD_INT 1
16318: ST_TO_ADDR
// exit ;
16319: GO 17147
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16321: LD_VAR 0 1
16325: NOT
16326: PUSH
16327: LD_VAR 0 1
16331: PPUSH
16332: CALL_OW 266
16336: PUSH
16337: LD_INT 0
16339: PUSH
16340: LD_INT 1
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: IN
16347: NOT
16348: OR
16349: PUSH
16350: LD_VAR 0 2
16354: NOT
16355: OR
16356: PUSH
16357: LD_VAR 0 5
16361: PUSH
16362: LD_INT 0
16364: PUSH
16365: LD_INT 1
16367: PUSH
16368: LD_INT 2
16370: PUSH
16371: LD_INT 3
16373: PUSH
16374: LD_INT 4
16376: PUSH
16377: LD_INT 5
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: IN
16388: NOT
16389: OR
16390: PUSH
16391: LD_VAR 0 3
16395: PPUSH
16396: LD_VAR 0 4
16400: PPUSH
16401: CALL_OW 488
16405: NOT
16406: OR
16407: IFFALSE 16411
// exit ;
16409: GO 17147
// side := GetSide ( depot ) ;
16411: LD_ADDR_VAR 0 9
16415: PUSH
16416: LD_VAR 0 1
16420: PPUSH
16421: CALL_OW 255
16425: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16426: LD_VAR 0 9
16430: PPUSH
16431: LD_VAR 0 2
16435: PPUSH
16436: CALL 15904 0 2
16440: NOT
16441: IFFALSE 16445
// exit ;
16443: GO 17147
// pom := GetBase ( depot ) ;
16445: LD_ADDR_VAR 0 10
16449: PUSH
16450: LD_VAR 0 1
16454: PPUSH
16455: CALL_OW 274
16459: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16460: LD_ADDR_VAR 0 11
16464: PUSH
16465: LD_VAR 0 2
16469: PPUSH
16470: LD_VAR 0 1
16474: PPUSH
16475: CALL_OW 248
16479: PPUSH
16480: CALL_OW 450
16484: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16485: LD_VAR 0 10
16489: PPUSH
16490: LD_INT 1
16492: PPUSH
16493: CALL_OW 275
16497: PUSH
16498: LD_VAR 0 11
16502: PUSH
16503: LD_INT 1
16505: ARRAY
16506: GREATEREQUAL
16507: PUSH
16508: LD_VAR 0 10
16512: PPUSH
16513: LD_INT 2
16515: PPUSH
16516: CALL_OW 275
16520: PUSH
16521: LD_VAR 0 11
16525: PUSH
16526: LD_INT 2
16528: ARRAY
16529: GREATEREQUAL
16530: AND
16531: PUSH
16532: LD_VAR 0 10
16536: PPUSH
16537: LD_INT 3
16539: PPUSH
16540: CALL_OW 275
16544: PUSH
16545: LD_VAR 0 11
16549: PUSH
16550: LD_INT 3
16552: ARRAY
16553: GREATEREQUAL
16554: AND
16555: NOT
16556: IFFALSE 16560
// exit ;
16558: GO 17147
// if GetBType ( depot ) = b_depot then
16560: LD_VAR 0 1
16564: PPUSH
16565: CALL_OW 266
16569: PUSH
16570: LD_INT 0
16572: EQUAL
16573: IFFALSE 16585
// dist := 28 else
16575: LD_ADDR_VAR 0 14
16579: PUSH
16580: LD_INT 28
16582: ST_TO_ADDR
16583: GO 16593
// dist := 36 ;
16585: LD_ADDR_VAR 0 14
16589: PUSH
16590: LD_INT 36
16592: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16593: LD_VAR 0 1
16597: PPUSH
16598: LD_VAR 0 3
16602: PPUSH
16603: LD_VAR 0 4
16607: PPUSH
16608: CALL_OW 297
16612: PUSH
16613: LD_VAR 0 14
16617: GREATER
16618: IFFALSE 16622
// exit ;
16620: GO 17147
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16622: LD_ADDR_VAR 0 12
16626: PUSH
16627: LD_VAR 0 2
16631: PPUSH
16632: LD_VAR 0 3
16636: PPUSH
16637: LD_VAR 0 4
16641: PPUSH
16642: LD_VAR 0 5
16646: PPUSH
16647: LD_VAR 0 1
16651: PPUSH
16652: CALL_OW 248
16656: PPUSH
16657: LD_INT 0
16659: PPUSH
16660: CALL 17152 0 6
16664: ST_TO_ADDR
// if not hexes then
16665: LD_VAR 0 12
16669: NOT
16670: IFFALSE 16674
// exit ;
16672: GO 17147
// hex := GetHexInfo ( x , y ) ;
16674: LD_ADDR_VAR 0 15
16678: PUSH
16679: LD_VAR 0 3
16683: PPUSH
16684: LD_VAR 0 4
16688: PPUSH
16689: CALL_OW 546
16693: ST_TO_ADDR
// if hex [ 1 ] then
16694: LD_VAR 0 15
16698: PUSH
16699: LD_INT 1
16701: ARRAY
16702: IFFALSE 16706
// exit ;
16704: GO 17147
// height := hex [ 2 ] ;
16706: LD_ADDR_VAR 0 13
16710: PUSH
16711: LD_VAR 0 15
16715: PUSH
16716: LD_INT 2
16718: ARRAY
16719: ST_TO_ADDR
// for i = 1 to hexes do
16720: LD_ADDR_VAR 0 7
16724: PUSH
16725: DOUBLE
16726: LD_INT 1
16728: DEC
16729: ST_TO_ADDR
16730: LD_VAR 0 12
16734: PUSH
16735: FOR_TO
16736: IFFALSE 17066
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16738: LD_VAR 0 12
16742: PUSH
16743: LD_VAR 0 7
16747: ARRAY
16748: PUSH
16749: LD_INT 1
16751: ARRAY
16752: PPUSH
16753: LD_VAR 0 12
16757: PUSH
16758: LD_VAR 0 7
16762: ARRAY
16763: PUSH
16764: LD_INT 2
16766: ARRAY
16767: PPUSH
16768: CALL_OW 488
16772: NOT
16773: PUSH
16774: LD_VAR 0 12
16778: PUSH
16779: LD_VAR 0 7
16783: ARRAY
16784: PUSH
16785: LD_INT 1
16787: ARRAY
16788: PPUSH
16789: LD_VAR 0 12
16793: PUSH
16794: LD_VAR 0 7
16798: ARRAY
16799: PUSH
16800: LD_INT 2
16802: ARRAY
16803: PPUSH
16804: CALL_OW 428
16808: PUSH
16809: LD_INT 0
16811: GREATER
16812: OR
16813: PUSH
16814: LD_VAR 0 12
16818: PUSH
16819: LD_VAR 0 7
16823: ARRAY
16824: PUSH
16825: LD_INT 1
16827: ARRAY
16828: PPUSH
16829: LD_VAR 0 12
16833: PUSH
16834: LD_VAR 0 7
16838: ARRAY
16839: PUSH
16840: LD_INT 2
16842: ARRAY
16843: PPUSH
16844: CALL_OW 351
16848: OR
16849: IFFALSE 16855
// exit ;
16851: POP
16852: POP
16853: GO 17147
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16855: LD_ADDR_VAR 0 8
16859: PUSH
16860: LD_VAR 0 12
16864: PUSH
16865: LD_VAR 0 7
16869: ARRAY
16870: PUSH
16871: LD_INT 1
16873: ARRAY
16874: PPUSH
16875: LD_VAR 0 12
16879: PUSH
16880: LD_VAR 0 7
16884: ARRAY
16885: PUSH
16886: LD_INT 2
16888: ARRAY
16889: PPUSH
16890: CALL_OW 546
16894: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16895: LD_VAR 0 8
16899: PUSH
16900: LD_INT 1
16902: ARRAY
16903: PUSH
16904: LD_VAR 0 8
16908: PUSH
16909: LD_INT 2
16911: ARRAY
16912: PUSH
16913: LD_VAR 0 13
16917: PUSH
16918: LD_INT 2
16920: PLUS
16921: GREATER
16922: OR
16923: PUSH
16924: LD_VAR 0 8
16928: PUSH
16929: LD_INT 2
16931: ARRAY
16932: PUSH
16933: LD_VAR 0 13
16937: PUSH
16938: LD_INT 2
16940: MINUS
16941: LESS
16942: OR
16943: PUSH
16944: LD_VAR 0 8
16948: PUSH
16949: LD_INT 3
16951: ARRAY
16952: PUSH
16953: LD_INT 0
16955: PUSH
16956: LD_INT 8
16958: PUSH
16959: LD_INT 9
16961: PUSH
16962: LD_INT 10
16964: PUSH
16965: LD_INT 11
16967: PUSH
16968: LD_INT 12
16970: PUSH
16971: LD_INT 13
16973: PUSH
16974: LD_INT 16
16976: PUSH
16977: LD_INT 17
16979: PUSH
16980: LD_INT 18
16982: PUSH
16983: LD_INT 19
16985: PUSH
16986: LD_INT 20
16988: PUSH
16989: LD_INT 21
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: IN
17007: NOT
17008: OR
17009: PUSH
17010: LD_VAR 0 8
17014: PUSH
17015: LD_INT 5
17017: ARRAY
17018: NOT
17019: OR
17020: PUSH
17021: LD_VAR 0 8
17025: PUSH
17026: LD_INT 6
17028: ARRAY
17029: PUSH
17030: LD_INT 1
17032: PUSH
17033: LD_INT 2
17035: PUSH
17036: LD_INT 7
17038: PUSH
17039: LD_INT 9
17041: PUSH
17042: LD_INT 10
17044: PUSH
17045: LD_INT 11
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: IN
17056: NOT
17057: OR
17058: IFFALSE 17064
// exit ;
17060: POP
17061: POP
17062: GO 17147
// end ;
17064: GO 16735
17066: POP
17067: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17068: LD_VAR 0 9
17072: PPUSH
17073: LD_VAR 0 3
17077: PPUSH
17078: LD_VAR 0 4
17082: PPUSH
17083: LD_INT 20
17085: PPUSH
17086: CALL 9070 0 4
17090: PUSH
17091: LD_INT 4
17093: ARRAY
17094: IFFALSE 17098
// exit ;
17096: GO 17147
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17098: LD_VAR 0 2
17102: PUSH
17103: LD_INT 29
17105: PUSH
17106: LD_INT 30
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: IN
17113: PUSH
17114: LD_VAR 0 3
17118: PPUSH
17119: LD_VAR 0 4
17123: PPUSH
17124: LD_VAR 0 9
17128: PPUSH
17129: CALL_OW 440
17133: NOT
17134: AND
17135: IFFALSE 17139
// exit ;
17137: GO 17147
// result := true ;
17139: LD_ADDR_VAR 0 6
17143: PUSH
17144: LD_INT 1
17146: ST_TO_ADDR
// end ;
17147: LD_VAR 0 6
17151: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17152: LD_INT 0
17154: PPUSH
17155: PPUSH
17156: PPUSH
17157: PPUSH
17158: PPUSH
17159: PPUSH
17160: PPUSH
17161: PPUSH
17162: PPUSH
17163: PPUSH
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
17171: PPUSH
17172: PPUSH
17173: PPUSH
17174: PPUSH
17175: PPUSH
17176: PPUSH
17177: PPUSH
17178: PPUSH
17179: PPUSH
17180: PPUSH
17181: PPUSH
17182: PPUSH
17183: PPUSH
17184: PPUSH
17185: PPUSH
17186: PPUSH
17187: PPUSH
17188: PPUSH
17189: PPUSH
17190: PPUSH
17191: PPUSH
17192: PPUSH
17193: PPUSH
17194: PPUSH
17195: PPUSH
17196: PPUSH
17197: PPUSH
17198: PPUSH
17199: PPUSH
17200: PPUSH
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
17205: PPUSH
17206: PPUSH
17207: PPUSH
17208: PPUSH
17209: PPUSH
17210: PPUSH
17211: PPUSH
// result = [ ] ;
17212: LD_ADDR_VAR 0 7
17216: PUSH
17217: EMPTY
17218: ST_TO_ADDR
// temp_list = [ ] ;
17219: LD_ADDR_VAR 0 9
17223: PUSH
17224: EMPTY
17225: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17226: LD_VAR 0 4
17230: PUSH
17231: LD_INT 0
17233: PUSH
17234: LD_INT 1
17236: PUSH
17237: LD_INT 2
17239: PUSH
17240: LD_INT 3
17242: PUSH
17243: LD_INT 4
17245: PUSH
17246: LD_INT 5
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: IN
17257: NOT
17258: PUSH
17259: LD_VAR 0 1
17263: PUSH
17264: LD_INT 0
17266: PUSH
17267: LD_INT 1
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: IN
17274: PUSH
17275: LD_VAR 0 5
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: LD_INT 2
17285: PUSH
17286: LD_INT 3
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: LIST
17293: IN
17294: NOT
17295: AND
17296: OR
17297: IFFALSE 17301
// exit ;
17299: GO 35692
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17301: LD_VAR 0 1
17305: PUSH
17306: LD_INT 6
17308: PUSH
17309: LD_INT 7
17311: PUSH
17312: LD_INT 8
17314: PUSH
17315: LD_INT 13
17317: PUSH
17318: LD_INT 12
17320: PUSH
17321: LD_INT 15
17323: PUSH
17324: LD_INT 11
17326: PUSH
17327: LD_INT 14
17329: PUSH
17330: LD_INT 10
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: IN
17344: IFFALSE 17354
// btype = b_lab ;
17346: LD_ADDR_VAR 0 1
17350: PUSH
17351: LD_INT 6
17353: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17354: LD_VAR 0 6
17358: PUSH
17359: LD_INT 0
17361: PUSH
17362: LD_INT 1
17364: PUSH
17365: LD_INT 2
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: LIST
17372: IN
17373: NOT
17374: PUSH
17375: LD_VAR 0 1
17379: PUSH
17380: LD_INT 0
17382: PUSH
17383: LD_INT 1
17385: PUSH
17386: LD_INT 2
17388: PUSH
17389: LD_INT 3
17391: PUSH
17392: LD_INT 6
17394: PUSH
17395: LD_INT 36
17397: PUSH
17398: LD_INT 4
17400: PUSH
17401: LD_INT 5
17403: PUSH
17404: LD_INT 31
17406: PUSH
17407: LD_INT 32
17409: PUSH
17410: LD_INT 33
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: IN
17426: NOT
17427: PUSH
17428: LD_VAR 0 6
17432: PUSH
17433: LD_INT 1
17435: EQUAL
17436: AND
17437: OR
17438: PUSH
17439: LD_VAR 0 1
17443: PUSH
17444: LD_INT 2
17446: PUSH
17447: LD_INT 3
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: IN
17454: NOT
17455: PUSH
17456: LD_VAR 0 6
17460: PUSH
17461: LD_INT 2
17463: EQUAL
17464: AND
17465: OR
17466: IFFALSE 17476
// mode = 0 ;
17468: LD_ADDR_VAR 0 6
17472: PUSH
17473: LD_INT 0
17475: ST_TO_ADDR
// case mode of 0 :
17476: LD_VAR 0 6
17480: PUSH
17481: LD_INT 0
17483: DOUBLE
17484: EQUAL
17485: IFTRUE 17489
17487: GO 28942
17489: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17490: LD_ADDR_VAR 0 11
17494: PUSH
17495: LD_INT 0
17497: PUSH
17498: LD_INT 0
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 0
17507: PUSH
17508: LD_INT 1
17510: NEG
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 1
17518: PUSH
17519: LD_INT 0
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 1
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 0
17538: PUSH
17539: LD_INT 1
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 1
17548: NEG
17549: PUSH
17550: LD_INT 0
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 1
17559: NEG
17560: PUSH
17561: LD_INT 1
17563: NEG
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 1
17571: NEG
17572: PUSH
17573: LD_INT 2
17575: NEG
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 0
17583: PUSH
17584: LD_INT 2
17586: NEG
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 1
17594: PUSH
17595: LD_INT 1
17597: NEG
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 1
17605: PUSH
17606: LD_INT 2
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: LD_INT 0
17615: PUSH
17616: LD_INT 2
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 1
17625: NEG
17626: PUSH
17627: LD_INT 1
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 1
17636: PUSH
17637: LD_INT 3
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 0
17646: PUSH
17647: LD_INT 3
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 1
17656: NEG
17657: PUSH
17658: LD_INT 2
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17683: LD_ADDR_VAR 0 12
17687: PUSH
17688: LD_INT 0
17690: PUSH
17691: LD_INT 0
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 0
17700: PUSH
17701: LD_INT 1
17703: NEG
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 1
17711: PUSH
17712: LD_INT 0
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 1
17721: PUSH
17722: LD_INT 1
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 0
17731: PUSH
17732: LD_INT 1
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 1
17741: NEG
17742: PUSH
17743: LD_INT 0
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 1
17752: NEG
17753: PUSH
17754: LD_INT 1
17756: NEG
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 1
17764: PUSH
17765: LD_INT 1
17767: NEG
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: PUSH
17773: LD_INT 2
17775: PUSH
17776: LD_INT 0
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 2
17785: PUSH
17786: LD_INT 1
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 1
17795: NEG
17796: PUSH
17797: LD_INT 1
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 2
17806: NEG
17807: PUSH
17808: LD_INT 0
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 2
17817: NEG
17818: PUSH
17819: LD_INT 1
17821: NEG
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 2
17829: NEG
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 3
17840: NEG
17841: PUSH
17842: LD_INT 0
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PUSH
17849: LD_INT 3
17851: NEG
17852: PUSH
17853: LD_INT 1
17855: NEG
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17879: LD_ADDR_VAR 0 13
17883: PUSH
17884: LD_INT 0
17886: PUSH
17887: LD_INT 0
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 0
17896: PUSH
17897: LD_INT 1
17899: NEG
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 1
17907: PUSH
17908: LD_INT 0
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 1
17917: PUSH
17918: LD_INT 1
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 0
17927: PUSH
17928: LD_INT 1
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 1
17937: NEG
17938: PUSH
17939: LD_INT 0
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 1
17948: NEG
17949: PUSH
17950: LD_INT 1
17952: NEG
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 1
17960: NEG
17961: PUSH
17962: LD_INT 2
17964: NEG
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 2
17972: PUSH
17973: LD_INT 1
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 2
17982: PUSH
17983: LD_INT 2
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 1
17992: PUSH
17993: LD_INT 2
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 2
18002: NEG
18003: PUSH
18004: LD_INT 1
18006: NEG
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 2
18014: NEG
18015: PUSH
18016: LD_INT 2
18018: NEG
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 2
18026: NEG
18027: PUSH
18028: LD_INT 3
18030: NEG
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: LD_INT 3
18038: NEG
18039: PUSH
18040: LD_INT 2
18042: NEG
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 3
18050: NEG
18051: PUSH
18052: LD_INT 3
18054: NEG
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18078: LD_ADDR_VAR 0 14
18082: PUSH
18083: LD_INT 0
18085: PUSH
18086: LD_INT 0
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 0
18095: PUSH
18096: LD_INT 1
18098: NEG
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 1
18106: PUSH
18107: LD_INT 0
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 1
18116: PUSH
18117: LD_INT 1
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 0
18126: PUSH
18127: LD_INT 1
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 1
18136: NEG
18137: PUSH
18138: LD_INT 0
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 1
18147: NEG
18148: PUSH
18149: LD_INT 1
18151: NEG
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 1
18159: NEG
18160: PUSH
18161: LD_INT 2
18163: NEG
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 0
18171: PUSH
18172: LD_INT 2
18174: NEG
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 1
18182: PUSH
18183: LD_INT 1
18185: NEG
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: LD_INT 2
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 0
18203: PUSH
18204: LD_INT 2
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 1
18213: NEG
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 1
18224: NEG
18225: PUSH
18226: LD_INT 3
18228: NEG
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 0
18236: PUSH
18237: LD_INT 3
18239: NEG
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 1
18247: PUSH
18248: LD_INT 2
18250: NEG
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18274: LD_ADDR_VAR 0 15
18278: PUSH
18279: LD_INT 0
18281: PUSH
18282: LD_INT 0
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 0
18291: PUSH
18292: LD_INT 1
18294: NEG
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 1
18302: PUSH
18303: LD_INT 0
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 1
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 0
18322: PUSH
18323: LD_INT 1
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 1
18332: NEG
18333: PUSH
18334: LD_INT 0
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 1
18343: NEG
18344: PUSH
18345: LD_INT 1
18347: NEG
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 1
18355: PUSH
18356: LD_INT 1
18358: NEG
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 2
18366: PUSH
18367: LD_INT 0
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 2
18376: PUSH
18377: LD_INT 1
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: LD_INT 1
18386: NEG
18387: PUSH
18388: LD_INT 1
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 2
18397: NEG
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 2
18408: NEG
18409: PUSH
18410: LD_INT 1
18412: NEG
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 2
18420: PUSH
18421: LD_INT 1
18423: NEG
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 3
18431: PUSH
18432: LD_INT 0
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 3
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18467: LD_ADDR_VAR 0 16
18471: PUSH
18472: LD_INT 0
18474: PUSH
18475: LD_INT 0
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 0
18484: PUSH
18485: LD_INT 1
18487: NEG
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: LD_INT 0
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 1
18505: PUSH
18506: LD_INT 1
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 0
18515: PUSH
18516: LD_INT 1
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 1
18525: NEG
18526: PUSH
18527: LD_INT 0
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 1
18536: NEG
18537: PUSH
18538: LD_INT 1
18540: NEG
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 1
18548: NEG
18549: PUSH
18550: LD_INT 2
18552: NEG
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 2
18560: PUSH
18561: LD_INT 1
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 2
18570: PUSH
18571: LD_INT 2
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 1
18580: PUSH
18581: LD_INT 2
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 2
18590: NEG
18591: PUSH
18592: LD_INT 1
18594: NEG
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 2
18602: NEG
18603: PUSH
18604: LD_INT 2
18606: NEG
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 3
18614: PUSH
18615: LD_INT 2
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 3
18624: PUSH
18625: LD_INT 3
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 2
18634: PUSH
18635: LD_INT 3
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18660: LD_ADDR_VAR 0 17
18664: PUSH
18665: LD_INT 0
18667: PUSH
18668: LD_INT 0
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 0
18677: PUSH
18678: LD_INT 1
18680: NEG
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 1
18688: PUSH
18689: LD_INT 0
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: LD_INT 1
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 0
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 1
18718: NEG
18719: PUSH
18720: LD_INT 0
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 1
18729: NEG
18730: PUSH
18731: LD_INT 1
18733: NEG
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 1
18741: NEG
18742: PUSH
18743: LD_INT 2
18745: NEG
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 0
18753: PUSH
18754: LD_INT 2
18756: NEG
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 1
18764: PUSH
18765: LD_INT 1
18767: NEG
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 2
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 2
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 2
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 1
18805: PUSH
18806: LD_INT 2
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 0
18815: PUSH
18816: LD_INT 2
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 1
18825: NEG
18826: PUSH
18827: LD_INT 1
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 2
18836: NEG
18837: PUSH
18838: LD_INT 0
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 2
18847: NEG
18848: PUSH
18849: LD_INT 1
18851: NEG
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 2
18859: NEG
18860: PUSH
18861: LD_INT 2
18863: NEG
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18890: LD_ADDR_VAR 0 18
18894: PUSH
18895: LD_INT 0
18897: PUSH
18898: LD_INT 0
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 0
18907: PUSH
18908: LD_INT 1
18910: NEG
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 1
18918: PUSH
18919: LD_INT 0
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 1
18928: PUSH
18929: LD_INT 1
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 0
18938: PUSH
18939: LD_INT 1
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 1
18948: NEG
18949: PUSH
18950: LD_INT 0
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 1
18959: NEG
18960: PUSH
18961: LD_INT 1
18963: NEG
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 1
18971: NEG
18972: PUSH
18973: LD_INT 2
18975: NEG
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 0
18983: PUSH
18984: LD_INT 2
18986: NEG
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 1
18994: PUSH
18995: LD_INT 1
18997: NEG
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 2
19005: PUSH
19006: LD_INT 0
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 2
19015: PUSH
19016: LD_INT 1
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 2
19025: PUSH
19026: LD_INT 2
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 1
19035: PUSH
19036: LD_INT 2
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 0
19045: PUSH
19046: LD_INT 2
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 1
19055: NEG
19056: PUSH
19057: LD_INT 1
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 2
19066: NEG
19067: PUSH
19068: LD_INT 0
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 2
19077: NEG
19078: PUSH
19079: LD_INT 1
19081: NEG
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 2
19089: NEG
19090: PUSH
19091: LD_INT 2
19093: NEG
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19120: LD_ADDR_VAR 0 19
19124: PUSH
19125: LD_INT 0
19127: PUSH
19128: LD_INT 0
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 0
19137: PUSH
19138: LD_INT 1
19140: NEG
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 1
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 1
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 0
19168: PUSH
19169: LD_INT 1
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 1
19178: NEG
19179: PUSH
19180: LD_INT 0
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 1
19189: NEG
19190: PUSH
19191: LD_INT 1
19193: NEG
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 1
19201: NEG
19202: PUSH
19203: LD_INT 2
19205: NEG
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 0
19213: PUSH
19214: LD_INT 2
19216: NEG
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 1
19224: PUSH
19225: LD_INT 1
19227: NEG
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 2
19235: PUSH
19236: LD_INT 0
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 2
19245: PUSH
19246: LD_INT 1
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 2
19255: PUSH
19256: LD_INT 2
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 1
19265: PUSH
19266: LD_INT 2
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 0
19275: PUSH
19276: LD_INT 2
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 1
19285: NEG
19286: PUSH
19287: LD_INT 1
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 2
19296: NEG
19297: PUSH
19298: LD_INT 0
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 2
19307: NEG
19308: PUSH
19309: LD_INT 1
19311: NEG
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 2
19319: NEG
19320: PUSH
19321: LD_INT 2
19323: NEG
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19350: LD_ADDR_VAR 0 20
19354: PUSH
19355: LD_INT 0
19357: PUSH
19358: LD_INT 0
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 0
19367: PUSH
19368: LD_INT 1
19370: NEG
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 1
19378: PUSH
19379: LD_INT 0
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 1
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 1
19408: NEG
19409: PUSH
19410: LD_INT 0
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 1
19419: NEG
19420: PUSH
19421: LD_INT 1
19423: NEG
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 1
19431: NEG
19432: PUSH
19433: LD_INT 2
19435: NEG
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 0
19443: PUSH
19444: LD_INT 2
19446: NEG
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: LD_INT 1
19457: NEG
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: LD_INT 0
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 2
19475: PUSH
19476: LD_INT 1
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 2
19485: PUSH
19486: LD_INT 2
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 1
19495: PUSH
19496: LD_INT 2
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 0
19505: PUSH
19506: LD_INT 2
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: NEG
19516: PUSH
19517: LD_INT 1
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 2
19526: NEG
19527: PUSH
19528: LD_INT 0
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 2
19537: NEG
19538: PUSH
19539: LD_INT 1
19541: NEG
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 2
19549: NEG
19550: PUSH
19551: LD_INT 2
19553: NEG
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19580: LD_ADDR_VAR 0 21
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: LD_INT 0
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 0
19597: PUSH
19598: LD_INT 1
19600: NEG
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 1
19608: PUSH
19609: LD_INT 0
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 1
19618: PUSH
19619: LD_INT 1
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: LD_INT 1
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 1
19638: NEG
19639: PUSH
19640: LD_INT 0
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 1
19649: NEG
19650: PUSH
19651: LD_INT 1
19653: NEG
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 1
19661: NEG
19662: PUSH
19663: LD_INT 2
19665: NEG
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 0
19673: PUSH
19674: LD_INT 2
19676: NEG
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 1
19684: PUSH
19685: LD_INT 1
19687: NEG
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 2
19695: PUSH
19696: LD_INT 0
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 2
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 2
19715: PUSH
19716: LD_INT 2
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 1
19725: PUSH
19726: LD_INT 2
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 0
19735: PUSH
19736: LD_INT 2
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 1
19745: NEG
19746: PUSH
19747: LD_INT 1
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 2
19756: NEG
19757: PUSH
19758: LD_INT 0
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 2
19767: NEG
19768: PUSH
19769: LD_INT 1
19771: NEG
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 2
19779: NEG
19780: PUSH
19781: LD_INT 2
19783: NEG
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19810: LD_ADDR_VAR 0 22
19814: PUSH
19815: LD_INT 0
19817: PUSH
19818: LD_INT 0
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 0
19827: PUSH
19828: LD_INT 1
19830: NEG
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 1
19838: PUSH
19839: LD_INT 0
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 1
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: LD_INT 1
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 1
19868: NEG
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 1
19879: NEG
19880: PUSH
19881: LD_INT 1
19883: NEG
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 1
19891: NEG
19892: PUSH
19893: LD_INT 2
19895: NEG
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 0
19903: PUSH
19904: LD_INT 2
19906: NEG
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 1
19914: PUSH
19915: LD_INT 1
19917: NEG
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 2
19925: PUSH
19926: LD_INT 0
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 2
19935: PUSH
19936: LD_INT 1
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 2
19945: PUSH
19946: LD_INT 2
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 1
19955: PUSH
19956: LD_INT 2
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 0
19965: PUSH
19966: LD_INT 2
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 1
19975: NEG
19976: PUSH
19977: LD_INT 1
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 2
19986: NEG
19987: PUSH
19988: LD_INT 0
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 2
19997: NEG
19998: PUSH
19999: LD_INT 1
20001: NEG
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 2
20009: NEG
20010: PUSH
20011: LD_INT 2
20013: NEG
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20040: LD_ADDR_VAR 0 23
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: LD_INT 0
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 0
20057: PUSH
20058: LD_INT 1
20060: NEG
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 1
20068: PUSH
20069: LD_INT 0
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 1
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: LD_INT 1
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 1
20098: NEG
20099: PUSH
20100: LD_INT 0
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: NEG
20110: PUSH
20111: LD_INT 1
20113: NEG
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 1
20121: NEG
20122: PUSH
20123: LD_INT 2
20125: NEG
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 0
20133: PUSH
20134: LD_INT 2
20136: NEG
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 1
20144: PUSH
20145: LD_INT 1
20147: NEG
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 2
20155: PUSH
20156: LD_INT 0
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 2
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 2
20175: PUSH
20176: LD_INT 2
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 1
20185: PUSH
20186: LD_INT 2
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 0
20195: PUSH
20196: LD_INT 2
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 1
20205: NEG
20206: PUSH
20207: LD_INT 1
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 2
20216: NEG
20217: PUSH
20218: LD_INT 0
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 2
20227: NEG
20228: PUSH
20229: LD_INT 1
20231: NEG
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 2
20239: NEG
20240: PUSH
20241: LD_INT 2
20243: NEG
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 2
20251: NEG
20252: PUSH
20253: LD_INT 3
20255: NEG
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 1
20263: NEG
20264: PUSH
20265: LD_INT 3
20267: NEG
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 1
20275: PUSH
20276: LD_INT 2
20278: NEG
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 2
20286: PUSH
20287: LD_INT 1
20289: NEG
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20320: LD_ADDR_VAR 0 24
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: LD_INT 0
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: LD_INT 1
20340: NEG
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 1
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 0
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 1
20378: NEG
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 1
20389: NEG
20390: PUSH
20391: LD_INT 1
20393: NEG
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 1
20401: NEG
20402: PUSH
20403: LD_INT 2
20405: NEG
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: LD_INT 2
20416: NEG
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: LD_INT 1
20427: NEG
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 0
20475: PUSH
20476: LD_INT 2
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 1
20485: NEG
20486: PUSH
20487: LD_INT 1
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 2
20496: NEG
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 2
20507: NEG
20508: PUSH
20509: LD_INT 1
20511: NEG
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 2
20519: NEG
20520: PUSH
20521: LD_INT 2
20523: NEG
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: LD_INT 2
20534: NEG
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 2
20542: PUSH
20543: LD_INT 1
20545: NEG
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PUSH
20551: LD_INT 3
20553: PUSH
20554: LD_INT 1
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 3
20563: PUSH
20564: LD_INT 2
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20596: LD_ADDR_VAR 0 25
20600: PUSH
20601: LD_INT 0
20603: PUSH
20604: LD_INT 0
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 0
20613: PUSH
20614: LD_INT 1
20616: NEG
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 1
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 1
20634: PUSH
20635: LD_INT 1
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 0
20644: PUSH
20645: LD_INT 1
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 1
20654: NEG
20655: PUSH
20656: LD_INT 0
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 1
20665: NEG
20666: PUSH
20667: LD_INT 1
20669: NEG
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 1
20677: NEG
20678: PUSH
20679: LD_INT 2
20681: NEG
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 0
20689: PUSH
20690: LD_INT 2
20692: NEG
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 1
20700: PUSH
20701: LD_INT 1
20703: NEG
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 2
20711: PUSH
20712: LD_INT 0
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 2
20721: PUSH
20722: LD_INT 1
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 2
20731: PUSH
20732: LD_INT 2
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 1
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 0
20751: PUSH
20752: LD_INT 2
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 1
20761: NEG
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 2
20772: NEG
20773: PUSH
20774: LD_INT 0
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 2
20783: NEG
20784: PUSH
20785: LD_INT 1
20787: NEG
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 2
20795: NEG
20796: PUSH
20797: LD_INT 2
20799: NEG
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 3
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 3
20817: PUSH
20818: LD_INT 2
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 2
20827: PUSH
20828: LD_INT 3
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: LD_INT 3
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20870: LD_ADDR_VAR 0 26
20874: PUSH
20875: LD_INT 0
20877: PUSH
20878: LD_INT 0
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: LD_INT 1
20890: NEG
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 1
20898: PUSH
20899: LD_INT 0
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: LD_INT 1
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 0
20918: PUSH
20919: LD_INT 1
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 1
20939: NEG
20940: PUSH
20941: LD_INT 1
20943: NEG
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 1
20951: NEG
20952: PUSH
20953: LD_INT 2
20955: NEG
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 0
20963: PUSH
20964: LD_INT 2
20966: NEG
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 1
20974: PUSH
20975: LD_INT 1
20977: NEG
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 2
20985: PUSH
20986: LD_INT 0
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 2
20995: PUSH
20996: LD_INT 1
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 2
21005: PUSH
21006: LD_INT 2
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 1
21015: PUSH
21016: LD_INT 2
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 0
21025: PUSH
21026: LD_INT 2
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 1
21035: NEG
21036: PUSH
21037: LD_INT 1
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 2
21046: NEG
21047: PUSH
21048: LD_INT 0
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 2
21057: NEG
21058: PUSH
21059: LD_INT 1
21061: NEG
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 2
21069: NEG
21070: PUSH
21071: LD_INT 2
21073: NEG
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 2
21081: PUSH
21082: LD_INT 3
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 1
21091: PUSH
21092: LD_INT 3
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 1
21101: NEG
21102: PUSH
21103: LD_INT 2
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 2
21112: NEG
21113: PUSH
21114: LD_INT 1
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21146: LD_ADDR_VAR 0 27
21150: PUSH
21151: LD_INT 0
21153: PUSH
21154: LD_INT 0
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 0
21163: PUSH
21164: LD_INT 1
21166: NEG
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 1
21174: PUSH
21175: LD_INT 0
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 1
21184: PUSH
21185: LD_INT 1
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 0
21194: PUSH
21195: LD_INT 1
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: LD_INT 0
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 1
21215: NEG
21216: PUSH
21217: LD_INT 1
21219: NEG
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 1
21227: NEG
21228: PUSH
21229: LD_INT 2
21231: NEG
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 0
21239: PUSH
21240: LD_INT 2
21242: NEG
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 1
21250: PUSH
21251: LD_INT 1
21253: NEG
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 2
21261: PUSH
21262: LD_INT 0
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 2
21271: PUSH
21272: LD_INT 1
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 2
21281: PUSH
21282: LD_INT 2
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 1
21291: PUSH
21292: LD_INT 2
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 0
21301: PUSH
21302: LD_INT 2
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 1
21311: NEG
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 2
21322: NEG
21323: PUSH
21324: LD_INT 0
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 2
21333: NEG
21334: PUSH
21335: LD_INT 1
21337: NEG
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 2
21345: NEG
21346: PUSH
21347: LD_INT 2
21349: NEG
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: NEG
21358: PUSH
21359: LD_INT 2
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 2
21368: NEG
21369: PUSH
21370: LD_INT 1
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 3
21379: NEG
21380: PUSH
21381: LD_INT 1
21383: NEG
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 3
21391: NEG
21392: PUSH
21393: LD_INT 2
21395: NEG
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21426: LD_ADDR_VAR 0 28
21430: PUSH
21431: LD_INT 0
21433: PUSH
21434: LD_INT 0
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 0
21443: PUSH
21444: LD_INT 1
21446: NEG
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 1
21454: PUSH
21455: LD_INT 0
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 1
21464: PUSH
21465: LD_INT 1
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 0
21474: PUSH
21475: LD_INT 1
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 1
21484: NEG
21485: PUSH
21486: LD_INT 0
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 1
21495: NEG
21496: PUSH
21497: LD_INT 1
21499: NEG
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 1
21507: NEG
21508: PUSH
21509: LD_INT 2
21511: NEG
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 0
21519: PUSH
21520: LD_INT 2
21522: NEG
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 1
21530: PUSH
21531: LD_INT 1
21533: NEG
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 2
21541: PUSH
21542: LD_INT 0
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 2
21551: PUSH
21552: LD_INT 1
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 2
21561: PUSH
21562: LD_INT 2
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: LD_INT 2
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 0
21581: PUSH
21582: LD_INT 2
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 1
21591: NEG
21592: PUSH
21593: LD_INT 1
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 2
21602: NEG
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 2
21613: NEG
21614: PUSH
21615: LD_INT 1
21617: NEG
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 2
21625: NEG
21626: PUSH
21627: LD_INT 2
21629: NEG
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 2
21637: NEG
21638: PUSH
21639: LD_INT 3
21641: NEG
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 1
21649: NEG
21650: PUSH
21651: LD_INT 3
21653: NEG
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 3
21661: NEG
21662: PUSH
21663: LD_INT 1
21665: NEG
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 3
21673: NEG
21674: PUSH
21675: LD_INT 2
21677: NEG
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21708: LD_ADDR_VAR 0 29
21712: PUSH
21713: LD_INT 0
21715: PUSH
21716: LD_INT 0
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 0
21725: PUSH
21726: LD_INT 1
21728: NEG
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: LD_INT 0
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 1
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 0
21756: PUSH
21757: LD_INT 1
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: LD_INT 0
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 1
21777: NEG
21778: PUSH
21779: LD_INT 1
21781: NEG
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 1
21789: NEG
21790: PUSH
21791: LD_INT 2
21793: NEG
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 0
21801: PUSH
21802: LD_INT 2
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: LD_INT 1
21815: NEG
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: LD_INT 0
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: LD_INT 1
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 1
21843: PUSH
21844: LD_INT 2
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 0
21853: PUSH
21854: LD_INT 2
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: LD_INT 1
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 2
21874: NEG
21875: PUSH
21876: LD_INT 1
21878: NEG
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 2
21886: NEG
21887: PUSH
21888: LD_INT 2
21890: NEG
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 2
21898: NEG
21899: PUSH
21900: LD_INT 3
21902: NEG
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 2
21910: PUSH
21911: LD_INT 1
21913: NEG
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 3
21921: PUSH
21922: LD_INT 1
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 1
21931: PUSH
21932: LD_INT 3
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 1
21941: NEG
21942: PUSH
21943: LD_INT 2
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 3
21952: NEG
21953: PUSH
21954: LD_INT 2
21956: NEG
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21987: LD_ADDR_VAR 0 30
21991: PUSH
21992: LD_INT 0
21994: PUSH
21995: LD_INT 0
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 0
22004: PUSH
22005: LD_INT 1
22007: NEG
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 1
22015: PUSH
22016: LD_INT 0
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 1
22025: PUSH
22026: LD_INT 1
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: LD_INT 1
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 1
22045: NEG
22046: PUSH
22047: LD_INT 0
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 1
22056: NEG
22057: PUSH
22058: LD_INT 1
22060: NEG
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 1
22068: NEG
22069: PUSH
22070: LD_INT 2
22072: NEG
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 0
22080: PUSH
22081: LD_INT 2
22083: NEG
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 1
22091: PUSH
22092: LD_INT 1
22094: NEG
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 2
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 2
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 2
22122: PUSH
22123: LD_INT 2
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 1
22132: PUSH
22133: LD_INT 2
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 1
22142: NEG
22143: PUSH
22144: LD_INT 1
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 2
22153: NEG
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 2
22164: NEG
22165: PUSH
22166: LD_INT 1
22168: NEG
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 1
22176: NEG
22177: PUSH
22178: LD_INT 3
22180: NEG
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 1
22188: PUSH
22189: LD_INT 2
22191: NEG
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 3
22199: PUSH
22200: LD_INT 2
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 2
22209: PUSH
22210: LD_INT 3
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 2
22219: NEG
22220: PUSH
22221: LD_INT 1
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 3
22230: NEG
22231: PUSH
22232: LD_INT 1
22234: NEG
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22265: LD_ADDR_VAR 0 31
22269: PUSH
22270: LD_INT 0
22272: PUSH
22273: LD_INT 0
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 0
22282: PUSH
22283: LD_INT 1
22285: NEG
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 1
22293: PUSH
22294: LD_INT 0
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: LD_INT 1
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 0
22313: PUSH
22314: LD_INT 1
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 1
22323: NEG
22324: PUSH
22325: LD_INT 0
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 1
22334: NEG
22335: PUSH
22336: LD_INT 1
22338: NEG
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 1
22346: NEG
22347: PUSH
22348: LD_INT 2
22350: NEG
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: LD_INT 1
22361: NEG
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 2
22369: PUSH
22370: LD_INT 0
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 2
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 2
22389: PUSH
22390: LD_INT 2
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 1
22399: PUSH
22400: LD_INT 2
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 0
22409: PUSH
22410: LD_INT 2
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 1
22419: NEG
22420: PUSH
22421: LD_INT 1
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 2
22430: NEG
22431: PUSH
22432: LD_INT 1
22434: NEG
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 2
22442: NEG
22443: PUSH
22444: LD_INT 2
22446: NEG
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 2
22454: NEG
22455: PUSH
22456: LD_INT 3
22458: NEG
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 2
22466: PUSH
22467: LD_INT 1
22469: NEG
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 3
22477: PUSH
22478: LD_INT 1
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: LD_INT 3
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 1
22497: NEG
22498: PUSH
22499: LD_INT 2
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 3
22508: NEG
22509: PUSH
22510: LD_INT 2
22512: NEG
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22543: LD_ADDR_VAR 0 32
22547: PUSH
22548: LD_INT 0
22550: PUSH
22551: LD_INT 0
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 0
22560: PUSH
22561: LD_INT 1
22563: NEG
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 1
22571: PUSH
22572: LD_INT 0
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 1
22581: PUSH
22582: LD_INT 1
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 0
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 1
22601: NEG
22602: PUSH
22603: LD_INT 0
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 1
22612: NEG
22613: PUSH
22614: LD_INT 1
22616: NEG
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 1
22624: NEG
22625: PUSH
22626: LD_INT 2
22628: NEG
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 0
22636: PUSH
22637: LD_INT 2
22639: NEG
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 1
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 2
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 2
22668: PUSH
22669: LD_INT 2
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: LD_INT 2
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 0
22688: PUSH
22689: LD_INT 2
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 1
22698: NEG
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 2
22709: NEG
22710: PUSH
22711: LD_INT 0
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 2
22720: NEG
22721: PUSH
22722: LD_INT 1
22724: NEG
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 1
22732: NEG
22733: PUSH
22734: LD_INT 3
22736: NEG
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 1
22744: PUSH
22745: LD_INT 2
22747: NEG
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 3
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 2
22765: PUSH
22766: LD_INT 3
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 2
22775: NEG
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 3
22786: NEG
22787: PUSH
22788: LD_INT 1
22790: NEG
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22821: LD_ADDR_VAR 0 33
22825: PUSH
22826: LD_INT 0
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 0
22838: PUSH
22839: LD_INT 1
22841: NEG
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 1
22849: PUSH
22850: LD_INT 0
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: LD_INT 1
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 0
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 1
22879: NEG
22880: PUSH
22881: LD_INT 0
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 1
22890: NEG
22891: PUSH
22892: LD_INT 1
22894: NEG
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 1
22902: NEG
22903: PUSH
22904: LD_INT 2
22906: NEG
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 1
22914: PUSH
22915: LD_INT 1
22917: NEG
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: LD_INT 0
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 2
22935: PUSH
22936: LD_INT 1
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 1
22945: PUSH
22946: LD_INT 2
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 0
22955: PUSH
22956: LD_INT 2
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 1
22965: NEG
22966: PUSH
22967: LD_INT 1
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 2
22976: NEG
22977: PUSH
22978: LD_INT 0
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 2
22987: NEG
22988: PUSH
22989: LD_INT 1
22991: NEG
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 2
22999: NEG
23000: PUSH
23001: LD_INT 2
23003: NEG
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 2
23011: NEG
23012: PUSH
23013: LD_INT 3
23015: NEG
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 2
23023: PUSH
23024: LD_INT 1
23026: NEG
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 3
23034: PUSH
23035: LD_INT 1
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: LD_INT 3
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 1
23054: NEG
23055: PUSH
23056: LD_INT 2
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 3
23065: NEG
23066: PUSH
23067: LD_INT 2
23069: NEG
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23100: LD_ADDR_VAR 0 34
23104: PUSH
23105: LD_INT 0
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 0
23117: PUSH
23118: LD_INT 1
23120: NEG
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 1
23128: PUSH
23129: LD_INT 0
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 1
23138: PUSH
23139: LD_INT 1
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 0
23148: PUSH
23149: LD_INT 1
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 1
23158: NEG
23159: PUSH
23160: LD_INT 0
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 1
23169: NEG
23170: PUSH
23171: LD_INT 1
23173: NEG
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 1
23181: NEG
23182: PUSH
23183: LD_INT 2
23185: NEG
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 0
23193: PUSH
23194: LD_INT 2
23196: NEG
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: LD_INT 1
23207: NEG
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 2
23215: PUSH
23216: LD_INT 1
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 2
23225: PUSH
23226: LD_INT 2
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: LD_INT 2
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 1
23245: NEG
23246: PUSH
23247: LD_INT 1
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 2
23256: NEG
23257: PUSH
23258: LD_INT 0
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 2
23267: NEG
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 2
23279: NEG
23280: PUSH
23281: LD_INT 2
23283: NEG
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 1
23291: NEG
23292: PUSH
23293: LD_INT 3
23295: NEG
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: LD_INT 2
23306: NEG
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 3
23314: PUSH
23315: LD_INT 2
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 2
23324: PUSH
23325: LD_INT 3
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 2
23334: NEG
23335: PUSH
23336: LD_INT 1
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 3
23345: NEG
23346: PUSH
23347: LD_INT 1
23349: NEG
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23380: LD_ADDR_VAR 0 35
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: LD_INT 0
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 0
23397: PUSH
23398: LD_INT 1
23400: NEG
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 1
23408: PUSH
23409: LD_INT 0
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 1
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 0
23428: PUSH
23429: LD_INT 1
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 1
23438: NEG
23439: PUSH
23440: LD_INT 0
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 1
23449: NEG
23450: PUSH
23451: LD_INT 1
23453: NEG
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 2
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 2
23471: NEG
23472: PUSH
23473: LD_INT 1
23475: NEG
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23492: LD_ADDR_VAR 0 36
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: LD_INT 0
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 0
23509: PUSH
23510: LD_INT 1
23512: NEG
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 1
23520: PUSH
23521: LD_INT 0
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: LD_INT 1
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: LD_INT 0
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 1
23561: NEG
23562: PUSH
23563: LD_INT 1
23565: NEG
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 1
23573: NEG
23574: PUSH
23575: LD_INT 2
23577: NEG
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 1
23585: PUSH
23586: LD_INT 2
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23604: LD_ADDR_VAR 0 37
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: LD_INT 0
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: LD_INT 1
23624: NEG
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 1
23632: PUSH
23633: LD_INT 0
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: LD_INT 1
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 1
23662: NEG
23663: PUSH
23664: LD_INT 0
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 1
23673: NEG
23674: PUSH
23675: LD_INT 1
23677: NEG
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 1
23685: PUSH
23686: LD_INT 1
23688: NEG
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 1
23696: NEG
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23716: LD_ADDR_VAR 0 38
23720: PUSH
23721: LD_INT 0
23723: PUSH
23724: LD_INT 0
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 0
23733: PUSH
23734: LD_INT 1
23736: NEG
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: LD_INT 0
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: LD_INT 1
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 1
23774: NEG
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 1
23785: NEG
23786: PUSH
23787: LD_INT 1
23789: NEG
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 2
23797: PUSH
23798: LD_INT 1
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 2
23807: NEG
23808: PUSH
23809: LD_INT 1
23811: NEG
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23828: LD_ADDR_VAR 0 39
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: LD_INT 0
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 0
23845: PUSH
23846: LD_INT 1
23848: NEG
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: LD_INT 0
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: LD_INT 1
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: LD_INT 0
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 1
23897: NEG
23898: PUSH
23899: LD_INT 1
23901: NEG
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 1
23909: NEG
23910: PUSH
23911: LD_INT 2
23913: NEG
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 1
23921: PUSH
23922: LD_INT 2
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23940: LD_ADDR_VAR 0 40
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: LD_INT 0
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 0
23957: PUSH
23958: LD_INT 1
23960: NEG
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: PUSH
23969: LD_INT 0
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: LD_INT 1
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: LD_INT 1
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: LD_INT 0
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 1
24009: NEG
24010: PUSH
24011: LD_INT 1
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: LD_INT 1
24024: NEG
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 1
24032: NEG
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24052: LD_ADDR_VAR 0 41
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: LD_INT 0
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: LD_INT 1
24072: NEG
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: LD_INT 0
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 0
24100: PUSH
24101: LD_INT 1
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: PUSH
24112: LD_INT 0
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 1
24121: NEG
24122: PUSH
24123: LD_INT 1
24125: NEG
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: NEG
24134: PUSH
24135: LD_INT 2
24137: NEG
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 1
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 2
24156: PUSH
24157: LD_INT 0
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 2
24166: PUSH
24167: LD_INT 1
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 2
24176: PUSH
24177: LD_INT 2
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 1
24186: PUSH
24187: LD_INT 2
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 1
24196: NEG
24197: PUSH
24198: LD_INT 1
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 2
24207: NEG
24208: PUSH
24209: LD_INT 0
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 2
24218: NEG
24219: PUSH
24220: LD_INT 1
24222: NEG
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 2
24230: NEG
24231: PUSH
24232: LD_INT 2
24234: NEG
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 2
24242: NEG
24243: PUSH
24244: LD_INT 3
24246: NEG
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 2
24254: PUSH
24255: LD_INT 1
24257: NEG
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 3
24265: PUSH
24266: LD_INT 0
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 3
24275: PUSH
24276: LD_INT 1
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 3
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 3
24295: PUSH
24296: LD_INT 3
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 2
24305: PUSH
24306: LD_INT 3
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 2
24315: NEG
24316: PUSH
24317: LD_INT 1
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 3
24326: NEG
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 3
24337: NEG
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 3
24349: NEG
24350: PUSH
24351: LD_INT 2
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 3
24361: NEG
24362: PUSH
24363: LD_INT 3
24365: NEG
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24402: LD_ADDR_VAR 0 42
24406: PUSH
24407: LD_INT 0
24409: PUSH
24410: LD_INT 0
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 0
24419: PUSH
24420: LD_INT 1
24422: NEG
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 1
24440: PUSH
24441: LD_INT 1
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 0
24450: PUSH
24451: LD_INT 1
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 1
24460: NEG
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: LD_INT 1
24475: NEG
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 1
24483: NEG
24484: PUSH
24485: LD_INT 2
24487: NEG
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 0
24495: PUSH
24496: LD_INT 2
24498: NEG
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 1
24506: PUSH
24507: LD_INT 1
24509: NEG
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 2
24517: PUSH
24518: LD_INT 1
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 2
24527: PUSH
24528: LD_INT 2
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 1
24537: PUSH
24538: LD_INT 2
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: LD_INT 0
24547: PUSH
24548: LD_INT 2
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 2
24568: NEG
24569: PUSH
24570: LD_INT 1
24572: NEG
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 2
24580: NEG
24581: PUSH
24582: LD_INT 2
24584: NEG
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 2
24592: NEG
24593: PUSH
24594: LD_INT 3
24596: NEG
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 1
24604: NEG
24605: PUSH
24606: LD_INT 3
24608: NEG
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: LD_INT 3
24619: NEG
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 1
24627: PUSH
24628: LD_INT 2
24630: NEG
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 3
24638: PUSH
24639: LD_INT 2
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 3
24648: PUSH
24649: LD_INT 3
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 2
24658: PUSH
24659: LD_INT 3
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 1
24668: PUSH
24669: LD_INT 3
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 0
24678: PUSH
24679: LD_INT 3
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 1
24688: NEG
24689: PUSH
24690: LD_INT 2
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 3
24699: NEG
24700: PUSH
24701: LD_INT 2
24703: NEG
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 3
24711: NEG
24712: PUSH
24713: LD_INT 3
24715: NEG
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24752: LD_ADDR_VAR 0 43
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 0
24769: PUSH
24770: LD_INT 1
24772: NEG
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: LD_INT 0
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: LD_INT 1
24825: NEG
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 1
24833: NEG
24834: PUSH
24835: LD_INT 2
24837: NEG
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 0
24845: PUSH
24846: LD_INT 2
24848: NEG
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 1
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 2
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 2
24877: PUSH
24878: LD_INT 1
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 1
24887: PUSH
24888: LD_INT 2
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 0
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 1
24907: NEG
24908: PUSH
24909: LD_INT 1
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 2
24918: NEG
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 2
24929: NEG
24930: PUSH
24931: LD_INT 1
24933: NEG
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 1
24941: NEG
24942: PUSH
24943: LD_INT 3
24945: NEG
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: LD_INT 3
24956: NEG
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 1
24964: PUSH
24965: LD_INT 2
24967: NEG
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 2
24975: PUSH
24976: LD_INT 1
24978: NEG
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 3
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 3
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: LD_INT 3
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: LD_INT 3
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 1
25026: NEG
25027: PUSH
25028: LD_INT 2
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 2
25037: NEG
25038: PUSH
25039: LD_INT 1
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 3
25048: NEG
25049: PUSH
25050: LD_INT 0
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 3
25059: NEG
25060: PUSH
25061: LD_INT 1
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25100: LD_ADDR_VAR 0 44
25104: PUSH
25105: LD_INT 0
25107: PUSH
25108: LD_INT 0
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: LD_INT 1
25120: NEG
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: LD_INT 0
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 1
25138: PUSH
25139: LD_INT 1
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 0
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 1
25158: NEG
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 1
25169: NEG
25170: PUSH
25171: LD_INT 1
25173: NEG
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: NEG
25182: PUSH
25183: LD_INT 2
25185: NEG
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: LD_INT 1
25196: NEG
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 2
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 2
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 2
25224: PUSH
25225: LD_INT 2
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 1
25234: PUSH
25235: LD_INT 2
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 1
25244: NEG
25245: PUSH
25246: LD_INT 1
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 2
25255: NEG
25256: PUSH
25257: LD_INT 0
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 2
25266: NEG
25267: PUSH
25268: LD_INT 1
25270: NEG
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 2
25278: NEG
25279: PUSH
25280: LD_INT 2
25282: NEG
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 2
25290: NEG
25291: PUSH
25292: LD_INT 3
25294: NEG
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 2
25302: PUSH
25303: LD_INT 1
25305: NEG
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 3
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 3
25323: PUSH
25324: LD_INT 1
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 3
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 3
25343: PUSH
25344: LD_INT 3
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 2
25353: PUSH
25354: LD_INT 3
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 2
25363: NEG
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 3
25374: NEG
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 3
25385: NEG
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 3
25397: NEG
25398: PUSH
25399: LD_INT 2
25401: NEG
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 3
25409: NEG
25410: PUSH
25411: LD_INT 3
25413: NEG
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25450: LD_ADDR_VAR 0 45
25454: PUSH
25455: LD_INT 0
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: LD_INT 1
25470: NEG
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 1
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 1
25508: NEG
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: LD_INT 1
25523: NEG
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: PUSH
25533: LD_INT 2
25535: NEG
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 0
25543: PUSH
25544: LD_INT 2
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 1
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: LD_INT 1
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 2
25575: PUSH
25576: LD_INT 2
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 1
25585: PUSH
25586: LD_INT 2
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 0
25595: PUSH
25596: LD_INT 2
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 1
25605: NEG
25606: PUSH
25607: LD_INT 1
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 2
25616: NEG
25617: PUSH
25618: LD_INT 1
25620: NEG
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 2
25628: NEG
25629: PUSH
25630: LD_INT 2
25632: NEG
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 2
25640: NEG
25641: PUSH
25642: LD_INT 3
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: NEG
25653: PUSH
25654: LD_INT 3
25656: NEG
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 0
25664: PUSH
25665: LD_INT 3
25667: NEG
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 1
25675: PUSH
25676: LD_INT 2
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 3
25686: PUSH
25687: LD_INT 2
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 3
25696: PUSH
25697: LD_INT 3
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 2
25706: PUSH
25707: LD_INT 3
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: LD_INT 3
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: LD_INT 3
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 1
25736: NEG
25737: PUSH
25738: LD_INT 2
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 3
25747: NEG
25748: PUSH
25749: LD_INT 2
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 3
25759: NEG
25760: PUSH
25761: LD_INT 3
25763: NEG
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25800: LD_ADDR_VAR 0 46
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: LD_INT 1
25820: NEG
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 1
25838: PUSH
25839: LD_INT 1
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: LD_INT 1
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 1
25858: NEG
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: LD_INT 1
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 1
25881: NEG
25882: PUSH
25883: LD_INT 2
25885: NEG
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: LD_INT 2
25896: NEG
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: LD_INT 0
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 2
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: LD_INT 2
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 0
25945: PUSH
25946: LD_INT 2
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 1
25955: NEG
25956: PUSH
25957: LD_INT 1
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 2
25966: NEG
25967: PUSH
25968: LD_INT 0
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 2
25977: NEG
25978: PUSH
25979: LD_INT 1
25981: NEG
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 1
25989: NEG
25990: PUSH
25991: LD_INT 3
25993: NEG
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 0
26001: PUSH
26002: LD_INT 3
26004: NEG
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: LD_INT 2
26015: NEG
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: LD_INT 1
26026: NEG
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 3
26034: PUSH
26035: LD_INT 0
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 3
26044: PUSH
26045: LD_INT 1
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: LD_INT 3
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: LD_INT 3
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: LD_INT 2
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 2
26085: NEG
26086: PUSH
26087: LD_INT 1
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 3
26096: NEG
26097: PUSH
26098: LD_INT 0
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 3
26107: NEG
26108: PUSH
26109: LD_INT 1
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26148: LD_ADDR_VAR 0 47
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: LD_INT 0
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 0
26165: PUSH
26166: LD_INT 1
26168: NEG
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: LD_INT 0
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: PUSH
26187: LD_INT 1
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: LD_INT 1
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: NEG
26218: PUSH
26219: LD_INT 1
26221: NEG
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 1
26229: NEG
26230: PUSH
26231: LD_INT 2
26233: NEG
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 0
26241: PUSH
26242: LD_INT 2
26244: NEG
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 1
26252: PUSH
26253: LD_INT 1
26255: NEG
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 2
26263: NEG
26264: PUSH
26265: LD_INT 1
26267: NEG
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 2
26275: NEG
26276: PUSH
26277: LD_INT 2
26279: NEG
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26299: LD_ADDR_VAR 0 48
26303: PUSH
26304: LD_INT 0
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 0
26316: PUSH
26317: LD_INT 1
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 1
26327: PUSH
26328: LD_INT 0
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: LD_INT 1
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 0
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 1
26357: NEG
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: LD_INT 1
26372: NEG
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 1
26380: NEG
26381: PUSH
26382: LD_INT 2
26384: NEG
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 0
26392: PUSH
26393: LD_INT 2
26395: NEG
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 1
26403: PUSH
26404: LD_INT 1
26406: NEG
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 2
26414: PUSH
26415: LD_INT 0
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 2
26424: PUSH
26425: LD_INT 1
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26446: LD_ADDR_VAR 0 49
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: LD_INT 0
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 0
26463: PUSH
26464: LD_INT 1
26466: NEG
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 1
26484: PUSH
26485: LD_INT 1
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 0
26494: PUSH
26495: LD_INT 1
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 1
26504: NEG
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: LD_INT 1
26530: NEG
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 2
26538: PUSH
26539: LD_INT 0
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 2
26548: PUSH
26549: LD_INT 1
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 2
26558: PUSH
26559: LD_INT 2
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 1
26568: PUSH
26569: LD_INT 2
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26590: LD_ADDR_VAR 0 50
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: LD_INT 1
26610: NEG
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: PUSH
26619: LD_INT 0
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 1
26628: PUSH
26629: LD_INT 1
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: LD_INT 1
26663: NEG
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 2
26671: PUSH
26672: LD_INT 1
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 2
26681: PUSH
26682: LD_INT 2
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 1
26691: PUSH
26692: LD_INT 2
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 0
26701: PUSH
26702: LD_INT 2
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 1
26711: NEG
26712: PUSH
26713: LD_INT 1
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26734: LD_ADDR_VAR 0 51
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: LD_INT 1
26754: NEG
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: LD_INT 0
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 1
26772: PUSH
26773: LD_INT 1
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: LD_INT 1
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: NEG
26804: PUSH
26805: LD_INT 1
26807: NEG
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: LD_INT 2
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 1
26835: NEG
26836: PUSH
26837: LD_INT 1
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 2
26846: NEG
26847: PUSH
26848: LD_INT 0
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 2
26857: NEG
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26881: LD_ADDR_VAR 0 52
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: LD_INT 1
26901: NEG
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: LD_INT 0
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 1
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 0
26929: PUSH
26930: LD_INT 1
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 1
26939: NEG
26940: PUSH
26941: LD_INT 0
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 1
26950: NEG
26951: PUSH
26952: LD_INT 1
26954: NEG
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: LD_INT 2
26966: NEG
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: LD_INT 1
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 2
26985: NEG
26986: PUSH
26987: LD_INT 0
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 2
26996: NEG
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 2
27008: NEG
27009: PUSH
27010: LD_INT 2
27012: NEG
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27032: LD_ADDR_VAR 0 53
27036: PUSH
27037: LD_INT 0
27039: PUSH
27040: LD_INT 0
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: LD_INT 1
27052: NEG
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 1
27060: PUSH
27061: LD_INT 0
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 1
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: LD_INT 1
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 1
27090: NEG
27091: PUSH
27092: LD_INT 0
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: LD_INT 1
27105: NEG
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 1
27113: NEG
27114: PUSH
27115: LD_INT 2
27117: NEG
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: LD_INT 2
27128: NEG
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 1
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 2
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 2
27157: PUSH
27158: LD_INT 1
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 2
27167: PUSH
27168: LD_INT 2
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: LD_INT 2
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 0
27187: PUSH
27188: LD_INT 2
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 1
27197: NEG
27198: PUSH
27199: LD_INT 1
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 2
27208: NEG
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 2
27219: NEG
27220: PUSH
27221: LD_INT 1
27223: NEG
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 2
27231: NEG
27232: PUSH
27233: LD_INT 2
27235: NEG
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27262: LD_ADDR_VAR 0 54
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 0
27279: PUSH
27280: LD_INT 1
27282: NEG
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 1
27290: PUSH
27291: LD_INT 0
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 1
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: LD_INT 1
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 1
27320: NEG
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: LD_INT 1
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: NEG
27344: PUSH
27345: LD_INT 2
27347: NEG
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: LD_INT 2
27358: NEG
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 1
27366: PUSH
27367: LD_INT 1
27369: NEG
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: LD_INT 0
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 2
27387: PUSH
27388: LD_INT 1
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 2
27397: PUSH
27398: LD_INT 2
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: LD_INT 2
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: LD_INT 2
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 1
27427: NEG
27428: PUSH
27429: LD_INT 1
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 2
27438: NEG
27439: PUSH
27440: LD_INT 0
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 2
27449: NEG
27450: PUSH
27451: LD_INT 1
27453: NEG
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 2
27461: NEG
27462: PUSH
27463: LD_INT 2
27465: NEG
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27492: LD_ADDR_VAR 0 55
27496: PUSH
27497: LD_INT 0
27499: PUSH
27500: LD_INT 0
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 0
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 1
27520: PUSH
27521: LD_INT 0
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 1
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 1
27550: NEG
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 1
27561: NEG
27562: PUSH
27563: LD_INT 1
27565: NEG
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 1
27573: NEG
27574: PUSH
27575: LD_INT 2
27577: NEG
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 0
27585: PUSH
27586: LD_INT 2
27588: NEG
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 1
27596: PUSH
27597: LD_INT 1
27599: NEG
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 2
27607: PUSH
27608: LD_INT 0
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 2
27617: PUSH
27618: LD_INT 1
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 2
27627: PUSH
27628: LD_INT 2
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 1
27637: PUSH
27638: LD_INT 2
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 0
27647: PUSH
27648: LD_INT 2
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 1
27657: NEG
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 2
27668: NEG
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 2
27679: NEG
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 2
27691: NEG
27692: PUSH
27693: LD_INT 2
27695: NEG
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27722: LD_ADDR_VAR 0 56
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 1
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: LD_INT 1
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: LD_INT 0
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: LD_INT 1
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: LD_INT 2
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: LD_INT 2
27818: NEG
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 2
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 2
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 2
27857: PUSH
27858: LD_INT 2
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 1
27867: PUSH
27868: LD_INT 2
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 0
27877: PUSH
27878: LD_INT 2
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: LD_INT 1
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 2
27898: NEG
27899: PUSH
27900: LD_INT 0
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 2
27909: NEG
27910: PUSH
27911: LD_INT 1
27913: NEG
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 2
27921: NEG
27922: PUSH
27923: LD_INT 2
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27952: LD_ADDR_VAR 0 57
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: LD_INT 0
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: LD_INT 1
27972: NEG
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 1
27980: PUSH
27981: LD_INT 0
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: LD_INT 1
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: LD_INT 1
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 1
28010: NEG
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 1
28021: NEG
28022: PUSH
28023: LD_INT 1
28025: NEG
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: LD_INT 2
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: LD_INT 2
28048: NEG
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 1
28056: PUSH
28057: LD_INT 1
28059: NEG
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: LD_INT 0
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 2
28087: PUSH
28088: LD_INT 2
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 1
28097: PUSH
28098: LD_INT 2
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 0
28107: PUSH
28108: LD_INT 2
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 1
28117: NEG
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 2
28128: NEG
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 2
28139: NEG
28140: PUSH
28141: LD_INT 1
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 2
28151: NEG
28152: PUSH
28153: LD_INT 2
28155: NEG
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28182: LD_ADDR_VAR 0 58
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: LD_INT 0
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: LD_INT 1
28202: NEG
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 1
28210: PUSH
28211: LD_INT 0
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 1
28220: PUSH
28221: LD_INT 1
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 1
28240: NEG
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 1
28251: NEG
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 1
28263: NEG
28264: PUSH
28265: LD_INT 2
28267: NEG
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 0
28275: PUSH
28276: LD_INT 2
28278: NEG
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 1
28286: PUSH
28287: LD_INT 1
28289: NEG
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 2
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 2
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 2
28317: PUSH
28318: LD_INT 2
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 1
28327: PUSH
28328: LD_INT 2
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 0
28337: PUSH
28338: LD_INT 2
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 1
28347: NEG
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 2
28358: NEG
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 2
28369: NEG
28370: PUSH
28371: LD_INT 1
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 2
28381: NEG
28382: PUSH
28383: LD_INT 2
28385: NEG
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28412: LD_ADDR_VAR 0 59
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: LD_INT 1
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: LD_INT 0
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: NEG
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28500: LD_ADDR_VAR 0 60
28504: PUSH
28505: LD_INT 0
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 0
28517: PUSH
28518: LD_INT 1
28520: NEG
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 1
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 1
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 1
28558: NEG
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28588: LD_ADDR_VAR 0 61
28592: PUSH
28593: LD_INT 0
28595: PUSH
28596: LD_INT 0
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: LD_INT 1
28608: NEG
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 1
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: LD_INT 1
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 1
28657: NEG
28658: PUSH
28659: LD_INT 1
28661: NEG
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28676: LD_ADDR_VAR 0 62
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 0
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 1
28734: NEG
28735: PUSH
28736: LD_INT 0
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 1
28745: NEG
28746: PUSH
28747: LD_INT 1
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28764: LD_ADDR_VAR 0 63
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: LD_INT 0
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 0
28781: PUSH
28782: LD_INT 1
28784: NEG
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: LD_INT 0
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 1
28802: PUSH
28803: LD_INT 1
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: LD_INT 1
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 1
28822: NEG
28823: PUSH
28824: LD_INT 0
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 1
28833: NEG
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28852: LD_ADDR_VAR 0 64
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 0
28869: PUSH
28870: LD_INT 1
28872: NEG
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: PUSH
28881: LD_INT 0
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 1
28910: NEG
28911: PUSH
28912: LD_INT 0
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: NEG
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: ST_TO_ADDR
// end ; 1 :
28940: GO 34837
28942: LD_INT 1
28944: DOUBLE
28945: EQUAL
28946: IFTRUE 28950
28948: GO 31573
28950: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28951: LD_ADDR_VAR 0 11
28955: PUSH
28956: LD_INT 1
28958: NEG
28959: PUSH
28960: LD_INT 3
28962: NEG
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 0
28970: PUSH
28971: LD_INT 3
28973: NEG
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 1
28981: PUSH
28982: LD_INT 2
28984: NEG
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: LIST
28994: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28995: LD_ADDR_VAR 0 12
28999: PUSH
29000: LD_INT 2
29002: PUSH
29003: LD_INT 1
29005: NEG
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 3
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 3
29023: PUSH
29024: LD_INT 1
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: LIST
29035: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29036: LD_ADDR_VAR 0 13
29040: PUSH
29041: LD_INT 3
29043: PUSH
29044: LD_INT 2
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 3
29053: PUSH
29054: LD_INT 3
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 2
29063: PUSH
29064: LD_INT 3
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: LIST
29075: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29076: LD_ADDR_VAR 0 14
29080: PUSH
29081: LD_INT 1
29083: PUSH
29084: LD_INT 3
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: LD_INT 3
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 1
29103: NEG
29104: PUSH
29105: LD_INT 2
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: LIST
29116: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29117: LD_ADDR_VAR 0 15
29121: PUSH
29122: LD_INT 2
29124: NEG
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 3
29135: NEG
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 3
29146: NEG
29147: PUSH
29148: LD_INT 1
29150: NEG
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: LIST
29160: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29161: LD_ADDR_VAR 0 16
29165: PUSH
29166: LD_INT 2
29168: NEG
29169: PUSH
29170: LD_INT 3
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 3
29180: NEG
29181: PUSH
29182: LD_INT 2
29184: NEG
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 3
29192: NEG
29193: PUSH
29194: LD_INT 3
29196: NEG
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: LIST
29206: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29207: LD_ADDR_VAR 0 17
29211: PUSH
29212: LD_INT 1
29214: NEG
29215: PUSH
29216: LD_INT 3
29218: NEG
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 0
29226: PUSH
29227: LD_INT 3
29229: NEG
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 1
29237: PUSH
29238: LD_INT 2
29240: NEG
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: LIST
29250: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29251: LD_ADDR_VAR 0 18
29255: PUSH
29256: LD_INT 2
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 3
29269: PUSH
29270: LD_INT 0
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 3
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: LIST
29291: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29292: LD_ADDR_VAR 0 19
29296: PUSH
29297: LD_INT 3
29299: PUSH
29300: LD_INT 2
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 3
29309: PUSH
29310: LD_INT 3
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: LD_INT 3
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: LIST
29331: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29332: LD_ADDR_VAR 0 20
29336: PUSH
29337: LD_INT 1
29339: PUSH
29340: LD_INT 3
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 0
29349: PUSH
29350: LD_INT 3
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 1
29359: NEG
29360: PUSH
29361: LD_INT 2
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: LIST
29372: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29373: LD_ADDR_VAR 0 21
29377: PUSH
29378: LD_INT 2
29380: NEG
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 3
29391: NEG
29392: PUSH
29393: LD_INT 0
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 3
29402: NEG
29403: PUSH
29404: LD_INT 1
29406: NEG
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: LIST
29416: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29417: LD_ADDR_VAR 0 22
29421: PUSH
29422: LD_INT 2
29424: NEG
29425: PUSH
29426: LD_INT 3
29428: NEG
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 3
29436: NEG
29437: PUSH
29438: LD_INT 2
29440: NEG
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 3
29448: NEG
29449: PUSH
29450: LD_INT 3
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: LIST
29462: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29463: LD_ADDR_VAR 0 23
29467: PUSH
29468: LD_INT 0
29470: PUSH
29471: LD_INT 3
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: LD_INT 4
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: LD_INT 3
29496: NEG
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29507: LD_ADDR_VAR 0 24
29511: PUSH
29512: LD_INT 3
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 3
29524: PUSH
29525: LD_INT 1
29527: NEG
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 4
29535: PUSH
29536: LD_INT 1
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: LIST
29547: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29548: LD_ADDR_VAR 0 25
29552: PUSH
29553: LD_INT 3
29555: PUSH
29556: LD_INT 3
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 4
29565: PUSH
29566: LD_INT 3
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 3
29575: PUSH
29576: LD_INT 4
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: LIST
29587: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29588: LD_ADDR_VAR 0 26
29592: PUSH
29593: LD_INT 0
29595: PUSH
29596: LD_INT 3
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 1
29605: PUSH
29606: LD_INT 4
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 1
29615: NEG
29616: PUSH
29617: LD_INT 3
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29629: LD_ADDR_VAR 0 27
29633: PUSH
29634: LD_INT 3
29636: NEG
29637: PUSH
29638: LD_INT 0
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 3
29647: NEG
29648: PUSH
29649: LD_INT 1
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 4
29658: NEG
29659: PUSH
29660: LD_INT 1
29662: NEG
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: LIST
29672: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29673: LD_ADDR_VAR 0 28
29677: PUSH
29678: LD_INT 3
29680: NEG
29681: PUSH
29682: LD_INT 3
29684: NEG
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 3
29692: NEG
29693: PUSH
29694: LD_INT 4
29696: NEG
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 4
29704: NEG
29705: PUSH
29706: LD_INT 3
29708: NEG
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: LIST
29718: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29719: LD_ADDR_VAR 0 29
29723: PUSH
29724: LD_INT 1
29726: NEG
29727: PUSH
29728: LD_INT 3
29730: NEG
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 0
29738: PUSH
29739: LD_INT 3
29741: NEG
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 1
29749: PUSH
29750: LD_INT 2
29752: NEG
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 1
29760: NEG
29761: PUSH
29762: LD_INT 4
29764: NEG
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 0
29772: PUSH
29773: LD_INT 4
29775: NEG
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 1
29783: PUSH
29784: LD_INT 3
29786: NEG
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: NEG
29795: PUSH
29796: LD_INT 5
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 0
29806: PUSH
29807: LD_INT 5
29809: NEG
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: LD_INT 4
29820: NEG
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 1
29828: NEG
29829: PUSH
29830: LD_INT 6
29832: NEG
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: LD_INT 6
29843: NEG
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 1
29851: PUSH
29852: LD_INT 5
29854: NEG
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29874: LD_ADDR_VAR 0 30
29878: PUSH
29879: LD_INT 2
29881: PUSH
29882: LD_INT 1
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: LD_INT 0
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 3
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 3
29912: PUSH
29913: LD_INT 1
29915: NEG
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 4
29923: PUSH
29924: LD_INT 0
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 4
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 4
29943: PUSH
29944: LD_INT 1
29946: NEG
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 5
29954: PUSH
29955: LD_INT 0
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 5
29964: PUSH
29965: LD_INT 1
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 5
29974: PUSH
29975: LD_INT 1
29977: NEG
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 6
29985: PUSH
29986: LD_INT 0
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 6
29995: PUSH
29996: LD_INT 1
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30017: LD_ADDR_VAR 0 31
30021: PUSH
30022: LD_INT 3
30024: PUSH
30025: LD_INT 2
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 3
30034: PUSH
30035: LD_INT 3
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 2
30044: PUSH
30045: LD_INT 3
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 4
30054: PUSH
30055: LD_INT 3
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 4
30064: PUSH
30065: LD_INT 4
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 3
30074: PUSH
30075: LD_INT 4
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 5
30084: PUSH
30085: LD_INT 4
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 5
30094: PUSH
30095: LD_INT 5
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 4
30104: PUSH
30105: LD_INT 5
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 6
30114: PUSH
30115: LD_INT 5
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 6
30124: PUSH
30125: LD_INT 6
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 5
30134: PUSH
30135: LD_INT 6
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30156: LD_ADDR_VAR 0 32
30160: PUSH
30161: LD_INT 1
30163: PUSH
30164: LD_INT 3
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 0
30173: PUSH
30174: LD_INT 3
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 1
30183: NEG
30184: PUSH
30185: LD_INT 2
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 1
30194: PUSH
30195: LD_INT 4
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 0
30204: PUSH
30205: LD_INT 4
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 1
30214: NEG
30215: PUSH
30216: LD_INT 3
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: LD_INT 5
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 0
30235: PUSH
30236: LD_INT 5
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 1
30245: NEG
30246: PUSH
30247: LD_INT 4
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: LD_INT 6
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 0
30266: PUSH
30267: LD_INT 6
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: LD_INT 5
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30299: LD_ADDR_VAR 0 33
30303: PUSH
30304: LD_INT 2
30306: NEG
30307: PUSH
30308: LD_INT 1
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 3
30317: NEG
30318: PUSH
30319: LD_INT 0
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 3
30328: NEG
30329: PUSH
30330: LD_INT 1
30332: NEG
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 3
30340: NEG
30341: PUSH
30342: LD_INT 1
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 4
30351: NEG
30352: PUSH
30353: LD_INT 0
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 4
30362: NEG
30363: PUSH
30364: LD_INT 1
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 4
30374: NEG
30375: PUSH
30376: LD_INT 1
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 5
30385: NEG
30386: PUSH
30387: LD_INT 0
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 5
30396: NEG
30397: PUSH
30398: LD_INT 1
30400: NEG
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 5
30408: NEG
30409: PUSH
30410: LD_INT 1
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 6
30419: NEG
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 6
30430: NEG
30431: PUSH
30432: LD_INT 1
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30454: LD_ADDR_VAR 0 34
30458: PUSH
30459: LD_INT 2
30461: NEG
30462: PUSH
30463: LD_INT 3
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 3
30473: NEG
30474: PUSH
30475: LD_INT 2
30477: NEG
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 3
30485: NEG
30486: PUSH
30487: LD_INT 3
30489: NEG
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 3
30497: NEG
30498: PUSH
30499: LD_INT 4
30501: NEG
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 4
30509: NEG
30510: PUSH
30511: LD_INT 3
30513: NEG
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 4
30521: NEG
30522: PUSH
30523: LD_INT 4
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 4
30533: NEG
30534: PUSH
30535: LD_INT 5
30537: NEG
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 5
30545: NEG
30546: PUSH
30547: LD_INT 4
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 5
30557: NEG
30558: PUSH
30559: LD_INT 5
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 5
30569: NEG
30570: PUSH
30571: LD_INT 6
30573: NEG
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 6
30581: NEG
30582: PUSH
30583: LD_INT 5
30585: NEG
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 6
30593: NEG
30594: PUSH
30595: LD_INT 6
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30617: LD_ADDR_VAR 0 41
30621: PUSH
30622: LD_INT 0
30624: PUSH
30625: LD_INT 2
30627: NEG
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 1
30635: NEG
30636: PUSH
30637: LD_INT 3
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: LD_INT 2
30650: NEG
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: LIST
30660: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30661: LD_ADDR_VAR 0 42
30665: PUSH
30666: LD_INT 2
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: LD_INT 1
30681: NEG
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 3
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: LIST
30701: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30702: LD_ADDR_VAR 0 43
30706: PUSH
30707: LD_INT 2
30709: PUSH
30710: LD_INT 2
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 3
30719: PUSH
30720: LD_INT 2
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 2
30729: PUSH
30730: LD_INT 3
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: LIST
30741: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30742: LD_ADDR_VAR 0 44
30746: PUSH
30747: LD_INT 0
30749: PUSH
30750: LD_INT 2
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 1
30759: PUSH
30760: LD_INT 3
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 1
30769: NEG
30770: PUSH
30771: LD_INT 2
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: LIST
30782: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30783: LD_ADDR_VAR 0 45
30787: PUSH
30788: LD_INT 2
30790: NEG
30791: PUSH
30792: LD_INT 0
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 2
30801: NEG
30802: PUSH
30803: LD_INT 1
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 3
30812: NEG
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: LIST
30826: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30827: LD_ADDR_VAR 0 46
30831: PUSH
30832: LD_INT 2
30834: NEG
30835: PUSH
30836: LD_INT 2
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 2
30846: NEG
30847: PUSH
30848: LD_INT 3
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 3
30858: NEG
30859: PUSH
30860: LD_INT 2
30862: NEG
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: LIST
30872: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30873: LD_ADDR_VAR 0 47
30877: PUSH
30878: LD_INT 2
30880: NEG
30881: PUSH
30882: LD_INT 3
30884: NEG
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 1
30892: NEG
30893: PUSH
30894: LD_INT 3
30896: NEG
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30906: LD_ADDR_VAR 0 48
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: LD_INT 2
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30937: LD_ADDR_VAR 0 49
30941: PUSH
30942: LD_INT 3
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 3
30954: PUSH
30955: LD_INT 2
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30966: LD_ADDR_VAR 0 50
30970: PUSH
30971: LD_INT 2
30973: PUSH
30974: LD_INT 3
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 1
30983: PUSH
30984: LD_INT 3
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30995: LD_ADDR_VAR 0 51
30999: PUSH
31000: LD_INT 1
31002: NEG
31003: PUSH
31004: LD_INT 2
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 2
31013: NEG
31014: PUSH
31015: LD_INT 1
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31026: LD_ADDR_VAR 0 52
31030: PUSH
31031: LD_INT 3
31033: NEG
31034: PUSH
31035: LD_INT 1
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 3
31045: NEG
31046: PUSH
31047: LD_INT 2
31049: NEG
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31059: LD_ADDR_VAR 0 53
31063: PUSH
31064: LD_INT 1
31066: NEG
31067: PUSH
31068: LD_INT 3
31070: NEG
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 0
31078: PUSH
31079: LD_INT 3
31081: NEG
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: LD_INT 2
31092: NEG
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: LIST
31102: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31103: LD_ADDR_VAR 0 54
31107: PUSH
31108: LD_INT 2
31110: PUSH
31111: LD_INT 1
31113: NEG
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 3
31121: PUSH
31122: LD_INT 0
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 3
31131: PUSH
31132: LD_INT 1
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: LIST
31143: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31144: LD_ADDR_VAR 0 55
31148: PUSH
31149: LD_INT 3
31151: PUSH
31152: LD_INT 2
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 3
31161: PUSH
31162: LD_INT 3
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 2
31171: PUSH
31172: LD_INT 3
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: LIST
31183: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31184: LD_ADDR_VAR 0 56
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: LD_INT 3
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: LD_INT 3
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 1
31211: NEG
31212: PUSH
31213: LD_INT 2
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: LIST
31224: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31225: LD_ADDR_VAR 0 57
31229: PUSH
31230: LD_INT 2
31232: NEG
31233: PUSH
31234: LD_INT 1
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 3
31243: NEG
31244: PUSH
31245: LD_INT 0
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 3
31254: NEG
31255: PUSH
31256: LD_INT 1
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31269: LD_ADDR_VAR 0 58
31273: PUSH
31274: LD_INT 2
31276: NEG
31277: PUSH
31278: LD_INT 3
31280: NEG
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 3
31288: NEG
31289: PUSH
31290: LD_INT 2
31292: NEG
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 3
31300: NEG
31301: PUSH
31302: LD_INT 3
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: LIST
31314: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31315: LD_ADDR_VAR 0 59
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: LD_INT 2
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: LD_INT 2
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: LD_INT 1
31348: NEG
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: LIST
31358: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31359: LD_ADDR_VAR 0 60
31363: PUSH
31364: LD_INT 1
31366: PUSH
31367: LD_INT 1
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 2
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 2
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: LIST
31399: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31400: LD_ADDR_VAR 0 61
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 2
31417: PUSH
31418: LD_INT 2
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: LD_INT 2
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: LIST
31439: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31440: LD_ADDR_VAR 0 62
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: LD_INT 2
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 0
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 1
31467: NEG
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: LIST
31480: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31481: LD_ADDR_VAR 0 63
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 2
31499: NEG
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 2
31510: NEG
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: LIST
31524: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31525: LD_ADDR_VAR 0 64
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: LD_INT 2
31536: NEG
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 2
31544: NEG
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 2
31556: NEG
31557: PUSH
31558: LD_INT 2
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: LIST
31570: ST_TO_ADDR
// end ; 2 :
31571: GO 34837
31573: LD_INT 2
31575: DOUBLE
31576: EQUAL
31577: IFTRUE 31581
31579: GO 34836
31581: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31582: LD_ADDR_VAR 0 29
31586: PUSH
31587: LD_INT 4
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 4
31599: PUSH
31600: LD_INT 1
31602: NEG
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 5
31610: PUSH
31611: LD_INT 0
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 5
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 4
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 3
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 3
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 3
31661: PUSH
31662: LD_INT 2
31664: NEG
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 5
31672: PUSH
31673: LD_INT 2
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 3
31682: PUSH
31683: LD_INT 3
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 3
31692: PUSH
31693: LD_INT 2
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 4
31702: PUSH
31703: LD_INT 3
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 4
31712: PUSH
31713: LD_INT 4
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 3
31722: PUSH
31723: LD_INT 4
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 2
31732: PUSH
31733: LD_INT 3
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: LD_INT 2
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 4
31752: PUSH
31753: LD_INT 2
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 2
31762: PUSH
31763: LD_INT 4
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: LD_INT 4
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 0
31782: PUSH
31783: LD_INT 3
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: LD_INT 4
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: LD_INT 5
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 0
31812: PUSH
31813: LD_INT 5
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: LD_INT 4
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 1
31833: NEG
31834: PUSH
31835: LD_INT 3
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 2
31844: PUSH
31845: LD_INT 5
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 2
31854: NEG
31855: PUSH
31856: LD_INT 3
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 3
31865: NEG
31866: PUSH
31867: LD_INT 0
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 3
31876: NEG
31877: PUSH
31878: LD_INT 1
31880: NEG
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 2
31888: NEG
31889: PUSH
31890: LD_INT 0
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: LD_INT 1
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 3
31910: NEG
31911: PUSH
31912: LD_INT 1
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 4
31921: NEG
31922: PUSH
31923: LD_INT 0
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 4
31932: NEG
31933: PUSH
31934: LD_INT 1
31936: NEG
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 4
31944: NEG
31945: PUSH
31946: LD_INT 2
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 2
31956: NEG
31957: PUSH
31958: LD_INT 2
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 4
31967: NEG
31968: PUSH
31969: LD_INT 4
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 4
31979: NEG
31980: PUSH
31981: LD_INT 5
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 3
31991: NEG
31992: PUSH
31993: LD_INT 4
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 3
32003: NEG
32004: PUSH
32005: LD_INT 3
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 4
32015: NEG
32016: PUSH
32017: LD_INT 3
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 5
32027: NEG
32028: PUSH
32029: LD_INT 4
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 5
32039: NEG
32040: PUSH
32041: LD_INT 5
32043: NEG
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 3
32051: NEG
32052: PUSH
32053: LD_INT 5
32055: NEG
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 5
32063: NEG
32064: PUSH
32065: LD_INT 3
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32120: LD_ADDR_VAR 0 30
32124: PUSH
32125: LD_INT 4
32127: PUSH
32128: LD_INT 4
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 4
32137: PUSH
32138: LD_INT 3
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 5
32147: PUSH
32148: LD_INT 4
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 5
32157: PUSH
32158: LD_INT 5
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 4
32167: PUSH
32168: LD_INT 5
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 3
32177: PUSH
32178: LD_INT 4
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 3
32187: PUSH
32188: LD_INT 3
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 5
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 3
32207: PUSH
32208: LD_INT 5
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: LD_INT 3
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: LD_INT 2
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: LD_INT 3
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: LD_INT 4
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 0
32257: PUSH
32258: LD_INT 4
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 1
32267: NEG
32268: PUSH
32269: LD_INT 3
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 1
32278: NEG
32279: PUSH
32280: LD_INT 2
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: LD_INT 4
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 2
32299: NEG
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 4
32310: NEG
32311: PUSH
32312: LD_INT 0
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 4
32321: NEG
32322: PUSH
32323: LD_INT 1
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 3
32333: NEG
32334: PUSH
32335: LD_INT 0
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 3
32344: NEG
32345: PUSH
32346: LD_INT 1
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 4
32355: NEG
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 5
32366: NEG
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 5
32377: NEG
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 5
32389: NEG
32390: PUSH
32391: LD_INT 2
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 3
32401: NEG
32402: PUSH
32403: LD_INT 2
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 3
32412: NEG
32413: PUSH
32414: LD_INT 3
32416: NEG
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 3
32424: NEG
32425: PUSH
32426: LD_INT 4
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 2
32436: NEG
32437: PUSH
32438: LD_INT 3
32440: NEG
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 2
32448: NEG
32449: PUSH
32450: LD_INT 2
32452: NEG
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 3
32460: NEG
32461: PUSH
32462: LD_INT 2
32464: NEG
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 4
32472: NEG
32473: PUSH
32474: LD_INT 3
32476: NEG
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 4
32484: NEG
32485: PUSH
32486: LD_INT 4
32488: NEG
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 2
32496: NEG
32497: PUSH
32498: LD_INT 4
32500: NEG
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 4
32508: NEG
32509: PUSH
32510: LD_INT 2
32512: NEG
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 0
32520: PUSH
32521: LD_INT 4
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: LD_INT 5
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 1
32542: PUSH
32543: LD_INT 4
32545: NEG
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 1
32553: PUSH
32554: LD_INT 3
32556: NEG
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 0
32564: PUSH
32565: LD_INT 3
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 1
32575: NEG
32576: PUSH
32577: LD_INT 4
32579: NEG
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 1
32587: NEG
32588: PUSH
32589: LD_INT 5
32591: NEG
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 2
32599: PUSH
32600: LD_INT 3
32602: NEG
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 2
32610: NEG
32611: PUSH
32612: LD_INT 5
32614: NEG
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32667: LD_ADDR_VAR 0 31
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: LD_INT 4
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: LD_INT 3
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 4
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: LD_INT 5
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 0
32714: PUSH
32715: LD_INT 5
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: LD_INT 4
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: LD_INT 3
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 2
32746: PUSH
32747: LD_INT 5
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 2
32756: NEG
32757: PUSH
32758: LD_INT 3
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 3
32767: NEG
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 3
32778: NEG
32779: PUSH
32780: LD_INT 1
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 2
32790: NEG
32791: PUSH
32792: LD_INT 0
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 2
32801: NEG
32802: PUSH
32803: LD_INT 1
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 3
32812: NEG
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 4
32823: NEG
32824: PUSH
32825: LD_INT 0
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 4
32834: NEG
32835: PUSH
32836: LD_INT 1
32838: NEG
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 4
32846: NEG
32847: PUSH
32848: LD_INT 2
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 2
32858: NEG
32859: PUSH
32860: LD_INT 2
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 4
32869: NEG
32870: PUSH
32871: LD_INT 4
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 4
32881: NEG
32882: PUSH
32883: LD_INT 5
32885: NEG
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 3
32893: NEG
32894: PUSH
32895: LD_INT 4
32897: NEG
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 3
32905: NEG
32906: PUSH
32907: LD_INT 3
32909: NEG
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 4
32917: NEG
32918: PUSH
32919: LD_INT 3
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 5
32929: NEG
32930: PUSH
32931: LD_INT 4
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 5
32941: NEG
32942: PUSH
32943: LD_INT 5
32945: NEG
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 3
32953: NEG
32954: PUSH
32955: LD_INT 5
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 5
32965: NEG
32966: PUSH
32967: LD_INT 3
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 0
32977: PUSH
32978: LD_INT 3
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: LD_INT 4
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: PUSH
33000: LD_INT 3
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: LD_INT 2
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 0
33021: PUSH
33022: LD_INT 2
33024: NEG
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: LD_INT 3
33036: NEG
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 1
33044: NEG
33045: PUSH
33046: LD_INT 4
33048: NEG
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: LD_INT 2
33059: NEG
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 2
33067: NEG
33068: PUSH
33069: LD_INT 4
33071: NEG
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 4
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 4
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 5
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 5
33110: PUSH
33111: LD_INT 1
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 4
33120: PUSH
33121: LD_INT 1
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 3
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 3
33140: PUSH
33141: LD_INT 1
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 3
33151: PUSH
33152: LD_INT 2
33154: NEG
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 5
33162: PUSH
33163: LD_INT 2
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33217: LD_ADDR_VAR 0 32
33221: PUSH
33222: LD_INT 4
33224: NEG
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 4
33235: NEG
33236: PUSH
33237: LD_INT 1
33239: NEG
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 3
33247: NEG
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 3
33258: NEG
33259: PUSH
33260: LD_INT 1
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 4
33269: NEG
33270: PUSH
33271: LD_INT 1
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 5
33280: NEG
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 5
33291: NEG
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 5
33303: NEG
33304: PUSH
33305: LD_INT 2
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 3
33315: NEG
33316: PUSH
33317: LD_INT 2
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 3
33326: NEG
33327: PUSH
33328: LD_INT 3
33330: NEG
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 3
33338: NEG
33339: PUSH
33340: LD_INT 4
33342: NEG
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 2
33350: NEG
33351: PUSH
33352: LD_INT 3
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 2
33362: NEG
33363: PUSH
33364: LD_INT 2
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 3
33374: NEG
33375: PUSH
33376: LD_INT 2
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 4
33386: NEG
33387: PUSH
33388: LD_INT 3
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 4
33398: NEG
33399: PUSH
33400: LD_INT 4
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: LD_INT 4
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 4
33422: NEG
33423: PUSH
33424: LD_INT 2
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 0
33434: PUSH
33435: LD_INT 4
33437: NEG
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: LD_INT 5
33448: NEG
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: LD_INT 4
33459: NEG
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 1
33467: PUSH
33468: LD_INT 3
33470: NEG
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 0
33478: PUSH
33479: LD_INT 3
33481: NEG
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 1
33489: NEG
33490: PUSH
33491: LD_INT 4
33493: NEG
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 1
33501: NEG
33502: PUSH
33503: LD_INT 5
33505: NEG
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 2
33513: PUSH
33514: LD_INT 3
33516: NEG
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 2
33524: NEG
33525: PUSH
33526: LD_INT 5
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 3
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 3
33546: PUSH
33547: LD_INT 1
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 4
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 4
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 3
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 2
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 2
33597: PUSH
33598: LD_INT 1
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: LD_INT 2
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 4
33619: PUSH
33620: LD_INT 2
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 4
33629: PUSH
33630: LD_INT 4
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 4
33639: PUSH
33640: LD_INT 3
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 5
33649: PUSH
33650: LD_INT 4
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 5
33659: PUSH
33660: LD_INT 5
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 4
33669: PUSH
33670: LD_INT 5
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 3
33679: PUSH
33680: LD_INT 4
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 3
33689: PUSH
33690: LD_INT 3
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 5
33699: PUSH
33700: LD_INT 3
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 3
33709: PUSH
33710: LD_INT 5
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33764: LD_ADDR_VAR 0 33
33768: PUSH
33769: LD_INT 4
33771: NEG
33772: PUSH
33773: LD_INT 4
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 4
33783: NEG
33784: PUSH
33785: LD_INT 5
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 3
33795: NEG
33796: PUSH
33797: LD_INT 4
33799: NEG
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 3
33807: NEG
33808: PUSH
33809: LD_INT 3
33811: NEG
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 4
33819: NEG
33820: PUSH
33821: LD_INT 3
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 5
33831: NEG
33832: PUSH
33833: LD_INT 4
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 5
33843: NEG
33844: PUSH
33845: LD_INT 5
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 3
33855: NEG
33856: PUSH
33857: LD_INT 5
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 5
33867: NEG
33868: PUSH
33869: LD_INT 3
33871: NEG
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 0
33879: PUSH
33880: LD_INT 3
33882: NEG
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: LD_INT 4
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: LD_INT 3
33904: NEG
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: LD_INT 2
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: LD_INT 2
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: PUSH
33936: LD_INT 3
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 1
33946: NEG
33947: PUSH
33948: LD_INT 4
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 2
33958: PUSH
33959: LD_INT 2
33961: NEG
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 2
33969: NEG
33970: PUSH
33971: LD_INT 4
33973: NEG
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 4
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 4
33991: PUSH
33992: LD_INT 1
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 5
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 5
34012: PUSH
34013: LD_INT 1
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 4
34022: PUSH
34023: LD_INT 1
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 3
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 3
34042: PUSH
34043: LD_INT 1
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 3
34053: PUSH
34054: LD_INT 2
34056: NEG
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 5
34064: PUSH
34065: LD_INT 2
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 3
34074: PUSH
34075: LD_INT 3
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 3
34084: PUSH
34085: LD_INT 2
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 4
34094: PUSH
34095: LD_INT 3
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 4
34104: PUSH
34105: LD_INT 4
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 3
34114: PUSH
34115: LD_INT 4
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: PUSH
34125: LD_INT 3
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: LD_INT 2
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 4
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 2
34154: PUSH
34155: LD_INT 4
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 0
34164: PUSH
34165: LD_INT 4
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: LD_INT 3
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: LD_INT 4
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: LD_INT 5
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: LD_INT 5
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 1
34214: NEG
34215: PUSH
34216: LD_INT 4
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 1
34225: NEG
34226: PUSH
34227: LD_INT 3
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 2
34236: PUSH
34237: LD_INT 5
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 2
34246: NEG
34247: PUSH
34248: LD_INT 3
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34302: LD_ADDR_VAR 0 34
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: LD_INT 4
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 0
34320: PUSH
34321: LD_INT 5
34323: NEG
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 1
34331: PUSH
34332: LD_INT 4
34334: NEG
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 1
34342: PUSH
34343: LD_INT 3
34345: NEG
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 0
34353: PUSH
34354: LD_INT 3
34356: NEG
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: NEG
34365: PUSH
34366: LD_INT 4
34368: NEG
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 1
34376: NEG
34377: PUSH
34378: LD_INT 5
34380: NEG
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: LD_INT 3
34391: NEG
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 2
34399: NEG
34400: PUSH
34401: LD_INT 5
34403: NEG
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 3
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 3
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 4
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 4
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 3
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: LD_INT 0
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 2
34472: PUSH
34473: LD_INT 1
34475: NEG
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: LD_INT 2
34486: NEG
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 4
34494: PUSH
34495: LD_INT 2
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 4
34504: PUSH
34505: LD_INT 4
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 4
34514: PUSH
34515: LD_INT 3
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 5
34524: PUSH
34525: LD_INT 4
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 5
34534: PUSH
34535: LD_INT 5
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 4
34544: PUSH
34545: LD_INT 5
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 3
34554: PUSH
34555: LD_INT 4
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 3
34564: PUSH
34565: LD_INT 3
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 5
34574: PUSH
34575: LD_INT 3
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 3
34584: PUSH
34585: LD_INT 5
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 0
34594: PUSH
34595: LD_INT 3
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 0
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: LD_INT 3
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 1
34624: PUSH
34625: LD_INT 4
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: LD_INT 4
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: NEG
34645: PUSH
34646: LD_INT 3
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 2
34666: PUSH
34667: LD_INT 4
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 2
34676: NEG
34677: PUSH
34678: LD_INT 2
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 4
34687: NEG
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 4
34698: NEG
34699: PUSH
34700: LD_INT 1
34702: NEG
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 3
34710: NEG
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 3
34721: NEG
34722: PUSH
34723: LD_INT 1
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 4
34732: NEG
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 5
34743: NEG
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 5
34754: NEG
34755: PUSH
34756: LD_INT 1
34758: NEG
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 5
34766: NEG
34767: PUSH
34768: LD_INT 2
34770: NEG
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 3
34778: NEG
34779: PUSH
34780: LD_INT 2
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: ST_TO_ADDR
// end ; end ;
34834: GO 34837
34836: POP
// case btype of b_depot , b_warehouse :
34837: LD_VAR 0 1
34841: PUSH
34842: LD_INT 0
34844: DOUBLE
34845: EQUAL
34846: IFTRUE 34856
34848: LD_INT 1
34850: DOUBLE
34851: EQUAL
34852: IFTRUE 34856
34854: GO 35057
34856: POP
// case nation of nation_american :
34857: LD_VAR 0 5
34861: PUSH
34862: LD_INT 1
34864: DOUBLE
34865: EQUAL
34866: IFTRUE 34870
34868: GO 34926
34870: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34871: LD_ADDR_VAR 0 9
34875: PUSH
34876: LD_VAR 0 11
34880: PUSH
34881: LD_VAR 0 12
34885: PUSH
34886: LD_VAR 0 13
34890: PUSH
34891: LD_VAR 0 14
34895: PUSH
34896: LD_VAR 0 15
34900: PUSH
34901: LD_VAR 0 16
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: PUSH
34914: LD_VAR 0 4
34918: PUSH
34919: LD_INT 1
34921: PLUS
34922: ARRAY
34923: ST_TO_ADDR
34924: GO 35055
34926: LD_INT 2
34928: DOUBLE
34929: EQUAL
34930: IFTRUE 34934
34932: GO 34990
34934: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34935: LD_ADDR_VAR 0 9
34939: PUSH
34940: LD_VAR 0 17
34944: PUSH
34945: LD_VAR 0 18
34949: PUSH
34950: LD_VAR 0 19
34954: PUSH
34955: LD_VAR 0 20
34959: PUSH
34960: LD_VAR 0 21
34964: PUSH
34965: LD_VAR 0 22
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: PUSH
34978: LD_VAR 0 4
34982: PUSH
34983: LD_INT 1
34985: PLUS
34986: ARRAY
34987: ST_TO_ADDR
34988: GO 35055
34990: LD_INT 3
34992: DOUBLE
34993: EQUAL
34994: IFTRUE 34998
34996: GO 35054
34998: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34999: LD_ADDR_VAR 0 9
35003: PUSH
35004: LD_VAR 0 23
35008: PUSH
35009: LD_VAR 0 24
35013: PUSH
35014: LD_VAR 0 25
35018: PUSH
35019: LD_VAR 0 26
35023: PUSH
35024: LD_VAR 0 27
35028: PUSH
35029: LD_VAR 0 28
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: PUSH
35042: LD_VAR 0 4
35046: PUSH
35047: LD_INT 1
35049: PLUS
35050: ARRAY
35051: ST_TO_ADDR
35052: GO 35055
35054: POP
35055: GO 35610
35057: LD_INT 2
35059: DOUBLE
35060: EQUAL
35061: IFTRUE 35071
35063: LD_INT 3
35065: DOUBLE
35066: EQUAL
35067: IFTRUE 35071
35069: GO 35127
35071: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35072: LD_ADDR_VAR 0 9
35076: PUSH
35077: LD_VAR 0 29
35081: PUSH
35082: LD_VAR 0 30
35086: PUSH
35087: LD_VAR 0 31
35091: PUSH
35092: LD_VAR 0 32
35096: PUSH
35097: LD_VAR 0 33
35101: PUSH
35102: LD_VAR 0 34
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: PUSH
35115: LD_VAR 0 4
35119: PUSH
35120: LD_INT 1
35122: PLUS
35123: ARRAY
35124: ST_TO_ADDR
35125: GO 35610
35127: LD_INT 16
35129: DOUBLE
35130: EQUAL
35131: IFTRUE 35189
35133: LD_INT 17
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35189
35139: LD_INT 18
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35189
35145: LD_INT 19
35147: DOUBLE
35148: EQUAL
35149: IFTRUE 35189
35151: LD_INT 22
35153: DOUBLE
35154: EQUAL
35155: IFTRUE 35189
35157: LD_INT 20
35159: DOUBLE
35160: EQUAL
35161: IFTRUE 35189
35163: LD_INT 21
35165: DOUBLE
35166: EQUAL
35167: IFTRUE 35189
35169: LD_INT 23
35171: DOUBLE
35172: EQUAL
35173: IFTRUE 35189
35175: LD_INT 24
35177: DOUBLE
35178: EQUAL
35179: IFTRUE 35189
35181: LD_INT 25
35183: DOUBLE
35184: EQUAL
35185: IFTRUE 35189
35187: GO 35245
35189: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35190: LD_ADDR_VAR 0 9
35194: PUSH
35195: LD_VAR 0 35
35199: PUSH
35200: LD_VAR 0 36
35204: PUSH
35205: LD_VAR 0 37
35209: PUSH
35210: LD_VAR 0 38
35214: PUSH
35215: LD_VAR 0 39
35219: PUSH
35220: LD_VAR 0 40
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: PUSH
35233: LD_VAR 0 4
35237: PUSH
35238: LD_INT 1
35240: PLUS
35241: ARRAY
35242: ST_TO_ADDR
35243: GO 35610
35245: LD_INT 6
35247: DOUBLE
35248: EQUAL
35249: IFTRUE 35301
35251: LD_INT 7
35253: DOUBLE
35254: EQUAL
35255: IFTRUE 35301
35257: LD_INT 8
35259: DOUBLE
35260: EQUAL
35261: IFTRUE 35301
35263: LD_INT 13
35265: DOUBLE
35266: EQUAL
35267: IFTRUE 35301
35269: LD_INT 12
35271: DOUBLE
35272: EQUAL
35273: IFTRUE 35301
35275: LD_INT 15
35277: DOUBLE
35278: EQUAL
35279: IFTRUE 35301
35281: LD_INT 11
35283: DOUBLE
35284: EQUAL
35285: IFTRUE 35301
35287: LD_INT 14
35289: DOUBLE
35290: EQUAL
35291: IFTRUE 35301
35293: LD_INT 10
35295: DOUBLE
35296: EQUAL
35297: IFTRUE 35301
35299: GO 35357
35301: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35302: LD_ADDR_VAR 0 9
35306: PUSH
35307: LD_VAR 0 41
35311: PUSH
35312: LD_VAR 0 42
35316: PUSH
35317: LD_VAR 0 43
35321: PUSH
35322: LD_VAR 0 44
35326: PUSH
35327: LD_VAR 0 45
35331: PUSH
35332: LD_VAR 0 46
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: PUSH
35345: LD_VAR 0 4
35349: PUSH
35350: LD_INT 1
35352: PLUS
35353: ARRAY
35354: ST_TO_ADDR
35355: GO 35610
35357: LD_INT 36
35359: DOUBLE
35360: EQUAL
35361: IFTRUE 35365
35363: GO 35421
35365: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35366: LD_ADDR_VAR 0 9
35370: PUSH
35371: LD_VAR 0 47
35375: PUSH
35376: LD_VAR 0 48
35380: PUSH
35381: LD_VAR 0 49
35385: PUSH
35386: LD_VAR 0 50
35390: PUSH
35391: LD_VAR 0 51
35395: PUSH
35396: LD_VAR 0 52
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: PUSH
35409: LD_VAR 0 4
35413: PUSH
35414: LD_INT 1
35416: PLUS
35417: ARRAY
35418: ST_TO_ADDR
35419: GO 35610
35421: LD_INT 4
35423: DOUBLE
35424: EQUAL
35425: IFTRUE 35447
35427: LD_INT 5
35429: DOUBLE
35430: EQUAL
35431: IFTRUE 35447
35433: LD_INT 34
35435: DOUBLE
35436: EQUAL
35437: IFTRUE 35447
35439: LD_INT 37
35441: DOUBLE
35442: EQUAL
35443: IFTRUE 35447
35445: GO 35503
35447: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35448: LD_ADDR_VAR 0 9
35452: PUSH
35453: LD_VAR 0 53
35457: PUSH
35458: LD_VAR 0 54
35462: PUSH
35463: LD_VAR 0 55
35467: PUSH
35468: LD_VAR 0 56
35472: PUSH
35473: LD_VAR 0 57
35477: PUSH
35478: LD_VAR 0 58
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: PUSH
35491: LD_VAR 0 4
35495: PUSH
35496: LD_INT 1
35498: PLUS
35499: ARRAY
35500: ST_TO_ADDR
35501: GO 35610
35503: LD_INT 31
35505: DOUBLE
35506: EQUAL
35507: IFTRUE 35553
35509: LD_INT 32
35511: DOUBLE
35512: EQUAL
35513: IFTRUE 35553
35515: LD_INT 33
35517: DOUBLE
35518: EQUAL
35519: IFTRUE 35553
35521: LD_INT 27
35523: DOUBLE
35524: EQUAL
35525: IFTRUE 35553
35527: LD_INT 26
35529: DOUBLE
35530: EQUAL
35531: IFTRUE 35553
35533: LD_INT 28
35535: DOUBLE
35536: EQUAL
35537: IFTRUE 35553
35539: LD_INT 29
35541: DOUBLE
35542: EQUAL
35543: IFTRUE 35553
35545: LD_INT 30
35547: DOUBLE
35548: EQUAL
35549: IFTRUE 35553
35551: GO 35609
35553: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35554: LD_ADDR_VAR 0 9
35558: PUSH
35559: LD_VAR 0 59
35563: PUSH
35564: LD_VAR 0 60
35568: PUSH
35569: LD_VAR 0 61
35573: PUSH
35574: LD_VAR 0 62
35578: PUSH
35579: LD_VAR 0 63
35583: PUSH
35584: LD_VAR 0 64
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: PUSH
35597: LD_VAR 0 4
35601: PUSH
35602: LD_INT 1
35604: PLUS
35605: ARRAY
35606: ST_TO_ADDR
35607: GO 35610
35609: POP
// temp_list2 = [ ] ;
35610: LD_ADDR_VAR 0 10
35614: PUSH
35615: EMPTY
35616: ST_TO_ADDR
// for i in temp_list do
35617: LD_ADDR_VAR 0 8
35621: PUSH
35622: LD_VAR 0 9
35626: PUSH
35627: FOR_IN
35628: IFFALSE 35680
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35630: LD_ADDR_VAR 0 10
35634: PUSH
35635: LD_VAR 0 10
35639: PUSH
35640: LD_VAR 0 8
35644: PUSH
35645: LD_INT 1
35647: ARRAY
35648: PUSH
35649: LD_VAR 0 2
35653: PLUS
35654: PUSH
35655: LD_VAR 0 8
35659: PUSH
35660: LD_INT 2
35662: ARRAY
35663: PUSH
35664: LD_VAR 0 3
35668: PLUS
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: EMPTY
35675: LIST
35676: ADD
35677: ST_TO_ADDR
35678: GO 35627
35680: POP
35681: POP
// result = temp_list2 ;
35682: LD_ADDR_VAR 0 7
35686: PUSH
35687: LD_VAR 0 10
35691: ST_TO_ADDR
// end ;
35692: LD_VAR 0 7
35696: RET
// export function EnemyInRange ( unit , dist ) ; begin
35697: LD_INT 0
35699: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35700: LD_ADDR_VAR 0 3
35704: PUSH
35705: LD_VAR 0 1
35709: PPUSH
35710: CALL_OW 255
35714: PPUSH
35715: LD_VAR 0 1
35719: PPUSH
35720: CALL_OW 250
35724: PPUSH
35725: LD_VAR 0 1
35729: PPUSH
35730: CALL_OW 251
35734: PPUSH
35735: LD_VAR 0 2
35739: PPUSH
35740: CALL 9070 0 4
35744: PUSH
35745: LD_INT 4
35747: ARRAY
35748: ST_TO_ADDR
// end ;
35749: LD_VAR 0 3
35753: RET
// export function PlayerSeeMe ( unit ) ; begin
35754: LD_INT 0
35756: PPUSH
// result := See ( your_side , unit ) ;
35757: LD_ADDR_VAR 0 2
35761: PUSH
35762: LD_OWVAR 2
35766: PPUSH
35767: LD_VAR 0 1
35771: PPUSH
35772: CALL_OW 292
35776: ST_TO_ADDR
// end ;
35777: LD_VAR 0 2
35781: RET
// export function ReverseDir ( unit ) ; begin
35782: LD_INT 0
35784: PPUSH
// if not unit then
35785: LD_VAR 0 1
35789: NOT
35790: IFFALSE 35794
// exit ;
35792: GO 35817
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35794: LD_ADDR_VAR 0 2
35798: PUSH
35799: LD_VAR 0 1
35803: PPUSH
35804: CALL_OW 254
35808: PUSH
35809: LD_INT 3
35811: PLUS
35812: PUSH
35813: LD_INT 6
35815: MOD
35816: ST_TO_ADDR
// end ;
35817: LD_VAR 0 2
35821: RET
// export function ReverseArray ( array ) ; var i ; begin
35822: LD_INT 0
35824: PPUSH
35825: PPUSH
// if not array then
35826: LD_VAR 0 1
35830: NOT
35831: IFFALSE 35835
// exit ;
35833: GO 35890
// result := [ ] ;
35835: LD_ADDR_VAR 0 2
35839: PUSH
35840: EMPTY
35841: ST_TO_ADDR
// for i := array downto 1 do
35842: LD_ADDR_VAR 0 3
35846: PUSH
35847: DOUBLE
35848: LD_VAR 0 1
35852: INC
35853: ST_TO_ADDR
35854: LD_INT 1
35856: PUSH
35857: FOR_DOWNTO
35858: IFFALSE 35888
// result := Join ( result , array [ i ] ) ;
35860: LD_ADDR_VAR 0 2
35864: PUSH
35865: LD_VAR 0 2
35869: PPUSH
35870: LD_VAR 0 1
35874: PUSH
35875: LD_VAR 0 3
35879: ARRAY
35880: PPUSH
35881: CALL 40555 0 2
35885: ST_TO_ADDR
35886: GO 35857
35888: POP
35889: POP
// end ;
35890: LD_VAR 0 2
35894: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35895: LD_INT 0
35897: PPUSH
35898: PPUSH
35899: PPUSH
35900: PPUSH
35901: PPUSH
35902: PPUSH
// if not unit or not hexes then
35903: LD_VAR 0 1
35907: NOT
35908: PUSH
35909: LD_VAR 0 2
35913: NOT
35914: OR
35915: IFFALSE 35919
// exit ;
35917: GO 36042
// dist := 9999 ;
35919: LD_ADDR_VAR 0 5
35923: PUSH
35924: LD_INT 9999
35926: ST_TO_ADDR
// for i = 1 to hexes do
35927: LD_ADDR_VAR 0 4
35931: PUSH
35932: DOUBLE
35933: LD_INT 1
35935: DEC
35936: ST_TO_ADDR
35937: LD_VAR 0 2
35941: PUSH
35942: FOR_TO
35943: IFFALSE 36030
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35945: LD_ADDR_VAR 0 6
35949: PUSH
35950: LD_VAR 0 1
35954: PPUSH
35955: LD_VAR 0 2
35959: PUSH
35960: LD_VAR 0 4
35964: ARRAY
35965: PUSH
35966: LD_INT 1
35968: ARRAY
35969: PPUSH
35970: LD_VAR 0 2
35974: PUSH
35975: LD_VAR 0 4
35979: ARRAY
35980: PUSH
35981: LD_INT 2
35983: ARRAY
35984: PPUSH
35985: CALL_OW 297
35989: ST_TO_ADDR
// if tdist < dist then
35990: LD_VAR 0 6
35994: PUSH
35995: LD_VAR 0 5
35999: LESS
36000: IFFALSE 36028
// begin hex := hexes [ i ] ;
36002: LD_ADDR_VAR 0 8
36006: PUSH
36007: LD_VAR 0 2
36011: PUSH
36012: LD_VAR 0 4
36016: ARRAY
36017: ST_TO_ADDR
// dist := tdist ;
36018: LD_ADDR_VAR 0 5
36022: PUSH
36023: LD_VAR 0 6
36027: ST_TO_ADDR
// end ; end ;
36028: GO 35942
36030: POP
36031: POP
// result := hex ;
36032: LD_ADDR_VAR 0 3
36036: PUSH
36037: LD_VAR 0 8
36041: ST_TO_ADDR
// end ;
36042: LD_VAR 0 3
36046: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36047: LD_INT 0
36049: PPUSH
36050: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36051: LD_VAR 0 1
36055: NOT
36056: PUSH
36057: LD_VAR 0 1
36061: PUSH
36062: LD_INT 21
36064: PUSH
36065: LD_INT 2
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 23
36074: PUSH
36075: LD_INT 2
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PPUSH
36086: CALL_OW 69
36090: IN
36091: NOT
36092: OR
36093: IFFALSE 36097
// exit ;
36095: GO 36144
// for i = 1 to 3 do
36097: LD_ADDR_VAR 0 3
36101: PUSH
36102: DOUBLE
36103: LD_INT 1
36105: DEC
36106: ST_TO_ADDR
36107: LD_INT 3
36109: PUSH
36110: FOR_TO
36111: IFFALSE 36142
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36113: LD_VAR 0 1
36117: PPUSH
36118: CALL_OW 250
36122: PPUSH
36123: LD_VAR 0 1
36127: PPUSH
36128: CALL_OW 251
36132: PPUSH
36133: LD_INT 1
36135: PPUSH
36136: CALL_OW 453
36140: GO 36110
36142: POP
36143: POP
// end ;
36144: LD_VAR 0 2
36148: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36149: LD_INT 0
36151: PPUSH
36152: PPUSH
36153: PPUSH
36154: PPUSH
36155: PPUSH
36156: PPUSH
// if not unit or not enemy_unit then
36157: LD_VAR 0 1
36161: NOT
36162: PUSH
36163: LD_VAR 0 2
36167: NOT
36168: OR
36169: IFFALSE 36173
// exit ;
36171: GO 36640
// if GetLives ( i ) < 250 then
36173: LD_VAR 0 4
36177: PPUSH
36178: CALL_OW 256
36182: PUSH
36183: LD_INT 250
36185: LESS
36186: IFFALSE 36199
// begin ComAutodestruct ( i ) ;
36188: LD_VAR 0 4
36192: PPUSH
36193: CALL 36047 0 1
// exit ;
36197: GO 36640
// end ; x := GetX ( enemy_unit ) ;
36199: LD_ADDR_VAR 0 7
36203: PUSH
36204: LD_VAR 0 2
36208: PPUSH
36209: CALL_OW 250
36213: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36214: LD_ADDR_VAR 0 8
36218: PUSH
36219: LD_VAR 0 2
36223: PPUSH
36224: CALL_OW 251
36228: ST_TO_ADDR
// if not x or not y then
36229: LD_VAR 0 7
36233: NOT
36234: PUSH
36235: LD_VAR 0 8
36239: NOT
36240: OR
36241: IFFALSE 36245
// exit ;
36243: GO 36640
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36245: LD_ADDR_VAR 0 6
36249: PUSH
36250: LD_VAR 0 7
36254: PPUSH
36255: LD_INT 0
36257: PPUSH
36258: LD_INT 4
36260: PPUSH
36261: CALL_OW 272
36265: PUSH
36266: LD_VAR 0 8
36270: PPUSH
36271: LD_INT 0
36273: PPUSH
36274: LD_INT 4
36276: PPUSH
36277: CALL_OW 273
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_VAR 0 7
36290: PPUSH
36291: LD_INT 1
36293: PPUSH
36294: LD_INT 4
36296: PPUSH
36297: CALL_OW 272
36301: PUSH
36302: LD_VAR 0 8
36306: PPUSH
36307: LD_INT 1
36309: PPUSH
36310: LD_INT 4
36312: PPUSH
36313: CALL_OW 273
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_VAR 0 7
36326: PPUSH
36327: LD_INT 2
36329: PPUSH
36330: LD_INT 4
36332: PPUSH
36333: CALL_OW 272
36337: PUSH
36338: LD_VAR 0 8
36342: PPUSH
36343: LD_INT 2
36345: PPUSH
36346: LD_INT 4
36348: PPUSH
36349: CALL_OW 273
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_VAR 0 7
36362: PPUSH
36363: LD_INT 3
36365: PPUSH
36366: LD_INT 4
36368: PPUSH
36369: CALL_OW 272
36373: PUSH
36374: LD_VAR 0 8
36378: PPUSH
36379: LD_INT 3
36381: PPUSH
36382: LD_INT 4
36384: PPUSH
36385: CALL_OW 273
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_VAR 0 7
36398: PPUSH
36399: LD_INT 4
36401: PPUSH
36402: LD_INT 4
36404: PPUSH
36405: CALL_OW 272
36409: PUSH
36410: LD_VAR 0 8
36414: PPUSH
36415: LD_INT 4
36417: PPUSH
36418: LD_INT 4
36420: PPUSH
36421: CALL_OW 273
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_VAR 0 7
36434: PPUSH
36435: LD_INT 5
36437: PPUSH
36438: LD_INT 4
36440: PPUSH
36441: CALL_OW 272
36445: PUSH
36446: LD_VAR 0 8
36450: PPUSH
36451: LD_INT 5
36453: PPUSH
36454: LD_INT 4
36456: PPUSH
36457: CALL_OW 273
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: ST_TO_ADDR
// for i = tmp downto 1 do
36474: LD_ADDR_VAR 0 4
36478: PUSH
36479: DOUBLE
36480: LD_VAR 0 6
36484: INC
36485: ST_TO_ADDR
36486: LD_INT 1
36488: PUSH
36489: FOR_DOWNTO
36490: IFFALSE 36591
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36492: LD_VAR 0 6
36496: PUSH
36497: LD_VAR 0 4
36501: ARRAY
36502: PUSH
36503: LD_INT 1
36505: ARRAY
36506: PPUSH
36507: LD_VAR 0 6
36511: PUSH
36512: LD_VAR 0 4
36516: ARRAY
36517: PUSH
36518: LD_INT 2
36520: ARRAY
36521: PPUSH
36522: CALL_OW 488
36526: NOT
36527: PUSH
36528: LD_VAR 0 6
36532: PUSH
36533: LD_VAR 0 4
36537: ARRAY
36538: PUSH
36539: LD_INT 1
36541: ARRAY
36542: PPUSH
36543: LD_VAR 0 6
36547: PUSH
36548: LD_VAR 0 4
36552: ARRAY
36553: PUSH
36554: LD_INT 2
36556: ARRAY
36557: PPUSH
36558: CALL_OW 428
36562: PUSH
36563: LD_INT 0
36565: NONEQUAL
36566: OR
36567: IFFALSE 36589
// tmp := Delete ( tmp , i ) ;
36569: LD_ADDR_VAR 0 6
36573: PUSH
36574: LD_VAR 0 6
36578: PPUSH
36579: LD_VAR 0 4
36583: PPUSH
36584: CALL_OW 3
36588: ST_TO_ADDR
36589: GO 36489
36591: POP
36592: POP
// j := GetClosestHex ( unit , tmp ) ;
36593: LD_ADDR_VAR 0 5
36597: PUSH
36598: LD_VAR 0 1
36602: PPUSH
36603: LD_VAR 0 6
36607: PPUSH
36608: CALL 35895 0 2
36612: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36613: LD_VAR 0 1
36617: PPUSH
36618: LD_VAR 0 5
36622: PUSH
36623: LD_INT 1
36625: ARRAY
36626: PPUSH
36627: LD_VAR 0 5
36631: PUSH
36632: LD_INT 2
36634: ARRAY
36635: PPUSH
36636: CALL_OW 111
// end ;
36640: LD_VAR 0 3
36644: RET
// export function PrepareApemanSoldier ( ) ; begin
36645: LD_INT 0
36647: PPUSH
// uc_nation := 0 ;
36648: LD_ADDR_OWVAR 21
36652: PUSH
36653: LD_INT 0
36655: ST_TO_ADDR
// hc_sex := sex_male ;
36656: LD_ADDR_OWVAR 27
36660: PUSH
36661: LD_INT 1
36663: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36664: LD_ADDR_OWVAR 28
36668: PUSH
36669: LD_INT 15
36671: ST_TO_ADDR
// hc_gallery :=  ;
36672: LD_ADDR_OWVAR 33
36676: PUSH
36677: LD_STRING 
36679: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36680: LD_ADDR_OWVAR 31
36684: PUSH
36685: LD_INT 0
36687: PPUSH
36688: LD_INT 3
36690: PPUSH
36691: CALL_OW 12
36695: PUSH
36696: LD_INT 0
36698: PPUSH
36699: LD_INT 3
36701: PPUSH
36702: CALL_OW 12
36706: PUSH
36707: LD_INT 0
36709: PUSH
36710: LD_INT 0
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: ST_TO_ADDR
// end ;
36719: LD_VAR 0 1
36723: RET
// export function PrepareApemanEngineer ( ) ; begin
36724: LD_INT 0
36726: PPUSH
// uc_nation := 0 ;
36727: LD_ADDR_OWVAR 21
36731: PUSH
36732: LD_INT 0
36734: ST_TO_ADDR
// hc_sex := sex_male ;
36735: LD_ADDR_OWVAR 27
36739: PUSH
36740: LD_INT 1
36742: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36743: LD_ADDR_OWVAR 28
36747: PUSH
36748: LD_INT 16
36750: ST_TO_ADDR
// hc_gallery :=  ;
36751: LD_ADDR_OWVAR 33
36755: PUSH
36756: LD_STRING 
36758: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36759: LD_ADDR_OWVAR 31
36763: PUSH
36764: LD_INT 0
36766: PPUSH
36767: LD_INT 3
36769: PPUSH
36770: CALL_OW 12
36774: PUSH
36775: LD_INT 0
36777: PPUSH
36778: LD_INT 3
36780: PPUSH
36781: CALL_OW 12
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: ST_TO_ADDR
// end ;
36798: LD_VAR 0 1
36802: RET
// export function PrepareApeman ( agressivity ) ; begin
36803: LD_INT 0
36805: PPUSH
// uc_side := 0 ;
36806: LD_ADDR_OWVAR 20
36810: PUSH
36811: LD_INT 0
36813: ST_TO_ADDR
// uc_nation := 0 ;
36814: LD_ADDR_OWVAR 21
36818: PUSH
36819: LD_INT 0
36821: ST_TO_ADDR
// hc_sex := sex_male ;
36822: LD_ADDR_OWVAR 27
36826: PUSH
36827: LD_INT 1
36829: ST_TO_ADDR
// hc_class := class_apeman ;
36830: LD_ADDR_OWVAR 28
36834: PUSH
36835: LD_INT 12
36837: ST_TO_ADDR
// hc_gallery :=  ;
36838: LD_ADDR_OWVAR 33
36842: PUSH
36843: LD_STRING 
36845: ST_TO_ADDR
// if agressivity = 0 then
36846: LD_VAR 0 1
36850: PUSH
36851: LD_INT 0
36853: EQUAL
36854: IFFALSE 36866
// hc_agressivity := 0 else
36856: LD_ADDR_OWVAR 35
36860: PUSH
36861: LD_INT 0
36863: ST_TO_ADDR
36864: GO 36887
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36866: LD_ADDR_OWVAR 35
36870: PUSH
36871: LD_VAR 0 1
36875: NEG
36876: PPUSH
36877: LD_VAR 0 1
36881: PPUSH
36882: CALL_OW 12
36886: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36887: LD_ADDR_OWVAR 31
36891: PUSH
36892: LD_INT 0
36894: PPUSH
36895: LD_INT 3
36897: PPUSH
36898: CALL_OW 12
36902: PUSH
36903: LD_INT 0
36905: PPUSH
36906: LD_INT 3
36908: PPUSH
36909: CALL_OW 12
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: ST_TO_ADDR
// end ;
36926: LD_VAR 0 2
36930: RET
// export function PrepareTiger ( agressivity ) ; begin
36931: LD_INT 0
36933: PPUSH
// uc_side := 0 ;
36934: LD_ADDR_OWVAR 20
36938: PUSH
36939: LD_INT 0
36941: ST_TO_ADDR
// uc_nation := 0 ;
36942: LD_ADDR_OWVAR 21
36946: PUSH
36947: LD_INT 0
36949: ST_TO_ADDR
// hc_class := class_tiger ;
36950: LD_ADDR_OWVAR 28
36954: PUSH
36955: LD_INT 14
36957: ST_TO_ADDR
// hc_gallery :=  ;
36958: LD_ADDR_OWVAR 33
36962: PUSH
36963: LD_STRING 
36965: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36966: LD_ADDR_OWVAR 35
36970: PUSH
36971: LD_VAR 0 1
36975: NEG
36976: PPUSH
36977: LD_VAR 0 1
36981: PPUSH
36982: CALL_OW 12
36986: ST_TO_ADDR
// end ;
36987: LD_VAR 0 2
36991: RET
// export function PrepareEnchidna ( ) ; begin
36992: LD_INT 0
36994: PPUSH
// uc_side := 0 ;
36995: LD_ADDR_OWVAR 20
36999: PUSH
37000: LD_INT 0
37002: ST_TO_ADDR
// uc_nation := 0 ;
37003: LD_ADDR_OWVAR 21
37007: PUSH
37008: LD_INT 0
37010: ST_TO_ADDR
// hc_class := class_baggie ;
37011: LD_ADDR_OWVAR 28
37015: PUSH
37016: LD_INT 13
37018: ST_TO_ADDR
// hc_gallery :=  ;
37019: LD_ADDR_OWVAR 33
37023: PUSH
37024: LD_STRING 
37026: ST_TO_ADDR
// end ;
37027: LD_VAR 0 1
37031: RET
// export function PrepareFrog ( ) ; begin
37032: LD_INT 0
37034: PPUSH
// uc_side := 0 ;
37035: LD_ADDR_OWVAR 20
37039: PUSH
37040: LD_INT 0
37042: ST_TO_ADDR
// uc_nation := 0 ;
37043: LD_ADDR_OWVAR 21
37047: PUSH
37048: LD_INT 0
37050: ST_TO_ADDR
// hc_class := class_frog ;
37051: LD_ADDR_OWVAR 28
37055: PUSH
37056: LD_INT 19
37058: ST_TO_ADDR
// hc_gallery :=  ;
37059: LD_ADDR_OWVAR 33
37063: PUSH
37064: LD_STRING 
37066: ST_TO_ADDR
// end ;
37067: LD_VAR 0 1
37071: RET
// export function PrepareFish ( ) ; begin
37072: LD_INT 0
37074: PPUSH
// uc_side := 0 ;
37075: LD_ADDR_OWVAR 20
37079: PUSH
37080: LD_INT 0
37082: ST_TO_ADDR
// uc_nation := 0 ;
37083: LD_ADDR_OWVAR 21
37087: PUSH
37088: LD_INT 0
37090: ST_TO_ADDR
// hc_class := class_fish ;
37091: LD_ADDR_OWVAR 28
37095: PUSH
37096: LD_INT 20
37098: ST_TO_ADDR
// hc_gallery :=  ;
37099: LD_ADDR_OWVAR 33
37103: PUSH
37104: LD_STRING 
37106: ST_TO_ADDR
// end ;
37107: LD_VAR 0 1
37111: RET
// export function PrepareBird ( ) ; begin
37112: LD_INT 0
37114: PPUSH
// uc_side := 0 ;
37115: LD_ADDR_OWVAR 20
37119: PUSH
37120: LD_INT 0
37122: ST_TO_ADDR
// uc_nation := 0 ;
37123: LD_ADDR_OWVAR 21
37127: PUSH
37128: LD_INT 0
37130: ST_TO_ADDR
// hc_class := class_phororhacos ;
37131: LD_ADDR_OWVAR 28
37135: PUSH
37136: LD_INT 18
37138: ST_TO_ADDR
// hc_gallery :=  ;
37139: LD_ADDR_OWVAR 33
37143: PUSH
37144: LD_STRING 
37146: ST_TO_ADDR
// end ;
37147: LD_VAR 0 1
37151: RET
// export function PrepareHorse ( ) ; begin
37152: LD_INT 0
37154: PPUSH
// uc_side := 0 ;
37155: LD_ADDR_OWVAR 20
37159: PUSH
37160: LD_INT 0
37162: ST_TO_ADDR
// uc_nation := 0 ;
37163: LD_ADDR_OWVAR 21
37167: PUSH
37168: LD_INT 0
37170: ST_TO_ADDR
// hc_class := class_horse ;
37171: LD_ADDR_OWVAR 28
37175: PUSH
37176: LD_INT 21
37178: ST_TO_ADDR
// hc_gallery :=  ;
37179: LD_ADDR_OWVAR 33
37183: PUSH
37184: LD_STRING 
37186: ST_TO_ADDR
// end ;
37187: LD_VAR 0 1
37191: RET
// export function PrepareMastodont ( ) ; begin
37192: LD_INT 0
37194: PPUSH
// uc_side := 0 ;
37195: LD_ADDR_OWVAR 20
37199: PUSH
37200: LD_INT 0
37202: ST_TO_ADDR
// uc_nation := 0 ;
37203: LD_ADDR_OWVAR 21
37207: PUSH
37208: LD_INT 0
37210: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37211: LD_ADDR_OWVAR 37
37215: PUSH
37216: LD_INT 31
37218: ST_TO_ADDR
// vc_control := control_rider ;
37219: LD_ADDR_OWVAR 38
37223: PUSH
37224: LD_INT 4
37226: ST_TO_ADDR
// end ;
37227: LD_VAR 0 1
37231: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37232: LD_INT 0
37234: PPUSH
37235: PPUSH
37236: PPUSH
// uc_side = 0 ;
37237: LD_ADDR_OWVAR 20
37241: PUSH
37242: LD_INT 0
37244: ST_TO_ADDR
// uc_nation = 0 ;
37245: LD_ADDR_OWVAR 21
37249: PUSH
37250: LD_INT 0
37252: ST_TO_ADDR
// InitHc_All ( ) ;
37253: CALL_OW 584
// InitVc ;
37257: CALL_OW 20
// if mastodonts then
37261: LD_VAR 0 6
37265: IFFALSE 37332
// for i = 1 to mastodonts do
37267: LD_ADDR_VAR 0 11
37271: PUSH
37272: DOUBLE
37273: LD_INT 1
37275: DEC
37276: ST_TO_ADDR
37277: LD_VAR 0 6
37281: PUSH
37282: FOR_TO
37283: IFFALSE 37330
// begin vc_chassis := 31 ;
37285: LD_ADDR_OWVAR 37
37289: PUSH
37290: LD_INT 31
37292: ST_TO_ADDR
// vc_control := control_rider ;
37293: LD_ADDR_OWVAR 38
37297: PUSH
37298: LD_INT 4
37300: ST_TO_ADDR
// animal := CreateVehicle ;
37301: LD_ADDR_VAR 0 12
37305: PUSH
37306: CALL_OW 45
37310: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37311: LD_VAR 0 12
37315: PPUSH
37316: LD_VAR 0 8
37320: PPUSH
37321: LD_INT 0
37323: PPUSH
37324: CALL 39460 0 3
// end ;
37328: GO 37282
37330: POP
37331: POP
// if horses then
37332: LD_VAR 0 5
37336: IFFALSE 37403
// for i = 1 to horses do
37338: LD_ADDR_VAR 0 11
37342: PUSH
37343: DOUBLE
37344: LD_INT 1
37346: DEC
37347: ST_TO_ADDR
37348: LD_VAR 0 5
37352: PUSH
37353: FOR_TO
37354: IFFALSE 37401
// begin hc_class := 21 ;
37356: LD_ADDR_OWVAR 28
37360: PUSH
37361: LD_INT 21
37363: ST_TO_ADDR
// hc_gallery :=  ;
37364: LD_ADDR_OWVAR 33
37368: PUSH
37369: LD_STRING 
37371: ST_TO_ADDR
// animal := CreateHuman ;
37372: LD_ADDR_VAR 0 12
37376: PUSH
37377: CALL_OW 44
37381: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37382: LD_VAR 0 12
37386: PPUSH
37387: LD_VAR 0 8
37391: PPUSH
37392: LD_INT 0
37394: PPUSH
37395: CALL 39460 0 3
// end ;
37399: GO 37353
37401: POP
37402: POP
// if birds then
37403: LD_VAR 0 1
37407: IFFALSE 37474
// for i = 1 to birds do
37409: LD_ADDR_VAR 0 11
37413: PUSH
37414: DOUBLE
37415: LD_INT 1
37417: DEC
37418: ST_TO_ADDR
37419: LD_VAR 0 1
37423: PUSH
37424: FOR_TO
37425: IFFALSE 37472
// begin hc_class := 18 ;
37427: LD_ADDR_OWVAR 28
37431: PUSH
37432: LD_INT 18
37434: ST_TO_ADDR
// hc_gallery =  ;
37435: LD_ADDR_OWVAR 33
37439: PUSH
37440: LD_STRING 
37442: ST_TO_ADDR
// animal := CreateHuman ;
37443: LD_ADDR_VAR 0 12
37447: PUSH
37448: CALL_OW 44
37452: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37453: LD_VAR 0 12
37457: PPUSH
37458: LD_VAR 0 8
37462: PPUSH
37463: LD_INT 0
37465: PPUSH
37466: CALL 39460 0 3
// end ;
37470: GO 37424
37472: POP
37473: POP
// if tigers then
37474: LD_VAR 0 2
37478: IFFALSE 37562
// for i = 1 to tigers do
37480: LD_ADDR_VAR 0 11
37484: PUSH
37485: DOUBLE
37486: LD_INT 1
37488: DEC
37489: ST_TO_ADDR
37490: LD_VAR 0 2
37494: PUSH
37495: FOR_TO
37496: IFFALSE 37560
// begin hc_class = class_tiger ;
37498: LD_ADDR_OWVAR 28
37502: PUSH
37503: LD_INT 14
37505: ST_TO_ADDR
// hc_gallery =  ;
37506: LD_ADDR_OWVAR 33
37510: PUSH
37511: LD_STRING 
37513: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37514: LD_ADDR_OWVAR 35
37518: PUSH
37519: LD_INT 7
37521: NEG
37522: PPUSH
37523: LD_INT 7
37525: PPUSH
37526: CALL_OW 12
37530: ST_TO_ADDR
// animal := CreateHuman ;
37531: LD_ADDR_VAR 0 12
37535: PUSH
37536: CALL_OW 44
37540: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37541: LD_VAR 0 12
37545: PPUSH
37546: LD_VAR 0 8
37550: PPUSH
37551: LD_INT 0
37553: PPUSH
37554: CALL 39460 0 3
// end ;
37558: GO 37495
37560: POP
37561: POP
// if apemans then
37562: LD_VAR 0 3
37566: IFFALSE 37689
// for i = 1 to apemans do
37568: LD_ADDR_VAR 0 11
37572: PUSH
37573: DOUBLE
37574: LD_INT 1
37576: DEC
37577: ST_TO_ADDR
37578: LD_VAR 0 3
37582: PUSH
37583: FOR_TO
37584: IFFALSE 37687
// begin hc_class = class_apeman ;
37586: LD_ADDR_OWVAR 28
37590: PUSH
37591: LD_INT 12
37593: ST_TO_ADDR
// hc_gallery =  ;
37594: LD_ADDR_OWVAR 33
37598: PUSH
37599: LD_STRING 
37601: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37602: LD_ADDR_OWVAR 35
37606: PUSH
37607: LD_INT 2
37609: NEG
37610: PPUSH
37611: LD_INT 2
37613: PPUSH
37614: CALL_OW 12
37618: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37619: LD_ADDR_OWVAR 31
37623: PUSH
37624: LD_INT 1
37626: PPUSH
37627: LD_INT 3
37629: PPUSH
37630: CALL_OW 12
37634: PUSH
37635: LD_INT 1
37637: PPUSH
37638: LD_INT 3
37640: PPUSH
37641: CALL_OW 12
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: ST_TO_ADDR
// animal := CreateHuman ;
37658: LD_ADDR_VAR 0 12
37662: PUSH
37663: CALL_OW 44
37667: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37668: LD_VAR 0 12
37672: PPUSH
37673: LD_VAR 0 8
37677: PPUSH
37678: LD_INT 0
37680: PPUSH
37681: CALL 39460 0 3
// end ;
37685: GO 37583
37687: POP
37688: POP
// if enchidnas then
37689: LD_VAR 0 4
37693: IFFALSE 37760
// for i = 1 to enchidnas do
37695: LD_ADDR_VAR 0 11
37699: PUSH
37700: DOUBLE
37701: LD_INT 1
37703: DEC
37704: ST_TO_ADDR
37705: LD_VAR 0 4
37709: PUSH
37710: FOR_TO
37711: IFFALSE 37758
// begin hc_class = 13 ;
37713: LD_ADDR_OWVAR 28
37717: PUSH
37718: LD_INT 13
37720: ST_TO_ADDR
// hc_gallery =  ;
37721: LD_ADDR_OWVAR 33
37725: PUSH
37726: LD_STRING 
37728: ST_TO_ADDR
// animal := CreateHuman ;
37729: LD_ADDR_VAR 0 12
37733: PUSH
37734: CALL_OW 44
37738: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37739: LD_VAR 0 12
37743: PPUSH
37744: LD_VAR 0 8
37748: PPUSH
37749: LD_INT 0
37751: PPUSH
37752: CALL 39460 0 3
// end ;
37756: GO 37710
37758: POP
37759: POP
// if fishes then
37760: LD_VAR 0 7
37764: IFFALSE 37831
// for i = 1 to fishes do
37766: LD_ADDR_VAR 0 11
37770: PUSH
37771: DOUBLE
37772: LD_INT 1
37774: DEC
37775: ST_TO_ADDR
37776: LD_VAR 0 7
37780: PUSH
37781: FOR_TO
37782: IFFALSE 37829
// begin hc_class = 20 ;
37784: LD_ADDR_OWVAR 28
37788: PUSH
37789: LD_INT 20
37791: ST_TO_ADDR
// hc_gallery =  ;
37792: LD_ADDR_OWVAR 33
37796: PUSH
37797: LD_STRING 
37799: ST_TO_ADDR
// animal := CreateHuman ;
37800: LD_ADDR_VAR 0 12
37804: PUSH
37805: CALL_OW 44
37809: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37810: LD_VAR 0 12
37814: PPUSH
37815: LD_VAR 0 9
37819: PPUSH
37820: LD_INT 0
37822: PPUSH
37823: CALL 39460 0 3
// end ;
37827: GO 37781
37829: POP
37830: POP
// end ;
37831: LD_VAR 0 10
37835: RET
// export function WantHeal ( sci , unit ) ; begin
37836: LD_INT 0
37838: PPUSH
// if GetTaskList ( sci ) > 0 then
37839: LD_VAR 0 1
37843: PPUSH
37844: CALL_OW 437
37848: PUSH
37849: LD_INT 0
37851: GREATER
37852: IFFALSE 37922
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37854: LD_VAR 0 1
37858: PPUSH
37859: CALL_OW 437
37863: PUSH
37864: LD_INT 1
37866: ARRAY
37867: PUSH
37868: LD_INT 1
37870: ARRAY
37871: PUSH
37872: LD_STRING l
37874: EQUAL
37875: PUSH
37876: LD_VAR 0 1
37880: PPUSH
37881: CALL_OW 437
37885: PUSH
37886: LD_INT 1
37888: ARRAY
37889: PUSH
37890: LD_INT 4
37892: ARRAY
37893: PUSH
37894: LD_VAR 0 2
37898: EQUAL
37899: AND
37900: IFFALSE 37912
// result := true else
37902: LD_ADDR_VAR 0 3
37906: PUSH
37907: LD_INT 1
37909: ST_TO_ADDR
37910: GO 37920
// result := false ;
37912: LD_ADDR_VAR 0 3
37916: PUSH
37917: LD_INT 0
37919: ST_TO_ADDR
// end else
37920: GO 37930
// result := false ;
37922: LD_ADDR_VAR 0 3
37926: PUSH
37927: LD_INT 0
37929: ST_TO_ADDR
// end ;
37930: LD_VAR 0 3
37934: RET
// export function HealTarget ( sci ) ; begin
37935: LD_INT 0
37937: PPUSH
// if not sci then
37938: LD_VAR 0 1
37942: NOT
37943: IFFALSE 37947
// exit ;
37945: GO 38012
// result := 0 ;
37947: LD_ADDR_VAR 0 2
37951: PUSH
37952: LD_INT 0
37954: ST_TO_ADDR
// if GetTaskList ( sci ) then
37955: LD_VAR 0 1
37959: PPUSH
37960: CALL_OW 437
37964: IFFALSE 38012
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37966: LD_VAR 0 1
37970: PPUSH
37971: CALL_OW 437
37975: PUSH
37976: LD_INT 1
37978: ARRAY
37979: PUSH
37980: LD_INT 1
37982: ARRAY
37983: PUSH
37984: LD_STRING l
37986: EQUAL
37987: IFFALSE 38012
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37989: LD_ADDR_VAR 0 2
37993: PUSH
37994: LD_VAR 0 1
37998: PPUSH
37999: CALL_OW 437
38003: PUSH
38004: LD_INT 1
38006: ARRAY
38007: PUSH
38008: LD_INT 4
38010: ARRAY
38011: ST_TO_ADDR
// end ;
38012: LD_VAR 0 2
38016: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38017: LD_INT 0
38019: PPUSH
38020: PPUSH
38021: PPUSH
38022: PPUSH
// if not base_units then
38023: LD_VAR 0 1
38027: NOT
38028: IFFALSE 38032
// exit ;
38030: GO 38119
// result := false ;
38032: LD_ADDR_VAR 0 2
38036: PUSH
38037: LD_INT 0
38039: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38040: LD_ADDR_VAR 0 5
38044: PUSH
38045: LD_VAR 0 1
38049: PPUSH
38050: LD_INT 21
38052: PUSH
38053: LD_INT 3
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PPUSH
38060: CALL_OW 72
38064: ST_TO_ADDR
// if not tmp then
38065: LD_VAR 0 5
38069: NOT
38070: IFFALSE 38074
// exit ;
38072: GO 38119
// for i in tmp do
38074: LD_ADDR_VAR 0 3
38078: PUSH
38079: LD_VAR 0 5
38083: PUSH
38084: FOR_IN
38085: IFFALSE 38117
// begin result := EnemyInRange ( i , 22 ) ;
38087: LD_ADDR_VAR 0 2
38091: PUSH
38092: LD_VAR 0 3
38096: PPUSH
38097: LD_INT 22
38099: PPUSH
38100: CALL 35697 0 2
38104: ST_TO_ADDR
// if result then
38105: LD_VAR 0 2
38109: IFFALSE 38115
// exit ;
38111: POP
38112: POP
38113: GO 38119
// end ;
38115: GO 38084
38117: POP
38118: POP
// end ;
38119: LD_VAR 0 2
38123: RET
// export function FilterByTag ( units , tag ) ; begin
38124: LD_INT 0
38126: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38127: LD_ADDR_VAR 0 3
38131: PUSH
38132: LD_VAR 0 1
38136: PPUSH
38137: LD_INT 120
38139: PUSH
38140: LD_VAR 0 2
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PPUSH
38149: CALL_OW 72
38153: ST_TO_ADDR
// end ;
38154: LD_VAR 0 3
38158: RET
// export function IsDriver ( un ) ; begin
38159: LD_INT 0
38161: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38162: LD_ADDR_VAR 0 2
38166: PUSH
38167: LD_VAR 0 1
38171: PUSH
38172: LD_INT 55
38174: PUSH
38175: EMPTY
38176: LIST
38177: PPUSH
38178: CALL_OW 69
38182: IN
38183: ST_TO_ADDR
// end ;
38184: LD_VAR 0 2
38188: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38189: LD_INT 0
38191: PPUSH
38192: PPUSH
// list := [ ] ;
38193: LD_ADDR_VAR 0 5
38197: PUSH
38198: EMPTY
38199: ST_TO_ADDR
// case d of 0 :
38200: LD_VAR 0 3
38204: PUSH
38205: LD_INT 0
38207: DOUBLE
38208: EQUAL
38209: IFTRUE 38213
38211: GO 38346
38213: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38214: LD_ADDR_VAR 0 5
38218: PUSH
38219: LD_VAR 0 1
38223: PUSH
38224: LD_INT 4
38226: MINUS
38227: PUSH
38228: LD_VAR 0 2
38232: PUSH
38233: LD_INT 4
38235: MINUS
38236: PUSH
38237: LD_INT 2
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: LIST
38244: PUSH
38245: LD_VAR 0 1
38249: PUSH
38250: LD_INT 3
38252: MINUS
38253: PUSH
38254: LD_VAR 0 2
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: PUSH
38267: LD_VAR 0 1
38271: PUSH
38272: LD_INT 4
38274: PLUS
38275: PUSH
38276: LD_VAR 0 2
38280: PUSH
38281: LD_INT 4
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: LIST
38288: PUSH
38289: LD_VAR 0 1
38293: PUSH
38294: LD_INT 3
38296: PLUS
38297: PUSH
38298: LD_VAR 0 2
38302: PUSH
38303: LD_INT 3
38305: PLUS
38306: PUSH
38307: LD_INT 5
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: LIST
38314: PUSH
38315: LD_VAR 0 1
38319: PUSH
38320: LD_VAR 0 2
38324: PUSH
38325: LD_INT 4
38327: PLUS
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: LIST
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: ST_TO_ADDR
// end ; 1 :
38344: GO 39044
38346: LD_INT 1
38348: DOUBLE
38349: EQUAL
38350: IFTRUE 38354
38352: GO 38487
38354: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38355: LD_ADDR_VAR 0 5
38359: PUSH
38360: LD_VAR 0 1
38364: PUSH
38365: LD_VAR 0 2
38369: PUSH
38370: LD_INT 4
38372: MINUS
38373: PUSH
38374: LD_INT 3
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: PUSH
38382: LD_VAR 0 1
38386: PUSH
38387: LD_INT 3
38389: MINUS
38390: PUSH
38391: LD_VAR 0 2
38395: PUSH
38396: LD_INT 3
38398: MINUS
38399: PUSH
38400: LD_INT 2
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: LIST
38407: PUSH
38408: LD_VAR 0 1
38412: PUSH
38413: LD_INT 4
38415: MINUS
38416: PUSH
38417: LD_VAR 0 2
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: LIST
38429: PUSH
38430: LD_VAR 0 1
38434: PUSH
38435: LD_VAR 0 2
38439: PUSH
38440: LD_INT 3
38442: PLUS
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: LIST
38451: PUSH
38452: LD_VAR 0 1
38456: PUSH
38457: LD_INT 4
38459: PLUS
38460: PUSH
38461: LD_VAR 0 2
38465: PUSH
38466: LD_INT 4
38468: PLUS
38469: PUSH
38470: LD_INT 5
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: LIST
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: ST_TO_ADDR
// end ; 2 :
38485: GO 39044
38487: LD_INT 2
38489: DOUBLE
38490: EQUAL
38491: IFTRUE 38495
38493: GO 38624
38495: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38496: LD_ADDR_VAR 0 5
38500: PUSH
38501: LD_VAR 0 1
38505: PUSH
38506: LD_VAR 0 2
38510: PUSH
38511: LD_INT 3
38513: MINUS
38514: PUSH
38515: LD_INT 3
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: LIST
38522: PUSH
38523: LD_VAR 0 1
38527: PUSH
38528: LD_INT 4
38530: PLUS
38531: PUSH
38532: LD_VAR 0 2
38536: PUSH
38537: LD_INT 4
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: PUSH
38545: LD_VAR 0 1
38549: PUSH
38550: LD_VAR 0 2
38554: PUSH
38555: LD_INT 4
38557: PLUS
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: LIST
38566: PUSH
38567: LD_VAR 0 1
38571: PUSH
38572: LD_INT 3
38574: MINUS
38575: PUSH
38576: LD_VAR 0 2
38580: PUSH
38581: LD_INT 1
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: LIST
38588: PUSH
38589: LD_VAR 0 1
38593: PUSH
38594: LD_INT 4
38596: MINUS
38597: PUSH
38598: LD_VAR 0 2
38602: PUSH
38603: LD_INT 4
38605: MINUS
38606: PUSH
38607: LD_INT 2
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: LIST
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: ST_TO_ADDR
// end ; 3 :
38622: GO 39044
38624: LD_INT 3
38626: DOUBLE
38627: EQUAL
38628: IFTRUE 38632
38630: GO 38765
38632: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38633: LD_ADDR_VAR 0 5
38637: PUSH
38638: LD_VAR 0 1
38642: PUSH
38643: LD_INT 3
38645: PLUS
38646: PUSH
38647: LD_VAR 0 2
38651: PUSH
38652: LD_INT 4
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: LIST
38659: PUSH
38660: LD_VAR 0 1
38664: PUSH
38665: LD_INT 4
38667: PLUS
38668: PUSH
38669: LD_VAR 0 2
38673: PUSH
38674: LD_INT 4
38676: PLUS
38677: PUSH
38678: LD_INT 5
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: PUSH
38686: LD_VAR 0 1
38690: PUSH
38691: LD_INT 4
38693: MINUS
38694: PUSH
38695: LD_VAR 0 2
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: PUSH
38708: LD_VAR 0 1
38712: PUSH
38713: LD_VAR 0 2
38717: PUSH
38718: LD_INT 4
38720: MINUS
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: LIST
38729: PUSH
38730: LD_VAR 0 1
38734: PUSH
38735: LD_INT 3
38737: MINUS
38738: PUSH
38739: LD_VAR 0 2
38743: PUSH
38744: LD_INT 3
38746: MINUS
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: ST_TO_ADDR
// end ; 4 :
38763: GO 39044
38765: LD_INT 4
38767: DOUBLE
38768: EQUAL
38769: IFTRUE 38773
38771: GO 38906
38773: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38774: LD_ADDR_VAR 0 5
38778: PUSH
38779: LD_VAR 0 1
38783: PUSH
38784: LD_VAR 0 2
38788: PUSH
38789: LD_INT 4
38791: PLUS
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: LIST
38800: PUSH
38801: LD_VAR 0 1
38805: PUSH
38806: LD_INT 3
38808: PLUS
38809: PUSH
38810: LD_VAR 0 2
38814: PUSH
38815: LD_INT 3
38817: PLUS
38818: PUSH
38819: LD_INT 5
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: LIST
38826: PUSH
38827: LD_VAR 0 1
38831: PUSH
38832: LD_INT 4
38834: PLUS
38835: PUSH
38836: LD_VAR 0 2
38840: PUSH
38841: LD_INT 4
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: LIST
38848: PUSH
38849: LD_VAR 0 1
38853: PUSH
38854: LD_VAR 0 2
38858: PUSH
38859: LD_INT 3
38861: MINUS
38862: PUSH
38863: LD_INT 3
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: LIST
38870: PUSH
38871: LD_VAR 0 1
38875: PUSH
38876: LD_INT 4
38878: MINUS
38879: PUSH
38880: LD_VAR 0 2
38884: PUSH
38885: LD_INT 4
38887: MINUS
38888: PUSH
38889: LD_INT 2
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: LIST
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: ST_TO_ADDR
// end ; 5 :
38904: GO 39044
38906: LD_INT 5
38908: DOUBLE
38909: EQUAL
38910: IFTRUE 38914
38912: GO 39043
38914: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38915: LD_ADDR_VAR 0 5
38919: PUSH
38920: LD_VAR 0 1
38924: PUSH
38925: LD_INT 4
38927: MINUS
38928: PUSH
38929: LD_VAR 0 2
38933: PUSH
38934: LD_INT 1
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: LIST
38941: PUSH
38942: LD_VAR 0 1
38946: PUSH
38947: LD_VAR 0 2
38951: PUSH
38952: LD_INT 4
38954: MINUS
38955: PUSH
38956: LD_INT 3
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: LIST
38963: PUSH
38964: LD_VAR 0 1
38968: PUSH
38969: LD_INT 4
38971: PLUS
38972: PUSH
38973: LD_VAR 0 2
38977: PUSH
38978: LD_INT 4
38980: PLUS
38981: PUSH
38982: LD_INT 5
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: LIST
38989: PUSH
38990: LD_VAR 0 1
38994: PUSH
38995: LD_INT 3
38997: PLUS
38998: PUSH
38999: LD_VAR 0 2
39003: PUSH
39004: LD_INT 4
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: LIST
39011: PUSH
39012: LD_VAR 0 1
39016: PUSH
39017: LD_VAR 0 2
39021: PUSH
39022: LD_INT 3
39024: PLUS
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: LIST
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: ST_TO_ADDR
// end ; end ;
39041: GO 39044
39043: POP
// result := list ;
39044: LD_ADDR_VAR 0 4
39048: PUSH
39049: LD_VAR 0 5
39053: ST_TO_ADDR
// end ;
39054: LD_VAR 0 4
39058: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39059: LD_INT 0
39061: PPUSH
39062: PPUSH
39063: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39064: LD_VAR 0 1
39068: NOT
39069: PUSH
39070: LD_VAR 0 2
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: LD_INT 2
39080: PUSH
39081: LD_INT 3
39083: PUSH
39084: LD_INT 4
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: IN
39093: NOT
39094: OR
39095: IFFALSE 39099
// exit ;
39097: GO 39182
// tmp := [ ] ;
39099: LD_ADDR_VAR 0 5
39103: PUSH
39104: EMPTY
39105: ST_TO_ADDR
// for i in units do
39106: LD_ADDR_VAR 0 4
39110: PUSH
39111: LD_VAR 0 1
39115: PUSH
39116: FOR_IN
39117: IFFALSE 39151
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39119: LD_ADDR_VAR 0 5
39123: PUSH
39124: LD_VAR 0 5
39128: PPUSH
39129: LD_VAR 0 4
39133: PPUSH
39134: LD_VAR 0 2
39138: PPUSH
39139: CALL_OW 259
39143: PPUSH
39144: CALL 40555 0 2
39148: ST_TO_ADDR
39149: GO 39116
39151: POP
39152: POP
// if not tmp then
39153: LD_VAR 0 5
39157: NOT
39158: IFFALSE 39162
// exit ;
39160: GO 39182
// result := SortListByListDesc ( units , tmp ) ;
39162: LD_ADDR_VAR 0 3
39166: PUSH
39167: LD_VAR 0 1
39171: PPUSH
39172: LD_VAR 0 5
39176: PPUSH
39177: CALL_OW 77
39181: ST_TO_ADDR
// end ;
39182: LD_VAR 0 3
39186: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39187: LD_INT 0
39189: PPUSH
39190: PPUSH
39191: PPUSH
// result := false ;
39192: LD_ADDR_VAR 0 3
39196: PUSH
39197: LD_INT 0
39199: ST_TO_ADDR
// if not building then
39200: LD_VAR 0 2
39204: NOT
39205: IFFALSE 39209
// exit ;
39207: GO 39347
// x := GetX ( building ) ;
39209: LD_ADDR_VAR 0 4
39213: PUSH
39214: LD_VAR 0 2
39218: PPUSH
39219: CALL_OW 250
39223: ST_TO_ADDR
// y := GetY ( building ) ;
39224: LD_ADDR_VAR 0 5
39228: PUSH
39229: LD_VAR 0 2
39233: PPUSH
39234: CALL_OW 251
39238: ST_TO_ADDR
// if not x or not y then
39239: LD_VAR 0 4
39243: NOT
39244: PUSH
39245: LD_VAR 0 5
39249: NOT
39250: OR
39251: IFFALSE 39255
// exit ;
39253: GO 39347
// if GetTaskList ( unit ) then
39255: LD_VAR 0 1
39259: PPUSH
39260: CALL_OW 437
39264: IFFALSE 39347
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39266: LD_STRING e
39268: PUSH
39269: LD_VAR 0 1
39273: PPUSH
39274: CALL_OW 437
39278: PUSH
39279: LD_INT 1
39281: ARRAY
39282: PUSH
39283: LD_INT 1
39285: ARRAY
39286: EQUAL
39287: PUSH
39288: LD_VAR 0 4
39292: PUSH
39293: LD_VAR 0 1
39297: PPUSH
39298: CALL_OW 437
39302: PUSH
39303: LD_INT 1
39305: ARRAY
39306: PUSH
39307: LD_INT 2
39309: ARRAY
39310: EQUAL
39311: AND
39312: PUSH
39313: LD_VAR 0 5
39317: PUSH
39318: LD_VAR 0 1
39322: PPUSH
39323: CALL_OW 437
39327: PUSH
39328: LD_INT 1
39330: ARRAY
39331: PUSH
39332: LD_INT 3
39334: ARRAY
39335: EQUAL
39336: AND
39337: IFFALSE 39347
// result := true end ;
39339: LD_ADDR_VAR 0 3
39343: PUSH
39344: LD_INT 1
39346: ST_TO_ADDR
// end ;
39347: LD_VAR 0 3
39351: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39352: LD_INT 0
39354: PPUSH
// result := false ;
39355: LD_ADDR_VAR 0 4
39359: PUSH
39360: LD_INT 0
39362: ST_TO_ADDR
// if GetTaskList ( unit ) then
39363: LD_VAR 0 1
39367: PPUSH
39368: CALL_OW 437
39372: IFFALSE 39455
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39374: LD_STRING M
39376: PUSH
39377: LD_VAR 0 1
39381: PPUSH
39382: CALL_OW 437
39386: PUSH
39387: LD_INT 1
39389: ARRAY
39390: PUSH
39391: LD_INT 1
39393: ARRAY
39394: EQUAL
39395: PUSH
39396: LD_VAR 0 2
39400: PUSH
39401: LD_VAR 0 1
39405: PPUSH
39406: CALL_OW 437
39410: PUSH
39411: LD_INT 1
39413: ARRAY
39414: PUSH
39415: LD_INT 2
39417: ARRAY
39418: EQUAL
39419: AND
39420: PUSH
39421: LD_VAR 0 3
39425: PUSH
39426: LD_VAR 0 1
39430: PPUSH
39431: CALL_OW 437
39435: PUSH
39436: LD_INT 1
39438: ARRAY
39439: PUSH
39440: LD_INT 3
39442: ARRAY
39443: EQUAL
39444: AND
39445: IFFALSE 39455
// result := true ;
39447: LD_ADDR_VAR 0 4
39451: PUSH
39452: LD_INT 1
39454: ST_TO_ADDR
// end ; end ;
39455: LD_VAR 0 4
39459: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39460: LD_INT 0
39462: PPUSH
39463: PPUSH
39464: PPUSH
39465: PPUSH
// if not unit or not area then
39466: LD_VAR 0 1
39470: NOT
39471: PUSH
39472: LD_VAR 0 2
39476: NOT
39477: OR
39478: IFFALSE 39482
// exit ;
39480: GO 39658
// tmp := AreaToList ( area , i ) ;
39482: LD_ADDR_VAR 0 6
39486: PUSH
39487: LD_VAR 0 2
39491: PPUSH
39492: LD_VAR 0 5
39496: PPUSH
39497: CALL_OW 517
39501: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39502: LD_ADDR_VAR 0 5
39506: PUSH
39507: DOUBLE
39508: LD_INT 1
39510: DEC
39511: ST_TO_ADDR
39512: LD_VAR 0 6
39516: PUSH
39517: LD_INT 1
39519: ARRAY
39520: PUSH
39521: FOR_TO
39522: IFFALSE 39656
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39524: LD_ADDR_VAR 0 7
39528: PUSH
39529: LD_VAR 0 6
39533: PUSH
39534: LD_INT 1
39536: ARRAY
39537: PUSH
39538: LD_VAR 0 5
39542: ARRAY
39543: PUSH
39544: LD_VAR 0 6
39548: PUSH
39549: LD_INT 2
39551: ARRAY
39552: PUSH
39553: LD_VAR 0 5
39557: ARRAY
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39563: LD_INT 92
39565: PUSH
39566: LD_VAR 0 7
39570: PUSH
39571: LD_INT 1
39573: ARRAY
39574: PUSH
39575: LD_VAR 0 7
39579: PUSH
39580: LD_INT 2
39582: ARRAY
39583: PUSH
39584: LD_INT 2
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: PPUSH
39593: CALL_OW 69
39597: PUSH
39598: LD_INT 0
39600: EQUAL
39601: IFFALSE 39654
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39603: LD_VAR 0 1
39607: PPUSH
39608: LD_VAR 0 7
39612: PUSH
39613: LD_INT 1
39615: ARRAY
39616: PPUSH
39617: LD_VAR 0 7
39621: PUSH
39622: LD_INT 2
39624: ARRAY
39625: PPUSH
39626: LD_VAR 0 3
39630: PPUSH
39631: CALL_OW 48
// result := IsPlaced ( unit ) ;
39635: LD_ADDR_VAR 0 4
39639: PUSH
39640: LD_VAR 0 1
39644: PPUSH
39645: CALL_OW 305
39649: ST_TO_ADDR
// exit ;
39650: POP
39651: POP
39652: GO 39658
// end ; end ;
39654: GO 39521
39656: POP
39657: POP
// end ;
39658: LD_VAR 0 4
39662: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39663: LD_INT 0
39665: PPUSH
39666: PPUSH
39667: PPUSH
// if not side or side > 8 then
39668: LD_VAR 0 1
39672: NOT
39673: PUSH
39674: LD_VAR 0 1
39678: PUSH
39679: LD_INT 8
39681: GREATER
39682: OR
39683: IFFALSE 39687
// exit ;
39685: GO 39874
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39687: LD_ADDR_VAR 0 4
39691: PUSH
39692: LD_INT 22
39694: PUSH
39695: LD_VAR 0 1
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 21
39706: PUSH
39707: LD_INT 3
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PPUSH
39718: CALL_OW 69
39722: ST_TO_ADDR
// if not tmp then
39723: LD_VAR 0 4
39727: NOT
39728: IFFALSE 39732
// exit ;
39730: GO 39874
// enable_addtolog := true ;
39732: LD_ADDR_OWVAR 81
39736: PUSH
39737: LD_INT 1
39739: ST_TO_ADDR
// AddToLog ( [ ) ;
39740: LD_STRING [
39742: PPUSH
39743: CALL_OW 561
// for i in tmp do
39747: LD_ADDR_VAR 0 3
39751: PUSH
39752: LD_VAR 0 4
39756: PUSH
39757: FOR_IN
39758: IFFALSE 39865
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39760: LD_STRING [
39762: PUSH
39763: LD_VAR 0 3
39767: PPUSH
39768: CALL_OW 266
39772: STR
39773: PUSH
39774: LD_STRING , 
39776: STR
39777: PUSH
39778: LD_VAR 0 3
39782: PPUSH
39783: CALL_OW 250
39787: STR
39788: PUSH
39789: LD_STRING , 
39791: STR
39792: PUSH
39793: LD_VAR 0 3
39797: PPUSH
39798: CALL_OW 251
39802: STR
39803: PUSH
39804: LD_STRING , 
39806: STR
39807: PUSH
39808: LD_VAR 0 3
39812: PPUSH
39813: CALL_OW 254
39817: STR
39818: PUSH
39819: LD_STRING , 
39821: STR
39822: PUSH
39823: LD_VAR 0 3
39827: PPUSH
39828: LD_INT 1
39830: PPUSH
39831: CALL_OW 268
39835: STR
39836: PUSH
39837: LD_STRING , 
39839: STR
39840: PUSH
39841: LD_VAR 0 3
39845: PPUSH
39846: LD_INT 2
39848: PPUSH
39849: CALL_OW 268
39853: STR
39854: PUSH
39855: LD_STRING ],
39857: STR
39858: PPUSH
39859: CALL_OW 561
// end ;
39863: GO 39757
39865: POP
39866: POP
// AddToLog ( ]; ) ;
39867: LD_STRING ];
39869: PPUSH
39870: CALL_OW 561
// end ;
39874: LD_VAR 0 2
39878: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39879: LD_INT 0
39881: PPUSH
39882: PPUSH
39883: PPUSH
39884: PPUSH
39885: PPUSH
// if not area or not rate or not max then
39886: LD_VAR 0 1
39890: NOT
39891: PUSH
39892: LD_VAR 0 2
39896: NOT
39897: OR
39898: PUSH
39899: LD_VAR 0 4
39903: NOT
39904: OR
39905: IFFALSE 39909
// exit ;
39907: GO 40098
// while 1 do
39909: LD_INT 1
39911: IFFALSE 40098
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39913: LD_ADDR_VAR 0 9
39917: PUSH
39918: LD_VAR 0 1
39922: PPUSH
39923: LD_INT 1
39925: PPUSH
39926: CALL_OW 287
39930: PUSH
39931: LD_INT 10
39933: MUL
39934: ST_TO_ADDR
// r := rate / 10 ;
39935: LD_ADDR_VAR 0 7
39939: PUSH
39940: LD_VAR 0 2
39944: PUSH
39945: LD_INT 10
39947: DIVREAL
39948: ST_TO_ADDR
// time := 1 1$00 ;
39949: LD_ADDR_VAR 0 8
39953: PUSH
39954: LD_INT 2100
39956: ST_TO_ADDR
// if amount < min then
39957: LD_VAR 0 9
39961: PUSH
39962: LD_VAR 0 3
39966: LESS
39967: IFFALSE 39985
// r := r * 2 else
39969: LD_ADDR_VAR 0 7
39973: PUSH
39974: LD_VAR 0 7
39978: PUSH
39979: LD_INT 2
39981: MUL
39982: ST_TO_ADDR
39983: GO 40011
// if amount > max then
39985: LD_VAR 0 9
39989: PUSH
39990: LD_VAR 0 4
39994: GREATER
39995: IFFALSE 40011
// r := r / 2 ;
39997: LD_ADDR_VAR 0 7
40001: PUSH
40002: LD_VAR 0 7
40006: PUSH
40007: LD_INT 2
40009: DIVREAL
40010: ST_TO_ADDR
// time := time / r ;
40011: LD_ADDR_VAR 0 8
40015: PUSH
40016: LD_VAR 0 8
40020: PUSH
40021: LD_VAR 0 7
40025: DIVREAL
40026: ST_TO_ADDR
// if time < 0 then
40027: LD_VAR 0 8
40031: PUSH
40032: LD_INT 0
40034: LESS
40035: IFFALSE 40052
// time := time * - 1 ;
40037: LD_ADDR_VAR 0 8
40041: PUSH
40042: LD_VAR 0 8
40046: PUSH
40047: LD_INT 1
40049: NEG
40050: MUL
40051: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40052: LD_VAR 0 8
40056: PUSH
40057: LD_INT 35
40059: PPUSH
40060: LD_INT 875
40062: PPUSH
40063: CALL_OW 12
40067: PLUS
40068: PPUSH
40069: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40073: LD_INT 1
40075: PPUSH
40076: LD_INT 5
40078: PPUSH
40079: CALL_OW 12
40083: PPUSH
40084: LD_VAR 0 1
40088: PPUSH
40089: LD_INT 1
40091: PPUSH
40092: CALL_OW 55
// end ;
40096: GO 39909
// end ;
40098: LD_VAR 0 5
40102: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40103: LD_INT 0
40105: PPUSH
40106: PPUSH
40107: PPUSH
40108: PPUSH
40109: PPUSH
40110: PPUSH
40111: PPUSH
40112: PPUSH
// if not turrets or not factories then
40113: LD_VAR 0 1
40117: NOT
40118: PUSH
40119: LD_VAR 0 2
40123: NOT
40124: OR
40125: IFFALSE 40129
// exit ;
40127: GO 40436
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40129: LD_ADDR_VAR 0 10
40133: PUSH
40134: LD_INT 5
40136: PUSH
40137: LD_INT 6
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 2
40146: PUSH
40147: LD_INT 4
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 3
40156: PUSH
40157: LD_INT 5
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 24
40171: PUSH
40172: LD_INT 25
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 23
40181: PUSH
40182: LD_INT 27
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 42
40195: PUSH
40196: LD_INT 43
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 44
40205: PUSH
40206: LD_INT 46
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 45
40215: PUSH
40216: LD_INT 47
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: LIST
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: LIST
40232: ST_TO_ADDR
// result := [ ] ;
40233: LD_ADDR_VAR 0 3
40237: PUSH
40238: EMPTY
40239: ST_TO_ADDR
// for i in turrets do
40240: LD_ADDR_VAR 0 4
40244: PUSH
40245: LD_VAR 0 1
40249: PUSH
40250: FOR_IN
40251: IFFALSE 40434
// begin nat := GetNation ( i ) ;
40253: LD_ADDR_VAR 0 7
40257: PUSH
40258: LD_VAR 0 4
40262: PPUSH
40263: CALL_OW 248
40267: ST_TO_ADDR
// weapon := 0 ;
40268: LD_ADDR_VAR 0 8
40272: PUSH
40273: LD_INT 0
40275: ST_TO_ADDR
// if not nat then
40276: LD_VAR 0 7
40280: NOT
40281: IFFALSE 40285
// continue ;
40283: GO 40250
// for j in list [ nat ] do
40285: LD_ADDR_VAR 0 5
40289: PUSH
40290: LD_VAR 0 10
40294: PUSH
40295: LD_VAR 0 7
40299: ARRAY
40300: PUSH
40301: FOR_IN
40302: IFFALSE 40343
// if GetBWeapon ( i ) = j [ 1 ] then
40304: LD_VAR 0 4
40308: PPUSH
40309: CALL_OW 269
40313: PUSH
40314: LD_VAR 0 5
40318: PUSH
40319: LD_INT 1
40321: ARRAY
40322: EQUAL
40323: IFFALSE 40341
// begin weapon := j [ 2 ] ;
40325: LD_ADDR_VAR 0 8
40329: PUSH
40330: LD_VAR 0 5
40334: PUSH
40335: LD_INT 2
40337: ARRAY
40338: ST_TO_ADDR
// break ;
40339: GO 40343
// end ;
40341: GO 40301
40343: POP
40344: POP
// if not weapon then
40345: LD_VAR 0 8
40349: NOT
40350: IFFALSE 40354
// continue ;
40352: GO 40250
// for k in factories do
40354: LD_ADDR_VAR 0 6
40358: PUSH
40359: LD_VAR 0 2
40363: PUSH
40364: FOR_IN
40365: IFFALSE 40430
// begin weapons := AvailableWeaponList ( k ) ;
40367: LD_ADDR_VAR 0 9
40371: PUSH
40372: LD_VAR 0 6
40376: PPUSH
40377: CALL_OW 478
40381: ST_TO_ADDR
// if not weapons then
40382: LD_VAR 0 9
40386: NOT
40387: IFFALSE 40391
// continue ;
40389: GO 40364
// if weapon in weapons then
40391: LD_VAR 0 8
40395: PUSH
40396: LD_VAR 0 9
40400: IN
40401: IFFALSE 40428
// begin result := [ i , weapon ] ;
40403: LD_ADDR_VAR 0 3
40407: PUSH
40408: LD_VAR 0 4
40412: PUSH
40413: LD_VAR 0 8
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: ST_TO_ADDR
// exit ;
40422: POP
40423: POP
40424: POP
40425: POP
40426: GO 40436
// end ; end ;
40428: GO 40364
40430: POP
40431: POP
// end ;
40432: GO 40250
40434: POP
40435: POP
// end ;
40436: LD_VAR 0 3
40440: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40441: LD_INT 0
40443: PPUSH
// if not side or side > 8 then
40444: LD_VAR 0 3
40448: NOT
40449: PUSH
40450: LD_VAR 0 3
40454: PUSH
40455: LD_INT 8
40457: GREATER
40458: OR
40459: IFFALSE 40463
// exit ;
40461: GO 40522
// if not range then
40463: LD_VAR 0 4
40467: NOT
40468: IFFALSE 40479
// range := - 12 ;
40470: LD_ADDR_VAR 0 4
40474: PUSH
40475: LD_INT 12
40477: NEG
40478: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40479: LD_VAR 0 1
40483: PPUSH
40484: LD_VAR 0 2
40488: PPUSH
40489: LD_VAR 0 3
40493: PPUSH
40494: LD_VAR 0 4
40498: PPUSH
40499: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40503: LD_VAR 0 1
40507: PPUSH
40508: LD_VAR 0 2
40512: PPUSH
40513: LD_VAR 0 3
40517: PPUSH
40518: CALL_OW 331
// end ;
40522: LD_VAR 0 5
40526: RET
// export function Video ( mode ) ; begin
40527: LD_INT 0
40529: PPUSH
// ingame_video = mode ;
40530: LD_ADDR_OWVAR 52
40534: PUSH
40535: LD_VAR 0 1
40539: ST_TO_ADDR
// interface_hidden = mode ;
40540: LD_ADDR_OWVAR 54
40544: PUSH
40545: LD_VAR 0 1
40549: ST_TO_ADDR
// end ;
40550: LD_VAR 0 2
40554: RET
// export function Join ( array , element ) ; begin
40555: LD_INT 0
40557: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40558: LD_ADDR_VAR 0 3
40562: PUSH
40563: LD_VAR 0 1
40567: PPUSH
40568: LD_VAR 0 1
40572: PUSH
40573: LD_INT 1
40575: PLUS
40576: PPUSH
40577: LD_VAR 0 2
40581: PPUSH
40582: CALL_OW 1
40586: ST_TO_ADDR
// end ;
40587: LD_VAR 0 3
40591: RET
// export function JoinUnion ( array , element ) ; begin
40592: LD_INT 0
40594: PPUSH
// result := array union element ;
40595: LD_ADDR_VAR 0 3
40599: PUSH
40600: LD_VAR 0 1
40604: PUSH
40605: LD_VAR 0 2
40609: UNION
40610: ST_TO_ADDR
// end ;
40611: LD_VAR 0 3
40615: RET
// export function GetBehemoths ( side ) ; begin
40616: LD_INT 0
40618: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40619: LD_ADDR_VAR 0 2
40623: PUSH
40624: LD_INT 22
40626: PUSH
40627: LD_VAR 0 1
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 31
40638: PUSH
40639: LD_INT 25
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PPUSH
40650: CALL_OW 69
40654: ST_TO_ADDR
// end ;
40655: LD_VAR 0 2
40659: RET
// export function Shuffle ( array ) ; var i , index ; begin
40660: LD_INT 0
40662: PPUSH
40663: PPUSH
40664: PPUSH
// result := [ ] ;
40665: LD_ADDR_VAR 0 2
40669: PUSH
40670: EMPTY
40671: ST_TO_ADDR
// if not array then
40672: LD_VAR 0 1
40676: NOT
40677: IFFALSE 40681
// exit ;
40679: GO 40780
// Randomize ;
40681: CALL_OW 10
// for i = array downto 1 do
40685: LD_ADDR_VAR 0 3
40689: PUSH
40690: DOUBLE
40691: LD_VAR 0 1
40695: INC
40696: ST_TO_ADDR
40697: LD_INT 1
40699: PUSH
40700: FOR_DOWNTO
40701: IFFALSE 40778
// begin index := rand ( 1 , array ) ;
40703: LD_ADDR_VAR 0 4
40707: PUSH
40708: LD_INT 1
40710: PPUSH
40711: LD_VAR 0 1
40715: PPUSH
40716: CALL_OW 12
40720: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40721: LD_ADDR_VAR 0 2
40725: PUSH
40726: LD_VAR 0 2
40730: PPUSH
40731: LD_VAR 0 2
40735: PUSH
40736: LD_INT 1
40738: PLUS
40739: PPUSH
40740: LD_VAR 0 1
40744: PUSH
40745: LD_VAR 0 4
40749: ARRAY
40750: PPUSH
40751: CALL_OW 2
40755: ST_TO_ADDR
// array := Delete ( array , index ) ;
40756: LD_ADDR_VAR 0 1
40760: PUSH
40761: LD_VAR 0 1
40765: PPUSH
40766: LD_VAR 0 4
40770: PPUSH
40771: CALL_OW 3
40775: ST_TO_ADDR
// end ;
40776: GO 40700
40778: POP
40779: POP
// end ;
40780: LD_VAR 0 2
40784: RET
// export function GetBaseMaterials ( base ) ; begin
40785: LD_INT 0
40787: PPUSH
// result := [ 0 , 0 , 0 ] ;
40788: LD_ADDR_VAR 0 2
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: LIST
40806: ST_TO_ADDR
// if not base then
40807: LD_VAR 0 1
40811: NOT
40812: IFFALSE 40816
// exit ;
40814: GO 40865
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40816: LD_ADDR_VAR 0 2
40820: PUSH
40821: LD_VAR 0 1
40825: PPUSH
40826: LD_INT 1
40828: PPUSH
40829: CALL_OW 275
40833: PUSH
40834: LD_VAR 0 1
40838: PPUSH
40839: LD_INT 2
40841: PPUSH
40842: CALL_OW 275
40846: PUSH
40847: LD_VAR 0 1
40851: PPUSH
40852: LD_INT 3
40854: PPUSH
40855: CALL_OW 275
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: LIST
40864: ST_TO_ADDR
// end ;
40865: LD_VAR 0 2
40869: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40870: LD_INT 0
40872: PPUSH
40873: PPUSH
// result := array ;
40874: LD_ADDR_VAR 0 3
40878: PUSH
40879: LD_VAR 0 1
40883: ST_TO_ADDR
// if size >= result then
40884: LD_VAR 0 2
40888: PUSH
40889: LD_VAR 0 3
40893: GREATEREQUAL
40894: IFFALSE 40898
// exit ;
40896: GO 40948
// if size then
40898: LD_VAR 0 2
40902: IFFALSE 40948
// for i := array downto size do
40904: LD_ADDR_VAR 0 4
40908: PUSH
40909: DOUBLE
40910: LD_VAR 0 1
40914: INC
40915: ST_TO_ADDR
40916: LD_VAR 0 2
40920: PUSH
40921: FOR_DOWNTO
40922: IFFALSE 40946
// result := Delete ( result , result ) ;
40924: LD_ADDR_VAR 0 3
40928: PUSH
40929: LD_VAR 0 3
40933: PPUSH
40934: LD_VAR 0 3
40938: PPUSH
40939: CALL_OW 3
40943: ST_TO_ADDR
40944: GO 40921
40946: POP
40947: POP
// end ;
40948: LD_VAR 0 3
40952: RET
// export function ComExit ( unit ) ; var tmp ; begin
40953: LD_INT 0
40955: PPUSH
40956: PPUSH
// if not IsInUnit ( unit ) then
40957: LD_VAR 0 1
40961: PPUSH
40962: CALL_OW 310
40966: NOT
40967: IFFALSE 40971
// exit ;
40969: GO 41031
// tmp := IsInUnit ( unit ) ;
40971: LD_ADDR_VAR 0 3
40975: PUSH
40976: LD_VAR 0 1
40980: PPUSH
40981: CALL_OW 310
40985: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40986: LD_VAR 0 3
40990: PPUSH
40991: CALL_OW 247
40995: PUSH
40996: LD_INT 2
40998: EQUAL
40999: IFFALSE 41012
// ComExitVehicle ( unit ) else
41001: LD_VAR 0 1
41005: PPUSH
41006: CALL_OW 121
41010: GO 41021
// ComExitBuilding ( unit ) ;
41012: LD_VAR 0 1
41016: PPUSH
41017: CALL_OW 122
// result := tmp ;
41021: LD_ADDR_VAR 0 2
41025: PUSH
41026: LD_VAR 0 3
41030: ST_TO_ADDR
// end ;
41031: LD_VAR 0 2
41035: RET
// export function ComExitAll ( units ) ; var i ; begin
41036: LD_INT 0
41038: PPUSH
41039: PPUSH
// if not units then
41040: LD_VAR 0 1
41044: NOT
41045: IFFALSE 41049
// exit ;
41047: GO 41075
// for i in units do
41049: LD_ADDR_VAR 0 3
41053: PUSH
41054: LD_VAR 0 1
41058: PUSH
41059: FOR_IN
41060: IFFALSE 41073
// ComExit ( i ) ;
41062: LD_VAR 0 3
41066: PPUSH
41067: CALL 40953 0 1
41071: GO 41059
41073: POP
41074: POP
// end ;
41075: LD_VAR 0 2
41079: RET
// export function ResetHc ; begin
41080: LD_INT 0
41082: PPUSH
// InitHc ;
41083: CALL_OW 19
// hc_importance := 0 ;
41087: LD_ADDR_OWVAR 32
41091: PUSH
41092: LD_INT 0
41094: ST_TO_ADDR
// end ;
41095: LD_VAR 0 1
41099: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41100: LD_INT 0
41102: PPUSH
41103: PPUSH
41104: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41105: LD_ADDR_VAR 0 6
41109: PUSH
41110: LD_VAR 0 1
41114: PUSH
41115: LD_VAR 0 3
41119: PLUS
41120: PUSH
41121: LD_INT 2
41123: DIV
41124: ST_TO_ADDR
// if _x < 0 then
41125: LD_VAR 0 6
41129: PUSH
41130: LD_INT 0
41132: LESS
41133: IFFALSE 41150
// _x := _x * - 1 ;
41135: LD_ADDR_VAR 0 6
41139: PUSH
41140: LD_VAR 0 6
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: MUL
41149: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41150: LD_ADDR_VAR 0 7
41154: PUSH
41155: LD_VAR 0 2
41159: PUSH
41160: LD_VAR 0 4
41164: PLUS
41165: PUSH
41166: LD_INT 2
41168: DIV
41169: ST_TO_ADDR
// if _y < 0 then
41170: LD_VAR 0 7
41174: PUSH
41175: LD_INT 0
41177: LESS
41178: IFFALSE 41195
// _y := _y * - 1 ;
41180: LD_ADDR_VAR 0 7
41184: PUSH
41185: LD_VAR 0 7
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: MUL
41194: ST_TO_ADDR
// result := [ _x , _y ] ;
41195: LD_ADDR_VAR 0 5
41199: PUSH
41200: LD_VAR 0 6
41204: PUSH
41205: LD_VAR 0 7
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: ST_TO_ADDR
// end ;
41214: LD_VAR 0 5
41218: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41219: LD_INT 0
41221: PPUSH
41222: PPUSH
41223: PPUSH
41224: PPUSH
// task := GetTaskList ( unit ) ;
41225: LD_ADDR_VAR 0 7
41229: PUSH
41230: LD_VAR 0 1
41234: PPUSH
41235: CALL_OW 437
41239: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41240: LD_VAR 0 7
41244: NOT
41245: PUSH
41246: LD_VAR 0 1
41250: PPUSH
41251: LD_VAR 0 2
41255: PPUSH
41256: CALL_OW 308
41260: NOT
41261: AND
41262: IFFALSE 41266
// exit ;
41264: GO 41384
// if IsInArea ( unit , area ) then
41266: LD_VAR 0 1
41270: PPUSH
41271: LD_VAR 0 2
41275: PPUSH
41276: CALL_OW 308
41280: IFFALSE 41298
// begin ComMoveToArea ( unit , goAway ) ;
41282: LD_VAR 0 1
41286: PPUSH
41287: LD_VAR 0 3
41291: PPUSH
41292: CALL_OW 113
// exit ;
41296: GO 41384
// end ; if task [ 1 ] [ 1 ] <> M then
41298: LD_VAR 0 7
41302: PUSH
41303: LD_INT 1
41305: ARRAY
41306: PUSH
41307: LD_INT 1
41309: ARRAY
41310: PUSH
41311: LD_STRING M
41313: NONEQUAL
41314: IFFALSE 41318
// exit ;
41316: GO 41384
// x := task [ 1 ] [ 2 ] ;
41318: LD_ADDR_VAR 0 5
41322: PUSH
41323: LD_VAR 0 7
41327: PUSH
41328: LD_INT 1
41330: ARRAY
41331: PUSH
41332: LD_INT 2
41334: ARRAY
41335: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41336: LD_ADDR_VAR 0 6
41340: PUSH
41341: LD_VAR 0 7
41345: PUSH
41346: LD_INT 1
41348: ARRAY
41349: PUSH
41350: LD_INT 3
41352: ARRAY
41353: ST_TO_ADDR
// if InArea ( x , y , area ) then
41354: LD_VAR 0 5
41358: PPUSH
41359: LD_VAR 0 6
41363: PPUSH
41364: LD_VAR 0 2
41368: PPUSH
41369: CALL_OW 309
41373: IFFALSE 41384
// ComStop ( unit ) ;
41375: LD_VAR 0 1
41379: PPUSH
41380: CALL_OW 141
// end ;
41384: LD_VAR 0 4
41388: RET
// export function Abs ( value ) ; begin
41389: LD_INT 0
41391: PPUSH
// result := value ;
41392: LD_ADDR_VAR 0 2
41396: PUSH
41397: LD_VAR 0 1
41401: ST_TO_ADDR
// if value < 0 then
41402: LD_VAR 0 1
41406: PUSH
41407: LD_INT 0
41409: LESS
41410: IFFALSE 41427
// result := value * - 1 ;
41412: LD_ADDR_VAR 0 2
41416: PUSH
41417: LD_VAR 0 1
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: MUL
41426: ST_TO_ADDR
// end ;
41427: LD_VAR 0 2
41431: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41432: LD_INT 0
41434: PPUSH
41435: PPUSH
41436: PPUSH
41437: PPUSH
41438: PPUSH
41439: PPUSH
41440: PPUSH
41441: PPUSH
// if not unit or not building then
41442: LD_VAR 0 1
41446: NOT
41447: PUSH
41448: LD_VAR 0 2
41452: NOT
41453: OR
41454: IFFALSE 41458
// exit ;
41456: GO 41684
// x := GetX ( building ) ;
41458: LD_ADDR_VAR 0 4
41462: PUSH
41463: LD_VAR 0 2
41467: PPUSH
41468: CALL_OW 250
41472: ST_TO_ADDR
// y := GetY ( building ) ;
41473: LD_ADDR_VAR 0 6
41477: PUSH
41478: LD_VAR 0 2
41482: PPUSH
41483: CALL_OW 251
41487: ST_TO_ADDR
// d := GetDir ( building ) ;
41488: LD_ADDR_VAR 0 8
41492: PUSH
41493: LD_VAR 0 2
41497: PPUSH
41498: CALL_OW 254
41502: ST_TO_ADDR
// r := 4 ;
41503: LD_ADDR_VAR 0 9
41507: PUSH
41508: LD_INT 4
41510: ST_TO_ADDR
// for i := 1 to 5 do
41511: LD_ADDR_VAR 0 10
41515: PUSH
41516: DOUBLE
41517: LD_INT 1
41519: DEC
41520: ST_TO_ADDR
41521: LD_INT 5
41523: PUSH
41524: FOR_TO
41525: IFFALSE 41682
// begin _x := ShiftX ( x , d , r + i ) ;
41527: LD_ADDR_VAR 0 5
41531: PUSH
41532: LD_VAR 0 4
41536: PPUSH
41537: LD_VAR 0 8
41541: PPUSH
41542: LD_VAR 0 9
41546: PUSH
41547: LD_VAR 0 10
41551: PLUS
41552: PPUSH
41553: CALL_OW 272
41557: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41558: LD_ADDR_VAR 0 7
41562: PUSH
41563: LD_VAR 0 6
41567: PPUSH
41568: LD_VAR 0 8
41572: PPUSH
41573: LD_VAR 0 9
41577: PUSH
41578: LD_VAR 0 10
41582: PLUS
41583: PPUSH
41584: CALL_OW 273
41588: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41589: LD_VAR 0 5
41593: PPUSH
41594: LD_VAR 0 7
41598: PPUSH
41599: CALL_OW 488
41603: PUSH
41604: LD_VAR 0 5
41608: PPUSH
41609: LD_VAR 0 7
41613: PPUSH
41614: CALL_OW 428
41618: PPUSH
41619: CALL_OW 247
41623: PUSH
41624: LD_INT 3
41626: PUSH
41627: LD_INT 2
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: IN
41634: NOT
41635: AND
41636: IFFALSE 41680
// begin ComMoveXY ( unit , _x , _y ) ;
41638: LD_VAR 0 1
41642: PPUSH
41643: LD_VAR 0 5
41647: PPUSH
41648: LD_VAR 0 7
41652: PPUSH
41653: CALL_OW 111
// result := [ _x , _y ] ;
41657: LD_ADDR_VAR 0 3
41661: PUSH
41662: LD_VAR 0 5
41666: PUSH
41667: LD_VAR 0 7
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: ST_TO_ADDR
// exit ;
41676: POP
41677: POP
41678: GO 41684
// end ; end ;
41680: GO 41524
41682: POP
41683: POP
// end ;
41684: LD_VAR 0 3
41688: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41689: LD_INT 0
41691: PPUSH
41692: PPUSH
41693: PPUSH
// result := 0 ;
41694: LD_ADDR_VAR 0 3
41698: PUSH
41699: LD_INT 0
41701: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41702: LD_VAR 0 1
41706: PUSH
41707: LD_INT 0
41709: LESS
41710: PUSH
41711: LD_VAR 0 1
41715: PUSH
41716: LD_INT 8
41718: GREATER
41719: OR
41720: PUSH
41721: LD_VAR 0 2
41725: PUSH
41726: LD_INT 0
41728: LESS
41729: OR
41730: PUSH
41731: LD_VAR 0 2
41735: PUSH
41736: LD_INT 8
41738: GREATER
41739: OR
41740: IFFALSE 41744
// exit ;
41742: GO 41819
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41744: LD_ADDR_VAR 0 4
41748: PUSH
41749: LD_INT 22
41751: PUSH
41752: LD_VAR 0 2
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PPUSH
41761: CALL_OW 69
41765: PUSH
41766: FOR_IN
41767: IFFALSE 41817
// begin un := UnitShoot ( i ) ;
41769: LD_ADDR_VAR 0 5
41773: PUSH
41774: LD_VAR 0 4
41778: PPUSH
41779: CALL_OW 504
41783: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41784: LD_VAR 0 5
41788: PPUSH
41789: CALL_OW 255
41793: PUSH
41794: LD_VAR 0 1
41798: EQUAL
41799: IFFALSE 41815
// begin result := un ;
41801: LD_ADDR_VAR 0 3
41805: PUSH
41806: LD_VAR 0 5
41810: ST_TO_ADDR
// exit ;
41811: POP
41812: POP
41813: GO 41819
// end ; end ;
41815: GO 41766
41817: POP
41818: POP
// end ;
41819: LD_VAR 0 3
41823: RET
// export function GetCargoBay ( units ) ; begin
41824: LD_INT 0
41826: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41827: LD_ADDR_VAR 0 2
41831: PUSH
41832: LD_VAR 0 1
41836: PPUSH
41837: LD_INT 2
41839: PUSH
41840: LD_INT 34
41842: PUSH
41843: LD_INT 12
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 34
41852: PUSH
41853: LD_INT 51
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 34
41862: PUSH
41863: LD_INT 32
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 34
41872: PUSH
41873: LD_INT 89
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: PPUSH
41887: CALL_OW 72
41891: ST_TO_ADDR
// end ;
41892: LD_VAR 0 2
41896: RET
// export function Negate ( value ) ; begin
41897: LD_INT 0
41899: PPUSH
// result := not value ;
41900: LD_ADDR_VAR 0 2
41904: PUSH
41905: LD_VAR 0 1
41909: NOT
41910: ST_TO_ADDR
// end ;
41911: LD_VAR 0 2
41915: RET
// export function Inc ( value ) ; begin
41916: LD_INT 0
41918: PPUSH
// result := value + 1 ;
41919: LD_ADDR_VAR 0 2
41923: PUSH
41924: LD_VAR 0 1
41928: PUSH
41929: LD_INT 1
41931: PLUS
41932: ST_TO_ADDR
// end ;
41933: LD_VAR 0 2
41937: RET
// export function Dec ( value ) ; begin
41938: LD_INT 0
41940: PPUSH
// result := value - 1 ;
41941: LD_ADDR_VAR 0 2
41945: PUSH
41946: LD_VAR 0 1
41950: PUSH
41951: LD_INT 1
41953: MINUS
41954: ST_TO_ADDR
// end ;
41955: LD_VAR 0 2
41959: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41960: LD_INT 0
41962: PPUSH
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
41968: PPUSH
41969: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41970: LD_VAR 0 1
41974: PPUSH
41975: LD_VAR 0 2
41979: PPUSH
41980: CALL_OW 488
41984: NOT
41985: PUSH
41986: LD_VAR 0 3
41990: PPUSH
41991: LD_VAR 0 4
41995: PPUSH
41996: CALL_OW 488
42000: NOT
42001: OR
42002: IFFALSE 42015
// begin result := - 1 ;
42004: LD_ADDR_VAR 0 5
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: ST_TO_ADDR
// exit ;
42013: GO 42250
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42015: LD_ADDR_VAR 0 12
42019: PUSH
42020: LD_VAR 0 1
42024: PPUSH
42025: LD_VAR 0 2
42029: PPUSH
42030: LD_VAR 0 3
42034: PPUSH
42035: LD_VAR 0 4
42039: PPUSH
42040: CALL 41100 0 4
42044: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42045: LD_ADDR_VAR 0 11
42049: PUSH
42050: LD_VAR 0 1
42054: PPUSH
42055: LD_VAR 0 2
42059: PPUSH
42060: LD_VAR 0 12
42064: PUSH
42065: LD_INT 1
42067: ARRAY
42068: PPUSH
42069: LD_VAR 0 12
42073: PUSH
42074: LD_INT 2
42076: ARRAY
42077: PPUSH
42078: CALL_OW 298
42082: ST_TO_ADDR
// distance := 9999 ;
42083: LD_ADDR_VAR 0 10
42087: PUSH
42088: LD_INT 9999
42090: ST_TO_ADDR
// for i := 0 to 5 do
42091: LD_ADDR_VAR 0 6
42095: PUSH
42096: DOUBLE
42097: LD_INT 0
42099: DEC
42100: ST_TO_ADDR
42101: LD_INT 5
42103: PUSH
42104: FOR_TO
42105: IFFALSE 42248
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42107: LD_ADDR_VAR 0 7
42111: PUSH
42112: LD_VAR 0 1
42116: PPUSH
42117: LD_VAR 0 6
42121: PPUSH
42122: LD_VAR 0 11
42126: PPUSH
42127: CALL_OW 272
42131: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42132: LD_ADDR_VAR 0 8
42136: PUSH
42137: LD_VAR 0 2
42141: PPUSH
42142: LD_VAR 0 6
42146: PPUSH
42147: LD_VAR 0 11
42151: PPUSH
42152: CALL_OW 273
42156: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42157: LD_VAR 0 7
42161: PPUSH
42162: LD_VAR 0 8
42166: PPUSH
42167: CALL_OW 488
42171: NOT
42172: IFFALSE 42176
// continue ;
42174: GO 42104
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42176: LD_ADDR_VAR 0 9
42180: PUSH
42181: LD_VAR 0 12
42185: PUSH
42186: LD_INT 1
42188: ARRAY
42189: PPUSH
42190: LD_VAR 0 12
42194: PUSH
42195: LD_INT 2
42197: ARRAY
42198: PPUSH
42199: LD_VAR 0 7
42203: PPUSH
42204: LD_VAR 0 8
42208: PPUSH
42209: CALL_OW 298
42213: ST_TO_ADDR
// if tmp < distance then
42214: LD_VAR 0 9
42218: PUSH
42219: LD_VAR 0 10
42223: LESS
42224: IFFALSE 42246
// begin result := i ;
42226: LD_ADDR_VAR 0 5
42230: PUSH
42231: LD_VAR 0 6
42235: ST_TO_ADDR
// distance := tmp ;
42236: LD_ADDR_VAR 0 10
42240: PUSH
42241: LD_VAR 0 9
42245: ST_TO_ADDR
// end ; end ;
42246: GO 42104
42248: POP
42249: POP
// end ;
42250: LD_VAR 0 5
42254: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42255: LD_INT 0
42257: PPUSH
42258: PPUSH
// if not driver or not IsInUnit ( driver ) then
42259: LD_VAR 0 1
42263: NOT
42264: PUSH
42265: LD_VAR 0 1
42269: PPUSH
42270: CALL_OW 310
42274: NOT
42275: OR
42276: IFFALSE 42280
// exit ;
42278: GO 42370
// vehicle := IsInUnit ( driver ) ;
42280: LD_ADDR_VAR 0 3
42284: PUSH
42285: LD_VAR 0 1
42289: PPUSH
42290: CALL_OW 310
42294: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42295: LD_VAR 0 1
42299: PPUSH
42300: LD_STRING \
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: PUSH
42330: LD_STRING E
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_VAR 0 3
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PPUSH
42366: CALL_OW 446
// end ;
42370: LD_VAR 0 2
42374: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42375: LD_INT 0
42377: PPUSH
42378: PPUSH
// if not driver or not IsInUnit ( driver ) then
42379: LD_VAR 0 1
42383: NOT
42384: PUSH
42385: LD_VAR 0 1
42389: PPUSH
42390: CALL_OW 310
42394: NOT
42395: OR
42396: IFFALSE 42400
// exit ;
42398: GO 42490
// vehicle := IsInUnit ( driver ) ;
42400: LD_ADDR_VAR 0 3
42404: PUSH
42405: LD_VAR 0 1
42409: PPUSH
42410: CALL_OW 310
42414: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42415: LD_VAR 0 1
42419: PPUSH
42420: LD_STRING \
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: PUSH
42450: LD_STRING E
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: LD_VAR 0 3
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PPUSH
42486: CALL_OW 447
// end ;
42490: LD_VAR 0 2
42494: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42495: LD_INT 0
42497: PPUSH
42498: PPUSH
42499: PPUSH
// tmp := [ ] ;
42500: LD_ADDR_VAR 0 5
42504: PUSH
42505: EMPTY
42506: ST_TO_ADDR
// for i in units do
42507: LD_ADDR_VAR 0 4
42511: PUSH
42512: LD_VAR 0 1
42516: PUSH
42517: FOR_IN
42518: IFFALSE 42556
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42520: LD_ADDR_VAR 0 5
42524: PUSH
42525: LD_VAR 0 5
42529: PPUSH
42530: LD_VAR 0 5
42534: PUSH
42535: LD_INT 1
42537: PLUS
42538: PPUSH
42539: LD_VAR 0 4
42543: PPUSH
42544: CALL_OW 256
42548: PPUSH
42549: CALL_OW 2
42553: ST_TO_ADDR
42554: GO 42517
42556: POP
42557: POP
// if not tmp then
42558: LD_VAR 0 5
42562: NOT
42563: IFFALSE 42567
// exit ;
42565: GO 42615
// if asc then
42567: LD_VAR 0 2
42571: IFFALSE 42595
// result := SortListByListAsc ( units , tmp ) else
42573: LD_ADDR_VAR 0 3
42577: PUSH
42578: LD_VAR 0 1
42582: PPUSH
42583: LD_VAR 0 5
42587: PPUSH
42588: CALL_OW 76
42592: ST_TO_ADDR
42593: GO 42615
// result := SortListByListDesc ( units , tmp ) ;
42595: LD_ADDR_VAR 0 3
42599: PUSH
42600: LD_VAR 0 1
42604: PPUSH
42605: LD_VAR 0 5
42609: PPUSH
42610: CALL_OW 77
42614: ST_TO_ADDR
// end ;
42615: LD_VAR 0 3
42619: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42620: LD_INT 0
42622: PPUSH
42623: PPUSH
// task := GetTaskList ( mech ) ;
42624: LD_ADDR_VAR 0 4
42628: PUSH
42629: LD_VAR 0 1
42633: PPUSH
42634: CALL_OW 437
42638: ST_TO_ADDR
// if not task then
42639: LD_VAR 0 4
42643: NOT
42644: IFFALSE 42648
// exit ;
42646: GO 42690
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42648: LD_ADDR_VAR 0 3
42652: PUSH
42653: LD_VAR 0 4
42657: PUSH
42658: LD_INT 1
42660: ARRAY
42661: PUSH
42662: LD_INT 1
42664: ARRAY
42665: PUSH
42666: LD_STRING r
42668: EQUAL
42669: PUSH
42670: LD_VAR 0 4
42674: PUSH
42675: LD_INT 1
42677: ARRAY
42678: PUSH
42679: LD_INT 4
42681: ARRAY
42682: PUSH
42683: LD_VAR 0 2
42687: EQUAL
42688: AND
42689: ST_TO_ADDR
// end ;
42690: LD_VAR 0 3
42694: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42695: LD_INT 0
42697: PPUSH
// SetDir ( unit , d ) ;
42698: LD_VAR 0 1
42702: PPUSH
42703: LD_VAR 0 4
42707: PPUSH
42708: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
42712: LD_ADDR_VAR 0 6
42716: PUSH
42717: LD_VAR 0 1
42721: PPUSH
42722: LD_VAR 0 2
42726: PPUSH
42727: LD_VAR 0 3
42731: PPUSH
42732: LD_VAR 0 5
42736: PPUSH
42737: CALL_OW 48
42741: ST_TO_ADDR
// end ;
42742: LD_VAR 0 6
42746: RET
// export function ToNaturalNumber ( number ) ; begin
42747: LD_INT 0
42749: PPUSH
// result := number div 1 ;
42750: LD_ADDR_VAR 0 2
42754: PUSH
42755: LD_VAR 0 1
42759: PUSH
42760: LD_INT 1
42762: DIV
42763: ST_TO_ADDR
// if number < 0 then
42764: LD_VAR 0 1
42768: PUSH
42769: LD_INT 0
42771: LESS
42772: IFFALSE 42782
// result := 0 ;
42774: LD_ADDR_VAR 0 2
42778: PUSH
42779: LD_INT 0
42781: ST_TO_ADDR
// end ;
42782: LD_VAR 0 2
42786: RET
// export function SortByClass ( units , class ) ; var un ; begin
42787: LD_INT 0
42789: PPUSH
42790: PPUSH
// if not units or not class then
42791: LD_VAR 0 1
42795: NOT
42796: PUSH
42797: LD_VAR 0 2
42801: NOT
42802: OR
42803: IFFALSE 42807
// exit ;
42805: GO 42902
// result := [ ] ;
42807: LD_ADDR_VAR 0 3
42811: PUSH
42812: EMPTY
42813: ST_TO_ADDR
// for un in units do
42814: LD_ADDR_VAR 0 4
42818: PUSH
42819: LD_VAR 0 1
42823: PUSH
42824: FOR_IN
42825: IFFALSE 42900
// if GetClass ( un ) = class then
42827: LD_VAR 0 4
42831: PPUSH
42832: CALL_OW 257
42836: PUSH
42837: LD_VAR 0 2
42841: EQUAL
42842: IFFALSE 42869
// result := Insert ( result , 1 , un ) else
42844: LD_ADDR_VAR 0 3
42848: PUSH
42849: LD_VAR 0 3
42853: PPUSH
42854: LD_INT 1
42856: PPUSH
42857: LD_VAR 0 4
42861: PPUSH
42862: CALL_OW 2
42866: ST_TO_ADDR
42867: GO 42898
// result := Replace ( result , result + 1 , un ) ;
42869: LD_ADDR_VAR 0 3
42873: PUSH
42874: LD_VAR 0 3
42878: PPUSH
42879: LD_VAR 0 3
42883: PUSH
42884: LD_INT 1
42886: PLUS
42887: PPUSH
42888: LD_VAR 0 4
42892: PPUSH
42893: CALL_OW 1
42897: ST_TO_ADDR
42898: GO 42824
42900: POP
42901: POP
// end ;
42902: LD_VAR 0 3
42906: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42907: LD_INT 0
42909: PPUSH
42910: PPUSH
42911: PPUSH
42912: PPUSH
42913: PPUSH
42914: PPUSH
42915: PPUSH
// result := [ ] ;
42916: LD_ADDR_VAR 0 4
42920: PUSH
42921: EMPTY
42922: ST_TO_ADDR
// if x - r < 0 then
42923: LD_VAR 0 1
42927: PUSH
42928: LD_VAR 0 3
42932: MINUS
42933: PUSH
42934: LD_INT 0
42936: LESS
42937: IFFALSE 42949
// min_x := 0 else
42939: LD_ADDR_VAR 0 8
42943: PUSH
42944: LD_INT 0
42946: ST_TO_ADDR
42947: GO 42965
// min_x := x - r ;
42949: LD_ADDR_VAR 0 8
42953: PUSH
42954: LD_VAR 0 1
42958: PUSH
42959: LD_VAR 0 3
42963: MINUS
42964: ST_TO_ADDR
// if y - r < 0 then
42965: LD_VAR 0 2
42969: PUSH
42970: LD_VAR 0 3
42974: MINUS
42975: PUSH
42976: LD_INT 0
42978: LESS
42979: IFFALSE 42991
// min_y := 0 else
42981: LD_ADDR_VAR 0 7
42985: PUSH
42986: LD_INT 0
42988: ST_TO_ADDR
42989: GO 43007
// min_y := y - r ;
42991: LD_ADDR_VAR 0 7
42995: PUSH
42996: LD_VAR 0 2
43000: PUSH
43001: LD_VAR 0 3
43005: MINUS
43006: ST_TO_ADDR
// max_x := x + r ;
43007: LD_ADDR_VAR 0 9
43011: PUSH
43012: LD_VAR 0 1
43016: PUSH
43017: LD_VAR 0 3
43021: PLUS
43022: ST_TO_ADDR
// max_y := y + r ;
43023: LD_ADDR_VAR 0 10
43027: PUSH
43028: LD_VAR 0 2
43032: PUSH
43033: LD_VAR 0 3
43037: PLUS
43038: ST_TO_ADDR
// for _x = min_x to max_x do
43039: LD_ADDR_VAR 0 5
43043: PUSH
43044: DOUBLE
43045: LD_VAR 0 8
43049: DEC
43050: ST_TO_ADDR
43051: LD_VAR 0 9
43055: PUSH
43056: FOR_TO
43057: IFFALSE 43158
// for _y = min_y to max_y do
43059: LD_ADDR_VAR 0 6
43063: PUSH
43064: DOUBLE
43065: LD_VAR 0 7
43069: DEC
43070: ST_TO_ADDR
43071: LD_VAR 0 10
43075: PUSH
43076: FOR_TO
43077: IFFALSE 43154
// begin if not ValidHex ( _x , _y ) then
43079: LD_VAR 0 5
43083: PPUSH
43084: LD_VAR 0 6
43088: PPUSH
43089: CALL_OW 488
43093: NOT
43094: IFFALSE 43098
// continue ;
43096: GO 43076
// if GetResourceTypeXY ( _x , _y ) then
43098: LD_VAR 0 5
43102: PPUSH
43103: LD_VAR 0 6
43107: PPUSH
43108: CALL_OW 283
43112: IFFALSE 43152
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43114: LD_ADDR_VAR 0 4
43118: PUSH
43119: LD_VAR 0 4
43123: PPUSH
43124: LD_VAR 0 4
43128: PUSH
43129: LD_INT 1
43131: PLUS
43132: PPUSH
43133: LD_VAR 0 5
43137: PUSH
43138: LD_VAR 0 6
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PPUSH
43147: CALL_OW 1
43151: ST_TO_ADDR
// end ;
43152: GO 43076
43154: POP
43155: POP
43156: GO 43056
43158: POP
43159: POP
// end ;
43160: LD_VAR 0 4
43164: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43165: LD_INT 0
43167: PPUSH
43168: PPUSH
43169: PPUSH
43170: PPUSH
43171: PPUSH
43172: PPUSH
43173: PPUSH
43174: PPUSH
// if not units then
43175: LD_VAR 0 1
43179: NOT
43180: IFFALSE 43184
// exit ;
43182: GO 43712
// result := UnitFilter ( units , [ f_ok ] ) ;
43184: LD_ADDR_VAR 0 3
43188: PUSH
43189: LD_VAR 0 1
43193: PPUSH
43194: LD_INT 50
43196: PUSH
43197: EMPTY
43198: LIST
43199: PPUSH
43200: CALL_OW 72
43204: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43205: LD_ADDR_VAR 0 8
43209: PUSH
43210: LD_VAR 0 1
43214: PUSH
43215: LD_INT 1
43217: ARRAY
43218: PPUSH
43219: CALL_OW 255
43223: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43224: LD_ADDR_VAR 0 10
43228: PUSH
43229: LD_INT 29
43231: PUSH
43232: LD_INT 91
43234: PUSH
43235: LD_INT 49
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: LIST
43242: ST_TO_ADDR
// if not result then
43243: LD_VAR 0 3
43247: NOT
43248: IFFALSE 43252
// exit ;
43250: GO 43712
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43252: LD_ADDR_VAR 0 5
43256: PUSH
43257: LD_INT 81
43259: PUSH
43260: LD_VAR 0 8
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PPUSH
43269: CALL_OW 69
43273: ST_TO_ADDR
// for i in result do
43274: LD_ADDR_VAR 0 4
43278: PUSH
43279: LD_VAR 0 3
43283: PUSH
43284: FOR_IN
43285: IFFALSE 43710
// begin tag := GetTag ( i ) + 1 ;
43287: LD_ADDR_VAR 0 9
43291: PUSH
43292: LD_VAR 0 4
43296: PPUSH
43297: CALL_OW 110
43301: PUSH
43302: LD_INT 1
43304: PLUS
43305: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43306: LD_ADDR_VAR 0 7
43310: PUSH
43311: LD_VAR 0 4
43315: PPUSH
43316: CALL_OW 250
43320: PPUSH
43321: LD_VAR 0 4
43325: PPUSH
43326: CALL_OW 251
43330: PPUSH
43331: LD_INT 4
43333: PPUSH
43334: CALL 42907 0 3
43338: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43339: LD_VAR 0 4
43343: PPUSH
43344: CALL_OW 247
43348: PUSH
43349: LD_INT 2
43351: EQUAL
43352: PUSH
43353: LD_VAR 0 7
43357: PUSH
43358: LD_INT 2
43360: GREATER
43361: AND
43362: PUSH
43363: LD_VAR 0 4
43367: PPUSH
43368: CALL_OW 264
43372: PUSH
43373: LD_VAR 0 10
43377: IN
43378: NOT
43379: AND
43380: IFFALSE 43419
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43382: LD_VAR 0 4
43386: PPUSH
43387: LD_VAR 0 7
43391: PUSH
43392: LD_INT 1
43394: ARRAY
43395: PUSH
43396: LD_INT 1
43398: ARRAY
43399: PPUSH
43400: LD_VAR 0 7
43404: PUSH
43405: LD_INT 1
43407: ARRAY
43408: PUSH
43409: LD_INT 2
43411: ARRAY
43412: PPUSH
43413: CALL_OW 116
43417: GO 43708
// if path > tag then
43419: LD_VAR 0 2
43423: PUSH
43424: LD_VAR 0 9
43428: GREATER
43429: IFFALSE 43637
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43431: LD_ADDR_VAR 0 6
43435: PUSH
43436: LD_VAR 0 5
43440: PPUSH
43441: LD_INT 91
43443: PUSH
43444: LD_VAR 0 4
43448: PUSH
43449: LD_INT 8
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: LIST
43456: PPUSH
43457: CALL_OW 72
43461: ST_TO_ADDR
// if nearEnemy then
43462: LD_VAR 0 6
43466: IFFALSE 43535
// begin if GetWeapon ( i ) = ru_time_lapser then
43468: LD_VAR 0 4
43472: PPUSH
43473: CALL_OW 264
43477: PUSH
43478: LD_INT 49
43480: EQUAL
43481: IFFALSE 43509
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43483: LD_VAR 0 4
43487: PPUSH
43488: LD_VAR 0 6
43492: PPUSH
43493: LD_VAR 0 4
43497: PPUSH
43498: CALL_OW 74
43502: PPUSH
43503: CALL_OW 112
43507: GO 43533
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43509: LD_VAR 0 4
43513: PPUSH
43514: LD_VAR 0 6
43518: PPUSH
43519: LD_VAR 0 4
43523: PPUSH
43524: CALL_OW 74
43528: PPUSH
43529: CALL 44783 0 2
// end else
43533: GO 43635
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43535: LD_VAR 0 4
43539: PPUSH
43540: LD_VAR 0 2
43544: PUSH
43545: LD_VAR 0 9
43549: ARRAY
43550: PUSH
43551: LD_INT 1
43553: ARRAY
43554: PPUSH
43555: LD_VAR 0 2
43559: PUSH
43560: LD_VAR 0 9
43564: ARRAY
43565: PUSH
43566: LD_INT 2
43568: ARRAY
43569: PPUSH
43570: CALL_OW 297
43574: PUSH
43575: LD_INT 6
43577: GREATER
43578: IFFALSE 43621
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43580: LD_VAR 0 4
43584: PPUSH
43585: LD_VAR 0 2
43589: PUSH
43590: LD_VAR 0 9
43594: ARRAY
43595: PUSH
43596: LD_INT 1
43598: ARRAY
43599: PPUSH
43600: LD_VAR 0 2
43604: PUSH
43605: LD_VAR 0 9
43609: ARRAY
43610: PUSH
43611: LD_INT 2
43613: ARRAY
43614: PPUSH
43615: CALL_OW 114
43619: GO 43635
// SetTag ( i , tag ) ;
43621: LD_VAR 0 4
43625: PPUSH
43626: LD_VAR 0 9
43630: PPUSH
43631: CALL_OW 109
// end else
43635: GO 43708
// if enemy then
43637: LD_VAR 0 5
43641: IFFALSE 43708
// begin if GetWeapon ( i ) = ru_time_lapser then
43643: LD_VAR 0 4
43647: PPUSH
43648: CALL_OW 264
43652: PUSH
43653: LD_INT 49
43655: EQUAL
43656: IFFALSE 43684
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43658: LD_VAR 0 4
43662: PPUSH
43663: LD_VAR 0 5
43667: PPUSH
43668: LD_VAR 0 4
43672: PPUSH
43673: CALL_OW 74
43677: PPUSH
43678: CALL_OW 112
43682: GO 43708
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43684: LD_VAR 0 4
43688: PPUSH
43689: LD_VAR 0 5
43693: PPUSH
43694: LD_VAR 0 4
43698: PPUSH
43699: CALL_OW 74
43703: PPUSH
43704: CALL 44783 0 2
// end ; end ;
43708: GO 43284
43710: POP
43711: POP
// end ;
43712: LD_VAR 0 3
43716: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43717: LD_INT 0
43719: PPUSH
43720: PPUSH
43721: PPUSH
// if not unit or IsInUnit ( unit ) then
43722: LD_VAR 0 1
43726: NOT
43727: PUSH
43728: LD_VAR 0 1
43732: PPUSH
43733: CALL_OW 310
43737: OR
43738: IFFALSE 43742
// exit ;
43740: GO 43833
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43742: LD_ADDR_VAR 0 4
43746: PUSH
43747: LD_VAR 0 1
43751: PPUSH
43752: CALL_OW 250
43756: PPUSH
43757: LD_VAR 0 2
43761: PPUSH
43762: LD_INT 1
43764: PPUSH
43765: CALL_OW 272
43769: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43770: LD_ADDR_VAR 0 5
43774: PUSH
43775: LD_VAR 0 1
43779: PPUSH
43780: CALL_OW 251
43784: PPUSH
43785: LD_VAR 0 2
43789: PPUSH
43790: LD_INT 1
43792: PPUSH
43793: CALL_OW 273
43797: ST_TO_ADDR
// if ValidHex ( x , y ) then
43798: LD_VAR 0 4
43802: PPUSH
43803: LD_VAR 0 5
43807: PPUSH
43808: CALL_OW 488
43812: IFFALSE 43833
// ComTurnXY ( unit , x , y ) ;
43814: LD_VAR 0 1
43818: PPUSH
43819: LD_VAR 0 4
43823: PPUSH
43824: LD_VAR 0 5
43828: PPUSH
43829: CALL_OW 118
// end ;
43833: LD_VAR 0 3
43837: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43838: LD_INT 0
43840: PPUSH
43841: PPUSH
// result := false ;
43842: LD_ADDR_VAR 0 3
43846: PUSH
43847: LD_INT 0
43849: ST_TO_ADDR
// if not units then
43850: LD_VAR 0 2
43854: NOT
43855: IFFALSE 43859
// exit ;
43857: GO 43904
// for i in units do
43859: LD_ADDR_VAR 0 4
43863: PUSH
43864: LD_VAR 0 2
43868: PUSH
43869: FOR_IN
43870: IFFALSE 43902
// if See ( side , i ) then
43872: LD_VAR 0 1
43876: PPUSH
43877: LD_VAR 0 4
43881: PPUSH
43882: CALL_OW 292
43886: IFFALSE 43900
// begin result := true ;
43888: LD_ADDR_VAR 0 3
43892: PUSH
43893: LD_INT 1
43895: ST_TO_ADDR
// exit ;
43896: POP
43897: POP
43898: GO 43904
// end ;
43900: GO 43869
43902: POP
43903: POP
// end ;
43904: LD_VAR 0 3
43908: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43909: LD_INT 0
43911: PPUSH
43912: PPUSH
43913: PPUSH
43914: PPUSH
// if not unit or not points then
43915: LD_VAR 0 1
43919: NOT
43920: PUSH
43921: LD_VAR 0 2
43925: NOT
43926: OR
43927: IFFALSE 43931
// exit ;
43929: GO 44021
// dist := 99999 ;
43931: LD_ADDR_VAR 0 5
43935: PUSH
43936: LD_INT 99999
43938: ST_TO_ADDR
// for i in points do
43939: LD_ADDR_VAR 0 4
43943: PUSH
43944: LD_VAR 0 2
43948: PUSH
43949: FOR_IN
43950: IFFALSE 44019
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43952: LD_ADDR_VAR 0 6
43956: PUSH
43957: LD_VAR 0 1
43961: PPUSH
43962: LD_VAR 0 4
43966: PUSH
43967: LD_INT 1
43969: ARRAY
43970: PPUSH
43971: LD_VAR 0 4
43975: PUSH
43976: LD_INT 2
43978: ARRAY
43979: PPUSH
43980: CALL_OW 297
43984: ST_TO_ADDR
// if tmpDist < dist then
43985: LD_VAR 0 6
43989: PUSH
43990: LD_VAR 0 5
43994: LESS
43995: IFFALSE 44017
// begin result := i ;
43997: LD_ADDR_VAR 0 3
44001: PUSH
44002: LD_VAR 0 4
44006: ST_TO_ADDR
// dist := tmpDist ;
44007: LD_ADDR_VAR 0 5
44011: PUSH
44012: LD_VAR 0 6
44016: ST_TO_ADDR
// end ; end ;
44017: GO 43949
44019: POP
44020: POP
// end ;
44021: LD_VAR 0 3
44025: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44026: LD_INT 0
44028: PPUSH
// uc_side := side ;
44029: LD_ADDR_OWVAR 20
44033: PUSH
44034: LD_VAR 0 1
44038: ST_TO_ADDR
// uc_nation := 3 ;
44039: LD_ADDR_OWVAR 21
44043: PUSH
44044: LD_INT 3
44046: ST_TO_ADDR
// vc_chassis := 25 ;
44047: LD_ADDR_OWVAR 37
44051: PUSH
44052: LD_INT 25
44054: ST_TO_ADDR
// vc_engine := engine_siberite ;
44055: LD_ADDR_OWVAR 39
44059: PUSH
44060: LD_INT 3
44062: ST_TO_ADDR
// vc_control := control_computer ;
44063: LD_ADDR_OWVAR 38
44067: PUSH
44068: LD_INT 3
44070: ST_TO_ADDR
// vc_weapon := 59 ;
44071: LD_ADDR_OWVAR 40
44075: PUSH
44076: LD_INT 59
44078: ST_TO_ADDR
// result := CreateVehicle ;
44079: LD_ADDR_VAR 0 5
44083: PUSH
44084: CALL_OW 45
44088: ST_TO_ADDR
// SetDir ( result , d ) ;
44089: LD_VAR 0 5
44093: PPUSH
44094: LD_VAR 0 4
44098: PPUSH
44099: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44103: LD_VAR 0 5
44107: PPUSH
44108: LD_VAR 0 2
44112: PPUSH
44113: LD_VAR 0 3
44117: PPUSH
44118: LD_INT 0
44120: PPUSH
44121: CALL_OW 48
// end ;
44125: LD_VAR 0 5
44129: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44130: LD_INT 0
44132: PPUSH
44133: PPUSH
44134: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44135: LD_ADDR_VAR 0 2
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44158: LD_VAR 0 1
44162: NOT
44163: PUSH
44164: LD_VAR 0 1
44168: PPUSH
44169: CALL_OW 264
44173: PUSH
44174: LD_INT 12
44176: PUSH
44177: LD_INT 51
44179: PUSH
44180: LD_INT 32
44182: PUSH
44183: LD_INT 89
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: IN
44192: NOT
44193: OR
44194: IFFALSE 44198
// exit ;
44196: GO 44296
// for i := 1 to 3 do
44198: LD_ADDR_VAR 0 3
44202: PUSH
44203: DOUBLE
44204: LD_INT 1
44206: DEC
44207: ST_TO_ADDR
44208: LD_INT 3
44210: PUSH
44211: FOR_TO
44212: IFFALSE 44294
// begin tmp := GetCargo ( cargo , i ) ;
44214: LD_ADDR_VAR 0 4
44218: PUSH
44219: LD_VAR 0 1
44223: PPUSH
44224: LD_VAR 0 3
44228: PPUSH
44229: CALL_OW 289
44233: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44234: LD_ADDR_VAR 0 2
44238: PUSH
44239: LD_VAR 0 2
44243: PPUSH
44244: LD_VAR 0 3
44248: PPUSH
44249: LD_VAR 0 4
44253: PPUSH
44254: CALL_OW 1
44258: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44259: LD_ADDR_VAR 0 2
44263: PUSH
44264: LD_VAR 0 2
44268: PPUSH
44269: LD_INT 4
44271: PPUSH
44272: LD_VAR 0 2
44276: PUSH
44277: LD_INT 4
44279: ARRAY
44280: PUSH
44281: LD_VAR 0 4
44285: PLUS
44286: PPUSH
44287: CALL_OW 1
44291: ST_TO_ADDR
// end ;
44292: GO 44211
44294: POP
44295: POP
// end ;
44296: LD_VAR 0 2
44300: RET
// export function Length ( array ) ; begin
44301: LD_INT 0
44303: PPUSH
// result := array + 0 ;
44304: LD_ADDR_VAR 0 2
44308: PUSH
44309: LD_VAR 0 1
44313: PUSH
44314: LD_INT 0
44316: PLUS
44317: ST_TO_ADDR
// end ;
44318: LD_VAR 0 2
44322: RET
// export function PrepareArray ( array ) ; begin
44323: LD_INT 0
44325: PPUSH
// result := array diff 0 ;
44326: LD_ADDR_VAR 0 2
44330: PUSH
44331: LD_VAR 0 1
44335: PUSH
44336: LD_INT 0
44338: DIFF
44339: ST_TO_ADDR
// if not result [ 1 ] then
44340: LD_VAR 0 2
44344: PUSH
44345: LD_INT 1
44347: ARRAY
44348: NOT
44349: IFFALSE 44369
// result := Delete ( result , 1 ) ;
44351: LD_ADDR_VAR 0 2
44355: PUSH
44356: LD_VAR 0 2
44360: PPUSH
44361: LD_INT 1
44363: PPUSH
44364: CALL_OW 3
44368: ST_TO_ADDR
// end ;
44369: LD_VAR 0 2
44373: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44374: LD_INT 0
44376: PPUSH
44377: PPUSH
44378: PPUSH
44379: PPUSH
// sibRocketRange := 25 ;
44380: LD_ADDR_VAR 0 6
44384: PUSH
44385: LD_INT 25
44387: ST_TO_ADDR
// result := false ;
44388: LD_ADDR_VAR 0 4
44392: PUSH
44393: LD_INT 0
44395: ST_TO_ADDR
// for i := 0 to 5 do
44396: LD_ADDR_VAR 0 5
44400: PUSH
44401: DOUBLE
44402: LD_INT 0
44404: DEC
44405: ST_TO_ADDR
44406: LD_INT 5
44408: PUSH
44409: FOR_TO
44410: IFFALSE 44477
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44412: LD_VAR 0 1
44416: PPUSH
44417: LD_VAR 0 5
44421: PPUSH
44422: LD_VAR 0 6
44426: PPUSH
44427: CALL_OW 272
44431: PPUSH
44432: LD_VAR 0 2
44436: PPUSH
44437: LD_VAR 0 5
44441: PPUSH
44442: LD_VAR 0 6
44446: PPUSH
44447: CALL_OW 273
44451: PPUSH
44452: LD_VAR 0 3
44456: PPUSH
44457: CALL_OW 309
44461: IFFALSE 44475
// begin result := true ;
44463: LD_ADDR_VAR 0 4
44467: PUSH
44468: LD_INT 1
44470: ST_TO_ADDR
// exit ;
44471: POP
44472: POP
44473: GO 44479
// end ;
44475: GO 44409
44477: POP
44478: POP
// end ;
44479: LD_VAR 0 4
44483: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44484: LD_INT 0
44486: PPUSH
44487: PPUSH
44488: PPUSH
// if btype = b_depot then
44489: LD_VAR 0 2
44493: PUSH
44494: LD_INT 0
44496: EQUAL
44497: IFFALSE 44509
// begin result := true ;
44499: LD_ADDR_VAR 0 3
44503: PUSH
44504: LD_INT 1
44506: ST_TO_ADDR
// exit ;
44507: GO 44625
// end ; pom := GetBase ( depot ) ;
44509: LD_ADDR_VAR 0 4
44513: PUSH
44514: LD_VAR 0 1
44518: PPUSH
44519: CALL_OW 274
44523: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44524: LD_ADDR_VAR 0 5
44528: PUSH
44529: LD_VAR 0 2
44533: PPUSH
44534: LD_VAR 0 1
44538: PPUSH
44539: CALL_OW 248
44543: PPUSH
44544: CALL_OW 450
44548: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44549: LD_ADDR_VAR 0 3
44553: PUSH
44554: LD_VAR 0 4
44558: PPUSH
44559: LD_INT 1
44561: PPUSH
44562: CALL_OW 275
44566: PUSH
44567: LD_VAR 0 5
44571: PUSH
44572: LD_INT 1
44574: ARRAY
44575: GREATEREQUAL
44576: PUSH
44577: LD_VAR 0 4
44581: PPUSH
44582: LD_INT 2
44584: PPUSH
44585: CALL_OW 275
44589: PUSH
44590: LD_VAR 0 5
44594: PUSH
44595: LD_INT 2
44597: ARRAY
44598: GREATEREQUAL
44599: AND
44600: PUSH
44601: LD_VAR 0 4
44605: PPUSH
44606: LD_INT 3
44608: PPUSH
44609: CALL_OW 275
44613: PUSH
44614: LD_VAR 0 5
44618: PUSH
44619: LD_INT 3
44621: ARRAY
44622: GREATEREQUAL
44623: AND
44624: ST_TO_ADDR
// end ;
44625: LD_VAR 0 3
44629: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44630: LD_INT 0
44632: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44633: LD_VAR 0 1
44637: PPUSH
44638: LD_VAR 0 2
44642: PPUSH
44643: LD_INT 0
44645: PPUSH
44646: LD_INT 0
44648: PPUSH
44649: LD_INT 1
44651: PPUSH
44652: LD_INT 0
44654: PPUSH
44655: CALL_OW 587
// end ;
44659: LD_VAR 0 3
44663: RET
// export function CenterOnNow ( unit ) ; begin
44664: LD_INT 0
44666: PPUSH
// result := IsInUnit ( unit ) ;
44667: LD_ADDR_VAR 0 2
44671: PUSH
44672: LD_VAR 0 1
44676: PPUSH
44677: CALL_OW 310
44681: ST_TO_ADDR
// if not result then
44682: LD_VAR 0 2
44686: NOT
44687: IFFALSE 44699
// result := unit ;
44689: LD_ADDR_VAR 0 2
44693: PUSH
44694: LD_VAR 0 1
44698: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44699: LD_VAR 0 1
44703: PPUSH
44704: CALL_OW 87
// end ;
44708: LD_VAR 0 2
44712: RET
// export function ComMoveHex ( unit , hex ) ; begin
44713: LD_INT 0
44715: PPUSH
// if not hex then
44716: LD_VAR 0 2
44720: NOT
44721: IFFALSE 44725
// exit ;
44723: GO 44778
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44725: LD_VAR 0 2
44729: PUSH
44730: LD_INT 1
44732: ARRAY
44733: PPUSH
44734: LD_VAR 0 2
44738: PUSH
44739: LD_INT 2
44741: ARRAY
44742: PPUSH
44743: CALL_OW 428
44747: IFFALSE 44751
// exit ;
44749: GO 44778
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44751: LD_VAR 0 1
44755: PPUSH
44756: LD_VAR 0 2
44760: PUSH
44761: LD_INT 1
44763: ARRAY
44764: PPUSH
44765: LD_VAR 0 2
44769: PUSH
44770: LD_INT 2
44772: ARRAY
44773: PPUSH
44774: CALL_OW 111
// end ;
44778: LD_VAR 0 3
44782: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44783: LD_INT 0
44785: PPUSH
44786: PPUSH
44787: PPUSH
// if not unit or not enemy then
44788: LD_VAR 0 1
44792: NOT
44793: PUSH
44794: LD_VAR 0 2
44798: NOT
44799: OR
44800: IFFALSE 44804
// exit ;
44802: GO 44928
// x := GetX ( enemy ) ;
44804: LD_ADDR_VAR 0 4
44808: PUSH
44809: LD_VAR 0 2
44813: PPUSH
44814: CALL_OW 250
44818: ST_TO_ADDR
// y := GetY ( enemy ) ;
44819: LD_ADDR_VAR 0 5
44823: PUSH
44824: LD_VAR 0 2
44828: PPUSH
44829: CALL_OW 251
44833: ST_TO_ADDR
// if ValidHex ( x , y ) then
44834: LD_VAR 0 4
44838: PPUSH
44839: LD_VAR 0 5
44843: PPUSH
44844: CALL_OW 488
44848: IFFALSE 44928
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44850: LD_VAR 0 2
44854: PPUSH
44855: CALL_OW 247
44859: PUSH
44860: LD_INT 3
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: IN
44870: PUSH
44871: LD_VAR 0 1
44875: PPUSH
44876: CALL_OW 255
44880: PPUSH
44881: LD_VAR 0 2
44885: PPUSH
44886: CALL_OW 292
44890: OR
44891: IFFALSE 44909
// ComAttackUnit ( unit , enemy ) else
44893: LD_VAR 0 1
44897: PPUSH
44898: LD_VAR 0 2
44902: PPUSH
44903: CALL_OW 115
44907: GO 44928
// ComAgressiveMove ( unit , x , y ) ;
44909: LD_VAR 0 1
44913: PPUSH
44914: LD_VAR 0 4
44918: PPUSH
44919: LD_VAR 0 5
44923: PPUSH
44924: CALL_OW 114
// end ;
44928: LD_VAR 0 3
44932: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44933: LD_INT 0
44935: PPUSH
44936: PPUSH
44937: PPUSH
// list := AreaToList ( area , 0 ) ;
44938: LD_ADDR_VAR 0 5
44942: PUSH
44943: LD_VAR 0 1
44947: PPUSH
44948: LD_INT 0
44950: PPUSH
44951: CALL_OW 517
44955: ST_TO_ADDR
// if not list then
44956: LD_VAR 0 5
44960: NOT
44961: IFFALSE 44965
// exit ;
44963: GO 45095
// if all then
44965: LD_VAR 0 2
44969: IFFALSE 45057
// begin for i := 1 to list [ 1 ] do
44971: LD_ADDR_VAR 0 4
44975: PUSH
44976: DOUBLE
44977: LD_INT 1
44979: DEC
44980: ST_TO_ADDR
44981: LD_VAR 0 5
44985: PUSH
44986: LD_INT 1
44988: ARRAY
44989: PUSH
44990: FOR_TO
44991: IFFALSE 45053
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44993: LD_ADDR_VAR 0 3
44997: PUSH
44998: LD_VAR 0 3
45002: PPUSH
45003: LD_VAR 0 3
45007: PUSH
45008: LD_INT 1
45010: PLUS
45011: PPUSH
45012: LD_VAR 0 5
45016: PUSH
45017: LD_INT 1
45019: ARRAY
45020: PUSH
45021: LD_VAR 0 4
45025: ARRAY
45026: PUSH
45027: LD_VAR 0 5
45031: PUSH
45032: LD_INT 2
45034: ARRAY
45035: PUSH
45036: LD_VAR 0 4
45040: ARRAY
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PPUSH
45046: CALL_OW 1
45050: ST_TO_ADDR
45051: GO 44990
45053: POP
45054: POP
// exit ;
45055: GO 45095
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45057: LD_ADDR_VAR 0 3
45061: PUSH
45062: LD_VAR 0 5
45066: PUSH
45067: LD_INT 1
45069: ARRAY
45070: PUSH
45071: LD_INT 1
45073: ARRAY
45074: PUSH
45075: LD_VAR 0 5
45079: PUSH
45080: LD_INT 2
45082: ARRAY
45083: PUSH
45084: LD_INT 1
45086: ARRAY
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: EMPTY
45093: LIST
45094: ST_TO_ADDR
// end ;
45095: LD_VAR 0 3
45099: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45100: LD_INT 0
45102: PPUSH
45103: PPUSH
// list := AreaToList ( area , 0 ) ;
45104: LD_ADDR_VAR 0 4
45108: PUSH
45109: LD_VAR 0 1
45113: PPUSH
45114: LD_INT 0
45116: PPUSH
45117: CALL_OW 517
45121: ST_TO_ADDR
// if not list then
45122: LD_VAR 0 4
45126: NOT
45127: IFFALSE 45131
// exit ;
45129: GO 45172
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45131: LD_ADDR_VAR 0 3
45135: PUSH
45136: LD_VAR 0 4
45140: PUSH
45141: LD_INT 1
45143: ARRAY
45144: PUSH
45145: LD_INT 1
45147: ARRAY
45148: PUSH
45149: LD_VAR 0 4
45153: PUSH
45154: LD_INT 2
45156: ARRAY
45157: PUSH
45158: LD_INT 1
45160: ARRAY
45161: PUSH
45162: LD_VAR 0 2
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: LIST
45171: ST_TO_ADDR
// end ;
45172: LD_VAR 0 3
45176: RET
// export function First ( array ) ; begin
45177: LD_INT 0
45179: PPUSH
// if not array then
45180: LD_VAR 0 1
45184: NOT
45185: IFFALSE 45189
// exit ;
45187: GO 45203
// result := array [ 1 ] ;
45189: LD_ADDR_VAR 0 2
45193: PUSH
45194: LD_VAR 0 1
45198: PUSH
45199: LD_INT 1
45201: ARRAY
45202: ST_TO_ADDR
// end ;
45203: LD_VAR 0 2
45207: RET
// export function Last ( array ) ; begin
45208: LD_INT 0
45210: PPUSH
// if not array then
45211: LD_VAR 0 1
45215: NOT
45216: IFFALSE 45220
// exit ;
45218: GO 45236
// result := array [ array ] ;
45220: LD_ADDR_VAR 0 2
45224: PUSH
45225: LD_VAR 0 1
45229: PUSH
45230: LD_VAR 0 1
45234: ARRAY
45235: ST_TO_ADDR
// end ;
45236: LD_VAR 0 2
45240: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45241: LD_INT 0
45243: PPUSH
45244: PPUSH
// result := [ ] ;
45245: LD_ADDR_VAR 0 5
45249: PUSH
45250: EMPTY
45251: ST_TO_ADDR
// if not array then
45252: LD_VAR 0 1
45256: NOT
45257: IFFALSE 45261
// exit ;
45259: GO 45373
// for i := 1 to array do
45261: LD_ADDR_VAR 0 6
45265: PUSH
45266: DOUBLE
45267: LD_INT 1
45269: DEC
45270: ST_TO_ADDR
45271: LD_VAR 0 1
45275: PUSH
45276: FOR_TO
45277: IFFALSE 45371
// if array [ i ] [ index ] = value then
45279: LD_VAR 0 1
45283: PUSH
45284: LD_VAR 0 6
45288: ARRAY
45289: PUSH
45290: LD_VAR 0 2
45294: ARRAY
45295: PUSH
45296: LD_VAR 0 3
45300: EQUAL
45301: IFFALSE 45369
// begin if indexColumn then
45303: LD_VAR 0 4
45307: IFFALSE 45343
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45309: LD_ADDR_VAR 0 5
45313: PUSH
45314: LD_VAR 0 5
45318: PPUSH
45319: LD_VAR 0 1
45323: PUSH
45324: LD_VAR 0 6
45328: ARRAY
45329: PUSH
45330: LD_VAR 0 4
45334: ARRAY
45335: PPUSH
45336: CALL 40555 0 2
45340: ST_TO_ADDR
45341: GO 45369
// result := Join ( result , array [ i ] ) ;
45343: LD_ADDR_VAR 0 5
45347: PUSH
45348: LD_VAR 0 5
45352: PPUSH
45353: LD_VAR 0 1
45357: PUSH
45358: LD_VAR 0 6
45362: ARRAY
45363: PPUSH
45364: CALL 40555 0 2
45368: ST_TO_ADDR
// end ;
45369: GO 45276
45371: POP
45372: POP
// end ;
45373: LD_VAR 0 5
45377: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45378: LD_INT 0
45380: PPUSH
// if not vehicles or not parkingPoint then
45381: LD_VAR 0 1
45385: NOT
45386: PUSH
45387: LD_VAR 0 2
45391: NOT
45392: OR
45393: IFFALSE 45397
// exit ;
45395: GO 45495
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45397: LD_ADDR_VAR 0 1
45401: PUSH
45402: LD_VAR 0 1
45406: PPUSH
45407: LD_INT 50
45409: PUSH
45410: EMPTY
45411: LIST
45412: PUSH
45413: LD_INT 3
45415: PUSH
45416: LD_INT 92
45418: PUSH
45419: LD_VAR 0 2
45423: PUSH
45424: LD_INT 1
45426: ARRAY
45427: PUSH
45428: LD_VAR 0 2
45432: PUSH
45433: LD_INT 2
45435: ARRAY
45436: PUSH
45437: LD_INT 8
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PPUSH
45454: CALL_OW 72
45458: ST_TO_ADDR
// if not vehicles then
45459: LD_VAR 0 1
45463: NOT
45464: IFFALSE 45468
// exit ;
45466: GO 45495
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45468: LD_VAR 0 1
45472: PPUSH
45473: LD_VAR 0 2
45477: PUSH
45478: LD_INT 1
45480: ARRAY
45481: PPUSH
45482: LD_VAR 0 2
45486: PUSH
45487: LD_INT 2
45489: ARRAY
45490: PPUSH
45491: CALL_OW 111
// end ;
45495: LD_VAR 0 3
45499: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45500: LD_INT 0
45502: PPUSH
45503: PPUSH
45504: PPUSH
// if not side or not area then
45505: LD_VAR 0 1
45509: NOT
45510: PUSH
45511: LD_VAR 0 2
45515: NOT
45516: OR
45517: IFFALSE 45521
// exit ;
45519: GO 45640
// tmp := AreaToList ( area , 0 ) ;
45521: LD_ADDR_VAR 0 5
45525: PUSH
45526: LD_VAR 0 2
45530: PPUSH
45531: LD_INT 0
45533: PPUSH
45534: CALL_OW 517
45538: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45539: LD_ADDR_VAR 0 4
45543: PUSH
45544: DOUBLE
45545: LD_INT 1
45547: DEC
45548: ST_TO_ADDR
45549: LD_VAR 0 5
45553: PUSH
45554: LD_INT 1
45556: ARRAY
45557: PUSH
45558: FOR_TO
45559: IFFALSE 45638
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45561: LD_VAR 0 5
45565: PUSH
45566: LD_INT 1
45568: ARRAY
45569: PUSH
45570: LD_VAR 0 4
45574: ARRAY
45575: PPUSH
45576: LD_VAR 0 5
45580: PUSH
45581: LD_INT 2
45583: ARRAY
45584: PUSH
45585: LD_VAR 0 4
45589: ARRAY
45590: PPUSH
45591: CALL_OW 351
45595: IFFALSE 45636
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45597: LD_VAR 0 5
45601: PUSH
45602: LD_INT 1
45604: ARRAY
45605: PUSH
45606: LD_VAR 0 4
45610: ARRAY
45611: PPUSH
45612: LD_VAR 0 5
45616: PUSH
45617: LD_INT 2
45619: ARRAY
45620: PUSH
45621: LD_VAR 0 4
45625: ARRAY
45626: PPUSH
45627: LD_VAR 0 1
45631: PPUSH
45632: CALL_OW 244
// end ;
45636: GO 45558
45638: POP
45639: POP
// end ; end_of_file end_of_file
45640: LD_VAR 0 3
45644: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45645: LD_INT 0
45647: PPUSH
45648: PPUSH
// disable ( mpActive ) ;
45649: LD_INT 100
45651: DISABLE_MARKED
// disable ( mpWin ) ;
45652: LD_INT 101
45654: DISABLE_MARKED
// disable ( mpLose ) ;
45655: LD_INT 102
45657: DISABLE_MARKED
// mpGameType := 0 ;
45658: LD_ADDR_EXP 1
45662: PUSH
45663: LD_INT 0
45665: ST_TO_ADDR
// mpGameSettings := [ ] ;
45666: LD_ADDR_EXP 4
45670: PUSH
45671: EMPTY
45672: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45673: LD_ADDR_EXP 2
45677: PUSH
45678: EMPTY
45679: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45680: LD_ADDR_EXP 3
45684: PUSH
45685: EMPTY
45686: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45687: LD_ADDR_EXP 27
45691: PUSH
45692: LD_INT 2
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45702: LD_ADDR_EXP 10
45706: PUSH
45707: EMPTY
45708: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45709: LD_ADDR_EXP 11
45713: PUSH
45714: EMPTY
45715: ST_TO_ADDR
// mpDepots := [ ] ;
45716: LD_ADDR_EXP 12
45720: PUSH
45721: EMPTY
45722: ST_TO_ADDR
// mpBuildings := [ ] ;
45723: LD_ADDR_EXP 15
45727: PUSH
45728: EMPTY
45729: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45730: LD_ADDR_EXP 16
45734: PUSH
45735: EMPTY
45736: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45737: LD_ADDR_EXP 17
45741: PUSH
45742: EMPTY
45743: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45744: LD_ADDR_EXP 18
45748: PUSH
45749: EMPTY
45750: ST_TO_ADDR
// mpStartingResources := [ ] ;
45751: LD_ADDR_EXP 13
45755: PUSH
45756: EMPTY
45757: ST_TO_ADDR
// mpStartPos := [ ] ;
45758: LD_ADDR_EXP 19
45762: PUSH
45763: EMPTY
45764: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45765: LD_ADDR_EXP 20
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45774: LD_ADDR_EXP 21
45778: PUSH
45779: EMPTY
45780: ST_TO_ADDR
// mpApemans := [ ] ;
45781: LD_ADDR_EXP 28
45785: PUSH
45786: EMPTY
45787: ST_TO_ADDR
// mpApemansArea := [ ] ;
45788: LD_ADDR_EXP 29
45792: PUSH
45793: EMPTY
45794: ST_TO_ADDR
// mpRespawn := [ ] ;
45795: LD_ADDR_EXP 31
45799: PUSH
45800: EMPTY
45801: ST_TO_ADDR
// mpKingArea := 0 ;
45802: LD_ADDR_EXP 32
45806: PUSH
45807: LD_INT 0
45809: ST_TO_ADDR
// mpPoints := [ ] ;
45810: LD_ADDR_EXP 33
45814: PUSH
45815: EMPTY
45816: ST_TO_ADDR
// mpVehicles := 0 ;
45817: LD_ADDR_EXP 34
45821: PUSH
45822: LD_INT 0
45824: ST_TO_ADDR
// mpShipments := 0 ;
45825: LD_ADDR_EXP 25
45829: PUSH
45830: LD_INT 0
45832: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45833: LD_ADDR_EXP 38
45837: PUSH
45838: EMPTY
45839: PUSH
45840: EMPTY
45841: PUSH
45842: EMPTY
45843: PUSH
45844: EMPTY
45845: PUSH
45846: EMPTY
45847: PUSH
45848: EMPTY
45849: PUSH
45850: EMPTY
45851: PUSH
45852: EMPTY
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45864: LD_ADDR_EXP 30
45868: PUSH
45869: EMPTY
45870: PUSH
45871: EMPTY
45872: PUSH
45873: EMPTY
45874: PUSH
45875: EMPTY
45876: PUSH
45877: EMPTY
45878: PUSH
45879: EMPTY
45880: PUSH
45881: EMPTY
45882: PUSH
45883: EMPTY
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: ST_TO_ADDR
// mpEmissions := 0 ;
45895: LD_ADDR_EXP 35
45899: PUSH
45900: LD_INT 0
45902: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45903: LD_ADDR_EXP 23
45907: PUSH
45908: LD_INT 3
45910: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45911: LD_ADDR_EXP 22
45915: PUSH
45916: LD_INT 15
45918: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45919: LD_ADDR_EXP 36
45923: PUSH
45924: LD_INT 0
45926: ST_TO_ADDR
// mpGameActive := false ;
45927: LD_ADDR_EXP 37
45931: PUSH
45932: LD_INT 0
45934: ST_TO_ADDR
// mpBlockRespThread := false ;
45935: LD_ADDR_EXP 39
45939: PUSH
45940: LD_INT 0
45942: ST_TO_ADDR
// for i := 1 to 32 do
45943: LD_ADDR_VAR 0 2
45947: PUSH
45948: DOUBLE
45949: LD_INT 1
45951: DEC
45952: ST_TO_ADDR
45953: LD_INT 32
45955: PUSH
45956: FOR_TO
45957: IFFALSE 45984
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
45959: LD_ADDR_EXP 4
45963: PUSH
45964: LD_EXP 4
45968: PPUSH
45969: LD_VAR 0 2
45973: PPUSH
45974: LD_INT 0
45976: PPUSH
45977: CALL_OW 1
45981: ST_TO_ADDR
45982: GO 45956
45984: POP
45985: POP
// end ;
45986: LD_VAR 0 1
45990: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
45991: LD_INT 0
45993: PPUSH
45994: PPUSH
45995: PPUSH
45996: PPUSH
45997: PPUSH
45998: PPUSH
45999: PPUSH
46000: PPUSH
46001: PPUSH
46002: PPUSH
46003: PPUSH
46004: PPUSH
46005: PPUSH
46006: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
46007: LD_ADDR_VAR 0 14
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: LD_INT 3
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: LIST
46025: ST_TO_ADDR
// for i in gameTypes do
46026: LD_ADDR_VAR 0 2
46030: PUSH
46031: LD_VAR 0 14
46035: PUSH
46036: FOR_IN
46037: IFFALSE 46046
// disable ( i ) ;
46039: LD_VAR 0 2
46043: DISABLE_MARKED
46044: GO 46036
46046: POP
46047: POP
// if Multiplayer then
46048: LD_OWVAR 4
46052: IFFALSE 46236
// begin mpGameType := mp_game_type ;
46054: LD_ADDR_EXP 1
46058: PUSH
46059: LD_OWVAR 6
46063: ST_TO_ADDR
// your_side := mp_player_side ;
46064: LD_ADDR_OWVAR 2
46068: PUSH
46069: LD_OWVAR 7
46073: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46074: LD_ADDR_EXP 5
46078: PUSH
46079: LD_OWVAR 17
46083: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46084: LD_ADDR_EXP 6
46088: PUSH
46089: LD_OWVAR 15
46093: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46094: LD_ADDR_EXP 7
46098: PUSH
46099: LD_OWVAR 16
46103: ST_TO_ADDR
// mpTeams := mp_teams ;
46104: LD_ADDR_EXP 8
46108: PUSH
46109: LD_OWVAR 12
46113: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46114: LD_ADDR_VAR 0 2
46118: PUSH
46119: DOUBLE
46120: LD_INT 1
46122: DEC
46123: ST_TO_ADDR
46124: LD_EXP 2
46128: PPUSH
46129: CALL 4946 0 1
46133: PUSH
46134: FOR_TO
46135: IFFALSE 46211
// begin setting := mpGameSettingsKeys [ i ] ;
46137: LD_ADDR_VAR 0 12
46141: PUSH
46142: LD_EXP 2
46146: PUSH
46147: LD_VAR 0 2
46151: ARRAY
46152: ST_TO_ADDR
// if setting then
46153: LD_VAR 0 12
46157: IFFALSE 46209
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46159: LD_ADDR_EXP 4
46163: PUSH
46164: LD_EXP 4
46168: PPUSH
46169: LD_VAR 0 2
46173: PPUSH
46174: LD_EXP 3
46178: PUSH
46179: LD_VAR 0 2
46183: ARRAY
46184: PUSH
46185: LD_VAR 0 2
46189: PUSH
46190: LD_INT 1
46192: MINUS
46193: PPUSH
46194: CALL_OW 426
46198: PUSH
46199: LD_INT 1
46201: PLUS
46202: ARRAY
46203: PPUSH
46204: CALL_OW 1
46208: ST_TO_ADDR
// end ;
46209: GO 46134
46211: POP
46212: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46213: LD_ADDR_EXP 9
46217: PUSH
46218: LD_EXP 6
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: DIFF
46229: PUSH
46230: LD_INT 1
46232: GREATER
46233: ST_TO_ADDR
// end else
46234: GO 46236
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46236: LD_EXP 1
46240: PPUSH
46241: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
46245: LD_EXP 16
46249: PPUSH
46250: CALL 4946 0 1
46254: IFFALSE 46285
// begin for i in mpMarkedAreas do
46256: LD_ADDR_VAR 0 2
46260: PUSH
46261: LD_EXP 16
46265: PUSH
46266: FOR_IN
46267: IFFALSE 46283
// SetAreaMapShow ( i , 0 ) ;
46269: LD_VAR 0 2
46273: PPUSH
46274: LD_INT 0
46276: PPUSH
46277: CALL_OW 424
46281: GO 46266
46283: POP
46284: POP
// end ; for i := 1 to 8 do
46285: LD_ADDR_VAR 0 2
46289: PUSH
46290: DOUBLE
46291: LD_INT 1
46293: DEC
46294: ST_TO_ADDR
46295: LD_INT 8
46297: PUSH
46298: FOR_TO
46299: IFFALSE 47550
// begin if not mpSidePositions [ i ] then
46301: LD_EXP 5
46305: PUSH
46306: LD_VAR 0 2
46310: ARRAY
46311: NOT
46312: IFFALSE 46316
// continue ;
46314: GO 46298
// side := i ;
46316: LD_ADDR_VAR 0 7
46320: PUSH
46321: LD_VAR 0 2
46325: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46326: LD_ADDR_VAR 0 9
46330: PUSH
46331: LD_EXP 7
46335: PUSH
46336: LD_VAR 0 2
46340: ARRAY
46341: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46342: LD_ADDR_VAR 0 8
46346: PUSH
46347: LD_EXP 5
46351: PUSH
46352: LD_VAR 0 2
46356: ARRAY
46357: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46358: LD_EXP 10
46362: PPUSH
46363: CALL 4946 0 1
46367: IFFALSE 46444
// begin for j in mpOilDeposits [ pos ] do
46369: LD_ADDR_VAR 0 3
46373: PUSH
46374: LD_EXP 10
46378: PUSH
46379: LD_VAR 0 8
46383: ARRAY
46384: PUSH
46385: FOR_IN
46386: IFFALSE 46442
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46388: LD_VAR 0 3
46392: PUSH
46393: LD_INT 1
46395: ARRAY
46396: PPUSH
46397: LD_VAR 0 3
46401: PUSH
46402: LD_INT 2
46404: ARRAY
46405: PPUSH
46406: LD_INT 2
46408: PPUSH
46409: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46413: LD_VAR 0 3
46417: PUSH
46418: LD_INT 1
46420: ARRAY
46421: PPUSH
46422: LD_VAR 0 3
46426: PUSH
46427: LD_INT 2
46429: ARRAY
46430: PPUSH
46431: LD_VAR 0 7
46435: PPUSH
46436: CALL_OW 441
// end ;
46440: GO 46385
46442: POP
46443: POP
// end ; if Count ( mpSibDeposits ) then
46444: LD_EXP 11
46448: PPUSH
46449: CALL 4946 0 1
46453: IFFALSE 46530
// begin for j in mpSibDeposits [ pos ] do
46455: LD_ADDR_VAR 0 3
46459: PUSH
46460: LD_EXP 11
46464: PUSH
46465: LD_VAR 0 8
46469: ARRAY
46470: PUSH
46471: FOR_IN
46472: IFFALSE 46528
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46474: LD_VAR 0 3
46478: PUSH
46479: LD_INT 1
46481: ARRAY
46482: PPUSH
46483: LD_VAR 0 3
46487: PUSH
46488: LD_INT 2
46490: ARRAY
46491: PPUSH
46492: LD_INT 3
46494: PPUSH
46495: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46499: LD_VAR 0 3
46503: PUSH
46504: LD_INT 1
46506: ARRAY
46507: PPUSH
46508: LD_VAR 0 3
46512: PUSH
46513: LD_INT 2
46515: ARRAY
46516: PPUSH
46517: LD_VAR 0 7
46521: PPUSH
46522: CALL_OW 441
// end ;
46526: GO 46471
46528: POP
46529: POP
// end ; InitBc ;
46530: CALL_OW 21
// InitUc ;
46534: CALL_OW 18
// uc_side := side ;
46538: LD_ADDR_OWVAR 20
46542: PUSH
46543: LD_VAR 0 7
46547: ST_TO_ADDR
// uc_nation := nation ;
46548: LD_ADDR_OWVAR 21
46552: PUSH
46553: LD_VAR 0 9
46557: ST_TO_ADDR
// if Count ( mpDepots ) then
46558: LD_EXP 12
46562: PPUSH
46563: CALL 4946 0 1
46567: IFFALSE 46745
// begin if GameTypeSurvival then
46569: LD_INT 2
46571: IFFALSE 46591
// begin bc_level := 10 ;
46573: LD_ADDR_OWVAR 43
46577: PUSH
46578: LD_INT 10
46580: ST_TO_ADDR
// bc_type := b_warehouse ;
46581: LD_ADDR_OWVAR 42
46585: PUSH
46586: LD_INT 1
46588: ST_TO_ADDR
// end else
46589: GO 46607
// begin bc_level := 0 ;
46591: LD_ADDR_OWVAR 43
46595: PUSH
46596: LD_INT 0
46598: ST_TO_ADDR
// bc_type := b_depot ;
46599: LD_ADDR_OWVAR 42
46603: PUSH
46604: LD_INT 0
46606: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46607: LD_ADDR_VAR 0 4
46611: PUSH
46612: LD_EXP 12
46616: PUSH
46617: LD_VAR 0 8
46621: ARRAY
46622: PUSH
46623: LD_INT 1
46625: ARRAY
46626: PPUSH
46627: LD_EXP 12
46631: PUSH
46632: LD_VAR 0 8
46636: ARRAY
46637: PUSH
46638: LD_INT 2
46640: ARRAY
46641: PPUSH
46642: LD_EXP 12
46646: PUSH
46647: LD_VAR 0 8
46651: ARRAY
46652: PUSH
46653: LD_INT 3
46655: ARRAY
46656: PPUSH
46657: CALL_OW 47
46661: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46662: LD_VAR 0 4
46666: PPUSH
46667: LD_STRING @
46669: PUSH
46670: LD_VAR 0 7
46674: STR
46675: PPUSH
46676: CALL_OW 500
// if Count ( mpStartingResources ) then
46680: LD_EXP 13
46684: PPUSH
46685: CALL 4946 0 1
46689: IFFALSE 46743
// begin for j := 1 to mpStartingResources do
46691: LD_ADDR_VAR 0 3
46695: PUSH
46696: DOUBLE
46697: LD_INT 1
46699: DEC
46700: ST_TO_ADDR
46701: LD_EXP 13
46705: PUSH
46706: FOR_TO
46707: IFFALSE 46741
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46709: LD_VAR 0 4
46713: PPUSH
46714: CALL_OW 274
46718: PPUSH
46719: LD_VAR 0 3
46723: PPUSH
46724: LD_EXP 13
46728: PUSH
46729: LD_VAR 0 3
46733: ARRAY
46734: PPUSH
46735: CALL_OW 277
46739: GO 46706
46741: POP
46742: POP
// end ; end else
46743: GO 46892
// if Count ( mpStartingResources ) then
46745: LD_EXP 13
46749: PPUSH
46750: CALL 4946 0 1
46754: IFFALSE 46892
// begin for j := 1 to mpStartingResources do
46756: LD_ADDR_VAR 0 3
46760: PUSH
46761: DOUBLE
46762: LD_INT 1
46764: DEC
46765: ST_TO_ADDR
46766: LD_EXP 13
46770: PUSH
46771: FOR_TO
46772: IFFALSE 46890
// begin resources := mpStartingResources [ j ] ;
46774: LD_ADDR_VAR 0 13
46778: PUSH
46779: LD_EXP 13
46783: PUSH
46784: LD_VAR 0 3
46788: ARRAY
46789: ST_TO_ADDR
// repeat if resources >= 50 then
46790: LD_VAR 0 13
46794: PUSH
46795: LD_INT 50
46797: GREATEREQUAL
46798: IFFALSE 46844
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46800: LD_VAR 0 3
46804: PPUSH
46805: LD_INT 5
46807: PPUSH
46808: LD_VAR 0 5
46812: PPUSH
46813: LD_VAR 0 6
46817: PPUSH
46818: LD_INT 4
46820: PPUSH
46821: LD_INT 0
46823: PPUSH
46824: CALL_OW 60
// resources := resources - 50 ;
46828: LD_ADDR_VAR 0 13
46832: PUSH
46833: LD_VAR 0 13
46837: PUSH
46838: LD_INT 50
46840: MINUS
46841: ST_TO_ADDR
// end else
46842: GO 46878
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46844: LD_VAR 0 3
46848: PPUSH
46849: LD_VAR 0 13
46853: PUSH
46854: LD_INT 10
46856: DIV
46857: PPUSH
46858: LD_VAR 0 5
46862: PPUSH
46863: LD_VAR 0 6
46867: PPUSH
46868: LD_INT 4
46870: PPUSH
46871: LD_INT 0
46873: PPUSH
46874: CALL_OW 60
// until resources <= 0 ;
46878: LD_VAR 0 13
46882: PUSH
46883: LD_INT 0
46885: LESSEQUAL
46886: IFFALSE 46790
// end ;
46888: GO 46771
46890: POP
46891: POP
// end ; if Count ( mpBuildings ) then
46892: LD_EXP 15
46896: PPUSH
46897: CALL 4946 0 1
46901: IFFALSE 46979
// begin for j in mpBuildings [ pos ] do
46903: LD_ADDR_VAR 0 3
46907: PUSH
46908: LD_EXP 15
46912: PUSH
46913: LD_VAR 0 8
46917: ARRAY
46918: PUSH
46919: FOR_IN
46920: IFFALSE 46977
// begin bc_level := 0 ;
46922: LD_ADDR_OWVAR 43
46926: PUSH
46927: LD_INT 0
46929: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46930: LD_ADDR_OWVAR 42
46934: PUSH
46935: LD_VAR 0 3
46939: PUSH
46940: LD_INT 1
46942: ARRAY
46943: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46944: LD_VAR 0 3
46948: PUSH
46949: LD_INT 2
46951: ARRAY
46952: PPUSH
46953: LD_VAR 0 3
46957: PUSH
46958: LD_INT 3
46960: ARRAY
46961: PPUSH
46962: LD_VAR 0 3
46966: PUSH
46967: LD_INT 4
46969: ARRAY
46970: PPUSH
46971: CALL_OW 47
// end ;
46975: GO 46919
46977: POP
46978: POP
// end ; if mpBattleFlag > - 1 then
46979: LD_EXP 20
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: GREATER
46988: IFFALSE 47147
// begin x := mpStartPos [ pos ] [ 1 ] ;
46990: LD_ADDR_VAR 0 5
46994: PUSH
46995: LD_EXP 19
46999: PUSH
47000: LD_VAR 0 8
47004: ARRAY
47005: PUSH
47006: LD_INT 1
47008: ARRAY
47009: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47010: LD_ADDR_VAR 0 6
47014: PUSH
47015: LD_EXP 19
47019: PUSH
47020: LD_VAR 0 8
47024: ARRAY
47025: PUSH
47026: LD_INT 2
47028: ARRAY
47029: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47030: LD_VAR 0 5
47034: PPUSH
47035: LD_VAR 0 6
47039: PPUSH
47040: LD_INT 12
47042: PPUSH
47043: LD_INT 2
47045: PPUSH
47046: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47050: LD_ADDR_EXP 21
47054: PUSH
47055: LD_EXP 21
47059: PPUSH
47060: LD_VAR 0 7
47064: PPUSH
47065: LD_VAR 0 7
47069: PPUSH
47070: LD_VAR 0 5
47074: PPUSH
47075: LD_VAR 0 6
47079: PPUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 100
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: PUSH
47093: LD_INT 70
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 3
47102: PUSH
47103: LD_INT 40
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 10
47112: PUSH
47113: LD_INT 25
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 20
47122: PUSH
47123: LD_INT 100
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: PPUSH
47137: CALL_OW 418
47141: PPUSH
47142: CALL_OW 1
47146: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47147: LD_EXP 24
47151: PUSH
47152: LD_INT 20
47154: PPUSH
47155: LD_VAR 0 7
47159: PPUSH
47160: CALL_OW 321
47164: PUSH
47165: LD_INT 1
47167: EQUAL
47168: AND
47169: IFFALSE 47186
// SetTech ( tech_SibDet , side , state_researched ) ;
47171: LD_INT 20
47173: PPUSH
47174: LD_VAR 0 7
47178: PPUSH
47179: LD_INT 2
47181: PPUSH
47182: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47186: LD_INT 24
47188: PPUSH
47189: LD_VAR 0 7
47193: PPUSH
47194: LD_INT 0
47196: PPUSH
47197: CALL_OW 322
// if mpSibBomb = 1 then
47201: LD_EXP 26
47205: PUSH
47206: LD_INT 1
47208: EQUAL
47209: IFFALSE 47228
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47211: LD_INT 25
47213: PPUSH
47214: LD_VAR 0 7
47218: PPUSH
47219: LD_INT 1
47221: PPUSH
47222: CALL_OW 322
// end else
47226: GO 47243
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47228: LD_INT 25
47230: PPUSH
47231: LD_VAR 0 7
47235: PPUSH
47236: LD_INT 0
47238: PPUSH
47239: CALL_OW 322
// end ; if mpVehicles then
47243: LD_EXP 34
47247: IFFALSE 47346
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47249: LD_ADDR_VAR 0 3
47253: PUSH
47254: LD_VAR 0 7
47258: PPUSH
47259: LD_VAR 0 9
47263: PPUSH
47264: LD_EXP 34
47268: PPUSH
47269: CALL 48460 0 3
47273: PUSH
47274: FOR_IN
47275: IFFALSE 47344
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47277: LD_VAR 0 3
47281: PPUSH
47282: LD_INT 0
47284: PPUSH
47285: LD_INT 5
47287: PPUSH
47288: CALL_OW 12
47292: PPUSH
47293: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47297: LD_VAR 0 3
47301: PPUSH
47302: LD_EXP 19
47306: PUSH
47307: LD_VAR 0 8
47311: ARRAY
47312: PUSH
47313: LD_INT 1
47315: ARRAY
47316: PPUSH
47317: LD_EXP 19
47321: PUSH
47322: LD_VAR 0 8
47326: ARRAY
47327: PUSH
47328: LD_INT 2
47330: ARRAY
47331: PPUSH
47332: LD_INT 12
47334: PPUSH
47335: LD_INT 0
47337: PPUSH
47338: CALL_OW 50
// end ;
47342: GO 47274
47344: POP
47345: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47346: LD_ADDR_VAR 0 11
47350: PUSH
47351: LD_VAR 0 7
47355: PPUSH
47356: LD_VAR 0 9
47360: PPUSH
47361: LD_EXP 22
47365: PPUSH
47366: LD_EXP 23
47370: PPUSH
47371: CALL 47962 0 4
47375: ST_TO_ADDR
// for j in team do
47376: LD_ADDR_VAR 0 3
47380: PUSH
47381: LD_VAR 0 11
47385: PUSH
47386: FOR_IN
47387: IFFALSE 47436
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47389: LD_VAR 0 3
47393: PPUSH
47394: LD_EXP 19
47398: PUSH
47399: LD_VAR 0 8
47403: ARRAY
47404: PUSH
47405: LD_INT 1
47407: ARRAY
47408: PPUSH
47409: LD_EXP 19
47413: PUSH
47414: LD_VAR 0 8
47418: ARRAY
47419: PUSH
47420: LD_INT 2
47422: ARRAY
47423: PPUSH
47424: LD_INT 12
47426: PPUSH
47427: LD_INT 0
47429: PPUSH
47430: CALL_OW 50
47434: GO 47386
47436: POP
47437: POP
// if mpApemans then
47438: LD_EXP 28
47442: IFFALSE 47548
// begin for j := 1 to mpApemans do
47444: LD_ADDR_VAR 0 3
47448: PUSH
47449: DOUBLE
47450: LD_INT 1
47452: DEC
47453: ST_TO_ADDR
47454: LD_EXP 28
47458: PUSH
47459: FOR_TO
47460: IFFALSE 47546
// begin PrepareApeman ( - 5 ) ;
47462: LD_INT 5
47464: NEG
47465: PPUSH
47466: CALL 36803 0 1
// ape := CreateHuman ;
47470: LD_ADDR_VAR 0 10
47474: PUSH
47475: CALL_OW 44
47479: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
47480: LD_ADDR_EXP 30
47484: PUSH
47485: LD_EXP 30
47489: PPUSH
47490: LD_VAR 0 8
47494: PPUSH
47495: LD_EXP 30
47499: PUSH
47500: LD_VAR 0 8
47504: ARRAY
47505: PPUSH
47506: LD_VAR 0 10
47510: PPUSH
47511: CALL 40555 0 2
47515: PPUSH
47516: CALL_OW 1
47520: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47521: LD_VAR 0 10
47525: PPUSH
47526: LD_EXP 29
47530: PUSH
47531: LD_VAR 0 8
47535: ARRAY
47536: PPUSH
47537: LD_INT 0
47539: PPUSH
47540: CALL_OW 49
// end ;
47544: GO 47459
47546: POP
47547: POP
// end ; end ;
47548: GO 46298
47550: POP
47551: POP
// if not mpTeamGame then
47552: LD_EXP 9
47556: NOT
47557: IFFALSE 47655
// begin for i := 1 to 8 do
47559: LD_ADDR_VAR 0 2
47563: PUSH
47564: DOUBLE
47565: LD_INT 1
47567: DEC
47568: ST_TO_ADDR
47569: LD_INT 8
47571: PUSH
47572: FOR_TO
47573: IFFALSE 47651
// for j := 1 to 8 do
47575: LD_ADDR_VAR 0 3
47579: PUSH
47580: DOUBLE
47581: LD_INT 1
47583: DEC
47584: ST_TO_ADDR
47585: LD_INT 8
47587: PUSH
47588: FOR_TO
47589: IFFALSE 47647
// if i <> j then
47591: LD_VAR 0 2
47595: PUSH
47596: LD_VAR 0 3
47600: NONEQUAL
47601: IFFALSE 47625
// SetAttitude ( i , j , att_neutral , true ) else
47603: LD_VAR 0 2
47607: PPUSH
47608: LD_VAR 0 3
47612: PPUSH
47613: LD_INT 0
47615: PPUSH
47616: LD_INT 1
47618: PPUSH
47619: CALL_OW 80
47623: GO 47645
// SetAttitude ( i , j , att_friend , true ) ;
47625: LD_VAR 0 2
47629: PPUSH
47630: LD_VAR 0 3
47634: PPUSH
47635: LD_INT 1
47637: PPUSH
47638: LD_INT 1
47640: PPUSH
47641: CALL_OW 80
47645: GO 47588
47647: POP
47648: POP
47649: GO 47572
47651: POP
47652: POP
// end else
47653: GO 47830
// begin if mpSharedVision then
47655: LD_EXP 14
47659: IFFALSE 47724
// begin for i in mpTeams do
47661: LD_ADDR_VAR 0 2
47665: PUSH
47666: LD_EXP 8
47670: PUSH
47671: FOR_IN
47672: IFFALSE 47722
// for j := 2 to i do
47674: LD_ADDR_VAR 0 3
47678: PUSH
47679: DOUBLE
47680: LD_INT 2
47682: DEC
47683: ST_TO_ADDR
47684: LD_VAR 0 2
47688: PUSH
47689: FOR_TO
47690: IFFALSE 47718
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47692: LD_VAR 0 2
47696: PUSH
47697: LD_VAR 0 3
47701: ARRAY
47702: PPUSH
47703: LD_VAR 0 2
47707: PUSH
47708: LD_INT 1
47710: ARRAY
47711: PPUSH
47712: CALL_OW 343
47716: GO 47689
47718: POP
47719: POP
47720: GO 47671
47722: POP
47723: POP
// end ; for i := 1 to 8 do
47724: LD_ADDR_VAR 0 2
47728: PUSH
47729: DOUBLE
47730: LD_INT 1
47732: DEC
47733: ST_TO_ADDR
47734: LD_INT 8
47736: PUSH
47737: FOR_TO
47738: IFFALSE 47828
// for j := 1 to 8 do
47740: LD_ADDR_VAR 0 3
47744: PUSH
47745: DOUBLE
47746: LD_INT 1
47748: DEC
47749: ST_TO_ADDR
47750: LD_INT 8
47752: PUSH
47753: FOR_TO
47754: IFFALSE 47824
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47756: LD_EXP 6
47760: PUSH
47761: LD_VAR 0 2
47765: ARRAY
47766: PUSH
47767: LD_EXP 6
47771: PUSH
47772: LD_VAR 0 3
47776: ARRAY
47777: EQUAL
47778: IFFALSE 47802
// SetAttitude ( i , j , att_friend , true ) else
47780: LD_VAR 0 2
47784: PPUSH
47785: LD_VAR 0 3
47789: PPUSH
47790: LD_INT 1
47792: PPUSH
47793: LD_INT 1
47795: PPUSH
47796: CALL_OW 80
47800: GO 47822
// SetAttitude ( i , j , att_enemy , true ) ;
47802: LD_VAR 0 2
47806: PPUSH
47807: LD_VAR 0 3
47811: PPUSH
47812: LD_INT 2
47814: PPUSH
47815: LD_INT 1
47817: PPUSH
47818: CALL_OW 80
47822: GO 47753
47824: POP
47825: POP
47826: GO 47737
47828: POP
47829: POP
// end ; music_nat := mpSideNations [ your_side ] ;
47830: LD_ADDR_OWVAR 71
47834: PUSH
47835: LD_EXP 7
47839: PUSH
47840: LD_OWVAR 2
47844: ARRAY
47845: ST_TO_ADDR
// if IAmSpec then
47846: CALL_OW 531
47850: IFFALSE 47891
// begin FogOff ( true ) ;
47852: LD_INT 1
47854: PPUSH
47855: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47859: LD_EXP 27
47863: PUSH
47864: LD_INT 1
47866: ARRAY
47867: PUSH
47868: LD_INT 2
47870: DIV
47871: PPUSH
47872: LD_EXP 27
47876: PUSH
47877: LD_INT 2
47879: ARRAY
47880: PUSH
47881: LD_INT 2
47883: DIV
47884: PPUSH
47885: CALL_OW 86
// end else
47889: GO 47937
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47891: LD_EXP 19
47895: PUSH
47896: LD_EXP 5
47900: PUSH
47901: LD_OWVAR 2
47905: ARRAY
47906: ARRAY
47907: PUSH
47908: LD_INT 1
47910: ARRAY
47911: PPUSH
47912: LD_EXP 19
47916: PUSH
47917: LD_EXP 5
47921: PUSH
47922: LD_OWVAR 2
47926: ARRAY
47927: ARRAY
47928: PUSH
47929: LD_INT 2
47931: ARRAY
47932: PPUSH
47933: CALL_OW 86
// end ; BeginBuildUp ;
47937: CALL 48938 0 0
// enable ( mpActive ) ;
47941: LD_INT 100
47943: ENABLE_MARKED
// enable ( mpGameType ) ;
47944: LD_EXP 1
47948: ENABLE_MARKED
// mpGameActive := true ;
47949: LD_ADDR_EXP 37
47953: PUSH
47954: LD_INT 1
47956: ST_TO_ADDR
// end ;
47957: LD_VAR 0 1
47961: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
47962: LD_INT 0
47964: PPUSH
47965: PPUSH
47966: PPUSH
47967: PPUSH
// result := [ ] ;
47968: LD_ADDR_VAR 0 5
47972: PUSH
47973: EMPTY
47974: ST_TO_ADDR
// class := class_soldier ;
47975: LD_ADDR_VAR 0 8
47979: PUSH
47980: LD_INT 1
47982: ST_TO_ADDR
// uc_side := side ;
47983: LD_ADDR_OWVAR 20
47987: PUSH
47988: LD_VAR 0 1
47992: ST_TO_ADDR
// uc_nation := nation ;
47993: LD_ADDR_OWVAR 21
47997: PUSH
47998: LD_VAR 0 2
48002: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48003: LD_ADDR_OWVAR 26
48007: PUSH
48008: LD_OWVAR 19
48012: PUSH
48013: LD_VAR 0 1
48017: ARRAY
48018: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48019: LD_INT 1
48021: PPUSH
48022: LD_INT 2
48024: PPUSH
48025: CALL_OW 12
48029: PPUSH
48030: LD_VAR 0 8
48034: PPUSH
48035: LD_VAR 0 4
48039: PUSH
48040: LD_INT 2
48042: PLUS
48043: PPUSH
48044: CALL_OW 380
// hc_importance := 105 ;
48048: LD_ADDR_OWVAR 32
48052: PUSH
48053: LD_INT 105
48055: ST_TO_ADDR
// if Multiplayer then
48056: LD_OWVAR 4
48060: IFFALSE 48100
// begin hc_gallery := MULTIAVATARS ;
48062: LD_ADDR_OWVAR 33
48066: PUSH
48067: LD_STRING MULTIAVATARS
48069: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48070: LD_ADDR_OWVAR 34
48074: PUSH
48075: LD_VAR 0 1
48079: PPUSH
48080: CALL_OW 525
48084: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48085: LD_ADDR_OWVAR 27
48089: PUSH
48090: LD_VAR 0 1
48094: PPUSH
48095: CALL_OW 526
48099: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48100: LD_ADDR_VAR 0 5
48104: PUSH
48105: LD_VAR 0 5
48109: PPUSH
48110: CALL_OW 44
48114: PPUSH
48115: CALL 40555 0 2
48119: ST_TO_ADDR
// if mpTeamPreset then
48120: LD_LOC 1
48124: IFFALSE 48220
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
48126: LD_LOC 1
48130: PUSH
48131: LD_INT 1
48133: ARRAY
48134: PPUSH
48135: LD_VAR 0 5
48139: PUSH
48140: LD_VAR 0 5
48144: ARRAY
48145: PPUSH
48146: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48150: LD_VAR 0 5
48154: PUSH
48155: LD_VAR 0 5
48159: ARRAY
48160: PPUSH
48161: LD_INT 1
48163: PPUSH
48164: LD_LOC 1
48168: PUSH
48169: LD_INT 1
48171: ARRAY
48172: PPUSH
48173: LD_INT 1
48175: PPUSH
48176: CALL_OW 260
48180: PPUSH
48181: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
48185: LD_VAR 0 5
48189: PUSH
48190: LD_VAR 0 5
48194: ARRAY
48195: PPUSH
48196: LD_INT 2
48198: PPUSH
48199: LD_LOC 1
48203: PUSH
48204: LD_INT 1
48206: ARRAY
48207: PPUSH
48208: LD_INT 2
48210: PPUSH
48211: CALL_OW 260
48215: PPUSH
48216: CALL_OW 239
// end ; InitHc_All ( ) ;
48220: CALL_OW 584
// class := 2 ;
48224: LD_ADDR_VAR 0 8
48228: PUSH
48229: LD_INT 2
48231: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48232: LD_ADDR_VAR 0 6
48236: PUSH
48237: DOUBLE
48238: LD_INT 1
48240: DEC
48241: ST_TO_ADDR
48242: LD_VAR 0 3
48246: PUSH
48247: LD_INT 1
48249: MINUS
48250: PUSH
48251: FOR_TO
48252: IFFALSE 48436
// begin PrepareHuman ( false , class , skill ) ;
48254: LD_INT 0
48256: PPUSH
48257: LD_VAR 0 8
48261: PPUSH
48262: LD_VAR 0 4
48266: PPUSH
48267: CALL_OW 380
// un := CreateHuman ;
48271: LD_ADDR_VAR 0 7
48275: PUSH
48276: CALL_OW 44
48280: ST_TO_ADDR
// result := Join ( result , un ) ;
48281: LD_ADDR_VAR 0 5
48285: PUSH
48286: LD_VAR 0 5
48290: PPUSH
48291: LD_VAR 0 7
48295: PPUSH
48296: CALL 40555 0 2
48300: ST_TO_ADDR
// if mpTeamPreset then
48301: LD_LOC 1
48305: IFFALSE 48401
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
48307: LD_LOC 1
48311: PUSH
48312: LD_VAR 0 6
48316: PUSH
48317: LD_INT 1
48319: PLUS
48320: ARRAY
48321: PPUSH
48322: LD_VAR 0 7
48326: PPUSH
48327: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
48331: LD_VAR 0 7
48335: PPUSH
48336: LD_INT 1
48338: PPUSH
48339: LD_LOC 1
48343: PUSH
48344: LD_VAR 0 6
48348: PUSH
48349: LD_INT 1
48351: PLUS
48352: ARRAY
48353: PPUSH
48354: LD_INT 1
48356: PPUSH
48357: CALL_OW 260
48361: PPUSH
48362: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
48366: LD_VAR 0 7
48370: PPUSH
48371: LD_INT 2
48373: PPUSH
48374: LD_LOC 1
48378: PUSH
48379: LD_VAR 0 6
48383: PUSH
48384: LD_INT 1
48386: PLUS
48387: ARRAY
48388: PPUSH
48389: LD_INT 2
48391: PPUSH
48392: CALL_OW 260
48396: PPUSH
48397: CALL_OW 239
// end ; class := Inc ( class ) ;
48401: LD_ADDR_VAR 0 8
48405: PUSH
48406: LD_VAR 0 8
48410: PPUSH
48411: CALL 41916 0 1
48415: ST_TO_ADDR
// if class = 5 then
48416: LD_VAR 0 8
48420: PUSH
48421: LD_INT 5
48423: EQUAL
48424: IFFALSE 48434
// class := 1 ;
48426: LD_ADDR_VAR 0 8
48430: PUSH
48431: LD_INT 1
48433: ST_TO_ADDR
// end ;
48434: GO 48251
48436: POP
48437: POP
// if not mpTeamPreset then
48438: LD_LOC 1
48442: NOT
48443: IFFALSE 48455
// mpTeamPreset := result ;
48445: LD_ADDR_LOC 1
48449: PUSH
48450: LD_VAR 0 5
48454: ST_TO_ADDR
// end ;
48455: LD_VAR 0 5
48459: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48460: LD_INT 0
48462: PPUSH
48463: PPUSH
// result := [ ] ;
48464: LD_ADDR_VAR 0 4
48468: PUSH
48469: EMPTY
48470: ST_TO_ADDR
// if not vehicles then
48471: LD_VAR 0 3
48475: NOT
48476: IFFALSE 48480
// exit ;
48478: GO 48639
// for i := 1 to vehicles [ nation ] do
48480: LD_ADDR_VAR 0 5
48484: PUSH
48485: DOUBLE
48486: LD_INT 1
48488: DEC
48489: ST_TO_ADDR
48490: LD_VAR 0 3
48494: PUSH
48495: LD_VAR 0 2
48499: ARRAY
48500: PUSH
48501: FOR_TO
48502: IFFALSE 48637
// begin uc_side := side ;
48504: LD_ADDR_OWVAR 20
48508: PUSH
48509: LD_VAR 0 1
48513: ST_TO_ADDR
// uc_nation := nation ;
48514: LD_ADDR_OWVAR 21
48518: PUSH
48519: LD_VAR 0 2
48523: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48524: LD_VAR 0 3
48528: PUSH
48529: LD_VAR 0 2
48533: ARRAY
48534: PUSH
48535: LD_VAR 0 5
48539: ARRAY
48540: PUSH
48541: LD_INT 1
48543: ARRAY
48544: PPUSH
48545: LD_VAR 0 3
48549: PUSH
48550: LD_VAR 0 2
48554: ARRAY
48555: PUSH
48556: LD_VAR 0 5
48560: ARRAY
48561: PUSH
48562: LD_INT 2
48564: ARRAY
48565: PPUSH
48566: LD_VAR 0 3
48570: PUSH
48571: LD_VAR 0 2
48575: ARRAY
48576: PUSH
48577: LD_VAR 0 5
48581: ARRAY
48582: PUSH
48583: LD_INT 3
48585: ARRAY
48586: PPUSH
48587: LD_VAR 0 3
48591: PUSH
48592: LD_VAR 0 2
48596: ARRAY
48597: PUSH
48598: LD_VAR 0 5
48602: ARRAY
48603: PUSH
48604: LD_INT 4
48606: ARRAY
48607: PPUSH
48608: LD_INT 80
48610: PPUSH
48611: CALL 7684 0 5
// result := Join ( result , CreateVehicle ) ;
48615: LD_ADDR_VAR 0 4
48619: PUSH
48620: LD_VAR 0 4
48624: PPUSH
48625: CALL_OW 45
48629: PPUSH
48630: CALL 40555 0 2
48634: ST_TO_ADDR
// end ;
48635: GO 48501
48637: POP
48638: POP
// end ;
48639: LD_VAR 0 4
48643: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48644: LD_INT 0
48646: PPUSH
48647: PPUSH
// for i in mpBattleFlags do
48648: LD_ADDR_VAR 0 3
48652: PUSH
48653: LD_EXP 21
48657: PUSH
48658: FOR_IN
48659: IFFALSE 48736
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48661: LD_VAR 0 3
48665: PPUSH
48666: LD_INT 1
48668: PUSH
48669: LD_VAR 0 1
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: LD_VAR 0 1
48685: PUSH
48686: LD_REAL  7.00000000000000E-0001
48689: MUL
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 3
48697: PUSH
48698: LD_VAR 0 1
48702: PUSH
48703: LD_REAL  4.00000000000000E-0001
48706: MUL
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 20
48714: PUSH
48715: LD_VAR 0 1
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: PPUSH
48730: CALL_OW 423
48734: GO 48658
48736: POP
48737: POP
// end ;
48738: LD_VAR 0 2
48742: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48743: LD_INT 100
48745: IFFALSE 48840
48747: GO 48749
48749: DISABLE
48750: LD_INT 0
48752: PPUSH
48753: PPUSH
// begin if mpBattleFlag <= 0 then
48754: LD_EXP 20
48758: PUSH
48759: LD_INT 0
48761: LESSEQUAL
48762: IFFALSE 48766
// exit ;
48764: GO 48840
// strength := 100 ;
48766: LD_ADDR_VAR 0 2
48770: PUSH
48771: LD_INT 100
48773: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48774: LD_EXP 20
48778: PPUSH
48779: CALL_OW 67
// strength := Dec ( strength ) ;
48783: LD_ADDR_VAR 0 2
48787: PUSH
48788: LD_VAR 0 2
48792: PPUSH
48793: CALL 41938 0 1
48797: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48798: LD_VAR 0 2
48802: PPUSH
48803: CALL 48644 0 1
// until not strength ;
48807: LD_VAR 0 2
48811: NOT
48812: IFFALSE 48774
// for i in mpBattleFlags do
48814: LD_ADDR_VAR 0 1
48818: PUSH
48819: LD_EXP 21
48823: PUSH
48824: FOR_IN
48825: IFFALSE 48838
// KillBattleFlag ( i ) ;
48827: LD_VAR 0 1
48831: PPUSH
48832: CALL_OW 419
48836: GO 48824
48838: POP
48839: POP
// end ;
48840: PPOPN 2
48842: END
// every 0 0$1 marked mpActive do var side , tmp ;
48843: GO 48845
48845: DISABLE
48846: LD_INT 0
48848: PPUSH
48849: PPUSH
// begin if mpSibBomb <= 1 then
48850: LD_EXP 26
48854: PUSH
48855: LD_INT 1
48857: LESSEQUAL
48858: IFFALSE 48862
// exit ;
48860: GO 48935
// tmp := mpSibBomb ;
48862: LD_ADDR_VAR 0 2
48866: PUSH
48867: LD_EXP 26
48871: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48872: LD_INT 35
48874: PPUSH
48875: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48879: LD_ADDR_VAR 0 2
48883: PUSH
48884: LD_VAR 0 2
48888: PUSH
48889: LD_INT 35
48891: MINUS
48892: ST_TO_ADDR
// until not tmp ;
48893: LD_VAR 0 2
48897: NOT
48898: IFFALSE 48872
// for side := 1 to 8 do
48900: LD_ADDR_VAR 0 1
48904: PUSH
48905: DOUBLE
48906: LD_INT 1
48908: DEC
48909: ST_TO_ADDR
48910: LD_INT 8
48912: PUSH
48913: FOR_TO
48914: IFFALSE 48933
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48916: LD_INT 25
48918: PPUSH
48919: LD_VAR 0 1
48923: PPUSH
48924: LD_INT 1
48926: PPUSH
48927: CALL_OW 322
48931: GO 48913
48933: POP
48934: POP
// end ;
48935: PPOPN 2
48937: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48938: LD_INT 0
48940: PPUSH
48941: PPUSH
48942: PPUSH
// mpBuildUpTimeDelay := 0 ;
48943: LD_ADDR_EXP 40
48947: PUSH
48948: LD_INT 0
48950: ST_TO_ADDR
// if not mpBuildUpTime then
48951: LD_EXP 18
48955: NOT
48956: IFFALSE 48960
// exit ;
48958: GO 49143
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48960: LD_ADDR_EXP 40
48964: PUSH
48965: LD_INT 8400
48967: PUSH
48968: LD_INT 2100
48970: PUSH
48971: LD_EXP 18
48975: MUL
48976: PLUS
48977: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
48978: LD_ADDR_EXP 41
48982: PUSH
48983: LD_INT 1
48985: ST_TO_ADDR
// for i := 1 to 8 do
48986: LD_ADDR_VAR 0 2
48990: PUSH
48991: DOUBLE
48992: LD_INT 1
48994: DEC
48995: ST_TO_ADDR
48996: LD_INT 8
48998: PUSH
48999: FOR_TO
49000: IFFALSE 49141
// if mpSidePositions [ i ] then
49002: LD_EXP 5
49006: PUSH
49007: LD_VAR 0 2
49011: ARRAY
49012: IFFALSE 49139
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49014: LD_EXP 17
49018: PUSH
49019: LD_EXP 5
49023: PUSH
49024: LD_VAR 0 2
49028: ARRAY
49029: ARRAY
49030: PPUSH
49031: LD_INT 5
49033: PPUSH
49034: CALL_OW 424
// for j := 1 to 8 do
49038: LD_ADDR_VAR 0 3
49042: PUSH
49043: DOUBLE
49044: LD_INT 1
49046: DEC
49047: ST_TO_ADDR
49048: LD_INT 8
49050: PUSH
49051: FOR_TO
49052: IFFALSE 49137
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49054: LD_EXP 5
49058: PUSH
49059: LD_VAR 0 3
49063: ARRAY
49064: PUSH
49065: LD_EXP 6
49069: PUSH
49070: LD_VAR 0 2
49074: ARRAY
49075: PUSH
49076: LD_EXP 6
49080: PUSH
49081: LD_VAR 0 3
49085: ARRAY
49086: NONEQUAL
49087: PUSH
49088: LD_EXP 9
49092: NOT
49093: PUSH
49094: LD_VAR 0 2
49098: PUSH
49099: LD_VAR 0 3
49103: NONEQUAL
49104: AND
49105: OR
49106: AND
49107: IFFALSE 49135
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49109: LD_VAR 0 3
49113: PPUSH
49114: LD_EXP 17
49118: PUSH
49119: LD_EXP 5
49123: PUSH
49124: LD_VAR 0 2
49128: ARRAY
49129: ARRAY
49130: PPUSH
49131: CALL_OW 333
49135: GO 49051
49137: POP
49138: POP
// end ;
49139: GO 48999
49141: POP
49142: POP
// end ;
49143: LD_VAR 0 1
49147: RET
// function EndBuildUp ; var i , j ; begin
49148: LD_INT 0
49150: PPUSH
49151: PPUSH
49152: PPUSH
// mpBuildUpTimeActive := false ;
49153: LD_ADDR_EXP 41
49157: PUSH
49158: LD_INT 0
49160: ST_TO_ADDR
// for i := 1 to 8 do
49161: LD_ADDR_VAR 0 2
49165: PUSH
49166: DOUBLE
49167: LD_INT 1
49169: DEC
49170: ST_TO_ADDR
49171: LD_INT 8
49173: PUSH
49174: FOR_TO
49175: IFFALSE 49316
// if mpSidePositions [ i ] then
49177: LD_EXP 5
49181: PUSH
49182: LD_VAR 0 2
49186: ARRAY
49187: IFFALSE 49314
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
49189: LD_EXP 17
49193: PUSH
49194: LD_EXP 5
49198: PUSH
49199: LD_VAR 0 2
49203: ARRAY
49204: ARRAY
49205: PPUSH
49206: LD_INT 0
49208: PPUSH
49209: CALL_OW 424
// for j := 1 to 8 do
49213: LD_ADDR_VAR 0 3
49217: PUSH
49218: DOUBLE
49219: LD_INT 1
49221: DEC
49222: ST_TO_ADDR
49223: LD_INT 8
49225: PUSH
49226: FOR_TO
49227: IFFALSE 49312
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49229: LD_EXP 5
49233: PUSH
49234: LD_VAR 0 3
49238: ARRAY
49239: PUSH
49240: LD_EXP 6
49244: PUSH
49245: LD_VAR 0 2
49249: ARRAY
49250: PUSH
49251: LD_EXP 6
49255: PUSH
49256: LD_VAR 0 3
49260: ARRAY
49261: NONEQUAL
49262: PUSH
49263: LD_EXP 9
49267: NOT
49268: PUSH
49269: LD_VAR 0 2
49273: PUSH
49274: LD_VAR 0 3
49278: NONEQUAL
49279: AND
49280: OR
49281: AND
49282: IFFALSE 49310
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49284: LD_VAR 0 3
49288: PPUSH
49289: LD_EXP 17
49293: PUSH
49294: LD_EXP 5
49298: PUSH
49299: LD_VAR 0 2
49303: ARRAY
49304: ARRAY
49305: PPUSH
49306: CALL_OW 334
49310: GO 49226
49312: POP
49313: POP
// end ;
49314: GO 49174
49316: POP
49317: POP
// end ;
49318: LD_VAR 0 1
49322: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49323: LD_EXP 41
49327: IFFALSE 49502
49329: GO 49331
49331: DISABLE
49332: LD_INT 0
49334: PPUSH
49335: PPUSH
// begin for i := 1 to 8 do
49336: LD_ADDR_VAR 0 1
49340: PUSH
49341: DOUBLE
49342: LD_INT 1
49344: DEC
49345: ST_TO_ADDR
49346: LD_INT 8
49348: PUSH
49349: FOR_TO
49350: IFFALSE 49499
// if mpSidePositions [ i ] then
49352: LD_EXP 5
49356: PUSH
49357: LD_VAR 0 1
49361: ARRAY
49362: IFFALSE 49497
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49364: LD_ADDR_VAR 0 2
49368: PUSH
49369: LD_EXP 17
49373: PUSH
49374: LD_EXP 5
49378: PUSH
49379: LD_VAR 0 1
49383: ARRAY
49384: ARRAY
49385: PPUSH
49386: LD_INT 2
49388: PUSH
49389: LD_INT 21
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 21
49401: PUSH
49402: LD_INT 2
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 22
49416: PUSH
49417: LD_OWVAR 2
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PPUSH
49430: CALL_OW 70
49434: PUSH
49435: FOR_IN
49436: IFFALSE 49495
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49438: LD_EXP 6
49442: PUSH
49443: LD_VAR 0 1
49447: ARRAY
49448: PUSH
49449: LD_EXP 6
49453: PUSH
49454: LD_OWVAR 2
49458: ARRAY
49459: NONEQUAL
49460: PUSH
49461: LD_EXP 9
49465: NOT
49466: PUSH
49467: LD_VAR 0 1
49471: PUSH
49472: LD_OWVAR 2
49476: NONEQUAL
49477: AND
49478: OR
49479: IFFALSE 49493
// ComMoveToArea ( un , BuildUpEscape ) ;
49481: LD_VAR 0 2
49485: PPUSH
49486: LD_INT 52
49488: PPUSH
49489: CALL_OW 113
49493: GO 49435
49495: POP
49496: POP
49497: GO 49349
49499: POP
49500: POP
// enable ;
49501: ENABLE
// end ;
49502: PPOPN 2
49504: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49505: LD_EXP 18
49509: IFFALSE 49559
49511: GO 49513
49513: DISABLE
49514: LD_INT 0
49516: PPUSH
// begin tmp := mpBuildUpTime ;
49517: LD_ADDR_VAR 0 1
49521: PUSH
49522: LD_EXP 18
49526: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49527: LD_INT 35
49529: PPUSH
49530: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49534: LD_ADDR_VAR 0 1
49538: PUSH
49539: LD_VAR 0 1
49543: PUSH
49544: LD_INT 35
49546: MINUS
49547: ST_TO_ADDR
// until not tmp ;
49548: LD_VAR 0 1
49552: NOT
49553: IFFALSE 49527
// EndBuildUp ;
49555: CALL 49148 0 0
// end ;
49559: PPOPN 1
49561: END
// every 0 0$1 trigger mpActive marked mpWin do
49562: LD_INT 100
49564: IFFALSE 49598
49566: GO 49568
49568: DISABLE
// begin if IAmServer then
49569: CALL_OW 518
49573: IFFALSE 49582
// wait ( 0 0$3 ) ;
49575: LD_INT 105
49577: PPUSH
49578: CALL_OW 67
// if Multiplayer then
49582: LD_OWVAR 4
49586: IFFALSE 49594
// YouWinInMultiplayer else
49588: CALL_OW 106
49592: GO 49598
// YouWin ;
49594: CALL_OW 103
// end ;
49598: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49599: LD_INT 0
49601: PPUSH
// result := false ;
49602: LD_ADDR_VAR 0 3
49606: PUSH
49607: LD_INT 0
49609: ST_TO_ADDR
// case gameType of GameTypeNormal :
49610: LD_VAR 0 1
49614: PUSH
49615: LD_INT 1
49617: DOUBLE
49618: EQUAL
49619: IFTRUE 49623
49621: GO 49696
49623: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49624: LD_ADDR_VAR 0 3
49628: PUSH
49629: LD_INT 22
49631: PUSH
49632: LD_VAR 0 2
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: LD_INT 21
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 33
49656: PUSH
49657: LD_INT 3
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 33
49666: PUSH
49667: LD_INT 5
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PPUSH
49684: CALL_OW 69
49688: PPUSH
49689: CALL 4946 0 1
49693: ST_TO_ADDR
// end ; GameTypeSurvival :
49694: GO 49931
49696: LD_INT 2
49698: DOUBLE
49699: EQUAL
49700: IFTRUE 49704
49702: GO 49832
49704: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49705: LD_ADDR_VAR 0 3
49709: PUSH
49710: LD_INT 22
49712: PUSH
49713: LD_VAR 0 2
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 2
49724: PUSH
49725: LD_INT 30
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 30
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: LIST
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PPUSH
49754: CALL_OW 69
49758: PPUSH
49759: CALL 4946 0 1
49763: PUSH
49764: LD_INT 22
49766: PUSH
49767: LD_VAR 0 2
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: LD_INT 21
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 33
49791: PUSH
49792: LD_INT 3
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 33
49801: PUSH
49802: LD_INT 5
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PPUSH
49819: CALL_OW 69
49823: PPUSH
49824: CALL 4946 0 1
49828: AND
49829: ST_TO_ADDR
// end ; GameTypeKing :
49830: GO 49931
49832: LD_INT 3
49834: DOUBLE
49835: EQUAL
49836: IFTRUE 49840
49838: GO 49930
49840: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
49841: LD_ADDR_VAR 0 3
49845: PUSH
49846: LD_INT 22
49848: PUSH
49849: LD_VAR 0 2
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: PUSH
49861: LD_INT 21
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 33
49873: PUSH
49874: LD_INT 3
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 33
49883: PUSH
49884: LD_INT 5
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PPUSH
49901: CALL_OW 69
49905: PPUSH
49906: CALL 4946 0 1
49910: PUSH
49911: LD_VAR 0 2
49915: PPUSH
49916: CALL 53208 0 1
49920: PUSH
49921: LD_EXP 33
49925: LESS
49926: AND
49927: ST_TO_ADDR
// end ; end ;
49928: GO 49931
49930: POP
// end ;
49931: LD_VAR 0 3
49935: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49936: LD_INT 100
49938: IFFALSE 50160
49940: GO 49942
49942: DISABLE
49943: LD_INT 0
49945: PPUSH
49946: PPUSH
// begin if Multiplayer then
49947: LD_OWVAR 4
49951: IFFALSE 49959
// SetPlayerSpectator ( ) else
49953: CALL_OW 572
49957: GO 49968
// FogOff ( your_side ) ;
49959: LD_OWVAR 2
49963: PPUSH
49964: CALL_OW 344
// repeat gameIsOn := false ;
49968: LD_ADDR_VAR 0 1
49972: PUSH
49973: LD_INT 0
49975: ST_TO_ADDR
// for i := 1 to 8 do
49976: LD_ADDR_VAR 0 2
49980: PUSH
49981: DOUBLE
49982: LD_INT 1
49984: DEC
49985: ST_TO_ADDR
49986: LD_INT 8
49988: PUSH
49989: FOR_TO
49990: IFFALSE 50112
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49992: LD_EXP 5
49996: PUSH
49997: LD_VAR 0 2
50001: ARRAY
50002: PUSH
50003: LD_VAR 0 2
50007: PPUSH
50008: CALL_OW 108
50012: AND
50013: PUSH
50014: LD_VAR 0 2
50018: PUSH
50019: LD_OWVAR 2
50023: NONEQUAL
50024: AND
50025: IFFALSE 50110
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
50027: LD_EXP 6
50031: PUSH
50032: LD_VAR 0 2
50036: ARRAY
50037: NOT
50038: PUSH
50039: LD_EXP 6
50043: PUSH
50044: LD_VAR 0 2
50048: ARRAY
50049: PUSH
50050: LD_EXP 6
50054: PUSH
50055: LD_OWVAR 2
50059: ARRAY
50060: NONEQUAL
50061: PUSH
50062: LD_OWVAR 2
50066: PPUSH
50067: LD_VAR 0 2
50071: PPUSH
50072: CALL_OW 81
50076: PUSH
50077: LD_INT 1
50079: NONEQUAL
50080: AND
50081: OR
50082: IFFALSE 50110
// if HasPowerByGameType ( mpGameType , i ) then
50084: LD_EXP 1
50088: PPUSH
50089: LD_VAR 0 2
50093: PPUSH
50094: CALL 49599 0 2
50098: IFFALSE 50110
// begin gameIsOn := true ;
50100: LD_ADDR_VAR 0 1
50104: PUSH
50105: LD_INT 1
50107: ST_TO_ADDR
// break ;
50108: GO 50112
// end ;
50110: GO 49989
50112: POP
50113: POP
// wait ( 100 ) ;
50114: LD_INT 100
50116: PPUSH
50117: CALL_OW 67
// until not gameIsOn ;
50121: LD_VAR 0 1
50125: NOT
50126: IFFALSE 49968
// if IAmServer then
50128: CALL_OW 518
50132: IFFALSE 50141
// wait ( 0 0$3 ) ;
50134: LD_INT 105
50136: PPUSH
50137: CALL_OW 67
// if Multiplayer then
50141: LD_OWVAR 4
50145: IFFALSE 50153
// YouLostInMultiplayer else
50147: CALL_OW 107
50151: GO 50160
// YouLost (  ) ;
50153: LD_STRING 
50155: PPUSH
50156: CALL_OW 104
// end ;
50160: PPOPN 2
50162: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
50163: LD_EXP 31
50167: IFFALSE 50543
50169: GO 50171
50171: DISABLE
50172: LD_INT 0
50174: PPUSH
50175: PPUSH
50176: PPUSH
50177: PPUSH
50178: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
50179: LD_ADDR_VAR 0 5
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: LD_INT 2
50189: PUSH
50190: LD_INT 3
50192: PUSH
50193: LD_INT 4
50195: PUSH
50196: LD_INT 5
50198: PUSH
50199: LD_INT 6
50201: PUSH
50202: LD_INT 7
50204: PUSH
50205: LD_INT 8
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
50218: LD_INT 350
50220: PPUSH
50221: CALL_OW 67
// for i := 1 to 8 do
50225: LD_ADDR_VAR 0 1
50229: PUSH
50230: DOUBLE
50231: LD_INT 1
50233: DEC
50234: ST_TO_ADDR
50235: LD_INT 8
50237: PUSH
50238: FOR_TO
50239: IFFALSE 50513
// begin j := sides [ i ] ;
50241: LD_ADDR_VAR 0 2
50245: PUSH
50246: LD_VAR 0 5
50250: PUSH
50251: LD_VAR 0 1
50255: ARRAY
50256: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
50257: LD_EXP 38
50261: PUSH
50262: LD_VAR 0 2
50266: ARRAY
50267: PPUSH
50268: CALL 4946 0 1
50272: PUSH
50273: LD_VAR 0 2
50277: PPUSH
50278: CALL_OW 108
50282: AND
50283: PUSH
50284: LD_EXP 1
50288: PPUSH
50289: LD_VAR 0 2
50293: PPUSH
50294: CALL 49599 0 2
50298: AND
50299: IFFALSE 50511
// begin wait ( mpRespawn div 3 ) ;
50301: LD_EXP 31
50305: PUSH
50306: LD_INT 3
50308: DIV
50309: PPUSH
50310: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50314: LD_ADDR_VAR 0 3
50318: PUSH
50319: LD_INT 22
50321: PUSH
50322: LD_VAR 0 2
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 50
50333: PUSH
50334: EMPTY
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: LD_INT 30
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 30
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: LIST
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: LIST
50369: PPUSH
50370: CALL_OW 69
50374: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
50375: LD_VAR 0 3
50379: NOT
50380: PUSH
50381: LD_VAR 0 2
50385: PPUSH
50386: CALL_OW 108
50390: NOT
50391: OR
50392: PUSH
50393: LD_EXP 1
50397: PPUSH
50398: LD_VAR 0 2
50402: PPUSH
50403: CALL 49599 0 2
50407: NOT
50408: OR
50409: IFFALSE 50413
// continue ;
50411: GO 50238
// spawn := tmp [ 1 ] ;
50413: LD_ADDR_VAR 0 4
50417: PUSH
50418: LD_VAR 0 3
50422: PUSH
50423: LD_INT 1
50425: ARRAY
50426: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50427: LD_EXP 38
50431: PUSH
50432: LD_VAR 0 2
50436: ARRAY
50437: PUSH
50438: LD_INT 1
50440: ARRAY
50441: PPUSH
50442: LD_VAR 0 4
50446: PPUSH
50447: CALL_OW 250
50451: PPUSH
50452: LD_VAR 0 4
50456: PPUSH
50457: CALL_OW 251
50461: PPUSH
50462: LD_INT 32
50464: PPUSH
50465: LD_INT 1
50467: PPUSH
50468: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50472: LD_ADDR_EXP 38
50476: PUSH
50477: LD_EXP 38
50481: PPUSH
50482: LD_VAR 0 2
50486: PPUSH
50487: LD_EXP 38
50491: PUSH
50492: LD_VAR 0 2
50496: ARRAY
50497: PPUSH
50498: LD_INT 1
50500: PPUSH
50501: CALL_OW 3
50505: PPUSH
50506: CALL_OW 1
50510: ST_TO_ADDR
// end ; end ;
50511: GO 50238
50513: POP
50514: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50515: LD_ADDR_VAR 0 5
50519: PUSH
50520: LD_VAR 0 5
50524: PPUSH
50525: LD_INT 1
50527: PPUSH
50528: LD_INT 8
50530: PPUSH
50531: LD_INT 1
50533: PPUSH
50534: CALL 7224 0 4
50538: ST_TO_ADDR
// until false ;
50539: LD_INT 0
50541: IFFALSE 50218
// end ;
50543: PPOPN 5
50545: END
// every 0 0$1 marked mpActive do
50546: GO 50548
50548: DISABLE
// begin enable ;
50549: ENABLE
// if not mpDisplayStrings then
50550: LD_EXP 36
50554: NOT
50555: IFFALSE 50566
// begin display_strings := [ ] ;
50557: LD_ADDR_OWVAR 47
50561: PUSH
50562: EMPTY
50563: ST_TO_ADDR
// exit ;
50564: GO 50576
// end ; display_strings := mpDisplayStrings ;
50566: LD_ADDR_OWVAR 47
50570: PUSH
50571: LD_EXP 36
50575: ST_TO_ADDR
// end ; end_of_file
50576: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50577: LD_INT 0
50579: PPUSH
50580: PPUSH
50581: PPUSH
50582: PPUSH
50583: PPUSH
50584: PPUSH
50585: PPUSH
50586: PPUSH
50587: PPUSH
// if GetType ( un ) = unit_vehicle then
50588: LD_VAR 0 1
50592: PPUSH
50593: CALL_OW 247
50597: PUSH
50598: LD_INT 2
50600: EQUAL
50601: IFFALSE 50605
// exit ;
50603: GO 51237
// side := GetSide ( un ) ;
50605: LD_ADDR_VAR 0 9
50609: PUSH
50610: LD_VAR 0 1
50614: PPUSH
50615: CALL_OW 255
50619: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50620: LD_EXP 1
50624: PUSH
50625: LD_INT 2
50627: EQUAL
50628: IFFALSE 50704
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
50630: LD_VAR 0 1
50634: PPUSH
50635: CALL_OW 266
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: IN
50650: IFFALSE 50704
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50652: LD_ADDR_VAR 0 3
50656: PUSH
50657: LD_INT 22
50659: PUSH
50660: LD_VAR 0 9
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 21
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PPUSH
50683: CALL_OW 69
50687: PUSH
50688: FOR_IN
50689: IFFALSE 50702
// KillUnit ( i ) ;
50691: LD_VAR 0 3
50695: PPUSH
50696: CALL_OW 66
50700: GO 50688
50702: POP
50703: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50704: LD_VAR 0 1
50708: PPUSH
50709: CALL_OW 257
50713: PUSH
50714: LD_INT 12
50716: PUSH
50717: LD_INT 17
50719: PUSH
50720: LD_INT 15
50722: PUSH
50723: LD_INT 16
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: IN
50732: PUSH
50733: LD_VAR 0 1
50737: PPUSH
50738: CALL_OW 263
50742: PUSH
50743: LD_INT 5
50745: EQUAL
50746: OR
50747: IFFALSE 50966
// begin tag := 0 ;
50749: LD_ADDR_VAR 0 5
50753: PUSH
50754: LD_INT 0
50756: ST_TO_ADDR
// for i := 1 to 8 do
50757: LD_ADDR_VAR 0 3
50761: PUSH
50762: DOUBLE
50763: LD_INT 1
50765: DEC
50766: ST_TO_ADDR
50767: LD_INT 8
50769: PUSH
50770: FOR_TO
50771: IFFALSE 50805
// if un in mpApePosIndex [ i ] then
50773: LD_VAR 0 1
50777: PUSH
50778: LD_EXP 30
50782: PUSH
50783: LD_VAR 0 3
50787: ARRAY
50788: IN
50789: IFFALSE 50803
// begin tag := i ;
50791: LD_ADDR_VAR 0 5
50795: PUSH
50796: LD_VAR 0 3
50800: ST_TO_ADDR
// break ;
50801: GO 50805
// end ;
50803: GO 50770
50805: POP
50806: POP
// if not tag then
50807: LD_VAR 0 5
50811: NOT
50812: IFFALSE 50816
// exit ;
50814: GO 51237
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50816: LD_ADDR_VAR 0 7
50820: PUSH
50821: LD_EXP 29
50825: PUSH
50826: LD_EXP 5
50830: PUSH
50831: LD_VAR 0 5
50835: ARRAY
50836: ARRAY
50837: ST_TO_ADDR
// if not area then
50838: LD_VAR 0 7
50842: NOT
50843: IFFALSE 50847
// exit ;
50845: GO 51237
// wait ( 4 4$00 ) ;
50847: LD_INT 8400
50849: PPUSH
50850: CALL_OW 67
// repeat wait ( 10 ) ;
50854: LD_INT 10
50856: PPUSH
50857: CALL_OW 67
// until not mpBlockRespThread ;
50861: LD_EXP 39
50865: NOT
50866: IFFALSE 50854
// mpBlockRespThread := true ;
50868: LD_ADDR_EXP 39
50872: PUSH
50873: LD_INT 1
50875: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
50876: LD_INT 0
50878: PPUSH
50879: CALL 36803 0 1
// ape := CreateHuman ;
50883: LD_ADDR_VAR 0 4
50887: PUSH
50888: CALL_OW 44
50892: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
50893: LD_ADDR_EXP 30
50897: PUSH
50898: LD_EXP 30
50902: PPUSH
50903: LD_VAR 0 5
50907: PPUSH
50908: LD_EXP 30
50912: PUSH
50913: LD_VAR 0 5
50917: ARRAY
50918: PPUSH
50919: LD_VAR 0 4
50923: PPUSH
50924: CALL 40555 0 2
50928: PPUSH
50929: CALL_OW 1
50933: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
50934: LD_VAR 0 4
50938: PPUSH
50939: LD_VAR 0 7
50943: PPUSH
50944: LD_INT 0
50946: PPUSH
50947: CALL_OW 49
// wait ( 10 ) ;
50951: LD_INT 10
50953: PPUSH
50954: CALL_OW 67
// mpBlockRespThread := false ;
50958: LD_ADDR_EXP 39
50962: PUSH
50963: LD_INT 0
50965: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50966: LD_VAR 0 1
50970: PPUSH
50971: CALL_OW 247
50975: PUSH
50976: LD_INT 1
50978: EQUAL
50979: PUSH
50980: LD_VAR 0 1
50984: PPUSH
50985: CALL_OW 248
50989: PUSH
50990: LD_INT 0
50992: GREATER
50993: AND
50994: IFFALSE 51237
// begin if not mpRespawn then
50996: LD_EXP 31
51000: NOT
51001: IFFALSE 51005
// exit ;
51003: GO 51237
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
51005: LD_VAR 0 9
51009: PPUSH
51010: CALL_OW 108
51014: NOT
51015: PUSH
51016: LD_EXP 1
51020: PPUSH
51021: LD_VAR 0 9
51025: PPUSH
51026: CALL 49599 0 2
51030: NOT
51031: AND
51032: IFFALSE 51036
// exit ;
51034: GO 51237
// side := GetSide ( un ) ;
51036: LD_ADDR_VAR 0 9
51040: PUSH
51041: LD_VAR 0 1
51045: PPUSH
51046: CALL_OW 255
51050: ST_TO_ADDR
// nation := GetNation ( un ) ;
51051: LD_ADDR_VAR 0 8
51055: PUSH
51056: LD_VAR 0 1
51060: PPUSH
51061: CALL_OW 248
51065: ST_TO_ADDR
// class := GetClass ( un ) ;
51066: LD_ADDR_VAR 0 6
51070: PUSH
51071: LD_VAR 0 1
51075: PPUSH
51076: CALL_OW 257
51080: ST_TO_ADDR
// if class > 4 then
51081: LD_VAR 0 6
51085: PUSH
51086: LD_INT 4
51088: GREATER
51089: IFFALSE 51099
// class := 1 ;
51091: LD_ADDR_VAR 0 6
51095: PUSH
51096: LD_INT 1
51098: ST_TO_ADDR
// repeat wait ( 10 ) ;
51099: LD_INT 10
51101: PPUSH
51102: CALL_OW 67
// until not mpBlockRespThread ;
51106: LD_EXP 39
51110: NOT
51111: IFFALSE 51099
// mpBlockRespThread := true ;
51113: LD_ADDR_EXP 39
51117: PUSH
51118: LD_INT 1
51120: ST_TO_ADDR
// uc_side := side ;
51121: LD_ADDR_OWVAR 20
51125: PUSH
51126: LD_VAR 0 9
51130: ST_TO_ADDR
// uc_nation := nation ;
51131: LD_ADDR_OWVAR 21
51135: PUSH
51136: LD_VAR 0 8
51140: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
51141: LD_INT 0
51143: PPUSH
51144: LD_VAR 0 6
51148: PPUSH
51149: LD_INT 2
51151: PPUSH
51152: CALL_OW 380
// un := CreateHuman ;
51156: LD_ADDR_VAR 0 1
51160: PUSH
51161: CALL_OW 44
51165: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
51166: LD_ADDR_EXP 38
51170: PUSH
51171: LD_EXP 38
51175: PPUSH
51176: LD_VAR 0 9
51180: PPUSH
51181: LD_EXP 38
51185: PUSH
51186: LD_VAR 0 9
51190: ARRAY
51191: PPUSH
51192: LD_EXP 38
51196: PUSH
51197: LD_VAR 0 9
51201: ARRAY
51202: PUSH
51203: LD_INT 1
51205: PLUS
51206: PPUSH
51207: LD_VAR 0 1
51211: PPUSH
51212: CALL_OW 1
51216: PPUSH
51217: CALL_OW 1
51221: ST_TO_ADDR
// wait ( 10 ) ;
51222: LD_INT 10
51224: PPUSH
51225: CALL_OW 67
// mpBlockRespThread := false ;
51229: LD_ADDR_EXP 39
51233: PUSH
51234: LD_INT 0
51236: ST_TO_ADDR
// end ; end ;
51237: LD_VAR 0 2
51241: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
51242: LD_INT 0
51244: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
51245: LD_VAR 0 1
51249: PPUSH
51250: CALL_OW 266
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: IN
51265: IFFALSE 51290
// SetBName ( building , @ & GetSide ( building ) ) ;
51267: LD_VAR 0 1
51271: PPUSH
51272: LD_STRING @
51274: PUSH
51275: LD_VAR 0 1
51279: PPUSH
51280: CALL_OW 255
51284: STR
51285: PPUSH
51286: CALL_OW 500
// end ;
51290: LD_VAR 0 2
51294: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
51295: LD_INT 0
51297: PPUSH
51298: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
51299: LD_EXP 1
51303: PUSH
51304: LD_INT 2
51306: EQUAL
51307: PUSH
51308: LD_VAR 0 1
51312: PPUSH
51313: CALL_OW 266
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: IN
51328: AND
51329: IFFALSE 51394
// begin KillUnit ( building ) ;
51331: LD_VAR 0 1
51335: PPUSH
51336: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
51340: LD_ADDR_VAR 0 5
51344: PUSH
51345: LD_INT 22
51347: PUSH
51348: LD_VAR 0 2
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 21
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PPUSH
51371: CALL_OW 69
51375: PUSH
51376: FOR_IN
51377: IFFALSE 51390
// KillUnit ( i ) ;
51379: LD_VAR 0 5
51383: PPUSH
51384: CALL_OW 66
51388: GO 51376
51390: POP
51391: POP
// exit ;
51392: GO 51439
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51394: LD_VAR 0 1
51398: PPUSH
51399: CALL_OW 266
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: IN
51414: IFFALSE 51439
// SetBName ( building , @ & GetSide ( building ) ) ;
51416: LD_VAR 0 1
51420: PPUSH
51421: LD_STRING @
51423: PUSH
51424: LD_VAR 0 1
51428: PPUSH
51429: CALL_OW 255
51433: STR
51434: PPUSH
51435: CALL_OW 500
// end ; end_of_file
51439: LD_VAR 0 4
51443: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51444: LD_EXP 37
51448: PUSH
51449: CALL 51654 0 0
51453: AND
51454: PUSH
51455: LD_OWVAR 4
51459: AND
51460: IFFALSE 51651
51462: GO 51464
51464: DISABLE
51465: LD_INT 0
51467: PPUSH
51468: PPUSH
// begin canWin := false ;
51469: LD_ADDR_VAR 0 2
51473: PUSH
51474: LD_INT 0
51476: ST_TO_ADDR
// if not HasPower ( your_side ) then
51477: LD_OWVAR 2
51481: PPUSH
51482: CALL 51694 0 1
51486: NOT
51487: IFFALSE 51498
// begin Multiplayer_Loose_Message ;
51489: CALL_OW 521
// enable ( mpLose ) ;
51493: LD_INT 102
51495: ENABLE_MARKED
// end else
51496: GO 51651
// begin canWin := true ;
51498: LD_ADDR_VAR 0 2
51502: PUSH
51503: LD_INT 1
51505: ST_TO_ADDR
// for i := 1 to 8 do
51506: LD_ADDR_VAR 0 1
51510: PUSH
51511: DOUBLE
51512: LD_INT 1
51514: DEC
51515: ST_TO_ADDR
51516: LD_INT 8
51518: PUSH
51519: FOR_TO
51520: IFFALSE 51637
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51522: LD_EXP 5
51526: PUSH
51527: LD_VAR 0 1
51531: ARRAY
51532: PUSH
51533: LD_VAR 0 1
51537: PPUSH
51538: CALL_OW 108
51542: AND
51543: PUSH
51544: LD_VAR 0 1
51548: PUSH
51549: LD_OWVAR 2
51553: NONEQUAL
51554: AND
51555: IFFALSE 51635
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51557: LD_EXP 6
51561: PUSH
51562: LD_VAR 0 1
51566: ARRAY
51567: NOT
51568: PUSH
51569: LD_EXP 6
51573: PUSH
51574: LD_VAR 0 1
51578: ARRAY
51579: PUSH
51580: LD_EXP 6
51584: PUSH
51585: LD_OWVAR 2
51589: ARRAY
51590: NONEQUAL
51591: PUSH
51592: LD_OWVAR 2
51596: PPUSH
51597: LD_VAR 0 1
51601: PPUSH
51602: CALL_OW 81
51606: PUSH
51607: LD_INT 1
51609: NONEQUAL
51610: AND
51611: OR
51612: IFFALSE 51635
// if HasPower ( i ) then
51614: LD_VAR 0 1
51618: PPUSH
51619: CALL 51694 0 1
51623: IFFALSE 51635
// begin canWin := false ;
51625: LD_ADDR_VAR 0 2
51629: PUSH
51630: LD_INT 0
51632: ST_TO_ADDR
// break ;
51633: GO 51637
// end ;
51635: GO 51519
51637: POP
51638: POP
// if canWin then
51639: LD_VAR 0 2
51643: IFFALSE 51650
// enable ( mpWin ) else
51645: LD_INT 101
51647: ENABLE_MARKED
51648: GO 51651
// enable ;
51650: ENABLE
// end ; end ;
51651: PPOPN 2
51653: END
// function CanWinLoose ; begin
51654: LD_INT 0
51656: PPUSH
// result := true ;
51657: LD_ADDR_VAR 0 1
51661: PUSH
51662: LD_INT 1
51664: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51665: CALL_OW 531
51669: PUSH
51670: CALL_OW 519
51674: PUSH
51675: LD_INT 1
51677: GREATER
51678: AND
51679: IFFALSE 51689
// result := false ;
51681: LD_ADDR_VAR 0 1
51685: PUSH
51686: LD_INT 0
51688: ST_TO_ADDR
// end ;
51689: LD_VAR 0 1
51693: RET
// function HasPower ( i ) ; begin
51694: LD_INT 0
51696: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51697: LD_ADDR_VAR 0 2
51701: PUSH
51702: LD_INT 22
51704: PUSH
51705: LD_VAR 0 1
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: LD_INT 21
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 33
51729: PUSH
51730: LD_INT 3
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 33
51739: PUSH
51740: LD_INT 5
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PPUSH
51757: CALL_OW 69
51761: ST_TO_ADDR
// end ; end_of_file
51762: LD_VAR 0 2
51766: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51767: LD_EXP 37
51771: IFFALSE 51814
51773: GO 51775
51775: DISABLE
51776: LD_INT 0
51778: PPUSH
// begin for i := 1 to 8 do
51779: LD_ADDR_VAR 0 1
51783: PUSH
51784: DOUBLE
51785: LD_INT 1
51787: DEC
51788: ST_TO_ADDR
51789: LD_INT 8
51791: PUSH
51792: FOR_TO
51793: IFFALSE 51812
// SetRestrict ( b_depot , i , state_disabled ) ;
51795: LD_INT 0
51797: PPUSH
51798: LD_VAR 0 1
51802: PPUSH
51803: LD_INT 0
51805: PPUSH
51806: CALL_OW 324
51810: GO 51792
51812: POP
51813: POP
// end ;
51814: PPOPN 1
51816: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51817: LD_EXP 37
51821: PUSH
51822: CALL 52027 0 0
51826: AND
51827: PUSH
51828: LD_OWVAR 4
51832: AND
51833: IFFALSE 52024
51835: GO 51837
51837: DISABLE
51838: LD_INT 0
51840: PPUSH
51841: PPUSH
// begin canWin := false ;
51842: LD_ADDR_VAR 0 2
51846: PUSH
51847: LD_INT 0
51849: ST_TO_ADDR
// if not HasPower ( your_side ) then
51850: LD_OWVAR 2
51854: PPUSH
51855: CALL 52067 0 1
51859: NOT
51860: IFFALSE 51871
// begin Multiplayer_Loose_Message ;
51862: CALL_OW 521
// enable ( mpLose ) ;
51866: LD_INT 102
51868: ENABLE_MARKED
// end else
51869: GO 52024
// begin canWin := true ;
51871: LD_ADDR_VAR 0 2
51875: PUSH
51876: LD_INT 1
51878: ST_TO_ADDR
// for i := 1 to 8 do
51879: LD_ADDR_VAR 0 1
51883: PUSH
51884: DOUBLE
51885: LD_INT 1
51887: DEC
51888: ST_TO_ADDR
51889: LD_INT 8
51891: PUSH
51892: FOR_TO
51893: IFFALSE 52010
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51895: LD_EXP 5
51899: PUSH
51900: LD_VAR 0 1
51904: ARRAY
51905: PUSH
51906: LD_VAR 0 1
51910: PPUSH
51911: CALL_OW 108
51915: AND
51916: PUSH
51917: LD_VAR 0 1
51921: PUSH
51922: LD_OWVAR 2
51926: NONEQUAL
51927: AND
51928: IFFALSE 52008
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51930: LD_EXP 6
51934: PUSH
51935: LD_VAR 0 1
51939: ARRAY
51940: NOT
51941: PUSH
51942: LD_EXP 6
51946: PUSH
51947: LD_VAR 0 1
51951: ARRAY
51952: PUSH
51953: LD_EXP 6
51957: PUSH
51958: LD_OWVAR 2
51962: ARRAY
51963: NONEQUAL
51964: PUSH
51965: LD_OWVAR 2
51969: PPUSH
51970: LD_VAR 0 1
51974: PPUSH
51975: CALL_OW 81
51979: PUSH
51980: LD_INT 1
51982: NONEQUAL
51983: AND
51984: OR
51985: IFFALSE 52008
// if HasPower ( i ) then
51987: LD_VAR 0 1
51991: PPUSH
51992: CALL 52067 0 1
51996: IFFALSE 52008
// begin canWin := false ;
51998: LD_ADDR_VAR 0 2
52002: PUSH
52003: LD_INT 0
52005: ST_TO_ADDR
// break ;
52006: GO 52010
// end ;
52008: GO 51892
52010: POP
52011: POP
// if canWin then
52012: LD_VAR 0 2
52016: IFFALSE 52023
// enable ( mpWin ) else
52018: LD_INT 101
52020: ENABLE_MARKED
52021: GO 52024
// enable ;
52023: ENABLE
// end ; end ;
52024: PPOPN 2
52026: END
// function CanWinLoose ; begin
52027: LD_INT 0
52029: PPUSH
// result := true ;
52030: LD_ADDR_VAR 0 1
52034: PUSH
52035: LD_INT 1
52037: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
52038: CALL_OW 531
52042: PUSH
52043: CALL_OW 519
52047: PUSH
52048: LD_INT 1
52050: GREATER
52051: AND
52052: IFFALSE 52062
// result := false ;
52054: LD_ADDR_VAR 0 1
52058: PUSH
52059: LD_INT 0
52061: ST_TO_ADDR
// end ;
52062: LD_VAR 0 1
52066: RET
// function HasPower ( i ) ; begin
52067: LD_INT 0
52069: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
52070: LD_INT 22
52072: PUSH
52073: LD_VAR 0 1
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: LD_INT 30
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 30
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: LIST
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PPUSH
52114: CALL_OW 69
52118: NOT
52119: IFFALSE 52123
// exit ;
52121: GO 52188
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
52123: LD_ADDR_VAR 0 2
52127: PUSH
52128: LD_INT 22
52130: PUSH
52131: LD_VAR 0 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: LD_INT 21
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 33
52155: PUSH
52156: LD_INT 3
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 33
52165: PUSH
52166: LD_INT 5
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PPUSH
52183: CALL_OW 69
52187: ST_TO_ADDR
// end ; end_of_file
52188: LD_VAR 0 2
52192: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
52193: LD_EXP 37
52197: IFFALSE 52536
52199: GO 52201
52201: DISABLE
52202: LD_INT 0
52204: PPUSH
52205: PPUSH
52206: PPUSH
// begin mpKingPoints := [ ] ;
52207: LD_ADDR_EXP 42
52211: PUSH
52212: EMPTY
52213: ST_TO_ADDR
// if mpTeamGame then
52214: LD_EXP 9
52218: IFFALSE 52272
// begin for i := 1 to Count ( mpTeams ) do
52220: LD_ADDR_VAR 0 1
52224: PUSH
52225: DOUBLE
52226: LD_INT 1
52228: DEC
52229: ST_TO_ADDR
52230: LD_EXP 8
52234: PPUSH
52235: CALL 4946 0 1
52239: PUSH
52240: FOR_TO
52241: IFFALSE 52268
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52243: LD_ADDR_EXP 42
52247: PUSH
52248: LD_EXP 42
52252: PPUSH
52253: LD_VAR 0 1
52257: PPUSH
52258: LD_INT 0
52260: PPUSH
52261: CALL_OW 1
52265: ST_TO_ADDR
52266: GO 52240
52268: POP
52269: POP
// end else
52270: GO 52315
// begin for i := 1 to 8 do
52272: LD_ADDR_VAR 0 1
52276: PUSH
52277: DOUBLE
52278: LD_INT 1
52280: DEC
52281: ST_TO_ADDR
52282: LD_INT 8
52284: PUSH
52285: FOR_TO
52286: IFFALSE 52313
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52288: LD_ADDR_EXP 42
52292: PUSH
52293: LD_EXP 42
52297: PPUSH
52298: LD_VAR 0 1
52302: PPUSH
52303: LD_INT 0
52305: PPUSH
52306: CALL_OW 1
52310: ST_TO_ADDR
52311: GO 52285
52313: POP
52314: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
52315: LD_ADDR_VAR 0 3
52319: PUSH
52320: LD_INT 51
52322: PPUSH
52323: LD_INT 0
52325: PPUSH
52326: CALL_OW 517
52330: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52331: LD_ADDR_VAR 0 1
52335: PUSH
52336: DOUBLE
52337: LD_INT 1
52339: DEC
52340: ST_TO_ADDR
52341: LD_VAR 0 3
52345: PUSH
52346: LD_INT 1
52348: ARRAY
52349: PUSH
52350: FOR_TO
52351: IFFALSE 52418
// for j := 1 to 8 do
52353: LD_ADDR_VAR 0 2
52357: PUSH
52358: DOUBLE
52359: LD_INT 1
52361: DEC
52362: ST_TO_ADDR
52363: LD_INT 8
52365: PUSH
52366: FOR_TO
52367: IFFALSE 52414
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
52369: LD_VAR 0 3
52373: PUSH
52374: LD_INT 1
52376: ARRAY
52377: PUSH
52378: LD_VAR 0 1
52382: ARRAY
52383: PPUSH
52384: LD_VAR 0 3
52388: PUSH
52389: LD_INT 2
52391: ARRAY
52392: PUSH
52393: LD_VAR 0 1
52397: ARRAY
52398: PPUSH
52399: LD_VAR 0 2
52403: PPUSH
52404: LD_INT 12
52406: NEG
52407: PPUSH
52408: CALL_OW 330
52412: GO 52366
52414: POP
52415: POP
52416: GO 52350
52418: POP
52419: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52420: LD_EXP 32
52424: PPUSH
52425: LD_INT 1
52427: PPUSH
52428: CALL_OW 424
// UpdateCounter ;
52432: CALL 53038 0 0
// repeat wait ( 0 0$1 ) ;
52436: LD_INT 35
52438: PPUSH
52439: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52443: LD_ADDR_VAR 0 3
52447: PUSH
52448: LD_EXP 32
52452: PPUSH
52453: LD_INT 3
52455: PUSH
52456: LD_INT 57
52458: PUSH
52459: EMPTY
52460: LIST
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 50
52468: PUSH
52469: EMPTY
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: LD_INT 30
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 30
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: LIST
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: LIST
52504: PPUSH
52505: CALL_OW 70
52509: ST_TO_ADDR
// if not tmp then
52510: LD_VAR 0 3
52514: NOT
52515: IFFALSE 52519
// continue ;
52517: GO 52436
// AddPoints ( tmp ) ;
52519: LD_VAR 0 3
52523: PPUSH
52524: CALL 52716 0 1
// UpdateCounter ;
52528: CALL 53038 0 0
// until false ;
52532: LD_INT 0
52534: IFFALSE 52436
// end ;
52536: PPOPN 3
52538: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52539: LD_EXP 37
52543: PUSH
52544: LD_EXP 35
52548: AND
52549: IFFALSE 52713
52551: GO 52553
52553: DISABLE
52554: LD_INT 0
52556: PPUSH
52557: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52558: LD_ADDR_VAR 0 2
52562: PUSH
52563: LD_INT 51
52565: PPUSH
52566: LD_INT 0
52568: PPUSH
52569: CALL_OW 517
52573: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52574: LD_ADDR_VAR 0 1
52578: PUSH
52579: DOUBLE
52580: LD_INT 1
52582: DEC
52583: ST_TO_ADDR
52584: LD_VAR 0 2
52588: PUSH
52589: LD_INT 1
52591: ARRAY
52592: PUSH
52593: FOR_TO
52594: IFFALSE 52635
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52596: LD_VAR 0 2
52600: PUSH
52601: LD_INT 1
52603: ARRAY
52604: PUSH
52605: LD_VAR 0 1
52609: ARRAY
52610: PPUSH
52611: LD_VAR 0 2
52615: PUSH
52616: LD_INT 2
52618: ARRAY
52619: PUSH
52620: LD_VAR 0 1
52624: ARRAY
52625: PPUSH
52626: LD_INT 125
52628: PPUSH
52629: CALL_OW 495
52633: GO 52593
52635: POP
52636: POP
// repeat wait ( mpEmissions ) ;
52637: LD_EXP 35
52641: PPUSH
52642: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52646: LD_ADDR_VAR 0 1
52650: PUSH
52651: DOUBLE
52652: LD_INT 1
52654: DEC
52655: ST_TO_ADDR
52656: LD_VAR 0 2
52660: PUSH
52661: LD_INT 1
52663: ARRAY
52664: PUSH
52665: FOR_TO
52666: IFFALSE 52707
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52668: LD_VAR 0 2
52672: PUSH
52673: LD_INT 1
52675: ARRAY
52676: PUSH
52677: LD_VAR 0 1
52681: ARRAY
52682: PPUSH
52683: LD_VAR 0 2
52687: PUSH
52688: LD_INT 2
52690: ARRAY
52691: PUSH
52692: LD_VAR 0 1
52696: ARRAY
52697: PPUSH
52698: LD_INT 15
52700: PPUSH
52701: CALL_OW 495
52705: GO 52665
52707: POP
52708: POP
// until false ;
52709: LD_INT 0
52711: IFFALSE 52637
// end ;
52713: PPOPN 2
52715: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52716: LD_INT 0
52718: PPUSH
52719: PPUSH
52720: PPUSH
52721: PPUSH
52722: PPUSH
// if mpTeamGame then
52723: LD_EXP 9
52727: IFFALSE 52924
// begin first := depots [ 1 ] ;
52729: LD_ADDR_VAR 0 4
52733: PUSH
52734: LD_VAR 0 1
52738: PUSH
52739: LD_INT 1
52741: ARRAY
52742: ST_TO_ADDR
// side := GetSide ( first ) ;
52743: LD_ADDR_VAR 0 6
52747: PUSH
52748: LD_VAR 0 4
52752: PPUSH
52753: CALL_OW 255
52757: ST_TO_ADDR
// for i := 1 to mpTeams do
52758: LD_ADDR_VAR 0 3
52762: PUSH
52763: DOUBLE
52764: LD_INT 1
52766: DEC
52767: ST_TO_ADDR
52768: LD_EXP 8
52772: PUSH
52773: FOR_TO
52774: IFFALSE 52808
// if side in mpTeams [ i ] then
52776: LD_VAR 0 6
52780: PUSH
52781: LD_EXP 8
52785: PUSH
52786: LD_VAR 0 3
52790: ARRAY
52791: IN
52792: IFFALSE 52806
// begin team := i ;
52794: LD_ADDR_VAR 0 5
52798: PUSH
52799: LD_VAR 0 3
52803: ST_TO_ADDR
// break ;
52804: GO 52808
// end ;
52806: GO 52773
52808: POP
52809: POP
// if not team then
52810: LD_VAR 0 5
52814: NOT
52815: IFFALSE 52819
// exit ;
52817: GO 53033
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52819: LD_EXP 32
52823: PPUSH
52824: LD_INT 81
52826: PUSH
52827: LD_VAR 0 6
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PPUSH
52836: CALL_OW 70
52840: IFFALSE 52844
// exit ;
52842: GO 53033
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52844: LD_ADDR_EXP 42
52848: PUSH
52849: LD_EXP 42
52853: PPUSH
52854: LD_VAR 0 5
52858: PPUSH
52859: LD_EXP 42
52863: PUSH
52864: LD_VAR 0 5
52868: ARRAY
52869: PUSH
52870: LD_INT 1
52872: PLUS
52873: PPUSH
52874: CALL_OW 1
52878: ST_TO_ADDR
// for i in mpTeams [ team ] do
52879: LD_ADDR_VAR 0 3
52883: PUSH
52884: LD_EXP 8
52888: PUSH
52889: LD_VAR 0 5
52893: ARRAY
52894: PUSH
52895: FOR_IN
52896: IFFALSE 52920
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52898: LD_VAR 0 3
52902: PPUSH
52903: LD_EXP 42
52907: PUSH
52908: LD_VAR 0 5
52912: ARRAY
52913: PPUSH
52914: CALL_OW 506
52918: GO 52895
52920: POP
52921: POP
// end else
52922: GO 53033
// begin first := depots [ 1 ] ;
52924: LD_ADDR_VAR 0 4
52928: PUSH
52929: LD_VAR 0 1
52933: PUSH
52934: LD_INT 1
52936: ARRAY
52937: ST_TO_ADDR
// side := GetSide ( first ) ;
52938: LD_ADDR_VAR 0 6
52942: PUSH
52943: LD_VAR 0 4
52947: PPUSH
52948: CALL_OW 255
52952: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52953: LD_EXP 32
52957: PPUSH
52958: LD_INT 81
52960: PUSH
52961: LD_VAR 0 6
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PPUSH
52970: CALL_OW 70
52974: IFFALSE 52978
// exit ;
52976: GO 53033
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52978: LD_ADDR_EXP 42
52982: PUSH
52983: LD_EXP 42
52987: PPUSH
52988: LD_VAR 0 6
52992: PPUSH
52993: LD_EXP 42
52997: PUSH
52998: LD_VAR 0 6
53002: ARRAY
53003: PUSH
53004: LD_INT 1
53006: PLUS
53007: PPUSH
53008: CALL_OW 1
53012: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
53013: LD_VAR 0 6
53017: PPUSH
53018: LD_EXP 42
53022: PUSH
53023: LD_VAR 0 6
53027: ARRAY
53028: PPUSH
53029: CALL_OW 506
// end ; end ;
53033: LD_VAR 0 2
53037: RET
// function UpdateCounter ; var i ; begin
53038: LD_INT 0
53040: PPUSH
53041: PPUSH
// result := [ ] ;
53042: LD_ADDR_VAR 0 1
53046: PUSH
53047: EMPTY
53048: ST_TO_ADDR
// if mpTeamGame then
53049: LD_EXP 9
53053: IFFALSE 53120
// begin for i := 1 to mpTeams do
53055: LD_ADDR_VAR 0 2
53059: PUSH
53060: DOUBLE
53061: LD_INT 1
53063: DEC
53064: ST_TO_ADDR
53065: LD_EXP 8
53069: PUSH
53070: FOR_TO
53071: IFFALSE 53116
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
53073: LD_ADDR_VAR 0 1
53077: PUSH
53078: LD_VAR 0 1
53082: PUSH
53083: LD_STRING #KingoftheHill-Team
53085: PUSH
53086: LD_VAR 0 2
53090: PUSH
53091: LD_EXP 42
53095: PUSH
53096: LD_VAR 0 2
53100: ARRAY
53101: PUSH
53102: LD_EXP 33
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: ADD
53113: ST_TO_ADDR
53114: GO 53070
53116: POP
53117: POP
// end else
53118: GO 53193
// begin for i := 1 to 8 do
53120: LD_ADDR_VAR 0 2
53124: PUSH
53125: DOUBLE
53126: LD_INT 1
53128: DEC
53129: ST_TO_ADDR
53130: LD_INT 8
53132: PUSH
53133: FOR_TO
53134: IFFALSE 53191
// if mpSidePositions [ i ] then
53136: LD_EXP 5
53140: PUSH
53141: LD_VAR 0 2
53145: ARRAY
53146: IFFALSE 53189
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
53148: LD_ADDR_VAR 0 1
53152: PUSH
53153: LD_VAR 0 1
53157: PUSH
53158: LD_STRING #KingoftheHill-Player
53160: PUSH
53161: LD_VAR 0 2
53165: PUSH
53166: LD_EXP 42
53170: PUSH
53171: LD_VAR 0 2
53175: ARRAY
53176: PUSH
53177: LD_EXP 33
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: ADD
53188: ST_TO_ADDR
53189: GO 53133
53191: POP
53192: POP
// end ; mpDisplayStrings := result ;
53193: LD_ADDR_EXP 36
53197: PUSH
53198: LD_VAR 0 1
53202: ST_TO_ADDR
// end ;
53203: LD_VAR 0 1
53207: RET
// export function HowMuchPointsKing ( side ) ; begin
53208: LD_INT 0
53210: PPUSH
// result := HowMuchPoints ( side ) ;
53211: LD_ADDR_VAR 0 2
53215: PUSH
53216: LD_VAR 0 1
53220: PPUSH
53221: CALL 53231 0 1
53225: ST_TO_ADDR
// end ;
53226: LD_VAR 0 2
53230: RET
// function HowMuchPoints ( side ) ; var i ; begin
53231: LD_INT 0
53233: PPUSH
53234: PPUSH
// if mpTeamGame then
53235: LD_EXP 9
53239: IFFALSE 53308
// begin for i := 1 to Count ( mpTeams ) do
53241: LD_ADDR_VAR 0 3
53245: PUSH
53246: DOUBLE
53247: LD_INT 1
53249: DEC
53250: ST_TO_ADDR
53251: LD_EXP 8
53255: PPUSH
53256: CALL 4946 0 1
53260: PUSH
53261: FOR_TO
53262: IFFALSE 53304
// begin if side in mpTeams [ i ] then
53264: LD_VAR 0 1
53268: PUSH
53269: LD_EXP 8
53273: PUSH
53274: LD_VAR 0 3
53278: ARRAY
53279: IN
53280: IFFALSE 53302
// begin result := mpKingPoints [ i ] ;
53282: LD_ADDR_VAR 0 2
53286: PUSH
53287: LD_EXP 42
53291: PUSH
53292: LD_VAR 0 3
53296: ARRAY
53297: ST_TO_ADDR
// exit ;
53298: POP
53299: POP
53300: GO 53324
// end ; end ;
53302: GO 53261
53304: POP
53305: POP
// end else
53306: GO 53324
// result := mpKingPoints [ side ] ;
53308: LD_ADDR_VAR 0 2
53312: PUSH
53313: LD_EXP 42
53317: PUSH
53318: LD_VAR 0 1
53322: ARRAY
53323: ST_TO_ADDR
// end ;
53324: LD_VAR 0 2
53328: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
53329: LD_EXP 37
53333: PUSH
53334: CALL 53656 0 0
53338: AND
53339: PUSH
53340: LD_OWVAR 4
53344: AND
53345: IFFALSE 53581
53347: GO 53349
53349: DISABLE
53350: LD_INT 0
53352: PPUSH
53353: PPUSH
// begin canWin := false ;
53354: LD_ADDR_VAR 0 2
53358: PUSH
53359: LD_INT 0
53361: ST_TO_ADDR
// if not HasPower ( your_side ) then
53362: LD_OWVAR 2
53366: PPUSH
53367: CALL 53696 0 1
53371: NOT
53372: IFFALSE 53383
// begin Multiplayer_Loose_Message ;
53374: CALL_OW 521
// enable ( mpLose ) ;
53378: LD_INT 102
53380: ENABLE_MARKED
// end else
53381: GO 53581
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
53383: LD_ADDR_VAR 0 2
53387: PUSH
53388: LD_OWVAR 2
53392: PPUSH
53393: CALL 53231 0 1
53397: PUSH
53398: LD_EXP 33
53402: GREATEREQUAL
53403: PUSH
53404: LD_OWVAR 2
53408: PPUSH
53409: CALL 53696 0 1
53413: AND
53414: PUSH
53415: CALL 53584 0 0
53419: NOT
53420: OR
53421: ST_TO_ADDR
// for i := 1 to 8 do
53422: LD_ADDR_VAR 0 1
53426: PUSH
53427: DOUBLE
53428: LD_INT 1
53430: DEC
53431: ST_TO_ADDR
53432: LD_INT 8
53434: PUSH
53435: FOR_TO
53436: IFFALSE 53567
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53438: LD_EXP 5
53442: PUSH
53443: LD_VAR 0 1
53447: ARRAY
53448: PUSH
53449: LD_VAR 0 1
53453: PPUSH
53454: CALL_OW 108
53458: AND
53459: PUSH
53460: LD_VAR 0 1
53464: PUSH
53465: LD_OWVAR 2
53469: NONEQUAL
53470: AND
53471: IFFALSE 53565
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53473: LD_EXP 6
53477: PUSH
53478: LD_VAR 0 1
53482: ARRAY
53483: NOT
53484: PUSH
53485: LD_EXP 6
53489: PUSH
53490: LD_VAR 0 1
53494: ARRAY
53495: PUSH
53496: LD_EXP 6
53500: PUSH
53501: LD_OWVAR 2
53505: ARRAY
53506: NONEQUAL
53507: PUSH
53508: LD_OWVAR 2
53512: PPUSH
53513: LD_VAR 0 1
53517: PPUSH
53518: CALL_OW 81
53522: PUSH
53523: LD_INT 1
53525: NONEQUAL
53526: AND
53527: OR
53528: IFFALSE 53565
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53530: LD_VAR 0 1
53534: PPUSH
53535: CALL 53231 0 1
53539: PUSH
53540: LD_EXP 33
53544: GREATEREQUAL
53545: PUSH
53546: LD_VAR 0 1
53550: PPUSH
53551: CALL 53696 0 1
53555: AND
53556: IFFALSE 53565
// begin enable ( mpLose ) ;
53558: LD_INT 102
53560: ENABLE_MARKED
// exit ;
53561: POP
53562: POP
53563: GO 53581
// end ;
53565: GO 53435
53567: POP
53568: POP
// if canWin then
53569: LD_VAR 0 2
53573: IFFALSE 53580
// enable ( mpWin ) else
53575: LD_INT 101
53577: ENABLE_MARKED
53578: GO 53581
// enable ;
53580: ENABLE
// end ; end ;
53581: PPOPN 2
53583: END
// function EnemiesInGame ; var i ; begin
53584: LD_INT 0
53586: PPUSH
53587: PPUSH
// result := false ;
53588: LD_ADDR_VAR 0 1
53592: PUSH
53593: LD_INT 0
53595: ST_TO_ADDR
// for i := 1 to 8 do
53596: LD_ADDR_VAR 0 2
53600: PUSH
53601: DOUBLE
53602: LD_INT 1
53604: DEC
53605: ST_TO_ADDR
53606: LD_INT 8
53608: PUSH
53609: FOR_TO
53610: IFFALSE 53649
// if i <> your_side and HasPower ( i ) then
53612: LD_VAR 0 2
53616: PUSH
53617: LD_OWVAR 2
53621: NONEQUAL
53622: PUSH
53623: LD_VAR 0 2
53627: PPUSH
53628: CALL 53696 0 1
53632: AND
53633: IFFALSE 53647
// begin result := true ;
53635: LD_ADDR_VAR 0 1
53639: PUSH
53640: LD_INT 1
53642: ST_TO_ADDR
// exit ;
53643: POP
53644: POP
53645: GO 53651
// end ;
53647: GO 53609
53649: POP
53650: POP
// end ;
53651: LD_VAR 0 1
53655: RET
// function CanWinLoose ; begin
53656: LD_INT 0
53658: PPUSH
// result := true ;
53659: LD_ADDR_VAR 0 1
53663: PUSH
53664: LD_INT 1
53666: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53667: CALL_OW 531
53671: PUSH
53672: CALL_OW 519
53676: PUSH
53677: LD_INT 1
53679: GREATER
53680: AND
53681: IFFALSE 53691
// result := false ;
53683: LD_ADDR_VAR 0 1
53687: PUSH
53688: LD_INT 0
53690: ST_TO_ADDR
// end ;
53691: LD_VAR 0 1
53695: RET
// function HasPower ( i ) ; begin
53696: LD_INT 0
53698: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53699: LD_ADDR_VAR 0 2
53703: PUSH
53704: LD_INT 22
53706: PUSH
53707: LD_VAR 0 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: PUSH
53719: LD_INT 21
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 33
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 33
53741: PUSH
53742: LD_INT 5
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PPUSH
53759: CALL_OW 69
53763: ST_TO_ADDR
// end ; end_of_file
53764: LD_VAR 0 2
53768: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53769: LD_VAR 0 1
53773: PUSH
53774: LD_INT 200
53776: DOUBLE
53777: GREATEREQUAL
53778: IFFALSE 53786
53780: LD_INT 299
53782: DOUBLE
53783: LESSEQUAL
53784: IFTRUE 53788
53786: GO 53820
53788: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53789: LD_VAR 0 1
53793: PPUSH
53794: LD_VAR 0 2
53798: PPUSH
53799: LD_VAR 0 3
53803: PPUSH
53804: LD_VAR 0 4
53808: PPUSH
53809: LD_VAR 0 5
53813: PPUSH
53814: CALL 54567 0 5
53818: GO 53897
53820: LD_INT 300
53822: DOUBLE
53823: GREATEREQUAL
53824: IFFALSE 53832
53826: LD_INT 399
53828: DOUBLE
53829: LESSEQUAL
53830: IFTRUE 53834
53832: GO 53896
53834: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53835: LD_VAR 0 1
53839: PPUSH
53840: LD_VAR 0 2
53844: PPUSH
53845: LD_VAR 0 3
53849: PPUSH
53850: LD_VAR 0 4
53854: PPUSH
53855: LD_VAR 0 5
53859: PPUSH
53860: LD_VAR 0 6
53864: PPUSH
53865: LD_VAR 0 7
53869: PPUSH
53870: LD_VAR 0 8
53874: PPUSH
53875: LD_VAR 0 9
53879: PPUSH
53880: LD_VAR 0 10
53884: PPUSH
53885: LD_VAR 0 11
53889: PPUSH
53890: CALL 59362 0 11
53894: GO 53897
53896: POP
// end ;
53897: PPOPN 11
53899: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53900: LD_VAR 0 1
53904: PPUSH
53905: LD_VAR 0 2
53909: PPUSH
53910: LD_VAR 0 3
53914: PPUSH
53915: LD_VAR 0 4
53919: PPUSH
53920: LD_VAR 0 5
53924: PPUSH
53925: CALL 53982 0 5
// end ; end_of_file
53929: PPOPN 5
53931: END
// export function SOS_UnitDestroyed ( un ) ; begin
53932: LD_INT 0
53934: PPUSH
// ComRadiation ( un ) ;
53935: LD_VAR 0 1
53939: PPUSH
53940: CALL 54971 0 1
// end ;
53944: LD_VAR 0 2
53948: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53949: LD_INT 0
53951: PPUSH
// ComRadiation ( un ) ;
53952: LD_VAR 0 1
53956: PPUSH
53957: CALL 54971 0 1
// end ;
53961: LD_VAR 0 2
53965: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53966: LD_INT 0
53968: PPUSH
// end ;
53969: LD_VAR 0 4
53973: RET
// export function SOS_Command ( cmd ) ; begin
53974: LD_INT 0
53976: PPUSH
// end ;
53977: LD_VAR 0 2
53981: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53982: LD_INT 0
53984: PPUSH
// end ;
53985: LD_VAR 0 6
53989: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53990: LD_INT 0
53992: PPUSH
53993: PPUSH
53994: PPUSH
53995: PPUSH
// if not vehicle or not factory then
53996: LD_VAR 0 1
54000: NOT
54001: PUSH
54002: LD_VAR 0 2
54006: NOT
54007: OR
54008: IFFALSE 54012
// exit ;
54010: GO 54562
// if not factoryWaypoints then
54012: LD_EXP 53
54016: NOT
54017: IFFALSE 54021
// exit ;
54019: GO 54562
// for i := 1 to Count ( factoryWaypoints ) do
54021: LD_ADDR_VAR 0 4
54025: PUSH
54026: DOUBLE
54027: LD_INT 1
54029: DEC
54030: ST_TO_ADDR
54031: LD_EXP 53
54035: PPUSH
54036: CALL 4946 0 1
54040: PUSH
54041: FOR_TO
54042: IFFALSE 54560
// if factoryWaypoints [ i ] [ 2 ] = factory then
54044: LD_EXP 53
54048: PUSH
54049: LD_VAR 0 4
54053: ARRAY
54054: PUSH
54055: LD_INT 2
54057: ARRAY
54058: PUSH
54059: LD_VAR 0 2
54063: EQUAL
54064: IFFALSE 54558
// begin if GetControl ( vehicle ) = control_manual then
54066: LD_VAR 0 1
54070: PPUSH
54071: CALL_OW 263
54075: PUSH
54076: LD_INT 1
54078: EQUAL
54079: IFFALSE 54441
// begin driver := IsDrivenBy ( vehicle ) ;
54081: LD_ADDR_VAR 0 5
54085: PUSH
54086: LD_VAR 0 1
54090: PPUSH
54091: CALL_OW 311
54095: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
54096: LD_VAR 0 5
54100: PUSH
54101: LD_EXP 54
54105: IN
54106: PUSH
54107: LD_VAR 0 1
54111: PUSH
54112: LD_EXP 54
54116: IN
54117: OR
54118: IFFALSE 54124
// exit ;
54120: POP
54121: POP
54122: GO 54562
// if not HasTask ( driver ) then
54124: LD_VAR 0 5
54128: PPUSH
54129: CALL_OW 314
54133: NOT
54134: IFFALSE 54439
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
54136: LD_ADDR_EXP 54
54140: PUSH
54141: LD_EXP 54
54145: PPUSH
54146: LD_VAR 0 5
54150: PPUSH
54151: CALL 40555 0 2
54155: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
54156: LD_ADDR_EXP 54
54160: PUSH
54161: LD_EXP 54
54165: PPUSH
54166: LD_VAR 0 1
54170: PPUSH
54171: CALL 40555 0 2
54175: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54176: LD_ADDR_VAR 0 6
54180: PUSH
54181: LD_EXP 53
54185: PUSH
54186: LD_VAR 0 4
54190: ARRAY
54191: PUSH
54192: LD_INT 3
54194: ARRAY
54195: PPUSH
54196: LD_EXP 53
54200: PUSH
54201: LD_VAR 0 4
54205: ARRAY
54206: PUSH
54207: LD_INT 4
54209: ARRAY
54210: PPUSH
54211: CALL_OW 428
54215: ST_TO_ADDR
// if hex then
54216: LD_VAR 0 6
54220: IFFALSE 54238
// ComMoveUnit ( driver , hex ) else
54222: LD_VAR 0 5
54226: PPUSH
54227: LD_VAR 0 6
54231: PPUSH
54232: CALL_OW 112
54236: GO 54322
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54238: LD_VAR 0 1
54242: PPUSH
54243: LD_EXP 53
54247: PUSH
54248: LD_VAR 0 4
54252: ARRAY
54253: PUSH
54254: LD_INT 3
54256: ARRAY
54257: PPUSH
54258: LD_EXP 53
54262: PUSH
54263: LD_VAR 0 4
54267: ARRAY
54268: PUSH
54269: LD_INT 4
54271: ARRAY
54272: PPUSH
54273: CALL_OW 297
54277: PUSH
54278: LD_INT 0
54280: GREATER
54281: IFFALSE 54322
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54283: LD_VAR 0 5
54287: PPUSH
54288: LD_EXP 53
54292: PUSH
54293: LD_VAR 0 4
54297: ARRAY
54298: PUSH
54299: LD_INT 3
54301: ARRAY
54302: PPUSH
54303: LD_EXP 53
54307: PUSH
54308: LD_VAR 0 4
54312: ARRAY
54313: PUSH
54314: LD_INT 4
54316: ARRAY
54317: PPUSH
54318: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54322: LD_VAR 0 5
54326: PPUSH
54327: CALL_OW 181
// if Multiplayer then
54331: LD_OWVAR 4
54335: IFFALSE 54384
// begin repeat wait ( 10 ) ;
54337: LD_INT 10
54339: PPUSH
54340: CALL_OW 67
// until not IsInUnit ( driver ) ;
54344: LD_VAR 0 5
54348: PPUSH
54349: CALL_OW 310
54353: NOT
54354: IFFALSE 54337
// if not HasTask ( driver ) then
54356: LD_VAR 0 5
54360: PPUSH
54361: CALL_OW 314
54365: NOT
54366: IFFALSE 54382
// ComEnterUnit ( driver , factory ) ;
54368: LD_VAR 0 5
54372: PPUSH
54373: LD_VAR 0 2
54377: PPUSH
54378: CALL_OW 120
// end else
54382: GO 54398
// AddComEnterUnit ( driver , factory ) ;
54384: LD_VAR 0 5
54388: PPUSH
54389: LD_VAR 0 2
54393: PPUSH
54394: CALL_OW 180
// wait ( 0 0$1 ) ;
54398: LD_INT 35
54400: PPUSH
54401: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54405: LD_ADDR_EXP 54
54409: PUSH
54410: LD_EXP 54
54414: PUSH
54415: LD_VAR 0 5
54419: DIFF
54420: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54421: LD_ADDR_EXP 54
54425: PUSH
54426: LD_EXP 54
54430: PUSH
54431: LD_VAR 0 1
54435: DIFF
54436: ST_TO_ADDR
// break ;
54437: GO 54560
// end ; end else
54439: GO 54558
// if GetControl ( vehicle ) = control_remote then
54441: LD_VAR 0 1
54445: PPUSH
54446: CALL_OW 263
54450: PUSH
54451: LD_INT 2
54453: EQUAL
54454: IFFALSE 54517
// begin wait ( 0 0$2 ) ;
54456: LD_INT 70
54458: PPUSH
54459: CALL_OW 67
// if Connect ( vehicle ) then
54463: LD_VAR 0 1
54467: PPUSH
54468: CALL 11152 0 1
54472: IFFALSE 54513
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54474: LD_VAR 0 1
54478: PPUSH
54479: LD_EXP 53
54483: PUSH
54484: LD_VAR 0 4
54488: ARRAY
54489: PUSH
54490: LD_INT 3
54492: ARRAY
54493: PPUSH
54494: LD_EXP 53
54498: PUSH
54499: LD_VAR 0 4
54503: ARRAY
54504: PUSH
54505: LD_INT 4
54507: ARRAY
54508: PPUSH
54509: CALL_OW 111
// break ;
54513: GO 54560
// end else
54515: GO 54558
// begin ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54517: LD_VAR 0 1
54521: PPUSH
54522: LD_EXP 53
54526: PUSH
54527: LD_VAR 0 4
54531: ARRAY
54532: PUSH
54533: LD_INT 3
54535: ARRAY
54536: PPUSH
54537: LD_EXP 53
54541: PUSH
54542: LD_VAR 0 4
54546: ARRAY
54547: PUSH
54548: LD_INT 4
54550: ARRAY
54551: PPUSH
54552: CALL_OW 111
// break ;
54556: GO 54560
// end ; end ;
54558: GO 54041
54560: POP
54561: POP
// end ;
54562: LD_VAR 0 3
54566: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54567: LD_INT 0
54569: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54570: LD_VAR 0 1
54574: PUSH
54575: LD_INT 250
54577: EQUAL
54578: PUSH
54579: LD_VAR 0 2
54583: PPUSH
54584: CALL_OW 264
54588: PUSH
54589: LD_INT 81
54591: EQUAL
54592: AND
54593: IFFALSE 54614
// MinerPlaceMine ( unit , x , y ) ;
54595: LD_VAR 0 2
54599: PPUSH
54600: LD_VAR 0 4
54604: PPUSH
54605: LD_VAR 0 5
54609: PPUSH
54610: CALL 57706 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54614: LD_VAR 0 1
54618: PUSH
54619: LD_INT 251
54621: EQUAL
54622: PUSH
54623: LD_VAR 0 2
54627: PPUSH
54628: CALL_OW 264
54632: PUSH
54633: LD_INT 81
54635: EQUAL
54636: AND
54637: IFFALSE 54658
// MinerDetonateMine ( unit , x , y ) ;
54639: LD_VAR 0 2
54643: PPUSH
54644: LD_VAR 0 4
54648: PPUSH
54649: LD_VAR 0 5
54653: PPUSH
54654: CALL 57981 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54658: LD_VAR 0 1
54662: PUSH
54663: LD_INT 252
54665: EQUAL
54666: PUSH
54667: LD_VAR 0 2
54671: PPUSH
54672: CALL_OW 264
54676: PUSH
54677: LD_INT 81
54679: EQUAL
54680: AND
54681: IFFALSE 54702
// MinerCreateMinefield ( unit , x , y ) ;
54683: LD_VAR 0 2
54687: PPUSH
54688: LD_VAR 0 4
54692: PPUSH
54693: LD_VAR 0 5
54697: PPUSH
54698: CALL 58398 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54702: LD_VAR 0 1
54706: PUSH
54707: LD_INT 253
54709: EQUAL
54710: PUSH
54711: LD_VAR 0 2
54715: PPUSH
54716: CALL_OW 257
54720: PUSH
54721: LD_INT 5
54723: EQUAL
54724: AND
54725: IFFALSE 54746
// ComBinocular ( unit , x , y ) ;
54727: LD_VAR 0 2
54731: PPUSH
54732: LD_VAR 0 4
54736: PPUSH
54737: LD_VAR 0 5
54741: PPUSH
54742: CALL 58767 0 3
// if selectedUnit then
54746: LD_VAR 0 3
54750: IFFALSE 54806
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54752: LD_VAR 0 1
54756: PUSH
54757: LD_INT 254
54759: EQUAL
54760: PUSH
54761: LD_VAR 0 2
54765: PPUSH
54766: CALL_OW 264
54770: PUSH
54771: LD_INT 99
54773: EQUAL
54774: AND
54775: PUSH
54776: LD_VAR 0 3
54780: PPUSH
54781: CALL_OW 263
54785: PUSH
54786: LD_INT 3
54788: EQUAL
54789: AND
54790: IFFALSE 54806
// HackDestroyVehicle ( unit , selectedUnit ) ;
54792: LD_VAR 0 2
54796: PPUSH
54797: LD_VAR 0 3
54801: PPUSH
54802: CALL 57070 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54806: LD_VAR 0 1
54810: PUSH
54811: LD_INT 255
54813: EQUAL
54814: PUSH
54815: LD_VAR 0 2
54819: PPUSH
54820: CALL_OW 264
54824: PUSH
54825: LD_INT 14
54827: PUSH
54828: LD_INT 53
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: IN
54835: AND
54836: PUSH
54837: LD_VAR 0 4
54841: PPUSH
54842: LD_VAR 0 5
54846: PPUSH
54847: CALL_OW 488
54851: AND
54852: IFFALSE 54876
// CutTreeXYR ( unit , x , y , 12 ) ;
54854: LD_VAR 0 2
54858: PPUSH
54859: LD_VAR 0 4
54863: PPUSH
54864: LD_VAR 0 5
54868: PPUSH
54869: LD_INT 12
54871: PPUSH
54872: CALL 55067 0 4
// if cmd = 256 then
54876: LD_VAR 0 1
54880: PUSH
54881: LD_INT 256
54883: EQUAL
54884: IFFALSE 54905
// SetFactoryWaypoint ( unit , x , y ) ;
54886: LD_VAR 0 2
54890: PPUSH
54891: LD_VAR 0 4
54895: PPUSH
54896: LD_VAR 0 5
54900: PPUSH
54901: CALL 59370 0 3
// if cmd = 257 then
54905: LD_VAR 0 1
54909: PUSH
54910: LD_INT 257
54912: EQUAL
54913: IFFALSE 54934
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54915: LD_VAR 0 2
54919: PPUSH
54920: LD_VAR 0 4
54924: PPUSH
54925: LD_VAR 0 5
54929: PPUSH
54930: CALL 59860 0 3
// if cmd = 258 then
54934: LD_VAR 0 1
54938: PUSH
54939: LD_INT 258
54941: EQUAL
54942: IFFALSE 54966
// BurnTreeXYR ( unit , x , y , 8 ) ;
54944: LD_VAR 0 2
54948: PPUSH
54949: LD_VAR 0 4
54953: PPUSH
54954: LD_VAR 0 5
54958: PPUSH
54959: LD_INT 8
54961: PPUSH
54962: CALL 55461 0 4
// end ;
54966: LD_VAR 0 6
54970: RET
// export function ComRadiation ( un ) ; var eff ; begin
54971: LD_INT 0
54973: PPUSH
54974: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54975: LD_VAR 0 1
54979: PPUSH
54980: CALL_OW 264
54984: PUSH
54985: LD_INT 91
54987: NONEQUAL
54988: IFFALSE 54992
// exit ;
54990: GO 55062
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54992: LD_INT 68
54994: PPUSH
54995: LD_VAR 0 1
54999: PPUSH
55000: CALL_OW 255
55004: PPUSH
55005: CALL_OW 321
55009: PUSH
55010: LD_INT 2
55012: EQUAL
55013: IFFALSE 55025
// eff := 50 else
55015: LD_ADDR_VAR 0 3
55019: PUSH
55020: LD_INT 50
55022: ST_TO_ADDR
55023: GO 55033
// eff := 25 ;
55025: LD_ADDR_VAR 0 3
55029: PUSH
55030: LD_INT 25
55032: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55033: LD_VAR 0 1
55037: PPUSH
55038: CALL_OW 250
55042: PPUSH
55043: LD_VAR 0 1
55047: PPUSH
55048: CALL_OW 251
55052: PPUSH
55053: LD_VAR 0 3
55057: PPUSH
55058: CALL_OW 495
// end ;
55062: LD_VAR 0 2
55066: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55067: LD_INT 0
55069: PPUSH
55070: PPUSH
55071: PPUSH
55072: PPUSH
55073: PPUSH
55074: PPUSH
55075: PPUSH
55076: PPUSH
55077: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
55078: LD_VAR 0 1
55082: PPUSH
55083: CALL_OW 302
55087: NOT
55088: PUSH
55089: LD_VAR 0 2
55093: PPUSH
55094: LD_VAR 0 3
55098: PPUSH
55099: CALL_OW 488
55103: NOT
55104: OR
55105: PUSH
55106: LD_VAR 0 4
55110: NOT
55111: OR
55112: IFFALSE 55116
// exit ;
55114: GO 55456
// list := [ ] ;
55116: LD_ADDR_VAR 0 13
55120: PUSH
55121: EMPTY
55122: ST_TO_ADDR
// if x - r < 0 then
55123: LD_VAR 0 2
55127: PUSH
55128: LD_VAR 0 4
55132: MINUS
55133: PUSH
55134: LD_INT 0
55136: LESS
55137: IFFALSE 55149
// min_x := 0 else
55139: LD_ADDR_VAR 0 7
55143: PUSH
55144: LD_INT 0
55146: ST_TO_ADDR
55147: GO 55165
// min_x := x - r ;
55149: LD_ADDR_VAR 0 7
55153: PUSH
55154: LD_VAR 0 2
55158: PUSH
55159: LD_VAR 0 4
55163: MINUS
55164: ST_TO_ADDR
// if y - r < 0 then
55165: LD_VAR 0 3
55169: PUSH
55170: LD_VAR 0 4
55174: MINUS
55175: PUSH
55176: LD_INT 0
55178: LESS
55179: IFFALSE 55191
// min_y := 0 else
55181: LD_ADDR_VAR 0 8
55185: PUSH
55186: LD_INT 0
55188: ST_TO_ADDR
55189: GO 55207
// min_y := y - r ;
55191: LD_ADDR_VAR 0 8
55195: PUSH
55196: LD_VAR 0 3
55200: PUSH
55201: LD_VAR 0 4
55205: MINUS
55206: ST_TO_ADDR
// max_x := x + r ;
55207: LD_ADDR_VAR 0 9
55211: PUSH
55212: LD_VAR 0 2
55216: PUSH
55217: LD_VAR 0 4
55221: PLUS
55222: ST_TO_ADDR
// max_y := y + r ;
55223: LD_ADDR_VAR 0 10
55227: PUSH
55228: LD_VAR 0 3
55232: PUSH
55233: LD_VAR 0 4
55237: PLUS
55238: ST_TO_ADDR
// for _x = min_x to max_x do
55239: LD_ADDR_VAR 0 11
55243: PUSH
55244: DOUBLE
55245: LD_VAR 0 7
55249: DEC
55250: ST_TO_ADDR
55251: LD_VAR 0 9
55255: PUSH
55256: FOR_TO
55257: IFFALSE 55374
// for _y = min_y to max_y do
55259: LD_ADDR_VAR 0 12
55263: PUSH
55264: DOUBLE
55265: LD_VAR 0 8
55269: DEC
55270: ST_TO_ADDR
55271: LD_VAR 0 10
55275: PUSH
55276: FOR_TO
55277: IFFALSE 55370
// begin if not ValidHex ( _x , _y ) then
55279: LD_VAR 0 11
55283: PPUSH
55284: LD_VAR 0 12
55288: PPUSH
55289: CALL_OW 488
55293: NOT
55294: IFFALSE 55298
// continue ;
55296: GO 55276
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55298: LD_VAR 0 11
55302: PPUSH
55303: LD_VAR 0 12
55307: PPUSH
55308: CALL_OW 351
55312: PUSH
55313: LD_VAR 0 11
55317: PPUSH
55318: LD_VAR 0 12
55322: PPUSH
55323: CALL_OW 554
55327: AND
55328: IFFALSE 55368
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55330: LD_ADDR_VAR 0 13
55334: PUSH
55335: LD_VAR 0 13
55339: PPUSH
55340: LD_VAR 0 13
55344: PUSH
55345: LD_INT 1
55347: PLUS
55348: PPUSH
55349: LD_VAR 0 11
55353: PUSH
55354: LD_VAR 0 12
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PPUSH
55363: CALL_OW 2
55367: ST_TO_ADDR
// end ;
55368: GO 55276
55370: POP
55371: POP
55372: GO 55256
55374: POP
55375: POP
// if not list then
55376: LD_VAR 0 13
55380: NOT
55381: IFFALSE 55385
// exit ;
55383: GO 55456
// for i in list do
55385: LD_ADDR_VAR 0 6
55389: PUSH
55390: LD_VAR 0 13
55394: PUSH
55395: FOR_IN
55396: IFFALSE 55454
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55398: LD_VAR 0 1
55402: PPUSH
55403: LD_STRING M
55405: PUSH
55406: LD_VAR 0 6
55410: PUSH
55411: LD_INT 1
55413: ARRAY
55414: PUSH
55415: LD_VAR 0 6
55419: PUSH
55420: LD_INT 2
55422: ARRAY
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: PUSH
55445: EMPTY
55446: LIST
55447: PPUSH
55448: CALL_OW 447
55452: GO 55395
55454: POP
55455: POP
// end ;
55456: LD_VAR 0 5
55460: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55461: LD_INT 0
55463: PPUSH
55464: PPUSH
55465: PPUSH
55466: PPUSH
55467: PPUSH
55468: PPUSH
55469: PPUSH
55470: PPUSH
55471: PPUSH
55472: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55473: LD_VAR 0 1
55477: PPUSH
55478: CALL_OW 302
55482: NOT
55483: PUSH
55484: LD_VAR 0 2
55488: PPUSH
55489: LD_VAR 0 3
55493: PPUSH
55494: CALL_OW 488
55498: NOT
55499: OR
55500: PUSH
55501: LD_VAR 0 4
55505: NOT
55506: OR
55507: IFFALSE 55511
// exit ;
55509: GO 56024
// list := [ ] ;
55511: LD_ADDR_VAR 0 13
55515: PUSH
55516: EMPTY
55517: ST_TO_ADDR
// if x - r < 0 then
55518: LD_VAR 0 2
55522: PUSH
55523: LD_VAR 0 4
55527: MINUS
55528: PUSH
55529: LD_INT 0
55531: LESS
55532: IFFALSE 55544
// min_x := 0 else
55534: LD_ADDR_VAR 0 7
55538: PUSH
55539: LD_INT 0
55541: ST_TO_ADDR
55542: GO 55560
// min_x := x - r ;
55544: LD_ADDR_VAR 0 7
55548: PUSH
55549: LD_VAR 0 2
55553: PUSH
55554: LD_VAR 0 4
55558: MINUS
55559: ST_TO_ADDR
// if y - r < 0 then
55560: LD_VAR 0 3
55564: PUSH
55565: LD_VAR 0 4
55569: MINUS
55570: PUSH
55571: LD_INT 0
55573: LESS
55574: IFFALSE 55586
// min_y := 0 else
55576: LD_ADDR_VAR 0 8
55580: PUSH
55581: LD_INT 0
55583: ST_TO_ADDR
55584: GO 55602
// min_y := y - r ;
55586: LD_ADDR_VAR 0 8
55590: PUSH
55591: LD_VAR 0 3
55595: PUSH
55596: LD_VAR 0 4
55600: MINUS
55601: ST_TO_ADDR
// max_x := x + r ;
55602: LD_ADDR_VAR 0 9
55606: PUSH
55607: LD_VAR 0 2
55611: PUSH
55612: LD_VAR 0 4
55616: PLUS
55617: ST_TO_ADDR
// max_y := y + r ;
55618: LD_ADDR_VAR 0 10
55622: PUSH
55623: LD_VAR 0 3
55627: PUSH
55628: LD_VAR 0 4
55632: PLUS
55633: ST_TO_ADDR
// for _x = min_x to max_x do
55634: LD_ADDR_VAR 0 11
55638: PUSH
55639: DOUBLE
55640: LD_VAR 0 7
55644: DEC
55645: ST_TO_ADDR
55646: LD_VAR 0 9
55650: PUSH
55651: FOR_TO
55652: IFFALSE 55769
// for _y = min_y to max_y do
55654: LD_ADDR_VAR 0 12
55658: PUSH
55659: DOUBLE
55660: LD_VAR 0 8
55664: DEC
55665: ST_TO_ADDR
55666: LD_VAR 0 10
55670: PUSH
55671: FOR_TO
55672: IFFALSE 55765
// begin if not ValidHex ( _x , _y ) then
55674: LD_VAR 0 11
55678: PPUSH
55679: LD_VAR 0 12
55683: PPUSH
55684: CALL_OW 488
55688: NOT
55689: IFFALSE 55693
// continue ;
55691: GO 55671
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55693: LD_VAR 0 11
55697: PPUSH
55698: LD_VAR 0 12
55702: PPUSH
55703: CALL_OW 351
55707: PUSH
55708: LD_VAR 0 11
55712: PPUSH
55713: LD_VAR 0 12
55717: PPUSH
55718: CALL_OW 554
55722: AND
55723: IFFALSE 55763
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55725: LD_ADDR_VAR 0 13
55729: PUSH
55730: LD_VAR 0 13
55734: PPUSH
55735: LD_VAR 0 13
55739: PUSH
55740: LD_INT 1
55742: PLUS
55743: PPUSH
55744: LD_VAR 0 11
55748: PUSH
55749: LD_VAR 0 12
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PPUSH
55758: CALL_OW 2
55762: ST_TO_ADDR
// end ;
55763: GO 55671
55765: POP
55766: POP
55767: GO 55651
55769: POP
55770: POP
// if not list then
55771: LD_VAR 0 13
55775: NOT
55776: IFFALSE 55780
// exit ;
55778: GO 56024
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55780: LD_ADDR_VAR 0 13
55784: PUSH
55785: LD_VAR 0 1
55789: PPUSH
55790: LD_VAR 0 13
55794: PPUSH
55795: LD_INT 1
55797: PPUSH
55798: LD_INT 1
55800: PPUSH
55801: CALL 8294 0 4
55805: ST_TO_ADDR
// ComStop ( flame ) ;
55806: LD_VAR 0 1
55810: PPUSH
55811: CALL_OW 141
// for i in list do
55815: LD_ADDR_VAR 0 6
55819: PUSH
55820: LD_VAR 0 13
55824: PUSH
55825: FOR_IN
55826: IFFALSE 55857
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55828: LD_VAR 0 1
55832: PPUSH
55833: LD_VAR 0 6
55837: PUSH
55838: LD_INT 1
55840: ARRAY
55841: PPUSH
55842: LD_VAR 0 6
55846: PUSH
55847: LD_INT 2
55849: ARRAY
55850: PPUSH
55851: CALL_OW 176
55855: GO 55825
55857: POP
55858: POP
// repeat wait ( 0 0$1 ) ;
55859: LD_INT 35
55861: PPUSH
55862: CALL_OW 67
// task := GetTaskList ( flame ) ;
55866: LD_ADDR_VAR 0 14
55870: PUSH
55871: LD_VAR 0 1
55875: PPUSH
55876: CALL_OW 437
55880: ST_TO_ADDR
// if not task then
55881: LD_VAR 0 14
55885: NOT
55886: IFFALSE 55890
// exit ;
55888: GO 56024
// if task [ 1 ] [ 1 ] <> | then
55890: LD_VAR 0 14
55894: PUSH
55895: LD_INT 1
55897: ARRAY
55898: PUSH
55899: LD_INT 1
55901: ARRAY
55902: PUSH
55903: LD_STRING |
55905: NONEQUAL
55906: IFFALSE 55910
// exit ;
55908: GO 56024
// _x := task [ 1 ] [ 2 ] ;
55910: LD_ADDR_VAR 0 11
55914: PUSH
55915: LD_VAR 0 14
55919: PUSH
55920: LD_INT 1
55922: ARRAY
55923: PUSH
55924: LD_INT 2
55926: ARRAY
55927: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55928: LD_ADDR_VAR 0 12
55932: PUSH
55933: LD_VAR 0 14
55937: PUSH
55938: LD_INT 1
55940: ARRAY
55941: PUSH
55942: LD_INT 3
55944: ARRAY
55945: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55946: LD_VAR 0 11
55950: PPUSH
55951: LD_VAR 0 12
55955: PPUSH
55956: CALL_OW 351
55960: NOT
55961: PUSH
55962: LD_VAR 0 11
55966: PPUSH
55967: LD_VAR 0 12
55971: PPUSH
55972: CALL_OW 554
55976: NOT
55977: OR
55978: IFFALSE 56012
// begin task := Delete ( task , 1 ) ;
55980: LD_ADDR_VAR 0 14
55984: PUSH
55985: LD_VAR 0 14
55989: PPUSH
55990: LD_INT 1
55992: PPUSH
55993: CALL_OW 3
55997: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55998: LD_VAR 0 1
56002: PPUSH
56003: LD_VAR 0 14
56007: PPUSH
56008: CALL_OW 446
// end ; until not HasTask ( flame ) ;
56012: LD_VAR 0 1
56016: PPUSH
56017: CALL_OW 314
56021: NOT
56022: IFFALSE 55859
// end ;
56024: LD_VAR 0 5
56028: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56029: LD_EXP 43
56033: NOT
56034: IFFALSE 56084
56036: GO 56038
56038: DISABLE
// begin initHack := true ;
56039: LD_ADDR_EXP 43
56043: PUSH
56044: LD_INT 1
56046: ST_TO_ADDR
// hackTanks := [ ] ;
56047: LD_ADDR_EXP 44
56051: PUSH
56052: EMPTY
56053: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56054: LD_ADDR_EXP 45
56058: PUSH
56059: EMPTY
56060: ST_TO_ADDR
// hackLimit := 3 ;
56061: LD_ADDR_EXP 46
56065: PUSH
56066: LD_INT 3
56068: ST_TO_ADDR
// hackDist := 12 ;
56069: LD_ADDR_EXP 47
56073: PUSH
56074: LD_INT 12
56076: ST_TO_ADDR
// hackCounter := [ ] ;
56077: LD_ADDR_EXP 48
56081: PUSH
56082: EMPTY
56083: ST_TO_ADDR
// end ;
56084: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56085: LD_EXP 43
56089: PUSH
56090: LD_INT 34
56092: PUSH
56093: LD_INT 99
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PPUSH
56100: CALL_OW 69
56104: AND
56105: IFFALSE 56358
56107: GO 56109
56109: DISABLE
56110: LD_INT 0
56112: PPUSH
56113: PPUSH
// begin enable ;
56114: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56115: LD_ADDR_VAR 0 1
56119: PUSH
56120: LD_INT 34
56122: PUSH
56123: LD_INT 99
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PPUSH
56130: CALL_OW 69
56134: PUSH
56135: FOR_IN
56136: IFFALSE 56356
// begin if not i in hackTanks then
56138: LD_VAR 0 1
56142: PUSH
56143: LD_EXP 44
56147: IN
56148: NOT
56149: IFFALSE 56232
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56151: LD_ADDR_EXP 44
56155: PUSH
56156: LD_EXP 44
56160: PPUSH
56161: LD_EXP 44
56165: PUSH
56166: LD_INT 1
56168: PLUS
56169: PPUSH
56170: LD_VAR 0 1
56174: PPUSH
56175: CALL_OW 1
56179: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56180: LD_ADDR_EXP 45
56184: PUSH
56185: LD_EXP 45
56189: PPUSH
56190: LD_EXP 45
56194: PUSH
56195: LD_INT 1
56197: PLUS
56198: PPUSH
56199: EMPTY
56200: PPUSH
56201: CALL_OW 1
56205: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56206: LD_ADDR_EXP 48
56210: PUSH
56211: LD_EXP 48
56215: PPUSH
56216: LD_EXP 48
56220: PUSH
56221: LD_INT 1
56223: PLUS
56224: PPUSH
56225: EMPTY
56226: PPUSH
56227: CALL_OW 1
56231: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56232: LD_VAR 0 1
56236: PPUSH
56237: CALL_OW 302
56241: NOT
56242: IFFALSE 56255
// begin HackUnlinkAll ( i ) ;
56244: LD_VAR 0 1
56248: PPUSH
56249: CALL 56361 0 1
// continue ;
56253: GO 56135
// end ; HackCheckCapturedStatus ( i ) ;
56255: LD_VAR 0 1
56259: PPUSH
56260: CALL 56804 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56264: LD_ADDR_VAR 0 2
56268: PUSH
56269: LD_INT 81
56271: PUSH
56272: LD_VAR 0 1
56276: PPUSH
56277: CALL_OW 255
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 33
56288: PUSH
56289: LD_INT 3
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 91
56298: PUSH
56299: LD_VAR 0 1
56303: PUSH
56304: LD_EXP 47
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 50
56316: PUSH
56317: EMPTY
56318: LIST
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: PPUSH
56326: CALL_OW 69
56330: ST_TO_ADDR
// if not tmp then
56331: LD_VAR 0 2
56335: NOT
56336: IFFALSE 56340
// continue ;
56338: GO 56135
// HackLink ( i , tmp ) ;
56340: LD_VAR 0 1
56344: PPUSH
56345: LD_VAR 0 2
56349: PPUSH
56350: CALL 56497 0 2
// end ;
56354: GO 56135
56356: POP
56357: POP
// end ;
56358: PPOPN 2
56360: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56361: LD_INT 0
56363: PPUSH
56364: PPUSH
56365: PPUSH
// if not hack in hackTanks then
56366: LD_VAR 0 1
56370: PUSH
56371: LD_EXP 44
56375: IN
56376: NOT
56377: IFFALSE 56381
// exit ;
56379: GO 56492
// index := GetElementIndex ( hackTanks , hack ) ;
56381: LD_ADDR_VAR 0 4
56385: PUSH
56386: LD_EXP 44
56390: PPUSH
56391: LD_VAR 0 1
56395: PPUSH
56396: CALL 7591 0 2
56400: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56401: LD_EXP 45
56405: PUSH
56406: LD_VAR 0 4
56410: ARRAY
56411: IFFALSE 56492
// begin for i in hackTanksCaptured [ index ] do
56413: LD_ADDR_VAR 0 3
56417: PUSH
56418: LD_EXP 45
56422: PUSH
56423: LD_VAR 0 4
56427: ARRAY
56428: PUSH
56429: FOR_IN
56430: IFFALSE 56456
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56432: LD_VAR 0 3
56436: PUSH
56437: LD_INT 1
56439: ARRAY
56440: PPUSH
56441: LD_VAR 0 3
56445: PUSH
56446: LD_INT 2
56448: ARRAY
56449: PPUSH
56450: CALL_OW 235
56454: GO 56429
56456: POP
56457: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56458: LD_ADDR_EXP 45
56462: PUSH
56463: LD_EXP 45
56467: PPUSH
56468: LD_VAR 0 4
56472: PPUSH
56473: EMPTY
56474: PPUSH
56475: CALL_OW 1
56479: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56480: LD_VAR 0 1
56484: PPUSH
56485: LD_INT 0
56487: PPUSH
56488: CALL_OW 505
// end ; end ;
56492: LD_VAR 0 2
56496: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56497: LD_INT 0
56499: PPUSH
56500: PPUSH
56501: PPUSH
// if not hack in hackTanks or not vehicles then
56502: LD_VAR 0 1
56506: PUSH
56507: LD_EXP 44
56511: IN
56512: NOT
56513: PUSH
56514: LD_VAR 0 2
56518: NOT
56519: OR
56520: IFFALSE 56524
// exit ;
56522: GO 56799
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56524: LD_ADDR_VAR 0 2
56528: PUSH
56529: LD_VAR 0 1
56533: PPUSH
56534: LD_VAR 0 2
56538: PPUSH
56539: LD_INT 1
56541: PPUSH
56542: LD_INT 1
56544: PPUSH
56545: CALL 8241 0 4
56549: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56550: LD_ADDR_VAR 0 5
56554: PUSH
56555: LD_EXP 44
56559: PPUSH
56560: LD_VAR 0 1
56564: PPUSH
56565: CALL 7591 0 2
56569: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56570: LD_EXP 45
56574: PUSH
56575: LD_VAR 0 5
56579: ARRAY
56580: PUSH
56581: LD_EXP 46
56585: LESS
56586: IFFALSE 56775
// begin for i := 1 to vehicles do
56588: LD_ADDR_VAR 0 4
56592: PUSH
56593: DOUBLE
56594: LD_INT 1
56596: DEC
56597: ST_TO_ADDR
56598: LD_VAR 0 2
56602: PUSH
56603: FOR_TO
56604: IFFALSE 56773
// begin if hackTanksCaptured [ index ] = hackLimit then
56606: LD_EXP 45
56610: PUSH
56611: LD_VAR 0 5
56615: ARRAY
56616: PUSH
56617: LD_EXP 46
56621: EQUAL
56622: IFFALSE 56626
// break ;
56624: GO 56773
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56626: LD_ADDR_EXP 48
56630: PUSH
56631: LD_EXP 48
56635: PPUSH
56636: LD_VAR 0 5
56640: PPUSH
56641: LD_EXP 48
56645: PUSH
56646: LD_VAR 0 5
56650: ARRAY
56651: PUSH
56652: LD_INT 1
56654: PLUS
56655: PPUSH
56656: CALL_OW 1
56660: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56661: LD_ADDR_EXP 45
56665: PUSH
56666: LD_EXP 45
56670: PPUSH
56671: LD_VAR 0 5
56675: PUSH
56676: LD_EXP 45
56680: PUSH
56681: LD_VAR 0 5
56685: ARRAY
56686: PUSH
56687: LD_INT 1
56689: PLUS
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PPUSH
56695: LD_VAR 0 2
56699: PUSH
56700: LD_VAR 0 4
56704: ARRAY
56705: PUSH
56706: LD_VAR 0 2
56710: PUSH
56711: LD_VAR 0 4
56715: ARRAY
56716: PPUSH
56717: CALL_OW 255
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PPUSH
56726: CALL 7806 0 3
56730: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56731: LD_VAR 0 2
56735: PUSH
56736: LD_VAR 0 4
56740: ARRAY
56741: PPUSH
56742: LD_VAR 0 1
56746: PPUSH
56747: CALL_OW 255
56751: PPUSH
56752: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56756: LD_VAR 0 2
56760: PUSH
56761: LD_VAR 0 4
56765: ARRAY
56766: PPUSH
56767: CALL_OW 141
// end ;
56771: GO 56603
56773: POP
56774: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56775: LD_VAR 0 1
56779: PPUSH
56780: LD_EXP 45
56784: PUSH
56785: LD_VAR 0 5
56789: ARRAY
56790: PUSH
56791: LD_INT 0
56793: PLUS
56794: PPUSH
56795: CALL_OW 505
// end ;
56799: LD_VAR 0 3
56803: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56804: LD_INT 0
56806: PPUSH
56807: PPUSH
56808: PPUSH
56809: PPUSH
// if not hack in hackTanks then
56810: LD_VAR 0 1
56814: PUSH
56815: LD_EXP 44
56819: IN
56820: NOT
56821: IFFALSE 56825
// exit ;
56823: GO 57065
// index := GetElementIndex ( hackTanks , hack ) ;
56825: LD_ADDR_VAR 0 4
56829: PUSH
56830: LD_EXP 44
56834: PPUSH
56835: LD_VAR 0 1
56839: PPUSH
56840: CALL 7591 0 2
56844: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56845: LD_ADDR_VAR 0 3
56849: PUSH
56850: DOUBLE
56851: LD_EXP 45
56855: PUSH
56856: LD_VAR 0 4
56860: ARRAY
56861: INC
56862: ST_TO_ADDR
56863: LD_INT 1
56865: PUSH
56866: FOR_DOWNTO
56867: IFFALSE 57039
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56869: LD_ADDR_VAR 0 5
56873: PUSH
56874: LD_EXP 45
56878: PUSH
56879: LD_VAR 0 4
56883: ARRAY
56884: PUSH
56885: LD_VAR 0 3
56889: ARRAY
56890: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56891: LD_VAR 0 5
56895: PUSH
56896: LD_INT 1
56898: ARRAY
56899: PPUSH
56900: CALL_OW 302
56904: NOT
56905: PUSH
56906: LD_VAR 0 5
56910: PUSH
56911: LD_INT 1
56913: ARRAY
56914: PPUSH
56915: CALL_OW 255
56919: PUSH
56920: LD_VAR 0 1
56924: PPUSH
56925: CALL_OW 255
56929: NONEQUAL
56930: OR
56931: IFFALSE 57037
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56933: LD_VAR 0 5
56937: PUSH
56938: LD_INT 1
56940: ARRAY
56941: PPUSH
56942: CALL_OW 305
56946: PUSH
56947: LD_VAR 0 5
56951: PUSH
56952: LD_INT 1
56954: ARRAY
56955: PPUSH
56956: CALL_OW 255
56960: PUSH
56961: LD_VAR 0 1
56965: PPUSH
56966: CALL_OW 255
56970: EQUAL
56971: AND
56972: IFFALSE 56996
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56974: LD_VAR 0 5
56978: PUSH
56979: LD_INT 1
56981: ARRAY
56982: PPUSH
56983: LD_VAR 0 5
56987: PUSH
56988: LD_INT 2
56990: ARRAY
56991: PPUSH
56992: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56996: LD_ADDR_EXP 45
57000: PUSH
57001: LD_EXP 45
57005: PPUSH
57006: LD_VAR 0 4
57010: PPUSH
57011: LD_EXP 45
57015: PUSH
57016: LD_VAR 0 4
57020: ARRAY
57021: PPUSH
57022: LD_VAR 0 3
57026: PPUSH
57027: CALL_OW 3
57031: PPUSH
57032: CALL_OW 1
57036: ST_TO_ADDR
// end ; end ;
57037: GO 56866
57039: POP
57040: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57041: LD_VAR 0 1
57045: PPUSH
57046: LD_EXP 45
57050: PUSH
57051: LD_VAR 0 4
57055: ARRAY
57056: PUSH
57057: LD_INT 0
57059: PLUS
57060: PPUSH
57061: CALL_OW 505
// end ;
57065: LD_VAR 0 2
57069: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57070: LD_INT 0
57072: PPUSH
57073: PPUSH
57074: PPUSH
57075: PPUSH
// if not hack in hackTanks then
57076: LD_VAR 0 1
57080: PUSH
57081: LD_EXP 44
57085: IN
57086: NOT
57087: IFFALSE 57091
// exit ;
57089: GO 57176
// index := GetElementIndex ( hackTanks , hack ) ;
57091: LD_ADDR_VAR 0 5
57095: PUSH
57096: LD_EXP 44
57100: PPUSH
57101: LD_VAR 0 1
57105: PPUSH
57106: CALL 7591 0 2
57110: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57111: LD_ADDR_VAR 0 4
57115: PUSH
57116: DOUBLE
57117: LD_INT 1
57119: DEC
57120: ST_TO_ADDR
57121: LD_EXP 45
57125: PUSH
57126: LD_VAR 0 5
57130: ARRAY
57131: PUSH
57132: FOR_TO
57133: IFFALSE 57174
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57135: LD_EXP 45
57139: PUSH
57140: LD_VAR 0 5
57144: ARRAY
57145: PUSH
57146: LD_VAR 0 4
57150: ARRAY
57151: PUSH
57152: LD_INT 1
57154: ARRAY
57155: PUSH
57156: LD_VAR 0 2
57160: EQUAL
57161: IFFALSE 57172
// KillUnit ( vehicle ) ;
57163: LD_VAR 0 2
57167: PPUSH
57168: CALL_OW 66
57172: GO 57132
57174: POP
57175: POP
// end ;
57176: LD_VAR 0 3
57180: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57181: LD_EXP 49
57185: NOT
57186: IFFALSE 57221
57188: GO 57190
57190: DISABLE
// begin initMiner := true ;
57191: LD_ADDR_EXP 49
57195: PUSH
57196: LD_INT 1
57198: ST_TO_ADDR
// minersList := [ ] ;
57199: LD_ADDR_EXP 50
57203: PUSH
57204: EMPTY
57205: ST_TO_ADDR
// minerMinesList := [ ] ;
57206: LD_ADDR_EXP 51
57210: PUSH
57211: EMPTY
57212: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57213: LD_ADDR_EXP 52
57217: PUSH
57218: LD_INT 5
57220: ST_TO_ADDR
// end ;
57221: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57222: LD_EXP 49
57226: PUSH
57227: LD_INT 34
57229: PUSH
57230: LD_INT 81
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PPUSH
57237: CALL_OW 69
57241: AND
57242: IFFALSE 57703
57244: GO 57246
57246: DISABLE
57247: LD_INT 0
57249: PPUSH
57250: PPUSH
57251: PPUSH
57252: PPUSH
// begin enable ;
57253: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57254: LD_ADDR_VAR 0 1
57258: PUSH
57259: LD_INT 34
57261: PUSH
57262: LD_INT 81
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PPUSH
57269: CALL_OW 69
57273: PUSH
57274: FOR_IN
57275: IFFALSE 57347
// begin if not i in minersList then
57277: LD_VAR 0 1
57281: PUSH
57282: LD_EXP 50
57286: IN
57287: NOT
57288: IFFALSE 57345
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57290: LD_ADDR_EXP 50
57294: PUSH
57295: LD_EXP 50
57299: PPUSH
57300: LD_EXP 50
57304: PUSH
57305: LD_INT 1
57307: PLUS
57308: PPUSH
57309: LD_VAR 0 1
57313: PPUSH
57314: CALL_OW 1
57318: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57319: LD_ADDR_EXP 51
57323: PUSH
57324: LD_EXP 51
57328: PPUSH
57329: LD_EXP 51
57333: PUSH
57334: LD_INT 1
57336: PLUS
57337: PPUSH
57338: EMPTY
57339: PPUSH
57340: CALL_OW 1
57344: ST_TO_ADDR
// end end ;
57345: GO 57274
57347: POP
57348: POP
// for i := minerMinesList downto 1 do
57349: LD_ADDR_VAR 0 1
57353: PUSH
57354: DOUBLE
57355: LD_EXP 51
57359: INC
57360: ST_TO_ADDR
57361: LD_INT 1
57363: PUSH
57364: FOR_DOWNTO
57365: IFFALSE 57701
// begin if IsLive ( minersList [ i ] ) then
57367: LD_EXP 50
57371: PUSH
57372: LD_VAR 0 1
57376: ARRAY
57377: PPUSH
57378: CALL_OW 300
57382: IFFALSE 57410
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57384: LD_EXP 50
57388: PUSH
57389: LD_VAR 0 1
57393: ARRAY
57394: PPUSH
57395: LD_EXP 51
57399: PUSH
57400: LD_VAR 0 1
57404: ARRAY
57405: PPUSH
57406: CALL_OW 505
// if not minerMinesList [ i ] then
57410: LD_EXP 51
57414: PUSH
57415: LD_VAR 0 1
57419: ARRAY
57420: NOT
57421: IFFALSE 57425
// continue ;
57423: GO 57364
// for j := minerMinesList [ i ] downto 1 do
57425: LD_ADDR_VAR 0 2
57429: PUSH
57430: DOUBLE
57431: LD_EXP 51
57435: PUSH
57436: LD_VAR 0 1
57440: ARRAY
57441: INC
57442: ST_TO_ADDR
57443: LD_INT 1
57445: PUSH
57446: FOR_DOWNTO
57447: IFFALSE 57697
// begin side := GetSide ( minersList [ i ] ) ;
57449: LD_ADDR_VAR 0 3
57453: PUSH
57454: LD_EXP 50
57458: PUSH
57459: LD_VAR 0 1
57463: ARRAY
57464: PPUSH
57465: CALL_OW 255
57469: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57470: LD_ADDR_VAR 0 4
57474: PUSH
57475: LD_EXP 51
57479: PUSH
57480: LD_VAR 0 1
57484: ARRAY
57485: PUSH
57486: LD_VAR 0 2
57490: ARRAY
57491: PUSH
57492: LD_INT 1
57494: ARRAY
57495: PPUSH
57496: LD_EXP 51
57500: PUSH
57501: LD_VAR 0 1
57505: ARRAY
57506: PUSH
57507: LD_VAR 0 2
57511: ARRAY
57512: PUSH
57513: LD_INT 2
57515: ARRAY
57516: PPUSH
57517: CALL_OW 428
57521: ST_TO_ADDR
// if not tmp then
57522: LD_VAR 0 4
57526: NOT
57527: IFFALSE 57531
// continue ;
57529: GO 57446
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57531: LD_VAR 0 4
57535: PUSH
57536: LD_INT 81
57538: PUSH
57539: LD_VAR 0 3
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PPUSH
57548: CALL_OW 69
57552: IN
57553: PUSH
57554: LD_EXP 51
57558: PUSH
57559: LD_VAR 0 1
57563: ARRAY
57564: PUSH
57565: LD_VAR 0 2
57569: ARRAY
57570: PUSH
57571: LD_INT 1
57573: ARRAY
57574: PPUSH
57575: LD_EXP 51
57579: PUSH
57580: LD_VAR 0 1
57584: ARRAY
57585: PUSH
57586: LD_VAR 0 2
57590: ARRAY
57591: PUSH
57592: LD_INT 2
57594: ARRAY
57595: PPUSH
57596: CALL_OW 458
57600: AND
57601: IFFALSE 57695
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57603: LD_EXP 51
57607: PUSH
57608: LD_VAR 0 1
57612: ARRAY
57613: PUSH
57614: LD_VAR 0 2
57618: ARRAY
57619: PUSH
57620: LD_INT 1
57622: ARRAY
57623: PPUSH
57624: LD_EXP 51
57628: PUSH
57629: LD_VAR 0 1
57633: ARRAY
57634: PUSH
57635: LD_VAR 0 2
57639: ARRAY
57640: PUSH
57641: LD_INT 2
57643: ARRAY
57644: PPUSH
57645: LD_VAR 0 3
57649: PPUSH
57650: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57654: LD_ADDR_EXP 51
57658: PUSH
57659: LD_EXP 51
57663: PPUSH
57664: LD_VAR 0 1
57668: PPUSH
57669: LD_EXP 51
57673: PUSH
57674: LD_VAR 0 1
57678: ARRAY
57679: PPUSH
57680: LD_VAR 0 2
57684: PPUSH
57685: CALL_OW 3
57689: PPUSH
57690: CALL_OW 1
57694: ST_TO_ADDR
// end ; end ;
57695: GO 57446
57697: POP
57698: POP
// end ;
57699: GO 57364
57701: POP
57702: POP
// end ;
57703: PPOPN 4
57705: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57706: LD_INT 0
57708: PPUSH
57709: PPUSH
// result := false ;
57710: LD_ADDR_VAR 0 4
57714: PUSH
57715: LD_INT 0
57717: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57718: LD_VAR 0 1
57722: PPUSH
57723: CALL_OW 264
57727: PUSH
57728: LD_INT 81
57730: EQUAL
57731: NOT
57732: IFFALSE 57736
// exit ;
57734: GO 57976
// index := GetElementIndex ( minersList , unit ) ;
57736: LD_ADDR_VAR 0 5
57740: PUSH
57741: LD_EXP 50
57745: PPUSH
57746: LD_VAR 0 1
57750: PPUSH
57751: CALL 7591 0 2
57755: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57756: LD_EXP 51
57760: PUSH
57761: LD_VAR 0 5
57765: ARRAY
57766: PUSH
57767: LD_EXP 52
57771: GREATEREQUAL
57772: IFFALSE 57776
// exit ;
57774: GO 57976
// ComMoveXY ( unit , x , y ) ;
57776: LD_VAR 0 1
57780: PPUSH
57781: LD_VAR 0 2
57785: PPUSH
57786: LD_VAR 0 3
57790: PPUSH
57791: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57795: LD_INT 35
57797: PPUSH
57798: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57802: LD_VAR 0 1
57806: PPUSH
57807: LD_VAR 0 2
57811: PPUSH
57812: LD_VAR 0 3
57816: PPUSH
57817: CALL 39352 0 3
57821: NOT
57822: PUSH
57823: LD_VAR 0 1
57827: PPUSH
57828: CALL_OW 314
57832: AND
57833: IFFALSE 57837
// exit ;
57835: GO 57976
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57837: LD_VAR 0 2
57841: PPUSH
57842: LD_VAR 0 3
57846: PPUSH
57847: CALL_OW 428
57851: PUSH
57852: LD_VAR 0 1
57856: EQUAL
57857: PUSH
57858: LD_VAR 0 1
57862: PPUSH
57863: CALL_OW 314
57867: NOT
57868: AND
57869: IFFALSE 57795
// PlaySoundXY ( x , y , PlantMine ) ;
57871: LD_VAR 0 2
57875: PPUSH
57876: LD_VAR 0 3
57880: PPUSH
57881: LD_STRING PlantMine
57883: PPUSH
57884: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57888: LD_VAR 0 2
57892: PPUSH
57893: LD_VAR 0 3
57897: PPUSH
57898: LD_VAR 0 1
57902: PPUSH
57903: CALL_OW 255
57907: PPUSH
57908: LD_INT 0
57910: PPUSH
57911: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57915: LD_ADDR_EXP 51
57919: PUSH
57920: LD_EXP 51
57924: PPUSH
57925: LD_VAR 0 5
57929: PUSH
57930: LD_EXP 51
57934: PUSH
57935: LD_VAR 0 5
57939: ARRAY
57940: PUSH
57941: LD_INT 1
57943: PLUS
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PPUSH
57949: LD_VAR 0 2
57953: PUSH
57954: LD_VAR 0 3
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PPUSH
57963: CALL 7806 0 3
57967: ST_TO_ADDR
// result := true ;
57968: LD_ADDR_VAR 0 4
57972: PUSH
57973: LD_INT 1
57975: ST_TO_ADDR
// end ;
57976: LD_VAR 0 4
57980: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57981: LD_INT 0
57983: PPUSH
57984: PPUSH
57985: PPUSH
// if not unit in minersList then
57986: LD_VAR 0 1
57990: PUSH
57991: LD_EXP 50
57995: IN
57996: NOT
57997: IFFALSE 58001
// exit ;
57999: GO 58393
// index := GetElementIndex ( minersList , unit ) ;
58001: LD_ADDR_VAR 0 6
58005: PUSH
58006: LD_EXP 50
58010: PPUSH
58011: LD_VAR 0 1
58015: PPUSH
58016: CALL 7591 0 2
58020: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58021: LD_ADDR_VAR 0 5
58025: PUSH
58026: DOUBLE
58027: LD_EXP 51
58031: PUSH
58032: LD_VAR 0 6
58036: ARRAY
58037: INC
58038: ST_TO_ADDR
58039: LD_INT 1
58041: PUSH
58042: FOR_DOWNTO
58043: IFFALSE 58204
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
58045: LD_EXP 51
58049: PUSH
58050: LD_VAR 0 6
58054: ARRAY
58055: PUSH
58056: LD_VAR 0 5
58060: ARRAY
58061: PUSH
58062: LD_INT 1
58064: ARRAY
58065: PUSH
58066: LD_VAR 0 2
58070: EQUAL
58071: PUSH
58072: LD_EXP 51
58076: PUSH
58077: LD_VAR 0 6
58081: ARRAY
58082: PUSH
58083: LD_VAR 0 5
58087: ARRAY
58088: PUSH
58089: LD_INT 2
58091: ARRAY
58092: PUSH
58093: LD_VAR 0 3
58097: EQUAL
58098: AND
58099: IFFALSE 58202
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58101: LD_EXP 51
58105: PUSH
58106: LD_VAR 0 6
58110: ARRAY
58111: PUSH
58112: LD_VAR 0 5
58116: ARRAY
58117: PUSH
58118: LD_INT 1
58120: ARRAY
58121: PPUSH
58122: LD_EXP 51
58126: PUSH
58127: LD_VAR 0 6
58131: ARRAY
58132: PUSH
58133: LD_VAR 0 5
58137: ARRAY
58138: PUSH
58139: LD_INT 2
58141: ARRAY
58142: PPUSH
58143: LD_VAR 0 1
58147: PPUSH
58148: CALL_OW 255
58152: PPUSH
58153: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58157: LD_ADDR_EXP 51
58161: PUSH
58162: LD_EXP 51
58166: PPUSH
58167: LD_VAR 0 6
58171: PPUSH
58172: LD_EXP 51
58176: PUSH
58177: LD_VAR 0 6
58181: ARRAY
58182: PPUSH
58183: LD_VAR 0 5
58187: PPUSH
58188: CALL_OW 3
58192: PPUSH
58193: CALL_OW 1
58197: ST_TO_ADDR
// exit ;
58198: POP
58199: POP
58200: GO 58393
// end ; end ;
58202: GO 58042
58204: POP
58205: POP
// for i := minerMinesList [ index ] downto 1 do
58206: LD_ADDR_VAR 0 5
58210: PUSH
58211: DOUBLE
58212: LD_EXP 51
58216: PUSH
58217: LD_VAR 0 6
58221: ARRAY
58222: INC
58223: ST_TO_ADDR
58224: LD_INT 1
58226: PUSH
58227: FOR_DOWNTO
58228: IFFALSE 58391
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58230: LD_EXP 51
58234: PUSH
58235: LD_VAR 0 6
58239: ARRAY
58240: PUSH
58241: LD_VAR 0 5
58245: ARRAY
58246: PUSH
58247: LD_INT 1
58249: ARRAY
58250: PPUSH
58251: LD_EXP 51
58255: PUSH
58256: LD_VAR 0 6
58260: ARRAY
58261: PUSH
58262: LD_VAR 0 5
58266: ARRAY
58267: PUSH
58268: LD_INT 2
58270: ARRAY
58271: PPUSH
58272: LD_VAR 0 2
58276: PPUSH
58277: LD_VAR 0 3
58281: PPUSH
58282: CALL_OW 298
58286: PUSH
58287: LD_INT 6
58289: LESS
58290: IFFALSE 58389
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58292: LD_EXP 51
58296: PUSH
58297: LD_VAR 0 6
58301: ARRAY
58302: PUSH
58303: LD_VAR 0 5
58307: ARRAY
58308: PUSH
58309: LD_INT 1
58311: ARRAY
58312: PPUSH
58313: LD_EXP 51
58317: PUSH
58318: LD_VAR 0 6
58322: ARRAY
58323: PUSH
58324: LD_VAR 0 5
58328: ARRAY
58329: PUSH
58330: LD_INT 2
58332: ARRAY
58333: PPUSH
58334: LD_VAR 0 1
58338: PPUSH
58339: CALL_OW 255
58343: PPUSH
58344: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58348: LD_ADDR_EXP 51
58352: PUSH
58353: LD_EXP 51
58357: PPUSH
58358: LD_VAR 0 6
58362: PPUSH
58363: LD_EXP 51
58367: PUSH
58368: LD_VAR 0 6
58372: ARRAY
58373: PPUSH
58374: LD_VAR 0 5
58378: PPUSH
58379: CALL_OW 3
58383: PPUSH
58384: CALL_OW 1
58388: ST_TO_ADDR
// end ; end ;
58389: GO 58227
58391: POP
58392: POP
// end ;
58393: LD_VAR 0 4
58397: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58398: LD_INT 0
58400: PPUSH
58401: PPUSH
58402: PPUSH
58403: PPUSH
58404: PPUSH
58405: PPUSH
58406: PPUSH
58407: PPUSH
58408: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58409: LD_VAR 0 1
58413: PPUSH
58414: CALL_OW 264
58418: PUSH
58419: LD_INT 81
58421: EQUAL
58422: NOT
58423: PUSH
58424: LD_VAR 0 1
58428: PUSH
58429: LD_EXP 50
58433: IN
58434: NOT
58435: OR
58436: IFFALSE 58440
// exit ;
58438: GO 58762
// index := GetElementIndex ( minersList , unit ) ;
58440: LD_ADDR_VAR 0 6
58444: PUSH
58445: LD_EXP 50
58449: PPUSH
58450: LD_VAR 0 1
58454: PPUSH
58455: CALL 7591 0 2
58459: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58460: LD_ADDR_VAR 0 8
58464: PUSH
58465: LD_EXP 52
58469: PUSH
58470: LD_EXP 51
58474: PUSH
58475: LD_VAR 0 6
58479: ARRAY
58480: MINUS
58481: ST_TO_ADDR
// if not minesFreeAmount then
58482: LD_VAR 0 8
58486: NOT
58487: IFFALSE 58491
// exit ;
58489: GO 58762
// tmp := [ ] ;
58491: LD_ADDR_VAR 0 7
58495: PUSH
58496: EMPTY
58497: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58498: LD_ADDR_VAR 0 5
58502: PUSH
58503: DOUBLE
58504: LD_INT 1
58506: DEC
58507: ST_TO_ADDR
58508: LD_VAR 0 8
58512: PUSH
58513: FOR_TO
58514: IFFALSE 58709
// begin _d := rand ( 0 , 5 ) ;
58516: LD_ADDR_VAR 0 11
58520: PUSH
58521: LD_INT 0
58523: PPUSH
58524: LD_INT 5
58526: PPUSH
58527: CALL_OW 12
58531: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58532: LD_ADDR_VAR 0 12
58536: PUSH
58537: LD_INT 2
58539: PPUSH
58540: LD_INT 6
58542: PPUSH
58543: CALL_OW 12
58547: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58548: LD_ADDR_VAR 0 9
58552: PUSH
58553: LD_VAR 0 2
58557: PPUSH
58558: LD_VAR 0 11
58562: PPUSH
58563: LD_VAR 0 12
58567: PPUSH
58568: CALL_OW 272
58572: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58573: LD_ADDR_VAR 0 10
58577: PUSH
58578: LD_VAR 0 3
58582: PPUSH
58583: LD_VAR 0 11
58587: PPUSH
58588: LD_VAR 0 12
58592: PPUSH
58593: CALL_OW 273
58597: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58598: LD_VAR 0 9
58602: PPUSH
58603: LD_VAR 0 10
58607: PPUSH
58608: CALL_OW 488
58612: PUSH
58613: LD_VAR 0 9
58617: PUSH
58618: LD_VAR 0 10
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_VAR 0 7
58631: IN
58632: NOT
58633: AND
58634: PUSH
58635: LD_VAR 0 9
58639: PPUSH
58640: LD_VAR 0 10
58644: PPUSH
58645: CALL_OW 458
58649: NOT
58650: AND
58651: IFFALSE 58693
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58653: LD_ADDR_VAR 0 7
58657: PUSH
58658: LD_VAR 0 7
58662: PPUSH
58663: LD_VAR 0 7
58667: PUSH
58668: LD_INT 1
58670: PLUS
58671: PPUSH
58672: LD_VAR 0 9
58676: PUSH
58677: LD_VAR 0 10
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PPUSH
58686: CALL_OW 1
58690: ST_TO_ADDR
58691: GO 58707
// i := i - 1 ;
58693: LD_ADDR_VAR 0 5
58697: PUSH
58698: LD_VAR 0 5
58702: PUSH
58703: LD_INT 1
58705: MINUS
58706: ST_TO_ADDR
// end ;
58707: GO 58513
58709: POP
58710: POP
// for i in tmp do
58711: LD_ADDR_VAR 0 5
58715: PUSH
58716: LD_VAR 0 7
58720: PUSH
58721: FOR_IN
58722: IFFALSE 58760
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58724: LD_VAR 0 1
58728: PPUSH
58729: LD_VAR 0 5
58733: PUSH
58734: LD_INT 1
58736: ARRAY
58737: PPUSH
58738: LD_VAR 0 5
58742: PUSH
58743: LD_INT 2
58745: ARRAY
58746: PPUSH
58747: CALL 57706 0 3
58751: NOT
58752: IFFALSE 58758
// exit ;
58754: POP
58755: POP
58756: GO 58762
58758: GO 58721
58760: POP
58761: POP
// end ;
58762: LD_VAR 0 4
58766: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58767: LD_INT 0
58769: PPUSH
58770: PPUSH
58771: PPUSH
58772: PPUSH
58773: PPUSH
58774: PPUSH
58775: PPUSH
58776: PPUSH
58777: PPUSH
// if GetClass ( unit ) <> class_sniper then
58778: LD_VAR 0 1
58782: PPUSH
58783: CALL_OW 257
58787: PUSH
58788: LD_INT 5
58790: NONEQUAL
58791: IFFALSE 58795
// exit ;
58793: GO 59261
// dist := 8 ;
58795: LD_ADDR_VAR 0 5
58799: PUSH
58800: LD_INT 8
58802: ST_TO_ADDR
// viewRange := 12 ;
58803: LD_ADDR_VAR 0 8
58807: PUSH
58808: LD_INT 12
58810: ST_TO_ADDR
// side := GetSide ( unit ) ;
58811: LD_ADDR_VAR 0 6
58815: PUSH
58816: LD_VAR 0 1
58820: PPUSH
58821: CALL_OW 255
58825: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58826: LD_INT 61
58828: PPUSH
58829: LD_VAR 0 6
58833: PPUSH
58834: CALL_OW 321
58838: PUSH
58839: LD_INT 2
58841: EQUAL
58842: IFFALSE 58852
// viewRange := 16 ;
58844: LD_ADDR_VAR 0 8
58848: PUSH
58849: LD_INT 16
58851: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58852: LD_VAR 0 1
58856: PPUSH
58857: LD_VAR 0 2
58861: PPUSH
58862: LD_VAR 0 3
58866: PPUSH
58867: CALL_OW 297
58871: PUSH
58872: LD_VAR 0 5
58876: GREATER
58877: IFFALSE 58956
// begin ComMoveXY ( unit , x , y ) ;
58879: LD_VAR 0 1
58883: PPUSH
58884: LD_VAR 0 2
58888: PPUSH
58889: LD_VAR 0 3
58893: PPUSH
58894: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58898: LD_INT 35
58900: PPUSH
58901: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58905: LD_VAR 0 1
58909: PPUSH
58910: LD_VAR 0 2
58914: PPUSH
58915: LD_VAR 0 3
58919: PPUSH
58920: CALL 39352 0 3
58924: NOT
58925: IFFALSE 58929
// exit ;
58927: GO 59261
// until GetDistUnitXY ( unit , x , y ) < dist ;
58929: LD_VAR 0 1
58933: PPUSH
58934: LD_VAR 0 2
58938: PPUSH
58939: LD_VAR 0 3
58943: PPUSH
58944: CALL_OW 297
58948: PUSH
58949: LD_VAR 0 5
58953: LESS
58954: IFFALSE 58898
// end ; ComTurnXY ( unit , x , y ) ;
58956: LD_VAR 0 1
58960: PPUSH
58961: LD_VAR 0 2
58965: PPUSH
58966: LD_VAR 0 3
58970: PPUSH
58971: CALL_OW 118
// repeat if Multiplayer then
58975: LD_OWVAR 4
58979: IFFALSE 58990
// wait ( 35 ) else
58981: LD_INT 35
58983: PPUSH
58984: CALL_OW 67
58988: GO 58997
// wait ( 5 ) ;
58990: LD_INT 5
58992: PPUSH
58993: CALL_OW 67
// _d := GetDir ( unit ) ;
58997: LD_ADDR_VAR 0 11
59001: PUSH
59002: LD_VAR 0 1
59006: PPUSH
59007: CALL_OW 254
59011: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
59012: LD_ADDR_VAR 0 7
59016: PUSH
59017: LD_VAR 0 1
59021: PPUSH
59022: CALL_OW 250
59026: PPUSH
59027: LD_VAR 0 1
59031: PPUSH
59032: CALL_OW 251
59036: PPUSH
59037: LD_VAR 0 2
59041: PPUSH
59042: LD_VAR 0 3
59046: PPUSH
59047: CALL 41960 0 4
59051: ST_TO_ADDR
// until dir = _d ;
59052: LD_VAR 0 7
59056: PUSH
59057: LD_VAR 0 11
59061: EQUAL
59062: IFFALSE 58975
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
59064: LD_ADDR_VAR 0 9
59068: PUSH
59069: LD_VAR 0 1
59073: PPUSH
59074: CALL_OW 250
59078: PPUSH
59079: LD_VAR 0 7
59083: PPUSH
59084: LD_VAR 0 5
59088: PPUSH
59089: CALL_OW 272
59093: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
59094: LD_ADDR_VAR 0 10
59098: PUSH
59099: LD_VAR 0 1
59103: PPUSH
59104: CALL_OW 251
59108: PPUSH
59109: LD_VAR 0 7
59113: PPUSH
59114: LD_VAR 0 5
59118: PPUSH
59119: CALL_OW 273
59123: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59124: LD_VAR 0 9
59128: PPUSH
59129: LD_VAR 0 10
59133: PPUSH
59134: CALL_OW 488
59138: NOT
59139: IFFALSE 59143
// exit ;
59141: GO 59261
// ComAnimCustom ( unit , 1 ) ;
59143: LD_VAR 0 1
59147: PPUSH
59148: LD_INT 1
59150: PPUSH
59151: CALL_OW 592
// p := 0 ;
59155: LD_ADDR_VAR 0 12
59159: PUSH
59160: LD_INT 0
59162: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59163: LD_VAR 0 9
59167: PPUSH
59168: LD_VAR 0 10
59172: PPUSH
59173: LD_VAR 0 6
59177: PPUSH
59178: LD_VAR 0 8
59182: PPUSH
59183: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59187: LD_INT 35
59189: PPUSH
59190: CALL_OW 67
// p := Inc ( p ) ;
59194: LD_ADDR_VAR 0 12
59198: PUSH
59199: LD_VAR 0 12
59203: PPUSH
59204: CALL 41916 0 1
59208: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59209: LD_VAR 0 12
59213: PUSH
59214: LD_INT 3
59216: EQUAL
59217: PUSH
59218: LD_VAR 0 1
59222: PPUSH
59223: CALL_OW 302
59227: NOT
59228: OR
59229: PUSH
59230: LD_VAR 0 1
59234: PPUSH
59235: CALL_OW 301
59239: OR
59240: IFFALSE 59187
// RemoveSeeing ( _x , _y , side ) ;
59242: LD_VAR 0 9
59246: PPUSH
59247: LD_VAR 0 10
59251: PPUSH
59252: LD_VAR 0 6
59256: PPUSH
59257: CALL_OW 331
// end ; end_of_file
59261: LD_VAR 0 4
59265: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59266: PPOPN 6
59268: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59269: LD_EXP 1
59273: PUSH
59274: LD_INT 4
59276: EQUAL
59277: IFFALSE 59313
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59279: LD_STRING setGameDifficulty(
59281: PUSH
59282: LD_OWVAR 67
59286: STR
59287: PUSH
59288: LD_STRING )
59290: STR
59291: PPUSH
59292: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59296: LD_STRING displayDifficulty(
59298: PUSH
59299: LD_OWVAR 67
59303: STR
59304: PUSH
59305: LD_STRING )
59307: STR
59308: PPUSH
59309: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59313: CALL 59342 0 0
// end ; end_of_file
59317: PPOPN 1
59319: END
// every 0 0$1 do
59320: GO 59322
59322: DISABLE
// begin enable ;
59323: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59324: LD_STRING updateTimer(
59326: PUSH
59327: LD_OWVAR 1
59331: STR
59332: PUSH
59333: LD_STRING );
59335: STR
59336: PPUSH
59337: CALL_OW 559
// end ;
59341: END
// export function SOS_MapStart ( ) ; begin
59342: LD_INT 0
59344: PPUSH
// UpdateFactoryWaypoints ( ) ;
59345: CALL 59718 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59349: CALL 59970 0 0
// ParseMultiDataToLua ( ) ;
59353: CALL 60117 0 0
// end ;
59357: LD_VAR 0 1
59361: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59362: LD_INT 0
59364: PPUSH
// end ;
59365: LD_VAR 0 12
59369: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59370: LD_INT 0
59372: PPUSH
59373: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59374: LD_VAR 0 1
59378: NOT
59379: PUSH
59380: LD_VAR 0 2
59384: PPUSH
59385: LD_VAR 0 3
59389: PPUSH
59390: CALL_OW 488
59394: NOT
59395: OR
59396: PUSH
59397: LD_VAR 0 1
59401: PPUSH
59402: CALL_OW 266
59406: PUSH
59407: LD_INT 3
59409: NONEQUAL
59410: PUSH
59411: LD_VAR 0 1
59415: PPUSH
59416: CALL_OW 247
59420: PUSH
59421: LD_INT 1
59423: EQUAL
59424: NOT
59425: AND
59426: OR
59427: IFFALSE 59431
// exit ;
59429: GO 59713
// if GetType ( factory ) = unit_human then
59431: LD_VAR 0 1
59435: PPUSH
59436: CALL_OW 247
59440: PUSH
59441: LD_INT 1
59443: EQUAL
59444: IFFALSE 59461
// factory := IsInUnit ( factory ) ;
59446: LD_ADDR_VAR 0 1
59450: PUSH
59451: LD_VAR 0 1
59455: PPUSH
59456: CALL_OW 310
59460: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59461: LD_VAR 0 1
59465: PPUSH
59466: CALL_OW 266
59470: PUSH
59471: LD_INT 3
59473: NONEQUAL
59474: IFFALSE 59478
// exit ;
59476: GO 59713
// for i := 1 to Count ( factoryWaypoints ) do
59478: LD_ADDR_VAR 0 5
59482: PUSH
59483: DOUBLE
59484: LD_INT 1
59486: DEC
59487: ST_TO_ADDR
59488: LD_EXP 53
59492: PPUSH
59493: CALL 4946 0 1
59497: PUSH
59498: FOR_TO
59499: IFFALSE 59661
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59501: LD_VAR 0 2
59505: PPUSH
59506: LD_VAR 0 3
59510: PPUSH
59511: CALL_OW 428
59515: PUSH
59516: LD_EXP 53
59520: PUSH
59521: LD_VAR 0 5
59525: ARRAY
59526: PUSH
59527: LD_INT 2
59529: ARRAY
59530: EQUAL
59531: IFFALSE 59563
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59533: LD_ADDR_EXP 53
59537: PUSH
59538: LD_EXP 53
59542: PPUSH
59543: LD_VAR 0 5
59547: PPUSH
59548: CALL_OW 3
59552: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59553: CALL 59718 0 0
// exit ;
59557: POP
59558: POP
59559: GO 59713
// end else
59561: GO 59659
// if factory = factoryWaypoints [ i ] [ 2 ] then
59563: LD_VAR 0 1
59567: PUSH
59568: LD_EXP 53
59572: PUSH
59573: LD_VAR 0 5
59577: ARRAY
59578: PUSH
59579: LD_INT 2
59581: ARRAY
59582: EQUAL
59583: IFFALSE 59659
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59585: LD_ADDR_EXP 53
59589: PUSH
59590: LD_EXP 53
59594: PPUSH
59595: LD_VAR 0 5
59599: PPUSH
59600: CALL_OW 3
59604: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59605: LD_ADDR_EXP 53
59609: PUSH
59610: LD_EXP 53
59614: PPUSH
59615: LD_VAR 0 1
59619: PPUSH
59620: CALL_OW 255
59624: PUSH
59625: LD_VAR 0 1
59629: PUSH
59630: LD_VAR 0 2
59634: PUSH
59635: LD_VAR 0 3
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: PPUSH
59646: CALL 40555 0 2
59650: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59651: CALL 59718 0 0
// exit ;
59655: POP
59656: POP
59657: GO 59713
// end ; end ;
59659: GO 59498
59661: POP
59662: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59663: LD_ADDR_EXP 53
59667: PUSH
59668: LD_EXP 53
59672: PPUSH
59673: LD_VAR 0 1
59677: PPUSH
59678: CALL_OW 255
59682: PUSH
59683: LD_VAR 0 1
59687: PUSH
59688: LD_VAR 0 2
59692: PUSH
59693: LD_VAR 0 3
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: PPUSH
59704: CALL 40555 0 2
59708: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59709: CALL 59718 0 0
// end ;
59713: LD_VAR 0 4
59717: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59718: LD_INT 0
59720: PPUSH
59721: PPUSH
59722: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59723: LD_STRING resetFactoryWaypoint();
59725: PPUSH
59726: CALL_OW 559
// if factoryWaypoints then
59730: LD_EXP 53
59734: IFFALSE 59855
// begin list := factoryWaypoints ;
59736: LD_ADDR_VAR 0 3
59740: PUSH
59741: LD_EXP 53
59745: ST_TO_ADDR
// for i := 1 to list do
59746: LD_ADDR_VAR 0 2
59750: PUSH
59751: DOUBLE
59752: LD_INT 1
59754: DEC
59755: ST_TO_ADDR
59756: LD_VAR 0 3
59760: PUSH
59761: FOR_TO
59762: IFFALSE 59853
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59764: LD_STRING setFactoryWaypointXY(
59766: PUSH
59767: LD_VAR 0 3
59771: PUSH
59772: LD_VAR 0 2
59776: ARRAY
59777: PUSH
59778: LD_INT 1
59780: ARRAY
59781: STR
59782: PUSH
59783: LD_STRING ,
59785: STR
59786: PUSH
59787: LD_VAR 0 3
59791: PUSH
59792: LD_VAR 0 2
59796: ARRAY
59797: PUSH
59798: LD_INT 2
59800: ARRAY
59801: STR
59802: PUSH
59803: LD_STRING ,
59805: STR
59806: PUSH
59807: LD_VAR 0 3
59811: PUSH
59812: LD_VAR 0 2
59816: ARRAY
59817: PUSH
59818: LD_INT 3
59820: ARRAY
59821: STR
59822: PUSH
59823: LD_STRING ,
59825: STR
59826: PUSH
59827: LD_VAR 0 3
59831: PUSH
59832: LD_VAR 0 2
59836: ARRAY
59837: PUSH
59838: LD_INT 4
59840: ARRAY
59841: STR
59842: PUSH
59843: LD_STRING )
59845: STR
59846: PPUSH
59847: CALL_OW 559
59851: GO 59761
59853: POP
59854: POP
// end ; end ;
59855: LD_VAR 0 1
59859: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59860: LD_INT 0
59862: PPUSH
// if HexInfo ( x , y ) = warehouse then
59863: LD_VAR 0 2
59867: PPUSH
59868: LD_VAR 0 3
59872: PPUSH
59873: CALL_OW 428
59877: PUSH
59878: LD_VAR 0 1
59882: EQUAL
59883: IFFALSE 59910
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59885: LD_ADDR_EXP 55
59889: PUSH
59890: LD_EXP 55
59894: PPUSH
59895: LD_VAR 0 1
59899: PPUSH
59900: LD_INT 0
59902: PPUSH
59903: CALL_OW 1
59907: ST_TO_ADDR
59908: GO 59961
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59910: LD_ADDR_EXP 55
59914: PUSH
59915: LD_EXP 55
59919: PPUSH
59920: LD_VAR 0 1
59924: PPUSH
59925: LD_VAR 0 1
59929: PPUSH
59930: CALL_OW 255
59934: PUSH
59935: LD_VAR 0 1
59939: PUSH
59940: LD_VAR 0 2
59944: PUSH
59945: LD_VAR 0 3
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: PPUSH
59956: CALL_OW 1
59960: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59961: CALL 59970 0 0
// end ;
59965: LD_VAR 0 4
59969: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59970: LD_INT 0
59972: PPUSH
59973: PPUSH
59974: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59975: LD_STRING resetWarehouseGatheringPoints();
59977: PPUSH
59978: CALL_OW 559
// if warehouseGatheringPoints then
59982: LD_EXP 55
59986: IFFALSE 60112
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59988: LD_ADDR_VAR 0 3
59992: PUSH
59993: LD_EXP 55
59997: PPUSH
59998: CALL 44323 0 1
60002: ST_TO_ADDR
// for i := 1 to list do
60003: LD_ADDR_VAR 0 2
60007: PUSH
60008: DOUBLE
60009: LD_INT 1
60011: DEC
60012: ST_TO_ADDR
60013: LD_VAR 0 3
60017: PUSH
60018: FOR_TO
60019: IFFALSE 60110
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60021: LD_STRING setWarehouseGatheringPointXY(
60023: PUSH
60024: LD_VAR 0 3
60028: PUSH
60029: LD_VAR 0 2
60033: ARRAY
60034: PUSH
60035: LD_INT 1
60037: ARRAY
60038: STR
60039: PUSH
60040: LD_STRING ,
60042: STR
60043: PUSH
60044: LD_VAR 0 3
60048: PUSH
60049: LD_VAR 0 2
60053: ARRAY
60054: PUSH
60055: LD_INT 2
60057: ARRAY
60058: STR
60059: PUSH
60060: LD_STRING ,
60062: STR
60063: PUSH
60064: LD_VAR 0 3
60068: PUSH
60069: LD_VAR 0 2
60073: ARRAY
60074: PUSH
60075: LD_INT 3
60077: ARRAY
60078: STR
60079: PUSH
60080: LD_STRING ,
60082: STR
60083: PUSH
60084: LD_VAR 0 3
60088: PUSH
60089: LD_VAR 0 2
60093: ARRAY
60094: PUSH
60095: LD_INT 4
60097: ARRAY
60098: STR
60099: PUSH
60100: LD_STRING )
60102: STR
60103: PPUSH
60104: CALL_OW 559
60108: GO 60018
60110: POP
60111: POP
// end ; end ;
60112: LD_VAR 0 1
60116: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
60117: LD_INT 0
60119: PPUSH
60120: PPUSH
// if not mpSidePositions then
60121: LD_EXP 5
60125: NOT
60126: IFFALSE 60130
// exit ;
60128: GO 60201
// result :=  ;
60130: LD_ADDR_VAR 0 1
60134: PUSH
60135: LD_STRING 
60137: ST_TO_ADDR
// for i := 1 to 8 do
60138: LD_ADDR_VAR 0 2
60142: PUSH
60143: DOUBLE
60144: LD_INT 1
60146: DEC
60147: ST_TO_ADDR
60148: LD_INT 8
60150: PUSH
60151: FOR_TO
60152: IFFALSE 60182
// begin result := result & mpSidePositions [ i ] & ; ;
60154: LD_ADDR_VAR 0 1
60158: PUSH
60159: LD_VAR 0 1
60163: PUSH
60164: LD_EXP 5
60168: PUSH
60169: LD_VAR 0 2
60173: ARRAY
60174: STR
60175: PUSH
60176: LD_STRING ;
60178: STR
60179: ST_TO_ADDR
// end ;
60180: GO 60151
60182: POP
60183: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
60184: LD_STRING setMultiplayerRealPosition("
60186: PUSH
60187: LD_VAR 0 1
60191: STR
60192: PUSH
60193: LD_STRING ");
60195: STR
60196: PPUSH
60197: CALL_OW 559
// end ;
60201: LD_VAR 0 1
60205: RET
