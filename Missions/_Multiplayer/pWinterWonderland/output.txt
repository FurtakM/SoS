// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46246 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46622 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 9
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 180 , 200 ] ;
 802: LD_ADDR_EXP 27
 806: PUSH
 807: LD_INT 180
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 17
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 3
 844: PUSH
 845: LD_INT 4
 847: PUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 6
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea , MZSpecialArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 16
 866: PUSH
 867: LD_INT 7
 869: PUSH
 870: LD_INT 8
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 17
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 4
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 22
 921: PUSH
 922: LD_EXP 4
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 23
 935: PUSH
 936: LD_EXP 4
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 13
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 25
 963: PUSH
 964: LD_EXP 4
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 4
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 4
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// mpKingArea := 0 ;
1009: LD_ADDR_EXP 32
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// mpPoints := 0 ;
1017: LD_ADDR_EXP 33
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// mpEmissions := 0 ;
1025: LD_ADDR_EXP 35
1029: PUSH
1030: LD_INT 0
1032: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1033: LD_EXP 4
1037: PUSH
1038: LD_INT 9
1040: ARRAY
1041: IFFALSE 1173
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1043: LD_ADDR_EXP 34
1047: PUSH
1048: LD_INT 1
1050: PUSH
1051: LD_INT 1
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: LD_INT 2
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 1
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PUSH
1088: LD_INT 12
1090: PUSH
1091: LD_INT 1
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: LD_INT 24
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 12
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: LD_INT 23
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 21
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 42
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 21
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 42
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1173: LD_ADDR_EXP 14
1177: PUSH
1178: LD_EXP 4
1182: PUSH
1183: LD_INT 11
1185: ARRAY
1186: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1187: LD_ADDR_EXP 20
1191: PUSH
1192: LD_EXP 4
1196: PUSH
1197: LD_INT 12
1199: ARRAY
1200: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1201: LD_ADDR_EXP 24
1205: PUSH
1206: LD_EXP 4
1210: PUSH
1211: LD_INT 13
1213: ARRAY
1214: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1215: LD_ADDR_EXP 31
1219: PUSH
1220: LD_EXP 4
1224: PUSH
1225: LD_INT 14
1227: ARRAY
1228: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1229: LD_ADDR_EXP 28
1233: PUSH
1234: LD_EXP 4
1238: PUSH
1239: LD_INT 15
1241: ARRAY
1242: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1243: LD_ADDR_EXP 26
1247: PUSH
1248: LD_EXP 4
1252: PUSH
1253: LD_INT 18
1255: ARRAY
1256: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1257: LD_ADDR_EXP 18
1261: PUSH
1262: LD_EXP 4
1266: PUSH
1267: LD_INT 21
1269: ARRAY
1270: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1271: LD_ADDR_EXP 29
1275: PUSH
1276: LD_INT 9
1278: PUSH
1279: LD_INT 10
1281: PUSH
1282: LD_INT 11
1284: PUSH
1285: LD_INT 12
1287: PUSH
1288: LD_INT 13
1290: PUSH
1291: LD_INT 14
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 0 ) , GetBuildingFromArea ( depotArea2 , 0 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 3 ) ] ;
1302: LD_ADDR_VAR 0 8
1306: PUSH
1307: LD_INT 15
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL 45611 0 2
1317: PUSH
1318: LD_INT 16
1320: PPUSH
1321: LD_INT 0
1323: PPUSH
1324: CALL 45611 0 2
1328: PUSH
1329: LD_INT 17
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL 45611 0 2
1339: PUSH
1340: LD_INT 33
1342: PPUSH
1343: LD_INT 3
1345: PPUSH
1346: CALL 45611 0 2
1350: PUSH
1351: LD_INT 39
1353: PPUSH
1354: LD_INT 3
1356: PPUSH
1357: CALL 45611 0 2
1361: PUSH
1362: LD_INT 45
1364: PPUSH
1365: LD_INT 3
1367: PPUSH
1368: CALL 45611 0 2
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1381: LD_ADDR_VAR 0 3
1385: PUSH
1386: DOUBLE
1387: LD_INT 1
1389: DEC
1390: ST_TO_ADDR
1391: LD_VAR 0 8
1395: PPUSH
1396: CALL 4960 0 1
1400: PUSH
1401: FOR_TO
1402: IFFALSE 1506
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1404: LD_ADDR_EXP 19
1408: PUSH
1409: LD_EXP 19
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: LD_VAR 0 8
1423: PUSH
1424: LD_VAR 0 3
1428: ARRAY
1429: PUSH
1430: LD_INT 1
1432: ARRAY
1433: PPUSH
1434: LD_VAR 0 8
1438: PUSH
1439: LD_VAR 0 3
1443: ARRAY
1444: PUSH
1445: LD_INT 3
1447: ARRAY
1448: PPUSH
1449: LD_INT 10
1451: PPUSH
1452: CALL_OW 272
1456: PUSH
1457: LD_VAR 0 8
1461: PUSH
1462: LD_VAR 0 3
1466: ARRAY
1467: PUSH
1468: LD_INT 2
1470: ARRAY
1471: PPUSH
1472: LD_VAR 0 8
1476: PUSH
1477: LD_VAR 0 3
1481: ARRAY
1482: PUSH
1483: LD_INT 3
1485: ARRAY
1486: PPUSH
1487: LD_INT 10
1489: PPUSH
1490: CALL_OW 273
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PPUSH
1499: CALL_OW 1
1503: ST_TO_ADDR
1504: GO 1401
1506: POP
1507: POP
// if hasOil then
1508: LD_VAR 0 5
1512: IFFALSE 1623
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1514: LD_ADDR_VAR 0 4
1518: PUSH
1519: LD_EXP 4
1523: PUSH
1524: LD_INT 6
1526: ARRAY
1527: PUSH
1528: LD_INT 2
1530: EQUAL
1531: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1532: LD_ADDR_EXP 10
1536: PUSH
1537: LD_INT 18
1539: PPUSH
1540: LD_VAR 0 4
1544: PPUSH
1545: CALL 45444 0 2
1549: PUSH
1550: LD_INT 19
1552: PPUSH
1553: LD_VAR 0 4
1557: PPUSH
1558: CALL 45444 0 2
1562: PUSH
1563: LD_INT 20
1565: PPUSH
1566: LD_VAR 0 4
1570: PPUSH
1571: CALL 45444 0 2
1575: PUSH
1576: LD_INT 37
1578: PPUSH
1579: LD_VAR 0 4
1583: PPUSH
1584: CALL 45444 0 2
1588: PUSH
1589: LD_INT 43
1591: PPUSH
1592: LD_VAR 0 4
1596: PPUSH
1597: CALL 45444 0 2
1601: PUSH
1602: LD_INT 49
1604: PPUSH
1605: LD_VAR 0 4
1609: PPUSH
1610: CALL 45444 0 2
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: ST_TO_ADDR
// end ; if hasSib then
1623: LD_VAR 0 6
1627: IFFALSE 1738
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1629: LD_ADDR_VAR 0 4
1633: PUSH
1634: LD_EXP 4
1638: PUSH
1639: LD_INT 7
1641: ARRAY
1642: PUSH
1643: LD_INT 2
1645: EQUAL
1646: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1647: LD_ADDR_EXP 11
1651: PUSH
1652: LD_INT 21
1654: PPUSH
1655: LD_VAR 0 4
1659: PPUSH
1660: CALL 45444 0 2
1664: PUSH
1665: LD_INT 22
1667: PPUSH
1668: LD_VAR 0 4
1672: PPUSH
1673: CALL 45444 0 2
1677: PUSH
1678: LD_INT 23
1680: PPUSH
1681: LD_VAR 0 4
1685: PPUSH
1686: CALL 45444 0 2
1690: PUSH
1691: LD_INT 38
1693: PPUSH
1694: LD_VAR 0 4
1698: PPUSH
1699: CALL 45444 0 2
1703: PUSH
1704: LD_INT 44
1706: PPUSH
1707: LD_VAR 0 4
1711: PPUSH
1712: CALL 45444 0 2
1716: PUSH
1717: LD_INT 50
1719: PPUSH
1720: LD_VAR 0 4
1724: PPUSH
1725: CALL 45444 0 2
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1738: LD_VAR 0 7
1742: PUSH
1743: LD_INT 1
1745: GREATEREQUAL
1746: IFFALSE 1758
// mpDepots := startPos ;
1748: LD_ADDR_EXP 12
1752: PUSH
1753: LD_VAR 0 8
1757: ST_TO_ADDR
// if baseLevel >= 2 then
1758: LD_VAR 0 7
1762: PUSH
1763: LD_INT 2
1765: GREATEREQUAL
1766: IFFALSE 2081
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 0 ) ] ] ;
1768: LD_ADDR_EXP 15
1772: PUSH
1773: LD_INT 31
1775: PUSH
1776: LD_INT 24
1778: PPUSH
1779: LD_INT 3
1781: PPUSH
1782: CALL 45611 0 2
1786: ADD
1787: PUSH
1788: LD_INT 31
1790: PUSH
1791: LD_INT 25
1793: PPUSH
1794: LD_INT 3
1796: PPUSH
1797: CALL 45611 0 2
1801: ADD
1802: PUSH
1803: LD_INT 4
1805: PUSH
1806: LD_INT 26
1808: PPUSH
1809: LD_INT 3
1811: PPUSH
1812: CALL 45611 0 2
1816: ADD
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 31
1825: PUSH
1826: LD_INT 27
1828: PPUSH
1829: LD_INT 3
1831: PPUSH
1832: CALL 45611 0 2
1836: ADD
1837: PUSH
1838: LD_INT 31
1840: PUSH
1841: LD_INT 28
1843: PPUSH
1844: LD_INT 4
1846: PPUSH
1847: CALL 45611 0 2
1851: ADD
1852: PUSH
1853: LD_INT 4
1855: PUSH
1856: LD_INT 29
1858: PPUSH
1859: LD_INT 3
1861: PPUSH
1862: CALL 45611 0 2
1866: ADD
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 31
1875: PUSH
1876: LD_INT 30
1878: PPUSH
1879: LD_INT 3
1881: PPUSH
1882: CALL 45611 0 2
1886: ADD
1887: PUSH
1888: LD_INT 31
1890: PUSH
1891: LD_INT 31
1893: PPUSH
1894: LD_INT 4
1896: PPUSH
1897: CALL 45611 0 2
1901: ADD
1902: PUSH
1903: LD_INT 4
1905: PUSH
1906: LD_INT 32
1908: PPUSH
1909: LD_INT 3
1911: PPUSH
1912: CALL 45611 0 2
1916: ADD
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 31
1925: PUSH
1926: LD_INT 34
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: CALL 45611 0 2
1936: ADD
1937: PUSH
1938: LD_INT 31
1940: PUSH
1941: LD_INT 35
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL 45611 0 2
1951: ADD
1952: PUSH
1953: LD_INT 4
1955: PUSH
1956: LD_INT 36
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL 45611 0 2
1966: ADD
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 31
1975: PUSH
1976: LD_INT 40
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL 45611 0 2
1986: ADD
1987: PUSH
1988: LD_INT 31
1990: PUSH
1991: LD_INT 41
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL 45611 0 2
2001: ADD
2002: PUSH
2003: LD_INT 4
2005: PUSH
2006: LD_INT 42
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL 45611 0 2
2016: ADD
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 31
2025: PUSH
2026: LD_INT 46
2028: PPUSH
2029: LD_INT 0
2031: PPUSH
2032: CALL 45611 0 2
2036: ADD
2037: PUSH
2038: LD_INT 31
2040: PUSH
2041: LD_INT 47
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL 45611 0 2
2051: ADD
2052: PUSH
2053: LD_INT 4
2055: PUSH
2056: LD_INT 48
2058: PPUSH
2059: LD_INT 0
2061: PPUSH
2062: CALL 45611 0 2
2066: ADD
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: ST_TO_ADDR
// end ; end ;
2081: LD_VAR 0 2
2085: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2086: GO 2088
2088: DISABLE
2089: LD_INT 0
2091: PPUSH
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
2096: PPUSH
2097: PPUSH
2098: PPUSH
// begin if not mpShipments then
2099: LD_EXP 25
2103: NOT
2104: IFFALSE 2108
// exit ;
2106: GO 2673
// case mpShipments of 1 :
2108: LD_EXP 25
2112: PUSH
2113: LD_INT 1
2115: DOUBLE
2116: EQUAL
2117: IFTRUE 2121
2119: GO 2156
2121: POP
// begin time := 0 0$30 ;
2122: LD_ADDR_VAR 0 4
2126: PUSH
2127: LD_INT 1050
2129: ST_TO_ADDR
// normalTime := 0 0$30 ;
2130: LD_ADDR_VAR 0 6
2134: PUSH
2135: LD_INT 1050
2137: ST_TO_ADDR
// maxTime := 1 1$20 ;
2138: LD_ADDR_VAR 0 8
2142: PUSH
2143: LD_INT 2800
2145: ST_TO_ADDR
// delayTime := 0 0$5 ;
2146: LD_ADDR_VAR 0 7
2150: PUSH
2151: LD_INT 175
2153: ST_TO_ADDR
// end ; 2 :
2154: GO 2286
2156: LD_INT 2
2158: DOUBLE
2159: EQUAL
2160: IFTRUE 2164
2162: GO 2199
2164: POP
// begin time := 0 0$25 ;
2165: LD_ADDR_VAR 0 4
2169: PUSH
2170: LD_INT 875
2172: ST_TO_ADDR
// normalTime := 0 0$25 ;
2173: LD_ADDR_VAR 0 6
2177: PUSH
2178: LD_INT 875
2180: ST_TO_ADDR
// maxTime := 1 1$10 ;
2181: LD_ADDR_VAR 0 8
2185: PUSH
2186: LD_INT 2450
2188: ST_TO_ADDR
// delayTime := 0 0$4 ;
2189: LD_ADDR_VAR 0 7
2193: PUSH
2194: LD_INT 140
2196: ST_TO_ADDR
// end ; 3 :
2197: GO 2286
2199: LD_INT 3
2201: DOUBLE
2202: EQUAL
2203: IFTRUE 2207
2205: GO 2242
2207: POP
// begin time := 0 0$20 ;
2208: LD_ADDR_VAR 0 4
2212: PUSH
2213: LD_INT 700
2215: ST_TO_ADDR
// normalTime := 0 0$20 ;
2216: LD_ADDR_VAR 0 6
2220: PUSH
2221: LD_INT 700
2223: ST_TO_ADDR
// maxTime := 1 1$00 ;
2224: LD_ADDR_VAR 0 8
2228: PUSH
2229: LD_INT 2100
2231: ST_TO_ADDR
// delayTime := 0 0$3 ;
2232: LD_ADDR_VAR 0 7
2236: PUSH
2237: LD_INT 105
2239: ST_TO_ADDR
// end ; 4 :
2240: GO 2286
2242: LD_INT 4
2244: DOUBLE
2245: EQUAL
2246: IFTRUE 2250
2248: GO 2285
2250: POP
// begin time := 0 0$15 ;
2251: LD_ADDR_VAR 0 4
2255: PUSH
2256: LD_INT 525
2258: ST_TO_ADDR
// normalTime := 0 0$15 ;
2259: LD_ADDR_VAR 0 6
2263: PUSH
2264: LD_INT 525
2266: ST_TO_ADDR
// maxTime := 0 0$55 ;
2267: LD_ADDR_VAR 0 8
2271: PUSH
2272: LD_INT 1925
2274: ST_TO_ADDR
// delayTime := 0 0$2 ;
2275: LD_ADDR_VAR 0 7
2279: PUSH
2280: LD_INT 70
2282: ST_TO_ADDR
// end ; end ;
2283: GO 2286
2285: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 2
2296: PUSH
2297: LD_INT 3
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 5
2305: PUSH
2306: LD_INT 6
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: ST_TO_ADDR
// areas := [ ] ;
2317: LD_ADDR_VAR 0 5
2321: PUSH
2322: EMPTY
2323: ST_TO_ADDR
// for i := 1 to 8 do
2324: LD_ADDR_VAR 0 1
2328: PUSH
2329: DOUBLE
2330: LD_INT 1
2332: DEC
2333: ST_TO_ADDR
2334: LD_INT 8
2336: PUSH
2337: FOR_TO
2338: IFFALSE 2385
// begin if not mpSidePositions [ i ] then
2340: LD_EXP 5
2344: PUSH
2345: LD_VAR 0 1
2349: ARRAY
2350: NOT
2351: IFFALSE 2355
// continue ;
2353: GO 2337
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2355: LD_ADDR_VAR 0 5
2359: PUSH
2360: LD_VAR 0 5
2364: PUSH
2365: LD_VAR 0 3
2369: PUSH
2370: LD_EXP 5
2374: PUSH
2375: LD_VAR 0 1
2379: ARRAY
2380: ARRAY
2381: ADD
2382: ST_TO_ADDR
// end ;
2383: GO 2337
2385: POP
2386: POP
// x := 1 ;
2387: LD_ADDR_VAR 0 2
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// repeat wait ( time ) ;
2395: LD_VAR 0 4
2399: PPUSH
2400: CALL_OW 67
// x := Inc ( x ) ;
2404: LD_ADDR_VAR 0 2
2408: PUSH
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL 42265 0 1
2418: ST_TO_ADDR
// if x > 5 then
2419: LD_VAR 0 2
2423: PUSH
2424: LD_INT 5
2426: GREATER
2427: IFFALSE 2437
// x := 1 ;
2429: LD_ADDR_VAR 0 2
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// for i in areas do
2437: LD_ADDR_VAR 0 1
2441: PUSH
2442: LD_VAR 0 5
2446: PUSH
2447: FOR_IN
2448: IFFALSE 2487
// begin if GetResourceArea ( i , mat_cans ) < 25 then
2450: LD_VAR 0 1
2454: PPUSH
2455: LD_INT 1
2457: PPUSH
2458: CALL_OW 287
2462: PUSH
2463: LD_INT 25
2465: LESS
2466: IFFALSE 2485
// begin CreateCratesArea ( x , i , true ) ;
2468: LD_VAR 0 2
2472: PPUSH
2473: LD_VAR 0 1
2477: PPUSH
2478: LD_INT 1
2480: PPUSH
2481: CALL_OW 55
// end ; end ;
2485: GO 2447
2487: POP
2488: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 100 then
2489: LD_INT 7
2491: PPUSH
2492: LD_INT 1
2494: PPUSH
2495: CALL_OW 287
2499: PUSH
2500: LD_INT 100
2502: LESS
2503: IFFALSE 2547
// for i := 1 to Count ( areas ) do
2505: LD_ADDR_VAR 0 1
2509: PUSH
2510: DOUBLE
2511: LD_INT 1
2513: DEC
2514: ST_TO_ADDR
2515: LD_VAR 0 5
2519: PPUSH
2520: CALL 4960 0 1
2524: PUSH
2525: FOR_TO
2526: IFFALSE 2545
// CreateCratesArea ( x , MZBaseArea , true ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 7
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 55
2543: GO 2525
2545: POP
2546: POP
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 50 then
2547: LD_INT 8
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: CALL_OW 287
2557: PUSH
2558: LD_INT 50
2560: LESS
2561: IFFALSE 2600
// begin for i := 1 to 4 do
2563: LD_ADDR_VAR 0 1
2567: PUSH
2568: DOUBLE
2569: LD_INT 1
2571: DEC
2572: ST_TO_ADDR
2573: LD_INT 4
2575: PUSH
2576: FOR_TO
2577: IFFALSE 2596
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2579: LD_VAR 0 2
2583: PPUSH
2584: LD_INT 8
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: CALL_OW 55
2594: GO 2576
2596: POP
2597: POP
// end else
2598: GO 2631
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 100 then
2600: LD_INT 8
2602: PPUSH
2603: LD_INT 1
2605: PPUSH
2606: CALL_OW 287
2610: PUSH
2611: LD_INT 100
2613: LESS
2614: IFFALSE 2631
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 8
2623: PPUSH
2624: LD_INT 1
2626: PPUSH
2627: CALL_OW 55
// time := time + delayTime ;
2631: LD_ADDR_VAR 0 4
2635: PUSH
2636: LD_VAR 0 4
2640: PUSH
2641: LD_VAR 0 7
2645: PLUS
2646: ST_TO_ADDR
// if time > maxTime then
2647: LD_VAR 0 4
2651: PUSH
2652: LD_VAR 0 8
2656: GREATER
2657: IFFALSE 2669
// time := normalTime ;
2659: LD_ADDR_VAR 0 4
2663: PUSH
2664: LD_VAR 0 6
2668: ST_TO_ADDR
// until false ;
2669: LD_INT 0
2671: IFFALSE 2395
// end ; end_of_file
2673: PPOPN 8
2675: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2676: LD_VAR 0 1
2680: PPUSH
2681: CALL 55295 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2685: LD_VAR 0 1
2689: PPUSH
2690: CALL 51394 0 1
// end ;
2694: PPOPN 1
2696: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2697: LD_VAR 0 1
2701: PPUSH
2702: CALL 55312 0 1
// end ;
2706: PPOPN 1
2708: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2709: LD_VAR 0 1
2713: PPUSH
2714: CALL 52065 0 1
2718: PPOPN 1
2720: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2721: LD_VAR 0 1
2725: PPUSH
2726: LD_VAR 0 2
2730: PPUSH
2731: CALL 55353 0 2
2735: PPOPN 2
2737: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2738: LD_VAR 0 1
2742: PPUSH
2743: LD_VAR 0 2
2747: PPUSH
2748: LD_VAR 0 3
2752: PPUSH
2753: CALL 52118 0 3
2757: PPOPN 3
2759: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2760: LD_INT 0
2762: PPUSH
2763: PPUSH
// if exist_mode then
2764: LD_VAR 0 2
2768: IFFALSE 2814
// begin unit := CreateCharacter ( prefix & ident ) ;
2770: LD_ADDR_VAR 0 5
2774: PUSH
2775: LD_VAR 0 3
2779: PUSH
2780: LD_VAR 0 1
2784: STR
2785: PPUSH
2786: CALL_OW 34
2790: ST_TO_ADDR
// if unit then
2791: LD_VAR 0 5
2795: IFFALSE 2812
// DeleteCharacters ( prefix & ident ) ;
2797: LD_VAR 0 3
2801: PUSH
2802: LD_VAR 0 1
2806: STR
2807: PPUSH
2808: CALL_OW 40
// end else
2812: GO 2829
// unit := NewCharacter ( ident ) ;
2814: LD_ADDR_VAR 0 5
2818: PUSH
2819: LD_VAR 0 1
2823: PPUSH
2824: CALL_OW 25
2828: ST_TO_ADDR
// result := unit ;
2829: LD_ADDR_VAR 0 4
2833: PUSH
2834: LD_VAR 0 5
2838: ST_TO_ADDR
// end ;
2839: LD_VAR 0 4
2843: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
// if exist_mode then
2848: LD_VAR 0 2
2852: IFFALSE 2877
// unit := CreateCharacter ( prefix & ident ) else
2854: LD_ADDR_VAR 0 5
2858: PUSH
2859: LD_VAR 0 3
2863: PUSH
2864: LD_VAR 0 1
2868: STR
2869: PPUSH
2870: CALL_OW 34
2874: ST_TO_ADDR
2875: GO 2892
// unit := NewCharacter ( ident ) ;
2877: LD_ADDR_VAR 0 5
2881: PUSH
2882: LD_VAR 0 1
2886: PPUSH
2887: CALL_OW 25
2891: ST_TO_ADDR
// result := unit ;
2892: LD_ADDR_VAR 0 4
2896: PUSH
2897: LD_VAR 0 5
2901: ST_TO_ADDR
// end ;
2902: LD_VAR 0 4
2906: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2907: LD_INT 0
2909: PPUSH
2910: PPUSH
// if not side or not nation then
2911: LD_VAR 0 1
2915: NOT
2916: IFTRUE 2925
2918: PUSH
2919: LD_VAR 0 2
2923: NOT
2924: OR
2925: IFFALSE 2929
// exit ;
2927: GO 3699
// case nation of nation_american :
2929: LD_VAR 0 2
2933: PUSH
2934: LD_INT 1
2936: DOUBLE
2937: EQUAL
2938: IFTRUE 2942
2940: GO 3156
2942: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2943: LD_ADDR_VAR 0 4
2947: PUSH
2948: LD_INT 35
2950: PUSH
2951: LD_INT 45
2953: PUSH
2954: LD_INT 46
2956: PUSH
2957: LD_INT 47
2959: PUSH
2960: LD_INT 82
2962: PUSH
2963: LD_INT 83
2965: PUSH
2966: LD_INT 84
2968: PUSH
2969: LD_INT 85
2971: PUSH
2972: LD_INT 86
2974: PUSH
2975: LD_INT 1
2977: PUSH
2978: LD_INT 2
2980: PUSH
2981: LD_INT 6
2983: PUSH
2984: LD_INT 15
2986: PUSH
2987: LD_INT 16
2989: PUSH
2990: LD_INT 7
2992: PUSH
2993: LD_INT 12
2995: PUSH
2996: LD_INT 13
2998: PUSH
2999: LD_INT 10
3001: PUSH
3002: LD_INT 14
3004: PUSH
3005: LD_INT 20
3007: PUSH
3008: LD_INT 21
3010: PUSH
3011: LD_INT 22
3013: PUSH
3014: LD_INT 25
3016: PUSH
3017: LD_INT 32
3019: PUSH
3020: LD_INT 27
3022: PUSH
3023: LD_INT 36
3025: PUSH
3026: LD_INT 69
3028: PUSH
3029: LD_INT 39
3031: PUSH
3032: LD_INT 34
3034: PUSH
3035: LD_INT 40
3037: PUSH
3038: LD_INT 48
3040: PUSH
3041: LD_INT 49
3043: PUSH
3044: LD_INT 50
3046: PUSH
3047: LD_INT 51
3049: PUSH
3050: LD_INT 52
3052: PUSH
3053: LD_INT 53
3055: PUSH
3056: LD_INT 54
3058: PUSH
3059: LD_INT 55
3061: PUSH
3062: LD_INT 56
3064: PUSH
3065: LD_INT 57
3067: PUSH
3068: LD_INT 58
3070: PUSH
3071: LD_INT 59
3073: PUSH
3074: LD_INT 60
3076: PUSH
3077: LD_INT 61
3079: PUSH
3080: LD_INT 62
3082: PUSH
3083: LD_INT 80
3085: PUSH
3086: LD_INT 82
3088: PUSH
3089: LD_INT 83
3091: PUSH
3092: LD_INT 84
3094: PUSH
3095: LD_INT 85
3097: PUSH
3098: LD_INT 86
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: ST_TO_ADDR
3154: GO 3621
3156: LD_INT 2
3158: DOUBLE
3159: EQUAL
3160: IFTRUE 3164
3162: GO 3390
3164: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3165: LD_ADDR_VAR 0 4
3169: PUSH
3170: LD_INT 35
3172: PUSH
3173: LD_INT 45
3175: PUSH
3176: LD_INT 46
3178: PUSH
3179: LD_INT 47
3181: PUSH
3182: LD_INT 82
3184: PUSH
3185: LD_INT 83
3187: PUSH
3188: LD_INT 84
3190: PUSH
3191: LD_INT 85
3193: PUSH
3194: LD_INT 87
3196: PUSH
3197: LD_INT 70
3199: PUSH
3200: LD_INT 1
3202: PUSH
3203: LD_INT 11
3205: PUSH
3206: LD_INT 3
3208: PUSH
3209: LD_INT 4
3211: PUSH
3212: LD_INT 5
3214: PUSH
3215: LD_INT 6
3217: PUSH
3218: LD_INT 15
3220: PUSH
3221: LD_INT 18
3223: PUSH
3224: LD_INT 7
3226: PUSH
3227: LD_INT 17
3229: PUSH
3230: LD_INT 8
3232: PUSH
3233: LD_INT 20
3235: PUSH
3236: LD_INT 21
3238: PUSH
3239: LD_INT 22
3241: PUSH
3242: LD_INT 72
3244: PUSH
3245: LD_INT 26
3247: PUSH
3248: LD_INT 69
3250: PUSH
3251: LD_INT 39
3253: PUSH
3254: LD_INT 40
3256: PUSH
3257: LD_INT 41
3259: PUSH
3260: LD_INT 42
3262: PUSH
3263: LD_INT 43
3265: PUSH
3266: LD_INT 48
3268: PUSH
3269: LD_INT 49
3271: PUSH
3272: LD_INT 50
3274: PUSH
3275: LD_INT 51
3277: PUSH
3278: LD_INT 52
3280: PUSH
3281: LD_INT 53
3283: PUSH
3284: LD_INT 54
3286: PUSH
3287: LD_INT 55
3289: PUSH
3290: LD_INT 56
3292: PUSH
3293: LD_INT 60
3295: PUSH
3296: LD_INT 61
3298: PUSH
3299: LD_INT 62
3301: PUSH
3302: LD_INT 66
3304: PUSH
3305: LD_INT 67
3307: PUSH
3308: LD_INT 68
3310: PUSH
3311: LD_INT 81
3313: PUSH
3314: LD_INT 82
3316: PUSH
3317: LD_INT 83
3319: PUSH
3320: LD_INT 84
3322: PUSH
3323: LD_INT 85
3325: PUSH
3326: LD_INT 87
3328: PUSH
3329: LD_INT 88
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: ST_TO_ADDR
3388: GO 3621
3390: LD_INT 3
3392: DOUBLE
3393: EQUAL
3394: IFTRUE 3398
3396: GO 3620
3398: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3399: LD_ADDR_VAR 0 4
3403: PUSH
3404: LD_INT 46
3406: PUSH
3407: LD_INT 47
3409: PUSH
3410: LD_INT 1
3412: PUSH
3413: LD_INT 2
3415: PUSH
3416: LD_INT 82
3418: PUSH
3419: LD_INT 83
3421: PUSH
3422: LD_INT 84
3424: PUSH
3425: LD_INT 85
3427: PUSH
3428: LD_INT 86
3430: PUSH
3431: LD_INT 11
3433: PUSH
3434: LD_INT 9
3436: PUSH
3437: LD_INT 20
3439: PUSH
3440: LD_INT 19
3442: PUSH
3443: LD_INT 21
3445: PUSH
3446: LD_INT 24
3448: PUSH
3449: LD_INT 22
3451: PUSH
3452: LD_INT 25
3454: PUSH
3455: LD_INT 28
3457: PUSH
3458: LD_INT 29
3460: PUSH
3461: LD_INT 30
3463: PUSH
3464: LD_INT 31
3466: PUSH
3467: LD_INT 37
3469: PUSH
3470: LD_INT 38
3472: PUSH
3473: LD_INT 32
3475: PUSH
3476: LD_INT 27
3478: PUSH
3479: LD_INT 33
3481: PUSH
3482: LD_INT 69
3484: PUSH
3485: LD_INT 39
3487: PUSH
3488: LD_INT 34
3490: PUSH
3491: LD_INT 40
3493: PUSH
3494: LD_INT 71
3496: PUSH
3497: LD_INT 23
3499: PUSH
3500: LD_INT 44
3502: PUSH
3503: LD_INT 48
3505: PUSH
3506: LD_INT 49
3508: PUSH
3509: LD_INT 50
3511: PUSH
3512: LD_INT 51
3514: PUSH
3515: LD_INT 52
3517: PUSH
3518: LD_INT 53
3520: PUSH
3521: LD_INT 54
3523: PUSH
3524: LD_INT 55
3526: PUSH
3527: LD_INT 56
3529: PUSH
3530: LD_INT 57
3532: PUSH
3533: LD_INT 58
3535: PUSH
3536: LD_INT 59
3538: PUSH
3539: LD_INT 63
3541: PUSH
3542: LD_INT 64
3544: PUSH
3545: LD_INT 65
3547: PUSH
3548: LD_INT 82
3550: PUSH
3551: LD_INT 83
3553: PUSH
3554: LD_INT 84
3556: PUSH
3557: LD_INT 85
3559: PUSH
3560: LD_INT 86
3562: PUSH
3563: EMPTY
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: ST_TO_ADDR
3618: GO 3621
3620: POP
// if state > - 1 and state < 3 then
3621: LD_VAR 0 3
3625: PUSH
3626: LD_INT 1
3628: NEG
3629: GREATER
3630: IFFALSE 3642
3632: PUSH
3633: LD_VAR 0 3
3637: PUSH
3638: LD_INT 3
3640: LESS
3641: AND
3642: IFFALSE 3699
// for i in result do
3644: LD_ADDR_VAR 0 5
3648: PUSH
3649: LD_VAR 0 4
3653: PUSH
3654: FOR_IN
3655: IFFALSE 3697
// if GetTech ( i , side ) <> state then
3657: LD_VAR 0 5
3661: PPUSH
3662: LD_VAR 0 1
3666: PPUSH
3667: CALL_OW 321
3671: PUSH
3672: LD_VAR 0 3
3676: NONEQUAL
3677: IFFALSE 3695
// result := result diff i ;
3679: LD_ADDR_VAR 0 4
3683: PUSH
3684: LD_VAR 0 4
3688: PUSH
3689: LD_VAR 0 5
3693: DIFF
3694: ST_TO_ADDR
3695: GO 3654
3697: POP
3698: POP
// end ;
3699: LD_VAR 0 4
3703: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3704: LD_INT 0
3706: PPUSH
3707: PPUSH
3708: PPUSH
// result := true ;
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: LD_INT 1
3716: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3717: LD_ADDR_VAR 0 5
3721: PUSH
3722: LD_VAR 0 2
3726: PPUSH
3727: CALL_OW 480
3731: ST_TO_ADDR
// if not tmp then
3732: LD_VAR 0 5
3736: NOT
3737: IFFALSE 3741
// exit ;
3739: GO 3790
// for i in tmp do
3741: LD_ADDR_VAR 0 4
3745: PUSH
3746: LD_VAR 0 5
3750: PUSH
3751: FOR_IN
3752: IFFALSE 3788
// if GetTech ( i , side ) <> state_researched then
3754: LD_VAR 0 4
3758: PPUSH
3759: LD_VAR 0 1
3763: PPUSH
3764: CALL_OW 321
3768: PUSH
3769: LD_INT 2
3771: NONEQUAL
3772: IFFALSE 3786
// begin result := false ;
3774: LD_ADDR_VAR 0 3
3778: PUSH
3779: LD_INT 0
3781: ST_TO_ADDR
// exit ;
3782: POP
3783: POP
3784: GO 3790
// end ;
3786: GO 3751
3788: POP
3789: POP
// end ;
3790: LD_VAR 0 3
3794: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3795: LD_INT 0
3797: PPUSH
3798: PPUSH
3799: PPUSH
3800: PPUSH
3801: PPUSH
3802: PPUSH
3803: PPUSH
3804: PPUSH
3805: PPUSH
3806: PPUSH
3807: PPUSH
3808: PPUSH
3809: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3810: LD_VAR 0 1
3814: NOT
3815: IFTRUE 3832
3817: PUSH
3818: LD_VAR 0 1
3822: PPUSH
3823: CALL_OW 257
3827: PUSH
3828: LD_INT 9
3830: NONEQUAL
3831: OR
3832: IFFALSE 3836
// exit ;
3834: GO 4415
// side := GetSide ( unit ) ;
3836: LD_ADDR_VAR 0 9
3840: PUSH
3841: LD_VAR 0 1
3845: PPUSH
3846: CALL_OW 255
3850: ST_TO_ADDR
// tech_space := tech_spacanom ;
3851: LD_ADDR_VAR 0 12
3855: PUSH
3856: LD_INT 29
3858: ST_TO_ADDR
// tech_time := tech_taurad ;
3859: LD_ADDR_VAR 0 13
3863: PUSH
3864: LD_INT 28
3866: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3867: LD_ADDR_VAR 0 11
3871: PUSH
3872: LD_VAR 0 1
3876: PPUSH
3877: CALL_OW 310
3881: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3882: LD_VAR 0 11
3886: PPUSH
3887: CALL_OW 247
3891: PUSH
3892: LD_INT 2
3894: EQUAL
3895: IFFALSE 3899
// exit ;
3897: GO 4415
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3899: LD_ADDR_VAR 0 8
3903: PUSH
3904: LD_INT 81
3906: PUSH
3907: LD_VAR 0 9
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: PUSH
3916: LD_INT 3
3918: PUSH
3919: LD_INT 21
3921: PUSH
3922: LD_INT 3
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: PPUSH
3937: CALL_OW 69
3941: ST_TO_ADDR
// if not tmp then
3942: LD_VAR 0 8
3946: NOT
3947: IFFALSE 3951
// exit ;
3949: GO 4415
// if in_unit then
3951: LD_VAR 0 11
3955: IFFALSE 3979
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3957: LD_ADDR_VAR 0 10
3961: PUSH
3962: LD_VAR 0 8
3966: PPUSH
3967: LD_VAR 0 11
3971: PPUSH
3972: CALL_OW 74
3976: ST_TO_ADDR
3977: GO 3999
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3979: LD_ADDR_VAR 0 10
3983: PUSH
3984: LD_VAR 0 8
3988: PPUSH
3989: LD_VAR 0 1
3993: PPUSH
3994: CALL_OW 74
3998: ST_TO_ADDR
// if not enemy then
3999: LD_VAR 0 10
4003: NOT
4004: IFFALSE 4008
// exit ;
4006: GO 4415
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4008: LD_VAR 0 11
4012: IFFALSE 4034
4014: PUSH
4015: LD_VAR 0 11
4019: PPUSH
4020: LD_VAR 0 10
4024: PPUSH
4025: CALL_OW 296
4029: PUSH
4030: LD_INT 13
4032: GREATER
4033: AND
4034: IFTRUE 4056
4036: PUSH
4037: LD_VAR 0 1
4041: PPUSH
4042: LD_VAR 0 10
4046: PPUSH
4047: CALL_OW 296
4051: PUSH
4052: LD_INT 12
4054: GREATER
4055: OR
4056: IFFALSE 4060
// exit ;
4058: GO 4415
// missile := [ 1 ] ;
4060: LD_ADDR_VAR 0 14
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4071: LD_VAR 0 9
4075: PPUSH
4076: LD_VAR 0 12
4080: PPUSH
4081: CALL_OW 325
4085: IFFALSE 4114
// missile := Replace ( missile , missile + 1 , 2 ) ;
4087: LD_ADDR_VAR 0 14
4091: PUSH
4092: LD_VAR 0 14
4096: PPUSH
4097: LD_VAR 0 14
4101: PUSH
4102: LD_INT 1
4104: PLUS
4105: PPUSH
4106: LD_INT 2
4108: PPUSH
4109: CALL_OW 1
4113: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4114: LD_VAR 0 9
4118: PPUSH
4119: LD_VAR 0 13
4123: PPUSH
4124: CALL_OW 325
4128: IFFALSE 4152
4130: PUSH
4131: LD_VAR 0 10
4135: PPUSH
4136: CALL_OW 255
4140: PPUSH
4141: LD_VAR 0 13
4145: PPUSH
4146: CALL_OW 325
4150: NOT
4151: AND
4152: IFFALSE 4181
// missile := Replace ( missile , missile + 1 , 3 ) ;
4154: LD_ADDR_VAR 0 14
4158: PUSH
4159: LD_VAR 0 14
4163: PPUSH
4164: LD_VAR 0 14
4168: PUSH
4169: LD_INT 1
4171: PLUS
4172: PPUSH
4173: LD_INT 3
4175: PPUSH
4176: CALL_OW 1
4180: ST_TO_ADDR
// if missile < 2 then
4181: LD_VAR 0 14
4185: PUSH
4186: LD_INT 2
4188: LESS
4189: IFFALSE 4193
// exit ;
4191: GO 4415
// x := GetX ( enemy ) ;
4193: LD_ADDR_VAR 0 4
4197: PUSH
4198: LD_VAR 0 10
4202: PPUSH
4203: CALL_OW 250
4207: ST_TO_ADDR
// y := GetY ( enemy ) ;
4208: LD_ADDR_VAR 0 5
4212: PUSH
4213: LD_VAR 0 10
4217: PPUSH
4218: CALL_OW 251
4222: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4223: LD_ADDR_VAR 0 6
4227: PUSH
4228: LD_VAR 0 4
4232: PUSH
4233: LD_INT 1
4235: NEG
4236: PPUSH
4237: LD_INT 1
4239: PPUSH
4240: CALL_OW 12
4244: PLUS
4245: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4246: LD_ADDR_VAR 0 7
4250: PUSH
4251: LD_VAR 0 5
4255: PUSH
4256: LD_INT 1
4258: NEG
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: CALL_OW 12
4267: PLUS
4268: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4269: LD_VAR 0 6
4273: PPUSH
4274: LD_VAR 0 7
4278: PPUSH
4279: CALL_OW 488
4283: NOT
4284: IFFALSE 4306
// begin _x := x ;
4286: LD_ADDR_VAR 0 6
4290: PUSH
4291: LD_VAR 0 4
4295: ST_TO_ADDR
// _y := y ;
4296: LD_ADDR_VAR 0 7
4300: PUSH
4301: LD_VAR 0 5
4305: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4306: LD_ADDR_VAR 0 3
4310: PUSH
4311: LD_INT 1
4313: PPUSH
4314: LD_VAR 0 14
4318: PPUSH
4319: CALL_OW 12
4323: ST_TO_ADDR
// case i of 1 :
4324: LD_VAR 0 3
4328: PUSH
4329: LD_INT 1
4331: DOUBLE
4332: EQUAL
4333: IFTRUE 4337
4335: GO 4354
4337: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4338: LD_VAR 0 1
4342: PPUSH
4343: LD_VAR 0 10
4347: PPUSH
4348: CALL_OW 115
4352: GO 4415
4354: LD_INT 2
4356: DOUBLE
4357: EQUAL
4358: IFTRUE 4362
4360: GO 4384
4362: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4363: LD_VAR 0 1
4367: PPUSH
4368: LD_VAR 0 6
4372: PPUSH
4373: LD_VAR 0 7
4377: PPUSH
4378: CALL_OW 153
4382: GO 4415
4384: LD_INT 3
4386: DOUBLE
4387: EQUAL
4388: IFTRUE 4392
4390: GO 4414
4392: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4393: LD_VAR 0 1
4397: PPUSH
4398: LD_VAR 0 6
4402: PPUSH
4403: LD_VAR 0 7
4407: PPUSH
4408: CALL_OW 154
4412: GO 4415
4414: POP
// end ;
4415: LD_VAR 0 2
4419: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4420: LD_INT 0
4422: PPUSH
4423: PPUSH
4424: PPUSH
4425: PPUSH
4426: PPUSH
4427: PPUSH
// if not unit or not building then
4428: LD_VAR 0 1
4432: NOT
4433: IFTRUE 4442
4435: PUSH
4436: LD_VAR 0 2
4440: NOT
4441: OR
4442: IFFALSE 4446
// exit ;
4444: GO 4604
// x := GetX ( building ) ;
4446: LD_ADDR_VAR 0 5
4450: PUSH
4451: LD_VAR 0 2
4455: PPUSH
4456: CALL_OW 250
4460: ST_TO_ADDR
// y := GetY ( building ) ;
4461: LD_ADDR_VAR 0 6
4465: PUSH
4466: LD_VAR 0 2
4470: PPUSH
4471: CALL_OW 251
4475: ST_TO_ADDR
// for i := 0 to 5 do
4476: LD_ADDR_VAR 0 4
4480: PUSH
4481: DOUBLE
4482: LD_INT 0
4484: DEC
4485: ST_TO_ADDR
4486: LD_INT 5
4488: PUSH
4489: FOR_TO
4490: IFFALSE 4602
// begin _x := ShiftX ( x , i , 3 ) ;
4492: LD_ADDR_VAR 0 7
4496: PUSH
4497: LD_VAR 0 5
4501: PPUSH
4502: LD_VAR 0 4
4506: PPUSH
4507: LD_INT 3
4509: PPUSH
4510: CALL_OW 272
4514: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4515: LD_ADDR_VAR 0 8
4519: PUSH
4520: LD_VAR 0 6
4524: PPUSH
4525: LD_VAR 0 4
4529: PPUSH
4530: LD_INT 3
4532: PPUSH
4533: CALL_OW 273
4537: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4538: LD_VAR 0 7
4542: PPUSH
4543: LD_VAR 0 8
4547: PPUSH
4548: CALL_OW 488
4552: NOT
4553: IFFALSE 4557
// continue ;
4555: GO 4489
// if HexInfo ( _x , _y ) = 0 then
4557: LD_VAR 0 7
4561: PPUSH
4562: LD_VAR 0 8
4566: PPUSH
4567: CALL_OW 428
4571: PUSH
4572: LD_INT 0
4574: EQUAL
4575: IFFALSE 4600
// begin ComMoveXY ( unit , _x , _y ) ;
4577: LD_VAR 0 1
4581: PPUSH
4582: LD_VAR 0 7
4586: PPUSH
4587: LD_VAR 0 8
4591: PPUSH
4592: CALL_OW 111
// exit ;
4596: POP
4597: POP
4598: GO 4604
// end ; end ;
4600: GO 4489
4602: POP
4603: POP
// end ;
4604: LD_VAR 0 3
4608: RET
// export function ScanBase ( side , base_area ) ; begin
4609: LD_INT 0
4611: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4612: LD_ADDR_VAR 0 3
4616: PUSH
4617: LD_VAR 0 2
4621: PPUSH
4622: LD_INT 81
4624: PUSH
4625: LD_VAR 0 1
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: PPUSH
4634: CALL_OW 70
4638: ST_TO_ADDR
// end ;
4639: LD_VAR 0 3
4643: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4644: LD_INT 0
4646: PPUSH
4647: PPUSH
4648: PPUSH
4649: PPUSH
// result := false ;
4650: LD_ADDR_VAR 0 2
4654: PUSH
4655: LD_INT 0
4657: ST_TO_ADDR
// side := GetSide ( unit ) ;
4658: LD_ADDR_VAR 0 3
4662: PUSH
4663: LD_VAR 0 1
4667: PPUSH
4668: CALL_OW 255
4672: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4673: LD_ADDR_VAR 0 4
4677: PUSH
4678: LD_VAR 0 1
4682: PPUSH
4683: CALL_OW 248
4687: ST_TO_ADDR
// case nat of 1 :
4688: LD_VAR 0 4
4692: PUSH
4693: LD_INT 1
4695: DOUBLE
4696: EQUAL
4697: IFTRUE 4701
4699: GO 4712
4701: POP
// tech := tech_lassight ; 2 :
4702: LD_ADDR_VAR 0 5
4706: PUSH
4707: LD_INT 12
4709: ST_TO_ADDR
4710: GO 4751
4712: LD_INT 2
4714: DOUBLE
4715: EQUAL
4716: IFTRUE 4720
4718: GO 4731
4720: POP
// tech := tech_mortar ; 3 :
4721: LD_ADDR_VAR 0 5
4725: PUSH
4726: LD_INT 41
4728: ST_TO_ADDR
4729: GO 4751
4731: LD_INT 3
4733: DOUBLE
4734: EQUAL
4735: IFTRUE 4739
4737: GO 4750
4739: POP
// tech := tech_bazooka ; end ;
4740: LD_ADDR_VAR 0 5
4744: PUSH
4745: LD_INT 44
4747: ST_TO_ADDR
4748: GO 4751
4750: POP
// if Researched ( side , tech ) then
4751: LD_VAR 0 3
4755: PPUSH
4756: LD_VAR 0 5
4760: PPUSH
4761: CALL_OW 325
4765: IFFALSE 4792
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4767: LD_ADDR_VAR 0 2
4771: PUSH
4772: LD_INT 5
4774: PUSH
4775: LD_INT 8
4777: PUSH
4778: LD_INT 9
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: LIST
4785: PUSH
4786: LD_VAR 0 4
4790: ARRAY
4791: ST_TO_ADDR
// end ;
4792: LD_VAR 0 2
4796: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4797: LD_INT 0
4799: PPUSH
4800: PPUSH
4801: PPUSH
// if not mines then
4802: LD_VAR 0 2
4806: NOT
4807: IFFALSE 4811
// exit ;
4809: GO 4955
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4811: LD_ADDR_VAR 0 5
4815: PUSH
4816: LD_INT 81
4818: PUSH
4819: LD_VAR 0 1
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 3
4830: PUSH
4831: LD_INT 21
4833: PUSH
4834: LD_INT 3
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PPUSH
4849: CALL_OW 69
4853: ST_TO_ADDR
// for i in mines do
4854: LD_ADDR_VAR 0 4
4858: PUSH
4859: LD_VAR 0 2
4863: PUSH
4864: FOR_IN
4865: IFFALSE 4953
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4867: LD_VAR 0 4
4871: PUSH
4872: LD_INT 1
4874: ARRAY
4875: PPUSH
4876: LD_VAR 0 4
4880: PUSH
4881: LD_INT 2
4883: ARRAY
4884: PPUSH
4885: CALL_OW 458
4889: NOT
4890: IFFALSE 4894
// continue ;
4892: GO 4864
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4894: LD_VAR 0 4
4898: PUSH
4899: LD_INT 1
4901: ARRAY
4902: PPUSH
4903: LD_VAR 0 4
4907: PUSH
4908: LD_INT 2
4910: ARRAY
4911: PPUSH
4912: CALL_OW 428
4916: PUSH
4917: LD_VAR 0 5
4921: IN
4922: IFFALSE 4951
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4924: LD_VAR 0 4
4928: PUSH
4929: LD_INT 1
4931: ARRAY
4932: PPUSH
4933: LD_VAR 0 4
4937: PUSH
4938: LD_INT 2
4940: ARRAY
4941: PPUSH
4942: LD_VAR 0 1
4946: PPUSH
4947: CALL_OW 456
// end ;
4951: GO 4864
4953: POP
4954: POP
// end ;
4955: LD_VAR 0 3
4959: RET
// export function Count ( array ) ; begin
4960: LD_INT 0
4962: PPUSH
// result := array + 0 ;
4963: LD_ADDR_VAR 0 2
4967: PUSH
4968: LD_VAR 0 1
4972: PUSH
4973: LD_INT 0
4975: PLUS
4976: ST_TO_ADDR
// end ;
4977: LD_VAR 0 2
4981: RET
// export function IsEmpty ( building ) ; begin
4982: LD_INT 0
4984: PPUSH
// if not building then
4985: LD_VAR 0 1
4989: NOT
4990: IFFALSE 4994
// exit ;
4992: GO 5037
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4994: LD_ADDR_VAR 0 2
4998: PUSH
4999: LD_VAR 0 1
5003: PUSH
5004: LD_INT 22
5006: PUSH
5007: LD_VAR 0 1
5011: PPUSH
5012: CALL_OW 255
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 58
5023: PUSH
5024: EMPTY
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PPUSH
5031: CALL_OW 69
5035: IN
5036: ST_TO_ADDR
// end ;
5037: LD_VAR 0 2
5041: RET
// export function IsNotFull ( building ) ; var places ; begin
5042: LD_INT 0
5044: PPUSH
5045: PPUSH
// if not building then
5046: LD_VAR 0 1
5050: NOT
5051: IFFALSE 5055
// exit ;
5053: GO 5083
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: LD_VAR 0 1
5064: PPUSH
5065: LD_INT 3
5067: PUSH
5068: LD_INT 62
5070: PUSH
5071: EMPTY
5072: LIST
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: PPUSH
5078: CALL_OW 72
5082: ST_TO_ADDR
// end ;
5083: LD_VAR 0 2
5087: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5088: LD_INT 0
5090: PPUSH
5091: PPUSH
5092: PPUSH
5093: PPUSH
// tmp := [ ] ;
5094: LD_ADDR_VAR 0 3
5098: PUSH
5099: EMPTY
5100: ST_TO_ADDR
// list := [ ] ;
5101: LD_ADDR_VAR 0 5
5105: PUSH
5106: EMPTY
5107: ST_TO_ADDR
// for i = 16 to 25 do
5108: LD_ADDR_VAR 0 4
5112: PUSH
5113: DOUBLE
5114: LD_INT 16
5116: DEC
5117: ST_TO_ADDR
5118: LD_INT 25
5120: PUSH
5121: FOR_TO
5122: IFFALSE 5195
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5124: LD_ADDR_VAR 0 3
5128: PUSH
5129: LD_VAR 0 3
5133: PUSH
5134: LD_INT 22
5136: PUSH
5137: LD_VAR 0 1
5141: PPUSH
5142: CALL_OW 255
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 91
5153: PUSH
5154: LD_VAR 0 1
5158: PUSH
5159: LD_INT 6
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 30
5169: PUSH
5170: LD_VAR 0 4
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: PUSH
5184: EMPTY
5185: LIST
5186: PPUSH
5187: CALL_OW 69
5191: ADD
5192: ST_TO_ADDR
5193: GO 5121
5195: POP
5196: POP
// for i = 1 to tmp do
5197: LD_ADDR_VAR 0 4
5201: PUSH
5202: DOUBLE
5203: LD_INT 1
5205: DEC
5206: ST_TO_ADDR
5207: LD_VAR 0 3
5211: PUSH
5212: FOR_TO
5213: IFFALSE 5301
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5215: LD_ADDR_VAR 0 5
5219: PUSH
5220: LD_VAR 0 5
5224: PUSH
5225: LD_VAR 0 3
5229: PUSH
5230: LD_VAR 0 4
5234: ARRAY
5235: PPUSH
5236: CALL_OW 266
5240: PUSH
5241: LD_VAR 0 3
5245: PUSH
5246: LD_VAR 0 4
5250: ARRAY
5251: PPUSH
5252: CALL_OW 250
5256: PUSH
5257: LD_VAR 0 3
5261: PUSH
5262: LD_VAR 0 4
5266: ARRAY
5267: PPUSH
5268: CALL_OW 251
5272: PUSH
5273: LD_VAR 0 3
5277: PUSH
5278: LD_VAR 0 4
5282: ARRAY
5283: PPUSH
5284: CALL_OW 254
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: PUSH
5295: EMPTY
5296: LIST
5297: ADD
5298: ST_TO_ADDR
5299: GO 5212
5301: POP
5302: POP
// result := list ;
5303: LD_ADDR_VAR 0 2
5307: PUSH
5308: LD_VAR 0 5
5312: ST_TO_ADDR
// end ;
5313: LD_VAR 0 2
5317: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5318: LD_INT 0
5320: PPUSH
5321: PPUSH
5322: PPUSH
5323: PPUSH
5324: PPUSH
5325: PPUSH
5326: PPUSH
// if not factory then
5327: LD_VAR 0 1
5331: NOT
5332: IFFALSE 5336
// exit ;
5334: GO 5939
// if control = control_apeman then
5336: LD_VAR 0 4
5340: PUSH
5341: LD_INT 5
5343: EQUAL
5344: IFFALSE 5453
// begin tmp := UnitsInside ( factory ) ;
5346: LD_ADDR_VAR 0 8
5350: PUSH
5351: LD_VAR 0 1
5355: PPUSH
5356: CALL_OW 313
5360: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5361: LD_VAR 0 8
5365: PPUSH
5366: LD_INT 25
5368: PUSH
5369: LD_INT 12
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: PPUSH
5376: CALL_OW 72
5380: NOT
5381: IFFALSE 5391
// control := control_manual ;
5383: LD_ADDR_VAR 0 4
5387: PUSH
5388: LD_INT 1
5390: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5391: LD_ADDR_VAR 0 8
5395: PUSH
5396: LD_VAR 0 1
5400: PPUSH
5401: CALL 5088 0 1
5405: ST_TO_ADDR
// if tmp then
5406: LD_VAR 0 8
5410: IFFALSE 5453
// begin for i in tmp do
5412: LD_ADDR_VAR 0 7
5416: PUSH
5417: LD_VAR 0 8
5421: PUSH
5422: FOR_IN
5423: IFFALSE 5451
// if i [ 1 ] = b_ext_radio then
5425: LD_VAR 0 7
5429: PUSH
5430: LD_INT 1
5432: ARRAY
5433: PUSH
5434: LD_INT 22
5436: EQUAL
5437: IFFALSE 5449
// begin control := control_remote ;
5439: LD_ADDR_VAR 0 4
5443: PUSH
5444: LD_INT 2
5446: ST_TO_ADDR
// break ;
5447: GO 5451
// end ;
5449: GO 5422
5451: POP
5452: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5453: LD_VAR 0 1
5457: PPUSH
5458: LD_VAR 0 2
5462: PPUSH
5463: LD_VAR 0 3
5467: PPUSH
5468: LD_VAR 0 4
5472: PPUSH
5473: LD_VAR 0 5
5477: PPUSH
5478: CALL_OW 448
5482: IFFALSE 5517
// begin result := [ chassis , engine , control , weapon ] ;
5484: LD_ADDR_VAR 0 6
5488: PUSH
5489: LD_VAR 0 2
5493: PUSH
5494: LD_VAR 0 3
5498: PUSH
5499: LD_VAR 0 4
5503: PUSH
5504: LD_VAR 0 5
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: ST_TO_ADDR
// exit ;
5515: GO 5939
// end ; _chassis := AvailableChassisList ( factory ) ;
5517: LD_ADDR_VAR 0 9
5521: PUSH
5522: LD_VAR 0 1
5526: PPUSH
5527: CALL_OW 475
5531: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5532: LD_ADDR_VAR 0 11
5536: PUSH
5537: LD_VAR 0 1
5541: PPUSH
5542: CALL_OW 476
5546: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5547: LD_ADDR_VAR 0 12
5551: PUSH
5552: LD_VAR 0 1
5556: PPUSH
5557: CALL_OW 477
5561: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5562: LD_ADDR_VAR 0 10
5566: PUSH
5567: LD_VAR 0 1
5571: PPUSH
5572: CALL_OW 478
5576: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5577: LD_VAR 0 9
5581: NOT
5582: IFTRUE 5591
5584: PUSH
5585: LD_VAR 0 11
5589: NOT
5590: OR
5591: IFTRUE 5600
5593: PUSH
5594: LD_VAR 0 12
5598: NOT
5599: OR
5600: IFTRUE 5609
5602: PUSH
5603: LD_VAR 0 10
5607: NOT
5608: OR
5609: IFFALSE 5644
// begin result := [ chassis , engine , control , weapon ] ;
5611: LD_ADDR_VAR 0 6
5615: PUSH
5616: LD_VAR 0 2
5620: PUSH
5621: LD_VAR 0 3
5625: PUSH
5626: LD_VAR 0 4
5630: PUSH
5631: LD_VAR 0 5
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: ST_TO_ADDR
// exit ;
5642: GO 5939
// end ; if not chassis in _chassis then
5644: LD_VAR 0 2
5648: PUSH
5649: LD_VAR 0 9
5653: IN
5654: NOT
5655: IFFALSE 5681
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5657: LD_ADDR_VAR 0 2
5661: PUSH
5662: LD_VAR 0 9
5666: PUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_VAR 0 9
5674: PPUSH
5675: CALL_OW 12
5679: ARRAY
5680: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5681: LD_VAR 0 2
5685: PPUSH
5686: LD_VAR 0 3
5690: PPUSH
5691: CALL 5944 0 2
5695: NOT
5696: IFFALSE 5757
// repeat engine := _engine [ 1 ] ;
5698: LD_ADDR_VAR 0 3
5702: PUSH
5703: LD_VAR 0 11
5707: PUSH
5708: LD_INT 1
5710: ARRAY
5711: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5712: LD_ADDR_VAR 0 11
5716: PUSH
5717: LD_VAR 0 11
5721: PPUSH
5722: LD_INT 1
5724: PPUSH
5725: CALL_OW 3
5729: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5730: LD_VAR 0 2
5734: PPUSH
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL 5944 0 2
5744: IFTRUE 5755
5746: PUSH
5747: LD_VAR 0 11
5751: PUSH
5752: EMPTY
5753: EQUAL
5754: OR
5755: IFFALSE 5698
// if not control in _control then
5757: LD_VAR 0 4
5761: PUSH
5762: LD_VAR 0 12
5766: IN
5767: NOT
5768: IFFALSE 5794
// control := _control [ rand ( 1 , _control ) ] ;
5770: LD_ADDR_VAR 0 4
5774: PUSH
5775: LD_VAR 0 12
5779: PUSH
5780: LD_INT 1
5782: PPUSH
5783: LD_VAR 0 12
5787: PPUSH
5788: CALL_OW 12
5792: ARRAY
5793: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5794: LD_VAR 0 2
5798: PPUSH
5799: LD_VAR 0 5
5803: PPUSH
5804: CALL 6166 0 2
5808: NOT
5809: IFFALSE 5870
// repeat weapon := _weapon [ 1 ] ;
5811: LD_ADDR_VAR 0 5
5815: PUSH
5816: LD_VAR 0 10
5820: PUSH
5821: LD_INT 1
5823: ARRAY
5824: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5825: LD_ADDR_VAR 0 10
5829: PUSH
5830: LD_VAR 0 10
5834: PPUSH
5835: LD_INT 1
5837: PPUSH
5838: CALL_OW 3
5842: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5843: LD_VAR 0 2
5847: PPUSH
5848: LD_VAR 0 5
5852: PPUSH
5853: CALL 6166 0 2
5857: IFTRUE 5868
5859: PUSH
5860: LD_VAR 0 10
5864: PUSH
5865: EMPTY
5866: EQUAL
5867: OR
5868: IFFALSE 5811
// result := [ ] ;
5870: LD_ADDR_VAR 0 6
5874: PUSH
5875: EMPTY
5876: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5877: LD_VAR 0 1
5881: PPUSH
5882: LD_VAR 0 2
5886: PPUSH
5887: LD_VAR 0 3
5891: PPUSH
5892: LD_VAR 0 4
5896: PPUSH
5897: LD_VAR 0 5
5901: PPUSH
5902: CALL_OW 448
5906: IFFALSE 5939
// result := [ chassis , engine , control , weapon ] ;
5908: LD_ADDR_VAR 0 6
5912: PUSH
5913: LD_VAR 0 2
5917: PUSH
5918: LD_VAR 0 3
5922: PUSH
5923: LD_VAR 0 4
5927: PUSH
5928: LD_VAR 0 5
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: ST_TO_ADDR
// end ;
5939: LD_VAR 0 6
5943: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5944: LD_INT 0
5946: PPUSH
// if not chassis or not engine then
5947: LD_VAR 0 1
5951: NOT
5952: IFTRUE 5961
5954: PUSH
5955: LD_VAR 0 2
5959: NOT
5960: OR
5961: IFFALSE 5965
// exit ;
5963: GO 6161
// case engine of engine_solar :
5965: LD_VAR 0 2
5969: PUSH
5970: LD_INT 2
5972: DOUBLE
5973: EQUAL
5974: IFTRUE 5978
5976: GO 6016
5978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5979: LD_ADDR_VAR 0 3
5983: PUSH
5984: LD_INT 11
5986: PUSH
5987: LD_INT 12
5989: PUSH
5990: LD_INT 13
5992: PUSH
5993: LD_INT 14
5995: PUSH
5996: LD_INT 1
5998: PUSH
5999: LD_INT 2
6001: PUSH
6002: LD_INT 3
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: ST_TO_ADDR
6014: GO 6145
6016: LD_INT 1
6018: DOUBLE
6019: EQUAL
6020: IFTRUE 6024
6022: GO 6086
6024: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6025: LD_ADDR_VAR 0 3
6029: PUSH
6030: LD_INT 11
6032: PUSH
6033: LD_INT 12
6035: PUSH
6036: LD_INT 13
6038: PUSH
6039: LD_INT 14
6041: PUSH
6042: LD_INT 1
6044: PUSH
6045: LD_INT 2
6047: PUSH
6048: LD_INT 3
6050: PUSH
6051: LD_INT 4
6053: PUSH
6054: LD_INT 5
6056: PUSH
6057: LD_INT 21
6059: PUSH
6060: LD_INT 23
6062: PUSH
6063: LD_INT 22
6065: PUSH
6066: LD_INT 24
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: ST_TO_ADDR
6084: GO 6145
6086: LD_INT 3
6088: DOUBLE
6089: EQUAL
6090: IFTRUE 6094
6092: GO 6144
6094: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6095: LD_ADDR_VAR 0 3
6099: PUSH
6100: LD_INT 13
6102: PUSH
6103: LD_INT 14
6105: PUSH
6106: LD_INT 2
6108: PUSH
6109: LD_INT 3
6111: PUSH
6112: LD_INT 4
6114: PUSH
6115: LD_INT 5
6117: PUSH
6118: LD_INT 21
6120: PUSH
6121: LD_INT 22
6123: PUSH
6124: LD_INT 23
6126: PUSH
6127: LD_INT 24
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: ST_TO_ADDR
6142: GO 6145
6144: POP
// result := ( chassis in result ) ;
6145: LD_ADDR_VAR 0 3
6149: PUSH
6150: LD_VAR 0 1
6154: PUSH
6155: LD_VAR 0 3
6159: IN
6160: ST_TO_ADDR
// end ;
6161: LD_VAR 0 3
6165: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6166: LD_INT 0
6168: PPUSH
// if not chassis or not weapon then
6169: LD_VAR 0 1
6173: NOT
6174: IFTRUE 6183
6176: PUSH
6177: LD_VAR 0 2
6181: NOT
6182: OR
6183: IFFALSE 6187
// exit ;
6185: GO 7247
// case weapon of us_machine_gun :
6187: LD_VAR 0 2
6191: PUSH
6192: LD_INT 2
6194: DOUBLE
6195: EQUAL
6196: IFTRUE 6200
6198: GO 6230
6200: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6201: LD_ADDR_VAR 0 3
6205: PUSH
6206: LD_INT 1
6208: PUSH
6209: LD_INT 2
6211: PUSH
6212: LD_INT 3
6214: PUSH
6215: LD_INT 4
6217: PUSH
6218: LD_INT 5
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: ST_TO_ADDR
6228: GO 7231
6230: LD_INT 3
6232: DOUBLE
6233: EQUAL
6234: IFTRUE 6238
6236: GO 6268
6238: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6239: LD_ADDR_VAR 0 3
6243: PUSH
6244: LD_INT 1
6246: PUSH
6247: LD_INT 2
6249: PUSH
6250: LD_INT 3
6252: PUSH
6253: LD_INT 4
6255: PUSH
6256: LD_INT 5
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: ST_TO_ADDR
6266: GO 7231
6268: LD_INT 11
6270: DOUBLE
6271: EQUAL
6272: IFTRUE 6276
6274: GO 6306
6276: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6277: LD_ADDR_VAR 0 3
6281: PUSH
6282: LD_INT 1
6284: PUSH
6285: LD_INT 2
6287: PUSH
6288: LD_INT 3
6290: PUSH
6291: LD_INT 4
6293: PUSH
6294: LD_INT 5
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: ST_TO_ADDR
6304: GO 7231
6306: LD_INT 4
6308: DOUBLE
6309: EQUAL
6310: IFTRUE 6314
6312: GO 6340
6314: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6315: LD_ADDR_VAR 0 3
6319: PUSH
6320: LD_INT 2
6322: PUSH
6323: LD_INT 3
6325: PUSH
6326: LD_INT 4
6328: PUSH
6329: LD_INT 5
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: ST_TO_ADDR
6338: GO 7231
6340: LD_INT 5
6342: DOUBLE
6343: EQUAL
6344: IFTRUE 6348
6346: GO 6374
6348: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6349: LD_ADDR_VAR 0 3
6353: PUSH
6354: LD_INT 2
6356: PUSH
6357: LD_INT 3
6359: PUSH
6360: LD_INT 4
6362: PUSH
6363: LD_INT 5
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: ST_TO_ADDR
6372: GO 7231
6374: LD_INT 9
6376: DOUBLE
6377: EQUAL
6378: IFTRUE 6382
6380: GO 6408
6382: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6383: LD_ADDR_VAR 0 3
6387: PUSH
6388: LD_INT 2
6390: PUSH
6391: LD_INT 3
6393: PUSH
6394: LD_INT 4
6396: PUSH
6397: LD_INT 5
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: ST_TO_ADDR
6406: GO 7231
6408: LD_INT 7
6410: DOUBLE
6411: EQUAL
6412: IFTRUE 6416
6414: GO 6442
6416: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6417: LD_ADDR_VAR 0 3
6421: PUSH
6422: LD_INT 2
6424: PUSH
6425: LD_INT 3
6427: PUSH
6428: LD_INT 4
6430: PUSH
6431: LD_INT 5
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: ST_TO_ADDR
6440: GO 7231
6442: LD_INT 12
6444: DOUBLE
6445: EQUAL
6446: IFTRUE 6450
6448: GO 6476
6450: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6451: LD_ADDR_VAR 0 3
6455: PUSH
6456: LD_INT 2
6458: PUSH
6459: LD_INT 3
6461: PUSH
6462: LD_INT 4
6464: PUSH
6465: LD_INT 5
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: ST_TO_ADDR
6474: GO 7231
6476: LD_INT 13
6478: DOUBLE
6479: EQUAL
6480: IFTRUE 6484
6482: GO 6510
6484: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6485: LD_ADDR_VAR 0 3
6489: PUSH
6490: LD_INT 2
6492: PUSH
6493: LD_INT 3
6495: PUSH
6496: LD_INT 4
6498: PUSH
6499: LD_INT 5
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: ST_TO_ADDR
6508: GO 7231
6510: LD_INT 14
6512: DOUBLE
6513: EQUAL
6514: IFTRUE 6518
6516: GO 6536
6518: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6519: LD_ADDR_VAR 0 3
6523: PUSH
6524: LD_INT 4
6526: PUSH
6527: LD_INT 5
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: ST_TO_ADDR
6534: GO 7231
6536: LD_INT 6
6538: DOUBLE
6539: EQUAL
6540: IFTRUE 6544
6542: GO 6562
6544: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6545: LD_ADDR_VAR 0 3
6549: PUSH
6550: LD_INT 4
6552: PUSH
6553: LD_INT 5
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: ST_TO_ADDR
6560: GO 7231
6562: LD_INT 10
6564: DOUBLE
6565: EQUAL
6566: IFTRUE 6570
6568: GO 6588
6570: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6571: LD_ADDR_VAR 0 3
6575: PUSH
6576: LD_INT 4
6578: PUSH
6579: LD_INT 5
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: ST_TO_ADDR
6586: GO 7231
6588: LD_INT 22
6590: DOUBLE
6591: EQUAL
6592: IFTRUE 6596
6594: GO 6622
6596: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6597: LD_ADDR_VAR 0 3
6601: PUSH
6602: LD_INT 11
6604: PUSH
6605: LD_INT 12
6607: PUSH
6608: LD_INT 13
6610: PUSH
6611: LD_INT 14
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: ST_TO_ADDR
6620: GO 7231
6622: LD_INT 23
6624: DOUBLE
6625: EQUAL
6626: IFTRUE 6630
6628: GO 6656
6630: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6631: LD_ADDR_VAR 0 3
6635: PUSH
6636: LD_INT 11
6638: PUSH
6639: LD_INT 12
6641: PUSH
6642: LD_INT 13
6644: PUSH
6645: LD_INT 14
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: ST_TO_ADDR
6654: GO 7231
6656: LD_INT 24
6658: DOUBLE
6659: EQUAL
6660: IFTRUE 6664
6662: GO 6690
6664: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6665: LD_ADDR_VAR 0 3
6669: PUSH
6670: LD_INT 11
6672: PUSH
6673: LD_INT 12
6675: PUSH
6676: LD_INT 13
6678: PUSH
6679: LD_INT 14
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: ST_TO_ADDR
6688: GO 7231
6690: LD_INT 30
6692: DOUBLE
6693: EQUAL
6694: IFTRUE 6698
6696: GO 6724
6698: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6699: LD_ADDR_VAR 0 3
6703: PUSH
6704: LD_INT 11
6706: PUSH
6707: LD_INT 12
6709: PUSH
6710: LD_INT 13
6712: PUSH
6713: LD_INT 14
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: ST_TO_ADDR
6722: GO 7231
6724: LD_INT 25
6726: DOUBLE
6727: EQUAL
6728: IFTRUE 6732
6730: GO 6750
6732: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6733: LD_ADDR_VAR 0 3
6737: PUSH
6738: LD_INT 13
6740: PUSH
6741: LD_INT 14
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: ST_TO_ADDR
6748: GO 7231
6750: LD_INT 27
6752: DOUBLE
6753: EQUAL
6754: IFTRUE 6758
6756: GO 6776
6758: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6759: LD_ADDR_VAR 0 3
6763: PUSH
6764: LD_INT 13
6766: PUSH
6767: LD_INT 14
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: ST_TO_ADDR
6774: GO 7231
6776: LD_INT 92
6778: DOUBLE
6779: EQUAL
6780: IFTRUE 6784
6782: GO 6810
6784: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6785: LD_ADDR_VAR 0 3
6789: PUSH
6790: LD_INT 11
6792: PUSH
6793: LD_INT 12
6795: PUSH
6796: LD_INT 13
6798: PUSH
6799: LD_INT 14
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: ST_TO_ADDR
6808: GO 7231
6810: LD_INT 28
6812: DOUBLE
6813: EQUAL
6814: IFTRUE 6818
6816: GO 6836
6818: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6819: LD_ADDR_VAR 0 3
6823: PUSH
6824: LD_INT 13
6826: PUSH
6827: LD_INT 14
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: ST_TO_ADDR
6834: GO 7231
6836: LD_INT 29
6838: DOUBLE
6839: EQUAL
6840: IFTRUE 6844
6842: GO 6862
6844: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6845: LD_ADDR_VAR 0 3
6849: PUSH
6850: LD_INT 13
6852: PUSH
6853: LD_INT 14
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: ST_TO_ADDR
6860: GO 7231
6862: LD_INT 31
6864: DOUBLE
6865: EQUAL
6866: IFTRUE 6870
6868: GO 6888
6870: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6871: LD_ADDR_VAR 0 3
6875: PUSH
6876: LD_INT 13
6878: PUSH
6879: LD_INT 14
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: ST_TO_ADDR
6886: GO 7231
6888: LD_INT 26
6890: DOUBLE
6891: EQUAL
6892: IFTRUE 6896
6894: GO 6914
6896: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6897: LD_ADDR_VAR 0 3
6901: PUSH
6902: LD_INT 13
6904: PUSH
6905: LD_INT 14
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: ST_TO_ADDR
6912: GO 7231
6914: LD_INT 42
6916: DOUBLE
6917: EQUAL
6918: IFTRUE 6922
6920: GO 6948
6922: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6923: LD_ADDR_VAR 0 3
6927: PUSH
6928: LD_INT 21
6930: PUSH
6931: LD_INT 22
6933: PUSH
6934: LD_INT 23
6936: PUSH
6937: LD_INT 24
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
6946: GO 7231
6948: LD_INT 43
6950: DOUBLE
6951: EQUAL
6952: IFTRUE 6956
6954: GO 6982
6956: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6957: LD_ADDR_VAR 0 3
6961: PUSH
6962: LD_INT 21
6964: PUSH
6965: LD_INT 22
6967: PUSH
6968: LD_INT 23
6970: PUSH
6971: LD_INT 24
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: ST_TO_ADDR
6980: GO 7231
6982: LD_INT 44
6984: DOUBLE
6985: EQUAL
6986: IFTRUE 6990
6988: GO 7016
6990: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6991: LD_ADDR_VAR 0 3
6995: PUSH
6996: LD_INT 21
6998: PUSH
6999: LD_INT 22
7001: PUSH
7002: LD_INT 23
7004: PUSH
7005: LD_INT 24
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: ST_TO_ADDR
7014: GO 7231
7016: LD_INT 45
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7050
7024: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7025: LD_ADDR_VAR 0 3
7029: PUSH
7030: LD_INT 21
7032: PUSH
7033: LD_INT 22
7035: PUSH
7036: LD_INT 23
7038: PUSH
7039: LD_INT 24
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: ST_TO_ADDR
7048: GO 7231
7050: LD_INT 49
7052: DOUBLE
7053: EQUAL
7054: IFTRUE 7058
7056: GO 7084
7058: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7059: LD_ADDR_VAR 0 3
7063: PUSH
7064: LD_INT 21
7066: PUSH
7067: LD_INT 22
7069: PUSH
7070: LD_INT 23
7072: PUSH
7073: LD_INT 24
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: ST_TO_ADDR
7082: GO 7231
7084: LD_INT 51
7086: DOUBLE
7087: EQUAL
7088: IFTRUE 7092
7090: GO 7118
7092: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7093: LD_ADDR_VAR 0 3
7097: PUSH
7098: LD_INT 21
7100: PUSH
7101: LD_INT 22
7103: PUSH
7104: LD_INT 23
7106: PUSH
7107: LD_INT 24
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: ST_TO_ADDR
7116: GO 7231
7118: LD_INT 52
7120: DOUBLE
7121: EQUAL
7122: IFTRUE 7126
7124: GO 7152
7126: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7127: LD_ADDR_VAR 0 3
7131: PUSH
7132: LD_INT 21
7134: PUSH
7135: LD_INT 22
7137: PUSH
7138: LD_INT 23
7140: PUSH
7141: LD_INT 24
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: ST_TO_ADDR
7150: GO 7231
7152: LD_INT 53
7154: DOUBLE
7155: EQUAL
7156: IFTRUE 7160
7158: GO 7178
7160: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7161: LD_ADDR_VAR 0 3
7165: PUSH
7166: LD_INT 23
7168: PUSH
7169: LD_INT 24
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: ST_TO_ADDR
7176: GO 7231
7178: LD_INT 46
7180: DOUBLE
7181: EQUAL
7182: IFTRUE 7186
7184: GO 7204
7186: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7187: LD_ADDR_VAR 0 3
7191: PUSH
7192: LD_INT 23
7194: PUSH
7195: LD_INT 24
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: ST_TO_ADDR
7202: GO 7231
7204: LD_INT 47
7206: DOUBLE
7207: EQUAL
7208: IFTRUE 7212
7210: GO 7230
7212: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7213: LD_ADDR_VAR 0 3
7217: PUSH
7218: LD_INT 23
7220: PUSH
7221: LD_INT 24
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: ST_TO_ADDR
7228: GO 7231
7230: POP
// result := ( chassis in result ) ;
7231: LD_ADDR_VAR 0 3
7235: PUSH
7236: LD_VAR 0 1
7240: PUSH
7241: LD_VAR 0 3
7245: IN
7246: ST_TO_ADDR
// end ;
7247: LD_VAR 0 3
7251: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7252: LD_INT 0
7254: PPUSH
7255: PPUSH
7256: PPUSH
7257: PPUSH
7258: PPUSH
7259: PPUSH
7260: PPUSH
// result := array ;
7261: LD_ADDR_VAR 0 5
7265: PUSH
7266: LD_VAR 0 1
7270: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7271: LD_VAR 0 1
7275: NOT
7276: IFTRUE 7285
7278: PUSH
7279: LD_VAR 0 2
7283: NOT
7284: OR
7285: IFTRUE 7294
7287: PUSH
7288: LD_VAR 0 3
7292: NOT
7293: OR
7294: IFTRUE 7308
7296: PUSH
7297: LD_VAR 0 2
7301: PUSH
7302: LD_VAR 0 1
7306: GREATER
7307: OR
7308: IFTRUE 7322
7310: PUSH
7311: LD_VAR 0 3
7315: PUSH
7316: LD_VAR 0 1
7320: GREATER
7321: OR
7322: IFFALSE 7326
// exit ;
7324: GO 7622
// if direction then
7326: LD_VAR 0 4
7330: IFFALSE 7394
// begin d := 1 ;
7332: LD_ADDR_VAR 0 9
7336: PUSH
7337: LD_INT 1
7339: ST_TO_ADDR
// if i_from > i_to then
7340: LD_VAR 0 2
7344: PUSH
7345: LD_VAR 0 3
7349: GREATER
7350: IFFALSE 7376
// length := ( array - i_from ) + i_to else
7352: LD_ADDR_VAR 0 11
7356: PUSH
7357: LD_VAR 0 1
7361: PUSH
7362: LD_VAR 0 2
7366: MINUS
7367: PUSH
7368: LD_VAR 0 3
7372: PLUS
7373: ST_TO_ADDR
7374: GO 7392
// length := i_to - i_from ;
7376: LD_ADDR_VAR 0 11
7380: PUSH
7381: LD_VAR 0 3
7385: PUSH
7386: LD_VAR 0 2
7390: MINUS
7391: ST_TO_ADDR
// end else
7392: GO 7455
// begin d := - 1 ;
7394: LD_ADDR_VAR 0 9
7398: PUSH
7399: LD_INT 1
7401: NEG
7402: ST_TO_ADDR
// if i_from > i_to then
7403: LD_VAR 0 2
7407: PUSH
7408: LD_VAR 0 3
7412: GREATER
7413: IFFALSE 7433
// length := i_from - i_to else
7415: LD_ADDR_VAR 0 11
7419: PUSH
7420: LD_VAR 0 2
7424: PUSH
7425: LD_VAR 0 3
7429: MINUS
7430: ST_TO_ADDR
7431: GO 7455
// length := ( array - i_to ) + i_from ;
7433: LD_ADDR_VAR 0 11
7437: PUSH
7438: LD_VAR 0 1
7442: PUSH
7443: LD_VAR 0 3
7447: MINUS
7448: PUSH
7449: LD_VAR 0 2
7453: PLUS
7454: ST_TO_ADDR
// end ; if not length then
7455: LD_VAR 0 11
7459: NOT
7460: IFFALSE 7464
// exit ;
7462: GO 7622
// tmp := array ;
7464: LD_ADDR_VAR 0 10
7468: PUSH
7469: LD_VAR 0 1
7473: ST_TO_ADDR
// for i = 1 to length do
7474: LD_ADDR_VAR 0 6
7478: PUSH
7479: DOUBLE
7480: LD_INT 1
7482: DEC
7483: ST_TO_ADDR
7484: LD_VAR 0 11
7488: PUSH
7489: FOR_TO
7490: IFFALSE 7610
// begin for j = 1 to array do
7492: LD_ADDR_VAR 0 7
7496: PUSH
7497: DOUBLE
7498: LD_INT 1
7500: DEC
7501: ST_TO_ADDR
7502: LD_VAR 0 1
7506: PUSH
7507: FOR_TO
7508: IFFALSE 7596
// begin k := j + d ;
7510: LD_ADDR_VAR 0 8
7514: PUSH
7515: LD_VAR 0 7
7519: PUSH
7520: LD_VAR 0 9
7524: PLUS
7525: ST_TO_ADDR
// if k > array then
7526: LD_VAR 0 8
7530: PUSH
7531: LD_VAR 0 1
7535: GREATER
7536: IFFALSE 7546
// k := 1 ;
7538: LD_ADDR_VAR 0 8
7542: PUSH
7543: LD_INT 1
7545: ST_TO_ADDR
// if not k then
7546: LD_VAR 0 8
7550: NOT
7551: IFFALSE 7563
// k := array ;
7553: LD_ADDR_VAR 0 8
7557: PUSH
7558: LD_VAR 0 1
7562: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7563: LD_ADDR_VAR 0 10
7567: PUSH
7568: LD_VAR 0 10
7572: PPUSH
7573: LD_VAR 0 8
7577: PPUSH
7578: LD_VAR 0 1
7582: PUSH
7583: LD_VAR 0 7
7587: ARRAY
7588: PPUSH
7589: CALL_OW 1
7593: ST_TO_ADDR
// end ;
7594: GO 7507
7596: POP
7597: POP
// array := tmp ;
7598: LD_ADDR_VAR 0 1
7602: PUSH
7603: LD_VAR 0 10
7607: ST_TO_ADDR
// end ;
7608: GO 7489
7610: POP
7611: POP
// result := array ;
7612: LD_ADDR_VAR 0 5
7616: PUSH
7617: LD_VAR 0 1
7621: ST_TO_ADDR
// end ;
7622: LD_VAR 0 5
7626: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7627: LD_INT 0
7629: PPUSH
7630: PPUSH
// result := 0 ;
7631: LD_ADDR_VAR 0 3
7635: PUSH
7636: LD_INT 0
7638: ST_TO_ADDR
// if not array or not value in array then
7639: LD_VAR 0 1
7643: NOT
7644: IFTRUE 7659
7646: PUSH
7647: LD_VAR 0 2
7651: PUSH
7652: LD_VAR 0 1
7656: IN
7657: NOT
7658: OR
7659: IFFALSE 7663
// exit ;
7661: GO 7717
// for i = 1 to array do
7663: LD_ADDR_VAR 0 4
7667: PUSH
7668: DOUBLE
7669: LD_INT 1
7671: DEC
7672: ST_TO_ADDR
7673: LD_VAR 0 1
7677: PUSH
7678: FOR_TO
7679: IFFALSE 7715
// if value = array [ i ] then
7681: LD_VAR 0 2
7685: PUSH
7686: LD_VAR 0 1
7690: PUSH
7691: LD_VAR 0 4
7695: ARRAY
7696: EQUAL
7697: IFFALSE 7713
// begin result := i ;
7699: LD_ADDR_VAR 0 3
7703: PUSH
7704: LD_VAR 0 4
7708: ST_TO_ADDR
// exit ;
7709: POP
7710: POP
7711: GO 7717
// end ;
7713: GO 7678
7715: POP
7716: POP
// end ;
7717: LD_VAR 0 3
7721: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7722: LD_INT 0
7724: PPUSH
// vc_chassis := chassis ;
7725: LD_ADDR_OWVAR 37
7729: PUSH
7730: LD_VAR 0 1
7734: ST_TO_ADDR
// vc_engine := engine ;
7735: LD_ADDR_OWVAR 39
7739: PUSH
7740: LD_VAR 0 2
7744: ST_TO_ADDR
// vc_control := control ;
7745: LD_ADDR_OWVAR 38
7749: PUSH
7750: LD_VAR 0 3
7754: ST_TO_ADDR
// vc_weapon := weapon ;
7755: LD_ADDR_OWVAR 40
7759: PUSH
7760: LD_VAR 0 4
7764: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7765: LD_ADDR_OWVAR 41
7769: PUSH
7770: LD_VAR 0 5
7774: ST_TO_ADDR
// end ;
7775: LD_VAR 0 6
7779: RET
// export function WantPlant ( unit ) ; var task ; begin
7780: LD_INT 0
7782: PPUSH
7783: PPUSH
// result := false ;
7784: LD_ADDR_VAR 0 2
7788: PUSH
7789: LD_INT 0
7791: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7792: LD_ADDR_VAR 0 3
7796: PUSH
7797: LD_VAR 0 1
7801: PPUSH
7802: CALL_OW 437
7806: ST_TO_ADDR
// if task then
7807: LD_VAR 0 3
7811: IFFALSE 7839
// if task [ 1 ] [ 1 ] = p then
7813: LD_VAR 0 3
7817: PUSH
7818: LD_INT 1
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PUSH
7826: LD_STRING p
7828: EQUAL
7829: IFFALSE 7839
// result := true ;
7831: LD_ADDR_VAR 0 2
7835: PUSH
7836: LD_INT 1
7838: ST_TO_ADDR
// end ;
7839: LD_VAR 0 2
7843: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7844: LD_INT 0
7846: PPUSH
7847: PPUSH
7848: PPUSH
7849: PPUSH
// if pos < 1 then
7850: LD_VAR 0 2
7854: PUSH
7855: LD_INT 1
7857: LESS
7858: IFFALSE 7862
// exit ;
7860: GO 8165
// if pos = 1 then
7862: LD_VAR 0 2
7866: PUSH
7867: LD_INT 1
7869: EQUAL
7870: IFFALSE 7903
// result := Replace ( arr , pos [ 1 ] , value ) else
7872: LD_ADDR_VAR 0 4
7876: PUSH
7877: LD_VAR 0 1
7881: PPUSH
7882: LD_VAR 0 2
7886: PUSH
7887: LD_INT 1
7889: ARRAY
7890: PPUSH
7891: LD_VAR 0 3
7895: PPUSH
7896: CALL_OW 1
7900: ST_TO_ADDR
7901: GO 8165
// begin tmp := arr ;
7903: LD_ADDR_VAR 0 6
7907: PUSH
7908: LD_VAR 0 1
7912: ST_TO_ADDR
// s_arr := [ tmp ] ;
7913: LD_ADDR_VAR 0 7
7917: PUSH
7918: LD_VAR 0 6
7922: PUSH
7923: EMPTY
7924: LIST
7925: ST_TO_ADDR
// for i = 1 to pos - 1 do
7926: LD_ADDR_VAR 0 5
7930: PUSH
7931: DOUBLE
7932: LD_INT 1
7934: DEC
7935: ST_TO_ADDR
7936: LD_VAR 0 2
7940: PUSH
7941: LD_INT 1
7943: MINUS
7944: PUSH
7945: FOR_TO
7946: IFFALSE 7991
// begin tmp := tmp [ pos [ i ] ] ;
7948: LD_ADDR_VAR 0 6
7952: PUSH
7953: LD_VAR 0 6
7957: PUSH
7958: LD_VAR 0 2
7962: PUSH
7963: LD_VAR 0 5
7967: ARRAY
7968: ARRAY
7969: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7970: LD_ADDR_VAR 0 7
7974: PUSH
7975: LD_VAR 0 7
7979: PUSH
7980: LD_VAR 0 6
7984: PUSH
7985: EMPTY
7986: LIST
7987: ADD
7988: ST_TO_ADDR
// end ;
7989: GO 7945
7991: POP
7992: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7993: LD_ADDR_VAR 0 6
7997: PUSH
7998: LD_VAR 0 6
8002: PPUSH
8003: LD_VAR 0 2
8007: PUSH
8008: LD_VAR 0 2
8012: ARRAY
8013: PPUSH
8014: LD_VAR 0 3
8018: PPUSH
8019: CALL_OW 1
8023: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8024: LD_ADDR_VAR 0 7
8028: PUSH
8029: LD_VAR 0 7
8033: PPUSH
8034: LD_VAR 0 7
8038: PPUSH
8039: LD_VAR 0 6
8043: PPUSH
8044: CALL_OW 1
8048: ST_TO_ADDR
// for i = s_arr downto 2 do
8049: LD_ADDR_VAR 0 5
8053: PUSH
8054: DOUBLE
8055: LD_VAR 0 7
8059: INC
8060: ST_TO_ADDR
8061: LD_INT 2
8063: PUSH
8064: FOR_DOWNTO
8065: IFFALSE 8149
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8067: LD_ADDR_VAR 0 6
8071: PUSH
8072: LD_VAR 0 7
8076: PUSH
8077: LD_VAR 0 5
8081: PUSH
8082: LD_INT 1
8084: MINUS
8085: ARRAY
8086: PPUSH
8087: LD_VAR 0 2
8091: PUSH
8092: LD_VAR 0 5
8096: PUSH
8097: LD_INT 1
8099: MINUS
8100: ARRAY
8101: PPUSH
8102: LD_VAR 0 7
8106: PUSH
8107: LD_VAR 0 5
8111: ARRAY
8112: PPUSH
8113: CALL_OW 1
8117: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8118: LD_ADDR_VAR 0 7
8122: PUSH
8123: LD_VAR 0 7
8127: PPUSH
8128: LD_VAR 0 5
8132: PUSH
8133: LD_INT 1
8135: MINUS
8136: PPUSH
8137: LD_VAR 0 6
8141: PPUSH
8142: CALL_OW 1
8146: ST_TO_ADDR
// end ;
8147: GO 8064
8149: POP
8150: POP
// result := s_arr [ 1 ] ;
8151: LD_ADDR_VAR 0 4
8155: PUSH
8156: LD_VAR 0 7
8160: PUSH
8161: LD_INT 1
8163: ARRAY
8164: ST_TO_ADDR
// end ; end ;
8165: LD_VAR 0 4
8169: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8170: LD_INT 0
8172: PPUSH
8173: PPUSH
// if not list then
8174: LD_VAR 0 1
8178: NOT
8179: IFFALSE 8183
// exit ;
8181: GO 8274
// i := list [ pos1 ] ;
8183: LD_ADDR_VAR 0 5
8187: PUSH
8188: LD_VAR 0 1
8192: PUSH
8193: LD_VAR 0 2
8197: ARRAY
8198: ST_TO_ADDR
// if not i then
8199: LD_VAR 0 5
8203: NOT
8204: IFFALSE 8208
// exit ;
8206: GO 8274
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8208: LD_ADDR_VAR 0 1
8212: PUSH
8213: LD_VAR 0 1
8217: PPUSH
8218: LD_VAR 0 2
8222: PPUSH
8223: LD_VAR 0 1
8227: PUSH
8228: LD_VAR 0 3
8232: ARRAY
8233: PPUSH
8234: CALL_OW 1
8238: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8239: LD_ADDR_VAR 0 1
8243: PUSH
8244: LD_VAR 0 1
8248: PPUSH
8249: LD_VAR 0 3
8253: PPUSH
8254: LD_VAR 0 5
8258: PPUSH
8259: CALL_OW 1
8263: ST_TO_ADDR
// result := list ;
8264: LD_ADDR_VAR 0 4
8268: PUSH
8269: LD_VAR 0 1
8273: ST_TO_ADDR
// end ;
8274: LD_VAR 0 4
8278: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8279: LD_INT 0
8281: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8282: LD_ADDR_VAR 0 5
8286: PUSH
8287: LD_VAR 0 1
8291: PPUSH
8292: CALL_OW 250
8296: PPUSH
8297: LD_VAR 0 1
8301: PPUSH
8302: CALL_OW 251
8306: PPUSH
8307: LD_VAR 0 2
8311: PPUSH
8312: LD_VAR 0 3
8316: PPUSH
8317: LD_VAR 0 4
8321: PPUSH
8322: CALL 8704 0 5
8326: ST_TO_ADDR
// end ;
8327: LD_VAR 0 5
8331: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8332: LD_INT 0
8334: PPUSH
8335: PPUSH
8336: PPUSH
8337: PPUSH
// if not list or not unit then
8338: LD_VAR 0 2
8342: NOT
8343: IFTRUE 8352
8345: PUSH
8346: LD_VAR 0 1
8350: NOT
8351: OR
8352: IFFALSE 8356
// exit ;
8354: GO 8699
// result := [ ] ;
8356: LD_ADDR_VAR 0 5
8360: PUSH
8361: EMPTY
8362: ST_TO_ADDR
// for i in list do
8363: LD_ADDR_VAR 0 6
8367: PUSH
8368: LD_VAR 0 2
8372: PUSH
8373: FOR_IN
8374: IFFALSE 8592
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8376: LD_ADDR_VAR 0 8
8380: PUSH
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_VAR 0 6
8390: PUSH
8391: LD_INT 1
8393: ARRAY
8394: PPUSH
8395: LD_VAR 0 6
8399: PUSH
8400: LD_INT 2
8402: ARRAY
8403: PPUSH
8404: CALL_OW 297
8408: ST_TO_ADDR
// if not Count ( result ) then
8409: LD_VAR 0 5
8413: PPUSH
8414: CALL 4960 0 1
8418: NOT
8419: IFFALSE 8452
// begin result := Join ( result , [ i , tmp ] ) ;
8421: LD_ADDR_VAR 0 5
8425: PUSH
8426: LD_VAR 0 5
8430: PPUSH
8431: LD_VAR 0 6
8435: PUSH
8436: LD_VAR 0 8
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PPUSH
8445: CALL 40892 0 2
8449: ST_TO_ADDR
// continue ;
8450: GO 8373
// end ; if result [ result ] [ 2 ] <= tmp then
8452: LD_VAR 0 5
8456: PUSH
8457: LD_VAR 0 5
8461: ARRAY
8462: PUSH
8463: LD_INT 2
8465: ARRAY
8466: PUSH
8467: LD_VAR 0 8
8471: LESSEQUAL
8472: IFFALSE 8505
// result := Join ( result , [ i , tmp ] ) else
8474: LD_ADDR_VAR 0 5
8478: PUSH
8479: LD_VAR 0 5
8483: PPUSH
8484: LD_VAR 0 6
8488: PUSH
8489: LD_VAR 0 8
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PPUSH
8498: CALL 40892 0 2
8502: ST_TO_ADDR
8503: GO 8590
// begin for j := 1 to Count ( result ) do
8505: LD_ADDR_VAR 0 7
8509: PUSH
8510: DOUBLE
8511: LD_INT 1
8513: DEC
8514: ST_TO_ADDR
8515: LD_VAR 0 5
8519: PPUSH
8520: CALL 4960 0 1
8524: PUSH
8525: FOR_TO
8526: IFFALSE 8588
// begin if tmp < result [ j ] [ 2 ] then
8528: LD_VAR 0 8
8532: PUSH
8533: LD_VAR 0 5
8537: PUSH
8538: LD_VAR 0 7
8542: ARRAY
8543: PUSH
8544: LD_INT 2
8546: ARRAY
8547: LESS
8548: IFFALSE 8586
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8550: LD_ADDR_VAR 0 5
8554: PUSH
8555: LD_VAR 0 5
8559: PPUSH
8560: LD_VAR 0 7
8564: PPUSH
8565: LD_VAR 0 6
8569: PUSH
8570: LD_VAR 0 8
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PPUSH
8579: CALL_OW 2
8583: ST_TO_ADDR
// break ;
8584: GO 8588
// end ; end ;
8586: GO 8525
8588: POP
8589: POP
// end ; end ;
8590: GO 8373
8592: POP
8593: POP
// if result and not asc then
8594: LD_VAR 0 5
8598: IFFALSE 8607
8600: PUSH
8601: LD_VAR 0 3
8605: NOT
8606: AND
8607: IFFALSE 8624
// result := ReverseArray ( result ) ;
8609: LD_ADDR_VAR 0 5
8613: PUSH
8614: LD_VAR 0 5
8618: PPUSH
8619: CALL 35982 0 1
8623: ST_TO_ADDR
// tmp := [ ] ;
8624: LD_ADDR_VAR 0 8
8628: PUSH
8629: EMPTY
8630: ST_TO_ADDR
// if mode then
8631: LD_VAR 0 4
8635: IFFALSE 8699
// begin for i := 1 to result do
8637: LD_ADDR_VAR 0 6
8641: PUSH
8642: DOUBLE
8643: LD_INT 1
8645: DEC
8646: ST_TO_ADDR
8647: LD_VAR 0 5
8651: PUSH
8652: FOR_TO
8653: IFFALSE 8687
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8655: LD_ADDR_VAR 0 8
8659: PUSH
8660: LD_VAR 0 8
8664: PPUSH
8665: LD_VAR 0 5
8669: PUSH
8670: LD_VAR 0 6
8674: ARRAY
8675: PUSH
8676: LD_INT 1
8678: ARRAY
8679: PPUSH
8680: CALL 40892 0 2
8684: ST_TO_ADDR
8685: GO 8652
8687: POP
8688: POP
// result := tmp ;
8689: LD_ADDR_VAR 0 5
8693: PUSH
8694: LD_VAR 0 8
8698: ST_TO_ADDR
// end ; end ;
8699: LD_VAR 0 5
8703: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8704: LD_INT 0
8706: PPUSH
8707: PPUSH
8708: PPUSH
8709: PPUSH
// if not list then
8710: LD_VAR 0 3
8714: NOT
8715: IFFALSE 8719
// exit ;
8717: GO 9109
// result := [ ] ;
8719: LD_ADDR_VAR 0 6
8723: PUSH
8724: EMPTY
8725: ST_TO_ADDR
// for i in list do
8726: LD_ADDR_VAR 0 7
8730: PUSH
8731: LD_VAR 0 3
8735: PUSH
8736: FOR_IN
8737: IFFALSE 8939
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8739: LD_ADDR_VAR 0 9
8743: PUSH
8744: LD_VAR 0 7
8748: PPUSH
8749: LD_VAR 0 1
8753: PPUSH
8754: LD_VAR 0 2
8758: PPUSH
8759: CALL_OW 297
8763: ST_TO_ADDR
// if not result then
8764: LD_VAR 0 6
8768: NOT
8769: IFFALSE 8795
// result := [ [ i , tmp ] ] else
8771: LD_ADDR_VAR 0 6
8775: PUSH
8776: LD_VAR 0 7
8780: PUSH
8781: LD_VAR 0 9
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: PUSH
8790: EMPTY
8791: LIST
8792: ST_TO_ADDR
8793: GO 8937
// begin if result [ result ] [ 2 ] <= tmp then
8795: LD_VAR 0 6
8799: PUSH
8800: LD_VAR 0 6
8804: ARRAY
8805: PUSH
8806: LD_INT 2
8808: ARRAY
8809: PUSH
8810: LD_VAR 0 9
8814: LESSEQUAL
8815: IFFALSE 8857
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8817: LD_ADDR_VAR 0 6
8821: PUSH
8822: LD_VAR 0 6
8826: PPUSH
8827: LD_VAR 0 6
8831: PUSH
8832: LD_INT 1
8834: PLUS
8835: PPUSH
8836: LD_VAR 0 7
8840: PUSH
8841: LD_VAR 0 9
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 2
8854: ST_TO_ADDR
8855: GO 8937
// for j := 1 to result do
8857: LD_ADDR_VAR 0 8
8861: PUSH
8862: DOUBLE
8863: LD_INT 1
8865: DEC
8866: ST_TO_ADDR
8867: LD_VAR 0 6
8871: PUSH
8872: FOR_TO
8873: IFFALSE 8935
// begin if tmp < result [ j ] [ 2 ] then
8875: LD_VAR 0 9
8879: PUSH
8880: LD_VAR 0 6
8884: PUSH
8885: LD_VAR 0 8
8889: ARRAY
8890: PUSH
8891: LD_INT 2
8893: ARRAY
8894: LESS
8895: IFFALSE 8933
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8897: LD_ADDR_VAR 0 6
8901: PUSH
8902: LD_VAR 0 6
8906: PPUSH
8907: LD_VAR 0 8
8911: PPUSH
8912: LD_VAR 0 7
8916: PUSH
8917: LD_VAR 0 9
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PPUSH
8926: CALL_OW 2
8930: ST_TO_ADDR
// break ;
8931: GO 8935
// end ; end ;
8933: GO 8872
8935: POP
8936: POP
// end ; end ;
8937: GO 8736
8939: POP
8940: POP
// if result and not asc then
8941: LD_VAR 0 6
8945: IFFALSE 8954
8947: PUSH
8948: LD_VAR 0 4
8952: NOT
8953: AND
8954: IFFALSE 9029
// begin tmp := result ;
8956: LD_ADDR_VAR 0 9
8960: PUSH
8961: LD_VAR 0 6
8965: ST_TO_ADDR
// for i = tmp downto 1 do
8966: LD_ADDR_VAR 0 7
8970: PUSH
8971: DOUBLE
8972: LD_VAR 0 9
8976: INC
8977: ST_TO_ADDR
8978: LD_INT 1
8980: PUSH
8981: FOR_DOWNTO
8982: IFFALSE 9027
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8984: LD_ADDR_VAR 0 6
8988: PUSH
8989: LD_VAR 0 6
8993: PPUSH
8994: LD_VAR 0 9
8998: PUSH
8999: LD_VAR 0 7
9003: MINUS
9004: PUSH
9005: LD_INT 1
9007: PLUS
9008: PPUSH
9009: LD_VAR 0 9
9013: PUSH
9014: LD_VAR 0 7
9018: ARRAY
9019: PPUSH
9020: CALL_OW 1
9024: ST_TO_ADDR
9025: GO 8981
9027: POP
9028: POP
// end ; tmp := [ ] ;
9029: LD_ADDR_VAR 0 9
9033: PUSH
9034: EMPTY
9035: ST_TO_ADDR
// if mode then
9036: LD_VAR 0 5
9040: IFFALSE 9109
// begin for i = 1 to result do
9042: LD_ADDR_VAR 0 7
9046: PUSH
9047: DOUBLE
9048: LD_INT 1
9050: DEC
9051: ST_TO_ADDR
9052: LD_VAR 0 6
9056: PUSH
9057: FOR_TO
9058: IFFALSE 9097
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9060: LD_ADDR_VAR 0 9
9064: PUSH
9065: LD_VAR 0 9
9069: PPUSH
9070: LD_VAR 0 7
9074: PPUSH
9075: LD_VAR 0 6
9079: PUSH
9080: LD_VAR 0 7
9084: ARRAY
9085: PUSH
9086: LD_INT 1
9088: ARRAY
9089: PPUSH
9090: CALL_OW 1
9094: ST_TO_ADDR
9095: GO 9057
9097: POP
9098: POP
// result := tmp ;
9099: LD_ADDR_VAR 0 6
9103: PUSH
9104: LD_VAR 0 9
9108: ST_TO_ADDR
// end ; end ;
9109: LD_VAR 0 6
9113: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9114: LD_INT 0
9116: PPUSH
9117: PPUSH
9118: PPUSH
9119: PPUSH
9120: PPUSH
9121: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9122: LD_ADDR_VAR 0 5
9126: PUSH
9127: LD_INT 0
9129: PUSH
9130: LD_INT 0
9132: PUSH
9133: LD_INT 0
9135: PUSH
9136: EMPTY
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: ST_TO_ADDR
// if not x or not y then
9144: LD_VAR 0 2
9148: NOT
9149: IFTRUE 9158
9151: PUSH
9152: LD_VAR 0 3
9156: NOT
9157: OR
9158: IFFALSE 9162
// exit ;
9160: GO 10818
// if not range then
9162: LD_VAR 0 4
9166: NOT
9167: IFFALSE 9177
// range := 10 ;
9169: LD_ADDR_VAR 0 4
9173: PUSH
9174: LD_INT 10
9176: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9177: LD_ADDR_VAR 0 8
9181: PUSH
9182: LD_INT 81
9184: PUSH
9185: LD_VAR 0 1
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 92
9196: PUSH
9197: LD_VAR 0 2
9201: PUSH
9202: LD_VAR 0 3
9206: PUSH
9207: LD_VAR 0 4
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: PUSH
9218: LD_INT 3
9220: PUSH
9221: LD_INT 21
9223: PUSH
9224: LD_INT 3
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: LIST
9239: PPUSH
9240: CALL_OW 69
9244: ST_TO_ADDR
// if not tmp then
9245: LD_VAR 0 8
9249: NOT
9250: IFFALSE 9254
// exit ;
9252: GO 10818
// for i in tmp do
9254: LD_ADDR_VAR 0 6
9258: PUSH
9259: LD_VAR 0 8
9263: PUSH
9264: FOR_IN
9265: IFFALSE 10793
// begin points := [ 0 , 0 , 0 ] ;
9267: LD_ADDR_VAR 0 9
9271: PUSH
9272: LD_INT 0
9274: PUSH
9275: LD_INT 0
9277: PUSH
9278: LD_INT 0
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: LIST
9285: ST_TO_ADDR
// bpoints := 1 ;
9286: LD_ADDR_VAR 0 10
9290: PUSH
9291: LD_INT 1
9293: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9294: LD_VAR 0 6
9298: PPUSH
9299: CALL_OW 247
9303: PUSH
9304: LD_INT 1
9306: DOUBLE
9307: EQUAL
9308: IFTRUE 9312
9310: GO 9894
9312: POP
// begin if GetClass ( i ) = 1 then
9313: LD_VAR 0 6
9317: PPUSH
9318: CALL_OW 257
9322: PUSH
9323: LD_INT 1
9325: EQUAL
9326: IFFALSE 9347
// points := [ 10 , 5 , 3 ] ;
9328: LD_ADDR_VAR 0 9
9332: PUSH
9333: LD_INT 10
9335: PUSH
9336: LD_INT 5
9338: PUSH
9339: LD_INT 3
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: LIST
9346: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9347: LD_VAR 0 6
9351: PPUSH
9352: CALL_OW 257
9356: PUSH
9357: LD_INT 2
9359: PUSH
9360: LD_INT 3
9362: PUSH
9363: LD_INT 4
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: LIST
9370: IN
9371: IFFALSE 9392
// points := [ 3 , 2 , 1 ] ;
9373: LD_ADDR_VAR 0 9
9377: PUSH
9378: LD_INT 3
9380: PUSH
9381: LD_INT 2
9383: PUSH
9384: LD_INT 1
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: LIST
9391: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9392: LD_VAR 0 6
9396: PPUSH
9397: CALL_OW 257
9401: PUSH
9402: LD_INT 5
9404: EQUAL
9405: IFFALSE 9426
// points := [ 130 , 5 , 2 ] ;
9407: LD_ADDR_VAR 0 9
9411: PUSH
9412: LD_INT 130
9414: PUSH
9415: LD_INT 5
9417: PUSH
9418: LD_INT 2
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9426: LD_VAR 0 6
9430: PPUSH
9431: CALL_OW 257
9435: PUSH
9436: LD_INT 8
9438: EQUAL
9439: IFFALSE 9460
// points := [ 35 , 35 , 30 ] ;
9441: LD_ADDR_VAR 0 9
9445: PUSH
9446: LD_INT 35
9448: PUSH
9449: LD_INT 35
9451: PUSH
9452: LD_INT 30
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: LIST
9459: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9460: LD_VAR 0 6
9464: PPUSH
9465: CALL_OW 257
9469: PUSH
9470: LD_INT 9
9472: EQUAL
9473: IFFALSE 9494
// points := [ 20 , 55 , 40 ] ;
9475: LD_ADDR_VAR 0 9
9479: PUSH
9480: LD_INT 20
9482: PUSH
9483: LD_INT 55
9485: PUSH
9486: LD_INT 40
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9494: LD_VAR 0 6
9498: PPUSH
9499: CALL_OW 257
9503: PUSH
9504: LD_INT 12
9506: PUSH
9507: LD_INT 16
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: IN
9514: IFFALSE 9535
// points := [ 5 , 3 , 2 ] ;
9516: LD_ADDR_VAR 0 9
9520: PUSH
9521: LD_INT 5
9523: PUSH
9524: LD_INT 3
9526: PUSH
9527: LD_INT 2
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: LIST
9534: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9535: LD_VAR 0 6
9539: PPUSH
9540: CALL_OW 257
9544: PUSH
9545: LD_INT 17
9547: EQUAL
9548: IFFALSE 9569
// points := [ 100 , 50 , 75 ] ;
9550: LD_ADDR_VAR 0 9
9554: PUSH
9555: LD_INT 100
9557: PUSH
9558: LD_INT 50
9560: PUSH
9561: LD_INT 75
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: LIST
9568: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9569: LD_VAR 0 6
9573: PPUSH
9574: CALL_OW 257
9578: PUSH
9579: LD_INT 15
9581: EQUAL
9582: IFFALSE 9603
// points := [ 10 , 5 , 3 ] ;
9584: LD_ADDR_VAR 0 9
9588: PUSH
9589: LD_INT 10
9591: PUSH
9592: LD_INT 5
9594: PUSH
9595: LD_INT 3
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: LIST
9602: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9603: LD_VAR 0 6
9607: PPUSH
9608: CALL_OW 257
9612: PUSH
9613: LD_INT 14
9615: EQUAL
9616: IFFALSE 9637
// points := [ 10 , 0 , 0 ] ;
9618: LD_ADDR_VAR 0 9
9622: PUSH
9623: LD_INT 10
9625: PUSH
9626: LD_INT 0
9628: PUSH
9629: LD_INT 0
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9637: LD_VAR 0 6
9641: PPUSH
9642: CALL_OW 257
9646: PUSH
9647: LD_INT 11
9649: EQUAL
9650: IFFALSE 9671
// points := [ 30 , 10 , 5 ] ;
9652: LD_ADDR_VAR 0 9
9656: PUSH
9657: LD_INT 30
9659: PUSH
9660: LD_INT 10
9662: PUSH
9663: LD_INT 5
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9671: LD_VAR 0 1
9675: PPUSH
9676: LD_INT 5
9678: PPUSH
9679: CALL_OW 321
9683: PUSH
9684: LD_INT 2
9686: EQUAL
9687: IFFALSE 9704
// bpoints := bpoints * 1.8 ;
9689: LD_ADDR_VAR 0 10
9693: PUSH
9694: LD_VAR 0 10
9698: PUSH
9699: LD_REAL  1.80000000000000E+0000
9702: MUL
9703: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9704: LD_VAR 0 6
9708: PPUSH
9709: CALL_OW 257
9713: PUSH
9714: LD_INT 1
9716: PUSH
9717: LD_INT 2
9719: PUSH
9720: LD_INT 3
9722: PUSH
9723: LD_INT 4
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: IN
9732: IFFALSE 9752
9734: PUSH
9735: LD_VAR 0 1
9739: PPUSH
9740: LD_INT 51
9742: PPUSH
9743: CALL_OW 321
9747: PUSH
9748: LD_INT 2
9750: EQUAL
9751: AND
9752: IFFALSE 9769
// bpoints := bpoints * 1.2 ;
9754: LD_ADDR_VAR 0 10
9758: PUSH
9759: LD_VAR 0 10
9763: PUSH
9764: LD_REAL  1.20000000000000E+0000
9767: MUL
9768: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9769: LD_VAR 0 6
9773: PPUSH
9774: CALL_OW 257
9778: PUSH
9779: LD_INT 5
9781: PUSH
9782: LD_INT 7
9784: PUSH
9785: LD_INT 9
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: IN
9793: IFFALSE 9813
9795: PUSH
9796: LD_VAR 0 1
9800: PPUSH
9801: LD_INT 52
9803: PPUSH
9804: CALL_OW 321
9808: PUSH
9809: LD_INT 2
9811: EQUAL
9812: AND
9813: IFFALSE 9830
// bpoints := bpoints * 1.5 ;
9815: LD_ADDR_VAR 0 10
9819: PUSH
9820: LD_VAR 0 10
9824: PUSH
9825: LD_REAL  1.50000000000000E+0000
9828: MUL
9829: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9830: LD_VAR 0 1
9834: PPUSH
9835: LD_INT 66
9837: PPUSH
9838: CALL_OW 321
9842: PUSH
9843: LD_INT 2
9845: EQUAL
9846: IFFALSE 9863
// bpoints := bpoints * 1.1 ;
9848: LD_ADDR_VAR 0 10
9852: PUSH
9853: LD_VAR 0 10
9857: PUSH
9858: LD_REAL  1.10000000000000E+0000
9861: MUL
9862: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9863: LD_ADDR_VAR 0 10
9867: PUSH
9868: LD_VAR 0 10
9872: PUSH
9873: LD_VAR 0 6
9877: PPUSH
9878: LD_INT 1
9880: PPUSH
9881: CALL_OW 259
9885: PUSH
9886: LD_REAL  1.15000000000000E+0000
9889: MUL
9890: MUL
9891: ST_TO_ADDR
// end ; unit_vehicle :
9892: GO 10722
9894: LD_INT 2
9896: DOUBLE
9897: EQUAL
9898: IFTRUE 9902
9900: GO 10710
9902: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9903: LD_VAR 0 6
9907: PPUSH
9908: CALL_OW 264
9912: PUSH
9913: LD_INT 2
9915: PUSH
9916: LD_INT 42
9918: PUSH
9919: LD_INT 24
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: IN
9927: IFFALSE 9948
// points := [ 25 , 5 , 3 ] ;
9929: LD_ADDR_VAR 0 9
9933: PUSH
9934: LD_INT 25
9936: PUSH
9937: LD_INT 5
9939: PUSH
9940: LD_INT 3
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9948: LD_VAR 0 6
9952: PPUSH
9953: CALL_OW 264
9957: PUSH
9958: LD_INT 4
9960: PUSH
9961: LD_INT 43
9963: PUSH
9964: LD_INT 25
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: LIST
9971: IN
9972: IFFALSE 9993
// points := [ 40 , 15 , 5 ] ;
9974: LD_ADDR_VAR 0 9
9978: PUSH
9979: LD_INT 40
9981: PUSH
9982: LD_INT 15
9984: PUSH
9985: LD_INT 5
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: LIST
9992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9993: LD_VAR 0 6
9997: PPUSH
9998: CALL_OW 264
10002: PUSH
10003: LD_INT 3
10005: PUSH
10006: LD_INT 23
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: IN
10013: IFFALSE 10034
// points := [ 7 , 25 , 8 ] ;
10015: LD_ADDR_VAR 0 9
10019: PUSH
10020: LD_INT 7
10022: PUSH
10023: LD_INT 25
10025: PUSH
10026: LD_INT 8
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: LIST
10033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10034: LD_VAR 0 6
10038: PPUSH
10039: CALL_OW 264
10043: PUSH
10044: LD_INT 5
10046: PUSH
10047: LD_INT 27
10049: PUSH
10050: LD_INT 44
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: LIST
10057: IN
10058: IFFALSE 10079
// points := [ 14 , 50 , 16 ] ;
10060: LD_ADDR_VAR 0 9
10064: PUSH
10065: LD_INT 14
10067: PUSH
10068: LD_INT 50
10070: PUSH
10071: LD_INT 16
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: LIST
10078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10079: LD_VAR 0 6
10083: PPUSH
10084: CALL_OW 264
10088: PUSH
10089: LD_INT 6
10091: PUSH
10092: LD_INT 46
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: IN
10099: IFFALSE 10120
// points := [ 32 , 120 , 70 ] ;
10101: LD_ADDR_VAR 0 9
10105: PUSH
10106: LD_INT 32
10108: PUSH
10109: LD_INT 120
10111: PUSH
10112: LD_INT 70
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10120: LD_VAR 0 6
10124: PPUSH
10125: CALL_OW 264
10129: PUSH
10130: LD_INT 7
10132: PUSH
10133: LD_INT 28
10135: PUSH
10136: LD_INT 45
10138: PUSH
10139: LD_INT 92
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: IN
10148: IFFALSE 10169
// points := [ 35 , 20 , 45 ] ;
10150: LD_ADDR_VAR 0 9
10154: PUSH
10155: LD_INT 35
10157: PUSH
10158: LD_INT 20
10160: PUSH
10161: LD_INT 45
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: LIST
10168: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10169: LD_VAR 0 6
10173: PPUSH
10174: CALL_OW 264
10178: PUSH
10179: LD_INT 47
10181: PUSH
10182: EMPTY
10183: LIST
10184: IN
10185: IFFALSE 10206
// points := [ 67 , 45 , 75 ] ;
10187: LD_ADDR_VAR 0 9
10191: PUSH
10192: LD_INT 67
10194: PUSH
10195: LD_INT 45
10197: PUSH
10198: LD_INT 75
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10206: LD_VAR 0 6
10210: PPUSH
10211: CALL_OW 264
10215: PUSH
10216: LD_INT 26
10218: PUSH
10219: EMPTY
10220: LIST
10221: IN
10222: IFFALSE 10243
// points := [ 120 , 30 , 80 ] ;
10224: LD_ADDR_VAR 0 9
10228: PUSH
10229: LD_INT 120
10231: PUSH
10232: LD_INT 30
10234: PUSH
10235: LD_INT 80
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: LIST
10242: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10243: LD_VAR 0 6
10247: PPUSH
10248: CALL_OW 264
10252: PUSH
10253: LD_INT 22
10255: PUSH
10256: EMPTY
10257: LIST
10258: IN
10259: IFFALSE 10280
// points := [ 40 , 1 , 1 ] ;
10261: LD_ADDR_VAR 0 9
10265: PUSH
10266: LD_INT 40
10268: PUSH
10269: LD_INT 1
10271: PUSH
10272: LD_INT 1
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10280: LD_VAR 0 6
10284: PPUSH
10285: CALL_OW 264
10289: PUSH
10290: LD_INT 29
10292: PUSH
10293: EMPTY
10294: LIST
10295: IN
10296: IFFALSE 10317
// points := [ 70 , 200 , 400 ] ;
10298: LD_ADDR_VAR 0 9
10302: PUSH
10303: LD_INT 70
10305: PUSH
10306: LD_INT 200
10308: PUSH
10309: LD_INT 400
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: LIST
10316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10317: LD_VAR 0 6
10321: PPUSH
10322: CALL_OW 264
10326: PUSH
10327: LD_INT 14
10329: PUSH
10330: LD_INT 53
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: IN
10337: IFFALSE 10358
// points := [ 40 , 10 , 20 ] ;
10339: LD_ADDR_VAR 0 9
10343: PUSH
10344: LD_INT 40
10346: PUSH
10347: LD_INT 10
10349: PUSH
10350: LD_INT 20
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: LIST
10357: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10358: LD_VAR 0 6
10362: PPUSH
10363: CALL_OW 264
10367: PUSH
10368: LD_INT 9
10370: PUSH
10371: EMPTY
10372: LIST
10373: IN
10374: IFFALSE 10395
// points := [ 5 , 70 , 20 ] ;
10376: LD_ADDR_VAR 0 9
10380: PUSH
10381: LD_INT 5
10383: PUSH
10384: LD_INT 70
10386: PUSH
10387: LD_INT 20
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10395: LD_VAR 0 6
10399: PPUSH
10400: CALL_OW 264
10404: PUSH
10405: LD_INT 10
10407: PUSH
10408: EMPTY
10409: LIST
10410: IN
10411: IFFALSE 10432
// points := [ 35 , 110 , 70 ] ;
10413: LD_ADDR_VAR 0 9
10417: PUSH
10418: LD_INT 35
10420: PUSH
10421: LD_INT 110
10423: PUSH
10424: LD_INT 70
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10432: LD_VAR 0 6
10436: PPUSH
10437: CALL_OW 265
10441: PUSH
10442: LD_INT 25
10444: EQUAL
10445: IFFALSE 10466
// points := [ 80 , 65 , 100 ] ;
10447: LD_ADDR_VAR 0 9
10451: PUSH
10452: LD_INT 80
10454: PUSH
10455: LD_INT 65
10457: PUSH
10458: LD_INT 100
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10466: LD_VAR 0 6
10470: PPUSH
10471: CALL_OW 263
10475: PUSH
10476: LD_INT 1
10478: EQUAL
10479: IFFALSE 10514
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10481: LD_ADDR_VAR 0 10
10485: PUSH
10486: LD_VAR 0 10
10490: PUSH
10491: LD_VAR 0 6
10495: PPUSH
10496: CALL_OW 311
10500: PPUSH
10501: LD_INT 3
10503: PPUSH
10504: CALL_OW 259
10508: PUSH
10509: LD_INT 4
10511: MUL
10512: MUL
10513: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10514: LD_VAR 0 6
10518: PPUSH
10519: CALL_OW 263
10523: PUSH
10524: LD_INT 2
10526: EQUAL
10527: IFFALSE 10578
// begin j := IsControledBy ( i ) ;
10529: LD_ADDR_VAR 0 7
10533: PUSH
10534: LD_VAR 0 6
10538: PPUSH
10539: CALL_OW 312
10543: ST_TO_ADDR
// if j then
10544: LD_VAR 0 7
10548: IFFALSE 10578
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10550: LD_ADDR_VAR 0 10
10554: PUSH
10555: LD_VAR 0 10
10559: PUSH
10560: LD_VAR 0 7
10564: PPUSH
10565: LD_INT 3
10567: PPUSH
10568: CALL_OW 259
10572: PUSH
10573: LD_INT 3
10575: MUL
10576: MUL
10577: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10578: LD_VAR 0 6
10582: PPUSH
10583: CALL_OW 264
10587: PUSH
10588: LD_INT 5
10590: PUSH
10591: LD_INT 6
10593: PUSH
10594: LD_INT 46
10596: PUSH
10597: LD_INT 44
10599: PUSH
10600: LD_INT 47
10602: PUSH
10603: LD_INT 45
10605: PUSH
10606: LD_INT 28
10608: PUSH
10609: LD_INT 7
10611: PUSH
10612: LD_INT 27
10614: PUSH
10615: LD_INT 29
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: IN
10630: IFFALSE 10650
10632: PUSH
10633: LD_VAR 0 1
10637: PPUSH
10638: LD_INT 52
10640: PPUSH
10641: CALL_OW 321
10645: PUSH
10646: LD_INT 2
10648: EQUAL
10649: AND
10650: IFFALSE 10667
// bpoints := bpoints * 1.2 ;
10652: LD_ADDR_VAR 0 10
10656: PUSH
10657: LD_VAR 0 10
10661: PUSH
10662: LD_REAL  1.20000000000000E+0000
10665: MUL
10666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10667: LD_VAR 0 6
10671: PPUSH
10672: CALL_OW 264
10676: PUSH
10677: LD_INT 6
10679: PUSH
10680: LD_INT 46
10682: PUSH
10683: LD_INT 47
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: LIST
10690: IN
10691: IFFALSE 10708
// bpoints := bpoints * 1.2 ;
10693: LD_ADDR_VAR 0 10
10697: PUSH
10698: LD_VAR 0 10
10702: PUSH
10703: LD_REAL  1.20000000000000E+0000
10706: MUL
10707: ST_TO_ADDR
// end ; unit_building :
10708: GO 10722
10710: LD_INT 3
10712: DOUBLE
10713: EQUAL
10714: IFTRUE 10718
10716: GO 10721
10718: POP
// ; end ;
10719: GO 10722
10721: POP
// for j = 1 to 3 do
10722: LD_ADDR_VAR 0 7
10726: PUSH
10727: DOUBLE
10728: LD_INT 1
10730: DEC
10731: ST_TO_ADDR
10732: LD_INT 3
10734: PUSH
10735: FOR_TO
10736: IFFALSE 10789
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10738: LD_ADDR_VAR 0 5
10742: PUSH
10743: LD_VAR 0 5
10747: PPUSH
10748: LD_VAR 0 7
10752: PPUSH
10753: LD_VAR 0 5
10757: PUSH
10758: LD_VAR 0 7
10762: ARRAY
10763: PUSH
10764: LD_VAR 0 9
10768: PUSH
10769: LD_VAR 0 7
10773: ARRAY
10774: PUSH
10775: LD_VAR 0 10
10779: MUL
10780: PLUS
10781: PPUSH
10782: CALL_OW 1
10786: ST_TO_ADDR
10787: GO 10735
10789: POP
10790: POP
// end ;
10791: GO 9264
10793: POP
10794: POP
// result := Replace ( result , 4 , tmp ) ;
10795: LD_ADDR_VAR 0 5
10799: PUSH
10800: LD_VAR 0 5
10804: PPUSH
10805: LD_INT 4
10807: PPUSH
10808: LD_VAR 0 8
10812: PPUSH
10813: CALL_OW 1
10817: ST_TO_ADDR
// end ;
10818: LD_VAR 0 5
10822: RET
// export function DangerAtRange ( unit , range ) ; begin
10823: LD_INT 0
10825: PPUSH
// if not unit then
10826: LD_VAR 0 1
10830: NOT
10831: IFFALSE 10835
// exit ;
10833: GO 10880
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10835: LD_ADDR_VAR 0 3
10839: PUSH
10840: LD_VAR 0 1
10844: PPUSH
10845: CALL_OW 255
10849: PPUSH
10850: LD_VAR 0 1
10854: PPUSH
10855: CALL_OW 250
10859: PPUSH
10860: LD_VAR 0 1
10864: PPUSH
10865: CALL_OW 251
10869: PPUSH
10870: LD_VAR 0 2
10874: PPUSH
10875: CALL 9114 0 4
10879: ST_TO_ADDR
// end ;
10880: LD_VAR 0 3
10884: RET
// export function DangerInArea ( side , area ) ; begin
10885: LD_INT 0
10887: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10888: LD_ADDR_VAR 0 3
10892: PUSH
10893: LD_VAR 0 2
10897: PPUSH
10898: LD_INT 81
10900: PUSH
10901: LD_VAR 0 1
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: PPUSH
10910: CALL_OW 70
10914: ST_TO_ADDR
// end ;
10915: LD_VAR 0 3
10919: RET
// export function IsExtension ( b ) ; begin
10920: LD_INT 0
10922: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10923: LD_ADDR_VAR 0 2
10927: PUSH
10928: LD_VAR 0 1
10932: PUSH
10933: LD_INT 23
10935: PUSH
10936: LD_INT 20
10938: PUSH
10939: LD_INT 22
10941: PUSH
10942: LD_INT 17
10944: PUSH
10945: LD_INT 24
10947: PUSH
10948: LD_INT 21
10950: PUSH
10951: LD_INT 19
10953: PUSH
10954: LD_INT 16
10956: PUSH
10957: LD_INT 25
10959: PUSH
10960: LD_INT 18
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: IN
10975: ST_TO_ADDR
// end ;
10976: LD_VAR 0 2
10980: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10981: LD_INT 0
10983: PPUSH
10984: PPUSH
10985: PPUSH
// result := [ ] ;
10986: LD_ADDR_VAR 0 4
10990: PUSH
10991: EMPTY
10992: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10993: LD_ADDR_VAR 0 5
10997: PUSH
10998: LD_VAR 0 2
11002: PPUSH
11003: LD_INT 21
11005: PUSH
11006: LD_INT 3
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PPUSH
11013: CALL_OW 70
11017: ST_TO_ADDR
// if not tmp then
11018: LD_VAR 0 5
11022: NOT
11023: IFFALSE 11027
// exit ;
11025: GO 11091
// if checkLink then
11027: LD_VAR 0 3
11031: IFFALSE 11081
// begin for i in tmp do
11033: LD_ADDR_VAR 0 6
11037: PUSH
11038: LD_VAR 0 5
11042: PUSH
11043: FOR_IN
11044: IFFALSE 11079
// if GetBase ( i ) <> base then
11046: LD_VAR 0 6
11050: PPUSH
11051: CALL_OW 274
11055: PUSH
11056: LD_VAR 0 1
11060: NONEQUAL
11061: IFFALSE 11077
// ComLinkToBase ( base , i ) ;
11063: LD_VAR 0 1
11067: PPUSH
11068: LD_VAR 0 6
11072: PPUSH
11073: CALL_OW 169
11077: GO 11043
11079: POP
11080: POP
// end ; result := tmp ;
11081: LD_ADDR_VAR 0 4
11085: PUSH
11086: LD_VAR 0 5
11090: ST_TO_ADDR
// end ;
11091: LD_VAR 0 4
11095: RET
// export function ComComplete ( units , b ) ; var i ; begin
11096: LD_INT 0
11098: PPUSH
11099: PPUSH
// if not units then
11100: LD_VAR 0 1
11104: NOT
11105: IFFALSE 11109
// exit ;
11107: GO 11199
// for i in units do
11109: LD_ADDR_VAR 0 4
11113: PUSH
11114: LD_VAR 0 1
11118: PUSH
11119: FOR_IN
11120: IFFALSE 11197
// if BuildingStatus ( b ) = bs_build then
11122: LD_VAR 0 2
11126: PPUSH
11127: CALL_OW 461
11131: PUSH
11132: LD_INT 1
11134: EQUAL
11135: IFFALSE 11195
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11137: LD_VAR 0 4
11141: PPUSH
11142: LD_STRING h
11144: PUSH
11145: LD_VAR 0 2
11149: PPUSH
11150: CALL_OW 250
11154: PUSH
11155: LD_VAR 0 2
11159: PPUSH
11160: CALL_OW 251
11164: PUSH
11165: LD_VAR 0 2
11169: PUSH
11170: LD_INT 0
11172: PUSH
11173: LD_INT 0
11175: PUSH
11176: LD_INT 0
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: PUSH
11188: EMPTY
11189: LIST
11190: PPUSH
11191: CALL_OW 446
11195: GO 11119
11197: POP
11198: POP
// end ;
11199: LD_VAR 0 3
11203: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11204: LD_INT 0
11206: PPUSH
11207: PPUSH
11208: PPUSH
11209: PPUSH
11210: PPUSH
11211: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11212: LD_VAR 0 1
11216: NOT
11217: IFTRUE 11234
11219: PUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 263
11229: PUSH
11230: LD_INT 2
11232: NONEQUAL
11233: OR
11234: IFFALSE 11238
// exit ;
11236: GO 11554
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11238: LD_ADDR_VAR 0 6
11242: PUSH
11243: LD_INT 22
11245: PUSH
11246: LD_VAR 0 1
11250: PPUSH
11251: CALL_OW 255
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PUSH
11260: LD_INT 2
11262: PUSH
11263: LD_INT 30
11265: PUSH
11266: LD_INT 36
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PUSH
11273: LD_INT 34
11275: PUSH
11276: LD_INT 31
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: LIST
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PPUSH
11292: CALL_OW 69
11296: ST_TO_ADDR
// if not tmp then
11297: LD_VAR 0 6
11301: NOT
11302: IFFALSE 11306
// exit ;
11304: GO 11554
// result := [ ] ;
11306: LD_ADDR_VAR 0 2
11310: PUSH
11311: EMPTY
11312: ST_TO_ADDR
// for i in tmp do
11313: LD_ADDR_VAR 0 3
11317: PUSH
11318: LD_VAR 0 6
11322: PUSH
11323: FOR_IN
11324: IFFALSE 11395
// begin t := UnitsInside ( i ) ;
11326: LD_ADDR_VAR 0 4
11330: PUSH
11331: LD_VAR 0 3
11335: PPUSH
11336: CALL_OW 313
11340: ST_TO_ADDR
// if t then
11341: LD_VAR 0 4
11345: IFFALSE 11393
// for j in t do
11347: LD_ADDR_VAR 0 7
11351: PUSH
11352: LD_VAR 0 4
11356: PUSH
11357: FOR_IN
11358: IFFALSE 11391
// result := Replace ( result , result + 1 , j ) ;
11360: LD_ADDR_VAR 0 2
11364: PUSH
11365: LD_VAR 0 2
11369: PPUSH
11370: LD_VAR 0 2
11374: PUSH
11375: LD_INT 1
11377: PLUS
11378: PPUSH
11379: LD_VAR 0 7
11383: PPUSH
11384: CALL_OW 1
11388: ST_TO_ADDR
11389: GO 11357
11391: POP
11392: POP
// end ;
11393: GO 11323
11395: POP
11396: POP
// if not result then
11397: LD_VAR 0 2
11401: NOT
11402: IFFALSE 11406
// exit ;
11404: GO 11554
// mech := result [ 1 ] ;
11406: LD_ADDR_VAR 0 5
11410: PUSH
11411: LD_VAR 0 2
11415: PUSH
11416: LD_INT 1
11418: ARRAY
11419: ST_TO_ADDR
// if result > 1 then
11420: LD_VAR 0 2
11424: PUSH
11425: LD_INT 1
11427: GREATER
11428: IFFALSE 11540
// begin for i = 2 to result do
11430: LD_ADDR_VAR 0 3
11434: PUSH
11435: DOUBLE
11436: LD_INT 2
11438: DEC
11439: ST_TO_ADDR
11440: LD_VAR 0 2
11444: PUSH
11445: FOR_TO
11446: IFFALSE 11538
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11448: LD_ADDR_VAR 0 4
11452: PUSH
11453: LD_VAR 0 2
11457: PUSH
11458: LD_VAR 0 3
11462: ARRAY
11463: PPUSH
11464: LD_INT 3
11466: PPUSH
11467: CALL_OW 259
11471: PUSH
11472: LD_VAR 0 2
11476: PUSH
11477: LD_VAR 0 3
11481: ARRAY
11482: PPUSH
11483: CALL_OW 432
11487: MINUS
11488: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11489: LD_VAR 0 4
11493: PUSH
11494: LD_VAR 0 5
11498: PPUSH
11499: LD_INT 3
11501: PPUSH
11502: CALL_OW 259
11506: PUSH
11507: LD_VAR 0 5
11511: PPUSH
11512: CALL_OW 432
11516: MINUS
11517: GREATEREQUAL
11518: IFFALSE 11536
// mech := result [ i ] ;
11520: LD_ADDR_VAR 0 5
11524: PUSH
11525: LD_VAR 0 2
11529: PUSH
11530: LD_VAR 0 3
11534: ARRAY
11535: ST_TO_ADDR
// end ;
11536: GO 11445
11538: POP
11539: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11540: LD_VAR 0 1
11544: PPUSH
11545: LD_VAR 0 5
11549: PPUSH
11550: CALL_OW 135
// end ;
11554: LD_VAR 0 2
11558: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11559: LD_INT 0
11561: PPUSH
11562: PPUSH
11563: PPUSH
11564: PPUSH
11565: PPUSH
11566: PPUSH
11567: PPUSH
11568: PPUSH
11569: PPUSH
11570: PPUSH
11571: PPUSH
11572: PPUSH
11573: PPUSH
// result := [ ] ;
11574: LD_ADDR_VAR 0 7
11578: PUSH
11579: EMPTY
11580: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11581: LD_VAR 0 1
11585: PPUSH
11586: CALL_OW 266
11590: PUSH
11591: LD_INT 0
11593: PUSH
11594: LD_INT 1
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: IN
11601: NOT
11602: IFFALSE 11606
// exit ;
11604: GO 13246
// if name then
11606: LD_VAR 0 3
11610: IFFALSE 11626
// SetBName ( base_dep , name ) ;
11612: LD_VAR 0 1
11616: PPUSH
11617: LD_VAR 0 3
11621: PPUSH
11622: CALL_OW 500
// base := GetBase ( base_dep ) ;
11626: LD_ADDR_VAR 0 15
11630: PUSH
11631: LD_VAR 0 1
11635: PPUSH
11636: CALL_OW 274
11640: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11641: LD_ADDR_VAR 0 16
11645: PUSH
11646: LD_VAR 0 1
11650: PPUSH
11651: CALL_OW 255
11655: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11656: LD_ADDR_VAR 0 17
11660: PUSH
11661: LD_VAR 0 1
11665: PPUSH
11666: CALL_OW 248
11670: ST_TO_ADDR
// if sources then
11671: LD_VAR 0 5
11675: IFFALSE 11722
// for i = 1 to 3 do
11677: LD_ADDR_VAR 0 8
11681: PUSH
11682: DOUBLE
11683: LD_INT 1
11685: DEC
11686: ST_TO_ADDR
11687: LD_INT 3
11689: PUSH
11690: FOR_TO
11691: IFFALSE 11720
// AddResourceType ( base , i , sources [ i ] ) ;
11693: LD_VAR 0 15
11697: PPUSH
11698: LD_VAR 0 8
11702: PPUSH
11703: LD_VAR 0 5
11707: PUSH
11708: LD_VAR 0 8
11712: ARRAY
11713: PPUSH
11714: CALL_OW 276
11718: GO 11690
11720: POP
11721: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11722: LD_ADDR_VAR 0 18
11726: PUSH
11727: LD_VAR 0 15
11731: PPUSH
11732: LD_VAR 0 2
11736: PPUSH
11737: LD_INT 1
11739: PPUSH
11740: CALL 10981 0 3
11744: ST_TO_ADDR
// InitHc ;
11745: CALL_OW 19
// InitUc ;
11749: CALL_OW 18
// uc_side := side ;
11753: LD_ADDR_OWVAR 20
11757: PUSH
11758: LD_VAR 0 16
11762: ST_TO_ADDR
// uc_nation := nation ;
11763: LD_ADDR_OWVAR 21
11767: PUSH
11768: LD_VAR 0 17
11772: ST_TO_ADDR
// if buildings then
11773: LD_VAR 0 18
11777: IFFALSE 13105
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11779: LD_ADDR_VAR 0 19
11783: PUSH
11784: LD_VAR 0 18
11788: PPUSH
11789: LD_INT 2
11791: PUSH
11792: LD_INT 30
11794: PUSH
11795: LD_INT 29
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 30
11804: PUSH
11805: LD_INT 30
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: PPUSH
11817: CALL_OW 72
11821: ST_TO_ADDR
// if tmp then
11822: LD_VAR 0 19
11826: IFFALSE 11874
// for i in tmp do
11828: LD_ADDR_VAR 0 8
11832: PUSH
11833: LD_VAR 0 19
11837: PUSH
11838: FOR_IN
11839: IFFALSE 11872
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11841: LD_VAR 0 8
11845: PPUSH
11846: CALL_OW 250
11850: PPUSH
11851: LD_VAR 0 8
11855: PPUSH
11856: CALL_OW 251
11860: PPUSH
11861: LD_VAR 0 16
11865: PPUSH
11866: CALL_OW 441
11870: GO 11838
11872: POP
11873: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11874: LD_VAR 0 18
11878: PPUSH
11879: LD_INT 2
11881: PUSH
11882: LD_INT 30
11884: PUSH
11885: LD_INT 32
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: LD_INT 30
11894: PUSH
11895: LD_INT 33
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: LIST
11906: PPUSH
11907: CALL_OW 72
11911: IFFALSE 11999
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11913: LD_ADDR_VAR 0 8
11917: PUSH
11918: LD_VAR 0 18
11922: PPUSH
11923: LD_INT 2
11925: PUSH
11926: LD_INT 30
11928: PUSH
11929: LD_INT 32
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 30
11938: PUSH
11939: LD_INT 33
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: PPUSH
11951: CALL_OW 72
11955: PUSH
11956: FOR_IN
11957: IFFALSE 11997
// begin if not GetBWeapon ( i ) then
11959: LD_VAR 0 8
11963: PPUSH
11964: CALL_OW 269
11968: NOT
11969: IFFALSE 11995
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11971: LD_VAR 0 8
11975: PPUSH
11976: LD_VAR 0 8
11980: PPUSH
11981: LD_VAR 0 2
11985: PPUSH
11986: CALL 13251 0 2
11990: PPUSH
11991: CALL_OW 431
// end ;
11995: GO 11956
11997: POP
11998: POP
// end ; for i = 1 to personel do
11999: LD_ADDR_VAR 0 8
12003: PUSH
12004: DOUBLE
12005: LD_INT 1
12007: DEC
12008: ST_TO_ADDR
12009: LD_VAR 0 6
12013: PUSH
12014: FOR_TO
12015: IFFALSE 13085
// begin if i > 4 then
12017: LD_VAR 0 8
12021: PUSH
12022: LD_INT 4
12024: GREATER
12025: IFFALSE 12029
// break ;
12027: GO 13085
// case i of 1 :
12029: LD_VAR 0 8
12033: PUSH
12034: LD_INT 1
12036: DOUBLE
12037: EQUAL
12038: IFTRUE 12042
12040: GO 12122
12042: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12043: LD_ADDR_VAR 0 12
12047: PUSH
12048: LD_VAR 0 18
12052: PPUSH
12053: LD_INT 22
12055: PUSH
12056: LD_VAR 0 16
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 58
12067: PUSH
12068: EMPTY
12069: LIST
12070: PUSH
12071: LD_INT 2
12073: PUSH
12074: LD_INT 30
12076: PUSH
12077: LD_INT 32
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PUSH
12084: LD_INT 30
12086: PUSH
12087: LD_INT 4
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: PUSH
12094: LD_INT 30
12096: PUSH
12097: LD_INT 5
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: PPUSH
12115: CALL_OW 72
12119: ST_TO_ADDR
12120: GO 12344
12122: LD_INT 2
12124: DOUBLE
12125: EQUAL
12126: IFTRUE 12130
12128: GO 12192
12130: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12131: LD_ADDR_VAR 0 12
12135: PUSH
12136: LD_VAR 0 18
12140: PPUSH
12141: LD_INT 22
12143: PUSH
12144: LD_VAR 0 16
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 2
12155: PUSH
12156: LD_INT 30
12158: PUSH
12159: LD_INT 0
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PUSH
12166: LD_INT 30
12168: PUSH
12169: LD_INT 1
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: LIST
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PPUSH
12185: CALL_OW 72
12189: ST_TO_ADDR
12190: GO 12344
12192: LD_INT 3
12194: DOUBLE
12195: EQUAL
12196: IFTRUE 12200
12198: GO 12262
12200: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12201: LD_ADDR_VAR 0 12
12205: PUSH
12206: LD_VAR 0 18
12210: PPUSH
12211: LD_INT 22
12213: PUSH
12214: LD_VAR 0 16
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PUSH
12223: LD_INT 2
12225: PUSH
12226: LD_INT 30
12228: PUSH
12229: LD_INT 2
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 30
12238: PUSH
12239: LD_INT 3
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 72
12259: ST_TO_ADDR
12260: GO 12344
12262: LD_INT 4
12264: DOUBLE
12265: EQUAL
12266: IFTRUE 12270
12268: GO 12343
12270: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12271: LD_ADDR_VAR 0 12
12275: PUSH
12276: LD_VAR 0 18
12280: PPUSH
12281: LD_INT 22
12283: PUSH
12284: LD_VAR 0 16
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: LD_INT 2
12295: PUSH
12296: LD_INT 30
12298: PUSH
12299: LD_INT 6
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: PUSH
12306: LD_INT 30
12308: PUSH
12309: LD_INT 7
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PUSH
12316: LD_INT 30
12318: PUSH
12319: LD_INT 8
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PPUSH
12336: CALL_OW 72
12340: ST_TO_ADDR
12341: GO 12344
12343: POP
// if i = 1 then
12344: LD_VAR 0 8
12348: PUSH
12349: LD_INT 1
12351: EQUAL
12352: IFFALSE 12463
// begin tmp := [ ] ;
12354: LD_ADDR_VAR 0 19
12358: PUSH
12359: EMPTY
12360: ST_TO_ADDR
// for j in f do
12361: LD_ADDR_VAR 0 9
12365: PUSH
12366: LD_VAR 0 12
12370: PUSH
12371: FOR_IN
12372: IFFALSE 12445
// if GetBType ( j ) = b_bunker then
12374: LD_VAR 0 9
12378: PPUSH
12379: CALL_OW 266
12383: PUSH
12384: LD_INT 32
12386: EQUAL
12387: IFFALSE 12414
// tmp := Insert ( tmp , 1 , j ) else
12389: LD_ADDR_VAR 0 19
12393: PUSH
12394: LD_VAR 0 19
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_VAR 0 9
12406: PPUSH
12407: CALL_OW 2
12411: ST_TO_ADDR
12412: GO 12443
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12414: LD_ADDR_VAR 0 19
12418: PUSH
12419: LD_VAR 0 19
12423: PPUSH
12424: LD_VAR 0 19
12428: PUSH
12429: LD_INT 1
12431: PLUS
12432: PPUSH
12433: LD_VAR 0 9
12437: PPUSH
12438: CALL_OW 2
12442: ST_TO_ADDR
12443: GO 12371
12445: POP
12446: POP
// if tmp then
12447: LD_VAR 0 19
12451: IFFALSE 12463
// f := tmp ;
12453: LD_ADDR_VAR 0 12
12457: PUSH
12458: LD_VAR 0 19
12462: ST_TO_ADDR
// end ; x := personel [ i ] ;
12463: LD_ADDR_VAR 0 13
12467: PUSH
12468: LD_VAR 0 6
12472: PUSH
12473: LD_VAR 0 8
12477: ARRAY
12478: ST_TO_ADDR
// if x = - 1 then
12479: LD_VAR 0 13
12483: PUSH
12484: LD_INT 1
12486: NEG
12487: EQUAL
12488: IFFALSE 12699
// begin for j in f do
12490: LD_ADDR_VAR 0 9
12494: PUSH
12495: LD_VAR 0 12
12499: PUSH
12500: FOR_IN
12501: IFFALSE 12695
// repeat InitHc ;
12503: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12507: LD_VAR 0 9
12511: PPUSH
12512: CALL_OW 266
12516: PUSH
12517: LD_INT 5
12519: EQUAL
12520: IFFALSE 12590
// begin if UnitsInside ( j ) < 3 then
12522: LD_VAR 0 9
12526: PPUSH
12527: CALL_OW 313
12531: PUSH
12532: LD_INT 3
12534: LESS
12535: IFFALSE 12571
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12537: LD_INT 0
12539: PPUSH
12540: LD_INT 5
12542: PUSH
12543: LD_INT 8
12545: PUSH
12546: LD_INT 9
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: LIST
12553: PUSH
12554: LD_VAR 0 17
12558: ARRAY
12559: PPUSH
12560: LD_VAR 0 4
12564: PPUSH
12565: CALL_OW 380
12569: GO 12588
// PrepareHuman ( false , i , skill ) ;
12571: LD_INT 0
12573: PPUSH
12574: LD_VAR 0 8
12578: PPUSH
12579: LD_VAR 0 4
12583: PPUSH
12584: CALL_OW 380
// end else
12588: GO 12607
// PrepareHuman ( false , i , skill ) ;
12590: LD_INT 0
12592: PPUSH
12593: LD_VAR 0 8
12597: PPUSH
12598: LD_VAR 0 4
12602: PPUSH
12603: CALL_OW 380
// un := CreateHuman ;
12607: LD_ADDR_VAR 0 14
12611: PUSH
12612: CALL_OW 44
12616: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12617: LD_ADDR_VAR 0 7
12621: PUSH
12622: LD_VAR 0 7
12626: PPUSH
12627: LD_INT 1
12629: PPUSH
12630: LD_VAR 0 14
12634: PPUSH
12635: CALL_OW 2
12639: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12640: LD_VAR 0 14
12644: PPUSH
12645: LD_VAR 0 9
12649: PPUSH
12650: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12654: LD_VAR 0 9
12658: PPUSH
12659: CALL_OW 313
12663: PUSH
12664: LD_INT 6
12666: EQUAL
12667: IFTRUE 12691
12669: PUSH
12670: LD_VAR 0 9
12674: PPUSH
12675: CALL_OW 266
12679: PUSH
12680: LD_INT 32
12682: PUSH
12683: LD_INT 31
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: IN
12690: OR
12691: IFFALSE 12503
12693: GO 12500
12695: POP
12696: POP
// end else
12697: GO 13083
// for j = 1 to x do
12699: LD_ADDR_VAR 0 9
12703: PUSH
12704: DOUBLE
12705: LD_INT 1
12707: DEC
12708: ST_TO_ADDR
12709: LD_VAR 0 13
12713: PUSH
12714: FOR_TO
12715: IFFALSE 13081
// begin InitHc ;
12717: CALL_OW 19
// if not f then
12721: LD_VAR 0 12
12725: NOT
12726: IFFALSE 12815
// begin PrepareHuman ( false , i , skill ) ;
12728: LD_INT 0
12730: PPUSH
12731: LD_VAR 0 8
12735: PPUSH
12736: LD_VAR 0 4
12740: PPUSH
12741: CALL_OW 380
// un := CreateHuman ;
12745: LD_ADDR_VAR 0 14
12749: PUSH
12750: CALL_OW 44
12754: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12755: LD_ADDR_VAR 0 7
12759: PUSH
12760: LD_VAR 0 7
12764: PPUSH
12765: LD_INT 1
12767: PPUSH
12768: LD_VAR 0 14
12772: PPUSH
12773: CALL_OW 2
12777: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12778: LD_VAR 0 14
12782: PPUSH
12783: LD_VAR 0 1
12787: PPUSH
12788: CALL_OW 250
12792: PPUSH
12793: LD_VAR 0 1
12797: PPUSH
12798: CALL_OW 251
12802: PPUSH
12803: LD_INT 10
12805: PPUSH
12806: LD_INT 0
12808: PPUSH
12809: CALL_OW 50
// continue ;
12813: GO 12714
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12815: LD_VAR 0 12
12819: PUSH
12820: LD_INT 1
12822: ARRAY
12823: PPUSH
12824: CALL_OW 313
12828: IFFALSE 12856
12830: PUSH
12831: LD_VAR 0 12
12835: PUSH
12836: LD_INT 1
12838: ARRAY
12839: PPUSH
12840: CALL_OW 266
12844: PUSH
12845: LD_INT 32
12847: PUSH
12848: LD_INT 31
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: IN
12855: AND
12856: IFTRUE 12877
12858: PUSH
12859: LD_VAR 0 12
12863: PUSH
12864: LD_INT 1
12866: ARRAY
12867: PPUSH
12868: CALL_OW 313
12872: PUSH
12873: LD_INT 6
12875: EQUAL
12876: OR
12877: IFFALSE 12897
// f := Delete ( f , 1 ) ;
12879: LD_ADDR_VAR 0 12
12883: PUSH
12884: LD_VAR 0 12
12888: PPUSH
12889: LD_INT 1
12891: PPUSH
12892: CALL_OW 3
12896: ST_TO_ADDR
// if not f then
12897: LD_VAR 0 12
12901: NOT
12902: IFFALSE 12920
// begin x := x + 2 ;
12904: LD_ADDR_VAR 0 13
12908: PUSH
12909: LD_VAR 0 13
12913: PUSH
12914: LD_INT 2
12916: PLUS
12917: ST_TO_ADDR
// continue ;
12918: GO 12714
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12920: LD_VAR 0 12
12924: PUSH
12925: LD_INT 1
12927: ARRAY
12928: PPUSH
12929: CALL_OW 266
12933: PUSH
12934: LD_INT 5
12936: EQUAL
12937: IFFALSE 13011
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12939: LD_VAR 0 12
12943: PUSH
12944: LD_INT 1
12946: ARRAY
12947: PPUSH
12948: CALL_OW 313
12952: PUSH
12953: LD_INT 3
12955: LESS
12956: IFFALSE 12992
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12958: LD_INT 0
12960: PPUSH
12961: LD_INT 5
12963: PUSH
12964: LD_INT 8
12966: PUSH
12967: LD_INT 9
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: LIST
12974: PUSH
12975: LD_VAR 0 17
12979: ARRAY
12980: PPUSH
12981: LD_VAR 0 4
12985: PPUSH
12986: CALL_OW 380
12990: GO 13009
// PrepareHuman ( false , i , skill ) ;
12992: LD_INT 0
12994: PPUSH
12995: LD_VAR 0 8
12999: PPUSH
13000: LD_VAR 0 4
13004: PPUSH
13005: CALL_OW 380
// end else
13009: GO 13028
// PrepareHuman ( false , i , skill ) ;
13011: LD_INT 0
13013: PPUSH
13014: LD_VAR 0 8
13018: PPUSH
13019: LD_VAR 0 4
13023: PPUSH
13024: CALL_OW 380
// un := CreateHuman ;
13028: LD_ADDR_VAR 0 14
13032: PUSH
13033: CALL_OW 44
13037: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13038: LD_ADDR_VAR 0 7
13042: PUSH
13043: LD_VAR 0 7
13047: PPUSH
13048: LD_INT 1
13050: PPUSH
13051: LD_VAR 0 14
13055: PPUSH
13056: CALL_OW 2
13060: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13061: LD_VAR 0 14
13065: PPUSH
13066: LD_VAR 0 12
13070: PUSH
13071: LD_INT 1
13073: ARRAY
13074: PPUSH
13075: CALL_OW 52
// end ;
13079: GO 12714
13081: POP
13082: POP
// end ;
13083: GO 12014
13085: POP
13086: POP
// result := result ^ buildings ;
13087: LD_ADDR_VAR 0 7
13091: PUSH
13092: LD_VAR 0 7
13096: PUSH
13097: LD_VAR 0 18
13101: ADD
13102: ST_TO_ADDR
// end else
13103: GO 13246
// begin for i = 1 to personel do
13105: LD_ADDR_VAR 0 8
13109: PUSH
13110: DOUBLE
13111: LD_INT 1
13113: DEC
13114: ST_TO_ADDR
13115: LD_VAR 0 6
13119: PUSH
13120: FOR_TO
13121: IFFALSE 13244
// begin if i > 4 then
13123: LD_VAR 0 8
13127: PUSH
13128: LD_INT 4
13130: GREATER
13131: IFFALSE 13135
// break ;
13133: GO 13244
// x := personel [ i ] ;
13135: LD_ADDR_VAR 0 13
13139: PUSH
13140: LD_VAR 0 6
13144: PUSH
13145: LD_VAR 0 8
13149: ARRAY
13150: ST_TO_ADDR
// if x = - 1 then
13151: LD_VAR 0 13
13155: PUSH
13156: LD_INT 1
13158: NEG
13159: EQUAL
13160: IFFALSE 13164
// continue ;
13162: GO 13120
// PrepareHuman ( false , i , skill ) ;
13164: LD_INT 0
13166: PPUSH
13167: LD_VAR 0 8
13171: PPUSH
13172: LD_VAR 0 4
13176: PPUSH
13177: CALL_OW 380
// un := CreateHuman ;
13181: LD_ADDR_VAR 0 14
13185: PUSH
13186: CALL_OW 44
13190: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13191: LD_VAR 0 14
13195: PPUSH
13196: LD_VAR 0 1
13200: PPUSH
13201: CALL_OW 250
13205: PPUSH
13206: LD_VAR 0 1
13210: PPUSH
13211: CALL_OW 251
13215: PPUSH
13216: LD_INT 10
13218: PPUSH
13219: LD_INT 0
13221: PPUSH
13222: CALL_OW 50
// result := result ^ un ;
13226: LD_ADDR_VAR 0 7
13230: PUSH
13231: LD_VAR 0 7
13235: PUSH
13236: LD_VAR 0 14
13240: ADD
13241: ST_TO_ADDR
// end ;
13242: GO 13120
13244: POP
13245: POP
// end ; end ;
13246: LD_VAR 0 7
13250: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13251: LD_INT 0
13253: PPUSH
13254: PPUSH
13255: PPUSH
13256: PPUSH
13257: PPUSH
13258: PPUSH
13259: PPUSH
13260: PPUSH
13261: PPUSH
13262: PPUSH
13263: PPUSH
13264: PPUSH
13265: PPUSH
13266: PPUSH
13267: PPUSH
13268: PPUSH
// result := false ;
13269: LD_ADDR_VAR 0 3
13273: PUSH
13274: LD_INT 0
13276: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13277: LD_VAR 0 1
13281: NOT
13282: IFTRUE 13307
13284: PUSH
13285: LD_VAR 0 1
13289: PPUSH
13290: CALL_OW 266
13294: PUSH
13295: LD_INT 32
13297: PUSH
13298: LD_INT 33
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: IN
13305: NOT
13306: OR
13307: IFFALSE 13311
// exit ;
13309: GO 14446
// nat := GetNation ( tower ) ;
13311: LD_ADDR_VAR 0 12
13315: PUSH
13316: LD_VAR 0 1
13320: PPUSH
13321: CALL_OW 248
13325: ST_TO_ADDR
// side := GetSide ( tower ) ;
13326: LD_ADDR_VAR 0 16
13330: PUSH
13331: LD_VAR 0 1
13335: PPUSH
13336: CALL_OW 255
13340: ST_TO_ADDR
// x := GetX ( tower ) ;
13341: LD_ADDR_VAR 0 10
13345: PUSH
13346: LD_VAR 0 1
13350: PPUSH
13351: CALL_OW 250
13355: ST_TO_ADDR
// y := GetY ( tower ) ;
13356: LD_ADDR_VAR 0 11
13360: PUSH
13361: LD_VAR 0 1
13365: PPUSH
13366: CALL_OW 251
13370: ST_TO_ADDR
// if not x or not y then
13371: LD_VAR 0 10
13375: NOT
13376: IFTRUE 13385
13378: PUSH
13379: LD_VAR 0 11
13383: NOT
13384: OR
13385: IFFALSE 13389
// exit ;
13387: GO 14446
// weapon := 0 ;
13389: LD_ADDR_VAR 0 18
13393: PUSH
13394: LD_INT 0
13396: ST_TO_ADDR
// fac_list := [ ] ;
13397: LD_ADDR_VAR 0 17
13401: PUSH
13402: EMPTY
13403: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13404: LD_ADDR_VAR 0 6
13408: PUSH
13409: LD_VAR 0 1
13413: PPUSH
13414: CALL_OW 274
13418: PPUSH
13419: LD_VAR 0 2
13423: PPUSH
13424: LD_INT 0
13426: PPUSH
13427: CALL 10981 0 3
13431: PPUSH
13432: LD_INT 30
13434: PUSH
13435: LD_INT 3
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PPUSH
13442: CALL_OW 72
13446: ST_TO_ADDR
// if not factories then
13447: LD_VAR 0 6
13451: NOT
13452: IFFALSE 13456
// exit ;
13454: GO 14446
// for i in factories do
13456: LD_ADDR_VAR 0 8
13460: PUSH
13461: LD_VAR 0 6
13465: PUSH
13466: FOR_IN
13467: IFFALSE 13492
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13469: LD_ADDR_VAR 0 17
13473: PUSH
13474: LD_VAR 0 17
13478: PUSH
13479: LD_VAR 0 8
13483: PPUSH
13484: CALL_OW 478
13488: UNION
13489: ST_TO_ADDR
13490: GO 13466
13492: POP
13493: POP
// if not fac_list then
13494: LD_VAR 0 17
13498: NOT
13499: IFFALSE 13503
// exit ;
13501: GO 14446
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13503: LD_ADDR_VAR 0 5
13507: PUSH
13508: LD_INT 4
13510: PUSH
13511: LD_INT 5
13513: PUSH
13514: LD_INT 9
13516: PUSH
13517: LD_INT 10
13519: PUSH
13520: LD_INT 6
13522: PUSH
13523: LD_INT 7
13525: PUSH
13526: LD_INT 11
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 27
13540: PUSH
13541: LD_INT 28
13543: PUSH
13544: LD_INT 26
13546: PUSH
13547: LD_INT 30
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 43
13558: PUSH
13559: LD_INT 44
13561: PUSH
13562: LD_INT 46
13564: PUSH
13565: LD_INT 45
13567: PUSH
13568: LD_INT 47
13570: PUSH
13571: LD_INT 49
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: LIST
13586: PUSH
13587: LD_VAR 0 12
13591: ARRAY
13592: ST_TO_ADDR
// list := list isect fac_list ;
13593: LD_ADDR_VAR 0 5
13597: PUSH
13598: LD_VAR 0 5
13602: PUSH
13603: LD_VAR 0 17
13607: ISECT
13608: ST_TO_ADDR
// if not list then
13609: LD_VAR 0 5
13613: NOT
13614: IFFALSE 13618
// exit ;
13616: GO 14446
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13618: LD_VAR 0 12
13622: PUSH
13623: LD_INT 3
13625: EQUAL
13626: IFFALSE 13638
13628: PUSH
13629: LD_INT 49
13631: PUSH
13632: LD_VAR 0 5
13636: IN
13637: AND
13638: IFFALSE 13658
13640: PUSH
13641: LD_INT 31
13643: PPUSH
13644: LD_VAR 0 16
13648: PPUSH
13649: CALL_OW 321
13653: PUSH
13654: LD_INT 2
13656: EQUAL
13657: AND
13658: IFFALSE 13718
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13660: LD_INT 22
13662: PUSH
13663: LD_VAR 0 16
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: LD_INT 35
13674: PUSH
13675: LD_INT 49
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 91
13684: PUSH
13685: LD_VAR 0 1
13689: PUSH
13690: LD_INT 10
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: LIST
13702: PPUSH
13703: CALL_OW 69
13707: NOT
13708: IFFALSE 13718
// weapon := ru_time_lapser ;
13710: LD_ADDR_VAR 0 18
13714: PUSH
13715: LD_INT 49
13717: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13718: LD_VAR 0 12
13722: PUSH
13723: LD_INT 1
13725: PUSH
13726: LD_INT 2
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: IN
13733: IFFALSE 13757
13735: PUSH
13736: LD_INT 11
13738: PUSH
13739: LD_VAR 0 5
13743: IN
13744: IFTRUE 13756
13746: PUSH
13747: LD_INT 30
13749: PUSH
13750: LD_VAR 0 5
13754: IN
13755: OR
13756: AND
13757: IFFALSE 13777
13759: PUSH
13760: LD_INT 6
13762: PPUSH
13763: LD_VAR 0 16
13767: PPUSH
13768: CALL_OW 321
13772: PUSH
13773: LD_INT 2
13775: EQUAL
13776: AND
13777: IFFALSE 13944
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13779: LD_INT 22
13781: PUSH
13782: LD_VAR 0 16
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 2
13793: PUSH
13794: LD_INT 35
13796: PUSH
13797: LD_INT 11
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: LD_INT 35
13806: PUSH
13807: LD_INT 30
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 91
13821: PUSH
13822: LD_VAR 0 1
13826: PUSH
13827: LD_INT 18
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: PPUSH
13840: CALL_OW 69
13844: NOT
13845: IFFALSE 13921
13847: PUSH
13848: LD_INT 22
13850: PUSH
13851: LD_VAR 0 16
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 2
13862: PUSH
13863: LD_INT 30
13865: PUSH
13866: LD_INT 32
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 30
13875: PUSH
13876: LD_INT 33
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 91
13890: PUSH
13891: LD_VAR 0 1
13895: PUSH
13896: LD_INT 12
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: LIST
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: PUSH
13909: EMPTY
13910: LIST
13911: PPUSH
13912: CALL_OW 69
13916: PUSH
13917: LD_INT 2
13919: GREATER
13920: AND
13921: IFFALSE 13944
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13923: LD_ADDR_VAR 0 18
13927: PUSH
13928: LD_INT 11
13930: PUSH
13931: LD_INT 30
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: LD_VAR 0 12
13942: ARRAY
13943: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13944: LD_VAR 0 18
13948: NOT
13949: IFFALSE 13969
13951: PUSH
13952: LD_INT 40
13954: PPUSH
13955: LD_VAR 0 16
13959: PPUSH
13960: CALL_OW 321
13964: PUSH
13965: LD_INT 2
13967: EQUAL
13968: AND
13969: IFFALSE 14005
13971: PUSH
13972: LD_INT 7
13974: PUSH
13975: LD_VAR 0 5
13979: IN
13980: IFTRUE 13992
13982: PUSH
13983: LD_INT 28
13985: PUSH
13986: LD_VAR 0 5
13990: IN
13991: OR
13992: IFTRUE 14004
13994: PUSH
13995: LD_INT 45
13997: PUSH
13998: LD_VAR 0 5
14002: IN
14003: OR
14004: AND
14005: IFFALSE 14259
// begin hex := GetHexInfo ( x , y ) ;
14007: LD_ADDR_VAR 0 4
14011: PUSH
14012: LD_VAR 0 10
14016: PPUSH
14017: LD_VAR 0 11
14021: PPUSH
14022: CALL_OW 546
14026: ST_TO_ADDR
// if hex [ 1 ] then
14027: LD_VAR 0 4
14031: PUSH
14032: LD_INT 1
14034: ARRAY
14035: IFFALSE 14039
// exit ;
14037: GO 14446
// height := hex [ 2 ] ;
14039: LD_ADDR_VAR 0 15
14043: PUSH
14044: LD_VAR 0 4
14048: PUSH
14049: LD_INT 2
14051: ARRAY
14052: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14053: LD_ADDR_VAR 0 14
14057: PUSH
14058: LD_INT 0
14060: PUSH
14061: LD_INT 2
14063: PUSH
14064: LD_INT 3
14066: PUSH
14067: LD_INT 5
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: ST_TO_ADDR
// for i in tmp do
14076: LD_ADDR_VAR 0 8
14080: PUSH
14081: LD_VAR 0 14
14085: PUSH
14086: FOR_IN
14087: IFFALSE 14257
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14089: LD_ADDR_VAR 0 9
14093: PUSH
14094: LD_VAR 0 10
14098: PPUSH
14099: LD_VAR 0 8
14103: PPUSH
14104: LD_INT 5
14106: PPUSH
14107: CALL_OW 272
14111: PUSH
14112: LD_VAR 0 11
14116: PPUSH
14117: LD_VAR 0 8
14121: PPUSH
14122: LD_INT 5
14124: PPUSH
14125: CALL_OW 273
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14134: LD_VAR 0 9
14138: PUSH
14139: LD_INT 1
14141: ARRAY
14142: PPUSH
14143: LD_VAR 0 9
14147: PUSH
14148: LD_INT 2
14150: ARRAY
14151: PPUSH
14152: CALL_OW 488
14156: IFFALSE 14255
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14158: LD_ADDR_VAR 0 4
14162: PUSH
14163: LD_VAR 0 9
14167: PUSH
14168: LD_INT 1
14170: ARRAY
14171: PPUSH
14172: LD_VAR 0 9
14176: PUSH
14177: LD_INT 2
14179: ARRAY
14180: PPUSH
14181: CALL_OW 546
14185: ST_TO_ADDR
// if hex [ 1 ] then
14186: LD_VAR 0 4
14190: PUSH
14191: LD_INT 1
14193: ARRAY
14194: IFFALSE 14198
// continue ;
14196: GO 14086
// h := hex [ 2 ] ;
14198: LD_ADDR_VAR 0 13
14202: PUSH
14203: LD_VAR 0 4
14207: PUSH
14208: LD_INT 2
14210: ARRAY
14211: ST_TO_ADDR
// if h + 7 < height then
14212: LD_VAR 0 13
14216: PUSH
14217: LD_INT 7
14219: PLUS
14220: PUSH
14221: LD_VAR 0 15
14225: LESS
14226: IFFALSE 14255
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14228: LD_ADDR_VAR 0 18
14232: PUSH
14233: LD_INT 7
14235: PUSH
14236: LD_INT 28
14238: PUSH
14239: LD_INT 45
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: LD_VAR 0 12
14251: ARRAY
14252: ST_TO_ADDR
// break ;
14253: GO 14257
// end ; end ; end ;
14255: GO 14086
14257: POP
14258: POP
// end ; if not weapon then
14259: LD_VAR 0 18
14263: NOT
14264: IFFALSE 14324
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14266: LD_ADDR_VAR 0 5
14270: PUSH
14271: LD_VAR 0 5
14275: PUSH
14276: LD_INT 11
14278: PUSH
14279: LD_INT 30
14281: PUSH
14282: LD_INT 49
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: LIST
14289: DIFF
14290: ST_TO_ADDR
// if not list then
14291: LD_VAR 0 5
14295: NOT
14296: IFFALSE 14300
// exit ;
14298: GO 14446
// weapon := list [ rand ( 1 , list ) ] ;
14300: LD_ADDR_VAR 0 18
14304: PUSH
14305: LD_VAR 0 5
14309: PUSH
14310: LD_INT 1
14312: PPUSH
14313: LD_VAR 0 5
14317: PPUSH
14318: CALL_OW 12
14322: ARRAY
14323: ST_TO_ADDR
// end ; if weapon then
14324: LD_VAR 0 18
14328: IFFALSE 14446
// begin tmp := CostOfWeapon ( weapon ) ;
14330: LD_ADDR_VAR 0 14
14334: PUSH
14335: LD_VAR 0 18
14339: PPUSH
14340: CALL_OW 451
14344: ST_TO_ADDR
// j := GetBase ( tower ) ;
14345: LD_ADDR_VAR 0 9
14349: PUSH
14350: LD_VAR 0 1
14354: PPUSH
14355: CALL_OW 274
14359: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14360: LD_VAR 0 9
14364: PPUSH
14365: LD_INT 1
14367: PPUSH
14368: CALL_OW 275
14372: PUSH
14373: LD_VAR 0 14
14377: PUSH
14378: LD_INT 1
14380: ARRAY
14381: GREATEREQUAL
14382: IFFALSE 14408
14384: PUSH
14385: LD_VAR 0 9
14389: PPUSH
14390: LD_INT 2
14392: PPUSH
14393: CALL_OW 275
14397: PUSH
14398: LD_VAR 0 14
14402: PUSH
14403: LD_INT 2
14405: ARRAY
14406: GREATEREQUAL
14407: AND
14408: IFFALSE 14434
14410: PUSH
14411: LD_VAR 0 9
14415: PPUSH
14416: LD_INT 3
14418: PPUSH
14419: CALL_OW 275
14423: PUSH
14424: LD_VAR 0 14
14428: PUSH
14429: LD_INT 3
14431: ARRAY
14432: GREATEREQUAL
14433: AND
14434: IFFALSE 14446
// result := weapon ;
14436: LD_ADDR_VAR 0 3
14440: PUSH
14441: LD_VAR 0 18
14445: ST_TO_ADDR
// end ; end ;
14446: LD_VAR 0 3
14450: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14451: LD_INT 0
14453: PPUSH
14454: PPUSH
// result := true ;
14455: LD_ADDR_VAR 0 3
14459: PUSH
14460: LD_INT 1
14462: ST_TO_ADDR
// if array1 = array2 then
14463: LD_VAR 0 1
14467: PUSH
14468: LD_VAR 0 2
14472: EQUAL
14473: IFFALSE 14533
// begin for i = 1 to array1 do
14475: LD_ADDR_VAR 0 4
14479: PUSH
14480: DOUBLE
14481: LD_INT 1
14483: DEC
14484: ST_TO_ADDR
14485: LD_VAR 0 1
14489: PUSH
14490: FOR_TO
14491: IFFALSE 14529
// if array1 [ i ] <> array2 [ i ] then
14493: LD_VAR 0 1
14497: PUSH
14498: LD_VAR 0 4
14502: ARRAY
14503: PUSH
14504: LD_VAR 0 2
14508: PUSH
14509: LD_VAR 0 4
14513: ARRAY
14514: NONEQUAL
14515: IFFALSE 14527
// begin result := false ;
14517: LD_ADDR_VAR 0 3
14521: PUSH
14522: LD_INT 0
14524: ST_TO_ADDR
// break ;
14525: GO 14529
// end ;
14527: GO 14490
14529: POP
14530: POP
// end else
14531: GO 14541
// result := false ;
14533: LD_ADDR_VAR 0 3
14537: PUSH
14538: LD_INT 0
14540: ST_TO_ADDR
// end ;
14541: LD_VAR 0 3
14545: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14546: LD_INT 0
14548: PPUSH
14549: PPUSH
// if not array1 or not array2 then
14550: LD_VAR 0 1
14554: NOT
14555: IFTRUE 14564
14557: PUSH
14558: LD_VAR 0 2
14562: NOT
14563: OR
14564: IFFALSE 14568
// exit ;
14566: GO 14632
// result := true ;
14568: LD_ADDR_VAR 0 3
14572: PUSH
14573: LD_INT 1
14575: ST_TO_ADDR
// for i = 1 to array1 do
14576: LD_ADDR_VAR 0 4
14580: PUSH
14581: DOUBLE
14582: LD_INT 1
14584: DEC
14585: ST_TO_ADDR
14586: LD_VAR 0 1
14590: PUSH
14591: FOR_TO
14592: IFFALSE 14630
// if array1 [ i ] <> array2 [ i ] then
14594: LD_VAR 0 1
14598: PUSH
14599: LD_VAR 0 4
14603: ARRAY
14604: PUSH
14605: LD_VAR 0 2
14609: PUSH
14610: LD_VAR 0 4
14614: ARRAY
14615: NONEQUAL
14616: IFFALSE 14628
// begin result := false ;
14618: LD_ADDR_VAR 0 3
14622: PUSH
14623: LD_INT 0
14625: ST_TO_ADDR
// break ;
14626: GO 14630
// end ;
14628: GO 14591
14630: POP
14631: POP
// end ;
14632: LD_VAR 0 3
14636: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14637: LD_INT 0
14639: PPUSH
14640: PPUSH
14641: PPUSH
// pom := GetBase ( fac ) ;
14642: LD_ADDR_VAR 0 5
14646: PUSH
14647: LD_VAR 0 1
14651: PPUSH
14652: CALL_OW 274
14656: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14657: LD_ADDR_VAR 0 4
14661: PUSH
14662: LD_VAR 0 2
14666: PUSH
14667: LD_INT 1
14669: ARRAY
14670: PPUSH
14671: LD_VAR 0 2
14675: PUSH
14676: LD_INT 2
14678: ARRAY
14679: PPUSH
14680: LD_VAR 0 2
14684: PUSH
14685: LD_INT 3
14687: ARRAY
14688: PPUSH
14689: LD_VAR 0 2
14693: PUSH
14694: LD_INT 4
14696: ARRAY
14697: PPUSH
14698: CALL_OW 449
14702: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14703: LD_ADDR_VAR 0 3
14707: PUSH
14708: LD_VAR 0 5
14712: PPUSH
14713: LD_INT 1
14715: PPUSH
14716: CALL_OW 275
14720: PUSH
14721: LD_VAR 0 4
14725: PUSH
14726: LD_INT 1
14728: ARRAY
14729: GREATEREQUAL
14730: IFFALSE 14756
14732: PUSH
14733: LD_VAR 0 5
14737: PPUSH
14738: LD_INT 2
14740: PPUSH
14741: CALL_OW 275
14745: PUSH
14746: LD_VAR 0 4
14750: PUSH
14751: LD_INT 2
14753: ARRAY
14754: GREATEREQUAL
14755: AND
14756: IFFALSE 14782
14758: PUSH
14759: LD_VAR 0 5
14763: PPUSH
14764: LD_INT 3
14766: PPUSH
14767: CALL_OW 275
14771: PUSH
14772: LD_VAR 0 4
14776: PUSH
14777: LD_INT 3
14779: ARRAY
14780: GREATEREQUAL
14781: AND
14782: ST_TO_ADDR
// end ;
14783: LD_VAR 0 3
14787: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14788: LD_INT 0
14790: PPUSH
14791: PPUSH
14792: PPUSH
14793: PPUSH
// pom := GetBase ( building ) ;
14794: LD_ADDR_VAR 0 3
14798: PUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 274
14808: ST_TO_ADDR
// if not pom then
14809: LD_VAR 0 3
14813: NOT
14814: IFFALSE 14818
// exit ;
14816: GO 14992
// btype := GetBType ( building ) ;
14818: LD_ADDR_VAR 0 5
14822: PUSH
14823: LD_VAR 0 1
14827: PPUSH
14828: CALL_OW 266
14832: ST_TO_ADDR
// if btype = b_armoury then
14833: LD_VAR 0 5
14837: PUSH
14838: LD_INT 4
14840: EQUAL
14841: IFFALSE 14851
// btype := b_barracks ;
14843: LD_ADDR_VAR 0 5
14847: PUSH
14848: LD_INT 5
14850: ST_TO_ADDR
// if btype = b_depot then
14851: LD_VAR 0 5
14855: PUSH
14856: LD_INT 0
14858: EQUAL
14859: IFFALSE 14869
// btype := b_warehouse ;
14861: LD_ADDR_VAR 0 5
14865: PUSH
14866: LD_INT 1
14868: ST_TO_ADDR
// if btype = b_workshop then
14869: LD_VAR 0 5
14873: PUSH
14874: LD_INT 2
14876: EQUAL
14877: IFFALSE 14887
// btype := b_factory ;
14879: LD_ADDR_VAR 0 5
14883: PUSH
14884: LD_INT 3
14886: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14887: LD_ADDR_VAR 0 4
14891: PUSH
14892: LD_VAR 0 5
14896: PPUSH
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 248
14906: PPUSH
14907: CALL_OW 450
14911: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14912: LD_ADDR_VAR 0 2
14916: PUSH
14917: LD_VAR 0 3
14921: PPUSH
14922: LD_INT 1
14924: PPUSH
14925: CALL_OW 275
14929: PUSH
14930: LD_VAR 0 4
14934: PUSH
14935: LD_INT 1
14937: ARRAY
14938: GREATEREQUAL
14939: IFFALSE 14965
14941: PUSH
14942: LD_VAR 0 3
14946: PPUSH
14947: LD_INT 2
14949: PPUSH
14950: CALL_OW 275
14954: PUSH
14955: LD_VAR 0 4
14959: PUSH
14960: LD_INT 2
14962: ARRAY
14963: GREATEREQUAL
14964: AND
14965: IFFALSE 14991
14967: PUSH
14968: LD_VAR 0 3
14972: PPUSH
14973: LD_INT 3
14975: PPUSH
14976: CALL_OW 275
14980: PUSH
14981: LD_VAR 0 4
14985: PUSH
14986: LD_INT 3
14988: ARRAY
14989: GREATEREQUAL
14990: AND
14991: ST_TO_ADDR
// end ;
14992: LD_VAR 0 2
14996: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14997: LD_INT 0
14999: PPUSH
15000: PPUSH
15001: PPUSH
// pom := GetBase ( building ) ;
15002: LD_ADDR_VAR 0 4
15006: PUSH
15007: LD_VAR 0 1
15011: PPUSH
15012: CALL_OW 274
15016: ST_TO_ADDR
// if not pom then
15017: LD_VAR 0 4
15021: NOT
15022: IFFALSE 15026
// exit ;
15024: GO 15131
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15026: LD_ADDR_VAR 0 5
15030: PUSH
15031: LD_VAR 0 2
15035: PPUSH
15036: LD_VAR 0 1
15040: PPUSH
15041: CALL_OW 248
15045: PPUSH
15046: CALL_OW 450
15050: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15051: LD_ADDR_VAR 0 3
15055: PUSH
15056: LD_VAR 0 4
15060: PPUSH
15061: LD_INT 1
15063: PPUSH
15064: CALL_OW 275
15068: PUSH
15069: LD_VAR 0 5
15073: PUSH
15074: LD_INT 1
15076: ARRAY
15077: GREATEREQUAL
15078: IFFALSE 15104
15080: PUSH
15081: LD_VAR 0 4
15085: PPUSH
15086: LD_INT 2
15088: PPUSH
15089: CALL_OW 275
15093: PUSH
15094: LD_VAR 0 5
15098: PUSH
15099: LD_INT 2
15101: ARRAY
15102: GREATEREQUAL
15103: AND
15104: IFFALSE 15130
15106: PUSH
15107: LD_VAR 0 4
15111: PPUSH
15112: LD_INT 3
15114: PPUSH
15115: CALL_OW 275
15119: PUSH
15120: LD_VAR 0 5
15124: PUSH
15125: LD_INT 3
15127: ARRAY
15128: GREATEREQUAL
15129: AND
15130: ST_TO_ADDR
// end ;
15131: LD_VAR 0 3
15135: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15136: LD_INT 0
15138: PPUSH
15139: PPUSH
15140: PPUSH
15141: PPUSH
15142: PPUSH
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
15147: PPUSH
15148: PPUSH
// result := false ;
15149: LD_ADDR_VAR 0 8
15153: PUSH
15154: LD_INT 0
15156: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15157: LD_VAR 0 5
15161: NOT
15162: IFTRUE 15171
15164: PUSH
15165: LD_VAR 0 1
15169: NOT
15170: OR
15171: IFTRUE 15180
15173: PUSH
15174: LD_VAR 0 2
15178: NOT
15179: OR
15180: IFTRUE 15189
15182: PUSH
15183: LD_VAR 0 3
15187: NOT
15188: OR
15189: IFFALSE 15193
// exit ;
15191: GO 16019
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15193: LD_ADDR_VAR 0 14
15197: PUSH
15198: LD_VAR 0 1
15202: PPUSH
15203: LD_VAR 0 2
15207: PPUSH
15208: LD_VAR 0 3
15212: PPUSH
15213: LD_VAR 0 4
15217: PPUSH
15218: LD_VAR 0 5
15222: PUSH
15223: LD_INT 1
15225: ARRAY
15226: PPUSH
15227: CALL_OW 248
15231: PPUSH
15232: LD_INT 0
15234: PPUSH
15235: CALL 17300 0 6
15239: ST_TO_ADDR
// if not hexes then
15240: LD_VAR 0 14
15244: NOT
15245: IFFALSE 15249
// exit ;
15247: GO 16019
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15249: LD_ADDR_VAR 0 17
15253: PUSH
15254: LD_VAR 0 5
15258: PPUSH
15259: LD_INT 22
15261: PUSH
15262: LD_VAR 0 13
15266: PPUSH
15267: CALL_OW 255
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 2
15278: PUSH
15279: LD_INT 30
15281: PUSH
15282: LD_INT 0
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: LD_INT 30
15291: PUSH
15292: LD_INT 1
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: LIST
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PPUSH
15308: CALL_OW 72
15312: ST_TO_ADDR
// for i = 1 to hexes do
15313: LD_ADDR_VAR 0 9
15317: PUSH
15318: DOUBLE
15319: LD_INT 1
15321: DEC
15322: ST_TO_ADDR
15323: LD_VAR 0 14
15327: PUSH
15328: FOR_TO
15329: IFFALSE 16017
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15331: LD_ADDR_VAR 0 13
15335: PUSH
15336: LD_VAR 0 14
15340: PUSH
15341: LD_VAR 0 9
15345: ARRAY
15346: PUSH
15347: LD_INT 1
15349: ARRAY
15350: PPUSH
15351: LD_VAR 0 14
15355: PUSH
15356: LD_VAR 0 9
15360: ARRAY
15361: PUSH
15362: LD_INT 2
15364: ARRAY
15365: PPUSH
15366: CALL_OW 428
15370: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15371: LD_VAR 0 14
15375: PUSH
15376: LD_VAR 0 9
15380: ARRAY
15381: PUSH
15382: LD_INT 1
15384: ARRAY
15385: PPUSH
15386: LD_VAR 0 14
15390: PUSH
15391: LD_VAR 0 9
15395: ARRAY
15396: PUSH
15397: LD_INT 2
15399: ARRAY
15400: PPUSH
15401: CALL_OW 351
15405: IFTRUE 15444
15407: PUSH
15408: LD_VAR 0 14
15412: PUSH
15413: LD_VAR 0 9
15417: ARRAY
15418: PUSH
15419: LD_INT 1
15421: ARRAY
15422: PPUSH
15423: LD_VAR 0 14
15427: PUSH
15428: LD_VAR 0 9
15432: ARRAY
15433: PUSH
15434: LD_INT 2
15436: ARRAY
15437: PPUSH
15438: CALL_OW 488
15442: NOT
15443: OR
15444: IFTRUE 15461
15446: PUSH
15447: LD_VAR 0 13
15451: PPUSH
15452: CALL_OW 247
15456: PUSH
15457: LD_INT 3
15459: EQUAL
15460: OR
15461: IFFALSE 15467
// exit ;
15463: POP
15464: POP
15465: GO 16019
// if not tmp then
15467: LD_VAR 0 13
15471: NOT
15472: IFFALSE 15476
// continue ;
15474: GO 15328
// result := true ;
15476: LD_ADDR_VAR 0 8
15480: PUSH
15481: LD_INT 1
15483: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15484: LD_VAR 0 6
15488: IFFALSE 15505
15490: PUSH
15491: LD_VAR 0 13
15495: PPUSH
15496: CALL_OW 247
15500: PUSH
15501: LD_INT 2
15503: EQUAL
15504: AND
15505: IFFALSE 15522
15507: PUSH
15508: LD_VAR 0 13
15512: PPUSH
15513: CALL_OW 263
15517: PUSH
15518: LD_INT 1
15520: EQUAL
15521: AND
15522: IFFALSE 15686
// begin if IsDrivenBy ( tmp ) then
15524: LD_VAR 0 13
15528: PPUSH
15529: CALL_OW 311
15533: IFFALSE 15537
// continue ;
15535: GO 15328
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15537: LD_VAR 0 6
15541: PPUSH
15542: LD_INT 3
15544: PUSH
15545: LD_INT 60
15547: PUSH
15548: EMPTY
15549: LIST
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 3
15557: PUSH
15558: LD_INT 55
15560: PUSH
15561: EMPTY
15562: LIST
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PPUSH
15572: CALL_OW 72
15576: IFFALSE 15684
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15578: LD_ADDR_VAR 0 18
15582: PUSH
15583: LD_VAR 0 6
15587: PPUSH
15588: LD_INT 3
15590: PUSH
15591: LD_INT 60
15593: PUSH
15594: EMPTY
15595: LIST
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 3
15603: PUSH
15604: LD_INT 55
15606: PUSH
15607: EMPTY
15608: LIST
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PPUSH
15618: CALL_OW 72
15622: PUSH
15623: LD_INT 1
15625: ARRAY
15626: ST_TO_ADDR
// if IsInUnit ( driver ) then
15627: LD_VAR 0 18
15631: PPUSH
15632: CALL_OW 310
15636: IFFALSE 15647
// ComExit ( driver ) ;
15638: LD_VAR 0 18
15642: PPUSH
15643: CALL 41290 0 1
// AddComEnterUnit ( driver , tmp ) ;
15647: LD_VAR 0 18
15651: PPUSH
15652: LD_VAR 0 13
15656: PPUSH
15657: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15661: LD_VAR 0 18
15665: PPUSH
15666: LD_VAR 0 7
15670: PPUSH
15671: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15675: LD_VAR 0 18
15679: PPUSH
15680: CALL_OW 181
// end ; continue ;
15684: GO 15328
// end ; if not cleaners or not tmp in cleaners then
15686: LD_VAR 0 6
15690: NOT
15691: IFTRUE 15706
15693: PUSH
15694: LD_VAR 0 13
15698: PUSH
15699: LD_VAR 0 6
15703: IN
15704: NOT
15705: OR
15706: IFFALSE 16015
// begin if dep then
15708: LD_VAR 0 17
15712: IFFALSE 15848
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15714: LD_ADDR_VAR 0 16
15718: PUSH
15719: LD_VAR 0 17
15723: PUSH
15724: LD_INT 1
15726: ARRAY
15727: PPUSH
15728: CALL_OW 250
15732: PPUSH
15733: LD_VAR 0 17
15737: PUSH
15738: LD_INT 1
15740: ARRAY
15741: PPUSH
15742: CALL_OW 254
15746: PPUSH
15747: LD_INT 5
15749: PPUSH
15750: CALL_OW 272
15754: PUSH
15755: LD_VAR 0 17
15759: PUSH
15760: LD_INT 1
15762: ARRAY
15763: PPUSH
15764: CALL_OW 251
15768: PPUSH
15769: LD_VAR 0 17
15773: PUSH
15774: LD_INT 1
15776: ARRAY
15777: PPUSH
15778: CALL_OW 254
15782: PPUSH
15783: LD_INT 5
15785: PPUSH
15786: CALL_OW 273
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15795: LD_VAR 0 16
15799: PUSH
15800: LD_INT 1
15802: ARRAY
15803: PPUSH
15804: LD_VAR 0 16
15808: PUSH
15809: LD_INT 2
15811: ARRAY
15812: PPUSH
15813: CALL_OW 488
15817: IFFALSE 15848
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15819: LD_VAR 0 13
15823: PPUSH
15824: LD_VAR 0 16
15828: PUSH
15829: LD_INT 1
15831: ARRAY
15832: PPUSH
15833: LD_VAR 0 16
15837: PUSH
15838: LD_INT 2
15840: ARRAY
15841: PPUSH
15842: CALL_OW 111
// continue ;
15846: GO 15328
// end ; end ; r := GetDir ( tmp ) ;
15848: LD_ADDR_VAR 0 15
15852: PUSH
15853: LD_VAR 0 13
15857: PPUSH
15858: CALL_OW 254
15862: ST_TO_ADDR
// if r = 5 then
15863: LD_VAR 0 15
15867: PUSH
15868: LD_INT 5
15870: EQUAL
15871: IFFALSE 15881
// r := 0 ;
15873: LD_ADDR_VAR 0 15
15877: PUSH
15878: LD_INT 0
15880: ST_TO_ADDR
// for j = r to 5 do
15881: LD_ADDR_VAR 0 10
15885: PUSH
15886: DOUBLE
15887: LD_VAR 0 15
15891: DEC
15892: ST_TO_ADDR
15893: LD_INT 5
15895: PUSH
15896: FOR_TO
15897: IFFALSE 16013
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15899: LD_ADDR_VAR 0 11
15903: PUSH
15904: LD_VAR 0 13
15908: PPUSH
15909: CALL_OW 250
15913: PPUSH
15914: LD_VAR 0 10
15918: PPUSH
15919: LD_INT 2
15921: PPUSH
15922: CALL_OW 272
15926: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15927: LD_ADDR_VAR 0 12
15931: PUSH
15932: LD_VAR 0 13
15936: PPUSH
15937: CALL_OW 251
15941: PPUSH
15942: LD_VAR 0 10
15946: PPUSH
15947: LD_INT 2
15949: PPUSH
15950: CALL_OW 273
15954: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15955: LD_VAR 0 11
15959: PPUSH
15960: LD_VAR 0 12
15964: PPUSH
15965: CALL_OW 488
15969: IFFALSE 15988
15971: PUSH
15972: LD_VAR 0 11
15976: PPUSH
15977: LD_VAR 0 12
15981: PPUSH
15982: CALL_OW 428
15986: NOT
15987: AND
15988: IFFALSE 16011
// begin ComMoveXY ( tmp , _x , _y ) ;
15990: LD_VAR 0 13
15994: PPUSH
15995: LD_VAR 0 11
15999: PPUSH
16000: LD_VAR 0 12
16004: PPUSH
16005: CALL_OW 111
// break ;
16009: GO 16013
// end ; end ;
16011: GO 15896
16013: POP
16014: POP
// end ; end ;
16015: GO 15328
16017: POP
16018: POP
// end ;
16019: LD_VAR 0 8
16023: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16024: LD_INT 0
16026: PPUSH
// result := true ;
16027: LD_ADDR_VAR 0 3
16031: PUSH
16032: LD_INT 1
16034: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16035: LD_VAR 0 2
16039: PUSH
16040: LD_INT 24
16042: DOUBLE
16043: EQUAL
16044: IFTRUE 16054
16046: LD_INT 33
16048: DOUBLE
16049: EQUAL
16050: IFTRUE 16054
16052: GO 16079
16054: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16055: LD_ADDR_VAR 0 3
16059: PUSH
16060: LD_INT 32
16062: PPUSH
16063: LD_VAR 0 1
16067: PPUSH
16068: CALL_OW 321
16072: PUSH
16073: LD_INT 2
16075: EQUAL
16076: ST_TO_ADDR
16077: GO 16395
16079: LD_INT 20
16081: DOUBLE
16082: EQUAL
16083: IFTRUE 16087
16085: GO 16112
16087: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16088: LD_ADDR_VAR 0 3
16092: PUSH
16093: LD_INT 6
16095: PPUSH
16096: LD_VAR 0 1
16100: PPUSH
16101: CALL_OW 321
16105: PUSH
16106: LD_INT 2
16108: EQUAL
16109: ST_TO_ADDR
16110: GO 16395
16112: LD_INT 22
16114: DOUBLE
16115: EQUAL
16116: IFTRUE 16126
16118: LD_INT 36
16120: DOUBLE
16121: EQUAL
16122: IFTRUE 16126
16124: GO 16151
16126: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16127: LD_ADDR_VAR 0 3
16131: PUSH
16132: LD_INT 15
16134: PPUSH
16135: LD_VAR 0 1
16139: PPUSH
16140: CALL_OW 321
16144: PUSH
16145: LD_INT 2
16147: EQUAL
16148: ST_TO_ADDR
16149: GO 16395
16151: LD_INT 30
16153: DOUBLE
16154: EQUAL
16155: IFTRUE 16159
16157: GO 16184
16159: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16160: LD_ADDR_VAR 0 3
16164: PUSH
16165: LD_INT 20
16167: PPUSH
16168: LD_VAR 0 1
16172: PPUSH
16173: CALL_OW 321
16177: PUSH
16178: LD_INT 2
16180: EQUAL
16181: ST_TO_ADDR
16182: GO 16395
16184: LD_INT 28
16186: DOUBLE
16187: EQUAL
16188: IFTRUE 16198
16190: LD_INT 21
16192: DOUBLE
16193: EQUAL
16194: IFTRUE 16198
16196: GO 16223
16198: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16199: LD_ADDR_VAR 0 3
16203: PUSH
16204: LD_INT 21
16206: PPUSH
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 321
16216: PUSH
16217: LD_INT 2
16219: EQUAL
16220: ST_TO_ADDR
16221: GO 16395
16223: LD_INT 16
16225: DOUBLE
16226: EQUAL
16227: IFTRUE 16231
16229: GO 16256
16231: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16232: LD_ADDR_VAR 0 3
16236: PUSH
16237: LD_INT 84
16239: PPUSH
16240: LD_VAR 0 1
16244: PPUSH
16245: CALL_OW 321
16249: PUSH
16250: LD_INT 2
16252: EQUAL
16253: ST_TO_ADDR
16254: GO 16395
16256: LD_INT 19
16258: DOUBLE
16259: EQUAL
16260: IFTRUE 16270
16262: LD_INT 23
16264: DOUBLE
16265: EQUAL
16266: IFTRUE 16270
16268: GO 16295
16270: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16271: LD_ADDR_VAR 0 3
16275: PUSH
16276: LD_INT 83
16278: PPUSH
16279: LD_VAR 0 1
16283: PPUSH
16284: CALL_OW 321
16288: PUSH
16289: LD_INT 2
16291: EQUAL
16292: ST_TO_ADDR
16293: GO 16395
16295: LD_INT 17
16297: DOUBLE
16298: EQUAL
16299: IFTRUE 16303
16301: GO 16328
16303: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16304: LD_ADDR_VAR 0 3
16308: PUSH
16309: LD_INT 39
16311: PPUSH
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL_OW 321
16321: PUSH
16322: LD_INT 2
16324: EQUAL
16325: ST_TO_ADDR
16326: GO 16395
16328: LD_INT 18
16330: DOUBLE
16331: EQUAL
16332: IFTRUE 16336
16334: GO 16361
16336: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16337: LD_ADDR_VAR 0 3
16341: PUSH
16342: LD_INT 40
16344: PPUSH
16345: LD_VAR 0 1
16349: PPUSH
16350: CALL_OW 321
16354: PUSH
16355: LD_INT 2
16357: EQUAL
16358: ST_TO_ADDR
16359: GO 16395
16361: LD_INT 27
16363: DOUBLE
16364: EQUAL
16365: IFTRUE 16369
16367: GO 16394
16369: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16370: LD_ADDR_VAR 0 3
16374: PUSH
16375: LD_INT 35
16377: PPUSH
16378: LD_VAR 0 1
16382: PPUSH
16383: CALL_OW 321
16387: PUSH
16388: LD_INT 2
16390: EQUAL
16391: ST_TO_ADDR
16392: GO 16395
16394: POP
// end ;
16395: LD_VAR 0 3
16399: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16400: LD_INT 0
16402: PPUSH
16403: PPUSH
16404: PPUSH
16405: PPUSH
16406: PPUSH
16407: PPUSH
16408: PPUSH
16409: PPUSH
16410: PPUSH
16411: PPUSH
16412: PPUSH
// result := false ;
16413: LD_ADDR_VAR 0 6
16417: PUSH
16418: LD_INT 0
16420: ST_TO_ADDR
// if btype = b_depot then
16421: LD_VAR 0 2
16425: PUSH
16426: LD_INT 0
16428: EQUAL
16429: IFFALSE 16441
// begin result := true ;
16431: LD_ADDR_VAR 0 6
16435: PUSH
16436: LD_INT 1
16438: ST_TO_ADDR
// exit ;
16439: GO 17295
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16441: LD_VAR 0 1
16445: NOT
16446: IFTRUE 16471
16448: PUSH
16449: LD_VAR 0 1
16453: PPUSH
16454: CALL_OW 266
16458: PUSH
16459: LD_INT 0
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: IN
16469: NOT
16470: OR
16471: IFTRUE 16480
16473: PUSH
16474: LD_VAR 0 2
16478: NOT
16479: OR
16480: IFTRUE 16516
16482: PUSH
16483: LD_VAR 0 5
16487: PUSH
16488: LD_INT 0
16490: PUSH
16491: LD_INT 1
16493: PUSH
16494: LD_INT 2
16496: PUSH
16497: LD_INT 3
16499: PUSH
16500: LD_INT 4
16502: PUSH
16503: LD_INT 5
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: IN
16514: NOT
16515: OR
16516: IFTRUE 16535
16518: PUSH
16519: LD_VAR 0 3
16523: PPUSH
16524: LD_VAR 0 4
16528: PPUSH
16529: CALL_OW 488
16533: NOT
16534: OR
16535: IFFALSE 16539
// exit ;
16537: GO 17295
// side := GetSide ( depot ) ;
16539: LD_ADDR_VAR 0 9
16543: PUSH
16544: LD_VAR 0 1
16548: PPUSH
16549: CALL_OW 255
16553: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16554: LD_VAR 0 9
16558: PPUSH
16559: LD_VAR 0 2
16563: PPUSH
16564: CALL 16024 0 2
16568: NOT
16569: IFFALSE 16573
// exit ;
16571: GO 17295
// pom := GetBase ( depot ) ;
16573: LD_ADDR_VAR 0 10
16577: PUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 274
16587: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16588: LD_ADDR_VAR 0 11
16592: PUSH
16593: LD_VAR 0 2
16597: PPUSH
16598: LD_VAR 0 1
16602: PPUSH
16603: CALL_OW 248
16607: PPUSH
16608: CALL_OW 450
16612: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16613: LD_VAR 0 10
16617: PPUSH
16618: LD_INT 1
16620: PPUSH
16621: CALL_OW 275
16625: PUSH
16626: LD_VAR 0 11
16630: PUSH
16631: LD_INT 1
16633: ARRAY
16634: GREATEREQUAL
16635: IFFALSE 16661
16637: PUSH
16638: LD_VAR 0 10
16642: PPUSH
16643: LD_INT 2
16645: PPUSH
16646: CALL_OW 275
16650: PUSH
16651: LD_VAR 0 11
16655: PUSH
16656: LD_INT 2
16658: ARRAY
16659: GREATEREQUAL
16660: AND
16661: IFFALSE 16687
16663: PUSH
16664: LD_VAR 0 10
16668: PPUSH
16669: LD_INT 3
16671: PPUSH
16672: CALL_OW 275
16676: PUSH
16677: LD_VAR 0 11
16681: PUSH
16682: LD_INT 3
16684: ARRAY
16685: GREATEREQUAL
16686: AND
16687: NOT
16688: IFFALSE 16692
// exit ;
16690: GO 17295
// if GetBType ( depot ) = b_depot then
16692: LD_VAR 0 1
16696: PPUSH
16697: CALL_OW 266
16701: PUSH
16702: LD_INT 0
16704: EQUAL
16705: IFFALSE 16717
// dist := 28 else
16707: LD_ADDR_VAR 0 14
16711: PUSH
16712: LD_INT 28
16714: ST_TO_ADDR
16715: GO 16725
// dist := 36 ;
16717: LD_ADDR_VAR 0 14
16721: PUSH
16722: LD_INT 36
16724: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16725: LD_VAR 0 1
16729: PPUSH
16730: LD_VAR 0 3
16734: PPUSH
16735: LD_VAR 0 4
16739: PPUSH
16740: CALL_OW 297
16744: PUSH
16745: LD_VAR 0 14
16749: GREATER
16750: IFFALSE 16754
// exit ;
16752: GO 17295
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16754: LD_ADDR_VAR 0 12
16758: PUSH
16759: LD_VAR 0 2
16763: PPUSH
16764: LD_VAR 0 3
16768: PPUSH
16769: LD_VAR 0 4
16773: PPUSH
16774: LD_VAR 0 5
16778: PPUSH
16779: LD_VAR 0 1
16783: PPUSH
16784: CALL_OW 248
16788: PPUSH
16789: LD_INT 0
16791: PPUSH
16792: CALL 17300 0 6
16796: ST_TO_ADDR
// if not hexes then
16797: LD_VAR 0 12
16801: NOT
16802: IFFALSE 16806
// exit ;
16804: GO 17295
// hex := GetHexInfo ( x , y ) ;
16806: LD_ADDR_VAR 0 15
16810: PUSH
16811: LD_VAR 0 3
16815: PPUSH
16816: LD_VAR 0 4
16820: PPUSH
16821: CALL_OW 546
16825: ST_TO_ADDR
// if hex [ 1 ] then
16826: LD_VAR 0 15
16830: PUSH
16831: LD_INT 1
16833: ARRAY
16834: IFFALSE 16838
// exit ;
16836: GO 17295
// height := hex [ 2 ] ;
16838: LD_ADDR_VAR 0 13
16842: PUSH
16843: LD_VAR 0 15
16847: PUSH
16848: LD_INT 2
16850: ARRAY
16851: ST_TO_ADDR
// for i = 1 to hexes do
16852: LD_ADDR_VAR 0 7
16856: PUSH
16857: DOUBLE
16858: LD_INT 1
16860: DEC
16861: ST_TO_ADDR
16862: LD_VAR 0 12
16866: PUSH
16867: FOR_TO
16868: IFFALSE 17212
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16870: LD_VAR 0 12
16874: PUSH
16875: LD_VAR 0 7
16879: ARRAY
16880: PUSH
16881: LD_INT 1
16883: ARRAY
16884: PPUSH
16885: LD_VAR 0 12
16889: PUSH
16890: LD_VAR 0 7
16894: ARRAY
16895: PUSH
16896: LD_INT 2
16898: ARRAY
16899: PPUSH
16900: CALL_OW 488
16904: NOT
16905: IFTRUE 16947
16907: PUSH
16908: LD_VAR 0 12
16912: PUSH
16913: LD_VAR 0 7
16917: ARRAY
16918: PUSH
16919: LD_INT 1
16921: ARRAY
16922: PPUSH
16923: LD_VAR 0 12
16927: PUSH
16928: LD_VAR 0 7
16932: ARRAY
16933: PUSH
16934: LD_INT 2
16936: ARRAY
16937: PPUSH
16938: CALL_OW 428
16942: PUSH
16943: LD_INT 0
16945: GREATER
16946: OR
16947: IFTRUE 16985
16949: PUSH
16950: LD_VAR 0 12
16954: PUSH
16955: LD_VAR 0 7
16959: ARRAY
16960: PUSH
16961: LD_INT 1
16963: ARRAY
16964: PPUSH
16965: LD_VAR 0 12
16969: PUSH
16970: LD_VAR 0 7
16974: ARRAY
16975: PUSH
16976: LD_INT 2
16978: ARRAY
16979: PPUSH
16980: CALL_OW 351
16984: OR
16985: IFFALSE 16991
// exit ;
16987: POP
16988: POP
16989: GO 17295
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16991: LD_ADDR_VAR 0 8
16995: PUSH
16996: LD_VAR 0 12
17000: PUSH
17001: LD_VAR 0 7
17005: ARRAY
17006: PUSH
17007: LD_INT 1
17009: ARRAY
17010: PPUSH
17011: LD_VAR 0 12
17015: PUSH
17016: LD_VAR 0 7
17020: ARRAY
17021: PUSH
17022: LD_INT 2
17024: ARRAY
17025: PPUSH
17026: CALL_OW 546
17030: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17031: LD_VAR 0 8
17035: PUSH
17036: LD_INT 1
17038: ARRAY
17039: IFTRUE 17061
17041: PUSH
17042: LD_VAR 0 8
17046: PUSH
17047: LD_INT 2
17049: ARRAY
17050: PUSH
17051: LD_VAR 0 13
17055: PUSH
17056: LD_INT 2
17058: PLUS
17059: GREATER
17060: OR
17061: IFTRUE 17083
17063: PUSH
17064: LD_VAR 0 8
17068: PUSH
17069: LD_INT 2
17071: ARRAY
17072: PUSH
17073: LD_VAR 0 13
17077: PUSH
17078: LD_INT 2
17080: MINUS
17081: LESS
17082: OR
17083: IFTRUE 17151
17085: PUSH
17086: LD_VAR 0 8
17090: PUSH
17091: LD_INT 3
17093: ARRAY
17094: PUSH
17095: LD_INT 0
17097: PUSH
17098: LD_INT 8
17100: PUSH
17101: LD_INT 9
17103: PUSH
17104: LD_INT 10
17106: PUSH
17107: LD_INT 11
17109: PUSH
17110: LD_INT 12
17112: PUSH
17113: LD_INT 13
17115: PUSH
17116: LD_INT 16
17118: PUSH
17119: LD_INT 17
17121: PUSH
17122: LD_INT 18
17124: PUSH
17125: LD_INT 19
17127: PUSH
17128: LD_INT 20
17130: PUSH
17131: LD_INT 21
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: IN
17149: NOT
17150: OR
17151: IFTRUE 17164
17153: PUSH
17154: LD_VAR 0 8
17158: PUSH
17159: LD_INT 5
17161: ARRAY
17162: NOT
17163: OR
17164: IFTRUE 17204
17166: PUSH
17167: LD_VAR 0 8
17171: PUSH
17172: LD_INT 6
17174: ARRAY
17175: PUSH
17176: LD_INT 1
17178: PUSH
17179: LD_INT 2
17181: PUSH
17182: LD_INT 7
17184: PUSH
17185: LD_INT 9
17187: PUSH
17188: LD_INT 10
17190: PUSH
17191: LD_INT 11
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: IN
17202: NOT
17203: OR
17204: IFFALSE 17210
// exit ;
17206: POP
17207: POP
17208: GO 17295
// end ;
17210: GO 16867
17212: POP
17213: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17214: LD_VAR 0 9
17218: PPUSH
17219: LD_VAR 0 3
17223: PPUSH
17224: LD_VAR 0 4
17228: PPUSH
17229: LD_INT 20
17231: PPUSH
17232: CALL 9114 0 4
17236: PUSH
17237: LD_INT 4
17239: ARRAY
17240: IFFALSE 17244
// exit ;
17242: GO 17295
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17244: LD_VAR 0 2
17248: PUSH
17249: LD_INT 29
17251: PUSH
17252: LD_INT 30
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: IN
17259: IFFALSE 17283
17261: PUSH
17262: LD_VAR 0 3
17266: PPUSH
17267: LD_VAR 0 4
17271: PPUSH
17272: LD_VAR 0 9
17276: PPUSH
17277: CALL_OW 440
17281: NOT
17282: AND
17283: IFFALSE 17287
// exit ;
17285: GO 17295
// result := true ;
17287: LD_ADDR_VAR 0 6
17291: PUSH
17292: LD_INT 1
17294: ST_TO_ADDR
// end ;
17295: LD_VAR 0 6
17299: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17300: LD_INT 0
17302: PPUSH
17303: PPUSH
17304: PPUSH
17305: PPUSH
17306: PPUSH
17307: PPUSH
17308: PPUSH
17309: PPUSH
17310: PPUSH
17311: PPUSH
17312: PPUSH
17313: PPUSH
17314: PPUSH
17315: PPUSH
17316: PPUSH
17317: PPUSH
17318: PPUSH
17319: PPUSH
17320: PPUSH
17321: PPUSH
17322: PPUSH
17323: PPUSH
17324: PPUSH
17325: PPUSH
17326: PPUSH
17327: PPUSH
17328: PPUSH
17329: PPUSH
17330: PPUSH
17331: PPUSH
17332: PPUSH
17333: PPUSH
17334: PPUSH
17335: PPUSH
17336: PPUSH
17337: PPUSH
17338: PPUSH
17339: PPUSH
17340: PPUSH
17341: PPUSH
17342: PPUSH
17343: PPUSH
17344: PPUSH
17345: PPUSH
17346: PPUSH
17347: PPUSH
17348: PPUSH
17349: PPUSH
17350: PPUSH
17351: PPUSH
17352: PPUSH
17353: PPUSH
17354: PPUSH
17355: PPUSH
17356: PPUSH
17357: PPUSH
17358: PPUSH
17359: PPUSH
// result = [ ] ;
17360: LD_ADDR_VAR 0 7
17364: PUSH
17365: EMPTY
17366: ST_TO_ADDR
// temp_list = [ ] ;
17367: LD_ADDR_VAR 0 9
17371: PUSH
17372: EMPTY
17373: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17374: LD_VAR 0 4
17378: PUSH
17379: LD_INT 0
17381: PUSH
17382: LD_INT 1
17384: PUSH
17385: LD_INT 2
17387: PUSH
17388: LD_INT 3
17390: PUSH
17391: LD_INT 4
17393: PUSH
17394: LD_INT 5
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: IN
17405: NOT
17406: IFTRUE 17449
17408: PUSH
17409: LD_VAR 0 1
17413: PUSH
17414: LD_INT 0
17416: PUSH
17417: LD_INT 1
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: IN
17424: IFFALSE 17448
17426: PUSH
17427: LD_VAR 0 5
17431: PUSH
17432: LD_INT 1
17434: PUSH
17435: LD_INT 2
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: LIST
17445: IN
17446: NOT
17447: AND
17448: OR
17449: IFFALSE 17453
// exit ;
17451: GO 35852
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17453: LD_VAR 0 1
17457: PUSH
17458: LD_INT 6
17460: PUSH
17461: LD_INT 7
17463: PUSH
17464: LD_INT 8
17466: PUSH
17467: LD_INT 13
17469: PUSH
17470: LD_INT 12
17472: PUSH
17473: LD_INT 15
17475: PUSH
17476: LD_INT 11
17478: PUSH
17479: LD_INT 14
17481: PUSH
17482: LD_INT 10
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: IN
17496: IFFALSE 17506
// btype = b_lab ;
17498: LD_ADDR_VAR 0 1
17502: PUSH
17503: LD_INT 6
17505: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17506: LD_VAR 0 6
17510: PUSH
17511: LD_INT 0
17513: PUSH
17514: LD_INT 1
17516: PUSH
17517: LD_INT 2
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: LIST
17524: IN
17525: NOT
17526: IFTRUE 17594
17528: PUSH
17529: LD_VAR 0 1
17533: PUSH
17534: LD_INT 0
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: LD_INT 2
17542: PUSH
17543: LD_INT 3
17545: PUSH
17546: LD_INT 6
17548: PUSH
17549: LD_INT 36
17551: PUSH
17552: LD_INT 4
17554: PUSH
17555: LD_INT 5
17557: PUSH
17558: LD_INT 31
17560: PUSH
17561: LD_INT 32
17563: PUSH
17564: LD_INT 33
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: IN
17580: NOT
17581: IFFALSE 17593
17583: PUSH
17584: LD_VAR 0 6
17588: PUSH
17589: LD_INT 1
17591: EQUAL
17592: AND
17593: OR
17594: IFTRUE 17626
17596: PUSH
17597: LD_VAR 0 1
17601: PUSH
17602: LD_INT 2
17604: PUSH
17605: LD_INT 3
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: IN
17612: NOT
17613: IFFALSE 17625
17615: PUSH
17616: LD_VAR 0 6
17620: PUSH
17621: LD_INT 2
17623: EQUAL
17624: AND
17625: OR
17626: IFFALSE 17636
// mode = 0 ;
17628: LD_ADDR_VAR 0 6
17632: PUSH
17633: LD_INT 0
17635: ST_TO_ADDR
// case mode of 0 :
17636: LD_VAR 0 6
17640: PUSH
17641: LD_INT 0
17643: DOUBLE
17644: EQUAL
17645: IFTRUE 17649
17647: GO 29102
17649: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17650: LD_ADDR_VAR 0 11
17654: PUSH
17655: LD_INT 0
17657: PUSH
17658: LD_INT 0
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 0
17667: PUSH
17668: LD_INT 1
17670: NEG
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 1
17678: PUSH
17679: LD_INT 0
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 1
17688: PUSH
17689: LD_INT 1
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: LD_INT 0
17698: PUSH
17699: LD_INT 1
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 1
17708: NEG
17709: PUSH
17710: LD_INT 0
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 1
17719: NEG
17720: PUSH
17721: LD_INT 1
17723: NEG
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 1
17731: NEG
17732: PUSH
17733: LD_INT 2
17735: NEG
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 0
17743: PUSH
17744: LD_INT 2
17746: NEG
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 1
17754: PUSH
17755: LD_INT 1
17757: NEG
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: LD_INT 1
17765: PUSH
17766: LD_INT 2
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: PUSH
17773: LD_INT 0
17775: PUSH
17776: LD_INT 2
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 1
17785: NEG
17786: PUSH
17787: LD_INT 1
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 1
17796: PUSH
17797: LD_INT 3
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 0
17806: PUSH
17807: LD_INT 3
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 1
17816: NEG
17817: PUSH
17818: LD_INT 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17843: LD_ADDR_VAR 0 12
17847: PUSH
17848: LD_INT 0
17850: PUSH
17851: LD_INT 0
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 0
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: LD_INT 1
17871: PUSH
17872: LD_INT 0
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: LD_INT 1
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 0
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 1
17901: NEG
17902: PUSH
17903: LD_INT 0
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 1
17912: NEG
17913: PUSH
17914: LD_INT 1
17916: NEG
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 1
17924: PUSH
17925: LD_INT 1
17927: NEG
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: LD_INT 2
17935: PUSH
17936: LD_INT 0
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 2
17945: PUSH
17946: LD_INT 1
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 1
17955: NEG
17956: PUSH
17957: LD_INT 1
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 2
17966: NEG
17967: PUSH
17968: LD_INT 0
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 2
17977: NEG
17978: PUSH
17979: LD_INT 1
17981: NEG
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 2
17989: NEG
17990: PUSH
17991: LD_INT 1
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 3
18000: NEG
18001: PUSH
18002: LD_INT 0
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 3
18011: NEG
18012: PUSH
18013: LD_INT 1
18015: NEG
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18039: LD_ADDR_VAR 0 13
18043: PUSH
18044: LD_INT 0
18046: PUSH
18047: LD_INT 0
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: LD_INT 1
18059: NEG
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 1
18067: PUSH
18068: LD_INT 0
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 1
18077: PUSH
18078: LD_INT 1
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 0
18087: PUSH
18088: LD_INT 1
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 1
18097: NEG
18098: PUSH
18099: LD_INT 0
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 1
18108: NEG
18109: PUSH
18110: LD_INT 1
18112: NEG
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 1
18120: NEG
18121: PUSH
18122: LD_INT 2
18124: NEG
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 2
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 2
18142: PUSH
18143: LD_INT 2
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 1
18152: PUSH
18153: LD_INT 2
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 2
18162: NEG
18163: PUSH
18164: LD_INT 1
18166: NEG
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 2
18174: NEG
18175: PUSH
18176: LD_INT 2
18178: NEG
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 2
18186: NEG
18187: PUSH
18188: LD_INT 3
18190: NEG
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 3
18198: NEG
18199: PUSH
18200: LD_INT 2
18202: NEG
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 3
18210: NEG
18211: PUSH
18212: LD_INT 3
18214: NEG
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18238: LD_ADDR_VAR 0 14
18242: PUSH
18243: LD_INT 0
18245: PUSH
18246: LD_INT 0
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 0
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 1
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: LD_INT 1
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 1
18296: NEG
18297: PUSH
18298: LD_INT 0
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 1
18307: NEG
18308: PUSH
18309: LD_INT 1
18311: NEG
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 1
18319: NEG
18320: PUSH
18321: LD_INT 2
18323: NEG
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 0
18331: PUSH
18332: LD_INT 2
18334: NEG
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 1
18342: PUSH
18343: LD_INT 1
18345: NEG
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: LD_INT 2
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: LD_INT 2
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 1
18373: NEG
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: NEG
18385: PUSH
18386: LD_INT 3
18388: NEG
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 0
18396: PUSH
18397: LD_INT 3
18399: NEG
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 1
18407: PUSH
18408: LD_INT 2
18410: NEG
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18434: LD_ADDR_VAR 0 15
18438: PUSH
18439: LD_INT 0
18441: PUSH
18442: LD_INT 0
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 0
18451: PUSH
18452: LD_INT 1
18454: NEG
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 1
18462: PUSH
18463: LD_INT 0
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 1
18472: PUSH
18473: LD_INT 1
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 0
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 1
18492: NEG
18493: PUSH
18494: LD_INT 0
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 1
18503: NEG
18504: PUSH
18505: LD_INT 1
18507: NEG
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 1
18515: PUSH
18516: LD_INT 1
18518: NEG
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 2
18526: PUSH
18527: LD_INT 0
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 2
18536: PUSH
18537: LD_INT 1
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 1
18546: NEG
18547: PUSH
18548: LD_INT 1
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 2
18557: NEG
18558: PUSH
18559: LD_INT 0
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 2
18568: NEG
18569: PUSH
18570: LD_INT 1
18572: NEG
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 2
18580: PUSH
18581: LD_INT 1
18583: NEG
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 3
18591: PUSH
18592: LD_INT 0
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 3
18601: PUSH
18602: LD_INT 1
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18627: LD_ADDR_VAR 0 16
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: LD_INT 0
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 0
18644: PUSH
18645: LD_INT 1
18647: NEG
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 1
18655: PUSH
18656: LD_INT 0
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 1
18665: PUSH
18666: LD_INT 1
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 0
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 1
18685: NEG
18686: PUSH
18687: LD_INT 0
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 1
18696: NEG
18697: PUSH
18698: LD_INT 1
18700: NEG
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 1
18708: NEG
18709: PUSH
18710: LD_INT 2
18712: NEG
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 2
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 2
18730: PUSH
18731: LD_INT 2
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 1
18740: PUSH
18741: LD_INT 2
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 2
18750: NEG
18751: PUSH
18752: LD_INT 1
18754: NEG
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 2
18762: NEG
18763: PUSH
18764: LD_INT 2
18766: NEG
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 3
18774: PUSH
18775: LD_INT 2
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 3
18784: PUSH
18785: LD_INT 3
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 2
18794: PUSH
18795: LD_INT 3
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18820: LD_ADDR_VAR 0 17
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: LD_INT 0
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 0
18837: PUSH
18838: LD_INT 1
18840: NEG
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 1
18848: PUSH
18849: LD_INT 0
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: LD_INT 1
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 0
18868: PUSH
18869: LD_INT 1
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 1
18878: NEG
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 1
18889: NEG
18890: PUSH
18891: LD_INT 1
18893: NEG
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 1
18901: NEG
18902: PUSH
18903: LD_INT 2
18905: NEG
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 0
18913: PUSH
18914: LD_INT 2
18916: NEG
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: LD_INT 1
18927: NEG
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 2
18935: PUSH
18936: LD_INT 0
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 2
18955: PUSH
18956: LD_INT 2
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 1
18965: PUSH
18966: LD_INT 2
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 0
18975: PUSH
18976: LD_INT 2
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 1
18985: NEG
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 2
18996: NEG
18997: PUSH
18998: LD_INT 0
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 2
19007: NEG
19008: PUSH
19009: LD_INT 1
19011: NEG
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 2
19019: NEG
19020: PUSH
19021: LD_INT 2
19023: NEG
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19050: LD_ADDR_VAR 0 18
19054: PUSH
19055: LD_INT 0
19057: PUSH
19058: LD_INT 0
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 0
19067: PUSH
19068: LD_INT 1
19070: NEG
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 1
19078: PUSH
19079: LD_INT 0
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 1
19088: PUSH
19089: LD_INT 1
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: LD_INT 0
19098: PUSH
19099: LD_INT 1
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 1
19108: NEG
19109: PUSH
19110: LD_INT 0
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 1
19119: NEG
19120: PUSH
19121: LD_INT 1
19123: NEG
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 1
19131: NEG
19132: PUSH
19133: LD_INT 2
19135: NEG
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 0
19143: PUSH
19144: LD_INT 2
19146: NEG
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: LD_INT 1
19157: NEG
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 2
19165: PUSH
19166: LD_INT 0
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 2
19175: PUSH
19176: LD_INT 1
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 2
19185: PUSH
19186: LD_INT 2
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 1
19195: PUSH
19196: LD_INT 2
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 0
19205: PUSH
19206: LD_INT 2
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 1
19215: NEG
19216: PUSH
19217: LD_INT 1
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 2
19226: NEG
19227: PUSH
19228: LD_INT 0
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 2
19237: NEG
19238: PUSH
19239: LD_INT 1
19241: NEG
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 2
19249: NEG
19250: PUSH
19251: LD_INT 2
19253: NEG
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19280: LD_ADDR_VAR 0 19
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: LD_INT 0
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 0
19297: PUSH
19298: LD_INT 1
19300: NEG
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 1
19308: PUSH
19309: LD_INT 0
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 1
19318: PUSH
19319: LD_INT 1
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 0
19328: PUSH
19329: LD_INT 1
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 1
19338: NEG
19339: PUSH
19340: LD_INT 0
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 1
19349: NEG
19350: PUSH
19351: LD_INT 1
19353: NEG
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 1
19361: NEG
19362: PUSH
19363: LD_INT 2
19365: NEG
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 0
19373: PUSH
19374: LD_INT 2
19376: NEG
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 1
19384: PUSH
19385: LD_INT 1
19387: NEG
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 2
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 2
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 2
19415: PUSH
19416: LD_INT 2
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 1
19425: PUSH
19426: LD_INT 2
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 0
19435: PUSH
19436: LD_INT 2
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 1
19445: NEG
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 2
19456: NEG
19457: PUSH
19458: LD_INT 0
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 2
19467: NEG
19468: PUSH
19469: LD_INT 1
19471: NEG
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 2
19479: NEG
19480: PUSH
19481: LD_INT 2
19483: NEG
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19510: LD_ADDR_VAR 0 20
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: LD_INT 0
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 0
19527: PUSH
19528: LD_INT 1
19530: NEG
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 1
19538: PUSH
19539: LD_INT 0
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 1
19548: PUSH
19549: LD_INT 1
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 0
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 1
19568: NEG
19569: PUSH
19570: LD_INT 0
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 1
19579: NEG
19580: PUSH
19581: LD_INT 1
19583: NEG
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 1
19591: NEG
19592: PUSH
19593: LD_INT 2
19595: NEG
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 0
19603: PUSH
19604: LD_INT 2
19606: NEG
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 1
19614: PUSH
19615: LD_INT 1
19617: NEG
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 2
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 2
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 2
19645: PUSH
19646: LD_INT 2
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 1
19655: PUSH
19656: LD_INT 2
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 0
19665: PUSH
19666: LD_INT 2
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 1
19675: NEG
19676: PUSH
19677: LD_INT 1
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 2
19686: NEG
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 2
19697: NEG
19698: PUSH
19699: LD_INT 1
19701: NEG
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 2
19709: NEG
19710: PUSH
19711: LD_INT 2
19713: NEG
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19740: LD_ADDR_VAR 0 21
19744: PUSH
19745: LD_INT 0
19747: PUSH
19748: LD_INT 0
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 0
19757: PUSH
19758: LD_INT 1
19760: NEG
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: LD_INT 1
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 0
19788: PUSH
19789: LD_INT 1
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 1
19798: NEG
19799: PUSH
19800: LD_INT 0
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 1
19809: NEG
19810: PUSH
19811: LD_INT 1
19813: NEG
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 1
19821: NEG
19822: PUSH
19823: LD_INT 2
19825: NEG
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 0
19833: PUSH
19834: LD_INT 2
19836: NEG
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: LD_INT 1
19847: NEG
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 2
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 2
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 2
19875: PUSH
19876: LD_INT 2
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 1
19885: PUSH
19886: LD_INT 2
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 0
19895: PUSH
19896: LD_INT 2
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 1
19905: NEG
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 2
19916: NEG
19917: PUSH
19918: LD_INT 0
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 2
19927: NEG
19928: PUSH
19929: LD_INT 1
19931: NEG
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 2
19939: NEG
19940: PUSH
19941: LD_INT 2
19943: NEG
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19970: LD_ADDR_VAR 0 22
19974: PUSH
19975: LD_INT 0
19977: PUSH
19978: LD_INT 0
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 0
19987: PUSH
19988: LD_INT 1
19990: NEG
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: LD_INT 0
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 1
20008: PUSH
20009: LD_INT 1
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 0
20018: PUSH
20019: LD_INT 1
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 1
20028: NEG
20029: PUSH
20030: LD_INT 0
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 1
20039: NEG
20040: PUSH
20041: LD_INT 1
20043: NEG
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 1
20051: NEG
20052: PUSH
20053: LD_INT 2
20055: NEG
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 0
20063: PUSH
20064: LD_INT 2
20066: NEG
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 1
20074: PUSH
20075: LD_INT 1
20077: NEG
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 2
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 2
20095: PUSH
20096: LD_INT 1
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 2
20105: PUSH
20106: LD_INT 2
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 1
20115: PUSH
20116: LD_INT 2
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 0
20125: PUSH
20126: LD_INT 2
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 1
20135: NEG
20136: PUSH
20137: LD_INT 1
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 2
20146: NEG
20147: PUSH
20148: LD_INT 0
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 2
20157: NEG
20158: PUSH
20159: LD_INT 1
20161: NEG
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 2
20169: NEG
20170: PUSH
20171: LD_INT 2
20173: NEG
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20200: LD_ADDR_VAR 0 23
20204: PUSH
20205: LD_INT 0
20207: PUSH
20208: LD_INT 0
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 0
20217: PUSH
20218: LD_INT 1
20220: NEG
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 1
20228: PUSH
20229: LD_INT 0
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 1
20238: PUSH
20239: LD_INT 1
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 0
20248: PUSH
20249: LD_INT 1
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 1
20258: NEG
20259: PUSH
20260: LD_INT 0
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 1
20269: NEG
20270: PUSH
20271: LD_INT 1
20273: NEG
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 1
20281: NEG
20282: PUSH
20283: LD_INT 2
20285: NEG
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 0
20293: PUSH
20294: LD_INT 2
20296: NEG
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 1
20304: PUSH
20305: LD_INT 1
20307: NEG
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 2
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 2
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 2
20335: PUSH
20336: LD_INT 2
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 1
20345: PUSH
20346: LD_INT 2
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 0
20355: PUSH
20356: LD_INT 2
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 1
20365: NEG
20366: PUSH
20367: LD_INT 1
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 2
20376: NEG
20377: PUSH
20378: LD_INT 0
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 2
20387: NEG
20388: PUSH
20389: LD_INT 1
20391: NEG
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 2
20399: NEG
20400: PUSH
20401: LD_INT 2
20403: NEG
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 2
20411: NEG
20412: PUSH
20413: LD_INT 3
20415: NEG
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 1
20423: NEG
20424: PUSH
20425: LD_INT 3
20427: NEG
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 1
20435: PUSH
20436: LD_INT 2
20438: NEG
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 2
20446: PUSH
20447: LD_INT 1
20449: NEG
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20480: LD_ADDR_VAR 0 24
20484: PUSH
20485: LD_INT 0
20487: PUSH
20488: LD_INT 0
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 0
20497: PUSH
20498: LD_INT 1
20500: NEG
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 1
20508: PUSH
20509: LD_INT 0
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 1
20518: PUSH
20519: LD_INT 1
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 0
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 1
20538: NEG
20539: PUSH
20540: LD_INT 0
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 1
20549: NEG
20550: PUSH
20551: LD_INT 1
20553: NEG
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 1
20561: NEG
20562: PUSH
20563: LD_INT 2
20565: NEG
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 0
20573: PUSH
20574: LD_INT 2
20576: NEG
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 1
20584: PUSH
20585: LD_INT 1
20587: NEG
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 2
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 2
20605: PUSH
20606: LD_INT 1
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 2
20615: PUSH
20616: LD_INT 2
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 1
20625: PUSH
20626: LD_INT 2
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 0
20635: PUSH
20636: LD_INT 2
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 1
20645: NEG
20646: PUSH
20647: LD_INT 1
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 2
20656: NEG
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 2
20667: NEG
20668: PUSH
20669: LD_INT 1
20671: NEG
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 2
20679: NEG
20680: PUSH
20681: LD_INT 2
20683: NEG
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: LD_INT 2
20694: NEG
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 2
20702: PUSH
20703: LD_INT 1
20705: NEG
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 3
20713: PUSH
20714: LD_INT 1
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 3
20723: PUSH
20724: LD_INT 2
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20756: LD_ADDR_VAR 0 25
20760: PUSH
20761: LD_INT 0
20763: PUSH
20764: LD_INT 0
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 0
20773: PUSH
20774: LD_INT 1
20776: NEG
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 1
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 1
20794: PUSH
20795: LD_INT 1
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 0
20804: PUSH
20805: LD_INT 1
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 1
20814: NEG
20815: PUSH
20816: LD_INT 0
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 1
20825: NEG
20826: PUSH
20827: LD_INT 1
20829: NEG
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 1
20837: NEG
20838: PUSH
20839: LD_INT 2
20841: NEG
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 0
20849: PUSH
20850: LD_INT 2
20852: NEG
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 1
20860: PUSH
20861: LD_INT 1
20863: NEG
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 2
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 2
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 2
20891: PUSH
20892: LD_INT 2
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: LD_INT 2
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 0
20911: PUSH
20912: LD_INT 2
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 1
20921: NEG
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 2
20932: NEG
20933: PUSH
20934: LD_INT 0
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 2
20943: NEG
20944: PUSH
20945: LD_INT 1
20947: NEG
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 2
20955: NEG
20956: PUSH
20957: LD_INT 2
20959: NEG
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 3
20967: PUSH
20968: LD_INT 1
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 3
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 2
20987: PUSH
20988: LD_INT 3
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 1
20997: PUSH
20998: LD_INT 3
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21030: LD_ADDR_VAR 0 26
21034: PUSH
21035: LD_INT 0
21037: PUSH
21038: LD_INT 0
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 0
21047: PUSH
21048: LD_INT 1
21050: NEG
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 1
21058: PUSH
21059: LD_INT 0
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 1
21068: PUSH
21069: LD_INT 1
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 0
21078: PUSH
21079: LD_INT 1
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 1
21088: NEG
21089: PUSH
21090: LD_INT 0
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 1
21099: NEG
21100: PUSH
21101: LD_INT 1
21103: NEG
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 1
21111: NEG
21112: PUSH
21113: LD_INT 2
21115: NEG
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 0
21123: PUSH
21124: LD_INT 2
21126: NEG
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: LD_INT 1
21137: NEG
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 2
21145: PUSH
21146: LD_INT 0
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 2
21155: PUSH
21156: LD_INT 1
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 2
21165: PUSH
21166: LD_INT 2
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: LD_INT 2
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: LD_INT 2
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 1
21195: NEG
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 2
21206: NEG
21207: PUSH
21208: LD_INT 0
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 2
21217: NEG
21218: PUSH
21219: LD_INT 1
21221: NEG
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 2
21229: NEG
21230: PUSH
21231: LD_INT 2
21233: NEG
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: LD_INT 3
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: LD_INT 3
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 1
21261: NEG
21262: PUSH
21263: LD_INT 2
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 2
21272: NEG
21273: PUSH
21274: LD_INT 1
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21306: LD_ADDR_VAR 0 27
21310: PUSH
21311: LD_INT 0
21313: PUSH
21314: LD_INT 0
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 0
21323: PUSH
21324: LD_INT 1
21326: NEG
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 1
21334: PUSH
21335: LD_INT 0
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 1
21344: PUSH
21345: LD_INT 1
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 0
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 1
21364: NEG
21365: PUSH
21366: LD_INT 0
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 1
21375: NEG
21376: PUSH
21377: LD_INT 1
21379: NEG
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 1
21387: NEG
21388: PUSH
21389: LD_INT 2
21391: NEG
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 0
21399: PUSH
21400: LD_INT 2
21402: NEG
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 1
21410: PUSH
21411: LD_INT 1
21413: NEG
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 2
21421: PUSH
21422: LD_INT 0
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 2
21431: PUSH
21432: LD_INT 1
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 2
21441: PUSH
21442: LD_INT 2
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: LD_INT 2
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 0
21461: PUSH
21462: LD_INT 2
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 1
21471: NEG
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 2
21482: NEG
21483: PUSH
21484: LD_INT 0
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 2
21493: NEG
21494: PUSH
21495: LD_INT 1
21497: NEG
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 2
21505: NEG
21506: PUSH
21507: LD_INT 2
21509: NEG
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 1
21517: NEG
21518: PUSH
21519: LD_INT 2
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 2
21528: NEG
21529: PUSH
21530: LD_INT 1
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 3
21539: NEG
21540: PUSH
21541: LD_INT 1
21543: NEG
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 3
21551: NEG
21552: PUSH
21553: LD_INT 2
21555: NEG
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21586: LD_ADDR_VAR 0 28
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: LD_INT 0
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 0
21603: PUSH
21604: LD_INT 1
21606: NEG
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 1
21614: PUSH
21615: LD_INT 0
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: LD_INT 1
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 0
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 1
21644: NEG
21645: PUSH
21646: LD_INT 0
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 1
21655: NEG
21656: PUSH
21657: LD_INT 1
21659: NEG
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 1
21667: NEG
21668: PUSH
21669: LD_INT 2
21671: NEG
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 0
21679: PUSH
21680: LD_INT 2
21682: NEG
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: PUSH
21691: LD_INT 1
21693: NEG
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 2
21701: PUSH
21702: LD_INT 0
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 2
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 2
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 1
21731: PUSH
21732: LD_INT 2
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 0
21741: PUSH
21742: LD_INT 2
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 1
21751: NEG
21752: PUSH
21753: LD_INT 1
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 2
21762: NEG
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 2
21773: NEG
21774: PUSH
21775: LD_INT 1
21777: NEG
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 2
21785: NEG
21786: PUSH
21787: LD_INT 2
21789: NEG
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 2
21797: NEG
21798: PUSH
21799: LD_INT 3
21801: NEG
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 1
21809: NEG
21810: PUSH
21811: LD_INT 3
21813: NEG
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 3
21821: NEG
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 3
21833: NEG
21834: PUSH
21835: LD_INT 2
21837: NEG
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21868: LD_ADDR_VAR 0 29
21872: PUSH
21873: LD_INT 0
21875: PUSH
21876: LD_INT 0
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: LD_INT 1
21888: NEG
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: LD_INT 0
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 1
21906: PUSH
21907: LD_INT 1
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 0
21916: PUSH
21917: LD_INT 1
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 1
21926: NEG
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 1
21937: NEG
21938: PUSH
21939: LD_INT 1
21941: NEG
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 1
21949: NEG
21950: PUSH
21951: LD_INT 2
21953: NEG
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 0
21961: PUSH
21962: LD_INT 2
21964: NEG
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: LD_INT 1
21975: NEG
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 2
21983: PUSH
21984: LD_INT 0
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 2
21993: PUSH
21994: LD_INT 1
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: LD_INT 2
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 0
22013: PUSH
22014: LD_INT 2
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 1
22023: NEG
22024: PUSH
22025: LD_INT 1
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 2
22034: NEG
22035: PUSH
22036: LD_INT 1
22038: NEG
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 2
22046: NEG
22047: PUSH
22048: LD_INT 2
22050: NEG
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 2
22058: NEG
22059: PUSH
22060: LD_INT 3
22062: NEG
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 2
22070: PUSH
22071: LD_INT 1
22073: NEG
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 3
22081: PUSH
22082: LD_INT 1
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 1
22091: PUSH
22092: LD_INT 3
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 1
22101: NEG
22102: PUSH
22103: LD_INT 2
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 3
22112: NEG
22113: PUSH
22114: LD_INT 2
22116: NEG
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22147: LD_ADDR_VAR 0 30
22151: PUSH
22152: LD_INT 0
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 0
22164: PUSH
22165: LD_INT 1
22167: NEG
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 1
22175: PUSH
22176: LD_INT 0
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 1
22185: PUSH
22186: LD_INT 1
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 0
22195: PUSH
22196: LD_INT 1
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 1
22205: NEG
22206: PUSH
22207: LD_INT 0
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 1
22216: NEG
22217: PUSH
22218: LD_INT 1
22220: NEG
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 1
22228: NEG
22229: PUSH
22230: LD_INT 2
22232: NEG
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 0
22240: PUSH
22241: LD_INT 2
22243: NEG
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 1
22251: PUSH
22252: LD_INT 1
22254: NEG
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 2
22262: PUSH
22263: LD_INT 0
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 2
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 2
22282: PUSH
22283: LD_INT 2
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 1
22292: PUSH
22293: LD_INT 2
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 1
22302: NEG
22303: PUSH
22304: LD_INT 1
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 2
22313: NEG
22314: PUSH
22315: LD_INT 0
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 2
22324: NEG
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 1
22336: NEG
22337: PUSH
22338: LD_INT 3
22340: NEG
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: LD_INT 2
22351: NEG
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 3
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 2
22369: PUSH
22370: LD_INT 3
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 2
22379: NEG
22380: PUSH
22381: LD_INT 1
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 3
22390: NEG
22391: PUSH
22392: LD_INT 1
22394: NEG
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22425: LD_ADDR_VAR 0 31
22429: PUSH
22430: LD_INT 0
22432: PUSH
22433: LD_INT 0
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 0
22442: PUSH
22443: LD_INT 1
22445: NEG
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 1
22453: PUSH
22454: LD_INT 0
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 1
22463: PUSH
22464: LD_INT 1
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 0
22473: PUSH
22474: LD_INT 1
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 1
22483: NEG
22484: PUSH
22485: LD_INT 0
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 1
22494: NEG
22495: PUSH
22496: LD_INT 1
22498: NEG
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 1
22506: NEG
22507: PUSH
22508: LD_INT 2
22510: NEG
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: LD_INT 1
22521: NEG
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 2
22529: PUSH
22530: LD_INT 0
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 2
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 2
22549: PUSH
22550: LD_INT 2
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 1
22559: PUSH
22560: LD_INT 2
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: LD_INT 2
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 1
22579: NEG
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 2
22590: NEG
22591: PUSH
22592: LD_INT 1
22594: NEG
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 2
22602: NEG
22603: PUSH
22604: LD_INT 2
22606: NEG
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 2
22614: NEG
22615: PUSH
22616: LD_INT 3
22618: NEG
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 2
22626: PUSH
22627: LD_INT 1
22629: NEG
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 3
22637: PUSH
22638: LD_INT 1
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 1
22647: PUSH
22648: LD_INT 3
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 1
22657: NEG
22658: PUSH
22659: LD_INT 2
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 3
22668: NEG
22669: PUSH
22670: LD_INT 2
22672: NEG
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22703: LD_ADDR_VAR 0 32
22707: PUSH
22708: LD_INT 0
22710: PUSH
22711: LD_INT 0
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 0
22720: PUSH
22721: LD_INT 1
22723: NEG
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 1
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 1
22741: PUSH
22742: LD_INT 1
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 1
22761: NEG
22762: PUSH
22763: LD_INT 0
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 1
22772: NEG
22773: PUSH
22774: LD_INT 1
22776: NEG
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 1
22784: NEG
22785: PUSH
22786: LD_INT 2
22788: NEG
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 0
22796: PUSH
22797: LD_INT 2
22799: NEG
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: LD_INT 1
22810: NEG
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 2
22818: PUSH
22819: LD_INT 1
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 2
22828: PUSH
22829: LD_INT 2
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 1
22838: PUSH
22839: LD_INT 2
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: LD_INT 2
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 1
22858: NEG
22859: PUSH
22860: LD_INT 1
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 2
22869: NEG
22870: PUSH
22871: LD_INT 0
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 2
22880: NEG
22881: PUSH
22882: LD_INT 1
22884: NEG
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 1
22892: NEG
22893: PUSH
22894: LD_INT 3
22896: NEG
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 1
22904: PUSH
22905: LD_INT 2
22907: NEG
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 3
22915: PUSH
22916: LD_INT 2
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: LD_INT 3
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 2
22935: NEG
22936: PUSH
22937: LD_INT 1
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 3
22946: NEG
22947: PUSH
22948: LD_INT 1
22950: NEG
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22981: LD_ADDR_VAR 0 33
22985: PUSH
22986: LD_INT 0
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 0
22998: PUSH
22999: LD_INT 1
23001: NEG
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 1
23009: PUSH
23010: LD_INT 0
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 0
23029: PUSH
23030: LD_INT 1
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 1
23039: NEG
23040: PUSH
23041: LD_INT 0
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 1
23050: NEG
23051: PUSH
23052: LD_INT 1
23054: NEG
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 1
23062: NEG
23063: PUSH
23064: LD_INT 2
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: LD_INT 1
23077: NEG
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 2
23085: PUSH
23086: LD_INT 0
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 2
23095: PUSH
23096: LD_INT 1
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 1
23105: PUSH
23106: LD_INT 2
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: LD_INT 2
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: LD_INT 1
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 2
23136: NEG
23137: PUSH
23138: LD_INT 0
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 2
23147: NEG
23148: PUSH
23149: LD_INT 1
23151: NEG
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 2
23159: NEG
23160: PUSH
23161: LD_INT 2
23163: NEG
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 2
23171: NEG
23172: PUSH
23173: LD_INT 3
23175: NEG
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 2
23183: PUSH
23184: LD_INT 1
23186: NEG
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 3
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: LD_INT 3
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 1
23214: NEG
23215: PUSH
23216: LD_INT 2
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 3
23225: NEG
23226: PUSH
23227: LD_INT 2
23229: NEG
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23260: LD_ADDR_VAR 0 34
23264: PUSH
23265: LD_INT 0
23267: PUSH
23268: LD_INT 0
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: LD_INT 1
23280: NEG
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: LD_INT 0
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: LD_INT 1
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 0
23308: PUSH
23309: LD_INT 1
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 1
23318: NEG
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 1
23329: NEG
23330: PUSH
23331: LD_INT 1
23333: NEG
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 1
23341: NEG
23342: PUSH
23343: LD_INT 2
23345: NEG
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 0
23353: PUSH
23354: LD_INT 2
23356: NEG
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 1
23364: PUSH
23365: LD_INT 1
23367: NEG
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 2
23375: PUSH
23376: LD_INT 1
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 2
23385: PUSH
23386: LD_INT 2
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: LD_INT 2
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 1
23405: NEG
23406: PUSH
23407: LD_INT 1
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 2
23416: NEG
23417: PUSH
23418: LD_INT 0
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 2
23427: NEG
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 2
23439: NEG
23440: PUSH
23441: LD_INT 2
23443: NEG
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 1
23451: NEG
23452: PUSH
23453: LD_INT 3
23455: NEG
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 1
23463: PUSH
23464: LD_INT 2
23466: NEG
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 3
23474: PUSH
23475: LD_INT 2
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 2
23484: PUSH
23485: LD_INT 3
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 2
23494: NEG
23495: PUSH
23496: LD_INT 1
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 3
23505: NEG
23506: PUSH
23507: LD_INT 1
23509: NEG
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23540: LD_ADDR_VAR 0 35
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: LD_INT 0
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 0
23557: PUSH
23558: LD_INT 1
23560: NEG
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 1
23568: PUSH
23569: LD_INT 0
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 0
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 1
23598: NEG
23599: PUSH
23600: LD_INT 0
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 1
23609: NEG
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 2
23621: PUSH
23622: LD_INT 1
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 2
23631: NEG
23632: PUSH
23633: LD_INT 1
23635: NEG
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23652: LD_ADDR_VAR 0 36
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 0
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 1
23672: NEG
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 0
23700: PUSH
23701: LD_INT 1
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 1
23710: NEG
23711: PUSH
23712: LD_INT 0
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: LD_INT 1
23725: NEG
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 1
23733: NEG
23734: PUSH
23735: LD_INT 2
23737: NEG
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 1
23745: PUSH
23746: LD_INT 2
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23764: LD_ADDR_VAR 0 37
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: LD_INT 0
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 0
23781: PUSH
23782: LD_INT 1
23784: NEG
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: PUSH
23793: LD_INT 0
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 1
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 0
23812: PUSH
23813: LD_INT 1
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 1
23822: NEG
23823: PUSH
23824: LD_INT 0
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 1
23833: NEG
23834: PUSH
23835: LD_INT 1
23837: NEG
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 1
23845: PUSH
23846: LD_INT 1
23848: NEG
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 1
23856: NEG
23857: PUSH
23858: LD_INT 1
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23876: LD_ADDR_VAR 0 38
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: LD_INT 0
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 0
23893: PUSH
23894: LD_INT 1
23896: NEG
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 1
23904: PUSH
23905: LD_INT 0
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 0
23924: PUSH
23925: LD_INT 1
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 1
23934: NEG
23935: PUSH
23936: LD_INT 0
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 1
23945: NEG
23946: PUSH
23947: LD_INT 1
23949: NEG
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 2
23957: PUSH
23958: LD_INT 1
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 2
23967: NEG
23968: PUSH
23969: LD_INT 1
23971: NEG
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23988: LD_ADDR_VAR 0 39
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: LD_INT 0
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 0
24005: PUSH
24006: LD_INT 1
24008: NEG
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 0
24036: PUSH
24037: LD_INT 1
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 1
24046: NEG
24047: PUSH
24048: LD_INT 0
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 1
24057: NEG
24058: PUSH
24059: LD_INT 1
24061: NEG
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 1
24069: NEG
24070: PUSH
24071: LD_INT 2
24073: NEG
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 1
24081: PUSH
24082: LD_INT 2
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24100: LD_ADDR_VAR 0 40
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 0
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 0
24117: PUSH
24118: LD_INT 1
24120: NEG
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: LD_INT 0
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 1
24138: PUSH
24139: LD_INT 1
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 0
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 1
24158: NEG
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 1
24169: NEG
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: LD_INT 1
24184: NEG
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: NEG
24193: PUSH
24194: LD_INT 1
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24212: LD_ADDR_VAR 0 41
24216: PUSH
24217: LD_INT 0
24219: PUSH
24220: LD_INT 0
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: LD_INT 1
24232: NEG
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 1
24240: PUSH
24241: LD_INT 0
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: LD_INT 1
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 0
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 1
24270: NEG
24271: PUSH
24272: LD_INT 0
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 1
24281: NEG
24282: PUSH
24283: LD_INT 1
24285: NEG
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 1
24293: NEG
24294: PUSH
24295: LD_INT 2
24297: NEG
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: LD_INT 1
24308: NEG
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 2
24316: PUSH
24317: LD_INT 0
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 2
24326: PUSH
24327: LD_INT 1
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 2
24336: PUSH
24337: LD_INT 2
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 1
24346: PUSH
24347: LD_INT 2
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 1
24356: NEG
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 2
24367: NEG
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 2
24378: NEG
24379: PUSH
24380: LD_INT 1
24382: NEG
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 2
24390: NEG
24391: PUSH
24392: LD_INT 2
24394: NEG
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 2
24402: NEG
24403: PUSH
24404: LD_INT 3
24406: NEG
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 2
24414: PUSH
24415: LD_INT 1
24417: NEG
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 3
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 3
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 3
24445: PUSH
24446: LD_INT 2
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 3
24455: PUSH
24456: LD_INT 3
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 2
24465: PUSH
24466: LD_INT 3
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 2
24475: NEG
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 3
24486: NEG
24487: PUSH
24488: LD_INT 0
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 3
24497: NEG
24498: PUSH
24499: LD_INT 1
24501: NEG
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 3
24509: NEG
24510: PUSH
24511: LD_INT 2
24513: NEG
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 3
24521: NEG
24522: PUSH
24523: LD_INT 3
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24562: LD_ADDR_VAR 0 42
24566: PUSH
24567: LD_INT 0
24569: PUSH
24570: LD_INT 0
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 0
24579: PUSH
24580: LD_INT 1
24582: NEG
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: LD_INT 0
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 1
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 0
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 1
24620: NEG
24621: PUSH
24622: LD_INT 0
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 1
24631: NEG
24632: PUSH
24633: LD_INT 1
24635: NEG
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: LD_INT 2
24647: NEG
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 0
24655: PUSH
24656: LD_INT 2
24658: NEG
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 1
24666: PUSH
24667: LD_INT 1
24669: NEG
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 2
24677: PUSH
24678: LD_INT 1
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 2
24687: PUSH
24688: LD_INT 2
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 1
24697: PUSH
24698: LD_INT 2
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 0
24707: PUSH
24708: LD_INT 2
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 1
24717: NEG
24718: PUSH
24719: LD_INT 1
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 2
24728: NEG
24729: PUSH
24730: LD_INT 1
24732: NEG
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 2
24740: NEG
24741: PUSH
24742: LD_INT 2
24744: NEG
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 2
24752: NEG
24753: PUSH
24754: LD_INT 3
24756: NEG
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: LD_INT 3
24768: NEG
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: LD_INT 3
24779: NEG
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: LD_INT 2
24790: NEG
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 3
24798: PUSH
24799: LD_INT 2
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 3
24808: PUSH
24809: LD_INT 3
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 2
24818: PUSH
24819: LD_INT 3
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 1
24828: PUSH
24829: LD_INT 3
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: LD_INT 3
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 3
24859: NEG
24860: PUSH
24861: LD_INT 2
24863: NEG
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 3
24871: NEG
24872: PUSH
24873: LD_INT 3
24875: NEG
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24912: LD_ADDR_VAR 0 43
24916: PUSH
24917: LD_INT 0
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 0
24929: PUSH
24930: LD_INT 1
24932: NEG
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 1
24970: NEG
24971: PUSH
24972: LD_INT 0
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: PUSH
24983: LD_INT 1
24985: NEG
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: NEG
24994: PUSH
24995: LD_INT 2
24997: NEG
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: LD_INT 2
25008: NEG
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 2
25027: PUSH
25028: LD_INT 0
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 2
25037: PUSH
25038: LD_INT 1
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: LD_INT 2
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: LD_INT 2
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 1
25067: NEG
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 2
25078: NEG
25079: PUSH
25080: LD_INT 0
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 2
25089: NEG
25090: PUSH
25091: LD_INT 1
25093: NEG
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 1
25101: NEG
25102: PUSH
25103: LD_INT 3
25105: NEG
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 0
25113: PUSH
25114: LD_INT 3
25116: NEG
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 1
25124: PUSH
25125: LD_INT 2
25127: NEG
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 2
25135: PUSH
25136: LD_INT 1
25138: NEG
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 3
25146: PUSH
25147: LD_INT 0
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 3
25156: PUSH
25157: LD_INT 1
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 1
25166: PUSH
25167: LD_INT 3
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 0
25176: PUSH
25177: LD_INT 3
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 1
25186: NEG
25187: PUSH
25188: LD_INT 2
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 2
25197: NEG
25198: PUSH
25199: LD_INT 1
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 3
25208: NEG
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 3
25219: NEG
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25260: LD_ADDR_VAR 0 44
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: LD_INT 0
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 0
25277: PUSH
25278: LD_INT 1
25280: NEG
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 1
25298: PUSH
25299: LD_INT 1
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 0
25308: PUSH
25309: LD_INT 1
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 1
25318: NEG
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: NEG
25330: PUSH
25331: LD_INT 1
25333: NEG
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 1
25341: NEG
25342: PUSH
25343: LD_INT 2
25345: NEG
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: LD_INT 1
25356: NEG
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 2
25364: PUSH
25365: LD_INT 0
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 2
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 2
25384: PUSH
25385: LD_INT 2
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 1
25394: PUSH
25395: LD_INT 2
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: LD_INT 1
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 2
25415: NEG
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 2
25426: NEG
25427: PUSH
25428: LD_INT 1
25430: NEG
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 2
25438: NEG
25439: PUSH
25440: LD_INT 2
25442: NEG
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 2
25450: NEG
25451: PUSH
25452: LD_INT 3
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 2
25462: PUSH
25463: LD_INT 1
25465: NEG
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 3
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 3
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 3
25493: PUSH
25494: LD_INT 2
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 3
25503: PUSH
25504: LD_INT 3
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 2
25513: PUSH
25514: LD_INT 3
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 2
25523: NEG
25524: PUSH
25525: LD_INT 1
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 3
25534: NEG
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 3
25545: NEG
25546: PUSH
25547: LD_INT 1
25549: NEG
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 3
25557: NEG
25558: PUSH
25559: LD_INT 2
25561: NEG
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 3
25569: NEG
25570: PUSH
25571: LD_INT 3
25573: NEG
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25610: LD_ADDR_VAR 0 45
25614: PUSH
25615: LD_INT 0
25617: PUSH
25618: LD_INT 0
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: LD_INT 1
25630: NEG
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 1
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 1
25648: PUSH
25649: LD_INT 1
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 1
25668: NEG
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 1
25679: NEG
25680: PUSH
25681: LD_INT 1
25683: NEG
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 1
25691: NEG
25692: PUSH
25693: LD_INT 2
25695: NEG
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: LD_INT 2
25706: NEG
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 1
25714: PUSH
25715: LD_INT 1
25717: NEG
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 2
25725: PUSH
25726: LD_INT 1
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 2
25735: PUSH
25736: LD_INT 2
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: LD_INT 2
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: LD_INT 2
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 2
25776: NEG
25777: PUSH
25778: LD_INT 1
25780: NEG
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 2
25788: NEG
25789: PUSH
25790: LD_INT 2
25792: NEG
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 2
25800: NEG
25801: PUSH
25802: LD_INT 3
25804: NEG
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 1
25812: NEG
25813: PUSH
25814: LD_INT 3
25816: NEG
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 0
25824: PUSH
25825: LD_INT 3
25827: NEG
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 1
25835: PUSH
25836: LD_INT 2
25838: NEG
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 3
25846: PUSH
25847: LD_INT 2
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 3
25856: PUSH
25857: LD_INT 3
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 2
25866: PUSH
25867: LD_INT 3
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: LD_INT 3
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: LD_INT 3
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: NEG
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 3
25907: NEG
25908: PUSH
25909: LD_INT 2
25911: NEG
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 3
25919: NEG
25920: PUSH
25921: LD_INT 3
25923: NEG
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25960: LD_ADDR_VAR 0 46
25964: PUSH
25965: LD_INT 0
25967: PUSH
25968: LD_INT 0
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: LD_INT 1
25980: NEG
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: LD_INT 1
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 1
26018: NEG
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 1
26029: NEG
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: NEG
26042: PUSH
26043: LD_INT 2
26045: NEG
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 0
26053: PUSH
26054: LD_INT 2
26056: NEG
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: LD_INT 1
26067: NEG
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 2
26075: PUSH
26076: LD_INT 0
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 2
26085: PUSH
26086: LD_INT 1
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 1
26095: PUSH
26096: LD_INT 2
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: LD_INT 2
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 1
26115: NEG
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 2
26126: NEG
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 2
26137: NEG
26138: PUSH
26139: LD_INT 1
26141: NEG
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 1
26149: NEG
26150: PUSH
26151: LD_INT 3
26153: NEG
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 0
26161: PUSH
26162: LD_INT 3
26164: NEG
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 1
26172: PUSH
26173: LD_INT 2
26175: NEG
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 2
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 3
26194: PUSH
26195: LD_INT 0
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 3
26204: PUSH
26205: LD_INT 1
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: PUSH
26215: LD_INT 3
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: LD_INT 3
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 1
26234: NEG
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 2
26245: NEG
26246: PUSH
26247: LD_INT 1
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 3
26256: NEG
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 3
26267: NEG
26268: PUSH
26269: LD_INT 1
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26308: LD_ADDR_VAR 0 47
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: LD_INT 1
26328: NEG
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 1
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: LD_INT 1
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: LD_INT 1
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 1
26366: NEG
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 1
26377: NEG
26378: PUSH
26379: LD_INT 1
26381: NEG
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 1
26389: NEG
26390: PUSH
26391: LD_INT 2
26393: NEG
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: LD_INT 2
26404: NEG
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: PUSH
26413: LD_INT 1
26415: NEG
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 2
26423: NEG
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 2
26435: NEG
26436: PUSH
26437: LD_INT 2
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26459: LD_ADDR_VAR 0 48
26463: PUSH
26464: LD_INT 0
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 1
26497: PUSH
26498: LD_INT 1
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 0
26507: PUSH
26508: LD_INT 1
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 1
26517: NEG
26518: PUSH
26519: LD_INT 0
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 1
26528: NEG
26529: PUSH
26530: LD_INT 1
26532: NEG
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 1
26540: NEG
26541: PUSH
26542: LD_INT 2
26544: NEG
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 0
26552: PUSH
26553: LD_INT 2
26555: NEG
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 1
26563: PUSH
26564: LD_INT 1
26566: NEG
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 2
26574: PUSH
26575: LD_INT 0
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 2
26584: PUSH
26585: LD_INT 1
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26606: LD_ADDR_VAR 0 49
26610: PUSH
26611: LD_INT 0
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 0
26623: PUSH
26624: LD_INT 1
26626: NEG
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: LD_INT 1
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 0
26654: PUSH
26655: LD_INT 1
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 1
26664: NEG
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 1
26675: NEG
26676: PUSH
26677: LD_INT 1
26679: NEG
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: LD_INT 1
26690: NEG
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: LD_INT 0
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 2
26708: PUSH
26709: LD_INT 1
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 2
26718: PUSH
26719: LD_INT 2
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: LD_INT 2
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26750: LD_ADDR_VAR 0 50
26754: PUSH
26755: LD_INT 0
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 0
26767: PUSH
26768: LD_INT 1
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 1
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: NEG
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 1
26819: NEG
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 2
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 2
26841: PUSH
26842: LD_INT 2
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: LD_INT 2
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: LD_INT 2
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: LD_INT 1
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26894: LD_ADDR_VAR 0 51
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: LD_INT 0
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: LD_INT 1
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: LD_INT 0
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 1
26932: PUSH
26933: LD_INT 1
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 1
26952: NEG
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: LD_INT 1
26967: NEG
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: PUSH
26976: LD_INT 2
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: LD_INT 2
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 2
27006: NEG
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 2
27017: NEG
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27041: LD_ADDR_VAR 0 52
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: PUSH
27070: LD_INT 0
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: LD_INT 1
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 0
27089: PUSH
27090: LD_INT 1
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 1
27099: NEG
27100: PUSH
27101: LD_INT 0
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 1
27110: NEG
27111: PUSH
27112: LD_INT 1
27114: NEG
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 1
27122: NEG
27123: PUSH
27124: LD_INT 2
27126: NEG
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: PUSH
27136: LD_INT 1
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 2
27145: NEG
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 2
27156: NEG
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 2
27168: NEG
27169: PUSH
27170: LD_INT 2
27172: NEG
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27192: LD_ADDR_VAR 0 53
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: LD_INT 1
27212: NEG
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 1
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 1
27230: PUSH
27231: LD_INT 1
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: LD_INT 1
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 1
27250: NEG
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 1
27261: NEG
27262: PUSH
27263: LD_INT 1
27265: NEG
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 1
27273: NEG
27274: PUSH
27275: LD_INT 2
27277: NEG
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: LD_INT 2
27288: NEG
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: LD_INT 1
27299: NEG
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 2
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 2
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 2
27327: PUSH
27328: LD_INT 2
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: LD_INT 2
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 0
27347: PUSH
27348: LD_INT 2
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 1
27357: NEG
27358: PUSH
27359: LD_INT 1
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 2
27368: NEG
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 2
27379: NEG
27380: PUSH
27381: LD_INT 1
27383: NEG
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 2
27391: NEG
27392: PUSH
27393: LD_INT 2
27395: NEG
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27422: LD_ADDR_VAR 0 54
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: LD_INT 1
27442: NEG
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 1
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: LD_INT 1
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 1
27480: NEG
27481: PUSH
27482: LD_INT 0
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: LD_INT 1
27495: NEG
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 1
27503: NEG
27504: PUSH
27505: LD_INT 2
27507: NEG
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: LD_INT 2
27518: NEG
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: LD_INT 1
27529: NEG
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 2
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 2
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 2
27557: PUSH
27558: LD_INT 2
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: LD_INT 2
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 0
27577: PUSH
27578: LD_INT 2
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 1
27587: NEG
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 2
27598: NEG
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 2
27609: NEG
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 2
27621: NEG
27622: PUSH
27623: LD_INT 2
27625: NEG
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27652: LD_ADDR_VAR 0 55
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: LD_INT 1
27672: NEG
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 1
27680: PUSH
27681: LD_INT 0
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 1
27690: PUSH
27691: LD_INT 1
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 1
27710: NEG
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: LD_INT 1
27725: NEG
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 1
27733: NEG
27734: PUSH
27735: LD_INT 2
27737: NEG
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: LD_INT 2
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 2
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 2
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 2
27787: PUSH
27788: LD_INT 2
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 1
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 0
27807: PUSH
27808: LD_INT 2
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 1
27817: NEG
27818: PUSH
27819: LD_INT 1
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 2
27828: NEG
27829: PUSH
27830: LD_INT 0
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 2
27839: NEG
27840: PUSH
27841: LD_INT 1
27843: NEG
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 2
27851: NEG
27852: PUSH
27853: LD_INT 2
27855: NEG
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27882: LD_ADDR_VAR 0 56
27886: PUSH
27887: LD_INT 0
27889: PUSH
27890: LD_INT 0
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: LD_INT 1
27902: NEG
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 1
27910: PUSH
27911: LD_INT 0
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 1
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 0
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 1
27940: NEG
27941: PUSH
27942: LD_INT 0
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 1
27951: NEG
27952: PUSH
27953: LD_INT 1
27955: NEG
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 1
27963: NEG
27964: PUSH
27965: LD_INT 2
27967: NEG
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 0
27975: PUSH
27976: LD_INT 2
27978: NEG
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: LD_INT 1
27989: NEG
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 2
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 2
28007: PUSH
28008: LD_INT 1
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 2
28017: PUSH
28018: LD_INT 2
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 1
28027: PUSH
28028: LD_INT 2
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 0
28037: PUSH
28038: LD_INT 2
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 1
28047: NEG
28048: PUSH
28049: LD_INT 1
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 2
28058: NEG
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 2
28069: NEG
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 2
28081: NEG
28082: PUSH
28083: LD_INT 2
28085: NEG
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28112: LD_ADDR_VAR 0 57
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 0
28129: PUSH
28130: LD_INT 1
28132: NEG
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 1
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: LD_INT 1
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 0
28160: PUSH
28161: LD_INT 1
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 1
28170: NEG
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: LD_INT 1
28185: NEG
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 1
28193: NEG
28194: PUSH
28195: LD_INT 2
28197: NEG
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: LD_INT 2
28208: NEG
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 2
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 2
28237: PUSH
28238: LD_INT 1
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 2
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: PUSH
28258: LD_INT 2
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 0
28267: PUSH
28268: LD_INT 2
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 2
28288: NEG
28289: PUSH
28290: LD_INT 0
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 2
28299: NEG
28300: PUSH
28301: LD_INT 1
28303: NEG
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 2
28311: NEG
28312: PUSH
28313: LD_INT 2
28315: NEG
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28342: LD_ADDR_VAR 0 58
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: LD_INT 1
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: LD_INT 0
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 1
28380: PUSH
28381: LD_INT 1
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: LD_INT 1
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 1
28400: NEG
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 1
28411: NEG
28412: PUSH
28413: LD_INT 1
28415: NEG
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 1
28423: NEG
28424: PUSH
28425: LD_INT 2
28427: NEG
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 0
28435: PUSH
28436: LD_INT 2
28438: NEG
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 2
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 2
28467: PUSH
28468: LD_INT 1
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 2
28477: PUSH
28478: LD_INT 2
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: LD_INT 2
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 0
28497: PUSH
28498: LD_INT 2
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 1
28507: NEG
28508: PUSH
28509: LD_INT 1
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 2
28518: NEG
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 2
28529: NEG
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 2
28541: NEG
28542: PUSH
28543: LD_INT 2
28545: NEG
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28572: LD_ADDR_VAR 0 59
28576: PUSH
28577: LD_INT 0
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: LD_INT 1
28592: NEG
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: LD_INT 0
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: LD_INT 1
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: LD_INT 1
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 1
28641: NEG
28642: PUSH
28643: LD_INT 1
28645: NEG
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28660: LD_ADDR_VAR 0 60
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 0
28677: PUSH
28678: LD_INT 1
28680: NEG
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 1
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: LD_INT 1
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: LD_INT 1
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 1
28729: NEG
28730: PUSH
28731: LD_INT 1
28733: NEG
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28748: LD_ADDR_VAR 0 61
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: LD_INT 0
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: LD_INT 1
28768: NEG
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 1
28776: PUSH
28777: LD_INT 0
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: LD_INT 1
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 1
28806: NEG
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 1
28817: NEG
28818: PUSH
28819: LD_INT 1
28821: NEG
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28836: LD_ADDR_VAR 0 62
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: LD_INT 1
28856: NEG
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: LD_INT 1
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 1
28894: NEG
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 1
28905: NEG
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28924: LD_ADDR_VAR 0 63
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: LD_INT 1
28944: NEG
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: LD_INT 1
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 1
28993: NEG
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29012: LD_ADDR_VAR 0 64
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: LD_INT 0
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 0
29029: PUSH
29030: LD_INT 1
29032: NEG
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 1
29040: PUSH
29041: LD_INT 0
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 1
29050: PUSH
29051: LD_INT 1
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 0
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: PUSH
29072: LD_INT 0
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 1
29081: NEG
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: ST_TO_ADDR
// end ; 1 :
29100: GO 34997
29102: LD_INT 1
29104: DOUBLE
29105: EQUAL
29106: IFTRUE 29110
29108: GO 31733
29110: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29111: LD_ADDR_VAR 0 11
29115: PUSH
29116: LD_INT 1
29118: NEG
29119: PUSH
29120: LD_INT 3
29122: NEG
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 0
29130: PUSH
29131: LD_INT 3
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: PUSH
29142: LD_INT 2
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: LIST
29154: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29155: LD_ADDR_VAR 0 12
29159: PUSH
29160: LD_INT 2
29162: PUSH
29163: LD_INT 1
29165: NEG
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 3
29173: PUSH
29174: LD_INT 0
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 3
29183: PUSH
29184: LD_INT 1
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: LIST
29195: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29196: LD_ADDR_VAR 0 13
29200: PUSH
29201: LD_INT 3
29203: PUSH
29204: LD_INT 2
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 3
29213: PUSH
29214: LD_INT 3
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 2
29223: PUSH
29224: LD_INT 3
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: LIST
29235: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29236: LD_ADDR_VAR 0 14
29240: PUSH
29241: LD_INT 1
29243: PUSH
29244: LD_INT 3
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 0
29253: PUSH
29254: LD_INT 3
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 1
29263: NEG
29264: PUSH
29265: LD_INT 2
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: LIST
29276: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29277: LD_ADDR_VAR 0 15
29281: PUSH
29282: LD_INT 2
29284: NEG
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 3
29295: NEG
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 3
29306: NEG
29307: PUSH
29308: LD_INT 1
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: LIST
29320: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29321: LD_ADDR_VAR 0 16
29325: PUSH
29326: LD_INT 2
29328: NEG
29329: PUSH
29330: LD_INT 3
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 3
29340: NEG
29341: PUSH
29342: LD_INT 2
29344: NEG
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 3
29352: NEG
29353: PUSH
29354: LD_INT 3
29356: NEG
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: LIST
29366: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29367: LD_ADDR_VAR 0 17
29371: PUSH
29372: LD_INT 1
29374: NEG
29375: PUSH
29376: LD_INT 3
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 0
29386: PUSH
29387: LD_INT 3
29389: NEG
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 1
29397: PUSH
29398: LD_INT 2
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29411: LD_ADDR_VAR 0 18
29415: PUSH
29416: LD_INT 2
29418: PUSH
29419: LD_INT 1
29421: NEG
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 3
29429: PUSH
29430: LD_INT 0
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 3
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: LIST
29451: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29452: LD_ADDR_VAR 0 19
29456: PUSH
29457: LD_INT 3
29459: PUSH
29460: LD_INT 2
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 3
29469: PUSH
29470: LD_INT 3
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 2
29479: PUSH
29480: LD_INT 3
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: LIST
29491: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29492: LD_ADDR_VAR 0 20
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: LD_INT 3
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: LD_INT 3
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: NEG
29520: PUSH
29521: LD_INT 2
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: LIST
29532: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29533: LD_ADDR_VAR 0 21
29537: PUSH
29538: LD_INT 2
29540: NEG
29541: PUSH
29542: LD_INT 1
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 3
29551: NEG
29552: PUSH
29553: LD_INT 0
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 3
29562: NEG
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29577: LD_ADDR_VAR 0 22
29581: PUSH
29582: LD_INT 2
29584: NEG
29585: PUSH
29586: LD_INT 3
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 3
29596: NEG
29597: PUSH
29598: LD_INT 2
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 3
29608: NEG
29609: PUSH
29610: LD_INT 3
29612: NEG
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: LIST
29622: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29623: LD_ADDR_VAR 0 23
29627: PUSH
29628: LD_INT 0
29630: PUSH
29631: LD_INT 3
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 1
29641: NEG
29642: PUSH
29643: LD_INT 4
29645: NEG
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: PUSH
29654: LD_INT 3
29656: NEG
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29667: LD_ADDR_VAR 0 24
29671: PUSH
29672: LD_INT 3
29674: PUSH
29675: LD_INT 0
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 3
29684: PUSH
29685: LD_INT 1
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 4
29695: PUSH
29696: LD_INT 1
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: LIST
29707: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29708: LD_ADDR_VAR 0 25
29712: PUSH
29713: LD_INT 3
29715: PUSH
29716: LD_INT 3
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 4
29725: PUSH
29726: LD_INT 3
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 3
29735: PUSH
29736: LD_INT 4
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: LIST
29747: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29748: LD_ADDR_VAR 0 26
29752: PUSH
29753: LD_INT 0
29755: PUSH
29756: LD_INT 3
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 1
29765: PUSH
29766: LD_INT 4
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 1
29775: NEG
29776: PUSH
29777: LD_INT 3
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29789: LD_ADDR_VAR 0 27
29793: PUSH
29794: LD_INT 3
29796: NEG
29797: PUSH
29798: LD_INT 0
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 3
29807: NEG
29808: PUSH
29809: LD_INT 1
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 4
29818: NEG
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: LIST
29832: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29833: LD_ADDR_VAR 0 28
29837: PUSH
29838: LD_INT 3
29840: NEG
29841: PUSH
29842: LD_INT 3
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 3
29852: NEG
29853: PUSH
29854: LD_INT 4
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 4
29864: NEG
29865: PUSH
29866: LD_INT 3
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: LIST
29878: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29879: LD_ADDR_VAR 0 29
29883: PUSH
29884: LD_INT 1
29886: NEG
29887: PUSH
29888: LD_INT 3
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: LD_INT 3
29901: NEG
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: LD_INT 2
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 1
29920: NEG
29921: PUSH
29922: LD_INT 4
29924: NEG
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 0
29932: PUSH
29933: LD_INT 4
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 1
29943: PUSH
29944: LD_INT 3
29946: NEG
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 1
29954: NEG
29955: PUSH
29956: LD_INT 5
29958: NEG
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: LD_INT 5
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: LD_INT 4
29980: NEG
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 1
29988: NEG
29989: PUSH
29990: LD_INT 6
29992: NEG
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 0
30000: PUSH
30001: LD_INT 6
30003: NEG
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 1
30011: PUSH
30012: LD_INT 5
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30034: LD_ADDR_VAR 0 30
30038: PUSH
30039: LD_INT 2
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 3
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 3
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 3
30072: PUSH
30073: LD_INT 1
30075: NEG
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 4
30083: PUSH
30084: LD_INT 0
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 4
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 4
30103: PUSH
30104: LD_INT 1
30106: NEG
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 5
30114: PUSH
30115: LD_INT 0
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 5
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 5
30134: PUSH
30135: LD_INT 1
30137: NEG
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 6
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 6
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30177: LD_ADDR_VAR 0 31
30181: PUSH
30182: LD_INT 3
30184: PUSH
30185: LD_INT 2
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 3
30194: PUSH
30195: LD_INT 3
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 2
30204: PUSH
30205: LD_INT 3
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 4
30214: PUSH
30215: LD_INT 3
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 4
30224: PUSH
30225: LD_INT 4
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 3
30234: PUSH
30235: LD_INT 4
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 5
30244: PUSH
30245: LD_INT 4
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 5
30254: PUSH
30255: LD_INT 5
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 4
30264: PUSH
30265: LD_INT 5
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 6
30274: PUSH
30275: LD_INT 5
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 6
30284: PUSH
30285: LD_INT 6
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 5
30294: PUSH
30295: LD_INT 6
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30316: LD_ADDR_VAR 0 32
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: LD_INT 3
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 0
30333: PUSH
30334: LD_INT 3
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 1
30343: NEG
30344: PUSH
30345: LD_INT 2
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 1
30354: PUSH
30355: LD_INT 4
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: LD_INT 4
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 1
30374: NEG
30375: PUSH
30376: LD_INT 3
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: LD_INT 5
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: LD_INT 5
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: NEG
30406: PUSH
30407: LD_INT 4
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 1
30416: PUSH
30417: LD_INT 6
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 0
30426: PUSH
30427: LD_INT 6
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 1
30436: NEG
30437: PUSH
30438: LD_INT 5
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30459: LD_ADDR_VAR 0 33
30463: PUSH
30464: LD_INT 2
30466: NEG
30467: PUSH
30468: LD_INT 1
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 3
30477: NEG
30478: PUSH
30479: LD_INT 0
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 3
30488: NEG
30489: PUSH
30490: LD_INT 1
30492: NEG
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 3
30500: NEG
30501: PUSH
30502: LD_INT 1
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 4
30511: NEG
30512: PUSH
30513: LD_INT 0
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 4
30522: NEG
30523: PUSH
30524: LD_INT 1
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 4
30534: NEG
30535: PUSH
30536: LD_INT 1
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 5
30545: NEG
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 5
30556: NEG
30557: PUSH
30558: LD_INT 1
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 5
30568: NEG
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 6
30579: NEG
30580: PUSH
30581: LD_INT 0
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 6
30590: NEG
30591: PUSH
30592: LD_INT 1
30594: NEG
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30614: LD_ADDR_VAR 0 34
30618: PUSH
30619: LD_INT 2
30621: NEG
30622: PUSH
30623: LD_INT 3
30625: NEG
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 3
30633: NEG
30634: PUSH
30635: LD_INT 2
30637: NEG
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 3
30645: NEG
30646: PUSH
30647: LD_INT 3
30649: NEG
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 3
30657: NEG
30658: PUSH
30659: LD_INT 4
30661: NEG
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 4
30669: NEG
30670: PUSH
30671: LD_INT 3
30673: NEG
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 4
30681: NEG
30682: PUSH
30683: LD_INT 4
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 4
30693: NEG
30694: PUSH
30695: LD_INT 5
30697: NEG
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 5
30705: NEG
30706: PUSH
30707: LD_INT 4
30709: NEG
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 5
30717: NEG
30718: PUSH
30719: LD_INT 5
30721: NEG
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 5
30729: NEG
30730: PUSH
30731: LD_INT 6
30733: NEG
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 6
30741: NEG
30742: PUSH
30743: LD_INT 5
30745: NEG
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 6
30753: NEG
30754: PUSH
30755: LD_INT 6
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30777: LD_ADDR_VAR 0 41
30781: PUSH
30782: LD_INT 0
30784: PUSH
30785: LD_INT 2
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 1
30795: NEG
30796: PUSH
30797: LD_INT 3
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 1
30807: PUSH
30808: LD_INT 2
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30821: LD_ADDR_VAR 0 42
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 2
30838: PUSH
30839: LD_INT 1
30841: NEG
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 3
30849: PUSH
30850: LD_INT 1
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: LIST
30861: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30862: LD_ADDR_VAR 0 43
30866: PUSH
30867: LD_INT 2
30869: PUSH
30870: LD_INT 2
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 3
30879: PUSH
30880: LD_INT 2
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 2
30889: PUSH
30890: LD_INT 3
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: LIST
30901: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30902: LD_ADDR_VAR 0 44
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: LD_INT 2
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: LD_INT 3
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: NEG
30930: PUSH
30931: LD_INT 2
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: LIST
30942: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30943: LD_ADDR_VAR 0 45
30947: PUSH
30948: LD_INT 2
30950: NEG
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 2
30961: NEG
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 3
30972: NEG
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: LIST
30986: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30987: LD_ADDR_VAR 0 46
30991: PUSH
30992: LD_INT 2
30994: NEG
30995: PUSH
30996: LD_INT 2
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 2
31006: NEG
31007: PUSH
31008: LD_INT 3
31010: NEG
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 3
31018: NEG
31019: PUSH
31020: LD_INT 2
31022: NEG
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: LIST
31032: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31033: LD_ADDR_VAR 0 47
31037: PUSH
31038: LD_INT 2
31040: NEG
31041: PUSH
31042: LD_INT 3
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 1
31052: NEG
31053: PUSH
31054: LD_INT 3
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31066: LD_ADDR_VAR 0 48
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: LD_INT 2
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 2
31084: PUSH
31085: LD_INT 1
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31097: LD_ADDR_VAR 0 49
31101: PUSH
31102: LD_INT 3
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 3
31114: PUSH
31115: LD_INT 2
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31126: LD_ADDR_VAR 0 50
31130: PUSH
31131: LD_INT 2
31133: PUSH
31134: LD_INT 3
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 1
31143: PUSH
31144: LD_INT 3
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31155: LD_ADDR_VAR 0 51
31159: PUSH
31160: LD_INT 1
31162: NEG
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 2
31173: NEG
31174: PUSH
31175: LD_INT 1
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31186: LD_ADDR_VAR 0 52
31190: PUSH
31191: LD_INT 3
31193: NEG
31194: PUSH
31195: LD_INT 1
31197: NEG
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 3
31205: NEG
31206: PUSH
31207: LD_INT 2
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31219: LD_ADDR_VAR 0 53
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: LD_INT 3
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 0
31238: PUSH
31239: LD_INT 3
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 1
31249: PUSH
31250: LD_INT 2
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: LIST
31262: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31263: LD_ADDR_VAR 0 54
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 3
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 3
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31304: LD_ADDR_VAR 0 55
31308: PUSH
31309: LD_INT 3
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 3
31321: PUSH
31322: LD_INT 3
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 2
31331: PUSH
31332: LD_INT 3
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31344: LD_ADDR_VAR 0 56
31348: PUSH
31349: LD_INT 1
31351: PUSH
31352: LD_INT 3
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 0
31361: PUSH
31362: LD_INT 3
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: LD_INT 2
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: LIST
31384: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31385: LD_ADDR_VAR 0 57
31389: PUSH
31390: LD_INT 2
31392: NEG
31393: PUSH
31394: LD_INT 1
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 3
31403: NEG
31404: PUSH
31405: LD_INT 0
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 3
31414: NEG
31415: PUSH
31416: LD_INT 1
31418: NEG
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: LIST
31428: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31429: LD_ADDR_VAR 0 58
31433: PUSH
31434: LD_INT 2
31436: NEG
31437: PUSH
31438: LD_INT 3
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 3
31448: NEG
31449: PUSH
31450: LD_INT 2
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 3
31460: NEG
31461: PUSH
31462: LD_INT 3
31464: NEG
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: LIST
31474: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31475: LD_ADDR_VAR 0 59
31479: PUSH
31480: LD_INT 1
31482: NEG
31483: PUSH
31484: LD_INT 2
31486: NEG
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: LD_INT 2
31497: NEG
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: LD_INT 1
31508: NEG
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31519: LD_ADDR_VAR 0 60
31523: PUSH
31524: LD_INT 1
31526: PUSH
31527: LD_INT 1
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 2
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 2
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: LIST
31559: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31560: LD_ADDR_VAR 0 61
31564: PUSH
31565: LD_INT 2
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: LD_INT 2
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 1
31587: PUSH
31588: LD_INT 2
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31600: LD_ADDR_VAR 0 62
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: LD_INT 2
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 0
31617: PUSH
31618: LD_INT 2
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: LIST
31640: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31641: LD_ADDR_VAR 0 63
31645: PUSH
31646: LD_INT 1
31648: NEG
31649: PUSH
31650: LD_INT 1
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 2
31659: NEG
31660: PUSH
31661: LD_INT 0
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 2
31670: NEG
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: LIST
31684: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31685: LD_ADDR_VAR 0 64
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: LD_INT 2
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 2
31704: NEG
31705: PUSH
31706: LD_INT 1
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 2
31716: NEG
31717: PUSH
31718: LD_INT 2
31720: NEG
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: LIST
31730: ST_TO_ADDR
// end ; 2 :
31731: GO 34997
31733: LD_INT 2
31735: DOUBLE
31736: EQUAL
31737: IFTRUE 31741
31739: GO 34996
31741: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31742: LD_ADDR_VAR 0 29
31746: PUSH
31747: LD_INT 4
31749: PUSH
31750: LD_INT 0
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 4
31759: PUSH
31760: LD_INT 1
31762: NEG
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 5
31770: PUSH
31771: LD_INT 0
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 5
31780: PUSH
31781: LD_INT 1
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 4
31790: PUSH
31791: LD_INT 1
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 3
31800: PUSH
31801: LD_INT 0
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 3
31810: PUSH
31811: LD_INT 1
31813: NEG
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 3
31821: PUSH
31822: LD_INT 2
31824: NEG
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 5
31832: PUSH
31833: LD_INT 2
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 3
31842: PUSH
31843: LD_INT 3
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 3
31852: PUSH
31853: LD_INT 2
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 4
31862: PUSH
31863: LD_INT 3
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 4
31872: PUSH
31873: LD_INT 4
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 3
31882: PUSH
31883: LD_INT 4
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 2
31892: PUSH
31893: LD_INT 3
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 2
31902: PUSH
31903: LD_INT 2
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 4
31912: PUSH
31913: LD_INT 2
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 2
31922: PUSH
31923: LD_INT 4
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: LD_INT 4
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 0
31942: PUSH
31943: LD_INT 3
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: LD_INT 4
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: LD_INT 5
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 0
31972: PUSH
31973: LD_INT 5
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 1
31982: NEG
31983: PUSH
31984: LD_INT 4
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 1
31993: NEG
31994: PUSH
31995: LD_INT 3
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 2
32004: PUSH
32005: LD_INT 5
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 2
32014: NEG
32015: PUSH
32016: LD_INT 3
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 3
32025: NEG
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 3
32036: NEG
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: LD_INT 0
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 2
32059: NEG
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 3
32070: NEG
32071: PUSH
32072: LD_INT 1
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 4
32081: NEG
32082: PUSH
32083: LD_INT 0
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 4
32092: NEG
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 4
32104: NEG
32105: PUSH
32106: LD_INT 2
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 2
32116: NEG
32117: PUSH
32118: LD_INT 2
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 4
32127: NEG
32128: PUSH
32129: LD_INT 4
32131: NEG
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 4
32139: NEG
32140: PUSH
32141: LD_INT 5
32143: NEG
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 3
32151: NEG
32152: PUSH
32153: LD_INT 4
32155: NEG
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 3
32163: NEG
32164: PUSH
32165: LD_INT 3
32167: NEG
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 4
32175: NEG
32176: PUSH
32177: LD_INT 3
32179: NEG
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 5
32187: NEG
32188: PUSH
32189: LD_INT 4
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 5
32199: NEG
32200: PUSH
32201: LD_INT 5
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 3
32211: NEG
32212: PUSH
32213: LD_INT 5
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 5
32223: NEG
32224: PUSH
32225: LD_INT 3
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32280: LD_ADDR_VAR 0 30
32284: PUSH
32285: LD_INT 4
32287: PUSH
32288: LD_INT 4
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 4
32297: PUSH
32298: LD_INT 3
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 5
32307: PUSH
32308: LD_INT 4
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 5
32317: PUSH
32318: LD_INT 5
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 4
32327: PUSH
32328: LD_INT 5
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 3
32337: PUSH
32338: LD_INT 4
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 3
32347: PUSH
32348: LD_INT 3
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 5
32357: PUSH
32358: LD_INT 3
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 3
32367: PUSH
32368: LD_INT 5
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 0
32377: PUSH
32378: LD_INT 3
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 0
32387: PUSH
32388: LD_INT 2
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 1
32397: PUSH
32398: LD_INT 3
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 1
32407: PUSH
32408: LD_INT 4
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 0
32417: PUSH
32418: LD_INT 4
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 1
32427: NEG
32428: PUSH
32429: LD_INT 3
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 1
32438: NEG
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 2
32449: PUSH
32450: LD_INT 4
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 2
32459: NEG
32460: PUSH
32461: LD_INT 2
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 4
32470: NEG
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 4
32481: NEG
32482: PUSH
32483: LD_INT 1
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 3
32493: NEG
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 3
32504: NEG
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 4
32515: NEG
32516: PUSH
32517: LD_INT 1
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 5
32526: NEG
32527: PUSH
32528: LD_INT 0
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 5
32537: NEG
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 5
32549: NEG
32550: PUSH
32551: LD_INT 2
32553: NEG
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 3
32561: NEG
32562: PUSH
32563: LD_INT 2
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 3
32572: NEG
32573: PUSH
32574: LD_INT 3
32576: NEG
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 3
32584: NEG
32585: PUSH
32586: LD_INT 4
32588: NEG
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 2
32596: NEG
32597: PUSH
32598: LD_INT 3
32600: NEG
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 2
32608: NEG
32609: PUSH
32610: LD_INT 2
32612: NEG
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 3
32620: NEG
32621: PUSH
32622: LD_INT 2
32624: NEG
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 4
32632: NEG
32633: PUSH
32634: LD_INT 3
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 4
32644: NEG
32645: PUSH
32646: LD_INT 4
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 2
32656: NEG
32657: PUSH
32658: LD_INT 4
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 4
32668: NEG
32669: PUSH
32670: LD_INT 2
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 0
32680: PUSH
32681: LD_INT 4
32683: NEG
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 5
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: LD_INT 4
32705: NEG
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 1
32713: PUSH
32714: LD_INT 3
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: LD_INT 3
32727: NEG
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: LD_INT 4
32739: NEG
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: LD_INT 5
32751: NEG
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 2
32759: PUSH
32760: LD_INT 3
32762: NEG
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 2
32770: NEG
32771: PUSH
32772: LD_INT 5
32774: NEG
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32827: LD_ADDR_VAR 0 31
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: LD_INT 4
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 0
32844: PUSH
32845: LD_INT 3
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 1
32854: PUSH
32855: LD_INT 4
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 1
32864: PUSH
32865: LD_INT 5
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 0
32874: PUSH
32875: LD_INT 5
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 1
32884: NEG
32885: PUSH
32886: LD_INT 4
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 1
32895: NEG
32896: PUSH
32897: LD_INT 3
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: LD_INT 5
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 2
32916: NEG
32917: PUSH
32918: LD_INT 3
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 3
32927: NEG
32928: PUSH
32929: LD_INT 0
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 3
32938: NEG
32939: PUSH
32940: LD_INT 1
32942: NEG
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 2
32950: NEG
32951: PUSH
32952: LD_INT 0
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 2
32961: NEG
32962: PUSH
32963: LD_INT 1
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 3
32972: NEG
32973: PUSH
32974: LD_INT 1
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 4
32983: NEG
32984: PUSH
32985: LD_INT 0
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 4
32994: NEG
32995: PUSH
32996: LD_INT 1
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 4
33006: NEG
33007: PUSH
33008: LD_INT 2
33010: NEG
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 2
33018: NEG
33019: PUSH
33020: LD_INT 2
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 4
33029: NEG
33030: PUSH
33031: LD_INT 4
33033: NEG
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 4
33041: NEG
33042: PUSH
33043: LD_INT 5
33045: NEG
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 3
33053: NEG
33054: PUSH
33055: LD_INT 4
33057: NEG
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 3
33065: NEG
33066: PUSH
33067: LD_INT 3
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 4
33077: NEG
33078: PUSH
33079: LD_INT 3
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 5
33089: NEG
33090: PUSH
33091: LD_INT 4
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 5
33101: NEG
33102: PUSH
33103: LD_INT 5
33105: NEG
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 3
33113: NEG
33114: PUSH
33115: LD_INT 5
33117: NEG
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 5
33125: NEG
33126: PUSH
33127: LD_INT 3
33129: NEG
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 0
33137: PUSH
33138: LD_INT 3
33140: NEG
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 0
33148: PUSH
33149: LD_INT 4
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: LD_INT 3
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: LD_INT 2
33173: NEG
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: LD_INT 2
33184: NEG
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 1
33192: NEG
33193: PUSH
33194: LD_INT 3
33196: NEG
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 1
33204: NEG
33205: PUSH
33206: LD_INT 4
33208: NEG
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 2
33216: PUSH
33217: LD_INT 2
33219: NEG
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 2
33227: NEG
33228: PUSH
33229: LD_INT 4
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 4
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 4
33249: PUSH
33250: LD_INT 1
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 5
33260: PUSH
33261: LD_INT 0
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 5
33270: PUSH
33271: LD_INT 1
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 4
33280: PUSH
33281: LD_INT 1
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 3
33290: PUSH
33291: LD_INT 0
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 3
33300: PUSH
33301: LD_INT 1
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 3
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 5
33322: PUSH
33323: LD_INT 2
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33377: LD_ADDR_VAR 0 32
33381: PUSH
33382: LD_INT 4
33384: NEG
33385: PUSH
33386: LD_INT 0
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 4
33395: NEG
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 3
33407: NEG
33408: PUSH
33409: LD_INT 0
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 3
33418: NEG
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 4
33429: NEG
33430: PUSH
33431: LD_INT 1
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 5
33440: NEG
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 5
33451: NEG
33452: PUSH
33453: LD_INT 1
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 5
33463: NEG
33464: PUSH
33465: LD_INT 2
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 3
33475: NEG
33476: PUSH
33477: LD_INT 2
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 3
33486: NEG
33487: PUSH
33488: LD_INT 3
33490: NEG
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 3
33498: NEG
33499: PUSH
33500: LD_INT 4
33502: NEG
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 2
33510: NEG
33511: PUSH
33512: LD_INT 3
33514: NEG
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 2
33522: NEG
33523: PUSH
33524: LD_INT 2
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 3
33534: NEG
33535: PUSH
33536: LD_INT 2
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 4
33546: NEG
33547: PUSH
33548: LD_INT 3
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 4
33558: NEG
33559: PUSH
33560: LD_INT 4
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 2
33570: NEG
33571: PUSH
33572: LD_INT 4
33574: NEG
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 4
33582: NEG
33583: PUSH
33584: LD_INT 2
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: LD_INT 4
33597: NEG
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: LD_INT 5
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: LD_INT 4
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: LD_INT 3
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: LD_INT 3
33641: NEG
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: LD_INT 4
33653: NEG
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 1
33661: NEG
33662: PUSH
33663: LD_INT 5
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: LD_INT 3
33676: NEG
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 2
33684: NEG
33685: PUSH
33686: LD_INT 5
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 3
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 3
33706: PUSH
33707: LD_INT 1
33709: NEG
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 4
33717: PUSH
33718: LD_INT 0
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 4
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 3
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: LD_INT 0
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 2
33757: PUSH
33758: LD_INT 1
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 2
33768: PUSH
33769: LD_INT 2
33771: NEG
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 4
33779: PUSH
33780: LD_INT 2
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 4
33789: PUSH
33790: LD_INT 4
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 4
33799: PUSH
33800: LD_INT 3
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 5
33809: PUSH
33810: LD_INT 4
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 5
33819: PUSH
33820: LD_INT 5
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 4
33829: PUSH
33830: LD_INT 5
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 3
33839: PUSH
33840: LD_INT 4
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 3
33849: PUSH
33850: LD_INT 3
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 5
33859: PUSH
33860: LD_INT 3
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 3
33869: PUSH
33870: LD_INT 5
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33924: LD_ADDR_VAR 0 33
33928: PUSH
33929: LD_INT 4
33931: NEG
33932: PUSH
33933: LD_INT 4
33935: NEG
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 4
33943: NEG
33944: PUSH
33945: LD_INT 5
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 3
33955: NEG
33956: PUSH
33957: LD_INT 4
33959: NEG
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 3
33967: NEG
33968: PUSH
33969: LD_INT 3
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 4
33979: NEG
33980: PUSH
33981: LD_INT 3
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 5
33991: NEG
33992: PUSH
33993: LD_INT 4
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 5
34003: NEG
34004: PUSH
34005: LD_INT 5
34007: NEG
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 3
34015: NEG
34016: PUSH
34017: LD_INT 5
34019: NEG
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 5
34027: NEG
34028: PUSH
34029: LD_INT 3
34031: NEG
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 0
34039: PUSH
34040: LD_INT 3
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: LD_INT 4
34053: NEG
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 1
34061: PUSH
34062: LD_INT 3
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: PUSH
34073: LD_INT 2
34075: NEG
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 0
34083: PUSH
34084: LD_INT 2
34086: NEG
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: NEG
34095: PUSH
34096: LD_INT 3
34098: NEG
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 1
34106: NEG
34107: PUSH
34108: LD_INT 4
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: LD_INT 2
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 2
34129: NEG
34130: PUSH
34131: LD_INT 4
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 4
34141: PUSH
34142: LD_INT 0
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 4
34151: PUSH
34152: LD_INT 1
34154: NEG
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 5
34162: PUSH
34163: LD_INT 0
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 5
34172: PUSH
34173: LD_INT 1
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 4
34182: PUSH
34183: LD_INT 1
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 3
34192: PUSH
34193: LD_INT 0
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 3
34202: PUSH
34203: LD_INT 1
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 3
34213: PUSH
34214: LD_INT 2
34216: NEG
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 5
34224: PUSH
34225: LD_INT 2
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 3
34234: PUSH
34235: LD_INT 3
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 3
34244: PUSH
34245: LD_INT 2
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 4
34254: PUSH
34255: LD_INT 3
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 4
34264: PUSH
34265: LD_INT 4
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 3
34274: PUSH
34275: LD_INT 4
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 2
34284: PUSH
34285: LD_INT 3
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 2
34294: PUSH
34295: LD_INT 2
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 4
34304: PUSH
34305: LD_INT 2
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: LD_INT 4
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: LD_INT 4
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: LD_INT 3
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: LD_INT 4
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: LD_INT 5
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: LD_INT 5
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: LD_INT 4
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: LD_INT 3
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 2
34396: PUSH
34397: LD_INT 5
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 2
34406: NEG
34407: PUSH
34408: LD_INT 3
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34462: LD_ADDR_VAR 0 34
34466: PUSH
34467: LD_INT 0
34469: PUSH
34470: LD_INT 4
34472: NEG
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: LD_INT 5
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 1
34491: PUSH
34492: LD_INT 4
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: LD_INT 3
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 0
34513: PUSH
34514: LD_INT 3
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 1
34524: NEG
34525: PUSH
34526: LD_INT 4
34528: NEG
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: LD_INT 5
34540: NEG
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 2
34548: PUSH
34549: LD_INT 3
34551: NEG
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 2
34559: NEG
34560: PUSH
34561: LD_INT 5
34563: NEG
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 3
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 3
34581: PUSH
34582: LD_INT 1
34584: NEG
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 4
34592: PUSH
34593: LD_INT 0
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 4
34602: PUSH
34603: LD_INT 1
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 3
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 2
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 2
34632: PUSH
34633: LD_INT 1
34635: NEG
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 2
34643: PUSH
34644: LD_INT 2
34646: NEG
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 4
34654: PUSH
34655: LD_INT 2
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 4
34664: PUSH
34665: LD_INT 4
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 4
34674: PUSH
34675: LD_INT 3
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 5
34684: PUSH
34685: LD_INT 4
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 5
34694: PUSH
34695: LD_INT 5
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 4
34704: PUSH
34705: LD_INT 5
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 3
34714: PUSH
34715: LD_INT 4
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 3
34724: PUSH
34725: LD_INT 3
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 5
34734: PUSH
34735: LD_INT 3
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 3
34744: PUSH
34745: LD_INT 5
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 0
34754: PUSH
34755: LD_INT 3
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 0
34764: PUSH
34765: LD_INT 2
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: LD_INT 3
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: LD_INT 4
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: LD_INT 4
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 1
34804: NEG
34805: PUSH
34806: LD_INT 3
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 1
34815: NEG
34816: PUSH
34817: LD_INT 2
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 2
34826: PUSH
34827: LD_INT 4
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 2
34836: NEG
34837: PUSH
34838: LD_INT 2
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 4
34847: NEG
34848: PUSH
34849: LD_INT 0
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 4
34858: NEG
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 3
34870: NEG
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 3
34881: NEG
34882: PUSH
34883: LD_INT 1
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 4
34892: NEG
34893: PUSH
34894: LD_INT 1
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 5
34903: NEG
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 5
34914: NEG
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 5
34926: NEG
34927: PUSH
34928: LD_INT 2
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 3
34938: NEG
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: ST_TO_ADDR
// end ; end ;
34994: GO 34997
34996: POP
// case btype of b_depot , b_warehouse :
34997: LD_VAR 0 1
35001: PUSH
35002: LD_INT 0
35004: DOUBLE
35005: EQUAL
35006: IFTRUE 35016
35008: LD_INT 1
35010: DOUBLE
35011: EQUAL
35012: IFTRUE 35016
35014: GO 35217
35016: POP
// case nation of nation_american :
35017: LD_VAR 0 5
35021: PUSH
35022: LD_INT 1
35024: DOUBLE
35025: EQUAL
35026: IFTRUE 35030
35028: GO 35086
35030: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35031: LD_ADDR_VAR 0 9
35035: PUSH
35036: LD_VAR 0 11
35040: PUSH
35041: LD_VAR 0 12
35045: PUSH
35046: LD_VAR 0 13
35050: PUSH
35051: LD_VAR 0 14
35055: PUSH
35056: LD_VAR 0 15
35060: PUSH
35061: LD_VAR 0 16
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: PUSH
35074: LD_VAR 0 4
35078: PUSH
35079: LD_INT 1
35081: PLUS
35082: ARRAY
35083: ST_TO_ADDR
35084: GO 35215
35086: LD_INT 2
35088: DOUBLE
35089: EQUAL
35090: IFTRUE 35094
35092: GO 35150
35094: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35095: LD_ADDR_VAR 0 9
35099: PUSH
35100: LD_VAR 0 17
35104: PUSH
35105: LD_VAR 0 18
35109: PUSH
35110: LD_VAR 0 19
35114: PUSH
35115: LD_VAR 0 20
35119: PUSH
35120: LD_VAR 0 21
35124: PUSH
35125: LD_VAR 0 22
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: PUSH
35138: LD_VAR 0 4
35142: PUSH
35143: LD_INT 1
35145: PLUS
35146: ARRAY
35147: ST_TO_ADDR
35148: GO 35215
35150: LD_INT 3
35152: DOUBLE
35153: EQUAL
35154: IFTRUE 35158
35156: GO 35214
35158: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35159: LD_ADDR_VAR 0 9
35163: PUSH
35164: LD_VAR 0 23
35168: PUSH
35169: LD_VAR 0 24
35173: PUSH
35174: LD_VAR 0 25
35178: PUSH
35179: LD_VAR 0 26
35183: PUSH
35184: LD_VAR 0 27
35188: PUSH
35189: LD_VAR 0 28
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: PUSH
35202: LD_VAR 0 4
35206: PUSH
35207: LD_INT 1
35209: PLUS
35210: ARRAY
35211: ST_TO_ADDR
35212: GO 35215
35214: POP
35215: GO 35770
35217: LD_INT 2
35219: DOUBLE
35220: EQUAL
35221: IFTRUE 35231
35223: LD_INT 3
35225: DOUBLE
35226: EQUAL
35227: IFTRUE 35231
35229: GO 35287
35231: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35232: LD_ADDR_VAR 0 9
35236: PUSH
35237: LD_VAR 0 29
35241: PUSH
35242: LD_VAR 0 30
35246: PUSH
35247: LD_VAR 0 31
35251: PUSH
35252: LD_VAR 0 32
35256: PUSH
35257: LD_VAR 0 33
35261: PUSH
35262: LD_VAR 0 34
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: PUSH
35275: LD_VAR 0 4
35279: PUSH
35280: LD_INT 1
35282: PLUS
35283: ARRAY
35284: ST_TO_ADDR
35285: GO 35770
35287: LD_INT 16
35289: DOUBLE
35290: EQUAL
35291: IFTRUE 35349
35293: LD_INT 17
35295: DOUBLE
35296: EQUAL
35297: IFTRUE 35349
35299: LD_INT 18
35301: DOUBLE
35302: EQUAL
35303: IFTRUE 35349
35305: LD_INT 19
35307: DOUBLE
35308: EQUAL
35309: IFTRUE 35349
35311: LD_INT 22
35313: DOUBLE
35314: EQUAL
35315: IFTRUE 35349
35317: LD_INT 20
35319: DOUBLE
35320: EQUAL
35321: IFTRUE 35349
35323: LD_INT 21
35325: DOUBLE
35326: EQUAL
35327: IFTRUE 35349
35329: LD_INT 23
35331: DOUBLE
35332: EQUAL
35333: IFTRUE 35349
35335: LD_INT 24
35337: DOUBLE
35338: EQUAL
35339: IFTRUE 35349
35341: LD_INT 25
35343: DOUBLE
35344: EQUAL
35345: IFTRUE 35349
35347: GO 35405
35349: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35350: LD_ADDR_VAR 0 9
35354: PUSH
35355: LD_VAR 0 35
35359: PUSH
35360: LD_VAR 0 36
35364: PUSH
35365: LD_VAR 0 37
35369: PUSH
35370: LD_VAR 0 38
35374: PUSH
35375: LD_VAR 0 39
35379: PUSH
35380: LD_VAR 0 40
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: PUSH
35393: LD_VAR 0 4
35397: PUSH
35398: LD_INT 1
35400: PLUS
35401: ARRAY
35402: ST_TO_ADDR
35403: GO 35770
35405: LD_INT 6
35407: DOUBLE
35408: EQUAL
35409: IFTRUE 35461
35411: LD_INT 7
35413: DOUBLE
35414: EQUAL
35415: IFTRUE 35461
35417: LD_INT 8
35419: DOUBLE
35420: EQUAL
35421: IFTRUE 35461
35423: LD_INT 13
35425: DOUBLE
35426: EQUAL
35427: IFTRUE 35461
35429: LD_INT 12
35431: DOUBLE
35432: EQUAL
35433: IFTRUE 35461
35435: LD_INT 15
35437: DOUBLE
35438: EQUAL
35439: IFTRUE 35461
35441: LD_INT 11
35443: DOUBLE
35444: EQUAL
35445: IFTRUE 35461
35447: LD_INT 14
35449: DOUBLE
35450: EQUAL
35451: IFTRUE 35461
35453: LD_INT 10
35455: DOUBLE
35456: EQUAL
35457: IFTRUE 35461
35459: GO 35517
35461: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35462: LD_ADDR_VAR 0 9
35466: PUSH
35467: LD_VAR 0 41
35471: PUSH
35472: LD_VAR 0 42
35476: PUSH
35477: LD_VAR 0 43
35481: PUSH
35482: LD_VAR 0 44
35486: PUSH
35487: LD_VAR 0 45
35491: PUSH
35492: LD_VAR 0 46
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: PUSH
35505: LD_VAR 0 4
35509: PUSH
35510: LD_INT 1
35512: PLUS
35513: ARRAY
35514: ST_TO_ADDR
35515: GO 35770
35517: LD_INT 36
35519: DOUBLE
35520: EQUAL
35521: IFTRUE 35525
35523: GO 35581
35525: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35526: LD_ADDR_VAR 0 9
35530: PUSH
35531: LD_VAR 0 47
35535: PUSH
35536: LD_VAR 0 48
35540: PUSH
35541: LD_VAR 0 49
35545: PUSH
35546: LD_VAR 0 50
35550: PUSH
35551: LD_VAR 0 51
35555: PUSH
35556: LD_VAR 0 52
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: PUSH
35569: LD_VAR 0 4
35573: PUSH
35574: LD_INT 1
35576: PLUS
35577: ARRAY
35578: ST_TO_ADDR
35579: GO 35770
35581: LD_INT 4
35583: DOUBLE
35584: EQUAL
35585: IFTRUE 35607
35587: LD_INT 5
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35607
35593: LD_INT 34
35595: DOUBLE
35596: EQUAL
35597: IFTRUE 35607
35599: LD_INT 37
35601: DOUBLE
35602: EQUAL
35603: IFTRUE 35607
35605: GO 35663
35607: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35608: LD_ADDR_VAR 0 9
35612: PUSH
35613: LD_VAR 0 53
35617: PUSH
35618: LD_VAR 0 54
35622: PUSH
35623: LD_VAR 0 55
35627: PUSH
35628: LD_VAR 0 56
35632: PUSH
35633: LD_VAR 0 57
35637: PUSH
35638: LD_VAR 0 58
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: PUSH
35651: LD_VAR 0 4
35655: PUSH
35656: LD_INT 1
35658: PLUS
35659: ARRAY
35660: ST_TO_ADDR
35661: GO 35770
35663: LD_INT 31
35665: DOUBLE
35666: EQUAL
35667: IFTRUE 35713
35669: LD_INT 32
35671: DOUBLE
35672: EQUAL
35673: IFTRUE 35713
35675: LD_INT 33
35677: DOUBLE
35678: EQUAL
35679: IFTRUE 35713
35681: LD_INT 27
35683: DOUBLE
35684: EQUAL
35685: IFTRUE 35713
35687: LD_INT 26
35689: DOUBLE
35690: EQUAL
35691: IFTRUE 35713
35693: LD_INT 28
35695: DOUBLE
35696: EQUAL
35697: IFTRUE 35713
35699: LD_INT 29
35701: DOUBLE
35702: EQUAL
35703: IFTRUE 35713
35705: LD_INT 30
35707: DOUBLE
35708: EQUAL
35709: IFTRUE 35713
35711: GO 35769
35713: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35714: LD_ADDR_VAR 0 9
35718: PUSH
35719: LD_VAR 0 59
35723: PUSH
35724: LD_VAR 0 60
35728: PUSH
35729: LD_VAR 0 61
35733: PUSH
35734: LD_VAR 0 62
35738: PUSH
35739: LD_VAR 0 63
35743: PUSH
35744: LD_VAR 0 64
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: PUSH
35757: LD_VAR 0 4
35761: PUSH
35762: LD_INT 1
35764: PLUS
35765: ARRAY
35766: ST_TO_ADDR
35767: GO 35770
35769: POP
// temp_list2 = [ ] ;
35770: LD_ADDR_VAR 0 10
35774: PUSH
35775: EMPTY
35776: ST_TO_ADDR
// for i in temp_list do
35777: LD_ADDR_VAR 0 8
35781: PUSH
35782: LD_VAR 0 9
35786: PUSH
35787: FOR_IN
35788: IFFALSE 35840
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35790: LD_ADDR_VAR 0 10
35794: PUSH
35795: LD_VAR 0 10
35799: PUSH
35800: LD_VAR 0 8
35804: PUSH
35805: LD_INT 1
35807: ARRAY
35808: PUSH
35809: LD_VAR 0 2
35813: PLUS
35814: PUSH
35815: LD_VAR 0 8
35819: PUSH
35820: LD_INT 2
35822: ARRAY
35823: PUSH
35824: LD_VAR 0 3
35828: PLUS
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: EMPTY
35835: LIST
35836: ADD
35837: ST_TO_ADDR
35838: GO 35787
35840: POP
35841: POP
// result = temp_list2 ;
35842: LD_ADDR_VAR 0 7
35846: PUSH
35847: LD_VAR 0 10
35851: ST_TO_ADDR
// end ;
35852: LD_VAR 0 7
35856: RET
// export function EnemyInRange ( unit , dist ) ; begin
35857: LD_INT 0
35859: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35860: LD_ADDR_VAR 0 3
35864: PUSH
35865: LD_VAR 0 1
35869: PPUSH
35870: CALL_OW 255
35874: PPUSH
35875: LD_VAR 0 1
35879: PPUSH
35880: CALL_OW 250
35884: PPUSH
35885: LD_VAR 0 1
35889: PPUSH
35890: CALL_OW 251
35894: PPUSH
35895: LD_VAR 0 2
35899: PPUSH
35900: CALL 9114 0 4
35904: PUSH
35905: LD_INT 4
35907: ARRAY
35908: ST_TO_ADDR
// end ;
35909: LD_VAR 0 3
35913: RET
// export function PlayerSeeMe ( unit ) ; begin
35914: LD_INT 0
35916: PPUSH
// result := See ( your_side , unit ) ;
35917: LD_ADDR_VAR 0 2
35921: PUSH
35922: LD_OWVAR 2
35926: PPUSH
35927: LD_VAR 0 1
35931: PPUSH
35932: CALL_OW 292
35936: ST_TO_ADDR
// end ;
35937: LD_VAR 0 2
35941: RET
// export function ReverseDir ( unit ) ; begin
35942: LD_INT 0
35944: PPUSH
// if not unit then
35945: LD_VAR 0 1
35949: NOT
35950: IFFALSE 35954
// exit ;
35952: GO 35977
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35954: LD_ADDR_VAR 0 2
35958: PUSH
35959: LD_VAR 0 1
35963: PPUSH
35964: CALL_OW 254
35968: PUSH
35969: LD_INT 3
35971: PLUS
35972: PUSH
35973: LD_INT 6
35975: MOD
35976: ST_TO_ADDR
// end ;
35977: LD_VAR 0 2
35981: RET
// export function ReverseArray ( array ) ; var i ; begin
35982: LD_INT 0
35984: PPUSH
35985: PPUSH
// if not array then
35986: LD_VAR 0 1
35990: NOT
35991: IFFALSE 35995
// exit ;
35993: GO 36050
// result := [ ] ;
35995: LD_ADDR_VAR 0 2
35999: PUSH
36000: EMPTY
36001: ST_TO_ADDR
// for i := array downto 1 do
36002: LD_ADDR_VAR 0 3
36006: PUSH
36007: DOUBLE
36008: LD_VAR 0 1
36012: INC
36013: ST_TO_ADDR
36014: LD_INT 1
36016: PUSH
36017: FOR_DOWNTO
36018: IFFALSE 36048
// result := Join ( result , array [ i ] ) ;
36020: LD_ADDR_VAR 0 2
36024: PUSH
36025: LD_VAR 0 2
36029: PPUSH
36030: LD_VAR 0 1
36034: PUSH
36035: LD_VAR 0 3
36039: ARRAY
36040: PPUSH
36041: CALL 40892 0 2
36045: ST_TO_ADDR
36046: GO 36017
36048: POP
36049: POP
// end ;
36050: LD_VAR 0 2
36054: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36055: LD_INT 0
36057: PPUSH
36058: PPUSH
36059: PPUSH
36060: PPUSH
36061: PPUSH
36062: PPUSH
// if not unit or not hexes then
36063: LD_VAR 0 1
36067: NOT
36068: IFTRUE 36077
36070: PUSH
36071: LD_VAR 0 2
36075: NOT
36076: OR
36077: IFFALSE 36081
// exit ;
36079: GO 36204
// dist := 9999 ;
36081: LD_ADDR_VAR 0 5
36085: PUSH
36086: LD_INT 9999
36088: ST_TO_ADDR
// for i = 1 to hexes do
36089: LD_ADDR_VAR 0 4
36093: PUSH
36094: DOUBLE
36095: LD_INT 1
36097: DEC
36098: ST_TO_ADDR
36099: LD_VAR 0 2
36103: PUSH
36104: FOR_TO
36105: IFFALSE 36192
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36107: LD_ADDR_VAR 0 6
36111: PUSH
36112: LD_VAR 0 1
36116: PPUSH
36117: LD_VAR 0 2
36121: PUSH
36122: LD_VAR 0 4
36126: ARRAY
36127: PUSH
36128: LD_INT 1
36130: ARRAY
36131: PPUSH
36132: LD_VAR 0 2
36136: PUSH
36137: LD_VAR 0 4
36141: ARRAY
36142: PUSH
36143: LD_INT 2
36145: ARRAY
36146: PPUSH
36147: CALL_OW 297
36151: ST_TO_ADDR
// if tdist < dist then
36152: LD_VAR 0 6
36156: PUSH
36157: LD_VAR 0 5
36161: LESS
36162: IFFALSE 36190
// begin hex := hexes [ i ] ;
36164: LD_ADDR_VAR 0 8
36168: PUSH
36169: LD_VAR 0 2
36173: PUSH
36174: LD_VAR 0 4
36178: ARRAY
36179: ST_TO_ADDR
// dist := tdist ;
36180: LD_ADDR_VAR 0 5
36184: PUSH
36185: LD_VAR 0 6
36189: ST_TO_ADDR
// end ; end ;
36190: GO 36104
36192: POP
36193: POP
// result := hex ;
36194: LD_ADDR_VAR 0 3
36198: PUSH
36199: LD_VAR 0 8
36203: ST_TO_ADDR
// end ;
36204: LD_VAR 0 3
36208: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36209: LD_INT 0
36211: PPUSH
36212: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36213: LD_VAR 0 1
36217: NOT
36218: IFTRUE 36257
36220: PUSH
36221: LD_VAR 0 1
36225: PUSH
36226: LD_INT 21
36228: PUSH
36229: LD_INT 2
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 23
36238: PUSH
36239: LD_INT 2
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PPUSH
36250: CALL_OW 69
36254: IN
36255: NOT
36256: OR
36257: IFFALSE 36261
// exit ;
36259: GO 36308
// for i = 1 to 3 do
36261: LD_ADDR_VAR 0 3
36265: PUSH
36266: DOUBLE
36267: LD_INT 1
36269: DEC
36270: ST_TO_ADDR
36271: LD_INT 3
36273: PUSH
36274: FOR_TO
36275: IFFALSE 36306
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36277: LD_VAR 0 1
36281: PPUSH
36282: CALL_OW 250
36286: PPUSH
36287: LD_VAR 0 1
36291: PPUSH
36292: CALL_OW 251
36296: PPUSH
36297: LD_INT 1
36299: PPUSH
36300: CALL_OW 453
36304: GO 36274
36306: POP
36307: POP
// end ;
36308: LD_VAR 0 2
36312: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36313: LD_INT 0
36315: PPUSH
36316: PPUSH
36317: PPUSH
36318: PPUSH
36319: PPUSH
36320: PPUSH
// if not unit or not enemy_unit then
36321: LD_VAR 0 1
36325: NOT
36326: IFTRUE 36335
36328: PUSH
36329: LD_VAR 0 2
36333: NOT
36334: OR
36335: IFFALSE 36339
// exit ;
36337: GO 36810
// if GetLives ( i ) < 250 then
36339: LD_VAR 0 4
36343: PPUSH
36344: CALL_OW 256
36348: PUSH
36349: LD_INT 250
36351: LESS
36352: IFFALSE 36365
// begin ComAutodestruct ( i ) ;
36354: LD_VAR 0 4
36358: PPUSH
36359: CALL 36209 0 1
// exit ;
36363: GO 36810
// end ; x := GetX ( enemy_unit ) ;
36365: LD_ADDR_VAR 0 7
36369: PUSH
36370: LD_VAR 0 2
36374: PPUSH
36375: CALL_OW 250
36379: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36380: LD_ADDR_VAR 0 8
36384: PUSH
36385: LD_VAR 0 2
36389: PPUSH
36390: CALL_OW 251
36394: ST_TO_ADDR
// if not x or not y then
36395: LD_VAR 0 7
36399: NOT
36400: IFTRUE 36409
36402: PUSH
36403: LD_VAR 0 8
36407: NOT
36408: OR
36409: IFFALSE 36413
// exit ;
36411: GO 36810
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36413: LD_ADDR_VAR 0 6
36417: PUSH
36418: LD_VAR 0 7
36422: PPUSH
36423: LD_INT 0
36425: PPUSH
36426: LD_INT 4
36428: PPUSH
36429: CALL_OW 272
36433: PUSH
36434: LD_VAR 0 8
36438: PPUSH
36439: LD_INT 0
36441: PPUSH
36442: LD_INT 4
36444: PPUSH
36445: CALL_OW 273
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_VAR 0 7
36458: PPUSH
36459: LD_INT 1
36461: PPUSH
36462: LD_INT 4
36464: PPUSH
36465: CALL_OW 272
36469: PUSH
36470: LD_VAR 0 8
36474: PPUSH
36475: LD_INT 1
36477: PPUSH
36478: LD_INT 4
36480: PPUSH
36481: CALL_OW 273
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_VAR 0 7
36494: PPUSH
36495: LD_INT 2
36497: PPUSH
36498: LD_INT 4
36500: PPUSH
36501: CALL_OW 272
36505: PUSH
36506: LD_VAR 0 8
36510: PPUSH
36511: LD_INT 2
36513: PPUSH
36514: LD_INT 4
36516: PPUSH
36517: CALL_OW 273
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_VAR 0 7
36530: PPUSH
36531: LD_INT 3
36533: PPUSH
36534: LD_INT 4
36536: PPUSH
36537: CALL_OW 272
36541: PUSH
36542: LD_VAR 0 8
36546: PPUSH
36547: LD_INT 3
36549: PPUSH
36550: LD_INT 4
36552: PPUSH
36553: CALL_OW 273
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_VAR 0 7
36566: PPUSH
36567: LD_INT 4
36569: PPUSH
36570: LD_INT 4
36572: PPUSH
36573: CALL_OW 272
36577: PUSH
36578: LD_VAR 0 8
36582: PPUSH
36583: LD_INT 4
36585: PPUSH
36586: LD_INT 4
36588: PPUSH
36589: CALL_OW 273
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_VAR 0 7
36602: PPUSH
36603: LD_INT 5
36605: PPUSH
36606: LD_INT 4
36608: PPUSH
36609: CALL_OW 272
36613: PUSH
36614: LD_VAR 0 8
36618: PPUSH
36619: LD_INT 5
36621: PPUSH
36622: LD_INT 4
36624: PPUSH
36625: CALL_OW 273
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: ST_TO_ADDR
// for i = tmp downto 1 do
36642: LD_ADDR_VAR 0 4
36646: PUSH
36647: DOUBLE
36648: LD_VAR 0 6
36652: INC
36653: ST_TO_ADDR
36654: LD_INT 1
36656: PUSH
36657: FOR_DOWNTO
36658: IFFALSE 36761
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36660: LD_VAR 0 6
36664: PUSH
36665: LD_VAR 0 4
36669: ARRAY
36670: PUSH
36671: LD_INT 1
36673: ARRAY
36674: PPUSH
36675: LD_VAR 0 6
36679: PUSH
36680: LD_VAR 0 4
36684: ARRAY
36685: PUSH
36686: LD_INT 2
36688: ARRAY
36689: PPUSH
36690: CALL_OW 488
36694: NOT
36695: IFTRUE 36737
36697: PUSH
36698: LD_VAR 0 6
36702: PUSH
36703: LD_VAR 0 4
36707: ARRAY
36708: PUSH
36709: LD_INT 1
36711: ARRAY
36712: PPUSH
36713: LD_VAR 0 6
36717: PUSH
36718: LD_VAR 0 4
36722: ARRAY
36723: PUSH
36724: LD_INT 2
36726: ARRAY
36727: PPUSH
36728: CALL_OW 428
36732: PUSH
36733: LD_INT 0
36735: NONEQUAL
36736: OR
36737: IFFALSE 36759
// tmp := Delete ( tmp , i ) ;
36739: LD_ADDR_VAR 0 6
36743: PUSH
36744: LD_VAR 0 6
36748: PPUSH
36749: LD_VAR 0 4
36753: PPUSH
36754: CALL_OW 3
36758: ST_TO_ADDR
36759: GO 36657
36761: POP
36762: POP
// j := GetClosestHex ( unit , tmp ) ;
36763: LD_ADDR_VAR 0 5
36767: PUSH
36768: LD_VAR 0 1
36772: PPUSH
36773: LD_VAR 0 6
36777: PPUSH
36778: CALL 36055 0 2
36782: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36783: LD_VAR 0 1
36787: PPUSH
36788: LD_VAR 0 5
36792: PUSH
36793: LD_INT 1
36795: ARRAY
36796: PPUSH
36797: LD_VAR 0 5
36801: PUSH
36802: LD_INT 2
36804: ARRAY
36805: PPUSH
36806: CALL_OW 111
// end ;
36810: LD_VAR 0 3
36814: RET
// export function PrepareApemanSoldier ( ) ; begin
36815: LD_INT 0
36817: PPUSH
// uc_nation := 0 ;
36818: LD_ADDR_OWVAR 21
36822: PUSH
36823: LD_INT 0
36825: ST_TO_ADDR
// hc_sex := sex_male ;
36826: LD_ADDR_OWVAR 27
36830: PUSH
36831: LD_INT 1
36833: ST_TO_ADDR
// hc_name :=  ;
36834: LD_ADDR_OWVAR 26
36838: PUSH
36839: LD_STRING 
36841: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36842: LD_ADDR_OWVAR 28
36846: PUSH
36847: LD_INT 15
36849: ST_TO_ADDR
// hc_gallery :=  ;
36850: LD_ADDR_OWVAR 33
36854: PUSH
36855: LD_STRING 
36857: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36858: LD_ADDR_OWVAR 31
36862: PUSH
36863: LD_INT 0
36865: PPUSH
36866: LD_INT 3
36868: PPUSH
36869: CALL_OW 12
36873: PUSH
36874: LD_INT 0
36876: PPUSH
36877: LD_INT 3
36879: PPUSH
36880: CALL_OW 12
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36897: LD_ADDR_OWVAR 29
36901: PUSH
36902: LD_INT 12
36904: PUSH
36905: LD_INT 12
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: ST_TO_ADDR
// end ;
36912: LD_VAR 0 1
36916: RET
// export function PrepareApemanEngineer ( ) ; begin
36917: LD_INT 0
36919: PPUSH
// uc_nation := 0 ;
36920: LD_ADDR_OWVAR 21
36924: PUSH
36925: LD_INT 0
36927: ST_TO_ADDR
// hc_sex := sex_male ;
36928: LD_ADDR_OWVAR 27
36932: PUSH
36933: LD_INT 1
36935: ST_TO_ADDR
// hc_name :=  ;
36936: LD_ADDR_OWVAR 26
36940: PUSH
36941: LD_STRING 
36943: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36944: LD_ADDR_OWVAR 28
36948: PUSH
36949: LD_INT 16
36951: ST_TO_ADDR
// hc_gallery :=  ;
36952: LD_ADDR_OWVAR 33
36956: PUSH
36957: LD_STRING 
36959: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36960: LD_ADDR_OWVAR 31
36964: PUSH
36965: LD_INT 0
36967: PPUSH
36968: LD_INT 3
36970: PPUSH
36971: CALL_OW 12
36975: PUSH
36976: LD_INT 0
36978: PPUSH
36979: LD_INT 3
36981: PPUSH
36982: CALL_OW 12
36986: PUSH
36987: LD_INT 0
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36999: LD_ADDR_OWVAR 29
37003: PUSH
37004: LD_INT 12
37006: PUSH
37007: LD_INT 12
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: ST_TO_ADDR
// end ;
37014: LD_VAR 0 1
37018: RET
// export function PrepareApeman ( agressivity ) ; begin
37019: LD_INT 0
37021: PPUSH
// uc_side := 0 ;
37022: LD_ADDR_OWVAR 20
37026: PUSH
37027: LD_INT 0
37029: ST_TO_ADDR
// uc_nation := 0 ;
37030: LD_ADDR_OWVAR 21
37034: PUSH
37035: LD_INT 0
37037: ST_TO_ADDR
// hc_sex := sex_male ;
37038: LD_ADDR_OWVAR 27
37042: PUSH
37043: LD_INT 1
37045: ST_TO_ADDR
// hc_class := class_apeman ;
37046: LD_ADDR_OWVAR 28
37050: PUSH
37051: LD_INT 12
37053: ST_TO_ADDR
// hc_gallery :=  ;
37054: LD_ADDR_OWVAR 33
37058: PUSH
37059: LD_STRING 
37061: ST_TO_ADDR
// hc_name :=  ;
37062: LD_ADDR_OWVAR 26
37066: PUSH
37067: LD_STRING 
37069: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37070: LD_ADDR_OWVAR 29
37074: PUSH
37075: LD_INT 12
37077: PUSH
37078: LD_INT 12
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: ST_TO_ADDR
// if agressivity = 0 then
37085: LD_VAR 0 1
37089: PUSH
37090: LD_INT 0
37092: EQUAL
37093: IFFALSE 37105
// hc_agressivity := 0 else
37095: LD_ADDR_OWVAR 35
37099: PUSH
37100: LD_INT 0
37102: ST_TO_ADDR
37103: GO 37126
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37105: LD_ADDR_OWVAR 35
37109: PUSH
37110: LD_VAR 0 1
37114: NEG
37115: PPUSH
37116: LD_VAR 0 1
37120: PPUSH
37121: CALL_OW 12
37125: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37126: LD_ADDR_OWVAR 31
37130: PUSH
37131: LD_INT 0
37133: PPUSH
37134: LD_INT 3
37136: PPUSH
37137: CALL_OW 12
37141: PUSH
37142: LD_INT 0
37144: PPUSH
37145: LD_INT 3
37147: PPUSH
37148: CALL_OW 12
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: ST_TO_ADDR
// end ;
37165: LD_VAR 0 2
37169: RET
// export function PrepareTiger ( agressivity ) ; begin
37170: LD_INT 0
37172: PPUSH
// uc_side := 0 ;
37173: LD_ADDR_OWVAR 20
37177: PUSH
37178: LD_INT 0
37180: ST_TO_ADDR
// uc_nation := 0 ;
37181: LD_ADDR_OWVAR 21
37185: PUSH
37186: LD_INT 0
37188: ST_TO_ADDR
// InitHc ;
37189: CALL_OW 19
// hc_class := class_tiger ;
37193: LD_ADDR_OWVAR 28
37197: PUSH
37198: LD_INT 14
37200: ST_TO_ADDR
// hc_gallery :=  ;
37201: LD_ADDR_OWVAR 33
37205: PUSH
37206: LD_STRING 
37208: ST_TO_ADDR
// hc_name :=  ;
37209: LD_ADDR_OWVAR 26
37213: PUSH
37214: LD_STRING 
37216: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37217: LD_ADDR_OWVAR 35
37221: PUSH
37222: LD_VAR 0 1
37226: NEG
37227: PPUSH
37228: LD_VAR 0 1
37232: PPUSH
37233: CALL_OW 12
37237: ST_TO_ADDR
// end ;
37238: LD_VAR 0 2
37242: RET
// export function PrepareEnchidna ( ) ; begin
37243: LD_INT 0
37245: PPUSH
// uc_side := 0 ;
37246: LD_ADDR_OWVAR 20
37250: PUSH
37251: LD_INT 0
37253: ST_TO_ADDR
// uc_nation := 0 ;
37254: LD_ADDR_OWVAR 21
37258: PUSH
37259: LD_INT 0
37261: ST_TO_ADDR
// InitHc ;
37262: CALL_OW 19
// hc_class := class_baggie ;
37266: LD_ADDR_OWVAR 28
37270: PUSH
37271: LD_INT 13
37273: ST_TO_ADDR
// hc_gallery :=  ;
37274: LD_ADDR_OWVAR 33
37278: PUSH
37279: LD_STRING 
37281: ST_TO_ADDR
// hc_name :=  ;
37282: LD_ADDR_OWVAR 26
37286: PUSH
37287: LD_STRING 
37289: ST_TO_ADDR
// end ;
37290: LD_VAR 0 1
37294: RET
// export function PrepareFrog ( ) ; begin
37295: LD_INT 0
37297: PPUSH
// uc_side := 0 ;
37298: LD_ADDR_OWVAR 20
37302: PUSH
37303: LD_INT 0
37305: ST_TO_ADDR
// uc_nation := 0 ;
37306: LD_ADDR_OWVAR 21
37310: PUSH
37311: LD_INT 0
37313: ST_TO_ADDR
// InitHc ;
37314: CALL_OW 19
// hc_class := class_frog ;
37318: LD_ADDR_OWVAR 28
37322: PUSH
37323: LD_INT 19
37325: ST_TO_ADDR
// hc_gallery :=  ;
37326: LD_ADDR_OWVAR 33
37330: PUSH
37331: LD_STRING 
37333: ST_TO_ADDR
// hc_name :=  ;
37334: LD_ADDR_OWVAR 26
37338: PUSH
37339: LD_STRING 
37341: ST_TO_ADDR
// end ;
37342: LD_VAR 0 1
37346: RET
// export function PrepareFish ( ) ; begin
37347: LD_INT 0
37349: PPUSH
// uc_side := 0 ;
37350: LD_ADDR_OWVAR 20
37354: PUSH
37355: LD_INT 0
37357: ST_TO_ADDR
// uc_nation := 0 ;
37358: LD_ADDR_OWVAR 21
37362: PUSH
37363: LD_INT 0
37365: ST_TO_ADDR
// InitHc ;
37366: CALL_OW 19
// hc_class := class_fish ;
37370: LD_ADDR_OWVAR 28
37374: PUSH
37375: LD_INT 20
37377: ST_TO_ADDR
// hc_gallery :=  ;
37378: LD_ADDR_OWVAR 33
37382: PUSH
37383: LD_STRING 
37385: ST_TO_ADDR
// hc_name :=  ;
37386: LD_ADDR_OWVAR 26
37390: PUSH
37391: LD_STRING 
37393: ST_TO_ADDR
// end ;
37394: LD_VAR 0 1
37398: RET
// export function PrepareBird ( ) ; begin
37399: LD_INT 0
37401: PPUSH
// uc_side := 0 ;
37402: LD_ADDR_OWVAR 20
37406: PUSH
37407: LD_INT 0
37409: ST_TO_ADDR
// uc_nation := 0 ;
37410: LD_ADDR_OWVAR 21
37414: PUSH
37415: LD_INT 0
37417: ST_TO_ADDR
// InitHc ;
37418: CALL_OW 19
// hc_class := class_phororhacos ;
37422: LD_ADDR_OWVAR 28
37426: PUSH
37427: LD_INT 18
37429: ST_TO_ADDR
// hc_gallery :=  ;
37430: LD_ADDR_OWVAR 33
37434: PUSH
37435: LD_STRING 
37437: ST_TO_ADDR
// hc_name :=  ;
37438: LD_ADDR_OWVAR 26
37442: PUSH
37443: LD_STRING 
37445: ST_TO_ADDR
// end ;
37446: LD_VAR 0 1
37450: RET
// export function PrepareHorse ( ) ; begin
37451: LD_INT 0
37453: PPUSH
// uc_side := 0 ;
37454: LD_ADDR_OWVAR 20
37458: PUSH
37459: LD_INT 0
37461: ST_TO_ADDR
// uc_nation := 0 ;
37462: LD_ADDR_OWVAR 21
37466: PUSH
37467: LD_INT 0
37469: ST_TO_ADDR
// InitHc ;
37470: CALL_OW 19
// hc_class := class_horse ;
37474: LD_ADDR_OWVAR 28
37478: PUSH
37479: LD_INT 21
37481: ST_TO_ADDR
// hc_gallery :=  ;
37482: LD_ADDR_OWVAR 33
37486: PUSH
37487: LD_STRING 
37489: ST_TO_ADDR
// hc_name :=  ;
37490: LD_ADDR_OWVAR 26
37494: PUSH
37495: LD_STRING 
37497: ST_TO_ADDR
// end ;
37498: LD_VAR 0 1
37502: RET
// export function PrepareMastodont ( ) ; begin
37503: LD_INT 0
37505: PPUSH
// uc_side := 0 ;
37506: LD_ADDR_OWVAR 20
37510: PUSH
37511: LD_INT 0
37513: ST_TO_ADDR
// uc_nation := 0 ;
37514: LD_ADDR_OWVAR 21
37518: PUSH
37519: LD_INT 0
37521: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37522: LD_ADDR_OWVAR 37
37526: PUSH
37527: LD_INT 31
37529: ST_TO_ADDR
// vc_control := control_rider ;
37530: LD_ADDR_OWVAR 38
37534: PUSH
37535: LD_INT 4
37537: ST_TO_ADDR
// end ;
37538: LD_VAR 0 1
37542: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37543: LD_INT 0
37545: PPUSH
37546: PPUSH
37547: PPUSH
// uc_side = 0 ;
37548: LD_ADDR_OWVAR 20
37552: PUSH
37553: LD_INT 0
37555: ST_TO_ADDR
// uc_nation = 0 ;
37556: LD_ADDR_OWVAR 21
37560: PUSH
37561: LD_INT 0
37563: ST_TO_ADDR
// InitHc_All ( ) ;
37564: CALL_OW 584
// InitVc ;
37568: CALL_OW 20
// if mastodonts then
37572: LD_VAR 0 6
37576: IFFALSE 37643
// for i = 1 to mastodonts do
37578: LD_ADDR_VAR 0 11
37582: PUSH
37583: DOUBLE
37584: LD_INT 1
37586: DEC
37587: ST_TO_ADDR
37588: LD_VAR 0 6
37592: PUSH
37593: FOR_TO
37594: IFFALSE 37641
// begin vc_chassis := 31 ;
37596: LD_ADDR_OWVAR 37
37600: PUSH
37601: LD_INT 31
37603: ST_TO_ADDR
// vc_control := control_rider ;
37604: LD_ADDR_OWVAR 38
37608: PUSH
37609: LD_INT 4
37611: ST_TO_ADDR
// animal := CreateVehicle ;
37612: LD_ADDR_VAR 0 12
37616: PUSH
37617: CALL_OW 45
37621: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37622: LD_VAR 0 12
37626: PPUSH
37627: LD_VAR 0 8
37631: PPUSH
37632: LD_INT 0
37634: PPUSH
37635: CALL 39785 0 3
// end ;
37639: GO 37593
37641: POP
37642: POP
// if horses then
37643: LD_VAR 0 5
37647: IFFALSE 37714
// for i = 1 to horses do
37649: LD_ADDR_VAR 0 11
37653: PUSH
37654: DOUBLE
37655: LD_INT 1
37657: DEC
37658: ST_TO_ADDR
37659: LD_VAR 0 5
37663: PUSH
37664: FOR_TO
37665: IFFALSE 37712
// begin hc_class := 21 ;
37667: LD_ADDR_OWVAR 28
37671: PUSH
37672: LD_INT 21
37674: ST_TO_ADDR
// hc_gallery :=  ;
37675: LD_ADDR_OWVAR 33
37679: PUSH
37680: LD_STRING 
37682: ST_TO_ADDR
// animal := CreateHuman ;
37683: LD_ADDR_VAR 0 12
37687: PUSH
37688: CALL_OW 44
37692: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37693: LD_VAR 0 12
37697: PPUSH
37698: LD_VAR 0 8
37702: PPUSH
37703: LD_INT 0
37705: PPUSH
37706: CALL 39785 0 3
// end ;
37710: GO 37664
37712: POP
37713: POP
// if birds then
37714: LD_VAR 0 1
37718: IFFALSE 37785
// for i = 1 to birds do
37720: LD_ADDR_VAR 0 11
37724: PUSH
37725: DOUBLE
37726: LD_INT 1
37728: DEC
37729: ST_TO_ADDR
37730: LD_VAR 0 1
37734: PUSH
37735: FOR_TO
37736: IFFALSE 37783
// begin hc_class := 18 ;
37738: LD_ADDR_OWVAR 28
37742: PUSH
37743: LD_INT 18
37745: ST_TO_ADDR
// hc_gallery =  ;
37746: LD_ADDR_OWVAR 33
37750: PUSH
37751: LD_STRING 
37753: ST_TO_ADDR
// animal := CreateHuman ;
37754: LD_ADDR_VAR 0 12
37758: PUSH
37759: CALL_OW 44
37763: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37764: LD_VAR 0 12
37768: PPUSH
37769: LD_VAR 0 8
37773: PPUSH
37774: LD_INT 0
37776: PPUSH
37777: CALL 39785 0 3
// end ;
37781: GO 37735
37783: POP
37784: POP
// if tigers then
37785: LD_VAR 0 2
37789: IFFALSE 37873
// for i = 1 to tigers do
37791: LD_ADDR_VAR 0 11
37795: PUSH
37796: DOUBLE
37797: LD_INT 1
37799: DEC
37800: ST_TO_ADDR
37801: LD_VAR 0 2
37805: PUSH
37806: FOR_TO
37807: IFFALSE 37871
// begin hc_class = class_tiger ;
37809: LD_ADDR_OWVAR 28
37813: PUSH
37814: LD_INT 14
37816: ST_TO_ADDR
// hc_gallery =  ;
37817: LD_ADDR_OWVAR 33
37821: PUSH
37822: LD_STRING 
37824: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37825: LD_ADDR_OWVAR 35
37829: PUSH
37830: LD_INT 7
37832: NEG
37833: PPUSH
37834: LD_INT 7
37836: PPUSH
37837: CALL_OW 12
37841: ST_TO_ADDR
// animal := CreateHuman ;
37842: LD_ADDR_VAR 0 12
37846: PUSH
37847: CALL_OW 44
37851: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37852: LD_VAR 0 12
37856: PPUSH
37857: LD_VAR 0 8
37861: PPUSH
37862: LD_INT 0
37864: PPUSH
37865: CALL 39785 0 3
// end ;
37869: GO 37806
37871: POP
37872: POP
// if apemans then
37873: LD_VAR 0 3
37877: IFFALSE 38000
// for i = 1 to apemans do
37879: LD_ADDR_VAR 0 11
37883: PUSH
37884: DOUBLE
37885: LD_INT 1
37887: DEC
37888: ST_TO_ADDR
37889: LD_VAR 0 3
37893: PUSH
37894: FOR_TO
37895: IFFALSE 37998
// begin hc_class = class_apeman ;
37897: LD_ADDR_OWVAR 28
37901: PUSH
37902: LD_INT 12
37904: ST_TO_ADDR
// hc_gallery =  ;
37905: LD_ADDR_OWVAR 33
37909: PUSH
37910: LD_STRING 
37912: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37913: LD_ADDR_OWVAR 35
37917: PUSH
37918: LD_INT 2
37920: NEG
37921: PPUSH
37922: LD_INT 2
37924: PPUSH
37925: CALL_OW 12
37929: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37930: LD_ADDR_OWVAR 31
37934: PUSH
37935: LD_INT 1
37937: PPUSH
37938: LD_INT 3
37940: PPUSH
37941: CALL_OW 12
37945: PUSH
37946: LD_INT 1
37948: PPUSH
37949: LD_INT 3
37951: PPUSH
37952: CALL_OW 12
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: ST_TO_ADDR
// animal := CreateHuman ;
37969: LD_ADDR_VAR 0 12
37973: PUSH
37974: CALL_OW 44
37978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37979: LD_VAR 0 12
37983: PPUSH
37984: LD_VAR 0 8
37988: PPUSH
37989: LD_INT 0
37991: PPUSH
37992: CALL 39785 0 3
// end ;
37996: GO 37894
37998: POP
37999: POP
// if enchidnas then
38000: LD_VAR 0 4
38004: IFFALSE 38071
// for i = 1 to enchidnas do
38006: LD_ADDR_VAR 0 11
38010: PUSH
38011: DOUBLE
38012: LD_INT 1
38014: DEC
38015: ST_TO_ADDR
38016: LD_VAR 0 4
38020: PUSH
38021: FOR_TO
38022: IFFALSE 38069
// begin hc_class = 13 ;
38024: LD_ADDR_OWVAR 28
38028: PUSH
38029: LD_INT 13
38031: ST_TO_ADDR
// hc_gallery =  ;
38032: LD_ADDR_OWVAR 33
38036: PUSH
38037: LD_STRING 
38039: ST_TO_ADDR
// animal := CreateHuman ;
38040: LD_ADDR_VAR 0 12
38044: PUSH
38045: CALL_OW 44
38049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38050: LD_VAR 0 12
38054: PPUSH
38055: LD_VAR 0 8
38059: PPUSH
38060: LD_INT 0
38062: PPUSH
38063: CALL 39785 0 3
// end ;
38067: GO 38021
38069: POP
38070: POP
// if fishes then
38071: LD_VAR 0 7
38075: IFFALSE 38142
// for i = 1 to fishes do
38077: LD_ADDR_VAR 0 11
38081: PUSH
38082: DOUBLE
38083: LD_INT 1
38085: DEC
38086: ST_TO_ADDR
38087: LD_VAR 0 7
38091: PUSH
38092: FOR_TO
38093: IFFALSE 38140
// begin hc_class = 20 ;
38095: LD_ADDR_OWVAR 28
38099: PUSH
38100: LD_INT 20
38102: ST_TO_ADDR
// hc_gallery =  ;
38103: LD_ADDR_OWVAR 33
38107: PUSH
38108: LD_STRING 
38110: ST_TO_ADDR
// animal := CreateHuman ;
38111: LD_ADDR_VAR 0 12
38115: PUSH
38116: CALL_OW 44
38120: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38121: LD_VAR 0 12
38125: PPUSH
38126: LD_VAR 0 9
38130: PPUSH
38131: LD_INT 0
38133: PPUSH
38134: CALL 39785 0 3
// end ;
38138: GO 38092
38140: POP
38141: POP
// end ;
38142: LD_VAR 0 10
38146: RET
// export function WantHeal ( sci , unit ) ; begin
38147: LD_INT 0
38149: PPUSH
// if GetTaskList ( sci ) > 0 then
38150: LD_VAR 0 1
38154: PPUSH
38155: CALL_OW 437
38159: PUSH
38160: LD_INT 0
38162: GREATER
38163: IFFALSE 38235
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38165: LD_VAR 0 1
38169: PPUSH
38170: CALL_OW 437
38174: PUSH
38175: LD_INT 1
38177: ARRAY
38178: PUSH
38179: LD_INT 1
38181: ARRAY
38182: PUSH
38183: LD_STRING l
38185: EQUAL
38186: IFFALSE 38213
38188: PUSH
38189: LD_VAR 0 1
38193: PPUSH
38194: CALL_OW 437
38198: PUSH
38199: LD_INT 1
38201: ARRAY
38202: PUSH
38203: LD_INT 4
38205: ARRAY
38206: PUSH
38207: LD_VAR 0 2
38211: EQUAL
38212: AND
38213: IFFALSE 38225
// result := true else
38215: LD_ADDR_VAR 0 3
38219: PUSH
38220: LD_INT 1
38222: ST_TO_ADDR
38223: GO 38233
// result := false ;
38225: LD_ADDR_VAR 0 3
38229: PUSH
38230: LD_INT 0
38232: ST_TO_ADDR
// end else
38233: GO 38243
// result := false ;
38235: LD_ADDR_VAR 0 3
38239: PUSH
38240: LD_INT 0
38242: ST_TO_ADDR
// end ;
38243: LD_VAR 0 3
38247: RET
// export function HealTarget ( sci ) ; begin
38248: LD_INT 0
38250: PPUSH
// if not sci then
38251: LD_VAR 0 1
38255: NOT
38256: IFFALSE 38260
// exit ;
38258: GO 38325
// result := 0 ;
38260: LD_ADDR_VAR 0 2
38264: PUSH
38265: LD_INT 0
38267: ST_TO_ADDR
// if GetTaskList ( sci ) then
38268: LD_VAR 0 1
38272: PPUSH
38273: CALL_OW 437
38277: IFFALSE 38325
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38279: LD_VAR 0 1
38283: PPUSH
38284: CALL_OW 437
38288: PUSH
38289: LD_INT 1
38291: ARRAY
38292: PUSH
38293: LD_INT 1
38295: ARRAY
38296: PUSH
38297: LD_STRING l
38299: EQUAL
38300: IFFALSE 38325
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38302: LD_ADDR_VAR 0 2
38306: PUSH
38307: LD_VAR 0 1
38311: PPUSH
38312: CALL_OW 437
38316: PUSH
38317: LD_INT 1
38319: ARRAY
38320: PUSH
38321: LD_INT 4
38323: ARRAY
38324: ST_TO_ADDR
// end ;
38325: LD_VAR 0 2
38329: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38330: LD_INT 0
38332: PPUSH
38333: PPUSH
38334: PPUSH
38335: PPUSH
// if not base_units then
38336: LD_VAR 0 1
38340: NOT
38341: IFFALSE 38345
// exit ;
38343: GO 38432
// result := false ;
38345: LD_ADDR_VAR 0 2
38349: PUSH
38350: LD_INT 0
38352: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38353: LD_ADDR_VAR 0 5
38357: PUSH
38358: LD_VAR 0 1
38362: PPUSH
38363: LD_INT 21
38365: PUSH
38366: LD_INT 3
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PPUSH
38373: CALL_OW 72
38377: ST_TO_ADDR
// if not tmp then
38378: LD_VAR 0 5
38382: NOT
38383: IFFALSE 38387
// exit ;
38385: GO 38432
// for i in tmp do
38387: LD_ADDR_VAR 0 3
38391: PUSH
38392: LD_VAR 0 5
38396: PUSH
38397: FOR_IN
38398: IFFALSE 38430
// begin result := EnemyInRange ( i , 22 ) ;
38400: LD_ADDR_VAR 0 2
38404: PUSH
38405: LD_VAR 0 3
38409: PPUSH
38410: LD_INT 22
38412: PPUSH
38413: CALL 35857 0 2
38417: ST_TO_ADDR
// if result then
38418: LD_VAR 0 2
38422: IFFALSE 38428
// exit ;
38424: POP
38425: POP
38426: GO 38432
// end ;
38428: GO 38397
38430: POP
38431: POP
// end ;
38432: LD_VAR 0 2
38436: RET
// export function FilterByTag ( units , tag ) ; begin
38437: LD_INT 0
38439: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38440: LD_ADDR_VAR 0 3
38444: PUSH
38445: LD_VAR 0 1
38449: PPUSH
38450: LD_INT 120
38452: PUSH
38453: LD_VAR 0 2
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PPUSH
38462: CALL_OW 72
38466: ST_TO_ADDR
// end ;
38467: LD_VAR 0 3
38471: RET
// export function IsDriver ( un ) ; begin
38472: LD_INT 0
38474: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38475: LD_ADDR_VAR 0 2
38479: PUSH
38480: LD_VAR 0 1
38484: PUSH
38485: LD_INT 55
38487: PUSH
38488: EMPTY
38489: LIST
38490: PPUSH
38491: CALL_OW 69
38495: IN
38496: ST_TO_ADDR
// end ;
38497: LD_VAR 0 2
38501: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38502: LD_INT 0
38504: PPUSH
38505: PPUSH
// list := [ ] ;
38506: LD_ADDR_VAR 0 5
38510: PUSH
38511: EMPTY
38512: ST_TO_ADDR
// case d of 0 :
38513: LD_VAR 0 3
38517: PUSH
38518: LD_INT 0
38520: DOUBLE
38521: EQUAL
38522: IFTRUE 38526
38524: GO 38659
38526: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38527: LD_ADDR_VAR 0 5
38531: PUSH
38532: LD_VAR 0 1
38536: PUSH
38537: LD_INT 4
38539: MINUS
38540: PUSH
38541: LD_VAR 0 2
38545: PUSH
38546: LD_INT 4
38548: MINUS
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: PUSH
38558: LD_VAR 0 1
38562: PUSH
38563: LD_INT 3
38565: MINUS
38566: PUSH
38567: LD_VAR 0 2
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: LIST
38579: PUSH
38580: LD_VAR 0 1
38584: PUSH
38585: LD_INT 4
38587: PLUS
38588: PUSH
38589: LD_VAR 0 2
38593: PUSH
38594: LD_INT 4
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: PUSH
38602: LD_VAR 0 1
38606: PUSH
38607: LD_INT 3
38609: PLUS
38610: PUSH
38611: LD_VAR 0 2
38615: PUSH
38616: LD_INT 3
38618: PLUS
38619: PUSH
38620: LD_INT 5
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: LIST
38627: PUSH
38628: LD_VAR 0 1
38632: PUSH
38633: LD_VAR 0 2
38637: PUSH
38638: LD_INT 4
38640: PLUS
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: ST_TO_ADDR
// end ; 1 :
38657: GO 39357
38659: LD_INT 1
38661: DOUBLE
38662: EQUAL
38663: IFTRUE 38667
38665: GO 38800
38667: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38668: LD_ADDR_VAR 0 5
38672: PUSH
38673: LD_VAR 0 1
38677: PUSH
38678: LD_VAR 0 2
38682: PUSH
38683: LD_INT 4
38685: MINUS
38686: PUSH
38687: LD_INT 3
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: LIST
38694: PUSH
38695: LD_VAR 0 1
38699: PUSH
38700: LD_INT 3
38702: MINUS
38703: PUSH
38704: LD_VAR 0 2
38708: PUSH
38709: LD_INT 3
38711: MINUS
38712: PUSH
38713: LD_INT 2
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: LIST
38720: PUSH
38721: LD_VAR 0 1
38725: PUSH
38726: LD_INT 4
38728: MINUS
38729: PUSH
38730: LD_VAR 0 2
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: LIST
38742: PUSH
38743: LD_VAR 0 1
38747: PUSH
38748: LD_VAR 0 2
38752: PUSH
38753: LD_INT 3
38755: PLUS
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: LIST
38764: PUSH
38765: LD_VAR 0 1
38769: PUSH
38770: LD_INT 4
38772: PLUS
38773: PUSH
38774: LD_VAR 0 2
38778: PUSH
38779: LD_INT 4
38781: PLUS
38782: PUSH
38783: LD_INT 5
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: ST_TO_ADDR
// end ; 2 :
38798: GO 39357
38800: LD_INT 2
38802: DOUBLE
38803: EQUAL
38804: IFTRUE 38808
38806: GO 38937
38808: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38809: LD_ADDR_VAR 0 5
38813: PUSH
38814: LD_VAR 0 1
38818: PUSH
38819: LD_VAR 0 2
38823: PUSH
38824: LD_INT 3
38826: MINUS
38827: PUSH
38828: LD_INT 3
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: LIST
38835: PUSH
38836: LD_VAR 0 1
38840: PUSH
38841: LD_INT 4
38843: PLUS
38844: PUSH
38845: LD_VAR 0 2
38849: PUSH
38850: LD_INT 4
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: LIST
38857: PUSH
38858: LD_VAR 0 1
38862: PUSH
38863: LD_VAR 0 2
38867: PUSH
38868: LD_INT 4
38870: PLUS
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: PUSH
38880: LD_VAR 0 1
38884: PUSH
38885: LD_INT 3
38887: MINUS
38888: PUSH
38889: LD_VAR 0 2
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: LIST
38901: PUSH
38902: LD_VAR 0 1
38906: PUSH
38907: LD_INT 4
38909: MINUS
38910: PUSH
38911: LD_VAR 0 2
38915: PUSH
38916: LD_INT 4
38918: MINUS
38919: PUSH
38920: LD_INT 2
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: LIST
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: ST_TO_ADDR
// end ; 3 :
38935: GO 39357
38937: LD_INT 3
38939: DOUBLE
38940: EQUAL
38941: IFTRUE 38945
38943: GO 39078
38945: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38946: LD_ADDR_VAR 0 5
38950: PUSH
38951: LD_VAR 0 1
38955: PUSH
38956: LD_INT 3
38958: PLUS
38959: PUSH
38960: LD_VAR 0 2
38964: PUSH
38965: LD_INT 4
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: LIST
38972: PUSH
38973: LD_VAR 0 1
38977: PUSH
38978: LD_INT 4
38980: PLUS
38981: PUSH
38982: LD_VAR 0 2
38986: PUSH
38987: LD_INT 4
38989: PLUS
38990: PUSH
38991: LD_INT 5
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: PUSH
38999: LD_VAR 0 1
39003: PUSH
39004: LD_INT 4
39006: MINUS
39007: PUSH
39008: LD_VAR 0 2
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: LIST
39020: PUSH
39021: LD_VAR 0 1
39025: PUSH
39026: LD_VAR 0 2
39030: PUSH
39031: LD_INT 4
39033: MINUS
39034: PUSH
39035: LD_INT 3
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: LIST
39042: PUSH
39043: LD_VAR 0 1
39047: PUSH
39048: LD_INT 3
39050: MINUS
39051: PUSH
39052: LD_VAR 0 2
39056: PUSH
39057: LD_INT 3
39059: MINUS
39060: PUSH
39061: LD_INT 2
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: LIST
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: ST_TO_ADDR
// end ; 4 :
39076: GO 39357
39078: LD_INT 4
39080: DOUBLE
39081: EQUAL
39082: IFTRUE 39086
39084: GO 39219
39086: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39087: LD_ADDR_VAR 0 5
39091: PUSH
39092: LD_VAR 0 1
39096: PUSH
39097: LD_VAR 0 2
39101: PUSH
39102: LD_INT 4
39104: PLUS
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: LIST
39113: PUSH
39114: LD_VAR 0 1
39118: PUSH
39119: LD_INT 3
39121: PLUS
39122: PUSH
39123: LD_VAR 0 2
39127: PUSH
39128: LD_INT 3
39130: PLUS
39131: PUSH
39132: LD_INT 5
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: PUSH
39140: LD_VAR 0 1
39144: PUSH
39145: LD_INT 4
39147: PLUS
39148: PUSH
39149: LD_VAR 0 2
39153: PUSH
39154: LD_INT 4
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: LIST
39161: PUSH
39162: LD_VAR 0 1
39166: PUSH
39167: LD_VAR 0 2
39171: PUSH
39172: LD_INT 3
39174: MINUS
39175: PUSH
39176: LD_INT 3
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: PUSH
39184: LD_VAR 0 1
39188: PUSH
39189: LD_INT 4
39191: MINUS
39192: PUSH
39193: LD_VAR 0 2
39197: PUSH
39198: LD_INT 4
39200: MINUS
39201: PUSH
39202: LD_INT 2
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: LIST
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: ST_TO_ADDR
// end ; 5 :
39217: GO 39357
39219: LD_INT 5
39221: DOUBLE
39222: EQUAL
39223: IFTRUE 39227
39225: GO 39356
39227: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39228: LD_ADDR_VAR 0 5
39232: PUSH
39233: LD_VAR 0 1
39237: PUSH
39238: LD_INT 4
39240: MINUS
39241: PUSH
39242: LD_VAR 0 2
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: LIST
39254: PUSH
39255: LD_VAR 0 1
39259: PUSH
39260: LD_VAR 0 2
39264: PUSH
39265: LD_INT 4
39267: MINUS
39268: PUSH
39269: LD_INT 3
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: LIST
39276: PUSH
39277: LD_VAR 0 1
39281: PUSH
39282: LD_INT 4
39284: PLUS
39285: PUSH
39286: LD_VAR 0 2
39290: PUSH
39291: LD_INT 4
39293: PLUS
39294: PUSH
39295: LD_INT 5
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: LIST
39302: PUSH
39303: LD_VAR 0 1
39307: PUSH
39308: LD_INT 3
39310: PLUS
39311: PUSH
39312: LD_VAR 0 2
39316: PUSH
39317: LD_INT 4
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: LIST
39324: PUSH
39325: LD_VAR 0 1
39329: PUSH
39330: LD_VAR 0 2
39334: PUSH
39335: LD_INT 3
39337: PLUS
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: LIST
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: ST_TO_ADDR
// end ; end ;
39354: GO 39357
39356: POP
// result := list ;
39357: LD_ADDR_VAR 0 4
39361: PUSH
39362: LD_VAR 0 5
39366: ST_TO_ADDR
// end ;
39367: LD_VAR 0 4
39371: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39372: LD_INT 0
39374: PPUSH
39375: PPUSH
39376: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39377: LD_VAR 0 1
39381: NOT
39382: IFTRUE 39410
39384: PUSH
39385: LD_VAR 0 2
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: LD_INT 2
39395: PUSH
39396: LD_INT 3
39398: PUSH
39399: LD_INT 4
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: IN
39408: NOT
39409: OR
39410: IFFALSE 39414
// exit ;
39412: GO 39497
// tmp := [ ] ;
39414: LD_ADDR_VAR 0 5
39418: PUSH
39419: EMPTY
39420: ST_TO_ADDR
// for i in units do
39421: LD_ADDR_VAR 0 4
39425: PUSH
39426: LD_VAR 0 1
39430: PUSH
39431: FOR_IN
39432: IFFALSE 39466
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39434: LD_ADDR_VAR 0 5
39438: PUSH
39439: LD_VAR 0 5
39443: PPUSH
39444: LD_VAR 0 4
39448: PPUSH
39449: LD_VAR 0 2
39453: PPUSH
39454: CALL_OW 259
39458: PPUSH
39459: CALL 40892 0 2
39463: ST_TO_ADDR
39464: GO 39431
39466: POP
39467: POP
// if not tmp then
39468: LD_VAR 0 5
39472: NOT
39473: IFFALSE 39477
// exit ;
39475: GO 39497
// result := SortListByListDesc ( units , tmp ) ;
39477: LD_ADDR_VAR 0 3
39481: PUSH
39482: LD_VAR 0 1
39486: PPUSH
39487: LD_VAR 0 5
39491: PPUSH
39492: CALL_OW 77
39496: ST_TO_ADDR
// end ;
39497: LD_VAR 0 3
39501: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39502: LD_INT 0
39504: PPUSH
39505: PPUSH
39506: PPUSH
// result := false ;
39507: LD_ADDR_VAR 0 3
39511: PUSH
39512: LD_INT 0
39514: ST_TO_ADDR
// if not building then
39515: LD_VAR 0 2
39519: NOT
39520: IFFALSE 39524
// exit ;
39522: GO 39668
// x := GetX ( building ) ;
39524: LD_ADDR_VAR 0 4
39528: PUSH
39529: LD_VAR 0 2
39533: PPUSH
39534: CALL_OW 250
39538: ST_TO_ADDR
// y := GetY ( building ) ;
39539: LD_ADDR_VAR 0 5
39543: PUSH
39544: LD_VAR 0 2
39548: PPUSH
39549: CALL_OW 251
39553: ST_TO_ADDR
// if not x or not y then
39554: LD_VAR 0 4
39558: NOT
39559: IFTRUE 39568
39561: PUSH
39562: LD_VAR 0 5
39566: NOT
39567: OR
39568: IFFALSE 39572
// exit ;
39570: GO 39668
// if GetTaskList ( unit ) then
39572: LD_VAR 0 1
39576: PPUSH
39577: CALL_OW 437
39581: IFFALSE 39668
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39583: LD_STRING e
39585: PUSH
39586: LD_VAR 0 1
39590: PPUSH
39591: CALL_OW 437
39595: PUSH
39596: LD_INT 1
39598: ARRAY
39599: PUSH
39600: LD_INT 1
39602: ARRAY
39603: EQUAL
39604: IFFALSE 39631
39606: PUSH
39607: LD_VAR 0 4
39611: PUSH
39612: LD_VAR 0 1
39616: PPUSH
39617: CALL_OW 437
39621: PUSH
39622: LD_INT 1
39624: ARRAY
39625: PUSH
39626: LD_INT 2
39628: ARRAY
39629: EQUAL
39630: AND
39631: IFFALSE 39658
39633: PUSH
39634: LD_VAR 0 5
39638: PUSH
39639: LD_VAR 0 1
39643: PPUSH
39644: CALL_OW 437
39648: PUSH
39649: LD_INT 1
39651: ARRAY
39652: PUSH
39653: LD_INT 3
39655: ARRAY
39656: EQUAL
39657: AND
39658: IFFALSE 39668
// result := true end ;
39660: LD_ADDR_VAR 0 3
39664: PUSH
39665: LD_INT 1
39667: ST_TO_ADDR
// end ;
39668: LD_VAR 0 3
39672: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39673: LD_INT 0
39675: PPUSH
// result := false ;
39676: LD_ADDR_VAR 0 4
39680: PUSH
39681: LD_INT 0
39683: ST_TO_ADDR
// if GetTaskList ( unit ) then
39684: LD_VAR 0 1
39688: PPUSH
39689: CALL_OW 437
39693: IFFALSE 39780
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39695: LD_STRING M
39697: PUSH
39698: LD_VAR 0 1
39702: PPUSH
39703: CALL_OW 437
39707: PUSH
39708: LD_INT 1
39710: ARRAY
39711: PUSH
39712: LD_INT 1
39714: ARRAY
39715: EQUAL
39716: IFFALSE 39743
39718: PUSH
39719: LD_VAR 0 2
39723: PUSH
39724: LD_VAR 0 1
39728: PPUSH
39729: CALL_OW 437
39733: PUSH
39734: LD_INT 1
39736: ARRAY
39737: PUSH
39738: LD_INT 2
39740: ARRAY
39741: EQUAL
39742: AND
39743: IFFALSE 39770
39745: PUSH
39746: LD_VAR 0 3
39750: PUSH
39751: LD_VAR 0 1
39755: PPUSH
39756: CALL_OW 437
39760: PUSH
39761: LD_INT 1
39763: ARRAY
39764: PUSH
39765: LD_INT 3
39767: ARRAY
39768: EQUAL
39769: AND
39770: IFFALSE 39780
// result := true ;
39772: LD_ADDR_VAR 0 4
39776: PUSH
39777: LD_INT 1
39779: ST_TO_ADDR
// end ; end ;
39780: LD_VAR 0 4
39784: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39785: LD_INT 0
39787: PPUSH
39788: PPUSH
39789: PPUSH
39790: PPUSH
// if not unit or not area then
39791: LD_VAR 0 1
39795: NOT
39796: IFTRUE 39805
39798: PUSH
39799: LD_VAR 0 2
39803: NOT
39804: OR
39805: IFFALSE 39809
// exit ;
39807: GO 39985
// tmp := AreaToList ( area , i ) ;
39809: LD_ADDR_VAR 0 6
39813: PUSH
39814: LD_VAR 0 2
39818: PPUSH
39819: LD_VAR 0 5
39823: PPUSH
39824: CALL_OW 517
39828: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39829: LD_ADDR_VAR 0 5
39833: PUSH
39834: DOUBLE
39835: LD_INT 1
39837: DEC
39838: ST_TO_ADDR
39839: LD_VAR 0 6
39843: PUSH
39844: LD_INT 1
39846: ARRAY
39847: PUSH
39848: FOR_TO
39849: IFFALSE 39983
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39851: LD_ADDR_VAR 0 7
39855: PUSH
39856: LD_VAR 0 6
39860: PUSH
39861: LD_INT 1
39863: ARRAY
39864: PUSH
39865: LD_VAR 0 5
39869: ARRAY
39870: PUSH
39871: LD_VAR 0 6
39875: PUSH
39876: LD_INT 2
39878: ARRAY
39879: PUSH
39880: LD_VAR 0 5
39884: ARRAY
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39890: LD_INT 92
39892: PUSH
39893: LD_VAR 0 7
39897: PUSH
39898: LD_INT 1
39900: ARRAY
39901: PUSH
39902: LD_VAR 0 7
39906: PUSH
39907: LD_INT 2
39909: ARRAY
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: PPUSH
39920: CALL_OW 69
39924: PUSH
39925: LD_INT 0
39927: EQUAL
39928: IFFALSE 39981
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39930: LD_VAR 0 1
39934: PPUSH
39935: LD_VAR 0 7
39939: PUSH
39940: LD_INT 1
39942: ARRAY
39943: PPUSH
39944: LD_VAR 0 7
39948: PUSH
39949: LD_INT 2
39951: ARRAY
39952: PPUSH
39953: LD_VAR 0 3
39957: PPUSH
39958: CALL_OW 48
// result := IsPlaced ( unit ) ;
39962: LD_ADDR_VAR 0 4
39966: PUSH
39967: LD_VAR 0 1
39971: PPUSH
39972: CALL_OW 305
39976: ST_TO_ADDR
// exit ;
39977: POP
39978: POP
39979: GO 39985
// end ; end ;
39981: GO 39848
39983: POP
39984: POP
// end ;
39985: LD_VAR 0 4
39989: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39990: LD_INT 0
39992: PPUSH
39993: PPUSH
39994: PPUSH
// if not side or side > 8 then
39995: LD_VAR 0 1
39999: NOT
40000: IFTRUE 40012
40002: PUSH
40003: LD_VAR 0 1
40007: PUSH
40008: LD_INT 8
40010: GREATER
40011: OR
40012: IFFALSE 40016
// exit ;
40014: GO 40203
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40016: LD_ADDR_VAR 0 4
40020: PUSH
40021: LD_INT 22
40023: PUSH
40024: LD_VAR 0 1
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 21
40035: PUSH
40036: LD_INT 3
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PPUSH
40047: CALL_OW 69
40051: ST_TO_ADDR
// if not tmp then
40052: LD_VAR 0 4
40056: NOT
40057: IFFALSE 40061
// exit ;
40059: GO 40203
// enable_addtolog := true ;
40061: LD_ADDR_OWVAR 81
40065: PUSH
40066: LD_INT 1
40068: ST_TO_ADDR
// AddToLog ( [ ) ;
40069: LD_STRING [
40071: PPUSH
40072: CALL_OW 561
// for i in tmp do
40076: LD_ADDR_VAR 0 3
40080: PUSH
40081: LD_VAR 0 4
40085: PUSH
40086: FOR_IN
40087: IFFALSE 40194
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40089: LD_STRING [
40091: PUSH
40092: LD_VAR 0 3
40096: PPUSH
40097: CALL_OW 266
40101: STR
40102: PUSH
40103: LD_STRING , 
40105: STR
40106: PUSH
40107: LD_VAR 0 3
40111: PPUSH
40112: CALL_OW 250
40116: STR
40117: PUSH
40118: LD_STRING , 
40120: STR
40121: PUSH
40122: LD_VAR 0 3
40126: PPUSH
40127: CALL_OW 251
40131: STR
40132: PUSH
40133: LD_STRING , 
40135: STR
40136: PUSH
40137: LD_VAR 0 3
40141: PPUSH
40142: CALL_OW 254
40146: STR
40147: PUSH
40148: LD_STRING , 
40150: STR
40151: PUSH
40152: LD_VAR 0 3
40156: PPUSH
40157: LD_INT 1
40159: PPUSH
40160: CALL_OW 268
40164: STR
40165: PUSH
40166: LD_STRING , 
40168: STR
40169: PUSH
40170: LD_VAR 0 3
40174: PPUSH
40175: LD_INT 2
40177: PPUSH
40178: CALL_OW 268
40182: STR
40183: PUSH
40184: LD_STRING ],
40186: STR
40187: PPUSH
40188: CALL_OW 561
// end ;
40192: GO 40086
40194: POP
40195: POP
// AddToLog ( ]; ) ;
40196: LD_STRING ];
40198: PPUSH
40199: CALL_OW 561
// end ;
40203: LD_VAR 0 2
40207: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40208: LD_INT 0
40210: PPUSH
40211: PPUSH
40212: PPUSH
40213: PPUSH
40214: PPUSH
// if not area or not rate or not max then
40215: LD_VAR 0 1
40219: NOT
40220: IFTRUE 40229
40222: PUSH
40223: LD_VAR 0 2
40227: NOT
40228: OR
40229: IFTRUE 40238
40231: PUSH
40232: LD_VAR 0 4
40236: NOT
40237: OR
40238: IFFALSE 40242
// exit ;
40240: GO 40431
// while 1 do
40242: LD_INT 1
40244: IFFALSE 40431
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40246: LD_ADDR_VAR 0 9
40250: PUSH
40251: LD_VAR 0 1
40255: PPUSH
40256: LD_INT 1
40258: PPUSH
40259: CALL_OW 287
40263: PUSH
40264: LD_INT 10
40266: MUL
40267: ST_TO_ADDR
// r := rate / 10 ;
40268: LD_ADDR_VAR 0 7
40272: PUSH
40273: LD_VAR 0 2
40277: PUSH
40278: LD_INT 10
40280: DIVREAL
40281: ST_TO_ADDR
// time := 1 1$00 ;
40282: LD_ADDR_VAR 0 8
40286: PUSH
40287: LD_INT 2100
40289: ST_TO_ADDR
// if amount < min then
40290: LD_VAR 0 9
40294: PUSH
40295: LD_VAR 0 3
40299: LESS
40300: IFFALSE 40318
// r := r * 2 else
40302: LD_ADDR_VAR 0 7
40306: PUSH
40307: LD_VAR 0 7
40311: PUSH
40312: LD_INT 2
40314: MUL
40315: ST_TO_ADDR
40316: GO 40344
// if amount > max then
40318: LD_VAR 0 9
40322: PUSH
40323: LD_VAR 0 4
40327: GREATER
40328: IFFALSE 40344
// r := r / 2 ;
40330: LD_ADDR_VAR 0 7
40334: PUSH
40335: LD_VAR 0 7
40339: PUSH
40340: LD_INT 2
40342: DIVREAL
40343: ST_TO_ADDR
// time := time / r ;
40344: LD_ADDR_VAR 0 8
40348: PUSH
40349: LD_VAR 0 8
40353: PUSH
40354: LD_VAR 0 7
40358: DIVREAL
40359: ST_TO_ADDR
// if time < 0 then
40360: LD_VAR 0 8
40364: PUSH
40365: LD_INT 0
40367: LESS
40368: IFFALSE 40385
// time := time * - 1 ;
40370: LD_ADDR_VAR 0 8
40374: PUSH
40375: LD_VAR 0 8
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: MUL
40384: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40385: LD_VAR 0 8
40389: PUSH
40390: LD_INT 35
40392: PPUSH
40393: LD_INT 875
40395: PPUSH
40396: CALL_OW 12
40400: PLUS
40401: PPUSH
40402: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40406: LD_INT 1
40408: PPUSH
40409: LD_INT 5
40411: PPUSH
40412: CALL_OW 12
40416: PPUSH
40417: LD_VAR 0 1
40421: PPUSH
40422: LD_INT 1
40424: PPUSH
40425: CALL_OW 55
// end ;
40429: GO 40242
// end ;
40431: LD_VAR 0 5
40435: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40436: LD_INT 0
40438: PPUSH
40439: PPUSH
40440: PPUSH
40441: PPUSH
40442: PPUSH
40443: PPUSH
40444: PPUSH
40445: PPUSH
// if not turrets or not factories then
40446: LD_VAR 0 1
40450: NOT
40451: IFTRUE 40460
40453: PUSH
40454: LD_VAR 0 2
40458: NOT
40459: OR
40460: IFFALSE 40464
// exit ;
40462: GO 40771
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40464: LD_ADDR_VAR 0 10
40468: PUSH
40469: LD_INT 5
40471: PUSH
40472: LD_INT 6
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: LD_INT 4
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 3
40491: PUSH
40492: LD_INT 5
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 24
40506: PUSH
40507: LD_INT 25
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 23
40516: PUSH
40517: LD_INT 27
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 42
40530: PUSH
40531: LD_INT 43
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 44
40540: PUSH
40541: LD_INT 46
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 45
40550: PUSH
40551: LD_INT 47
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: LIST
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: LIST
40567: ST_TO_ADDR
// result := [ ] ;
40568: LD_ADDR_VAR 0 3
40572: PUSH
40573: EMPTY
40574: ST_TO_ADDR
// for i in turrets do
40575: LD_ADDR_VAR 0 4
40579: PUSH
40580: LD_VAR 0 1
40584: PUSH
40585: FOR_IN
40586: IFFALSE 40769
// begin nat := GetNation ( i ) ;
40588: LD_ADDR_VAR 0 7
40592: PUSH
40593: LD_VAR 0 4
40597: PPUSH
40598: CALL_OW 248
40602: ST_TO_ADDR
// weapon := 0 ;
40603: LD_ADDR_VAR 0 8
40607: PUSH
40608: LD_INT 0
40610: ST_TO_ADDR
// if not nat then
40611: LD_VAR 0 7
40615: NOT
40616: IFFALSE 40620
// continue ;
40618: GO 40585
// for j in list [ nat ] do
40620: LD_ADDR_VAR 0 5
40624: PUSH
40625: LD_VAR 0 10
40629: PUSH
40630: LD_VAR 0 7
40634: ARRAY
40635: PUSH
40636: FOR_IN
40637: IFFALSE 40678
// if GetBWeapon ( i ) = j [ 1 ] then
40639: LD_VAR 0 4
40643: PPUSH
40644: CALL_OW 269
40648: PUSH
40649: LD_VAR 0 5
40653: PUSH
40654: LD_INT 1
40656: ARRAY
40657: EQUAL
40658: IFFALSE 40676
// begin weapon := j [ 2 ] ;
40660: LD_ADDR_VAR 0 8
40664: PUSH
40665: LD_VAR 0 5
40669: PUSH
40670: LD_INT 2
40672: ARRAY
40673: ST_TO_ADDR
// break ;
40674: GO 40678
// end ;
40676: GO 40636
40678: POP
40679: POP
// if not weapon then
40680: LD_VAR 0 8
40684: NOT
40685: IFFALSE 40689
// continue ;
40687: GO 40585
// for k in factories do
40689: LD_ADDR_VAR 0 6
40693: PUSH
40694: LD_VAR 0 2
40698: PUSH
40699: FOR_IN
40700: IFFALSE 40765
// begin weapons := AvailableWeaponList ( k ) ;
40702: LD_ADDR_VAR 0 9
40706: PUSH
40707: LD_VAR 0 6
40711: PPUSH
40712: CALL_OW 478
40716: ST_TO_ADDR
// if not weapons then
40717: LD_VAR 0 9
40721: NOT
40722: IFFALSE 40726
// continue ;
40724: GO 40699
// if weapon in weapons then
40726: LD_VAR 0 8
40730: PUSH
40731: LD_VAR 0 9
40735: IN
40736: IFFALSE 40763
// begin result := [ i , weapon ] ;
40738: LD_ADDR_VAR 0 3
40742: PUSH
40743: LD_VAR 0 4
40747: PUSH
40748: LD_VAR 0 8
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: ST_TO_ADDR
// exit ;
40757: POP
40758: POP
40759: POP
40760: POP
40761: GO 40771
// end ; end ;
40763: GO 40699
40765: POP
40766: POP
// end ;
40767: GO 40585
40769: POP
40770: POP
// end ;
40771: LD_VAR 0 3
40775: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40776: LD_INT 0
40778: PPUSH
// if not side or side > 8 then
40779: LD_VAR 0 3
40783: NOT
40784: IFTRUE 40796
40786: PUSH
40787: LD_VAR 0 3
40791: PUSH
40792: LD_INT 8
40794: GREATER
40795: OR
40796: IFFALSE 40800
// exit ;
40798: GO 40859
// if not range then
40800: LD_VAR 0 4
40804: NOT
40805: IFFALSE 40816
// range := - 12 ;
40807: LD_ADDR_VAR 0 4
40811: PUSH
40812: LD_INT 12
40814: NEG
40815: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40816: LD_VAR 0 1
40820: PPUSH
40821: LD_VAR 0 2
40825: PPUSH
40826: LD_VAR 0 3
40830: PPUSH
40831: LD_VAR 0 4
40835: PPUSH
40836: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40840: LD_VAR 0 1
40844: PPUSH
40845: LD_VAR 0 2
40849: PPUSH
40850: LD_VAR 0 3
40854: PPUSH
40855: CALL_OW 331
// end ;
40859: LD_VAR 0 5
40863: RET
// export function Video ( mode ) ; begin
40864: LD_INT 0
40866: PPUSH
// ingame_video = mode ;
40867: LD_ADDR_OWVAR 52
40871: PUSH
40872: LD_VAR 0 1
40876: ST_TO_ADDR
// interface_hidden = mode ;
40877: LD_ADDR_OWVAR 54
40881: PUSH
40882: LD_VAR 0 1
40886: ST_TO_ADDR
// end ;
40887: LD_VAR 0 2
40891: RET
// export function Join ( array , element ) ; begin
40892: LD_INT 0
40894: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40895: LD_ADDR_VAR 0 3
40899: PUSH
40900: LD_VAR 0 1
40904: PPUSH
40905: LD_VAR 0 1
40909: PUSH
40910: LD_INT 1
40912: PLUS
40913: PPUSH
40914: LD_VAR 0 2
40918: PPUSH
40919: CALL_OW 1
40923: ST_TO_ADDR
// end ;
40924: LD_VAR 0 3
40928: RET
// export function JoinUnion ( array , element ) ; begin
40929: LD_INT 0
40931: PPUSH
// result := array union element ;
40932: LD_ADDR_VAR 0 3
40936: PUSH
40937: LD_VAR 0 1
40941: PUSH
40942: LD_VAR 0 2
40946: UNION
40947: ST_TO_ADDR
// end ;
40948: LD_VAR 0 3
40952: RET
// export function GetBehemoths ( side ) ; begin
40953: LD_INT 0
40955: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40956: LD_ADDR_VAR 0 2
40960: PUSH
40961: LD_INT 22
40963: PUSH
40964: LD_VAR 0 1
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 31
40975: PUSH
40976: LD_INT 25
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PPUSH
40987: CALL_OW 69
40991: ST_TO_ADDR
// end ;
40992: LD_VAR 0 2
40996: RET
// export function Shuffle ( array ) ; var i , index ; begin
40997: LD_INT 0
40999: PPUSH
41000: PPUSH
41001: PPUSH
// result := [ ] ;
41002: LD_ADDR_VAR 0 2
41006: PUSH
41007: EMPTY
41008: ST_TO_ADDR
// if not array then
41009: LD_VAR 0 1
41013: NOT
41014: IFFALSE 41018
// exit ;
41016: GO 41117
// Randomize ;
41018: CALL_OW 10
// for i = array downto 1 do
41022: LD_ADDR_VAR 0 3
41026: PUSH
41027: DOUBLE
41028: LD_VAR 0 1
41032: INC
41033: ST_TO_ADDR
41034: LD_INT 1
41036: PUSH
41037: FOR_DOWNTO
41038: IFFALSE 41115
// begin index := rand ( 1 , array ) ;
41040: LD_ADDR_VAR 0 4
41044: PUSH
41045: LD_INT 1
41047: PPUSH
41048: LD_VAR 0 1
41052: PPUSH
41053: CALL_OW 12
41057: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41058: LD_ADDR_VAR 0 2
41062: PUSH
41063: LD_VAR 0 2
41067: PPUSH
41068: LD_VAR 0 2
41072: PUSH
41073: LD_INT 1
41075: PLUS
41076: PPUSH
41077: LD_VAR 0 1
41081: PUSH
41082: LD_VAR 0 4
41086: ARRAY
41087: PPUSH
41088: CALL_OW 2
41092: ST_TO_ADDR
// array := Delete ( array , index ) ;
41093: LD_ADDR_VAR 0 1
41097: PUSH
41098: LD_VAR 0 1
41102: PPUSH
41103: LD_VAR 0 4
41107: PPUSH
41108: CALL_OW 3
41112: ST_TO_ADDR
// end ;
41113: GO 41037
41115: POP
41116: POP
// end ;
41117: LD_VAR 0 2
41121: RET
// export function GetBaseMaterials ( base ) ; begin
41122: LD_INT 0
41124: PPUSH
// result := [ 0 , 0 , 0 ] ;
41125: LD_ADDR_VAR 0 2
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: LIST
41143: ST_TO_ADDR
// if not base then
41144: LD_VAR 0 1
41148: NOT
41149: IFFALSE 41153
// exit ;
41151: GO 41202
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41153: LD_ADDR_VAR 0 2
41157: PUSH
41158: LD_VAR 0 1
41162: PPUSH
41163: LD_INT 1
41165: PPUSH
41166: CALL_OW 275
41170: PUSH
41171: LD_VAR 0 1
41175: PPUSH
41176: LD_INT 2
41178: PPUSH
41179: CALL_OW 275
41183: PUSH
41184: LD_VAR 0 1
41188: PPUSH
41189: LD_INT 3
41191: PPUSH
41192: CALL_OW 275
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: LIST
41201: ST_TO_ADDR
// end ;
41202: LD_VAR 0 2
41206: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41207: LD_INT 0
41209: PPUSH
41210: PPUSH
// result := array ;
41211: LD_ADDR_VAR 0 3
41215: PUSH
41216: LD_VAR 0 1
41220: ST_TO_ADDR
// if size >= result then
41221: LD_VAR 0 2
41225: PUSH
41226: LD_VAR 0 3
41230: GREATEREQUAL
41231: IFFALSE 41235
// exit ;
41233: GO 41285
// if size then
41235: LD_VAR 0 2
41239: IFFALSE 41285
// for i := array downto size do
41241: LD_ADDR_VAR 0 4
41245: PUSH
41246: DOUBLE
41247: LD_VAR 0 1
41251: INC
41252: ST_TO_ADDR
41253: LD_VAR 0 2
41257: PUSH
41258: FOR_DOWNTO
41259: IFFALSE 41283
// result := Delete ( result , result ) ;
41261: LD_ADDR_VAR 0 3
41265: PUSH
41266: LD_VAR 0 3
41270: PPUSH
41271: LD_VAR 0 3
41275: PPUSH
41276: CALL_OW 3
41280: ST_TO_ADDR
41281: GO 41258
41283: POP
41284: POP
// end ;
41285: LD_VAR 0 3
41289: RET
// export function ComExit ( unit ) ; var tmp ; begin
41290: LD_INT 0
41292: PPUSH
41293: PPUSH
// if not IsInUnit ( unit ) then
41294: LD_VAR 0 1
41298: PPUSH
41299: CALL_OW 310
41303: NOT
41304: IFFALSE 41308
// exit ;
41306: GO 41368
// tmp := IsInUnit ( unit ) ;
41308: LD_ADDR_VAR 0 3
41312: PUSH
41313: LD_VAR 0 1
41317: PPUSH
41318: CALL_OW 310
41322: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41323: LD_VAR 0 3
41327: PPUSH
41328: CALL_OW 247
41332: PUSH
41333: LD_INT 2
41335: EQUAL
41336: IFFALSE 41349
// ComExitVehicle ( unit ) else
41338: LD_VAR 0 1
41342: PPUSH
41343: CALL_OW 121
41347: GO 41358
// ComExitBuilding ( unit ) ;
41349: LD_VAR 0 1
41353: PPUSH
41354: CALL_OW 122
// result := tmp ;
41358: LD_ADDR_VAR 0 2
41362: PUSH
41363: LD_VAR 0 3
41367: ST_TO_ADDR
// end ;
41368: LD_VAR 0 2
41372: RET
// export function ComExitAll ( units ) ; var i ; begin
41373: LD_INT 0
41375: PPUSH
41376: PPUSH
// if not units then
41377: LD_VAR 0 1
41381: NOT
41382: IFFALSE 41386
// exit ;
41384: GO 41412
// for i in units do
41386: LD_ADDR_VAR 0 3
41390: PUSH
41391: LD_VAR 0 1
41395: PUSH
41396: FOR_IN
41397: IFFALSE 41410
// ComExit ( i ) ;
41399: LD_VAR 0 3
41403: PPUSH
41404: CALL 41290 0 1
41408: GO 41396
41410: POP
41411: POP
// end ;
41412: LD_VAR 0 2
41416: RET
// export function ResetHc ; begin
41417: LD_INT 0
41419: PPUSH
// InitHc ;
41420: CALL_OW 19
// hc_importance := 0 ;
41424: LD_ADDR_OWVAR 32
41428: PUSH
41429: LD_INT 0
41431: ST_TO_ADDR
// end ;
41432: LD_VAR 0 1
41436: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41437: LD_INT 0
41439: PPUSH
41440: PPUSH
41441: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41442: LD_ADDR_VAR 0 6
41446: PUSH
41447: LD_VAR 0 1
41451: PUSH
41452: LD_VAR 0 3
41456: PLUS
41457: PUSH
41458: LD_INT 2
41460: DIV
41461: ST_TO_ADDR
// if _x < 0 then
41462: LD_VAR 0 6
41466: PUSH
41467: LD_INT 0
41469: LESS
41470: IFFALSE 41487
// _x := _x * - 1 ;
41472: LD_ADDR_VAR 0 6
41476: PUSH
41477: LD_VAR 0 6
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: MUL
41486: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41487: LD_ADDR_VAR 0 7
41491: PUSH
41492: LD_VAR 0 2
41496: PUSH
41497: LD_VAR 0 4
41501: PLUS
41502: PUSH
41503: LD_INT 2
41505: DIV
41506: ST_TO_ADDR
// if _y < 0 then
41507: LD_VAR 0 7
41511: PUSH
41512: LD_INT 0
41514: LESS
41515: IFFALSE 41532
// _y := _y * - 1 ;
41517: LD_ADDR_VAR 0 7
41521: PUSH
41522: LD_VAR 0 7
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: MUL
41531: ST_TO_ADDR
// result := [ _x , _y ] ;
41532: LD_ADDR_VAR 0 5
41536: PUSH
41537: LD_VAR 0 6
41541: PUSH
41542: LD_VAR 0 7
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: ST_TO_ADDR
// end ;
41551: LD_VAR 0 5
41555: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41556: LD_INT 0
41558: PPUSH
41559: PPUSH
41560: PPUSH
41561: PPUSH
// task := GetTaskList ( unit ) ;
41562: LD_ADDR_VAR 0 7
41566: PUSH
41567: LD_VAR 0 1
41571: PPUSH
41572: CALL_OW 437
41576: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41577: LD_VAR 0 7
41581: NOT
41582: IFFALSE 41601
41584: PUSH
41585: LD_VAR 0 1
41589: PPUSH
41590: LD_VAR 0 2
41594: PPUSH
41595: CALL_OW 308
41599: NOT
41600: AND
41601: IFFALSE 41605
// exit ;
41603: GO 41723
// if IsInArea ( unit , area ) then
41605: LD_VAR 0 1
41609: PPUSH
41610: LD_VAR 0 2
41614: PPUSH
41615: CALL_OW 308
41619: IFFALSE 41637
// begin ComMoveToArea ( unit , goAway ) ;
41621: LD_VAR 0 1
41625: PPUSH
41626: LD_VAR 0 3
41630: PPUSH
41631: CALL_OW 113
// exit ;
41635: GO 41723
// end ; if task [ 1 ] [ 1 ] <> M then
41637: LD_VAR 0 7
41641: PUSH
41642: LD_INT 1
41644: ARRAY
41645: PUSH
41646: LD_INT 1
41648: ARRAY
41649: PUSH
41650: LD_STRING M
41652: NONEQUAL
41653: IFFALSE 41657
// exit ;
41655: GO 41723
// x := task [ 1 ] [ 2 ] ;
41657: LD_ADDR_VAR 0 5
41661: PUSH
41662: LD_VAR 0 7
41666: PUSH
41667: LD_INT 1
41669: ARRAY
41670: PUSH
41671: LD_INT 2
41673: ARRAY
41674: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41675: LD_ADDR_VAR 0 6
41679: PUSH
41680: LD_VAR 0 7
41684: PUSH
41685: LD_INT 1
41687: ARRAY
41688: PUSH
41689: LD_INT 3
41691: ARRAY
41692: ST_TO_ADDR
// if InArea ( x , y , area ) then
41693: LD_VAR 0 5
41697: PPUSH
41698: LD_VAR 0 6
41702: PPUSH
41703: LD_VAR 0 2
41707: PPUSH
41708: CALL_OW 309
41712: IFFALSE 41723
// ComStop ( unit ) ;
41714: LD_VAR 0 1
41718: PPUSH
41719: CALL_OW 141
// end ;
41723: LD_VAR 0 4
41727: RET
// export function Abs ( value ) ; begin
41728: LD_INT 0
41730: PPUSH
// result := value ;
41731: LD_ADDR_VAR 0 2
41735: PUSH
41736: LD_VAR 0 1
41740: ST_TO_ADDR
// if value < 0 then
41741: LD_VAR 0 1
41745: PUSH
41746: LD_INT 0
41748: LESS
41749: IFFALSE 41766
// result := value * - 1 ;
41751: LD_ADDR_VAR 0 2
41755: PUSH
41756: LD_VAR 0 1
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: MUL
41765: ST_TO_ADDR
// end ;
41766: LD_VAR 0 2
41770: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41771: LD_INT 0
41773: PPUSH
41774: PPUSH
41775: PPUSH
41776: PPUSH
41777: PPUSH
41778: PPUSH
41779: PPUSH
41780: PPUSH
// if not unit or not building then
41781: LD_VAR 0 1
41785: NOT
41786: IFTRUE 41795
41788: PUSH
41789: LD_VAR 0 2
41793: NOT
41794: OR
41795: IFFALSE 41799
// exit ;
41797: GO 42027
// x := GetX ( building ) ;
41799: LD_ADDR_VAR 0 4
41803: PUSH
41804: LD_VAR 0 2
41808: PPUSH
41809: CALL_OW 250
41813: ST_TO_ADDR
// y := GetY ( building ) ;
41814: LD_ADDR_VAR 0 6
41818: PUSH
41819: LD_VAR 0 2
41823: PPUSH
41824: CALL_OW 251
41828: ST_TO_ADDR
// d := GetDir ( building ) ;
41829: LD_ADDR_VAR 0 8
41833: PUSH
41834: LD_VAR 0 2
41838: PPUSH
41839: CALL_OW 254
41843: ST_TO_ADDR
// r := 4 ;
41844: LD_ADDR_VAR 0 9
41848: PUSH
41849: LD_INT 4
41851: ST_TO_ADDR
// for i := 1 to 5 do
41852: LD_ADDR_VAR 0 10
41856: PUSH
41857: DOUBLE
41858: LD_INT 1
41860: DEC
41861: ST_TO_ADDR
41862: LD_INT 5
41864: PUSH
41865: FOR_TO
41866: IFFALSE 42025
// begin _x := ShiftX ( x , d , r + i ) ;
41868: LD_ADDR_VAR 0 5
41872: PUSH
41873: LD_VAR 0 4
41877: PPUSH
41878: LD_VAR 0 8
41882: PPUSH
41883: LD_VAR 0 9
41887: PUSH
41888: LD_VAR 0 10
41892: PLUS
41893: PPUSH
41894: CALL_OW 272
41898: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41899: LD_ADDR_VAR 0 7
41903: PUSH
41904: LD_VAR 0 6
41908: PPUSH
41909: LD_VAR 0 8
41913: PPUSH
41914: LD_VAR 0 9
41918: PUSH
41919: LD_VAR 0 10
41923: PLUS
41924: PPUSH
41925: CALL_OW 273
41929: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41930: LD_VAR 0 5
41934: PPUSH
41935: LD_VAR 0 7
41939: PPUSH
41940: CALL_OW 488
41944: IFFALSE 41979
41946: PUSH
41947: LD_VAR 0 5
41951: PPUSH
41952: LD_VAR 0 7
41956: PPUSH
41957: CALL_OW 428
41961: PPUSH
41962: CALL_OW 247
41966: PUSH
41967: LD_INT 3
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: IN
41977: NOT
41978: AND
41979: IFFALSE 42023
// begin ComMoveXY ( unit , _x , _y ) ;
41981: LD_VAR 0 1
41985: PPUSH
41986: LD_VAR 0 5
41990: PPUSH
41991: LD_VAR 0 7
41995: PPUSH
41996: CALL_OW 111
// result := [ _x , _y ] ;
42000: LD_ADDR_VAR 0 3
42004: PUSH
42005: LD_VAR 0 5
42009: PUSH
42010: LD_VAR 0 7
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: ST_TO_ADDR
// exit ;
42019: POP
42020: POP
42021: GO 42027
// end ; end ;
42023: GO 41865
42025: POP
42026: POP
// end ;
42027: LD_VAR 0 3
42031: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42032: LD_INT 0
42034: PPUSH
42035: PPUSH
42036: PPUSH
// result := 0 ;
42037: LD_ADDR_VAR 0 3
42041: PUSH
42042: LD_INT 0
42044: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42045: LD_VAR 0 1
42049: PUSH
42050: LD_INT 0
42052: LESS
42053: IFTRUE 42065
42055: PUSH
42056: LD_VAR 0 1
42060: PUSH
42061: LD_INT 8
42063: GREATER
42064: OR
42065: IFTRUE 42077
42067: PUSH
42068: LD_VAR 0 2
42072: PUSH
42073: LD_INT 0
42075: LESS
42076: OR
42077: IFTRUE 42089
42079: PUSH
42080: LD_VAR 0 2
42084: PUSH
42085: LD_INT 8
42087: GREATER
42088: OR
42089: IFFALSE 42093
// exit ;
42091: GO 42168
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42093: LD_ADDR_VAR 0 4
42097: PUSH
42098: LD_INT 22
42100: PUSH
42101: LD_VAR 0 2
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PPUSH
42110: CALL_OW 69
42114: PUSH
42115: FOR_IN
42116: IFFALSE 42166
// begin un := UnitShoot ( i ) ;
42118: LD_ADDR_VAR 0 5
42122: PUSH
42123: LD_VAR 0 4
42127: PPUSH
42128: CALL_OW 504
42132: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42133: LD_VAR 0 5
42137: PPUSH
42138: CALL_OW 255
42142: PUSH
42143: LD_VAR 0 1
42147: EQUAL
42148: IFFALSE 42164
// begin result := un ;
42150: LD_ADDR_VAR 0 3
42154: PUSH
42155: LD_VAR 0 5
42159: ST_TO_ADDR
// exit ;
42160: POP
42161: POP
42162: GO 42168
// end ; end ;
42164: GO 42115
42166: POP
42167: POP
// end ;
42168: LD_VAR 0 3
42172: RET
// export function GetCargoBay ( units ) ; begin
42173: LD_INT 0
42175: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42176: LD_ADDR_VAR 0 2
42180: PUSH
42181: LD_VAR 0 1
42185: PPUSH
42186: LD_INT 2
42188: PUSH
42189: LD_INT 34
42191: PUSH
42192: LD_INT 12
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 34
42201: PUSH
42202: LD_INT 51
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 34
42211: PUSH
42212: LD_INT 32
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 34
42221: PUSH
42222: LD_INT 89
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: PPUSH
42236: CALL_OW 72
42240: ST_TO_ADDR
// end ;
42241: LD_VAR 0 2
42245: RET
// export function Negate ( value ) ; begin
42246: LD_INT 0
42248: PPUSH
// result := not value ;
42249: LD_ADDR_VAR 0 2
42253: PUSH
42254: LD_VAR 0 1
42258: NOT
42259: ST_TO_ADDR
// end ;
42260: LD_VAR 0 2
42264: RET
// export function Inc ( value ) ; begin
42265: LD_INT 0
42267: PPUSH
// result := value + 1 ;
42268: LD_ADDR_VAR 0 2
42272: PUSH
42273: LD_VAR 0 1
42277: PUSH
42278: LD_INT 1
42280: PLUS
42281: ST_TO_ADDR
// end ;
42282: LD_VAR 0 2
42286: RET
// export function Dec ( value ) ; begin
42287: LD_INT 0
42289: PPUSH
// result := value - 1 ;
42290: LD_ADDR_VAR 0 2
42294: PUSH
42295: LD_VAR 0 1
42299: PUSH
42300: LD_INT 1
42302: MINUS
42303: ST_TO_ADDR
// end ;
42304: LD_VAR 0 2
42308: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42309: LD_INT 0
42311: PPUSH
42312: PPUSH
42313: PPUSH
42314: PPUSH
42315: PPUSH
42316: PPUSH
42317: PPUSH
42318: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42319: LD_VAR 0 1
42323: PPUSH
42324: LD_VAR 0 2
42328: PPUSH
42329: CALL_OW 488
42333: NOT
42334: IFTRUE 42353
42336: PUSH
42337: LD_VAR 0 3
42341: PPUSH
42342: LD_VAR 0 4
42346: PPUSH
42347: CALL_OW 488
42351: NOT
42352: OR
42353: IFFALSE 42366
// begin result := - 1 ;
42355: LD_ADDR_VAR 0 5
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: ST_TO_ADDR
// exit ;
42364: GO 42601
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42366: LD_ADDR_VAR 0 12
42370: PUSH
42371: LD_VAR 0 1
42375: PPUSH
42376: LD_VAR 0 2
42380: PPUSH
42381: LD_VAR 0 3
42385: PPUSH
42386: LD_VAR 0 4
42390: PPUSH
42391: CALL 41437 0 4
42395: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42396: LD_ADDR_VAR 0 11
42400: PUSH
42401: LD_VAR 0 1
42405: PPUSH
42406: LD_VAR 0 2
42410: PPUSH
42411: LD_VAR 0 12
42415: PUSH
42416: LD_INT 1
42418: ARRAY
42419: PPUSH
42420: LD_VAR 0 12
42424: PUSH
42425: LD_INT 2
42427: ARRAY
42428: PPUSH
42429: CALL_OW 298
42433: ST_TO_ADDR
// distance := 9999 ;
42434: LD_ADDR_VAR 0 10
42438: PUSH
42439: LD_INT 9999
42441: ST_TO_ADDR
// for i := 0 to 5 do
42442: LD_ADDR_VAR 0 6
42446: PUSH
42447: DOUBLE
42448: LD_INT 0
42450: DEC
42451: ST_TO_ADDR
42452: LD_INT 5
42454: PUSH
42455: FOR_TO
42456: IFFALSE 42599
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42458: LD_ADDR_VAR 0 7
42462: PUSH
42463: LD_VAR 0 1
42467: PPUSH
42468: LD_VAR 0 6
42472: PPUSH
42473: LD_VAR 0 11
42477: PPUSH
42478: CALL_OW 272
42482: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42483: LD_ADDR_VAR 0 8
42487: PUSH
42488: LD_VAR 0 2
42492: PPUSH
42493: LD_VAR 0 6
42497: PPUSH
42498: LD_VAR 0 11
42502: PPUSH
42503: CALL_OW 273
42507: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42508: LD_VAR 0 7
42512: PPUSH
42513: LD_VAR 0 8
42517: PPUSH
42518: CALL_OW 488
42522: NOT
42523: IFFALSE 42527
// continue ;
42525: GO 42455
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42527: LD_ADDR_VAR 0 9
42531: PUSH
42532: LD_VAR 0 12
42536: PUSH
42537: LD_INT 1
42539: ARRAY
42540: PPUSH
42541: LD_VAR 0 12
42545: PUSH
42546: LD_INT 2
42548: ARRAY
42549: PPUSH
42550: LD_VAR 0 7
42554: PPUSH
42555: LD_VAR 0 8
42559: PPUSH
42560: CALL_OW 298
42564: ST_TO_ADDR
// if tmp < distance then
42565: LD_VAR 0 9
42569: PUSH
42570: LD_VAR 0 10
42574: LESS
42575: IFFALSE 42597
// begin result := i ;
42577: LD_ADDR_VAR 0 5
42581: PUSH
42582: LD_VAR 0 6
42586: ST_TO_ADDR
// distance := tmp ;
42587: LD_ADDR_VAR 0 10
42591: PUSH
42592: LD_VAR 0 9
42596: ST_TO_ADDR
// end ; end ;
42597: GO 42455
42599: POP
42600: POP
// end ;
42601: LD_VAR 0 5
42605: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42606: LD_INT 0
42608: PPUSH
42609: PPUSH
// if not driver or not IsInUnit ( driver ) then
42610: LD_VAR 0 1
42614: NOT
42615: IFTRUE 42629
42617: PUSH
42618: LD_VAR 0 1
42622: PPUSH
42623: CALL_OW 310
42627: NOT
42628: OR
42629: IFFALSE 42633
// exit ;
42631: GO 42723
// vehicle := IsInUnit ( driver ) ;
42633: LD_ADDR_VAR 0 3
42637: PUSH
42638: LD_VAR 0 1
42642: PPUSH
42643: CALL_OW 310
42647: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42648: LD_VAR 0 1
42652: PPUSH
42653: LD_STRING \
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: PUSH
42683: LD_STRING E
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: LD_VAR 0 3
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PPUSH
42719: CALL_OW 446
// end ;
42723: LD_VAR 0 2
42727: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42728: LD_INT 0
42730: PPUSH
42731: PPUSH
// if not driver or not IsInUnit ( driver ) then
42732: LD_VAR 0 1
42736: NOT
42737: IFTRUE 42751
42739: PUSH
42740: LD_VAR 0 1
42744: PPUSH
42745: CALL_OW 310
42749: NOT
42750: OR
42751: IFFALSE 42755
// exit ;
42753: GO 42845
// vehicle := IsInUnit ( driver ) ;
42755: LD_ADDR_VAR 0 3
42759: PUSH
42760: LD_VAR 0 1
42764: PPUSH
42765: CALL_OW 310
42769: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42770: LD_VAR 0 1
42774: PPUSH
42775: LD_STRING \
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: PUSH
42805: LD_STRING E
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_VAR 0 3
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PPUSH
42841: CALL_OW 447
// end ;
42845: LD_VAR 0 2
42849: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42850: LD_INT 0
42852: PPUSH
42853: PPUSH
42854: PPUSH
// tmp := [ ] ;
42855: LD_ADDR_VAR 0 5
42859: PUSH
42860: EMPTY
42861: ST_TO_ADDR
// for i in units do
42862: LD_ADDR_VAR 0 4
42866: PUSH
42867: LD_VAR 0 1
42871: PUSH
42872: FOR_IN
42873: IFFALSE 42911
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42875: LD_ADDR_VAR 0 5
42879: PUSH
42880: LD_VAR 0 5
42884: PPUSH
42885: LD_VAR 0 5
42889: PUSH
42890: LD_INT 1
42892: PLUS
42893: PPUSH
42894: LD_VAR 0 4
42898: PPUSH
42899: CALL_OW 256
42903: PPUSH
42904: CALL_OW 2
42908: ST_TO_ADDR
42909: GO 42872
42911: POP
42912: POP
// if not tmp then
42913: LD_VAR 0 5
42917: NOT
42918: IFFALSE 42922
// exit ;
42920: GO 42970
// if asc then
42922: LD_VAR 0 2
42926: IFFALSE 42950
// result := SortListByListAsc ( units , tmp ) else
42928: LD_ADDR_VAR 0 3
42932: PUSH
42933: LD_VAR 0 1
42937: PPUSH
42938: LD_VAR 0 5
42942: PPUSH
42943: CALL_OW 76
42947: ST_TO_ADDR
42948: GO 42970
// result := SortListByListDesc ( units , tmp ) ;
42950: LD_ADDR_VAR 0 3
42954: PUSH
42955: LD_VAR 0 1
42959: PPUSH
42960: LD_VAR 0 5
42964: PPUSH
42965: CALL_OW 77
42969: ST_TO_ADDR
// end ;
42970: LD_VAR 0 3
42974: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42975: LD_INT 0
42977: PPUSH
42978: PPUSH
// task := GetTaskList ( mech ) ;
42979: LD_ADDR_VAR 0 4
42983: PUSH
42984: LD_VAR 0 1
42988: PPUSH
42989: CALL_OW 437
42993: ST_TO_ADDR
// if not task then
42994: LD_VAR 0 4
42998: NOT
42999: IFFALSE 43003
// exit ;
43001: GO 43047
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43003: LD_ADDR_VAR 0 3
43007: PUSH
43008: LD_VAR 0 4
43012: PUSH
43013: LD_INT 1
43015: ARRAY
43016: PUSH
43017: LD_INT 1
43019: ARRAY
43020: PUSH
43021: LD_STRING r
43023: EQUAL
43024: IFFALSE 43046
43026: PUSH
43027: LD_VAR 0 4
43031: PUSH
43032: LD_INT 1
43034: ARRAY
43035: PUSH
43036: LD_INT 4
43038: ARRAY
43039: PUSH
43040: LD_VAR 0 2
43044: EQUAL
43045: AND
43046: ST_TO_ADDR
// end ;
43047: LD_VAR 0 3
43051: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43052: LD_INT 0
43054: PPUSH
// SetDir ( unit , d ) ;
43055: LD_VAR 0 1
43059: PPUSH
43060: LD_VAR 0 4
43064: PPUSH
43065: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43069: LD_ADDR_VAR 0 6
43073: PUSH
43074: LD_VAR 0 1
43078: PPUSH
43079: LD_VAR 0 2
43083: PPUSH
43084: LD_VAR 0 3
43088: PPUSH
43089: LD_VAR 0 5
43093: PPUSH
43094: CALL_OW 48
43098: ST_TO_ADDR
// end ;
43099: LD_VAR 0 6
43103: RET
// export function ToNaturalNumber ( number ) ; begin
43104: LD_INT 0
43106: PPUSH
// result := number div 1 ;
43107: LD_ADDR_VAR 0 2
43111: PUSH
43112: LD_VAR 0 1
43116: PUSH
43117: LD_INT 1
43119: DIV
43120: ST_TO_ADDR
// if number < 0 then
43121: LD_VAR 0 1
43125: PUSH
43126: LD_INT 0
43128: LESS
43129: IFFALSE 43139
// result := 0 ;
43131: LD_ADDR_VAR 0 2
43135: PUSH
43136: LD_INT 0
43138: ST_TO_ADDR
// end ;
43139: LD_VAR 0 2
43143: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43144: LD_INT 0
43146: PPUSH
43147: PPUSH
43148: PPUSH
// if not buildings then
43149: LD_VAR 0 1
43153: NOT
43154: IFFALSE 43158
// exit ;
43156: GO 43273
// tmp := [ ] ;
43158: LD_ADDR_VAR 0 5
43162: PUSH
43163: EMPTY
43164: ST_TO_ADDR
// for b in buildings do
43165: LD_ADDR_VAR 0 4
43169: PUSH
43170: LD_VAR 0 1
43174: PUSH
43175: FOR_IN
43176: IFFALSE 43214
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43178: LD_ADDR_VAR 0 5
43182: PUSH
43183: LD_VAR 0 5
43187: PPUSH
43188: LD_VAR 0 5
43192: PUSH
43193: LD_INT 1
43195: PLUS
43196: PPUSH
43197: LD_VAR 0 4
43201: PPUSH
43202: CALL_OW 266
43206: PPUSH
43207: CALL_OW 1
43211: ST_TO_ADDR
43212: GO 43175
43214: POP
43215: POP
// if not tmp then
43216: LD_VAR 0 5
43220: NOT
43221: IFFALSE 43225
// exit ;
43223: GO 43273
// if asc then
43225: LD_VAR 0 2
43229: IFFALSE 43253
// result := SortListByListAsc ( buildings , tmp ) else
43231: LD_ADDR_VAR 0 3
43235: PUSH
43236: LD_VAR 0 1
43240: PPUSH
43241: LD_VAR 0 5
43245: PPUSH
43246: CALL_OW 76
43250: ST_TO_ADDR
43251: GO 43273
// result := SortListByListDesc ( buildings , tmp ) ;
43253: LD_ADDR_VAR 0 3
43257: PUSH
43258: LD_VAR 0 1
43262: PPUSH
43263: LD_VAR 0 5
43267: PPUSH
43268: CALL_OW 77
43272: ST_TO_ADDR
// end ;
43273: LD_VAR 0 3
43277: RET
// export function SortByClass ( units , class ) ; var un ; begin
43278: LD_INT 0
43280: PPUSH
43281: PPUSH
// if not units or not class then
43282: LD_VAR 0 1
43286: NOT
43287: IFTRUE 43296
43289: PUSH
43290: LD_VAR 0 2
43294: NOT
43295: OR
43296: IFFALSE 43300
// exit ;
43298: GO 43395
// result := [ ] ;
43300: LD_ADDR_VAR 0 3
43304: PUSH
43305: EMPTY
43306: ST_TO_ADDR
// for un in units do
43307: LD_ADDR_VAR 0 4
43311: PUSH
43312: LD_VAR 0 1
43316: PUSH
43317: FOR_IN
43318: IFFALSE 43393
// if GetClass ( un ) = class then
43320: LD_VAR 0 4
43324: PPUSH
43325: CALL_OW 257
43329: PUSH
43330: LD_VAR 0 2
43334: EQUAL
43335: IFFALSE 43362
// result := Insert ( result , 1 , un ) else
43337: LD_ADDR_VAR 0 3
43341: PUSH
43342: LD_VAR 0 3
43346: PPUSH
43347: LD_INT 1
43349: PPUSH
43350: LD_VAR 0 4
43354: PPUSH
43355: CALL_OW 2
43359: ST_TO_ADDR
43360: GO 43391
// result := Replace ( result , result + 1 , un ) ;
43362: LD_ADDR_VAR 0 3
43366: PUSH
43367: LD_VAR 0 3
43371: PPUSH
43372: LD_VAR 0 3
43376: PUSH
43377: LD_INT 1
43379: PLUS
43380: PPUSH
43381: LD_VAR 0 4
43385: PPUSH
43386: CALL_OW 1
43390: ST_TO_ADDR
43391: GO 43317
43393: POP
43394: POP
// end ;
43395: LD_VAR 0 3
43399: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43400: LD_INT 0
43402: PPUSH
43403: PPUSH
43404: PPUSH
43405: PPUSH
43406: PPUSH
43407: PPUSH
43408: PPUSH
// result := [ ] ;
43409: LD_ADDR_VAR 0 4
43413: PUSH
43414: EMPTY
43415: ST_TO_ADDR
// if x - r < 0 then
43416: LD_VAR 0 1
43420: PUSH
43421: LD_VAR 0 3
43425: MINUS
43426: PUSH
43427: LD_INT 0
43429: LESS
43430: IFFALSE 43442
// min_x := 0 else
43432: LD_ADDR_VAR 0 8
43436: PUSH
43437: LD_INT 0
43439: ST_TO_ADDR
43440: GO 43458
// min_x := x - r ;
43442: LD_ADDR_VAR 0 8
43446: PUSH
43447: LD_VAR 0 1
43451: PUSH
43452: LD_VAR 0 3
43456: MINUS
43457: ST_TO_ADDR
// if y - r < 0 then
43458: LD_VAR 0 2
43462: PUSH
43463: LD_VAR 0 3
43467: MINUS
43468: PUSH
43469: LD_INT 0
43471: LESS
43472: IFFALSE 43484
// min_y := 0 else
43474: LD_ADDR_VAR 0 7
43478: PUSH
43479: LD_INT 0
43481: ST_TO_ADDR
43482: GO 43500
// min_y := y - r ;
43484: LD_ADDR_VAR 0 7
43488: PUSH
43489: LD_VAR 0 2
43493: PUSH
43494: LD_VAR 0 3
43498: MINUS
43499: ST_TO_ADDR
// max_x := x + r ;
43500: LD_ADDR_VAR 0 9
43504: PUSH
43505: LD_VAR 0 1
43509: PUSH
43510: LD_VAR 0 3
43514: PLUS
43515: ST_TO_ADDR
// max_y := y + r ;
43516: LD_ADDR_VAR 0 10
43520: PUSH
43521: LD_VAR 0 2
43525: PUSH
43526: LD_VAR 0 3
43530: PLUS
43531: ST_TO_ADDR
// for _x = min_x to max_x do
43532: LD_ADDR_VAR 0 5
43536: PUSH
43537: DOUBLE
43538: LD_VAR 0 8
43542: DEC
43543: ST_TO_ADDR
43544: LD_VAR 0 9
43548: PUSH
43549: FOR_TO
43550: IFFALSE 43651
// for _y = min_y to max_y do
43552: LD_ADDR_VAR 0 6
43556: PUSH
43557: DOUBLE
43558: LD_VAR 0 7
43562: DEC
43563: ST_TO_ADDR
43564: LD_VAR 0 10
43568: PUSH
43569: FOR_TO
43570: IFFALSE 43647
// begin if not ValidHex ( _x , _y ) then
43572: LD_VAR 0 5
43576: PPUSH
43577: LD_VAR 0 6
43581: PPUSH
43582: CALL_OW 488
43586: NOT
43587: IFFALSE 43591
// continue ;
43589: GO 43569
// if GetResourceTypeXY ( _x , _y ) then
43591: LD_VAR 0 5
43595: PPUSH
43596: LD_VAR 0 6
43600: PPUSH
43601: CALL_OW 283
43605: IFFALSE 43645
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43607: LD_ADDR_VAR 0 4
43611: PUSH
43612: LD_VAR 0 4
43616: PPUSH
43617: LD_VAR 0 4
43621: PUSH
43622: LD_INT 1
43624: PLUS
43625: PPUSH
43626: LD_VAR 0 5
43630: PUSH
43631: LD_VAR 0 6
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PPUSH
43640: CALL_OW 1
43644: ST_TO_ADDR
// end ;
43645: GO 43569
43647: POP
43648: POP
43649: GO 43549
43651: POP
43652: POP
// end ;
43653: LD_VAR 0 4
43657: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43658: LD_INT 0
43660: PPUSH
43661: PPUSH
43662: PPUSH
43663: PPUSH
43664: PPUSH
43665: PPUSH
43666: PPUSH
43667: PPUSH
// if not units then
43668: LD_VAR 0 1
43672: NOT
43673: IFFALSE 43677
// exit ;
43675: GO 44209
// result := UnitFilter ( units , [ f_ok ] ) ;
43677: LD_ADDR_VAR 0 3
43681: PUSH
43682: LD_VAR 0 1
43686: PPUSH
43687: LD_INT 50
43689: PUSH
43690: EMPTY
43691: LIST
43692: PPUSH
43693: CALL_OW 72
43697: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43698: LD_ADDR_VAR 0 8
43702: PUSH
43703: LD_VAR 0 1
43707: PUSH
43708: LD_INT 1
43710: ARRAY
43711: PPUSH
43712: CALL_OW 255
43716: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43717: LD_ADDR_VAR 0 10
43721: PUSH
43722: LD_INT 29
43724: PUSH
43725: LD_INT 91
43727: PUSH
43728: LD_INT 49
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: LIST
43735: ST_TO_ADDR
// if not result then
43736: LD_VAR 0 3
43740: NOT
43741: IFFALSE 43745
// exit ;
43743: GO 44209
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43745: LD_ADDR_VAR 0 5
43749: PUSH
43750: LD_INT 81
43752: PUSH
43753: LD_VAR 0 8
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PPUSH
43762: CALL_OW 69
43766: ST_TO_ADDR
// for i in result do
43767: LD_ADDR_VAR 0 4
43771: PUSH
43772: LD_VAR 0 3
43776: PUSH
43777: FOR_IN
43778: IFFALSE 44207
// begin tag := GetTag ( i ) + 1 ;
43780: LD_ADDR_VAR 0 9
43784: PUSH
43785: LD_VAR 0 4
43789: PPUSH
43790: CALL_OW 110
43794: PUSH
43795: LD_INT 1
43797: PLUS
43798: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43799: LD_ADDR_VAR 0 7
43803: PUSH
43804: LD_VAR 0 4
43808: PPUSH
43809: CALL_OW 250
43813: PPUSH
43814: LD_VAR 0 4
43818: PPUSH
43819: CALL_OW 251
43823: PPUSH
43824: LD_INT 4
43826: PPUSH
43827: CALL 43400 0 3
43831: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43832: LD_VAR 0 4
43836: PPUSH
43837: CALL_OW 247
43841: PUSH
43842: LD_INT 2
43844: EQUAL
43845: IFFALSE 43857
43847: PUSH
43848: LD_VAR 0 7
43852: PUSH
43853: LD_INT 2
43855: GREATER
43856: AND
43857: IFFALSE 43877
43859: PUSH
43860: LD_VAR 0 4
43864: PPUSH
43865: CALL_OW 264
43869: PUSH
43870: LD_VAR 0 10
43874: IN
43875: NOT
43876: AND
43877: IFFALSE 43916
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43879: LD_VAR 0 4
43883: PPUSH
43884: LD_VAR 0 7
43888: PUSH
43889: LD_INT 1
43891: ARRAY
43892: PUSH
43893: LD_INT 1
43895: ARRAY
43896: PPUSH
43897: LD_VAR 0 7
43901: PUSH
43902: LD_INT 1
43904: ARRAY
43905: PUSH
43906: LD_INT 2
43908: ARRAY
43909: PPUSH
43910: CALL_OW 116
43914: GO 44205
// if path > tag then
43916: LD_VAR 0 2
43920: PUSH
43921: LD_VAR 0 9
43925: GREATER
43926: IFFALSE 44134
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43928: LD_ADDR_VAR 0 6
43932: PUSH
43933: LD_VAR 0 5
43937: PPUSH
43938: LD_INT 91
43940: PUSH
43941: LD_VAR 0 4
43945: PUSH
43946: LD_INT 8
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: LIST
43953: PPUSH
43954: CALL_OW 72
43958: ST_TO_ADDR
// if nearEnemy then
43959: LD_VAR 0 6
43963: IFFALSE 44032
// begin if GetWeapon ( i ) = ru_time_lapser then
43965: LD_VAR 0 4
43969: PPUSH
43970: CALL_OW 264
43974: PUSH
43975: LD_INT 49
43977: EQUAL
43978: IFFALSE 44006
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43980: LD_VAR 0 4
43984: PPUSH
43985: LD_VAR 0 6
43989: PPUSH
43990: LD_VAR 0 4
43994: PPUSH
43995: CALL_OW 74
43999: PPUSH
44000: CALL_OW 112
44004: GO 44030
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44006: LD_VAR 0 4
44010: PPUSH
44011: LD_VAR 0 6
44015: PPUSH
44016: LD_VAR 0 4
44020: PPUSH
44021: CALL_OW 74
44025: PPUSH
44026: CALL 45290 0 2
// end else
44030: GO 44132
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44032: LD_VAR 0 4
44036: PPUSH
44037: LD_VAR 0 2
44041: PUSH
44042: LD_VAR 0 9
44046: ARRAY
44047: PUSH
44048: LD_INT 1
44050: ARRAY
44051: PPUSH
44052: LD_VAR 0 2
44056: PUSH
44057: LD_VAR 0 9
44061: ARRAY
44062: PUSH
44063: LD_INT 2
44065: ARRAY
44066: PPUSH
44067: CALL_OW 297
44071: PUSH
44072: LD_INT 6
44074: GREATER
44075: IFFALSE 44118
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44077: LD_VAR 0 4
44081: PPUSH
44082: LD_VAR 0 2
44086: PUSH
44087: LD_VAR 0 9
44091: ARRAY
44092: PUSH
44093: LD_INT 1
44095: ARRAY
44096: PPUSH
44097: LD_VAR 0 2
44101: PUSH
44102: LD_VAR 0 9
44106: ARRAY
44107: PUSH
44108: LD_INT 2
44110: ARRAY
44111: PPUSH
44112: CALL_OW 114
44116: GO 44132
// SetTag ( i , tag ) ;
44118: LD_VAR 0 4
44122: PPUSH
44123: LD_VAR 0 9
44127: PPUSH
44128: CALL_OW 109
// end else
44132: GO 44205
// if enemy then
44134: LD_VAR 0 5
44138: IFFALSE 44205
// begin if GetWeapon ( i ) = ru_time_lapser then
44140: LD_VAR 0 4
44144: PPUSH
44145: CALL_OW 264
44149: PUSH
44150: LD_INT 49
44152: EQUAL
44153: IFFALSE 44181
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44155: LD_VAR 0 4
44159: PPUSH
44160: LD_VAR 0 5
44164: PPUSH
44165: LD_VAR 0 4
44169: PPUSH
44170: CALL_OW 74
44174: PPUSH
44175: CALL_OW 112
44179: GO 44205
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44181: LD_VAR 0 4
44185: PPUSH
44186: LD_VAR 0 5
44190: PPUSH
44191: LD_VAR 0 4
44195: PPUSH
44196: CALL_OW 74
44200: PPUSH
44201: CALL 45290 0 2
// end ; end ;
44205: GO 43777
44207: POP
44208: POP
// end ;
44209: LD_VAR 0 3
44213: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44214: LD_INT 0
44216: PPUSH
44217: PPUSH
44218: PPUSH
// if not unit or IsInUnit ( unit ) then
44219: LD_VAR 0 1
44223: NOT
44224: IFTRUE 44237
44226: PUSH
44227: LD_VAR 0 1
44231: PPUSH
44232: CALL_OW 310
44236: OR
44237: IFFALSE 44241
// exit ;
44239: GO 44332
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44241: LD_ADDR_VAR 0 4
44245: PUSH
44246: LD_VAR 0 1
44250: PPUSH
44251: CALL_OW 250
44255: PPUSH
44256: LD_VAR 0 2
44260: PPUSH
44261: LD_INT 1
44263: PPUSH
44264: CALL_OW 272
44268: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44269: LD_ADDR_VAR 0 5
44273: PUSH
44274: LD_VAR 0 1
44278: PPUSH
44279: CALL_OW 251
44283: PPUSH
44284: LD_VAR 0 2
44288: PPUSH
44289: LD_INT 1
44291: PPUSH
44292: CALL_OW 273
44296: ST_TO_ADDR
// if ValidHex ( x , y ) then
44297: LD_VAR 0 4
44301: PPUSH
44302: LD_VAR 0 5
44306: PPUSH
44307: CALL_OW 488
44311: IFFALSE 44332
// ComTurnXY ( unit , x , y ) ;
44313: LD_VAR 0 1
44317: PPUSH
44318: LD_VAR 0 4
44322: PPUSH
44323: LD_VAR 0 5
44327: PPUSH
44328: CALL_OW 118
// end ;
44332: LD_VAR 0 3
44336: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44337: LD_INT 0
44339: PPUSH
44340: PPUSH
// result := false ;
44341: LD_ADDR_VAR 0 3
44345: PUSH
44346: LD_INT 0
44348: ST_TO_ADDR
// if not units then
44349: LD_VAR 0 2
44353: NOT
44354: IFFALSE 44358
// exit ;
44356: GO 44403
// for i in units do
44358: LD_ADDR_VAR 0 4
44362: PUSH
44363: LD_VAR 0 2
44367: PUSH
44368: FOR_IN
44369: IFFALSE 44401
// if See ( side , i ) then
44371: LD_VAR 0 1
44375: PPUSH
44376: LD_VAR 0 4
44380: PPUSH
44381: CALL_OW 292
44385: IFFALSE 44399
// begin result := true ;
44387: LD_ADDR_VAR 0 3
44391: PUSH
44392: LD_INT 1
44394: ST_TO_ADDR
// exit ;
44395: POP
44396: POP
44397: GO 44403
// end ;
44399: GO 44368
44401: POP
44402: POP
// end ;
44403: LD_VAR 0 3
44407: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44408: LD_INT 0
44410: PPUSH
44411: PPUSH
44412: PPUSH
44413: PPUSH
// if not unit or not points then
44414: LD_VAR 0 1
44418: NOT
44419: IFTRUE 44428
44421: PUSH
44422: LD_VAR 0 2
44426: NOT
44427: OR
44428: IFFALSE 44432
// exit ;
44430: GO 44522
// dist := 99999 ;
44432: LD_ADDR_VAR 0 5
44436: PUSH
44437: LD_INT 99999
44439: ST_TO_ADDR
// for i in points do
44440: LD_ADDR_VAR 0 4
44444: PUSH
44445: LD_VAR 0 2
44449: PUSH
44450: FOR_IN
44451: IFFALSE 44520
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44453: LD_ADDR_VAR 0 6
44457: PUSH
44458: LD_VAR 0 1
44462: PPUSH
44463: LD_VAR 0 4
44467: PUSH
44468: LD_INT 1
44470: ARRAY
44471: PPUSH
44472: LD_VAR 0 4
44476: PUSH
44477: LD_INT 2
44479: ARRAY
44480: PPUSH
44481: CALL_OW 297
44485: ST_TO_ADDR
// if tmpDist < dist then
44486: LD_VAR 0 6
44490: PUSH
44491: LD_VAR 0 5
44495: LESS
44496: IFFALSE 44518
// begin result := i ;
44498: LD_ADDR_VAR 0 3
44502: PUSH
44503: LD_VAR 0 4
44507: ST_TO_ADDR
// dist := tmpDist ;
44508: LD_ADDR_VAR 0 5
44512: PUSH
44513: LD_VAR 0 6
44517: ST_TO_ADDR
// end ; end ;
44518: GO 44450
44520: POP
44521: POP
// end ;
44522: LD_VAR 0 3
44526: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44527: LD_INT 0
44529: PPUSH
// uc_side := side ;
44530: LD_ADDR_OWVAR 20
44534: PUSH
44535: LD_VAR 0 1
44539: ST_TO_ADDR
// uc_nation := 3 ;
44540: LD_ADDR_OWVAR 21
44544: PUSH
44545: LD_INT 3
44547: ST_TO_ADDR
// vc_chassis := 25 ;
44548: LD_ADDR_OWVAR 37
44552: PUSH
44553: LD_INT 25
44555: ST_TO_ADDR
// vc_engine := engine_siberite ;
44556: LD_ADDR_OWVAR 39
44560: PUSH
44561: LD_INT 3
44563: ST_TO_ADDR
// vc_control := control_computer ;
44564: LD_ADDR_OWVAR 38
44568: PUSH
44569: LD_INT 3
44571: ST_TO_ADDR
// vc_weapon := 59 ;
44572: LD_ADDR_OWVAR 40
44576: PUSH
44577: LD_INT 59
44579: ST_TO_ADDR
// result := CreateVehicle ;
44580: LD_ADDR_VAR 0 5
44584: PUSH
44585: CALL_OW 45
44589: ST_TO_ADDR
// SetDir ( result , d ) ;
44590: LD_VAR 0 5
44594: PPUSH
44595: LD_VAR 0 4
44599: PPUSH
44600: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44604: LD_VAR 0 5
44608: PPUSH
44609: LD_VAR 0 2
44613: PPUSH
44614: LD_VAR 0 3
44618: PPUSH
44619: LD_INT 0
44621: PPUSH
44622: CALL_OW 48
// end ;
44626: LD_VAR 0 5
44630: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44631: LD_INT 0
44633: PPUSH
44634: PPUSH
44635: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44636: LD_ADDR_VAR 0 2
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44659: LD_VAR 0 1
44663: NOT
44664: IFTRUE 44697
44666: PUSH
44667: LD_VAR 0 1
44671: PPUSH
44672: CALL_OW 264
44676: PUSH
44677: LD_INT 12
44679: PUSH
44680: LD_INT 51
44682: PUSH
44683: LD_INT 32
44685: PUSH
44686: LD_INT 89
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: IN
44695: NOT
44696: OR
44697: IFFALSE 44701
// exit ;
44699: GO 44799
// for i := 1 to 3 do
44701: LD_ADDR_VAR 0 3
44705: PUSH
44706: DOUBLE
44707: LD_INT 1
44709: DEC
44710: ST_TO_ADDR
44711: LD_INT 3
44713: PUSH
44714: FOR_TO
44715: IFFALSE 44797
// begin tmp := GetCargo ( cargo , i ) ;
44717: LD_ADDR_VAR 0 4
44721: PUSH
44722: LD_VAR 0 1
44726: PPUSH
44727: LD_VAR 0 3
44731: PPUSH
44732: CALL_OW 289
44736: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44737: LD_ADDR_VAR 0 2
44741: PUSH
44742: LD_VAR 0 2
44746: PPUSH
44747: LD_VAR 0 3
44751: PPUSH
44752: LD_VAR 0 4
44756: PPUSH
44757: CALL_OW 1
44761: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44762: LD_ADDR_VAR 0 2
44766: PUSH
44767: LD_VAR 0 2
44771: PPUSH
44772: LD_INT 4
44774: PPUSH
44775: LD_VAR 0 2
44779: PUSH
44780: LD_INT 4
44782: ARRAY
44783: PUSH
44784: LD_VAR 0 4
44788: PLUS
44789: PPUSH
44790: CALL_OW 1
44794: ST_TO_ADDR
// end ;
44795: GO 44714
44797: POP
44798: POP
// end ;
44799: LD_VAR 0 2
44803: RET
// export function Length ( array ) ; begin
44804: LD_INT 0
44806: PPUSH
// result := array + 0 ;
44807: LD_ADDR_VAR 0 2
44811: PUSH
44812: LD_VAR 0 1
44816: PUSH
44817: LD_INT 0
44819: PLUS
44820: ST_TO_ADDR
// end ;
44821: LD_VAR 0 2
44825: RET
// export function PrepareArray ( array ) ; begin
44826: LD_INT 0
44828: PPUSH
// result := array diff 0 ;
44829: LD_ADDR_VAR 0 2
44833: PUSH
44834: LD_VAR 0 1
44838: PUSH
44839: LD_INT 0
44841: DIFF
44842: ST_TO_ADDR
// if not result [ 1 ] then
44843: LD_VAR 0 2
44847: PUSH
44848: LD_INT 1
44850: ARRAY
44851: NOT
44852: IFFALSE 44872
// result := Delete ( result , 1 ) ;
44854: LD_ADDR_VAR 0 2
44858: PUSH
44859: LD_VAR 0 2
44863: PPUSH
44864: LD_INT 1
44866: PPUSH
44867: CALL_OW 3
44871: ST_TO_ADDR
// end ;
44872: LD_VAR 0 2
44876: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44877: LD_INT 0
44879: PPUSH
44880: PPUSH
44881: PPUSH
44882: PPUSH
// sibRocketRange := 25 ;
44883: LD_ADDR_VAR 0 6
44887: PUSH
44888: LD_INT 25
44890: ST_TO_ADDR
// result := false ;
44891: LD_ADDR_VAR 0 4
44895: PUSH
44896: LD_INT 0
44898: ST_TO_ADDR
// for i := 0 to 5 do
44899: LD_ADDR_VAR 0 5
44903: PUSH
44904: DOUBLE
44905: LD_INT 0
44907: DEC
44908: ST_TO_ADDR
44909: LD_INT 5
44911: PUSH
44912: FOR_TO
44913: IFFALSE 44980
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44915: LD_VAR 0 1
44919: PPUSH
44920: LD_VAR 0 5
44924: PPUSH
44925: LD_VAR 0 6
44929: PPUSH
44930: CALL_OW 272
44934: PPUSH
44935: LD_VAR 0 2
44939: PPUSH
44940: LD_VAR 0 5
44944: PPUSH
44945: LD_VAR 0 6
44949: PPUSH
44950: CALL_OW 273
44954: PPUSH
44955: LD_VAR 0 3
44959: PPUSH
44960: CALL_OW 309
44964: IFFALSE 44978
// begin result := true ;
44966: LD_ADDR_VAR 0 4
44970: PUSH
44971: LD_INT 1
44973: ST_TO_ADDR
// exit ;
44974: POP
44975: POP
44976: GO 44982
// end ;
44978: GO 44912
44980: POP
44981: POP
// end ;
44982: LD_VAR 0 4
44986: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44987: LD_INT 0
44989: PPUSH
44990: PPUSH
44991: PPUSH
// if btype = b_depot then
44992: LD_VAR 0 2
44996: PUSH
44997: LD_INT 0
44999: EQUAL
45000: IFFALSE 45012
// begin result := true ;
45002: LD_ADDR_VAR 0 3
45006: PUSH
45007: LD_INT 1
45009: ST_TO_ADDR
// exit ;
45010: GO 45132
// end ; pom := GetBase ( depot ) ;
45012: LD_ADDR_VAR 0 4
45016: PUSH
45017: LD_VAR 0 1
45021: PPUSH
45022: CALL_OW 274
45026: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45027: LD_ADDR_VAR 0 5
45031: PUSH
45032: LD_VAR 0 2
45036: PPUSH
45037: LD_VAR 0 1
45041: PPUSH
45042: CALL_OW 248
45046: PPUSH
45047: CALL_OW 450
45051: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45052: LD_ADDR_VAR 0 3
45056: PUSH
45057: LD_VAR 0 4
45061: PPUSH
45062: LD_INT 1
45064: PPUSH
45065: CALL_OW 275
45069: PUSH
45070: LD_VAR 0 5
45074: PUSH
45075: LD_INT 1
45077: ARRAY
45078: GREATEREQUAL
45079: IFFALSE 45105
45081: PUSH
45082: LD_VAR 0 4
45086: PPUSH
45087: LD_INT 2
45089: PPUSH
45090: CALL_OW 275
45094: PUSH
45095: LD_VAR 0 5
45099: PUSH
45100: LD_INT 2
45102: ARRAY
45103: GREATEREQUAL
45104: AND
45105: IFFALSE 45131
45107: PUSH
45108: LD_VAR 0 4
45112: PPUSH
45113: LD_INT 3
45115: PPUSH
45116: CALL_OW 275
45120: PUSH
45121: LD_VAR 0 5
45125: PUSH
45126: LD_INT 3
45128: ARRAY
45129: GREATEREQUAL
45130: AND
45131: ST_TO_ADDR
// end ;
45132: LD_VAR 0 3
45136: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45137: LD_INT 0
45139: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45140: LD_VAR 0 1
45144: PPUSH
45145: LD_VAR 0 2
45149: PPUSH
45150: LD_INT 0
45152: PPUSH
45153: LD_INT 0
45155: PPUSH
45156: LD_INT 1
45158: PPUSH
45159: LD_INT 0
45161: PPUSH
45162: CALL_OW 587
// end ;
45166: LD_VAR 0 3
45170: RET
// export function CenterOnNow ( unit ) ; begin
45171: LD_INT 0
45173: PPUSH
// result := IsInUnit ( unit ) ;
45174: LD_ADDR_VAR 0 2
45178: PUSH
45179: LD_VAR 0 1
45183: PPUSH
45184: CALL_OW 310
45188: ST_TO_ADDR
// if not result then
45189: LD_VAR 0 2
45193: NOT
45194: IFFALSE 45206
// result := unit ;
45196: LD_ADDR_VAR 0 2
45200: PUSH
45201: LD_VAR 0 1
45205: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45206: LD_VAR 0 1
45210: PPUSH
45211: CALL_OW 87
// end ;
45215: LD_VAR 0 2
45219: RET
// export function ComMoveHex ( unit , hex ) ; begin
45220: LD_INT 0
45222: PPUSH
// if not hex then
45223: LD_VAR 0 2
45227: NOT
45228: IFFALSE 45232
// exit ;
45230: GO 45285
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45232: LD_VAR 0 2
45236: PUSH
45237: LD_INT 1
45239: ARRAY
45240: PPUSH
45241: LD_VAR 0 2
45245: PUSH
45246: LD_INT 2
45248: ARRAY
45249: PPUSH
45250: CALL_OW 428
45254: IFFALSE 45258
// exit ;
45256: GO 45285
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45258: LD_VAR 0 1
45262: PPUSH
45263: LD_VAR 0 2
45267: PUSH
45268: LD_INT 1
45270: ARRAY
45271: PPUSH
45272: LD_VAR 0 2
45276: PUSH
45277: LD_INT 2
45279: ARRAY
45280: PPUSH
45281: CALL_OW 111
// end ;
45285: LD_VAR 0 3
45289: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45290: LD_INT 0
45292: PPUSH
45293: PPUSH
45294: PPUSH
// if not unit or not enemy then
45295: LD_VAR 0 1
45299: NOT
45300: IFTRUE 45309
45302: PUSH
45303: LD_VAR 0 2
45307: NOT
45308: OR
45309: IFFALSE 45313
// exit ;
45311: GO 45439
// x := GetX ( enemy ) ;
45313: LD_ADDR_VAR 0 4
45317: PUSH
45318: LD_VAR 0 2
45322: PPUSH
45323: CALL_OW 250
45327: ST_TO_ADDR
// y := GetY ( enemy ) ;
45328: LD_ADDR_VAR 0 5
45332: PUSH
45333: LD_VAR 0 2
45337: PPUSH
45338: CALL_OW 251
45342: ST_TO_ADDR
// if ValidHex ( x , y ) then
45343: LD_VAR 0 4
45347: PPUSH
45348: LD_VAR 0 5
45352: PPUSH
45353: CALL_OW 488
45357: IFFALSE 45439
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45359: LD_VAR 0 2
45363: PPUSH
45364: CALL_OW 247
45368: PUSH
45369: LD_INT 3
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: IN
45379: IFTRUE 45402
45381: PUSH
45382: LD_VAR 0 1
45386: PPUSH
45387: CALL_OW 255
45391: PPUSH
45392: LD_VAR 0 2
45396: PPUSH
45397: CALL_OW 292
45401: OR
45402: IFFALSE 45420
// ComAttackUnit ( unit , enemy ) else
45404: LD_VAR 0 1
45408: PPUSH
45409: LD_VAR 0 2
45413: PPUSH
45414: CALL_OW 115
45418: GO 45439
// ComAgressiveMove ( unit , x , y ) ;
45420: LD_VAR 0 1
45424: PPUSH
45425: LD_VAR 0 4
45429: PPUSH
45430: LD_VAR 0 5
45434: PPUSH
45435: CALL_OW 114
// end ;
45439: LD_VAR 0 3
45443: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45444: LD_INT 0
45446: PPUSH
45447: PPUSH
45448: PPUSH
// list := AreaToList ( area , 0 ) ;
45449: LD_ADDR_VAR 0 5
45453: PUSH
45454: LD_VAR 0 1
45458: PPUSH
45459: LD_INT 0
45461: PPUSH
45462: CALL_OW 517
45466: ST_TO_ADDR
// if not list then
45467: LD_VAR 0 5
45471: NOT
45472: IFFALSE 45476
// exit ;
45474: GO 45606
// if all then
45476: LD_VAR 0 2
45480: IFFALSE 45568
// begin for i := 1 to list [ 1 ] do
45482: LD_ADDR_VAR 0 4
45486: PUSH
45487: DOUBLE
45488: LD_INT 1
45490: DEC
45491: ST_TO_ADDR
45492: LD_VAR 0 5
45496: PUSH
45497: LD_INT 1
45499: ARRAY
45500: PUSH
45501: FOR_TO
45502: IFFALSE 45564
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45504: LD_ADDR_VAR 0 3
45508: PUSH
45509: LD_VAR 0 3
45513: PPUSH
45514: LD_VAR 0 3
45518: PUSH
45519: LD_INT 1
45521: PLUS
45522: PPUSH
45523: LD_VAR 0 5
45527: PUSH
45528: LD_INT 1
45530: ARRAY
45531: PUSH
45532: LD_VAR 0 4
45536: ARRAY
45537: PUSH
45538: LD_VAR 0 5
45542: PUSH
45543: LD_INT 2
45545: ARRAY
45546: PUSH
45547: LD_VAR 0 4
45551: ARRAY
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PPUSH
45557: CALL_OW 1
45561: ST_TO_ADDR
45562: GO 45501
45564: POP
45565: POP
// exit ;
45566: GO 45606
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45568: LD_ADDR_VAR 0 3
45572: PUSH
45573: LD_VAR 0 5
45577: PUSH
45578: LD_INT 1
45580: ARRAY
45581: PUSH
45582: LD_INT 1
45584: ARRAY
45585: PUSH
45586: LD_VAR 0 5
45590: PUSH
45591: LD_INT 2
45593: ARRAY
45594: PUSH
45595: LD_INT 1
45597: ARRAY
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: EMPTY
45604: LIST
45605: ST_TO_ADDR
// end ;
45606: LD_VAR 0 3
45610: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45611: LD_INT 0
45613: PPUSH
45614: PPUSH
// list := AreaToList ( area , 0 ) ;
45615: LD_ADDR_VAR 0 4
45619: PUSH
45620: LD_VAR 0 1
45624: PPUSH
45625: LD_INT 0
45627: PPUSH
45628: CALL_OW 517
45632: ST_TO_ADDR
// if not list then
45633: LD_VAR 0 4
45637: NOT
45638: IFFALSE 45642
// exit ;
45640: GO 45683
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45642: LD_ADDR_VAR 0 3
45646: PUSH
45647: LD_VAR 0 4
45651: PUSH
45652: LD_INT 1
45654: ARRAY
45655: PUSH
45656: LD_INT 1
45658: ARRAY
45659: PUSH
45660: LD_VAR 0 4
45664: PUSH
45665: LD_INT 2
45667: ARRAY
45668: PUSH
45669: LD_INT 1
45671: ARRAY
45672: PUSH
45673: LD_VAR 0 2
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: LIST
45682: ST_TO_ADDR
// end ;
45683: LD_VAR 0 3
45687: RET
// export function First ( array ) ; begin
45688: LD_INT 0
45690: PPUSH
// if not array then
45691: LD_VAR 0 1
45695: NOT
45696: IFFALSE 45700
// exit ;
45698: GO 45714
// result := array [ 1 ] ;
45700: LD_ADDR_VAR 0 2
45704: PUSH
45705: LD_VAR 0 1
45709: PUSH
45710: LD_INT 1
45712: ARRAY
45713: ST_TO_ADDR
// end ;
45714: LD_VAR 0 2
45718: RET
// export function Last ( array ) ; begin
45719: LD_INT 0
45721: PPUSH
// if not array then
45722: LD_VAR 0 1
45726: NOT
45727: IFFALSE 45731
// exit ;
45729: GO 45747
// result := array [ array ] ;
45731: LD_ADDR_VAR 0 2
45735: PUSH
45736: LD_VAR 0 1
45740: PUSH
45741: LD_VAR 0 1
45745: ARRAY
45746: ST_TO_ADDR
// end ;
45747: LD_VAR 0 2
45751: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45752: LD_INT 0
45754: PPUSH
45755: PPUSH
// result := [ ] ;
45756: LD_ADDR_VAR 0 5
45760: PUSH
45761: EMPTY
45762: ST_TO_ADDR
// if not array then
45763: LD_VAR 0 1
45767: NOT
45768: IFFALSE 45772
// exit ;
45770: GO 45884
// for i := 1 to array do
45772: LD_ADDR_VAR 0 6
45776: PUSH
45777: DOUBLE
45778: LD_INT 1
45780: DEC
45781: ST_TO_ADDR
45782: LD_VAR 0 1
45786: PUSH
45787: FOR_TO
45788: IFFALSE 45882
// if array [ i ] [ index ] = value then
45790: LD_VAR 0 1
45794: PUSH
45795: LD_VAR 0 6
45799: ARRAY
45800: PUSH
45801: LD_VAR 0 2
45805: ARRAY
45806: PUSH
45807: LD_VAR 0 3
45811: EQUAL
45812: IFFALSE 45880
// begin if indexColumn then
45814: LD_VAR 0 4
45818: IFFALSE 45854
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45820: LD_ADDR_VAR 0 5
45824: PUSH
45825: LD_VAR 0 5
45829: PPUSH
45830: LD_VAR 0 1
45834: PUSH
45835: LD_VAR 0 6
45839: ARRAY
45840: PUSH
45841: LD_VAR 0 4
45845: ARRAY
45846: PPUSH
45847: CALL 40892 0 2
45851: ST_TO_ADDR
45852: GO 45880
// result := Join ( result , array [ i ] ) ;
45854: LD_ADDR_VAR 0 5
45858: PUSH
45859: LD_VAR 0 5
45863: PPUSH
45864: LD_VAR 0 1
45868: PUSH
45869: LD_VAR 0 6
45873: ARRAY
45874: PPUSH
45875: CALL 40892 0 2
45879: ST_TO_ADDR
// end ;
45880: GO 45787
45882: POP
45883: POP
// end ;
45884: LD_VAR 0 5
45888: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45889: LD_INT 0
45891: PPUSH
// if not vehicles or not parkingPoint then
45892: LD_VAR 0 1
45896: NOT
45897: IFTRUE 45906
45899: PUSH
45900: LD_VAR 0 2
45904: NOT
45905: OR
45906: IFFALSE 45910
// exit ;
45908: GO 46008
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45910: LD_ADDR_VAR 0 1
45914: PUSH
45915: LD_VAR 0 1
45919: PPUSH
45920: LD_INT 50
45922: PUSH
45923: EMPTY
45924: LIST
45925: PUSH
45926: LD_INT 3
45928: PUSH
45929: LD_INT 92
45931: PUSH
45932: LD_VAR 0 2
45936: PUSH
45937: LD_INT 1
45939: ARRAY
45940: PUSH
45941: LD_VAR 0 2
45945: PUSH
45946: LD_INT 2
45948: ARRAY
45949: PUSH
45950: LD_INT 8
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PPUSH
45967: CALL_OW 72
45971: ST_TO_ADDR
// if not vehicles then
45972: LD_VAR 0 1
45976: NOT
45977: IFFALSE 45981
// exit ;
45979: GO 46008
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45981: LD_VAR 0 1
45985: PPUSH
45986: LD_VAR 0 2
45990: PUSH
45991: LD_INT 1
45993: ARRAY
45994: PPUSH
45995: LD_VAR 0 2
45999: PUSH
46000: LD_INT 2
46002: ARRAY
46003: PPUSH
46004: CALL_OW 111
// end ;
46008: LD_VAR 0 3
46012: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46013: LD_INT 0
46015: PPUSH
46016: PPUSH
46017: PPUSH
// if not side or not area then
46018: LD_VAR 0 1
46022: NOT
46023: IFTRUE 46032
46025: PUSH
46026: LD_VAR 0 2
46030: NOT
46031: OR
46032: IFFALSE 46036
// exit ;
46034: GO 46155
// tmp := AreaToList ( area , 0 ) ;
46036: LD_ADDR_VAR 0 5
46040: PUSH
46041: LD_VAR 0 2
46045: PPUSH
46046: LD_INT 0
46048: PPUSH
46049: CALL_OW 517
46053: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46054: LD_ADDR_VAR 0 4
46058: PUSH
46059: DOUBLE
46060: LD_INT 1
46062: DEC
46063: ST_TO_ADDR
46064: LD_VAR 0 5
46068: PUSH
46069: LD_INT 1
46071: ARRAY
46072: PUSH
46073: FOR_TO
46074: IFFALSE 46153
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46076: LD_VAR 0 5
46080: PUSH
46081: LD_INT 1
46083: ARRAY
46084: PUSH
46085: LD_VAR 0 4
46089: ARRAY
46090: PPUSH
46091: LD_VAR 0 5
46095: PUSH
46096: LD_INT 2
46098: ARRAY
46099: PUSH
46100: LD_VAR 0 4
46104: ARRAY
46105: PPUSH
46106: CALL_OW 351
46110: IFFALSE 46151
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46112: LD_VAR 0 5
46116: PUSH
46117: LD_INT 1
46119: ARRAY
46120: PUSH
46121: LD_VAR 0 4
46125: ARRAY
46126: PPUSH
46127: LD_VAR 0 5
46131: PUSH
46132: LD_INT 2
46134: ARRAY
46135: PUSH
46136: LD_VAR 0 4
46140: ARRAY
46141: PPUSH
46142: LD_VAR 0 1
46146: PPUSH
46147: CALL_OW 244
// end ;
46151: GO 46073
46153: POP
46154: POP
// end ;
46155: LD_VAR 0 3
46159: RET
// export function UniqueArray ( array ) ; var i ; begin
46160: LD_INT 0
46162: PPUSH
46163: PPUSH
// result := [ ] ;
46164: LD_ADDR_VAR 0 2
46168: PUSH
46169: EMPTY
46170: ST_TO_ADDR
// if not array then
46171: LD_VAR 0 1
46175: NOT
46176: IFFALSE 46180
// exit ;
46178: GO 46241
// for i := 1 to array do
46180: LD_ADDR_VAR 0 3
46184: PUSH
46185: DOUBLE
46186: LD_INT 1
46188: DEC
46189: ST_TO_ADDR
46190: LD_VAR 0 1
46194: PUSH
46195: FOR_TO
46196: IFFALSE 46239
// if not array [ i ] in result then
46198: LD_VAR 0 1
46202: PUSH
46203: LD_VAR 0 3
46207: ARRAY
46208: PUSH
46209: LD_VAR 0 2
46213: IN
46214: NOT
46215: IFFALSE 46237
// result := Join ( result , i ) ;
46217: LD_ADDR_VAR 0 2
46221: PUSH
46222: LD_VAR 0 2
46226: PPUSH
46227: LD_VAR 0 3
46231: PPUSH
46232: CALL 40892 0 2
46236: ST_TO_ADDR
46237: GO 46195
46239: POP
46240: POP
// end ; end_of_file end_of_file
46241: LD_VAR 0 2
46245: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46246: LD_INT 0
46248: PPUSH
46249: PPUSH
// disable ( mpActive ) ;
46250: LD_INT 100
46252: DISABLE_MARKED
// disable ( mpWin ) ;
46253: LD_INT 101
46255: DISABLE_MARKED
// disable ( mpLose ) ;
46256: LD_INT 102
46258: DISABLE_MARKED
// mpGameType := 0 ;
46259: LD_ADDR_EXP 1
46263: PUSH
46264: LD_INT 0
46266: ST_TO_ADDR
// mpGameSettings := [ ] ;
46267: LD_ADDR_EXP 4
46271: PUSH
46272: EMPTY
46273: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46274: LD_ADDR_EXP 2
46278: PUSH
46279: EMPTY
46280: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46281: LD_ADDR_EXP 3
46285: PUSH
46286: EMPTY
46287: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46288: LD_ADDR_EXP 27
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46303: LD_ADDR_EXP 10
46307: PUSH
46308: EMPTY
46309: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46310: LD_ADDR_EXP 11
46314: PUSH
46315: EMPTY
46316: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46317: LD_ADDR_EXP 39
46321: PUSH
46322: EMPTY
46323: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46324: LD_ADDR_EXP 40
46328: PUSH
46329: EMPTY
46330: ST_TO_ADDR
// mpDepots := [ ] ;
46331: LD_ADDR_EXP 12
46335: PUSH
46336: EMPTY
46337: ST_TO_ADDR
// mpBuildings := [ ] ;
46338: LD_ADDR_EXP 15
46342: PUSH
46343: EMPTY
46344: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46345: LD_ADDR_EXP 16
46349: PUSH
46350: EMPTY
46351: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46352: LD_ADDR_EXP 17
46356: PUSH
46357: EMPTY
46358: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46359: LD_ADDR_EXP 18
46363: PUSH
46364: EMPTY
46365: ST_TO_ADDR
// mpStartingResources := [ ] ;
46366: LD_ADDR_EXP 13
46370: PUSH
46371: EMPTY
46372: ST_TO_ADDR
// mpStartPos := [ ] ;
46373: LD_ADDR_EXP 19
46377: PUSH
46378: EMPTY
46379: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46380: LD_ADDR_EXP 20
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46389: LD_ADDR_EXP 21
46393: PUSH
46394: EMPTY
46395: ST_TO_ADDR
// mpApemans := [ ] ;
46396: LD_ADDR_EXP 28
46400: PUSH
46401: EMPTY
46402: ST_TO_ADDR
// mpApemansArea := [ ] ;
46403: LD_ADDR_EXP 29
46407: PUSH
46408: EMPTY
46409: ST_TO_ADDR
// mpRespawn := [ ] ;
46410: LD_ADDR_EXP 31
46414: PUSH
46415: EMPTY
46416: ST_TO_ADDR
// mpKingArea := 0 ;
46417: LD_ADDR_EXP 32
46421: PUSH
46422: LD_INT 0
46424: ST_TO_ADDR
// mpPoints := [ ] ;
46425: LD_ADDR_EXP 33
46429: PUSH
46430: EMPTY
46431: ST_TO_ADDR
// mpVehicles := 0 ;
46432: LD_ADDR_EXP 34
46436: PUSH
46437: LD_INT 0
46439: ST_TO_ADDR
// mpShipments := 0 ;
46440: LD_ADDR_EXP 25
46444: PUSH
46445: LD_INT 0
46447: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46448: LD_ADDR_EXP 38
46452: PUSH
46453: EMPTY
46454: PUSH
46455: EMPTY
46456: PUSH
46457: EMPTY
46458: PUSH
46459: EMPTY
46460: PUSH
46461: EMPTY
46462: PUSH
46463: EMPTY
46464: PUSH
46465: EMPTY
46466: PUSH
46467: EMPTY
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46479: LD_ADDR_EXP 30
46483: PUSH
46484: EMPTY
46485: PUSH
46486: EMPTY
46487: PUSH
46488: EMPTY
46489: PUSH
46490: EMPTY
46491: PUSH
46492: EMPTY
46493: PUSH
46494: EMPTY
46495: PUSH
46496: EMPTY
46497: PUSH
46498: EMPTY
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: ST_TO_ADDR
// mpEmissions := 0 ;
46510: LD_ADDR_EXP 35
46514: PUSH
46515: LD_INT 0
46517: ST_TO_ADDR
// mpTeleports := 0 ;
46518: LD_ADDR_EXP 41
46522: PUSH
46523: LD_INT 0
46525: ST_TO_ADDR
// mpArtifacts := 0 ;
46526: LD_ADDR_EXP 42
46530: PUSH
46531: LD_INT 0
46533: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46534: LD_ADDR_EXP 23
46538: PUSH
46539: LD_INT 3
46541: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46542: LD_ADDR_EXP 22
46546: PUSH
46547: LD_INT 15
46549: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46550: LD_ADDR_EXP 36
46554: PUSH
46555: LD_INT 0
46557: ST_TO_ADDR
// mpGameActive := false ;
46558: LD_ADDR_EXP 37
46562: PUSH
46563: LD_INT 0
46565: ST_TO_ADDR
// mpBlockRespThread := false ;
46566: LD_ADDR_EXP 43
46570: PUSH
46571: LD_INT 0
46573: ST_TO_ADDR
// for i := 1 to 32 do
46574: LD_ADDR_VAR 0 2
46578: PUSH
46579: DOUBLE
46580: LD_INT 1
46582: DEC
46583: ST_TO_ADDR
46584: LD_INT 32
46586: PUSH
46587: FOR_TO
46588: IFFALSE 46615
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46590: LD_ADDR_EXP 4
46594: PUSH
46595: LD_EXP 4
46599: PPUSH
46600: LD_VAR 0 2
46604: PPUSH
46605: LD_INT 0
46607: PPUSH
46608: CALL_OW 1
46612: ST_TO_ADDR
46613: GO 46587
46615: POP
46616: POP
// end ;
46617: LD_VAR 0 1
46621: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46622: LD_INT 0
46624: PPUSH
46625: PPUSH
46626: PPUSH
46627: PPUSH
46628: PPUSH
46629: PPUSH
46630: PPUSH
46631: PPUSH
46632: PPUSH
46633: PPUSH
46634: PPUSH
46635: PPUSH
46636: PPUSH
46637: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
46638: LD_ADDR_VAR 0 14
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 2
46648: PUSH
46649: LD_INT 3
46651: PUSH
46652: LD_INT 5
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
// for i in gameTypes do
46661: LD_ADDR_VAR 0 2
46665: PUSH
46666: LD_VAR 0 14
46670: PUSH
46671: FOR_IN
46672: IFFALSE 46681
// disable ( i ) ;
46674: LD_VAR 0 2
46678: DISABLE_MARKED
46679: GO 46671
46681: POP
46682: POP
// if Multiplayer then
46683: LD_OWVAR 4
46687: IFFALSE 46871
// begin mpGameType := mp_game_type ;
46689: LD_ADDR_EXP 1
46693: PUSH
46694: LD_OWVAR 6
46698: ST_TO_ADDR
// your_side := mp_player_side ;
46699: LD_ADDR_OWVAR 2
46703: PUSH
46704: LD_OWVAR 7
46708: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46709: LD_ADDR_EXP 5
46713: PUSH
46714: LD_OWVAR 17
46718: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46719: LD_ADDR_EXP 6
46723: PUSH
46724: LD_OWVAR 15
46728: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46729: LD_ADDR_EXP 7
46733: PUSH
46734: LD_OWVAR 16
46738: ST_TO_ADDR
// mpTeams := mp_teams ;
46739: LD_ADDR_EXP 8
46743: PUSH
46744: LD_OWVAR 12
46748: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46749: LD_ADDR_VAR 0 2
46753: PUSH
46754: DOUBLE
46755: LD_INT 1
46757: DEC
46758: ST_TO_ADDR
46759: LD_EXP 2
46763: PPUSH
46764: CALL 4960 0 1
46768: PUSH
46769: FOR_TO
46770: IFFALSE 46846
// begin setting := mpGameSettingsKeys [ i ] ;
46772: LD_ADDR_VAR 0 12
46776: PUSH
46777: LD_EXP 2
46781: PUSH
46782: LD_VAR 0 2
46786: ARRAY
46787: ST_TO_ADDR
// if setting then
46788: LD_VAR 0 12
46792: IFFALSE 46844
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46794: LD_ADDR_EXP 4
46798: PUSH
46799: LD_EXP 4
46803: PPUSH
46804: LD_VAR 0 2
46808: PPUSH
46809: LD_EXP 3
46813: PUSH
46814: LD_VAR 0 2
46818: ARRAY
46819: PUSH
46820: LD_VAR 0 2
46824: PUSH
46825: LD_INT 1
46827: MINUS
46828: PPUSH
46829: CALL_OW 426
46833: PUSH
46834: LD_INT 1
46836: PLUS
46837: ARRAY
46838: PPUSH
46839: CALL_OW 1
46843: ST_TO_ADDR
// end ;
46844: GO 46769
46846: POP
46847: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46848: LD_ADDR_EXP 9
46852: PUSH
46853: LD_EXP 6
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: EMPTY
46862: LIST
46863: DIFF
46864: PUSH
46865: LD_INT 1
46867: GREATER
46868: ST_TO_ADDR
// end else
46869: GO 46871
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46871: LD_EXP 1
46875: PPUSH
46876: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
46880: LD_EXP 16
46884: PPUSH
46885: CALL 4960 0 1
46889: IFFALSE 46920
// begin for i in mpMarkedAreas do
46891: LD_ADDR_VAR 0 2
46895: PUSH
46896: LD_EXP 16
46900: PUSH
46901: FOR_IN
46902: IFFALSE 46918
// SetAreaMapShow ( i , 0 ) ;
46904: LD_VAR 0 2
46908: PPUSH
46909: LD_INT 0
46911: PPUSH
46912: CALL_OW 424
46916: GO 46901
46918: POP
46919: POP
// end ; for i := 1 to 8 do
46920: LD_ADDR_VAR 0 2
46924: PUSH
46925: DOUBLE
46926: LD_INT 1
46928: DEC
46929: ST_TO_ADDR
46930: LD_INT 8
46932: PUSH
46933: FOR_TO
46934: IFFALSE 48270
// begin if not mpSidePositions [ i ] then
46936: LD_EXP 5
46940: PUSH
46941: LD_VAR 0 2
46945: ARRAY
46946: NOT
46947: IFFALSE 46951
// continue ;
46949: GO 46933
// side := i ;
46951: LD_ADDR_VAR 0 7
46955: PUSH
46956: LD_VAR 0 2
46960: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46961: LD_ADDR_VAR 0 9
46965: PUSH
46966: LD_EXP 7
46970: PUSH
46971: LD_VAR 0 2
46975: ARRAY
46976: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46977: LD_ADDR_VAR 0 8
46981: PUSH
46982: LD_EXP 5
46986: PUSH
46987: LD_VAR 0 2
46991: ARRAY
46992: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46993: LD_EXP 10
46997: PPUSH
46998: CALL 4960 0 1
47002: IFFALSE 47079
// begin for j in mpOilDeposits [ pos ] do
47004: LD_ADDR_VAR 0 3
47008: PUSH
47009: LD_EXP 10
47013: PUSH
47014: LD_VAR 0 8
47018: ARRAY
47019: PUSH
47020: FOR_IN
47021: IFFALSE 47077
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47023: LD_VAR 0 3
47027: PUSH
47028: LD_INT 1
47030: ARRAY
47031: PPUSH
47032: LD_VAR 0 3
47036: PUSH
47037: LD_INT 2
47039: ARRAY
47040: PPUSH
47041: LD_INT 2
47043: PPUSH
47044: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47048: LD_VAR 0 3
47052: PUSH
47053: LD_INT 1
47055: ARRAY
47056: PPUSH
47057: LD_VAR 0 3
47061: PUSH
47062: LD_INT 2
47064: ARRAY
47065: PPUSH
47066: LD_VAR 0 7
47070: PPUSH
47071: CALL_OW 441
// end ;
47075: GO 47020
47077: POP
47078: POP
// end ; if Count ( mpSibDeposits ) then
47079: LD_EXP 11
47083: PPUSH
47084: CALL 4960 0 1
47088: IFFALSE 47165
// begin for j in mpSibDeposits [ pos ] do
47090: LD_ADDR_VAR 0 3
47094: PUSH
47095: LD_EXP 11
47099: PUSH
47100: LD_VAR 0 8
47104: ARRAY
47105: PUSH
47106: FOR_IN
47107: IFFALSE 47163
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47109: LD_VAR 0 3
47113: PUSH
47114: LD_INT 1
47116: ARRAY
47117: PPUSH
47118: LD_VAR 0 3
47122: PUSH
47123: LD_INT 2
47125: ARRAY
47126: PPUSH
47127: LD_INT 3
47129: PPUSH
47130: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47134: LD_VAR 0 3
47138: PUSH
47139: LD_INT 1
47141: ARRAY
47142: PPUSH
47143: LD_VAR 0 3
47147: PUSH
47148: LD_INT 2
47150: ARRAY
47151: PPUSH
47152: LD_VAR 0 7
47156: PPUSH
47157: CALL_OW 441
// end ;
47161: GO 47106
47163: POP
47164: POP
// end ; InitBc ;
47165: CALL_OW 21
// InitUc ;
47169: CALL_OW 18
// uc_side := side ;
47173: LD_ADDR_OWVAR 20
47177: PUSH
47178: LD_VAR 0 7
47182: ST_TO_ADDR
// uc_nation := nation ;
47183: LD_ADDR_OWVAR 21
47187: PUSH
47188: LD_VAR 0 9
47192: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47193: LD_EXP 20
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: GREATER
47202: IFFALSE 47361
// begin x := mpStartPos [ pos ] [ 1 ] ;
47204: LD_ADDR_VAR 0 5
47208: PUSH
47209: LD_EXP 19
47213: PUSH
47214: LD_VAR 0 8
47218: ARRAY
47219: PUSH
47220: LD_INT 1
47222: ARRAY
47223: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47224: LD_ADDR_VAR 0 6
47228: PUSH
47229: LD_EXP 19
47233: PUSH
47234: LD_VAR 0 8
47238: ARRAY
47239: PUSH
47240: LD_INT 2
47242: ARRAY
47243: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47244: LD_VAR 0 5
47248: PPUSH
47249: LD_VAR 0 6
47253: PPUSH
47254: LD_INT 12
47256: PPUSH
47257: LD_INT 2
47259: PPUSH
47260: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47264: LD_ADDR_EXP 21
47268: PUSH
47269: LD_EXP 21
47273: PPUSH
47274: LD_VAR 0 7
47278: PPUSH
47279: LD_VAR 0 7
47283: PPUSH
47284: LD_VAR 0 5
47288: PPUSH
47289: LD_VAR 0 6
47293: PPUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 100
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: PUSH
47307: LD_INT 70
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: LD_INT 40
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 10
47326: PUSH
47327: LD_INT 25
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 20
47336: PUSH
47337: LD_INT 100
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: PPUSH
47351: CALL_OW 418
47355: PPUSH
47356: CALL_OW 1
47360: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47361: LD_EXP 12
47365: PPUSH
47366: CALL 4960 0 1
47370: IFFALSE 47554
// begin if mpGameType = GameTypeSurvival then
47372: LD_EXP 1
47376: PUSH
47377: LD_INT 2
47379: EQUAL
47380: IFFALSE 47400
// begin bc_level := 10 ;
47382: LD_ADDR_OWVAR 43
47386: PUSH
47387: LD_INT 10
47389: ST_TO_ADDR
// bc_type := b_warehouse ;
47390: LD_ADDR_OWVAR 42
47394: PUSH
47395: LD_INT 1
47397: ST_TO_ADDR
// end else
47398: GO 47416
// begin bc_level := 0 ;
47400: LD_ADDR_OWVAR 43
47404: PUSH
47405: LD_INT 0
47407: ST_TO_ADDR
// bc_type := b_depot ;
47408: LD_ADDR_OWVAR 42
47412: PUSH
47413: LD_INT 0
47415: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47416: LD_ADDR_VAR 0 4
47420: PUSH
47421: LD_EXP 12
47425: PUSH
47426: LD_VAR 0 8
47430: ARRAY
47431: PUSH
47432: LD_INT 1
47434: ARRAY
47435: PPUSH
47436: LD_EXP 12
47440: PUSH
47441: LD_VAR 0 8
47445: ARRAY
47446: PUSH
47447: LD_INT 2
47449: ARRAY
47450: PPUSH
47451: LD_EXP 12
47455: PUSH
47456: LD_VAR 0 8
47460: ARRAY
47461: PUSH
47462: LD_INT 3
47464: ARRAY
47465: PPUSH
47466: CALL_OW 47
47470: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47471: LD_VAR 0 4
47475: PPUSH
47476: LD_STRING @
47478: PUSH
47479: LD_VAR 0 7
47483: STR
47484: PPUSH
47485: CALL_OW 500
// if Count ( mpStartingResources ) then
47489: LD_EXP 13
47493: PPUSH
47494: CALL 4960 0 1
47498: IFFALSE 47552
// begin for j := 1 to mpStartingResources do
47500: LD_ADDR_VAR 0 3
47504: PUSH
47505: DOUBLE
47506: LD_INT 1
47508: DEC
47509: ST_TO_ADDR
47510: LD_EXP 13
47514: PUSH
47515: FOR_TO
47516: IFFALSE 47550
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47518: LD_VAR 0 4
47522: PPUSH
47523: CALL_OW 274
47527: PPUSH
47528: LD_VAR 0 3
47532: PPUSH
47533: LD_EXP 13
47537: PUSH
47538: LD_VAR 0 3
47542: ARRAY
47543: PPUSH
47544: CALL_OW 277
47548: GO 47515
47550: POP
47551: POP
// end ; end else
47552: GO 47761
// if Count ( mpStartingResources ) then
47554: LD_EXP 13
47558: PPUSH
47559: CALL 4960 0 1
47563: IFFALSE 47761
// begin x := mpStartPos [ pos ] [ 1 ] ;
47565: LD_ADDR_VAR 0 5
47569: PUSH
47570: LD_EXP 19
47574: PUSH
47575: LD_VAR 0 8
47579: ARRAY
47580: PUSH
47581: LD_INT 1
47583: ARRAY
47584: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47585: LD_ADDR_VAR 0 6
47589: PUSH
47590: LD_EXP 19
47594: PUSH
47595: LD_VAR 0 8
47599: ARRAY
47600: PUSH
47601: LD_INT 2
47603: ARRAY
47604: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47605: LD_ADDR_VAR 0 3
47609: PUSH
47610: DOUBLE
47611: LD_INT 1
47613: DEC
47614: ST_TO_ADDR
47615: LD_EXP 13
47619: PUSH
47620: FOR_TO
47621: IFFALSE 47759
// begin resources := mpStartingResources [ j ] ;
47623: LD_ADDR_VAR 0 13
47627: PUSH
47628: LD_EXP 13
47632: PUSH
47633: LD_VAR 0 3
47637: ARRAY
47638: ST_TO_ADDR
// if resources = 0 then
47639: LD_VAR 0 13
47643: PUSH
47644: LD_INT 0
47646: EQUAL
47647: IFFALSE 47651
// continue ;
47649: GO 47620
// repeat if resources >= 50 then
47651: LD_VAR 0 13
47655: PUSH
47656: LD_INT 50
47658: GREATEREQUAL
47659: IFFALSE 47705
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
47661: LD_VAR 0 3
47665: PPUSH
47666: LD_INT 5
47668: PPUSH
47669: LD_VAR 0 5
47673: PPUSH
47674: LD_VAR 0 6
47678: PPUSH
47679: LD_INT 6
47681: PPUSH
47682: LD_INT 0
47684: PPUSH
47685: CALL_OW 60
// resources := resources - 50 ;
47689: LD_ADDR_VAR 0 13
47693: PUSH
47694: LD_VAR 0 13
47698: PUSH
47699: LD_INT 50
47701: MINUS
47702: ST_TO_ADDR
// end else
47703: GO 47747
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
47705: LD_VAR 0 3
47709: PPUSH
47710: LD_VAR 0 13
47714: PUSH
47715: LD_INT 10
47717: DIV
47718: PPUSH
47719: LD_VAR 0 5
47723: PPUSH
47724: LD_VAR 0 6
47728: PPUSH
47729: LD_INT 6
47731: PPUSH
47732: LD_INT 0
47734: PPUSH
47735: CALL_OW 60
// resources := 0 ;
47739: LD_ADDR_VAR 0 13
47743: PUSH
47744: LD_INT 0
47746: ST_TO_ADDR
// end ; until resources <= 0 ;
47747: LD_VAR 0 13
47751: PUSH
47752: LD_INT 0
47754: LESSEQUAL
47755: IFFALSE 47651
// end ;
47757: GO 47620
47759: POP
47760: POP
// end ; if Count ( mpBuildings ) then
47761: LD_EXP 15
47765: PPUSH
47766: CALL 4960 0 1
47770: IFFALSE 47848
// begin for j in mpBuildings [ pos ] do
47772: LD_ADDR_VAR 0 3
47776: PUSH
47777: LD_EXP 15
47781: PUSH
47782: LD_VAR 0 8
47786: ARRAY
47787: PUSH
47788: FOR_IN
47789: IFFALSE 47846
// begin bc_level := 0 ;
47791: LD_ADDR_OWVAR 43
47795: PUSH
47796: LD_INT 0
47798: ST_TO_ADDR
// bc_type := j [ 1 ] ;
47799: LD_ADDR_OWVAR 42
47803: PUSH
47804: LD_VAR 0 3
47808: PUSH
47809: LD_INT 1
47811: ARRAY
47812: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
47813: LD_VAR 0 3
47817: PUSH
47818: LD_INT 2
47820: ARRAY
47821: PPUSH
47822: LD_VAR 0 3
47826: PUSH
47827: LD_INT 3
47829: ARRAY
47830: PPUSH
47831: LD_VAR 0 3
47835: PUSH
47836: LD_INT 4
47838: ARRAY
47839: PPUSH
47840: CALL_OW 47
// end ;
47844: GO 47788
47846: POP
47847: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47848: LD_EXP 24
47852: IFFALSE 47872
47854: PUSH
47855: LD_INT 20
47857: PPUSH
47858: LD_VAR 0 7
47862: PPUSH
47863: CALL_OW 321
47867: PUSH
47868: LD_INT 1
47870: EQUAL
47871: AND
47872: IFFALSE 47889
// SetTech ( tech_SibDet , side , state_researched ) ;
47874: LD_INT 20
47876: PPUSH
47877: LD_VAR 0 7
47881: PPUSH
47882: LD_INT 2
47884: PPUSH
47885: CALL_OW 322
// if not mpArtifacts then
47889: LD_EXP 42
47893: NOT
47894: IFFALSE 47911
// SetTech ( tech_artifact , side , state_disabled ) ;
47896: LD_INT 24
47898: PPUSH
47899: LD_VAR 0 7
47903: PPUSH
47904: LD_INT 0
47906: PPUSH
47907: CALL_OW 322
// if mpSibBomb = 1 then
47911: LD_EXP 26
47915: PUSH
47916: LD_INT 1
47918: EQUAL
47919: IFFALSE 47938
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47921: LD_INT 25
47923: PPUSH
47924: LD_VAR 0 7
47928: PPUSH
47929: LD_INT 1
47931: PPUSH
47932: CALL_OW 322
// end else
47936: GO 47953
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47938: LD_INT 25
47940: PPUSH
47941: LD_VAR 0 7
47945: PPUSH
47946: LD_INT 0
47948: PPUSH
47949: CALL_OW 322
// end ; if mpVehicles then
47953: LD_EXP 34
47957: IFFALSE 48056
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47959: LD_ADDR_VAR 0 3
47963: PUSH
47964: LD_VAR 0 7
47968: PPUSH
47969: LD_VAR 0 9
47973: PPUSH
47974: LD_EXP 34
47978: PPUSH
47979: CALL 49180 0 3
47983: PUSH
47984: FOR_IN
47985: IFFALSE 48054
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47987: LD_VAR 0 3
47991: PPUSH
47992: LD_INT 0
47994: PPUSH
47995: LD_INT 5
47997: PPUSH
47998: CALL_OW 12
48002: PPUSH
48003: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48007: LD_VAR 0 3
48011: PPUSH
48012: LD_EXP 19
48016: PUSH
48017: LD_VAR 0 8
48021: ARRAY
48022: PUSH
48023: LD_INT 1
48025: ARRAY
48026: PPUSH
48027: LD_EXP 19
48031: PUSH
48032: LD_VAR 0 8
48036: ARRAY
48037: PUSH
48038: LD_INT 2
48040: ARRAY
48041: PPUSH
48042: LD_INT 12
48044: PPUSH
48045: LD_INT 0
48047: PPUSH
48048: CALL_OW 50
// end ;
48052: GO 47984
48054: POP
48055: POP
// end ; uc_nation := nation ;
48056: LD_ADDR_OWVAR 21
48060: PUSH
48061: LD_VAR 0 9
48065: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48066: LD_ADDR_VAR 0 11
48070: PUSH
48071: LD_VAR 0 7
48075: PPUSH
48076: LD_VAR 0 9
48080: PPUSH
48081: LD_EXP 22
48085: PPUSH
48086: LD_EXP 23
48090: PPUSH
48091: CALL 48682 0 4
48095: ST_TO_ADDR
// for j in team do
48096: LD_ADDR_VAR 0 3
48100: PUSH
48101: LD_VAR 0 11
48105: PUSH
48106: FOR_IN
48107: IFFALSE 48156
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48109: LD_VAR 0 3
48113: PPUSH
48114: LD_EXP 19
48118: PUSH
48119: LD_VAR 0 8
48123: ARRAY
48124: PUSH
48125: LD_INT 1
48127: ARRAY
48128: PPUSH
48129: LD_EXP 19
48133: PUSH
48134: LD_VAR 0 8
48138: ARRAY
48139: PUSH
48140: LD_INT 2
48142: ARRAY
48143: PPUSH
48144: LD_INT 12
48146: PPUSH
48147: LD_INT 0
48149: PPUSH
48150: CALL_OW 50
48154: GO 48106
48156: POP
48157: POP
// if mpApemans then
48158: LD_EXP 28
48162: IFFALSE 48268
// begin for j := 1 to mpApemans do
48164: LD_ADDR_VAR 0 3
48168: PUSH
48169: DOUBLE
48170: LD_INT 1
48172: DEC
48173: ST_TO_ADDR
48174: LD_EXP 28
48178: PUSH
48179: FOR_TO
48180: IFFALSE 48266
// begin PrepareApeman ( - 5 ) ;
48182: LD_INT 5
48184: NEG
48185: PPUSH
48186: CALL 37019 0 1
// ape := CreateHuman ;
48190: LD_ADDR_VAR 0 10
48194: PUSH
48195: CALL_OW 44
48199: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48200: LD_ADDR_EXP 30
48204: PUSH
48205: LD_EXP 30
48209: PPUSH
48210: LD_VAR 0 8
48214: PPUSH
48215: LD_EXP 30
48219: PUSH
48220: LD_VAR 0 8
48224: ARRAY
48225: PPUSH
48226: LD_VAR 0 10
48230: PPUSH
48231: CALL 40892 0 2
48235: PPUSH
48236: CALL_OW 1
48240: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48241: LD_VAR 0 10
48245: PPUSH
48246: LD_EXP 29
48250: PUSH
48251: LD_VAR 0 8
48255: ARRAY
48256: PPUSH
48257: LD_INT 0
48259: PPUSH
48260: CALL_OW 49
// end ;
48264: GO 48179
48266: POP
48267: POP
// end ; end ;
48268: GO 46933
48270: POP
48271: POP
// if not mpTeamGame then
48272: LD_EXP 9
48276: NOT
48277: IFFALSE 48375
// begin for i := 1 to 8 do
48279: LD_ADDR_VAR 0 2
48283: PUSH
48284: DOUBLE
48285: LD_INT 1
48287: DEC
48288: ST_TO_ADDR
48289: LD_INT 8
48291: PUSH
48292: FOR_TO
48293: IFFALSE 48371
// for j := 1 to 8 do
48295: LD_ADDR_VAR 0 3
48299: PUSH
48300: DOUBLE
48301: LD_INT 1
48303: DEC
48304: ST_TO_ADDR
48305: LD_INT 8
48307: PUSH
48308: FOR_TO
48309: IFFALSE 48367
// if i <> j then
48311: LD_VAR 0 2
48315: PUSH
48316: LD_VAR 0 3
48320: NONEQUAL
48321: IFFALSE 48345
// SetAttitude ( i , j , att_neutral , true ) else
48323: LD_VAR 0 2
48327: PPUSH
48328: LD_VAR 0 3
48332: PPUSH
48333: LD_INT 0
48335: PPUSH
48336: LD_INT 1
48338: PPUSH
48339: CALL_OW 80
48343: GO 48365
// SetAttitude ( i , j , att_friend , true ) ;
48345: LD_VAR 0 2
48349: PPUSH
48350: LD_VAR 0 3
48354: PPUSH
48355: LD_INT 1
48357: PPUSH
48358: LD_INT 1
48360: PPUSH
48361: CALL_OW 80
48365: GO 48308
48367: POP
48368: POP
48369: GO 48292
48371: POP
48372: POP
// end else
48373: GO 48550
// begin if mpSharedVision then
48375: LD_EXP 14
48379: IFFALSE 48444
// begin for i in mpTeams do
48381: LD_ADDR_VAR 0 2
48385: PUSH
48386: LD_EXP 8
48390: PUSH
48391: FOR_IN
48392: IFFALSE 48442
// for j := 2 to i do
48394: LD_ADDR_VAR 0 3
48398: PUSH
48399: DOUBLE
48400: LD_INT 2
48402: DEC
48403: ST_TO_ADDR
48404: LD_VAR 0 2
48408: PUSH
48409: FOR_TO
48410: IFFALSE 48438
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48412: LD_VAR 0 2
48416: PUSH
48417: LD_VAR 0 3
48421: ARRAY
48422: PPUSH
48423: LD_VAR 0 2
48427: PUSH
48428: LD_INT 1
48430: ARRAY
48431: PPUSH
48432: CALL_OW 343
48436: GO 48409
48438: POP
48439: POP
48440: GO 48391
48442: POP
48443: POP
// end ; for i := 1 to 8 do
48444: LD_ADDR_VAR 0 2
48448: PUSH
48449: DOUBLE
48450: LD_INT 1
48452: DEC
48453: ST_TO_ADDR
48454: LD_INT 8
48456: PUSH
48457: FOR_TO
48458: IFFALSE 48548
// for j := 1 to 8 do
48460: LD_ADDR_VAR 0 3
48464: PUSH
48465: DOUBLE
48466: LD_INT 1
48468: DEC
48469: ST_TO_ADDR
48470: LD_INT 8
48472: PUSH
48473: FOR_TO
48474: IFFALSE 48544
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48476: LD_EXP 6
48480: PUSH
48481: LD_VAR 0 2
48485: ARRAY
48486: PUSH
48487: LD_EXP 6
48491: PUSH
48492: LD_VAR 0 3
48496: ARRAY
48497: EQUAL
48498: IFFALSE 48522
// SetAttitude ( i , j , att_friend , true ) else
48500: LD_VAR 0 2
48504: PPUSH
48505: LD_VAR 0 3
48509: PPUSH
48510: LD_INT 1
48512: PPUSH
48513: LD_INT 1
48515: PPUSH
48516: CALL_OW 80
48520: GO 48542
// SetAttitude ( i , j , att_enemy , true ) ;
48522: LD_VAR 0 2
48526: PPUSH
48527: LD_VAR 0 3
48531: PPUSH
48532: LD_INT 2
48534: PPUSH
48535: LD_INT 1
48537: PPUSH
48538: CALL_OW 80
48542: GO 48473
48544: POP
48545: POP
48546: GO 48457
48548: POP
48549: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48550: LD_ADDR_OWVAR 71
48554: PUSH
48555: LD_EXP 7
48559: PUSH
48560: LD_OWVAR 2
48564: ARRAY
48565: ST_TO_ADDR
// if IAmSpec then
48566: CALL_OW 531
48570: IFFALSE 48611
// begin FogOff ( true ) ;
48572: LD_INT 1
48574: PPUSH
48575: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48579: LD_EXP 27
48583: PUSH
48584: LD_INT 1
48586: ARRAY
48587: PUSH
48588: LD_INT 2
48590: DIV
48591: PPUSH
48592: LD_EXP 27
48596: PUSH
48597: LD_INT 2
48599: ARRAY
48600: PUSH
48601: LD_INT 2
48603: DIV
48604: PPUSH
48605: CALL_OW 86
// end else
48609: GO 48657
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
48611: LD_EXP 19
48615: PUSH
48616: LD_EXP 5
48620: PUSH
48621: LD_OWVAR 2
48625: ARRAY
48626: ARRAY
48627: PUSH
48628: LD_INT 1
48630: ARRAY
48631: PPUSH
48632: LD_EXP 19
48636: PUSH
48637: LD_EXP 5
48641: PUSH
48642: LD_OWVAR 2
48646: ARRAY
48647: ARRAY
48648: PUSH
48649: LD_INT 2
48651: ARRAY
48652: PPUSH
48653: CALL_OW 86
// end ; BeginBuildUp ;
48657: CALL 49713 0 0
// enable ( mpActive ) ;
48661: LD_INT 100
48663: ENABLE_MARKED
// enable ( mpGameType ) ;
48664: LD_EXP 1
48668: ENABLE_MARKED
// mpGameActive := true ;
48669: LD_ADDR_EXP 37
48673: PUSH
48674: LD_INT 1
48676: ST_TO_ADDR
// end ;
48677: LD_VAR 0 1
48681: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
48682: LD_INT 0
48684: PPUSH
48685: PPUSH
48686: PPUSH
48687: PPUSH
// result := [ ] ;
48688: LD_ADDR_VAR 0 5
48692: PUSH
48693: EMPTY
48694: ST_TO_ADDR
// class := class_soldier ;
48695: LD_ADDR_VAR 0 8
48699: PUSH
48700: LD_INT 1
48702: ST_TO_ADDR
// uc_side := side ;
48703: LD_ADDR_OWVAR 20
48707: PUSH
48708: LD_VAR 0 1
48712: ST_TO_ADDR
// uc_nation := nation ;
48713: LD_ADDR_OWVAR 21
48717: PUSH
48718: LD_VAR 0 2
48722: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48723: LD_ADDR_OWVAR 26
48727: PUSH
48728: LD_OWVAR 19
48732: PUSH
48733: LD_VAR 0 1
48737: ARRAY
48738: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48739: LD_INT 1
48741: PPUSH
48742: LD_INT 2
48744: PPUSH
48745: CALL_OW 12
48749: PPUSH
48750: LD_VAR 0 8
48754: PPUSH
48755: LD_VAR 0 4
48759: PUSH
48760: LD_INT 2
48762: PLUS
48763: PPUSH
48764: CALL_OW 380
// hc_importance := 105 ;
48768: LD_ADDR_OWVAR 32
48772: PUSH
48773: LD_INT 105
48775: ST_TO_ADDR
// if Multiplayer then
48776: LD_OWVAR 4
48780: IFFALSE 48820
// begin hc_gallery := MULTIAVATARS ;
48782: LD_ADDR_OWVAR 33
48786: PUSH
48787: LD_STRING MULTIAVATARS
48789: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48790: LD_ADDR_OWVAR 34
48794: PUSH
48795: LD_VAR 0 1
48799: PPUSH
48800: CALL_OW 525
48804: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48805: LD_ADDR_OWVAR 27
48809: PUSH
48810: LD_VAR 0 1
48814: PPUSH
48815: CALL_OW 526
48819: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48820: LD_ADDR_VAR 0 5
48824: PUSH
48825: LD_VAR 0 5
48829: PPUSH
48830: CALL_OW 44
48834: PPUSH
48835: CALL 40892 0 2
48839: ST_TO_ADDR
// if mpTeamPreset then
48840: LD_LOC 1
48844: IFFALSE 48940
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
48846: LD_LOC 1
48850: PUSH
48851: LD_INT 1
48853: ARRAY
48854: PPUSH
48855: LD_VAR 0 5
48859: PUSH
48860: LD_VAR 0 5
48864: ARRAY
48865: PPUSH
48866: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48870: LD_VAR 0 5
48874: PUSH
48875: LD_VAR 0 5
48879: ARRAY
48880: PPUSH
48881: LD_INT 1
48883: PPUSH
48884: LD_LOC 1
48888: PUSH
48889: LD_INT 1
48891: ARRAY
48892: PPUSH
48893: LD_INT 1
48895: PPUSH
48896: CALL_OW 260
48900: PPUSH
48901: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
48905: LD_VAR 0 5
48909: PUSH
48910: LD_VAR 0 5
48914: ARRAY
48915: PPUSH
48916: LD_INT 2
48918: PPUSH
48919: LD_LOC 1
48923: PUSH
48924: LD_INT 1
48926: ARRAY
48927: PPUSH
48928: LD_INT 2
48930: PPUSH
48931: CALL_OW 260
48935: PPUSH
48936: CALL_OW 239
// end ; InitHc_All ( ) ;
48940: CALL_OW 584
// class := 2 ;
48944: LD_ADDR_VAR 0 8
48948: PUSH
48949: LD_INT 2
48951: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48952: LD_ADDR_VAR 0 6
48956: PUSH
48957: DOUBLE
48958: LD_INT 1
48960: DEC
48961: ST_TO_ADDR
48962: LD_VAR 0 3
48966: PUSH
48967: LD_INT 1
48969: MINUS
48970: PUSH
48971: FOR_TO
48972: IFFALSE 49156
// begin PrepareHuman ( false , class , skill ) ;
48974: LD_INT 0
48976: PPUSH
48977: LD_VAR 0 8
48981: PPUSH
48982: LD_VAR 0 4
48986: PPUSH
48987: CALL_OW 380
// un := CreateHuman ;
48991: LD_ADDR_VAR 0 7
48995: PUSH
48996: CALL_OW 44
49000: ST_TO_ADDR
// result := Join ( result , un ) ;
49001: LD_ADDR_VAR 0 5
49005: PUSH
49006: LD_VAR 0 5
49010: PPUSH
49011: LD_VAR 0 7
49015: PPUSH
49016: CALL 40892 0 2
49020: ST_TO_ADDR
// if mpTeamPreset then
49021: LD_LOC 1
49025: IFFALSE 49121
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49027: LD_LOC 1
49031: PUSH
49032: LD_VAR 0 6
49036: PUSH
49037: LD_INT 1
49039: PLUS
49040: ARRAY
49041: PPUSH
49042: LD_VAR 0 7
49046: PPUSH
49047: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49051: LD_VAR 0 7
49055: PPUSH
49056: LD_INT 1
49058: PPUSH
49059: LD_LOC 1
49063: PUSH
49064: LD_VAR 0 6
49068: PUSH
49069: LD_INT 1
49071: PLUS
49072: ARRAY
49073: PPUSH
49074: LD_INT 1
49076: PPUSH
49077: CALL_OW 260
49081: PPUSH
49082: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49086: LD_VAR 0 7
49090: PPUSH
49091: LD_INT 2
49093: PPUSH
49094: LD_LOC 1
49098: PUSH
49099: LD_VAR 0 6
49103: PUSH
49104: LD_INT 1
49106: PLUS
49107: ARRAY
49108: PPUSH
49109: LD_INT 2
49111: PPUSH
49112: CALL_OW 260
49116: PPUSH
49117: CALL_OW 239
// end ; class := Inc ( class ) ;
49121: LD_ADDR_VAR 0 8
49125: PUSH
49126: LD_VAR 0 8
49130: PPUSH
49131: CALL 42265 0 1
49135: ST_TO_ADDR
// if class = 5 then
49136: LD_VAR 0 8
49140: PUSH
49141: LD_INT 5
49143: EQUAL
49144: IFFALSE 49154
// class := 1 ;
49146: LD_ADDR_VAR 0 8
49150: PUSH
49151: LD_INT 1
49153: ST_TO_ADDR
// end ;
49154: GO 48971
49156: POP
49157: POP
// if not mpTeamPreset then
49158: LD_LOC 1
49162: NOT
49163: IFFALSE 49175
// mpTeamPreset := result ;
49165: LD_ADDR_LOC 1
49169: PUSH
49170: LD_VAR 0 5
49174: ST_TO_ADDR
// end ;
49175: LD_VAR 0 5
49179: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49180: LD_INT 0
49182: PPUSH
49183: PPUSH
// result := [ ] ;
49184: LD_ADDR_VAR 0 4
49188: PUSH
49189: EMPTY
49190: ST_TO_ADDR
// if not vehicles then
49191: LD_VAR 0 3
49195: NOT
49196: IFFALSE 49200
// exit ;
49198: GO 49414
// for i := 1 to vehicles [ nation ] do
49200: LD_ADDR_VAR 0 5
49204: PUSH
49205: DOUBLE
49206: LD_INT 1
49208: DEC
49209: ST_TO_ADDR
49210: LD_VAR 0 3
49214: PUSH
49215: LD_VAR 0 2
49219: ARRAY
49220: PUSH
49221: FOR_TO
49222: IFFALSE 49412
// begin uc_side := side ;
49224: LD_ADDR_OWVAR 20
49228: PUSH
49229: LD_VAR 0 1
49233: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49234: LD_VAR 0 3
49238: PUSH
49239: LD_VAR 0 2
49243: ARRAY
49244: PUSH
49245: LD_VAR 0 5
49249: ARRAY
49250: PPUSH
49251: CALL 4960 0 1
49255: PUSH
49256: LD_INT 4
49258: GREATER
49259: IFFALSE 49289
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49261: LD_ADDR_OWVAR 21
49265: PUSH
49266: LD_VAR 0 3
49270: PUSH
49271: LD_VAR 0 2
49275: ARRAY
49276: PUSH
49277: LD_VAR 0 5
49281: ARRAY
49282: PUSH
49283: LD_INT 5
49285: ARRAY
49286: ST_TO_ADDR
49287: GO 49299
// uc_nation := nation ;
49289: LD_ADDR_OWVAR 21
49293: PUSH
49294: LD_VAR 0 2
49298: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49299: LD_VAR 0 3
49303: PUSH
49304: LD_VAR 0 2
49308: ARRAY
49309: PUSH
49310: LD_VAR 0 5
49314: ARRAY
49315: PUSH
49316: LD_INT 1
49318: ARRAY
49319: PPUSH
49320: LD_VAR 0 3
49324: PUSH
49325: LD_VAR 0 2
49329: ARRAY
49330: PUSH
49331: LD_VAR 0 5
49335: ARRAY
49336: PUSH
49337: LD_INT 2
49339: ARRAY
49340: PPUSH
49341: LD_VAR 0 3
49345: PUSH
49346: LD_VAR 0 2
49350: ARRAY
49351: PUSH
49352: LD_VAR 0 5
49356: ARRAY
49357: PUSH
49358: LD_INT 3
49360: ARRAY
49361: PPUSH
49362: LD_VAR 0 3
49366: PUSH
49367: LD_VAR 0 2
49371: ARRAY
49372: PUSH
49373: LD_VAR 0 5
49377: ARRAY
49378: PUSH
49379: LD_INT 4
49381: ARRAY
49382: PPUSH
49383: LD_INT 80
49385: PPUSH
49386: CALL 7722 0 5
// result := Join ( result , CreateVehicle ) ;
49390: LD_ADDR_VAR 0 4
49394: PUSH
49395: LD_VAR 0 4
49399: PPUSH
49400: CALL_OW 45
49404: PPUSH
49405: CALL 40892 0 2
49409: ST_TO_ADDR
// end ;
49410: GO 49221
49412: POP
49413: POP
// end ;
49414: LD_VAR 0 4
49418: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49419: LD_INT 0
49421: PPUSH
49422: PPUSH
// for i in mpBattleFlags do
49423: LD_ADDR_VAR 0 3
49427: PUSH
49428: LD_EXP 21
49432: PUSH
49433: FOR_IN
49434: IFFALSE 49511
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49436: LD_VAR 0 3
49440: PPUSH
49441: LD_INT 1
49443: PUSH
49444: LD_VAR 0 1
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: PUSH
49456: LD_VAR 0 1
49460: PUSH
49461: LD_REAL  7.00000000000000E-0001
49464: MUL
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 3
49472: PUSH
49473: LD_VAR 0 1
49477: PUSH
49478: LD_REAL  4.00000000000000E-0001
49481: MUL
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 20
49489: PUSH
49490: LD_VAR 0 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: PPUSH
49505: CALL_OW 423
49509: GO 49433
49511: POP
49512: POP
// end ;
49513: LD_VAR 0 2
49517: RET
// every 0 0$1 trigger mpActive do var i , strength ;
49518: LD_INT 100
49520: IFFALSE 49615
49522: GO 49524
49524: DISABLE
49525: LD_INT 0
49527: PPUSH
49528: PPUSH
// begin if mpBattleFlag <= 0 then
49529: LD_EXP 20
49533: PUSH
49534: LD_INT 0
49536: LESSEQUAL
49537: IFFALSE 49541
// exit ;
49539: GO 49615
// strength := 100 ;
49541: LD_ADDR_VAR 0 2
49545: PUSH
49546: LD_INT 100
49548: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
49549: LD_EXP 20
49553: PPUSH
49554: CALL_OW 67
// strength := Dec ( strength ) ;
49558: LD_ADDR_VAR 0 2
49562: PUSH
49563: LD_VAR 0 2
49567: PPUSH
49568: CALL 42287 0 1
49572: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
49573: LD_VAR 0 2
49577: PPUSH
49578: CALL 49419 0 1
// until not strength ;
49582: LD_VAR 0 2
49586: NOT
49587: IFFALSE 49549
// for i in mpBattleFlags do
49589: LD_ADDR_VAR 0 1
49593: PUSH
49594: LD_EXP 21
49598: PUSH
49599: FOR_IN
49600: IFFALSE 49613
// KillBattleFlag ( i ) ;
49602: LD_VAR 0 1
49606: PPUSH
49607: CALL_OW 419
49611: GO 49599
49613: POP
49614: POP
// end ;
49615: PPOPN 2
49617: END
// every 0 0$1 marked mpActive do var side , tmp ;
49618: GO 49620
49620: DISABLE
49621: LD_INT 0
49623: PPUSH
49624: PPUSH
// begin if mpSibBomb <= 1 then
49625: LD_EXP 26
49629: PUSH
49630: LD_INT 1
49632: LESSEQUAL
49633: IFFALSE 49637
// exit ;
49635: GO 49710
// tmp := mpSibBomb ;
49637: LD_ADDR_VAR 0 2
49641: PUSH
49642: LD_EXP 26
49646: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49647: LD_INT 35
49649: PPUSH
49650: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49654: LD_ADDR_VAR 0 2
49658: PUSH
49659: LD_VAR 0 2
49663: PUSH
49664: LD_INT 35
49666: MINUS
49667: ST_TO_ADDR
// until not tmp ;
49668: LD_VAR 0 2
49672: NOT
49673: IFFALSE 49647
// for side := 1 to 8 do
49675: LD_ADDR_VAR 0 1
49679: PUSH
49680: DOUBLE
49681: LD_INT 1
49683: DEC
49684: ST_TO_ADDR
49685: LD_INT 8
49687: PUSH
49688: FOR_TO
49689: IFFALSE 49708
// SetTech ( tech_SibFiss , side , state_enabled ) ;
49691: LD_INT 25
49693: PPUSH
49694: LD_VAR 0 1
49698: PPUSH
49699: LD_INT 1
49701: PPUSH
49702: CALL_OW 322
49706: GO 49688
49708: POP
49709: POP
// end ;
49710: PPOPN 2
49712: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
49713: LD_INT 0
49715: PPUSH
49716: PPUSH
49717: PPUSH
// mpBuildUpTimeDelay := 0 ;
49718: LD_ADDR_EXP 44
49722: PUSH
49723: LD_INT 0
49725: ST_TO_ADDR
// if not mpBuildUpTime then
49726: LD_EXP 18
49730: NOT
49731: IFFALSE 49735
// exit ;
49733: GO 49924
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
49735: LD_ADDR_EXP 44
49739: PUSH
49740: LD_INT 8400
49742: PUSH
49743: LD_INT 2100
49745: PUSH
49746: LD_EXP 18
49750: MUL
49751: PLUS
49752: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
49753: LD_ADDR_EXP 45
49757: PUSH
49758: LD_INT 1
49760: ST_TO_ADDR
// for i := 1 to 8 do
49761: LD_ADDR_VAR 0 2
49765: PUSH
49766: DOUBLE
49767: LD_INT 1
49769: DEC
49770: ST_TO_ADDR
49771: LD_INT 8
49773: PUSH
49774: FOR_TO
49775: IFFALSE 49922
// if mpSidePositions [ i ] then
49777: LD_EXP 5
49781: PUSH
49782: LD_VAR 0 2
49786: ARRAY
49787: IFFALSE 49920
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49789: LD_EXP 17
49793: PUSH
49794: LD_EXP 5
49798: PUSH
49799: LD_VAR 0 2
49803: ARRAY
49804: ARRAY
49805: PPUSH
49806: LD_INT 5
49808: PPUSH
49809: CALL_OW 424
// for j := 1 to 8 do
49813: LD_ADDR_VAR 0 3
49817: PUSH
49818: DOUBLE
49819: LD_INT 1
49821: DEC
49822: ST_TO_ADDR
49823: LD_INT 8
49825: PUSH
49826: FOR_TO
49827: IFFALSE 49918
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49829: LD_EXP 5
49833: PUSH
49834: LD_VAR 0 3
49838: ARRAY
49839: IFFALSE 49888
49841: PUSH
49842: LD_EXP 6
49846: PUSH
49847: LD_VAR 0 2
49851: ARRAY
49852: PUSH
49853: LD_EXP 6
49857: PUSH
49858: LD_VAR 0 3
49862: ARRAY
49863: NONEQUAL
49864: IFTRUE 49887
49866: PUSH
49867: LD_EXP 9
49871: NOT
49872: IFFALSE 49886
49874: PUSH
49875: LD_VAR 0 2
49879: PUSH
49880: LD_VAR 0 3
49884: NONEQUAL
49885: AND
49886: OR
49887: AND
49888: IFFALSE 49916
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49890: LD_VAR 0 3
49894: PPUSH
49895: LD_EXP 17
49899: PUSH
49900: LD_EXP 5
49904: PUSH
49905: LD_VAR 0 2
49909: ARRAY
49910: ARRAY
49911: PPUSH
49912: CALL_OW 333
49916: GO 49826
49918: POP
49919: POP
// end ;
49920: GO 49774
49922: POP
49923: POP
// end ;
49924: LD_VAR 0 1
49928: RET
// function EndBuildUp ; var i , j ; begin
49929: LD_INT 0
49931: PPUSH
49932: PPUSH
49933: PPUSH
// mpBuildUpTimeActive := false ;
49934: LD_ADDR_EXP 45
49938: PUSH
49939: LD_INT 0
49941: ST_TO_ADDR
// for i := 1 to 8 do
49942: LD_ADDR_VAR 0 2
49946: PUSH
49947: DOUBLE
49948: LD_INT 1
49950: DEC
49951: ST_TO_ADDR
49952: LD_INT 8
49954: PUSH
49955: FOR_TO
49956: IFFALSE 50103
// if mpSidePositions [ i ] then
49958: LD_EXP 5
49962: PUSH
49963: LD_VAR 0 2
49967: ARRAY
49968: IFFALSE 50101
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
49970: LD_EXP 17
49974: PUSH
49975: LD_EXP 5
49979: PUSH
49980: LD_VAR 0 2
49984: ARRAY
49985: ARRAY
49986: PPUSH
49987: LD_INT 0
49989: PPUSH
49990: CALL_OW 424
// for j := 1 to 8 do
49994: LD_ADDR_VAR 0 3
49998: PUSH
49999: DOUBLE
50000: LD_INT 1
50002: DEC
50003: ST_TO_ADDR
50004: LD_INT 8
50006: PUSH
50007: FOR_TO
50008: IFFALSE 50099
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50010: LD_EXP 5
50014: PUSH
50015: LD_VAR 0 3
50019: ARRAY
50020: IFFALSE 50069
50022: PUSH
50023: LD_EXP 6
50027: PUSH
50028: LD_VAR 0 2
50032: ARRAY
50033: PUSH
50034: LD_EXP 6
50038: PUSH
50039: LD_VAR 0 3
50043: ARRAY
50044: NONEQUAL
50045: IFTRUE 50068
50047: PUSH
50048: LD_EXP 9
50052: NOT
50053: IFFALSE 50067
50055: PUSH
50056: LD_VAR 0 2
50060: PUSH
50061: LD_VAR 0 3
50065: NONEQUAL
50066: AND
50067: OR
50068: AND
50069: IFFALSE 50097
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50071: LD_VAR 0 3
50075: PPUSH
50076: LD_EXP 17
50080: PUSH
50081: LD_EXP 5
50085: PUSH
50086: LD_VAR 0 2
50090: ARRAY
50091: ARRAY
50092: PPUSH
50093: CALL_OW 334
50097: GO 50007
50099: POP
50100: POP
// end ;
50101: GO 49955
50103: POP
50104: POP
// end ;
50105: LD_VAR 0 1
50109: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50110: LD_EXP 45
50114: IFFALSE 50293
50116: GO 50118
50118: DISABLE
50119: LD_INT 0
50121: PPUSH
50122: PPUSH
// begin for i := 1 to 8 do
50123: LD_ADDR_VAR 0 1
50127: PUSH
50128: DOUBLE
50129: LD_INT 1
50131: DEC
50132: ST_TO_ADDR
50133: LD_INT 8
50135: PUSH
50136: FOR_TO
50137: IFFALSE 50290
// if mpSidePositions [ i ] then
50139: LD_EXP 5
50143: PUSH
50144: LD_VAR 0 1
50148: ARRAY
50149: IFFALSE 50288
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50151: LD_ADDR_VAR 0 2
50155: PUSH
50156: LD_EXP 17
50160: PUSH
50161: LD_EXP 5
50165: PUSH
50166: LD_VAR 0 1
50170: ARRAY
50171: ARRAY
50172: PPUSH
50173: LD_INT 2
50175: PUSH
50176: LD_INT 21
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 21
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 22
50203: PUSH
50204: LD_OWVAR 2
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PPUSH
50217: CALL_OW 70
50221: PUSH
50222: FOR_IN
50223: IFFALSE 50286
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50225: LD_EXP 6
50229: PUSH
50230: LD_VAR 0 1
50234: ARRAY
50235: PUSH
50236: LD_EXP 6
50240: PUSH
50241: LD_OWVAR 2
50245: ARRAY
50246: NONEQUAL
50247: IFTRUE 50270
50249: PUSH
50250: LD_EXP 9
50254: NOT
50255: IFFALSE 50269
50257: PUSH
50258: LD_VAR 0 1
50262: PUSH
50263: LD_OWVAR 2
50267: NONEQUAL
50268: AND
50269: OR
50270: IFFALSE 50284
// ComMoveToArea ( un , BuildUpEscape ) ;
50272: LD_VAR 0 2
50276: PPUSH
50277: LD_INT 52
50279: PPUSH
50280: CALL_OW 113
50284: GO 50222
50286: POP
50287: POP
50288: GO 50136
50290: POP
50291: POP
// enable ;
50292: ENABLE
// end ;
50293: PPOPN 2
50295: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50296: LD_EXP 18
50300: IFFALSE 50350
50302: GO 50304
50304: DISABLE
50305: LD_INT 0
50307: PPUSH
// begin tmp := mpBuildUpTime ;
50308: LD_ADDR_VAR 0 1
50312: PUSH
50313: LD_EXP 18
50317: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50318: LD_INT 35
50320: PPUSH
50321: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50325: LD_ADDR_VAR 0 1
50329: PUSH
50330: LD_VAR 0 1
50334: PUSH
50335: LD_INT 35
50337: MINUS
50338: ST_TO_ADDR
// until not tmp ;
50339: LD_VAR 0 1
50343: NOT
50344: IFFALSE 50318
// EndBuildUp ;
50346: CALL 49929 0 0
// end ;
50350: PPOPN 1
50352: END
// every 0 0$1 trigger mpActive marked mpWin do
50353: LD_INT 100
50355: IFFALSE 50389
50357: GO 50359
50359: DISABLE
// begin if IAmServer then
50360: CALL_OW 518
50364: IFFALSE 50373
// wait ( 0 0$3 ) ;
50366: LD_INT 105
50368: PPUSH
50369: CALL_OW 67
// if Multiplayer then
50373: LD_OWVAR 4
50377: IFFALSE 50385
// YouWinInMultiplayer else
50379: CALL_OW 106
50383: GO 50389
// YouWin ;
50385: CALL_OW 103
// end ;
50389: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50390: LD_INT 0
50392: PPUSH
// result := false ;
50393: LD_ADDR_VAR 0 3
50397: PUSH
50398: LD_INT 0
50400: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
50401: LD_VAR 0 1
50405: PUSH
50406: LD_INT 1
50408: DOUBLE
50409: EQUAL
50410: IFTRUE 50420
50412: LD_INT 5
50414: DOUBLE
50415: EQUAL
50416: IFTRUE 50420
50418: GO 50493
50420: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50421: LD_ADDR_VAR 0 3
50425: PUSH
50426: LD_INT 22
50428: PUSH
50429: LD_VAR 0 2
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: LD_INT 21
50443: PUSH
50444: LD_INT 1
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 33
50453: PUSH
50454: LD_INT 3
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 33
50463: PUSH
50464: LD_INT 5
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PPUSH
50481: CALL_OW 69
50485: PPUSH
50486: CALL 4960 0 1
50490: ST_TO_ADDR
// end ; GameTypeSurvival :
50491: GO 50732
50493: LD_INT 2
50495: DOUBLE
50496: EQUAL
50497: IFTRUE 50501
50499: GO 50631
50501: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50502: LD_ADDR_VAR 0 3
50506: PUSH
50507: LD_INT 22
50509: PUSH
50510: LD_VAR 0 2
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 2
50521: PUSH
50522: LD_INT 30
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 30
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: LIST
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PPUSH
50551: CALL_OW 69
50555: PPUSH
50556: CALL 4960 0 1
50560: IFFALSE 50628
50562: PUSH
50563: LD_INT 22
50565: PUSH
50566: LD_VAR 0 2
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: LD_INT 21
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 33
50590: PUSH
50591: LD_INT 3
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 33
50600: PUSH
50601: LD_INT 5
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PPUSH
50618: CALL_OW 69
50622: PPUSH
50623: CALL 4960 0 1
50627: AND
50628: ST_TO_ADDR
// end ; GameTypeKing :
50629: GO 50732
50631: LD_INT 3
50633: DOUBLE
50634: EQUAL
50635: IFTRUE 50639
50637: GO 50731
50639: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
50640: LD_ADDR_VAR 0 3
50644: PUSH
50645: LD_INT 22
50647: PUSH
50648: LD_VAR 0 2
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 2
50659: PUSH
50660: LD_INT 21
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 33
50672: PUSH
50673: LD_INT 3
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 33
50682: PUSH
50683: LD_INT 5
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PPUSH
50700: CALL_OW 69
50704: PPUSH
50705: CALL 4960 0 1
50709: IFFALSE 50728
50711: PUSH
50712: LD_VAR 0 2
50716: PPUSH
50717: CALL 54549 0 1
50721: PUSH
50722: LD_EXP 33
50726: LESS
50727: AND
50728: ST_TO_ADDR
// end ; end ;
50729: GO 50732
50731: POP
// end ;
50732: LD_VAR 0 3
50736: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
50737: LD_INT 100
50739: IFFALSE 50969
50741: GO 50743
50743: DISABLE
50744: LD_INT 0
50746: PPUSH
50747: PPUSH
// begin if Multiplayer then
50748: LD_OWVAR 4
50752: IFFALSE 50760
// SetPlayerSpectator ( ) else
50754: CALL_OW 572
50758: GO 50769
// FogOff ( your_side ) ;
50760: LD_OWVAR 2
50764: PPUSH
50765: CALL_OW 344
// repeat gameIsOn := false ;
50769: LD_ADDR_VAR 0 1
50773: PUSH
50774: LD_INT 0
50776: ST_TO_ADDR
// for i := 1 to 8 do
50777: LD_ADDR_VAR 0 2
50781: PUSH
50782: DOUBLE
50783: LD_INT 1
50785: DEC
50786: ST_TO_ADDR
50787: LD_INT 8
50789: PUSH
50790: FOR_TO
50791: IFFALSE 50921
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50793: LD_EXP 5
50797: PUSH
50798: LD_VAR 0 2
50802: ARRAY
50803: IFFALSE 50816
50805: PUSH
50806: LD_VAR 0 2
50810: PPUSH
50811: CALL_OW 108
50815: AND
50816: IFFALSE 50830
50818: PUSH
50819: LD_VAR 0 2
50823: PUSH
50824: LD_OWVAR 2
50828: NONEQUAL
50829: AND
50830: IFFALSE 50919
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
50832: LD_EXP 6
50836: PUSH
50837: LD_VAR 0 2
50841: ARRAY
50842: NOT
50843: IFTRUE 50891
50845: PUSH
50846: LD_EXP 6
50850: PUSH
50851: LD_VAR 0 2
50855: ARRAY
50856: PUSH
50857: LD_EXP 6
50861: PUSH
50862: LD_OWVAR 2
50866: ARRAY
50867: NONEQUAL
50868: IFFALSE 50890
50870: PUSH
50871: LD_OWVAR 2
50875: PPUSH
50876: LD_VAR 0 2
50880: PPUSH
50881: CALL_OW 81
50885: PUSH
50886: LD_INT 1
50888: NONEQUAL
50889: AND
50890: OR
50891: IFFALSE 50919
// if HasPowerByGameType ( mpGameType , i ) then
50893: LD_EXP 1
50897: PPUSH
50898: LD_VAR 0 2
50902: PPUSH
50903: CALL 50390 0 2
50907: IFFALSE 50919
// begin gameIsOn := true ;
50909: LD_ADDR_VAR 0 1
50913: PUSH
50914: LD_INT 1
50916: ST_TO_ADDR
// break ;
50917: GO 50921
// end ;
50919: GO 50790
50921: POP
50922: POP
// wait ( 100 ) ;
50923: LD_INT 100
50925: PPUSH
50926: CALL_OW 67
// until not gameIsOn ;
50930: LD_VAR 0 1
50934: NOT
50935: IFFALSE 50769
// if IAmServer then
50937: CALL_OW 518
50941: IFFALSE 50950
// wait ( 0 0$3 ) ;
50943: LD_INT 105
50945: PPUSH
50946: CALL_OW 67
// if Multiplayer then
50950: LD_OWVAR 4
50954: IFFALSE 50962
// YouLostInMultiplayer else
50956: CALL_OW 107
50960: GO 50969
// YouLost (  ) ;
50962: LD_STRING 
50964: PPUSH
50965: CALL_OW 104
// end ;
50969: PPOPN 2
50971: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
50972: LD_EXP 31
50976: IFFALSE 51360
50978: GO 50980
50980: DISABLE
50981: LD_INT 0
50983: PPUSH
50984: PPUSH
50985: PPUSH
50986: PPUSH
50987: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
50988: LD_ADDR_VAR 0 5
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 3
51001: PUSH
51002: LD_INT 4
51004: PUSH
51005: LD_INT 5
51007: PUSH
51008: LD_INT 6
51010: PUSH
51011: LD_INT 7
51013: PUSH
51014: LD_INT 8
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51027: LD_INT 350
51029: PPUSH
51030: CALL_OW 67
// for i := 1 to 8 do
51034: LD_ADDR_VAR 0 1
51038: PUSH
51039: DOUBLE
51040: LD_INT 1
51042: DEC
51043: ST_TO_ADDR
51044: LD_INT 8
51046: PUSH
51047: FOR_TO
51048: IFFALSE 51330
// begin j := sides [ i ] ;
51050: LD_ADDR_VAR 0 2
51054: PUSH
51055: LD_VAR 0 5
51059: PUSH
51060: LD_VAR 0 1
51064: ARRAY
51065: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51066: LD_EXP 38
51070: PUSH
51071: LD_VAR 0 2
51075: ARRAY
51076: PPUSH
51077: CALL 4960 0 1
51081: IFFALSE 51094
51083: PUSH
51084: LD_VAR 0 2
51088: PPUSH
51089: CALL_OW 108
51093: AND
51094: IFFALSE 51112
51096: PUSH
51097: LD_EXP 1
51101: PPUSH
51102: LD_VAR 0 2
51106: PPUSH
51107: CALL 50390 0 2
51111: AND
51112: IFFALSE 51328
// begin wait ( mpRespawn div 3 ) ;
51114: LD_EXP 31
51118: PUSH
51119: LD_INT 3
51121: DIV
51122: PPUSH
51123: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51127: LD_ADDR_VAR 0 3
51131: PUSH
51132: LD_INT 22
51134: PUSH
51135: LD_VAR 0 2
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 50
51146: PUSH
51147: EMPTY
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: LD_INT 30
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 30
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: LIST
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: LIST
51182: PPUSH
51183: CALL_OW 69
51187: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51188: LD_VAR 0 3
51192: NOT
51193: IFTRUE 51207
51195: PUSH
51196: LD_VAR 0 2
51200: PPUSH
51201: CALL_OW 108
51205: NOT
51206: OR
51207: IFTRUE 51226
51209: PUSH
51210: LD_EXP 1
51214: PPUSH
51215: LD_VAR 0 2
51219: PPUSH
51220: CALL 50390 0 2
51224: NOT
51225: OR
51226: IFFALSE 51230
// continue ;
51228: GO 51047
// spawn := tmp [ 1 ] ;
51230: LD_ADDR_VAR 0 4
51234: PUSH
51235: LD_VAR 0 3
51239: PUSH
51240: LD_INT 1
51242: ARRAY
51243: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51244: LD_EXP 38
51248: PUSH
51249: LD_VAR 0 2
51253: ARRAY
51254: PUSH
51255: LD_INT 1
51257: ARRAY
51258: PPUSH
51259: LD_VAR 0 4
51263: PPUSH
51264: CALL_OW 250
51268: PPUSH
51269: LD_VAR 0 4
51273: PPUSH
51274: CALL_OW 251
51278: PPUSH
51279: LD_INT 32
51281: PPUSH
51282: LD_INT 1
51284: PPUSH
51285: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51289: LD_ADDR_EXP 38
51293: PUSH
51294: LD_EXP 38
51298: PPUSH
51299: LD_VAR 0 2
51303: PPUSH
51304: LD_EXP 38
51308: PUSH
51309: LD_VAR 0 2
51313: ARRAY
51314: PPUSH
51315: LD_INT 1
51317: PPUSH
51318: CALL_OW 3
51322: PPUSH
51323: CALL_OW 1
51327: ST_TO_ADDR
// end ; end ;
51328: GO 51047
51330: POP
51331: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51332: LD_ADDR_VAR 0 5
51336: PUSH
51337: LD_VAR 0 5
51341: PPUSH
51342: LD_INT 1
51344: PPUSH
51345: LD_INT 8
51347: PPUSH
51348: LD_INT 1
51350: PPUSH
51351: CALL 7252 0 4
51355: ST_TO_ADDR
// until false ;
51356: LD_INT 0
51358: IFFALSE 51027
// end ;
51360: PPOPN 5
51362: END
// every 0 0$1 marked mpActive do
51363: GO 51365
51365: DISABLE
// begin enable ;
51366: ENABLE
// if not mpDisplayStrings then
51367: LD_EXP 36
51371: NOT
51372: IFFALSE 51383
// begin display_strings := [ ] ;
51374: LD_ADDR_OWVAR 47
51378: PUSH
51379: EMPTY
51380: ST_TO_ADDR
// exit ;
51381: GO 51393
// end ; display_strings := mpDisplayStrings ;
51383: LD_ADDR_OWVAR 47
51387: PUSH
51388: LD_EXP 36
51392: ST_TO_ADDR
// end ; end_of_file
51393: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51394: LD_INT 0
51396: PPUSH
51397: PPUSH
51398: PPUSH
51399: PPUSH
51400: PPUSH
51401: PPUSH
51402: PPUSH
51403: PPUSH
51404: PPUSH
// if GetType ( un ) = unit_vehicle then
51405: LD_VAR 0 1
51409: PPUSH
51410: CALL_OW 247
51414: PUSH
51415: LD_INT 2
51417: EQUAL
51418: IFFALSE 51422
// exit ;
51420: GO 52060
// side := GetSide ( un ) ;
51422: LD_ADDR_VAR 0 9
51426: PUSH
51427: LD_VAR 0 1
51431: PPUSH
51432: CALL_OW 255
51436: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
51437: LD_EXP 1
51441: PUSH
51442: LD_INT 2
51444: EQUAL
51445: IFFALSE 51521
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
51447: LD_VAR 0 1
51451: PPUSH
51452: CALL_OW 266
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: IN
51467: IFFALSE 51521
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
51469: LD_ADDR_VAR 0 3
51473: PUSH
51474: LD_INT 22
51476: PUSH
51477: LD_VAR 0 9
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 21
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PPUSH
51500: CALL_OW 69
51504: PUSH
51505: FOR_IN
51506: IFFALSE 51519
// KillUnit ( i ) ;
51508: LD_VAR 0 3
51512: PPUSH
51513: CALL_OW 66
51517: GO 51505
51519: POP
51520: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
51521: LD_VAR 0 1
51525: PPUSH
51526: CALL_OW 257
51530: PUSH
51531: LD_INT 12
51533: PUSH
51534: LD_INT 17
51536: PUSH
51537: LD_INT 15
51539: PUSH
51540: LD_INT 16
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: IN
51549: IFTRUE 51566
51551: PUSH
51552: LD_VAR 0 1
51556: PPUSH
51557: CALL_OW 263
51561: PUSH
51562: LD_INT 5
51564: EQUAL
51565: OR
51566: IFFALSE 51785
// begin tag := 0 ;
51568: LD_ADDR_VAR 0 5
51572: PUSH
51573: LD_INT 0
51575: ST_TO_ADDR
// for i := 1 to 8 do
51576: LD_ADDR_VAR 0 3
51580: PUSH
51581: DOUBLE
51582: LD_INT 1
51584: DEC
51585: ST_TO_ADDR
51586: LD_INT 8
51588: PUSH
51589: FOR_TO
51590: IFFALSE 51624
// if un in mpApePosIndex [ i ] then
51592: LD_VAR 0 1
51596: PUSH
51597: LD_EXP 30
51601: PUSH
51602: LD_VAR 0 3
51606: ARRAY
51607: IN
51608: IFFALSE 51622
// begin tag := i ;
51610: LD_ADDR_VAR 0 5
51614: PUSH
51615: LD_VAR 0 3
51619: ST_TO_ADDR
// break ;
51620: GO 51624
// end ;
51622: GO 51589
51624: POP
51625: POP
// if not tag then
51626: LD_VAR 0 5
51630: NOT
51631: IFFALSE 51635
// exit ;
51633: GO 52060
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
51635: LD_ADDR_VAR 0 7
51639: PUSH
51640: LD_EXP 29
51644: PUSH
51645: LD_EXP 5
51649: PUSH
51650: LD_VAR 0 5
51654: ARRAY
51655: ARRAY
51656: ST_TO_ADDR
// if not area then
51657: LD_VAR 0 7
51661: NOT
51662: IFFALSE 51666
// exit ;
51664: GO 52060
// wait ( 4 4$00 ) ;
51666: LD_INT 8400
51668: PPUSH
51669: CALL_OW 67
// repeat wait ( 10 ) ;
51673: LD_INT 10
51675: PPUSH
51676: CALL_OW 67
// until not mpBlockRespThread ;
51680: LD_EXP 43
51684: NOT
51685: IFFALSE 51673
// mpBlockRespThread := true ;
51687: LD_ADDR_EXP 43
51691: PUSH
51692: LD_INT 1
51694: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
51695: LD_INT 0
51697: PPUSH
51698: CALL 37019 0 1
// ape := CreateHuman ;
51702: LD_ADDR_VAR 0 4
51706: PUSH
51707: CALL_OW 44
51711: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
51712: LD_ADDR_EXP 30
51716: PUSH
51717: LD_EXP 30
51721: PPUSH
51722: LD_VAR 0 5
51726: PPUSH
51727: LD_EXP 30
51731: PUSH
51732: LD_VAR 0 5
51736: ARRAY
51737: PPUSH
51738: LD_VAR 0 4
51742: PPUSH
51743: CALL 40892 0 2
51747: PPUSH
51748: CALL_OW 1
51752: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
51753: LD_VAR 0 4
51757: PPUSH
51758: LD_VAR 0 7
51762: PPUSH
51763: LD_INT 0
51765: PPUSH
51766: CALL_OW 49
// wait ( 10 ) ;
51770: LD_INT 10
51772: PPUSH
51773: CALL_OW 67
// mpBlockRespThread := false ;
51777: LD_ADDR_EXP 43
51781: PUSH
51782: LD_INT 0
51784: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
51785: LD_VAR 0 1
51789: PPUSH
51790: CALL_OW 247
51794: PUSH
51795: LD_INT 1
51797: EQUAL
51798: IFFALSE 51815
51800: PUSH
51801: LD_VAR 0 1
51805: PPUSH
51806: CALL_OW 248
51810: PUSH
51811: LD_INT 0
51813: GREATER
51814: AND
51815: IFFALSE 52060
// begin if not mpRespawn then
51817: LD_EXP 31
51821: NOT
51822: IFFALSE 51826
// exit ;
51824: GO 52060
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
51826: LD_VAR 0 9
51830: PPUSH
51831: CALL_OW 108
51835: NOT
51836: IFFALSE 51855
51838: PUSH
51839: LD_EXP 1
51843: PPUSH
51844: LD_VAR 0 9
51848: PPUSH
51849: CALL 50390 0 2
51853: NOT
51854: AND
51855: IFFALSE 51859
// exit ;
51857: GO 52060
// side := GetSide ( un ) ;
51859: LD_ADDR_VAR 0 9
51863: PUSH
51864: LD_VAR 0 1
51868: PPUSH
51869: CALL_OW 255
51873: ST_TO_ADDR
// nation := GetNation ( un ) ;
51874: LD_ADDR_VAR 0 8
51878: PUSH
51879: LD_VAR 0 1
51883: PPUSH
51884: CALL_OW 248
51888: ST_TO_ADDR
// class := GetClass ( un ) ;
51889: LD_ADDR_VAR 0 6
51893: PUSH
51894: LD_VAR 0 1
51898: PPUSH
51899: CALL_OW 257
51903: ST_TO_ADDR
// if class > 4 then
51904: LD_VAR 0 6
51908: PUSH
51909: LD_INT 4
51911: GREATER
51912: IFFALSE 51922
// class := 1 ;
51914: LD_ADDR_VAR 0 6
51918: PUSH
51919: LD_INT 1
51921: ST_TO_ADDR
// repeat wait ( 10 ) ;
51922: LD_INT 10
51924: PPUSH
51925: CALL_OW 67
// until not mpBlockRespThread ;
51929: LD_EXP 43
51933: NOT
51934: IFFALSE 51922
// mpBlockRespThread := true ;
51936: LD_ADDR_EXP 43
51940: PUSH
51941: LD_INT 1
51943: ST_TO_ADDR
// uc_side := side ;
51944: LD_ADDR_OWVAR 20
51948: PUSH
51949: LD_VAR 0 9
51953: ST_TO_ADDR
// uc_nation := nation ;
51954: LD_ADDR_OWVAR 21
51958: PUSH
51959: LD_VAR 0 8
51963: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
51964: LD_INT 0
51966: PPUSH
51967: LD_VAR 0 6
51971: PPUSH
51972: LD_INT 2
51974: PPUSH
51975: CALL_OW 380
// un := CreateHuman ;
51979: LD_ADDR_VAR 0 1
51983: PUSH
51984: CALL_OW 44
51988: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
51989: LD_ADDR_EXP 38
51993: PUSH
51994: LD_EXP 38
51998: PPUSH
51999: LD_VAR 0 9
52003: PPUSH
52004: LD_EXP 38
52008: PUSH
52009: LD_VAR 0 9
52013: ARRAY
52014: PPUSH
52015: LD_EXP 38
52019: PUSH
52020: LD_VAR 0 9
52024: ARRAY
52025: PUSH
52026: LD_INT 1
52028: PLUS
52029: PPUSH
52030: LD_VAR 0 1
52034: PPUSH
52035: CALL_OW 1
52039: PPUSH
52040: CALL_OW 1
52044: ST_TO_ADDR
// wait ( 10 ) ;
52045: LD_INT 10
52047: PPUSH
52048: CALL_OW 67
// mpBlockRespThread := false ;
52052: LD_ADDR_EXP 43
52056: PUSH
52057: LD_INT 0
52059: ST_TO_ADDR
// end ; end ;
52060: LD_VAR 0 2
52064: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52065: LD_INT 0
52067: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52068: LD_VAR 0 1
52072: PPUSH
52073: CALL_OW 266
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: IN
52088: IFFALSE 52113
// SetBName ( building , @ & GetSide ( building ) ) ;
52090: LD_VAR 0 1
52094: PPUSH
52095: LD_STRING @
52097: PUSH
52098: LD_VAR 0 1
52102: PPUSH
52103: CALL_OW 255
52107: STR
52108: PPUSH
52109: CALL_OW 500
// end ;
52113: LD_VAR 0 2
52117: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
52118: LD_INT 0
52120: PPUSH
52121: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
52122: LD_EXP 1
52126: PUSH
52127: LD_INT 2
52129: EQUAL
52130: IFFALSE 52154
52132: PUSH
52133: LD_VAR 0 1
52137: PPUSH
52138: CALL_OW 266
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: IN
52153: AND
52154: IFFALSE 52233
// begin SetSide ( building , oldSide ) ;
52156: LD_VAR 0 1
52160: PPUSH
52161: LD_VAR 0 2
52165: PPUSH
52166: CALL_OW 235
// KillUnit ( building ) ;
52170: LD_VAR 0 1
52174: PPUSH
52175: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
52179: LD_ADDR_VAR 0 5
52183: PUSH
52184: LD_INT 22
52186: PUSH
52187: LD_VAR 0 2
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 21
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PPUSH
52210: CALL_OW 69
52214: PUSH
52215: FOR_IN
52216: IFFALSE 52229
// KillUnit ( i ) ;
52218: LD_VAR 0 5
52222: PPUSH
52223: CALL_OW 66
52227: GO 52215
52229: POP
52230: POP
// exit ;
52231: GO 52278
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
52233: LD_VAR 0 1
52237: PPUSH
52238: CALL_OW 266
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: IN
52253: IFFALSE 52278
// SetBName ( building , @ & GetSide ( building ) ) ;
52255: LD_VAR 0 1
52259: PPUSH
52260: LD_STRING @
52262: PUSH
52263: LD_VAR 0 1
52267: PPUSH
52268: CALL_OW 255
52272: STR
52273: PPUSH
52274: CALL_OW 500
// end ;
52278: LD_VAR 0 4
52282: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
52283: LD_INT 0
52285: PPUSH
52286: PPUSH
52287: PPUSH
// if mpGameType <> GameTypeFamine then
52288: LD_EXP 1
52292: PUSH
52293: LD_INT 5
52295: NONEQUAL
52296: IFFALSE 52300
// exit ;
52298: GO 52514
// for i := 1 to mpGlobalOilDeposits do
52300: LD_ADDR_VAR 0 6
52304: PUSH
52305: DOUBLE
52306: LD_INT 1
52308: DEC
52309: ST_TO_ADDR
52310: LD_EXP 39
52314: PUSH
52315: FOR_TO
52316: IFFALSE 52512
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
52318: LD_EXP 39
52322: PUSH
52323: LD_VAR 0 6
52327: ARRAY
52328: PUSH
52329: LD_INT 1
52331: ARRAY
52332: PPUSH
52333: LD_EXP 39
52337: PUSH
52338: LD_VAR 0 6
52342: ARRAY
52343: PUSH
52344: LD_INT 2
52346: ARRAY
52347: PPUSH
52348: CALL_OW 428
52352: PUSH
52353: LD_VAR 0 1
52357: EQUAL
52358: IFFALSE 52510
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
52360: LD_ADDR_VAR 0 7
52364: PUSH
52365: LD_EXP 39
52369: PUSH
52370: LD_VAR 0 6
52374: ARRAY
52375: PUSH
52376: LD_INT 3
52378: ARRAY
52379: ST_TO_ADDR
// value := Dec ( value ) ;
52380: LD_ADDR_VAR 0 7
52384: PUSH
52385: LD_VAR 0 7
52389: PPUSH
52390: CALL 42287 0 1
52394: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
52395: LD_ADDR_EXP 39
52399: PUSH
52400: LD_EXP 39
52404: PPUSH
52405: LD_VAR 0 6
52409: PPUSH
52410: LD_EXP 39
52414: PUSH
52415: LD_VAR 0 6
52419: ARRAY
52420: PPUSH
52421: LD_INT 3
52423: PPUSH
52424: LD_VAR 0 7
52428: PPUSH
52429: CALL_OW 1
52433: PPUSH
52434: CALL_OW 1
52438: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52439: LD_VAR 0 1
52443: PPUSH
52444: LD_VAR 0 7
52448: PPUSH
52449: CALL_OW 505
// if value = 0 then
52453: LD_VAR 0 7
52457: PUSH
52458: LD_INT 0
52460: EQUAL
52461: IFFALSE 52510
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
52463: LD_EXP 39
52467: PUSH
52468: LD_VAR 0 6
52472: ARRAY
52473: PUSH
52474: LD_INT 1
52476: ARRAY
52477: PPUSH
52478: LD_EXP 39
52482: PUSH
52483: LD_VAR 0 6
52487: ARRAY
52488: PUSH
52489: LD_INT 2
52491: ARRAY
52492: PPUSH
52493: CALL_OW 63
// KillUnit ( building ) ;
52497: LD_VAR 0 1
52501: PPUSH
52502: CALL_OW 66
// exit ;
52506: POP
52507: POP
52508: GO 52514
// end ; end ; end ;
52510: GO 52315
52512: POP
52513: POP
// end ;
52514: LD_VAR 0 5
52518: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
52519: LD_INT 0
52521: PPUSH
52522: PPUSH
52523: PPUSH
// if mpGameType <> GameTypeFamine then
52524: LD_EXP 1
52528: PUSH
52529: LD_INT 5
52531: NONEQUAL
52532: IFFALSE 52536
// exit ;
52534: GO 52750
// for i := 1 to mpGlobalSibDeposits do
52536: LD_ADDR_VAR 0 6
52540: PUSH
52541: DOUBLE
52542: LD_INT 1
52544: DEC
52545: ST_TO_ADDR
52546: LD_EXP 40
52550: PUSH
52551: FOR_TO
52552: IFFALSE 52748
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
52554: LD_EXP 40
52558: PUSH
52559: LD_VAR 0 6
52563: ARRAY
52564: PUSH
52565: LD_INT 1
52567: ARRAY
52568: PPUSH
52569: LD_EXP 40
52573: PUSH
52574: LD_VAR 0 6
52578: ARRAY
52579: PUSH
52580: LD_INT 2
52582: ARRAY
52583: PPUSH
52584: CALL_OW 428
52588: PUSH
52589: LD_VAR 0 1
52593: EQUAL
52594: IFFALSE 52746
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
52596: LD_ADDR_VAR 0 7
52600: PUSH
52601: LD_EXP 40
52605: PUSH
52606: LD_VAR 0 6
52610: ARRAY
52611: PUSH
52612: LD_INT 3
52614: ARRAY
52615: ST_TO_ADDR
// value := Dec ( value ) ;
52616: LD_ADDR_VAR 0 7
52620: PUSH
52621: LD_VAR 0 7
52625: PPUSH
52626: CALL 42287 0 1
52630: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
52631: LD_ADDR_EXP 40
52635: PUSH
52636: LD_EXP 40
52640: PPUSH
52641: LD_VAR 0 6
52645: PPUSH
52646: LD_EXP 40
52650: PUSH
52651: LD_VAR 0 6
52655: ARRAY
52656: PPUSH
52657: LD_INT 3
52659: PPUSH
52660: LD_VAR 0 7
52664: PPUSH
52665: CALL_OW 1
52669: PPUSH
52670: CALL_OW 1
52674: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52675: LD_VAR 0 1
52679: PPUSH
52680: LD_VAR 0 7
52684: PPUSH
52685: CALL_OW 505
// if value = 0 then
52689: LD_VAR 0 7
52693: PUSH
52694: LD_INT 0
52696: EQUAL
52697: IFFALSE 52746
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
52699: LD_EXP 40
52703: PUSH
52704: LD_VAR 0 6
52708: ARRAY
52709: PUSH
52710: LD_INT 1
52712: ARRAY
52713: PPUSH
52714: LD_EXP 40
52718: PUSH
52719: LD_VAR 0 6
52723: ARRAY
52724: PUSH
52725: LD_INT 2
52727: ARRAY
52728: PPUSH
52729: CALL_OW 63
// KillUnit ( building ) ;
52733: LD_VAR 0 1
52737: PPUSH
52738: CALL_OW 66
// exit ;
52742: POP
52743: POP
52744: GO 52750
// end ; end ; end ;
52746: GO 52551
52748: POP
52749: POP
// end ; end_of_file
52750: LD_VAR 0 5
52754: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
52755: LD_EXP 37
52759: IFFALSE 52767
52761: PUSH
52762: CALL 52977 0 0
52766: AND
52767: IFFALSE 52775
52769: PUSH
52770: LD_OWVAR 4
52774: AND
52775: IFFALSE 52974
52777: GO 52779
52779: DISABLE
52780: LD_INT 0
52782: PPUSH
52783: PPUSH
// begin canWin := false ;
52784: LD_ADDR_VAR 0 2
52788: PUSH
52789: LD_INT 0
52791: ST_TO_ADDR
// if not HasPower ( your_side ) then
52792: LD_OWVAR 2
52796: PPUSH
52797: CALL 53019 0 1
52801: NOT
52802: IFFALSE 52813
// begin Multiplayer_Loose_Message ;
52804: CALL_OW 521
// enable ( mpLose ) ;
52808: LD_INT 102
52810: ENABLE_MARKED
// end else
52811: GO 52974
// begin canWin := true ;
52813: LD_ADDR_VAR 0 2
52817: PUSH
52818: LD_INT 1
52820: ST_TO_ADDR
// for i := 1 to 8 do
52821: LD_ADDR_VAR 0 1
52825: PUSH
52826: DOUBLE
52827: LD_INT 1
52829: DEC
52830: ST_TO_ADDR
52831: LD_INT 8
52833: PUSH
52834: FOR_TO
52835: IFFALSE 52960
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
52837: LD_EXP 5
52841: PUSH
52842: LD_VAR 0 1
52846: ARRAY
52847: IFFALSE 52860
52849: PUSH
52850: LD_VAR 0 1
52854: PPUSH
52855: CALL_OW 108
52859: AND
52860: IFFALSE 52874
52862: PUSH
52863: LD_VAR 0 1
52867: PUSH
52868: LD_OWVAR 2
52872: NONEQUAL
52873: AND
52874: IFFALSE 52958
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
52876: LD_EXP 6
52880: PUSH
52881: LD_VAR 0 1
52885: ARRAY
52886: NOT
52887: IFTRUE 52935
52889: PUSH
52890: LD_EXP 6
52894: PUSH
52895: LD_VAR 0 1
52899: ARRAY
52900: PUSH
52901: LD_EXP 6
52905: PUSH
52906: LD_OWVAR 2
52910: ARRAY
52911: NONEQUAL
52912: IFFALSE 52934
52914: PUSH
52915: LD_OWVAR 2
52919: PPUSH
52920: LD_VAR 0 1
52924: PPUSH
52925: CALL_OW 81
52929: PUSH
52930: LD_INT 1
52932: NONEQUAL
52933: AND
52934: OR
52935: IFFALSE 52958
// if HasPower ( i ) then
52937: LD_VAR 0 1
52941: PPUSH
52942: CALL 53019 0 1
52946: IFFALSE 52958
// begin canWin := false ;
52948: LD_ADDR_VAR 0 2
52952: PUSH
52953: LD_INT 0
52955: ST_TO_ADDR
// break ;
52956: GO 52960
// end ;
52958: GO 52834
52960: POP
52961: POP
// if canWin then
52962: LD_VAR 0 2
52966: IFFALSE 52973
// enable ( mpWin ) else
52968: LD_INT 101
52970: ENABLE_MARKED
52971: GO 52974
// enable ;
52973: ENABLE
// end ; end ;
52974: PPOPN 2
52976: END
// function CanWinLoose ; begin
52977: LD_INT 0
52979: PPUSH
// result := true ;
52980: LD_ADDR_VAR 0 1
52984: PUSH
52985: LD_INT 1
52987: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
52988: CALL_OW 531
52992: IFFALSE 53004
52994: PUSH
52995: CALL_OW 519
52999: PUSH
53000: LD_INT 1
53002: GREATER
53003: AND
53004: IFFALSE 53014
// result := false ;
53006: LD_ADDR_VAR 0 1
53010: PUSH
53011: LD_INT 0
53013: ST_TO_ADDR
// end ;
53014: LD_VAR 0 1
53018: RET
// function HasPower ( i ) ; begin
53019: LD_INT 0
53021: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53022: LD_ADDR_VAR 0 2
53026: PUSH
53027: LD_INT 22
53029: PUSH
53030: LD_VAR 0 1
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 2
53041: PUSH
53042: LD_INT 21
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 33
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 33
53064: PUSH
53065: LD_INT 5
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PPUSH
53082: CALL_OW 69
53086: ST_TO_ADDR
// end ; end_of_file
53087: LD_VAR 0 2
53091: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
53092: LD_EXP 37
53096: IFFALSE 53139
53098: GO 53100
53100: DISABLE
53101: LD_INT 0
53103: PPUSH
// begin for i := 1 to 8 do
53104: LD_ADDR_VAR 0 1
53108: PUSH
53109: DOUBLE
53110: LD_INT 1
53112: DEC
53113: ST_TO_ADDR
53114: LD_INT 8
53116: PUSH
53117: FOR_TO
53118: IFFALSE 53137
// SetRestrict ( b_depot , i , state_disabled ) ;
53120: LD_INT 0
53122: PPUSH
53123: LD_VAR 0 1
53127: PPUSH
53128: LD_INT 0
53130: PPUSH
53131: CALL_OW 324
53135: GO 53117
53137: POP
53138: POP
// end ;
53139: PPOPN 1
53141: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
53142: LD_EXP 37
53146: IFFALSE 53154
53148: PUSH
53149: CALL 53364 0 0
53153: AND
53154: IFFALSE 53162
53156: PUSH
53157: LD_OWVAR 4
53161: AND
53162: IFFALSE 53361
53164: GO 53166
53166: DISABLE
53167: LD_INT 0
53169: PPUSH
53170: PPUSH
// begin canWin := false ;
53171: LD_ADDR_VAR 0 2
53175: PUSH
53176: LD_INT 0
53178: ST_TO_ADDR
// if not HasPower ( your_side ) then
53179: LD_OWVAR 2
53183: PPUSH
53184: CALL 53406 0 1
53188: NOT
53189: IFFALSE 53200
// begin Multiplayer_Loose_Message ;
53191: CALL_OW 521
// enable ( mpLose ) ;
53195: LD_INT 102
53197: ENABLE_MARKED
// end else
53198: GO 53361
// begin canWin := true ;
53200: LD_ADDR_VAR 0 2
53204: PUSH
53205: LD_INT 1
53207: ST_TO_ADDR
// for i := 1 to 8 do
53208: LD_ADDR_VAR 0 1
53212: PUSH
53213: DOUBLE
53214: LD_INT 1
53216: DEC
53217: ST_TO_ADDR
53218: LD_INT 8
53220: PUSH
53221: FOR_TO
53222: IFFALSE 53347
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53224: LD_EXP 5
53228: PUSH
53229: LD_VAR 0 1
53233: ARRAY
53234: IFFALSE 53247
53236: PUSH
53237: LD_VAR 0 1
53241: PPUSH
53242: CALL_OW 108
53246: AND
53247: IFFALSE 53261
53249: PUSH
53250: LD_VAR 0 1
53254: PUSH
53255: LD_OWVAR 2
53259: NONEQUAL
53260: AND
53261: IFFALSE 53345
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53263: LD_EXP 6
53267: PUSH
53268: LD_VAR 0 1
53272: ARRAY
53273: NOT
53274: IFTRUE 53322
53276: PUSH
53277: LD_EXP 6
53281: PUSH
53282: LD_VAR 0 1
53286: ARRAY
53287: PUSH
53288: LD_EXP 6
53292: PUSH
53293: LD_OWVAR 2
53297: ARRAY
53298: NONEQUAL
53299: IFFALSE 53321
53301: PUSH
53302: LD_OWVAR 2
53306: PPUSH
53307: LD_VAR 0 1
53311: PPUSH
53312: CALL_OW 81
53316: PUSH
53317: LD_INT 1
53319: NONEQUAL
53320: AND
53321: OR
53322: IFFALSE 53345
// if HasPower ( i ) then
53324: LD_VAR 0 1
53328: PPUSH
53329: CALL 53406 0 1
53333: IFFALSE 53345
// begin canWin := false ;
53335: LD_ADDR_VAR 0 2
53339: PUSH
53340: LD_INT 0
53342: ST_TO_ADDR
// break ;
53343: GO 53347
// end ;
53345: GO 53221
53347: POP
53348: POP
// if canWin then
53349: LD_VAR 0 2
53353: IFFALSE 53360
// enable ( mpWin ) else
53355: LD_INT 101
53357: ENABLE_MARKED
53358: GO 53361
// enable ;
53360: ENABLE
// end ; end ;
53361: PPOPN 2
53363: END
// function CanWinLoose ; begin
53364: LD_INT 0
53366: PPUSH
// result := true ;
53367: LD_ADDR_VAR 0 1
53371: PUSH
53372: LD_INT 1
53374: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53375: CALL_OW 531
53379: IFFALSE 53391
53381: PUSH
53382: CALL_OW 519
53386: PUSH
53387: LD_INT 1
53389: GREATER
53390: AND
53391: IFFALSE 53401
// result := false ;
53393: LD_ADDR_VAR 0 1
53397: PUSH
53398: LD_INT 0
53400: ST_TO_ADDR
// end ;
53401: LD_VAR 0 1
53405: RET
// function HasPower ( i ) ; begin
53406: LD_INT 0
53408: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
53409: LD_INT 22
53411: PUSH
53412: LD_VAR 0 1
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: LD_INT 30
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 30
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: LIST
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PPUSH
53453: CALL_OW 69
53457: NOT
53458: IFFALSE 53462
// exit ;
53460: GO 53527
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53462: LD_ADDR_VAR 0 2
53466: PUSH
53467: LD_INT 22
53469: PUSH
53470: LD_VAR 0 1
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: LD_INT 21
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 33
53494: PUSH
53495: LD_INT 3
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 33
53504: PUSH
53505: LD_INT 5
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PPUSH
53522: CALL_OW 69
53526: ST_TO_ADDR
// end ; end_of_file
53527: LD_VAR 0 2
53531: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
53532: LD_EXP 37
53536: IFFALSE 53875
53538: GO 53540
53540: DISABLE
53541: LD_INT 0
53543: PPUSH
53544: PPUSH
53545: PPUSH
// begin mpKingPoints := [ ] ;
53546: LD_ADDR_EXP 46
53550: PUSH
53551: EMPTY
53552: ST_TO_ADDR
// if mpTeamGame then
53553: LD_EXP 9
53557: IFFALSE 53611
// begin for i := 1 to Count ( mpTeams ) do
53559: LD_ADDR_VAR 0 1
53563: PUSH
53564: DOUBLE
53565: LD_INT 1
53567: DEC
53568: ST_TO_ADDR
53569: LD_EXP 8
53573: PPUSH
53574: CALL 4960 0 1
53578: PUSH
53579: FOR_TO
53580: IFFALSE 53607
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
53582: LD_ADDR_EXP 46
53586: PUSH
53587: LD_EXP 46
53591: PPUSH
53592: LD_VAR 0 1
53596: PPUSH
53597: LD_INT 0
53599: PPUSH
53600: CALL_OW 1
53604: ST_TO_ADDR
53605: GO 53579
53607: POP
53608: POP
// end else
53609: GO 53654
// begin for i := 1 to 8 do
53611: LD_ADDR_VAR 0 1
53615: PUSH
53616: DOUBLE
53617: LD_INT 1
53619: DEC
53620: ST_TO_ADDR
53621: LD_INT 8
53623: PUSH
53624: FOR_TO
53625: IFFALSE 53652
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
53627: LD_ADDR_EXP 46
53631: PUSH
53632: LD_EXP 46
53636: PPUSH
53637: LD_VAR 0 1
53641: PPUSH
53642: LD_INT 0
53644: PPUSH
53645: CALL_OW 1
53649: ST_TO_ADDR
53650: GO 53624
53652: POP
53653: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
53654: LD_ADDR_VAR 0 3
53658: PUSH
53659: LD_INT 51
53661: PPUSH
53662: LD_INT 0
53664: PPUSH
53665: CALL_OW 517
53669: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53670: LD_ADDR_VAR 0 1
53674: PUSH
53675: DOUBLE
53676: LD_INT 1
53678: DEC
53679: ST_TO_ADDR
53680: LD_VAR 0 3
53684: PUSH
53685: LD_INT 1
53687: ARRAY
53688: PUSH
53689: FOR_TO
53690: IFFALSE 53757
// for j := 1 to 8 do
53692: LD_ADDR_VAR 0 2
53696: PUSH
53697: DOUBLE
53698: LD_INT 1
53700: DEC
53701: ST_TO_ADDR
53702: LD_INT 8
53704: PUSH
53705: FOR_TO
53706: IFFALSE 53753
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
53708: LD_VAR 0 3
53712: PUSH
53713: LD_INT 1
53715: ARRAY
53716: PUSH
53717: LD_VAR 0 1
53721: ARRAY
53722: PPUSH
53723: LD_VAR 0 3
53727: PUSH
53728: LD_INT 2
53730: ARRAY
53731: PUSH
53732: LD_VAR 0 1
53736: ARRAY
53737: PPUSH
53738: LD_VAR 0 2
53742: PPUSH
53743: LD_INT 12
53745: NEG
53746: PPUSH
53747: CALL_OW 330
53751: GO 53705
53753: POP
53754: POP
53755: GO 53689
53757: POP
53758: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
53759: LD_EXP 32
53763: PPUSH
53764: LD_INT 1
53766: PPUSH
53767: CALL_OW 424
// UpdateCounter ;
53771: CALL 54379 0 0
// repeat wait ( 0 0$1 ) ;
53775: LD_INT 35
53777: PPUSH
53778: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53782: LD_ADDR_VAR 0 3
53786: PUSH
53787: LD_EXP 32
53791: PPUSH
53792: LD_INT 3
53794: PUSH
53795: LD_INT 57
53797: PUSH
53798: EMPTY
53799: LIST
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 50
53807: PUSH
53808: EMPTY
53809: LIST
53810: PUSH
53811: LD_INT 2
53813: PUSH
53814: LD_INT 30
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 30
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: LIST
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: LIST
53843: PPUSH
53844: CALL_OW 70
53848: ST_TO_ADDR
// if not tmp then
53849: LD_VAR 0 3
53853: NOT
53854: IFFALSE 53858
// continue ;
53856: GO 53775
// AddPoints ( tmp ) ;
53858: LD_VAR 0 3
53862: PPUSH
53863: CALL 54057 0 1
// UpdateCounter ;
53867: CALL 54379 0 0
// until false ;
53871: LD_INT 0
53873: IFFALSE 53775
// end ;
53875: PPOPN 3
53877: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
53878: LD_EXP 37
53882: IFFALSE 53890
53884: PUSH
53885: LD_EXP 35
53889: AND
53890: IFFALSE 54054
53892: GO 53894
53894: DISABLE
53895: LD_INT 0
53897: PPUSH
53898: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
53899: LD_ADDR_VAR 0 2
53903: PUSH
53904: LD_INT 51
53906: PPUSH
53907: LD_INT 0
53909: PPUSH
53910: CALL_OW 517
53914: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53915: LD_ADDR_VAR 0 1
53919: PUSH
53920: DOUBLE
53921: LD_INT 1
53923: DEC
53924: ST_TO_ADDR
53925: LD_VAR 0 2
53929: PUSH
53930: LD_INT 1
53932: ARRAY
53933: PUSH
53934: FOR_TO
53935: IFFALSE 53976
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
53937: LD_VAR 0 2
53941: PUSH
53942: LD_INT 1
53944: ARRAY
53945: PUSH
53946: LD_VAR 0 1
53950: ARRAY
53951: PPUSH
53952: LD_VAR 0 2
53956: PUSH
53957: LD_INT 2
53959: ARRAY
53960: PUSH
53961: LD_VAR 0 1
53965: ARRAY
53966: PPUSH
53967: LD_INT 125
53969: PPUSH
53970: CALL_OW 495
53974: GO 53934
53976: POP
53977: POP
// repeat wait ( mpEmissions ) ;
53978: LD_EXP 35
53982: PPUSH
53983: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
53987: LD_ADDR_VAR 0 1
53991: PUSH
53992: DOUBLE
53993: LD_INT 1
53995: DEC
53996: ST_TO_ADDR
53997: LD_VAR 0 2
54001: PUSH
54002: LD_INT 1
54004: ARRAY
54005: PUSH
54006: FOR_TO
54007: IFFALSE 54048
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
54009: LD_VAR 0 2
54013: PUSH
54014: LD_INT 1
54016: ARRAY
54017: PUSH
54018: LD_VAR 0 1
54022: ARRAY
54023: PPUSH
54024: LD_VAR 0 2
54028: PUSH
54029: LD_INT 2
54031: ARRAY
54032: PUSH
54033: LD_VAR 0 1
54037: ARRAY
54038: PPUSH
54039: LD_INT 15
54041: PPUSH
54042: CALL_OW 495
54046: GO 54006
54048: POP
54049: POP
// until false ;
54050: LD_INT 0
54052: IFFALSE 53978
// end ;
54054: PPOPN 2
54056: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
54057: LD_INT 0
54059: PPUSH
54060: PPUSH
54061: PPUSH
54062: PPUSH
54063: PPUSH
// if mpTeamGame then
54064: LD_EXP 9
54068: IFFALSE 54265
// begin first := depots [ 1 ] ;
54070: LD_ADDR_VAR 0 4
54074: PUSH
54075: LD_VAR 0 1
54079: PUSH
54080: LD_INT 1
54082: ARRAY
54083: ST_TO_ADDR
// side := GetSide ( first ) ;
54084: LD_ADDR_VAR 0 6
54088: PUSH
54089: LD_VAR 0 4
54093: PPUSH
54094: CALL_OW 255
54098: ST_TO_ADDR
// for i := 1 to mpTeams do
54099: LD_ADDR_VAR 0 3
54103: PUSH
54104: DOUBLE
54105: LD_INT 1
54107: DEC
54108: ST_TO_ADDR
54109: LD_EXP 8
54113: PUSH
54114: FOR_TO
54115: IFFALSE 54149
// if side in mpTeams [ i ] then
54117: LD_VAR 0 6
54121: PUSH
54122: LD_EXP 8
54126: PUSH
54127: LD_VAR 0 3
54131: ARRAY
54132: IN
54133: IFFALSE 54147
// begin team := i ;
54135: LD_ADDR_VAR 0 5
54139: PUSH
54140: LD_VAR 0 3
54144: ST_TO_ADDR
// break ;
54145: GO 54149
// end ;
54147: GO 54114
54149: POP
54150: POP
// if not team then
54151: LD_VAR 0 5
54155: NOT
54156: IFFALSE 54160
// exit ;
54158: GO 54374
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54160: LD_EXP 32
54164: PPUSH
54165: LD_INT 81
54167: PUSH
54168: LD_VAR 0 6
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PPUSH
54177: CALL_OW 70
54181: IFFALSE 54185
// exit ;
54183: GO 54374
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
54185: LD_ADDR_EXP 46
54189: PUSH
54190: LD_EXP 46
54194: PPUSH
54195: LD_VAR 0 5
54199: PPUSH
54200: LD_EXP 46
54204: PUSH
54205: LD_VAR 0 5
54209: ARRAY
54210: PUSH
54211: LD_INT 1
54213: PLUS
54214: PPUSH
54215: CALL_OW 1
54219: ST_TO_ADDR
// for i in mpTeams [ team ] do
54220: LD_ADDR_VAR 0 3
54224: PUSH
54225: LD_EXP 8
54229: PUSH
54230: LD_VAR 0 5
54234: ARRAY
54235: PUSH
54236: FOR_IN
54237: IFFALSE 54261
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
54239: LD_VAR 0 3
54243: PPUSH
54244: LD_EXP 46
54248: PUSH
54249: LD_VAR 0 5
54253: ARRAY
54254: PPUSH
54255: CALL_OW 506
54259: GO 54236
54261: POP
54262: POP
// end else
54263: GO 54374
// begin first := depots [ 1 ] ;
54265: LD_ADDR_VAR 0 4
54269: PUSH
54270: LD_VAR 0 1
54274: PUSH
54275: LD_INT 1
54277: ARRAY
54278: ST_TO_ADDR
// side := GetSide ( first ) ;
54279: LD_ADDR_VAR 0 6
54283: PUSH
54284: LD_VAR 0 4
54288: PPUSH
54289: CALL_OW 255
54293: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54294: LD_EXP 32
54298: PPUSH
54299: LD_INT 81
54301: PUSH
54302: LD_VAR 0 6
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PPUSH
54311: CALL_OW 70
54315: IFFALSE 54319
// exit ;
54317: GO 54374
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
54319: LD_ADDR_EXP 46
54323: PUSH
54324: LD_EXP 46
54328: PPUSH
54329: LD_VAR 0 6
54333: PPUSH
54334: LD_EXP 46
54338: PUSH
54339: LD_VAR 0 6
54343: ARRAY
54344: PUSH
54345: LD_INT 1
54347: PLUS
54348: PPUSH
54349: CALL_OW 1
54353: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
54354: LD_VAR 0 6
54358: PPUSH
54359: LD_EXP 46
54363: PUSH
54364: LD_VAR 0 6
54368: ARRAY
54369: PPUSH
54370: CALL_OW 506
// end ; end ;
54374: LD_VAR 0 2
54378: RET
// function UpdateCounter ; var i ; begin
54379: LD_INT 0
54381: PPUSH
54382: PPUSH
// result := [ ] ;
54383: LD_ADDR_VAR 0 1
54387: PUSH
54388: EMPTY
54389: ST_TO_ADDR
// if mpTeamGame then
54390: LD_EXP 9
54394: IFFALSE 54461
// begin for i := 1 to mpTeams do
54396: LD_ADDR_VAR 0 2
54400: PUSH
54401: DOUBLE
54402: LD_INT 1
54404: DEC
54405: ST_TO_ADDR
54406: LD_EXP 8
54410: PUSH
54411: FOR_TO
54412: IFFALSE 54457
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
54414: LD_ADDR_VAR 0 1
54418: PUSH
54419: LD_VAR 0 1
54423: PUSH
54424: LD_STRING #KingoftheHill-Team
54426: PUSH
54427: LD_VAR 0 2
54431: PUSH
54432: LD_EXP 46
54436: PUSH
54437: LD_VAR 0 2
54441: ARRAY
54442: PUSH
54443: LD_EXP 33
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: ADD
54454: ST_TO_ADDR
54455: GO 54411
54457: POP
54458: POP
// end else
54459: GO 54534
// begin for i := 1 to 8 do
54461: LD_ADDR_VAR 0 2
54465: PUSH
54466: DOUBLE
54467: LD_INT 1
54469: DEC
54470: ST_TO_ADDR
54471: LD_INT 8
54473: PUSH
54474: FOR_TO
54475: IFFALSE 54532
// if mpSidePositions [ i ] then
54477: LD_EXP 5
54481: PUSH
54482: LD_VAR 0 2
54486: ARRAY
54487: IFFALSE 54530
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
54489: LD_ADDR_VAR 0 1
54493: PUSH
54494: LD_VAR 0 1
54498: PUSH
54499: LD_STRING #KingoftheHill-Player
54501: PUSH
54502: LD_VAR 0 2
54506: PUSH
54507: LD_EXP 46
54511: PUSH
54512: LD_VAR 0 2
54516: ARRAY
54517: PUSH
54518: LD_EXP 33
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: ADD
54529: ST_TO_ADDR
54530: GO 54474
54532: POP
54533: POP
// end ; mpDisplayStrings := result ;
54534: LD_ADDR_EXP 36
54538: PUSH
54539: LD_VAR 0 1
54543: ST_TO_ADDR
// end ;
54544: LD_VAR 0 1
54548: RET
// export function HowMuchPointsKing ( side ) ; begin
54549: LD_INT 0
54551: PPUSH
// result := HowMuchPoints ( side ) ;
54552: LD_ADDR_VAR 0 2
54556: PUSH
54557: LD_VAR 0 1
54561: PPUSH
54562: CALL 54572 0 1
54566: ST_TO_ADDR
// end ;
54567: LD_VAR 0 2
54571: RET
// function HowMuchPoints ( side ) ; var i ; begin
54572: LD_INT 0
54574: PPUSH
54575: PPUSH
// if mpTeamGame then
54576: LD_EXP 9
54580: IFFALSE 54649
// begin for i := 1 to Count ( mpTeams ) do
54582: LD_ADDR_VAR 0 3
54586: PUSH
54587: DOUBLE
54588: LD_INT 1
54590: DEC
54591: ST_TO_ADDR
54592: LD_EXP 8
54596: PPUSH
54597: CALL 4960 0 1
54601: PUSH
54602: FOR_TO
54603: IFFALSE 54645
// begin if side in mpTeams [ i ] then
54605: LD_VAR 0 1
54609: PUSH
54610: LD_EXP 8
54614: PUSH
54615: LD_VAR 0 3
54619: ARRAY
54620: IN
54621: IFFALSE 54643
// begin result := mpKingPoints [ i ] ;
54623: LD_ADDR_VAR 0 2
54627: PUSH
54628: LD_EXP 46
54632: PUSH
54633: LD_VAR 0 3
54637: ARRAY
54638: ST_TO_ADDR
// exit ;
54639: POP
54640: POP
54641: GO 54665
// end ; end ;
54643: GO 54602
54645: POP
54646: POP
// end else
54647: GO 54665
// result := mpKingPoints [ side ] ;
54649: LD_ADDR_VAR 0 2
54653: PUSH
54654: LD_EXP 46
54658: PUSH
54659: LD_VAR 0 1
54663: ARRAY
54664: ST_TO_ADDR
// end ;
54665: LD_VAR 0 2
54669: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
54670: LD_EXP 37
54674: IFFALSE 54682
54676: PUSH
54677: CALL 55017 0 0
54681: AND
54682: IFFALSE 54690
54684: PUSH
54685: LD_OWVAR 4
54689: AND
54690: IFFALSE 54940
54692: GO 54694
54694: DISABLE
54695: LD_INT 0
54697: PPUSH
54698: PPUSH
// begin canWin := false ;
54699: LD_ADDR_VAR 0 2
54703: PUSH
54704: LD_INT 0
54706: ST_TO_ADDR
// if not HasPower ( your_side ) then
54707: LD_OWVAR 2
54711: PPUSH
54712: CALL 55059 0 1
54716: NOT
54717: IFFALSE 54728
// begin Multiplayer_Loose_Message ;
54719: CALL_OW 521
// enable ( mpLose ) ;
54723: LD_INT 102
54725: ENABLE_MARKED
// end else
54726: GO 54940
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
54728: LD_ADDR_VAR 0 2
54732: PUSH
54733: LD_OWVAR 2
54737: PPUSH
54738: CALL 54572 0 1
54742: PUSH
54743: LD_EXP 33
54747: GREATEREQUAL
54748: IFFALSE 54761
54750: PUSH
54751: LD_OWVAR 2
54755: PPUSH
54756: CALL 55059 0 1
54760: AND
54761: IFTRUE 54770
54763: PUSH
54764: CALL 54943 0 0
54768: NOT
54769: OR
54770: ST_TO_ADDR
// for i := 1 to 8 do
54771: LD_ADDR_VAR 0 1
54775: PUSH
54776: DOUBLE
54777: LD_INT 1
54779: DEC
54780: ST_TO_ADDR
54781: LD_INT 8
54783: PUSH
54784: FOR_TO
54785: IFFALSE 54926
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54787: LD_EXP 5
54791: PUSH
54792: LD_VAR 0 1
54796: ARRAY
54797: IFFALSE 54810
54799: PUSH
54800: LD_VAR 0 1
54804: PPUSH
54805: CALL_OW 108
54809: AND
54810: IFFALSE 54824
54812: PUSH
54813: LD_VAR 0 1
54817: PUSH
54818: LD_OWVAR 2
54822: NONEQUAL
54823: AND
54824: IFFALSE 54924
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54826: LD_EXP 6
54830: PUSH
54831: LD_VAR 0 1
54835: ARRAY
54836: NOT
54837: IFTRUE 54885
54839: PUSH
54840: LD_EXP 6
54844: PUSH
54845: LD_VAR 0 1
54849: ARRAY
54850: PUSH
54851: LD_EXP 6
54855: PUSH
54856: LD_OWVAR 2
54860: ARRAY
54861: NONEQUAL
54862: IFFALSE 54884
54864: PUSH
54865: LD_OWVAR 2
54869: PPUSH
54870: LD_VAR 0 1
54874: PPUSH
54875: CALL_OW 81
54879: PUSH
54880: LD_INT 1
54882: NONEQUAL
54883: AND
54884: OR
54885: IFFALSE 54924
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
54887: LD_VAR 0 1
54891: PPUSH
54892: CALL 54572 0 1
54896: PUSH
54897: LD_EXP 33
54901: GREATEREQUAL
54902: IFFALSE 54915
54904: PUSH
54905: LD_VAR 0 1
54909: PPUSH
54910: CALL 55059 0 1
54914: AND
54915: IFFALSE 54924
// begin enable ( mpLose ) ;
54917: LD_INT 102
54919: ENABLE_MARKED
// exit ;
54920: POP
54921: POP
54922: GO 54940
// end ;
54924: GO 54784
54926: POP
54927: POP
// if canWin then
54928: LD_VAR 0 2
54932: IFFALSE 54939
// enable ( mpWin ) else
54934: LD_INT 101
54936: ENABLE_MARKED
54937: GO 54940
// enable ;
54939: ENABLE
// end ; end ;
54940: PPOPN 2
54942: END
// function EnemiesInGame ; var i ; begin
54943: LD_INT 0
54945: PPUSH
54946: PPUSH
// result := false ;
54947: LD_ADDR_VAR 0 1
54951: PUSH
54952: LD_INT 0
54954: ST_TO_ADDR
// for i := 1 to 8 do
54955: LD_ADDR_VAR 0 2
54959: PUSH
54960: DOUBLE
54961: LD_INT 1
54963: DEC
54964: ST_TO_ADDR
54965: LD_INT 8
54967: PUSH
54968: FOR_TO
54969: IFFALSE 55010
// if i <> your_side and HasPower ( i ) then
54971: LD_VAR 0 2
54975: PUSH
54976: LD_OWVAR 2
54980: NONEQUAL
54981: IFFALSE 54994
54983: PUSH
54984: LD_VAR 0 2
54988: PPUSH
54989: CALL 55059 0 1
54993: AND
54994: IFFALSE 55008
// begin result := true ;
54996: LD_ADDR_VAR 0 1
55000: PUSH
55001: LD_INT 1
55003: ST_TO_ADDR
// exit ;
55004: POP
55005: POP
55006: GO 55012
// end ;
55008: GO 54968
55010: POP
55011: POP
// end ;
55012: LD_VAR 0 1
55016: RET
// function CanWinLoose ; begin
55017: LD_INT 0
55019: PPUSH
// result := true ;
55020: LD_ADDR_VAR 0 1
55024: PUSH
55025: LD_INT 1
55027: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55028: CALL_OW 531
55032: IFFALSE 55044
55034: PUSH
55035: CALL_OW 519
55039: PUSH
55040: LD_INT 1
55042: GREATER
55043: AND
55044: IFFALSE 55054
// result := false ;
55046: LD_ADDR_VAR 0 1
55050: PUSH
55051: LD_INT 0
55053: ST_TO_ADDR
// end ;
55054: LD_VAR 0 1
55058: RET
// function HasPower ( i ) ; begin
55059: LD_INT 0
55061: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55062: LD_ADDR_VAR 0 2
55066: PUSH
55067: LD_INT 22
55069: PUSH
55070: LD_VAR 0 1
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: LD_INT 21
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 33
55094: PUSH
55095: LD_INT 3
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 33
55104: PUSH
55105: LD_INT 5
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PPUSH
55122: CALL_OW 69
55126: ST_TO_ADDR
// end ; end_of_file
55127: LD_VAR 0 2
55131: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55132: LD_VAR 0 1
55136: PUSH
55137: LD_INT 200
55139: DOUBLE
55140: GREATEREQUAL
55141: IFFALSE 55149
55143: LD_INT 299
55145: DOUBLE
55146: LESSEQUAL
55147: IFTRUE 55151
55149: GO 55183
55151: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55152: LD_VAR 0 1
55156: PPUSH
55157: LD_VAR 0 2
55161: PPUSH
55162: LD_VAR 0 3
55166: PPUSH
55167: LD_VAR 0 4
55171: PPUSH
55172: LD_VAR 0 5
55176: PPUSH
55177: CALL 55964 0 5
55181: GO 55260
55183: LD_INT 300
55185: DOUBLE
55186: GREATEREQUAL
55187: IFFALSE 55195
55189: LD_INT 399
55191: DOUBLE
55192: LESSEQUAL
55193: IFTRUE 55197
55195: GO 55259
55197: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55198: LD_VAR 0 1
55202: PPUSH
55203: LD_VAR 0 2
55207: PPUSH
55208: LD_VAR 0 3
55212: PPUSH
55213: LD_VAR 0 4
55217: PPUSH
55218: LD_VAR 0 5
55222: PPUSH
55223: LD_VAR 0 6
55227: PPUSH
55228: LD_VAR 0 7
55232: PPUSH
55233: LD_VAR 0 8
55237: PPUSH
55238: LD_VAR 0 9
55242: PPUSH
55243: LD_VAR 0 10
55247: PPUSH
55248: LD_VAR 0 11
55252: PPUSH
55253: CALL 61369 0 11
55257: GO 55260
55259: POP
// end ;
55260: PPOPN 11
55262: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55263: LD_VAR 0 1
55267: PPUSH
55268: LD_VAR 0 2
55272: PPUSH
55273: LD_VAR 0 3
55277: PPUSH
55278: LD_VAR 0 4
55282: PPUSH
55283: LD_VAR 0 5
55287: PPUSH
55288: CALL 55345 0 5
// end ; end_of_file
55292: PPOPN 5
55294: END
// export function SOS_UnitDestroyed ( un ) ; begin
55295: LD_INT 0
55297: PPUSH
// ComRadiation ( un ) ;
55298: LD_VAR 0 1
55302: PPUSH
55303: CALL 56384 0 1
// end ;
55307: LD_VAR 0 2
55311: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55312: LD_INT 0
55314: PPUSH
// ComRadiation ( un ) ;
55315: LD_VAR 0 1
55319: PPUSH
55320: CALL 56384 0 1
// end ;
55324: LD_VAR 0 2
55328: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55329: LD_INT 0
55331: PPUSH
// end ;
55332: LD_VAR 0 4
55336: RET
// export function SOS_Command ( cmd ) ; begin
55337: LD_INT 0
55339: PPUSH
// end ;
55340: LD_VAR 0 2
55344: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55345: LD_INT 0
55347: PPUSH
// end ;
55348: LD_VAR 0 6
55352: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
55353: LD_INT 0
55355: PPUSH
55356: PPUSH
55357: PPUSH
55358: PPUSH
// if not vehicle or not factory then
55359: LD_VAR 0 1
55363: NOT
55364: IFTRUE 55373
55366: PUSH
55367: LD_VAR 0 2
55371: NOT
55372: OR
55373: IFFALSE 55377
// exit ;
55375: GO 55959
// if not factoryWaypoints then
55377: LD_EXP 57
55381: NOT
55382: IFFALSE 55386
// exit ;
55384: GO 55959
// for i := 1 to Count ( factoryWaypoints ) do
55386: LD_ADDR_VAR 0 4
55390: PUSH
55391: DOUBLE
55392: LD_INT 1
55394: DEC
55395: ST_TO_ADDR
55396: LD_EXP 57
55400: PPUSH
55401: CALL 4960 0 1
55405: PUSH
55406: FOR_TO
55407: IFFALSE 55957
// if factoryWaypoints [ i ] [ 2 ] = factory then
55409: LD_EXP 57
55413: PUSH
55414: LD_VAR 0 4
55418: ARRAY
55419: PUSH
55420: LD_INT 2
55422: ARRAY
55423: PUSH
55424: LD_VAR 0 2
55428: EQUAL
55429: IFFALSE 55955
// begin if GetControl ( vehicle ) = control_manual then
55431: LD_VAR 0 1
55435: PPUSH
55436: CALL_OW 263
55440: PUSH
55441: LD_INT 1
55443: EQUAL
55444: IFFALSE 55808
// begin driver := IsDrivenBy ( vehicle ) ;
55446: LD_ADDR_VAR 0 5
55450: PUSH
55451: LD_VAR 0 1
55455: PPUSH
55456: CALL_OW 311
55460: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55461: LD_VAR 0 5
55465: PUSH
55466: LD_EXP 58
55470: IN
55471: IFTRUE 55485
55473: PUSH
55474: LD_VAR 0 1
55478: PUSH
55479: LD_EXP 58
55483: IN
55484: OR
55485: IFFALSE 55491
// exit ;
55487: POP
55488: POP
55489: GO 55959
// if not HasTask ( driver ) then
55491: LD_VAR 0 5
55495: PPUSH
55496: CALL_OW 314
55500: NOT
55501: IFFALSE 55806
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55503: LD_ADDR_EXP 58
55507: PUSH
55508: LD_EXP 58
55512: PPUSH
55513: LD_VAR 0 5
55517: PPUSH
55518: CALL 40892 0 2
55522: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55523: LD_ADDR_EXP 58
55527: PUSH
55528: LD_EXP 58
55532: PPUSH
55533: LD_VAR 0 1
55537: PPUSH
55538: CALL 40892 0 2
55542: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55543: LD_ADDR_VAR 0 6
55547: PUSH
55548: LD_EXP 57
55552: PUSH
55553: LD_VAR 0 4
55557: ARRAY
55558: PUSH
55559: LD_INT 3
55561: ARRAY
55562: PPUSH
55563: LD_EXP 57
55567: PUSH
55568: LD_VAR 0 4
55572: ARRAY
55573: PUSH
55574: LD_INT 4
55576: ARRAY
55577: PPUSH
55578: CALL_OW 428
55582: ST_TO_ADDR
// if hex then
55583: LD_VAR 0 6
55587: IFFALSE 55605
// ComMoveUnit ( driver , hex ) else
55589: LD_VAR 0 5
55593: PPUSH
55594: LD_VAR 0 6
55598: PPUSH
55599: CALL_OW 112
55603: GO 55689
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55605: LD_VAR 0 1
55609: PPUSH
55610: LD_EXP 57
55614: PUSH
55615: LD_VAR 0 4
55619: ARRAY
55620: PUSH
55621: LD_INT 3
55623: ARRAY
55624: PPUSH
55625: LD_EXP 57
55629: PUSH
55630: LD_VAR 0 4
55634: ARRAY
55635: PUSH
55636: LD_INT 4
55638: ARRAY
55639: PPUSH
55640: CALL_OW 297
55644: PUSH
55645: LD_INT 0
55647: GREATER
55648: IFFALSE 55689
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55650: LD_VAR 0 5
55654: PPUSH
55655: LD_EXP 57
55659: PUSH
55660: LD_VAR 0 4
55664: ARRAY
55665: PUSH
55666: LD_INT 3
55668: ARRAY
55669: PPUSH
55670: LD_EXP 57
55674: PUSH
55675: LD_VAR 0 4
55679: ARRAY
55680: PUSH
55681: LD_INT 4
55683: ARRAY
55684: PPUSH
55685: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55689: LD_VAR 0 5
55693: PPUSH
55694: CALL_OW 181
// if Multiplayer then
55698: LD_OWVAR 4
55702: IFFALSE 55751
// begin repeat wait ( 10 ) ;
55704: LD_INT 10
55706: PPUSH
55707: CALL_OW 67
// until not IsInUnit ( driver ) ;
55711: LD_VAR 0 5
55715: PPUSH
55716: CALL_OW 310
55720: NOT
55721: IFFALSE 55704
// if not HasTask ( driver ) then
55723: LD_VAR 0 5
55727: PPUSH
55728: CALL_OW 314
55732: NOT
55733: IFFALSE 55749
// ComEnterUnit ( driver , factory ) ;
55735: LD_VAR 0 5
55739: PPUSH
55740: LD_VAR 0 2
55744: PPUSH
55745: CALL_OW 120
// end else
55749: GO 55765
// AddComEnterUnit ( driver , factory ) ;
55751: LD_VAR 0 5
55755: PPUSH
55756: LD_VAR 0 2
55760: PPUSH
55761: CALL_OW 180
// wait ( 0 0$1 ) ;
55765: LD_INT 35
55767: PPUSH
55768: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55772: LD_ADDR_EXP 58
55776: PUSH
55777: LD_EXP 58
55781: PUSH
55782: LD_VAR 0 5
55786: DIFF
55787: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55788: LD_ADDR_EXP 58
55792: PUSH
55793: LD_EXP 58
55797: PUSH
55798: LD_VAR 0 1
55802: DIFF
55803: ST_TO_ADDR
// break ;
55804: GO 55957
// end ; end else
55806: GO 55955
// if GetControl ( vehicle ) = control_remote then
55808: LD_VAR 0 1
55812: PPUSH
55813: CALL_OW 263
55817: PUSH
55818: LD_INT 2
55820: EQUAL
55821: IFFALSE 55907
// begin wait ( 0 0$2 ) ;
55823: LD_INT 70
55825: PPUSH
55826: CALL_OW 67
// repeat wait ( 10 ) ;
55830: LD_INT 10
55832: PPUSH
55833: CALL_OW 67
// Connect ( vehicle ) ;
55837: LD_VAR 0 1
55841: PPUSH
55842: CALL 11204 0 1
// until IsControledBy ( vehicle ) ;
55846: LD_VAR 0 1
55850: PPUSH
55851: CALL_OW 312
55855: IFFALSE 55830
// wait ( 10 ) ;
55857: LD_INT 10
55859: PPUSH
55860: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55864: LD_VAR 0 1
55868: PPUSH
55869: LD_EXP 57
55873: PUSH
55874: LD_VAR 0 4
55878: ARRAY
55879: PUSH
55880: LD_INT 3
55882: ARRAY
55883: PPUSH
55884: LD_EXP 57
55888: PUSH
55889: LD_VAR 0 4
55893: ARRAY
55894: PUSH
55895: LD_INT 4
55897: ARRAY
55898: PPUSH
55899: CALL_OW 111
// break ;
55903: GO 55957
// end else
55905: GO 55955
// begin wait ( 0 0$3 ) ;
55907: LD_INT 105
55909: PPUSH
55910: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55914: LD_VAR 0 1
55918: PPUSH
55919: LD_EXP 57
55923: PUSH
55924: LD_VAR 0 4
55928: ARRAY
55929: PUSH
55930: LD_INT 3
55932: ARRAY
55933: PPUSH
55934: LD_EXP 57
55938: PUSH
55939: LD_VAR 0 4
55943: ARRAY
55944: PUSH
55945: LD_INT 4
55947: ARRAY
55948: PPUSH
55949: CALL_OW 111
// break ;
55953: GO 55957
// end ; end ;
55955: GO 55406
55957: POP
55958: POP
// end ;
55959: LD_VAR 0 3
55963: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55964: LD_INT 0
55966: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55967: LD_VAR 0 1
55971: PUSH
55972: LD_INT 250
55974: EQUAL
55975: IFFALSE 55992
55977: PUSH
55978: LD_VAR 0 2
55982: PPUSH
55983: CALL_OW 264
55987: PUSH
55988: LD_INT 81
55990: EQUAL
55991: AND
55992: IFFALSE 56013
// MinerPlaceMine ( unit , x , y ) ;
55994: LD_VAR 0 2
55998: PPUSH
55999: LD_VAR 0 4
56003: PPUSH
56004: LD_VAR 0 5
56008: PPUSH
56009: CALL 59145 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56013: LD_VAR 0 1
56017: PUSH
56018: LD_INT 251
56020: EQUAL
56021: IFFALSE 56038
56023: PUSH
56024: LD_VAR 0 2
56028: PPUSH
56029: CALL_OW 264
56033: PUSH
56034: LD_INT 81
56036: EQUAL
56037: AND
56038: IFFALSE 56059
// MinerDetonateMine ( unit , x , y ) ;
56040: LD_VAR 0 2
56044: PPUSH
56045: LD_VAR 0 4
56049: PPUSH
56050: LD_VAR 0 5
56054: PPUSH
56055: CALL 59424 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56059: LD_VAR 0 1
56063: PUSH
56064: LD_INT 252
56066: EQUAL
56067: IFFALSE 56084
56069: PUSH
56070: LD_VAR 0 2
56074: PPUSH
56075: CALL_OW 264
56079: PUSH
56080: LD_INT 81
56082: EQUAL
56083: AND
56084: IFFALSE 56105
// MinerCreateMinefield ( unit , x , y ) ;
56086: LD_VAR 0 2
56090: PPUSH
56091: LD_VAR 0 4
56095: PPUSH
56096: LD_VAR 0 5
56100: PPUSH
56101: CALL 59843 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56105: LD_VAR 0 1
56109: PUSH
56110: LD_INT 253
56112: EQUAL
56113: IFFALSE 56130
56115: PUSH
56116: LD_VAR 0 2
56120: PPUSH
56121: CALL_OW 257
56125: PUSH
56126: LD_INT 5
56128: EQUAL
56129: AND
56130: IFFALSE 56151
// ComBinocular ( unit , x , y ) ;
56132: LD_VAR 0 2
56136: PPUSH
56137: LD_VAR 0 4
56141: PPUSH
56142: LD_VAR 0 5
56146: PPUSH
56147: CALL 60218 0 3
// if selectedUnit then
56151: LD_VAR 0 3
56155: IFFALSE 56215
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56157: LD_VAR 0 1
56161: PUSH
56162: LD_INT 254
56164: EQUAL
56165: IFFALSE 56182
56167: PUSH
56168: LD_VAR 0 2
56172: PPUSH
56173: CALL_OW 264
56177: PUSH
56178: LD_INT 99
56180: EQUAL
56181: AND
56182: IFFALSE 56199
56184: PUSH
56185: LD_VAR 0 3
56189: PPUSH
56190: CALL_OW 263
56194: PUSH
56195: LD_INT 3
56197: EQUAL
56198: AND
56199: IFFALSE 56215
// HackDestroyVehicle ( unit , selectedUnit ) ;
56201: LD_VAR 0 2
56205: PPUSH
56206: LD_VAR 0 3
56210: PPUSH
56211: CALL 58505 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56215: LD_VAR 0 1
56219: PUSH
56220: LD_INT 255
56222: EQUAL
56223: IFFALSE 56247
56225: PUSH
56226: LD_VAR 0 2
56230: PPUSH
56231: CALL_OW 264
56235: PUSH
56236: LD_INT 14
56238: PUSH
56239: LD_INT 53
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: IN
56246: AND
56247: IFFALSE 56265
56249: PUSH
56250: LD_VAR 0 4
56254: PPUSH
56255: LD_VAR 0 5
56259: PPUSH
56260: CALL_OW 488
56264: AND
56265: IFFALSE 56289
// CutTreeXYR ( unit , x , y , 12 ) ;
56267: LD_VAR 0 2
56271: PPUSH
56272: LD_VAR 0 4
56276: PPUSH
56277: LD_VAR 0 5
56281: PPUSH
56282: LD_INT 12
56284: PPUSH
56285: CALL 56480 0 4
// if cmd = 256 then
56289: LD_VAR 0 1
56293: PUSH
56294: LD_INT 256
56296: EQUAL
56297: IFFALSE 56318
// SetFactoryWaypoint ( unit , x , y ) ;
56299: LD_VAR 0 2
56303: PPUSH
56304: LD_VAR 0 4
56308: PPUSH
56309: LD_VAR 0 5
56313: PPUSH
56314: CALL 61377 0 3
// if cmd = 257 then
56318: LD_VAR 0 1
56322: PUSH
56323: LD_INT 257
56325: EQUAL
56326: IFFALSE 56347
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56328: LD_VAR 0 2
56332: PPUSH
56333: LD_VAR 0 4
56337: PPUSH
56338: LD_VAR 0 5
56342: PPUSH
56343: CALL 61873 0 3
// if cmd = 258 then
56347: LD_VAR 0 1
56351: PUSH
56352: LD_INT 258
56354: EQUAL
56355: IFFALSE 56379
// BurnTreeXYR ( unit , x , y , 8 ) ;
56357: LD_VAR 0 2
56361: PPUSH
56362: LD_VAR 0 4
56366: PPUSH
56367: LD_VAR 0 5
56371: PPUSH
56372: LD_INT 8
56374: PPUSH
56375: CALL 56880 0 4
// end ;
56379: LD_VAR 0 6
56383: RET
// export function ComRadiation ( un ) ; var eff ; begin
56384: LD_INT 0
56386: PPUSH
56387: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56388: LD_VAR 0 1
56392: PPUSH
56393: CALL_OW 264
56397: PUSH
56398: LD_INT 91
56400: NONEQUAL
56401: IFFALSE 56405
// exit ;
56403: GO 56475
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56405: LD_INT 68
56407: PPUSH
56408: LD_VAR 0 1
56412: PPUSH
56413: CALL_OW 255
56417: PPUSH
56418: CALL_OW 321
56422: PUSH
56423: LD_INT 2
56425: EQUAL
56426: IFFALSE 56438
// eff := 50 else
56428: LD_ADDR_VAR 0 3
56432: PUSH
56433: LD_INT 50
56435: ST_TO_ADDR
56436: GO 56446
// eff := 25 ;
56438: LD_ADDR_VAR 0 3
56442: PUSH
56443: LD_INT 25
56445: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56446: LD_VAR 0 1
56450: PPUSH
56451: CALL_OW 250
56455: PPUSH
56456: LD_VAR 0 1
56460: PPUSH
56461: CALL_OW 251
56465: PPUSH
56466: LD_VAR 0 3
56470: PPUSH
56471: CALL_OW 495
// end ;
56475: LD_VAR 0 2
56479: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56480: LD_INT 0
56482: PPUSH
56483: PPUSH
56484: PPUSH
56485: PPUSH
56486: PPUSH
56487: PPUSH
56488: PPUSH
56489: PPUSH
56490: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56491: LD_VAR 0 1
56495: PPUSH
56496: CALL_OW 302
56500: NOT
56501: IFTRUE 56520
56503: PUSH
56504: LD_VAR 0 2
56508: PPUSH
56509: LD_VAR 0 3
56513: PPUSH
56514: CALL_OW 488
56518: NOT
56519: OR
56520: IFTRUE 56529
56522: PUSH
56523: LD_VAR 0 4
56527: NOT
56528: OR
56529: IFFALSE 56533
// exit ;
56531: GO 56875
// list := [ ] ;
56533: LD_ADDR_VAR 0 13
56537: PUSH
56538: EMPTY
56539: ST_TO_ADDR
// if x - r < 0 then
56540: LD_VAR 0 2
56544: PUSH
56545: LD_VAR 0 4
56549: MINUS
56550: PUSH
56551: LD_INT 0
56553: LESS
56554: IFFALSE 56566
// min_x := 0 else
56556: LD_ADDR_VAR 0 7
56560: PUSH
56561: LD_INT 0
56563: ST_TO_ADDR
56564: GO 56582
// min_x := x - r ;
56566: LD_ADDR_VAR 0 7
56570: PUSH
56571: LD_VAR 0 2
56575: PUSH
56576: LD_VAR 0 4
56580: MINUS
56581: ST_TO_ADDR
// if y - r < 0 then
56582: LD_VAR 0 3
56586: PUSH
56587: LD_VAR 0 4
56591: MINUS
56592: PUSH
56593: LD_INT 0
56595: LESS
56596: IFFALSE 56608
// min_y := 0 else
56598: LD_ADDR_VAR 0 8
56602: PUSH
56603: LD_INT 0
56605: ST_TO_ADDR
56606: GO 56624
// min_y := y - r ;
56608: LD_ADDR_VAR 0 8
56612: PUSH
56613: LD_VAR 0 3
56617: PUSH
56618: LD_VAR 0 4
56622: MINUS
56623: ST_TO_ADDR
// max_x := x + r ;
56624: LD_ADDR_VAR 0 9
56628: PUSH
56629: LD_VAR 0 2
56633: PUSH
56634: LD_VAR 0 4
56638: PLUS
56639: ST_TO_ADDR
// max_y := y + r ;
56640: LD_ADDR_VAR 0 10
56644: PUSH
56645: LD_VAR 0 3
56649: PUSH
56650: LD_VAR 0 4
56654: PLUS
56655: ST_TO_ADDR
// for _x = min_x to max_x do
56656: LD_ADDR_VAR 0 11
56660: PUSH
56661: DOUBLE
56662: LD_VAR 0 7
56666: DEC
56667: ST_TO_ADDR
56668: LD_VAR 0 9
56672: PUSH
56673: FOR_TO
56674: IFFALSE 56793
// for _y = min_y to max_y do
56676: LD_ADDR_VAR 0 12
56680: PUSH
56681: DOUBLE
56682: LD_VAR 0 8
56686: DEC
56687: ST_TO_ADDR
56688: LD_VAR 0 10
56692: PUSH
56693: FOR_TO
56694: IFFALSE 56789
// begin if not ValidHex ( _x , _y ) then
56696: LD_VAR 0 11
56700: PPUSH
56701: LD_VAR 0 12
56705: PPUSH
56706: CALL_OW 488
56710: NOT
56711: IFFALSE 56715
// continue ;
56713: GO 56693
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56715: LD_VAR 0 11
56719: PPUSH
56720: LD_VAR 0 12
56724: PPUSH
56725: CALL_OW 351
56729: IFFALSE 56747
56731: PUSH
56732: LD_VAR 0 11
56736: PPUSH
56737: LD_VAR 0 12
56741: PPUSH
56742: CALL_OW 554
56746: AND
56747: IFFALSE 56787
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56749: LD_ADDR_VAR 0 13
56753: PUSH
56754: LD_VAR 0 13
56758: PPUSH
56759: LD_VAR 0 13
56763: PUSH
56764: LD_INT 1
56766: PLUS
56767: PPUSH
56768: LD_VAR 0 11
56772: PUSH
56773: LD_VAR 0 12
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PPUSH
56782: CALL_OW 2
56786: ST_TO_ADDR
// end ;
56787: GO 56693
56789: POP
56790: POP
56791: GO 56673
56793: POP
56794: POP
// if not list then
56795: LD_VAR 0 13
56799: NOT
56800: IFFALSE 56804
// exit ;
56802: GO 56875
// for i in list do
56804: LD_ADDR_VAR 0 6
56808: PUSH
56809: LD_VAR 0 13
56813: PUSH
56814: FOR_IN
56815: IFFALSE 56873
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56817: LD_VAR 0 1
56821: PPUSH
56822: LD_STRING M
56824: PUSH
56825: LD_VAR 0 6
56829: PUSH
56830: LD_INT 1
56832: ARRAY
56833: PUSH
56834: LD_VAR 0 6
56838: PUSH
56839: LD_INT 2
56841: ARRAY
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: PUSH
56864: EMPTY
56865: LIST
56866: PPUSH
56867: CALL_OW 447
56871: GO 56814
56873: POP
56874: POP
// end ;
56875: LD_VAR 0 5
56879: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56880: LD_INT 0
56882: PPUSH
56883: PPUSH
56884: PPUSH
56885: PPUSH
56886: PPUSH
56887: PPUSH
56888: PPUSH
56889: PPUSH
56890: PPUSH
56891: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56892: LD_VAR 0 1
56896: PPUSH
56897: CALL_OW 302
56901: NOT
56902: IFTRUE 56921
56904: PUSH
56905: LD_VAR 0 2
56909: PPUSH
56910: LD_VAR 0 3
56914: PPUSH
56915: CALL_OW 488
56919: NOT
56920: OR
56921: IFTRUE 56930
56923: PUSH
56924: LD_VAR 0 4
56928: NOT
56929: OR
56930: IFFALSE 56934
// exit ;
56932: GO 57451
// list := [ ] ;
56934: LD_ADDR_VAR 0 13
56938: PUSH
56939: EMPTY
56940: ST_TO_ADDR
// if x - r < 0 then
56941: LD_VAR 0 2
56945: PUSH
56946: LD_VAR 0 4
56950: MINUS
56951: PUSH
56952: LD_INT 0
56954: LESS
56955: IFFALSE 56967
// min_x := 0 else
56957: LD_ADDR_VAR 0 7
56961: PUSH
56962: LD_INT 0
56964: ST_TO_ADDR
56965: GO 56983
// min_x := x - r ;
56967: LD_ADDR_VAR 0 7
56971: PUSH
56972: LD_VAR 0 2
56976: PUSH
56977: LD_VAR 0 4
56981: MINUS
56982: ST_TO_ADDR
// if y - r < 0 then
56983: LD_VAR 0 3
56987: PUSH
56988: LD_VAR 0 4
56992: MINUS
56993: PUSH
56994: LD_INT 0
56996: LESS
56997: IFFALSE 57009
// min_y := 0 else
56999: LD_ADDR_VAR 0 8
57003: PUSH
57004: LD_INT 0
57006: ST_TO_ADDR
57007: GO 57025
// min_y := y - r ;
57009: LD_ADDR_VAR 0 8
57013: PUSH
57014: LD_VAR 0 3
57018: PUSH
57019: LD_VAR 0 4
57023: MINUS
57024: ST_TO_ADDR
// max_x := x + r ;
57025: LD_ADDR_VAR 0 9
57029: PUSH
57030: LD_VAR 0 2
57034: PUSH
57035: LD_VAR 0 4
57039: PLUS
57040: ST_TO_ADDR
// max_y := y + r ;
57041: LD_ADDR_VAR 0 10
57045: PUSH
57046: LD_VAR 0 3
57050: PUSH
57051: LD_VAR 0 4
57055: PLUS
57056: ST_TO_ADDR
// for _x = min_x to max_x do
57057: LD_ADDR_VAR 0 11
57061: PUSH
57062: DOUBLE
57063: LD_VAR 0 7
57067: DEC
57068: ST_TO_ADDR
57069: LD_VAR 0 9
57073: PUSH
57074: FOR_TO
57075: IFFALSE 57194
// for _y = min_y to max_y do
57077: LD_ADDR_VAR 0 12
57081: PUSH
57082: DOUBLE
57083: LD_VAR 0 8
57087: DEC
57088: ST_TO_ADDR
57089: LD_VAR 0 10
57093: PUSH
57094: FOR_TO
57095: IFFALSE 57190
// begin if not ValidHex ( _x , _y ) then
57097: LD_VAR 0 11
57101: PPUSH
57102: LD_VAR 0 12
57106: PPUSH
57107: CALL_OW 488
57111: NOT
57112: IFFALSE 57116
// continue ;
57114: GO 57094
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57116: LD_VAR 0 11
57120: PPUSH
57121: LD_VAR 0 12
57125: PPUSH
57126: CALL_OW 351
57130: IFFALSE 57148
57132: PUSH
57133: LD_VAR 0 11
57137: PPUSH
57138: LD_VAR 0 12
57142: PPUSH
57143: CALL_OW 554
57147: AND
57148: IFFALSE 57188
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57150: LD_ADDR_VAR 0 13
57154: PUSH
57155: LD_VAR 0 13
57159: PPUSH
57160: LD_VAR 0 13
57164: PUSH
57165: LD_INT 1
57167: PLUS
57168: PPUSH
57169: LD_VAR 0 11
57173: PUSH
57174: LD_VAR 0 12
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PPUSH
57183: CALL_OW 2
57187: ST_TO_ADDR
// end ;
57188: GO 57094
57190: POP
57191: POP
57192: GO 57074
57194: POP
57195: POP
// if not list then
57196: LD_VAR 0 13
57200: NOT
57201: IFFALSE 57205
// exit ;
57203: GO 57451
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57205: LD_ADDR_VAR 0 13
57209: PUSH
57210: LD_VAR 0 1
57214: PPUSH
57215: LD_VAR 0 13
57219: PPUSH
57220: LD_INT 1
57222: PPUSH
57223: LD_INT 1
57225: PPUSH
57226: CALL 8332 0 4
57230: ST_TO_ADDR
// ComStop ( flame ) ;
57231: LD_VAR 0 1
57235: PPUSH
57236: CALL_OW 141
// for i in list do
57240: LD_ADDR_VAR 0 6
57244: PUSH
57245: LD_VAR 0 13
57249: PUSH
57250: FOR_IN
57251: IFFALSE 57282
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57253: LD_VAR 0 1
57257: PPUSH
57258: LD_VAR 0 6
57262: PUSH
57263: LD_INT 1
57265: ARRAY
57266: PPUSH
57267: LD_VAR 0 6
57271: PUSH
57272: LD_INT 2
57274: ARRAY
57275: PPUSH
57276: CALL_OW 176
57280: GO 57250
57282: POP
57283: POP
// repeat wait ( 0 0$1 ) ;
57284: LD_INT 35
57286: PPUSH
57287: CALL_OW 67
// task := GetTaskList ( flame ) ;
57291: LD_ADDR_VAR 0 14
57295: PUSH
57296: LD_VAR 0 1
57300: PPUSH
57301: CALL_OW 437
57305: ST_TO_ADDR
// if not task then
57306: LD_VAR 0 14
57310: NOT
57311: IFFALSE 57315
// exit ;
57313: GO 57451
// if task [ 1 ] [ 1 ] <> | then
57315: LD_VAR 0 14
57319: PUSH
57320: LD_INT 1
57322: ARRAY
57323: PUSH
57324: LD_INT 1
57326: ARRAY
57327: PUSH
57328: LD_STRING |
57330: NONEQUAL
57331: IFFALSE 57335
// exit ;
57333: GO 57451
// _x := task [ 1 ] [ 2 ] ;
57335: LD_ADDR_VAR 0 11
57339: PUSH
57340: LD_VAR 0 14
57344: PUSH
57345: LD_INT 1
57347: ARRAY
57348: PUSH
57349: LD_INT 2
57351: ARRAY
57352: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57353: LD_ADDR_VAR 0 12
57357: PUSH
57358: LD_VAR 0 14
57362: PUSH
57363: LD_INT 1
57365: ARRAY
57366: PUSH
57367: LD_INT 3
57369: ARRAY
57370: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57371: LD_VAR 0 11
57375: PPUSH
57376: LD_VAR 0 12
57380: PPUSH
57381: CALL_OW 351
57385: NOT
57386: IFTRUE 57405
57388: PUSH
57389: LD_VAR 0 11
57393: PPUSH
57394: LD_VAR 0 12
57398: PPUSH
57399: CALL_OW 554
57403: NOT
57404: OR
57405: IFFALSE 57439
// begin task := Delete ( task , 1 ) ;
57407: LD_ADDR_VAR 0 14
57411: PUSH
57412: LD_VAR 0 14
57416: PPUSH
57417: LD_INT 1
57419: PPUSH
57420: CALL_OW 3
57424: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57425: LD_VAR 0 1
57429: PPUSH
57430: LD_VAR 0 14
57434: PPUSH
57435: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57439: LD_VAR 0 1
57443: PPUSH
57444: CALL_OW 314
57448: NOT
57449: IFFALSE 57284
// end ;
57451: LD_VAR 0 5
57455: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57456: LD_EXP 47
57460: NOT
57461: IFFALSE 57511
57463: GO 57465
57465: DISABLE
// begin initHack := true ;
57466: LD_ADDR_EXP 47
57470: PUSH
57471: LD_INT 1
57473: ST_TO_ADDR
// hackTanks := [ ] ;
57474: LD_ADDR_EXP 48
57478: PUSH
57479: EMPTY
57480: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57481: LD_ADDR_EXP 49
57485: PUSH
57486: EMPTY
57487: ST_TO_ADDR
// hackLimit := 3 ;
57488: LD_ADDR_EXP 50
57492: PUSH
57493: LD_INT 3
57495: ST_TO_ADDR
// hackDist := 12 ;
57496: LD_ADDR_EXP 51
57500: PUSH
57501: LD_INT 12
57503: ST_TO_ADDR
// hackCounter := [ ] ;
57504: LD_ADDR_EXP 52
57508: PUSH
57509: EMPTY
57510: ST_TO_ADDR
// end ;
57511: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57512: LD_EXP 47
57516: IFFALSE 57534
57518: PUSH
57519: LD_INT 34
57521: PUSH
57522: LD_INT 99
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PPUSH
57529: CALL_OW 69
57533: AND
57534: IFFALSE 57787
57536: GO 57538
57538: DISABLE
57539: LD_INT 0
57541: PPUSH
57542: PPUSH
// begin enable ;
57543: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57544: LD_ADDR_VAR 0 1
57548: PUSH
57549: LD_INT 34
57551: PUSH
57552: LD_INT 99
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PPUSH
57559: CALL_OW 69
57563: PUSH
57564: FOR_IN
57565: IFFALSE 57785
// begin if not i in hackTanks then
57567: LD_VAR 0 1
57571: PUSH
57572: LD_EXP 48
57576: IN
57577: NOT
57578: IFFALSE 57661
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57580: LD_ADDR_EXP 48
57584: PUSH
57585: LD_EXP 48
57589: PPUSH
57590: LD_EXP 48
57594: PUSH
57595: LD_INT 1
57597: PLUS
57598: PPUSH
57599: LD_VAR 0 1
57603: PPUSH
57604: CALL_OW 1
57608: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57609: LD_ADDR_EXP 49
57613: PUSH
57614: LD_EXP 49
57618: PPUSH
57619: LD_EXP 49
57623: PUSH
57624: LD_INT 1
57626: PLUS
57627: PPUSH
57628: EMPTY
57629: PPUSH
57630: CALL_OW 1
57634: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57635: LD_ADDR_EXP 52
57639: PUSH
57640: LD_EXP 52
57644: PPUSH
57645: LD_EXP 52
57649: PUSH
57650: LD_INT 1
57652: PLUS
57653: PPUSH
57654: EMPTY
57655: PPUSH
57656: CALL_OW 1
57660: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57661: LD_VAR 0 1
57665: PPUSH
57666: CALL_OW 302
57670: NOT
57671: IFFALSE 57684
// begin HackUnlinkAll ( i ) ;
57673: LD_VAR 0 1
57677: PPUSH
57678: CALL 57790 0 1
// continue ;
57682: GO 57564
// end ; HackCheckCapturedStatus ( i ) ;
57684: LD_VAR 0 1
57688: PPUSH
57689: CALL 58235 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57693: LD_ADDR_VAR 0 2
57697: PUSH
57698: LD_INT 81
57700: PUSH
57701: LD_VAR 0 1
57705: PPUSH
57706: CALL_OW 255
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 33
57717: PUSH
57718: LD_INT 3
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 91
57727: PUSH
57728: LD_VAR 0 1
57732: PUSH
57733: LD_EXP 51
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 50
57745: PUSH
57746: EMPTY
57747: LIST
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: PPUSH
57755: CALL_OW 69
57759: ST_TO_ADDR
// if not tmp then
57760: LD_VAR 0 2
57764: NOT
57765: IFFALSE 57769
// continue ;
57767: GO 57564
// HackLink ( i , tmp ) ;
57769: LD_VAR 0 1
57773: PPUSH
57774: LD_VAR 0 2
57778: PPUSH
57779: CALL 57926 0 2
// end ;
57783: GO 57564
57785: POP
57786: POP
// end ;
57787: PPOPN 2
57789: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57790: LD_INT 0
57792: PPUSH
57793: PPUSH
57794: PPUSH
// if not hack in hackTanks then
57795: LD_VAR 0 1
57799: PUSH
57800: LD_EXP 48
57804: IN
57805: NOT
57806: IFFALSE 57810
// exit ;
57808: GO 57921
// index := GetElementIndex ( hackTanks , hack ) ;
57810: LD_ADDR_VAR 0 4
57814: PUSH
57815: LD_EXP 48
57819: PPUSH
57820: LD_VAR 0 1
57824: PPUSH
57825: CALL 7627 0 2
57829: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57830: LD_EXP 49
57834: PUSH
57835: LD_VAR 0 4
57839: ARRAY
57840: IFFALSE 57921
// begin for i in hackTanksCaptured [ index ] do
57842: LD_ADDR_VAR 0 3
57846: PUSH
57847: LD_EXP 49
57851: PUSH
57852: LD_VAR 0 4
57856: ARRAY
57857: PUSH
57858: FOR_IN
57859: IFFALSE 57885
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57861: LD_VAR 0 3
57865: PUSH
57866: LD_INT 1
57868: ARRAY
57869: PPUSH
57870: LD_VAR 0 3
57874: PUSH
57875: LD_INT 2
57877: ARRAY
57878: PPUSH
57879: CALL_OW 235
57883: GO 57858
57885: POP
57886: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57887: LD_ADDR_EXP 49
57891: PUSH
57892: LD_EXP 49
57896: PPUSH
57897: LD_VAR 0 4
57901: PPUSH
57902: EMPTY
57903: PPUSH
57904: CALL_OW 1
57908: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57909: LD_VAR 0 1
57913: PPUSH
57914: LD_INT 0
57916: PPUSH
57917: CALL_OW 505
// end ; end ;
57921: LD_VAR 0 2
57925: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57926: LD_INT 0
57928: PPUSH
57929: PPUSH
57930: PPUSH
// if not hack in hackTanks or not vehicles then
57931: LD_VAR 0 1
57935: PUSH
57936: LD_EXP 48
57940: IN
57941: NOT
57942: IFTRUE 57951
57944: PUSH
57945: LD_VAR 0 2
57949: NOT
57950: OR
57951: IFFALSE 57955
// exit ;
57953: GO 58230
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57955: LD_ADDR_VAR 0 2
57959: PUSH
57960: LD_VAR 0 1
57964: PPUSH
57965: LD_VAR 0 2
57969: PPUSH
57970: LD_INT 1
57972: PPUSH
57973: LD_INT 1
57975: PPUSH
57976: CALL 8279 0 4
57980: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57981: LD_ADDR_VAR 0 5
57985: PUSH
57986: LD_EXP 48
57990: PPUSH
57991: LD_VAR 0 1
57995: PPUSH
57996: CALL 7627 0 2
58000: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58001: LD_EXP 49
58005: PUSH
58006: LD_VAR 0 5
58010: ARRAY
58011: PUSH
58012: LD_EXP 50
58016: LESS
58017: IFFALSE 58206
// begin for i := 1 to vehicles do
58019: LD_ADDR_VAR 0 4
58023: PUSH
58024: DOUBLE
58025: LD_INT 1
58027: DEC
58028: ST_TO_ADDR
58029: LD_VAR 0 2
58033: PUSH
58034: FOR_TO
58035: IFFALSE 58204
// begin if hackTanksCaptured [ index ] = hackLimit then
58037: LD_EXP 49
58041: PUSH
58042: LD_VAR 0 5
58046: ARRAY
58047: PUSH
58048: LD_EXP 50
58052: EQUAL
58053: IFFALSE 58057
// break ;
58055: GO 58204
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58057: LD_ADDR_EXP 52
58061: PUSH
58062: LD_EXP 52
58066: PPUSH
58067: LD_VAR 0 5
58071: PPUSH
58072: LD_EXP 52
58076: PUSH
58077: LD_VAR 0 5
58081: ARRAY
58082: PUSH
58083: LD_INT 1
58085: PLUS
58086: PPUSH
58087: CALL_OW 1
58091: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58092: LD_ADDR_EXP 49
58096: PUSH
58097: LD_EXP 49
58101: PPUSH
58102: LD_VAR 0 5
58106: PUSH
58107: LD_EXP 49
58111: PUSH
58112: LD_VAR 0 5
58116: ARRAY
58117: PUSH
58118: LD_INT 1
58120: PLUS
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PPUSH
58126: LD_VAR 0 2
58130: PUSH
58131: LD_VAR 0 4
58135: ARRAY
58136: PUSH
58137: LD_VAR 0 2
58141: PUSH
58142: LD_VAR 0 4
58146: ARRAY
58147: PPUSH
58148: CALL_OW 255
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PPUSH
58157: CALL 7844 0 3
58161: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58162: LD_VAR 0 2
58166: PUSH
58167: LD_VAR 0 4
58171: ARRAY
58172: PPUSH
58173: LD_VAR 0 1
58177: PPUSH
58178: CALL_OW 255
58182: PPUSH
58183: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58187: LD_VAR 0 2
58191: PUSH
58192: LD_VAR 0 4
58196: ARRAY
58197: PPUSH
58198: CALL_OW 141
// end ;
58202: GO 58034
58204: POP
58205: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58206: LD_VAR 0 1
58210: PPUSH
58211: LD_EXP 49
58215: PUSH
58216: LD_VAR 0 5
58220: ARRAY
58221: PUSH
58222: LD_INT 0
58224: PLUS
58225: PPUSH
58226: CALL_OW 505
// end ;
58230: LD_VAR 0 3
58234: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58235: LD_INT 0
58237: PPUSH
58238: PPUSH
58239: PPUSH
58240: PPUSH
// if not hack in hackTanks then
58241: LD_VAR 0 1
58245: PUSH
58246: LD_EXP 48
58250: IN
58251: NOT
58252: IFFALSE 58256
// exit ;
58254: GO 58500
// index := GetElementIndex ( hackTanks , hack ) ;
58256: LD_ADDR_VAR 0 4
58260: PUSH
58261: LD_EXP 48
58265: PPUSH
58266: LD_VAR 0 1
58270: PPUSH
58271: CALL 7627 0 2
58275: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58276: LD_ADDR_VAR 0 3
58280: PUSH
58281: DOUBLE
58282: LD_EXP 49
58286: PUSH
58287: LD_VAR 0 4
58291: ARRAY
58292: INC
58293: ST_TO_ADDR
58294: LD_INT 1
58296: PUSH
58297: FOR_DOWNTO
58298: IFFALSE 58474
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58300: LD_ADDR_VAR 0 5
58304: PUSH
58305: LD_EXP 49
58309: PUSH
58310: LD_VAR 0 4
58314: ARRAY
58315: PUSH
58316: LD_VAR 0 3
58320: ARRAY
58321: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58322: LD_VAR 0 5
58326: PUSH
58327: LD_INT 1
58329: ARRAY
58330: PPUSH
58331: CALL_OW 302
58335: NOT
58336: IFTRUE 58364
58338: PUSH
58339: LD_VAR 0 5
58343: PUSH
58344: LD_INT 1
58346: ARRAY
58347: PPUSH
58348: CALL_OW 255
58352: PUSH
58353: LD_VAR 0 1
58357: PPUSH
58358: CALL_OW 255
58362: NONEQUAL
58363: OR
58364: IFFALSE 58472
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58366: LD_VAR 0 5
58370: PUSH
58371: LD_INT 1
58373: ARRAY
58374: PPUSH
58375: CALL_OW 305
58379: IFFALSE 58407
58381: PUSH
58382: LD_VAR 0 5
58386: PUSH
58387: LD_INT 1
58389: ARRAY
58390: PPUSH
58391: CALL_OW 255
58395: PUSH
58396: LD_VAR 0 1
58400: PPUSH
58401: CALL_OW 255
58405: EQUAL
58406: AND
58407: IFFALSE 58431
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58409: LD_VAR 0 5
58413: PUSH
58414: LD_INT 1
58416: ARRAY
58417: PPUSH
58418: LD_VAR 0 5
58422: PUSH
58423: LD_INT 2
58425: ARRAY
58426: PPUSH
58427: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58431: LD_ADDR_EXP 49
58435: PUSH
58436: LD_EXP 49
58440: PPUSH
58441: LD_VAR 0 4
58445: PPUSH
58446: LD_EXP 49
58450: PUSH
58451: LD_VAR 0 4
58455: ARRAY
58456: PPUSH
58457: LD_VAR 0 3
58461: PPUSH
58462: CALL_OW 3
58466: PPUSH
58467: CALL_OW 1
58471: ST_TO_ADDR
// end ; end ;
58472: GO 58297
58474: POP
58475: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58476: LD_VAR 0 1
58480: PPUSH
58481: LD_EXP 49
58485: PUSH
58486: LD_VAR 0 4
58490: ARRAY
58491: PUSH
58492: LD_INT 0
58494: PLUS
58495: PPUSH
58496: CALL_OW 505
// end ;
58500: LD_VAR 0 2
58504: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58505: LD_INT 0
58507: PPUSH
58508: PPUSH
58509: PPUSH
58510: PPUSH
// if not hack in hackTanks then
58511: LD_VAR 0 1
58515: PUSH
58516: LD_EXP 48
58520: IN
58521: NOT
58522: IFFALSE 58526
// exit ;
58524: GO 58611
// index := GetElementIndex ( hackTanks , hack ) ;
58526: LD_ADDR_VAR 0 5
58530: PUSH
58531: LD_EXP 48
58535: PPUSH
58536: LD_VAR 0 1
58540: PPUSH
58541: CALL 7627 0 2
58545: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58546: LD_ADDR_VAR 0 4
58550: PUSH
58551: DOUBLE
58552: LD_INT 1
58554: DEC
58555: ST_TO_ADDR
58556: LD_EXP 49
58560: PUSH
58561: LD_VAR 0 5
58565: ARRAY
58566: PUSH
58567: FOR_TO
58568: IFFALSE 58609
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58570: LD_EXP 49
58574: PUSH
58575: LD_VAR 0 5
58579: ARRAY
58580: PUSH
58581: LD_VAR 0 4
58585: ARRAY
58586: PUSH
58587: LD_INT 1
58589: ARRAY
58590: PUSH
58591: LD_VAR 0 2
58595: EQUAL
58596: IFFALSE 58607
// KillUnit ( vehicle ) ;
58598: LD_VAR 0 2
58602: PPUSH
58603: CALL_OW 66
58607: GO 58567
58609: POP
58610: POP
// end ;
58611: LD_VAR 0 3
58615: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
58616: LD_EXP 53
58620: NOT
58621: IFFALSE 58656
58623: GO 58625
58625: DISABLE
// begin initMiner := true ;
58626: LD_ADDR_EXP 53
58630: PUSH
58631: LD_INT 1
58633: ST_TO_ADDR
// minersList := [ ] ;
58634: LD_ADDR_EXP 54
58638: PUSH
58639: EMPTY
58640: ST_TO_ADDR
// minerMinesList := [ ] ;
58641: LD_ADDR_EXP 55
58645: PUSH
58646: EMPTY
58647: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
58648: LD_ADDR_EXP 56
58652: PUSH
58653: LD_INT 5
58655: ST_TO_ADDR
// end ;
58656: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
58657: LD_EXP 53
58661: IFFALSE 58679
58663: PUSH
58664: LD_INT 34
58666: PUSH
58667: LD_INT 81
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PPUSH
58674: CALL_OW 69
58678: AND
58679: IFFALSE 59142
58681: GO 58683
58683: DISABLE
58684: LD_INT 0
58686: PPUSH
58687: PPUSH
58688: PPUSH
58689: PPUSH
// begin enable ;
58690: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58691: LD_ADDR_VAR 0 1
58695: PUSH
58696: LD_INT 34
58698: PUSH
58699: LD_INT 81
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PPUSH
58706: CALL_OW 69
58710: PUSH
58711: FOR_IN
58712: IFFALSE 58784
// begin if not i in minersList then
58714: LD_VAR 0 1
58718: PUSH
58719: LD_EXP 54
58723: IN
58724: NOT
58725: IFFALSE 58782
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58727: LD_ADDR_EXP 54
58731: PUSH
58732: LD_EXP 54
58736: PPUSH
58737: LD_EXP 54
58741: PUSH
58742: LD_INT 1
58744: PLUS
58745: PPUSH
58746: LD_VAR 0 1
58750: PPUSH
58751: CALL_OW 1
58755: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58756: LD_ADDR_EXP 55
58760: PUSH
58761: LD_EXP 55
58765: PPUSH
58766: LD_EXP 55
58770: PUSH
58771: LD_INT 1
58773: PLUS
58774: PPUSH
58775: EMPTY
58776: PPUSH
58777: CALL_OW 1
58781: ST_TO_ADDR
// end end ;
58782: GO 58711
58784: POP
58785: POP
// for i := minerMinesList downto 1 do
58786: LD_ADDR_VAR 0 1
58790: PUSH
58791: DOUBLE
58792: LD_EXP 55
58796: INC
58797: ST_TO_ADDR
58798: LD_INT 1
58800: PUSH
58801: FOR_DOWNTO
58802: IFFALSE 59140
// begin if IsLive ( minersList [ i ] ) then
58804: LD_EXP 54
58808: PUSH
58809: LD_VAR 0 1
58813: ARRAY
58814: PPUSH
58815: CALL_OW 300
58819: IFFALSE 58847
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
58821: LD_EXP 54
58825: PUSH
58826: LD_VAR 0 1
58830: ARRAY
58831: PPUSH
58832: LD_EXP 55
58836: PUSH
58837: LD_VAR 0 1
58841: ARRAY
58842: PPUSH
58843: CALL_OW 505
// if not minerMinesList [ i ] then
58847: LD_EXP 55
58851: PUSH
58852: LD_VAR 0 1
58856: ARRAY
58857: NOT
58858: IFFALSE 58862
// continue ;
58860: GO 58801
// for j := minerMinesList [ i ] downto 1 do
58862: LD_ADDR_VAR 0 2
58866: PUSH
58867: DOUBLE
58868: LD_EXP 55
58872: PUSH
58873: LD_VAR 0 1
58877: ARRAY
58878: INC
58879: ST_TO_ADDR
58880: LD_INT 1
58882: PUSH
58883: FOR_DOWNTO
58884: IFFALSE 59136
// begin side := GetSide ( minersList [ i ] ) ;
58886: LD_ADDR_VAR 0 3
58890: PUSH
58891: LD_EXP 54
58895: PUSH
58896: LD_VAR 0 1
58900: ARRAY
58901: PPUSH
58902: CALL_OW 255
58906: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58907: LD_ADDR_VAR 0 4
58911: PUSH
58912: LD_EXP 55
58916: PUSH
58917: LD_VAR 0 1
58921: ARRAY
58922: PUSH
58923: LD_VAR 0 2
58927: ARRAY
58928: PUSH
58929: LD_INT 1
58931: ARRAY
58932: PPUSH
58933: LD_EXP 55
58937: PUSH
58938: LD_VAR 0 1
58942: ARRAY
58943: PUSH
58944: LD_VAR 0 2
58948: ARRAY
58949: PUSH
58950: LD_INT 2
58952: ARRAY
58953: PPUSH
58954: CALL_OW 428
58958: ST_TO_ADDR
// if not tmp then
58959: LD_VAR 0 4
58963: NOT
58964: IFFALSE 58968
// continue ;
58966: GO 58883
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58968: LD_VAR 0 4
58972: PUSH
58973: LD_INT 81
58975: PUSH
58976: LD_VAR 0 3
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PPUSH
58985: CALL_OW 69
58989: IN
58990: IFFALSE 59040
58992: PUSH
58993: LD_EXP 55
58997: PUSH
58998: LD_VAR 0 1
59002: ARRAY
59003: PUSH
59004: LD_VAR 0 2
59008: ARRAY
59009: PUSH
59010: LD_INT 1
59012: ARRAY
59013: PPUSH
59014: LD_EXP 55
59018: PUSH
59019: LD_VAR 0 1
59023: ARRAY
59024: PUSH
59025: LD_VAR 0 2
59029: ARRAY
59030: PUSH
59031: LD_INT 2
59033: ARRAY
59034: PPUSH
59035: CALL_OW 458
59039: AND
59040: IFFALSE 59134
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59042: LD_EXP 55
59046: PUSH
59047: LD_VAR 0 1
59051: ARRAY
59052: PUSH
59053: LD_VAR 0 2
59057: ARRAY
59058: PUSH
59059: LD_INT 1
59061: ARRAY
59062: PPUSH
59063: LD_EXP 55
59067: PUSH
59068: LD_VAR 0 1
59072: ARRAY
59073: PUSH
59074: LD_VAR 0 2
59078: ARRAY
59079: PUSH
59080: LD_INT 2
59082: ARRAY
59083: PPUSH
59084: LD_VAR 0 3
59088: PPUSH
59089: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59093: LD_ADDR_EXP 55
59097: PUSH
59098: LD_EXP 55
59102: PPUSH
59103: LD_VAR 0 1
59107: PPUSH
59108: LD_EXP 55
59112: PUSH
59113: LD_VAR 0 1
59117: ARRAY
59118: PPUSH
59119: LD_VAR 0 2
59123: PPUSH
59124: CALL_OW 3
59128: PPUSH
59129: CALL_OW 1
59133: ST_TO_ADDR
// end ; end ;
59134: GO 58883
59136: POP
59137: POP
// end ;
59138: GO 58801
59140: POP
59141: POP
// end ;
59142: PPOPN 4
59144: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59145: LD_INT 0
59147: PPUSH
59148: PPUSH
// result := false ;
59149: LD_ADDR_VAR 0 4
59153: PUSH
59154: LD_INT 0
59156: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59157: LD_VAR 0 1
59161: PPUSH
59162: CALL_OW 264
59166: PUSH
59167: LD_INT 81
59169: EQUAL
59170: NOT
59171: IFFALSE 59175
// exit ;
59173: GO 59419
// index := GetElementIndex ( minersList , unit ) ;
59175: LD_ADDR_VAR 0 5
59179: PUSH
59180: LD_EXP 54
59184: PPUSH
59185: LD_VAR 0 1
59189: PPUSH
59190: CALL 7627 0 2
59194: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59195: LD_EXP 55
59199: PUSH
59200: LD_VAR 0 5
59204: ARRAY
59205: PUSH
59206: LD_EXP 56
59210: GREATEREQUAL
59211: IFFALSE 59215
// exit ;
59213: GO 59419
// ComMoveXY ( unit , x , y ) ;
59215: LD_VAR 0 1
59219: PPUSH
59220: LD_VAR 0 2
59224: PPUSH
59225: LD_VAR 0 3
59229: PPUSH
59230: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59234: LD_INT 35
59236: PPUSH
59237: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59241: LD_VAR 0 1
59245: PPUSH
59246: LD_VAR 0 2
59250: PPUSH
59251: LD_VAR 0 3
59255: PPUSH
59256: CALL 39673 0 3
59260: NOT
59261: IFFALSE 59274
59263: PUSH
59264: LD_VAR 0 1
59268: PPUSH
59269: CALL_OW 314
59273: AND
59274: IFFALSE 59278
// exit ;
59276: GO 59419
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59278: LD_VAR 0 2
59282: PPUSH
59283: LD_VAR 0 3
59287: PPUSH
59288: CALL_OW 428
59292: PUSH
59293: LD_VAR 0 1
59297: EQUAL
59298: IFFALSE 59312
59300: PUSH
59301: LD_VAR 0 1
59305: PPUSH
59306: CALL_OW 314
59310: NOT
59311: AND
59312: IFFALSE 59234
// PlaySoundXY ( x , y , PlantMine ) ;
59314: LD_VAR 0 2
59318: PPUSH
59319: LD_VAR 0 3
59323: PPUSH
59324: LD_STRING PlantMine
59326: PPUSH
59327: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59331: LD_VAR 0 2
59335: PPUSH
59336: LD_VAR 0 3
59340: PPUSH
59341: LD_VAR 0 1
59345: PPUSH
59346: CALL_OW 255
59350: PPUSH
59351: LD_INT 0
59353: PPUSH
59354: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59358: LD_ADDR_EXP 55
59362: PUSH
59363: LD_EXP 55
59367: PPUSH
59368: LD_VAR 0 5
59372: PUSH
59373: LD_EXP 55
59377: PUSH
59378: LD_VAR 0 5
59382: ARRAY
59383: PUSH
59384: LD_INT 1
59386: PLUS
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PPUSH
59392: LD_VAR 0 2
59396: PUSH
59397: LD_VAR 0 3
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PPUSH
59406: CALL 7844 0 3
59410: ST_TO_ADDR
// result := true ;
59411: LD_ADDR_VAR 0 4
59415: PUSH
59416: LD_INT 1
59418: ST_TO_ADDR
// end ;
59419: LD_VAR 0 4
59423: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59424: LD_INT 0
59426: PPUSH
59427: PPUSH
59428: PPUSH
// if not unit in minersList then
59429: LD_VAR 0 1
59433: PUSH
59434: LD_EXP 54
59438: IN
59439: NOT
59440: IFFALSE 59444
// exit ;
59442: GO 59838
// index := GetElementIndex ( minersList , unit ) ;
59444: LD_ADDR_VAR 0 6
59448: PUSH
59449: LD_EXP 54
59453: PPUSH
59454: LD_VAR 0 1
59458: PPUSH
59459: CALL 7627 0 2
59463: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59464: LD_ADDR_VAR 0 5
59468: PUSH
59469: DOUBLE
59470: LD_EXP 55
59474: PUSH
59475: LD_VAR 0 6
59479: ARRAY
59480: INC
59481: ST_TO_ADDR
59482: LD_INT 1
59484: PUSH
59485: FOR_DOWNTO
59486: IFFALSE 59649
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
59488: LD_EXP 55
59492: PUSH
59493: LD_VAR 0 6
59497: ARRAY
59498: PUSH
59499: LD_VAR 0 5
59503: ARRAY
59504: PUSH
59505: LD_INT 1
59507: ARRAY
59508: PUSH
59509: LD_VAR 0 2
59513: EQUAL
59514: IFFALSE 59544
59516: PUSH
59517: LD_EXP 55
59521: PUSH
59522: LD_VAR 0 6
59526: ARRAY
59527: PUSH
59528: LD_VAR 0 5
59532: ARRAY
59533: PUSH
59534: LD_INT 2
59536: ARRAY
59537: PUSH
59538: LD_VAR 0 3
59542: EQUAL
59543: AND
59544: IFFALSE 59647
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59546: LD_EXP 55
59550: PUSH
59551: LD_VAR 0 6
59555: ARRAY
59556: PUSH
59557: LD_VAR 0 5
59561: ARRAY
59562: PUSH
59563: LD_INT 1
59565: ARRAY
59566: PPUSH
59567: LD_EXP 55
59571: PUSH
59572: LD_VAR 0 6
59576: ARRAY
59577: PUSH
59578: LD_VAR 0 5
59582: ARRAY
59583: PUSH
59584: LD_INT 2
59586: ARRAY
59587: PPUSH
59588: LD_VAR 0 1
59592: PPUSH
59593: CALL_OW 255
59597: PPUSH
59598: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59602: LD_ADDR_EXP 55
59606: PUSH
59607: LD_EXP 55
59611: PPUSH
59612: LD_VAR 0 6
59616: PPUSH
59617: LD_EXP 55
59621: PUSH
59622: LD_VAR 0 6
59626: ARRAY
59627: PPUSH
59628: LD_VAR 0 5
59632: PPUSH
59633: CALL_OW 3
59637: PPUSH
59638: CALL_OW 1
59642: ST_TO_ADDR
// exit ;
59643: POP
59644: POP
59645: GO 59838
// end ; end ;
59647: GO 59485
59649: POP
59650: POP
// for i := minerMinesList [ index ] downto 1 do
59651: LD_ADDR_VAR 0 5
59655: PUSH
59656: DOUBLE
59657: LD_EXP 55
59661: PUSH
59662: LD_VAR 0 6
59666: ARRAY
59667: INC
59668: ST_TO_ADDR
59669: LD_INT 1
59671: PUSH
59672: FOR_DOWNTO
59673: IFFALSE 59836
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59675: LD_EXP 55
59679: PUSH
59680: LD_VAR 0 6
59684: ARRAY
59685: PUSH
59686: LD_VAR 0 5
59690: ARRAY
59691: PUSH
59692: LD_INT 1
59694: ARRAY
59695: PPUSH
59696: LD_EXP 55
59700: PUSH
59701: LD_VAR 0 6
59705: ARRAY
59706: PUSH
59707: LD_VAR 0 5
59711: ARRAY
59712: PUSH
59713: LD_INT 2
59715: ARRAY
59716: PPUSH
59717: LD_VAR 0 2
59721: PPUSH
59722: LD_VAR 0 3
59726: PPUSH
59727: CALL_OW 298
59731: PUSH
59732: LD_INT 6
59734: LESS
59735: IFFALSE 59834
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59737: LD_EXP 55
59741: PUSH
59742: LD_VAR 0 6
59746: ARRAY
59747: PUSH
59748: LD_VAR 0 5
59752: ARRAY
59753: PUSH
59754: LD_INT 1
59756: ARRAY
59757: PPUSH
59758: LD_EXP 55
59762: PUSH
59763: LD_VAR 0 6
59767: ARRAY
59768: PUSH
59769: LD_VAR 0 5
59773: ARRAY
59774: PUSH
59775: LD_INT 2
59777: ARRAY
59778: PPUSH
59779: LD_VAR 0 1
59783: PPUSH
59784: CALL_OW 255
59788: PPUSH
59789: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59793: LD_ADDR_EXP 55
59797: PUSH
59798: LD_EXP 55
59802: PPUSH
59803: LD_VAR 0 6
59807: PPUSH
59808: LD_EXP 55
59812: PUSH
59813: LD_VAR 0 6
59817: ARRAY
59818: PPUSH
59819: LD_VAR 0 5
59823: PPUSH
59824: CALL_OW 3
59828: PPUSH
59829: CALL_OW 1
59833: ST_TO_ADDR
// end ; end ;
59834: GO 59672
59836: POP
59837: POP
// end ;
59838: LD_VAR 0 4
59842: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59843: LD_INT 0
59845: PPUSH
59846: PPUSH
59847: PPUSH
59848: PPUSH
59849: PPUSH
59850: PPUSH
59851: PPUSH
59852: PPUSH
59853: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59854: LD_VAR 0 1
59858: PPUSH
59859: CALL_OW 264
59863: PUSH
59864: LD_INT 81
59866: EQUAL
59867: NOT
59868: IFTRUE 59883
59870: PUSH
59871: LD_VAR 0 1
59875: PUSH
59876: LD_EXP 54
59880: IN
59881: NOT
59882: OR
59883: IFFALSE 59887
// exit ;
59885: GO 60213
// index := GetElementIndex ( minersList , unit ) ;
59887: LD_ADDR_VAR 0 6
59891: PUSH
59892: LD_EXP 54
59896: PPUSH
59897: LD_VAR 0 1
59901: PPUSH
59902: CALL 7627 0 2
59906: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59907: LD_ADDR_VAR 0 8
59911: PUSH
59912: LD_EXP 56
59916: PUSH
59917: LD_EXP 55
59921: PUSH
59922: LD_VAR 0 6
59926: ARRAY
59927: MINUS
59928: ST_TO_ADDR
// if not minesFreeAmount then
59929: LD_VAR 0 8
59933: NOT
59934: IFFALSE 59938
// exit ;
59936: GO 60213
// tmp := [ ] ;
59938: LD_ADDR_VAR 0 7
59942: PUSH
59943: EMPTY
59944: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59945: LD_ADDR_VAR 0 5
59949: PUSH
59950: DOUBLE
59951: LD_INT 1
59953: DEC
59954: ST_TO_ADDR
59955: LD_VAR 0 8
59959: PUSH
59960: FOR_TO
59961: IFFALSE 60160
// begin _d := rand ( 0 , 5 ) ;
59963: LD_ADDR_VAR 0 11
59967: PUSH
59968: LD_INT 0
59970: PPUSH
59971: LD_INT 5
59973: PPUSH
59974: CALL_OW 12
59978: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59979: LD_ADDR_VAR 0 12
59983: PUSH
59984: LD_INT 2
59986: PPUSH
59987: LD_INT 6
59989: PPUSH
59990: CALL_OW 12
59994: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59995: LD_ADDR_VAR 0 9
59999: PUSH
60000: LD_VAR 0 2
60004: PPUSH
60005: LD_VAR 0 11
60009: PPUSH
60010: LD_VAR 0 12
60014: PPUSH
60015: CALL_OW 272
60019: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60020: LD_ADDR_VAR 0 10
60024: PUSH
60025: LD_VAR 0 3
60029: PPUSH
60030: LD_VAR 0 11
60034: PPUSH
60035: LD_VAR 0 12
60039: PPUSH
60040: CALL_OW 273
60044: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60045: LD_VAR 0 9
60049: PPUSH
60050: LD_VAR 0 10
60054: PPUSH
60055: CALL_OW 488
60059: IFFALSE 60083
60061: PUSH
60062: LD_VAR 0 9
60066: PUSH
60067: LD_VAR 0 10
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_VAR 0 7
60080: IN
60081: NOT
60082: AND
60083: IFFALSE 60102
60085: PUSH
60086: LD_VAR 0 9
60090: PPUSH
60091: LD_VAR 0 10
60095: PPUSH
60096: CALL_OW 458
60100: NOT
60101: AND
60102: IFFALSE 60144
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60104: LD_ADDR_VAR 0 7
60108: PUSH
60109: LD_VAR 0 7
60113: PPUSH
60114: LD_VAR 0 7
60118: PUSH
60119: LD_INT 1
60121: PLUS
60122: PPUSH
60123: LD_VAR 0 9
60127: PUSH
60128: LD_VAR 0 10
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PPUSH
60137: CALL_OW 1
60141: ST_TO_ADDR
60142: GO 60158
// i := i - 1 ;
60144: LD_ADDR_VAR 0 5
60148: PUSH
60149: LD_VAR 0 5
60153: PUSH
60154: LD_INT 1
60156: MINUS
60157: ST_TO_ADDR
// end ;
60158: GO 59960
60160: POP
60161: POP
// for i in tmp do
60162: LD_ADDR_VAR 0 5
60166: PUSH
60167: LD_VAR 0 7
60171: PUSH
60172: FOR_IN
60173: IFFALSE 60211
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60175: LD_VAR 0 1
60179: PPUSH
60180: LD_VAR 0 5
60184: PUSH
60185: LD_INT 1
60187: ARRAY
60188: PPUSH
60189: LD_VAR 0 5
60193: PUSH
60194: LD_INT 2
60196: ARRAY
60197: PPUSH
60198: CALL 59145 0 3
60202: NOT
60203: IFFALSE 60209
// exit ;
60205: POP
60206: POP
60207: GO 60213
60209: GO 60172
60211: POP
60212: POP
// end ;
60213: LD_VAR 0 4
60217: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60218: LD_INT 0
60220: PPUSH
60221: PPUSH
60222: PPUSH
60223: PPUSH
60224: PPUSH
60225: PPUSH
60226: PPUSH
60227: PPUSH
60228: PPUSH
// if GetClass ( unit ) <> class_sniper then
60229: LD_VAR 0 1
60233: PPUSH
60234: CALL_OW 257
60238: PUSH
60239: LD_INT 5
60241: NONEQUAL
60242: IFFALSE 60246
// exit ;
60244: GO 60716
// dist := 8 ;
60246: LD_ADDR_VAR 0 5
60250: PUSH
60251: LD_INT 8
60253: ST_TO_ADDR
// viewRange := 12 ;
60254: LD_ADDR_VAR 0 8
60258: PUSH
60259: LD_INT 12
60261: ST_TO_ADDR
// side := GetSide ( unit ) ;
60262: LD_ADDR_VAR 0 6
60266: PUSH
60267: LD_VAR 0 1
60271: PPUSH
60272: CALL_OW 255
60276: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60277: LD_INT 61
60279: PPUSH
60280: LD_VAR 0 6
60284: PPUSH
60285: CALL_OW 321
60289: PUSH
60290: LD_INT 2
60292: EQUAL
60293: IFFALSE 60303
// viewRange := 16 ;
60295: LD_ADDR_VAR 0 8
60299: PUSH
60300: LD_INT 16
60302: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60303: LD_VAR 0 1
60307: PPUSH
60308: LD_VAR 0 2
60312: PPUSH
60313: LD_VAR 0 3
60317: PPUSH
60318: CALL_OW 297
60322: PUSH
60323: LD_VAR 0 5
60327: GREATER
60328: IFFALSE 60407
// begin ComMoveXY ( unit , x , y ) ;
60330: LD_VAR 0 1
60334: PPUSH
60335: LD_VAR 0 2
60339: PPUSH
60340: LD_VAR 0 3
60344: PPUSH
60345: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60349: LD_INT 35
60351: PPUSH
60352: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60356: LD_VAR 0 1
60360: PPUSH
60361: LD_VAR 0 2
60365: PPUSH
60366: LD_VAR 0 3
60370: PPUSH
60371: CALL 39673 0 3
60375: NOT
60376: IFFALSE 60380
// exit ;
60378: GO 60716
// until GetDistUnitXY ( unit , x , y ) < dist ;
60380: LD_VAR 0 1
60384: PPUSH
60385: LD_VAR 0 2
60389: PPUSH
60390: LD_VAR 0 3
60394: PPUSH
60395: CALL_OW 297
60399: PUSH
60400: LD_VAR 0 5
60404: LESS
60405: IFFALSE 60349
// end ; ComTurnXY ( unit , x , y ) ;
60407: LD_VAR 0 1
60411: PPUSH
60412: LD_VAR 0 2
60416: PPUSH
60417: LD_VAR 0 3
60421: PPUSH
60422: CALL_OW 118
// repeat if Multiplayer then
60426: LD_OWVAR 4
60430: IFFALSE 60441
// wait ( 35 ) else
60432: LD_INT 35
60434: PPUSH
60435: CALL_OW 67
60439: GO 60448
// wait ( 5 ) ;
60441: LD_INT 5
60443: PPUSH
60444: CALL_OW 67
// _d := GetDir ( unit ) ;
60448: LD_ADDR_VAR 0 11
60452: PUSH
60453: LD_VAR 0 1
60457: PPUSH
60458: CALL_OW 254
60462: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60463: LD_ADDR_VAR 0 7
60467: PUSH
60468: LD_VAR 0 1
60472: PPUSH
60473: CALL_OW 250
60477: PPUSH
60478: LD_VAR 0 1
60482: PPUSH
60483: CALL_OW 251
60487: PPUSH
60488: LD_VAR 0 2
60492: PPUSH
60493: LD_VAR 0 3
60497: PPUSH
60498: CALL 42309 0 4
60502: ST_TO_ADDR
// until dir = _d ;
60503: LD_VAR 0 7
60507: PUSH
60508: LD_VAR 0 11
60512: EQUAL
60513: IFFALSE 60426
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60515: LD_ADDR_VAR 0 9
60519: PUSH
60520: LD_VAR 0 1
60524: PPUSH
60525: CALL_OW 250
60529: PPUSH
60530: LD_VAR 0 7
60534: PPUSH
60535: LD_VAR 0 5
60539: PPUSH
60540: CALL_OW 272
60544: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60545: LD_ADDR_VAR 0 10
60549: PUSH
60550: LD_VAR 0 1
60554: PPUSH
60555: CALL_OW 251
60559: PPUSH
60560: LD_VAR 0 7
60564: PPUSH
60565: LD_VAR 0 5
60569: PPUSH
60570: CALL_OW 273
60574: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60575: LD_VAR 0 9
60579: PPUSH
60580: LD_VAR 0 10
60584: PPUSH
60585: CALL_OW 488
60589: NOT
60590: IFFALSE 60594
// exit ;
60592: GO 60716
// ComAnimCustom ( unit , 1 ) ;
60594: LD_VAR 0 1
60598: PPUSH
60599: LD_INT 1
60601: PPUSH
60602: CALL_OW 592
// p := 0 ;
60606: LD_ADDR_VAR 0 12
60610: PUSH
60611: LD_INT 0
60613: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60614: LD_VAR 0 9
60618: PPUSH
60619: LD_VAR 0 10
60623: PPUSH
60624: LD_VAR 0 6
60628: PPUSH
60629: LD_VAR 0 8
60633: PPUSH
60634: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60638: LD_INT 35
60640: PPUSH
60641: CALL_OW 67
// p := Inc ( p ) ;
60645: LD_ADDR_VAR 0 12
60649: PUSH
60650: LD_VAR 0 12
60654: PPUSH
60655: CALL 42265 0 1
60659: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60660: LD_VAR 0 12
60664: PUSH
60665: LD_INT 3
60667: EQUAL
60668: IFTRUE 60682
60670: PUSH
60671: LD_VAR 0 1
60675: PPUSH
60676: CALL_OW 302
60680: NOT
60681: OR
60682: IFTRUE 60695
60684: PUSH
60685: LD_VAR 0 1
60689: PPUSH
60690: CALL_OW 301
60694: OR
60695: IFFALSE 60638
// RemoveSeeing ( _x , _y , side ) ;
60697: LD_VAR 0 9
60701: PPUSH
60702: LD_VAR 0 10
60706: PPUSH
60707: LD_VAR 0 6
60711: PPUSH
60712: CALL_OW 331
// end ; end_of_file
60716: LD_VAR 0 4
60720: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60721: PPOPN 6
60723: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60724: LD_EXP 1
60728: PUSH
60729: LD_INT 4
60731: EQUAL
60732: IFFALSE 60768
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60734: LD_STRING setGameDifficulty(
60736: PUSH
60737: LD_OWVAR 67
60741: STR
60742: PUSH
60743: LD_STRING )
60745: STR
60746: PPUSH
60747: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60751: LD_STRING displayDifficulty(
60753: PUSH
60754: LD_OWVAR 67
60758: STR
60759: PUSH
60760: LD_STRING )
60762: STR
60763: PPUSH
60764: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60768: CALL 60797 0 0
// end ; end_of_file
60772: PPOPN 1
60774: END
// every 0 0$1 do
60775: GO 60777
60777: DISABLE
// begin enable ;
60778: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60779: LD_STRING updateTimer(
60781: PUSH
60782: LD_OWVAR 1
60786: STR
60787: PUSH
60788: LD_STRING );
60790: STR
60791: PPUSH
60792: CALL_OW 559
// end ;
60796: END
// export function SOS_MapStart ( ) ; begin
60797: LD_INT 0
60799: PPUSH
// UpdateFactoryWaypoints ( ) ;
60800: CALL 61731 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60804: CALL 61983 0 0
// ParseMultiDataToLua ( ) ;
60808: CALL 62130 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60812: LD_STRING setSpecLogoNumber(
60814: PUSH
60815: LD_INT 2
60817: STR
60818: PUSH
60819: LD_STRING ,
60821: STR
60822: PUSH
60823: LD_INT 1
60825: STR
60826: PUSH
60827: LD_STRING )
60829: STR
60830: PPUSH
60831: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60835: LD_STRING setSpecLogoNumber(
60837: PUSH
60838: LD_INT 3
60840: STR
60841: PUSH
60842: LD_STRING ,
60844: STR
60845: PUSH
60846: LD_INT 2
60848: STR
60849: PUSH
60850: LD_STRING )
60852: STR
60853: PPUSH
60854: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60858: LD_STRING setSpecLogoNumber(
60860: PUSH
60861: LD_INT 4
60863: STR
60864: PUSH
60865: LD_STRING ,
60867: STR
60868: PUSH
60869: LD_INT 3
60871: STR
60872: PUSH
60873: LD_STRING )
60875: STR
60876: PPUSH
60877: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60881: LD_STRING setSpecLogoNumber(
60883: PUSH
60884: LD_INT 5
60886: STR
60887: PUSH
60888: LD_STRING ,
60890: STR
60891: PUSH
60892: LD_INT 4
60894: STR
60895: PUSH
60896: LD_STRING )
60898: STR
60899: PPUSH
60900: CALL_OW 559
// end ;
60904: LD_VAR 0 1
60908: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
60909: LD_INT 0
60911: PPUSH
60912: PPUSH
60913: PPUSH
60914: PPUSH
60915: PPUSH
60916: PPUSH
60917: PPUSH
60918: PPUSH
60919: PPUSH
// for i := 1 to 8 do
60920: LD_ADDR_VAR 0 2
60924: PUSH
60925: DOUBLE
60926: LD_INT 1
60928: DEC
60929: ST_TO_ADDR
60930: LD_INT 8
60932: PUSH
60933: FOR_TO
60934: IFFALSE 61319
// begin if mpSidePositions [ i ] then
60936: LD_EXP 5
60940: PUSH
60941: LD_VAR 0 2
60945: ARRAY
60946: IFFALSE 61317
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
60948: LD_ADDR_VAR 0 7
60952: PUSH
60953: LD_INT 22
60955: PUSH
60956: LD_VAR 0 2
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 21
60967: PUSH
60968: LD_INT 1
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PPUSH
60979: CALL_OW 69
60983: PPUSH
60984: CALL 4960 0 1
60988: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60989: LD_ADDR_VAR 0 9
60993: PUSH
60994: LD_INT 22
60996: PUSH
60997: LD_VAR 0 2
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 2
61008: PUSH
61009: LD_INT 30
61011: PUSH
61012: LD_INT 0
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 30
61021: PUSH
61022: LD_INT 1
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: LIST
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PPUSH
61038: CALL_OW 69
61042: ST_TO_ADDR
// crates := 0 ;
61043: LD_ADDR_VAR 0 4
61047: PUSH
61048: LD_INT 0
61050: ST_TO_ADDR
// oil := 0 ;
61051: LD_ADDR_VAR 0 5
61055: PUSH
61056: LD_INT 0
61058: ST_TO_ADDR
// sib := 0 ;
61059: LD_ADDR_VAR 0 6
61063: PUSH
61064: LD_INT 0
61066: ST_TO_ADDR
// if bases then
61067: LD_VAR 0 9
61071: IFFALSE 61177
// begin for j in bases do
61073: LD_ADDR_VAR 0 3
61077: PUSH
61078: LD_VAR 0 9
61082: PUSH
61083: FOR_IN
61084: IFFALSE 61175
// begin base := GetBase ( j ) ;
61086: LD_ADDR_VAR 0 8
61090: PUSH
61091: LD_VAR 0 3
61095: PPUSH
61096: CALL_OW 274
61100: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61101: LD_ADDR_VAR 0 4
61105: PUSH
61106: LD_VAR 0 4
61110: PUSH
61111: LD_VAR 0 8
61115: PPUSH
61116: LD_INT 1
61118: PPUSH
61119: CALL_OW 275
61123: PLUS
61124: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61125: LD_ADDR_VAR 0 5
61129: PUSH
61130: LD_VAR 0 5
61134: PUSH
61135: LD_VAR 0 8
61139: PPUSH
61140: LD_INT 2
61142: PPUSH
61143: CALL_OW 275
61147: PLUS
61148: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61149: LD_ADDR_VAR 0 6
61153: PUSH
61154: LD_VAR 0 6
61158: PUSH
61159: LD_VAR 0 8
61163: PPUSH
61164: LD_INT 3
61166: PPUSH
61167: CALL_OW 275
61171: PLUS
61172: ST_TO_ADDR
// end ;
61173: GO 61083
61175: POP
61176: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61177: LD_STRING setSpecText(
61179: PUSH
61180: LD_VAR 0 2
61184: STR
61185: PUSH
61186: LD_STRING ,
61188: STR
61189: PUSH
61190: LD_INT 2
61192: STR
61193: PUSH
61194: LD_STRING ,
61196: STR
61197: PUSH
61198: LD_VAR 0 4
61202: STR
61203: PUSH
61204: LD_STRING )
61206: STR
61207: PPUSH
61208: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61212: LD_STRING setSpecText(
61214: PUSH
61215: LD_VAR 0 2
61219: STR
61220: PUSH
61221: LD_STRING ,
61223: STR
61224: PUSH
61225: LD_INT 3
61227: STR
61228: PUSH
61229: LD_STRING ,
61231: STR
61232: PUSH
61233: LD_VAR 0 5
61237: STR
61238: PUSH
61239: LD_STRING )
61241: STR
61242: PPUSH
61243: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61247: LD_STRING setSpecText(
61249: PUSH
61250: LD_VAR 0 2
61254: STR
61255: PUSH
61256: LD_STRING ,
61258: STR
61259: PUSH
61260: LD_INT 4
61262: STR
61263: PUSH
61264: LD_STRING ,
61266: STR
61267: PUSH
61268: LD_VAR 0 6
61272: STR
61273: PUSH
61274: LD_STRING )
61276: STR
61277: PPUSH
61278: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61282: LD_STRING setSpecText(
61284: PUSH
61285: LD_VAR 0 2
61289: STR
61290: PUSH
61291: LD_STRING ,
61293: STR
61294: PUSH
61295: LD_INT 5
61297: STR
61298: PUSH
61299: LD_STRING ,
61301: STR
61302: PUSH
61303: LD_VAR 0 7
61307: STR
61308: PUSH
61309: LD_STRING )
61311: STR
61312: PPUSH
61313: CALL_OW 559
// end ; end ;
61317: GO 60933
61319: POP
61320: POP
// end ;
61321: LD_VAR 0 1
61325: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61326: LD_INT 2
61328: PUSH
61329: LD_INT 30
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 30
61341: PUSH
61342: LD_INT 1
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: LIST
61353: PPUSH
61354: CALL_OW 69
61358: IFFALSE 61368
61360: GO 61362
61362: DISABLE
// begin enable ;
61363: ENABLE
// UpdateSpectatorBar ;
61364: CALL 60909 0 0
// end ;
61368: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61369: LD_INT 0
61371: PPUSH
// end ;
61372: LD_VAR 0 12
61376: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61377: LD_INT 0
61379: PPUSH
61380: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61381: LD_VAR 0 1
61385: NOT
61386: IFTRUE 61405
61388: PUSH
61389: LD_VAR 0 2
61393: PPUSH
61394: LD_VAR 0 3
61398: PPUSH
61399: CALL_OW 488
61403: NOT
61404: OR
61405: IFTRUE 61440
61407: PUSH
61408: LD_VAR 0 1
61412: PPUSH
61413: CALL_OW 266
61417: PUSH
61418: LD_INT 3
61420: NONEQUAL
61421: IFFALSE 61439
61423: PUSH
61424: LD_VAR 0 1
61428: PPUSH
61429: CALL_OW 247
61433: PUSH
61434: LD_INT 1
61436: EQUAL
61437: NOT
61438: AND
61439: OR
61440: IFFALSE 61444
// exit ;
61442: GO 61726
// if GetType ( factory ) = unit_human then
61444: LD_VAR 0 1
61448: PPUSH
61449: CALL_OW 247
61453: PUSH
61454: LD_INT 1
61456: EQUAL
61457: IFFALSE 61474
// factory := IsInUnit ( factory ) ;
61459: LD_ADDR_VAR 0 1
61463: PUSH
61464: LD_VAR 0 1
61468: PPUSH
61469: CALL_OW 310
61473: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61474: LD_VAR 0 1
61478: PPUSH
61479: CALL_OW 266
61483: PUSH
61484: LD_INT 3
61486: NONEQUAL
61487: IFFALSE 61491
// exit ;
61489: GO 61726
// for i := 1 to Count ( factoryWaypoints ) do
61491: LD_ADDR_VAR 0 5
61495: PUSH
61496: DOUBLE
61497: LD_INT 1
61499: DEC
61500: ST_TO_ADDR
61501: LD_EXP 57
61505: PPUSH
61506: CALL 4960 0 1
61510: PUSH
61511: FOR_TO
61512: IFFALSE 61674
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61514: LD_VAR 0 2
61518: PPUSH
61519: LD_VAR 0 3
61523: PPUSH
61524: CALL_OW 428
61528: PUSH
61529: LD_EXP 57
61533: PUSH
61534: LD_VAR 0 5
61538: ARRAY
61539: PUSH
61540: LD_INT 2
61542: ARRAY
61543: EQUAL
61544: IFFALSE 61576
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61546: LD_ADDR_EXP 57
61550: PUSH
61551: LD_EXP 57
61555: PPUSH
61556: LD_VAR 0 5
61560: PPUSH
61561: CALL_OW 3
61565: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61566: CALL 61731 0 0
// exit ;
61570: POP
61571: POP
61572: GO 61726
// end else
61574: GO 61672
// if factory = factoryWaypoints [ i ] [ 2 ] then
61576: LD_VAR 0 1
61580: PUSH
61581: LD_EXP 57
61585: PUSH
61586: LD_VAR 0 5
61590: ARRAY
61591: PUSH
61592: LD_INT 2
61594: ARRAY
61595: EQUAL
61596: IFFALSE 61672
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61598: LD_ADDR_EXP 57
61602: PUSH
61603: LD_EXP 57
61607: PPUSH
61608: LD_VAR 0 5
61612: PPUSH
61613: CALL_OW 3
61617: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61618: LD_ADDR_EXP 57
61622: PUSH
61623: LD_EXP 57
61627: PPUSH
61628: LD_VAR 0 1
61632: PPUSH
61633: CALL_OW 255
61637: PUSH
61638: LD_VAR 0 1
61642: PUSH
61643: LD_VAR 0 2
61647: PUSH
61648: LD_VAR 0 3
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: PPUSH
61659: CALL 40892 0 2
61663: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61664: CALL 61731 0 0
// exit ;
61668: POP
61669: POP
61670: GO 61726
// end ; end ;
61672: GO 61511
61674: POP
61675: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61676: LD_ADDR_EXP 57
61680: PUSH
61681: LD_EXP 57
61685: PPUSH
61686: LD_VAR 0 1
61690: PPUSH
61691: CALL_OW 255
61695: PUSH
61696: LD_VAR 0 1
61700: PUSH
61701: LD_VAR 0 2
61705: PUSH
61706: LD_VAR 0 3
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: PPUSH
61717: CALL 40892 0 2
61721: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61722: CALL 61731 0 0
// end ;
61726: LD_VAR 0 4
61730: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61731: LD_INT 0
61733: PPUSH
61734: PPUSH
61735: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61736: LD_STRING resetFactoryWaypoint();
61738: PPUSH
61739: CALL_OW 559
// if factoryWaypoints then
61743: LD_EXP 57
61747: IFFALSE 61868
// begin list := factoryWaypoints ;
61749: LD_ADDR_VAR 0 3
61753: PUSH
61754: LD_EXP 57
61758: ST_TO_ADDR
// for i := 1 to list do
61759: LD_ADDR_VAR 0 2
61763: PUSH
61764: DOUBLE
61765: LD_INT 1
61767: DEC
61768: ST_TO_ADDR
61769: LD_VAR 0 3
61773: PUSH
61774: FOR_TO
61775: IFFALSE 61866
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61777: LD_STRING setFactoryWaypointXY(
61779: PUSH
61780: LD_VAR 0 3
61784: PUSH
61785: LD_VAR 0 2
61789: ARRAY
61790: PUSH
61791: LD_INT 1
61793: ARRAY
61794: STR
61795: PUSH
61796: LD_STRING ,
61798: STR
61799: PUSH
61800: LD_VAR 0 3
61804: PUSH
61805: LD_VAR 0 2
61809: ARRAY
61810: PUSH
61811: LD_INT 2
61813: ARRAY
61814: STR
61815: PUSH
61816: LD_STRING ,
61818: STR
61819: PUSH
61820: LD_VAR 0 3
61824: PUSH
61825: LD_VAR 0 2
61829: ARRAY
61830: PUSH
61831: LD_INT 3
61833: ARRAY
61834: STR
61835: PUSH
61836: LD_STRING ,
61838: STR
61839: PUSH
61840: LD_VAR 0 3
61844: PUSH
61845: LD_VAR 0 2
61849: ARRAY
61850: PUSH
61851: LD_INT 4
61853: ARRAY
61854: STR
61855: PUSH
61856: LD_STRING )
61858: STR
61859: PPUSH
61860: CALL_OW 559
61864: GO 61774
61866: POP
61867: POP
// end ; end ;
61868: LD_VAR 0 1
61872: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61873: LD_INT 0
61875: PPUSH
// if HexInfo ( x , y ) = warehouse then
61876: LD_VAR 0 2
61880: PPUSH
61881: LD_VAR 0 3
61885: PPUSH
61886: CALL_OW 428
61890: PUSH
61891: LD_VAR 0 1
61895: EQUAL
61896: IFFALSE 61923
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61898: LD_ADDR_EXP 59
61902: PUSH
61903: LD_EXP 59
61907: PPUSH
61908: LD_VAR 0 1
61912: PPUSH
61913: LD_INT 0
61915: PPUSH
61916: CALL_OW 1
61920: ST_TO_ADDR
61921: GO 61974
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61923: LD_ADDR_EXP 59
61927: PUSH
61928: LD_EXP 59
61932: PPUSH
61933: LD_VAR 0 1
61937: PPUSH
61938: LD_VAR 0 1
61942: PPUSH
61943: CALL_OW 255
61947: PUSH
61948: LD_VAR 0 1
61952: PUSH
61953: LD_VAR 0 2
61957: PUSH
61958: LD_VAR 0 3
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: PPUSH
61969: CALL_OW 1
61973: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61974: CALL 61983 0 0
// end ;
61978: LD_VAR 0 4
61982: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61983: LD_INT 0
61985: PPUSH
61986: PPUSH
61987: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61988: LD_STRING resetWarehouseGatheringPoints();
61990: PPUSH
61991: CALL_OW 559
// if warehouseGatheringPoints then
61995: LD_EXP 59
61999: IFFALSE 62125
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62001: LD_ADDR_VAR 0 3
62005: PUSH
62006: LD_EXP 59
62010: PPUSH
62011: CALL 44826 0 1
62015: ST_TO_ADDR
// for i := 1 to list do
62016: LD_ADDR_VAR 0 2
62020: PUSH
62021: DOUBLE
62022: LD_INT 1
62024: DEC
62025: ST_TO_ADDR
62026: LD_VAR 0 3
62030: PUSH
62031: FOR_TO
62032: IFFALSE 62123
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62034: LD_STRING setWarehouseGatheringPointXY(
62036: PUSH
62037: LD_VAR 0 3
62041: PUSH
62042: LD_VAR 0 2
62046: ARRAY
62047: PUSH
62048: LD_INT 1
62050: ARRAY
62051: STR
62052: PUSH
62053: LD_STRING ,
62055: STR
62056: PUSH
62057: LD_VAR 0 3
62061: PUSH
62062: LD_VAR 0 2
62066: ARRAY
62067: PUSH
62068: LD_INT 2
62070: ARRAY
62071: STR
62072: PUSH
62073: LD_STRING ,
62075: STR
62076: PUSH
62077: LD_VAR 0 3
62081: PUSH
62082: LD_VAR 0 2
62086: ARRAY
62087: PUSH
62088: LD_INT 3
62090: ARRAY
62091: STR
62092: PUSH
62093: LD_STRING ,
62095: STR
62096: PUSH
62097: LD_VAR 0 3
62101: PUSH
62102: LD_VAR 0 2
62106: ARRAY
62107: PUSH
62108: LD_INT 4
62110: ARRAY
62111: STR
62112: PUSH
62113: LD_STRING )
62115: STR
62116: PPUSH
62117: CALL_OW 559
62121: GO 62031
62123: POP
62124: POP
// end ; end ;
62125: LD_VAR 0 1
62129: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62130: LD_INT 0
62132: PPUSH
62133: PPUSH
// if not mpSidePositions then
62134: LD_EXP 5
62138: NOT
62139: IFFALSE 62143
// exit ;
62141: GO 62214
// result :=  ;
62143: LD_ADDR_VAR 0 1
62147: PUSH
62148: LD_STRING 
62150: ST_TO_ADDR
// for i := 1 to 8 do
62151: LD_ADDR_VAR 0 2
62155: PUSH
62156: DOUBLE
62157: LD_INT 1
62159: DEC
62160: ST_TO_ADDR
62161: LD_INT 8
62163: PUSH
62164: FOR_TO
62165: IFFALSE 62195
// begin result := result & mpSidePositions [ i ] & ; ;
62167: LD_ADDR_VAR 0 1
62171: PUSH
62172: LD_VAR 0 1
62176: PUSH
62177: LD_EXP 5
62181: PUSH
62182: LD_VAR 0 2
62186: ARRAY
62187: STR
62188: PUSH
62189: LD_STRING ;
62191: STR
62192: ST_TO_ADDR
// end ;
62193: GO 62164
62195: POP
62196: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62197: LD_STRING setMultiplayerRealPosition("
62199: PUSH
62200: LD_VAR 0 1
62204: STR
62205: PUSH
62206: LD_STRING ");
62208: STR
62209: PPUSH
62210: CALL_OW 559
// end ;
62214: LD_VAR 0 1
62218: RET
