// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45576 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 45891 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 9
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 27
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 17
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 3
 844: PUSH
 845: LD_INT 4
 847: PUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 6
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea , MZSpecialArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 16
 866: PUSH
 867: LD_INT 7
 869: PUSH
 870: LD_INT 8
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 17
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 4
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 22
 921: PUSH
 922: LD_EXP 4
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 23
 935: PUSH
 936: LD_EXP 4
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 13
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 25
 963: PUSH
 964: LD_EXP 4
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 4
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 4
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// mpKingArea := 0 ;
1009: LD_ADDR_EXP 31
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// mpPoints := 0 ;
1017: LD_ADDR_EXP 32
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// mpEmissions := 0 ;
1025: LD_ADDR_EXP 34
1029: PUSH
1030: LD_INT 0
1032: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1033: LD_EXP 4
1037: PUSH
1038: LD_INT 9
1040: ARRAY
1041: IFFALSE 1173
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1043: LD_ADDR_EXP 33
1047: PUSH
1048: LD_INT 1
1050: PUSH
1051: LD_INT 1
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: LD_INT 2
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 1
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PUSH
1088: LD_INT 12
1090: PUSH
1091: LD_INT 1
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: LD_INT 24
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 12
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: LD_INT 23
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 21
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 42
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 21
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 42
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1173: LD_ADDR_EXP 14
1177: PUSH
1178: LD_EXP 4
1182: PUSH
1183: LD_INT 11
1185: ARRAY
1186: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1187: LD_ADDR_EXP 20
1191: PUSH
1192: LD_EXP 4
1196: PUSH
1197: LD_INT 12
1199: ARRAY
1200: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1201: LD_ADDR_EXP 24
1205: PUSH
1206: LD_EXP 4
1210: PUSH
1211: LD_INT 13
1213: ARRAY
1214: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1215: LD_ADDR_EXP 30
1219: PUSH
1220: LD_EXP 4
1224: PUSH
1225: LD_INT 14
1227: ARRAY
1228: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1229: LD_ADDR_EXP 28
1233: PUSH
1234: LD_EXP 4
1238: PUSH
1239: LD_INT 15
1241: ARRAY
1242: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1243: LD_ADDR_EXP 26
1247: PUSH
1248: LD_EXP 4
1252: PUSH
1253: LD_INT 18
1255: ARRAY
1256: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1257: LD_ADDR_EXP 18
1261: PUSH
1262: LD_EXP 4
1266: PUSH
1267: LD_INT 21
1269: ARRAY
1270: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1271: LD_ADDR_EXP 29
1275: PUSH
1276: LD_INT 9
1278: PUSH
1279: LD_INT 10
1281: PUSH
1282: LD_INT 11
1284: PUSH
1285: LD_INT 12
1287: PUSH
1288: LD_INT 13
1290: PUSH
1291: LD_INT 14
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 0 ) , GetBuildingFromArea ( depotArea2 , 0 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 3 ) ] ;
1302: LD_ADDR_VAR 0 8
1306: PUSH
1307: LD_INT 15
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL 45031 0 2
1317: PUSH
1318: LD_INT 16
1320: PPUSH
1321: LD_INT 0
1323: PPUSH
1324: CALL 45031 0 2
1328: PUSH
1329: LD_INT 17
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL 45031 0 2
1339: PUSH
1340: LD_INT 33
1342: PPUSH
1343: LD_INT 3
1345: PPUSH
1346: CALL 45031 0 2
1350: PUSH
1351: LD_INT 39
1353: PPUSH
1354: LD_INT 3
1356: PPUSH
1357: CALL 45031 0 2
1361: PUSH
1362: LD_INT 45
1364: PPUSH
1365: LD_INT 3
1367: PPUSH
1368: CALL 45031 0 2
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1381: LD_ADDR_VAR 0 3
1385: PUSH
1386: DOUBLE
1387: LD_INT 1
1389: DEC
1390: ST_TO_ADDR
1391: LD_VAR 0 8
1395: PPUSH
1396: CALL 4883 0 1
1400: PUSH
1401: FOR_TO
1402: IFFALSE 1506
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1404: LD_ADDR_EXP 19
1408: PUSH
1409: LD_EXP 19
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: LD_VAR 0 8
1423: PUSH
1424: LD_VAR 0 3
1428: ARRAY
1429: PUSH
1430: LD_INT 1
1432: ARRAY
1433: PPUSH
1434: LD_VAR 0 8
1438: PUSH
1439: LD_VAR 0 3
1443: ARRAY
1444: PUSH
1445: LD_INT 3
1447: ARRAY
1448: PPUSH
1449: LD_INT 10
1451: PPUSH
1452: CALL_OW 272
1456: PUSH
1457: LD_VAR 0 8
1461: PUSH
1462: LD_VAR 0 3
1466: ARRAY
1467: PUSH
1468: LD_INT 2
1470: ARRAY
1471: PPUSH
1472: LD_VAR 0 8
1476: PUSH
1477: LD_VAR 0 3
1481: ARRAY
1482: PUSH
1483: LD_INT 3
1485: ARRAY
1486: PPUSH
1487: LD_INT 10
1489: PPUSH
1490: CALL_OW 273
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PPUSH
1499: CALL_OW 1
1503: ST_TO_ADDR
1504: GO 1401
1506: POP
1507: POP
// if hasOil then
1508: LD_VAR 0 5
1512: IFFALSE 1623
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1514: LD_ADDR_VAR 0 4
1518: PUSH
1519: LD_EXP 4
1523: PUSH
1524: LD_INT 6
1526: ARRAY
1527: PUSH
1528: LD_INT 2
1530: EQUAL
1531: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1532: LD_ADDR_EXP 10
1536: PUSH
1537: LD_INT 18
1539: PPUSH
1540: LD_VAR 0 4
1544: PPUSH
1545: CALL 44864 0 2
1549: PUSH
1550: LD_INT 19
1552: PPUSH
1553: LD_VAR 0 4
1557: PPUSH
1558: CALL 44864 0 2
1562: PUSH
1563: LD_INT 20
1565: PPUSH
1566: LD_VAR 0 4
1570: PPUSH
1571: CALL 44864 0 2
1575: PUSH
1576: LD_INT 37
1578: PPUSH
1579: LD_VAR 0 4
1583: PPUSH
1584: CALL 44864 0 2
1588: PUSH
1589: LD_INT 43
1591: PPUSH
1592: LD_VAR 0 4
1596: PPUSH
1597: CALL 44864 0 2
1601: PUSH
1602: LD_INT 49
1604: PPUSH
1605: LD_VAR 0 4
1609: PPUSH
1610: CALL 44864 0 2
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: ST_TO_ADDR
// end ; if hasSib then
1623: LD_VAR 0 6
1627: IFFALSE 1738
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1629: LD_ADDR_VAR 0 4
1633: PUSH
1634: LD_EXP 4
1638: PUSH
1639: LD_INT 7
1641: ARRAY
1642: PUSH
1643: LD_INT 2
1645: EQUAL
1646: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1647: LD_ADDR_EXP 11
1651: PUSH
1652: LD_INT 21
1654: PPUSH
1655: LD_VAR 0 4
1659: PPUSH
1660: CALL 44864 0 2
1664: PUSH
1665: LD_INT 22
1667: PPUSH
1668: LD_VAR 0 4
1672: PPUSH
1673: CALL 44864 0 2
1677: PUSH
1678: LD_INT 23
1680: PPUSH
1681: LD_VAR 0 4
1685: PPUSH
1686: CALL 44864 0 2
1690: PUSH
1691: LD_INT 38
1693: PPUSH
1694: LD_VAR 0 4
1698: PPUSH
1699: CALL 44864 0 2
1703: PUSH
1704: LD_INT 44
1706: PPUSH
1707: LD_VAR 0 4
1711: PPUSH
1712: CALL 44864 0 2
1716: PUSH
1717: LD_INT 50
1719: PPUSH
1720: LD_VAR 0 4
1724: PPUSH
1725: CALL 44864 0 2
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1738: LD_VAR 0 7
1742: PUSH
1743: LD_INT 1
1745: GREATEREQUAL
1746: IFFALSE 1758
// mpDepots := startPos ;
1748: LD_ADDR_EXP 12
1752: PUSH
1753: LD_VAR 0 8
1757: ST_TO_ADDR
// if baseLevel >= 2 then
1758: LD_VAR 0 7
1762: PUSH
1763: LD_INT 2
1765: GREATEREQUAL
1766: IFFALSE 2081
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 0 ) ] ] ;
1768: LD_ADDR_EXP 15
1772: PUSH
1773: LD_INT 31
1775: PUSH
1776: LD_INT 24
1778: PPUSH
1779: LD_INT 3
1781: PPUSH
1782: CALL 45031 0 2
1786: ADD
1787: PUSH
1788: LD_INT 31
1790: PUSH
1791: LD_INT 25
1793: PPUSH
1794: LD_INT 3
1796: PPUSH
1797: CALL 45031 0 2
1801: ADD
1802: PUSH
1803: LD_INT 4
1805: PUSH
1806: LD_INT 26
1808: PPUSH
1809: LD_INT 3
1811: PPUSH
1812: CALL 45031 0 2
1816: ADD
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 31
1825: PUSH
1826: LD_INT 27
1828: PPUSH
1829: LD_INT 3
1831: PPUSH
1832: CALL 45031 0 2
1836: ADD
1837: PUSH
1838: LD_INT 31
1840: PUSH
1841: LD_INT 28
1843: PPUSH
1844: LD_INT 4
1846: PPUSH
1847: CALL 45031 0 2
1851: ADD
1852: PUSH
1853: LD_INT 4
1855: PUSH
1856: LD_INT 29
1858: PPUSH
1859: LD_INT 3
1861: PPUSH
1862: CALL 45031 0 2
1866: ADD
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 31
1875: PUSH
1876: LD_INT 30
1878: PPUSH
1879: LD_INT 3
1881: PPUSH
1882: CALL 45031 0 2
1886: ADD
1887: PUSH
1888: LD_INT 31
1890: PUSH
1891: LD_INT 31
1893: PPUSH
1894: LD_INT 4
1896: PPUSH
1897: CALL 45031 0 2
1901: ADD
1902: PUSH
1903: LD_INT 4
1905: PUSH
1906: LD_INT 32
1908: PPUSH
1909: LD_INT 3
1911: PPUSH
1912: CALL 45031 0 2
1916: ADD
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 31
1925: PUSH
1926: LD_INT 34
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: CALL 45031 0 2
1936: ADD
1937: PUSH
1938: LD_INT 31
1940: PUSH
1941: LD_INT 35
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL 45031 0 2
1951: ADD
1952: PUSH
1953: LD_INT 4
1955: PUSH
1956: LD_INT 36
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL 45031 0 2
1966: ADD
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 31
1975: PUSH
1976: LD_INT 40
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL 45031 0 2
1986: ADD
1987: PUSH
1988: LD_INT 31
1990: PUSH
1991: LD_INT 41
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL 45031 0 2
2001: ADD
2002: PUSH
2003: LD_INT 4
2005: PUSH
2006: LD_INT 42
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL 45031 0 2
2016: ADD
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 31
2025: PUSH
2026: LD_INT 46
2028: PPUSH
2029: LD_INT 0
2031: PPUSH
2032: CALL 45031 0 2
2036: ADD
2037: PUSH
2038: LD_INT 31
2040: PUSH
2041: LD_INT 47
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL 45031 0 2
2051: ADD
2052: PUSH
2053: LD_INT 4
2055: PUSH
2056: LD_INT 48
2058: PPUSH
2059: LD_INT 0
2061: PPUSH
2062: CALL 45031 0 2
2066: ADD
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: ST_TO_ADDR
// end ; end ;
2081: LD_VAR 0 2
2085: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2086: GO 2088
2088: DISABLE
2089: LD_INT 0
2091: PPUSH
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
2096: PPUSH
2097: PPUSH
2098: PPUSH
// begin if not mpShipments then
2099: LD_EXP 25
2103: NOT
2104: IFFALSE 2108
// exit ;
2106: GO 2673
// case mpShipments of 1 :
2108: LD_EXP 25
2112: PUSH
2113: LD_INT 1
2115: DOUBLE
2116: EQUAL
2117: IFTRUE 2121
2119: GO 2156
2121: POP
// begin time := 0 0$30 ;
2122: LD_ADDR_VAR 0 4
2126: PUSH
2127: LD_INT 1050
2129: ST_TO_ADDR
// normalTime := 0 0$30 ;
2130: LD_ADDR_VAR 0 6
2134: PUSH
2135: LD_INT 1050
2137: ST_TO_ADDR
// maxTime := 1 1$20 ;
2138: LD_ADDR_VAR 0 8
2142: PUSH
2143: LD_INT 2800
2145: ST_TO_ADDR
// delayTime := 0 0$5 ;
2146: LD_ADDR_VAR 0 7
2150: PUSH
2151: LD_INT 175
2153: ST_TO_ADDR
// end ; 2 :
2154: GO 2286
2156: LD_INT 2
2158: DOUBLE
2159: EQUAL
2160: IFTRUE 2164
2162: GO 2199
2164: POP
// begin time := 0 0$25 ;
2165: LD_ADDR_VAR 0 4
2169: PUSH
2170: LD_INT 875
2172: ST_TO_ADDR
// normalTime := 0 0$25 ;
2173: LD_ADDR_VAR 0 6
2177: PUSH
2178: LD_INT 875
2180: ST_TO_ADDR
// maxTime := 1 1$10 ;
2181: LD_ADDR_VAR 0 8
2185: PUSH
2186: LD_INT 2450
2188: ST_TO_ADDR
// delayTime := 0 0$4 ;
2189: LD_ADDR_VAR 0 7
2193: PUSH
2194: LD_INT 140
2196: ST_TO_ADDR
// end ; 3 :
2197: GO 2286
2199: LD_INT 3
2201: DOUBLE
2202: EQUAL
2203: IFTRUE 2207
2205: GO 2242
2207: POP
// begin time := 0 0$20 ;
2208: LD_ADDR_VAR 0 4
2212: PUSH
2213: LD_INT 700
2215: ST_TO_ADDR
// normalTime := 0 0$20 ;
2216: LD_ADDR_VAR 0 6
2220: PUSH
2221: LD_INT 700
2223: ST_TO_ADDR
// maxTime := 1 1$00 ;
2224: LD_ADDR_VAR 0 8
2228: PUSH
2229: LD_INT 2100
2231: ST_TO_ADDR
// delayTime := 0 0$3 ;
2232: LD_ADDR_VAR 0 7
2236: PUSH
2237: LD_INT 105
2239: ST_TO_ADDR
// end ; 4 :
2240: GO 2286
2242: LD_INT 4
2244: DOUBLE
2245: EQUAL
2246: IFTRUE 2250
2248: GO 2285
2250: POP
// begin time := 0 0$15 ;
2251: LD_ADDR_VAR 0 4
2255: PUSH
2256: LD_INT 525
2258: ST_TO_ADDR
// normalTime := 0 0$15 ;
2259: LD_ADDR_VAR 0 6
2263: PUSH
2264: LD_INT 525
2266: ST_TO_ADDR
// maxTime := 0 0$55 ;
2267: LD_ADDR_VAR 0 8
2271: PUSH
2272: LD_INT 1925
2274: ST_TO_ADDR
// delayTime := 0 0$2 ;
2275: LD_ADDR_VAR 0 7
2279: PUSH
2280: LD_INT 70
2282: ST_TO_ADDR
// end ; end ;
2283: GO 2286
2285: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 2
2296: PUSH
2297: LD_INT 3
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 5
2305: PUSH
2306: LD_INT 6
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: ST_TO_ADDR
// areas := [ ] ;
2317: LD_ADDR_VAR 0 5
2321: PUSH
2322: EMPTY
2323: ST_TO_ADDR
// for i := 1 to 8 do
2324: LD_ADDR_VAR 0 1
2328: PUSH
2329: DOUBLE
2330: LD_INT 1
2332: DEC
2333: ST_TO_ADDR
2334: LD_INT 8
2336: PUSH
2337: FOR_TO
2338: IFFALSE 2385
// begin if not mpSidePositions [ i ] then
2340: LD_EXP 5
2344: PUSH
2345: LD_VAR 0 1
2349: ARRAY
2350: NOT
2351: IFFALSE 2355
// continue ;
2353: GO 2337
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2355: LD_ADDR_VAR 0 5
2359: PUSH
2360: LD_VAR 0 5
2364: PUSH
2365: LD_VAR 0 3
2369: PUSH
2370: LD_EXP 5
2374: PUSH
2375: LD_VAR 0 1
2379: ARRAY
2380: ARRAY
2381: ADD
2382: ST_TO_ADDR
// end ;
2383: GO 2337
2385: POP
2386: POP
// x := 1 ;
2387: LD_ADDR_VAR 0 2
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// repeat wait ( time ) ;
2395: LD_VAR 0 4
2399: PPUSH
2400: CALL_OW 67
// x := Inc ( x ) ;
2404: LD_ADDR_VAR 0 2
2408: PUSH
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL 41853 0 1
2418: ST_TO_ADDR
// if x > 5 then
2419: LD_VAR 0 2
2423: PUSH
2424: LD_INT 5
2426: GREATER
2427: IFFALSE 2437
// x := 1 ;
2429: LD_ADDR_VAR 0 2
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// for i in areas do
2437: LD_ADDR_VAR 0 1
2441: PUSH
2442: LD_VAR 0 5
2446: PUSH
2447: FOR_IN
2448: IFFALSE 2487
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2450: LD_VAR 0 1
2454: PPUSH
2455: LD_INT 1
2457: PPUSH
2458: CALL_OW 287
2462: PUSH
2463: LD_INT 20
2465: LESS
2466: IFFALSE 2485
// begin CreateCratesArea ( x , i , true ) ;
2468: LD_VAR 0 2
2472: PPUSH
2473: LD_VAR 0 1
2477: PPUSH
2478: LD_INT 1
2480: PPUSH
2481: CALL_OW 55
// end ; end ;
2485: GO 2447
2487: POP
2488: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 100 then
2489: LD_INT 7
2491: PPUSH
2492: LD_INT 1
2494: PPUSH
2495: CALL_OW 287
2499: PUSH
2500: LD_INT 100
2502: LESS
2503: IFFALSE 2547
// for i := 1 to Count ( areas ) do
2505: LD_ADDR_VAR 0 1
2509: PUSH
2510: DOUBLE
2511: LD_INT 1
2513: DEC
2514: ST_TO_ADDR
2515: LD_VAR 0 5
2519: PPUSH
2520: CALL 4883 0 1
2524: PUSH
2525: FOR_TO
2526: IFFALSE 2545
// CreateCratesArea ( x , MZBaseArea , true ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 7
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 55
2543: GO 2525
2545: POP
2546: POP
// if GetResourceArea ( MZSpecialArea , mat_cans ) = 0 then
2547: LD_INT 8
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: CALL_OW 287
2557: PUSH
2558: LD_INT 0
2560: EQUAL
2561: IFFALSE 2600
// begin for i := 1 to 3 do
2563: LD_ADDR_VAR 0 1
2567: PUSH
2568: DOUBLE
2569: LD_INT 1
2571: DEC
2572: ST_TO_ADDR
2573: LD_INT 3
2575: PUSH
2576: FOR_TO
2577: IFFALSE 2596
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2579: LD_VAR 0 2
2583: PPUSH
2584: LD_INT 8
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: CALL_OW 55
2594: GO 2576
2596: POP
2597: POP
// end else
2598: GO 2631
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
2600: LD_INT 8
2602: PPUSH
2603: LD_INT 1
2605: PPUSH
2606: CALL_OW 287
2610: PUSH
2611: LD_INT 30
2613: LESS
2614: IFFALSE 2631
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 8
2623: PPUSH
2624: LD_INT 1
2626: PPUSH
2627: CALL_OW 55
// time := time + delayTime ;
2631: LD_ADDR_VAR 0 4
2635: PUSH
2636: LD_VAR 0 4
2640: PUSH
2641: LD_VAR 0 7
2645: PLUS
2646: ST_TO_ADDR
// if time > maxTime then
2647: LD_VAR 0 4
2651: PUSH
2652: LD_VAR 0 8
2656: GREATER
2657: IFFALSE 2669
// time := normalTime ;
2659: LD_ADDR_VAR 0 4
2663: PUSH
2664: LD_VAR 0 6
2668: ST_TO_ADDR
// until false ;
2669: LD_INT 0
2671: IFFALSE 2395
// end ; end_of_file
2673: PPOPN 8
2675: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2676: LD_VAR 0 1
2680: PPUSH
2681: CALL 53706 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2685: LD_VAR 0 1
2689: PPUSH
2690: CALL 50413 0 1
// end ;
2694: PPOPN 1
2696: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2697: LD_VAR 0 1
2701: PPUSH
2702: CALL 53723 0 1
// end ;
2706: PPOPN 1
2708: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2709: LD_VAR 0 1
2713: PPUSH
2714: CALL 51016 0 1
2718: PPOPN 1
2720: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2721: LD_VAR 0 1
2725: PPUSH
2726: LD_VAR 0 2
2730: PPUSH
2731: CALL 53764 0 2
2735: PPOPN 2
2737: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2738: LD_VAR 0 1
2742: PPUSH
2743: LD_VAR 0 2
2747: PPUSH
2748: LD_VAR 0 3
2752: PPUSH
2753: CALL 51069 0 3
2757: PPOPN 3
2759: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2760: LD_INT 0
2762: PPUSH
2763: PPUSH
// if exist_mode then
2764: LD_VAR 0 2
2768: IFFALSE 2814
// begin unit := CreateCharacter ( prefix & ident ) ;
2770: LD_ADDR_VAR 0 5
2774: PUSH
2775: LD_VAR 0 3
2779: PUSH
2780: LD_VAR 0 1
2784: STR
2785: PPUSH
2786: CALL_OW 34
2790: ST_TO_ADDR
// if unit then
2791: LD_VAR 0 5
2795: IFFALSE 2812
// DeleteCharacters ( prefix & ident ) ;
2797: LD_VAR 0 3
2801: PUSH
2802: LD_VAR 0 1
2806: STR
2807: PPUSH
2808: CALL_OW 40
// end else
2812: GO 2829
// unit := NewCharacter ( ident ) ;
2814: LD_ADDR_VAR 0 5
2818: PUSH
2819: LD_VAR 0 1
2823: PPUSH
2824: CALL_OW 25
2828: ST_TO_ADDR
// result := unit ;
2829: LD_ADDR_VAR 0 4
2833: PUSH
2834: LD_VAR 0 5
2838: ST_TO_ADDR
// end ;
2839: LD_VAR 0 4
2843: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
// if not side or not nation then
2848: LD_VAR 0 1
2852: NOT
2853: PUSH
2854: LD_VAR 0 2
2858: NOT
2859: OR
2860: IFFALSE 2864
// exit ;
2862: GO 3632
// case nation of nation_american :
2864: LD_VAR 0 2
2868: PUSH
2869: LD_INT 1
2871: DOUBLE
2872: EQUAL
2873: IFTRUE 2877
2875: GO 3091
2877: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2878: LD_ADDR_VAR 0 4
2882: PUSH
2883: LD_INT 35
2885: PUSH
2886: LD_INT 45
2888: PUSH
2889: LD_INT 46
2891: PUSH
2892: LD_INT 47
2894: PUSH
2895: LD_INT 82
2897: PUSH
2898: LD_INT 83
2900: PUSH
2901: LD_INT 84
2903: PUSH
2904: LD_INT 85
2906: PUSH
2907: LD_INT 86
2909: PUSH
2910: LD_INT 1
2912: PUSH
2913: LD_INT 2
2915: PUSH
2916: LD_INT 6
2918: PUSH
2919: LD_INT 15
2921: PUSH
2922: LD_INT 16
2924: PUSH
2925: LD_INT 7
2927: PUSH
2928: LD_INT 12
2930: PUSH
2931: LD_INT 13
2933: PUSH
2934: LD_INT 10
2936: PUSH
2937: LD_INT 14
2939: PUSH
2940: LD_INT 20
2942: PUSH
2943: LD_INT 21
2945: PUSH
2946: LD_INT 22
2948: PUSH
2949: LD_INT 25
2951: PUSH
2952: LD_INT 32
2954: PUSH
2955: LD_INT 27
2957: PUSH
2958: LD_INT 36
2960: PUSH
2961: LD_INT 69
2963: PUSH
2964: LD_INT 39
2966: PUSH
2967: LD_INT 34
2969: PUSH
2970: LD_INT 40
2972: PUSH
2973: LD_INT 48
2975: PUSH
2976: LD_INT 49
2978: PUSH
2979: LD_INT 50
2981: PUSH
2982: LD_INT 51
2984: PUSH
2985: LD_INT 52
2987: PUSH
2988: LD_INT 53
2990: PUSH
2991: LD_INT 54
2993: PUSH
2994: LD_INT 55
2996: PUSH
2997: LD_INT 56
2999: PUSH
3000: LD_INT 57
3002: PUSH
3003: LD_INT 58
3005: PUSH
3006: LD_INT 59
3008: PUSH
3009: LD_INT 60
3011: PUSH
3012: LD_INT 61
3014: PUSH
3015: LD_INT 62
3017: PUSH
3018: LD_INT 80
3020: PUSH
3021: LD_INT 82
3023: PUSH
3024: LD_INT 83
3026: PUSH
3027: LD_INT 84
3029: PUSH
3030: LD_INT 85
3032: PUSH
3033: LD_INT 86
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: ST_TO_ADDR
3089: GO 3556
3091: LD_INT 2
3093: DOUBLE
3094: EQUAL
3095: IFTRUE 3099
3097: GO 3325
3099: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3100: LD_ADDR_VAR 0 4
3104: PUSH
3105: LD_INT 35
3107: PUSH
3108: LD_INT 45
3110: PUSH
3111: LD_INT 46
3113: PUSH
3114: LD_INT 47
3116: PUSH
3117: LD_INT 82
3119: PUSH
3120: LD_INT 83
3122: PUSH
3123: LD_INT 84
3125: PUSH
3126: LD_INT 85
3128: PUSH
3129: LD_INT 87
3131: PUSH
3132: LD_INT 70
3134: PUSH
3135: LD_INT 1
3137: PUSH
3138: LD_INT 11
3140: PUSH
3141: LD_INT 3
3143: PUSH
3144: LD_INT 4
3146: PUSH
3147: LD_INT 5
3149: PUSH
3150: LD_INT 6
3152: PUSH
3153: LD_INT 15
3155: PUSH
3156: LD_INT 18
3158: PUSH
3159: LD_INT 7
3161: PUSH
3162: LD_INT 17
3164: PUSH
3165: LD_INT 8
3167: PUSH
3168: LD_INT 20
3170: PUSH
3171: LD_INT 21
3173: PUSH
3174: LD_INT 22
3176: PUSH
3177: LD_INT 72
3179: PUSH
3180: LD_INT 26
3182: PUSH
3183: LD_INT 69
3185: PUSH
3186: LD_INT 39
3188: PUSH
3189: LD_INT 40
3191: PUSH
3192: LD_INT 41
3194: PUSH
3195: LD_INT 42
3197: PUSH
3198: LD_INT 43
3200: PUSH
3201: LD_INT 48
3203: PUSH
3204: LD_INT 49
3206: PUSH
3207: LD_INT 50
3209: PUSH
3210: LD_INT 51
3212: PUSH
3213: LD_INT 52
3215: PUSH
3216: LD_INT 53
3218: PUSH
3219: LD_INT 54
3221: PUSH
3222: LD_INT 55
3224: PUSH
3225: LD_INT 56
3227: PUSH
3228: LD_INT 60
3230: PUSH
3231: LD_INT 61
3233: PUSH
3234: LD_INT 62
3236: PUSH
3237: LD_INT 66
3239: PUSH
3240: LD_INT 67
3242: PUSH
3243: LD_INT 68
3245: PUSH
3246: LD_INT 81
3248: PUSH
3249: LD_INT 82
3251: PUSH
3252: LD_INT 83
3254: PUSH
3255: LD_INT 84
3257: PUSH
3258: LD_INT 85
3260: PUSH
3261: LD_INT 87
3263: PUSH
3264: LD_INT 88
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: ST_TO_ADDR
3323: GO 3556
3325: LD_INT 3
3327: DOUBLE
3328: EQUAL
3329: IFTRUE 3333
3331: GO 3555
3333: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3334: LD_ADDR_VAR 0 4
3338: PUSH
3339: LD_INT 46
3341: PUSH
3342: LD_INT 47
3344: PUSH
3345: LD_INT 1
3347: PUSH
3348: LD_INT 2
3350: PUSH
3351: LD_INT 82
3353: PUSH
3354: LD_INT 83
3356: PUSH
3357: LD_INT 84
3359: PUSH
3360: LD_INT 85
3362: PUSH
3363: LD_INT 86
3365: PUSH
3366: LD_INT 11
3368: PUSH
3369: LD_INT 9
3371: PUSH
3372: LD_INT 20
3374: PUSH
3375: LD_INT 19
3377: PUSH
3378: LD_INT 21
3380: PUSH
3381: LD_INT 24
3383: PUSH
3384: LD_INT 22
3386: PUSH
3387: LD_INT 25
3389: PUSH
3390: LD_INT 28
3392: PUSH
3393: LD_INT 29
3395: PUSH
3396: LD_INT 30
3398: PUSH
3399: LD_INT 31
3401: PUSH
3402: LD_INT 37
3404: PUSH
3405: LD_INT 38
3407: PUSH
3408: LD_INT 32
3410: PUSH
3411: LD_INT 27
3413: PUSH
3414: LD_INT 33
3416: PUSH
3417: LD_INT 69
3419: PUSH
3420: LD_INT 39
3422: PUSH
3423: LD_INT 34
3425: PUSH
3426: LD_INT 40
3428: PUSH
3429: LD_INT 71
3431: PUSH
3432: LD_INT 23
3434: PUSH
3435: LD_INT 44
3437: PUSH
3438: LD_INT 48
3440: PUSH
3441: LD_INT 49
3443: PUSH
3444: LD_INT 50
3446: PUSH
3447: LD_INT 51
3449: PUSH
3450: LD_INT 52
3452: PUSH
3453: LD_INT 53
3455: PUSH
3456: LD_INT 54
3458: PUSH
3459: LD_INT 55
3461: PUSH
3462: LD_INT 56
3464: PUSH
3465: LD_INT 57
3467: PUSH
3468: LD_INT 58
3470: PUSH
3471: LD_INT 59
3473: PUSH
3474: LD_INT 63
3476: PUSH
3477: LD_INT 64
3479: PUSH
3480: LD_INT 65
3482: PUSH
3483: LD_INT 82
3485: PUSH
3486: LD_INT 83
3488: PUSH
3489: LD_INT 84
3491: PUSH
3492: LD_INT 85
3494: PUSH
3495: LD_INT 86
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: ST_TO_ADDR
3553: GO 3556
3555: POP
// if state > - 1 and state < 3 then
3556: LD_VAR 0 3
3560: PUSH
3561: LD_INT 1
3563: NEG
3564: GREATER
3565: PUSH
3566: LD_VAR 0 3
3570: PUSH
3571: LD_INT 3
3573: LESS
3574: AND
3575: IFFALSE 3632
// for i in result do
3577: LD_ADDR_VAR 0 5
3581: PUSH
3582: LD_VAR 0 4
3586: PUSH
3587: FOR_IN
3588: IFFALSE 3630
// if GetTech ( i , side ) <> state then
3590: LD_VAR 0 5
3594: PPUSH
3595: LD_VAR 0 1
3599: PPUSH
3600: CALL_OW 321
3604: PUSH
3605: LD_VAR 0 3
3609: NONEQUAL
3610: IFFALSE 3628
// result := result diff i ;
3612: LD_ADDR_VAR 0 4
3616: PUSH
3617: LD_VAR 0 4
3621: PUSH
3622: LD_VAR 0 5
3626: DIFF
3627: ST_TO_ADDR
3628: GO 3587
3630: POP
3631: POP
// end ;
3632: LD_VAR 0 4
3636: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3637: LD_INT 0
3639: PPUSH
3640: PPUSH
3641: PPUSH
// result := true ;
3642: LD_ADDR_VAR 0 3
3646: PUSH
3647: LD_INT 1
3649: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3650: LD_ADDR_VAR 0 5
3654: PUSH
3655: LD_VAR 0 2
3659: PPUSH
3660: CALL_OW 480
3664: ST_TO_ADDR
// if not tmp then
3665: LD_VAR 0 5
3669: NOT
3670: IFFALSE 3674
// exit ;
3672: GO 3723
// for i in tmp do
3674: LD_ADDR_VAR 0 4
3678: PUSH
3679: LD_VAR 0 5
3683: PUSH
3684: FOR_IN
3685: IFFALSE 3721
// if GetTech ( i , side ) <> state_researched then
3687: LD_VAR 0 4
3691: PPUSH
3692: LD_VAR 0 1
3696: PPUSH
3697: CALL_OW 321
3701: PUSH
3702: LD_INT 2
3704: NONEQUAL
3705: IFFALSE 3719
// begin result := false ;
3707: LD_ADDR_VAR 0 3
3711: PUSH
3712: LD_INT 0
3714: ST_TO_ADDR
// exit ;
3715: POP
3716: POP
3717: GO 3723
// end ;
3719: GO 3684
3721: POP
3722: POP
// end ;
3723: LD_VAR 0 3
3727: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3728: LD_INT 0
3730: PPUSH
3731: PPUSH
3732: PPUSH
3733: PPUSH
3734: PPUSH
3735: PPUSH
3736: PPUSH
3737: PPUSH
3738: PPUSH
3739: PPUSH
3740: PPUSH
3741: PPUSH
3742: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3743: LD_VAR 0 1
3747: NOT
3748: PUSH
3749: LD_VAR 0 1
3753: PPUSH
3754: CALL_OW 257
3758: PUSH
3759: LD_INT 9
3761: NONEQUAL
3762: OR
3763: IFFALSE 3767
// exit ;
3765: GO 4340
// side := GetSide ( unit ) ;
3767: LD_ADDR_VAR 0 9
3771: PUSH
3772: LD_VAR 0 1
3776: PPUSH
3777: CALL_OW 255
3781: ST_TO_ADDR
// tech_space := tech_spacanom ;
3782: LD_ADDR_VAR 0 12
3786: PUSH
3787: LD_INT 29
3789: ST_TO_ADDR
// tech_time := tech_taurad ;
3790: LD_ADDR_VAR 0 13
3794: PUSH
3795: LD_INT 28
3797: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3798: LD_ADDR_VAR 0 11
3802: PUSH
3803: LD_VAR 0 1
3807: PPUSH
3808: CALL_OW 310
3812: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3813: LD_VAR 0 11
3817: PPUSH
3818: CALL_OW 247
3822: PUSH
3823: LD_INT 2
3825: EQUAL
3826: IFFALSE 3830
// exit ;
3828: GO 4340
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3830: LD_ADDR_VAR 0 8
3834: PUSH
3835: LD_INT 81
3837: PUSH
3838: LD_VAR 0 9
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: LD_INT 3
3849: PUSH
3850: LD_INT 21
3852: PUSH
3853: LD_INT 3
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// if not tmp then
3873: LD_VAR 0 8
3877: NOT
3878: IFFALSE 3882
// exit ;
3880: GO 4340
// if in_unit then
3882: LD_VAR 0 11
3886: IFFALSE 3910
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3888: LD_ADDR_VAR 0 10
3892: PUSH
3893: LD_VAR 0 8
3897: PPUSH
3898: LD_VAR 0 11
3902: PPUSH
3903: CALL_OW 74
3907: ST_TO_ADDR
3908: GO 3930
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3910: LD_ADDR_VAR 0 10
3914: PUSH
3915: LD_VAR 0 8
3919: PPUSH
3920: LD_VAR 0 1
3924: PPUSH
3925: CALL_OW 74
3929: ST_TO_ADDR
// if not enemy then
3930: LD_VAR 0 10
3934: NOT
3935: IFFALSE 3939
// exit ;
3937: GO 4340
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3939: LD_VAR 0 11
3943: PUSH
3944: LD_VAR 0 11
3948: PPUSH
3949: LD_VAR 0 10
3953: PPUSH
3954: CALL_OW 296
3958: PUSH
3959: LD_INT 13
3961: GREATER
3962: AND
3963: PUSH
3964: LD_VAR 0 1
3968: PPUSH
3969: LD_VAR 0 10
3973: PPUSH
3974: CALL_OW 296
3978: PUSH
3979: LD_INT 12
3981: GREATER
3982: OR
3983: IFFALSE 3987
// exit ;
3985: GO 4340
// missile := [ 1 ] ;
3987: LD_ADDR_VAR 0 14
3991: PUSH
3992: LD_INT 1
3994: PUSH
3995: EMPTY
3996: LIST
3997: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3998: LD_VAR 0 9
4002: PPUSH
4003: LD_VAR 0 12
4007: PPUSH
4008: CALL_OW 325
4012: IFFALSE 4041
// missile := Replace ( missile , missile + 1 , 2 ) ;
4014: LD_ADDR_VAR 0 14
4018: PUSH
4019: LD_VAR 0 14
4023: PPUSH
4024: LD_VAR 0 14
4028: PUSH
4029: LD_INT 1
4031: PLUS
4032: PPUSH
4033: LD_INT 2
4035: PPUSH
4036: CALL_OW 1
4040: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4041: LD_VAR 0 9
4045: PPUSH
4046: LD_VAR 0 13
4050: PPUSH
4051: CALL_OW 325
4055: PUSH
4056: LD_VAR 0 10
4060: PPUSH
4061: CALL_OW 255
4065: PPUSH
4066: LD_VAR 0 13
4070: PPUSH
4071: CALL_OW 325
4075: NOT
4076: AND
4077: IFFALSE 4106
// missile := Replace ( missile , missile + 1 , 3 ) ;
4079: LD_ADDR_VAR 0 14
4083: PUSH
4084: LD_VAR 0 14
4088: PPUSH
4089: LD_VAR 0 14
4093: PUSH
4094: LD_INT 1
4096: PLUS
4097: PPUSH
4098: LD_INT 3
4100: PPUSH
4101: CALL_OW 1
4105: ST_TO_ADDR
// if missile < 2 then
4106: LD_VAR 0 14
4110: PUSH
4111: LD_INT 2
4113: LESS
4114: IFFALSE 4118
// exit ;
4116: GO 4340
// x := GetX ( enemy ) ;
4118: LD_ADDR_VAR 0 4
4122: PUSH
4123: LD_VAR 0 10
4127: PPUSH
4128: CALL_OW 250
4132: ST_TO_ADDR
// y := GetY ( enemy ) ;
4133: LD_ADDR_VAR 0 5
4137: PUSH
4138: LD_VAR 0 10
4142: PPUSH
4143: CALL_OW 251
4147: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4148: LD_ADDR_VAR 0 6
4152: PUSH
4153: LD_VAR 0 4
4157: PUSH
4158: LD_INT 1
4160: NEG
4161: PPUSH
4162: LD_INT 1
4164: PPUSH
4165: CALL_OW 12
4169: PLUS
4170: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4171: LD_ADDR_VAR 0 7
4175: PUSH
4176: LD_VAR 0 5
4180: PUSH
4181: LD_INT 1
4183: NEG
4184: PPUSH
4185: LD_INT 1
4187: PPUSH
4188: CALL_OW 12
4192: PLUS
4193: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4194: LD_VAR 0 6
4198: PPUSH
4199: LD_VAR 0 7
4203: PPUSH
4204: CALL_OW 488
4208: NOT
4209: IFFALSE 4231
// begin _x := x ;
4211: LD_ADDR_VAR 0 6
4215: PUSH
4216: LD_VAR 0 4
4220: ST_TO_ADDR
// _y := y ;
4221: LD_ADDR_VAR 0 7
4225: PUSH
4226: LD_VAR 0 5
4230: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4231: LD_ADDR_VAR 0 3
4235: PUSH
4236: LD_INT 1
4238: PPUSH
4239: LD_VAR 0 14
4243: PPUSH
4244: CALL_OW 12
4248: ST_TO_ADDR
// case i of 1 :
4249: LD_VAR 0 3
4253: PUSH
4254: LD_INT 1
4256: DOUBLE
4257: EQUAL
4258: IFTRUE 4262
4260: GO 4279
4262: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4263: LD_VAR 0 1
4267: PPUSH
4268: LD_VAR 0 10
4272: PPUSH
4273: CALL_OW 115
4277: GO 4340
4279: LD_INT 2
4281: DOUBLE
4282: EQUAL
4283: IFTRUE 4287
4285: GO 4309
4287: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4288: LD_VAR 0 1
4292: PPUSH
4293: LD_VAR 0 6
4297: PPUSH
4298: LD_VAR 0 7
4302: PPUSH
4303: CALL_OW 153
4307: GO 4340
4309: LD_INT 3
4311: DOUBLE
4312: EQUAL
4313: IFTRUE 4317
4315: GO 4339
4317: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4318: LD_VAR 0 1
4322: PPUSH
4323: LD_VAR 0 6
4327: PPUSH
4328: LD_VAR 0 7
4332: PPUSH
4333: CALL_OW 154
4337: GO 4340
4339: POP
// end ;
4340: LD_VAR 0 2
4344: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4345: LD_INT 0
4347: PPUSH
4348: PPUSH
4349: PPUSH
4350: PPUSH
4351: PPUSH
4352: PPUSH
// if not unit or not building then
4353: LD_VAR 0 1
4357: NOT
4358: PUSH
4359: LD_VAR 0 2
4363: NOT
4364: OR
4365: IFFALSE 4369
// exit ;
4367: GO 4527
// x := GetX ( building ) ;
4369: LD_ADDR_VAR 0 5
4373: PUSH
4374: LD_VAR 0 2
4378: PPUSH
4379: CALL_OW 250
4383: ST_TO_ADDR
// y := GetY ( building ) ;
4384: LD_ADDR_VAR 0 6
4388: PUSH
4389: LD_VAR 0 2
4393: PPUSH
4394: CALL_OW 251
4398: ST_TO_ADDR
// for i = 0 to 5 do
4399: LD_ADDR_VAR 0 4
4403: PUSH
4404: DOUBLE
4405: LD_INT 0
4407: DEC
4408: ST_TO_ADDR
4409: LD_INT 5
4411: PUSH
4412: FOR_TO
4413: IFFALSE 4525
// begin _x := ShiftX ( x , i , 3 ) ;
4415: LD_ADDR_VAR 0 7
4419: PUSH
4420: LD_VAR 0 5
4424: PPUSH
4425: LD_VAR 0 4
4429: PPUSH
4430: LD_INT 3
4432: PPUSH
4433: CALL_OW 272
4437: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4438: LD_ADDR_VAR 0 8
4442: PUSH
4443: LD_VAR 0 6
4447: PPUSH
4448: LD_VAR 0 4
4452: PPUSH
4453: LD_INT 3
4455: PPUSH
4456: CALL_OW 273
4460: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4461: LD_VAR 0 7
4465: PPUSH
4466: LD_VAR 0 8
4470: PPUSH
4471: CALL_OW 488
4475: NOT
4476: IFFALSE 4480
// continue ;
4478: GO 4412
// if HexInfo ( _x , _y ) = 0 then
4480: LD_VAR 0 7
4484: PPUSH
4485: LD_VAR 0 8
4489: PPUSH
4490: CALL_OW 428
4494: PUSH
4495: LD_INT 0
4497: EQUAL
4498: IFFALSE 4523
// begin ComMoveXY ( unit , _x , _y ) ;
4500: LD_VAR 0 1
4504: PPUSH
4505: LD_VAR 0 7
4509: PPUSH
4510: LD_VAR 0 8
4514: PPUSH
4515: CALL_OW 111
// exit ;
4519: POP
4520: POP
4521: GO 4527
// end ; end ;
4523: GO 4412
4525: POP
4526: POP
// end ;
4527: LD_VAR 0 3
4531: RET
// export function ScanBase ( side , base_area ) ; begin
4532: LD_INT 0
4534: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4535: LD_ADDR_VAR 0 3
4539: PUSH
4540: LD_VAR 0 2
4544: PPUSH
4545: LD_INT 81
4547: PUSH
4548: LD_VAR 0 1
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PPUSH
4557: CALL_OW 70
4561: ST_TO_ADDR
// end ;
4562: LD_VAR 0 3
4566: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4567: LD_INT 0
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
// result := false ;
4573: LD_ADDR_VAR 0 2
4577: PUSH
4578: LD_INT 0
4580: ST_TO_ADDR
// side := GetSide ( unit ) ;
4581: LD_ADDR_VAR 0 3
4585: PUSH
4586: LD_VAR 0 1
4590: PPUSH
4591: CALL_OW 255
4595: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4596: LD_ADDR_VAR 0 4
4600: PUSH
4601: LD_VAR 0 1
4605: PPUSH
4606: CALL_OW 248
4610: ST_TO_ADDR
// case nat of 1 :
4611: LD_VAR 0 4
4615: PUSH
4616: LD_INT 1
4618: DOUBLE
4619: EQUAL
4620: IFTRUE 4624
4622: GO 4635
4624: POP
// tech := tech_lassight ; 2 :
4625: LD_ADDR_VAR 0 5
4629: PUSH
4630: LD_INT 12
4632: ST_TO_ADDR
4633: GO 4674
4635: LD_INT 2
4637: DOUBLE
4638: EQUAL
4639: IFTRUE 4643
4641: GO 4654
4643: POP
// tech := tech_mortar ; 3 :
4644: LD_ADDR_VAR 0 5
4648: PUSH
4649: LD_INT 41
4651: ST_TO_ADDR
4652: GO 4674
4654: LD_INT 3
4656: DOUBLE
4657: EQUAL
4658: IFTRUE 4662
4660: GO 4673
4662: POP
// tech := tech_bazooka ; end ;
4663: LD_ADDR_VAR 0 5
4667: PUSH
4668: LD_INT 44
4670: ST_TO_ADDR
4671: GO 4674
4673: POP
// if Researched ( side , tech ) then
4674: LD_VAR 0 3
4678: PPUSH
4679: LD_VAR 0 5
4683: PPUSH
4684: CALL_OW 325
4688: IFFALSE 4715
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: LD_INT 5
4697: PUSH
4698: LD_INT 8
4700: PUSH
4701: LD_INT 9
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: PUSH
4709: LD_VAR 0 4
4713: ARRAY
4714: ST_TO_ADDR
// end ;
4715: LD_VAR 0 2
4719: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4720: LD_INT 0
4722: PPUSH
4723: PPUSH
4724: PPUSH
// if not mines then
4725: LD_VAR 0 2
4729: NOT
4730: IFFALSE 4734
// exit ;
4732: GO 4878
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4734: LD_ADDR_VAR 0 5
4738: PUSH
4739: LD_INT 81
4741: PUSH
4742: LD_VAR 0 1
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: PUSH
4751: LD_INT 3
4753: PUSH
4754: LD_INT 21
4756: PUSH
4757: LD_INT 3
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: PPUSH
4772: CALL_OW 69
4776: ST_TO_ADDR
// for i in mines do
4777: LD_ADDR_VAR 0 4
4781: PUSH
4782: LD_VAR 0 2
4786: PUSH
4787: FOR_IN
4788: IFFALSE 4876
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4790: LD_VAR 0 4
4794: PUSH
4795: LD_INT 1
4797: ARRAY
4798: PPUSH
4799: LD_VAR 0 4
4803: PUSH
4804: LD_INT 2
4806: ARRAY
4807: PPUSH
4808: CALL_OW 458
4812: NOT
4813: IFFALSE 4817
// continue ;
4815: GO 4787
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4817: LD_VAR 0 4
4821: PUSH
4822: LD_INT 1
4824: ARRAY
4825: PPUSH
4826: LD_VAR 0 4
4830: PUSH
4831: LD_INT 2
4833: ARRAY
4834: PPUSH
4835: CALL_OW 428
4839: PUSH
4840: LD_VAR 0 5
4844: IN
4845: IFFALSE 4874
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4847: LD_VAR 0 4
4851: PUSH
4852: LD_INT 1
4854: ARRAY
4855: PPUSH
4856: LD_VAR 0 4
4860: PUSH
4861: LD_INT 2
4863: ARRAY
4864: PPUSH
4865: LD_VAR 0 1
4869: PPUSH
4870: CALL_OW 456
// end ;
4874: GO 4787
4876: POP
4877: POP
// end ;
4878: LD_VAR 0 3
4882: RET
// export function Count ( array ) ; begin
4883: LD_INT 0
4885: PPUSH
// result := array + 0 ;
4886: LD_ADDR_VAR 0 2
4890: PUSH
4891: LD_VAR 0 1
4895: PUSH
4896: LD_INT 0
4898: PLUS
4899: ST_TO_ADDR
// end ;
4900: LD_VAR 0 2
4904: RET
// export function IsEmpty ( building ) ; begin
4905: LD_INT 0
4907: PPUSH
// if not building then
4908: LD_VAR 0 1
4912: NOT
4913: IFFALSE 4917
// exit ;
4915: GO 4960
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4917: LD_ADDR_VAR 0 2
4921: PUSH
4922: LD_VAR 0 1
4926: PUSH
4927: LD_INT 22
4929: PUSH
4930: LD_VAR 0 1
4934: PPUSH
4935: CALL_OW 255
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: LD_INT 58
4946: PUSH
4947: EMPTY
4948: LIST
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PPUSH
4954: CALL_OW 69
4958: IN
4959: ST_TO_ADDR
// end ;
4960: LD_VAR 0 2
4964: RET
// export function IsNotFull ( building ) ; var places ; begin
4965: LD_INT 0
4967: PPUSH
4968: PPUSH
// if not building then
4969: LD_VAR 0 1
4973: NOT
4974: IFFALSE 4978
// exit ;
4976: GO 5006
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_VAR 0 1
4987: PPUSH
4988: LD_INT 3
4990: PUSH
4991: LD_INT 62
4993: PUSH
4994: EMPTY
4995: LIST
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PPUSH
5001: CALL_OW 72
5005: ST_TO_ADDR
// end ;
5006: LD_VAR 0 2
5010: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5011: LD_INT 0
5013: PPUSH
5014: PPUSH
5015: PPUSH
5016: PPUSH
// tmp := [ ] ;
5017: LD_ADDR_VAR 0 3
5021: PUSH
5022: EMPTY
5023: ST_TO_ADDR
// list := [ ] ;
5024: LD_ADDR_VAR 0 5
5028: PUSH
5029: EMPTY
5030: ST_TO_ADDR
// for i = 16 to 25 do
5031: LD_ADDR_VAR 0 4
5035: PUSH
5036: DOUBLE
5037: LD_INT 16
5039: DEC
5040: ST_TO_ADDR
5041: LD_INT 25
5043: PUSH
5044: FOR_TO
5045: IFFALSE 5118
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5047: LD_ADDR_VAR 0 3
5051: PUSH
5052: LD_VAR 0 3
5056: PUSH
5057: LD_INT 22
5059: PUSH
5060: LD_VAR 0 1
5064: PPUSH
5065: CALL_OW 255
5069: PUSH
5070: EMPTY
5071: LIST
5072: LIST
5073: PUSH
5074: LD_INT 91
5076: PUSH
5077: LD_VAR 0 1
5081: PUSH
5082: LD_INT 6
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_VAR 0 4
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: PPUSH
5110: CALL_OW 69
5114: ADD
5115: ST_TO_ADDR
5116: GO 5044
5118: POP
5119: POP
// for i = 1 to tmp do
5120: LD_ADDR_VAR 0 4
5124: PUSH
5125: DOUBLE
5126: LD_INT 1
5128: DEC
5129: ST_TO_ADDR
5130: LD_VAR 0 3
5134: PUSH
5135: FOR_TO
5136: IFFALSE 5224
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5138: LD_ADDR_VAR 0 5
5142: PUSH
5143: LD_VAR 0 5
5147: PUSH
5148: LD_VAR 0 3
5152: PUSH
5153: LD_VAR 0 4
5157: ARRAY
5158: PPUSH
5159: CALL_OW 266
5163: PUSH
5164: LD_VAR 0 3
5168: PUSH
5169: LD_VAR 0 4
5173: ARRAY
5174: PPUSH
5175: CALL_OW 250
5179: PUSH
5180: LD_VAR 0 3
5184: PUSH
5185: LD_VAR 0 4
5189: ARRAY
5190: PPUSH
5191: CALL_OW 251
5195: PUSH
5196: LD_VAR 0 3
5200: PUSH
5201: LD_VAR 0 4
5205: ARRAY
5206: PPUSH
5207: CALL_OW 254
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: PUSH
5218: EMPTY
5219: LIST
5220: ADD
5221: ST_TO_ADDR
5222: GO 5135
5224: POP
5225: POP
// result := list ;
5226: LD_ADDR_VAR 0 2
5230: PUSH
5231: LD_VAR 0 5
5235: ST_TO_ADDR
// end ;
5236: LD_VAR 0 2
5240: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5241: LD_INT 0
5243: PPUSH
5244: PPUSH
5245: PPUSH
5246: PPUSH
5247: PPUSH
5248: PPUSH
5249: PPUSH
// if not factory then
5250: LD_VAR 0 1
5254: NOT
5255: IFFALSE 5259
// exit ;
5257: GO 5852
// if control = control_apeman then
5259: LD_VAR 0 4
5263: PUSH
5264: LD_INT 5
5266: EQUAL
5267: IFFALSE 5376
// begin tmp := UnitsInside ( factory ) ;
5269: LD_ADDR_VAR 0 8
5273: PUSH
5274: LD_VAR 0 1
5278: PPUSH
5279: CALL_OW 313
5283: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5284: LD_VAR 0 8
5288: PPUSH
5289: LD_INT 25
5291: PUSH
5292: LD_INT 12
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PPUSH
5299: CALL_OW 72
5303: NOT
5304: IFFALSE 5314
// control := control_manual ;
5306: LD_ADDR_VAR 0 4
5310: PUSH
5311: LD_INT 1
5313: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5314: LD_ADDR_VAR 0 8
5318: PUSH
5319: LD_VAR 0 1
5323: PPUSH
5324: CALL 5011 0 1
5328: ST_TO_ADDR
// if tmp then
5329: LD_VAR 0 8
5333: IFFALSE 5376
// begin for i in tmp do
5335: LD_ADDR_VAR 0 7
5339: PUSH
5340: LD_VAR 0 8
5344: PUSH
5345: FOR_IN
5346: IFFALSE 5374
// if i [ 1 ] = b_ext_radio then
5348: LD_VAR 0 7
5352: PUSH
5353: LD_INT 1
5355: ARRAY
5356: PUSH
5357: LD_INT 22
5359: EQUAL
5360: IFFALSE 5372
// begin control := control_remote ;
5362: LD_ADDR_VAR 0 4
5366: PUSH
5367: LD_INT 2
5369: ST_TO_ADDR
// break ;
5370: GO 5374
// end ;
5372: GO 5345
5374: POP
5375: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5376: LD_VAR 0 1
5380: PPUSH
5381: LD_VAR 0 2
5385: PPUSH
5386: LD_VAR 0 3
5390: PPUSH
5391: LD_VAR 0 4
5395: PPUSH
5396: LD_VAR 0 5
5400: PPUSH
5401: CALL_OW 448
5405: IFFALSE 5440
// begin result := [ chassis , engine , control , weapon ] ;
5407: LD_ADDR_VAR 0 6
5411: PUSH
5412: LD_VAR 0 2
5416: PUSH
5417: LD_VAR 0 3
5421: PUSH
5422: LD_VAR 0 4
5426: PUSH
5427: LD_VAR 0 5
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: ST_TO_ADDR
// exit ;
5438: GO 5852
// end ; _chassis := AvailableChassisList ( factory ) ;
5440: LD_ADDR_VAR 0 9
5444: PUSH
5445: LD_VAR 0 1
5449: PPUSH
5450: CALL_OW 475
5454: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5455: LD_ADDR_VAR 0 11
5459: PUSH
5460: LD_VAR 0 1
5464: PPUSH
5465: CALL_OW 476
5469: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5470: LD_ADDR_VAR 0 12
5474: PUSH
5475: LD_VAR 0 1
5479: PPUSH
5480: CALL_OW 477
5484: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5485: LD_ADDR_VAR 0 10
5489: PUSH
5490: LD_VAR 0 1
5494: PPUSH
5495: CALL_OW 478
5499: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5500: LD_VAR 0 9
5504: NOT
5505: PUSH
5506: LD_VAR 0 11
5510: NOT
5511: OR
5512: PUSH
5513: LD_VAR 0 12
5517: NOT
5518: OR
5519: PUSH
5520: LD_VAR 0 10
5524: NOT
5525: OR
5526: IFFALSE 5561
// begin result := [ chassis , engine , control , weapon ] ;
5528: LD_ADDR_VAR 0 6
5532: PUSH
5533: LD_VAR 0 2
5537: PUSH
5538: LD_VAR 0 3
5542: PUSH
5543: LD_VAR 0 4
5547: PUSH
5548: LD_VAR 0 5
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: ST_TO_ADDR
// exit ;
5559: GO 5852
// end ; if not chassis in _chassis then
5561: LD_VAR 0 2
5565: PUSH
5566: LD_VAR 0 9
5570: IN
5571: NOT
5572: IFFALSE 5598
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5574: LD_ADDR_VAR 0 2
5578: PUSH
5579: LD_VAR 0 9
5583: PUSH
5584: LD_INT 1
5586: PPUSH
5587: LD_VAR 0 9
5591: PPUSH
5592: CALL_OW 12
5596: ARRAY
5597: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5598: LD_VAR 0 2
5602: PPUSH
5603: LD_VAR 0 3
5607: PPUSH
5608: CALL 5857 0 2
5612: NOT
5613: IFFALSE 5672
// repeat engine := _engine [ 1 ] ;
5615: LD_ADDR_VAR 0 3
5619: PUSH
5620: LD_VAR 0 11
5624: PUSH
5625: LD_INT 1
5627: ARRAY
5628: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5629: LD_ADDR_VAR 0 11
5633: PUSH
5634: LD_VAR 0 11
5638: PPUSH
5639: LD_INT 1
5641: PPUSH
5642: CALL_OW 3
5646: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5647: LD_VAR 0 2
5651: PPUSH
5652: LD_VAR 0 3
5656: PPUSH
5657: CALL 5857 0 2
5661: PUSH
5662: LD_VAR 0 11
5666: PUSH
5667: EMPTY
5668: EQUAL
5669: OR
5670: IFFALSE 5615
// if not control in _control then
5672: LD_VAR 0 4
5676: PUSH
5677: LD_VAR 0 12
5681: IN
5682: NOT
5683: IFFALSE 5709
// control := _control [ rand ( 1 , _control ) ] ;
5685: LD_ADDR_VAR 0 4
5689: PUSH
5690: LD_VAR 0 12
5694: PUSH
5695: LD_INT 1
5697: PPUSH
5698: LD_VAR 0 12
5702: PPUSH
5703: CALL_OW 12
5707: ARRAY
5708: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5709: LD_VAR 0 2
5713: PPUSH
5714: LD_VAR 0 5
5718: PPUSH
5719: CALL 6077 0 2
5723: NOT
5724: IFFALSE 5783
// repeat weapon := _weapon [ 1 ] ;
5726: LD_ADDR_VAR 0 5
5730: PUSH
5731: LD_VAR 0 10
5735: PUSH
5736: LD_INT 1
5738: ARRAY
5739: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5740: LD_ADDR_VAR 0 10
5744: PUSH
5745: LD_VAR 0 10
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 3
5757: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5758: LD_VAR 0 2
5762: PPUSH
5763: LD_VAR 0 5
5767: PPUSH
5768: CALL 6077 0 2
5772: PUSH
5773: LD_VAR 0 10
5777: PUSH
5778: EMPTY
5779: EQUAL
5780: OR
5781: IFFALSE 5726
// result := [ ] ;
5783: LD_ADDR_VAR 0 6
5787: PUSH
5788: EMPTY
5789: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5790: LD_VAR 0 1
5794: PPUSH
5795: LD_VAR 0 2
5799: PPUSH
5800: LD_VAR 0 3
5804: PPUSH
5805: LD_VAR 0 4
5809: PPUSH
5810: LD_VAR 0 5
5814: PPUSH
5815: CALL_OW 448
5819: IFFALSE 5852
// result := [ chassis , engine , control , weapon ] ;
5821: LD_ADDR_VAR 0 6
5825: PUSH
5826: LD_VAR 0 2
5830: PUSH
5831: LD_VAR 0 3
5835: PUSH
5836: LD_VAR 0 4
5840: PUSH
5841: LD_VAR 0 5
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: ST_TO_ADDR
// end ;
5852: LD_VAR 0 6
5856: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5857: LD_INT 0
5859: PPUSH
// if not chassis or not engine then
5860: LD_VAR 0 1
5864: NOT
5865: PUSH
5866: LD_VAR 0 2
5870: NOT
5871: OR
5872: IFFALSE 5876
// exit ;
5874: GO 6072
// case engine of engine_solar :
5876: LD_VAR 0 2
5880: PUSH
5881: LD_INT 2
5883: DOUBLE
5884: EQUAL
5885: IFTRUE 5889
5887: GO 5927
5889: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5890: LD_ADDR_VAR 0 3
5894: PUSH
5895: LD_INT 11
5897: PUSH
5898: LD_INT 12
5900: PUSH
5901: LD_INT 13
5903: PUSH
5904: LD_INT 14
5906: PUSH
5907: LD_INT 1
5909: PUSH
5910: LD_INT 2
5912: PUSH
5913: LD_INT 3
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: ST_TO_ADDR
5925: GO 6056
5927: LD_INT 1
5929: DOUBLE
5930: EQUAL
5931: IFTRUE 5935
5933: GO 5997
5935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5936: LD_ADDR_VAR 0 3
5940: PUSH
5941: LD_INT 11
5943: PUSH
5944: LD_INT 12
5946: PUSH
5947: LD_INT 13
5949: PUSH
5950: LD_INT 14
5952: PUSH
5953: LD_INT 1
5955: PUSH
5956: LD_INT 2
5958: PUSH
5959: LD_INT 3
5961: PUSH
5962: LD_INT 4
5964: PUSH
5965: LD_INT 5
5967: PUSH
5968: LD_INT 21
5970: PUSH
5971: LD_INT 23
5973: PUSH
5974: LD_INT 22
5976: PUSH
5977: LD_INT 24
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: ST_TO_ADDR
5995: GO 6056
5997: LD_INT 3
5999: DOUBLE
6000: EQUAL
6001: IFTRUE 6005
6003: GO 6055
6005: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6006: LD_ADDR_VAR 0 3
6010: PUSH
6011: LD_INT 13
6013: PUSH
6014: LD_INT 14
6016: PUSH
6017: LD_INT 2
6019: PUSH
6020: LD_INT 3
6022: PUSH
6023: LD_INT 4
6025: PUSH
6026: LD_INT 5
6028: PUSH
6029: LD_INT 21
6031: PUSH
6032: LD_INT 22
6034: PUSH
6035: LD_INT 23
6037: PUSH
6038: LD_INT 24
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: ST_TO_ADDR
6053: GO 6056
6055: POP
// result := ( chassis in result ) ;
6056: LD_ADDR_VAR 0 3
6060: PUSH
6061: LD_VAR 0 1
6065: PUSH
6066: LD_VAR 0 3
6070: IN
6071: ST_TO_ADDR
// end ;
6072: LD_VAR 0 3
6076: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6077: LD_INT 0
6079: PPUSH
// if not chassis or not weapon then
6080: LD_VAR 0 1
6084: NOT
6085: PUSH
6086: LD_VAR 0 2
6090: NOT
6091: OR
6092: IFFALSE 6096
// exit ;
6094: GO 7156
// case weapon of us_machine_gun :
6096: LD_VAR 0 2
6100: PUSH
6101: LD_INT 2
6103: DOUBLE
6104: EQUAL
6105: IFTRUE 6109
6107: GO 6139
6109: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6110: LD_ADDR_VAR 0 3
6114: PUSH
6115: LD_INT 1
6117: PUSH
6118: LD_INT 2
6120: PUSH
6121: LD_INT 3
6123: PUSH
6124: LD_INT 4
6126: PUSH
6127: LD_INT 5
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: ST_TO_ADDR
6137: GO 7140
6139: LD_INT 3
6141: DOUBLE
6142: EQUAL
6143: IFTRUE 6147
6145: GO 6177
6147: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6148: LD_ADDR_VAR 0 3
6152: PUSH
6153: LD_INT 1
6155: PUSH
6156: LD_INT 2
6158: PUSH
6159: LD_INT 3
6161: PUSH
6162: LD_INT 4
6164: PUSH
6165: LD_INT 5
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: ST_TO_ADDR
6175: GO 7140
6177: LD_INT 11
6179: DOUBLE
6180: EQUAL
6181: IFTRUE 6185
6183: GO 6215
6185: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6186: LD_ADDR_VAR 0 3
6190: PUSH
6191: LD_INT 1
6193: PUSH
6194: LD_INT 2
6196: PUSH
6197: LD_INT 3
6199: PUSH
6200: LD_INT 4
6202: PUSH
6203: LD_INT 5
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: ST_TO_ADDR
6213: GO 7140
6215: LD_INT 4
6217: DOUBLE
6218: EQUAL
6219: IFTRUE 6223
6221: GO 6249
6223: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6224: LD_ADDR_VAR 0 3
6228: PUSH
6229: LD_INT 2
6231: PUSH
6232: LD_INT 3
6234: PUSH
6235: LD_INT 4
6237: PUSH
6238: LD_INT 5
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: ST_TO_ADDR
6247: GO 7140
6249: LD_INT 5
6251: DOUBLE
6252: EQUAL
6253: IFTRUE 6257
6255: GO 6283
6257: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6258: LD_ADDR_VAR 0 3
6262: PUSH
6263: LD_INT 2
6265: PUSH
6266: LD_INT 3
6268: PUSH
6269: LD_INT 4
6271: PUSH
6272: LD_INT 5
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: ST_TO_ADDR
6281: GO 7140
6283: LD_INT 9
6285: DOUBLE
6286: EQUAL
6287: IFTRUE 6291
6289: GO 6317
6291: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6292: LD_ADDR_VAR 0 3
6296: PUSH
6297: LD_INT 2
6299: PUSH
6300: LD_INT 3
6302: PUSH
6303: LD_INT 4
6305: PUSH
6306: LD_INT 5
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: ST_TO_ADDR
6315: GO 7140
6317: LD_INT 7
6319: DOUBLE
6320: EQUAL
6321: IFTRUE 6325
6323: GO 6351
6325: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6326: LD_ADDR_VAR 0 3
6330: PUSH
6331: LD_INT 2
6333: PUSH
6334: LD_INT 3
6336: PUSH
6337: LD_INT 4
6339: PUSH
6340: LD_INT 5
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: ST_TO_ADDR
6349: GO 7140
6351: LD_INT 12
6353: DOUBLE
6354: EQUAL
6355: IFTRUE 6359
6357: GO 6385
6359: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6360: LD_ADDR_VAR 0 3
6364: PUSH
6365: LD_INT 2
6367: PUSH
6368: LD_INT 3
6370: PUSH
6371: LD_INT 4
6373: PUSH
6374: LD_INT 5
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: ST_TO_ADDR
6383: GO 7140
6385: LD_INT 13
6387: DOUBLE
6388: EQUAL
6389: IFTRUE 6393
6391: GO 6419
6393: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6394: LD_ADDR_VAR 0 3
6398: PUSH
6399: LD_INT 2
6401: PUSH
6402: LD_INT 3
6404: PUSH
6405: LD_INT 4
6407: PUSH
6408: LD_INT 5
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: ST_TO_ADDR
6417: GO 7140
6419: LD_INT 14
6421: DOUBLE
6422: EQUAL
6423: IFTRUE 6427
6425: GO 6445
6427: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6428: LD_ADDR_VAR 0 3
6432: PUSH
6433: LD_INT 4
6435: PUSH
6436: LD_INT 5
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: ST_TO_ADDR
6443: GO 7140
6445: LD_INT 6
6447: DOUBLE
6448: EQUAL
6449: IFTRUE 6453
6451: GO 6471
6453: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6454: LD_ADDR_VAR 0 3
6458: PUSH
6459: LD_INT 4
6461: PUSH
6462: LD_INT 5
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: ST_TO_ADDR
6469: GO 7140
6471: LD_INT 10
6473: DOUBLE
6474: EQUAL
6475: IFTRUE 6479
6477: GO 6497
6479: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6480: LD_ADDR_VAR 0 3
6484: PUSH
6485: LD_INT 4
6487: PUSH
6488: LD_INT 5
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: ST_TO_ADDR
6495: GO 7140
6497: LD_INT 22
6499: DOUBLE
6500: EQUAL
6501: IFTRUE 6505
6503: GO 6531
6505: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6506: LD_ADDR_VAR 0 3
6510: PUSH
6511: LD_INT 11
6513: PUSH
6514: LD_INT 12
6516: PUSH
6517: LD_INT 13
6519: PUSH
6520: LD_INT 14
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: ST_TO_ADDR
6529: GO 7140
6531: LD_INT 23
6533: DOUBLE
6534: EQUAL
6535: IFTRUE 6539
6537: GO 6565
6539: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6540: LD_ADDR_VAR 0 3
6544: PUSH
6545: LD_INT 11
6547: PUSH
6548: LD_INT 12
6550: PUSH
6551: LD_INT 13
6553: PUSH
6554: LD_INT 14
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: ST_TO_ADDR
6563: GO 7140
6565: LD_INT 24
6567: DOUBLE
6568: EQUAL
6569: IFTRUE 6573
6571: GO 6599
6573: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6574: LD_ADDR_VAR 0 3
6578: PUSH
6579: LD_INT 11
6581: PUSH
6582: LD_INT 12
6584: PUSH
6585: LD_INT 13
6587: PUSH
6588: LD_INT 14
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: ST_TO_ADDR
6597: GO 7140
6599: LD_INT 30
6601: DOUBLE
6602: EQUAL
6603: IFTRUE 6607
6605: GO 6633
6607: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6608: LD_ADDR_VAR 0 3
6612: PUSH
6613: LD_INT 11
6615: PUSH
6616: LD_INT 12
6618: PUSH
6619: LD_INT 13
6621: PUSH
6622: LD_INT 14
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: ST_TO_ADDR
6631: GO 7140
6633: LD_INT 25
6635: DOUBLE
6636: EQUAL
6637: IFTRUE 6641
6639: GO 6659
6641: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6642: LD_ADDR_VAR 0 3
6646: PUSH
6647: LD_INT 13
6649: PUSH
6650: LD_INT 14
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: ST_TO_ADDR
6657: GO 7140
6659: LD_INT 27
6661: DOUBLE
6662: EQUAL
6663: IFTRUE 6667
6665: GO 6685
6667: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: LD_INT 13
6675: PUSH
6676: LD_INT 14
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: ST_TO_ADDR
6683: GO 7140
6685: LD_INT 92
6687: DOUBLE
6688: EQUAL
6689: IFTRUE 6693
6691: GO 6719
6693: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6694: LD_ADDR_VAR 0 3
6698: PUSH
6699: LD_INT 11
6701: PUSH
6702: LD_INT 12
6704: PUSH
6705: LD_INT 13
6707: PUSH
6708: LD_INT 14
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: ST_TO_ADDR
6717: GO 7140
6719: LD_INT 28
6721: DOUBLE
6722: EQUAL
6723: IFTRUE 6727
6725: GO 6745
6727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6728: LD_ADDR_VAR 0 3
6732: PUSH
6733: LD_INT 13
6735: PUSH
6736: LD_INT 14
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: ST_TO_ADDR
6743: GO 7140
6745: LD_INT 29
6747: DOUBLE
6748: EQUAL
6749: IFTRUE 6753
6751: GO 6771
6753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6754: LD_ADDR_VAR 0 3
6758: PUSH
6759: LD_INT 13
6761: PUSH
6762: LD_INT 14
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: ST_TO_ADDR
6769: GO 7140
6771: LD_INT 31
6773: DOUBLE
6774: EQUAL
6775: IFTRUE 6779
6777: GO 6797
6779: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6780: LD_ADDR_VAR 0 3
6784: PUSH
6785: LD_INT 13
6787: PUSH
6788: LD_INT 14
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: ST_TO_ADDR
6795: GO 7140
6797: LD_INT 26
6799: DOUBLE
6800: EQUAL
6801: IFTRUE 6805
6803: GO 6823
6805: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6806: LD_ADDR_VAR 0 3
6810: PUSH
6811: LD_INT 13
6813: PUSH
6814: LD_INT 14
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: ST_TO_ADDR
6821: GO 7140
6823: LD_INT 42
6825: DOUBLE
6826: EQUAL
6827: IFTRUE 6831
6829: GO 6857
6831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6832: LD_ADDR_VAR 0 3
6836: PUSH
6837: LD_INT 21
6839: PUSH
6840: LD_INT 22
6842: PUSH
6843: LD_INT 23
6845: PUSH
6846: LD_INT 24
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: ST_TO_ADDR
6855: GO 7140
6857: LD_INT 43
6859: DOUBLE
6860: EQUAL
6861: IFTRUE 6865
6863: GO 6891
6865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6866: LD_ADDR_VAR 0 3
6870: PUSH
6871: LD_INT 21
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 23
6879: PUSH
6880: LD_INT 24
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: ST_TO_ADDR
6889: GO 7140
6891: LD_INT 44
6893: DOUBLE
6894: EQUAL
6895: IFTRUE 6899
6897: GO 6925
6899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_INT 21
6907: PUSH
6908: LD_INT 22
6910: PUSH
6911: LD_INT 23
6913: PUSH
6914: LD_INT 24
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: ST_TO_ADDR
6923: GO 7140
6925: LD_INT 45
6927: DOUBLE
6928: EQUAL
6929: IFTRUE 6933
6931: GO 6959
6933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6934: LD_ADDR_VAR 0 3
6938: PUSH
6939: LD_INT 21
6941: PUSH
6942: LD_INT 22
6944: PUSH
6945: LD_INT 23
6947: PUSH
6948: LD_INT 24
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: ST_TO_ADDR
6957: GO 7140
6959: LD_INT 49
6961: DOUBLE
6962: EQUAL
6963: IFTRUE 6967
6965: GO 6993
6967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6968: LD_ADDR_VAR 0 3
6972: PUSH
6973: LD_INT 21
6975: PUSH
6976: LD_INT 22
6978: PUSH
6979: LD_INT 23
6981: PUSH
6982: LD_INT 24
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: ST_TO_ADDR
6991: GO 7140
6993: LD_INT 51
6995: DOUBLE
6996: EQUAL
6997: IFTRUE 7001
6999: GO 7027
7001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7002: LD_ADDR_VAR 0 3
7006: PUSH
7007: LD_INT 21
7009: PUSH
7010: LD_INT 22
7012: PUSH
7013: LD_INT 23
7015: PUSH
7016: LD_INT 24
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: ST_TO_ADDR
7025: GO 7140
7027: LD_INT 52
7029: DOUBLE
7030: EQUAL
7031: IFTRUE 7035
7033: GO 7061
7035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7036: LD_ADDR_VAR 0 3
7040: PUSH
7041: LD_INT 21
7043: PUSH
7044: LD_INT 22
7046: PUSH
7047: LD_INT 23
7049: PUSH
7050: LD_INT 24
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: ST_TO_ADDR
7059: GO 7140
7061: LD_INT 53
7063: DOUBLE
7064: EQUAL
7065: IFTRUE 7069
7067: GO 7087
7069: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7070: LD_ADDR_VAR 0 3
7074: PUSH
7075: LD_INT 23
7077: PUSH
7078: LD_INT 24
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: ST_TO_ADDR
7085: GO 7140
7087: LD_INT 46
7089: DOUBLE
7090: EQUAL
7091: IFTRUE 7095
7093: GO 7113
7095: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7096: LD_ADDR_VAR 0 3
7100: PUSH
7101: LD_INT 23
7103: PUSH
7104: LD_INT 24
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: ST_TO_ADDR
7111: GO 7140
7113: LD_INT 47
7115: DOUBLE
7116: EQUAL
7117: IFTRUE 7121
7119: GO 7139
7121: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7122: LD_ADDR_VAR 0 3
7126: PUSH
7127: LD_INT 23
7129: PUSH
7130: LD_INT 24
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: ST_TO_ADDR
7137: GO 7140
7139: POP
// result := ( chassis in result ) ;
7140: LD_ADDR_VAR 0 3
7144: PUSH
7145: LD_VAR 0 1
7149: PUSH
7150: LD_VAR 0 3
7154: IN
7155: ST_TO_ADDR
// end ;
7156: LD_VAR 0 3
7160: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7161: LD_INT 0
7163: PPUSH
7164: PPUSH
7165: PPUSH
7166: PPUSH
7167: PPUSH
7168: PPUSH
7169: PPUSH
// result := array ;
7170: LD_ADDR_VAR 0 5
7174: PUSH
7175: LD_VAR 0 1
7179: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7180: LD_VAR 0 1
7184: NOT
7185: PUSH
7186: LD_VAR 0 2
7190: NOT
7191: OR
7192: PUSH
7193: LD_VAR 0 3
7197: NOT
7198: OR
7199: PUSH
7200: LD_VAR 0 2
7204: PUSH
7205: LD_VAR 0 1
7209: GREATER
7210: OR
7211: PUSH
7212: LD_VAR 0 3
7216: PUSH
7217: LD_VAR 0 1
7221: GREATER
7222: OR
7223: IFFALSE 7227
// exit ;
7225: GO 7523
// if direction then
7227: LD_VAR 0 4
7231: IFFALSE 7295
// begin d := 1 ;
7233: LD_ADDR_VAR 0 9
7237: PUSH
7238: LD_INT 1
7240: ST_TO_ADDR
// if i_from > i_to then
7241: LD_VAR 0 2
7245: PUSH
7246: LD_VAR 0 3
7250: GREATER
7251: IFFALSE 7277
// length := ( array - i_from ) + i_to else
7253: LD_ADDR_VAR 0 11
7257: PUSH
7258: LD_VAR 0 1
7262: PUSH
7263: LD_VAR 0 2
7267: MINUS
7268: PUSH
7269: LD_VAR 0 3
7273: PLUS
7274: ST_TO_ADDR
7275: GO 7293
// length := i_to - i_from ;
7277: LD_ADDR_VAR 0 11
7281: PUSH
7282: LD_VAR 0 3
7286: PUSH
7287: LD_VAR 0 2
7291: MINUS
7292: ST_TO_ADDR
// end else
7293: GO 7356
// begin d := - 1 ;
7295: LD_ADDR_VAR 0 9
7299: PUSH
7300: LD_INT 1
7302: NEG
7303: ST_TO_ADDR
// if i_from > i_to then
7304: LD_VAR 0 2
7308: PUSH
7309: LD_VAR 0 3
7313: GREATER
7314: IFFALSE 7334
// length := i_from - i_to else
7316: LD_ADDR_VAR 0 11
7320: PUSH
7321: LD_VAR 0 2
7325: PUSH
7326: LD_VAR 0 3
7330: MINUS
7331: ST_TO_ADDR
7332: GO 7356
// length := ( array - i_to ) + i_from ;
7334: LD_ADDR_VAR 0 11
7338: PUSH
7339: LD_VAR 0 1
7343: PUSH
7344: LD_VAR 0 3
7348: MINUS
7349: PUSH
7350: LD_VAR 0 2
7354: PLUS
7355: ST_TO_ADDR
// end ; if not length then
7356: LD_VAR 0 11
7360: NOT
7361: IFFALSE 7365
// exit ;
7363: GO 7523
// tmp := array ;
7365: LD_ADDR_VAR 0 10
7369: PUSH
7370: LD_VAR 0 1
7374: ST_TO_ADDR
// for i = 1 to length do
7375: LD_ADDR_VAR 0 6
7379: PUSH
7380: DOUBLE
7381: LD_INT 1
7383: DEC
7384: ST_TO_ADDR
7385: LD_VAR 0 11
7389: PUSH
7390: FOR_TO
7391: IFFALSE 7511
// begin for j = 1 to array do
7393: LD_ADDR_VAR 0 7
7397: PUSH
7398: DOUBLE
7399: LD_INT 1
7401: DEC
7402: ST_TO_ADDR
7403: LD_VAR 0 1
7407: PUSH
7408: FOR_TO
7409: IFFALSE 7497
// begin k := j + d ;
7411: LD_ADDR_VAR 0 8
7415: PUSH
7416: LD_VAR 0 7
7420: PUSH
7421: LD_VAR 0 9
7425: PLUS
7426: ST_TO_ADDR
// if k > array then
7427: LD_VAR 0 8
7431: PUSH
7432: LD_VAR 0 1
7436: GREATER
7437: IFFALSE 7447
// k := 1 ;
7439: LD_ADDR_VAR 0 8
7443: PUSH
7444: LD_INT 1
7446: ST_TO_ADDR
// if not k then
7447: LD_VAR 0 8
7451: NOT
7452: IFFALSE 7464
// k := array ;
7454: LD_ADDR_VAR 0 8
7458: PUSH
7459: LD_VAR 0 1
7463: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7464: LD_ADDR_VAR 0 10
7468: PUSH
7469: LD_VAR 0 10
7473: PPUSH
7474: LD_VAR 0 8
7478: PPUSH
7479: LD_VAR 0 1
7483: PUSH
7484: LD_VAR 0 7
7488: ARRAY
7489: PPUSH
7490: CALL_OW 1
7494: ST_TO_ADDR
// end ;
7495: GO 7408
7497: POP
7498: POP
// array := tmp ;
7499: LD_ADDR_VAR 0 1
7503: PUSH
7504: LD_VAR 0 10
7508: ST_TO_ADDR
// end ;
7509: GO 7390
7511: POP
7512: POP
// result := array ;
7513: LD_ADDR_VAR 0 5
7517: PUSH
7518: LD_VAR 0 1
7522: ST_TO_ADDR
// end ;
7523: LD_VAR 0 5
7527: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7528: LD_INT 0
7530: PPUSH
7531: PPUSH
// result := 0 ;
7532: LD_ADDR_VAR 0 3
7536: PUSH
7537: LD_INT 0
7539: ST_TO_ADDR
// if not array or not value in array then
7540: LD_VAR 0 1
7544: NOT
7545: PUSH
7546: LD_VAR 0 2
7550: PUSH
7551: LD_VAR 0 1
7555: IN
7556: NOT
7557: OR
7558: IFFALSE 7562
// exit ;
7560: GO 7616
// for i = 1 to array do
7562: LD_ADDR_VAR 0 4
7566: PUSH
7567: DOUBLE
7568: LD_INT 1
7570: DEC
7571: ST_TO_ADDR
7572: LD_VAR 0 1
7576: PUSH
7577: FOR_TO
7578: IFFALSE 7614
// if value = array [ i ] then
7580: LD_VAR 0 2
7584: PUSH
7585: LD_VAR 0 1
7589: PUSH
7590: LD_VAR 0 4
7594: ARRAY
7595: EQUAL
7596: IFFALSE 7612
// begin result := i ;
7598: LD_ADDR_VAR 0 3
7602: PUSH
7603: LD_VAR 0 4
7607: ST_TO_ADDR
// exit ;
7608: POP
7609: POP
7610: GO 7616
// end ;
7612: GO 7577
7614: POP
7615: POP
// end ;
7616: LD_VAR 0 3
7620: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7621: LD_INT 0
7623: PPUSH
// vc_chassis := chassis ;
7624: LD_ADDR_OWVAR 37
7628: PUSH
7629: LD_VAR 0 1
7633: ST_TO_ADDR
// vc_engine := engine ;
7634: LD_ADDR_OWVAR 39
7638: PUSH
7639: LD_VAR 0 2
7643: ST_TO_ADDR
// vc_control := control ;
7644: LD_ADDR_OWVAR 38
7648: PUSH
7649: LD_VAR 0 3
7653: ST_TO_ADDR
// vc_weapon := weapon ;
7654: LD_ADDR_OWVAR 40
7658: PUSH
7659: LD_VAR 0 4
7663: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7664: LD_ADDR_OWVAR 41
7668: PUSH
7669: LD_VAR 0 5
7673: ST_TO_ADDR
// end ;
7674: LD_VAR 0 6
7678: RET
// export function WantPlant ( unit ) ; var task ; begin
7679: LD_INT 0
7681: PPUSH
7682: PPUSH
// result := false ;
7683: LD_ADDR_VAR 0 2
7687: PUSH
7688: LD_INT 0
7690: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7691: LD_ADDR_VAR 0 3
7695: PUSH
7696: LD_VAR 0 1
7700: PPUSH
7701: CALL_OW 437
7705: ST_TO_ADDR
// if task then
7706: LD_VAR 0 3
7710: IFFALSE 7738
// if task [ 1 ] [ 1 ] = p then
7712: LD_VAR 0 3
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PUSH
7721: LD_INT 1
7723: ARRAY
7724: PUSH
7725: LD_STRING p
7727: EQUAL
7728: IFFALSE 7738
// result := true ;
7730: LD_ADDR_VAR 0 2
7734: PUSH
7735: LD_INT 1
7737: ST_TO_ADDR
// end ;
7738: LD_VAR 0 2
7742: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7743: LD_INT 0
7745: PPUSH
7746: PPUSH
7747: PPUSH
7748: PPUSH
// if pos < 1 then
7749: LD_VAR 0 2
7753: PUSH
7754: LD_INT 1
7756: LESS
7757: IFFALSE 7761
// exit ;
7759: GO 8064
// if pos = 1 then
7761: LD_VAR 0 2
7765: PUSH
7766: LD_INT 1
7768: EQUAL
7769: IFFALSE 7802
// result := Replace ( arr , pos [ 1 ] , value ) else
7771: LD_ADDR_VAR 0 4
7775: PUSH
7776: LD_VAR 0 1
7780: PPUSH
7781: LD_VAR 0 2
7785: PUSH
7786: LD_INT 1
7788: ARRAY
7789: PPUSH
7790: LD_VAR 0 3
7794: PPUSH
7795: CALL_OW 1
7799: ST_TO_ADDR
7800: GO 8064
// begin tmp := arr ;
7802: LD_ADDR_VAR 0 6
7806: PUSH
7807: LD_VAR 0 1
7811: ST_TO_ADDR
// s_arr := [ tmp ] ;
7812: LD_ADDR_VAR 0 7
7816: PUSH
7817: LD_VAR 0 6
7821: PUSH
7822: EMPTY
7823: LIST
7824: ST_TO_ADDR
// for i = 1 to pos - 1 do
7825: LD_ADDR_VAR 0 5
7829: PUSH
7830: DOUBLE
7831: LD_INT 1
7833: DEC
7834: ST_TO_ADDR
7835: LD_VAR 0 2
7839: PUSH
7840: LD_INT 1
7842: MINUS
7843: PUSH
7844: FOR_TO
7845: IFFALSE 7890
// begin tmp := tmp [ pos [ i ] ] ;
7847: LD_ADDR_VAR 0 6
7851: PUSH
7852: LD_VAR 0 6
7856: PUSH
7857: LD_VAR 0 2
7861: PUSH
7862: LD_VAR 0 5
7866: ARRAY
7867: ARRAY
7868: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7869: LD_ADDR_VAR 0 7
7873: PUSH
7874: LD_VAR 0 7
7878: PUSH
7879: LD_VAR 0 6
7883: PUSH
7884: EMPTY
7885: LIST
7886: ADD
7887: ST_TO_ADDR
// end ;
7888: GO 7844
7890: POP
7891: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7892: LD_ADDR_VAR 0 6
7896: PUSH
7897: LD_VAR 0 6
7901: PPUSH
7902: LD_VAR 0 2
7906: PUSH
7907: LD_VAR 0 2
7911: ARRAY
7912: PPUSH
7913: LD_VAR 0 3
7917: PPUSH
7918: CALL_OW 1
7922: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7923: LD_ADDR_VAR 0 7
7927: PUSH
7928: LD_VAR 0 7
7932: PPUSH
7933: LD_VAR 0 7
7937: PPUSH
7938: LD_VAR 0 6
7942: PPUSH
7943: CALL_OW 1
7947: ST_TO_ADDR
// for i = s_arr downto 2 do
7948: LD_ADDR_VAR 0 5
7952: PUSH
7953: DOUBLE
7954: LD_VAR 0 7
7958: INC
7959: ST_TO_ADDR
7960: LD_INT 2
7962: PUSH
7963: FOR_DOWNTO
7964: IFFALSE 8048
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7966: LD_ADDR_VAR 0 6
7970: PUSH
7971: LD_VAR 0 7
7975: PUSH
7976: LD_VAR 0 5
7980: PUSH
7981: LD_INT 1
7983: MINUS
7984: ARRAY
7985: PPUSH
7986: LD_VAR 0 2
7990: PUSH
7991: LD_VAR 0 5
7995: PUSH
7996: LD_INT 1
7998: MINUS
7999: ARRAY
8000: PPUSH
8001: LD_VAR 0 7
8005: PUSH
8006: LD_VAR 0 5
8010: ARRAY
8011: PPUSH
8012: CALL_OW 1
8016: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8017: LD_ADDR_VAR 0 7
8021: PUSH
8022: LD_VAR 0 7
8026: PPUSH
8027: LD_VAR 0 5
8031: PUSH
8032: LD_INT 1
8034: MINUS
8035: PPUSH
8036: LD_VAR 0 6
8040: PPUSH
8041: CALL_OW 1
8045: ST_TO_ADDR
// end ;
8046: GO 7963
8048: POP
8049: POP
// result := s_arr [ 1 ] ;
8050: LD_ADDR_VAR 0 4
8054: PUSH
8055: LD_VAR 0 7
8059: PUSH
8060: LD_INT 1
8062: ARRAY
8063: ST_TO_ADDR
// end ; end ;
8064: LD_VAR 0 4
8068: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8069: LD_INT 0
8071: PPUSH
8072: PPUSH
// if not list then
8073: LD_VAR 0 1
8077: NOT
8078: IFFALSE 8082
// exit ;
8080: GO 8173
// i := list [ pos1 ] ;
8082: LD_ADDR_VAR 0 5
8086: PUSH
8087: LD_VAR 0 1
8091: PUSH
8092: LD_VAR 0 2
8096: ARRAY
8097: ST_TO_ADDR
// if not i then
8098: LD_VAR 0 5
8102: NOT
8103: IFFALSE 8107
// exit ;
8105: GO 8173
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8107: LD_ADDR_VAR 0 1
8111: PUSH
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_VAR 0 2
8121: PPUSH
8122: LD_VAR 0 1
8126: PUSH
8127: LD_VAR 0 3
8131: ARRAY
8132: PPUSH
8133: CALL_OW 1
8137: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8138: LD_ADDR_VAR 0 1
8142: PUSH
8143: LD_VAR 0 1
8147: PPUSH
8148: LD_VAR 0 3
8152: PPUSH
8153: LD_VAR 0 5
8157: PPUSH
8158: CALL_OW 1
8162: ST_TO_ADDR
// result := list ;
8163: LD_ADDR_VAR 0 4
8167: PUSH
8168: LD_VAR 0 1
8172: ST_TO_ADDR
// end ;
8173: LD_VAR 0 4
8177: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8178: LD_INT 0
8180: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8181: LD_ADDR_VAR 0 5
8185: PUSH
8186: LD_VAR 0 1
8190: PPUSH
8191: CALL_OW 250
8195: PPUSH
8196: LD_VAR 0 1
8200: PPUSH
8201: CALL_OW 251
8205: PPUSH
8206: LD_VAR 0 2
8210: PPUSH
8211: LD_VAR 0 3
8215: PPUSH
8216: LD_VAR 0 4
8220: PPUSH
8221: CALL 8599 0 5
8225: ST_TO_ADDR
// end ;
8226: LD_VAR 0 5
8230: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8231: LD_INT 0
8233: PPUSH
8234: PPUSH
8235: PPUSH
8236: PPUSH
// if not list or not unit then
8237: LD_VAR 0 2
8241: NOT
8242: PUSH
8243: LD_VAR 0 1
8247: NOT
8248: OR
8249: IFFALSE 8253
// exit ;
8251: GO 8594
// result := [ ] ;
8253: LD_ADDR_VAR 0 5
8257: PUSH
8258: EMPTY
8259: ST_TO_ADDR
// for i in list do
8260: LD_ADDR_VAR 0 6
8264: PUSH
8265: LD_VAR 0 2
8269: PUSH
8270: FOR_IN
8271: IFFALSE 8489
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8273: LD_ADDR_VAR 0 8
8277: PUSH
8278: LD_VAR 0 1
8282: PPUSH
8283: LD_VAR 0 6
8287: PUSH
8288: LD_INT 1
8290: ARRAY
8291: PPUSH
8292: LD_VAR 0 6
8296: PUSH
8297: LD_INT 2
8299: ARRAY
8300: PPUSH
8301: CALL_OW 297
8305: ST_TO_ADDR
// if not Count ( result ) then
8306: LD_VAR 0 5
8310: PPUSH
8311: CALL 4883 0 1
8315: NOT
8316: IFFALSE 8349
// begin result := Join ( result , [ i , tmp ] ) ;
8318: LD_ADDR_VAR 0 5
8322: PUSH
8323: LD_VAR 0 5
8327: PPUSH
8328: LD_VAR 0 6
8332: PUSH
8333: LD_VAR 0 8
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PPUSH
8342: CALL 40492 0 2
8346: ST_TO_ADDR
// continue ;
8347: GO 8270
// end ; if result [ result ] [ 2 ] <= tmp then
8349: LD_VAR 0 5
8353: PUSH
8354: LD_VAR 0 5
8358: ARRAY
8359: PUSH
8360: LD_INT 2
8362: ARRAY
8363: PUSH
8364: LD_VAR 0 8
8368: LESSEQUAL
8369: IFFALSE 8402
// result := Join ( result , [ i , tmp ] ) else
8371: LD_ADDR_VAR 0 5
8375: PUSH
8376: LD_VAR 0 5
8380: PPUSH
8381: LD_VAR 0 6
8385: PUSH
8386: LD_VAR 0 8
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PPUSH
8395: CALL 40492 0 2
8399: ST_TO_ADDR
8400: GO 8487
// begin for j := 1 to Count ( result ) do
8402: LD_ADDR_VAR 0 7
8406: PUSH
8407: DOUBLE
8408: LD_INT 1
8410: DEC
8411: ST_TO_ADDR
8412: LD_VAR 0 5
8416: PPUSH
8417: CALL 4883 0 1
8421: PUSH
8422: FOR_TO
8423: IFFALSE 8485
// begin if tmp < result [ j ] [ 2 ] then
8425: LD_VAR 0 8
8429: PUSH
8430: LD_VAR 0 5
8434: PUSH
8435: LD_VAR 0 7
8439: ARRAY
8440: PUSH
8441: LD_INT 2
8443: ARRAY
8444: LESS
8445: IFFALSE 8483
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8447: LD_ADDR_VAR 0 5
8451: PUSH
8452: LD_VAR 0 5
8456: PPUSH
8457: LD_VAR 0 7
8461: PPUSH
8462: LD_VAR 0 6
8466: PUSH
8467: LD_VAR 0 8
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: PPUSH
8476: CALL_OW 2
8480: ST_TO_ADDR
// break ;
8481: GO 8485
// end ; end ;
8483: GO 8422
8485: POP
8486: POP
// end ; end ;
8487: GO 8270
8489: POP
8490: POP
// if result and not asc then
8491: LD_VAR 0 5
8495: PUSH
8496: LD_VAR 0 3
8500: NOT
8501: AND
8502: IFFALSE 8519
// result := ReverseArray ( result ) ;
8504: LD_ADDR_VAR 0 5
8508: PUSH
8509: LD_VAR 0 5
8513: PPUSH
8514: CALL 35759 0 1
8518: ST_TO_ADDR
// tmp := [ ] ;
8519: LD_ADDR_VAR 0 8
8523: PUSH
8524: EMPTY
8525: ST_TO_ADDR
// if mode then
8526: LD_VAR 0 4
8530: IFFALSE 8594
// begin for i := 1 to result do
8532: LD_ADDR_VAR 0 6
8536: PUSH
8537: DOUBLE
8538: LD_INT 1
8540: DEC
8541: ST_TO_ADDR
8542: LD_VAR 0 5
8546: PUSH
8547: FOR_TO
8548: IFFALSE 8582
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8550: LD_ADDR_VAR 0 8
8554: PUSH
8555: LD_VAR 0 8
8559: PPUSH
8560: LD_VAR 0 5
8564: PUSH
8565: LD_VAR 0 6
8569: ARRAY
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PPUSH
8575: CALL 40492 0 2
8579: ST_TO_ADDR
8580: GO 8547
8582: POP
8583: POP
// result := tmp ;
8584: LD_ADDR_VAR 0 5
8588: PUSH
8589: LD_VAR 0 8
8593: ST_TO_ADDR
// end ; end ;
8594: LD_VAR 0 5
8598: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8599: LD_INT 0
8601: PPUSH
8602: PPUSH
8603: PPUSH
8604: PPUSH
// if not list then
8605: LD_VAR 0 3
8609: NOT
8610: IFFALSE 8614
// exit ;
8612: GO 9002
// result := [ ] ;
8614: LD_ADDR_VAR 0 6
8618: PUSH
8619: EMPTY
8620: ST_TO_ADDR
// for i in list do
8621: LD_ADDR_VAR 0 7
8625: PUSH
8626: LD_VAR 0 3
8630: PUSH
8631: FOR_IN
8632: IFFALSE 8834
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8634: LD_ADDR_VAR 0 9
8638: PUSH
8639: LD_VAR 0 7
8643: PPUSH
8644: LD_VAR 0 1
8648: PPUSH
8649: LD_VAR 0 2
8653: PPUSH
8654: CALL_OW 297
8658: ST_TO_ADDR
// if not result then
8659: LD_VAR 0 6
8663: NOT
8664: IFFALSE 8690
// result := [ [ i , tmp ] ] else
8666: LD_ADDR_VAR 0 6
8670: PUSH
8671: LD_VAR 0 7
8675: PUSH
8676: LD_VAR 0 9
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PUSH
8685: EMPTY
8686: LIST
8687: ST_TO_ADDR
8688: GO 8832
// begin if result [ result ] [ 2 ] <= tmp then
8690: LD_VAR 0 6
8694: PUSH
8695: LD_VAR 0 6
8699: ARRAY
8700: PUSH
8701: LD_INT 2
8703: ARRAY
8704: PUSH
8705: LD_VAR 0 9
8709: LESSEQUAL
8710: IFFALSE 8752
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8712: LD_ADDR_VAR 0 6
8716: PUSH
8717: LD_VAR 0 6
8721: PPUSH
8722: LD_VAR 0 6
8726: PUSH
8727: LD_INT 1
8729: PLUS
8730: PPUSH
8731: LD_VAR 0 7
8735: PUSH
8736: LD_VAR 0 9
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PPUSH
8745: CALL_OW 2
8749: ST_TO_ADDR
8750: GO 8832
// for j := 1 to result do
8752: LD_ADDR_VAR 0 8
8756: PUSH
8757: DOUBLE
8758: LD_INT 1
8760: DEC
8761: ST_TO_ADDR
8762: LD_VAR 0 6
8766: PUSH
8767: FOR_TO
8768: IFFALSE 8830
// begin if tmp < result [ j ] [ 2 ] then
8770: LD_VAR 0 9
8774: PUSH
8775: LD_VAR 0 6
8779: PUSH
8780: LD_VAR 0 8
8784: ARRAY
8785: PUSH
8786: LD_INT 2
8788: ARRAY
8789: LESS
8790: IFFALSE 8828
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8792: LD_ADDR_VAR 0 6
8796: PUSH
8797: LD_VAR 0 6
8801: PPUSH
8802: LD_VAR 0 8
8806: PPUSH
8807: LD_VAR 0 7
8811: PUSH
8812: LD_VAR 0 9
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: PPUSH
8821: CALL_OW 2
8825: ST_TO_ADDR
// break ;
8826: GO 8830
// end ; end ;
8828: GO 8767
8830: POP
8831: POP
// end ; end ;
8832: GO 8631
8834: POP
8835: POP
// if result and not asc then
8836: LD_VAR 0 6
8840: PUSH
8841: LD_VAR 0 4
8845: NOT
8846: AND
8847: IFFALSE 8922
// begin tmp := result ;
8849: LD_ADDR_VAR 0 9
8853: PUSH
8854: LD_VAR 0 6
8858: ST_TO_ADDR
// for i = tmp downto 1 do
8859: LD_ADDR_VAR 0 7
8863: PUSH
8864: DOUBLE
8865: LD_VAR 0 9
8869: INC
8870: ST_TO_ADDR
8871: LD_INT 1
8873: PUSH
8874: FOR_DOWNTO
8875: IFFALSE 8920
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8877: LD_ADDR_VAR 0 6
8881: PUSH
8882: LD_VAR 0 6
8886: PPUSH
8887: LD_VAR 0 9
8891: PUSH
8892: LD_VAR 0 7
8896: MINUS
8897: PUSH
8898: LD_INT 1
8900: PLUS
8901: PPUSH
8902: LD_VAR 0 9
8906: PUSH
8907: LD_VAR 0 7
8911: ARRAY
8912: PPUSH
8913: CALL_OW 1
8917: ST_TO_ADDR
8918: GO 8874
8920: POP
8921: POP
// end ; tmp := [ ] ;
8922: LD_ADDR_VAR 0 9
8926: PUSH
8927: EMPTY
8928: ST_TO_ADDR
// if mode then
8929: LD_VAR 0 5
8933: IFFALSE 9002
// begin for i = 1 to result do
8935: LD_ADDR_VAR 0 7
8939: PUSH
8940: DOUBLE
8941: LD_INT 1
8943: DEC
8944: ST_TO_ADDR
8945: LD_VAR 0 6
8949: PUSH
8950: FOR_TO
8951: IFFALSE 8990
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8953: LD_ADDR_VAR 0 9
8957: PUSH
8958: LD_VAR 0 9
8962: PPUSH
8963: LD_VAR 0 7
8967: PPUSH
8968: LD_VAR 0 6
8972: PUSH
8973: LD_VAR 0 7
8977: ARRAY
8978: PUSH
8979: LD_INT 1
8981: ARRAY
8982: PPUSH
8983: CALL_OW 1
8987: ST_TO_ADDR
8988: GO 8950
8990: POP
8991: POP
// result := tmp ;
8992: LD_ADDR_VAR 0 6
8996: PUSH
8997: LD_VAR 0 9
9001: ST_TO_ADDR
// end ; end ;
9002: LD_VAR 0 6
9006: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9007: LD_INT 0
9009: PPUSH
9010: PPUSH
9011: PPUSH
9012: PPUSH
9013: PPUSH
9014: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9015: LD_ADDR_VAR 0 5
9019: PUSH
9020: LD_INT 0
9022: PUSH
9023: LD_INT 0
9025: PUSH
9026: LD_INT 0
9028: PUSH
9029: EMPTY
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: ST_TO_ADDR
// if not x or not y then
9037: LD_VAR 0 2
9041: NOT
9042: PUSH
9043: LD_VAR 0 3
9047: NOT
9048: OR
9049: IFFALSE 9053
// exit ;
9051: GO 10703
// if not range then
9053: LD_VAR 0 4
9057: NOT
9058: IFFALSE 9068
// range := 10 ;
9060: LD_ADDR_VAR 0 4
9064: PUSH
9065: LD_INT 10
9067: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9068: LD_ADDR_VAR 0 8
9072: PUSH
9073: LD_INT 81
9075: PUSH
9076: LD_VAR 0 1
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: PUSH
9085: LD_INT 92
9087: PUSH
9088: LD_VAR 0 2
9092: PUSH
9093: LD_VAR 0 3
9097: PUSH
9098: LD_VAR 0 4
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: PUSH
9109: LD_INT 3
9111: PUSH
9112: LD_INT 21
9114: PUSH
9115: LD_INT 3
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: PPUSH
9131: CALL_OW 69
9135: ST_TO_ADDR
// if not tmp then
9136: LD_VAR 0 8
9140: NOT
9141: IFFALSE 9145
// exit ;
9143: GO 10703
// for i in tmp do
9145: LD_ADDR_VAR 0 6
9149: PUSH
9150: LD_VAR 0 8
9154: PUSH
9155: FOR_IN
9156: IFFALSE 10678
// begin points := [ 0 , 0 , 0 ] ;
9158: LD_ADDR_VAR 0 9
9162: PUSH
9163: LD_INT 0
9165: PUSH
9166: LD_INT 0
9168: PUSH
9169: LD_INT 0
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: LIST
9176: ST_TO_ADDR
// bpoints := 1 ;
9177: LD_ADDR_VAR 0 10
9181: PUSH
9182: LD_INT 1
9184: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9185: LD_VAR 0 6
9189: PPUSH
9190: CALL_OW 247
9194: PUSH
9195: LD_INT 1
9197: DOUBLE
9198: EQUAL
9199: IFTRUE 9203
9201: GO 9781
9203: POP
// begin if GetClass ( i ) = 1 then
9204: LD_VAR 0 6
9208: PPUSH
9209: CALL_OW 257
9213: PUSH
9214: LD_INT 1
9216: EQUAL
9217: IFFALSE 9238
// points := [ 10 , 5 , 3 ] ;
9219: LD_ADDR_VAR 0 9
9223: PUSH
9224: LD_INT 10
9226: PUSH
9227: LD_INT 5
9229: PUSH
9230: LD_INT 3
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: LIST
9237: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9238: LD_VAR 0 6
9242: PPUSH
9243: CALL_OW 257
9247: PUSH
9248: LD_INT 2
9250: PUSH
9251: LD_INT 3
9253: PUSH
9254: LD_INT 4
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: LIST
9261: IN
9262: IFFALSE 9283
// points := [ 3 , 2 , 1 ] ;
9264: LD_ADDR_VAR 0 9
9268: PUSH
9269: LD_INT 3
9271: PUSH
9272: LD_INT 2
9274: PUSH
9275: LD_INT 1
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: LIST
9282: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9283: LD_VAR 0 6
9287: PPUSH
9288: CALL_OW 257
9292: PUSH
9293: LD_INT 5
9295: EQUAL
9296: IFFALSE 9317
// points := [ 130 , 5 , 2 ] ;
9298: LD_ADDR_VAR 0 9
9302: PUSH
9303: LD_INT 130
9305: PUSH
9306: LD_INT 5
9308: PUSH
9309: LD_INT 2
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9317: LD_VAR 0 6
9321: PPUSH
9322: CALL_OW 257
9326: PUSH
9327: LD_INT 8
9329: EQUAL
9330: IFFALSE 9351
// points := [ 35 , 35 , 30 ] ;
9332: LD_ADDR_VAR 0 9
9336: PUSH
9337: LD_INT 35
9339: PUSH
9340: LD_INT 35
9342: PUSH
9343: LD_INT 30
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: LIST
9350: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9351: LD_VAR 0 6
9355: PPUSH
9356: CALL_OW 257
9360: PUSH
9361: LD_INT 9
9363: EQUAL
9364: IFFALSE 9385
// points := [ 20 , 55 , 40 ] ;
9366: LD_ADDR_VAR 0 9
9370: PUSH
9371: LD_INT 20
9373: PUSH
9374: LD_INT 55
9376: PUSH
9377: LD_INT 40
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: LIST
9384: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9385: LD_VAR 0 6
9389: PPUSH
9390: CALL_OW 257
9394: PUSH
9395: LD_INT 12
9397: PUSH
9398: LD_INT 16
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: IN
9405: IFFALSE 9426
// points := [ 5 , 3 , 2 ] ;
9407: LD_ADDR_VAR 0 9
9411: PUSH
9412: LD_INT 5
9414: PUSH
9415: LD_INT 3
9417: PUSH
9418: LD_INT 2
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9426: LD_VAR 0 6
9430: PPUSH
9431: CALL_OW 257
9435: PUSH
9436: LD_INT 17
9438: EQUAL
9439: IFFALSE 9460
// points := [ 100 , 50 , 75 ] ;
9441: LD_ADDR_VAR 0 9
9445: PUSH
9446: LD_INT 100
9448: PUSH
9449: LD_INT 50
9451: PUSH
9452: LD_INT 75
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: LIST
9459: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9460: LD_VAR 0 6
9464: PPUSH
9465: CALL_OW 257
9469: PUSH
9470: LD_INT 15
9472: EQUAL
9473: IFFALSE 9494
// points := [ 10 , 5 , 3 ] ;
9475: LD_ADDR_VAR 0 9
9479: PUSH
9480: LD_INT 10
9482: PUSH
9483: LD_INT 5
9485: PUSH
9486: LD_INT 3
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9494: LD_VAR 0 6
9498: PPUSH
9499: CALL_OW 257
9503: PUSH
9504: LD_INT 14
9506: EQUAL
9507: IFFALSE 9528
// points := [ 10 , 0 , 0 ] ;
9509: LD_ADDR_VAR 0 9
9513: PUSH
9514: LD_INT 10
9516: PUSH
9517: LD_INT 0
9519: PUSH
9520: LD_INT 0
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: LIST
9527: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9528: LD_VAR 0 6
9532: PPUSH
9533: CALL_OW 257
9537: PUSH
9538: LD_INT 11
9540: EQUAL
9541: IFFALSE 9562
// points := [ 30 , 10 , 5 ] ;
9543: LD_ADDR_VAR 0 9
9547: PUSH
9548: LD_INT 30
9550: PUSH
9551: LD_INT 10
9553: PUSH
9554: LD_INT 5
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: LIST
9561: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9562: LD_VAR 0 1
9566: PPUSH
9567: LD_INT 5
9569: PPUSH
9570: CALL_OW 321
9574: PUSH
9575: LD_INT 2
9577: EQUAL
9578: IFFALSE 9595
// bpoints := bpoints * 1.8 ;
9580: LD_ADDR_VAR 0 10
9584: PUSH
9585: LD_VAR 0 10
9589: PUSH
9590: LD_REAL  1.80000000000000E+0000
9593: MUL
9594: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9595: LD_VAR 0 6
9599: PPUSH
9600: CALL_OW 257
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: LD_INT 2
9610: PUSH
9611: LD_INT 3
9613: PUSH
9614: LD_INT 4
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: IN
9623: PUSH
9624: LD_VAR 0 1
9628: PPUSH
9629: LD_INT 51
9631: PPUSH
9632: CALL_OW 321
9636: PUSH
9637: LD_INT 2
9639: EQUAL
9640: AND
9641: IFFALSE 9658
// bpoints := bpoints * 1.2 ;
9643: LD_ADDR_VAR 0 10
9647: PUSH
9648: LD_VAR 0 10
9652: PUSH
9653: LD_REAL  1.20000000000000E+0000
9656: MUL
9657: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9658: LD_VAR 0 6
9662: PPUSH
9663: CALL_OW 257
9667: PUSH
9668: LD_INT 5
9670: PUSH
9671: LD_INT 7
9673: PUSH
9674: LD_INT 9
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: IN
9682: PUSH
9683: LD_VAR 0 1
9687: PPUSH
9688: LD_INT 52
9690: PPUSH
9691: CALL_OW 321
9695: PUSH
9696: LD_INT 2
9698: EQUAL
9699: AND
9700: IFFALSE 9717
// bpoints := bpoints * 1.5 ;
9702: LD_ADDR_VAR 0 10
9706: PUSH
9707: LD_VAR 0 10
9711: PUSH
9712: LD_REAL  1.50000000000000E+0000
9715: MUL
9716: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9717: LD_VAR 0 1
9721: PPUSH
9722: LD_INT 66
9724: PPUSH
9725: CALL_OW 321
9729: PUSH
9730: LD_INT 2
9732: EQUAL
9733: IFFALSE 9750
// bpoints := bpoints * 1.1 ;
9735: LD_ADDR_VAR 0 10
9739: PUSH
9740: LD_VAR 0 10
9744: PUSH
9745: LD_REAL  1.10000000000000E+0000
9748: MUL
9749: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9750: LD_ADDR_VAR 0 10
9754: PUSH
9755: LD_VAR 0 10
9759: PUSH
9760: LD_VAR 0 6
9764: PPUSH
9765: LD_INT 1
9767: PPUSH
9768: CALL_OW 259
9772: PUSH
9773: LD_REAL  1.15000000000000E+0000
9776: MUL
9777: MUL
9778: ST_TO_ADDR
// end ; unit_vehicle :
9779: GO 10607
9781: LD_INT 2
9783: DOUBLE
9784: EQUAL
9785: IFTRUE 9789
9787: GO 10595
9789: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9790: LD_VAR 0 6
9794: PPUSH
9795: CALL_OW 264
9799: PUSH
9800: LD_INT 2
9802: PUSH
9803: LD_INT 42
9805: PUSH
9806: LD_INT 24
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: LIST
9813: IN
9814: IFFALSE 9835
// points := [ 25 , 5 , 3 ] ;
9816: LD_ADDR_VAR 0 9
9820: PUSH
9821: LD_INT 25
9823: PUSH
9824: LD_INT 5
9826: PUSH
9827: LD_INT 3
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: LIST
9834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9835: LD_VAR 0 6
9839: PPUSH
9840: CALL_OW 264
9844: PUSH
9845: LD_INT 4
9847: PUSH
9848: LD_INT 43
9850: PUSH
9851: LD_INT 25
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: LIST
9858: IN
9859: IFFALSE 9880
// points := [ 40 , 15 , 5 ] ;
9861: LD_ADDR_VAR 0 9
9865: PUSH
9866: LD_INT 40
9868: PUSH
9869: LD_INT 15
9871: PUSH
9872: LD_INT 5
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: LIST
9879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9880: LD_VAR 0 6
9884: PPUSH
9885: CALL_OW 264
9889: PUSH
9890: LD_INT 3
9892: PUSH
9893: LD_INT 23
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: IN
9900: IFFALSE 9921
// points := [ 7 , 25 , 8 ] ;
9902: LD_ADDR_VAR 0 9
9906: PUSH
9907: LD_INT 7
9909: PUSH
9910: LD_INT 25
9912: PUSH
9913: LD_INT 8
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: LIST
9920: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9921: LD_VAR 0 6
9925: PPUSH
9926: CALL_OW 264
9930: PUSH
9931: LD_INT 5
9933: PUSH
9934: LD_INT 27
9936: PUSH
9937: LD_INT 44
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: LIST
9944: IN
9945: IFFALSE 9966
// points := [ 14 , 50 , 16 ] ;
9947: LD_ADDR_VAR 0 9
9951: PUSH
9952: LD_INT 14
9954: PUSH
9955: LD_INT 50
9957: PUSH
9958: LD_INT 16
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9966: LD_VAR 0 6
9970: PPUSH
9971: CALL_OW 264
9975: PUSH
9976: LD_INT 6
9978: PUSH
9979: LD_INT 46
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: IN
9986: IFFALSE 10007
// points := [ 32 , 120 , 70 ] ;
9988: LD_ADDR_VAR 0 9
9992: PUSH
9993: LD_INT 32
9995: PUSH
9996: LD_INT 120
9998: PUSH
9999: LD_INT 70
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: LIST
10006: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10007: LD_VAR 0 6
10011: PPUSH
10012: CALL_OW 264
10016: PUSH
10017: LD_INT 7
10019: PUSH
10020: LD_INT 28
10022: PUSH
10023: LD_INT 45
10025: PUSH
10026: LD_INT 92
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: IN
10035: IFFALSE 10056
// points := [ 35 , 20 , 45 ] ;
10037: LD_ADDR_VAR 0 9
10041: PUSH
10042: LD_INT 35
10044: PUSH
10045: LD_INT 20
10047: PUSH
10048: LD_INT 45
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: LIST
10055: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10056: LD_VAR 0 6
10060: PPUSH
10061: CALL_OW 264
10065: PUSH
10066: LD_INT 47
10068: PUSH
10069: EMPTY
10070: LIST
10071: IN
10072: IFFALSE 10093
// points := [ 67 , 45 , 75 ] ;
10074: LD_ADDR_VAR 0 9
10078: PUSH
10079: LD_INT 67
10081: PUSH
10082: LD_INT 45
10084: PUSH
10085: LD_INT 75
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: LIST
10092: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10093: LD_VAR 0 6
10097: PPUSH
10098: CALL_OW 264
10102: PUSH
10103: LD_INT 26
10105: PUSH
10106: EMPTY
10107: LIST
10108: IN
10109: IFFALSE 10130
// points := [ 120 , 30 , 80 ] ;
10111: LD_ADDR_VAR 0 9
10115: PUSH
10116: LD_INT 120
10118: PUSH
10119: LD_INT 30
10121: PUSH
10122: LD_INT 80
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10130: LD_VAR 0 6
10134: PPUSH
10135: CALL_OW 264
10139: PUSH
10140: LD_INT 22
10142: PUSH
10143: EMPTY
10144: LIST
10145: IN
10146: IFFALSE 10167
// points := [ 40 , 1 , 1 ] ;
10148: LD_ADDR_VAR 0 9
10152: PUSH
10153: LD_INT 40
10155: PUSH
10156: LD_INT 1
10158: PUSH
10159: LD_INT 1
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: LIST
10166: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10167: LD_VAR 0 6
10171: PPUSH
10172: CALL_OW 264
10176: PUSH
10177: LD_INT 29
10179: PUSH
10180: EMPTY
10181: LIST
10182: IN
10183: IFFALSE 10204
// points := [ 70 , 200 , 400 ] ;
10185: LD_ADDR_VAR 0 9
10189: PUSH
10190: LD_INT 70
10192: PUSH
10193: LD_INT 200
10195: PUSH
10196: LD_INT 400
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: LIST
10203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10204: LD_VAR 0 6
10208: PPUSH
10209: CALL_OW 264
10213: PUSH
10214: LD_INT 14
10216: PUSH
10217: LD_INT 53
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: IN
10224: IFFALSE 10245
// points := [ 40 , 10 , 20 ] ;
10226: LD_ADDR_VAR 0 9
10230: PUSH
10231: LD_INT 40
10233: PUSH
10234: LD_INT 10
10236: PUSH
10237: LD_INT 20
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: LIST
10244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10245: LD_VAR 0 6
10249: PPUSH
10250: CALL_OW 264
10254: PUSH
10255: LD_INT 9
10257: PUSH
10258: EMPTY
10259: LIST
10260: IN
10261: IFFALSE 10282
// points := [ 5 , 70 , 20 ] ;
10263: LD_ADDR_VAR 0 9
10267: PUSH
10268: LD_INT 5
10270: PUSH
10271: LD_INT 70
10273: PUSH
10274: LD_INT 20
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: LIST
10281: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10282: LD_VAR 0 6
10286: PPUSH
10287: CALL_OW 264
10291: PUSH
10292: LD_INT 10
10294: PUSH
10295: EMPTY
10296: LIST
10297: IN
10298: IFFALSE 10319
// points := [ 35 , 110 , 70 ] ;
10300: LD_ADDR_VAR 0 9
10304: PUSH
10305: LD_INT 35
10307: PUSH
10308: LD_INT 110
10310: PUSH
10311: LD_INT 70
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: LIST
10318: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10319: LD_VAR 0 6
10323: PPUSH
10324: CALL_OW 265
10328: PUSH
10329: LD_INT 25
10331: EQUAL
10332: IFFALSE 10353
// points := [ 80 , 65 , 100 ] ;
10334: LD_ADDR_VAR 0 9
10338: PUSH
10339: LD_INT 80
10341: PUSH
10342: LD_INT 65
10344: PUSH
10345: LD_INT 100
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: LIST
10352: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10353: LD_VAR 0 6
10357: PPUSH
10358: CALL_OW 263
10362: PUSH
10363: LD_INT 1
10365: EQUAL
10366: IFFALSE 10401
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10368: LD_ADDR_VAR 0 10
10372: PUSH
10373: LD_VAR 0 10
10377: PUSH
10378: LD_VAR 0 6
10382: PPUSH
10383: CALL_OW 311
10387: PPUSH
10388: LD_INT 3
10390: PPUSH
10391: CALL_OW 259
10395: PUSH
10396: LD_INT 4
10398: MUL
10399: MUL
10400: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10401: LD_VAR 0 6
10405: PPUSH
10406: CALL_OW 263
10410: PUSH
10411: LD_INT 2
10413: EQUAL
10414: IFFALSE 10465
// begin j := IsControledBy ( i ) ;
10416: LD_ADDR_VAR 0 7
10420: PUSH
10421: LD_VAR 0 6
10425: PPUSH
10426: CALL_OW 312
10430: ST_TO_ADDR
// if j then
10431: LD_VAR 0 7
10435: IFFALSE 10465
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10437: LD_ADDR_VAR 0 10
10441: PUSH
10442: LD_VAR 0 10
10446: PUSH
10447: LD_VAR 0 7
10451: PPUSH
10452: LD_INT 3
10454: PPUSH
10455: CALL_OW 259
10459: PUSH
10460: LD_INT 3
10462: MUL
10463: MUL
10464: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10465: LD_VAR 0 6
10469: PPUSH
10470: CALL_OW 264
10474: PUSH
10475: LD_INT 5
10477: PUSH
10478: LD_INT 6
10480: PUSH
10481: LD_INT 46
10483: PUSH
10484: LD_INT 44
10486: PUSH
10487: LD_INT 47
10489: PUSH
10490: LD_INT 45
10492: PUSH
10493: LD_INT 28
10495: PUSH
10496: LD_INT 7
10498: PUSH
10499: LD_INT 27
10501: PUSH
10502: LD_INT 29
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: IN
10517: PUSH
10518: LD_VAR 0 1
10522: PPUSH
10523: LD_INT 52
10525: PPUSH
10526: CALL_OW 321
10530: PUSH
10531: LD_INT 2
10533: EQUAL
10534: AND
10535: IFFALSE 10552
// bpoints := bpoints * 1.2 ;
10537: LD_ADDR_VAR 0 10
10541: PUSH
10542: LD_VAR 0 10
10546: PUSH
10547: LD_REAL  1.20000000000000E+0000
10550: MUL
10551: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10552: LD_VAR 0 6
10556: PPUSH
10557: CALL_OW 264
10561: PUSH
10562: LD_INT 6
10564: PUSH
10565: LD_INT 46
10567: PUSH
10568: LD_INT 47
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: IN
10576: IFFALSE 10593
// bpoints := bpoints * 1.2 ;
10578: LD_ADDR_VAR 0 10
10582: PUSH
10583: LD_VAR 0 10
10587: PUSH
10588: LD_REAL  1.20000000000000E+0000
10591: MUL
10592: ST_TO_ADDR
// end ; unit_building :
10593: GO 10607
10595: LD_INT 3
10597: DOUBLE
10598: EQUAL
10599: IFTRUE 10603
10601: GO 10606
10603: POP
// ; end ;
10604: GO 10607
10606: POP
// for j = 1 to 3 do
10607: LD_ADDR_VAR 0 7
10611: PUSH
10612: DOUBLE
10613: LD_INT 1
10615: DEC
10616: ST_TO_ADDR
10617: LD_INT 3
10619: PUSH
10620: FOR_TO
10621: IFFALSE 10674
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10623: LD_ADDR_VAR 0 5
10627: PUSH
10628: LD_VAR 0 5
10632: PPUSH
10633: LD_VAR 0 7
10637: PPUSH
10638: LD_VAR 0 5
10642: PUSH
10643: LD_VAR 0 7
10647: ARRAY
10648: PUSH
10649: LD_VAR 0 9
10653: PUSH
10654: LD_VAR 0 7
10658: ARRAY
10659: PUSH
10660: LD_VAR 0 10
10664: MUL
10665: PLUS
10666: PPUSH
10667: CALL_OW 1
10671: ST_TO_ADDR
10672: GO 10620
10674: POP
10675: POP
// end ;
10676: GO 9155
10678: POP
10679: POP
// result := Replace ( result , 4 , tmp ) ;
10680: LD_ADDR_VAR 0 5
10684: PUSH
10685: LD_VAR 0 5
10689: PPUSH
10690: LD_INT 4
10692: PPUSH
10693: LD_VAR 0 8
10697: PPUSH
10698: CALL_OW 1
10702: ST_TO_ADDR
// end ;
10703: LD_VAR 0 5
10707: RET
// export function DangerAtRange ( unit , range ) ; begin
10708: LD_INT 0
10710: PPUSH
// if not unit then
10711: LD_VAR 0 1
10715: NOT
10716: IFFALSE 10720
// exit ;
10718: GO 10765
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10720: LD_ADDR_VAR 0 3
10724: PUSH
10725: LD_VAR 0 1
10729: PPUSH
10730: CALL_OW 255
10734: PPUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 250
10744: PPUSH
10745: LD_VAR 0 1
10749: PPUSH
10750: CALL_OW 251
10754: PPUSH
10755: LD_VAR 0 2
10759: PPUSH
10760: CALL 9007 0 4
10764: ST_TO_ADDR
// end ;
10765: LD_VAR 0 3
10769: RET
// export function DangerInArea ( side , area ) ; begin
10770: LD_INT 0
10772: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10773: LD_ADDR_VAR 0 3
10777: PUSH
10778: LD_VAR 0 2
10782: PPUSH
10783: LD_INT 81
10785: PUSH
10786: LD_VAR 0 1
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PPUSH
10795: CALL_OW 70
10799: ST_TO_ADDR
// end ;
10800: LD_VAR 0 3
10804: RET
// export function IsExtension ( b ) ; begin
10805: LD_INT 0
10807: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10808: LD_ADDR_VAR 0 2
10812: PUSH
10813: LD_VAR 0 1
10817: PUSH
10818: LD_INT 23
10820: PUSH
10821: LD_INT 20
10823: PUSH
10824: LD_INT 22
10826: PUSH
10827: LD_INT 17
10829: PUSH
10830: LD_INT 24
10832: PUSH
10833: LD_INT 21
10835: PUSH
10836: LD_INT 19
10838: PUSH
10839: LD_INT 16
10841: PUSH
10842: LD_INT 25
10844: PUSH
10845: LD_INT 18
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: IN
10860: ST_TO_ADDR
// end ;
10861: LD_VAR 0 2
10865: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10866: LD_INT 0
10868: PPUSH
10869: PPUSH
10870: PPUSH
// result := [ ] ;
10871: LD_ADDR_VAR 0 4
10875: PUSH
10876: EMPTY
10877: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10878: LD_ADDR_VAR 0 5
10882: PUSH
10883: LD_VAR 0 2
10887: PPUSH
10888: LD_INT 21
10890: PUSH
10891: LD_INT 3
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PPUSH
10898: CALL_OW 70
10902: ST_TO_ADDR
// if not tmp then
10903: LD_VAR 0 5
10907: NOT
10908: IFFALSE 10912
// exit ;
10910: GO 10976
// if checkLink then
10912: LD_VAR 0 3
10916: IFFALSE 10966
// begin for i in tmp do
10918: LD_ADDR_VAR 0 6
10922: PUSH
10923: LD_VAR 0 5
10927: PUSH
10928: FOR_IN
10929: IFFALSE 10964
// if GetBase ( i ) <> base then
10931: LD_VAR 0 6
10935: PPUSH
10936: CALL_OW 274
10940: PUSH
10941: LD_VAR 0 1
10945: NONEQUAL
10946: IFFALSE 10962
// ComLinkToBase ( base , i ) ;
10948: LD_VAR 0 1
10952: PPUSH
10953: LD_VAR 0 6
10957: PPUSH
10958: CALL_OW 169
10962: GO 10928
10964: POP
10965: POP
// end ; result := tmp ;
10966: LD_ADDR_VAR 0 4
10970: PUSH
10971: LD_VAR 0 5
10975: ST_TO_ADDR
// end ;
10976: LD_VAR 0 4
10980: RET
// export function ComComplete ( units , b ) ; var i ; begin
10981: LD_INT 0
10983: PPUSH
10984: PPUSH
// if not units then
10985: LD_VAR 0 1
10989: NOT
10990: IFFALSE 10994
// exit ;
10992: GO 11084
// for i in units do
10994: LD_ADDR_VAR 0 4
10998: PUSH
10999: LD_VAR 0 1
11003: PUSH
11004: FOR_IN
11005: IFFALSE 11082
// if BuildingStatus ( b ) = bs_build then
11007: LD_VAR 0 2
11011: PPUSH
11012: CALL_OW 461
11016: PUSH
11017: LD_INT 1
11019: EQUAL
11020: IFFALSE 11080
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11022: LD_VAR 0 4
11026: PPUSH
11027: LD_STRING h
11029: PUSH
11030: LD_VAR 0 2
11034: PPUSH
11035: CALL_OW 250
11039: PUSH
11040: LD_VAR 0 2
11044: PPUSH
11045: CALL_OW 251
11049: PUSH
11050: LD_VAR 0 2
11054: PUSH
11055: LD_INT 0
11057: PUSH
11058: LD_INT 0
11060: PUSH
11061: LD_INT 0
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: PPUSH
11076: CALL_OW 446
11080: GO 11004
11082: POP
11083: POP
// end ;
11084: LD_VAR 0 3
11088: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11089: LD_INT 0
11091: PPUSH
11092: PPUSH
11093: PPUSH
11094: PPUSH
11095: PPUSH
11096: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11097: LD_VAR 0 1
11101: NOT
11102: PUSH
11103: LD_VAR 0 1
11107: PPUSH
11108: CALL_OW 263
11112: PUSH
11113: LD_INT 2
11115: NONEQUAL
11116: OR
11117: IFFALSE 11121
// exit ;
11119: GO 11437
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11121: LD_ADDR_VAR 0 6
11125: PUSH
11126: LD_INT 22
11128: PUSH
11129: LD_VAR 0 1
11133: PPUSH
11134: CALL_OW 255
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PUSH
11143: LD_INT 2
11145: PUSH
11146: LD_INT 30
11148: PUSH
11149: LD_INT 36
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: PUSH
11156: LD_INT 34
11158: PUSH
11159: LD_INT 31
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PPUSH
11175: CALL_OW 69
11179: ST_TO_ADDR
// if not tmp then
11180: LD_VAR 0 6
11184: NOT
11185: IFFALSE 11189
// exit ;
11187: GO 11437
// result := [ ] ;
11189: LD_ADDR_VAR 0 2
11193: PUSH
11194: EMPTY
11195: ST_TO_ADDR
// for i in tmp do
11196: LD_ADDR_VAR 0 3
11200: PUSH
11201: LD_VAR 0 6
11205: PUSH
11206: FOR_IN
11207: IFFALSE 11278
// begin t := UnitsInside ( i ) ;
11209: LD_ADDR_VAR 0 4
11213: PUSH
11214: LD_VAR 0 3
11218: PPUSH
11219: CALL_OW 313
11223: ST_TO_ADDR
// if t then
11224: LD_VAR 0 4
11228: IFFALSE 11276
// for j in t do
11230: LD_ADDR_VAR 0 7
11234: PUSH
11235: LD_VAR 0 4
11239: PUSH
11240: FOR_IN
11241: IFFALSE 11274
// result := Replace ( result , result + 1 , j ) ;
11243: LD_ADDR_VAR 0 2
11247: PUSH
11248: LD_VAR 0 2
11252: PPUSH
11253: LD_VAR 0 2
11257: PUSH
11258: LD_INT 1
11260: PLUS
11261: PPUSH
11262: LD_VAR 0 7
11266: PPUSH
11267: CALL_OW 1
11271: ST_TO_ADDR
11272: GO 11240
11274: POP
11275: POP
// end ;
11276: GO 11206
11278: POP
11279: POP
// if not result then
11280: LD_VAR 0 2
11284: NOT
11285: IFFALSE 11289
// exit ;
11287: GO 11437
// mech := result [ 1 ] ;
11289: LD_ADDR_VAR 0 5
11293: PUSH
11294: LD_VAR 0 2
11298: PUSH
11299: LD_INT 1
11301: ARRAY
11302: ST_TO_ADDR
// if result > 1 then
11303: LD_VAR 0 2
11307: PUSH
11308: LD_INT 1
11310: GREATER
11311: IFFALSE 11423
// begin for i = 2 to result do
11313: LD_ADDR_VAR 0 3
11317: PUSH
11318: DOUBLE
11319: LD_INT 2
11321: DEC
11322: ST_TO_ADDR
11323: LD_VAR 0 2
11327: PUSH
11328: FOR_TO
11329: IFFALSE 11421
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11331: LD_ADDR_VAR 0 4
11335: PUSH
11336: LD_VAR 0 2
11340: PUSH
11341: LD_VAR 0 3
11345: ARRAY
11346: PPUSH
11347: LD_INT 3
11349: PPUSH
11350: CALL_OW 259
11354: PUSH
11355: LD_VAR 0 2
11359: PUSH
11360: LD_VAR 0 3
11364: ARRAY
11365: PPUSH
11366: CALL_OW 432
11370: MINUS
11371: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11372: LD_VAR 0 4
11376: PUSH
11377: LD_VAR 0 5
11381: PPUSH
11382: LD_INT 3
11384: PPUSH
11385: CALL_OW 259
11389: PUSH
11390: LD_VAR 0 5
11394: PPUSH
11395: CALL_OW 432
11399: MINUS
11400: GREATEREQUAL
11401: IFFALSE 11419
// mech := result [ i ] ;
11403: LD_ADDR_VAR 0 5
11407: PUSH
11408: LD_VAR 0 2
11412: PUSH
11413: LD_VAR 0 3
11417: ARRAY
11418: ST_TO_ADDR
// end ;
11419: GO 11328
11421: POP
11422: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11423: LD_VAR 0 1
11427: PPUSH
11428: LD_VAR 0 5
11432: PPUSH
11433: CALL_OW 135
// end ;
11437: LD_VAR 0 2
11441: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11442: LD_INT 0
11444: PPUSH
11445: PPUSH
11446: PPUSH
11447: PPUSH
11448: PPUSH
11449: PPUSH
11450: PPUSH
11451: PPUSH
11452: PPUSH
11453: PPUSH
11454: PPUSH
11455: PPUSH
11456: PPUSH
// result := [ ] ;
11457: LD_ADDR_VAR 0 7
11461: PUSH
11462: EMPTY
11463: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11464: LD_VAR 0 1
11468: PPUSH
11469: CALL_OW 266
11473: PUSH
11474: LD_INT 0
11476: PUSH
11477: LD_INT 1
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: IN
11484: NOT
11485: IFFALSE 11489
// exit ;
11487: GO 13123
// if name then
11489: LD_VAR 0 3
11493: IFFALSE 11509
// SetBName ( base_dep , name ) ;
11495: LD_VAR 0 1
11499: PPUSH
11500: LD_VAR 0 3
11504: PPUSH
11505: CALL_OW 500
// base := GetBase ( base_dep ) ;
11509: LD_ADDR_VAR 0 15
11513: PUSH
11514: LD_VAR 0 1
11518: PPUSH
11519: CALL_OW 274
11523: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11524: LD_ADDR_VAR 0 16
11528: PUSH
11529: LD_VAR 0 1
11533: PPUSH
11534: CALL_OW 255
11538: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11539: LD_ADDR_VAR 0 17
11543: PUSH
11544: LD_VAR 0 1
11548: PPUSH
11549: CALL_OW 248
11553: ST_TO_ADDR
// if sources then
11554: LD_VAR 0 5
11558: IFFALSE 11605
// for i = 1 to 3 do
11560: LD_ADDR_VAR 0 8
11564: PUSH
11565: DOUBLE
11566: LD_INT 1
11568: DEC
11569: ST_TO_ADDR
11570: LD_INT 3
11572: PUSH
11573: FOR_TO
11574: IFFALSE 11603
// AddResourceType ( base , i , sources [ i ] ) ;
11576: LD_VAR 0 15
11580: PPUSH
11581: LD_VAR 0 8
11585: PPUSH
11586: LD_VAR 0 5
11590: PUSH
11591: LD_VAR 0 8
11595: ARRAY
11596: PPUSH
11597: CALL_OW 276
11601: GO 11573
11603: POP
11604: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11605: LD_ADDR_VAR 0 18
11609: PUSH
11610: LD_VAR 0 15
11614: PPUSH
11615: LD_VAR 0 2
11619: PPUSH
11620: LD_INT 1
11622: PPUSH
11623: CALL 10866 0 3
11627: ST_TO_ADDR
// InitHc ;
11628: CALL_OW 19
// InitUc ;
11632: CALL_OW 18
// uc_side := side ;
11636: LD_ADDR_OWVAR 20
11640: PUSH
11641: LD_VAR 0 16
11645: ST_TO_ADDR
// uc_nation := nation ;
11646: LD_ADDR_OWVAR 21
11650: PUSH
11651: LD_VAR 0 17
11655: ST_TO_ADDR
// if buildings then
11656: LD_VAR 0 18
11660: IFFALSE 12982
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11662: LD_ADDR_VAR 0 19
11666: PUSH
11667: LD_VAR 0 18
11671: PPUSH
11672: LD_INT 2
11674: PUSH
11675: LD_INT 30
11677: PUSH
11678: LD_INT 29
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 30
11687: PUSH
11688: LD_INT 30
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 72
11704: ST_TO_ADDR
// if tmp then
11705: LD_VAR 0 19
11709: IFFALSE 11757
// for i in tmp do
11711: LD_ADDR_VAR 0 8
11715: PUSH
11716: LD_VAR 0 19
11720: PUSH
11721: FOR_IN
11722: IFFALSE 11755
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11724: LD_VAR 0 8
11728: PPUSH
11729: CALL_OW 250
11733: PPUSH
11734: LD_VAR 0 8
11738: PPUSH
11739: CALL_OW 251
11743: PPUSH
11744: LD_VAR 0 16
11748: PPUSH
11749: CALL_OW 441
11753: GO 11721
11755: POP
11756: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11757: LD_VAR 0 18
11761: PPUSH
11762: LD_INT 2
11764: PUSH
11765: LD_INT 30
11767: PUSH
11768: LD_INT 32
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 30
11777: PUSH
11778: LD_INT 33
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: LIST
11789: PPUSH
11790: CALL_OW 72
11794: IFFALSE 11882
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11796: LD_ADDR_VAR 0 8
11800: PUSH
11801: LD_VAR 0 18
11805: PPUSH
11806: LD_INT 2
11808: PUSH
11809: LD_INT 30
11811: PUSH
11812: LD_INT 32
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 30
11821: PUSH
11822: LD_INT 33
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: LIST
11833: PPUSH
11834: CALL_OW 72
11838: PUSH
11839: FOR_IN
11840: IFFALSE 11880
// begin if not GetBWeapon ( i ) then
11842: LD_VAR 0 8
11846: PPUSH
11847: CALL_OW 269
11851: NOT
11852: IFFALSE 11878
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11854: LD_VAR 0 8
11858: PPUSH
11859: LD_VAR 0 8
11863: PPUSH
11864: LD_VAR 0 2
11868: PPUSH
11869: CALL 13128 0 2
11873: PPUSH
11874: CALL_OW 431
// end ;
11878: GO 11839
11880: POP
11881: POP
// end ; for i = 1 to personel do
11882: LD_ADDR_VAR 0 8
11886: PUSH
11887: DOUBLE
11888: LD_INT 1
11890: DEC
11891: ST_TO_ADDR
11892: LD_VAR 0 6
11896: PUSH
11897: FOR_TO
11898: IFFALSE 12962
// begin if i > 4 then
11900: LD_VAR 0 8
11904: PUSH
11905: LD_INT 4
11907: GREATER
11908: IFFALSE 11912
// break ;
11910: GO 12962
// case i of 1 :
11912: LD_VAR 0 8
11916: PUSH
11917: LD_INT 1
11919: DOUBLE
11920: EQUAL
11921: IFTRUE 11925
11923: GO 12005
11925: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11926: LD_ADDR_VAR 0 12
11930: PUSH
11931: LD_VAR 0 18
11935: PPUSH
11936: LD_INT 22
11938: PUSH
11939: LD_VAR 0 16
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: LD_INT 58
11950: PUSH
11951: EMPTY
11952: LIST
11953: PUSH
11954: LD_INT 2
11956: PUSH
11957: LD_INT 30
11959: PUSH
11960: LD_INT 32
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 30
11969: PUSH
11970: LD_INT 4
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 30
11979: PUSH
11980: LD_INT 5
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: LIST
11997: PPUSH
11998: CALL_OW 72
12002: ST_TO_ADDR
12003: GO 12227
12005: LD_INT 2
12007: DOUBLE
12008: EQUAL
12009: IFTRUE 12013
12011: GO 12075
12013: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12014: LD_ADDR_VAR 0 12
12018: PUSH
12019: LD_VAR 0 18
12023: PPUSH
12024: LD_INT 22
12026: PUSH
12027: LD_VAR 0 16
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: LD_INT 2
12038: PUSH
12039: LD_INT 30
12041: PUSH
12042: LD_INT 0
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: LD_INT 30
12051: PUSH
12052: LD_INT 1
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: LIST
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PPUSH
12068: CALL_OW 72
12072: ST_TO_ADDR
12073: GO 12227
12075: LD_INT 3
12077: DOUBLE
12078: EQUAL
12079: IFTRUE 12083
12081: GO 12145
12083: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12084: LD_ADDR_VAR 0 12
12088: PUSH
12089: LD_VAR 0 18
12093: PPUSH
12094: LD_INT 22
12096: PUSH
12097: LD_VAR 0 16
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 2
12108: PUSH
12109: LD_INT 30
12111: PUSH
12112: LD_INT 2
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: LD_INT 30
12121: PUSH
12122: LD_INT 3
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PPUSH
12138: CALL_OW 72
12142: ST_TO_ADDR
12143: GO 12227
12145: LD_INT 4
12147: DOUBLE
12148: EQUAL
12149: IFTRUE 12153
12151: GO 12226
12153: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12154: LD_ADDR_VAR 0 12
12158: PUSH
12159: LD_VAR 0 18
12163: PPUSH
12164: LD_INT 22
12166: PUSH
12167: LD_VAR 0 16
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 2
12178: PUSH
12179: LD_INT 30
12181: PUSH
12182: LD_INT 6
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 30
12191: PUSH
12192: LD_INT 7
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 30
12201: PUSH
12202: LD_INT 8
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PPUSH
12219: CALL_OW 72
12223: ST_TO_ADDR
12224: GO 12227
12226: POP
// if i = 1 then
12227: LD_VAR 0 8
12231: PUSH
12232: LD_INT 1
12234: EQUAL
12235: IFFALSE 12346
// begin tmp := [ ] ;
12237: LD_ADDR_VAR 0 19
12241: PUSH
12242: EMPTY
12243: ST_TO_ADDR
// for j in f do
12244: LD_ADDR_VAR 0 9
12248: PUSH
12249: LD_VAR 0 12
12253: PUSH
12254: FOR_IN
12255: IFFALSE 12328
// if GetBType ( j ) = b_bunker then
12257: LD_VAR 0 9
12261: PPUSH
12262: CALL_OW 266
12266: PUSH
12267: LD_INT 32
12269: EQUAL
12270: IFFALSE 12297
// tmp := Insert ( tmp , 1 , j ) else
12272: LD_ADDR_VAR 0 19
12276: PUSH
12277: LD_VAR 0 19
12281: PPUSH
12282: LD_INT 1
12284: PPUSH
12285: LD_VAR 0 9
12289: PPUSH
12290: CALL_OW 2
12294: ST_TO_ADDR
12295: GO 12326
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12297: LD_ADDR_VAR 0 19
12301: PUSH
12302: LD_VAR 0 19
12306: PPUSH
12307: LD_VAR 0 19
12311: PUSH
12312: LD_INT 1
12314: PLUS
12315: PPUSH
12316: LD_VAR 0 9
12320: PPUSH
12321: CALL_OW 2
12325: ST_TO_ADDR
12326: GO 12254
12328: POP
12329: POP
// if tmp then
12330: LD_VAR 0 19
12334: IFFALSE 12346
// f := tmp ;
12336: LD_ADDR_VAR 0 12
12340: PUSH
12341: LD_VAR 0 19
12345: ST_TO_ADDR
// end ; x := personel [ i ] ;
12346: LD_ADDR_VAR 0 13
12350: PUSH
12351: LD_VAR 0 6
12355: PUSH
12356: LD_VAR 0 8
12360: ARRAY
12361: ST_TO_ADDR
// if x = - 1 then
12362: LD_VAR 0 13
12366: PUSH
12367: LD_INT 1
12369: NEG
12370: EQUAL
12371: IFFALSE 12580
// begin for j in f do
12373: LD_ADDR_VAR 0 9
12377: PUSH
12378: LD_VAR 0 12
12382: PUSH
12383: FOR_IN
12384: IFFALSE 12576
// repeat InitHc ;
12386: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12390: LD_VAR 0 9
12394: PPUSH
12395: CALL_OW 266
12399: PUSH
12400: LD_INT 5
12402: EQUAL
12403: IFFALSE 12473
// begin if UnitsInside ( j ) < 3 then
12405: LD_VAR 0 9
12409: PPUSH
12410: CALL_OW 313
12414: PUSH
12415: LD_INT 3
12417: LESS
12418: IFFALSE 12454
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12420: LD_INT 0
12422: PPUSH
12423: LD_INT 5
12425: PUSH
12426: LD_INT 8
12428: PUSH
12429: LD_INT 9
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: LIST
12436: PUSH
12437: LD_VAR 0 17
12441: ARRAY
12442: PPUSH
12443: LD_VAR 0 4
12447: PPUSH
12448: CALL_OW 380
12452: GO 12471
// PrepareHuman ( false , i , skill ) ;
12454: LD_INT 0
12456: PPUSH
12457: LD_VAR 0 8
12461: PPUSH
12462: LD_VAR 0 4
12466: PPUSH
12467: CALL_OW 380
// end else
12471: GO 12490
// PrepareHuman ( false , i , skill ) ;
12473: LD_INT 0
12475: PPUSH
12476: LD_VAR 0 8
12480: PPUSH
12481: LD_VAR 0 4
12485: PPUSH
12486: CALL_OW 380
// un := CreateHuman ;
12490: LD_ADDR_VAR 0 14
12494: PUSH
12495: CALL_OW 44
12499: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12500: LD_ADDR_VAR 0 7
12504: PUSH
12505: LD_VAR 0 7
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: LD_VAR 0 14
12517: PPUSH
12518: CALL_OW 2
12522: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12523: LD_VAR 0 14
12527: PPUSH
12528: LD_VAR 0 9
12532: PPUSH
12533: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12537: LD_VAR 0 9
12541: PPUSH
12542: CALL_OW 313
12546: PUSH
12547: LD_INT 6
12549: EQUAL
12550: PUSH
12551: LD_VAR 0 9
12555: PPUSH
12556: CALL_OW 266
12560: PUSH
12561: LD_INT 32
12563: PUSH
12564: LD_INT 31
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: IN
12571: OR
12572: IFFALSE 12386
12574: GO 12383
12576: POP
12577: POP
// end else
12578: GO 12960
// for j = 1 to x do
12580: LD_ADDR_VAR 0 9
12584: PUSH
12585: DOUBLE
12586: LD_INT 1
12588: DEC
12589: ST_TO_ADDR
12590: LD_VAR 0 13
12594: PUSH
12595: FOR_TO
12596: IFFALSE 12958
// begin InitHc ;
12598: CALL_OW 19
// if not f then
12602: LD_VAR 0 12
12606: NOT
12607: IFFALSE 12696
// begin PrepareHuman ( false , i , skill ) ;
12609: LD_INT 0
12611: PPUSH
12612: LD_VAR 0 8
12616: PPUSH
12617: LD_VAR 0 4
12621: PPUSH
12622: CALL_OW 380
// un := CreateHuman ;
12626: LD_ADDR_VAR 0 14
12630: PUSH
12631: CALL_OW 44
12635: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12636: LD_ADDR_VAR 0 7
12640: PUSH
12641: LD_VAR 0 7
12645: PPUSH
12646: LD_INT 1
12648: PPUSH
12649: LD_VAR 0 14
12653: PPUSH
12654: CALL_OW 2
12658: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12659: LD_VAR 0 14
12663: PPUSH
12664: LD_VAR 0 1
12668: PPUSH
12669: CALL_OW 250
12673: PPUSH
12674: LD_VAR 0 1
12678: PPUSH
12679: CALL_OW 251
12683: PPUSH
12684: LD_INT 10
12686: PPUSH
12687: LD_INT 0
12689: PPUSH
12690: CALL_OW 50
// continue ;
12694: GO 12595
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12696: LD_VAR 0 12
12700: PUSH
12701: LD_INT 1
12703: ARRAY
12704: PPUSH
12705: CALL_OW 313
12709: PUSH
12710: LD_VAR 0 12
12714: PUSH
12715: LD_INT 1
12717: ARRAY
12718: PPUSH
12719: CALL_OW 266
12723: PUSH
12724: LD_INT 32
12726: PUSH
12727: LD_INT 31
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: IN
12734: AND
12735: PUSH
12736: LD_VAR 0 12
12740: PUSH
12741: LD_INT 1
12743: ARRAY
12744: PPUSH
12745: CALL_OW 313
12749: PUSH
12750: LD_INT 6
12752: EQUAL
12753: OR
12754: IFFALSE 12774
// f := Delete ( f , 1 ) ;
12756: LD_ADDR_VAR 0 12
12760: PUSH
12761: LD_VAR 0 12
12765: PPUSH
12766: LD_INT 1
12768: PPUSH
12769: CALL_OW 3
12773: ST_TO_ADDR
// if not f then
12774: LD_VAR 0 12
12778: NOT
12779: IFFALSE 12797
// begin x := x + 2 ;
12781: LD_ADDR_VAR 0 13
12785: PUSH
12786: LD_VAR 0 13
12790: PUSH
12791: LD_INT 2
12793: PLUS
12794: ST_TO_ADDR
// continue ;
12795: GO 12595
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12797: LD_VAR 0 12
12801: PUSH
12802: LD_INT 1
12804: ARRAY
12805: PPUSH
12806: CALL_OW 266
12810: PUSH
12811: LD_INT 5
12813: EQUAL
12814: IFFALSE 12888
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12816: LD_VAR 0 12
12820: PUSH
12821: LD_INT 1
12823: ARRAY
12824: PPUSH
12825: CALL_OW 313
12829: PUSH
12830: LD_INT 3
12832: LESS
12833: IFFALSE 12869
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12835: LD_INT 0
12837: PPUSH
12838: LD_INT 5
12840: PUSH
12841: LD_INT 8
12843: PUSH
12844: LD_INT 9
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: LIST
12851: PUSH
12852: LD_VAR 0 17
12856: ARRAY
12857: PPUSH
12858: LD_VAR 0 4
12862: PPUSH
12863: CALL_OW 380
12867: GO 12886
// PrepareHuman ( false , i , skill ) ;
12869: LD_INT 0
12871: PPUSH
12872: LD_VAR 0 8
12876: PPUSH
12877: LD_VAR 0 4
12881: PPUSH
12882: CALL_OW 380
// end else
12886: GO 12905
// PrepareHuman ( false , i , skill ) ;
12888: LD_INT 0
12890: PPUSH
12891: LD_VAR 0 8
12895: PPUSH
12896: LD_VAR 0 4
12900: PPUSH
12901: CALL_OW 380
// un := CreateHuman ;
12905: LD_ADDR_VAR 0 14
12909: PUSH
12910: CALL_OW 44
12914: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12915: LD_ADDR_VAR 0 7
12919: PUSH
12920: LD_VAR 0 7
12924: PPUSH
12925: LD_INT 1
12927: PPUSH
12928: LD_VAR 0 14
12932: PPUSH
12933: CALL_OW 2
12937: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12938: LD_VAR 0 14
12942: PPUSH
12943: LD_VAR 0 12
12947: PUSH
12948: LD_INT 1
12950: ARRAY
12951: PPUSH
12952: CALL_OW 52
// end ;
12956: GO 12595
12958: POP
12959: POP
// end ;
12960: GO 11897
12962: POP
12963: POP
// result := result ^ buildings ;
12964: LD_ADDR_VAR 0 7
12968: PUSH
12969: LD_VAR 0 7
12973: PUSH
12974: LD_VAR 0 18
12978: ADD
12979: ST_TO_ADDR
// end else
12980: GO 13123
// begin for i = 1 to personel do
12982: LD_ADDR_VAR 0 8
12986: PUSH
12987: DOUBLE
12988: LD_INT 1
12990: DEC
12991: ST_TO_ADDR
12992: LD_VAR 0 6
12996: PUSH
12997: FOR_TO
12998: IFFALSE 13121
// begin if i > 4 then
13000: LD_VAR 0 8
13004: PUSH
13005: LD_INT 4
13007: GREATER
13008: IFFALSE 13012
// break ;
13010: GO 13121
// x := personel [ i ] ;
13012: LD_ADDR_VAR 0 13
13016: PUSH
13017: LD_VAR 0 6
13021: PUSH
13022: LD_VAR 0 8
13026: ARRAY
13027: ST_TO_ADDR
// if x = - 1 then
13028: LD_VAR 0 13
13032: PUSH
13033: LD_INT 1
13035: NEG
13036: EQUAL
13037: IFFALSE 13041
// continue ;
13039: GO 12997
// PrepareHuman ( false , i , skill ) ;
13041: LD_INT 0
13043: PPUSH
13044: LD_VAR 0 8
13048: PPUSH
13049: LD_VAR 0 4
13053: PPUSH
13054: CALL_OW 380
// un := CreateHuman ;
13058: LD_ADDR_VAR 0 14
13062: PUSH
13063: CALL_OW 44
13067: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13068: LD_VAR 0 14
13072: PPUSH
13073: LD_VAR 0 1
13077: PPUSH
13078: CALL_OW 250
13082: PPUSH
13083: LD_VAR 0 1
13087: PPUSH
13088: CALL_OW 251
13092: PPUSH
13093: LD_INT 10
13095: PPUSH
13096: LD_INT 0
13098: PPUSH
13099: CALL_OW 50
// result := result ^ un ;
13103: LD_ADDR_VAR 0 7
13107: PUSH
13108: LD_VAR 0 7
13112: PUSH
13113: LD_VAR 0 14
13117: ADD
13118: ST_TO_ADDR
// end ;
13119: GO 12997
13121: POP
13122: POP
// end ; end ;
13123: LD_VAR 0 7
13127: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13128: LD_INT 0
13130: PPUSH
13131: PPUSH
13132: PPUSH
13133: PPUSH
13134: PPUSH
13135: PPUSH
13136: PPUSH
13137: PPUSH
13138: PPUSH
13139: PPUSH
13140: PPUSH
13141: PPUSH
13142: PPUSH
13143: PPUSH
13144: PPUSH
13145: PPUSH
// result := false ;
13146: LD_ADDR_VAR 0 3
13150: PUSH
13151: LD_INT 0
13153: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13154: LD_VAR 0 1
13158: NOT
13159: PUSH
13160: LD_VAR 0 1
13164: PPUSH
13165: CALL_OW 266
13169: PUSH
13170: LD_INT 32
13172: PUSH
13173: LD_INT 33
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: IN
13180: NOT
13181: OR
13182: IFFALSE 13186
// exit ;
13184: GO 14295
// nat := GetNation ( tower ) ;
13186: LD_ADDR_VAR 0 12
13190: PUSH
13191: LD_VAR 0 1
13195: PPUSH
13196: CALL_OW 248
13200: ST_TO_ADDR
// side := GetSide ( tower ) ;
13201: LD_ADDR_VAR 0 16
13205: PUSH
13206: LD_VAR 0 1
13210: PPUSH
13211: CALL_OW 255
13215: ST_TO_ADDR
// x := GetX ( tower ) ;
13216: LD_ADDR_VAR 0 10
13220: PUSH
13221: LD_VAR 0 1
13225: PPUSH
13226: CALL_OW 250
13230: ST_TO_ADDR
// y := GetY ( tower ) ;
13231: LD_ADDR_VAR 0 11
13235: PUSH
13236: LD_VAR 0 1
13240: PPUSH
13241: CALL_OW 251
13245: ST_TO_ADDR
// if not x or not y then
13246: LD_VAR 0 10
13250: NOT
13251: PUSH
13252: LD_VAR 0 11
13256: NOT
13257: OR
13258: IFFALSE 13262
// exit ;
13260: GO 14295
// weapon := 0 ;
13262: LD_ADDR_VAR 0 18
13266: PUSH
13267: LD_INT 0
13269: ST_TO_ADDR
// fac_list := [ ] ;
13270: LD_ADDR_VAR 0 17
13274: PUSH
13275: EMPTY
13276: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13277: LD_ADDR_VAR 0 6
13281: PUSH
13282: LD_VAR 0 1
13286: PPUSH
13287: CALL_OW 274
13291: PPUSH
13292: LD_VAR 0 2
13296: PPUSH
13297: LD_INT 0
13299: PPUSH
13300: CALL 10866 0 3
13304: PPUSH
13305: LD_INT 30
13307: PUSH
13308: LD_INT 3
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PPUSH
13315: CALL_OW 72
13319: ST_TO_ADDR
// if not factories then
13320: LD_VAR 0 6
13324: NOT
13325: IFFALSE 13329
// exit ;
13327: GO 14295
// for i in factories do
13329: LD_ADDR_VAR 0 8
13333: PUSH
13334: LD_VAR 0 6
13338: PUSH
13339: FOR_IN
13340: IFFALSE 13365
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13342: LD_ADDR_VAR 0 17
13346: PUSH
13347: LD_VAR 0 17
13351: PUSH
13352: LD_VAR 0 8
13356: PPUSH
13357: CALL_OW 478
13361: UNION
13362: ST_TO_ADDR
13363: GO 13339
13365: POP
13366: POP
// if not fac_list then
13367: LD_VAR 0 17
13371: NOT
13372: IFFALSE 13376
// exit ;
13374: GO 14295
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13376: LD_ADDR_VAR 0 5
13380: PUSH
13381: LD_INT 4
13383: PUSH
13384: LD_INT 5
13386: PUSH
13387: LD_INT 9
13389: PUSH
13390: LD_INT 10
13392: PUSH
13393: LD_INT 6
13395: PUSH
13396: LD_INT 7
13398: PUSH
13399: LD_INT 11
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 27
13413: PUSH
13414: LD_INT 28
13416: PUSH
13417: LD_INT 26
13419: PUSH
13420: LD_INT 30
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: PUSH
13429: LD_INT 43
13431: PUSH
13432: LD_INT 44
13434: PUSH
13435: LD_INT 46
13437: PUSH
13438: LD_INT 45
13440: PUSH
13441: LD_INT 47
13443: PUSH
13444: LD_INT 49
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: LIST
13459: PUSH
13460: LD_VAR 0 12
13464: ARRAY
13465: ST_TO_ADDR
// list := list isect fac_list ;
13466: LD_ADDR_VAR 0 5
13470: PUSH
13471: LD_VAR 0 5
13475: PUSH
13476: LD_VAR 0 17
13480: ISECT
13481: ST_TO_ADDR
// if not list then
13482: LD_VAR 0 5
13486: NOT
13487: IFFALSE 13491
// exit ;
13489: GO 14295
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13491: LD_VAR 0 12
13495: PUSH
13496: LD_INT 3
13498: EQUAL
13499: PUSH
13500: LD_INT 49
13502: PUSH
13503: LD_VAR 0 5
13507: IN
13508: AND
13509: PUSH
13510: LD_INT 31
13512: PPUSH
13513: LD_VAR 0 16
13517: PPUSH
13518: CALL_OW 321
13522: PUSH
13523: LD_INT 2
13525: EQUAL
13526: AND
13527: IFFALSE 13587
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13529: LD_INT 22
13531: PUSH
13532: LD_VAR 0 16
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: LD_INT 35
13543: PUSH
13544: LD_INT 49
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: PUSH
13551: LD_INT 91
13553: PUSH
13554: LD_VAR 0 1
13558: PUSH
13559: LD_INT 10
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: LIST
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: LIST
13571: PPUSH
13572: CALL_OW 69
13576: NOT
13577: IFFALSE 13587
// weapon := ru_time_lapser ;
13579: LD_ADDR_VAR 0 18
13583: PUSH
13584: LD_INT 49
13586: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13587: LD_VAR 0 12
13591: PUSH
13592: LD_INT 1
13594: PUSH
13595: LD_INT 2
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: IN
13602: PUSH
13603: LD_INT 11
13605: PUSH
13606: LD_VAR 0 5
13610: IN
13611: PUSH
13612: LD_INT 30
13614: PUSH
13615: LD_VAR 0 5
13619: IN
13620: OR
13621: AND
13622: PUSH
13623: LD_INT 6
13625: PPUSH
13626: LD_VAR 0 16
13630: PPUSH
13631: CALL_OW 321
13635: PUSH
13636: LD_INT 2
13638: EQUAL
13639: AND
13640: IFFALSE 13805
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13642: LD_INT 22
13644: PUSH
13645: LD_VAR 0 16
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: LD_INT 2
13656: PUSH
13657: LD_INT 35
13659: PUSH
13660: LD_INT 11
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PUSH
13667: LD_INT 35
13669: PUSH
13670: LD_INT 30
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 91
13684: PUSH
13685: LD_VAR 0 1
13689: PUSH
13690: LD_INT 18
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: LIST
13702: PPUSH
13703: CALL_OW 69
13707: NOT
13708: PUSH
13709: LD_INT 22
13711: PUSH
13712: LD_VAR 0 16
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 2
13723: PUSH
13724: LD_INT 30
13726: PUSH
13727: LD_INT 32
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 30
13736: PUSH
13737: LD_INT 33
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: LIST
13748: PUSH
13749: LD_INT 91
13751: PUSH
13752: LD_VAR 0 1
13756: PUSH
13757: LD_INT 12
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: LIST
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: LIST
13769: PUSH
13770: EMPTY
13771: LIST
13772: PPUSH
13773: CALL_OW 69
13777: PUSH
13778: LD_INT 2
13780: GREATER
13781: AND
13782: IFFALSE 13805
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13784: LD_ADDR_VAR 0 18
13788: PUSH
13789: LD_INT 11
13791: PUSH
13792: LD_INT 30
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: LD_VAR 0 12
13803: ARRAY
13804: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13805: LD_VAR 0 18
13809: NOT
13810: PUSH
13811: LD_INT 40
13813: PPUSH
13814: LD_VAR 0 16
13818: PPUSH
13819: CALL_OW 321
13823: PUSH
13824: LD_INT 2
13826: EQUAL
13827: AND
13828: PUSH
13829: LD_INT 7
13831: PUSH
13832: LD_VAR 0 5
13836: IN
13837: PUSH
13838: LD_INT 28
13840: PUSH
13841: LD_VAR 0 5
13845: IN
13846: OR
13847: PUSH
13848: LD_INT 45
13850: PUSH
13851: LD_VAR 0 5
13855: IN
13856: OR
13857: AND
13858: IFFALSE 14112
// begin hex := GetHexInfo ( x , y ) ;
13860: LD_ADDR_VAR 0 4
13864: PUSH
13865: LD_VAR 0 10
13869: PPUSH
13870: LD_VAR 0 11
13874: PPUSH
13875: CALL_OW 546
13879: ST_TO_ADDR
// if hex [ 1 ] then
13880: LD_VAR 0 4
13884: PUSH
13885: LD_INT 1
13887: ARRAY
13888: IFFALSE 13892
// exit ;
13890: GO 14295
// height := hex [ 2 ] ;
13892: LD_ADDR_VAR 0 15
13896: PUSH
13897: LD_VAR 0 4
13901: PUSH
13902: LD_INT 2
13904: ARRAY
13905: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13906: LD_ADDR_VAR 0 14
13910: PUSH
13911: LD_INT 0
13913: PUSH
13914: LD_INT 2
13916: PUSH
13917: LD_INT 3
13919: PUSH
13920: LD_INT 5
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: ST_TO_ADDR
// for i in tmp do
13929: LD_ADDR_VAR 0 8
13933: PUSH
13934: LD_VAR 0 14
13938: PUSH
13939: FOR_IN
13940: IFFALSE 14110
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13942: LD_ADDR_VAR 0 9
13946: PUSH
13947: LD_VAR 0 10
13951: PPUSH
13952: LD_VAR 0 8
13956: PPUSH
13957: LD_INT 5
13959: PPUSH
13960: CALL_OW 272
13964: PUSH
13965: LD_VAR 0 11
13969: PPUSH
13970: LD_VAR 0 8
13974: PPUSH
13975: LD_INT 5
13977: PPUSH
13978: CALL_OW 273
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13987: LD_VAR 0 9
13991: PUSH
13992: LD_INT 1
13994: ARRAY
13995: PPUSH
13996: LD_VAR 0 9
14000: PUSH
14001: LD_INT 2
14003: ARRAY
14004: PPUSH
14005: CALL_OW 488
14009: IFFALSE 14108
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14011: LD_ADDR_VAR 0 4
14015: PUSH
14016: LD_VAR 0 9
14020: PUSH
14021: LD_INT 1
14023: ARRAY
14024: PPUSH
14025: LD_VAR 0 9
14029: PUSH
14030: LD_INT 2
14032: ARRAY
14033: PPUSH
14034: CALL_OW 546
14038: ST_TO_ADDR
// if hex [ 1 ] then
14039: LD_VAR 0 4
14043: PUSH
14044: LD_INT 1
14046: ARRAY
14047: IFFALSE 14051
// continue ;
14049: GO 13939
// h := hex [ 2 ] ;
14051: LD_ADDR_VAR 0 13
14055: PUSH
14056: LD_VAR 0 4
14060: PUSH
14061: LD_INT 2
14063: ARRAY
14064: ST_TO_ADDR
// if h + 7 < height then
14065: LD_VAR 0 13
14069: PUSH
14070: LD_INT 7
14072: PLUS
14073: PUSH
14074: LD_VAR 0 15
14078: LESS
14079: IFFALSE 14108
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14081: LD_ADDR_VAR 0 18
14085: PUSH
14086: LD_INT 7
14088: PUSH
14089: LD_INT 28
14091: PUSH
14092: LD_INT 45
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: LIST
14099: PUSH
14100: LD_VAR 0 12
14104: ARRAY
14105: ST_TO_ADDR
// break ;
14106: GO 14110
// end ; end ; end ;
14108: GO 13939
14110: POP
14111: POP
// end ; if not weapon then
14112: LD_VAR 0 18
14116: NOT
14117: IFFALSE 14177
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14119: LD_ADDR_VAR 0 5
14123: PUSH
14124: LD_VAR 0 5
14128: PUSH
14129: LD_INT 11
14131: PUSH
14132: LD_INT 30
14134: PUSH
14135: LD_INT 49
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: LIST
14142: DIFF
14143: ST_TO_ADDR
// if not list then
14144: LD_VAR 0 5
14148: NOT
14149: IFFALSE 14153
// exit ;
14151: GO 14295
// weapon := list [ rand ( 1 , list ) ] ;
14153: LD_ADDR_VAR 0 18
14157: PUSH
14158: LD_VAR 0 5
14162: PUSH
14163: LD_INT 1
14165: PPUSH
14166: LD_VAR 0 5
14170: PPUSH
14171: CALL_OW 12
14175: ARRAY
14176: ST_TO_ADDR
// end ; if weapon then
14177: LD_VAR 0 18
14181: IFFALSE 14295
// begin tmp := CostOfWeapon ( weapon ) ;
14183: LD_ADDR_VAR 0 14
14187: PUSH
14188: LD_VAR 0 18
14192: PPUSH
14193: CALL_OW 451
14197: ST_TO_ADDR
// j := GetBase ( tower ) ;
14198: LD_ADDR_VAR 0 9
14202: PUSH
14203: LD_VAR 0 1
14207: PPUSH
14208: CALL_OW 274
14212: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14213: LD_VAR 0 9
14217: PPUSH
14218: LD_INT 1
14220: PPUSH
14221: CALL_OW 275
14225: PUSH
14226: LD_VAR 0 14
14230: PUSH
14231: LD_INT 1
14233: ARRAY
14234: GREATEREQUAL
14235: PUSH
14236: LD_VAR 0 9
14240: PPUSH
14241: LD_INT 2
14243: PPUSH
14244: CALL_OW 275
14248: PUSH
14249: LD_VAR 0 14
14253: PUSH
14254: LD_INT 2
14256: ARRAY
14257: GREATEREQUAL
14258: AND
14259: PUSH
14260: LD_VAR 0 9
14264: PPUSH
14265: LD_INT 3
14267: PPUSH
14268: CALL_OW 275
14272: PUSH
14273: LD_VAR 0 14
14277: PUSH
14278: LD_INT 3
14280: ARRAY
14281: GREATEREQUAL
14282: AND
14283: IFFALSE 14295
// result := weapon ;
14285: LD_ADDR_VAR 0 3
14289: PUSH
14290: LD_VAR 0 18
14294: ST_TO_ADDR
// end ; end ;
14295: LD_VAR 0 3
14299: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14300: LD_INT 0
14302: PPUSH
14303: PPUSH
// result := true ;
14304: LD_ADDR_VAR 0 3
14308: PUSH
14309: LD_INT 1
14311: ST_TO_ADDR
// if array1 = array2 then
14312: LD_VAR 0 1
14316: PUSH
14317: LD_VAR 0 2
14321: EQUAL
14322: IFFALSE 14382
// begin for i = 1 to array1 do
14324: LD_ADDR_VAR 0 4
14328: PUSH
14329: DOUBLE
14330: LD_INT 1
14332: DEC
14333: ST_TO_ADDR
14334: LD_VAR 0 1
14338: PUSH
14339: FOR_TO
14340: IFFALSE 14378
// if array1 [ i ] <> array2 [ i ] then
14342: LD_VAR 0 1
14346: PUSH
14347: LD_VAR 0 4
14351: ARRAY
14352: PUSH
14353: LD_VAR 0 2
14357: PUSH
14358: LD_VAR 0 4
14362: ARRAY
14363: NONEQUAL
14364: IFFALSE 14376
// begin result := false ;
14366: LD_ADDR_VAR 0 3
14370: PUSH
14371: LD_INT 0
14373: ST_TO_ADDR
// break ;
14374: GO 14378
// end ;
14376: GO 14339
14378: POP
14379: POP
// end else
14380: GO 14390
// result := false ;
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_INT 0
14389: ST_TO_ADDR
// end ;
14390: LD_VAR 0 3
14394: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14395: LD_INT 0
14397: PPUSH
14398: PPUSH
// if not array1 or not array2 then
14399: LD_VAR 0 1
14403: NOT
14404: PUSH
14405: LD_VAR 0 2
14409: NOT
14410: OR
14411: IFFALSE 14415
// exit ;
14413: GO 14479
// result := true ;
14415: LD_ADDR_VAR 0 3
14419: PUSH
14420: LD_INT 1
14422: ST_TO_ADDR
// for i = 1 to array1 do
14423: LD_ADDR_VAR 0 4
14427: PUSH
14428: DOUBLE
14429: LD_INT 1
14431: DEC
14432: ST_TO_ADDR
14433: LD_VAR 0 1
14437: PUSH
14438: FOR_TO
14439: IFFALSE 14477
// if array1 [ i ] <> array2 [ i ] then
14441: LD_VAR 0 1
14445: PUSH
14446: LD_VAR 0 4
14450: ARRAY
14451: PUSH
14452: LD_VAR 0 2
14456: PUSH
14457: LD_VAR 0 4
14461: ARRAY
14462: NONEQUAL
14463: IFFALSE 14475
// begin result := false ;
14465: LD_ADDR_VAR 0 3
14469: PUSH
14470: LD_INT 0
14472: ST_TO_ADDR
// break ;
14473: GO 14477
// end ;
14475: GO 14438
14477: POP
14478: POP
// end ;
14479: LD_VAR 0 3
14483: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14484: LD_INT 0
14486: PPUSH
14487: PPUSH
14488: PPUSH
// pom := GetBase ( fac ) ;
14489: LD_ADDR_VAR 0 5
14493: PUSH
14494: LD_VAR 0 1
14498: PPUSH
14499: CALL_OW 274
14503: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14504: LD_ADDR_VAR 0 4
14508: PUSH
14509: LD_VAR 0 2
14513: PUSH
14514: LD_INT 1
14516: ARRAY
14517: PPUSH
14518: LD_VAR 0 2
14522: PUSH
14523: LD_INT 2
14525: ARRAY
14526: PPUSH
14527: LD_VAR 0 2
14531: PUSH
14532: LD_INT 3
14534: ARRAY
14535: PPUSH
14536: LD_VAR 0 2
14540: PUSH
14541: LD_INT 4
14543: ARRAY
14544: PPUSH
14545: CALL_OW 449
14549: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14550: LD_ADDR_VAR 0 3
14554: PUSH
14555: LD_VAR 0 5
14559: PPUSH
14560: LD_INT 1
14562: PPUSH
14563: CALL_OW 275
14567: PUSH
14568: LD_VAR 0 4
14572: PUSH
14573: LD_INT 1
14575: ARRAY
14576: GREATEREQUAL
14577: PUSH
14578: LD_VAR 0 5
14582: PPUSH
14583: LD_INT 2
14585: PPUSH
14586: CALL_OW 275
14590: PUSH
14591: LD_VAR 0 4
14595: PUSH
14596: LD_INT 2
14598: ARRAY
14599: GREATEREQUAL
14600: AND
14601: PUSH
14602: LD_VAR 0 5
14606: PPUSH
14607: LD_INT 3
14609: PPUSH
14610: CALL_OW 275
14614: PUSH
14615: LD_VAR 0 4
14619: PUSH
14620: LD_INT 3
14622: ARRAY
14623: GREATEREQUAL
14624: AND
14625: ST_TO_ADDR
// end ;
14626: LD_VAR 0 3
14630: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14631: LD_INT 0
14633: PPUSH
14634: PPUSH
14635: PPUSH
14636: PPUSH
// pom := GetBase ( building ) ;
14637: LD_ADDR_VAR 0 3
14641: PUSH
14642: LD_VAR 0 1
14646: PPUSH
14647: CALL_OW 274
14651: ST_TO_ADDR
// if not pom then
14652: LD_VAR 0 3
14656: NOT
14657: IFFALSE 14661
// exit ;
14659: GO 14831
// btype := GetBType ( building ) ;
14661: LD_ADDR_VAR 0 5
14665: PUSH
14666: LD_VAR 0 1
14670: PPUSH
14671: CALL_OW 266
14675: ST_TO_ADDR
// if btype = b_armoury then
14676: LD_VAR 0 5
14680: PUSH
14681: LD_INT 4
14683: EQUAL
14684: IFFALSE 14694
// btype := b_barracks ;
14686: LD_ADDR_VAR 0 5
14690: PUSH
14691: LD_INT 5
14693: ST_TO_ADDR
// if btype = b_depot then
14694: LD_VAR 0 5
14698: PUSH
14699: LD_INT 0
14701: EQUAL
14702: IFFALSE 14712
// btype := b_warehouse ;
14704: LD_ADDR_VAR 0 5
14708: PUSH
14709: LD_INT 1
14711: ST_TO_ADDR
// if btype = b_workshop then
14712: LD_VAR 0 5
14716: PUSH
14717: LD_INT 2
14719: EQUAL
14720: IFFALSE 14730
// btype := b_factory ;
14722: LD_ADDR_VAR 0 5
14726: PUSH
14727: LD_INT 3
14729: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14730: LD_ADDR_VAR 0 4
14734: PUSH
14735: LD_VAR 0 5
14739: PPUSH
14740: LD_VAR 0 1
14744: PPUSH
14745: CALL_OW 248
14749: PPUSH
14750: CALL_OW 450
14754: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14755: LD_ADDR_VAR 0 2
14759: PUSH
14760: LD_VAR 0 3
14764: PPUSH
14765: LD_INT 1
14767: PPUSH
14768: CALL_OW 275
14772: PUSH
14773: LD_VAR 0 4
14777: PUSH
14778: LD_INT 1
14780: ARRAY
14781: GREATEREQUAL
14782: PUSH
14783: LD_VAR 0 3
14787: PPUSH
14788: LD_INT 2
14790: PPUSH
14791: CALL_OW 275
14795: PUSH
14796: LD_VAR 0 4
14800: PUSH
14801: LD_INT 2
14803: ARRAY
14804: GREATEREQUAL
14805: AND
14806: PUSH
14807: LD_VAR 0 3
14811: PPUSH
14812: LD_INT 3
14814: PPUSH
14815: CALL_OW 275
14819: PUSH
14820: LD_VAR 0 4
14824: PUSH
14825: LD_INT 3
14827: ARRAY
14828: GREATEREQUAL
14829: AND
14830: ST_TO_ADDR
// end ;
14831: LD_VAR 0 2
14835: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14836: LD_INT 0
14838: PPUSH
14839: PPUSH
14840: PPUSH
// pom := GetBase ( building ) ;
14841: LD_ADDR_VAR 0 4
14845: PUSH
14846: LD_VAR 0 1
14850: PPUSH
14851: CALL_OW 274
14855: ST_TO_ADDR
// if not pom then
14856: LD_VAR 0 4
14860: NOT
14861: IFFALSE 14865
// exit ;
14863: GO 14966
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14865: LD_ADDR_VAR 0 5
14869: PUSH
14870: LD_VAR 0 2
14874: PPUSH
14875: LD_VAR 0 1
14879: PPUSH
14880: CALL_OW 248
14884: PPUSH
14885: CALL_OW 450
14889: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14890: LD_ADDR_VAR 0 3
14894: PUSH
14895: LD_VAR 0 4
14899: PPUSH
14900: LD_INT 1
14902: PPUSH
14903: CALL_OW 275
14907: PUSH
14908: LD_VAR 0 5
14912: PUSH
14913: LD_INT 1
14915: ARRAY
14916: GREATEREQUAL
14917: PUSH
14918: LD_VAR 0 4
14922: PPUSH
14923: LD_INT 2
14925: PPUSH
14926: CALL_OW 275
14930: PUSH
14931: LD_VAR 0 5
14935: PUSH
14936: LD_INT 2
14938: ARRAY
14939: GREATEREQUAL
14940: AND
14941: PUSH
14942: LD_VAR 0 4
14946: PPUSH
14947: LD_INT 3
14949: PPUSH
14950: CALL_OW 275
14954: PUSH
14955: LD_VAR 0 5
14959: PUSH
14960: LD_INT 3
14962: ARRAY
14963: GREATEREQUAL
14964: AND
14965: ST_TO_ADDR
// end ;
14966: LD_VAR 0 3
14970: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14971: LD_INT 0
14973: PPUSH
14974: PPUSH
14975: PPUSH
14976: PPUSH
14977: PPUSH
14978: PPUSH
14979: PPUSH
14980: PPUSH
14981: PPUSH
14982: PPUSH
14983: PPUSH
// result := false ;
14984: LD_ADDR_VAR 0 8
14988: PUSH
14989: LD_INT 0
14991: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14992: LD_VAR 0 5
14996: NOT
14997: PUSH
14998: LD_VAR 0 1
15002: NOT
15003: OR
15004: PUSH
15005: LD_VAR 0 2
15009: NOT
15010: OR
15011: PUSH
15012: LD_VAR 0 3
15016: NOT
15017: OR
15018: IFFALSE 15022
// exit ;
15020: GO 15836
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15022: LD_ADDR_VAR 0 14
15026: PUSH
15027: LD_VAR 0 1
15031: PPUSH
15032: LD_VAR 0 2
15036: PPUSH
15037: LD_VAR 0 3
15041: PPUSH
15042: LD_VAR 0 4
15046: PPUSH
15047: LD_VAR 0 5
15051: PUSH
15052: LD_INT 1
15054: ARRAY
15055: PPUSH
15056: CALL_OW 248
15060: PPUSH
15061: LD_INT 0
15063: PPUSH
15064: CALL 17089 0 6
15068: ST_TO_ADDR
// if not hexes then
15069: LD_VAR 0 14
15073: NOT
15074: IFFALSE 15078
// exit ;
15076: GO 15836
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15078: LD_ADDR_VAR 0 17
15082: PUSH
15083: LD_VAR 0 5
15087: PPUSH
15088: LD_INT 22
15090: PUSH
15091: LD_VAR 0 13
15095: PPUSH
15096: CALL_OW 255
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PUSH
15105: LD_INT 2
15107: PUSH
15108: LD_INT 30
15110: PUSH
15111: LD_INT 0
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 30
15120: PUSH
15121: LD_INT 1
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: PPUSH
15137: CALL_OW 72
15141: ST_TO_ADDR
// for i = 1 to hexes do
15142: LD_ADDR_VAR 0 9
15146: PUSH
15147: DOUBLE
15148: LD_INT 1
15150: DEC
15151: ST_TO_ADDR
15152: LD_VAR 0 14
15156: PUSH
15157: FOR_TO
15158: IFFALSE 15834
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15160: LD_ADDR_VAR 0 13
15164: PUSH
15165: LD_VAR 0 14
15169: PUSH
15170: LD_VAR 0 9
15174: ARRAY
15175: PUSH
15176: LD_INT 1
15178: ARRAY
15179: PPUSH
15180: LD_VAR 0 14
15184: PUSH
15185: LD_VAR 0 9
15189: ARRAY
15190: PUSH
15191: LD_INT 2
15193: ARRAY
15194: PPUSH
15195: CALL_OW 428
15199: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15200: LD_VAR 0 14
15204: PUSH
15205: LD_VAR 0 9
15209: ARRAY
15210: PUSH
15211: LD_INT 1
15213: ARRAY
15214: PPUSH
15215: LD_VAR 0 14
15219: PUSH
15220: LD_VAR 0 9
15224: ARRAY
15225: PUSH
15226: LD_INT 2
15228: ARRAY
15229: PPUSH
15230: CALL_OW 351
15234: PUSH
15235: LD_VAR 0 14
15239: PUSH
15240: LD_VAR 0 9
15244: ARRAY
15245: PUSH
15246: LD_INT 1
15248: ARRAY
15249: PPUSH
15250: LD_VAR 0 14
15254: PUSH
15255: LD_VAR 0 9
15259: ARRAY
15260: PUSH
15261: LD_INT 2
15263: ARRAY
15264: PPUSH
15265: CALL_OW 488
15269: NOT
15270: OR
15271: PUSH
15272: LD_VAR 0 13
15276: PPUSH
15277: CALL_OW 247
15281: PUSH
15282: LD_INT 3
15284: EQUAL
15285: OR
15286: IFFALSE 15292
// exit ;
15288: POP
15289: POP
15290: GO 15836
// if not tmp then
15292: LD_VAR 0 13
15296: NOT
15297: IFFALSE 15301
// continue ;
15299: GO 15157
// result := true ;
15301: LD_ADDR_VAR 0 8
15305: PUSH
15306: LD_INT 1
15308: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15309: LD_VAR 0 6
15313: PUSH
15314: LD_VAR 0 13
15318: PPUSH
15319: CALL_OW 247
15323: PUSH
15324: LD_INT 2
15326: EQUAL
15327: AND
15328: PUSH
15329: LD_VAR 0 13
15333: PPUSH
15334: CALL_OW 263
15338: PUSH
15339: LD_INT 1
15341: EQUAL
15342: AND
15343: IFFALSE 15507
// begin if IsDrivenBy ( tmp ) then
15345: LD_VAR 0 13
15349: PPUSH
15350: CALL_OW 311
15354: IFFALSE 15358
// continue ;
15356: GO 15157
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15358: LD_VAR 0 6
15362: PPUSH
15363: LD_INT 3
15365: PUSH
15366: LD_INT 60
15368: PUSH
15369: EMPTY
15370: LIST
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 3
15378: PUSH
15379: LD_INT 55
15381: PUSH
15382: EMPTY
15383: LIST
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PPUSH
15393: CALL_OW 72
15397: IFFALSE 15505
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15399: LD_ADDR_VAR 0 18
15403: PUSH
15404: LD_VAR 0 6
15408: PPUSH
15409: LD_INT 3
15411: PUSH
15412: LD_INT 60
15414: PUSH
15415: EMPTY
15416: LIST
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 3
15424: PUSH
15425: LD_INT 55
15427: PUSH
15428: EMPTY
15429: LIST
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PPUSH
15439: CALL_OW 72
15443: PUSH
15444: LD_INT 1
15446: ARRAY
15447: ST_TO_ADDR
// if IsInUnit ( driver ) then
15448: LD_VAR 0 18
15452: PPUSH
15453: CALL_OW 310
15457: IFFALSE 15468
// ComExit ( driver ) ;
15459: LD_VAR 0 18
15463: PPUSH
15464: CALL 40890 0 1
// AddComEnterUnit ( driver , tmp ) ;
15468: LD_VAR 0 18
15472: PPUSH
15473: LD_VAR 0 13
15477: PPUSH
15478: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15482: LD_VAR 0 18
15486: PPUSH
15487: LD_VAR 0 7
15491: PPUSH
15492: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15496: LD_VAR 0 18
15500: PPUSH
15501: CALL_OW 181
// end ; continue ;
15505: GO 15157
// end ; if not cleaners or not tmp in cleaners then
15507: LD_VAR 0 6
15511: NOT
15512: PUSH
15513: LD_VAR 0 13
15517: PUSH
15518: LD_VAR 0 6
15522: IN
15523: NOT
15524: OR
15525: IFFALSE 15832
// begin if dep then
15527: LD_VAR 0 17
15531: IFFALSE 15667
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15533: LD_ADDR_VAR 0 16
15537: PUSH
15538: LD_VAR 0 17
15542: PUSH
15543: LD_INT 1
15545: ARRAY
15546: PPUSH
15547: CALL_OW 250
15551: PPUSH
15552: LD_VAR 0 17
15556: PUSH
15557: LD_INT 1
15559: ARRAY
15560: PPUSH
15561: CALL_OW 254
15565: PPUSH
15566: LD_INT 5
15568: PPUSH
15569: CALL_OW 272
15573: PUSH
15574: LD_VAR 0 17
15578: PUSH
15579: LD_INT 1
15581: ARRAY
15582: PPUSH
15583: CALL_OW 251
15587: PPUSH
15588: LD_VAR 0 17
15592: PUSH
15593: LD_INT 1
15595: ARRAY
15596: PPUSH
15597: CALL_OW 254
15601: PPUSH
15602: LD_INT 5
15604: PPUSH
15605: CALL_OW 273
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15614: LD_VAR 0 16
15618: PUSH
15619: LD_INT 1
15621: ARRAY
15622: PPUSH
15623: LD_VAR 0 16
15627: PUSH
15628: LD_INT 2
15630: ARRAY
15631: PPUSH
15632: CALL_OW 488
15636: IFFALSE 15667
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15638: LD_VAR 0 13
15642: PPUSH
15643: LD_VAR 0 16
15647: PUSH
15648: LD_INT 1
15650: ARRAY
15651: PPUSH
15652: LD_VAR 0 16
15656: PUSH
15657: LD_INT 2
15659: ARRAY
15660: PPUSH
15661: CALL_OW 111
// continue ;
15665: GO 15157
// end ; end ; r := GetDir ( tmp ) ;
15667: LD_ADDR_VAR 0 15
15671: PUSH
15672: LD_VAR 0 13
15676: PPUSH
15677: CALL_OW 254
15681: ST_TO_ADDR
// if r = 5 then
15682: LD_VAR 0 15
15686: PUSH
15687: LD_INT 5
15689: EQUAL
15690: IFFALSE 15700
// r := 0 ;
15692: LD_ADDR_VAR 0 15
15696: PUSH
15697: LD_INT 0
15699: ST_TO_ADDR
// for j = r to 5 do
15700: LD_ADDR_VAR 0 10
15704: PUSH
15705: DOUBLE
15706: LD_VAR 0 15
15710: DEC
15711: ST_TO_ADDR
15712: LD_INT 5
15714: PUSH
15715: FOR_TO
15716: IFFALSE 15830
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15718: LD_ADDR_VAR 0 11
15722: PUSH
15723: LD_VAR 0 13
15727: PPUSH
15728: CALL_OW 250
15732: PPUSH
15733: LD_VAR 0 10
15737: PPUSH
15738: LD_INT 2
15740: PPUSH
15741: CALL_OW 272
15745: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15746: LD_ADDR_VAR 0 12
15750: PUSH
15751: LD_VAR 0 13
15755: PPUSH
15756: CALL_OW 251
15760: PPUSH
15761: LD_VAR 0 10
15765: PPUSH
15766: LD_INT 2
15768: PPUSH
15769: CALL_OW 273
15773: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15774: LD_VAR 0 11
15778: PPUSH
15779: LD_VAR 0 12
15783: PPUSH
15784: CALL_OW 488
15788: PUSH
15789: LD_VAR 0 11
15793: PPUSH
15794: LD_VAR 0 12
15798: PPUSH
15799: CALL_OW 428
15803: NOT
15804: AND
15805: IFFALSE 15828
// begin ComMoveXY ( tmp , _x , _y ) ;
15807: LD_VAR 0 13
15811: PPUSH
15812: LD_VAR 0 11
15816: PPUSH
15817: LD_VAR 0 12
15821: PPUSH
15822: CALL_OW 111
// break ;
15826: GO 15830
// end ; end ;
15828: GO 15715
15830: POP
15831: POP
// end ; end ;
15832: GO 15157
15834: POP
15835: POP
// end ;
15836: LD_VAR 0 8
15840: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15841: LD_INT 0
15843: PPUSH
// result := true ;
15844: LD_ADDR_VAR 0 3
15848: PUSH
15849: LD_INT 1
15851: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15852: LD_VAR 0 2
15856: PUSH
15857: LD_INT 24
15859: DOUBLE
15860: EQUAL
15861: IFTRUE 15871
15863: LD_INT 33
15865: DOUBLE
15866: EQUAL
15867: IFTRUE 15871
15869: GO 15896
15871: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15872: LD_ADDR_VAR 0 3
15876: PUSH
15877: LD_INT 32
15879: PPUSH
15880: LD_VAR 0 1
15884: PPUSH
15885: CALL_OW 321
15889: PUSH
15890: LD_INT 2
15892: EQUAL
15893: ST_TO_ADDR
15894: GO 16212
15896: LD_INT 20
15898: DOUBLE
15899: EQUAL
15900: IFTRUE 15904
15902: GO 15929
15904: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15905: LD_ADDR_VAR 0 3
15909: PUSH
15910: LD_INT 6
15912: PPUSH
15913: LD_VAR 0 1
15917: PPUSH
15918: CALL_OW 321
15922: PUSH
15923: LD_INT 2
15925: EQUAL
15926: ST_TO_ADDR
15927: GO 16212
15929: LD_INT 22
15931: DOUBLE
15932: EQUAL
15933: IFTRUE 15943
15935: LD_INT 36
15937: DOUBLE
15938: EQUAL
15939: IFTRUE 15943
15941: GO 15968
15943: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15944: LD_ADDR_VAR 0 3
15948: PUSH
15949: LD_INT 15
15951: PPUSH
15952: LD_VAR 0 1
15956: PPUSH
15957: CALL_OW 321
15961: PUSH
15962: LD_INT 2
15964: EQUAL
15965: ST_TO_ADDR
15966: GO 16212
15968: LD_INT 30
15970: DOUBLE
15971: EQUAL
15972: IFTRUE 15976
15974: GO 16001
15976: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15977: LD_ADDR_VAR 0 3
15981: PUSH
15982: LD_INT 20
15984: PPUSH
15985: LD_VAR 0 1
15989: PPUSH
15990: CALL_OW 321
15994: PUSH
15995: LD_INT 2
15997: EQUAL
15998: ST_TO_ADDR
15999: GO 16212
16001: LD_INT 28
16003: DOUBLE
16004: EQUAL
16005: IFTRUE 16015
16007: LD_INT 21
16009: DOUBLE
16010: EQUAL
16011: IFTRUE 16015
16013: GO 16040
16015: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16016: LD_ADDR_VAR 0 3
16020: PUSH
16021: LD_INT 21
16023: PPUSH
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL_OW 321
16033: PUSH
16034: LD_INT 2
16036: EQUAL
16037: ST_TO_ADDR
16038: GO 16212
16040: LD_INT 16
16042: DOUBLE
16043: EQUAL
16044: IFTRUE 16048
16046: GO 16073
16048: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16049: LD_ADDR_VAR 0 3
16053: PUSH
16054: LD_INT 84
16056: PPUSH
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 321
16066: PUSH
16067: LD_INT 2
16069: EQUAL
16070: ST_TO_ADDR
16071: GO 16212
16073: LD_INT 19
16075: DOUBLE
16076: EQUAL
16077: IFTRUE 16087
16079: LD_INT 23
16081: DOUBLE
16082: EQUAL
16083: IFTRUE 16087
16085: GO 16112
16087: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16088: LD_ADDR_VAR 0 3
16092: PUSH
16093: LD_INT 83
16095: PPUSH
16096: LD_VAR 0 1
16100: PPUSH
16101: CALL_OW 321
16105: PUSH
16106: LD_INT 2
16108: EQUAL
16109: ST_TO_ADDR
16110: GO 16212
16112: LD_INT 17
16114: DOUBLE
16115: EQUAL
16116: IFTRUE 16120
16118: GO 16145
16120: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16121: LD_ADDR_VAR 0 3
16125: PUSH
16126: LD_INT 39
16128: PPUSH
16129: LD_VAR 0 1
16133: PPUSH
16134: CALL_OW 321
16138: PUSH
16139: LD_INT 2
16141: EQUAL
16142: ST_TO_ADDR
16143: GO 16212
16145: LD_INT 18
16147: DOUBLE
16148: EQUAL
16149: IFTRUE 16153
16151: GO 16178
16153: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16154: LD_ADDR_VAR 0 3
16158: PUSH
16159: LD_INT 40
16161: PPUSH
16162: LD_VAR 0 1
16166: PPUSH
16167: CALL_OW 321
16171: PUSH
16172: LD_INT 2
16174: EQUAL
16175: ST_TO_ADDR
16176: GO 16212
16178: LD_INT 27
16180: DOUBLE
16181: EQUAL
16182: IFTRUE 16186
16184: GO 16211
16186: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16187: LD_ADDR_VAR 0 3
16191: PUSH
16192: LD_INT 35
16194: PPUSH
16195: LD_VAR 0 1
16199: PPUSH
16200: CALL_OW 321
16204: PUSH
16205: LD_INT 2
16207: EQUAL
16208: ST_TO_ADDR
16209: GO 16212
16211: POP
// end ;
16212: LD_VAR 0 3
16216: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16217: LD_INT 0
16219: PPUSH
16220: PPUSH
16221: PPUSH
16222: PPUSH
16223: PPUSH
16224: PPUSH
16225: PPUSH
16226: PPUSH
16227: PPUSH
16228: PPUSH
16229: PPUSH
// result := false ;
16230: LD_ADDR_VAR 0 6
16234: PUSH
16235: LD_INT 0
16237: ST_TO_ADDR
// if btype = b_depot then
16238: LD_VAR 0 2
16242: PUSH
16243: LD_INT 0
16245: EQUAL
16246: IFFALSE 16258
// begin result := true ;
16248: LD_ADDR_VAR 0 6
16252: PUSH
16253: LD_INT 1
16255: ST_TO_ADDR
// exit ;
16256: GO 17084
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16258: LD_VAR 0 1
16262: NOT
16263: PUSH
16264: LD_VAR 0 1
16268: PPUSH
16269: CALL_OW 266
16273: PUSH
16274: LD_INT 0
16276: PUSH
16277: LD_INT 1
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: IN
16284: NOT
16285: OR
16286: PUSH
16287: LD_VAR 0 2
16291: NOT
16292: OR
16293: PUSH
16294: LD_VAR 0 5
16298: PUSH
16299: LD_INT 0
16301: PUSH
16302: LD_INT 1
16304: PUSH
16305: LD_INT 2
16307: PUSH
16308: LD_INT 3
16310: PUSH
16311: LD_INT 4
16313: PUSH
16314: LD_INT 5
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: IN
16325: NOT
16326: OR
16327: PUSH
16328: LD_VAR 0 3
16332: PPUSH
16333: LD_VAR 0 4
16337: PPUSH
16338: CALL_OW 488
16342: NOT
16343: OR
16344: IFFALSE 16348
// exit ;
16346: GO 17084
// side := GetSide ( depot ) ;
16348: LD_ADDR_VAR 0 9
16352: PUSH
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 255
16362: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16363: LD_VAR 0 9
16367: PPUSH
16368: LD_VAR 0 2
16372: PPUSH
16373: CALL 15841 0 2
16377: NOT
16378: IFFALSE 16382
// exit ;
16380: GO 17084
// pom := GetBase ( depot ) ;
16382: LD_ADDR_VAR 0 10
16386: PUSH
16387: LD_VAR 0 1
16391: PPUSH
16392: CALL_OW 274
16396: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16397: LD_ADDR_VAR 0 11
16401: PUSH
16402: LD_VAR 0 2
16406: PPUSH
16407: LD_VAR 0 1
16411: PPUSH
16412: CALL_OW 248
16416: PPUSH
16417: CALL_OW 450
16421: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16422: LD_VAR 0 10
16426: PPUSH
16427: LD_INT 1
16429: PPUSH
16430: CALL_OW 275
16434: PUSH
16435: LD_VAR 0 11
16439: PUSH
16440: LD_INT 1
16442: ARRAY
16443: GREATEREQUAL
16444: PUSH
16445: LD_VAR 0 10
16449: PPUSH
16450: LD_INT 2
16452: PPUSH
16453: CALL_OW 275
16457: PUSH
16458: LD_VAR 0 11
16462: PUSH
16463: LD_INT 2
16465: ARRAY
16466: GREATEREQUAL
16467: AND
16468: PUSH
16469: LD_VAR 0 10
16473: PPUSH
16474: LD_INT 3
16476: PPUSH
16477: CALL_OW 275
16481: PUSH
16482: LD_VAR 0 11
16486: PUSH
16487: LD_INT 3
16489: ARRAY
16490: GREATEREQUAL
16491: AND
16492: NOT
16493: IFFALSE 16497
// exit ;
16495: GO 17084
// if GetBType ( depot ) = b_depot then
16497: LD_VAR 0 1
16501: PPUSH
16502: CALL_OW 266
16506: PUSH
16507: LD_INT 0
16509: EQUAL
16510: IFFALSE 16522
// dist := 28 else
16512: LD_ADDR_VAR 0 14
16516: PUSH
16517: LD_INT 28
16519: ST_TO_ADDR
16520: GO 16530
// dist := 36 ;
16522: LD_ADDR_VAR 0 14
16526: PUSH
16527: LD_INT 36
16529: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16530: LD_VAR 0 1
16534: PPUSH
16535: LD_VAR 0 3
16539: PPUSH
16540: LD_VAR 0 4
16544: PPUSH
16545: CALL_OW 297
16549: PUSH
16550: LD_VAR 0 14
16554: GREATER
16555: IFFALSE 16559
// exit ;
16557: GO 17084
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16559: LD_ADDR_VAR 0 12
16563: PUSH
16564: LD_VAR 0 2
16568: PPUSH
16569: LD_VAR 0 3
16573: PPUSH
16574: LD_VAR 0 4
16578: PPUSH
16579: LD_VAR 0 5
16583: PPUSH
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 248
16593: PPUSH
16594: LD_INT 0
16596: PPUSH
16597: CALL 17089 0 6
16601: ST_TO_ADDR
// if not hexes then
16602: LD_VAR 0 12
16606: NOT
16607: IFFALSE 16611
// exit ;
16609: GO 17084
// hex := GetHexInfo ( x , y ) ;
16611: LD_ADDR_VAR 0 15
16615: PUSH
16616: LD_VAR 0 3
16620: PPUSH
16621: LD_VAR 0 4
16625: PPUSH
16626: CALL_OW 546
16630: ST_TO_ADDR
// if hex [ 1 ] then
16631: LD_VAR 0 15
16635: PUSH
16636: LD_INT 1
16638: ARRAY
16639: IFFALSE 16643
// exit ;
16641: GO 17084
// height := hex [ 2 ] ;
16643: LD_ADDR_VAR 0 13
16647: PUSH
16648: LD_VAR 0 15
16652: PUSH
16653: LD_INT 2
16655: ARRAY
16656: ST_TO_ADDR
// for i = 1 to hexes do
16657: LD_ADDR_VAR 0 7
16661: PUSH
16662: DOUBLE
16663: LD_INT 1
16665: DEC
16666: ST_TO_ADDR
16667: LD_VAR 0 12
16671: PUSH
16672: FOR_TO
16673: IFFALSE 17003
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16675: LD_VAR 0 12
16679: PUSH
16680: LD_VAR 0 7
16684: ARRAY
16685: PUSH
16686: LD_INT 1
16688: ARRAY
16689: PPUSH
16690: LD_VAR 0 12
16694: PUSH
16695: LD_VAR 0 7
16699: ARRAY
16700: PUSH
16701: LD_INT 2
16703: ARRAY
16704: PPUSH
16705: CALL_OW 488
16709: NOT
16710: PUSH
16711: LD_VAR 0 12
16715: PUSH
16716: LD_VAR 0 7
16720: ARRAY
16721: PUSH
16722: LD_INT 1
16724: ARRAY
16725: PPUSH
16726: LD_VAR 0 12
16730: PUSH
16731: LD_VAR 0 7
16735: ARRAY
16736: PUSH
16737: LD_INT 2
16739: ARRAY
16740: PPUSH
16741: CALL_OW 428
16745: PUSH
16746: LD_INT 0
16748: GREATER
16749: OR
16750: PUSH
16751: LD_VAR 0 12
16755: PUSH
16756: LD_VAR 0 7
16760: ARRAY
16761: PUSH
16762: LD_INT 1
16764: ARRAY
16765: PPUSH
16766: LD_VAR 0 12
16770: PUSH
16771: LD_VAR 0 7
16775: ARRAY
16776: PUSH
16777: LD_INT 2
16779: ARRAY
16780: PPUSH
16781: CALL_OW 351
16785: OR
16786: IFFALSE 16792
// exit ;
16788: POP
16789: POP
16790: GO 17084
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16792: LD_ADDR_VAR 0 8
16796: PUSH
16797: LD_VAR 0 12
16801: PUSH
16802: LD_VAR 0 7
16806: ARRAY
16807: PUSH
16808: LD_INT 1
16810: ARRAY
16811: PPUSH
16812: LD_VAR 0 12
16816: PUSH
16817: LD_VAR 0 7
16821: ARRAY
16822: PUSH
16823: LD_INT 2
16825: ARRAY
16826: PPUSH
16827: CALL_OW 546
16831: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16832: LD_VAR 0 8
16836: PUSH
16837: LD_INT 1
16839: ARRAY
16840: PUSH
16841: LD_VAR 0 8
16845: PUSH
16846: LD_INT 2
16848: ARRAY
16849: PUSH
16850: LD_VAR 0 13
16854: PUSH
16855: LD_INT 2
16857: PLUS
16858: GREATER
16859: OR
16860: PUSH
16861: LD_VAR 0 8
16865: PUSH
16866: LD_INT 2
16868: ARRAY
16869: PUSH
16870: LD_VAR 0 13
16874: PUSH
16875: LD_INT 2
16877: MINUS
16878: LESS
16879: OR
16880: PUSH
16881: LD_VAR 0 8
16885: PUSH
16886: LD_INT 3
16888: ARRAY
16889: PUSH
16890: LD_INT 0
16892: PUSH
16893: LD_INT 8
16895: PUSH
16896: LD_INT 9
16898: PUSH
16899: LD_INT 10
16901: PUSH
16902: LD_INT 11
16904: PUSH
16905: LD_INT 12
16907: PUSH
16908: LD_INT 13
16910: PUSH
16911: LD_INT 16
16913: PUSH
16914: LD_INT 17
16916: PUSH
16917: LD_INT 18
16919: PUSH
16920: LD_INT 19
16922: PUSH
16923: LD_INT 20
16925: PUSH
16926: LD_INT 21
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: IN
16944: NOT
16945: OR
16946: PUSH
16947: LD_VAR 0 8
16951: PUSH
16952: LD_INT 5
16954: ARRAY
16955: NOT
16956: OR
16957: PUSH
16958: LD_VAR 0 8
16962: PUSH
16963: LD_INT 6
16965: ARRAY
16966: PUSH
16967: LD_INT 1
16969: PUSH
16970: LD_INT 2
16972: PUSH
16973: LD_INT 7
16975: PUSH
16976: LD_INT 9
16978: PUSH
16979: LD_INT 10
16981: PUSH
16982: LD_INT 11
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: IN
16993: NOT
16994: OR
16995: IFFALSE 17001
// exit ;
16997: POP
16998: POP
16999: GO 17084
// end ;
17001: GO 16672
17003: POP
17004: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17005: LD_VAR 0 9
17009: PPUSH
17010: LD_VAR 0 3
17014: PPUSH
17015: LD_VAR 0 4
17019: PPUSH
17020: LD_INT 20
17022: PPUSH
17023: CALL 9007 0 4
17027: PUSH
17028: LD_INT 4
17030: ARRAY
17031: IFFALSE 17035
// exit ;
17033: GO 17084
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17035: LD_VAR 0 2
17039: PUSH
17040: LD_INT 29
17042: PUSH
17043: LD_INT 30
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: IN
17050: PUSH
17051: LD_VAR 0 3
17055: PPUSH
17056: LD_VAR 0 4
17060: PPUSH
17061: LD_VAR 0 9
17065: PPUSH
17066: CALL_OW 440
17070: NOT
17071: AND
17072: IFFALSE 17076
// exit ;
17074: GO 17084
// result := true ;
17076: LD_ADDR_VAR 0 6
17080: PUSH
17081: LD_INT 1
17083: ST_TO_ADDR
// end ;
17084: LD_VAR 0 6
17088: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17089: LD_INT 0
17091: PPUSH
17092: PPUSH
17093: PPUSH
17094: PPUSH
17095: PPUSH
17096: PPUSH
17097: PPUSH
17098: PPUSH
17099: PPUSH
17100: PPUSH
17101: PPUSH
17102: PPUSH
17103: PPUSH
17104: PPUSH
17105: PPUSH
17106: PPUSH
17107: PPUSH
17108: PPUSH
17109: PPUSH
17110: PPUSH
17111: PPUSH
17112: PPUSH
17113: PPUSH
17114: PPUSH
17115: PPUSH
17116: PPUSH
17117: PPUSH
17118: PPUSH
17119: PPUSH
17120: PPUSH
17121: PPUSH
17122: PPUSH
17123: PPUSH
17124: PPUSH
17125: PPUSH
17126: PPUSH
17127: PPUSH
17128: PPUSH
17129: PPUSH
17130: PPUSH
17131: PPUSH
17132: PPUSH
17133: PPUSH
17134: PPUSH
17135: PPUSH
17136: PPUSH
17137: PPUSH
17138: PPUSH
17139: PPUSH
17140: PPUSH
17141: PPUSH
17142: PPUSH
17143: PPUSH
17144: PPUSH
17145: PPUSH
17146: PPUSH
17147: PPUSH
17148: PPUSH
// result = [ ] ;
17149: LD_ADDR_VAR 0 7
17153: PUSH
17154: EMPTY
17155: ST_TO_ADDR
// temp_list = [ ] ;
17156: LD_ADDR_VAR 0 9
17160: PUSH
17161: EMPTY
17162: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17163: LD_VAR 0 4
17167: PUSH
17168: LD_INT 0
17170: PUSH
17171: LD_INT 1
17173: PUSH
17174: LD_INT 2
17176: PUSH
17177: LD_INT 3
17179: PUSH
17180: LD_INT 4
17182: PUSH
17183: LD_INT 5
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: IN
17194: NOT
17195: PUSH
17196: LD_VAR 0 1
17200: PUSH
17201: LD_INT 0
17203: PUSH
17204: LD_INT 1
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: IN
17211: PUSH
17212: LD_VAR 0 5
17216: PUSH
17217: LD_INT 1
17219: PUSH
17220: LD_INT 2
17222: PUSH
17223: LD_INT 3
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: LIST
17230: IN
17231: NOT
17232: AND
17233: OR
17234: IFFALSE 17238
// exit ;
17236: GO 35629
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17238: LD_VAR 0 1
17242: PUSH
17243: LD_INT 6
17245: PUSH
17246: LD_INT 7
17248: PUSH
17249: LD_INT 8
17251: PUSH
17252: LD_INT 13
17254: PUSH
17255: LD_INT 12
17257: PUSH
17258: LD_INT 15
17260: PUSH
17261: LD_INT 11
17263: PUSH
17264: LD_INT 14
17266: PUSH
17267: LD_INT 10
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: IN
17281: IFFALSE 17291
// btype = b_lab ;
17283: LD_ADDR_VAR 0 1
17287: PUSH
17288: LD_INT 6
17290: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17291: LD_VAR 0 6
17295: PUSH
17296: LD_INT 0
17298: PUSH
17299: LD_INT 1
17301: PUSH
17302: LD_INT 2
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: LIST
17309: IN
17310: NOT
17311: PUSH
17312: LD_VAR 0 1
17316: PUSH
17317: LD_INT 0
17319: PUSH
17320: LD_INT 1
17322: PUSH
17323: LD_INT 2
17325: PUSH
17326: LD_INT 3
17328: PUSH
17329: LD_INT 6
17331: PUSH
17332: LD_INT 36
17334: PUSH
17335: LD_INT 4
17337: PUSH
17338: LD_INT 5
17340: PUSH
17341: LD_INT 31
17343: PUSH
17344: LD_INT 32
17346: PUSH
17347: LD_INT 33
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: IN
17363: NOT
17364: PUSH
17365: LD_VAR 0 6
17369: PUSH
17370: LD_INT 1
17372: EQUAL
17373: AND
17374: OR
17375: PUSH
17376: LD_VAR 0 1
17380: PUSH
17381: LD_INT 2
17383: PUSH
17384: LD_INT 3
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: IN
17391: NOT
17392: PUSH
17393: LD_VAR 0 6
17397: PUSH
17398: LD_INT 2
17400: EQUAL
17401: AND
17402: OR
17403: IFFALSE 17413
// mode = 0 ;
17405: LD_ADDR_VAR 0 6
17409: PUSH
17410: LD_INT 0
17412: ST_TO_ADDR
// case mode of 0 :
17413: LD_VAR 0 6
17417: PUSH
17418: LD_INT 0
17420: DOUBLE
17421: EQUAL
17422: IFTRUE 17426
17424: GO 28879
17426: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17427: LD_ADDR_VAR 0 11
17431: PUSH
17432: LD_INT 0
17434: PUSH
17435: LD_INT 0
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 0
17444: PUSH
17445: LD_INT 1
17447: NEG
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 1
17455: PUSH
17456: LD_INT 0
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: LD_INT 1
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 0
17475: PUSH
17476: LD_INT 1
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 1
17485: NEG
17486: PUSH
17487: LD_INT 0
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 1
17496: NEG
17497: PUSH
17498: LD_INT 1
17500: NEG
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 1
17508: NEG
17509: PUSH
17510: LD_INT 2
17512: NEG
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 0
17520: PUSH
17521: LD_INT 2
17523: NEG
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: LD_INT 1
17534: NEG
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 1
17542: PUSH
17543: LD_INT 2
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 0
17552: PUSH
17553: LD_INT 2
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 1
17562: NEG
17563: PUSH
17564: LD_INT 1
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 1
17573: PUSH
17574: LD_INT 3
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 0
17583: PUSH
17584: LD_INT 3
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 1
17593: NEG
17594: PUSH
17595: LD_INT 2
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17620: LD_ADDR_VAR 0 12
17624: PUSH
17625: LD_INT 0
17627: PUSH
17628: LD_INT 0
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 0
17637: PUSH
17638: LD_INT 1
17640: NEG
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 1
17648: PUSH
17649: LD_INT 0
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 1
17658: PUSH
17659: LD_INT 1
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 0
17668: PUSH
17669: LD_INT 1
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 1
17678: NEG
17679: PUSH
17680: LD_INT 0
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 1
17689: NEG
17690: PUSH
17691: LD_INT 1
17693: NEG
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 1
17701: PUSH
17702: LD_INT 1
17704: NEG
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 2
17712: PUSH
17713: LD_INT 0
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 2
17722: PUSH
17723: LD_INT 1
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: LD_INT 1
17732: NEG
17733: PUSH
17734: LD_INT 1
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 2
17743: NEG
17744: PUSH
17745: LD_INT 0
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 2
17754: NEG
17755: PUSH
17756: LD_INT 1
17758: NEG
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 2
17766: NEG
17767: PUSH
17768: LD_INT 1
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 3
17777: NEG
17778: PUSH
17779: LD_INT 0
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 3
17788: NEG
17789: PUSH
17790: LD_INT 1
17792: NEG
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17816: LD_ADDR_VAR 0 13
17820: PUSH
17821: LD_INT 0
17823: PUSH
17824: LD_INT 0
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 0
17833: PUSH
17834: LD_INT 1
17836: NEG
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 1
17844: PUSH
17845: LD_INT 0
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 1
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 0
17864: PUSH
17865: LD_INT 1
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 1
17874: NEG
17875: PUSH
17876: LD_INT 0
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 1
17885: NEG
17886: PUSH
17887: LD_INT 1
17889: NEG
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 1
17897: NEG
17898: PUSH
17899: LD_INT 2
17901: NEG
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 2
17909: PUSH
17910: LD_INT 1
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 2
17919: PUSH
17920: LD_INT 2
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 1
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 2
17939: NEG
17940: PUSH
17941: LD_INT 1
17943: NEG
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 2
17951: NEG
17952: PUSH
17953: LD_INT 2
17955: NEG
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 2
17963: NEG
17964: PUSH
17965: LD_INT 3
17967: NEG
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 3
17975: NEG
17976: PUSH
17977: LD_INT 2
17979: NEG
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 3
17987: NEG
17988: PUSH
17989: LD_INT 3
17991: NEG
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18015: LD_ADDR_VAR 0 14
18019: PUSH
18020: LD_INT 0
18022: PUSH
18023: LD_INT 0
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 0
18032: PUSH
18033: LD_INT 1
18035: NEG
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 1
18043: PUSH
18044: LD_INT 0
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 1
18053: PUSH
18054: LD_INT 1
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 0
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 1
18073: NEG
18074: PUSH
18075: LD_INT 0
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 1
18084: NEG
18085: PUSH
18086: LD_INT 1
18088: NEG
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 1
18096: NEG
18097: PUSH
18098: LD_INT 2
18100: NEG
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 0
18108: PUSH
18109: LD_INT 2
18111: NEG
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 1
18119: PUSH
18120: LD_INT 1
18122: NEG
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: LD_INT 2
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 0
18140: PUSH
18141: LD_INT 2
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 1
18150: NEG
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 1
18161: NEG
18162: PUSH
18163: LD_INT 3
18165: NEG
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 0
18173: PUSH
18174: LD_INT 3
18176: NEG
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 1
18184: PUSH
18185: LD_INT 2
18187: NEG
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18211: LD_ADDR_VAR 0 15
18215: PUSH
18216: LD_INT 0
18218: PUSH
18219: LD_INT 0
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 0
18228: PUSH
18229: LD_INT 1
18231: NEG
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 1
18239: PUSH
18240: LD_INT 0
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 1
18249: PUSH
18250: LD_INT 1
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 0
18259: PUSH
18260: LD_INT 1
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 1
18269: NEG
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 1
18280: NEG
18281: PUSH
18282: LD_INT 1
18284: NEG
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 1
18292: PUSH
18293: LD_INT 1
18295: NEG
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 2
18303: PUSH
18304: LD_INT 0
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 2
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 1
18323: NEG
18324: PUSH
18325: LD_INT 1
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 2
18334: NEG
18335: PUSH
18336: LD_INT 0
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 2
18345: NEG
18346: PUSH
18347: LD_INT 1
18349: NEG
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 2
18357: PUSH
18358: LD_INT 1
18360: NEG
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 3
18368: PUSH
18369: LD_INT 0
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: LD_INT 3
18378: PUSH
18379: LD_INT 1
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18404: LD_ADDR_VAR 0 16
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: LD_INT 0
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 0
18421: PUSH
18422: LD_INT 1
18424: NEG
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: LD_INT 0
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 1
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 0
18452: PUSH
18453: LD_INT 1
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PUSH
18464: LD_INT 0
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 1
18473: NEG
18474: PUSH
18475: LD_INT 1
18477: NEG
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 1
18485: NEG
18486: PUSH
18487: LD_INT 2
18489: NEG
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 2
18497: PUSH
18498: LD_INT 1
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 2
18507: PUSH
18508: LD_INT 2
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 1
18517: PUSH
18518: LD_INT 2
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 2
18527: NEG
18528: PUSH
18529: LD_INT 1
18531: NEG
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 2
18539: NEG
18540: PUSH
18541: LD_INT 2
18543: NEG
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 3
18551: PUSH
18552: LD_INT 2
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 3
18561: PUSH
18562: LD_INT 3
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 2
18571: PUSH
18572: LD_INT 3
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18597: LD_ADDR_VAR 0 17
18601: PUSH
18602: LD_INT 0
18604: PUSH
18605: LD_INT 0
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 0
18614: PUSH
18615: LD_INT 1
18617: NEG
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 1
18625: PUSH
18626: LD_INT 0
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 1
18635: PUSH
18636: LD_INT 1
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_INT 0
18645: PUSH
18646: LD_INT 1
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 1
18655: NEG
18656: PUSH
18657: LD_INT 0
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 1
18666: NEG
18667: PUSH
18668: LD_INT 1
18670: NEG
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 1
18678: NEG
18679: PUSH
18680: LD_INT 2
18682: NEG
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 0
18690: PUSH
18691: LD_INT 2
18693: NEG
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 1
18701: PUSH
18702: LD_INT 1
18704: NEG
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 2
18712: PUSH
18713: LD_INT 0
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 2
18722: PUSH
18723: LD_INT 1
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: LD_INT 2
18732: PUSH
18733: LD_INT 2
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 1
18742: PUSH
18743: LD_INT 2
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 0
18752: PUSH
18753: LD_INT 2
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 1
18762: NEG
18763: PUSH
18764: LD_INT 1
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 2
18773: NEG
18774: PUSH
18775: LD_INT 0
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 2
18784: NEG
18785: PUSH
18786: LD_INT 1
18788: NEG
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 2
18796: NEG
18797: PUSH
18798: LD_INT 2
18800: NEG
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18827: LD_ADDR_VAR 0 18
18831: PUSH
18832: LD_INT 0
18834: PUSH
18835: LD_INT 0
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 0
18844: PUSH
18845: LD_INT 1
18847: NEG
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: LD_INT 0
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 1
18865: PUSH
18866: LD_INT 1
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: LD_INT 1
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 1
18885: NEG
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 1
18896: NEG
18897: PUSH
18898: LD_INT 1
18900: NEG
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 1
18908: NEG
18909: PUSH
18910: LD_INT 2
18912: NEG
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 0
18920: PUSH
18921: LD_INT 2
18923: NEG
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 1
18931: PUSH
18932: LD_INT 1
18934: NEG
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 2
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 2
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 2
18962: PUSH
18963: LD_INT 2
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: LD_INT 2
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: LD_INT 2
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 1
18992: NEG
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 2
19003: NEG
19004: PUSH
19005: LD_INT 0
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 2
19014: NEG
19015: PUSH
19016: LD_INT 1
19018: NEG
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 2
19026: NEG
19027: PUSH
19028: LD_INT 2
19030: NEG
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19057: LD_ADDR_VAR 0 19
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: LD_INT 0
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 0
19074: PUSH
19075: LD_INT 1
19077: NEG
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 1
19085: PUSH
19086: LD_INT 0
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: LD_INT 1
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 0
19105: PUSH
19106: LD_INT 1
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 1
19115: NEG
19116: PUSH
19117: LD_INT 0
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 1
19126: NEG
19127: PUSH
19128: LD_INT 1
19130: NEG
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 1
19138: NEG
19139: PUSH
19140: LD_INT 2
19142: NEG
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 0
19150: PUSH
19151: LD_INT 2
19153: NEG
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: LD_INT 1
19164: NEG
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 2
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 2
19182: PUSH
19183: LD_INT 1
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 2
19192: PUSH
19193: LD_INT 2
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 1
19202: PUSH
19203: LD_INT 2
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: LD_INT 2
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 1
19222: NEG
19223: PUSH
19224: LD_INT 1
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 2
19233: NEG
19234: PUSH
19235: LD_INT 0
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 2
19244: NEG
19245: PUSH
19246: LD_INT 1
19248: NEG
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 2
19256: NEG
19257: PUSH
19258: LD_INT 2
19260: NEG
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19287: LD_ADDR_VAR 0 20
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: LD_INT 0
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 0
19304: PUSH
19305: LD_INT 1
19307: NEG
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: LD_INT 0
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 1
19325: PUSH
19326: LD_INT 1
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 0
19335: PUSH
19336: LD_INT 1
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 1
19345: NEG
19346: PUSH
19347: LD_INT 0
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 1
19356: NEG
19357: PUSH
19358: LD_INT 1
19360: NEG
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 1
19368: NEG
19369: PUSH
19370: LD_INT 2
19372: NEG
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 0
19380: PUSH
19381: LD_INT 2
19383: NEG
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: LD_INT 1
19394: NEG
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 2
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 2
19412: PUSH
19413: LD_INT 1
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 2
19422: PUSH
19423: LD_INT 2
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 1
19432: PUSH
19433: LD_INT 2
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: LD_INT 2
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 1
19452: NEG
19453: PUSH
19454: LD_INT 1
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 2
19463: NEG
19464: PUSH
19465: LD_INT 0
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 2
19474: NEG
19475: PUSH
19476: LD_INT 1
19478: NEG
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 2
19486: NEG
19487: PUSH
19488: LD_INT 2
19490: NEG
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19517: LD_ADDR_VAR 0 21
19521: PUSH
19522: LD_INT 0
19524: PUSH
19525: LD_INT 0
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 0
19534: PUSH
19535: LD_INT 1
19537: NEG
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 1
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 1
19555: PUSH
19556: LD_INT 1
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 0
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 1
19575: NEG
19576: PUSH
19577: LD_INT 0
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 1
19586: NEG
19587: PUSH
19588: LD_INT 1
19590: NEG
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 1
19598: NEG
19599: PUSH
19600: LD_INT 2
19602: NEG
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 0
19610: PUSH
19611: LD_INT 2
19613: NEG
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 1
19621: PUSH
19622: LD_INT 1
19624: NEG
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 2
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 2
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 2
19652: PUSH
19653: LD_INT 2
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: LD_INT 2
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 0
19672: PUSH
19673: LD_INT 2
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 1
19682: NEG
19683: PUSH
19684: LD_INT 1
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 2
19693: NEG
19694: PUSH
19695: LD_INT 0
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 2
19704: NEG
19705: PUSH
19706: LD_INT 1
19708: NEG
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 2
19716: NEG
19717: PUSH
19718: LD_INT 2
19720: NEG
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19747: LD_ADDR_VAR 0 22
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: LD_INT 0
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 0
19764: PUSH
19765: LD_INT 1
19767: NEG
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: LD_INT 0
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 1
19785: PUSH
19786: LD_INT 1
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: LD_INT 1
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: NEG
19806: PUSH
19807: LD_INT 0
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 1
19816: NEG
19817: PUSH
19818: LD_INT 1
19820: NEG
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 1
19828: NEG
19829: PUSH
19830: LD_INT 2
19832: NEG
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 0
19840: PUSH
19841: LD_INT 2
19843: NEG
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: LD_INT 1
19854: NEG
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 2
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 2
19872: PUSH
19873: LD_INT 1
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 2
19882: PUSH
19883: LD_INT 2
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: LD_INT 2
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: LD_INT 2
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 1
19912: NEG
19913: PUSH
19914: LD_INT 1
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: NEG
19924: PUSH
19925: LD_INT 0
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 2
19934: NEG
19935: PUSH
19936: LD_INT 1
19938: NEG
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 2
19946: NEG
19947: PUSH
19948: LD_INT 2
19950: NEG
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19977: LD_ADDR_VAR 0 23
19981: PUSH
19982: LD_INT 0
19984: PUSH
19985: LD_INT 0
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 0
19994: PUSH
19995: LD_INT 1
19997: NEG
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: LD_INT 0
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 1
20015: PUSH
20016: LD_INT 1
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 0
20025: PUSH
20026: LD_INT 1
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 1
20035: NEG
20036: PUSH
20037: LD_INT 0
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 1
20046: NEG
20047: PUSH
20048: LD_INT 1
20050: NEG
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 1
20058: NEG
20059: PUSH
20060: LD_INT 2
20062: NEG
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 0
20070: PUSH
20071: LD_INT 2
20073: NEG
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: LD_INT 1
20084: NEG
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 2
20092: PUSH
20093: LD_INT 0
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 2
20102: PUSH
20103: LD_INT 1
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 2
20112: PUSH
20113: LD_INT 2
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 1
20122: PUSH
20123: LD_INT 2
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: LD_INT 2
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 1
20142: NEG
20143: PUSH
20144: LD_INT 1
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 2
20153: NEG
20154: PUSH
20155: LD_INT 0
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 2
20164: NEG
20165: PUSH
20166: LD_INT 1
20168: NEG
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 2
20176: NEG
20177: PUSH
20178: LD_INT 2
20180: NEG
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 2
20188: NEG
20189: PUSH
20190: LD_INT 3
20192: NEG
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 1
20200: NEG
20201: PUSH
20202: LD_INT 3
20204: NEG
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 1
20212: PUSH
20213: LD_INT 2
20215: NEG
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 2
20223: PUSH
20224: LD_INT 1
20226: NEG
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20257: LD_ADDR_VAR 0 24
20261: PUSH
20262: LD_INT 0
20264: PUSH
20265: LD_INT 0
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 0
20274: PUSH
20275: LD_INT 1
20277: NEG
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: LD_INT 0
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 1
20295: PUSH
20296: LD_INT 1
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 0
20305: PUSH
20306: LD_INT 1
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 1
20315: NEG
20316: PUSH
20317: LD_INT 0
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 1
20326: NEG
20327: PUSH
20328: LD_INT 1
20330: NEG
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 1
20338: NEG
20339: PUSH
20340: LD_INT 2
20342: NEG
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 0
20350: PUSH
20351: LD_INT 2
20353: NEG
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: LD_INT 1
20364: NEG
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 2
20372: PUSH
20373: LD_INT 0
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 2
20382: PUSH
20383: LD_INT 1
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 2
20392: PUSH
20393: LD_INT 2
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 1
20402: PUSH
20403: LD_INT 2
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 0
20412: PUSH
20413: LD_INT 2
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 1
20422: NEG
20423: PUSH
20424: LD_INT 1
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 2
20433: NEG
20434: PUSH
20435: LD_INT 0
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 2
20444: NEG
20445: PUSH
20446: LD_INT 1
20448: NEG
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 2
20456: NEG
20457: PUSH
20458: LD_INT 2
20460: NEG
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 1
20468: PUSH
20469: LD_INT 2
20471: NEG
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 2
20479: PUSH
20480: LD_INT 1
20482: NEG
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 3
20490: PUSH
20491: LD_INT 1
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 3
20500: PUSH
20501: LD_INT 2
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20533: LD_ADDR_VAR 0 25
20537: PUSH
20538: LD_INT 0
20540: PUSH
20541: LD_INT 0
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 0
20550: PUSH
20551: LD_INT 1
20553: NEG
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: LD_INT 0
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 1
20571: PUSH
20572: LD_INT 1
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 0
20581: PUSH
20582: LD_INT 1
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 1
20591: NEG
20592: PUSH
20593: LD_INT 0
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 1
20602: NEG
20603: PUSH
20604: LD_INT 1
20606: NEG
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 1
20614: NEG
20615: PUSH
20616: LD_INT 2
20618: NEG
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 0
20626: PUSH
20627: LD_INT 2
20629: NEG
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 1
20637: PUSH
20638: LD_INT 1
20640: NEG
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 2
20648: PUSH
20649: LD_INT 0
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 2
20658: PUSH
20659: LD_INT 1
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 2
20668: PUSH
20669: LD_INT 2
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: LD_INT 2
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 0
20688: PUSH
20689: LD_INT 2
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: LD_INT 1
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 2
20709: NEG
20710: PUSH
20711: LD_INT 0
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 2
20720: NEG
20721: PUSH
20722: LD_INT 1
20724: NEG
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 2
20732: NEG
20733: PUSH
20734: LD_INT 2
20736: NEG
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 3
20744: PUSH
20745: LD_INT 1
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 3
20754: PUSH
20755: LD_INT 2
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 2
20764: PUSH
20765: LD_INT 3
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: LD_INT 3
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20807: LD_ADDR_VAR 0 26
20811: PUSH
20812: LD_INT 0
20814: PUSH
20815: LD_INT 0
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 0
20824: PUSH
20825: LD_INT 1
20827: NEG
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 1
20835: PUSH
20836: LD_INT 0
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 1
20845: PUSH
20846: LD_INT 1
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 0
20855: PUSH
20856: LD_INT 1
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 1
20865: NEG
20866: PUSH
20867: LD_INT 0
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 1
20876: NEG
20877: PUSH
20878: LD_INT 1
20880: NEG
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 1
20888: NEG
20889: PUSH
20890: LD_INT 2
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 0
20900: PUSH
20901: LD_INT 2
20903: NEG
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 1
20911: PUSH
20912: LD_INT 1
20914: NEG
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 2
20922: PUSH
20923: LD_INT 0
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 2
20932: PUSH
20933: LD_INT 1
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 2
20942: PUSH
20943: LD_INT 2
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 1
20952: PUSH
20953: LD_INT 2
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 0
20962: PUSH
20963: LD_INT 2
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 1
20972: NEG
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 2
20983: NEG
20984: PUSH
20985: LD_INT 0
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 2
20994: NEG
20995: PUSH
20996: LD_INT 1
20998: NEG
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 2
21006: NEG
21007: PUSH
21008: LD_INT 2
21010: NEG
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 2
21018: PUSH
21019: LD_INT 3
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: LD_INT 3
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 1
21038: NEG
21039: PUSH
21040: LD_INT 2
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 2
21049: NEG
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21083: LD_ADDR_VAR 0 27
21087: PUSH
21088: LD_INT 0
21090: PUSH
21091: LD_INT 0
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: LD_INT 1
21103: NEG
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 1
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: LD_INT 1
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 0
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 1
21141: NEG
21142: PUSH
21143: LD_INT 0
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 1
21152: NEG
21153: PUSH
21154: LD_INT 1
21156: NEG
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 1
21164: NEG
21165: PUSH
21166: LD_INT 2
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 0
21176: PUSH
21177: LD_INT 2
21179: NEG
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 1
21187: PUSH
21188: LD_INT 1
21190: NEG
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 2
21198: PUSH
21199: LD_INT 0
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 2
21218: PUSH
21219: LD_INT 2
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 1
21228: PUSH
21229: LD_INT 2
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 0
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 1
21248: NEG
21249: PUSH
21250: LD_INT 1
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 2
21259: NEG
21260: PUSH
21261: LD_INT 0
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 2
21270: NEG
21271: PUSH
21272: LD_INT 1
21274: NEG
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 2
21282: NEG
21283: PUSH
21284: LD_INT 2
21286: NEG
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 1
21294: NEG
21295: PUSH
21296: LD_INT 2
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 2
21305: NEG
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 3
21316: NEG
21317: PUSH
21318: LD_INT 1
21320: NEG
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 3
21328: NEG
21329: PUSH
21330: LD_INT 2
21332: NEG
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21363: LD_ADDR_VAR 0 28
21367: PUSH
21368: LD_INT 0
21370: PUSH
21371: LD_INT 0
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 0
21380: PUSH
21381: LD_INT 1
21383: NEG
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 1
21391: PUSH
21392: LD_INT 0
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 1
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 0
21411: PUSH
21412: LD_INT 1
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 1
21421: NEG
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 1
21432: NEG
21433: PUSH
21434: LD_INT 1
21436: NEG
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: LD_INT 2
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 0
21456: PUSH
21457: LD_INT 2
21459: NEG
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 1
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 2
21478: PUSH
21479: LD_INT 0
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 2
21488: PUSH
21489: LD_INT 1
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 2
21498: PUSH
21499: LD_INT 2
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 1
21508: PUSH
21509: LD_INT 2
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 0
21518: PUSH
21519: LD_INT 2
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 1
21528: NEG
21529: PUSH
21530: LD_INT 1
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 2
21539: NEG
21540: PUSH
21541: LD_INT 0
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 2
21550: NEG
21551: PUSH
21552: LD_INT 1
21554: NEG
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 2
21562: NEG
21563: PUSH
21564: LD_INT 2
21566: NEG
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 2
21574: NEG
21575: PUSH
21576: LD_INT 3
21578: NEG
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 1
21586: NEG
21587: PUSH
21588: LD_INT 3
21590: NEG
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 3
21598: NEG
21599: PUSH
21600: LD_INT 1
21602: NEG
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 3
21610: NEG
21611: PUSH
21612: LD_INT 2
21614: NEG
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21645: LD_ADDR_VAR 0 29
21649: PUSH
21650: LD_INT 0
21652: PUSH
21653: LD_INT 0
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 0
21662: PUSH
21663: LD_INT 1
21665: NEG
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 1
21673: PUSH
21674: LD_INT 0
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 1
21683: PUSH
21684: LD_INT 1
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 0
21693: PUSH
21694: LD_INT 1
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: LD_INT 0
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 1
21714: NEG
21715: PUSH
21716: LD_INT 1
21718: NEG
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 1
21726: NEG
21727: PUSH
21728: LD_INT 2
21730: NEG
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 0
21738: PUSH
21739: LD_INT 2
21741: NEG
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: LD_INT 1
21752: NEG
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 2
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 2
21770: PUSH
21771: LD_INT 1
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 1
21780: PUSH
21781: LD_INT 2
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 0
21790: PUSH
21791: LD_INT 2
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 1
21800: NEG
21801: PUSH
21802: LD_INT 1
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 2
21811: NEG
21812: PUSH
21813: LD_INT 1
21815: NEG
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 2
21823: NEG
21824: PUSH
21825: LD_INT 2
21827: NEG
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 2
21835: NEG
21836: PUSH
21837: LD_INT 3
21839: NEG
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 2
21847: PUSH
21848: LD_INT 1
21850: NEG
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 3
21858: PUSH
21859: LD_INT 1
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 1
21868: PUSH
21869: LD_INT 3
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 1
21878: NEG
21879: PUSH
21880: LD_INT 2
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 3
21889: NEG
21890: PUSH
21891: LD_INT 2
21893: NEG
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21924: LD_ADDR_VAR 0 30
21928: PUSH
21929: LD_INT 0
21931: PUSH
21932: LD_INT 0
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 0
21941: PUSH
21942: LD_INT 1
21944: NEG
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 1
21952: PUSH
21953: LD_INT 0
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 1
21962: PUSH
21963: LD_INT 1
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 0
21972: PUSH
21973: LD_INT 1
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 1
21982: NEG
21983: PUSH
21984: LD_INT 0
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 1
21993: NEG
21994: PUSH
21995: LD_INT 1
21997: NEG
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: LD_INT 1
22005: NEG
22006: PUSH
22007: LD_INT 2
22009: NEG
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 0
22017: PUSH
22018: LD_INT 2
22020: NEG
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 1
22028: PUSH
22029: LD_INT 1
22031: NEG
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 2
22039: PUSH
22040: LD_INT 0
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 2
22049: PUSH
22050: LD_INT 1
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 2
22059: PUSH
22060: LD_INT 2
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 1
22069: PUSH
22070: LD_INT 2
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 1
22079: NEG
22080: PUSH
22081: LD_INT 1
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 2
22090: NEG
22091: PUSH
22092: LD_INT 0
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 2
22101: NEG
22102: PUSH
22103: LD_INT 1
22105: NEG
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 1
22113: NEG
22114: PUSH
22115: LD_INT 3
22117: NEG
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 1
22125: PUSH
22126: LD_INT 2
22128: NEG
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 3
22136: PUSH
22137: LD_INT 2
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 2
22146: PUSH
22147: LD_INT 3
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 2
22156: NEG
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 3
22167: NEG
22168: PUSH
22169: LD_INT 1
22171: NEG
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22202: LD_ADDR_VAR 0 31
22206: PUSH
22207: LD_INT 0
22209: PUSH
22210: LD_INT 0
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: LD_INT 1
22222: NEG
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 1
22230: PUSH
22231: LD_INT 0
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: LD_INT 1
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: LD_INT 1
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 1
22260: NEG
22261: PUSH
22262: LD_INT 0
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 1
22271: NEG
22272: PUSH
22273: LD_INT 1
22275: NEG
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 1
22283: NEG
22284: PUSH
22285: LD_INT 2
22287: NEG
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 1
22295: PUSH
22296: LD_INT 1
22298: NEG
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 2
22306: PUSH
22307: LD_INT 0
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 2
22316: PUSH
22317: LD_INT 1
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 2
22326: PUSH
22327: LD_INT 2
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 1
22336: PUSH
22337: LD_INT 2
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 0
22346: PUSH
22347: LD_INT 2
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 1
22356: NEG
22357: PUSH
22358: LD_INT 1
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 2
22367: NEG
22368: PUSH
22369: LD_INT 1
22371: NEG
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 2
22379: NEG
22380: PUSH
22381: LD_INT 2
22383: NEG
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 2
22391: NEG
22392: PUSH
22393: LD_INT 3
22395: NEG
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 2
22403: PUSH
22404: LD_INT 1
22406: NEG
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 3
22414: PUSH
22415: LD_INT 1
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: LD_INT 3
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 1
22434: NEG
22435: PUSH
22436: LD_INT 2
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 3
22445: NEG
22446: PUSH
22447: LD_INT 2
22449: NEG
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22480: LD_ADDR_VAR 0 32
22484: PUSH
22485: LD_INT 0
22487: PUSH
22488: LD_INT 0
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 0
22497: PUSH
22498: LD_INT 1
22500: NEG
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 1
22508: PUSH
22509: LD_INT 0
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: LD_INT 1
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 0
22528: PUSH
22529: LD_INT 1
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 1
22538: NEG
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 1
22549: NEG
22550: PUSH
22551: LD_INT 1
22553: NEG
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 1
22561: NEG
22562: PUSH
22563: LD_INT 2
22565: NEG
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 0
22573: PUSH
22574: LD_INT 2
22576: NEG
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 1
22584: PUSH
22585: LD_INT 1
22587: NEG
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 2
22595: PUSH
22596: LD_INT 1
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 2
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 1
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 0
22625: PUSH
22626: LD_INT 2
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 1
22635: NEG
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 2
22646: NEG
22647: PUSH
22648: LD_INT 0
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 2
22657: NEG
22658: PUSH
22659: LD_INT 1
22661: NEG
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 1
22669: NEG
22670: PUSH
22671: LD_INT 3
22673: NEG
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 1
22681: PUSH
22682: LD_INT 2
22684: NEG
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 3
22692: PUSH
22693: LD_INT 2
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 2
22702: PUSH
22703: LD_INT 3
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 2
22712: NEG
22713: PUSH
22714: LD_INT 1
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 3
22723: NEG
22724: PUSH
22725: LD_INT 1
22727: NEG
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22758: LD_ADDR_VAR 0 33
22762: PUSH
22763: LD_INT 0
22765: PUSH
22766: LD_INT 0
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: LD_INT 1
22778: NEG
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 1
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 1
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 0
22806: PUSH
22807: LD_INT 1
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 1
22816: NEG
22817: PUSH
22818: LD_INT 0
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 1
22827: NEG
22828: PUSH
22829: LD_INT 1
22831: NEG
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 1
22839: NEG
22840: PUSH
22841: LD_INT 2
22843: NEG
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 1
22851: PUSH
22852: LD_INT 1
22854: NEG
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: LD_INT 0
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 2
22872: PUSH
22873: LD_INT 1
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 0
22892: PUSH
22893: LD_INT 2
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 1
22902: NEG
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 2
22913: NEG
22914: PUSH
22915: LD_INT 0
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 2
22924: NEG
22925: PUSH
22926: LD_INT 1
22928: NEG
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 2
22936: NEG
22937: PUSH
22938: LD_INT 2
22940: NEG
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 2
22948: NEG
22949: PUSH
22950: LD_INT 3
22952: NEG
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 2
22960: PUSH
22961: LD_INT 1
22963: NEG
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 3
22971: PUSH
22972: LD_INT 1
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 1
22981: PUSH
22982: LD_INT 3
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 1
22991: NEG
22992: PUSH
22993: LD_INT 2
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 3
23002: NEG
23003: PUSH
23004: LD_INT 2
23006: NEG
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23037: LD_ADDR_VAR 0 34
23041: PUSH
23042: LD_INT 0
23044: PUSH
23045: LD_INT 0
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 0
23054: PUSH
23055: LD_INT 1
23057: NEG
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 1
23065: PUSH
23066: LD_INT 0
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 0
23085: PUSH
23086: LD_INT 1
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 1
23095: NEG
23096: PUSH
23097: LD_INT 0
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 1
23106: NEG
23107: PUSH
23108: LD_INT 1
23110: NEG
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 1
23118: NEG
23119: PUSH
23120: LD_INT 2
23122: NEG
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 0
23130: PUSH
23131: LD_INT 2
23133: NEG
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 1
23141: PUSH
23142: LD_INT 1
23144: NEG
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 2
23152: PUSH
23153: LD_INT 1
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 2
23162: PUSH
23163: LD_INT 2
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 1
23172: PUSH
23173: LD_INT 2
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 1
23182: NEG
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 2
23193: NEG
23194: PUSH
23195: LD_INT 0
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 2
23204: NEG
23205: PUSH
23206: LD_INT 1
23208: NEG
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 2
23216: NEG
23217: PUSH
23218: LD_INT 2
23220: NEG
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 1
23228: NEG
23229: PUSH
23230: LD_INT 3
23232: NEG
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: PUSH
23241: LD_INT 2
23243: NEG
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 3
23251: PUSH
23252: LD_INT 2
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 2
23261: PUSH
23262: LD_INT 3
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 2
23271: NEG
23272: PUSH
23273: LD_INT 1
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 3
23282: NEG
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23317: LD_ADDR_VAR 0 35
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: LD_INT 0
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 0
23334: PUSH
23335: LD_INT 1
23337: NEG
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 1
23345: PUSH
23346: LD_INT 0
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 1
23355: PUSH
23356: LD_INT 1
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 0
23365: PUSH
23366: LD_INT 1
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 1
23375: NEG
23376: PUSH
23377: LD_INT 0
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 1
23386: NEG
23387: PUSH
23388: LD_INT 1
23390: NEG
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 2
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 2
23408: NEG
23409: PUSH
23410: LD_INT 1
23412: NEG
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23429: LD_ADDR_VAR 0 36
23433: PUSH
23434: LD_INT 0
23436: PUSH
23437: LD_INT 0
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 0
23446: PUSH
23447: LD_INT 1
23449: NEG
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: LD_INT 0
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: LD_INT 1
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 0
23477: PUSH
23478: LD_INT 1
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 1
23487: NEG
23488: PUSH
23489: LD_INT 0
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 1
23498: NEG
23499: PUSH
23500: LD_INT 1
23502: NEG
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 1
23510: NEG
23511: PUSH
23512: LD_INT 2
23514: NEG
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 1
23522: PUSH
23523: LD_INT 2
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23541: LD_ADDR_VAR 0 37
23545: PUSH
23546: LD_INT 0
23548: PUSH
23549: LD_INT 0
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 0
23558: PUSH
23559: LD_INT 1
23561: NEG
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 1
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 1
23579: PUSH
23580: LD_INT 1
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 0
23589: PUSH
23590: LD_INT 1
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 1
23599: NEG
23600: PUSH
23601: LD_INT 0
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: LD_INT 1
23614: NEG
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 1
23633: NEG
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23653: LD_ADDR_VAR 0 38
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: LD_INT 0
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 0
23670: PUSH
23671: LD_INT 1
23673: NEG
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 1
23681: PUSH
23682: LD_INT 0
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 1
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 0
23701: PUSH
23702: LD_INT 1
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 1
23711: NEG
23712: PUSH
23713: LD_INT 0
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 1
23722: NEG
23723: PUSH
23724: LD_INT 1
23726: NEG
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 2
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 2
23744: NEG
23745: PUSH
23746: LD_INT 1
23748: NEG
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23765: LD_ADDR_VAR 0 39
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: LD_INT 0
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 0
23782: PUSH
23783: LD_INT 1
23785: NEG
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: LD_INT 0
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 1
23803: PUSH
23804: LD_INT 1
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 0
23813: PUSH
23814: LD_INT 1
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: LD_INT 1
23838: NEG
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 1
23846: NEG
23847: PUSH
23848: LD_INT 2
23850: NEG
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 1
23858: PUSH
23859: LD_INT 2
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23877: LD_ADDR_VAR 0 40
23881: PUSH
23882: LD_INT 0
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 0
23894: PUSH
23895: LD_INT 1
23897: NEG
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 1
23905: PUSH
23906: LD_INT 0
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 1
23915: PUSH
23916: LD_INT 1
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 0
23925: PUSH
23926: LD_INT 1
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 1
23935: NEG
23936: PUSH
23937: LD_INT 0
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 1
23946: NEG
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 1
23958: PUSH
23959: LD_INT 1
23961: NEG
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 1
23969: NEG
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23989: LD_ADDR_VAR 0 41
23993: PUSH
23994: LD_INT 0
23996: PUSH
23997: LD_INT 0
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 0
24006: PUSH
24007: LD_INT 1
24009: NEG
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 1
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: LD_INT 1
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: NEG
24048: PUSH
24049: LD_INT 0
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 1
24058: NEG
24059: PUSH
24060: LD_INT 1
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: NEG
24071: PUSH
24072: LD_INT 2
24074: NEG
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 2
24093: PUSH
24094: LD_INT 0
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 2
24103: PUSH
24104: LD_INT 1
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 2
24113: PUSH
24114: LD_INT 2
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: PUSH
24124: LD_INT 2
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: NEG
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 2
24144: NEG
24145: PUSH
24146: LD_INT 0
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 2
24155: NEG
24156: PUSH
24157: LD_INT 1
24159: NEG
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 2
24167: NEG
24168: PUSH
24169: LD_INT 2
24171: NEG
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 2
24179: NEG
24180: PUSH
24181: LD_INT 3
24183: NEG
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 2
24191: PUSH
24192: LD_INT 1
24194: NEG
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 3
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 3
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 3
24222: PUSH
24223: LD_INT 2
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 3
24232: PUSH
24233: LD_INT 3
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 2
24242: PUSH
24243: LD_INT 3
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 2
24252: NEG
24253: PUSH
24254: LD_INT 1
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 3
24263: NEG
24264: PUSH
24265: LD_INT 0
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 3
24274: NEG
24275: PUSH
24276: LD_INT 1
24278: NEG
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 3
24286: NEG
24287: PUSH
24288: LD_INT 2
24290: NEG
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 3
24298: NEG
24299: PUSH
24300: LD_INT 3
24302: NEG
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24339: LD_ADDR_VAR 0 42
24343: PUSH
24344: LD_INT 0
24346: PUSH
24347: LD_INT 0
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: LD_INT 1
24359: NEG
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: LD_INT 0
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 1
24377: PUSH
24378: LD_INT 1
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: LD_INT 1
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 1
24397: NEG
24398: PUSH
24399: LD_INT 0
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 1
24408: NEG
24409: PUSH
24410: LD_INT 1
24412: NEG
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 1
24420: NEG
24421: PUSH
24422: LD_INT 2
24424: NEG
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 0
24432: PUSH
24433: LD_INT 2
24435: NEG
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 1
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 2
24454: PUSH
24455: LD_INT 1
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 2
24464: PUSH
24465: LD_INT 2
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 1
24474: PUSH
24475: LD_INT 2
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 0
24484: PUSH
24485: LD_INT 2
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 1
24494: NEG
24495: PUSH
24496: LD_INT 1
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 2
24505: NEG
24506: PUSH
24507: LD_INT 1
24509: NEG
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 2
24517: NEG
24518: PUSH
24519: LD_INT 2
24521: NEG
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 2
24529: NEG
24530: PUSH
24531: LD_INT 3
24533: NEG
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 1
24541: NEG
24542: PUSH
24543: LD_INT 3
24545: NEG
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: LD_INT 3
24556: NEG
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 1
24564: PUSH
24565: LD_INT 2
24567: NEG
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 3
24575: PUSH
24576: LD_INT 2
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 3
24585: PUSH
24586: LD_INT 3
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 2
24595: PUSH
24596: LD_INT 3
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 1
24605: PUSH
24606: LD_INT 3
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 0
24615: PUSH
24616: LD_INT 3
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 1
24625: NEG
24626: PUSH
24627: LD_INT 2
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 3
24636: NEG
24637: PUSH
24638: LD_INT 2
24640: NEG
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 3
24648: NEG
24649: PUSH
24650: LD_INT 3
24652: NEG
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24689: LD_ADDR_VAR 0 43
24693: PUSH
24694: LD_INT 0
24696: PUSH
24697: LD_INT 0
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: LD_INT 1
24709: NEG
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 1
24717: PUSH
24718: LD_INT 0
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: LD_INT 1
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: LD_INT 1
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: LD_INT 0
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 1
24758: NEG
24759: PUSH
24760: LD_INT 1
24762: NEG
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 1
24770: NEG
24771: PUSH
24772: LD_INT 2
24774: NEG
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 0
24782: PUSH
24783: LD_INT 2
24785: NEG
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 2
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 2
24814: PUSH
24815: LD_INT 1
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: LD_INT 2
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: NEG
24845: PUSH
24846: LD_INT 1
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 2
24855: NEG
24856: PUSH
24857: LD_INT 0
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 2
24866: NEG
24867: PUSH
24868: LD_INT 1
24870: NEG
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: NEG
24879: PUSH
24880: LD_INT 3
24882: NEG
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 0
24890: PUSH
24891: LD_INT 3
24893: NEG
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: LD_INT 2
24904: NEG
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 2
24912: PUSH
24913: LD_INT 1
24915: NEG
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 3
24923: PUSH
24924: LD_INT 0
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 3
24933: PUSH
24934: LD_INT 1
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 1
24943: PUSH
24944: LD_INT 3
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: LD_INT 3
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 1
24963: NEG
24964: PUSH
24965: LD_INT 2
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 2
24974: NEG
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 3
24985: NEG
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 3
24996: NEG
24997: PUSH
24998: LD_INT 1
25000: NEG
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25037: LD_ADDR_VAR 0 44
25041: PUSH
25042: LD_INT 0
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 1
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: LD_INT 1
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 1
25095: NEG
25096: PUSH
25097: LD_INT 0
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 1
25106: NEG
25107: PUSH
25108: LD_INT 1
25110: NEG
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 1
25118: NEG
25119: PUSH
25120: LD_INT 2
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 1
25130: PUSH
25131: LD_INT 1
25133: NEG
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 2
25141: PUSH
25142: LD_INT 0
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 2
25161: PUSH
25162: LD_INT 2
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 1
25171: PUSH
25172: LD_INT 2
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: NEG
25182: PUSH
25183: LD_INT 1
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 2
25192: NEG
25193: PUSH
25194: LD_INT 0
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 2
25203: NEG
25204: PUSH
25205: LD_INT 1
25207: NEG
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 2
25215: NEG
25216: PUSH
25217: LD_INT 2
25219: NEG
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 2
25227: NEG
25228: PUSH
25229: LD_INT 3
25231: NEG
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 2
25239: PUSH
25240: LD_INT 1
25242: NEG
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 3
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 3
25260: PUSH
25261: LD_INT 1
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 3
25270: PUSH
25271: LD_INT 2
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 3
25280: PUSH
25281: LD_INT 3
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 2
25290: PUSH
25291: LD_INT 3
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 2
25300: NEG
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 3
25311: NEG
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 3
25322: NEG
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 3
25334: NEG
25335: PUSH
25336: LD_INT 2
25338: NEG
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 3
25346: NEG
25347: PUSH
25348: LD_INT 3
25350: NEG
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25387: LD_ADDR_VAR 0 45
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: LD_INT 0
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 1
25445: NEG
25446: PUSH
25447: LD_INT 0
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: PUSH
25458: LD_INT 1
25460: NEG
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 1
25468: NEG
25469: PUSH
25470: LD_INT 2
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 0
25480: PUSH
25481: LD_INT 2
25483: NEG
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 2
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: LD_INT 2
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 0
25532: PUSH
25533: LD_INT 2
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 1
25542: NEG
25543: PUSH
25544: LD_INT 1
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 2
25553: NEG
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 2
25565: NEG
25566: PUSH
25567: LD_INT 2
25569: NEG
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 2
25577: NEG
25578: PUSH
25579: LD_INT 3
25581: NEG
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 1
25589: NEG
25590: PUSH
25591: LD_INT 3
25593: NEG
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: LD_INT 3
25604: NEG
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: LD_INT 2
25615: NEG
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 3
25623: PUSH
25624: LD_INT 2
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 3
25633: PUSH
25634: LD_INT 3
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 2
25643: PUSH
25644: LD_INT 3
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 1
25653: PUSH
25654: LD_INT 3
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 0
25663: PUSH
25664: LD_INT 3
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 1
25673: NEG
25674: PUSH
25675: LD_INT 2
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 3
25684: NEG
25685: PUSH
25686: LD_INT 2
25688: NEG
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 3
25696: NEG
25697: PUSH
25698: LD_INT 3
25700: NEG
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25737: LD_ADDR_VAR 0 46
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: LD_INT 1
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 0
25785: PUSH
25786: LD_INT 1
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: LD_INT 0
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 1
25806: NEG
25807: PUSH
25808: LD_INT 1
25810: NEG
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 1
25818: NEG
25819: PUSH
25820: LD_INT 2
25822: NEG
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 0
25830: PUSH
25831: LD_INT 2
25833: NEG
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 1
25841: PUSH
25842: LD_INT 1
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 2
25862: PUSH
25863: LD_INT 1
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 1
25872: PUSH
25873: LD_INT 2
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: LD_INT 2
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 1
25892: NEG
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 2
25903: NEG
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 2
25914: NEG
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: LD_INT 3
25930: NEG
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: LD_INT 3
25941: NEG
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: LD_INT 2
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 2
25960: PUSH
25961: LD_INT 1
25963: NEG
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 3
25971: PUSH
25972: LD_INT 0
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 3
25981: PUSH
25982: LD_INT 1
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 1
25991: PUSH
25992: LD_INT 3
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 0
26001: PUSH
26002: LD_INT 3
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 1
26011: NEG
26012: PUSH
26013: LD_INT 2
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 2
26022: NEG
26023: PUSH
26024: LD_INT 1
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 3
26033: NEG
26034: PUSH
26035: LD_INT 0
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 3
26044: NEG
26045: PUSH
26046: LD_INT 1
26048: NEG
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26085: LD_ADDR_VAR 0 47
26089: PUSH
26090: LD_INT 0
26092: PUSH
26093: LD_INT 0
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 0
26102: PUSH
26103: LD_INT 1
26105: NEG
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: LD_INT 0
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 1
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 0
26133: PUSH
26134: LD_INT 1
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 1
26154: NEG
26155: PUSH
26156: LD_INT 1
26158: NEG
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: NEG
26167: PUSH
26168: LD_INT 2
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 0
26178: PUSH
26179: LD_INT 2
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 1
26189: PUSH
26190: LD_INT 1
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 2
26200: NEG
26201: PUSH
26202: LD_INT 1
26204: NEG
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 2
26212: NEG
26213: PUSH
26214: LD_INT 2
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26236: LD_ADDR_VAR 0 48
26240: PUSH
26241: LD_INT 0
26243: PUSH
26244: LD_INT 0
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 0
26253: PUSH
26254: LD_INT 1
26256: NEG
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 1
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: LD_INT 1
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: LD_INT 1
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: NEG
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: PUSH
26307: LD_INT 1
26309: NEG
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 1
26317: NEG
26318: PUSH
26319: LD_INT 2
26321: NEG
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: LD_INT 2
26332: NEG
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 1
26340: PUSH
26341: LD_INT 1
26343: NEG
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 2
26351: PUSH
26352: LD_INT 0
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 2
26361: PUSH
26362: LD_INT 1
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26383: LD_ADDR_VAR 0 49
26387: PUSH
26388: LD_INT 0
26390: PUSH
26391: LD_INT 0
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: LD_INT 1
26403: NEG
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: LD_INT 1
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: LD_INT 1
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: NEG
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: LD_INT 1
26467: NEG
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: LD_INT 0
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 2
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 2
26495: PUSH
26496: LD_INT 2
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 1
26505: PUSH
26506: LD_INT 2
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26527: LD_ADDR_VAR 0 50
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: LD_INT 0
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 0
26544: PUSH
26545: LD_INT 1
26547: NEG
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 1
26555: PUSH
26556: LD_INT 0
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: LD_INT 1
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 1
26585: NEG
26586: PUSH
26587: LD_INT 0
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 1
26596: NEG
26597: PUSH
26598: LD_INT 1
26600: NEG
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 2
26608: PUSH
26609: LD_INT 1
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 2
26618: PUSH
26619: LD_INT 2
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 1
26628: PUSH
26629: LD_INT 2
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: LD_INT 2
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: LD_INT 1
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26671: LD_ADDR_VAR 0 51
26675: PUSH
26676: LD_INT 0
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: LD_INT 0
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 1
26740: NEG
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: LD_INT 2
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 0
26762: PUSH
26763: LD_INT 2
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 1
26772: NEG
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 2
26783: NEG
26784: PUSH
26785: LD_INT 0
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 2
26794: NEG
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26818: LD_ADDR_VAR 0 52
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: LD_INT 1
26838: NEG
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: LD_INT 1
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: LD_INT 1
26891: NEG
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: PUSH
26901: LD_INT 2
26903: NEG
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 2
26922: NEG
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 2
26933: NEG
26934: PUSH
26935: LD_INT 1
26937: NEG
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 2
26945: NEG
26946: PUSH
26947: LD_INT 2
26949: NEG
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26969: LD_ADDR_VAR 0 53
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: LD_INT 1
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 1
27027: NEG
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 1
27050: NEG
27051: PUSH
27052: LD_INT 2
27054: NEG
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: LD_INT 2
27065: NEG
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: LD_INT 1
27076: NEG
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 2
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 2
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 2
27104: PUSH
27105: LD_INT 2
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: LD_INT 2
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: LD_INT 2
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: PUSH
27136: LD_INT 1
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 2
27145: NEG
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 2
27156: NEG
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 2
27168: NEG
27169: PUSH
27170: LD_INT 2
27172: NEG
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27199: LD_ADDR_VAR 0 54
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: LD_INT 1
27219: NEG
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 1
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 1
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 0
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 1
27257: NEG
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 1
27268: NEG
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: LD_INT 2
27284: NEG
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: LD_INT 2
27295: NEG
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: LD_INT 1
27306: NEG
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 2
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 2
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 2
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 1
27344: PUSH
27345: LD_INT 2
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 0
27354: PUSH
27355: LD_INT 2
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 1
27364: NEG
27365: PUSH
27366: LD_INT 1
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 2
27386: NEG
27387: PUSH
27388: LD_INT 1
27390: NEG
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 2
27398: NEG
27399: PUSH
27400: LD_INT 2
27402: NEG
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27429: LD_ADDR_VAR 0 55
27433: PUSH
27434: LD_INT 0
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: LD_INT 1
27449: NEG
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 1
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: LD_INT 1
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 1
27487: NEG
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: NEG
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 1
27510: NEG
27511: PUSH
27512: LD_INT 2
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: LD_INT 2
27525: NEG
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: LD_INT 1
27536: NEG
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 2
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 2
27554: PUSH
27555: LD_INT 1
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 2
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: LD_INT 2
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: LD_INT 2
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 1
27594: NEG
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 2
27605: NEG
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 2
27616: NEG
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 2
27628: NEG
27629: PUSH
27630: LD_INT 2
27632: NEG
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27659: LD_ADDR_VAR 0 56
27663: PUSH
27664: LD_INT 0
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: LD_INT 1
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 1
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: LD_INT 1
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 0
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 1
27717: NEG
27718: PUSH
27719: LD_INT 0
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 1
27728: NEG
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 1
27740: NEG
27741: PUSH
27742: LD_INT 2
27744: NEG
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 0
27752: PUSH
27753: LD_INT 2
27755: NEG
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: LD_INT 1
27766: NEG
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 2
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 2
27784: PUSH
27785: LD_INT 1
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 2
27794: PUSH
27795: LD_INT 2
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 1
27804: PUSH
27805: LD_INT 2
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: LD_INT 2
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 1
27824: NEG
27825: PUSH
27826: LD_INT 1
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: NEG
27836: PUSH
27837: LD_INT 0
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 2
27846: NEG
27847: PUSH
27848: LD_INT 1
27850: NEG
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 2
27858: NEG
27859: PUSH
27860: LD_INT 2
27862: NEG
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27889: LD_ADDR_VAR 0 57
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: LD_INT 1
27909: NEG
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 1
27927: PUSH
27928: LD_INT 1
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 1
27947: NEG
27948: PUSH
27949: LD_INT 0
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: LD_INT 1
27962: NEG
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: NEG
27971: PUSH
27972: LD_INT 2
27974: NEG
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 0
27982: PUSH
27983: LD_INT 2
27985: NEG
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 1
27993: PUSH
27994: LD_INT 1
27996: NEG
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 2
28014: PUSH
28015: LD_INT 1
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 2
28024: PUSH
28025: LD_INT 2
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: LD_INT 2
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 1
28054: NEG
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 2
28065: NEG
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 2
28076: NEG
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 2
28088: NEG
28089: PUSH
28090: LD_INT 2
28092: NEG
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28119: LD_ADDR_VAR 0 58
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: LD_INT 0
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: LD_INT 0
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 1
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 0
28167: PUSH
28168: LD_INT 1
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 1
28177: NEG
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 1
28188: NEG
28189: PUSH
28190: LD_INT 1
28192: NEG
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 1
28200: NEG
28201: PUSH
28202: LD_INT 2
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 0
28212: PUSH
28213: LD_INT 2
28215: NEG
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 1
28223: PUSH
28224: LD_INT 1
28226: NEG
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 2
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 2
28244: PUSH
28245: LD_INT 1
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 2
28254: PUSH
28255: LD_INT 2
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: LD_INT 2
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 0
28274: PUSH
28275: LD_INT 2
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 1
28284: NEG
28285: PUSH
28286: LD_INT 1
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: NEG
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 2
28306: NEG
28307: PUSH
28308: LD_INT 1
28310: NEG
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 2
28318: NEG
28319: PUSH
28320: LD_INT 2
28322: NEG
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28349: LD_ADDR_VAR 0 59
28353: PUSH
28354: LD_INT 0
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 0
28366: PUSH
28367: LD_INT 1
28369: NEG
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: LD_INT 0
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 1
28387: PUSH
28388: LD_INT 1
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 0
28397: PUSH
28398: LD_INT 1
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 1
28407: NEG
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PUSH
28420: LD_INT 1
28422: NEG
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28437: LD_ADDR_VAR 0 60
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: LD_INT 0
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 0
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: PUSH
28466: LD_INT 0
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 1
28475: PUSH
28476: LD_INT 1
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: LD_INT 0
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 1
28506: NEG
28507: PUSH
28508: LD_INT 1
28510: NEG
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28525: LD_ADDR_VAR 0 61
28529: PUSH
28530: LD_INT 0
28532: PUSH
28533: LD_INT 0
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 0
28542: PUSH
28543: LD_INT 1
28545: NEG
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: LD_INT 0
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 0
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: LD_INT 0
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 1
28594: NEG
28595: PUSH
28596: LD_INT 1
28598: NEG
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28613: LD_ADDR_VAR 0 62
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 0
28630: PUSH
28631: LD_INT 1
28633: NEG
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: LD_INT 0
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 1
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 0
28661: PUSH
28662: LD_INT 1
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: LD_INT 0
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 1
28682: NEG
28683: PUSH
28684: LD_INT 1
28686: NEG
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28701: LD_ADDR_VAR 0 63
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: LD_INT 1
28721: NEG
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 1
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 0
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 1
28759: NEG
28760: PUSH
28761: LD_INT 0
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 1
28770: NEG
28771: PUSH
28772: LD_INT 1
28774: NEG
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28789: LD_ADDR_VAR 0 64
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: LD_INT 1
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: LD_INT 0
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 0
28837: PUSH
28838: LD_INT 1
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 1
28847: NEG
28848: PUSH
28849: LD_INT 0
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 1
28858: NEG
28859: PUSH
28860: LD_INT 1
28862: NEG
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: ST_TO_ADDR
// end ; 1 :
28877: GO 34774
28879: LD_INT 1
28881: DOUBLE
28882: EQUAL
28883: IFTRUE 28887
28885: GO 31510
28887: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28888: LD_ADDR_VAR 0 11
28892: PUSH
28893: LD_INT 1
28895: NEG
28896: PUSH
28897: LD_INT 3
28899: NEG
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: LD_INT 3
28910: NEG
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 1
28918: PUSH
28919: LD_INT 2
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: LIST
28931: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28932: LD_ADDR_VAR 0 12
28936: PUSH
28937: LD_INT 2
28939: PUSH
28940: LD_INT 1
28942: NEG
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 3
28950: PUSH
28951: LD_INT 0
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 3
28960: PUSH
28961: LD_INT 1
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: LIST
28972: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28973: LD_ADDR_VAR 0 13
28977: PUSH
28978: LD_INT 3
28980: PUSH
28981: LD_INT 2
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 3
28990: PUSH
28991: LD_INT 3
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 2
29000: PUSH
29001: LD_INT 3
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: LIST
29012: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29013: LD_ADDR_VAR 0 14
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: LD_INT 3
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 0
29030: PUSH
29031: LD_INT 3
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 1
29040: NEG
29041: PUSH
29042: LD_INT 2
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: LIST
29053: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29054: LD_ADDR_VAR 0 15
29058: PUSH
29059: LD_INT 2
29061: NEG
29062: PUSH
29063: LD_INT 1
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 3
29072: NEG
29073: PUSH
29074: LD_INT 0
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 3
29083: NEG
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: LIST
29097: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29098: LD_ADDR_VAR 0 16
29102: PUSH
29103: LD_INT 2
29105: NEG
29106: PUSH
29107: LD_INT 3
29109: NEG
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 3
29117: NEG
29118: PUSH
29119: LD_INT 2
29121: NEG
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 3
29129: NEG
29130: PUSH
29131: LD_INT 3
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: LIST
29143: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29144: LD_ADDR_VAR 0 17
29148: PUSH
29149: LD_INT 1
29151: NEG
29152: PUSH
29153: LD_INT 3
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 0
29163: PUSH
29164: LD_INT 3
29166: NEG
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: LD_INT 2
29177: NEG
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: LIST
29187: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29188: LD_ADDR_VAR 0 18
29192: PUSH
29193: LD_INT 2
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 3
29206: PUSH
29207: LD_INT 0
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 3
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: LIST
29228: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29229: LD_ADDR_VAR 0 19
29233: PUSH
29234: LD_INT 3
29236: PUSH
29237: LD_INT 2
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 3
29246: PUSH
29247: LD_INT 3
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 2
29256: PUSH
29257: LD_INT 3
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: LIST
29268: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29269: LD_ADDR_VAR 0 20
29273: PUSH
29274: LD_INT 1
29276: PUSH
29277: LD_INT 3
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: LD_INT 3
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: LD_INT 2
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29310: LD_ADDR_VAR 0 21
29314: PUSH
29315: LD_INT 2
29317: NEG
29318: PUSH
29319: LD_INT 1
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 3
29328: NEG
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 3
29339: NEG
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: LIST
29353: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29354: LD_ADDR_VAR 0 22
29358: PUSH
29359: LD_INT 2
29361: NEG
29362: PUSH
29363: LD_INT 3
29365: NEG
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 3
29373: NEG
29374: PUSH
29375: LD_INT 2
29377: NEG
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 3
29385: NEG
29386: PUSH
29387: LD_INT 3
29389: NEG
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: LIST
29399: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29400: LD_ADDR_VAR 0 23
29404: PUSH
29405: LD_INT 0
29407: PUSH
29408: LD_INT 3
29410: NEG
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 1
29418: NEG
29419: PUSH
29420: LD_INT 4
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 1
29430: PUSH
29431: LD_INT 3
29433: NEG
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: LIST
29443: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29444: LD_ADDR_VAR 0 24
29448: PUSH
29449: LD_INT 3
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 3
29461: PUSH
29462: LD_INT 1
29464: NEG
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 4
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: LIST
29484: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29485: LD_ADDR_VAR 0 25
29489: PUSH
29490: LD_INT 3
29492: PUSH
29493: LD_INT 3
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 4
29502: PUSH
29503: LD_INT 3
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 3
29512: PUSH
29513: LD_INT 4
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: LIST
29524: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29525: LD_ADDR_VAR 0 26
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: LD_INT 3
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: PUSH
29543: LD_INT 4
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 1
29552: NEG
29553: PUSH
29554: LD_INT 3
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29566: LD_ADDR_VAR 0 27
29570: PUSH
29571: LD_INT 3
29573: NEG
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 3
29584: NEG
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 4
29595: NEG
29596: PUSH
29597: LD_INT 1
29599: NEG
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: LIST
29609: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29610: LD_ADDR_VAR 0 28
29614: PUSH
29615: LD_INT 3
29617: NEG
29618: PUSH
29619: LD_INT 3
29621: NEG
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 3
29629: NEG
29630: PUSH
29631: LD_INT 4
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 4
29641: NEG
29642: PUSH
29643: LD_INT 3
29645: NEG
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: LIST
29655: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29656: LD_ADDR_VAR 0 29
29660: PUSH
29661: LD_INT 1
29663: NEG
29664: PUSH
29665: LD_INT 3
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: LD_INT 3
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: PUSH
29687: LD_INT 2
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: NEG
29698: PUSH
29699: LD_INT 4
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: LD_INT 4
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: LD_INT 3
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 1
29731: NEG
29732: PUSH
29733: LD_INT 5
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: LD_INT 5
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 1
29754: PUSH
29755: LD_INT 4
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 1
29765: NEG
29766: PUSH
29767: LD_INT 6
29769: NEG
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: LD_INT 6
29780: NEG
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 1
29788: PUSH
29789: LD_INT 5
29791: NEG
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29811: LD_ADDR_VAR 0 30
29815: PUSH
29816: LD_INT 2
29818: PUSH
29819: LD_INT 1
29821: NEG
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 3
29829: PUSH
29830: LD_INT 0
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 3
29839: PUSH
29840: LD_INT 1
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 3
29849: PUSH
29850: LD_INT 1
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 4
29860: PUSH
29861: LD_INT 0
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 4
29870: PUSH
29871: LD_INT 1
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 4
29880: PUSH
29881: LD_INT 1
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 5
29891: PUSH
29892: LD_INT 0
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 5
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 5
29911: PUSH
29912: LD_INT 1
29914: NEG
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 6
29922: PUSH
29923: LD_INT 0
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 6
29932: PUSH
29933: LD_INT 1
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29954: LD_ADDR_VAR 0 31
29958: PUSH
29959: LD_INT 3
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 3
29971: PUSH
29972: LD_INT 3
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 2
29981: PUSH
29982: LD_INT 3
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 4
29991: PUSH
29992: LD_INT 3
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 4
30001: PUSH
30002: LD_INT 4
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 3
30011: PUSH
30012: LD_INT 4
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 5
30021: PUSH
30022: LD_INT 4
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 5
30031: PUSH
30032: LD_INT 5
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 4
30041: PUSH
30042: LD_INT 5
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 6
30051: PUSH
30052: LD_INT 5
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 6
30061: PUSH
30062: LD_INT 6
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 5
30071: PUSH
30072: LD_INT 6
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30093: LD_ADDR_VAR 0 32
30097: PUSH
30098: LD_INT 1
30100: PUSH
30101: LD_INT 3
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 0
30110: PUSH
30111: LD_INT 3
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 1
30120: NEG
30121: PUSH
30122: LD_INT 2
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 1
30131: PUSH
30132: LD_INT 4
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 0
30141: PUSH
30142: LD_INT 4
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 1
30151: NEG
30152: PUSH
30153: LD_INT 3
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 1
30162: PUSH
30163: LD_INT 5
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 0
30172: PUSH
30173: LD_INT 5
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 1
30182: NEG
30183: PUSH
30184: LD_INT 4
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: LD_INT 6
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: LD_INT 6
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 1
30213: NEG
30214: PUSH
30215: LD_INT 5
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30236: LD_ADDR_VAR 0 33
30240: PUSH
30241: LD_INT 2
30243: NEG
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 3
30254: NEG
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 3
30265: NEG
30266: PUSH
30267: LD_INT 1
30269: NEG
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 3
30277: NEG
30278: PUSH
30279: LD_INT 1
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 4
30288: NEG
30289: PUSH
30290: LD_INT 0
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 4
30299: NEG
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 4
30311: NEG
30312: PUSH
30313: LD_INT 1
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 5
30322: NEG
30323: PUSH
30324: LD_INT 0
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 5
30333: NEG
30334: PUSH
30335: LD_INT 1
30337: NEG
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 5
30345: NEG
30346: PUSH
30347: LD_INT 1
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 6
30356: NEG
30357: PUSH
30358: LD_INT 0
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 6
30367: NEG
30368: PUSH
30369: LD_INT 1
30371: NEG
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30391: LD_ADDR_VAR 0 34
30395: PUSH
30396: LD_INT 2
30398: NEG
30399: PUSH
30400: LD_INT 3
30402: NEG
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 3
30410: NEG
30411: PUSH
30412: LD_INT 2
30414: NEG
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 3
30422: NEG
30423: PUSH
30424: LD_INT 3
30426: NEG
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 3
30434: NEG
30435: PUSH
30436: LD_INT 4
30438: NEG
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 4
30446: NEG
30447: PUSH
30448: LD_INT 3
30450: NEG
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 4
30458: NEG
30459: PUSH
30460: LD_INT 4
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 4
30470: NEG
30471: PUSH
30472: LD_INT 5
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 5
30482: NEG
30483: PUSH
30484: LD_INT 4
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 5
30494: NEG
30495: PUSH
30496: LD_INT 5
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 5
30506: NEG
30507: PUSH
30508: LD_INT 6
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 6
30518: NEG
30519: PUSH
30520: LD_INT 5
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 6
30530: NEG
30531: PUSH
30532: LD_INT 6
30534: NEG
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30554: LD_ADDR_VAR 0 41
30558: PUSH
30559: LD_INT 0
30561: PUSH
30562: LD_INT 2
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 1
30572: NEG
30573: PUSH
30574: LD_INT 3
30576: NEG
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: LD_INT 2
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: LIST
30597: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30598: LD_ADDR_VAR 0 42
30602: PUSH
30603: LD_INT 2
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 2
30615: PUSH
30616: LD_INT 1
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 3
30626: PUSH
30627: LD_INT 1
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: LIST
30638: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30639: LD_ADDR_VAR 0 43
30643: PUSH
30644: LD_INT 2
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 3
30656: PUSH
30657: LD_INT 2
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 2
30666: PUSH
30667: LD_INT 3
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: LIST
30678: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30679: LD_ADDR_VAR 0 44
30683: PUSH
30684: LD_INT 0
30686: PUSH
30687: LD_INT 2
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: LD_INT 3
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 1
30706: NEG
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: LIST
30719: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30720: LD_ADDR_VAR 0 45
30724: PUSH
30725: LD_INT 2
30727: NEG
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 2
30738: NEG
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 3
30749: NEG
30750: PUSH
30751: LD_INT 1
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: LIST
30763: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30764: LD_ADDR_VAR 0 46
30768: PUSH
30769: LD_INT 2
30771: NEG
30772: PUSH
30773: LD_INT 2
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 2
30783: NEG
30784: PUSH
30785: LD_INT 3
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 3
30795: NEG
30796: PUSH
30797: LD_INT 2
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: LIST
30809: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30810: LD_ADDR_VAR 0 47
30814: PUSH
30815: LD_INT 2
30817: NEG
30818: PUSH
30819: LD_INT 3
30821: NEG
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 1
30829: NEG
30830: PUSH
30831: LD_INT 3
30833: NEG
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30843: LD_ADDR_VAR 0 48
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: LD_INT 2
30853: NEG
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 2
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30874: LD_ADDR_VAR 0 49
30878: PUSH
30879: LD_INT 3
30881: PUSH
30882: LD_INT 1
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 3
30891: PUSH
30892: LD_INT 2
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30903: LD_ADDR_VAR 0 50
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: LD_INT 3
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30932: LD_ADDR_VAR 0 51
30936: PUSH
30937: LD_INT 1
30939: NEG
30940: PUSH
30941: LD_INT 2
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 2
30950: NEG
30951: PUSH
30952: LD_INT 1
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30963: LD_ADDR_VAR 0 52
30967: PUSH
30968: LD_INT 3
30970: NEG
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 3
30982: NEG
30983: PUSH
30984: LD_INT 2
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30996: LD_ADDR_VAR 0 53
31000: PUSH
31001: LD_INT 1
31003: NEG
31004: PUSH
31005: LD_INT 3
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 0
31015: PUSH
31016: LD_INT 3
31018: NEG
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 1
31026: PUSH
31027: LD_INT 2
31029: NEG
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: LIST
31039: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31040: LD_ADDR_VAR 0 54
31044: PUSH
31045: LD_INT 2
31047: PUSH
31048: LD_INT 1
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 3
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 3
31068: PUSH
31069: LD_INT 1
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: LIST
31080: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31081: LD_ADDR_VAR 0 55
31085: PUSH
31086: LD_INT 3
31088: PUSH
31089: LD_INT 2
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 3
31098: PUSH
31099: LD_INT 3
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 2
31108: PUSH
31109: LD_INT 3
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31121: LD_ADDR_VAR 0 56
31125: PUSH
31126: LD_INT 1
31128: PUSH
31129: LD_INT 3
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: LD_INT 3
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 1
31148: NEG
31149: PUSH
31150: LD_INT 2
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: LIST
31161: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31162: LD_ADDR_VAR 0 57
31166: PUSH
31167: LD_INT 2
31169: NEG
31170: PUSH
31171: LD_INT 1
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 3
31180: NEG
31181: PUSH
31182: LD_INT 0
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 3
31191: NEG
31192: PUSH
31193: LD_INT 1
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: LIST
31205: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31206: LD_ADDR_VAR 0 58
31210: PUSH
31211: LD_INT 2
31213: NEG
31214: PUSH
31215: LD_INT 3
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 3
31225: NEG
31226: PUSH
31227: LD_INT 2
31229: NEG
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 3
31237: NEG
31238: PUSH
31239: LD_INT 3
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: LIST
31251: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31252: LD_ADDR_VAR 0 59
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: LD_INT 2
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 0
31271: PUSH
31272: LD_INT 2
31274: NEG
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 1
31282: PUSH
31283: LD_INT 1
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: LIST
31295: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31296: LD_ADDR_VAR 0 60
31300: PUSH
31301: LD_INT 1
31303: PUSH
31304: LD_INT 1
31306: NEG
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 2
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: LIST
31336: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31337: LD_ADDR_VAR 0 61
31341: PUSH
31342: LD_INT 2
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 2
31354: PUSH
31355: LD_INT 2
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 1
31364: PUSH
31365: LD_INT 2
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: LIST
31376: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31377: LD_ADDR_VAR 0 62
31381: PUSH
31382: LD_INT 1
31384: PUSH
31385: LD_INT 2
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 0
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: NEG
31405: PUSH
31406: LD_INT 1
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: LIST
31417: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31418: LD_ADDR_VAR 0 63
31422: PUSH
31423: LD_INT 1
31425: NEG
31426: PUSH
31427: LD_INT 1
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 2
31436: NEG
31437: PUSH
31438: LD_INT 0
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 2
31447: NEG
31448: PUSH
31449: LD_INT 1
31451: NEG
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: LIST
31461: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31462: LD_ADDR_VAR 0 64
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: LD_INT 2
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 2
31481: NEG
31482: PUSH
31483: LD_INT 1
31485: NEG
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 2
31493: NEG
31494: PUSH
31495: LD_INT 2
31497: NEG
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: LIST
31507: ST_TO_ADDR
// end ; 2 :
31508: GO 34774
31510: LD_INT 2
31512: DOUBLE
31513: EQUAL
31514: IFTRUE 31518
31516: GO 34773
31518: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31519: LD_ADDR_VAR 0 29
31523: PUSH
31524: LD_INT 4
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 4
31536: PUSH
31537: LD_INT 1
31539: NEG
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 5
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 5
31557: PUSH
31558: LD_INT 1
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 4
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 3
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 3
31587: PUSH
31588: LD_INT 1
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 3
31598: PUSH
31599: LD_INT 2
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 5
31609: PUSH
31610: LD_INT 2
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 3
31619: PUSH
31620: LD_INT 3
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 3
31629: PUSH
31630: LD_INT 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 4
31639: PUSH
31640: LD_INT 3
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 4
31649: PUSH
31650: LD_INT 4
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 3
31659: PUSH
31660: LD_INT 4
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: LD_INT 3
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 2
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 4
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 2
31699: PUSH
31700: LD_INT 4
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: LD_INT 4
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 0
31719: PUSH
31720: LD_INT 3
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: LD_INT 4
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 1
31739: PUSH
31740: LD_INT 5
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 0
31749: PUSH
31750: LD_INT 5
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 1
31759: NEG
31760: PUSH
31761: LD_INT 4
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 1
31770: NEG
31771: PUSH
31772: LD_INT 3
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 2
31781: PUSH
31782: LD_INT 5
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 2
31791: NEG
31792: PUSH
31793: LD_INT 3
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 3
31802: NEG
31803: PUSH
31804: LD_INT 0
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 3
31813: NEG
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 2
31825: NEG
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 2
31836: NEG
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 3
31847: NEG
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 4
31858: NEG
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 4
31869: NEG
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 4
31881: NEG
31882: PUSH
31883: LD_INT 2
31885: NEG
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 2
31893: NEG
31894: PUSH
31895: LD_INT 2
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 4
31904: NEG
31905: PUSH
31906: LD_INT 4
31908: NEG
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 4
31916: NEG
31917: PUSH
31918: LD_INT 5
31920: NEG
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 3
31928: NEG
31929: PUSH
31930: LD_INT 4
31932: NEG
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 3
31940: NEG
31941: PUSH
31942: LD_INT 3
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 4
31952: NEG
31953: PUSH
31954: LD_INT 3
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 5
31964: NEG
31965: PUSH
31966: LD_INT 4
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 5
31976: NEG
31977: PUSH
31978: LD_INT 5
31980: NEG
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 3
31988: NEG
31989: PUSH
31990: LD_INT 5
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 5
32000: NEG
32001: PUSH
32002: LD_INT 3
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32057: LD_ADDR_VAR 0 30
32061: PUSH
32062: LD_INT 4
32064: PUSH
32065: LD_INT 4
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 4
32074: PUSH
32075: LD_INT 3
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 5
32084: PUSH
32085: LD_INT 4
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 5
32094: PUSH
32095: LD_INT 5
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 4
32104: PUSH
32105: LD_INT 5
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 3
32114: PUSH
32115: LD_INT 4
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 3
32124: PUSH
32125: LD_INT 3
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 5
32134: PUSH
32135: LD_INT 3
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 3
32144: PUSH
32145: LD_INT 5
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: LD_INT 3
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 0
32164: PUSH
32165: LD_INT 2
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 1
32174: PUSH
32175: LD_INT 3
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 1
32184: PUSH
32185: LD_INT 4
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 0
32194: PUSH
32195: LD_INT 4
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 1
32204: NEG
32205: PUSH
32206: LD_INT 3
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 1
32215: NEG
32216: PUSH
32217: LD_INT 2
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 2
32226: PUSH
32227: LD_INT 4
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 2
32236: NEG
32237: PUSH
32238: LD_INT 2
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 4
32247: NEG
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 4
32258: NEG
32259: PUSH
32260: LD_INT 1
32262: NEG
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 3
32270: NEG
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 3
32281: NEG
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 4
32292: NEG
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 5
32303: NEG
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 5
32314: NEG
32315: PUSH
32316: LD_INT 1
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 5
32326: NEG
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 3
32338: NEG
32339: PUSH
32340: LD_INT 2
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 3
32349: NEG
32350: PUSH
32351: LD_INT 3
32353: NEG
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 3
32361: NEG
32362: PUSH
32363: LD_INT 4
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 2
32373: NEG
32374: PUSH
32375: LD_INT 3
32377: NEG
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 2
32385: NEG
32386: PUSH
32387: LD_INT 2
32389: NEG
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 3
32397: NEG
32398: PUSH
32399: LD_INT 2
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 4
32409: NEG
32410: PUSH
32411: LD_INT 3
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 4
32421: NEG
32422: PUSH
32423: LD_INT 4
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 2
32433: NEG
32434: PUSH
32435: LD_INT 4
32437: NEG
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 4
32445: NEG
32446: PUSH
32447: LD_INT 2
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: LD_INT 4
32460: NEG
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: LD_INT 5
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 1
32479: PUSH
32480: LD_INT 4
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: LD_INT 3
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 0
32501: PUSH
32502: LD_INT 3
32504: NEG
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 1
32512: NEG
32513: PUSH
32514: LD_INT 4
32516: NEG
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 1
32524: NEG
32525: PUSH
32526: LD_INT 5
32528: NEG
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: LD_INT 3
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 2
32547: NEG
32548: PUSH
32549: LD_INT 5
32551: NEG
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32604: LD_ADDR_VAR 0 31
32608: PUSH
32609: LD_INT 0
32611: PUSH
32612: LD_INT 4
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: LD_INT 3
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 1
32631: PUSH
32632: LD_INT 4
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: LD_INT 5
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: LD_INT 5
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 1
32661: NEG
32662: PUSH
32663: LD_INT 4
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 1
32672: NEG
32673: PUSH
32674: LD_INT 3
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 2
32683: PUSH
32684: LD_INT 5
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 2
32693: NEG
32694: PUSH
32695: LD_INT 3
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 3
32704: NEG
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 3
32715: NEG
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 2
32727: NEG
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 2
32738: NEG
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 3
32749: NEG
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 4
32760: NEG
32761: PUSH
32762: LD_INT 0
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 4
32771: NEG
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 4
32783: NEG
32784: PUSH
32785: LD_INT 2
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 2
32795: NEG
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 4
32806: NEG
32807: PUSH
32808: LD_INT 4
32810: NEG
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 4
32818: NEG
32819: PUSH
32820: LD_INT 5
32822: NEG
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 3
32830: NEG
32831: PUSH
32832: LD_INT 4
32834: NEG
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 3
32842: NEG
32843: PUSH
32844: LD_INT 3
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 4
32854: NEG
32855: PUSH
32856: LD_INT 3
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 5
32866: NEG
32867: PUSH
32868: LD_INT 4
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 5
32878: NEG
32879: PUSH
32880: LD_INT 5
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 3
32890: NEG
32891: PUSH
32892: LD_INT 5
32894: NEG
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 5
32902: NEG
32903: PUSH
32904: LD_INT 3
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: LD_INT 3
32917: NEG
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 0
32925: PUSH
32926: LD_INT 4
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: LD_INT 3
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 1
32947: PUSH
32948: LD_INT 2
32950: NEG
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 0
32958: PUSH
32959: LD_INT 2
32961: NEG
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 1
32969: NEG
32970: PUSH
32971: LD_INT 3
32973: NEG
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 1
32981: NEG
32982: PUSH
32983: LD_INT 4
32985: NEG
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 2
32993: PUSH
32994: LD_INT 2
32996: NEG
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 2
33004: NEG
33005: PUSH
33006: LD_INT 4
33008: NEG
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 4
33016: PUSH
33017: LD_INT 0
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 4
33026: PUSH
33027: LD_INT 1
33029: NEG
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 5
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 5
33047: PUSH
33048: LD_INT 1
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 4
33057: PUSH
33058: LD_INT 1
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 3
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 3
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 3
33088: PUSH
33089: LD_INT 2
33091: NEG
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 5
33099: PUSH
33100: LD_INT 2
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33154: LD_ADDR_VAR 0 32
33158: PUSH
33159: LD_INT 4
33161: NEG
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 4
33172: NEG
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 3
33184: NEG
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 3
33195: NEG
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 4
33206: NEG
33207: PUSH
33208: LD_INT 1
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 5
33217: NEG
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 5
33228: NEG
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 5
33240: NEG
33241: PUSH
33242: LD_INT 2
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 3
33252: NEG
33253: PUSH
33254: LD_INT 2
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 3
33263: NEG
33264: PUSH
33265: LD_INT 3
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 3
33275: NEG
33276: PUSH
33277: LD_INT 4
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 2
33287: NEG
33288: PUSH
33289: LD_INT 3
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 2
33299: NEG
33300: PUSH
33301: LD_INT 2
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 3
33311: NEG
33312: PUSH
33313: LD_INT 2
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 4
33323: NEG
33324: PUSH
33325: LD_INT 3
33327: NEG
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 4
33335: NEG
33336: PUSH
33337: LD_INT 4
33339: NEG
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 2
33347: NEG
33348: PUSH
33349: LD_INT 4
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 4
33359: NEG
33360: PUSH
33361: LD_INT 2
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 0
33371: PUSH
33372: LD_INT 4
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 0
33382: PUSH
33383: LD_INT 5
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 1
33393: PUSH
33394: LD_INT 4
33396: NEG
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 1
33404: PUSH
33405: LD_INT 3
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 0
33415: PUSH
33416: LD_INT 3
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 1
33426: NEG
33427: PUSH
33428: LD_INT 4
33430: NEG
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 1
33438: NEG
33439: PUSH
33440: LD_INT 5
33442: NEG
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 2
33450: PUSH
33451: LD_INT 3
33453: NEG
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 2
33461: NEG
33462: PUSH
33463: LD_INT 5
33465: NEG
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 3
33483: PUSH
33484: LD_INT 1
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 4
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 4
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 3
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 2
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 2
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 2
33545: PUSH
33546: LD_INT 2
33548: NEG
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 4
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 4
33566: PUSH
33567: LD_INT 4
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 4
33576: PUSH
33577: LD_INT 3
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 5
33586: PUSH
33587: LD_INT 4
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 5
33596: PUSH
33597: LD_INT 5
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 4
33606: PUSH
33607: LD_INT 5
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 3
33616: PUSH
33617: LD_INT 4
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 3
33626: PUSH
33627: LD_INT 3
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 5
33636: PUSH
33637: LD_INT 3
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 3
33646: PUSH
33647: LD_INT 5
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33701: LD_ADDR_VAR 0 33
33705: PUSH
33706: LD_INT 4
33708: NEG
33709: PUSH
33710: LD_INT 4
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 4
33720: NEG
33721: PUSH
33722: LD_INT 5
33724: NEG
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 3
33732: NEG
33733: PUSH
33734: LD_INT 4
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 3
33744: NEG
33745: PUSH
33746: LD_INT 3
33748: NEG
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 4
33756: NEG
33757: PUSH
33758: LD_INT 3
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 5
33768: NEG
33769: PUSH
33770: LD_INT 4
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 5
33780: NEG
33781: PUSH
33782: LD_INT 5
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 3
33792: NEG
33793: PUSH
33794: LD_INT 5
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 5
33804: NEG
33805: PUSH
33806: LD_INT 3
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: LD_INT 3
33819: NEG
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: LD_INT 4
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: LD_INT 3
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: LD_INT 2
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 0
33860: PUSH
33861: LD_INT 2
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: NEG
33872: PUSH
33873: LD_INT 3
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: LD_INT 4
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 2
33895: PUSH
33896: LD_INT 2
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 2
33906: NEG
33907: PUSH
33908: LD_INT 4
33910: NEG
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 4
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 4
33928: PUSH
33929: LD_INT 1
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 5
33939: PUSH
33940: LD_INT 0
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 5
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 4
33959: PUSH
33960: LD_INT 1
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 3
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 3
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 3
33990: PUSH
33991: LD_INT 2
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 5
34001: PUSH
34002: LD_INT 2
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 3
34011: PUSH
34012: LD_INT 3
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 3
34021: PUSH
34022: LD_INT 2
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 4
34031: PUSH
34032: LD_INT 3
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 4
34041: PUSH
34042: LD_INT 4
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 3
34051: PUSH
34052: LD_INT 4
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 2
34061: PUSH
34062: LD_INT 3
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 2
34071: PUSH
34072: LD_INT 2
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 4
34081: PUSH
34082: LD_INT 2
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 2
34091: PUSH
34092: LD_INT 4
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: LD_INT 4
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: LD_INT 3
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 1
34121: PUSH
34122: LD_INT 4
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 1
34131: PUSH
34132: LD_INT 5
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: LD_INT 5
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: LD_INT 4
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 1
34162: NEG
34163: PUSH
34164: LD_INT 3
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: LD_INT 5
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 2
34183: NEG
34184: PUSH
34185: LD_INT 3
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34239: LD_ADDR_VAR 0 34
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 4
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: LD_INT 5
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: LD_INT 4
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 1
34279: PUSH
34280: LD_INT 3
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 0
34290: PUSH
34291: LD_INT 3
34293: NEG
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 1
34301: NEG
34302: PUSH
34303: LD_INT 4
34305: NEG
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: LD_INT 5
34317: NEG
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 2
34325: PUSH
34326: LD_INT 3
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 2
34336: NEG
34337: PUSH
34338: LD_INT 5
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 3
34348: PUSH
34349: LD_INT 0
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 3
34358: PUSH
34359: LD_INT 1
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 4
34369: PUSH
34370: LD_INT 0
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 4
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 3
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 2
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: PUSH
34410: LD_INT 1
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 2
34420: PUSH
34421: LD_INT 2
34423: NEG
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 4
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 4
34441: PUSH
34442: LD_INT 4
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 4
34451: PUSH
34452: LD_INT 3
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 5
34461: PUSH
34462: LD_INT 4
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 5
34471: PUSH
34472: LD_INT 5
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 4
34481: PUSH
34482: LD_INT 5
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 3
34491: PUSH
34492: LD_INT 4
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 3
34501: PUSH
34502: LD_INT 3
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 5
34511: PUSH
34512: LD_INT 3
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 3
34521: PUSH
34522: LD_INT 5
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: LD_INT 3
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 1
34551: PUSH
34552: LD_INT 3
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 1
34561: PUSH
34562: LD_INT 4
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: LD_INT 4
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: LD_INT 3
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: LD_INT 2
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 2
34603: PUSH
34604: LD_INT 4
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 2
34613: NEG
34614: PUSH
34615: LD_INT 2
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 4
34624: NEG
34625: PUSH
34626: LD_INT 0
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 4
34635: NEG
34636: PUSH
34637: LD_INT 1
34639: NEG
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 3
34647: NEG
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 3
34658: NEG
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 4
34669: NEG
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 5
34680: NEG
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 5
34691: NEG
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 5
34703: NEG
34704: PUSH
34705: LD_INT 2
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 3
34715: NEG
34716: PUSH
34717: LD_INT 2
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: ST_TO_ADDR
// end ; end ;
34771: GO 34774
34773: POP
// case btype of b_depot , b_warehouse :
34774: LD_VAR 0 1
34778: PUSH
34779: LD_INT 0
34781: DOUBLE
34782: EQUAL
34783: IFTRUE 34793
34785: LD_INT 1
34787: DOUBLE
34788: EQUAL
34789: IFTRUE 34793
34791: GO 34994
34793: POP
// case nation of nation_american :
34794: LD_VAR 0 5
34798: PUSH
34799: LD_INT 1
34801: DOUBLE
34802: EQUAL
34803: IFTRUE 34807
34805: GO 34863
34807: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34808: LD_ADDR_VAR 0 9
34812: PUSH
34813: LD_VAR 0 11
34817: PUSH
34818: LD_VAR 0 12
34822: PUSH
34823: LD_VAR 0 13
34827: PUSH
34828: LD_VAR 0 14
34832: PUSH
34833: LD_VAR 0 15
34837: PUSH
34838: LD_VAR 0 16
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: PUSH
34851: LD_VAR 0 4
34855: PUSH
34856: LD_INT 1
34858: PLUS
34859: ARRAY
34860: ST_TO_ADDR
34861: GO 34992
34863: LD_INT 2
34865: DOUBLE
34866: EQUAL
34867: IFTRUE 34871
34869: GO 34927
34871: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34872: LD_ADDR_VAR 0 9
34876: PUSH
34877: LD_VAR 0 17
34881: PUSH
34882: LD_VAR 0 18
34886: PUSH
34887: LD_VAR 0 19
34891: PUSH
34892: LD_VAR 0 20
34896: PUSH
34897: LD_VAR 0 21
34901: PUSH
34902: LD_VAR 0 22
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: PUSH
34915: LD_VAR 0 4
34919: PUSH
34920: LD_INT 1
34922: PLUS
34923: ARRAY
34924: ST_TO_ADDR
34925: GO 34992
34927: LD_INT 3
34929: DOUBLE
34930: EQUAL
34931: IFTRUE 34935
34933: GO 34991
34935: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34936: LD_ADDR_VAR 0 9
34940: PUSH
34941: LD_VAR 0 23
34945: PUSH
34946: LD_VAR 0 24
34950: PUSH
34951: LD_VAR 0 25
34955: PUSH
34956: LD_VAR 0 26
34960: PUSH
34961: LD_VAR 0 27
34965: PUSH
34966: LD_VAR 0 28
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: PUSH
34979: LD_VAR 0 4
34983: PUSH
34984: LD_INT 1
34986: PLUS
34987: ARRAY
34988: ST_TO_ADDR
34989: GO 34992
34991: POP
34992: GO 35547
34994: LD_INT 2
34996: DOUBLE
34997: EQUAL
34998: IFTRUE 35008
35000: LD_INT 3
35002: DOUBLE
35003: EQUAL
35004: IFTRUE 35008
35006: GO 35064
35008: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35009: LD_ADDR_VAR 0 9
35013: PUSH
35014: LD_VAR 0 29
35018: PUSH
35019: LD_VAR 0 30
35023: PUSH
35024: LD_VAR 0 31
35028: PUSH
35029: LD_VAR 0 32
35033: PUSH
35034: LD_VAR 0 33
35038: PUSH
35039: LD_VAR 0 34
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: PUSH
35052: LD_VAR 0 4
35056: PUSH
35057: LD_INT 1
35059: PLUS
35060: ARRAY
35061: ST_TO_ADDR
35062: GO 35547
35064: LD_INT 16
35066: DOUBLE
35067: EQUAL
35068: IFTRUE 35126
35070: LD_INT 17
35072: DOUBLE
35073: EQUAL
35074: IFTRUE 35126
35076: LD_INT 18
35078: DOUBLE
35079: EQUAL
35080: IFTRUE 35126
35082: LD_INT 19
35084: DOUBLE
35085: EQUAL
35086: IFTRUE 35126
35088: LD_INT 22
35090: DOUBLE
35091: EQUAL
35092: IFTRUE 35126
35094: LD_INT 20
35096: DOUBLE
35097: EQUAL
35098: IFTRUE 35126
35100: LD_INT 21
35102: DOUBLE
35103: EQUAL
35104: IFTRUE 35126
35106: LD_INT 23
35108: DOUBLE
35109: EQUAL
35110: IFTRUE 35126
35112: LD_INT 24
35114: DOUBLE
35115: EQUAL
35116: IFTRUE 35126
35118: LD_INT 25
35120: DOUBLE
35121: EQUAL
35122: IFTRUE 35126
35124: GO 35182
35126: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35127: LD_ADDR_VAR 0 9
35131: PUSH
35132: LD_VAR 0 35
35136: PUSH
35137: LD_VAR 0 36
35141: PUSH
35142: LD_VAR 0 37
35146: PUSH
35147: LD_VAR 0 38
35151: PUSH
35152: LD_VAR 0 39
35156: PUSH
35157: LD_VAR 0 40
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: PUSH
35170: LD_VAR 0 4
35174: PUSH
35175: LD_INT 1
35177: PLUS
35178: ARRAY
35179: ST_TO_ADDR
35180: GO 35547
35182: LD_INT 6
35184: DOUBLE
35185: EQUAL
35186: IFTRUE 35238
35188: LD_INT 7
35190: DOUBLE
35191: EQUAL
35192: IFTRUE 35238
35194: LD_INT 8
35196: DOUBLE
35197: EQUAL
35198: IFTRUE 35238
35200: LD_INT 13
35202: DOUBLE
35203: EQUAL
35204: IFTRUE 35238
35206: LD_INT 12
35208: DOUBLE
35209: EQUAL
35210: IFTRUE 35238
35212: LD_INT 15
35214: DOUBLE
35215: EQUAL
35216: IFTRUE 35238
35218: LD_INT 11
35220: DOUBLE
35221: EQUAL
35222: IFTRUE 35238
35224: LD_INT 14
35226: DOUBLE
35227: EQUAL
35228: IFTRUE 35238
35230: LD_INT 10
35232: DOUBLE
35233: EQUAL
35234: IFTRUE 35238
35236: GO 35294
35238: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35239: LD_ADDR_VAR 0 9
35243: PUSH
35244: LD_VAR 0 41
35248: PUSH
35249: LD_VAR 0 42
35253: PUSH
35254: LD_VAR 0 43
35258: PUSH
35259: LD_VAR 0 44
35263: PUSH
35264: LD_VAR 0 45
35268: PUSH
35269: LD_VAR 0 46
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: PUSH
35282: LD_VAR 0 4
35286: PUSH
35287: LD_INT 1
35289: PLUS
35290: ARRAY
35291: ST_TO_ADDR
35292: GO 35547
35294: LD_INT 36
35296: DOUBLE
35297: EQUAL
35298: IFTRUE 35302
35300: GO 35358
35302: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35303: LD_ADDR_VAR 0 9
35307: PUSH
35308: LD_VAR 0 47
35312: PUSH
35313: LD_VAR 0 48
35317: PUSH
35318: LD_VAR 0 49
35322: PUSH
35323: LD_VAR 0 50
35327: PUSH
35328: LD_VAR 0 51
35332: PUSH
35333: LD_VAR 0 52
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: PUSH
35346: LD_VAR 0 4
35350: PUSH
35351: LD_INT 1
35353: PLUS
35354: ARRAY
35355: ST_TO_ADDR
35356: GO 35547
35358: LD_INT 4
35360: DOUBLE
35361: EQUAL
35362: IFTRUE 35384
35364: LD_INT 5
35366: DOUBLE
35367: EQUAL
35368: IFTRUE 35384
35370: LD_INT 34
35372: DOUBLE
35373: EQUAL
35374: IFTRUE 35384
35376: LD_INT 37
35378: DOUBLE
35379: EQUAL
35380: IFTRUE 35384
35382: GO 35440
35384: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35385: LD_ADDR_VAR 0 9
35389: PUSH
35390: LD_VAR 0 53
35394: PUSH
35395: LD_VAR 0 54
35399: PUSH
35400: LD_VAR 0 55
35404: PUSH
35405: LD_VAR 0 56
35409: PUSH
35410: LD_VAR 0 57
35414: PUSH
35415: LD_VAR 0 58
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: PUSH
35428: LD_VAR 0 4
35432: PUSH
35433: LD_INT 1
35435: PLUS
35436: ARRAY
35437: ST_TO_ADDR
35438: GO 35547
35440: LD_INT 31
35442: DOUBLE
35443: EQUAL
35444: IFTRUE 35490
35446: LD_INT 32
35448: DOUBLE
35449: EQUAL
35450: IFTRUE 35490
35452: LD_INT 33
35454: DOUBLE
35455: EQUAL
35456: IFTRUE 35490
35458: LD_INT 27
35460: DOUBLE
35461: EQUAL
35462: IFTRUE 35490
35464: LD_INT 26
35466: DOUBLE
35467: EQUAL
35468: IFTRUE 35490
35470: LD_INT 28
35472: DOUBLE
35473: EQUAL
35474: IFTRUE 35490
35476: LD_INT 29
35478: DOUBLE
35479: EQUAL
35480: IFTRUE 35490
35482: LD_INT 30
35484: DOUBLE
35485: EQUAL
35486: IFTRUE 35490
35488: GO 35546
35490: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35491: LD_ADDR_VAR 0 9
35495: PUSH
35496: LD_VAR 0 59
35500: PUSH
35501: LD_VAR 0 60
35505: PUSH
35506: LD_VAR 0 61
35510: PUSH
35511: LD_VAR 0 62
35515: PUSH
35516: LD_VAR 0 63
35520: PUSH
35521: LD_VAR 0 64
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: PUSH
35534: LD_VAR 0 4
35538: PUSH
35539: LD_INT 1
35541: PLUS
35542: ARRAY
35543: ST_TO_ADDR
35544: GO 35547
35546: POP
// temp_list2 = [ ] ;
35547: LD_ADDR_VAR 0 10
35551: PUSH
35552: EMPTY
35553: ST_TO_ADDR
// for i in temp_list do
35554: LD_ADDR_VAR 0 8
35558: PUSH
35559: LD_VAR 0 9
35563: PUSH
35564: FOR_IN
35565: IFFALSE 35617
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35567: LD_ADDR_VAR 0 10
35571: PUSH
35572: LD_VAR 0 10
35576: PUSH
35577: LD_VAR 0 8
35581: PUSH
35582: LD_INT 1
35584: ARRAY
35585: PUSH
35586: LD_VAR 0 2
35590: PLUS
35591: PUSH
35592: LD_VAR 0 8
35596: PUSH
35597: LD_INT 2
35599: ARRAY
35600: PUSH
35601: LD_VAR 0 3
35605: PLUS
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: EMPTY
35612: LIST
35613: ADD
35614: ST_TO_ADDR
35615: GO 35564
35617: POP
35618: POP
// result = temp_list2 ;
35619: LD_ADDR_VAR 0 7
35623: PUSH
35624: LD_VAR 0 10
35628: ST_TO_ADDR
// end ;
35629: LD_VAR 0 7
35633: RET
// export function EnemyInRange ( unit , dist ) ; begin
35634: LD_INT 0
35636: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35637: LD_ADDR_VAR 0 3
35641: PUSH
35642: LD_VAR 0 1
35646: PPUSH
35647: CALL_OW 255
35651: PPUSH
35652: LD_VAR 0 1
35656: PPUSH
35657: CALL_OW 250
35661: PPUSH
35662: LD_VAR 0 1
35666: PPUSH
35667: CALL_OW 251
35671: PPUSH
35672: LD_VAR 0 2
35676: PPUSH
35677: CALL 9007 0 4
35681: PUSH
35682: LD_INT 4
35684: ARRAY
35685: ST_TO_ADDR
// end ;
35686: LD_VAR 0 3
35690: RET
// export function PlayerSeeMe ( unit ) ; begin
35691: LD_INT 0
35693: PPUSH
// result := See ( your_side , unit ) ;
35694: LD_ADDR_VAR 0 2
35698: PUSH
35699: LD_OWVAR 2
35703: PPUSH
35704: LD_VAR 0 1
35708: PPUSH
35709: CALL_OW 292
35713: ST_TO_ADDR
// end ;
35714: LD_VAR 0 2
35718: RET
// export function ReverseDir ( unit ) ; begin
35719: LD_INT 0
35721: PPUSH
// if not unit then
35722: LD_VAR 0 1
35726: NOT
35727: IFFALSE 35731
// exit ;
35729: GO 35754
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35731: LD_ADDR_VAR 0 2
35735: PUSH
35736: LD_VAR 0 1
35740: PPUSH
35741: CALL_OW 254
35745: PUSH
35746: LD_INT 3
35748: PLUS
35749: PUSH
35750: LD_INT 6
35752: MOD
35753: ST_TO_ADDR
// end ;
35754: LD_VAR 0 2
35758: RET
// export function ReverseArray ( array ) ; var i ; begin
35759: LD_INT 0
35761: PPUSH
35762: PPUSH
// if not array then
35763: LD_VAR 0 1
35767: NOT
35768: IFFALSE 35772
// exit ;
35770: GO 35827
// result := [ ] ;
35772: LD_ADDR_VAR 0 2
35776: PUSH
35777: EMPTY
35778: ST_TO_ADDR
// for i := array downto 1 do
35779: LD_ADDR_VAR 0 3
35783: PUSH
35784: DOUBLE
35785: LD_VAR 0 1
35789: INC
35790: ST_TO_ADDR
35791: LD_INT 1
35793: PUSH
35794: FOR_DOWNTO
35795: IFFALSE 35825
// result := Join ( result , array [ i ] ) ;
35797: LD_ADDR_VAR 0 2
35801: PUSH
35802: LD_VAR 0 2
35806: PPUSH
35807: LD_VAR 0 1
35811: PUSH
35812: LD_VAR 0 3
35816: ARRAY
35817: PPUSH
35818: CALL 40492 0 2
35822: ST_TO_ADDR
35823: GO 35794
35825: POP
35826: POP
// end ;
35827: LD_VAR 0 2
35831: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35832: LD_INT 0
35834: PPUSH
35835: PPUSH
35836: PPUSH
35837: PPUSH
35838: PPUSH
35839: PPUSH
// if not unit or not hexes then
35840: LD_VAR 0 1
35844: NOT
35845: PUSH
35846: LD_VAR 0 2
35850: NOT
35851: OR
35852: IFFALSE 35856
// exit ;
35854: GO 35979
// dist := 9999 ;
35856: LD_ADDR_VAR 0 5
35860: PUSH
35861: LD_INT 9999
35863: ST_TO_ADDR
// for i = 1 to hexes do
35864: LD_ADDR_VAR 0 4
35868: PUSH
35869: DOUBLE
35870: LD_INT 1
35872: DEC
35873: ST_TO_ADDR
35874: LD_VAR 0 2
35878: PUSH
35879: FOR_TO
35880: IFFALSE 35967
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35882: LD_ADDR_VAR 0 6
35886: PUSH
35887: LD_VAR 0 1
35891: PPUSH
35892: LD_VAR 0 2
35896: PUSH
35897: LD_VAR 0 4
35901: ARRAY
35902: PUSH
35903: LD_INT 1
35905: ARRAY
35906: PPUSH
35907: LD_VAR 0 2
35911: PUSH
35912: LD_VAR 0 4
35916: ARRAY
35917: PUSH
35918: LD_INT 2
35920: ARRAY
35921: PPUSH
35922: CALL_OW 297
35926: ST_TO_ADDR
// if tdist < dist then
35927: LD_VAR 0 6
35931: PUSH
35932: LD_VAR 0 5
35936: LESS
35937: IFFALSE 35965
// begin hex := hexes [ i ] ;
35939: LD_ADDR_VAR 0 8
35943: PUSH
35944: LD_VAR 0 2
35948: PUSH
35949: LD_VAR 0 4
35953: ARRAY
35954: ST_TO_ADDR
// dist := tdist ;
35955: LD_ADDR_VAR 0 5
35959: PUSH
35960: LD_VAR 0 6
35964: ST_TO_ADDR
// end ; end ;
35965: GO 35879
35967: POP
35968: POP
// result := hex ;
35969: LD_ADDR_VAR 0 3
35973: PUSH
35974: LD_VAR 0 8
35978: ST_TO_ADDR
// end ;
35979: LD_VAR 0 3
35983: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35984: LD_INT 0
35986: PPUSH
35987: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35988: LD_VAR 0 1
35992: NOT
35993: PUSH
35994: LD_VAR 0 1
35998: PUSH
35999: LD_INT 21
36001: PUSH
36002: LD_INT 2
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 23
36011: PUSH
36012: LD_INT 2
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PPUSH
36023: CALL_OW 69
36027: IN
36028: NOT
36029: OR
36030: IFFALSE 36034
// exit ;
36032: GO 36081
// for i = 1 to 3 do
36034: LD_ADDR_VAR 0 3
36038: PUSH
36039: DOUBLE
36040: LD_INT 1
36042: DEC
36043: ST_TO_ADDR
36044: LD_INT 3
36046: PUSH
36047: FOR_TO
36048: IFFALSE 36079
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36050: LD_VAR 0 1
36054: PPUSH
36055: CALL_OW 250
36059: PPUSH
36060: LD_VAR 0 1
36064: PPUSH
36065: CALL_OW 251
36069: PPUSH
36070: LD_INT 1
36072: PPUSH
36073: CALL_OW 453
36077: GO 36047
36079: POP
36080: POP
// end ;
36081: LD_VAR 0 2
36085: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36086: LD_INT 0
36088: PPUSH
36089: PPUSH
36090: PPUSH
36091: PPUSH
36092: PPUSH
36093: PPUSH
// if not unit or not enemy_unit then
36094: LD_VAR 0 1
36098: NOT
36099: PUSH
36100: LD_VAR 0 2
36104: NOT
36105: OR
36106: IFFALSE 36110
// exit ;
36108: GO 36577
// if GetLives ( i ) < 250 then
36110: LD_VAR 0 4
36114: PPUSH
36115: CALL_OW 256
36119: PUSH
36120: LD_INT 250
36122: LESS
36123: IFFALSE 36136
// begin ComAutodestruct ( i ) ;
36125: LD_VAR 0 4
36129: PPUSH
36130: CALL 35984 0 1
// exit ;
36134: GO 36577
// end ; x := GetX ( enemy_unit ) ;
36136: LD_ADDR_VAR 0 7
36140: PUSH
36141: LD_VAR 0 2
36145: PPUSH
36146: CALL_OW 250
36150: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36151: LD_ADDR_VAR 0 8
36155: PUSH
36156: LD_VAR 0 2
36160: PPUSH
36161: CALL_OW 251
36165: ST_TO_ADDR
// if not x or not y then
36166: LD_VAR 0 7
36170: NOT
36171: PUSH
36172: LD_VAR 0 8
36176: NOT
36177: OR
36178: IFFALSE 36182
// exit ;
36180: GO 36577
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36182: LD_ADDR_VAR 0 6
36186: PUSH
36187: LD_VAR 0 7
36191: PPUSH
36192: LD_INT 0
36194: PPUSH
36195: LD_INT 4
36197: PPUSH
36198: CALL_OW 272
36202: PUSH
36203: LD_VAR 0 8
36207: PPUSH
36208: LD_INT 0
36210: PPUSH
36211: LD_INT 4
36213: PPUSH
36214: CALL_OW 273
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_VAR 0 7
36227: PPUSH
36228: LD_INT 1
36230: PPUSH
36231: LD_INT 4
36233: PPUSH
36234: CALL_OW 272
36238: PUSH
36239: LD_VAR 0 8
36243: PPUSH
36244: LD_INT 1
36246: PPUSH
36247: LD_INT 4
36249: PPUSH
36250: CALL_OW 273
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_VAR 0 7
36263: PPUSH
36264: LD_INT 2
36266: PPUSH
36267: LD_INT 4
36269: PPUSH
36270: CALL_OW 272
36274: PUSH
36275: LD_VAR 0 8
36279: PPUSH
36280: LD_INT 2
36282: PPUSH
36283: LD_INT 4
36285: PPUSH
36286: CALL_OW 273
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_VAR 0 7
36299: PPUSH
36300: LD_INT 3
36302: PPUSH
36303: LD_INT 4
36305: PPUSH
36306: CALL_OW 272
36310: PUSH
36311: LD_VAR 0 8
36315: PPUSH
36316: LD_INT 3
36318: PPUSH
36319: LD_INT 4
36321: PPUSH
36322: CALL_OW 273
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_VAR 0 7
36335: PPUSH
36336: LD_INT 4
36338: PPUSH
36339: LD_INT 4
36341: PPUSH
36342: CALL_OW 272
36346: PUSH
36347: LD_VAR 0 8
36351: PPUSH
36352: LD_INT 4
36354: PPUSH
36355: LD_INT 4
36357: PPUSH
36358: CALL_OW 273
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_VAR 0 7
36371: PPUSH
36372: LD_INT 5
36374: PPUSH
36375: LD_INT 4
36377: PPUSH
36378: CALL_OW 272
36382: PUSH
36383: LD_VAR 0 8
36387: PPUSH
36388: LD_INT 5
36390: PPUSH
36391: LD_INT 4
36393: PPUSH
36394: CALL_OW 273
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: ST_TO_ADDR
// for i = tmp downto 1 do
36411: LD_ADDR_VAR 0 4
36415: PUSH
36416: DOUBLE
36417: LD_VAR 0 6
36421: INC
36422: ST_TO_ADDR
36423: LD_INT 1
36425: PUSH
36426: FOR_DOWNTO
36427: IFFALSE 36528
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36429: LD_VAR 0 6
36433: PUSH
36434: LD_VAR 0 4
36438: ARRAY
36439: PUSH
36440: LD_INT 1
36442: ARRAY
36443: PPUSH
36444: LD_VAR 0 6
36448: PUSH
36449: LD_VAR 0 4
36453: ARRAY
36454: PUSH
36455: LD_INT 2
36457: ARRAY
36458: PPUSH
36459: CALL_OW 488
36463: NOT
36464: PUSH
36465: LD_VAR 0 6
36469: PUSH
36470: LD_VAR 0 4
36474: ARRAY
36475: PUSH
36476: LD_INT 1
36478: ARRAY
36479: PPUSH
36480: LD_VAR 0 6
36484: PUSH
36485: LD_VAR 0 4
36489: ARRAY
36490: PUSH
36491: LD_INT 2
36493: ARRAY
36494: PPUSH
36495: CALL_OW 428
36499: PUSH
36500: LD_INT 0
36502: NONEQUAL
36503: OR
36504: IFFALSE 36526
// tmp := Delete ( tmp , i ) ;
36506: LD_ADDR_VAR 0 6
36510: PUSH
36511: LD_VAR 0 6
36515: PPUSH
36516: LD_VAR 0 4
36520: PPUSH
36521: CALL_OW 3
36525: ST_TO_ADDR
36526: GO 36426
36528: POP
36529: POP
// j := GetClosestHex ( unit , tmp ) ;
36530: LD_ADDR_VAR 0 5
36534: PUSH
36535: LD_VAR 0 1
36539: PPUSH
36540: LD_VAR 0 6
36544: PPUSH
36545: CALL 35832 0 2
36549: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36550: LD_VAR 0 1
36554: PPUSH
36555: LD_VAR 0 5
36559: PUSH
36560: LD_INT 1
36562: ARRAY
36563: PPUSH
36564: LD_VAR 0 5
36568: PUSH
36569: LD_INT 2
36571: ARRAY
36572: PPUSH
36573: CALL_OW 111
// end ;
36577: LD_VAR 0 3
36581: RET
// export function PrepareApemanSoldier ( ) ; begin
36582: LD_INT 0
36584: PPUSH
// uc_nation := 0 ;
36585: LD_ADDR_OWVAR 21
36589: PUSH
36590: LD_INT 0
36592: ST_TO_ADDR
// hc_sex := sex_male ;
36593: LD_ADDR_OWVAR 27
36597: PUSH
36598: LD_INT 1
36600: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36601: LD_ADDR_OWVAR 28
36605: PUSH
36606: LD_INT 15
36608: ST_TO_ADDR
// hc_gallery :=  ;
36609: LD_ADDR_OWVAR 33
36613: PUSH
36614: LD_STRING 
36616: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36617: LD_ADDR_OWVAR 31
36621: PUSH
36622: LD_INT 0
36624: PPUSH
36625: LD_INT 3
36627: PPUSH
36628: CALL_OW 12
36632: PUSH
36633: LD_INT 0
36635: PPUSH
36636: LD_INT 3
36638: PPUSH
36639: CALL_OW 12
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: LD_INT 0
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// end ;
36656: LD_VAR 0 1
36660: RET
// export function PrepareApemanEngineer ( ) ; begin
36661: LD_INT 0
36663: PPUSH
// uc_nation := 0 ;
36664: LD_ADDR_OWVAR 21
36668: PUSH
36669: LD_INT 0
36671: ST_TO_ADDR
// hc_sex := sex_male ;
36672: LD_ADDR_OWVAR 27
36676: PUSH
36677: LD_INT 1
36679: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36680: LD_ADDR_OWVAR 28
36684: PUSH
36685: LD_INT 16
36687: ST_TO_ADDR
// hc_gallery :=  ;
36688: LD_ADDR_OWVAR 33
36692: PUSH
36693: LD_STRING 
36695: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36696: LD_ADDR_OWVAR 31
36700: PUSH
36701: LD_INT 0
36703: PPUSH
36704: LD_INT 3
36706: PPUSH
36707: CALL_OW 12
36711: PUSH
36712: LD_INT 0
36714: PPUSH
36715: LD_INT 3
36717: PPUSH
36718: CALL_OW 12
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: ST_TO_ADDR
// end ;
36735: LD_VAR 0 1
36739: RET
// export function PrepareApeman ( agressivity ) ; begin
36740: LD_INT 0
36742: PPUSH
// uc_side := 0 ;
36743: LD_ADDR_OWVAR 20
36747: PUSH
36748: LD_INT 0
36750: ST_TO_ADDR
// uc_nation := 0 ;
36751: LD_ADDR_OWVAR 21
36755: PUSH
36756: LD_INT 0
36758: ST_TO_ADDR
// hc_sex := sex_male ;
36759: LD_ADDR_OWVAR 27
36763: PUSH
36764: LD_INT 1
36766: ST_TO_ADDR
// hc_class := class_apeman ;
36767: LD_ADDR_OWVAR 28
36771: PUSH
36772: LD_INT 12
36774: ST_TO_ADDR
// hc_gallery :=  ;
36775: LD_ADDR_OWVAR 33
36779: PUSH
36780: LD_STRING 
36782: ST_TO_ADDR
// if agressivity = 0 then
36783: LD_VAR 0 1
36787: PUSH
36788: LD_INT 0
36790: EQUAL
36791: IFFALSE 36803
// hc_agressivity := 0 else
36793: LD_ADDR_OWVAR 35
36797: PUSH
36798: LD_INT 0
36800: ST_TO_ADDR
36801: GO 36824
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36803: LD_ADDR_OWVAR 35
36807: PUSH
36808: LD_VAR 0 1
36812: NEG
36813: PPUSH
36814: LD_VAR 0 1
36818: PPUSH
36819: CALL_OW 12
36823: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36824: LD_ADDR_OWVAR 31
36828: PUSH
36829: LD_INT 0
36831: PPUSH
36832: LD_INT 3
36834: PPUSH
36835: CALL_OW 12
36839: PUSH
36840: LD_INT 0
36842: PPUSH
36843: LD_INT 3
36845: PPUSH
36846: CALL_OW 12
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: LD_INT 0
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: ST_TO_ADDR
// end ;
36863: LD_VAR 0 2
36867: RET
// export function PrepareTiger ( agressivity ) ; begin
36868: LD_INT 0
36870: PPUSH
// uc_side := 0 ;
36871: LD_ADDR_OWVAR 20
36875: PUSH
36876: LD_INT 0
36878: ST_TO_ADDR
// uc_nation := 0 ;
36879: LD_ADDR_OWVAR 21
36883: PUSH
36884: LD_INT 0
36886: ST_TO_ADDR
// hc_class := class_tiger ;
36887: LD_ADDR_OWVAR 28
36891: PUSH
36892: LD_INT 14
36894: ST_TO_ADDR
// hc_gallery :=  ;
36895: LD_ADDR_OWVAR 33
36899: PUSH
36900: LD_STRING 
36902: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36903: LD_ADDR_OWVAR 35
36907: PUSH
36908: LD_VAR 0 1
36912: NEG
36913: PPUSH
36914: LD_VAR 0 1
36918: PPUSH
36919: CALL_OW 12
36923: ST_TO_ADDR
// end ;
36924: LD_VAR 0 2
36928: RET
// export function PrepareEnchidna ( ) ; begin
36929: LD_INT 0
36931: PPUSH
// uc_side := 0 ;
36932: LD_ADDR_OWVAR 20
36936: PUSH
36937: LD_INT 0
36939: ST_TO_ADDR
// uc_nation := 0 ;
36940: LD_ADDR_OWVAR 21
36944: PUSH
36945: LD_INT 0
36947: ST_TO_ADDR
// hc_class := class_baggie ;
36948: LD_ADDR_OWVAR 28
36952: PUSH
36953: LD_INT 13
36955: ST_TO_ADDR
// hc_gallery :=  ;
36956: LD_ADDR_OWVAR 33
36960: PUSH
36961: LD_STRING 
36963: ST_TO_ADDR
// end ;
36964: LD_VAR 0 1
36968: RET
// export function PrepareFrog ( ) ; begin
36969: LD_INT 0
36971: PPUSH
// uc_side := 0 ;
36972: LD_ADDR_OWVAR 20
36976: PUSH
36977: LD_INT 0
36979: ST_TO_ADDR
// uc_nation := 0 ;
36980: LD_ADDR_OWVAR 21
36984: PUSH
36985: LD_INT 0
36987: ST_TO_ADDR
// hc_class := class_frog ;
36988: LD_ADDR_OWVAR 28
36992: PUSH
36993: LD_INT 19
36995: ST_TO_ADDR
// hc_gallery :=  ;
36996: LD_ADDR_OWVAR 33
37000: PUSH
37001: LD_STRING 
37003: ST_TO_ADDR
// end ;
37004: LD_VAR 0 1
37008: RET
// export function PrepareFish ( ) ; begin
37009: LD_INT 0
37011: PPUSH
// uc_side := 0 ;
37012: LD_ADDR_OWVAR 20
37016: PUSH
37017: LD_INT 0
37019: ST_TO_ADDR
// uc_nation := 0 ;
37020: LD_ADDR_OWVAR 21
37024: PUSH
37025: LD_INT 0
37027: ST_TO_ADDR
// hc_class := class_fish ;
37028: LD_ADDR_OWVAR 28
37032: PUSH
37033: LD_INT 20
37035: ST_TO_ADDR
// hc_gallery :=  ;
37036: LD_ADDR_OWVAR 33
37040: PUSH
37041: LD_STRING 
37043: ST_TO_ADDR
// end ;
37044: LD_VAR 0 1
37048: RET
// export function PrepareBird ( ) ; begin
37049: LD_INT 0
37051: PPUSH
// uc_side := 0 ;
37052: LD_ADDR_OWVAR 20
37056: PUSH
37057: LD_INT 0
37059: ST_TO_ADDR
// uc_nation := 0 ;
37060: LD_ADDR_OWVAR 21
37064: PUSH
37065: LD_INT 0
37067: ST_TO_ADDR
// hc_class := class_phororhacos ;
37068: LD_ADDR_OWVAR 28
37072: PUSH
37073: LD_INT 18
37075: ST_TO_ADDR
// hc_gallery :=  ;
37076: LD_ADDR_OWVAR 33
37080: PUSH
37081: LD_STRING 
37083: ST_TO_ADDR
// end ;
37084: LD_VAR 0 1
37088: RET
// export function PrepareHorse ( ) ; begin
37089: LD_INT 0
37091: PPUSH
// uc_side := 0 ;
37092: LD_ADDR_OWVAR 20
37096: PUSH
37097: LD_INT 0
37099: ST_TO_ADDR
// uc_nation := 0 ;
37100: LD_ADDR_OWVAR 21
37104: PUSH
37105: LD_INT 0
37107: ST_TO_ADDR
// hc_class := class_horse ;
37108: LD_ADDR_OWVAR 28
37112: PUSH
37113: LD_INT 21
37115: ST_TO_ADDR
// hc_gallery :=  ;
37116: LD_ADDR_OWVAR 33
37120: PUSH
37121: LD_STRING 
37123: ST_TO_ADDR
// end ;
37124: LD_VAR 0 1
37128: RET
// export function PrepareMastodont ( ) ; begin
37129: LD_INT 0
37131: PPUSH
// uc_side := 0 ;
37132: LD_ADDR_OWVAR 20
37136: PUSH
37137: LD_INT 0
37139: ST_TO_ADDR
// uc_nation := 0 ;
37140: LD_ADDR_OWVAR 21
37144: PUSH
37145: LD_INT 0
37147: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37148: LD_ADDR_OWVAR 37
37152: PUSH
37153: LD_INT 31
37155: ST_TO_ADDR
// vc_control := control_rider ;
37156: LD_ADDR_OWVAR 38
37160: PUSH
37161: LD_INT 4
37163: ST_TO_ADDR
// end ;
37164: LD_VAR 0 1
37168: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37169: LD_INT 0
37171: PPUSH
37172: PPUSH
37173: PPUSH
// uc_side = 0 ;
37174: LD_ADDR_OWVAR 20
37178: PUSH
37179: LD_INT 0
37181: ST_TO_ADDR
// uc_nation = 0 ;
37182: LD_ADDR_OWVAR 21
37186: PUSH
37187: LD_INT 0
37189: ST_TO_ADDR
// InitHc_All ( ) ;
37190: CALL_OW 584
// InitVc ;
37194: CALL_OW 20
// if mastodonts then
37198: LD_VAR 0 6
37202: IFFALSE 37269
// for i = 1 to mastodonts do
37204: LD_ADDR_VAR 0 11
37208: PUSH
37209: DOUBLE
37210: LD_INT 1
37212: DEC
37213: ST_TO_ADDR
37214: LD_VAR 0 6
37218: PUSH
37219: FOR_TO
37220: IFFALSE 37267
// begin vc_chassis := 31 ;
37222: LD_ADDR_OWVAR 37
37226: PUSH
37227: LD_INT 31
37229: ST_TO_ADDR
// vc_control := control_rider ;
37230: LD_ADDR_OWVAR 38
37234: PUSH
37235: LD_INT 4
37237: ST_TO_ADDR
// animal := CreateVehicle ;
37238: LD_ADDR_VAR 0 12
37242: PUSH
37243: CALL_OW 45
37247: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37248: LD_VAR 0 12
37252: PPUSH
37253: LD_VAR 0 8
37257: PPUSH
37258: LD_INT 0
37260: PPUSH
37261: CALL 39397 0 3
// end ;
37265: GO 37219
37267: POP
37268: POP
// if horses then
37269: LD_VAR 0 5
37273: IFFALSE 37340
// for i = 1 to horses do
37275: LD_ADDR_VAR 0 11
37279: PUSH
37280: DOUBLE
37281: LD_INT 1
37283: DEC
37284: ST_TO_ADDR
37285: LD_VAR 0 5
37289: PUSH
37290: FOR_TO
37291: IFFALSE 37338
// begin hc_class := 21 ;
37293: LD_ADDR_OWVAR 28
37297: PUSH
37298: LD_INT 21
37300: ST_TO_ADDR
// hc_gallery :=  ;
37301: LD_ADDR_OWVAR 33
37305: PUSH
37306: LD_STRING 
37308: ST_TO_ADDR
// animal := CreateHuman ;
37309: LD_ADDR_VAR 0 12
37313: PUSH
37314: CALL_OW 44
37318: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37319: LD_VAR 0 12
37323: PPUSH
37324: LD_VAR 0 8
37328: PPUSH
37329: LD_INT 0
37331: PPUSH
37332: CALL 39397 0 3
// end ;
37336: GO 37290
37338: POP
37339: POP
// if birds then
37340: LD_VAR 0 1
37344: IFFALSE 37411
// for i = 1 to birds do
37346: LD_ADDR_VAR 0 11
37350: PUSH
37351: DOUBLE
37352: LD_INT 1
37354: DEC
37355: ST_TO_ADDR
37356: LD_VAR 0 1
37360: PUSH
37361: FOR_TO
37362: IFFALSE 37409
// begin hc_class := 18 ;
37364: LD_ADDR_OWVAR 28
37368: PUSH
37369: LD_INT 18
37371: ST_TO_ADDR
// hc_gallery =  ;
37372: LD_ADDR_OWVAR 33
37376: PUSH
37377: LD_STRING 
37379: ST_TO_ADDR
// animal := CreateHuman ;
37380: LD_ADDR_VAR 0 12
37384: PUSH
37385: CALL_OW 44
37389: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37390: LD_VAR 0 12
37394: PPUSH
37395: LD_VAR 0 8
37399: PPUSH
37400: LD_INT 0
37402: PPUSH
37403: CALL 39397 0 3
// end ;
37407: GO 37361
37409: POP
37410: POP
// if tigers then
37411: LD_VAR 0 2
37415: IFFALSE 37499
// for i = 1 to tigers do
37417: LD_ADDR_VAR 0 11
37421: PUSH
37422: DOUBLE
37423: LD_INT 1
37425: DEC
37426: ST_TO_ADDR
37427: LD_VAR 0 2
37431: PUSH
37432: FOR_TO
37433: IFFALSE 37497
// begin hc_class = class_tiger ;
37435: LD_ADDR_OWVAR 28
37439: PUSH
37440: LD_INT 14
37442: ST_TO_ADDR
// hc_gallery =  ;
37443: LD_ADDR_OWVAR 33
37447: PUSH
37448: LD_STRING 
37450: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37451: LD_ADDR_OWVAR 35
37455: PUSH
37456: LD_INT 7
37458: NEG
37459: PPUSH
37460: LD_INT 7
37462: PPUSH
37463: CALL_OW 12
37467: ST_TO_ADDR
// animal := CreateHuman ;
37468: LD_ADDR_VAR 0 12
37472: PUSH
37473: CALL_OW 44
37477: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37478: LD_VAR 0 12
37482: PPUSH
37483: LD_VAR 0 8
37487: PPUSH
37488: LD_INT 0
37490: PPUSH
37491: CALL 39397 0 3
// end ;
37495: GO 37432
37497: POP
37498: POP
// if apemans then
37499: LD_VAR 0 3
37503: IFFALSE 37626
// for i = 1 to apemans do
37505: LD_ADDR_VAR 0 11
37509: PUSH
37510: DOUBLE
37511: LD_INT 1
37513: DEC
37514: ST_TO_ADDR
37515: LD_VAR 0 3
37519: PUSH
37520: FOR_TO
37521: IFFALSE 37624
// begin hc_class = class_apeman ;
37523: LD_ADDR_OWVAR 28
37527: PUSH
37528: LD_INT 12
37530: ST_TO_ADDR
// hc_gallery =  ;
37531: LD_ADDR_OWVAR 33
37535: PUSH
37536: LD_STRING 
37538: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37539: LD_ADDR_OWVAR 35
37543: PUSH
37544: LD_INT 2
37546: NEG
37547: PPUSH
37548: LD_INT 2
37550: PPUSH
37551: CALL_OW 12
37555: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37556: LD_ADDR_OWVAR 31
37560: PUSH
37561: LD_INT 1
37563: PPUSH
37564: LD_INT 3
37566: PPUSH
37567: CALL_OW 12
37571: PUSH
37572: LD_INT 1
37574: PPUSH
37575: LD_INT 3
37577: PPUSH
37578: CALL_OW 12
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: ST_TO_ADDR
// animal := CreateHuman ;
37595: LD_ADDR_VAR 0 12
37599: PUSH
37600: CALL_OW 44
37604: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37605: LD_VAR 0 12
37609: PPUSH
37610: LD_VAR 0 8
37614: PPUSH
37615: LD_INT 0
37617: PPUSH
37618: CALL 39397 0 3
// end ;
37622: GO 37520
37624: POP
37625: POP
// if enchidnas then
37626: LD_VAR 0 4
37630: IFFALSE 37697
// for i = 1 to enchidnas do
37632: LD_ADDR_VAR 0 11
37636: PUSH
37637: DOUBLE
37638: LD_INT 1
37640: DEC
37641: ST_TO_ADDR
37642: LD_VAR 0 4
37646: PUSH
37647: FOR_TO
37648: IFFALSE 37695
// begin hc_class = 13 ;
37650: LD_ADDR_OWVAR 28
37654: PUSH
37655: LD_INT 13
37657: ST_TO_ADDR
// hc_gallery =  ;
37658: LD_ADDR_OWVAR 33
37662: PUSH
37663: LD_STRING 
37665: ST_TO_ADDR
// animal := CreateHuman ;
37666: LD_ADDR_VAR 0 12
37670: PUSH
37671: CALL_OW 44
37675: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37676: LD_VAR 0 12
37680: PPUSH
37681: LD_VAR 0 8
37685: PPUSH
37686: LD_INT 0
37688: PPUSH
37689: CALL 39397 0 3
// end ;
37693: GO 37647
37695: POP
37696: POP
// if fishes then
37697: LD_VAR 0 7
37701: IFFALSE 37768
// for i = 1 to fishes do
37703: LD_ADDR_VAR 0 11
37707: PUSH
37708: DOUBLE
37709: LD_INT 1
37711: DEC
37712: ST_TO_ADDR
37713: LD_VAR 0 7
37717: PUSH
37718: FOR_TO
37719: IFFALSE 37766
// begin hc_class = 20 ;
37721: LD_ADDR_OWVAR 28
37725: PUSH
37726: LD_INT 20
37728: ST_TO_ADDR
// hc_gallery =  ;
37729: LD_ADDR_OWVAR 33
37733: PUSH
37734: LD_STRING 
37736: ST_TO_ADDR
// animal := CreateHuman ;
37737: LD_ADDR_VAR 0 12
37741: PUSH
37742: CALL_OW 44
37746: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37747: LD_VAR 0 12
37751: PPUSH
37752: LD_VAR 0 9
37756: PPUSH
37757: LD_INT 0
37759: PPUSH
37760: CALL 39397 0 3
// end ;
37764: GO 37718
37766: POP
37767: POP
// end ;
37768: LD_VAR 0 10
37772: RET
// export function WantHeal ( sci , unit ) ; begin
37773: LD_INT 0
37775: PPUSH
// if GetTaskList ( sci ) > 0 then
37776: LD_VAR 0 1
37780: PPUSH
37781: CALL_OW 437
37785: PUSH
37786: LD_INT 0
37788: GREATER
37789: IFFALSE 37859
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37791: LD_VAR 0 1
37795: PPUSH
37796: CALL_OW 437
37800: PUSH
37801: LD_INT 1
37803: ARRAY
37804: PUSH
37805: LD_INT 1
37807: ARRAY
37808: PUSH
37809: LD_STRING l
37811: EQUAL
37812: PUSH
37813: LD_VAR 0 1
37817: PPUSH
37818: CALL_OW 437
37822: PUSH
37823: LD_INT 1
37825: ARRAY
37826: PUSH
37827: LD_INT 4
37829: ARRAY
37830: PUSH
37831: LD_VAR 0 2
37835: EQUAL
37836: AND
37837: IFFALSE 37849
// result := true else
37839: LD_ADDR_VAR 0 3
37843: PUSH
37844: LD_INT 1
37846: ST_TO_ADDR
37847: GO 37857
// result := false ;
37849: LD_ADDR_VAR 0 3
37853: PUSH
37854: LD_INT 0
37856: ST_TO_ADDR
// end else
37857: GO 37867
// result := false ;
37859: LD_ADDR_VAR 0 3
37863: PUSH
37864: LD_INT 0
37866: ST_TO_ADDR
// end ;
37867: LD_VAR 0 3
37871: RET
// export function HealTarget ( sci ) ; begin
37872: LD_INT 0
37874: PPUSH
// if not sci then
37875: LD_VAR 0 1
37879: NOT
37880: IFFALSE 37884
// exit ;
37882: GO 37949
// result := 0 ;
37884: LD_ADDR_VAR 0 2
37888: PUSH
37889: LD_INT 0
37891: ST_TO_ADDR
// if GetTaskList ( sci ) then
37892: LD_VAR 0 1
37896: PPUSH
37897: CALL_OW 437
37901: IFFALSE 37949
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37903: LD_VAR 0 1
37907: PPUSH
37908: CALL_OW 437
37912: PUSH
37913: LD_INT 1
37915: ARRAY
37916: PUSH
37917: LD_INT 1
37919: ARRAY
37920: PUSH
37921: LD_STRING l
37923: EQUAL
37924: IFFALSE 37949
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37926: LD_ADDR_VAR 0 2
37930: PUSH
37931: LD_VAR 0 1
37935: PPUSH
37936: CALL_OW 437
37940: PUSH
37941: LD_INT 1
37943: ARRAY
37944: PUSH
37945: LD_INT 4
37947: ARRAY
37948: ST_TO_ADDR
// end ;
37949: LD_VAR 0 2
37953: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37954: LD_INT 0
37956: PPUSH
37957: PPUSH
37958: PPUSH
37959: PPUSH
// if not base_units then
37960: LD_VAR 0 1
37964: NOT
37965: IFFALSE 37969
// exit ;
37967: GO 38056
// result := false ;
37969: LD_ADDR_VAR 0 2
37973: PUSH
37974: LD_INT 0
37976: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37977: LD_ADDR_VAR 0 5
37981: PUSH
37982: LD_VAR 0 1
37986: PPUSH
37987: LD_INT 21
37989: PUSH
37990: LD_INT 3
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PPUSH
37997: CALL_OW 72
38001: ST_TO_ADDR
// if not tmp then
38002: LD_VAR 0 5
38006: NOT
38007: IFFALSE 38011
// exit ;
38009: GO 38056
// for i in tmp do
38011: LD_ADDR_VAR 0 3
38015: PUSH
38016: LD_VAR 0 5
38020: PUSH
38021: FOR_IN
38022: IFFALSE 38054
// begin result := EnemyInRange ( i , 22 ) ;
38024: LD_ADDR_VAR 0 2
38028: PUSH
38029: LD_VAR 0 3
38033: PPUSH
38034: LD_INT 22
38036: PPUSH
38037: CALL 35634 0 2
38041: ST_TO_ADDR
// if result then
38042: LD_VAR 0 2
38046: IFFALSE 38052
// exit ;
38048: POP
38049: POP
38050: GO 38056
// end ;
38052: GO 38021
38054: POP
38055: POP
// end ;
38056: LD_VAR 0 2
38060: RET
// export function FilterByTag ( units , tag ) ; begin
38061: LD_INT 0
38063: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38064: LD_ADDR_VAR 0 3
38068: PUSH
38069: LD_VAR 0 1
38073: PPUSH
38074: LD_INT 120
38076: PUSH
38077: LD_VAR 0 2
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PPUSH
38086: CALL_OW 72
38090: ST_TO_ADDR
// end ;
38091: LD_VAR 0 3
38095: RET
// export function IsDriver ( un ) ; begin
38096: LD_INT 0
38098: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38099: LD_ADDR_VAR 0 2
38103: PUSH
38104: LD_VAR 0 1
38108: PUSH
38109: LD_INT 55
38111: PUSH
38112: EMPTY
38113: LIST
38114: PPUSH
38115: CALL_OW 69
38119: IN
38120: ST_TO_ADDR
// end ;
38121: LD_VAR 0 2
38125: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38126: LD_INT 0
38128: PPUSH
38129: PPUSH
// list := [ ] ;
38130: LD_ADDR_VAR 0 5
38134: PUSH
38135: EMPTY
38136: ST_TO_ADDR
// case d of 0 :
38137: LD_VAR 0 3
38141: PUSH
38142: LD_INT 0
38144: DOUBLE
38145: EQUAL
38146: IFTRUE 38150
38148: GO 38283
38150: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38151: LD_ADDR_VAR 0 5
38155: PUSH
38156: LD_VAR 0 1
38160: PUSH
38161: LD_INT 4
38163: MINUS
38164: PUSH
38165: LD_VAR 0 2
38169: PUSH
38170: LD_INT 4
38172: MINUS
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: LIST
38181: PUSH
38182: LD_VAR 0 1
38186: PUSH
38187: LD_INT 3
38189: MINUS
38190: PUSH
38191: LD_VAR 0 2
38195: PUSH
38196: LD_INT 1
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: LIST
38203: PUSH
38204: LD_VAR 0 1
38208: PUSH
38209: LD_INT 4
38211: PLUS
38212: PUSH
38213: LD_VAR 0 2
38217: PUSH
38218: LD_INT 4
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: LIST
38225: PUSH
38226: LD_VAR 0 1
38230: PUSH
38231: LD_INT 3
38233: PLUS
38234: PUSH
38235: LD_VAR 0 2
38239: PUSH
38240: LD_INT 3
38242: PLUS
38243: PUSH
38244: LD_INT 5
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: LIST
38251: PUSH
38252: LD_VAR 0 1
38256: PUSH
38257: LD_VAR 0 2
38261: PUSH
38262: LD_INT 4
38264: PLUS
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: ST_TO_ADDR
// end ; 1 :
38281: GO 38981
38283: LD_INT 1
38285: DOUBLE
38286: EQUAL
38287: IFTRUE 38291
38289: GO 38424
38291: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38292: LD_ADDR_VAR 0 5
38296: PUSH
38297: LD_VAR 0 1
38301: PUSH
38302: LD_VAR 0 2
38306: PUSH
38307: LD_INT 4
38309: MINUS
38310: PUSH
38311: LD_INT 3
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: LIST
38318: PUSH
38319: LD_VAR 0 1
38323: PUSH
38324: LD_INT 3
38326: MINUS
38327: PUSH
38328: LD_VAR 0 2
38332: PUSH
38333: LD_INT 3
38335: MINUS
38336: PUSH
38337: LD_INT 2
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: LIST
38344: PUSH
38345: LD_VAR 0 1
38349: PUSH
38350: LD_INT 4
38352: MINUS
38353: PUSH
38354: LD_VAR 0 2
38358: PUSH
38359: LD_INT 1
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: PUSH
38367: LD_VAR 0 1
38371: PUSH
38372: LD_VAR 0 2
38376: PUSH
38377: LD_INT 3
38379: PLUS
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: LIST
38388: PUSH
38389: LD_VAR 0 1
38393: PUSH
38394: LD_INT 4
38396: PLUS
38397: PUSH
38398: LD_VAR 0 2
38402: PUSH
38403: LD_INT 4
38405: PLUS
38406: PUSH
38407: LD_INT 5
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: LIST
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: ST_TO_ADDR
// end ; 2 :
38422: GO 38981
38424: LD_INT 2
38426: DOUBLE
38427: EQUAL
38428: IFTRUE 38432
38430: GO 38561
38432: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38433: LD_ADDR_VAR 0 5
38437: PUSH
38438: LD_VAR 0 1
38442: PUSH
38443: LD_VAR 0 2
38447: PUSH
38448: LD_INT 3
38450: MINUS
38451: PUSH
38452: LD_INT 3
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: LIST
38459: PUSH
38460: LD_VAR 0 1
38464: PUSH
38465: LD_INT 4
38467: PLUS
38468: PUSH
38469: LD_VAR 0 2
38473: PUSH
38474: LD_INT 4
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: LIST
38481: PUSH
38482: LD_VAR 0 1
38486: PUSH
38487: LD_VAR 0 2
38491: PUSH
38492: LD_INT 4
38494: PLUS
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: LIST
38503: PUSH
38504: LD_VAR 0 1
38508: PUSH
38509: LD_INT 3
38511: MINUS
38512: PUSH
38513: LD_VAR 0 2
38517: PUSH
38518: LD_INT 1
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: LIST
38525: PUSH
38526: LD_VAR 0 1
38530: PUSH
38531: LD_INT 4
38533: MINUS
38534: PUSH
38535: LD_VAR 0 2
38539: PUSH
38540: LD_INT 4
38542: MINUS
38543: PUSH
38544: LD_INT 2
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: LIST
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: ST_TO_ADDR
// end ; 3 :
38559: GO 38981
38561: LD_INT 3
38563: DOUBLE
38564: EQUAL
38565: IFTRUE 38569
38567: GO 38702
38569: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38570: LD_ADDR_VAR 0 5
38574: PUSH
38575: LD_VAR 0 1
38579: PUSH
38580: LD_INT 3
38582: PLUS
38583: PUSH
38584: LD_VAR 0 2
38588: PUSH
38589: LD_INT 4
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: LIST
38596: PUSH
38597: LD_VAR 0 1
38601: PUSH
38602: LD_INT 4
38604: PLUS
38605: PUSH
38606: LD_VAR 0 2
38610: PUSH
38611: LD_INT 4
38613: PLUS
38614: PUSH
38615: LD_INT 5
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: PUSH
38623: LD_VAR 0 1
38627: PUSH
38628: LD_INT 4
38630: MINUS
38631: PUSH
38632: LD_VAR 0 2
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: PUSH
38645: LD_VAR 0 1
38649: PUSH
38650: LD_VAR 0 2
38654: PUSH
38655: LD_INT 4
38657: MINUS
38658: PUSH
38659: LD_INT 3
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: LIST
38666: PUSH
38667: LD_VAR 0 1
38671: PUSH
38672: LD_INT 3
38674: MINUS
38675: PUSH
38676: LD_VAR 0 2
38680: PUSH
38681: LD_INT 3
38683: MINUS
38684: PUSH
38685: LD_INT 2
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: LIST
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: ST_TO_ADDR
// end ; 4 :
38700: GO 38981
38702: LD_INT 4
38704: DOUBLE
38705: EQUAL
38706: IFTRUE 38710
38708: GO 38843
38710: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38711: LD_ADDR_VAR 0 5
38715: PUSH
38716: LD_VAR 0 1
38720: PUSH
38721: LD_VAR 0 2
38725: PUSH
38726: LD_INT 4
38728: PLUS
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: LIST
38737: PUSH
38738: LD_VAR 0 1
38742: PUSH
38743: LD_INT 3
38745: PLUS
38746: PUSH
38747: LD_VAR 0 2
38751: PUSH
38752: LD_INT 3
38754: PLUS
38755: PUSH
38756: LD_INT 5
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: LIST
38763: PUSH
38764: LD_VAR 0 1
38768: PUSH
38769: LD_INT 4
38771: PLUS
38772: PUSH
38773: LD_VAR 0 2
38777: PUSH
38778: LD_INT 4
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: LIST
38785: PUSH
38786: LD_VAR 0 1
38790: PUSH
38791: LD_VAR 0 2
38795: PUSH
38796: LD_INT 3
38798: MINUS
38799: PUSH
38800: LD_INT 3
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: LIST
38807: PUSH
38808: LD_VAR 0 1
38812: PUSH
38813: LD_INT 4
38815: MINUS
38816: PUSH
38817: LD_VAR 0 2
38821: PUSH
38822: LD_INT 4
38824: MINUS
38825: PUSH
38826: LD_INT 2
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: ST_TO_ADDR
// end ; 5 :
38841: GO 38981
38843: LD_INT 5
38845: DOUBLE
38846: EQUAL
38847: IFTRUE 38851
38849: GO 38980
38851: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38852: LD_ADDR_VAR 0 5
38856: PUSH
38857: LD_VAR 0 1
38861: PUSH
38862: LD_INT 4
38864: MINUS
38865: PUSH
38866: LD_VAR 0 2
38870: PUSH
38871: LD_INT 1
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: LIST
38878: PUSH
38879: LD_VAR 0 1
38883: PUSH
38884: LD_VAR 0 2
38888: PUSH
38889: LD_INT 4
38891: MINUS
38892: PUSH
38893: LD_INT 3
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: LIST
38900: PUSH
38901: LD_VAR 0 1
38905: PUSH
38906: LD_INT 4
38908: PLUS
38909: PUSH
38910: LD_VAR 0 2
38914: PUSH
38915: LD_INT 4
38917: PLUS
38918: PUSH
38919: LD_INT 5
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: LIST
38926: PUSH
38927: LD_VAR 0 1
38931: PUSH
38932: LD_INT 3
38934: PLUS
38935: PUSH
38936: LD_VAR 0 2
38940: PUSH
38941: LD_INT 4
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: LIST
38948: PUSH
38949: LD_VAR 0 1
38953: PUSH
38954: LD_VAR 0 2
38958: PUSH
38959: LD_INT 3
38961: PLUS
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: LIST
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: ST_TO_ADDR
// end ; end ;
38978: GO 38981
38980: POP
// result := list ;
38981: LD_ADDR_VAR 0 4
38985: PUSH
38986: LD_VAR 0 5
38990: ST_TO_ADDR
// end ;
38991: LD_VAR 0 4
38995: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38996: LD_INT 0
38998: PPUSH
38999: PPUSH
39000: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39001: LD_VAR 0 1
39005: NOT
39006: PUSH
39007: LD_VAR 0 2
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: LD_INT 2
39017: PUSH
39018: LD_INT 3
39020: PUSH
39021: LD_INT 4
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: IN
39030: NOT
39031: OR
39032: IFFALSE 39036
// exit ;
39034: GO 39119
// tmp := [ ] ;
39036: LD_ADDR_VAR 0 5
39040: PUSH
39041: EMPTY
39042: ST_TO_ADDR
// for i in units do
39043: LD_ADDR_VAR 0 4
39047: PUSH
39048: LD_VAR 0 1
39052: PUSH
39053: FOR_IN
39054: IFFALSE 39088
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39056: LD_ADDR_VAR 0 5
39060: PUSH
39061: LD_VAR 0 5
39065: PPUSH
39066: LD_VAR 0 4
39070: PPUSH
39071: LD_VAR 0 2
39075: PPUSH
39076: CALL_OW 259
39080: PPUSH
39081: CALL 40492 0 2
39085: ST_TO_ADDR
39086: GO 39053
39088: POP
39089: POP
// if not tmp then
39090: LD_VAR 0 5
39094: NOT
39095: IFFALSE 39099
// exit ;
39097: GO 39119
// result := SortListByListDesc ( units , tmp ) ;
39099: LD_ADDR_VAR 0 3
39103: PUSH
39104: LD_VAR 0 1
39108: PPUSH
39109: LD_VAR 0 5
39113: PPUSH
39114: CALL_OW 77
39118: ST_TO_ADDR
// end ;
39119: LD_VAR 0 3
39123: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39124: LD_INT 0
39126: PPUSH
39127: PPUSH
39128: PPUSH
// result := false ;
39129: LD_ADDR_VAR 0 3
39133: PUSH
39134: LD_INT 0
39136: ST_TO_ADDR
// if not building then
39137: LD_VAR 0 2
39141: NOT
39142: IFFALSE 39146
// exit ;
39144: GO 39284
// x := GetX ( building ) ;
39146: LD_ADDR_VAR 0 4
39150: PUSH
39151: LD_VAR 0 2
39155: PPUSH
39156: CALL_OW 250
39160: ST_TO_ADDR
// y := GetY ( building ) ;
39161: LD_ADDR_VAR 0 5
39165: PUSH
39166: LD_VAR 0 2
39170: PPUSH
39171: CALL_OW 251
39175: ST_TO_ADDR
// if not x or not y then
39176: LD_VAR 0 4
39180: NOT
39181: PUSH
39182: LD_VAR 0 5
39186: NOT
39187: OR
39188: IFFALSE 39192
// exit ;
39190: GO 39284
// if GetTaskList ( unit ) then
39192: LD_VAR 0 1
39196: PPUSH
39197: CALL_OW 437
39201: IFFALSE 39284
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39203: LD_STRING e
39205: PUSH
39206: LD_VAR 0 1
39210: PPUSH
39211: CALL_OW 437
39215: PUSH
39216: LD_INT 1
39218: ARRAY
39219: PUSH
39220: LD_INT 1
39222: ARRAY
39223: EQUAL
39224: PUSH
39225: LD_VAR 0 4
39229: PUSH
39230: LD_VAR 0 1
39234: PPUSH
39235: CALL_OW 437
39239: PUSH
39240: LD_INT 1
39242: ARRAY
39243: PUSH
39244: LD_INT 2
39246: ARRAY
39247: EQUAL
39248: AND
39249: PUSH
39250: LD_VAR 0 5
39254: PUSH
39255: LD_VAR 0 1
39259: PPUSH
39260: CALL_OW 437
39264: PUSH
39265: LD_INT 1
39267: ARRAY
39268: PUSH
39269: LD_INT 3
39271: ARRAY
39272: EQUAL
39273: AND
39274: IFFALSE 39284
// result := true end ;
39276: LD_ADDR_VAR 0 3
39280: PUSH
39281: LD_INT 1
39283: ST_TO_ADDR
// end ;
39284: LD_VAR 0 3
39288: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39289: LD_INT 0
39291: PPUSH
// result := false ;
39292: LD_ADDR_VAR 0 4
39296: PUSH
39297: LD_INT 0
39299: ST_TO_ADDR
// if GetTaskList ( unit ) then
39300: LD_VAR 0 1
39304: PPUSH
39305: CALL_OW 437
39309: IFFALSE 39392
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39311: LD_STRING M
39313: PUSH
39314: LD_VAR 0 1
39318: PPUSH
39319: CALL_OW 437
39323: PUSH
39324: LD_INT 1
39326: ARRAY
39327: PUSH
39328: LD_INT 1
39330: ARRAY
39331: EQUAL
39332: PUSH
39333: LD_VAR 0 2
39337: PUSH
39338: LD_VAR 0 1
39342: PPUSH
39343: CALL_OW 437
39347: PUSH
39348: LD_INT 1
39350: ARRAY
39351: PUSH
39352: LD_INT 2
39354: ARRAY
39355: EQUAL
39356: AND
39357: PUSH
39358: LD_VAR 0 3
39362: PUSH
39363: LD_VAR 0 1
39367: PPUSH
39368: CALL_OW 437
39372: PUSH
39373: LD_INT 1
39375: ARRAY
39376: PUSH
39377: LD_INT 3
39379: ARRAY
39380: EQUAL
39381: AND
39382: IFFALSE 39392
// result := true ;
39384: LD_ADDR_VAR 0 4
39388: PUSH
39389: LD_INT 1
39391: ST_TO_ADDR
// end ; end ;
39392: LD_VAR 0 4
39396: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39397: LD_INT 0
39399: PPUSH
39400: PPUSH
39401: PPUSH
39402: PPUSH
// if not unit or not area then
39403: LD_VAR 0 1
39407: NOT
39408: PUSH
39409: LD_VAR 0 2
39413: NOT
39414: OR
39415: IFFALSE 39419
// exit ;
39417: GO 39595
// tmp := AreaToList ( area , i ) ;
39419: LD_ADDR_VAR 0 6
39423: PUSH
39424: LD_VAR 0 2
39428: PPUSH
39429: LD_VAR 0 5
39433: PPUSH
39434: CALL_OW 517
39438: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39439: LD_ADDR_VAR 0 5
39443: PUSH
39444: DOUBLE
39445: LD_INT 1
39447: DEC
39448: ST_TO_ADDR
39449: LD_VAR 0 6
39453: PUSH
39454: LD_INT 1
39456: ARRAY
39457: PUSH
39458: FOR_TO
39459: IFFALSE 39593
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39461: LD_ADDR_VAR 0 7
39465: PUSH
39466: LD_VAR 0 6
39470: PUSH
39471: LD_INT 1
39473: ARRAY
39474: PUSH
39475: LD_VAR 0 5
39479: ARRAY
39480: PUSH
39481: LD_VAR 0 6
39485: PUSH
39486: LD_INT 2
39488: ARRAY
39489: PUSH
39490: LD_VAR 0 5
39494: ARRAY
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39500: LD_INT 92
39502: PUSH
39503: LD_VAR 0 7
39507: PUSH
39508: LD_INT 1
39510: ARRAY
39511: PUSH
39512: LD_VAR 0 7
39516: PUSH
39517: LD_INT 2
39519: ARRAY
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: PPUSH
39530: CALL_OW 69
39534: PUSH
39535: LD_INT 0
39537: EQUAL
39538: IFFALSE 39591
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39540: LD_VAR 0 1
39544: PPUSH
39545: LD_VAR 0 7
39549: PUSH
39550: LD_INT 1
39552: ARRAY
39553: PPUSH
39554: LD_VAR 0 7
39558: PUSH
39559: LD_INT 2
39561: ARRAY
39562: PPUSH
39563: LD_VAR 0 3
39567: PPUSH
39568: CALL_OW 48
// result := IsPlaced ( unit ) ;
39572: LD_ADDR_VAR 0 4
39576: PUSH
39577: LD_VAR 0 1
39581: PPUSH
39582: CALL_OW 305
39586: ST_TO_ADDR
// exit ;
39587: POP
39588: POP
39589: GO 39595
// end ; end ;
39591: GO 39458
39593: POP
39594: POP
// end ;
39595: LD_VAR 0 4
39599: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39600: LD_INT 0
39602: PPUSH
39603: PPUSH
39604: PPUSH
// if not side or side > 8 then
39605: LD_VAR 0 1
39609: NOT
39610: PUSH
39611: LD_VAR 0 1
39615: PUSH
39616: LD_INT 8
39618: GREATER
39619: OR
39620: IFFALSE 39624
// exit ;
39622: GO 39811
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39624: LD_ADDR_VAR 0 4
39628: PUSH
39629: LD_INT 22
39631: PUSH
39632: LD_VAR 0 1
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 21
39643: PUSH
39644: LD_INT 3
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PPUSH
39655: CALL_OW 69
39659: ST_TO_ADDR
// if not tmp then
39660: LD_VAR 0 4
39664: NOT
39665: IFFALSE 39669
// exit ;
39667: GO 39811
// enable_addtolog := true ;
39669: LD_ADDR_OWVAR 81
39673: PUSH
39674: LD_INT 1
39676: ST_TO_ADDR
// AddToLog ( [ ) ;
39677: LD_STRING [
39679: PPUSH
39680: CALL_OW 561
// for i in tmp do
39684: LD_ADDR_VAR 0 3
39688: PUSH
39689: LD_VAR 0 4
39693: PUSH
39694: FOR_IN
39695: IFFALSE 39802
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39697: LD_STRING [
39699: PUSH
39700: LD_VAR 0 3
39704: PPUSH
39705: CALL_OW 266
39709: STR
39710: PUSH
39711: LD_STRING , 
39713: STR
39714: PUSH
39715: LD_VAR 0 3
39719: PPUSH
39720: CALL_OW 250
39724: STR
39725: PUSH
39726: LD_STRING , 
39728: STR
39729: PUSH
39730: LD_VAR 0 3
39734: PPUSH
39735: CALL_OW 251
39739: STR
39740: PUSH
39741: LD_STRING , 
39743: STR
39744: PUSH
39745: LD_VAR 0 3
39749: PPUSH
39750: CALL_OW 254
39754: STR
39755: PUSH
39756: LD_STRING , 
39758: STR
39759: PUSH
39760: LD_VAR 0 3
39764: PPUSH
39765: LD_INT 1
39767: PPUSH
39768: CALL_OW 268
39772: STR
39773: PUSH
39774: LD_STRING , 
39776: STR
39777: PUSH
39778: LD_VAR 0 3
39782: PPUSH
39783: LD_INT 2
39785: PPUSH
39786: CALL_OW 268
39790: STR
39791: PUSH
39792: LD_STRING ],
39794: STR
39795: PPUSH
39796: CALL_OW 561
// end ;
39800: GO 39694
39802: POP
39803: POP
// AddToLog ( ]; ) ;
39804: LD_STRING ];
39806: PPUSH
39807: CALL_OW 561
// end ;
39811: LD_VAR 0 2
39815: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39816: LD_INT 0
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
39822: PPUSH
// if not area or not rate or not max then
39823: LD_VAR 0 1
39827: NOT
39828: PUSH
39829: LD_VAR 0 2
39833: NOT
39834: OR
39835: PUSH
39836: LD_VAR 0 4
39840: NOT
39841: OR
39842: IFFALSE 39846
// exit ;
39844: GO 40035
// while 1 do
39846: LD_INT 1
39848: IFFALSE 40035
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39850: LD_ADDR_VAR 0 9
39854: PUSH
39855: LD_VAR 0 1
39859: PPUSH
39860: LD_INT 1
39862: PPUSH
39863: CALL_OW 287
39867: PUSH
39868: LD_INT 10
39870: MUL
39871: ST_TO_ADDR
// r := rate / 10 ;
39872: LD_ADDR_VAR 0 7
39876: PUSH
39877: LD_VAR 0 2
39881: PUSH
39882: LD_INT 10
39884: DIVREAL
39885: ST_TO_ADDR
// time := 1 1$00 ;
39886: LD_ADDR_VAR 0 8
39890: PUSH
39891: LD_INT 2100
39893: ST_TO_ADDR
// if amount < min then
39894: LD_VAR 0 9
39898: PUSH
39899: LD_VAR 0 3
39903: LESS
39904: IFFALSE 39922
// r := r * 2 else
39906: LD_ADDR_VAR 0 7
39910: PUSH
39911: LD_VAR 0 7
39915: PUSH
39916: LD_INT 2
39918: MUL
39919: ST_TO_ADDR
39920: GO 39948
// if amount > max then
39922: LD_VAR 0 9
39926: PUSH
39927: LD_VAR 0 4
39931: GREATER
39932: IFFALSE 39948
// r := r / 2 ;
39934: LD_ADDR_VAR 0 7
39938: PUSH
39939: LD_VAR 0 7
39943: PUSH
39944: LD_INT 2
39946: DIVREAL
39947: ST_TO_ADDR
// time := time / r ;
39948: LD_ADDR_VAR 0 8
39952: PUSH
39953: LD_VAR 0 8
39957: PUSH
39958: LD_VAR 0 7
39962: DIVREAL
39963: ST_TO_ADDR
// if time < 0 then
39964: LD_VAR 0 8
39968: PUSH
39969: LD_INT 0
39971: LESS
39972: IFFALSE 39989
// time := time * - 1 ;
39974: LD_ADDR_VAR 0 8
39978: PUSH
39979: LD_VAR 0 8
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: MUL
39988: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39989: LD_VAR 0 8
39993: PUSH
39994: LD_INT 35
39996: PPUSH
39997: LD_INT 875
39999: PPUSH
40000: CALL_OW 12
40004: PLUS
40005: PPUSH
40006: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40010: LD_INT 1
40012: PPUSH
40013: LD_INT 5
40015: PPUSH
40016: CALL_OW 12
40020: PPUSH
40021: LD_VAR 0 1
40025: PPUSH
40026: LD_INT 1
40028: PPUSH
40029: CALL_OW 55
// end ;
40033: GO 39846
// end ;
40035: LD_VAR 0 5
40039: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40040: LD_INT 0
40042: PPUSH
40043: PPUSH
40044: PPUSH
40045: PPUSH
40046: PPUSH
40047: PPUSH
40048: PPUSH
40049: PPUSH
// if not turrets or not factories then
40050: LD_VAR 0 1
40054: NOT
40055: PUSH
40056: LD_VAR 0 2
40060: NOT
40061: OR
40062: IFFALSE 40066
// exit ;
40064: GO 40373
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40066: LD_ADDR_VAR 0 10
40070: PUSH
40071: LD_INT 5
40073: PUSH
40074: LD_INT 6
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 2
40083: PUSH
40084: LD_INT 4
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 3
40093: PUSH
40094: LD_INT 5
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 24
40108: PUSH
40109: LD_INT 25
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 23
40118: PUSH
40119: LD_INT 27
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 42
40132: PUSH
40133: LD_INT 43
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 44
40142: PUSH
40143: LD_INT 46
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 45
40152: PUSH
40153: LD_INT 47
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: LIST
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: LIST
40169: ST_TO_ADDR
// result := [ ] ;
40170: LD_ADDR_VAR 0 3
40174: PUSH
40175: EMPTY
40176: ST_TO_ADDR
// for i in turrets do
40177: LD_ADDR_VAR 0 4
40181: PUSH
40182: LD_VAR 0 1
40186: PUSH
40187: FOR_IN
40188: IFFALSE 40371
// begin nat := GetNation ( i ) ;
40190: LD_ADDR_VAR 0 7
40194: PUSH
40195: LD_VAR 0 4
40199: PPUSH
40200: CALL_OW 248
40204: ST_TO_ADDR
// weapon := 0 ;
40205: LD_ADDR_VAR 0 8
40209: PUSH
40210: LD_INT 0
40212: ST_TO_ADDR
// if not nat then
40213: LD_VAR 0 7
40217: NOT
40218: IFFALSE 40222
// continue ;
40220: GO 40187
// for j in list [ nat ] do
40222: LD_ADDR_VAR 0 5
40226: PUSH
40227: LD_VAR 0 10
40231: PUSH
40232: LD_VAR 0 7
40236: ARRAY
40237: PUSH
40238: FOR_IN
40239: IFFALSE 40280
// if GetBWeapon ( i ) = j [ 1 ] then
40241: LD_VAR 0 4
40245: PPUSH
40246: CALL_OW 269
40250: PUSH
40251: LD_VAR 0 5
40255: PUSH
40256: LD_INT 1
40258: ARRAY
40259: EQUAL
40260: IFFALSE 40278
// begin weapon := j [ 2 ] ;
40262: LD_ADDR_VAR 0 8
40266: PUSH
40267: LD_VAR 0 5
40271: PUSH
40272: LD_INT 2
40274: ARRAY
40275: ST_TO_ADDR
// break ;
40276: GO 40280
// end ;
40278: GO 40238
40280: POP
40281: POP
// if not weapon then
40282: LD_VAR 0 8
40286: NOT
40287: IFFALSE 40291
// continue ;
40289: GO 40187
// for k in factories do
40291: LD_ADDR_VAR 0 6
40295: PUSH
40296: LD_VAR 0 2
40300: PUSH
40301: FOR_IN
40302: IFFALSE 40367
// begin weapons := AvailableWeaponList ( k ) ;
40304: LD_ADDR_VAR 0 9
40308: PUSH
40309: LD_VAR 0 6
40313: PPUSH
40314: CALL_OW 478
40318: ST_TO_ADDR
// if not weapons then
40319: LD_VAR 0 9
40323: NOT
40324: IFFALSE 40328
// continue ;
40326: GO 40301
// if weapon in weapons then
40328: LD_VAR 0 8
40332: PUSH
40333: LD_VAR 0 9
40337: IN
40338: IFFALSE 40365
// begin result := [ i , weapon ] ;
40340: LD_ADDR_VAR 0 3
40344: PUSH
40345: LD_VAR 0 4
40349: PUSH
40350: LD_VAR 0 8
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: ST_TO_ADDR
// exit ;
40359: POP
40360: POP
40361: POP
40362: POP
40363: GO 40373
// end ; end ;
40365: GO 40301
40367: POP
40368: POP
// end ;
40369: GO 40187
40371: POP
40372: POP
// end ;
40373: LD_VAR 0 3
40377: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40378: LD_INT 0
40380: PPUSH
// if not side or side > 8 then
40381: LD_VAR 0 3
40385: NOT
40386: PUSH
40387: LD_VAR 0 3
40391: PUSH
40392: LD_INT 8
40394: GREATER
40395: OR
40396: IFFALSE 40400
// exit ;
40398: GO 40459
// if not range then
40400: LD_VAR 0 4
40404: NOT
40405: IFFALSE 40416
// range := - 12 ;
40407: LD_ADDR_VAR 0 4
40411: PUSH
40412: LD_INT 12
40414: NEG
40415: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40416: LD_VAR 0 1
40420: PPUSH
40421: LD_VAR 0 2
40425: PPUSH
40426: LD_VAR 0 3
40430: PPUSH
40431: LD_VAR 0 4
40435: PPUSH
40436: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40440: LD_VAR 0 1
40444: PPUSH
40445: LD_VAR 0 2
40449: PPUSH
40450: LD_VAR 0 3
40454: PPUSH
40455: CALL_OW 331
// end ;
40459: LD_VAR 0 5
40463: RET
// export function Video ( mode ) ; begin
40464: LD_INT 0
40466: PPUSH
// ingame_video = mode ;
40467: LD_ADDR_OWVAR 52
40471: PUSH
40472: LD_VAR 0 1
40476: ST_TO_ADDR
// interface_hidden = mode ;
40477: LD_ADDR_OWVAR 54
40481: PUSH
40482: LD_VAR 0 1
40486: ST_TO_ADDR
// end ;
40487: LD_VAR 0 2
40491: RET
// export function Join ( array , element ) ; begin
40492: LD_INT 0
40494: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40495: LD_ADDR_VAR 0 3
40499: PUSH
40500: LD_VAR 0 1
40504: PPUSH
40505: LD_VAR 0 1
40509: PUSH
40510: LD_INT 1
40512: PLUS
40513: PPUSH
40514: LD_VAR 0 2
40518: PPUSH
40519: CALL_OW 1
40523: ST_TO_ADDR
// end ;
40524: LD_VAR 0 3
40528: RET
// export function JoinUnion ( array , element ) ; begin
40529: LD_INT 0
40531: PPUSH
// result := array union element ;
40532: LD_ADDR_VAR 0 3
40536: PUSH
40537: LD_VAR 0 1
40541: PUSH
40542: LD_VAR 0 2
40546: UNION
40547: ST_TO_ADDR
// end ;
40548: LD_VAR 0 3
40552: RET
// export function GetBehemoths ( side ) ; begin
40553: LD_INT 0
40555: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40556: LD_ADDR_VAR 0 2
40560: PUSH
40561: LD_INT 22
40563: PUSH
40564: LD_VAR 0 1
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 31
40575: PUSH
40576: LD_INT 25
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PPUSH
40587: CALL_OW 69
40591: ST_TO_ADDR
// end ;
40592: LD_VAR 0 2
40596: RET
// export function Shuffle ( array ) ; var i , index ; begin
40597: LD_INT 0
40599: PPUSH
40600: PPUSH
40601: PPUSH
// result := [ ] ;
40602: LD_ADDR_VAR 0 2
40606: PUSH
40607: EMPTY
40608: ST_TO_ADDR
// if not array then
40609: LD_VAR 0 1
40613: NOT
40614: IFFALSE 40618
// exit ;
40616: GO 40717
// Randomize ;
40618: CALL_OW 10
// for i = array downto 1 do
40622: LD_ADDR_VAR 0 3
40626: PUSH
40627: DOUBLE
40628: LD_VAR 0 1
40632: INC
40633: ST_TO_ADDR
40634: LD_INT 1
40636: PUSH
40637: FOR_DOWNTO
40638: IFFALSE 40715
// begin index := rand ( 1 , array ) ;
40640: LD_ADDR_VAR 0 4
40644: PUSH
40645: LD_INT 1
40647: PPUSH
40648: LD_VAR 0 1
40652: PPUSH
40653: CALL_OW 12
40657: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40658: LD_ADDR_VAR 0 2
40662: PUSH
40663: LD_VAR 0 2
40667: PPUSH
40668: LD_VAR 0 2
40672: PUSH
40673: LD_INT 1
40675: PLUS
40676: PPUSH
40677: LD_VAR 0 1
40681: PUSH
40682: LD_VAR 0 4
40686: ARRAY
40687: PPUSH
40688: CALL_OW 2
40692: ST_TO_ADDR
// array := Delete ( array , index ) ;
40693: LD_ADDR_VAR 0 1
40697: PUSH
40698: LD_VAR 0 1
40702: PPUSH
40703: LD_VAR 0 4
40707: PPUSH
40708: CALL_OW 3
40712: ST_TO_ADDR
// end ;
40713: GO 40637
40715: POP
40716: POP
// end ;
40717: LD_VAR 0 2
40721: RET
// export function GetBaseMaterials ( base ) ; begin
40722: LD_INT 0
40724: PPUSH
// result := [ 0 , 0 , 0 ] ;
40725: LD_ADDR_VAR 0 2
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: LIST
40743: ST_TO_ADDR
// if not base then
40744: LD_VAR 0 1
40748: NOT
40749: IFFALSE 40753
// exit ;
40751: GO 40802
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40753: LD_ADDR_VAR 0 2
40757: PUSH
40758: LD_VAR 0 1
40762: PPUSH
40763: LD_INT 1
40765: PPUSH
40766: CALL_OW 275
40770: PUSH
40771: LD_VAR 0 1
40775: PPUSH
40776: LD_INT 2
40778: PPUSH
40779: CALL_OW 275
40783: PUSH
40784: LD_VAR 0 1
40788: PPUSH
40789: LD_INT 3
40791: PPUSH
40792: CALL_OW 275
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: LIST
40801: ST_TO_ADDR
// end ;
40802: LD_VAR 0 2
40806: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40807: LD_INT 0
40809: PPUSH
40810: PPUSH
// result := array ;
40811: LD_ADDR_VAR 0 3
40815: PUSH
40816: LD_VAR 0 1
40820: ST_TO_ADDR
// if size >= result then
40821: LD_VAR 0 2
40825: PUSH
40826: LD_VAR 0 3
40830: GREATEREQUAL
40831: IFFALSE 40835
// exit ;
40833: GO 40885
// if size then
40835: LD_VAR 0 2
40839: IFFALSE 40885
// for i := array downto size do
40841: LD_ADDR_VAR 0 4
40845: PUSH
40846: DOUBLE
40847: LD_VAR 0 1
40851: INC
40852: ST_TO_ADDR
40853: LD_VAR 0 2
40857: PUSH
40858: FOR_DOWNTO
40859: IFFALSE 40883
// result := Delete ( result , result ) ;
40861: LD_ADDR_VAR 0 3
40865: PUSH
40866: LD_VAR 0 3
40870: PPUSH
40871: LD_VAR 0 3
40875: PPUSH
40876: CALL_OW 3
40880: ST_TO_ADDR
40881: GO 40858
40883: POP
40884: POP
// end ;
40885: LD_VAR 0 3
40889: RET
// export function ComExit ( unit ) ; var tmp ; begin
40890: LD_INT 0
40892: PPUSH
40893: PPUSH
// if not IsInUnit ( unit ) then
40894: LD_VAR 0 1
40898: PPUSH
40899: CALL_OW 310
40903: NOT
40904: IFFALSE 40908
// exit ;
40906: GO 40968
// tmp := IsInUnit ( unit ) ;
40908: LD_ADDR_VAR 0 3
40912: PUSH
40913: LD_VAR 0 1
40917: PPUSH
40918: CALL_OW 310
40922: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40923: LD_VAR 0 3
40927: PPUSH
40928: CALL_OW 247
40932: PUSH
40933: LD_INT 2
40935: EQUAL
40936: IFFALSE 40949
// ComExitVehicle ( unit ) else
40938: LD_VAR 0 1
40942: PPUSH
40943: CALL_OW 121
40947: GO 40958
// ComExitBuilding ( unit ) ;
40949: LD_VAR 0 1
40953: PPUSH
40954: CALL_OW 122
// result := tmp ;
40958: LD_ADDR_VAR 0 2
40962: PUSH
40963: LD_VAR 0 3
40967: ST_TO_ADDR
// end ;
40968: LD_VAR 0 2
40972: RET
// export function ComExitAll ( units ) ; var i ; begin
40973: LD_INT 0
40975: PPUSH
40976: PPUSH
// if not units then
40977: LD_VAR 0 1
40981: NOT
40982: IFFALSE 40986
// exit ;
40984: GO 41012
// for i in units do
40986: LD_ADDR_VAR 0 3
40990: PUSH
40991: LD_VAR 0 1
40995: PUSH
40996: FOR_IN
40997: IFFALSE 41010
// ComExit ( i ) ;
40999: LD_VAR 0 3
41003: PPUSH
41004: CALL 40890 0 1
41008: GO 40996
41010: POP
41011: POP
// end ;
41012: LD_VAR 0 2
41016: RET
// export function ResetHc ; begin
41017: LD_INT 0
41019: PPUSH
// InitHc ;
41020: CALL_OW 19
// hc_importance := 0 ;
41024: LD_ADDR_OWVAR 32
41028: PUSH
41029: LD_INT 0
41031: ST_TO_ADDR
// end ;
41032: LD_VAR 0 1
41036: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41037: LD_INT 0
41039: PPUSH
41040: PPUSH
41041: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41042: LD_ADDR_VAR 0 6
41046: PUSH
41047: LD_VAR 0 1
41051: PUSH
41052: LD_VAR 0 3
41056: PLUS
41057: PUSH
41058: LD_INT 2
41060: DIV
41061: ST_TO_ADDR
// if _x < 0 then
41062: LD_VAR 0 6
41066: PUSH
41067: LD_INT 0
41069: LESS
41070: IFFALSE 41087
// _x := _x * - 1 ;
41072: LD_ADDR_VAR 0 6
41076: PUSH
41077: LD_VAR 0 6
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: MUL
41086: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41087: LD_ADDR_VAR 0 7
41091: PUSH
41092: LD_VAR 0 2
41096: PUSH
41097: LD_VAR 0 4
41101: PLUS
41102: PUSH
41103: LD_INT 2
41105: DIV
41106: ST_TO_ADDR
// if _y < 0 then
41107: LD_VAR 0 7
41111: PUSH
41112: LD_INT 0
41114: LESS
41115: IFFALSE 41132
// _y := _y * - 1 ;
41117: LD_ADDR_VAR 0 7
41121: PUSH
41122: LD_VAR 0 7
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: MUL
41131: ST_TO_ADDR
// result := [ _x , _y ] ;
41132: LD_ADDR_VAR 0 5
41136: PUSH
41137: LD_VAR 0 6
41141: PUSH
41142: LD_VAR 0 7
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: ST_TO_ADDR
// end ;
41151: LD_VAR 0 5
41155: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41156: LD_INT 0
41158: PPUSH
41159: PPUSH
41160: PPUSH
41161: PPUSH
// task := GetTaskList ( unit ) ;
41162: LD_ADDR_VAR 0 7
41166: PUSH
41167: LD_VAR 0 1
41171: PPUSH
41172: CALL_OW 437
41176: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41177: LD_VAR 0 7
41181: NOT
41182: PUSH
41183: LD_VAR 0 1
41187: PPUSH
41188: LD_VAR 0 2
41192: PPUSH
41193: CALL_OW 308
41197: NOT
41198: AND
41199: IFFALSE 41203
// exit ;
41201: GO 41321
// if IsInArea ( unit , area ) then
41203: LD_VAR 0 1
41207: PPUSH
41208: LD_VAR 0 2
41212: PPUSH
41213: CALL_OW 308
41217: IFFALSE 41235
// begin ComMoveToArea ( unit , goAway ) ;
41219: LD_VAR 0 1
41223: PPUSH
41224: LD_VAR 0 3
41228: PPUSH
41229: CALL_OW 113
// exit ;
41233: GO 41321
// end ; if task [ 1 ] [ 1 ] <> M then
41235: LD_VAR 0 7
41239: PUSH
41240: LD_INT 1
41242: ARRAY
41243: PUSH
41244: LD_INT 1
41246: ARRAY
41247: PUSH
41248: LD_STRING M
41250: NONEQUAL
41251: IFFALSE 41255
// exit ;
41253: GO 41321
// x := task [ 1 ] [ 2 ] ;
41255: LD_ADDR_VAR 0 5
41259: PUSH
41260: LD_VAR 0 7
41264: PUSH
41265: LD_INT 1
41267: ARRAY
41268: PUSH
41269: LD_INT 2
41271: ARRAY
41272: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41273: LD_ADDR_VAR 0 6
41277: PUSH
41278: LD_VAR 0 7
41282: PUSH
41283: LD_INT 1
41285: ARRAY
41286: PUSH
41287: LD_INT 3
41289: ARRAY
41290: ST_TO_ADDR
// if InArea ( x , y , area ) then
41291: LD_VAR 0 5
41295: PPUSH
41296: LD_VAR 0 6
41300: PPUSH
41301: LD_VAR 0 2
41305: PPUSH
41306: CALL_OW 309
41310: IFFALSE 41321
// ComStop ( unit ) ;
41312: LD_VAR 0 1
41316: PPUSH
41317: CALL_OW 141
// end ;
41321: LD_VAR 0 4
41325: RET
// export function Abs ( value ) ; begin
41326: LD_INT 0
41328: PPUSH
// result := value ;
41329: LD_ADDR_VAR 0 2
41333: PUSH
41334: LD_VAR 0 1
41338: ST_TO_ADDR
// if value < 0 then
41339: LD_VAR 0 1
41343: PUSH
41344: LD_INT 0
41346: LESS
41347: IFFALSE 41364
// result := value * - 1 ;
41349: LD_ADDR_VAR 0 2
41353: PUSH
41354: LD_VAR 0 1
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: MUL
41363: ST_TO_ADDR
// end ;
41364: LD_VAR 0 2
41368: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41369: LD_INT 0
41371: PPUSH
41372: PPUSH
41373: PPUSH
41374: PPUSH
41375: PPUSH
41376: PPUSH
41377: PPUSH
41378: PPUSH
// if not unit or not building then
41379: LD_VAR 0 1
41383: NOT
41384: PUSH
41385: LD_VAR 0 2
41389: NOT
41390: OR
41391: IFFALSE 41395
// exit ;
41393: GO 41621
// x := GetX ( building ) ;
41395: LD_ADDR_VAR 0 4
41399: PUSH
41400: LD_VAR 0 2
41404: PPUSH
41405: CALL_OW 250
41409: ST_TO_ADDR
// y := GetY ( building ) ;
41410: LD_ADDR_VAR 0 6
41414: PUSH
41415: LD_VAR 0 2
41419: PPUSH
41420: CALL_OW 251
41424: ST_TO_ADDR
// d := GetDir ( building ) ;
41425: LD_ADDR_VAR 0 8
41429: PUSH
41430: LD_VAR 0 2
41434: PPUSH
41435: CALL_OW 254
41439: ST_TO_ADDR
// r := 4 ;
41440: LD_ADDR_VAR 0 9
41444: PUSH
41445: LD_INT 4
41447: ST_TO_ADDR
// for i := 1 to 5 do
41448: LD_ADDR_VAR 0 10
41452: PUSH
41453: DOUBLE
41454: LD_INT 1
41456: DEC
41457: ST_TO_ADDR
41458: LD_INT 5
41460: PUSH
41461: FOR_TO
41462: IFFALSE 41619
// begin _x := ShiftX ( x , d , r + i ) ;
41464: LD_ADDR_VAR 0 5
41468: PUSH
41469: LD_VAR 0 4
41473: PPUSH
41474: LD_VAR 0 8
41478: PPUSH
41479: LD_VAR 0 9
41483: PUSH
41484: LD_VAR 0 10
41488: PLUS
41489: PPUSH
41490: CALL_OW 272
41494: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41495: LD_ADDR_VAR 0 7
41499: PUSH
41500: LD_VAR 0 6
41504: PPUSH
41505: LD_VAR 0 8
41509: PPUSH
41510: LD_VAR 0 9
41514: PUSH
41515: LD_VAR 0 10
41519: PLUS
41520: PPUSH
41521: CALL_OW 273
41525: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41526: LD_VAR 0 5
41530: PPUSH
41531: LD_VAR 0 7
41535: PPUSH
41536: CALL_OW 488
41540: PUSH
41541: LD_VAR 0 5
41545: PPUSH
41546: LD_VAR 0 7
41550: PPUSH
41551: CALL_OW 428
41555: PPUSH
41556: CALL_OW 247
41560: PUSH
41561: LD_INT 3
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: IN
41571: NOT
41572: AND
41573: IFFALSE 41617
// begin ComMoveXY ( unit , _x , _y ) ;
41575: LD_VAR 0 1
41579: PPUSH
41580: LD_VAR 0 5
41584: PPUSH
41585: LD_VAR 0 7
41589: PPUSH
41590: CALL_OW 111
// result := [ _x , _y ] ;
41594: LD_ADDR_VAR 0 3
41598: PUSH
41599: LD_VAR 0 5
41603: PUSH
41604: LD_VAR 0 7
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: ST_TO_ADDR
// exit ;
41613: POP
41614: POP
41615: GO 41621
// end ; end ;
41617: GO 41461
41619: POP
41620: POP
// end ;
41621: LD_VAR 0 3
41625: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41626: LD_INT 0
41628: PPUSH
41629: PPUSH
41630: PPUSH
// result := 0 ;
41631: LD_ADDR_VAR 0 3
41635: PUSH
41636: LD_INT 0
41638: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41639: LD_VAR 0 1
41643: PUSH
41644: LD_INT 0
41646: LESS
41647: PUSH
41648: LD_VAR 0 1
41652: PUSH
41653: LD_INT 8
41655: GREATER
41656: OR
41657: PUSH
41658: LD_VAR 0 2
41662: PUSH
41663: LD_INT 0
41665: LESS
41666: OR
41667: PUSH
41668: LD_VAR 0 2
41672: PUSH
41673: LD_INT 8
41675: GREATER
41676: OR
41677: IFFALSE 41681
// exit ;
41679: GO 41756
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41681: LD_ADDR_VAR 0 4
41685: PUSH
41686: LD_INT 22
41688: PUSH
41689: LD_VAR 0 2
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PPUSH
41698: CALL_OW 69
41702: PUSH
41703: FOR_IN
41704: IFFALSE 41754
// begin un := UnitShoot ( i ) ;
41706: LD_ADDR_VAR 0 5
41710: PUSH
41711: LD_VAR 0 4
41715: PPUSH
41716: CALL_OW 504
41720: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41721: LD_VAR 0 5
41725: PPUSH
41726: CALL_OW 255
41730: PUSH
41731: LD_VAR 0 1
41735: EQUAL
41736: IFFALSE 41752
// begin result := un ;
41738: LD_ADDR_VAR 0 3
41742: PUSH
41743: LD_VAR 0 5
41747: ST_TO_ADDR
// exit ;
41748: POP
41749: POP
41750: GO 41756
// end ; end ;
41752: GO 41703
41754: POP
41755: POP
// end ;
41756: LD_VAR 0 3
41760: RET
// export function GetCargoBay ( units ) ; begin
41761: LD_INT 0
41763: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41764: LD_ADDR_VAR 0 2
41768: PUSH
41769: LD_VAR 0 1
41773: PPUSH
41774: LD_INT 2
41776: PUSH
41777: LD_INT 34
41779: PUSH
41780: LD_INT 12
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 34
41789: PUSH
41790: LD_INT 51
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 34
41799: PUSH
41800: LD_INT 32
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 34
41809: PUSH
41810: LD_INT 89
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: PPUSH
41824: CALL_OW 72
41828: ST_TO_ADDR
// end ;
41829: LD_VAR 0 2
41833: RET
// export function Negate ( value ) ; begin
41834: LD_INT 0
41836: PPUSH
// result := not value ;
41837: LD_ADDR_VAR 0 2
41841: PUSH
41842: LD_VAR 0 1
41846: NOT
41847: ST_TO_ADDR
// end ;
41848: LD_VAR 0 2
41852: RET
// export function Inc ( value ) ; begin
41853: LD_INT 0
41855: PPUSH
// result := value + 1 ;
41856: LD_ADDR_VAR 0 2
41860: PUSH
41861: LD_VAR 0 1
41865: PUSH
41866: LD_INT 1
41868: PLUS
41869: ST_TO_ADDR
// end ;
41870: LD_VAR 0 2
41874: RET
// export function Dec ( value ) ; begin
41875: LD_INT 0
41877: PPUSH
// result := value - 1 ;
41878: LD_ADDR_VAR 0 2
41882: PUSH
41883: LD_VAR 0 1
41887: PUSH
41888: LD_INT 1
41890: MINUS
41891: ST_TO_ADDR
// end ;
41892: LD_VAR 0 2
41896: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41897: LD_INT 0
41899: PPUSH
41900: PPUSH
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
41906: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41907: LD_VAR 0 1
41911: PPUSH
41912: LD_VAR 0 2
41916: PPUSH
41917: CALL_OW 488
41921: NOT
41922: PUSH
41923: LD_VAR 0 3
41927: PPUSH
41928: LD_VAR 0 4
41932: PPUSH
41933: CALL_OW 488
41937: NOT
41938: OR
41939: IFFALSE 41952
// begin result := - 1 ;
41941: LD_ADDR_VAR 0 5
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: ST_TO_ADDR
// exit ;
41950: GO 42187
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41952: LD_ADDR_VAR 0 12
41956: PUSH
41957: LD_VAR 0 1
41961: PPUSH
41962: LD_VAR 0 2
41966: PPUSH
41967: LD_VAR 0 3
41971: PPUSH
41972: LD_VAR 0 4
41976: PPUSH
41977: CALL 41037 0 4
41981: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41982: LD_ADDR_VAR 0 11
41986: PUSH
41987: LD_VAR 0 1
41991: PPUSH
41992: LD_VAR 0 2
41996: PPUSH
41997: LD_VAR 0 12
42001: PUSH
42002: LD_INT 1
42004: ARRAY
42005: PPUSH
42006: LD_VAR 0 12
42010: PUSH
42011: LD_INT 2
42013: ARRAY
42014: PPUSH
42015: CALL_OW 298
42019: ST_TO_ADDR
// distance := 9999 ;
42020: LD_ADDR_VAR 0 10
42024: PUSH
42025: LD_INT 9999
42027: ST_TO_ADDR
// for i := 0 to 5 do
42028: LD_ADDR_VAR 0 6
42032: PUSH
42033: DOUBLE
42034: LD_INT 0
42036: DEC
42037: ST_TO_ADDR
42038: LD_INT 5
42040: PUSH
42041: FOR_TO
42042: IFFALSE 42185
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42044: LD_ADDR_VAR 0 7
42048: PUSH
42049: LD_VAR 0 1
42053: PPUSH
42054: LD_VAR 0 6
42058: PPUSH
42059: LD_VAR 0 11
42063: PPUSH
42064: CALL_OW 272
42068: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42069: LD_ADDR_VAR 0 8
42073: PUSH
42074: LD_VAR 0 2
42078: PPUSH
42079: LD_VAR 0 6
42083: PPUSH
42084: LD_VAR 0 11
42088: PPUSH
42089: CALL_OW 273
42093: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42094: LD_VAR 0 7
42098: PPUSH
42099: LD_VAR 0 8
42103: PPUSH
42104: CALL_OW 488
42108: NOT
42109: IFFALSE 42113
// continue ;
42111: GO 42041
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42113: LD_ADDR_VAR 0 9
42117: PUSH
42118: LD_VAR 0 12
42122: PUSH
42123: LD_INT 1
42125: ARRAY
42126: PPUSH
42127: LD_VAR 0 12
42131: PUSH
42132: LD_INT 2
42134: ARRAY
42135: PPUSH
42136: LD_VAR 0 7
42140: PPUSH
42141: LD_VAR 0 8
42145: PPUSH
42146: CALL_OW 298
42150: ST_TO_ADDR
// if tmp < distance then
42151: LD_VAR 0 9
42155: PUSH
42156: LD_VAR 0 10
42160: LESS
42161: IFFALSE 42183
// begin result := i ;
42163: LD_ADDR_VAR 0 5
42167: PUSH
42168: LD_VAR 0 6
42172: ST_TO_ADDR
// distance := tmp ;
42173: LD_ADDR_VAR 0 10
42177: PUSH
42178: LD_VAR 0 9
42182: ST_TO_ADDR
// end ; end ;
42183: GO 42041
42185: POP
42186: POP
// end ;
42187: LD_VAR 0 5
42191: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42192: LD_INT 0
42194: PPUSH
42195: PPUSH
// if not driver or not IsInUnit ( driver ) then
42196: LD_VAR 0 1
42200: NOT
42201: PUSH
42202: LD_VAR 0 1
42206: PPUSH
42207: CALL_OW 310
42211: NOT
42212: OR
42213: IFFALSE 42217
// exit ;
42215: GO 42307
// vehicle := IsInUnit ( driver ) ;
42217: LD_ADDR_VAR 0 3
42221: PUSH
42222: LD_VAR 0 1
42226: PPUSH
42227: CALL_OW 310
42231: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42232: LD_VAR 0 1
42236: PPUSH
42237: LD_STRING \
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: PUSH
42267: LD_STRING E
42269: PUSH
42270: LD_INT 0
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: LD_VAR 0 3
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PPUSH
42303: CALL_OW 446
// end ;
42307: LD_VAR 0 2
42311: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42312: LD_INT 0
42314: PPUSH
42315: PPUSH
// if not driver or not IsInUnit ( driver ) then
42316: LD_VAR 0 1
42320: NOT
42321: PUSH
42322: LD_VAR 0 1
42326: PPUSH
42327: CALL_OW 310
42331: NOT
42332: OR
42333: IFFALSE 42337
// exit ;
42335: GO 42427
// vehicle := IsInUnit ( driver ) ;
42337: LD_ADDR_VAR 0 3
42341: PUSH
42342: LD_VAR 0 1
42346: PPUSH
42347: CALL_OW 310
42351: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42352: LD_VAR 0 1
42356: PPUSH
42357: LD_STRING \
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: PUSH
42387: LD_STRING E
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_VAR 0 3
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PPUSH
42423: CALL_OW 447
// end ;
42427: LD_VAR 0 2
42431: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42432: LD_INT 0
42434: PPUSH
42435: PPUSH
42436: PPUSH
// tmp := [ ] ;
42437: LD_ADDR_VAR 0 5
42441: PUSH
42442: EMPTY
42443: ST_TO_ADDR
// for i in units do
42444: LD_ADDR_VAR 0 4
42448: PUSH
42449: LD_VAR 0 1
42453: PUSH
42454: FOR_IN
42455: IFFALSE 42493
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42457: LD_ADDR_VAR 0 5
42461: PUSH
42462: LD_VAR 0 5
42466: PPUSH
42467: LD_VAR 0 5
42471: PUSH
42472: LD_INT 1
42474: PLUS
42475: PPUSH
42476: LD_VAR 0 4
42480: PPUSH
42481: CALL_OW 256
42485: PPUSH
42486: CALL_OW 2
42490: ST_TO_ADDR
42491: GO 42454
42493: POP
42494: POP
// if not tmp then
42495: LD_VAR 0 5
42499: NOT
42500: IFFALSE 42504
// exit ;
42502: GO 42552
// if asc then
42504: LD_VAR 0 2
42508: IFFALSE 42532
// result := SortListByListAsc ( units , tmp ) else
42510: LD_ADDR_VAR 0 3
42514: PUSH
42515: LD_VAR 0 1
42519: PPUSH
42520: LD_VAR 0 5
42524: PPUSH
42525: CALL_OW 76
42529: ST_TO_ADDR
42530: GO 42552
// result := SortListByListDesc ( units , tmp ) ;
42532: LD_ADDR_VAR 0 3
42536: PUSH
42537: LD_VAR 0 1
42541: PPUSH
42542: LD_VAR 0 5
42546: PPUSH
42547: CALL_OW 77
42551: ST_TO_ADDR
// end ;
42552: LD_VAR 0 3
42556: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42557: LD_INT 0
42559: PPUSH
42560: PPUSH
// task := GetTaskList ( mech ) ;
42561: LD_ADDR_VAR 0 4
42565: PUSH
42566: LD_VAR 0 1
42570: PPUSH
42571: CALL_OW 437
42575: ST_TO_ADDR
// if not task then
42576: LD_VAR 0 4
42580: NOT
42581: IFFALSE 42585
// exit ;
42583: GO 42627
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42585: LD_ADDR_VAR 0 3
42589: PUSH
42590: LD_VAR 0 4
42594: PUSH
42595: LD_INT 1
42597: ARRAY
42598: PUSH
42599: LD_INT 1
42601: ARRAY
42602: PUSH
42603: LD_STRING r
42605: EQUAL
42606: PUSH
42607: LD_VAR 0 4
42611: PUSH
42612: LD_INT 1
42614: ARRAY
42615: PUSH
42616: LD_INT 4
42618: ARRAY
42619: PUSH
42620: LD_VAR 0 2
42624: EQUAL
42625: AND
42626: ST_TO_ADDR
// end ;
42627: LD_VAR 0 3
42631: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42632: LD_INT 0
42634: PPUSH
// SetDir ( unit , d ) ;
42635: LD_VAR 0 1
42639: PPUSH
42640: LD_VAR 0 4
42644: PPUSH
42645: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42649: LD_VAR 0 1
42653: PPUSH
42654: LD_VAR 0 2
42658: PPUSH
42659: LD_VAR 0 3
42663: PPUSH
42664: LD_VAR 0 5
42668: PPUSH
42669: CALL_OW 48
// end ;
42673: LD_VAR 0 6
42677: RET
// export function ToNaturalNumber ( number ) ; begin
42678: LD_INT 0
42680: PPUSH
// result := number div 1 ;
42681: LD_ADDR_VAR 0 2
42685: PUSH
42686: LD_VAR 0 1
42690: PUSH
42691: LD_INT 1
42693: DIV
42694: ST_TO_ADDR
// if number < 0 then
42695: LD_VAR 0 1
42699: PUSH
42700: LD_INT 0
42702: LESS
42703: IFFALSE 42713
// result := 0 ;
42705: LD_ADDR_VAR 0 2
42709: PUSH
42710: LD_INT 0
42712: ST_TO_ADDR
// end ;
42713: LD_VAR 0 2
42717: RET
// export function SortByClass ( units , class ) ; var un ; begin
42718: LD_INT 0
42720: PPUSH
42721: PPUSH
// if not units or not class then
42722: LD_VAR 0 1
42726: NOT
42727: PUSH
42728: LD_VAR 0 2
42732: NOT
42733: OR
42734: IFFALSE 42738
// exit ;
42736: GO 42833
// result := [ ] ;
42738: LD_ADDR_VAR 0 3
42742: PUSH
42743: EMPTY
42744: ST_TO_ADDR
// for un in units do
42745: LD_ADDR_VAR 0 4
42749: PUSH
42750: LD_VAR 0 1
42754: PUSH
42755: FOR_IN
42756: IFFALSE 42831
// if GetClass ( un ) = class then
42758: LD_VAR 0 4
42762: PPUSH
42763: CALL_OW 257
42767: PUSH
42768: LD_VAR 0 2
42772: EQUAL
42773: IFFALSE 42800
// result := Insert ( result , 1 , un ) else
42775: LD_ADDR_VAR 0 3
42779: PUSH
42780: LD_VAR 0 3
42784: PPUSH
42785: LD_INT 1
42787: PPUSH
42788: LD_VAR 0 4
42792: PPUSH
42793: CALL_OW 2
42797: ST_TO_ADDR
42798: GO 42829
// result := Replace ( result , result + 1 , un ) ;
42800: LD_ADDR_VAR 0 3
42804: PUSH
42805: LD_VAR 0 3
42809: PPUSH
42810: LD_VAR 0 3
42814: PUSH
42815: LD_INT 1
42817: PLUS
42818: PPUSH
42819: LD_VAR 0 4
42823: PPUSH
42824: CALL_OW 1
42828: ST_TO_ADDR
42829: GO 42755
42831: POP
42832: POP
// end ;
42833: LD_VAR 0 3
42837: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42838: LD_INT 0
42840: PPUSH
42841: PPUSH
42842: PPUSH
42843: PPUSH
42844: PPUSH
42845: PPUSH
42846: PPUSH
// result := [ ] ;
42847: LD_ADDR_VAR 0 4
42851: PUSH
42852: EMPTY
42853: ST_TO_ADDR
// if x - r < 0 then
42854: LD_VAR 0 1
42858: PUSH
42859: LD_VAR 0 3
42863: MINUS
42864: PUSH
42865: LD_INT 0
42867: LESS
42868: IFFALSE 42880
// min_x := 0 else
42870: LD_ADDR_VAR 0 8
42874: PUSH
42875: LD_INT 0
42877: ST_TO_ADDR
42878: GO 42896
// min_x := x - r ;
42880: LD_ADDR_VAR 0 8
42884: PUSH
42885: LD_VAR 0 1
42889: PUSH
42890: LD_VAR 0 3
42894: MINUS
42895: ST_TO_ADDR
// if y - r < 0 then
42896: LD_VAR 0 2
42900: PUSH
42901: LD_VAR 0 3
42905: MINUS
42906: PUSH
42907: LD_INT 0
42909: LESS
42910: IFFALSE 42922
// min_y := 0 else
42912: LD_ADDR_VAR 0 7
42916: PUSH
42917: LD_INT 0
42919: ST_TO_ADDR
42920: GO 42938
// min_y := y - r ;
42922: LD_ADDR_VAR 0 7
42926: PUSH
42927: LD_VAR 0 2
42931: PUSH
42932: LD_VAR 0 3
42936: MINUS
42937: ST_TO_ADDR
// max_x := x + r ;
42938: LD_ADDR_VAR 0 9
42942: PUSH
42943: LD_VAR 0 1
42947: PUSH
42948: LD_VAR 0 3
42952: PLUS
42953: ST_TO_ADDR
// max_y := y + r ;
42954: LD_ADDR_VAR 0 10
42958: PUSH
42959: LD_VAR 0 2
42963: PUSH
42964: LD_VAR 0 3
42968: PLUS
42969: ST_TO_ADDR
// for _x = min_x to max_x do
42970: LD_ADDR_VAR 0 5
42974: PUSH
42975: DOUBLE
42976: LD_VAR 0 8
42980: DEC
42981: ST_TO_ADDR
42982: LD_VAR 0 9
42986: PUSH
42987: FOR_TO
42988: IFFALSE 43089
// for _y = min_y to max_y do
42990: LD_ADDR_VAR 0 6
42994: PUSH
42995: DOUBLE
42996: LD_VAR 0 7
43000: DEC
43001: ST_TO_ADDR
43002: LD_VAR 0 10
43006: PUSH
43007: FOR_TO
43008: IFFALSE 43085
// begin if not ValidHex ( _x , _y ) then
43010: LD_VAR 0 5
43014: PPUSH
43015: LD_VAR 0 6
43019: PPUSH
43020: CALL_OW 488
43024: NOT
43025: IFFALSE 43029
// continue ;
43027: GO 43007
// if GetResourceTypeXY ( _x , _y ) then
43029: LD_VAR 0 5
43033: PPUSH
43034: LD_VAR 0 6
43038: PPUSH
43039: CALL_OW 283
43043: IFFALSE 43083
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43045: LD_ADDR_VAR 0 4
43049: PUSH
43050: LD_VAR 0 4
43054: PPUSH
43055: LD_VAR 0 4
43059: PUSH
43060: LD_INT 1
43062: PLUS
43063: PPUSH
43064: LD_VAR 0 5
43068: PUSH
43069: LD_VAR 0 6
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PPUSH
43078: CALL_OW 1
43082: ST_TO_ADDR
// end ;
43083: GO 43007
43085: POP
43086: POP
43087: GO 42987
43089: POP
43090: POP
// end ;
43091: LD_VAR 0 4
43095: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43096: LD_INT 0
43098: PPUSH
43099: PPUSH
43100: PPUSH
43101: PPUSH
43102: PPUSH
43103: PPUSH
43104: PPUSH
43105: PPUSH
// if not units then
43106: LD_VAR 0 1
43110: NOT
43111: IFFALSE 43115
// exit ;
43113: GO 43643
// result := UnitFilter ( units , [ f_ok ] ) ;
43115: LD_ADDR_VAR 0 3
43119: PUSH
43120: LD_VAR 0 1
43124: PPUSH
43125: LD_INT 50
43127: PUSH
43128: EMPTY
43129: LIST
43130: PPUSH
43131: CALL_OW 72
43135: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43136: LD_ADDR_VAR 0 8
43140: PUSH
43141: LD_VAR 0 1
43145: PUSH
43146: LD_INT 1
43148: ARRAY
43149: PPUSH
43150: CALL_OW 255
43154: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43155: LD_ADDR_VAR 0 10
43159: PUSH
43160: LD_INT 29
43162: PUSH
43163: LD_INT 91
43165: PUSH
43166: LD_INT 49
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: LIST
43173: ST_TO_ADDR
// if not result then
43174: LD_VAR 0 3
43178: NOT
43179: IFFALSE 43183
// exit ;
43181: GO 43643
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43183: LD_ADDR_VAR 0 5
43187: PUSH
43188: LD_INT 81
43190: PUSH
43191: LD_VAR 0 8
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PPUSH
43200: CALL_OW 69
43204: ST_TO_ADDR
// for i in result do
43205: LD_ADDR_VAR 0 4
43209: PUSH
43210: LD_VAR 0 3
43214: PUSH
43215: FOR_IN
43216: IFFALSE 43641
// begin tag := GetTag ( i ) + 1 ;
43218: LD_ADDR_VAR 0 9
43222: PUSH
43223: LD_VAR 0 4
43227: PPUSH
43228: CALL_OW 110
43232: PUSH
43233: LD_INT 1
43235: PLUS
43236: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43237: LD_ADDR_VAR 0 7
43241: PUSH
43242: LD_VAR 0 4
43246: PPUSH
43247: CALL_OW 250
43251: PPUSH
43252: LD_VAR 0 4
43256: PPUSH
43257: CALL_OW 251
43261: PPUSH
43262: LD_INT 4
43264: PPUSH
43265: CALL 42838 0 3
43269: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43270: LD_VAR 0 4
43274: PPUSH
43275: CALL_OW 247
43279: PUSH
43280: LD_INT 2
43282: EQUAL
43283: PUSH
43284: LD_VAR 0 7
43288: PUSH
43289: LD_INT 2
43291: GREATER
43292: AND
43293: PUSH
43294: LD_VAR 0 4
43298: PPUSH
43299: CALL_OW 264
43303: PUSH
43304: LD_VAR 0 10
43308: IN
43309: NOT
43310: AND
43311: IFFALSE 43350
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43313: LD_VAR 0 4
43317: PPUSH
43318: LD_VAR 0 7
43322: PUSH
43323: LD_INT 1
43325: ARRAY
43326: PUSH
43327: LD_INT 1
43329: ARRAY
43330: PPUSH
43331: LD_VAR 0 7
43335: PUSH
43336: LD_INT 1
43338: ARRAY
43339: PUSH
43340: LD_INT 2
43342: ARRAY
43343: PPUSH
43344: CALL_OW 116
43348: GO 43639
// if path > tag then
43350: LD_VAR 0 2
43354: PUSH
43355: LD_VAR 0 9
43359: GREATER
43360: IFFALSE 43568
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43362: LD_ADDR_VAR 0 6
43366: PUSH
43367: LD_VAR 0 5
43371: PPUSH
43372: LD_INT 91
43374: PUSH
43375: LD_VAR 0 4
43379: PUSH
43380: LD_INT 8
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: PPUSH
43388: CALL_OW 72
43392: ST_TO_ADDR
// if nearEnemy then
43393: LD_VAR 0 6
43397: IFFALSE 43466
// begin if GetWeapon ( i ) = ru_time_lapser then
43399: LD_VAR 0 4
43403: PPUSH
43404: CALL_OW 264
43408: PUSH
43409: LD_INT 49
43411: EQUAL
43412: IFFALSE 43440
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43414: LD_VAR 0 4
43418: PPUSH
43419: LD_VAR 0 6
43423: PPUSH
43424: LD_VAR 0 4
43428: PPUSH
43429: CALL_OW 74
43433: PPUSH
43434: CALL_OW 112
43438: GO 43464
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43440: LD_VAR 0 4
43444: PPUSH
43445: LD_VAR 0 6
43449: PPUSH
43450: LD_VAR 0 4
43454: PPUSH
43455: CALL_OW 74
43459: PPUSH
43460: CALL 44714 0 2
// end else
43464: GO 43566
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43466: LD_VAR 0 4
43470: PPUSH
43471: LD_VAR 0 2
43475: PUSH
43476: LD_VAR 0 9
43480: ARRAY
43481: PUSH
43482: LD_INT 1
43484: ARRAY
43485: PPUSH
43486: LD_VAR 0 2
43490: PUSH
43491: LD_VAR 0 9
43495: ARRAY
43496: PUSH
43497: LD_INT 2
43499: ARRAY
43500: PPUSH
43501: CALL_OW 297
43505: PUSH
43506: LD_INT 6
43508: GREATER
43509: IFFALSE 43552
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43511: LD_VAR 0 4
43515: PPUSH
43516: LD_VAR 0 2
43520: PUSH
43521: LD_VAR 0 9
43525: ARRAY
43526: PUSH
43527: LD_INT 1
43529: ARRAY
43530: PPUSH
43531: LD_VAR 0 2
43535: PUSH
43536: LD_VAR 0 9
43540: ARRAY
43541: PUSH
43542: LD_INT 2
43544: ARRAY
43545: PPUSH
43546: CALL_OW 114
43550: GO 43566
// SetTag ( i , tag ) ;
43552: LD_VAR 0 4
43556: PPUSH
43557: LD_VAR 0 9
43561: PPUSH
43562: CALL_OW 109
// end else
43566: GO 43639
// if enemy then
43568: LD_VAR 0 5
43572: IFFALSE 43639
// begin if GetWeapon ( i ) = ru_time_lapser then
43574: LD_VAR 0 4
43578: PPUSH
43579: CALL_OW 264
43583: PUSH
43584: LD_INT 49
43586: EQUAL
43587: IFFALSE 43615
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43589: LD_VAR 0 4
43593: PPUSH
43594: LD_VAR 0 5
43598: PPUSH
43599: LD_VAR 0 4
43603: PPUSH
43604: CALL_OW 74
43608: PPUSH
43609: CALL_OW 112
43613: GO 43639
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43615: LD_VAR 0 4
43619: PPUSH
43620: LD_VAR 0 5
43624: PPUSH
43625: LD_VAR 0 4
43629: PPUSH
43630: CALL_OW 74
43634: PPUSH
43635: CALL 44714 0 2
// end ; end ;
43639: GO 43215
43641: POP
43642: POP
// end ;
43643: LD_VAR 0 3
43647: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43648: LD_INT 0
43650: PPUSH
43651: PPUSH
43652: PPUSH
// if not unit or IsInUnit ( unit ) then
43653: LD_VAR 0 1
43657: NOT
43658: PUSH
43659: LD_VAR 0 1
43663: PPUSH
43664: CALL_OW 310
43668: OR
43669: IFFALSE 43673
// exit ;
43671: GO 43764
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43673: LD_ADDR_VAR 0 4
43677: PUSH
43678: LD_VAR 0 1
43682: PPUSH
43683: CALL_OW 250
43687: PPUSH
43688: LD_VAR 0 2
43692: PPUSH
43693: LD_INT 1
43695: PPUSH
43696: CALL_OW 272
43700: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43701: LD_ADDR_VAR 0 5
43705: PUSH
43706: LD_VAR 0 1
43710: PPUSH
43711: CALL_OW 251
43715: PPUSH
43716: LD_VAR 0 2
43720: PPUSH
43721: LD_INT 1
43723: PPUSH
43724: CALL_OW 273
43728: ST_TO_ADDR
// if ValidHex ( x , y ) then
43729: LD_VAR 0 4
43733: PPUSH
43734: LD_VAR 0 5
43738: PPUSH
43739: CALL_OW 488
43743: IFFALSE 43764
// ComTurnXY ( unit , x , y ) ;
43745: LD_VAR 0 1
43749: PPUSH
43750: LD_VAR 0 4
43754: PPUSH
43755: LD_VAR 0 5
43759: PPUSH
43760: CALL_OW 118
// end ;
43764: LD_VAR 0 3
43768: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43769: LD_INT 0
43771: PPUSH
43772: PPUSH
// result := false ;
43773: LD_ADDR_VAR 0 3
43777: PUSH
43778: LD_INT 0
43780: ST_TO_ADDR
// if not units then
43781: LD_VAR 0 2
43785: NOT
43786: IFFALSE 43790
// exit ;
43788: GO 43835
// for i in units do
43790: LD_ADDR_VAR 0 4
43794: PUSH
43795: LD_VAR 0 2
43799: PUSH
43800: FOR_IN
43801: IFFALSE 43833
// if See ( side , i ) then
43803: LD_VAR 0 1
43807: PPUSH
43808: LD_VAR 0 4
43812: PPUSH
43813: CALL_OW 292
43817: IFFALSE 43831
// begin result := true ;
43819: LD_ADDR_VAR 0 3
43823: PUSH
43824: LD_INT 1
43826: ST_TO_ADDR
// exit ;
43827: POP
43828: POP
43829: GO 43835
// end ;
43831: GO 43800
43833: POP
43834: POP
// end ;
43835: LD_VAR 0 3
43839: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43840: LD_INT 0
43842: PPUSH
43843: PPUSH
43844: PPUSH
43845: PPUSH
// if not unit or not points then
43846: LD_VAR 0 1
43850: NOT
43851: PUSH
43852: LD_VAR 0 2
43856: NOT
43857: OR
43858: IFFALSE 43862
// exit ;
43860: GO 43952
// dist := 99999 ;
43862: LD_ADDR_VAR 0 5
43866: PUSH
43867: LD_INT 99999
43869: ST_TO_ADDR
// for i in points do
43870: LD_ADDR_VAR 0 4
43874: PUSH
43875: LD_VAR 0 2
43879: PUSH
43880: FOR_IN
43881: IFFALSE 43950
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43883: LD_ADDR_VAR 0 6
43887: PUSH
43888: LD_VAR 0 1
43892: PPUSH
43893: LD_VAR 0 4
43897: PUSH
43898: LD_INT 1
43900: ARRAY
43901: PPUSH
43902: LD_VAR 0 4
43906: PUSH
43907: LD_INT 2
43909: ARRAY
43910: PPUSH
43911: CALL_OW 297
43915: ST_TO_ADDR
// if tmpDist < dist then
43916: LD_VAR 0 6
43920: PUSH
43921: LD_VAR 0 5
43925: LESS
43926: IFFALSE 43948
// begin result := i ;
43928: LD_ADDR_VAR 0 3
43932: PUSH
43933: LD_VAR 0 4
43937: ST_TO_ADDR
// dist := tmpDist ;
43938: LD_ADDR_VAR 0 5
43942: PUSH
43943: LD_VAR 0 6
43947: ST_TO_ADDR
// end ; end ;
43948: GO 43880
43950: POP
43951: POP
// end ;
43952: LD_VAR 0 3
43956: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43957: LD_INT 0
43959: PPUSH
// uc_side := side ;
43960: LD_ADDR_OWVAR 20
43964: PUSH
43965: LD_VAR 0 1
43969: ST_TO_ADDR
// uc_nation := 3 ;
43970: LD_ADDR_OWVAR 21
43974: PUSH
43975: LD_INT 3
43977: ST_TO_ADDR
// vc_chassis := 25 ;
43978: LD_ADDR_OWVAR 37
43982: PUSH
43983: LD_INT 25
43985: ST_TO_ADDR
// vc_engine := engine_siberite ;
43986: LD_ADDR_OWVAR 39
43990: PUSH
43991: LD_INT 3
43993: ST_TO_ADDR
// vc_control := control_computer ;
43994: LD_ADDR_OWVAR 38
43998: PUSH
43999: LD_INT 3
44001: ST_TO_ADDR
// vc_weapon := 59 ;
44002: LD_ADDR_OWVAR 40
44006: PUSH
44007: LD_INT 59
44009: ST_TO_ADDR
// result := CreateVehicle ;
44010: LD_ADDR_VAR 0 5
44014: PUSH
44015: CALL_OW 45
44019: ST_TO_ADDR
// SetDir ( result , d ) ;
44020: LD_VAR 0 5
44024: PPUSH
44025: LD_VAR 0 4
44029: PPUSH
44030: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44034: LD_VAR 0 5
44038: PPUSH
44039: LD_VAR 0 2
44043: PPUSH
44044: LD_VAR 0 3
44048: PPUSH
44049: LD_INT 0
44051: PPUSH
44052: CALL_OW 48
// end ;
44056: LD_VAR 0 5
44060: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44061: LD_INT 0
44063: PPUSH
44064: PPUSH
44065: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44066: LD_ADDR_VAR 0 2
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 0
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44089: LD_VAR 0 1
44093: NOT
44094: PUSH
44095: LD_VAR 0 1
44099: PPUSH
44100: CALL_OW 264
44104: PUSH
44105: LD_INT 12
44107: PUSH
44108: LD_INT 51
44110: PUSH
44111: LD_INT 32
44113: PUSH
44114: LD_INT 89
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: IN
44123: NOT
44124: OR
44125: IFFALSE 44129
// exit ;
44127: GO 44227
// for i := 1 to 3 do
44129: LD_ADDR_VAR 0 3
44133: PUSH
44134: DOUBLE
44135: LD_INT 1
44137: DEC
44138: ST_TO_ADDR
44139: LD_INT 3
44141: PUSH
44142: FOR_TO
44143: IFFALSE 44225
// begin tmp := GetCargo ( cargo , i ) ;
44145: LD_ADDR_VAR 0 4
44149: PUSH
44150: LD_VAR 0 1
44154: PPUSH
44155: LD_VAR 0 3
44159: PPUSH
44160: CALL_OW 289
44164: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44165: LD_ADDR_VAR 0 2
44169: PUSH
44170: LD_VAR 0 2
44174: PPUSH
44175: LD_VAR 0 3
44179: PPUSH
44180: LD_VAR 0 4
44184: PPUSH
44185: CALL_OW 1
44189: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44190: LD_ADDR_VAR 0 2
44194: PUSH
44195: LD_VAR 0 2
44199: PPUSH
44200: LD_INT 4
44202: PPUSH
44203: LD_VAR 0 2
44207: PUSH
44208: LD_INT 4
44210: ARRAY
44211: PUSH
44212: LD_VAR 0 4
44216: PLUS
44217: PPUSH
44218: CALL_OW 1
44222: ST_TO_ADDR
// end ;
44223: GO 44142
44225: POP
44226: POP
// end ;
44227: LD_VAR 0 2
44231: RET
// export function Length ( array ) ; begin
44232: LD_INT 0
44234: PPUSH
// result := array + 0 ;
44235: LD_ADDR_VAR 0 2
44239: PUSH
44240: LD_VAR 0 1
44244: PUSH
44245: LD_INT 0
44247: PLUS
44248: ST_TO_ADDR
// end ;
44249: LD_VAR 0 2
44253: RET
// export function PrepareArray ( array ) ; begin
44254: LD_INT 0
44256: PPUSH
// result := array diff 0 ;
44257: LD_ADDR_VAR 0 2
44261: PUSH
44262: LD_VAR 0 1
44266: PUSH
44267: LD_INT 0
44269: DIFF
44270: ST_TO_ADDR
// if not result [ 1 ] then
44271: LD_VAR 0 2
44275: PUSH
44276: LD_INT 1
44278: ARRAY
44279: NOT
44280: IFFALSE 44300
// result := Delete ( result , 1 ) ;
44282: LD_ADDR_VAR 0 2
44286: PUSH
44287: LD_VAR 0 2
44291: PPUSH
44292: LD_INT 1
44294: PPUSH
44295: CALL_OW 3
44299: ST_TO_ADDR
// end ;
44300: LD_VAR 0 2
44304: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44305: LD_INT 0
44307: PPUSH
44308: PPUSH
44309: PPUSH
44310: PPUSH
// sibRocketRange := 25 ;
44311: LD_ADDR_VAR 0 6
44315: PUSH
44316: LD_INT 25
44318: ST_TO_ADDR
// result := false ;
44319: LD_ADDR_VAR 0 4
44323: PUSH
44324: LD_INT 0
44326: ST_TO_ADDR
// for i := 0 to 5 do
44327: LD_ADDR_VAR 0 5
44331: PUSH
44332: DOUBLE
44333: LD_INT 0
44335: DEC
44336: ST_TO_ADDR
44337: LD_INT 5
44339: PUSH
44340: FOR_TO
44341: IFFALSE 44408
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44343: LD_VAR 0 1
44347: PPUSH
44348: LD_VAR 0 5
44352: PPUSH
44353: LD_VAR 0 6
44357: PPUSH
44358: CALL_OW 272
44362: PPUSH
44363: LD_VAR 0 2
44367: PPUSH
44368: LD_VAR 0 5
44372: PPUSH
44373: LD_VAR 0 6
44377: PPUSH
44378: CALL_OW 273
44382: PPUSH
44383: LD_VAR 0 3
44387: PPUSH
44388: CALL_OW 309
44392: IFFALSE 44406
// begin result := true ;
44394: LD_ADDR_VAR 0 4
44398: PUSH
44399: LD_INT 1
44401: ST_TO_ADDR
// exit ;
44402: POP
44403: POP
44404: GO 44410
// end ;
44406: GO 44340
44408: POP
44409: POP
// end ;
44410: LD_VAR 0 4
44414: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44415: LD_INT 0
44417: PPUSH
44418: PPUSH
44419: PPUSH
// if btype = b_depot then
44420: LD_VAR 0 2
44424: PUSH
44425: LD_INT 0
44427: EQUAL
44428: IFFALSE 44440
// begin result := true ;
44430: LD_ADDR_VAR 0 3
44434: PUSH
44435: LD_INT 1
44437: ST_TO_ADDR
// exit ;
44438: GO 44556
// end ; pom := GetBase ( depot ) ;
44440: LD_ADDR_VAR 0 4
44444: PUSH
44445: LD_VAR 0 1
44449: PPUSH
44450: CALL_OW 274
44454: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44455: LD_ADDR_VAR 0 5
44459: PUSH
44460: LD_VAR 0 2
44464: PPUSH
44465: LD_VAR 0 1
44469: PPUSH
44470: CALL_OW 248
44474: PPUSH
44475: CALL_OW 450
44479: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44480: LD_ADDR_VAR 0 3
44484: PUSH
44485: LD_VAR 0 4
44489: PPUSH
44490: LD_INT 1
44492: PPUSH
44493: CALL_OW 275
44497: PUSH
44498: LD_VAR 0 5
44502: PUSH
44503: LD_INT 1
44505: ARRAY
44506: GREATEREQUAL
44507: PUSH
44508: LD_VAR 0 4
44512: PPUSH
44513: LD_INT 2
44515: PPUSH
44516: CALL_OW 275
44520: PUSH
44521: LD_VAR 0 5
44525: PUSH
44526: LD_INT 2
44528: ARRAY
44529: GREATEREQUAL
44530: AND
44531: PUSH
44532: LD_VAR 0 4
44536: PPUSH
44537: LD_INT 3
44539: PPUSH
44540: CALL_OW 275
44544: PUSH
44545: LD_VAR 0 5
44549: PUSH
44550: LD_INT 3
44552: ARRAY
44553: GREATEREQUAL
44554: AND
44555: ST_TO_ADDR
// end ;
44556: LD_VAR 0 3
44560: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44561: LD_INT 0
44563: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44564: LD_VAR 0 1
44568: PPUSH
44569: LD_VAR 0 2
44573: PPUSH
44574: LD_INT 0
44576: PPUSH
44577: LD_INT 0
44579: PPUSH
44580: LD_INT 1
44582: PPUSH
44583: LD_INT 0
44585: PPUSH
44586: CALL_OW 587
// end ;
44590: LD_VAR 0 3
44594: RET
// export function CenterOnNow ( unit ) ; begin
44595: LD_INT 0
44597: PPUSH
// result := IsInUnit ( unit ) ;
44598: LD_ADDR_VAR 0 2
44602: PUSH
44603: LD_VAR 0 1
44607: PPUSH
44608: CALL_OW 310
44612: ST_TO_ADDR
// if not result then
44613: LD_VAR 0 2
44617: NOT
44618: IFFALSE 44630
// result := unit ;
44620: LD_ADDR_VAR 0 2
44624: PUSH
44625: LD_VAR 0 1
44629: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44630: LD_VAR 0 1
44634: PPUSH
44635: CALL_OW 87
// end ;
44639: LD_VAR 0 2
44643: RET
// export function ComMoveHex ( unit , hex ) ; begin
44644: LD_INT 0
44646: PPUSH
// if not hex then
44647: LD_VAR 0 2
44651: NOT
44652: IFFALSE 44656
// exit ;
44654: GO 44709
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44656: LD_VAR 0 2
44660: PUSH
44661: LD_INT 1
44663: ARRAY
44664: PPUSH
44665: LD_VAR 0 2
44669: PUSH
44670: LD_INT 2
44672: ARRAY
44673: PPUSH
44674: CALL_OW 428
44678: IFFALSE 44682
// exit ;
44680: GO 44709
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44682: LD_VAR 0 1
44686: PPUSH
44687: LD_VAR 0 2
44691: PUSH
44692: LD_INT 1
44694: ARRAY
44695: PPUSH
44696: LD_VAR 0 2
44700: PUSH
44701: LD_INT 2
44703: ARRAY
44704: PPUSH
44705: CALL_OW 111
// end ;
44709: LD_VAR 0 3
44713: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44714: LD_INT 0
44716: PPUSH
44717: PPUSH
44718: PPUSH
// if not unit or not enemy then
44719: LD_VAR 0 1
44723: NOT
44724: PUSH
44725: LD_VAR 0 2
44729: NOT
44730: OR
44731: IFFALSE 44735
// exit ;
44733: GO 44859
// x := GetX ( enemy ) ;
44735: LD_ADDR_VAR 0 4
44739: PUSH
44740: LD_VAR 0 2
44744: PPUSH
44745: CALL_OW 250
44749: ST_TO_ADDR
// y := GetY ( enemy ) ;
44750: LD_ADDR_VAR 0 5
44754: PUSH
44755: LD_VAR 0 2
44759: PPUSH
44760: CALL_OW 251
44764: ST_TO_ADDR
// if ValidHex ( x , y ) then
44765: LD_VAR 0 4
44769: PPUSH
44770: LD_VAR 0 5
44774: PPUSH
44775: CALL_OW 488
44779: IFFALSE 44859
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44781: LD_VAR 0 2
44785: PPUSH
44786: CALL_OW 247
44790: PUSH
44791: LD_INT 3
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: IN
44801: PUSH
44802: LD_VAR 0 1
44806: PPUSH
44807: CALL_OW 255
44811: PPUSH
44812: LD_VAR 0 2
44816: PPUSH
44817: CALL_OW 292
44821: OR
44822: IFFALSE 44840
// ComAttackUnit ( unit , enemy ) else
44824: LD_VAR 0 1
44828: PPUSH
44829: LD_VAR 0 2
44833: PPUSH
44834: CALL_OW 115
44838: GO 44859
// ComAgressiveMove ( unit , x , y ) ;
44840: LD_VAR 0 1
44844: PPUSH
44845: LD_VAR 0 4
44849: PPUSH
44850: LD_VAR 0 5
44854: PPUSH
44855: CALL_OW 114
// end ;
44859: LD_VAR 0 3
44863: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44864: LD_INT 0
44866: PPUSH
44867: PPUSH
44868: PPUSH
// list := AreaToList ( area , 0 ) ;
44869: LD_ADDR_VAR 0 5
44873: PUSH
44874: LD_VAR 0 1
44878: PPUSH
44879: LD_INT 0
44881: PPUSH
44882: CALL_OW 517
44886: ST_TO_ADDR
// if not list then
44887: LD_VAR 0 5
44891: NOT
44892: IFFALSE 44896
// exit ;
44894: GO 45026
// if all then
44896: LD_VAR 0 2
44900: IFFALSE 44988
// begin for i := 1 to list [ 1 ] do
44902: LD_ADDR_VAR 0 4
44906: PUSH
44907: DOUBLE
44908: LD_INT 1
44910: DEC
44911: ST_TO_ADDR
44912: LD_VAR 0 5
44916: PUSH
44917: LD_INT 1
44919: ARRAY
44920: PUSH
44921: FOR_TO
44922: IFFALSE 44984
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44924: LD_ADDR_VAR 0 3
44928: PUSH
44929: LD_VAR 0 3
44933: PPUSH
44934: LD_VAR 0 3
44938: PUSH
44939: LD_INT 1
44941: PLUS
44942: PPUSH
44943: LD_VAR 0 5
44947: PUSH
44948: LD_INT 1
44950: ARRAY
44951: PUSH
44952: LD_VAR 0 4
44956: ARRAY
44957: PUSH
44958: LD_VAR 0 5
44962: PUSH
44963: LD_INT 2
44965: ARRAY
44966: PUSH
44967: LD_VAR 0 4
44971: ARRAY
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PPUSH
44977: CALL_OW 1
44981: ST_TO_ADDR
44982: GO 44921
44984: POP
44985: POP
// exit ;
44986: GO 45026
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44988: LD_ADDR_VAR 0 3
44992: PUSH
44993: LD_VAR 0 5
44997: PUSH
44998: LD_INT 1
45000: ARRAY
45001: PUSH
45002: LD_INT 1
45004: ARRAY
45005: PUSH
45006: LD_VAR 0 5
45010: PUSH
45011: LD_INT 2
45013: ARRAY
45014: PUSH
45015: LD_INT 1
45017: ARRAY
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: EMPTY
45024: LIST
45025: ST_TO_ADDR
// end ;
45026: LD_VAR 0 3
45030: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45031: LD_INT 0
45033: PPUSH
45034: PPUSH
// list := AreaToList ( area , 0 ) ;
45035: LD_ADDR_VAR 0 4
45039: PUSH
45040: LD_VAR 0 1
45044: PPUSH
45045: LD_INT 0
45047: PPUSH
45048: CALL_OW 517
45052: ST_TO_ADDR
// if not list then
45053: LD_VAR 0 4
45057: NOT
45058: IFFALSE 45062
// exit ;
45060: GO 45103
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45062: LD_ADDR_VAR 0 3
45066: PUSH
45067: LD_VAR 0 4
45071: PUSH
45072: LD_INT 1
45074: ARRAY
45075: PUSH
45076: LD_INT 1
45078: ARRAY
45079: PUSH
45080: LD_VAR 0 4
45084: PUSH
45085: LD_INT 2
45087: ARRAY
45088: PUSH
45089: LD_INT 1
45091: ARRAY
45092: PUSH
45093: LD_VAR 0 2
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: LIST
45102: ST_TO_ADDR
// end ;
45103: LD_VAR 0 3
45107: RET
// export function First ( array ) ; begin
45108: LD_INT 0
45110: PPUSH
// if not array then
45111: LD_VAR 0 1
45115: NOT
45116: IFFALSE 45120
// exit ;
45118: GO 45134
// result := array [ 1 ] ;
45120: LD_ADDR_VAR 0 2
45124: PUSH
45125: LD_VAR 0 1
45129: PUSH
45130: LD_INT 1
45132: ARRAY
45133: ST_TO_ADDR
// end ;
45134: LD_VAR 0 2
45138: RET
// export function Last ( array ) ; begin
45139: LD_INT 0
45141: PPUSH
// if not array then
45142: LD_VAR 0 1
45146: NOT
45147: IFFALSE 45151
// exit ;
45149: GO 45167
// result := array [ array ] ;
45151: LD_ADDR_VAR 0 2
45155: PUSH
45156: LD_VAR 0 1
45160: PUSH
45161: LD_VAR 0 1
45165: ARRAY
45166: ST_TO_ADDR
// end ;
45167: LD_VAR 0 2
45171: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45172: LD_INT 0
45174: PPUSH
45175: PPUSH
// result := [ ] ;
45176: LD_ADDR_VAR 0 5
45180: PUSH
45181: EMPTY
45182: ST_TO_ADDR
// if not array then
45183: LD_VAR 0 1
45187: NOT
45188: IFFALSE 45192
// exit ;
45190: GO 45304
// for i := 1 to array do
45192: LD_ADDR_VAR 0 6
45196: PUSH
45197: DOUBLE
45198: LD_INT 1
45200: DEC
45201: ST_TO_ADDR
45202: LD_VAR 0 1
45206: PUSH
45207: FOR_TO
45208: IFFALSE 45302
// if array [ i ] [ index ] = value then
45210: LD_VAR 0 1
45214: PUSH
45215: LD_VAR 0 6
45219: ARRAY
45220: PUSH
45221: LD_VAR 0 2
45225: ARRAY
45226: PUSH
45227: LD_VAR 0 3
45231: EQUAL
45232: IFFALSE 45300
// begin if indexColumn then
45234: LD_VAR 0 4
45238: IFFALSE 45274
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45240: LD_ADDR_VAR 0 5
45244: PUSH
45245: LD_VAR 0 5
45249: PPUSH
45250: LD_VAR 0 1
45254: PUSH
45255: LD_VAR 0 6
45259: ARRAY
45260: PUSH
45261: LD_VAR 0 4
45265: ARRAY
45266: PPUSH
45267: CALL 40492 0 2
45271: ST_TO_ADDR
45272: GO 45300
// result := Join ( result , array [ i ] ) ;
45274: LD_ADDR_VAR 0 5
45278: PUSH
45279: LD_VAR 0 5
45283: PPUSH
45284: LD_VAR 0 1
45288: PUSH
45289: LD_VAR 0 6
45293: ARRAY
45294: PPUSH
45295: CALL 40492 0 2
45299: ST_TO_ADDR
// end ;
45300: GO 45207
45302: POP
45303: POP
// end ;
45304: LD_VAR 0 5
45308: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45309: LD_INT 0
45311: PPUSH
// if not vehicles or not parkingPoint then
45312: LD_VAR 0 1
45316: NOT
45317: PUSH
45318: LD_VAR 0 2
45322: NOT
45323: OR
45324: IFFALSE 45328
// exit ;
45326: GO 45426
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45328: LD_ADDR_VAR 0 1
45332: PUSH
45333: LD_VAR 0 1
45337: PPUSH
45338: LD_INT 50
45340: PUSH
45341: EMPTY
45342: LIST
45343: PUSH
45344: LD_INT 3
45346: PUSH
45347: LD_INT 92
45349: PUSH
45350: LD_VAR 0 2
45354: PUSH
45355: LD_INT 1
45357: ARRAY
45358: PUSH
45359: LD_VAR 0 2
45363: PUSH
45364: LD_INT 2
45366: ARRAY
45367: PUSH
45368: LD_INT 8
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PPUSH
45385: CALL_OW 72
45389: ST_TO_ADDR
// if not vehicles then
45390: LD_VAR 0 1
45394: NOT
45395: IFFALSE 45399
// exit ;
45397: GO 45426
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45399: LD_VAR 0 1
45403: PPUSH
45404: LD_VAR 0 2
45408: PUSH
45409: LD_INT 1
45411: ARRAY
45412: PPUSH
45413: LD_VAR 0 2
45417: PUSH
45418: LD_INT 2
45420: ARRAY
45421: PPUSH
45422: CALL_OW 111
// end ;
45426: LD_VAR 0 3
45430: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45431: LD_INT 0
45433: PPUSH
45434: PPUSH
45435: PPUSH
// if not side or not area then
45436: LD_VAR 0 1
45440: NOT
45441: PUSH
45442: LD_VAR 0 2
45446: NOT
45447: OR
45448: IFFALSE 45452
// exit ;
45450: GO 45571
// tmp := AreaToList ( area , 0 ) ;
45452: LD_ADDR_VAR 0 5
45456: PUSH
45457: LD_VAR 0 2
45461: PPUSH
45462: LD_INT 0
45464: PPUSH
45465: CALL_OW 517
45469: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45470: LD_ADDR_VAR 0 4
45474: PUSH
45475: DOUBLE
45476: LD_INT 1
45478: DEC
45479: ST_TO_ADDR
45480: LD_VAR 0 5
45484: PUSH
45485: LD_INT 1
45487: ARRAY
45488: PUSH
45489: FOR_TO
45490: IFFALSE 45569
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45492: LD_VAR 0 5
45496: PUSH
45497: LD_INT 1
45499: ARRAY
45500: PUSH
45501: LD_VAR 0 4
45505: ARRAY
45506: PPUSH
45507: LD_VAR 0 5
45511: PUSH
45512: LD_INT 2
45514: ARRAY
45515: PUSH
45516: LD_VAR 0 4
45520: ARRAY
45521: PPUSH
45522: CALL_OW 351
45526: IFFALSE 45567
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45528: LD_VAR 0 5
45532: PUSH
45533: LD_INT 1
45535: ARRAY
45536: PUSH
45537: LD_VAR 0 4
45541: ARRAY
45542: PPUSH
45543: LD_VAR 0 5
45547: PUSH
45548: LD_INT 2
45550: ARRAY
45551: PUSH
45552: LD_VAR 0 4
45556: ARRAY
45557: PPUSH
45558: LD_VAR 0 1
45562: PPUSH
45563: CALL_OW 244
// end ;
45567: GO 45489
45569: POP
45570: POP
// end ; end_of_file end_of_file
45571: LD_VAR 0 3
45575: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45576: LD_INT 0
45578: PPUSH
45579: PPUSH
// disable ( mpActive ) ;
45580: LD_INT 100
45582: DISABLE_MARKED
// disable ( mpWin ) ;
45583: LD_INT 101
45585: DISABLE_MARKED
// disable ( mpLose ) ;
45586: LD_INT 102
45588: DISABLE_MARKED
// mpGameType := 0 ;
45589: LD_ADDR_EXP 1
45593: PUSH
45594: LD_INT 0
45596: ST_TO_ADDR
// mpGameSettings := [ ] ;
45597: LD_ADDR_EXP 4
45601: PUSH
45602: EMPTY
45603: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45604: LD_ADDR_EXP 2
45608: PUSH
45609: EMPTY
45610: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45611: LD_ADDR_EXP 3
45615: PUSH
45616: EMPTY
45617: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45618: LD_ADDR_EXP 27
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45633: LD_ADDR_EXP 10
45637: PUSH
45638: EMPTY
45639: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45640: LD_ADDR_EXP 11
45644: PUSH
45645: EMPTY
45646: ST_TO_ADDR
// mpDepots := [ ] ;
45647: LD_ADDR_EXP 12
45651: PUSH
45652: EMPTY
45653: ST_TO_ADDR
// mpBuildings := [ ] ;
45654: LD_ADDR_EXP 15
45658: PUSH
45659: EMPTY
45660: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45661: LD_ADDR_EXP 16
45665: PUSH
45666: EMPTY
45667: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45668: LD_ADDR_EXP 17
45672: PUSH
45673: EMPTY
45674: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45675: LD_ADDR_EXP 18
45679: PUSH
45680: EMPTY
45681: ST_TO_ADDR
// mpStartingResources := [ ] ;
45682: LD_ADDR_EXP 13
45686: PUSH
45687: EMPTY
45688: ST_TO_ADDR
// mpStartPos := [ ] ;
45689: LD_ADDR_EXP 19
45693: PUSH
45694: EMPTY
45695: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45696: LD_ADDR_EXP 20
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45705: LD_ADDR_EXP 21
45709: PUSH
45710: EMPTY
45711: ST_TO_ADDR
// mpApemans := [ ] ;
45712: LD_ADDR_EXP 28
45716: PUSH
45717: EMPTY
45718: ST_TO_ADDR
// mpApemansArea := [ ] ;
45719: LD_ADDR_EXP 29
45723: PUSH
45724: EMPTY
45725: ST_TO_ADDR
// mpRespawn := [ ] ;
45726: LD_ADDR_EXP 30
45730: PUSH
45731: EMPTY
45732: ST_TO_ADDR
// mpKingArea := 0 ;
45733: LD_ADDR_EXP 31
45737: PUSH
45738: LD_INT 0
45740: ST_TO_ADDR
// mpPoints := [ ] ;
45741: LD_ADDR_EXP 32
45745: PUSH
45746: EMPTY
45747: ST_TO_ADDR
// mpVehicles := 0 ;
45748: LD_ADDR_EXP 33
45752: PUSH
45753: LD_INT 0
45755: ST_TO_ADDR
// mpShipments := 0 ;
45756: LD_ADDR_EXP 25
45760: PUSH
45761: LD_INT 0
45763: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45764: LD_ADDR_EXP 37
45768: PUSH
45769: EMPTY
45770: PUSH
45771: EMPTY
45772: PUSH
45773: EMPTY
45774: PUSH
45775: EMPTY
45776: PUSH
45777: EMPTY
45778: PUSH
45779: EMPTY
45780: PUSH
45781: EMPTY
45782: PUSH
45783: EMPTY
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: ST_TO_ADDR
// mpEmissions := 0 ;
45795: LD_ADDR_EXP 34
45799: PUSH
45800: LD_INT 0
45802: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45803: LD_ADDR_EXP 23
45807: PUSH
45808: LD_INT 3
45810: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45811: LD_ADDR_EXP 22
45815: PUSH
45816: LD_INT 15
45818: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45819: LD_ADDR_EXP 35
45823: PUSH
45824: LD_INT 0
45826: ST_TO_ADDR
// mpGameActive := false ;
45827: LD_ADDR_EXP 36
45831: PUSH
45832: LD_INT 0
45834: ST_TO_ADDR
// mpBlockRespThread := false ;
45835: LD_ADDR_EXP 38
45839: PUSH
45840: LD_INT 0
45842: ST_TO_ADDR
// for i := 1 to 32 do
45843: LD_ADDR_VAR 0 2
45847: PUSH
45848: DOUBLE
45849: LD_INT 1
45851: DEC
45852: ST_TO_ADDR
45853: LD_INT 32
45855: PUSH
45856: FOR_TO
45857: IFFALSE 45884
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
45859: LD_ADDR_EXP 4
45863: PUSH
45864: LD_EXP 4
45868: PPUSH
45869: LD_VAR 0 2
45873: PPUSH
45874: LD_INT 0
45876: PPUSH
45877: CALL_OW 1
45881: ST_TO_ADDR
45882: GO 45856
45884: POP
45885: POP
// end ;
45886: LD_VAR 0 1
45890: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
45891: LD_INT 0
45893: PPUSH
45894: PPUSH
45895: PPUSH
45896: PPUSH
45897: PPUSH
45898: PPUSH
45899: PPUSH
45900: PPUSH
45901: PPUSH
45902: PPUSH
45903: PPUSH
45904: PPUSH
45905: PPUSH
45906: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
45907: LD_ADDR_VAR 0 14
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: LD_INT 3
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: LIST
45925: ST_TO_ADDR
// for i in gameTypes do
45926: LD_ADDR_VAR 0 2
45930: PUSH
45931: LD_VAR 0 14
45935: PUSH
45936: FOR_IN
45937: IFFALSE 45946
// disable ( i ) ;
45939: LD_VAR 0 2
45943: DISABLE_MARKED
45944: GO 45936
45946: POP
45947: POP
// if Multiplayer then
45948: LD_OWVAR 4
45952: IFFALSE 46136
// begin mpGameType := mp_game_type ;
45954: LD_ADDR_EXP 1
45958: PUSH
45959: LD_OWVAR 6
45963: ST_TO_ADDR
// your_side := mp_player_side ;
45964: LD_ADDR_OWVAR 2
45968: PUSH
45969: LD_OWVAR 7
45973: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
45974: LD_ADDR_EXP 5
45978: PUSH
45979: LD_OWVAR 17
45983: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
45984: LD_ADDR_EXP 6
45988: PUSH
45989: LD_OWVAR 15
45993: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
45994: LD_ADDR_EXP 7
45998: PUSH
45999: LD_OWVAR 16
46003: ST_TO_ADDR
// mpTeams := mp_teams ;
46004: LD_ADDR_EXP 8
46008: PUSH
46009: LD_OWVAR 12
46013: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46014: LD_ADDR_VAR 0 2
46018: PUSH
46019: DOUBLE
46020: LD_INT 1
46022: DEC
46023: ST_TO_ADDR
46024: LD_EXP 2
46028: PPUSH
46029: CALL 4883 0 1
46033: PUSH
46034: FOR_TO
46035: IFFALSE 46111
// begin setting := mpGameSettingsKeys [ i ] ;
46037: LD_ADDR_VAR 0 12
46041: PUSH
46042: LD_EXP 2
46046: PUSH
46047: LD_VAR 0 2
46051: ARRAY
46052: ST_TO_ADDR
// if setting then
46053: LD_VAR 0 12
46057: IFFALSE 46109
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46059: LD_ADDR_EXP 4
46063: PUSH
46064: LD_EXP 4
46068: PPUSH
46069: LD_VAR 0 2
46073: PPUSH
46074: LD_EXP 3
46078: PUSH
46079: LD_VAR 0 2
46083: ARRAY
46084: PUSH
46085: LD_VAR 0 2
46089: PUSH
46090: LD_INT 1
46092: MINUS
46093: PPUSH
46094: CALL_OW 426
46098: PUSH
46099: LD_INT 1
46101: PLUS
46102: ARRAY
46103: PPUSH
46104: CALL_OW 1
46108: ST_TO_ADDR
// end ;
46109: GO 46034
46111: POP
46112: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46113: LD_ADDR_EXP 9
46117: PUSH
46118: LD_EXP 6
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: DIFF
46129: PUSH
46130: LD_INT 1
46132: GREATER
46133: ST_TO_ADDR
// end else
46134: GO 46136
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46136: LD_EXP 1
46140: PPUSH
46141: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
46145: LD_EXP 16
46149: PPUSH
46150: CALL 4883 0 1
46154: IFFALSE 46185
// begin for i in mpMarkedAreas do
46156: LD_ADDR_VAR 0 2
46160: PUSH
46161: LD_EXP 16
46165: PUSH
46166: FOR_IN
46167: IFFALSE 46183
// SetAreaMapShow ( i , 0 ) ;
46169: LD_VAR 0 2
46173: PPUSH
46174: LD_INT 0
46176: PPUSH
46177: CALL_OW 424
46181: GO 46166
46183: POP
46184: POP
// end ; for i := 1 to 8 do
46185: LD_ADDR_VAR 0 2
46189: PUSH
46190: DOUBLE
46191: LD_INT 1
46193: DEC
46194: ST_TO_ADDR
46195: LD_INT 8
46197: PUSH
46198: FOR_TO
46199: IFFALSE 47415
// begin if not mpSidePositions [ i ] then
46201: LD_EXP 5
46205: PUSH
46206: LD_VAR 0 2
46210: ARRAY
46211: NOT
46212: IFFALSE 46216
// continue ;
46214: GO 46198
// side := i ;
46216: LD_ADDR_VAR 0 7
46220: PUSH
46221: LD_VAR 0 2
46225: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46226: LD_ADDR_VAR 0 9
46230: PUSH
46231: LD_EXP 7
46235: PUSH
46236: LD_VAR 0 2
46240: ARRAY
46241: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46242: LD_ADDR_VAR 0 8
46246: PUSH
46247: LD_EXP 5
46251: PUSH
46252: LD_VAR 0 2
46256: ARRAY
46257: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46258: LD_EXP 10
46262: PPUSH
46263: CALL 4883 0 1
46267: IFFALSE 46344
// begin for j in mpOilDeposits [ pos ] do
46269: LD_ADDR_VAR 0 3
46273: PUSH
46274: LD_EXP 10
46278: PUSH
46279: LD_VAR 0 8
46283: ARRAY
46284: PUSH
46285: FOR_IN
46286: IFFALSE 46342
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46288: LD_VAR 0 3
46292: PUSH
46293: LD_INT 1
46295: ARRAY
46296: PPUSH
46297: LD_VAR 0 3
46301: PUSH
46302: LD_INT 2
46304: ARRAY
46305: PPUSH
46306: LD_INT 2
46308: PPUSH
46309: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46313: LD_VAR 0 3
46317: PUSH
46318: LD_INT 1
46320: ARRAY
46321: PPUSH
46322: LD_VAR 0 3
46326: PUSH
46327: LD_INT 2
46329: ARRAY
46330: PPUSH
46331: LD_VAR 0 7
46335: PPUSH
46336: CALL_OW 441
// end ;
46340: GO 46285
46342: POP
46343: POP
// end ; if Count ( mpSibDeposits ) then
46344: LD_EXP 11
46348: PPUSH
46349: CALL 4883 0 1
46353: IFFALSE 46430
// begin for j in mpSibDeposits [ pos ] do
46355: LD_ADDR_VAR 0 3
46359: PUSH
46360: LD_EXP 11
46364: PUSH
46365: LD_VAR 0 8
46369: ARRAY
46370: PUSH
46371: FOR_IN
46372: IFFALSE 46428
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46374: LD_VAR 0 3
46378: PUSH
46379: LD_INT 1
46381: ARRAY
46382: PPUSH
46383: LD_VAR 0 3
46387: PUSH
46388: LD_INT 2
46390: ARRAY
46391: PPUSH
46392: LD_INT 3
46394: PPUSH
46395: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46399: LD_VAR 0 3
46403: PUSH
46404: LD_INT 1
46406: ARRAY
46407: PPUSH
46408: LD_VAR 0 3
46412: PUSH
46413: LD_INT 2
46415: ARRAY
46416: PPUSH
46417: LD_VAR 0 7
46421: PPUSH
46422: CALL_OW 441
// end ;
46426: GO 46371
46428: POP
46429: POP
// end ; InitBc ;
46430: CALL_OW 21
// InitUc ;
46434: CALL_OW 18
// uc_side := side ;
46438: LD_ADDR_OWVAR 20
46442: PUSH
46443: LD_VAR 0 7
46447: ST_TO_ADDR
// uc_nation := nation ;
46448: LD_ADDR_OWVAR 21
46452: PUSH
46453: LD_VAR 0 9
46457: ST_TO_ADDR
// if Count ( mpDepots ) then
46458: LD_EXP 12
46462: PPUSH
46463: CALL 4883 0 1
46467: IFFALSE 46637
// begin bc_level := 0 ;
46469: LD_ADDR_OWVAR 43
46473: PUSH
46474: LD_INT 0
46476: ST_TO_ADDR
// bc_type := b_depot ;
46477: LD_ADDR_OWVAR 42
46481: PUSH
46482: LD_INT 0
46484: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46485: LD_ADDR_VAR 0 4
46489: PUSH
46490: LD_EXP 12
46494: PUSH
46495: LD_VAR 0 8
46499: ARRAY
46500: PUSH
46501: LD_INT 1
46503: ARRAY
46504: PPUSH
46505: LD_EXP 12
46509: PUSH
46510: LD_VAR 0 8
46514: ARRAY
46515: PUSH
46516: LD_INT 2
46518: ARRAY
46519: PPUSH
46520: LD_EXP 12
46524: PUSH
46525: LD_VAR 0 8
46529: ARRAY
46530: PUSH
46531: LD_INT 3
46533: ARRAY
46534: PPUSH
46535: CALL_OW 47
46539: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46540: LD_VAR 0 4
46544: PPUSH
46545: LD_STRING @
46547: PUSH
46548: LD_VAR 0 7
46552: STR
46553: PPUSH
46554: CALL_OW 500
// SetTag ( b , side ) ;
46558: LD_VAR 0 4
46562: PPUSH
46563: LD_VAR 0 7
46567: PPUSH
46568: CALL_OW 109
// if Count ( mpStartingResources ) then
46572: LD_EXP 13
46576: PPUSH
46577: CALL 4883 0 1
46581: IFFALSE 46635
// begin for j := 1 to mpStartingResources do
46583: LD_ADDR_VAR 0 3
46587: PUSH
46588: DOUBLE
46589: LD_INT 1
46591: DEC
46592: ST_TO_ADDR
46593: LD_EXP 13
46597: PUSH
46598: FOR_TO
46599: IFFALSE 46633
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46601: LD_VAR 0 4
46605: PPUSH
46606: CALL_OW 274
46610: PPUSH
46611: LD_VAR 0 3
46615: PPUSH
46616: LD_EXP 13
46620: PUSH
46621: LD_VAR 0 3
46625: ARRAY
46626: PPUSH
46627: CALL_OW 277
46631: GO 46598
46633: POP
46634: POP
// end ; end else
46635: GO 46784
// if Count ( mpStartingResources ) then
46637: LD_EXP 13
46641: PPUSH
46642: CALL 4883 0 1
46646: IFFALSE 46784
// begin for j := 1 to mpStartingResources do
46648: LD_ADDR_VAR 0 3
46652: PUSH
46653: DOUBLE
46654: LD_INT 1
46656: DEC
46657: ST_TO_ADDR
46658: LD_EXP 13
46662: PUSH
46663: FOR_TO
46664: IFFALSE 46782
// begin resources := mpStartingResources [ j ] ;
46666: LD_ADDR_VAR 0 13
46670: PUSH
46671: LD_EXP 13
46675: PUSH
46676: LD_VAR 0 3
46680: ARRAY
46681: ST_TO_ADDR
// repeat if resources >= 50 then
46682: LD_VAR 0 13
46686: PUSH
46687: LD_INT 50
46689: GREATEREQUAL
46690: IFFALSE 46736
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46692: LD_VAR 0 3
46696: PPUSH
46697: LD_INT 5
46699: PPUSH
46700: LD_VAR 0 5
46704: PPUSH
46705: LD_VAR 0 6
46709: PPUSH
46710: LD_INT 4
46712: PPUSH
46713: LD_INT 0
46715: PPUSH
46716: CALL_OW 60
// resources := resources - 50 ;
46720: LD_ADDR_VAR 0 13
46724: PUSH
46725: LD_VAR 0 13
46729: PUSH
46730: LD_INT 50
46732: MINUS
46733: ST_TO_ADDR
// end else
46734: GO 46770
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46736: LD_VAR 0 3
46740: PPUSH
46741: LD_VAR 0 13
46745: PUSH
46746: LD_INT 10
46748: DIV
46749: PPUSH
46750: LD_VAR 0 5
46754: PPUSH
46755: LD_VAR 0 6
46759: PPUSH
46760: LD_INT 4
46762: PPUSH
46763: LD_INT 0
46765: PPUSH
46766: CALL_OW 60
// until resources <= 0 ;
46770: LD_VAR 0 13
46774: PUSH
46775: LD_INT 0
46777: LESSEQUAL
46778: IFFALSE 46682
// end ;
46780: GO 46663
46782: POP
46783: POP
// end ; if Count ( mpBuildings ) then
46784: LD_EXP 15
46788: PPUSH
46789: CALL 4883 0 1
46793: IFFALSE 46871
// begin for j in mpBuildings [ pos ] do
46795: LD_ADDR_VAR 0 3
46799: PUSH
46800: LD_EXP 15
46804: PUSH
46805: LD_VAR 0 8
46809: ARRAY
46810: PUSH
46811: FOR_IN
46812: IFFALSE 46869
// begin bc_level := 0 ;
46814: LD_ADDR_OWVAR 43
46818: PUSH
46819: LD_INT 0
46821: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46822: LD_ADDR_OWVAR 42
46826: PUSH
46827: LD_VAR 0 3
46831: PUSH
46832: LD_INT 1
46834: ARRAY
46835: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46836: LD_VAR 0 3
46840: PUSH
46841: LD_INT 2
46843: ARRAY
46844: PPUSH
46845: LD_VAR 0 3
46849: PUSH
46850: LD_INT 3
46852: ARRAY
46853: PPUSH
46854: LD_VAR 0 3
46858: PUSH
46859: LD_INT 4
46861: ARRAY
46862: PPUSH
46863: CALL_OW 47
// end ;
46867: GO 46811
46869: POP
46870: POP
// end ; if mpBattleFlag > - 1 then
46871: LD_EXP 20
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: GREATER
46880: IFFALSE 47039
// begin x := mpStartPos [ pos ] [ 1 ] ;
46882: LD_ADDR_VAR 0 5
46886: PUSH
46887: LD_EXP 19
46891: PUSH
46892: LD_VAR 0 8
46896: ARRAY
46897: PUSH
46898: LD_INT 1
46900: ARRAY
46901: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
46902: LD_ADDR_VAR 0 6
46906: PUSH
46907: LD_EXP 19
46911: PUSH
46912: LD_VAR 0 8
46916: ARRAY
46917: PUSH
46918: LD_INT 2
46920: ARRAY
46921: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
46922: LD_VAR 0 5
46926: PPUSH
46927: LD_VAR 0 6
46931: PPUSH
46932: LD_INT 12
46934: PPUSH
46935: LD_INT 2
46937: PPUSH
46938: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
46942: LD_ADDR_EXP 21
46946: PUSH
46947: LD_EXP 21
46951: PPUSH
46952: LD_VAR 0 7
46956: PPUSH
46957: LD_VAR 0 7
46961: PPUSH
46962: LD_VAR 0 5
46966: PPUSH
46967: LD_VAR 0 6
46971: PPUSH
46972: LD_INT 1
46974: PUSH
46975: LD_INT 100
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: LD_INT 70
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 3
46994: PUSH
46995: LD_INT 40
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 10
47004: PUSH
47005: LD_INT 25
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 20
47014: PUSH
47015: LD_INT 100
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: PPUSH
47029: CALL_OW 418
47033: PPUSH
47034: CALL_OW 1
47038: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47039: LD_EXP 24
47043: PUSH
47044: LD_INT 20
47046: PPUSH
47047: LD_VAR 0 7
47051: PPUSH
47052: CALL_OW 321
47056: PUSH
47057: LD_INT 1
47059: EQUAL
47060: AND
47061: IFFALSE 47078
// SetTech ( tech_SibDet , side , state_researched ) ;
47063: LD_INT 20
47065: PPUSH
47066: LD_VAR 0 7
47070: PPUSH
47071: LD_INT 2
47073: PPUSH
47074: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47078: LD_INT 24
47080: PPUSH
47081: LD_VAR 0 7
47085: PPUSH
47086: LD_INT 0
47088: PPUSH
47089: CALL_OW 322
// if mpSibBomb = 1 then
47093: LD_EXP 26
47097: PUSH
47098: LD_INT 1
47100: EQUAL
47101: IFFALSE 47120
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47103: LD_INT 25
47105: PPUSH
47106: LD_VAR 0 7
47110: PPUSH
47111: LD_INT 1
47113: PPUSH
47114: CALL_OW 322
// end else
47118: GO 47135
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47120: LD_INT 25
47122: PPUSH
47123: LD_VAR 0 7
47127: PPUSH
47128: LD_INT 0
47130: PPUSH
47131: CALL_OW 322
// end ; if mpVehicles then
47135: LD_EXP 33
47139: IFFALSE 47238
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47141: LD_ADDR_VAR 0 3
47145: PUSH
47146: LD_VAR 0 7
47150: PPUSH
47151: LD_VAR 0 9
47155: PPUSH
47156: LD_EXP 33
47160: PPUSH
47161: CALL 48325 0 3
47165: PUSH
47166: FOR_IN
47167: IFFALSE 47236
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47169: LD_VAR 0 3
47173: PPUSH
47174: LD_INT 0
47176: PPUSH
47177: LD_INT 5
47179: PPUSH
47180: CALL_OW 12
47184: PPUSH
47185: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47189: LD_VAR 0 3
47193: PPUSH
47194: LD_EXP 19
47198: PUSH
47199: LD_VAR 0 8
47203: ARRAY
47204: PUSH
47205: LD_INT 1
47207: ARRAY
47208: PPUSH
47209: LD_EXP 19
47213: PUSH
47214: LD_VAR 0 8
47218: ARRAY
47219: PUSH
47220: LD_INT 2
47222: ARRAY
47223: PPUSH
47224: LD_INT 12
47226: PPUSH
47227: LD_INT 0
47229: PPUSH
47230: CALL_OW 50
// end ;
47234: GO 47166
47236: POP
47237: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47238: LD_ADDR_VAR 0 11
47242: PUSH
47243: LD_VAR 0 7
47247: PPUSH
47248: LD_VAR 0 9
47252: PPUSH
47253: LD_EXP 22
47257: PPUSH
47258: LD_EXP 23
47262: PPUSH
47263: CALL 47827 0 4
47267: ST_TO_ADDR
// for j in team do
47268: LD_ADDR_VAR 0 3
47272: PUSH
47273: LD_VAR 0 11
47277: PUSH
47278: FOR_IN
47279: IFFALSE 47328
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47281: LD_VAR 0 3
47285: PPUSH
47286: LD_EXP 19
47290: PUSH
47291: LD_VAR 0 8
47295: ARRAY
47296: PUSH
47297: LD_INT 1
47299: ARRAY
47300: PPUSH
47301: LD_EXP 19
47305: PUSH
47306: LD_VAR 0 8
47310: ARRAY
47311: PUSH
47312: LD_INT 2
47314: ARRAY
47315: PPUSH
47316: LD_INT 12
47318: PPUSH
47319: LD_INT 0
47321: PPUSH
47322: CALL_OW 50
47326: GO 47278
47328: POP
47329: POP
// if mpApemans then
47330: LD_EXP 28
47334: IFFALSE 47413
// begin for j := 1 to mpApemans do
47336: LD_ADDR_VAR 0 3
47340: PUSH
47341: DOUBLE
47342: LD_INT 1
47344: DEC
47345: ST_TO_ADDR
47346: LD_EXP 28
47350: PUSH
47351: FOR_TO
47352: IFFALSE 47411
// begin PrepareApeman ( - 5 ) ;
47354: LD_INT 5
47356: NEG
47357: PPUSH
47358: CALL 36740 0 1
// ape := CreateHuman ;
47362: LD_ADDR_VAR 0 10
47366: PUSH
47367: CALL_OW 44
47371: ST_TO_ADDR
// SetTag ( ape , side ) ;
47372: LD_VAR 0 10
47376: PPUSH
47377: LD_VAR 0 7
47381: PPUSH
47382: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47386: LD_VAR 0 10
47390: PPUSH
47391: LD_EXP 29
47395: PUSH
47396: LD_VAR 0 8
47400: ARRAY
47401: PPUSH
47402: LD_INT 0
47404: PPUSH
47405: CALL_OW 49
// end ;
47409: GO 47351
47411: POP
47412: POP
// end ; end ;
47413: GO 46198
47415: POP
47416: POP
// if not mpTeamGame then
47417: LD_EXP 9
47421: NOT
47422: IFFALSE 47520
// begin for i := 1 to 8 do
47424: LD_ADDR_VAR 0 2
47428: PUSH
47429: DOUBLE
47430: LD_INT 1
47432: DEC
47433: ST_TO_ADDR
47434: LD_INT 8
47436: PUSH
47437: FOR_TO
47438: IFFALSE 47516
// for j := 1 to 8 do
47440: LD_ADDR_VAR 0 3
47444: PUSH
47445: DOUBLE
47446: LD_INT 1
47448: DEC
47449: ST_TO_ADDR
47450: LD_INT 8
47452: PUSH
47453: FOR_TO
47454: IFFALSE 47512
// if i <> j then
47456: LD_VAR 0 2
47460: PUSH
47461: LD_VAR 0 3
47465: NONEQUAL
47466: IFFALSE 47490
// SetAttitude ( i , j , att_neutral , true ) else
47468: LD_VAR 0 2
47472: PPUSH
47473: LD_VAR 0 3
47477: PPUSH
47478: LD_INT 0
47480: PPUSH
47481: LD_INT 1
47483: PPUSH
47484: CALL_OW 80
47488: GO 47510
// SetAttitude ( i , j , att_friend , true ) ;
47490: LD_VAR 0 2
47494: PPUSH
47495: LD_VAR 0 3
47499: PPUSH
47500: LD_INT 1
47502: PPUSH
47503: LD_INT 1
47505: PPUSH
47506: CALL_OW 80
47510: GO 47453
47512: POP
47513: POP
47514: GO 47437
47516: POP
47517: POP
// end else
47518: GO 47695
// begin if mpSharedVision then
47520: LD_EXP 14
47524: IFFALSE 47589
// begin for i in mpTeams do
47526: LD_ADDR_VAR 0 2
47530: PUSH
47531: LD_EXP 8
47535: PUSH
47536: FOR_IN
47537: IFFALSE 47587
// for j := 2 to i do
47539: LD_ADDR_VAR 0 3
47543: PUSH
47544: DOUBLE
47545: LD_INT 2
47547: DEC
47548: ST_TO_ADDR
47549: LD_VAR 0 2
47553: PUSH
47554: FOR_TO
47555: IFFALSE 47583
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47557: LD_VAR 0 2
47561: PUSH
47562: LD_VAR 0 3
47566: ARRAY
47567: PPUSH
47568: LD_VAR 0 2
47572: PUSH
47573: LD_INT 1
47575: ARRAY
47576: PPUSH
47577: CALL_OW 343
47581: GO 47554
47583: POP
47584: POP
47585: GO 47536
47587: POP
47588: POP
// end ; for i := 1 to 8 do
47589: LD_ADDR_VAR 0 2
47593: PUSH
47594: DOUBLE
47595: LD_INT 1
47597: DEC
47598: ST_TO_ADDR
47599: LD_INT 8
47601: PUSH
47602: FOR_TO
47603: IFFALSE 47693
// for j := 1 to 8 do
47605: LD_ADDR_VAR 0 3
47609: PUSH
47610: DOUBLE
47611: LD_INT 1
47613: DEC
47614: ST_TO_ADDR
47615: LD_INT 8
47617: PUSH
47618: FOR_TO
47619: IFFALSE 47689
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47621: LD_EXP 6
47625: PUSH
47626: LD_VAR 0 2
47630: ARRAY
47631: PUSH
47632: LD_EXP 6
47636: PUSH
47637: LD_VAR 0 3
47641: ARRAY
47642: EQUAL
47643: IFFALSE 47667
// SetAttitude ( i , j , att_friend , true ) else
47645: LD_VAR 0 2
47649: PPUSH
47650: LD_VAR 0 3
47654: PPUSH
47655: LD_INT 1
47657: PPUSH
47658: LD_INT 1
47660: PPUSH
47661: CALL_OW 80
47665: GO 47687
// SetAttitude ( i , j , att_enemy , true ) ;
47667: LD_VAR 0 2
47671: PPUSH
47672: LD_VAR 0 3
47676: PPUSH
47677: LD_INT 2
47679: PPUSH
47680: LD_INT 1
47682: PPUSH
47683: CALL_OW 80
47687: GO 47618
47689: POP
47690: POP
47691: GO 47602
47693: POP
47694: POP
// end ; music_nat := mpSideNations [ your_side ] ;
47695: LD_ADDR_OWVAR 71
47699: PUSH
47700: LD_EXP 7
47704: PUSH
47705: LD_OWVAR 2
47709: ARRAY
47710: ST_TO_ADDR
// if IAmSpec then
47711: CALL_OW 531
47715: IFFALSE 47756
// begin FogOff ( true ) ;
47717: LD_INT 1
47719: PPUSH
47720: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47724: LD_EXP 27
47728: PUSH
47729: LD_INT 1
47731: ARRAY
47732: PUSH
47733: LD_INT 2
47735: DIV
47736: PPUSH
47737: LD_EXP 27
47741: PUSH
47742: LD_INT 2
47744: ARRAY
47745: PUSH
47746: LD_INT 2
47748: DIV
47749: PPUSH
47750: CALL_OW 86
// end else
47754: GO 47802
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47756: LD_EXP 19
47760: PUSH
47761: LD_EXP 5
47765: PUSH
47766: LD_OWVAR 2
47770: ARRAY
47771: ARRAY
47772: PUSH
47773: LD_INT 1
47775: ARRAY
47776: PPUSH
47777: LD_EXP 19
47781: PUSH
47782: LD_EXP 5
47786: PUSH
47787: LD_OWVAR 2
47791: ARRAY
47792: ARRAY
47793: PUSH
47794: LD_INT 2
47796: ARRAY
47797: PPUSH
47798: CALL_OW 86
// end ; BeginBuildUp ;
47802: CALL 48803 0 0
// enable ( mpActive ) ;
47806: LD_INT 100
47808: ENABLE_MARKED
// enable ( mpGameType ) ;
47809: LD_EXP 1
47813: ENABLE_MARKED
// mpGameActive := true ;
47814: LD_ADDR_EXP 36
47818: PUSH
47819: LD_INT 1
47821: ST_TO_ADDR
// end ;
47822: LD_VAR 0 1
47826: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
47827: LD_INT 0
47829: PPUSH
47830: PPUSH
47831: PPUSH
47832: PPUSH
// result := [ ] ;
47833: LD_ADDR_VAR 0 5
47837: PUSH
47838: EMPTY
47839: ST_TO_ADDR
// class := class_soldier ;
47840: LD_ADDR_VAR 0 8
47844: PUSH
47845: LD_INT 1
47847: ST_TO_ADDR
// uc_side := side ;
47848: LD_ADDR_OWVAR 20
47852: PUSH
47853: LD_VAR 0 1
47857: ST_TO_ADDR
// uc_nation := nation ;
47858: LD_ADDR_OWVAR 21
47862: PUSH
47863: LD_VAR 0 2
47867: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
47868: LD_ADDR_OWVAR 26
47872: PUSH
47873: LD_OWVAR 19
47877: PUSH
47878: LD_VAR 0 1
47882: ARRAY
47883: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
47884: LD_INT 1
47886: PPUSH
47887: LD_INT 2
47889: PPUSH
47890: CALL_OW 12
47894: PPUSH
47895: LD_VAR 0 8
47899: PPUSH
47900: LD_VAR 0 4
47904: PUSH
47905: LD_INT 2
47907: PLUS
47908: PPUSH
47909: CALL_OW 380
// hc_importance := 105 ;
47913: LD_ADDR_OWVAR 32
47917: PUSH
47918: LD_INT 105
47920: ST_TO_ADDR
// if Multiplayer then
47921: LD_OWVAR 4
47925: IFFALSE 47965
// begin hc_gallery := MULTIAVATARS ;
47927: LD_ADDR_OWVAR 33
47931: PUSH
47932: LD_STRING MULTIAVATARS
47934: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
47935: LD_ADDR_OWVAR 34
47939: PUSH
47940: LD_VAR 0 1
47944: PPUSH
47945: CALL_OW 525
47949: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
47950: LD_ADDR_OWVAR 27
47954: PUSH
47955: LD_VAR 0 1
47959: PPUSH
47960: CALL_OW 526
47964: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
47965: LD_ADDR_VAR 0 5
47969: PUSH
47970: LD_VAR 0 5
47974: PPUSH
47975: CALL_OW 44
47979: PPUSH
47980: CALL 40492 0 2
47984: ST_TO_ADDR
// if mpTeamPreset then
47985: LD_LOC 1
47989: IFFALSE 48085
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
47991: LD_LOC 1
47995: PUSH
47996: LD_INT 1
47998: ARRAY
47999: PPUSH
48000: LD_VAR 0 5
48004: PUSH
48005: LD_VAR 0 5
48009: ARRAY
48010: PPUSH
48011: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48015: LD_VAR 0 5
48019: PUSH
48020: LD_VAR 0 5
48024: ARRAY
48025: PPUSH
48026: LD_INT 1
48028: PPUSH
48029: LD_LOC 1
48033: PUSH
48034: LD_INT 1
48036: ARRAY
48037: PPUSH
48038: LD_INT 1
48040: PPUSH
48041: CALL_OW 260
48045: PPUSH
48046: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
48050: LD_VAR 0 5
48054: PUSH
48055: LD_VAR 0 5
48059: ARRAY
48060: PPUSH
48061: LD_INT 2
48063: PPUSH
48064: LD_LOC 1
48068: PUSH
48069: LD_INT 1
48071: ARRAY
48072: PPUSH
48073: LD_INT 2
48075: PPUSH
48076: CALL_OW 260
48080: PPUSH
48081: CALL_OW 239
// end ; InitHc_All ( ) ;
48085: CALL_OW 584
// class := 2 ;
48089: LD_ADDR_VAR 0 8
48093: PUSH
48094: LD_INT 2
48096: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48097: LD_ADDR_VAR 0 6
48101: PUSH
48102: DOUBLE
48103: LD_INT 1
48105: DEC
48106: ST_TO_ADDR
48107: LD_VAR 0 3
48111: PUSH
48112: LD_INT 1
48114: MINUS
48115: PUSH
48116: FOR_TO
48117: IFFALSE 48301
// begin PrepareHuman ( false , class , skill ) ;
48119: LD_INT 0
48121: PPUSH
48122: LD_VAR 0 8
48126: PPUSH
48127: LD_VAR 0 4
48131: PPUSH
48132: CALL_OW 380
// un := CreateHuman ;
48136: LD_ADDR_VAR 0 7
48140: PUSH
48141: CALL_OW 44
48145: ST_TO_ADDR
// result := Join ( result , un ) ;
48146: LD_ADDR_VAR 0 5
48150: PUSH
48151: LD_VAR 0 5
48155: PPUSH
48156: LD_VAR 0 7
48160: PPUSH
48161: CALL 40492 0 2
48165: ST_TO_ADDR
// if mpTeamPreset then
48166: LD_LOC 1
48170: IFFALSE 48266
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
48172: LD_LOC 1
48176: PUSH
48177: LD_VAR 0 6
48181: PUSH
48182: LD_INT 1
48184: PLUS
48185: ARRAY
48186: PPUSH
48187: LD_VAR 0 7
48191: PPUSH
48192: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
48196: LD_VAR 0 7
48200: PPUSH
48201: LD_INT 1
48203: PPUSH
48204: LD_LOC 1
48208: PUSH
48209: LD_VAR 0 6
48213: PUSH
48214: LD_INT 1
48216: PLUS
48217: ARRAY
48218: PPUSH
48219: LD_INT 1
48221: PPUSH
48222: CALL_OW 260
48226: PPUSH
48227: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
48231: LD_VAR 0 7
48235: PPUSH
48236: LD_INT 2
48238: PPUSH
48239: LD_LOC 1
48243: PUSH
48244: LD_VAR 0 6
48248: PUSH
48249: LD_INT 1
48251: PLUS
48252: ARRAY
48253: PPUSH
48254: LD_INT 2
48256: PPUSH
48257: CALL_OW 260
48261: PPUSH
48262: CALL_OW 239
// end ; class := Inc ( class ) ;
48266: LD_ADDR_VAR 0 8
48270: PUSH
48271: LD_VAR 0 8
48275: PPUSH
48276: CALL 41853 0 1
48280: ST_TO_ADDR
// if class = 5 then
48281: LD_VAR 0 8
48285: PUSH
48286: LD_INT 5
48288: EQUAL
48289: IFFALSE 48299
// class := 1 ;
48291: LD_ADDR_VAR 0 8
48295: PUSH
48296: LD_INT 1
48298: ST_TO_ADDR
// end ;
48299: GO 48116
48301: POP
48302: POP
// if not mpTeamPreset then
48303: LD_LOC 1
48307: NOT
48308: IFFALSE 48320
// mpTeamPreset := result ;
48310: LD_ADDR_LOC 1
48314: PUSH
48315: LD_VAR 0 5
48319: ST_TO_ADDR
// end ;
48320: LD_VAR 0 5
48324: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48325: LD_INT 0
48327: PPUSH
48328: PPUSH
// result := [ ] ;
48329: LD_ADDR_VAR 0 4
48333: PUSH
48334: EMPTY
48335: ST_TO_ADDR
// if not vehicles then
48336: LD_VAR 0 3
48340: NOT
48341: IFFALSE 48345
// exit ;
48343: GO 48504
// for i := 1 to vehicles [ nation ] do
48345: LD_ADDR_VAR 0 5
48349: PUSH
48350: DOUBLE
48351: LD_INT 1
48353: DEC
48354: ST_TO_ADDR
48355: LD_VAR 0 3
48359: PUSH
48360: LD_VAR 0 2
48364: ARRAY
48365: PUSH
48366: FOR_TO
48367: IFFALSE 48502
// begin uc_side := side ;
48369: LD_ADDR_OWVAR 20
48373: PUSH
48374: LD_VAR 0 1
48378: ST_TO_ADDR
// uc_nation := nation ;
48379: LD_ADDR_OWVAR 21
48383: PUSH
48384: LD_VAR 0 2
48388: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48389: LD_VAR 0 3
48393: PUSH
48394: LD_VAR 0 2
48398: ARRAY
48399: PUSH
48400: LD_VAR 0 5
48404: ARRAY
48405: PUSH
48406: LD_INT 1
48408: ARRAY
48409: PPUSH
48410: LD_VAR 0 3
48414: PUSH
48415: LD_VAR 0 2
48419: ARRAY
48420: PUSH
48421: LD_VAR 0 5
48425: ARRAY
48426: PUSH
48427: LD_INT 2
48429: ARRAY
48430: PPUSH
48431: LD_VAR 0 3
48435: PUSH
48436: LD_VAR 0 2
48440: ARRAY
48441: PUSH
48442: LD_VAR 0 5
48446: ARRAY
48447: PUSH
48448: LD_INT 3
48450: ARRAY
48451: PPUSH
48452: LD_VAR 0 3
48456: PUSH
48457: LD_VAR 0 2
48461: ARRAY
48462: PUSH
48463: LD_VAR 0 5
48467: ARRAY
48468: PUSH
48469: LD_INT 4
48471: ARRAY
48472: PPUSH
48473: LD_INT 80
48475: PPUSH
48476: CALL 7621 0 5
// result := Join ( result , CreateVehicle ) ;
48480: LD_ADDR_VAR 0 4
48484: PUSH
48485: LD_VAR 0 4
48489: PPUSH
48490: CALL_OW 45
48494: PPUSH
48495: CALL 40492 0 2
48499: ST_TO_ADDR
// end ;
48500: GO 48366
48502: POP
48503: POP
// end ;
48504: LD_VAR 0 4
48508: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48509: LD_INT 0
48511: PPUSH
48512: PPUSH
// for i in mpBattleFlags do
48513: LD_ADDR_VAR 0 3
48517: PUSH
48518: LD_EXP 21
48522: PUSH
48523: FOR_IN
48524: IFFALSE 48601
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48526: LD_VAR 0 3
48530: PPUSH
48531: LD_INT 1
48533: PUSH
48534: LD_VAR 0 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: LD_VAR 0 1
48550: PUSH
48551: LD_REAL  7.00000000000000E-0001
48554: MUL
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 3
48562: PUSH
48563: LD_VAR 0 1
48567: PUSH
48568: LD_REAL  4.00000000000000E-0001
48571: MUL
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 20
48579: PUSH
48580: LD_VAR 0 1
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: PPUSH
48595: CALL_OW 423
48599: GO 48523
48601: POP
48602: POP
// end ;
48603: LD_VAR 0 2
48607: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48608: LD_INT 100
48610: IFFALSE 48705
48612: GO 48614
48614: DISABLE
48615: LD_INT 0
48617: PPUSH
48618: PPUSH
// begin if mpBattleFlag <= 0 then
48619: LD_EXP 20
48623: PUSH
48624: LD_INT 0
48626: LESSEQUAL
48627: IFFALSE 48631
// exit ;
48629: GO 48705
// strength := 100 ;
48631: LD_ADDR_VAR 0 2
48635: PUSH
48636: LD_INT 100
48638: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48639: LD_EXP 20
48643: PPUSH
48644: CALL_OW 67
// strength := Dec ( strength ) ;
48648: LD_ADDR_VAR 0 2
48652: PUSH
48653: LD_VAR 0 2
48657: PPUSH
48658: CALL 41875 0 1
48662: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48663: LD_VAR 0 2
48667: PPUSH
48668: CALL 48509 0 1
// until not strength ;
48672: LD_VAR 0 2
48676: NOT
48677: IFFALSE 48639
// for i in mpBattleFlags do
48679: LD_ADDR_VAR 0 1
48683: PUSH
48684: LD_EXP 21
48688: PUSH
48689: FOR_IN
48690: IFFALSE 48703
// KillBattleFlag ( i ) ;
48692: LD_VAR 0 1
48696: PPUSH
48697: CALL_OW 419
48701: GO 48689
48703: POP
48704: POP
// end ;
48705: PPOPN 2
48707: END
// every 0 0$1 marked mpActive do var side , tmp ;
48708: GO 48710
48710: DISABLE
48711: LD_INT 0
48713: PPUSH
48714: PPUSH
// begin if mpSibBomb <= 1 then
48715: LD_EXP 26
48719: PUSH
48720: LD_INT 1
48722: LESSEQUAL
48723: IFFALSE 48727
// exit ;
48725: GO 48800
// tmp := mpSibBomb ;
48727: LD_ADDR_VAR 0 2
48731: PUSH
48732: LD_EXP 26
48736: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48737: LD_INT 35
48739: PPUSH
48740: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48744: LD_ADDR_VAR 0 2
48748: PUSH
48749: LD_VAR 0 2
48753: PUSH
48754: LD_INT 35
48756: MINUS
48757: ST_TO_ADDR
// until not tmp ;
48758: LD_VAR 0 2
48762: NOT
48763: IFFALSE 48737
// for side := 1 to 8 do
48765: LD_ADDR_VAR 0 1
48769: PUSH
48770: DOUBLE
48771: LD_INT 1
48773: DEC
48774: ST_TO_ADDR
48775: LD_INT 8
48777: PUSH
48778: FOR_TO
48779: IFFALSE 48798
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48781: LD_INT 25
48783: PPUSH
48784: LD_VAR 0 1
48788: PPUSH
48789: LD_INT 1
48791: PPUSH
48792: CALL_OW 322
48796: GO 48778
48798: POP
48799: POP
// end ;
48800: PPOPN 2
48802: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48803: LD_INT 0
48805: PPUSH
48806: PPUSH
48807: PPUSH
// mpBuildUpTimeDelay := 0 ;
48808: LD_ADDR_EXP 39
48812: PUSH
48813: LD_INT 0
48815: ST_TO_ADDR
// if not mpBuildUpTime then
48816: LD_EXP 18
48820: NOT
48821: IFFALSE 48825
// exit ;
48823: GO 49008
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48825: LD_ADDR_EXP 39
48829: PUSH
48830: LD_INT 8400
48832: PUSH
48833: LD_INT 2100
48835: PUSH
48836: LD_EXP 18
48840: MUL
48841: PLUS
48842: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
48843: LD_ADDR_EXP 40
48847: PUSH
48848: LD_INT 1
48850: ST_TO_ADDR
// for i := 1 to 8 do
48851: LD_ADDR_VAR 0 2
48855: PUSH
48856: DOUBLE
48857: LD_INT 1
48859: DEC
48860: ST_TO_ADDR
48861: LD_INT 8
48863: PUSH
48864: FOR_TO
48865: IFFALSE 49006
// if mpSidePositions [ i ] then
48867: LD_EXP 5
48871: PUSH
48872: LD_VAR 0 2
48876: ARRAY
48877: IFFALSE 49004
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
48879: LD_EXP 17
48883: PUSH
48884: LD_EXP 5
48888: PUSH
48889: LD_VAR 0 2
48893: ARRAY
48894: ARRAY
48895: PPUSH
48896: LD_INT 5
48898: PPUSH
48899: CALL_OW 424
// for j := 1 to 8 do
48903: LD_ADDR_VAR 0 3
48907: PUSH
48908: DOUBLE
48909: LD_INT 1
48911: DEC
48912: ST_TO_ADDR
48913: LD_INT 8
48915: PUSH
48916: FOR_TO
48917: IFFALSE 49002
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48919: LD_EXP 5
48923: PUSH
48924: LD_VAR 0 3
48928: ARRAY
48929: PUSH
48930: LD_EXP 6
48934: PUSH
48935: LD_VAR 0 2
48939: ARRAY
48940: PUSH
48941: LD_EXP 6
48945: PUSH
48946: LD_VAR 0 3
48950: ARRAY
48951: NONEQUAL
48952: PUSH
48953: LD_EXP 9
48957: NOT
48958: PUSH
48959: LD_VAR 0 2
48963: PUSH
48964: LD_VAR 0 3
48968: NONEQUAL
48969: AND
48970: OR
48971: AND
48972: IFFALSE 49000
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
48974: LD_VAR 0 3
48978: PPUSH
48979: LD_EXP 17
48983: PUSH
48984: LD_EXP 5
48988: PUSH
48989: LD_VAR 0 2
48993: ARRAY
48994: ARRAY
48995: PPUSH
48996: CALL_OW 333
49000: GO 48916
49002: POP
49003: POP
// end ;
49004: GO 48864
49006: POP
49007: POP
// end ;
49008: LD_VAR 0 1
49012: RET
// function EndBuildUp ; var i , j ; begin
49013: LD_INT 0
49015: PPUSH
49016: PPUSH
49017: PPUSH
// mpBuildUpTimeActive := false ;
49018: LD_ADDR_EXP 40
49022: PUSH
49023: LD_INT 0
49025: ST_TO_ADDR
// for i := 1 to 8 do
49026: LD_ADDR_VAR 0 2
49030: PUSH
49031: DOUBLE
49032: LD_INT 1
49034: DEC
49035: ST_TO_ADDR
49036: LD_INT 8
49038: PUSH
49039: FOR_TO
49040: IFFALSE 49181
// if mpSidePositions [ i ] then
49042: LD_EXP 5
49046: PUSH
49047: LD_VAR 0 2
49051: ARRAY
49052: IFFALSE 49179
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
49054: LD_EXP 17
49058: PUSH
49059: LD_EXP 5
49063: PUSH
49064: LD_VAR 0 2
49068: ARRAY
49069: ARRAY
49070: PPUSH
49071: LD_INT 0
49073: PPUSH
49074: CALL_OW 424
// for j := 1 to 8 do
49078: LD_ADDR_VAR 0 3
49082: PUSH
49083: DOUBLE
49084: LD_INT 1
49086: DEC
49087: ST_TO_ADDR
49088: LD_INT 8
49090: PUSH
49091: FOR_TO
49092: IFFALSE 49177
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49094: LD_EXP 5
49098: PUSH
49099: LD_VAR 0 3
49103: ARRAY
49104: PUSH
49105: LD_EXP 6
49109: PUSH
49110: LD_VAR 0 2
49114: ARRAY
49115: PUSH
49116: LD_EXP 6
49120: PUSH
49121: LD_VAR 0 3
49125: ARRAY
49126: NONEQUAL
49127: PUSH
49128: LD_EXP 9
49132: NOT
49133: PUSH
49134: LD_VAR 0 2
49138: PUSH
49139: LD_VAR 0 3
49143: NONEQUAL
49144: AND
49145: OR
49146: AND
49147: IFFALSE 49175
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49149: LD_VAR 0 3
49153: PPUSH
49154: LD_EXP 17
49158: PUSH
49159: LD_EXP 5
49163: PUSH
49164: LD_VAR 0 2
49168: ARRAY
49169: ARRAY
49170: PPUSH
49171: CALL_OW 334
49175: GO 49091
49177: POP
49178: POP
// end ;
49179: GO 49039
49181: POP
49182: POP
// end ;
49183: LD_VAR 0 1
49187: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49188: LD_EXP 40
49192: IFFALSE 49367
49194: GO 49196
49196: DISABLE
49197: LD_INT 0
49199: PPUSH
49200: PPUSH
// begin for i := 1 to 8 do
49201: LD_ADDR_VAR 0 1
49205: PUSH
49206: DOUBLE
49207: LD_INT 1
49209: DEC
49210: ST_TO_ADDR
49211: LD_INT 8
49213: PUSH
49214: FOR_TO
49215: IFFALSE 49364
// if mpSidePositions [ i ] then
49217: LD_EXP 5
49221: PUSH
49222: LD_VAR 0 1
49226: ARRAY
49227: IFFALSE 49362
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49229: LD_ADDR_VAR 0 2
49233: PUSH
49234: LD_EXP 17
49238: PUSH
49239: LD_EXP 5
49243: PUSH
49244: LD_VAR 0 1
49248: ARRAY
49249: ARRAY
49250: PPUSH
49251: LD_INT 2
49253: PUSH
49254: LD_INT 21
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 21
49266: PUSH
49267: LD_INT 2
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 22
49281: PUSH
49282: LD_OWVAR 2
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PPUSH
49295: CALL_OW 70
49299: PUSH
49300: FOR_IN
49301: IFFALSE 49360
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49303: LD_EXP 6
49307: PUSH
49308: LD_VAR 0 1
49312: ARRAY
49313: PUSH
49314: LD_EXP 6
49318: PUSH
49319: LD_OWVAR 2
49323: ARRAY
49324: NONEQUAL
49325: PUSH
49326: LD_EXP 9
49330: NOT
49331: PUSH
49332: LD_VAR 0 1
49336: PUSH
49337: LD_OWVAR 2
49341: NONEQUAL
49342: AND
49343: OR
49344: IFFALSE 49358
// ComMoveToArea ( un , BuildUpEscape ) ;
49346: LD_VAR 0 2
49350: PPUSH
49351: LD_INT 52
49353: PPUSH
49354: CALL_OW 113
49358: GO 49300
49360: POP
49361: POP
49362: GO 49214
49364: POP
49365: POP
// enable ;
49366: ENABLE
// end ;
49367: PPOPN 2
49369: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49370: LD_EXP 18
49374: IFFALSE 49424
49376: GO 49378
49378: DISABLE
49379: LD_INT 0
49381: PPUSH
// begin tmp := mpBuildUpTime ;
49382: LD_ADDR_VAR 0 1
49386: PUSH
49387: LD_EXP 18
49391: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49392: LD_INT 35
49394: PPUSH
49395: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49399: LD_ADDR_VAR 0 1
49403: PUSH
49404: LD_VAR 0 1
49408: PUSH
49409: LD_INT 35
49411: MINUS
49412: ST_TO_ADDR
// until not tmp ;
49413: LD_VAR 0 1
49417: NOT
49418: IFFALSE 49392
// EndBuildUp ;
49420: CALL 49013 0 0
// end ;
49424: PPOPN 1
49426: END
// every 0 0$1 trigger mpActive marked mpWin do
49427: LD_INT 100
49429: IFFALSE 49463
49431: GO 49433
49433: DISABLE
// begin if IAmServer then
49434: CALL_OW 518
49438: IFFALSE 49447
// wait ( 0 0$3 ) ;
49440: LD_INT 105
49442: PPUSH
49443: CALL_OW 67
// if Multiplayer then
49447: LD_OWVAR 4
49451: IFFALSE 49459
// YouWinInMultiplayer else
49453: CALL_OW 106
49457: GO 49463
// YouWin ;
49459: CALL_OW 103
// end ;
49463: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49464: LD_INT 0
49466: PPUSH
// result := false ;
49467: LD_ADDR_VAR 0 3
49471: PUSH
49472: LD_INT 0
49474: ST_TO_ADDR
// case gameType of GameTypeNormal :
49475: LD_VAR 0 1
49479: PUSH
49480: LD_INT 1
49482: DOUBLE
49483: EQUAL
49484: IFTRUE 49488
49486: GO 49561
49488: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49489: LD_ADDR_VAR 0 3
49493: PUSH
49494: LD_INT 22
49496: PUSH
49497: LD_VAR 0 2
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: LD_INT 21
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 33
49521: PUSH
49522: LD_INT 3
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 33
49531: PUSH
49532: LD_INT 5
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PPUSH
49549: CALL_OW 69
49553: PPUSH
49554: CALL 4883 0 1
49558: ST_TO_ADDR
// end ; GameTypeSurvival :
49559: GO 49796
49561: LD_INT 2
49563: DOUBLE
49564: EQUAL
49565: IFTRUE 49569
49567: GO 49697
49569: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49570: LD_ADDR_VAR 0 3
49574: PUSH
49575: LD_INT 22
49577: PUSH
49578: LD_VAR 0 2
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: LD_INT 30
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 30
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: LIST
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PPUSH
49619: CALL_OW 69
49623: PPUSH
49624: CALL 4883 0 1
49628: PUSH
49629: LD_INT 22
49631: PUSH
49632: LD_VAR 0 2
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: LD_INT 21
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 33
49656: PUSH
49657: LD_INT 3
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 33
49666: PUSH
49667: LD_INT 5
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PPUSH
49684: CALL_OW 69
49688: PPUSH
49689: CALL 4883 0 1
49693: AND
49694: ST_TO_ADDR
// end ; GameTypeKing :
49695: GO 49796
49697: LD_INT 3
49699: DOUBLE
49700: EQUAL
49701: IFTRUE 49705
49703: GO 49795
49705: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
49706: LD_ADDR_VAR 0 3
49710: PUSH
49711: LD_INT 22
49713: PUSH
49714: LD_VAR 0 2
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: LD_INT 21
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 33
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 33
49748: PUSH
49749: LD_INT 5
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PPUSH
49766: CALL_OW 69
49770: PPUSH
49771: CALL 4883 0 1
49775: PUSH
49776: LD_VAR 0 2
49780: PPUSH
49781: CALL 52982 0 1
49785: PUSH
49786: LD_EXP 32
49790: LESS
49791: AND
49792: ST_TO_ADDR
// end ; end ;
49793: GO 49796
49795: POP
// end ;
49796: LD_VAR 0 3
49800: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49801: LD_INT 100
49803: IFFALSE 50025
49805: GO 49807
49807: DISABLE
49808: LD_INT 0
49810: PPUSH
49811: PPUSH
// begin if Multiplayer then
49812: LD_OWVAR 4
49816: IFFALSE 49824
// SetPlayerSpectator ( ) else
49818: CALL_OW 572
49822: GO 49833
// FogOff ( your_side ) ;
49824: LD_OWVAR 2
49828: PPUSH
49829: CALL_OW 344
// repeat gameIsOn := false ;
49833: LD_ADDR_VAR 0 1
49837: PUSH
49838: LD_INT 0
49840: ST_TO_ADDR
// for i := 1 to 8 do
49841: LD_ADDR_VAR 0 2
49845: PUSH
49846: DOUBLE
49847: LD_INT 1
49849: DEC
49850: ST_TO_ADDR
49851: LD_INT 8
49853: PUSH
49854: FOR_TO
49855: IFFALSE 49977
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49857: LD_EXP 5
49861: PUSH
49862: LD_VAR 0 2
49866: ARRAY
49867: PUSH
49868: LD_VAR 0 2
49872: PPUSH
49873: CALL_OW 108
49877: AND
49878: PUSH
49879: LD_VAR 0 2
49883: PUSH
49884: LD_OWVAR 2
49888: NONEQUAL
49889: AND
49890: IFFALSE 49975
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
49892: LD_EXP 6
49896: PUSH
49897: LD_VAR 0 2
49901: ARRAY
49902: NOT
49903: PUSH
49904: LD_EXP 6
49908: PUSH
49909: LD_VAR 0 2
49913: ARRAY
49914: PUSH
49915: LD_EXP 6
49919: PUSH
49920: LD_OWVAR 2
49924: ARRAY
49925: NONEQUAL
49926: PUSH
49927: LD_OWVAR 2
49931: PPUSH
49932: LD_VAR 0 2
49936: PPUSH
49937: CALL_OW 81
49941: PUSH
49942: LD_INT 1
49944: NONEQUAL
49945: AND
49946: OR
49947: IFFALSE 49975
// if HasPowerByGameType ( mpGameType , i ) then
49949: LD_EXP 1
49953: PPUSH
49954: LD_VAR 0 2
49958: PPUSH
49959: CALL 49464 0 2
49963: IFFALSE 49975
// begin gameIsOn := true ;
49965: LD_ADDR_VAR 0 1
49969: PUSH
49970: LD_INT 1
49972: ST_TO_ADDR
// break ;
49973: GO 49977
// end ;
49975: GO 49854
49977: POP
49978: POP
// wait ( 100 ) ;
49979: LD_INT 100
49981: PPUSH
49982: CALL_OW 67
// until not gameIsOn ;
49986: LD_VAR 0 1
49990: NOT
49991: IFFALSE 49833
// if IAmServer then
49993: CALL_OW 518
49997: IFFALSE 50006
// wait ( 0 0$3 ) ;
49999: LD_INT 105
50001: PPUSH
50002: CALL_OW 67
// if Multiplayer then
50006: LD_OWVAR 4
50010: IFFALSE 50018
// YouLostInMultiplayer else
50012: CALL_OW 107
50016: GO 50025
// YouLost (  ) ;
50018: LD_STRING 
50020: PPUSH
50021: CALL_OW 104
// end ;
50025: PPOPN 2
50027: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
50028: LD_EXP 30
50032: IFFALSE 50379
50034: GO 50036
50036: DISABLE
50037: LD_INT 0
50039: PPUSH
50040: PPUSH
50041: PPUSH
50042: PPUSH
50043: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
50044: LD_ADDR_VAR 0 5
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: LD_INT 3
50057: PUSH
50058: LD_INT 4
50060: PUSH
50061: LD_INT 5
50063: PUSH
50064: LD_INT 6
50066: PUSH
50067: LD_INT 7
50069: PUSH
50070: LD_INT 8
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
50083: LD_INT 350
50085: PPUSH
50086: CALL_OW 67
// for i := 1 to 8 do
50090: LD_ADDR_VAR 0 1
50094: PUSH
50095: DOUBLE
50096: LD_INT 1
50098: DEC
50099: ST_TO_ADDR
50100: LD_INT 8
50102: PUSH
50103: FOR_TO
50104: IFFALSE 50349
// begin j := sides [ i ] ;
50106: LD_ADDR_VAR 0 2
50110: PUSH
50111: LD_VAR 0 5
50115: PUSH
50116: LD_VAR 0 1
50120: ARRAY
50121: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
50122: LD_EXP 37
50126: PUSH
50127: LD_VAR 0 2
50131: ARRAY
50132: PPUSH
50133: CALL 4883 0 1
50137: PUSH
50138: LD_VAR 0 2
50142: PPUSH
50143: CALL_OW 108
50147: AND
50148: PUSH
50149: LD_EXP 1
50153: PPUSH
50154: LD_VAR 0 2
50158: PPUSH
50159: CALL 49464 0 2
50163: AND
50164: IFFALSE 50347
// begin wait ( mpRespawn div 3 ) ;
50166: LD_EXP 30
50170: PUSH
50171: LD_INT 3
50173: DIV
50174: PPUSH
50175: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50179: LD_ADDR_VAR 0 3
50183: PUSH
50184: LD_INT 22
50186: PUSH
50187: LD_VAR 0 2
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 50
50198: PUSH
50199: EMPTY
50200: LIST
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: LD_INT 30
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 30
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: LIST
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: LIST
50234: PPUSH
50235: CALL_OW 69
50239: ST_TO_ADDR
// if not tmp then
50240: LD_VAR 0 3
50244: NOT
50245: IFFALSE 50249
// continue ;
50247: GO 50103
// spawn := tmp [ 1 ] ;
50249: LD_ADDR_VAR 0 4
50253: PUSH
50254: LD_VAR 0 3
50258: PUSH
50259: LD_INT 1
50261: ARRAY
50262: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50263: LD_EXP 37
50267: PUSH
50268: LD_VAR 0 2
50272: ARRAY
50273: PUSH
50274: LD_INT 1
50276: ARRAY
50277: PPUSH
50278: LD_VAR 0 4
50282: PPUSH
50283: CALL_OW 250
50287: PPUSH
50288: LD_VAR 0 4
50292: PPUSH
50293: CALL_OW 251
50297: PPUSH
50298: LD_INT 32
50300: PPUSH
50301: LD_INT 1
50303: PPUSH
50304: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50308: LD_ADDR_EXP 37
50312: PUSH
50313: LD_EXP 37
50317: PPUSH
50318: LD_VAR 0 2
50322: PPUSH
50323: LD_EXP 37
50327: PUSH
50328: LD_VAR 0 2
50332: ARRAY
50333: PPUSH
50334: LD_INT 1
50336: PPUSH
50337: CALL_OW 3
50341: PPUSH
50342: CALL_OW 1
50346: ST_TO_ADDR
// end ; end ;
50347: GO 50103
50349: POP
50350: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50351: LD_ADDR_VAR 0 5
50355: PUSH
50356: LD_VAR 0 5
50360: PPUSH
50361: LD_INT 1
50363: PPUSH
50364: LD_INT 8
50366: PPUSH
50367: LD_INT 1
50369: PPUSH
50370: CALL 7161 0 4
50374: ST_TO_ADDR
// until false ;
50375: LD_INT 0
50377: IFFALSE 50083
// end ;
50379: PPOPN 5
50381: END
// every 0 0$1 marked mpActive do
50382: GO 50384
50384: DISABLE
// begin enable ;
50385: ENABLE
// if not mpDisplayStrings then
50386: LD_EXP 35
50390: NOT
50391: IFFALSE 50402
// begin display_strings := [ ] ;
50393: LD_ADDR_OWVAR 47
50397: PUSH
50398: EMPTY
50399: ST_TO_ADDR
// exit ;
50400: GO 50412
// end ; display_strings := mpDisplayStrings ;
50402: LD_ADDR_OWVAR 47
50406: PUSH
50407: LD_EXP 35
50411: ST_TO_ADDR
// end ; end_of_file
50412: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50413: LD_INT 0
50415: PPUSH
50416: PPUSH
50417: PPUSH
50418: PPUSH
50419: PPUSH
50420: PPUSH
50421: PPUSH
50422: PPUSH
50423: PPUSH
// if GetType ( un ) = unit_vehicle then
50424: LD_VAR 0 1
50428: PPUSH
50429: CALL_OW 247
50433: PUSH
50434: LD_INT 2
50436: EQUAL
50437: IFFALSE 50441
// exit ;
50439: GO 51011
// side := GetSide ( un ) ;
50441: LD_ADDR_VAR 0 9
50445: PUSH
50446: LD_VAR 0 1
50450: PPUSH
50451: CALL_OW 255
50455: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50456: LD_EXP 1
50460: PUSH
50461: LD_INT 2
50463: EQUAL
50464: IFFALSE 50557
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
50466: LD_VAR 0 1
50470: PPUSH
50471: CALL_OW 266
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: IN
50486: PUSH
50487: LD_VAR 0 1
50491: PPUSH
50492: CALL_OW 110
50496: PUSH
50497: LD_VAR 0 9
50501: EQUAL
50502: AND
50503: IFFALSE 50557
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50505: LD_ADDR_VAR 0 3
50509: PUSH
50510: LD_INT 22
50512: PUSH
50513: LD_VAR 0 9
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 21
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PPUSH
50536: CALL_OW 69
50540: PUSH
50541: FOR_IN
50542: IFFALSE 50555
// KillUnit ( i ) ;
50544: LD_VAR 0 3
50548: PPUSH
50549: CALL_OW 66
50553: GO 50541
50555: POP
50556: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50557: LD_VAR 0 1
50561: PPUSH
50562: CALL_OW 257
50566: PUSH
50567: LD_INT 12
50569: PUSH
50570: LD_INT 17
50572: PUSH
50573: LD_INT 15
50575: PUSH
50576: LD_INT 16
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: IN
50585: PUSH
50586: LD_VAR 0 1
50590: PPUSH
50591: CALL_OW 263
50595: PUSH
50596: LD_INT 5
50598: EQUAL
50599: OR
50600: IFFALSE 50740
// begin tag := GetTag ( un ) ;
50602: LD_ADDR_VAR 0 5
50606: PUSH
50607: LD_VAR 0 1
50611: PPUSH
50612: CALL_OW 110
50616: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50617: LD_ADDR_VAR 0 7
50621: PUSH
50622: LD_EXP 29
50626: PUSH
50627: LD_EXP 5
50631: PUSH
50632: LD_VAR 0 5
50636: ARRAY
50637: ARRAY
50638: ST_TO_ADDR
// if not area then
50639: LD_VAR 0 7
50643: NOT
50644: IFFALSE 50648
// exit ;
50646: GO 51011
// wait ( 4 4$00 ) ;
50648: LD_INT 8400
50650: PPUSH
50651: CALL_OW 67
// repeat wait ( 10 ) ;
50655: LD_INT 10
50657: PPUSH
50658: CALL_OW 67
// until not mpBlockRespThread ;
50662: LD_EXP 38
50666: NOT
50667: IFFALSE 50655
// mpBlockRespThread := true ;
50669: LD_ADDR_EXP 38
50673: PUSH
50674: LD_INT 1
50676: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
50677: LD_INT 0
50679: PPUSH
50680: CALL 36740 0 1
// ape := CreateHuman ;
50684: LD_ADDR_VAR 0 4
50688: PUSH
50689: CALL_OW 44
50693: ST_TO_ADDR
// SetTag ( ape , tag ) ;
50694: LD_VAR 0 4
50698: PPUSH
50699: LD_VAR 0 5
50703: PPUSH
50704: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
50708: LD_VAR 0 4
50712: PPUSH
50713: LD_VAR 0 7
50717: PPUSH
50718: LD_INT 0
50720: PPUSH
50721: CALL_OW 49
// wait ( 10 ) ;
50725: LD_INT 10
50727: PPUSH
50728: CALL_OW 67
// mpBlockRespThread := false ;
50732: LD_ADDR_EXP 38
50736: PUSH
50737: LD_INT 0
50739: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50740: LD_VAR 0 1
50744: PPUSH
50745: CALL_OW 247
50749: PUSH
50750: LD_INT 1
50752: EQUAL
50753: PUSH
50754: LD_VAR 0 1
50758: PPUSH
50759: CALL_OW 248
50763: PUSH
50764: LD_INT 0
50766: GREATER
50767: AND
50768: IFFALSE 51011
// begin if not mpRespawn then
50770: LD_EXP 30
50774: NOT
50775: IFFALSE 50779
// exit ;
50777: GO 51011
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
50779: LD_VAR 0 9
50783: PPUSH
50784: CALL_OW 108
50788: NOT
50789: PUSH
50790: LD_EXP 1
50794: PPUSH
50795: LD_VAR 0 9
50799: PPUSH
50800: CALL 49464 0 2
50804: NOT
50805: AND
50806: IFFALSE 50810
// exit ;
50808: GO 51011
// side := GetSide ( un ) ;
50810: LD_ADDR_VAR 0 9
50814: PUSH
50815: LD_VAR 0 1
50819: PPUSH
50820: CALL_OW 255
50824: ST_TO_ADDR
// nation := GetNation ( un ) ;
50825: LD_ADDR_VAR 0 8
50829: PUSH
50830: LD_VAR 0 1
50834: PPUSH
50835: CALL_OW 248
50839: ST_TO_ADDR
// class := GetClass ( un ) ;
50840: LD_ADDR_VAR 0 6
50844: PUSH
50845: LD_VAR 0 1
50849: PPUSH
50850: CALL_OW 257
50854: ST_TO_ADDR
// if class > 4 then
50855: LD_VAR 0 6
50859: PUSH
50860: LD_INT 4
50862: GREATER
50863: IFFALSE 50873
// class := 1 ;
50865: LD_ADDR_VAR 0 6
50869: PUSH
50870: LD_INT 1
50872: ST_TO_ADDR
// repeat wait ( 10 ) ;
50873: LD_INT 10
50875: PPUSH
50876: CALL_OW 67
// until not mpBlockRespThread ;
50880: LD_EXP 38
50884: NOT
50885: IFFALSE 50873
// mpBlockRespThread := true ;
50887: LD_ADDR_EXP 38
50891: PUSH
50892: LD_INT 1
50894: ST_TO_ADDR
// uc_side := side ;
50895: LD_ADDR_OWVAR 20
50899: PUSH
50900: LD_VAR 0 9
50904: ST_TO_ADDR
// uc_nation := nation ;
50905: LD_ADDR_OWVAR 21
50909: PUSH
50910: LD_VAR 0 8
50914: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
50915: LD_INT 0
50917: PPUSH
50918: LD_VAR 0 6
50922: PPUSH
50923: LD_INT 2
50925: PPUSH
50926: CALL_OW 380
// un := CreateHuman ;
50930: LD_ADDR_VAR 0 1
50934: PUSH
50935: CALL_OW 44
50939: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
50940: LD_ADDR_EXP 37
50944: PUSH
50945: LD_EXP 37
50949: PPUSH
50950: LD_VAR 0 9
50954: PPUSH
50955: LD_EXP 37
50959: PUSH
50960: LD_VAR 0 9
50964: ARRAY
50965: PPUSH
50966: LD_EXP 37
50970: PUSH
50971: LD_VAR 0 9
50975: ARRAY
50976: PUSH
50977: LD_INT 1
50979: PLUS
50980: PPUSH
50981: LD_VAR 0 1
50985: PPUSH
50986: CALL_OW 1
50990: PPUSH
50991: CALL_OW 1
50995: ST_TO_ADDR
// wait ( 10 ) ;
50996: LD_INT 10
50998: PPUSH
50999: CALL_OW 67
// mpBlockRespThread := false ;
51003: LD_ADDR_EXP 38
51007: PUSH
51008: LD_INT 0
51010: ST_TO_ADDR
// end ; end ;
51011: LD_VAR 0 2
51015: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
51016: LD_INT 0
51018: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
51019: LD_VAR 0 1
51023: PPUSH
51024: CALL_OW 266
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: IN
51039: IFFALSE 51064
// SetBName ( building , @ & GetSide ( building ) ) ;
51041: LD_VAR 0 1
51045: PPUSH
51046: LD_STRING @
51048: PUSH
51049: LD_VAR 0 1
51053: PPUSH
51054: CALL_OW 255
51058: STR
51059: PPUSH
51060: CALL_OW 500
// end ;
51064: LD_VAR 0 2
51068: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
51069: LD_INT 0
51071: PPUSH
51072: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
51073: LD_EXP 1
51077: PUSH
51078: LD_INT 2
51080: EQUAL
51081: PUSH
51082: LD_VAR 0 1
51086: PPUSH
51087: CALL_OW 266
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: IN
51102: AND
51103: IFFALSE 51168
// begin KillUnit ( building ) ;
51105: LD_VAR 0 1
51109: PPUSH
51110: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
51114: LD_ADDR_VAR 0 5
51118: PUSH
51119: LD_INT 22
51121: PUSH
51122: LD_VAR 0 2
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 21
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PPUSH
51145: CALL_OW 69
51149: PUSH
51150: FOR_IN
51151: IFFALSE 51164
// KillUnit ( i ) ;
51153: LD_VAR 0 5
51157: PPUSH
51158: CALL_OW 66
51162: GO 51150
51164: POP
51165: POP
// exit ;
51166: GO 51213
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51168: LD_VAR 0 1
51172: PPUSH
51173: CALL_OW 266
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: LD_INT 1
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: IN
51188: IFFALSE 51213
// SetBName ( building , @ & GetSide ( building ) ) ;
51190: LD_VAR 0 1
51194: PPUSH
51195: LD_STRING @
51197: PUSH
51198: LD_VAR 0 1
51202: PPUSH
51203: CALL_OW 255
51207: STR
51208: PPUSH
51209: CALL_OW 500
// end ; end_of_file
51213: LD_VAR 0 4
51217: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51218: LD_EXP 36
51222: PUSH
51223: CALL 51428 0 0
51227: AND
51228: PUSH
51229: LD_OWVAR 4
51233: AND
51234: IFFALSE 51425
51236: GO 51238
51238: DISABLE
51239: LD_INT 0
51241: PPUSH
51242: PPUSH
// begin canWin := false ;
51243: LD_ADDR_VAR 0 2
51247: PUSH
51248: LD_INT 0
51250: ST_TO_ADDR
// if not HasPower ( your_side ) then
51251: LD_OWVAR 2
51255: PPUSH
51256: CALL 51468 0 1
51260: NOT
51261: IFFALSE 51272
// begin Multiplayer_Loose_Message ;
51263: CALL_OW 521
// enable ( mpLose ) ;
51267: LD_INT 102
51269: ENABLE_MARKED
// end else
51270: GO 51425
// begin canWin := true ;
51272: LD_ADDR_VAR 0 2
51276: PUSH
51277: LD_INT 1
51279: ST_TO_ADDR
// for i := 1 to 8 do
51280: LD_ADDR_VAR 0 1
51284: PUSH
51285: DOUBLE
51286: LD_INT 1
51288: DEC
51289: ST_TO_ADDR
51290: LD_INT 8
51292: PUSH
51293: FOR_TO
51294: IFFALSE 51411
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51296: LD_EXP 5
51300: PUSH
51301: LD_VAR 0 1
51305: ARRAY
51306: PUSH
51307: LD_VAR 0 1
51311: PPUSH
51312: CALL_OW 108
51316: AND
51317: PUSH
51318: LD_VAR 0 1
51322: PUSH
51323: LD_OWVAR 2
51327: NONEQUAL
51328: AND
51329: IFFALSE 51409
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51331: LD_EXP 6
51335: PUSH
51336: LD_VAR 0 1
51340: ARRAY
51341: NOT
51342: PUSH
51343: LD_EXP 6
51347: PUSH
51348: LD_VAR 0 1
51352: ARRAY
51353: PUSH
51354: LD_EXP 6
51358: PUSH
51359: LD_OWVAR 2
51363: ARRAY
51364: NONEQUAL
51365: PUSH
51366: LD_OWVAR 2
51370: PPUSH
51371: LD_VAR 0 1
51375: PPUSH
51376: CALL_OW 81
51380: PUSH
51381: LD_INT 1
51383: NONEQUAL
51384: AND
51385: OR
51386: IFFALSE 51409
// if HasPower ( i ) then
51388: LD_VAR 0 1
51392: PPUSH
51393: CALL 51468 0 1
51397: IFFALSE 51409
// begin canWin := false ;
51399: LD_ADDR_VAR 0 2
51403: PUSH
51404: LD_INT 0
51406: ST_TO_ADDR
// break ;
51407: GO 51411
// end ;
51409: GO 51293
51411: POP
51412: POP
// if canWin then
51413: LD_VAR 0 2
51417: IFFALSE 51424
// enable ( mpWin ) else
51419: LD_INT 101
51421: ENABLE_MARKED
51422: GO 51425
// enable ;
51424: ENABLE
// end ; end ;
51425: PPOPN 2
51427: END
// function CanWinLoose ; begin
51428: LD_INT 0
51430: PPUSH
// result := true ;
51431: LD_ADDR_VAR 0 1
51435: PUSH
51436: LD_INT 1
51438: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51439: CALL_OW 531
51443: PUSH
51444: CALL_OW 519
51448: PUSH
51449: LD_INT 1
51451: GREATER
51452: AND
51453: IFFALSE 51463
// result := false ;
51455: LD_ADDR_VAR 0 1
51459: PUSH
51460: LD_INT 0
51462: ST_TO_ADDR
// end ;
51463: LD_VAR 0 1
51467: RET
// function HasPower ( i ) ; begin
51468: LD_INT 0
51470: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51471: LD_ADDR_VAR 0 2
51475: PUSH
51476: LD_INT 22
51478: PUSH
51479: LD_VAR 0 1
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 2
51490: PUSH
51491: LD_INT 21
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 33
51503: PUSH
51504: LD_INT 3
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 33
51513: PUSH
51514: LD_INT 5
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PPUSH
51531: CALL_OW 69
51535: ST_TO_ADDR
// end ; end_of_file
51536: LD_VAR 0 2
51540: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51541: LD_EXP 36
51545: IFFALSE 51588
51547: GO 51549
51549: DISABLE
51550: LD_INT 0
51552: PPUSH
// begin for i := 1 to 8 do
51553: LD_ADDR_VAR 0 1
51557: PUSH
51558: DOUBLE
51559: LD_INT 1
51561: DEC
51562: ST_TO_ADDR
51563: LD_INT 8
51565: PUSH
51566: FOR_TO
51567: IFFALSE 51586
// SetRestrict ( b_depot , i , state_disabled ) ;
51569: LD_INT 0
51571: PPUSH
51572: LD_VAR 0 1
51576: PPUSH
51577: LD_INT 0
51579: PPUSH
51580: CALL_OW 324
51584: GO 51566
51586: POP
51587: POP
// end ;
51588: PPOPN 1
51590: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51591: LD_EXP 36
51595: PUSH
51596: CALL 51801 0 0
51600: AND
51601: PUSH
51602: LD_OWVAR 4
51606: AND
51607: IFFALSE 51798
51609: GO 51611
51611: DISABLE
51612: LD_INT 0
51614: PPUSH
51615: PPUSH
// begin canWin := false ;
51616: LD_ADDR_VAR 0 2
51620: PUSH
51621: LD_INT 0
51623: ST_TO_ADDR
// if not HasPower ( your_side ) then
51624: LD_OWVAR 2
51628: PPUSH
51629: CALL 51841 0 1
51633: NOT
51634: IFFALSE 51645
// begin Multiplayer_Loose_Message ;
51636: CALL_OW 521
// enable ( mpLose ) ;
51640: LD_INT 102
51642: ENABLE_MARKED
// end else
51643: GO 51798
// begin canWin := true ;
51645: LD_ADDR_VAR 0 2
51649: PUSH
51650: LD_INT 1
51652: ST_TO_ADDR
// for i := 1 to 8 do
51653: LD_ADDR_VAR 0 1
51657: PUSH
51658: DOUBLE
51659: LD_INT 1
51661: DEC
51662: ST_TO_ADDR
51663: LD_INT 8
51665: PUSH
51666: FOR_TO
51667: IFFALSE 51784
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51669: LD_EXP 5
51673: PUSH
51674: LD_VAR 0 1
51678: ARRAY
51679: PUSH
51680: LD_VAR 0 1
51684: PPUSH
51685: CALL_OW 108
51689: AND
51690: PUSH
51691: LD_VAR 0 1
51695: PUSH
51696: LD_OWVAR 2
51700: NONEQUAL
51701: AND
51702: IFFALSE 51782
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51704: LD_EXP 6
51708: PUSH
51709: LD_VAR 0 1
51713: ARRAY
51714: NOT
51715: PUSH
51716: LD_EXP 6
51720: PUSH
51721: LD_VAR 0 1
51725: ARRAY
51726: PUSH
51727: LD_EXP 6
51731: PUSH
51732: LD_OWVAR 2
51736: ARRAY
51737: NONEQUAL
51738: PUSH
51739: LD_OWVAR 2
51743: PPUSH
51744: LD_VAR 0 1
51748: PPUSH
51749: CALL_OW 81
51753: PUSH
51754: LD_INT 1
51756: NONEQUAL
51757: AND
51758: OR
51759: IFFALSE 51782
// if HasPower ( i ) then
51761: LD_VAR 0 1
51765: PPUSH
51766: CALL 51841 0 1
51770: IFFALSE 51782
// begin canWin := false ;
51772: LD_ADDR_VAR 0 2
51776: PUSH
51777: LD_INT 0
51779: ST_TO_ADDR
// break ;
51780: GO 51784
// end ;
51782: GO 51666
51784: POP
51785: POP
// if canWin then
51786: LD_VAR 0 2
51790: IFFALSE 51797
// enable ( mpWin ) else
51792: LD_INT 101
51794: ENABLE_MARKED
51795: GO 51798
// enable ;
51797: ENABLE
// end ; end ;
51798: PPOPN 2
51800: END
// function CanWinLoose ; begin
51801: LD_INT 0
51803: PPUSH
// result := true ;
51804: LD_ADDR_VAR 0 1
51808: PUSH
51809: LD_INT 1
51811: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51812: CALL_OW 531
51816: PUSH
51817: CALL_OW 519
51821: PUSH
51822: LD_INT 1
51824: GREATER
51825: AND
51826: IFFALSE 51836
// result := false ;
51828: LD_ADDR_VAR 0 1
51832: PUSH
51833: LD_INT 0
51835: ST_TO_ADDR
// end ;
51836: LD_VAR 0 1
51840: RET
// function HasPower ( i ) ; begin
51841: LD_INT 0
51843: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
51844: LD_INT 22
51846: PUSH
51847: LD_VAR 0 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: LD_INT 30
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 30
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: LIST
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PPUSH
51888: CALL_OW 69
51892: NOT
51893: IFFALSE 51897
// exit ;
51895: GO 51962
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51897: LD_ADDR_VAR 0 2
51901: PUSH
51902: LD_INT 22
51904: PUSH
51905: LD_VAR 0 1
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: LD_INT 21
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 33
51929: PUSH
51930: LD_INT 3
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 33
51939: PUSH
51940: LD_INT 5
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PPUSH
51957: CALL_OW 69
51961: ST_TO_ADDR
// end ; end_of_file
51962: LD_VAR 0 2
51966: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
51967: LD_EXP 36
51971: IFFALSE 52310
51973: GO 51975
51975: DISABLE
51976: LD_INT 0
51978: PPUSH
51979: PPUSH
51980: PPUSH
// begin mpKingPoints := [ ] ;
51981: LD_ADDR_EXP 41
51985: PUSH
51986: EMPTY
51987: ST_TO_ADDR
// if mpTeamGame then
51988: LD_EXP 9
51992: IFFALSE 52046
// begin for i := 1 to Count ( mpTeams ) do
51994: LD_ADDR_VAR 0 1
51998: PUSH
51999: DOUBLE
52000: LD_INT 1
52002: DEC
52003: ST_TO_ADDR
52004: LD_EXP 8
52008: PPUSH
52009: CALL 4883 0 1
52013: PUSH
52014: FOR_TO
52015: IFFALSE 52042
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52017: LD_ADDR_EXP 41
52021: PUSH
52022: LD_EXP 41
52026: PPUSH
52027: LD_VAR 0 1
52031: PPUSH
52032: LD_INT 0
52034: PPUSH
52035: CALL_OW 1
52039: ST_TO_ADDR
52040: GO 52014
52042: POP
52043: POP
// end else
52044: GO 52089
// begin for i := 1 to 8 do
52046: LD_ADDR_VAR 0 1
52050: PUSH
52051: DOUBLE
52052: LD_INT 1
52054: DEC
52055: ST_TO_ADDR
52056: LD_INT 8
52058: PUSH
52059: FOR_TO
52060: IFFALSE 52087
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52062: LD_ADDR_EXP 41
52066: PUSH
52067: LD_EXP 41
52071: PPUSH
52072: LD_VAR 0 1
52076: PPUSH
52077: LD_INT 0
52079: PPUSH
52080: CALL_OW 1
52084: ST_TO_ADDR
52085: GO 52059
52087: POP
52088: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
52089: LD_ADDR_VAR 0 3
52093: PUSH
52094: LD_INT 51
52096: PPUSH
52097: LD_INT 0
52099: PPUSH
52100: CALL_OW 517
52104: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52105: LD_ADDR_VAR 0 1
52109: PUSH
52110: DOUBLE
52111: LD_INT 1
52113: DEC
52114: ST_TO_ADDR
52115: LD_VAR 0 3
52119: PUSH
52120: LD_INT 1
52122: ARRAY
52123: PUSH
52124: FOR_TO
52125: IFFALSE 52192
// for j := 1 to 8 do
52127: LD_ADDR_VAR 0 2
52131: PUSH
52132: DOUBLE
52133: LD_INT 1
52135: DEC
52136: ST_TO_ADDR
52137: LD_INT 8
52139: PUSH
52140: FOR_TO
52141: IFFALSE 52188
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
52143: LD_VAR 0 3
52147: PUSH
52148: LD_INT 1
52150: ARRAY
52151: PUSH
52152: LD_VAR 0 1
52156: ARRAY
52157: PPUSH
52158: LD_VAR 0 3
52162: PUSH
52163: LD_INT 2
52165: ARRAY
52166: PUSH
52167: LD_VAR 0 1
52171: ARRAY
52172: PPUSH
52173: LD_VAR 0 2
52177: PPUSH
52178: LD_INT 12
52180: NEG
52181: PPUSH
52182: CALL_OW 330
52186: GO 52140
52188: POP
52189: POP
52190: GO 52124
52192: POP
52193: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52194: LD_EXP 31
52198: PPUSH
52199: LD_INT 1
52201: PPUSH
52202: CALL_OW 424
// UpdateCounter ;
52206: CALL 52812 0 0
// repeat wait ( 0 0$1 ) ;
52210: LD_INT 35
52212: PPUSH
52213: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52217: LD_ADDR_VAR 0 3
52221: PUSH
52222: LD_EXP 31
52226: PPUSH
52227: LD_INT 3
52229: PUSH
52230: LD_INT 57
52232: PUSH
52233: EMPTY
52234: LIST
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 50
52242: PUSH
52243: EMPTY
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: LD_INT 30
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 30
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: LIST
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: LIST
52278: PPUSH
52279: CALL_OW 70
52283: ST_TO_ADDR
// if not tmp then
52284: LD_VAR 0 3
52288: NOT
52289: IFFALSE 52293
// continue ;
52291: GO 52210
// AddPoints ( tmp ) ;
52293: LD_VAR 0 3
52297: PPUSH
52298: CALL 52490 0 1
// UpdateCounter ;
52302: CALL 52812 0 0
// until false ;
52306: LD_INT 0
52308: IFFALSE 52210
// end ;
52310: PPOPN 3
52312: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52313: LD_EXP 36
52317: PUSH
52318: LD_EXP 34
52322: AND
52323: IFFALSE 52487
52325: GO 52327
52327: DISABLE
52328: LD_INT 0
52330: PPUSH
52331: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52332: LD_ADDR_VAR 0 2
52336: PUSH
52337: LD_INT 51
52339: PPUSH
52340: LD_INT 0
52342: PPUSH
52343: CALL_OW 517
52347: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52348: LD_ADDR_VAR 0 1
52352: PUSH
52353: DOUBLE
52354: LD_INT 1
52356: DEC
52357: ST_TO_ADDR
52358: LD_VAR 0 2
52362: PUSH
52363: LD_INT 1
52365: ARRAY
52366: PUSH
52367: FOR_TO
52368: IFFALSE 52409
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52370: LD_VAR 0 2
52374: PUSH
52375: LD_INT 1
52377: ARRAY
52378: PUSH
52379: LD_VAR 0 1
52383: ARRAY
52384: PPUSH
52385: LD_VAR 0 2
52389: PUSH
52390: LD_INT 2
52392: ARRAY
52393: PUSH
52394: LD_VAR 0 1
52398: ARRAY
52399: PPUSH
52400: LD_INT 125
52402: PPUSH
52403: CALL_OW 495
52407: GO 52367
52409: POP
52410: POP
// repeat wait ( mpEmissions ) ;
52411: LD_EXP 34
52415: PPUSH
52416: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52420: LD_ADDR_VAR 0 1
52424: PUSH
52425: DOUBLE
52426: LD_INT 1
52428: DEC
52429: ST_TO_ADDR
52430: LD_VAR 0 2
52434: PUSH
52435: LD_INT 1
52437: ARRAY
52438: PUSH
52439: FOR_TO
52440: IFFALSE 52481
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52442: LD_VAR 0 2
52446: PUSH
52447: LD_INT 1
52449: ARRAY
52450: PUSH
52451: LD_VAR 0 1
52455: ARRAY
52456: PPUSH
52457: LD_VAR 0 2
52461: PUSH
52462: LD_INT 2
52464: ARRAY
52465: PUSH
52466: LD_VAR 0 1
52470: ARRAY
52471: PPUSH
52472: LD_INT 15
52474: PPUSH
52475: CALL_OW 495
52479: GO 52439
52481: POP
52482: POP
// until false ;
52483: LD_INT 0
52485: IFFALSE 52411
// end ;
52487: PPOPN 2
52489: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52490: LD_INT 0
52492: PPUSH
52493: PPUSH
52494: PPUSH
52495: PPUSH
52496: PPUSH
// if mpTeamGame then
52497: LD_EXP 9
52501: IFFALSE 52698
// begin first := depots [ 1 ] ;
52503: LD_ADDR_VAR 0 4
52507: PUSH
52508: LD_VAR 0 1
52512: PUSH
52513: LD_INT 1
52515: ARRAY
52516: ST_TO_ADDR
// side := GetSide ( first ) ;
52517: LD_ADDR_VAR 0 6
52521: PUSH
52522: LD_VAR 0 4
52526: PPUSH
52527: CALL_OW 255
52531: ST_TO_ADDR
// for i := 1 to mpTeams do
52532: LD_ADDR_VAR 0 3
52536: PUSH
52537: DOUBLE
52538: LD_INT 1
52540: DEC
52541: ST_TO_ADDR
52542: LD_EXP 8
52546: PUSH
52547: FOR_TO
52548: IFFALSE 52582
// if side in mpTeams [ i ] then
52550: LD_VAR 0 6
52554: PUSH
52555: LD_EXP 8
52559: PUSH
52560: LD_VAR 0 3
52564: ARRAY
52565: IN
52566: IFFALSE 52580
// begin team := i ;
52568: LD_ADDR_VAR 0 5
52572: PUSH
52573: LD_VAR 0 3
52577: ST_TO_ADDR
// break ;
52578: GO 52582
// end ;
52580: GO 52547
52582: POP
52583: POP
// if not team then
52584: LD_VAR 0 5
52588: NOT
52589: IFFALSE 52593
// exit ;
52591: GO 52807
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52593: LD_EXP 31
52597: PPUSH
52598: LD_INT 81
52600: PUSH
52601: LD_VAR 0 6
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PPUSH
52610: CALL_OW 70
52614: IFFALSE 52618
// exit ;
52616: GO 52807
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52618: LD_ADDR_EXP 41
52622: PUSH
52623: LD_EXP 41
52627: PPUSH
52628: LD_VAR 0 5
52632: PPUSH
52633: LD_EXP 41
52637: PUSH
52638: LD_VAR 0 5
52642: ARRAY
52643: PUSH
52644: LD_INT 1
52646: PLUS
52647: PPUSH
52648: CALL_OW 1
52652: ST_TO_ADDR
// for i in mpTeams [ team ] do
52653: LD_ADDR_VAR 0 3
52657: PUSH
52658: LD_EXP 8
52662: PUSH
52663: LD_VAR 0 5
52667: ARRAY
52668: PUSH
52669: FOR_IN
52670: IFFALSE 52694
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52672: LD_VAR 0 3
52676: PPUSH
52677: LD_EXP 41
52681: PUSH
52682: LD_VAR 0 5
52686: ARRAY
52687: PPUSH
52688: CALL_OW 506
52692: GO 52669
52694: POP
52695: POP
// end else
52696: GO 52807
// begin first := depots [ 1 ] ;
52698: LD_ADDR_VAR 0 4
52702: PUSH
52703: LD_VAR 0 1
52707: PUSH
52708: LD_INT 1
52710: ARRAY
52711: ST_TO_ADDR
// side := GetSide ( first ) ;
52712: LD_ADDR_VAR 0 6
52716: PUSH
52717: LD_VAR 0 4
52721: PPUSH
52722: CALL_OW 255
52726: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52727: LD_EXP 31
52731: PPUSH
52732: LD_INT 81
52734: PUSH
52735: LD_VAR 0 6
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PPUSH
52744: CALL_OW 70
52748: IFFALSE 52752
// exit ;
52750: GO 52807
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52752: LD_ADDR_EXP 41
52756: PUSH
52757: LD_EXP 41
52761: PPUSH
52762: LD_VAR 0 6
52766: PPUSH
52767: LD_EXP 41
52771: PUSH
52772: LD_VAR 0 6
52776: ARRAY
52777: PUSH
52778: LD_INT 1
52780: PLUS
52781: PPUSH
52782: CALL_OW 1
52786: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
52787: LD_VAR 0 6
52791: PPUSH
52792: LD_EXP 41
52796: PUSH
52797: LD_VAR 0 6
52801: ARRAY
52802: PPUSH
52803: CALL_OW 506
// end ; end ;
52807: LD_VAR 0 2
52811: RET
// function UpdateCounter ; var i ; begin
52812: LD_INT 0
52814: PPUSH
52815: PPUSH
// result := [ ] ;
52816: LD_ADDR_VAR 0 1
52820: PUSH
52821: EMPTY
52822: ST_TO_ADDR
// if mpTeamGame then
52823: LD_EXP 9
52827: IFFALSE 52894
// begin for i := 1 to mpTeams do
52829: LD_ADDR_VAR 0 2
52833: PUSH
52834: DOUBLE
52835: LD_INT 1
52837: DEC
52838: ST_TO_ADDR
52839: LD_EXP 8
52843: PUSH
52844: FOR_TO
52845: IFFALSE 52890
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
52847: LD_ADDR_VAR 0 1
52851: PUSH
52852: LD_VAR 0 1
52856: PUSH
52857: LD_STRING #KingoftheHill-Team
52859: PUSH
52860: LD_VAR 0 2
52864: PUSH
52865: LD_EXP 41
52869: PUSH
52870: LD_VAR 0 2
52874: ARRAY
52875: PUSH
52876: LD_EXP 32
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: ADD
52887: ST_TO_ADDR
52888: GO 52844
52890: POP
52891: POP
// end else
52892: GO 52967
// begin for i := 1 to 8 do
52894: LD_ADDR_VAR 0 2
52898: PUSH
52899: DOUBLE
52900: LD_INT 1
52902: DEC
52903: ST_TO_ADDR
52904: LD_INT 8
52906: PUSH
52907: FOR_TO
52908: IFFALSE 52965
// if mpSidePositions [ i ] then
52910: LD_EXP 5
52914: PUSH
52915: LD_VAR 0 2
52919: ARRAY
52920: IFFALSE 52963
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
52922: LD_ADDR_VAR 0 1
52926: PUSH
52927: LD_VAR 0 1
52931: PUSH
52932: LD_STRING #KingoftheHill-Player
52934: PUSH
52935: LD_VAR 0 2
52939: PUSH
52940: LD_EXP 41
52944: PUSH
52945: LD_VAR 0 2
52949: ARRAY
52950: PUSH
52951: LD_EXP 32
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: ADD
52962: ST_TO_ADDR
52963: GO 52907
52965: POP
52966: POP
// end ; mpDisplayStrings := result ;
52967: LD_ADDR_EXP 35
52971: PUSH
52972: LD_VAR 0 1
52976: ST_TO_ADDR
// end ;
52977: LD_VAR 0 1
52981: RET
// export function HowMuchPointsKing ( side ) ; begin
52982: LD_INT 0
52984: PPUSH
// result := HowMuchPoints ( side ) ;
52985: LD_ADDR_VAR 0 2
52989: PUSH
52990: LD_VAR 0 1
52994: PPUSH
52995: CALL 53005 0 1
52999: ST_TO_ADDR
// end ;
53000: LD_VAR 0 2
53004: RET
// function HowMuchPoints ( side ) ; var i ; begin
53005: LD_INT 0
53007: PPUSH
53008: PPUSH
// if mpTeamGame then
53009: LD_EXP 9
53013: IFFALSE 53082
// begin for i := 1 to Count ( mpTeams ) do
53015: LD_ADDR_VAR 0 3
53019: PUSH
53020: DOUBLE
53021: LD_INT 1
53023: DEC
53024: ST_TO_ADDR
53025: LD_EXP 8
53029: PPUSH
53030: CALL 4883 0 1
53034: PUSH
53035: FOR_TO
53036: IFFALSE 53078
// begin if side in mpTeams [ i ] then
53038: LD_VAR 0 1
53042: PUSH
53043: LD_EXP 8
53047: PUSH
53048: LD_VAR 0 3
53052: ARRAY
53053: IN
53054: IFFALSE 53076
// begin result := mpKingPoints [ i ] ;
53056: LD_ADDR_VAR 0 2
53060: PUSH
53061: LD_EXP 41
53065: PUSH
53066: LD_VAR 0 3
53070: ARRAY
53071: ST_TO_ADDR
// exit ;
53072: POP
53073: POP
53074: GO 53098
// end ; end ;
53076: GO 53035
53078: POP
53079: POP
// end else
53080: GO 53098
// result := mpKingPoints [ side ] ;
53082: LD_ADDR_VAR 0 2
53086: PUSH
53087: LD_EXP 41
53091: PUSH
53092: LD_VAR 0 1
53096: ARRAY
53097: ST_TO_ADDR
// end ;
53098: LD_VAR 0 2
53102: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
53103: LD_EXP 36
53107: PUSH
53108: CALL 53430 0 0
53112: AND
53113: PUSH
53114: LD_OWVAR 4
53118: AND
53119: IFFALSE 53355
53121: GO 53123
53123: DISABLE
53124: LD_INT 0
53126: PPUSH
53127: PPUSH
// begin canWin := false ;
53128: LD_ADDR_VAR 0 2
53132: PUSH
53133: LD_INT 0
53135: ST_TO_ADDR
// if not HasPower ( your_side ) then
53136: LD_OWVAR 2
53140: PPUSH
53141: CALL 53470 0 1
53145: NOT
53146: IFFALSE 53157
// begin Multiplayer_Loose_Message ;
53148: CALL_OW 521
// enable ( mpLose ) ;
53152: LD_INT 102
53154: ENABLE_MARKED
// end else
53155: GO 53355
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
53157: LD_ADDR_VAR 0 2
53161: PUSH
53162: LD_OWVAR 2
53166: PPUSH
53167: CALL 53005 0 1
53171: PUSH
53172: LD_EXP 32
53176: GREATEREQUAL
53177: PUSH
53178: LD_OWVAR 2
53182: PPUSH
53183: CALL 53470 0 1
53187: AND
53188: PUSH
53189: CALL 53358 0 0
53193: NOT
53194: OR
53195: ST_TO_ADDR
// for i := 1 to 8 do
53196: LD_ADDR_VAR 0 1
53200: PUSH
53201: DOUBLE
53202: LD_INT 1
53204: DEC
53205: ST_TO_ADDR
53206: LD_INT 8
53208: PUSH
53209: FOR_TO
53210: IFFALSE 53341
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53212: LD_EXP 5
53216: PUSH
53217: LD_VAR 0 1
53221: ARRAY
53222: PUSH
53223: LD_VAR 0 1
53227: PPUSH
53228: CALL_OW 108
53232: AND
53233: PUSH
53234: LD_VAR 0 1
53238: PUSH
53239: LD_OWVAR 2
53243: NONEQUAL
53244: AND
53245: IFFALSE 53339
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53247: LD_EXP 6
53251: PUSH
53252: LD_VAR 0 1
53256: ARRAY
53257: NOT
53258: PUSH
53259: LD_EXP 6
53263: PUSH
53264: LD_VAR 0 1
53268: ARRAY
53269: PUSH
53270: LD_EXP 6
53274: PUSH
53275: LD_OWVAR 2
53279: ARRAY
53280: NONEQUAL
53281: PUSH
53282: LD_OWVAR 2
53286: PPUSH
53287: LD_VAR 0 1
53291: PPUSH
53292: CALL_OW 81
53296: PUSH
53297: LD_INT 1
53299: NONEQUAL
53300: AND
53301: OR
53302: IFFALSE 53339
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53304: LD_VAR 0 1
53308: PPUSH
53309: CALL 53005 0 1
53313: PUSH
53314: LD_EXP 32
53318: GREATEREQUAL
53319: PUSH
53320: LD_VAR 0 1
53324: PPUSH
53325: CALL 53470 0 1
53329: AND
53330: IFFALSE 53339
// begin enable ( mpLose ) ;
53332: LD_INT 102
53334: ENABLE_MARKED
// exit ;
53335: POP
53336: POP
53337: GO 53355
// end ;
53339: GO 53209
53341: POP
53342: POP
// if canWin then
53343: LD_VAR 0 2
53347: IFFALSE 53354
// enable ( mpWin ) else
53349: LD_INT 101
53351: ENABLE_MARKED
53352: GO 53355
// enable ;
53354: ENABLE
// end ; end ;
53355: PPOPN 2
53357: END
// function EnemiesInGame ; var i ; begin
53358: LD_INT 0
53360: PPUSH
53361: PPUSH
// result := false ;
53362: LD_ADDR_VAR 0 1
53366: PUSH
53367: LD_INT 0
53369: ST_TO_ADDR
// for i := 1 to 8 do
53370: LD_ADDR_VAR 0 2
53374: PUSH
53375: DOUBLE
53376: LD_INT 1
53378: DEC
53379: ST_TO_ADDR
53380: LD_INT 8
53382: PUSH
53383: FOR_TO
53384: IFFALSE 53423
// if i <> your_side and HasPower ( i ) then
53386: LD_VAR 0 2
53390: PUSH
53391: LD_OWVAR 2
53395: NONEQUAL
53396: PUSH
53397: LD_VAR 0 2
53401: PPUSH
53402: CALL 53470 0 1
53406: AND
53407: IFFALSE 53421
// begin result := true ;
53409: LD_ADDR_VAR 0 1
53413: PUSH
53414: LD_INT 1
53416: ST_TO_ADDR
// exit ;
53417: POP
53418: POP
53419: GO 53425
// end ;
53421: GO 53383
53423: POP
53424: POP
// end ;
53425: LD_VAR 0 1
53429: RET
// function CanWinLoose ; begin
53430: LD_INT 0
53432: PPUSH
// result := true ;
53433: LD_ADDR_VAR 0 1
53437: PUSH
53438: LD_INT 1
53440: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53441: CALL_OW 531
53445: PUSH
53446: CALL_OW 519
53450: PUSH
53451: LD_INT 1
53453: GREATER
53454: AND
53455: IFFALSE 53465
// result := false ;
53457: LD_ADDR_VAR 0 1
53461: PUSH
53462: LD_INT 0
53464: ST_TO_ADDR
// end ;
53465: LD_VAR 0 1
53469: RET
// function HasPower ( i ) ; begin
53470: LD_INT 0
53472: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53473: LD_ADDR_VAR 0 2
53477: PUSH
53478: LD_INT 22
53480: PUSH
53481: LD_VAR 0 1
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 2
53492: PUSH
53493: LD_INT 21
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 33
53505: PUSH
53506: LD_INT 3
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 33
53515: PUSH
53516: LD_INT 5
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PPUSH
53533: CALL_OW 69
53537: ST_TO_ADDR
// end ; end_of_file
53538: LD_VAR 0 2
53542: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53543: LD_VAR 0 1
53547: PUSH
53548: LD_INT 200
53550: DOUBLE
53551: GREATEREQUAL
53552: IFFALSE 53560
53554: LD_INT 299
53556: DOUBLE
53557: LESSEQUAL
53558: IFTRUE 53562
53560: GO 53594
53562: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53563: LD_VAR 0 1
53567: PPUSH
53568: LD_VAR 0 2
53572: PPUSH
53573: LD_VAR 0 3
53577: PPUSH
53578: LD_VAR 0 4
53582: PPUSH
53583: LD_VAR 0 5
53587: PPUSH
53588: CALL 54291 0 5
53592: GO 53671
53594: LD_INT 300
53596: DOUBLE
53597: GREATEREQUAL
53598: IFFALSE 53606
53600: LD_INT 399
53602: DOUBLE
53603: LESSEQUAL
53604: IFTRUE 53608
53606: GO 53670
53608: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53609: LD_VAR 0 1
53613: PPUSH
53614: LD_VAR 0 2
53618: PPUSH
53619: LD_VAR 0 3
53623: PPUSH
53624: LD_VAR 0 4
53628: PPUSH
53629: LD_VAR 0 5
53633: PPUSH
53634: LD_VAR 0 6
53638: PPUSH
53639: LD_VAR 0 7
53643: PPUSH
53644: LD_VAR 0 8
53648: PPUSH
53649: LD_VAR 0 9
53653: PPUSH
53654: LD_VAR 0 10
53658: PPUSH
53659: LD_VAR 0 11
53663: PPUSH
53664: CALL 59038 0 11
53668: GO 53671
53670: POP
// end ;
53671: PPOPN 11
53673: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53674: LD_VAR 0 1
53678: PPUSH
53679: LD_VAR 0 2
53683: PPUSH
53684: LD_VAR 0 3
53688: PPUSH
53689: LD_VAR 0 4
53693: PPUSH
53694: LD_VAR 0 5
53698: PPUSH
53699: CALL 53756 0 5
// end ; end_of_file
53703: PPOPN 5
53705: END
// export function SOS_UnitDestroyed ( un ) ; begin
53706: LD_INT 0
53708: PPUSH
// ComRadiation ( un ) ;
53709: LD_VAR 0 1
53713: PPUSH
53714: CALL 54695 0 1
// end ;
53718: LD_VAR 0 2
53722: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53723: LD_INT 0
53725: PPUSH
// ComRadiation ( un ) ;
53726: LD_VAR 0 1
53730: PPUSH
53731: CALL 54695 0 1
// end ;
53735: LD_VAR 0 2
53739: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53740: LD_INT 0
53742: PPUSH
// end ;
53743: LD_VAR 0 4
53747: RET
// export function SOS_Command ( cmd ) ; begin
53748: LD_INT 0
53750: PPUSH
// end ;
53751: LD_VAR 0 2
53755: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53756: LD_INT 0
53758: PPUSH
// end ;
53759: LD_VAR 0 6
53763: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
53764: LD_INT 0
53766: PPUSH
53767: PPUSH
53768: PPUSH
53769: PPUSH
53770: PPUSH
// if not vehicle or not factory then
53771: LD_VAR 0 1
53775: NOT
53776: PUSH
53777: LD_VAR 0 2
53781: NOT
53782: OR
53783: IFFALSE 53787
// exit ;
53785: GO 54286
// if not factoryWaypoints then
53787: LD_EXP 52
53791: NOT
53792: IFFALSE 53796
// exit ;
53794: GO 54286
// for i := 1 to Count ( factoryWaypoints ) do
53796: LD_ADDR_VAR 0 4
53800: PUSH
53801: DOUBLE
53802: LD_INT 1
53804: DEC
53805: ST_TO_ADDR
53806: LD_EXP 52
53810: PPUSH
53811: CALL 4883 0 1
53815: PUSH
53816: FOR_TO
53817: IFFALSE 54284
// if factoryWaypoints [ i ] [ 2 ] = factory then
53819: LD_EXP 52
53823: PUSH
53824: LD_VAR 0 4
53828: ARRAY
53829: PUSH
53830: LD_INT 2
53832: ARRAY
53833: PUSH
53834: LD_VAR 0 2
53838: EQUAL
53839: IFFALSE 54282
// begin if GetControl ( vehicle ) = control_manual then
53841: LD_VAR 0 1
53845: PPUSH
53846: CALL_OW 263
53850: PUSH
53851: LD_INT 1
53853: EQUAL
53854: IFFALSE 54165
// begin driver := IsDrivenBy ( vehicle ) ;
53856: LD_ADDR_VAR 0 6
53860: PUSH
53861: LD_VAR 0 1
53865: PPUSH
53866: CALL_OW 311
53870: ST_TO_ADDR
// tag := GetTag ( driver ) ;
53871: LD_ADDR_VAR 0 5
53875: PUSH
53876: LD_VAR 0 6
53880: PPUSH
53881: CALL_OW 110
53885: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
53886: LD_VAR 0 5
53890: PUSH
53891: LD_INT 501
53893: EQUAL
53894: PUSH
53895: LD_VAR 0 1
53899: PPUSH
53900: CALL_OW 110
53904: PUSH
53905: LD_INT 501
53907: EQUAL
53908: OR
53909: IFFALSE 53915
// exit ;
53911: POP
53912: POP
53913: GO 54286
// if not HasTask ( driver ) then
53915: LD_VAR 0 6
53919: PPUSH
53920: CALL_OW 314
53924: NOT
53925: IFFALSE 54163
// begin SetTag ( driver , tDriver ) ;
53927: LD_VAR 0 6
53931: PPUSH
53932: LD_INT 501
53934: PPUSH
53935: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
53939: LD_VAR 0 1
53943: PPUSH
53944: LD_INT 501
53946: PPUSH
53947: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53951: LD_ADDR_VAR 0 7
53955: PUSH
53956: LD_EXP 52
53960: PUSH
53961: LD_VAR 0 4
53965: ARRAY
53966: PUSH
53967: LD_INT 3
53969: ARRAY
53970: PPUSH
53971: LD_EXP 52
53975: PUSH
53976: LD_VAR 0 4
53980: ARRAY
53981: PUSH
53982: LD_INT 4
53984: ARRAY
53985: PPUSH
53986: CALL_OW 428
53990: ST_TO_ADDR
// if hex then
53991: LD_VAR 0 7
53995: IFFALSE 54013
// ComMoveUnit ( driver , hex ) else
53997: LD_VAR 0 6
54001: PPUSH
54002: LD_VAR 0 7
54006: PPUSH
54007: CALL_OW 112
54011: GO 54052
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54013: LD_VAR 0 6
54017: PPUSH
54018: LD_EXP 52
54022: PUSH
54023: LD_VAR 0 4
54027: ARRAY
54028: PUSH
54029: LD_INT 3
54031: ARRAY
54032: PPUSH
54033: LD_EXP 52
54037: PUSH
54038: LD_VAR 0 4
54042: ARRAY
54043: PUSH
54044: LD_INT 4
54046: ARRAY
54047: PPUSH
54048: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54052: LD_VAR 0 6
54056: PPUSH
54057: CALL_OW 181
// if Multiplayer then
54061: LD_OWVAR 4
54065: IFFALSE 54114
// begin repeat wait ( 10 ) ;
54067: LD_INT 10
54069: PPUSH
54070: CALL_OW 67
// until not IsInUnit ( driver ) ;
54074: LD_VAR 0 6
54078: PPUSH
54079: CALL_OW 310
54083: NOT
54084: IFFALSE 54067
// if not HasTask ( driver ) then
54086: LD_VAR 0 6
54090: PPUSH
54091: CALL_OW 314
54095: NOT
54096: IFFALSE 54112
// ComEnterUnit ( driver , factory ) ;
54098: LD_VAR 0 6
54102: PPUSH
54103: LD_VAR 0 2
54107: PPUSH
54108: CALL_OW 120
// end else
54112: GO 54128
// AddComEnterUnit ( driver , factory ) ;
54114: LD_VAR 0 6
54118: PPUSH
54119: LD_VAR 0 2
54123: PPUSH
54124: CALL_OW 180
// wait ( 0 0$1 ) ;
54128: LD_INT 35
54130: PPUSH
54131: CALL_OW 67
// SetTag ( driver , tag ) ;
54135: LD_VAR 0 6
54139: PPUSH
54140: LD_VAR 0 5
54144: PPUSH
54145: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
54149: LD_VAR 0 1
54153: PPUSH
54154: LD_INT 0
54156: PPUSH
54157: CALL_OW 109
// break ;
54161: GO 54284
// end ; end else
54163: GO 54282
// if GetControl ( vehicle ) = control_remote then
54165: LD_VAR 0 1
54169: PPUSH
54170: CALL_OW 263
54174: PUSH
54175: LD_INT 2
54177: EQUAL
54178: IFFALSE 54241
// begin wait ( 0 0$2 ) ;
54180: LD_INT 70
54182: PPUSH
54183: CALL_OW 67
// if Connect ( vehicle ) then
54187: LD_VAR 0 1
54191: PPUSH
54192: CALL 11089 0 1
54196: IFFALSE 54237
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54198: LD_VAR 0 1
54202: PPUSH
54203: LD_EXP 52
54207: PUSH
54208: LD_VAR 0 4
54212: ARRAY
54213: PUSH
54214: LD_INT 3
54216: ARRAY
54217: PPUSH
54218: LD_EXP 52
54222: PUSH
54223: LD_VAR 0 4
54227: ARRAY
54228: PUSH
54229: LD_INT 4
54231: ARRAY
54232: PPUSH
54233: CALL_OW 171
// break ;
54237: GO 54284
// end else
54239: GO 54282
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54241: LD_VAR 0 1
54245: PPUSH
54246: LD_EXP 52
54250: PUSH
54251: LD_VAR 0 4
54255: ARRAY
54256: PUSH
54257: LD_INT 3
54259: ARRAY
54260: PPUSH
54261: LD_EXP 52
54265: PUSH
54266: LD_VAR 0 4
54270: ARRAY
54271: PUSH
54272: LD_INT 4
54274: ARRAY
54275: PPUSH
54276: CALL_OW 171
// break ;
54280: GO 54284
// end ; end ;
54282: GO 53816
54284: POP
54285: POP
// end ;
54286: LD_VAR 0 3
54290: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54291: LD_INT 0
54293: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54294: LD_VAR 0 1
54298: PUSH
54299: LD_INT 250
54301: EQUAL
54302: PUSH
54303: LD_VAR 0 2
54307: PPUSH
54308: CALL_OW 264
54312: PUSH
54313: LD_INT 81
54315: EQUAL
54316: AND
54317: IFFALSE 54338
// MinerPlaceMine ( unit , x , y ) ;
54319: LD_VAR 0 2
54323: PPUSH
54324: LD_VAR 0 4
54328: PPUSH
54329: LD_VAR 0 5
54333: PPUSH
54334: CALL 57430 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54338: LD_VAR 0 1
54342: PUSH
54343: LD_INT 251
54345: EQUAL
54346: PUSH
54347: LD_VAR 0 2
54351: PPUSH
54352: CALL_OW 264
54356: PUSH
54357: LD_INT 81
54359: EQUAL
54360: AND
54361: IFFALSE 54382
// MinerDetonateMine ( unit , x , y ) ;
54363: LD_VAR 0 2
54367: PPUSH
54368: LD_VAR 0 4
54372: PPUSH
54373: LD_VAR 0 5
54377: PPUSH
54378: CALL 57705 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54382: LD_VAR 0 1
54386: PUSH
54387: LD_INT 252
54389: EQUAL
54390: PUSH
54391: LD_VAR 0 2
54395: PPUSH
54396: CALL_OW 264
54400: PUSH
54401: LD_INT 81
54403: EQUAL
54404: AND
54405: IFFALSE 54426
// MinerCreateMinefield ( unit , x , y ) ;
54407: LD_VAR 0 2
54411: PPUSH
54412: LD_VAR 0 4
54416: PPUSH
54417: LD_VAR 0 5
54421: PPUSH
54422: CALL 58122 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54426: LD_VAR 0 1
54430: PUSH
54431: LD_INT 253
54433: EQUAL
54434: PUSH
54435: LD_VAR 0 2
54439: PPUSH
54440: CALL_OW 257
54444: PUSH
54445: LD_INT 5
54447: EQUAL
54448: AND
54449: IFFALSE 54470
// ComBinocular ( unit , x , y ) ;
54451: LD_VAR 0 2
54455: PPUSH
54456: LD_VAR 0 4
54460: PPUSH
54461: LD_VAR 0 5
54465: PPUSH
54466: CALL 58491 0 3
// if selectedUnit then
54470: LD_VAR 0 3
54474: IFFALSE 54530
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54476: LD_VAR 0 1
54480: PUSH
54481: LD_INT 254
54483: EQUAL
54484: PUSH
54485: LD_VAR 0 2
54489: PPUSH
54490: CALL_OW 264
54494: PUSH
54495: LD_INT 99
54497: EQUAL
54498: AND
54499: PUSH
54500: LD_VAR 0 3
54504: PPUSH
54505: CALL_OW 263
54509: PUSH
54510: LD_INT 3
54512: EQUAL
54513: AND
54514: IFFALSE 54530
// HackDestroyVehicle ( unit , selectedUnit ) ;
54516: LD_VAR 0 2
54520: PPUSH
54521: LD_VAR 0 3
54525: PPUSH
54526: CALL 56794 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54530: LD_VAR 0 1
54534: PUSH
54535: LD_INT 255
54537: EQUAL
54538: PUSH
54539: LD_VAR 0 2
54543: PPUSH
54544: CALL_OW 264
54548: PUSH
54549: LD_INT 14
54551: PUSH
54552: LD_INT 53
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: IN
54559: AND
54560: PUSH
54561: LD_VAR 0 4
54565: PPUSH
54566: LD_VAR 0 5
54570: PPUSH
54571: CALL_OW 488
54575: AND
54576: IFFALSE 54600
// CutTreeXYR ( unit , x , y , 12 ) ;
54578: LD_VAR 0 2
54582: PPUSH
54583: LD_VAR 0 4
54587: PPUSH
54588: LD_VAR 0 5
54592: PPUSH
54593: LD_INT 12
54595: PPUSH
54596: CALL 54791 0 4
// if cmd = 256 then
54600: LD_VAR 0 1
54604: PUSH
54605: LD_INT 256
54607: EQUAL
54608: IFFALSE 54629
// SetFactoryWaypoint ( unit , x , y ) ;
54610: LD_VAR 0 2
54614: PPUSH
54615: LD_VAR 0 4
54619: PPUSH
54620: LD_VAR 0 5
54624: PPUSH
54625: CALL 59046 0 3
// if cmd = 257 then
54629: LD_VAR 0 1
54633: PUSH
54634: LD_INT 257
54636: EQUAL
54637: IFFALSE 54658
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54639: LD_VAR 0 2
54643: PPUSH
54644: LD_VAR 0 4
54648: PPUSH
54649: LD_VAR 0 5
54653: PPUSH
54654: CALL 59536 0 3
// if cmd = 258 then
54658: LD_VAR 0 1
54662: PUSH
54663: LD_INT 258
54665: EQUAL
54666: IFFALSE 54690
// BurnTreeXYR ( unit , x , y , 8 ) ;
54668: LD_VAR 0 2
54672: PPUSH
54673: LD_VAR 0 4
54677: PPUSH
54678: LD_VAR 0 5
54682: PPUSH
54683: LD_INT 8
54685: PPUSH
54686: CALL 55185 0 4
// end ;
54690: LD_VAR 0 6
54694: RET
// export function ComRadiation ( un ) ; var eff ; begin
54695: LD_INT 0
54697: PPUSH
54698: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54699: LD_VAR 0 1
54703: PPUSH
54704: CALL_OW 264
54708: PUSH
54709: LD_INT 91
54711: NONEQUAL
54712: IFFALSE 54716
// exit ;
54714: GO 54786
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54716: LD_INT 68
54718: PPUSH
54719: LD_VAR 0 1
54723: PPUSH
54724: CALL_OW 255
54728: PPUSH
54729: CALL_OW 321
54733: PUSH
54734: LD_INT 2
54736: EQUAL
54737: IFFALSE 54749
// eff := 70 else
54739: LD_ADDR_VAR 0 3
54743: PUSH
54744: LD_INT 70
54746: ST_TO_ADDR
54747: GO 54757
// eff := 30 ;
54749: LD_ADDR_VAR 0 3
54753: PUSH
54754: LD_INT 30
54756: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54757: LD_VAR 0 1
54761: PPUSH
54762: CALL_OW 250
54766: PPUSH
54767: LD_VAR 0 1
54771: PPUSH
54772: CALL_OW 251
54776: PPUSH
54777: LD_VAR 0 3
54781: PPUSH
54782: CALL_OW 495
// end ;
54786: LD_VAR 0 2
54790: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54791: LD_INT 0
54793: PPUSH
54794: PPUSH
54795: PPUSH
54796: PPUSH
54797: PPUSH
54798: PPUSH
54799: PPUSH
54800: PPUSH
54801: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54802: LD_VAR 0 1
54806: PPUSH
54807: CALL_OW 302
54811: NOT
54812: PUSH
54813: LD_VAR 0 2
54817: PPUSH
54818: LD_VAR 0 3
54822: PPUSH
54823: CALL_OW 488
54827: NOT
54828: OR
54829: PUSH
54830: LD_VAR 0 4
54834: NOT
54835: OR
54836: IFFALSE 54840
// exit ;
54838: GO 55180
// list := [ ] ;
54840: LD_ADDR_VAR 0 13
54844: PUSH
54845: EMPTY
54846: ST_TO_ADDR
// if x - r < 0 then
54847: LD_VAR 0 2
54851: PUSH
54852: LD_VAR 0 4
54856: MINUS
54857: PUSH
54858: LD_INT 0
54860: LESS
54861: IFFALSE 54873
// min_x := 0 else
54863: LD_ADDR_VAR 0 7
54867: PUSH
54868: LD_INT 0
54870: ST_TO_ADDR
54871: GO 54889
// min_x := x - r ;
54873: LD_ADDR_VAR 0 7
54877: PUSH
54878: LD_VAR 0 2
54882: PUSH
54883: LD_VAR 0 4
54887: MINUS
54888: ST_TO_ADDR
// if y - r < 0 then
54889: LD_VAR 0 3
54893: PUSH
54894: LD_VAR 0 4
54898: MINUS
54899: PUSH
54900: LD_INT 0
54902: LESS
54903: IFFALSE 54915
// min_y := 0 else
54905: LD_ADDR_VAR 0 8
54909: PUSH
54910: LD_INT 0
54912: ST_TO_ADDR
54913: GO 54931
// min_y := y - r ;
54915: LD_ADDR_VAR 0 8
54919: PUSH
54920: LD_VAR 0 3
54924: PUSH
54925: LD_VAR 0 4
54929: MINUS
54930: ST_TO_ADDR
// max_x := x + r ;
54931: LD_ADDR_VAR 0 9
54935: PUSH
54936: LD_VAR 0 2
54940: PUSH
54941: LD_VAR 0 4
54945: PLUS
54946: ST_TO_ADDR
// max_y := y + r ;
54947: LD_ADDR_VAR 0 10
54951: PUSH
54952: LD_VAR 0 3
54956: PUSH
54957: LD_VAR 0 4
54961: PLUS
54962: ST_TO_ADDR
// for _x = min_x to max_x do
54963: LD_ADDR_VAR 0 11
54967: PUSH
54968: DOUBLE
54969: LD_VAR 0 7
54973: DEC
54974: ST_TO_ADDR
54975: LD_VAR 0 9
54979: PUSH
54980: FOR_TO
54981: IFFALSE 55098
// for _y = min_y to max_y do
54983: LD_ADDR_VAR 0 12
54987: PUSH
54988: DOUBLE
54989: LD_VAR 0 8
54993: DEC
54994: ST_TO_ADDR
54995: LD_VAR 0 10
54999: PUSH
55000: FOR_TO
55001: IFFALSE 55094
// begin if not ValidHex ( _x , _y ) then
55003: LD_VAR 0 11
55007: PPUSH
55008: LD_VAR 0 12
55012: PPUSH
55013: CALL_OW 488
55017: NOT
55018: IFFALSE 55022
// continue ;
55020: GO 55000
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55022: LD_VAR 0 11
55026: PPUSH
55027: LD_VAR 0 12
55031: PPUSH
55032: CALL_OW 351
55036: PUSH
55037: LD_VAR 0 11
55041: PPUSH
55042: LD_VAR 0 12
55046: PPUSH
55047: CALL_OW 554
55051: AND
55052: IFFALSE 55092
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55054: LD_ADDR_VAR 0 13
55058: PUSH
55059: LD_VAR 0 13
55063: PPUSH
55064: LD_VAR 0 13
55068: PUSH
55069: LD_INT 1
55071: PLUS
55072: PPUSH
55073: LD_VAR 0 11
55077: PUSH
55078: LD_VAR 0 12
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PPUSH
55087: CALL_OW 2
55091: ST_TO_ADDR
// end ;
55092: GO 55000
55094: POP
55095: POP
55096: GO 54980
55098: POP
55099: POP
// if not list then
55100: LD_VAR 0 13
55104: NOT
55105: IFFALSE 55109
// exit ;
55107: GO 55180
// for i in list do
55109: LD_ADDR_VAR 0 6
55113: PUSH
55114: LD_VAR 0 13
55118: PUSH
55119: FOR_IN
55120: IFFALSE 55178
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55122: LD_VAR 0 1
55126: PPUSH
55127: LD_STRING M
55129: PUSH
55130: LD_VAR 0 6
55134: PUSH
55135: LD_INT 1
55137: ARRAY
55138: PUSH
55139: LD_VAR 0 6
55143: PUSH
55144: LD_INT 2
55146: ARRAY
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: PUSH
55169: EMPTY
55170: LIST
55171: PPUSH
55172: CALL_OW 447
55176: GO 55119
55178: POP
55179: POP
// end ;
55180: LD_VAR 0 5
55184: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55185: LD_INT 0
55187: PPUSH
55188: PPUSH
55189: PPUSH
55190: PPUSH
55191: PPUSH
55192: PPUSH
55193: PPUSH
55194: PPUSH
55195: PPUSH
55196: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55197: LD_VAR 0 1
55201: PPUSH
55202: CALL_OW 302
55206: NOT
55207: PUSH
55208: LD_VAR 0 2
55212: PPUSH
55213: LD_VAR 0 3
55217: PPUSH
55218: CALL_OW 488
55222: NOT
55223: OR
55224: PUSH
55225: LD_VAR 0 4
55229: NOT
55230: OR
55231: IFFALSE 55235
// exit ;
55233: GO 55748
// list := [ ] ;
55235: LD_ADDR_VAR 0 13
55239: PUSH
55240: EMPTY
55241: ST_TO_ADDR
// if x - r < 0 then
55242: LD_VAR 0 2
55246: PUSH
55247: LD_VAR 0 4
55251: MINUS
55252: PUSH
55253: LD_INT 0
55255: LESS
55256: IFFALSE 55268
// min_x := 0 else
55258: LD_ADDR_VAR 0 7
55262: PUSH
55263: LD_INT 0
55265: ST_TO_ADDR
55266: GO 55284
// min_x := x - r ;
55268: LD_ADDR_VAR 0 7
55272: PUSH
55273: LD_VAR 0 2
55277: PUSH
55278: LD_VAR 0 4
55282: MINUS
55283: ST_TO_ADDR
// if y - r < 0 then
55284: LD_VAR 0 3
55288: PUSH
55289: LD_VAR 0 4
55293: MINUS
55294: PUSH
55295: LD_INT 0
55297: LESS
55298: IFFALSE 55310
// min_y := 0 else
55300: LD_ADDR_VAR 0 8
55304: PUSH
55305: LD_INT 0
55307: ST_TO_ADDR
55308: GO 55326
// min_y := y - r ;
55310: LD_ADDR_VAR 0 8
55314: PUSH
55315: LD_VAR 0 3
55319: PUSH
55320: LD_VAR 0 4
55324: MINUS
55325: ST_TO_ADDR
// max_x := x + r ;
55326: LD_ADDR_VAR 0 9
55330: PUSH
55331: LD_VAR 0 2
55335: PUSH
55336: LD_VAR 0 4
55340: PLUS
55341: ST_TO_ADDR
// max_y := y + r ;
55342: LD_ADDR_VAR 0 10
55346: PUSH
55347: LD_VAR 0 3
55351: PUSH
55352: LD_VAR 0 4
55356: PLUS
55357: ST_TO_ADDR
// for _x = min_x to max_x do
55358: LD_ADDR_VAR 0 11
55362: PUSH
55363: DOUBLE
55364: LD_VAR 0 7
55368: DEC
55369: ST_TO_ADDR
55370: LD_VAR 0 9
55374: PUSH
55375: FOR_TO
55376: IFFALSE 55493
// for _y = min_y to max_y do
55378: LD_ADDR_VAR 0 12
55382: PUSH
55383: DOUBLE
55384: LD_VAR 0 8
55388: DEC
55389: ST_TO_ADDR
55390: LD_VAR 0 10
55394: PUSH
55395: FOR_TO
55396: IFFALSE 55489
// begin if not ValidHex ( _x , _y ) then
55398: LD_VAR 0 11
55402: PPUSH
55403: LD_VAR 0 12
55407: PPUSH
55408: CALL_OW 488
55412: NOT
55413: IFFALSE 55417
// continue ;
55415: GO 55395
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55417: LD_VAR 0 11
55421: PPUSH
55422: LD_VAR 0 12
55426: PPUSH
55427: CALL_OW 351
55431: PUSH
55432: LD_VAR 0 11
55436: PPUSH
55437: LD_VAR 0 12
55441: PPUSH
55442: CALL_OW 554
55446: AND
55447: IFFALSE 55487
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55449: LD_ADDR_VAR 0 13
55453: PUSH
55454: LD_VAR 0 13
55458: PPUSH
55459: LD_VAR 0 13
55463: PUSH
55464: LD_INT 1
55466: PLUS
55467: PPUSH
55468: LD_VAR 0 11
55472: PUSH
55473: LD_VAR 0 12
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PPUSH
55482: CALL_OW 2
55486: ST_TO_ADDR
// end ;
55487: GO 55395
55489: POP
55490: POP
55491: GO 55375
55493: POP
55494: POP
// if not list then
55495: LD_VAR 0 13
55499: NOT
55500: IFFALSE 55504
// exit ;
55502: GO 55748
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55504: LD_ADDR_VAR 0 13
55508: PUSH
55509: LD_VAR 0 1
55513: PPUSH
55514: LD_VAR 0 13
55518: PPUSH
55519: LD_INT 1
55521: PPUSH
55522: LD_INT 1
55524: PPUSH
55525: CALL 8231 0 4
55529: ST_TO_ADDR
// ComStop ( flame ) ;
55530: LD_VAR 0 1
55534: PPUSH
55535: CALL_OW 141
// for i in list do
55539: LD_ADDR_VAR 0 6
55543: PUSH
55544: LD_VAR 0 13
55548: PUSH
55549: FOR_IN
55550: IFFALSE 55581
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55552: LD_VAR 0 1
55556: PPUSH
55557: LD_VAR 0 6
55561: PUSH
55562: LD_INT 1
55564: ARRAY
55565: PPUSH
55566: LD_VAR 0 6
55570: PUSH
55571: LD_INT 2
55573: ARRAY
55574: PPUSH
55575: CALL_OW 176
55579: GO 55549
55581: POP
55582: POP
// repeat wait ( 0 0$1 ) ;
55583: LD_INT 35
55585: PPUSH
55586: CALL_OW 67
// task := GetTaskList ( flame ) ;
55590: LD_ADDR_VAR 0 14
55594: PUSH
55595: LD_VAR 0 1
55599: PPUSH
55600: CALL_OW 437
55604: ST_TO_ADDR
// if not task then
55605: LD_VAR 0 14
55609: NOT
55610: IFFALSE 55614
// exit ;
55612: GO 55748
// if task [ 1 ] [ 1 ] <> | then
55614: LD_VAR 0 14
55618: PUSH
55619: LD_INT 1
55621: ARRAY
55622: PUSH
55623: LD_INT 1
55625: ARRAY
55626: PUSH
55627: LD_STRING |
55629: NONEQUAL
55630: IFFALSE 55634
// exit ;
55632: GO 55748
// _x := task [ 1 ] [ 2 ] ;
55634: LD_ADDR_VAR 0 11
55638: PUSH
55639: LD_VAR 0 14
55643: PUSH
55644: LD_INT 1
55646: ARRAY
55647: PUSH
55648: LD_INT 2
55650: ARRAY
55651: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55652: LD_ADDR_VAR 0 12
55656: PUSH
55657: LD_VAR 0 14
55661: PUSH
55662: LD_INT 1
55664: ARRAY
55665: PUSH
55666: LD_INT 3
55668: ARRAY
55669: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55670: LD_VAR 0 11
55674: PPUSH
55675: LD_VAR 0 12
55679: PPUSH
55680: CALL_OW 351
55684: NOT
55685: PUSH
55686: LD_VAR 0 11
55690: PPUSH
55691: LD_VAR 0 12
55695: PPUSH
55696: CALL_OW 554
55700: NOT
55701: OR
55702: IFFALSE 55736
// begin task := Delete ( task , 1 ) ;
55704: LD_ADDR_VAR 0 14
55708: PUSH
55709: LD_VAR 0 14
55713: PPUSH
55714: LD_INT 1
55716: PPUSH
55717: CALL_OW 3
55721: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55722: LD_VAR 0 1
55726: PPUSH
55727: LD_VAR 0 14
55731: PPUSH
55732: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55736: LD_VAR 0 1
55740: PPUSH
55741: CALL_OW 314
55745: NOT
55746: IFFALSE 55583
// end ;
55748: LD_VAR 0 5
55752: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55753: LD_EXP 42
55757: NOT
55758: IFFALSE 55808
55760: GO 55762
55762: DISABLE
// begin initHack := true ;
55763: LD_ADDR_EXP 42
55767: PUSH
55768: LD_INT 1
55770: ST_TO_ADDR
// hackTanks := [ ] ;
55771: LD_ADDR_EXP 43
55775: PUSH
55776: EMPTY
55777: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55778: LD_ADDR_EXP 44
55782: PUSH
55783: EMPTY
55784: ST_TO_ADDR
// hackLimit := 3 ;
55785: LD_ADDR_EXP 45
55789: PUSH
55790: LD_INT 3
55792: ST_TO_ADDR
// hackDist := 12 ;
55793: LD_ADDR_EXP 46
55797: PUSH
55798: LD_INT 12
55800: ST_TO_ADDR
// hackCounter := [ ] ;
55801: LD_ADDR_EXP 47
55805: PUSH
55806: EMPTY
55807: ST_TO_ADDR
// end ;
55808: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55809: LD_EXP 42
55813: PUSH
55814: LD_INT 34
55816: PUSH
55817: LD_INT 99
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PPUSH
55824: CALL_OW 69
55828: AND
55829: IFFALSE 56082
55831: GO 55833
55833: DISABLE
55834: LD_INT 0
55836: PPUSH
55837: PPUSH
// begin enable ;
55838: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55839: LD_ADDR_VAR 0 1
55843: PUSH
55844: LD_INT 34
55846: PUSH
55847: LD_INT 99
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PPUSH
55854: CALL_OW 69
55858: PUSH
55859: FOR_IN
55860: IFFALSE 56080
// begin if not i in hackTanks then
55862: LD_VAR 0 1
55866: PUSH
55867: LD_EXP 43
55871: IN
55872: NOT
55873: IFFALSE 55956
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55875: LD_ADDR_EXP 43
55879: PUSH
55880: LD_EXP 43
55884: PPUSH
55885: LD_EXP 43
55889: PUSH
55890: LD_INT 1
55892: PLUS
55893: PPUSH
55894: LD_VAR 0 1
55898: PPUSH
55899: CALL_OW 1
55903: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55904: LD_ADDR_EXP 44
55908: PUSH
55909: LD_EXP 44
55913: PPUSH
55914: LD_EXP 44
55918: PUSH
55919: LD_INT 1
55921: PLUS
55922: PPUSH
55923: EMPTY
55924: PPUSH
55925: CALL_OW 1
55929: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
55930: LD_ADDR_EXP 47
55934: PUSH
55935: LD_EXP 47
55939: PPUSH
55940: LD_EXP 47
55944: PUSH
55945: LD_INT 1
55947: PLUS
55948: PPUSH
55949: EMPTY
55950: PPUSH
55951: CALL_OW 1
55955: ST_TO_ADDR
// end ; if not IsOk ( i ) then
55956: LD_VAR 0 1
55960: PPUSH
55961: CALL_OW 302
55965: NOT
55966: IFFALSE 55979
// begin HackUnlinkAll ( i ) ;
55968: LD_VAR 0 1
55972: PPUSH
55973: CALL 56085 0 1
// continue ;
55977: GO 55859
// end ; HackCheckCapturedStatus ( i ) ;
55979: LD_VAR 0 1
55983: PPUSH
55984: CALL 56528 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
55988: LD_ADDR_VAR 0 2
55992: PUSH
55993: LD_INT 81
55995: PUSH
55996: LD_VAR 0 1
56000: PPUSH
56001: CALL_OW 255
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 33
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 91
56022: PUSH
56023: LD_VAR 0 1
56027: PUSH
56028: LD_EXP 46
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 50
56040: PUSH
56041: EMPTY
56042: LIST
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: PPUSH
56050: CALL_OW 69
56054: ST_TO_ADDR
// if not tmp then
56055: LD_VAR 0 2
56059: NOT
56060: IFFALSE 56064
// continue ;
56062: GO 55859
// HackLink ( i , tmp ) ;
56064: LD_VAR 0 1
56068: PPUSH
56069: LD_VAR 0 2
56073: PPUSH
56074: CALL 56221 0 2
// end ;
56078: GO 55859
56080: POP
56081: POP
// end ;
56082: PPOPN 2
56084: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56085: LD_INT 0
56087: PPUSH
56088: PPUSH
56089: PPUSH
// if not hack in hackTanks then
56090: LD_VAR 0 1
56094: PUSH
56095: LD_EXP 43
56099: IN
56100: NOT
56101: IFFALSE 56105
// exit ;
56103: GO 56216
// index := GetElementIndex ( hackTanks , hack ) ;
56105: LD_ADDR_VAR 0 4
56109: PUSH
56110: LD_EXP 43
56114: PPUSH
56115: LD_VAR 0 1
56119: PPUSH
56120: CALL 7528 0 2
56124: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56125: LD_EXP 44
56129: PUSH
56130: LD_VAR 0 4
56134: ARRAY
56135: IFFALSE 56216
// begin for i in hackTanksCaptured [ index ] do
56137: LD_ADDR_VAR 0 3
56141: PUSH
56142: LD_EXP 44
56146: PUSH
56147: LD_VAR 0 4
56151: ARRAY
56152: PUSH
56153: FOR_IN
56154: IFFALSE 56180
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56156: LD_VAR 0 3
56160: PUSH
56161: LD_INT 1
56163: ARRAY
56164: PPUSH
56165: LD_VAR 0 3
56169: PUSH
56170: LD_INT 2
56172: ARRAY
56173: PPUSH
56174: CALL_OW 235
56178: GO 56153
56180: POP
56181: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56182: LD_ADDR_EXP 44
56186: PUSH
56187: LD_EXP 44
56191: PPUSH
56192: LD_VAR 0 4
56196: PPUSH
56197: EMPTY
56198: PPUSH
56199: CALL_OW 1
56203: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56204: LD_VAR 0 1
56208: PPUSH
56209: LD_INT 0
56211: PPUSH
56212: CALL_OW 505
// end ; end ;
56216: LD_VAR 0 2
56220: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56221: LD_INT 0
56223: PPUSH
56224: PPUSH
56225: PPUSH
// if not hack in hackTanks or not vehicles then
56226: LD_VAR 0 1
56230: PUSH
56231: LD_EXP 43
56235: IN
56236: NOT
56237: PUSH
56238: LD_VAR 0 2
56242: NOT
56243: OR
56244: IFFALSE 56248
// exit ;
56246: GO 56523
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56248: LD_ADDR_VAR 0 2
56252: PUSH
56253: LD_VAR 0 1
56257: PPUSH
56258: LD_VAR 0 2
56262: PPUSH
56263: LD_INT 1
56265: PPUSH
56266: LD_INT 1
56268: PPUSH
56269: CALL 8178 0 4
56273: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56274: LD_ADDR_VAR 0 5
56278: PUSH
56279: LD_EXP 43
56283: PPUSH
56284: LD_VAR 0 1
56288: PPUSH
56289: CALL 7528 0 2
56293: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56294: LD_EXP 44
56298: PUSH
56299: LD_VAR 0 5
56303: ARRAY
56304: PUSH
56305: LD_EXP 45
56309: LESS
56310: IFFALSE 56499
// begin for i := 1 to vehicles do
56312: LD_ADDR_VAR 0 4
56316: PUSH
56317: DOUBLE
56318: LD_INT 1
56320: DEC
56321: ST_TO_ADDR
56322: LD_VAR 0 2
56326: PUSH
56327: FOR_TO
56328: IFFALSE 56497
// begin if hackTanksCaptured [ index ] = hackLimit then
56330: LD_EXP 44
56334: PUSH
56335: LD_VAR 0 5
56339: ARRAY
56340: PUSH
56341: LD_EXP 45
56345: EQUAL
56346: IFFALSE 56350
// break ;
56348: GO 56497
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56350: LD_ADDR_EXP 47
56354: PUSH
56355: LD_EXP 47
56359: PPUSH
56360: LD_VAR 0 5
56364: PPUSH
56365: LD_EXP 47
56369: PUSH
56370: LD_VAR 0 5
56374: ARRAY
56375: PUSH
56376: LD_INT 1
56378: PLUS
56379: PPUSH
56380: CALL_OW 1
56384: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56385: LD_ADDR_EXP 44
56389: PUSH
56390: LD_EXP 44
56394: PPUSH
56395: LD_VAR 0 5
56399: PUSH
56400: LD_EXP 44
56404: PUSH
56405: LD_VAR 0 5
56409: ARRAY
56410: PUSH
56411: LD_INT 1
56413: PLUS
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PPUSH
56419: LD_VAR 0 2
56423: PUSH
56424: LD_VAR 0 4
56428: ARRAY
56429: PUSH
56430: LD_VAR 0 2
56434: PUSH
56435: LD_VAR 0 4
56439: ARRAY
56440: PPUSH
56441: CALL_OW 255
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PPUSH
56450: CALL 7743 0 3
56454: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56455: LD_VAR 0 2
56459: PUSH
56460: LD_VAR 0 4
56464: ARRAY
56465: PPUSH
56466: LD_VAR 0 1
56470: PPUSH
56471: CALL_OW 255
56475: PPUSH
56476: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56480: LD_VAR 0 2
56484: PUSH
56485: LD_VAR 0 4
56489: ARRAY
56490: PPUSH
56491: CALL_OW 141
// end ;
56495: GO 56327
56497: POP
56498: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56499: LD_VAR 0 1
56503: PPUSH
56504: LD_EXP 44
56508: PUSH
56509: LD_VAR 0 5
56513: ARRAY
56514: PUSH
56515: LD_INT 0
56517: PLUS
56518: PPUSH
56519: CALL_OW 505
// end ;
56523: LD_VAR 0 3
56527: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56528: LD_INT 0
56530: PPUSH
56531: PPUSH
56532: PPUSH
56533: PPUSH
// if not hack in hackTanks then
56534: LD_VAR 0 1
56538: PUSH
56539: LD_EXP 43
56543: IN
56544: NOT
56545: IFFALSE 56549
// exit ;
56547: GO 56789
// index := GetElementIndex ( hackTanks , hack ) ;
56549: LD_ADDR_VAR 0 4
56553: PUSH
56554: LD_EXP 43
56558: PPUSH
56559: LD_VAR 0 1
56563: PPUSH
56564: CALL 7528 0 2
56568: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56569: LD_ADDR_VAR 0 3
56573: PUSH
56574: DOUBLE
56575: LD_EXP 44
56579: PUSH
56580: LD_VAR 0 4
56584: ARRAY
56585: INC
56586: ST_TO_ADDR
56587: LD_INT 1
56589: PUSH
56590: FOR_DOWNTO
56591: IFFALSE 56763
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56593: LD_ADDR_VAR 0 5
56597: PUSH
56598: LD_EXP 44
56602: PUSH
56603: LD_VAR 0 4
56607: ARRAY
56608: PUSH
56609: LD_VAR 0 3
56613: ARRAY
56614: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56615: LD_VAR 0 5
56619: PUSH
56620: LD_INT 1
56622: ARRAY
56623: PPUSH
56624: CALL_OW 302
56628: NOT
56629: PUSH
56630: LD_VAR 0 5
56634: PUSH
56635: LD_INT 1
56637: ARRAY
56638: PPUSH
56639: CALL_OW 255
56643: PUSH
56644: LD_VAR 0 1
56648: PPUSH
56649: CALL_OW 255
56653: NONEQUAL
56654: OR
56655: IFFALSE 56761
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56657: LD_VAR 0 5
56661: PUSH
56662: LD_INT 1
56664: ARRAY
56665: PPUSH
56666: CALL_OW 305
56670: PUSH
56671: LD_VAR 0 5
56675: PUSH
56676: LD_INT 1
56678: ARRAY
56679: PPUSH
56680: CALL_OW 255
56684: PUSH
56685: LD_VAR 0 1
56689: PPUSH
56690: CALL_OW 255
56694: EQUAL
56695: AND
56696: IFFALSE 56720
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56698: LD_VAR 0 5
56702: PUSH
56703: LD_INT 1
56705: ARRAY
56706: PPUSH
56707: LD_VAR 0 5
56711: PUSH
56712: LD_INT 2
56714: ARRAY
56715: PPUSH
56716: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56720: LD_ADDR_EXP 44
56724: PUSH
56725: LD_EXP 44
56729: PPUSH
56730: LD_VAR 0 4
56734: PPUSH
56735: LD_EXP 44
56739: PUSH
56740: LD_VAR 0 4
56744: ARRAY
56745: PPUSH
56746: LD_VAR 0 3
56750: PPUSH
56751: CALL_OW 3
56755: PPUSH
56756: CALL_OW 1
56760: ST_TO_ADDR
// end ; end ;
56761: GO 56590
56763: POP
56764: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56765: LD_VAR 0 1
56769: PPUSH
56770: LD_EXP 44
56774: PUSH
56775: LD_VAR 0 4
56779: ARRAY
56780: PUSH
56781: LD_INT 0
56783: PLUS
56784: PPUSH
56785: CALL_OW 505
// end ;
56789: LD_VAR 0 2
56793: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56794: LD_INT 0
56796: PPUSH
56797: PPUSH
56798: PPUSH
56799: PPUSH
// if not hack in hackTanks then
56800: LD_VAR 0 1
56804: PUSH
56805: LD_EXP 43
56809: IN
56810: NOT
56811: IFFALSE 56815
// exit ;
56813: GO 56900
// index := GetElementIndex ( hackTanks , hack ) ;
56815: LD_ADDR_VAR 0 5
56819: PUSH
56820: LD_EXP 43
56824: PPUSH
56825: LD_VAR 0 1
56829: PPUSH
56830: CALL 7528 0 2
56834: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56835: LD_ADDR_VAR 0 4
56839: PUSH
56840: DOUBLE
56841: LD_INT 1
56843: DEC
56844: ST_TO_ADDR
56845: LD_EXP 44
56849: PUSH
56850: LD_VAR 0 5
56854: ARRAY
56855: PUSH
56856: FOR_TO
56857: IFFALSE 56898
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56859: LD_EXP 44
56863: PUSH
56864: LD_VAR 0 5
56868: ARRAY
56869: PUSH
56870: LD_VAR 0 4
56874: ARRAY
56875: PUSH
56876: LD_INT 1
56878: ARRAY
56879: PUSH
56880: LD_VAR 0 2
56884: EQUAL
56885: IFFALSE 56896
// KillUnit ( vehicle ) ;
56887: LD_VAR 0 2
56891: PPUSH
56892: CALL_OW 66
56896: GO 56856
56898: POP
56899: POP
// end ;
56900: LD_VAR 0 3
56904: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56905: LD_EXP 48
56909: NOT
56910: IFFALSE 56945
56912: GO 56914
56914: DISABLE
// begin initMiner := true ;
56915: LD_ADDR_EXP 48
56919: PUSH
56920: LD_INT 1
56922: ST_TO_ADDR
// minersList := [ ] ;
56923: LD_ADDR_EXP 49
56927: PUSH
56928: EMPTY
56929: ST_TO_ADDR
// minerMinesList := [ ] ;
56930: LD_ADDR_EXP 50
56934: PUSH
56935: EMPTY
56936: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
56937: LD_ADDR_EXP 51
56941: PUSH
56942: LD_INT 5
56944: ST_TO_ADDR
// end ;
56945: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
56946: LD_EXP 48
56950: PUSH
56951: LD_INT 34
56953: PUSH
56954: LD_INT 81
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PPUSH
56961: CALL_OW 69
56965: AND
56966: IFFALSE 57427
56968: GO 56970
56970: DISABLE
56971: LD_INT 0
56973: PPUSH
56974: PPUSH
56975: PPUSH
56976: PPUSH
// begin enable ;
56977: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
56978: LD_ADDR_VAR 0 1
56982: PUSH
56983: LD_INT 34
56985: PUSH
56986: LD_INT 81
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PPUSH
56993: CALL_OW 69
56997: PUSH
56998: FOR_IN
56999: IFFALSE 57071
// begin if not i in minersList then
57001: LD_VAR 0 1
57005: PUSH
57006: LD_EXP 49
57010: IN
57011: NOT
57012: IFFALSE 57069
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57014: LD_ADDR_EXP 49
57018: PUSH
57019: LD_EXP 49
57023: PPUSH
57024: LD_EXP 49
57028: PUSH
57029: LD_INT 1
57031: PLUS
57032: PPUSH
57033: LD_VAR 0 1
57037: PPUSH
57038: CALL_OW 1
57042: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57043: LD_ADDR_EXP 50
57047: PUSH
57048: LD_EXP 50
57052: PPUSH
57053: LD_EXP 50
57057: PUSH
57058: LD_INT 1
57060: PLUS
57061: PPUSH
57062: EMPTY
57063: PPUSH
57064: CALL_OW 1
57068: ST_TO_ADDR
// end end ;
57069: GO 56998
57071: POP
57072: POP
// for i := minerMinesList downto 1 do
57073: LD_ADDR_VAR 0 1
57077: PUSH
57078: DOUBLE
57079: LD_EXP 50
57083: INC
57084: ST_TO_ADDR
57085: LD_INT 1
57087: PUSH
57088: FOR_DOWNTO
57089: IFFALSE 57425
// begin if IsLive ( minersList [ i ] ) then
57091: LD_EXP 49
57095: PUSH
57096: LD_VAR 0 1
57100: ARRAY
57101: PPUSH
57102: CALL_OW 300
57106: IFFALSE 57134
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57108: LD_EXP 49
57112: PUSH
57113: LD_VAR 0 1
57117: ARRAY
57118: PPUSH
57119: LD_EXP 50
57123: PUSH
57124: LD_VAR 0 1
57128: ARRAY
57129: PPUSH
57130: CALL_OW 505
// if not minerMinesList [ i ] then
57134: LD_EXP 50
57138: PUSH
57139: LD_VAR 0 1
57143: ARRAY
57144: NOT
57145: IFFALSE 57149
// continue ;
57147: GO 57088
// for j := minerMinesList [ i ] downto 1 do
57149: LD_ADDR_VAR 0 2
57153: PUSH
57154: DOUBLE
57155: LD_EXP 50
57159: PUSH
57160: LD_VAR 0 1
57164: ARRAY
57165: INC
57166: ST_TO_ADDR
57167: LD_INT 1
57169: PUSH
57170: FOR_DOWNTO
57171: IFFALSE 57421
// begin side := GetSide ( minersList [ i ] ) ;
57173: LD_ADDR_VAR 0 3
57177: PUSH
57178: LD_EXP 49
57182: PUSH
57183: LD_VAR 0 1
57187: ARRAY
57188: PPUSH
57189: CALL_OW 255
57193: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57194: LD_ADDR_VAR 0 4
57198: PUSH
57199: LD_EXP 50
57203: PUSH
57204: LD_VAR 0 1
57208: ARRAY
57209: PUSH
57210: LD_VAR 0 2
57214: ARRAY
57215: PUSH
57216: LD_INT 1
57218: ARRAY
57219: PPUSH
57220: LD_EXP 50
57224: PUSH
57225: LD_VAR 0 1
57229: ARRAY
57230: PUSH
57231: LD_VAR 0 2
57235: ARRAY
57236: PUSH
57237: LD_INT 2
57239: ARRAY
57240: PPUSH
57241: CALL_OW 428
57245: ST_TO_ADDR
// if not tmp then
57246: LD_VAR 0 4
57250: NOT
57251: IFFALSE 57255
// continue ;
57253: GO 57170
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57255: LD_VAR 0 4
57259: PUSH
57260: LD_INT 81
57262: PUSH
57263: LD_VAR 0 3
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PPUSH
57272: CALL_OW 69
57276: IN
57277: PUSH
57278: LD_EXP 50
57282: PUSH
57283: LD_VAR 0 1
57287: ARRAY
57288: PUSH
57289: LD_VAR 0 2
57293: ARRAY
57294: PUSH
57295: LD_INT 1
57297: ARRAY
57298: PPUSH
57299: LD_EXP 50
57303: PUSH
57304: LD_VAR 0 1
57308: ARRAY
57309: PUSH
57310: LD_VAR 0 2
57314: ARRAY
57315: PUSH
57316: LD_INT 2
57318: ARRAY
57319: PPUSH
57320: CALL_OW 458
57324: AND
57325: IFFALSE 57419
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57327: LD_EXP 50
57331: PUSH
57332: LD_VAR 0 1
57336: ARRAY
57337: PUSH
57338: LD_VAR 0 2
57342: ARRAY
57343: PUSH
57344: LD_INT 1
57346: ARRAY
57347: PPUSH
57348: LD_EXP 50
57352: PUSH
57353: LD_VAR 0 1
57357: ARRAY
57358: PUSH
57359: LD_VAR 0 2
57363: ARRAY
57364: PUSH
57365: LD_INT 2
57367: ARRAY
57368: PPUSH
57369: LD_VAR 0 3
57373: PPUSH
57374: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57378: LD_ADDR_EXP 50
57382: PUSH
57383: LD_EXP 50
57387: PPUSH
57388: LD_VAR 0 1
57392: PPUSH
57393: LD_EXP 50
57397: PUSH
57398: LD_VAR 0 1
57402: ARRAY
57403: PPUSH
57404: LD_VAR 0 2
57408: PPUSH
57409: CALL_OW 3
57413: PPUSH
57414: CALL_OW 1
57418: ST_TO_ADDR
// end ; end ;
57419: GO 57170
57421: POP
57422: POP
// end ;
57423: GO 57088
57425: POP
57426: POP
// end ;
57427: PPOPN 4
57429: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57430: LD_INT 0
57432: PPUSH
57433: PPUSH
// result := false ;
57434: LD_ADDR_VAR 0 4
57438: PUSH
57439: LD_INT 0
57441: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57442: LD_VAR 0 1
57446: PPUSH
57447: CALL_OW 264
57451: PUSH
57452: LD_INT 81
57454: EQUAL
57455: NOT
57456: IFFALSE 57460
// exit ;
57458: GO 57700
// index := GetElementIndex ( minersList , unit ) ;
57460: LD_ADDR_VAR 0 5
57464: PUSH
57465: LD_EXP 49
57469: PPUSH
57470: LD_VAR 0 1
57474: PPUSH
57475: CALL 7528 0 2
57479: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57480: LD_EXP 50
57484: PUSH
57485: LD_VAR 0 5
57489: ARRAY
57490: PUSH
57491: LD_EXP 51
57495: GREATEREQUAL
57496: IFFALSE 57500
// exit ;
57498: GO 57700
// ComMoveXY ( unit , x , y ) ;
57500: LD_VAR 0 1
57504: PPUSH
57505: LD_VAR 0 2
57509: PPUSH
57510: LD_VAR 0 3
57514: PPUSH
57515: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57519: LD_INT 35
57521: PPUSH
57522: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57526: LD_VAR 0 1
57530: PPUSH
57531: LD_VAR 0 2
57535: PPUSH
57536: LD_VAR 0 3
57540: PPUSH
57541: CALL 39289 0 3
57545: NOT
57546: PUSH
57547: LD_VAR 0 1
57551: PPUSH
57552: CALL_OW 314
57556: AND
57557: IFFALSE 57561
// exit ;
57559: GO 57700
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57561: LD_VAR 0 2
57565: PPUSH
57566: LD_VAR 0 3
57570: PPUSH
57571: CALL_OW 428
57575: PUSH
57576: LD_VAR 0 1
57580: EQUAL
57581: PUSH
57582: LD_VAR 0 1
57586: PPUSH
57587: CALL_OW 314
57591: NOT
57592: AND
57593: IFFALSE 57519
// PlaySoundXY ( x , y , PlantMine ) ;
57595: LD_VAR 0 2
57599: PPUSH
57600: LD_VAR 0 3
57604: PPUSH
57605: LD_STRING PlantMine
57607: PPUSH
57608: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57612: LD_VAR 0 2
57616: PPUSH
57617: LD_VAR 0 3
57621: PPUSH
57622: LD_VAR 0 1
57626: PPUSH
57627: CALL_OW 255
57631: PPUSH
57632: LD_INT 0
57634: PPUSH
57635: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57639: LD_ADDR_EXP 50
57643: PUSH
57644: LD_EXP 50
57648: PPUSH
57649: LD_VAR 0 5
57653: PUSH
57654: LD_EXP 50
57658: PUSH
57659: LD_VAR 0 5
57663: ARRAY
57664: PUSH
57665: LD_INT 1
57667: PLUS
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PPUSH
57673: LD_VAR 0 2
57677: PUSH
57678: LD_VAR 0 3
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PPUSH
57687: CALL 7743 0 3
57691: ST_TO_ADDR
// result := true ;
57692: LD_ADDR_VAR 0 4
57696: PUSH
57697: LD_INT 1
57699: ST_TO_ADDR
// end ;
57700: LD_VAR 0 4
57704: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57705: LD_INT 0
57707: PPUSH
57708: PPUSH
57709: PPUSH
// if not unit in minersList then
57710: LD_VAR 0 1
57714: PUSH
57715: LD_EXP 49
57719: IN
57720: NOT
57721: IFFALSE 57725
// exit ;
57723: GO 58117
// index := GetElementIndex ( minersList , unit ) ;
57725: LD_ADDR_VAR 0 6
57729: PUSH
57730: LD_EXP 49
57734: PPUSH
57735: LD_VAR 0 1
57739: PPUSH
57740: CALL 7528 0 2
57744: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57745: LD_ADDR_VAR 0 5
57749: PUSH
57750: DOUBLE
57751: LD_EXP 50
57755: PUSH
57756: LD_VAR 0 6
57760: ARRAY
57761: INC
57762: ST_TO_ADDR
57763: LD_INT 1
57765: PUSH
57766: FOR_DOWNTO
57767: IFFALSE 57928
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57769: LD_EXP 50
57773: PUSH
57774: LD_VAR 0 6
57778: ARRAY
57779: PUSH
57780: LD_VAR 0 5
57784: ARRAY
57785: PUSH
57786: LD_INT 1
57788: ARRAY
57789: PUSH
57790: LD_VAR 0 2
57794: EQUAL
57795: PUSH
57796: LD_EXP 50
57800: PUSH
57801: LD_VAR 0 6
57805: ARRAY
57806: PUSH
57807: LD_VAR 0 5
57811: ARRAY
57812: PUSH
57813: LD_INT 2
57815: ARRAY
57816: PUSH
57817: LD_VAR 0 3
57821: EQUAL
57822: AND
57823: IFFALSE 57926
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57825: LD_EXP 50
57829: PUSH
57830: LD_VAR 0 6
57834: ARRAY
57835: PUSH
57836: LD_VAR 0 5
57840: ARRAY
57841: PUSH
57842: LD_INT 1
57844: ARRAY
57845: PPUSH
57846: LD_EXP 50
57850: PUSH
57851: LD_VAR 0 6
57855: ARRAY
57856: PUSH
57857: LD_VAR 0 5
57861: ARRAY
57862: PUSH
57863: LD_INT 2
57865: ARRAY
57866: PPUSH
57867: LD_VAR 0 1
57871: PPUSH
57872: CALL_OW 255
57876: PPUSH
57877: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57881: LD_ADDR_EXP 50
57885: PUSH
57886: LD_EXP 50
57890: PPUSH
57891: LD_VAR 0 6
57895: PPUSH
57896: LD_EXP 50
57900: PUSH
57901: LD_VAR 0 6
57905: ARRAY
57906: PPUSH
57907: LD_VAR 0 5
57911: PPUSH
57912: CALL_OW 3
57916: PPUSH
57917: CALL_OW 1
57921: ST_TO_ADDR
// exit ;
57922: POP
57923: POP
57924: GO 58117
// end ; end ;
57926: GO 57766
57928: POP
57929: POP
// for i := minerMinesList [ index ] downto 1 do
57930: LD_ADDR_VAR 0 5
57934: PUSH
57935: DOUBLE
57936: LD_EXP 50
57940: PUSH
57941: LD_VAR 0 6
57945: ARRAY
57946: INC
57947: ST_TO_ADDR
57948: LD_INT 1
57950: PUSH
57951: FOR_DOWNTO
57952: IFFALSE 58115
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
57954: LD_EXP 50
57958: PUSH
57959: LD_VAR 0 6
57963: ARRAY
57964: PUSH
57965: LD_VAR 0 5
57969: ARRAY
57970: PUSH
57971: LD_INT 1
57973: ARRAY
57974: PPUSH
57975: LD_EXP 50
57979: PUSH
57980: LD_VAR 0 6
57984: ARRAY
57985: PUSH
57986: LD_VAR 0 5
57990: ARRAY
57991: PUSH
57992: LD_INT 2
57994: ARRAY
57995: PPUSH
57996: LD_VAR 0 2
58000: PPUSH
58001: LD_VAR 0 3
58005: PPUSH
58006: CALL_OW 298
58010: PUSH
58011: LD_INT 6
58013: LESS
58014: IFFALSE 58113
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58016: LD_EXP 50
58020: PUSH
58021: LD_VAR 0 6
58025: ARRAY
58026: PUSH
58027: LD_VAR 0 5
58031: ARRAY
58032: PUSH
58033: LD_INT 1
58035: ARRAY
58036: PPUSH
58037: LD_EXP 50
58041: PUSH
58042: LD_VAR 0 6
58046: ARRAY
58047: PUSH
58048: LD_VAR 0 5
58052: ARRAY
58053: PUSH
58054: LD_INT 2
58056: ARRAY
58057: PPUSH
58058: LD_VAR 0 1
58062: PPUSH
58063: CALL_OW 255
58067: PPUSH
58068: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58072: LD_ADDR_EXP 50
58076: PUSH
58077: LD_EXP 50
58081: PPUSH
58082: LD_VAR 0 6
58086: PPUSH
58087: LD_EXP 50
58091: PUSH
58092: LD_VAR 0 6
58096: ARRAY
58097: PPUSH
58098: LD_VAR 0 5
58102: PPUSH
58103: CALL_OW 3
58107: PPUSH
58108: CALL_OW 1
58112: ST_TO_ADDR
// end ; end ;
58113: GO 57951
58115: POP
58116: POP
// end ;
58117: LD_VAR 0 4
58121: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58122: LD_INT 0
58124: PPUSH
58125: PPUSH
58126: PPUSH
58127: PPUSH
58128: PPUSH
58129: PPUSH
58130: PPUSH
58131: PPUSH
58132: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58133: LD_VAR 0 1
58137: PPUSH
58138: CALL_OW 264
58142: PUSH
58143: LD_INT 81
58145: EQUAL
58146: NOT
58147: PUSH
58148: LD_VAR 0 1
58152: PUSH
58153: LD_EXP 49
58157: IN
58158: NOT
58159: OR
58160: IFFALSE 58164
// exit ;
58162: GO 58486
// index := GetElementIndex ( minersList , unit ) ;
58164: LD_ADDR_VAR 0 6
58168: PUSH
58169: LD_EXP 49
58173: PPUSH
58174: LD_VAR 0 1
58178: PPUSH
58179: CALL 7528 0 2
58183: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58184: LD_ADDR_VAR 0 8
58188: PUSH
58189: LD_EXP 51
58193: PUSH
58194: LD_EXP 50
58198: PUSH
58199: LD_VAR 0 6
58203: ARRAY
58204: MINUS
58205: ST_TO_ADDR
// if not minesFreeAmount then
58206: LD_VAR 0 8
58210: NOT
58211: IFFALSE 58215
// exit ;
58213: GO 58486
// tmp := [ ] ;
58215: LD_ADDR_VAR 0 7
58219: PUSH
58220: EMPTY
58221: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58222: LD_ADDR_VAR 0 5
58226: PUSH
58227: DOUBLE
58228: LD_INT 1
58230: DEC
58231: ST_TO_ADDR
58232: LD_VAR 0 8
58236: PUSH
58237: FOR_TO
58238: IFFALSE 58433
// begin _d := rand ( 0 , 5 ) ;
58240: LD_ADDR_VAR 0 11
58244: PUSH
58245: LD_INT 0
58247: PPUSH
58248: LD_INT 5
58250: PPUSH
58251: CALL_OW 12
58255: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58256: LD_ADDR_VAR 0 12
58260: PUSH
58261: LD_INT 2
58263: PPUSH
58264: LD_INT 6
58266: PPUSH
58267: CALL_OW 12
58271: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58272: LD_ADDR_VAR 0 9
58276: PUSH
58277: LD_VAR 0 2
58281: PPUSH
58282: LD_VAR 0 11
58286: PPUSH
58287: LD_VAR 0 12
58291: PPUSH
58292: CALL_OW 272
58296: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58297: LD_ADDR_VAR 0 10
58301: PUSH
58302: LD_VAR 0 3
58306: PPUSH
58307: LD_VAR 0 11
58311: PPUSH
58312: LD_VAR 0 12
58316: PPUSH
58317: CALL_OW 273
58321: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58322: LD_VAR 0 9
58326: PPUSH
58327: LD_VAR 0 10
58331: PPUSH
58332: CALL_OW 488
58336: PUSH
58337: LD_VAR 0 9
58341: PUSH
58342: LD_VAR 0 10
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_VAR 0 7
58355: IN
58356: NOT
58357: AND
58358: PUSH
58359: LD_VAR 0 9
58363: PPUSH
58364: LD_VAR 0 10
58368: PPUSH
58369: CALL_OW 458
58373: NOT
58374: AND
58375: IFFALSE 58417
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58377: LD_ADDR_VAR 0 7
58381: PUSH
58382: LD_VAR 0 7
58386: PPUSH
58387: LD_VAR 0 7
58391: PUSH
58392: LD_INT 1
58394: PLUS
58395: PPUSH
58396: LD_VAR 0 9
58400: PUSH
58401: LD_VAR 0 10
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PPUSH
58410: CALL_OW 1
58414: ST_TO_ADDR
58415: GO 58431
// i := i - 1 ;
58417: LD_ADDR_VAR 0 5
58421: PUSH
58422: LD_VAR 0 5
58426: PUSH
58427: LD_INT 1
58429: MINUS
58430: ST_TO_ADDR
// end ;
58431: GO 58237
58433: POP
58434: POP
// for i in tmp do
58435: LD_ADDR_VAR 0 5
58439: PUSH
58440: LD_VAR 0 7
58444: PUSH
58445: FOR_IN
58446: IFFALSE 58484
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58448: LD_VAR 0 1
58452: PPUSH
58453: LD_VAR 0 5
58457: PUSH
58458: LD_INT 1
58460: ARRAY
58461: PPUSH
58462: LD_VAR 0 5
58466: PUSH
58467: LD_INT 2
58469: ARRAY
58470: PPUSH
58471: CALL 57430 0 3
58475: NOT
58476: IFFALSE 58482
// exit ;
58478: POP
58479: POP
58480: GO 58486
58482: GO 58445
58484: POP
58485: POP
// end ;
58486: LD_VAR 0 4
58490: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58491: LD_INT 0
58493: PPUSH
58494: PPUSH
58495: PPUSH
58496: PPUSH
58497: PPUSH
58498: PPUSH
58499: PPUSH
58500: PPUSH
58501: PPUSH
// if GetClass ( unit ) <> class_sniper then
58502: LD_VAR 0 1
58506: PPUSH
58507: CALL_OW 257
58511: PUSH
58512: LD_INT 5
58514: NONEQUAL
58515: IFFALSE 58519
// exit ;
58517: GO 58985
// dist := 8 ;
58519: LD_ADDR_VAR 0 5
58523: PUSH
58524: LD_INT 8
58526: ST_TO_ADDR
// viewRange := 12 ;
58527: LD_ADDR_VAR 0 8
58531: PUSH
58532: LD_INT 12
58534: ST_TO_ADDR
// side := GetSide ( unit ) ;
58535: LD_ADDR_VAR 0 6
58539: PUSH
58540: LD_VAR 0 1
58544: PPUSH
58545: CALL_OW 255
58549: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58550: LD_INT 61
58552: PPUSH
58553: LD_VAR 0 6
58557: PPUSH
58558: CALL_OW 321
58562: PUSH
58563: LD_INT 2
58565: EQUAL
58566: IFFALSE 58576
// viewRange := 16 ;
58568: LD_ADDR_VAR 0 8
58572: PUSH
58573: LD_INT 16
58575: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58576: LD_VAR 0 1
58580: PPUSH
58581: LD_VAR 0 2
58585: PPUSH
58586: LD_VAR 0 3
58590: PPUSH
58591: CALL_OW 297
58595: PUSH
58596: LD_VAR 0 5
58600: GREATER
58601: IFFALSE 58680
// begin ComMoveXY ( unit , x , y ) ;
58603: LD_VAR 0 1
58607: PPUSH
58608: LD_VAR 0 2
58612: PPUSH
58613: LD_VAR 0 3
58617: PPUSH
58618: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58622: LD_INT 35
58624: PPUSH
58625: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58629: LD_VAR 0 1
58633: PPUSH
58634: LD_VAR 0 2
58638: PPUSH
58639: LD_VAR 0 3
58643: PPUSH
58644: CALL 39289 0 3
58648: NOT
58649: IFFALSE 58653
// exit ;
58651: GO 58985
// until GetDistUnitXY ( unit , x , y ) < dist ;
58653: LD_VAR 0 1
58657: PPUSH
58658: LD_VAR 0 2
58662: PPUSH
58663: LD_VAR 0 3
58667: PPUSH
58668: CALL_OW 297
58672: PUSH
58673: LD_VAR 0 5
58677: LESS
58678: IFFALSE 58622
// end ; ComTurnXY ( unit , x , y ) ;
58680: LD_VAR 0 1
58684: PPUSH
58685: LD_VAR 0 2
58689: PPUSH
58690: LD_VAR 0 3
58694: PPUSH
58695: CALL_OW 118
// repeat if Multiplayer then
58699: LD_OWVAR 4
58703: IFFALSE 58714
// wait ( 35 ) else
58705: LD_INT 35
58707: PPUSH
58708: CALL_OW 67
58712: GO 58721
// wait ( 5 ) ;
58714: LD_INT 5
58716: PPUSH
58717: CALL_OW 67
// _d := GetDir ( unit ) ;
58721: LD_ADDR_VAR 0 11
58725: PUSH
58726: LD_VAR 0 1
58730: PPUSH
58731: CALL_OW 254
58735: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58736: LD_ADDR_VAR 0 7
58740: PUSH
58741: LD_VAR 0 1
58745: PPUSH
58746: CALL_OW 250
58750: PPUSH
58751: LD_VAR 0 1
58755: PPUSH
58756: CALL_OW 251
58760: PPUSH
58761: LD_VAR 0 2
58765: PPUSH
58766: LD_VAR 0 3
58770: PPUSH
58771: CALL 41897 0 4
58775: ST_TO_ADDR
// until dir = _d ;
58776: LD_VAR 0 7
58780: PUSH
58781: LD_VAR 0 11
58785: EQUAL
58786: IFFALSE 58699
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58788: LD_ADDR_VAR 0 9
58792: PUSH
58793: LD_VAR 0 1
58797: PPUSH
58798: CALL_OW 250
58802: PPUSH
58803: LD_VAR 0 7
58807: PPUSH
58808: LD_VAR 0 5
58812: PPUSH
58813: CALL_OW 272
58817: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58818: LD_ADDR_VAR 0 10
58822: PUSH
58823: LD_VAR 0 1
58827: PPUSH
58828: CALL_OW 251
58832: PPUSH
58833: LD_VAR 0 7
58837: PPUSH
58838: LD_VAR 0 5
58842: PPUSH
58843: CALL_OW 273
58847: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58848: LD_VAR 0 9
58852: PPUSH
58853: LD_VAR 0 10
58857: PPUSH
58858: CALL_OW 488
58862: NOT
58863: IFFALSE 58867
// exit ;
58865: GO 58985
// ComAnimCustom ( unit , 1 ) ;
58867: LD_VAR 0 1
58871: PPUSH
58872: LD_INT 1
58874: PPUSH
58875: CALL_OW 592
// p := 0 ;
58879: LD_ADDR_VAR 0 12
58883: PUSH
58884: LD_INT 0
58886: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58887: LD_VAR 0 9
58891: PPUSH
58892: LD_VAR 0 10
58896: PPUSH
58897: LD_VAR 0 6
58901: PPUSH
58902: LD_VAR 0 8
58906: PPUSH
58907: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
58911: LD_INT 35
58913: PPUSH
58914: CALL_OW 67
// p := Inc ( p ) ;
58918: LD_ADDR_VAR 0 12
58922: PUSH
58923: LD_VAR 0 12
58927: PPUSH
58928: CALL 41853 0 1
58932: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
58933: LD_VAR 0 12
58937: PUSH
58938: LD_INT 3
58940: EQUAL
58941: PUSH
58942: LD_VAR 0 1
58946: PPUSH
58947: CALL_OW 302
58951: NOT
58952: OR
58953: PUSH
58954: LD_VAR 0 1
58958: PPUSH
58959: CALL_OW 301
58963: OR
58964: IFFALSE 58911
// RemoveSeeing ( _x , _y , side ) ;
58966: LD_VAR 0 9
58970: PPUSH
58971: LD_VAR 0 10
58975: PPUSH
58976: LD_VAR 0 6
58980: PPUSH
58981: CALL_OW 331
// end ; end_of_file
58985: LD_VAR 0 4
58989: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
58990: PPOPN 6
58992: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
58993: CALL 59022 0 0
// end ; end_of_file
58997: PPOPN 1
58999: END
// every 0 0$1 do
59000: GO 59002
59002: DISABLE
// begin enable ;
59003: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59004: LD_STRING updateTimer(
59006: PUSH
59007: LD_OWVAR 1
59011: STR
59012: PUSH
59013: LD_STRING );
59015: STR
59016: PPUSH
59017: CALL_OW 559
// end ;
59021: END
// export function SOS_MapStart ( ) ; begin
59022: LD_INT 0
59024: PPUSH
// UpdateFactoryWaypoints ( ) ;
59025: CALL 59394 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59029: CALL 59646 0 0
// end ;
59033: LD_VAR 0 1
59037: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59038: LD_INT 0
59040: PPUSH
// end ;
59041: LD_VAR 0 12
59045: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59046: LD_INT 0
59048: PPUSH
59049: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59050: LD_VAR 0 1
59054: NOT
59055: PUSH
59056: LD_VAR 0 2
59060: PPUSH
59061: LD_VAR 0 3
59065: PPUSH
59066: CALL_OW 488
59070: NOT
59071: OR
59072: PUSH
59073: LD_VAR 0 1
59077: PPUSH
59078: CALL_OW 266
59082: PUSH
59083: LD_INT 3
59085: NONEQUAL
59086: PUSH
59087: LD_VAR 0 1
59091: PPUSH
59092: CALL_OW 247
59096: PUSH
59097: LD_INT 1
59099: EQUAL
59100: NOT
59101: AND
59102: OR
59103: IFFALSE 59107
// exit ;
59105: GO 59389
// if GetType ( factory ) = unit_human then
59107: LD_VAR 0 1
59111: PPUSH
59112: CALL_OW 247
59116: PUSH
59117: LD_INT 1
59119: EQUAL
59120: IFFALSE 59137
// factory := IsInUnit ( factory ) ;
59122: LD_ADDR_VAR 0 1
59126: PUSH
59127: LD_VAR 0 1
59131: PPUSH
59132: CALL_OW 310
59136: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59137: LD_VAR 0 1
59141: PPUSH
59142: CALL_OW 266
59146: PUSH
59147: LD_INT 3
59149: NONEQUAL
59150: IFFALSE 59154
// exit ;
59152: GO 59389
// for i := 1 to Count ( factoryWaypoints ) do
59154: LD_ADDR_VAR 0 5
59158: PUSH
59159: DOUBLE
59160: LD_INT 1
59162: DEC
59163: ST_TO_ADDR
59164: LD_EXP 52
59168: PPUSH
59169: CALL 4883 0 1
59173: PUSH
59174: FOR_TO
59175: IFFALSE 59337
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59177: LD_VAR 0 2
59181: PPUSH
59182: LD_VAR 0 3
59186: PPUSH
59187: CALL_OW 428
59191: PUSH
59192: LD_EXP 52
59196: PUSH
59197: LD_VAR 0 5
59201: ARRAY
59202: PUSH
59203: LD_INT 2
59205: ARRAY
59206: EQUAL
59207: IFFALSE 59239
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59209: LD_ADDR_EXP 52
59213: PUSH
59214: LD_EXP 52
59218: PPUSH
59219: LD_VAR 0 5
59223: PPUSH
59224: CALL_OW 3
59228: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59229: CALL 59394 0 0
// exit ;
59233: POP
59234: POP
59235: GO 59389
// end else
59237: GO 59335
// if factory = factoryWaypoints [ i ] [ 2 ] then
59239: LD_VAR 0 1
59243: PUSH
59244: LD_EXP 52
59248: PUSH
59249: LD_VAR 0 5
59253: ARRAY
59254: PUSH
59255: LD_INT 2
59257: ARRAY
59258: EQUAL
59259: IFFALSE 59335
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59261: LD_ADDR_EXP 52
59265: PUSH
59266: LD_EXP 52
59270: PPUSH
59271: LD_VAR 0 5
59275: PPUSH
59276: CALL_OW 3
59280: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59281: LD_ADDR_EXP 52
59285: PUSH
59286: LD_EXP 52
59290: PPUSH
59291: LD_VAR 0 1
59295: PPUSH
59296: CALL_OW 255
59300: PUSH
59301: LD_VAR 0 1
59305: PUSH
59306: LD_VAR 0 2
59310: PUSH
59311: LD_VAR 0 3
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: PPUSH
59322: CALL 40492 0 2
59326: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59327: CALL 59394 0 0
// exit ;
59331: POP
59332: POP
59333: GO 59389
// end ; end ;
59335: GO 59174
59337: POP
59338: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59339: LD_ADDR_EXP 52
59343: PUSH
59344: LD_EXP 52
59348: PPUSH
59349: LD_VAR 0 1
59353: PPUSH
59354: CALL_OW 255
59358: PUSH
59359: LD_VAR 0 1
59363: PUSH
59364: LD_VAR 0 2
59368: PUSH
59369: LD_VAR 0 3
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: PPUSH
59380: CALL 40492 0 2
59384: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59385: CALL 59394 0 0
// end ;
59389: LD_VAR 0 4
59393: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59394: LD_INT 0
59396: PPUSH
59397: PPUSH
59398: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59399: LD_STRING resetFactoryWaypoint();
59401: PPUSH
59402: CALL_OW 559
// if factoryWaypoints then
59406: LD_EXP 52
59410: IFFALSE 59531
// begin list := factoryWaypoints ;
59412: LD_ADDR_VAR 0 3
59416: PUSH
59417: LD_EXP 52
59421: ST_TO_ADDR
// for i := 1 to list do
59422: LD_ADDR_VAR 0 2
59426: PUSH
59427: DOUBLE
59428: LD_INT 1
59430: DEC
59431: ST_TO_ADDR
59432: LD_VAR 0 3
59436: PUSH
59437: FOR_TO
59438: IFFALSE 59529
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59440: LD_STRING setFactoryWaypointXY(
59442: PUSH
59443: LD_VAR 0 3
59447: PUSH
59448: LD_VAR 0 2
59452: ARRAY
59453: PUSH
59454: LD_INT 1
59456: ARRAY
59457: STR
59458: PUSH
59459: LD_STRING ,
59461: STR
59462: PUSH
59463: LD_VAR 0 3
59467: PUSH
59468: LD_VAR 0 2
59472: ARRAY
59473: PUSH
59474: LD_INT 2
59476: ARRAY
59477: STR
59478: PUSH
59479: LD_STRING ,
59481: STR
59482: PUSH
59483: LD_VAR 0 3
59487: PUSH
59488: LD_VAR 0 2
59492: ARRAY
59493: PUSH
59494: LD_INT 3
59496: ARRAY
59497: STR
59498: PUSH
59499: LD_STRING ,
59501: STR
59502: PUSH
59503: LD_VAR 0 3
59507: PUSH
59508: LD_VAR 0 2
59512: ARRAY
59513: PUSH
59514: LD_INT 4
59516: ARRAY
59517: STR
59518: PUSH
59519: LD_STRING )
59521: STR
59522: PPUSH
59523: CALL_OW 559
59527: GO 59437
59529: POP
59530: POP
// end ; end ;
59531: LD_VAR 0 1
59535: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59536: LD_INT 0
59538: PPUSH
// if HexInfo ( x , y ) = warehouse then
59539: LD_VAR 0 2
59543: PPUSH
59544: LD_VAR 0 3
59548: PPUSH
59549: CALL_OW 428
59553: PUSH
59554: LD_VAR 0 1
59558: EQUAL
59559: IFFALSE 59586
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59561: LD_ADDR_EXP 53
59565: PUSH
59566: LD_EXP 53
59570: PPUSH
59571: LD_VAR 0 1
59575: PPUSH
59576: LD_INT 0
59578: PPUSH
59579: CALL_OW 1
59583: ST_TO_ADDR
59584: GO 59637
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59586: LD_ADDR_EXP 53
59590: PUSH
59591: LD_EXP 53
59595: PPUSH
59596: LD_VAR 0 1
59600: PPUSH
59601: LD_VAR 0 1
59605: PPUSH
59606: CALL_OW 255
59610: PUSH
59611: LD_VAR 0 1
59615: PUSH
59616: LD_VAR 0 2
59620: PUSH
59621: LD_VAR 0 3
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: PPUSH
59632: CALL_OW 1
59636: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59637: CALL 59646 0 0
// end ;
59641: LD_VAR 0 4
59645: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59646: LD_INT 0
59648: PPUSH
59649: PPUSH
59650: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59651: LD_STRING resetWarehouseGatheringPoints();
59653: PPUSH
59654: CALL_OW 559
// if warehouseGatheringPoints then
59658: LD_EXP 53
59662: IFFALSE 59788
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59664: LD_ADDR_VAR 0 3
59668: PUSH
59669: LD_EXP 53
59673: PPUSH
59674: CALL 44254 0 1
59678: ST_TO_ADDR
// for i := 1 to list do
59679: LD_ADDR_VAR 0 2
59683: PUSH
59684: DOUBLE
59685: LD_INT 1
59687: DEC
59688: ST_TO_ADDR
59689: LD_VAR 0 3
59693: PUSH
59694: FOR_TO
59695: IFFALSE 59786
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59697: LD_STRING setWarehouseGatheringPointXY(
59699: PUSH
59700: LD_VAR 0 3
59704: PUSH
59705: LD_VAR 0 2
59709: ARRAY
59710: PUSH
59711: LD_INT 1
59713: ARRAY
59714: STR
59715: PUSH
59716: LD_STRING ,
59718: STR
59719: PUSH
59720: LD_VAR 0 3
59724: PUSH
59725: LD_VAR 0 2
59729: ARRAY
59730: PUSH
59731: LD_INT 2
59733: ARRAY
59734: STR
59735: PUSH
59736: LD_STRING ,
59738: STR
59739: PUSH
59740: LD_VAR 0 3
59744: PUSH
59745: LD_VAR 0 2
59749: ARRAY
59750: PUSH
59751: LD_INT 3
59753: ARRAY
59754: STR
59755: PUSH
59756: LD_STRING ,
59758: STR
59759: PUSH
59760: LD_VAR 0 3
59764: PUSH
59765: LD_VAR 0 2
59769: ARRAY
59770: PUSH
59771: LD_INT 4
59773: ARRAY
59774: STR
59775: PUSH
59776: LD_STRING )
59778: STR
59779: PPUSH
59780: CALL_OW 559
59784: GO 59694
59786: POP
59787: POP
// end ; end ;
59788: LD_VAR 0 1
59792: RET
