// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46390 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46813 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 9
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 180 , 200 ] ;
 802: LD_ADDR_EXP 27
 806: PUSH
 807: LD_INT 180
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 17
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 3
 844: PUSH
 845: LD_INT 4
 847: PUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 6
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea , MZSpecialArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 16
 866: PUSH
 867: LD_INT 7
 869: PUSH
 870: LD_INT 8
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 17
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 4
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 22
 921: PUSH
 922: LD_EXP 4
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 23
 935: PUSH
 936: LD_EXP 4
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 13
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 25
 963: PUSH
 964: LD_EXP 4
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 4
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 4
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// mpKingArea := 0 ;
1009: LD_ADDR_EXP 32
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// mpPoints := 0 ;
1017: LD_ADDR_EXP 33
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// mpEmissions := 0 ;
1025: LD_ADDR_EXP 35
1029: PUSH
1030: LD_INT 0
1032: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1033: LD_EXP 4
1037: PUSH
1038: LD_INT 9
1040: ARRAY
1041: IFFALSE 1173
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1043: LD_ADDR_EXP 34
1047: PUSH
1048: LD_INT 1
1050: PUSH
1051: LD_INT 1
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: LD_INT 2
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 1
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PUSH
1088: LD_INT 12
1090: PUSH
1091: LD_INT 1
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: LD_INT 24
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 12
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: LD_INT 23
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 21
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 42
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 21
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 42
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1173: LD_ADDR_EXP 14
1177: PUSH
1178: LD_EXP 4
1182: PUSH
1183: LD_INT 11
1185: ARRAY
1186: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1187: LD_ADDR_EXP 20
1191: PUSH
1192: LD_EXP 4
1196: PUSH
1197: LD_INT 12
1199: ARRAY
1200: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1201: LD_ADDR_EXP 24
1205: PUSH
1206: LD_EXP 4
1210: PUSH
1211: LD_INT 13
1213: ARRAY
1214: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1215: LD_ADDR_EXP 31
1219: PUSH
1220: LD_EXP 4
1224: PUSH
1225: LD_INT 14
1227: ARRAY
1228: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1229: LD_ADDR_EXP 28
1233: PUSH
1234: LD_EXP 4
1238: PUSH
1239: LD_INT 15
1241: ARRAY
1242: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1243: LD_ADDR_EXP 26
1247: PUSH
1248: LD_EXP 4
1252: PUSH
1253: LD_INT 18
1255: ARRAY
1256: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1257: LD_ADDR_EXP 18
1261: PUSH
1262: LD_EXP 4
1266: PUSH
1267: LD_INT 21
1269: ARRAY
1270: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1271: LD_ADDR_EXP 29
1275: PUSH
1276: LD_INT 9
1278: PUSH
1279: LD_INT 10
1281: PUSH
1282: LD_INT 11
1284: PUSH
1285: LD_INT 12
1287: PUSH
1288: LD_INT 13
1290: PUSH
1291: LD_INT 14
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 0 ) , GetBuildingFromArea ( depotArea2 , 0 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 3 ) ] ;
1302: LD_ADDR_VAR 0 8
1306: PUSH
1307: LD_INT 15
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL 45755 0 2
1317: PUSH
1318: LD_INT 16
1320: PPUSH
1321: LD_INT 0
1323: PPUSH
1324: CALL 45755 0 2
1328: PUSH
1329: LD_INT 17
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL 45755 0 2
1339: PUSH
1340: LD_INT 33
1342: PPUSH
1343: LD_INT 3
1345: PPUSH
1346: CALL 45755 0 2
1350: PUSH
1351: LD_INT 39
1353: PPUSH
1354: LD_INT 3
1356: PPUSH
1357: CALL 45755 0 2
1361: PUSH
1362: LD_INT 45
1364: PPUSH
1365: LD_INT 3
1367: PPUSH
1368: CALL 45755 0 2
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1381: LD_ADDR_VAR 0 3
1385: PUSH
1386: DOUBLE
1387: LD_INT 1
1389: DEC
1390: ST_TO_ADDR
1391: LD_VAR 0 8
1395: PPUSH
1396: CALL 5060 0 1
1400: PUSH
1401: FOR_TO
1402: IFFALSE 1506
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1404: LD_ADDR_EXP 19
1408: PUSH
1409: LD_EXP 19
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: LD_VAR 0 8
1423: PUSH
1424: LD_VAR 0 3
1428: ARRAY
1429: PUSH
1430: LD_INT 1
1432: ARRAY
1433: PPUSH
1434: LD_VAR 0 8
1438: PUSH
1439: LD_VAR 0 3
1443: ARRAY
1444: PUSH
1445: LD_INT 3
1447: ARRAY
1448: PPUSH
1449: LD_INT 10
1451: PPUSH
1452: CALL_OW 272
1456: PUSH
1457: LD_VAR 0 8
1461: PUSH
1462: LD_VAR 0 3
1466: ARRAY
1467: PUSH
1468: LD_INT 2
1470: ARRAY
1471: PPUSH
1472: LD_VAR 0 8
1476: PUSH
1477: LD_VAR 0 3
1481: ARRAY
1482: PUSH
1483: LD_INT 3
1485: ARRAY
1486: PPUSH
1487: LD_INT 10
1489: PPUSH
1490: CALL_OW 273
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PPUSH
1499: CALL_OW 1
1503: ST_TO_ADDR
1504: GO 1401
1506: POP
1507: POP
// if hasOil then
1508: LD_VAR 0 5
1512: IFFALSE 1623
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1514: LD_ADDR_VAR 0 4
1518: PUSH
1519: LD_EXP 4
1523: PUSH
1524: LD_INT 6
1526: ARRAY
1527: PUSH
1528: LD_INT 2
1530: EQUAL
1531: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1532: LD_ADDR_EXP 10
1536: PUSH
1537: LD_INT 18
1539: PPUSH
1540: LD_VAR 0 4
1544: PPUSH
1545: CALL 45588 0 2
1549: PUSH
1550: LD_INT 19
1552: PPUSH
1553: LD_VAR 0 4
1557: PPUSH
1558: CALL 45588 0 2
1562: PUSH
1563: LD_INT 20
1565: PPUSH
1566: LD_VAR 0 4
1570: PPUSH
1571: CALL 45588 0 2
1575: PUSH
1576: LD_INT 37
1578: PPUSH
1579: LD_VAR 0 4
1583: PPUSH
1584: CALL 45588 0 2
1588: PUSH
1589: LD_INT 43
1591: PPUSH
1592: LD_VAR 0 4
1596: PPUSH
1597: CALL 45588 0 2
1601: PUSH
1602: LD_INT 49
1604: PPUSH
1605: LD_VAR 0 4
1609: PPUSH
1610: CALL 45588 0 2
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: ST_TO_ADDR
// end ; if hasSib then
1623: LD_VAR 0 6
1627: IFFALSE 1738
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1629: LD_ADDR_VAR 0 4
1633: PUSH
1634: LD_EXP 4
1638: PUSH
1639: LD_INT 7
1641: ARRAY
1642: PUSH
1643: LD_INT 2
1645: EQUAL
1646: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1647: LD_ADDR_EXP 11
1651: PUSH
1652: LD_INT 21
1654: PPUSH
1655: LD_VAR 0 4
1659: PPUSH
1660: CALL 45588 0 2
1664: PUSH
1665: LD_INT 22
1667: PPUSH
1668: LD_VAR 0 4
1672: PPUSH
1673: CALL 45588 0 2
1677: PUSH
1678: LD_INT 23
1680: PPUSH
1681: LD_VAR 0 4
1685: PPUSH
1686: CALL 45588 0 2
1690: PUSH
1691: LD_INT 38
1693: PPUSH
1694: LD_VAR 0 4
1698: PPUSH
1699: CALL 45588 0 2
1703: PUSH
1704: LD_INT 44
1706: PPUSH
1707: LD_VAR 0 4
1711: PPUSH
1712: CALL 45588 0 2
1716: PUSH
1717: LD_INT 50
1719: PPUSH
1720: LD_VAR 0 4
1724: PPUSH
1725: CALL 45588 0 2
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1738: LD_VAR 0 7
1742: PUSH
1743: LD_INT 1
1745: GREATEREQUAL
1746: IFFALSE 1758
// mpDepots := startPos ;
1748: LD_ADDR_EXP 12
1752: PUSH
1753: LD_VAR 0 8
1757: ST_TO_ADDR
// if baseLevel >= 2 then
1758: LD_VAR 0 7
1762: PUSH
1763: LD_INT 2
1765: GREATEREQUAL
1766: IFFALSE 2081
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 0 ) ] ] ;
1768: LD_ADDR_EXP 15
1772: PUSH
1773: LD_INT 31
1775: PUSH
1776: LD_INT 24
1778: PPUSH
1779: LD_INT 3
1781: PPUSH
1782: CALL 45755 0 2
1786: ADD
1787: PUSH
1788: LD_INT 31
1790: PUSH
1791: LD_INT 25
1793: PPUSH
1794: LD_INT 3
1796: PPUSH
1797: CALL 45755 0 2
1801: ADD
1802: PUSH
1803: LD_INT 4
1805: PUSH
1806: LD_INT 26
1808: PPUSH
1809: LD_INT 3
1811: PPUSH
1812: CALL 45755 0 2
1816: ADD
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 31
1825: PUSH
1826: LD_INT 27
1828: PPUSH
1829: LD_INT 3
1831: PPUSH
1832: CALL 45755 0 2
1836: ADD
1837: PUSH
1838: LD_INT 31
1840: PUSH
1841: LD_INT 28
1843: PPUSH
1844: LD_INT 4
1846: PPUSH
1847: CALL 45755 0 2
1851: ADD
1852: PUSH
1853: LD_INT 4
1855: PUSH
1856: LD_INT 29
1858: PPUSH
1859: LD_INT 3
1861: PPUSH
1862: CALL 45755 0 2
1866: ADD
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 31
1875: PUSH
1876: LD_INT 30
1878: PPUSH
1879: LD_INT 3
1881: PPUSH
1882: CALL 45755 0 2
1886: ADD
1887: PUSH
1888: LD_INT 31
1890: PUSH
1891: LD_INT 31
1893: PPUSH
1894: LD_INT 4
1896: PPUSH
1897: CALL 45755 0 2
1901: ADD
1902: PUSH
1903: LD_INT 4
1905: PUSH
1906: LD_INT 32
1908: PPUSH
1909: LD_INT 3
1911: PPUSH
1912: CALL 45755 0 2
1916: ADD
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 31
1925: PUSH
1926: LD_INT 34
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: CALL 45755 0 2
1936: ADD
1937: PUSH
1938: LD_INT 31
1940: PUSH
1941: LD_INT 35
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL 45755 0 2
1951: ADD
1952: PUSH
1953: LD_INT 4
1955: PUSH
1956: LD_INT 36
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL 45755 0 2
1966: ADD
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 31
1975: PUSH
1976: LD_INT 40
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL 45755 0 2
1986: ADD
1987: PUSH
1988: LD_INT 31
1990: PUSH
1991: LD_INT 41
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL 45755 0 2
2001: ADD
2002: PUSH
2003: LD_INT 4
2005: PUSH
2006: LD_INT 42
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL 45755 0 2
2016: ADD
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 31
2025: PUSH
2026: LD_INT 46
2028: PPUSH
2029: LD_INT 0
2031: PPUSH
2032: CALL 45755 0 2
2036: ADD
2037: PUSH
2038: LD_INT 31
2040: PUSH
2041: LD_INT 47
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL 45755 0 2
2051: ADD
2052: PUSH
2053: LD_INT 4
2055: PUSH
2056: LD_INT 48
2058: PPUSH
2059: LD_INT 0
2061: PPUSH
2062: CALL 45755 0 2
2066: ADD
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: ST_TO_ADDR
// end ; end ;
2081: LD_VAR 0 2
2085: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2086: GO 2088
2088: DISABLE
2089: LD_INT 0
2091: PPUSH
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
2096: PPUSH
2097: PPUSH
2098: PPUSH
// begin if not mpShipments then
2099: LD_EXP 25
2103: NOT
2104: IFFALSE 2108
// exit ;
2106: GO 2673
// case mpShipments of 1 :
2108: LD_EXP 25
2112: PUSH
2113: LD_INT 1
2115: DOUBLE
2116: EQUAL
2117: IFTRUE 2121
2119: GO 2156
2121: POP
// begin time := 0 0$30 ;
2122: LD_ADDR_VAR 0 4
2126: PUSH
2127: LD_INT 1050
2129: ST_TO_ADDR
// normalTime := 0 0$30 ;
2130: LD_ADDR_VAR 0 6
2134: PUSH
2135: LD_INT 1050
2137: ST_TO_ADDR
// maxTime := 1 1$20 ;
2138: LD_ADDR_VAR 0 8
2142: PUSH
2143: LD_INT 2800
2145: ST_TO_ADDR
// delayTime := 0 0$5 ;
2146: LD_ADDR_VAR 0 7
2150: PUSH
2151: LD_INT 175
2153: ST_TO_ADDR
// end ; 2 :
2154: GO 2286
2156: LD_INT 2
2158: DOUBLE
2159: EQUAL
2160: IFTRUE 2164
2162: GO 2199
2164: POP
// begin time := 0 0$25 ;
2165: LD_ADDR_VAR 0 4
2169: PUSH
2170: LD_INT 875
2172: ST_TO_ADDR
// normalTime := 0 0$25 ;
2173: LD_ADDR_VAR 0 6
2177: PUSH
2178: LD_INT 875
2180: ST_TO_ADDR
// maxTime := 1 1$10 ;
2181: LD_ADDR_VAR 0 8
2185: PUSH
2186: LD_INT 2450
2188: ST_TO_ADDR
// delayTime := 0 0$4 ;
2189: LD_ADDR_VAR 0 7
2193: PUSH
2194: LD_INT 140
2196: ST_TO_ADDR
// end ; 3 :
2197: GO 2286
2199: LD_INT 3
2201: DOUBLE
2202: EQUAL
2203: IFTRUE 2207
2205: GO 2242
2207: POP
// begin time := 0 0$20 ;
2208: LD_ADDR_VAR 0 4
2212: PUSH
2213: LD_INT 700
2215: ST_TO_ADDR
// normalTime := 0 0$20 ;
2216: LD_ADDR_VAR 0 6
2220: PUSH
2221: LD_INT 700
2223: ST_TO_ADDR
// maxTime := 1 1$00 ;
2224: LD_ADDR_VAR 0 8
2228: PUSH
2229: LD_INT 2100
2231: ST_TO_ADDR
// delayTime := 0 0$3 ;
2232: LD_ADDR_VAR 0 7
2236: PUSH
2237: LD_INT 105
2239: ST_TO_ADDR
// end ; 4 :
2240: GO 2286
2242: LD_INT 4
2244: DOUBLE
2245: EQUAL
2246: IFTRUE 2250
2248: GO 2285
2250: POP
// begin time := 0 0$15 ;
2251: LD_ADDR_VAR 0 4
2255: PUSH
2256: LD_INT 525
2258: ST_TO_ADDR
// normalTime := 0 0$15 ;
2259: LD_ADDR_VAR 0 6
2263: PUSH
2264: LD_INT 525
2266: ST_TO_ADDR
// maxTime := 0 0$55 ;
2267: LD_ADDR_VAR 0 8
2271: PUSH
2272: LD_INT 1925
2274: ST_TO_ADDR
// delayTime := 0 0$2 ;
2275: LD_ADDR_VAR 0 7
2279: PUSH
2280: LD_INT 70
2282: ST_TO_ADDR
// end ; end ;
2283: GO 2286
2285: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 2
2296: PUSH
2297: LD_INT 3
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 5
2305: PUSH
2306: LD_INT 6
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: ST_TO_ADDR
// areas := [ ] ;
2317: LD_ADDR_VAR 0 5
2321: PUSH
2322: EMPTY
2323: ST_TO_ADDR
// for i := 1 to 8 do
2324: LD_ADDR_VAR 0 1
2328: PUSH
2329: DOUBLE
2330: LD_INT 1
2332: DEC
2333: ST_TO_ADDR
2334: LD_INT 8
2336: PUSH
2337: FOR_TO
2338: IFFALSE 2385
// begin if not mpSidePositions [ i ] then
2340: LD_EXP 5
2344: PUSH
2345: LD_VAR 0 1
2349: ARRAY
2350: NOT
2351: IFFALSE 2355
// continue ;
2353: GO 2337
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2355: LD_ADDR_VAR 0 5
2359: PUSH
2360: LD_VAR 0 5
2364: PUSH
2365: LD_VAR 0 3
2369: PUSH
2370: LD_EXP 5
2374: PUSH
2375: LD_VAR 0 1
2379: ARRAY
2380: ARRAY
2381: ADD
2382: ST_TO_ADDR
// end ;
2383: GO 2337
2385: POP
2386: POP
// x := 1 ;
2387: LD_ADDR_VAR 0 2
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// repeat wait ( time ) ;
2395: LD_VAR 0 4
2399: PPUSH
2400: CALL_OW 67
// x := Inc ( x ) ;
2404: LD_ADDR_VAR 0 2
2408: PUSH
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL 42409 0 1
2418: ST_TO_ADDR
// if x > 5 then
2419: LD_VAR 0 2
2423: PUSH
2424: LD_INT 5
2426: GREATER
2427: IFFALSE 2437
// x := 1 ;
2429: LD_ADDR_VAR 0 2
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// for i in areas do
2437: LD_ADDR_VAR 0 1
2441: PUSH
2442: LD_VAR 0 5
2446: PUSH
2447: FOR_IN
2448: IFFALSE 2487
// begin if GetResourceArea ( i , mat_cans ) < 25 then
2450: LD_VAR 0 1
2454: PPUSH
2455: LD_INT 1
2457: PPUSH
2458: CALL_OW 287
2462: PUSH
2463: LD_INT 25
2465: LESS
2466: IFFALSE 2485
// begin CreateCratesArea ( x , i , true ) ;
2468: LD_VAR 0 2
2472: PPUSH
2473: LD_VAR 0 1
2477: PPUSH
2478: LD_INT 1
2480: PPUSH
2481: CALL_OW 55
// end ; end ;
2485: GO 2447
2487: POP
2488: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 100 then
2489: LD_INT 7
2491: PPUSH
2492: LD_INT 1
2494: PPUSH
2495: CALL_OW 287
2499: PUSH
2500: LD_INT 100
2502: LESS
2503: IFFALSE 2547
// for i := 1 to Count ( areas ) do
2505: LD_ADDR_VAR 0 1
2509: PUSH
2510: DOUBLE
2511: LD_INT 1
2513: DEC
2514: ST_TO_ADDR
2515: LD_VAR 0 5
2519: PPUSH
2520: CALL 5060 0 1
2524: PUSH
2525: FOR_TO
2526: IFFALSE 2545
// CreateCratesArea ( x , MZBaseArea , true ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 7
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 55
2543: GO 2525
2545: POP
2546: POP
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 50 then
2547: LD_INT 8
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: CALL_OW 287
2557: PUSH
2558: LD_INT 50
2560: LESS
2561: IFFALSE 2600
// begin for i := 1 to 4 do
2563: LD_ADDR_VAR 0 1
2567: PUSH
2568: DOUBLE
2569: LD_INT 1
2571: DEC
2572: ST_TO_ADDR
2573: LD_INT 4
2575: PUSH
2576: FOR_TO
2577: IFFALSE 2596
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2579: LD_VAR 0 2
2583: PPUSH
2584: LD_INT 8
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: CALL_OW 55
2594: GO 2576
2596: POP
2597: POP
// end else
2598: GO 2631
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 100 then
2600: LD_INT 8
2602: PPUSH
2603: LD_INT 1
2605: PPUSH
2606: CALL_OW 287
2610: PUSH
2611: LD_INT 100
2613: LESS
2614: IFFALSE 2631
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 8
2623: PPUSH
2624: LD_INT 1
2626: PPUSH
2627: CALL_OW 55
// time := time + delayTime ;
2631: LD_ADDR_VAR 0 4
2635: PUSH
2636: LD_VAR 0 4
2640: PUSH
2641: LD_VAR 0 7
2645: PLUS
2646: ST_TO_ADDR
// if time > maxTime then
2647: LD_VAR 0 4
2651: PUSH
2652: LD_VAR 0 8
2656: GREATER
2657: IFFALSE 2669
// time := normalTime ;
2659: LD_ADDR_VAR 0 4
2663: PUSH
2664: LD_VAR 0 6
2668: ST_TO_ADDR
// until false ;
2669: LD_INT 0
2671: IFFALSE 2395
// end ; end_of_file
2673: PPOPN 8
2675: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2676: LD_VAR 0 1
2680: PPUSH
2681: CALL 56766 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2685: LD_VAR 0 1
2689: PPUSH
2690: CALL 51936 0 1
// end ;
2694: PPOPN 1
2696: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2697: LD_VAR 0 1
2701: PPUSH
2702: CALL 56783 0 1
// end ;
2706: PPOPN 1
2708: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2709: LD_VAR 0 1
2713: PPUSH
2714: CALL 52989 0 1
2718: PPOPN 1
2720: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2721: LD_VAR 0 1
2725: PPUSH
2726: LD_VAR 0 2
2730: PPUSH
2731: CALL 56824 0 2
2735: PPOPN 2
2737: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2738: LD_VAR 0 1
2742: PPUSH
2743: LD_VAR 0 2
2747: PPUSH
2748: CALL 52742 0 2
2752: PPOPN 2
2754: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2755: LD_VAR 0 1
2759: PPUSH
2760: LD_VAR 0 2
2764: PPUSH
2765: LD_VAR 0 3
2769: PPUSH
2770: CALL 53042 0 3
2774: PPOPN 3
2776: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2777: LD_VAR 0 1
2781: PPUSH
2782: LD_VAR 0 2
2786: PPUSH
2787: LD_VAR 0 3
2791: PPUSH
2792: LD_VAR 0 4
2796: PPUSH
2797: LD_VAR 0 5
2801: PPUSH
2802: CALL 53726 0 5
2806: PPOPN 5
2808: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2809: LD_VAR 0 1
2813: PPUSH
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_VAR 0 3
2823: PPUSH
2824: LD_VAR 0 4
2828: PPUSH
2829: CALL 53829 0 4
2833: PPOPN 4
2835: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2836: LD_INT 0
2838: PPUSH
2839: PPUSH
// if exist_mode then
2840: LD_VAR 0 2
2844: IFFALSE 2890
// begin unit := CreateCharacter ( prefix & ident ) ;
2846: LD_ADDR_VAR 0 5
2850: PUSH
2851: LD_VAR 0 3
2855: PUSH
2856: LD_VAR 0 1
2860: STR
2861: PPUSH
2862: CALL_OW 34
2866: ST_TO_ADDR
// if unit then
2867: LD_VAR 0 5
2871: IFFALSE 2888
// DeleteCharacters ( prefix & ident ) ;
2873: LD_VAR 0 3
2877: PUSH
2878: LD_VAR 0 1
2882: STR
2883: PPUSH
2884: CALL_OW 40
// end else
2888: GO 2905
// unit := NewCharacter ( ident ) ;
2890: LD_ADDR_VAR 0 5
2894: PUSH
2895: LD_VAR 0 1
2899: PPUSH
2900: CALL_OW 25
2904: ST_TO_ADDR
// result := unit ;
2905: LD_ADDR_VAR 0 4
2909: PUSH
2910: LD_VAR 0 5
2914: ST_TO_ADDR
// end ;
2915: LD_VAR 0 4
2919: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
2920: LD_INT 0
2922: PPUSH
2923: PPUSH
// if exist_mode then
2924: LD_VAR 0 2
2928: IFFALSE 2953
// unit := CreateCharacter ( prefix & ident ) else
2930: LD_ADDR_VAR 0 5
2934: PUSH
2935: LD_VAR 0 3
2939: PUSH
2940: LD_VAR 0 1
2944: STR
2945: PPUSH
2946: CALL_OW 34
2950: ST_TO_ADDR
2951: GO 2968
// unit := NewCharacter ( ident ) ;
2953: LD_ADDR_VAR 0 5
2957: PUSH
2958: LD_VAR 0 1
2962: PPUSH
2963: CALL_OW 25
2967: ST_TO_ADDR
// result := unit ;
2968: LD_ADDR_VAR 0 4
2972: PUSH
2973: LD_VAR 0 5
2977: ST_TO_ADDR
// end ;
2978: LD_VAR 0 4
2982: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2983: LD_INT 0
2985: PPUSH
2986: PPUSH
// if not side or not nation then
2987: LD_VAR 0 1
2991: NOT
2992: IFTRUE 3001
2994: PUSH
2995: LD_VAR 0 2
2999: NOT
3000: OR
3001: IFFALSE 3005
// exit ;
3003: GO 3799
// case nation of nation_american :
3005: LD_VAR 0 2
3009: PUSH
3010: LD_INT 1
3012: DOUBLE
3013: EQUAL
3014: IFTRUE 3018
3016: GO 3240
3018: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3019: LD_ADDR_VAR 0 4
3023: PUSH
3024: LD_INT 35
3026: PUSH
3027: LD_INT 45
3029: PUSH
3030: LD_INT 46
3032: PUSH
3033: LD_INT 47
3035: PUSH
3036: LD_INT 82
3038: PUSH
3039: LD_INT 83
3041: PUSH
3042: LD_INT 84
3044: PUSH
3045: LD_INT 85
3047: PUSH
3048: LD_INT 86
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: LD_INT 2
3056: PUSH
3057: LD_INT 6
3059: PUSH
3060: LD_INT 15
3062: PUSH
3063: LD_INT 16
3065: PUSH
3066: LD_INT 7
3068: PUSH
3069: LD_INT 12
3071: PUSH
3072: LD_INT 13
3074: PUSH
3075: LD_INT 10
3077: PUSH
3078: LD_INT 14
3080: PUSH
3081: LD_INT 20
3083: PUSH
3084: LD_INT 21
3086: PUSH
3087: LD_INT 22
3089: PUSH
3090: LD_INT 25
3092: PUSH
3093: LD_INT 32
3095: PUSH
3096: LD_INT 27
3098: PUSH
3099: LD_INT 36
3101: PUSH
3102: LD_INT 69
3104: PUSH
3105: LD_INT 39
3107: PUSH
3108: LD_INT 34
3110: PUSH
3111: LD_INT 40
3113: PUSH
3114: LD_INT 48
3116: PUSH
3117: LD_INT 49
3119: PUSH
3120: LD_INT 50
3122: PUSH
3123: LD_INT 51
3125: PUSH
3126: LD_INT 52
3128: PUSH
3129: LD_INT 53
3131: PUSH
3132: LD_INT 54
3134: PUSH
3135: LD_INT 55
3137: PUSH
3138: LD_INT 56
3140: PUSH
3141: LD_INT 57
3143: PUSH
3144: LD_INT 58
3146: PUSH
3147: LD_INT 59
3149: PUSH
3150: LD_INT 60
3152: PUSH
3153: LD_INT 61
3155: PUSH
3156: LD_INT 62
3158: PUSH
3159: LD_INT 80
3161: PUSH
3162: LD_INT 82
3164: PUSH
3165: LD_INT 83
3167: PUSH
3168: LD_INT 84
3170: PUSH
3171: LD_INT 85
3173: PUSH
3174: LD_INT 86
3176: PUSH
3177: LD_INT 90
3179: PUSH
3180: LD_INT 93
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: ST_TO_ADDR
3238: GO 3721
3240: LD_INT 2
3242: DOUBLE
3243: EQUAL
3244: IFTRUE 3248
3246: GO 3482
3248: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
3249: LD_ADDR_VAR 0 4
3253: PUSH
3254: LD_INT 35
3256: PUSH
3257: LD_INT 45
3259: PUSH
3260: LD_INT 46
3262: PUSH
3263: LD_INT 47
3265: PUSH
3266: LD_INT 82
3268: PUSH
3269: LD_INT 83
3271: PUSH
3272: LD_INT 84
3274: PUSH
3275: LD_INT 85
3277: PUSH
3278: LD_INT 87
3280: PUSH
3281: LD_INT 70
3283: PUSH
3284: LD_INT 1
3286: PUSH
3287: LD_INT 11
3289: PUSH
3290: LD_INT 3
3292: PUSH
3293: LD_INT 4
3295: PUSH
3296: LD_INT 5
3298: PUSH
3299: LD_INT 6
3301: PUSH
3302: LD_INT 15
3304: PUSH
3305: LD_INT 18
3307: PUSH
3308: LD_INT 7
3310: PUSH
3311: LD_INT 17
3313: PUSH
3314: LD_INT 8
3316: PUSH
3317: LD_INT 20
3319: PUSH
3320: LD_INT 21
3322: PUSH
3323: LD_INT 22
3325: PUSH
3326: LD_INT 72
3328: PUSH
3329: LD_INT 26
3331: PUSH
3332: LD_INT 69
3334: PUSH
3335: LD_INT 39
3337: PUSH
3338: LD_INT 40
3340: PUSH
3341: LD_INT 41
3343: PUSH
3344: LD_INT 42
3346: PUSH
3347: LD_INT 43
3349: PUSH
3350: LD_INT 48
3352: PUSH
3353: LD_INT 49
3355: PUSH
3356: LD_INT 50
3358: PUSH
3359: LD_INT 51
3361: PUSH
3362: LD_INT 52
3364: PUSH
3365: LD_INT 53
3367: PUSH
3368: LD_INT 54
3370: PUSH
3371: LD_INT 55
3373: PUSH
3374: LD_INT 56
3376: PUSH
3377: LD_INT 60
3379: PUSH
3380: LD_INT 61
3382: PUSH
3383: LD_INT 62
3385: PUSH
3386: LD_INT 66
3388: PUSH
3389: LD_INT 67
3391: PUSH
3392: LD_INT 68
3394: PUSH
3395: LD_INT 81
3397: PUSH
3398: LD_INT 82
3400: PUSH
3401: LD_INT 83
3403: PUSH
3404: LD_INT 84
3406: PUSH
3407: LD_INT 85
3409: PUSH
3410: LD_INT 87
3412: PUSH
3413: LD_INT 88
3415: PUSH
3416: LD_INT 92
3418: PUSH
3419: LD_INT 94
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: ST_TO_ADDR
3480: GO 3721
3482: LD_INT 3
3484: DOUBLE
3485: EQUAL
3486: IFTRUE 3490
3488: GO 3720
3490: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
3491: LD_ADDR_VAR 0 4
3495: PUSH
3496: LD_INT 46
3498: PUSH
3499: LD_INT 47
3501: PUSH
3502: LD_INT 1
3504: PUSH
3505: LD_INT 2
3507: PUSH
3508: LD_INT 82
3510: PUSH
3511: LD_INT 83
3513: PUSH
3514: LD_INT 84
3516: PUSH
3517: LD_INT 85
3519: PUSH
3520: LD_INT 86
3522: PUSH
3523: LD_INT 11
3525: PUSH
3526: LD_INT 9
3528: PUSH
3529: LD_INT 20
3531: PUSH
3532: LD_INT 19
3534: PUSH
3535: LD_INT 21
3537: PUSH
3538: LD_INT 24
3540: PUSH
3541: LD_INT 22
3543: PUSH
3544: LD_INT 25
3546: PUSH
3547: LD_INT 28
3549: PUSH
3550: LD_INT 29
3552: PUSH
3553: LD_INT 30
3555: PUSH
3556: LD_INT 31
3558: PUSH
3559: LD_INT 37
3561: PUSH
3562: LD_INT 38
3564: PUSH
3565: LD_INT 32
3567: PUSH
3568: LD_INT 27
3570: PUSH
3571: LD_INT 33
3573: PUSH
3574: LD_INT 69
3576: PUSH
3577: LD_INT 39
3579: PUSH
3580: LD_INT 34
3582: PUSH
3583: LD_INT 40
3585: PUSH
3586: LD_INT 71
3588: PUSH
3589: LD_INT 23
3591: PUSH
3592: LD_INT 44
3594: PUSH
3595: LD_INT 48
3597: PUSH
3598: LD_INT 49
3600: PUSH
3601: LD_INT 50
3603: PUSH
3604: LD_INT 51
3606: PUSH
3607: LD_INT 52
3609: PUSH
3610: LD_INT 53
3612: PUSH
3613: LD_INT 54
3615: PUSH
3616: LD_INT 55
3618: PUSH
3619: LD_INT 56
3621: PUSH
3622: LD_INT 57
3624: PUSH
3625: LD_INT 58
3627: PUSH
3628: LD_INT 59
3630: PUSH
3631: LD_INT 63
3633: PUSH
3634: LD_INT 64
3636: PUSH
3637: LD_INT 65
3639: PUSH
3640: LD_INT 82
3642: PUSH
3643: LD_INT 83
3645: PUSH
3646: LD_INT 84
3648: PUSH
3649: LD_INT 85
3651: PUSH
3652: LD_INT 86
3654: PUSH
3655: LD_INT 89
3657: PUSH
3658: LD_INT 91
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: ST_TO_ADDR
3718: GO 3721
3720: POP
// if state > - 1 and state < 3 then
3721: LD_VAR 0 3
3725: PUSH
3726: LD_INT 1
3728: NEG
3729: GREATER
3730: IFFALSE 3742
3732: PUSH
3733: LD_VAR 0 3
3737: PUSH
3738: LD_INT 3
3740: LESS
3741: AND
3742: IFFALSE 3799
// for i in result do
3744: LD_ADDR_VAR 0 5
3748: PUSH
3749: LD_VAR 0 4
3753: PUSH
3754: FOR_IN
3755: IFFALSE 3797
// if GetTech ( i , side ) <> state then
3757: LD_VAR 0 5
3761: PPUSH
3762: LD_VAR 0 1
3766: PPUSH
3767: CALL_OW 321
3771: PUSH
3772: LD_VAR 0 3
3776: NONEQUAL
3777: IFFALSE 3795
// result := result diff i ;
3779: LD_ADDR_VAR 0 4
3783: PUSH
3784: LD_VAR 0 4
3788: PUSH
3789: LD_VAR 0 5
3793: DIFF
3794: ST_TO_ADDR
3795: GO 3754
3797: POP
3798: POP
// end ;
3799: LD_VAR 0 4
3803: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3804: LD_INT 0
3806: PPUSH
3807: PPUSH
3808: PPUSH
// result := true ;
3809: LD_ADDR_VAR 0 3
3813: PUSH
3814: LD_INT 1
3816: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3817: LD_ADDR_VAR 0 5
3821: PUSH
3822: LD_VAR 0 2
3826: PPUSH
3827: CALL_OW 480
3831: ST_TO_ADDR
// if not tmp then
3832: LD_VAR 0 5
3836: NOT
3837: IFFALSE 3841
// exit ;
3839: GO 3890
// for i in tmp do
3841: LD_ADDR_VAR 0 4
3845: PUSH
3846: LD_VAR 0 5
3850: PUSH
3851: FOR_IN
3852: IFFALSE 3888
// if GetTech ( i , side ) <> state_researched then
3854: LD_VAR 0 4
3858: PPUSH
3859: LD_VAR 0 1
3863: PPUSH
3864: CALL_OW 321
3868: PUSH
3869: LD_INT 2
3871: NONEQUAL
3872: IFFALSE 3886
// begin result := false ;
3874: LD_ADDR_VAR 0 3
3878: PUSH
3879: LD_INT 0
3881: ST_TO_ADDR
// exit ;
3882: POP
3883: POP
3884: GO 3890
// end ;
3886: GO 3851
3888: POP
3889: POP
// end ;
3890: LD_VAR 0 3
3894: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3895: LD_INT 0
3897: PPUSH
3898: PPUSH
3899: PPUSH
3900: PPUSH
3901: PPUSH
3902: PPUSH
3903: PPUSH
3904: PPUSH
3905: PPUSH
3906: PPUSH
3907: PPUSH
3908: PPUSH
3909: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3910: LD_VAR 0 1
3914: NOT
3915: IFTRUE 3932
3917: PUSH
3918: LD_VAR 0 1
3922: PPUSH
3923: CALL_OW 257
3927: PUSH
3928: LD_INT 9
3930: NONEQUAL
3931: OR
3932: IFFALSE 3936
// exit ;
3934: GO 4515
// side := GetSide ( unit ) ;
3936: LD_ADDR_VAR 0 9
3940: PUSH
3941: LD_VAR 0 1
3945: PPUSH
3946: CALL_OW 255
3950: ST_TO_ADDR
// tech_space := tech_spacanom ;
3951: LD_ADDR_VAR 0 12
3955: PUSH
3956: LD_INT 29
3958: ST_TO_ADDR
// tech_time := tech_taurad ;
3959: LD_ADDR_VAR 0 13
3963: PUSH
3964: LD_INT 28
3966: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3967: LD_ADDR_VAR 0 11
3971: PUSH
3972: LD_VAR 0 1
3976: PPUSH
3977: CALL_OW 310
3981: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3982: LD_VAR 0 11
3986: PPUSH
3987: CALL_OW 247
3991: PUSH
3992: LD_INT 2
3994: EQUAL
3995: IFFALSE 3999
// exit ;
3997: GO 4515
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3999: LD_ADDR_VAR 0 8
4003: PUSH
4004: LD_INT 81
4006: PUSH
4007: LD_VAR 0 9
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PUSH
4016: LD_INT 3
4018: PUSH
4019: LD_INT 21
4021: PUSH
4022: LD_INT 3
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PPUSH
4037: CALL_OW 69
4041: ST_TO_ADDR
// if not tmp then
4042: LD_VAR 0 8
4046: NOT
4047: IFFALSE 4051
// exit ;
4049: GO 4515
// if in_unit then
4051: LD_VAR 0 11
4055: IFFALSE 4079
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4057: LD_ADDR_VAR 0 10
4061: PUSH
4062: LD_VAR 0 8
4066: PPUSH
4067: LD_VAR 0 11
4071: PPUSH
4072: CALL_OW 74
4076: ST_TO_ADDR
4077: GO 4099
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4079: LD_ADDR_VAR 0 10
4083: PUSH
4084: LD_VAR 0 8
4088: PPUSH
4089: LD_VAR 0 1
4093: PPUSH
4094: CALL_OW 74
4098: ST_TO_ADDR
// if not enemy then
4099: LD_VAR 0 10
4103: NOT
4104: IFFALSE 4108
// exit ;
4106: GO 4515
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4108: LD_VAR 0 11
4112: IFFALSE 4134
4114: PUSH
4115: LD_VAR 0 11
4119: PPUSH
4120: LD_VAR 0 10
4124: PPUSH
4125: CALL_OW 296
4129: PUSH
4130: LD_INT 13
4132: GREATER
4133: AND
4134: IFTRUE 4156
4136: PUSH
4137: LD_VAR 0 1
4141: PPUSH
4142: LD_VAR 0 10
4146: PPUSH
4147: CALL_OW 296
4151: PUSH
4152: LD_INT 12
4154: GREATER
4155: OR
4156: IFFALSE 4160
// exit ;
4158: GO 4515
// missile := [ 1 ] ;
4160: LD_ADDR_VAR 0 14
4164: PUSH
4165: LD_INT 1
4167: PUSH
4168: EMPTY
4169: LIST
4170: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4171: LD_VAR 0 9
4175: PPUSH
4176: LD_VAR 0 12
4180: PPUSH
4181: CALL_OW 325
4185: IFFALSE 4214
// missile := Replace ( missile , missile + 1 , 2 ) ;
4187: LD_ADDR_VAR 0 14
4191: PUSH
4192: LD_VAR 0 14
4196: PPUSH
4197: LD_VAR 0 14
4201: PUSH
4202: LD_INT 1
4204: PLUS
4205: PPUSH
4206: LD_INT 2
4208: PPUSH
4209: CALL_OW 1
4213: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4214: LD_VAR 0 9
4218: PPUSH
4219: LD_VAR 0 13
4223: PPUSH
4224: CALL_OW 325
4228: IFFALSE 4252
4230: PUSH
4231: LD_VAR 0 10
4235: PPUSH
4236: CALL_OW 255
4240: PPUSH
4241: LD_VAR 0 13
4245: PPUSH
4246: CALL_OW 325
4250: NOT
4251: AND
4252: IFFALSE 4281
// missile := Replace ( missile , missile + 1 , 3 ) ;
4254: LD_ADDR_VAR 0 14
4258: PUSH
4259: LD_VAR 0 14
4263: PPUSH
4264: LD_VAR 0 14
4268: PUSH
4269: LD_INT 1
4271: PLUS
4272: PPUSH
4273: LD_INT 3
4275: PPUSH
4276: CALL_OW 1
4280: ST_TO_ADDR
// if missile < 2 then
4281: LD_VAR 0 14
4285: PUSH
4286: LD_INT 2
4288: LESS
4289: IFFALSE 4293
// exit ;
4291: GO 4515
// x := GetX ( enemy ) ;
4293: LD_ADDR_VAR 0 4
4297: PUSH
4298: LD_VAR 0 10
4302: PPUSH
4303: CALL_OW 250
4307: ST_TO_ADDR
// y := GetY ( enemy ) ;
4308: LD_ADDR_VAR 0 5
4312: PUSH
4313: LD_VAR 0 10
4317: PPUSH
4318: CALL_OW 251
4322: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4323: LD_ADDR_VAR 0 6
4327: PUSH
4328: LD_VAR 0 4
4332: PUSH
4333: LD_INT 1
4335: NEG
4336: PPUSH
4337: LD_INT 1
4339: PPUSH
4340: CALL_OW 12
4344: PLUS
4345: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4346: LD_ADDR_VAR 0 7
4350: PUSH
4351: LD_VAR 0 5
4355: PUSH
4356: LD_INT 1
4358: NEG
4359: PPUSH
4360: LD_INT 1
4362: PPUSH
4363: CALL_OW 12
4367: PLUS
4368: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4369: LD_VAR 0 6
4373: PPUSH
4374: LD_VAR 0 7
4378: PPUSH
4379: CALL_OW 488
4383: NOT
4384: IFFALSE 4406
// begin _x := x ;
4386: LD_ADDR_VAR 0 6
4390: PUSH
4391: LD_VAR 0 4
4395: ST_TO_ADDR
// _y := y ;
4396: LD_ADDR_VAR 0 7
4400: PUSH
4401: LD_VAR 0 5
4405: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4406: LD_ADDR_VAR 0 3
4410: PUSH
4411: LD_INT 1
4413: PPUSH
4414: LD_VAR 0 14
4418: PPUSH
4419: CALL_OW 12
4423: ST_TO_ADDR
// case i of 1 :
4424: LD_VAR 0 3
4428: PUSH
4429: LD_INT 1
4431: DOUBLE
4432: EQUAL
4433: IFTRUE 4437
4435: GO 4454
4437: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4438: LD_VAR 0 1
4442: PPUSH
4443: LD_VAR 0 10
4447: PPUSH
4448: CALL_OW 115
4452: GO 4515
4454: LD_INT 2
4456: DOUBLE
4457: EQUAL
4458: IFTRUE 4462
4460: GO 4484
4462: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4463: LD_VAR 0 1
4467: PPUSH
4468: LD_VAR 0 6
4472: PPUSH
4473: LD_VAR 0 7
4477: PPUSH
4478: CALL_OW 153
4482: GO 4515
4484: LD_INT 3
4486: DOUBLE
4487: EQUAL
4488: IFTRUE 4492
4490: GO 4514
4492: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4493: LD_VAR 0 1
4497: PPUSH
4498: LD_VAR 0 6
4502: PPUSH
4503: LD_VAR 0 7
4507: PPUSH
4508: CALL_OW 154
4512: GO 4515
4514: POP
// end ;
4515: LD_VAR 0 2
4519: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4520: LD_INT 0
4522: PPUSH
4523: PPUSH
4524: PPUSH
4525: PPUSH
4526: PPUSH
4527: PPUSH
// if not unit or not building then
4528: LD_VAR 0 1
4532: NOT
4533: IFTRUE 4542
4535: PUSH
4536: LD_VAR 0 2
4540: NOT
4541: OR
4542: IFFALSE 4546
// exit ;
4544: GO 4704
// x := GetX ( building ) ;
4546: LD_ADDR_VAR 0 5
4550: PUSH
4551: LD_VAR 0 2
4555: PPUSH
4556: CALL_OW 250
4560: ST_TO_ADDR
// y := GetY ( building ) ;
4561: LD_ADDR_VAR 0 6
4565: PUSH
4566: LD_VAR 0 2
4570: PPUSH
4571: CALL_OW 251
4575: ST_TO_ADDR
// for i := 0 to 5 do
4576: LD_ADDR_VAR 0 4
4580: PUSH
4581: DOUBLE
4582: LD_INT 0
4584: DEC
4585: ST_TO_ADDR
4586: LD_INT 5
4588: PUSH
4589: FOR_TO
4590: IFFALSE 4702
// begin _x := ShiftX ( x , i , 3 ) ;
4592: LD_ADDR_VAR 0 7
4596: PUSH
4597: LD_VAR 0 5
4601: PPUSH
4602: LD_VAR 0 4
4606: PPUSH
4607: LD_INT 3
4609: PPUSH
4610: CALL_OW 272
4614: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4615: LD_ADDR_VAR 0 8
4619: PUSH
4620: LD_VAR 0 6
4624: PPUSH
4625: LD_VAR 0 4
4629: PPUSH
4630: LD_INT 3
4632: PPUSH
4633: CALL_OW 273
4637: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4638: LD_VAR 0 7
4642: PPUSH
4643: LD_VAR 0 8
4647: PPUSH
4648: CALL_OW 488
4652: NOT
4653: IFFALSE 4657
// continue ;
4655: GO 4589
// if HexInfo ( _x , _y ) = 0 then
4657: LD_VAR 0 7
4661: PPUSH
4662: LD_VAR 0 8
4666: PPUSH
4667: CALL_OW 428
4671: PUSH
4672: LD_INT 0
4674: EQUAL
4675: IFFALSE 4700
// begin ComMoveXY ( unit , _x , _y ) ;
4677: LD_VAR 0 1
4681: PPUSH
4682: LD_VAR 0 7
4686: PPUSH
4687: LD_VAR 0 8
4691: PPUSH
4692: CALL_OW 111
// exit ;
4696: POP
4697: POP
4698: GO 4704
// end ; end ;
4700: GO 4589
4702: POP
4703: POP
// end ;
4704: LD_VAR 0 3
4708: RET
// export function ScanBase ( side , base_area ) ; begin
4709: LD_INT 0
4711: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4712: LD_ADDR_VAR 0 3
4716: PUSH
4717: LD_VAR 0 2
4721: PPUSH
4722: LD_INT 81
4724: PUSH
4725: LD_VAR 0 1
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PPUSH
4734: CALL_OW 70
4738: ST_TO_ADDR
// end ;
4739: LD_VAR 0 3
4743: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4744: LD_INT 0
4746: PPUSH
4747: PPUSH
4748: PPUSH
4749: PPUSH
// result := false ;
4750: LD_ADDR_VAR 0 2
4754: PUSH
4755: LD_INT 0
4757: ST_TO_ADDR
// side := GetSide ( unit ) ;
4758: LD_ADDR_VAR 0 3
4762: PUSH
4763: LD_VAR 0 1
4767: PPUSH
4768: CALL_OW 255
4772: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4773: LD_ADDR_VAR 0 4
4777: PUSH
4778: LD_VAR 0 1
4782: PPUSH
4783: CALL_OW 248
4787: ST_TO_ADDR
// case nat of 1 :
4788: LD_VAR 0 4
4792: PUSH
4793: LD_INT 1
4795: DOUBLE
4796: EQUAL
4797: IFTRUE 4801
4799: GO 4812
4801: POP
// tech := tech_lassight ; 2 :
4802: LD_ADDR_VAR 0 5
4806: PUSH
4807: LD_INT 12
4809: ST_TO_ADDR
4810: GO 4851
4812: LD_INT 2
4814: DOUBLE
4815: EQUAL
4816: IFTRUE 4820
4818: GO 4831
4820: POP
// tech := tech_mortar ; 3 :
4821: LD_ADDR_VAR 0 5
4825: PUSH
4826: LD_INT 41
4828: ST_TO_ADDR
4829: GO 4851
4831: LD_INT 3
4833: DOUBLE
4834: EQUAL
4835: IFTRUE 4839
4837: GO 4850
4839: POP
// tech := tech_bazooka ; end ;
4840: LD_ADDR_VAR 0 5
4844: PUSH
4845: LD_INT 44
4847: ST_TO_ADDR
4848: GO 4851
4850: POP
// if Researched ( side , tech ) then
4851: LD_VAR 0 3
4855: PPUSH
4856: LD_VAR 0 5
4860: PPUSH
4861: CALL_OW 325
4865: IFFALSE 4892
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4867: LD_ADDR_VAR 0 2
4871: PUSH
4872: LD_INT 5
4874: PUSH
4875: LD_INT 8
4877: PUSH
4878: LD_INT 9
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 4
4890: ARRAY
4891: ST_TO_ADDR
// end ;
4892: LD_VAR 0 2
4896: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4897: LD_INT 0
4899: PPUSH
4900: PPUSH
4901: PPUSH
// if not mines then
4902: LD_VAR 0 2
4906: NOT
4907: IFFALSE 4911
// exit ;
4909: GO 5055
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4911: LD_ADDR_VAR 0 5
4915: PUSH
4916: LD_INT 81
4918: PUSH
4919: LD_VAR 0 1
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 3
4930: PUSH
4931: LD_INT 21
4933: PUSH
4934: LD_INT 3
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PPUSH
4949: CALL_OW 69
4953: ST_TO_ADDR
// for i in mines do
4954: LD_ADDR_VAR 0 4
4958: PUSH
4959: LD_VAR 0 2
4963: PUSH
4964: FOR_IN
4965: IFFALSE 5053
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4967: LD_VAR 0 4
4971: PUSH
4972: LD_INT 1
4974: ARRAY
4975: PPUSH
4976: LD_VAR 0 4
4980: PUSH
4981: LD_INT 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 458
4989: NOT
4990: IFFALSE 4994
// continue ;
4992: GO 4964
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4994: LD_VAR 0 4
4998: PUSH
4999: LD_INT 1
5001: ARRAY
5002: PPUSH
5003: LD_VAR 0 4
5007: PUSH
5008: LD_INT 2
5010: ARRAY
5011: PPUSH
5012: CALL_OW 428
5016: PUSH
5017: LD_VAR 0 5
5021: IN
5022: IFFALSE 5051
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5024: LD_VAR 0 4
5028: PUSH
5029: LD_INT 1
5031: ARRAY
5032: PPUSH
5033: LD_VAR 0 4
5037: PUSH
5038: LD_INT 2
5040: ARRAY
5041: PPUSH
5042: LD_VAR 0 1
5046: PPUSH
5047: CALL_OW 456
// end ;
5051: GO 4964
5053: POP
5054: POP
// end ;
5055: LD_VAR 0 3
5059: RET
// export function Count ( array ) ; begin
5060: LD_INT 0
5062: PPUSH
// result := array + 0 ;
5063: LD_ADDR_VAR 0 2
5067: PUSH
5068: LD_VAR 0 1
5072: PUSH
5073: LD_INT 0
5075: PLUS
5076: ST_TO_ADDR
// end ;
5077: LD_VAR 0 2
5081: RET
// export function IsEmpty ( building ) ; begin
5082: LD_INT 0
5084: PPUSH
// if not building then
5085: LD_VAR 0 1
5089: NOT
5090: IFFALSE 5094
// exit ;
5092: GO 5137
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5094: LD_ADDR_VAR 0 2
5098: PUSH
5099: LD_VAR 0 1
5103: PUSH
5104: LD_INT 22
5106: PUSH
5107: LD_VAR 0 1
5111: PPUSH
5112: CALL_OW 255
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: PUSH
5121: LD_INT 58
5123: PUSH
5124: EMPTY
5125: LIST
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL_OW 69
5135: IN
5136: ST_TO_ADDR
// end ;
5137: LD_VAR 0 2
5141: RET
// export function IsNotFull ( building ) ; var places ; begin
5142: LD_INT 0
5144: PPUSH
5145: PPUSH
// if not building then
5146: LD_VAR 0 1
5150: NOT
5151: IFFALSE 5155
// exit ;
5153: GO 5183
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5155: LD_ADDR_VAR 0 2
5159: PUSH
5160: LD_VAR 0 1
5164: PPUSH
5165: LD_INT 3
5167: PUSH
5168: LD_INT 62
5170: PUSH
5171: EMPTY
5172: LIST
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: PPUSH
5178: CALL_OW 72
5182: ST_TO_ADDR
// end ;
5183: LD_VAR 0 2
5187: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5188: LD_INT 0
5190: PPUSH
5191: PPUSH
5192: PPUSH
5193: PPUSH
// tmp := [ ] ;
5194: LD_ADDR_VAR 0 3
5198: PUSH
5199: EMPTY
5200: ST_TO_ADDR
// list := [ ] ;
5201: LD_ADDR_VAR 0 5
5205: PUSH
5206: EMPTY
5207: ST_TO_ADDR
// for i = 16 to 25 do
5208: LD_ADDR_VAR 0 4
5212: PUSH
5213: DOUBLE
5214: LD_INT 16
5216: DEC
5217: ST_TO_ADDR
5218: LD_INT 25
5220: PUSH
5221: FOR_TO
5222: IFFALSE 5295
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5224: LD_ADDR_VAR 0 3
5228: PUSH
5229: LD_VAR 0 3
5233: PUSH
5234: LD_INT 22
5236: PUSH
5237: LD_VAR 0 1
5241: PPUSH
5242: CALL_OW 255
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 91
5253: PUSH
5254: LD_VAR 0 1
5258: PUSH
5259: LD_INT 6
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: LIST
5266: PUSH
5267: LD_INT 30
5269: PUSH
5270: LD_VAR 0 4
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: LIST
5283: PUSH
5284: EMPTY
5285: LIST
5286: PPUSH
5287: CALL_OW 69
5291: ADD
5292: ST_TO_ADDR
5293: GO 5221
5295: POP
5296: POP
// for i = 1 to tmp do
5297: LD_ADDR_VAR 0 4
5301: PUSH
5302: DOUBLE
5303: LD_INT 1
5305: DEC
5306: ST_TO_ADDR
5307: LD_VAR 0 3
5311: PUSH
5312: FOR_TO
5313: IFFALSE 5401
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5315: LD_ADDR_VAR 0 5
5319: PUSH
5320: LD_VAR 0 5
5324: PUSH
5325: LD_VAR 0 3
5329: PUSH
5330: LD_VAR 0 4
5334: ARRAY
5335: PPUSH
5336: CALL_OW 266
5340: PUSH
5341: LD_VAR 0 3
5345: PUSH
5346: LD_VAR 0 4
5350: ARRAY
5351: PPUSH
5352: CALL_OW 250
5356: PUSH
5357: LD_VAR 0 3
5361: PUSH
5362: LD_VAR 0 4
5366: ARRAY
5367: PPUSH
5368: CALL_OW 251
5372: PUSH
5373: LD_VAR 0 3
5377: PUSH
5378: LD_VAR 0 4
5382: ARRAY
5383: PPUSH
5384: CALL_OW 254
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: PUSH
5395: EMPTY
5396: LIST
5397: ADD
5398: ST_TO_ADDR
5399: GO 5312
5401: POP
5402: POP
// result := list ;
5403: LD_ADDR_VAR 0 2
5407: PUSH
5408: LD_VAR 0 5
5412: ST_TO_ADDR
// end ;
5413: LD_VAR 0 2
5417: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5418: LD_INT 0
5420: PPUSH
5421: PPUSH
5422: PPUSH
5423: PPUSH
5424: PPUSH
5425: PPUSH
5426: PPUSH
// if not factory then
5427: LD_VAR 0 1
5431: NOT
5432: IFFALSE 5436
// exit ;
5434: GO 6039
// if control = control_apeman then
5436: LD_VAR 0 4
5440: PUSH
5441: LD_INT 5
5443: EQUAL
5444: IFFALSE 5553
// begin tmp := UnitsInside ( factory ) ;
5446: LD_ADDR_VAR 0 8
5450: PUSH
5451: LD_VAR 0 1
5455: PPUSH
5456: CALL_OW 313
5460: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5461: LD_VAR 0 8
5465: PPUSH
5466: LD_INT 25
5468: PUSH
5469: LD_INT 12
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PPUSH
5476: CALL_OW 72
5480: NOT
5481: IFFALSE 5491
// control := control_manual ;
5483: LD_ADDR_VAR 0 4
5487: PUSH
5488: LD_INT 1
5490: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5491: LD_ADDR_VAR 0 8
5495: PUSH
5496: LD_VAR 0 1
5500: PPUSH
5501: CALL 5188 0 1
5505: ST_TO_ADDR
// if tmp then
5506: LD_VAR 0 8
5510: IFFALSE 5553
// begin for i in tmp do
5512: LD_ADDR_VAR 0 7
5516: PUSH
5517: LD_VAR 0 8
5521: PUSH
5522: FOR_IN
5523: IFFALSE 5551
// if i [ 1 ] = b_ext_radio then
5525: LD_VAR 0 7
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PUSH
5534: LD_INT 22
5536: EQUAL
5537: IFFALSE 5549
// begin control := control_remote ;
5539: LD_ADDR_VAR 0 4
5543: PUSH
5544: LD_INT 2
5546: ST_TO_ADDR
// break ;
5547: GO 5551
// end ;
5549: GO 5522
5551: POP
5552: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5553: LD_VAR 0 1
5557: PPUSH
5558: LD_VAR 0 2
5562: PPUSH
5563: LD_VAR 0 3
5567: PPUSH
5568: LD_VAR 0 4
5572: PPUSH
5573: LD_VAR 0 5
5577: PPUSH
5578: CALL_OW 448
5582: IFFALSE 5617
// begin result := [ chassis , engine , control , weapon ] ;
5584: LD_ADDR_VAR 0 6
5588: PUSH
5589: LD_VAR 0 2
5593: PUSH
5594: LD_VAR 0 3
5598: PUSH
5599: LD_VAR 0 4
5603: PUSH
5604: LD_VAR 0 5
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: ST_TO_ADDR
// exit ;
5615: GO 6039
// end ; _chassis := AvailableChassisList ( factory ) ;
5617: LD_ADDR_VAR 0 9
5621: PUSH
5622: LD_VAR 0 1
5626: PPUSH
5627: CALL_OW 475
5631: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5632: LD_ADDR_VAR 0 11
5636: PUSH
5637: LD_VAR 0 1
5641: PPUSH
5642: CALL_OW 476
5646: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5647: LD_ADDR_VAR 0 12
5651: PUSH
5652: LD_VAR 0 1
5656: PPUSH
5657: CALL_OW 477
5661: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5662: LD_ADDR_VAR 0 10
5666: PUSH
5667: LD_VAR 0 1
5671: PPUSH
5672: CALL_OW 478
5676: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5677: LD_VAR 0 9
5681: NOT
5682: IFTRUE 5691
5684: PUSH
5685: LD_VAR 0 11
5689: NOT
5690: OR
5691: IFTRUE 5700
5693: PUSH
5694: LD_VAR 0 12
5698: NOT
5699: OR
5700: IFTRUE 5709
5702: PUSH
5703: LD_VAR 0 10
5707: NOT
5708: OR
5709: IFFALSE 5744
// begin result := [ chassis , engine , control , weapon ] ;
5711: LD_ADDR_VAR 0 6
5715: PUSH
5716: LD_VAR 0 2
5720: PUSH
5721: LD_VAR 0 3
5725: PUSH
5726: LD_VAR 0 4
5730: PUSH
5731: LD_VAR 0 5
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: ST_TO_ADDR
// exit ;
5742: GO 6039
// end ; if not chassis in _chassis then
5744: LD_VAR 0 2
5748: PUSH
5749: LD_VAR 0 9
5753: IN
5754: NOT
5755: IFFALSE 5781
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5757: LD_ADDR_VAR 0 2
5761: PUSH
5762: LD_VAR 0 9
5766: PUSH
5767: LD_INT 1
5769: PPUSH
5770: LD_VAR 0 9
5774: PPUSH
5775: CALL_OW 12
5779: ARRAY
5780: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5781: LD_VAR 0 2
5785: PPUSH
5786: LD_VAR 0 3
5790: PPUSH
5791: CALL 6044 0 2
5795: NOT
5796: IFFALSE 5857
// repeat engine := _engine [ 1 ] ;
5798: LD_ADDR_VAR 0 3
5802: PUSH
5803: LD_VAR 0 11
5807: PUSH
5808: LD_INT 1
5810: ARRAY
5811: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5812: LD_ADDR_VAR 0 11
5816: PUSH
5817: LD_VAR 0 11
5821: PPUSH
5822: LD_INT 1
5824: PPUSH
5825: CALL_OW 3
5829: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5830: LD_VAR 0 2
5834: PPUSH
5835: LD_VAR 0 3
5839: PPUSH
5840: CALL 6044 0 2
5844: IFTRUE 5855
5846: PUSH
5847: LD_VAR 0 11
5851: PUSH
5852: EMPTY
5853: EQUAL
5854: OR
5855: IFFALSE 5798
// if not control in _control then
5857: LD_VAR 0 4
5861: PUSH
5862: LD_VAR 0 12
5866: IN
5867: NOT
5868: IFFALSE 5894
// control := _control [ rand ( 1 , _control ) ] ;
5870: LD_ADDR_VAR 0 4
5874: PUSH
5875: LD_VAR 0 12
5879: PUSH
5880: LD_INT 1
5882: PPUSH
5883: LD_VAR 0 12
5887: PPUSH
5888: CALL_OW 12
5892: ARRAY
5893: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5894: LD_VAR 0 2
5898: PPUSH
5899: LD_VAR 0 5
5903: PPUSH
5904: CALL 6266 0 2
5908: NOT
5909: IFFALSE 5970
// repeat weapon := _weapon [ 1 ] ;
5911: LD_ADDR_VAR 0 5
5915: PUSH
5916: LD_VAR 0 10
5920: PUSH
5921: LD_INT 1
5923: ARRAY
5924: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5925: LD_ADDR_VAR 0 10
5929: PUSH
5930: LD_VAR 0 10
5934: PPUSH
5935: LD_INT 1
5937: PPUSH
5938: CALL_OW 3
5942: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5943: LD_VAR 0 2
5947: PPUSH
5948: LD_VAR 0 5
5952: PPUSH
5953: CALL 6266 0 2
5957: IFTRUE 5968
5959: PUSH
5960: LD_VAR 0 10
5964: PUSH
5965: EMPTY
5966: EQUAL
5967: OR
5968: IFFALSE 5911
// result := [ ] ;
5970: LD_ADDR_VAR 0 6
5974: PUSH
5975: EMPTY
5976: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5977: LD_VAR 0 1
5981: PPUSH
5982: LD_VAR 0 2
5986: PPUSH
5987: LD_VAR 0 3
5991: PPUSH
5992: LD_VAR 0 4
5996: PPUSH
5997: LD_VAR 0 5
6001: PPUSH
6002: CALL_OW 448
6006: IFFALSE 6039
// result := [ chassis , engine , control , weapon ] ;
6008: LD_ADDR_VAR 0 6
6012: PUSH
6013: LD_VAR 0 2
6017: PUSH
6018: LD_VAR 0 3
6022: PUSH
6023: LD_VAR 0 4
6027: PUSH
6028: LD_VAR 0 5
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: ST_TO_ADDR
// end ;
6039: LD_VAR 0 6
6043: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6044: LD_INT 0
6046: PPUSH
// if not chassis or not engine then
6047: LD_VAR 0 1
6051: NOT
6052: IFTRUE 6061
6054: PUSH
6055: LD_VAR 0 2
6059: NOT
6060: OR
6061: IFFALSE 6065
// exit ;
6063: GO 6261
// case engine of engine_solar :
6065: LD_VAR 0 2
6069: PUSH
6070: LD_INT 2
6072: DOUBLE
6073: EQUAL
6074: IFTRUE 6078
6076: GO 6116
6078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6079: LD_ADDR_VAR 0 3
6083: PUSH
6084: LD_INT 11
6086: PUSH
6087: LD_INT 12
6089: PUSH
6090: LD_INT 13
6092: PUSH
6093: LD_INT 14
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: LD_INT 2
6101: PUSH
6102: LD_INT 3
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: ST_TO_ADDR
6114: GO 6245
6116: LD_INT 1
6118: DOUBLE
6119: EQUAL
6120: IFTRUE 6124
6122: GO 6186
6124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6125: LD_ADDR_VAR 0 3
6129: PUSH
6130: LD_INT 11
6132: PUSH
6133: LD_INT 12
6135: PUSH
6136: LD_INT 13
6138: PUSH
6139: LD_INT 14
6141: PUSH
6142: LD_INT 1
6144: PUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: LD_INT 4
6153: PUSH
6154: LD_INT 5
6156: PUSH
6157: LD_INT 21
6159: PUSH
6160: LD_INT 23
6162: PUSH
6163: LD_INT 22
6165: PUSH
6166: LD_INT 24
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: ST_TO_ADDR
6184: GO 6245
6186: LD_INT 3
6188: DOUBLE
6189: EQUAL
6190: IFTRUE 6194
6192: GO 6244
6194: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6195: LD_ADDR_VAR 0 3
6199: PUSH
6200: LD_INT 13
6202: PUSH
6203: LD_INT 14
6205: PUSH
6206: LD_INT 2
6208: PUSH
6209: LD_INT 3
6211: PUSH
6212: LD_INT 4
6214: PUSH
6215: LD_INT 5
6217: PUSH
6218: LD_INT 21
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_INT 23
6226: PUSH
6227: LD_INT 24
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: ST_TO_ADDR
6242: GO 6245
6244: POP
// result := ( chassis in result ) ;
6245: LD_ADDR_VAR 0 3
6249: PUSH
6250: LD_VAR 0 1
6254: PUSH
6255: LD_VAR 0 3
6259: IN
6260: ST_TO_ADDR
// end ;
6261: LD_VAR 0 3
6265: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6266: LD_INT 0
6268: PPUSH
// if not chassis or not weapon then
6269: LD_VAR 0 1
6273: NOT
6274: IFTRUE 6283
6276: PUSH
6277: LD_VAR 0 2
6281: NOT
6282: OR
6283: IFFALSE 6287
// exit ;
6285: GO 7381
// case weapon of us_machine_gun :
6287: LD_VAR 0 2
6291: PUSH
6292: LD_INT 2
6294: DOUBLE
6295: EQUAL
6296: IFTRUE 6300
6298: GO 6330
6300: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6301: LD_ADDR_VAR 0 3
6305: PUSH
6306: LD_INT 1
6308: PUSH
6309: LD_INT 2
6311: PUSH
6312: LD_INT 3
6314: PUSH
6315: LD_INT 4
6317: PUSH
6318: LD_INT 5
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: ST_TO_ADDR
6328: GO 7365
6330: LD_INT 3
6332: DOUBLE
6333: EQUAL
6334: IFTRUE 6338
6336: GO 6368
6338: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6339: LD_ADDR_VAR 0 3
6343: PUSH
6344: LD_INT 1
6346: PUSH
6347: LD_INT 2
6349: PUSH
6350: LD_INT 3
6352: PUSH
6353: LD_INT 4
6355: PUSH
6356: LD_INT 5
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: ST_TO_ADDR
6366: GO 7365
6368: LD_INT 11
6370: DOUBLE
6371: EQUAL
6372: IFTRUE 6376
6374: GO 6406
6376: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6377: LD_ADDR_VAR 0 3
6381: PUSH
6382: LD_INT 1
6384: PUSH
6385: LD_INT 2
6387: PUSH
6388: LD_INT 3
6390: PUSH
6391: LD_INT 4
6393: PUSH
6394: LD_INT 5
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: ST_TO_ADDR
6404: GO 7365
6406: LD_INT 4
6408: DOUBLE
6409: EQUAL
6410: IFTRUE 6414
6412: GO 6440
6414: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6415: LD_ADDR_VAR 0 3
6419: PUSH
6420: LD_INT 2
6422: PUSH
6423: LD_INT 3
6425: PUSH
6426: LD_INT 4
6428: PUSH
6429: LD_INT 5
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: ST_TO_ADDR
6438: GO 7365
6440: LD_INT 5
6442: DOUBLE
6443: EQUAL
6444: IFTRUE 6448
6446: GO 6474
6448: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6449: LD_ADDR_VAR 0 3
6453: PUSH
6454: LD_INT 2
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: LD_INT 4
6462: PUSH
6463: LD_INT 5
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: ST_TO_ADDR
6472: GO 7365
6474: LD_INT 9
6476: DOUBLE
6477: EQUAL
6478: IFTRUE 6482
6480: GO 6508
6482: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6483: LD_ADDR_VAR 0 3
6487: PUSH
6488: LD_INT 2
6490: PUSH
6491: LD_INT 3
6493: PUSH
6494: LD_INT 4
6496: PUSH
6497: LD_INT 5
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: ST_TO_ADDR
6506: GO 7365
6508: LD_INT 7
6510: DOUBLE
6511: EQUAL
6512: IFTRUE 6516
6514: GO 6542
6516: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6517: LD_ADDR_VAR 0 3
6521: PUSH
6522: LD_INT 2
6524: PUSH
6525: LD_INT 3
6527: PUSH
6528: LD_INT 4
6530: PUSH
6531: LD_INT 5
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: ST_TO_ADDR
6540: GO 7365
6542: LD_INT 12
6544: DOUBLE
6545: EQUAL
6546: IFTRUE 6550
6548: GO 6576
6550: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6551: LD_ADDR_VAR 0 3
6555: PUSH
6556: LD_INT 2
6558: PUSH
6559: LD_INT 3
6561: PUSH
6562: LD_INT 4
6564: PUSH
6565: LD_INT 5
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: ST_TO_ADDR
6574: GO 7365
6576: LD_INT 13
6578: DOUBLE
6579: EQUAL
6580: IFTRUE 6584
6582: GO 6610
6584: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6585: LD_ADDR_VAR 0 3
6589: PUSH
6590: LD_INT 2
6592: PUSH
6593: LD_INT 3
6595: PUSH
6596: LD_INT 4
6598: PUSH
6599: LD_INT 5
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: ST_TO_ADDR
6608: GO 7365
6610: LD_INT 14
6612: DOUBLE
6613: EQUAL
6614: IFTRUE 6618
6616: GO 6636
6618: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6619: LD_ADDR_VAR 0 3
6623: PUSH
6624: LD_INT 4
6626: PUSH
6627: LD_INT 5
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: ST_TO_ADDR
6634: GO 7365
6636: LD_INT 6
6638: DOUBLE
6639: EQUAL
6640: IFTRUE 6644
6642: GO 6662
6644: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6645: LD_ADDR_VAR 0 3
6649: PUSH
6650: LD_INT 4
6652: PUSH
6653: LD_INT 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: ST_TO_ADDR
6660: GO 7365
6662: LD_INT 10
6664: DOUBLE
6665: EQUAL
6666: IFTRUE 6670
6668: GO 6688
6670: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6671: LD_ADDR_VAR 0 3
6675: PUSH
6676: LD_INT 4
6678: PUSH
6679: LD_INT 5
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: ST_TO_ADDR
6686: GO 7365
6688: LD_INT 22
6690: DOUBLE
6691: EQUAL
6692: IFTRUE 6696
6694: GO 6722
6696: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6697: LD_ADDR_VAR 0 3
6701: PUSH
6702: LD_INT 11
6704: PUSH
6705: LD_INT 12
6707: PUSH
6708: LD_INT 13
6710: PUSH
6711: LD_INT 14
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: ST_TO_ADDR
6720: GO 7365
6722: LD_INT 23
6724: DOUBLE
6725: EQUAL
6726: IFTRUE 6730
6728: GO 6756
6730: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6731: LD_ADDR_VAR 0 3
6735: PUSH
6736: LD_INT 11
6738: PUSH
6739: LD_INT 12
6741: PUSH
6742: LD_INT 13
6744: PUSH
6745: LD_INT 14
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: ST_TO_ADDR
6754: GO 7365
6756: LD_INT 24
6758: DOUBLE
6759: EQUAL
6760: IFTRUE 6764
6762: GO 6790
6764: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6765: LD_ADDR_VAR 0 3
6769: PUSH
6770: LD_INT 11
6772: PUSH
6773: LD_INT 12
6775: PUSH
6776: LD_INT 13
6778: PUSH
6779: LD_INT 14
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: ST_TO_ADDR
6788: GO 7365
6790: LD_INT 30
6792: DOUBLE
6793: EQUAL
6794: IFTRUE 6798
6796: GO 6824
6798: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6799: LD_ADDR_VAR 0 3
6803: PUSH
6804: LD_INT 11
6806: PUSH
6807: LD_INT 12
6809: PUSH
6810: LD_INT 13
6812: PUSH
6813: LD_INT 14
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: ST_TO_ADDR
6822: GO 7365
6824: LD_INT 25
6826: DOUBLE
6827: EQUAL
6828: IFTRUE 6832
6830: GO 6850
6832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6833: LD_ADDR_VAR 0 3
6837: PUSH
6838: LD_INT 13
6840: PUSH
6841: LD_INT 14
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: ST_TO_ADDR
6848: GO 7365
6850: LD_INT 27
6852: DOUBLE
6853: EQUAL
6854: IFTRUE 6858
6856: GO 6876
6858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6859: LD_ADDR_VAR 0 3
6863: PUSH
6864: LD_INT 13
6866: PUSH
6867: LD_INT 14
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: ST_TO_ADDR
6874: GO 7365
6876: LD_INT 92
6878: DOUBLE
6879: EQUAL
6880: IFTRUE 6884
6882: GO 6910
6884: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6885: LD_ADDR_VAR 0 3
6889: PUSH
6890: LD_INT 11
6892: PUSH
6893: LD_INT 12
6895: PUSH
6896: LD_INT 13
6898: PUSH
6899: LD_INT 14
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: ST_TO_ADDR
6908: GO 7365
6910: LD_INT 28
6912: DOUBLE
6913: EQUAL
6914: IFTRUE 6918
6916: GO 6936
6918: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6919: LD_ADDR_VAR 0 3
6923: PUSH
6924: LD_INT 13
6926: PUSH
6927: LD_INT 14
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: ST_TO_ADDR
6934: GO 7365
6936: LD_INT 29
6938: DOUBLE
6939: EQUAL
6940: IFTRUE 6944
6942: GO 6962
6944: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6945: LD_ADDR_VAR 0 3
6949: PUSH
6950: LD_INT 13
6952: PUSH
6953: LD_INT 14
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: ST_TO_ADDR
6960: GO 7365
6962: LD_INT 31
6964: DOUBLE
6965: EQUAL
6966: IFTRUE 6970
6968: GO 6988
6970: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6971: LD_ADDR_VAR 0 3
6975: PUSH
6976: LD_INT 13
6978: PUSH
6979: LD_INT 14
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: ST_TO_ADDR
6986: GO 7365
6988: LD_INT 26
6990: DOUBLE
6991: EQUAL
6992: IFTRUE 6996
6994: GO 7014
6996: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6997: LD_ADDR_VAR 0 3
7001: PUSH
7002: LD_INT 13
7004: PUSH
7005: LD_INT 14
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: ST_TO_ADDR
7012: GO 7365
7014: LD_INT 42
7016: DOUBLE
7017: EQUAL
7018: IFTRUE 7022
7020: GO 7048
7022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7023: LD_ADDR_VAR 0 3
7027: PUSH
7028: LD_INT 21
7030: PUSH
7031: LD_INT 22
7033: PUSH
7034: LD_INT 23
7036: PUSH
7037: LD_INT 24
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: ST_TO_ADDR
7046: GO 7365
7048: LD_INT 43
7050: DOUBLE
7051: EQUAL
7052: IFTRUE 7056
7054: GO 7082
7056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7057: LD_ADDR_VAR 0 3
7061: PUSH
7062: LD_INT 21
7064: PUSH
7065: LD_INT 22
7067: PUSH
7068: LD_INT 23
7070: PUSH
7071: LD_INT 24
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: ST_TO_ADDR
7080: GO 7365
7082: LD_INT 44
7084: DOUBLE
7085: EQUAL
7086: IFTRUE 7090
7088: GO 7116
7090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7091: LD_ADDR_VAR 0 3
7095: PUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 22
7101: PUSH
7102: LD_INT 23
7104: PUSH
7105: LD_INT 24
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: ST_TO_ADDR
7114: GO 7365
7116: LD_INT 45
7118: DOUBLE
7119: EQUAL
7120: IFTRUE 7124
7122: GO 7150
7124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7125: LD_ADDR_VAR 0 3
7129: PUSH
7130: LD_INT 21
7132: PUSH
7133: LD_INT 22
7135: PUSH
7136: LD_INT 23
7138: PUSH
7139: LD_INT 24
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: ST_TO_ADDR
7148: GO 7365
7150: LD_INT 49
7152: DOUBLE
7153: EQUAL
7154: IFTRUE 7158
7156: GO 7184
7158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7159: LD_ADDR_VAR 0 3
7163: PUSH
7164: LD_INT 21
7166: PUSH
7167: LD_INT 22
7169: PUSH
7170: LD_INT 23
7172: PUSH
7173: LD_INT 24
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: ST_TO_ADDR
7182: GO 7365
7184: LD_INT 51
7186: DOUBLE
7187: EQUAL
7188: IFTRUE 7192
7190: GO 7218
7192: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7193: LD_ADDR_VAR 0 3
7197: PUSH
7198: LD_INT 21
7200: PUSH
7201: LD_INT 22
7203: PUSH
7204: LD_INT 23
7206: PUSH
7207: LD_INT 24
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: ST_TO_ADDR
7216: GO 7365
7218: LD_INT 52
7220: DOUBLE
7221: EQUAL
7222: IFTRUE 7226
7224: GO 7252
7226: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7227: LD_ADDR_VAR 0 3
7231: PUSH
7232: LD_INT 21
7234: PUSH
7235: LD_INT 22
7237: PUSH
7238: LD_INT 23
7240: PUSH
7241: LD_INT 24
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: ST_TO_ADDR
7250: GO 7365
7252: LD_INT 53
7254: DOUBLE
7255: EQUAL
7256: IFTRUE 7260
7258: GO 7278
7260: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7261: LD_ADDR_VAR 0 3
7265: PUSH
7266: LD_INT 23
7268: PUSH
7269: LD_INT 24
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: ST_TO_ADDR
7276: GO 7365
7278: LD_INT 46
7280: DOUBLE
7281: EQUAL
7282: IFTRUE 7286
7284: GO 7304
7286: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7287: LD_ADDR_VAR 0 3
7291: PUSH
7292: LD_INT 23
7294: PUSH
7295: LD_INT 24
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: ST_TO_ADDR
7302: GO 7365
7304: LD_INT 47
7306: DOUBLE
7307: EQUAL
7308: IFTRUE 7312
7310: GO 7330
7312: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
7313: LD_ADDR_VAR 0 3
7317: PUSH
7318: LD_INT 23
7320: PUSH
7321: LD_INT 24
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: ST_TO_ADDR
7328: GO 7365
7330: LD_INT 98
7332: DOUBLE
7333: EQUAL
7334: IFTRUE 7338
7336: GO 7364
7338: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7339: LD_ADDR_VAR 0 3
7343: PUSH
7344: LD_INT 21
7346: PUSH
7347: LD_INT 22
7349: PUSH
7350: LD_INT 23
7352: PUSH
7353: LD_INT 24
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: ST_TO_ADDR
7362: GO 7365
7364: POP
// result := ( chassis in result ) ;
7365: LD_ADDR_VAR 0 3
7369: PUSH
7370: LD_VAR 0 1
7374: PUSH
7375: LD_VAR 0 3
7379: IN
7380: ST_TO_ADDR
// end ;
7381: LD_VAR 0 3
7385: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7386: LD_INT 0
7388: PPUSH
7389: PPUSH
7390: PPUSH
7391: PPUSH
7392: PPUSH
7393: PPUSH
7394: PPUSH
// result := array ;
7395: LD_ADDR_VAR 0 5
7399: PUSH
7400: LD_VAR 0 1
7404: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7405: LD_VAR 0 1
7409: NOT
7410: IFTRUE 7419
7412: PUSH
7413: LD_VAR 0 2
7417: NOT
7418: OR
7419: IFTRUE 7428
7421: PUSH
7422: LD_VAR 0 3
7426: NOT
7427: OR
7428: IFTRUE 7442
7430: PUSH
7431: LD_VAR 0 2
7435: PUSH
7436: LD_VAR 0 1
7440: GREATER
7441: OR
7442: IFTRUE 7456
7444: PUSH
7445: LD_VAR 0 3
7449: PUSH
7450: LD_VAR 0 1
7454: GREATER
7455: OR
7456: IFFALSE 7460
// exit ;
7458: GO 7756
// if direction then
7460: LD_VAR 0 4
7464: IFFALSE 7528
// begin d := 1 ;
7466: LD_ADDR_VAR 0 9
7470: PUSH
7471: LD_INT 1
7473: ST_TO_ADDR
// if i_from > i_to then
7474: LD_VAR 0 2
7478: PUSH
7479: LD_VAR 0 3
7483: GREATER
7484: IFFALSE 7510
// length := ( array - i_from ) + i_to else
7486: LD_ADDR_VAR 0 11
7490: PUSH
7491: LD_VAR 0 1
7495: PUSH
7496: LD_VAR 0 2
7500: MINUS
7501: PUSH
7502: LD_VAR 0 3
7506: PLUS
7507: ST_TO_ADDR
7508: GO 7526
// length := i_to - i_from ;
7510: LD_ADDR_VAR 0 11
7514: PUSH
7515: LD_VAR 0 3
7519: PUSH
7520: LD_VAR 0 2
7524: MINUS
7525: ST_TO_ADDR
// end else
7526: GO 7589
// begin d := - 1 ;
7528: LD_ADDR_VAR 0 9
7532: PUSH
7533: LD_INT 1
7535: NEG
7536: ST_TO_ADDR
// if i_from > i_to then
7537: LD_VAR 0 2
7541: PUSH
7542: LD_VAR 0 3
7546: GREATER
7547: IFFALSE 7567
// length := i_from - i_to else
7549: LD_ADDR_VAR 0 11
7553: PUSH
7554: LD_VAR 0 2
7558: PUSH
7559: LD_VAR 0 3
7563: MINUS
7564: ST_TO_ADDR
7565: GO 7589
// length := ( array - i_to ) + i_from ;
7567: LD_ADDR_VAR 0 11
7571: PUSH
7572: LD_VAR 0 1
7576: PUSH
7577: LD_VAR 0 3
7581: MINUS
7582: PUSH
7583: LD_VAR 0 2
7587: PLUS
7588: ST_TO_ADDR
// end ; if not length then
7589: LD_VAR 0 11
7593: NOT
7594: IFFALSE 7598
// exit ;
7596: GO 7756
// tmp := array ;
7598: LD_ADDR_VAR 0 10
7602: PUSH
7603: LD_VAR 0 1
7607: ST_TO_ADDR
// for i = 1 to length do
7608: LD_ADDR_VAR 0 6
7612: PUSH
7613: DOUBLE
7614: LD_INT 1
7616: DEC
7617: ST_TO_ADDR
7618: LD_VAR 0 11
7622: PUSH
7623: FOR_TO
7624: IFFALSE 7744
// begin for j = 1 to array do
7626: LD_ADDR_VAR 0 7
7630: PUSH
7631: DOUBLE
7632: LD_INT 1
7634: DEC
7635: ST_TO_ADDR
7636: LD_VAR 0 1
7640: PUSH
7641: FOR_TO
7642: IFFALSE 7730
// begin k := j + d ;
7644: LD_ADDR_VAR 0 8
7648: PUSH
7649: LD_VAR 0 7
7653: PUSH
7654: LD_VAR 0 9
7658: PLUS
7659: ST_TO_ADDR
// if k > array then
7660: LD_VAR 0 8
7664: PUSH
7665: LD_VAR 0 1
7669: GREATER
7670: IFFALSE 7680
// k := 1 ;
7672: LD_ADDR_VAR 0 8
7676: PUSH
7677: LD_INT 1
7679: ST_TO_ADDR
// if not k then
7680: LD_VAR 0 8
7684: NOT
7685: IFFALSE 7697
// k := array ;
7687: LD_ADDR_VAR 0 8
7691: PUSH
7692: LD_VAR 0 1
7696: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7697: LD_ADDR_VAR 0 10
7701: PUSH
7702: LD_VAR 0 10
7706: PPUSH
7707: LD_VAR 0 8
7711: PPUSH
7712: LD_VAR 0 1
7716: PUSH
7717: LD_VAR 0 7
7721: ARRAY
7722: PPUSH
7723: CALL_OW 1
7727: ST_TO_ADDR
// end ;
7728: GO 7641
7730: POP
7731: POP
// array := tmp ;
7732: LD_ADDR_VAR 0 1
7736: PUSH
7737: LD_VAR 0 10
7741: ST_TO_ADDR
// end ;
7742: GO 7623
7744: POP
7745: POP
// result := array ;
7746: LD_ADDR_VAR 0 5
7750: PUSH
7751: LD_VAR 0 1
7755: ST_TO_ADDR
// end ;
7756: LD_VAR 0 5
7760: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7761: LD_INT 0
7763: PPUSH
7764: PPUSH
// result := 0 ;
7765: LD_ADDR_VAR 0 3
7769: PUSH
7770: LD_INT 0
7772: ST_TO_ADDR
// if not array or not value in array then
7773: LD_VAR 0 1
7777: NOT
7778: IFTRUE 7793
7780: PUSH
7781: LD_VAR 0 2
7785: PUSH
7786: LD_VAR 0 1
7790: IN
7791: NOT
7792: OR
7793: IFFALSE 7797
// exit ;
7795: GO 7851
// for i = 1 to array do
7797: LD_ADDR_VAR 0 4
7801: PUSH
7802: DOUBLE
7803: LD_INT 1
7805: DEC
7806: ST_TO_ADDR
7807: LD_VAR 0 1
7811: PUSH
7812: FOR_TO
7813: IFFALSE 7849
// if value = array [ i ] then
7815: LD_VAR 0 2
7819: PUSH
7820: LD_VAR 0 1
7824: PUSH
7825: LD_VAR 0 4
7829: ARRAY
7830: EQUAL
7831: IFFALSE 7847
// begin result := i ;
7833: LD_ADDR_VAR 0 3
7837: PUSH
7838: LD_VAR 0 4
7842: ST_TO_ADDR
// exit ;
7843: POP
7844: POP
7845: GO 7851
// end ;
7847: GO 7812
7849: POP
7850: POP
// end ;
7851: LD_VAR 0 3
7855: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7856: LD_INT 0
7858: PPUSH
// vc_chassis := chassis ;
7859: LD_ADDR_OWVAR 37
7863: PUSH
7864: LD_VAR 0 1
7868: ST_TO_ADDR
// vc_engine := engine ;
7869: LD_ADDR_OWVAR 39
7873: PUSH
7874: LD_VAR 0 2
7878: ST_TO_ADDR
// vc_control := control ;
7879: LD_ADDR_OWVAR 38
7883: PUSH
7884: LD_VAR 0 3
7888: ST_TO_ADDR
// vc_weapon := weapon ;
7889: LD_ADDR_OWVAR 40
7893: PUSH
7894: LD_VAR 0 4
7898: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7899: LD_ADDR_OWVAR 41
7903: PUSH
7904: LD_VAR 0 5
7908: ST_TO_ADDR
// end ;
7909: LD_VAR 0 6
7913: RET
// export function WantPlant ( unit ) ; var task ; begin
7914: LD_INT 0
7916: PPUSH
7917: PPUSH
// result := false ;
7918: LD_ADDR_VAR 0 2
7922: PUSH
7923: LD_INT 0
7925: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7926: LD_ADDR_VAR 0 3
7930: PUSH
7931: LD_VAR 0 1
7935: PPUSH
7936: CALL_OW 437
7940: ST_TO_ADDR
// if task then
7941: LD_VAR 0 3
7945: IFFALSE 7973
// if task [ 1 ] [ 1 ] = p then
7947: LD_VAR 0 3
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PUSH
7956: LD_INT 1
7958: ARRAY
7959: PUSH
7960: LD_STRING p
7962: EQUAL
7963: IFFALSE 7973
// result := true ;
7965: LD_ADDR_VAR 0 2
7969: PUSH
7970: LD_INT 1
7972: ST_TO_ADDR
// end ;
7973: LD_VAR 0 2
7977: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7978: LD_INT 0
7980: PPUSH
7981: PPUSH
7982: PPUSH
7983: PPUSH
// if pos < 1 then
7984: LD_VAR 0 2
7988: PUSH
7989: LD_INT 1
7991: LESS
7992: IFFALSE 7996
// exit ;
7994: GO 8299
// if pos = 1 then
7996: LD_VAR 0 2
8000: PUSH
8001: LD_INT 1
8003: EQUAL
8004: IFFALSE 8037
// result := Replace ( arr , pos [ 1 ] , value ) else
8006: LD_ADDR_VAR 0 4
8010: PUSH
8011: LD_VAR 0 1
8015: PPUSH
8016: LD_VAR 0 2
8020: PUSH
8021: LD_INT 1
8023: ARRAY
8024: PPUSH
8025: LD_VAR 0 3
8029: PPUSH
8030: CALL_OW 1
8034: ST_TO_ADDR
8035: GO 8299
// begin tmp := arr ;
8037: LD_ADDR_VAR 0 6
8041: PUSH
8042: LD_VAR 0 1
8046: ST_TO_ADDR
// s_arr := [ tmp ] ;
8047: LD_ADDR_VAR 0 7
8051: PUSH
8052: LD_VAR 0 6
8056: PUSH
8057: EMPTY
8058: LIST
8059: ST_TO_ADDR
// for i = 1 to pos - 1 do
8060: LD_ADDR_VAR 0 5
8064: PUSH
8065: DOUBLE
8066: LD_INT 1
8068: DEC
8069: ST_TO_ADDR
8070: LD_VAR 0 2
8074: PUSH
8075: LD_INT 1
8077: MINUS
8078: PUSH
8079: FOR_TO
8080: IFFALSE 8125
// begin tmp := tmp [ pos [ i ] ] ;
8082: LD_ADDR_VAR 0 6
8086: PUSH
8087: LD_VAR 0 6
8091: PUSH
8092: LD_VAR 0 2
8096: PUSH
8097: LD_VAR 0 5
8101: ARRAY
8102: ARRAY
8103: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8104: LD_ADDR_VAR 0 7
8108: PUSH
8109: LD_VAR 0 7
8113: PUSH
8114: LD_VAR 0 6
8118: PUSH
8119: EMPTY
8120: LIST
8121: ADD
8122: ST_TO_ADDR
// end ;
8123: GO 8079
8125: POP
8126: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8127: LD_ADDR_VAR 0 6
8131: PUSH
8132: LD_VAR 0 6
8136: PPUSH
8137: LD_VAR 0 2
8141: PUSH
8142: LD_VAR 0 2
8146: ARRAY
8147: PPUSH
8148: LD_VAR 0 3
8152: PPUSH
8153: CALL_OW 1
8157: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8158: LD_ADDR_VAR 0 7
8162: PUSH
8163: LD_VAR 0 7
8167: PPUSH
8168: LD_VAR 0 7
8172: PPUSH
8173: LD_VAR 0 6
8177: PPUSH
8178: CALL_OW 1
8182: ST_TO_ADDR
// for i = s_arr downto 2 do
8183: LD_ADDR_VAR 0 5
8187: PUSH
8188: DOUBLE
8189: LD_VAR 0 7
8193: INC
8194: ST_TO_ADDR
8195: LD_INT 2
8197: PUSH
8198: FOR_DOWNTO
8199: IFFALSE 8283
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8201: LD_ADDR_VAR 0 6
8205: PUSH
8206: LD_VAR 0 7
8210: PUSH
8211: LD_VAR 0 5
8215: PUSH
8216: LD_INT 1
8218: MINUS
8219: ARRAY
8220: PPUSH
8221: LD_VAR 0 2
8225: PUSH
8226: LD_VAR 0 5
8230: PUSH
8231: LD_INT 1
8233: MINUS
8234: ARRAY
8235: PPUSH
8236: LD_VAR 0 7
8240: PUSH
8241: LD_VAR 0 5
8245: ARRAY
8246: PPUSH
8247: CALL_OW 1
8251: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8252: LD_ADDR_VAR 0 7
8256: PUSH
8257: LD_VAR 0 7
8261: PPUSH
8262: LD_VAR 0 5
8266: PUSH
8267: LD_INT 1
8269: MINUS
8270: PPUSH
8271: LD_VAR 0 6
8275: PPUSH
8276: CALL_OW 1
8280: ST_TO_ADDR
// end ;
8281: GO 8198
8283: POP
8284: POP
// result := s_arr [ 1 ] ;
8285: LD_ADDR_VAR 0 4
8289: PUSH
8290: LD_VAR 0 7
8294: PUSH
8295: LD_INT 1
8297: ARRAY
8298: ST_TO_ADDR
// end ; end ;
8299: LD_VAR 0 4
8303: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8304: LD_INT 0
8306: PPUSH
8307: PPUSH
// if not list then
8308: LD_VAR 0 1
8312: NOT
8313: IFFALSE 8317
// exit ;
8315: GO 8408
// i := list [ pos1 ] ;
8317: LD_ADDR_VAR 0 5
8321: PUSH
8322: LD_VAR 0 1
8326: PUSH
8327: LD_VAR 0 2
8331: ARRAY
8332: ST_TO_ADDR
// if not i then
8333: LD_VAR 0 5
8337: NOT
8338: IFFALSE 8342
// exit ;
8340: GO 8408
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8342: LD_ADDR_VAR 0 1
8346: PUSH
8347: LD_VAR 0 1
8351: PPUSH
8352: LD_VAR 0 2
8356: PPUSH
8357: LD_VAR 0 1
8361: PUSH
8362: LD_VAR 0 3
8366: ARRAY
8367: PPUSH
8368: CALL_OW 1
8372: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8373: LD_ADDR_VAR 0 1
8377: PUSH
8378: LD_VAR 0 1
8382: PPUSH
8383: LD_VAR 0 3
8387: PPUSH
8388: LD_VAR 0 5
8392: PPUSH
8393: CALL_OW 1
8397: ST_TO_ADDR
// result := list ;
8398: LD_ADDR_VAR 0 4
8402: PUSH
8403: LD_VAR 0 1
8407: ST_TO_ADDR
// end ;
8408: LD_VAR 0 4
8412: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8413: LD_INT 0
8415: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8416: LD_ADDR_VAR 0 5
8420: PUSH
8421: LD_VAR 0 1
8425: PPUSH
8426: CALL_OW 250
8430: PPUSH
8431: LD_VAR 0 1
8435: PPUSH
8436: CALL_OW 251
8440: PPUSH
8441: LD_VAR 0 2
8445: PPUSH
8446: LD_VAR 0 3
8450: PPUSH
8451: LD_VAR 0 4
8455: PPUSH
8456: CALL 8838 0 5
8460: ST_TO_ADDR
// end ;
8461: LD_VAR 0 5
8465: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8466: LD_INT 0
8468: PPUSH
8469: PPUSH
8470: PPUSH
8471: PPUSH
// if not list or not unit then
8472: LD_VAR 0 2
8476: NOT
8477: IFTRUE 8486
8479: PUSH
8480: LD_VAR 0 1
8484: NOT
8485: OR
8486: IFFALSE 8490
// exit ;
8488: GO 8833
// result := [ ] ;
8490: LD_ADDR_VAR 0 5
8494: PUSH
8495: EMPTY
8496: ST_TO_ADDR
// for i in list do
8497: LD_ADDR_VAR 0 6
8501: PUSH
8502: LD_VAR 0 2
8506: PUSH
8507: FOR_IN
8508: IFFALSE 8726
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8510: LD_ADDR_VAR 0 8
8514: PUSH
8515: LD_VAR 0 1
8519: PPUSH
8520: LD_VAR 0 6
8524: PUSH
8525: LD_INT 1
8527: ARRAY
8528: PPUSH
8529: LD_VAR 0 6
8533: PUSH
8534: LD_INT 2
8536: ARRAY
8537: PPUSH
8538: CALL_OW 297
8542: ST_TO_ADDR
// if not Count ( result ) then
8543: LD_VAR 0 5
8547: PPUSH
8548: CALL 5060 0 1
8552: NOT
8553: IFFALSE 8586
// begin result := Join ( result , [ i , tmp ] ) ;
8555: LD_ADDR_VAR 0 5
8559: PUSH
8560: LD_VAR 0 5
8564: PPUSH
8565: LD_VAR 0 6
8569: PUSH
8570: LD_VAR 0 8
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PPUSH
8579: CALL 41036 0 2
8583: ST_TO_ADDR
// continue ;
8584: GO 8507
// end ; if result [ result ] [ 2 ] <= tmp then
8586: LD_VAR 0 5
8590: PUSH
8591: LD_VAR 0 5
8595: ARRAY
8596: PUSH
8597: LD_INT 2
8599: ARRAY
8600: PUSH
8601: LD_VAR 0 8
8605: LESSEQUAL
8606: IFFALSE 8639
// result := Join ( result , [ i , tmp ] ) else
8608: LD_ADDR_VAR 0 5
8612: PUSH
8613: LD_VAR 0 5
8617: PPUSH
8618: LD_VAR 0 6
8622: PUSH
8623: LD_VAR 0 8
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PPUSH
8632: CALL 41036 0 2
8636: ST_TO_ADDR
8637: GO 8724
// begin for j := 1 to Count ( result ) do
8639: LD_ADDR_VAR 0 7
8643: PUSH
8644: DOUBLE
8645: LD_INT 1
8647: DEC
8648: ST_TO_ADDR
8649: LD_VAR 0 5
8653: PPUSH
8654: CALL 5060 0 1
8658: PUSH
8659: FOR_TO
8660: IFFALSE 8722
// begin if tmp < result [ j ] [ 2 ] then
8662: LD_VAR 0 8
8666: PUSH
8667: LD_VAR 0 5
8671: PUSH
8672: LD_VAR 0 7
8676: ARRAY
8677: PUSH
8678: LD_INT 2
8680: ARRAY
8681: LESS
8682: IFFALSE 8720
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8684: LD_ADDR_VAR 0 5
8688: PUSH
8689: LD_VAR 0 5
8693: PPUSH
8694: LD_VAR 0 7
8698: PPUSH
8699: LD_VAR 0 6
8703: PUSH
8704: LD_VAR 0 8
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: PPUSH
8713: CALL_OW 2
8717: ST_TO_ADDR
// break ;
8718: GO 8722
// end ; end ;
8720: GO 8659
8722: POP
8723: POP
// end ; end ;
8724: GO 8507
8726: POP
8727: POP
// if result and not asc then
8728: LD_VAR 0 5
8732: IFFALSE 8741
8734: PUSH
8735: LD_VAR 0 3
8739: NOT
8740: AND
8741: IFFALSE 8758
// result := ReverseArray ( result ) ;
8743: LD_ADDR_VAR 0 5
8747: PUSH
8748: LD_VAR 0 5
8752: PPUSH
8753: CALL 36116 0 1
8757: ST_TO_ADDR
// tmp := [ ] ;
8758: LD_ADDR_VAR 0 8
8762: PUSH
8763: EMPTY
8764: ST_TO_ADDR
// if mode then
8765: LD_VAR 0 4
8769: IFFALSE 8833
// begin for i := 1 to result do
8771: LD_ADDR_VAR 0 6
8775: PUSH
8776: DOUBLE
8777: LD_INT 1
8779: DEC
8780: ST_TO_ADDR
8781: LD_VAR 0 5
8785: PUSH
8786: FOR_TO
8787: IFFALSE 8821
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8789: LD_ADDR_VAR 0 8
8793: PUSH
8794: LD_VAR 0 8
8798: PPUSH
8799: LD_VAR 0 5
8803: PUSH
8804: LD_VAR 0 6
8808: ARRAY
8809: PUSH
8810: LD_INT 1
8812: ARRAY
8813: PPUSH
8814: CALL 41036 0 2
8818: ST_TO_ADDR
8819: GO 8786
8821: POP
8822: POP
// result := tmp ;
8823: LD_ADDR_VAR 0 5
8827: PUSH
8828: LD_VAR 0 8
8832: ST_TO_ADDR
// end ; end ;
8833: LD_VAR 0 5
8837: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8838: LD_INT 0
8840: PPUSH
8841: PPUSH
8842: PPUSH
8843: PPUSH
// if not list then
8844: LD_VAR 0 3
8848: NOT
8849: IFFALSE 8853
// exit ;
8851: GO 9243
// result := [ ] ;
8853: LD_ADDR_VAR 0 6
8857: PUSH
8858: EMPTY
8859: ST_TO_ADDR
// for i in list do
8860: LD_ADDR_VAR 0 7
8864: PUSH
8865: LD_VAR 0 3
8869: PUSH
8870: FOR_IN
8871: IFFALSE 9073
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8873: LD_ADDR_VAR 0 9
8877: PUSH
8878: LD_VAR 0 7
8882: PPUSH
8883: LD_VAR 0 1
8887: PPUSH
8888: LD_VAR 0 2
8892: PPUSH
8893: CALL_OW 297
8897: ST_TO_ADDR
// if not result then
8898: LD_VAR 0 6
8902: NOT
8903: IFFALSE 8929
// result := [ [ i , tmp ] ] else
8905: LD_ADDR_VAR 0 6
8909: PUSH
8910: LD_VAR 0 7
8914: PUSH
8915: LD_VAR 0 9
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PUSH
8924: EMPTY
8925: LIST
8926: ST_TO_ADDR
8927: GO 9071
// begin if result [ result ] [ 2 ] <= tmp then
8929: LD_VAR 0 6
8933: PUSH
8934: LD_VAR 0 6
8938: ARRAY
8939: PUSH
8940: LD_INT 2
8942: ARRAY
8943: PUSH
8944: LD_VAR 0 9
8948: LESSEQUAL
8949: IFFALSE 8991
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8951: LD_ADDR_VAR 0 6
8955: PUSH
8956: LD_VAR 0 6
8960: PPUSH
8961: LD_VAR 0 6
8965: PUSH
8966: LD_INT 1
8968: PLUS
8969: PPUSH
8970: LD_VAR 0 7
8974: PUSH
8975: LD_VAR 0 9
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PPUSH
8984: CALL_OW 2
8988: ST_TO_ADDR
8989: GO 9071
// for j := 1 to result do
8991: LD_ADDR_VAR 0 8
8995: PUSH
8996: DOUBLE
8997: LD_INT 1
8999: DEC
9000: ST_TO_ADDR
9001: LD_VAR 0 6
9005: PUSH
9006: FOR_TO
9007: IFFALSE 9069
// begin if tmp < result [ j ] [ 2 ] then
9009: LD_VAR 0 9
9013: PUSH
9014: LD_VAR 0 6
9018: PUSH
9019: LD_VAR 0 8
9023: ARRAY
9024: PUSH
9025: LD_INT 2
9027: ARRAY
9028: LESS
9029: IFFALSE 9067
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9031: LD_ADDR_VAR 0 6
9035: PUSH
9036: LD_VAR 0 6
9040: PPUSH
9041: LD_VAR 0 8
9045: PPUSH
9046: LD_VAR 0 7
9050: PUSH
9051: LD_VAR 0 9
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PPUSH
9060: CALL_OW 2
9064: ST_TO_ADDR
// break ;
9065: GO 9069
// end ; end ;
9067: GO 9006
9069: POP
9070: POP
// end ; end ;
9071: GO 8870
9073: POP
9074: POP
// if result and not asc then
9075: LD_VAR 0 6
9079: IFFALSE 9088
9081: PUSH
9082: LD_VAR 0 4
9086: NOT
9087: AND
9088: IFFALSE 9163
// begin tmp := result ;
9090: LD_ADDR_VAR 0 9
9094: PUSH
9095: LD_VAR 0 6
9099: ST_TO_ADDR
// for i = tmp downto 1 do
9100: LD_ADDR_VAR 0 7
9104: PUSH
9105: DOUBLE
9106: LD_VAR 0 9
9110: INC
9111: ST_TO_ADDR
9112: LD_INT 1
9114: PUSH
9115: FOR_DOWNTO
9116: IFFALSE 9161
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9118: LD_ADDR_VAR 0 6
9122: PUSH
9123: LD_VAR 0 6
9127: PPUSH
9128: LD_VAR 0 9
9132: PUSH
9133: LD_VAR 0 7
9137: MINUS
9138: PUSH
9139: LD_INT 1
9141: PLUS
9142: PPUSH
9143: LD_VAR 0 9
9147: PUSH
9148: LD_VAR 0 7
9152: ARRAY
9153: PPUSH
9154: CALL_OW 1
9158: ST_TO_ADDR
9159: GO 9115
9161: POP
9162: POP
// end ; tmp := [ ] ;
9163: LD_ADDR_VAR 0 9
9167: PUSH
9168: EMPTY
9169: ST_TO_ADDR
// if mode then
9170: LD_VAR 0 5
9174: IFFALSE 9243
// begin for i = 1 to result do
9176: LD_ADDR_VAR 0 7
9180: PUSH
9181: DOUBLE
9182: LD_INT 1
9184: DEC
9185: ST_TO_ADDR
9186: LD_VAR 0 6
9190: PUSH
9191: FOR_TO
9192: IFFALSE 9231
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9194: LD_ADDR_VAR 0 9
9198: PUSH
9199: LD_VAR 0 9
9203: PPUSH
9204: LD_VAR 0 7
9208: PPUSH
9209: LD_VAR 0 6
9213: PUSH
9214: LD_VAR 0 7
9218: ARRAY
9219: PUSH
9220: LD_INT 1
9222: ARRAY
9223: PPUSH
9224: CALL_OW 1
9228: ST_TO_ADDR
9229: GO 9191
9231: POP
9232: POP
// result := tmp ;
9233: LD_ADDR_VAR 0 6
9237: PUSH
9238: LD_VAR 0 9
9242: ST_TO_ADDR
// end ; end ;
9243: LD_VAR 0 6
9247: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9248: LD_INT 0
9250: PPUSH
9251: PPUSH
9252: PPUSH
9253: PPUSH
9254: PPUSH
9255: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9256: LD_ADDR_VAR 0 5
9260: PUSH
9261: LD_INT 0
9263: PUSH
9264: LD_INT 0
9266: PUSH
9267: LD_INT 0
9269: PUSH
9270: EMPTY
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: ST_TO_ADDR
// if not x or not y then
9278: LD_VAR 0 2
9282: NOT
9283: IFTRUE 9292
9285: PUSH
9286: LD_VAR 0 3
9290: NOT
9291: OR
9292: IFFALSE 9296
// exit ;
9294: GO 10952
// if not range then
9296: LD_VAR 0 4
9300: NOT
9301: IFFALSE 9311
// range := 10 ;
9303: LD_ADDR_VAR 0 4
9307: PUSH
9308: LD_INT 10
9310: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9311: LD_ADDR_VAR 0 8
9315: PUSH
9316: LD_INT 81
9318: PUSH
9319: LD_VAR 0 1
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PUSH
9328: LD_INT 92
9330: PUSH
9331: LD_VAR 0 2
9335: PUSH
9336: LD_VAR 0 3
9340: PUSH
9341: LD_VAR 0 4
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: PUSH
9352: LD_INT 3
9354: PUSH
9355: LD_INT 21
9357: PUSH
9358: LD_INT 3
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: LIST
9373: PPUSH
9374: CALL_OW 69
9378: ST_TO_ADDR
// if not tmp then
9379: LD_VAR 0 8
9383: NOT
9384: IFFALSE 9388
// exit ;
9386: GO 10952
// for i in tmp do
9388: LD_ADDR_VAR 0 6
9392: PUSH
9393: LD_VAR 0 8
9397: PUSH
9398: FOR_IN
9399: IFFALSE 10927
// begin points := [ 0 , 0 , 0 ] ;
9401: LD_ADDR_VAR 0 9
9405: PUSH
9406: LD_INT 0
9408: PUSH
9409: LD_INT 0
9411: PUSH
9412: LD_INT 0
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: ST_TO_ADDR
// bpoints := 1 ;
9420: LD_ADDR_VAR 0 10
9424: PUSH
9425: LD_INT 1
9427: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9428: LD_VAR 0 6
9432: PPUSH
9433: CALL_OW 247
9437: PUSH
9438: LD_INT 1
9440: DOUBLE
9441: EQUAL
9442: IFTRUE 9446
9444: GO 10028
9446: POP
// begin if GetClass ( i ) = 1 then
9447: LD_VAR 0 6
9451: PPUSH
9452: CALL_OW 257
9456: PUSH
9457: LD_INT 1
9459: EQUAL
9460: IFFALSE 9481
// points := [ 10 , 5 , 3 ] ;
9462: LD_ADDR_VAR 0 9
9466: PUSH
9467: LD_INT 10
9469: PUSH
9470: LD_INT 5
9472: PUSH
9473: LD_INT 3
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: LIST
9480: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9481: LD_VAR 0 6
9485: PPUSH
9486: CALL_OW 257
9490: PUSH
9491: LD_INT 2
9493: PUSH
9494: LD_INT 3
9496: PUSH
9497: LD_INT 4
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: LIST
9504: IN
9505: IFFALSE 9526
// points := [ 3 , 2 , 1 ] ;
9507: LD_ADDR_VAR 0 9
9511: PUSH
9512: LD_INT 3
9514: PUSH
9515: LD_INT 2
9517: PUSH
9518: LD_INT 1
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: LIST
9525: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9526: LD_VAR 0 6
9530: PPUSH
9531: CALL_OW 257
9535: PUSH
9536: LD_INT 5
9538: EQUAL
9539: IFFALSE 9560
// points := [ 130 , 5 , 2 ] ;
9541: LD_ADDR_VAR 0 9
9545: PUSH
9546: LD_INT 130
9548: PUSH
9549: LD_INT 5
9551: PUSH
9552: LD_INT 2
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: LIST
9559: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9560: LD_VAR 0 6
9564: PPUSH
9565: CALL_OW 257
9569: PUSH
9570: LD_INT 8
9572: EQUAL
9573: IFFALSE 9594
// points := [ 35 , 35 , 30 ] ;
9575: LD_ADDR_VAR 0 9
9579: PUSH
9580: LD_INT 35
9582: PUSH
9583: LD_INT 35
9585: PUSH
9586: LD_INT 30
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: LIST
9593: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9594: LD_VAR 0 6
9598: PPUSH
9599: CALL_OW 257
9603: PUSH
9604: LD_INT 9
9606: EQUAL
9607: IFFALSE 9628
// points := [ 20 , 55 , 40 ] ;
9609: LD_ADDR_VAR 0 9
9613: PUSH
9614: LD_INT 20
9616: PUSH
9617: LD_INT 55
9619: PUSH
9620: LD_INT 40
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9628: LD_VAR 0 6
9632: PPUSH
9633: CALL_OW 257
9637: PUSH
9638: LD_INT 12
9640: PUSH
9641: LD_INT 16
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: IN
9648: IFFALSE 9669
// points := [ 5 , 3 , 2 ] ;
9650: LD_ADDR_VAR 0 9
9654: PUSH
9655: LD_INT 5
9657: PUSH
9658: LD_INT 3
9660: PUSH
9661: LD_INT 2
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9669: LD_VAR 0 6
9673: PPUSH
9674: CALL_OW 257
9678: PUSH
9679: LD_INT 17
9681: EQUAL
9682: IFFALSE 9703
// points := [ 100 , 50 , 75 ] ;
9684: LD_ADDR_VAR 0 9
9688: PUSH
9689: LD_INT 100
9691: PUSH
9692: LD_INT 50
9694: PUSH
9695: LD_INT 75
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: LIST
9702: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9703: LD_VAR 0 6
9707: PPUSH
9708: CALL_OW 257
9712: PUSH
9713: LD_INT 15
9715: EQUAL
9716: IFFALSE 9737
// points := [ 10 , 5 , 3 ] ;
9718: LD_ADDR_VAR 0 9
9722: PUSH
9723: LD_INT 10
9725: PUSH
9726: LD_INT 5
9728: PUSH
9729: LD_INT 3
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: LIST
9736: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9737: LD_VAR 0 6
9741: PPUSH
9742: CALL_OW 257
9746: PUSH
9747: LD_INT 14
9749: EQUAL
9750: IFFALSE 9771
// points := [ 10 , 0 , 0 ] ;
9752: LD_ADDR_VAR 0 9
9756: PUSH
9757: LD_INT 10
9759: PUSH
9760: LD_INT 0
9762: PUSH
9763: LD_INT 0
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: LIST
9770: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9771: LD_VAR 0 6
9775: PPUSH
9776: CALL_OW 257
9780: PUSH
9781: LD_INT 11
9783: EQUAL
9784: IFFALSE 9805
// points := [ 30 , 10 , 5 ] ;
9786: LD_ADDR_VAR 0 9
9790: PUSH
9791: LD_INT 30
9793: PUSH
9794: LD_INT 10
9796: PUSH
9797: LD_INT 5
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: LIST
9804: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9805: LD_VAR 0 1
9809: PPUSH
9810: LD_INT 5
9812: PPUSH
9813: CALL_OW 321
9817: PUSH
9818: LD_INT 2
9820: EQUAL
9821: IFFALSE 9838
// bpoints := bpoints * 1.8 ;
9823: LD_ADDR_VAR 0 10
9827: PUSH
9828: LD_VAR 0 10
9832: PUSH
9833: LD_REAL  1.80000000000000E+0000
9836: MUL
9837: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9838: LD_VAR 0 6
9842: PPUSH
9843: CALL_OW 257
9847: PUSH
9848: LD_INT 1
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: LD_INT 4
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: IN
9866: IFFALSE 9886
9868: PUSH
9869: LD_VAR 0 1
9873: PPUSH
9874: LD_INT 51
9876: PPUSH
9877: CALL_OW 321
9881: PUSH
9882: LD_INT 2
9884: EQUAL
9885: AND
9886: IFFALSE 9903
// bpoints := bpoints * 1.2 ;
9888: LD_ADDR_VAR 0 10
9892: PUSH
9893: LD_VAR 0 10
9897: PUSH
9898: LD_REAL  1.20000000000000E+0000
9901: MUL
9902: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9903: LD_VAR 0 6
9907: PPUSH
9908: CALL_OW 257
9912: PUSH
9913: LD_INT 5
9915: PUSH
9916: LD_INT 7
9918: PUSH
9919: LD_INT 9
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: IN
9927: IFFALSE 9947
9929: PUSH
9930: LD_VAR 0 1
9934: PPUSH
9935: LD_INT 52
9937: PPUSH
9938: CALL_OW 321
9942: PUSH
9943: LD_INT 2
9945: EQUAL
9946: AND
9947: IFFALSE 9964
// bpoints := bpoints * 1.5 ;
9949: LD_ADDR_VAR 0 10
9953: PUSH
9954: LD_VAR 0 10
9958: PUSH
9959: LD_REAL  1.50000000000000E+0000
9962: MUL
9963: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9964: LD_VAR 0 1
9968: PPUSH
9969: LD_INT 66
9971: PPUSH
9972: CALL_OW 321
9976: PUSH
9977: LD_INT 2
9979: EQUAL
9980: IFFALSE 9997
// bpoints := bpoints * 1.1 ;
9982: LD_ADDR_VAR 0 10
9986: PUSH
9987: LD_VAR 0 10
9991: PUSH
9992: LD_REAL  1.10000000000000E+0000
9995: MUL
9996: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9997: LD_ADDR_VAR 0 10
10001: PUSH
10002: LD_VAR 0 10
10006: PUSH
10007: LD_VAR 0 6
10011: PPUSH
10012: LD_INT 1
10014: PPUSH
10015: CALL_OW 259
10019: PUSH
10020: LD_REAL  1.15000000000000E+0000
10023: MUL
10024: MUL
10025: ST_TO_ADDR
// end ; unit_vehicle :
10026: GO 10856
10028: LD_INT 2
10030: DOUBLE
10031: EQUAL
10032: IFTRUE 10036
10034: GO 10844
10036: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10037: LD_VAR 0 6
10041: PPUSH
10042: CALL_OW 264
10046: PUSH
10047: LD_INT 2
10049: PUSH
10050: LD_INT 42
10052: PUSH
10053: LD_INT 24
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: IN
10061: IFFALSE 10082
// points := [ 25 , 5 , 3 ] ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: LD_INT 25
10070: PUSH
10071: LD_INT 5
10073: PUSH
10074: LD_INT 3
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10082: LD_VAR 0 6
10086: PPUSH
10087: CALL_OW 264
10091: PUSH
10092: LD_INT 4
10094: PUSH
10095: LD_INT 43
10097: PUSH
10098: LD_INT 25
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: LIST
10105: IN
10106: IFFALSE 10127
// points := [ 40 , 15 , 5 ] ;
10108: LD_ADDR_VAR 0 9
10112: PUSH
10113: LD_INT 40
10115: PUSH
10116: LD_INT 15
10118: PUSH
10119: LD_INT 5
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: LIST
10126: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10127: LD_VAR 0 6
10131: PPUSH
10132: CALL_OW 264
10136: PUSH
10137: LD_INT 3
10139: PUSH
10140: LD_INT 23
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: IN
10147: IFFALSE 10168
// points := [ 7 , 25 , 8 ] ;
10149: LD_ADDR_VAR 0 9
10153: PUSH
10154: LD_INT 7
10156: PUSH
10157: LD_INT 25
10159: PUSH
10160: LD_INT 8
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10168: LD_VAR 0 6
10172: PPUSH
10173: CALL_OW 264
10177: PUSH
10178: LD_INT 5
10180: PUSH
10181: LD_INT 27
10183: PUSH
10184: LD_INT 44
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: LIST
10191: IN
10192: IFFALSE 10213
// points := [ 14 , 50 , 16 ] ;
10194: LD_ADDR_VAR 0 9
10198: PUSH
10199: LD_INT 14
10201: PUSH
10202: LD_INT 50
10204: PUSH
10205: LD_INT 16
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: LIST
10212: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10213: LD_VAR 0 6
10217: PPUSH
10218: CALL_OW 264
10222: PUSH
10223: LD_INT 6
10225: PUSH
10226: LD_INT 46
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: IN
10233: IFFALSE 10254
// points := [ 32 , 120 , 70 ] ;
10235: LD_ADDR_VAR 0 9
10239: PUSH
10240: LD_INT 32
10242: PUSH
10243: LD_INT 120
10245: PUSH
10246: LD_INT 70
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: LIST
10253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10254: LD_VAR 0 6
10258: PPUSH
10259: CALL_OW 264
10263: PUSH
10264: LD_INT 7
10266: PUSH
10267: LD_INT 28
10269: PUSH
10270: LD_INT 45
10272: PUSH
10273: LD_INT 92
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: IN
10282: IFFALSE 10303
// points := [ 35 , 20 , 45 ] ;
10284: LD_ADDR_VAR 0 9
10288: PUSH
10289: LD_INT 35
10291: PUSH
10292: LD_INT 20
10294: PUSH
10295: LD_INT 45
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: LIST
10302: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10303: LD_VAR 0 6
10307: PPUSH
10308: CALL_OW 264
10312: PUSH
10313: LD_INT 47
10315: PUSH
10316: EMPTY
10317: LIST
10318: IN
10319: IFFALSE 10340
// points := [ 67 , 45 , 75 ] ;
10321: LD_ADDR_VAR 0 9
10325: PUSH
10326: LD_INT 67
10328: PUSH
10329: LD_INT 45
10331: PUSH
10332: LD_INT 75
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10340: LD_VAR 0 6
10344: PPUSH
10345: CALL_OW 264
10349: PUSH
10350: LD_INT 26
10352: PUSH
10353: EMPTY
10354: LIST
10355: IN
10356: IFFALSE 10377
// points := [ 120 , 30 , 80 ] ;
10358: LD_ADDR_VAR 0 9
10362: PUSH
10363: LD_INT 120
10365: PUSH
10366: LD_INT 30
10368: PUSH
10369: LD_INT 80
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: LIST
10376: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10377: LD_VAR 0 6
10381: PPUSH
10382: CALL_OW 264
10386: PUSH
10387: LD_INT 22
10389: PUSH
10390: EMPTY
10391: LIST
10392: IN
10393: IFFALSE 10414
// points := [ 40 , 1 , 1 ] ;
10395: LD_ADDR_VAR 0 9
10399: PUSH
10400: LD_INT 40
10402: PUSH
10403: LD_INT 1
10405: PUSH
10406: LD_INT 1
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: LIST
10413: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10414: LD_VAR 0 6
10418: PPUSH
10419: CALL_OW 264
10423: PUSH
10424: LD_INT 29
10426: PUSH
10427: EMPTY
10428: LIST
10429: IN
10430: IFFALSE 10451
// points := [ 70 , 200 , 400 ] ;
10432: LD_ADDR_VAR 0 9
10436: PUSH
10437: LD_INT 70
10439: PUSH
10440: LD_INT 200
10442: PUSH
10443: LD_INT 400
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: LIST
10450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10451: LD_VAR 0 6
10455: PPUSH
10456: CALL_OW 264
10460: PUSH
10461: LD_INT 14
10463: PUSH
10464: LD_INT 53
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: IN
10471: IFFALSE 10492
// points := [ 40 , 10 , 20 ] ;
10473: LD_ADDR_VAR 0 9
10477: PUSH
10478: LD_INT 40
10480: PUSH
10481: LD_INT 10
10483: PUSH
10484: LD_INT 20
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: LIST
10491: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10492: LD_VAR 0 6
10496: PPUSH
10497: CALL_OW 264
10501: PUSH
10502: LD_INT 9
10504: PUSH
10505: EMPTY
10506: LIST
10507: IN
10508: IFFALSE 10529
// points := [ 5 , 70 , 20 ] ;
10510: LD_ADDR_VAR 0 9
10514: PUSH
10515: LD_INT 5
10517: PUSH
10518: LD_INT 70
10520: PUSH
10521: LD_INT 20
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10529: LD_VAR 0 6
10533: PPUSH
10534: CALL_OW 264
10538: PUSH
10539: LD_INT 10
10541: PUSH
10542: EMPTY
10543: LIST
10544: IN
10545: IFFALSE 10566
// points := [ 35 , 110 , 70 ] ;
10547: LD_ADDR_VAR 0 9
10551: PUSH
10552: LD_INT 35
10554: PUSH
10555: LD_INT 110
10557: PUSH
10558: LD_INT 70
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10566: LD_VAR 0 6
10570: PPUSH
10571: CALL_OW 265
10575: PUSH
10576: LD_INT 25
10578: EQUAL
10579: IFFALSE 10600
// points := [ 80 , 65 , 100 ] ;
10581: LD_ADDR_VAR 0 9
10585: PUSH
10586: LD_INT 80
10588: PUSH
10589: LD_INT 65
10591: PUSH
10592: LD_INT 100
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10600: LD_VAR 0 6
10604: PPUSH
10605: CALL_OW 263
10609: PUSH
10610: LD_INT 1
10612: EQUAL
10613: IFFALSE 10648
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10615: LD_ADDR_VAR 0 10
10619: PUSH
10620: LD_VAR 0 10
10624: PUSH
10625: LD_VAR 0 6
10629: PPUSH
10630: CALL_OW 311
10634: PPUSH
10635: LD_INT 3
10637: PPUSH
10638: CALL_OW 259
10642: PUSH
10643: LD_INT 4
10645: MUL
10646: MUL
10647: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10648: LD_VAR 0 6
10652: PPUSH
10653: CALL_OW 263
10657: PUSH
10658: LD_INT 2
10660: EQUAL
10661: IFFALSE 10712
// begin j := IsControledBy ( i ) ;
10663: LD_ADDR_VAR 0 7
10667: PUSH
10668: LD_VAR 0 6
10672: PPUSH
10673: CALL_OW 312
10677: ST_TO_ADDR
// if j then
10678: LD_VAR 0 7
10682: IFFALSE 10712
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10684: LD_ADDR_VAR 0 10
10688: PUSH
10689: LD_VAR 0 10
10693: PUSH
10694: LD_VAR 0 7
10698: PPUSH
10699: LD_INT 3
10701: PPUSH
10702: CALL_OW 259
10706: PUSH
10707: LD_INT 3
10709: MUL
10710: MUL
10711: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10712: LD_VAR 0 6
10716: PPUSH
10717: CALL_OW 264
10721: PUSH
10722: LD_INT 5
10724: PUSH
10725: LD_INT 6
10727: PUSH
10728: LD_INT 46
10730: PUSH
10731: LD_INT 44
10733: PUSH
10734: LD_INT 47
10736: PUSH
10737: LD_INT 45
10739: PUSH
10740: LD_INT 28
10742: PUSH
10743: LD_INT 7
10745: PUSH
10746: LD_INT 27
10748: PUSH
10749: LD_INT 29
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: IN
10764: IFFALSE 10784
10766: PUSH
10767: LD_VAR 0 1
10771: PPUSH
10772: LD_INT 52
10774: PPUSH
10775: CALL_OW 321
10779: PUSH
10780: LD_INT 2
10782: EQUAL
10783: AND
10784: IFFALSE 10801
// bpoints := bpoints * 1.2 ;
10786: LD_ADDR_VAR 0 10
10790: PUSH
10791: LD_VAR 0 10
10795: PUSH
10796: LD_REAL  1.20000000000000E+0000
10799: MUL
10800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10801: LD_VAR 0 6
10805: PPUSH
10806: CALL_OW 264
10810: PUSH
10811: LD_INT 6
10813: PUSH
10814: LD_INT 46
10816: PUSH
10817: LD_INT 47
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: LIST
10824: IN
10825: IFFALSE 10842
// bpoints := bpoints * 1.2 ;
10827: LD_ADDR_VAR 0 10
10831: PUSH
10832: LD_VAR 0 10
10836: PUSH
10837: LD_REAL  1.20000000000000E+0000
10840: MUL
10841: ST_TO_ADDR
// end ; unit_building :
10842: GO 10856
10844: LD_INT 3
10846: DOUBLE
10847: EQUAL
10848: IFTRUE 10852
10850: GO 10855
10852: POP
// ; end ;
10853: GO 10856
10855: POP
// for j = 1 to 3 do
10856: LD_ADDR_VAR 0 7
10860: PUSH
10861: DOUBLE
10862: LD_INT 1
10864: DEC
10865: ST_TO_ADDR
10866: LD_INT 3
10868: PUSH
10869: FOR_TO
10870: IFFALSE 10923
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10872: LD_ADDR_VAR 0 5
10876: PUSH
10877: LD_VAR 0 5
10881: PPUSH
10882: LD_VAR 0 7
10886: PPUSH
10887: LD_VAR 0 5
10891: PUSH
10892: LD_VAR 0 7
10896: ARRAY
10897: PUSH
10898: LD_VAR 0 9
10902: PUSH
10903: LD_VAR 0 7
10907: ARRAY
10908: PUSH
10909: LD_VAR 0 10
10913: MUL
10914: PLUS
10915: PPUSH
10916: CALL_OW 1
10920: ST_TO_ADDR
10921: GO 10869
10923: POP
10924: POP
// end ;
10925: GO 9398
10927: POP
10928: POP
// result := Replace ( result , 4 , tmp ) ;
10929: LD_ADDR_VAR 0 5
10933: PUSH
10934: LD_VAR 0 5
10938: PPUSH
10939: LD_INT 4
10941: PPUSH
10942: LD_VAR 0 8
10946: PPUSH
10947: CALL_OW 1
10951: ST_TO_ADDR
// end ;
10952: LD_VAR 0 5
10956: RET
// export function DangerAtRange ( unit , range ) ; begin
10957: LD_INT 0
10959: PPUSH
// if not unit then
10960: LD_VAR 0 1
10964: NOT
10965: IFFALSE 10969
// exit ;
10967: GO 11014
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10969: LD_ADDR_VAR 0 3
10973: PUSH
10974: LD_VAR 0 1
10978: PPUSH
10979: CALL_OW 255
10983: PPUSH
10984: LD_VAR 0 1
10988: PPUSH
10989: CALL_OW 250
10993: PPUSH
10994: LD_VAR 0 1
10998: PPUSH
10999: CALL_OW 251
11003: PPUSH
11004: LD_VAR 0 2
11008: PPUSH
11009: CALL 9248 0 4
11013: ST_TO_ADDR
// end ;
11014: LD_VAR 0 3
11018: RET
// export function DangerInArea ( side , area ) ; begin
11019: LD_INT 0
11021: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11022: LD_ADDR_VAR 0 3
11026: PUSH
11027: LD_VAR 0 2
11031: PPUSH
11032: LD_INT 81
11034: PUSH
11035: LD_VAR 0 1
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PPUSH
11044: CALL_OW 70
11048: ST_TO_ADDR
// end ;
11049: LD_VAR 0 3
11053: RET
// export function IsExtension ( b ) ; begin
11054: LD_INT 0
11056: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11057: LD_ADDR_VAR 0 2
11061: PUSH
11062: LD_VAR 0 1
11066: PUSH
11067: LD_INT 23
11069: PUSH
11070: LD_INT 20
11072: PUSH
11073: LD_INT 22
11075: PUSH
11076: LD_INT 17
11078: PUSH
11079: LD_INT 24
11081: PUSH
11082: LD_INT 21
11084: PUSH
11085: LD_INT 19
11087: PUSH
11088: LD_INT 16
11090: PUSH
11091: LD_INT 25
11093: PUSH
11094: LD_INT 18
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: IN
11109: ST_TO_ADDR
// end ;
11110: LD_VAR 0 2
11114: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11115: LD_INT 0
11117: PPUSH
11118: PPUSH
11119: PPUSH
// result := [ ] ;
11120: LD_ADDR_VAR 0 4
11124: PUSH
11125: EMPTY
11126: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11127: LD_ADDR_VAR 0 5
11131: PUSH
11132: LD_VAR 0 2
11136: PPUSH
11137: LD_INT 21
11139: PUSH
11140: LD_INT 3
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PPUSH
11147: CALL_OW 70
11151: ST_TO_ADDR
// if not tmp then
11152: LD_VAR 0 5
11156: NOT
11157: IFFALSE 11161
// exit ;
11159: GO 11225
// if checkLink then
11161: LD_VAR 0 3
11165: IFFALSE 11215
// begin for i in tmp do
11167: LD_ADDR_VAR 0 6
11171: PUSH
11172: LD_VAR 0 5
11176: PUSH
11177: FOR_IN
11178: IFFALSE 11213
// if GetBase ( i ) <> base then
11180: LD_VAR 0 6
11184: PPUSH
11185: CALL_OW 274
11189: PUSH
11190: LD_VAR 0 1
11194: NONEQUAL
11195: IFFALSE 11211
// ComLinkToBase ( base , i ) ;
11197: LD_VAR 0 1
11201: PPUSH
11202: LD_VAR 0 6
11206: PPUSH
11207: CALL_OW 169
11211: GO 11177
11213: POP
11214: POP
// end ; result := tmp ;
11215: LD_ADDR_VAR 0 4
11219: PUSH
11220: LD_VAR 0 5
11224: ST_TO_ADDR
// end ;
11225: LD_VAR 0 4
11229: RET
// export function ComComplete ( units , b ) ; var i ; begin
11230: LD_INT 0
11232: PPUSH
11233: PPUSH
// if not units then
11234: LD_VAR 0 1
11238: NOT
11239: IFFALSE 11243
// exit ;
11241: GO 11333
// for i in units do
11243: LD_ADDR_VAR 0 4
11247: PUSH
11248: LD_VAR 0 1
11252: PUSH
11253: FOR_IN
11254: IFFALSE 11331
// if BuildingStatus ( b ) = bs_build then
11256: LD_VAR 0 2
11260: PPUSH
11261: CALL_OW 461
11265: PUSH
11266: LD_INT 1
11268: EQUAL
11269: IFFALSE 11329
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11271: LD_VAR 0 4
11275: PPUSH
11276: LD_STRING h
11278: PUSH
11279: LD_VAR 0 2
11283: PPUSH
11284: CALL_OW 250
11288: PUSH
11289: LD_VAR 0 2
11293: PPUSH
11294: CALL_OW 251
11298: PUSH
11299: LD_VAR 0 2
11303: PUSH
11304: LD_INT 0
11306: PUSH
11307: LD_INT 0
11309: PUSH
11310: LD_INT 0
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: PPUSH
11325: CALL_OW 446
11329: GO 11253
11331: POP
11332: POP
// end ;
11333: LD_VAR 0 3
11337: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11338: LD_INT 0
11340: PPUSH
11341: PPUSH
11342: PPUSH
11343: PPUSH
11344: PPUSH
11345: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11346: LD_VAR 0 1
11350: NOT
11351: IFTRUE 11368
11353: PUSH
11354: LD_VAR 0 1
11358: PPUSH
11359: CALL_OW 263
11363: PUSH
11364: LD_INT 2
11366: NONEQUAL
11367: OR
11368: IFFALSE 11372
// exit ;
11370: GO 11688
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11372: LD_ADDR_VAR 0 6
11376: PUSH
11377: LD_INT 22
11379: PUSH
11380: LD_VAR 0 1
11384: PPUSH
11385: CALL_OW 255
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: LD_INT 2
11396: PUSH
11397: LD_INT 30
11399: PUSH
11400: LD_INT 36
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: LD_INT 34
11409: PUSH
11410: LD_INT 31
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PPUSH
11426: CALL_OW 69
11430: ST_TO_ADDR
// if not tmp then
11431: LD_VAR 0 6
11435: NOT
11436: IFFALSE 11440
// exit ;
11438: GO 11688
// result := [ ] ;
11440: LD_ADDR_VAR 0 2
11444: PUSH
11445: EMPTY
11446: ST_TO_ADDR
// for i in tmp do
11447: LD_ADDR_VAR 0 3
11451: PUSH
11452: LD_VAR 0 6
11456: PUSH
11457: FOR_IN
11458: IFFALSE 11529
// begin t := UnitsInside ( i ) ;
11460: LD_ADDR_VAR 0 4
11464: PUSH
11465: LD_VAR 0 3
11469: PPUSH
11470: CALL_OW 313
11474: ST_TO_ADDR
// if t then
11475: LD_VAR 0 4
11479: IFFALSE 11527
// for j in t do
11481: LD_ADDR_VAR 0 7
11485: PUSH
11486: LD_VAR 0 4
11490: PUSH
11491: FOR_IN
11492: IFFALSE 11525
// result := Replace ( result , result + 1 , j ) ;
11494: LD_ADDR_VAR 0 2
11498: PUSH
11499: LD_VAR 0 2
11503: PPUSH
11504: LD_VAR 0 2
11508: PUSH
11509: LD_INT 1
11511: PLUS
11512: PPUSH
11513: LD_VAR 0 7
11517: PPUSH
11518: CALL_OW 1
11522: ST_TO_ADDR
11523: GO 11491
11525: POP
11526: POP
// end ;
11527: GO 11457
11529: POP
11530: POP
// if not result then
11531: LD_VAR 0 2
11535: NOT
11536: IFFALSE 11540
// exit ;
11538: GO 11688
// mech := result [ 1 ] ;
11540: LD_ADDR_VAR 0 5
11544: PUSH
11545: LD_VAR 0 2
11549: PUSH
11550: LD_INT 1
11552: ARRAY
11553: ST_TO_ADDR
// if result > 1 then
11554: LD_VAR 0 2
11558: PUSH
11559: LD_INT 1
11561: GREATER
11562: IFFALSE 11674
// begin for i = 2 to result do
11564: LD_ADDR_VAR 0 3
11568: PUSH
11569: DOUBLE
11570: LD_INT 2
11572: DEC
11573: ST_TO_ADDR
11574: LD_VAR 0 2
11578: PUSH
11579: FOR_TO
11580: IFFALSE 11672
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11582: LD_ADDR_VAR 0 4
11586: PUSH
11587: LD_VAR 0 2
11591: PUSH
11592: LD_VAR 0 3
11596: ARRAY
11597: PPUSH
11598: LD_INT 3
11600: PPUSH
11601: CALL_OW 259
11605: PUSH
11606: LD_VAR 0 2
11610: PUSH
11611: LD_VAR 0 3
11615: ARRAY
11616: PPUSH
11617: CALL_OW 432
11621: MINUS
11622: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11623: LD_VAR 0 4
11627: PUSH
11628: LD_VAR 0 5
11632: PPUSH
11633: LD_INT 3
11635: PPUSH
11636: CALL_OW 259
11640: PUSH
11641: LD_VAR 0 5
11645: PPUSH
11646: CALL_OW 432
11650: MINUS
11651: GREATEREQUAL
11652: IFFALSE 11670
// mech := result [ i ] ;
11654: LD_ADDR_VAR 0 5
11658: PUSH
11659: LD_VAR 0 2
11663: PUSH
11664: LD_VAR 0 3
11668: ARRAY
11669: ST_TO_ADDR
// end ;
11670: GO 11579
11672: POP
11673: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11674: LD_VAR 0 1
11678: PPUSH
11679: LD_VAR 0 5
11683: PPUSH
11684: CALL_OW 135
// end ;
11688: LD_VAR 0 2
11692: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11693: LD_INT 0
11695: PPUSH
11696: PPUSH
11697: PPUSH
11698: PPUSH
11699: PPUSH
11700: PPUSH
11701: PPUSH
11702: PPUSH
11703: PPUSH
11704: PPUSH
11705: PPUSH
11706: PPUSH
11707: PPUSH
// result := [ ] ;
11708: LD_ADDR_VAR 0 7
11712: PUSH
11713: EMPTY
11714: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11715: LD_VAR 0 1
11719: PPUSH
11720: CALL_OW 266
11724: PUSH
11725: LD_INT 0
11727: PUSH
11728: LD_INT 1
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: IN
11735: NOT
11736: IFFALSE 11740
// exit ;
11738: GO 13380
// if name then
11740: LD_VAR 0 3
11744: IFFALSE 11760
// SetBName ( base_dep , name ) ;
11746: LD_VAR 0 1
11750: PPUSH
11751: LD_VAR 0 3
11755: PPUSH
11756: CALL_OW 500
// base := GetBase ( base_dep ) ;
11760: LD_ADDR_VAR 0 15
11764: PUSH
11765: LD_VAR 0 1
11769: PPUSH
11770: CALL_OW 274
11774: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11775: LD_ADDR_VAR 0 16
11779: PUSH
11780: LD_VAR 0 1
11784: PPUSH
11785: CALL_OW 255
11789: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11790: LD_ADDR_VAR 0 17
11794: PUSH
11795: LD_VAR 0 1
11799: PPUSH
11800: CALL_OW 248
11804: ST_TO_ADDR
// if sources then
11805: LD_VAR 0 5
11809: IFFALSE 11856
// for i = 1 to 3 do
11811: LD_ADDR_VAR 0 8
11815: PUSH
11816: DOUBLE
11817: LD_INT 1
11819: DEC
11820: ST_TO_ADDR
11821: LD_INT 3
11823: PUSH
11824: FOR_TO
11825: IFFALSE 11854
// AddResourceType ( base , i , sources [ i ] ) ;
11827: LD_VAR 0 15
11831: PPUSH
11832: LD_VAR 0 8
11836: PPUSH
11837: LD_VAR 0 5
11841: PUSH
11842: LD_VAR 0 8
11846: ARRAY
11847: PPUSH
11848: CALL_OW 276
11852: GO 11824
11854: POP
11855: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11856: LD_ADDR_VAR 0 18
11860: PUSH
11861: LD_VAR 0 15
11865: PPUSH
11866: LD_VAR 0 2
11870: PPUSH
11871: LD_INT 1
11873: PPUSH
11874: CALL 11115 0 3
11878: ST_TO_ADDR
// InitHc ;
11879: CALL_OW 19
// InitUc ;
11883: CALL_OW 18
// uc_side := side ;
11887: LD_ADDR_OWVAR 20
11891: PUSH
11892: LD_VAR 0 16
11896: ST_TO_ADDR
// uc_nation := nation ;
11897: LD_ADDR_OWVAR 21
11901: PUSH
11902: LD_VAR 0 17
11906: ST_TO_ADDR
// if buildings then
11907: LD_VAR 0 18
11911: IFFALSE 13239
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11913: LD_ADDR_VAR 0 19
11917: PUSH
11918: LD_VAR 0 18
11922: PPUSH
11923: LD_INT 2
11925: PUSH
11926: LD_INT 30
11928: PUSH
11929: LD_INT 29
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 30
11938: PUSH
11939: LD_INT 30
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: PPUSH
11951: CALL_OW 72
11955: ST_TO_ADDR
// if tmp then
11956: LD_VAR 0 19
11960: IFFALSE 12008
// for i in tmp do
11962: LD_ADDR_VAR 0 8
11966: PUSH
11967: LD_VAR 0 19
11971: PUSH
11972: FOR_IN
11973: IFFALSE 12006
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11975: LD_VAR 0 8
11979: PPUSH
11980: CALL_OW 250
11984: PPUSH
11985: LD_VAR 0 8
11989: PPUSH
11990: CALL_OW 251
11994: PPUSH
11995: LD_VAR 0 16
11999: PPUSH
12000: CALL_OW 441
12004: GO 11972
12006: POP
12007: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12008: LD_VAR 0 18
12012: PPUSH
12013: LD_INT 2
12015: PUSH
12016: LD_INT 30
12018: PUSH
12019: LD_INT 32
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 30
12028: PUSH
12029: LD_INT 33
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: LIST
12040: PPUSH
12041: CALL_OW 72
12045: IFFALSE 12133
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12047: LD_ADDR_VAR 0 8
12051: PUSH
12052: LD_VAR 0 18
12056: PPUSH
12057: LD_INT 2
12059: PUSH
12060: LD_INT 30
12062: PUSH
12063: LD_INT 32
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: LD_INT 30
12072: PUSH
12073: LD_INT 33
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: PPUSH
12085: CALL_OW 72
12089: PUSH
12090: FOR_IN
12091: IFFALSE 12131
// begin if not GetBWeapon ( i ) then
12093: LD_VAR 0 8
12097: PPUSH
12098: CALL_OW 269
12102: NOT
12103: IFFALSE 12129
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12105: LD_VAR 0 8
12109: PPUSH
12110: LD_VAR 0 8
12114: PPUSH
12115: LD_VAR 0 2
12119: PPUSH
12120: CALL 13385 0 2
12124: PPUSH
12125: CALL_OW 431
// end ;
12129: GO 12090
12131: POP
12132: POP
// end ; for i = 1 to personel do
12133: LD_ADDR_VAR 0 8
12137: PUSH
12138: DOUBLE
12139: LD_INT 1
12141: DEC
12142: ST_TO_ADDR
12143: LD_VAR 0 6
12147: PUSH
12148: FOR_TO
12149: IFFALSE 13219
// begin if i > 4 then
12151: LD_VAR 0 8
12155: PUSH
12156: LD_INT 4
12158: GREATER
12159: IFFALSE 12163
// break ;
12161: GO 13219
// case i of 1 :
12163: LD_VAR 0 8
12167: PUSH
12168: LD_INT 1
12170: DOUBLE
12171: EQUAL
12172: IFTRUE 12176
12174: GO 12256
12176: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12177: LD_ADDR_VAR 0 12
12181: PUSH
12182: LD_VAR 0 18
12186: PPUSH
12187: LD_INT 22
12189: PUSH
12190: LD_VAR 0 16
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 58
12201: PUSH
12202: EMPTY
12203: LIST
12204: PUSH
12205: LD_INT 2
12207: PUSH
12208: LD_INT 30
12210: PUSH
12211: LD_INT 32
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 30
12220: PUSH
12221: LD_INT 4
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 30
12230: PUSH
12231: LD_INT 5
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 72
12253: ST_TO_ADDR
12254: GO 12478
12256: LD_INT 2
12258: DOUBLE
12259: EQUAL
12260: IFTRUE 12264
12262: GO 12326
12264: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12265: LD_ADDR_VAR 0 12
12269: PUSH
12270: LD_VAR 0 18
12274: PPUSH
12275: LD_INT 22
12277: PUSH
12278: LD_VAR 0 16
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: LD_INT 30
12292: PUSH
12293: LD_INT 0
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 30
12302: PUSH
12303: LD_INT 1
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: LIST
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PPUSH
12319: CALL_OW 72
12323: ST_TO_ADDR
12324: GO 12478
12326: LD_INT 3
12328: DOUBLE
12329: EQUAL
12330: IFTRUE 12334
12332: GO 12396
12334: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12335: LD_ADDR_VAR 0 12
12339: PUSH
12340: LD_VAR 0 18
12344: PPUSH
12345: LD_INT 22
12347: PUSH
12348: LD_VAR 0 16
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: LD_INT 2
12359: PUSH
12360: LD_INT 30
12362: PUSH
12363: LD_INT 2
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: LD_INT 30
12372: PUSH
12373: LD_INT 3
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: LIST
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PPUSH
12389: CALL_OW 72
12393: ST_TO_ADDR
12394: GO 12478
12396: LD_INT 4
12398: DOUBLE
12399: EQUAL
12400: IFTRUE 12404
12402: GO 12477
12404: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12405: LD_ADDR_VAR 0 12
12409: PUSH
12410: LD_VAR 0 18
12414: PPUSH
12415: LD_INT 22
12417: PUSH
12418: LD_VAR 0 16
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: LD_INT 2
12429: PUSH
12430: LD_INT 30
12432: PUSH
12433: LD_INT 6
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 30
12442: PUSH
12443: LD_INT 7
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: LD_INT 30
12452: PUSH
12453: LD_INT 8
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PPUSH
12470: CALL_OW 72
12474: ST_TO_ADDR
12475: GO 12478
12477: POP
// if i = 1 then
12478: LD_VAR 0 8
12482: PUSH
12483: LD_INT 1
12485: EQUAL
12486: IFFALSE 12597
// begin tmp := [ ] ;
12488: LD_ADDR_VAR 0 19
12492: PUSH
12493: EMPTY
12494: ST_TO_ADDR
// for j in f do
12495: LD_ADDR_VAR 0 9
12499: PUSH
12500: LD_VAR 0 12
12504: PUSH
12505: FOR_IN
12506: IFFALSE 12579
// if GetBType ( j ) = b_bunker then
12508: LD_VAR 0 9
12512: PPUSH
12513: CALL_OW 266
12517: PUSH
12518: LD_INT 32
12520: EQUAL
12521: IFFALSE 12548
// tmp := Insert ( tmp , 1 , j ) else
12523: LD_ADDR_VAR 0 19
12527: PUSH
12528: LD_VAR 0 19
12532: PPUSH
12533: LD_INT 1
12535: PPUSH
12536: LD_VAR 0 9
12540: PPUSH
12541: CALL_OW 2
12545: ST_TO_ADDR
12546: GO 12577
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12548: LD_ADDR_VAR 0 19
12552: PUSH
12553: LD_VAR 0 19
12557: PPUSH
12558: LD_VAR 0 19
12562: PUSH
12563: LD_INT 1
12565: PLUS
12566: PPUSH
12567: LD_VAR 0 9
12571: PPUSH
12572: CALL_OW 2
12576: ST_TO_ADDR
12577: GO 12505
12579: POP
12580: POP
// if tmp then
12581: LD_VAR 0 19
12585: IFFALSE 12597
// f := tmp ;
12587: LD_ADDR_VAR 0 12
12591: PUSH
12592: LD_VAR 0 19
12596: ST_TO_ADDR
// end ; x := personel [ i ] ;
12597: LD_ADDR_VAR 0 13
12601: PUSH
12602: LD_VAR 0 6
12606: PUSH
12607: LD_VAR 0 8
12611: ARRAY
12612: ST_TO_ADDR
// if x = - 1 then
12613: LD_VAR 0 13
12617: PUSH
12618: LD_INT 1
12620: NEG
12621: EQUAL
12622: IFFALSE 12833
// begin for j in f do
12624: LD_ADDR_VAR 0 9
12628: PUSH
12629: LD_VAR 0 12
12633: PUSH
12634: FOR_IN
12635: IFFALSE 12829
// repeat InitHc ;
12637: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12641: LD_VAR 0 9
12645: PPUSH
12646: CALL_OW 266
12650: PUSH
12651: LD_INT 5
12653: EQUAL
12654: IFFALSE 12724
// begin if UnitsInside ( j ) < 3 then
12656: LD_VAR 0 9
12660: PPUSH
12661: CALL_OW 313
12665: PUSH
12666: LD_INT 3
12668: LESS
12669: IFFALSE 12705
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12671: LD_INT 0
12673: PPUSH
12674: LD_INT 5
12676: PUSH
12677: LD_INT 8
12679: PUSH
12680: LD_INT 9
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: LIST
12687: PUSH
12688: LD_VAR 0 17
12692: ARRAY
12693: PPUSH
12694: LD_VAR 0 4
12698: PPUSH
12699: CALL_OW 380
12703: GO 12722
// PrepareHuman ( false , i , skill ) ;
12705: LD_INT 0
12707: PPUSH
12708: LD_VAR 0 8
12712: PPUSH
12713: LD_VAR 0 4
12717: PPUSH
12718: CALL_OW 380
// end else
12722: GO 12741
// PrepareHuman ( false , i , skill ) ;
12724: LD_INT 0
12726: PPUSH
12727: LD_VAR 0 8
12731: PPUSH
12732: LD_VAR 0 4
12736: PPUSH
12737: CALL_OW 380
// un := CreateHuman ;
12741: LD_ADDR_VAR 0 14
12745: PUSH
12746: CALL_OW 44
12750: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12751: LD_ADDR_VAR 0 7
12755: PUSH
12756: LD_VAR 0 7
12760: PPUSH
12761: LD_INT 1
12763: PPUSH
12764: LD_VAR 0 14
12768: PPUSH
12769: CALL_OW 2
12773: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12774: LD_VAR 0 14
12778: PPUSH
12779: LD_VAR 0 9
12783: PPUSH
12784: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12788: LD_VAR 0 9
12792: PPUSH
12793: CALL_OW 313
12797: PUSH
12798: LD_INT 6
12800: EQUAL
12801: IFTRUE 12825
12803: PUSH
12804: LD_VAR 0 9
12808: PPUSH
12809: CALL_OW 266
12813: PUSH
12814: LD_INT 32
12816: PUSH
12817: LD_INT 31
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: IN
12824: OR
12825: IFFALSE 12637
12827: GO 12634
12829: POP
12830: POP
// end else
12831: GO 13217
// for j = 1 to x do
12833: LD_ADDR_VAR 0 9
12837: PUSH
12838: DOUBLE
12839: LD_INT 1
12841: DEC
12842: ST_TO_ADDR
12843: LD_VAR 0 13
12847: PUSH
12848: FOR_TO
12849: IFFALSE 13215
// begin InitHc ;
12851: CALL_OW 19
// if not f then
12855: LD_VAR 0 12
12859: NOT
12860: IFFALSE 12949
// begin PrepareHuman ( false , i , skill ) ;
12862: LD_INT 0
12864: PPUSH
12865: LD_VAR 0 8
12869: PPUSH
12870: LD_VAR 0 4
12874: PPUSH
12875: CALL_OW 380
// un := CreateHuman ;
12879: LD_ADDR_VAR 0 14
12883: PUSH
12884: CALL_OW 44
12888: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12889: LD_ADDR_VAR 0 7
12893: PUSH
12894: LD_VAR 0 7
12898: PPUSH
12899: LD_INT 1
12901: PPUSH
12902: LD_VAR 0 14
12906: PPUSH
12907: CALL_OW 2
12911: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12912: LD_VAR 0 14
12916: PPUSH
12917: LD_VAR 0 1
12921: PPUSH
12922: CALL_OW 250
12926: PPUSH
12927: LD_VAR 0 1
12931: PPUSH
12932: CALL_OW 251
12936: PPUSH
12937: LD_INT 10
12939: PPUSH
12940: LD_INT 0
12942: PPUSH
12943: CALL_OW 50
// continue ;
12947: GO 12848
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12949: LD_VAR 0 12
12953: PUSH
12954: LD_INT 1
12956: ARRAY
12957: PPUSH
12958: CALL_OW 313
12962: IFFALSE 12990
12964: PUSH
12965: LD_VAR 0 12
12969: PUSH
12970: LD_INT 1
12972: ARRAY
12973: PPUSH
12974: CALL_OW 266
12978: PUSH
12979: LD_INT 32
12981: PUSH
12982: LD_INT 31
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: IN
12989: AND
12990: IFTRUE 13011
12992: PUSH
12993: LD_VAR 0 12
12997: PUSH
12998: LD_INT 1
13000: ARRAY
13001: PPUSH
13002: CALL_OW 313
13006: PUSH
13007: LD_INT 6
13009: EQUAL
13010: OR
13011: IFFALSE 13031
// f := Delete ( f , 1 ) ;
13013: LD_ADDR_VAR 0 12
13017: PUSH
13018: LD_VAR 0 12
13022: PPUSH
13023: LD_INT 1
13025: PPUSH
13026: CALL_OW 3
13030: ST_TO_ADDR
// if not f then
13031: LD_VAR 0 12
13035: NOT
13036: IFFALSE 13054
// begin x := x + 2 ;
13038: LD_ADDR_VAR 0 13
13042: PUSH
13043: LD_VAR 0 13
13047: PUSH
13048: LD_INT 2
13050: PLUS
13051: ST_TO_ADDR
// continue ;
13052: GO 12848
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13054: LD_VAR 0 12
13058: PUSH
13059: LD_INT 1
13061: ARRAY
13062: PPUSH
13063: CALL_OW 266
13067: PUSH
13068: LD_INT 5
13070: EQUAL
13071: IFFALSE 13145
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13073: LD_VAR 0 12
13077: PUSH
13078: LD_INT 1
13080: ARRAY
13081: PPUSH
13082: CALL_OW 313
13086: PUSH
13087: LD_INT 3
13089: LESS
13090: IFFALSE 13126
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13092: LD_INT 0
13094: PPUSH
13095: LD_INT 5
13097: PUSH
13098: LD_INT 8
13100: PUSH
13101: LD_INT 9
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: LIST
13108: PUSH
13109: LD_VAR 0 17
13113: ARRAY
13114: PPUSH
13115: LD_VAR 0 4
13119: PPUSH
13120: CALL_OW 380
13124: GO 13143
// PrepareHuman ( false , i , skill ) ;
13126: LD_INT 0
13128: PPUSH
13129: LD_VAR 0 8
13133: PPUSH
13134: LD_VAR 0 4
13138: PPUSH
13139: CALL_OW 380
// end else
13143: GO 13162
// PrepareHuman ( false , i , skill ) ;
13145: LD_INT 0
13147: PPUSH
13148: LD_VAR 0 8
13152: PPUSH
13153: LD_VAR 0 4
13157: PPUSH
13158: CALL_OW 380
// un := CreateHuman ;
13162: LD_ADDR_VAR 0 14
13166: PUSH
13167: CALL_OW 44
13171: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13172: LD_ADDR_VAR 0 7
13176: PUSH
13177: LD_VAR 0 7
13181: PPUSH
13182: LD_INT 1
13184: PPUSH
13185: LD_VAR 0 14
13189: PPUSH
13190: CALL_OW 2
13194: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13195: LD_VAR 0 14
13199: PPUSH
13200: LD_VAR 0 12
13204: PUSH
13205: LD_INT 1
13207: ARRAY
13208: PPUSH
13209: CALL_OW 52
// end ;
13213: GO 12848
13215: POP
13216: POP
// end ;
13217: GO 12148
13219: POP
13220: POP
// result := result ^ buildings ;
13221: LD_ADDR_VAR 0 7
13225: PUSH
13226: LD_VAR 0 7
13230: PUSH
13231: LD_VAR 0 18
13235: ADD
13236: ST_TO_ADDR
// end else
13237: GO 13380
// begin for i = 1 to personel do
13239: LD_ADDR_VAR 0 8
13243: PUSH
13244: DOUBLE
13245: LD_INT 1
13247: DEC
13248: ST_TO_ADDR
13249: LD_VAR 0 6
13253: PUSH
13254: FOR_TO
13255: IFFALSE 13378
// begin if i > 4 then
13257: LD_VAR 0 8
13261: PUSH
13262: LD_INT 4
13264: GREATER
13265: IFFALSE 13269
// break ;
13267: GO 13378
// x := personel [ i ] ;
13269: LD_ADDR_VAR 0 13
13273: PUSH
13274: LD_VAR 0 6
13278: PUSH
13279: LD_VAR 0 8
13283: ARRAY
13284: ST_TO_ADDR
// if x = - 1 then
13285: LD_VAR 0 13
13289: PUSH
13290: LD_INT 1
13292: NEG
13293: EQUAL
13294: IFFALSE 13298
// continue ;
13296: GO 13254
// PrepareHuman ( false , i , skill ) ;
13298: LD_INT 0
13300: PPUSH
13301: LD_VAR 0 8
13305: PPUSH
13306: LD_VAR 0 4
13310: PPUSH
13311: CALL_OW 380
// un := CreateHuman ;
13315: LD_ADDR_VAR 0 14
13319: PUSH
13320: CALL_OW 44
13324: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13325: LD_VAR 0 14
13329: PPUSH
13330: LD_VAR 0 1
13334: PPUSH
13335: CALL_OW 250
13339: PPUSH
13340: LD_VAR 0 1
13344: PPUSH
13345: CALL_OW 251
13349: PPUSH
13350: LD_INT 10
13352: PPUSH
13353: LD_INT 0
13355: PPUSH
13356: CALL_OW 50
// result := result ^ un ;
13360: LD_ADDR_VAR 0 7
13364: PUSH
13365: LD_VAR 0 7
13369: PUSH
13370: LD_VAR 0 14
13374: ADD
13375: ST_TO_ADDR
// end ;
13376: GO 13254
13378: POP
13379: POP
// end ; end ;
13380: LD_VAR 0 7
13384: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13385: LD_INT 0
13387: PPUSH
13388: PPUSH
13389: PPUSH
13390: PPUSH
13391: PPUSH
13392: PPUSH
13393: PPUSH
13394: PPUSH
13395: PPUSH
13396: PPUSH
13397: PPUSH
13398: PPUSH
13399: PPUSH
13400: PPUSH
13401: PPUSH
13402: PPUSH
// result := false ;
13403: LD_ADDR_VAR 0 3
13407: PUSH
13408: LD_INT 0
13410: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13411: LD_VAR 0 1
13415: NOT
13416: IFTRUE 13441
13418: PUSH
13419: LD_VAR 0 1
13423: PPUSH
13424: CALL_OW 266
13428: PUSH
13429: LD_INT 32
13431: PUSH
13432: LD_INT 33
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: IN
13439: NOT
13440: OR
13441: IFFALSE 13445
// exit ;
13443: GO 14580
// nat := GetNation ( tower ) ;
13445: LD_ADDR_VAR 0 12
13449: PUSH
13450: LD_VAR 0 1
13454: PPUSH
13455: CALL_OW 248
13459: ST_TO_ADDR
// side := GetSide ( tower ) ;
13460: LD_ADDR_VAR 0 16
13464: PUSH
13465: LD_VAR 0 1
13469: PPUSH
13470: CALL_OW 255
13474: ST_TO_ADDR
// x := GetX ( tower ) ;
13475: LD_ADDR_VAR 0 10
13479: PUSH
13480: LD_VAR 0 1
13484: PPUSH
13485: CALL_OW 250
13489: ST_TO_ADDR
// y := GetY ( tower ) ;
13490: LD_ADDR_VAR 0 11
13494: PUSH
13495: LD_VAR 0 1
13499: PPUSH
13500: CALL_OW 251
13504: ST_TO_ADDR
// if not x or not y then
13505: LD_VAR 0 10
13509: NOT
13510: IFTRUE 13519
13512: PUSH
13513: LD_VAR 0 11
13517: NOT
13518: OR
13519: IFFALSE 13523
// exit ;
13521: GO 14580
// weapon := 0 ;
13523: LD_ADDR_VAR 0 18
13527: PUSH
13528: LD_INT 0
13530: ST_TO_ADDR
// fac_list := [ ] ;
13531: LD_ADDR_VAR 0 17
13535: PUSH
13536: EMPTY
13537: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13538: LD_ADDR_VAR 0 6
13542: PUSH
13543: LD_VAR 0 1
13547: PPUSH
13548: CALL_OW 274
13552: PPUSH
13553: LD_VAR 0 2
13557: PPUSH
13558: LD_INT 0
13560: PPUSH
13561: CALL 11115 0 3
13565: PPUSH
13566: LD_INT 30
13568: PUSH
13569: LD_INT 3
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PPUSH
13576: CALL_OW 72
13580: ST_TO_ADDR
// if not factories then
13581: LD_VAR 0 6
13585: NOT
13586: IFFALSE 13590
// exit ;
13588: GO 14580
// for i in factories do
13590: LD_ADDR_VAR 0 8
13594: PUSH
13595: LD_VAR 0 6
13599: PUSH
13600: FOR_IN
13601: IFFALSE 13626
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13603: LD_ADDR_VAR 0 17
13607: PUSH
13608: LD_VAR 0 17
13612: PUSH
13613: LD_VAR 0 8
13617: PPUSH
13618: CALL_OW 478
13622: UNION
13623: ST_TO_ADDR
13624: GO 13600
13626: POP
13627: POP
// if not fac_list then
13628: LD_VAR 0 17
13632: NOT
13633: IFFALSE 13637
// exit ;
13635: GO 14580
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13637: LD_ADDR_VAR 0 5
13641: PUSH
13642: LD_INT 4
13644: PUSH
13645: LD_INT 5
13647: PUSH
13648: LD_INT 9
13650: PUSH
13651: LD_INT 10
13653: PUSH
13654: LD_INT 6
13656: PUSH
13657: LD_INT 7
13659: PUSH
13660: LD_INT 11
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: PUSH
13672: LD_INT 27
13674: PUSH
13675: LD_INT 28
13677: PUSH
13678: LD_INT 26
13680: PUSH
13681: LD_INT 30
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: PUSH
13690: LD_INT 43
13692: PUSH
13693: LD_INT 44
13695: PUSH
13696: LD_INT 46
13698: PUSH
13699: LD_INT 45
13701: PUSH
13702: LD_INT 47
13704: PUSH
13705: LD_INT 49
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_VAR 0 12
13725: ARRAY
13726: ST_TO_ADDR
// list := list isect fac_list ;
13727: LD_ADDR_VAR 0 5
13731: PUSH
13732: LD_VAR 0 5
13736: PUSH
13737: LD_VAR 0 17
13741: ISECT
13742: ST_TO_ADDR
// if not list then
13743: LD_VAR 0 5
13747: NOT
13748: IFFALSE 13752
// exit ;
13750: GO 14580
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13752: LD_VAR 0 12
13756: PUSH
13757: LD_INT 3
13759: EQUAL
13760: IFFALSE 13772
13762: PUSH
13763: LD_INT 49
13765: PUSH
13766: LD_VAR 0 5
13770: IN
13771: AND
13772: IFFALSE 13792
13774: PUSH
13775: LD_INT 31
13777: PPUSH
13778: LD_VAR 0 16
13782: PPUSH
13783: CALL_OW 321
13787: PUSH
13788: LD_INT 2
13790: EQUAL
13791: AND
13792: IFFALSE 13852
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13794: LD_INT 22
13796: PUSH
13797: LD_VAR 0 16
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: LD_INT 35
13808: PUSH
13809: LD_INT 49
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PUSH
13816: LD_INT 91
13818: PUSH
13819: LD_VAR 0 1
13823: PUSH
13824: LD_INT 10
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: LIST
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: LIST
13836: PPUSH
13837: CALL_OW 69
13841: NOT
13842: IFFALSE 13852
// weapon := ru_time_lapser ;
13844: LD_ADDR_VAR 0 18
13848: PUSH
13849: LD_INT 49
13851: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13852: LD_VAR 0 12
13856: PUSH
13857: LD_INT 1
13859: PUSH
13860: LD_INT 2
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: IN
13867: IFFALSE 13891
13869: PUSH
13870: LD_INT 11
13872: PUSH
13873: LD_VAR 0 5
13877: IN
13878: IFTRUE 13890
13880: PUSH
13881: LD_INT 30
13883: PUSH
13884: LD_VAR 0 5
13888: IN
13889: OR
13890: AND
13891: IFFALSE 13911
13893: PUSH
13894: LD_INT 6
13896: PPUSH
13897: LD_VAR 0 16
13901: PPUSH
13902: CALL_OW 321
13906: PUSH
13907: LD_INT 2
13909: EQUAL
13910: AND
13911: IFFALSE 14078
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13913: LD_INT 22
13915: PUSH
13916: LD_VAR 0 16
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: LD_INT 2
13927: PUSH
13928: LD_INT 35
13930: PUSH
13931: LD_INT 11
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: LD_INT 35
13940: PUSH
13941: LD_INT 30
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: LIST
13952: PUSH
13953: LD_INT 91
13955: PUSH
13956: LD_VAR 0 1
13960: PUSH
13961: LD_INT 18
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: LIST
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: LIST
13973: PPUSH
13974: CALL_OW 69
13978: NOT
13979: IFFALSE 14055
13981: PUSH
13982: LD_INT 22
13984: PUSH
13985: LD_VAR 0 16
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: PUSH
13994: LD_INT 2
13996: PUSH
13997: LD_INT 30
13999: PUSH
14000: LD_INT 32
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: LD_INT 30
14009: PUSH
14010: LD_INT 33
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: LIST
14021: PUSH
14022: LD_INT 91
14024: PUSH
14025: LD_VAR 0 1
14029: PUSH
14030: LD_INT 12
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: LIST
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: LIST
14042: PUSH
14043: EMPTY
14044: LIST
14045: PPUSH
14046: CALL_OW 69
14050: PUSH
14051: LD_INT 2
14053: GREATER
14054: AND
14055: IFFALSE 14078
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14057: LD_ADDR_VAR 0 18
14061: PUSH
14062: LD_INT 11
14064: PUSH
14065: LD_INT 30
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_VAR 0 12
14076: ARRAY
14077: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14078: LD_VAR 0 18
14082: NOT
14083: IFFALSE 14103
14085: PUSH
14086: LD_INT 40
14088: PPUSH
14089: LD_VAR 0 16
14093: PPUSH
14094: CALL_OW 321
14098: PUSH
14099: LD_INT 2
14101: EQUAL
14102: AND
14103: IFFALSE 14139
14105: PUSH
14106: LD_INT 7
14108: PUSH
14109: LD_VAR 0 5
14113: IN
14114: IFTRUE 14126
14116: PUSH
14117: LD_INT 28
14119: PUSH
14120: LD_VAR 0 5
14124: IN
14125: OR
14126: IFTRUE 14138
14128: PUSH
14129: LD_INT 45
14131: PUSH
14132: LD_VAR 0 5
14136: IN
14137: OR
14138: AND
14139: IFFALSE 14393
// begin hex := GetHexInfo ( x , y ) ;
14141: LD_ADDR_VAR 0 4
14145: PUSH
14146: LD_VAR 0 10
14150: PPUSH
14151: LD_VAR 0 11
14155: PPUSH
14156: CALL_OW 546
14160: ST_TO_ADDR
// if hex [ 1 ] then
14161: LD_VAR 0 4
14165: PUSH
14166: LD_INT 1
14168: ARRAY
14169: IFFALSE 14173
// exit ;
14171: GO 14580
// height := hex [ 2 ] ;
14173: LD_ADDR_VAR 0 15
14177: PUSH
14178: LD_VAR 0 4
14182: PUSH
14183: LD_INT 2
14185: ARRAY
14186: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14187: LD_ADDR_VAR 0 14
14191: PUSH
14192: LD_INT 0
14194: PUSH
14195: LD_INT 2
14197: PUSH
14198: LD_INT 3
14200: PUSH
14201: LD_INT 5
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: ST_TO_ADDR
// for i in tmp do
14210: LD_ADDR_VAR 0 8
14214: PUSH
14215: LD_VAR 0 14
14219: PUSH
14220: FOR_IN
14221: IFFALSE 14391
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14223: LD_ADDR_VAR 0 9
14227: PUSH
14228: LD_VAR 0 10
14232: PPUSH
14233: LD_VAR 0 8
14237: PPUSH
14238: LD_INT 5
14240: PPUSH
14241: CALL_OW 272
14245: PUSH
14246: LD_VAR 0 11
14250: PPUSH
14251: LD_VAR 0 8
14255: PPUSH
14256: LD_INT 5
14258: PPUSH
14259: CALL_OW 273
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14268: LD_VAR 0 9
14272: PUSH
14273: LD_INT 1
14275: ARRAY
14276: PPUSH
14277: LD_VAR 0 9
14281: PUSH
14282: LD_INT 2
14284: ARRAY
14285: PPUSH
14286: CALL_OW 488
14290: IFFALSE 14389
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14292: LD_ADDR_VAR 0 4
14296: PUSH
14297: LD_VAR 0 9
14301: PUSH
14302: LD_INT 1
14304: ARRAY
14305: PPUSH
14306: LD_VAR 0 9
14310: PUSH
14311: LD_INT 2
14313: ARRAY
14314: PPUSH
14315: CALL_OW 546
14319: ST_TO_ADDR
// if hex [ 1 ] then
14320: LD_VAR 0 4
14324: PUSH
14325: LD_INT 1
14327: ARRAY
14328: IFFALSE 14332
// continue ;
14330: GO 14220
// h := hex [ 2 ] ;
14332: LD_ADDR_VAR 0 13
14336: PUSH
14337: LD_VAR 0 4
14341: PUSH
14342: LD_INT 2
14344: ARRAY
14345: ST_TO_ADDR
// if h + 7 < height then
14346: LD_VAR 0 13
14350: PUSH
14351: LD_INT 7
14353: PLUS
14354: PUSH
14355: LD_VAR 0 15
14359: LESS
14360: IFFALSE 14389
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14362: LD_ADDR_VAR 0 18
14366: PUSH
14367: LD_INT 7
14369: PUSH
14370: LD_INT 28
14372: PUSH
14373: LD_INT 45
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: PUSH
14381: LD_VAR 0 12
14385: ARRAY
14386: ST_TO_ADDR
// break ;
14387: GO 14391
// end ; end ; end ;
14389: GO 14220
14391: POP
14392: POP
// end ; if not weapon then
14393: LD_VAR 0 18
14397: NOT
14398: IFFALSE 14458
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14400: LD_ADDR_VAR 0 5
14404: PUSH
14405: LD_VAR 0 5
14409: PUSH
14410: LD_INT 11
14412: PUSH
14413: LD_INT 30
14415: PUSH
14416: LD_INT 49
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: LIST
14423: DIFF
14424: ST_TO_ADDR
// if not list then
14425: LD_VAR 0 5
14429: NOT
14430: IFFALSE 14434
// exit ;
14432: GO 14580
// weapon := list [ rand ( 1 , list ) ] ;
14434: LD_ADDR_VAR 0 18
14438: PUSH
14439: LD_VAR 0 5
14443: PUSH
14444: LD_INT 1
14446: PPUSH
14447: LD_VAR 0 5
14451: PPUSH
14452: CALL_OW 12
14456: ARRAY
14457: ST_TO_ADDR
// end ; if weapon then
14458: LD_VAR 0 18
14462: IFFALSE 14580
// begin tmp := CostOfWeapon ( weapon ) ;
14464: LD_ADDR_VAR 0 14
14468: PUSH
14469: LD_VAR 0 18
14473: PPUSH
14474: CALL_OW 451
14478: ST_TO_ADDR
// j := GetBase ( tower ) ;
14479: LD_ADDR_VAR 0 9
14483: PUSH
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 274
14493: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14494: LD_VAR 0 9
14498: PPUSH
14499: LD_INT 1
14501: PPUSH
14502: CALL_OW 275
14506: PUSH
14507: LD_VAR 0 14
14511: PUSH
14512: LD_INT 1
14514: ARRAY
14515: GREATEREQUAL
14516: IFFALSE 14542
14518: PUSH
14519: LD_VAR 0 9
14523: PPUSH
14524: LD_INT 2
14526: PPUSH
14527: CALL_OW 275
14531: PUSH
14532: LD_VAR 0 14
14536: PUSH
14537: LD_INT 2
14539: ARRAY
14540: GREATEREQUAL
14541: AND
14542: IFFALSE 14568
14544: PUSH
14545: LD_VAR 0 9
14549: PPUSH
14550: LD_INT 3
14552: PPUSH
14553: CALL_OW 275
14557: PUSH
14558: LD_VAR 0 14
14562: PUSH
14563: LD_INT 3
14565: ARRAY
14566: GREATEREQUAL
14567: AND
14568: IFFALSE 14580
// result := weapon ;
14570: LD_ADDR_VAR 0 3
14574: PUSH
14575: LD_VAR 0 18
14579: ST_TO_ADDR
// end ; end ;
14580: LD_VAR 0 3
14584: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14585: LD_INT 0
14587: PPUSH
14588: PPUSH
// result := true ;
14589: LD_ADDR_VAR 0 3
14593: PUSH
14594: LD_INT 1
14596: ST_TO_ADDR
// if array1 = array2 then
14597: LD_VAR 0 1
14601: PUSH
14602: LD_VAR 0 2
14606: EQUAL
14607: IFFALSE 14667
// begin for i = 1 to array1 do
14609: LD_ADDR_VAR 0 4
14613: PUSH
14614: DOUBLE
14615: LD_INT 1
14617: DEC
14618: ST_TO_ADDR
14619: LD_VAR 0 1
14623: PUSH
14624: FOR_TO
14625: IFFALSE 14663
// if array1 [ i ] <> array2 [ i ] then
14627: LD_VAR 0 1
14631: PUSH
14632: LD_VAR 0 4
14636: ARRAY
14637: PUSH
14638: LD_VAR 0 2
14642: PUSH
14643: LD_VAR 0 4
14647: ARRAY
14648: NONEQUAL
14649: IFFALSE 14661
// begin result := false ;
14651: LD_ADDR_VAR 0 3
14655: PUSH
14656: LD_INT 0
14658: ST_TO_ADDR
// break ;
14659: GO 14663
// end ;
14661: GO 14624
14663: POP
14664: POP
// end else
14665: GO 14675
// result := false ;
14667: LD_ADDR_VAR 0 3
14671: PUSH
14672: LD_INT 0
14674: ST_TO_ADDR
// end ;
14675: LD_VAR 0 3
14679: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14680: LD_INT 0
14682: PPUSH
14683: PPUSH
// if not array1 or not array2 then
14684: LD_VAR 0 1
14688: NOT
14689: IFTRUE 14698
14691: PUSH
14692: LD_VAR 0 2
14696: NOT
14697: OR
14698: IFFALSE 14702
// exit ;
14700: GO 14766
// result := true ;
14702: LD_ADDR_VAR 0 3
14706: PUSH
14707: LD_INT 1
14709: ST_TO_ADDR
// for i = 1 to array1 do
14710: LD_ADDR_VAR 0 4
14714: PUSH
14715: DOUBLE
14716: LD_INT 1
14718: DEC
14719: ST_TO_ADDR
14720: LD_VAR 0 1
14724: PUSH
14725: FOR_TO
14726: IFFALSE 14764
// if array1 [ i ] <> array2 [ i ] then
14728: LD_VAR 0 1
14732: PUSH
14733: LD_VAR 0 4
14737: ARRAY
14738: PUSH
14739: LD_VAR 0 2
14743: PUSH
14744: LD_VAR 0 4
14748: ARRAY
14749: NONEQUAL
14750: IFFALSE 14762
// begin result := false ;
14752: LD_ADDR_VAR 0 3
14756: PUSH
14757: LD_INT 0
14759: ST_TO_ADDR
// break ;
14760: GO 14764
// end ;
14762: GO 14725
14764: POP
14765: POP
// end ;
14766: LD_VAR 0 3
14770: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14771: LD_INT 0
14773: PPUSH
14774: PPUSH
14775: PPUSH
// pom := GetBase ( fac ) ;
14776: LD_ADDR_VAR 0 5
14780: PUSH
14781: LD_VAR 0 1
14785: PPUSH
14786: CALL_OW 274
14790: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14791: LD_ADDR_VAR 0 4
14795: PUSH
14796: LD_VAR 0 2
14800: PUSH
14801: LD_INT 1
14803: ARRAY
14804: PPUSH
14805: LD_VAR 0 2
14809: PUSH
14810: LD_INT 2
14812: ARRAY
14813: PPUSH
14814: LD_VAR 0 2
14818: PUSH
14819: LD_INT 3
14821: ARRAY
14822: PPUSH
14823: LD_VAR 0 2
14827: PUSH
14828: LD_INT 4
14830: ARRAY
14831: PPUSH
14832: CALL_OW 449
14836: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14837: LD_ADDR_VAR 0 3
14841: PUSH
14842: LD_VAR 0 5
14846: PPUSH
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 275
14854: PUSH
14855: LD_VAR 0 4
14859: PUSH
14860: LD_INT 1
14862: ARRAY
14863: GREATEREQUAL
14864: IFFALSE 14890
14866: PUSH
14867: LD_VAR 0 5
14871: PPUSH
14872: LD_INT 2
14874: PPUSH
14875: CALL_OW 275
14879: PUSH
14880: LD_VAR 0 4
14884: PUSH
14885: LD_INT 2
14887: ARRAY
14888: GREATEREQUAL
14889: AND
14890: IFFALSE 14916
14892: PUSH
14893: LD_VAR 0 5
14897: PPUSH
14898: LD_INT 3
14900: PPUSH
14901: CALL_OW 275
14905: PUSH
14906: LD_VAR 0 4
14910: PUSH
14911: LD_INT 3
14913: ARRAY
14914: GREATEREQUAL
14915: AND
14916: ST_TO_ADDR
// end ;
14917: LD_VAR 0 3
14921: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14922: LD_INT 0
14924: PPUSH
14925: PPUSH
14926: PPUSH
14927: PPUSH
// pom := GetBase ( building ) ;
14928: LD_ADDR_VAR 0 3
14932: PUSH
14933: LD_VAR 0 1
14937: PPUSH
14938: CALL_OW 274
14942: ST_TO_ADDR
// if not pom then
14943: LD_VAR 0 3
14947: NOT
14948: IFFALSE 14952
// exit ;
14950: GO 15126
// btype := GetBType ( building ) ;
14952: LD_ADDR_VAR 0 5
14956: PUSH
14957: LD_VAR 0 1
14961: PPUSH
14962: CALL_OW 266
14966: ST_TO_ADDR
// if btype = b_armoury then
14967: LD_VAR 0 5
14971: PUSH
14972: LD_INT 4
14974: EQUAL
14975: IFFALSE 14985
// btype := b_barracks ;
14977: LD_ADDR_VAR 0 5
14981: PUSH
14982: LD_INT 5
14984: ST_TO_ADDR
// if btype = b_depot then
14985: LD_VAR 0 5
14989: PUSH
14990: LD_INT 0
14992: EQUAL
14993: IFFALSE 15003
// btype := b_warehouse ;
14995: LD_ADDR_VAR 0 5
14999: PUSH
15000: LD_INT 1
15002: ST_TO_ADDR
// if btype = b_workshop then
15003: LD_VAR 0 5
15007: PUSH
15008: LD_INT 2
15010: EQUAL
15011: IFFALSE 15021
// btype := b_factory ;
15013: LD_ADDR_VAR 0 5
15017: PUSH
15018: LD_INT 3
15020: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15021: LD_ADDR_VAR 0 4
15025: PUSH
15026: LD_VAR 0 5
15030: PPUSH
15031: LD_VAR 0 1
15035: PPUSH
15036: CALL_OW 248
15040: PPUSH
15041: CALL_OW 450
15045: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15046: LD_ADDR_VAR 0 2
15050: PUSH
15051: LD_VAR 0 3
15055: PPUSH
15056: LD_INT 1
15058: PPUSH
15059: CALL_OW 275
15063: PUSH
15064: LD_VAR 0 4
15068: PUSH
15069: LD_INT 1
15071: ARRAY
15072: GREATEREQUAL
15073: IFFALSE 15099
15075: PUSH
15076: LD_VAR 0 3
15080: PPUSH
15081: LD_INT 2
15083: PPUSH
15084: CALL_OW 275
15088: PUSH
15089: LD_VAR 0 4
15093: PUSH
15094: LD_INT 2
15096: ARRAY
15097: GREATEREQUAL
15098: AND
15099: IFFALSE 15125
15101: PUSH
15102: LD_VAR 0 3
15106: PPUSH
15107: LD_INT 3
15109: PPUSH
15110: CALL_OW 275
15114: PUSH
15115: LD_VAR 0 4
15119: PUSH
15120: LD_INT 3
15122: ARRAY
15123: GREATEREQUAL
15124: AND
15125: ST_TO_ADDR
// end ;
15126: LD_VAR 0 2
15130: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15131: LD_INT 0
15133: PPUSH
15134: PPUSH
15135: PPUSH
// pom := GetBase ( building ) ;
15136: LD_ADDR_VAR 0 4
15140: PUSH
15141: LD_VAR 0 1
15145: PPUSH
15146: CALL_OW 274
15150: ST_TO_ADDR
// if not pom then
15151: LD_VAR 0 4
15155: NOT
15156: IFFALSE 15160
// exit ;
15158: GO 15265
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15160: LD_ADDR_VAR 0 5
15164: PUSH
15165: LD_VAR 0 2
15169: PPUSH
15170: LD_VAR 0 1
15174: PPUSH
15175: CALL_OW 248
15179: PPUSH
15180: CALL_OW 450
15184: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15185: LD_ADDR_VAR 0 3
15189: PUSH
15190: LD_VAR 0 4
15194: PPUSH
15195: LD_INT 1
15197: PPUSH
15198: CALL_OW 275
15202: PUSH
15203: LD_VAR 0 5
15207: PUSH
15208: LD_INT 1
15210: ARRAY
15211: GREATEREQUAL
15212: IFFALSE 15238
15214: PUSH
15215: LD_VAR 0 4
15219: PPUSH
15220: LD_INT 2
15222: PPUSH
15223: CALL_OW 275
15227: PUSH
15228: LD_VAR 0 5
15232: PUSH
15233: LD_INT 2
15235: ARRAY
15236: GREATEREQUAL
15237: AND
15238: IFFALSE 15264
15240: PUSH
15241: LD_VAR 0 4
15245: PPUSH
15246: LD_INT 3
15248: PPUSH
15249: CALL_OW 275
15253: PUSH
15254: LD_VAR 0 5
15258: PUSH
15259: LD_INT 3
15261: ARRAY
15262: GREATEREQUAL
15263: AND
15264: ST_TO_ADDR
// end ;
15265: LD_VAR 0 3
15269: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15270: LD_INT 0
15272: PPUSH
15273: PPUSH
15274: PPUSH
15275: PPUSH
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
15281: PPUSH
15282: PPUSH
// result := false ;
15283: LD_ADDR_VAR 0 8
15287: PUSH
15288: LD_INT 0
15290: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15291: LD_VAR 0 5
15295: NOT
15296: IFTRUE 15305
15298: PUSH
15299: LD_VAR 0 1
15303: NOT
15304: OR
15305: IFTRUE 15314
15307: PUSH
15308: LD_VAR 0 2
15312: NOT
15313: OR
15314: IFTRUE 15323
15316: PUSH
15317: LD_VAR 0 3
15321: NOT
15322: OR
15323: IFFALSE 15327
// exit ;
15325: GO 16153
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15327: LD_ADDR_VAR 0 14
15331: PUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: LD_VAR 0 2
15341: PPUSH
15342: LD_VAR 0 3
15346: PPUSH
15347: LD_VAR 0 4
15351: PPUSH
15352: LD_VAR 0 5
15356: PUSH
15357: LD_INT 1
15359: ARRAY
15360: PPUSH
15361: CALL_OW 248
15365: PPUSH
15366: LD_INT 0
15368: PPUSH
15369: CALL 17434 0 6
15373: ST_TO_ADDR
// if not hexes then
15374: LD_VAR 0 14
15378: NOT
15379: IFFALSE 15383
// exit ;
15381: GO 16153
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15383: LD_ADDR_VAR 0 17
15387: PUSH
15388: LD_VAR 0 5
15392: PPUSH
15393: LD_INT 22
15395: PUSH
15396: LD_VAR 0 13
15400: PPUSH
15401: CALL_OW 255
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 2
15412: PUSH
15413: LD_INT 30
15415: PUSH
15416: LD_INT 0
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 30
15425: PUSH
15426: LD_INT 1
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: LIST
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PPUSH
15442: CALL_OW 72
15446: ST_TO_ADDR
// for i = 1 to hexes do
15447: LD_ADDR_VAR 0 9
15451: PUSH
15452: DOUBLE
15453: LD_INT 1
15455: DEC
15456: ST_TO_ADDR
15457: LD_VAR 0 14
15461: PUSH
15462: FOR_TO
15463: IFFALSE 16151
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15465: LD_ADDR_VAR 0 13
15469: PUSH
15470: LD_VAR 0 14
15474: PUSH
15475: LD_VAR 0 9
15479: ARRAY
15480: PUSH
15481: LD_INT 1
15483: ARRAY
15484: PPUSH
15485: LD_VAR 0 14
15489: PUSH
15490: LD_VAR 0 9
15494: ARRAY
15495: PUSH
15496: LD_INT 2
15498: ARRAY
15499: PPUSH
15500: CALL_OW 428
15504: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15505: LD_VAR 0 14
15509: PUSH
15510: LD_VAR 0 9
15514: ARRAY
15515: PUSH
15516: LD_INT 1
15518: ARRAY
15519: PPUSH
15520: LD_VAR 0 14
15524: PUSH
15525: LD_VAR 0 9
15529: ARRAY
15530: PUSH
15531: LD_INT 2
15533: ARRAY
15534: PPUSH
15535: CALL_OW 351
15539: IFTRUE 15578
15541: PUSH
15542: LD_VAR 0 14
15546: PUSH
15547: LD_VAR 0 9
15551: ARRAY
15552: PUSH
15553: LD_INT 1
15555: ARRAY
15556: PPUSH
15557: LD_VAR 0 14
15561: PUSH
15562: LD_VAR 0 9
15566: ARRAY
15567: PUSH
15568: LD_INT 2
15570: ARRAY
15571: PPUSH
15572: CALL_OW 488
15576: NOT
15577: OR
15578: IFTRUE 15595
15580: PUSH
15581: LD_VAR 0 13
15585: PPUSH
15586: CALL_OW 247
15590: PUSH
15591: LD_INT 3
15593: EQUAL
15594: OR
15595: IFFALSE 15601
// exit ;
15597: POP
15598: POP
15599: GO 16153
// if not tmp then
15601: LD_VAR 0 13
15605: NOT
15606: IFFALSE 15610
// continue ;
15608: GO 15462
// result := true ;
15610: LD_ADDR_VAR 0 8
15614: PUSH
15615: LD_INT 1
15617: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15618: LD_VAR 0 6
15622: IFFALSE 15639
15624: PUSH
15625: LD_VAR 0 13
15629: PPUSH
15630: CALL_OW 247
15634: PUSH
15635: LD_INT 2
15637: EQUAL
15638: AND
15639: IFFALSE 15656
15641: PUSH
15642: LD_VAR 0 13
15646: PPUSH
15647: CALL_OW 263
15651: PUSH
15652: LD_INT 1
15654: EQUAL
15655: AND
15656: IFFALSE 15820
// begin if IsDrivenBy ( tmp ) then
15658: LD_VAR 0 13
15662: PPUSH
15663: CALL_OW 311
15667: IFFALSE 15671
// continue ;
15669: GO 15462
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15671: LD_VAR 0 6
15675: PPUSH
15676: LD_INT 3
15678: PUSH
15679: LD_INT 60
15681: PUSH
15682: EMPTY
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 3
15691: PUSH
15692: LD_INT 55
15694: PUSH
15695: EMPTY
15696: LIST
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PPUSH
15706: CALL_OW 72
15710: IFFALSE 15818
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15712: LD_ADDR_VAR 0 18
15716: PUSH
15717: LD_VAR 0 6
15721: PPUSH
15722: LD_INT 3
15724: PUSH
15725: LD_INT 60
15727: PUSH
15728: EMPTY
15729: LIST
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 3
15737: PUSH
15738: LD_INT 55
15740: PUSH
15741: EMPTY
15742: LIST
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PPUSH
15752: CALL_OW 72
15756: PUSH
15757: LD_INT 1
15759: ARRAY
15760: ST_TO_ADDR
// if IsInUnit ( driver ) then
15761: LD_VAR 0 18
15765: PPUSH
15766: CALL_OW 310
15770: IFFALSE 15781
// ComExit ( driver ) ;
15772: LD_VAR 0 18
15776: PPUSH
15777: CALL 41434 0 1
// AddComEnterUnit ( driver , tmp ) ;
15781: LD_VAR 0 18
15785: PPUSH
15786: LD_VAR 0 13
15790: PPUSH
15791: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15795: LD_VAR 0 18
15799: PPUSH
15800: LD_VAR 0 7
15804: PPUSH
15805: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15809: LD_VAR 0 18
15813: PPUSH
15814: CALL_OW 181
// end ; continue ;
15818: GO 15462
// end ; if not cleaners or not tmp in cleaners then
15820: LD_VAR 0 6
15824: NOT
15825: IFTRUE 15840
15827: PUSH
15828: LD_VAR 0 13
15832: PUSH
15833: LD_VAR 0 6
15837: IN
15838: NOT
15839: OR
15840: IFFALSE 16149
// begin if dep then
15842: LD_VAR 0 17
15846: IFFALSE 15982
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15848: LD_ADDR_VAR 0 16
15852: PUSH
15853: LD_VAR 0 17
15857: PUSH
15858: LD_INT 1
15860: ARRAY
15861: PPUSH
15862: CALL_OW 250
15866: PPUSH
15867: LD_VAR 0 17
15871: PUSH
15872: LD_INT 1
15874: ARRAY
15875: PPUSH
15876: CALL_OW 254
15880: PPUSH
15881: LD_INT 5
15883: PPUSH
15884: CALL_OW 272
15888: PUSH
15889: LD_VAR 0 17
15893: PUSH
15894: LD_INT 1
15896: ARRAY
15897: PPUSH
15898: CALL_OW 251
15902: PPUSH
15903: LD_VAR 0 17
15907: PUSH
15908: LD_INT 1
15910: ARRAY
15911: PPUSH
15912: CALL_OW 254
15916: PPUSH
15917: LD_INT 5
15919: PPUSH
15920: CALL_OW 273
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15929: LD_VAR 0 16
15933: PUSH
15934: LD_INT 1
15936: ARRAY
15937: PPUSH
15938: LD_VAR 0 16
15942: PUSH
15943: LD_INT 2
15945: ARRAY
15946: PPUSH
15947: CALL_OW 488
15951: IFFALSE 15982
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15953: LD_VAR 0 13
15957: PPUSH
15958: LD_VAR 0 16
15962: PUSH
15963: LD_INT 1
15965: ARRAY
15966: PPUSH
15967: LD_VAR 0 16
15971: PUSH
15972: LD_INT 2
15974: ARRAY
15975: PPUSH
15976: CALL_OW 111
// continue ;
15980: GO 15462
// end ; end ; r := GetDir ( tmp ) ;
15982: LD_ADDR_VAR 0 15
15986: PUSH
15987: LD_VAR 0 13
15991: PPUSH
15992: CALL_OW 254
15996: ST_TO_ADDR
// if r = 5 then
15997: LD_VAR 0 15
16001: PUSH
16002: LD_INT 5
16004: EQUAL
16005: IFFALSE 16015
// r := 0 ;
16007: LD_ADDR_VAR 0 15
16011: PUSH
16012: LD_INT 0
16014: ST_TO_ADDR
// for j = r to 5 do
16015: LD_ADDR_VAR 0 10
16019: PUSH
16020: DOUBLE
16021: LD_VAR 0 15
16025: DEC
16026: ST_TO_ADDR
16027: LD_INT 5
16029: PUSH
16030: FOR_TO
16031: IFFALSE 16147
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16033: LD_ADDR_VAR 0 11
16037: PUSH
16038: LD_VAR 0 13
16042: PPUSH
16043: CALL_OW 250
16047: PPUSH
16048: LD_VAR 0 10
16052: PPUSH
16053: LD_INT 2
16055: PPUSH
16056: CALL_OW 272
16060: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16061: LD_ADDR_VAR 0 12
16065: PUSH
16066: LD_VAR 0 13
16070: PPUSH
16071: CALL_OW 251
16075: PPUSH
16076: LD_VAR 0 10
16080: PPUSH
16081: LD_INT 2
16083: PPUSH
16084: CALL_OW 273
16088: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16089: LD_VAR 0 11
16093: PPUSH
16094: LD_VAR 0 12
16098: PPUSH
16099: CALL_OW 488
16103: IFFALSE 16122
16105: PUSH
16106: LD_VAR 0 11
16110: PPUSH
16111: LD_VAR 0 12
16115: PPUSH
16116: CALL_OW 428
16120: NOT
16121: AND
16122: IFFALSE 16145
// begin ComMoveXY ( tmp , _x , _y ) ;
16124: LD_VAR 0 13
16128: PPUSH
16129: LD_VAR 0 11
16133: PPUSH
16134: LD_VAR 0 12
16138: PPUSH
16139: CALL_OW 111
// break ;
16143: GO 16147
// end ; end ;
16145: GO 16030
16147: POP
16148: POP
// end ; end ;
16149: GO 15462
16151: POP
16152: POP
// end ;
16153: LD_VAR 0 8
16157: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16158: LD_INT 0
16160: PPUSH
// result := true ;
16161: LD_ADDR_VAR 0 3
16165: PUSH
16166: LD_INT 1
16168: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16169: LD_VAR 0 2
16173: PUSH
16174: LD_INT 24
16176: DOUBLE
16177: EQUAL
16178: IFTRUE 16188
16180: LD_INT 33
16182: DOUBLE
16183: EQUAL
16184: IFTRUE 16188
16186: GO 16213
16188: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16189: LD_ADDR_VAR 0 3
16193: PUSH
16194: LD_INT 32
16196: PPUSH
16197: LD_VAR 0 1
16201: PPUSH
16202: CALL_OW 321
16206: PUSH
16207: LD_INT 2
16209: EQUAL
16210: ST_TO_ADDR
16211: GO 16529
16213: LD_INT 20
16215: DOUBLE
16216: EQUAL
16217: IFTRUE 16221
16219: GO 16246
16221: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16222: LD_ADDR_VAR 0 3
16226: PUSH
16227: LD_INT 6
16229: PPUSH
16230: LD_VAR 0 1
16234: PPUSH
16235: CALL_OW 321
16239: PUSH
16240: LD_INT 2
16242: EQUAL
16243: ST_TO_ADDR
16244: GO 16529
16246: LD_INT 22
16248: DOUBLE
16249: EQUAL
16250: IFTRUE 16260
16252: LD_INT 36
16254: DOUBLE
16255: EQUAL
16256: IFTRUE 16260
16258: GO 16285
16260: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16261: LD_ADDR_VAR 0 3
16265: PUSH
16266: LD_INT 15
16268: PPUSH
16269: LD_VAR 0 1
16273: PPUSH
16274: CALL_OW 321
16278: PUSH
16279: LD_INT 2
16281: EQUAL
16282: ST_TO_ADDR
16283: GO 16529
16285: LD_INT 30
16287: DOUBLE
16288: EQUAL
16289: IFTRUE 16293
16291: GO 16318
16293: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16294: LD_ADDR_VAR 0 3
16298: PUSH
16299: LD_INT 20
16301: PPUSH
16302: LD_VAR 0 1
16306: PPUSH
16307: CALL_OW 321
16311: PUSH
16312: LD_INT 2
16314: EQUAL
16315: ST_TO_ADDR
16316: GO 16529
16318: LD_INT 28
16320: DOUBLE
16321: EQUAL
16322: IFTRUE 16332
16324: LD_INT 21
16326: DOUBLE
16327: EQUAL
16328: IFTRUE 16332
16330: GO 16357
16332: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16333: LD_ADDR_VAR 0 3
16337: PUSH
16338: LD_INT 21
16340: PPUSH
16341: LD_VAR 0 1
16345: PPUSH
16346: CALL_OW 321
16350: PUSH
16351: LD_INT 2
16353: EQUAL
16354: ST_TO_ADDR
16355: GO 16529
16357: LD_INT 16
16359: DOUBLE
16360: EQUAL
16361: IFTRUE 16365
16363: GO 16390
16365: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16366: LD_ADDR_VAR 0 3
16370: PUSH
16371: LD_INT 84
16373: PPUSH
16374: LD_VAR 0 1
16378: PPUSH
16379: CALL_OW 321
16383: PUSH
16384: LD_INT 2
16386: EQUAL
16387: ST_TO_ADDR
16388: GO 16529
16390: LD_INT 19
16392: DOUBLE
16393: EQUAL
16394: IFTRUE 16404
16396: LD_INT 23
16398: DOUBLE
16399: EQUAL
16400: IFTRUE 16404
16402: GO 16429
16404: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16405: LD_ADDR_VAR 0 3
16409: PUSH
16410: LD_INT 83
16412: PPUSH
16413: LD_VAR 0 1
16417: PPUSH
16418: CALL_OW 321
16422: PUSH
16423: LD_INT 2
16425: EQUAL
16426: ST_TO_ADDR
16427: GO 16529
16429: LD_INT 17
16431: DOUBLE
16432: EQUAL
16433: IFTRUE 16437
16435: GO 16462
16437: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16438: LD_ADDR_VAR 0 3
16442: PUSH
16443: LD_INT 39
16445: PPUSH
16446: LD_VAR 0 1
16450: PPUSH
16451: CALL_OW 321
16455: PUSH
16456: LD_INT 2
16458: EQUAL
16459: ST_TO_ADDR
16460: GO 16529
16462: LD_INT 18
16464: DOUBLE
16465: EQUAL
16466: IFTRUE 16470
16468: GO 16495
16470: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16471: LD_ADDR_VAR 0 3
16475: PUSH
16476: LD_INT 40
16478: PPUSH
16479: LD_VAR 0 1
16483: PPUSH
16484: CALL_OW 321
16488: PUSH
16489: LD_INT 2
16491: EQUAL
16492: ST_TO_ADDR
16493: GO 16529
16495: LD_INT 27
16497: DOUBLE
16498: EQUAL
16499: IFTRUE 16503
16501: GO 16528
16503: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16504: LD_ADDR_VAR 0 3
16508: PUSH
16509: LD_INT 35
16511: PPUSH
16512: LD_VAR 0 1
16516: PPUSH
16517: CALL_OW 321
16521: PUSH
16522: LD_INT 2
16524: EQUAL
16525: ST_TO_ADDR
16526: GO 16529
16528: POP
// end ;
16529: LD_VAR 0 3
16533: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16534: LD_INT 0
16536: PPUSH
16537: PPUSH
16538: PPUSH
16539: PPUSH
16540: PPUSH
16541: PPUSH
16542: PPUSH
16543: PPUSH
16544: PPUSH
16545: PPUSH
16546: PPUSH
// result := false ;
16547: LD_ADDR_VAR 0 6
16551: PUSH
16552: LD_INT 0
16554: ST_TO_ADDR
// if btype = b_depot then
16555: LD_VAR 0 2
16559: PUSH
16560: LD_INT 0
16562: EQUAL
16563: IFFALSE 16575
// begin result := true ;
16565: LD_ADDR_VAR 0 6
16569: PUSH
16570: LD_INT 1
16572: ST_TO_ADDR
// exit ;
16573: GO 17429
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16575: LD_VAR 0 1
16579: NOT
16580: IFTRUE 16605
16582: PUSH
16583: LD_VAR 0 1
16587: PPUSH
16588: CALL_OW 266
16592: PUSH
16593: LD_INT 0
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: IN
16603: NOT
16604: OR
16605: IFTRUE 16614
16607: PUSH
16608: LD_VAR 0 2
16612: NOT
16613: OR
16614: IFTRUE 16650
16616: PUSH
16617: LD_VAR 0 5
16621: PUSH
16622: LD_INT 0
16624: PUSH
16625: LD_INT 1
16627: PUSH
16628: LD_INT 2
16630: PUSH
16631: LD_INT 3
16633: PUSH
16634: LD_INT 4
16636: PUSH
16637: LD_INT 5
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: IN
16648: NOT
16649: OR
16650: IFTRUE 16669
16652: PUSH
16653: LD_VAR 0 3
16657: PPUSH
16658: LD_VAR 0 4
16662: PPUSH
16663: CALL_OW 488
16667: NOT
16668: OR
16669: IFFALSE 16673
// exit ;
16671: GO 17429
// side := GetSide ( depot ) ;
16673: LD_ADDR_VAR 0 9
16677: PUSH
16678: LD_VAR 0 1
16682: PPUSH
16683: CALL_OW 255
16687: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16688: LD_VAR 0 9
16692: PPUSH
16693: LD_VAR 0 2
16697: PPUSH
16698: CALL 16158 0 2
16702: NOT
16703: IFFALSE 16707
// exit ;
16705: GO 17429
// pom := GetBase ( depot ) ;
16707: LD_ADDR_VAR 0 10
16711: PUSH
16712: LD_VAR 0 1
16716: PPUSH
16717: CALL_OW 274
16721: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16722: LD_ADDR_VAR 0 11
16726: PUSH
16727: LD_VAR 0 2
16731: PPUSH
16732: LD_VAR 0 1
16736: PPUSH
16737: CALL_OW 248
16741: PPUSH
16742: CALL_OW 450
16746: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16747: LD_VAR 0 10
16751: PPUSH
16752: LD_INT 1
16754: PPUSH
16755: CALL_OW 275
16759: PUSH
16760: LD_VAR 0 11
16764: PUSH
16765: LD_INT 1
16767: ARRAY
16768: GREATEREQUAL
16769: IFFALSE 16795
16771: PUSH
16772: LD_VAR 0 10
16776: PPUSH
16777: LD_INT 2
16779: PPUSH
16780: CALL_OW 275
16784: PUSH
16785: LD_VAR 0 11
16789: PUSH
16790: LD_INT 2
16792: ARRAY
16793: GREATEREQUAL
16794: AND
16795: IFFALSE 16821
16797: PUSH
16798: LD_VAR 0 10
16802: PPUSH
16803: LD_INT 3
16805: PPUSH
16806: CALL_OW 275
16810: PUSH
16811: LD_VAR 0 11
16815: PUSH
16816: LD_INT 3
16818: ARRAY
16819: GREATEREQUAL
16820: AND
16821: NOT
16822: IFFALSE 16826
// exit ;
16824: GO 17429
// if GetBType ( depot ) = b_depot then
16826: LD_VAR 0 1
16830: PPUSH
16831: CALL_OW 266
16835: PUSH
16836: LD_INT 0
16838: EQUAL
16839: IFFALSE 16851
// dist := 28 else
16841: LD_ADDR_VAR 0 14
16845: PUSH
16846: LD_INT 28
16848: ST_TO_ADDR
16849: GO 16859
// dist := 36 ;
16851: LD_ADDR_VAR 0 14
16855: PUSH
16856: LD_INT 36
16858: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16859: LD_VAR 0 1
16863: PPUSH
16864: LD_VAR 0 3
16868: PPUSH
16869: LD_VAR 0 4
16873: PPUSH
16874: CALL_OW 297
16878: PUSH
16879: LD_VAR 0 14
16883: GREATER
16884: IFFALSE 16888
// exit ;
16886: GO 17429
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16888: LD_ADDR_VAR 0 12
16892: PUSH
16893: LD_VAR 0 2
16897: PPUSH
16898: LD_VAR 0 3
16902: PPUSH
16903: LD_VAR 0 4
16907: PPUSH
16908: LD_VAR 0 5
16912: PPUSH
16913: LD_VAR 0 1
16917: PPUSH
16918: CALL_OW 248
16922: PPUSH
16923: LD_INT 0
16925: PPUSH
16926: CALL 17434 0 6
16930: ST_TO_ADDR
// if not hexes then
16931: LD_VAR 0 12
16935: NOT
16936: IFFALSE 16940
// exit ;
16938: GO 17429
// hex := GetHexInfo ( x , y ) ;
16940: LD_ADDR_VAR 0 15
16944: PUSH
16945: LD_VAR 0 3
16949: PPUSH
16950: LD_VAR 0 4
16954: PPUSH
16955: CALL_OW 546
16959: ST_TO_ADDR
// if hex [ 1 ] then
16960: LD_VAR 0 15
16964: PUSH
16965: LD_INT 1
16967: ARRAY
16968: IFFALSE 16972
// exit ;
16970: GO 17429
// height := hex [ 2 ] ;
16972: LD_ADDR_VAR 0 13
16976: PUSH
16977: LD_VAR 0 15
16981: PUSH
16982: LD_INT 2
16984: ARRAY
16985: ST_TO_ADDR
// for i = 1 to hexes do
16986: LD_ADDR_VAR 0 7
16990: PUSH
16991: DOUBLE
16992: LD_INT 1
16994: DEC
16995: ST_TO_ADDR
16996: LD_VAR 0 12
17000: PUSH
17001: FOR_TO
17002: IFFALSE 17346
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17004: LD_VAR 0 12
17008: PUSH
17009: LD_VAR 0 7
17013: ARRAY
17014: PUSH
17015: LD_INT 1
17017: ARRAY
17018: PPUSH
17019: LD_VAR 0 12
17023: PUSH
17024: LD_VAR 0 7
17028: ARRAY
17029: PUSH
17030: LD_INT 2
17032: ARRAY
17033: PPUSH
17034: CALL_OW 488
17038: NOT
17039: IFTRUE 17081
17041: PUSH
17042: LD_VAR 0 12
17046: PUSH
17047: LD_VAR 0 7
17051: ARRAY
17052: PUSH
17053: LD_INT 1
17055: ARRAY
17056: PPUSH
17057: LD_VAR 0 12
17061: PUSH
17062: LD_VAR 0 7
17066: ARRAY
17067: PUSH
17068: LD_INT 2
17070: ARRAY
17071: PPUSH
17072: CALL_OW 428
17076: PUSH
17077: LD_INT 0
17079: GREATER
17080: OR
17081: IFTRUE 17119
17083: PUSH
17084: LD_VAR 0 12
17088: PUSH
17089: LD_VAR 0 7
17093: ARRAY
17094: PUSH
17095: LD_INT 1
17097: ARRAY
17098: PPUSH
17099: LD_VAR 0 12
17103: PUSH
17104: LD_VAR 0 7
17108: ARRAY
17109: PUSH
17110: LD_INT 2
17112: ARRAY
17113: PPUSH
17114: CALL_OW 351
17118: OR
17119: IFFALSE 17125
// exit ;
17121: POP
17122: POP
17123: GO 17429
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17125: LD_ADDR_VAR 0 8
17129: PUSH
17130: LD_VAR 0 12
17134: PUSH
17135: LD_VAR 0 7
17139: ARRAY
17140: PUSH
17141: LD_INT 1
17143: ARRAY
17144: PPUSH
17145: LD_VAR 0 12
17149: PUSH
17150: LD_VAR 0 7
17154: ARRAY
17155: PUSH
17156: LD_INT 2
17158: ARRAY
17159: PPUSH
17160: CALL_OW 546
17164: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17165: LD_VAR 0 8
17169: PUSH
17170: LD_INT 1
17172: ARRAY
17173: IFTRUE 17195
17175: PUSH
17176: LD_VAR 0 8
17180: PUSH
17181: LD_INT 2
17183: ARRAY
17184: PUSH
17185: LD_VAR 0 13
17189: PUSH
17190: LD_INT 2
17192: PLUS
17193: GREATER
17194: OR
17195: IFTRUE 17217
17197: PUSH
17198: LD_VAR 0 8
17202: PUSH
17203: LD_INT 2
17205: ARRAY
17206: PUSH
17207: LD_VAR 0 13
17211: PUSH
17212: LD_INT 2
17214: MINUS
17215: LESS
17216: OR
17217: IFTRUE 17285
17219: PUSH
17220: LD_VAR 0 8
17224: PUSH
17225: LD_INT 3
17227: ARRAY
17228: PUSH
17229: LD_INT 0
17231: PUSH
17232: LD_INT 8
17234: PUSH
17235: LD_INT 9
17237: PUSH
17238: LD_INT 10
17240: PUSH
17241: LD_INT 11
17243: PUSH
17244: LD_INT 12
17246: PUSH
17247: LD_INT 13
17249: PUSH
17250: LD_INT 16
17252: PUSH
17253: LD_INT 17
17255: PUSH
17256: LD_INT 18
17258: PUSH
17259: LD_INT 19
17261: PUSH
17262: LD_INT 20
17264: PUSH
17265: LD_INT 21
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: IN
17283: NOT
17284: OR
17285: IFTRUE 17298
17287: PUSH
17288: LD_VAR 0 8
17292: PUSH
17293: LD_INT 5
17295: ARRAY
17296: NOT
17297: OR
17298: IFTRUE 17338
17300: PUSH
17301: LD_VAR 0 8
17305: PUSH
17306: LD_INT 6
17308: ARRAY
17309: PUSH
17310: LD_INT 1
17312: PUSH
17313: LD_INT 2
17315: PUSH
17316: LD_INT 7
17318: PUSH
17319: LD_INT 9
17321: PUSH
17322: LD_INT 10
17324: PUSH
17325: LD_INT 11
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: IN
17336: NOT
17337: OR
17338: IFFALSE 17344
// exit ;
17340: POP
17341: POP
17342: GO 17429
// end ;
17344: GO 17001
17346: POP
17347: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17348: LD_VAR 0 9
17352: PPUSH
17353: LD_VAR 0 3
17357: PPUSH
17358: LD_VAR 0 4
17362: PPUSH
17363: LD_INT 20
17365: PPUSH
17366: CALL 9248 0 4
17370: PUSH
17371: LD_INT 4
17373: ARRAY
17374: IFFALSE 17378
// exit ;
17376: GO 17429
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17378: LD_VAR 0 2
17382: PUSH
17383: LD_INT 29
17385: PUSH
17386: LD_INT 30
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: IN
17393: IFFALSE 17417
17395: PUSH
17396: LD_VAR 0 3
17400: PPUSH
17401: LD_VAR 0 4
17405: PPUSH
17406: LD_VAR 0 9
17410: PPUSH
17411: CALL_OW 440
17415: NOT
17416: AND
17417: IFFALSE 17421
// exit ;
17419: GO 17429
// result := true ;
17421: LD_ADDR_VAR 0 6
17425: PUSH
17426: LD_INT 1
17428: ST_TO_ADDR
// end ;
17429: LD_VAR 0 6
17433: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17434: LD_INT 0
17436: PPUSH
17437: PPUSH
17438: PPUSH
17439: PPUSH
17440: PPUSH
17441: PPUSH
17442: PPUSH
17443: PPUSH
17444: PPUSH
17445: PPUSH
17446: PPUSH
17447: PPUSH
17448: PPUSH
17449: PPUSH
17450: PPUSH
17451: PPUSH
17452: PPUSH
17453: PPUSH
17454: PPUSH
17455: PPUSH
17456: PPUSH
17457: PPUSH
17458: PPUSH
17459: PPUSH
17460: PPUSH
17461: PPUSH
17462: PPUSH
17463: PPUSH
17464: PPUSH
17465: PPUSH
17466: PPUSH
17467: PPUSH
17468: PPUSH
17469: PPUSH
17470: PPUSH
17471: PPUSH
17472: PPUSH
17473: PPUSH
17474: PPUSH
17475: PPUSH
17476: PPUSH
17477: PPUSH
17478: PPUSH
17479: PPUSH
17480: PPUSH
17481: PPUSH
17482: PPUSH
17483: PPUSH
17484: PPUSH
17485: PPUSH
17486: PPUSH
17487: PPUSH
17488: PPUSH
17489: PPUSH
17490: PPUSH
17491: PPUSH
17492: PPUSH
17493: PPUSH
// result = [ ] ;
17494: LD_ADDR_VAR 0 7
17498: PUSH
17499: EMPTY
17500: ST_TO_ADDR
// temp_list = [ ] ;
17501: LD_ADDR_VAR 0 9
17505: PUSH
17506: EMPTY
17507: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17508: LD_VAR 0 4
17512: PUSH
17513: LD_INT 0
17515: PUSH
17516: LD_INT 1
17518: PUSH
17519: LD_INT 2
17521: PUSH
17522: LD_INT 3
17524: PUSH
17525: LD_INT 4
17527: PUSH
17528: LD_INT 5
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: IN
17539: NOT
17540: IFTRUE 17583
17542: PUSH
17543: LD_VAR 0 1
17547: PUSH
17548: LD_INT 0
17550: PUSH
17551: LD_INT 1
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: IN
17558: IFFALSE 17582
17560: PUSH
17561: LD_VAR 0 5
17565: PUSH
17566: LD_INT 1
17568: PUSH
17569: LD_INT 2
17571: PUSH
17572: LD_INT 3
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: LIST
17579: IN
17580: NOT
17581: AND
17582: OR
17583: IFFALSE 17587
// exit ;
17585: GO 35986
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17587: LD_VAR 0 1
17591: PUSH
17592: LD_INT 6
17594: PUSH
17595: LD_INT 7
17597: PUSH
17598: LD_INT 8
17600: PUSH
17601: LD_INT 13
17603: PUSH
17604: LD_INT 12
17606: PUSH
17607: LD_INT 15
17609: PUSH
17610: LD_INT 11
17612: PUSH
17613: LD_INT 14
17615: PUSH
17616: LD_INT 10
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: IN
17630: IFFALSE 17640
// btype = b_lab ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 6
17639: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17640: LD_VAR 0 6
17644: PUSH
17645: LD_INT 0
17647: PUSH
17648: LD_INT 1
17650: PUSH
17651: LD_INT 2
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: LIST
17658: IN
17659: NOT
17660: IFTRUE 17728
17662: PUSH
17663: LD_VAR 0 1
17667: PUSH
17668: LD_INT 0
17670: PUSH
17671: LD_INT 1
17673: PUSH
17674: LD_INT 2
17676: PUSH
17677: LD_INT 3
17679: PUSH
17680: LD_INT 6
17682: PUSH
17683: LD_INT 36
17685: PUSH
17686: LD_INT 4
17688: PUSH
17689: LD_INT 5
17691: PUSH
17692: LD_INT 31
17694: PUSH
17695: LD_INT 32
17697: PUSH
17698: LD_INT 33
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: IN
17714: NOT
17715: IFFALSE 17727
17717: PUSH
17718: LD_VAR 0 6
17722: PUSH
17723: LD_INT 1
17725: EQUAL
17726: AND
17727: OR
17728: IFTRUE 17760
17730: PUSH
17731: LD_VAR 0 1
17735: PUSH
17736: LD_INT 2
17738: PUSH
17739: LD_INT 3
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: IN
17746: NOT
17747: IFFALSE 17759
17749: PUSH
17750: LD_VAR 0 6
17754: PUSH
17755: LD_INT 2
17757: EQUAL
17758: AND
17759: OR
17760: IFFALSE 17770
// mode = 0 ;
17762: LD_ADDR_VAR 0 6
17766: PUSH
17767: LD_INT 0
17769: ST_TO_ADDR
// case mode of 0 :
17770: LD_VAR 0 6
17774: PUSH
17775: LD_INT 0
17777: DOUBLE
17778: EQUAL
17779: IFTRUE 17783
17781: GO 29236
17783: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17784: LD_ADDR_VAR 0 11
17788: PUSH
17789: LD_INT 0
17791: PUSH
17792: LD_INT 0
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 0
17801: PUSH
17802: LD_INT 1
17804: NEG
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 1
17812: PUSH
17813: LD_INT 0
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 1
17822: PUSH
17823: LD_INT 1
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 0
17832: PUSH
17833: LD_INT 1
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 1
17842: NEG
17843: PUSH
17844: LD_INT 0
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 1
17853: NEG
17854: PUSH
17855: LD_INT 1
17857: NEG
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 1
17865: NEG
17866: PUSH
17867: LD_INT 2
17869: NEG
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 0
17877: PUSH
17878: LD_INT 2
17880: NEG
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 1
17888: PUSH
17889: LD_INT 1
17891: NEG
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 1
17899: PUSH
17900: LD_INT 2
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 0
17909: PUSH
17910: LD_INT 2
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 1
17919: NEG
17920: PUSH
17921: LD_INT 1
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 1
17930: PUSH
17931: LD_INT 3
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 0
17940: PUSH
17941: LD_INT 3
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 1
17950: NEG
17951: PUSH
17952: LD_INT 2
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17977: LD_ADDR_VAR 0 12
17981: PUSH
17982: LD_INT 0
17984: PUSH
17985: LD_INT 0
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 0
17994: PUSH
17995: LD_INT 1
17997: NEG
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 1
18005: PUSH
18006: LD_INT 0
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 1
18015: PUSH
18016: LD_INT 1
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 0
18025: PUSH
18026: LD_INT 1
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 1
18035: NEG
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 1
18046: NEG
18047: PUSH
18048: LD_INT 1
18050: NEG
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 1
18058: PUSH
18059: LD_INT 1
18061: NEG
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: LD_INT 2
18069: PUSH
18070: LD_INT 0
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: LD_INT 2
18079: PUSH
18080: LD_INT 1
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 1
18089: NEG
18090: PUSH
18091: LD_INT 1
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 2
18100: NEG
18101: PUSH
18102: LD_INT 0
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 2
18111: NEG
18112: PUSH
18113: LD_INT 1
18115: NEG
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 2
18123: NEG
18124: PUSH
18125: LD_INT 1
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 3
18134: NEG
18135: PUSH
18136: LD_INT 0
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 3
18145: NEG
18146: PUSH
18147: LD_INT 1
18149: NEG
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18173: LD_ADDR_VAR 0 13
18177: PUSH
18178: LD_INT 0
18180: PUSH
18181: LD_INT 0
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 0
18190: PUSH
18191: LD_INT 1
18193: NEG
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: LD_INT 0
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 1
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 0
18221: PUSH
18222: LD_INT 1
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 1
18231: NEG
18232: PUSH
18233: LD_INT 0
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 1
18242: NEG
18243: PUSH
18244: LD_INT 1
18246: NEG
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 1
18254: NEG
18255: PUSH
18256: LD_INT 2
18258: NEG
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 2
18266: PUSH
18267: LD_INT 1
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 2
18276: PUSH
18277: LD_INT 2
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 1
18286: PUSH
18287: LD_INT 2
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 2
18296: NEG
18297: PUSH
18298: LD_INT 1
18300: NEG
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 2
18308: NEG
18309: PUSH
18310: LD_INT 2
18312: NEG
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 2
18320: NEG
18321: PUSH
18322: LD_INT 3
18324: NEG
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 3
18332: NEG
18333: PUSH
18334: LD_INT 2
18336: NEG
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 3
18344: NEG
18345: PUSH
18346: LD_INT 3
18348: NEG
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18372: LD_ADDR_VAR 0 14
18376: PUSH
18377: LD_INT 0
18379: PUSH
18380: LD_INT 0
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 0
18389: PUSH
18390: LD_INT 1
18392: NEG
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: LD_INT 0
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 1
18410: PUSH
18411: LD_INT 1
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 0
18420: PUSH
18421: LD_INT 1
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 1
18430: NEG
18431: PUSH
18432: LD_INT 0
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 1
18441: NEG
18442: PUSH
18443: LD_INT 1
18445: NEG
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 1
18453: NEG
18454: PUSH
18455: LD_INT 2
18457: NEG
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 0
18465: PUSH
18466: LD_INT 2
18468: NEG
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 1
18476: PUSH
18477: LD_INT 1
18479: NEG
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 1
18487: PUSH
18488: LD_INT 2
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 0
18497: PUSH
18498: LD_INT 2
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 1
18507: NEG
18508: PUSH
18509: LD_INT 1
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 1
18518: NEG
18519: PUSH
18520: LD_INT 3
18522: NEG
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 0
18530: PUSH
18531: LD_INT 3
18533: NEG
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 1
18541: PUSH
18542: LD_INT 2
18544: NEG
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18568: LD_ADDR_VAR 0 15
18572: PUSH
18573: LD_INT 0
18575: PUSH
18576: LD_INT 0
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 0
18585: PUSH
18586: LD_INT 1
18588: NEG
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 1
18596: PUSH
18597: LD_INT 0
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 1
18606: PUSH
18607: LD_INT 1
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 0
18616: PUSH
18617: LD_INT 1
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 1
18626: NEG
18627: PUSH
18628: LD_INT 0
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 1
18637: NEG
18638: PUSH
18639: LD_INT 1
18641: NEG
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 1
18649: PUSH
18650: LD_INT 1
18652: NEG
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 2
18660: PUSH
18661: LD_INT 0
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 2
18670: PUSH
18671: LD_INT 1
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 1
18680: NEG
18681: PUSH
18682: LD_INT 1
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 2
18691: NEG
18692: PUSH
18693: LD_INT 0
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 2
18702: NEG
18703: PUSH
18704: LD_INT 1
18706: NEG
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 2
18714: PUSH
18715: LD_INT 1
18717: NEG
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 3
18725: PUSH
18726: LD_INT 0
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 3
18735: PUSH
18736: LD_INT 1
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18761: LD_ADDR_VAR 0 16
18765: PUSH
18766: LD_INT 0
18768: PUSH
18769: LD_INT 0
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: LD_INT 1
18781: NEG
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 1
18789: PUSH
18790: LD_INT 0
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 1
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 0
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 1
18819: NEG
18820: PUSH
18821: LD_INT 0
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 1
18830: NEG
18831: PUSH
18832: LD_INT 1
18834: NEG
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 1
18842: NEG
18843: PUSH
18844: LD_INT 2
18846: NEG
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 2
18854: PUSH
18855: LD_INT 1
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 2
18864: PUSH
18865: LD_INT 2
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 1
18874: PUSH
18875: LD_INT 2
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 2
18884: NEG
18885: PUSH
18886: LD_INT 1
18888: NEG
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 2
18896: NEG
18897: PUSH
18898: LD_INT 2
18900: NEG
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 3
18908: PUSH
18909: LD_INT 2
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 3
18918: PUSH
18919: LD_INT 3
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 2
18928: PUSH
18929: LD_INT 3
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18954: LD_ADDR_VAR 0 17
18958: PUSH
18959: LD_INT 0
18961: PUSH
18962: LD_INT 0
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 0
18971: PUSH
18972: LD_INT 1
18974: NEG
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 1
18982: PUSH
18983: LD_INT 0
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 0
19002: PUSH
19003: LD_INT 1
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 1
19012: NEG
19013: PUSH
19014: LD_INT 0
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 1
19023: NEG
19024: PUSH
19025: LD_INT 1
19027: NEG
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 1
19035: NEG
19036: PUSH
19037: LD_INT 2
19039: NEG
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 0
19047: PUSH
19048: LD_INT 2
19050: NEG
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 1
19058: PUSH
19059: LD_INT 1
19061: NEG
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 2
19069: PUSH
19070: LD_INT 0
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 2
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 2
19089: PUSH
19090: LD_INT 2
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 1
19099: PUSH
19100: LD_INT 2
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 0
19109: PUSH
19110: LD_INT 2
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 1
19119: NEG
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 2
19130: NEG
19131: PUSH
19132: LD_INT 0
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 2
19141: NEG
19142: PUSH
19143: LD_INT 1
19145: NEG
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 2
19153: NEG
19154: PUSH
19155: LD_INT 2
19157: NEG
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19184: LD_ADDR_VAR 0 18
19188: PUSH
19189: LD_INT 0
19191: PUSH
19192: LD_INT 0
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: LD_INT 1
19204: NEG
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 1
19212: PUSH
19213: LD_INT 0
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 1
19222: PUSH
19223: LD_INT 1
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 0
19232: PUSH
19233: LD_INT 1
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 1
19242: NEG
19243: PUSH
19244: LD_INT 0
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: NEG
19254: PUSH
19255: LD_INT 1
19257: NEG
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 1
19265: NEG
19266: PUSH
19267: LD_INT 2
19269: NEG
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 0
19277: PUSH
19278: LD_INT 2
19280: NEG
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 1
19288: PUSH
19289: LD_INT 1
19291: NEG
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: LD_INT 0
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 2
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 2
19319: PUSH
19320: LD_INT 2
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: LD_INT 2
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 0
19339: PUSH
19340: LD_INT 2
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 1
19349: NEG
19350: PUSH
19351: LD_INT 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 2
19360: NEG
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 2
19371: NEG
19372: PUSH
19373: LD_INT 1
19375: NEG
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 2
19383: NEG
19384: PUSH
19385: LD_INT 2
19387: NEG
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19414: LD_ADDR_VAR 0 19
19418: PUSH
19419: LD_INT 0
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: LD_INT 1
19434: NEG
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: LD_INT 0
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 1
19452: PUSH
19453: LD_INT 1
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 0
19462: PUSH
19463: LD_INT 1
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 1
19472: NEG
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 1
19483: NEG
19484: PUSH
19485: LD_INT 1
19487: NEG
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 1
19495: NEG
19496: PUSH
19497: LD_INT 2
19499: NEG
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 0
19507: PUSH
19508: LD_INT 2
19510: NEG
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 1
19518: PUSH
19519: LD_INT 1
19521: NEG
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 2
19529: PUSH
19530: LD_INT 0
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 2
19539: PUSH
19540: LD_INT 1
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 2
19549: PUSH
19550: LD_INT 2
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 1
19559: PUSH
19560: LD_INT 2
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: LD_INT 2
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 1
19579: NEG
19580: PUSH
19581: LD_INT 1
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 2
19590: NEG
19591: PUSH
19592: LD_INT 0
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 2
19601: NEG
19602: PUSH
19603: LD_INT 1
19605: NEG
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 2
19613: NEG
19614: PUSH
19615: LD_INT 2
19617: NEG
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19644: LD_ADDR_VAR 0 20
19648: PUSH
19649: LD_INT 0
19651: PUSH
19652: LD_INT 0
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 0
19661: PUSH
19662: LD_INT 1
19664: NEG
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 1
19672: PUSH
19673: LD_INT 0
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 1
19682: PUSH
19683: LD_INT 1
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 0
19692: PUSH
19693: LD_INT 1
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 1
19702: NEG
19703: PUSH
19704: LD_INT 0
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 1
19713: NEG
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 1
19725: NEG
19726: PUSH
19727: LD_INT 2
19729: NEG
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 0
19737: PUSH
19738: LD_INT 2
19740: NEG
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 1
19748: PUSH
19749: LD_INT 1
19751: NEG
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 2
19759: PUSH
19760: LD_INT 0
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 2
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 2
19779: PUSH
19780: LD_INT 2
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 1
19789: PUSH
19790: LD_INT 2
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 0
19799: PUSH
19800: LD_INT 2
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 1
19809: NEG
19810: PUSH
19811: LD_INT 1
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 2
19820: NEG
19821: PUSH
19822: LD_INT 0
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 2
19831: NEG
19832: PUSH
19833: LD_INT 1
19835: NEG
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 2
19843: NEG
19844: PUSH
19845: LD_INT 2
19847: NEG
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19874: LD_ADDR_VAR 0 21
19878: PUSH
19879: LD_INT 0
19881: PUSH
19882: LD_INT 0
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 0
19891: PUSH
19892: LD_INT 1
19894: NEG
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 1
19902: PUSH
19903: LD_INT 0
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: LD_INT 1
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 0
19922: PUSH
19923: LD_INT 1
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 1
19932: NEG
19933: PUSH
19934: LD_INT 0
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 1
19943: NEG
19944: PUSH
19945: LD_INT 1
19947: NEG
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 1
19955: NEG
19956: PUSH
19957: LD_INT 2
19959: NEG
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 0
19967: PUSH
19968: LD_INT 2
19970: NEG
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 1
19978: PUSH
19979: LD_INT 1
19981: NEG
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 2
19989: PUSH
19990: LD_INT 0
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 2
19999: PUSH
20000: LD_INT 1
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 2
20009: PUSH
20010: LD_INT 2
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 1
20019: PUSH
20020: LD_INT 2
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 0
20029: PUSH
20030: LD_INT 2
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 1
20039: NEG
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 2
20050: NEG
20051: PUSH
20052: LD_INT 0
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 2
20061: NEG
20062: PUSH
20063: LD_INT 1
20065: NEG
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 2
20073: NEG
20074: PUSH
20075: LD_INT 2
20077: NEG
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20104: LD_ADDR_VAR 0 22
20108: PUSH
20109: LD_INT 0
20111: PUSH
20112: LD_INT 0
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 0
20121: PUSH
20122: LD_INT 1
20124: NEG
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: LD_INT 0
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 1
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: LD_INT 1
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 1
20162: NEG
20163: PUSH
20164: LD_INT 0
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 1
20173: NEG
20174: PUSH
20175: LD_INT 1
20177: NEG
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 1
20185: NEG
20186: PUSH
20187: LD_INT 2
20189: NEG
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 0
20197: PUSH
20198: LD_INT 2
20200: NEG
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 1
20208: PUSH
20209: LD_INT 1
20211: NEG
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 2
20219: PUSH
20220: LD_INT 0
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 2
20229: PUSH
20230: LD_INT 1
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 2
20239: PUSH
20240: LD_INT 2
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 1
20249: PUSH
20250: LD_INT 2
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 0
20259: PUSH
20260: LD_INT 2
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 1
20269: NEG
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 2
20280: NEG
20281: PUSH
20282: LD_INT 0
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 2
20291: NEG
20292: PUSH
20293: LD_INT 1
20295: NEG
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 2
20303: NEG
20304: PUSH
20305: LD_INT 2
20307: NEG
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20334: LD_ADDR_VAR 0 23
20338: PUSH
20339: LD_INT 0
20341: PUSH
20342: LD_INT 0
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: LD_INT 1
20354: NEG
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: LD_INT 0
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 1
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: LD_INT 1
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 1
20392: NEG
20393: PUSH
20394: LD_INT 0
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 1
20403: NEG
20404: PUSH
20405: LD_INT 1
20407: NEG
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 1
20415: NEG
20416: PUSH
20417: LD_INT 2
20419: NEG
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 0
20427: PUSH
20428: LD_INT 2
20430: NEG
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: LD_INT 1
20441: NEG
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 2
20449: PUSH
20450: LD_INT 0
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 2
20459: PUSH
20460: LD_INT 1
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 2
20469: PUSH
20470: LD_INT 2
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 1
20479: PUSH
20480: LD_INT 2
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 0
20489: PUSH
20490: LD_INT 2
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 1
20499: NEG
20500: PUSH
20501: LD_INT 1
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 2
20510: NEG
20511: PUSH
20512: LD_INT 0
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 2
20521: NEG
20522: PUSH
20523: LD_INT 1
20525: NEG
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 2
20533: NEG
20534: PUSH
20535: LD_INT 2
20537: NEG
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 2
20545: NEG
20546: PUSH
20547: LD_INT 3
20549: NEG
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 1
20557: NEG
20558: PUSH
20559: LD_INT 3
20561: NEG
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: LD_INT 2
20572: NEG
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 2
20580: PUSH
20581: LD_INT 1
20583: NEG
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20614: LD_ADDR_VAR 0 24
20618: PUSH
20619: LD_INT 0
20621: PUSH
20622: LD_INT 0
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: LD_INT 1
20634: NEG
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: LD_INT 0
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 0
20662: PUSH
20663: LD_INT 1
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 1
20672: NEG
20673: PUSH
20674: LD_INT 0
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 1
20683: NEG
20684: PUSH
20685: LD_INT 1
20687: NEG
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 1
20695: NEG
20696: PUSH
20697: LD_INT 2
20699: NEG
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 0
20707: PUSH
20708: LD_INT 2
20710: NEG
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 1
20718: PUSH
20719: LD_INT 1
20721: NEG
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 2
20729: PUSH
20730: LD_INT 0
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 2
20739: PUSH
20740: LD_INT 1
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 2
20749: PUSH
20750: LD_INT 2
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 1
20759: PUSH
20760: LD_INT 2
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 0
20769: PUSH
20770: LD_INT 2
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 1
20779: NEG
20780: PUSH
20781: LD_INT 1
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 2
20790: NEG
20791: PUSH
20792: LD_INT 0
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 2
20801: NEG
20802: PUSH
20803: LD_INT 1
20805: NEG
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 2
20813: NEG
20814: PUSH
20815: LD_INT 2
20817: NEG
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 1
20825: PUSH
20826: LD_INT 2
20828: NEG
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 2
20836: PUSH
20837: LD_INT 1
20839: NEG
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 3
20847: PUSH
20848: LD_INT 1
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 3
20857: PUSH
20858: LD_INT 2
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20890: LD_ADDR_VAR 0 25
20894: PUSH
20895: LD_INT 0
20897: PUSH
20898: LD_INT 0
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: LD_INT 1
20910: NEG
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: LD_INT 0
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: PUSH
20929: LD_INT 1
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 0
20938: PUSH
20939: LD_INT 1
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 1
20948: NEG
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 1
20959: NEG
20960: PUSH
20961: LD_INT 1
20963: NEG
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 1
20971: NEG
20972: PUSH
20973: LD_INT 2
20975: NEG
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 0
20983: PUSH
20984: LD_INT 2
20986: NEG
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 1
20994: PUSH
20995: LD_INT 1
20997: NEG
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 2
21005: PUSH
21006: LD_INT 0
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: LD_INT 1
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 2
21025: PUSH
21026: LD_INT 2
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 1
21035: PUSH
21036: LD_INT 2
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 0
21045: PUSH
21046: LD_INT 2
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 1
21055: NEG
21056: PUSH
21057: LD_INT 1
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 2
21066: NEG
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 2
21077: NEG
21078: PUSH
21079: LD_INT 1
21081: NEG
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 2
21089: NEG
21090: PUSH
21091: LD_INT 2
21093: NEG
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 3
21101: PUSH
21102: LD_INT 1
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 3
21111: PUSH
21112: LD_INT 2
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 2
21121: PUSH
21122: LD_INT 3
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 1
21131: PUSH
21132: LD_INT 3
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21164: LD_ADDR_VAR 0 26
21168: PUSH
21169: LD_INT 0
21171: PUSH
21172: LD_INT 0
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 0
21181: PUSH
21182: LD_INT 1
21184: NEG
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 1
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: LD_INT 1
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: LD_INT 1
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 1
21222: NEG
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 1
21233: NEG
21234: PUSH
21235: LD_INT 1
21237: NEG
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 1
21245: NEG
21246: PUSH
21247: LD_INT 2
21249: NEG
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 0
21257: PUSH
21258: LD_INT 2
21260: NEG
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 1
21268: PUSH
21269: LD_INT 1
21271: NEG
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 2
21279: PUSH
21280: LD_INT 0
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 2
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 2
21299: PUSH
21300: LD_INT 2
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 0
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 1
21329: NEG
21330: PUSH
21331: LD_INT 1
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 2
21340: NEG
21341: PUSH
21342: LD_INT 0
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 2
21351: NEG
21352: PUSH
21353: LD_INT 1
21355: NEG
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 2
21363: NEG
21364: PUSH
21365: LD_INT 2
21367: NEG
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 2
21375: PUSH
21376: LD_INT 3
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 1
21385: PUSH
21386: LD_INT 3
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: LD_INT 2
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 2
21406: NEG
21407: PUSH
21408: LD_INT 1
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21440: LD_ADDR_VAR 0 27
21444: PUSH
21445: LD_INT 0
21447: PUSH
21448: LD_INT 0
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 0
21457: PUSH
21458: LD_INT 1
21460: NEG
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 1
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 1
21478: PUSH
21479: LD_INT 1
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 0
21488: PUSH
21489: LD_INT 1
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 1
21498: NEG
21499: PUSH
21500: LD_INT 0
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 1
21509: NEG
21510: PUSH
21511: LD_INT 1
21513: NEG
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 1
21521: NEG
21522: PUSH
21523: LD_INT 2
21525: NEG
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 0
21533: PUSH
21534: LD_INT 2
21536: NEG
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 1
21544: PUSH
21545: LD_INT 1
21547: NEG
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 2
21555: PUSH
21556: LD_INT 0
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 2
21565: PUSH
21566: LD_INT 1
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 2
21575: PUSH
21576: LD_INT 2
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 1
21585: PUSH
21586: LD_INT 2
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 0
21595: PUSH
21596: LD_INT 2
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 1
21605: NEG
21606: PUSH
21607: LD_INT 1
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 2
21616: NEG
21617: PUSH
21618: LD_INT 0
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 2
21627: NEG
21628: PUSH
21629: LD_INT 1
21631: NEG
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 2
21639: NEG
21640: PUSH
21641: LD_INT 2
21643: NEG
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 1
21651: NEG
21652: PUSH
21653: LD_INT 2
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 2
21662: NEG
21663: PUSH
21664: LD_INT 1
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 3
21673: NEG
21674: PUSH
21675: LD_INT 1
21677: NEG
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 3
21685: NEG
21686: PUSH
21687: LD_INT 2
21689: NEG
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21720: LD_ADDR_VAR 0 28
21724: PUSH
21725: LD_INT 0
21727: PUSH
21728: LD_INT 0
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 0
21737: PUSH
21738: LD_INT 1
21740: NEG
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 1
21748: PUSH
21749: LD_INT 0
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: LD_INT 1
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 0
21768: PUSH
21769: LD_INT 1
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 1
21778: NEG
21779: PUSH
21780: LD_INT 0
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 1
21789: NEG
21790: PUSH
21791: LD_INT 1
21793: NEG
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 1
21801: NEG
21802: PUSH
21803: LD_INT 2
21805: NEG
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: LD_INT 2
21816: NEG
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 1
21824: PUSH
21825: LD_INT 1
21827: NEG
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 2
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: LD_INT 1
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 2
21855: PUSH
21856: LD_INT 2
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 1
21865: PUSH
21866: LD_INT 2
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 0
21875: PUSH
21876: LD_INT 2
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 1
21885: NEG
21886: PUSH
21887: LD_INT 1
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 2
21896: NEG
21897: PUSH
21898: LD_INT 0
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 2
21907: NEG
21908: PUSH
21909: LD_INT 1
21911: NEG
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 2
21919: NEG
21920: PUSH
21921: LD_INT 2
21923: NEG
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 2
21931: NEG
21932: PUSH
21933: LD_INT 3
21935: NEG
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 1
21943: NEG
21944: PUSH
21945: LD_INT 3
21947: NEG
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 3
21955: NEG
21956: PUSH
21957: LD_INT 1
21959: NEG
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 3
21967: NEG
21968: PUSH
21969: LD_INT 2
21971: NEG
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22002: LD_ADDR_VAR 0 29
22006: PUSH
22007: LD_INT 0
22009: PUSH
22010: LD_INT 0
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 0
22019: PUSH
22020: LD_INT 1
22022: NEG
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: LD_INT 0
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 1
22040: PUSH
22041: LD_INT 1
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 0
22050: PUSH
22051: LD_INT 1
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 1
22060: NEG
22061: PUSH
22062: LD_INT 0
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 1
22071: NEG
22072: PUSH
22073: LD_INT 1
22075: NEG
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 1
22083: NEG
22084: PUSH
22085: LD_INT 2
22087: NEG
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 0
22095: PUSH
22096: LD_INT 2
22098: NEG
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: PUSH
22107: LD_INT 1
22109: NEG
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 2
22117: PUSH
22118: LD_INT 0
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 2
22127: PUSH
22128: LD_INT 1
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 1
22137: PUSH
22138: LD_INT 2
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 0
22147: PUSH
22148: LD_INT 2
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 1
22157: NEG
22158: PUSH
22159: LD_INT 1
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 2
22168: NEG
22169: PUSH
22170: LD_INT 1
22172: NEG
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 2
22180: NEG
22181: PUSH
22182: LD_INT 2
22184: NEG
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 2
22192: NEG
22193: PUSH
22194: LD_INT 3
22196: NEG
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 2
22204: PUSH
22205: LD_INT 1
22207: NEG
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 3
22215: PUSH
22216: LD_INT 1
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 1
22225: PUSH
22226: LD_INT 3
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 1
22235: NEG
22236: PUSH
22237: LD_INT 2
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 3
22246: NEG
22247: PUSH
22248: LD_INT 2
22250: NEG
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22281: LD_ADDR_VAR 0 30
22285: PUSH
22286: LD_INT 0
22288: PUSH
22289: LD_INT 0
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: LD_INT 1
22301: NEG
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 1
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 1
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 0
22329: PUSH
22330: LD_INT 1
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 1
22339: NEG
22340: PUSH
22341: LD_INT 0
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 1
22350: NEG
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 1
22362: NEG
22363: PUSH
22364: LD_INT 2
22366: NEG
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: LD_INT 2
22377: NEG
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 1
22385: PUSH
22386: LD_INT 1
22388: NEG
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 2
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 2
22406: PUSH
22407: LD_INT 1
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 2
22416: PUSH
22417: LD_INT 2
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 1
22426: PUSH
22427: LD_INT 2
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 1
22436: NEG
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 2
22447: NEG
22448: PUSH
22449: LD_INT 0
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 2
22458: NEG
22459: PUSH
22460: LD_INT 1
22462: NEG
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 1
22470: NEG
22471: PUSH
22472: LD_INT 3
22474: NEG
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: LD_INT 2
22485: NEG
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 3
22493: PUSH
22494: LD_INT 2
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 2
22503: PUSH
22504: LD_INT 3
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 2
22513: NEG
22514: PUSH
22515: LD_INT 1
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 3
22524: NEG
22525: PUSH
22526: LD_INT 1
22528: NEG
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22559: LD_ADDR_VAR 0 31
22563: PUSH
22564: LD_INT 0
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 0
22576: PUSH
22577: LD_INT 1
22579: NEG
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 1
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 0
22607: PUSH
22608: LD_INT 1
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 1
22617: NEG
22618: PUSH
22619: LD_INT 0
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 1
22628: NEG
22629: PUSH
22630: LD_INT 1
22632: NEG
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 1
22640: NEG
22641: PUSH
22642: LD_INT 2
22644: NEG
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 1
22652: PUSH
22653: LD_INT 1
22655: NEG
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 2
22663: PUSH
22664: LD_INT 0
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 2
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 2
22683: PUSH
22684: LD_INT 2
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 1
22693: PUSH
22694: LD_INT 2
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 0
22703: PUSH
22704: LD_INT 2
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 1
22713: NEG
22714: PUSH
22715: LD_INT 1
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 2
22724: NEG
22725: PUSH
22726: LD_INT 1
22728: NEG
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 2
22736: NEG
22737: PUSH
22738: LD_INT 2
22740: NEG
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 2
22748: NEG
22749: PUSH
22750: LD_INT 3
22752: NEG
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 2
22760: PUSH
22761: LD_INT 1
22763: NEG
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 3
22771: PUSH
22772: LD_INT 1
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 1
22781: PUSH
22782: LD_INT 3
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 1
22791: NEG
22792: PUSH
22793: LD_INT 2
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 3
22802: NEG
22803: PUSH
22804: LD_INT 2
22806: NEG
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22837: LD_ADDR_VAR 0 32
22841: PUSH
22842: LD_INT 0
22844: PUSH
22845: LD_INT 0
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 0
22854: PUSH
22855: LD_INT 1
22857: NEG
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: LD_INT 0
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 1
22875: PUSH
22876: LD_INT 1
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 0
22885: PUSH
22886: LD_INT 1
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 1
22895: NEG
22896: PUSH
22897: LD_INT 0
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 1
22906: NEG
22907: PUSH
22908: LD_INT 1
22910: NEG
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 1
22918: NEG
22919: PUSH
22920: LD_INT 2
22922: NEG
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 0
22930: PUSH
22931: LD_INT 2
22933: NEG
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: LD_INT 1
22944: NEG
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 2
22952: PUSH
22953: LD_INT 1
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 2
22962: PUSH
22963: LD_INT 2
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 1
22972: PUSH
22973: LD_INT 2
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 0
22982: PUSH
22983: LD_INT 2
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 1
22992: NEG
22993: PUSH
22994: LD_INT 1
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 2
23003: NEG
23004: PUSH
23005: LD_INT 0
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 2
23014: NEG
23015: PUSH
23016: LD_INT 1
23018: NEG
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 1
23026: NEG
23027: PUSH
23028: LD_INT 3
23030: NEG
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: LD_INT 2
23041: NEG
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 3
23049: PUSH
23050: LD_INT 2
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 2
23059: PUSH
23060: LD_INT 3
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 2
23069: NEG
23070: PUSH
23071: LD_INT 1
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 3
23080: NEG
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23115: LD_ADDR_VAR 0 33
23119: PUSH
23120: LD_INT 0
23122: PUSH
23123: LD_INT 0
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: LD_INT 1
23135: NEG
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: LD_INT 1
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 1
23173: NEG
23174: PUSH
23175: LD_INT 0
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 1
23184: NEG
23185: PUSH
23186: LD_INT 1
23188: NEG
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 1
23196: NEG
23197: PUSH
23198: LD_INT 2
23200: NEG
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 1
23208: PUSH
23209: LD_INT 1
23211: NEG
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 2
23219: PUSH
23220: LD_INT 0
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 2
23229: PUSH
23230: LD_INT 1
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: LD_INT 2
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: LD_INT 2
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 1
23259: NEG
23260: PUSH
23261: LD_INT 1
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 2
23270: NEG
23271: PUSH
23272: LD_INT 0
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 2
23281: NEG
23282: PUSH
23283: LD_INT 1
23285: NEG
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 2
23293: NEG
23294: PUSH
23295: LD_INT 2
23297: NEG
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 2
23305: NEG
23306: PUSH
23307: LD_INT 3
23309: NEG
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 2
23317: PUSH
23318: LD_INT 1
23320: NEG
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 3
23328: PUSH
23329: LD_INT 1
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 1
23338: PUSH
23339: LD_INT 3
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 1
23348: NEG
23349: PUSH
23350: LD_INT 2
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 3
23359: NEG
23360: PUSH
23361: LD_INT 2
23363: NEG
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23394: LD_ADDR_VAR 0 34
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 0
23411: PUSH
23412: LD_INT 1
23414: NEG
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 1
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 1
23432: PUSH
23433: LD_INT 1
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 0
23442: PUSH
23443: LD_INT 1
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 1
23452: NEG
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 1
23463: NEG
23464: PUSH
23465: LD_INT 1
23467: NEG
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 1
23475: NEG
23476: PUSH
23477: LD_INT 2
23479: NEG
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: LD_INT 2
23490: NEG
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 1
23498: PUSH
23499: LD_INT 1
23501: NEG
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 2
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 2
23519: PUSH
23520: LD_INT 2
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 1
23529: PUSH
23530: LD_INT 2
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 1
23539: NEG
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 2
23550: NEG
23551: PUSH
23552: LD_INT 0
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 2
23561: NEG
23562: PUSH
23563: LD_INT 1
23565: NEG
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 2
23573: NEG
23574: PUSH
23575: LD_INT 2
23577: NEG
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 1
23585: NEG
23586: PUSH
23587: LD_INT 3
23589: NEG
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 1
23597: PUSH
23598: LD_INT 2
23600: NEG
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 3
23608: PUSH
23609: LD_INT 2
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 2
23618: PUSH
23619: LD_INT 3
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 2
23628: NEG
23629: PUSH
23630: LD_INT 1
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 3
23639: NEG
23640: PUSH
23641: LD_INT 1
23643: NEG
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23674: LD_ADDR_VAR 0 35
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: LD_INT 0
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 0
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: LD_INT 0
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 1
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 1
23732: NEG
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 1
23743: NEG
23744: PUSH
23745: LD_INT 1
23747: NEG
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: LD_INT 1
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 2
23765: NEG
23766: PUSH
23767: LD_INT 1
23769: NEG
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23786: LD_ADDR_VAR 0 36
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: LD_INT 0
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 0
23803: PUSH
23804: LD_INT 1
23806: NEG
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: LD_INT 0
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: LD_INT 1
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 0
23834: PUSH
23835: LD_INT 1
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 1
23844: NEG
23845: PUSH
23846: LD_INT 0
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: NEG
23856: PUSH
23857: LD_INT 1
23859: NEG
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 1
23867: NEG
23868: PUSH
23869: LD_INT 2
23871: NEG
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: LD_INT 2
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23898: LD_ADDR_VAR 0 37
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: LD_INT 0
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 0
23915: PUSH
23916: LD_INT 1
23918: NEG
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: LD_INT 1
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 0
23946: PUSH
23947: LD_INT 1
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 1
23956: NEG
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 1
23967: NEG
23968: PUSH
23969: LD_INT 1
23971: NEG
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 1
23979: PUSH
23980: LD_INT 1
23982: NEG
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 1
23990: NEG
23991: PUSH
23992: LD_INT 1
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24010: LD_ADDR_VAR 0 38
24014: PUSH
24015: LD_INT 0
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: LD_INT 1
24030: NEG
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 1
24038: PUSH
24039: LD_INT 0
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: LD_INT 1
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: LD_INT 1
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 1
24068: NEG
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 1
24079: NEG
24080: PUSH
24081: LD_INT 1
24083: NEG
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 2
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 2
24101: NEG
24102: PUSH
24103: LD_INT 1
24105: NEG
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24122: LD_ADDR_VAR 0 39
24126: PUSH
24127: LD_INT 0
24129: PUSH
24130: LD_INT 0
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: LD_INT 1
24142: NEG
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 1
24160: PUSH
24161: LD_INT 1
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: LD_INT 1
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 1
24180: NEG
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 1
24191: NEG
24192: PUSH
24193: LD_INT 1
24195: NEG
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: LD_INT 2
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: LD_INT 2
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24234: LD_ADDR_VAR 0 40
24238: PUSH
24239: LD_INT 0
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: LD_INT 1
24254: NEG
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 1
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 1
24272: PUSH
24273: LD_INT 1
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 0
24282: PUSH
24283: LD_INT 1
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 1
24292: NEG
24293: PUSH
24294: LD_INT 0
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: PUSH
24305: LD_INT 1
24307: NEG
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 1
24315: PUSH
24316: LD_INT 1
24318: NEG
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 1
24326: NEG
24327: PUSH
24328: LD_INT 1
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24346: LD_ADDR_VAR 0 41
24350: PUSH
24351: LD_INT 0
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 0
24363: PUSH
24364: LD_INT 1
24366: NEG
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 1
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 0
24394: PUSH
24395: LD_INT 1
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 1
24404: NEG
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 1
24415: NEG
24416: PUSH
24417: LD_INT 1
24419: NEG
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 1
24427: NEG
24428: PUSH
24429: LD_INT 2
24431: NEG
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 1
24439: PUSH
24440: LD_INT 1
24442: NEG
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 2
24450: PUSH
24451: LD_INT 0
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 2
24460: PUSH
24461: LD_INT 1
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 2
24470: PUSH
24471: LD_INT 2
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 1
24480: PUSH
24481: LD_INT 2
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 1
24490: NEG
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 2
24501: NEG
24502: PUSH
24503: LD_INT 0
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 2
24512: NEG
24513: PUSH
24514: LD_INT 1
24516: NEG
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 2
24524: NEG
24525: PUSH
24526: LD_INT 2
24528: NEG
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 2
24536: NEG
24537: PUSH
24538: LD_INT 3
24540: NEG
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 2
24548: PUSH
24549: LD_INT 1
24551: NEG
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 3
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 3
24569: PUSH
24570: LD_INT 1
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 3
24579: PUSH
24580: LD_INT 2
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 3
24589: PUSH
24590: LD_INT 3
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: LD_INT 3
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 2
24609: NEG
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 3
24620: NEG
24621: PUSH
24622: LD_INT 0
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 3
24631: NEG
24632: PUSH
24633: LD_INT 1
24635: NEG
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 3
24643: NEG
24644: PUSH
24645: LD_INT 2
24647: NEG
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 3
24655: NEG
24656: PUSH
24657: LD_INT 3
24659: NEG
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24696: LD_ADDR_VAR 0 42
24700: PUSH
24701: LD_INT 0
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: LD_INT 1
24716: NEG
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: LD_INT 0
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 1
24754: NEG
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: NEG
24766: PUSH
24767: LD_INT 1
24769: NEG
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 1
24777: NEG
24778: PUSH
24779: LD_INT 2
24781: NEG
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: LD_INT 2
24792: NEG
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 1
24800: PUSH
24801: LD_INT 1
24803: NEG
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 2
24811: PUSH
24812: LD_INT 1
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 2
24821: PUSH
24822: LD_INT 2
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: LD_INT 2
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 0
24841: PUSH
24842: LD_INT 2
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 1
24851: NEG
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 2
24862: NEG
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 2
24874: NEG
24875: PUSH
24876: LD_INT 2
24878: NEG
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 2
24886: NEG
24887: PUSH
24888: LD_INT 3
24890: NEG
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 1
24898: NEG
24899: PUSH
24900: LD_INT 3
24902: NEG
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 0
24910: PUSH
24911: LD_INT 3
24913: NEG
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: LD_INT 2
24924: NEG
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 3
24932: PUSH
24933: LD_INT 2
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 3
24942: PUSH
24943: LD_INT 3
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 2
24952: PUSH
24953: LD_INT 3
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: LD_INT 3
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: LD_INT 3
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 1
24982: NEG
24983: PUSH
24984: LD_INT 2
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 3
24993: NEG
24994: PUSH
24995: LD_INT 2
24997: NEG
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 3
25005: NEG
25006: PUSH
25007: LD_INT 3
25009: NEG
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25046: LD_ADDR_VAR 0 43
25050: PUSH
25051: LD_INT 0
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 0
25063: PUSH
25064: LD_INT 1
25066: NEG
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: LD_INT 0
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 1
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 0
25094: PUSH
25095: LD_INT 1
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 1
25104: NEG
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: PUSH
25117: LD_INT 1
25119: NEG
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 1
25127: NEG
25128: PUSH
25129: LD_INT 2
25131: NEG
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: LD_INT 2
25142: NEG
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 1
25150: PUSH
25151: LD_INT 1
25153: NEG
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 2
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 2
25171: PUSH
25172: LD_INT 1
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: LD_INT 2
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: LD_INT 2
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 1
25201: NEG
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 2
25212: NEG
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 2
25223: NEG
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 1
25235: NEG
25236: PUSH
25237: LD_INT 3
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: LD_INT 3
25250: NEG
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 1
25258: PUSH
25259: LD_INT 2
25261: NEG
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 2
25269: PUSH
25270: LD_INT 1
25272: NEG
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 3
25280: PUSH
25281: LD_INT 0
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 3
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 1
25300: PUSH
25301: LD_INT 3
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: LD_INT 3
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 1
25320: NEG
25321: PUSH
25322: LD_INT 2
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 2
25331: NEG
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 3
25342: NEG
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 3
25353: NEG
25354: PUSH
25355: LD_INT 1
25357: NEG
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25394: LD_ADDR_VAR 0 44
25398: PUSH
25399: LD_INT 0
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 0
25411: PUSH
25412: LD_INT 1
25414: NEG
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 0
25442: PUSH
25443: LD_INT 1
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: NEG
25453: PUSH
25454: LD_INT 0
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: LD_INT 1
25467: NEG
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 1
25475: NEG
25476: PUSH
25477: LD_INT 2
25479: NEG
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 1
25487: PUSH
25488: LD_INT 1
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 2
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 2
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 2
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: LD_INT 2
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: NEG
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 2
25549: NEG
25550: PUSH
25551: LD_INT 0
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 2
25560: NEG
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 2
25572: NEG
25573: PUSH
25574: LD_INT 2
25576: NEG
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 2
25584: NEG
25585: PUSH
25586: LD_INT 3
25588: NEG
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 2
25596: PUSH
25597: LD_INT 1
25599: NEG
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 3
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 3
25617: PUSH
25618: LD_INT 1
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 3
25627: PUSH
25628: LD_INT 2
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 3
25637: PUSH
25638: LD_INT 3
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 2
25647: PUSH
25648: LD_INT 3
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 2
25657: NEG
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 3
25668: NEG
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 3
25679: NEG
25680: PUSH
25681: LD_INT 1
25683: NEG
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 3
25691: NEG
25692: PUSH
25693: LD_INT 2
25695: NEG
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 3
25703: NEG
25704: PUSH
25705: LD_INT 3
25707: NEG
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25744: LD_ADDR_VAR 0 45
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: LD_INT 1
25764: NEG
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: LD_INT 1
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 1
25802: NEG
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 1
25813: NEG
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: LD_INT 2
25829: NEG
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 0
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 1
25848: PUSH
25849: LD_INT 1
25851: NEG
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 2
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 2
25869: PUSH
25870: LD_INT 2
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 1
25879: PUSH
25880: LD_INT 2
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: LD_INT 2
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: PUSH
25901: LD_INT 1
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 2
25910: NEG
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 2
25922: NEG
25923: PUSH
25924: LD_INT 2
25926: NEG
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 2
25934: NEG
25935: PUSH
25936: LD_INT 3
25938: NEG
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 1
25946: NEG
25947: PUSH
25948: LD_INT 3
25950: NEG
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 0
25958: PUSH
25959: LD_INT 3
25961: NEG
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 1
25969: PUSH
25970: LD_INT 2
25972: NEG
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 3
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 3
25990: PUSH
25991: LD_INT 3
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 2
26000: PUSH
26001: LD_INT 3
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: LD_INT 3
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 0
26020: PUSH
26021: LD_INT 3
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 1
26030: NEG
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 3
26041: NEG
26042: PUSH
26043: LD_INT 2
26045: NEG
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 3
26053: NEG
26054: PUSH
26055: LD_INT 3
26057: NEG
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26094: LD_ADDR_VAR 0 46
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: LD_INT 0
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: LD_INT 1
26114: NEG
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 1
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 0
26142: PUSH
26143: LD_INT 1
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 1
26152: NEG
26153: PUSH
26154: LD_INT 0
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 1
26163: NEG
26164: PUSH
26165: LD_INT 1
26167: NEG
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 1
26175: NEG
26176: PUSH
26177: LD_INT 2
26179: NEG
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: LD_INT 2
26190: NEG
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 1
26198: PUSH
26199: LD_INT 1
26201: NEG
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 2
26209: PUSH
26210: LD_INT 0
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 2
26219: PUSH
26220: LD_INT 1
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: LD_INT 2
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: LD_INT 2
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 2
26260: NEG
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 2
26271: NEG
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: LD_INT 3
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: LD_INT 3
26298: NEG
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 1
26306: PUSH
26307: LD_INT 2
26309: NEG
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 2
26317: PUSH
26318: LD_INT 1
26320: NEG
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 3
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 3
26338: PUSH
26339: LD_INT 1
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 1
26348: PUSH
26349: LD_INT 3
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 0
26358: PUSH
26359: LD_INT 3
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: LD_INT 2
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 2
26379: NEG
26380: PUSH
26381: LD_INT 1
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 3
26390: NEG
26391: PUSH
26392: LD_INT 0
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 3
26401: NEG
26402: PUSH
26403: LD_INT 1
26405: NEG
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26442: LD_ADDR_VAR 0 47
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: LD_INT 0
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: LD_INT 1
26462: NEG
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 1
26470: PUSH
26471: LD_INT 0
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: LD_INT 1
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 1
26500: NEG
26501: PUSH
26502: LD_INT 0
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: LD_INT 2
26527: NEG
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 0
26535: PUSH
26536: LD_INT 2
26538: NEG
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 1
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: LD_INT 1
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 2
26569: NEG
26570: PUSH
26571: LD_INT 2
26573: NEG
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26593: LD_ADDR_VAR 0 48
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: LD_INT 0
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 0
26610: PUSH
26611: LD_INT 1
26613: NEG
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: LD_INT 0
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 1
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 0
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 1
26651: NEG
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 1
26662: NEG
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 1
26674: NEG
26675: PUSH
26676: LD_INT 2
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: LD_INT 2
26689: NEG
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: PUSH
26698: LD_INT 1
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 2
26708: PUSH
26709: LD_INT 0
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 2
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26740: LD_ADDR_VAR 0 49
26744: PUSH
26745: LD_INT 0
26747: PUSH
26748: LD_INT 0
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 0
26757: PUSH
26758: LD_INT 1
26760: NEG
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: LD_INT 1
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 0
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: LD_INT 0
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 1
26809: NEG
26810: PUSH
26811: LD_INT 1
26813: NEG
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: LD_INT 1
26824: NEG
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 2
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 2
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 2
26852: PUSH
26853: LD_INT 2
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 1
26862: PUSH
26863: LD_INT 2
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26884: LD_ADDR_VAR 0 50
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: LD_INT 0
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: LD_INT 1
26904: NEG
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: LD_INT 1
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 1
26942: NEG
26943: PUSH
26944: LD_INT 0
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: NEG
26954: PUSH
26955: LD_INT 1
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 2
26965: PUSH
26966: LD_INT 1
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 2
26975: PUSH
26976: LD_INT 2
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 1
26985: PUSH
26986: LD_INT 2
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: LD_INT 2
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: LD_INT 1
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27028: LD_ADDR_VAR 0 51
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: LD_INT 0
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: PUSH
27067: LD_INT 1
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 1
27086: NEG
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: NEG
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: PUSH
27110: LD_INT 2
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: LD_INT 2
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: NEG
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 2
27140: NEG
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 2
27151: NEG
27152: PUSH
27153: LD_INT 1
27155: NEG
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27175: LD_ADDR_VAR 0 52
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: LD_INT 1
27195: NEG
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 1
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 1
27233: NEG
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: NEG
27245: PUSH
27246: LD_INT 1
27248: NEG
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: NEG
27257: PUSH
27258: LD_INT 2
27260: NEG
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 1
27268: NEG
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 2
27279: NEG
27280: PUSH
27281: LD_INT 0
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 2
27290: NEG
27291: PUSH
27292: LD_INT 1
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 2
27302: NEG
27303: PUSH
27304: LD_INT 2
27306: NEG
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27326: LD_ADDR_VAR 0 53
27330: PUSH
27331: LD_INT 0
27333: PUSH
27334: LD_INT 0
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: LD_INT 0
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 0
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 1
27384: NEG
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: NEG
27396: PUSH
27397: LD_INT 1
27399: NEG
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 1
27407: NEG
27408: PUSH
27409: LD_INT 2
27411: NEG
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 0
27419: PUSH
27420: LD_INT 2
27422: NEG
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 1
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 2
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 2
27451: PUSH
27452: LD_INT 1
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 2
27461: PUSH
27462: LD_INT 2
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: LD_INT 2
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: LD_INT 2
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: LD_INT 1
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 2
27502: NEG
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 2
27513: NEG
27514: PUSH
27515: LD_INT 1
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 2
27525: NEG
27526: PUSH
27527: LD_INT 2
27529: NEG
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27556: LD_ADDR_VAR 0 54
27560: PUSH
27561: LD_INT 0
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: LD_INT 1
27576: NEG
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: LD_INT 0
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: LD_INT 1
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 1
27614: NEG
27615: PUSH
27616: LD_INT 0
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: NEG
27626: PUSH
27627: LD_INT 1
27629: NEG
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 1
27637: NEG
27638: PUSH
27639: LD_INT 2
27641: NEG
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 0
27649: PUSH
27650: LD_INT 2
27652: NEG
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 1
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 2
27671: PUSH
27672: LD_INT 0
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 2
27681: PUSH
27682: LD_INT 1
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 2
27691: PUSH
27692: LD_INT 2
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 1
27701: PUSH
27702: LD_INT 2
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: LD_INT 2
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 2
27732: NEG
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 2
27743: NEG
27744: PUSH
27745: LD_INT 1
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 2
27755: NEG
27756: PUSH
27757: LD_INT 2
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27786: LD_ADDR_VAR 0 55
27790: PUSH
27791: LD_INT 0
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: LD_INT 1
27806: NEG
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: LD_INT 0
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 1
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: LD_INT 1
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 1
27844: NEG
27845: PUSH
27846: LD_INT 0
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 1
27855: NEG
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 1
27867: NEG
27868: PUSH
27869: LD_INT 2
27871: NEG
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 0
27879: PUSH
27880: LD_INT 2
27882: NEG
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 1
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 2
27901: PUSH
27902: LD_INT 0
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 2
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 2
27921: PUSH
27922: LD_INT 2
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 1
27931: PUSH
27932: LD_INT 2
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: LD_INT 2
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 1
27951: NEG
27952: PUSH
27953: LD_INT 1
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 2
27962: NEG
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 2
27973: NEG
27974: PUSH
27975: LD_INT 1
27977: NEG
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 2
27985: NEG
27986: PUSH
27987: LD_INT 2
27989: NEG
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28016: LD_ADDR_VAR 0 56
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: LD_INT 0
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 0
28033: PUSH
28034: LD_INT 1
28036: NEG
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: LD_INT 0
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: LD_INT 1
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: LD_INT 1
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: PUSH
28076: LD_INT 0
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: NEG
28086: PUSH
28087: LD_INT 1
28089: NEG
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 1
28097: NEG
28098: PUSH
28099: LD_INT 2
28101: NEG
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 0
28109: PUSH
28110: LD_INT 2
28112: NEG
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 1
28120: PUSH
28121: LD_INT 1
28123: NEG
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 2
28141: PUSH
28142: LD_INT 1
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 2
28151: PUSH
28152: LD_INT 2
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: LD_INT 2
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: LD_INT 1
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 2
28192: NEG
28193: PUSH
28194: LD_INT 0
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 2
28203: NEG
28204: PUSH
28205: LD_INT 1
28207: NEG
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 2
28215: NEG
28216: PUSH
28217: LD_INT 2
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28246: LD_ADDR_VAR 0 57
28250: PUSH
28251: LD_INT 0
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: LD_INT 1
28266: NEG
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: LD_INT 0
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 1
28284: PUSH
28285: LD_INT 1
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: LD_INT 1
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 1
28304: NEG
28305: PUSH
28306: LD_INT 0
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 1
28315: NEG
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 1
28327: NEG
28328: PUSH
28329: LD_INT 2
28331: NEG
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 0
28339: PUSH
28340: LD_INT 2
28342: NEG
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 2
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 2
28381: PUSH
28382: LD_INT 2
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: LD_INT 2
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 0
28401: PUSH
28402: LD_INT 2
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 1
28411: NEG
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 2
28422: NEG
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 2
28433: NEG
28434: PUSH
28435: LD_INT 1
28437: NEG
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 2
28445: NEG
28446: PUSH
28447: LD_INT 2
28449: NEG
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28476: LD_ADDR_VAR 0 58
28480: PUSH
28481: LD_INT 0
28483: PUSH
28484: LD_INT 0
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 0
28493: PUSH
28494: LD_INT 1
28496: NEG
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 1
28504: PUSH
28505: LD_INT 0
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: LD_INT 1
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 1
28534: NEG
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: NEG
28546: PUSH
28547: LD_INT 1
28549: NEG
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 1
28557: NEG
28558: PUSH
28559: LD_INT 2
28561: NEG
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: LD_INT 2
28572: NEG
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 2
28591: PUSH
28592: LD_INT 0
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 2
28601: PUSH
28602: LD_INT 1
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 2
28611: PUSH
28612: LD_INT 2
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 1
28621: PUSH
28622: LD_INT 2
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: LD_INT 2
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 1
28641: NEG
28642: PUSH
28643: LD_INT 1
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 2
28652: NEG
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 2
28663: NEG
28664: PUSH
28665: LD_INT 1
28667: NEG
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 2
28675: NEG
28676: PUSH
28677: LD_INT 2
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28706: LD_ADDR_VAR 0 59
28710: PUSH
28711: LD_INT 0
28713: PUSH
28714: LD_INT 0
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 0
28723: PUSH
28724: LD_INT 1
28726: NEG
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: LD_INT 0
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 1
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: LD_INT 1
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 1
28764: NEG
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: LD_INT 1
28779: NEG
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28794: LD_ADDR_VAR 0 60
28798: PUSH
28799: LD_INT 0
28801: PUSH
28802: LD_INT 0
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 0
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 1
28822: PUSH
28823: LD_INT 0
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: LD_INT 1
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 1
28863: NEG
28864: PUSH
28865: LD_INT 1
28867: NEG
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28882: LD_ADDR_VAR 0 61
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: LD_INT 0
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 0
28899: PUSH
28900: LD_INT 1
28902: NEG
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 1
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 1
28920: PUSH
28921: LD_INT 1
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 0
28930: PUSH
28931: LD_INT 1
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 1
28940: NEG
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28970: LD_ADDR_VAR 0 62
28974: PUSH
28975: LD_INT 0
28977: PUSH
28978: LD_INT 0
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 0
28987: PUSH
28988: LD_INT 1
28990: NEG
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 1
28998: PUSH
28999: LD_INT 0
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 1
29008: PUSH
29009: LD_INT 1
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 1
29028: NEG
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: NEG
29040: PUSH
29041: LD_INT 1
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29058: LD_ADDR_VAR 0 63
29062: PUSH
29063: LD_INT 0
29065: PUSH
29066: LD_INT 0
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 0
29075: PUSH
29076: LD_INT 1
29078: NEG
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 1
29086: PUSH
29087: LD_INT 0
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 1
29096: PUSH
29097: LD_INT 1
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 0
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 1
29116: NEG
29117: PUSH
29118: LD_INT 0
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 1
29127: NEG
29128: PUSH
29129: LD_INT 1
29131: NEG
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29146: LD_ADDR_VAR 0 64
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: LD_INT 0
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 0
29163: PUSH
29164: LD_INT 1
29166: NEG
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: LD_INT 0
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: LD_INT 1
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: LD_INT 1
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 1
29204: NEG
29205: PUSH
29206: LD_INT 0
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 1
29215: NEG
29216: PUSH
29217: LD_INT 1
29219: NEG
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: ST_TO_ADDR
// end ; 1 :
29234: GO 35131
29236: LD_INT 1
29238: DOUBLE
29239: EQUAL
29240: IFTRUE 29244
29242: GO 31867
29244: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29245: LD_ADDR_VAR 0 11
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: LD_INT 3
29256: NEG
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: LD_INT 3
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: LD_INT 2
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: LIST
29288: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29289: LD_ADDR_VAR 0 12
29293: PUSH
29294: LD_INT 2
29296: PUSH
29297: LD_INT 1
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 3
29307: PUSH
29308: LD_INT 0
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 3
29317: PUSH
29318: LD_INT 1
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: LIST
29329: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29330: LD_ADDR_VAR 0 13
29334: PUSH
29335: LD_INT 3
29337: PUSH
29338: LD_INT 2
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 3
29347: PUSH
29348: LD_INT 3
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 2
29357: PUSH
29358: LD_INT 3
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: LIST
29369: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29370: LD_ADDR_VAR 0 14
29374: PUSH
29375: LD_INT 1
29377: PUSH
29378: LD_INT 3
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: LD_INT 3
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 1
29397: NEG
29398: PUSH
29399: LD_INT 2
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29411: LD_ADDR_VAR 0 15
29415: PUSH
29416: LD_INT 2
29418: NEG
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 3
29429: NEG
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 3
29440: NEG
29441: PUSH
29442: LD_INT 1
29444: NEG
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29455: LD_ADDR_VAR 0 16
29459: PUSH
29460: LD_INT 2
29462: NEG
29463: PUSH
29464: LD_INT 3
29466: NEG
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 3
29474: NEG
29475: PUSH
29476: LD_INT 2
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 3
29486: NEG
29487: PUSH
29488: LD_INT 3
29490: NEG
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: LIST
29500: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29501: LD_ADDR_VAR 0 17
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: LD_INT 3
29512: NEG
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 0
29520: PUSH
29521: LD_INT 3
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 1
29531: PUSH
29532: LD_INT 2
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: LIST
29544: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29545: LD_ADDR_VAR 0 18
29549: PUSH
29550: LD_INT 2
29552: PUSH
29553: LD_INT 1
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 3
29563: PUSH
29564: LD_INT 0
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 3
29573: PUSH
29574: LD_INT 1
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: LIST
29585: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29586: LD_ADDR_VAR 0 19
29590: PUSH
29591: LD_INT 3
29593: PUSH
29594: LD_INT 2
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 3
29603: PUSH
29604: LD_INT 3
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 2
29613: PUSH
29614: LD_INT 3
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: LIST
29625: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29626: LD_ADDR_VAR 0 20
29630: PUSH
29631: LD_INT 1
29633: PUSH
29634: LD_INT 3
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 0
29643: PUSH
29644: LD_INT 3
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: LD_INT 2
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29667: LD_ADDR_VAR 0 21
29671: PUSH
29672: LD_INT 2
29674: NEG
29675: PUSH
29676: LD_INT 1
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 3
29685: NEG
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 3
29696: NEG
29697: PUSH
29698: LD_INT 1
29700: NEG
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29711: LD_ADDR_VAR 0 22
29715: PUSH
29716: LD_INT 2
29718: NEG
29719: PUSH
29720: LD_INT 3
29722: NEG
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 3
29730: NEG
29731: PUSH
29732: LD_INT 2
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 3
29742: NEG
29743: PUSH
29744: LD_INT 3
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: LIST
29756: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29757: LD_ADDR_VAR 0 23
29761: PUSH
29762: LD_INT 0
29764: PUSH
29765: LD_INT 3
29767: NEG
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 1
29775: NEG
29776: PUSH
29777: LD_INT 4
29779: NEG
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: LD_INT 3
29790: NEG
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: LIST
29800: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29801: LD_ADDR_VAR 0 24
29805: PUSH
29806: LD_INT 3
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 3
29818: PUSH
29819: LD_INT 1
29821: NEG
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 4
29829: PUSH
29830: LD_INT 1
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: LIST
29841: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29842: LD_ADDR_VAR 0 25
29846: PUSH
29847: LD_INT 3
29849: PUSH
29850: LD_INT 3
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 4
29859: PUSH
29860: LD_INT 3
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 3
29869: PUSH
29870: LD_INT 4
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: LIST
29881: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29882: LD_ADDR_VAR 0 26
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: LD_INT 4
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: NEG
29910: PUSH
29911: LD_INT 3
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: LIST
29922: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29923: LD_ADDR_VAR 0 27
29927: PUSH
29928: LD_INT 3
29930: NEG
29931: PUSH
29932: LD_INT 0
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 3
29941: NEG
29942: PUSH
29943: LD_INT 1
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 4
29952: NEG
29953: PUSH
29954: LD_INT 1
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: LIST
29966: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29967: LD_ADDR_VAR 0 28
29971: PUSH
29972: LD_INT 3
29974: NEG
29975: PUSH
29976: LD_INT 3
29978: NEG
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 3
29986: NEG
29987: PUSH
29988: LD_INT 4
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 4
29998: NEG
29999: PUSH
30000: LD_INT 3
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: LIST
30012: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30013: LD_ADDR_VAR 0 29
30017: PUSH
30018: LD_INT 1
30020: NEG
30021: PUSH
30022: LD_INT 3
30024: NEG
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 0
30032: PUSH
30033: LD_INT 3
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: LD_INT 2
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 1
30054: NEG
30055: PUSH
30056: LD_INT 4
30058: NEG
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 0
30066: PUSH
30067: LD_INT 4
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 1
30077: PUSH
30078: LD_INT 3
30080: NEG
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: LD_INT 5
30092: NEG
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 0
30100: PUSH
30101: LD_INT 5
30103: NEG
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 1
30111: PUSH
30112: LD_INT 4
30114: NEG
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 1
30122: NEG
30123: PUSH
30124: LD_INT 6
30126: NEG
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: LD_INT 6
30137: NEG
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 1
30145: PUSH
30146: LD_INT 5
30148: NEG
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30168: LD_ADDR_VAR 0 30
30172: PUSH
30173: LD_INT 2
30175: PUSH
30176: LD_INT 1
30178: NEG
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 3
30186: PUSH
30187: LD_INT 0
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 3
30196: PUSH
30197: LD_INT 1
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 3
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 4
30217: PUSH
30218: LD_INT 0
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 4
30227: PUSH
30228: LD_INT 1
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 4
30237: PUSH
30238: LD_INT 1
30240: NEG
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 5
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 5
30258: PUSH
30259: LD_INT 1
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 5
30268: PUSH
30269: LD_INT 1
30271: NEG
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 6
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 6
30289: PUSH
30290: LD_INT 1
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30311: LD_ADDR_VAR 0 31
30315: PUSH
30316: LD_INT 3
30318: PUSH
30319: LD_INT 2
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 3
30328: PUSH
30329: LD_INT 3
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 2
30338: PUSH
30339: LD_INT 3
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 4
30348: PUSH
30349: LD_INT 3
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 4
30358: PUSH
30359: LD_INT 4
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 3
30368: PUSH
30369: LD_INT 4
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 5
30378: PUSH
30379: LD_INT 4
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 5
30388: PUSH
30389: LD_INT 5
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 4
30398: PUSH
30399: LD_INT 5
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 6
30408: PUSH
30409: LD_INT 5
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 6
30418: PUSH
30419: LD_INT 6
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 5
30428: PUSH
30429: LD_INT 6
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30450: LD_ADDR_VAR 0 32
30454: PUSH
30455: LD_INT 1
30457: PUSH
30458: LD_INT 3
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: LD_INT 3
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 1
30477: NEG
30478: PUSH
30479: LD_INT 2
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: LD_INT 4
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 0
30498: PUSH
30499: LD_INT 4
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 1
30508: NEG
30509: PUSH
30510: LD_INT 3
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 1
30519: PUSH
30520: LD_INT 5
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: LD_INT 5
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 1
30539: NEG
30540: PUSH
30541: LD_INT 4
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: LD_INT 6
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: LD_INT 6
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 1
30570: NEG
30571: PUSH
30572: LD_INT 5
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30593: LD_ADDR_VAR 0 33
30597: PUSH
30598: LD_INT 2
30600: NEG
30601: PUSH
30602: LD_INT 1
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 3
30611: NEG
30612: PUSH
30613: LD_INT 0
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 3
30622: NEG
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 3
30634: NEG
30635: PUSH
30636: LD_INT 1
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 4
30645: NEG
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 4
30656: NEG
30657: PUSH
30658: LD_INT 1
30660: NEG
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 4
30668: NEG
30669: PUSH
30670: LD_INT 1
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 5
30679: NEG
30680: PUSH
30681: LD_INT 0
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 5
30690: NEG
30691: PUSH
30692: LD_INT 1
30694: NEG
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 5
30702: NEG
30703: PUSH
30704: LD_INT 1
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 6
30713: NEG
30714: PUSH
30715: LD_INT 0
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 6
30724: NEG
30725: PUSH
30726: LD_INT 1
30728: NEG
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30748: LD_ADDR_VAR 0 34
30752: PUSH
30753: LD_INT 2
30755: NEG
30756: PUSH
30757: LD_INT 3
30759: NEG
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 3
30767: NEG
30768: PUSH
30769: LD_INT 2
30771: NEG
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 3
30779: NEG
30780: PUSH
30781: LD_INT 3
30783: NEG
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 3
30791: NEG
30792: PUSH
30793: LD_INT 4
30795: NEG
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 4
30803: NEG
30804: PUSH
30805: LD_INT 3
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 4
30815: NEG
30816: PUSH
30817: LD_INT 4
30819: NEG
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 4
30827: NEG
30828: PUSH
30829: LD_INT 5
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 5
30839: NEG
30840: PUSH
30841: LD_INT 4
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 5
30851: NEG
30852: PUSH
30853: LD_INT 5
30855: NEG
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 5
30863: NEG
30864: PUSH
30865: LD_INT 6
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 6
30875: NEG
30876: PUSH
30877: LD_INT 5
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 6
30887: NEG
30888: PUSH
30889: LD_INT 6
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30911: LD_ADDR_VAR 0 41
30915: PUSH
30916: LD_INT 0
30918: PUSH
30919: LD_INT 2
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: NEG
30930: PUSH
30931: LD_INT 3
30933: NEG
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 1
30941: PUSH
30942: LD_INT 2
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: LIST
30954: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30955: LD_ADDR_VAR 0 42
30959: PUSH
30960: LD_INT 2
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 2
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 3
30983: PUSH
30984: LD_INT 1
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: LIST
30995: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30996: LD_ADDR_VAR 0 43
31000: PUSH
31001: LD_INT 2
31003: PUSH
31004: LD_INT 2
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 3
31013: PUSH
31014: LD_INT 2
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 2
31023: PUSH
31024: LD_INT 3
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: LIST
31035: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31036: LD_ADDR_VAR 0 44
31040: PUSH
31041: LD_INT 0
31043: PUSH
31044: LD_INT 2
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: LD_INT 3
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 1
31063: NEG
31064: PUSH
31065: LD_INT 2
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: LIST
31076: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31077: LD_ADDR_VAR 0 45
31081: PUSH
31082: LD_INT 2
31084: NEG
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 2
31095: NEG
31096: PUSH
31097: LD_INT 1
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 3
31106: NEG
31107: PUSH
31108: LD_INT 1
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31121: LD_ADDR_VAR 0 46
31125: PUSH
31126: LD_INT 2
31128: NEG
31129: PUSH
31130: LD_INT 2
31132: NEG
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 2
31140: NEG
31141: PUSH
31142: LD_INT 3
31144: NEG
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 3
31152: NEG
31153: PUSH
31154: LD_INT 2
31156: NEG
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: LIST
31166: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31167: LD_ADDR_VAR 0 47
31171: PUSH
31172: LD_INT 2
31174: NEG
31175: PUSH
31176: LD_INT 3
31178: NEG
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 1
31186: NEG
31187: PUSH
31188: LD_INT 3
31190: NEG
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31200: LD_ADDR_VAR 0 48
31204: PUSH
31205: LD_INT 1
31207: PUSH
31208: LD_INT 2
31210: NEG
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 2
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31231: LD_ADDR_VAR 0 49
31235: PUSH
31236: LD_INT 3
31238: PUSH
31239: LD_INT 1
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 3
31248: PUSH
31249: LD_INT 2
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31260: LD_ADDR_VAR 0 50
31264: PUSH
31265: LD_INT 2
31267: PUSH
31268: LD_INT 3
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 1
31277: PUSH
31278: LD_INT 3
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31289: LD_ADDR_VAR 0 51
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 2
31307: NEG
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31320: LD_ADDR_VAR 0 52
31324: PUSH
31325: LD_INT 3
31327: NEG
31328: PUSH
31329: LD_INT 1
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 3
31339: NEG
31340: PUSH
31341: LD_INT 2
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31353: LD_ADDR_VAR 0 53
31357: PUSH
31358: LD_INT 1
31360: NEG
31361: PUSH
31362: LD_INT 3
31364: NEG
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: LD_INT 3
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: LD_INT 2
31386: NEG
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31397: LD_ADDR_VAR 0 54
31401: PUSH
31402: LD_INT 2
31404: PUSH
31405: LD_INT 1
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 3
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 3
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: LIST
31437: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31438: LD_ADDR_VAR 0 55
31442: PUSH
31443: LD_INT 3
31445: PUSH
31446: LD_INT 2
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 3
31455: PUSH
31456: LD_INT 3
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 2
31465: PUSH
31466: LD_INT 3
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31478: LD_ADDR_VAR 0 56
31482: PUSH
31483: LD_INT 1
31485: PUSH
31486: LD_INT 3
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: LD_INT 3
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: NEG
31506: PUSH
31507: LD_INT 2
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31519: LD_ADDR_VAR 0 57
31523: PUSH
31524: LD_INT 2
31526: NEG
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 3
31537: NEG
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 3
31548: NEG
31549: PUSH
31550: LD_INT 1
31552: NEG
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31563: LD_ADDR_VAR 0 58
31567: PUSH
31568: LD_INT 2
31570: NEG
31571: PUSH
31572: LD_INT 3
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 3
31582: NEG
31583: PUSH
31584: LD_INT 2
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 3
31594: NEG
31595: PUSH
31596: LD_INT 3
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: LIST
31608: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31609: LD_ADDR_VAR 0 59
31613: PUSH
31614: LD_INT 1
31616: NEG
31617: PUSH
31618: LD_INT 2
31620: NEG
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: LD_INT 1
31642: NEG
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: LIST
31652: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31653: LD_ADDR_VAR 0 60
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: LD_INT 1
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: LD_INT 0
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: LD_INT 1
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: LIST
31693: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31694: LD_ADDR_VAR 0 61
31698: PUSH
31699: LD_INT 2
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 2
31711: PUSH
31712: LD_INT 2
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: LD_INT 2
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: LIST
31733: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31734: LD_ADDR_VAR 0 62
31738: PUSH
31739: LD_INT 1
31741: PUSH
31742: LD_INT 2
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 0
31751: PUSH
31752: LD_INT 2
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 1
31761: NEG
31762: PUSH
31763: LD_INT 1
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: LIST
31774: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31775: LD_ADDR_VAR 0 63
31779: PUSH
31780: LD_INT 1
31782: NEG
31783: PUSH
31784: LD_INT 1
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 2
31793: NEG
31794: PUSH
31795: LD_INT 0
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 2
31804: NEG
31805: PUSH
31806: LD_INT 1
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: LIST
31818: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31819: LD_ADDR_VAR 0 64
31823: PUSH
31824: LD_INT 1
31826: NEG
31827: PUSH
31828: LD_INT 2
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 2
31838: NEG
31839: PUSH
31840: LD_INT 1
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 2
31850: NEG
31851: PUSH
31852: LD_INT 2
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: LIST
31864: ST_TO_ADDR
// end ; 2 :
31865: GO 35131
31867: LD_INT 2
31869: DOUBLE
31870: EQUAL
31871: IFTRUE 31875
31873: GO 35130
31875: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31876: LD_ADDR_VAR 0 29
31880: PUSH
31881: LD_INT 4
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 4
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 5
31904: PUSH
31905: LD_INT 0
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 5
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 4
31924: PUSH
31925: LD_INT 1
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 3
31934: PUSH
31935: LD_INT 0
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 3
31944: PUSH
31945: LD_INT 1
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 3
31955: PUSH
31956: LD_INT 2
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 5
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 3
31976: PUSH
31977: LD_INT 3
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 3
31986: PUSH
31987: LD_INT 2
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 4
31996: PUSH
31997: LD_INT 3
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 4
32006: PUSH
32007: LD_INT 4
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 3
32016: PUSH
32017: LD_INT 4
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 2
32026: PUSH
32027: LD_INT 3
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 2
32036: PUSH
32037: LD_INT 2
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 4
32046: PUSH
32047: LD_INT 2
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: LD_INT 4
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 0
32066: PUSH
32067: LD_INT 4
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 0
32076: PUSH
32077: LD_INT 3
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: LD_INT 4
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: LD_INT 5
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 0
32106: PUSH
32107: LD_INT 5
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 1
32116: NEG
32117: PUSH
32118: LD_INT 4
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 1
32127: NEG
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 2
32138: PUSH
32139: LD_INT 5
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 2
32148: NEG
32149: PUSH
32150: LD_INT 3
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 3
32159: NEG
32160: PUSH
32161: LD_INT 0
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 3
32170: NEG
32171: PUSH
32172: LD_INT 1
32174: NEG
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 2
32182: NEG
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 2
32193: NEG
32194: PUSH
32195: LD_INT 1
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 3
32204: NEG
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 4
32215: NEG
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 4
32226: NEG
32227: PUSH
32228: LD_INT 1
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 4
32238: NEG
32239: PUSH
32240: LD_INT 2
32242: NEG
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 2
32250: NEG
32251: PUSH
32252: LD_INT 2
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 4
32261: NEG
32262: PUSH
32263: LD_INT 4
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 4
32273: NEG
32274: PUSH
32275: LD_INT 5
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 3
32285: NEG
32286: PUSH
32287: LD_INT 4
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 3
32297: NEG
32298: PUSH
32299: LD_INT 3
32301: NEG
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 4
32309: NEG
32310: PUSH
32311: LD_INT 3
32313: NEG
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 5
32321: NEG
32322: PUSH
32323: LD_INT 4
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 5
32333: NEG
32334: PUSH
32335: LD_INT 5
32337: NEG
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 3
32345: NEG
32346: PUSH
32347: LD_INT 5
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 5
32357: NEG
32358: PUSH
32359: LD_INT 3
32361: NEG
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32414: LD_ADDR_VAR 0 30
32418: PUSH
32419: LD_INT 4
32421: PUSH
32422: LD_INT 4
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 4
32431: PUSH
32432: LD_INT 3
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 5
32441: PUSH
32442: LD_INT 4
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 5
32451: PUSH
32452: LD_INT 5
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 4
32461: PUSH
32462: LD_INT 5
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 3
32471: PUSH
32472: LD_INT 4
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 3
32481: PUSH
32482: LD_INT 3
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 5
32491: PUSH
32492: LD_INT 3
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 3
32501: PUSH
32502: LD_INT 5
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 0
32511: PUSH
32512: LD_INT 3
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: LD_INT 2
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 1
32531: PUSH
32532: LD_INT 3
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 1
32541: PUSH
32542: LD_INT 4
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 0
32551: PUSH
32552: LD_INT 4
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 1
32561: NEG
32562: PUSH
32563: LD_INT 3
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: LD_INT 2
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: LD_INT 4
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 2
32593: NEG
32594: PUSH
32595: LD_INT 2
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 4
32604: NEG
32605: PUSH
32606: LD_INT 0
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 4
32615: NEG
32616: PUSH
32617: LD_INT 1
32619: NEG
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 3
32627: NEG
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 3
32638: NEG
32639: PUSH
32640: LD_INT 1
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 4
32649: NEG
32650: PUSH
32651: LD_INT 1
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 5
32660: NEG
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 5
32671: NEG
32672: PUSH
32673: LD_INT 1
32675: NEG
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 5
32683: NEG
32684: PUSH
32685: LD_INT 2
32687: NEG
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 3
32695: NEG
32696: PUSH
32697: LD_INT 2
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 3
32706: NEG
32707: PUSH
32708: LD_INT 3
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 3
32718: NEG
32719: PUSH
32720: LD_INT 4
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 2
32730: NEG
32731: PUSH
32732: LD_INT 3
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 2
32742: NEG
32743: PUSH
32744: LD_INT 2
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 3
32754: NEG
32755: PUSH
32756: LD_INT 2
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 4
32766: NEG
32767: PUSH
32768: LD_INT 3
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 4
32778: NEG
32779: PUSH
32780: LD_INT 4
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 2
32790: NEG
32791: PUSH
32792: LD_INT 4
32794: NEG
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 4
32802: NEG
32803: PUSH
32804: LD_INT 2
32806: NEG
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 0
32814: PUSH
32815: LD_INT 4
32817: NEG
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 0
32825: PUSH
32826: LD_INT 5
32828: NEG
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: PUSH
32837: LD_INT 4
32839: NEG
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 1
32847: PUSH
32848: LD_INT 3
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 0
32858: PUSH
32859: LD_INT 3
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 1
32869: NEG
32870: PUSH
32871: LD_INT 4
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 1
32881: NEG
32882: PUSH
32883: LD_INT 5
32885: NEG
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 2
32893: PUSH
32894: LD_INT 3
32896: NEG
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 2
32904: NEG
32905: PUSH
32906: LD_INT 5
32908: NEG
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32961: LD_ADDR_VAR 0 31
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: LD_INT 4
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 0
32978: PUSH
32979: LD_INT 3
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: LD_INT 4
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 1
32998: PUSH
32999: LD_INT 5
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: LD_INT 5
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 1
33018: NEG
33019: PUSH
33020: LD_INT 4
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: NEG
33030: PUSH
33031: LD_INT 3
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: LD_INT 5
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 2
33050: NEG
33051: PUSH
33052: LD_INT 3
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 3
33061: NEG
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 3
33072: NEG
33073: PUSH
33074: LD_INT 1
33076: NEG
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 2
33084: NEG
33085: PUSH
33086: LD_INT 0
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 2
33095: NEG
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 3
33106: NEG
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 4
33117: NEG
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 4
33128: NEG
33129: PUSH
33130: LD_INT 1
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 4
33140: NEG
33141: PUSH
33142: LD_INT 2
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 2
33152: NEG
33153: PUSH
33154: LD_INT 2
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 4
33163: NEG
33164: PUSH
33165: LD_INT 4
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 4
33175: NEG
33176: PUSH
33177: LD_INT 5
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 3
33187: NEG
33188: PUSH
33189: LD_INT 4
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 3
33199: NEG
33200: PUSH
33201: LD_INT 3
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 4
33211: NEG
33212: PUSH
33213: LD_INT 3
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 5
33223: NEG
33224: PUSH
33225: LD_INT 4
33227: NEG
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 5
33235: NEG
33236: PUSH
33237: LD_INT 5
33239: NEG
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 3
33247: NEG
33248: PUSH
33249: LD_INT 5
33251: NEG
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 5
33259: NEG
33260: PUSH
33261: LD_INT 3
33263: NEG
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: LD_INT 3
33274: NEG
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 4
33285: NEG
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: PUSH
33294: LD_INT 3
33296: NEG
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 1
33304: PUSH
33305: LD_INT 2
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: LD_INT 2
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: LD_INT 3
33330: NEG
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 1
33338: NEG
33339: PUSH
33340: LD_INT 4
33342: NEG
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 2
33350: PUSH
33351: LD_INT 2
33353: NEG
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 2
33361: NEG
33362: PUSH
33363: LD_INT 4
33365: NEG
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 4
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 4
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 5
33394: PUSH
33395: LD_INT 0
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 5
33404: PUSH
33405: LD_INT 1
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 4
33414: PUSH
33415: LD_INT 1
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 3
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 3
33434: PUSH
33435: LD_INT 1
33437: NEG
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 3
33445: PUSH
33446: LD_INT 2
33448: NEG
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 5
33456: PUSH
33457: LD_INT 2
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33511: LD_ADDR_VAR 0 32
33515: PUSH
33516: LD_INT 4
33518: NEG
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 4
33529: NEG
33530: PUSH
33531: LD_INT 1
33533: NEG
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 3
33541: NEG
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 3
33552: NEG
33553: PUSH
33554: LD_INT 1
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 4
33563: NEG
33564: PUSH
33565: LD_INT 1
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 5
33574: NEG
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 5
33585: NEG
33586: PUSH
33587: LD_INT 1
33589: NEG
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 5
33597: NEG
33598: PUSH
33599: LD_INT 2
33601: NEG
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 3
33609: NEG
33610: PUSH
33611: LD_INT 2
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 3
33620: NEG
33621: PUSH
33622: LD_INT 3
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 3
33632: NEG
33633: PUSH
33634: LD_INT 4
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: LD_INT 3
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 2
33656: NEG
33657: PUSH
33658: LD_INT 2
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 3
33668: NEG
33669: PUSH
33670: LD_INT 2
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 4
33680: NEG
33681: PUSH
33682: LD_INT 3
33684: NEG
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 4
33692: NEG
33693: PUSH
33694: LD_INT 4
33696: NEG
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 2
33704: NEG
33705: PUSH
33706: LD_INT 4
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 4
33716: NEG
33717: PUSH
33718: LD_INT 2
33720: NEG
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 0
33728: PUSH
33729: LD_INT 4
33731: NEG
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 0
33739: PUSH
33740: LD_INT 5
33742: NEG
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 1
33750: PUSH
33751: LD_INT 4
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 1
33761: PUSH
33762: LD_INT 3
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 0
33772: PUSH
33773: LD_INT 3
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: NEG
33784: PUSH
33785: LD_INT 4
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 1
33795: NEG
33796: PUSH
33797: LD_INT 5
33799: NEG
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 2
33807: PUSH
33808: LD_INT 3
33810: NEG
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 2
33818: NEG
33819: PUSH
33820: LD_INT 5
33822: NEG
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 3
33830: PUSH
33831: LD_INT 0
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 3
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 4
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 4
33861: PUSH
33862: LD_INT 1
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 3
33871: PUSH
33872: LD_INT 1
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 2
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 2
33891: PUSH
33892: LD_INT 1
33894: NEG
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 2
33902: PUSH
33903: LD_INT 2
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 4
33913: PUSH
33914: LD_INT 2
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 4
33923: PUSH
33924: LD_INT 4
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 4
33933: PUSH
33934: LD_INT 3
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 5
33943: PUSH
33944: LD_INT 4
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 5
33953: PUSH
33954: LD_INT 5
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 4
33963: PUSH
33964: LD_INT 5
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 3
33973: PUSH
33974: LD_INT 4
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 3
33983: PUSH
33984: LD_INT 3
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 5
33993: PUSH
33994: LD_INT 3
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 3
34003: PUSH
34004: LD_INT 5
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34058: LD_ADDR_VAR 0 33
34062: PUSH
34063: LD_INT 4
34065: NEG
34066: PUSH
34067: LD_INT 4
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 4
34077: NEG
34078: PUSH
34079: LD_INT 5
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 3
34089: NEG
34090: PUSH
34091: LD_INT 4
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 3
34101: NEG
34102: PUSH
34103: LD_INT 3
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 4
34113: NEG
34114: PUSH
34115: LD_INT 3
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 5
34125: NEG
34126: PUSH
34127: LD_INT 4
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 5
34137: NEG
34138: PUSH
34139: LD_INT 5
34141: NEG
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 3
34149: NEG
34150: PUSH
34151: LD_INT 5
34153: NEG
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 5
34161: NEG
34162: PUSH
34163: LD_INT 3
34165: NEG
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 0
34173: PUSH
34174: LD_INT 3
34176: NEG
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: LD_INT 4
34187: NEG
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 1
34195: PUSH
34196: LD_INT 3
34198: NEG
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 1
34206: PUSH
34207: LD_INT 2
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 0
34217: PUSH
34218: LD_INT 2
34220: NEG
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 1
34228: NEG
34229: PUSH
34230: LD_INT 3
34232: NEG
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 1
34240: NEG
34241: PUSH
34242: LD_INT 4
34244: NEG
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 2
34252: PUSH
34253: LD_INT 2
34255: NEG
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 2
34263: NEG
34264: PUSH
34265: LD_INT 4
34267: NEG
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 4
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 4
34285: PUSH
34286: LD_INT 1
34288: NEG
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 5
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 5
34306: PUSH
34307: LD_INT 1
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 4
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 3
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 3
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 3
34347: PUSH
34348: LD_INT 2
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 5
34358: PUSH
34359: LD_INT 2
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 3
34368: PUSH
34369: LD_INT 3
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 3
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 4
34388: PUSH
34389: LD_INT 3
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 4
34398: PUSH
34399: LD_INT 4
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 3
34408: PUSH
34409: LD_INT 4
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 2
34418: PUSH
34419: LD_INT 3
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 2
34428: PUSH
34429: LD_INT 2
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 4
34438: PUSH
34439: LD_INT 2
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 2
34448: PUSH
34449: LD_INT 4
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 0
34458: PUSH
34459: LD_INT 4
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: LD_INT 3
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: LD_INT 4
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 1
34488: PUSH
34489: LD_INT 5
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 0
34498: PUSH
34499: LD_INT 5
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: NEG
34509: PUSH
34510: LD_INT 4
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 1
34519: NEG
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 2
34530: PUSH
34531: LD_INT 5
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 2
34540: NEG
34541: PUSH
34542: LD_INT 3
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34596: LD_ADDR_VAR 0 34
34600: PUSH
34601: LD_INT 0
34603: PUSH
34604: LD_INT 4
34606: NEG
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 0
34614: PUSH
34615: LD_INT 5
34617: NEG
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 1
34625: PUSH
34626: LD_INT 4
34628: NEG
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 1
34636: PUSH
34637: LD_INT 3
34639: NEG
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: LD_INT 3
34650: NEG
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: LD_INT 4
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 1
34670: NEG
34671: PUSH
34672: LD_INT 5
34674: NEG
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 2
34682: PUSH
34683: LD_INT 3
34685: NEG
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 2
34693: NEG
34694: PUSH
34695: LD_INT 5
34697: NEG
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 3
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 3
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 4
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 4
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 3
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 2
34756: PUSH
34757: LD_INT 0
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 2
34766: PUSH
34767: LD_INT 1
34769: NEG
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: LD_INT 2
34780: NEG
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 4
34788: PUSH
34789: LD_INT 2
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 4
34798: PUSH
34799: LD_INT 4
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 4
34808: PUSH
34809: LD_INT 3
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 5
34818: PUSH
34819: LD_INT 4
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 5
34828: PUSH
34829: LD_INT 5
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 4
34838: PUSH
34839: LD_INT 5
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 3
34848: PUSH
34849: LD_INT 4
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 3
34858: PUSH
34859: LD_INT 3
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 5
34868: PUSH
34869: LD_INT 3
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 3
34878: PUSH
34879: LD_INT 5
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 0
34888: PUSH
34889: LD_INT 3
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: LD_INT 2
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: LD_INT 3
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 1
34918: PUSH
34919: LD_INT 4
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 0
34928: PUSH
34929: LD_INT 4
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 1
34938: NEG
34939: PUSH
34940: LD_INT 3
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 1
34949: NEG
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 2
34960: PUSH
34961: LD_INT 4
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 2
34970: NEG
34971: PUSH
34972: LD_INT 2
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 4
34981: NEG
34982: PUSH
34983: LD_INT 0
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 4
34992: NEG
34993: PUSH
34994: LD_INT 1
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 3
35004: NEG
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 3
35015: NEG
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 4
35026: NEG
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 5
35037: NEG
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 5
35048: NEG
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 5
35060: NEG
35061: PUSH
35062: LD_INT 2
35064: NEG
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 3
35072: NEG
35073: PUSH
35074: LD_INT 2
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: ST_TO_ADDR
// end ; end ;
35128: GO 35131
35130: POP
// case btype of b_depot , b_warehouse :
35131: LD_VAR 0 1
35135: PUSH
35136: LD_INT 0
35138: DOUBLE
35139: EQUAL
35140: IFTRUE 35150
35142: LD_INT 1
35144: DOUBLE
35145: EQUAL
35146: IFTRUE 35150
35148: GO 35351
35150: POP
// case nation of nation_american :
35151: LD_VAR 0 5
35155: PUSH
35156: LD_INT 1
35158: DOUBLE
35159: EQUAL
35160: IFTRUE 35164
35162: GO 35220
35164: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35165: LD_ADDR_VAR 0 9
35169: PUSH
35170: LD_VAR 0 11
35174: PUSH
35175: LD_VAR 0 12
35179: PUSH
35180: LD_VAR 0 13
35184: PUSH
35185: LD_VAR 0 14
35189: PUSH
35190: LD_VAR 0 15
35194: PUSH
35195: LD_VAR 0 16
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: PUSH
35208: LD_VAR 0 4
35212: PUSH
35213: LD_INT 1
35215: PLUS
35216: ARRAY
35217: ST_TO_ADDR
35218: GO 35349
35220: LD_INT 2
35222: DOUBLE
35223: EQUAL
35224: IFTRUE 35228
35226: GO 35284
35228: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35229: LD_ADDR_VAR 0 9
35233: PUSH
35234: LD_VAR 0 17
35238: PUSH
35239: LD_VAR 0 18
35243: PUSH
35244: LD_VAR 0 19
35248: PUSH
35249: LD_VAR 0 20
35253: PUSH
35254: LD_VAR 0 21
35258: PUSH
35259: LD_VAR 0 22
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: PUSH
35272: LD_VAR 0 4
35276: PUSH
35277: LD_INT 1
35279: PLUS
35280: ARRAY
35281: ST_TO_ADDR
35282: GO 35349
35284: LD_INT 3
35286: DOUBLE
35287: EQUAL
35288: IFTRUE 35292
35290: GO 35348
35292: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35293: LD_ADDR_VAR 0 9
35297: PUSH
35298: LD_VAR 0 23
35302: PUSH
35303: LD_VAR 0 24
35307: PUSH
35308: LD_VAR 0 25
35312: PUSH
35313: LD_VAR 0 26
35317: PUSH
35318: LD_VAR 0 27
35322: PUSH
35323: LD_VAR 0 28
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: PUSH
35336: LD_VAR 0 4
35340: PUSH
35341: LD_INT 1
35343: PLUS
35344: ARRAY
35345: ST_TO_ADDR
35346: GO 35349
35348: POP
35349: GO 35904
35351: LD_INT 2
35353: DOUBLE
35354: EQUAL
35355: IFTRUE 35365
35357: LD_INT 3
35359: DOUBLE
35360: EQUAL
35361: IFTRUE 35365
35363: GO 35421
35365: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35366: LD_ADDR_VAR 0 9
35370: PUSH
35371: LD_VAR 0 29
35375: PUSH
35376: LD_VAR 0 30
35380: PUSH
35381: LD_VAR 0 31
35385: PUSH
35386: LD_VAR 0 32
35390: PUSH
35391: LD_VAR 0 33
35395: PUSH
35396: LD_VAR 0 34
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: PUSH
35409: LD_VAR 0 4
35413: PUSH
35414: LD_INT 1
35416: PLUS
35417: ARRAY
35418: ST_TO_ADDR
35419: GO 35904
35421: LD_INT 16
35423: DOUBLE
35424: EQUAL
35425: IFTRUE 35483
35427: LD_INT 17
35429: DOUBLE
35430: EQUAL
35431: IFTRUE 35483
35433: LD_INT 18
35435: DOUBLE
35436: EQUAL
35437: IFTRUE 35483
35439: LD_INT 19
35441: DOUBLE
35442: EQUAL
35443: IFTRUE 35483
35445: LD_INT 22
35447: DOUBLE
35448: EQUAL
35449: IFTRUE 35483
35451: LD_INT 20
35453: DOUBLE
35454: EQUAL
35455: IFTRUE 35483
35457: LD_INT 21
35459: DOUBLE
35460: EQUAL
35461: IFTRUE 35483
35463: LD_INT 23
35465: DOUBLE
35466: EQUAL
35467: IFTRUE 35483
35469: LD_INT 24
35471: DOUBLE
35472: EQUAL
35473: IFTRUE 35483
35475: LD_INT 25
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35483
35481: GO 35539
35483: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35484: LD_ADDR_VAR 0 9
35488: PUSH
35489: LD_VAR 0 35
35493: PUSH
35494: LD_VAR 0 36
35498: PUSH
35499: LD_VAR 0 37
35503: PUSH
35504: LD_VAR 0 38
35508: PUSH
35509: LD_VAR 0 39
35513: PUSH
35514: LD_VAR 0 40
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: PUSH
35527: LD_VAR 0 4
35531: PUSH
35532: LD_INT 1
35534: PLUS
35535: ARRAY
35536: ST_TO_ADDR
35537: GO 35904
35539: LD_INT 6
35541: DOUBLE
35542: EQUAL
35543: IFTRUE 35595
35545: LD_INT 7
35547: DOUBLE
35548: EQUAL
35549: IFTRUE 35595
35551: LD_INT 8
35553: DOUBLE
35554: EQUAL
35555: IFTRUE 35595
35557: LD_INT 13
35559: DOUBLE
35560: EQUAL
35561: IFTRUE 35595
35563: LD_INT 12
35565: DOUBLE
35566: EQUAL
35567: IFTRUE 35595
35569: LD_INT 15
35571: DOUBLE
35572: EQUAL
35573: IFTRUE 35595
35575: LD_INT 11
35577: DOUBLE
35578: EQUAL
35579: IFTRUE 35595
35581: LD_INT 14
35583: DOUBLE
35584: EQUAL
35585: IFTRUE 35595
35587: LD_INT 10
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35595
35593: GO 35651
35595: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35596: LD_ADDR_VAR 0 9
35600: PUSH
35601: LD_VAR 0 41
35605: PUSH
35606: LD_VAR 0 42
35610: PUSH
35611: LD_VAR 0 43
35615: PUSH
35616: LD_VAR 0 44
35620: PUSH
35621: LD_VAR 0 45
35625: PUSH
35626: LD_VAR 0 46
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: PUSH
35639: LD_VAR 0 4
35643: PUSH
35644: LD_INT 1
35646: PLUS
35647: ARRAY
35648: ST_TO_ADDR
35649: GO 35904
35651: LD_INT 36
35653: DOUBLE
35654: EQUAL
35655: IFTRUE 35659
35657: GO 35715
35659: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35660: LD_ADDR_VAR 0 9
35664: PUSH
35665: LD_VAR 0 47
35669: PUSH
35670: LD_VAR 0 48
35674: PUSH
35675: LD_VAR 0 49
35679: PUSH
35680: LD_VAR 0 50
35684: PUSH
35685: LD_VAR 0 51
35689: PUSH
35690: LD_VAR 0 52
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: PUSH
35703: LD_VAR 0 4
35707: PUSH
35708: LD_INT 1
35710: PLUS
35711: ARRAY
35712: ST_TO_ADDR
35713: GO 35904
35715: LD_INT 4
35717: DOUBLE
35718: EQUAL
35719: IFTRUE 35741
35721: LD_INT 5
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35741
35727: LD_INT 34
35729: DOUBLE
35730: EQUAL
35731: IFTRUE 35741
35733: LD_INT 37
35735: DOUBLE
35736: EQUAL
35737: IFTRUE 35741
35739: GO 35797
35741: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35742: LD_ADDR_VAR 0 9
35746: PUSH
35747: LD_VAR 0 53
35751: PUSH
35752: LD_VAR 0 54
35756: PUSH
35757: LD_VAR 0 55
35761: PUSH
35762: LD_VAR 0 56
35766: PUSH
35767: LD_VAR 0 57
35771: PUSH
35772: LD_VAR 0 58
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: PUSH
35785: LD_VAR 0 4
35789: PUSH
35790: LD_INT 1
35792: PLUS
35793: ARRAY
35794: ST_TO_ADDR
35795: GO 35904
35797: LD_INT 31
35799: DOUBLE
35800: EQUAL
35801: IFTRUE 35847
35803: LD_INT 32
35805: DOUBLE
35806: EQUAL
35807: IFTRUE 35847
35809: LD_INT 33
35811: DOUBLE
35812: EQUAL
35813: IFTRUE 35847
35815: LD_INT 27
35817: DOUBLE
35818: EQUAL
35819: IFTRUE 35847
35821: LD_INT 26
35823: DOUBLE
35824: EQUAL
35825: IFTRUE 35847
35827: LD_INT 28
35829: DOUBLE
35830: EQUAL
35831: IFTRUE 35847
35833: LD_INT 29
35835: DOUBLE
35836: EQUAL
35837: IFTRUE 35847
35839: LD_INT 30
35841: DOUBLE
35842: EQUAL
35843: IFTRUE 35847
35845: GO 35903
35847: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35848: LD_ADDR_VAR 0 9
35852: PUSH
35853: LD_VAR 0 59
35857: PUSH
35858: LD_VAR 0 60
35862: PUSH
35863: LD_VAR 0 61
35867: PUSH
35868: LD_VAR 0 62
35872: PUSH
35873: LD_VAR 0 63
35877: PUSH
35878: LD_VAR 0 64
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: PUSH
35891: LD_VAR 0 4
35895: PUSH
35896: LD_INT 1
35898: PLUS
35899: ARRAY
35900: ST_TO_ADDR
35901: GO 35904
35903: POP
// temp_list2 = [ ] ;
35904: LD_ADDR_VAR 0 10
35908: PUSH
35909: EMPTY
35910: ST_TO_ADDR
// for i in temp_list do
35911: LD_ADDR_VAR 0 8
35915: PUSH
35916: LD_VAR 0 9
35920: PUSH
35921: FOR_IN
35922: IFFALSE 35974
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35924: LD_ADDR_VAR 0 10
35928: PUSH
35929: LD_VAR 0 10
35933: PUSH
35934: LD_VAR 0 8
35938: PUSH
35939: LD_INT 1
35941: ARRAY
35942: PUSH
35943: LD_VAR 0 2
35947: PLUS
35948: PUSH
35949: LD_VAR 0 8
35953: PUSH
35954: LD_INT 2
35956: ARRAY
35957: PUSH
35958: LD_VAR 0 3
35962: PLUS
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: EMPTY
35969: LIST
35970: ADD
35971: ST_TO_ADDR
35972: GO 35921
35974: POP
35975: POP
// result = temp_list2 ;
35976: LD_ADDR_VAR 0 7
35980: PUSH
35981: LD_VAR 0 10
35985: ST_TO_ADDR
// end ;
35986: LD_VAR 0 7
35990: RET
// export function EnemyInRange ( unit , dist ) ; begin
35991: LD_INT 0
35993: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35994: LD_ADDR_VAR 0 3
35998: PUSH
35999: LD_VAR 0 1
36003: PPUSH
36004: CALL_OW 255
36008: PPUSH
36009: LD_VAR 0 1
36013: PPUSH
36014: CALL_OW 250
36018: PPUSH
36019: LD_VAR 0 1
36023: PPUSH
36024: CALL_OW 251
36028: PPUSH
36029: LD_VAR 0 2
36033: PPUSH
36034: CALL 9248 0 4
36038: PUSH
36039: LD_INT 4
36041: ARRAY
36042: ST_TO_ADDR
// end ;
36043: LD_VAR 0 3
36047: RET
// export function PlayerSeeMe ( unit ) ; begin
36048: LD_INT 0
36050: PPUSH
// result := See ( your_side , unit ) ;
36051: LD_ADDR_VAR 0 2
36055: PUSH
36056: LD_OWVAR 2
36060: PPUSH
36061: LD_VAR 0 1
36065: PPUSH
36066: CALL_OW 292
36070: ST_TO_ADDR
// end ;
36071: LD_VAR 0 2
36075: RET
// export function ReverseDir ( unit ) ; begin
36076: LD_INT 0
36078: PPUSH
// if not unit then
36079: LD_VAR 0 1
36083: NOT
36084: IFFALSE 36088
// exit ;
36086: GO 36111
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36088: LD_ADDR_VAR 0 2
36092: PUSH
36093: LD_VAR 0 1
36097: PPUSH
36098: CALL_OW 254
36102: PUSH
36103: LD_INT 3
36105: PLUS
36106: PUSH
36107: LD_INT 6
36109: MOD
36110: ST_TO_ADDR
// end ;
36111: LD_VAR 0 2
36115: RET
// export function ReverseArray ( array ) ; var i ; begin
36116: LD_INT 0
36118: PPUSH
36119: PPUSH
// if not array then
36120: LD_VAR 0 1
36124: NOT
36125: IFFALSE 36129
// exit ;
36127: GO 36184
// result := [ ] ;
36129: LD_ADDR_VAR 0 2
36133: PUSH
36134: EMPTY
36135: ST_TO_ADDR
// for i := array downto 1 do
36136: LD_ADDR_VAR 0 3
36140: PUSH
36141: DOUBLE
36142: LD_VAR 0 1
36146: INC
36147: ST_TO_ADDR
36148: LD_INT 1
36150: PUSH
36151: FOR_DOWNTO
36152: IFFALSE 36182
// result := Join ( result , array [ i ] ) ;
36154: LD_ADDR_VAR 0 2
36158: PUSH
36159: LD_VAR 0 2
36163: PPUSH
36164: LD_VAR 0 1
36168: PUSH
36169: LD_VAR 0 3
36173: ARRAY
36174: PPUSH
36175: CALL 41036 0 2
36179: ST_TO_ADDR
36180: GO 36151
36182: POP
36183: POP
// end ;
36184: LD_VAR 0 2
36188: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36189: LD_INT 0
36191: PPUSH
36192: PPUSH
36193: PPUSH
36194: PPUSH
36195: PPUSH
36196: PPUSH
// if not unit or not hexes then
36197: LD_VAR 0 1
36201: NOT
36202: IFTRUE 36211
36204: PUSH
36205: LD_VAR 0 2
36209: NOT
36210: OR
36211: IFFALSE 36215
// exit ;
36213: GO 36338
// dist := 9999 ;
36215: LD_ADDR_VAR 0 5
36219: PUSH
36220: LD_INT 9999
36222: ST_TO_ADDR
// for i = 1 to hexes do
36223: LD_ADDR_VAR 0 4
36227: PUSH
36228: DOUBLE
36229: LD_INT 1
36231: DEC
36232: ST_TO_ADDR
36233: LD_VAR 0 2
36237: PUSH
36238: FOR_TO
36239: IFFALSE 36326
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36241: LD_ADDR_VAR 0 6
36245: PUSH
36246: LD_VAR 0 1
36250: PPUSH
36251: LD_VAR 0 2
36255: PUSH
36256: LD_VAR 0 4
36260: ARRAY
36261: PUSH
36262: LD_INT 1
36264: ARRAY
36265: PPUSH
36266: LD_VAR 0 2
36270: PUSH
36271: LD_VAR 0 4
36275: ARRAY
36276: PUSH
36277: LD_INT 2
36279: ARRAY
36280: PPUSH
36281: CALL_OW 297
36285: ST_TO_ADDR
// if tdist < dist then
36286: LD_VAR 0 6
36290: PUSH
36291: LD_VAR 0 5
36295: LESS
36296: IFFALSE 36324
// begin hex := hexes [ i ] ;
36298: LD_ADDR_VAR 0 8
36302: PUSH
36303: LD_VAR 0 2
36307: PUSH
36308: LD_VAR 0 4
36312: ARRAY
36313: ST_TO_ADDR
// dist := tdist ;
36314: LD_ADDR_VAR 0 5
36318: PUSH
36319: LD_VAR 0 6
36323: ST_TO_ADDR
// end ; end ;
36324: GO 36238
36326: POP
36327: POP
// result := hex ;
36328: LD_ADDR_VAR 0 3
36332: PUSH
36333: LD_VAR 0 8
36337: ST_TO_ADDR
// end ;
36338: LD_VAR 0 3
36342: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36343: LD_INT 0
36345: PPUSH
36346: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36347: LD_VAR 0 1
36351: NOT
36352: IFTRUE 36391
36354: PUSH
36355: LD_VAR 0 1
36359: PUSH
36360: LD_INT 21
36362: PUSH
36363: LD_INT 2
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 23
36372: PUSH
36373: LD_INT 2
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PPUSH
36384: CALL_OW 69
36388: IN
36389: NOT
36390: OR
36391: IFFALSE 36395
// exit ;
36393: GO 36442
// for i = 1 to 3 do
36395: LD_ADDR_VAR 0 3
36399: PUSH
36400: DOUBLE
36401: LD_INT 1
36403: DEC
36404: ST_TO_ADDR
36405: LD_INT 3
36407: PUSH
36408: FOR_TO
36409: IFFALSE 36440
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36411: LD_VAR 0 1
36415: PPUSH
36416: CALL_OW 250
36420: PPUSH
36421: LD_VAR 0 1
36425: PPUSH
36426: CALL_OW 251
36430: PPUSH
36431: LD_INT 1
36433: PPUSH
36434: CALL_OW 453
36438: GO 36408
36440: POP
36441: POP
// end ;
36442: LD_VAR 0 2
36446: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36447: LD_INT 0
36449: PPUSH
36450: PPUSH
36451: PPUSH
36452: PPUSH
36453: PPUSH
36454: PPUSH
// if not unit or not enemy_unit then
36455: LD_VAR 0 1
36459: NOT
36460: IFTRUE 36469
36462: PUSH
36463: LD_VAR 0 2
36467: NOT
36468: OR
36469: IFFALSE 36473
// exit ;
36471: GO 36954
// if GetLives ( i ) < 250 then
36473: LD_VAR 0 4
36477: PPUSH
36478: CALL_OW 256
36482: PUSH
36483: LD_INT 250
36485: LESS
36486: IFFALSE 36499
// begin ComAutodestruct ( i ) ;
36488: LD_VAR 0 4
36492: PPUSH
36493: CALL 36343 0 1
// exit ;
36497: GO 36954
// end ; x := GetX ( enemy_unit ) ;
36499: LD_ADDR_VAR 0 7
36503: PUSH
36504: LD_VAR 0 2
36508: PPUSH
36509: CALL_OW 250
36513: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36514: LD_ADDR_VAR 0 8
36518: PUSH
36519: LD_VAR 0 2
36523: PPUSH
36524: CALL_OW 251
36528: ST_TO_ADDR
// if not x or not y then
36529: LD_VAR 0 7
36533: NOT
36534: IFTRUE 36543
36536: PUSH
36537: LD_VAR 0 8
36541: NOT
36542: OR
36543: IFFALSE 36547
// exit ;
36545: GO 36954
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36547: LD_ADDR_VAR 0 6
36551: PUSH
36552: LD_VAR 0 7
36556: PPUSH
36557: LD_INT 0
36559: PPUSH
36560: LD_INT 4
36562: PPUSH
36563: CALL_OW 272
36567: PUSH
36568: LD_VAR 0 8
36572: PPUSH
36573: LD_INT 0
36575: PPUSH
36576: LD_INT 4
36578: PPUSH
36579: CALL_OW 273
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_VAR 0 7
36592: PPUSH
36593: LD_INT 1
36595: PPUSH
36596: LD_INT 4
36598: PPUSH
36599: CALL_OW 272
36603: PUSH
36604: LD_VAR 0 8
36608: PPUSH
36609: LD_INT 1
36611: PPUSH
36612: LD_INT 4
36614: PPUSH
36615: CALL_OW 273
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_VAR 0 7
36628: PPUSH
36629: LD_INT 2
36631: PPUSH
36632: LD_INT 4
36634: PPUSH
36635: CALL_OW 272
36639: PUSH
36640: LD_VAR 0 8
36644: PPUSH
36645: LD_INT 2
36647: PPUSH
36648: LD_INT 4
36650: PPUSH
36651: CALL_OW 273
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_VAR 0 7
36664: PPUSH
36665: LD_INT 3
36667: PPUSH
36668: LD_INT 4
36670: PPUSH
36671: CALL_OW 272
36675: PUSH
36676: LD_VAR 0 8
36680: PPUSH
36681: LD_INT 3
36683: PPUSH
36684: LD_INT 4
36686: PPUSH
36687: CALL_OW 273
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_VAR 0 7
36700: PPUSH
36701: LD_INT 4
36703: PPUSH
36704: LD_INT 4
36706: PPUSH
36707: CALL_OW 272
36711: PUSH
36712: LD_VAR 0 8
36716: PPUSH
36717: LD_INT 4
36719: PPUSH
36720: LD_INT 4
36722: PPUSH
36723: CALL_OW 273
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_VAR 0 7
36736: PPUSH
36737: LD_INT 5
36739: PPUSH
36740: LD_INT 4
36742: PPUSH
36743: CALL_OW 272
36747: PUSH
36748: LD_VAR 0 8
36752: PPUSH
36753: LD_INT 5
36755: PPUSH
36756: LD_INT 4
36758: PPUSH
36759: CALL_OW 273
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: ST_TO_ADDR
// for i = tmp downto 1 do
36776: LD_ADDR_VAR 0 4
36780: PUSH
36781: DOUBLE
36782: LD_VAR 0 6
36786: INC
36787: ST_TO_ADDR
36788: LD_INT 1
36790: PUSH
36791: FOR_DOWNTO
36792: IFFALSE 36895
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36794: LD_VAR 0 6
36798: PUSH
36799: LD_VAR 0 4
36803: ARRAY
36804: PUSH
36805: LD_INT 1
36807: ARRAY
36808: PPUSH
36809: LD_VAR 0 6
36813: PUSH
36814: LD_VAR 0 4
36818: ARRAY
36819: PUSH
36820: LD_INT 2
36822: ARRAY
36823: PPUSH
36824: CALL_OW 488
36828: NOT
36829: IFTRUE 36871
36831: PUSH
36832: LD_VAR 0 6
36836: PUSH
36837: LD_VAR 0 4
36841: ARRAY
36842: PUSH
36843: LD_INT 1
36845: ARRAY
36846: PPUSH
36847: LD_VAR 0 6
36851: PUSH
36852: LD_VAR 0 4
36856: ARRAY
36857: PUSH
36858: LD_INT 2
36860: ARRAY
36861: PPUSH
36862: CALL_OW 428
36866: PUSH
36867: LD_INT 0
36869: NONEQUAL
36870: OR
36871: IFFALSE 36893
// tmp := Delete ( tmp , i ) ;
36873: LD_ADDR_VAR 0 6
36877: PUSH
36878: LD_VAR 0 6
36882: PPUSH
36883: LD_VAR 0 4
36887: PPUSH
36888: CALL_OW 3
36892: ST_TO_ADDR
36893: GO 36791
36895: POP
36896: POP
// j := GetClosestHex ( unit , tmp ) ;
36897: LD_ADDR_VAR 0 5
36901: PUSH
36902: LD_VAR 0 1
36906: PPUSH
36907: LD_VAR 0 6
36911: PPUSH
36912: CALL 36189 0 2
36916: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36917: LD_VAR 0 1
36921: PPUSH
36922: LD_VAR 0 5
36926: PUSH
36927: LD_INT 1
36929: ARRAY
36930: PPUSH
36931: LD_VAR 0 5
36935: PUSH
36936: LD_INT 2
36938: ARRAY
36939: PPUSH
36940: CALL_OW 111
// result := j ;
36944: LD_ADDR_VAR 0 3
36948: PUSH
36949: LD_VAR 0 5
36953: ST_TO_ADDR
// end ;
36954: LD_VAR 0 3
36958: RET
// export function PrepareApemanSoldier ( ) ; begin
36959: LD_INT 0
36961: PPUSH
// uc_nation := 0 ;
36962: LD_ADDR_OWVAR 21
36966: PUSH
36967: LD_INT 0
36969: ST_TO_ADDR
// hc_sex := sex_male ;
36970: LD_ADDR_OWVAR 27
36974: PUSH
36975: LD_INT 1
36977: ST_TO_ADDR
// hc_name :=  ;
36978: LD_ADDR_OWVAR 26
36982: PUSH
36983: LD_STRING 
36985: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36986: LD_ADDR_OWVAR 28
36990: PUSH
36991: LD_INT 15
36993: ST_TO_ADDR
// hc_gallery :=  ;
36994: LD_ADDR_OWVAR 33
36998: PUSH
36999: LD_STRING 
37001: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37002: LD_ADDR_OWVAR 31
37006: PUSH
37007: LD_INT 0
37009: PPUSH
37010: LD_INT 3
37012: PPUSH
37013: CALL_OW 12
37017: PUSH
37018: LD_INT 0
37020: PPUSH
37021: LD_INT 3
37023: PPUSH
37024: CALL_OW 12
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37041: LD_ADDR_OWVAR 29
37045: PUSH
37046: LD_INT 10
37048: PUSH
37049: LD_INT 12
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: ST_TO_ADDR
// end ;
37056: LD_VAR 0 1
37060: RET
// export function PrepareApemanEngineer ( ) ; begin
37061: LD_INT 0
37063: PPUSH
// uc_nation := 0 ;
37064: LD_ADDR_OWVAR 21
37068: PUSH
37069: LD_INT 0
37071: ST_TO_ADDR
// hc_sex := sex_male ;
37072: LD_ADDR_OWVAR 27
37076: PUSH
37077: LD_INT 1
37079: ST_TO_ADDR
// hc_name :=  ;
37080: LD_ADDR_OWVAR 26
37084: PUSH
37085: LD_STRING 
37087: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37088: LD_ADDR_OWVAR 28
37092: PUSH
37093: LD_INT 16
37095: ST_TO_ADDR
// hc_gallery :=  ;
37096: LD_ADDR_OWVAR 33
37100: PUSH
37101: LD_STRING 
37103: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37104: LD_ADDR_OWVAR 31
37108: PUSH
37109: LD_INT 0
37111: PPUSH
37112: LD_INT 3
37114: PPUSH
37115: CALL_OW 12
37119: PUSH
37120: LD_INT 0
37122: PPUSH
37123: LD_INT 3
37125: PPUSH
37126: CALL_OW 12
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: LD_INT 0
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37143: LD_ADDR_OWVAR 29
37147: PUSH
37148: LD_INT 10
37150: PUSH
37151: LD_INT 12
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: ST_TO_ADDR
// end ;
37158: LD_VAR 0 1
37162: RET
// export function PrepareApeman ( agressivity ) ; begin
37163: LD_INT 0
37165: PPUSH
// uc_side := 0 ;
37166: LD_ADDR_OWVAR 20
37170: PUSH
37171: LD_INT 0
37173: ST_TO_ADDR
// uc_nation := 0 ;
37174: LD_ADDR_OWVAR 21
37178: PUSH
37179: LD_INT 0
37181: ST_TO_ADDR
// hc_sex := sex_male ;
37182: LD_ADDR_OWVAR 27
37186: PUSH
37187: LD_INT 1
37189: ST_TO_ADDR
// hc_class := class_apeman ;
37190: LD_ADDR_OWVAR 28
37194: PUSH
37195: LD_INT 12
37197: ST_TO_ADDR
// hc_gallery :=  ;
37198: LD_ADDR_OWVAR 33
37202: PUSH
37203: LD_STRING 
37205: ST_TO_ADDR
// hc_name :=  ;
37206: LD_ADDR_OWVAR 26
37210: PUSH
37211: LD_STRING 
37213: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37214: LD_ADDR_OWVAR 29
37218: PUSH
37219: LD_INT 10
37221: PUSH
37222: LD_INT 12
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: ST_TO_ADDR
// if agressivity = 0 then
37229: LD_VAR 0 1
37233: PUSH
37234: LD_INT 0
37236: EQUAL
37237: IFFALSE 37249
// hc_agressivity := 0 else
37239: LD_ADDR_OWVAR 35
37243: PUSH
37244: LD_INT 0
37246: ST_TO_ADDR
37247: GO 37270
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37249: LD_ADDR_OWVAR 35
37253: PUSH
37254: LD_VAR 0 1
37258: NEG
37259: PPUSH
37260: LD_VAR 0 1
37264: PPUSH
37265: CALL_OW 12
37269: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37270: LD_ADDR_OWVAR 31
37274: PUSH
37275: LD_INT 0
37277: PPUSH
37278: LD_INT 3
37280: PPUSH
37281: CALL_OW 12
37285: PUSH
37286: LD_INT 0
37288: PPUSH
37289: LD_INT 3
37291: PPUSH
37292: CALL_OW 12
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: ST_TO_ADDR
// end ;
37309: LD_VAR 0 2
37313: RET
// export function PrepareTiger ( agressivity ) ; begin
37314: LD_INT 0
37316: PPUSH
// uc_side := 0 ;
37317: LD_ADDR_OWVAR 20
37321: PUSH
37322: LD_INT 0
37324: ST_TO_ADDR
// uc_nation := 0 ;
37325: LD_ADDR_OWVAR 21
37329: PUSH
37330: LD_INT 0
37332: ST_TO_ADDR
// InitHc ;
37333: CALL_OW 19
// hc_class := class_tiger ;
37337: LD_ADDR_OWVAR 28
37341: PUSH
37342: LD_INT 14
37344: ST_TO_ADDR
// hc_gallery :=  ;
37345: LD_ADDR_OWVAR 33
37349: PUSH
37350: LD_STRING 
37352: ST_TO_ADDR
// hc_name :=  ;
37353: LD_ADDR_OWVAR 26
37357: PUSH
37358: LD_STRING 
37360: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37361: LD_ADDR_OWVAR 35
37365: PUSH
37366: LD_VAR 0 1
37370: NEG
37371: PPUSH
37372: LD_VAR 0 1
37376: PPUSH
37377: CALL_OW 12
37381: ST_TO_ADDR
// end ;
37382: LD_VAR 0 2
37386: RET
// export function PrepareEnchidna ( ) ; begin
37387: LD_INT 0
37389: PPUSH
// uc_side := 0 ;
37390: LD_ADDR_OWVAR 20
37394: PUSH
37395: LD_INT 0
37397: ST_TO_ADDR
// uc_nation := 0 ;
37398: LD_ADDR_OWVAR 21
37402: PUSH
37403: LD_INT 0
37405: ST_TO_ADDR
// InitHc ;
37406: CALL_OW 19
// hc_class := class_baggie ;
37410: LD_ADDR_OWVAR 28
37414: PUSH
37415: LD_INT 13
37417: ST_TO_ADDR
// hc_gallery :=  ;
37418: LD_ADDR_OWVAR 33
37422: PUSH
37423: LD_STRING 
37425: ST_TO_ADDR
// hc_name :=  ;
37426: LD_ADDR_OWVAR 26
37430: PUSH
37431: LD_STRING 
37433: ST_TO_ADDR
// end ;
37434: LD_VAR 0 1
37438: RET
// export function PrepareFrog ( ) ; begin
37439: LD_INT 0
37441: PPUSH
// uc_side := 0 ;
37442: LD_ADDR_OWVAR 20
37446: PUSH
37447: LD_INT 0
37449: ST_TO_ADDR
// uc_nation := 0 ;
37450: LD_ADDR_OWVAR 21
37454: PUSH
37455: LD_INT 0
37457: ST_TO_ADDR
// InitHc ;
37458: CALL_OW 19
// hc_class := class_frog ;
37462: LD_ADDR_OWVAR 28
37466: PUSH
37467: LD_INT 19
37469: ST_TO_ADDR
// hc_gallery :=  ;
37470: LD_ADDR_OWVAR 33
37474: PUSH
37475: LD_STRING 
37477: ST_TO_ADDR
// hc_name :=  ;
37478: LD_ADDR_OWVAR 26
37482: PUSH
37483: LD_STRING 
37485: ST_TO_ADDR
// end ;
37486: LD_VAR 0 1
37490: RET
// export function PrepareFish ( ) ; begin
37491: LD_INT 0
37493: PPUSH
// uc_side := 0 ;
37494: LD_ADDR_OWVAR 20
37498: PUSH
37499: LD_INT 0
37501: ST_TO_ADDR
// uc_nation := 0 ;
37502: LD_ADDR_OWVAR 21
37506: PUSH
37507: LD_INT 0
37509: ST_TO_ADDR
// InitHc ;
37510: CALL_OW 19
// hc_class := class_fish ;
37514: LD_ADDR_OWVAR 28
37518: PUSH
37519: LD_INT 20
37521: ST_TO_ADDR
// hc_gallery :=  ;
37522: LD_ADDR_OWVAR 33
37526: PUSH
37527: LD_STRING 
37529: ST_TO_ADDR
// hc_name :=  ;
37530: LD_ADDR_OWVAR 26
37534: PUSH
37535: LD_STRING 
37537: ST_TO_ADDR
// end ;
37538: LD_VAR 0 1
37542: RET
// export function PrepareBird ( ) ; begin
37543: LD_INT 0
37545: PPUSH
// uc_side := 0 ;
37546: LD_ADDR_OWVAR 20
37550: PUSH
37551: LD_INT 0
37553: ST_TO_ADDR
// uc_nation := 0 ;
37554: LD_ADDR_OWVAR 21
37558: PUSH
37559: LD_INT 0
37561: ST_TO_ADDR
// InitHc ;
37562: CALL_OW 19
// hc_class := class_phororhacos ;
37566: LD_ADDR_OWVAR 28
37570: PUSH
37571: LD_INT 18
37573: ST_TO_ADDR
// hc_gallery :=  ;
37574: LD_ADDR_OWVAR 33
37578: PUSH
37579: LD_STRING 
37581: ST_TO_ADDR
// hc_name :=  ;
37582: LD_ADDR_OWVAR 26
37586: PUSH
37587: LD_STRING 
37589: ST_TO_ADDR
// end ;
37590: LD_VAR 0 1
37594: RET
// export function PrepareHorse ( ) ; begin
37595: LD_INT 0
37597: PPUSH
// uc_side := 0 ;
37598: LD_ADDR_OWVAR 20
37602: PUSH
37603: LD_INT 0
37605: ST_TO_ADDR
// uc_nation := 0 ;
37606: LD_ADDR_OWVAR 21
37610: PUSH
37611: LD_INT 0
37613: ST_TO_ADDR
// InitHc ;
37614: CALL_OW 19
// hc_class := class_horse ;
37618: LD_ADDR_OWVAR 28
37622: PUSH
37623: LD_INT 21
37625: ST_TO_ADDR
// hc_gallery :=  ;
37626: LD_ADDR_OWVAR 33
37630: PUSH
37631: LD_STRING 
37633: ST_TO_ADDR
// hc_name :=  ;
37634: LD_ADDR_OWVAR 26
37638: PUSH
37639: LD_STRING 
37641: ST_TO_ADDR
// end ;
37642: LD_VAR 0 1
37646: RET
// export function PrepareMastodont ( ) ; begin
37647: LD_INT 0
37649: PPUSH
// uc_side := 0 ;
37650: LD_ADDR_OWVAR 20
37654: PUSH
37655: LD_INT 0
37657: ST_TO_ADDR
// uc_nation := 0 ;
37658: LD_ADDR_OWVAR 21
37662: PUSH
37663: LD_INT 0
37665: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37666: LD_ADDR_OWVAR 37
37670: PUSH
37671: LD_INT 31
37673: ST_TO_ADDR
// vc_control := control_rider ;
37674: LD_ADDR_OWVAR 38
37678: PUSH
37679: LD_INT 4
37681: ST_TO_ADDR
// end ;
37682: LD_VAR 0 1
37686: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37687: LD_INT 0
37689: PPUSH
37690: PPUSH
37691: PPUSH
// uc_side = 0 ;
37692: LD_ADDR_OWVAR 20
37696: PUSH
37697: LD_INT 0
37699: ST_TO_ADDR
// uc_nation = 0 ;
37700: LD_ADDR_OWVAR 21
37704: PUSH
37705: LD_INT 0
37707: ST_TO_ADDR
// InitHc_All ( ) ;
37708: CALL_OW 584
// InitVc ;
37712: CALL_OW 20
// if mastodonts then
37716: LD_VAR 0 6
37720: IFFALSE 37787
// for i = 1 to mastodonts do
37722: LD_ADDR_VAR 0 11
37726: PUSH
37727: DOUBLE
37728: LD_INT 1
37730: DEC
37731: ST_TO_ADDR
37732: LD_VAR 0 6
37736: PUSH
37737: FOR_TO
37738: IFFALSE 37785
// begin vc_chassis := 31 ;
37740: LD_ADDR_OWVAR 37
37744: PUSH
37745: LD_INT 31
37747: ST_TO_ADDR
// vc_control := control_rider ;
37748: LD_ADDR_OWVAR 38
37752: PUSH
37753: LD_INT 4
37755: ST_TO_ADDR
// animal := CreateVehicle ;
37756: LD_ADDR_VAR 0 12
37760: PUSH
37761: CALL_OW 45
37765: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37766: LD_VAR 0 12
37770: PPUSH
37771: LD_VAR 0 8
37775: PPUSH
37776: LD_INT 0
37778: PPUSH
37779: CALL 39929 0 3
// end ;
37783: GO 37737
37785: POP
37786: POP
// if horses then
37787: LD_VAR 0 5
37791: IFFALSE 37858
// for i = 1 to horses do
37793: LD_ADDR_VAR 0 11
37797: PUSH
37798: DOUBLE
37799: LD_INT 1
37801: DEC
37802: ST_TO_ADDR
37803: LD_VAR 0 5
37807: PUSH
37808: FOR_TO
37809: IFFALSE 37856
// begin hc_class := 21 ;
37811: LD_ADDR_OWVAR 28
37815: PUSH
37816: LD_INT 21
37818: ST_TO_ADDR
// hc_gallery :=  ;
37819: LD_ADDR_OWVAR 33
37823: PUSH
37824: LD_STRING 
37826: ST_TO_ADDR
// animal := CreateHuman ;
37827: LD_ADDR_VAR 0 12
37831: PUSH
37832: CALL_OW 44
37836: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37837: LD_VAR 0 12
37841: PPUSH
37842: LD_VAR 0 8
37846: PPUSH
37847: LD_INT 0
37849: PPUSH
37850: CALL 39929 0 3
// end ;
37854: GO 37808
37856: POP
37857: POP
// if birds then
37858: LD_VAR 0 1
37862: IFFALSE 37929
// for i = 1 to birds do
37864: LD_ADDR_VAR 0 11
37868: PUSH
37869: DOUBLE
37870: LD_INT 1
37872: DEC
37873: ST_TO_ADDR
37874: LD_VAR 0 1
37878: PUSH
37879: FOR_TO
37880: IFFALSE 37927
// begin hc_class := 18 ;
37882: LD_ADDR_OWVAR 28
37886: PUSH
37887: LD_INT 18
37889: ST_TO_ADDR
// hc_gallery =  ;
37890: LD_ADDR_OWVAR 33
37894: PUSH
37895: LD_STRING 
37897: ST_TO_ADDR
// animal := CreateHuman ;
37898: LD_ADDR_VAR 0 12
37902: PUSH
37903: CALL_OW 44
37907: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37908: LD_VAR 0 12
37912: PPUSH
37913: LD_VAR 0 8
37917: PPUSH
37918: LD_INT 0
37920: PPUSH
37921: CALL 39929 0 3
// end ;
37925: GO 37879
37927: POP
37928: POP
// if tigers then
37929: LD_VAR 0 2
37933: IFFALSE 38017
// for i = 1 to tigers do
37935: LD_ADDR_VAR 0 11
37939: PUSH
37940: DOUBLE
37941: LD_INT 1
37943: DEC
37944: ST_TO_ADDR
37945: LD_VAR 0 2
37949: PUSH
37950: FOR_TO
37951: IFFALSE 38015
// begin hc_class = class_tiger ;
37953: LD_ADDR_OWVAR 28
37957: PUSH
37958: LD_INT 14
37960: ST_TO_ADDR
// hc_gallery =  ;
37961: LD_ADDR_OWVAR 33
37965: PUSH
37966: LD_STRING 
37968: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37969: LD_ADDR_OWVAR 35
37973: PUSH
37974: LD_INT 7
37976: NEG
37977: PPUSH
37978: LD_INT 7
37980: PPUSH
37981: CALL_OW 12
37985: ST_TO_ADDR
// animal := CreateHuman ;
37986: LD_ADDR_VAR 0 12
37990: PUSH
37991: CALL_OW 44
37995: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37996: LD_VAR 0 12
38000: PPUSH
38001: LD_VAR 0 8
38005: PPUSH
38006: LD_INT 0
38008: PPUSH
38009: CALL 39929 0 3
// end ;
38013: GO 37950
38015: POP
38016: POP
// if apemans then
38017: LD_VAR 0 3
38021: IFFALSE 38144
// for i = 1 to apemans do
38023: LD_ADDR_VAR 0 11
38027: PUSH
38028: DOUBLE
38029: LD_INT 1
38031: DEC
38032: ST_TO_ADDR
38033: LD_VAR 0 3
38037: PUSH
38038: FOR_TO
38039: IFFALSE 38142
// begin hc_class = class_apeman ;
38041: LD_ADDR_OWVAR 28
38045: PUSH
38046: LD_INT 12
38048: ST_TO_ADDR
// hc_gallery =  ;
38049: LD_ADDR_OWVAR 33
38053: PUSH
38054: LD_STRING 
38056: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38057: LD_ADDR_OWVAR 35
38061: PUSH
38062: LD_INT 2
38064: NEG
38065: PPUSH
38066: LD_INT 2
38068: PPUSH
38069: CALL_OW 12
38073: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38074: LD_ADDR_OWVAR 31
38078: PUSH
38079: LD_INT 1
38081: PPUSH
38082: LD_INT 3
38084: PPUSH
38085: CALL_OW 12
38089: PUSH
38090: LD_INT 1
38092: PPUSH
38093: LD_INT 3
38095: PPUSH
38096: CALL_OW 12
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: ST_TO_ADDR
// animal := CreateHuman ;
38113: LD_ADDR_VAR 0 12
38117: PUSH
38118: CALL_OW 44
38122: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38123: LD_VAR 0 12
38127: PPUSH
38128: LD_VAR 0 8
38132: PPUSH
38133: LD_INT 0
38135: PPUSH
38136: CALL 39929 0 3
// end ;
38140: GO 38038
38142: POP
38143: POP
// if enchidnas then
38144: LD_VAR 0 4
38148: IFFALSE 38215
// for i = 1 to enchidnas do
38150: LD_ADDR_VAR 0 11
38154: PUSH
38155: DOUBLE
38156: LD_INT 1
38158: DEC
38159: ST_TO_ADDR
38160: LD_VAR 0 4
38164: PUSH
38165: FOR_TO
38166: IFFALSE 38213
// begin hc_class = 13 ;
38168: LD_ADDR_OWVAR 28
38172: PUSH
38173: LD_INT 13
38175: ST_TO_ADDR
// hc_gallery =  ;
38176: LD_ADDR_OWVAR 33
38180: PUSH
38181: LD_STRING 
38183: ST_TO_ADDR
// animal := CreateHuman ;
38184: LD_ADDR_VAR 0 12
38188: PUSH
38189: CALL_OW 44
38193: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38194: LD_VAR 0 12
38198: PPUSH
38199: LD_VAR 0 8
38203: PPUSH
38204: LD_INT 0
38206: PPUSH
38207: CALL 39929 0 3
// end ;
38211: GO 38165
38213: POP
38214: POP
// if fishes then
38215: LD_VAR 0 7
38219: IFFALSE 38286
// for i = 1 to fishes do
38221: LD_ADDR_VAR 0 11
38225: PUSH
38226: DOUBLE
38227: LD_INT 1
38229: DEC
38230: ST_TO_ADDR
38231: LD_VAR 0 7
38235: PUSH
38236: FOR_TO
38237: IFFALSE 38284
// begin hc_class = 20 ;
38239: LD_ADDR_OWVAR 28
38243: PUSH
38244: LD_INT 20
38246: ST_TO_ADDR
// hc_gallery =  ;
38247: LD_ADDR_OWVAR 33
38251: PUSH
38252: LD_STRING 
38254: ST_TO_ADDR
// animal := CreateHuman ;
38255: LD_ADDR_VAR 0 12
38259: PUSH
38260: CALL_OW 44
38264: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38265: LD_VAR 0 12
38269: PPUSH
38270: LD_VAR 0 9
38274: PPUSH
38275: LD_INT 0
38277: PPUSH
38278: CALL 39929 0 3
// end ;
38282: GO 38236
38284: POP
38285: POP
// end ;
38286: LD_VAR 0 10
38290: RET
// export function WantHeal ( sci , unit ) ; begin
38291: LD_INT 0
38293: PPUSH
// if GetTaskList ( sci ) > 0 then
38294: LD_VAR 0 1
38298: PPUSH
38299: CALL_OW 437
38303: PUSH
38304: LD_INT 0
38306: GREATER
38307: IFFALSE 38379
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38309: LD_VAR 0 1
38313: PPUSH
38314: CALL_OW 437
38318: PUSH
38319: LD_INT 1
38321: ARRAY
38322: PUSH
38323: LD_INT 1
38325: ARRAY
38326: PUSH
38327: LD_STRING l
38329: EQUAL
38330: IFFALSE 38357
38332: PUSH
38333: LD_VAR 0 1
38337: PPUSH
38338: CALL_OW 437
38342: PUSH
38343: LD_INT 1
38345: ARRAY
38346: PUSH
38347: LD_INT 4
38349: ARRAY
38350: PUSH
38351: LD_VAR 0 2
38355: EQUAL
38356: AND
38357: IFFALSE 38369
// result := true else
38359: LD_ADDR_VAR 0 3
38363: PUSH
38364: LD_INT 1
38366: ST_TO_ADDR
38367: GO 38377
// result := false ;
38369: LD_ADDR_VAR 0 3
38373: PUSH
38374: LD_INT 0
38376: ST_TO_ADDR
// end else
38377: GO 38387
// result := false ;
38379: LD_ADDR_VAR 0 3
38383: PUSH
38384: LD_INT 0
38386: ST_TO_ADDR
// end ;
38387: LD_VAR 0 3
38391: RET
// export function HealTarget ( sci ) ; begin
38392: LD_INT 0
38394: PPUSH
// if not sci then
38395: LD_VAR 0 1
38399: NOT
38400: IFFALSE 38404
// exit ;
38402: GO 38469
// result := 0 ;
38404: LD_ADDR_VAR 0 2
38408: PUSH
38409: LD_INT 0
38411: ST_TO_ADDR
// if GetTaskList ( sci ) then
38412: LD_VAR 0 1
38416: PPUSH
38417: CALL_OW 437
38421: IFFALSE 38469
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38423: LD_VAR 0 1
38427: PPUSH
38428: CALL_OW 437
38432: PUSH
38433: LD_INT 1
38435: ARRAY
38436: PUSH
38437: LD_INT 1
38439: ARRAY
38440: PUSH
38441: LD_STRING l
38443: EQUAL
38444: IFFALSE 38469
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38446: LD_ADDR_VAR 0 2
38450: PUSH
38451: LD_VAR 0 1
38455: PPUSH
38456: CALL_OW 437
38460: PUSH
38461: LD_INT 1
38463: ARRAY
38464: PUSH
38465: LD_INT 4
38467: ARRAY
38468: ST_TO_ADDR
// end ;
38469: LD_VAR 0 2
38473: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38474: LD_INT 0
38476: PPUSH
38477: PPUSH
38478: PPUSH
38479: PPUSH
// if not base_units then
38480: LD_VAR 0 1
38484: NOT
38485: IFFALSE 38489
// exit ;
38487: GO 38576
// result := false ;
38489: LD_ADDR_VAR 0 2
38493: PUSH
38494: LD_INT 0
38496: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38497: LD_ADDR_VAR 0 5
38501: PUSH
38502: LD_VAR 0 1
38506: PPUSH
38507: LD_INT 21
38509: PUSH
38510: LD_INT 3
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PPUSH
38517: CALL_OW 72
38521: ST_TO_ADDR
// if not tmp then
38522: LD_VAR 0 5
38526: NOT
38527: IFFALSE 38531
// exit ;
38529: GO 38576
// for i in tmp do
38531: LD_ADDR_VAR 0 3
38535: PUSH
38536: LD_VAR 0 5
38540: PUSH
38541: FOR_IN
38542: IFFALSE 38574
// begin result := EnemyInRange ( i , 22 ) ;
38544: LD_ADDR_VAR 0 2
38548: PUSH
38549: LD_VAR 0 3
38553: PPUSH
38554: LD_INT 22
38556: PPUSH
38557: CALL 35991 0 2
38561: ST_TO_ADDR
// if result then
38562: LD_VAR 0 2
38566: IFFALSE 38572
// exit ;
38568: POP
38569: POP
38570: GO 38576
// end ;
38572: GO 38541
38574: POP
38575: POP
// end ;
38576: LD_VAR 0 2
38580: RET
// export function FilterByTag ( units , tag ) ; begin
38581: LD_INT 0
38583: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38584: LD_ADDR_VAR 0 3
38588: PUSH
38589: LD_VAR 0 1
38593: PPUSH
38594: LD_INT 120
38596: PUSH
38597: LD_VAR 0 2
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PPUSH
38606: CALL_OW 72
38610: ST_TO_ADDR
// end ;
38611: LD_VAR 0 3
38615: RET
// export function IsDriver ( un ) ; begin
38616: LD_INT 0
38618: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38619: LD_ADDR_VAR 0 2
38623: PUSH
38624: LD_VAR 0 1
38628: PUSH
38629: LD_INT 55
38631: PUSH
38632: EMPTY
38633: LIST
38634: PPUSH
38635: CALL_OW 69
38639: IN
38640: ST_TO_ADDR
// end ;
38641: LD_VAR 0 2
38645: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38646: LD_INT 0
38648: PPUSH
38649: PPUSH
// list := [ ] ;
38650: LD_ADDR_VAR 0 5
38654: PUSH
38655: EMPTY
38656: ST_TO_ADDR
// case d of 0 :
38657: LD_VAR 0 3
38661: PUSH
38662: LD_INT 0
38664: DOUBLE
38665: EQUAL
38666: IFTRUE 38670
38668: GO 38803
38670: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38671: LD_ADDR_VAR 0 5
38675: PUSH
38676: LD_VAR 0 1
38680: PUSH
38681: LD_INT 4
38683: MINUS
38684: PUSH
38685: LD_VAR 0 2
38689: PUSH
38690: LD_INT 4
38692: MINUS
38693: PUSH
38694: LD_INT 2
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: PUSH
38702: LD_VAR 0 1
38706: PUSH
38707: LD_INT 3
38709: MINUS
38710: PUSH
38711: LD_VAR 0 2
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: LIST
38723: PUSH
38724: LD_VAR 0 1
38728: PUSH
38729: LD_INT 4
38731: PLUS
38732: PUSH
38733: LD_VAR 0 2
38737: PUSH
38738: LD_INT 4
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: PUSH
38746: LD_VAR 0 1
38750: PUSH
38751: LD_INT 3
38753: PLUS
38754: PUSH
38755: LD_VAR 0 2
38759: PUSH
38760: LD_INT 3
38762: PLUS
38763: PUSH
38764: LD_INT 5
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: LIST
38771: PUSH
38772: LD_VAR 0 1
38776: PUSH
38777: LD_VAR 0 2
38781: PUSH
38782: LD_INT 4
38784: PLUS
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: ST_TO_ADDR
// end ; 1 :
38801: GO 39501
38803: LD_INT 1
38805: DOUBLE
38806: EQUAL
38807: IFTRUE 38811
38809: GO 38944
38811: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38812: LD_ADDR_VAR 0 5
38816: PUSH
38817: LD_VAR 0 1
38821: PUSH
38822: LD_VAR 0 2
38826: PUSH
38827: LD_INT 4
38829: MINUS
38830: PUSH
38831: LD_INT 3
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: PUSH
38839: LD_VAR 0 1
38843: PUSH
38844: LD_INT 3
38846: MINUS
38847: PUSH
38848: LD_VAR 0 2
38852: PUSH
38853: LD_INT 3
38855: MINUS
38856: PUSH
38857: LD_INT 2
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: LIST
38864: PUSH
38865: LD_VAR 0 1
38869: PUSH
38870: LD_INT 4
38872: MINUS
38873: PUSH
38874: LD_VAR 0 2
38878: PUSH
38879: LD_INT 1
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: PUSH
38887: LD_VAR 0 1
38891: PUSH
38892: LD_VAR 0 2
38896: PUSH
38897: LD_INT 3
38899: PLUS
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: PUSH
38909: LD_VAR 0 1
38913: PUSH
38914: LD_INT 4
38916: PLUS
38917: PUSH
38918: LD_VAR 0 2
38922: PUSH
38923: LD_INT 4
38925: PLUS
38926: PUSH
38927: LD_INT 5
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: LIST
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: ST_TO_ADDR
// end ; 2 :
38942: GO 39501
38944: LD_INT 2
38946: DOUBLE
38947: EQUAL
38948: IFTRUE 38952
38950: GO 39081
38952: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38953: LD_ADDR_VAR 0 5
38957: PUSH
38958: LD_VAR 0 1
38962: PUSH
38963: LD_VAR 0 2
38967: PUSH
38968: LD_INT 3
38970: MINUS
38971: PUSH
38972: LD_INT 3
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: LIST
38979: PUSH
38980: LD_VAR 0 1
38984: PUSH
38985: LD_INT 4
38987: PLUS
38988: PUSH
38989: LD_VAR 0 2
38993: PUSH
38994: LD_INT 4
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: PUSH
39002: LD_VAR 0 1
39006: PUSH
39007: LD_VAR 0 2
39011: PUSH
39012: LD_INT 4
39014: PLUS
39015: PUSH
39016: LD_INT 0
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: LIST
39023: PUSH
39024: LD_VAR 0 1
39028: PUSH
39029: LD_INT 3
39031: MINUS
39032: PUSH
39033: LD_VAR 0 2
39037: PUSH
39038: LD_INT 1
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: LIST
39045: PUSH
39046: LD_VAR 0 1
39050: PUSH
39051: LD_INT 4
39053: MINUS
39054: PUSH
39055: LD_VAR 0 2
39059: PUSH
39060: LD_INT 4
39062: MINUS
39063: PUSH
39064: LD_INT 2
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: LIST
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: ST_TO_ADDR
// end ; 3 :
39079: GO 39501
39081: LD_INT 3
39083: DOUBLE
39084: EQUAL
39085: IFTRUE 39089
39087: GO 39222
39089: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39090: LD_ADDR_VAR 0 5
39094: PUSH
39095: LD_VAR 0 1
39099: PUSH
39100: LD_INT 3
39102: PLUS
39103: PUSH
39104: LD_VAR 0 2
39108: PUSH
39109: LD_INT 4
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: PUSH
39117: LD_VAR 0 1
39121: PUSH
39122: LD_INT 4
39124: PLUS
39125: PUSH
39126: LD_VAR 0 2
39130: PUSH
39131: LD_INT 4
39133: PLUS
39134: PUSH
39135: LD_INT 5
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: PUSH
39143: LD_VAR 0 1
39147: PUSH
39148: LD_INT 4
39150: MINUS
39151: PUSH
39152: LD_VAR 0 2
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: PUSH
39165: LD_VAR 0 1
39169: PUSH
39170: LD_VAR 0 2
39174: PUSH
39175: LD_INT 4
39177: MINUS
39178: PUSH
39179: LD_INT 3
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: PUSH
39187: LD_VAR 0 1
39191: PUSH
39192: LD_INT 3
39194: MINUS
39195: PUSH
39196: LD_VAR 0 2
39200: PUSH
39201: LD_INT 3
39203: MINUS
39204: PUSH
39205: LD_INT 2
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: LIST
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: ST_TO_ADDR
// end ; 4 :
39220: GO 39501
39222: LD_INT 4
39224: DOUBLE
39225: EQUAL
39226: IFTRUE 39230
39228: GO 39363
39230: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39231: LD_ADDR_VAR 0 5
39235: PUSH
39236: LD_VAR 0 1
39240: PUSH
39241: LD_VAR 0 2
39245: PUSH
39246: LD_INT 4
39248: PLUS
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: LIST
39257: PUSH
39258: LD_VAR 0 1
39262: PUSH
39263: LD_INT 3
39265: PLUS
39266: PUSH
39267: LD_VAR 0 2
39271: PUSH
39272: LD_INT 3
39274: PLUS
39275: PUSH
39276: LD_INT 5
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: LIST
39283: PUSH
39284: LD_VAR 0 1
39288: PUSH
39289: LD_INT 4
39291: PLUS
39292: PUSH
39293: LD_VAR 0 2
39297: PUSH
39298: LD_INT 4
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: PUSH
39306: LD_VAR 0 1
39310: PUSH
39311: LD_VAR 0 2
39315: PUSH
39316: LD_INT 3
39318: MINUS
39319: PUSH
39320: LD_INT 3
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: PUSH
39328: LD_VAR 0 1
39332: PUSH
39333: LD_INT 4
39335: MINUS
39336: PUSH
39337: LD_VAR 0 2
39341: PUSH
39342: LD_INT 4
39344: MINUS
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: LIST
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: ST_TO_ADDR
// end ; 5 :
39361: GO 39501
39363: LD_INT 5
39365: DOUBLE
39366: EQUAL
39367: IFTRUE 39371
39369: GO 39500
39371: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39372: LD_ADDR_VAR 0 5
39376: PUSH
39377: LD_VAR 0 1
39381: PUSH
39382: LD_INT 4
39384: MINUS
39385: PUSH
39386: LD_VAR 0 2
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: LIST
39398: PUSH
39399: LD_VAR 0 1
39403: PUSH
39404: LD_VAR 0 2
39408: PUSH
39409: LD_INT 4
39411: MINUS
39412: PUSH
39413: LD_INT 3
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: PUSH
39421: LD_VAR 0 1
39425: PUSH
39426: LD_INT 4
39428: PLUS
39429: PUSH
39430: LD_VAR 0 2
39434: PUSH
39435: LD_INT 4
39437: PLUS
39438: PUSH
39439: LD_INT 5
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: LIST
39446: PUSH
39447: LD_VAR 0 1
39451: PUSH
39452: LD_INT 3
39454: PLUS
39455: PUSH
39456: LD_VAR 0 2
39460: PUSH
39461: LD_INT 4
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: LIST
39468: PUSH
39469: LD_VAR 0 1
39473: PUSH
39474: LD_VAR 0 2
39478: PUSH
39479: LD_INT 3
39481: PLUS
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: LIST
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: ST_TO_ADDR
// end ; end ;
39498: GO 39501
39500: POP
// result := list ;
39501: LD_ADDR_VAR 0 4
39505: PUSH
39506: LD_VAR 0 5
39510: ST_TO_ADDR
// end ;
39511: LD_VAR 0 4
39515: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39516: LD_INT 0
39518: PPUSH
39519: PPUSH
39520: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39521: LD_VAR 0 1
39525: NOT
39526: IFTRUE 39554
39528: PUSH
39529: LD_VAR 0 2
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: LD_INT 2
39539: PUSH
39540: LD_INT 3
39542: PUSH
39543: LD_INT 4
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: IN
39552: NOT
39553: OR
39554: IFFALSE 39558
// exit ;
39556: GO 39641
// tmp := [ ] ;
39558: LD_ADDR_VAR 0 5
39562: PUSH
39563: EMPTY
39564: ST_TO_ADDR
// for i in units do
39565: LD_ADDR_VAR 0 4
39569: PUSH
39570: LD_VAR 0 1
39574: PUSH
39575: FOR_IN
39576: IFFALSE 39610
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39578: LD_ADDR_VAR 0 5
39582: PUSH
39583: LD_VAR 0 5
39587: PPUSH
39588: LD_VAR 0 4
39592: PPUSH
39593: LD_VAR 0 2
39597: PPUSH
39598: CALL_OW 259
39602: PPUSH
39603: CALL 41036 0 2
39607: ST_TO_ADDR
39608: GO 39575
39610: POP
39611: POP
// if not tmp then
39612: LD_VAR 0 5
39616: NOT
39617: IFFALSE 39621
// exit ;
39619: GO 39641
// result := SortListByListDesc ( units , tmp ) ;
39621: LD_ADDR_VAR 0 3
39625: PUSH
39626: LD_VAR 0 1
39630: PPUSH
39631: LD_VAR 0 5
39635: PPUSH
39636: CALL_OW 77
39640: ST_TO_ADDR
// end ;
39641: LD_VAR 0 3
39645: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39646: LD_INT 0
39648: PPUSH
39649: PPUSH
39650: PPUSH
// result := false ;
39651: LD_ADDR_VAR 0 3
39655: PUSH
39656: LD_INT 0
39658: ST_TO_ADDR
// if not building then
39659: LD_VAR 0 2
39663: NOT
39664: IFFALSE 39668
// exit ;
39666: GO 39812
// x := GetX ( building ) ;
39668: LD_ADDR_VAR 0 4
39672: PUSH
39673: LD_VAR 0 2
39677: PPUSH
39678: CALL_OW 250
39682: ST_TO_ADDR
// y := GetY ( building ) ;
39683: LD_ADDR_VAR 0 5
39687: PUSH
39688: LD_VAR 0 2
39692: PPUSH
39693: CALL_OW 251
39697: ST_TO_ADDR
// if not x or not y then
39698: LD_VAR 0 4
39702: NOT
39703: IFTRUE 39712
39705: PUSH
39706: LD_VAR 0 5
39710: NOT
39711: OR
39712: IFFALSE 39716
// exit ;
39714: GO 39812
// if GetTaskList ( unit ) then
39716: LD_VAR 0 1
39720: PPUSH
39721: CALL_OW 437
39725: IFFALSE 39812
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39727: LD_STRING e
39729: PUSH
39730: LD_VAR 0 1
39734: PPUSH
39735: CALL_OW 437
39739: PUSH
39740: LD_INT 1
39742: ARRAY
39743: PUSH
39744: LD_INT 1
39746: ARRAY
39747: EQUAL
39748: IFFALSE 39775
39750: PUSH
39751: LD_VAR 0 4
39755: PUSH
39756: LD_VAR 0 1
39760: PPUSH
39761: CALL_OW 437
39765: PUSH
39766: LD_INT 1
39768: ARRAY
39769: PUSH
39770: LD_INT 2
39772: ARRAY
39773: EQUAL
39774: AND
39775: IFFALSE 39802
39777: PUSH
39778: LD_VAR 0 5
39782: PUSH
39783: LD_VAR 0 1
39787: PPUSH
39788: CALL_OW 437
39792: PUSH
39793: LD_INT 1
39795: ARRAY
39796: PUSH
39797: LD_INT 3
39799: ARRAY
39800: EQUAL
39801: AND
39802: IFFALSE 39812
// result := true end ;
39804: LD_ADDR_VAR 0 3
39808: PUSH
39809: LD_INT 1
39811: ST_TO_ADDR
// end ;
39812: LD_VAR 0 3
39816: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39817: LD_INT 0
39819: PPUSH
// result := false ;
39820: LD_ADDR_VAR 0 4
39824: PUSH
39825: LD_INT 0
39827: ST_TO_ADDR
// if GetTaskList ( unit ) then
39828: LD_VAR 0 1
39832: PPUSH
39833: CALL_OW 437
39837: IFFALSE 39924
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39839: LD_STRING M
39841: PUSH
39842: LD_VAR 0 1
39846: PPUSH
39847: CALL_OW 437
39851: PUSH
39852: LD_INT 1
39854: ARRAY
39855: PUSH
39856: LD_INT 1
39858: ARRAY
39859: EQUAL
39860: IFFALSE 39887
39862: PUSH
39863: LD_VAR 0 2
39867: PUSH
39868: LD_VAR 0 1
39872: PPUSH
39873: CALL_OW 437
39877: PUSH
39878: LD_INT 1
39880: ARRAY
39881: PUSH
39882: LD_INT 2
39884: ARRAY
39885: EQUAL
39886: AND
39887: IFFALSE 39914
39889: PUSH
39890: LD_VAR 0 3
39894: PUSH
39895: LD_VAR 0 1
39899: PPUSH
39900: CALL_OW 437
39904: PUSH
39905: LD_INT 1
39907: ARRAY
39908: PUSH
39909: LD_INT 3
39911: ARRAY
39912: EQUAL
39913: AND
39914: IFFALSE 39924
// result := true ;
39916: LD_ADDR_VAR 0 4
39920: PUSH
39921: LD_INT 1
39923: ST_TO_ADDR
// end ; end ;
39924: LD_VAR 0 4
39928: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39929: LD_INT 0
39931: PPUSH
39932: PPUSH
39933: PPUSH
39934: PPUSH
// if not unit or not area then
39935: LD_VAR 0 1
39939: NOT
39940: IFTRUE 39949
39942: PUSH
39943: LD_VAR 0 2
39947: NOT
39948: OR
39949: IFFALSE 39953
// exit ;
39951: GO 40129
// tmp := AreaToList ( area , i ) ;
39953: LD_ADDR_VAR 0 6
39957: PUSH
39958: LD_VAR 0 2
39962: PPUSH
39963: LD_VAR 0 5
39967: PPUSH
39968: CALL_OW 517
39972: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39973: LD_ADDR_VAR 0 5
39977: PUSH
39978: DOUBLE
39979: LD_INT 1
39981: DEC
39982: ST_TO_ADDR
39983: LD_VAR 0 6
39987: PUSH
39988: LD_INT 1
39990: ARRAY
39991: PUSH
39992: FOR_TO
39993: IFFALSE 40127
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39995: LD_ADDR_VAR 0 7
39999: PUSH
40000: LD_VAR 0 6
40004: PUSH
40005: LD_INT 1
40007: ARRAY
40008: PUSH
40009: LD_VAR 0 5
40013: ARRAY
40014: PUSH
40015: LD_VAR 0 6
40019: PUSH
40020: LD_INT 2
40022: ARRAY
40023: PUSH
40024: LD_VAR 0 5
40028: ARRAY
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40034: LD_INT 92
40036: PUSH
40037: LD_VAR 0 7
40041: PUSH
40042: LD_INT 1
40044: ARRAY
40045: PUSH
40046: LD_VAR 0 7
40050: PUSH
40051: LD_INT 2
40053: ARRAY
40054: PUSH
40055: LD_INT 2
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: PPUSH
40064: CALL_OW 69
40068: PUSH
40069: LD_INT 0
40071: EQUAL
40072: IFFALSE 40125
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40074: LD_VAR 0 1
40078: PPUSH
40079: LD_VAR 0 7
40083: PUSH
40084: LD_INT 1
40086: ARRAY
40087: PPUSH
40088: LD_VAR 0 7
40092: PUSH
40093: LD_INT 2
40095: ARRAY
40096: PPUSH
40097: LD_VAR 0 3
40101: PPUSH
40102: CALL_OW 48
// result := IsPlaced ( unit ) ;
40106: LD_ADDR_VAR 0 4
40110: PUSH
40111: LD_VAR 0 1
40115: PPUSH
40116: CALL_OW 305
40120: ST_TO_ADDR
// exit ;
40121: POP
40122: POP
40123: GO 40129
// end ; end ;
40125: GO 39992
40127: POP
40128: POP
// end ;
40129: LD_VAR 0 4
40133: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40134: LD_INT 0
40136: PPUSH
40137: PPUSH
40138: PPUSH
// if not side or side > 8 then
40139: LD_VAR 0 1
40143: NOT
40144: IFTRUE 40156
40146: PUSH
40147: LD_VAR 0 1
40151: PUSH
40152: LD_INT 8
40154: GREATER
40155: OR
40156: IFFALSE 40160
// exit ;
40158: GO 40347
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40160: LD_ADDR_VAR 0 4
40164: PUSH
40165: LD_INT 22
40167: PUSH
40168: LD_VAR 0 1
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 21
40179: PUSH
40180: LD_INT 3
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PPUSH
40191: CALL_OW 69
40195: ST_TO_ADDR
// if not tmp then
40196: LD_VAR 0 4
40200: NOT
40201: IFFALSE 40205
// exit ;
40203: GO 40347
// enable_addtolog := true ;
40205: LD_ADDR_OWVAR 81
40209: PUSH
40210: LD_INT 1
40212: ST_TO_ADDR
// AddToLog ( [ ) ;
40213: LD_STRING [
40215: PPUSH
40216: CALL_OW 561
// for i in tmp do
40220: LD_ADDR_VAR 0 3
40224: PUSH
40225: LD_VAR 0 4
40229: PUSH
40230: FOR_IN
40231: IFFALSE 40338
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40233: LD_STRING [
40235: PUSH
40236: LD_VAR 0 3
40240: PPUSH
40241: CALL_OW 266
40245: STR
40246: PUSH
40247: LD_STRING , 
40249: STR
40250: PUSH
40251: LD_VAR 0 3
40255: PPUSH
40256: CALL_OW 250
40260: STR
40261: PUSH
40262: LD_STRING , 
40264: STR
40265: PUSH
40266: LD_VAR 0 3
40270: PPUSH
40271: CALL_OW 251
40275: STR
40276: PUSH
40277: LD_STRING , 
40279: STR
40280: PUSH
40281: LD_VAR 0 3
40285: PPUSH
40286: CALL_OW 254
40290: STR
40291: PUSH
40292: LD_STRING , 
40294: STR
40295: PUSH
40296: LD_VAR 0 3
40300: PPUSH
40301: LD_INT 1
40303: PPUSH
40304: CALL_OW 268
40308: STR
40309: PUSH
40310: LD_STRING , 
40312: STR
40313: PUSH
40314: LD_VAR 0 3
40318: PPUSH
40319: LD_INT 2
40321: PPUSH
40322: CALL_OW 268
40326: STR
40327: PUSH
40328: LD_STRING ],
40330: STR
40331: PPUSH
40332: CALL_OW 561
// end ;
40336: GO 40230
40338: POP
40339: POP
// AddToLog ( ]; ) ;
40340: LD_STRING ];
40342: PPUSH
40343: CALL_OW 561
// end ;
40347: LD_VAR 0 2
40351: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40352: LD_INT 0
40354: PPUSH
40355: PPUSH
40356: PPUSH
40357: PPUSH
40358: PPUSH
// if not area or not rate or not max then
40359: LD_VAR 0 1
40363: NOT
40364: IFTRUE 40373
40366: PUSH
40367: LD_VAR 0 2
40371: NOT
40372: OR
40373: IFTRUE 40382
40375: PUSH
40376: LD_VAR 0 4
40380: NOT
40381: OR
40382: IFFALSE 40386
// exit ;
40384: GO 40575
// while 1 do
40386: LD_INT 1
40388: IFFALSE 40575
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40390: LD_ADDR_VAR 0 9
40394: PUSH
40395: LD_VAR 0 1
40399: PPUSH
40400: LD_INT 1
40402: PPUSH
40403: CALL_OW 287
40407: PUSH
40408: LD_INT 10
40410: MUL
40411: ST_TO_ADDR
// r := rate / 10 ;
40412: LD_ADDR_VAR 0 7
40416: PUSH
40417: LD_VAR 0 2
40421: PUSH
40422: LD_INT 10
40424: DIVREAL
40425: ST_TO_ADDR
// time := 1 1$00 ;
40426: LD_ADDR_VAR 0 8
40430: PUSH
40431: LD_INT 2100
40433: ST_TO_ADDR
// if amount < min then
40434: LD_VAR 0 9
40438: PUSH
40439: LD_VAR 0 3
40443: LESS
40444: IFFALSE 40462
// r := r * 2 else
40446: LD_ADDR_VAR 0 7
40450: PUSH
40451: LD_VAR 0 7
40455: PUSH
40456: LD_INT 2
40458: MUL
40459: ST_TO_ADDR
40460: GO 40488
// if amount > max then
40462: LD_VAR 0 9
40466: PUSH
40467: LD_VAR 0 4
40471: GREATER
40472: IFFALSE 40488
// r := r / 2 ;
40474: LD_ADDR_VAR 0 7
40478: PUSH
40479: LD_VAR 0 7
40483: PUSH
40484: LD_INT 2
40486: DIVREAL
40487: ST_TO_ADDR
// time := time / r ;
40488: LD_ADDR_VAR 0 8
40492: PUSH
40493: LD_VAR 0 8
40497: PUSH
40498: LD_VAR 0 7
40502: DIVREAL
40503: ST_TO_ADDR
// if time < 0 then
40504: LD_VAR 0 8
40508: PUSH
40509: LD_INT 0
40511: LESS
40512: IFFALSE 40529
// time := time * - 1 ;
40514: LD_ADDR_VAR 0 8
40518: PUSH
40519: LD_VAR 0 8
40523: PUSH
40524: LD_INT 1
40526: NEG
40527: MUL
40528: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40529: LD_VAR 0 8
40533: PUSH
40534: LD_INT 35
40536: PPUSH
40537: LD_INT 875
40539: PPUSH
40540: CALL_OW 12
40544: PLUS
40545: PPUSH
40546: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40550: LD_INT 1
40552: PPUSH
40553: LD_INT 5
40555: PPUSH
40556: CALL_OW 12
40560: PPUSH
40561: LD_VAR 0 1
40565: PPUSH
40566: LD_INT 1
40568: PPUSH
40569: CALL_OW 55
// end ;
40573: GO 40386
// end ;
40575: LD_VAR 0 5
40579: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40580: LD_INT 0
40582: PPUSH
40583: PPUSH
40584: PPUSH
40585: PPUSH
40586: PPUSH
40587: PPUSH
40588: PPUSH
40589: PPUSH
// if not turrets or not factories then
40590: LD_VAR 0 1
40594: NOT
40595: IFTRUE 40604
40597: PUSH
40598: LD_VAR 0 2
40602: NOT
40603: OR
40604: IFFALSE 40608
// exit ;
40606: GO 40915
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40608: LD_ADDR_VAR 0 10
40612: PUSH
40613: LD_INT 5
40615: PUSH
40616: LD_INT 6
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: LD_INT 4
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 3
40635: PUSH
40636: LD_INT 5
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 24
40650: PUSH
40651: LD_INT 25
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 23
40660: PUSH
40661: LD_INT 27
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 42
40674: PUSH
40675: LD_INT 43
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 44
40684: PUSH
40685: LD_INT 46
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 45
40694: PUSH
40695: LD_INT 47
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: LIST
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: LIST
40711: ST_TO_ADDR
// result := [ ] ;
40712: LD_ADDR_VAR 0 3
40716: PUSH
40717: EMPTY
40718: ST_TO_ADDR
// for i in turrets do
40719: LD_ADDR_VAR 0 4
40723: PUSH
40724: LD_VAR 0 1
40728: PUSH
40729: FOR_IN
40730: IFFALSE 40913
// begin nat := GetNation ( i ) ;
40732: LD_ADDR_VAR 0 7
40736: PUSH
40737: LD_VAR 0 4
40741: PPUSH
40742: CALL_OW 248
40746: ST_TO_ADDR
// weapon := 0 ;
40747: LD_ADDR_VAR 0 8
40751: PUSH
40752: LD_INT 0
40754: ST_TO_ADDR
// if not nat then
40755: LD_VAR 0 7
40759: NOT
40760: IFFALSE 40764
// continue ;
40762: GO 40729
// for j in list [ nat ] do
40764: LD_ADDR_VAR 0 5
40768: PUSH
40769: LD_VAR 0 10
40773: PUSH
40774: LD_VAR 0 7
40778: ARRAY
40779: PUSH
40780: FOR_IN
40781: IFFALSE 40822
// if GetBWeapon ( i ) = j [ 1 ] then
40783: LD_VAR 0 4
40787: PPUSH
40788: CALL_OW 269
40792: PUSH
40793: LD_VAR 0 5
40797: PUSH
40798: LD_INT 1
40800: ARRAY
40801: EQUAL
40802: IFFALSE 40820
// begin weapon := j [ 2 ] ;
40804: LD_ADDR_VAR 0 8
40808: PUSH
40809: LD_VAR 0 5
40813: PUSH
40814: LD_INT 2
40816: ARRAY
40817: ST_TO_ADDR
// break ;
40818: GO 40822
// end ;
40820: GO 40780
40822: POP
40823: POP
// if not weapon then
40824: LD_VAR 0 8
40828: NOT
40829: IFFALSE 40833
// continue ;
40831: GO 40729
// for k in factories do
40833: LD_ADDR_VAR 0 6
40837: PUSH
40838: LD_VAR 0 2
40842: PUSH
40843: FOR_IN
40844: IFFALSE 40909
// begin weapons := AvailableWeaponList ( k ) ;
40846: LD_ADDR_VAR 0 9
40850: PUSH
40851: LD_VAR 0 6
40855: PPUSH
40856: CALL_OW 478
40860: ST_TO_ADDR
// if not weapons then
40861: LD_VAR 0 9
40865: NOT
40866: IFFALSE 40870
// continue ;
40868: GO 40843
// if weapon in weapons then
40870: LD_VAR 0 8
40874: PUSH
40875: LD_VAR 0 9
40879: IN
40880: IFFALSE 40907
// begin result := [ i , weapon ] ;
40882: LD_ADDR_VAR 0 3
40886: PUSH
40887: LD_VAR 0 4
40891: PUSH
40892: LD_VAR 0 8
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: ST_TO_ADDR
// exit ;
40901: POP
40902: POP
40903: POP
40904: POP
40905: GO 40915
// end ; end ;
40907: GO 40843
40909: POP
40910: POP
// end ;
40911: GO 40729
40913: POP
40914: POP
// end ;
40915: LD_VAR 0 3
40919: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40920: LD_INT 0
40922: PPUSH
// if not side or side > 8 then
40923: LD_VAR 0 3
40927: NOT
40928: IFTRUE 40940
40930: PUSH
40931: LD_VAR 0 3
40935: PUSH
40936: LD_INT 8
40938: GREATER
40939: OR
40940: IFFALSE 40944
// exit ;
40942: GO 41003
// if not range then
40944: LD_VAR 0 4
40948: NOT
40949: IFFALSE 40960
// range := - 12 ;
40951: LD_ADDR_VAR 0 4
40955: PUSH
40956: LD_INT 12
40958: NEG
40959: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40960: LD_VAR 0 1
40964: PPUSH
40965: LD_VAR 0 2
40969: PPUSH
40970: LD_VAR 0 3
40974: PPUSH
40975: LD_VAR 0 4
40979: PPUSH
40980: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40984: LD_VAR 0 1
40988: PPUSH
40989: LD_VAR 0 2
40993: PPUSH
40994: LD_VAR 0 3
40998: PPUSH
40999: CALL_OW 331
// end ;
41003: LD_VAR 0 5
41007: RET
// export function Video ( mode ) ; begin
41008: LD_INT 0
41010: PPUSH
// ingame_video = mode ;
41011: LD_ADDR_OWVAR 52
41015: PUSH
41016: LD_VAR 0 1
41020: ST_TO_ADDR
// interface_hidden = mode ;
41021: LD_ADDR_OWVAR 54
41025: PUSH
41026: LD_VAR 0 1
41030: ST_TO_ADDR
// end ;
41031: LD_VAR 0 2
41035: RET
// export function Join ( array , element ) ; begin
41036: LD_INT 0
41038: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41039: LD_ADDR_VAR 0 3
41043: PUSH
41044: LD_VAR 0 1
41048: PPUSH
41049: LD_VAR 0 1
41053: PUSH
41054: LD_INT 1
41056: PLUS
41057: PPUSH
41058: LD_VAR 0 2
41062: PPUSH
41063: CALL_OW 1
41067: ST_TO_ADDR
// end ;
41068: LD_VAR 0 3
41072: RET
// export function JoinUnion ( array , element ) ; begin
41073: LD_INT 0
41075: PPUSH
// result := array union element ;
41076: LD_ADDR_VAR 0 3
41080: PUSH
41081: LD_VAR 0 1
41085: PUSH
41086: LD_VAR 0 2
41090: UNION
41091: ST_TO_ADDR
// end ;
41092: LD_VAR 0 3
41096: RET
// export function GetBehemoths ( side ) ; begin
41097: LD_INT 0
41099: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41100: LD_ADDR_VAR 0 2
41104: PUSH
41105: LD_INT 22
41107: PUSH
41108: LD_VAR 0 1
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 31
41119: PUSH
41120: LD_INT 25
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PPUSH
41131: CALL_OW 69
41135: ST_TO_ADDR
// end ;
41136: LD_VAR 0 2
41140: RET
// export function Shuffle ( array ) ; var i , index ; begin
41141: LD_INT 0
41143: PPUSH
41144: PPUSH
41145: PPUSH
// result := [ ] ;
41146: LD_ADDR_VAR 0 2
41150: PUSH
41151: EMPTY
41152: ST_TO_ADDR
// if not array then
41153: LD_VAR 0 1
41157: NOT
41158: IFFALSE 41162
// exit ;
41160: GO 41261
// Randomize ;
41162: CALL_OW 10
// for i = array downto 1 do
41166: LD_ADDR_VAR 0 3
41170: PUSH
41171: DOUBLE
41172: LD_VAR 0 1
41176: INC
41177: ST_TO_ADDR
41178: LD_INT 1
41180: PUSH
41181: FOR_DOWNTO
41182: IFFALSE 41259
// begin index := rand ( 1 , array ) ;
41184: LD_ADDR_VAR 0 4
41188: PUSH
41189: LD_INT 1
41191: PPUSH
41192: LD_VAR 0 1
41196: PPUSH
41197: CALL_OW 12
41201: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41202: LD_ADDR_VAR 0 2
41206: PUSH
41207: LD_VAR 0 2
41211: PPUSH
41212: LD_VAR 0 2
41216: PUSH
41217: LD_INT 1
41219: PLUS
41220: PPUSH
41221: LD_VAR 0 1
41225: PUSH
41226: LD_VAR 0 4
41230: ARRAY
41231: PPUSH
41232: CALL_OW 2
41236: ST_TO_ADDR
// array := Delete ( array , index ) ;
41237: LD_ADDR_VAR 0 1
41241: PUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: LD_VAR 0 4
41251: PPUSH
41252: CALL_OW 3
41256: ST_TO_ADDR
// end ;
41257: GO 41181
41259: POP
41260: POP
// end ;
41261: LD_VAR 0 2
41265: RET
// export function GetBaseMaterials ( base ) ; begin
41266: LD_INT 0
41268: PPUSH
// result := [ 0 , 0 , 0 ] ;
41269: LD_ADDR_VAR 0 2
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: LIST
41287: ST_TO_ADDR
// if not base then
41288: LD_VAR 0 1
41292: NOT
41293: IFFALSE 41297
// exit ;
41295: GO 41346
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41297: LD_ADDR_VAR 0 2
41301: PUSH
41302: LD_VAR 0 1
41306: PPUSH
41307: LD_INT 1
41309: PPUSH
41310: CALL_OW 275
41314: PUSH
41315: LD_VAR 0 1
41319: PPUSH
41320: LD_INT 2
41322: PPUSH
41323: CALL_OW 275
41327: PUSH
41328: LD_VAR 0 1
41332: PPUSH
41333: LD_INT 3
41335: PPUSH
41336: CALL_OW 275
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: LIST
41345: ST_TO_ADDR
// end ;
41346: LD_VAR 0 2
41350: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41351: LD_INT 0
41353: PPUSH
41354: PPUSH
// result := array ;
41355: LD_ADDR_VAR 0 3
41359: PUSH
41360: LD_VAR 0 1
41364: ST_TO_ADDR
// if size >= result then
41365: LD_VAR 0 2
41369: PUSH
41370: LD_VAR 0 3
41374: GREATEREQUAL
41375: IFFALSE 41379
// exit ;
41377: GO 41429
// if size then
41379: LD_VAR 0 2
41383: IFFALSE 41429
// for i := array downto size do
41385: LD_ADDR_VAR 0 4
41389: PUSH
41390: DOUBLE
41391: LD_VAR 0 1
41395: INC
41396: ST_TO_ADDR
41397: LD_VAR 0 2
41401: PUSH
41402: FOR_DOWNTO
41403: IFFALSE 41427
// result := Delete ( result , result ) ;
41405: LD_ADDR_VAR 0 3
41409: PUSH
41410: LD_VAR 0 3
41414: PPUSH
41415: LD_VAR 0 3
41419: PPUSH
41420: CALL_OW 3
41424: ST_TO_ADDR
41425: GO 41402
41427: POP
41428: POP
// end ;
41429: LD_VAR 0 3
41433: RET
// export function ComExit ( unit ) ; var tmp ; begin
41434: LD_INT 0
41436: PPUSH
41437: PPUSH
// if not IsInUnit ( unit ) then
41438: LD_VAR 0 1
41442: PPUSH
41443: CALL_OW 310
41447: NOT
41448: IFFALSE 41452
// exit ;
41450: GO 41512
// tmp := IsInUnit ( unit ) ;
41452: LD_ADDR_VAR 0 3
41456: PUSH
41457: LD_VAR 0 1
41461: PPUSH
41462: CALL_OW 310
41466: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41467: LD_VAR 0 3
41471: PPUSH
41472: CALL_OW 247
41476: PUSH
41477: LD_INT 2
41479: EQUAL
41480: IFFALSE 41493
// ComExitVehicle ( unit ) else
41482: LD_VAR 0 1
41486: PPUSH
41487: CALL_OW 121
41491: GO 41502
// ComExitBuilding ( unit ) ;
41493: LD_VAR 0 1
41497: PPUSH
41498: CALL_OW 122
// result := tmp ;
41502: LD_ADDR_VAR 0 2
41506: PUSH
41507: LD_VAR 0 3
41511: ST_TO_ADDR
// end ;
41512: LD_VAR 0 2
41516: RET
// export function ComExitAll ( units ) ; var i ; begin
41517: LD_INT 0
41519: PPUSH
41520: PPUSH
// if not units then
41521: LD_VAR 0 1
41525: NOT
41526: IFFALSE 41530
// exit ;
41528: GO 41556
// for i in units do
41530: LD_ADDR_VAR 0 3
41534: PUSH
41535: LD_VAR 0 1
41539: PUSH
41540: FOR_IN
41541: IFFALSE 41554
// ComExit ( i ) ;
41543: LD_VAR 0 3
41547: PPUSH
41548: CALL 41434 0 1
41552: GO 41540
41554: POP
41555: POP
// end ;
41556: LD_VAR 0 2
41560: RET
// export function ResetHc ; begin
41561: LD_INT 0
41563: PPUSH
// InitHc ;
41564: CALL_OW 19
// hc_importance := 0 ;
41568: LD_ADDR_OWVAR 32
41572: PUSH
41573: LD_INT 0
41575: ST_TO_ADDR
// end ;
41576: LD_VAR 0 1
41580: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41581: LD_INT 0
41583: PPUSH
41584: PPUSH
41585: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41586: LD_ADDR_VAR 0 6
41590: PUSH
41591: LD_VAR 0 1
41595: PUSH
41596: LD_VAR 0 3
41600: PLUS
41601: PUSH
41602: LD_INT 2
41604: DIV
41605: ST_TO_ADDR
// if _x < 0 then
41606: LD_VAR 0 6
41610: PUSH
41611: LD_INT 0
41613: LESS
41614: IFFALSE 41631
// _x := _x * - 1 ;
41616: LD_ADDR_VAR 0 6
41620: PUSH
41621: LD_VAR 0 6
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: MUL
41630: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41631: LD_ADDR_VAR 0 7
41635: PUSH
41636: LD_VAR 0 2
41640: PUSH
41641: LD_VAR 0 4
41645: PLUS
41646: PUSH
41647: LD_INT 2
41649: DIV
41650: ST_TO_ADDR
// if _y < 0 then
41651: LD_VAR 0 7
41655: PUSH
41656: LD_INT 0
41658: LESS
41659: IFFALSE 41676
// _y := _y * - 1 ;
41661: LD_ADDR_VAR 0 7
41665: PUSH
41666: LD_VAR 0 7
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: MUL
41675: ST_TO_ADDR
// result := [ _x , _y ] ;
41676: LD_ADDR_VAR 0 5
41680: PUSH
41681: LD_VAR 0 6
41685: PUSH
41686: LD_VAR 0 7
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: ST_TO_ADDR
// end ;
41695: LD_VAR 0 5
41699: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41700: LD_INT 0
41702: PPUSH
41703: PPUSH
41704: PPUSH
41705: PPUSH
// task := GetTaskList ( unit ) ;
41706: LD_ADDR_VAR 0 7
41710: PUSH
41711: LD_VAR 0 1
41715: PPUSH
41716: CALL_OW 437
41720: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41721: LD_VAR 0 7
41725: NOT
41726: IFFALSE 41745
41728: PUSH
41729: LD_VAR 0 1
41733: PPUSH
41734: LD_VAR 0 2
41738: PPUSH
41739: CALL_OW 308
41743: NOT
41744: AND
41745: IFFALSE 41749
// exit ;
41747: GO 41867
// if IsInArea ( unit , area ) then
41749: LD_VAR 0 1
41753: PPUSH
41754: LD_VAR 0 2
41758: PPUSH
41759: CALL_OW 308
41763: IFFALSE 41781
// begin ComMoveToArea ( unit , goAway ) ;
41765: LD_VAR 0 1
41769: PPUSH
41770: LD_VAR 0 3
41774: PPUSH
41775: CALL_OW 113
// exit ;
41779: GO 41867
// end ; if task [ 1 ] [ 1 ] <> M then
41781: LD_VAR 0 7
41785: PUSH
41786: LD_INT 1
41788: ARRAY
41789: PUSH
41790: LD_INT 1
41792: ARRAY
41793: PUSH
41794: LD_STRING M
41796: NONEQUAL
41797: IFFALSE 41801
// exit ;
41799: GO 41867
// x := task [ 1 ] [ 2 ] ;
41801: LD_ADDR_VAR 0 5
41805: PUSH
41806: LD_VAR 0 7
41810: PUSH
41811: LD_INT 1
41813: ARRAY
41814: PUSH
41815: LD_INT 2
41817: ARRAY
41818: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41819: LD_ADDR_VAR 0 6
41823: PUSH
41824: LD_VAR 0 7
41828: PUSH
41829: LD_INT 1
41831: ARRAY
41832: PUSH
41833: LD_INT 3
41835: ARRAY
41836: ST_TO_ADDR
// if InArea ( x , y , area ) then
41837: LD_VAR 0 5
41841: PPUSH
41842: LD_VAR 0 6
41846: PPUSH
41847: LD_VAR 0 2
41851: PPUSH
41852: CALL_OW 309
41856: IFFALSE 41867
// ComStop ( unit ) ;
41858: LD_VAR 0 1
41862: PPUSH
41863: CALL_OW 141
// end ;
41867: LD_VAR 0 4
41871: RET
// export function Abs ( value ) ; begin
41872: LD_INT 0
41874: PPUSH
// result := value ;
41875: LD_ADDR_VAR 0 2
41879: PUSH
41880: LD_VAR 0 1
41884: ST_TO_ADDR
// if value < 0 then
41885: LD_VAR 0 1
41889: PUSH
41890: LD_INT 0
41892: LESS
41893: IFFALSE 41910
// result := value * - 1 ;
41895: LD_ADDR_VAR 0 2
41899: PUSH
41900: LD_VAR 0 1
41904: PUSH
41905: LD_INT 1
41907: NEG
41908: MUL
41909: ST_TO_ADDR
// end ;
41910: LD_VAR 0 2
41914: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41915: LD_INT 0
41917: PPUSH
41918: PPUSH
41919: PPUSH
41920: PPUSH
41921: PPUSH
41922: PPUSH
41923: PPUSH
41924: PPUSH
// if not unit or not building then
41925: LD_VAR 0 1
41929: NOT
41930: IFTRUE 41939
41932: PUSH
41933: LD_VAR 0 2
41937: NOT
41938: OR
41939: IFFALSE 41943
// exit ;
41941: GO 42171
// x := GetX ( building ) ;
41943: LD_ADDR_VAR 0 4
41947: PUSH
41948: LD_VAR 0 2
41952: PPUSH
41953: CALL_OW 250
41957: ST_TO_ADDR
// y := GetY ( building ) ;
41958: LD_ADDR_VAR 0 6
41962: PUSH
41963: LD_VAR 0 2
41967: PPUSH
41968: CALL_OW 251
41972: ST_TO_ADDR
// d := GetDir ( building ) ;
41973: LD_ADDR_VAR 0 8
41977: PUSH
41978: LD_VAR 0 2
41982: PPUSH
41983: CALL_OW 254
41987: ST_TO_ADDR
// r := 4 ;
41988: LD_ADDR_VAR 0 9
41992: PUSH
41993: LD_INT 4
41995: ST_TO_ADDR
// for i := 1 to 5 do
41996: LD_ADDR_VAR 0 10
42000: PUSH
42001: DOUBLE
42002: LD_INT 1
42004: DEC
42005: ST_TO_ADDR
42006: LD_INT 5
42008: PUSH
42009: FOR_TO
42010: IFFALSE 42169
// begin _x := ShiftX ( x , d , r + i ) ;
42012: LD_ADDR_VAR 0 5
42016: PUSH
42017: LD_VAR 0 4
42021: PPUSH
42022: LD_VAR 0 8
42026: PPUSH
42027: LD_VAR 0 9
42031: PUSH
42032: LD_VAR 0 10
42036: PLUS
42037: PPUSH
42038: CALL_OW 272
42042: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42043: LD_ADDR_VAR 0 7
42047: PUSH
42048: LD_VAR 0 6
42052: PPUSH
42053: LD_VAR 0 8
42057: PPUSH
42058: LD_VAR 0 9
42062: PUSH
42063: LD_VAR 0 10
42067: PLUS
42068: PPUSH
42069: CALL_OW 273
42073: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42074: LD_VAR 0 5
42078: PPUSH
42079: LD_VAR 0 7
42083: PPUSH
42084: CALL_OW 488
42088: IFFALSE 42123
42090: PUSH
42091: LD_VAR 0 5
42095: PPUSH
42096: LD_VAR 0 7
42100: PPUSH
42101: CALL_OW 428
42105: PPUSH
42106: CALL_OW 247
42110: PUSH
42111: LD_INT 3
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: IN
42121: NOT
42122: AND
42123: IFFALSE 42167
// begin ComMoveXY ( unit , _x , _y ) ;
42125: LD_VAR 0 1
42129: PPUSH
42130: LD_VAR 0 5
42134: PPUSH
42135: LD_VAR 0 7
42139: PPUSH
42140: CALL_OW 111
// result := [ _x , _y ] ;
42144: LD_ADDR_VAR 0 3
42148: PUSH
42149: LD_VAR 0 5
42153: PUSH
42154: LD_VAR 0 7
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: ST_TO_ADDR
// exit ;
42163: POP
42164: POP
42165: GO 42171
// end ; end ;
42167: GO 42009
42169: POP
42170: POP
// end ;
42171: LD_VAR 0 3
42175: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42176: LD_INT 0
42178: PPUSH
42179: PPUSH
42180: PPUSH
// result := 0 ;
42181: LD_ADDR_VAR 0 3
42185: PUSH
42186: LD_INT 0
42188: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42189: LD_VAR 0 1
42193: PUSH
42194: LD_INT 0
42196: LESS
42197: IFTRUE 42209
42199: PUSH
42200: LD_VAR 0 1
42204: PUSH
42205: LD_INT 8
42207: GREATER
42208: OR
42209: IFTRUE 42221
42211: PUSH
42212: LD_VAR 0 2
42216: PUSH
42217: LD_INT 0
42219: LESS
42220: OR
42221: IFTRUE 42233
42223: PUSH
42224: LD_VAR 0 2
42228: PUSH
42229: LD_INT 8
42231: GREATER
42232: OR
42233: IFFALSE 42237
// exit ;
42235: GO 42312
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42237: LD_ADDR_VAR 0 4
42241: PUSH
42242: LD_INT 22
42244: PUSH
42245: LD_VAR 0 2
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PPUSH
42254: CALL_OW 69
42258: PUSH
42259: FOR_IN
42260: IFFALSE 42310
// begin un := UnitShoot ( i ) ;
42262: LD_ADDR_VAR 0 5
42266: PUSH
42267: LD_VAR 0 4
42271: PPUSH
42272: CALL_OW 504
42276: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42277: LD_VAR 0 5
42281: PPUSH
42282: CALL_OW 255
42286: PUSH
42287: LD_VAR 0 1
42291: EQUAL
42292: IFFALSE 42308
// begin result := un ;
42294: LD_ADDR_VAR 0 3
42298: PUSH
42299: LD_VAR 0 5
42303: ST_TO_ADDR
// exit ;
42304: POP
42305: POP
42306: GO 42312
// end ; end ;
42308: GO 42259
42310: POP
42311: POP
// end ;
42312: LD_VAR 0 3
42316: RET
// export function GetCargoBay ( units ) ; begin
42317: LD_INT 0
42319: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42320: LD_ADDR_VAR 0 2
42324: PUSH
42325: LD_VAR 0 1
42329: PPUSH
42330: LD_INT 2
42332: PUSH
42333: LD_INT 34
42335: PUSH
42336: LD_INT 12
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 34
42345: PUSH
42346: LD_INT 51
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 34
42355: PUSH
42356: LD_INT 32
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 34
42365: PUSH
42366: LD_INT 89
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: PPUSH
42380: CALL_OW 72
42384: ST_TO_ADDR
// end ;
42385: LD_VAR 0 2
42389: RET
// export function Negate ( value ) ; begin
42390: LD_INT 0
42392: PPUSH
// result := not value ;
42393: LD_ADDR_VAR 0 2
42397: PUSH
42398: LD_VAR 0 1
42402: NOT
42403: ST_TO_ADDR
// end ;
42404: LD_VAR 0 2
42408: RET
// export function Inc ( value ) ; begin
42409: LD_INT 0
42411: PPUSH
// result := value + 1 ;
42412: LD_ADDR_VAR 0 2
42416: PUSH
42417: LD_VAR 0 1
42421: PUSH
42422: LD_INT 1
42424: PLUS
42425: ST_TO_ADDR
// end ;
42426: LD_VAR 0 2
42430: RET
// export function Dec ( value ) ; begin
42431: LD_INT 0
42433: PPUSH
// result := value - 1 ;
42434: LD_ADDR_VAR 0 2
42438: PUSH
42439: LD_VAR 0 1
42443: PUSH
42444: LD_INT 1
42446: MINUS
42447: ST_TO_ADDR
// end ;
42448: LD_VAR 0 2
42452: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42453: LD_INT 0
42455: PPUSH
42456: PPUSH
42457: PPUSH
42458: PPUSH
42459: PPUSH
42460: PPUSH
42461: PPUSH
42462: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42463: LD_VAR 0 1
42467: PPUSH
42468: LD_VAR 0 2
42472: PPUSH
42473: CALL_OW 488
42477: NOT
42478: IFTRUE 42497
42480: PUSH
42481: LD_VAR 0 3
42485: PPUSH
42486: LD_VAR 0 4
42490: PPUSH
42491: CALL_OW 488
42495: NOT
42496: OR
42497: IFFALSE 42510
// begin result := - 1 ;
42499: LD_ADDR_VAR 0 5
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: ST_TO_ADDR
// exit ;
42508: GO 42745
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42510: LD_ADDR_VAR 0 12
42514: PUSH
42515: LD_VAR 0 1
42519: PPUSH
42520: LD_VAR 0 2
42524: PPUSH
42525: LD_VAR 0 3
42529: PPUSH
42530: LD_VAR 0 4
42534: PPUSH
42535: CALL 41581 0 4
42539: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42540: LD_ADDR_VAR 0 11
42544: PUSH
42545: LD_VAR 0 1
42549: PPUSH
42550: LD_VAR 0 2
42554: PPUSH
42555: LD_VAR 0 12
42559: PUSH
42560: LD_INT 1
42562: ARRAY
42563: PPUSH
42564: LD_VAR 0 12
42568: PUSH
42569: LD_INT 2
42571: ARRAY
42572: PPUSH
42573: CALL_OW 298
42577: ST_TO_ADDR
// distance := 9999 ;
42578: LD_ADDR_VAR 0 10
42582: PUSH
42583: LD_INT 9999
42585: ST_TO_ADDR
// for i := 0 to 5 do
42586: LD_ADDR_VAR 0 6
42590: PUSH
42591: DOUBLE
42592: LD_INT 0
42594: DEC
42595: ST_TO_ADDR
42596: LD_INT 5
42598: PUSH
42599: FOR_TO
42600: IFFALSE 42743
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42602: LD_ADDR_VAR 0 7
42606: PUSH
42607: LD_VAR 0 1
42611: PPUSH
42612: LD_VAR 0 6
42616: PPUSH
42617: LD_VAR 0 11
42621: PPUSH
42622: CALL_OW 272
42626: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42627: LD_ADDR_VAR 0 8
42631: PUSH
42632: LD_VAR 0 2
42636: PPUSH
42637: LD_VAR 0 6
42641: PPUSH
42642: LD_VAR 0 11
42646: PPUSH
42647: CALL_OW 273
42651: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42652: LD_VAR 0 7
42656: PPUSH
42657: LD_VAR 0 8
42661: PPUSH
42662: CALL_OW 488
42666: NOT
42667: IFFALSE 42671
// continue ;
42669: GO 42599
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42671: LD_ADDR_VAR 0 9
42675: PUSH
42676: LD_VAR 0 12
42680: PUSH
42681: LD_INT 1
42683: ARRAY
42684: PPUSH
42685: LD_VAR 0 12
42689: PUSH
42690: LD_INT 2
42692: ARRAY
42693: PPUSH
42694: LD_VAR 0 7
42698: PPUSH
42699: LD_VAR 0 8
42703: PPUSH
42704: CALL_OW 298
42708: ST_TO_ADDR
// if tmp < distance then
42709: LD_VAR 0 9
42713: PUSH
42714: LD_VAR 0 10
42718: LESS
42719: IFFALSE 42741
// begin result := i ;
42721: LD_ADDR_VAR 0 5
42725: PUSH
42726: LD_VAR 0 6
42730: ST_TO_ADDR
// distance := tmp ;
42731: LD_ADDR_VAR 0 10
42735: PUSH
42736: LD_VAR 0 9
42740: ST_TO_ADDR
// end ; end ;
42741: GO 42599
42743: POP
42744: POP
// end ;
42745: LD_VAR 0 5
42749: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42750: LD_INT 0
42752: PPUSH
42753: PPUSH
// if not driver or not IsInUnit ( driver ) then
42754: LD_VAR 0 1
42758: NOT
42759: IFTRUE 42773
42761: PUSH
42762: LD_VAR 0 1
42766: PPUSH
42767: CALL_OW 310
42771: NOT
42772: OR
42773: IFFALSE 42777
// exit ;
42775: GO 42867
// vehicle := IsInUnit ( driver ) ;
42777: LD_ADDR_VAR 0 3
42781: PUSH
42782: LD_VAR 0 1
42786: PPUSH
42787: CALL_OW 310
42791: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42792: LD_VAR 0 1
42796: PPUSH
42797: LD_STRING \
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: PUSH
42827: LD_STRING E
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_VAR 0 3
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PPUSH
42863: CALL_OW 446
// end ;
42867: LD_VAR 0 2
42871: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42872: LD_INT 0
42874: PPUSH
42875: PPUSH
// if not driver or not IsInUnit ( driver ) then
42876: LD_VAR 0 1
42880: NOT
42881: IFTRUE 42895
42883: PUSH
42884: LD_VAR 0 1
42888: PPUSH
42889: CALL_OW 310
42893: NOT
42894: OR
42895: IFFALSE 42899
// exit ;
42897: GO 42989
// vehicle := IsInUnit ( driver ) ;
42899: LD_ADDR_VAR 0 3
42903: PUSH
42904: LD_VAR 0 1
42908: PPUSH
42909: CALL_OW 310
42913: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42914: LD_VAR 0 1
42918: PPUSH
42919: LD_STRING \
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: PUSH
42949: LD_STRING E
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_VAR 0 3
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PPUSH
42985: CALL_OW 447
// end ;
42989: LD_VAR 0 2
42993: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42994: LD_INT 0
42996: PPUSH
42997: PPUSH
42998: PPUSH
// tmp := [ ] ;
42999: LD_ADDR_VAR 0 5
43003: PUSH
43004: EMPTY
43005: ST_TO_ADDR
// for i in units do
43006: LD_ADDR_VAR 0 4
43010: PUSH
43011: LD_VAR 0 1
43015: PUSH
43016: FOR_IN
43017: IFFALSE 43055
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43019: LD_ADDR_VAR 0 5
43023: PUSH
43024: LD_VAR 0 5
43028: PPUSH
43029: LD_VAR 0 5
43033: PUSH
43034: LD_INT 1
43036: PLUS
43037: PPUSH
43038: LD_VAR 0 4
43042: PPUSH
43043: CALL_OW 256
43047: PPUSH
43048: CALL_OW 2
43052: ST_TO_ADDR
43053: GO 43016
43055: POP
43056: POP
// if not tmp then
43057: LD_VAR 0 5
43061: NOT
43062: IFFALSE 43066
// exit ;
43064: GO 43114
// if asc then
43066: LD_VAR 0 2
43070: IFFALSE 43094
// result := SortListByListAsc ( units , tmp ) else
43072: LD_ADDR_VAR 0 3
43076: PUSH
43077: LD_VAR 0 1
43081: PPUSH
43082: LD_VAR 0 5
43086: PPUSH
43087: CALL_OW 76
43091: ST_TO_ADDR
43092: GO 43114
// result := SortListByListDesc ( units , tmp ) ;
43094: LD_ADDR_VAR 0 3
43098: PUSH
43099: LD_VAR 0 1
43103: PPUSH
43104: LD_VAR 0 5
43108: PPUSH
43109: CALL_OW 77
43113: ST_TO_ADDR
// end ;
43114: LD_VAR 0 3
43118: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43119: LD_INT 0
43121: PPUSH
43122: PPUSH
// task := GetTaskList ( mech ) ;
43123: LD_ADDR_VAR 0 4
43127: PUSH
43128: LD_VAR 0 1
43132: PPUSH
43133: CALL_OW 437
43137: ST_TO_ADDR
// if not task then
43138: LD_VAR 0 4
43142: NOT
43143: IFFALSE 43147
// exit ;
43145: GO 43191
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43147: LD_ADDR_VAR 0 3
43151: PUSH
43152: LD_VAR 0 4
43156: PUSH
43157: LD_INT 1
43159: ARRAY
43160: PUSH
43161: LD_INT 1
43163: ARRAY
43164: PUSH
43165: LD_STRING r
43167: EQUAL
43168: IFFALSE 43190
43170: PUSH
43171: LD_VAR 0 4
43175: PUSH
43176: LD_INT 1
43178: ARRAY
43179: PUSH
43180: LD_INT 4
43182: ARRAY
43183: PUSH
43184: LD_VAR 0 2
43188: EQUAL
43189: AND
43190: ST_TO_ADDR
// end ;
43191: LD_VAR 0 3
43195: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43196: LD_INT 0
43198: PPUSH
// SetDir ( unit , d ) ;
43199: LD_VAR 0 1
43203: PPUSH
43204: LD_VAR 0 4
43208: PPUSH
43209: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43213: LD_ADDR_VAR 0 6
43217: PUSH
43218: LD_VAR 0 1
43222: PPUSH
43223: LD_VAR 0 2
43227: PPUSH
43228: LD_VAR 0 3
43232: PPUSH
43233: LD_VAR 0 5
43237: PPUSH
43238: CALL_OW 48
43242: ST_TO_ADDR
// end ;
43243: LD_VAR 0 6
43247: RET
// export function ToNaturalNumber ( number ) ; begin
43248: LD_INT 0
43250: PPUSH
// result := number div 1 ;
43251: LD_ADDR_VAR 0 2
43255: PUSH
43256: LD_VAR 0 1
43260: PUSH
43261: LD_INT 1
43263: DIV
43264: ST_TO_ADDR
// if number < 0 then
43265: LD_VAR 0 1
43269: PUSH
43270: LD_INT 0
43272: LESS
43273: IFFALSE 43283
// result := 0 ;
43275: LD_ADDR_VAR 0 2
43279: PUSH
43280: LD_INT 0
43282: ST_TO_ADDR
// end ;
43283: LD_VAR 0 2
43287: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43288: LD_INT 0
43290: PPUSH
43291: PPUSH
43292: PPUSH
// if not buildings then
43293: LD_VAR 0 1
43297: NOT
43298: IFFALSE 43302
// exit ;
43300: GO 43417
// tmp := [ ] ;
43302: LD_ADDR_VAR 0 5
43306: PUSH
43307: EMPTY
43308: ST_TO_ADDR
// for b in buildings do
43309: LD_ADDR_VAR 0 4
43313: PUSH
43314: LD_VAR 0 1
43318: PUSH
43319: FOR_IN
43320: IFFALSE 43358
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43322: LD_ADDR_VAR 0 5
43326: PUSH
43327: LD_VAR 0 5
43331: PPUSH
43332: LD_VAR 0 5
43336: PUSH
43337: LD_INT 1
43339: PLUS
43340: PPUSH
43341: LD_VAR 0 4
43345: PPUSH
43346: CALL_OW 266
43350: PPUSH
43351: CALL_OW 1
43355: ST_TO_ADDR
43356: GO 43319
43358: POP
43359: POP
// if not tmp then
43360: LD_VAR 0 5
43364: NOT
43365: IFFALSE 43369
// exit ;
43367: GO 43417
// if asc then
43369: LD_VAR 0 2
43373: IFFALSE 43397
// result := SortListByListAsc ( buildings , tmp ) else
43375: LD_ADDR_VAR 0 3
43379: PUSH
43380: LD_VAR 0 1
43384: PPUSH
43385: LD_VAR 0 5
43389: PPUSH
43390: CALL_OW 76
43394: ST_TO_ADDR
43395: GO 43417
// result := SortListByListDesc ( buildings , tmp ) ;
43397: LD_ADDR_VAR 0 3
43401: PUSH
43402: LD_VAR 0 1
43406: PPUSH
43407: LD_VAR 0 5
43411: PPUSH
43412: CALL_OW 77
43416: ST_TO_ADDR
// end ;
43417: LD_VAR 0 3
43421: RET
// export function SortByClass ( units , class ) ; var un ; begin
43422: LD_INT 0
43424: PPUSH
43425: PPUSH
// if not units or not class then
43426: LD_VAR 0 1
43430: NOT
43431: IFTRUE 43440
43433: PUSH
43434: LD_VAR 0 2
43438: NOT
43439: OR
43440: IFFALSE 43444
// exit ;
43442: GO 43539
// result := [ ] ;
43444: LD_ADDR_VAR 0 3
43448: PUSH
43449: EMPTY
43450: ST_TO_ADDR
// for un in units do
43451: LD_ADDR_VAR 0 4
43455: PUSH
43456: LD_VAR 0 1
43460: PUSH
43461: FOR_IN
43462: IFFALSE 43537
// if GetClass ( un ) = class then
43464: LD_VAR 0 4
43468: PPUSH
43469: CALL_OW 257
43473: PUSH
43474: LD_VAR 0 2
43478: EQUAL
43479: IFFALSE 43506
// result := Insert ( result , 1 , un ) else
43481: LD_ADDR_VAR 0 3
43485: PUSH
43486: LD_VAR 0 3
43490: PPUSH
43491: LD_INT 1
43493: PPUSH
43494: LD_VAR 0 4
43498: PPUSH
43499: CALL_OW 2
43503: ST_TO_ADDR
43504: GO 43535
// result := Replace ( result , result + 1 , un ) ;
43506: LD_ADDR_VAR 0 3
43510: PUSH
43511: LD_VAR 0 3
43515: PPUSH
43516: LD_VAR 0 3
43520: PUSH
43521: LD_INT 1
43523: PLUS
43524: PPUSH
43525: LD_VAR 0 4
43529: PPUSH
43530: CALL_OW 1
43534: ST_TO_ADDR
43535: GO 43461
43537: POP
43538: POP
// end ;
43539: LD_VAR 0 3
43543: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43544: LD_INT 0
43546: PPUSH
43547: PPUSH
43548: PPUSH
43549: PPUSH
43550: PPUSH
43551: PPUSH
43552: PPUSH
// result := [ ] ;
43553: LD_ADDR_VAR 0 4
43557: PUSH
43558: EMPTY
43559: ST_TO_ADDR
// if x - r < 0 then
43560: LD_VAR 0 1
43564: PUSH
43565: LD_VAR 0 3
43569: MINUS
43570: PUSH
43571: LD_INT 0
43573: LESS
43574: IFFALSE 43586
// min_x := 0 else
43576: LD_ADDR_VAR 0 8
43580: PUSH
43581: LD_INT 0
43583: ST_TO_ADDR
43584: GO 43602
// min_x := x - r ;
43586: LD_ADDR_VAR 0 8
43590: PUSH
43591: LD_VAR 0 1
43595: PUSH
43596: LD_VAR 0 3
43600: MINUS
43601: ST_TO_ADDR
// if y - r < 0 then
43602: LD_VAR 0 2
43606: PUSH
43607: LD_VAR 0 3
43611: MINUS
43612: PUSH
43613: LD_INT 0
43615: LESS
43616: IFFALSE 43628
// min_y := 0 else
43618: LD_ADDR_VAR 0 7
43622: PUSH
43623: LD_INT 0
43625: ST_TO_ADDR
43626: GO 43644
// min_y := y - r ;
43628: LD_ADDR_VAR 0 7
43632: PUSH
43633: LD_VAR 0 2
43637: PUSH
43638: LD_VAR 0 3
43642: MINUS
43643: ST_TO_ADDR
// max_x := x + r ;
43644: LD_ADDR_VAR 0 9
43648: PUSH
43649: LD_VAR 0 1
43653: PUSH
43654: LD_VAR 0 3
43658: PLUS
43659: ST_TO_ADDR
// max_y := y + r ;
43660: LD_ADDR_VAR 0 10
43664: PUSH
43665: LD_VAR 0 2
43669: PUSH
43670: LD_VAR 0 3
43674: PLUS
43675: ST_TO_ADDR
// for _x = min_x to max_x do
43676: LD_ADDR_VAR 0 5
43680: PUSH
43681: DOUBLE
43682: LD_VAR 0 8
43686: DEC
43687: ST_TO_ADDR
43688: LD_VAR 0 9
43692: PUSH
43693: FOR_TO
43694: IFFALSE 43795
// for _y = min_y to max_y do
43696: LD_ADDR_VAR 0 6
43700: PUSH
43701: DOUBLE
43702: LD_VAR 0 7
43706: DEC
43707: ST_TO_ADDR
43708: LD_VAR 0 10
43712: PUSH
43713: FOR_TO
43714: IFFALSE 43791
// begin if not ValidHex ( _x , _y ) then
43716: LD_VAR 0 5
43720: PPUSH
43721: LD_VAR 0 6
43725: PPUSH
43726: CALL_OW 488
43730: NOT
43731: IFFALSE 43735
// continue ;
43733: GO 43713
// if GetResourceTypeXY ( _x , _y ) then
43735: LD_VAR 0 5
43739: PPUSH
43740: LD_VAR 0 6
43744: PPUSH
43745: CALL_OW 283
43749: IFFALSE 43789
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43751: LD_ADDR_VAR 0 4
43755: PUSH
43756: LD_VAR 0 4
43760: PPUSH
43761: LD_VAR 0 4
43765: PUSH
43766: LD_INT 1
43768: PLUS
43769: PPUSH
43770: LD_VAR 0 5
43774: PUSH
43775: LD_VAR 0 6
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PPUSH
43784: CALL_OW 1
43788: ST_TO_ADDR
// end ;
43789: GO 43713
43791: POP
43792: POP
43793: GO 43693
43795: POP
43796: POP
// end ;
43797: LD_VAR 0 4
43801: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43802: LD_INT 0
43804: PPUSH
43805: PPUSH
43806: PPUSH
43807: PPUSH
43808: PPUSH
43809: PPUSH
43810: PPUSH
43811: PPUSH
// if not units then
43812: LD_VAR 0 1
43816: NOT
43817: IFFALSE 43821
// exit ;
43819: GO 44353
// result := UnitFilter ( units , [ f_ok ] ) ;
43821: LD_ADDR_VAR 0 3
43825: PUSH
43826: LD_VAR 0 1
43830: PPUSH
43831: LD_INT 50
43833: PUSH
43834: EMPTY
43835: LIST
43836: PPUSH
43837: CALL_OW 72
43841: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43842: LD_ADDR_VAR 0 8
43846: PUSH
43847: LD_VAR 0 1
43851: PUSH
43852: LD_INT 1
43854: ARRAY
43855: PPUSH
43856: CALL_OW 255
43860: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43861: LD_ADDR_VAR 0 10
43865: PUSH
43866: LD_INT 29
43868: PUSH
43869: LD_INT 91
43871: PUSH
43872: LD_INT 49
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: LIST
43879: ST_TO_ADDR
// if not result then
43880: LD_VAR 0 3
43884: NOT
43885: IFFALSE 43889
// exit ;
43887: GO 44353
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43889: LD_ADDR_VAR 0 5
43893: PUSH
43894: LD_INT 81
43896: PUSH
43897: LD_VAR 0 8
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PPUSH
43906: CALL_OW 69
43910: ST_TO_ADDR
// for i in result do
43911: LD_ADDR_VAR 0 4
43915: PUSH
43916: LD_VAR 0 3
43920: PUSH
43921: FOR_IN
43922: IFFALSE 44351
// begin tag := GetTag ( i ) + 1 ;
43924: LD_ADDR_VAR 0 9
43928: PUSH
43929: LD_VAR 0 4
43933: PPUSH
43934: CALL_OW 110
43938: PUSH
43939: LD_INT 1
43941: PLUS
43942: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43943: LD_ADDR_VAR 0 7
43947: PUSH
43948: LD_VAR 0 4
43952: PPUSH
43953: CALL_OW 250
43957: PPUSH
43958: LD_VAR 0 4
43962: PPUSH
43963: CALL_OW 251
43967: PPUSH
43968: LD_INT 4
43970: PPUSH
43971: CALL 43544 0 3
43975: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43976: LD_VAR 0 4
43980: PPUSH
43981: CALL_OW 247
43985: PUSH
43986: LD_INT 2
43988: EQUAL
43989: IFFALSE 44001
43991: PUSH
43992: LD_VAR 0 7
43996: PUSH
43997: LD_INT 2
43999: GREATER
44000: AND
44001: IFFALSE 44021
44003: PUSH
44004: LD_VAR 0 4
44008: PPUSH
44009: CALL_OW 264
44013: PUSH
44014: LD_VAR 0 10
44018: IN
44019: NOT
44020: AND
44021: IFFALSE 44060
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44023: LD_VAR 0 4
44027: PPUSH
44028: LD_VAR 0 7
44032: PUSH
44033: LD_INT 1
44035: ARRAY
44036: PUSH
44037: LD_INT 1
44039: ARRAY
44040: PPUSH
44041: LD_VAR 0 7
44045: PUSH
44046: LD_INT 1
44048: ARRAY
44049: PUSH
44050: LD_INT 2
44052: ARRAY
44053: PPUSH
44054: CALL_OW 116
44058: GO 44349
// if path > tag then
44060: LD_VAR 0 2
44064: PUSH
44065: LD_VAR 0 9
44069: GREATER
44070: IFFALSE 44278
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44072: LD_ADDR_VAR 0 6
44076: PUSH
44077: LD_VAR 0 5
44081: PPUSH
44082: LD_INT 91
44084: PUSH
44085: LD_VAR 0 4
44089: PUSH
44090: LD_INT 8
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: LIST
44097: PPUSH
44098: CALL_OW 72
44102: ST_TO_ADDR
// if nearEnemy then
44103: LD_VAR 0 6
44107: IFFALSE 44176
// begin if GetWeapon ( i ) = ru_time_lapser then
44109: LD_VAR 0 4
44113: PPUSH
44114: CALL_OW 264
44118: PUSH
44119: LD_INT 49
44121: EQUAL
44122: IFFALSE 44150
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44124: LD_VAR 0 4
44128: PPUSH
44129: LD_VAR 0 6
44133: PPUSH
44134: LD_VAR 0 4
44138: PPUSH
44139: CALL_OW 74
44143: PPUSH
44144: CALL_OW 112
44148: GO 44174
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44150: LD_VAR 0 4
44154: PPUSH
44155: LD_VAR 0 6
44159: PPUSH
44160: LD_VAR 0 4
44164: PPUSH
44165: CALL_OW 74
44169: PPUSH
44170: CALL 45434 0 2
// end else
44174: GO 44276
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44176: LD_VAR 0 4
44180: PPUSH
44181: LD_VAR 0 2
44185: PUSH
44186: LD_VAR 0 9
44190: ARRAY
44191: PUSH
44192: LD_INT 1
44194: ARRAY
44195: PPUSH
44196: LD_VAR 0 2
44200: PUSH
44201: LD_VAR 0 9
44205: ARRAY
44206: PUSH
44207: LD_INT 2
44209: ARRAY
44210: PPUSH
44211: CALL_OW 297
44215: PUSH
44216: LD_INT 6
44218: GREATER
44219: IFFALSE 44262
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44221: LD_VAR 0 4
44225: PPUSH
44226: LD_VAR 0 2
44230: PUSH
44231: LD_VAR 0 9
44235: ARRAY
44236: PUSH
44237: LD_INT 1
44239: ARRAY
44240: PPUSH
44241: LD_VAR 0 2
44245: PUSH
44246: LD_VAR 0 9
44250: ARRAY
44251: PUSH
44252: LD_INT 2
44254: ARRAY
44255: PPUSH
44256: CALL_OW 114
44260: GO 44276
// SetTag ( i , tag ) ;
44262: LD_VAR 0 4
44266: PPUSH
44267: LD_VAR 0 9
44271: PPUSH
44272: CALL_OW 109
// end else
44276: GO 44349
// if enemy then
44278: LD_VAR 0 5
44282: IFFALSE 44349
// begin if GetWeapon ( i ) = ru_time_lapser then
44284: LD_VAR 0 4
44288: PPUSH
44289: CALL_OW 264
44293: PUSH
44294: LD_INT 49
44296: EQUAL
44297: IFFALSE 44325
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44299: LD_VAR 0 4
44303: PPUSH
44304: LD_VAR 0 5
44308: PPUSH
44309: LD_VAR 0 4
44313: PPUSH
44314: CALL_OW 74
44318: PPUSH
44319: CALL_OW 112
44323: GO 44349
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44325: LD_VAR 0 4
44329: PPUSH
44330: LD_VAR 0 5
44334: PPUSH
44335: LD_VAR 0 4
44339: PPUSH
44340: CALL_OW 74
44344: PPUSH
44345: CALL 45434 0 2
// end ; end ;
44349: GO 43921
44351: POP
44352: POP
// end ;
44353: LD_VAR 0 3
44357: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44358: LD_INT 0
44360: PPUSH
44361: PPUSH
44362: PPUSH
// if not unit or IsInUnit ( unit ) then
44363: LD_VAR 0 1
44367: NOT
44368: IFTRUE 44381
44370: PUSH
44371: LD_VAR 0 1
44375: PPUSH
44376: CALL_OW 310
44380: OR
44381: IFFALSE 44385
// exit ;
44383: GO 44476
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44385: LD_ADDR_VAR 0 4
44389: PUSH
44390: LD_VAR 0 1
44394: PPUSH
44395: CALL_OW 250
44399: PPUSH
44400: LD_VAR 0 2
44404: PPUSH
44405: LD_INT 1
44407: PPUSH
44408: CALL_OW 272
44412: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44413: LD_ADDR_VAR 0 5
44417: PUSH
44418: LD_VAR 0 1
44422: PPUSH
44423: CALL_OW 251
44427: PPUSH
44428: LD_VAR 0 2
44432: PPUSH
44433: LD_INT 1
44435: PPUSH
44436: CALL_OW 273
44440: ST_TO_ADDR
// if ValidHex ( x , y ) then
44441: LD_VAR 0 4
44445: PPUSH
44446: LD_VAR 0 5
44450: PPUSH
44451: CALL_OW 488
44455: IFFALSE 44476
// ComTurnXY ( unit , x , y ) ;
44457: LD_VAR 0 1
44461: PPUSH
44462: LD_VAR 0 4
44466: PPUSH
44467: LD_VAR 0 5
44471: PPUSH
44472: CALL_OW 118
// end ;
44476: LD_VAR 0 3
44480: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44481: LD_INT 0
44483: PPUSH
44484: PPUSH
// result := false ;
44485: LD_ADDR_VAR 0 3
44489: PUSH
44490: LD_INT 0
44492: ST_TO_ADDR
// if not units then
44493: LD_VAR 0 2
44497: NOT
44498: IFFALSE 44502
// exit ;
44500: GO 44547
// for i in units do
44502: LD_ADDR_VAR 0 4
44506: PUSH
44507: LD_VAR 0 2
44511: PUSH
44512: FOR_IN
44513: IFFALSE 44545
// if See ( side , i ) then
44515: LD_VAR 0 1
44519: PPUSH
44520: LD_VAR 0 4
44524: PPUSH
44525: CALL_OW 292
44529: IFFALSE 44543
// begin result := true ;
44531: LD_ADDR_VAR 0 3
44535: PUSH
44536: LD_INT 1
44538: ST_TO_ADDR
// exit ;
44539: POP
44540: POP
44541: GO 44547
// end ;
44543: GO 44512
44545: POP
44546: POP
// end ;
44547: LD_VAR 0 3
44551: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44552: LD_INT 0
44554: PPUSH
44555: PPUSH
44556: PPUSH
44557: PPUSH
// if not unit or not points then
44558: LD_VAR 0 1
44562: NOT
44563: IFTRUE 44572
44565: PUSH
44566: LD_VAR 0 2
44570: NOT
44571: OR
44572: IFFALSE 44576
// exit ;
44574: GO 44666
// dist := 99999 ;
44576: LD_ADDR_VAR 0 5
44580: PUSH
44581: LD_INT 99999
44583: ST_TO_ADDR
// for i in points do
44584: LD_ADDR_VAR 0 4
44588: PUSH
44589: LD_VAR 0 2
44593: PUSH
44594: FOR_IN
44595: IFFALSE 44664
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44597: LD_ADDR_VAR 0 6
44601: PUSH
44602: LD_VAR 0 1
44606: PPUSH
44607: LD_VAR 0 4
44611: PUSH
44612: LD_INT 1
44614: ARRAY
44615: PPUSH
44616: LD_VAR 0 4
44620: PUSH
44621: LD_INT 2
44623: ARRAY
44624: PPUSH
44625: CALL_OW 297
44629: ST_TO_ADDR
// if tmpDist < dist then
44630: LD_VAR 0 6
44634: PUSH
44635: LD_VAR 0 5
44639: LESS
44640: IFFALSE 44662
// begin result := i ;
44642: LD_ADDR_VAR 0 3
44646: PUSH
44647: LD_VAR 0 4
44651: ST_TO_ADDR
// dist := tmpDist ;
44652: LD_ADDR_VAR 0 5
44656: PUSH
44657: LD_VAR 0 6
44661: ST_TO_ADDR
// end ; end ;
44662: GO 44594
44664: POP
44665: POP
// end ;
44666: LD_VAR 0 3
44670: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44671: LD_INT 0
44673: PPUSH
// uc_side := side ;
44674: LD_ADDR_OWVAR 20
44678: PUSH
44679: LD_VAR 0 1
44683: ST_TO_ADDR
// uc_nation := 3 ;
44684: LD_ADDR_OWVAR 21
44688: PUSH
44689: LD_INT 3
44691: ST_TO_ADDR
// vc_chassis := 25 ;
44692: LD_ADDR_OWVAR 37
44696: PUSH
44697: LD_INT 25
44699: ST_TO_ADDR
// vc_engine := engine_siberite ;
44700: LD_ADDR_OWVAR 39
44704: PUSH
44705: LD_INT 3
44707: ST_TO_ADDR
// vc_control := control_computer ;
44708: LD_ADDR_OWVAR 38
44712: PUSH
44713: LD_INT 3
44715: ST_TO_ADDR
// vc_weapon := 59 ;
44716: LD_ADDR_OWVAR 40
44720: PUSH
44721: LD_INT 59
44723: ST_TO_ADDR
// result := CreateVehicle ;
44724: LD_ADDR_VAR 0 5
44728: PUSH
44729: CALL_OW 45
44733: ST_TO_ADDR
// SetDir ( result , d ) ;
44734: LD_VAR 0 5
44738: PPUSH
44739: LD_VAR 0 4
44743: PPUSH
44744: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44748: LD_VAR 0 5
44752: PPUSH
44753: LD_VAR 0 2
44757: PPUSH
44758: LD_VAR 0 3
44762: PPUSH
44763: LD_INT 0
44765: PPUSH
44766: CALL_OW 48
// end ;
44770: LD_VAR 0 5
44774: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44775: LD_INT 0
44777: PPUSH
44778: PPUSH
44779: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44780: LD_ADDR_VAR 0 2
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44803: LD_VAR 0 1
44807: NOT
44808: IFTRUE 44841
44810: PUSH
44811: LD_VAR 0 1
44815: PPUSH
44816: CALL_OW 264
44820: PUSH
44821: LD_INT 12
44823: PUSH
44824: LD_INT 51
44826: PUSH
44827: LD_INT 32
44829: PUSH
44830: LD_INT 89
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: IN
44839: NOT
44840: OR
44841: IFFALSE 44845
// exit ;
44843: GO 44943
// for i := 1 to 3 do
44845: LD_ADDR_VAR 0 3
44849: PUSH
44850: DOUBLE
44851: LD_INT 1
44853: DEC
44854: ST_TO_ADDR
44855: LD_INT 3
44857: PUSH
44858: FOR_TO
44859: IFFALSE 44941
// begin tmp := GetCargo ( cargo , i ) ;
44861: LD_ADDR_VAR 0 4
44865: PUSH
44866: LD_VAR 0 1
44870: PPUSH
44871: LD_VAR 0 3
44875: PPUSH
44876: CALL_OW 289
44880: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44881: LD_ADDR_VAR 0 2
44885: PUSH
44886: LD_VAR 0 2
44890: PPUSH
44891: LD_VAR 0 3
44895: PPUSH
44896: LD_VAR 0 4
44900: PPUSH
44901: CALL_OW 1
44905: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44906: LD_ADDR_VAR 0 2
44910: PUSH
44911: LD_VAR 0 2
44915: PPUSH
44916: LD_INT 4
44918: PPUSH
44919: LD_VAR 0 2
44923: PUSH
44924: LD_INT 4
44926: ARRAY
44927: PUSH
44928: LD_VAR 0 4
44932: PLUS
44933: PPUSH
44934: CALL_OW 1
44938: ST_TO_ADDR
// end ;
44939: GO 44858
44941: POP
44942: POP
// end ;
44943: LD_VAR 0 2
44947: RET
// export function Length ( array ) ; begin
44948: LD_INT 0
44950: PPUSH
// result := array + 0 ;
44951: LD_ADDR_VAR 0 2
44955: PUSH
44956: LD_VAR 0 1
44960: PUSH
44961: LD_INT 0
44963: PLUS
44964: ST_TO_ADDR
// end ;
44965: LD_VAR 0 2
44969: RET
// export function PrepareArray ( array ) ; begin
44970: LD_INT 0
44972: PPUSH
// result := array diff 0 ;
44973: LD_ADDR_VAR 0 2
44977: PUSH
44978: LD_VAR 0 1
44982: PUSH
44983: LD_INT 0
44985: DIFF
44986: ST_TO_ADDR
// if not result [ 1 ] then
44987: LD_VAR 0 2
44991: PUSH
44992: LD_INT 1
44994: ARRAY
44995: NOT
44996: IFFALSE 45016
// result := Delete ( result , 1 ) ;
44998: LD_ADDR_VAR 0 2
45002: PUSH
45003: LD_VAR 0 2
45007: PPUSH
45008: LD_INT 1
45010: PPUSH
45011: CALL_OW 3
45015: ST_TO_ADDR
// end ;
45016: LD_VAR 0 2
45020: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45021: LD_INT 0
45023: PPUSH
45024: PPUSH
45025: PPUSH
45026: PPUSH
// sibRocketRange := 25 ;
45027: LD_ADDR_VAR 0 6
45031: PUSH
45032: LD_INT 25
45034: ST_TO_ADDR
// result := false ;
45035: LD_ADDR_VAR 0 4
45039: PUSH
45040: LD_INT 0
45042: ST_TO_ADDR
// for i := 0 to 5 do
45043: LD_ADDR_VAR 0 5
45047: PUSH
45048: DOUBLE
45049: LD_INT 0
45051: DEC
45052: ST_TO_ADDR
45053: LD_INT 5
45055: PUSH
45056: FOR_TO
45057: IFFALSE 45124
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45059: LD_VAR 0 1
45063: PPUSH
45064: LD_VAR 0 5
45068: PPUSH
45069: LD_VAR 0 6
45073: PPUSH
45074: CALL_OW 272
45078: PPUSH
45079: LD_VAR 0 2
45083: PPUSH
45084: LD_VAR 0 5
45088: PPUSH
45089: LD_VAR 0 6
45093: PPUSH
45094: CALL_OW 273
45098: PPUSH
45099: LD_VAR 0 3
45103: PPUSH
45104: CALL_OW 309
45108: IFFALSE 45122
// begin result := true ;
45110: LD_ADDR_VAR 0 4
45114: PUSH
45115: LD_INT 1
45117: ST_TO_ADDR
// exit ;
45118: POP
45119: POP
45120: GO 45126
// end ;
45122: GO 45056
45124: POP
45125: POP
// end ;
45126: LD_VAR 0 4
45130: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45131: LD_INT 0
45133: PPUSH
45134: PPUSH
45135: PPUSH
// if btype = b_depot then
45136: LD_VAR 0 2
45140: PUSH
45141: LD_INT 0
45143: EQUAL
45144: IFFALSE 45156
// begin result := true ;
45146: LD_ADDR_VAR 0 3
45150: PUSH
45151: LD_INT 1
45153: ST_TO_ADDR
// exit ;
45154: GO 45276
// end ; pom := GetBase ( depot ) ;
45156: LD_ADDR_VAR 0 4
45160: PUSH
45161: LD_VAR 0 1
45165: PPUSH
45166: CALL_OW 274
45170: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45171: LD_ADDR_VAR 0 5
45175: PUSH
45176: LD_VAR 0 2
45180: PPUSH
45181: LD_VAR 0 1
45185: PPUSH
45186: CALL_OW 248
45190: PPUSH
45191: CALL_OW 450
45195: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45196: LD_ADDR_VAR 0 3
45200: PUSH
45201: LD_VAR 0 4
45205: PPUSH
45206: LD_INT 1
45208: PPUSH
45209: CALL_OW 275
45213: PUSH
45214: LD_VAR 0 5
45218: PUSH
45219: LD_INT 1
45221: ARRAY
45222: GREATEREQUAL
45223: IFFALSE 45249
45225: PUSH
45226: LD_VAR 0 4
45230: PPUSH
45231: LD_INT 2
45233: PPUSH
45234: CALL_OW 275
45238: PUSH
45239: LD_VAR 0 5
45243: PUSH
45244: LD_INT 2
45246: ARRAY
45247: GREATEREQUAL
45248: AND
45249: IFFALSE 45275
45251: PUSH
45252: LD_VAR 0 4
45256: PPUSH
45257: LD_INT 3
45259: PPUSH
45260: CALL_OW 275
45264: PUSH
45265: LD_VAR 0 5
45269: PUSH
45270: LD_INT 3
45272: ARRAY
45273: GREATEREQUAL
45274: AND
45275: ST_TO_ADDR
// end ;
45276: LD_VAR 0 3
45280: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45281: LD_INT 0
45283: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45284: LD_VAR 0 1
45288: PPUSH
45289: LD_VAR 0 2
45293: PPUSH
45294: LD_INT 0
45296: PPUSH
45297: LD_INT 0
45299: PPUSH
45300: LD_INT 1
45302: PPUSH
45303: LD_INT 0
45305: PPUSH
45306: CALL_OW 587
// end ;
45310: LD_VAR 0 3
45314: RET
// export function CenterOnNow ( unit ) ; begin
45315: LD_INT 0
45317: PPUSH
// result := IsInUnit ( unit ) ;
45318: LD_ADDR_VAR 0 2
45322: PUSH
45323: LD_VAR 0 1
45327: PPUSH
45328: CALL_OW 310
45332: ST_TO_ADDR
// if not result then
45333: LD_VAR 0 2
45337: NOT
45338: IFFALSE 45350
// result := unit ;
45340: LD_ADDR_VAR 0 2
45344: PUSH
45345: LD_VAR 0 1
45349: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45350: LD_VAR 0 1
45354: PPUSH
45355: CALL_OW 87
// end ;
45359: LD_VAR 0 2
45363: RET
// export function ComMoveHex ( unit , hex ) ; begin
45364: LD_INT 0
45366: PPUSH
// if not hex then
45367: LD_VAR 0 2
45371: NOT
45372: IFFALSE 45376
// exit ;
45374: GO 45429
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45376: LD_VAR 0 2
45380: PUSH
45381: LD_INT 1
45383: ARRAY
45384: PPUSH
45385: LD_VAR 0 2
45389: PUSH
45390: LD_INT 2
45392: ARRAY
45393: PPUSH
45394: CALL_OW 428
45398: IFFALSE 45402
// exit ;
45400: GO 45429
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45402: LD_VAR 0 1
45406: PPUSH
45407: LD_VAR 0 2
45411: PUSH
45412: LD_INT 1
45414: ARRAY
45415: PPUSH
45416: LD_VAR 0 2
45420: PUSH
45421: LD_INT 2
45423: ARRAY
45424: PPUSH
45425: CALL_OW 111
// end ;
45429: LD_VAR 0 3
45433: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45434: LD_INT 0
45436: PPUSH
45437: PPUSH
45438: PPUSH
// if not unit or not enemy then
45439: LD_VAR 0 1
45443: NOT
45444: IFTRUE 45453
45446: PUSH
45447: LD_VAR 0 2
45451: NOT
45452: OR
45453: IFFALSE 45457
// exit ;
45455: GO 45583
// x := GetX ( enemy ) ;
45457: LD_ADDR_VAR 0 4
45461: PUSH
45462: LD_VAR 0 2
45466: PPUSH
45467: CALL_OW 250
45471: ST_TO_ADDR
// y := GetY ( enemy ) ;
45472: LD_ADDR_VAR 0 5
45476: PUSH
45477: LD_VAR 0 2
45481: PPUSH
45482: CALL_OW 251
45486: ST_TO_ADDR
// if ValidHex ( x , y ) then
45487: LD_VAR 0 4
45491: PPUSH
45492: LD_VAR 0 5
45496: PPUSH
45497: CALL_OW 488
45501: IFFALSE 45583
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45503: LD_VAR 0 2
45507: PPUSH
45508: CALL_OW 247
45512: PUSH
45513: LD_INT 3
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: IN
45523: IFTRUE 45546
45525: PUSH
45526: LD_VAR 0 1
45530: PPUSH
45531: CALL_OW 255
45535: PPUSH
45536: LD_VAR 0 2
45540: PPUSH
45541: CALL_OW 292
45545: OR
45546: IFFALSE 45564
// ComAttackUnit ( unit , enemy ) else
45548: LD_VAR 0 1
45552: PPUSH
45553: LD_VAR 0 2
45557: PPUSH
45558: CALL_OW 115
45562: GO 45583
// ComAgressiveMove ( unit , x , y ) ;
45564: LD_VAR 0 1
45568: PPUSH
45569: LD_VAR 0 4
45573: PPUSH
45574: LD_VAR 0 5
45578: PPUSH
45579: CALL_OW 114
// end ;
45583: LD_VAR 0 3
45587: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45588: LD_INT 0
45590: PPUSH
45591: PPUSH
45592: PPUSH
// list := AreaToList ( area , 0 ) ;
45593: LD_ADDR_VAR 0 5
45597: PUSH
45598: LD_VAR 0 1
45602: PPUSH
45603: LD_INT 0
45605: PPUSH
45606: CALL_OW 517
45610: ST_TO_ADDR
// if not list then
45611: LD_VAR 0 5
45615: NOT
45616: IFFALSE 45620
// exit ;
45618: GO 45750
// if all then
45620: LD_VAR 0 2
45624: IFFALSE 45712
// begin for i := 1 to list [ 1 ] do
45626: LD_ADDR_VAR 0 4
45630: PUSH
45631: DOUBLE
45632: LD_INT 1
45634: DEC
45635: ST_TO_ADDR
45636: LD_VAR 0 5
45640: PUSH
45641: LD_INT 1
45643: ARRAY
45644: PUSH
45645: FOR_TO
45646: IFFALSE 45708
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45648: LD_ADDR_VAR 0 3
45652: PUSH
45653: LD_VAR 0 3
45657: PPUSH
45658: LD_VAR 0 3
45662: PUSH
45663: LD_INT 1
45665: PLUS
45666: PPUSH
45667: LD_VAR 0 5
45671: PUSH
45672: LD_INT 1
45674: ARRAY
45675: PUSH
45676: LD_VAR 0 4
45680: ARRAY
45681: PUSH
45682: LD_VAR 0 5
45686: PUSH
45687: LD_INT 2
45689: ARRAY
45690: PUSH
45691: LD_VAR 0 4
45695: ARRAY
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PPUSH
45701: CALL_OW 1
45705: ST_TO_ADDR
45706: GO 45645
45708: POP
45709: POP
// exit ;
45710: GO 45750
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45712: LD_ADDR_VAR 0 3
45716: PUSH
45717: LD_VAR 0 5
45721: PUSH
45722: LD_INT 1
45724: ARRAY
45725: PUSH
45726: LD_INT 1
45728: ARRAY
45729: PUSH
45730: LD_VAR 0 5
45734: PUSH
45735: LD_INT 2
45737: ARRAY
45738: PUSH
45739: LD_INT 1
45741: ARRAY
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: EMPTY
45748: LIST
45749: ST_TO_ADDR
// end ;
45750: LD_VAR 0 3
45754: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45755: LD_INT 0
45757: PPUSH
45758: PPUSH
// list := AreaToList ( area , 0 ) ;
45759: LD_ADDR_VAR 0 4
45763: PUSH
45764: LD_VAR 0 1
45768: PPUSH
45769: LD_INT 0
45771: PPUSH
45772: CALL_OW 517
45776: ST_TO_ADDR
// if not list then
45777: LD_VAR 0 4
45781: NOT
45782: IFFALSE 45786
// exit ;
45784: GO 45827
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45786: LD_ADDR_VAR 0 3
45790: PUSH
45791: LD_VAR 0 4
45795: PUSH
45796: LD_INT 1
45798: ARRAY
45799: PUSH
45800: LD_INT 1
45802: ARRAY
45803: PUSH
45804: LD_VAR 0 4
45808: PUSH
45809: LD_INT 2
45811: ARRAY
45812: PUSH
45813: LD_INT 1
45815: ARRAY
45816: PUSH
45817: LD_VAR 0 2
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: LIST
45826: ST_TO_ADDR
// end ;
45827: LD_VAR 0 3
45831: RET
// export function First ( array ) ; begin
45832: LD_INT 0
45834: PPUSH
// if not array then
45835: LD_VAR 0 1
45839: NOT
45840: IFFALSE 45844
// exit ;
45842: GO 45858
// result := array [ 1 ] ;
45844: LD_ADDR_VAR 0 2
45848: PUSH
45849: LD_VAR 0 1
45853: PUSH
45854: LD_INT 1
45856: ARRAY
45857: ST_TO_ADDR
// end ;
45858: LD_VAR 0 2
45862: RET
// export function Last ( array ) ; begin
45863: LD_INT 0
45865: PPUSH
// if not array then
45866: LD_VAR 0 1
45870: NOT
45871: IFFALSE 45875
// exit ;
45873: GO 45891
// result := array [ array ] ;
45875: LD_ADDR_VAR 0 2
45879: PUSH
45880: LD_VAR 0 1
45884: PUSH
45885: LD_VAR 0 1
45889: ARRAY
45890: ST_TO_ADDR
// end ;
45891: LD_VAR 0 2
45895: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45896: LD_INT 0
45898: PPUSH
45899: PPUSH
// result := [ ] ;
45900: LD_ADDR_VAR 0 5
45904: PUSH
45905: EMPTY
45906: ST_TO_ADDR
// if not array then
45907: LD_VAR 0 1
45911: NOT
45912: IFFALSE 45916
// exit ;
45914: GO 46028
// for i := 1 to array do
45916: LD_ADDR_VAR 0 6
45920: PUSH
45921: DOUBLE
45922: LD_INT 1
45924: DEC
45925: ST_TO_ADDR
45926: LD_VAR 0 1
45930: PUSH
45931: FOR_TO
45932: IFFALSE 46026
// if array [ i ] [ index ] = value then
45934: LD_VAR 0 1
45938: PUSH
45939: LD_VAR 0 6
45943: ARRAY
45944: PUSH
45945: LD_VAR 0 2
45949: ARRAY
45950: PUSH
45951: LD_VAR 0 3
45955: EQUAL
45956: IFFALSE 46024
// begin if indexColumn then
45958: LD_VAR 0 4
45962: IFFALSE 45998
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45964: LD_ADDR_VAR 0 5
45968: PUSH
45969: LD_VAR 0 5
45973: PPUSH
45974: LD_VAR 0 1
45978: PUSH
45979: LD_VAR 0 6
45983: ARRAY
45984: PUSH
45985: LD_VAR 0 4
45989: ARRAY
45990: PPUSH
45991: CALL 41036 0 2
45995: ST_TO_ADDR
45996: GO 46024
// result := Join ( result , array [ i ] ) ;
45998: LD_ADDR_VAR 0 5
46002: PUSH
46003: LD_VAR 0 5
46007: PPUSH
46008: LD_VAR 0 1
46012: PUSH
46013: LD_VAR 0 6
46017: ARRAY
46018: PPUSH
46019: CALL 41036 0 2
46023: ST_TO_ADDR
// end ;
46024: GO 45931
46026: POP
46027: POP
// end ;
46028: LD_VAR 0 5
46032: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46033: LD_INT 0
46035: PPUSH
// if not vehicles or not parkingPoint then
46036: LD_VAR 0 1
46040: NOT
46041: IFTRUE 46050
46043: PUSH
46044: LD_VAR 0 2
46048: NOT
46049: OR
46050: IFFALSE 46054
// exit ;
46052: GO 46152
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46054: LD_ADDR_VAR 0 1
46058: PUSH
46059: LD_VAR 0 1
46063: PPUSH
46064: LD_INT 50
46066: PUSH
46067: EMPTY
46068: LIST
46069: PUSH
46070: LD_INT 3
46072: PUSH
46073: LD_INT 92
46075: PUSH
46076: LD_VAR 0 2
46080: PUSH
46081: LD_INT 1
46083: ARRAY
46084: PUSH
46085: LD_VAR 0 2
46089: PUSH
46090: LD_INT 2
46092: ARRAY
46093: PUSH
46094: LD_INT 8
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PPUSH
46111: CALL_OW 72
46115: ST_TO_ADDR
// if not vehicles then
46116: LD_VAR 0 1
46120: NOT
46121: IFFALSE 46125
// exit ;
46123: GO 46152
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46125: LD_VAR 0 1
46129: PPUSH
46130: LD_VAR 0 2
46134: PUSH
46135: LD_INT 1
46137: ARRAY
46138: PPUSH
46139: LD_VAR 0 2
46143: PUSH
46144: LD_INT 2
46146: ARRAY
46147: PPUSH
46148: CALL_OW 111
// end ;
46152: LD_VAR 0 3
46156: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46157: LD_INT 0
46159: PPUSH
46160: PPUSH
46161: PPUSH
// if not side or not area then
46162: LD_VAR 0 1
46166: NOT
46167: IFTRUE 46176
46169: PUSH
46170: LD_VAR 0 2
46174: NOT
46175: OR
46176: IFFALSE 46180
// exit ;
46178: GO 46299
// tmp := AreaToList ( area , 0 ) ;
46180: LD_ADDR_VAR 0 5
46184: PUSH
46185: LD_VAR 0 2
46189: PPUSH
46190: LD_INT 0
46192: PPUSH
46193: CALL_OW 517
46197: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46198: LD_ADDR_VAR 0 4
46202: PUSH
46203: DOUBLE
46204: LD_INT 1
46206: DEC
46207: ST_TO_ADDR
46208: LD_VAR 0 5
46212: PUSH
46213: LD_INT 1
46215: ARRAY
46216: PUSH
46217: FOR_TO
46218: IFFALSE 46297
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46220: LD_VAR 0 5
46224: PUSH
46225: LD_INT 1
46227: ARRAY
46228: PUSH
46229: LD_VAR 0 4
46233: ARRAY
46234: PPUSH
46235: LD_VAR 0 5
46239: PUSH
46240: LD_INT 2
46242: ARRAY
46243: PUSH
46244: LD_VAR 0 4
46248: ARRAY
46249: PPUSH
46250: CALL_OW 351
46254: IFFALSE 46295
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46256: LD_VAR 0 5
46260: PUSH
46261: LD_INT 1
46263: ARRAY
46264: PUSH
46265: LD_VAR 0 4
46269: ARRAY
46270: PPUSH
46271: LD_VAR 0 5
46275: PUSH
46276: LD_INT 2
46278: ARRAY
46279: PUSH
46280: LD_VAR 0 4
46284: ARRAY
46285: PPUSH
46286: LD_VAR 0 1
46290: PPUSH
46291: CALL_OW 244
// end ;
46295: GO 46217
46297: POP
46298: POP
// end ;
46299: LD_VAR 0 3
46303: RET
// export function UniqueArray ( array ) ; var i ; begin
46304: LD_INT 0
46306: PPUSH
46307: PPUSH
// result := [ ] ;
46308: LD_ADDR_VAR 0 2
46312: PUSH
46313: EMPTY
46314: ST_TO_ADDR
// if not array then
46315: LD_VAR 0 1
46319: NOT
46320: IFFALSE 46324
// exit ;
46322: GO 46385
// for i := 1 to array do
46324: LD_ADDR_VAR 0 3
46328: PUSH
46329: DOUBLE
46330: LD_INT 1
46332: DEC
46333: ST_TO_ADDR
46334: LD_VAR 0 1
46338: PUSH
46339: FOR_TO
46340: IFFALSE 46383
// if not array [ i ] in result then
46342: LD_VAR 0 1
46346: PUSH
46347: LD_VAR 0 3
46351: ARRAY
46352: PUSH
46353: LD_VAR 0 2
46357: IN
46358: NOT
46359: IFFALSE 46381
// result := Join ( result , i ) ;
46361: LD_ADDR_VAR 0 2
46365: PUSH
46366: LD_VAR 0 2
46370: PPUSH
46371: LD_VAR 0 3
46375: PPUSH
46376: CALL 41036 0 2
46380: ST_TO_ADDR
46381: GO 46339
46383: POP
46384: POP
// end ; end_of_file end_of_file
46385: LD_VAR 0 2
46389: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46390: LD_INT 0
46392: PPUSH
46393: PPUSH
// disable ( mpActive ) ;
46394: LD_INT 100
46396: DISABLE_MARKED
// disable ( mpWin ) ;
46397: LD_INT 101
46399: DISABLE_MARKED
// disable ( mpLose ) ;
46400: LD_INT 102
46402: DISABLE_MARKED
// mpGameType := 0 ;
46403: LD_ADDR_EXP 1
46407: PUSH
46408: LD_INT 0
46410: ST_TO_ADDR
// mpGameSettings := [ ] ;
46411: LD_ADDR_EXP 4
46415: PUSH
46416: EMPTY
46417: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46418: LD_ADDR_EXP 2
46422: PUSH
46423: EMPTY
46424: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46425: LD_ADDR_EXP 3
46429: PUSH
46430: EMPTY
46431: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46432: LD_ADDR_EXP 27
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46447: LD_ADDR_EXP 10
46451: PUSH
46452: EMPTY
46453: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46454: LD_ADDR_EXP 11
46458: PUSH
46459: EMPTY
46460: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46461: LD_ADDR_EXP 40
46465: PUSH
46466: EMPTY
46467: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46468: LD_ADDR_EXP 41
46472: PUSH
46473: EMPTY
46474: ST_TO_ADDR
// mpDepots := [ ] ;
46475: LD_ADDR_EXP 12
46479: PUSH
46480: EMPTY
46481: ST_TO_ADDR
// mpBuildings := [ ] ;
46482: LD_ADDR_EXP 15
46486: PUSH
46487: EMPTY
46488: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46489: LD_ADDR_EXP 16
46493: PUSH
46494: EMPTY
46495: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46496: LD_ADDR_EXP 17
46500: PUSH
46501: EMPTY
46502: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46503: LD_ADDR_EXP 18
46507: PUSH
46508: EMPTY
46509: ST_TO_ADDR
// mpStartingResources := [ ] ;
46510: LD_ADDR_EXP 13
46514: PUSH
46515: EMPTY
46516: ST_TO_ADDR
// mpStartPos := [ ] ;
46517: LD_ADDR_EXP 19
46521: PUSH
46522: EMPTY
46523: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46524: LD_ADDR_EXP 20
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46533: LD_ADDR_EXP 21
46537: PUSH
46538: EMPTY
46539: ST_TO_ADDR
// mpApemans := [ ] ;
46540: LD_ADDR_EXP 28
46544: PUSH
46545: EMPTY
46546: ST_TO_ADDR
// mpApemansArea := [ ] ;
46547: LD_ADDR_EXP 29
46551: PUSH
46552: EMPTY
46553: ST_TO_ADDR
// mpRespawn := [ ] ;
46554: LD_ADDR_EXP 31
46558: PUSH
46559: EMPTY
46560: ST_TO_ADDR
// mpKingArea := 0 ;
46561: LD_ADDR_EXP 32
46565: PUSH
46566: LD_INT 0
46568: ST_TO_ADDR
// mpPoints := [ ] ;
46569: LD_ADDR_EXP 33
46573: PUSH
46574: EMPTY
46575: ST_TO_ADDR
// mpVehicles := 0 ;
46576: LD_ADDR_EXP 34
46580: PUSH
46581: LD_INT 0
46583: ST_TO_ADDR
// mpShipments := 0 ;
46584: LD_ADDR_EXP 25
46588: PUSH
46589: LD_INT 0
46591: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46592: LD_ADDR_EXP 38
46596: PUSH
46597: EMPTY
46598: PUSH
46599: EMPTY
46600: PUSH
46601: EMPTY
46602: PUSH
46603: EMPTY
46604: PUSH
46605: EMPTY
46606: PUSH
46607: EMPTY
46608: PUSH
46609: EMPTY
46610: PUSH
46611: EMPTY
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46623: LD_ADDR_EXP 30
46627: PUSH
46628: EMPTY
46629: PUSH
46630: EMPTY
46631: PUSH
46632: EMPTY
46633: PUSH
46634: EMPTY
46635: PUSH
46636: EMPTY
46637: PUSH
46638: EMPTY
46639: PUSH
46640: EMPTY
46641: PUSH
46642: EMPTY
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
46654: LD_ADDR_EXP 39
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: ST_TO_ADDR
// mpEmissions := 0 ;
46693: LD_ADDR_EXP 35
46697: PUSH
46698: LD_INT 0
46700: ST_TO_ADDR
// mpTeleports := 0 ;
46701: LD_ADDR_EXP 42
46705: PUSH
46706: LD_INT 0
46708: ST_TO_ADDR
// mpArtifacts := 0 ;
46709: LD_ADDR_EXP 43
46713: PUSH
46714: LD_INT 0
46716: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
46717: LD_ADDR_EXP 44
46721: PUSH
46722: LD_INT 0
46724: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46725: LD_ADDR_EXP 23
46729: PUSH
46730: LD_INT 3
46732: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46733: LD_ADDR_EXP 22
46737: PUSH
46738: LD_INT 15
46740: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46741: LD_ADDR_EXP 36
46745: PUSH
46746: LD_INT 0
46748: ST_TO_ADDR
// mpGameActive := false ;
46749: LD_ADDR_EXP 37
46753: PUSH
46754: LD_INT 0
46756: ST_TO_ADDR
// mpBlockRespThread := false ;
46757: LD_ADDR_EXP 45
46761: PUSH
46762: LD_INT 0
46764: ST_TO_ADDR
// for i := 1 to 32 do
46765: LD_ADDR_VAR 0 2
46769: PUSH
46770: DOUBLE
46771: LD_INT 1
46773: DEC
46774: ST_TO_ADDR
46775: LD_INT 32
46777: PUSH
46778: FOR_TO
46779: IFFALSE 46806
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46781: LD_ADDR_EXP 4
46785: PUSH
46786: LD_EXP 4
46790: PPUSH
46791: LD_VAR 0 2
46795: PPUSH
46796: LD_INT 0
46798: PPUSH
46799: CALL_OW 1
46803: ST_TO_ADDR
46804: GO 46778
46806: POP
46807: POP
// end ;
46808: LD_VAR 0 1
46812: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46813: LD_INT 0
46815: PPUSH
46816: PPUSH
46817: PPUSH
46818: PPUSH
46819: PPUSH
46820: PPUSH
46821: PPUSH
46822: PPUSH
46823: PPUSH
46824: PPUSH
46825: PPUSH
46826: PPUSH
46827: PPUSH
46828: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
46829: LD_ADDR_VAR 0 14
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: LD_INT 3
46842: PUSH
46843: LD_INT 5
46845: PUSH
46846: LD_INT 6
46848: PUSH
46849: LD_INT 7
46851: PUSH
46852: LD_INT 8
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: ST_TO_ADDR
// for i in gameTypes do
46864: LD_ADDR_VAR 0 2
46868: PUSH
46869: LD_VAR 0 14
46873: PUSH
46874: FOR_IN
46875: IFFALSE 46884
// disable ( i ) ;
46877: LD_VAR 0 2
46881: DISABLE_MARKED
46882: GO 46874
46884: POP
46885: POP
// if Multiplayer then
46886: LD_OWVAR 4
46890: IFFALSE 47074
// begin mpGameType := mp_game_type ;
46892: LD_ADDR_EXP 1
46896: PUSH
46897: LD_OWVAR 6
46901: ST_TO_ADDR
// your_side := mp_player_side ;
46902: LD_ADDR_OWVAR 2
46906: PUSH
46907: LD_OWVAR 7
46911: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46912: LD_ADDR_EXP 5
46916: PUSH
46917: LD_OWVAR 17
46921: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46922: LD_ADDR_EXP 6
46926: PUSH
46927: LD_OWVAR 15
46931: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46932: LD_ADDR_EXP 7
46936: PUSH
46937: LD_OWVAR 16
46941: ST_TO_ADDR
// mpTeams := mp_teams ;
46942: LD_ADDR_EXP 8
46946: PUSH
46947: LD_OWVAR 12
46951: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46952: LD_ADDR_VAR 0 2
46956: PUSH
46957: DOUBLE
46958: LD_INT 1
46960: DEC
46961: ST_TO_ADDR
46962: LD_EXP 2
46966: PPUSH
46967: CALL 5060 0 1
46971: PUSH
46972: FOR_TO
46973: IFFALSE 47049
// begin setting := mpGameSettingsKeys [ i ] ;
46975: LD_ADDR_VAR 0 12
46979: PUSH
46980: LD_EXP 2
46984: PUSH
46985: LD_VAR 0 2
46989: ARRAY
46990: ST_TO_ADDR
// if setting then
46991: LD_VAR 0 12
46995: IFFALSE 47047
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46997: LD_ADDR_EXP 4
47001: PUSH
47002: LD_EXP 4
47006: PPUSH
47007: LD_VAR 0 2
47011: PPUSH
47012: LD_EXP 3
47016: PUSH
47017: LD_VAR 0 2
47021: ARRAY
47022: PUSH
47023: LD_VAR 0 2
47027: PUSH
47028: LD_INT 1
47030: MINUS
47031: PPUSH
47032: CALL_OW 426
47036: PUSH
47037: LD_INT 1
47039: PLUS
47040: ARRAY
47041: PPUSH
47042: CALL_OW 1
47046: ST_TO_ADDR
// end ;
47047: GO 46972
47049: POP
47050: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47051: LD_ADDR_EXP 9
47055: PUSH
47056: LD_EXP 6
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: DIFF
47067: PUSH
47068: LD_INT 1
47070: GREATER
47071: ST_TO_ADDR
// end else
47072: GO 47074
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47074: LD_EXP 1
47078: PPUSH
47079: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
47083: LD_EXP 16
47087: PPUSH
47088: CALL 5060 0 1
47092: IFFALSE 47123
// begin for i in mpMarkedAreas do
47094: LD_ADDR_VAR 0 2
47098: PUSH
47099: LD_EXP 16
47103: PUSH
47104: FOR_IN
47105: IFFALSE 47121
// SetAreaMapShow ( i , 0 ) ;
47107: LD_VAR 0 2
47111: PPUSH
47112: LD_INT 0
47114: PPUSH
47115: CALL_OW 424
47119: GO 47104
47121: POP
47122: POP
// end ; for i := 1 to 8 do
47123: LD_ADDR_VAR 0 2
47127: PUSH
47128: DOUBLE
47129: LD_INT 1
47131: DEC
47132: ST_TO_ADDR
47133: LD_INT 8
47135: PUSH
47136: FOR_TO
47137: IFFALSE 48596
// begin if not mpSidePositions [ i ] then
47139: LD_EXP 5
47143: PUSH
47144: LD_VAR 0 2
47148: ARRAY
47149: NOT
47150: IFFALSE 47154
// continue ;
47152: GO 47136
// side := i ;
47154: LD_ADDR_VAR 0 7
47158: PUSH
47159: LD_VAR 0 2
47163: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47164: LD_ADDR_VAR 0 9
47168: PUSH
47169: LD_EXP 7
47173: PUSH
47174: LD_VAR 0 2
47178: ARRAY
47179: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47180: LD_ADDR_VAR 0 8
47184: PUSH
47185: LD_EXP 5
47189: PUSH
47190: LD_VAR 0 2
47194: ARRAY
47195: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47196: LD_EXP 10
47200: PPUSH
47201: CALL 5060 0 1
47205: IFFALSE 47282
// begin for j in mpOilDeposits [ pos ] do
47207: LD_ADDR_VAR 0 3
47211: PUSH
47212: LD_EXP 10
47216: PUSH
47217: LD_VAR 0 8
47221: ARRAY
47222: PUSH
47223: FOR_IN
47224: IFFALSE 47280
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47226: LD_VAR 0 3
47230: PUSH
47231: LD_INT 1
47233: ARRAY
47234: PPUSH
47235: LD_VAR 0 3
47239: PUSH
47240: LD_INT 2
47242: ARRAY
47243: PPUSH
47244: LD_INT 2
47246: PPUSH
47247: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47251: LD_VAR 0 3
47255: PUSH
47256: LD_INT 1
47258: ARRAY
47259: PPUSH
47260: LD_VAR 0 3
47264: PUSH
47265: LD_INT 2
47267: ARRAY
47268: PPUSH
47269: LD_VAR 0 7
47273: PPUSH
47274: CALL_OW 441
// end ;
47278: GO 47223
47280: POP
47281: POP
// end ; if Count ( mpSibDeposits ) then
47282: LD_EXP 11
47286: PPUSH
47287: CALL 5060 0 1
47291: IFFALSE 47368
// begin for j in mpSibDeposits [ pos ] do
47293: LD_ADDR_VAR 0 3
47297: PUSH
47298: LD_EXP 11
47302: PUSH
47303: LD_VAR 0 8
47307: ARRAY
47308: PUSH
47309: FOR_IN
47310: IFFALSE 47366
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47312: LD_VAR 0 3
47316: PUSH
47317: LD_INT 1
47319: ARRAY
47320: PPUSH
47321: LD_VAR 0 3
47325: PUSH
47326: LD_INT 2
47328: ARRAY
47329: PPUSH
47330: LD_INT 3
47332: PPUSH
47333: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47337: LD_VAR 0 3
47341: PUSH
47342: LD_INT 1
47344: ARRAY
47345: PPUSH
47346: LD_VAR 0 3
47350: PUSH
47351: LD_INT 2
47353: ARRAY
47354: PPUSH
47355: LD_VAR 0 7
47359: PPUSH
47360: CALL_OW 441
// end ;
47364: GO 47309
47366: POP
47367: POP
// end ; InitBc ;
47368: CALL_OW 21
// InitUc ;
47372: CALL_OW 18
// uc_side := side ;
47376: LD_ADDR_OWVAR 20
47380: PUSH
47381: LD_VAR 0 7
47385: ST_TO_ADDR
// uc_nation := nation ;
47386: LD_ADDR_OWVAR 21
47390: PUSH
47391: LD_VAR 0 9
47395: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47396: LD_EXP 20
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: GREATER
47405: IFFALSE 47564
// begin x := mpStartPos [ pos ] [ 1 ] ;
47407: LD_ADDR_VAR 0 5
47411: PUSH
47412: LD_EXP 19
47416: PUSH
47417: LD_VAR 0 8
47421: ARRAY
47422: PUSH
47423: LD_INT 1
47425: ARRAY
47426: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47427: LD_ADDR_VAR 0 6
47431: PUSH
47432: LD_EXP 19
47436: PUSH
47437: LD_VAR 0 8
47441: ARRAY
47442: PUSH
47443: LD_INT 2
47445: ARRAY
47446: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47447: LD_VAR 0 5
47451: PPUSH
47452: LD_VAR 0 6
47456: PPUSH
47457: LD_INT 12
47459: PPUSH
47460: LD_INT 2
47462: PPUSH
47463: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47467: LD_ADDR_EXP 21
47471: PUSH
47472: LD_EXP 21
47476: PPUSH
47477: LD_VAR 0 7
47481: PPUSH
47482: LD_VAR 0 7
47486: PPUSH
47487: LD_VAR 0 5
47491: PPUSH
47492: LD_VAR 0 6
47496: PPUSH
47497: LD_INT 1
47499: PUSH
47500: LD_INT 100
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: LD_INT 70
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 3
47519: PUSH
47520: LD_INT 40
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 10
47529: PUSH
47530: LD_INT 25
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 20
47539: PUSH
47540: LD_INT 100
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: PPUSH
47554: CALL_OW 418
47558: PPUSH
47559: CALL_OW 1
47563: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47564: LD_EXP 12
47568: PPUSH
47569: CALL 5060 0 1
47573: IFFALSE 47772
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
47575: LD_EXP 1
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: LD_INT 8
47585: PUSH
47586: LD_INT 6
47588: PUSH
47589: LD_INT 7
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: IN
47598: IFFALSE 47618
// begin bc_level := 10 ;
47600: LD_ADDR_OWVAR 43
47604: PUSH
47605: LD_INT 10
47607: ST_TO_ADDR
// bc_type := b_warehouse ;
47608: LD_ADDR_OWVAR 42
47612: PUSH
47613: LD_INT 1
47615: ST_TO_ADDR
// end else
47616: GO 47634
// begin bc_level := 0 ;
47618: LD_ADDR_OWVAR 43
47622: PUSH
47623: LD_INT 0
47625: ST_TO_ADDR
// bc_type := b_depot ;
47626: LD_ADDR_OWVAR 42
47630: PUSH
47631: LD_INT 0
47633: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47634: LD_ADDR_VAR 0 4
47638: PUSH
47639: LD_EXP 12
47643: PUSH
47644: LD_VAR 0 8
47648: ARRAY
47649: PUSH
47650: LD_INT 1
47652: ARRAY
47653: PPUSH
47654: LD_EXP 12
47658: PUSH
47659: LD_VAR 0 8
47663: ARRAY
47664: PUSH
47665: LD_INT 2
47667: ARRAY
47668: PPUSH
47669: LD_EXP 12
47673: PUSH
47674: LD_VAR 0 8
47678: ARRAY
47679: PUSH
47680: LD_INT 3
47682: ARRAY
47683: PPUSH
47684: CALL_OW 47
47688: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47689: LD_VAR 0 4
47693: PPUSH
47694: LD_STRING @
47696: PUSH
47697: LD_VAR 0 7
47701: STR
47702: PPUSH
47703: CALL_OW 500
// if Count ( mpStartingResources ) then
47707: LD_EXP 13
47711: PPUSH
47712: CALL 5060 0 1
47716: IFFALSE 47770
// begin for j := 1 to mpStartingResources do
47718: LD_ADDR_VAR 0 3
47722: PUSH
47723: DOUBLE
47724: LD_INT 1
47726: DEC
47727: ST_TO_ADDR
47728: LD_EXP 13
47732: PUSH
47733: FOR_TO
47734: IFFALSE 47768
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47736: LD_VAR 0 4
47740: PPUSH
47741: CALL_OW 274
47745: PPUSH
47746: LD_VAR 0 3
47750: PPUSH
47751: LD_EXP 13
47755: PUSH
47756: LD_VAR 0 3
47760: ARRAY
47761: PPUSH
47762: CALL_OW 277
47766: GO 47733
47768: POP
47769: POP
// end ; end else
47770: GO 47979
// if Count ( mpStartingResources ) then
47772: LD_EXP 13
47776: PPUSH
47777: CALL 5060 0 1
47781: IFFALSE 47979
// begin x := mpStartPos [ pos ] [ 1 ] ;
47783: LD_ADDR_VAR 0 5
47787: PUSH
47788: LD_EXP 19
47792: PUSH
47793: LD_VAR 0 8
47797: ARRAY
47798: PUSH
47799: LD_INT 1
47801: ARRAY
47802: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47803: LD_ADDR_VAR 0 6
47807: PUSH
47808: LD_EXP 19
47812: PUSH
47813: LD_VAR 0 8
47817: ARRAY
47818: PUSH
47819: LD_INT 2
47821: ARRAY
47822: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47823: LD_ADDR_VAR 0 3
47827: PUSH
47828: DOUBLE
47829: LD_INT 1
47831: DEC
47832: ST_TO_ADDR
47833: LD_EXP 13
47837: PUSH
47838: FOR_TO
47839: IFFALSE 47977
// begin resources := mpStartingResources [ j ] ;
47841: LD_ADDR_VAR 0 13
47845: PUSH
47846: LD_EXP 13
47850: PUSH
47851: LD_VAR 0 3
47855: ARRAY
47856: ST_TO_ADDR
// if resources = 0 then
47857: LD_VAR 0 13
47861: PUSH
47862: LD_INT 0
47864: EQUAL
47865: IFFALSE 47869
// continue ;
47867: GO 47838
// repeat if resources >= 50 then
47869: LD_VAR 0 13
47873: PUSH
47874: LD_INT 50
47876: GREATEREQUAL
47877: IFFALSE 47923
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
47879: LD_VAR 0 3
47883: PPUSH
47884: LD_INT 5
47886: PPUSH
47887: LD_VAR 0 5
47891: PPUSH
47892: LD_VAR 0 6
47896: PPUSH
47897: LD_INT 6
47899: PPUSH
47900: LD_INT 0
47902: PPUSH
47903: CALL_OW 60
// resources := resources - 50 ;
47907: LD_ADDR_VAR 0 13
47911: PUSH
47912: LD_VAR 0 13
47916: PUSH
47917: LD_INT 50
47919: MINUS
47920: ST_TO_ADDR
// end else
47921: GO 47965
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
47923: LD_VAR 0 3
47927: PPUSH
47928: LD_VAR 0 13
47932: PUSH
47933: LD_INT 10
47935: DIV
47936: PPUSH
47937: LD_VAR 0 5
47941: PPUSH
47942: LD_VAR 0 6
47946: PPUSH
47947: LD_INT 6
47949: PPUSH
47950: LD_INT 0
47952: PPUSH
47953: CALL_OW 60
// resources := 0 ;
47957: LD_ADDR_VAR 0 13
47961: PUSH
47962: LD_INT 0
47964: ST_TO_ADDR
// end ; until resources <= 0 ;
47965: LD_VAR 0 13
47969: PUSH
47970: LD_INT 0
47972: LESSEQUAL
47973: IFFALSE 47869
// end ;
47975: GO 47838
47977: POP
47978: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
47979: LD_EXP 15
47983: PPUSH
47984: CALL 5060 0 1
47988: IFFALSE 48008
47990: PUSH
47991: LD_EXP 1
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: LD_INT 8
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: IN
48006: NOT
48007: AND
48008: IFFALSE 48086
// begin for j in mpBuildings [ pos ] do
48010: LD_ADDR_VAR 0 3
48014: PUSH
48015: LD_EXP 15
48019: PUSH
48020: LD_VAR 0 8
48024: ARRAY
48025: PUSH
48026: FOR_IN
48027: IFFALSE 48084
// begin bc_level := 0 ;
48029: LD_ADDR_OWVAR 43
48033: PUSH
48034: LD_INT 0
48036: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48037: LD_ADDR_OWVAR 42
48041: PUSH
48042: LD_VAR 0 3
48046: PUSH
48047: LD_INT 1
48049: ARRAY
48050: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48051: LD_VAR 0 3
48055: PUSH
48056: LD_INT 2
48058: ARRAY
48059: PPUSH
48060: LD_VAR 0 3
48064: PUSH
48065: LD_INT 3
48067: ARRAY
48068: PPUSH
48069: LD_VAR 0 3
48073: PUSH
48074: LD_INT 4
48076: ARRAY
48077: PPUSH
48078: CALL_OW 47
// end ;
48082: GO 48026
48084: POP
48085: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48086: LD_EXP 24
48090: IFFALSE 48110
48092: PUSH
48093: LD_INT 20
48095: PPUSH
48096: LD_VAR 0 7
48100: PPUSH
48101: CALL_OW 321
48105: PUSH
48106: LD_INT 1
48108: EQUAL
48109: AND
48110: IFFALSE 48127
// SetTech ( tech_SibDet , side , state_researched ) ;
48112: LD_INT 20
48114: PPUSH
48115: LD_VAR 0 7
48119: PPUSH
48120: LD_INT 2
48122: PPUSH
48123: CALL_OW 322
// if not mpArtifacts then
48127: LD_EXP 43
48131: NOT
48132: IFFALSE 48149
// SetTech ( tech_artifact , side , state_disabled ) ;
48134: LD_INT 24
48136: PPUSH
48137: LD_VAR 0 7
48141: PPUSH
48142: LD_INT 0
48144: PPUSH
48145: CALL_OW 322
// if mpSibBomb = 1 then
48149: LD_EXP 26
48153: PUSH
48154: LD_INT 1
48156: EQUAL
48157: IFFALSE 48176
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48159: LD_INT 25
48161: PPUSH
48162: LD_VAR 0 7
48166: PPUSH
48167: LD_INT 1
48169: PPUSH
48170: CALL_OW 322
// end else
48174: GO 48191
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48176: LD_INT 25
48178: PPUSH
48179: LD_VAR 0 7
48183: PPUSH
48184: LD_INT 0
48186: PPUSH
48187: CALL_OW 322
// end ; if mpVehicles then
48191: LD_EXP 34
48195: IFFALSE 48294
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48197: LD_ADDR_VAR 0 3
48201: PUSH
48202: LD_VAR 0 7
48206: PPUSH
48207: LD_VAR 0 9
48211: PPUSH
48212: LD_EXP 34
48216: PPUSH
48217: CALL 49553 0 3
48221: PUSH
48222: FOR_IN
48223: IFFALSE 48292
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48225: LD_VAR 0 3
48229: PPUSH
48230: LD_INT 0
48232: PPUSH
48233: LD_INT 5
48235: PPUSH
48236: CALL_OW 12
48240: PPUSH
48241: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48245: LD_VAR 0 3
48249: PPUSH
48250: LD_EXP 19
48254: PUSH
48255: LD_VAR 0 8
48259: ARRAY
48260: PUSH
48261: LD_INT 1
48263: ARRAY
48264: PPUSH
48265: LD_EXP 19
48269: PUSH
48270: LD_VAR 0 8
48274: ARRAY
48275: PUSH
48276: LD_INT 2
48278: ARRAY
48279: PPUSH
48280: LD_INT 12
48282: PPUSH
48283: LD_INT 0
48285: PPUSH
48286: CALL_OW 50
// end ;
48290: GO 48222
48292: POP
48293: POP
// end ; uc_nation := nation ;
48294: LD_ADDR_OWVAR 21
48298: PUSH
48299: LD_VAR 0 9
48303: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
48304: LD_EXP 1
48308: PUSH
48309: LD_INT 6
48311: PUSH
48312: LD_INT 7
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: IN
48319: IFFALSE 48344
48321: PUSH
48322: LD_EXP 5
48326: PUSH
48327: LD_VAR 0 2
48331: ARRAY
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: LD_INT 2
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: IN
48343: AND
48344: IFFALSE 48392
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
48346: LD_ADDR_VAR 0 11
48350: PUSH
48351: LD_VAR 0 7
48355: PPUSH
48356: LD_VAR 0 9
48360: PPUSH
48361: LD_EXP 22
48365: PUSH
48366: LD_EXP 22
48370: PUSH
48371: LD_INT 2
48373: DIV
48374: PLUS
48375: PPUSH
48376: LD_EXP 23
48380: PUSH
48381: LD_INT 1
48383: PLUS
48384: PPUSH
48385: CALL 49008 0 4
48389: ST_TO_ADDR
48390: GO 48422
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48392: LD_ADDR_VAR 0 11
48396: PUSH
48397: LD_VAR 0 7
48401: PPUSH
48402: LD_VAR 0 9
48406: PPUSH
48407: LD_EXP 22
48411: PPUSH
48412: LD_EXP 23
48416: PPUSH
48417: CALL 49008 0 4
48421: ST_TO_ADDR
// for j in team do
48422: LD_ADDR_VAR 0 3
48426: PUSH
48427: LD_VAR 0 11
48431: PUSH
48432: FOR_IN
48433: IFFALSE 48482
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48435: LD_VAR 0 3
48439: PPUSH
48440: LD_EXP 19
48444: PUSH
48445: LD_VAR 0 8
48449: ARRAY
48450: PUSH
48451: LD_INT 1
48453: ARRAY
48454: PPUSH
48455: LD_EXP 19
48459: PUSH
48460: LD_VAR 0 8
48464: ARRAY
48465: PUSH
48466: LD_INT 2
48468: ARRAY
48469: PPUSH
48470: LD_INT 12
48472: PPUSH
48473: LD_INT 0
48475: PPUSH
48476: CALL_OW 50
48480: GO 48432
48482: POP
48483: POP
// if mpApemans then
48484: LD_EXP 28
48488: IFFALSE 48594
// begin for j := 1 to mpApemans do
48490: LD_ADDR_VAR 0 3
48494: PUSH
48495: DOUBLE
48496: LD_INT 1
48498: DEC
48499: ST_TO_ADDR
48500: LD_EXP 28
48504: PUSH
48505: FOR_TO
48506: IFFALSE 48592
// begin PrepareApeman ( - 5 ) ;
48508: LD_INT 5
48510: NEG
48511: PPUSH
48512: CALL 37163 0 1
// ape := CreateHuman ;
48516: LD_ADDR_VAR 0 10
48520: PUSH
48521: CALL_OW 44
48525: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48526: LD_ADDR_EXP 30
48530: PUSH
48531: LD_EXP 30
48535: PPUSH
48536: LD_VAR 0 8
48540: PPUSH
48541: LD_EXP 30
48545: PUSH
48546: LD_VAR 0 8
48550: ARRAY
48551: PPUSH
48552: LD_VAR 0 10
48556: PPUSH
48557: CALL 41036 0 2
48561: PPUSH
48562: CALL_OW 1
48566: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48567: LD_VAR 0 10
48571: PPUSH
48572: LD_EXP 29
48576: PUSH
48577: LD_VAR 0 8
48581: ARRAY
48582: PPUSH
48583: LD_INT 0
48585: PPUSH
48586: CALL_OW 49
// end ;
48590: GO 48505
48592: POP
48593: POP
// end ; end ;
48594: GO 47136
48596: POP
48597: POP
// if not mpTeamGame then
48598: LD_EXP 9
48602: NOT
48603: IFFALSE 48701
// begin for i := 1 to 8 do
48605: LD_ADDR_VAR 0 2
48609: PUSH
48610: DOUBLE
48611: LD_INT 1
48613: DEC
48614: ST_TO_ADDR
48615: LD_INT 8
48617: PUSH
48618: FOR_TO
48619: IFFALSE 48697
// for j := 1 to 8 do
48621: LD_ADDR_VAR 0 3
48625: PUSH
48626: DOUBLE
48627: LD_INT 1
48629: DEC
48630: ST_TO_ADDR
48631: LD_INT 8
48633: PUSH
48634: FOR_TO
48635: IFFALSE 48693
// if i <> j then
48637: LD_VAR 0 2
48641: PUSH
48642: LD_VAR 0 3
48646: NONEQUAL
48647: IFFALSE 48671
// SetAttitude ( i , j , att_neutral , true ) else
48649: LD_VAR 0 2
48653: PPUSH
48654: LD_VAR 0 3
48658: PPUSH
48659: LD_INT 0
48661: PPUSH
48662: LD_INT 1
48664: PPUSH
48665: CALL_OW 80
48669: GO 48691
// SetAttitude ( i , j , att_friend , true ) ;
48671: LD_VAR 0 2
48675: PPUSH
48676: LD_VAR 0 3
48680: PPUSH
48681: LD_INT 1
48683: PPUSH
48684: LD_INT 1
48686: PPUSH
48687: CALL_OW 80
48691: GO 48634
48693: POP
48694: POP
48695: GO 48618
48697: POP
48698: POP
// end else
48699: GO 48876
// begin if mpSharedVision then
48701: LD_EXP 14
48705: IFFALSE 48770
// begin for i in mpTeams do
48707: LD_ADDR_VAR 0 2
48711: PUSH
48712: LD_EXP 8
48716: PUSH
48717: FOR_IN
48718: IFFALSE 48768
// for j := 2 to i do
48720: LD_ADDR_VAR 0 3
48724: PUSH
48725: DOUBLE
48726: LD_INT 2
48728: DEC
48729: ST_TO_ADDR
48730: LD_VAR 0 2
48734: PUSH
48735: FOR_TO
48736: IFFALSE 48764
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48738: LD_VAR 0 2
48742: PUSH
48743: LD_VAR 0 3
48747: ARRAY
48748: PPUSH
48749: LD_VAR 0 2
48753: PUSH
48754: LD_INT 1
48756: ARRAY
48757: PPUSH
48758: CALL_OW 343
48762: GO 48735
48764: POP
48765: POP
48766: GO 48717
48768: POP
48769: POP
// end ; for i := 1 to 8 do
48770: LD_ADDR_VAR 0 2
48774: PUSH
48775: DOUBLE
48776: LD_INT 1
48778: DEC
48779: ST_TO_ADDR
48780: LD_INT 8
48782: PUSH
48783: FOR_TO
48784: IFFALSE 48874
// for j := 1 to 8 do
48786: LD_ADDR_VAR 0 3
48790: PUSH
48791: DOUBLE
48792: LD_INT 1
48794: DEC
48795: ST_TO_ADDR
48796: LD_INT 8
48798: PUSH
48799: FOR_TO
48800: IFFALSE 48870
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48802: LD_EXP 6
48806: PUSH
48807: LD_VAR 0 2
48811: ARRAY
48812: PUSH
48813: LD_EXP 6
48817: PUSH
48818: LD_VAR 0 3
48822: ARRAY
48823: EQUAL
48824: IFFALSE 48848
// SetAttitude ( i , j , att_friend , true ) else
48826: LD_VAR 0 2
48830: PPUSH
48831: LD_VAR 0 3
48835: PPUSH
48836: LD_INT 1
48838: PPUSH
48839: LD_INT 1
48841: PPUSH
48842: CALL_OW 80
48846: GO 48868
// SetAttitude ( i , j , att_enemy , true ) ;
48848: LD_VAR 0 2
48852: PPUSH
48853: LD_VAR 0 3
48857: PPUSH
48858: LD_INT 2
48860: PPUSH
48861: LD_INT 1
48863: PPUSH
48864: CALL_OW 80
48868: GO 48799
48870: POP
48871: POP
48872: GO 48783
48874: POP
48875: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48876: LD_ADDR_OWVAR 71
48880: PUSH
48881: LD_EXP 7
48885: PUSH
48886: LD_OWVAR 2
48890: ARRAY
48891: ST_TO_ADDR
// if IAmSpec then
48892: CALL_OW 531
48896: IFFALSE 48937
// begin FogOff ( true ) ;
48898: LD_INT 1
48900: PPUSH
48901: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48905: LD_EXP 27
48909: PUSH
48910: LD_INT 1
48912: ARRAY
48913: PUSH
48914: LD_INT 2
48916: DIV
48917: PPUSH
48918: LD_EXP 27
48922: PUSH
48923: LD_INT 2
48925: ARRAY
48926: PUSH
48927: LD_INT 2
48929: DIV
48930: PPUSH
48931: CALL_OW 86
// end else
48935: GO 48983
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
48937: LD_EXP 19
48941: PUSH
48942: LD_EXP 5
48946: PUSH
48947: LD_OWVAR 2
48951: ARRAY
48952: ARRAY
48953: PUSH
48954: LD_INT 1
48956: ARRAY
48957: PPUSH
48958: LD_EXP 19
48962: PUSH
48963: LD_EXP 5
48967: PUSH
48968: LD_OWVAR 2
48972: ARRAY
48973: ARRAY
48974: PUSH
48975: LD_INT 2
48977: ARRAY
48978: PPUSH
48979: CALL_OW 86
// end ; BeginBuildUp ;
48983: CALL 50086 0 0
// enable ( mpActive ) ;
48987: LD_INT 100
48989: ENABLE_MARKED
// enable ( mpGameType ) ;
48990: LD_EXP 1
48994: ENABLE_MARKED
// mpGameActive := true ;
48995: LD_ADDR_EXP 37
48999: PUSH
49000: LD_INT 1
49002: ST_TO_ADDR
// end ;
49003: LD_VAR 0 1
49007: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
49008: LD_INT 0
49010: PPUSH
49011: PPUSH
49012: PPUSH
49013: PPUSH
49014: PPUSH
// result := [ ] ;
49015: LD_ADDR_VAR 0 5
49019: PUSH
49020: EMPTY
49021: ST_TO_ADDR
// class := class_soldier ;
49022: LD_ADDR_VAR 0 8
49026: PUSH
49027: LD_INT 1
49029: ST_TO_ADDR
// uc_side := side ;
49030: LD_ADDR_OWVAR 20
49034: PUSH
49035: LD_VAR 0 1
49039: ST_TO_ADDR
// uc_nation := nation ;
49040: LD_ADDR_OWVAR 21
49044: PUSH
49045: LD_VAR 0 2
49049: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49050: LD_ADDR_OWVAR 26
49054: PUSH
49055: LD_OWVAR 19
49059: PUSH
49060: LD_VAR 0 1
49064: ARRAY
49065: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49066: LD_INT 1
49068: PPUSH
49069: LD_INT 2
49071: PPUSH
49072: CALL_OW 12
49076: PPUSH
49077: LD_VAR 0 8
49081: PPUSH
49082: LD_VAR 0 4
49086: PUSH
49087: LD_INT 2
49089: PLUS
49090: PPUSH
49091: CALL_OW 380
// hc_importance := 105 ;
49095: LD_ADDR_OWVAR 32
49099: PUSH
49100: LD_INT 105
49102: ST_TO_ADDR
// if Multiplayer then
49103: LD_OWVAR 4
49107: IFFALSE 49147
// begin hc_gallery := MULTIAVATARS ;
49109: LD_ADDR_OWVAR 33
49113: PUSH
49114: LD_STRING MULTIAVATARS
49116: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49117: LD_ADDR_OWVAR 34
49121: PUSH
49122: LD_VAR 0 1
49126: PPUSH
49127: CALL_OW 525
49131: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49132: LD_ADDR_OWVAR 27
49136: PUSH
49137: LD_VAR 0 1
49141: PPUSH
49142: CALL_OW 526
49146: ST_TO_ADDR
// end ; commander := CreateHuman ;
49147: LD_ADDR_VAR 0 9
49151: PUSH
49152: CALL_OW 44
49156: ST_TO_ADDR
// result := Join ( result , commander ) ;
49157: LD_ADDR_VAR 0 5
49161: PUSH
49162: LD_VAR 0 5
49166: PPUSH
49167: LD_VAR 0 9
49171: PPUSH
49172: CALL 41036 0 2
49176: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
49177: LD_ADDR_EXP 39
49181: PUSH
49182: LD_EXP 39
49186: PPUSH
49187: LD_VAR 0 1
49191: PPUSH
49192: LD_VAR 0 9
49196: PPUSH
49197: CALL_OW 1
49201: ST_TO_ADDR
// if mpTeamPreset then
49202: LD_LOC 1
49206: IFFALSE 49302
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49208: LD_LOC 1
49212: PUSH
49213: LD_INT 1
49215: ARRAY
49216: PPUSH
49217: LD_VAR 0 5
49221: PUSH
49222: LD_VAR 0 5
49226: ARRAY
49227: PPUSH
49228: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49232: LD_VAR 0 5
49236: PUSH
49237: LD_VAR 0 5
49241: ARRAY
49242: PPUSH
49243: LD_INT 1
49245: PPUSH
49246: LD_LOC 1
49250: PUSH
49251: LD_INT 1
49253: ARRAY
49254: PPUSH
49255: LD_INT 1
49257: PPUSH
49258: CALL_OW 260
49262: PPUSH
49263: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49267: LD_VAR 0 5
49271: PUSH
49272: LD_VAR 0 5
49276: ARRAY
49277: PPUSH
49278: LD_INT 2
49280: PPUSH
49281: LD_LOC 1
49285: PUSH
49286: LD_INT 1
49288: ARRAY
49289: PPUSH
49290: LD_INT 2
49292: PPUSH
49293: CALL_OW 260
49297: PPUSH
49298: CALL_OW 239
// end ; InitHc_All ( ) ;
49302: CALL_OW 584
// class := 2 ;
49306: LD_ADDR_VAR 0 8
49310: PUSH
49311: LD_INT 2
49313: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49314: LD_ADDR_VAR 0 6
49318: PUSH
49319: DOUBLE
49320: LD_INT 1
49322: DEC
49323: ST_TO_ADDR
49324: LD_VAR 0 3
49328: PUSH
49329: LD_INT 1
49331: MINUS
49332: PUSH
49333: FOR_TO
49334: IFFALSE 49529
// begin PrepareHuman ( false , class , skill ) ;
49336: LD_INT 0
49338: PPUSH
49339: LD_VAR 0 8
49343: PPUSH
49344: LD_VAR 0 4
49348: PPUSH
49349: CALL_OW 380
// un := CreateHuman ;
49353: LD_ADDR_VAR 0 7
49357: PUSH
49358: CALL_OW 44
49362: ST_TO_ADDR
// result := Join ( result , un ) ;
49363: LD_ADDR_VAR 0 5
49367: PUSH
49368: LD_VAR 0 5
49372: PPUSH
49373: LD_VAR 0 7
49377: PPUSH
49378: CALL 41036 0 2
49382: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
49383: LD_LOC 1
49387: PPUSH
49388: CALL 5060 0 1
49392: PUSH
49393: LD_VAR 0 3
49397: GREATEREQUAL
49398: IFFALSE 49494
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49400: LD_LOC 1
49404: PUSH
49405: LD_VAR 0 6
49409: PUSH
49410: LD_INT 1
49412: PLUS
49413: ARRAY
49414: PPUSH
49415: LD_VAR 0 7
49419: PPUSH
49420: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49424: LD_VAR 0 7
49428: PPUSH
49429: LD_INT 1
49431: PPUSH
49432: LD_LOC 1
49436: PUSH
49437: LD_VAR 0 6
49441: PUSH
49442: LD_INT 1
49444: PLUS
49445: ARRAY
49446: PPUSH
49447: LD_INT 1
49449: PPUSH
49450: CALL_OW 260
49454: PPUSH
49455: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49459: LD_VAR 0 7
49463: PPUSH
49464: LD_INT 2
49466: PPUSH
49467: LD_LOC 1
49471: PUSH
49472: LD_VAR 0 6
49476: PUSH
49477: LD_INT 1
49479: PLUS
49480: ARRAY
49481: PPUSH
49482: LD_INT 2
49484: PPUSH
49485: CALL_OW 260
49489: PPUSH
49490: CALL_OW 239
// end ; class := Inc ( class ) ;
49494: LD_ADDR_VAR 0 8
49498: PUSH
49499: LD_VAR 0 8
49503: PPUSH
49504: CALL 42409 0 1
49508: ST_TO_ADDR
// if class = 5 then
49509: LD_VAR 0 8
49513: PUSH
49514: LD_INT 5
49516: EQUAL
49517: IFFALSE 49527
// class := 1 ;
49519: LD_ADDR_VAR 0 8
49523: PUSH
49524: LD_INT 1
49526: ST_TO_ADDR
// end ;
49527: GO 49333
49529: POP
49530: POP
// if not mpTeamPreset then
49531: LD_LOC 1
49535: NOT
49536: IFFALSE 49548
// mpTeamPreset := result ;
49538: LD_ADDR_LOC 1
49542: PUSH
49543: LD_VAR 0 5
49547: ST_TO_ADDR
// end ;
49548: LD_VAR 0 5
49552: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49553: LD_INT 0
49555: PPUSH
49556: PPUSH
// result := [ ] ;
49557: LD_ADDR_VAR 0 4
49561: PUSH
49562: EMPTY
49563: ST_TO_ADDR
// if not vehicles then
49564: LD_VAR 0 3
49568: NOT
49569: IFFALSE 49573
// exit ;
49571: GO 49787
// for i := 1 to vehicles [ nation ] do
49573: LD_ADDR_VAR 0 5
49577: PUSH
49578: DOUBLE
49579: LD_INT 1
49581: DEC
49582: ST_TO_ADDR
49583: LD_VAR 0 3
49587: PUSH
49588: LD_VAR 0 2
49592: ARRAY
49593: PUSH
49594: FOR_TO
49595: IFFALSE 49785
// begin uc_side := side ;
49597: LD_ADDR_OWVAR 20
49601: PUSH
49602: LD_VAR 0 1
49606: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49607: LD_VAR 0 3
49611: PUSH
49612: LD_VAR 0 2
49616: ARRAY
49617: PUSH
49618: LD_VAR 0 5
49622: ARRAY
49623: PPUSH
49624: CALL 5060 0 1
49628: PUSH
49629: LD_INT 4
49631: GREATER
49632: IFFALSE 49662
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49634: LD_ADDR_OWVAR 21
49638: PUSH
49639: LD_VAR 0 3
49643: PUSH
49644: LD_VAR 0 2
49648: ARRAY
49649: PUSH
49650: LD_VAR 0 5
49654: ARRAY
49655: PUSH
49656: LD_INT 5
49658: ARRAY
49659: ST_TO_ADDR
49660: GO 49672
// uc_nation := nation ;
49662: LD_ADDR_OWVAR 21
49666: PUSH
49667: LD_VAR 0 2
49671: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49672: LD_VAR 0 3
49676: PUSH
49677: LD_VAR 0 2
49681: ARRAY
49682: PUSH
49683: LD_VAR 0 5
49687: ARRAY
49688: PUSH
49689: LD_INT 1
49691: ARRAY
49692: PPUSH
49693: LD_VAR 0 3
49697: PUSH
49698: LD_VAR 0 2
49702: ARRAY
49703: PUSH
49704: LD_VAR 0 5
49708: ARRAY
49709: PUSH
49710: LD_INT 2
49712: ARRAY
49713: PPUSH
49714: LD_VAR 0 3
49718: PUSH
49719: LD_VAR 0 2
49723: ARRAY
49724: PUSH
49725: LD_VAR 0 5
49729: ARRAY
49730: PUSH
49731: LD_INT 3
49733: ARRAY
49734: PPUSH
49735: LD_VAR 0 3
49739: PUSH
49740: LD_VAR 0 2
49744: ARRAY
49745: PUSH
49746: LD_VAR 0 5
49750: ARRAY
49751: PUSH
49752: LD_INT 4
49754: ARRAY
49755: PPUSH
49756: LD_INT 80
49758: PPUSH
49759: CALL 7856 0 5
// result := Join ( result , CreateVehicle ) ;
49763: LD_ADDR_VAR 0 4
49767: PUSH
49768: LD_VAR 0 4
49772: PPUSH
49773: CALL_OW 45
49777: PPUSH
49778: CALL 41036 0 2
49782: ST_TO_ADDR
// end ;
49783: GO 49594
49785: POP
49786: POP
// end ;
49787: LD_VAR 0 4
49791: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49792: LD_INT 0
49794: PPUSH
49795: PPUSH
// for i in mpBattleFlags do
49796: LD_ADDR_VAR 0 3
49800: PUSH
49801: LD_EXP 21
49805: PUSH
49806: FOR_IN
49807: IFFALSE 49884
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49809: LD_VAR 0 3
49813: PPUSH
49814: LD_INT 1
49816: PUSH
49817: LD_VAR 0 1
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: LD_VAR 0 1
49833: PUSH
49834: LD_REAL  7.00000000000000E-0001
49837: MUL
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 3
49845: PUSH
49846: LD_VAR 0 1
49850: PUSH
49851: LD_REAL  4.00000000000000E-0001
49854: MUL
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 20
49862: PUSH
49863: LD_VAR 0 1
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: PPUSH
49878: CALL_OW 423
49882: GO 49806
49884: POP
49885: POP
// end ;
49886: LD_VAR 0 2
49890: RET
// every 0 0$1 trigger mpActive do var i , strength ;
49891: LD_INT 100
49893: IFFALSE 49988
49895: GO 49897
49897: DISABLE
49898: LD_INT 0
49900: PPUSH
49901: PPUSH
// begin if mpBattleFlag <= 0 then
49902: LD_EXP 20
49906: PUSH
49907: LD_INT 0
49909: LESSEQUAL
49910: IFFALSE 49914
// exit ;
49912: GO 49988
// strength := 100 ;
49914: LD_ADDR_VAR 0 2
49918: PUSH
49919: LD_INT 100
49921: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
49922: LD_EXP 20
49926: PPUSH
49927: CALL_OW 67
// strength := Dec ( strength ) ;
49931: LD_ADDR_VAR 0 2
49935: PUSH
49936: LD_VAR 0 2
49940: PPUSH
49941: CALL 42431 0 1
49945: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
49946: LD_VAR 0 2
49950: PPUSH
49951: CALL 49792 0 1
// until not strength ;
49955: LD_VAR 0 2
49959: NOT
49960: IFFALSE 49922
// for i in mpBattleFlags do
49962: LD_ADDR_VAR 0 1
49966: PUSH
49967: LD_EXP 21
49971: PUSH
49972: FOR_IN
49973: IFFALSE 49986
// KillBattleFlag ( i ) ;
49975: LD_VAR 0 1
49979: PPUSH
49980: CALL_OW 419
49984: GO 49972
49986: POP
49987: POP
// end ;
49988: PPOPN 2
49990: END
// every 0 0$1 marked mpActive do var side , tmp ;
49991: GO 49993
49993: DISABLE
49994: LD_INT 0
49996: PPUSH
49997: PPUSH
// begin if mpSibBomb <= 1 then
49998: LD_EXP 26
50002: PUSH
50003: LD_INT 1
50005: LESSEQUAL
50006: IFFALSE 50010
// exit ;
50008: GO 50083
// tmp := mpSibBomb ;
50010: LD_ADDR_VAR 0 2
50014: PUSH
50015: LD_EXP 26
50019: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50020: LD_INT 35
50022: PPUSH
50023: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50027: LD_ADDR_VAR 0 2
50031: PUSH
50032: LD_VAR 0 2
50036: PUSH
50037: LD_INT 35
50039: MINUS
50040: ST_TO_ADDR
// until not tmp ;
50041: LD_VAR 0 2
50045: NOT
50046: IFFALSE 50020
// for side := 1 to 8 do
50048: LD_ADDR_VAR 0 1
50052: PUSH
50053: DOUBLE
50054: LD_INT 1
50056: DEC
50057: ST_TO_ADDR
50058: LD_INT 8
50060: PUSH
50061: FOR_TO
50062: IFFALSE 50081
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50064: LD_INT 25
50066: PPUSH
50067: LD_VAR 0 1
50071: PPUSH
50072: LD_INT 1
50074: PPUSH
50075: CALL_OW 322
50079: GO 50061
50081: POP
50082: POP
// end ;
50083: PPOPN 2
50085: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50086: LD_INT 0
50088: PPUSH
50089: PPUSH
50090: PPUSH
// mpBuildUpTimeDelay := 0 ;
50091: LD_ADDR_EXP 46
50095: PUSH
50096: LD_INT 0
50098: ST_TO_ADDR
// if not mpBuildUpTime then
50099: LD_EXP 18
50103: NOT
50104: IFFALSE 50108
// exit ;
50106: GO 50297
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50108: LD_ADDR_EXP 46
50112: PUSH
50113: LD_INT 8400
50115: PUSH
50116: LD_INT 2100
50118: PUSH
50119: LD_EXP 18
50123: MUL
50124: PLUS
50125: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50126: LD_ADDR_EXP 47
50130: PUSH
50131: LD_INT 1
50133: ST_TO_ADDR
// for i := 1 to 8 do
50134: LD_ADDR_VAR 0 2
50138: PUSH
50139: DOUBLE
50140: LD_INT 1
50142: DEC
50143: ST_TO_ADDR
50144: LD_INT 8
50146: PUSH
50147: FOR_TO
50148: IFFALSE 50295
// if mpSidePositions [ i ] then
50150: LD_EXP 5
50154: PUSH
50155: LD_VAR 0 2
50159: ARRAY
50160: IFFALSE 50293
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50162: LD_EXP 17
50166: PUSH
50167: LD_EXP 5
50171: PUSH
50172: LD_VAR 0 2
50176: ARRAY
50177: ARRAY
50178: PPUSH
50179: LD_INT 5
50181: PPUSH
50182: CALL_OW 424
// for j := 1 to 8 do
50186: LD_ADDR_VAR 0 3
50190: PUSH
50191: DOUBLE
50192: LD_INT 1
50194: DEC
50195: ST_TO_ADDR
50196: LD_INT 8
50198: PUSH
50199: FOR_TO
50200: IFFALSE 50291
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50202: LD_EXP 5
50206: PUSH
50207: LD_VAR 0 3
50211: ARRAY
50212: IFFALSE 50261
50214: PUSH
50215: LD_EXP 6
50219: PUSH
50220: LD_VAR 0 2
50224: ARRAY
50225: PUSH
50226: LD_EXP 6
50230: PUSH
50231: LD_VAR 0 3
50235: ARRAY
50236: NONEQUAL
50237: IFTRUE 50260
50239: PUSH
50240: LD_EXP 9
50244: NOT
50245: IFFALSE 50259
50247: PUSH
50248: LD_VAR 0 2
50252: PUSH
50253: LD_VAR 0 3
50257: NONEQUAL
50258: AND
50259: OR
50260: AND
50261: IFFALSE 50289
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50263: LD_VAR 0 3
50267: PPUSH
50268: LD_EXP 17
50272: PUSH
50273: LD_EXP 5
50277: PUSH
50278: LD_VAR 0 2
50282: ARRAY
50283: ARRAY
50284: PPUSH
50285: CALL_OW 333
50289: GO 50199
50291: POP
50292: POP
// end ;
50293: GO 50147
50295: POP
50296: POP
// end ;
50297: LD_VAR 0 1
50301: RET
// function EndBuildUp ; var i , j ; begin
50302: LD_INT 0
50304: PPUSH
50305: PPUSH
50306: PPUSH
// mpBuildUpTimeActive := false ;
50307: LD_ADDR_EXP 47
50311: PUSH
50312: LD_INT 0
50314: ST_TO_ADDR
// for i := 1 to 8 do
50315: LD_ADDR_VAR 0 2
50319: PUSH
50320: DOUBLE
50321: LD_INT 1
50323: DEC
50324: ST_TO_ADDR
50325: LD_INT 8
50327: PUSH
50328: FOR_TO
50329: IFFALSE 50476
// if mpSidePositions [ i ] then
50331: LD_EXP 5
50335: PUSH
50336: LD_VAR 0 2
50340: ARRAY
50341: IFFALSE 50474
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50343: LD_EXP 17
50347: PUSH
50348: LD_EXP 5
50352: PUSH
50353: LD_VAR 0 2
50357: ARRAY
50358: ARRAY
50359: PPUSH
50360: LD_INT 0
50362: PPUSH
50363: CALL_OW 424
// for j := 1 to 8 do
50367: LD_ADDR_VAR 0 3
50371: PUSH
50372: DOUBLE
50373: LD_INT 1
50375: DEC
50376: ST_TO_ADDR
50377: LD_INT 8
50379: PUSH
50380: FOR_TO
50381: IFFALSE 50472
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50383: LD_EXP 5
50387: PUSH
50388: LD_VAR 0 3
50392: ARRAY
50393: IFFALSE 50442
50395: PUSH
50396: LD_EXP 6
50400: PUSH
50401: LD_VAR 0 2
50405: ARRAY
50406: PUSH
50407: LD_EXP 6
50411: PUSH
50412: LD_VAR 0 3
50416: ARRAY
50417: NONEQUAL
50418: IFTRUE 50441
50420: PUSH
50421: LD_EXP 9
50425: NOT
50426: IFFALSE 50440
50428: PUSH
50429: LD_VAR 0 2
50433: PUSH
50434: LD_VAR 0 3
50438: NONEQUAL
50439: AND
50440: OR
50441: AND
50442: IFFALSE 50470
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50444: LD_VAR 0 3
50448: PPUSH
50449: LD_EXP 17
50453: PUSH
50454: LD_EXP 5
50458: PUSH
50459: LD_VAR 0 2
50463: ARRAY
50464: ARRAY
50465: PPUSH
50466: CALL_OW 334
50470: GO 50380
50472: POP
50473: POP
// end ;
50474: GO 50328
50476: POP
50477: POP
// end ;
50478: LD_VAR 0 1
50482: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50483: LD_EXP 47
50487: IFFALSE 50666
50489: GO 50491
50491: DISABLE
50492: LD_INT 0
50494: PPUSH
50495: PPUSH
// begin for i := 1 to 8 do
50496: LD_ADDR_VAR 0 1
50500: PUSH
50501: DOUBLE
50502: LD_INT 1
50504: DEC
50505: ST_TO_ADDR
50506: LD_INT 8
50508: PUSH
50509: FOR_TO
50510: IFFALSE 50663
// if mpSidePositions [ i ] then
50512: LD_EXP 5
50516: PUSH
50517: LD_VAR 0 1
50521: ARRAY
50522: IFFALSE 50661
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50524: LD_ADDR_VAR 0 2
50528: PUSH
50529: LD_EXP 17
50533: PUSH
50534: LD_EXP 5
50538: PUSH
50539: LD_VAR 0 1
50543: ARRAY
50544: ARRAY
50545: PPUSH
50546: LD_INT 2
50548: PUSH
50549: LD_INT 21
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 21
50561: PUSH
50562: LD_INT 2
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 22
50576: PUSH
50577: LD_OWVAR 2
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PPUSH
50590: CALL_OW 70
50594: PUSH
50595: FOR_IN
50596: IFFALSE 50659
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50598: LD_EXP 6
50602: PUSH
50603: LD_VAR 0 1
50607: ARRAY
50608: PUSH
50609: LD_EXP 6
50613: PUSH
50614: LD_OWVAR 2
50618: ARRAY
50619: NONEQUAL
50620: IFTRUE 50643
50622: PUSH
50623: LD_EXP 9
50627: NOT
50628: IFFALSE 50642
50630: PUSH
50631: LD_VAR 0 1
50635: PUSH
50636: LD_OWVAR 2
50640: NONEQUAL
50641: AND
50642: OR
50643: IFFALSE 50657
// ComMoveToArea ( un , BuildUpEscape ) ;
50645: LD_VAR 0 2
50649: PPUSH
50650: LD_INT 52
50652: PPUSH
50653: CALL_OW 113
50657: GO 50595
50659: POP
50660: POP
50661: GO 50509
50663: POP
50664: POP
// enable ;
50665: ENABLE
// end ;
50666: PPOPN 2
50668: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50669: LD_EXP 18
50673: IFFALSE 50723
50675: GO 50677
50677: DISABLE
50678: LD_INT 0
50680: PPUSH
// begin tmp := mpBuildUpTime ;
50681: LD_ADDR_VAR 0 1
50685: PUSH
50686: LD_EXP 18
50690: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50691: LD_INT 35
50693: PPUSH
50694: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50698: LD_ADDR_VAR 0 1
50702: PUSH
50703: LD_VAR 0 1
50707: PUSH
50708: LD_INT 35
50710: MINUS
50711: ST_TO_ADDR
// until not tmp ;
50712: LD_VAR 0 1
50716: NOT
50717: IFFALSE 50691
// EndBuildUp ;
50719: CALL 50302 0 0
// end ;
50723: PPOPN 1
50725: END
// every 0 0$1 trigger mpActive marked mpWin do
50726: LD_INT 100
50728: IFFALSE 50762
50730: GO 50732
50732: DISABLE
// begin if IAmServer then
50733: CALL_OW 518
50737: IFFALSE 50746
// wait ( 0 0$3 ) ;
50739: LD_INT 105
50741: PPUSH
50742: CALL_OW 67
// if Multiplayer then
50746: LD_OWVAR 4
50750: IFFALSE 50758
// YouWinInMultiplayer else
50752: CALL_OW 106
50756: GO 50762
// YouWin ;
50758: CALL_OW 103
// end ;
50762: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50763: LD_INT 0
50765: PPUSH
// result := false ;
50766: LD_ADDR_VAR 0 3
50770: PUSH
50771: LD_INT 0
50773: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
50774: LD_VAR 0 1
50778: PUSH
50779: LD_INT 1
50781: DOUBLE
50782: EQUAL
50783: IFTRUE 50805
50785: LD_INT 5
50787: DOUBLE
50788: EQUAL
50789: IFTRUE 50805
50791: LD_INT 6
50793: DOUBLE
50794: EQUAL
50795: IFTRUE 50805
50797: LD_INT 7
50799: DOUBLE
50800: EQUAL
50801: IFTRUE 50805
50803: GO 50878
50805: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50806: LD_ADDR_VAR 0 3
50810: PUSH
50811: LD_INT 22
50813: PUSH
50814: LD_VAR 0 2
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: LD_INT 21
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 33
50838: PUSH
50839: LD_INT 3
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 33
50848: PUSH
50849: LD_INT 5
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PPUSH
50866: CALL_OW 69
50870: PPUSH
50871: CALL 5060 0 1
50875: ST_TO_ADDR
// end ; GameTypeSurvival :
50876: GO 51274
50878: LD_INT 2
50880: DOUBLE
50881: EQUAL
50882: IFTRUE 50886
50884: GO 51016
50886: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50887: LD_ADDR_VAR 0 3
50891: PUSH
50892: LD_INT 22
50894: PUSH
50895: LD_VAR 0 2
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 2
50906: PUSH
50907: LD_INT 30
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 30
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PPUSH
50936: CALL_OW 69
50940: PPUSH
50941: CALL 5060 0 1
50945: IFFALSE 51013
50947: PUSH
50948: LD_INT 22
50950: PUSH
50951: LD_VAR 0 2
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: LD_INT 21
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 33
50975: PUSH
50976: LD_INT 3
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 33
50985: PUSH
50986: LD_INT 5
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PPUSH
51003: CALL_OW 69
51007: PPUSH
51008: CALL 5060 0 1
51012: AND
51013: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
51014: GO 51274
51016: LD_INT 8
51018: DOUBLE
51019: EQUAL
51020: IFTRUE 51024
51022: GO 51173
51024: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51025: LD_ADDR_VAR 0 3
51029: PUSH
51030: LD_EXP 39
51034: PUSH
51035: LD_VAR 0 2
51039: ARRAY
51040: PPUSH
51041: CALL_OW 300
51045: IFFALSE 51102
51047: PUSH
51048: LD_INT 22
51050: PUSH
51051: LD_VAR 0 2
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: LD_INT 30
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 30
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: LIST
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PPUSH
51092: CALL_OW 69
51096: PPUSH
51097: CALL 5060 0 1
51101: AND
51102: IFFALSE 51170
51104: PUSH
51105: LD_INT 22
51107: PUSH
51108: LD_VAR 0 2
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: LD_INT 21
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 33
51132: PUSH
51133: LD_INT 3
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 33
51142: PUSH
51143: LD_INT 5
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PPUSH
51160: CALL_OW 69
51164: PPUSH
51165: CALL 5060 0 1
51169: AND
51170: ST_TO_ADDR
// end ; GameTypeKing :
51171: GO 51274
51173: LD_INT 3
51175: DOUBLE
51176: EQUAL
51177: IFTRUE 51181
51179: GO 51273
51181: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
51182: LD_ADDR_VAR 0 3
51186: PUSH
51187: LD_INT 22
51189: PUSH
51190: LD_VAR 0 2
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: LD_INT 21
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 33
51214: PUSH
51215: LD_INT 3
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 33
51224: PUSH
51225: LD_INT 5
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PPUSH
51242: CALL_OW 69
51246: PPUSH
51247: CALL 5060 0 1
51251: IFFALSE 51270
51253: PUSH
51254: LD_VAR 0 2
51258: PPUSH
51259: CALL 55943 0 1
51263: PUSH
51264: LD_EXP 33
51268: LESS
51269: AND
51270: ST_TO_ADDR
// end ; end ;
51271: GO 51274
51273: POP
// end ;
51274: LD_VAR 0 3
51278: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
51279: LD_INT 100
51281: IFFALSE 51511
51283: GO 51285
51285: DISABLE
51286: LD_INT 0
51288: PPUSH
51289: PPUSH
// begin if Multiplayer then
51290: LD_OWVAR 4
51294: IFFALSE 51302
// SetPlayerSpectator ( ) else
51296: CALL_OW 572
51300: GO 51311
// FogOff ( your_side ) ;
51302: LD_OWVAR 2
51306: PPUSH
51307: CALL_OW 344
// repeat gameIsOn := false ;
51311: LD_ADDR_VAR 0 1
51315: PUSH
51316: LD_INT 0
51318: ST_TO_ADDR
// for i := 1 to 8 do
51319: LD_ADDR_VAR 0 2
51323: PUSH
51324: DOUBLE
51325: LD_INT 1
51327: DEC
51328: ST_TO_ADDR
51329: LD_INT 8
51331: PUSH
51332: FOR_TO
51333: IFFALSE 51463
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51335: LD_EXP 5
51339: PUSH
51340: LD_VAR 0 2
51344: ARRAY
51345: IFFALSE 51358
51347: PUSH
51348: LD_VAR 0 2
51352: PPUSH
51353: CALL_OW 108
51357: AND
51358: IFFALSE 51372
51360: PUSH
51361: LD_VAR 0 2
51365: PUSH
51366: LD_OWVAR 2
51370: NONEQUAL
51371: AND
51372: IFFALSE 51461
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51374: LD_EXP 6
51378: PUSH
51379: LD_VAR 0 2
51383: ARRAY
51384: NOT
51385: IFTRUE 51433
51387: PUSH
51388: LD_EXP 6
51392: PUSH
51393: LD_VAR 0 2
51397: ARRAY
51398: PUSH
51399: LD_EXP 6
51403: PUSH
51404: LD_OWVAR 2
51408: ARRAY
51409: NONEQUAL
51410: IFFALSE 51432
51412: PUSH
51413: LD_OWVAR 2
51417: PPUSH
51418: LD_VAR 0 2
51422: PPUSH
51423: CALL_OW 81
51427: PUSH
51428: LD_INT 1
51430: NONEQUAL
51431: AND
51432: OR
51433: IFFALSE 51461
// if HasPowerByGameType ( mpGameType , i ) then
51435: LD_EXP 1
51439: PPUSH
51440: LD_VAR 0 2
51444: PPUSH
51445: CALL 50763 0 2
51449: IFFALSE 51461
// begin gameIsOn := true ;
51451: LD_ADDR_VAR 0 1
51455: PUSH
51456: LD_INT 1
51458: ST_TO_ADDR
// break ;
51459: GO 51463
// end ;
51461: GO 51332
51463: POP
51464: POP
// wait ( 100 ) ;
51465: LD_INT 100
51467: PPUSH
51468: CALL_OW 67
// until not gameIsOn ;
51472: LD_VAR 0 1
51476: NOT
51477: IFFALSE 51311
// if IAmServer then
51479: CALL_OW 518
51483: IFFALSE 51492
// wait ( 0 0$3 ) ;
51485: LD_INT 105
51487: PPUSH
51488: CALL_OW 67
// if Multiplayer then
51492: LD_OWVAR 4
51496: IFFALSE 51504
// YouLostInMultiplayer else
51498: CALL_OW 107
51502: GO 51511
// YouLost (  ) ;
51504: LD_STRING 
51506: PPUSH
51507: CALL_OW 104
// end ;
51511: PPOPN 2
51513: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51514: LD_EXP 31
51518: IFFALSE 51902
51520: GO 51522
51522: DISABLE
51523: LD_INT 0
51525: PPUSH
51526: PPUSH
51527: PPUSH
51528: PPUSH
51529: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51530: LD_ADDR_VAR 0 5
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: LD_INT 2
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: LD_INT 4
51546: PUSH
51547: LD_INT 5
51549: PUSH
51550: LD_INT 6
51552: PUSH
51553: LD_INT 7
51555: PUSH
51556: LD_INT 8
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51569: LD_INT 350
51571: PPUSH
51572: CALL_OW 67
// for i := 1 to 8 do
51576: LD_ADDR_VAR 0 1
51580: PUSH
51581: DOUBLE
51582: LD_INT 1
51584: DEC
51585: ST_TO_ADDR
51586: LD_INT 8
51588: PUSH
51589: FOR_TO
51590: IFFALSE 51872
// begin j := sides [ i ] ;
51592: LD_ADDR_VAR 0 2
51596: PUSH
51597: LD_VAR 0 5
51601: PUSH
51602: LD_VAR 0 1
51606: ARRAY
51607: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51608: LD_EXP 38
51612: PUSH
51613: LD_VAR 0 2
51617: ARRAY
51618: PPUSH
51619: CALL 5060 0 1
51623: IFFALSE 51636
51625: PUSH
51626: LD_VAR 0 2
51630: PPUSH
51631: CALL_OW 108
51635: AND
51636: IFFALSE 51654
51638: PUSH
51639: LD_EXP 1
51643: PPUSH
51644: LD_VAR 0 2
51648: PPUSH
51649: CALL 50763 0 2
51653: AND
51654: IFFALSE 51870
// begin wait ( mpRespawn div 2 ) ;
51656: LD_EXP 31
51660: PUSH
51661: LD_INT 2
51663: DIV
51664: PPUSH
51665: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51669: LD_ADDR_VAR 0 3
51673: PUSH
51674: LD_INT 22
51676: PUSH
51677: LD_VAR 0 2
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 50
51688: PUSH
51689: EMPTY
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: LD_INT 30
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 30
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: LIST
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: PPUSH
51725: CALL_OW 69
51729: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51730: LD_VAR 0 3
51734: NOT
51735: IFTRUE 51749
51737: PUSH
51738: LD_VAR 0 2
51742: PPUSH
51743: CALL_OW 108
51747: NOT
51748: OR
51749: IFTRUE 51768
51751: PUSH
51752: LD_EXP 1
51756: PPUSH
51757: LD_VAR 0 2
51761: PPUSH
51762: CALL 50763 0 2
51766: NOT
51767: OR
51768: IFFALSE 51772
// continue ;
51770: GO 51589
// spawn := tmp [ 1 ] ;
51772: LD_ADDR_VAR 0 4
51776: PUSH
51777: LD_VAR 0 3
51781: PUSH
51782: LD_INT 1
51784: ARRAY
51785: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51786: LD_EXP 38
51790: PUSH
51791: LD_VAR 0 2
51795: ARRAY
51796: PUSH
51797: LD_INT 1
51799: ARRAY
51800: PPUSH
51801: LD_VAR 0 4
51805: PPUSH
51806: CALL_OW 250
51810: PPUSH
51811: LD_VAR 0 4
51815: PPUSH
51816: CALL_OW 251
51820: PPUSH
51821: LD_INT 32
51823: PPUSH
51824: LD_INT 1
51826: PPUSH
51827: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51831: LD_ADDR_EXP 38
51835: PUSH
51836: LD_EXP 38
51840: PPUSH
51841: LD_VAR 0 2
51845: PPUSH
51846: LD_EXP 38
51850: PUSH
51851: LD_VAR 0 2
51855: ARRAY
51856: PPUSH
51857: LD_INT 1
51859: PPUSH
51860: CALL_OW 3
51864: PPUSH
51865: CALL_OW 1
51869: ST_TO_ADDR
// end ; end ;
51870: GO 51589
51872: POP
51873: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51874: LD_ADDR_VAR 0 5
51878: PUSH
51879: LD_VAR 0 5
51883: PPUSH
51884: LD_INT 1
51886: PPUSH
51887: LD_INT 8
51889: PPUSH
51890: LD_INT 1
51892: PPUSH
51893: CALL 7386 0 4
51897: ST_TO_ADDR
// until false ;
51898: LD_INT 0
51900: IFFALSE 51569
// end ;
51902: PPOPN 5
51904: END
// every 0 0$1 marked mpActive do
51905: GO 51907
51907: DISABLE
// begin enable ;
51908: ENABLE
// if not mpDisplayStrings then
51909: LD_EXP 36
51913: NOT
51914: IFFALSE 51925
// begin display_strings := [ ] ;
51916: LD_ADDR_OWVAR 47
51920: PUSH
51921: EMPTY
51922: ST_TO_ADDR
// exit ;
51923: GO 51935
// end ; display_strings := mpDisplayStrings ;
51925: LD_ADDR_OWVAR 47
51929: PUSH
51930: LD_EXP 36
51934: ST_TO_ADDR
// end ; end_of_file
51935: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51936: LD_INT 0
51938: PPUSH
51939: PPUSH
51940: PPUSH
51941: PPUSH
51942: PPUSH
51943: PPUSH
51944: PPUSH
51945: PPUSH
51946: PPUSH
// if GetType ( un ) = unit_vehicle then
51947: LD_VAR 0 1
51951: PPUSH
51952: CALL_OW 247
51956: PUSH
51957: LD_INT 2
51959: EQUAL
51960: IFFALSE 51964
// exit ;
51962: GO 52737
// side := GetSide ( un ) ;
51964: LD_ADDR_VAR 0 9
51968: PUSH
51969: LD_VAR 0 1
51973: PPUSH
51974: CALL_OW 255
51978: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
51979: LD_EXP 1
51983: PUSH
51984: LD_INT 2
51986: PUSH
51987: LD_INT 8
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: IN
51994: IFFALSE 52088
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
51996: LD_VAR 0 1
52000: PPUSH
52001: CALL_OW 266
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: IN
52016: IFFALSE 52088
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52018: LD_ADDR_VAR 0 3
52022: PUSH
52023: LD_INT 22
52025: PUSH
52026: LD_VAR 0 9
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: LD_INT 21
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 33
52050: PUSH
52051: LD_INT 3
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: LIST
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PPUSH
52067: CALL_OW 69
52071: PUSH
52072: FOR_IN
52073: IFFALSE 52086
// KillUnit ( i ) ;
52075: LD_VAR 0 3
52079: PPUSH
52080: CALL_OW 66
52084: GO 52072
52086: POP
52087: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
52088: LD_EXP 1
52092: PUSH
52093: LD_INT 8
52095: EQUAL
52096: IFFALSE 52180
// if un in mpCommanders then
52098: LD_VAR 0 1
52102: PUSH
52103: LD_EXP 39
52107: IN
52108: IFFALSE 52180
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52110: LD_ADDR_VAR 0 3
52114: PUSH
52115: LD_INT 22
52117: PUSH
52118: LD_VAR 0 9
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: LD_INT 21
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 33
52142: PUSH
52143: LD_INT 3
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: LIST
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PPUSH
52159: CALL_OW 69
52163: PUSH
52164: FOR_IN
52165: IFFALSE 52178
// KillUnit ( i ) ;
52167: LD_VAR 0 3
52171: PPUSH
52172: CALL_OW 66
52176: GO 52164
52178: POP
52179: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
52180: LD_VAR 0 1
52184: PPUSH
52185: CALL_OW 257
52189: PUSH
52190: LD_INT 12
52192: PUSH
52193: LD_INT 17
52195: PUSH
52196: LD_INT 15
52198: PUSH
52199: LD_INT 16
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: IN
52208: IFTRUE 52225
52210: PUSH
52211: LD_VAR 0 1
52215: PPUSH
52216: CALL_OW 263
52220: PUSH
52221: LD_INT 5
52223: EQUAL
52224: OR
52225: IFFALSE 52462
// begin tag := 0 ;
52227: LD_ADDR_VAR 0 5
52231: PUSH
52232: LD_INT 0
52234: ST_TO_ADDR
// for i := 1 to 8 do
52235: LD_ADDR_VAR 0 3
52239: PUSH
52240: DOUBLE
52241: LD_INT 1
52243: DEC
52244: ST_TO_ADDR
52245: LD_INT 8
52247: PUSH
52248: FOR_TO
52249: IFFALSE 52283
// if un in mpApePosIndex [ i ] then
52251: LD_VAR 0 1
52255: PUSH
52256: LD_EXP 30
52260: PUSH
52261: LD_VAR 0 3
52265: ARRAY
52266: IN
52267: IFFALSE 52281
// begin tag := i ;
52269: LD_ADDR_VAR 0 5
52273: PUSH
52274: LD_VAR 0 3
52278: ST_TO_ADDR
// break ;
52279: GO 52283
// end ;
52281: GO 52248
52283: POP
52284: POP
// if not tag then
52285: LD_VAR 0 5
52289: NOT
52290: IFFALSE 52294
// exit ;
52292: GO 52737
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52294: LD_ADDR_VAR 0 7
52298: PUSH
52299: LD_EXP 29
52303: PUSH
52304: LD_EXP 5
52308: PUSH
52309: LD_VAR 0 5
52313: ARRAY
52314: ARRAY
52315: ST_TO_ADDR
// if not area then
52316: LD_VAR 0 7
52320: NOT
52321: IFFALSE 52325
// exit ;
52323: GO 52737
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52325: LD_INT 14700
52327: PUSH
52328: LD_VAR 0 1
52332: PUSH
52333: LD_INT 5
52335: MOD
52336: PUSH
52337: LD_INT 1
52339: PLUS
52340: PUSH
52341: LD_INT 700
52343: MUL
52344: PLUS
52345: PPUSH
52346: CALL_OW 67
// repeat wait ( 10 ) ;
52350: LD_INT 10
52352: PPUSH
52353: CALL_OW 67
// until not mpBlockRespThread ;
52357: LD_EXP 45
52361: NOT
52362: IFFALSE 52350
// mpBlockRespThread := true ;
52364: LD_ADDR_EXP 45
52368: PUSH
52369: LD_INT 1
52371: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52372: LD_INT 0
52374: PPUSH
52375: CALL 37163 0 1
// ape := CreateHuman ;
52379: LD_ADDR_VAR 0 4
52383: PUSH
52384: CALL_OW 44
52388: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52389: LD_ADDR_EXP 30
52393: PUSH
52394: LD_EXP 30
52398: PPUSH
52399: LD_VAR 0 5
52403: PPUSH
52404: LD_EXP 30
52408: PUSH
52409: LD_VAR 0 5
52413: ARRAY
52414: PPUSH
52415: LD_VAR 0 4
52419: PPUSH
52420: CALL 41036 0 2
52424: PPUSH
52425: CALL_OW 1
52429: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52430: LD_VAR 0 4
52434: PPUSH
52435: LD_VAR 0 7
52439: PPUSH
52440: LD_INT 0
52442: PPUSH
52443: CALL_OW 49
// wait ( 10 ) ;
52447: LD_INT 10
52449: PPUSH
52450: CALL_OW 67
// mpBlockRespThread := false ;
52454: LD_ADDR_EXP 45
52458: PUSH
52459: LD_INT 0
52461: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52462: LD_VAR 0 1
52466: PPUSH
52467: CALL_OW 247
52471: PUSH
52472: LD_INT 1
52474: EQUAL
52475: IFFALSE 52492
52477: PUSH
52478: LD_VAR 0 1
52482: PPUSH
52483: CALL_OW 248
52487: PUSH
52488: LD_INT 0
52490: GREATER
52491: AND
52492: IFFALSE 52737
// begin if not mpRespawn then
52494: LD_EXP 31
52498: NOT
52499: IFFALSE 52503
// exit ;
52501: GO 52737
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52503: LD_VAR 0 9
52507: PPUSH
52508: CALL_OW 108
52512: NOT
52513: IFFALSE 52532
52515: PUSH
52516: LD_EXP 1
52520: PPUSH
52521: LD_VAR 0 9
52525: PPUSH
52526: CALL 50763 0 2
52530: NOT
52531: AND
52532: IFFALSE 52536
// exit ;
52534: GO 52737
// side := GetSide ( un ) ;
52536: LD_ADDR_VAR 0 9
52540: PUSH
52541: LD_VAR 0 1
52545: PPUSH
52546: CALL_OW 255
52550: ST_TO_ADDR
// nation := GetNation ( un ) ;
52551: LD_ADDR_VAR 0 8
52555: PUSH
52556: LD_VAR 0 1
52560: PPUSH
52561: CALL_OW 248
52565: ST_TO_ADDR
// class := GetClass ( un ) ;
52566: LD_ADDR_VAR 0 6
52570: PUSH
52571: LD_VAR 0 1
52575: PPUSH
52576: CALL_OW 257
52580: ST_TO_ADDR
// if class > 4 then
52581: LD_VAR 0 6
52585: PUSH
52586: LD_INT 4
52588: GREATER
52589: IFFALSE 52599
// class := 1 ;
52591: LD_ADDR_VAR 0 6
52595: PUSH
52596: LD_INT 1
52598: ST_TO_ADDR
// repeat wait ( 10 ) ;
52599: LD_INT 10
52601: PPUSH
52602: CALL_OW 67
// until not mpBlockRespThread ;
52606: LD_EXP 45
52610: NOT
52611: IFFALSE 52599
// mpBlockRespThread := true ;
52613: LD_ADDR_EXP 45
52617: PUSH
52618: LD_INT 1
52620: ST_TO_ADDR
// uc_side := side ;
52621: LD_ADDR_OWVAR 20
52625: PUSH
52626: LD_VAR 0 9
52630: ST_TO_ADDR
// uc_nation := nation ;
52631: LD_ADDR_OWVAR 21
52635: PUSH
52636: LD_VAR 0 8
52640: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52641: LD_INT 0
52643: PPUSH
52644: LD_VAR 0 6
52648: PPUSH
52649: LD_INT 2
52651: PPUSH
52652: CALL_OW 380
// un := CreateHuman ;
52656: LD_ADDR_VAR 0 1
52660: PUSH
52661: CALL_OW 44
52665: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52666: LD_ADDR_EXP 38
52670: PUSH
52671: LD_EXP 38
52675: PPUSH
52676: LD_VAR 0 9
52680: PPUSH
52681: LD_EXP 38
52685: PUSH
52686: LD_VAR 0 9
52690: ARRAY
52691: PPUSH
52692: LD_EXP 38
52696: PUSH
52697: LD_VAR 0 9
52701: ARRAY
52702: PUSH
52703: LD_INT 1
52705: PLUS
52706: PPUSH
52707: LD_VAR 0 1
52711: PPUSH
52712: CALL_OW 1
52716: PPUSH
52717: CALL_OW 1
52721: ST_TO_ADDR
// wait ( 10 ) ;
52722: LD_INT 10
52724: PPUSH
52725: CALL_OW 67
// mpBlockRespThread := false ;
52729: LD_ADDR_EXP 45
52733: PUSH
52734: LD_INT 0
52736: ST_TO_ADDR
// end ; end ;
52737: LD_VAR 0 2
52741: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
52742: LD_INT 0
52744: PPUSH
52745: PPUSH
52746: PPUSH
52747: PPUSH
52748: PPUSH
// tag := 0 ;
52749: LD_ADDR_VAR 0 5
52753: PUSH
52754: LD_INT 0
52756: ST_TO_ADDR
// for i := 1 to 8 do
52757: LD_ADDR_VAR 0 4
52761: PUSH
52762: DOUBLE
52763: LD_INT 1
52765: DEC
52766: ST_TO_ADDR
52767: LD_INT 8
52769: PUSH
52770: FOR_TO
52771: IFFALSE 52805
// if un in mpApePosIndex [ i ] then
52773: LD_VAR 0 2
52777: PUSH
52778: LD_EXP 30
52782: PUSH
52783: LD_VAR 0 4
52787: ARRAY
52788: IN
52789: IFFALSE 52803
// begin tag := i ;
52791: LD_ADDR_VAR 0 5
52795: PUSH
52796: LD_VAR 0 4
52800: ST_TO_ADDR
// break ;
52801: GO 52805
// end ;
52803: GO 52770
52805: POP
52806: POP
// if not tag then
52807: LD_VAR 0 5
52811: NOT
52812: IFFALSE 52816
// exit ;
52814: GO 52984
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52816: LD_ADDR_VAR 0 6
52820: PUSH
52821: LD_EXP 29
52825: PUSH
52826: LD_EXP 5
52830: PUSH
52831: LD_VAR 0 5
52835: ARRAY
52836: ARRAY
52837: ST_TO_ADDR
// if not area then
52838: LD_VAR 0 6
52842: NOT
52843: IFFALSE 52847
// exit ;
52845: GO 52984
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52847: LD_INT 14700
52849: PUSH
52850: LD_VAR 0 2
52854: PUSH
52855: LD_INT 5
52857: MOD
52858: PUSH
52859: LD_INT 1
52861: PLUS
52862: PUSH
52863: LD_INT 700
52865: MUL
52866: PLUS
52867: PPUSH
52868: CALL_OW 67
// repeat wait ( 10 ) ;
52872: LD_INT 10
52874: PPUSH
52875: CALL_OW 67
// until not mpBlockRespThread ;
52879: LD_EXP 45
52883: NOT
52884: IFFALSE 52872
// mpBlockRespThread := true ;
52886: LD_ADDR_EXP 45
52890: PUSH
52891: LD_INT 1
52893: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52894: LD_INT 0
52896: PPUSH
52897: CALL 37163 0 1
// ape := CreateHuman ;
52901: LD_ADDR_VAR 0 7
52905: PUSH
52906: CALL_OW 44
52910: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52911: LD_ADDR_EXP 30
52915: PUSH
52916: LD_EXP 30
52920: PPUSH
52921: LD_VAR 0 5
52925: PPUSH
52926: LD_EXP 30
52930: PUSH
52931: LD_VAR 0 5
52935: ARRAY
52936: PPUSH
52937: LD_VAR 0 7
52941: PPUSH
52942: CALL 41036 0 2
52946: PPUSH
52947: CALL_OW 1
52951: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52952: LD_VAR 0 7
52956: PPUSH
52957: LD_VAR 0 6
52961: PPUSH
52962: LD_INT 0
52964: PPUSH
52965: CALL_OW 49
// wait ( 10 ) ;
52969: LD_INT 10
52971: PPUSH
52972: CALL_OW 67
// mpBlockRespThread := false ;
52976: LD_ADDR_EXP 45
52980: PUSH
52981: LD_INT 0
52983: ST_TO_ADDR
// end ;
52984: LD_VAR 0 3
52988: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52989: LD_INT 0
52991: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52992: LD_VAR 0 1
52996: PPUSH
52997: CALL_OW 266
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: IN
53012: IFFALSE 53037
// SetBName ( building , @ & GetSide ( building ) ) ;
53014: LD_VAR 0 1
53018: PPUSH
53019: LD_STRING @
53021: PUSH
53022: LD_VAR 0 1
53026: PPUSH
53027: CALL_OW 255
53031: STR
53032: PPUSH
53033: CALL_OW 500
// end ;
53037: LD_VAR 0 2
53041: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
53042: LD_INT 0
53044: PPUSH
53045: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
53046: LD_EXP 1
53050: PUSH
53051: LD_INT 2
53053: PUSH
53054: LD_INT 8
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: IN
53061: IFFALSE 53085
53063: PUSH
53064: LD_VAR 0 1
53068: PPUSH
53069: CALL_OW 266
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: IN
53084: AND
53085: IFFALSE 53164
// begin SetSide ( building , oldSide ) ;
53087: LD_VAR 0 1
53091: PPUSH
53092: LD_VAR 0 2
53096: PPUSH
53097: CALL_OW 235
// KillUnit ( building ) ;
53101: LD_VAR 0 1
53105: PPUSH
53106: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
53110: LD_ADDR_VAR 0 5
53114: PUSH
53115: LD_INT 22
53117: PUSH
53118: LD_VAR 0 2
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 21
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PPUSH
53141: CALL_OW 69
53145: PUSH
53146: FOR_IN
53147: IFFALSE 53160
// KillUnit ( i ) ;
53149: LD_VAR 0 5
53153: PPUSH
53154: CALL_OW 66
53158: GO 53146
53160: POP
53161: POP
// exit ;
53162: GO 53209
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
53164: LD_VAR 0 1
53168: PPUSH
53169: CALL_OW 266
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: IN
53184: IFFALSE 53209
// SetBName ( building , @ & GetSide ( building ) ) ;
53186: LD_VAR 0 1
53190: PPUSH
53191: LD_STRING @
53193: PUSH
53194: LD_VAR 0 1
53198: PPUSH
53199: CALL_OW 255
53203: STR
53204: PPUSH
53205: CALL_OW 500
// end ;
53209: LD_VAR 0 4
53213: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
53214: LD_INT 0
53216: PPUSH
53217: PPUSH
53218: PPUSH
// if mpGameType <> GameTypeFamine then
53219: LD_EXP 1
53223: PUSH
53224: LD_INT 5
53226: NONEQUAL
53227: IFFALSE 53231
// exit ;
53229: GO 53465
// for i := 1 to mpGlobalOilDeposits do
53231: LD_ADDR_VAR 0 6
53235: PUSH
53236: DOUBLE
53237: LD_INT 1
53239: DEC
53240: ST_TO_ADDR
53241: LD_EXP 40
53245: PUSH
53246: FOR_TO
53247: IFFALSE 53463
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
53249: LD_EXP 40
53253: PUSH
53254: LD_VAR 0 6
53258: ARRAY
53259: PUSH
53260: LD_INT 1
53262: ARRAY
53263: PPUSH
53264: LD_EXP 40
53268: PUSH
53269: LD_VAR 0 6
53273: ARRAY
53274: PUSH
53275: LD_INT 2
53277: ARRAY
53278: PPUSH
53279: CALL_OW 428
53283: PUSH
53284: LD_VAR 0 1
53288: EQUAL
53289: IFFALSE 53461
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
53291: LD_ADDR_VAR 0 7
53295: PUSH
53296: LD_EXP 40
53300: PUSH
53301: LD_VAR 0 6
53305: ARRAY
53306: PUSH
53307: LD_INT 3
53309: ARRAY
53310: ST_TO_ADDR
// value := value - amount ;
53311: LD_ADDR_VAR 0 7
53315: PUSH
53316: LD_VAR 0 7
53320: PUSH
53321: LD_VAR 0 4
53325: MINUS
53326: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
53327: LD_ADDR_EXP 40
53331: PUSH
53332: LD_EXP 40
53336: PPUSH
53337: LD_VAR 0 6
53341: PPUSH
53342: LD_EXP 40
53346: PUSH
53347: LD_VAR 0 6
53351: ARRAY
53352: PPUSH
53353: LD_INT 3
53355: PPUSH
53356: LD_VAR 0 7
53360: PPUSH
53361: CALL_OW 1
53365: PPUSH
53366: CALL_OW 1
53370: ST_TO_ADDR
// if side in [ your_side , 9 ] then
53371: LD_VAR 0 2
53375: PUSH
53376: LD_OWVAR 2
53380: PUSH
53381: LD_INT 9
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: IN
53388: IFFALSE 53404
// SetUnitDisplayNumber ( building , value ) ;
53390: LD_VAR 0 1
53394: PPUSH
53395: LD_VAR 0 7
53399: PPUSH
53400: CALL_OW 505
// if value <= 0 then
53404: LD_VAR 0 7
53408: PUSH
53409: LD_INT 0
53411: LESSEQUAL
53412: IFFALSE 53461
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
53414: LD_EXP 40
53418: PUSH
53419: LD_VAR 0 6
53423: ARRAY
53424: PUSH
53425: LD_INT 1
53427: ARRAY
53428: PPUSH
53429: LD_EXP 40
53433: PUSH
53434: LD_VAR 0 6
53438: ARRAY
53439: PUSH
53440: LD_INT 2
53442: ARRAY
53443: PPUSH
53444: CALL_OW 63
// KillUnit ( building ) ;
53448: LD_VAR 0 1
53452: PPUSH
53453: CALL_OW 66
// exit ;
53457: POP
53458: POP
53459: GO 53465
// end ; end ; end ;
53461: GO 53246
53463: POP
53464: POP
// end ;
53465: LD_VAR 0 5
53469: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
53470: LD_INT 0
53472: PPUSH
53473: PPUSH
53474: PPUSH
// if mpGameType <> GameTypeFamine then
53475: LD_EXP 1
53479: PUSH
53480: LD_INT 5
53482: NONEQUAL
53483: IFFALSE 53487
// exit ;
53485: GO 53721
// for i := 1 to mpGlobalSibDeposits do
53487: LD_ADDR_VAR 0 6
53491: PUSH
53492: DOUBLE
53493: LD_INT 1
53495: DEC
53496: ST_TO_ADDR
53497: LD_EXP 41
53501: PUSH
53502: FOR_TO
53503: IFFALSE 53719
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
53505: LD_EXP 41
53509: PUSH
53510: LD_VAR 0 6
53514: ARRAY
53515: PUSH
53516: LD_INT 1
53518: ARRAY
53519: PPUSH
53520: LD_EXP 41
53524: PUSH
53525: LD_VAR 0 6
53529: ARRAY
53530: PUSH
53531: LD_INT 2
53533: ARRAY
53534: PPUSH
53535: CALL_OW 428
53539: PUSH
53540: LD_VAR 0 1
53544: EQUAL
53545: IFFALSE 53717
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
53547: LD_ADDR_VAR 0 7
53551: PUSH
53552: LD_EXP 41
53556: PUSH
53557: LD_VAR 0 6
53561: ARRAY
53562: PUSH
53563: LD_INT 3
53565: ARRAY
53566: ST_TO_ADDR
// value := value - amount ;
53567: LD_ADDR_VAR 0 7
53571: PUSH
53572: LD_VAR 0 7
53576: PUSH
53577: LD_VAR 0 4
53581: MINUS
53582: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
53583: LD_ADDR_EXP 41
53587: PUSH
53588: LD_EXP 41
53592: PPUSH
53593: LD_VAR 0 6
53597: PPUSH
53598: LD_EXP 41
53602: PUSH
53603: LD_VAR 0 6
53607: ARRAY
53608: PPUSH
53609: LD_INT 3
53611: PPUSH
53612: LD_VAR 0 7
53616: PPUSH
53617: CALL_OW 1
53621: PPUSH
53622: CALL_OW 1
53626: ST_TO_ADDR
// if side in [ your_side , 9 ] then
53627: LD_VAR 0 2
53631: PUSH
53632: LD_OWVAR 2
53636: PUSH
53637: LD_INT 9
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: IN
53644: IFFALSE 53660
// SetUnitDisplayNumber ( building , value ) ;
53646: LD_VAR 0 1
53650: PPUSH
53651: LD_VAR 0 7
53655: PPUSH
53656: CALL_OW 505
// if value <= 0 then
53660: LD_VAR 0 7
53664: PUSH
53665: LD_INT 0
53667: LESSEQUAL
53668: IFFALSE 53717
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
53670: LD_EXP 41
53674: PUSH
53675: LD_VAR 0 6
53679: ARRAY
53680: PUSH
53681: LD_INT 1
53683: ARRAY
53684: PPUSH
53685: LD_EXP 41
53689: PUSH
53690: LD_VAR 0 6
53694: ARRAY
53695: PUSH
53696: LD_INT 2
53698: ARRAY
53699: PPUSH
53700: CALL_OW 63
// KillUnit ( building ) ;
53704: LD_VAR 0 1
53708: PPUSH
53709: CALL_OW 66
// exit ;
53713: POP
53714: POP
53715: GO 53721
// end ; end ; end ;
53717: GO 53502
53719: POP
53720: POP
// end ;
53721: LD_VAR 0 5
53725: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
53726: LD_INT 0
53728: PPUSH
53729: PPUSH
// side := GetSide ( factory ) ;
53730: LD_ADDR_VAR 0 7
53734: PUSH
53735: LD_VAR 0 1
53739: PPUSH
53740: CALL_OW 255
53744: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
53745: LD_VAR 0 5
53749: PUSH
53750: LD_INT 81
53752: EQUAL
53753: IFFALSE 53791
53755: PUSH
53756: LD_INT 22
53758: PUSH
53759: LD_VAR 0 7
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 34
53770: PUSH
53771: LD_INT 81
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PPUSH
53782: CALL_OW 69
53786: PUSH
53787: LD_INT 0
53789: GREATER
53790: AND
53791: IFFALSE 53824
// begin ComCancel ( factory ) ;
53793: LD_VAR 0 1
53797: PPUSH
53798: CALL_OW 127
// if side = your_side then
53802: LD_VAR 0 7
53806: PUSH
53807: LD_OWVAR 2
53811: EQUAL
53812: IFFALSE 53824
// HintSpec ( VehLimit , 2 ) ;
53814: LD_STRING VehLimit
53816: PPUSH
53817: LD_INT 2
53819: PPUSH
53820: CALL_OW 338
// end ; end ;
53824: LD_VAR 0 6
53828: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
53829: LD_INT 0
53831: PPUSH
53832: PPUSH
53833: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
53834: LD_VAR 0 1
53838: PPUSH
53839: CALL_OW 264
53843: PUSH
53844: LD_INT 81
53846: EQUAL
53847: IFFALSE 53864
53849: PUSH
53850: LD_VAR 0 1
53854: PPUSH
53855: CALL_OW 263
53859: PUSH
53860: LD_INT 1
53862: EQUAL
53863: AND
53864: IFFALSE 54144
// begin for i := 1 to Count ( minersList ) do
53866: LD_ADDR_VAR 0 6
53870: PUSH
53871: DOUBLE
53872: LD_INT 1
53874: DEC
53875: ST_TO_ADDR
53876: LD_EXP 56
53880: PPUSH
53881: CALL 5060 0 1
53885: PUSH
53886: FOR_TO
53887: IFFALSE 54005
// begin if minersList [ i ] = oldId then
53889: LD_EXP 56
53893: PUSH
53894: LD_VAR 0 6
53898: ARRAY
53899: PUSH
53900: LD_VAR 0 2
53904: EQUAL
53905: IFFALSE 54003
// begin for j := 1 to minerMinesList [ i ] do
53907: LD_ADDR_VAR 0 7
53911: PUSH
53912: DOUBLE
53913: LD_INT 1
53915: DEC
53916: ST_TO_ADDR
53917: LD_EXP 57
53921: PUSH
53922: LD_VAR 0 6
53926: ARRAY
53927: PUSH
53928: FOR_TO
53929: IFFALSE 53979
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
53931: LD_EXP 57
53935: PUSH
53936: LD_VAR 0 6
53940: ARRAY
53941: PUSH
53942: LD_VAR 0 7
53946: ARRAY
53947: PUSH
53948: LD_INT 1
53950: ARRAY
53951: PPUSH
53952: LD_EXP 57
53956: PUSH
53957: LD_VAR 0 6
53961: ARRAY
53962: PUSH
53963: LD_VAR 0 7
53967: ARRAY
53968: PUSH
53969: LD_INT 2
53971: ARRAY
53972: PPUSH
53973: CALL_OW 612
53977: GO 53928
53979: POP
53980: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
53981: LD_ADDR_EXP 57
53985: PUSH
53986: LD_EXP 57
53990: PPUSH
53991: LD_VAR 0 6
53995: PPUSH
53996: CALL_OW 3
54000: ST_TO_ADDR
// break ;
54001: GO 54005
// end ; end ;
54003: GO 53886
54005: POP
54006: POP
// minersList := minersList diff oldId ;
54007: LD_ADDR_EXP 56
54011: PUSH
54012: LD_EXP 56
54016: PUSH
54017: LD_VAR 0 2
54021: DIFF
54022: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
54023: LD_INT 22
54025: PUSH
54026: LD_VAR 0 4
54030: PPUSH
54031: CALL_OW 255
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 34
54042: PUSH
54043: LD_INT 81
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PPUSH
54054: CALL_OW 69
54058: PUSH
54059: LD_INT 1
54061: GREATER
54062: IFFALSE 54089
// begin ComExit ( unit ) ;
54064: LD_VAR 0 4
54068: PPUSH
54069: CALL 41434 0 1
// SetSide ( newId , oldSide ) ;
54073: LD_VAR 0 1
54077: PPUSH
54078: LD_VAR 0 3
54082: PPUSH
54083: CALL_OW 235
// exit ;
54087: GO 54144
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
54089: LD_ADDR_EXP 56
54093: PUSH
54094: LD_EXP 56
54098: PPUSH
54099: LD_EXP 56
54103: PUSH
54104: LD_INT 1
54106: PLUS
54107: PPUSH
54108: LD_VAR 0 1
54112: PPUSH
54113: CALL_OW 1
54117: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54118: LD_ADDR_EXP 57
54122: PUSH
54123: LD_EXP 57
54127: PPUSH
54128: LD_EXP 57
54132: PUSH
54133: LD_INT 1
54135: PLUS
54136: PPUSH
54137: EMPTY
54138: PPUSH
54139: CALL_OW 1
54143: ST_TO_ADDR
// end ; end ; end_of_file
54144: LD_VAR 0 5
54148: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
54149: LD_EXP 37
54153: IFFALSE 54161
54155: PUSH
54156: CALL 54371 0 0
54160: AND
54161: IFFALSE 54169
54163: PUSH
54164: LD_OWVAR 4
54168: AND
54169: IFFALSE 54368
54171: GO 54173
54173: DISABLE
54174: LD_INT 0
54176: PPUSH
54177: PPUSH
// begin canWin := false ;
54178: LD_ADDR_VAR 0 2
54182: PUSH
54183: LD_INT 0
54185: ST_TO_ADDR
// if not HasPower ( your_side ) then
54186: LD_OWVAR 2
54190: PPUSH
54191: CALL 54413 0 1
54195: NOT
54196: IFFALSE 54207
// begin Multiplayer_Loose_Message ;
54198: CALL_OW 521
// enable ( mpLose ) ;
54202: LD_INT 102
54204: ENABLE_MARKED
// end else
54205: GO 54368
// begin canWin := true ;
54207: LD_ADDR_VAR 0 2
54211: PUSH
54212: LD_INT 1
54214: ST_TO_ADDR
// for i := 1 to 8 do
54215: LD_ADDR_VAR 0 1
54219: PUSH
54220: DOUBLE
54221: LD_INT 1
54223: DEC
54224: ST_TO_ADDR
54225: LD_INT 8
54227: PUSH
54228: FOR_TO
54229: IFFALSE 54354
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54231: LD_EXP 5
54235: PUSH
54236: LD_VAR 0 1
54240: ARRAY
54241: IFFALSE 54254
54243: PUSH
54244: LD_VAR 0 1
54248: PPUSH
54249: CALL_OW 108
54253: AND
54254: IFFALSE 54268
54256: PUSH
54257: LD_VAR 0 1
54261: PUSH
54262: LD_OWVAR 2
54266: NONEQUAL
54267: AND
54268: IFFALSE 54352
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54270: LD_EXP 6
54274: PUSH
54275: LD_VAR 0 1
54279: ARRAY
54280: NOT
54281: IFTRUE 54329
54283: PUSH
54284: LD_EXP 6
54288: PUSH
54289: LD_VAR 0 1
54293: ARRAY
54294: PUSH
54295: LD_EXP 6
54299: PUSH
54300: LD_OWVAR 2
54304: ARRAY
54305: NONEQUAL
54306: IFFALSE 54328
54308: PUSH
54309: LD_OWVAR 2
54313: PPUSH
54314: LD_VAR 0 1
54318: PPUSH
54319: CALL_OW 81
54323: PUSH
54324: LD_INT 1
54326: NONEQUAL
54327: AND
54328: OR
54329: IFFALSE 54352
// if HasPower ( i ) then
54331: LD_VAR 0 1
54335: PPUSH
54336: CALL 54413 0 1
54340: IFFALSE 54352
// begin canWin := false ;
54342: LD_ADDR_VAR 0 2
54346: PUSH
54347: LD_INT 0
54349: ST_TO_ADDR
// break ;
54350: GO 54354
// end ;
54352: GO 54228
54354: POP
54355: POP
// if canWin then
54356: LD_VAR 0 2
54360: IFFALSE 54367
// enable ( mpWin ) else
54362: LD_INT 101
54364: ENABLE_MARKED
54365: GO 54368
// enable ;
54367: ENABLE
// end ; end ;
54368: PPOPN 2
54370: END
// function CanWinLoose ; begin
54371: LD_INT 0
54373: PPUSH
// result := true ;
54374: LD_ADDR_VAR 0 1
54378: PUSH
54379: LD_INT 1
54381: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54382: CALL_OW 531
54386: IFFALSE 54398
54388: PUSH
54389: CALL_OW 519
54393: PUSH
54394: LD_INT 1
54396: GREATER
54397: AND
54398: IFFALSE 54408
// result := false ;
54400: LD_ADDR_VAR 0 1
54404: PUSH
54405: LD_INT 0
54407: ST_TO_ADDR
// end ;
54408: LD_VAR 0 1
54412: RET
// function HasPower ( i ) ; begin
54413: LD_INT 0
54415: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54416: LD_ADDR_VAR 0 2
54420: PUSH
54421: LD_INT 22
54423: PUSH
54424: LD_VAR 0 1
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 2
54435: PUSH
54436: LD_INT 21
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 33
54448: PUSH
54449: LD_INT 3
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 33
54458: PUSH
54459: LD_INT 5
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PPUSH
54476: CALL_OW 69
54480: ST_TO_ADDR
// end ; end_of_file
54481: LD_VAR 0 2
54485: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
54486: LD_EXP 37
54490: IFFALSE 54533
54492: GO 54494
54494: DISABLE
54495: LD_INT 0
54497: PPUSH
// begin for i := 1 to 8 do
54498: LD_ADDR_VAR 0 1
54502: PUSH
54503: DOUBLE
54504: LD_INT 1
54506: DEC
54507: ST_TO_ADDR
54508: LD_INT 8
54510: PUSH
54511: FOR_TO
54512: IFFALSE 54531
// SetRestrict ( b_depot , i , state_disabled ) ;
54514: LD_INT 0
54516: PPUSH
54517: LD_VAR 0 1
54521: PPUSH
54522: LD_INT 0
54524: PPUSH
54525: CALL_OW 324
54529: GO 54511
54531: POP
54532: POP
// end ;
54533: PPOPN 1
54535: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
54536: LD_EXP 37
54540: IFFALSE 54548
54542: PUSH
54543: CALL 54758 0 0
54547: AND
54548: IFFALSE 54556
54550: PUSH
54551: LD_OWVAR 4
54555: AND
54556: IFFALSE 54755
54558: GO 54560
54560: DISABLE
54561: LD_INT 0
54563: PPUSH
54564: PPUSH
// begin canWin := false ;
54565: LD_ADDR_VAR 0 2
54569: PUSH
54570: LD_INT 0
54572: ST_TO_ADDR
// if not HasPower ( your_side ) then
54573: LD_OWVAR 2
54577: PPUSH
54578: CALL 54800 0 1
54582: NOT
54583: IFFALSE 54594
// begin Multiplayer_Loose_Message ;
54585: CALL_OW 521
// enable ( mpLose ) ;
54589: LD_INT 102
54591: ENABLE_MARKED
// end else
54592: GO 54755
// begin canWin := true ;
54594: LD_ADDR_VAR 0 2
54598: PUSH
54599: LD_INT 1
54601: ST_TO_ADDR
// for i := 1 to 8 do
54602: LD_ADDR_VAR 0 1
54606: PUSH
54607: DOUBLE
54608: LD_INT 1
54610: DEC
54611: ST_TO_ADDR
54612: LD_INT 8
54614: PUSH
54615: FOR_TO
54616: IFFALSE 54741
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54618: LD_EXP 5
54622: PUSH
54623: LD_VAR 0 1
54627: ARRAY
54628: IFFALSE 54641
54630: PUSH
54631: LD_VAR 0 1
54635: PPUSH
54636: CALL_OW 108
54640: AND
54641: IFFALSE 54655
54643: PUSH
54644: LD_VAR 0 1
54648: PUSH
54649: LD_OWVAR 2
54653: NONEQUAL
54654: AND
54655: IFFALSE 54739
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54657: LD_EXP 6
54661: PUSH
54662: LD_VAR 0 1
54666: ARRAY
54667: NOT
54668: IFTRUE 54716
54670: PUSH
54671: LD_EXP 6
54675: PUSH
54676: LD_VAR 0 1
54680: ARRAY
54681: PUSH
54682: LD_EXP 6
54686: PUSH
54687: LD_OWVAR 2
54691: ARRAY
54692: NONEQUAL
54693: IFFALSE 54715
54695: PUSH
54696: LD_OWVAR 2
54700: PPUSH
54701: LD_VAR 0 1
54705: PPUSH
54706: CALL_OW 81
54710: PUSH
54711: LD_INT 1
54713: NONEQUAL
54714: AND
54715: OR
54716: IFFALSE 54739
// if HasPower ( i ) then
54718: LD_VAR 0 1
54722: PPUSH
54723: CALL 54800 0 1
54727: IFFALSE 54739
// begin canWin := false ;
54729: LD_ADDR_VAR 0 2
54733: PUSH
54734: LD_INT 0
54736: ST_TO_ADDR
// break ;
54737: GO 54741
// end ;
54739: GO 54615
54741: POP
54742: POP
// if canWin then
54743: LD_VAR 0 2
54747: IFFALSE 54754
// enable ( mpWin ) else
54749: LD_INT 101
54751: ENABLE_MARKED
54752: GO 54755
// enable ;
54754: ENABLE
// end ; end ;
54755: PPOPN 2
54757: END
// function CanWinLoose ; begin
54758: LD_INT 0
54760: PPUSH
// result := true ;
54761: LD_ADDR_VAR 0 1
54765: PUSH
54766: LD_INT 1
54768: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54769: CALL_OW 531
54773: IFFALSE 54785
54775: PUSH
54776: CALL_OW 519
54780: PUSH
54781: LD_INT 1
54783: GREATER
54784: AND
54785: IFFALSE 54795
// result := false ;
54787: LD_ADDR_VAR 0 1
54791: PUSH
54792: LD_INT 0
54794: ST_TO_ADDR
// end ;
54795: LD_VAR 0 1
54799: RET
// function HasPower ( i ) ; begin
54800: LD_INT 0
54802: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
54803: LD_INT 22
54805: PUSH
54806: LD_VAR 0 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 2
54817: PUSH
54818: LD_INT 30
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 30
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: LIST
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PPUSH
54847: CALL_OW 69
54851: NOT
54852: IFFALSE 54856
// exit ;
54854: GO 54921
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54856: LD_ADDR_VAR 0 2
54860: PUSH
54861: LD_INT 22
54863: PUSH
54864: LD_VAR 0 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: LD_INT 21
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 33
54888: PUSH
54889: LD_INT 3
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 33
54898: PUSH
54899: LD_INT 5
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PPUSH
54916: CALL_OW 69
54920: ST_TO_ADDR
// end ; end_of_file
54921: LD_VAR 0 2
54925: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
54926: LD_EXP 37
54930: IFFALSE 55269
54932: GO 54934
54934: DISABLE
54935: LD_INT 0
54937: PPUSH
54938: PPUSH
54939: PPUSH
// begin mpKingPoints := [ ] ;
54940: LD_ADDR_EXP 48
54944: PUSH
54945: EMPTY
54946: ST_TO_ADDR
// if mpTeamGame then
54947: LD_EXP 9
54951: IFFALSE 55005
// begin for i := 1 to Count ( mpTeams ) do
54953: LD_ADDR_VAR 0 1
54957: PUSH
54958: DOUBLE
54959: LD_INT 1
54961: DEC
54962: ST_TO_ADDR
54963: LD_EXP 8
54967: PPUSH
54968: CALL 5060 0 1
54972: PUSH
54973: FOR_TO
54974: IFFALSE 55001
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54976: LD_ADDR_EXP 48
54980: PUSH
54981: LD_EXP 48
54985: PPUSH
54986: LD_VAR 0 1
54990: PPUSH
54991: LD_INT 0
54993: PPUSH
54994: CALL_OW 1
54998: ST_TO_ADDR
54999: GO 54973
55001: POP
55002: POP
// end else
55003: GO 55048
// begin for i := 1 to 8 do
55005: LD_ADDR_VAR 0 1
55009: PUSH
55010: DOUBLE
55011: LD_INT 1
55013: DEC
55014: ST_TO_ADDR
55015: LD_INT 8
55017: PUSH
55018: FOR_TO
55019: IFFALSE 55046
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55021: LD_ADDR_EXP 48
55025: PUSH
55026: LD_EXP 48
55030: PPUSH
55031: LD_VAR 0 1
55035: PPUSH
55036: LD_INT 0
55038: PPUSH
55039: CALL_OW 1
55043: ST_TO_ADDR
55044: GO 55018
55046: POP
55047: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
55048: LD_ADDR_VAR 0 3
55052: PUSH
55053: LD_INT 51
55055: PPUSH
55056: LD_INT 0
55058: PPUSH
55059: CALL_OW 517
55063: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55064: LD_ADDR_VAR 0 1
55068: PUSH
55069: DOUBLE
55070: LD_INT 1
55072: DEC
55073: ST_TO_ADDR
55074: LD_VAR 0 3
55078: PUSH
55079: LD_INT 1
55081: ARRAY
55082: PUSH
55083: FOR_TO
55084: IFFALSE 55151
// for j := 1 to 8 do
55086: LD_ADDR_VAR 0 2
55090: PUSH
55091: DOUBLE
55092: LD_INT 1
55094: DEC
55095: ST_TO_ADDR
55096: LD_INT 8
55098: PUSH
55099: FOR_TO
55100: IFFALSE 55147
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
55102: LD_VAR 0 3
55106: PUSH
55107: LD_INT 1
55109: ARRAY
55110: PUSH
55111: LD_VAR 0 1
55115: ARRAY
55116: PPUSH
55117: LD_VAR 0 3
55121: PUSH
55122: LD_INT 2
55124: ARRAY
55125: PUSH
55126: LD_VAR 0 1
55130: ARRAY
55131: PPUSH
55132: LD_VAR 0 2
55136: PPUSH
55137: LD_INT 12
55139: NEG
55140: PPUSH
55141: CALL_OW 330
55145: GO 55099
55147: POP
55148: POP
55149: GO 55083
55151: POP
55152: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
55153: LD_EXP 32
55157: PPUSH
55158: LD_INT 1
55160: PPUSH
55161: CALL_OW 424
// UpdateCounter ;
55165: CALL 55773 0 0
// repeat wait ( 0 0$1 ) ;
55169: LD_INT 35
55171: PPUSH
55172: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55176: LD_ADDR_VAR 0 3
55180: PUSH
55181: LD_EXP 32
55185: PPUSH
55186: LD_INT 3
55188: PUSH
55189: LD_INT 57
55191: PUSH
55192: EMPTY
55193: LIST
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 50
55201: PUSH
55202: EMPTY
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: LD_INT 30
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 30
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: LIST
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: LIST
55237: PPUSH
55238: CALL_OW 70
55242: ST_TO_ADDR
// if not tmp then
55243: LD_VAR 0 3
55247: NOT
55248: IFFALSE 55252
// continue ;
55250: GO 55169
// AddPoints ( tmp ) ;
55252: LD_VAR 0 3
55256: PPUSH
55257: CALL 55451 0 1
// UpdateCounter ;
55261: CALL 55773 0 0
// until false ;
55265: LD_INT 0
55267: IFFALSE 55169
// end ;
55269: PPOPN 3
55271: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
55272: LD_EXP 37
55276: IFFALSE 55284
55278: PUSH
55279: LD_EXP 35
55283: AND
55284: IFFALSE 55448
55286: GO 55288
55288: DISABLE
55289: LD_INT 0
55291: PPUSH
55292: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
55293: LD_ADDR_VAR 0 2
55297: PUSH
55298: LD_INT 51
55300: PPUSH
55301: LD_INT 0
55303: PPUSH
55304: CALL_OW 517
55308: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55309: LD_ADDR_VAR 0 1
55313: PUSH
55314: DOUBLE
55315: LD_INT 1
55317: DEC
55318: ST_TO_ADDR
55319: LD_VAR 0 2
55323: PUSH
55324: LD_INT 1
55326: ARRAY
55327: PUSH
55328: FOR_TO
55329: IFFALSE 55370
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
55331: LD_VAR 0 2
55335: PUSH
55336: LD_INT 1
55338: ARRAY
55339: PUSH
55340: LD_VAR 0 1
55344: ARRAY
55345: PPUSH
55346: LD_VAR 0 2
55350: PUSH
55351: LD_INT 2
55353: ARRAY
55354: PUSH
55355: LD_VAR 0 1
55359: ARRAY
55360: PPUSH
55361: LD_INT 125
55363: PPUSH
55364: CALL_OW 495
55368: GO 55328
55370: POP
55371: POP
// repeat wait ( mpEmissions ) ;
55372: LD_EXP 35
55376: PPUSH
55377: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
55381: LD_ADDR_VAR 0 1
55385: PUSH
55386: DOUBLE
55387: LD_INT 1
55389: DEC
55390: ST_TO_ADDR
55391: LD_VAR 0 2
55395: PUSH
55396: LD_INT 1
55398: ARRAY
55399: PUSH
55400: FOR_TO
55401: IFFALSE 55442
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
55403: LD_VAR 0 2
55407: PUSH
55408: LD_INT 1
55410: ARRAY
55411: PUSH
55412: LD_VAR 0 1
55416: ARRAY
55417: PPUSH
55418: LD_VAR 0 2
55422: PUSH
55423: LD_INT 2
55425: ARRAY
55426: PUSH
55427: LD_VAR 0 1
55431: ARRAY
55432: PPUSH
55433: LD_INT 15
55435: PPUSH
55436: CALL_OW 495
55440: GO 55400
55442: POP
55443: POP
// until false ;
55444: LD_INT 0
55446: IFFALSE 55372
// end ;
55448: PPOPN 2
55450: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
55451: LD_INT 0
55453: PPUSH
55454: PPUSH
55455: PPUSH
55456: PPUSH
55457: PPUSH
// if mpTeamGame then
55458: LD_EXP 9
55462: IFFALSE 55659
// begin first := depots [ 1 ] ;
55464: LD_ADDR_VAR 0 4
55468: PUSH
55469: LD_VAR 0 1
55473: PUSH
55474: LD_INT 1
55476: ARRAY
55477: ST_TO_ADDR
// side := GetSide ( first ) ;
55478: LD_ADDR_VAR 0 6
55482: PUSH
55483: LD_VAR 0 4
55487: PPUSH
55488: CALL_OW 255
55492: ST_TO_ADDR
// for i := 1 to mpTeams do
55493: LD_ADDR_VAR 0 3
55497: PUSH
55498: DOUBLE
55499: LD_INT 1
55501: DEC
55502: ST_TO_ADDR
55503: LD_EXP 8
55507: PUSH
55508: FOR_TO
55509: IFFALSE 55543
// if side in mpTeams [ i ] then
55511: LD_VAR 0 6
55515: PUSH
55516: LD_EXP 8
55520: PUSH
55521: LD_VAR 0 3
55525: ARRAY
55526: IN
55527: IFFALSE 55541
// begin team := i ;
55529: LD_ADDR_VAR 0 5
55533: PUSH
55534: LD_VAR 0 3
55538: ST_TO_ADDR
// break ;
55539: GO 55543
// end ;
55541: GO 55508
55543: POP
55544: POP
// if not team then
55545: LD_VAR 0 5
55549: NOT
55550: IFFALSE 55554
// exit ;
55552: GO 55768
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55554: LD_EXP 32
55558: PPUSH
55559: LD_INT 81
55561: PUSH
55562: LD_VAR 0 6
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PPUSH
55571: CALL_OW 70
55575: IFFALSE 55579
// exit ;
55577: GO 55768
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
55579: LD_ADDR_EXP 48
55583: PUSH
55584: LD_EXP 48
55588: PPUSH
55589: LD_VAR 0 5
55593: PPUSH
55594: LD_EXP 48
55598: PUSH
55599: LD_VAR 0 5
55603: ARRAY
55604: PUSH
55605: LD_INT 1
55607: PLUS
55608: PPUSH
55609: CALL_OW 1
55613: ST_TO_ADDR
// for i in mpTeams [ team ] do
55614: LD_ADDR_VAR 0 3
55618: PUSH
55619: LD_EXP 8
55623: PUSH
55624: LD_VAR 0 5
55628: ARRAY
55629: PUSH
55630: FOR_IN
55631: IFFALSE 55655
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
55633: LD_VAR 0 3
55637: PPUSH
55638: LD_EXP 48
55642: PUSH
55643: LD_VAR 0 5
55647: ARRAY
55648: PPUSH
55649: CALL_OW 506
55653: GO 55630
55655: POP
55656: POP
// end else
55657: GO 55768
// begin first := depots [ 1 ] ;
55659: LD_ADDR_VAR 0 4
55663: PUSH
55664: LD_VAR 0 1
55668: PUSH
55669: LD_INT 1
55671: ARRAY
55672: ST_TO_ADDR
// side := GetSide ( first ) ;
55673: LD_ADDR_VAR 0 6
55677: PUSH
55678: LD_VAR 0 4
55682: PPUSH
55683: CALL_OW 255
55687: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55688: LD_EXP 32
55692: PPUSH
55693: LD_INT 81
55695: PUSH
55696: LD_VAR 0 6
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PPUSH
55705: CALL_OW 70
55709: IFFALSE 55713
// exit ;
55711: GO 55768
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
55713: LD_ADDR_EXP 48
55717: PUSH
55718: LD_EXP 48
55722: PPUSH
55723: LD_VAR 0 6
55727: PPUSH
55728: LD_EXP 48
55732: PUSH
55733: LD_VAR 0 6
55737: ARRAY
55738: PUSH
55739: LD_INT 1
55741: PLUS
55742: PPUSH
55743: CALL_OW 1
55747: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
55748: LD_VAR 0 6
55752: PPUSH
55753: LD_EXP 48
55757: PUSH
55758: LD_VAR 0 6
55762: ARRAY
55763: PPUSH
55764: CALL_OW 506
// end ; end ;
55768: LD_VAR 0 2
55772: RET
// function UpdateCounter ; var i ; begin
55773: LD_INT 0
55775: PPUSH
55776: PPUSH
// result := [ ] ;
55777: LD_ADDR_VAR 0 1
55781: PUSH
55782: EMPTY
55783: ST_TO_ADDR
// if mpTeamGame then
55784: LD_EXP 9
55788: IFFALSE 55855
// begin for i := 1 to mpTeams do
55790: LD_ADDR_VAR 0 2
55794: PUSH
55795: DOUBLE
55796: LD_INT 1
55798: DEC
55799: ST_TO_ADDR
55800: LD_EXP 8
55804: PUSH
55805: FOR_TO
55806: IFFALSE 55851
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
55808: LD_ADDR_VAR 0 1
55812: PUSH
55813: LD_VAR 0 1
55817: PUSH
55818: LD_STRING #KingoftheHill-Team
55820: PUSH
55821: LD_VAR 0 2
55825: PUSH
55826: LD_EXP 48
55830: PUSH
55831: LD_VAR 0 2
55835: ARRAY
55836: PUSH
55837: LD_EXP 33
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: ADD
55848: ST_TO_ADDR
55849: GO 55805
55851: POP
55852: POP
// end else
55853: GO 55928
// begin for i := 1 to 8 do
55855: LD_ADDR_VAR 0 2
55859: PUSH
55860: DOUBLE
55861: LD_INT 1
55863: DEC
55864: ST_TO_ADDR
55865: LD_INT 8
55867: PUSH
55868: FOR_TO
55869: IFFALSE 55926
// if mpSidePositions [ i ] then
55871: LD_EXP 5
55875: PUSH
55876: LD_VAR 0 2
55880: ARRAY
55881: IFFALSE 55924
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
55883: LD_ADDR_VAR 0 1
55887: PUSH
55888: LD_VAR 0 1
55892: PUSH
55893: LD_STRING #KingoftheHill-Player
55895: PUSH
55896: LD_VAR 0 2
55900: PUSH
55901: LD_EXP 48
55905: PUSH
55906: LD_VAR 0 2
55910: ARRAY
55911: PUSH
55912: LD_EXP 33
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: ADD
55923: ST_TO_ADDR
55924: GO 55868
55926: POP
55927: POP
// end ; mpDisplayStrings := result ;
55928: LD_ADDR_EXP 36
55932: PUSH
55933: LD_VAR 0 1
55937: ST_TO_ADDR
// end ;
55938: LD_VAR 0 1
55942: RET
// export function HowMuchPointsKing ( side ) ; begin
55943: LD_INT 0
55945: PPUSH
// result := HowMuchPoints ( side ) ;
55946: LD_ADDR_VAR 0 2
55950: PUSH
55951: LD_VAR 0 1
55955: PPUSH
55956: CALL 55966 0 1
55960: ST_TO_ADDR
// end ;
55961: LD_VAR 0 2
55965: RET
// function HowMuchPoints ( side ) ; var i ; begin
55966: LD_INT 0
55968: PPUSH
55969: PPUSH
// if mpTeamGame then
55970: LD_EXP 9
55974: IFFALSE 56043
// begin for i := 1 to Count ( mpTeams ) do
55976: LD_ADDR_VAR 0 3
55980: PUSH
55981: DOUBLE
55982: LD_INT 1
55984: DEC
55985: ST_TO_ADDR
55986: LD_EXP 8
55990: PPUSH
55991: CALL 5060 0 1
55995: PUSH
55996: FOR_TO
55997: IFFALSE 56039
// begin if side in mpTeams [ i ] then
55999: LD_VAR 0 1
56003: PUSH
56004: LD_EXP 8
56008: PUSH
56009: LD_VAR 0 3
56013: ARRAY
56014: IN
56015: IFFALSE 56037
// begin result := mpKingPoints [ i ] ;
56017: LD_ADDR_VAR 0 2
56021: PUSH
56022: LD_EXP 48
56026: PUSH
56027: LD_VAR 0 3
56031: ARRAY
56032: ST_TO_ADDR
// exit ;
56033: POP
56034: POP
56035: GO 56059
// end ; end ;
56037: GO 55996
56039: POP
56040: POP
// end else
56041: GO 56059
// result := mpKingPoints [ side ] ;
56043: LD_ADDR_VAR 0 2
56047: PUSH
56048: LD_EXP 48
56052: PUSH
56053: LD_VAR 0 1
56057: ARRAY
56058: ST_TO_ADDR
// end ;
56059: LD_VAR 0 2
56063: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
56064: LD_EXP 37
56068: IFFALSE 56076
56070: PUSH
56071: CALL 56488 0 0
56075: AND
56076: IFFALSE 56084
56078: PUSH
56079: LD_OWVAR 4
56083: AND
56084: IFFALSE 56337
56086: GO 56088
56088: DISABLE
56089: LD_INT 0
56091: PPUSH
56092: PPUSH
// begin canWin := false ;
56093: LD_ADDR_VAR 0 2
56097: PUSH
56098: LD_INT 0
56100: ST_TO_ADDR
// if not HasPower ( your_side ) then
56101: LD_OWVAR 2
56105: PPUSH
56106: CALL 56530 0 1
56110: NOT
56111: IFFALSE 56122
// begin Multiplayer_Loose_Message ;
56113: CALL_OW 521
// enable ( mpLose ) ;
56117: LD_INT 102
56119: ENABLE_MARKED
// end else
56120: GO 56337
// begin if not EnemiesInGame then
56122: CALL 56340 0 0
56126: NOT
56127: IFFALSE 56134
// begin enable ( mpWin ) ;
56129: LD_INT 101
56131: ENABLE_MARKED
// exit ;
56132: GO 56337
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
56134: LD_ADDR_VAR 0 2
56138: PUSH
56139: LD_OWVAR 2
56143: PPUSH
56144: CALL 55966 0 1
56148: PUSH
56149: LD_EXP 33
56153: GREATEREQUAL
56154: IFFALSE 56167
56156: PUSH
56157: LD_OWVAR 2
56161: PPUSH
56162: CALL 56530 0 1
56166: AND
56167: ST_TO_ADDR
// for i := 1 to 8 do
56168: LD_ADDR_VAR 0 1
56172: PUSH
56173: DOUBLE
56174: LD_INT 1
56176: DEC
56177: ST_TO_ADDR
56178: LD_INT 8
56180: PUSH
56181: FOR_TO
56182: IFFALSE 56323
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
56184: LD_EXP 5
56188: PUSH
56189: LD_VAR 0 1
56193: ARRAY
56194: IFFALSE 56207
56196: PUSH
56197: LD_VAR 0 1
56201: PPUSH
56202: CALL_OW 108
56206: AND
56207: IFFALSE 56221
56209: PUSH
56210: LD_VAR 0 1
56214: PUSH
56215: LD_OWVAR 2
56219: NONEQUAL
56220: AND
56221: IFFALSE 56321
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
56223: LD_EXP 6
56227: PUSH
56228: LD_VAR 0 1
56232: ARRAY
56233: NOT
56234: IFTRUE 56282
56236: PUSH
56237: LD_EXP 6
56241: PUSH
56242: LD_VAR 0 1
56246: ARRAY
56247: PUSH
56248: LD_EXP 6
56252: PUSH
56253: LD_OWVAR 2
56257: ARRAY
56258: NONEQUAL
56259: IFFALSE 56281
56261: PUSH
56262: LD_OWVAR 2
56266: PPUSH
56267: LD_VAR 0 1
56271: PPUSH
56272: CALL_OW 81
56276: PUSH
56277: LD_INT 1
56279: NONEQUAL
56280: AND
56281: OR
56282: IFFALSE 56321
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
56284: LD_VAR 0 1
56288: PPUSH
56289: CALL 55966 0 1
56293: PUSH
56294: LD_EXP 33
56298: GREATEREQUAL
56299: IFFALSE 56312
56301: PUSH
56302: LD_VAR 0 1
56306: PPUSH
56307: CALL 56530 0 1
56311: AND
56312: IFFALSE 56321
// begin enable ( mpLose ) ;
56314: LD_INT 102
56316: ENABLE_MARKED
// exit ;
56317: POP
56318: POP
56319: GO 56337
// end ;
56321: GO 56181
56323: POP
56324: POP
// if canWin then
56325: LD_VAR 0 2
56329: IFFALSE 56336
// enable ( mpWin ) else
56331: LD_INT 101
56333: ENABLE_MARKED
56334: GO 56337
// enable ;
56336: ENABLE
// end ; end ;
56337: PPOPN 2
56339: END
// function EnemiesInGame ; var i ; begin
56340: LD_INT 0
56342: PPUSH
56343: PPUSH
// result := false ;
56344: LD_ADDR_VAR 0 1
56348: PUSH
56349: LD_INT 0
56351: ST_TO_ADDR
// for i := 1 to 8 do
56352: LD_ADDR_VAR 0 2
56356: PUSH
56357: DOUBLE
56358: LD_INT 1
56360: DEC
56361: ST_TO_ADDR
56362: LD_INT 8
56364: PUSH
56365: FOR_TO
56366: IFFALSE 56481
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
56368: LD_VAR 0 2
56372: PUSH
56373: LD_OWVAR 2
56377: NONEQUAL
56378: IFFALSE 56391
56380: PUSH
56381: LD_VAR 0 2
56385: PPUSH
56386: CALL 56530 0 1
56390: AND
56391: IFFALSE 56404
56393: PUSH
56394: LD_VAR 0 2
56398: PPUSH
56399: CALL_OW 108
56403: AND
56404: IFFALSE 56479
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
56406: LD_EXP 6
56410: PUSH
56411: LD_VAR 0 2
56415: ARRAY
56416: NOT
56417: IFTRUE 56465
56419: PUSH
56420: LD_EXP 6
56424: PUSH
56425: LD_VAR 0 2
56429: ARRAY
56430: PUSH
56431: LD_EXP 6
56435: PUSH
56436: LD_OWVAR 2
56440: ARRAY
56441: NONEQUAL
56442: IFFALSE 56464
56444: PUSH
56445: LD_OWVAR 2
56449: PPUSH
56450: LD_VAR 0 2
56454: PPUSH
56455: CALL_OW 81
56459: PUSH
56460: LD_INT 1
56462: NONEQUAL
56463: AND
56464: OR
56465: IFFALSE 56479
// begin result := true ;
56467: LD_ADDR_VAR 0 1
56471: PUSH
56472: LD_INT 1
56474: ST_TO_ADDR
// exit ;
56475: POP
56476: POP
56477: GO 56483
// end ;
56479: GO 56365
56481: POP
56482: POP
// end ;
56483: LD_VAR 0 1
56487: RET
// function CanWinLoose ; begin
56488: LD_INT 0
56490: PPUSH
// result := true ;
56491: LD_ADDR_VAR 0 1
56495: PUSH
56496: LD_INT 1
56498: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
56499: CALL_OW 531
56503: IFFALSE 56515
56505: PUSH
56506: CALL_OW 519
56510: PUSH
56511: LD_INT 1
56513: GREATER
56514: AND
56515: IFFALSE 56525
// result := false ;
56517: LD_ADDR_VAR 0 1
56521: PUSH
56522: LD_INT 0
56524: ST_TO_ADDR
// end ;
56525: LD_VAR 0 1
56529: RET
// function HasPower ( i ) ; begin
56530: LD_INT 0
56532: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
56533: LD_ADDR_VAR 0 2
56537: PUSH
56538: LD_INT 22
56540: PUSH
56541: LD_VAR 0 1
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: LD_INT 21
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 33
56565: PUSH
56566: LD_INT 3
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 33
56575: PUSH
56576: LD_INT 5
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PPUSH
56593: CALL_OW 69
56597: ST_TO_ADDR
// end ; end_of_file
56598: LD_VAR 0 2
56602: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56603: LD_VAR 0 1
56607: PUSH
56608: LD_INT 200
56610: DOUBLE
56611: GREATEREQUAL
56612: IFFALSE 56620
56614: LD_INT 299
56616: DOUBLE
56617: LESSEQUAL
56618: IFTRUE 56622
56620: GO 56654
56622: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56623: LD_VAR 0 1
56627: PPUSH
56628: LD_VAR 0 2
56632: PPUSH
56633: LD_VAR 0 3
56637: PPUSH
56638: LD_VAR 0 4
56642: PPUSH
56643: LD_VAR 0 5
56647: PPUSH
56648: CALL 57516 0 5
56652: GO 56731
56654: LD_INT 300
56656: DOUBLE
56657: GREATEREQUAL
56658: IFFALSE 56666
56660: LD_INT 399
56662: DOUBLE
56663: LESSEQUAL
56664: IFTRUE 56668
56666: GO 56730
56668: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56669: LD_VAR 0 1
56673: PPUSH
56674: LD_VAR 0 2
56678: PPUSH
56679: LD_VAR 0 3
56683: PPUSH
56684: LD_VAR 0 4
56688: PPUSH
56689: LD_VAR 0 5
56693: PPUSH
56694: LD_VAR 0 6
56698: PPUSH
56699: LD_VAR 0 7
56703: PPUSH
56704: LD_VAR 0 8
56708: PPUSH
56709: LD_VAR 0 9
56713: PPUSH
56714: LD_VAR 0 10
56718: PPUSH
56719: LD_VAR 0 11
56723: PPUSH
56724: CALL 63944 0 11
56728: GO 56731
56730: POP
// end ;
56731: PPOPN 11
56733: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56734: LD_VAR 0 1
56738: PPUSH
56739: LD_VAR 0 2
56743: PPUSH
56744: LD_VAR 0 3
56748: PPUSH
56749: LD_VAR 0 4
56753: PPUSH
56754: LD_VAR 0 5
56758: PPUSH
56759: CALL 56816 0 5
// end ; end_of_file
56763: PPOPN 5
56765: END
// export function SOS_UnitDestroyed ( un ) ; begin
56766: LD_INT 0
56768: PPUSH
// ComRadiation ( un ) ;
56769: LD_VAR 0 1
56773: PPUSH
56774: CALL 57936 0 1
// end ;
56778: LD_VAR 0 2
56782: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56783: LD_INT 0
56785: PPUSH
// ComRadiation ( un ) ;
56786: LD_VAR 0 1
56790: PPUSH
56791: CALL 57936 0 1
// end ;
56795: LD_VAR 0 2
56799: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56800: LD_INT 0
56802: PPUSH
// end ;
56803: LD_VAR 0 4
56807: RET
// export function SOS_Command ( cmd ) ; begin
56808: LD_INT 0
56810: PPUSH
// end ;
56811: LD_VAR 0 2
56815: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56816: LD_INT 0
56818: PPUSH
// end ;
56819: LD_VAR 0 6
56823: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
56824: LD_INT 0
56826: PPUSH
56827: PPUSH
56828: PPUSH
56829: PPUSH
56830: PPUSH
// if not vehicle or not factory then
56831: LD_VAR 0 1
56835: NOT
56836: IFTRUE 56845
56838: PUSH
56839: LD_VAR 0 2
56843: NOT
56844: OR
56845: IFFALSE 56849
// exit ;
56847: GO 57511
// weapon := GetWeapon ( vehicle ) ;
56849: LD_ADDR_VAR 0 7
56853: PUSH
56854: LD_VAR 0 1
56858: PPUSH
56859: CALL_OW 264
56863: ST_TO_ADDR
// if weapon = ar_miner then
56864: LD_VAR 0 7
56868: PUSH
56869: LD_INT 81
56871: EQUAL
56872: IFFALSE 56929
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
56874: LD_ADDR_EXP 56
56878: PUSH
56879: LD_EXP 56
56883: PPUSH
56884: LD_EXP 56
56888: PUSH
56889: LD_INT 1
56891: PLUS
56892: PPUSH
56893: LD_VAR 0 1
56897: PPUSH
56898: CALL_OW 1
56902: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56903: LD_ADDR_EXP 57
56907: PUSH
56908: LD_EXP 57
56912: PPUSH
56913: LD_EXP 57
56917: PUSH
56918: LD_INT 1
56920: PLUS
56921: PPUSH
56922: EMPTY
56923: PPUSH
56924: CALL_OW 1
56928: ST_TO_ADDR
// end ; if not factoryWaypoints then
56929: LD_EXP 59
56933: NOT
56934: IFFALSE 56938
// exit ;
56936: GO 57511
// for i := 1 to Count ( factoryWaypoints ) do
56938: LD_ADDR_VAR 0 4
56942: PUSH
56943: DOUBLE
56944: LD_INT 1
56946: DEC
56947: ST_TO_ADDR
56948: LD_EXP 59
56952: PPUSH
56953: CALL 5060 0 1
56957: PUSH
56958: FOR_TO
56959: IFFALSE 57509
// if factoryWaypoints [ i ] [ 2 ] = factory then
56961: LD_EXP 59
56965: PUSH
56966: LD_VAR 0 4
56970: ARRAY
56971: PUSH
56972: LD_INT 2
56974: ARRAY
56975: PUSH
56976: LD_VAR 0 2
56980: EQUAL
56981: IFFALSE 57507
// begin if GetControl ( vehicle ) = control_manual then
56983: LD_VAR 0 1
56987: PPUSH
56988: CALL_OW 263
56992: PUSH
56993: LD_INT 1
56995: EQUAL
56996: IFFALSE 57360
// begin driver := IsDrivenBy ( vehicle ) ;
56998: LD_ADDR_VAR 0 5
57002: PUSH
57003: LD_VAR 0 1
57007: PPUSH
57008: CALL_OW 311
57012: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
57013: LD_VAR 0 5
57017: PUSH
57018: LD_EXP 60
57022: IN
57023: IFTRUE 57037
57025: PUSH
57026: LD_VAR 0 1
57030: PUSH
57031: LD_EXP 60
57035: IN
57036: OR
57037: IFFALSE 57043
// exit ;
57039: POP
57040: POP
57041: GO 57511
// if not HasTask ( driver ) then
57043: LD_VAR 0 5
57047: PPUSH
57048: CALL_OW 314
57052: NOT
57053: IFFALSE 57358
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
57055: LD_ADDR_EXP 60
57059: PUSH
57060: LD_EXP 60
57064: PPUSH
57065: LD_VAR 0 5
57069: PPUSH
57070: CALL 41036 0 2
57074: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
57075: LD_ADDR_EXP 60
57079: PUSH
57080: LD_EXP 60
57084: PPUSH
57085: LD_VAR 0 1
57089: PPUSH
57090: CALL 41036 0 2
57094: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57095: LD_ADDR_VAR 0 6
57099: PUSH
57100: LD_EXP 59
57104: PUSH
57105: LD_VAR 0 4
57109: ARRAY
57110: PUSH
57111: LD_INT 3
57113: ARRAY
57114: PPUSH
57115: LD_EXP 59
57119: PUSH
57120: LD_VAR 0 4
57124: ARRAY
57125: PUSH
57126: LD_INT 4
57128: ARRAY
57129: PPUSH
57130: CALL_OW 428
57134: ST_TO_ADDR
// if hex then
57135: LD_VAR 0 6
57139: IFFALSE 57157
// ComMoveUnit ( driver , hex ) else
57141: LD_VAR 0 5
57145: PPUSH
57146: LD_VAR 0 6
57150: PPUSH
57151: CALL_OW 112
57155: GO 57241
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
57157: LD_VAR 0 1
57161: PPUSH
57162: LD_EXP 59
57166: PUSH
57167: LD_VAR 0 4
57171: ARRAY
57172: PUSH
57173: LD_INT 3
57175: ARRAY
57176: PPUSH
57177: LD_EXP 59
57181: PUSH
57182: LD_VAR 0 4
57186: ARRAY
57187: PUSH
57188: LD_INT 4
57190: ARRAY
57191: PPUSH
57192: CALL_OW 297
57196: PUSH
57197: LD_INT 0
57199: GREATER
57200: IFFALSE 57241
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57202: LD_VAR 0 5
57206: PPUSH
57207: LD_EXP 59
57211: PUSH
57212: LD_VAR 0 4
57216: ARRAY
57217: PUSH
57218: LD_INT 3
57220: ARRAY
57221: PPUSH
57222: LD_EXP 59
57226: PUSH
57227: LD_VAR 0 4
57231: ARRAY
57232: PUSH
57233: LD_INT 4
57235: ARRAY
57236: PPUSH
57237: CALL_OW 111
// AddComExitVehicle ( driver ) ;
57241: LD_VAR 0 5
57245: PPUSH
57246: CALL_OW 181
// if Multiplayer then
57250: LD_OWVAR 4
57254: IFFALSE 57303
// begin repeat wait ( 10 ) ;
57256: LD_INT 10
57258: PPUSH
57259: CALL_OW 67
// until not IsInUnit ( driver ) ;
57263: LD_VAR 0 5
57267: PPUSH
57268: CALL_OW 310
57272: NOT
57273: IFFALSE 57256
// if not HasTask ( driver ) then
57275: LD_VAR 0 5
57279: PPUSH
57280: CALL_OW 314
57284: NOT
57285: IFFALSE 57301
// ComEnterUnit ( driver , factory ) ;
57287: LD_VAR 0 5
57291: PPUSH
57292: LD_VAR 0 2
57296: PPUSH
57297: CALL_OW 120
// end else
57301: GO 57317
// AddComEnterUnit ( driver , factory ) ;
57303: LD_VAR 0 5
57307: PPUSH
57308: LD_VAR 0 2
57312: PPUSH
57313: CALL_OW 180
// wait ( 0 0$1 ) ;
57317: LD_INT 35
57319: PPUSH
57320: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
57324: LD_ADDR_EXP 60
57328: PUSH
57329: LD_EXP 60
57333: PUSH
57334: LD_VAR 0 5
57338: DIFF
57339: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
57340: LD_ADDR_EXP 60
57344: PUSH
57345: LD_EXP 60
57349: PUSH
57350: LD_VAR 0 1
57354: DIFF
57355: ST_TO_ADDR
// break ;
57356: GO 57509
// end ; end else
57358: GO 57507
// if GetControl ( vehicle ) = control_remote then
57360: LD_VAR 0 1
57364: PPUSH
57365: CALL_OW 263
57369: PUSH
57370: LD_INT 2
57372: EQUAL
57373: IFFALSE 57459
// begin wait ( 0 0$2 ) ;
57375: LD_INT 70
57377: PPUSH
57378: CALL_OW 67
// repeat wait ( 10 ) ;
57382: LD_INT 10
57384: PPUSH
57385: CALL_OW 67
// Connect ( vehicle ) ;
57389: LD_VAR 0 1
57393: PPUSH
57394: CALL 11338 0 1
// until IsControledBy ( vehicle ) ;
57398: LD_VAR 0 1
57402: PPUSH
57403: CALL_OW 312
57407: IFFALSE 57382
// wait ( 10 ) ;
57409: LD_INT 10
57411: PPUSH
57412: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57416: LD_VAR 0 1
57420: PPUSH
57421: LD_EXP 59
57425: PUSH
57426: LD_VAR 0 4
57430: ARRAY
57431: PUSH
57432: LD_INT 3
57434: ARRAY
57435: PPUSH
57436: LD_EXP 59
57440: PUSH
57441: LD_VAR 0 4
57445: ARRAY
57446: PUSH
57447: LD_INT 4
57449: ARRAY
57450: PPUSH
57451: CALL_OW 111
// break ;
57455: GO 57509
// end else
57457: GO 57507
// begin wait ( 0 0$3 ) ;
57459: LD_INT 105
57461: PPUSH
57462: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57466: LD_VAR 0 1
57470: PPUSH
57471: LD_EXP 59
57475: PUSH
57476: LD_VAR 0 4
57480: ARRAY
57481: PUSH
57482: LD_INT 3
57484: ARRAY
57485: PPUSH
57486: LD_EXP 59
57490: PUSH
57491: LD_VAR 0 4
57495: ARRAY
57496: PUSH
57497: LD_INT 4
57499: ARRAY
57500: PPUSH
57501: CALL_OW 111
// break ;
57505: GO 57509
// end ; end ;
57507: GO 56958
57509: POP
57510: POP
// end ;
57511: LD_VAR 0 3
57515: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57516: LD_INT 0
57518: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57519: LD_VAR 0 1
57523: PUSH
57524: LD_INT 250
57526: EQUAL
57527: IFFALSE 57544
57529: PUSH
57530: LD_VAR 0 2
57534: PPUSH
57535: CALL_OW 264
57539: PUSH
57540: LD_INT 81
57542: EQUAL
57543: AND
57544: IFFALSE 57565
// MinerPlaceMine ( unit , x , y ) ;
57546: LD_VAR 0 2
57550: PPUSH
57551: LD_VAR 0 4
57555: PPUSH
57556: LD_VAR 0 5
57560: PPUSH
57561: CALL 60911 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57565: LD_VAR 0 1
57569: PUSH
57570: LD_INT 251
57572: EQUAL
57573: IFFALSE 57590
57575: PUSH
57576: LD_VAR 0 2
57580: PPUSH
57581: CALL_OW 264
57585: PUSH
57586: LD_INT 81
57588: EQUAL
57589: AND
57590: IFFALSE 57611
// MinerDetonateMine ( unit , x , y ) ;
57592: LD_VAR 0 2
57596: PPUSH
57597: LD_VAR 0 4
57601: PPUSH
57602: LD_VAR 0 5
57606: PPUSH
57607: CALL 61318 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57611: LD_VAR 0 1
57615: PUSH
57616: LD_INT 252
57618: EQUAL
57619: IFFALSE 57636
57621: PUSH
57622: LD_VAR 0 2
57626: PPUSH
57627: CALL_OW 264
57631: PUSH
57632: LD_INT 81
57634: EQUAL
57635: AND
57636: IFFALSE 57657
// MinerCreateMinefield ( unit , x , y ) ;
57638: LD_VAR 0 2
57642: PPUSH
57643: LD_VAR 0 4
57647: PPUSH
57648: LD_VAR 0 5
57652: PPUSH
57653: CALL 61550 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57657: LD_VAR 0 1
57661: PUSH
57662: LD_INT 253
57664: EQUAL
57665: IFFALSE 57682
57667: PUSH
57668: LD_VAR 0 2
57672: PPUSH
57673: CALL_OW 257
57677: PUSH
57678: LD_INT 5
57680: EQUAL
57681: AND
57682: IFFALSE 57703
// ComBinocular ( unit , x , y ) ;
57684: LD_VAR 0 2
57688: PPUSH
57689: LD_VAR 0 4
57693: PPUSH
57694: LD_VAR 0 5
57698: PPUSH
57699: CALL 61925 0 3
// if selectedUnit then
57703: LD_VAR 0 3
57707: IFFALSE 57767
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57709: LD_VAR 0 1
57713: PUSH
57714: LD_INT 254
57716: EQUAL
57717: IFFALSE 57734
57719: PUSH
57720: LD_VAR 0 2
57724: PPUSH
57725: CALL_OW 264
57729: PUSH
57730: LD_INT 99
57732: EQUAL
57733: AND
57734: IFFALSE 57751
57736: PUSH
57737: LD_VAR 0 3
57741: PPUSH
57742: CALL_OW 263
57746: PUSH
57747: LD_INT 3
57749: EQUAL
57750: AND
57751: IFFALSE 57767
// HackDestroyVehicle ( unit , selectedUnit ) ;
57753: LD_VAR 0 2
57757: PPUSH
57758: LD_VAR 0 3
57762: PPUSH
57763: CALL 60101 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57767: LD_VAR 0 1
57771: PUSH
57772: LD_INT 255
57774: EQUAL
57775: IFFALSE 57799
57777: PUSH
57778: LD_VAR 0 2
57782: PPUSH
57783: CALL_OW 264
57787: PUSH
57788: LD_INT 14
57790: PUSH
57791: LD_INT 53
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: IN
57798: AND
57799: IFFALSE 57817
57801: PUSH
57802: LD_VAR 0 4
57806: PPUSH
57807: LD_VAR 0 5
57811: PPUSH
57812: CALL_OW 488
57816: AND
57817: IFFALSE 57841
// CutTreeXYR ( unit , x , y , 12 ) ;
57819: LD_VAR 0 2
57823: PPUSH
57824: LD_VAR 0 4
57828: PPUSH
57829: LD_VAR 0 5
57833: PPUSH
57834: LD_INT 12
57836: PPUSH
57837: CALL 58032 0 4
// if cmd = 256 then
57841: LD_VAR 0 1
57845: PUSH
57846: LD_INT 256
57848: EQUAL
57849: IFFALSE 57870
// SetFactoryWaypoint ( unit , x , y ) ;
57851: LD_VAR 0 2
57855: PPUSH
57856: LD_VAR 0 4
57860: PPUSH
57861: LD_VAR 0 5
57865: PPUSH
57866: CALL 63952 0 3
// if cmd = 257 then
57870: LD_VAR 0 1
57874: PUSH
57875: LD_INT 257
57877: EQUAL
57878: IFFALSE 57899
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57880: LD_VAR 0 2
57884: PPUSH
57885: LD_VAR 0 4
57889: PPUSH
57890: LD_VAR 0 5
57894: PPUSH
57895: CALL 64448 0 3
// if cmd = 258 then
57899: LD_VAR 0 1
57903: PUSH
57904: LD_INT 258
57906: EQUAL
57907: IFFALSE 57931
// BurnTreeXYR ( unit , x , y , 8 ) ;
57909: LD_VAR 0 2
57913: PPUSH
57914: LD_VAR 0 4
57918: PPUSH
57919: LD_VAR 0 5
57923: PPUSH
57924: LD_INT 8
57926: PPUSH
57927: CALL 58454 0 4
// end ;
57931: LD_VAR 0 6
57935: RET
// export function ComRadiation ( un ) ; var eff ; begin
57936: LD_INT 0
57938: PPUSH
57939: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
57940: LD_VAR 0 1
57944: PPUSH
57945: CALL_OW 264
57949: PUSH
57950: LD_INT 91
57952: NONEQUAL
57953: IFFALSE 57957
// exit ;
57955: GO 58027
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57957: LD_INT 68
57959: PPUSH
57960: LD_VAR 0 1
57964: PPUSH
57965: CALL_OW 255
57969: PPUSH
57970: CALL_OW 321
57974: PUSH
57975: LD_INT 2
57977: EQUAL
57978: IFFALSE 57990
// eff := 50 else
57980: LD_ADDR_VAR 0 3
57984: PUSH
57985: LD_INT 50
57987: ST_TO_ADDR
57988: GO 57998
// eff := 25 ;
57990: LD_ADDR_VAR 0 3
57994: PUSH
57995: LD_INT 25
57997: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57998: LD_VAR 0 1
58002: PPUSH
58003: CALL_OW 250
58007: PPUSH
58008: LD_VAR 0 1
58012: PPUSH
58013: CALL_OW 251
58017: PPUSH
58018: LD_VAR 0 3
58022: PPUSH
58023: CALL_OW 495
// end ;
58027: LD_VAR 0 2
58031: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58032: LD_INT 0
58034: PPUSH
58035: PPUSH
58036: PPUSH
58037: PPUSH
58038: PPUSH
58039: PPUSH
58040: PPUSH
58041: PPUSH
58042: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
58043: LD_VAR 0 1
58047: PPUSH
58048: CALL_OW 302
58052: NOT
58053: IFTRUE 58072
58055: PUSH
58056: LD_VAR 0 2
58060: PPUSH
58061: LD_VAR 0 3
58065: PPUSH
58066: CALL_OW 488
58070: NOT
58071: OR
58072: IFTRUE 58081
58074: PUSH
58075: LD_VAR 0 4
58079: NOT
58080: OR
58081: IFFALSE 58085
// exit ;
58083: GO 58449
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
58085: LD_VAR 0 1
58089: PPUSH
58090: CALL_OW 437
58094: PPUSH
58095: CALL 5060 0 1
58099: PUSH
58100: LD_INT 10
58102: GREATER
58103: IFFALSE 58107
// exit ;
58105: GO 58449
// list := [ ] ;
58107: LD_ADDR_VAR 0 13
58111: PUSH
58112: EMPTY
58113: ST_TO_ADDR
// if x - r < 0 then
58114: LD_VAR 0 2
58118: PUSH
58119: LD_VAR 0 4
58123: MINUS
58124: PUSH
58125: LD_INT 0
58127: LESS
58128: IFFALSE 58140
// min_x := 0 else
58130: LD_ADDR_VAR 0 7
58134: PUSH
58135: LD_INT 0
58137: ST_TO_ADDR
58138: GO 58156
// min_x := x - r ;
58140: LD_ADDR_VAR 0 7
58144: PUSH
58145: LD_VAR 0 2
58149: PUSH
58150: LD_VAR 0 4
58154: MINUS
58155: ST_TO_ADDR
// if y - r < 0 then
58156: LD_VAR 0 3
58160: PUSH
58161: LD_VAR 0 4
58165: MINUS
58166: PUSH
58167: LD_INT 0
58169: LESS
58170: IFFALSE 58182
// min_y := 0 else
58172: LD_ADDR_VAR 0 8
58176: PUSH
58177: LD_INT 0
58179: ST_TO_ADDR
58180: GO 58198
// min_y := y - r ;
58182: LD_ADDR_VAR 0 8
58186: PUSH
58187: LD_VAR 0 3
58191: PUSH
58192: LD_VAR 0 4
58196: MINUS
58197: ST_TO_ADDR
// max_x := x + r ;
58198: LD_ADDR_VAR 0 9
58202: PUSH
58203: LD_VAR 0 2
58207: PUSH
58208: LD_VAR 0 4
58212: PLUS
58213: ST_TO_ADDR
// max_y := y + r ;
58214: LD_ADDR_VAR 0 10
58218: PUSH
58219: LD_VAR 0 3
58223: PUSH
58224: LD_VAR 0 4
58228: PLUS
58229: ST_TO_ADDR
// for _x = min_x to max_x do
58230: LD_ADDR_VAR 0 11
58234: PUSH
58235: DOUBLE
58236: LD_VAR 0 7
58240: DEC
58241: ST_TO_ADDR
58242: LD_VAR 0 9
58246: PUSH
58247: FOR_TO
58248: IFFALSE 58367
// for _y = min_y to max_y do
58250: LD_ADDR_VAR 0 12
58254: PUSH
58255: DOUBLE
58256: LD_VAR 0 8
58260: DEC
58261: ST_TO_ADDR
58262: LD_VAR 0 10
58266: PUSH
58267: FOR_TO
58268: IFFALSE 58363
// begin if not ValidHex ( _x , _y ) then
58270: LD_VAR 0 11
58274: PPUSH
58275: LD_VAR 0 12
58279: PPUSH
58280: CALL_OW 488
58284: NOT
58285: IFFALSE 58289
// continue ;
58287: GO 58267
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58289: LD_VAR 0 11
58293: PPUSH
58294: LD_VAR 0 12
58298: PPUSH
58299: CALL_OW 351
58303: IFFALSE 58321
58305: PUSH
58306: LD_VAR 0 11
58310: PPUSH
58311: LD_VAR 0 12
58315: PPUSH
58316: CALL_OW 554
58320: AND
58321: IFFALSE 58361
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58323: LD_ADDR_VAR 0 13
58327: PUSH
58328: LD_VAR 0 13
58332: PPUSH
58333: LD_VAR 0 13
58337: PUSH
58338: LD_INT 1
58340: PLUS
58341: PPUSH
58342: LD_VAR 0 11
58346: PUSH
58347: LD_VAR 0 12
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PPUSH
58356: CALL_OW 2
58360: ST_TO_ADDR
// end ;
58361: GO 58267
58363: POP
58364: POP
58365: GO 58247
58367: POP
58368: POP
// if not list then
58369: LD_VAR 0 13
58373: NOT
58374: IFFALSE 58378
// exit ;
58376: GO 58449
// for i in list do
58378: LD_ADDR_VAR 0 6
58382: PUSH
58383: LD_VAR 0 13
58387: PUSH
58388: FOR_IN
58389: IFFALSE 58447
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58391: LD_VAR 0 1
58395: PPUSH
58396: LD_STRING M
58398: PUSH
58399: LD_VAR 0 6
58403: PUSH
58404: LD_INT 1
58406: ARRAY
58407: PUSH
58408: LD_VAR 0 6
58412: PUSH
58413: LD_INT 2
58415: ARRAY
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: PUSH
58438: EMPTY
58439: LIST
58440: PPUSH
58441: CALL_OW 447
58445: GO 58388
58447: POP
58448: POP
// end ;
58449: LD_VAR 0 5
58453: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
58454: LD_INT 0
58456: PPUSH
58457: PPUSH
58458: PPUSH
58459: PPUSH
58460: PPUSH
58461: PPUSH
58462: PPUSH
58463: PPUSH
58464: PPUSH
58465: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
58466: LD_VAR 0 1
58470: PPUSH
58471: CALL_OW 302
58475: NOT
58476: IFTRUE 58495
58478: PUSH
58479: LD_VAR 0 2
58483: PPUSH
58484: LD_VAR 0 3
58488: PPUSH
58489: CALL_OW 488
58493: NOT
58494: OR
58495: IFTRUE 58504
58497: PUSH
58498: LD_VAR 0 4
58502: NOT
58503: OR
58504: IFFALSE 58508
// exit ;
58506: GO 59047
// if Count ( GetTaskList ( flame ) ) > 10 then
58508: LD_VAR 0 1
58512: PPUSH
58513: CALL_OW 437
58517: PPUSH
58518: CALL 5060 0 1
58522: PUSH
58523: LD_INT 10
58525: GREATER
58526: IFFALSE 58530
// exit ;
58528: GO 59047
// list := [ ] ;
58530: LD_ADDR_VAR 0 13
58534: PUSH
58535: EMPTY
58536: ST_TO_ADDR
// if x - r < 0 then
58537: LD_VAR 0 2
58541: PUSH
58542: LD_VAR 0 4
58546: MINUS
58547: PUSH
58548: LD_INT 0
58550: LESS
58551: IFFALSE 58563
// min_x := 0 else
58553: LD_ADDR_VAR 0 7
58557: PUSH
58558: LD_INT 0
58560: ST_TO_ADDR
58561: GO 58579
// min_x := x - r ;
58563: LD_ADDR_VAR 0 7
58567: PUSH
58568: LD_VAR 0 2
58572: PUSH
58573: LD_VAR 0 4
58577: MINUS
58578: ST_TO_ADDR
// if y - r < 0 then
58579: LD_VAR 0 3
58583: PUSH
58584: LD_VAR 0 4
58588: MINUS
58589: PUSH
58590: LD_INT 0
58592: LESS
58593: IFFALSE 58605
// min_y := 0 else
58595: LD_ADDR_VAR 0 8
58599: PUSH
58600: LD_INT 0
58602: ST_TO_ADDR
58603: GO 58621
// min_y := y - r ;
58605: LD_ADDR_VAR 0 8
58609: PUSH
58610: LD_VAR 0 3
58614: PUSH
58615: LD_VAR 0 4
58619: MINUS
58620: ST_TO_ADDR
// max_x := x + r ;
58621: LD_ADDR_VAR 0 9
58625: PUSH
58626: LD_VAR 0 2
58630: PUSH
58631: LD_VAR 0 4
58635: PLUS
58636: ST_TO_ADDR
// max_y := y + r ;
58637: LD_ADDR_VAR 0 10
58641: PUSH
58642: LD_VAR 0 3
58646: PUSH
58647: LD_VAR 0 4
58651: PLUS
58652: ST_TO_ADDR
// for _x = min_x to max_x do
58653: LD_ADDR_VAR 0 11
58657: PUSH
58658: DOUBLE
58659: LD_VAR 0 7
58663: DEC
58664: ST_TO_ADDR
58665: LD_VAR 0 9
58669: PUSH
58670: FOR_TO
58671: IFFALSE 58790
// for _y = min_y to max_y do
58673: LD_ADDR_VAR 0 12
58677: PUSH
58678: DOUBLE
58679: LD_VAR 0 8
58683: DEC
58684: ST_TO_ADDR
58685: LD_VAR 0 10
58689: PUSH
58690: FOR_TO
58691: IFFALSE 58786
// begin if not ValidHex ( _x , _y ) then
58693: LD_VAR 0 11
58697: PPUSH
58698: LD_VAR 0 12
58702: PPUSH
58703: CALL_OW 488
58707: NOT
58708: IFFALSE 58712
// continue ;
58710: GO 58690
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58712: LD_VAR 0 11
58716: PPUSH
58717: LD_VAR 0 12
58721: PPUSH
58722: CALL_OW 351
58726: IFFALSE 58744
58728: PUSH
58729: LD_VAR 0 11
58733: PPUSH
58734: LD_VAR 0 12
58738: PPUSH
58739: CALL_OW 554
58743: AND
58744: IFFALSE 58784
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58746: LD_ADDR_VAR 0 13
58750: PUSH
58751: LD_VAR 0 13
58755: PPUSH
58756: LD_VAR 0 13
58760: PUSH
58761: LD_INT 1
58763: PLUS
58764: PPUSH
58765: LD_VAR 0 11
58769: PUSH
58770: LD_VAR 0 12
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PPUSH
58779: CALL_OW 2
58783: ST_TO_ADDR
// end ;
58784: GO 58690
58786: POP
58787: POP
58788: GO 58670
58790: POP
58791: POP
// if not list then
58792: LD_VAR 0 13
58796: NOT
58797: IFFALSE 58801
// exit ;
58799: GO 59047
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58801: LD_ADDR_VAR 0 13
58805: PUSH
58806: LD_VAR 0 1
58810: PPUSH
58811: LD_VAR 0 13
58815: PPUSH
58816: LD_INT 1
58818: PPUSH
58819: LD_INT 1
58821: PPUSH
58822: CALL 8466 0 4
58826: ST_TO_ADDR
// ComStop ( flame ) ;
58827: LD_VAR 0 1
58831: PPUSH
58832: CALL_OW 141
// for i in list do
58836: LD_ADDR_VAR 0 6
58840: PUSH
58841: LD_VAR 0 13
58845: PUSH
58846: FOR_IN
58847: IFFALSE 58878
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
58849: LD_VAR 0 1
58853: PPUSH
58854: LD_VAR 0 6
58858: PUSH
58859: LD_INT 1
58861: ARRAY
58862: PPUSH
58863: LD_VAR 0 6
58867: PUSH
58868: LD_INT 2
58870: ARRAY
58871: PPUSH
58872: CALL_OW 176
58876: GO 58846
58878: POP
58879: POP
// repeat wait ( 0 0$1 ) ;
58880: LD_INT 35
58882: PPUSH
58883: CALL_OW 67
// task := GetTaskList ( flame ) ;
58887: LD_ADDR_VAR 0 14
58891: PUSH
58892: LD_VAR 0 1
58896: PPUSH
58897: CALL_OW 437
58901: ST_TO_ADDR
// if not task then
58902: LD_VAR 0 14
58906: NOT
58907: IFFALSE 58911
// exit ;
58909: GO 59047
// if task [ 1 ] [ 1 ] <> | then
58911: LD_VAR 0 14
58915: PUSH
58916: LD_INT 1
58918: ARRAY
58919: PUSH
58920: LD_INT 1
58922: ARRAY
58923: PUSH
58924: LD_STRING |
58926: NONEQUAL
58927: IFFALSE 58931
// exit ;
58929: GO 59047
// _x := task [ 1 ] [ 2 ] ;
58931: LD_ADDR_VAR 0 11
58935: PUSH
58936: LD_VAR 0 14
58940: PUSH
58941: LD_INT 1
58943: ARRAY
58944: PUSH
58945: LD_INT 2
58947: ARRAY
58948: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
58949: LD_ADDR_VAR 0 12
58953: PUSH
58954: LD_VAR 0 14
58958: PUSH
58959: LD_INT 1
58961: ARRAY
58962: PUSH
58963: LD_INT 3
58965: ARRAY
58966: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
58967: LD_VAR 0 11
58971: PPUSH
58972: LD_VAR 0 12
58976: PPUSH
58977: CALL_OW 351
58981: NOT
58982: IFTRUE 59001
58984: PUSH
58985: LD_VAR 0 11
58989: PPUSH
58990: LD_VAR 0 12
58994: PPUSH
58995: CALL_OW 554
58999: NOT
59000: OR
59001: IFFALSE 59035
// begin task := Delete ( task , 1 ) ;
59003: LD_ADDR_VAR 0 14
59007: PUSH
59008: LD_VAR 0 14
59012: PPUSH
59013: LD_INT 1
59015: PPUSH
59016: CALL_OW 3
59020: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
59021: LD_VAR 0 1
59025: PPUSH
59026: LD_VAR 0 14
59030: PPUSH
59031: CALL_OW 446
// end ; until not HasTask ( flame ) ;
59035: LD_VAR 0 1
59039: PPUSH
59040: CALL_OW 314
59044: NOT
59045: IFFALSE 58880
// end ;
59047: LD_VAR 0 5
59051: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59052: LD_EXP 49
59056: NOT
59057: IFFALSE 59107
59059: GO 59061
59061: DISABLE
// begin initHack := true ;
59062: LD_ADDR_EXP 49
59066: PUSH
59067: LD_INT 1
59069: ST_TO_ADDR
// hackTanks := [ ] ;
59070: LD_ADDR_EXP 50
59074: PUSH
59075: EMPTY
59076: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59077: LD_ADDR_EXP 51
59081: PUSH
59082: EMPTY
59083: ST_TO_ADDR
// hackLimit := 3 ;
59084: LD_ADDR_EXP 52
59088: PUSH
59089: LD_INT 3
59091: ST_TO_ADDR
// hackDist := 12 ;
59092: LD_ADDR_EXP 53
59096: PUSH
59097: LD_INT 12
59099: ST_TO_ADDR
// hackCounter := [ ] ;
59100: LD_ADDR_EXP 54
59104: PUSH
59105: EMPTY
59106: ST_TO_ADDR
// end ;
59107: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59108: LD_EXP 49
59112: IFFALSE 59130
59114: PUSH
59115: LD_INT 34
59117: PUSH
59118: LD_INT 99
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PPUSH
59125: CALL_OW 69
59129: AND
59130: IFFALSE 59383
59132: GO 59134
59134: DISABLE
59135: LD_INT 0
59137: PPUSH
59138: PPUSH
// begin enable ;
59139: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59140: LD_ADDR_VAR 0 1
59144: PUSH
59145: LD_INT 34
59147: PUSH
59148: LD_INT 99
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PPUSH
59155: CALL_OW 69
59159: PUSH
59160: FOR_IN
59161: IFFALSE 59381
// begin if not i in hackTanks then
59163: LD_VAR 0 1
59167: PUSH
59168: LD_EXP 50
59172: IN
59173: NOT
59174: IFFALSE 59257
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59176: LD_ADDR_EXP 50
59180: PUSH
59181: LD_EXP 50
59185: PPUSH
59186: LD_EXP 50
59190: PUSH
59191: LD_INT 1
59193: PLUS
59194: PPUSH
59195: LD_VAR 0 1
59199: PPUSH
59200: CALL_OW 1
59204: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59205: LD_ADDR_EXP 51
59209: PUSH
59210: LD_EXP 51
59214: PPUSH
59215: LD_EXP 51
59219: PUSH
59220: LD_INT 1
59222: PLUS
59223: PPUSH
59224: EMPTY
59225: PPUSH
59226: CALL_OW 1
59230: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59231: LD_ADDR_EXP 54
59235: PUSH
59236: LD_EXP 54
59240: PPUSH
59241: LD_EXP 54
59245: PUSH
59246: LD_INT 1
59248: PLUS
59249: PPUSH
59250: EMPTY
59251: PPUSH
59252: CALL_OW 1
59256: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59257: LD_VAR 0 1
59261: PPUSH
59262: CALL_OW 302
59266: NOT
59267: IFFALSE 59280
// begin HackUnlinkAll ( i ) ;
59269: LD_VAR 0 1
59273: PPUSH
59274: CALL 59386 0 1
// continue ;
59278: GO 59160
// end ; HackCheckCapturedStatus ( i ) ;
59280: LD_VAR 0 1
59284: PPUSH
59285: CALL 59831 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59289: LD_ADDR_VAR 0 2
59293: PUSH
59294: LD_INT 81
59296: PUSH
59297: LD_VAR 0 1
59301: PPUSH
59302: CALL_OW 255
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 33
59313: PUSH
59314: LD_INT 3
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 91
59323: PUSH
59324: LD_VAR 0 1
59328: PUSH
59329: LD_EXP 53
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 50
59341: PUSH
59342: EMPTY
59343: LIST
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: PPUSH
59351: CALL_OW 69
59355: ST_TO_ADDR
// if not tmp then
59356: LD_VAR 0 2
59360: NOT
59361: IFFALSE 59365
// continue ;
59363: GO 59160
// HackLink ( i , tmp ) ;
59365: LD_VAR 0 1
59369: PPUSH
59370: LD_VAR 0 2
59374: PPUSH
59375: CALL 59522 0 2
// end ;
59379: GO 59160
59381: POP
59382: POP
// end ;
59383: PPOPN 2
59385: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59386: LD_INT 0
59388: PPUSH
59389: PPUSH
59390: PPUSH
// if not hack in hackTanks then
59391: LD_VAR 0 1
59395: PUSH
59396: LD_EXP 50
59400: IN
59401: NOT
59402: IFFALSE 59406
// exit ;
59404: GO 59517
// index := GetElementIndex ( hackTanks , hack ) ;
59406: LD_ADDR_VAR 0 4
59410: PUSH
59411: LD_EXP 50
59415: PPUSH
59416: LD_VAR 0 1
59420: PPUSH
59421: CALL 7761 0 2
59425: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59426: LD_EXP 51
59430: PUSH
59431: LD_VAR 0 4
59435: ARRAY
59436: IFFALSE 59517
// begin for i in hackTanksCaptured [ index ] do
59438: LD_ADDR_VAR 0 3
59442: PUSH
59443: LD_EXP 51
59447: PUSH
59448: LD_VAR 0 4
59452: ARRAY
59453: PUSH
59454: FOR_IN
59455: IFFALSE 59481
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59457: LD_VAR 0 3
59461: PUSH
59462: LD_INT 1
59464: ARRAY
59465: PPUSH
59466: LD_VAR 0 3
59470: PUSH
59471: LD_INT 2
59473: ARRAY
59474: PPUSH
59475: CALL_OW 235
59479: GO 59454
59481: POP
59482: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59483: LD_ADDR_EXP 51
59487: PUSH
59488: LD_EXP 51
59492: PPUSH
59493: LD_VAR 0 4
59497: PPUSH
59498: EMPTY
59499: PPUSH
59500: CALL_OW 1
59504: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59505: LD_VAR 0 1
59509: PPUSH
59510: LD_INT 0
59512: PPUSH
59513: CALL_OW 505
// end ; end ;
59517: LD_VAR 0 2
59521: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59522: LD_INT 0
59524: PPUSH
59525: PPUSH
59526: PPUSH
// if not hack in hackTanks or not vehicles then
59527: LD_VAR 0 1
59531: PUSH
59532: LD_EXP 50
59536: IN
59537: NOT
59538: IFTRUE 59547
59540: PUSH
59541: LD_VAR 0 2
59545: NOT
59546: OR
59547: IFFALSE 59551
// exit ;
59549: GO 59826
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59551: LD_ADDR_VAR 0 2
59555: PUSH
59556: LD_VAR 0 1
59560: PPUSH
59561: LD_VAR 0 2
59565: PPUSH
59566: LD_INT 1
59568: PPUSH
59569: LD_INT 1
59571: PPUSH
59572: CALL 8413 0 4
59576: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59577: LD_ADDR_VAR 0 5
59581: PUSH
59582: LD_EXP 50
59586: PPUSH
59587: LD_VAR 0 1
59591: PPUSH
59592: CALL 7761 0 2
59596: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59597: LD_EXP 51
59601: PUSH
59602: LD_VAR 0 5
59606: ARRAY
59607: PUSH
59608: LD_EXP 52
59612: LESS
59613: IFFALSE 59802
// begin for i := 1 to vehicles do
59615: LD_ADDR_VAR 0 4
59619: PUSH
59620: DOUBLE
59621: LD_INT 1
59623: DEC
59624: ST_TO_ADDR
59625: LD_VAR 0 2
59629: PUSH
59630: FOR_TO
59631: IFFALSE 59800
// begin if hackTanksCaptured [ index ] = hackLimit then
59633: LD_EXP 51
59637: PUSH
59638: LD_VAR 0 5
59642: ARRAY
59643: PUSH
59644: LD_EXP 52
59648: EQUAL
59649: IFFALSE 59653
// break ;
59651: GO 59800
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59653: LD_ADDR_EXP 54
59657: PUSH
59658: LD_EXP 54
59662: PPUSH
59663: LD_VAR 0 5
59667: PPUSH
59668: LD_EXP 54
59672: PUSH
59673: LD_VAR 0 5
59677: ARRAY
59678: PUSH
59679: LD_INT 1
59681: PLUS
59682: PPUSH
59683: CALL_OW 1
59687: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59688: LD_ADDR_EXP 51
59692: PUSH
59693: LD_EXP 51
59697: PPUSH
59698: LD_VAR 0 5
59702: PUSH
59703: LD_EXP 51
59707: PUSH
59708: LD_VAR 0 5
59712: ARRAY
59713: PUSH
59714: LD_INT 1
59716: PLUS
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PPUSH
59722: LD_VAR 0 2
59726: PUSH
59727: LD_VAR 0 4
59731: ARRAY
59732: PUSH
59733: LD_VAR 0 2
59737: PUSH
59738: LD_VAR 0 4
59742: ARRAY
59743: PPUSH
59744: CALL_OW 255
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PPUSH
59753: CALL 7978 0 3
59757: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59758: LD_VAR 0 2
59762: PUSH
59763: LD_VAR 0 4
59767: ARRAY
59768: PPUSH
59769: LD_VAR 0 1
59773: PPUSH
59774: CALL_OW 255
59778: PPUSH
59779: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59783: LD_VAR 0 2
59787: PUSH
59788: LD_VAR 0 4
59792: ARRAY
59793: PPUSH
59794: CALL_OW 141
// end ;
59798: GO 59630
59800: POP
59801: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59802: LD_VAR 0 1
59806: PPUSH
59807: LD_EXP 51
59811: PUSH
59812: LD_VAR 0 5
59816: ARRAY
59817: PUSH
59818: LD_INT 0
59820: PLUS
59821: PPUSH
59822: CALL_OW 505
// end ;
59826: LD_VAR 0 3
59830: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59831: LD_INT 0
59833: PPUSH
59834: PPUSH
59835: PPUSH
59836: PPUSH
// if not hack in hackTanks then
59837: LD_VAR 0 1
59841: PUSH
59842: LD_EXP 50
59846: IN
59847: NOT
59848: IFFALSE 59852
// exit ;
59850: GO 60096
// index := GetElementIndex ( hackTanks , hack ) ;
59852: LD_ADDR_VAR 0 4
59856: PUSH
59857: LD_EXP 50
59861: PPUSH
59862: LD_VAR 0 1
59866: PPUSH
59867: CALL 7761 0 2
59871: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59872: LD_ADDR_VAR 0 3
59876: PUSH
59877: DOUBLE
59878: LD_EXP 51
59882: PUSH
59883: LD_VAR 0 4
59887: ARRAY
59888: INC
59889: ST_TO_ADDR
59890: LD_INT 1
59892: PUSH
59893: FOR_DOWNTO
59894: IFFALSE 60070
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59896: LD_ADDR_VAR 0 5
59900: PUSH
59901: LD_EXP 51
59905: PUSH
59906: LD_VAR 0 4
59910: ARRAY
59911: PUSH
59912: LD_VAR 0 3
59916: ARRAY
59917: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59918: LD_VAR 0 5
59922: PUSH
59923: LD_INT 1
59925: ARRAY
59926: PPUSH
59927: CALL_OW 302
59931: NOT
59932: IFTRUE 59960
59934: PUSH
59935: LD_VAR 0 5
59939: PUSH
59940: LD_INT 1
59942: ARRAY
59943: PPUSH
59944: CALL_OW 255
59948: PUSH
59949: LD_VAR 0 1
59953: PPUSH
59954: CALL_OW 255
59958: NONEQUAL
59959: OR
59960: IFFALSE 60068
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59962: LD_VAR 0 5
59966: PUSH
59967: LD_INT 1
59969: ARRAY
59970: PPUSH
59971: CALL_OW 305
59975: IFFALSE 60003
59977: PUSH
59978: LD_VAR 0 5
59982: PUSH
59983: LD_INT 1
59985: ARRAY
59986: PPUSH
59987: CALL_OW 255
59991: PUSH
59992: LD_VAR 0 1
59996: PPUSH
59997: CALL_OW 255
60001: EQUAL
60002: AND
60003: IFFALSE 60027
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60005: LD_VAR 0 5
60009: PUSH
60010: LD_INT 1
60012: ARRAY
60013: PPUSH
60014: LD_VAR 0 5
60018: PUSH
60019: LD_INT 2
60021: ARRAY
60022: PPUSH
60023: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60027: LD_ADDR_EXP 51
60031: PUSH
60032: LD_EXP 51
60036: PPUSH
60037: LD_VAR 0 4
60041: PPUSH
60042: LD_EXP 51
60046: PUSH
60047: LD_VAR 0 4
60051: ARRAY
60052: PPUSH
60053: LD_VAR 0 3
60057: PPUSH
60058: CALL_OW 3
60062: PPUSH
60063: CALL_OW 1
60067: ST_TO_ADDR
// end ; end ;
60068: GO 59893
60070: POP
60071: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60072: LD_VAR 0 1
60076: PPUSH
60077: LD_EXP 51
60081: PUSH
60082: LD_VAR 0 4
60086: ARRAY
60087: PUSH
60088: LD_INT 0
60090: PLUS
60091: PPUSH
60092: CALL_OW 505
// end ;
60096: LD_VAR 0 2
60100: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60101: LD_INT 0
60103: PPUSH
60104: PPUSH
60105: PPUSH
60106: PPUSH
// if not hack in hackTanks then
60107: LD_VAR 0 1
60111: PUSH
60112: LD_EXP 50
60116: IN
60117: NOT
60118: IFFALSE 60122
// exit ;
60120: GO 60207
// index := GetElementIndex ( hackTanks , hack ) ;
60122: LD_ADDR_VAR 0 5
60126: PUSH
60127: LD_EXP 50
60131: PPUSH
60132: LD_VAR 0 1
60136: PPUSH
60137: CALL 7761 0 2
60141: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60142: LD_ADDR_VAR 0 4
60146: PUSH
60147: DOUBLE
60148: LD_INT 1
60150: DEC
60151: ST_TO_ADDR
60152: LD_EXP 51
60156: PUSH
60157: LD_VAR 0 5
60161: ARRAY
60162: PUSH
60163: FOR_TO
60164: IFFALSE 60205
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60166: LD_EXP 51
60170: PUSH
60171: LD_VAR 0 5
60175: ARRAY
60176: PUSH
60177: LD_VAR 0 4
60181: ARRAY
60182: PUSH
60183: LD_INT 1
60185: ARRAY
60186: PUSH
60187: LD_VAR 0 2
60191: EQUAL
60192: IFFALSE 60203
// KillUnit ( vehicle ) ;
60194: LD_VAR 0 2
60198: PPUSH
60199: CALL_OW 66
60203: GO 60163
60205: POP
60206: POP
// end ;
60207: LD_VAR 0 3
60211: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
60212: LD_EXP 55
60216: NOT
60217: IFFALSE 60350
60219: GO 60221
60221: DISABLE
60222: LD_INT 0
60224: PPUSH
// begin initMiner := true ;
60225: LD_ADDR_EXP 55
60229: PUSH
60230: LD_INT 1
60232: ST_TO_ADDR
// minersList := [ ] ;
60233: LD_ADDR_EXP 56
60237: PUSH
60238: EMPTY
60239: ST_TO_ADDR
// minerMinesList := [ ] ;
60240: LD_ADDR_EXP 57
60244: PUSH
60245: EMPTY
60246: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
60247: LD_ADDR_EXP 58
60251: PUSH
60252: LD_INT 10
60254: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60255: LD_ADDR_VAR 0 1
60259: PUSH
60260: LD_INT 34
60262: PUSH
60263: LD_INT 81
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PPUSH
60270: CALL_OW 69
60274: PUSH
60275: FOR_IN
60276: IFFALSE 60348
// begin if not i in minersList then
60278: LD_VAR 0 1
60282: PUSH
60283: LD_EXP 56
60287: IN
60288: NOT
60289: IFFALSE 60346
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60291: LD_ADDR_EXP 56
60295: PUSH
60296: LD_EXP 56
60300: PPUSH
60301: LD_EXP 56
60305: PUSH
60306: LD_INT 1
60308: PLUS
60309: PPUSH
60310: LD_VAR 0 1
60314: PPUSH
60315: CALL_OW 1
60319: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60320: LD_ADDR_EXP 57
60324: PUSH
60325: LD_EXP 57
60329: PPUSH
60330: LD_EXP 57
60334: PUSH
60335: LD_INT 1
60337: PLUS
60338: PPUSH
60339: EMPTY
60340: PPUSH
60341: CALL_OW 1
60345: ST_TO_ADDR
// end end ;
60346: GO 60275
60348: POP
60349: POP
// end ;
60350: PPOPN 1
60352: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
60353: LD_EXP 55
60357: IFFALSE 60388
60359: PUSH
60360: LD_EXP 57
60364: PPUSH
60365: CALL 5060 0 1
60369: IFTRUE 60387
60371: PUSH
60372: LD_INT 34
60374: PUSH
60375: LD_INT 81
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PPUSH
60382: CALL_OW 69
60386: OR
60387: AND
60388: IFFALSE 60908
60390: GO 60392
60392: DISABLE
60393: LD_INT 0
60395: PPUSH
60396: PPUSH
60397: PPUSH
60398: PPUSH
// begin enable ;
60399: ENABLE
// for i := minerMinesList downto 1 do
60400: LD_ADDR_VAR 0 1
60404: PUSH
60405: DOUBLE
60406: LD_EXP 57
60410: INC
60411: ST_TO_ADDR
60412: LD_INT 1
60414: PUSH
60415: FOR_DOWNTO
60416: IFFALSE 60906
// begin side := GetSide ( minersList [ i ] ) ;
60418: LD_ADDR_VAR 0 3
60422: PUSH
60423: LD_EXP 56
60427: PUSH
60428: LD_VAR 0 1
60432: ARRAY
60433: PPUSH
60434: CALL_OW 255
60438: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
60439: LD_EXP 56
60443: PUSH
60444: LD_VAR 0 1
60448: ARRAY
60449: PPUSH
60450: CALL_OW 300
60454: IFFALSE 60475
60456: PUSH
60457: LD_VAR 0 3
60461: PUSH
60462: LD_OWVAR 2
60466: PUSH
60467: LD_INT 9
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: IN
60474: AND
60475: IFFALSE 60508
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
60477: LD_EXP 56
60481: PUSH
60482: LD_VAR 0 1
60486: ARRAY
60487: PPUSH
60488: LD_EXP 57
60492: PUSH
60493: LD_VAR 0 1
60497: ARRAY
60498: PPUSH
60499: CALL 5060 0 1
60503: PPUSH
60504: CALL_OW 505
// if not minerMinesList [ i ] then
60508: LD_EXP 57
60512: PUSH
60513: LD_VAR 0 1
60517: ARRAY
60518: NOT
60519: IFFALSE 60523
// continue ;
60521: GO 60415
// for j := minerMinesList [ i ] downto 1 do
60523: LD_ADDR_VAR 0 2
60527: PUSH
60528: DOUBLE
60529: LD_EXP 57
60533: PUSH
60534: LD_VAR 0 1
60538: ARRAY
60539: INC
60540: ST_TO_ADDR
60541: LD_INT 1
60543: PUSH
60544: FOR_DOWNTO
60545: IFFALSE 60902
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
60547: LD_EXP 56
60551: PUSH
60552: LD_VAR 0 1
60556: ARRAY
60557: PPUSH
60558: CALL_OW 301
60562: IFTRUE 60582
60564: PUSH
60565: LD_EXP 56
60569: PUSH
60570: LD_VAR 0 1
60574: ARRAY
60575: PPUSH
60576: CALL_OW 305
60580: NOT
60581: OR
60582: IFFALSE 60673
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60584: LD_EXP 57
60588: PUSH
60589: LD_VAR 0 1
60593: ARRAY
60594: PUSH
60595: LD_VAR 0 2
60599: ARRAY
60600: PUSH
60601: LD_INT 1
60603: ARRAY
60604: PPUSH
60605: LD_EXP 57
60609: PUSH
60610: LD_VAR 0 1
60614: ARRAY
60615: PUSH
60616: LD_VAR 0 2
60620: ARRAY
60621: PUSH
60622: LD_INT 2
60624: ARRAY
60625: PPUSH
60626: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60630: LD_ADDR_EXP 57
60634: PUSH
60635: LD_EXP 57
60639: PPUSH
60640: LD_VAR 0 1
60644: PPUSH
60645: LD_EXP 57
60649: PUSH
60650: LD_VAR 0 1
60654: ARRAY
60655: PPUSH
60656: LD_VAR 0 2
60660: PPUSH
60661: CALL_OW 3
60665: PPUSH
60666: CALL_OW 1
60670: ST_TO_ADDR
// continue ;
60671: GO 60544
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60673: LD_ADDR_VAR 0 4
60677: PUSH
60678: LD_EXP 57
60682: PUSH
60683: LD_VAR 0 1
60687: ARRAY
60688: PUSH
60689: LD_VAR 0 2
60693: ARRAY
60694: PUSH
60695: LD_INT 1
60697: ARRAY
60698: PPUSH
60699: LD_EXP 57
60703: PUSH
60704: LD_VAR 0 1
60708: ARRAY
60709: PUSH
60710: LD_VAR 0 2
60714: ARRAY
60715: PUSH
60716: LD_INT 2
60718: ARRAY
60719: PPUSH
60720: CALL_OW 428
60724: ST_TO_ADDR
// if not tmp then
60725: LD_VAR 0 4
60729: NOT
60730: IFFALSE 60734
// continue ;
60732: GO 60544
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60734: LD_VAR 0 4
60738: PUSH
60739: LD_INT 81
60741: PUSH
60742: LD_VAR 0 3
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PPUSH
60751: CALL_OW 69
60755: IN
60756: IFFALSE 60806
60758: PUSH
60759: LD_EXP 57
60763: PUSH
60764: LD_VAR 0 1
60768: ARRAY
60769: PUSH
60770: LD_VAR 0 2
60774: ARRAY
60775: PUSH
60776: LD_INT 1
60778: ARRAY
60779: PPUSH
60780: LD_EXP 57
60784: PUSH
60785: LD_VAR 0 1
60789: ARRAY
60790: PUSH
60791: LD_VAR 0 2
60795: ARRAY
60796: PUSH
60797: LD_INT 2
60799: ARRAY
60800: PPUSH
60801: CALL_OW 458
60805: AND
60806: IFFALSE 60900
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60808: LD_EXP 57
60812: PUSH
60813: LD_VAR 0 1
60817: ARRAY
60818: PUSH
60819: LD_VAR 0 2
60823: ARRAY
60824: PUSH
60825: LD_INT 1
60827: ARRAY
60828: PPUSH
60829: LD_EXP 57
60833: PUSH
60834: LD_VAR 0 1
60838: ARRAY
60839: PUSH
60840: LD_VAR 0 2
60844: ARRAY
60845: PUSH
60846: LD_INT 2
60848: ARRAY
60849: PPUSH
60850: LD_VAR 0 3
60854: PPUSH
60855: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60859: LD_ADDR_EXP 57
60863: PUSH
60864: LD_EXP 57
60868: PPUSH
60869: LD_VAR 0 1
60873: PPUSH
60874: LD_EXP 57
60878: PUSH
60879: LD_VAR 0 1
60883: ARRAY
60884: PPUSH
60885: LD_VAR 0 2
60889: PPUSH
60890: CALL_OW 3
60894: PPUSH
60895: CALL_OW 1
60899: ST_TO_ADDR
// end ; end ;
60900: GO 60544
60902: POP
60903: POP
// end ;
60904: GO 60415
60906: POP
60907: POP
// end ;
60908: PPOPN 4
60910: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
60911: LD_INT 0
60913: PPUSH
60914: PPUSH
60915: PPUSH
60916: PPUSH
// result := false ;
60917: LD_ADDR_VAR 0 4
60921: PUSH
60922: LD_INT 0
60924: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60925: LD_VAR 0 1
60929: PPUSH
60930: CALL_OW 264
60934: PUSH
60935: LD_INT 81
60937: EQUAL
60938: NOT
60939: IFFALSE 60943
// exit ;
60941: GO 61313
// side := GetSide ( unit ) ;
60943: LD_ADDR_VAR 0 6
60947: PUSH
60948: LD_VAR 0 1
60952: PPUSH
60953: CALL_OW 255
60957: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
60958: LD_ADDR_VAR 0 5
60962: PUSH
60963: LD_EXP 56
60967: PPUSH
60968: LD_VAR 0 1
60972: PPUSH
60973: CALL 7761 0 2
60977: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60978: LD_EXP 57
60982: PUSH
60983: LD_VAR 0 5
60987: ARRAY
60988: PUSH
60989: LD_EXP 58
60993: GREATEREQUAL
60994: IFFALSE 60998
// exit ;
60996: GO 61313
// ComMoveXY ( unit , x , y ) ;
60998: LD_VAR 0 1
61002: PPUSH
61003: LD_VAR 0 2
61007: PPUSH
61008: LD_VAR 0 3
61012: PPUSH
61013: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61017: LD_INT 35
61019: PPUSH
61020: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61024: LD_VAR 0 1
61028: PPUSH
61029: LD_VAR 0 2
61033: PPUSH
61034: LD_VAR 0 3
61038: PPUSH
61039: CALL 39817 0 3
61043: NOT
61044: IFFALSE 61057
61046: PUSH
61047: LD_VAR 0 1
61051: PPUSH
61052: CALL_OW 314
61056: AND
61057: IFFALSE 61061
// exit ;
61059: GO 61313
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61061: LD_VAR 0 2
61065: PPUSH
61066: LD_VAR 0 3
61070: PPUSH
61071: CALL_OW 428
61075: PUSH
61076: LD_VAR 0 1
61080: EQUAL
61081: IFFALSE 61095
61083: PUSH
61084: LD_VAR 0 1
61088: PPUSH
61089: CALL_OW 314
61093: NOT
61094: AND
61095: IFFALSE 61017
// if MineAtPos ( x , y ) then
61097: LD_VAR 0 2
61101: PPUSH
61102: LD_VAR 0 3
61106: PPUSH
61107: CALL_OW 458
61111: IFFALSE 61115
// exit ;
61113: GO 61313
// if your_side = side then
61115: LD_OWVAR 2
61119: PUSH
61120: LD_VAR 0 6
61124: EQUAL
61125: IFFALSE 61144
// PlaySoundXY ( x , y , PlantMine ) ;
61127: LD_VAR 0 2
61131: PPUSH
61132: LD_VAR 0 3
61136: PPUSH
61137: LD_STRING PlantMine
61139: PPUSH
61140: CALL_OW 366
// repeat wait ( 1 ) ;
61144: LD_INT 1
61146: PPUSH
61147: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
61151: LD_VAR 0 2
61155: PPUSH
61156: LD_VAR 0 3
61160: PPUSH
61161: LD_VAR 0 6
61165: PPUSH
61166: LD_INT 0
61168: PPUSH
61169: CALL_OW 454
61173: IFFALSE 61144
// if MineAtPos ( x , y ) then
61175: LD_VAR 0 2
61179: PPUSH
61180: LD_VAR 0 3
61184: PPUSH
61185: CALL_OW 458
61189: IFFALSE 61305
// begin for i in minerMinesList [ index ] do
61191: LD_ADDR_VAR 0 7
61195: PUSH
61196: LD_EXP 57
61200: PUSH
61201: LD_VAR 0 5
61205: ARRAY
61206: PUSH
61207: FOR_IN
61208: IFFALSE 61250
// if i [ 1 ] = x and i [ 2 ] = y then
61210: LD_VAR 0 7
61214: PUSH
61215: LD_INT 1
61217: ARRAY
61218: PUSH
61219: LD_VAR 0 2
61223: EQUAL
61224: IFFALSE 61242
61226: PUSH
61227: LD_VAR 0 7
61231: PUSH
61232: LD_INT 2
61234: ARRAY
61235: PUSH
61236: LD_VAR 0 3
61240: EQUAL
61241: AND
61242: IFFALSE 61248
// exit ;
61244: POP
61245: POP
61246: GO 61313
61248: GO 61207
61250: POP
61251: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61252: LD_ADDR_EXP 57
61256: PUSH
61257: LD_EXP 57
61261: PPUSH
61262: LD_VAR 0 5
61266: PUSH
61267: LD_EXP 57
61271: PUSH
61272: LD_VAR 0 5
61276: ARRAY
61277: PUSH
61278: LD_INT 1
61280: PLUS
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PPUSH
61286: LD_VAR 0 2
61290: PUSH
61291: LD_VAR 0 3
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PPUSH
61300: CALL 7978 0 3
61304: ST_TO_ADDR
// end ; result := true ;
61305: LD_ADDR_VAR 0 4
61309: PUSH
61310: LD_INT 1
61312: ST_TO_ADDR
// end ;
61313: LD_VAR 0 4
61317: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61318: LD_INT 0
61320: PPUSH
61321: PPUSH
61322: PPUSH
// if not unit in minersList then
61323: LD_VAR 0 1
61327: PUSH
61328: LD_EXP 56
61332: IN
61333: NOT
61334: IFFALSE 61338
// exit ;
61336: GO 61545
// index := GetElementIndex ( minersList , unit ) ;
61338: LD_ADDR_VAR 0 6
61342: PUSH
61343: LD_EXP 56
61347: PPUSH
61348: LD_VAR 0 1
61352: PPUSH
61353: CALL 7761 0 2
61357: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61358: LD_ADDR_VAR 0 5
61362: PUSH
61363: DOUBLE
61364: LD_EXP 57
61368: PUSH
61369: LD_VAR 0 6
61373: ARRAY
61374: INC
61375: ST_TO_ADDR
61376: LD_INT 1
61378: PUSH
61379: FOR_DOWNTO
61380: IFFALSE 61543
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61382: LD_EXP 57
61386: PUSH
61387: LD_VAR 0 6
61391: ARRAY
61392: PUSH
61393: LD_VAR 0 5
61397: ARRAY
61398: PUSH
61399: LD_INT 1
61401: ARRAY
61402: PPUSH
61403: LD_EXP 57
61407: PUSH
61408: LD_VAR 0 6
61412: ARRAY
61413: PUSH
61414: LD_VAR 0 5
61418: ARRAY
61419: PUSH
61420: LD_INT 2
61422: ARRAY
61423: PPUSH
61424: LD_VAR 0 2
61428: PPUSH
61429: LD_VAR 0 3
61433: PPUSH
61434: CALL_OW 298
61438: PUSH
61439: LD_INT 6
61441: LESS
61442: IFFALSE 61541
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61444: LD_EXP 57
61448: PUSH
61449: LD_VAR 0 6
61453: ARRAY
61454: PUSH
61455: LD_VAR 0 5
61459: ARRAY
61460: PUSH
61461: LD_INT 1
61463: ARRAY
61464: PPUSH
61465: LD_EXP 57
61469: PUSH
61470: LD_VAR 0 6
61474: ARRAY
61475: PUSH
61476: LD_VAR 0 5
61480: ARRAY
61481: PUSH
61482: LD_INT 2
61484: ARRAY
61485: PPUSH
61486: LD_VAR 0 1
61490: PPUSH
61491: CALL_OW 255
61495: PPUSH
61496: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61500: LD_ADDR_EXP 57
61504: PUSH
61505: LD_EXP 57
61509: PPUSH
61510: LD_VAR 0 6
61514: PPUSH
61515: LD_EXP 57
61519: PUSH
61520: LD_VAR 0 6
61524: ARRAY
61525: PPUSH
61526: LD_VAR 0 5
61530: PPUSH
61531: CALL_OW 3
61535: PPUSH
61536: CALL_OW 1
61540: ST_TO_ADDR
// end ; end ;
61541: GO 61379
61543: POP
61544: POP
// end ;
61545: LD_VAR 0 4
61549: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61550: LD_INT 0
61552: PPUSH
61553: PPUSH
61554: PPUSH
61555: PPUSH
61556: PPUSH
61557: PPUSH
61558: PPUSH
61559: PPUSH
61560: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61561: LD_VAR 0 1
61565: PPUSH
61566: CALL_OW 264
61570: PUSH
61571: LD_INT 81
61573: EQUAL
61574: NOT
61575: IFTRUE 61590
61577: PUSH
61578: LD_VAR 0 1
61582: PUSH
61583: LD_EXP 56
61587: IN
61588: NOT
61589: OR
61590: IFFALSE 61594
// exit ;
61592: GO 61920
// index := GetElementIndex ( minersList , unit ) ;
61594: LD_ADDR_VAR 0 6
61598: PUSH
61599: LD_EXP 56
61603: PPUSH
61604: LD_VAR 0 1
61608: PPUSH
61609: CALL 7761 0 2
61613: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61614: LD_ADDR_VAR 0 8
61618: PUSH
61619: LD_EXP 58
61623: PUSH
61624: LD_EXP 57
61628: PUSH
61629: LD_VAR 0 6
61633: ARRAY
61634: MINUS
61635: ST_TO_ADDR
// if not minesFreeAmount then
61636: LD_VAR 0 8
61640: NOT
61641: IFFALSE 61645
// exit ;
61643: GO 61920
// tmp := [ ] ;
61645: LD_ADDR_VAR 0 7
61649: PUSH
61650: EMPTY
61651: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61652: LD_ADDR_VAR 0 5
61656: PUSH
61657: DOUBLE
61658: LD_INT 1
61660: DEC
61661: ST_TO_ADDR
61662: LD_VAR 0 8
61666: PUSH
61667: FOR_TO
61668: IFFALSE 61867
// begin _d := rand ( 0 , 5 ) ;
61670: LD_ADDR_VAR 0 11
61674: PUSH
61675: LD_INT 0
61677: PPUSH
61678: LD_INT 5
61680: PPUSH
61681: CALL_OW 12
61685: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61686: LD_ADDR_VAR 0 12
61690: PUSH
61691: LD_INT 2
61693: PPUSH
61694: LD_INT 6
61696: PPUSH
61697: CALL_OW 12
61701: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61702: LD_ADDR_VAR 0 9
61706: PUSH
61707: LD_VAR 0 2
61711: PPUSH
61712: LD_VAR 0 11
61716: PPUSH
61717: LD_VAR 0 12
61721: PPUSH
61722: CALL_OW 272
61726: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61727: LD_ADDR_VAR 0 10
61731: PUSH
61732: LD_VAR 0 3
61736: PPUSH
61737: LD_VAR 0 11
61741: PPUSH
61742: LD_VAR 0 12
61746: PPUSH
61747: CALL_OW 273
61751: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61752: LD_VAR 0 9
61756: PPUSH
61757: LD_VAR 0 10
61761: PPUSH
61762: CALL_OW 488
61766: IFFALSE 61790
61768: PUSH
61769: LD_VAR 0 9
61773: PUSH
61774: LD_VAR 0 10
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_VAR 0 7
61787: IN
61788: NOT
61789: AND
61790: IFFALSE 61809
61792: PUSH
61793: LD_VAR 0 9
61797: PPUSH
61798: LD_VAR 0 10
61802: PPUSH
61803: CALL_OW 458
61807: NOT
61808: AND
61809: IFFALSE 61851
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61811: LD_ADDR_VAR 0 7
61815: PUSH
61816: LD_VAR 0 7
61820: PPUSH
61821: LD_VAR 0 7
61825: PUSH
61826: LD_INT 1
61828: PLUS
61829: PPUSH
61830: LD_VAR 0 9
61834: PUSH
61835: LD_VAR 0 10
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PPUSH
61844: CALL_OW 1
61848: ST_TO_ADDR
61849: GO 61865
// i := i - 1 ;
61851: LD_ADDR_VAR 0 5
61855: PUSH
61856: LD_VAR 0 5
61860: PUSH
61861: LD_INT 1
61863: MINUS
61864: ST_TO_ADDR
// end ;
61865: GO 61667
61867: POP
61868: POP
// for i in tmp do
61869: LD_ADDR_VAR 0 5
61873: PUSH
61874: LD_VAR 0 7
61878: PUSH
61879: FOR_IN
61880: IFFALSE 61918
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61882: LD_VAR 0 1
61886: PPUSH
61887: LD_VAR 0 5
61891: PUSH
61892: LD_INT 1
61894: ARRAY
61895: PPUSH
61896: LD_VAR 0 5
61900: PUSH
61901: LD_INT 2
61903: ARRAY
61904: PPUSH
61905: CALL 60911 0 3
61909: NOT
61910: IFFALSE 61916
// exit ;
61912: POP
61913: POP
61914: GO 61920
61916: GO 61879
61918: POP
61919: POP
// end ;
61920: LD_VAR 0 4
61924: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
61925: LD_INT 0
61927: PPUSH
61928: PPUSH
61929: PPUSH
61930: PPUSH
61931: PPUSH
61932: PPUSH
61933: PPUSH
61934: PPUSH
61935: PPUSH
// if GetClass ( unit ) <> class_sniper then
61936: LD_VAR 0 1
61940: PPUSH
61941: CALL_OW 257
61945: PUSH
61946: LD_INT 5
61948: NONEQUAL
61949: IFFALSE 61953
// exit ;
61951: GO 62423
// dist := 8 ;
61953: LD_ADDR_VAR 0 5
61957: PUSH
61958: LD_INT 8
61960: ST_TO_ADDR
// viewRange := 12 ;
61961: LD_ADDR_VAR 0 8
61965: PUSH
61966: LD_INT 12
61968: ST_TO_ADDR
// side := GetSide ( unit ) ;
61969: LD_ADDR_VAR 0 6
61973: PUSH
61974: LD_VAR 0 1
61978: PPUSH
61979: CALL_OW 255
61983: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61984: LD_INT 61
61986: PPUSH
61987: LD_VAR 0 6
61991: PPUSH
61992: CALL_OW 321
61996: PUSH
61997: LD_INT 2
61999: EQUAL
62000: IFFALSE 62010
// viewRange := 16 ;
62002: LD_ADDR_VAR 0 8
62006: PUSH
62007: LD_INT 16
62009: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62010: LD_VAR 0 1
62014: PPUSH
62015: LD_VAR 0 2
62019: PPUSH
62020: LD_VAR 0 3
62024: PPUSH
62025: CALL_OW 297
62029: PUSH
62030: LD_VAR 0 5
62034: GREATER
62035: IFFALSE 62114
// begin ComMoveXY ( unit , x , y ) ;
62037: LD_VAR 0 1
62041: PPUSH
62042: LD_VAR 0 2
62046: PPUSH
62047: LD_VAR 0 3
62051: PPUSH
62052: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62056: LD_INT 35
62058: PPUSH
62059: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62063: LD_VAR 0 1
62067: PPUSH
62068: LD_VAR 0 2
62072: PPUSH
62073: LD_VAR 0 3
62077: PPUSH
62078: CALL 39817 0 3
62082: NOT
62083: IFFALSE 62087
// exit ;
62085: GO 62423
// until GetDistUnitXY ( unit , x , y ) < dist ;
62087: LD_VAR 0 1
62091: PPUSH
62092: LD_VAR 0 2
62096: PPUSH
62097: LD_VAR 0 3
62101: PPUSH
62102: CALL_OW 297
62106: PUSH
62107: LD_VAR 0 5
62111: LESS
62112: IFFALSE 62056
// end ; ComTurnXY ( unit , x , y ) ;
62114: LD_VAR 0 1
62118: PPUSH
62119: LD_VAR 0 2
62123: PPUSH
62124: LD_VAR 0 3
62128: PPUSH
62129: CALL_OW 118
// repeat if Multiplayer then
62133: LD_OWVAR 4
62137: IFFALSE 62148
// wait ( 35 ) else
62139: LD_INT 35
62141: PPUSH
62142: CALL_OW 67
62146: GO 62155
// wait ( 5 ) ;
62148: LD_INT 5
62150: PPUSH
62151: CALL_OW 67
// _d := GetDir ( unit ) ;
62155: LD_ADDR_VAR 0 11
62159: PUSH
62160: LD_VAR 0 1
62164: PPUSH
62165: CALL_OW 254
62169: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
62170: LD_ADDR_VAR 0 7
62174: PUSH
62175: LD_VAR 0 1
62179: PPUSH
62180: CALL_OW 250
62184: PPUSH
62185: LD_VAR 0 1
62189: PPUSH
62190: CALL_OW 251
62194: PPUSH
62195: LD_VAR 0 2
62199: PPUSH
62200: LD_VAR 0 3
62204: PPUSH
62205: CALL 42453 0 4
62209: ST_TO_ADDR
// until dir = _d ;
62210: LD_VAR 0 7
62214: PUSH
62215: LD_VAR 0 11
62219: EQUAL
62220: IFFALSE 62133
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
62222: LD_ADDR_VAR 0 9
62226: PUSH
62227: LD_VAR 0 1
62231: PPUSH
62232: CALL_OW 250
62236: PPUSH
62237: LD_VAR 0 7
62241: PPUSH
62242: LD_VAR 0 5
62246: PPUSH
62247: CALL_OW 272
62251: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
62252: LD_ADDR_VAR 0 10
62256: PUSH
62257: LD_VAR 0 1
62261: PPUSH
62262: CALL_OW 251
62266: PPUSH
62267: LD_VAR 0 7
62271: PPUSH
62272: LD_VAR 0 5
62276: PPUSH
62277: CALL_OW 273
62281: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62282: LD_VAR 0 9
62286: PPUSH
62287: LD_VAR 0 10
62291: PPUSH
62292: CALL_OW 488
62296: NOT
62297: IFFALSE 62301
// exit ;
62299: GO 62423
// ComAnimCustom ( unit , 1 ) ;
62301: LD_VAR 0 1
62305: PPUSH
62306: LD_INT 1
62308: PPUSH
62309: CALL_OW 592
// p := 0 ;
62313: LD_ADDR_VAR 0 12
62317: PUSH
62318: LD_INT 0
62320: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62321: LD_VAR 0 9
62325: PPUSH
62326: LD_VAR 0 10
62330: PPUSH
62331: LD_VAR 0 6
62335: PPUSH
62336: LD_VAR 0 8
62340: PPUSH
62341: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
62345: LD_INT 35
62347: PPUSH
62348: CALL_OW 67
// p := Inc ( p ) ;
62352: LD_ADDR_VAR 0 12
62356: PUSH
62357: LD_VAR 0 12
62361: PPUSH
62362: CALL 42409 0 1
62366: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
62367: LD_VAR 0 12
62371: PUSH
62372: LD_INT 3
62374: EQUAL
62375: IFTRUE 62389
62377: PUSH
62378: LD_VAR 0 1
62382: PPUSH
62383: CALL_OW 302
62387: NOT
62388: OR
62389: IFTRUE 62402
62391: PUSH
62392: LD_VAR 0 1
62396: PPUSH
62397: CALL_OW 301
62401: OR
62402: IFFALSE 62345
// RemoveSeeing ( _x , _y , side ) ;
62404: LD_VAR 0 9
62408: PPUSH
62409: LD_VAR 0 10
62413: PPUSH
62414: LD_VAR 0 6
62418: PPUSH
62419: CALL_OW 331
// end ;
62423: LD_VAR 0 4
62427: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
62428: LD_INT 0
62430: PPUSH
62431: PPUSH
62432: PPUSH
62433: PPUSH
62434: PPUSH
62435: PPUSH
62436: PPUSH
62437: PPUSH
62438: PPUSH
62439: PPUSH
62440: PPUSH
// if not unit then
62441: LD_VAR 0 1
62445: NOT
62446: IFFALSE 62450
// exit ;
62448: GO 62721
// side := GetSide ( unit ) ;
62450: LD_ADDR_VAR 0 3
62454: PUSH
62455: LD_VAR 0 1
62459: PPUSH
62460: CALL_OW 255
62464: ST_TO_ADDR
// x := GetX ( unit ) ;
62465: LD_ADDR_VAR 0 5
62469: PUSH
62470: LD_VAR 0 1
62474: PPUSH
62475: CALL_OW 250
62479: ST_TO_ADDR
// y := GetY ( unit ) ;
62480: LD_ADDR_VAR 0 6
62484: PUSH
62485: LD_VAR 0 1
62489: PPUSH
62490: CALL_OW 251
62494: ST_TO_ADDR
// r := 8 ;
62495: LD_ADDR_VAR 0 4
62499: PUSH
62500: LD_INT 8
62502: ST_TO_ADDR
// if x - r < 0 then
62503: LD_VAR 0 5
62507: PUSH
62508: LD_VAR 0 4
62512: MINUS
62513: PUSH
62514: LD_INT 0
62516: LESS
62517: IFFALSE 62529
// min_x := 0 else
62519: LD_ADDR_VAR 0 7
62523: PUSH
62524: LD_INT 0
62526: ST_TO_ADDR
62527: GO 62545
// min_x := x - r ;
62529: LD_ADDR_VAR 0 7
62533: PUSH
62534: LD_VAR 0 5
62538: PUSH
62539: LD_VAR 0 4
62543: MINUS
62544: ST_TO_ADDR
// if y - r < 0 then
62545: LD_VAR 0 6
62549: PUSH
62550: LD_VAR 0 4
62554: MINUS
62555: PUSH
62556: LD_INT 0
62558: LESS
62559: IFFALSE 62571
// min_y := 0 else
62561: LD_ADDR_VAR 0 8
62565: PUSH
62566: LD_INT 0
62568: ST_TO_ADDR
62569: GO 62587
// min_y := y - r ;
62571: LD_ADDR_VAR 0 8
62575: PUSH
62576: LD_VAR 0 6
62580: PUSH
62581: LD_VAR 0 4
62585: MINUS
62586: ST_TO_ADDR
// max_x := x + r ;
62587: LD_ADDR_VAR 0 9
62591: PUSH
62592: LD_VAR 0 5
62596: PUSH
62597: LD_VAR 0 4
62601: PLUS
62602: ST_TO_ADDR
// max_y := y + r ;
62603: LD_ADDR_VAR 0 10
62607: PUSH
62608: LD_VAR 0 6
62612: PUSH
62613: LD_VAR 0 4
62617: PLUS
62618: ST_TO_ADDR
// for _x = min_x to max_x do
62619: LD_ADDR_VAR 0 11
62623: PUSH
62624: DOUBLE
62625: LD_VAR 0 7
62629: DEC
62630: ST_TO_ADDR
62631: LD_VAR 0 9
62635: PUSH
62636: FOR_TO
62637: IFFALSE 62719
// for _y = min_y to max_y do
62639: LD_ADDR_VAR 0 12
62643: PUSH
62644: DOUBLE
62645: LD_VAR 0 8
62649: DEC
62650: ST_TO_ADDR
62651: LD_VAR 0 10
62655: PUSH
62656: FOR_TO
62657: IFFALSE 62715
// begin if not ValidHex ( _x , _y ) then
62659: LD_VAR 0 11
62663: PPUSH
62664: LD_VAR 0 12
62668: PPUSH
62669: CALL_OW 488
62673: NOT
62674: IFFALSE 62678
// continue ;
62676: GO 62656
// if MineAtPos ( _x , _y ) then
62678: LD_VAR 0 11
62682: PPUSH
62683: LD_VAR 0 12
62687: PPUSH
62688: CALL_OW 458
62692: IFFALSE 62713
// ViewMineAtPos ( _x , _y , side ) ;
62694: LD_VAR 0 11
62698: PPUSH
62699: LD_VAR 0 12
62703: PPUSH
62704: LD_VAR 0 3
62708: PPUSH
62709: CALL_OW 457
// end ;
62713: GO 62656
62715: POP
62716: POP
62717: GO 62636
62719: POP
62720: POP
// end ;
62721: LD_VAR 0 2
62725: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
62726: LD_INT 0
62728: PPUSH
62729: PPUSH
62730: PPUSH
62731: PPUSH
62732: PPUSH
62733: PPUSH
62734: PPUSH
// if not units then
62735: LD_VAR 0 1
62739: NOT
62740: IFFALSE 62744
// exit ;
62742: GO 63208
// scaners := [ ] ;
62744: LD_ADDR_VAR 0 6
62748: PUSH
62749: EMPTY
62750: ST_TO_ADDR
// for i in units do
62751: LD_ADDR_VAR 0 3
62755: PUSH
62756: LD_VAR 0 1
62760: PUSH
62761: FOR_IN
62762: IFFALSE 62919
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62764: LD_VAR 0 3
62768: PPUSH
62769: CALL_OW 264
62773: PUSH
62774: LD_INT 11
62776: NONEQUAL
62777: IFTRUE 62791
62779: PUSH
62780: LD_VAR 0 3
62784: PPUSH
62785: CALL_OW 302
62789: NOT
62790: OR
62791: IFTRUE 62808
62793: PUSH
62794: LD_VAR 0 3
62798: PPUSH
62799: CALL_OW 110
62803: PUSH
62804: LD_INT 502
62806: EQUAL
62807: OR
62808: IFFALSE 62812
// continue ;
62810: GO 62761
// ComStop ( i ) ;
62812: LD_VAR 0 3
62816: PPUSH
62817: CALL_OW 141
// x := GetX ( i ) ;
62821: LD_ADDR_VAR 0 4
62825: PUSH
62826: LD_VAR 0 3
62830: PPUSH
62831: CALL_OW 250
62835: ST_TO_ADDR
// y := GetY ( i ) ;
62836: LD_ADDR_VAR 0 5
62840: PUSH
62841: LD_VAR 0 3
62845: PPUSH
62846: CALL_OW 251
62850: ST_TO_ADDR
// if GetSide ( i ) = your_side then
62851: LD_VAR 0 3
62855: PPUSH
62856: CALL_OW 255
62860: PUSH
62861: LD_OWVAR 2
62865: EQUAL
62866: IFFALSE 62885
// PlaySoundXY ( x , y , mineDetector ) ;
62868: LD_VAR 0 4
62872: PPUSH
62873: LD_VAR 0 5
62877: PPUSH
62878: LD_STRING mineDetector
62880: PPUSH
62881: CALL_OW 366
// scaners := Join ( scaners , i ) ;
62885: LD_ADDR_VAR 0 6
62889: PUSH
62890: LD_VAR 0 6
62894: PPUSH
62895: LD_VAR 0 3
62899: PPUSH
62900: CALL 41036 0 2
62904: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
62905: LD_VAR 0 3
62909: PPUSH
62910: LD_INT 502
62912: PPUSH
62913: CALL_OW 109
// end ;
62917: GO 62761
62919: POP
62920: POP
// if not scaners then
62921: LD_VAR 0 6
62925: NOT
62926: IFFALSE 62930
// exit ;
62928: GO 63208
// wait ( 3 ) ;
62930: LD_INT 3
62932: PPUSH
62933: CALL_OW 67
// timer := 6 ;
62937: LD_ADDR_VAR 0 7
62941: PUSH
62942: LD_INT 6
62944: ST_TO_ADDR
// repeat for i in scaners do
62945: LD_ADDR_VAR 0 3
62949: PUSH
62950: LD_VAR 0 6
62954: PUSH
62955: FOR_IN
62956: IFFALSE 63106
// begin side := GetSide ( i ) ;
62958: LD_ADDR_VAR 0 8
62962: PUSH
62963: LD_VAR 0 3
62967: PPUSH
62968: CALL_OW 255
62972: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
62973: LD_VAR 0 3
62977: PPUSH
62978: CALL_OW 302
62982: NOT
62983: IFTRUE 62996
62985: PUSH
62986: LD_VAR 0 3
62990: PPUSH
62991: CALL_OW 314
62995: OR
62996: IFTRUE 63027
62998: PUSH
62999: LD_VAR 0 3
63003: PPUSH
63004: CALL_OW 263
63008: PUSH
63009: LD_INT 1
63011: EQUAL
63012: IFFALSE 63026
63014: PUSH
63015: LD_VAR 0 3
63019: PPUSH
63020: CALL_OW 311
63024: NOT
63025: AND
63026: OR
63027: IFFALSE 63071
// begin SetUnitDisplayNumber ( i , 0 ) ;
63029: LD_VAR 0 3
63033: PPUSH
63034: LD_INT 0
63036: PPUSH
63037: CALL_OW 505
// SetTag ( i , 0 ) ;
63041: LD_VAR 0 3
63045: PPUSH
63046: LD_INT 0
63048: PPUSH
63049: CALL_OW 109
// scaners := scaners diff i ;
63053: LD_ADDR_VAR 0 6
63057: PUSH
63058: LD_VAR 0 6
63062: PUSH
63063: LD_VAR 0 3
63067: DIFF
63068: ST_TO_ADDR
// continue ;
63069: GO 62955
// end ; if side in [ your_side , 9 ] then
63071: LD_VAR 0 8
63075: PUSH
63076: LD_OWVAR 2
63080: PUSH
63081: LD_INT 9
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: IN
63088: IFFALSE 63104
// SetUnitDisplayNumber ( i , timer ) ;
63090: LD_VAR 0 3
63094: PPUSH
63095: LD_VAR 0 7
63099: PPUSH
63100: CALL_OW 505
// end ;
63104: GO 62955
63106: POP
63107: POP
// if not scaners then
63108: LD_VAR 0 6
63112: NOT
63113: IFFALSE 63117
// exit ;
63115: GO 63208
// timer := Dec ( timer ) ;
63117: LD_ADDR_VAR 0 7
63121: PUSH
63122: LD_VAR 0 7
63126: PPUSH
63127: CALL 42431 0 1
63131: ST_TO_ADDR
// wait ( 0 0$1 ) ;
63132: LD_INT 35
63134: PPUSH
63135: CALL_OW 67
// until timer = 0 ;
63139: LD_VAR 0 7
63143: PUSH
63144: LD_INT 0
63146: EQUAL
63147: IFFALSE 62945
// if not scaners then
63149: LD_VAR 0 6
63153: NOT
63154: IFFALSE 63158
// exit ;
63156: GO 63208
// for i in scaners do
63158: LD_ADDR_VAR 0 3
63162: PUSH
63163: LD_VAR 0 6
63167: PUSH
63168: FOR_IN
63169: IFFALSE 63206
// begin SetUnitDisplayNumber ( i , 0 ) ;
63171: LD_VAR 0 3
63175: PPUSH
63176: LD_INT 0
63178: PPUSH
63179: CALL_OW 505
// SetTag ( i , 0 ) ;
63183: LD_VAR 0 3
63187: PPUSH
63188: LD_INT 0
63190: PPUSH
63191: CALL_OW 109
// RevealDetectorMine ( i ) ;
63195: LD_VAR 0 3
63199: PPUSH
63200: CALL 62428 0 1
// end ;
63204: GO 63168
63206: POP
63207: POP
// end ;
63208: LD_VAR 0 2
63212: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
63213: LD_INT 0
63215: PPUSH
// if p1 = mine_detector_mode then
63216: LD_VAR 0 2
63220: PUSH
63221: LD_INT 103
63223: EQUAL
63224: IFFALSE 63235
// DetectMine ( units ) ;
63226: LD_VAR 0 1
63230: PPUSH
63231: CALL 62726 0 1
// end ; end_of_file
63235: LD_VAR 0 7
63239: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63240: PPOPN 6
63242: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63243: LD_INT 0
63245: PPUSH
// begin if not units then
63246: LD_VAR 0 1
63250: NOT
63251: IFFALSE 63255
// exit ;
63253: GO 63289
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63255: LD_VAR 0 1
63259: PPUSH
63260: LD_VAR 0 2
63264: PPUSH
63265: LD_VAR 0 3
63269: PPUSH
63270: LD_VAR 0 4
63274: PPUSH
63275: LD_VAR 0 5
63279: PPUSH
63280: LD_VAR 0 6
63284: PPUSH
63285: CALL 63213 0 6
// end ;
63289: PPOPN 7
63291: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63292: LD_EXP 1
63296: PUSH
63297: LD_INT 4
63299: EQUAL
63300: IFFALSE 63336
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63302: LD_STRING setGameDifficulty(
63304: PUSH
63305: LD_OWVAR 67
63309: STR
63310: PUSH
63311: LD_STRING )
63313: STR
63314: PPUSH
63315: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63319: LD_STRING displayDifficulty(
63321: PUSH
63322: LD_OWVAR 67
63326: STR
63327: PUSH
63328: LD_STRING )
63330: STR
63331: PPUSH
63332: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63336: CALL 63365 0 0
// end ; end_of_file
63340: PPOPN 1
63342: END
// every 0 0$1 do
63343: GO 63345
63345: DISABLE
// begin enable ;
63346: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63347: LD_STRING updateTimer(
63349: PUSH
63350: LD_OWVAR 1
63354: STR
63355: PUSH
63356: LD_STRING );
63358: STR
63359: PPUSH
63360: CALL_OW 559
// end ;
63364: END
// export function SOS_MapStart ( ) ; begin
63365: LD_INT 0
63367: PPUSH
// UpdateFactoryWaypoints ( ) ;
63368: CALL 64306 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63372: CALL 64558 0 0
// ParseMultiDataToLua ( ) ;
63376: CALL 64705 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
63380: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
63382: PPUSH
63383: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63387: LD_STRING setSpecLogoNumber(
63389: PUSH
63390: LD_INT 2
63392: STR
63393: PUSH
63394: LD_STRING ,
63396: STR
63397: PUSH
63398: LD_INT 1
63400: STR
63401: PUSH
63402: LD_STRING )
63404: STR
63405: PPUSH
63406: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63410: LD_STRING setSpecLogoNumber(
63412: PUSH
63413: LD_INT 3
63415: STR
63416: PUSH
63417: LD_STRING ,
63419: STR
63420: PUSH
63421: LD_INT 2
63423: STR
63424: PUSH
63425: LD_STRING )
63427: STR
63428: PPUSH
63429: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63433: LD_STRING setSpecLogoNumber(
63435: PUSH
63436: LD_INT 4
63438: STR
63439: PUSH
63440: LD_STRING ,
63442: STR
63443: PUSH
63444: LD_INT 3
63446: STR
63447: PUSH
63448: LD_STRING )
63450: STR
63451: PPUSH
63452: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63456: LD_STRING setSpecLogoNumber(
63458: PUSH
63459: LD_INT 5
63461: STR
63462: PUSH
63463: LD_STRING ,
63465: STR
63466: PUSH
63467: LD_INT 4
63469: STR
63470: PUSH
63471: LD_STRING )
63473: STR
63474: PPUSH
63475: CALL_OW 559
// end ;
63479: LD_VAR 0 1
63483: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63484: LD_INT 0
63486: PPUSH
63487: PPUSH
63488: PPUSH
63489: PPUSH
63490: PPUSH
63491: PPUSH
63492: PPUSH
63493: PPUSH
63494: PPUSH
// for i := 1 to 8 do
63495: LD_ADDR_VAR 0 2
63499: PUSH
63500: DOUBLE
63501: LD_INT 1
63503: DEC
63504: ST_TO_ADDR
63505: LD_INT 8
63507: PUSH
63508: FOR_TO
63509: IFFALSE 63894
// begin if mpSidePositions [ i ] then
63511: LD_EXP 5
63515: PUSH
63516: LD_VAR 0 2
63520: ARRAY
63521: IFFALSE 63892
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63523: LD_ADDR_VAR 0 7
63527: PUSH
63528: LD_INT 22
63530: PUSH
63531: LD_VAR 0 2
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 21
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PPUSH
63554: CALL_OW 69
63558: PPUSH
63559: CALL 5060 0 1
63563: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63564: LD_ADDR_VAR 0 9
63568: PUSH
63569: LD_INT 22
63571: PUSH
63572: LD_VAR 0 2
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: LD_INT 30
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 30
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: LIST
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PPUSH
63613: CALL_OW 69
63617: ST_TO_ADDR
// crates := 0 ;
63618: LD_ADDR_VAR 0 4
63622: PUSH
63623: LD_INT 0
63625: ST_TO_ADDR
// oil := 0 ;
63626: LD_ADDR_VAR 0 5
63630: PUSH
63631: LD_INT 0
63633: ST_TO_ADDR
// sib := 0 ;
63634: LD_ADDR_VAR 0 6
63638: PUSH
63639: LD_INT 0
63641: ST_TO_ADDR
// if bases then
63642: LD_VAR 0 9
63646: IFFALSE 63752
// begin for j in bases do
63648: LD_ADDR_VAR 0 3
63652: PUSH
63653: LD_VAR 0 9
63657: PUSH
63658: FOR_IN
63659: IFFALSE 63750
// begin base := GetBase ( j ) ;
63661: LD_ADDR_VAR 0 8
63665: PUSH
63666: LD_VAR 0 3
63670: PPUSH
63671: CALL_OW 274
63675: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63676: LD_ADDR_VAR 0 4
63680: PUSH
63681: LD_VAR 0 4
63685: PUSH
63686: LD_VAR 0 8
63690: PPUSH
63691: LD_INT 1
63693: PPUSH
63694: CALL_OW 275
63698: PLUS
63699: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63700: LD_ADDR_VAR 0 5
63704: PUSH
63705: LD_VAR 0 5
63709: PUSH
63710: LD_VAR 0 8
63714: PPUSH
63715: LD_INT 2
63717: PPUSH
63718: CALL_OW 275
63722: PLUS
63723: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63724: LD_ADDR_VAR 0 6
63728: PUSH
63729: LD_VAR 0 6
63733: PUSH
63734: LD_VAR 0 8
63738: PPUSH
63739: LD_INT 3
63741: PPUSH
63742: CALL_OW 275
63746: PLUS
63747: ST_TO_ADDR
// end ;
63748: GO 63658
63750: POP
63751: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63752: LD_STRING setSpecText(
63754: PUSH
63755: LD_VAR 0 2
63759: STR
63760: PUSH
63761: LD_STRING ,
63763: STR
63764: PUSH
63765: LD_INT 2
63767: STR
63768: PUSH
63769: LD_STRING ,
63771: STR
63772: PUSH
63773: LD_VAR 0 4
63777: STR
63778: PUSH
63779: LD_STRING )
63781: STR
63782: PPUSH
63783: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63787: LD_STRING setSpecText(
63789: PUSH
63790: LD_VAR 0 2
63794: STR
63795: PUSH
63796: LD_STRING ,
63798: STR
63799: PUSH
63800: LD_INT 3
63802: STR
63803: PUSH
63804: LD_STRING ,
63806: STR
63807: PUSH
63808: LD_VAR 0 5
63812: STR
63813: PUSH
63814: LD_STRING )
63816: STR
63817: PPUSH
63818: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63822: LD_STRING setSpecText(
63824: PUSH
63825: LD_VAR 0 2
63829: STR
63830: PUSH
63831: LD_STRING ,
63833: STR
63834: PUSH
63835: LD_INT 4
63837: STR
63838: PUSH
63839: LD_STRING ,
63841: STR
63842: PUSH
63843: LD_VAR 0 6
63847: STR
63848: PUSH
63849: LD_STRING )
63851: STR
63852: PPUSH
63853: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63857: LD_STRING setSpecText(
63859: PUSH
63860: LD_VAR 0 2
63864: STR
63865: PUSH
63866: LD_STRING ,
63868: STR
63869: PUSH
63870: LD_INT 5
63872: STR
63873: PUSH
63874: LD_STRING ,
63876: STR
63877: PUSH
63878: LD_VAR 0 7
63882: STR
63883: PUSH
63884: LD_STRING )
63886: STR
63887: PPUSH
63888: CALL_OW 559
// end ; end ;
63892: GO 63508
63894: POP
63895: POP
// end ;
63896: LD_VAR 0 1
63900: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63901: LD_INT 2
63903: PUSH
63904: LD_INT 30
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 30
63916: PUSH
63917: LD_INT 1
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: LIST
63928: PPUSH
63929: CALL_OW 69
63933: IFFALSE 63943
63935: GO 63937
63937: DISABLE
// begin enable ;
63938: ENABLE
// UpdateSpectatorBar ;
63939: CALL 63484 0 0
// end ;
63943: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63944: LD_INT 0
63946: PPUSH
// end ;
63947: LD_VAR 0 12
63951: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63952: LD_INT 0
63954: PPUSH
63955: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63956: LD_VAR 0 1
63960: NOT
63961: IFTRUE 63980
63963: PUSH
63964: LD_VAR 0 2
63968: PPUSH
63969: LD_VAR 0 3
63973: PPUSH
63974: CALL_OW 488
63978: NOT
63979: OR
63980: IFTRUE 64015
63982: PUSH
63983: LD_VAR 0 1
63987: PPUSH
63988: CALL_OW 266
63992: PUSH
63993: LD_INT 3
63995: NONEQUAL
63996: IFFALSE 64014
63998: PUSH
63999: LD_VAR 0 1
64003: PPUSH
64004: CALL_OW 247
64008: PUSH
64009: LD_INT 1
64011: EQUAL
64012: NOT
64013: AND
64014: OR
64015: IFFALSE 64019
// exit ;
64017: GO 64301
// if GetType ( factory ) = unit_human then
64019: LD_VAR 0 1
64023: PPUSH
64024: CALL_OW 247
64028: PUSH
64029: LD_INT 1
64031: EQUAL
64032: IFFALSE 64049
// factory := IsInUnit ( factory ) ;
64034: LD_ADDR_VAR 0 1
64038: PUSH
64039: LD_VAR 0 1
64043: PPUSH
64044: CALL_OW 310
64048: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64049: LD_VAR 0 1
64053: PPUSH
64054: CALL_OW 266
64058: PUSH
64059: LD_INT 3
64061: NONEQUAL
64062: IFFALSE 64066
// exit ;
64064: GO 64301
// for i := 1 to Count ( factoryWaypoints ) do
64066: LD_ADDR_VAR 0 5
64070: PUSH
64071: DOUBLE
64072: LD_INT 1
64074: DEC
64075: ST_TO_ADDR
64076: LD_EXP 59
64080: PPUSH
64081: CALL 5060 0 1
64085: PUSH
64086: FOR_TO
64087: IFFALSE 64249
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64089: LD_VAR 0 2
64093: PPUSH
64094: LD_VAR 0 3
64098: PPUSH
64099: CALL_OW 428
64103: PUSH
64104: LD_EXP 59
64108: PUSH
64109: LD_VAR 0 5
64113: ARRAY
64114: PUSH
64115: LD_INT 2
64117: ARRAY
64118: EQUAL
64119: IFFALSE 64151
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64121: LD_ADDR_EXP 59
64125: PUSH
64126: LD_EXP 59
64130: PPUSH
64131: LD_VAR 0 5
64135: PPUSH
64136: CALL_OW 3
64140: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64141: CALL 64306 0 0
// exit ;
64145: POP
64146: POP
64147: GO 64301
// end else
64149: GO 64247
// if factory = factoryWaypoints [ i ] [ 2 ] then
64151: LD_VAR 0 1
64155: PUSH
64156: LD_EXP 59
64160: PUSH
64161: LD_VAR 0 5
64165: ARRAY
64166: PUSH
64167: LD_INT 2
64169: ARRAY
64170: EQUAL
64171: IFFALSE 64247
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64173: LD_ADDR_EXP 59
64177: PUSH
64178: LD_EXP 59
64182: PPUSH
64183: LD_VAR 0 5
64187: PPUSH
64188: CALL_OW 3
64192: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64193: LD_ADDR_EXP 59
64197: PUSH
64198: LD_EXP 59
64202: PPUSH
64203: LD_VAR 0 1
64207: PPUSH
64208: CALL_OW 255
64212: PUSH
64213: LD_VAR 0 1
64217: PUSH
64218: LD_VAR 0 2
64222: PUSH
64223: LD_VAR 0 3
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: PPUSH
64234: CALL 41036 0 2
64238: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64239: CALL 64306 0 0
// exit ;
64243: POP
64244: POP
64245: GO 64301
// end ; end ;
64247: GO 64086
64249: POP
64250: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64251: LD_ADDR_EXP 59
64255: PUSH
64256: LD_EXP 59
64260: PPUSH
64261: LD_VAR 0 1
64265: PPUSH
64266: CALL_OW 255
64270: PUSH
64271: LD_VAR 0 1
64275: PUSH
64276: LD_VAR 0 2
64280: PUSH
64281: LD_VAR 0 3
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: PPUSH
64292: CALL 41036 0 2
64296: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64297: CALL 64306 0 0
// end ;
64301: LD_VAR 0 4
64305: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64306: LD_INT 0
64308: PPUSH
64309: PPUSH
64310: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64311: LD_STRING resetFactoryWaypoint();
64313: PPUSH
64314: CALL_OW 559
// if factoryWaypoints then
64318: LD_EXP 59
64322: IFFALSE 64443
// begin list := factoryWaypoints ;
64324: LD_ADDR_VAR 0 3
64328: PUSH
64329: LD_EXP 59
64333: ST_TO_ADDR
// for i := 1 to list do
64334: LD_ADDR_VAR 0 2
64338: PUSH
64339: DOUBLE
64340: LD_INT 1
64342: DEC
64343: ST_TO_ADDR
64344: LD_VAR 0 3
64348: PUSH
64349: FOR_TO
64350: IFFALSE 64441
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64352: LD_STRING setFactoryWaypointXY(
64354: PUSH
64355: LD_VAR 0 3
64359: PUSH
64360: LD_VAR 0 2
64364: ARRAY
64365: PUSH
64366: LD_INT 1
64368: ARRAY
64369: STR
64370: PUSH
64371: LD_STRING ,
64373: STR
64374: PUSH
64375: LD_VAR 0 3
64379: PUSH
64380: LD_VAR 0 2
64384: ARRAY
64385: PUSH
64386: LD_INT 2
64388: ARRAY
64389: STR
64390: PUSH
64391: LD_STRING ,
64393: STR
64394: PUSH
64395: LD_VAR 0 3
64399: PUSH
64400: LD_VAR 0 2
64404: ARRAY
64405: PUSH
64406: LD_INT 3
64408: ARRAY
64409: STR
64410: PUSH
64411: LD_STRING ,
64413: STR
64414: PUSH
64415: LD_VAR 0 3
64419: PUSH
64420: LD_VAR 0 2
64424: ARRAY
64425: PUSH
64426: LD_INT 4
64428: ARRAY
64429: STR
64430: PUSH
64431: LD_STRING )
64433: STR
64434: PPUSH
64435: CALL_OW 559
64439: GO 64349
64441: POP
64442: POP
// end ; end ;
64443: LD_VAR 0 1
64447: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64448: LD_INT 0
64450: PPUSH
// if HexInfo ( x , y ) = warehouse then
64451: LD_VAR 0 2
64455: PPUSH
64456: LD_VAR 0 3
64460: PPUSH
64461: CALL_OW 428
64465: PUSH
64466: LD_VAR 0 1
64470: EQUAL
64471: IFFALSE 64498
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64473: LD_ADDR_EXP 61
64477: PUSH
64478: LD_EXP 61
64482: PPUSH
64483: LD_VAR 0 1
64487: PPUSH
64488: LD_INT 0
64490: PPUSH
64491: CALL_OW 1
64495: ST_TO_ADDR
64496: GO 64549
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64498: LD_ADDR_EXP 61
64502: PUSH
64503: LD_EXP 61
64507: PPUSH
64508: LD_VAR 0 1
64512: PPUSH
64513: LD_VAR 0 1
64517: PPUSH
64518: CALL_OW 255
64522: PUSH
64523: LD_VAR 0 1
64527: PUSH
64528: LD_VAR 0 2
64532: PUSH
64533: LD_VAR 0 3
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: PPUSH
64544: CALL_OW 1
64548: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64549: CALL 64558 0 0
// end ;
64553: LD_VAR 0 4
64557: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64558: LD_INT 0
64560: PPUSH
64561: PPUSH
64562: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64563: LD_STRING resetWarehouseGatheringPoints();
64565: PPUSH
64566: CALL_OW 559
// if warehouseGatheringPoints then
64570: LD_EXP 61
64574: IFFALSE 64700
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64576: LD_ADDR_VAR 0 3
64580: PUSH
64581: LD_EXP 61
64585: PPUSH
64586: CALL 44970 0 1
64590: ST_TO_ADDR
// for i := 1 to list do
64591: LD_ADDR_VAR 0 2
64595: PUSH
64596: DOUBLE
64597: LD_INT 1
64599: DEC
64600: ST_TO_ADDR
64601: LD_VAR 0 3
64605: PUSH
64606: FOR_TO
64607: IFFALSE 64698
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64609: LD_STRING setWarehouseGatheringPointXY(
64611: PUSH
64612: LD_VAR 0 3
64616: PUSH
64617: LD_VAR 0 2
64621: ARRAY
64622: PUSH
64623: LD_INT 1
64625: ARRAY
64626: STR
64627: PUSH
64628: LD_STRING ,
64630: STR
64631: PUSH
64632: LD_VAR 0 3
64636: PUSH
64637: LD_VAR 0 2
64641: ARRAY
64642: PUSH
64643: LD_INT 2
64645: ARRAY
64646: STR
64647: PUSH
64648: LD_STRING ,
64650: STR
64651: PUSH
64652: LD_VAR 0 3
64656: PUSH
64657: LD_VAR 0 2
64661: ARRAY
64662: PUSH
64663: LD_INT 3
64665: ARRAY
64666: STR
64667: PUSH
64668: LD_STRING ,
64670: STR
64671: PUSH
64672: LD_VAR 0 3
64676: PUSH
64677: LD_VAR 0 2
64681: ARRAY
64682: PUSH
64683: LD_INT 4
64685: ARRAY
64686: STR
64687: PUSH
64688: LD_STRING )
64690: STR
64691: PPUSH
64692: CALL_OW 559
64696: GO 64606
64698: POP
64699: POP
// end ; end ;
64700: LD_VAR 0 1
64704: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64705: LD_INT 0
64707: PPUSH
64708: PPUSH
// if not mpSidePositions then
64709: LD_EXP 5
64713: NOT
64714: IFFALSE 64718
// exit ;
64716: GO 64789
// result :=  ;
64718: LD_ADDR_VAR 0 1
64722: PUSH
64723: LD_STRING 
64725: ST_TO_ADDR
// for i := 1 to 8 do
64726: LD_ADDR_VAR 0 2
64730: PUSH
64731: DOUBLE
64732: LD_INT 1
64734: DEC
64735: ST_TO_ADDR
64736: LD_INT 8
64738: PUSH
64739: FOR_TO
64740: IFFALSE 64770
// begin result := result & mpSidePositions [ i ] & ; ;
64742: LD_ADDR_VAR 0 1
64746: PUSH
64747: LD_VAR 0 1
64751: PUSH
64752: LD_EXP 5
64756: PUSH
64757: LD_VAR 0 2
64761: ARRAY
64762: STR
64763: PUSH
64764: LD_STRING ;
64766: STR
64767: ST_TO_ADDR
// end ;
64768: GO 64739
64770: POP
64771: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64772: LD_STRING setMultiplayerRealPosition("
64774: PUSH
64775: LD_VAR 0 1
64779: STR
64780: PUSH
64781: LD_STRING ");
64783: STR
64784: PPUSH
64785: CALL_OW 559
// end ;
64789: LD_VAR 0 1
64793: RET
