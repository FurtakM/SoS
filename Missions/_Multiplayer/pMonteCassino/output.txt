// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 4254 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 4677 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 0
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 0
  48: PUSH
  49: LD_INT 0
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 0
  60: PUSH
  61: LD_INT 0
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 0
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: LD_INT 1
  90: PUSH
  91: EMPTY
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: LIST
 111: LIST
 112: LIST
 113: LIST
 114: ST_TO_ADDR
// mpGameSettingsValues := [ [ ] , [ 9 , 12 , 15 , 24 ] , [ 3 , 5 , 7 , 9 ] , [ [ 0 , 0 , 0 ] , [ 1000 , 300 , 0 ] , [ 2000 , 750 , 100 ] , [ 3000 , 1500 , 300 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ ] , [ ] , [ ] , [ 0 , 1 ] , [ ] , [ ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 5 5$0 , 10 10$0 , 15 15$0 , 20 20$0 ] , [ 60 60$0 , 90 90$0 , 120 120$0 ] , ] ;
 115: LD_ADDR_EXP 5
 119: PUSH
 120: EMPTY
 121: PUSH
 122: LD_INT 9
 124: PUSH
 125: LD_INT 12
 127: PUSH
 128: LD_INT 15
 130: PUSH
 131: LD_INT 24
 133: PUSH
 134: EMPTY
 135: LIST
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 3
 142: PUSH
 143: LD_INT 5
 145: PUSH
 146: LD_INT 7
 148: PUSH
 149: LD_INT 9
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: LIST
 156: LIST
 157: PUSH
 158: LD_INT 0
 160: PUSH
 161: LD_INT 0
 163: PUSH
 164: LD_INT 0
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 1000
 174: PUSH
 175: LD_INT 300
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: PUSH
 186: LD_INT 2000
 188: PUSH
 189: LD_INT 750
 191: PUSH
 192: LD_INT 100
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_INT 3000
 202: PUSH
 203: LD_INT 1500
 205: PUSH
 206: LD_INT 300
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 3
 228: PUSH
 229: LD_INT 4
 231: PUSH
 232: EMPTY
 233: LIST
 234: LIST
 235: LIST
 236: LIST
 237: PUSH
 238: LD_INT 0
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 2
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_INT 0
 254: PUSH
 255: LD_INT 1
 257: PUSH
 258: LD_INT 2
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: PUSH
 266: EMPTY
 267: PUSH
 268: EMPTY
 269: PUSH
 270: EMPTY
 271: PUSH
 272: LD_INT 0
 274: PUSH
 275: LD_INT 1
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: EMPTY
 283: PUSH
 284: EMPTY
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 13650
 291: PUSH
 292: LD_INT 7350
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 0
 302: PUSH
 303: LD_INT 2
 305: PUSH
 306: LD_INT 4
 308: PUSH
 309: LD_INT 6
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: PUSH
 320: EMPTY
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: LD_INT 31500
 330: PUSH
 331: LD_INT 52500
 333: PUSH
 334: LD_INT 63000
 336: PUSH
 337: LD_INT 94500
 339: PUSH
 340: LD_INT 126000
 342: PUSH
 343: LD_INT 189000
 345: PUSH
 346: LD_INT 210000
 348: PUSH
 349: LD_INT 252000
 351: PUSH
 352: LD_INT 378000
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: LIST
 365: LIST
 366: LIST
 367: PUSH
 368: EMPTY
 369: PUSH
 370: EMPTY
 371: PUSH
 372: LD_INT 10500
 374: PUSH
 375: LD_INT 21000
 377: PUSH
 378: LD_INT 31500
 380: PUSH
 381: LD_INT 42000
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: PUSH
 390: LD_INT 126000
 392: PUSH
 393: LD_INT 189000
 395: PUSH
 396: LD_INT 252000
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: ST_TO_ADDR
// mpGameSettings := [ 0 , 24 , 4 , [ 1000 , 300 , 0 ] , 3 , 1 , 2 , 0 , 0 , 0 , 1 , - 1 , 0 , 0 0$20 , 3 , 0 , 0 , 0 , 0 , 0 , 3 3$0 , 60 60$0 ] ;
 428: LD_ADDR_EXP 6
 432: PUSH
 433: LD_INT 0
 435: PUSH
 436: LD_INT 24
 438: PUSH
 439: LD_INT 4
 441: PUSH
 442: LD_INT 1000
 444: PUSH
 445: LD_INT 300
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: PUSH
 456: LD_INT 3
 458: PUSH
 459: LD_INT 1
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 0
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: LD_INT 1
 479: NEG
 480: PUSH
 481: LD_INT 0
 483: PUSH
 484: LD_INT 700
 486: PUSH
 487: LD_INT 3
 489: PUSH
 490: LD_INT 0
 492: PUSH
 493: LD_INT 0
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: LD_INT 0
 501: PUSH
 502: LD_INT 0
 504: PUSH
 505: LD_INT 6300
 507: PUSH
 508: LD_INT 126000
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: ST_TO_ADDR
// mpGameType := GameTypeArmsArtifact ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_INT 7
 542: ST_TO_ADDR
// your_side := 1 ;
 543: LD_ADDR_OWVAR 2
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 551: LD_ADDR_EXP 7
 555: PUSH
 556: LD_INT 1
 558: PUSH
 559: LD_INT 2
 561: PUSH
 562: LD_INT 3
 564: PUSH
 565: LD_INT 4
 567: PUSH
 568: LD_INT 5
 570: PUSH
 571: LD_INT 6
 573: PUSH
 574: LD_INT 7
 576: PUSH
 577: LD_INT 8
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 ] ;
 590: LD_ADDR_EXP 8
 594: PUSH
 595: LD_INT 1
 597: PUSH
 598: LD_INT 1
 600: PUSH
 601: LD_INT 2
 603: PUSH
 604: LD_INT 2
 606: PUSH
 607: LD_INT 2
 609: PUSH
 610: LD_INT 3
 612: PUSH
 613: LD_INT 3
 615: PUSH
 616: LD_INT 3
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 629: LD_ADDR_EXP 9
 633: PUSH
 634: LD_INT 1
 636: PUSH
 637: LD_INT 2
 639: PUSH
 640: LD_INT 3
 642: PUSH
 643: LD_INT 1
 645: PUSH
 646: LD_INT 2
 648: PUSH
 649: LD_INT 3
 651: PUSH
 652: LD_INT 1
 654: PUSH
 655: LD_INT 2
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 , 5 ] , [ 6 , 7 , 8 ] ] ;
 668: LD_ADDR_EXP 10
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 3
 685: PUSH
 686: LD_INT 4
 688: PUSH
 689: LD_INT 5
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 6
 699: PUSH
 700: LD_INT 7
 702: PUSH
 703: LD_INT 8
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: LIST
 715: ST_TO_ADDR
// mpTeamGame := true ;
 716: LD_ADDR_EXP 11
 720: PUSH
 721: LD_INT 1
 723: ST_TO_ADDR
// mpMapSize := [ 160 , 290 ] ;
 724: LD_ADDR_EXP 29
 728: PUSH
 729: LD_INT 160
 731: PUSH
 732: LD_INT 290
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: ST_TO_ADDR
// end ;
 739: LD_VAR 0 1
 743: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
 748: PPUSH
 749: PPUSH
 750: PPUSH
 751: PPUSH
 752: PPUSH
// mpBuildUpAreas := [ buildUpCenterArea , buildUpCenterArea , buildUpNorthArea , buildUpNorthArea , buildUpNorthArea , buildUpSouthArea , buildUpSouthArea , buildUpSouthArea ] ;
 753: LD_ADDR_EXP 19
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: LD_INT 3
 763: PUSH
 764: LD_INT 1
 766: PUSH
 767: LD_INT 1
 769: PUSH
 770: LD_INT 1
 772: PUSH
 773: LD_INT 2
 775: PUSH
 776: LD_INT 2
 778: PUSH
 779: LD_INT 2
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 792: LD_ADDR_EXP 18
 796: PUSH
 797: EMPTY
 798: PUSH
 799: LD_EXP 19
 803: UNION
 804: ST_TO_ADDR
// if gameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
 805: LD_VAR 0 1
 809: PUSH
 810: LD_INT 2
 812: PUSH
 813: LD_INT 6
 815: PUSH
 816: LD_INT 7
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: LIST
 823: IN
 824: IFFALSE 836
// baseLevel := 1 else
 826: LD_ADDR_VAR 0 7
 830: PUSH
 831: LD_INT 1
 833: ST_TO_ADDR
 834: GO 850
// baseLevel := mpGameSettings [ 1 ] ;
 836: LD_ADDR_VAR 0 7
 840: PUSH
 841: LD_EXP 6
 845: PUSH
 846: LD_INT 1
 848: ARRAY
 849: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 850: LD_ADDR_EXP 24
 854: PUSH
 855: LD_EXP 6
 859: PUSH
 860: LD_INT 2
 862: ARRAY
 863: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 864: LD_ADDR_EXP 25
 868: PUSH
 869: LD_EXP 6
 873: PUSH
 874: LD_INT 3
 876: ARRAY
 877: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 878: LD_ADDR_EXP 15
 882: PUSH
 883: LD_EXP 6
 887: PUSH
 888: LD_INT 4
 890: ARRAY
 891: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 892: LD_ADDR_EXP 27
 896: PUSH
 897: LD_EXP 6
 901: PUSH
 902: LD_INT 5
 904: ARRAY
 905: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 906: LD_ADDR_VAR 0 5
 910: PUSH
 911: LD_EXP 6
 915: PUSH
 916: LD_INT 6
 918: ARRAY
 919: PUSH
 920: LD_INT 0
 922: GREATER
 923: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 924: LD_ADDR_VAR 0 6
 928: PUSH
 929: LD_EXP 6
 933: PUSH
 934: LD_INT 7
 936: ARRAY
 937: PUSH
 938: LD_INT 0
 940: GREATER
 941: ST_TO_ADDR
// kingCamArea := 0 ;
 942: LD_ADDR_EXP 2
 946: PUSH
 947: LD_INT 0
 949: ST_TO_ADDR
// kingArea := 0 ;
 950: LD_ADDR_EXP 1
 954: PUSH
 955: LD_INT 0
 957: ST_TO_ADDR
// if gameType = GameTypeKing then
 958: LD_VAR 0 1
 962: PUSH
 963: LD_INT 3
 965: EQUAL
 966: IFFALSE 1006
// begin mpKingArea := 0 ;
 968: LD_ADDR_EXP 34
 972: PUSH
 973: LD_INT 0
 975: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
 976: LD_ADDR_EXP 35
 980: PUSH
 981: LD_EXP 6
 985: PUSH
 986: LD_INT 8
 988: ARRAY
 989: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
 990: LD_ADDR_EXP 37
 994: PUSH
 995: LD_EXP 6
 999: PUSH
1000: LD_INT 10
1002: ARRAY
1003: ST_TO_ADDR
// end else
1004: GO 1030
// begin mpKingArea := 0 ;
1006: LD_ADDR_EXP 34
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// mpPoints := 0 ;
1014: LD_ADDR_EXP 35
1018: PUSH
1019: LD_INT 0
1021: ST_TO_ADDR
// mpEmissions := 0 ;
1022: LD_ADDR_EXP 37
1026: PUSH
1027: LD_INT 0
1029: ST_TO_ADDR
// end ; mpVehicles := [ [ [ us_morphling , engine_siberite , control_manual , us_heavy_gun ] , [ us_morphling , engine_siberite , control_manual , us_heavy_gun ] , [ us_morphling , engine_siberite , control_computer , us_cargo_bay ] ] , [ [ ar_half_tracked , engine_siberite , control_manual , ar_gun ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] ] , [ [ ru_heavy_wheeled , engine_siberite , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_siberite , control_manual , ru_heavy_gun ] , [ ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay ] ] ] ;
1030: LD_ADDR_EXP 36
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 3
1040: PUSH
1041: LD_INT 1
1043: PUSH
1044: LD_INT 6
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_INT 5
1055: PUSH
1056: LD_INT 3
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 6
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 5
1073: PUSH
1074: LD_INT 3
1076: PUSH
1077: LD_INT 3
1079: PUSH
1080: LD_INT 12
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: PUSH
1094: LD_INT 14
1096: PUSH
1097: LD_INT 3
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: LD_INT 27
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 14
1114: PUSH
1115: LD_INT 3
1117: PUSH
1118: LD_INT 1
1120: PUSH
1121: LD_INT 27
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 14
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: LD_INT 5
1138: PUSH
1139: LD_INT 32
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 23
1155: PUSH
1156: LD_INT 3
1158: PUSH
1159: LD_INT 1
1161: PUSH
1162: LD_INT 46
1164: PUSH
1165: EMPTY
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: PUSH
1171: LD_INT 23
1173: PUSH
1174: LD_INT 3
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 46
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 21
1191: PUSH
1192: LD_INT 3
1194: PUSH
1195: LD_INT 3
1197: PUSH
1198: LD_INT 51
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: LIST
1216: ST_TO_ADDR
// mpSharedVision := mpGameSettings [ 11 ] ;
1217: LD_ADDR_EXP 16
1221: PUSH
1222: LD_EXP 6
1226: PUSH
1227: LD_INT 11
1229: ARRAY
1230: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1231: LD_ADDR_EXP 22
1235: PUSH
1236: LD_EXP 6
1240: PUSH
1241: LD_INT 12
1243: ARRAY
1244: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1245: LD_ADDR_EXP 26
1249: PUSH
1250: LD_EXP 6
1254: PUSH
1255: LD_INT 13
1257: ARRAY
1258: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1259: LD_ADDR_EXP 33
1263: PUSH
1264: LD_EXP 6
1268: PUSH
1269: LD_INT 14
1271: ARRAY
1272: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1273: LD_ADDR_EXP 30
1277: PUSH
1278: LD_EXP 6
1282: PUSH
1283: LD_INT 15
1285: ARRAY
1286: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1287: LD_ADDR_EXP 28
1291: PUSH
1292: LD_EXP 6
1296: PUSH
1297: LD_INT 18
1299: ARRAY
1300: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1301: LD_ADDR_EXP 20
1305: PUSH
1306: LD_EXP 6
1310: PUSH
1311: LD_INT 21
1313: ARRAY
1314: ST_TO_ADDR
// mpTimeToWin := mpGameSettings [ 22 ] ;
1315: LD_ADDR_EXP 46
1319: PUSH
1320: LD_EXP 6
1324: PUSH
1325: LD_INT 22
1327: ARRAY
1328: ST_TO_ADDR
// mpApemansArea := [ base1ApeArea , base2ApeArea , base3ApeArea , base4ApeArea , base5ApeArea , base6ApeArea , base7ApeArea , base8ApeArea ] ;
1329: LD_ADDR_EXP 31
1333: PUSH
1334: LD_INT 5
1336: PUSH
1337: LD_INT 6
1339: PUSH
1340: LD_INT 7
1342: PUSH
1343: LD_INT 8
1345: PUSH
1346: LD_INT 9
1348: PUSH
1349: LD_INT 10
1351: PUSH
1352: LD_INT 11
1354: PUSH
1355: LD_INT 12
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( customSpawnArea1 , 1 ) , GetBuildingFromArea ( customSpawnArea2 , 4 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 2 ) , GetBuildingFromArea ( depotArea5 , 2 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 5 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1368: LD_ADDR_VAR 0 8
1372: PUSH
1373: LD_INT 92
1375: PPUSH
1376: LD_INT 1
1378: PPUSH
1379: CALL 59160 0 2
1383: PUSH
1384: LD_INT 91
1386: PPUSH
1387: LD_INT 4
1389: PPUSH
1390: CALL 59160 0 2
1394: PUSH
1395: LD_INT 15
1397: PPUSH
1398: LD_INT 2
1400: PPUSH
1401: CALL 59160 0 2
1405: PUSH
1406: LD_INT 16
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: CALL 59160 0 2
1416: PUSH
1417: LD_INT 17
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL 59160 0 2
1427: PUSH
1428: LD_INT 18
1430: PPUSH
1431: LD_INT 5
1433: PPUSH
1434: CALL 59160 0 2
1438: PUSH
1439: LD_INT 19
1441: PPUSH
1442: LD_INT 5
1444: PPUSH
1445: CALL 59160 0 2
1449: PUSH
1450: LD_INT 20
1452: PPUSH
1453: LD_INT 5
1455: PPUSH
1456: CALL 59160 0 2
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: DOUBLE
1477: LD_INT 1
1479: DEC
1480: ST_TO_ADDR
1481: LD_VAR 0 8
1485: PPUSH
1486: CALL 18465 0 1
1490: PUSH
1491: FOR_TO
1492: IFFALSE 1596
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1494: LD_ADDR_EXP 21
1498: PUSH
1499: LD_EXP 21
1503: PPUSH
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_VAR 0 8
1513: PUSH
1514: LD_VAR 0 3
1518: ARRAY
1519: PUSH
1520: LD_INT 1
1522: ARRAY
1523: PPUSH
1524: LD_VAR 0 8
1528: PUSH
1529: LD_VAR 0 3
1533: ARRAY
1534: PUSH
1535: LD_INT 3
1537: ARRAY
1538: PPUSH
1539: LD_INT 10
1541: PPUSH
1542: CALL_OW 272
1546: PUSH
1547: LD_VAR 0 8
1551: PUSH
1552: LD_VAR 0 3
1556: ARRAY
1557: PUSH
1558: LD_INT 2
1560: ARRAY
1561: PPUSH
1562: LD_VAR 0 8
1566: PUSH
1567: LD_VAR 0 3
1571: ARRAY
1572: PUSH
1573: LD_INT 3
1575: ARRAY
1576: PPUSH
1577: LD_INT 10
1579: PPUSH
1580: CALL_OW 273
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 1
1593: ST_TO_ADDR
1594: GO 1491
1596: POP
1597: POP
// if hasOil then
1598: LD_VAR 0 5
1602: IFFALSE 1741
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1604: LD_ADDR_VAR 0 4
1608: PUSH
1609: LD_EXP 6
1613: PUSH
1614: LD_INT 6
1616: ARRAY
1617: PUSH
1618: LD_INT 2
1620: EQUAL
1621: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1622: LD_ADDR_EXP 12
1626: PUSH
1627: LD_INT 21
1629: PPUSH
1630: LD_VAR 0 4
1634: PPUSH
1635: CALL 58993 0 2
1639: PUSH
1640: LD_INT 23
1642: PPUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: CALL 58993 0 2
1652: PUSH
1653: LD_INT 25
1655: PPUSH
1656: LD_VAR 0 4
1660: PPUSH
1661: CALL 58993 0 2
1665: PUSH
1666: LD_INT 27
1668: PPUSH
1669: LD_VAR 0 4
1673: PPUSH
1674: CALL 58993 0 2
1678: PUSH
1679: LD_INT 29
1681: PPUSH
1682: LD_VAR 0 4
1686: PPUSH
1687: CALL 58993 0 2
1691: PUSH
1692: LD_INT 31
1694: PPUSH
1695: LD_VAR 0 4
1699: PPUSH
1700: CALL 58993 0 2
1704: PUSH
1705: LD_INT 33
1707: PPUSH
1708: LD_VAR 0 4
1712: PPUSH
1713: CALL 58993 0 2
1717: PUSH
1718: LD_INT 35
1720: PPUSH
1721: LD_VAR 0 4
1725: PPUSH
1726: CALL 58993 0 2
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// end ; if hasSib then
1741: LD_VAR 0 6
1745: IFFALSE 1884
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1747: LD_ADDR_VAR 0 4
1751: PUSH
1752: LD_EXP 6
1756: PUSH
1757: LD_INT 7
1759: ARRAY
1760: PUSH
1761: LD_INT 2
1763: EQUAL
1764: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1765: LD_ADDR_EXP 13
1769: PUSH
1770: LD_INT 22
1772: PPUSH
1773: LD_VAR 0 4
1777: PPUSH
1778: CALL 58993 0 2
1782: PUSH
1783: LD_INT 24
1785: PPUSH
1786: LD_VAR 0 4
1790: PPUSH
1791: CALL 58993 0 2
1795: PUSH
1796: LD_INT 26
1798: PPUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: CALL 58993 0 2
1808: PUSH
1809: LD_INT 28
1811: PPUSH
1812: LD_VAR 0 4
1816: PPUSH
1817: CALL 58993 0 2
1821: PUSH
1822: LD_INT 30
1824: PPUSH
1825: LD_VAR 0 4
1829: PPUSH
1830: CALL 58993 0 2
1834: PUSH
1835: LD_INT 32
1837: PPUSH
1838: LD_VAR 0 4
1842: PPUSH
1843: CALL 58993 0 2
1847: PUSH
1848: LD_INT 34
1850: PPUSH
1851: LD_VAR 0 4
1855: PPUSH
1856: CALL 58993 0 2
1860: PUSH
1861: LD_INT 36
1863: PPUSH
1864: LD_VAR 0 4
1868: PPUSH
1869: CALL 58993 0 2
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1884: LD_VAR 0 7
1888: PUSH
1889: LD_INT 1
1891: GREATEREQUAL
1892: IFFALSE 1997
// mpDepots := [ GetBuildingFromArea ( depotArea1 , 1 ) , GetBuildingFromArea ( depotArea2 , 4 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 2 ) , GetBuildingFromArea ( depotArea5 , 2 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 5 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1894: LD_ADDR_EXP 14
1898: PUSH
1899: LD_INT 13
1901: PPUSH
1902: LD_INT 1
1904: PPUSH
1905: CALL 59160 0 2
1909: PUSH
1910: LD_INT 14
1912: PPUSH
1913: LD_INT 4
1915: PPUSH
1916: CALL 59160 0 2
1920: PUSH
1921: LD_INT 15
1923: PPUSH
1924: LD_INT 2
1926: PPUSH
1927: CALL 59160 0 2
1931: PUSH
1932: LD_INT 16
1934: PPUSH
1935: LD_INT 2
1937: PPUSH
1938: CALL 59160 0 2
1942: PUSH
1943: LD_INT 17
1945: PPUSH
1946: LD_INT 2
1948: PPUSH
1949: CALL 59160 0 2
1953: PUSH
1954: LD_INT 18
1956: PPUSH
1957: LD_INT 5
1959: PPUSH
1960: CALL 59160 0 2
1964: PUSH
1965: LD_INT 19
1967: PPUSH
1968: LD_INT 5
1970: PPUSH
1971: CALL 59160 0 2
1975: PUSH
1976: LD_INT 20
1978: PPUSH
1979: LD_INT 5
1981: PPUSH
1982: CALL 59160 0 2
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: ST_TO_ADDR
// end ;
1997: LD_VAR 0 2
2001: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2002: GO 2004
2004: DISABLE
2005: LD_INT 0
2007: PPUSH
2008: PPUSH
2009: PPUSH
2010: PPUSH
2011: PPUSH
2012: PPUSH
2013: PPUSH
2014: PPUSH
// begin if not mpShipments then
2015: LD_EXP 27
2019: NOT
2020: IFFALSE 2024
// exit ;
2022: GO 2483
// case mpShipments of 1 :
2024: LD_EXP 27
2028: PUSH
2029: LD_INT 1
2031: DOUBLE
2032: EQUAL
2033: IFTRUE 2037
2035: GO 2072
2037: POP
// begin time := 0 0$30 ;
2038: LD_ADDR_VAR 0 5
2042: PUSH
2043: LD_INT 1050
2045: ST_TO_ADDR
// normalTime := 0 0$30 ;
2046: LD_ADDR_VAR 0 6
2050: PUSH
2051: LD_INT 1050
2053: ST_TO_ADDR
// maxTime := 1 1$20 ;
2054: LD_ADDR_VAR 0 8
2058: PUSH
2059: LD_INT 2800
2061: ST_TO_ADDR
// delayTime := 0 0$5 ;
2062: LD_ADDR_VAR 0 7
2066: PUSH
2067: LD_INT 175
2069: ST_TO_ADDR
// end ; 2 :
2070: GO 2202
2072: LD_INT 2
2074: DOUBLE
2075: EQUAL
2076: IFTRUE 2080
2078: GO 2115
2080: POP
// begin time := 0 0$25 ;
2081: LD_ADDR_VAR 0 5
2085: PUSH
2086: LD_INT 875
2088: ST_TO_ADDR
// normalTime := 0 0$25 ;
2089: LD_ADDR_VAR 0 6
2093: PUSH
2094: LD_INT 875
2096: ST_TO_ADDR
// maxTime := 1 1$10 ;
2097: LD_ADDR_VAR 0 8
2101: PUSH
2102: LD_INT 2450
2104: ST_TO_ADDR
// delayTime := 0 0$4 ;
2105: LD_ADDR_VAR 0 7
2109: PUSH
2110: LD_INT 140
2112: ST_TO_ADDR
// end ; 3 :
2113: GO 2202
2115: LD_INT 3
2117: DOUBLE
2118: EQUAL
2119: IFTRUE 2123
2121: GO 2158
2123: POP
// begin time := 0 0$20 ;
2124: LD_ADDR_VAR 0 5
2128: PUSH
2129: LD_INT 700
2131: ST_TO_ADDR
// normalTime := 0 0$20 ;
2132: LD_ADDR_VAR 0 6
2136: PUSH
2137: LD_INT 700
2139: ST_TO_ADDR
// maxTime := 1 1$00 ;
2140: LD_ADDR_VAR 0 8
2144: PUSH
2145: LD_INT 2100
2147: ST_TO_ADDR
// delayTime := 0 0$3 ;
2148: LD_ADDR_VAR 0 7
2152: PUSH
2153: LD_INT 105
2155: ST_TO_ADDR
// end ; 4 :
2156: GO 2202
2158: LD_INT 4
2160: DOUBLE
2161: EQUAL
2162: IFTRUE 2166
2164: GO 2201
2166: POP
// begin time := 0 0$15 ;
2167: LD_ADDR_VAR 0 5
2171: PUSH
2172: LD_INT 525
2174: ST_TO_ADDR
// normalTime := 0 0$15 ;
2175: LD_ADDR_VAR 0 6
2179: PUSH
2180: LD_INT 525
2182: ST_TO_ADDR
// maxTime := 0 0$55 ;
2183: LD_ADDR_VAR 0 8
2187: PUSH
2188: LD_INT 1925
2190: ST_TO_ADDR
// delayTime := 0 0$2 ;
2191: LD_ADDR_VAR 0 7
2195: PUSH
2196: LD_INT 70
2198: ST_TO_ADDR
// end ; end ;
2199: GO 2202
2201: POP
// areas := [ centerCratesArea ] ;
2202: LD_ADDR_VAR 0 4
2206: PUSH
2207: LD_INT 37
2209: PUSH
2210: EMPTY
2211: LIST
2212: ST_TO_ADDR
// tmp := [ 0 , 0 , playerCratesArea3 , playerCratesArea4 , playerCratesArea5 , playerCratesArea6 , playerCratesArea7 , playerCratesArea8 ] ;
2213: LD_ADDR_VAR 0 3
2217: PUSH
2218: LD_INT 0
2220: PUSH
2221: LD_INT 0
2223: PUSH
2224: LD_INT 38
2226: PUSH
2227: LD_INT 39
2229: PUSH
2230: LD_INT 40
2232: PUSH
2233: LD_INT 41
2235: PUSH
2236: LD_INT 42
2238: PUSH
2239: LD_INT 43
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: ST_TO_ADDR
// for i := 1 to 8 do
2252: LD_ADDR_VAR 0 1
2256: PUSH
2257: DOUBLE
2258: LD_INT 1
2260: DEC
2261: ST_TO_ADDR
2262: LD_INT 8
2264: PUSH
2265: FOR_TO
2266: IFFALSE 2337
// begin if not mpSidePositions [ i ] or tmp [ mpSidePositions [ i ] ] = 0 then
2268: LD_EXP 7
2272: PUSH
2273: LD_VAR 0 1
2277: ARRAY
2278: NOT
2279: IFTRUE 2303
2281: PUSH
2282: LD_VAR 0 3
2286: PUSH
2287: LD_EXP 7
2291: PUSH
2292: LD_VAR 0 1
2296: ARRAY
2297: ARRAY
2298: PUSH
2299: LD_INT 0
2301: EQUAL
2302: OR
2303: IFFALSE 2307
// continue ;
2305: GO 2265
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2307: LD_ADDR_VAR 0 4
2311: PUSH
2312: LD_VAR 0 4
2316: PUSH
2317: LD_VAR 0 3
2321: PUSH
2322: LD_EXP 7
2326: PUSH
2327: LD_VAR 0 1
2331: ARRAY
2332: ARRAY
2333: ADD
2334: ST_TO_ADDR
// end ;
2335: GO 2265
2337: POP
2338: POP
// x := 1 ;
2339: LD_ADDR_VAR 0 2
2343: PUSH
2344: LD_INT 1
2346: ST_TO_ADDR
// repeat wait ( time ) ;
2347: LD_VAR 0 5
2351: PPUSH
2352: CALL_OW 67
// x := Inc ( x ) ;
2356: LD_ADDR_VAR 0 2
2360: PUSH
2361: LD_VAR 0 2
2365: PPUSH
2366: CALL 55814 0 1
2370: ST_TO_ADDR
// if x > 5 then
2371: LD_VAR 0 2
2375: PUSH
2376: LD_INT 5
2378: GREATER
2379: IFFALSE 2389
// x := 1 ;
2381: LD_ADDR_VAR 0 2
2385: PUSH
2386: LD_INT 1
2388: ST_TO_ADDR
// for i in areas do
2389: LD_ADDR_VAR 0 1
2393: PUSH
2394: LD_VAR 0 4
2398: PUSH
2399: FOR_IN
2400: IFFALSE 2439
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2402: LD_VAR 0 1
2406: PPUSH
2407: LD_INT 1
2409: PPUSH
2410: CALL_OW 287
2414: PUSH
2415: LD_INT 30
2417: LESS
2418: IFFALSE 2437
// begin CreateCratesArea ( x , i , true ) ;
2420: LD_VAR 0 2
2424: PPUSH
2425: LD_VAR 0 1
2429: PPUSH
2430: LD_INT 1
2432: PPUSH
2433: CALL_OW 55
// end ; end ;
2437: GO 2399
2439: POP
2440: POP
// time := time + delayTime ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_VAR 0 5
2450: PUSH
2451: LD_VAR 0 7
2455: PLUS
2456: ST_TO_ADDR
// if time > maxTime then
2457: LD_VAR 0 5
2461: PUSH
2462: LD_VAR 0 8
2466: GREATER
2467: IFFALSE 2479
// time := normalTime ;
2469: LD_ADDR_VAR 0 5
2473: PUSH
2474: LD_VAR 0 6
2478: ST_TO_ADDR
// until false ;
2479: LD_INT 0
2481: IFFALSE 2347
// end ;
2483: PPOPN 8
2485: END
// export function PrepareArmsRaceVehiclesList ( pos , side , nation ) ; var j ; begin
2486: LD_INT 0
2488: PPUSH
2489: PPUSH
// uc_nation := nation ;
2490: LD_ADDR_OWVAR 21
2494: PUSH
2495: LD_VAR 0 3
2499: ST_TO_ADDR
// uc_direction := 2 ;
2500: LD_ADDR_OWVAR 24
2504: PUSH
2505: LD_INT 2
2507: ST_TO_ADDR
// case nation of 1 :
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 1
2515: DOUBLE
2516: EQUAL
2517: IFTRUE 2521
2519: GO 2644
2521: POP
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_crane , 100 ) ;
2522: LD_INT 5
2524: PPUSH
2525: LD_INT 3
2527: PPUSH
2528: LD_INT 3
2530: PPUSH
2531: LD_INT 13
2533: PPUSH
2534: LD_INT 100
2536: PPUSH
2537: CALL 21261 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2541: CALL_OW 45
2545: PPUSH
2546: LD_INT 158
2548: PPUSH
2549: LD_INT 147
2551: PPUSH
2552: LD_INT 13
2554: PPUSH
2555: LD_INT 0
2557: PPUSH
2558: CALL_OW 50
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_crane , 100 ) ;
2562: LD_INT 5
2564: PPUSH
2565: LD_INT 3
2567: PPUSH
2568: LD_INT 3
2570: PPUSH
2571: LD_INT 13
2573: PPUSH
2574: LD_INT 100
2576: PPUSH
2577: CALL 21261 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2581: CALL_OW 45
2585: PPUSH
2586: LD_INT 158
2588: PPUSH
2589: LD_INT 147
2591: PPUSH
2592: LD_INT 13
2594: PPUSH
2595: LD_INT 0
2597: PPUSH
2598: CALL_OW 50
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
2602: LD_INT 5
2604: PPUSH
2605: LD_INT 3
2607: PPUSH
2608: LD_INT 3
2610: PPUSH
2611: LD_INT 11
2613: PPUSH
2614: LD_INT 100
2616: PPUSH
2617: CALL 21261 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2621: CALL_OW 45
2625: PPUSH
2626: LD_INT 158
2628: PPUSH
2629: LD_INT 147
2631: PPUSH
2632: LD_INT 13
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: CALL_OW 50
// end ; 2 :
2642: GO 2907
2644: LD_INT 2
2646: DOUBLE
2647: EQUAL
2648: IFTRUE 2652
2650: GO 2775
2652: POP
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , ar_crane , 100 ) ;
2653: LD_INT 14
2655: PPUSH
2656: LD_INT 3
2658: PPUSH
2659: LD_INT 5
2661: PPUSH
2662: LD_INT 88
2664: PPUSH
2665: LD_INT 100
2667: PPUSH
2668: CALL 21261 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2672: CALL_OW 45
2676: PPUSH
2677: LD_INT 158
2679: PPUSH
2680: LD_INT 147
2682: PPUSH
2683: LD_INT 13
2685: PPUSH
2686: LD_INT 0
2688: PPUSH
2689: CALL_OW 50
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , ar_crane , 100 ) ;
2693: LD_INT 14
2695: PPUSH
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 5
2701: PPUSH
2702: LD_INT 88
2704: PPUSH
2705: LD_INT 100
2707: PPUSH
2708: CALL 21261 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2712: CALL_OW 45
2716: PPUSH
2717: LD_INT 158
2719: PPUSH
2720: LD_INT 147
2722: PPUSH
2723: LD_INT 13
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 50
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , ar_radar , 100 ) ;
2733: LD_INT 14
2735: PPUSH
2736: LD_INT 3
2738: PPUSH
2739: LD_INT 5
2741: PPUSH
2742: LD_INT 30
2744: PPUSH
2745: LD_INT 100
2747: PPUSH
2748: CALL 21261 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2752: CALL_OW 45
2756: PPUSH
2757: LD_INT 158
2759: PPUSH
2760: LD_INT 147
2762: PPUSH
2763: LD_INT 13
2765: PPUSH
2766: LD_INT 0
2768: PPUSH
2769: CALL_OW 50
// end ; 3 :
2773: GO 2907
2775: LD_INT 3
2777: DOUBLE
2778: EQUAL
2779: IFTRUE 2783
2781: GO 2906
2783: POP
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2784: LD_INT 22
2786: PPUSH
2787: LD_INT 3
2789: PPUSH
2790: LD_INT 3
2792: PPUSH
2793: LD_INT 52
2795: PPUSH
2796: LD_INT 100
2798: PPUSH
2799: CALL 21261 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2803: CALL_OW 45
2807: PPUSH
2808: LD_INT 158
2810: PPUSH
2811: LD_INT 147
2813: PPUSH
2814: LD_INT 13
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 50
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2824: LD_INT 22
2826: PPUSH
2827: LD_INT 3
2829: PPUSH
2830: LD_INT 3
2832: PPUSH
2833: LD_INT 52
2835: PPUSH
2836: LD_INT 100
2838: PPUSH
2839: CALL 21261 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2843: CALL_OW 45
2847: PPUSH
2848: LD_INT 158
2850: PPUSH
2851: LD_INT 147
2853: PPUSH
2854: LD_INT 13
2856: PPUSH
2857: LD_INT 0
2859: PPUSH
2860: CALL_OW 50
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_radar , 100 ) ;
2864: LD_INT 22
2866: PPUSH
2867: LD_INT 3
2869: PPUSH
2870: LD_INT 3
2872: PPUSH
2873: LD_INT 98
2875: PPUSH
2876: LD_INT 100
2878: PPUSH
2879: CALL 21261 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2883: CALL_OW 45
2887: PPUSH
2888: LD_INT 158
2890: PPUSH
2891: LD_INT 147
2893: PPUSH
2894: LD_INT 13
2896: PPUSH
2897: LD_INT 0
2899: PPUSH
2900: CALL_OW 50
// end ; end ;
2904: GO 2907
2906: POP
// end ;
2907: LD_VAR 0 4
2911: RET
// export function GetArmsRaceBuildingsList ( pos ) ; begin
2912: LD_INT 0
2914: PPUSH
// case pos of 1 :
2915: LD_VAR 0 1
2919: PUSH
2920: LD_INT 1
2922: DOUBLE
2923: EQUAL
2924: IFTRUE 2928
2926: GO 3504
2928: POP
// begin result := [ b_warehouse ^ GetBuildingFromArea ( dep1Area1 , 0 ) , b_warehouse ^ GetBuildingFromArea ( dep2Area1 , 3 ) , b_siberite_power ^ GetBuildingFromArea ( pw1Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw2Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw3Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw4Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw5Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw6Area1 , 5 ) , b_barracks ^ GetBuildingFromArea ( arm1Area1 , 5 ) , b_barracks ^ GetBuildingFromArea ( arm2Area1 , 3 ) , b_lab ^ GetBuildingFromArea ( lab1Area1 , 4 ) , b_factory ^ GetBuildingFromArea ( fac1Area1 , 1 ) , b_bunker ^ GetBuildingFromArea ( tw1Area1 , 0 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw2Area1 , 0 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw3Area1 , 0 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw4Area1 , 0 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw5Area1 , 0 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw6Area1 , 0 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw7Area1 , 3 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw8Area1 , 3 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw9Area1 , 3 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw10Area1 , 3 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw11Area1 , 3 ) ^ [ [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] ] ] ;
2929: LD_ADDR_VAR 0 2
2933: PUSH
2934: LD_INT 1
2936: PUSH
2937: LD_INT 44
2939: PPUSH
2940: LD_INT 0
2942: PPUSH
2943: CALL 59160 0 2
2947: ADD
2948: PUSH
2949: LD_INT 1
2951: PUSH
2952: LD_INT 45
2954: PPUSH
2955: LD_INT 3
2957: PPUSH
2958: CALL 59160 0 2
2962: ADD
2963: PUSH
2964: LD_INT 28
2966: PUSH
2967: LD_INT 46
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: CALL 59160 0 2
2977: ADD
2978: PUSH
2979: LD_INT 28
2981: PUSH
2982: LD_INT 47
2984: PPUSH
2985: LD_INT 5
2987: PPUSH
2988: CALL 59160 0 2
2992: ADD
2993: PUSH
2994: LD_INT 28
2996: PUSH
2997: LD_INT 48
2999: PPUSH
3000: LD_INT 5
3002: PPUSH
3003: CALL 59160 0 2
3007: ADD
3008: PUSH
3009: LD_INT 28
3011: PUSH
3012: LD_INT 49
3014: PPUSH
3015: LD_INT 5
3017: PPUSH
3018: CALL 59160 0 2
3022: ADD
3023: PUSH
3024: LD_INT 28
3026: PUSH
3027: LD_INT 50
3029: PPUSH
3030: LD_INT 5
3032: PPUSH
3033: CALL 59160 0 2
3037: ADD
3038: PUSH
3039: LD_INT 28
3041: PUSH
3042: LD_INT 51
3044: PPUSH
3045: LD_INT 5
3047: PPUSH
3048: CALL 59160 0 2
3052: ADD
3053: PUSH
3054: LD_INT 5
3056: PUSH
3057: LD_INT 52
3059: PPUSH
3060: LD_INT 5
3062: PPUSH
3063: CALL 59160 0 2
3067: ADD
3068: PUSH
3069: LD_INT 5
3071: PUSH
3072: LD_INT 53
3074: PPUSH
3075: LD_INT 3
3077: PPUSH
3078: CALL 59160 0 2
3082: ADD
3083: PUSH
3084: LD_INT 6
3086: PUSH
3087: LD_INT 54
3089: PPUSH
3090: LD_INT 4
3092: PPUSH
3093: CALL 59160 0 2
3097: ADD
3098: PUSH
3099: LD_INT 3
3101: PUSH
3102: LD_INT 55
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: CALL 59160 0 2
3112: ADD
3113: PUSH
3114: LD_INT 32
3116: PUSH
3117: LD_INT 56
3119: PPUSH
3120: LD_INT 0
3122: PPUSH
3123: CALL 59160 0 2
3127: ADD
3128: PUSH
3129: LD_INT 7
3131: PUSH
3132: LD_INT 28
3134: PUSH
3135: LD_INT 45
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: ADD
3146: PUSH
3147: LD_INT 32
3149: PUSH
3150: LD_INT 57
3152: PPUSH
3153: LD_INT 0
3155: PPUSH
3156: CALL 59160 0 2
3160: ADD
3161: PUSH
3162: LD_INT 9
3164: PUSH
3165: LD_INT 27
3167: PUSH
3168: LD_INT 46
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: PUSH
3176: EMPTY
3177: LIST
3178: ADD
3179: PUSH
3180: LD_INT 32
3182: PUSH
3183: LD_INT 58
3185: PPUSH
3186: LD_INT 0
3188: PPUSH
3189: CALL 59160 0 2
3193: ADD
3194: PUSH
3195: LD_INT 7
3197: PUSH
3198: LD_INT 28
3200: PUSH
3201: LD_INT 45
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: PUSH
3209: EMPTY
3210: LIST
3211: ADD
3212: PUSH
3213: LD_INT 32
3215: PUSH
3216: LD_INT 59
3218: PPUSH
3219: LD_INT 0
3221: PPUSH
3222: CALL 59160 0 2
3226: ADD
3227: PUSH
3228: LD_INT 7
3230: PUSH
3231: LD_INT 28
3233: PUSH
3234: LD_INT 45
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: LIST
3241: PUSH
3242: EMPTY
3243: LIST
3244: ADD
3245: PUSH
3246: LD_INT 32
3248: PUSH
3249: LD_INT 60
3251: PPUSH
3252: LD_INT 0
3254: PPUSH
3255: CALL 59160 0 2
3259: ADD
3260: PUSH
3261: LD_INT 9
3263: PUSH
3264: LD_INT 27
3266: PUSH
3267: LD_INT 46
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: LIST
3274: PUSH
3275: EMPTY
3276: LIST
3277: ADD
3278: PUSH
3279: LD_INT 32
3281: PUSH
3282: LD_INT 61
3284: PPUSH
3285: LD_INT 0
3287: PPUSH
3288: CALL 59160 0 2
3292: ADD
3293: PUSH
3294: LD_INT 9
3296: PUSH
3297: LD_INT 27
3299: PUSH
3300: LD_INT 46
3302: PUSH
3303: EMPTY
3304: LIST
3305: LIST
3306: LIST
3307: PUSH
3308: EMPTY
3309: LIST
3310: ADD
3311: PUSH
3312: LD_INT 32
3314: PUSH
3315: LD_INT 62
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL 59160 0 2
3325: ADD
3326: PUSH
3327: LD_INT 9
3329: PUSH
3330: LD_INT 27
3332: PUSH
3333: LD_INT 46
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: ADD
3344: PUSH
3345: LD_INT 32
3347: PUSH
3348: LD_INT 63
3350: PPUSH
3351: LD_INT 3
3353: PPUSH
3354: CALL 59160 0 2
3358: ADD
3359: PUSH
3360: LD_INT 9
3362: PUSH
3363: LD_INT 27
3365: PUSH
3366: LD_INT 46
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: LIST
3373: PUSH
3374: EMPTY
3375: LIST
3376: ADD
3377: PUSH
3378: LD_INT 32
3380: PUSH
3381: LD_INT 64
3383: PPUSH
3384: LD_INT 3
3386: PPUSH
3387: CALL 59160 0 2
3391: ADD
3392: PUSH
3393: LD_INT 7
3395: PUSH
3396: LD_INT 28
3398: PUSH
3399: LD_INT 45
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: LIST
3406: PUSH
3407: EMPTY
3408: LIST
3409: ADD
3410: PUSH
3411: LD_INT 32
3413: PUSH
3414: LD_INT 65
3416: PPUSH
3417: LD_INT 3
3419: PPUSH
3420: CALL 59160 0 2
3424: ADD
3425: PUSH
3426: LD_INT 7
3428: PUSH
3429: LD_INT 28
3431: PUSH
3432: LD_INT 45
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: EMPTY
3441: LIST
3442: ADD
3443: PUSH
3444: LD_INT 32
3446: PUSH
3447: LD_INT 66
3449: PPUSH
3450: LD_INT 3
3452: PPUSH
3453: CALL 59160 0 2
3457: ADD
3458: PUSH
3459: LD_INT 4
3461: PUSH
3462: LD_INT 25
3464: PUSH
3465: LD_INT 43
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: EMPTY
3474: LIST
3475: ADD
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: ST_TO_ADDR
// end ; 2 :
3502: GO 4089
3504: LD_INT 2
3506: DOUBLE
3507: EQUAL
3508: IFTRUE 3512
3510: GO 4088
3512: POP
// begin result := [ b_depot ^ GetBuildingFromArea ( dep1Area2 , 0 ) , b_depot ^ GetBuildingFromArea ( dep2Area2 , 2 ) , b_siberite_power ^ GetBuildingFromArea ( pw1Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw2Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw3Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw4Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw5Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw6Area2 , 5 ) , b_barracks ^ GetBuildingFromArea ( arm1Area2 , 0 ) , b_barracks ^ GetBuildingFromArea ( arm2Area2 , 2 ) , b_lab ^ GetBuildingFromArea ( lab1Area2 , 4 ) , b_factory ^ GetBuildingFromArea ( fac1Area2 , 4 ) , b_bunker ^ GetBuildingFromArea ( tw1Area2 , 5 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw2Area2 , 5 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw3Area2 , 5 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw4Area2 , 5 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw5Area2 , 2 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw6Area2 , 2 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw7Area2 , 2 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw8Area2 , 2 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw9Area2 , 2 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw10Area2 , 2 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw11Area2 , 2 ) ^ [ [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] ] ] ;
3513: LD_ADDR_VAR 0 2
3517: PUSH
3518: LD_INT 0
3520: PUSH
3521: LD_INT 68
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: CALL 59160 0 2
3531: ADD
3532: PUSH
3533: LD_INT 0
3535: PUSH
3536: LD_INT 69
3538: PPUSH
3539: LD_INT 2
3541: PPUSH
3542: CALL 59160 0 2
3546: ADD
3547: PUSH
3548: LD_INT 28
3550: PUSH
3551: LD_INT 70
3553: PPUSH
3554: LD_INT 5
3556: PPUSH
3557: CALL 59160 0 2
3561: ADD
3562: PUSH
3563: LD_INT 28
3565: PUSH
3566: LD_INT 71
3568: PPUSH
3569: LD_INT 5
3571: PPUSH
3572: CALL 59160 0 2
3576: ADD
3577: PUSH
3578: LD_INT 28
3580: PUSH
3581: LD_INT 72
3583: PPUSH
3584: LD_INT 5
3586: PPUSH
3587: CALL 59160 0 2
3591: ADD
3592: PUSH
3593: LD_INT 28
3595: PUSH
3596: LD_INT 73
3598: PPUSH
3599: LD_INT 5
3601: PPUSH
3602: CALL 59160 0 2
3606: ADD
3607: PUSH
3608: LD_INT 28
3610: PUSH
3611: LD_INT 74
3613: PPUSH
3614: LD_INT 5
3616: PPUSH
3617: CALL 59160 0 2
3621: ADD
3622: PUSH
3623: LD_INT 28
3625: PUSH
3626: LD_INT 75
3628: PPUSH
3629: LD_INT 5
3631: PPUSH
3632: CALL 59160 0 2
3636: ADD
3637: PUSH
3638: LD_INT 5
3640: PUSH
3641: LD_INT 76
3643: PPUSH
3644: LD_INT 0
3646: PPUSH
3647: CALL 59160 0 2
3651: ADD
3652: PUSH
3653: LD_INT 5
3655: PUSH
3656: LD_INT 82
3658: PPUSH
3659: LD_INT 2
3661: PPUSH
3662: CALL 59160 0 2
3666: ADD
3667: PUSH
3668: LD_INT 6
3670: PUSH
3671: LD_INT 89
3673: PPUSH
3674: LD_INT 4
3676: PPUSH
3677: CALL 59160 0 2
3681: ADD
3682: PUSH
3683: LD_INT 3
3685: PUSH
3686: LD_INT 90
3688: PPUSH
3689: LD_INT 4
3691: PPUSH
3692: CALL 59160 0 2
3696: ADD
3697: PUSH
3698: LD_INT 32
3700: PUSH
3701: LD_INT 77
3703: PPUSH
3704: LD_INT 5
3706: PPUSH
3707: CALL 59160 0 2
3711: ADD
3712: PUSH
3713: LD_INT 7
3715: PUSH
3716: LD_INT 28
3718: PUSH
3719: LD_INT 45
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: PUSH
3727: EMPTY
3728: LIST
3729: ADD
3730: PUSH
3731: LD_INT 32
3733: PUSH
3734: LD_INT 78
3736: PPUSH
3737: LD_INT 5
3739: PPUSH
3740: CALL 59160 0 2
3744: ADD
3745: PUSH
3746: LD_INT 9
3748: PUSH
3749: LD_INT 27
3751: PUSH
3752: LD_INT 46
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: LIST
3759: PUSH
3760: EMPTY
3761: LIST
3762: ADD
3763: PUSH
3764: LD_INT 32
3766: PUSH
3767: LD_INT 79
3769: PPUSH
3770: LD_INT 5
3772: PPUSH
3773: CALL 59160 0 2
3777: ADD
3778: PUSH
3779: LD_INT 7
3781: PUSH
3782: LD_INT 28
3784: PUSH
3785: LD_INT 45
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: PUSH
3793: EMPTY
3794: LIST
3795: ADD
3796: PUSH
3797: LD_INT 32
3799: PUSH
3800: LD_INT 80
3802: PPUSH
3803: LD_INT 5
3805: PPUSH
3806: CALL 59160 0 2
3810: ADD
3811: PUSH
3812: LD_INT 7
3814: PUSH
3815: LD_INT 28
3817: PUSH
3818: LD_INT 45
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: LIST
3825: PUSH
3826: EMPTY
3827: LIST
3828: ADD
3829: PUSH
3830: LD_INT 32
3832: PUSH
3833: LD_INT 81
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL 59160 0 2
3843: ADD
3844: PUSH
3845: LD_INT 9
3847: PUSH
3848: LD_INT 27
3850: PUSH
3851: LD_INT 46
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: LIST
3858: PUSH
3859: EMPTY
3860: LIST
3861: ADD
3862: PUSH
3863: LD_INT 32
3865: PUSH
3866: LD_INT 83
3868: PPUSH
3869: LD_INT 2
3871: PPUSH
3872: CALL 59160 0 2
3876: ADD
3877: PUSH
3878: LD_INT 9
3880: PUSH
3881: LD_INT 27
3883: PUSH
3884: LD_INT 46
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: LIST
3891: PUSH
3892: EMPTY
3893: LIST
3894: ADD
3895: PUSH
3896: LD_INT 32
3898: PUSH
3899: LD_INT 84
3901: PPUSH
3902: LD_INT 2
3904: PPUSH
3905: CALL 59160 0 2
3909: ADD
3910: PUSH
3911: LD_INT 9
3913: PUSH
3914: LD_INT 27
3916: PUSH
3917: LD_INT 46
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: LIST
3924: PUSH
3925: EMPTY
3926: LIST
3927: ADD
3928: PUSH
3929: LD_INT 32
3931: PUSH
3932: LD_INT 85
3934: PPUSH
3935: LD_INT 2
3937: PPUSH
3938: CALL 59160 0 2
3942: ADD
3943: PUSH
3944: LD_INT 9
3946: PUSH
3947: LD_INT 27
3949: PUSH
3950: LD_INT 46
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: LIST
3957: PUSH
3958: EMPTY
3959: LIST
3960: ADD
3961: PUSH
3962: LD_INT 32
3964: PUSH
3965: LD_INT 86
3967: PPUSH
3968: LD_INT 2
3970: PPUSH
3971: CALL 59160 0 2
3975: ADD
3976: PUSH
3977: LD_INT 7
3979: PUSH
3980: LD_INT 28
3982: PUSH
3983: LD_INT 45
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: LIST
3990: PUSH
3991: EMPTY
3992: LIST
3993: ADD
3994: PUSH
3995: LD_INT 32
3997: PUSH
3998: LD_INT 87
4000: PPUSH
4001: LD_INT 2
4003: PPUSH
4004: CALL 59160 0 2
4008: ADD
4009: PUSH
4010: LD_INT 7
4012: PUSH
4013: LD_INT 28
4015: PUSH
4016: LD_INT 45
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: LIST
4023: PUSH
4024: EMPTY
4025: LIST
4026: ADD
4027: PUSH
4028: LD_INT 32
4030: PUSH
4031: LD_INT 88
4033: PPUSH
4034: LD_INT 2
4036: PPUSH
4037: CALL 59160 0 2
4041: ADD
4042: PUSH
4043: LD_INT 4
4045: PUSH
4046: LD_INT 25
4048: PUSH
4049: LD_INT 43
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: LIST
4056: PUSH
4057: EMPTY
4058: LIST
4059: ADD
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: ST_TO_ADDR
// end ; end ;
4086: GO 4089
4088: POP
// end ; end_of_file
4089: LD_VAR 0 2
4093: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4094: LD_VAR 0 1
4098: PPUSH
4099: CALL 59958 0 1
// Multiplayer_UnitDestroyed ( un ) ;
4103: LD_VAR 0 1
4107: PPUSH
4108: CALL 9800 0 1
// end ;
4112: PPOPN 1
4114: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
4115: LD_VAR 0 1
4119: PPUSH
4120: CALL 59975 0 1
// end ;
4124: PPOPN 1
4126: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
4127: LD_VAR 0 1
4131: PPUSH
4132: CALL 10853 0 1
4136: PPOPN 1
4138: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
4139: LD_VAR 0 1
4143: PPUSH
4144: LD_VAR 0 2
4148: PPUSH
4149: CALL 60016 0 2
4153: PPOPN 2
4155: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
4156: LD_VAR 0 1
4160: PPUSH
4161: LD_VAR 0 2
4165: PPUSH
4166: CALL 10606 0 2
4170: PPOPN 2
4172: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
4173: LD_VAR 0 1
4177: PPUSH
4178: LD_VAR 0 2
4182: PPUSH
4183: LD_VAR 0 3
4187: PPUSH
4188: CALL 10906 0 3
4192: PPOPN 3
4194: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
4195: LD_VAR 0 1
4199: PPUSH
4200: LD_VAR 0 2
4204: PPUSH
4205: LD_VAR 0 3
4209: PPUSH
4210: LD_VAR 0 4
4214: PPUSH
4215: LD_VAR 0 5
4219: PPUSH
4220: CALL 11590 0 5
4224: PPOPN 5
4226: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
4227: LD_VAR 0 1
4231: PPUSH
4232: LD_VAR 0 2
4236: PPUSH
4237: LD_VAR 0 3
4241: PPUSH
4242: LD_VAR 0 4
4246: PPUSH
4247: CALL 11693 0 4
4251: PPOPN 4
4253: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
4254: LD_INT 0
4256: PPUSH
4257: PPUSH
// disable ( mpActive ) ;
4258: LD_INT 100
4260: DISABLE_MARKED
// disable ( mpWin ) ;
4261: LD_INT 101
4263: DISABLE_MARKED
// disable ( mpLose ) ;
4264: LD_INT 102
4266: DISABLE_MARKED
// mpGameType := 0 ;
4267: LD_ADDR_EXP 3
4271: PUSH
4272: LD_INT 0
4274: ST_TO_ADDR
// mpGameSettings := [ ] ;
4275: LD_ADDR_EXP 6
4279: PUSH
4280: EMPTY
4281: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
4282: LD_ADDR_EXP 4
4286: PUSH
4287: EMPTY
4288: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
4289: LD_ADDR_EXP 5
4293: PUSH
4294: EMPTY
4295: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
4296: LD_ADDR_EXP 29
4300: PUSH
4301: LD_INT 2
4303: PUSH
4304: LD_INT 2
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: ST_TO_ADDR
// mpOilDeposits := [ ] ;
4311: LD_ADDR_EXP 12
4315: PUSH
4316: EMPTY
4317: ST_TO_ADDR
// mpSibDeposits := [ ] ;
4318: LD_ADDR_EXP 13
4322: PUSH
4323: EMPTY
4324: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
4325: LD_ADDR_EXP 42
4329: PUSH
4330: EMPTY
4331: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
4332: LD_ADDR_EXP 43
4336: PUSH
4337: EMPTY
4338: ST_TO_ADDR
// mpDepots := [ ] ;
4339: LD_ADDR_EXP 14
4343: PUSH
4344: EMPTY
4345: ST_TO_ADDR
// mpBuildings := [ ] ;
4346: LD_ADDR_EXP 17
4350: PUSH
4351: EMPTY
4352: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
4353: LD_ADDR_EXP 18
4357: PUSH
4358: EMPTY
4359: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
4360: LD_ADDR_EXP 19
4364: PUSH
4365: EMPTY
4366: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
4367: LD_ADDR_EXP 20
4371: PUSH
4372: EMPTY
4373: ST_TO_ADDR
// mpStartingResources := [ ] ;
4374: LD_ADDR_EXP 15
4378: PUSH
4379: EMPTY
4380: ST_TO_ADDR
// mpStartPos := [ ] ;
4381: LD_ADDR_EXP 21
4385: PUSH
4386: EMPTY
4387: ST_TO_ADDR
// mpBattleFlag := - 1 ;
4388: LD_ADDR_EXP 22
4392: PUSH
4393: LD_INT 1
4395: NEG
4396: ST_TO_ADDR
// mpBattleFlags := [ ] ;
4397: LD_ADDR_EXP 23
4401: PUSH
4402: EMPTY
4403: ST_TO_ADDR
// mpApemans := [ ] ;
4404: LD_ADDR_EXP 30
4408: PUSH
4409: EMPTY
4410: ST_TO_ADDR
// mpApemansArea := [ ] ;
4411: LD_ADDR_EXP 31
4415: PUSH
4416: EMPTY
4417: ST_TO_ADDR
// mpRespawn := [ ] ;
4418: LD_ADDR_EXP 33
4422: PUSH
4423: EMPTY
4424: ST_TO_ADDR
// mpKingArea := 0 ;
4425: LD_ADDR_EXP 34
4429: PUSH
4430: LD_INT 0
4432: ST_TO_ADDR
// mpPoints := [ ] ;
4433: LD_ADDR_EXP 35
4437: PUSH
4438: EMPTY
4439: ST_TO_ADDR
// mpVehicles := 0 ;
4440: LD_ADDR_EXP 36
4444: PUSH
4445: LD_INT 0
4447: ST_TO_ADDR
// mpShipments := 0 ;
4448: LD_ADDR_EXP 27
4452: PUSH
4453: LD_INT 0
4455: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4456: LD_ADDR_EXP 40
4460: PUSH
4461: EMPTY
4462: PUSH
4463: EMPTY
4464: PUSH
4465: EMPTY
4466: PUSH
4467: EMPTY
4468: PUSH
4469: EMPTY
4470: PUSH
4471: EMPTY
4472: PUSH
4473: EMPTY
4474: PUSH
4475: EMPTY
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4487: LD_ADDR_EXP 32
4491: PUSH
4492: EMPTY
4493: PUSH
4494: EMPTY
4495: PUSH
4496: EMPTY
4497: PUSH
4498: EMPTY
4499: PUSH
4500: EMPTY
4501: PUSH
4502: EMPTY
4503: PUSH
4504: EMPTY
4505: PUSH
4506: EMPTY
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4518: LD_ADDR_EXP 41
4522: PUSH
4523: LD_INT 0
4525: PUSH
4526: LD_INT 0
4528: PUSH
4529: LD_INT 0
4531: PUSH
4532: LD_INT 0
4534: PUSH
4535: LD_INT 0
4537: PUSH
4538: LD_INT 0
4540: PUSH
4541: LD_INT 0
4543: PUSH
4544: LD_INT 0
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: ST_TO_ADDR
// mpEmissions := 0 ;
4557: LD_ADDR_EXP 37
4561: PUSH
4562: LD_INT 0
4564: ST_TO_ADDR
// mpTeleports := 0 ;
4565: LD_ADDR_EXP 44
4569: PUSH
4570: LD_INT 0
4572: ST_TO_ADDR
// mpArtifacts := 0 ;
4573: LD_ADDR_EXP 45
4577: PUSH
4578: LD_INT 0
4580: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
4581: LD_ADDR_EXP 46
4585: PUSH
4586: LD_INT 0
4588: ST_TO_ADDR
// mpPeopleSkill := 3 ;
4589: LD_ADDR_EXP 25
4593: PUSH
4594: LD_INT 3
4596: ST_TO_ADDR
// mpPeopleAmount := 15 ;
4597: LD_ADDR_EXP 24
4601: PUSH
4602: LD_INT 15
4604: ST_TO_ADDR
// mpDisplayStrings := 0 ;
4605: LD_ADDR_EXP 38
4609: PUSH
4610: LD_INT 0
4612: ST_TO_ADDR
// mpGameActive := false ;
4613: LD_ADDR_EXP 39
4617: PUSH
4618: LD_INT 0
4620: ST_TO_ADDR
// mpBlockRespThread := false ;
4621: LD_ADDR_EXP 47
4625: PUSH
4626: LD_INT 0
4628: ST_TO_ADDR
// for i := 1 to 32 do
4629: LD_ADDR_VAR 0 2
4633: PUSH
4634: DOUBLE
4635: LD_INT 1
4637: DEC
4638: ST_TO_ADDR
4639: LD_INT 32
4641: PUSH
4642: FOR_TO
4643: IFFALSE 4670
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
4645: LD_ADDR_EXP 6
4649: PUSH
4650: LD_EXP 6
4654: PPUSH
4655: LD_VAR 0 2
4659: PPUSH
4660: LD_INT 0
4662: PPUSH
4663: CALL_OW 1
4667: ST_TO_ADDR
4668: GO 4642
4670: POP
4671: POP
// end ;
4672: LD_VAR 0 1
4676: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
4677: LD_INT 0
4679: PPUSH
4680: PPUSH
4681: PPUSH
4682: PPUSH
4683: PPUSH
4684: PPUSH
4685: PPUSH
4686: PPUSH
4687: PPUSH
4688: PPUSH
4689: PPUSH
4690: PPUSH
4691: PPUSH
4692: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
4693: LD_ADDR_VAR 0 14
4697: PUSH
4698: LD_INT 1
4700: PUSH
4701: LD_INT 2
4703: PUSH
4704: LD_INT 3
4706: PUSH
4707: LD_INT 5
4709: PUSH
4710: LD_INT 6
4712: PUSH
4713: LD_INT 7
4715: PUSH
4716: LD_INT 8
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: ST_TO_ADDR
// for i in gameTypes do
4728: LD_ADDR_VAR 0 2
4732: PUSH
4733: LD_VAR 0 14
4737: PUSH
4738: FOR_IN
4739: IFFALSE 4748
// disable ( i ) ;
4741: LD_VAR 0 2
4745: DISABLE_MARKED
4746: GO 4738
4748: POP
4749: POP
// if Multiplayer then
4750: LD_OWVAR 4
4754: IFFALSE 4938
// begin mpGameType := mp_game_type ;
4756: LD_ADDR_EXP 3
4760: PUSH
4761: LD_OWVAR 6
4765: ST_TO_ADDR
// your_side := mp_player_side ;
4766: LD_ADDR_OWVAR 2
4770: PUSH
4771: LD_OWVAR 7
4775: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
4776: LD_ADDR_EXP 7
4780: PUSH
4781: LD_OWVAR 17
4785: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
4786: LD_ADDR_EXP 8
4790: PUSH
4791: LD_OWVAR 15
4795: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
4796: LD_ADDR_EXP 9
4800: PUSH
4801: LD_OWVAR 16
4805: ST_TO_ADDR
// mpTeams := mp_teams ;
4806: LD_ADDR_EXP 10
4810: PUSH
4811: LD_OWVAR 12
4815: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
4816: LD_ADDR_VAR 0 2
4820: PUSH
4821: DOUBLE
4822: LD_INT 1
4824: DEC
4825: ST_TO_ADDR
4826: LD_EXP 4
4830: PPUSH
4831: CALL 18465 0 1
4835: PUSH
4836: FOR_TO
4837: IFFALSE 4913
// begin setting := mpGameSettingsKeys [ i ] ;
4839: LD_ADDR_VAR 0 12
4843: PUSH
4844: LD_EXP 4
4848: PUSH
4849: LD_VAR 0 2
4853: ARRAY
4854: ST_TO_ADDR
// if setting then
4855: LD_VAR 0 12
4859: IFFALSE 4911
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
4861: LD_ADDR_EXP 6
4865: PUSH
4866: LD_EXP 6
4870: PPUSH
4871: LD_VAR 0 2
4875: PPUSH
4876: LD_EXP 5
4880: PUSH
4881: LD_VAR 0 2
4885: ARRAY
4886: PUSH
4887: LD_VAR 0 2
4891: PUSH
4892: LD_INT 1
4894: MINUS
4895: PPUSH
4896: CALL_OW 426
4900: PUSH
4901: LD_INT 1
4903: PLUS
4904: ARRAY
4905: PPUSH
4906: CALL_OW 1
4910: ST_TO_ADDR
// end ;
4911: GO 4836
4913: POP
4914: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
4915: LD_ADDR_EXP 11
4919: PUSH
4920: LD_EXP 8
4924: PUSH
4925: LD_INT 0
4927: PUSH
4928: EMPTY
4929: LIST
4930: DIFF
4931: PUSH
4932: LD_INT 1
4934: GREATER
4935: ST_TO_ADDR
// end else
4936: GO 4938
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
4938: LD_EXP 3
4942: PPUSH
4943: CALL 744 0 1
// if Count ( mpMarkedAreas ) then
4947: LD_EXP 18
4951: PPUSH
4952: CALL 18465 0 1
4956: IFFALSE 4987
// begin for i in mpMarkedAreas do
4958: LD_ADDR_VAR 0 2
4962: PUSH
4963: LD_EXP 18
4967: PUSH
4968: FOR_IN
4969: IFFALSE 4985
// SetAreaMapShow ( i , 0 ) ;
4971: LD_VAR 0 2
4975: PPUSH
4976: LD_INT 0
4978: PPUSH
4979: CALL_OW 424
4983: GO 4968
4985: POP
4986: POP
// end ; for i := 1 to 8 do
4987: LD_ADDR_VAR 0 2
4991: PUSH
4992: DOUBLE
4993: LD_INT 1
4995: DEC
4996: ST_TO_ADDR
4997: LD_INT 8
4999: PUSH
5000: FOR_TO
5001: IFFALSE 6460
// begin if not mpSidePositions [ i ] then
5003: LD_EXP 7
5007: PUSH
5008: LD_VAR 0 2
5012: ARRAY
5013: NOT
5014: IFFALSE 5018
// continue ;
5016: GO 5000
// side := i ;
5018: LD_ADDR_VAR 0 7
5022: PUSH
5023: LD_VAR 0 2
5027: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
5028: LD_ADDR_VAR 0 9
5032: PUSH
5033: LD_EXP 9
5037: PUSH
5038: LD_VAR 0 2
5042: ARRAY
5043: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
5044: LD_ADDR_VAR 0 8
5048: PUSH
5049: LD_EXP 7
5053: PUSH
5054: LD_VAR 0 2
5058: ARRAY
5059: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
5060: LD_EXP 12
5064: PPUSH
5065: CALL 18465 0 1
5069: IFFALSE 5146
// begin for j in mpOilDeposits [ pos ] do
5071: LD_ADDR_VAR 0 3
5075: PUSH
5076: LD_EXP 12
5080: PUSH
5081: LD_VAR 0 8
5085: ARRAY
5086: PUSH
5087: FOR_IN
5088: IFFALSE 5144
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
5090: LD_VAR 0 3
5094: PUSH
5095: LD_INT 1
5097: ARRAY
5098: PPUSH
5099: LD_VAR 0 3
5103: PUSH
5104: LD_INT 2
5106: ARRAY
5107: PPUSH
5108: LD_INT 2
5110: PPUSH
5111: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
5115: LD_VAR 0 3
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PPUSH
5124: LD_VAR 0 3
5128: PUSH
5129: LD_INT 2
5131: ARRAY
5132: PPUSH
5133: LD_VAR 0 7
5137: PPUSH
5138: CALL_OW 441
// end ;
5142: GO 5087
5144: POP
5145: POP
// end ; if Count ( mpSibDeposits ) then
5146: LD_EXP 13
5150: PPUSH
5151: CALL 18465 0 1
5155: IFFALSE 5232
// begin for j in mpSibDeposits [ pos ] do
5157: LD_ADDR_VAR 0 3
5161: PUSH
5162: LD_EXP 13
5166: PUSH
5167: LD_VAR 0 8
5171: ARRAY
5172: PUSH
5173: FOR_IN
5174: IFFALSE 5230
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
5176: LD_VAR 0 3
5180: PUSH
5181: LD_INT 1
5183: ARRAY
5184: PPUSH
5185: LD_VAR 0 3
5189: PUSH
5190: LD_INT 2
5192: ARRAY
5193: PPUSH
5194: LD_INT 3
5196: PPUSH
5197: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
5201: LD_VAR 0 3
5205: PUSH
5206: LD_INT 1
5208: ARRAY
5209: PPUSH
5210: LD_VAR 0 3
5214: PUSH
5215: LD_INT 2
5217: ARRAY
5218: PPUSH
5219: LD_VAR 0 7
5223: PPUSH
5224: CALL_OW 441
// end ;
5228: GO 5173
5230: POP
5231: POP
// end ; InitBc ;
5232: CALL_OW 21
// InitUc ;
5236: CALL_OW 18
// uc_side := side ;
5240: LD_ADDR_OWVAR 20
5244: PUSH
5245: LD_VAR 0 7
5249: ST_TO_ADDR
// uc_nation := nation ;
5250: LD_ADDR_OWVAR 21
5254: PUSH
5255: LD_VAR 0 9
5259: ST_TO_ADDR
// if mpBattleFlag > - 1 then
5260: LD_EXP 22
5264: PUSH
5265: LD_INT 1
5267: NEG
5268: GREATER
5269: IFFALSE 5428
// begin x := mpStartPos [ pos ] [ 1 ] ;
5271: LD_ADDR_VAR 0 5
5275: PUSH
5276: LD_EXP 21
5280: PUSH
5281: LD_VAR 0 8
5285: ARRAY
5286: PUSH
5287: LD_INT 1
5289: ARRAY
5290: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
5291: LD_ADDR_VAR 0 6
5295: PUSH
5296: LD_EXP 21
5300: PUSH
5301: LD_VAR 0 8
5305: ARRAY
5306: PUSH
5307: LD_INT 2
5309: ARRAY
5310: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
5311: LD_VAR 0 5
5315: PPUSH
5316: LD_VAR 0 6
5320: PPUSH
5321: LD_INT 12
5323: PPUSH
5324: LD_INT 2
5326: PPUSH
5327: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
5331: LD_ADDR_EXP 23
5335: PUSH
5336: LD_EXP 23
5340: PPUSH
5341: LD_VAR 0 7
5345: PPUSH
5346: LD_VAR 0 7
5350: PPUSH
5351: LD_VAR 0 5
5355: PPUSH
5356: LD_VAR 0 6
5360: PPUSH
5361: LD_INT 1
5363: PUSH
5364: LD_INT 100
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: PUSH
5371: LD_INT 2
5373: PUSH
5374: LD_INT 70
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: PUSH
5381: LD_INT 3
5383: PUSH
5384: LD_INT 40
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: PUSH
5391: LD_INT 10
5393: PUSH
5394: LD_INT 25
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PUSH
5401: LD_INT 20
5403: PUSH
5404: LD_INT 100
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: PPUSH
5418: CALL_OW 418
5422: PPUSH
5423: CALL_OW 1
5427: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
5428: LD_EXP 14
5432: PPUSH
5433: CALL 18465 0 1
5437: IFFALSE 5636
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
5439: LD_EXP 3
5443: PUSH
5444: LD_INT 2
5446: PUSH
5447: LD_INT 8
5449: PUSH
5450: LD_INT 6
5452: PUSH
5453: LD_INT 7
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: IN
5462: IFFALSE 5482
// begin bc_level := 10 ;
5464: LD_ADDR_OWVAR 43
5468: PUSH
5469: LD_INT 10
5471: ST_TO_ADDR
// bc_type := b_warehouse ;
5472: LD_ADDR_OWVAR 42
5476: PUSH
5477: LD_INT 1
5479: ST_TO_ADDR
// end else
5480: GO 5498
// begin bc_level := 0 ;
5482: LD_ADDR_OWVAR 43
5486: PUSH
5487: LD_INT 0
5489: ST_TO_ADDR
// bc_type := b_depot ;
5490: LD_ADDR_OWVAR 42
5494: PUSH
5495: LD_INT 0
5497: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
5498: LD_ADDR_VAR 0 4
5502: PUSH
5503: LD_EXP 14
5507: PUSH
5508: LD_VAR 0 8
5512: ARRAY
5513: PUSH
5514: LD_INT 1
5516: ARRAY
5517: PPUSH
5518: LD_EXP 14
5522: PUSH
5523: LD_VAR 0 8
5527: ARRAY
5528: PUSH
5529: LD_INT 2
5531: ARRAY
5532: PPUSH
5533: LD_EXP 14
5537: PUSH
5538: LD_VAR 0 8
5542: ARRAY
5543: PUSH
5544: LD_INT 3
5546: ARRAY
5547: PPUSH
5548: CALL_OW 47
5552: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
5553: LD_VAR 0 4
5557: PPUSH
5558: LD_STRING @
5560: PUSH
5561: LD_VAR 0 7
5565: STR
5566: PPUSH
5567: CALL_OW 500
// if Count ( mpStartingResources ) then
5571: LD_EXP 15
5575: PPUSH
5576: CALL 18465 0 1
5580: IFFALSE 5634
// begin for j := 1 to mpStartingResources do
5582: LD_ADDR_VAR 0 3
5586: PUSH
5587: DOUBLE
5588: LD_INT 1
5590: DEC
5591: ST_TO_ADDR
5592: LD_EXP 15
5596: PUSH
5597: FOR_TO
5598: IFFALSE 5632
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
5600: LD_VAR 0 4
5604: PPUSH
5605: CALL_OW 274
5609: PPUSH
5610: LD_VAR 0 3
5614: PPUSH
5615: LD_EXP 15
5619: PUSH
5620: LD_VAR 0 3
5624: ARRAY
5625: PPUSH
5626: CALL_OW 277
5630: GO 5597
5632: POP
5633: POP
// end ; end else
5634: GO 5843
// if Count ( mpStartingResources ) then
5636: LD_EXP 15
5640: PPUSH
5641: CALL 18465 0 1
5645: IFFALSE 5843
// begin x := mpStartPos [ pos ] [ 1 ] ;
5647: LD_ADDR_VAR 0 5
5651: PUSH
5652: LD_EXP 21
5656: PUSH
5657: LD_VAR 0 8
5661: ARRAY
5662: PUSH
5663: LD_INT 1
5665: ARRAY
5666: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
5667: LD_ADDR_VAR 0 6
5671: PUSH
5672: LD_EXP 21
5676: PUSH
5677: LD_VAR 0 8
5681: ARRAY
5682: PUSH
5683: LD_INT 2
5685: ARRAY
5686: ST_TO_ADDR
// for j := 1 to mpStartingResources do
5687: LD_ADDR_VAR 0 3
5691: PUSH
5692: DOUBLE
5693: LD_INT 1
5695: DEC
5696: ST_TO_ADDR
5697: LD_EXP 15
5701: PUSH
5702: FOR_TO
5703: IFFALSE 5841
// begin resources := mpStartingResources [ j ] ;
5705: LD_ADDR_VAR 0 13
5709: PUSH
5710: LD_EXP 15
5714: PUSH
5715: LD_VAR 0 3
5719: ARRAY
5720: ST_TO_ADDR
// if resources = 0 then
5721: LD_VAR 0 13
5725: PUSH
5726: LD_INT 0
5728: EQUAL
5729: IFFALSE 5733
// continue ;
5731: GO 5702
// repeat if resources >= 50 then
5733: LD_VAR 0 13
5737: PUSH
5738: LD_INT 50
5740: GREATEREQUAL
5741: IFFALSE 5787
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
5743: LD_VAR 0 3
5747: PPUSH
5748: LD_INT 5
5750: PPUSH
5751: LD_VAR 0 5
5755: PPUSH
5756: LD_VAR 0 6
5760: PPUSH
5761: LD_INT 6
5763: PPUSH
5764: LD_INT 0
5766: PPUSH
5767: CALL_OW 60
// resources := resources - 50 ;
5771: LD_ADDR_VAR 0 13
5775: PUSH
5776: LD_VAR 0 13
5780: PUSH
5781: LD_INT 50
5783: MINUS
5784: ST_TO_ADDR
// end else
5785: GO 5829
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: LD_VAR 0 13
5796: PUSH
5797: LD_INT 10
5799: DIV
5800: PPUSH
5801: LD_VAR 0 5
5805: PPUSH
5806: LD_VAR 0 6
5810: PPUSH
5811: LD_INT 6
5813: PPUSH
5814: LD_INT 0
5816: PPUSH
5817: CALL_OW 60
// resources := 0 ;
5821: LD_ADDR_VAR 0 13
5825: PUSH
5826: LD_INT 0
5828: ST_TO_ADDR
// end ; until resources <= 0 ;
5829: LD_VAR 0 13
5833: PUSH
5834: LD_INT 0
5836: LESSEQUAL
5837: IFFALSE 5733
// end ;
5839: GO 5702
5841: POP
5842: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
5843: LD_EXP 17
5847: PPUSH
5848: CALL 18465 0 1
5852: IFFALSE 5872
5854: PUSH
5855: LD_EXP 3
5859: PUSH
5860: LD_INT 2
5862: PUSH
5863: LD_INT 8
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: IN
5870: NOT
5871: AND
5872: IFFALSE 5950
// begin for j in mpBuildings [ pos ] do
5874: LD_ADDR_VAR 0 3
5878: PUSH
5879: LD_EXP 17
5883: PUSH
5884: LD_VAR 0 8
5888: ARRAY
5889: PUSH
5890: FOR_IN
5891: IFFALSE 5948
// begin bc_level := 0 ;
5893: LD_ADDR_OWVAR 43
5897: PUSH
5898: LD_INT 0
5900: ST_TO_ADDR
// bc_type := j [ 1 ] ;
5901: LD_ADDR_OWVAR 42
5905: PUSH
5906: LD_VAR 0 3
5910: PUSH
5911: LD_INT 1
5913: ARRAY
5914: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
5915: LD_VAR 0 3
5919: PUSH
5920: LD_INT 2
5922: ARRAY
5923: PPUSH
5924: LD_VAR 0 3
5928: PUSH
5929: LD_INT 3
5931: ARRAY
5932: PPUSH
5933: LD_VAR 0 3
5937: PUSH
5938: LD_INT 4
5940: ARRAY
5941: PPUSH
5942: CALL_OW 47
// end ;
5946: GO 5890
5948: POP
5949: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
5950: LD_EXP 26
5954: IFFALSE 5974
5956: PUSH
5957: LD_INT 20
5959: PPUSH
5960: LD_VAR 0 7
5964: PPUSH
5965: CALL_OW 321
5969: PUSH
5970: LD_INT 1
5972: EQUAL
5973: AND
5974: IFFALSE 5991
// SetTech ( tech_SibDet , side , state_researched ) ;
5976: LD_INT 20
5978: PPUSH
5979: LD_VAR 0 7
5983: PPUSH
5984: LD_INT 2
5986: PPUSH
5987: CALL_OW 322
// if not mpArtifacts then
5991: LD_EXP 45
5995: NOT
5996: IFFALSE 6013
// SetTech ( tech_artifact , side , state_disabled ) ;
5998: LD_INT 24
6000: PPUSH
6001: LD_VAR 0 7
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL_OW 322
// if mpSibBomb = 1 then
6013: LD_EXP 28
6017: PUSH
6018: LD_INT 1
6020: EQUAL
6021: IFFALSE 6040
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
6023: LD_INT 25
6025: PPUSH
6026: LD_VAR 0 7
6030: PPUSH
6031: LD_INT 1
6033: PPUSH
6034: CALL_OW 322
// end else
6038: GO 6055
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
6040: LD_INT 25
6042: PPUSH
6043: LD_VAR 0 7
6047: PPUSH
6048: LD_INT 0
6050: PPUSH
6051: CALL_OW 322
// end ; if mpVehicles then
6055: LD_EXP 36
6059: IFFALSE 6158
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
6061: LD_ADDR_VAR 0 3
6065: PUSH
6066: LD_VAR 0 7
6070: PPUSH
6071: LD_VAR 0 9
6075: PPUSH
6076: LD_EXP 36
6080: PPUSH
6081: CALL 7417 0 3
6085: PUSH
6086: FOR_IN
6087: IFFALSE 6156
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
6089: LD_VAR 0 3
6093: PPUSH
6094: LD_INT 0
6096: PPUSH
6097: LD_INT 5
6099: PPUSH
6100: CALL_OW 12
6104: PPUSH
6105: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
6109: LD_VAR 0 3
6113: PPUSH
6114: LD_EXP 21
6118: PUSH
6119: LD_VAR 0 8
6123: ARRAY
6124: PUSH
6125: LD_INT 1
6127: ARRAY
6128: PPUSH
6129: LD_EXP 21
6133: PUSH
6134: LD_VAR 0 8
6138: ARRAY
6139: PUSH
6140: LD_INT 2
6142: ARRAY
6143: PPUSH
6144: LD_INT 12
6146: PPUSH
6147: LD_INT 0
6149: PPUSH
6150: CALL_OW 50
// end ;
6154: GO 6086
6156: POP
6157: POP
// end ; uc_nation := nation ;
6158: LD_ADDR_OWVAR 21
6162: PUSH
6163: LD_VAR 0 9
6167: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
6168: LD_EXP 3
6172: PUSH
6173: LD_INT 6
6175: PUSH
6176: LD_INT 7
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: IN
6183: IFFALSE 6208
6185: PUSH
6186: LD_EXP 7
6190: PUSH
6191: LD_VAR 0 2
6195: ARRAY
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: LD_INT 2
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: IN
6207: AND
6208: IFFALSE 6256
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
6210: LD_ADDR_VAR 0 11
6214: PUSH
6215: LD_VAR 0 7
6219: PPUSH
6220: LD_VAR 0 9
6224: PPUSH
6225: LD_EXP 24
6229: PUSH
6230: LD_EXP 24
6234: PUSH
6235: LD_INT 2
6237: DIV
6238: PLUS
6239: PPUSH
6240: LD_EXP 25
6244: PUSH
6245: LD_INT 1
6247: PLUS
6248: PPUSH
6249: CALL 6872 0 4
6253: ST_TO_ADDR
6254: GO 6286
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
6256: LD_ADDR_VAR 0 11
6260: PUSH
6261: LD_VAR 0 7
6265: PPUSH
6266: LD_VAR 0 9
6270: PPUSH
6271: LD_EXP 24
6275: PPUSH
6276: LD_EXP 25
6280: PPUSH
6281: CALL 6872 0 4
6285: ST_TO_ADDR
// for j in team do
6286: LD_ADDR_VAR 0 3
6290: PUSH
6291: LD_VAR 0 11
6295: PUSH
6296: FOR_IN
6297: IFFALSE 6346
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
6299: LD_VAR 0 3
6303: PPUSH
6304: LD_EXP 21
6308: PUSH
6309: LD_VAR 0 8
6313: ARRAY
6314: PUSH
6315: LD_INT 1
6317: ARRAY
6318: PPUSH
6319: LD_EXP 21
6323: PUSH
6324: LD_VAR 0 8
6328: ARRAY
6329: PUSH
6330: LD_INT 2
6332: ARRAY
6333: PPUSH
6334: LD_INT 12
6336: PPUSH
6337: LD_INT 0
6339: PPUSH
6340: CALL_OW 50
6344: GO 6296
6346: POP
6347: POP
// if mpApemans then
6348: LD_EXP 30
6352: IFFALSE 6458
// begin for j := 1 to mpApemans do
6354: LD_ADDR_VAR 0 3
6358: PUSH
6359: DOUBLE
6360: LD_INT 1
6362: DEC
6363: ST_TO_ADDR
6364: LD_EXP 30
6368: PUSH
6369: FOR_TO
6370: IFFALSE 6456
// begin PrepareApeman ( - 5 ) ;
6372: LD_INT 5
6374: NEG
6375: PPUSH
6376: CALL 50568 0 1
// ape := CreateHuman ;
6380: LD_ADDR_VAR 0 10
6384: PUSH
6385: CALL_OW 44
6389: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
6390: LD_ADDR_EXP 32
6394: PUSH
6395: LD_EXP 32
6399: PPUSH
6400: LD_VAR 0 8
6404: PPUSH
6405: LD_EXP 32
6409: PUSH
6410: LD_VAR 0 8
6414: ARRAY
6415: PPUSH
6416: LD_VAR 0 10
6420: PPUSH
6421: CALL 54441 0 2
6425: PPUSH
6426: CALL_OW 1
6430: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
6431: LD_VAR 0 10
6435: PPUSH
6436: LD_EXP 31
6440: PUSH
6441: LD_VAR 0 8
6445: ARRAY
6446: PPUSH
6447: LD_INT 0
6449: PPUSH
6450: CALL_OW 49
// end ;
6454: GO 6369
6456: POP
6457: POP
// end ; end ;
6458: GO 5000
6460: POP
6461: POP
// if not mpTeamGame then
6462: LD_EXP 11
6466: NOT
6467: IFFALSE 6565
// begin for i := 1 to 8 do
6469: LD_ADDR_VAR 0 2
6473: PUSH
6474: DOUBLE
6475: LD_INT 1
6477: DEC
6478: ST_TO_ADDR
6479: LD_INT 8
6481: PUSH
6482: FOR_TO
6483: IFFALSE 6561
// for j := 1 to 8 do
6485: LD_ADDR_VAR 0 3
6489: PUSH
6490: DOUBLE
6491: LD_INT 1
6493: DEC
6494: ST_TO_ADDR
6495: LD_INT 8
6497: PUSH
6498: FOR_TO
6499: IFFALSE 6557
// if i <> j then
6501: LD_VAR 0 2
6505: PUSH
6506: LD_VAR 0 3
6510: NONEQUAL
6511: IFFALSE 6535
// SetAttitude ( i , j , att_neutral , true ) else
6513: LD_VAR 0 2
6517: PPUSH
6518: LD_VAR 0 3
6522: PPUSH
6523: LD_INT 0
6525: PPUSH
6526: LD_INT 1
6528: PPUSH
6529: CALL_OW 80
6533: GO 6555
// SetAttitude ( i , j , att_friend , true ) ;
6535: LD_VAR 0 2
6539: PPUSH
6540: LD_VAR 0 3
6544: PPUSH
6545: LD_INT 1
6547: PPUSH
6548: LD_INT 1
6550: PPUSH
6551: CALL_OW 80
6555: GO 6498
6557: POP
6558: POP
6559: GO 6482
6561: POP
6562: POP
// end else
6563: GO 6740
// begin if mpSharedVision then
6565: LD_EXP 16
6569: IFFALSE 6634
// begin for i in mpTeams do
6571: LD_ADDR_VAR 0 2
6575: PUSH
6576: LD_EXP 10
6580: PUSH
6581: FOR_IN
6582: IFFALSE 6632
// for j := 2 to i do
6584: LD_ADDR_VAR 0 3
6588: PUSH
6589: DOUBLE
6590: LD_INT 2
6592: DEC
6593: ST_TO_ADDR
6594: LD_VAR 0 2
6598: PUSH
6599: FOR_TO
6600: IFFALSE 6628
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
6602: LD_VAR 0 2
6606: PUSH
6607: LD_VAR 0 3
6611: ARRAY
6612: PPUSH
6613: LD_VAR 0 2
6617: PUSH
6618: LD_INT 1
6620: ARRAY
6621: PPUSH
6622: CALL_OW 343
6626: GO 6599
6628: POP
6629: POP
6630: GO 6581
6632: POP
6633: POP
// end ; for i := 1 to 8 do
6634: LD_ADDR_VAR 0 2
6638: PUSH
6639: DOUBLE
6640: LD_INT 1
6642: DEC
6643: ST_TO_ADDR
6644: LD_INT 8
6646: PUSH
6647: FOR_TO
6648: IFFALSE 6738
// for j := 1 to 8 do
6650: LD_ADDR_VAR 0 3
6654: PUSH
6655: DOUBLE
6656: LD_INT 1
6658: DEC
6659: ST_TO_ADDR
6660: LD_INT 8
6662: PUSH
6663: FOR_TO
6664: IFFALSE 6734
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
6666: LD_EXP 8
6670: PUSH
6671: LD_VAR 0 2
6675: ARRAY
6676: PUSH
6677: LD_EXP 8
6681: PUSH
6682: LD_VAR 0 3
6686: ARRAY
6687: EQUAL
6688: IFFALSE 6712
// SetAttitude ( i , j , att_friend , true ) else
6690: LD_VAR 0 2
6694: PPUSH
6695: LD_VAR 0 3
6699: PPUSH
6700: LD_INT 1
6702: PPUSH
6703: LD_INT 1
6705: PPUSH
6706: CALL_OW 80
6710: GO 6732
// SetAttitude ( i , j , att_enemy , true ) ;
6712: LD_VAR 0 2
6716: PPUSH
6717: LD_VAR 0 3
6721: PPUSH
6722: LD_INT 2
6724: PPUSH
6725: LD_INT 1
6727: PPUSH
6728: CALL_OW 80
6732: GO 6663
6734: POP
6735: POP
6736: GO 6647
6738: POP
6739: POP
// end ; music_nat := mpSideNations [ your_side ] ;
6740: LD_ADDR_OWVAR 71
6744: PUSH
6745: LD_EXP 9
6749: PUSH
6750: LD_OWVAR 2
6754: ARRAY
6755: ST_TO_ADDR
// if IAmSpec then
6756: CALL_OW 531
6760: IFFALSE 6801
// begin FogOff ( true ) ;
6762: LD_INT 1
6764: PPUSH
6765: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
6769: LD_EXP 29
6773: PUSH
6774: LD_INT 1
6776: ARRAY
6777: PUSH
6778: LD_INT 2
6780: DIV
6781: PPUSH
6782: LD_EXP 29
6786: PUSH
6787: LD_INT 2
6789: ARRAY
6790: PUSH
6791: LD_INT 2
6793: DIV
6794: PPUSH
6795: CALL_OW 86
// end else
6799: GO 6847
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
6801: LD_EXP 21
6805: PUSH
6806: LD_EXP 7
6810: PUSH
6811: LD_OWVAR 2
6815: ARRAY
6816: ARRAY
6817: PUSH
6818: LD_INT 1
6820: ARRAY
6821: PPUSH
6822: LD_EXP 21
6826: PUSH
6827: LD_EXP 7
6831: PUSH
6832: LD_OWVAR 2
6836: ARRAY
6837: ARRAY
6838: PUSH
6839: LD_INT 2
6841: ARRAY
6842: PPUSH
6843: CALL_OW 86
// end ; BeginBuildUp ;
6847: CALL 7950 0 0
// enable ( mpActive ) ;
6851: LD_INT 100
6853: ENABLE_MARKED
// enable ( mpGameType ) ;
6854: LD_EXP 3
6858: ENABLE_MARKED
// mpGameActive := true ;
6859: LD_ADDR_EXP 39
6863: PUSH
6864: LD_INT 1
6866: ST_TO_ADDR
// end ;
6867: LD_VAR 0 1
6871: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
6872: LD_INT 0
6874: PPUSH
6875: PPUSH
6876: PPUSH
6877: PPUSH
6878: PPUSH
// result := [ ] ;
6879: LD_ADDR_VAR 0 5
6883: PUSH
6884: EMPTY
6885: ST_TO_ADDR
// class := class_soldier ;
6886: LD_ADDR_VAR 0 8
6890: PUSH
6891: LD_INT 1
6893: ST_TO_ADDR
// uc_side := side ;
6894: LD_ADDR_OWVAR 20
6898: PUSH
6899: LD_VAR 0 1
6903: ST_TO_ADDR
// uc_nation := nation ;
6904: LD_ADDR_OWVAR 21
6908: PUSH
6909: LD_VAR 0 2
6913: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
6914: LD_ADDR_OWVAR 26
6918: PUSH
6919: LD_OWVAR 19
6923: PUSH
6924: LD_VAR 0 1
6928: ARRAY
6929: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
6930: LD_INT 1
6932: PPUSH
6933: LD_INT 2
6935: PPUSH
6936: CALL_OW 12
6940: PPUSH
6941: LD_VAR 0 8
6945: PPUSH
6946: LD_VAR 0 4
6950: PUSH
6951: LD_INT 2
6953: PLUS
6954: PPUSH
6955: CALL_OW 380
// hc_importance := 105 ;
6959: LD_ADDR_OWVAR 32
6963: PUSH
6964: LD_INT 105
6966: ST_TO_ADDR
// if Multiplayer then
6967: LD_OWVAR 4
6971: IFFALSE 7011
// begin hc_gallery := MULTIAVATARS ;
6973: LD_ADDR_OWVAR 33
6977: PUSH
6978: LD_STRING MULTIAVATARS
6980: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
6981: LD_ADDR_OWVAR 34
6985: PUSH
6986: LD_VAR 0 1
6990: PPUSH
6991: CALL_OW 525
6995: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
6996: LD_ADDR_OWVAR 27
7000: PUSH
7001: LD_VAR 0 1
7005: PPUSH
7006: CALL_OW 526
7010: ST_TO_ADDR
// end ; commander := CreateHuman ;
7011: LD_ADDR_VAR 0 9
7015: PUSH
7016: CALL_OW 44
7020: ST_TO_ADDR
// result := Join ( result , commander ) ;
7021: LD_ADDR_VAR 0 5
7025: PUSH
7026: LD_VAR 0 5
7030: PPUSH
7031: LD_VAR 0 9
7035: PPUSH
7036: CALL 54441 0 2
7040: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
7041: LD_ADDR_EXP 41
7045: PUSH
7046: LD_EXP 41
7050: PPUSH
7051: LD_VAR 0 1
7055: PPUSH
7056: LD_VAR 0 9
7060: PPUSH
7061: CALL_OW 1
7065: ST_TO_ADDR
// if mpTeamPreset then
7066: LD_LOC 1
7070: IFFALSE 7166
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
7072: LD_LOC 1
7076: PUSH
7077: LD_INT 1
7079: ARRAY
7080: PPUSH
7081: LD_VAR 0 5
7085: PUSH
7086: LD_VAR 0 5
7090: ARRAY
7091: PPUSH
7092: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
7096: LD_VAR 0 5
7100: PUSH
7101: LD_VAR 0 5
7105: ARRAY
7106: PPUSH
7107: LD_INT 1
7109: PPUSH
7110: LD_LOC 1
7114: PUSH
7115: LD_INT 1
7117: ARRAY
7118: PPUSH
7119: LD_INT 1
7121: PPUSH
7122: CALL_OW 260
7126: PPUSH
7127: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
7131: LD_VAR 0 5
7135: PUSH
7136: LD_VAR 0 5
7140: ARRAY
7141: PPUSH
7142: LD_INT 2
7144: PPUSH
7145: LD_LOC 1
7149: PUSH
7150: LD_INT 1
7152: ARRAY
7153: PPUSH
7154: LD_INT 2
7156: PPUSH
7157: CALL_OW 260
7161: PPUSH
7162: CALL_OW 239
// end ; InitHc_All ( ) ;
7166: CALL_OW 584
// class := 2 ;
7170: LD_ADDR_VAR 0 8
7174: PUSH
7175: LD_INT 2
7177: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
7178: LD_ADDR_VAR 0 6
7182: PUSH
7183: DOUBLE
7184: LD_INT 1
7186: DEC
7187: ST_TO_ADDR
7188: LD_VAR 0 3
7192: PUSH
7193: LD_INT 1
7195: MINUS
7196: PUSH
7197: FOR_TO
7198: IFFALSE 7393
// begin PrepareHuman ( false , class , skill ) ;
7200: LD_INT 0
7202: PPUSH
7203: LD_VAR 0 8
7207: PPUSH
7208: LD_VAR 0 4
7212: PPUSH
7213: CALL_OW 380
// un := CreateHuman ;
7217: LD_ADDR_VAR 0 7
7221: PUSH
7222: CALL_OW 44
7226: ST_TO_ADDR
// result := Join ( result , un ) ;
7227: LD_ADDR_VAR 0 5
7231: PUSH
7232: LD_VAR 0 5
7236: PPUSH
7237: LD_VAR 0 7
7241: PPUSH
7242: CALL 54441 0 2
7246: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
7247: LD_LOC 1
7251: PPUSH
7252: CALL 18465 0 1
7256: PUSH
7257: LD_VAR 0 3
7261: GREATEREQUAL
7262: IFFALSE 7358
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
7264: LD_LOC 1
7268: PUSH
7269: LD_VAR 0 6
7273: PUSH
7274: LD_INT 1
7276: PLUS
7277: ARRAY
7278: PPUSH
7279: LD_VAR 0 7
7283: PPUSH
7284: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
7288: LD_VAR 0 7
7292: PPUSH
7293: LD_INT 1
7295: PPUSH
7296: LD_LOC 1
7300: PUSH
7301: LD_VAR 0 6
7305: PUSH
7306: LD_INT 1
7308: PLUS
7309: ARRAY
7310: PPUSH
7311: LD_INT 1
7313: PPUSH
7314: CALL_OW 260
7318: PPUSH
7319: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
7323: LD_VAR 0 7
7327: PPUSH
7328: LD_INT 2
7330: PPUSH
7331: LD_LOC 1
7335: PUSH
7336: LD_VAR 0 6
7340: PUSH
7341: LD_INT 1
7343: PLUS
7344: ARRAY
7345: PPUSH
7346: LD_INT 2
7348: PPUSH
7349: CALL_OW 260
7353: PPUSH
7354: CALL_OW 239
// end ; class := Inc ( class ) ;
7358: LD_ADDR_VAR 0 8
7362: PUSH
7363: LD_VAR 0 8
7367: PPUSH
7368: CALL 55814 0 1
7372: ST_TO_ADDR
// if class = 5 then
7373: LD_VAR 0 8
7377: PUSH
7378: LD_INT 5
7380: EQUAL
7381: IFFALSE 7391
// class := 1 ;
7383: LD_ADDR_VAR 0 8
7387: PUSH
7388: LD_INT 1
7390: ST_TO_ADDR
// end ;
7391: GO 7197
7393: POP
7394: POP
// if not mpTeamPreset then
7395: LD_LOC 1
7399: NOT
7400: IFFALSE 7412
// mpTeamPreset := result ;
7402: LD_ADDR_LOC 1
7406: PUSH
7407: LD_VAR 0 5
7411: ST_TO_ADDR
// end ;
7412: LD_VAR 0 5
7416: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
7417: LD_INT 0
7419: PPUSH
7420: PPUSH
// result := [ ] ;
7421: LD_ADDR_VAR 0 4
7425: PUSH
7426: EMPTY
7427: ST_TO_ADDR
// if not vehicles then
7428: LD_VAR 0 3
7432: NOT
7433: IFFALSE 7437
// exit ;
7435: GO 7651
// for i := 1 to vehicles [ nation ] do
7437: LD_ADDR_VAR 0 5
7441: PUSH
7442: DOUBLE
7443: LD_INT 1
7445: DEC
7446: ST_TO_ADDR
7447: LD_VAR 0 3
7451: PUSH
7452: LD_VAR 0 2
7456: ARRAY
7457: PUSH
7458: FOR_TO
7459: IFFALSE 7649
// begin uc_side := side ;
7461: LD_ADDR_OWVAR 20
7465: PUSH
7466: LD_VAR 0 1
7470: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
7471: LD_VAR 0 3
7475: PUSH
7476: LD_VAR 0 2
7480: ARRAY
7481: PUSH
7482: LD_VAR 0 5
7486: ARRAY
7487: PPUSH
7488: CALL 18465 0 1
7492: PUSH
7493: LD_INT 4
7495: GREATER
7496: IFFALSE 7526
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
7498: LD_ADDR_OWVAR 21
7502: PUSH
7503: LD_VAR 0 3
7507: PUSH
7508: LD_VAR 0 2
7512: ARRAY
7513: PUSH
7514: LD_VAR 0 5
7518: ARRAY
7519: PUSH
7520: LD_INT 5
7522: ARRAY
7523: ST_TO_ADDR
7524: GO 7536
// uc_nation := nation ;
7526: LD_ADDR_OWVAR 21
7530: PUSH
7531: LD_VAR 0 2
7535: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
7536: LD_VAR 0 3
7540: PUSH
7541: LD_VAR 0 2
7545: ARRAY
7546: PUSH
7547: LD_VAR 0 5
7551: ARRAY
7552: PUSH
7553: LD_INT 1
7555: ARRAY
7556: PPUSH
7557: LD_VAR 0 3
7561: PUSH
7562: LD_VAR 0 2
7566: ARRAY
7567: PUSH
7568: LD_VAR 0 5
7572: ARRAY
7573: PUSH
7574: LD_INT 2
7576: ARRAY
7577: PPUSH
7578: LD_VAR 0 3
7582: PUSH
7583: LD_VAR 0 2
7587: ARRAY
7588: PUSH
7589: LD_VAR 0 5
7593: ARRAY
7594: PUSH
7595: LD_INT 3
7597: ARRAY
7598: PPUSH
7599: LD_VAR 0 3
7603: PUSH
7604: LD_VAR 0 2
7608: ARRAY
7609: PUSH
7610: LD_VAR 0 5
7614: ARRAY
7615: PUSH
7616: LD_INT 4
7618: ARRAY
7619: PPUSH
7620: LD_INT 80
7622: PPUSH
7623: CALL 21261 0 5
// result := Join ( result , CreateVehicle ) ;
7627: LD_ADDR_VAR 0 4
7631: PUSH
7632: LD_VAR 0 4
7636: PPUSH
7637: CALL_OW 45
7641: PPUSH
7642: CALL 54441 0 2
7646: ST_TO_ADDR
// end ;
7647: GO 7458
7649: POP
7650: POP
// end ;
7651: LD_VAR 0 4
7655: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
7656: LD_INT 0
7658: PPUSH
7659: PPUSH
// for i in mpBattleFlags do
7660: LD_ADDR_VAR 0 3
7664: PUSH
7665: LD_EXP 23
7669: PUSH
7670: FOR_IN
7671: IFFALSE 7748
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
7673: LD_VAR 0 3
7677: PPUSH
7678: LD_INT 1
7680: PUSH
7681: LD_VAR 0 1
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: LD_INT 2
7692: PUSH
7693: LD_VAR 0 1
7697: PUSH
7698: LD_REAL  7.00000000000000E-0001
7701: MUL
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: LD_INT 3
7709: PUSH
7710: LD_VAR 0 1
7714: PUSH
7715: LD_REAL  4.00000000000000E-0001
7718: MUL
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 20
7726: PUSH
7727: LD_VAR 0 1
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: PPUSH
7742: CALL_OW 423
7746: GO 7670
7748: POP
7749: POP
// end ;
7750: LD_VAR 0 2
7754: RET
// every 0 0$1 trigger mpActive do var i , strength ;
7755: LD_INT 100
7757: IFFALSE 7852
7759: GO 7761
7761: DISABLE
7762: LD_INT 0
7764: PPUSH
7765: PPUSH
// begin if mpBattleFlag <= 0 then
7766: LD_EXP 22
7770: PUSH
7771: LD_INT 0
7773: LESSEQUAL
7774: IFFALSE 7778
// exit ;
7776: GO 7852
// strength := 100 ;
7778: LD_ADDR_VAR 0 2
7782: PUSH
7783: LD_INT 100
7785: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
7786: LD_EXP 22
7790: PPUSH
7791: CALL_OW 67
// strength := Dec ( strength ) ;
7795: LD_ADDR_VAR 0 2
7799: PUSH
7800: LD_VAR 0 2
7804: PPUSH
7805: CALL 55836 0 1
7809: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
7810: LD_VAR 0 2
7814: PPUSH
7815: CALL 7656 0 1
// until not strength ;
7819: LD_VAR 0 2
7823: NOT
7824: IFFALSE 7786
// for i in mpBattleFlags do
7826: LD_ADDR_VAR 0 1
7830: PUSH
7831: LD_EXP 23
7835: PUSH
7836: FOR_IN
7837: IFFALSE 7850
// KillBattleFlag ( i ) ;
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 419
7848: GO 7836
7850: POP
7851: POP
// end ;
7852: PPOPN 2
7854: END
// every 0 0$1 marked mpActive do var side , tmp ;
7855: GO 7857
7857: DISABLE
7858: LD_INT 0
7860: PPUSH
7861: PPUSH
// begin if mpSibBomb <= 1 then
7862: LD_EXP 28
7866: PUSH
7867: LD_INT 1
7869: LESSEQUAL
7870: IFFALSE 7874
// exit ;
7872: GO 7947
// tmp := mpSibBomb ;
7874: LD_ADDR_VAR 0 2
7878: PUSH
7879: LD_EXP 28
7883: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7884: LD_INT 35
7886: PPUSH
7887: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7891: LD_ADDR_VAR 0 2
7895: PUSH
7896: LD_VAR 0 2
7900: PUSH
7901: LD_INT 35
7903: MINUS
7904: ST_TO_ADDR
// until not tmp ;
7905: LD_VAR 0 2
7909: NOT
7910: IFFALSE 7884
// for side := 1 to 8 do
7912: LD_ADDR_VAR 0 1
7916: PUSH
7917: DOUBLE
7918: LD_INT 1
7920: DEC
7921: ST_TO_ADDR
7922: LD_INT 8
7924: PUSH
7925: FOR_TO
7926: IFFALSE 7945
// SetTech ( tech_SibFiss , side , state_enabled ) ;
7928: LD_INT 25
7930: PPUSH
7931: LD_VAR 0 1
7935: PPUSH
7936: LD_INT 1
7938: PPUSH
7939: CALL_OW 322
7943: GO 7925
7945: POP
7946: POP
// end ;
7947: PPOPN 2
7949: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
7950: LD_INT 0
7952: PPUSH
7953: PPUSH
7954: PPUSH
// mpBuildUpTimeDelay := 0 ;
7955: LD_ADDR_EXP 48
7959: PUSH
7960: LD_INT 0
7962: ST_TO_ADDR
// if not mpBuildUpTime then
7963: LD_EXP 20
7967: NOT
7968: IFFALSE 7972
// exit ;
7970: GO 8161
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
7972: LD_ADDR_EXP 48
7976: PUSH
7977: LD_INT 8400
7979: PUSH
7980: LD_INT 2100
7982: PUSH
7983: LD_EXP 20
7987: MUL
7988: PLUS
7989: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
7990: LD_ADDR_EXP 49
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// for i := 1 to 8 do
7998: LD_ADDR_VAR 0 2
8002: PUSH
8003: DOUBLE
8004: LD_INT 1
8006: DEC
8007: ST_TO_ADDR
8008: LD_INT 8
8010: PUSH
8011: FOR_TO
8012: IFFALSE 8159
// if mpSidePositions [ i ] then
8014: LD_EXP 7
8018: PUSH
8019: LD_VAR 0 2
8023: ARRAY
8024: IFFALSE 8157
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
8026: LD_EXP 19
8030: PUSH
8031: LD_EXP 7
8035: PUSH
8036: LD_VAR 0 2
8040: ARRAY
8041: ARRAY
8042: PPUSH
8043: LD_INT 5
8045: PPUSH
8046: CALL_OW 424
// for j := 1 to 8 do
8050: LD_ADDR_VAR 0 3
8054: PUSH
8055: DOUBLE
8056: LD_INT 1
8058: DEC
8059: ST_TO_ADDR
8060: LD_INT 8
8062: PUSH
8063: FOR_TO
8064: IFFALSE 8155
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
8066: LD_EXP 7
8070: PUSH
8071: LD_VAR 0 3
8075: ARRAY
8076: IFFALSE 8125
8078: PUSH
8079: LD_EXP 8
8083: PUSH
8084: LD_VAR 0 2
8088: ARRAY
8089: PUSH
8090: LD_EXP 8
8094: PUSH
8095: LD_VAR 0 3
8099: ARRAY
8100: NONEQUAL
8101: IFTRUE 8124
8103: PUSH
8104: LD_EXP 11
8108: NOT
8109: IFFALSE 8123
8111: PUSH
8112: LD_VAR 0 2
8116: PUSH
8117: LD_VAR 0 3
8121: NONEQUAL
8122: AND
8123: OR
8124: AND
8125: IFFALSE 8153
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
8127: LD_VAR 0 3
8131: PPUSH
8132: LD_EXP 19
8136: PUSH
8137: LD_EXP 7
8141: PUSH
8142: LD_VAR 0 2
8146: ARRAY
8147: ARRAY
8148: PPUSH
8149: CALL_OW 333
8153: GO 8063
8155: POP
8156: POP
// end ;
8157: GO 8011
8159: POP
8160: POP
// end ;
8161: LD_VAR 0 1
8165: RET
// function EndBuildUp ; var i , j ; begin
8166: LD_INT 0
8168: PPUSH
8169: PPUSH
8170: PPUSH
// mpBuildUpTimeActive := false ;
8171: LD_ADDR_EXP 49
8175: PUSH
8176: LD_INT 0
8178: ST_TO_ADDR
// for i := 1 to 8 do
8179: LD_ADDR_VAR 0 2
8183: PUSH
8184: DOUBLE
8185: LD_INT 1
8187: DEC
8188: ST_TO_ADDR
8189: LD_INT 8
8191: PUSH
8192: FOR_TO
8193: IFFALSE 8340
// if mpSidePositions [ i ] then
8195: LD_EXP 7
8199: PUSH
8200: LD_VAR 0 2
8204: ARRAY
8205: IFFALSE 8338
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
8207: LD_EXP 19
8211: PUSH
8212: LD_EXP 7
8216: PUSH
8217: LD_VAR 0 2
8221: ARRAY
8222: ARRAY
8223: PPUSH
8224: LD_INT 0
8226: PPUSH
8227: CALL_OW 424
// for j := 1 to 8 do
8231: LD_ADDR_VAR 0 3
8235: PUSH
8236: DOUBLE
8237: LD_INT 1
8239: DEC
8240: ST_TO_ADDR
8241: LD_INT 8
8243: PUSH
8244: FOR_TO
8245: IFFALSE 8336
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
8247: LD_EXP 7
8251: PUSH
8252: LD_VAR 0 3
8256: ARRAY
8257: IFFALSE 8306
8259: PUSH
8260: LD_EXP 8
8264: PUSH
8265: LD_VAR 0 2
8269: ARRAY
8270: PUSH
8271: LD_EXP 8
8275: PUSH
8276: LD_VAR 0 3
8280: ARRAY
8281: NONEQUAL
8282: IFTRUE 8305
8284: PUSH
8285: LD_EXP 11
8289: NOT
8290: IFFALSE 8304
8292: PUSH
8293: LD_VAR 0 2
8297: PUSH
8298: LD_VAR 0 3
8302: NONEQUAL
8303: AND
8304: OR
8305: AND
8306: IFFALSE 8334
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
8308: LD_VAR 0 3
8312: PPUSH
8313: LD_EXP 19
8317: PUSH
8318: LD_EXP 7
8322: PUSH
8323: LD_VAR 0 2
8327: ARRAY
8328: ARRAY
8329: PPUSH
8330: CALL_OW 334
8334: GO 8244
8336: POP
8337: POP
// end ;
8338: GO 8192
8340: POP
8341: POP
// end ;
8342: LD_VAR 0 1
8346: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
8347: LD_EXP 49
8351: IFFALSE 8530
8353: GO 8355
8355: DISABLE
8356: LD_INT 0
8358: PPUSH
8359: PPUSH
// begin for i := 1 to 8 do
8360: LD_ADDR_VAR 0 1
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_INT 8
8372: PUSH
8373: FOR_TO
8374: IFFALSE 8527
// if mpSidePositions [ i ] then
8376: LD_EXP 7
8380: PUSH
8381: LD_VAR 0 1
8385: ARRAY
8386: IFFALSE 8525
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
8388: LD_ADDR_VAR 0 2
8392: PUSH
8393: LD_EXP 19
8397: PUSH
8398: LD_EXP 7
8402: PUSH
8403: LD_VAR 0 1
8407: ARRAY
8408: ARRAY
8409: PPUSH
8410: LD_INT 2
8412: PUSH
8413: LD_INT 21
8415: PUSH
8416: LD_INT 1
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PUSH
8423: LD_INT 21
8425: PUSH
8426: LD_INT 2
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: PUSH
8438: LD_INT 22
8440: PUSH
8441: LD_OWVAR 2
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PPUSH
8454: CALL_OW 70
8458: PUSH
8459: FOR_IN
8460: IFFALSE 8523
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
8462: LD_EXP 8
8466: PUSH
8467: LD_VAR 0 1
8471: ARRAY
8472: PUSH
8473: LD_EXP 8
8477: PUSH
8478: LD_OWVAR 2
8482: ARRAY
8483: NONEQUAL
8484: IFTRUE 8507
8486: PUSH
8487: LD_EXP 11
8491: NOT
8492: IFFALSE 8506
8494: PUSH
8495: LD_VAR 0 1
8499: PUSH
8500: LD_OWVAR 2
8504: NONEQUAL
8505: AND
8506: OR
8507: IFFALSE 8521
// ComMoveToArea ( un , BuildUpEscape ) ;
8509: LD_VAR 0 2
8513: PPUSH
8514: LD_INT 4
8516: PPUSH
8517: CALL_OW 113
8521: GO 8459
8523: POP
8524: POP
8525: GO 8373
8527: POP
8528: POP
// enable ;
8529: ENABLE
// end ;
8530: PPOPN 2
8532: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
8533: LD_EXP 20
8537: IFFALSE 8587
8539: GO 8541
8541: DISABLE
8542: LD_INT 0
8544: PPUSH
// begin tmp := mpBuildUpTime ;
8545: LD_ADDR_VAR 0 1
8549: PUSH
8550: LD_EXP 20
8554: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8555: LD_INT 35
8557: PPUSH
8558: CALL_OW 67
// tmp := tmp - 0 0$1 ;
8562: LD_ADDR_VAR 0 1
8566: PUSH
8567: LD_VAR 0 1
8571: PUSH
8572: LD_INT 35
8574: MINUS
8575: ST_TO_ADDR
// until not tmp ;
8576: LD_VAR 0 1
8580: NOT
8581: IFFALSE 8555
// EndBuildUp ;
8583: CALL 8166 0 0
// end ;
8587: PPOPN 1
8589: END
// every 0 0$1 trigger mpActive marked mpWin do
8590: LD_INT 100
8592: IFFALSE 8626
8594: GO 8596
8596: DISABLE
// begin if IAmServer then
8597: CALL_OW 518
8601: IFFALSE 8610
// wait ( 0 0$3 ) ;
8603: LD_INT 105
8605: PPUSH
8606: CALL_OW 67
// if Multiplayer then
8610: LD_OWVAR 4
8614: IFFALSE 8622
// YouWinInMultiplayer else
8616: CALL_OW 106
8620: GO 8626
// YouWin ;
8622: CALL_OW 103
// end ;
8626: END
// export function HasPowerByGameType ( gameType , side ) ; begin
8627: LD_INT 0
8629: PPUSH
// result := false ;
8630: LD_ADDR_VAR 0 3
8634: PUSH
8635: LD_INT 0
8637: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
8638: LD_VAR 0 1
8642: PUSH
8643: LD_INT 1
8645: DOUBLE
8646: EQUAL
8647: IFTRUE 8669
8649: LD_INT 5
8651: DOUBLE
8652: EQUAL
8653: IFTRUE 8669
8655: LD_INT 6
8657: DOUBLE
8658: EQUAL
8659: IFTRUE 8669
8661: LD_INT 7
8663: DOUBLE
8664: EQUAL
8665: IFTRUE 8669
8667: GO 8742
8669: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
8670: LD_ADDR_VAR 0 3
8674: PUSH
8675: LD_INT 22
8677: PUSH
8678: LD_VAR 0 2
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 2
8689: PUSH
8690: LD_INT 21
8692: PUSH
8693: LD_INT 1
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: LD_INT 33
8702: PUSH
8703: LD_INT 3
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PUSH
8710: LD_INT 33
8712: PUSH
8713: LD_INT 5
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PPUSH
8730: CALL_OW 69
8734: PPUSH
8735: CALL 18465 0 1
8739: ST_TO_ADDR
// end ; GameTypeSurvival :
8740: GO 9138
8742: LD_INT 2
8744: DOUBLE
8745: EQUAL
8746: IFTRUE 8750
8748: GO 8880
8750: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
8751: LD_ADDR_VAR 0 3
8755: PUSH
8756: LD_INT 22
8758: PUSH
8759: LD_VAR 0 2
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PUSH
8768: LD_INT 2
8770: PUSH
8771: LD_INT 30
8773: PUSH
8774: LD_INT 0
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 30
8783: PUSH
8784: LD_INT 1
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PPUSH
8800: CALL_OW 69
8804: PPUSH
8805: CALL 18465 0 1
8809: IFFALSE 8877
8811: PUSH
8812: LD_INT 22
8814: PUSH
8815: LD_VAR 0 2
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 2
8826: PUSH
8827: LD_INT 21
8829: PUSH
8830: LD_INT 1
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: PUSH
8837: LD_INT 33
8839: PUSH
8840: LD_INT 3
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PUSH
8847: LD_INT 33
8849: PUSH
8850: LD_INT 5
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PPUSH
8867: CALL_OW 69
8871: PPUSH
8872: CALL 18465 0 1
8876: AND
8877: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
8878: GO 9138
8880: LD_INT 8
8882: DOUBLE
8883: EQUAL
8884: IFTRUE 8888
8886: GO 9037
8888: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
8889: LD_ADDR_VAR 0 3
8893: PUSH
8894: LD_EXP 41
8898: PUSH
8899: LD_VAR 0 2
8903: ARRAY
8904: PPUSH
8905: CALL_OW 300
8909: IFFALSE 8966
8911: PUSH
8912: LD_INT 22
8914: PUSH
8915: LD_VAR 0 2
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PUSH
8924: LD_INT 2
8926: PUSH
8927: LD_INT 30
8929: PUSH
8930: LD_INT 0
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 30
8939: PUSH
8940: LD_INT 1
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: LIST
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PPUSH
8956: CALL_OW 69
8960: PPUSH
8961: CALL 18465 0 1
8965: AND
8966: IFFALSE 9034
8968: PUSH
8969: LD_INT 22
8971: PUSH
8972: LD_VAR 0 2
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: LD_INT 2
8983: PUSH
8984: LD_INT 21
8986: PUSH
8987: LD_INT 1
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 33
8996: PUSH
8997: LD_INT 3
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PUSH
9004: LD_INT 33
9006: PUSH
9007: LD_INT 5
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: PPUSH
9024: CALL_OW 69
9028: PPUSH
9029: CALL 18465 0 1
9033: AND
9034: ST_TO_ADDR
// end ; GameTypeKing :
9035: GO 9138
9037: LD_INT 3
9039: DOUBLE
9040: EQUAL
9041: IFTRUE 9045
9043: GO 9137
9045: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
9046: LD_ADDR_VAR 0 3
9050: PUSH
9051: LD_INT 22
9053: PUSH
9054: LD_VAR 0 2
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PUSH
9063: LD_INT 2
9065: PUSH
9066: LD_INT 21
9068: PUSH
9069: LD_INT 1
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PUSH
9076: LD_INT 33
9078: PUSH
9079: LD_INT 3
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 33
9088: PUSH
9089: LD_INT 5
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PPUSH
9106: CALL_OW 69
9110: PPUSH
9111: CALL 18465 0 1
9115: IFFALSE 9134
9117: PUSH
9118: LD_VAR 0 2
9122: PPUSH
9123: CALL 15581 0 1
9127: PUSH
9128: LD_EXP 35
9132: LESS
9133: AND
9134: ST_TO_ADDR
// end ; end ;
9135: GO 9138
9137: POP
// end ;
9138: LD_VAR 0 3
9142: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
9143: LD_INT 100
9145: IFFALSE 9375
9147: GO 9149
9149: DISABLE
9150: LD_INT 0
9152: PPUSH
9153: PPUSH
// begin if Multiplayer then
9154: LD_OWVAR 4
9158: IFFALSE 9166
// SetPlayerSpectator ( ) else
9160: CALL_OW 572
9164: GO 9175
// FogOff ( your_side ) ;
9166: LD_OWVAR 2
9170: PPUSH
9171: CALL_OW 344
// repeat gameIsOn := false ;
9175: LD_ADDR_VAR 0 1
9179: PUSH
9180: LD_INT 0
9182: ST_TO_ADDR
// for i := 1 to 8 do
9183: LD_ADDR_VAR 0 2
9187: PUSH
9188: DOUBLE
9189: LD_INT 1
9191: DEC
9192: ST_TO_ADDR
9193: LD_INT 8
9195: PUSH
9196: FOR_TO
9197: IFFALSE 9327
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9199: LD_EXP 7
9203: PUSH
9204: LD_VAR 0 2
9208: ARRAY
9209: IFFALSE 9222
9211: PUSH
9212: LD_VAR 0 2
9216: PPUSH
9217: CALL_OW 108
9221: AND
9222: IFFALSE 9236
9224: PUSH
9225: LD_VAR 0 2
9229: PUSH
9230: LD_OWVAR 2
9234: NONEQUAL
9235: AND
9236: IFFALSE 9325
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9238: LD_EXP 8
9242: PUSH
9243: LD_VAR 0 2
9247: ARRAY
9248: NOT
9249: IFTRUE 9297
9251: PUSH
9252: LD_EXP 8
9256: PUSH
9257: LD_VAR 0 2
9261: ARRAY
9262: PUSH
9263: LD_EXP 8
9267: PUSH
9268: LD_OWVAR 2
9272: ARRAY
9273: NONEQUAL
9274: IFFALSE 9296
9276: PUSH
9277: LD_OWVAR 2
9281: PPUSH
9282: LD_VAR 0 2
9286: PPUSH
9287: CALL_OW 81
9291: PUSH
9292: LD_INT 1
9294: NONEQUAL
9295: AND
9296: OR
9297: IFFALSE 9325
// if HasPowerByGameType ( mpGameType , i ) then
9299: LD_EXP 3
9303: PPUSH
9304: LD_VAR 0 2
9308: PPUSH
9309: CALL 8627 0 2
9313: IFFALSE 9325
// begin gameIsOn := true ;
9315: LD_ADDR_VAR 0 1
9319: PUSH
9320: LD_INT 1
9322: ST_TO_ADDR
// break ;
9323: GO 9327
// end ;
9325: GO 9196
9327: POP
9328: POP
// wait ( 100 ) ;
9329: LD_INT 100
9331: PPUSH
9332: CALL_OW 67
// until not gameIsOn ;
9336: LD_VAR 0 1
9340: NOT
9341: IFFALSE 9175
// if IAmServer then
9343: CALL_OW 518
9347: IFFALSE 9356
// wait ( 0 0$3 ) ;
9349: LD_INT 105
9351: PPUSH
9352: CALL_OW 67
// if Multiplayer then
9356: LD_OWVAR 4
9360: IFFALSE 9368
// YouLostInMultiplayer else
9362: CALL_OW 107
9366: GO 9375
// YouLost (  ) ;
9368: LD_STRING 
9370: PPUSH
9371: CALL_OW 104
// end ;
9375: PPOPN 2
9377: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
9378: LD_EXP 33
9382: IFFALSE 9766
9384: GO 9386
9386: DISABLE
9387: LD_INT 0
9389: PPUSH
9390: PPUSH
9391: PPUSH
9392: PPUSH
9393: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
9394: LD_ADDR_VAR 0 5
9398: PUSH
9399: LD_INT 1
9401: PUSH
9402: LD_INT 2
9404: PUSH
9405: LD_INT 3
9407: PUSH
9408: LD_INT 4
9410: PUSH
9411: LD_INT 5
9413: PUSH
9414: LD_INT 6
9416: PUSH
9417: LD_INT 7
9419: PUSH
9420: LD_INT 8
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
9433: LD_INT 350
9435: PPUSH
9436: CALL_OW 67
// for i := 1 to 8 do
9440: LD_ADDR_VAR 0 1
9444: PUSH
9445: DOUBLE
9446: LD_INT 1
9448: DEC
9449: ST_TO_ADDR
9450: LD_INT 8
9452: PUSH
9453: FOR_TO
9454: IFFALSE 9736
// begin j := sides [ i ] ;
9456: LD_ADDR_VAR 0 2
9460: PUSH
9461: LD_VAR 0 5
9465: PUSH
9466: LD_VAR 0 1
9470: ARRAY
9471: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
9472: LD_EXP 40
9476: PUSH
9477: LD_VAR 0 2
9481: ARRAY
9482: PPUSH
9483: CALL 18465 0 1
9487: IFFALSE 9500
9489: PUSH
9490: LD_VAR 0 2
9494: PPUSH
9495: CALL_OW 108
9499: AND
9500: IFFALSE 9518
9502: PUSH
9503: LD_EXP 3
9507: PPUSH
9508: LD_VAR 0 2
9512: PPUSH
9513: CALL 8627 0 2
9517: AND
9518: IFFALSE 9734
// begin wait ( mpRespawn div 2 ) ;
9520: LD_EXP 33
9524: PUSH
9525: LD_INT 2
9527: DIV
9528: PPUSH
9529: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9533: LD_ADDR_VAR 0 3
9537: PUSH
9538: LD_INT 22
9540: PUSH
9541: LD_VAR 0 2
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: LD_INT 50
9552: PUSH
9553: EMPTY
9554: LIST
9555: PUSH
9556: LD_INT 2
9558: PUSH
9559: LD_INT 30
9561: PUSH
9562: LD_INT 0
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: LD_INT 30
9571: PUSH
9572: LD_INT 1
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: LIST
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 69
9593: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
9594: LD_VAR 0 3
9598: NOT
9599: IFTRUE 9613
9601: PUSH
9602: LD_VAR 0 2
9606: PPUSH
9607: CALL_OW 108
9611: NOT
9612: OR
9613: IFTRUE 9632
9615: PUSH
9616: LD_EXP 3
9620: PPUSH
9621: LD_VAR 0 2
9625: PPUSH
9626: CALL 8627 0 2
9630: NOT
9631: OR
9632: IFFALSE 9636
// continue ;
9634: GO 9453
// spawn := tmp [ 1 ] ;
9636: LD_ADDR_VAR 0 4
9640: PUSH
9641: LD_VAR 0 3
9645: PUSH
9646: LD_INT 1
9648: ARRAY
9649: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
9650: LD_EXP 40
9654: PUSH
9655: LD_VAR 0 2
9659: ARRAY
9660: PUSH
9661: LD_INT 1
9663: ARRAY
9664: PPUSH
9665: LD_VAR 0 4
9669: PPUSH
9670: CALL_OW 250
9674: PPUSH
9675: LD_VAR 0 4
9679: PPUSH
9680: CALL_OW 251
9684: PPUSH
9685: LD_INT 32
9687: PPUSH
9688: LD_INT 1
9690: PPUSH
9691: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
9695: LD_ADDR_EXP 40
9699: PUSH
9700: LD_EXP 40
9704: PPUSH
9705: LD_VAR 0 2
9709: PPUSH
9710: LD_EXP 40
9714: PUSH
9715: LD_VAR 0 2
9719: ARRAY
9720: PPUSH
9721: LD_INT 1
9723: PPUSH
9724: CALL_OW 3
9728: PPUSH
9729: CALL_OW 1
9733: ST_TO_ADDR
// end ; end ;
9734: GO 9453
9736: POP
9737: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
9738: LD_ADDR_VAR 0 5
9742: PUSH
9743: LD_VAR 0 5
9747: PPUSH
9748: LD_INT 1
9750: PPUSH
9751: LD_INT 8
9753: PPUSH
9754: LD_INT 1
9756: PPUSH
9757: CALL 20791 0 4
9761: ST_TO_ADDR
// until false ;
9762: LD_INT 0
9764: IFFALSE 9433
// end ;
9766: PPOPN 5
9768: END
// every 0 0$1 marked mpActive do
9769: GO 9771
9771: DISABLE
// begin enable ;
9772: ENABLE
// if not mpDisplayStrings then
9773: LD_EXP 38
9777: NOT
9778: IFFALSE 9789
// begin display_strings := [ ] ;
9780: LD_ADDR_OWVAR 47
9784: PUSH
9785: EMPTY
9786: ST_TO_ADDR
// exit ;
9787: GO 9799
// end ; display_strings := mpDisplayStrings ;
9789: LD_ADDR_OWVAR 47
9793: PUSH
9794: LD_EXP 38
9798: ST_TO_ADDR
// end ; end_of_file
9799: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
9800: LD_INT 0
9802: PPUSH
9803: PPUSH
9804: PPUSH
9805: PPUSH
9806: PPUSH
9807: PPUSH
9808: PPUSH
9809: PPUSH
9810: PPUSH
// if GetType ( un ) = unit_vehicle then
9811: LD_VAR 0 1
9815: PPUSH
9816: CALL_OW 247
9820: PUSH
9821: LD_INT 2
9823: EQUAL
9824: IFFALSE 9828
// exit ;
9826: GO 10601
// side := GetSide ( un ) ;
9828: LD_ADDR_VAR 0 9
9832: PUSH
9833: LD_VAR 0 1
9837: PPUSH
9838: CALL_OW 255
9842: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
9843: LD_EXP 3
9847: PUSH
9848: LD_INT 2
9850: PUSH
9851: LD_INT 8
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: IN
9858: IFFALSE 9952
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
9860: LD_VAR 0 1
9864: PPUSH
9865: CALL_OW 266
9869: PUSH
9870: LD_INT 0
9872: PUSH
9873: LD_INT 1
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: IN
9880: IFFALSE 9952
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
9882: LD_ADDR_VAR 0 3
9886: PUSH
9887: LD_INT 22
9889: PUSH
9890: LD_VAR 0 9
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: LD_INT 2
9901: PUSH
9902: LD_INT 21
9904: PUSH
9905: LD_INT 1
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PUSH
9912: LD_INT 33
9914: PUSH
9915: LD_INT 3
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PPUSH
9931: CALL_OW 69
9935: PUSH
9936: FOR_IN
9937: IFFALSE 9950
// KillUnit ( i ) ;
9939: LD_VAR 0 3
9943: PPUSH
9944: CALL_OW 66
9948: GO 9936
9950: POP
9951: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
9952: LD_EXP 3
9956: PUSH
9957: LD_INT 8
9959: EQUAL
9960: IFFALSE 10044
// if un in mpCommanders then
9962: LD_VAR 0 1
9966: PUSH
9967: LD_EXP 41
9971: IN
9972: IFFALSE 10044
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
9974: LD_ADDR_VAR 0 3
9978: PUSH
9979: LD_INT 22
9981: PUSH
9982: LD_VAR 0 9
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PUSH
9991: LD_INT 2
9993: PUSH
9994: LD_INT 21
9996: PUSH
9997: LD_INT 1
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: LD_INT 33
10006: PUSH
10007: LD_INT 3
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: LIST
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PPUSH
10023: CALL_OW 69
10027: PUSH
10028: FOR_IN
10029: IFFALSE 10042
// KillUnit ( i ) ;
10031: LD_VAR 0 3
10035: PPUSH
10036: CALL_OW 66
10040: GO 10028
10042: POP
10043: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 257
10053: PUSH
10054: LD_INT 12
10056: PUSH
10057: LD_INT 17
10059: PUSH
10060: LD_INT 15
10062: PUSH
10063: LD_INT 16
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: IN
10072: IFTRUE 10089
10074: PUSH
10075: LD_VAR 0 1
10079: PPUSH
10080: CALL_OW 263
10084: PUSH
10085: LD_INT 5
10087: EQUAL
10088: OR
10089: IFFALSE 10326
// begin tag := 0 ;
10091: LD_ADDR_VAR 0 5
10095: PUSH
10096: LD_INT 0
10098: ST_TO_ADDR
// for i := 1 to 8 do
10099: LD_ADDR_VAR 0 3
10103: PUSH
10104: DOUBLE
10105: LD_INT 1
10107: DEC
10108: ST_TO_ADDR
10109: LD_INT 8
10111: PUSH
10112: FOR_TO
10113: IFFALSE 10147
// if un in mpApePosIndex [ i ] then
10115: LD_VAR 0 1
10119: PUSH
10120: LD_EXP 32
10124: PUSH
10125: LD_VAR 0 3
10129: ARRAY
10130: IN
10131: IFFALSE 10145
// begin tag := i ;
10133: LD_ADDR_VAR 0 5
10137: PUSH
10138: LD_VAR 0 3
10142: ST_TO_ADDR
// break ;
10143: GO 10147
// end ;
10145: GO 10112
10147: POP
10148: POP
// if not tag then
10149: LD_VAR 0 5
10153: NOT
10154: IFFALSE 10158
// exit ;
10156: GO 10601
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
10158: LD_ADDR_VAR 0 7
10162: PUSH
10163: LD_EXP 31
10167: PUSH
10168: LD_EXP 7
10172: PUSH
10173: LD_VAR 0 5
10177: ARRAY
10178: ARRAY
10179: ST_TO_ADDR
// if not area then
10180: LD_VAR 0 7
10184: NOT
10185: IFFALSE 10189
// exit ;
10187: GO 10601
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
10189: LD_INT 14700
10191: PUSH
10192: LD_VAR 0 1
10196: PUSH
10197: LD_INT 5
10199: MOD
10200: PUSH
10201: LD_INT 1
10203: PLUS
10204: PUSH
10205: LD_INT 700
10207: MUL
10208: PLUS
10209: PPUSH
10210: CALL_OW 67
// repeat wait ( 10 ) ;
10214: LD_INT 10
10216: PPUSH
10217: CALL_OW 67
// until not mpBlockRespThread ;
10221: LD_EXP 47
10225: NOT
10226: IFFALSE 10214
// mpBlockRespThread := true ;
10228: LD_ADDR_EXP 47
10232: PUSH
10233: LD_INT 1
10235: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
10236: LD_INT 0
10238: PPUSH
10239: CALL 50568 0 1
// ape := CreateHuman ;
10243: LD_ADDR_VAR 0 4
10247: PUSH
10248: CALL_OW 44
10252: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
10253: LD_ADDR_EXP 32
10257: PUSH
10258: LD_EXP 32
10262: PPUSH
10263: LD_VAR 0 5
10267: PPUSH
10268: LD_EXP 32
10272: PUSH
10273: LD_VAR 0 5
10277: ARRAY
10278: PPUSH
10279: LD_VAR 0 4
10283: PPUSH
10284: CALL 54441 0 2
10288: PPUSH
10289: CALL_OW 1
10293: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10294: LD_VAR 0 4
10298: PPUSH
10299: LD_VAR 0 7
10303: PPUSH
10304: LD_INT 0
10306: PPUSH
10307: CALL_OW 49
// wait ( 10 ) ;
10311: LD_INT 10
10313: PPUSH
10314: CALL_OW 67
// mpBlockRespThread := false ;
10318: LD_ADDR_EXP 47
10322: PUSH
10323: LD_INT 0
10325: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
10326: LD_VAR 0 1
10330: PPUSH
10331: CALL_OW 247
10335: PUSH
10336: LD_INT 1
10338: EQUAL
10339: IFFALSE 10356
10341: PUSH
10342: LD_VAR 0 1
10346: PPUSH
10347: CALL_OW 248
10351: PUSH
10352: LD_INT 0
10354: GREATER
10355: AND
10356: IFFALSE 10601
// begin if not mpRespawn then
10358: LD_EXP 33
10362: NOT
10363: IFFALSE 10367
// exit ;
10365: GO 10601
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
10367: LD_VAR 0 9
10371: PPUSH
10372: CALL_OW 108
10376: NOT
10377: IFFALSE 10396
10379: PUSH
10380: LD_EXP 3
10384: PPUSH
10385: LD_VAR 0 9
10389: PPUSH
10390: CALL 8627 0 2
10394: NOT
10395: AND
10396: IFFALSE 10400
// exit ;
10398: GO 10601
// side := GetSide ( un ) ;
10400: LD_ADDR_VAR 0 9
10404: PUSH
10405: LD_VAR 0 1
10409: PPUSH
10410: CALL_OW 255
10414: ST_TO_ADDR
// nation := GetNation ( un ) ;
10415: LD_ADDR_VAR 0 8
10419: PUSH
10420: LD_VAR 0 1
10424: PPUSH
10425: CALL_OW 248
10429: ST_TO_ADDR
// class := GetClass ( un ) ;
10430: LD_ADDR_VAR 0 6
10434: PUSH
10435: LD_VAR 0 1
10439: PPUSH
10440: CALL_OW 257
10444: ST_TO_ADDR
// if class > 4 then
10445: LD_VAR 0 6
10449: PUSH
10450: LD_INT 4
10452: GREATER
10453: IFFALSE 10463
// class := 1 ;
10455: LD_ADDR_VAR 0 6
10459: PUSH
10460: LD_INT 1
10462: ST_TO_ADDR
// repeat wait ( 10 ) ;
10463: LD_INT 10
10465: PPUSH
10466: CALL_OW 67
// until not mpBlockRespThread ;
10470: LD_EXP 47
10474: NOT
10475: IFFALSE 10463
// mpBlockRespThread := true ;
10477: LD_ADDR_EXP 47
10481: PUSH
10482: LD_INT 1
10484: ST_TO_ADDR
// uc_side := side ;
10485: LD_ADDR_OWVAR 20
10489: PUSH
10490: LD_VAR 0 9
10494: ST_TO_ADDR
// uc_nation := nation ;
10495: LD_ADDR_OWVAR 21
10499: PUSH
10500: LD_VAR 0 8
10504: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
10505: LD_INT 0
10507: PPUSH
10508: LD_VAR 0 6
10512: PPUSH
10513: LD_INT 2
10515: PPUSH
10516: CALL_OW 380
// un := CreateHuman ;
10520: LD_ADDR_VAR 0 1
10524: PUSH
10525: CALL_OW 44
10529: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
10530: LD_ADDR_EXP 40
10534: PUSH
10535: LD_EXP 40
10539: PPUSH
10540: LD_VAR 0 9
10544: PPUSH
10545: LD_EXP 40
10549: PUSH
10550: LD_VAR 0 9
10554: ARRAY
10555: PPUSH
10556: LD_EXP 40
10560: PUSH
10561: LD_VAR 0 9
10565: ARRAY
10566: PUSH
10567: LD_INT 1
10569: PLUS
10570: PPUSH
10571: LD_VAR 0 1
10575: PPUSH
10576: CALL_OW 1
10580: PPUSH
10581: CALL_OW 1
10585: ST_TO_ADDR
// wait ( 10 ) ;
10586: LD_INT 10
10588: PPUSH
10589: CALL_OW 67
// mpBlockRespThread := false ;
10593: LD_ADDR_EXP 47
10597: PUSH
10598: LD_INT 0
10600: ST_TO_ADDR
// end ; end ;
10601: LD_VAR 0 2
10605: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
10606: LD_INT 0
10608: PPUSH
10609: PPUSH
10610: PPUSH
10611: PPUSH
10612: PPUSH
// tag := 0 ;
10613: LD_ADDR_VAR 0 5
10617: PUSH
10618: LD_INT 0
10620: ST_TO_ADDR
// for i := 1 to 8 do
10621: LD_ADDR_VAR 0 4
10625: PUSH
10626: DOUBLE
10627: LD_INT 1
10629: DEC
10630: ST_TO_ADDR
10631: LD_INT 8
10633: PUSH
10634: FOR_TO
10635: IFFALSE 10669
// if un in mpApePosIndex [ i ] then
10637: LD_VAR 0 2
10641: PUSH
10642: LD_EXP 32
10646: PUSH
10647: LD_VAR 0 4
10651: ARRAY
10652: IN
10653: IFFALSE 10667
// begin tag := i ;
10655: LD_ADDR_VAR 0 5
10659: PUSH
10660: LD_VAR 0 4
10664: ST_TO_ADDR
// break ;
10665: GO 10669
// end ;
10667: GO 10634
10669: POP
10670: POP
// if not tag then
10671: LD_VAR 0 5
10675: NOT
10676: IFFALSE 10680
// exit ;
10678: GO 10848
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
10680: LD_ADDR_VAR 0 6
10684: PUSH
10685: LD_EXP 31
10689: PUSH
10690: LD_EXP 7
10694: PUSH
10695: LD_VAR 0 5
10699: ARRAY
10700: ARRAY
10701: ST_TO_ADDR
// if not area then
10702: LD_VAR 0 6
10706: NOT
10707: IFFALSE 10711
// exit ;
10709: GO 10848
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
10711: LD_INT 14700
10713: PUSH
10714: LD_VAR 0 2
10718: PUSH
10719: LD_INT 5
10721: MOD
10722: PUSH
10723: LD_INT 1
10725: PLUS
10726: PUSH
10727: LD_INT 700
10729: MUL
10730: PLUS
10731: PPUSH
10732: CALL_OW 67
// repeat wait ( 10 ) ;
10736: LD_INT 10
10738: PPUSH
10739: CALL_OW 67
// until not mpBlockRespThread ;
10743: LD_EXP 47
10747: NOT
10748: IFFALSE 10736
// mpBlockRespThread := true ;
10750: LD_ADDR_EXP 47
10754: PUSH
10755: LD_INT 1
10757: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
10758: LD_INT 0
10760: PPUSH
10761: CALL 50568 0 1
// ape := CreateHuman ;
10765: LD_ADDR_VAR 0 7
10769: PUSH
10770: CALL_OW 44
10774: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
10775: LD_ADDR_EXP 32
10779: PUSH
10780: LD_EXP 32
10784: PPUSH
10785: LD_VAR 0 5
10789: PPUSH
10790: LD_EXP 32
10794: PUSH
10795: LD_VAR 0 5
10799: ARRAY
10800: PPUSH
10801: LD_VAR 0 7
10805: PPUSH
10806: CALL 54441 0 2
10810: PPUSH
10811: CALL_OW 1
10815: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10816: LD_VAR 0 7
10820: PPUSH
10821: LD_VAR 0 6
10825: PPUSH
10826: LD_INT 0
10828: PPUSH
10829: CALL_OW 49
// wait ( 10 ) ;
10833: LD_INT 10
10835: PPUSH
10836: CALL_OW 67
// mpBlockRespThread := false ;
10840: LD_ADDR_EXP 47
10844: PUSH
10845: LD_INT 0
10847: ST_TO_ADDR
// end ;
10848: LD_VAR 0 3
10852: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
10853: LD_INT 0
10855: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
10856: LD_VAR 0 1
10860: PPUSH
10861: CALL_OW 266
10865: PUSH
10866: LD_INT 0
10868: PUSH
10869: LD_INT 1
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: IN
10876: IFFALSE 10901
// SetBName ( building , @ & GetSide ( building ) ) ;
10878: LD_VAR 0 1
10882: PPUSH
10883: LD_STRING @
10885: PUSH
10886: LD_VAR 0 1
10890: PPUSH
10891: CALL_OW 255
10895: STR
10896: PPUSH
10897: CALL_OW 500
// end ;
10901: LD_VAR 0 2
10905: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
10906: LD_INT 0
10908: PPUSH
10909: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
10910: LD_EXP 3
10914: PUSH
10915: LD_INT 2
10917: PUSH
10918: LD_INT 8
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: IN
10925: IFFALSE 10949
10927: PUSH
10928: LD_VAR 0 1
10932: PPUSH
10933: CALL_OW 266
10937: PUSH
10938: LD_INT 0
10940: PUSH
10941: LD_INT 1
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: IN
10948: AND
10949: IFFALSE 11028
// begin SetSide ( building , oldSide ) ;
10951: LD_VAR 0 1
10955: PPUSH
10956: LD_VAR 0 2
10960: PPUSH
10961: CALL_OW 235
// KillUnit ( building ) ;
10965: LD_VAR 0 1
10969: PPUSH
10970: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
10974: LD_ADDR_VAR 0 5
10978: PUSH
10979: LD_INT 22
10981: PUSH
10982: LD_VAR 0 2
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 21
10993: PUSH
10994: LD_INT 1
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PPUSH
11005: CALL_OW 69
11009: PUSH
11010: FOR_IN
11011: IFFALSE 11024
// KillUnit ( i ) ;
11013: LD_VAR 0 5
11017: PPUSH
11018: CALL_OW 66
11022: GO 11010
11024: POP
11025: POP
// exit ;
11026: GO 11073
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
11028: LD_VAR 0 1
11032: PPUSH
11033: CALL_OW 266
11037: PUSH
11038: LD_INT 0
11040: PUSH
11041: LD_INT 1
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: IN
11048: IFFALSE 11073
// SetBName ( building , @ & GetSide ( building ) ) ;
11050: LD_VAR 0 1
11054: PPUSH
11055: LD_STRING @
11057: PUSH
11058: LD_VAR 0 1
11062: PPUSH
11063: CALL_OW 255
11067: STR
11068: PPUSH
11069: CALL_OW 500
// end ;
11073: LD_VAR 0 4
11077: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
11078: LD_INT 0
11080: PPUSH
11081: PPUSH
11082: PPUSH
// if mpGameType <> GameTypeFamine then
11083: LD_EXP 3
11087: PUSH
11088: LD_INT 5
11090: NONEQUAL
11091: IFFALSE 11095
// exit ;
11093: GO 11329
// for i := 1 to mpGlobalOilDeposits do
11095: LD_ADDR_VAR 0 6
11099: PUSH
11100: DOUBLE
11101: LD_INT 1
11103: DEC
11104: ST_TO_ADDR
11105: LD_EXP 42
11109: PUSH
11110: FOR_TO
11111: IFFALSE 11327
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
11113: LD_EXP 42
11117: PUSH
11118: LD_VAR 0 6
11122: ARRAY
11123: PUSH
11124: LD_INT 1
11126: ARRAY
11127: PPUSH
11128: LD_EXP 42
11132: PUSH
11133: LD_VAR 0 6
11137: ARRAY
11138: PUSH
11139: LD_INT 2
11141: ARRAY
11142: PPUSH
11143: CALL_OW 428
11147: PUSH
11148: LD_VAR 0 1
11152: EQUAL
11153: IFFALSE 11325
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
11155: LD_ADDR_VAR 0 7
11159: PUSH
11160: LD_EXP 42
11164: PUSH
11165: LD_VAR 0 6
11169: ARRAY
11170: PUSH
11171: LD_INT 3
11173: ARRAY
11174: ST_TO_ADDR
// value := value - amount ;
11175: LD_ADDR_VAR 0 7
11179: PUSH
11180: LD_VAR 0 7
11184: PUSH
11185: LD_VAR 0 4
11189: MINUS
11190: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
11191: LD_ADDR_EXP 42
11195: PUSH
11196: LD_EXP 42
11200: PPUSH
11201: LD_VAR 0 6
11205: PPUSH
11206: LD_EXP 42
11210: PUSH
11211: LD_VAR 0 6
11215: ARRAY
11216: PPUSH
11217: LD_INT 3
11219: PPUSH
11220: LD_VAR 0 7
11224: PPUSH
11225: CALL_OW 1
11229: PPUSH
11230: CALL_OW 1
11234: ST_TO_ADDR
// if side in [ your_side , 9 ] then
11235: LD_VAR 0 2
11239: PUSH
11240: LD_OWVAR 2
11244: PUSH
11245: LD_INT 9
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: IN
11252: IFFALSE 11268
// SetUnitDisplayNumber ( building , value ) ;
11254: LD_VAR 0 1
11258: PPUSH
11259: LD_VAR 0 7
11263: PPUSH
11264: CALL_OW 505
// if value <= 0 then
11268: LD_VAR 0 7
11272: PUSH
11273: LD_INT 0
11275: LESSEQUAL
11276: IFFALSE 11325
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
11278: LD_EXP 42
11282: PUSH
11283: LD_VAR 0 6
11287: ARRAY
11288: PUSH
11289: LD_INT 1
11291: ARRAY
11292: PPUSH
11293: LD_EXP 42
11297: PUSH
11298: LD_VAR 0 6
11302: ARRAY
11303: PUSH
11304: LD_INT 2
11306: ARRAY
11307: PPUSH
11308: CALL_OW 63
// KillUnit ( building ) ;
11312: LD_VAR 0 1
11316: PPUSH
11317: CALL_OW 66
// exit ;
11321: POP
11322: POP
11323: GO 11329
// end ; end ; end ;
11325: GO 11110
11327: POP
11328: POP
// end ;
11329: LD_VAR 0 5
11333: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
11334: LD_INT 0
11336: PPUSH
11337: PPUSH
11338: PPUSH
// if mpGameType <> GameTypeFamine then
11339: LD_EXP 3
11343: PUSH
11344: LD_INT 5
11346: NONEQUAL
11347: IFFALSE 11351
// exit ;
11349: GO 11585
// for i := 1 to mpGlobalSibDeposits do
11351: LD_ADDR_VAR 0 6
11355: PUSH
11356: DOUBLE
11357: LD_INT 1
11359: DEC
11360: ST_TO_ADDR
11361: LD_EXP 43
11365: PUSH
11366: FOR_TO
11367: IFFALSE 11583
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
11369: LD_EXP 43
11373: PUSH
11374: LD_VAR 0 6
11378: ARRAY
11379: PUSH
11380: LD_INT 1
11382: ARRAY
11383: PPUSH
11384: LD_EXP 43
11388: PUSH
11389: LD_VAR 0 6
11393: ARRAY
11394: PUSH
11395: LD_INT 2
11397: ARRAY
11398: PPUSH
11399: CALL_OW 428
11403: PUSH
11404: LD_VAR 0 1
11408: EQUAL
11409: IFFALSE 11581
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
11411: LD_ADDR_VAR 0 7
11415: PUSH
11416: LD_EXP 43
11420: PUSH
11421: LD_VAR 0 6
11425: ARRAY
11426: PUSH
11427: LD_INT 3
11429: ARRAY
11430: ST_TO_ADDR
// value := value - amount ;
11431: LD_ADDR_VAR 0 7
11435: PUSH
11436: LD_VAR 0 7
11440: PUSH
11441: LD_VAR 0 4
11445: MINUS
11446: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
11447: LD_ADDR_EXP 43
11451: PUSH
11452: LD_EXP 43
11456: PPUSH
11457: LD_VAR 0 6
11461: PPUSH
11462: LD_EXP 43
11466: PUSH
11467: LD_VAR 0 6
11471: ARRAY
11472: PPUSH
11473: LD_INT 3
11475: PPUSH
11476: LD_VAR 0 7
11480: PPUSH
11481: CALL_OW 1
11485: PPUSH
11486: CALL_OW 1
11490: ST_TO_ADDR
// if side in [ your_side , 9 ] then
11491: LD_VAR 0 2
11495: PUSH
11496: LD_OWVAR 2
11500: PUSH
11501: LD_INT 9
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: IN
11508: IFFALSE 11524
// SetUnitDisplayNumber ( building , value ) ;
11510: LD_VAR 0 1
11514: PPUSH
11515: LD_VAR 0 7
11519: PPUSH
11520: CALL_OW 505
// if value <= 0 then
11524: LD_VAR 0 7
11528: PUSH
11529: LD_INT 0
11531: LESSEQUAL
11532: IFFALSE 11581
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
11534: LD_EXP 43
11538: PUSH
11539: LD_VAR 0 6
11543: ARRAY
11544: PUSH
11545: LD_INT 1
11547: ARRAY
11548: PPUSH
11549: LD_EXP 43
11553: PUSH
11554: LD_VAR 0 6
11558: ARRAY
11559: PUSH
11560: LD_INT 2
11562: ARRAY
11563: PPUSH
11564: CALL_OW 63
// KillUnit ( building ) ;
11568: LD_VAR 0 1
11572: PPUSH
11573: CALL_OW 66
// exit ;
11577: POP
11578: POP
11579: GO 11585
// end ; end ; end ;
11581: GO 11366
11583: POP
11584: POP
// end ;
11585: LD_VAR 0 5
11589: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
11590: LD_INT 0
11592: PPUSH
11593: PPUSH
// side := GetSide ( factory ) ;
11594: LD_ADDR_VAR 0 7
11598: PUSH
11599: LD_VAR 0 1
11603: PPUSH
11604: CALL_OW 255
11608: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
11609: LD_VAR 0 5
11613: PUSH
11614: LD_INT 81
11616: EQUAL
11617: IFFALSE 11655
11619: PUSH
11620: LD_INT 22
11622: PUSH
11623: LD_VAR 0 7
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: LD_INT 34
11634: PUSH
11635: LD_INT 81
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PPUSH
11646: CALL_OW 69
11650: PUSH
11651: LD_INT 0
11653: GREATER
11654: AND
11655: IFFALSE 11688
// begin ComCancel ( factory ) ;
11657: LD_VAR 0 1
11661: PPUSH
11662: CALL_OW 127
// if side = your_side then
11666: LD_VAR 0 7
11670: PUSH
11671: LD_OWVAR 2
11675: EQUAL
11676: IFFALSE 11688
// HintSpec ( VehLimit , 2 ) ;
11678: LD_STRING VehLimit
11680: PPUSH
11681: LD_INT 2
11683: PPUSH
11684: CALL_OW 338
// end ; end ;
11688: LD_VAR 0 6
11692: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
11693: LD_INT 0
11695: PPUSH
11696: PPUSH
11697: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
11698: LD_VAR 0 1
11702: PPUSH
11703: CALL_OW 264
11707: PUSH
11708: LD_INT 81
11710: EQUAL
11711: IFFALSE 11728
11713: PUSH
11714: LD_VAR 0 1
11718: PPUSH
11719: CALL_OW 263
11723: PUSH
11724: LD_INT 1
11726: EQUAL
11727: AND
11728: IFFALSE 12008
// begin for i := 1 to Count ( minersList ) do
11730: LD_ADDR_VAR 0 6
11734: PUSH
11735: DOUBLE
11736: LD_INT 1
11738: DEC
11739: ST_TO_ADDR
11740: LD_EXP 58
11744: PPUSH
11745: CALL 18465 0 1
11749: PUSH
11750: FOR_TO
11751: IFFALSE 11869
// begin if minersList [ i ] = oldId then
11753: LD_EXP 58
11757: PUSH
11758: LD_VAR 0 6
11762: ARRAY
11763: PUSH
11764: LD_VAR 0 2
11768: EQUAL
11769: IFFALSE 11867
// begin for j := 1 to minerMinesList [ i ] do
11771: LD_ADDR_VAR 0 7
11775: PUSH
11776: DOUBLE
11777: LD_INT 1
11779: DEC
11780: ST_TO_ADDR
11781: LD_EXP 59
11785: PUSH
11786: LD_VAR 0 6
11790: ARRAY
11791: PUSH
11792: FOR_TO
11793: IFFALSE 11843
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
11795: LD_EXP 59
11799: PUSH
11800: LD_VAR 0 6
11804: ARRAY
11805: PUSH
11806: LD_VAR 0 7
11810: ARRAY
11811: PUSH
11812: LD_INT 1
11814: ARRAY
11815: PPUSH
11816: LD_EXP 59
11820: PUSH
11821: LD_VAR 0 6
11825: ARRAY
11826: PUSH
11827: LD_VAR 0 7
11831: ARRAY
11832: PUSH
11833: LD_INT 2
11835: ARRAY
11836: PPUSH
11837: CALL_OW 612
11841: GO 11792
11843: POP
11844: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
11845: LD_ADDR_EXP 59
11849: PUSH
11850: LD_EXP 59
11854: PPUSH
11855: LD_VAR 0 6
11859: PPUSH
11860: CALL_OW 3
11864: ST_TO_ADDR
// break ;
11865: GO 11869
// end ; end ;
11867: GO 11750
11869: POP
11870: POP
// minersList := minersList diff oldId ;
11871: LD_ADDR_EXP 58
11875: PUSH
11876: LD_EXP 58
11880: PUSH
11881: LD_VAR 0 2
11885: DIFF
11886: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
11887: LD_INT 22
11889: PUSH
11890: LD_VAR 0 4
11894: PPUSH
11895: CALL_OW 255
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 34
11906: PUSH
11907: LD_INT 81
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PPUSH
11918: CALL_OW 69
11922: PUSH
11923: LD_INT 1
11925: GREATER
11926: IFFALSE 11953
// begin ComExit ( unit ) ;
11928: LD_VAR 0 4
11932: PPUSH
11933: CALL 54839 0 1
// SetSide ( newId , oldSide ) ;
11937: LD_VAR 0 1
11941: PPUSH
11942: LD_VAR 0 3
11946: PPUSH
11947: CALL_OW 235
// exit ;
11951: GO 12008
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
11953: LD_ADDR_EXP 58
11957: PUSH
11958: LD_EXP 58
11962: PPUSH
11963: LD_EXP 58
11967: PUSH
11968: LD_INT 1
11970: PLUS
11971: PPUSH
11972: LD_VAR 0 1
11976: PPUSH
11977: CALL_OW 1
11981: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
11982: LD_ADDR_EXP 59
11986: PUSH
11987: LD_EXP 59
11991: PPUSH
11992: LD_EXP 59
11996: PUSH
11997: LD_INT 1
11999: PLUS
12000: PPUSH
12001: EMPTY
12002: PPUSH
12003: CALL_OW 1
12007: ST_TO_ADDR
// end ; end ; end_of_file
12008: LD_VAR 0 5
12012: RET
// every 0 0$1 trigger mpGameActive marked GameTypeArmsArtifact do var i , j , k , techs , hasCameras , cameras , resource , depot , b , un , type , buildings , side , nation ;
12013: LD_EXP 39
12017: IFFALSE 13190
12019: GO 12021
12021: DISABLE
12022: LD_INT 0
12024: PPUSH
12025: PPUSH
12026: PPUSH
12027: PPUSH
12028: PPUSH
12029: PPUSH
12030: PPUSH
12031: PPUSH
12032: PPUSH
12033: PPUSH
12034: PPUSH
12035: PPUSH
12036: PPUSH
12037: PPUSH
// begin CreateResourcesArea ( mat_artifact , 3 , artifactArea1 , false ) ;
12038: LD_INT 4
12040: PPUSH
12041: LD_INT 3
12043: PPUSH
12044: LD_INT 94
12046: PPUSH
12047: LD_INT 0
12049: PPUSH
12050: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 4 , artifactArea2 , false ) ;
12054: LD_INT 4
12056: PPUSH
12057: LD_INT 4
12059: PPUSH
12060: LD_INT 93
12062: PPUSH
12063: LD_INT 0
12065: PPUSH
12066: CALL_OW 59
// for i := 1 to 8 do
12070: LD_ADDR_VAR 0 1
12074: PUSH
12075: DOUBLE
12076: LD_INT 1
12078: DEC
12079: ST_TO_ADDR
12080: LD_INT 8
12082: PUSH
12083: FOR_TO
12084: IFFALSE 12984
// begin hasCameras := false ;
12086: LD_ADDR_VAR 0 5
12090: PUSH
12091: LD_INT 0
12093: ST_TO_ADDR
// if mpSideTeams [ i ] = 1 and mpSidePositions [ i ] then
12094: LD_EXP 8
12098: PUSH
12099: LD_VAR 0 1
12103: ARRAY
12104: PUSH
12105: LD_INT 1
12107: EQUAL
12108: IFFALSE 12122
12110: PUSH
12111: LD_EXP 7
12115: PUSH
12116: LD_VAR 0 1
12120: ARRAY
12121: AND
12122: IFFALSE 12982
// begin side := i ;
12124: LD_ADDR_VAR 0 13
12128: PUSH
12129: LD_VAR 0 1
12133: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
12134: LD_ADDR_VAR 0 14
12138: PUSH
12139: LD_EXP 9
12143: PUSH
12144: LD_VAR 0 1
12148: ARRAY
12149: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
12150: LD_ADDR_VAR 0 8
12154: PUSH
12155: LD_INT 22
12157: PUSH
12158: LD_VAR 0 13
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: PUSH
12167: LD_INT 30
12169: PUSH
12170: LD_INT 1
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PPUSH
12181: CALL_OW 69
12185: ST_TO_ADDR
// for j := 1 to mpStartingResources do
12186: LD_ADDR_VAR 0 2
12190: PUSH
12191: DOUBLE
12192: LD_INT 1
12194: DEC
12195: ST_TO_ADDR
12196: LD_EXP 15
12200: PUSH
12201: FOR_TO
12202: IFFALSE 12269
// begin resource := mpStartingResources [ j ] ;
12204: LD_ADDR_VAR 0 7
12208: PUSH
12209: LD_EXP 15
12213: PUSH
12214: LD_VAR 0 2
12218: ARRAY
12219: ST_TO_ADDR
// if not resource then
12220: LD_VAR 0 7
12224: NOT
12225: IFFALSE 12235
// resource := 30 ;
12227: LD_ADDR_VAR 0 7
12231: PUSH
12232: LD_INT 30
12234: ST_TO_ADDR
// SetResourceType ( GetBase ( depot [ 1 ] ) , j , resource * 2 ) ;
12235: LD_VAR 0 8
12239: PUSH
12240: LD_INT 1
12242: ARRAY
12243: PPUSH
12244: CALL_OW 274
12248: PPUSH
12249: LD_VAR 0 2
12253: PPUSH
12254: LD_VAR 0 7
12258: PUSH
12259: LD_INT 2
12261: MUL
12262: PPUSH
12263: CALL_OW 277
// end ;
12267: GO 12201
12269: POP
12270: POP
// uc_side := side ;
12271: LD_ADDR_OWVAR 20
12275: PUSH
12276: LD_VAR 0 13
12280: ST_TO_ADDR
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
12281: LD_INT 1
12283: PPUSH
12284: LD_INT 1
12286: PPUSH
12287: LD_VAR 0 13
12291: PPUSH
12292: LD_INT 32793
12294: NEG
12295: PPUSH
12296: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
12300: LD_INT 1
12302: PPUSH
12303: LD_INT 1
12305: PPUSH
12306: LD_VAR 0 13
12310: PPUSH
12311: CALL_OW 331
// if nation = nation_arabian and not hasCameras then
12315: LD_VAR 0 14
12319: PUSH
12320: LD_INT 2
12322: EQUAL
12323: IFFALSE 12332
12325: PUSH
12326: LD_VAR 0 5
12330: NOT
12331: AND
12332: IFFALSE 12354
// begin hasCameras := true ;
12334: LD_ADDR_VAR 0 5
12338: PUSH
12339: LD_INT 1
12341: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , camsArea ) ;
12342: LD_VAR 0 13
12346: PPUSH
12347: LD_INT 67
12349: PPUSH
12350: CALL 59562 0 2
// end ; techs := GetTechNation ( side , nation , - 1 ) diff [ tech_bio3 , tech_bio2 , tech_comp3 , tech_comp2 , tech_opto3 , tech_opto2 , tech_sib3 , tech_sib2 , tech_weap3 , tech_weap2 , tech_radmat , tech_artillery , tech_sibimplosion , tech_behemoth , tech_sibfiss ] ;
12354: LD_ADDR_VAR 0 4
12358: PUSH
12359: LD_VAR 0 13
12363: PPUSH
12364: LD_VAR 0 14
12368: PPUSH
12369: LD_INT 1
12371: NEG
12372: PPUSH
12373: CALL 16388 0 3
12377: PUSH
12378: LD_INT 68
12380: PUSH
12381: LD_INT 67
12383: PUSH
12384: LD_INT 59
12386: PUSH
12387: LD_INT 58
12389: PUSH
12390: LD_INT 62
12392: PUSH
12393: LD_INT 61
12395: PUSH
12396: LD_INT 56
12398: PUSH
12399: LD_INT 55
12401: PUSH
12402: LD_INT 53
12404: PUSH
12405: LD_INT 52
12407: PUSH
12408: LD_INT 81
12410: PUSH
12411: LD_INT 80
12413: PUSH
12414: LD_INT 72
12416: PUSH
12417: LD_INT 23
12419: PUSH
12420: LD_INT 25
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: DIFF
12440: ST_TO_ADDR
// for j in techs do
12441: LD_ADDR_VAR 0 2
12445: PUSH
12446: LD_VAR 0 4
12450: PUSH
12451: FOR_IN
12452: IFFALSE 12473
// SetTech ( j , side , state_researched ) ;
12454: LD_VAR 0 2
12458: PPUSH
12459: LD_VAR 0 13
12463: PPUSH
12464: LD_INT 2
12466: PPUSH
12467: CALL_OW 322
12471: GO 12451
12473: POP
12474: POP
// PrepareArmsRaceVehiclesList ( mpSidePositions [ i ] , side , nation ) ;
12475: LD_EXP 7
12479: PUSH
12480: LD_VAR 0 1
12484: ARRAY
12485: PPUSH
12486: LD_VAR 0 13
12490: PPUSH
12491: LD_VAR 0 14
12495: PPUSH
12496: CALL 2486 0 3
// buildings := GetArmsRaceBuildingsList ( mpSidePositions [ i ] ) ;
12500: LD_ADDR_VAR 0 12
12504: PUSH
12505: LD_EXP 7
12509: PUSH
12510: LD_VAR 0 1
12514: ARRAY
12515: PPUSH
12516: CALL 2912 0 1
12520: ST_TO_ADDR
// for j in buildings do
12521: LD_ADDR_VAR 0 2
12525: PUSH
12526: LD_VAR 0 12
12530: PUSH
12531: FOR_IN
12532: IFFALSE 12978
// begin uc_nation := nation ;
12534: LD_ADDR_OWVAR 21
12538: PUSH
12539: LD_VAR 0 14
12543: ST_TO_ADDR
// if j [ 1 ] = b_bunker and nation in [ nation_american , nation_russian ] then
12544: LD_VAR 0 2
12548: PUSH
12549: LD_INT 1
12551: ARRAY
12552: PUSH
12553: LD_INT 32
12555: EQUAL
12556: IFFALSE 12575
12558: PUSH
12559: LD_VAR 0 14
12563: PUSH
12564: LD_INT 1
12566: PUSH
12567: LD_INT 3
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: IN
12574: AND
12575: IFFALSE 12587
// type := b_turret else
12577: LD_ADDR_VAR 0 11
12581: PUSH
12582: LD_INT 33
12584: ST_TO_ADDR
12585: GO 12625
// if j [ 1 ] = b_lab then
12587: LD_VAR 0 2
12591: PUSH
12592: LD_INT 1
12594: ARRAY
12595: PUSH
12596: LD_INT 6
12598: EQUAL
12599: IFFALSE 12611
// type := b_lab_full else
12601: LD_ADDR_VAR 0 11
12605: PUSH
12606: LD_INT 8
12608: ST_TO_ADDR
12609: GO 12625
// type := j [ 1 ] ;
12611: LD_ADDR_VAR 0 11
12615: PUSH
12616: LD_VAR 0 2
12620: PUSH
12621: LD_INT 1
12623: ARRAY
12624: ST_TO_ADDR
// bc_level := 10 ;
12625: LD_ADDR_OWVAR 43
12629: PUSH
12630: LD_INT 10
12632: ST_TO_ADDR
// bc_type := type ;
12633: LD_ADDR_OWVAR 42
12637: PUSH
12638: LD_VAR 0 11
12642: ST_TO_ADDR
// bc_kind1 := - 1 ;
12643: LD_ADDR_OWVAR 44
12647: PUSH
12648: LD_INT 1
12650: NEG
12651: ST_TO_ADDR
// bc_kind2 := - 1 ;
12652: LD_ADDR_OWVAR 45
12656: PUSH
12657: LD_INT 1
12659: NEG
12660: ST_TO_ADDR
// if j [ 1 ] = b_lab then
12661: LD_VAR 0 2
12665: PUSH
12666: LD_INT 1
12668: ARRAY
12669: PUSH
12670: LD_INT 6
12672: EQUAL
12673: IFFALSE 12691
// begin bc_kind1 := b_lab_weapon ;
12675: LD_ADDR_OWVAR 44
12679: PUSH
12680: LD_INT 10
12682: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
12683: LD_ADDR_OWVAR 45
12687: PUSH
12688: LD_INT 11
12690: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
12691: LD_ADDR_VAR 0 9
12695: PUSH
12696: LD_VAR 0 2
12700: PUSH
12701: LD_INT 2
12703: ARRAY
12704: PPUSH
12705: LD_VAR 0 2
12709: PUSH
12710: LD_INT 3
12712: ARRAY
12713: PPUSH
12714: LD_VAR 0 2
12718: PUSH
12719: LD_INT 4
12721: ARRAY
12722: PPUSH
12723: CALL_OW 47
12727: ST_TO_ADDR
// if j [ 1 ] in [ b_depot , b_warehouse ] then
12728: LD_VAR 0 2
12732: PUSH
12733: LD_INT 1
12735: ARRAY
12736: PUSH
12737: LD_INT 0
12739: PUSH
12740: LD_INT 1
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: IN
12747: IFFALSE 12877
// begin SetBName ( b , @ & side ) ;
12749: LD_VAR 0 9
12753: PPUSH
12754: LD_STRING @
12756: PUSH
12757: LD_VAR 0 13
12761: STR
12762: PPUSH
12763: CALL_OW 500
// for k := 1 to 2 do
12767: LD_ADDR_VAR 0 3
12771: PUSH
12772: DOUBLE
12773: LD_INT 1
12775: DEC
12776: ST_TO_ADDR
12777: LD_INT 2
12779: PUSH
12780: FOR_TO
12781: IFFALSE 12803
// begin PrepareApemanEngineer ( ) ;
12783: CALL 50466 0 0
// PlaceHumanInUnit ( CreateHuman , b ) ;
12787: CALL_OW 44
12791: PPUSH
12792: LD_VAR 0 9
12796: PPUSH
12797: CALL_OW 52
// end ;
12801: GO 12780
12803: POP
12804: POP
// for k := 1 to mpStartingResources do
12805: LD_ADDR_VAR 0 3
12809: PUSH
12810: DOUBLE
12811: LD_INT 1
12813: DEC
12814: ST_TO_ADDR
12815: LD_EXP 15
12819: PUSH
12820: FOR_TO
12821: IFFALSE 12875
// begin resource := mpStartingResources [ k ] ;
12823: LD_ADDR_VAR 0 7
12827: PUSH
12828: LD_EXP 15
12832: PUSH
12833: LD_VAR 0 3
12837: ARRAY
12838: ST_TO_ADDR
// if resource then
12839: LD_VAR 0 7
12843: IFFALSE 12873
// SetResourceType ( GetBase ( b ) , k , resource div 2 ) ;
12845: LD_VAR 0 9
12849: PPUSH
12850: CALL_OW 274
12854: PPUSH
12855: LD_VAR 0 3
12859: PPUSH
12860: LD_VAR 0 7
12864: PUSH
12865: LD_INT 2
12867: DIV
12868: PPUSH
12869: CALL_OW 277
// end ;
12873: GO 12820
12875: POP
12876: POP
// end ; if j [ 1 ] = b_bunker and nation = nation_arabian then
12877: LD_VAR 0 2
12881: PUSH
12882: LD_INT 1
12884: ARRAY
12885: PUSH
12886: LD_INT 32
12888: EQUAL
12889: IFFALSE 12901
12891: PUSH
12892: LD_VAR 0 14
12896: PUSH
12897: LD_INT 2
12899: EQUAL
12900: AND
12901: IFFALSE 12921
// begin PrepareApemanSoldier ( ) ;
12903: CALL 50364 0 0
// PlaceHumanInUnit ( CreateHuman , b ) ;
12907: CALL_OW 44
12911: PPUSH
12912: LD_VAR 0 9
12916: PPUSH
12917: CALL_OW 52
// end ; if Count ( j ) > 4 and j [ 1 ] = b_bunker then
12921: LD_VAR 0 2
12925: PPUSH
12926: CALL 18465 0 1
12930: PUSH
12931: LD_INT 4
12933: GREATER
12934: IFFALSE 12950
12936: PUSH
12937: LD_VAR 0 2
12941: PUSH
12942: LD_INT 1
12944: ARRAY
12945: PUSH
12946: LD_INT 32
12948: EQUAL
12949: AND
12950: IFFALSE 12976
// PlaceWeaponTurret ( b , j [ 5 ] [ nation ] ) ;
12952: LD_VAR 0 9
12956: PPUSH
12957: LD_VAR 0 2
12961: PUSH
12962: LD_INT 5
12964: ARRAY
12965: PUSH
12966: LD_VAR 0 14
12970: ARRAY
12971: PPUSH
12972: CALL_OW 431
// end ;
12976: GO 12531
12978: POP
12979: POP
// end else
12980: GO 12982
// end ;
12982: GO 12083
12984: POP
12985: POP
// repeat mpDisplayStrings := [ #TimeToWin , ( mpBuildUpTime + mpTimeToWin ) - tick ] ;
12986: LD_ADDR_EXP 38
12990: PUSH
12991: LD_STRING #TimeToWin
12993: PUSH
12994: LD_EXP 20
12998: PUSH
12999: LD_EXP 46
13003: PLUS
13004: PUSH
13005: LD_OWVAR 1
13009: MINUS
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: ST_TO_ADDR
// if mpBuildUpTime > tick then
13015: LD_EXP 20
13019: PUSH
13020: LD_OWVAR 1
13024: GREATER
13025: IFFALSE 13056
// mpDisplayStrings := mpDisplayStrings ^ [ #PrepareTime , mpBuildUpTime - tick ] ;
13027: LD_ADDR_EXP 38
13031: PUSH
13032: LD_EXP 38
13036: PUSH
13037: LD_STRING #PrepareTime
13039: PUSH
13040: LD_EXP 20
13044: PUSH
13045: LD_OWVAR 1
13049: MINUS
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: ADD
13055: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13056: LD_INT 35
13058: PPUSH
13059: CALL_OW 67
// if ( ( 30 30$0 + mpBuildUpTime ) = tick ) then
13063: LD_INT 63000
13065: PUSH
13066: LD_EXP 20
13070: PLUS
13071: PUSH
13072: LD_OWVAR 1
13076: EQUAL
13077: IFFALSE 13144
// begin for i := 1 to 8 do
13079: LD_ADDR_VAR 0 1
13083: PUSH
13084: DOUBLE
13085: LD_INT 1
13087: DEC
13088: ST_TO_ADDR
13089: LD_INT 8
13091: PUSH
13092: FOR_TO
13093: IFFALSE 13142
// if mpSideTeams [ i ] = 1 and mpSidePositions [ i ] then
13095: LD_EXP 8
13099: PUSH
13100: LD_VAR 0 1
13104: ARRAY
13105: PUSH
13106: LD_INT 1
13108: EQUAL
13109: IFFALSE 13123
13111: PUSH
13112: LD_EXP 7
13116: PUSH
13117: LD_VAR 0 1
13121: ARRAY
13122: AND
13123: IFFALSE 13140
// SetTech ( tech_SibFiss , i , state_enabled ) ;
13125: LD_INT 25
13127: PPUSH
13128: LD_VAR 0 1
13132: PPUSH
13133: LD_INT 1
13135: PPUSH
13136: CALL_OW 322
13140: GO 13092
13142: POP
13143: POP
// end ; until ( mpBuildUpTime + mpTimeToWin ) <= tick ;
13144: LD_EXP 20
13148: PUSH
13149: LD_EXP 46
13153: PLUS
13154: PUSH
13155: LD_OWVAR 1
13159: LESSEQUAL
13160: IFFALSE 12986
// if mpSideTeams [ your_side ] = 1 then
13162: LD_EXP 8
13166: PUSH
13167: LD_OWVAR 2
13171: ARRAY
13172: PUSH
13173: LD_INT 1
13175: EQUAL
13176: IFFALSE 13183
// enable ( mpWin ) else
13178: LD_INT 101
13180: ENABLE_MARKED
13181: GO 13190
// begin Multiplayer_Loose_Message ;
13183: CALL_OW 521
// enable ( mpLose ) ;
13187: LD_INT 102
13189: ENABLE_MARKED
// end ; end ;
13190: PPOPN 14
13192: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeArmsArtifact do var i , canWin , yourTeam , team2HasArtifact , team3HasArtifact , art1 , art2 ;
13193: LD_EXP 39
13197: IFFALSE 13205
13199: PUSH
13200: CALL 13668 0 0
13204: AND
13205: IFFALSE 13213
13207: PUSH
13208: LD_OWVAR 4
13212: AND
13213: IFFALSE 13665
13215: GO 13217
13217: DISABLE
13218: LD_INT 0
13220: PPUSH
13221: PPUSH
13222: PPUSH
13223: PPUSH
13224: PPUSH
13225: PPUSH
13226: PPUSH
// begin canWin := false ;
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: LD_INT 0
13234: ST_TO_ADDR
// team2HasArtifact := false ;
13235: LD_ADDR_VAR 0 4
13239: PUSH
13240: LD_INT 0
13242: ST_TO_ADDR
// team3HasArtifact := false ;
13243: LD_ADDR_VAR 0 5
13247: PUSH
13248: LD_INT 0
13250: ST_TO_ADDR
// art1 := FindArtifact ( 3 ) ;
13251: LD_ADDR_VAR 0 6
13255: PUSH
13256: LD_INT 3
13258: PPUSH
13259: CALL_OW 469
13263: ST_TO_ADDR
// art2 := FindArtifact ( 4 ) ;
13264: LD_ADDR_VAR 0 7
13268: PUSH
13269: LD_INT 4
13271: PPUSH
13272: CALL_OW 469
13276: ST_TO_ADDR
// if art1 and art2 then
13277: LD_VAR 0 6
13281: IFFALSE 13289
13283: PUSH
13284: LD_VAR 0 7
13288: AND
13289: IFFALSE 13411
// begin team2HasArtifact := InArea ( art1 [ 1 ] , art1 [ 2 ] , buildUpNorthArea ) and InArea ( art2 [ 1 ] , art2 [ 2 ] , buildUpNorthArea ) ;
13291: LD_ADDR_VAR 0 4
13295: PUSH
13296: LD_VAR 0 6
13300: PUSH
13301: LD_INT 1
13303: ARRAY
13304: PPUSH
13305: LD_VAR 0 6
13309: PUSH
13310: LD_INT 2
13312: ARRAY
13313: PPUSH
13314: LD_INT 1
13316: PPUSH
13317: CALL_OW 309
13321: IFFALSE 13350
13323: PUSH
13324: LD_VAR 0 7
13328: PUSH
13329: LD_INT 1
13331: ARRAY
13332: PPUSH
13333: LD_VAR 0 7
13337: PUSH
13338: LD_INT 2
13340: ARRAY
13341: PPUSH
13342: LD_INT 1
13344: PPUSH
13345: CALL_OW 309
13349: AND
13350: ST_TO_ADDR
// team3HasArtifact := InArea ( art1 [ 1 ] , art1 [ 2 ] , buildUpSouthArea ) and InArea ( art2 [ 1 ] , art2 [ 2 ] , buildUpSouthArea ) ;
13351: LD_ADDR_VAR 0 5
13355: PUSH
13356: LD_VAR 0 6
13360: PUSH
13361: LD_INT 1
13363: ARRAY
13364: PPUSH
13365: LD_VAR 0 6
13369: PUSH
13370: LD_INT 2
13372: ARRAY
13373: PPUSH
13374: LD_INT 2
13376: PPUSH
13377: CALL_OW 309
13381: IFFALSE 13410
13383: PUSH
13384: LD_VAR 0 7
13388: PUSH
13389: LD_INT 1
13391: ARRAY
13392: PPUSH
13393: LD_VAR 0 7
13397: PUSH
13398: LD_INT 2
13400: ARRAY
13401: PPUSH
13402: LD_INT 2
13404: PPUSH
13405: CALL_OW 309
13409: AND
13410: ST_TO_ADDR
// end ; if not HasPower ( your_side ) then
13411: LD_OWVAR 2
13415: PPUSH
13416: CALL 13710 0 1
13420: NOT
13421: IFFALSE 13432
// begin Multiplayer_Loose_Message ;
13423: CALL_OW 521
// enable ( mpLose ) ;
13427: LD_INT 102
13429: ENABLE_MARKED
// end else
13430: GO 13665
// begin canWin := true ;
13432: LD_ADDR_VAR 0 2
13436: PUSH
13437: LD_INT 1
13439: ST_TO_ADDR
// yourTeam := mpSideTeams [ your_side ] ;
13440: LD_ADDR_VAR 0 3
13444: PUSH
13445: LD_EXP 8
13449: PUSH
13450: LD_OWVAR 2
13454: ARRAY
13455: ST_TO_ADDR
// if team2HasArtifact then
13456: LD_VAR 0 4
13460: IFFALSE 13484
// begin if yourTeam = 2 then
13462: LD_VAR 0 3
13466: PUSH
13467: LD_INT 2
13469: EQUAL
13470: IFFALSE 13477
// enable ( mpWin ) else
13472: LD_INT 101
13474: ENABLE_MARKED
13475: GO 13484
// begin Multiplayer_Loose_Message ;
13477: CALL_OW 521
// enable ( mpLose ) ;
13481: LD_INT 102
13483: ENABLE_MARKED
// end ; end ; if team3HasArtifact then
13484: LD_VAR 0 5
13488: IFFALSE 13512
// begin if yourTeam = 3 then
13490: LD_VAR 0 3
13494: PUSH
13495: LD_INT 3
13497: EQUAL
13498: IFFALSE 13505
// enable ( mpWin ) else
13500: LD_INT 101
13502: ENABLE_MARKED
13503: GO 13512
// begin Multiplayer_Loose_Message ;
13505: CALL_OW 521
// enable ( mpLose ) ;
13509: LD_INT 102
13511: ENABLE_MARKED
// end ; end ; for i := 1 to 8 do
13512: LD_ADDR_VAR 0 1
13516: PUSH
13517: DOUBLE
13518: LD_INT 1
13520: DEC
13521: ST_TO_ADDR
13522: LD_INT 8
13524: PUSH
13525: FOR_TO
13526: IFFALSE 13651
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
13528: LD_EXP 7
13532: PUSH
13533: LD_VAR 0 1
13537: ARRAY
13538: IFFALSE 13551
13540: PUSH
13541: LD_VAR 0 1
13545: PPUSH
13546: CALL_OW 108
13550: AND
13551: IFFALSE 13565
13553: PUSH
13554: LD_VAR 0 1
13558: PUSH
13559: LD_OWVAR 2
13563: NONEQUAL
13564: AND
13565: IFFALSE 13649
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
13567: LD_EXP 8
13571: PUSH
13572: LD_VAR 0 1
13576: ARRAY
13577: NOT
13578: IFTRUE 13626
13580: PUSH
13581: LD_EXP 8
13585: PUSH
13586: LD_VAR 0 1
13590: ARRAY
13591: PUSH
13592: LD_EXP 8
13596: PUSH
13597: LD_OWVAR 2
13601: ARRAY
13602: NONEQUAL
13603: IFFALSE 13625
13605: PUSH
13606: LD_OWVAR 2
13610: PPUSH
13611: LD_VAR 0 1
13615: PPUSH
13616: CALL_OW 81
13620: PUSH
13621: LD_INT 1
13623: NONEQUAL
13624: AND
13625: OR
13626: IFFALSE 13649
// if HasPower ( i ) then
13628: LD_VAR 0 1
13632: PPUSH
13633: CALL 13710 0 1
13637: IFFALSE 13649
// begin canWin := false ;
13639: LD_ADDR_VAR 0 2
13643: PUSH
13644: LD_INT 0
13646: ST_TO_ADDR
// break ;
13647: GO 13651
// end ;
13649: GO 13525
13651: POP
13652: POP
// if canWin then
13653: LD_VAR 0 2
13657: IFFALSE 13664
// enable ( mpWin ) else
13659: LD_INT 101
13661: ENABLE_MARKED
13662: GO 13665
// enable ;
13664: ENABLE
// end ; end ;
13665: PPOPN 7
13667: END
// function CanWinLoose ; begin
13668: LD_INT 0
13670: PPUSH
// result := true ;
13671: LD_ADDR_VAR 0 1
13675: PUSH
13676: LD_INT 1
13678: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13679: CALL_OW 531
13683: IFFALSE 13695
13685: PUSH
13686: CALL_OW 519
13690: PUSH
13691: LD_INT 1
13693: GREATER
13694: AND
13695: IFFALSE 13705
// result := false ;
13697: LD_ADDR_VAR 0 1
13701: PUSH
13702: LD_INT 0
13704: ST_TO_ADDR
// end ;
13705: LD_VAR 0 1
13709: RET
// function HasPower ( i ) ; begin
13710: LD_INT 0
13712: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
13713: LD_ADDR_VAR 0 2
13717: PUSH
13718: LD_INT 22
13720: PUSH
13721: LD_VAR 0 1
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 2
13732: PUSH
13733: LD_INT 21
13735: PUSH
13736: LD_INT 1
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 33
13745: PUSH
13746: LD_INT 3
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: LD_INT 33
13755: PUSH
13756: LD_INT 5
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PPUSH
13773: CALL_OW 69
13777: ST_TO_ADDR
// end ; end_of_file
13778: LD_VAR 0 2
13782: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
13783: LD_EXP 39
13787: IFFALSE 13795
13789: PUSH
13790: CALL 14005 0 0
13794: AND
13795: IFFALSE 13803
13797: PUSH
13798: LD_OWVAR 4
13802: AND
13803: IFFALSE 14002
13805: GO 13807
13807: DISABLE
13808: LD_INT 0
13810: PPUSH
13811: PPUSH
// begin canWin := false ;
13812: LD_ADDR_VAR 0 2
13816: PUSH
13817: LD_INT 0
13819: ST_TO_ADDR
// if not HasPower ( your_side ) then
13820: LD_OWVAR 2
13824: PPUSH
13825: CALL 14047 0 1
13829: NOT
13830: IFFALSE 13841
// begin Multiplayer_Loose_Message ;
13832: CALL_OW 521
// enable ( mpLose ) ;
13836: LD_INT 102
13838: ENABLE_MARKED
// end else
13839: GO 14002
// begin canWin := true ;
13841: LD_ADDR_VAR 0 2
13845: PUSH
13846: LD_INT 1
13848: ST_TO_ADDR
// for i := 1 to 8 do
13849: LD_ADDR_VAR 0 1
13853: PUSH
13854: DOUBLE
13855: LD_INT 1
13857: DEC
13858: ST_TO_ADDR
13859: LD_INT 8
13861: PUSH
13862: FOR_TO
13863: IFFALSE 13988
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
13865: LD_EXP 7
13869: PUSH
13870: LD_VAR 0 1
13874: ARRAY
13875: IFFALSE 13888
13877: PUSH
13878: LD_VAR 0 1
13882: PPUSH
13883: CALL_OW 108
13887: AND
13888: IFFALSE 13902
13890: PUSH
13891: LD_VAR 0 1
13895: PUSH
13896: LD_OWVAR 2
13900: NONEQUAL
13901: AND
13902: IFFALSE 13986
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
13904: LD_EXP 8
13908: PUSH
13909: LD_VAR 0 1
13913: ARRAY
13914: NOT
13915: IFTRUE 13963
13917: PUSH
13918: LD_EXP 8
13922: PUSH
13923: LD_VAR 0 1
13927: ARRAY
13928: PUSH
13929: LD_EXP 8
13933: PUSH
13934: LD_OWVAR 2
13938: ARRAY
13939: NONEQUAL
13940: IFFALSE 13962
13942: PUSH
13943: LD_OWVAR 2
13947: PPUSH
13948: LD_VAR 0 1
13952: PPUSH
13953: CALL_OW 81
13957: PUSH
13958: LD_INT 1
13960: NONEQUAL
13961: AND
13962: OR
13963: IFFALSE 13986
// if HasPower ( i ) then
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL 14047 0 1
13974: IFFALSE 13986
// begin canWin := false ;
13976: LD_ADDR_VAR 0 2
13980: PUSH
13981: LD_INT 0
13983: ST_TO_ADDR
// break ;
13984: GO 13988
// end ;
13986: GO 13862
13988: POP
13989: POP
// if canWin then
13990: LD_VAR 0 2
13994: IFFALSE 14001
// enable ( mpWin ) else
13996: LD_INT 101
13998: ENABLE_MARKED
13999: GO 14002
// enable ;
14001: ENABLE
// end ; end ;
14002: PPOPN 2
14004: END
// function CanWinLoose ; begin
14005: LD_INT 0
14007: PPUSH
// result := true ;
14008: LD_ADDR_VAR 0 1
14012: PUSH
14013: LD_INT 1
14015: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
14016: CALL_OW 531
14020: IFFALSE 14032
14022: PUSH
14023: CALL_OW 519
14027: PUSH
14028: LD_INT 1
14030: GREATER
14031: AND
14032: IFFALSE 14042
// result := false ;
14034: LD_ADDR_VAR 0 1
14038: PUSH
14039: LD_INT 0
14041: ST_TO_ADDR
// end ;
14042: LD_VAR 0 1
14046: RET
// function HasPower ( i ) ; begin
14047: LD_INT 0
14049: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
14050: LD_ADDR_VAR 0 2
14054: PUSH
14055: LD_INT 22
14057: PUSH
14058: LD_VAR 0 1
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: PUSH
14067: LD_INT 2
14069: PUSH
14070: LD_INT 21
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 33
14082: PUSH
14083: LD_INT 3
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 33
14092: PUSH
14093: LD_INT 5
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PPUSH
14110: CALL_OW 69
14114: ST_TO_ADDR
// end ; end_of_file
14115: LD_VAR 0 2
14119: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
14120: LD_EXP 39
14124: IFFALSE 14167
14126: GO 14128
14128: DISABLE
14129: LD_INT 0
14131: PPUSH
// begin for i := 1 to 8 do
14132: LD_ADDR_VAR 0 1
14136: PUSH
14137: DOUBLE
14138: LD_INT 1
14140: DEC
14141: ST_TO_ADDR
14142: LD_INT 8
14144: PUSH
14145: FOR_TO
14146: IFFALSE 14165
// SetRestrict ( b_depot , i , state_disabled ) ;
14148: LD_INT 0
14150: PPUSH
14151: LD_VAR 0 1
14155: PPUSH
14156: LD_INT 0
14158: PPUSH
14159: CALL_OW 324
14163: GO 14145
14165: POP
14166: POP
// end ;
14167: PPOPN 1
14169: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
14170: LD_EXP 39
14174: IFFALSE 14182
14176: PUSH
14177: CALL 14392 0 0
14181: AND
14182: IFFALSE 14190
14184: PUSH
14185: LD_OWVAR 4
14189: AND
14190: IFFALSE 14389
14192: GO 14194
14194: DISABLE
14195: LD_INT 0
14197: PPUSH
14198: PPUSH
// begin canWin := false ;
14199: LD_ADDR_VAR 0 2
14203: PUSH
14204: LD_INT 0
14206: ST_TO_ADDR
// if not HasPower ( your_side ) then
14207: LD_OWVAR 2
14211: PPUSH
14212: CALL 14434 0 1
14216: NOT
14217: IFFALSE 14228
// begin Multiplayer_Loose_Message ;
14219: CALL_OW 521
// enable ( mpLose ) ;
14223: LD_INT 102
14225: ENABLE_MARKED
// end else
14226: GO 14389
// begin canWin := true ;
14228: LD_ADDR_VAR 0 2
14232: PUSH
14233: LD_INT 1
14235: ST_TO_ADDR
// for i := 1 to 8 do
14236: LD_ADDR_VAR 0 1
14240: PUSH
14241: DOUBLE
14242: LD_INT 1
14244: DEC
14245: ST_TO_ADDR
14246: LD_INT 8
14248: PUSH
14249: FOR_TO
14250: IFFALSE 14375
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
14252: LD_EXP 7
14256: PUSH
14257: LD_VAR 0 1
14261: ARRAY
14262: IFFALSE 14275
14264: PUSH
14265: LD_VAR 0 1
14269: PPUSH
14270: CALL_OW 108
14274: AND
14275: IFFALSE 14289
14277: PUSH
14278: LD_VAR 0 1
14282: PUSH
14283: LD_OWVAR 2
14287: NONEQUAL
14288: AND
14289: IFFALSE 14373
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
14291: LD_EXP 8
14295: PUSH
14296: LD_VAR 0 1
14300: ARRAY
14301: NOT
14302: IFTRUE 14350
14304: PUSH
14305: LD_EXP 8
14309: PUSH
14310: LD_VAR 0 1
14314: ARRAY
14315: PUSH
14316: LD_EXP 8
14320: PUSH
14321: LD_OWVAR 2
14325: ARRAY
14326: NONEQUAL
14327: IFFALSE 14349
14329: PUSH
14330: LD_OWVAR 2
14334: PPUSH
14335: LD_VAR 0 1
14339: PPUSH
14340: CALL_OW 81
14344: PUSH
14345: LD_INT 1
14347: NONEQUAL
14348: AND
14349: OR
14350: IFFALSE 14373
// if HasPower ( i ) then
14352: LD_VAR 0 1
14356: PPUSH
14357: CALL 14434 0 1
14361: IFFALSE 14373
// begin canWin := false ;
14363: LD_ADDR_VAR 0 2
14367: PUSH
14368: LD_INT 0
14370: ST_TO_ADDR
// break ;
14371: GO 14375
// end ;
14373: GO 14249
14375: POP
14376: POP
// if canWin then
14377: LD_VAR 0 2
14381: IFFALSE 14388
// enable ( mpWin ) else
14383: LD_INT 101
14385: ENABLE_MARKED
14386: GO 14389
// enable ;
14388: ENABLE
// end ; end ;
14389: PPOPN 2
14391: END
// function CanWinLoose ; begin
14392: LD_INT 0
14394: PPUSH
// result := true ;
14395: LD_ADDR_VAR 0 1
14399: PUSH
14400: LD_INT 1
14402: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
14403: CALL_OW 531
14407: IFFALSE 14419
14409: PUSH
14410: CALL_OW 519
14414: PUSH
14415: LD_INT 1
14417: GREATER
14418: AND
14419: IFFALSE 14429
// result := false ;
14421: LD_ADDR_VAR 0 1
14425: PUSH
14426: LD_INT 0
14428: ST_TO_ADDR
// end ;
14429: LD_VAR 0 1
14433: RET
// function HasPower ( i ) ; begin
14434: LD_INT 0
14436: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
14437: LD_INT 22
14439: PUSH
14440: LD_VAR 0 1
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 2
14451: PUSH
14452: LD_INT 30
14454: PUSH
14455: LD_INT 0
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: LD_INT 30
14464: PUSH
14465: LD_INT 1
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: LIST
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PPUSH
14481: CALL_OW 69
14485: NOT
14486: IFFALSE 14490
// exit ;
14488: GO 14555
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
14490: LD_ADDR_VAR 0 2
14494: PUSH
14495: LD_INT 22
14497: PUSH
14498: LD_VAR 0 1
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: LD_INT 2
14509: PUSH
14510: LD_INT 21
14512: PUSH
14513: LD_INT 1
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 33
14522: PUSH
14523: LD_INT 3
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: LD_INT 33
14532: PUSH
14533: LD_INT 5
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PPUSH
14550: CALL_OW 69
14554: ST_TO_ADDR
// end ; end_of_file
14555: LD_VAR 0 2
14559: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
14560: LD_EXP 39
14564: IFFALSE 14905
14566: GO 14568
14568: DISABLE
14569: LD_INT 0
14571: PPUSH
14572: PPUSH
14573: PPUSH
// begin mpKingPoints := [ ] ;
14574: LD_ADDR_EXP 50
14578: PUSH
14579: EMPTY
14580: ST_TO_ADDR
// if mpTeamGame then
14581: LD_EXP 11
14585: IFFALSE 14639
// begin for i := 1 to Count ( mpTeams ) do
14587: LD_ADDR_VAR 0 1
14591: PUSH
14592: DOUBLE
14593: LD_INT 1
14595: DEC
14596: ST_TO_ADDR
14597: LD_EXP 10
14601: PPUSH
14602: CALL 18465 0 1
14606: PUSH
14607: FOR_TO
14608: IFFALSE 14635
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
14610: LD_ADDR_EXP 50
14614: PUSH
14615: LD_EXP 50
14619: PPUSH
14620: LD_VAR 0 1
14624: PPUSH
14625: LD_INT 0
14627: PPUSH
14628: CALL_OW 1
14632: ST_TO_ADDR
14633: GO 14607
14635: POP
14636: POP
// end else
14637: GO 14682
// begin for i := 1 to 8 do
14639: LD_ADDR_VAR 0 1
14643: PUSH
14644: DOUBLE
14645: LD_INT 1
14647: DEC
14648: ST_TO_ADDR
14649: LD_INT 8
14651: PUSH
14652: FOR_TO
14653: IFFALSE 14680
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
14655: LD_ADDR_EXP 50
14659: PUSH
14660: LD_EXP 50
14664: PPUSH
14665: LD_VAR 0 1
14669: PPUSH
14670: LD_INT 0
14672: PPUSH
14673: CALL_OW 1
14677: ST_TO_ADDR
14678: GO 14652
14680: POP
14681: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
14682: LD_ADDR_VAR 0 3
14686: PUSH
14687: LD_EXP 2
14691: PPUSH
14692: LD_INT 0
14694: PPUSH
14695: CALL_OW 517
14699: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
14700: LD_ADDR_VAR 0 1
14704: PUSH
14705: DOUBLE
14706: LD_INT 1
14708: DEC
14709: ST_TO_ADDR
14710: LD_VAR 0 3
14714: PUSH
14715: LD_INT 1
14717: ARRAY
14718: PUSH
14719: FOR_TO
14720: IFFALSE 14787
// for j := 1 to 8 do
14722: LD_ADDR_VAR 0 2
14726: PUSH
14727: DOUBLE
14728: LD_INT 1
14730: DEC
14731: ST_TO_ADDR
14732: LD_INT 8
14734: PUSH
14735: FOR_TO
14736: IFFALSE 14783
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
14738: LD_VAR 0 3
14742: PUSH
14743: LD_INT 1
14745: ARRAY
14746: PUSH
14747: LD_VAR 0 1
14751: ARRAY
14752: PPUSH
14753: LD_VAR 0 3
14757: PUSH
14758: LD_INT 2
14760: ARRAY
14761: PUSH
14762: LD_VAR 0 1
14766: ARRAY
14767: PPUSH
14768: LD_VAR 0 2
14772: PPUSH
14773: LD_INT 12
14775: NEG
14776: PPUSH
14777: CALL_OW 330
14781: GO 14735
14783: POP
14784: POP
14785: GO 14719
14787: POP
14788: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
14789: LD_EXP 34
14793: PPUSH
14794: LD_INT 1
14796: PPUSH
14797: CALL_OW 424
// UpdateCounter ;
14801: CALL 15411 0 0
// repeat wait ( 0 0$1 ) ;
14805: LD_INT 35
14807: PPUSH
14808: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14812: LD_ADDR_VAR 0 3
14816: PUSH
14817: LD_EXP 34
14821: PPUSH
14822: LD_INT 3
14824: PUSH
14825: LD_INT 57
14827: PUSH
14828: EMPTY
14829: LIST
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: LD_INT 50
14837: PUSH
14838: EMPTY
14839: LIST
14840: PUSH
14841: LD_INT 2
14843: PUSH
14844: LD_INT 30
14846: PUSH
14847: LD_INT 0
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PUSH
14854: LD_INT 30
14856: PUSH
14857: LD_INT 1
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: LIST
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: LIST
14873: PPUSH
14874: CALL_OW 70
14878: ST_TO_ADDR
// if not tmp then
14879: LD_VAR 0 3
14883: NOT
14884: IFFALSE 14888
// continue ;
14886: GO 14805
// AddPoints ( tmp ) ;
14888: LD_VAR 0 3
14892: PPUSH
14893: CALL 15089 0 1
// UpdateCounter ;
14897: CALL 15411 0 0
// until false ;
14901: LD_INT 0
14903: IFFALSE 14805
// end ;
14905: PPOPN 3
14907: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
14908: LD_EXP 39
14912: IFFALSE 14920
14914: PUSH
14915: LD_EXP 37
14919: AND
14920: IFFALSE 15086
14922: GO 14924
14924: DISABLE
14925: LD_INT 0
14927: PPUSH
14928: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
14929: LD_ADDR_VAR 0 2
14933: PUSH
14934: LD_EXP 2
14938: PPUSH
14939: LD_INT 0
14941: PPUSH
14942: CALL_OW 517
14946: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
14947: LD_ADDR_VAR 0 1
14951: PUSH
14952: DOUBLE
14953: LD_INT 1
14955: DEC
14956: ST_TO_ADDR
14957: LD_VAR 0 2
14961: PUSH
14962: LD_INT 1
14964: ARRAY
14965: PUSH
14966: FOR_TO
14967: IFFALSE 15008
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
14969: LD_VAR 0 2
14973: PUSH
14974: LD_INT 1
14976: ARRAY
14977: PUSH
14978: LD_VAR 0 1
14982: ARRAY
14983: PPUSH
14984: LD_VAR 0 2
14988: PUSH
14989: LD_INT 2
14991: ARRAY
14992: PUSH
14993: LD_VAR 0 1
14997: ARRAY
14998: PPUSH
14999: LD_INT 125
15001: PPUSH
15002: CALL_OW 495
15006: GO 14966
15008: POP
15009: POP
// repeat wait ( mpEmissions ) ;
15010: LD_EXP 37
15014: PPUSH
15015: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
15019: LD_ADDR_VAR 0 1
15023: PUSH
15024: DOUBLE
15025: LD_INT 1
15027: DEC
15028: ST_TO_ADDR
15029: LD_VAR 0 2
15033: PUSH
15034: LD_INT 1
15036: ARRAY
15037: PUSH
15038: FOR_TO
15039: IFFALSE 15080
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
15041: LD_VAR 0 2
15045: PUSH
15046: LD_INT 1
15048: ARRAY
15049: PUSH
15050: LD_VAR 0 1
15054: ARRAY
15055: PPUSH
15056: LD_VAR 0 2
15060: PUSH
15061: LD_INT 2
15063: ARRAY
15064: PUSH
15065: LD_VAR 0 1
15069: ARRAY
15070: PPUSH
15071: LD_INT 15
15073: PPUSH
15074: CALL_OW 495
15078: GO 15038
15080: POP
15081: POP
// until false ;
15082: LD_INT 0
15084: IFFALSE 15010
// end ;
15086: PPOPN 2
15088: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
15089: LD_INT 0
15091: PPUSH
15092: PPUSH
15093: PPUSH
15094: PPUSH
15095: PPUSH
// if mpTeamGame then
15096: LD_EXP 11
15100: IFFALSE 15297
// begin first := depots [ 1 ] ;
15102: LD_ADDR_VAR 0 4
15106: PUSH
15107: LD_VAR 0 1
15111: PUSH
15112: LD_INT 1
15114: ARRAY
15115: ST_TO_ADDR
// side := GetSide ( first ) ;
15116: LD_ADDR_VAR 0 6
15120: PUSH
15121: LD_VAR 0 4
15125: PPUSH
15126: CALL_OW 255
15130: ST_TO_ADDR
// for i := 1 to mpTeams do
15131: LD_ADDR_VAR 0 3
15135: PUSH
15136: DOUBLE
15137: LD_INT 1
15139: DEC
15140: ST_TO_ADDR
15141: LD_EXP 10
15145: PUSH
15146: FOR_TO
15147: IFFALSE 15181
// if side in mpTeams [ i ] then
15149: LD_VAR 0 6
15153: PUSH
15154: LD_EXP 10
15158: PUSH
15159: LD_VAR 0 3
15163: ARRAY
15164: IN
15165: IFFALSE 15179
// begin team := i ;
15167: LD_ADDR_VAR 0 5
15171: PUSH
15172: LD_VAR 0 3
15176: ST_TO_ADDR
// break ;
15177: GO 15181
// end ;
15179: GO 15146
15181: POP
15182: POP
// if not team then
15183: LD_VAR 0 5
15187: NOT
15188: IFFALSE 15192
// exit ;
15190: GO 15406
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
15192: LD_EXP 34
15196: PPUSH
15197: LD_INT 81
15199: PUSH
15200: LD_VAR 0 6
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PPUSH
15209: CALL_OW 70
15213: IFFALSE 15217
// exit ;
15215: GO 15406
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
15217: LD_ADDR_EXP 50
15221: PUSH
15222: LD_EXP 50
15226: PPUSH
15227: LD_VAR 0 5
15231: PPUSH
15232: LD_EXP 50
15236: PUSH
15237: LD_VAR 0 5
15241: ARRAY
15242: PUSH
15243: LD_INT 1
15245: PLUS
15246: PPUSH
15247: CALL_OW 1
15251: ST_TO_ADDR
// for i in mpTeams [ team ] do
15252: LD_ADDR_VAR 0 3
15256: PUSH
15257: LD_EXP 10
15261: PUSH
15262: LD_VAR 0 5
15266: ARRAY
15267: PUSH
15268: FOR_IN
15269: IFFALSE 15293
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
15271: LD_VAR 0 3
15275: PPUSH
15276: LD_EXP 50
15280: PUSH
15281: LD_VAR 0 5
15285: ARRAY
15286: PPUSH
15287: CALL_OW 506
15291: GO 15268
15293: POP
15294: POP
// end else
15295: GO 15406
// begin first := depots [ 1 ] ;
15297: LD_ADDR_VAR 0 4
15301: PUSH
15302: LD_VAR 0 1
15306: PUSH
15307: LD_INT 1
15309: ARRAY
15310: ST_TO_ADDR
// side := GetSide ( first ) ;
15311: LD_ADDR_VAR 0 6
15315: PUSH
15316: LD_VAR 0 4
15320: PPUSH
15321: CALL_OW 255
15325: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
15326: LD_EXP 34
15330: PPUSH
15331: LD_INT 81
15333: PUSH
15334: LD_VAR 0 6
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: PPUSH
15343: CALL_OW 70
15347: IFFALSE 15351
// exit ;
15349: GO 15406
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
15351: LD_ADDR_EXP 50
15355: PUSH
15356: LD_EXP 50
15360: PPUSH
15361: LD_VAR 0 6
15365: PPUSH
15366: LD_EXP 50
15370: PUSH
15371: LD_VAR 0 6
15375: ARRAY
15376: PUSH
15377: LD_INT 1
15379: PLUS
15380: PPUSH
15381: CALL_OW 1
15385: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
15386: LD_VAR 0 6
15390: PPUSH
15391: LD_EXP 50
15395: PUSH
15396: LD_VAR 0 6
15400: ARRAY
15401: PPUSH
15402: CALL_OW 506
// end ; end ;
15406: LD_VAR 0 2
15410: RET
// function UpdateCounter ; var i ; begin
15411: LD_INT 0
15413: PPUSH
15414: PPUSH
// result := [ ] ;
15415: LD_ADDR_VAR 0 1
15419: PUSH
15420: EMPTY
15421: ST_TO_ADDR
// if mpTeamGame then
15422: LD_EXP 11
15426: IFFALSE 15493
// begin for i := 1 to mpTeams do
15428: LD_ADDR_VAR 0 2
15432: PUSH
15433: DOUBLE
15434: LD_INT 1
15436: DEC
15437: ST_TO_ADDR
15438: LD_EXP 10
15442: PUSH
15443: FOR_TO
15444: IFFALSE 15489
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
15446: LD_ADDR_VAR 0 1
15450: PUSH
15451: LD_VAR 0 1
15455: PUSH
15456: LD_STRING #KingoftheHill-Team
15458: PUSH
15459: LD_VAR 0 2
15463: PUSH
15464: LD_EXP 50
15468: PUSH
15469: LD_VAR 0 2
15473: ARRAY
15474: PUSH
15475: LD_EXP 35
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: ADD
15486: ST_TO_ADDR
15487: GO 15443
15489: POP
15490: POP
// end else
15491: GO 15566
// begin for i := 1 to 8 do
15493: LD_ADDR_VAR 0 2
15497: PUSH
15498: DOUBLE
15499: LD_INT 1
15501: DEC
15502: ST_TO_ADDR
15503: LD_INT 8
15505: PUSH
15506: FOR_TO
15507: IFFALSE 15564
// if mpSidePositions [ i ] then
15509: LD_EXP 7
15513: PUSH
15514: LD_VAR 0 2
15518: ARRAY
15519: IFFALSE 15562
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
15521: LD_ADDR_VAR 0 1
15525: PUSH
15526: LD_VAR 0 1
15530: PUSH
15531: LD_STRING #KingoftheHill-Player
15533: PUSH
15534: LD_VAR 0 2
15538: PUSH
15539: LD_EXP 50
15543: PUSH
15544: LD_VAR 0 2
15548: ARRAY
15549: PUSH
15550: LD_EXP 35
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: ADD
15561: ST_TO_ADDR
15562: GO 15506
15564: POP
15565: POP
// end ; mpDisplayStrings := result ;
15566: LD_ADDR_EXP 38
15570: PUSH
15571: LD_VAR 0 1
15575: ST_TO_ADDR
// end ;
15576: LD_VAR 0 1
15580: RET
// export function HowMuchPointsKing ( side ) ; begin
15581: LD_INT 0
15583: PPUSH
// result := HowMuchPoints ( side ) ;
15584: LD_ADDR_VAR 0 2
15588: PUSH
15589: LD_VAR 0 1
15593: PPUSH
15594: CALL 15604 0 1
15598: ST_TO_ADDR
// end ;
15599: LD_VAR 0 2
15603: RET
// function HowMuchPoints ( side ) ; var i ; begin
15604: LD_INT 0
15606: PPUSH
15607: PPUSH
// if mpTeamGame then
15608: LD_EXP 11
15612: IFFALSE 15681
// begin for i := 1 to Count ( mpTeams ) do
15614: LD_ADDR_VAR 0 3
15618: PUSH
15619: DOUBLE
15620: LD_INT 1
15622: DEC
15623: ST_TO_ADDR
15624: LD_EXP 10
15628: PPUSH
15629: CALL 18465 0 1
15633: PUSH
15634: FOR_TO
15635: IFFALSE 15677
// begin if side in mpTeams [ i ] then
15637: LD_VAR 0 1
15641: PUSH
15642: LD_EXP 10
15646: PUSH
15647: LD_VAR 0 3
15651: ARRAY
15652: IN
15653: IFFALSE 15675
// begin result := mpKingPoints [ i ] ;
15655: LD_ADDR_VAR 0 2
15659: PUSH
15660: LD_EXP 50
15664: PUSH
15665: LD_VAR 0 3
15669: ARRAY
15670: ST_TO_ADDR
// exit ;
15671: POP
15672: POP
15673: GO 15697
// end ; end ;
15675: GO 15634
15677: POP
15678: POP
// end else
15679: GO 15697
// result := mpKingPoints [ side ] ;
15681: LD_ADDR_VAR 0 2
15685: PUSH
15686: LD_EXP 50
15690: PUSH
15691: LD_VAR 0 1
15695: ARRAY
15696: ST_TO_ADDR
// end ;
15697: LD_VAR 0 2
15701: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
15702: LD_EXP 39
15706: IFFALSE 15714
15708: PUSH
15709: CALL 16126 0 0
15713: AND
15714: IFFALSE 15722
15716: PUSH
15717: LD_OWVAR 4
15721: AND
15722: IFFALSE 15975
15724: GO 15726
15726: DISABLE
15727: LD_INT 0
15729: PPUSH
15730: PPUSH
// begin canWin := false ;
15731: LD_ADDR_VAR 0 2
15735: PUSH
15736: LD_INT 0
15738: ST_TO_ADDR
// if not HasPower ( your_side ) then
15739: LD_OWVAR 2
15743: PPUSH
15744: CALL 16168 0 1
15748: NOT
15749: IFFALSE 15760
// begin Multiplayer_Loose_Message ;
15751: CALL_OW 521
// enable ( mpLose ) ;
15755: LD_INT 102
15757: ENABLE_MARKED
// end else
15758: GO 15975
// begin if not EnemiesInGame then
15760: CALL 15978 0 0
15764: NOT
15765: IFFALSE 15772
// begin enable ( mpWin ) ;
15767: LD_INT 101
15769: ENABLE_MARKED
// exit ;
15770: GO 15975
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
15772: LD_ADDR_VAR 0 2
15776: PUSH
15777: LD_OWVAR 2
15781: PPUSH
15782: CALL 15604 0 1
15786: PUSH
15787: LD_EXP 35
15791: GREATEREQUAL
15792: IFFALSE 15805
15794: PUSH
15795: LD_OWVAR 2
15799: PPUSH
15800: CALL 16168 0 1
15804: AND
15805: ST_TO_ADDR
// for i := 1 to 8 do
15806: LD_ADDR_VAR 0 1
15810: PUSH
15811: DOUBLE
15812: LD_INT 1
15814: DEC
15815: ST_TO_ADDR
15816: LD_INT 8
15818: PUSH
15819: FOR_TO
15820: IFFALSE 15961
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
15822: LD_EXP 7
15826: PUSH
15827: LD_VAR 0 1
15831: ARRAY
15832: IFFALSE 15845
15834: PUSH
15835: LD_VAR 0 1
15839: PPUSH
15840: CALL_OW 108
15844: AND
15845: IFFALSE 15859
15847: PUSH
15848: LD_VAR 0 1
15852: PUSH
15853: LD_OWVAR 2
15857: NONEQUAL
15858: AND
15859: IFFALSE 15959
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
15861: LD_EXP 8
15865: PUSH
15866: LD_VAR 0 1
15870: ARRAY
15871: NOT
15872: IFTRUE 15920
15874: PUSH
15875: LD_EXP 8
15879: PUSH
15880: LD_VAR 0 1
15884: ARRAY
15885: PUSH
15886: LD_EXP 8
15890: PUSH
15891: LD_OWVAR 2
15895: ARRAY
15896: NONEQUAL
15897: IFFALSE 15919
15899: PUSH
15900: LD_OWVAR 2
15904: PPUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 81
15914: PUSH
15915: LD_INT 1
15917: NONEQUAL
15918: AND
15919: OR
15920: IFFALSE 15959
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
15922: LD_VAR 0 1
15926: PPUSH
15927: CALL 15604 0 1
15931: PUSH
15932: LD_EXP 35
15936: GREATEREQUAL
15937: IFFALSE 15950
15939: PUSH
15940: LD_VAR 0 1
15944: PPUSH
15945: CALL 16168 0 1
15949: AND
15950: IFFALSE 15959
// begin enable ( mpLose ) ;
15952: LD_INT 102
15954: ENABLE_MARKED
// exit ;
15955: POP
15956: POP
15957: GO 15975
// end ;
15959: GO 15819
15961: POP
15962: POP
// if canWin then
15963: LD_VAR 0 2
15967: IFFALSE 15974
// enable ( mpWin ) else
15969: LD_INT 101
15971: ENABLE_MARKED
15972: GO 15975
// enable ;
15974: ENABLE
// end ; end ;
15975: PPOPN 2
15977: END
// function EnemiesInGame ; var i ; begin
15978: LD_INT 0
15980: PPUSH
15981: PPUSH
// result := false ;
15982: LD_ADDR_VAR 0 1
15986: PUSH
15987: LD_INT 0
15989: ST_TO_ADDR
// for i := 1 to 8 do
15990: LD_ADDR_VAR 0 2
15994: PUSH
15995: DOUBLE
15996: LD_INT 1
15998: DEC
15999: ST_TO_ADDR
16000: LD_INT 8
16002: PUSH
16003: FOR_TO
16004: IFFALSE 16119
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
16006: LD_VAR 0 2
16010: PUSH
16011: LD_OWVAR 2
16015: NONEQUAL
16016: IFFALSE 16029
16018: PUSH
16019: LD_VAR 0 2
16023: PPUSH
16024: CALL 16168 0 1
16028: AND
16029: IFFALSE 16042
16031: PUSH
16032: LD_VAR 0 2
16036: PPUSH
16037: CALL_OW 108
16041: AND
16042: IFFALSE 16117
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
16044: LD_EXP 8
16048: PUSH
16049: LD_VAR 0 2
16053: ARRAY
16054: NOT
16055: IFTRUE 16103
16057: PUSH
16058: LD_EXP 8
16062: PUSH
16063: LD_VAR 0 2
16067: ARRAY
16068: PUSH
16069: LD_EXP 8
16073: PUSH
16074: LD_OWVAR 2
16078: ARRAY
16079: NONEQUAL
16080: IFFALSE 16102
16082: PUSH
16083: LD_OWVAR 2
16087: PPUSH
16088: LD_VAR 0 2
16092: PPUSH
16093: CALL_OW 81
16097: PUSH
16098: LD_INT 1
16100: NONEQUAL
16101: AND
16102: OR
16103: IFFALSE 16117
// begin result := true ;
16105: LD_ADDR_VAR 0 1
16109: PUSH
16110: LD_INT 1
16112: ST_TO_ADDR
// exit ;
16113: POP
16114: POP
16115: GO 16121
// end ;
16117: GO 16003
16119: POP
16120: POP
// end ;
16121: LD_VAR 0 1
16125: RET
// function CanWinLoose ; begin
16126: LD_INT 0
16128: PPUSH
// result := true ;
16129: LD_ADDR_VAR 0 1
16133: PUSH
16134: LD_INT 1
16136: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16137: CALL_OW 531
16141: IFFALSE 16153
16143: PUSH
16144: CALL_OW 519
16148: PUSH
16149: LD_INT 1
16151: GREATER
16152: AND
16153: IFFALSE 16163
// result := false ;
16155: LD_ADDR_VAR 0 1
16159: PUSH
16160: LD_INT 0
16162: ST_TO_ADDR
// end ;
16163: LD_VAR 0 1
16167: RET
// function HasPower ( i ) ; begin
16168: LD_INT 0
16170: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
16171: LD_ADDR_VAR 0 2
16175: PUSH
16176: LD_INT 22
16178: PUSH
16179: LD_VAR 0 1
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 2
16190: PUSH
16191: LD_INT 21
16193: PUSH
16194: LD_INT 1
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 33
16203: PUSH
16204: LD_INT 3
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 33
16213: PUSH
16214: LD_INT 5
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PPUSH
16231: CALL_OW 69
16235: ST_TO_ADDR
// end ; end_of_file
16236: LD_VAR 0 2
16240: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16241: LD_INT 0
16243: PPUSH
16244: PPUSH
// if exist_mode then
16245: LD_VAR 0 2
16249: IFFALSE 16295
// begin unit := CreateCharacter ( prefix & ident ) ;
16251: LD_ADDR_VAR 0 5
16255: PUSH
16256: LD_VAR 0 3
16260: PUSH
16261: LD_VAR 0 1
16265: STR
16266: PPUSH
16267: CALL_OW 34
16271: ST_TO_ADDR
// if unit then
16272: LD_VAR 0 5
16276: IFFALSE 16293
// DeleteCharacters ( prefix & ident ) ;
16278: LD_VAR 0 3
16282: PUSH
16283: LD_VAR 0 1
16287: STR
16288: PPUSH
16289: CALL_OW 40
// end else
16293: GO 16310
// unit := NewCharacter ( ident ) ;
16295: LD_ADDR_VAR 0 5
16299: PUSH
16300: LD_VAR 0 1
16304: PPUSH
16305: CALL_OW 25
16309: ST_TO_ADDR
// result := unit ;
16310: LD_ADDR_VAR 0 4
16314: PUSH
16315: LD_VAR 0 5
16319: ST_TO_ADDR
// end ;
16320: LD_VAR 0 4
16324: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
16325: LD_INT 0
16327: PPUSH
16328: PPUSH
// if exist_mode then
16329: LD_VAR 0 2
16333: IFFALSE 16358
// unit := CreateCharacter ( prefix & ident ) else
16335: LD_ADDR_VAR 0 5
16339: PUSH
16340: LD_VAR 0 3
16344: PUSH
16345: LD_VAR 0 1
16349: STR
16350: PPUSH
16351: CALL_OW 34
16355: ST_TO_ADDR
16356: GO 16373
// unit := NewCharacter ( ident ) ;
16358: LD_ADDR_VAR 0 5
16362: PUSH
16363: LD_VAR 0 1
16367: PPUSH
16368: CALL_OW 25
16372: ST_TO_ADDR
// result := unit ;
16373: LD_ADDR_VAR 0 4
16377: PUSH
16378: LD_VAR 0 5
16382: ST_TO_ADDR
// end ;
16383: LD_VAR 0 4
16387: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16388: LD_INT 0
16390: PPUSH
16391: PPUSH
// if not side or not nation then
16392: LD_VAR 0 1
16396: NOT
16397: IFTRUE 16406
16399: PUSH
16400: LD_VAR 0 2
16404: NOT
16405: OR
16406: IFFALSE 16410
// exit ;
16408: GO 17204
// case nation of nation_american :
16410: LD_VAR 0 2
16414: PUSH
16415: LD_INT 1
16417: DOUBLE
16418: EQUAL
16419: IFTRUE 16423
16421: GO 16645
16423: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
16424: LD_ADDR_VAR 0 4
16428: PUSH
16429: LD_INT 35
16431: PUSH
16432: LD_INT 45
16434: PUSH
16435: LD_INT 46
16437: PUSH
16438: LD_INT 47
16440: PUSH
16441: LD_INT 82
16443: PUSH
16444: LD_INT 83
16446: PUSH
16447: LD_INT 84
16449: PUSH
16450: LD_INT 85
16452: PUSH
16453: LD_INT 86
16455: PUSH
16456: LD_INT 1
16458: PUSH
16459: LD_INT 2
16461: PUSH
16462: LD_INT 6
16464: PUSH
16465: LD_INT 15
16467: PUSH
16468: LD_INT 16
16470: PUSH
16471: LD_INT 7
16473: PUSH
16474: LD_INT 12
16476: PUSH
16477: LD_INT 13
16479: PUSH
16480: LD_INT 10
16482: PUSH
16483: LD_INT 14
16485: PUSH
16486: LD_INT 20
16488: PUSH
16489: LD_INT 21
16491: PUSH
16492: LD_INT 22
16494: PUSH
16495: LD_INT 25
16497: PUSH
16498: LD_INT 32
16500: PUSH
16501: LD_INT 27
16503: PUSH
16504: LD_INT 36
16506: PUSH
16507: LD_INT 69
16509: PUSH
16510: LD_INT 39
16512: PUSH
16513: LD_INT 34
16515: PUSH
16516: LD_INT 40
16518: PUSH
16519: LD_INT 48
16521: PUSH
16522: LD_INT 49
16524: PUSH
16525: LD_INT 50
16527: PUSH
16528: LD_INT 51
16530: PUSH
16531: LD_INT 52
16533: PUSH
16534: LD_INT 53
16536: PUSH
16537: LD_INT 54
16539: PUSH
16540: LD_INT 55
16542: PUSH
16543: LD_INT 56
16545: PUSH
16546: LD_INT 57
16548: PUSH
16549: LD_INT 58
16551: PUSH
16552: LD_INT 59
16554: PUSH
16555: LD_INT 60
16557: PUSH
16558: LD_INT 61
16560: PUSH
16561: LD_INT 62
16563: PUSH
16564: LD_INT 80
16566: PUSH
16567: LD_INT 82
16569: PUSH
16570: LD_INT 83
16572: PUSH
16573: LD_INT 84
16575: PUSH
16576: LD_INT 85
16578: PUSH
16579: LD_INT 86
16581: PUSH
16582: LD_INT 90
16584: PUSH
16585: LD_INT 93
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: ST_TO_ADDR
16643: GO 17126
16645: LD_INT 2
16647: DOUBLE
16648: EQUAL
16649: IFTRUE 16653
16651: GO 16887
16653: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
16654: LD_ADDR_VAR 0 4
16658: PUSH
16659: LD_INT 35
16661: PUSH
16662: LD_INT 45
16664: PUSH
16665: LD_INT 46
16667: PUSH
16668: LD_INT 47
16670: PUSH
16671: LD_INT 82
16673: PUSH
16674: LD_INT 83
16676: PUSH
16677: LD_INT 84
16679: PUSH
16680: LD_INT 85
16682: PUSH
16683: LD_INT 87
16685: PUSH
16686: LD_INT 70
16688: PUSH
16689: LD_INT 1
16691: PUSH
16692: LD_INT 11
16694: PUSH
16695: LD_INT 3
16697: PUSH
16698: LD_INT 4
16700: PUSH
16701: LD_INT 5
16703: PUSH
16704: LD_INT 6
16706: PUSH
16707: LD_INT 15
16709: PUSH
16710: LD_INT 18
16712: PUSH
16713: LD_INT 7
16715: PUSH
16716: LD_INT 17
16718: PUSH
16719: LD_INT 8
16721: PUSH
16722: LD_INT 20
16724: PUSH
16725: LD_INT 21
16727: PUSH
16728: LD_INT 22
16730: PUSH
16731: LD_INT 72
16733: PUSH
16734: LD_INT 26
16736: PUSH
16737: LD_INT 69
16739: PUSH
16740: LD_INT 39
16742: PUSH
16743: LD_INT 40
16745: PUSH
16746: LD_INT 41
16748: PUSH
16749: LD_INT 42
16751: PUSH
16752: LD_INT 43
16754: PUSH
16755: LD_INT 48
16757: PUSH
16758: LD_INT 49
16760: PUSH
16761: LD_INT 50
16763: PUSH
16764: LD_INT 51
16766: PUSH
16767: LD_INT 52
16769: PUSH
16770: LD_INT 53
16772: PUSH
16773: LD_INT 54
16775: PUSH
16776: LD_INT 55
16778: PUSH
16779: LD_INT 56
16781: PUSH
16782: LD_INT 60
16784: PUSH
16785: LD_INT 61
16787: PUSH
16788: LD_INT 62
16790: PUSH
16791: LD_INT 66
16793: PUSH
16794: LD_INT 67
16796: PUSH
16797: LD_INT 68
16799: PUSH
16800: LD_INT 81
16802: PUSH
16803: LD_INT 82
16805: PUSH
16806: LD_INT 83
16808: PUSH
16809: LD_INT 84
16811: PUSH
16812: LD_INT 85
16814: PUSH
16815: LD_INT 87
16817: PUSH
16818: LD_INT 88
16820: PUSH
16821: LD_INT 92
16823: PUSH
16824: LD_INT 94
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: ST_TO_ADDR
16885: GO 17126
16887: LD_INT 3
16889: DOUBLE
16890: EQUAL
16891: IFTRUE 16895
16893: GO 17125
16895: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
16896: LD_ADDR_VAR 0 4
16900: PUSH
16901: LD_INT 46
16903: PUSH
16904: LD_INT 47
16906: PUSH
16907: LD_INT 1
16909: PUSH
16910: LD_INT 2
16912: PUSH
16913: LD_INT 82
16915: PUSH
16916: LD_INT 83
16918: PUSH
16919: LD_INT 84
16921: PUSH
16922: LD_INT 85
16924: PUSH
16925: LD_INT 86
16927: PUSH
16928: LD_INT 11
16930: PUSH
16931: LD_INT 9
16933: PUSH
16934: LD_INT 20
16936: PUSH
16937: LD_INT 19
16939: PUSH
16940: LD_INT 21
16942: PUSH
16943: LD_INT 24
16945: PUSH
16946: LD_INT 22
16948: PUSH
16949: LD_INT 25
16951: PUSH
16952: LD_INT 28
16954: PUSH
16955: LD_INT 29
16957: PUSH
16958: LD_INT 30
16960: PUSH
16961: LD_INT 31
16963: PUSH
16964: LD_INT 37
16966: PUSH
16967: LD_INT 38
16969: PUSH
16970: LD_INT 32
16972: PUSH
16973: LD_INT 27
16975: PUSH
16976: LD_INT 33
16978: PUSH
16979: LD_INT 69
16981: PUSH
16982: LD_INT 39
16984: PUSH
16985: LD_INT 34
16987: PUSH
16988: LD_INT 40
16990: PUSH
16991: LD_INT 71
16993: PUSH
16994: LD_INT 23
16996: PUSH
16997: LD_INT 44
16999: PUSH
17000: LD_INT 48
17002: PUSH
17003: LD_INT 49
17005: PUSH
17006: LD_INT 50
17008: PUSH
17009: LD_INT 51
17011: PUSH
17012: LD_INT 52
17014: PUSH
17015: LD_INT 53
17017: PUSH
17018: LD_INT 54
17020: PUSH
17021: LD_INT 55
17023: PUSH
17024: LD_INT 56
17026: PUSH
17027: LD_INT 57
17029: PUSH
17030: LD_INT 58
17032: PUSH
17033: LD_INT 59
17035: PUSH
17036: LD_INT 63
17038: PUSH
17039: LD_INT 64
17041: PUSH
17042: LD_INT 65
17044: PUSH
17045: LD_INT 82
17047: PUSH
17048: LD_INT 83
17050: PUSH
17051: LD_INT 84
17053: PUSH
17054: LD_INT 85
17056: PUSH
17057: LD_INT 86
17059: PUSH
17060: LD_INT 89
17062: PUSH
17063: LD_INT 91
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: ST_TO_ADDR
17123: GO 17126
17125: POP
// if state > - 1 and state < 3 then
17126: LD_VAR 0 3
17130: PUSH
17131: LD_INT 1
17133: NEG
17134: GREATER
17135: IFFALSE 17147
17137: PUSH
17138: LD_VAR 0 3
17142: PUSH
17143: LD_INT 3
17145: LESS
17146: AND
17147: IFFALSE 17204
// for i in result do
17149: LD_ADDR_VAR 0 5
17153: PUSH
17154: LD_VAR 0 4
17158: PUSH
17159: FOR_IN
17160: IFFALSE 17202
// if GetTech ( i , side ) <> state then
17162: LD_VAR 0 5
17166: PPUSH
17167: LD_VAR 0 1
17171: PPUSH
17172: CALL_OW 321
17176: PUSH
17177: LD_VAR 0 3
17181: NONEQUAL
17182: IFFALSE 17200
// result := result diff i ;
17184: LD_ADDR_VAR 0 4
17188: PUSH
17189: LD_VAR 0 4
17193: PUSH
17194: LD_VAR 0 5
17198: DIFF
17199: ST_TO_ADDR
17200: GO 17159
17202: POP
17203: POP
// end ;
17204: LD_VAR 0 4
17208: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17209: LD_INT 0
17211: PPUSH
17212: PPUSH
17213: PPUSH
// result := true ;
17214: LD_ADDR_VAR 0 3
17218: PUSH
17219: LD_INT 1
17221: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17222: LD_ADDR_VAR 0 5
17226: PUSH
17227: LD_VAR 0 2
17231: PPUSH
17232: CALL_OW 480
17236: ST_TO_ADDR
// if not tmp then
17237: LD_VAR 0 5
17241: NOT
17242: IFFALSE 17246
// exit ;
17244: GO 17295
// for i in tmp do
17246: LD_ADDR_VAR 0 4
17250: PUSH
17251: LD_VAR 0 5
17255: PUSH
17256: FOR_IN
17257: IFFALSE 17293
// if GetTech ( i , side ) <> state_researched then
17259: LD_VAR 0 4
17263: PPUSH
17264: LD_VAR 0 1
17268: PPUSH
17269: CALL_OW 321
17273: PUSH
17274: LD_INT 2
17276: NONEQUAL
17277: IFFALSE 17291
// begin result := false ;
17279: LD_ADDR_VAR 0 3
17283: PUSH
17284: LD_INT 0
17286: ST_TO_ADDR
// exit ;
17287: POP
17288: POP
17289: GO 17295
// end ;
17291: GO 17256
17293: POP
17294: POP
// end ;
17295: LD_VAR 0 3
17299: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17300: LD_INT 0
17302: PPUSH
17303: PPUSH
17304: PPUSH
17305: PPUSH
17306: PPUSH
17307: PPUSH
17308: PPUSH
17309: PPUSH
17310: PPUSH
17311: PPUSH
17312: PPUSH
17313: PPUSH
17314: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17315: LD_VAR 0 1
17319: NOT
17320: IFTRUE 17337
17322: PUSH
17323: LD_VAR 0 1
17327: PPUSH
17328: CALL_OW 257
17332: PUSH
17333: LD_INT 9
17335: NONEQUAL
17336: OR
17337: IFFALSE 17341
// exit ;
17339: GO 17920
// side := GetSide ( unit ) ;
17341: LD_ADDR_VAR 0 9
17345: PUSH
17346: LD_VAR 0 1
17350: PPUSH
17351: CALL_OW 255
17355: ST_TO_ADDR
// tech_space := tech_spacanom ;
17356: LD_ADDR_VAR 0 12
17360: PUSH
17361: LD_INT 29
17363: ST_TO_ADDR
// tech_time := tech_taurad ;
17364: LD_ADDR_VAR 0 13
17368: PUSH
17369: LD_INT 28
17371: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17372: LD_ADDR_VAR 0 11
17376: PUSH
17377: LD_VAR 0 1
17381: PPUSH
17382: CALL_OW 310
17386: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17387: LD_VAR 0 11
17391: PPUSH
17392: CALL_OW 247
17396: PUSH
17397: LD_INT 2
17399: EQUAL
17400: IFFALSE 17404
// exit ;
17402: GO 17920
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17404: LD_ADDR_VAR 0 8
17408: PUSH
17409: LD_INT 81
17411: PUSH
17412: LD_VAR 0 9
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 3
17423: PUSH
17424: LD_INT 21
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PPUSH
17442: CALL_OW 69
17446: ST_TO_ADDR
// if not tmp then
17447: LD_VAR 0 8
17451: NOT
17452: IFFALSE 17456
// exit ;
17454: GO 17920
// if in_unit then
17456: LD_VAR 0 11
17460: IFFALSE 17484
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17462: LD_ADDR_VAR 0 10
17466: PUSH
17467: LD_VAR 0 8
17471: PPUSH
17472: LD_VAR 0 11
17476: PPUSH
17477: CALL_OW 74
17481: ST_TO_ADDR
17482: GO 17504
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17484: LD_ADDR_VAR 0 10
17488: PUSH
17489: LD_VAR 0 8
17493: PPUSH
17494: LD_VAR 0 1
17498: PPUSH
17499: CALL_OW 74
17503: ST_TO_ADDR
// if not enemy then
17504: LD_VAR 0 10
17508: NOT
17509: IFFALSE 17513
// exit ;
17511: GO 17920
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17513: LD_VAR 0 11
17517: IFFALSE 17539
17519: PUSH
17520: LD_VAR 0 11
17524: PPUSH
17525: LD_VAR 0 10
17529: PPUSH
17530: CALL_OW 296
17534: PUSH
17535: LD_INT 13
17537: GREATER
17538: AND
17539: IFTRUE 17561
17541: PUSH
17542: LD_VAR 0 1
17546: PPUSH
17547: LD_VAR 0 10
17551: PPUSH
17552: CALL_OW 296
17556: PUSH
17557: LD_INT 12
17559: GREATER
17560: OR
17561: IFFALSE 17565
// exit ;
17563: GO 17920
// missile := [ 1 ] ;
17565: LD_ADDR_VAR 0 14
17569: PUSH
17570: LD_INT 1
17572: PUSH
17573: EMPTY
17574: LIST
17575: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17576: LD_VAR 0 9
17580: PPUSH
17581: LD_VAR 0 12
17585: PPUSH
17586: CALL_OW 325
17590: IFFALSE 17619
// missile := Replace ( missile , missile + 1 , 2 ) ;
17592: LD_ADDR_VAR 0 14
17596: PUSH
17597: LD_VAR 0 14
17601: PPUSH
17602: LD_VAR 0 14
17606: PUSH
17607: LD_INT 1
17609: PLUS
17610: PPUSH
17611: LD_INT 2
17613: PPUSH
17614: CALL_OW 1
17618: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17619: LD_VAR 0 9
17623: PPUSH
17624: LD_VAR 0 13
17628: PPUSH
17629: CALL_OW 325
17633: IFFALSE 17657
17635: PUSH
17636: LD_VAR 0 10
17640: PPUSH
17641: CALL_OW 255
17645: PPUSH
17646: LD_VAR 0 13
17650: PPUSH
17651: CALL_OW 325
17655: NOT
17656: AND
17657: IFFALSE 17686
// missile := Replace ( missile , missile + 1 , 3 ) ;
17659: LD_ADDR_VAR 0 14
17663: PUSH
17664: LD_VAR 0 14
17668: PPUSH
17669: LD_VAR 0 14
17673: PUSH
17674: LD_INT 1
17676: PLUS
17677: PPUSH
17678: LD_INT 3
17680: PPUSH
17681: CALL_OW 1
17685: ST_TO_ADDR
// if missile < 2 then
17686: LD_VAR 0 14
17690: PUSH
17691: LD_INT 2
17693: LESS
17694: IFFALSE 17698
// exit ;
17696: GO 17920
// x := GetX ( enemy ) ;
17698: LD_ADDR_VAR 0 4
17702: PUSH
17703: LD_VAR 0 10
17707: PPUSH
17708: CALL_OW 250
17712: ST_TO_ADDR
// y := GetY ( enemy ) ;
17713: LD_ADDR_VAR 0 5
17717: PUSH
17718: LD_VAR 0 10
17722: PPUSH
17723: CALL_OW 251
17727: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17728: LD_ADDR_VAR 0 6
17732: PUSH
17733: LD_VAR 0 4
17737: PUSH
17738: LD_INT 1
17740: NEG
17741: PPUSH
17742: LD_INT 1
17744: PPUSH
17745: CALL_OW 12
17749: PLUS
17750: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17751: LD_ADDR_VAR 0 7
17755: PUSH
17756: LD_VAR 0 5
17760: PUSH
17761: LD_INT 1
17763: NEG
17764: PPUSH
17765: LD_INT 1
17767: PPUSH
17768: CALL_OW 12
17772: PLUS
17773: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17774: LD_VAR 0 6
17778: PPUSH
17779: LD_VAR 0 7
17783: PPUSH
17784: CALL_OW 488
17788: NOT
17789: IFFALSE 17811
// begin _x := x ;
17791: LD_ADDR_VAR 0 6
17795: PUSH
17796: LD_VAR 0 4
17800: ST_TO_ADDR
// _y := y ;
17801: LD_ADDR_VAR 0 7
17805: PUSH
17806: LD_VAR 0 5
17810: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17811: LD_ADDR_VAR 0 3
17815: PUSH
17816: LD_INT 1
17818: PPUSH
17819: LD_VAR 0 14
17823: PPUSH
17824: CALL_OW 12
17828: ST_TO_ADDR
// case i of 1 :
17829: LD_VAR 0 3
17833: PUSH
17834: LD_INT 1
17836: DOUBLE
17837: EQUAL
17838: IFTRUE 17842
17840: GO 17859
17842: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17843: LD_VAR 0 1
17847: PPUSH
17848: LD_VAR 0 10
17852: PPUSH
17853: CALL_OW 115
17857: GO 17920
17859: LD_INT 2
17861: DOUBLE
17862: EQUAL
17863: IFTRUE 17867
17865: GO 17889
17867: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17868: LD_VAR 0 1
17872: PPUSH
17873: LD_VAR 0 6
17877: PPUSH
17878: LD_VAR 0 7
17882: PPUSH
17883: CALL_OW 153
17887: GO 17920
17889: LD_INT 3
17891: DOUBLE
17892: EQUAL
17893: IFTRUE 17897
17895: GO 17919
17897: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17898: LD_VAR 0 1
17902: PPUSH
17903: LD_VAR 0 6
17907: PPUSH
17908: LD_VAR 0 7
17912: PPUSH
17913: CALL_OW 154
17917: GO 17920
17919: POP
// end ;
17920: LD_VAR 0 2
17924: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17925: LD_INT 0
17927: PPUSH
17928: PPUSH
17929: PPUSH
17930: PPUSH
17931: PPUSH
17932: PPUSH
// if not unit or not building then
17933: LD_VAR 0 1
17937: NOT
17938: IFTRUE 17947
17940: PUSH
17941: LD_VAR 0 2
17945: NOT
17946: OR
17947: IFFALSE 17951
// exit ;
17949: GO 18109
// x := GetX ( building ) ;
17951: LD_ADDR_VAR 0 5
17955: PUSH
17956: LD_VAR 0 2
17960: PPUSH
17961: CALL_OW 250
17965: ST_TO_ADDR
// y := GetY ( building ) ;
17966: LD_ADDR_VAR 0 6
17970: PUSH
17971: LD_VAR 0 2
17975: PPUSH
17976: CALL_OW 251
17980: ST_TO_ADDR
// for i := 0 to 5 do
17981: LD_ADDR_VAR 0 4
17985: PUSH
17986: DOUBLE
17987: LD_INT 0
17989: DEC
17990: ST_TO_ADDR
17991: LD_INT 5
17993: PUSH
17994: FOR_TO
17995: IFFALSE 18107
// begin _x := ShiftX ( x , i , 3 ) ;
17997: LD_ADDR_VAR 0 7
18001: PUSH
18002: LD_VAR 0 5
18006: PPUSH
18007: LD_VAR 0 4
18011: PPUSH
18012: LD_INT 3
18014: PPUSH
18015: CALL_OW 272
18019: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18020: LD_ADDR_VAR 0 8
18024: PUSH
18025: LD_VAR 0 6
18029: PPUSH
18030: LD_VAR 0 4
18034: PPUSH
18035: LD_INT 3
18037: PPUSH
18038: CALL_OW 273
18042: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18043: LD_VAR 0 7
18047: PPUSH
18048: LD_VAR 0 8
18052: PPUSH
18053: CALL_OW 488
18057: NOT
18058: IFFALSE 18062
// continue ;
18060: GO 17994
// if HexInfo ( _x , _y ) = 0 then
18062: LD_VAR 0 7
18066: PPUSH
18067: LD_VAR 0 8
18071: PPUSH
18072: CALL_OW 428
18076: PUSH
18077: LD_INT 0
18079: EQUAL
18080: IFFALSE 18105
// begin ComMoveXY ( unit , _x , _y ) ;
18082: LD_VAR 0 1
18086: PPUSH
18087: LD_VAR 0 7
18091: PPUSH
18092: LD_VAR 0 8
18096: PPUSH
18097: CALL_OW 111
// exit ;
18101: POP
18102: POP
18103: GO 18109
// end ; end ;
18105: GO 17994
18107: POP
18108: POP
// end ;
18109: LD_VAR 0 3
18113: RET
// export function ScanBase ( side , base_area ) ; begin
18114: LD_INT 0
18116: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18117: LD_ADDR_VAR 0 3
18121: PUSH
18122: LD_VAR 0 2
18126: PPUSH
18127: LD_INT 81
18129: PUSH
18130: LD_VAR 0 1
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PPUSH
18139: CALL_OW 70
18143: ST_TO_ADDR
// end ;
18144: LD_VAR 0 3
18148: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18149: LD_INT 0
18151: PPUSH
18152: PPUSH
18153: PPUSH
18154: PPUSH
// result := false ;
18155: LD_ADDR_VAR 0 2
18159: PUSH
18160: LD_INT 0
18162: ST_TO_ADDR
// side := GetSide ( unit ) ;
18163: LD_ADDR_VAR 0 3
18167: PUSH
18168: LD_VAR 0 1
18172: PPUSH
18173: CALL_OW 255
18177: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18178: LD_ADDR_VAR 0 4
18182: PUSH
18183: LD_VAR 0 1
18187: PPUSH
18188: CALL_OW 248
18192: ST_TO_ADDR
// case nat of 1 :
18193: LD_VAR 0 4
18197: PUSH
18198: LD_INT 1
18200: DOUBLE
18201: EQUAL
18202: IFTRUE 18206
18204: GO 18217
18206: POP
// tech := tech_lassight ; 2 :
18207: LD_ADDR_VAR 0 5
18211: PUSH
18212: LD_INT 12
18214: ST_TO_ADDR
18215: GO 18256
18217: LD_INT 2
18219: DOUBLE
18220: EQUAL
18221: IFTRUE 18225
18223: GO 18236
18225: POP
// tech := tech_mortar ; 3 :
18226: LD_ADDR_VAR 0 5
18230: PUSH
18231: LD_INT 41
18233: ST_TO_ADDR
18234: GO 18256
18236: LD_INT 3
18238: DOUBLE
18239: EQUAL
18240: IFTRUE 18244
18242: GO 18255
18244: POP
// tech := tech_bazooka ; end ;
18245: LD_ADDR_VAR 0 5
18249: PUSH
18250: LD_INT 44
18252: ST_TO_ADDR
18253: GO 18256
18255: POP
// if Researched ( side , tech ) then
18256: LD_VAR 0 3
18260: PPUSH
18261: LD_VAR 0 5
18265: PPUSH
18266: CALL_OW 325
18270: IFFALSE 18297
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18272: LD_ADDR_VAR 0 2
18276: PUSH
18277: LD_INT 5
18279: PUSH
18280: LD_INT 8
18282: PUSH
18283: LD_INT 9
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: PUSH
18291: LD_VAR 0 4
18295: ARRAY
18296: ST_TO_ADDR
// end ;
18297: LD_VAR 0 2
18301: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18302: LD_INT 0
18304: PPUSH
18305: PPUSH
18306: PPUSH
// if not mines then
18307: LD_VAR 0 2
18311: NOT
18312: IFFALSE 18316
// exit ;
18314: GO 18460
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18316: LD_ADDR_VAR 0 5
18320: PUSH
18321: LD_INT 81
18323: PUSH
18324: LD_VAR 0 1
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 3
18335: PUSH
18336: LD_INT 21
18338: PUSH
18339: LD_INT 3
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PPUSH
18354: CALL_OW 69
18358: ST_TO_ADDR
// for i in mines do
18359: LD_ADDR_VAR 0 4
18363: PUSH
18364: LD_VAR 0 2
18368: PUSH
18369: FOR_IN
18370: IFFALSE 18458
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18372: LD_VAR 0 4
18376: PUSH
18377: LD_INT 1
18379: ARRAY
18380: PPUSH
18381: LD_VAR 0 4
18385: PUSH
18386: LD_INT 2
18388: ARRAY
18389: PPUSH
18390: CALL_OW 458
18394: NOT
18395: IFFALSE 18399
// continue ;
18397: GO 18369
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18399: LD_VAR 0 4
18403: PUSH
18404: LD_INT 1
18406: ARRAY
18407: PPUSH
18408: LD_VAR 0 4
18412: PUSH
18413: LD_INT 2
18415: ARRAY
18416: PPUSH
18417: CALL_OW 428
18421: PUSH
18422: LD_VAR 0 5
18426: IN
18427: IFFALSE 18456
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18429: LD_VAR 0 4
18433: PUSH
18434: LD_INT 1
18436: ARRAY
18437: PPUSH
18438: LD_VAR 0 4
18442: PUSH
18443: LD_INT 2
18445: ARRAY
18446: PPUSH
18447: LD_VAR 0 1
18451: PPUSH
18452: CALL_OW 456
// end ;
18456: GO 18369
18458: POP
18459: POP
// end ;
18460: LD_VAR 0 3
18464: RET
// export function Count ( array ) ; begin
18465: LD_INT 0
18467: PPUSH
// result := array + 0 ;
18468: LD_ADDR_VAR 0 2
18472: PUSH
18473: LD_VAR 0 1
18477: PUSH
18478: LD_INT 0
18480: PLUS
18481: ST_TO_ADDR
// end ;
18482: LD_VAR 0 2
18486: RET
// export function IsEmpty ( building ) ; begin
18487: LD_INT 0
18489: PPUSH
// if not building then
18490: LD_VAR 0 1
18494: NOT
18495: IFFALSE 18499
// exit ;
18497: GO 18542
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18499: LD_ADDR_VAR 0 2
18503: PUSH
18504: LD_VAR 0 1
18508: PUSH
18509: LD_INT 22
18511: PUSH
18512: LD_VAR 0 1
18516: PPUSH
18517: CALL_OW 255
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 58
18528: PUSH
18529: EMPTY
18530: LIST
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PPUSH
18536: CALL_OW 69
18540: IN
18541: ST_TO_ADDR
// end ;
18542: LD_VAR 0 2
18546: RET
// export function IsNotFull ( building ) ; var places ; begin
18547: LD_INT 0
18549: PPUSH
18550: PPUSH
// if not building then
18551: LD_VAR 0 1
18555: NOT
18556: IFFALSE 18560
// exit ;
18558: GO 18588
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18560: LD_ADDR_VAR 0 2
18564: PUSH
18565: LD_VAR 0 1
18569: PPUSH
18570: LD_INT 3
18572: PUSH
18573: LD_INT 62
18575: PUSH
18576: EMPTY
18577: LIST
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PPUSH
18583: CALL_OW 72
18587: ST_TO_ADDR
// end ;
18588: LD_VAR 0 2
18592: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18593: LD_INT 0
18595: PPUSH
18596: PPUSH
18597: PPUSH
18598: PPUSH
// tmp := [ ] ;
18599: LD_ADDR_VAR 0 3
18603: PUSH
18604: EMPTY
18605: ST_TO_ADDR
// list := [ ] ;
18606: LD_ADDR_VAR 0 5
18610: PUSH
18611: EMPTY
18612: ST_TO_ADDR
// for i = 16 to 25 do
18613: LD_ADDR_VAR 0 4
18617: PUSH
18618: DOUBLE
18619: LD_INT 16
18621: DEC
18622: ST_TO_ADDR
18623: LD_INT 25
18625: PUSH
18626: FOR_TO
18627: IFFALSE 18700
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18629: LD_ADDR_VAR 0 3
18633: PUSH
18634: LD_VAR 0 3
18638: PUSH
18639: LD_INT 22
18641: PUSH
18642: LD_VAR 0 1
18646: PPUSH
18647: CALL_OW 255
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 91
18658: PUSH
18659: LD_VAR 0 1
18663: PUSH
18664: LD_INT 6
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 30
18674: PUSH
18675: LD_VAR 0 4
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: LIST
18688: PUSH
18689: EMPTY
18690: LIST
18691: PPUSH
18692: CALL_OW 69
18696: ADD
18697: ST_TO_ADDR
18698: GO 18626
18700: POP
18701: POP
// for i = 1 to tmp do
18702: LD_ADDR_VAR 0 4
18706: PUSH
18707: DOUBLE
18708: LD_INT 1
18710: DEC
18711: ST_TO_ADDR
18712: LD_VAR 0 3
18716: PUSH
18717: FOR_TO
18718: IFFALSE 18806
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18720: LD_ADDR_VAR 0 5
18724: PUSH
18725: LD_VAR 0 5
18729: PUSH
18730: LD_VAR 0 3
18734: PUSH
18735: LD_VAR 0 4
18739: ARRAY
18740: PPUSH
18741: CALL_OW 266
18745: PUSH
18746: LD_VAR 0 3
18750: PUSH
18751: LD_VAR 0 4
18755: ARRAY
18756: PPUSH
18757: CALL_OW 250
18761: PUSH
18762: LD_VAR 0 3
18766: PUSH
18767: LD_VAR 0 4
18771: ARRAY
18772: PPUSH
18773: CALL_OW 251
18777: PUSH
18778: LD_VAR 0 3
18782: PUSH
18783: LD_VAR 0 4
18787: ARRAY
18788: PPUSH
18789: CALL_OW 254
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: PUSH
18800: EMPTY
18801: LIST
18802: ADD
18803: ST_TO_ADDR
18804: GO 18717
18806: POP
18807: POP
// result := list ;
18808: LD_ADDR_VAR 0 2
18812: PUSH
18813: LD_VAR 0 5
18817: ST_TO_ADDR
// end ;
18818: LD_VAR 0 2
18822: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18823: LD_INT 0
18825: PPUSH
18826: PPUSH
18827: PPUSH
18828: PPUSH
18829: PPUSH
18830: PPUSH
18831: PPUSH
// if not factory then
18832: LD_VAR 0 1
18836: NOT
18837: IFFALSE 18841
// exit ;
18839: GO 19444
// if control = control_apeman then
18841: LD_VAR 0 4
18845: PUSH
18846: LD_INT 5
18848: EQUAL
18849: IFFALSE 18958
// begin tmp := UnitsInside ( factory ) ;
18851: LD_ADDR_VAR 0 8
18855: PUSH
18856: LD_VAR 0 1
18860: PPUSH
18861: CALL_OW 313
18865: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18866: LD_VAR 0 8
18870: PPUSH
18871: LD_INT 25
18873: PUSH
18874: LD_INT 12
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PPUSH
18881: CALL_OW 72
18885: NOT
18886: IFFALSE 18896
// control := control_manual ;
18888: LD_ADDR_VAR 0 4
18892: PUSH
18893: LD_INT 1
18895: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18896: LD_ADDR_VAR 0 8
18900: PUSH
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL 18593 0 1
18910: ST_TO_ADDR
// if tmp then
18911: LD_VAR 0 8
18915: IFFALSE 18958
// begin for i in tmp do
18917: LD_ADDR_VAR 0 7
18921: PUSH
18922: LD_VAR 0 8
18926: PUSH
18927: FOR_IN
18928: IFFALSE 18956
// if i [ 1 ] = b_ext_radio then
18930: LD_VAR 0 7
18934: PUSH
18935: LD_INT 1
18937: ARRAY
18938: PUSH
18939: LD_INT 22
18941: EQUAL
18942: IFFALSE 18954
// begin control := control_remote ;
18944: LD_ADDR_VAR 0 4
18948: PUSH
18949: LD_INT 2
18951: ST_TO_ADDR
// break ;
18952: GO 18956
// end ;
18954: GO 18927
18956: POP
18957: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18958: LD_VAR 0 1
18962: PPUSH
18963: LD_VAR 0 2
18967: PPUSH
18968: LD_VAR 0 3
18972: PPUSH
18973: LD_VAR 0 4
18977: PPUSH
18978: LD_VAR 0 5
18982: PPUSH
18983: CALL_OW 448
18987: IFFALSE 19022
// begin result := [ chassis , engine , control , weapon ] ;
18989: LD_ADDR_VAR 0 6
18993: PUSH
18994: LD_VAR 0 2
18998: PUSH
18999: LD_VAR 0 3
19003: PUSH
19004: LD_VAR 0 4
19008: PUSH
19009: LD_VAR 0 5
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: ST_TO_ADDR
// exit ;
19020: GO 19444
// end ; _chassis := AvailableChassisList ( factory ) ;
19022: LD_ADDR_VAR 0 9
19026: PUSH
19027: LD_VAR 0 1
19031: PPUSH
19032: CALL_OW 475
19036: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19037: LD_ADDR_VAR 0 11
19041: PUSH
19042: LD_VAR 0 1
19046: PPUSH
19047: CALL_OW 476
19051: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19052: LD_ADDR_VAR 0 12
19056: PUSH
19057: LD_VAR 0 1
19061: PPUSH
19062: CALL_OW 477
19066: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19067: LD_ADDR_VAR 0 10
19071: PUSH
19072: LD_VAR 0 1
19076: PPUSH
19077: CALL_OW 478
19081: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19082: LD_VAR 0 9
19086: NOT
19087: IFTRUE 19096
19089: PUSH
19090: LD_VAR 0 11
19094: NOT
19095: OR
19096: IFTRUE 19105
19098: PUSH
19099: LD_VAR 0 12
19103: NOT
19104: OR
19105: IFTRUE 19114
19107: PUSH
19108: LD_VAR 0 10
19112: NOT
19113: OR
19114: IFFALSE 19149
// begin result := [ chassis , engine , control , weapon ] ;
19116: LD_ADDR_VAR 0 6
19120: PUSH
19121: LD_VAR 0 2
19125: PUSH
19126: LD_VAR 0 3
19130: PUSH
19131: LD_VAR 0 4
19135: PUSH
19136: LD_VAR 0 5
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: ST_TO_ADDR
// exit ;
19147: GO 19444
// end ; if not chassis in _chassis then
19149: LD_VAR 0 2
19153: PUSH
19154: LD_VAR 0 9
19158: IN
19159: NOT
19160: IFFALSE 19186
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19162: LD_ADDR_VAR 0 2
19166: PUSH
19167: LD_VAR 0 9
19171: PUSH
19172: LD_INT 1
19174: PPUSH
19175: LD_VAR 0 9
19179: PPUSH
19180: CALL_OW 12
19184: ARRAY
19185: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19186: LD_VAR 0 2
19190: PPUSH
19191: LD_VAR 0 3
19195: PPUSH
19196: CALL 19449 0 2
19200: NOT
19201: IFFALSE 19262
// repeat engine := _engine [ 1 ] ;
19203: LD_ADDR_VAR 0 3
19207: PUSH
19208: LD_VAR 0 11
19212: PUSH
19213: LD_INT 1
19215: ARRAY
19216: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19217: LD_ADDR_VAR 0 11
19221: PUSH
19222: LD_VAR 0 11
19226: PPUSH
19227: LD_INT 1
19229: PPUSH
19230: CALL_OW 3
19234: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19235: LD_VAR 0 2
19239: PPUSH
19240: LD_VAR 0 3
19244: PPUSH
19245: CALL 19449 0 2
19249: IFTRUE 19260
19251: PUSH
19252: LD_VAR 0 11
19256: PUSH
19257: EMPTY
19258: EQUAL
19259: OR
19260: IFFALSE 19203
// if not control in _control then
19262: LD_VAR 0 4
19266: PUSH
19267: LD_VAR 0 12
19271: IN
19272: NOT
19273: IFFALSE 19299
// control := _control [ rand ( 1 , _control ) ] ;
19275: LD_ADDR_VAR 0 4
19279: PUSH
19280: LD_VAR 0 12
19284: PUSH
19285: LD_INT 1
19287: PPUSH
19288: LD_VAR 0 12
19292: PPUSH
19293: CALL_OW 12
19297: ARRAY
19298: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19299: LD_VAR 0 2
19303: PPUSH
19304: LD_VAR 0 5
19308: PPUSH
19309: CALL 19671 0 2
19313: NOT
19314: IFFALSE 19375
// repeat weapon := _weapon [ 1 ] ;
19316: LD_ADDR_VAR 0 5
19320: PUSH
19321: LD_VAR 0 10
19325: PUSH
19326: LD_INT 1
19328: ARRAY
19329: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19330: LD_ADDR_VAR 0 10
19334: PUSH
19335: LD_VAR 0 10
19339: PPUSH
19340: LD_INT 1
19342: PPUSH
19343: CALL_OW 3
19347: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19348: LD_VAR 0 2
19352: PPUSH
19353: LD_VAR 0 5
19357: PPUSH
19358: CALL 19671 0 2
19362: IFTRUE 19373
19364: PUSH
19365: LD_VAR 0 10
19369: PUSH
19370: EMPTY
19371: EQUAL
19372: OR
19373: IFFALSE 19316
// result := [ ] ;
19375: LD_ADDR_VAR 0 6
19379: PUSH
19380: EMPTY
19381: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19382: LD_VAR 0 1
19386: PPUSH
19387: LD_VAR 0 2
19391: PPUSH
19392: LD_VAR 0 3
19396: PPUSH
19397: LD_VAR 0 4
19401: PPUSH
19402: LD_VAR 0 5
19406: PPUSH
19407: CALL_OW 448
19411: IFFALSE 19444
// result := [ chassis , engine , control , weapon ] ;
19413: LD_ADDR_VAR 0 6
19417: PUSH
19418: LD_VAR 0 2
19422: PUSH
19423: LD_VAR 0 3
19427: PUSH
19428: LD_VAR 0 4
19432: PUSH
19433: LD_VAR 0 5
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: ST_TO_ADDR
// end ;
19444: LD_VAR 0 6
19448: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19449: LD_INT 0
19451: PPUSH
// if not chassis or not engine then
19452: LD_VAR 0 1
19456: NOT
19457: IFTRUE 19466
19459: PUSH
19460: LD_VAR 0 2
19464: NOT
19465: OR
19466: IFFALSE 19470
// exit ;
19468: GO 19666
// case engine of engine_solar :
19470: LD_VAR 0 2
19474: PUSH
19475: LD_INT 2
19477: DOUBLE
19478: EQUAL
19479: IFTRUE 19483
19481: GO 19521
19483: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19484: LD_ADDR_VAR 0 3
19488: PUSH
19489: LD_INT 11
19491: PUSH
19492: LD_INT 12
19494: PUSH
19495: LD_INT 13
19497: PUSH
19498: LD_INT 14
19500: PUSH
19501: LD_INT 1
19503: PUSH
19504: LD_INT 2
19506: PUSH
19507: LD_INT 3
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: ST_TO_ADDR
19519: GO 19650
19521: LD_INT 1
19523: DOUBLE
19524: EQUAL
19525: IFTRUE 19529
19527: GO 19591
19529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19530: LD_ADDR_VAR 0 3
19534: PUSH
19535: LD_INT 11
19537: PUSH
19538: LD_INT 12
19540: PUSH
19541: LD_INT 13
19543: PUSH
19544: LD_INT 14
19546: PUSH
19547: LD_INT 1
19549: PUSH
19550: LD_INT 2
19552: PUSH
19553: LD_INT 3
19555: PUSH
19556: LD_INT 4
19558: PUSH
19559: LD_INT 5
19561: PUSH
19562: LD_INT 21
19564: PUSH
19565: LD_INT 23
19567: PUSH
19568: LD_INT 22
19570: PUSH
19571: LD_INT 24
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: ST_TO_ADDR
19589: GO 19650
19591: LD_INT 3
19593: DOUBLE
19594: EQUAL
19595: IFTRUE 19599
19597: GO 19649
19599: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19600: LD_ADDR_VAR 0 3
19604: PUSH
19605: LD_INT 13
19607: PUSH
19608: LD_INT 14
19610: PUSH
19611: LD_INT 2
19613: PUSH
19614: LD_INT 3
19616: PUSH
19617: LD_INT 4
19619: PUSH
19620: LD_INT 5
19622: PUSH
19623: LD_INT 21
19625: PUSH
19626: LD_INT 22
19628: PUSH
19629: LD_INT 23
19631: PUSH
19632: LD_INT 24
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: ST_TO_ADDR
19647: GO 19650
19649: POP
// result := ( chassis in result ) ;
19650: LD_ADDR_VAR 0 3
19654: PUSH
19655: LD_VAR 0 1
19659: PUSH
19660: LD_VAR 0 3
19664: IN
19665: ST_TO_ADDR
// end ;
19666: LD_VAR 0 3
19670: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19671: LD_INT 0
19673: PPUSH
// if not chassis or not weapon then
19674: LD_VAR 0 1
19678: NOT
19679: IFTRUE 19688
19681: PUSH
19682: LD_VAR 0 2
19686: NOT
19687: OR
19688: IFFALSE 19692
// exit ;
19690: GO 20786
// case weapon of us_machine_gun :
19692: LD_VAR 0 2
19696: PUSH
19697: LD_INT 2
19699: DOUBLE
19700: EQUAL
19701: IFTRUE 19705
19703: GO 19735
19705: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19706: LD_ADDR_VAR 0 3
19710: PUSH
19711: LD_INT 1
19713: PUSH
19714: LD_INT 2
19716: PUSH
19717: LD_INT 3
19719: PUSH
19720: LD_INT 4
19722: PUSH
19723: LD_INT 5
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: ST_TO_ADDR
19733: GO 20770
19735: LD_INT 3
19737: DOUBLE
19738: EQUAL
19739: IFTRUE 19743
19741: GO 19773
19743: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19744: LD_ADDR_VAR 0 3
19748: PUSH
19749: LD_INT 1
19751: PUSH
19752: LD_INT 2
19754: PUSH
19755: LD_INT 3
19757: PUSH
19758: LD_INT 4
19760: PUSH
19761: LD_INT 5
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: ST_TO_ADDR
19771: GO 20770
19773: LD_INT 11
19775: DOUBLE
19776: EQUAL
19777: IFTRUE 19781
19779: GO 19811
19781: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19782: LD_ADDR_VAR 0 3
19786: PUSH
19787: LD_INT 1
19789: PUSH
19790: LD_INT 2
19792: PUSH
19793: LD_INT 3
19795: PUSH
19796: LD_INT 4
19798: PUSH
19799: LD_INT 5
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: ST_TO_ADDR
19809: GO 20770
19811: LD_INT 4
19813: DOUBLE
19814: EQUAL
19815: IFTRUE 19819
19817: GO 19845
19819: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19820: LD_ADDR_VAR 0 3
19824: PUSH
19825: LD_INT 2
19827: PUSH
19828: LD_INT 3
19830: PUSH
19831: LD_INT 4
19833: PUSH
19834: LD_INT 5
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: ST_TO_ADDR
19843: GO 20770
19845: LD_INT 5
19847: DOUBLE
19848: EQUAL
19849: IFTRUE 19853
19851: GO 19879
19853: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19854: LD_ADDR_VAR 0 3
19858: PUSH
19859: LD_INT 2
19861: PUSH
19862: LD_INT 3
19864: PUSH
19865: LD_INT 4
19867: PUSH
19868: LD_INT 5
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: ST_TO_ADDR
19877: GO 20770
19879: LD_INT 9
19881: DOUBLE
19882: EQUAL
19883: IFTRUE 19887
19885: GO 19913
19887: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19888: LD_ADDR_VAR 0 3
19892: PUSH
19893: LD_INT 2
19895: PUSH
19896: LD_INT 3
19898: PUSH
19899: LD_INT 4
19901: PUSH
19902: LD_INT 5
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: ST_TO_ADDR
19911: GO 20770
19913: LD_INT 7
19915: DOUBLE
19916: EQUAL
19917: IFTRUE 19921
19919: GO 19947
19921: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19922: LD_ADDR_VAR 0 3
19926: PUSH
19927: LD_INT 2
19929: PUSH
19930: LD_INT 3
19932: PUSH
19933: LD_INT 4
19935: PUSH
19936: LD_INT 5
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: ST_TO_ADDR
19945: GO 20770
19947: LD_INT 12
19949: DOUBLE
19950: EQUAL
19951: IFTRUE 19955
19953: GO 19981
19955: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19956: LD_ADDR_VAR 0 3
19960: PUSH
19961: LD_INT 2
19963: PUSH
19964: LD_INT 3
19966: PUSH
19967: LD_INT 4
19969: PUSH
19970: LD_INT 5
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: ST_TO_ADDR
19979: GO 20770
19981: LD_INT 13
19983: DOUBLE
19984: EQUAL
19985: IFTRUE 19989
19987: GO 20015
19989: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19990: LD_ADDR_VAR 0 3
19994: PUSH
19995: LD_INT 2
19997: PUSH
19998: LD_INT 3
20000: PUSH
20001: LD_INT 4
20003: PUSH
20004: LD_INT 5
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: ST_TO_ADDR
20013: GO 20770
20015: LD_INT 14
20017: DOUBLE
20018: EQUAL
20019: IFTRUE 20023
20021: GO 20041
20023: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20024: LD_ADDR_VAR 0 3
20028: PUSH
20029: LD_INT 4
20031: PUSH
20032: LD_INT 5
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: ST_TO_ADDR
20039: GO 20770
20041: LD_INT 6
20043: DOUBLE
20044: EQUAL
20045: IFTRUE 20049
20047: GO 20067
20049: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20050: LD_ADDR_VAR 0 3
20054: PUSH
20055: LD_INT 4
20057: PUSH
20058: LD_INT 5
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: ST_TO_ADDR
20065: GO 20770
20067: LD_INT 10
20069: DOUBLE
20070: EQUAL
20071: IFTRUE 20075
20073: GO 20093
20075: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20076: LD_ADDR_VAR 0 3
20080: PUSH
20081: LD_INT 4
20083: PUSH
20084: LD_INT 5
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: ST_TO_ADDR
20091: GO 20770
20093: LD_INT 22
20095: DOUBLE
20096: EQUAL
20097: IFTRUE 20101
20099: GO 20127
20101: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20102: LD_ADDR_VAR 0 3
20106: PUSH
20107: LD_INT 11
20109: PUSH
20110: LD_INT 12
20112: PUSH
20113: LD_INT 13
20115: PUSH
20116: LD_INT 14
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: ST_TO_ADDR
20125: GO 20770
20127: LD_INT 23
20129: DOUBLE
20130: EQUAL
20131: IFTRUE 20135
20133: GO 20161
20135: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20136: LD_ADDR_VAR 0 3
20140: PUSH
20141: LD_INT 11
20143: PUSH
20144: LD_INT 12
20146: PUSH
20147: LD_INT 13
20149: PUSH
20150: LD_INT 14
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: ST_TO_ADDR
20159: GO 20770
20161: LD_INT 24
20163: DOUBLE
20164: EQUAL
20165: IFTRUE 20169
20167: GO 20195
20169: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20170: LD_ADDR_VAR 0 3
20174: PUSH
20175: LD_INT 11
20177: PUSH
20178: LD_INT 12
20180: PUSH
20181: LD_INT 13
20183: PUSH
20184: LD_INT 14
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: ST_TO_ADDR
20193: GO 20770
20195: LD_INT 30
20197: DOUBLE
20198: EQUAL
20199: IFTRUE 20203
20201: GO 20229
20203: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20204: LD_ADDR_VAR 0 3
20208: PUSH
20209: LD_INT 11
20211: PUSH
20212: LD_INT 12
20214: PUSH
20215: LD_INT 13
20217: PUSH
20218: LD_INT 14
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: ST_TO_ADDR
20227: GO 20770
20229: LD_INT 25
20231: DOUBLE
20232: EQUAL
20233: IFTRUE 20237
20235: GO 20255
20237: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20238: LD_ADDR_VAR 0 3
20242: PUSH
20243: LD_INT 13
20245: PUSH
20246: LD_INT 14
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: ST_TO_ADDR
20253: GO 20770
20255: LD_INT 27
20257: DOUBLE
20258: EQUAL
20259: IFTRUE 20263
20261: GO 20281
20263: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20264: LD_ADDR_VAR 0 3
20268: PUSH
20269: LD_INT 13
20271: PUSH
20272: LD_INT 14
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: ST_TO_ADDR
20279: GO 20770
20281: LD_INT 92
20283: DOUBLE
20284: EQUAL
20285: IFTRUE 20289
20287: GO 20315
20289: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20290: LD_ADDR_VAR 0 3
20294: PUSH
20295: LD_INT 11
20297: PUSH
20298: LD_INT 12
20300: PUSH
20301: LD_INT 13
20303: PUSH
20304: LD_INT 14
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: ST_TO_ADDR
20313: GO 20770
20315: LD_INT 28
20317: DOUBLE
20318: EQUAL
20319: IFTRUE 20323
20321: GO 20341
20323: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20324: LD_ADDR_VAR 0 3
20328: PUSH
20329: LD_INT 13
20331: PUSH
20332: LD_INT 14
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: ST_TO_ADDR
20339: GO 20770
20341: LD_INT 29
20343: DOUBLE
20344: EQUAL
20345: IFTRUE 20349
20347: GO 20367
20349: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20350: LD_ADDR_VAR 0 3
20354: PUSH
20355: LD_INT 13
20357: PUSH
20358: LD_INT 14
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: ST_TO_ADDR
20365: GO 20770
20367: LD_INT 31
20369: DOUBLE
20370: EQUAL
20371: IFTRUE 20375
20373: GO 20393
20375: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20376: LD_ADDR_VAR 0 3
20380: PUSH
20381: LD_INT 13
20383: PUSH
20384: LD_INT 14
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: ST_TO_ADDR
20391: GO 20770
20393: LD_INT 26
20395: DOUBLE
20396: EQUAL
20397: IFTRUE 20401
20399: GO 20419
20401: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20402: LD_ADDR_VAR 0 3
20406: PUSH
20407: LD_INT 13
20409: PUSH
20410: LD_INT 14
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: ST_TO_ADDR
20417: GO 20770
20419: LD_INT 42
20421: DOUBLE
20422: EQUAL
20423: IFTRUE 20427
20425: GO 20453
20427: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20428: LD_ADDR_VAR 0 3
20432: PUSH
20433: LD_INT 21
20435: PUSH
20436: LD_INT 22
20438: PUSH
20439: LD_INT 23
20441: PUSH
20442: LD_INT 24
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: ST_TO_ADDR
20451: GO 20770
20453: LD_INT 43
20455: DOUBLE
20456: EQUAL
20457: IFTRUE 20461
20459: GO 20487
20461: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20462: LD_ADDR_VAR 0 3
20466: PUSH
20467: LD_INT 21
20469: PUSH
20470: LD_INT 22
20472: PUSH
20473: LD_INT 23
20475: PUSH
20476: LD_INT 24
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: ST_TO_ADDR
20485: GO 20770
20487: LD_INT 44
20489: DOUBLE
20490: EQUAL
20491: IFTRUE 20495
20493: GO 20521
20495: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20496: LD_ADDR_VAR 0 3
20500: PUSH
20501: LD_INT 21
20503: PUSH
20504: LD_INT 22
20506: PUSH
20507: LD_INT 23
20509: PUSH
20510: LD_INT 24
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: ST_TO_ADDR
20519: GO 20770
20521: LD_INT 45
20523: DOUBLE
20524: EQUAL
20525: IFTRUE 20529
20527: GO 20555
20529: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20530: LD_ADDR_VAR 0 3
20534: PUSH
20535: LD_INT 21
20537: PUSH
20538: LD_INT 22
20540: PUSH
20541: LD_INT 23
20543: PUSH
20544: LD_INT 24
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: ST_TO_ADDR
20553: GO 20770
20555: LD_INT 49
20557: DOUBLE
20558: EQUAL
20559: IFTRUE 20563
20561: GO 20589
20563: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20564: LD_ADDR_VAR 0 3
20568: PUSH
20569: LD_INT 21
20571: PUSH
20572: LD_INT 22
20574: PUSH
20575: LD_INT 23
20577: PUSH
20578: LD_INT 24
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: ST_TO_ADDR
20587: GO 20770
20589: LD_INT 51
20591: DOUBLE
20592: EQUAL
20593: IFTRUE 20597
20595: GO 20623
20597: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20598: LD_ADDR_VAR 0 3
20602: PUSH
20603: LD_INT 21
20605: PUSH
20606: LD_INT 22
20608: PUSH
20609: LD_INT 23
20611: PUSH
20612: LD_INT 24
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: ST_TO_ADDR
20621: GO 20770
20623: LD_INT 52
20625: DOUBLE
20626: EQUAL
20627: IFTRUE 20631
20629: GO 20657
20631: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20632: LD_ADDR_VAR 0 3
20636: PUSH
20637: LD_INT 21
20639: PUSH
20640: LD_INT 22
20642: PUSH
20643: LD_INT 23
20645: PUSH
20646: LD_INT 24
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: ST_TO_ADDR
20655: GO 20770
20657: LD_INT 53
20659: DOUBLE
20660: EQUAL
20661: IFTRUE 20665
20663: GO 20683
20665: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20666: LD_ADDR_VAR 0 3
20670: PUSH
20671: LD_INT 23
20673: PUSH
20674: LD_INT 24
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: ST_TO_ADDR
20681: GO 20770
20683: LD_INT 46
20685: DOUBLE
20686: EQUAL
20687: IFTRUE 20691
20689: GO 20709
20691: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20692: LD_ADDR_VAR 0 3
20696: PUSH
20697: LD_INT 23
20699: PUSH
20700: LD_INT 24
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: ST_TO_ADDR
20707: GO 20770
20709: LD_INT 47
20711: DOUBLE
20712: EQUAL
20713: IFTRUE 20717
20715: GO 20735
20717: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
20718: LD_ADDR_VAR 0 3
20722: PUSH
20723: LD_INT 23
20725: PUSH
20726: LD_INT 24
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: ST_TO_ADDR
20733: GO 20770
20735: LD_INT 98
20737: DOUBLE
20738: EQUAL
20739: IFTRUE 20743
20741: GO 20769
20743: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20744: LD_ADDR_VAR 0 3
20748: PUSH
20749: LD_INT 21
20751: PUSH
20752: LD_INT 22
20754: PUSH
20755: LD_INT 23
20757: PUSH
20758: LD_INT 24
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: ST_TO_ADDR
20767: GO 20770
20769: POP
// result := ( chassis in result ) ;
20770: LD_ADDR_VAR 0 3
20774: PUSH
20775: LD_VAR 0 1
20779: PUSH
20780: LD_VAR 0 3
20784: IN
20785: ST_TO_ADDR
// end ;
20786: LD_VAR 0 3
20790: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20791: LD_INT 0
20793: PPUSH
20794: PPUSH
20795: PPUSH
20796: PPUSH
20797: PPUSH
20798: PPUSH
20799: PPUSH
// result := array ;
20800: LD_ADDR_VAR 0 5
20804: PUSH
20805: LD_VAR 0 1
20809: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20810: LD_VAR 0 1
20814: NOT
20815: IFTRUE 20824
20817: PUSH
20818: LD_VAR 0 2
20822: NOT
20823: OR
20824: IFTRUE 20833
20826: PUSH
20827: LD_VAR 0 3
20831: NOT
20832: OR
20833: IFTRUE 20847
20835: PUSH
20836: LD_VAR 0 2
20840: PUSH
20841: LD_VAR 0 1
20845: GREATER
20846: OR
20847: IFTRUE 20861
20849: PUSH
20850: LD_VAR 0 3
20854: PUSH
20855: LD_VAR 0 1
20859: GREATER
20860: OR
20861: IFFALSE 20865
// exit ;
20863: GO 21161
// if direction then
20865: LD_VAR 0 4
20869: IFFALSE 20933
// begin d := 1 ;
20871: LD_ADDR_VAR 0 9
20875: PUSH
20876: LD_INT 1
20878: ST_TO_ADDR
// if i_from > i_to then
20879: LD_VAR 0 2
20883: PUSH
20884: LD_VAR 0 3
20888: GREATER
20889: IFFALSE 20915
// length := ( array - i_from ) + i_to else
20891: LD_ADDR_VAR 0 11
20895: PUSH
20896: LD_VAR 0 1
20900: PUSH
20901: LD_VAR 0 2
20905: MINUS
20906: PUSH
20907: LD_VAR 0 3
20911: PLUS
20912: ST_TO_ADDR
20913: GO 20931
// length := i_to - i_from ;
20915: LD_ADDR_VAR 0 11
20919: PUSH
20920: LD_VAR 0 3
20924: PUSH
20925: LD_VAR 0 2
20929: MINUS
20930: ST_TO_ADDR
// end else
20931: GO 20994
// begin d := - 1 ;
20933: LD_ADDR_VAR 0 9
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: ST_TO_ADDR
// if i_from > i_to then
20942: LD_VAR 0 2
20946: PUSH
20947: LD_VAR 0 3
20951: GREATER
20952: IFFALSE 20972
// length := i_from - i_to else
20954: LD_ADDR_VAR 0 11
20958: PUSH
20959: LD_VAR 0 2
20963: PUSH
20964: LD_VAR 0 3
20968: MINUS
20969: ST_TO_ADDR
20970: GO 20994
// length := ( array - i_to ) + i_from ;
20972: LD_ADDR_VAR 0 11
20976: PUSH
20977: LD_VAR 0 1
20981: PUSH
20982: LD_VAR 0 3
20986: MINUS
20987: PUSH
20988: LD_VAR 0 2
20992: PLUS
20993: ST_TO_ADDR
// end ; if not length then
20994: LD_VAR 0 11
20998: NOT
20999: IFFALSE 21003
// exit ;
21001: GO 21161
// tmp := array ;
21003: LD_ADDR_VAR 0 10
21007: PUSH
21008: LD_VAR 0 1
21012: ST_TO_ADDR
// for i = 1 to length do
21013: LD_ADDR_VAR 0 6
21017: PUSH
21018: DOUBLE
21019: LD_INT 1
21021: DEC
21022: ST_TO_ADDR
21023: LD_VAR 0 11
21027: PUSH
21028: FOR_TO
21029: IFFALSE 21149
// begin for j = 1 to array do
21031: LD_ADDR_VAR 0 7
21035: PUSH
21036: DOUBLE
21037: LD_INT 1
21039: DEC
21040: ST_TO_ADDR
21041: LD_VAR 0 1
21045: PUSH
21046: FOR_TO
21047: IFFALSE 21135
// begin k := j + d ;
21049: LD_ADDR_VAR 0 8
21053: PUSH
21054: LD_VAR 0 7
21058: PUSH
21059: LD_VAR 0 9
21063: PLUS
21064: ST_TO_ADDR
// if k > array then
21065: LD_VAR 0 8
21069: PUSH
21070: LD_VAR 0 1
21074: GREATER
21075: IFFALSE 21085
// k := 1 ;
21077: LD_ADDR_VAR 0 8
21081: PUSH
21082: LD_INT 1
21084: ST_TO_ADDR
// if not k then
21085: LD_VAR 0 8
21089: NOT
21090: IFFALSE 21102
// k := array ;
21092: LD_ADDR_VAR 0 8
21096: PUSH
21097: LD_VAR 0 1
21101: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21102: LD_ADDR_VAR 0 10
21106: PUSH
21107: LD_VAR 0 10
21111: PPUSH
21112: LD_VAR 0 8
21116: PPUSH
21117: LD_VAR 0 1
21121: PUSH
21122: LD_VAR 0 7
21126: ARRAY
21127: PPUSH
21128: CALL_OW 1
21132: ST_TO_ADDR
// end ;
21133: GO 21046
21135: POP
21136: POP
// array := tmp ;
21137: LD_ADDR_VAR 0 1
21141: PUSH
21142: LD_VAR 0 10
21146: ST_TO_ADDR
// end ;
21147: GO 21028
21149: POP
21150: POP
// result := array ;
21151: LD_ADDR_VAR 0 5
21155: PUSH
21156: LD_VAR 0 1
21160: ST_TO_ADDR
// end ;
21161: LD_VAR 0 5
21165: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21166: LD_INT 0
21168: PPUSH
21169: PPUSH
// result := 0 ;
21170: LD_ADDR_VAR 0 3
21174: PUSH
21175: LD_INT 0
21177: ST_TO_ADDR
// if not array or not value in array then
21178: LD_VAR 0 1
21182: NOT
21183: IFTRUE 21198
21185: PUSH
21186: LD_VAR 0 2
21190: PUSH
21191: LD_VAR 0 1
21195: IN
21196: NOT
21197: OR
21198: IFFALSE 21202
// exit ;
21200: GO 21256
// for i = 1 to array do
21202: LD_ADDR_VAR 0 4
21206: PUSH
21207: DOUBLE
21208: LD_INT 1
21210: DEC
21211: ST_TO_ADDR
21212: LD_VAR 0 1
21216: PUSH
21217: FOR_TO
21218: IFFALSE 21254
// if value = array [ i ] then
21220: LD_VAR 0 2
21224: PUSH
21225: LD_VAR 0 1
21229: PUSH
21230: LD_VAR 0 4
21234: ARRAY
21235: EQUAL
21236: IFFALSE 21252
// begin result := i ;
21238: LD_ADDR_VAR 0 3
21242: PUSH
21243: LD_VAR 0 4
21247: ST_TO_ADDR
// exit ;
21248: POP
21249: POP
21250: GO 21256
// end ;
21252: GO 21217
21254: POP
21255: POP
// end ;
21256: LD_VAR 0 3
21260: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21261: LD_INT 0
21263: PPUSH
// vc_chassis := chassis ;
21264: LD_ADDR_OWVAR 37
21268: PUSH
21269: LD_VAR 0 1
21273: ST_TO_ADDR
// vc_engine := engine ;
21274: LD_ADDR_OWVAR 39
21278: PUSH
21279: LD_VAR 0 2
21283: ST_TO_ADDR
// vc_control := control ;
21284: LD_ADDR_OWVAR 38
21288: PUSH
21289: LD_VAR 0 3
21293: ST_TO_ADDR
// vc_weapon := weapon ;
21294: LD_ADDR_OWVAR 40
21298: PUSH
21299: LD_VAR 0 4
21303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21304: LD_ADDR_OWVAR 41
21308: PUSH
21309: LD_VAR 0 5
21313: ST_TO_ADDR
// end ;
21314: LD_VAR 0 6
21318: RET
// export function WantPlant ( unit ) ; var task ; begin
21319: LD_INT 0
21321: PPUSH
21322: PPUSH
// result := false ;
21323: LD_ADDR_VAR 0 2
21327: PUSH
21328: LD_INT 0
21330: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21331: LD_ADDR_VAR 0 3
21335: PUSH
21336: LD_VAR 0 1
21340: PPUSH
21341: CALL_OW 437
21345: ST_TO_ADDR
// if task then
21346: LD_VAR 0 3
21350: IFFALSE 21378
// if task [ 1 ] [ 1 ] = p then
21352: LD_VAR 0 3
21356: PUSH
21357: LD_INT 1
21359: ARRAY
21360: PUSH
21361: LD_INT 1
21363: ARRAY
21364: PUSH
21365: LD_STRING p
21367: EQUAL
21368: IFFALSE 21378
// result := true ;
21370: LD_ADDR_VAR 0 2
21374: PUSH
21375: LD_INT 1
21377: ST_TO_ADDR
// end ;
21378: LD_VAR 0 2
21382: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21383: LD_INT 0
21385: PPUSH
21386: PPUSH
21387: PPUSH
21388: PPUSH
// if pos < 1 then
21389: LD_VAR 0 2
21393: PUSH
21394: LD_INT 1
21396: LESS
21397: IFFALSE 21401
// exit ;
21399: GO 21704
// if pos = 1 then
21401: LD_VAR 0 2
21405: PUSH
21406: LD_INT 1
21408: EQUAL
21409: IFFALSE 21442
// result := Replace ( arr , pos [ 1 ] , value ) else
21411: LD_ADDR_VAR 0 4
21415: PUSH
21416: LD_VAR 0 1
21420: PPUSH
21421: LD_VAR 0 2
21425: PUSH
21426: LD_INT 1
21428: ARRAY
21429: PPUSH
21430: LD_VAR 0 3
21434: PPUSH
21435: CALL_OW 1
21439: ST_TO_ADDR
21440: GO 21704
// begin tmp := arr ;
21442: LD_ADDR_VAR 0 6
21446: PUSH
21447: LD_VAR 0 1
21451: ST_TO_ADDR
// s_arr := [ tmp ] ;
21452: LD_ADDR_VAR 0 7
21456: PUSH
21457: LD_VAR 0 6
21461: PUSH
21462: EMPTY
21463: LIST
21464: ST_TO_ADDR
// for i = 1 to pos - 1 do
21465: LD_ADDR_VAR 0 5
21469: PUSH
21470: DOUBLE
21471: LD_INT 1
21473: DEC
21474: ST_TO_ADDR
21475: LD_VAR 0 2
21479: PUSH
21480: LD_INT 1
21482: MINUS
21483: PUSH
21484: FOR_TO
21485: IFFALSE 21530
// begin tmp := tmp [ pos [ i ] ] ;
21487: LD_ADDR_VAR 0 6
21491: PUSH
21492: LD_VAR 0 6
21496: PUSH
21497: LD_VAR 0 2
21501: PUSH
21502: LD_VAR 0 5
21506: ARRAY
21507: ARRAY
21508: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21509: LD_ADDR_VAR 0 7
21513: PUSH
21514: LD_VAR 0 7
21518: PUSH
21519: LD_VAR 0 6
21523: PUSH
21524: EMPTY
21525: LIST
21526: ADD
21527: ST_TO_ADDR
// end ;
21528: GO 21484
21530: POP
21531: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21532: LD_ADDR_VAR 0 6
21536: PUSH
21537: LD_VAR 0 6
21541: PPUSH
21542: LD_VAR 0 2
21546: PUSH
21547: LD_VAR 0 2
21551: ARRAY
21552: PPUSH
21553: LD_VAR 0 3
21557: PPUSH
21558: CALL_OW 1
21562: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21563: LD_ADDR_VAR 0 7
21567: PUSH
21568: LD_VAR 0 7
21572: PPUSH
21573: LD_VAR 0 7
21577: PPUSH
21578: LD_VAR 0 6
21582: PPUSH
21583: CALL_OW 1
21587: ST_TO_ADDR
// for i = s_arr downto 2 do
21588: LD_ADDR_VAR 0 5
21592: PUSH
21593: DOUBLE
21594: LD_VAR 0 7
21598: INC
21599: ST_TO_ADDR
21600: LD_INT 2
21602: PUSH
21603: FOR_DOWNTO
21604: IFFALSE 21688
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21606: LD_ADDR_VAR 0 6
21610: PUSH
21611: LD_VAR 0 7
21615: PUSH
21616: LD_VAR 0 5
21620: PUSH
21621: LD_INT 1
21623: MINUS
21624: ARRAY
21625: PPUSH
21626: LD_VAR 0 2
21630: PUSH
21631: LD_VAR 0 5
21635: PUSH
21636: LD_INT 1
21638: MINUS
21639: ARRAY
21640: PPUSH
21641: LD_VAR 0 7
21645: PUSH
21646: LD_VAR 0 5
21650: ARRAY
21651: PPUSH
21652: CALL_OW 1
21656: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21657: LD_ADDR_VAR 0 7
21661: PUSH
21662: LD_VAR 0 7
21666: PPUSH
21667: LD_VAR 0 5
21671: PUSH
21672: LD_INT 1
21674: MINUS
21675: PPUSH
21676: LD_VAR 0 6
21680: PPUSH
21681: CALL_OW 1
21685: ST_TO_ADDR
// end ;
21686: GO 21603
21688: POP
21689: POP
// result := s_arr [ 1 ] ;
21690: LD_ADDR_VAR 0 4
21694: PUSH
21695: LD_VAR 0 7
21699: PUSH
21700: LD_INT 1
21702: ARRAY
21703: ST_TO_ADDR
// end ; end ;
21704: LD_VAR 0 4
21708: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21709: LD_INT 0
21711: PPUSH
21712: PPUSH
// if not list then
21713: LD_VAR 0 1
21717: NOT
21718: IFFALSE 21722
// exit ;
21720: GO 21813
// i := list [ pos1 ] ;
21722: LD_ADDR_VAR 0 5
21726: PUSH
21727: LD_VAR 0 1
21731: PUSH
21732: LD_VAR 0 2
21736: ARRAY
21737: ST_TO_ADDR
// if not i then
21738: LD_VAR 0 5
21742: NOT
21743: IFFALSE 21747
// exit ;
21745: GO 21813
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21747: LD_ADDR_VAR 0 1
21751: PUSH
21752: LD_VAR 0 1
21756: PPUSH
21757: LD_VAR 0 2
21761: PPUSH
21762: LD_VAR 0 1
21766: PUSH
21767: LD_VAR 0 3
21771: ARRAY
21772: PPUSH
21773: CALL_OW 1
21777: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21778: LD_ADDR_VAR 0 1
21782: PUSH
21783: LD_VAR 0 1
21787: PPUSH
21788: LD_VAR 0 3
21792: PPUSH
21793: LD_VAR 0 5
21797: PPUSH
21798: CALL_OW 1
21802: ST_TO_ADDR
// result := list ;
21803: LD_ADDR_VAR 0 4
21807: PUSH
21808: LD_VAR 0 1
21812: ST_TO_ADDR
// end ;
21813: LD_VAR 0 4
21817: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21818: LD_INT 0
21820: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21821: LD_ADDR_VAR 0 5
21825: PUSH
21826: LD_VAR 0 1
21830: PPUSH
21831: CALL_OW 250
21835: PPUSH
21836: LD_VAR 0 1
21840: PPUSH
21841: CALL_OW 251
21845: PPUSH
21846: LD_VAR 0 2
21850: PPUSH
21851: LD_VAR 0 3
21855: PPUSH
21856: LD_VAR 0 4
21860: PPUSH
21861: CALL 22243 0 5
21865: ST_TO_ADDR
// end ;
21866: LD_VAR 0 5
21870: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21871: LD_INT 0
21873: PPUSH
21874: PPUSH
21875: PPUSH
21876: PPUSH
// if not list or not unit then
21877: LD_VAR 0 2
21881: NOT
21882: IFTRUE 21891
21884: PUSH
21885: LD_VAR 0 1
21889: NOT
21890: OR
21891: IFFALSE 21895
// exit ;
21893: GO 22238
// result := [ ] ;
21895: LD_ADDR_VAR 0 5
21899: PUSH
21900: EMPTY
21901: ST_TO_ADDR
// for i in list do
21902: LD_ADDR_VAR 0 6
21906: PUSH
21907: LD_VAR 0 2
21911: PUSH
21912: FOR_IN
21913: IFFALSE 22131
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21915: LD_ADDR_VAR 0 8
21919: PUSH
21920: LD_VAR 0 1
21924: PPUSH
21925: LD_VAR 0 6
21929: PUSH
21930: LD_INT 1
21932: ARRAY
21933: PPUSH
21934: LD_VAR 0 6
21938: PUSH
21939: LD_INT 2
21941: ARRAY
21942: PPUSH
21943: CALL_OW 297
21947: ST_TO_ADDR
// if not Count ( result ) then
21948: LD_VAR 0 5
21952: PPUSH
21953: CALL 18465 0 1
21957: NOT
21958: IFFALSE 21991
// begin result := Join ( result , [ i , tmp ] ) ;
21960: LD_ADDR_VAR 0 5
21964: PUSH
21965: LD_VAR 0 5
21969: PPUSH
21970: LD_VAR 0 6
21974: PUSH
21975: LD_VAR 0 8
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PPUSH
21984: CALL 54441 0 2
21988: ST_TO_ADDR
// continue ;
21989: GO 21912
// end ; if result [ result ] [ 2 ] <= tmp then
21991: LD_VAR 0 5
21995: PUSH
21996: LD_VAR 0 5
22000: ARRAY
22001: PUSH
22002: LD_INT 2
22004: ARRAY
22005: PUSH
22006: LD_VAR 0 8
22010: LESSEQUAL
22011: IFFALSE 22044
// result := Join ( result , [ i , tmp ] ) else
22013: LD_ADDR_VAR 0 5
22017: PUSH
22018: LD_VAR 0 5
22022: PPUSH
22023: LD_VAR 0 6
22027: PUSH
22028: LD_VAR 0 8
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PPUSH
22037: CALL 54441 0 2
22041: ST_TO_ADDR
22042: GO 22129
// begin for j := 1 to Count ( result ) do
22044: LD_ADDR_VAR 0 7
22048: PUSH
22049: DOUBLE
22050: LD_INT 1
22052: DEC
22053: ST_TO_ADDR
22054: LD_VAR 0 5
22058: PPUSH
22059: CALL 18465 0 1
22063: PUSH
22064: FOR_TO
22065: IFFALSE 22127
// begin if tmp < result [ j ] [ 2 ] then
22067: LD_VAR 0 8
22071: PUSH
22072: LD_VAR 0 5
22076: PUSH
22077: LD_VAR 0 7
22081: ARRAY
22082: PUSH
22083: LD_INT 2
22085: ARRAY
22086: LESS
22087: IFFALSE 22125
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22089: LD_ADDR_VAR 0 5
22093: PUSH
22094: LD_VAR 0 5
22098: PPUSH
22099: LD_VAR 0 7
22103: PPUSH
22104: LD_VAR 0 6
22108: PUSH
22109: LD_VAR 0 8
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PPUSH
22118: CALL_OW 2
22122: ST_TO_ADDR
// break ;
22123: GO 22127
// end ; end ;
22125: GO 22064
22127: POP
22128: POP
// end ; end ;
22129: GO 21912
22131: POP
22132: POP
// if result and not asc then
22133: LD_VAR 0 5
22137: IFFALSE 22146
22139: PUSH
22140: LD_VAR 0 3
22144: NOT
22145: AND
22146: IFFALSE 22163
// result := ReverseArray ( result ) ;
22148: LD_ADDR_VAR 0 5
22152: PUSH
22153: LD_VAR 0 5
22157: PPUSH
22158: CALL 49521 0 1
22162: ST_TO_ADDR
// tmp := [ ] ;
22163: LD_ADDR_VAR 0 8
22167: PUSH
22168: EMPTY
22169: ST_TO_ADDR
// if mode then
22170: LD_VAR 0 4
22174: IFFALSE 22238
// begin for i := 1 to result do
22176: LD_ADDR_VAR 0 6
22180: PUSH
22181: DOUBLE
22182: LD_INT 1
22184: DEC
22185: ST_TO_ADDR
22186: LD_VAR 0 5
22190: PUSH
22191: FOR_TO
22192: IFFALSE 22226
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22194: LD_ADDR_VAR 0 8
22198: PUSH
22199: LD_VAR 0 8
22203: PPUSH
22204: LD_VAR 0 5
22208: PUSH
22209: LD_VAR 0 6
22213: ARRAY
22214: PUSH
22215: LD_INT 1
22217: ARRAY
22218: PPUSH
22219: CALL 54441 0 2
22223: ST_TO_ADDR
22224: GO 22191
22226: POP
22227: POP
// result := tmp ;
22228: LD_ADDR_VAR 0 5
22232: PUSH
22233: LD_VAR 0 8
22237: ST_TO_ADDR
// end ; end ;
22238: LD_VAR 0 5
22242: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22243: LD_INT 0
22245: PPUSH
22246: PPUSH
22247: PPUSH
22248: PPUSH
// if not list then
22249: LD_VAR 0 3
22253: NOT
22254: IFFALSE 22258
// exit ;
22256: GO 22648
// result := [ ] ;
22258: LD_ADDR_VAR 0 6
22262: PUSH
22263: EMPTY
22264: ST_TO_ADDR
// for i in list do
22265: LD_ADDR_VAR 0 7
22269: PUSH
22270: LD_VAR 0 3
22274: PUSH
22275: FOR_IN
22276: IFFALSE 22478
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22278: LD_ADDR_VAR 0 9
22282: PUSH
22283: LD_VAR 0 7
22287: PPUSH
22288: LD_VAR 0 1
22292: PPUSH
22293: LD_VAR 0 2
22297: PPUSH
22298: CALL_OW 297
22302: ST_TO_ADDR
// if not result then
22303: LD_VAR 0 6
22307: NOT
22308: IFFALSE 22334
// result := [ [ i , tmp ] ] else
22310: LD_ADDR_VAR 0 6
22314: PUSH
22315: LD_VAR 0 7
22319: PUSH
22320: LD_VAR 0 9
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: EMPTY
22330: LIST
22331: ST_TO_ADDR
22332: GO 22476
// begin if result [ result ] [ 2 ] <= tmp then
22334: LD_VAR 0 6
22338: PUSH
22339: LD_VAR 0 6
22343: ARRAY
22344: PUSH
22345: LD_INT 2
22347: ARRAY
22348: PUSH
22349: LD_VAR 0 9
22353: LESSEQUAL
22354: IFFALSE 22396
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22356: LD_ADDR_VAR 0 6
22360: PUSH
22361: LD_VAR 0 6
22365: PPUSH
22366: LD_VAR 0 6
22370: PUSH
22371: LD_INT 1
22373: PLUS
22374: PPUSH
22375: LD_VAR 0 7
22379: PUSH
22380: LD_VAR 0 9
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PPUSH
22389: CALL_OW 2
22393: ST_TO_ADDR
22394: GO 22476
// for j := 1 to result do
22396: LD_ADDR_VAR 0 8
22400: PUSH
22401: DOUBLE
22402: LD_INT 1
22404: DEC
22405: ST_TO_ADDR
22406: LD_VAR 0 6
22410: PUSH
22411: FOR_TO
22412: IFFALSE 22474
// begin if tmp < result [ j ] [ 2 ] then
22414: LD_VAR 0 9
22418: PUSH
22419: LD_VAR 0 6
22423: PUSH
22424: LD_VAR 0 8
22428: ARRAY
22429: PUSH
22430: LD_INT 2
22432: ARRAY
22433: LESS
22434: IFFALSE 22472
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22436: LD_ADDR_VAR 0 6
22440: PUSH
22441: LD_VAR 0 6
22445: PPUSH
22446: LD_VAR 0 8
22450: PPUSH
22451: LD_VAR 0 7
22455: PUSH
22456: LD_VAR 0 9
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PPUSH
22465: CALL_OW 2
22469: ST_TO_ADDR
// break ;
22470: GO 22474
// end ; end ;
22472: GO 22411
22474: POP
22475: POP
// end ; end ;
22476: GO 22275
22478: POP
22479: POP
// if result and not asc then
22480: LD_VAR 0 6
22484: IFFALSE 22493
22486: PUSH
22487: LD_VAR 0 4
22491: NOT
22492: AND
22493: IFFALSE 22568
// begin tmp := result ;
22495: LD_ADDR_VAR 0 9
22499: PUSH
22500: LD_VAR 0 6
22504: ST_TO_ADDR
// for i = tmp downto 1 do
22505: LD_ADDR_VAR 0 7
22509: PUSH
22510: DOUBLE
22511: LD_VAR 0 9
22515: INC
22516: ST_TO_ADDR
22517: LD_INT 1
22519: PUSH
22520: FOR_DOWNTO
22521: IFFALSE 22566
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22523: LD_ADDR_VAR 0 6
22527: PUSH
22528: LD_VAR 0 6
22532: PPUSH
22533: LD_VAR 0 9
22537: PUSH
22538: LD_VAR 0 7
22542: MINUS
22543: PUSH
22544: LD_INT 1
22546: PLUS
22547: PPUSH
22548: LD_VAR 0 9
22552: PUSH
22553: LD_VAR 0 7
22557: ARRAY
22558: PPUSH
22559: CALL_OW 1
22563: ST_TO_ADDR
22564: GO 22520
22566: POP
22567: POP
// end ; tmp := [ ] ;
22568: LD_ADDR_VAR 0 9
22572: PUSH
22573: EMPTY
22574: ST_TO_ADDR
// if mode then
22575: LD_VAR 0 5
22579: IFFALSE 22648
// begin for i = 1 to result do
22581: LD_ADDR_VAR 0 7
22585: PUSH
22586: DOUBLE
22587: LD_INT 1
22589: DEC
22590: ST_TO_ADDR
22591: LD_VAR 0 6
22595: PUSH
22596: FOR_TO
22597: IFFALSE 22636
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22599: LD_ADDR_VAR 0 9
22603: PUSH
22604: LD_VAR 0 9
22608: PPUSH
22609: LD_VAR 0 7
22613: PPUSH
22614: LD_VAR 0 6
22618: PUSH
22619: LD_VAR 0 7
22623: ARRAY
22624: PUSH
22625: LD_INT 1
22627: ARRAY
22628: PPUSH
22629: CALL_OW 1
22633: ST_TO_ADDR
22634: GO 22596
22636: POP
22637: POP
// result := tmp ;
22638: LD_ADDR_VAR 0 6
22642: PUSH
22643: LD_VAR 0 9
22647: ST_TO_ADDR
// end ; end ;
22648: LD_VAR 0 6
22652: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22653: LD_INT 0
22655: PPUSH
22656: PPUSH
22657: PPUSH
22658: PPUSH
22659: PPUSH
22660: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22661: LD_ADDR_VAR 0 5
22665: PUSH
22666: LD_INT 0
22668: PUSH
22669: LD_INT 0
22671: PUSH
22672: LD_INT 0
22674: PUSH
22675: EMPTY
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: ST_TO_ADDR
// if not x or not y then
22683: LD_VAR 0 2
22687: NOT
22688: IFTRUE 22697
22690: PUSH
22691: LD_VAR 0 3
22695: NOT
22696: OR
22697: IFFALSE 22701
// exit ;
22699: GO 24357
// if not range then
22701: LD_VAR 0 4
22705: NOT
22706: IFFALSE 22716
// range := 10 ;
22708: LD_ADDR_VAR 0 4
22712: PUSH
22713: LD_INT 10
22715: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22716: LD_ADDR_VAR 0 8
22720: PUSH
22721: LD_INT 81
22723: PUSH
22724: LD_VAR 0 1
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 92
22735: PUSH
22736: LD_VAR 0 2
22740: PUSH
22741: LD_VAR 0 3
22745: PUSH
22746: LD_VAR 0 4
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 3
22759: PUSH
22760: LD_INT 21
22762: PUSH
22763: LD_INT 3
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: LIST
22778: PPUSH
22779: CALL_OW 69
22783: ST_TO_ADDR
// if not tmp then
22784: LD_VAR 0 8
22788: NOT
22789: IFFALSE 22793
// exit ;
22791: GO 24357
// for i in tmp do
22793: LD_ADDR_VAR 0 6
22797: PUSH
22798: LD_VAR 0 8
22802: PUSH
22803: FOR_IN
22804: IFFALSE 24332
// begin points := [ 0 , 0 , 0 ] ;
22806: LD_ADDR_VAR 0 9
22810: PUSH
22811: LD_INT 0
22813: PUSH
22814: LD_INT 0
22816: PUSH
22817: LD_INT 0
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: LIST
22824: ST_TO_ADDR
// bpoints := 1 ;
22825: LD_ADDR_VAR 0 10
22829: PUSH
22830: LD_INT 1
22832: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22833: LD_VAR 0 6
22837: PPUSH
22838: CALL_OW 247
22842: PUSH
22843: LD_INT 1
22845: DOUBLE
22846: EQUAL
22847: IFTRUE 22851
22849: GO 23433
22851: POP
// begin if GetClass ( i ) = 1 then
22852: LD_VAR 0 6
22856: PPUSH
22857: CALL_OW 257
22861: PUSH
22862: LD_INT 1
22864: EQUAL
22865: IFFALSE 22886
// points := [ 10 , 5 , 3 ] ;
22867: LD_ADDR_VAR 0 9
22871: PUSH
22872: LD_INT 10
22874: PUSH
22875: LD_INT 5
22877: PUSH
22878: LD_INT 3
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: LIST
22885: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22886: LD_VAR 0 6
22890: PPUSH
22891: CALL_OW 257
22895: PUSH
22896: LD_INT 2
22898: PUSH
22899: LD_INT 3
22901: PUSH
22902: LD_INT 4
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: LIST
22909: IN
22910: IFFALSE 22931
// points := [ 3 , 2 , 1 ] ;
22912: LD_ADDR_VAR 0 9
22916: PUSH
22917: LD_INT 3
22919: PUSH
22920: LD_INT 2
22922: PUSH
22923: LD_INT 1
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: LIST
22930: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22931: LD_VAR 0 6
22935: PPUSH
22936: CALL_OW 257
22940: PUSH
22941: LD_INT 5
22943: EQUAL
22944: IFFALSE 22965
// points := [ 130 , 5 , 2 ] ;
22946: LD_ADDR_VAR 0 9
22950: PUSH
22951: LD_INT 130
22953: PUSH
22954: LD_INT 5
22956: PUSH
22957: LD_INT 2
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: LIST
22964: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22965: LD_VAR 0 6
22969: PPUSH
22970: CALL_OW 257
22974: PUSH
22975: LD_INT 8
22977: EQUAL
22978: IFFALSE 22999
// points := [ 35 , 35 , 30 ] ;
22980: LD_ADDR_VAR 0 9
22984: PUSH
22985: LD_INT 35
22987: PUSH
22988: LD_INT 35
22990: PUSH
22991: LD_INT 30
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: LIST
22998: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22999: LD_VAR 0 6
23003: PPUSH
23004: CALL_OW 257
23008: PUSH
23009: LD_INT 9
23011: EQUAL
23012: IFFALSE 23033
// points := [ 20 , 55 , 40 ] ;
23014: LD_ADDR_VAR 0 9
23018: PUSH
23019: LD_INT 20
23021: PUSH
23022: LD_INT 55
23024: PUSH
23025: LD_INT 40
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: LIST
23032: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23033: LD_VAR 0 6
23037: PPUSH
23038: CALL_OW 257
23042: PUSH
23043: LD_INT 12
23045: PUSH
23046: LD_INT 16
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: IN
23053: IFFALSE 23074
// points := [ 5 , 3 , 2 ] ;
23055: LD_ADDR_VAR 0 9
23059: PUSH
23060: LD_INT 5
23062: PUSH
23063: LD_INT 3
23065: PUSH
23066: LD_INT 2
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: LIST
23073: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23074: LD_VAR 0 6
23078: PPUSH
23079: CALL_OW 257
23083: PUSH
23084: LD_INT 17
23086: EQUAL
23087: IFFALSE 23108
// points := [ 100 , 50 , 75 ] ;
23089: LD_ADDR_VAR 0 9
23093: PUSH
23094: LD_INT 100
23096: PUSH
23097: LD_INT 50
23099: PUSH
23100: LD_INT 75
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: LIST
23107: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23108: LD_VAR 0 6
23112: PPUSH
23113: CALL_OW 257
23117: PUSH
23118: LD_INT 15
23120: EQUAL
23121: IFFALSE 23142
// points := [ 10 , 5 , 3 ] ;
23123: LD_ADDR_VAR 0 9
23127: PUSH
23128: LD_INT 10
23130: PUSH
23131: LD_INT 5
23133: PUSH
23134: LD_INT 3
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: LIST
23141: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23142: LD_VAR 0 6
23146: PPUSH
23147: CALL_OW 257
23151: PUSH
23152: LD_INT 14
23154: EQUAL
23155: IFFALSE 23176
// points := [ 10 , 0 , 0 ] ;
23157: LD_ADDR_VAR 0 9
23161: PUSH
23162: LD_INT 10
23164: PUSH
23165: LD_INT 0
23167: PUSH
23168: LD_INT 0
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23176: LD_VAR 0 6
23180: PPUSH
23181: CALL_OW 257
23185: PUSH
23186: LD_INT 11
23188: EQUAL
23189: IFFALSE 23210
// points := [ 30 , 10 , 5 ] ;
23191: LD_ADDR_VAR 0 9
23195: PUSH
23196: LD_INT 30
23198: PUSH
23199: LD_INT 10
23201: PUSH
23202: LD_INT 5
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: LIST
23209: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23210: LD_VAR 0 1
23214: PPUSH
23215: LD_INT 5
23217: PPUSH
23218: CALL_OW 321
23222: PUSH
23223: LD_INT 2
23225: EQUAL
23226: IFFALSE 23243
// bpoints := bpoints * 1.8 ;
23228: LD_ADDR_VAR 0 10
23232: PUSH
23233: LD_VAR 0 10
23237: PUSH
23238: LD_REAL  1.80000000000000E+0000
23241: MUL
23242: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23243: LD_VAR 0 6
23247: PPUSH
23248: CALL_OW 257
23252: PUSH
23253: LD_INT 1
23255: PUSH
23256: LD_INT 2
23258: PUSH
23259: LD_INT 3
23261: PUSH
23262: LD_INT 4
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: IN
23271: IFFALSE 23291
23273: PUSH
23274: LD_VAR 0 1
23278: PPUSH
23279: LD_INT 51
23281: PPUSH
23282: CALL_OW 321
23286: PUSH
23287: LD_INT 2
23289: EQUAL
23290: AND
23291: IFFALSE 23308
// bpoints := bpoints * 1.2 ;
23293: LD_ADDR_VAR 0 10
23297: PUSH
23298: LD_VAR 0 10
23302: PUSH
23303: LD_REAL  1.20000000000000E+0000
23306: MUL
23307: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23308: LD_VAR 0 6
23312: PPUSH
23313: CALL_OW 257
23317: PUSH
23318: LD_INT 5
23320: PUSH
23321: LD_INT 7
23323: PUSH
23324: LD_INT 9
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: LIST
23331: IN
23332: IFFALSE 23352
23334: PUSH
23335: LD_VAR 0 1
23339: PPUSH
23340: LD_INT 52
23342: PPUSH
23343: CALL_OW 321
23347: PUSH
23348: LD_INT 2
23350: EQUAL
23351: AND
23352: IFFALSE 23369
// bpoints := bpoints * 1.5 ;
23354: LD_ADDR_VAR 0 10
23358: PUSH
23359: LD_VAR 0 10
23363: PUSH
23364: LD_REAL  1.50000000000000E+0000
23367: MUL
23368: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23369: LD_VAR 0 1
23373: PPUSH
23374: LD_INT 66
23376: PPUSH
23377: CALL_OW 321
23381: PUSH
23382: LD_INT 2
23384: EQUAL
23385: IFFALSE 23402
// bpoints := bpoints * 1.1 ;
23387: LD_ADDR_VAR 0 10
23391: PUSH
23392: LD_VAR 0 10
23396: PUSH
23397: LD_REAL  1.10000000000000E+0000
23400: MUL
23401: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23402: LD_ADDR_VAR 0 10
23406: PUSH
23407: LD_VAR 0 10
23411: PUSH
23412: LD_VAR 0 6
23416: PPUSH
23417: LD_INT 1
23419: PPUSH
23420: CALL_OW 259
23424: PUSH
23425: LD_REAL  1.15000000000000E+0000
23428: MUL
23429: MUL
23430: ST_TO_ADDR
// end ; unit_vehicle :
23431: GO 24261
23433: LD_INT 2
23435: DOUBLE
23436: EQUAL
23437: IFTRUE 23441
23439: GO 24249
23441: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23442: LD_VAR 0 6
23446: PPUSH
23447: CALL_OW 264
23451: PUSH
23452: LD_INT 2
23454: PUSH
23455: LD_INT 42
23457: PUSH
23458: LD_INT 24
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: LIST
23465: IN
23466: IFFALSE 23487
// points := [ 25 , 5 , 3 ] ;
23468: LD_ADDR_VAR 0 9
23472: PUSH
23473: LD_INT 25
23475: PUSH
23476: LD_INT 5
23478: PUSH
23479: LD_INT 3
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: LIST
23486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23487: LD_VAR 0 6
23491: PPUSH
23492: CALL_OW 264
23496: PUSH
23497: LD_INT 4
23499: PUSH
23500: LD_INT 43
23502: PUSH
23503: LD_INT 25
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: LIST
23510: IN
23511: IFFALSE 23532
// points := [ 40 , 15 , 5 ] ;
23513: LD_ADDR_VAR 0 9
23517: PUSH
23518: LD_INT 40
23520: PUSH
23521: LD_INT 15
23523: PUSH
23524: LD_INT 5
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23532: LD_VAR 0 6
23536: PPUSH
23537: CALL_OW 264
23541: PUSH
23542: LD_INT 3
23544: PUSH
23545: LD_INT 23
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: IN
23552: IFFALSE 23573
// points := [ 7 , 25 , 8 ] ;
23554: LD_ADDR_VAR 0 9
23558: PUSH
23559: LD_INT 7
23561: PUSH
23562: LD_INT 25
23564: PUSH
23565: LD_INT 8
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: LIST
23572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23573: LD_VAR 0 6
23577: PPUSH
23578: CALL_OW 264
23582: PUSH
23583: LD_INT 5
23585: PUSH
23586: LD_INT 27
23588: PUSH
23589: LD_INT 44
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: LIST
23596: IN
23597: IFFALSE 23618
// points := [ 14 , 50 , 16 ] ;
23599: LD_ADDR_VAR 0 9
23603: PUSH
23604: LD_INT 14
23606: PUSH
23607: LD_INT 50
23609: PUSH
23610: LD_INT 16
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: LIST
23617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23618: LD_VAR 0 6
23622: PPUSH
23623: CALL_OW 264
23627: PUSH
23628: LD_INT 6
23630: PUSH
23631: LD_INT 46
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: IN
23638: IFFALSE 23659
// points := [ 32 , 120 , 70 ] ;
23640: LD_ADDR_VAR 0 9
23644: PUSH
23645: LD_INT 32
23647: PUSH
23648: LD_INT 120
23650: PUSH
23651: LD_INT 70
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: LIST
23658: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23659: LD_VAR 0 6
23663: PPUSH
23664: CALL_OW 264
23668: PUSH
23669: LD_INT 7
23671: PUSH
23672: LD_INT 28
23674: PUSH
23675: LD_INT 45
23677: PUSH
23678: LD_INT 92
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: IN
23687: IFFALSE 23708
// points := [ 35 , 20 , 45 ] ;
23689: LD_ADDR_VAR 0 9
23693: PUSH
23694: LD_INT 35
23696: PUSH
23697: LD_INT 20
23699: PUSH
23700: LD_INT 45
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: LIST
23707: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23708: LD_VAR 0 6
23712: PPUSH
23713: CALL_OW 264
23717: PUSH
23718: LD_INT 47
23720: PUSH
23721: EMPTY
23722: LIST
23723: IN
23724: IFFALSE 23745
// points := [ 67 , 45 , 75 ] ;
23726: LD_ADDR_VAR 0 9
23730: PUSH
23731: LD_INT 67
23733: PUSH
23734: LD_INT 45
23736: PUSH
23737: LD_INT 75
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: LIST
23744: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23745: LD_VAR 0 6
23749: PPUSH
23750: CALL_OW 264
23754: PUSH
23755: LD_INT 26
23757: PUSH
23758: EMPTY
23759: LIST
23760: IN
23761: IFFALSE 23782
// points := [ 120 , 30 , 80 ] ;
23763: LD_ADDR_VAR 0 9
23767: PUSH
23768: LD_INT 120
23770: PUSH
23771: LD_INT 30
23773: PUSH
23774: LD_INT 80
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: LIST
23781: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23782: LD_VAR 0 6
23786: PPUSH
23787: CALL_OW 264
23791: PUSH
23792: LD_INT 22
23794: PUSH
23795: EMPTY
23796: LIST
23797: IN
23798: IFFALSE 23819
// points := [ 40 , 1 , 1 ] ;
23800: LD_ADDR_VAR 0 9
23804: PUSH
23805: LD_INT 40
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: LD_INT 1
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: LIST
23818: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23819: LD_VAR 0 6
23823: PPUSH
23824: CALL_OW 264
23828: PUSH
23829: LD_INT 29
23831: PUSH
23832: EMPTY
23833: LIST
23834: IN
23835: IFFALSE 23856
// points := [ 70 , 200 , 400 ] ;
23837: LD_ADDR_VAR 0 9
23841: PUSH
23842: LD_INT 70
23844: PUSH
23845: LD_INT 200
23847: PUSH
23848: LD_INT 400
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: LIST
23855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23856: LD_VAR 0 6
23860: PPUSH
23861: CALL_OW 264
23865: PUSH
23866: LD_INT 14
23868: PUSH
23869: LD_INT 53
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: IN
23876: IFFALSE 23897
// points := [ 40 , 10 , 20 ] ;
23878: LD_ADDR_VAR 0 9
23882: PUSH
23883: LD_INT 40
23885: PUSH
23886: LD_INT 10
23888: PUSH
23889: LD_INT 20
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: LIST
23896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23897: LD_VAR 0 6
23901: PPUSH
23902: CALL_OW 264
23906: PUSH
23907: LD_INT 9
23909: PUSH
23910: EMPTY
23911: LIST
23912: IN
23913: IFFALSE 23934
// points := [ 5 , 70 , 20 ] ;
23915: LD_ADDR_VAR 0 9
23919: PUSH
23920: LD_INT 5
23922: PUSH
23923: LD_INT 70
23925: PUSH
23926: LD_INT 20
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23934: LD_VAR 0 6
23938: PPUSH
23939: CALL_OW 264
23943: PUSH
23944: LD_INT 10
23946: PUSH
23947: EMPTY
23948: LIST
23949: IN
23950: IFFALSE 23971
// points := [ 35 , 110 , 70 ] ;
23952: LD_ADDR_VAR 0 9
23956: PUSH
23957: LD_INT 35
23959: PUSH
23960: LD_INT 110
23962: PUSH
23963: LD_INT 70
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: LIST
23970: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23971: LD_VAR 0 6
23975: PPUSH
23976: CALL_OW 265
23980: PUSH
23981: LD_INT 25
23983: EQUAL
23984: IFFALSE 24005
// points := [ 80 , 65 , 100 ] ;
23986: LD_ADDR_VAR 0 9
23990: PUSH
23991: LD_INT 80
23993: PUSH
23994: LD_INT 65
23996: PUSH
23997: LD_INT 100
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: LIST
24004: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24005: LD_VAR 0 6
24009: PPUSH
24010: CALL_OW 263
24014: PUSH
24015: LD_INT 1
24017: EQUAL
24018: IFFALSE 24053
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24020: LD_ADDR_VAR 0 10
24024: PUSH
24025: LD_VAR 0 10
24029: PUSH
24030: LD_VAR 0 6
24034: PPUSH
24035: CALL_OW 311
24039: PPUSH
24040: LD_INT 3
24042: PPUSH
24043: CALL_OW 259
24047: PUSH
24048: LD_INT 4
24050: MUL
24051: MUL
24052: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24053: LD_VAR 0 6
24057: PPUSH
24058: CALL_OW 263
24062: PUSH
24063: LD_INT 2
24065: EQUAL
24066: IFFALSE 24117
// begin j := IsControledBy ( i ) ;
24068: LD_ADDR_VAR 0 7
24072: PUSH
24073: LD_VAR 0 6
24077: PPUSH
24078: CALL_OW 312
24082: ST_TO_ADDR
// if j then
24083: LD_VAR 0 7
24087: IFFALSE 24117
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24089: LD_ADDR_VAR 0 10
24093: PUSH
24094: LD_VAR 0 10
24098: PUSH
24099: LD_VAR 0 7
24103: PPUSH
24104: LD_INT 3
24106: PPUSH
24107: CALL_OW 259
24111: PUSH
24112: LD_INT 3
24114: MUL
24115: MUL
24116: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24117: LD_VAR 0 6
24121: PPUSH
24122: CALL_OW 264
24126: PUSH
24127: LD_INT 5
24129: PUSH
24130: LD_INT 6
24132: PUSH
24133: LD_INT 46
24135: PUSH
24136: LD_INT 44
24138: PUSH
24139: LD_INT 47
24141: PUSH
24142: LD_INT 45
24144: PUSH
24145: LD_INT 28
24147: PUSH
24148: LD_INT 7
24150: PUSH
24151: LD_INT 27
24153: PUSH
24154: LD_INT 29
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: IN
24169: IFFALSE 24189
24171: PUSH
24172: LD_VAR 0 1
24176: PPUSH
24177: LD_INT 52
24179: PPUSH
24180: CALL_OW 321
24184: PUSH
24185: LD_INT 2
24187: EQUAL
24188: AND
24189: IFFALSE 24206
// bpoints := bpoints * 1.2 ;
24191: LD_ADDR_VAR 0 10
24195: PUSH
24196: LD_VAR 0 10
24200: PUSH
24201: LD_REAL  1.20000000000000E+0000
24204: MUL
24205: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24206: LD_VAR 0 6
24210: PPUSH
24211: CALL_OW 264
24215: PUSH
24216: LD_INT 6
24218: PUSH
24219: LD_INT 46
24221: PUSH
24222: LD_INT 47
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: LIST
24229: IN
24230: IFFALSE 24247
// bpoints := bpoints * 1.2 ;
24232: LD_ADDR_VAR 0 10
24236: PUSH
24237: LD_VAR 0 10
24241: PUSH
24242: LD_REAL  1.20000000000000E+0000
24245: MUL
24246: ST_TO_ADDR
// end ; unit_building :
24247: GO 24261
24249: LD_INT 3
24251: DOUBLE
24252: EQUAL
24253: IFTRUE 24257
24255: GO 24260
24257: POP
// ; end ;
24258: GO 24261
24260: POP
// for j = 1 to 3 do
24261: LD_ADDR_VAR 0 7
24265: PUSH
24266: DOUBLE
24267: LD_INT 1
24269: DEC
24270: ST_TO_ADDR
24271: LD_INT 3
24273: PUSH
24274: FOR_TO
24275: IFFALSE 24328
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24277: LD_ADDR_VAR 0 5
24281: PUSH
24282: LD_VAR 0 5
24286: PPUSH
24287: LD_VAR 0 7
24291: PPUSH
24292: LD_VAR 0 5
24296: PUSH
24297: LD_VAR 0 7
24301: ARRAY
24302: PUSH
24303: LD_VAR 0 9
24307: PUSH
24308: LD_VAR 0 7
24312: ARRAY
24313: PUSH
24314: LD_VAR 0 10
24318: MUL
24319: PLUS
24320: PPUSH
24321: CALL_OW 1
24325: ST_TO_ADDR
24326: GO 24274
24328: POP
24329: POP
// end ;
24330: GO 22803
24332: POP
24333: POP
// result := Replace ( result , 4 , tmp ) ;
24334: LD_ADDR_VAR 0 5
24338: PUSH
24339: LD_VAR 0 5
24343: PPUSH
24344: LD_INT 4
24346: PPUSH
24347: LD_VAR 0 8
24351: PPUSH
24352: CALL_OW 1
24356: ST_TO_ADDR
// end ;
24357: LD_VAR 0 5
24361: RET
// export function DangerAtRange ( unit , range ) ; begin
24362: LD_INT 0
24364: PPUSH
// if not unit then
24365: LD_VAR 0 1
24369: NOT
24370: IFFALSE 24374
// exit ;
24372: GO 24419
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24374: LD_ADDR_VAR 0 3
24378: PUSH
24379: LD_VAR 0 1
24383: PPUSH
24384: CALL_OW 255
24388: PPUSH
24389: LD_VAR 0 1
24393: PPUSH
24394: CALL_OW 250
24398: PPUSH
24399: LD_VAR 0 1
24403: PPUSH
24404: CALL_OW 251
24408: PPUSH
24409: LD_VAR 0 2
24413: PPUSH
24414: CALL 22653 0 4
24418: ST_TO_ADDR
// end ;
24419: LD_VAR 0 3
24423: RET
// export function DangerInArea ( side , area ) ; begin
24424: LD_INT 0
24426: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24427: LD_ADDR_VAR 0 3
24431: PUSH
24432: LD_VAR 0 2
24436: PPUSH
24437: LD_INT 81
24439: PUSH
24440: LD_VAR 0 1
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PPUSH
24449: CALL_OW 70
24453: ST_TO_ADDR
// end ;
24454: LD_VAR 0 3
24458: RET
// export function IsExtension ( b ) ; begin
24459: LD_INT 0
24461: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24462: LD_ADDR_VAR 0 2
24466: PUSH
24467: LD_VAR 0 1
24471: PUSH
24472: LD_INT 23
24474: PUSH
24475: LD_INT 20
24477: PUSH
24478: LD_INT 22
24480: PUSH
24481: LD_INT 17
24483: PUSH
24484: LD_INT 24
24486: PUSH
24487: LD_INT 21
24489: PUSH
24490: LD_INT 19
24492: PUSH
24493: LD_INT 16
24495: PUSH
24496: LD_INT 25
24498: PUSH
24499: LD_INT 18
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: IN
24514: ST_TO_ADDR
// end ;
24515: LD_VAR 0 2
24519: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24520: LD_INT 0
24522: PPUSH
24523: PPUSH
24524: PPUSH
// result := [ ] ;
24525: LD_ADDR_VAR 0 4
24529: PUSH
24530: EMPTY
24531: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24532: LD_ADDR_VAR 0 5
24536: PUSH
24537: LD_VAR 0 2
24541: PPUSH
24542: LD_INT 21
24544: PUSH
24545: LD_INT 3
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PPUSH
24552: CALL_OW 70
24556: ST_TO_ADDR
// if not tmp then
24557: LD_VAR 0 5
24561: NOT
24562: IFFALSE 24566
// exit ;
24564: GO 24630
// if checkLink then
24566: LD_VAR 0 3
24570: IFFALSE 24620
// begin for i in tmp do
24572: LD_ADDR_VAR 0 6
24576: PUSH
24577: LD_VAR 0 5
24581: PUSH
24582: FOR_IN
24583: IFFALSE 24618
// if GetBase ( i ) <> base then
24585: LD_VAR 0 6
24589: PPUSH
24590: CALL_OW 274
24594: PUSH
24595: LD_VAR 0 1
24599: NONEQUAL
24600: IFFALSE 24616
// ComLinkToBase ( base , i ) ;
24602: LD_VAR 0 1
24606: PPUSH
24607: LD_VAR 0 6
24611: PPUSH
24612: CALL_OW 169
24616: GO 24582
24618: POP
24619: POP
// end ; result := tmp ;
24620: LD_ADDR_VAR 0 4
24624: PUSH
24625: LD_VAR 0 5
24629: ST_TO_ADDR
// end ;
24630: LD_VAR 0 4
24634: RET
// export function ComComplete ( units , b ) ; var i ; begin
24635: LD_INT 0
24637: PPUSH
24638: PPUSH
// if not units then
24639: LD_VAR 0 1
24643: NOT
24644: IFFALSE 24648
// exit ;
24646: GO 24738
// for i in units do
24648: LD_ADDR_VAR 0 4
24652: PUSH
24653: LD_VAR 0 1
24657: PUSH
24658: FOR_IN
24659: IFFALSE 24736
// if BuildingStatus ( b ) = bs_build then
24661: LD_VAR 0 2
24665: PPUSH
24666: CALL_OW 461
24670: PUSH
24671: LD_INT 1
24673: EQUAL
24674: IFFALSE 24734
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24676: LD_VAR 0 4
24680: PPUSH
24681: LD_STRING h
24683: PUSH
24684: LD_VAR 0 2
24688: PPUSH
24689: CALL_OW 250
24693: PUSH
24694: LD_VAR 0 2
24698: PPUSH
24699: CALL_OW 251
24703: PUSH
24704: LD_VAR 0 2
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: LD_INT 0
24714: PUSH
24715: LD_INT 0
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: PUSH
24727: EMPTY
24728: LIST
24729: PPUSH
24730: CALL_OW 446
24734: GO 24658
24736: POP
24737: POP
// end ;
24738: LD_VAR 0 3
24742: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24743: LD_INT 0
24745: PPUSH
24746: PPUSH
24747: PPUSH
24748: PPUSH
24749: PPUSH
24750: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24751: LD_VAR 0 1
24755: NOT
24756: IFTRUE 24773
24758: PUSH
24759: LD_VAR 0 1
24763: PPUSH
24764: CALL_OW 263
24768: PUSH
24769: LD_INT 2
24771: NONEQUAL
24772: OR
24773: IFFALSE 24777
// exit ;
24775: GO 25093
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24777: LD_ADDR_VAR 0 6
24781: PUSH
24782: LD_INT 22
24784: PUSH
24785: LD_VAR 0 1
24789: PPUSH
24790: CALL_OW 255
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 2
24801: PUSH
24802: LD_INT 30
24804: PUSH
24805: LD_INT 36
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 34
24814: PUSH
24815: LD_INT 31
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: LIST
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PPUSH
24831: CALL_OW 69
24835: ST_TO_ADDR
// if not tmp then
24836: LD_VAR 0 6
24840: NOT
24841: IFFALSE 24845
// exit ;
24843: GO 25093
// result := [ ] ;
24845: LD_ADDR_VAR 0 2
24849: PUSH
24850: EMPTY
24851: ST_TO_ADDR
// for i in tmp do
24852: LD_ADDR_VAR 0 3
24856: PUSH
24857: LD_VAR 0 6
24861: PUSH
24862: FOR_IN
24863: IFFALSE 24934
// begin t := UnitsInside ( i ) ;
24865: LD_ADDR_VAR 0 4
24869: PUSH
24870: LD_VAR 0 3
24874: PPUSH
24875: CALL_OW 313
24879: ST_TO_ADDR
// if t then
24880: LD_VAR 0 4
24884: IFFALSE 24932
// for j in t do
24886: LD_ADDR_VAR 0 7
24890: PUSH
24891: LD_VAR 0 4
24895: PUSH
24896: FOR_IN
24897: IFFALSE 24930
// result := Replace ( result , result + 1 , j ) ;
24899: LD_ADDR_VAR 0 2
24903: PUSH
24904: LD_VAR 0 2
24908: PPUSH
24909: LD_VAR 0 2
24913: PUSH
24914: LD_INT 1
24916: PLUS
24917: PPUSH
24918: LD_VAR 0 7
24922: PPUSH
24923: CALL_OW 1
24927: ST_TO_ADDR
24928: GO 24896
24930: POP
24931: POP
// end ;
24932: GO 24862
24934: POP
24935: POP
// if not result then
24936: LD_VAR 0 2
24940: NOT
24941: IFFALSE 24945
// exit ;
24943: GO 25093
// mech := result [ 1 ] ;
24945: LD_ADDR_VAR 0 5
24949: PUSH
24950: LD_VAR 0 2
24954: PUSH
24955: LD_INT 1
24957: ARRAY
24958: ST_TO_ADDR
// if result > 1 then
24959: LD_VAR 0 2
24963: PUSH
24964: LD_INT 1
24966: GREATER
24967: IFFALSE 25079
// begin for i = 2 to result do
24969: LD_ADDR_VAR 0 3
24973: PUSH
24974: DOUBLE
24975: LD_INT 2
24977: DEC
24978: ST_TO_ADDR
24979: LD_VAR 0 2
24983: PUSH
24984: FOR_TO
24985: IFFALSE 25077
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24987: LD_ADDR_VAR 0 4
24991: PUSH
24992: LD_VAR 0 2
24996: PUSH
24997: LD_VAR 0 3
25001: ARRAY
25002: PPUSH
25003: LD_INT 3
25005: PPUSH
25006: CALL_OW 259
25010: PUSH
25011: LD_VAR 0 2
25015: PUSH
25016: LD_VAR 0 3
25020: ARRAY
25021: PPUSH
25022: CALL_OW 432
25026: MINUS
25027: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25028: LD_VAR 0 4
25032: PUSH
25033: LD_VAR 0 5
25037: PPUSH
25038: LD_INT 3
25040: PPUSH
25041: CALL_OW 259
25045: PUSH
25046: LD_VAR 0 5
25050: PPUSH
25051: CALL_OW 432
25055: MINUS
25056: GREATEREQUAL
25057: IFFALSE 25075
// mech := result [ i ] ;
25059: LD_ADDR_VAR 0 5
25063: PUSH
25064: LD_VAR 0 2
25068: PUSH
25069: LD_VAR 0 3
25073: ARRAY
25074: ST_TO_ADDR
// end ;
25075: GO 24984
25077: POP
25078: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25079: LD_VAR 0 1
25083: PPUSH
25084: LD_VAR 0 5
25088: PPUSH
25089: CALL_OW 135
// end ;
25093: LD_VAR 0 2
25097: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25098: LD_INT 0
25100: PPUSH
25101: PPUSH
25102: PPUSH
25103: PPUSH
25104: PPUSH
25105: PPUSH
25106: PPUSH
25107: PPUSH
25108: PPUSH
25109: PPUSH
25110: PPUSH
25111: PPUSH
25112: PPUSH
// result := [ ] ;
25113: LD_ADDR_VAR 0 7
25117: PUSH
25118: EMPTY
25119: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25120: LD_VAR 0 1
25124: PPUSH
25125: CALL_OW 266
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: IN
25140: NOT
25141: IFFALSE 25145
// exit ;
25143: GO 26785
// if name then
25145: LD_VAR 0 3
25149: IFFALSE 25165
// SetBName ( base_dep , name ) ;
25151: LD_VAR 0 1
25155: PPUSH
25156: LD_VAR 0 3
25160: PPUSH
25161: CALL_OW 500
// base := GetBase ( base_dep ) ;
25165: LD_ADDR_VAR 0 15
25169: PUSH
25170: LD_VAR 0 1
25174: PPUSH
25175: CALL_OW 274
25179: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25180: LD_ADDR_VAR 0 16
25184: PUSH
25185: LD_VAR 0 1
25189: PPUSH
25190: CALL_OW 255
25194: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25195: LD_ADDR_VAR 0 17
25199: PUSH
25200: LD_VAR 0 1
25204: PPUSH
25205: CALL_OW 248
25209: ST_TO_ADDR
// if sources then
25210: LD_VAR 0 5
25214: IFFALSE 25261
// for i = 1 to 3 do
25216: LD_ADDR_VAR 0 8
25220: PUSH
25221: DOUBLE
25222: LD_INT 1
25224: DEC
25225: ST_TO_ADDR
25226: LD_INT 3
25228: PUSH
25229: FOR_TO
25230: IFFALSE 25259
// AddResourceType ( base , i , sources [ i ] ) ;
25232: LD_VAR 0 15
25236: PPUSH
25237: LD_VAR 0 8
25241: PPUSH
25242: LD_VAR 0 5
25246: PUSH
25247: LD_VAR 0 8
25251: ARRAY
25252: PPUSH
25253: CALL_OW 276
25257: GO 25229
25259: POP
25260: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25261: LD_ADDR_VAR 0 18
25265: PUSH
25266: LD_VAR 0 15
25270: PPUSH
25271: LD_VAR 0 2
25275: PPUSH
25276: LD_INT 1
25278: PPUSH
25279: CALL 24520 0 3
25283: ST_TO_ADDR
// InitHc ;
25284: CALL_OW 19
// InitUc ;
25288: CALL_OW 18
// uc_side := side ;
25292: LD_ADDR_OWVAR 20
25296: PUSH
25297: LD_VAR 0 16
25301: ST_TO_ADDR
// uc_nation := nation ;
25302: LD_ADDR_OWVAR 21
25306: PUSH
25307: LD_VAR 0 17
25311: ST_TO_ADDR
// if buildings then
25312: LD_VAR 0 18
25316: IFFALSE 26644
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25318: LD_ADDR_VAR 0 19
25322: PUSH
25323: LD_VAR 0 18
25327: PPUSH
25328: LD_INT 2
25330: PUSH
25331: LD_INT 30
25333: PUSH
25334: LD_INT 29
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 30
25343: PUSH
25344: LD_INT 30
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: LIST
25355: PPUSH
25356: CALL_OW 72
25360: ST_TO_ADDR
// if tmp then
25361: LD_VAR 0 19
25365: IFFALSE 25413
// for i in tmp do
25367: LD_ADDR_VAR 0 8
25371: PUSH
25372: LD_VAR 0 19
25376: PUSH
25377: FOR_IN
25378: IFFALSE 25411
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25380: LD_VAR 0 8
25384: PPUSH
25385: CALL_OW 250
25389: PPUSH
25390: LD_VAR 0 8
25394: PPUSH
25395: CALL_OW 251
25399: PPUSH
25400: LD_VAR 0 16
25404: PPUSH
25405: CALL_OW 441
25409: GO 25377
25411: POP
25412: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25413: LD_VAR 0 18
25417: PPUSH
25418: LD_INT 2
25420: PUSH
25421: LD_INT 30
25423: PUSH
25424: LD_INT 32
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 30
25433: PUSH
25434: LD_INT 33
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: LIST
25445: PPUSH
25446: CALL_OW 72
25450: IFFALSE 25538
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25452: LD_ADDR_VAR 0 8
25456: PUSH
25457: LD_VAR 0 18
25461: PPUSH
25462: LD_INT 2
25464: PUSH
25465: LD_INT 30
25467: PUSH
25468: LD_INT 32
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 30
25477: PUSH
25478: LD_INT 33
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: LIST
25489: PPUSH
25490: CALL_OW 72
25494: PUSH
25495: FOR_IN
25496: IFFALSE 25536
// begin if not GetBWeapon ( i ) then
25498: LD_VAR 0 8
25502: PPUSH
25503: CALL_OW 269
25507: NOT
25508: IFFALSE 25534
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25510: LD_VAR 0 8
25514: PPUSH
25515: LD_VAR 0 8
25519: PPUSH
25520: LD_VAR 0 2
25524: PPUSH
25525: CALL 26790 0 2
25529: PPUSH
25530: CALL_OW 431
// end ;
25534: GO 25495
25536: POP
25537: POP
// end ; for i = 1 to personel do
25538: LD_ADDR_VAR 0 8
25542: PUSH
25543: DOUBLE
25544: LD_INT 1
25546: DEC
25547: ST_TO_ADDR
25548: LD_VAR 0 6
25552: PUSH
25553: FOR_TO
25554: IFFALSE 26624
// begin if i > 4 then
25556: LD_VAR 0 8
25560: PUSH
25561: LD_INT 4
25563: GREATER
25564: IFFALSE 25568
// break ;
25566: GO 26624
// case i of 1 :
25568: LD_VAR 0 8
25572: PUSH
25573: LD_INT 1
25575: DOUBLE
25576: EQUAL
25577: IFTRUE 25581
25579: GO 25661
25581: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25582: LD_ADDR_VAR 0 12
25586: PUSH
25587: LD_VAR 0 18
25591: PPUSH
25592: LD_INT 22
25594: PUSH
25595: LD_VAR 0 16
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 58
25606: PUSH
25607: EMPTY
25608: LIST
25609: PUSH
25610: LD_INT 2
25612: PUSH
25613: LD_INT 30
25615: PUSH
25616: LD_INT 32
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 30
25625: PUSH
25626: LD_INT 4
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 30
25635: PUSH
25636: LD_INT 5
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: LIST
25653: PPUSH
25654: CALL_OW 72
25658: ST_TO_ADDR
25659: GO 25883
25661: LD_INT 2
25663: DOUBLE
25664: EQUAL
25665: IFTRUE 25669
25667: GO 25731
25669: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25670: LD_ADDR_VAR 0 12
25674: PUSH
25675: LD_VAR 0 18
25679: PPUSH
25680: LD_INT 22
25682: PUSH
25683: LD_VAR 0 16
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 2
25694: PUSH
25695: LD_INT 30
25697: PUSH
25698: LD_INT 0
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 30
25707: PUSH
25708: LD_INT 1
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: LIST
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PPUSH
25724: CALL_OW 72
25728: ST_TO_ADDR
25729: GO 25883
25731: LD_INT 3
25733: DOUBLE
25734: EQUAL
25735: IFTRUE 25739
25737: GO 25801
25739: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25740: LD_ADDR_VAR 0 12
25744: PUSH
25745: LD_VAR 0 18
25749: PPUSH
25750: LD_INT 22
25752: PUSH
25753: LD_VAR 0 16
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 2
25764: PUSH
25765: LD_INT 30
25767: PUSH
25768: LD_INT 2
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 30
25777: PUSH
25778: LD_INT 3
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: LIST
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PPUSH
25794: CALL_OW 72
25798: ST_TO_ADDR
25799: GO 25883
25801: LD_INT 4
25803: DOUBLE
25804: EQUAL
25805: IFTRUE 25809
25807: GO 25882
25809: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25810: LD_ADDR_VAR 0 12
25814: PUSH
25815: LD_VAR 0 18
25819: PPUSH
25820: LD_INT 22
25822: PUSH
25823: LD_VAR 0 16
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 2
25834: PUSH
25835: LD_INT 30
25837: PUSH
25838: LD_INT 6
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 30
25847: PUSH
25848: LD_INT 7
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 30
25857: PUSH
25858: LD_INT 8
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PPUSH
25875: CALL_OW 72
25879: ST_TO_ADDR
25880: GO 25883
25882: POP
// if i = 1 then
25883: LD_VAR 0 8
25887: PUSH
25888: LD_INT 1
25890: EQUAL
25891: IFFALSE 26002
// begin tmp := [ ] ;
25893: LD_ADDR_VAR 0 19
25897: PUSH
25898: EMPTY
25899: ST_TO_ADDR
// for j in f do
25900: LD_ADDR_VAR 0 9
25904: PUSH
25905: LD_VAR 0 12
25909: PUSH
25910: FOR_IN
25911: IFFALSE 25984
// if GetBType ( j ) = b_bunker then
25913: LD_VAR 0 9
25917: PPUSH
25918: CALL_OW 266
25922: PUSH
25923: LD_INT 32
25925: EQUAL
25926: IFFALSE 25953
// tmp := Insert ( tmp , 1 , j ) else
25928: LD_ADDR_VAR 0 19
25932: PUSH
25933: LD_VAR 0 19
25937: PPUSH
25938: LD_INT 1
25940: PPUSH
25941: LD_VAR 0 9
25945: PPUSH
25946: CALL_OW 2
25950: ST_TO_ADDR
25951: GO 25982
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25953: LD_ADDR_VAR 0 19
25957: PUSH
25958: LD_VAR 0 19
25962: PPUSH
25963: LD_VAR 0 19
25967: PUSH
25968: LD_INT 1
25970: PLUS
25971: PPUSH
25972: LD_VAR 0 9
25976: PPUSH
25977: CALL_OW 2
25981: ST_TO_ADDR
25982: GO 25910
25984: POP
25985: POP
// if tmp then
25986: LD_VAR 0 19
25990: IFFALSE 26002
// f := tmp ;
25992: LD_ADDR_VAR 0 12
25996: PUSH
25997: LD_VAR 0 19
26001: ST_TO_ADDR
// end ; x := personel [ i ] ;
26002: LD_ADDR_VAR 0 13
26006: PUSH
26007: LD_VAR 0 6
26011: PUSH
26012: LD_VAR 0 8
26016: ARRAY
26017: ST_TO_ADDR
// if x = - 1 then
26018: LD_VAR 0 13
26022: PUSH
26023: LD_INT 1
26025: NEG
26026: EQUAL
26027: IFFALSE 26238
// begin for j in f do
26029: LD_ADDR_VAR 0 9
26033: PUSH
26034: LD_VAR 0 12
26038: PUSH
26039: FOR_IN
26040: IFFALSE 26234
// repeat InitHc ;
26042: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26046: LD_VAR 0 9
26050: PPUSH
26051: CALL_OW 266
26055: PUSH
26056: LD_INT 5
26058: EQUAL
26059: IFFALSE 26129
// begin if UnitsInside ( j ) < 3 then
26061: LD_VAR 0 9
26065: PPUSH
26066: CALL_OW 313
26070: PUSH
26071: LD_INT 3
26073: LESS
26074: IFFALSE 26110
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26076: LD_INT 0
26078: PPUSH
26079: LD_INT 5
26081: PUSH
26082: LD_INT 8
26084: PUSH
26085: LD_INT 9
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: LIST
26092: PUSH
26093: LD_VAR 0 17
26097: ARRAY
26098: PPUSH
26099: LD_VAR 0 4
26103: PPUSH
26104: CALL_OW 380
26108: GO 26127
// PrepareHuman ( false , i , skill ) ;
26110: LD_INT 0
26112: PPUSH
26113: LD_VAR 0 8
26117: PPUSH
26118: LD_VAR 0 4
26122: PPUSH
26123: CALL_OW 380
// end else
26127: GO 26146
// PrepareHuman ( false , i , skill ) ;
26129: LD_INT 0
26131: PPUSH
26132: LD_VAR 0 8
26136: PPUSH
26137: LD_VAR 0 4
26141: PPUSH
26142: CALL_OW 380
// un := CreateHuman ;
26146: LD_ADDR_VAR 0 14
26150: PUSH
26151: CALL_OW 44
26155: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26156: LD_ADDR_VAR 0 7
26160: PUSH
26161: LD_VAR 0 7
26165: PPUSH
26166: LD_INT 1
26168: PPUSH
26169: LD_VAR 0 14
26173: PPUSH
26174: CALL_OW 2
26178: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26179: LD_VAR 0 14
26183: PPUSH
26184: LD_VAR 0 9
26188: PPUSH
26189: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26193: LD_VAR 0 9
26197: PPUSH
26198: CALL_OW 313
26202: PUSH
26203: LD_INT 6
26205: EQUAL
26206: IFTRUE 26230
26208: PUSH
26209: LD_VAR 0 9
26213: PPUSH
26214: CALL_OW 266
26218: PUSH
26219: LD_INT 32
26221: PUSH
26222: LD_INT 31
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: IN
26229: OR
26230: IFFALSE 26042
26232: GO 26039
26234: POP
26235: POP
// end else
26236: GO 26622
// for j = 1 to x do
26238: LD_ADDR_VAR 0 9
26242: PUSH
26243: DOUBLE
26244: LD_INT 1
26246: DEC
26247: ST_TO_ADDR
26248: LD_VAR 0 13
26252: PUSH
26253: FOR_TO
26254: IFFALSE 26620
// begin InitHc ;
26256: CALL_OW 19
// if not f then
26260: LD_VAR 0 12
26264: NOT
26265: IFFALSE 26354
// begin PrepareHuman ( false , i , skill ) ;
26267: LD_INT 0
26269: PPUSH
26270: LD_VAR 0 8
26274: PPUSH
26275: LD_VAR 0 4
26279: PPUSH
26280: CALL_OW 380
// un := CreateHuman ;
26284: LD_ADDR_VAR 0 14
26288: PUSH
26289: CALL_OW 44
26293: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26294: LD_ADDR_VAR 0 7
26298: PUSH
26299: LD_VAR 0 7
26303: PPUSH
26304: LD_INT 1
26306: PPUSH
26307: LD_VAR 0 14
26311: PPUSH
26312: CALL_OW 2
26316: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26317: LD_VAR 0 14
26321: PPUSH
26322: LD_VAR 0 1
26326: PPUSH
26327: CALL_OW 250
26331: PPUSH
26332: LD_VAR 0 1
26336: PPUSH
26337: CALL_OW 251
26341: PPUSH
26342: LD_INT 10
26344: PPUSH
26345: LD_INT 0
26347: PPUSH
26348: CALL_OW 50
// continue ;
26352: GO 26253
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26354: LD_VAR 0 12
26358: PUSH
26359: LD_INT 1
26361: ARRAY
26362: PPUSH
26363: CALL_OW 313
26367: IFFALSE 26395
26369: PUSH
26370: LD_VAR 0 12
26374: PUSH
26375: LD_INT 1
26377: ARRAY
26378: PPUSH
26379: CALL_OW 266
26383: PUSH
26384: LD_INT 32
26386: PUSH
26387: LD_INT 31
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: IN
26394: AND
26395: IFTRUE 26416
26397: PUSH
26398: LD_VAR 0 12
26402: PUSH
26403: LD_INT 1
26405: ARRAY
26406: PPUSH
26407: CALL_OW 313
26411: PUSH
26412: LD_INT 6
26414: EQUAL
26415: OR
26416: IFFALSE 26436
// f := Delete ( f , 1 ) ;
26418: LD_ADDR_VAR 0 12
26422: PUSH
26423: LD_VAR 0 12
26427: PPUSH
26428: LD_INT 1
26430: PPUSH
26431: CALL_OW 3
26435: ST_TO_ADDR
// if not f then
26436: LD_VAR 0 12
26440: NOT
26441: IFFALSE 26459
// begin x := x + 2 ;
26443: LD_ADDR_VAR 0 13
26447: PUSH
26448: LD_VAR 0 13
26452: PUSH
26453: LD_INT 2
26455: PLUS
26456: ST_TO_ADDR
// continue ;
26457: GO 26253
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26459: LD_VAR 0 12
26463: PUSH
26464: LD_INT 1
26466: ARRAY
26467: PPUSH
26468: CALL_OW 266
26472: PUSH
26473: LD_INT 5
26475: EQUAL
26476: IFFALSE 26550
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26478: LD_VAR 0 12
26482: PUSH
26483: LD_INT 1
26485: ARRAY
26486: PPUSH
26487: CALL_OW 313
26491: PUSH
26492: LD_INT 3
26494: LESS
26495: IFFALSE 26531
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26497: LD_INT 0
26499: PPUSH
26500: LD_INT 5
26502: PUSH
26503: LD_INT 8
26505: PUSH
26506: LD_INT 9
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: LIST
26513: PUSH
26514: LD_VAR 0 17
26518: ARRAY
26519: PPUSH
26520: LD_VAR 0 4
26524: PPUSH
26525: CALL_OW 380
26529: GO 26548
// PrepareHuman ( false , i , skill ) ;
26531: LD_INT 0
26533: PPUSH
26534: LD_VAR 0 8
26538: PPUSH
26539: LD_VAR 0 4
26543: PPUSH
26544: CALL_OW 380
// end else
26548: GO 26567
// PrepareHuman ( false , i , skill ) ;
26550: LD_INT 0
26552: PPUSH
26553: LD_VAR 0 8
26557: PPUSH
26558: LD_VAR 0 4
26562: PPUSH
26563: CALL_OW 380
// un := CreateHuman ;
26567: LD_ADDR_VAR 0 14
26571: PUSH
26572: CALL_OW 44
26576: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26577: LD_ADDR_VAR 0 7
26581: PUSH
26582: LD_VAR 0 7
26586: PPUSH
26587: LD_INT 1
26589: PPUSH
26590: LD_VAR 0 14
26594: PPUSH
26595: CALL_OW 2
26599: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26600: LD_VAR 0 14
26604: PPUSH
26605: LD_VAR 0 12
26609: PUSH
26610: LD_INT 1
26612: ARRAY
26613: PPUSH
26614: CALL_OW 52
// end ;
26618: GO 26253
26620: POP
26621: POP
// end ;
26622: GO 25553
26624: POP
26625: POP
// result := result ^ buildings ;
26626: LD_ADDR_VAR 0 7
26630: PUSH
26631: LD_VAR 0 7
26635: PUSH
26636: LD_VAR 0 18
26640: ADD
26641: ST_TO_ADDR
// end else
26642: GO 26785
// begin for i = 1 to personel do
26644: LD_ADDR_VAR 0 8
26648: PUSH
26649: DOUBLE
26650: LD_INT 1
26652: DEC
26653: ST_TO_ADDR
26654: LD_VAR 0 6
26658: PUSH
26659: FOR_TO
26660: IFFALSE 26783
// begin if i > 4 then
26662: LD_VAR 0 8
26666: PUSH
26667: LD_INT 4
26669: GREATER
26670: IFFALSE 26674
// break ;
26672: GO 26783
// x := personel [ i ] ;
26674: LD_ADDR_VAR 0 13
26678: PUSH
26679: LD_VAR 0 6
26683: PUSH
26684: LD_VAR 0 8
26688: ARRAY
26689: ST_TO_ADDR
// if x = - 1 then
26690: LD_VAR 0 13
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: EQUAL
26699: IFFALSE 26703
// continue ;
26701: GO 26659
// PrepareHuman ( false , i , skill ) ;
26703: LD_INT 0
26705: PPUSH
26706: LD_VAR 0 8
26710: PPUSH
26711: LD_VAR 0 4
26715: PPUSH
26716: CALL_OW 380
// un := CreateHuman ;
26720: LD_ADDR_VAR 0 14
26724: PUSH
26725: CALL_OW 44
26729: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26730: LD_VAR 0 14
26734: PPUSH
26735: LD_VAR 0 1
26739: PPUSH
26740: CALL_OW 250
26744: PPUSH
26745: LD_VAR 0 1
26749: PPUSH
26750: CALL_OW 251
26754: PPUSH
26755: LD_INT 10
26757: PPUSH
26758: LD_INT 0
26760: PPUSH
26761: CALL_OW 50
// result := result ^ un ;
26765: LD_ADDR_VAR 0 7
26769: PUSH
26770: LD_VAR 0 7
26774: PUSH
26775: LD_VAR 0 14
26779: ADD
26780: ST_TO_ADDR
// end ;
26781: GO 26659
26783: POP
26784: POP
// end ; end ;
26785: LD_VAR 0 7
26789: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26790: LD_INT 0
26792: PPUSH
26793: PPUSH
26794: PPUSH
26795: PPUSH
26796: PPUSH
26797: PPUSH
26798: PPUSH
26799: PPUSH
26800: PPUSH
26801: PPUSH
26802: PPUSH
26803: PPUSH
26804: PPUSH
26805: PPUSH
26806: PPUSH
26807: PPUSH
// result := false ;
26808: LD_ADDR_VAR 0 3
26812: PUSH
26813: LD_INT 0
26815: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26816: LD_VAR 0 1
26820: NOT
26821: IFTRUE 26846
26823: PUSH
26824: LD_VAR 0 1
26828: PPUSH
26829: CALL_OW 266
26833: PUSH
26834: LD_INT 32
26836: PUSH
26837: LD_INT 33
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: IN
26844: NOT
26845: OR
26846: IFFALSE 26850
// exit ;
26848: GO 27985
// nat := GetNation ( tower ) ;
26850: LD_ADDR_VAR 0 12
26854: PUSH
26855: LD_VAR 0 1
26859: PPUSH
26860: CALL_OW 248
26864: ST_TO_ADDR
// side := GetSide ( tower ) ;
26865: LD_ADDR_VAR 0 16
26869: PUSH
26870: LD_VAR 0 1
26874: PPUSH
26875: CALL_OW 255
26879: ST_TO_ADDR
// x := GetX ( tower ) ;
26880: LD_ADDR_VAR 0 10
26884: PUSH
26885: LD_VAR 0 1
26889: PPUSH
26890: CALL_OW 250
26894: ST_TO_ADDR
// y := GetY ( tower ) ;
26895: LD_ADDR_VAR 0 11
26899: PUSH
26900: LD_VAR 0 1
26904: PPUSH
26905: CALL_OW 251
26909: ST_TO_ADDR
// if not x or not y then
26910: LD_VAR 0 10
26914: NOT
26915: IFTRUE 26924
26917: PUSH
26918: LD_VAR 0 11
26922: NOT
26923: OR
26924: IFFALSE 26928
// exit ;
26926: GO 27985
// weapon := 0 ;
26928: LD_ADDR_VAR 0 18
26932: PUSH
26933: LD_INT 0
26935: ST_TO_ADDR
// fac_list := [ ] ;
26936: LD_ADDR_VAR 0 17
26940: PUSH
26941: EMPTY
26942: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26943: LD_ADDR_VAR 0 6
26947: PUSH
26948: LD_VAR 0 1
26952: PPUSH
26953: CALL_OW 274
26957: PPUSH
26958: LD_VAR 0 2
26962: PPUSH
26963: LD_INT 0
26965: PPUSH
26966: CALL 24520 0 3
26970: PPUSH
26971: LD_INT 30
26973: PUSH
26974: LD_INT 3
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PPUSH
26981: CALL_OW 72
26985: ST_TO_ADDR
// if not factories then
26986: LD_VAR 0 6
26990: NOT
26991: IFFALSE 26995
// exit ;
26993: GO 27985
// for i in factories do
26995: LD_ADDR_VAR 0 8
26999: PUSH
27000: LD_VAR 0 6
27004: PUSH
27005: FOR_IN
27006: IFFALSE 27031
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27008: LD_ADDR_VAR 0 17
27012: PUSH
27013: LD_VAR 0 17
27017: PUSH
27018: LD_VAR 0 8
27022: PPUSH
27023: CALL_OW 478
27027: UNION
27028: ST_TO_ADDR
27029: GO 27005
27031: POP
27032: POP
// if not fac_list then
27033: LD_VAR 0 17
27037: NOT
27038: IFFALSE 27042
// exit ;
27040: GO 27985
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27042: LD_ADDR_VAR 0 5
27046: PUSH
27047: LD_INT 4
27049: PUSH
27050: LD_INT 5
27052: PUSH
27053: LD_INT 9
27055: PUSH
27056: LD_INT 10
27058: PUSH
27059: LD_INT 6
27061: PUSH
27062: LD_INT 7
27064: PUSH
27065: LD_INT 11
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 27
27079: PUSH
27080: LD_INT 28
27082: PUSH
27083: LD_INT 26
27085: PUSH
27086: LD_INT 30
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 43
27097: PUSH
27098: LD_INT 44
27100: PUSH
27101: LD_INT 46
27103: PUSH
27104: LD_INT 45
27106: PUSH
27107: LD_INT 47
27109: PUSH
27110: LD_INT 49
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: LIST
27125: PUSH
27126: LD_VAR 0 12
27130: ARRAY
27131: ST_TO_ADDR
// list := list isect fac_list ;
27132: LD_ADDR_VAR 0 5
27136: PUSH
27137: LD_VAR 0 5
27141: PUSH
27142: LD_VAR 0 17
27146: ISECT
27147: ST_TO_ADDR
// if not list then
27148: LD_VAR 0 5
27152: NOT
27153: IFFALSE 27157
// exit ;
27155: GO 27985
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27157: LD_VAR 0 12
27161: PUSH
27162: LD_INT 3
27164: EQUAL
27165: IFFALSE 27177
27167: PUSH
27168: LD_INT 49
27170: PUSH
27171: LD_VAR 0 5
27175: IN
27176: AND
27177: IFFALSE 27197
27179: PUSH
27180: LD_INT 31
27182: PPUSH
27183: LD_VAR 0 16
27187: PPUSH
27188: CALL_OW 321
27192: PUSH
27193: LD_INT 2
27195: EQUAL
27196: AND
27197: IFFALSE 27257
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27199: LD_INT 22
27201: PUSH
27202: LD_VAR 0 16
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 35
27213: PUSH
27214: LD_INT 49
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 91
27223: PUSH
27224: LD_VAR 0 1
27228: PUSH
27229: LD_INT 10
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: LIST
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: LIST
27241: PPUSH
27242: CALL_OW 69
27246: NOT
27247: IFFALSE 27257
// weapon := ru_time_lapser ;
27249: LD_ADDR_VAR 0 18
27253: PUSH
27254: LD_INT 49
27256: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27257: LD_VAR 0 12
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: LD_INT 2
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: IN
27272: IFFALSE 27296
27274: PUSH
27275: LD_INT 11
27277: PUSH
27278: LD_VAR 0 5
27282: IN
27283: IFTRUE 27295
27285: PUSH
27286: LD_INT 30
27288: PUSH
27289: LD_VAR 0 5
27293: IN
27294: OR
27295: AND
27296: IFFALSE 27316
27298: PUSH
27299: LD_INT 6
27301: PPUSH
27302: LD_VAR 0 16
27306: PPUSH
27307: CALL_OW 321
27311: PUSH
27312: LD_INT 2
27314: EQUAL
27315: AND
27316: IFFALSE 27483
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27318: LD_INT 22
27320: PUSH
27321: LD_VAR 0 16
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 2
27332: PUSH
27333: LD_INT 35
27335: PUSH
27336: LD_INT 11
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 35
27345: PUSH
27346: LD_INT 30
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 91
27360: PUSH
27361: LD_VAR 0 1
27365: PUSH
27366: LD_INT 18
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: LIST
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: LIST
27378: PPUSH
27379: CALL_OW 69
27383: NOT
27384: IFFALSE 27460
27386: PUSH
27387: LD_INT 22
27389: PUSH
27390: LD_VAR 0 16
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 2
27401: PUSH
27402: LD_INT 30
27404: PUSH
27405: LD_INT 32
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 30
27414: PUSH
27415: LD_INT 33
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 91
27429: PUSH
27430: LD_VAR 0 1
27434: PUSH
27435: LD_INT 12
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: LIST
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: LIST
27447: PUSH
27448: EMPTY
27449: LIST
27450: PPUSH
27451: CALL_OW 69
27455: PUSH
27456: LD_INT 2
27458: GREATER
27459: AND
27460: IFFALSE 27483
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27462: LD_ADDR_VAR 0 18
27466: PUSH
27467: LD_INT 11
27469: PUSH
27470: LD_INT 30
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_VAR 0 12
27481: ARRAY
27482: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27483: LD_VAR 0 18
27487: NOT
27488: IFFALSE 27508
27490: PUSH
27491: LD_INT 40
27493: PPUSH
27494: LD_VAR 0 16
27498: PPUSH
27499: CALL_OW 321
27503: PUSH
27504: LD_INT 2
27506: EQUAL
27507: AND
27508: IFFALSE 27544
27510: PUSH
27511: LD_INT 7
27513: PUSH
27514: LD_VAR 0 5
27518: IN
27519: IFTRUE 27531
27521: PUSH
27522: LD_INT 28
27524: PUSH
27525: LD_VAR 0 5
27529: IN
27530: OR
27531: IFTRUE 27543
27533: PUSH
27534: LD_INT 45
27536: PUSH
27537: LD_VAR 0 5
27541: IN
27542: OR
27543: AND
27544: IFFALSE 27798
// begin hex := GetHexInfo ( x , y ) ;
27546: LD_ADDR_VAR 0 4
27550: PUSH
27551: LD_VAR 0 10
27555: PPUSH
27556: LD_VAR 0 11
27560: PPUSH
27561: CALL_OW 546
27565: ST_TO_ADDR
// if hex [ 1 ] then
27566: LD_VAR 0 4
27570: PUSH
27571: LD_INT 1
27573: ARRAY
27574: IFFALSE 27578
// exit ;
27576: GO 27985
// height := hex [ 2 ] ;
27578: LD_ADDR_VAR 0 15
27582: PUSH
27583: LD_VAR 0 4
27587: PUSH
27588: LD_INT 2
27590: ARRAY
27591: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27592: LD_ADDR_VAR 0 14
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: LD_INT 2
27602: PUSH
27603: LD_INT 3
27605: PUSH
27606: LD_INT 5
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: ST_TO_ADDR
// for i in tmp do
27615: LD_ADDR_VAR 0 8
27619: PUSH
27620: LD_VAR 0 14
27624: PUSH
27625: FOR_IN
27626: IFFALSE 27796
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27628: LD_ADDR_VAR 0 9
27632: PUSH
27633: LD_VAR 0 10
27637: PPUSH
27638: LD_VAR 0 8
27642: PPUSH
27643: LD_INT 5
27645: PPUSH
27646: CALL_OW 272
27650: PUSH
27651: LD_VAR 0 11
27655: PPUSH
27656: LD_VAR 0 8
27660: PPUSH
27661: LD_INT 5
27663: PPUSH
27664: CALL_OW 273
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27673: LD_VAR 0 9
27677: PUSH
27678: LD_INT 1
27680: ARRAY
27681: PPUSH
27682: LD_VAR 0 9
27686: PUSH
27687: LD_INT 2
27689: ARRAY
27690: PPUSH
27691: CALL_OW 488
27695: IFFALSE 27794
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27697: LD_ADDR_VAR 0 4
27701: PUSH
27702: LD_VAR 0 9
27706: PUSH
27707: LD_INT 1
27709: ARRAY
27710: PPUSH
27711: LD_VAR 0 9
27715: PUSH
27716: LD_INT 2
27718: ARRAY
27719: PPUSH
27720: CALL_OW 546
27724: ST_TO_ADDR
// if hex [ 1 ] then
27725: LD_VAR 0 4
27729: PUSH
27730: LD_INT 1
27732: ARRAY
27733: IFFALSE 27737
// continue ;
27735: GO 27625
// h := hex [ 2 ] ;
27737: LD_ADDR_VAR 0 13
27741: PUSH
27742: LD_VAR 0 4
27746: PUSH
27747: LD_INT 2
27749: ARRAY
27750: ST_TO_ADDR
// if h + 7 < height then
27751: LD_VAR 0 13
27755: PUSH
27756: LD_INT 7
27758: PLUS
27759: PUSH
27760: LD_VAR 0 15
27764: LESS
27765: IFFALSE 27794
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27767: LD_ADDR_VAR 0 18
27771: PUSH
27772: LD_INT 7
27774: PUSH
27775: LD_INT 28
27777: PUSH
27778: LD_INT 45
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: LIST
27785: PUSH
27786: LD_VAR 0 12
27790: ARRAY
27791: ST_TO_ADDR
// break ;
27792: GO 27796
// end ; end ; end ;
27794: GO 27625
27796: POP
27797: POP
// end ; if not weapon then
27798: LD_VAR 0 18
27802: NOT
27803: IFFALSE 27863
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27805: LD_ADDR_VAR 0 5
27809: PUSH
27810: LD_VAR 0 5
27814: PUSH
27815: LD_INT 11
27817: PUSH
27818: LD_INT 30
27820: PUSH
27821: LD_INT 49
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: LIST
27828: DIFF
27829: ST_TO_ADDR
// if not list then
27830: LD_VAR 0 5
27834: NOT
27835: IFFALSE 27839
// exit ;
27837: GO 27985
// weapon := list [ rand ( 1 , list ) ] ;
27839: LD_ADDR_VAR 0 18
27843: PUSH
27844: LD_VAR 0 5
27848: PUSH
27849: LD_INT 1
27851: PPUSH
27852: LD_VAR 0 5
27856: PPUSH
27857: CALL_OW 12
27861: ARRAY
27862: ST_TO_ADDR
// end ; if weapon then
27863: LD_VAR 0 18
27867: IFFALSE 27985
// begin tmp := CostOfWeapon ( weapon ) ;
27869: LD_ADDR_VAR 0 14
27873: PUSH
27874: LD_VAR 0 18
27878: PPUSH
27879: CALL_OW 451
27883: ST_TO_ADDR
// j := GetBase ( tower ) ;
27884: LD_ADDR_VAR 0 9
27888: PUSH
27889: LD_VAR 0 1
27893: PPUSH
27894: CALL_OW 274
27898: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27899: LD_VAR 0 9
27903: PPUSH
27904: LD_INT 1
27906: PPUSH
27907: CALL_OW 275
27911: PUSH
27912: LD_VAR 0 14
27916: PUSH
27917: LD_INT 1
27919: ARRAY
27920: GREATEREQUAL
27921: IFFALSE 27947
27923: PUSH
27924: LD_VAR 0 9
27928: PPUSH
27929: LD_INT 2
27931: PPUSH
27932: CALL_OW 275
27936: PUSH
27937: LD_VAR 0 14
27941: PUSH
27942: LD_INT 2
27944: ARRAY
27945: GREATEREQUAL
27946: AND
27947: IFFALSE 27973
27949: PUSH
27950: LD_VAR 0 9
27954: PPUSH
27955: LD_INT 3
27957: PPUSH
27958: CALL_OW 275
27962: PUSH
27963: LD_VAR 0 14
27967: PUSH
27968: LD_INT 3
27970: ARRAY
27971: GREATEREQUAL
27972: AND
27973: IFFALSE 27985
// result := weapon ;
27975: LD_ADDR_VAR 0 3
27979: PUSH
27980: LD_VAR 0 18
27984: ST_TO_ADDR
// end ; end ;
27985: LD_VAR 0 3
27989: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27990: LD_INT 0
27992: PPUSH
27993: PPUSH
// result := true ;
27994: LD_ADDR_VAR 0 3
27998: PUSH
27999: LD_INT 1
28001: ST_TO_ADDR
// if array1 = array2 then
28002: LD_VAR 0 1
28006: PUSH
28007: LD_VAR 0 2
28011: EQUAL
28012: IFFALSE 28072
// begin for i = 1 to array1 do
28014: LD_ADDR_VAR 0 4
28018: PUSH
28019: DOUBLE
28020: LD_INT 1
28022: DEC
28023: ST_TO_ADDR
28024: LD_VAR 0 1
28028: PUSH
28029: FOR_TO
28030: IFFALSE 28068
// if array1 [ i ] <> array2 [ i ] then
28032: LD_VAR 0 1
28036: PUSH
28037: LD_VAR 0 4
28041: ARRAY
28042: PUSH
28043: LD_VAR 0 2
28047: PUSH
28048: LD_VAR 0 4
28052: ARRAY
28053: NONEQUAL
28054: IFFALSE 28066
// begin result := false ;
28056: LD_ADDR_VAR 0 3
28060: PUSH
28061: LD_INT 0
28063: ST_TO_ADDR
// break ;
28064: GO 28068
// end ;
28066: GO 28029
28068: POP
28069: POP
// end else
28070: GO 28080
// result := false ;
28072: LD_ADDR_VAR 0 3
28076: PUSH
28077: LD_INT 0
28079: ST_TO_ADDR
// end ;
28080: LD_VAR 0 3
28084: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28085: LD_INT 0
28087: PPUSH
28088: PPUSH
// if not array1 or not array2 then
28089: LD_VAR 0 1
28093: NOT
28094: IFTRUE 28103
28096: PUSH
28097: LD_VAR 0 2
28101: NOT
28102: OR
28103: IFFALSE 28107
// exit ;
28105: GO 28171
// result := true ;
28107: LD_ADDR_VAR 0 3
28111: PUSH
28112: LD_INT 1
28114: ST_TO_ADDR
// for i = 1 to array1 do
28115: LD_ADDR_VAR 0 4
28119: PUSH
28120: DOUBLE
28121: LD_INT 1
28123: DEC
28124: ST_TO_ADDR
28125: LD_VAR 0 1
28129: PUSH
28130: FOR_TO
28131: IFFALSE 28169
// if array1 [ i ] <> array2 [ i ] then
28133: LD_VAR 0 1
28137: PUSH
28138: LD_VAR 0 4
28142: ARRAY
28143: PUSH
28144: LD_VAR 0 2
28148: PUSH
28149: LD_VAR 0 4
28153: ARRAY
28154: NONEQUAL
28155: IFFALSE 28167
// begin result := false ;
28157: LD_ADDR_VAR 0 3
28161: PUSH
28162: LD_INT 0
28164: ST_TO_ADDR
// break ;
28165: GO 28169
// end ;
28167: GO 28130
28169: POP
28170: POP
// end ;
28171: LD_VAR 0 3
28175: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28176: LD_INT 0
28178: PPUSH
28179: PPUSH
28180: PPUSH
// pom := GetBase ( fac ) ;
28181: LD_ADDR_VAR 0 5
28185: PUSH
28186: LD_VAR 0 1
28190: PPUSH
28191: CALL_OW 274
28195: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28196: LD_ADDR_VAR 0 4
28200: PUSH
28201: LD_VAR 0 2
28205: PUSH
28206: LD_INT 1
28208: ARRAY
28209: PPUSH
28210: LD_VAR 0 2
28214: PUSH
28215: LD_INT 2
28217: ARRAY
28218: PPUSH
28219: LD_VAR 0 2
28223: PUSH
28224: LD_INT 3
28226: ARRAY
28227: PPUSH
28228: LD_VAR 0 2
28232: PUSH
28233: LD_INT 4
28235: ARRAY
28236: PPUSH
28237: CALL_OW 449
28241: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28242: LD_ADDR_VAR 0 3
28246: PUSH
28247: LD_VAR 0 5
28251: PPUSH
28252: LD_INT 1
28254: PPUSH
28255: CALL_OW 275
28259: PUSH
28260: LD_VAR 0 4
28264: PUSH
28265: LD_INT 1
28267: ARRAY
28268: GREATEREQUAL
28269: IFFALSE 28295
28271: PUSH
28272: LD_VAR 0 5
28276: PPUSH
28277: LD_INT 2
28279: PPUSH
28280: CALL_OW 275
28284: PUSH
28285: LD_VAR 0 4
28289: PUSH
28290: LD_INT 2
28292: ARRAY
28293: GREATEREQUAL
28294: AND
28295: IFFALSE 28321
28297: PUSH
28298: LD_VAR 0 5
28302: PPUSH
28303: LD_INT 3
28305: PPUSH
28306: CALL_OW 275
28310: PUSH
28311: LD_VAR 0 4
28315: PUSH
28316: LD_INT 3
28318: ARRAY
28319: GREATEREQUAL
28320: AND
28321: ST_TO_ADDR
// end ;
28322: LD_VAR 0 3
28326: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28327: LD_INT 0
28329: PPUSH
28330: PPUSH
28331: PPUSH
28332: PPUSH
// pom := GetBase ( building ) ;
28333: LD_ADDR_VAR 0 3
28337: PUSH
28338: LD_VAR 0 1
28342: PPUSH
28343: CALL_OW 274
28347: ST_TO_ADDR
// if not pom then
28348: LD_VAR 0 3
28352: NOT
28353: IFFALSE 28357
// exit ;
28355: GO 28531
// btype := GetBType ( building ) ;
28357: LD_ADDR_VAR 0 5
28361: PUSH
28362: LD_VAR 0 1
28366: PPUSH
28367: CALL_OW 266
28371: ST_TO_ADDR
// if btype = b_armoury then
28372: LD_VAR 0 5
28376: PUSH
28377: LD_INT 4
28379: EQUAL
28380: IFFALSE 28390
// btype := b_barracks ;
28382: LD_ADDR_VAR 0 5
28386: PUSH
28387: LD_INT 5
28389: ST_TO_ADDR
// if btype = b_depot then
28390: LD_VAR 0 5
28394: PUSH
28395: LD_INT 0
28397: EQUAL
28398: IFFALSE 28408
// btype := b_warehouse ;
28400: LD_ADDR_VAR 0 5
28404: PUSH
28405: LD_INT 1
28407: ST_TO_ADDR
// if btype = b_workshop then
28408: LD_VAR 0 5
28412: PUSH
28413: LD_INT 2
28415: EQUAL
28416: IFFALSE 28426
// btype := b_factory ;
28418: LD_ADDR_VAR 0 5
28422: PUSH
28423: LD_INT 3
28425: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28426: LD_ADDR_VAR 0 4
28430: PUSH
28431: LD_VAR 0 5
28435: PPUSH
28436: LD_VAR 0 1
28440: PPUSH
28441: CALL_OW 248
28445: PPUSH
28446: CALL_OW 450
28450: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28451: LD_ADDR_VAR 0 2
28455: PUSH
28456: LD_VAR 0 3
28460: PPUSH
28461: LD_INT 1
28463: PPUSH
28464: CALL_OW 275
28468: PUSH
28469: LD_VAR 0 4
28473: PUSH
28474: LD_INT 1
28476: ARRAY
28477: GREATEREQUAL
28478: IFFALSE 28504
28480: PUSH
28481: LD_VAR 0 3
28485: PPUSH
28486: LD_INT 2
28488: PPUSH
28489: CALL_OW 275
28493: PUSH
28494: LD_VAR 0 4
28498: PUSH
28499: LD_INT 2
28501: ARRAY
28502: GREATEREQUAL
28503: AND
28504: IFFALSE 28530
28506: PUSH
28507: LD_VAR 0 3
28511: PPUSH
28512: LD_INT 3
28514: PPUSH
28515: CALL_OW 275
28519: PUSH
28520: LD_VAR 0 4
28524: PUSH
28525: LD_INT 3
28527: ARRAY
28528: GREATEREQUAL
28529: AND
28530: ST_TO_ADDR
// end ;
28531: LD_VAR 0 2
28535: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28536: LD_INT 0
28538: PPUSH
28539: PPUSH
28540: PPUSH
// pom := GetBase ( building ) ;
28541: LD_ADDR_VAR 0 4
28545: PUSH
28546: LD_VAR 0 1
28550: PPUSH
28551: CALL_OW 274
28555: ST_TO_ADDR
// if not pom then
28556: LD_VAR 0 4
28560: NOT
28561: IFFALSE 28565
// exit ;
28563: GO 28670
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28565: LD_ADDR_VAR 0 5
28569: PUSH
28570: LD_VAR 0 2
28574: PPUSH
28575: LD_VAR 0 1
28579: PPUSH
28580: CALL_OW 248
28584: PPUSH
28585: CALL_OW 450
28589: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28590: LD_ADDR_VAR 0 3
28594: PUSH
28595: LD_VAR 0 4
28599: PPUSH
28600: LD_INT 1
28602: PPUSH
28603: CALL_OW 275
28607: PUSH
28608: LD_VAR 0 5
28612: PUSH
28613: LD_INT 1
28615: ARRAY
28616: GREATEREQUAL
28617: IFFALSE 28643
28619: PUSH
28620: LD_VAR 0 4
28624: PPUSH
28625: LD_INT 2
28627: PPUSH
28628: CALL_OW 275
28632: PUSH
28633: LD_VAR 0 5
28637: PUSH
28638: LD_INT 2
28640: ARRAY
28641: GREATEREQUAL
28642: AND
28643: IFFALSE 28669
28645: PUSH
28646: LD_VAR 0 4
28650: PPUSH
28651: LD_INT 3
28653: PPUSH
28654: CALL_OW 275
28658: PUSH
28659: LD_VAR 0 5
28663: PUSH
28664: LD_INT 3
28666: ARRAY
28667: GREATEREQUAL
28668: AND
28669: ST_TO_ADDR
// end ;
28670: LD_VAR 0 3
28674: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28675: LD_INT 0
28677: PPUSH
28678: PPUSH
28679: PPUSH
28680: PPUSH
28681: PPUSH
28682: PPUSH
28683: PPUSH
28684: PPUSH
28685: PPUSH
28686: PPUSH
28687: PPUSH
// result := false ;
28688: LD_ADDR_VAR 0 8
28692: PUSH
28693: LD_INT 0
28695: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28696: LD_VAR 0 5
28700: NOT
28701: IFTRUE 28710
28703: PUSH
28704: LD_VAR 0 1
28708: NOT
28709: OR
28710: IFTRUE 28719
28712: PUSH
28713: LD_VAR 0 2
28717: NOT
28718: OR
28719: IFTRUE 28728
28721: PUSH
28722: LD_VAR 0 3
28726: NOT
28727: OR
28728: IFFALSE 28732
// exit ;
28730: GO 29558
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28732: LD_ADDR_VAR 0 14
28736: PUSH
28737: LD_VAR 0 1
28741: PPUSH
28742: LD_VAR 0 2
28746: PPUSH
28747: LD_VAR 0 3
28751: PPUSH
28752: LD_VAR 0 4
28756: PPUSH
28757: LD_VAR 0 5
28761: PUSH
28762: LD_INT 1
28764: ARRAY
28765: PPUSH
28766: CALL_OW 248
28770: PPUSH
28771: LD_INT 0
28773: PPUSH
28774: CALL 30839 0 6
28778: ST_TO_ADDR
// if not hexes then
28779: LD_VAR 0 14
28783: NOT
28784: IFFALSE 28788
// exit ;
28786: GO 29558
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28788: LD_ADDR_VAR 0 17
28792: PUSH
28793: LD_VAR 0 5
28797: PPUSH
28798: LD_INT 22
28800: PUSH
28801: LD_VAR 0 13
28805: PPUSH
28806: CALL_OW 255
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 2
28817: PUSH
28818: LD_INT 30
28820: PUSH
28821: LD_INT 0
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 30
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: LIST
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PPUSH
28847: CALL_OW 72
28851: ST_TO_ADDR
// for i = 1 to hexes do
28852: LD_ADDR_VAR 0 9
28856: PUSH
28857: DOUBLE
28858: LD_INT 1
28860: DEC
28861: ST_TO_ADDR
28862: LD_VAR 0 14
28866: PUSH
28867: FOR_TO
28868: IFFALSE 29556
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28870: LD_ADDR_VAR 0 13
28874: PUSH
28875: LD_VAR 0 14
28879: PUSH
28880: LD_VAR 0 9
28884: ARRAY
28885: PUSH
28886: LD_INT 1
28888: ARRAY
28889: PPUSH
28890: LD_VAR 0 14
28894: PUSH
28895: LD_VAR 0 9
28899: ARRAY
28900: PUSH
28901: LD_INT 2
28903: ARRAY
28904: PPUSH
28905: CALL_OW 428
28909: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28910: LD_VAR 0 14
28914: PUSH
28915: LD_VAR 0 9
28919: ARRAY
28920: PUSH
28921: LD_INT 1
28923: ARRAY
28924: PPUSH
28925: LD_VAR 0 14
28929: PUSH
28930: LD_VAR 0 9
28934: ARRAY
28935: PUSH
28936: LD_INT 2
28938: ARRAY
28939: PPUSH
28940: CALL_OW 351
28944: IFTRUE 28983
28946: PUSH
28947: LD_VAR 0 14
28951: PUSH
28952: LD_VAR 0 9
28956: ARRAY
28957: PUSH
28958: LD_INT 1
28960: ARRAY
28961: PPUSH
28962: LD_VAR 0 14
28966: PUSH
28967: LD_VAR 0 9
28971: ARRAY
28972: PUSH
28973: LD_INT 2
28975: ARRAY
28976: PPUSH
28977: CALL_OW 488
28981: NOT
28982: OR
28983: IFTRUE 29000
28985: PUSH
28986: LD_VAR 0 13
28990: PPUSH
28991: CALL_OW 247
28995: PUSH
28996: LD_INT 3
28998: EQUAL
28999: OR
29000: IFFALSE 29006
// exit ;
29002: POP
29003: POP
29004: GO 29558
// if not tmp then
29006: LD_VAR 0 13
29010: NOT
29011: IFFALSE 29015
// continue ;
29013: GO 28867
// result := true ;
29015: LD_ADDR_VAR 0 8
29019: PUSH
29020: LD_INT 1
29022: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29023: LD_VAR 0 6
29027: IFFALSE 29044
29029: PUSH
29030: LD_VAR 0 13
29034: PPUSH
29035: CALL_OW 247
29039: PUSH
29040: LD_INT 2
29042: EQUAL
29043: AND
29044: IFFALSE 29061
29046: PUSH
29047: LD_VAR 0 13
29051: PPUSH
29052: CALL_OW 263
29056: PUSH
29057: LD_INT 1
29059: EQUAL
29060: AND
29061: IFFALSE 29225
// begin if IsDrivenBy ( tmp ) then
29063: LD_VAR 0 13
29067: PPUSH
29068: CALL_OW 311
29072: IFFALSE 29076
// continue ;
29074: GO 28867
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29076: LD_VAR 0 6
29080: PPUSH
29081: LD_INT 3
29083: PUSH
29084: LD_INT 60
29086: PUSH
29087: EMPTY
29088: LIST
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 3
29096: PUSH
29097: LD_INT 55
29099: PUSH
29100: EMPTY
29101: LIST
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PPUSH
29111: CALL_OW 72
29115: IFFALSE 29223
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29117: LD_ADDR_VAR 0 18
29121: PUSH
29122: LD_VAR 0 6
29126: PPUSH
29127: LD_INT 3
29129: PUSH
29130: LD_INT 60
29132: PUSH
29133: EMPTY
29134: LIST
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 3
29142: PUSH
29143: LD_INT 55
29145: PUSH
29146: EMPTY
29147: LIST
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PPUSH
29157: CALL_OW 72
29161: PUSH
29162: LD_INT 1
29164: ARRAY
29165: ST_TO_ADDR
// if IsInUnit ( driver ) then
29166: LD_VAR 0 18
29170: PPUSH
29171: CALL_OW 310
29175: IFFALSE 29186
// ComExit ( driver ) ;
29177: LD_VAR 0 18
29181: PPUSH
29182: CALL 54839 0 1
// AddComEnterUnit ( driver , tmp ) ;
29186: LD_VAR 0 18
29190: PPUSH
29191: LD_VAR 0 13
29195: PPUSH
29196: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29200: LD_VAR 0 18
29204: PPUSH
29205: LD_VAR 0 7
29209: PPUSH
29210: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29214: LD_VAR 0 18
29218: PPUSH
29219: CALL_OW 181
// end ; continue ;
29223: GO 28867
// end ; if not cleaners or not tmp in cleaners then
29225: LD_VAR 0 6
29229: NOT
29230: IFTRUE 29245
29232: PUSH
29233: LD_VAR 0 13
29237: PUSH
29238: LD_VAR 0 6
29242: IN
29243: NOT
29244: OR
29245: IFFALSE 29554
// begin if dep then
29247: LD_VAR 0 17
29251: IFFALSE 29387
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29253: LD_ADDR_VAR 0 16
29257: PUSH
29258: LD_VAR 0 17
29262: PUSH
29263: LD_INT 1
29265: ARRAY
29266: PPUSH
29267: CALL_OW 250
29271: PPUSH
29272: LD_VAR 0 17
29276: PUSH
29277: LD_INT 1
29279: ARRAY
29280: PPUSH
29281: CALL_OW 254
29285: PPUSH
29286: LD_INT 5
29288: PPUSH
29289: CALL_OW 272
29293: PUSH
29294: LD_VAR 0 17
29298: PUSH
29299: LD_INT 1
29301: ARRAY
29302: PPUSH
29303: CALL_OW 251
29307: PPUSH
29308: LD_VAR 0 17
29312: PUSH
29313: LD_INT 1
29315: ARRAY
29316: PPUSH
29317: CALL_OW 254
29321: PPUSH
29322: LD_INT 5
29324: PPUSH
29325: CALL_OW 273
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29334: LD_VAR 0 16
29338: PUSH
29339: LD_INT 1
29341: ARRAY
29342: PPUSH
29343: LD_VAR 0 16
29347: PUSH
29348: LD_INT 2
29350: ARRAY
29351: PPUSH
29352: CALL_OW 488
29356: IFFALSE 29387
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29358: LD_VAR 0 13
29362: PPUSH
29363: LD_VAR 0 16
29367: PUSH
29368: LD_INT 1
29370: ARRAY
29371: PPUSH
29372: LD_VAR 0 16
29376: PUSH
29377: LD_INT 2
29379: ARRAY
29380: PPUSH
29381: CALL_OW 111
// continue ;
29385: GO 28867
// end ; end ; r := GetDir ( tmp ) ;
29387: LD_ADDR_VAR 0 15
29391: PUSH
29392: LD_VAR 0 13
29396: PPUSH
29397: CALL_OW 254
29401: ST_TO_ADDR
// if r = 5 then
29402: LD_VAR 0 15
29406: PUSH
29407: LD_INT 5
29409: EQUAL
29410: IFFALSE 29420
// r := 0 ;
29412: LD_ADDR_VAR 0 15
29416: PUSH
29417: LD_INT 0
29419: ST_TO_ADDR
// for j = r to 5 do
29420: LD_ADDR_VAR 0 10
29424: PUSH
29425: DOUBLE
29426: LD_VAR 0 15
29430: DEC
29431: ST_TO_ADDR
29432: LD_INT 5
29434: PUSH
29435: FOR_TO
29436: IFFALSE 29552
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29438: LD_ADDR_VAR 0 11
29442: PUSH
29443: LD_VAR 0 13
29447: PPUSH
29448: CALL_OW 250
29452: PPUSH
29453: LD_VAR 0 10
29457: PPUSH
29458: LD_INT 2
29460: PPUSH
29461: CALL_OW 272
29465: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29466: LD_ADDR_VAR 0 12
29470: PUSH
29471: LD_VAR 0 13
29475: PPUSH
29476: CALL_OW 251
29480: PPUSH
29481: LD_VAR 0 10
29485: PPUSH
29486: LD_INT 2
29488: PPUSH
29489: CALL_OW 273
29493: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29494: LD_VAR 0 11
29498: PPUSH
29499: LD_VAR 0 12
29503: PPUSH
29504: CALL_OW 488
29508: IFFALSE 29527
29510: PUSH
29511: LD_VAR 0 11
29515: PPUSH
29516: LD_VAR 0 12
29520: PPUSH
29521: CALL_OW 428
29525: NOT
29526: AND
29527: IFFALSE 29550
// begin ComMoveXY ( tmp , _x , _y ) ;
29529: LD_VAR 0 13
29533: PPUSH
29534: LD_VAR 0 11
29538: PPUSH
29539: LD_VAR 0 12
29543: PPUSH
29544: CALL_OW 111
// break ;
29548: GO 29552
// end ; end ;
29550: GO 29435
29552: POP
29553: POP
// end ; end ;
29554: GO 28867
29556: POP
29557: POP
// end ;
29558: LD_VAR 0 8
29562: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29563: LD_INT 0
29565: PPUSH
// result := true ;
29566: LD_ADDR_VAR 0 3
29570: PUSH
29571: LD_INT 1
29573: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29574: LD_VAR 0 2
29578: PUSH
29579: LD_INT 24
29581: DOUBLE
29582: EQUAL
29583: IFTRUE 29593
29585: LD_INT 33
29587: DOUBLE
29588: EQUAL
29589: IFTRUE 29593
29591: GO 29618
29593: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29594: LD_ADDR_VAR 0 3
29598: PUSH
29599: LD_INT 32
29601: PPUSH
29602: LD_VAR 0 1
29606: PPUSH
29607: CALL_OW 321
29611: PUSH
29612: LD_INT 2
29614: EQUAL
29615: ST_TO_ADDR
29616: GO 29934
29618: LD_INT 20
29620: DOUBLE
29621: EQUAL
29622: IFTRUE 29626
29624: GO 29651
29626: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29627: LD_ADDR_VAR 0 3
29631: PUSH
29632: LD_INT 6
29634: PPUSH
29635: LD_VAR 0 1
29639: PPUSH
29640: CALL_OW 321
29644: PUSH
29645: LD_INT 2
29647: EQUAL
29648: ST_TO_ADDR
29649: GO 29934
29651: LD_INT 22
29653: DOUBLE
29654: EQUAL
29655: IFTRUE 29665
29657: LD_INT 36
29659: DOUBLE
29660: EQUAL
29661: IFTRUE 29665
29663: GO 29690
29665: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29666: LD_ADDR_VAR 0 3
29670: PUSH
29671: LD_INT 15
29673: PPUSH
29674: LD_VAR 0 1
29678: PPUSH
29679: CALL_OW 321
29683: PUSH
29684: LD_INT 2
29686: EQUAL
29687: ST_TO_ADDR
29688: GO 29934
29690: LD_INT 30
29692: DOUBLE
29693: EQUAL
29694: IFTRUE 29698
29696: GO 29723
29698: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29699: LD_ADDR_VAR 0 3
29703: PUSH
29704: LD_INT 20
29706: PPUSH
29707: LD_VAR 0 1
29711: PPUSH
29712: CALL_OW 321
29716: PUSH
29717: LD_INT 2
29719: EQUAL
29720: ST_TO_ADDR
29721: GO 29934
29723: LD_INT 28
29725: DOUBLE
29726: EQUAL
29727: IFTRUE 29737
29729: LD_INT 21
29731: DOUBLE
29732: EQUAL
29733: IFTRUE 29737
29735: GO 29762
29737: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29738: LD_ADDR_VAR 0 3
29742: PUSH
29743: LD_INT 21
29745: PPUSH
29746: LD_VAR 0 1
29750: PPUSH
29751: CALL_OW 321
29755: PUSH
29756: LD_INT 2
29758: EQUAL
29759: ST_TO_ADDR
29760: GO 29934
29762: LD_INT 16
29764: DOUBLE
29765: EQUAL
29766: IFTRUE 29770
29768: GO 29795
29770: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29771: LD_ADDR_VAR 0 3
29775: PUSH
29776: LD_INT 84
29778: PPUSH
29779: LD_VAR 0 1
29783: PPUSH
29784: CALL_OW 321
29788: PUSH
29789: LD_INT 2
29791: EQUAL
29792: ST_TO_ADDR
29793: GO 29934
29795: LD_INT 19
29797: DOUBLE
29798: EQUAL
29799: IFTRUE 29809
29801: LD_INT 23
29803: DOUBLE
29804: EQUAL
29805: IFTRUE 29809
29807: GO 29834
29809: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29810: LD_ADDR_VAR 0 3
29814: PUSH
29815: LD_INT 83
29817: PPUSH
29818: LD_VAR 0 1
29822: PPUSH
29823: CALL_OW 321
29827: PUSH
29828: LD_INT 2
29830: EQUAL
29831: ST_TO_ADDR
29832: GO 29934
29834: LD_INT 17
29836: DOUBLE
29837: EQUAL
29838: IFTRUE 29842
29840: GO 29867
29842: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29843: LD_ADDR_VAR 0 3
29847: PUSH
29848: LD_INT 39
29850: PPUSH
29851: LD_VAR 0 1
29855: PPUSH
29856: CALL_OW 321
29860: PUSH
29861: LD_INT 2
29863: EQUAL
29864: ST_TO_ADDR
29865: GO 29934
29867: LD_INT 18
29869: DOUBLE
29870: EQUAL
29871: IFTRUE 29875
29873: GO 29900
29875: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29876: LD_ADDR_VAR 0 3
29880: PUSH
29881: LD_INT 40
29883: PPUSH
29884: LD_VAR 0 1
29888: PPUSH
29889: CALL_OW 321
29893: PUSH
29894: LD_INT 2
29896: EQUAL
29897: ST_TO_ADDR
29898: GO 29934
29900: LD_INT 27
29902: DOUBLE
29903: EQUAL
29904: IFTRUE 29908
29906: GO 29933
29908: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29909: LD_ADDR_VAR 0 3
29913: PUSH
29914: LD_INT 35
29916: PPUSH
29917: LD_VAR 0 1
29921: PPUSH
29922: CALL_OW 321
29926: PUSH
29927: LD_INT 2
29929: EQUAL
29930: ST_TO_ADDR
29931: GO 29934
29933: POP
// end ;
29934: LD_VAR 0 3
29938: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29939: LD_INT 0
29941: PPUSH
29942: PPUSH
29943: PPUSH
29944: PPUSH
29945: PPUSH
29946: PPUSH
29947: PPUSH
29948: PPUSH
29949: PPUSH
29950: PPUSH
29951: PPUSH
// result := false ;
29952: LD_ADDR_VAR 0 6
29956: PUSH
29957: LD_INT 0
29959: ST_TO_ADDR
// if btype = b_depot then
29960: LD_VAR 0 2
29964: PUSH
29965: LD_INT 0
29967: EQUAL
29968: IFFALSE 29980
// begin result := true ;
29970: LD_ADDR_VAR 0 6
29974: PUSH
29975: LD_INT 1
29977: ST_TO_ADDR
// exit ;
29978: GO 30834
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29980: LD_VAR 0 1
29984: NOT
29985: IFTRUE 30010
29987: PUSH
29988: LD_VAR 0 1
29992: PPUSH
29993: CALL_OW 266
29997: PUSH
29998: LD_INT 0
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: IN
30008: NOT
30009: OR
30010: IFTRUE 30019
30012: PUSH
30013: LD_VAR 0 2
30017: NOT
30018: OR
30019: IFTRUE 30055
30021: PUSH
30022: LD_VAR 0 5
30026: PUSH
30027: LD_INT 0
30029: PUSH
30030: LD_INT 1
30032: PUSH
30033: LD_INT 2
30035: PUSH
30036: LD_INT 3
30038: PUSH
30039: LD_INT 4
30041: PUSH
30042: LD_INT 5
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: IN
30053: NOT
30054: OR
30055: IFTRUE 30074
30057: PUSH
30058: LD_VAR 0 3
30062: PPUSH
30063: LD_VAR 0 4
30067: PPUSH
30068: CALL_OW 488
30072: NOT
30073: OR
30074: IFFALSE 30078
// exit ;
30076: GO 30834
// side := GetSide ( depot ) ;
30078: LD_ADDR_VAR 0 9
30082: PUSH
30083: LD_VAR 0 1
30087: PPUSH
30088: CALL_OW 255
30092: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30093: LD_VAR 0 9
30097: PPUSH
30098: LD_VAR 0 2
30102: PPUSH
30103: CALL 29563 0 2
30107: NOT
30108: IFFALSE 30112
// exit ;
30110: GO 30834
// pom := GetBase ( depot ) ;
30112: LD_ADDR_VAR 0 10
30116: PUSH
30117: LD_VAR 0 1
30121: PPUSH
30122: CALL_OW 274
30126: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30127: LD_ADDR_VAR 0 11
30131: PUSH
30132: LD_VAR 0 2
30136: PPUSH
30137: LD_VAR 0 1
30141: PPUSH
30142: CALL_OW 248
30146: PPUSH
30147: CALL_OW 450
30151: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30152: LD_VAR 0 10
30156: PPUSH
30157: LD_INT 1
30159: PPUSH
30160: CALL_OW 275
30164: PUSH
30165: LD_VAR 0 11
30169: PUSH
30170: LD_INT 1
30172: ARRAY
30173: GREATEREQUAL
30174: IFFALSE 30200
30176: PUSH
30177: LD_VAR 0 10
30181: PPUSH
30182: LD_INT 2
30184: PPUSH
30185: CALL_OW 275
30189: PUSH
30190: LD_VAR 0 11
30194: PUSH
30195: LD_INT 2
30197: ARRAY
30198: GREATEREQUAL
30199: AND
30200: IFFALSE 30226
30202: PUSH
30203: LD_VAR 0 10
30207: PPUSH
30208: LD_INT 3
30210: PPUSH
30211: CALL_OW 275
30215: PUSH
30216: LD_VAR 0 11
30220: PUSH
30221: LD_INT 3
30223: ARRAY
30224: GREATEREQUAL
30225: AND
30226: NOT
30227: IFFALSE 30231
// exit ;
30229: GO 30834
// if GetBType ( depot ) = b_depot then
30231: LD_VAR 0 1
30235: PPUSH
30236: CALL_OW 266
30240: PUSH
30241: LD_INT 0
30243: EQUAL
30244: IFFALSE 30256
// dist := 28 else
30246: LD_ADDR_VAR 0 14
30250: PUSH
30251: LD_INT 28
30253: ST_TO_ADDR
30254: GO 30264
// dist := 36 ;
30256: LD_ADDR_VAR 0 14
30260: PUSH
30261: LD_INT 36
30263: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30264: LD_VAR 0 1
30268: PPUSH
30269: LD_VAR 0 3
30273: PPUSH
30274: LD_VAR 0 4
30278: PPUSH
30279: CALL_OW 297
30283: PUSH
30284: LD_VAR 0 14
30288: GREATER
30289: IFFALSE 30293
// exit ;
30291: GO 30834
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30293: LD_ADDR_VAR 0 12
30297: PUSH
30298: LD_VAR 0 2
30302: PPUSH
30303: LD_VAR 0 3
30307: PPUSH
30308: LD_VAR 0 4
30312: PPUSH
30313: LD_VAR 0 5
30317: PPUSH
30318: LD_VAR 0 1
30322: PPUSH
30323: CALL_OW 248
30327: PPUSH
30328: LD_INT 0
30330: PPUSH
30331: CALL 30839 0 6
30335: ST_TO_ADDR
// if not hexes then
30336: LD_VAR 0 12
30340: NOT
30341: IFFALSE 30345
// exit ;
30343: GO 30834
// hex := GetHexInfo ( x , y ) ;
30345: LD_ADDR_VAR 0 15
30349: PUSH
30350: LD_VAR 0 3
30354: PPUSH
30355: LD_VAR 0 4
30359: PPUSH
30360: CALL_OW 546
30364: ST_TO_ADDR
// if hex [ 1 ] then
30365: LD_VAR 0 15
30369: PUSH
30370: LD_INT 1
30372: ARRAY
30373: IFFALSE 30377
// exit ;
30375: GO 30834
// height := hex [ 2 ] ;
30377: LD_ADDR_VAR 0 13
30381: PUSH
30382: LD_VAR 0 15
30386: PUSH
30387: LD_INT 2
30389: ARRAY
30390: ST_TO_ADDR
// for i = 1 to hexes do
30391: LD_ADDR_VAR 0 7
30395: PUSH
30396: DOUBLE
30397: LD_INT 1
30399: DEC
30400: ST_TO_ADDR
30401: LD_VAR 0 12
30405: PUSH
30406: FOR_TO
30407: IFFALSE 30751
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30409: LD_VAR 0 12
30413: PUSH
30414: LD_VAR 0 7
30418: ARRAY
30419: PUSH
30420: LD_INT 1
30422: ARRAY
30423: PPUSH
30424: LD_VAR 0 12
30428: PUSH
30429: LD_VAR 0 7
30433: ARRAY
30434: PUSH
30435: LD_INT 2
30437: ARRAY
30438: PPUSH
30439: CALL_OW 488
30443: NOT
30444: IFTRUE 30486
30446: PUSH
30447: LD_VAR 0 12
30451: PUSH
30452: LD_VAR 0 7
30456: ARRAY
30457: PUSH
30458: LD_INT 1
30460: ARRAY
30461: PPUSH
30462: LD_VAR 0 12
30466: PUSH
30467: LD_VAR 0 7
30471: ARRAY
30472: PUSH
30473: LD_INT 2
30475: ARRAY
30476: PPUSH
30477: CALL_OW 428
30481: PUSH
30482: LD_INT 0
30484: GREATER
30485: OR
30486: IFTRUE 30524
30488: PUSH
30489: LD_VAR 0 12
30493: PUSH
30494: LD_VAR 0 7
30498: ARRAY
30499: PUSH
30500: LD_INT 1
30502: ARRAY
30503: PPUSH
30504: LD_VAR 0 12
30508: PUSH
30509: LD_VAR 0 7
30513: ARRAY
30514: PUSH
30515: LD_INT 2
30517: ARRAY
30518: PPUSH
30519: CALL_OW 351
30523: OR
30524: IFFALSE 30530
// exit ;
30526: POP
30527: POP
30528: GO 30834
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30530: LD_ADDR_VAR 0 8
30534: PUSH
30535: LD_VAR 0 12
30539: PUSH
30540: LD_VAR 0 7
30544: ARRAY
30545: PUSH
30546: LD_INT 1
30548: ARRAY
30549: PPUSH
30550: LD_VAR 0 12
30554: PUSH
30555: LD_VAR 0 7
30559: ARRAY
30560: PUSH
30561: LD_INT 2
30563: ARRAY
30564: PPUSH
30565: CALL_OW 546
30569: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30570: LD_VAR 0 8
30574: PUSH
30575: LD_INT 1
30577: ARRAY
30578: IFTRUE 30600
30580: PUSH
30581: LD_VAR 0 8
30585: PUSH
30586: LD_INT 2
30588: ARRAY
30589: PUSH
30590: LD_VAR 0 13
30594: PUSH
30595: LD_INT 2
30597: PLUS
30598: GREATER
30599: OR
30600: IFTRUE 30622
30602: PUSH
30603: LD_VAR 0 8
30607: PUSH
30608: LD_INT 2
30610: ARRAY
30611: PUSH
30612: LD_VAR 0 13
30616: PUSH
30617: LD_INT 2
30619: MINUS
30620: LESS
30621: OR
30622: IFTRUE 30690
30624: PUSH
30625: LD_VAR 0 8
30629: PUSH
30630: LD_INT 3
30632: ARRAY
30633: PUSH
30634: LD_INT 0
30636: PUSH
30637: LD_INT 8
30639: PUSH
30640: LD_INT 9
30642: PUSH
30643: LD_INT 10
30645: PUSH
30646: LD_INT 11
30648: PUSH
30649: LD_INT 12
30651: PUSH
30652: LD_INT 13
30654: PUSH
30655: LD_INT 16
30657: PUSH
30658: LD_INT 17
30660: PUSH
30661: LD_INT 18
30663: PUSH
30664: LD_INT 19
30666: PUSH
30667: LD_INT 20
30669: PUSH
30670: LD_INT 21
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: IN
30688: NOT
30689: OR
30690: IFTRUE 30703
30692: PUSH
30693: LD_VAR 0 8
30697: PUSH
30698: LD_INT 5
30700: ARRAY
30701: NOT
30702: OR
30703: IFTRUE 30743
30705: PUSH
30706: LD_VAR 0 8
30710: PUSH
30711: LD_INT 6
30713: ARRAY
30714: PUSH
30715: LD_INT 1
30717: PUSH
30718: LD_INT 2
30720: PUSH
30721: LD_INT 7
30723: PUSH
30724: LD_INT 9
30726: PUSH
30727: LD_INT 10
30729: PUSH
30730: LD_INT 11
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: IN
30741: NOT
30742: OR
30743: IFFALSE 30749
// exit ;
30745: POP
30746: POP
30747: GO 30834
// end ;
30749: GO 30406
30751: POP
30752: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30753: LD_VAR 0 9
30757: PPUSH
30758: LD_VAR 0 3
30762: PPUSH
30763: LD_VAR 0 4
30767: PPUSH
30768: LD_INT 20
30770: PPUSH
30771: CALL 22653 0 4
30775: PUSH
30776: LD_INT 4
30778: ARRAY
30779: IFFALSE 30783
// exit ;
30781: GO 30834
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30783: LD_VAR 0 2
30787: PUSH
30788: LD_INT 29
30790: PUSH
30791: LD_INT 30
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: IN
30798: IFFALSE 30822
30800: PUSH
30801: LD_VAR 0 3
30805: PPUSH
30806: LD_VAR 0 4
30810: PPUSH
30811: LD_VAR 0 9
30815: PPUSH
30816: CALL_OW 440
30820: NOT
30821: AND
30822: IFFALSE 30826
// exit ;
30824: GO 30834
// result := true ;
30826: LD_ADDR_VAR 0 6
30830: PUSH
30831: LD_INT 1
30833: ST_TO_ADDR
// end ;
30834: LD_VAR 0 6
30838: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30839: LD_INT 0
30841: PPUSH
30842: PPUSH
30843: PPUSH
30844: PPUSH
30845: PPUSH
30846: PPUSH
30847: PPUSH
30848: PPUSH
30849: PPUSH
30850: PPUSH
30851: PPUSH
30852: PPUSH
30853: PPUSH
30854: PPUSH
30855: PPUSH
30856: PPUSH
30857: PPUSH
30858: PPUSH
30859: PPUSH
30860: PPUSH
30861: PPUSH
30862: PPUSH
30863: PPUSH
30864: PPUSH
30865: PPUSH
30866: PPUSH
30867: PPUSH
30868: PPUSH
30869: PPUSH
30870: PPUSH
30871: PPUSH
30872: PPUSH
30873: PPUSH
30874: PPUSH
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
30881: PPUSH
30882: PPUSH
30883: PPUSH
30884: PPUSH
30885: PPUSH
30886: PPUSH
30887: PPUSH
30888: PPUSH
30889: PPUSH
30890: PPUSH
30891: PPUSH
30892: PPUSH
30893: PPUSH
30894: PPUSH
30895: PPUSH
30896: PPUSH
30897: PPUSH
30898: PPUSH
// result = [ ] ;
30899: LD_ADDR_VAR 0 7
30903: PUSH
30904: EMPTY
30905: ST_TO_ADDR
// temp_list = [ ] ;
30906: LD_ADDR_VAR 0 9
30910: PUSH
30911: EMPTY
30912: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30913: LD_VAR 0 4
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: LD_INT 2
30926: PUSH
30927: LD_INT 3
30929: PUSH
30930: LD_INT 4
30932: PUSH
30933: LD_INT 5
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: IN
30944: NOT
30945: IFTRUE 30988
30947: PUSH
30948: LD_VAR 0 1
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: LD_INT 1
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: IN
30963: IFFALSE 30987
30965: PUSH
30966: LD_VAR 0 5
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: LD_INT 2
30976: PUSH
30977: LD_INT 3
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: LIST
30984: IN
30985: NOT
30986: AND
30987: OR
30988: IFFALSE 30992
// exit ;
30990: GO 49391
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30992: LD_VAR 0 1
30996: PUSH
30997: LD_INT 6
30999: PUSH
31000: LD_INT 7
31002: PUSH
31003: LD_INT 8
31005: PUSH
31006: LD_INT 13
31008: PUSH
31009: LD_INT 12
31011: PUSH
31012: LD_INT 15
31014: PUSH
31015: LD_INT 11
31017: PUSH
31018: LD_INT 14
31020: PUSH
31021: LD_INT 10
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: IN
31035: IFFALSE 31045
// btype = b_lab ;
31037: LD_ADDR_VAR 0 1
31041: PUSH
31042: LD_INT 6
31044: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31045: LD_VAR 0 6
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: LD_INT 2
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: LIST
31063: IN
31064: NOT
31065: IFTRUE 31133
31067: PUSH
31068: LD_VAR 0 1
31072: PUSH
31073: LD_INT 0
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: LD_INT 6
31087: PUSH
31088: LD_INT 36
31090: PUSH
31091: LD_INT 4
31093: PUSH
31094: LD_INT 5
31096: PUSH
31097: LD_INT 31
31099: PUSH
31100: LD_INT 32
31102: PUSH
31103: LD_INT 33
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: IN
31119: NOT
31120: IFFALSE 31132
31122: PUSH
31123: LD_VAR 0 6
31127: PUSH
31128: LD_INT 1
31130: EQUAL
31131: AND
31132: OR
31133: IFTRUE 31165
31135: PUSH
31136: LD_VAR 0 1
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: LD_INT 3
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: IN
31151: NOT
31152: IFFALSE 31164
31154: PUSH
31155: LD_VAR 0 6
31159: PUSH
31160: LD_INT 2
31162: EQUAL
31163: AND
31164: OR
31165: IFFALSE 31175
// mode = 0 ;
31167: LD_ADDR_VAR 0 6
31171: PUSH
31172: LD_INT 0
31174: ST_TO_ADDR
// case mode of 0 :
31175: LD_VAR 0 6
31179: PUSH
31180: LD_INT 0
31182: DOUBLE
31183: EQUAL
31184: IFTRUE 31188
31186: GO 42641
31188: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31189: LD_ADDR_VAR 0 11
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 1
31217: PUSH
31218: LD_INT 0
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: LD_INT 1
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: LD_INT 1
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 1
31247: NEG
31248: PUSH
31249: LD_INT 0
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 1
31258: NEG
31259: PUSH
31260: LD_INT 1
31262: NEG
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 1
31270: NEG
31271: PUSH
31272: LD_INT 2
31274: NEG
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: LD_INT 2
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: PUSH
31305: LD_INT 2
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 1
31324: NEG
31325: PUSH
31326: LD_INT 1
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: LD_INT 3
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 0
31345: PUSH
31346: LD_INT 3
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 1
31355: NEG
31356: PUSH
31357: LD_INT 2
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31382: LD_ADDR_VAR 0 12
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: LD_INT 1
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 1
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 1
31451: NEG
31452: PUSH
31453: LD_INT 1
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: LD_INT 0
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: PUSH
31485: LD_INT 1
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 1
31494: NEG
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 2
31505: NEG
31506: PUSH
31507: LD_INT 0
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 2
31516: NEG
31517: PUSH
31518: LD_INT 1
31520: NEG
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 2
31528: NEG
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 3
31539: NEG
31540: PUSH
31541: LD_INT 0
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 3
31550: NEG
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31578: LD_ADDR_VAR 0 13
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: LD_INT 0
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 1
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 1
31659: NEG
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: LD_INT 2
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 2
31701: NEG
31702: PUSH
31703: LD_INT 1
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 2
31713: NEG
31714: PUSH
31715: LD_INT 2
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 2
31725: NEG
31726: PUSH
31727: LD_INT 3
31729: NEG
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 3
31737: NEG
31738: PUSH
31739: LD_INT 2
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 3
31749: NEG
31750: PUSH
31751: LD_INT 3
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31777: LD_ADDR_VAR 0 14
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: LD_INT 0
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 1
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: LD_INT 1
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 0
31825: PUSH
31826: LD_INT 1
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 1
31835: NEG
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 1
31846: NEG
31847: PUSH
31848: LD_INT 1
31850: NEG
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: LD_INT 2
31862: NEG
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: LD_INT 2
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: LD_INT 1
31884: NEG
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 1
31892: PUSH
31893: LD_INT 2
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 0
31902: PUSH
31903: LD_INT 2
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 1
31912: NEG
31913: PUSH
31914: LD_INT 1
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PUSH
31925: LD_INT 3
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 0
31935: PUSH
31936: LD_INT 3
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 1
31946: PUSH
31947: LD_INT 2
31949: NEG
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31973: LD_ADDR_VAR 0 15
31977: PUSH
31978: LD_INT 0
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 0
31990: PUSH
31991: LD_INT 1
31993: NEG
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: LD_INT 0
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 1
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 0
32021: PUSH
32022: LD_INT 1
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 1
32031: NEG
32032: PUSH
32033: LD_INT 0
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 1
32042: NEG
32043: PUSH
32044: LD_INT 1
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 1
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 2
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 1
32085: NEG
32086: PUSH
32087: LD_INT 1
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 2
32096: NEG
32097: PUSH
32098: LD_INT 0
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 2
32107: NEG
32108: PUSH
32109: LD_INT 1
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: LD_INT 1
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 3
32130: PUSH
32131: LD_INT 0
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 3
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32166: LD_ADDR_VAR 0 16
32170: PUSH
32171: LD_INT 0
32173: PUSH
32174: LD_INT 0
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: LD_INT 1
32186: NEG
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 1
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 0
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: NEG
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 1
32235: NEG
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 1
32247: NEG
32248: PUSH
32249: LD_INT 2
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 2
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 2
32269: PUSH
32270: LD_INT 2
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: LD_INT 2
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: NEG
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 2
32301: NEG
32302: PUSH
32303: LD_INT 2
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 3
32313: PUSH
32314: LD_INT 2
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 3
32323: PUSH
32324: LD_INT 3
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: LD_INT 3
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32359: LD_ADDR_VAR 0 17
32363: PUSH
32364: LD_INT 0
32366: PUSH
32367: LD_INT 0
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: LD_INT 1
32379: NEG
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 1
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 1
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: LD_INT 1
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 1
32417: NEG
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 1
32428: NEG
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 1
32440: NEG
32441: PUSH
32442: LD_INT 2
32444: NEG
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: LD_INT 2
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: LD_INT 1
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 2
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 2
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: LD_INT 2
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: LD_INT 2
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 0
32514: PUSH
32515: LD_INT 2
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 1
32524: NEG
32525: PUSH
32526: LD_INT 1
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 2
32535: NEG
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 2
32546: NEG
32547: PUSH
32548: LD_INT 1
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 2
32558: NEG
32559: PUSH
32560: LD_INT 2
32562: NEG
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32589: LD_ADDR_VAR 0 18
32593: PUSH
32594: LD_INT 0
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: LD_INT 1
32609: NEG
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: LD_INT 0
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 1
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: LD_INT 1
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 1
32647: NEG
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 1
32658: NEG
32659: PUSH
32660: LD_INT 1
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 1
32670: NEG
32671: PUSH
32672: LD_INT 2
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 0
32682: PUSH
32683: LD_INT 2
32685: NEG
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 2
32704: PUSH
32705: LD_INT 0
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 2
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 2
32724: PUSH
32725: LD_INT 2
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: LD_INT 2
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: LD_INT 2
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: NEG
32755: PUSH
32756: LD_INT 1
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 2
32776: NEG
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 2
32788: NEG
32789: PUSH
32790: LD_INT 2
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32819: LD_ADDR_VAR 0 19
32823: PUSH
32824: LD_INT 0
32826: PUSH
32827: LD_INT 0
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 0
32836: PUSH
32837: LD_INT 1
32839: NEG
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 1
32847: PUSH
32848: LD_INT 0
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 1
32857: PUSH
32858: LD_INT 1
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 1
32877: NEG
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 1
32888: NEG
32889: PUSH
32890: LD_INT 1
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: LD_INT 2
32904: NEG
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: LD_INT 2
32915: NEG
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 2
32934: PUSH
32935: LD_INT 0
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 2
32944: PUSH
32945: LD_INT 1
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: LD_INT 2
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 1
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 0
32974: PUSH
32975: LD_INT 2
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 1
32984: NEG
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 2
32995: NEG
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 2
33006: NEG
33007: PUSH
33008: LD_INT 1
33010: NEG
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 2
33018: NEG
33019: PUSH
33020: LD_INT 2
33022: NEG
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33049: LD_ADDR_VAR 0 20
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: LD_INT 0
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: LD_INT 1
33122: NEG
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: LD_INT 2
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: LD_INT 2
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 2
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 2
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 2
33184: PUSH
33185: LD_INT 2
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 1
33194: PUSH
33195: LD_INT 2
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 0
33204: PUSH
33205: LD_INT 2
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 1
33214: NEG
33215: PUSH
33216: LD_INT 1
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 2
33225: NEG
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 2
33236: NEG
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 2
33248: NEG
33249: PUSH
33250: LD_INT 2
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33279: LD_ADDR_VAR 0 21
33283: PUSH
33284: LD_INT 0
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 0
33296: PUSH
33297: LD_INT 1
33299: NEG
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: LD_INT 1
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: LD_INT 1
33352: NEG
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 1
33360: NEG
33361: PUSH
33362: LD_INT 2
33364: NEG
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: LD_INT 2
33375: NEG
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 2
33394: PUSH
33395: LD_INT 0
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 2
33404: PUSH
33405: LD_INT 1
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 2
33414: PUSH
33415: LD_INT 2
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 1
33424: PUSH
33425: LD_INT 2
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 0
33434: PUSH
33435: LD_INT 2
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 1
33444: NEG
33445: PUSH
33446: LD_INT 1
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 2
33455: NEG
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 2
33466: NEG
33467: PUSH
33468: LD_INT 1
33470: NEG
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 2
33478: NEG
33479: PUSH
33480: LD_INT 2
33482: NEG
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33509: LD_ADDR_VAR 0 22
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 0
33526: PUSH
33527: LD_INT 1
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 1
33537: PUSH
33538: LD_INT 0
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 1
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 0
33557: PUSH
33558: LD_INT 1
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 1
33567: NEG
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 1
33578: NEG
33579: PUSH
33580: LD_INT 1
33582: NEG
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 1
33590: NEG
33591: PUSH
33592: LD_INT 2
33594: NEG
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 0
33602: PUSH
33603: LD_INT 2
33605: NEG
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: LD_INT 1
33616: NEG
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 2
33634: PUSH
33635: LD_INT 1
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 2
33644: PUSH
33645: LD_INT 2
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 0
33664: PUSH
33665: LD_INT 2
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 1
33674: NEG
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 2
33685: NEG
33686: PUSH
33687: LD_INT 0
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 2
33696: NEG
33697: PUSH
33698: LD_INT 1
33700: NEG
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: LD_INT 2
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33739: LD_ADDR_VAR 0 23
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: LD_INT 1
33759: NEG
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 1
33777: PUSH
33778: LD_INT 1
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 1
33797: NEG
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PUSH
33822: LD_INT 2
33824: NEG
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 0
33832: PUSH
33833: LD_INT 2
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 1
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 2
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 2
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 2
33874: PUSH
33875: LD_INT 2
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: LD_INT 2
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: LD_INT 2
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 1
33904: NEG
33905: PUSH
33906: LD_INT 1
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 2
33915: NEG
33916: PUSH
33917: LD_INT 0
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 2
33926: NEG
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 2
33938: NEG
33939: PUSH
33940: LD_INT 2
33942: NEG
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 2
33950: NEG
33951: PUSH
33952: LD_INT 3
33954: NEG
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 1
33962: NEG
33963: PUSH
33964: LD_INT 3
33966: NEG
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 1
33974: PUSH
33975: LD_INT 2
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 2
33985: PUSH
33986: LD_INT 1
33988: NEG
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34019: LD_ADDR_VAR 0 24
34023: PUSH
34024: LD_INT 0
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: LD_INT 1
34039: NEG
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 1
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 1
34088: NEG
34089: PUSH
34090: LD_INT 1
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: LD_INT 2
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: LD_INT 2
34115: NEG
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 1
34123: PUSH
34124: LD_INT 1
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 2
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 2
34154: PUSH
34155: LD_INT 2
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 1
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: LD_INT 2
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: NEG
34185: PUSH
34186: LD_INT 1
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 2
34195: NEG
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 2
34206: NEG
34207: PUSH
34208: LD_INT 1
34210: NEG
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 2
34218: NEG
34219: PUSH
34220: LD_INT 2
34222: NEG
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 1
34230: PUSH
34231: LD_INT 2
34233: NEG
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 2
34241: PUSH
34242: LD_INT 1
34244: NEG
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 3
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 3
34262: PUSH
34263: LD_INT 2
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34295: LD_ADDR_VAR 0 25
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 0
34312: PUSH
34313: LD_INT 1
34315: NEG
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 1
34353: NEG
34354: PUSH
34355: LD_INT 0
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: NEG
34365: PUSH
34366: LD_INT 1
34368: NEG
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 1
34376: NEG
34377: PUSH
34378: LD_INT 2
34380: NEG
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: LD_INT 2
34391: NEG
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 1
34399: PUSH
34400: LD_INT 1
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 2
34410: PUSH
34411: LD_INT 0
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 2
34420: PUSH
34421: LD_INT 1
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 2
34430: PUSH
34431: LD_INT 2
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 1
34440: PUSH
34441: LD_INT 2
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 0
34450: PUSH
34451: LD_INT 2
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 1
34460: NEG
34461: PUSH
34462: LD_INT 1
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 2
34471: NEG
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 2
34482: NEG
34483: PUSH
34484: LD_INT 1
34486: NEG
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 2
34494: NEG
34495: PUSH
34496: LD_INT 2
34498: NEG
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 3
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 3
34516: PUSH
34517: LD_INT 2
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 2
34526: PUSH
34527: LD_INT 3
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 1
34536: PUSH
34537: LD_INT 3
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34569: LD_ADDR_VAR 0 26
34573: PUSH
34574: LD_INT 0
34576: PUSH
34577: LD_INT 0
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: LD_INT 0
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 1
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 1
34627: NEG
34628: PUSH
34629: LD_INT 0
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 1
34638: NEG
34639: PUSH
34640: LD_INT 1
34642: NEG
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 1
34650: NEG
34651: PUSH
34652: LD_INT 2
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: LD_INT 2
34665: NEG
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 2
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 2
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 2
34704: PUSH
34705: LD_INT 2
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 1
34714: PUSH
34715: LD_INT 2
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 0
34724: PUSH
34725: LD_INT 2
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 1
34734: NEG
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 2
34745: NEG
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 2
34756: NEG
34757: PUSH
34758: LD_INT 1
34760: NEG
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 2
34768: NEG
34769: PUSH
34770: LD_INT 2
34772: NEG
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 2
34780: PUSH
34781: LD_INT 3
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: LD_INT 3
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: LD_INT 2
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 2
34811: NEG
34812: PUSH
34813: LD_INT 1
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34845: LD_ADDR_VAR 0 27
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: LD_INT 0
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: LD_INT 1
34865: NEG
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 1
34883: PUSH
34884: LD_INT 1
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: LD_INT 1
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 1
34914: NEG
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: NEG
34927: PUSH
34928: LD_INT 2
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 0
34938: PUSH
34939: LD_INT 2
34941: NEG
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: LD_INT 1
34952: NEG
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 2
34960: PUSH
34961: LD_INT 0
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 2
34970: PUSH
34971: LD_INT 1
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 2
34980: PUSH
34981: LD_INT 2
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: LD_INT 2
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: LD_INT 2
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 2
35021: NEG
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 2
35032: NEG
35033: PUSH
35034: LD_INT 1
35036: NEG
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 2
35044: NEG
35045: PUSH
35046: LD_INT 2
35048: NEG
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 1
35056: NEG
35057: PUSH
35058: LD_INT 2
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 2
35067: NEG
35068: PUSH
35069: LD_INT 1
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 3
35078: NEG
35079: PUSH
35080: LD_INT 1
35082: NEG
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 3
35090: NEG
35091: PUSH
35092: LD_INT 2
35094: NEG
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35125: LD_ADDR_VAR 0 28
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 0
35142: PUSH
35143: LD_INT 1
35145: NEG
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 1
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: LD_INT 1
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 1
35183: NEG
35184: PUSH
35185: LD_INT 0
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: LD_INT 2
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: LD_INT 2
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 1
35229: PUSH
35230: LD_INT 1
35232: NEG
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 2
35240: PUSH
35241: LD_INT 0
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 2
35250: PUSH
35251: LD_INT 1
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 2
35260: PUSH
35261: LD_INT 2
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: LD_INT 2
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: LD_INT 2
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 1
35290: NEG
35291: PUSH
35292: LD_INT 1
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 2
35301: NEG
35302: PUSH
35303: LD_INT 0
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 2
35312: NEG
35313: PUSH
35314: LD_INT 1
35316: NEG
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 2
35324: NEG
35325: PUSH
35326: LD_INT 2
35328: NEG
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 2
35336: NEG
35337: PUSH
35338: LD_INT 3
35340: NEG
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 1
35348: NEG
35349: PUSH
35350: LD_INT 3
35352: NEG
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 3
35360: NEG
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 3
35372: NEG
35373: PUSH
35374: LD_INT 2
35376: NEG
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35407: LD_ADDR_VAR 0 29
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 0
35424: PUSH
35425: LD_INT 1
35427: NEG
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: LD_INT 0
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 0
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 1
35465: NEG
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 1
35476: NEG
35477: PUSH
35478: LD_INT 1
35480: NEG
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 1
35488: NEG
35489: PUSH
35490: LD_INT 2
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 0
35500: PUSH
35501: LD_INT 2
35503: NEG
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: LD_INT 1
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 2
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 1
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: LD_INT 2
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 1
35562: NEG
35563: PUSH
35564: LD_INT 1
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 2
35573: NEG
35574: PUSH
35575: LD_INT 1
35577: NEG
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 2
35585: NEG
35586: PUSH
35587: LD_INT 2
35589: NEG
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: NEG
35598: PUSH
35599: LD_INT 3
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 2
35609: PUSH
35610: LD_INT 1
35612: NEG
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 3
35620: PUSH
35621: LD_INT 1
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 1
35630: PUSH
35631: LD_INT 3
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 3
35651: NEG
35652: PUSH
35653: LD_INT 2
35655: NEG
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35686: LD_ADDR_VAR 0 30
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 0
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: LD_INT 1
35706: NEG
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: NEG
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: LD_INT 2
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 0
35779: PUSH
35780: LD_INT 2
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 1
35790: PUSH
35791: LD_INT 1
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 2
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 2
35811: PUSH
35812: LD_INT 1
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 2
35821: PUSH
35822: LD_INT 2
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: PUSH
35832: LD_INT 2
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 1
35841: NEG
35842: PUSH
35843: LD_INT 1
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 2
35852: NEG
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 2
35863: NEG
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: LD_INT 3
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: LD_INT 2
35890: NEG
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 3
35898: PUSH
35899: LD_INT 2
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 2
35908: PUSH
35909: LD_INT 3
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 2
35918: NEG
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 3
35929: NEG
35930: PUSH
35931: LD_INT 1
35933: NEG
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35964: LD_ADDR_VAR 0 31
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 1
36033: NEG
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 1
36045: NEG
36046: PUSH
36047: LD_INT 2
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: LD_INT 1
36060: NEG
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 2
36068: PUSH
36069: LD_INT 0
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: LD_INT 1
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 2
36088: PUSH
36089: LD_INT 2
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 1
36098: PUSH
36099: LD_INT 2
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: LD_INT 2
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 1
36118: NEG
36119: PUSH
36120: LD_INT 1
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 2
36129: NEG
36130: PUSH
36131: LD_INT 1
36133: NEG
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 2
36141: NEG
36142: PUSH
36143: LD_INT 2
36145: NEG
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 2
36153: NEG
36154: PUSH
36155: LD_INT 3
36157: NEG
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 2
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 3
36176: PUSH
36177: LD_INT 1
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: LD_INT 3
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: LD_INT 2
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 3
36207: NEG
36208: PUSH
36209: LD_INT 2
36211: NEG
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36242: LD_ADDR_VAR 0 32
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: LD_INT 1
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: NEG
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: NEG
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: LD_INT 2
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: LD_INT 2
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: LD_INT 1
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: LD_INT 2
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 1
36397: NEG
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 2
36408: NEG
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 2
36419: NEG
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: LD_INT 3
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 1
36443: PUSH
36444: LD_INT 2
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 3
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 2
36464: PUSH
36465: LD_INT 3
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 2
36474: NEG
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 3
36485: NEG
36486: PUSH
36487: LD_INT 1
36489: NEG
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36520: LD_ADDR_VAR 0 33
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 1
36548: PUSH
36549: LD_INT 0
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: LD_INT 1
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 1
36589: NEG
36590: PUSH
36591: LD_INT 1
36593: NEG
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 1
36601: NEG
36602: PUSH
36603: LD_INT 2
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: PUSH
36614: LD_INT 1
36616: NEG
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 2
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: LD_INT 1
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: LD_INT 2
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: LD_INT 2
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 1
36664: NEG
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 2
36675: NEG
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 2
36686: NEG
36687: PUSH
36688: LD_INT 1
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 2
36698: NEG
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 2
36710: NEG
36711: PUSH
36712: LD_INT 3
36714: NEG
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 2
36722: PUSH
36723: LD_INT 1
36725: NEG
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 3
36733: PUSH
36734: LD_INT 1
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: LD_INT 3
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: LD_INT 2
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 3
36764: NEG
36765: PUSH
36766: LD_INT 2
36768: NEG
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36799: LD_ADDR_VAR 0 34
36803: PUSH
36804: LD_INT 0
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 0
36816: PUSH
36817: LD_INT 1
36819: NEG
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 1
36837: PUSH
36838: LD_INT 1
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 1
36857: NEG
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 1
36868: NEG
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 1
36880: NEG
36881: PUSH
36882: LD_INT 2
36884: NEG
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 0
36892: PUSH
36893: LD_INT 2
36895: NEG
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 2
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 2
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 1
36944: NEG
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 2
36955: NEG
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 2
36966: NEG
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 2
36978: NEG
36979: PUSH
36980: LD_INT 2
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 1
36990: NEG
36991: PUSH
36992: LD_INT 3
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: LD_INT 2
37005: NEG
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 3
37013: PUSH
37014: LD_INT 2
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 2
37023: PUSH
37024: LD_INT 3
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: NEG
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 3
37044: NEG
37045: PUSH
37046: LD_INT 1
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37079: LD_ADDR_VAR 0 35
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: LD_INT 0
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: LD_INT 1
37099: NEG
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 1
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 1
37117: PUSH
37118: LD_INT 1
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: LD_INT 1
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 1
37137: NEG
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 1
37148: NEG
37149: PUSH
37150: LD_INT 1
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 2
37160: PUSH
37161: LD_INT 1
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 2
37170: NEG
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37191: LD_ADDR_VAR 0 36
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: LD_INT 1
37211: NEG
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 1
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 1
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: LD_INT 1
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 1
37249: NEG
37250: PUSH
37251: LD_INT 0
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 1
37260: NEG
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 1
37272: NEG
37273: PUSH
37274: LD_INT 2
37276: NEG
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 1
37284: PUSH
37285: LD_INT 2
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37303: LD_ADDR_VAR 0 37
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: LD_INT 1
37323: NEG
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 1
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 1
37361: NEG
37362: PUSH
37363: LD_INT 0
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: LD_INT 1
37376: NEG
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 1
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37415: LD_ADDR_VAR 0 38
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 1
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: LD_INT 1
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 2
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 2
37506: NEG
37507: PUSH
37508: LD_INT 1
37510: NEG
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37527: LD_ADDR_VAR 0 39
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: LD_INT 1
37547: NEG
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: LD_INT 0
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: PUSH
37566: LD_INT 1
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: LD_INT 1
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 1
37585: NEG
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 1
37608: NEG
37609: PUSH
37610: LD_INT 2
37612: NEG
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: LD_INT 2
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37639: LD_ADDR_VAR 0 40
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 0
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: NEG
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 1
37731: NEG
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37751: LD_ADDR_VAR 0 41
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: LD_INT 1
37771: NEG
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 1
37789: PUSH
37790: LD_INT 1
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 0
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 1
37809: NEG
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: NEG
37821: PUSH
37822: LD_INT 1
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 1
37832: NEG
37833: PUSH
37834: LD_INT 2
37836: NEG
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 1
37844: PUSH
37845: LD_INT 1
37847: NEG
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 2
37865: PUSH
37866: LD_INT 1
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 2
37875: PUSH
37876: LD_INT 2
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: LD_INT 2
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: NEG
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 2
37906: NEG
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 2
37917: NEG
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 2
37929: NEG
37930: PUSH
37931: LD_INT 2
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 2
37941: NEG
37942: PUSH
37943: LD_INT 3
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 2
37953: PUSH
37954: LD_INT 1
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 3
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 3
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 3
37984: PUSH
37985: LD_INT 2
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 3
37994: PUSH
37995: LD_INT 3
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: LD_INT 3
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 2
38014: NEG
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 3
38025: NEG
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 3
38036: NEG
38037: PUSH
38038: LD_INT 1
38040: NEG
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 3
38048: NEG
38049: PUSH
38050: LD_INT 2
38052: NEG
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 3
38060: NEG
38061: PUSH
38062: LD_INT 3
38064: NEG
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38101: LD_ADDR_VAR 0 42
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: NEG
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 1
38170: NEG
38171: PUSH
38172: LD_INT 1
38174: NEG
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 1
38182: NEG
38183: PUSH
38184: LD_INT 2
38186: NEG
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: LD_INT 2
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 2
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 2
38226: PUSH
38227: LD_INT 2
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 1
38236: PUSH
38237: LD_INT 2
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 0
38246: PUSH
38247: LD_INT 2
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 1
38256: NEG
38257: PUSH
38258: LD_INT 1
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 2
38267: NEG
38268: PUSH
38269: LD_INT 1
38271: NEG
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 2
38279: NEG
38280: PUSH
38281: LD_INT 2
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 2
38291: NEG
38292: PUSH
38293: LD_INT 3
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: LD_INT 3
38307: NEG
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: LD_INT 3
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: LD_INT 2
38329: NEG
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 3
38337: PUSH
38338: LD_INT 2
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 3
38347: PUSH
38348: LD_INT 3
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 2
38357: PUSH
38358: LD_INT 3
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: LD_INT 3
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 0
38377: PUSH
38378: LD_INT 3
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: LD_INT 2
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 3
38398: NEG
38399: PUSH
38400: LD_INT 2
38402: NEG
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 3
38410: NEG
38411: PUSH
38412: LD_INT 3
38414: NEG
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38451: LD_ADDR_VAR 0 43
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: NEG
38533: PUSH
38534: LD_INT 2
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: LD_INT 2
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: LD_INT 2
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: LD_INT 1
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: LD_INT 0
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 2
38628: NEG
38629: PUSH
38630: LD_INT 1
38632: NEG
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 1
38640: NEG
38641: PUSH
38642: LD_INT 3
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 0
38652: PUSH
38653: LD_INT 3
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 1
38663: PUSH
38664: LD_INT 2
38666: NEG
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 2
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 3
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 3
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 1
38705: PUSH
38706: LD_INT 3
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: LD_INT 3
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 1
38725: NEG
38726: PUSH
38727: LD_INT 2
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 2
38736: NEG
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 3
38747: NEG
38748: PUSH
38749: LD_INT 0
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 3
38758: NEG
38759: PUSH
38760: LD_INT 1
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38799: LD_ADDR_VAR 0 44
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: LD_INT 0
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 1
38837: PUSH
38838: LD_INT 1
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: LD_INT 1
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: LD_INT 0
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 1
38868: NEG
38869: PUSH
38870: LD_INT 1
38872: NEG
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 1
38880: NEG
38881: PUSH
38882: LD_INT 2
38884: NEG
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 2
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 2
38923: PUSH
38924: LD_INT 2
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: LD_INT 2
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 2
38965: NEG
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 2
38977: NEG
38978: PUSH
38979: LD_INT 2
38981: NEG
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 2
38989: NEG
38990: PUSH
38991: LD_INT 3
38993: NEG
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 2
39001: PUSH
39002: LD_INT 1
39004: NEG
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 3
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 3
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 3
39032: PUSH
39033: LD_INT 2
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 3
39042: PUSH
39043: LD_INT 3
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 2
39052: PUSH
39053: LD_INT 3
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 2
39062: NEG
39063: PUSH
39064: LD_INT 1
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 3
39073: NEG
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 3
39084: NEG
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 3
39096: NEG
39097: PUSH
39098: LD_INT 2
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 3
39108: NEG
39109: PUSH
39110: LD_INT 3
39112: NEG
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39149: LD_ADDR_VAR 0 45
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: LD_INT 1
39169: NEG
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 1
39230: NEG
39231: PUSH
39232: LD_INT 2
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: LD_INT 2
39245: NEG
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: LD_INT 1
39256: NEG
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 2
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: LD_INT 2
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: LD_INT 2
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: LD_INT 2
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 2
39315: NEG
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 2
39327: NEG
39328: PUSH
39329: LD_INT 2
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 2
39339: NEG
39340: PUSH
39341: LD_INT 3
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: LD_INT 3
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 3
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 3
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 3
39395: PUSH
39396: LD_INT 3
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 2
39405: PUSH
39406: LD_INT 3
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: LD_INT 3
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: LD_INT 3
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 3
39446: NEG
39447: PUSH
39448: LD_INT 2
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 3
39458: NEG
39459: PUSH
39460: LD_INT 3
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39499: LD_ADDR_VAR 0 46
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: LD_INT 0
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: NEG
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: LD_INT 2
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: LD_INT 2
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 2
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: LD_INT 2
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: LD_INT 2
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 2
39665: NEG
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 2
39676: NEG
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 3
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: LD_INT 3
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: LD_INT 2
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 3
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 3
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: LD_INT 3
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: LD_INT 3
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: LD_INT 2
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 2
39784: NEG
39785: PUSH
39786: LD_INT 1
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 3
39795: NEG
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 3
39806: NEG
39807: PUSH
39808: LD_INT 1
39810: NEG
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39847: LD_ADDR_VAR 0 47
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 0
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 1
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: LD_INT 0
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: NEG
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PUSH
39930: LD_INT 2
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: LD_INT 2
39943: NEG
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 1
39951: PUSH
39952: LD_INT 1
39954: NEG
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 2
39962: NEG
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 2
39974: NEG
39975: PUSH
39976: LD_INT 2
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39998: LD_ADDR_VAR 0 48
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: LD_INT 2
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 2
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 2
40123: PUSH
40124: LD_INT 1
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40145: LD_ADDR_VAR 0 49
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: LD_INT 0
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 2
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: LD_INT 2
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: LD_INT 2
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40289: LD_ADDR_VAR 0 50
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: LD_INT 1
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: NEG
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: LD_INT 1
40362: NEG
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 2
40370: PUSH
40371: LD_INT 1
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 2
40380: PUSH
40381: LD_INT 2
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: LD_INT 2
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: LD_INT 2
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40433: LD_ADDR_VAR 0 51
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 0
40524: PUSH
40525: LD_INT 2
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 2
40545: NEG
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: NEG
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40580: LD_ADDR_VAR 0 52
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: LD_INT 1
40600: NEG
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: LD_INT 1
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 2
40684: NEG
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 2
40707: NEG
40708: PUSH
40709: LD_INT 2
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40731: LD_ADDR_VAR 0 53
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: LD_INT 0
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 1
40789: NEG
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 0
40824: PUSH
40825: LD_INT 2
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: LD_INT 1
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 2
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 2
40856: PUSH
40857: LD_INT 1
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: LD_INT 2
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: LD_INT 2
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: NEG
40897: PUSH
40898: LD_INT 1
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 2
40907: NEG
40908: PUSH
40909: LD_INT 0
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 2
40918: NEG
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40961: LD_ADDR_VAR 0 54
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: LD_INT 2
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 2
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 2
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 2
41096: PUSH
41097: LD_INT 2
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 1
41106: PUSH
41107: LD_INT 2
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: LD_INT 2
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: LD_INT 1
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 2
41137: NEG
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 2
41148: NEG
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 2
41160: NEG
41161: PUSH
41162: LD_INT 2
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41191: LD_ADDR_VAR 0 55
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: LD_INT 1
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: NEG
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: LD_INT 2
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: LD_INT 2
41287: NEG
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 2
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 2
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: LD_INT 2
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 2
41367: NEG
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 2
41378: NEG
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 2
41390: NEG
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41421: LD_ADDR_VAR 0 56
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: LD_INT 1
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: LD_INT 2
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 2
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 2
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 2
41556: PUSH
41557: LD_INT 2
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: LD_INT 2
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: LD_INT 2
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: NEG
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 2
41608: NEG
41609: PUSH
41610: LD_INT 1
41612: NEG
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 2
41620: NEG
41621: PUSH
41622: LD_INT 2
41624: NEG
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41651: LD_ADDR_VAR 0 57
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 0
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: NEG
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: LD_INT 2
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: LD_INT 1
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 2
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 2
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 2
41786: PUSH
41787: LD_INT 2
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: LD_INT 2
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: LD_INT 2
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: LD_INT 1
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 2
41827: NEG
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 2
41838: NEG
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 2
41850: NEG
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41881: LD_ADDR_VAR 0 58
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 0
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: LD_INT 1
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: LD_INT 1
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: LD_INT 2
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: LD_INT 2
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 2
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 2
42016: PUSH
42017: LD_INT 2
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: LD_INT 2
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: LD_INT 2
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 1
42046: NEG
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 2
42057: NEG
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 2
42068: NEG
42069: PUSH
42070: LD_INT 1
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 2
42080: NEG
42081: PUSH
42082: LD_INT 2
42084: NEG
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42111: LD_ADDR_VAR 0 59
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42199: LD_ADDR_VAR 0 60
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: LD_INT 0
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42287: LD_ADDR_VAR 0 61
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42375: LD_ADDR_VAR 0 62
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42463: LD_ADDR_VAR 0 63
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42551: LD_ADDR_VAR 0 64
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: NEG
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: ST_TO_ADDR
// end ; 1 :
42639: GO 48536
42641: LD_INT 1
42643: DOUBLE
42644: EQUAL
42645: IFTRUE 42649
42647: GO 45272
42649: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42650: LD_ADDR_VAR 0 11
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: LD_INT 3
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: LD_INT 3
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: LIST
42693: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42694: LD_ADDR_VAR 0 12
42698: PUSH
42699: LD_INT 2
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 3
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 3
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42735: LD_ADDR_VAR 0 13
42739: PUSH
42740: LD_INT 3
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: LD_INT 3
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: LIST
42774: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42775: LD_ADDR_VAR 0 14
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: LD_INT 3
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 3
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: LIST
42815: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42816: LD_ADDR_VAR 0 15
42820: PUSH
42821: LD_INT 2
42823: NEG
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 3
42834: NEG
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 3
42845: NEG
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: LIST
42859: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42860: LD_ADDR_VAR 0 16
42864: PUSH
42865: LD_INT 2
42867: NEG
42868: PUSH
42869: LD_INT 3
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 3
42879: NEG
42880: PUSH
42881: LD_INT 2
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 3
42891: NEG
42892: PUSH
42893: LD_INT 3
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42906: LD_ADDR_VAR 0 17
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: LD_INT 3
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: LD_INT 3
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: LD_INT 2
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: LIST
42949: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42950: LD_ADDR_VAR 0 18
42954: PUSH
42955: LD_INT 2
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 3
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 3
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: LIST
42990: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42991: LD_ADDR_VAR 0 19
42995: PUSH
42996: LD_INT 3
42998: PUSH
42999: LD_INT 2
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 3
43008: PUSH
43009: LD_INT 3
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: LD_INT 3
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: LIST
43030: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43031: LD_ADDR_VAR 0 20
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 3
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 3
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: LD_INT 2
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43072: LD_ADDR_VAR 0 21
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 3
43090: NEG
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 3
43101: NEG
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: LIST
43115: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43116: LD_ADDR_VAR 0 22
43120: PUSH
43121: LD_INT 2
43123: NEG
43124: PUSH
43125: LD_INT 3
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 3
43135: NEG
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 3
43147: NEG
43148: PUSH
43149: LD_INT 3
43151: NEG
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: LIST
43161: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43162: LD_ADDR_VAR 0 23
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: LD_INT 3
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: LD_INT 4
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: LD_INT 3
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: LIST
43205: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43206: LD_ADDR_VAR 0 24
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: LD_INT 1
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 4
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: LIST
43246: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43247: LD_ADDR_VAR 0 25
43251: PUSH
43252: LD_INT 3
43254: PUSH
43255: LD_INT 3
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 4
43264: PUSH
43265: LD_INT 3
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 3
43274: PUSH
43275: LD_INT 4
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: LIST
43286: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43287: LD_ADDR_VAR 0 26
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 3
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: LD_INT 4
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: LD_INT 3
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: LIST
43327: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43328: LD_ADDR_VAR 0 27
43332: PUSH
43333: LD_INT 3
43335: NEG
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 3
43346: NEG
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 4
43357: NEG
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: LIST
43371: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43372: LD_ADDR_VAR 0 28
43376: PUSH
43377: LD_INT 3
43379: NEG
43380: PUSH
43381: LD_INT 3
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 3
43391: NEG
43392: PUSH
43393: LD_INT 4
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 4
43403: NEG
43404: PUSH
43405: LD_INT 3
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: LIST
43417: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43418: LD_ADDR_VAR 0 29
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: LD_INT 3
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 3
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 2
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: LD_INT 4
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: LD_INT 4
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 3
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: LD_INT 5
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: LD_INT 5
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: LD_INT 4
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: LD_INT 6
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 6
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: LD_INT 5
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43573: LD_ADDR_VAR 0 30
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 3
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 3
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 3
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 4
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 4
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 4
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 5
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 5
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 5
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 6
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 6
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43716: LD_ADDR_VAR 0 31
43720: PUSH
43721: LD_INT 3
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 3
43733: PUSH
43734: LD_INT 3
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: LD_INT 3
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 4
43753: PUSH
43754: LD_INT 3
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 4
43763: PUSH
43764: LD_INT 4
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: LD_INT 4
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 5
43783: PUSH
43784: LD_INT 4
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 5
43793: PUSH
43794: LD_INT 5
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 4
43803: PUSH
43804: LD_INT 5
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 6
43813: PUSH
43814: LD_INT 5
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 6
43823: PUSH
43824: LD_INT 6
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 5
43833: PUSH
43834: LD_INT 6
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43855: LD_ADDR_VAR 0 32
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: LD_INT 3
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 3
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 4
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 4
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: LD_INT 3
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: LD_INT 5
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: LD_INT 5
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 1
43944: NEG
43945: PUSH
43946: LD_INT 4
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: LD_INT 6
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: LD_INT 6
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: LD_INT 5
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43998: LD_ADDR_VAR 0 33
44002: PUSH
44003: LD_INT 2
44005: NEG
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 3
44016: NEG
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 3
44027: NEG
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 3
44039: NEG
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 4
44050: NEG
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 4
44061: NEG
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 4
44073: NEG
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 5
44084: NEG
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 5
44095: NEG
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 5
44107: NEG
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 6
44118: NEG
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 6
44129: NEG
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44153: LD_ADDR_VAR 0 34
44157: PUSH
44158: LD_INT 2
44160: NEG
44161: PUSH
44162: LD_INT 3
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 3
44172: NEG
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 3
44184: NEG
44185: PUSH
44186: LD_INT 3
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 3
44196: NEG
44197: PUSH
44198: LD_INT 4
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 4
44208: NEG
44209: PUSH
44210: LD_INT 3
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 4
44220: NEG
44221: PUSH
44222: LD_INT 4
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 4
44232: NEG
44233: PUSH
44234: LD_INT 5
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 5
44244: NEG
44245: PUSH
44246: LD_INT 4
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 5
44256: NEG
44257: PUSH
44258: LD_INT 5
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 5
44268: NEG
44269: PUSH
44270: LD_INT 6
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 6
44280: NEG
44281: PUSH
44282: LD_INT 5
44284: NEG
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 6
44292: NEG
44293: PUSH
44294: LD_INT 6
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44316: LD_ADDR_VAR 0 41
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 2
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: LD_INT 3
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: LIST
44359: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44360: LD_ADDR_VAR 0 42
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 3
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: LIST
44400: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44401: LD_ADDR_VAR 0 43
44405: PUSH
44406: LD_INT 2
44408: PUSH
44409: LD_INT 2
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 3
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: LD_INT 3
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: LIST
44440: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44441: LD_ADDR_VAR 0 44
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: LD_INT 3
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: LIST
44481: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44482: LD_ADDR_VAR 0 45
44486: PUSH
44487: LD_INT 2
44489: NEG
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 3
44511: NEG
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: LIST
44525: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44526: LD_ADDR_VAR 0 46
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: LD_INT 3
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 3
44557: NEG
44558: PUSH
44559: LD_INT 2
44561: NEG
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: LIST
44571: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44572: LD_ADDR_VAR 0 47
44576: PUSH
44577: LD_INT 2
44579: NEG
44580: PUSH
44581: LD_INT 3
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: LD_INT 3
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44605: LD_ADDR_VAR 0 48
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44636: LD_ADDR_VAR 0 49
44640: PUSH
44641: LD_INT 3
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 3
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44665: LD_ADDR_VAR 0 50
44669: PUSH
44670: LD_INT 2
44672: PUSH
44673: LD_INT 3
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: LD_INT 3
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44694: LD_ADDR_VAR 0 51
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44725: LD_ADDR_VAR 0 52
44729: PUSH
44730: LD_INT 3
44732: NEG
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 3
44744: NEG
44745: PUSH
44746: LD_INT 2
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44758: LD_ADDR_VAR 0 53
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: LD_INT 3
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 3
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 2
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: LIST
44801: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44802: LD_ADDR_VAR 0 54
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 3
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 3
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: LIST
44842: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44843: LD_ADDR_VAR 0 55
44847: PUSH
44848: LD_INT 3
44850: PUSH
44851: LD_INT 2
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 3
44860: PUSH
44861: LD_INT 3
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: LD_INT 3
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: LIST
44882: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44883: LD_ADDR_VAR 0 56
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: LD_INT 3
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: LD_INT 3
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44924: LD_ADDR_VAR 0 57
44928: PUSH
44929: LD_INT 2
44931: NEG
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 3
44942: NEG
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 3
44953: NEG
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44968: LD_ADDR_VAR 0 58
44972: PUSH
44973: LD_INT 2
44975: NEG
44976: PUSH
44977: LD_INT 3
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 3
44987: NEG
44988: PUSH
44989: LD_INT 2
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 3
44999: NEG
45000: PUSH
45001: LD_INT 3
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: LIST
45013: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45014: LD_ADDR_VAR 0 59
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 2
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 2
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: LIST
45057: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45058: LD_ADDR_VAR 0 60
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 2
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: LIST
45098: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45099: LD_ADDR_VAR 0 61
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: LD_INT 2
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: LIST
45138: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45139: LD_ADDR_VAR 0 62
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: LIST
45179: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45180: LD_ADDR_VAR 0 63
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 2
45198: NEG
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 2
45209: NEG
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: LIST
45223: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45224: LD_ADDR_VAR 0 64
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 2
45243: NEG
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: LD_INT 2
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: LIST
45269: ST_TO_ADDR
// end ; 2 :
45270: GO 48536
45272: LD_INT 2
45274: DOUBLE
45275: EQUAL
45276: IFTRUE 45280
45278: GO 48535
45280: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45281: LD_ADDR_VAR 0 29
45285: PUSH
45286: LD_INT 4
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 4
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 5
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 5
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 4
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 3
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 3
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 3
45360: PUSH
45361: LD_INT 2
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 5
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: LD_INT 3
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 3
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 4
45401: PUSH
45402: LD_INT 3
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 4
45411: PUSH
45412: LD_INT 4
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 3
45421: PUSH
45422: LD_INT 4
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: LD_INT 3
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 4
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 4
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 4
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: LD_INT 3
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: LD_INT 4
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: LD_INT 5
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: LD_INT 5
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: LD_INT 4
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: NEG
45533: PUSH
45534: LD_INT 3
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 2
45543: PUSH
45544: LD_INT 5
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 2
45553: NEG
45554: PUSH
45555: LD_INT 3
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 3
45564: NEG
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 3
45575: NEG
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 3
45609: NEG
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 4
45620: NEG
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 4
45631: NEG
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 4
45643: NEG
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: NEG
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 4
45666: NEG
45667: PUSH
45668: LD_INT 4
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 4
45678: NEG
45679: PUSH
45680: LD_INT 5
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 3
45690: NEG
45691: PUSH
45692: LD_INT 4
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 3
45702: NEG
45703: PUSH
45704: LD_INT 3
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 4
45714: NEG
45715: PUSH
45716: LD_INT 3
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 5
45726: NEG
45727: PUSH
45728: LD_INT 4
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 5
45738: NEG
45739: PUSH
45740: LD_INT 5
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 3
45750: NEG
45751: PUSH
45752: LD_INT 5
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 5
45762: NEG
45763: PUSH
45764: LD_INT 3
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45819: LD_ADDR_VAR 0 30
45823: PUSH
45824: LD_INT 4
45826: PUSH
45827: LD_INT 4
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 4
45836: PUSH
45837: LD_INT 3
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 5
45846: PUSH
45847: LD_INT 4
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 5
45856: PUSH
45857: LD_INT 5
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 4
45866: PUSH
45867: LD_INT 5
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 3
45876: PUSH
45877: LD_INT 4
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 3
45886: PUSH
45887: LD_INT 3
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 5
45896: PUSH
45897: LD_INT 3
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 3
45906: PUSH
45907: LD_INT 5
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: LD_INT 3
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: LD_INT 3
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: LD_INT 4
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 4
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: LD_INT 3
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 2
45988: PUSH
45989: LD_INT 4
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 4
46009: NEG
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 4
46020: NEG
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 3
46032: NEG
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 3
46043: NEG
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 4
46054: NEG
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 5
46065: NEG
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 5
46076: NEG
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 5
46088: NEG
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 3
46100: NEG
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 3
46111: NEG
46112: PUSH
46113: LD_INT 3
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 3
46123: NEG
46124: PUSH
46125: LD_INT 4
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: LD_INT 3
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: LD_INT 2
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 3
46159: NEG
46160: PUSH
46161: LD_INT 2
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 4
46171: NEG
46172: PUSH
46173: LD_INT 3
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 4
46183: NEG
46184: PUSH
46185: LD_INT 4
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 2
46195: NEG
46196: PUSH
46197: LD_INT 4
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 4
46207: NEG
46208: PUSH
46209: LD_INT 2
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 4
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: LD_INT 5
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 4
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: LD_INT 3
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 3
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 4
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 5
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: LD_INT 3
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: LD_INT 5
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46366: LD_ADDR_VAR 0 31
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: LD_INT 4
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 3
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: LD_INT 4
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 5
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: LD_INT 5
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 4
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: LD_INT 3
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: LD_INT 5
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 2
46455: NEG
46456: PUSH
46457: LD_INT 3
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 3
46466: NEG
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 3
46477: NEG
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: NEG
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 2
46500: NEG
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 3
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 4
46522: NEG
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 4
46533: NEG
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 4
46545: NEG
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 4
46568: NEG
46569: PUSH
46570: LD_INT 4
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 4
46580: NEG
46581: PUSH
46582: LD_INT 5
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 3
46592: NEG
46593: PUSH
46594: LD_INT 4
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 3
46604: NEG
46605: PUSH
46606: LD_INT 3
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 4
46616: NEG
46617: PUSH
46618: LD_INT 3
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 5
46628: NEG
46629: PUSH
46630: LD_INT 4
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 5
46640: NEG
46641: PUSH
46642: LD_INT 5
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 3
46652: NEG
46653: PUSH
46654: LD_INT 5
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 5
46664: NEG
46665: PUSH
46666: LD_INT 3
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 3
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 4
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: LD_INT 3
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: LD_INT 2
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: LD_INT 2
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: LD_INT 3
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: LD_INT 4
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 2
46755: PUSH
46756: LD_INT 2
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: LD_INT 4
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 4
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 4
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 5
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 5
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 4
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 3
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 3
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 3
46850: PUSH
46851: LD_INT 2
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 5
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46916: LD_ADDR_VAR 0 32
46920: PUSH
46921: LD_INT 4
46923: NEG
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 4
46934: NEG
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 3
46946: NEG
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 3
46957: NEG
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 4
46968: NEG
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 5
46979: NEG
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 5
46990: NEG
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 5
47002: NEG
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 3
47014: NEG
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 3
47025: NEG
47026: PUSH
47027: LD_INT 3
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 3
47037: NEG
47038: PUSH
47039: LD_INT 4
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: NEG
47050: PUSH
47051: LD_INT 3
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 3
47073: NEG
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 4
47085: NEG
47086: PUSH
47087: LD_INT 3
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 4
47097: NEG
47098: PUSH
47099: LD_INT 4
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PUSH
47111: LD_INT 4
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 4
47121: NEG
47122: PUSH
47123: LD_INT 2
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_INT 4
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 5
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 4
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: LD_INT 3
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 3
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 4
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: LD_INT 5
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: LD_INT 3
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: LD_INT 5
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 3
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 3
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 4
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 4
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 3
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 4
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 4
47328: PUSH
47329: LD_INT 4
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 4
47338: PUSH
47339: LD_INT 3
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 5
47348: PUSH
47349: LD_INT 4
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 5
47358: PUSH
47359: LD_INT 5
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 4
47368: PUSH
47369: LD_INT 5
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 3
47378: PUSH
47379: LD_INT 4
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 3
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 5
47398: PUSH
47399: LD_INT 3
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 3
47408: PUSH
47409: LD_INT 5
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47463: LD_ADDR_VAR 0 33
47467: PUSH
47468: LD_INT 4
47470: NEG
47471: PUSH
47472: LD_INT 4
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 4
47482: NEG
47483: PUSH
47484: LD_INT 5
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 3
47494: NEG
47495: PUSH
47496: LD_INT 4
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 3
47506: NEG
47507: PUSH
47508: LD_INT 3
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 4
47518: NEG
47519: PUSH
47520: LD_INT 3
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 5
47530: NEG
47531: PUSH
47532: LD_INT 4
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 5
47542: NEG
47543: PUSH
47544: LD_INT 5
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 3
47554: NEG
47555: PUSH
47556: LD_INT 5
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 5
47566: NEG
47567: PUSH
47568: LD_INT 3
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 3
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 4
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 3
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 3
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: LD_INT 4
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: LD_INT 4
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 4
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 4
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 5
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 5
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 4
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 3
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 3
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 3
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 5
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 3
47773: PUSH
47774: LD_INT 3
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 3
47783: PUSH
47784: LD_INT 2
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 4
47793: PUSH
47794: LD_INT 3
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 4
47803: PUSH
47804: LD_INT 4
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 3
47813: PUSH
47814: LD_INT 4
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: LD_INT 3
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 2
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 4
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: LD_INT 4
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: LD_INT 4
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_INT 3
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: LD_INT 4
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: LD_INT 5
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 5
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: LD_INT 4
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: LD_INT 3
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: LD_INT 5
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: LD_INT 3
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48001: LD_ADDR_VAR 0 34
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: LD_INT 4
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: LD_INT 5
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: LD_INT 4
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 3
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 3
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: LD_INT 4
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 5
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: LD_INT 3
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 2
48098: NEG
48099: PUSH
48100: LD_INT 5
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 3
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 3
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 4
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 4
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 3
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 4
48193: PUSH
48194: LD_INT 2
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 4
48203: PUSH
48204: LD_INT 4
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 4
48213: PUSH
48214: LD_INT 3
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 5
48223: PUSH
48224: LD_INT 4
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 5
48233: PUSH
48234: LD_INT 5
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 4
48243: PUSH
48244: LD_INT 5
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 3
48253: PUSH
48254: LD_INT 4
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 3
48263: PUSH
48264: LD_INT 3
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 5
48273: PUSH
48274: LD_INT 3
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 3
48283: PUSH
48284: LD_INT 5
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 3
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: LD_INT 3
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 4
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: LD_INT 4
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: LD_INT 3
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: LD_INT 4
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 2
48375: NEG
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 4
48386: NEG
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 4
48397: NEG
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 3
48409: NEG
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 3
48420: NEG
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 4
48431: NEG
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 5
48442: NEG
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 5
48453: NEG
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 5
48465: NEG
48466: PUSH
48467: LD_INT 2
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 3
48477: NEG
48478: PUSH
48479: LD_INT 2
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: ST_TO_ADDR
// end ; end ;
48533: GO 48536
48535: POP
// case btype of b_depot , b_warehouse :
48536: LD_VAR 0 1
48540: PUSH
48541: LD_INT 0
48543: DOUBLE
48544: EQUAL
48545: IFTRUE 48555
48547: LD_INT 1
48549: DOUBLE
48550: EQUAL
48551: IFTRUE 48555
48553: GO 48756
48555: POP
// case nation of nation_american :
48556: LD_VAR 0 5
48560: PUSH
48561: LD_INT 1
48563: DOUBLE
48564: EQUAL
48565: IFTRUE 48569
48567: GO 48625
48569: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48570: LD_ADDR_VAR 0 9
48574: PUSH
48575: LD_VAR 0 11
48579: PUSH
48580: LD_VAR 0 12
48584: PUSH
48585: LD_VAR 0 13
48589: PUSH
48590: LD_VAR 0 14
48594: PUSH
48595: LD_VAR 0 15
48599: PUSH
48600: LD_VAR 0 16
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: PUSH
48613: LD_VAR 0 4
48617: PUSH
48618: LD_INT 1
48620: PLUS
48621: ARRAY
48622: ST_TO_ADDR
48623: GO 48754
48625: LD_INT 2
48627: DOUBLE
48628: EQUAL
48629: IFTRUE 48633
48631: GO 48689
48633: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48634: LD_ADDR_VAR 0 9
48638: PUSH
48639: LD_VAR 0 17
48643: PUSH
48644: LD_VAR 0 18
48648: PUSH
48649: LD_VAR 0 19
48653: PUSH
48654: LD_VAR 0 20
48658: PUSH
48659: LD_VAR 0 21
48663: PUSH
48664: LD_VAR 0 22
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: PUSH
48677: LD_VAR 0 4
48681: PUSH
48682: LD_INT 1
48684: PLUS
48685: ARRAY
48686: ST_TO_ADDR
48687: GO 48754
48689: LD_INT 3
48691: DOUBLE
48692: EQUAL
48693: IFTRUE 48697
48695: GO 48753
48697: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48698: LD_ADDR_VAR 0 9
48702: PUSH
48703: LD_VAR 0 23
48707: PUSH
48708: LD_VAR 0 24
48712: PUSH
48713: LD_VAR 0 25
48717: PUSH
48718: LD_VAR 0 26
48722: PUSH
48723: LD_VAR 0 27
48727: PUSH
48728: LD_VAR 0 28
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: PUSH
48741: LD_VAR 0 4
48745: PUSH
48746: LD_INT 1
48748: PLUS
48749: ARRAY
48750: ST_TO_ADDR
48751: GO 48754
48753: POP
48754: GO 49309
48756: LD_INT 2
48758: DOUBLE
48759: EQUAL
48760: IFTRUE 48770
48762: LD_INT 3
48764: DOUBLE
48765: EQUAL
48766: IFTRUE 48770
48768: GO 48826
48770: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48771: LD_ADDR_VAR 0 9
48775: PUSH
48776: LD_VAR 0 29
48780: PUSH
48781: LD_VAR 0 30
48785: PUSH
48786: LD_VAR 0 31
48790: PUSH
48791: LD_VAR 0 32
48795: PUSH
48796: LD_VAR 0 33
48800: PUSH
48801: LD_VAR 0 34
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: PUSH
48814: LD_VAR 0 4
48818: PUSH
48819: LD_INT 1
48821: PLUS
48822: ARRAY
48823: ST_TO_ADDR
48824: GO 49309
48826: LD_INT 16
48828: DOUBLE
48829: EQUAL
48830: IFTRUE 48888
48832: LD_INT 17
48834: DOUBLE
48835: EQUAL
48836: IFTRUE 48888
48838: LD_INT 18
48840: DOUBLE
48841: EQUAL
48842: IFTRUE 48888
48844: LD_INT 19
48846: DOUBLE
48847: EQUAL
48848: IFTRUE 48888
48850: LD_INT 22
48852: DOUBLE
48853: EQUAL
48854: IFTRUE 48888
48856: LD_INT 20
48858: DOUBLE
48859: EQUAL
48860: IFTRUE 48888
48862: LD_INT 21
48864: DOUBLE
48865: EQUAL
48866: IFTRUE 48888
48868: LD_INT 23
48870: DOUBLE
48871: EQUAL
48872: IFTRUE 48888
48874: LD_INT 24
48876: DOUBLE
48877: EQUAL
48878: IFTRUE 48888
48880: LD_INT 25
48882: DOUBLE
48883: EQUAL
48884: IFTRUE 48888
48886: GO 48944
48888: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48889: LD_ADDR_VAR 0 9
48893: PUSH
48894: LD_VAR 0 35
48898: PUSH
48899: LD_VAR 0 36
48903: PUSH
48904: LD_VAR 0 37
48908: PUSH
48909: LD_VAR 0 38
48913: PUSH
48914: LD_VAR 0 39
48918: PUSH
48919: LD_VAR 0 40
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: PUSH
48932: LD_VAR 0 4
48936: PUSH
48937: LD_INT 1
48939: PLUS
48940: ARRAY
48941: ST_TO_ADDR
48942: GO 49309
48944: LD_INT 6
48946: DOUBLE
48947: EQUAL
48948: IFTRUE 49000
48950: LD_INT 7
48952: DOUBLE
48953: EQUAL
48954: IFTRUE 49000
48956: LD_INT 8
48958: DOUBLE
48959: EQUAL
48960: IFTRUE 49000
48962: LD_INT 13
48964: DOUBLE
48965: EQUAL
48966: IFTRUE 49000
48968: LD_INT 12
48970: DOUBLE
48971: EQUAL
48972: IFTRUE 49000
48974: LD_INT 15
48976: DOUBLE
48977: EQUAL
48978: IFTRUE 49000
48980: LD_INT 11
48982: DOUBLE
48983: EQUAL
48984: IFTRUE 49000
48986: LD_INT 14
48988: DOUBLE
48989: EQUAL
48990: IFTRUE 49000
48992: LD_INT 10
48994: DOUBLE
48995: EQUAL
48996: IFTRUE 49000
48998: GO 49056
49000: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49001: LD_ADDR_VAR 0 9
49005: PUSH
49006: LD_VAR 0 41
49010: PUSH
49011: LD_VAR 0 42
49015: PUSH
49016: LD_VAR 0 43
49020: PUSH
49021: LD_VAR 0 44
49025: PUSH
49026: LD_VAR 0 45
49030: PUSH
49031: LD_VAR 0 46
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: PUSH
49044: LD_VAR 0 4
49048: PUSH
49049: LD_INT 1
49051: PLUS
49052: ARRAY
49053: ST_TO_ADDR
49054: GO 49309
49056: LD_INT 36
49058: DOUBLE
49059: EQUAL
49060: IFTRUE 49064
49062: GO 49120
49064: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49065: LD_ADDR_VAR 0 9
49069: PUSH
49070: LD_VAR 0 47
49074: PUSH
49075: LD_VAR 0 48
49079: PUSH
49080: LD_VAR 0 49
49084: PUSH
49085: LD_VAR 0 50
49089: PUSH
49090: LD_VAR 0 51
49094: PUSH
49095: LD_VAR 0 52
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: PUSH
49108: LD_VAR 0 4
49112: PUSH
49113: LD_INT 1
49115: PLUS
49116: ARRAY
49117: ST_TO_ADDR
49118: GO 49309
49120: LD_INT 4
49122: DOUBLE
49123: EQUAL
49124: IFTRUE 49146
49126: LD_INT 5
49128: DOUBLE
49129: EQUAL
49130: IFTRUE 49146
49132: LD_INT 34
49134: DOUBLE
49135: EQUAL
49136: IFTRUE 49146
49138: LD_INT 37
49140: DOUBLE
49141: EQUAL
49142: IFTRUE 49146
49144: GO 49202
49146: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49147: LD_ADDR_VAR 0 9
49151: PUSH
49152: LD_VAR 0 53
49156: PUSH
49157: LD_VAR 0 54
49161: PUSH
49162: LD_VAR 0 55
49166: PUSH
49167: LD_VAR 0 56
49171: PUSH
49172: LD_VAR 0 57
49176: PUSH
49177: LD_VAR 0 58
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: PUSH
49190: LD_VAR 0 4
49194: PUSH
49195: LD_INT 1
49197: PLUS
49198: ARRAY
49199: ST_TO_ADDR
49200: GO 49309
49202: LD_INT 31
49204: DOUBLE
49205: EQUAL
49206: IFTRUE 49252
49208: LD_INT 32
49210: DOUBLE
49211: EQUAL
49212: IFTRUE 49252
49214: LD_INT 33
49216: DOUBLE
49217: EQUAL
49218: IFTRUE 49252
49220: LD_INT 27
49222: DOUBLE
49223: EQUAL
49224: IFTRUE 49252
49226: LD_INT 26
49228: DOUBLE
49229: EQUAL
49230: IFTRUE 49252
49232: LD_INT 28
49234: DOUBLE
49235: EQUAL
49236: IFTRUE 49252
49238: LD_INT 29
49240: DOUBLE
49241: EQUAL
49242: IFTRUE 49252
49244: LD_INT 30
49246: DOUBLE
49247: EQUAL
49248: IFTRUE 49252
49250: GO 49308
49252: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49253: LD_ADDR_VAR 0 9
49257: PUSH
49258: LD_VAR 0 59
49262: PUSH
49263: LD_VAR 0 60
49267: PUSH
49268: LD_VAR 0 61
49272: PUSH
49273: LD_VAR 0 62
49277: PUSH
49278: LD_VAR 0 63
49282: PUSH
49283: LD_VAR 0 64
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: PUSH
49296: LD_VAR 0 4
49300: PUSH
49301: LD_INT 1
49303: PLUS
49304: ARRAY
49305: ST_TO_ADDR
49306: GO 49309
49308: POP
// temp_list2 = [ ] ;
49309: LD_ADDR_VAR 0 10
49313: PUSH
49314: EMPTY
49315: ST_TO_ADDR
// for i in temp_list do
49316: LD_ADDR_VAR 0 8
49320: PUSH
49321: LD_VAR 0 9
49325: PUSH
49326: FOR_IN
49327: IFFALSE 49379
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49329: LD_ADDR_VAR 0 10
49333: PUSH
49334: LD_VAR 0 10
49338: PUSH
49339: LD_VAR 0 8
49343: PUSH
49344: LD_INT 1
49346: ARRAY
49347: PUSH
49348: LD_VAR 0 2
49352: PLUS
49353: PUSH
49354: LD_VAR 0 8
49358: PUSH
49359: LD_INT 2
49361: ARRAY
49362: PUSH
49363: LD_VAR 0 3
49367: PLUS
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: EMPTY
49374: LIST
49375: ADD
49376: ST_TO_ADDR
49377: GO 49326
49379: POP
49380: POP
// result = temp_list2 ;
49381: LD_ADDR_VAR 0 7
49385: PUSH
49386: LD_VAR 0 10
49390: ST_TO_ADDR
// end ;
49391: LD_VAR 0 7
49395: RET
// export function EnemyInRange ( unit , dist ) ; begin
49396: LD_INT 0
49398: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49399: LD_ADDR_VAR 0 3
49403: PUSH
49404: LD_VAR 0 1
49408: PPUSH
49409: CALL_OW 255
49413: PPUSH
49414: LD_VAR 0 1
49418: PPUSH
49419: CALL_OW 250
49423: PPUSH
49424: LD_VAR 0 1
49428: PPUSH
49429: CALL_OW 251
49433: PPUSH
49434: LD_VAR 0 2
49438: PPUSH
49439: CALL 22653 0 4
49443: PUSH
49444: LD_INT 4
49446: ARRAY
49447: ST_TO_ADDR
// end ;
49448: LD_VAR 0 3
49452: RET
// export function PlayerSeeMe ( unit ) ; begin
49453: LD_INT 0
49455: PPUSH
// result := See ( your_side , unit ) ;
49456: LD_ADDR_VAR 0 2
49460: PUSH
49461: LD_OWVAR 2
49465: PPUSH
49466: LD_VAR 0 1
49470: PPUSH
49471: CALL_OW 292
49475: ST_TO_ADDR
// end ;
49476: LD_VAR 0 2
49480: RET
// export function ReverseDir ( unit ) ; begin
49481: LD_INT 0
49483: PPUSH
// if not unit then
49484: LD_VAR 0 1
49488: NOT
49489: IFFALSE 49493
// exit ;
49491: GO 49516
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49493: LD_ADDR_VAR 0 2
49497: PUSH
49498: LD_VAR 0 1
49502: PPUSH
49503: CALL_OW 254
49507: PUSH
49508: LD_INT 3
49510: PLUS
49511: PUSH
49512: LD_INT 6
49514: MOD
49515: ST_TO_ADDR
// end ;
49516: LD_VAR 0 2
49520: RET
// export function ReverseArray ( array ) ; var i ; begin
49521: LD_INT 0
49523: PPUSH
49524: PPUSH
// if not array then
49525: LD_VAR 0 1
49529: NOT
49530: IFFALSE 49534
// exit ;
49532: GO 49589
// result := [ ] ;
49534: LD_ADDR_VAR 0 2
49538: PUSH
49539: EMPTY
49540: ST_TO_ADDR
// for i := array downto 1 do
49541: LD_ADDR_VAR 0 3
49545: PUSH
49546: DOUBLE
49547: LD_VAR 0 1
49551: INC
49552: ST_TO_ADDR
49553: LD_INT 1
49555: PUSH
49556: FOR_DOWNTO
49557: IFFALSE 49587
// result := Join ( result , array [ i ] ) ;
49559: LD_ADDR_VAR 0 2
49563: PUSH
49564: LD_VAR 0 2
49568: PPUSH
49569: LD_VAR 0 1
49573: PUSH
49574: LD_VAR 0 3
49578: ARRAY
49579: PPUSH
49580: CALL 54441 0 2
49584: ST_TO_ADDR
49585: GO 49556
49587: POP
49588: POP
// end ;
49589: LD_VAR 0 2
49593: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49594: LD_INT 0
49596: PPUSH
49597: PPUSH
49598: PPUSH
49599: PPUSH
49600: PPUSH
49601: PPUSH
// if not unit or not hexes then
49602: LD_VAR 0 1
49606: NOT
49607: IFTRUE 49616
49609: PUSH
49610: LD_VAR 0 2
49614: NOT
49615: OR
49616: IFFALSE 49620
// exit ;
49618: GO 49743
// dist := 9999 ;
49620: LD_ADDR_VAR 0 5
49624: PUSH
49625: LD_INT 9999
49627: ST_TO_ADDR
// for i = 1 to hexes do
49628: LD_ADDR_VAR 0 4
49632: PUSH
49633: DOUBLE
49634: LD_INT 1
49636: DEC
49637: ST_TO_ADDR
49638: LD_VAR 0 2
49642: PUSH
49643: FOR_TO
49644: IFFALSE 49731
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49646: LD_ADDR_VAR 0 6
49650: PUSH
49651: LD_VAR 0 1
49655: PPUSH
49656: LD_VAR 0 2
49660: PUSH
49661: LD_VAR 0 4
49665: ARRAY
49666: PUSH
49667: LD_INT 1
49669: ARRAY
49670: PPUSH
49671: LD_VAR 0 2
49675: PUSH
49676: LD_VAR 0 4
49680: ARRAY
49681: PUSH
49682: LD_INT 2
49684: ARRAY
49685: PPUSH
49686: CALL_OW 297
49690: ST_TO_ADDR
// if tdist < dist then
49691: LD_VAR 0 6
49695: PUSH
49696: LD_VAR 0 5
49700: LESS
49701: IFFALSE 49729
// begin hex := hexes [ i ] ;
49703: LD_ADDR_VAR 0 8
49707: PUSH
49708: LD_VAR 0 2
49712: PUSH
49713: LD_VAR 0 4
49717: ARRAY
49718: ST_TO_ADDR
// dist := tdist ;
49719: LD_ADDR_VAR 0 5
49723: PUSH
49724: LD_VAR 0 6
49728: ST_TO_ADDR
// end ; end ;
49729: GO 49643
49731: POP
49732: POP
// result := hex ;
49733: LD_ADDR_VAR 0 3
49737: PUSH
49738: LD_VAR 0 8
49742: ST_TO_ADDR
// end ;
49743: LD_VAR 0 3
49747: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49748: LD_INT 0
49750: PPUSH
49751: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49752: LD_VAR 0 1
49756: NOT
49757: IFTRUE 49796
49759: PUSH
49760: LD_VAR 0 1
49764: PUSH
49765: LD_INT 21
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 23
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PPUSH
49789: CALL_OW 69
49793: IN
49794: NOT
49795: OR
49796: IFFALSE 49800
// exit ;
49798: GO 49847
// for i = 1 to 3 do
49800: LD_ADDR_VAR 0 3
49804: PUSH
49805: DOUBLE
49806: LD_INT 1
49808: DEC
49809: ST_TO_ADDR
49810: LD_INT 3
49812: PUSH
49813: FOR_TO
49814: IFFALSE 49845
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49816: LD_VAR 0 1
49820: PPUSH
49821: CALL_OW 250
49825: PPUSH
49826: LD_VAR 0 1
49830: PPUSH
49831: CALL_OW 251
49835: PPUSH
49836: LD_INT 1
49838: PPUSH
49839: CALL_OW 453
49843: GO 49813
49845: POP
49846: POP
// end ;
49847: LD_VAR 0 2
49851: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49852: LD_INT 0
49854: PPUSH
49855: PPUSH
49856: PPUSH
49857: PPUSH
49858: PPUSH
49859: PPUSH
// if not unit or not enemy_unit then
49860: LD_VAR 0 1
49864: NOT
49865: IFTRUE 49874
49867: PUSH
49868: LD_VAR 0 2
49872: NOT
49873: OR
49874: IFFALSE 49878
// exit ;
49876: GO 50359
// if GetLives ( i ) < 250 then
49878: LD_VAR 0 4
49882: PPUSH
49883: CALL_OW 256
49887: PUSH
49888: LD_INT 250
49890: LESS
49891: IFFALSE 49904
// begin ComAutodestruct ( i ) ;
49893: LD_VAR 0 4
49897: PPUSH
49898: CALL 49748 0 1
// exit ;
49902: GO 50359
// end ; x := GetX ( enemy_unit ) ;
49904: LD_ADDR_VAR 0 7
49908: PUSH
49909: LD_VAR 0 2
49913: PPUSH
49914: CALL_OW 250
49918: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49919: LD_ADDR_VAR 0 8
49923: PUSH
49924: LD_VAR 0 2
49928: PPUSH
49929: CALL_OW 251
49933: ST_TO_ADDR
// if not x or not y then
49934: LD_VAR 0 7
49938: NOT
49939: IFTRUE 49948
49941: PUSH
49942: LD_VAR 0 8
49946: NOT
49947: OR
49948: IFFALSE 49952
// exit ;
49950: GO 50359
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49952: LD_ADDR_VAR 0 6
49956: PUSH
49957: LD_VAR 0 7
49961: PPUSH
49962: LD_INT 0
49964: PPUSH
49965: LD_INT 4
49967: PPUSH
49968: CALL_OW 272
49972: PUSH
49973: LD_VAR 0 8
49977: PPUSH
49978: LD_INT 0
49980: PPUSH
49981: LD_INT 4
49983: PPUSH
49984: CALL_OW 273
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_VAR 0 7
49997: PPUSH
49998: LD_INT 1
50000: PPUSH
50001: LD_INT 4
50003: PPUSH
50004: CALL_OW 272
50008: PUSH
50009: LD_VAR 0 8
50013: PPUSH
50014: LD_INT 1
50016: PPUSH
50017: LD_INT 4
50019: PPUSH
50020: CALL_OW 273
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_VAR 0 7
50033: PPUSH
50034: LD_INT 2
50036: PPUSH
50037: LD_INT 4
50039: PPUSH
50040: CALL_OW 272
50044: PUSH
50045: LD_VAR 0 8
50049: PPUSH
50050: LD_INT 2
50052: PPUSH
50053: LD_INT 4
50055: PPUSH
50056: CALL_OW 273
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_VAR 0 7
50069: PPUSH
50070: LD_INT 3
50072: PPUSH
50073: LD_INT 4
50075: PPUSH
50076: CALL_OW 272
50080: PUSH
50081: LD_VAR 0 8
50085: PPUSH
50086: LD_INT 3
50088: PPUSH
50089: LD_INT 4
50091: PPUSH
50092: CALL_OW 273
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_VAR 0 7
50105: PPUSH
50106: LD_INT 4
50108: PPUSH
50109: LD_INT 4
50111: PPUSH
50112: CALL_OW 272
50116: PUSH
50117: LD_VAR 0 8
50121: PPUSH
50122: LD_INT 4
50124: PPUSH
50125: LD_INT 4
50127: PPUSH
50128: CALL_OW 273
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_VAR 0 7
50141: PPUSH
50142: LD_INT 5
50144: PPUSH
50145: LD_INT 4
50147: PPUSH
50148: CALL_OW 272
50152: PUSH
50153: LD_VAR 0 8
50157: PPUSH
50158: LD_INT 5
50160: PPUSH
50161: LD_INT 4
50163: PPUSH
50164: CALL_OW 273
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: ST_TO_ADDR
// for i = tmp downto 1 do
50181: LD_ADDR_VAR 0 4
50185: PUSH
50186: DOUBLE
50187: LD_VAR 0 6
50191: INC
50192: ST_TO_ADDR
50193: LD_INT 1
50195: PUSH
50196: FOR_DOWNTO
50197: IFFALSE 50300
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50199: LD_VAR 0 6
50203: PUSH
50204: LD_VAR 0 4
50208: ARRAY
50209: PUSH
50210: LD_INT 1
50212: ARRAY
50213: PPUSH
50214: LD_VAR 0 6
50218: PUSH
50219: LD_VAR 0 4
50223: ARRAY
50224: PUSH
50225: LD_INT 2
50227: ARRAY
50228: PPUSH
50229: CALL_OW 488
50233: NOT
50234: IFTRUE 50276
50236: PUSH
50237: LD_VAR 0 6
50241: PUSH
50242: LD_VAR 0 4
50246: ARRAY
50247: PUSH
50248: LD_INT 1
50250: ARRAY
50251: PPUSH
50252: LD_VAR 0 6
50256: PUSH
50257: LD_VAR 0 4
50261: ARRAY
50262: PUSH
50263: LD_INT 2
50265: ARRAY
50266: PPUSH
50267: CALL_OW 428
50271: PUSH
50272: LD_INT 0
50274: NONEQUAL
50275: OR
50276: IFFALSE 50298
// tmp := Delete ( tmp , i ) ;
50278: LD_ADDR_VAR 0 6
50282: PUSH
50283: LD_VAR 0 6
50287: PPUSH
50288: LD_VAR 0 4
50292: PPUSH
50293: CALL_OW 3
50297: ST_TO_ADDR
50298: GO 50196
50300: POP
50301: POP
// j := GetClosestHex ( unit , tmp ) ;
50302: LD_ADDR_VAR 0 5
50306: PUSH
50307: LD_VAR 0 1
50311: PPUSH
50312: LD_VAR 0 6
50316: PPUSH
50317: CALL 49594 0 2
50321: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50322: LD_VAR 0 1
50326: PPUSH
50327: LD_VAR 0 5
50331: PUSH
50332: LD_INT 1
50334: ARRAY
50335: PPUSH
50336: LD_VAR 0 5
50340: PUSH
50341: LD_INT 2
50343: ARRAY
50344: PPUSH
50345: CALL_OW 111
// result := j ;
50349: LD_ADDR_VAR 0 3
50353: PUSH
50354: LD_VAR 0 5
50358: ST_TO_ADDR
// end ;
50359: LD_VAR 0 3
50363: RET
// export function PrepareApemanSoldier ( ) ; begin
50364: LD_INT 0
50366: PPUSH
// uc_nation := 0 ;
50367: LD_ADDR_OWVAR 21
50371: PUSH
50372: LD_INT 0
50374: ST_TO_ADDR
// hc_sex := sex_male ;
50375: LD_ADDR_OWVAR 27
50379: PUSH
50380: LD_INT 1
50382: ST_TO_ADDR
// hc_name :=  ;
50383: LD_ADDR_OWVAR 26
50387: PUSH
50388: LD_STRING 
50390: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50391: LD_ADDR_OWVAR 28
50395: PUSH
50396: LD_INT 15
50398: ST_TO_ADDR
// hc_gallery :=  ;
50399: LD_ADDR_OWVAR 33
50403: PUSH
50404: LD_STRING 
50406: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50407: LD_ADDR_OWVAR 31
50411: PUSH
50412: LD_INT 0
50414: PPUSH
50415: LD_INT 3
50417: PPUSH
50418: CALL_OW 12
50422: PUSH
50423: LD_INT 0
50425: PPUSH
50426: LD_INT 3
50428: PPUSH
50429: CALL_OW 12
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50446: LD_ADDR_OWVAR 29
50450: PUSH
50451: LD_INT 10
50453: PUSH
50454: LD_INT 12
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: ST_TO_ADDR
// end ;
50461: LD_VAR 0 1
50465: RET
// export function PrepareApemanEngineer ( ) ; begin
50466: LD_INT 0
50468: PPUSH
// uc_nation := 0 ;
50469: LD_ADDR_OWVAR 21
50473: PUSH
50474: LD_INT 0
50476: ST_TO_ADDR
// hc_sex := sex_male ;
50477: LD_ADDR_OWVAR 27
50481: PUSH
50482: LD_INT 1
50484: ST_TO_ADDR
// hc_name :=  ;
50485: LD_ADDR_OWVAR 26
50489: PUSH
50490: LD_STRING 
50492: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50493: LD_ADDR_OWVAR 28
50497: PUSH
50498: LD_INT 16
50500: ST_TO_ADDR
// hc_gallery :=  ;
50501: LD_ADDR_OWVAR 33
50505: PUSH
50506: LD_STRING 
50508: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50509: LD_ADDR_OWVAR 31
50513: PUSH
50514: LD_INT 0
50516: PPUSH
50517: LD_INT 3
50519: PPUSH
50520: CALL_OW 12
50524: PUSH
50525: LD_INT 0
50527: PPUSH
50528: LD_INT 3
50530: PPUSH
50531: CALL_OW 12
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50548: LD_ADDR_OWVAR 29
50552: PUSH
50553: LD_INT 10
50555: PUSH
50556: LD_INT 12
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: ST_TO_ADDR
// end ;
50563: LD_VAR 0 1
50567: RET
// export function PrepareApeman ( agressivity ) ; begin
50568: LD_INT 0
50570: PPUSH
// uc_side := 0 ;
50571: LD_ADDR_OWVAR 20
50575: PUSH
50576: LD_INT 0
50578: ST_TO_ADDR
// uc_nation := 0 ;
50579: LD_ADDR_OWVAR 21
50583: PUSH
50584: LD_INT 0
50586: ST_TO_ADDR
// hc_sex := sex_male ;
50587: LD_ADDR_OWVAR 27
50591: PUSH
50592: LD_INT 1
50594: ST_TO_ADDR
// hc_class := class_apeman ;
50595: LD_ADDR_OWVAR 28
50599: PUSH
50600: LD_INT 12
50602: ST_TO_ADDR
// hc_gallery :=  ;
50603: LD_ADDR_OWVAR 33
50607: PUSH
50608: LD_STRING 
50610: ST_TO_ADDR
// hc_name :=  ;
50611: LD_ADDR_OWVAR 26
50615: PUSH
50616: LD_STRING 
50618: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50619: LD_ADDR_OWVAR 29
50623: PUSH
50624: LD_INT 10
50626: PUSH
50627: LD_INT 12
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: ST_TO_ADDR
// if agressivity = 0 then
50634: LD_VAR 0 1
50638: PUSH
50639: LD_INT 0
50641: EQUAL
50642: IFFALSE 50654
// hc_agressivity := 0 else
50644: LD_ADDR_OWVAR 35
50648: PUSH
50649: LD_INT 0
50651: ST_TO_ADDR
50652: GO 50675
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50654: LD_ADDR_OWVAR 35
50658: PUSH
50659: LD_VAR 0 1
50663: NEG
50664: PPUSH
50665: LD_VAR 0 1
50669: PPUSH
50670: CALL_OW 12
50674: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50675: LD_ADDR_OWVAR 31
50679: PUSH
50680: LD_INT 0
50682: PPUSH
50683: LD_INT 3
50685: PPUSH
50686: CALL_OW 12
50690: PUSH
50691: LD_INT 0
50693: PPUSH
50694: LD_INT 3
50696: PPUSH
50697: CALL_OW 12
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: ST_TO_ADDR
// end ;
50714: LD_VAR 0 2
50718: RET
// export function PrepareTiger ( agressivity ) ; begin
50719: LD_INT 0
50721: PPUSH
// uc_side := 0 ;
50722: LD_ADDR_OWVAR 20
50726: PUSH
50727: LD_INT 0
50729: ST_TO_ADDR
// uc_nation := 0 ;
50730: LD_ADDR_OWVAR 21
50734: PUSH
50735: LD_INT 0
50737: ST_TO_ADDR
// InitHc ;
50738: CALL_OW 19
// hc_class := class_tiger ;
50742: LD_ADDR_OWVAR 28
50746: PUSH
50747: LD_INT 14
50749: ST_TO_ADDR
// hc_gallery :=  ;
50750: LD_ADDR_OWVAR 33
50754: PUSH
50755: LD_STRING 
50757: ST_TO_ADDR
// hc_name :=  ;
50758: LD_ADDR_OWVAR 26
50762: PUSH
50763: LD_STRING 
50765: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50766: LD_ADDR_OWVAR 35
50770: PUSH
50771: LD_VAR 0 1
50775: NEG
50776: PPUSH
50777: LD_VAR 0 1
50781: PPUSH
50782: CALL_OW 12
50786: ST_TO_ADDR
// end ;
50787: LD_VAR 0 2
50791: RET
// export function PrepareEnchidna ( ) ; begin
50792: LD_INT 0
50794: PPUSH
// uc_side := 0 ;
50795: LD_ADDR_OWVAR 20
50799: PUSH
50800: LD_INT 0
50802: ST_TO_ADDR
// uc_nation := 0 ;
50803: LD_ADDR_OWVAR 21
50807: PUSH
50808: LD_INT 0
50810: ST_TO_ADDR
// InitHc ;
50811: CALL_OW 19
// hc_class := class_baggie ;
50815: LD_ADDR_OWVAR 28
50819: PUSH
50820: LD_INT 13
50822: ST_TO_ADDR
// hc_gallery :=  ;
50823: LD_ADDR_OWVAR 33
50827: PUSH
50828: LD_STRING 
50830: ST_TO_ADDR
// hc_name :=  ;
50831: LD_ADDR_OWVAR 26
50835: PUSH
50836: LD_STRING 
50838: ST_TO_ADDR
// end ;
50839: LD_VAR 0 1
50843: RET
// export function PrepareFrog ( ) ; begin
50844: LD_INT 0
50846: PPUSH
// uc_side := 0 ;
50847: LD_ADDR_OWVAR 20
50851: PUSH
50852: LD_INT 0
50854: ST_TO_ADDR
// uc_nation := 0 ;
50855: LD_ADDR_OWVAR 21
50859: PUSH
50860: LD_INT 0
50862: ST_TO_ADDR
// InitHc ;
50863: CALL_OW 19
// hc_class := class_frog ;
50867: LD_ADDR_OWVAR 28
50871: PUSH
50872: LD_INT 19
50874: ST_TO_ADDR
// hc_gallery :=  ;
50875: LD_ADDR_OWVAR 33
50879: PUSH
50880: LD_STRING 
50882: ST_TO_ADDR
// hc_name :=  ;
50883: LD_ADDR_OWVAR 26
50887: PUSH
50888: LD_STRING 
50890: ST_TO_ADDR
// end ;
50891: LD_VAR 0 1
50895: RET
// export function PrepareFish ( ) ; begin
50896: LD_INT 0
50898: PPUSH
// uc_side := 0 ;
50899: LD_ADDR_OWVAR 20
50903: PUSH
50904: LD_INT 0
50906: ST_TO_ADDR
// uc_nation := 0 ;
50907: LD_ADDR_OWVAR 21
50911: PUSH
50912: LD_INT 0
50914: ST_TO_ADDR
// InitHc ;
50915: CALL_OW 19
// hc_class := class_fish ;
50919: LD_ADDR_OWVAR 28
50923: PUSH
50924: LD_INT 20
50926: ST_TO_ADDR
// hc_gallery :=  ;
50927: LD_ADDR_OWVAR 33
50931: PUSH
50932: LD_STRING 
50934: ST_TO_ADDR
// hc_name :=  ;
50935: LD_ADDR_OWVAR 26
50939: PUSH
50940: LD_STRING 
50942: ST_TO_ADDR
// end ;
50943: LD_VAR 0 1
50947: RET
// export function PrepareBird ( ) ; begin
50948: LD_INT 0
50950: PPUSH
// uc_side := 0 ;
50951: LD_ADDR_OWVAR 20
50955: PUSH
50956: LD_INT 0
50958: ST_TO_ADDR
// uc_nation := 0 ;
50959: LD_ADDR_OWVAR 21
50963: PUSH
50964: LD_INT 0
50966: ST_TO_ADDR
// InitHc ;
50967: CALL_OW 19
// hc_class := class_phororhacos ;
50971: LD_ADDR_OWVAR 28
50975: PUSH
50976: LD_INT 18
50978: ST_TO_ADDR
// hc_gallery :=  ;
50979: LD_ADDR_OWVAR 33
50983: PUSH
50984: LD_STRING 
50986: ST_TO_ADDR
// hc_name :=  ;
50987: LD_ADDR_OWVAR 26
50991: PUSH
50992: LD_STRING 
50994: ST_TO_ADDR
// end ;
50995: LD_VAR 0 1
50999: RET
// export function PrepareHorse ( ) ; begin
51000: LD_INT 0
51002: PPUSH
// uc_side := 0 ;
51003: LD_ADDR_OWVAR 20
51007: PUSH
51008: LD_INT 0
51010: ST_TO_ADDR
// uc_nation := 0 ;
51011: LD_ADDR_OWVAR 21
51015: PUSH
51016: LD_INT 0
51018: ST_TO_ADDR
// InitHc ;
51019: CALL_OW 19
// hc_class := class_horse ;
51023: LD_ADDR_OWVAR 28
51027: PUSH
51028: LD_INT 21
51030: ST_TO_ADDR
// hc_gallery :=  ;
51031: LD_ADDR_OWVAR 33
51035: PUSH
51036: LD_STRING 
51038: ST_TO_ADDR
// hc_name :=  ;
51039: LD_ADDR_OWVAR 26
51043: PUSH
51044: LD_STRING 
51046: ST_TO_ADDR
// end ;
51047: LD_VAR 0 1
51051: RET
// export function PrepareMastodont ( ) ; begin
51052: LD_INT 0
51054: PPUSH
// uc_side := 0 ;
51055: LD_ADDR_OWVAR 20
51059: PUSH
51060: LD_INT 0
51062: ST_TO_ADDR
// uc_nation := 0 ;
51063: LD_ADDR_OWVAR 21
51067: PUSH
51068: LD_INT 0
51070: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51071: LD_ADDR_OWVAR 37
51075: PUSH
51076: LD_INT 31
51078: ST_TO_ADDR
// vc_control := control_rider ;
51079: LD_ADDR_OWVAR 38
51083: PUSH
51084: LD_INT 4
51086: ST_TO_ADDR
// end ;
51087: LD_VAR 0 1
51091: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51092: LD_INT 0
51094: PPUSH
51095: PPUSH
51096: PPUSH
// uc_side = 0 ;
51097: LD_ADDR_OWVAR 20
51101: PUSH
51102: LD_INT 0
51104: ST_TO_ADDR
// uc_nation = 0 ;
51105: LD_ADDR_OWVAR 21
51109: PUSH
51110: LD_INT 0
51112: ST_TO_ADDR
// InitHc_All ( ) ;
51113: CALL_OW 584
// InitVc ;
51117: CALL_OW 20
// if mastodonts then
51121: LD_VAR 0 6
51125: IFFALSE 51192
// for i = 1 to mastodonts do
51127: LD_ADDR_VAR 0 11
51131: PUSH
51132: DOUBLE
51133: LD_INT 1
51135: DEC
51136: ST_TO_ADDR
51137: LD_VAR 0 6
51141: PUSH
51142: FOR_TO
51143: IFFALSE 51190
// begin vc_chassis := 31 ;
51145: LD_ADDR_OWVAR 37
51149: PUSH
51150: LD_INT 31
51152: ST_TO_ADDR
// vc_control := control_rider ;
51153: LD_ADDR_OWVAR 38
51157: PUSH
51158: LD_INT 4
51160: ST_TO_ADDR
// animal := CreateVehicle ;
51161: LD_ADDR_VAR 0 12
51165: PUSH
51166: CALL_OW 45
51170: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51171: LD_VAR 0 12
51175: PPUSH
51176: LD_VAR 0 8
51180: PPUSH
51181: LD_INT 0
51183: PPUSH
51184: CALL 53334 0 3
// end ;
51188: GO 51142
51190: POP
51191: POP
// if horses then
51192: LD_VAR 0 5
51196: IFFALSE 51263
// for i = 1 to horses do
51198: LD_ADDR_VAR 0 11
51202: PUSH
51203: DOUBLE
51204: LD_INT 1
51206: DEC
51207: ST_TO_ADDR
51208: LD_VAR 0 5
51212: PUSH
51213: FOR_TO
51214: IFFALSE 51261
// begin hc_class := 21 ;
51216: LD_ADDR_OWVAR 28
51220: PUSH
51221: LD_INT 21
51223: ST_TO_ADDR
// hc_gallery :=  ;
51224: LD_ADDR_OWVAR 33
51228: PUSH
51229: LD_STRING 
51231: ST_TO_ADDR
// animal := CreateHuman ;
51232: LD_ADDR_VAR 0 12
51236: PUSH
51237: CALL_OW 44
51241: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51242: LD_VAR 0 12
51246: PPUSH
51247: LD_VAR 0 8
51251: PPUSH
51252: LD_INT 0
51254: PPUSH
51255: CALL 53334 0 3
// end ;
51259: GO 51213
51261: POP
51262: POP
// if birds then
51263: LD_VAR 0 1
51267: IFFALSE 51334
// for i = 1 to birds do
51269: LD_ADDR_VAR 0 11
51273: PUSH
51274: DOUBLE
51275: LD_INT 1
51277: DEC
51278: ST_TO_ADDR
51279: LD_VAR 0 1
51283: PUSH
51284: FOR_TO
51285: IFFALSE 51332
// begin hc_class := 18 ;
51287: LD_ADDR_OWVAR 28
51291: PUSH
51292: LD_INT 18
51294: ST_TO_ADDR
// hc_gallery =  ;
51295: LD_ADDR_OWVAR 33
51299: PUSH
51300: LD_STRING 
51302: ST_TO_ADDR
// animal := CreateHuman ;
51303: LD_ADDR_VAR 0 12
51307: PUSH
51308: CALL_OW 44
51312: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51313: LD_VAR 0 12
51317: PPUSH
51318: LD_VAR 0 8
51322: PPUSH
51323: LD_INT 0
51325: PPUSH
51326: CALL 53334 0 3
// end ;
51330: GO 51284
51332: POP
51333: POP
// if tigers then
51334: LD_VAR 0 2
51338: IFFALSE 51422
// for i = 1 to tigers do
51340: LD_ADDR_VAR 0 11
51344: PUSH
51345: DOUBLE
51346: LD_INT 1
51348: DEC
51349: ST_TO_ADDR
51350: LD_VAR 0 2
51354: PUSH
51355: FOR_TO
51356: IFFALSE 51420
// begin hc_class = class_tiger ;
51358: LD_ADDR_OWVAR 28
51362: PUSH
51363: LD_INT 14
51365: ST_TO_ADDR
// hc_gallery =  ;
51366: LD_ADDR_OWVAR 33
51370: PUSH
51371: LD_STRING 
51373: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51374: LD_ADDR_OWVAR 35
51378: PUSH
51379: LD_INT 7
51381: NEG
51382: PPUSH
51383: LD_INT 7
51385: PPUSH
51386: CALL_OW 12
51390: ST_TO_ADDR
// animal := CreateHuman ;
51391: LD_ADDR_VAR 0 12
51395: PUSH
51396: CALL_OW 44
51400: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51401: LD_VAR 0 12
51405: PPUSH
51406: LD_VAR 0 8
51410: PPUSH
51411: LD_INT 0
51413: PPUSH
51414: CALL 53334 0 3
// end ;
51418: GO 51355
51420: POP
51421: POP
// if apemans then
51422: LD_VAR 0 3
51426: IFFALSE 51549
// for i = 1 to apemans do
51428: LD_ADDR_VAR 0 11
51432: PUSH
51433: DOUBLE
51434: LD_INT 1
51436: DEC
51437: ST_TO_ADDR
51438: LD_VAR 0 3
51442: PUSH
51443: FOR_TO
51444: IFFALSE 51547
// begin hc_class = class_apeman ;
51446: LD_ADDR_OWVAR 28
51450: PUSH
51451: LD_INT 12
51453: ST_TO_ADDR
// hc_gallery =  ;
51454: LD_ADDR_OWVAR 33
51458: PUSH
51459: LD_STRING 
51461: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51462: LD_ADDR_OWVAR 35
51466: PUSH
51467: LD_INT 2
51469: NEG
51470: PPUSH
51471: LD_INT 2
51473: PPUSH
51474: CALL_OW 12
51478: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51479: LD_ADDR_OWVAR 31
51483: PUSH
51484: LD_INT 1
51486: PPUSH
51487: LD_INT 3
51489: PPUSH
51490: CALL_OW 12
51494: PUSH
51495: LD_INT 1
51497: PPUSH
51498: LD_INT 3
51500: PPUSH
51501: CALL_OW 12
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: ST_TO_ADDR
// animal := CreateHuman ;
51518: LD_ADDR_VAR 0 12
51522: PUSH
51523: CALL_OW 44
51527: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51528: LD_VAR 0 12
51532: PPUSH
51533: LD_VAR 0 8
51537: PPUSH
51538: LD_INT 0
51540: PPUSH
51541: CALL 53334 0 3
// end ;
51545: GO 51443
51547: POP
51548: POP
// if enchidnas then
51549: LD_VAR 0 4
51553: IFFALSE 51620
// for i = 1 to enchidnas do
51555: LD_ADDR_VAR 0 11
51559: PUSH
51560: DOUBLE
51561: LD_INT 1
51563: DEC
51564: ST_TO_ADDR
51565: LD_VAR 0 4
51569: PUSH
51570: FOR_TO
51571: IFFALSE 51618
// begin hc_class = 13 ;
51573: LD_ADDR_OWVAR 28
51577: PUSH
51578: LD_INT 13
51580: ST_TO_ADDR
// hc_gallery =  ;
51581: LD_ADDR_OWVAR 33
51585: PUSH
51586: LD_STRING 
51588: ST_TO_ADDR
// animal := CreateHuman ;
51589: LD_ADDR_VAR 0 12
51593: PUSH
51594: CALL_OW 44
51598: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51599: LD_VAR 0 12
51603: PPUSH
51604: LD_VAR 0 8
51608: PPUSH
51609: LD_INT 0
51611: PPUSH
51612: CALL 53334 0 3
// end ;
51616: GO 51570
51618: POP
51619: POP
// if fishes then
51620: LD_VAR 0 7
51624: IFFALSE 51691
// for i = 1 to fishes do
51626: LD_ADDR_VAR 0 11
51630: PUSH
51631: DOUBLE
51632: LD_INT 1
51634: DEC
51635: ST_TO_ADDR
51636: LD_VAR 0 7
51640: PUSH
51641: FOR_TO
51642: IFFALSE 51689
// begin hc_class = 20 ;
51644: LD_ADDR_OWVAR 28
51648: PUSH
51649: LD_INT 20
51651: ST_TO_ADDR
// hc_gallery =  ;
51652: LD_ADDR_OWVAR 33
51656: PUSH
51657: LD_STRING 
51659: ST_TO_ADDR
// animal := CreateHuman ;
51660: LD_ADDR_VAR 0 12
51664: PUSH
51665: CALL_OW 44
51669: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51670: LD_VAR 0 12
51674: PPUSH
51675: LD_VAR 0 9
51679: PPUSH
51680: LD_INT 0
51682: PPUSH
51683: CALL 53334 0 3
// end ;
51687: GO 51641
51689: POP
51690: POP
// end ;
51691: LD_VAR 0 10
51695: RET
// export function WantHeal ( sci , unit ) ; begin
51696: LD_INT 0
51698: PPUSH
// if GetTaskList ( sci ) > 0 then
51699: LD_VAR 0 1
51703: PPUSH
51704: CALL_OW 437
51708: PUSH
51709: LD_INT 0
51711: GREATER
51712: IFFALSE 51784
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51714: LD_VAR 0 1
51718: PPUSH
51719: CALL_OW 437
51723: PUSH
51724: LD_INT 1
51726: ARRAY
51727: PUSH
51728: LD_INT 1
51730: ARRAY
51731: PUSH
51732: LD_STRING l
51734: EQUAL
51735: IFFALSE 51762
51737: PUSH
51738: LD_VAR 0 1
51742: PPUSH
51743: CALL_OW 437
51747: PUSH
51748: LD_INT 1
51750: ARRAY
51751: PUSH
51752: LD_INT 4
51754: ARRAY
51755: PUSH
51756: LD_VAR 0 2
51760: EQUAL
51761: AND
51762: IFFALSE 51774
// result := true else
51764: LD_ADDR_VAR 0 3
51768: PUSH
51769: LD_INT 1
51771: ST_TO_ADDR
51772: GO 51782
// result := false ;
51774: LD_ADDR_VAR 0 3
51778: PUSH
51779: LD_INT 0
51781: ST_TO_ADDR
// end else
51782: GO 51792
// result := false ;
51784: LD_ADDR_VAR 0 3
51788: PUSH
51789: LD_INT 0
51791: ST_TO_ADDR
// end ;
51792: LD_VAR 0 3
51796: RET
// export function HealTarget ( sci ) ; begin
51797: LD_INT 0
51799: PPUSH
// if not sci then
51800: LD_VAR 0 1
51804: NOT
51805: IFFALSE 51809
// exit ;
51807: GO 51874
// result := 0 ;
51809: LD_ADDR_VAR 0 2
51813: PUSH
51814: LD_INT 0
51816: ST_TO_ADDR
// if GetTaskList ( sci ) then
51817: LD_VAR 0 1
51821: PPUSH
51822: CALL_OW 437
51826: IFFALSE 51874
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51828: LD_VAR 0 1
51832: PPUSH
51833: CALL_OW 437
51837: PUSH
51838: LD_INT 1
51840: ARRAY
51841: PUSH
51842: LD_INT 1
51844: ARRAY
51845: PUSH
51846: LD_STRING l
51848: EQUAL
51849: IFFALSE 51874
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51851: LD_ADDR_VAR 0 2
51855: PUSH
51856: LD_VAR 0 1
51860: PPUSH
51861: CALL_OW 437
51865: PUSH
51866: LD_INT 1
51868: ARRAY
51869: PUSH
51870: LD_INT 4
51872: ARRAY
51873: ST_TO_ADDR
// end ;
51874: LD_VAR 0 2
51878: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51879: LD_INT 0
51881: PPUSH
51882: PPUSH
51883: PPUSH
51884: PPUSH
// if not base_units then
51885: LD_VAR 0 1
51889: NOT
51890: IFFALSE 51894
// exit ;
51892: GO 51981
// result := false ;
51894: LD_ADDR_VAR 0 2
51898: PUSH
51899: LD_INT 0
51901: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51902: LD_ADDR_VAR 0 5
51906: PUSH
51907: LD_VAR 0 1
51911: PPUSH
51912: LD_INT 21
51914: PUSH
51915: LD_INT 3
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PPUSH
51922: CALL_OW 72
51926: ST_TO_ADDR
// if not tmp then
51927: LD_VAR 0 5
51931: NOT
51932: IFFALSE 51936
// exit ;
51934: GO 51981
// for i in tmp do
51936: LD_ADDR_VAR 0 3
51940: PUSH
51941: LD_VAR 0 5
51945: PUSH
51946: FOR_IN
51947: IFFALSE 51979
// begin result := EnemyInRange ( i , 22 ) ;
51949: LD_ADDR_VAR 0 2
51953: PUSH
51954: LD_VAR 0 3
51958: PPUSH
51959: LD_INT 22
51961: PPUSH
51962: CALL 49396 0 2
51966: ST_TO_ADDR
// if result then
51967: LD_VAR 0 2
51971: IFFALSE 51977
// exit ;
51973: POP
51974: POP
51975: GO 51981
// end ;
51977: GO 51946
51979: POP
51980: POP
// end ;
51981: LD_VAR 0 2
51985: RET
// export function FilterByTag ( units , tag ) ; begin
51986: LD_INT 0
51988: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51989: LD_ADDR_VAR 0 3
51993: PUSH
51994: LD_VAR 0 1
51998: PPUSH
51999: LD_INT 120
52001: PUSH
52002: LD_VAR 0 2
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PPUSH
52011: CALL_OW 72
52015: ST_TO_ADDR
// end ;
52016: LD_VAR 0 3
52020: RET
// export function IsDriver ( un ) ; begin
52021: LD_INT 0
52023: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52024: LD_ADDR_VAR 0 2
52028: PUSH
52029: LD_VAR 0 1
52033: PUSH
52034: LD_INT 55
52036: PUSH
52037: EMPTY
52038: LIST
52039: PPUSH
52040: CALL_OW 69
52044: IN
52045: ST_TO_ADDR
// end ;
52046: LD_VAR 0 2
52050: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52051: LD_INT 0
52053: PPUSH
52054: PPUSH
// list := [ ] ;
52055: LD_ADDR_VAR 0 5
52059: PUSH
52060: EMPTY
52061: ST_TO_ADDR
// case d of 0 :
52062: LD_VAR 0 3
52066: PUSH
52067: LD_INT 0
52069: DOUBLE
52070: EQUAL
52071: IFTRUE 52075
52073: GO 52208
52075: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52076: LD_ADDR_VAR 0 5
52080: PUSH
52081: LD_VAR 0 1
52085: PUSH
52086: LD_INT 4
52088: MINUS
52089: PUSH
52090: LD_VAR 0 2
52094: PUSH
52095: LD_INT 4
52097: MINUS
52098: PUSH
52099: LD_INT 2
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: LIST
52106: PUSH
52107: LD_VAR 0 1
52111: PUSH
52112: LD_INT 3
52114: MINUS
52115: PUSH
52116: LD_VAR 0 2
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: LIST
52128: PUSH
52129: LD_VAR 0 1
52133: PUSH
52134: LD_INT 4
52136: PLUS
52137: PUSH
52138: LD_VAR 0 2
52142: PUSH
52143: LD_INT 4
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: LIST
52150: PUSH
52151: LD_VAR 0 1
52155: PUSH
52156: LD_INT 3
52158: PLUS
52159: PUSH
52160: LD_VAR 0 2
52164: PUSH
52165: LD_INT 3
52167: PLUS
52168: PUSH
52169: LD_INT 5
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: LIST
52176: PUSH
52177: LD_VAR 0 1
52181: PUSH
52182: LD_VAR 0 2
52186: PUSH
52187: LD_INT 4
52189: PLUS
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: LIST
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: ST_TO_ADDR
// end ; 1 :
52206: GO 52906
52208: LD_INT 1
52210: DOUBLE
52211: EQUAL
52212: IFTRUE 52216
52214: GO 52349
52216: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52217: LD_ADDR_VAR 0 5
52221: PUSH
52222: LD_VAR 0 1
52226: PUSH
52227: LD_VAR 0 2
52231: PUSH
52232: LD_INT 4
52234: MINUS
52235: PUSH
52236: LD_INT 3
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: LIST
52243: PUSH
52244: LD_VAR 0 1
52248: PUSH
52249: LD_INT 3
52251: MINUS
52252: PUSH
52253: LD_VAR 0 2
52257: PUSH
52258: LD_INT 3
52260: MINUS
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: LIST
52269: PUSH
52270: LD_VAR 0 1
52274: PUSH
52275: LD_INT 4
52277: MINUS
52278: PUSH
52279: LD_VAR 0 2
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: LIST
52291: PUSH
52292: LD_VAR 0 1
52296: PUSH
52297: LD_VAR 0 2
52301: PUSH
52302: LD_INT 3
52304: PLUS
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: LIST
52313: PUSH
52314: LD_VAR 0 1
52318: PUSH
52319: LD_INT 4
52321: PLUS
52322: PUSH
52323: LD_VAR 0 2
52327: PUSH
52328: LD_INT 4
52330: PLUS
52331: PUSH
52332: LD_INT 5
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: ST_TO_ADDR
// end ; 2 :
52347: GO 52906
52349: LD_INT 2
52351: DOUBLE
52352: EQUAL
52353: IFTRUE 52357
52355: GO 52486
52357: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52358: LD_ADDR_VAR 0 5
52362: PUSH
52363: LD_VAR 0 1
52367: PUSH
52368: LD_VAR 0 2
52372: PUSH
52373: LD_INT 3
52375: MINUS
52376: PUSH
52377: LD_INT 3
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: LIST
52384: PUSH
52385: LD_VAR 0 1
52389: PUSH
52390: LD_INT 4
52392: PLUS
52393: PUSH
52394: LD_VAR 0 2
52398: PUSH
52399: LD_INT 4
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: LIST
52406: PUSH
52407: LD_VAR 0 1
52411: PUSH
52412: LD_VAR 0 2
52416: PUSH
52417: LD_INT 4
52419: PLUS
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: LIST
52428: PUSH
52429: LD_VAR 0 1
52433: PUSH
52434: LD_INT 3
52436: MINUS
52437: PUSH
52438: LD_VAR 0 2
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: LIST
52450: PUSH
52451: LD_VAR 0 1
52455: PUSH
52456: LD_INT 4
52458: MINUS
52459: PUSH
52460: LD_VAR 0 2
52464: PUSH
52465: LD_INT 4
52467: MINUS
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: LIST
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: ST_TO_ADDR
// end ; 3 :
52484: GO 52906
52486: LD_INT 3
52488: DOUBLE
52489: EQUAL
52490: IFTRUE 52494
52492: GO 52627
52494: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52495: LD_ADDR_VAR 0 5
52499: PUSH
52500: LD_VAR 0 1
52504: PUSH
52505: LD_INT 3
52507: PLUS
52508: PUSH
52509: LD_VAR 0 2
52513: PUSH
52514: LD_INT 4
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: LIST
52521: PUSH
52522: LD_VAR 0 1
52526: PUSH
52527: LD_INT 4
52529: PLUS
52530: PUSH
52531: LD_VAR 0 2
52535: PUSH
52536: LD_INT 4
52538: PLUS
52539: PUSH
52540: LD_INT 5
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: LIST
52547: PUSH
52548: LD_VAR 0 1
52552: PUSH
52553: LD_INT 4
52555: MINUS
52556: PUSH
52557: LD_VAR 0 2
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: LIST
52569: PUSH
52570: LD_VAR 0 1
52574: PUSH
52575: LD_VAR 0 2
52579: PUSH
52580: LD_INT 4
52582: MINUS
52583: PUSH
52584: LD_INT 3
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: LIST
52591: PUSH
52592: LD_VAR 0 1
52596: PUSH
52597: LD_INT 3
52599: MINUS
52600: PUSH
52601: LD_VAR 0 2
52605: PUSH
52606: LD_INT 3
52608: MINUS
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: LIST
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: ST_TO_ADDR
// end ; 4 :
52625: GO 52906
52627: LD_INT 4
52629: DOUBLE
52630: EQUAL
52631: IFTRUE 52635
52633: GO 52768
52635: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52636: LD_ADDR_VAR 0 5
52640: PUSH
52641: LD_VAR 0 1
52645: PUSH
52646: LD_VAR 0 2
52650: PUSH
52651: LD_INT 4
52653: PLUS
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: LIST
52662: PUSH
52663: LD_VAR 0 1
52667: PUSH
52668: LD_INT 3
52670: PLUS
52671: PUSH
52672: LD_VAR 0 2
52676: PUSH
52677: LD_INT 3
52679: PLUS
52680: PUSH
52681: LD_INT 5
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: LIST
52688: PUSH
52689: LD_VAR 0 1
52693: PUSH
52694: LD_INT 4
52696: PLUS
52697: PUSH
52698: LD_VAR 0 2
52702: PUSH
52703: LD_INT 4
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: LIST
52710: PUSH
52711: LD_VAR 0 1
52715: PUSH
52716: LD_VAR 0 2
52720: PUSH
52721: LD_INT 3
52723: MINUS
52724: PUSH
52725: LD_INT 3
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: LIST
52732: PUSH
52733: LD_VAR 0 1
52737: PUSH
52738: LD_INT 4
52740: MINUS
52741: PUSH
52742: LD_VAR 0 2
52746: PUSH
52747: LD_INT 4
52749: MINUS
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: LIST
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: ST_TO_ADDR
// end ; 5 :
52766: GO 52906
52768: LD_INT 5
52770: DOUBLE
52771: EQUAL
52772: IFTRUE 52776
52774: GO 52905
52776: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52777: LD_ADDR_VAR 0 5
52781: PUSH
52782: LD_VAR 0 1
52786: PUSH
52787: LD_INT 4
52789: MINUS
52790: PUSH
52791: LD_VAR 0 2
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: LIST
52803: PUSH
52804: LD_VAR 0 1
52808: PUSH
52809: LD_VAR 0 2
52813: PUSH
52814: LD_INT 4
52816: MINUS
52817: PUSH
52818: LD_INT 3
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: PUSH
52826: LD_VAR 0 1
52830: PUSH
52831: LD_INT 4
52833: PLUS
52834: PUSH
52835: LD_VAR 0 2
52839: PUSH
52840: LD_INT 4
52842: PLUS
52843: PUSH
52844: LD_INT 5
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: LIST
52851: PUSH
52852: LD_VAR 0 1
52856: PUSH
52857: LD_INT 3
52859: PLUS
52860: PUSH
52861: LD_VAR 0 2
52865: PUSH
52866: LD_INT 4
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: LIST
52873: PUSH
52874: LD_VAR 0 1
52878: PUSH
52879: LD_VAR 0 2
52883: PUSH
52884: LD_INT 3
52886: PLUS
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: LIST
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: ST_TO_ADDR
// end ; end ;
52903: GO 52906
52905: POP
// result := list ;
52906: LD_ADDR_VAR 0 4
52910: PUSH
52911: LD_VAR 0 5
52915: ST_TO_ADDR
// end ;
52916: LD_VAR 0 4
52920: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52921: LD_INT 0
52923: PPUSH
52924: PPUSH
52925: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52926: LD_VAR 0 1
52930: NOT
52931: IFTRUE 52959
52933: PUSH
52934: LD_VAR 0 2
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: LD_INT 3
52947: PUSH
52948: LD_INT 4
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: IN
52957: NOT
52958: OR
52959: IFFALSE 52963
// exit ;
52961: GO 53046
// tmp := [ ] ;
52963: LD_ADDR_VAR 0 5
52967: PUSH
52968: EMPTY
52969: ST_TO_ADDR
// for i in units do
52970: LD_ADDR_VAR 0 4
52974: PUSH
52975: LD_VAR 0 1
52979: PUSH
52980: FOR_IN
52981: IFFALSE 53015
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52983: LD_ADDR_VAR 0 5
52987: PUSH
52988: LD_VAR 0 5
52992: PPUSH
52993: LD_VAR 0 4
52997: PPUSH
52998: LD_VAR 0 2
53002: PPUSH
53003: CALL_OW 259
53007: PPUSH
53008: CALL 54441 0 2
53012: ST_TO_ADDR
53013: GO 52980
53015: POP
53016: POP
// if not tmp then
53017: LD_VAR 0 5
53021: NOT
53022: IFFALSE 53026
// exit ;
53024: GO 53046
// result := SortListByListDesc ( units , tmp ) ;
53026: LD_ADDR_VAR 0 3
53030: PUSH
53031: LD_VAR 0 1
53035: PPUSH
53036: LD_VAR 0 5
53040: PPUSH
53041: CALL_OW 77
53045: ST_TO_ADDR
// end ;
53046: LD_VAR 0 3
53050: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53051: LD_INT 0
53053: PPUSH
53054: PPUSH
53055: PPUSH
// result := false ;
53056: LD_ADDR_VAR 0 3
53060: PUSH
53061: LD_INT 0
53063: ST_TO_ADDR
// if not building then
53064: LD_VAR 0 2
53068: NOT
53069: IFFALSE 53073
// exit ;
53071: GO 53217
// x := GetX ( building ) ;
53073: LD_ADDR_VAR 0 4
53077: PUSH
53078: LD_VAR 0 2
53082: PPUSH
53083: CALL_OW 250
53087: ST_TO_ADDR
// y := GetY ( building ) ;
53088: LD_ADDR_VAR 0 5
53092: PUSH
53093: LD_VAR 0 2
53097: PPUSH
53098: CALL_OW 251
53102: ST_TO_ADDR
// if not x or not y then
53103: LD_VAR 0 4
53107: NOT
53108: IFTRUE 53117
53110: PUSH
53111: LD_VAR 0 5
53115: NOT
53116: OR
53117: IFFALSE 53121
// exit ;
53119: GO 53217
// if GetTaskList ( unit ) then
53121: LD_VAR 0 1
53125: PPUSH
53126: CALL_OW 437
53130: IFFALSE 53217
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53132: LD_STRING e
53134: PUSH
53135: LD_VAR 0 1
53139: PPUSH
53140: CALL_OW 437
53144: PUSH
53145: LD_INT 1
53147: ARRAY
53148: PUSH
53149: LD_INT 1
53151: ARRAY
53152: EQUAL
53153: IFFALSE 53180
53155: PUSH
53156: LD_VAR 0 4
53160: PUSH
53161: LD_VAR 0 1
53165: PPUSH
53166: CALL_OW 437
53170: PUSH
53171: LD_INT 1
53173: ARRAY
53174: PUSH
53175: LD_INT 2
53177: ARRAY
53178: EQUAL
53179: AND
53180: IFFALSE 53207
53182: PUSH
53183: LD_VAR 0 5
53187: PUSH
53188: LD_VAR 0 1
53192: PPUSH
53193: CALL_OW 437
53197: PUSH
53198: LD_INT 1
53200: ARRAY
53201: PUSH
53202: LD_INT 3
53204: ARRAY
53205: EQUAL
53206: AND
53207: IFFALSE 53217
// result := true end ;
53209: LD_ADDR_VAR 0 3
53213: PUSH
53214: LD_INT 1
53216: ST_TO_ADDR
// end ;
53217: LD_VAR 0 3
53221: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53222: LD_INT 0
53224: PPUSH
// result := false ;
53225: LD_ADDR_VAR 0 4
53229: PUSH
53230: LD_INT 0
53232: ST_TO_ADDR
// if GetTaskList ( unit ) then
53233: LD_VAR 0 1
53237: PPUSH
53238: CALL_OW 437
53242: IFFALSE 53329
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53244: LD_STRING M
53246: PUSH
53247: LD_VAR 0 1
53251: PPUSH
53252: CALL_OW 437
53256: PUSH
53257: LD_INT 1
53259: ARRAY
53260: PUSH
53261: LD_INT 1
53263: ARRAY
53264: EQUAL
53265: IFFALSE 53292
53267: PUSH
53268: LD_VAR 0 2
53272: PUSH
53273: LD_VAR 0 1
53277: PPUSH
53278: CALL_OW 437
53282: PUSH
53283: LD_INT 1
53285: ARRAY
53286: PUSH
53287: LD_INT 2
53289: ARRAY
53290: EQUAL
53291: AND
53292: IFFALSE 53319
53294: PUSH
53295: LD_VAR 0 3
53299: PUSH
53300: LD_VAR 0 1
53304: PPUSH
53305: CALL_OW 437
53309: PUSH
53310: LD_INT 1
53312: ARRAY
53313: PUSH
53314: LD_INT 3
53316: ARRAY
53317: EQUAL
53318: AND
53319: IFFALSE 53329
// result := true ;
53321: LD_ADDR_VAR 0 4
53325: PUSH
53326: LD_INT 1
53328: ST_TO_ADDR
// end ; end ;
53329: LD_VAR 0 4
53333: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53334: LD_INT 0
53336: PPUSH
53337: PPUSH
53338: PPUSH
53339: PPUSH
// if not unit or not area then
53340: LD_VAR 0 1
53344: NOT
53345: IFTRUE 53354
53347: PUSH
53348: LD_VAR 0 2
53352: NOT
53353: OR
53354: IFFALSE 53358
// exit ;
53356: GO 53534
// tmp := AreaToList ( area , i ) ;
53358: LD_ADDR_VAR 0 6
53362: PUSH
53363: LD_VAR 0 2
53367: PPUSH
53368: LD_VAR 0 5
53372: PPUSH
53373: CALL_OW 517
53377: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53378: LD_ADDR_VAR 0 5
53382: PUSH
53383: DOUBLE
53384: LD_INT 1
53386: DEC
53387: ST_TO_ADDR
53388: LD_VAR 0 6
53392: PUSH
53393: LD_INT 1
53395: ARRAY
53396: PUSH
53397: FOR_TO
53398: IFFALSE 53532
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53400: LD_ADDR_VAR 0 7
53404: PUSH
53405: LD_VAR 0 6
53409: PUSH
53410: LD_INT 1
53412: ARRAY
53413: PUSH
53414: LD_VAR 0 5
53418: ARRAY
53419: PUSH
53420: LD_VAR 0 6
53424: PUSH
53425: LD_INT 2
53427: ARRAY
53428: PUSH
53429: LD_VAR 0 5
53433: ARRAY
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53439: LD_INT 92
53441: PUSH
53442: LD_VAR 0 7
53446: PUSH
53447: LD_INT 1
53449: ARRAY
53450: PUSH
53451: LD_VAR 0 7
53455: PUSH
53456: LD_INT 2
53458: ARRAY
53459: PUSH
53460: LD_INT 2
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: PPUSH
53469: CALL_OW 69
53473: PUSH
53474: LD_INT 0
53476: EQUAL
53477: IFFALSE 53530
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53479: LD_VAR 0 1
53483: PPUSH
53484: LD_VAR 0 7
53488: PUSH
53489: LD_INT 1
53491: ARRAY
53492: PPUSH
53493: LD_VAR 0 7
53497: PUSH
53498: LD_INT 2
53500: ARRAY
53501: PPUSH
53502: LD_VAR 0 3
53506: PPUSH
53507: CALL_OW 48
// result := IsPlaced ( unit ) ;
53511: LD_ADDR_VAR 0 4
53515: PUSH
53516: LD_VAR 0 1
53520: PPUSH
53521: CALL_OW 305
53525: ST_TO_ADDR
// exit ;
53526: POP
53527: POP
53528: GO 53534
// end ; end ;
53530: GO 53397
53532: POP
53533: POP
// end ;
53534: LD_VAR 0 4
53538: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53539: LD_INT 0
53541: PPUSH
53542: PPUSH
53543: PPUSH
// if not side or side > 8 then
53544: LD_VAR 0 1
53548: NOT
53549: IFTRUE 53561
53551: PUSH
53552: LD_VAR 0 1
53556: PUSH
53557: LD_INT 8
53559: GREATER
53560: OR
53561: IFFALSE 53565
// exit ;
53563: GO 53752
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53565: LD_ADDR_VAR 0 4
53569: PUSH
53570: LD_INT 22
53572: PUSH
53573: LD_VAR 0 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 21
53584: PUSH
53585: LD_INT 3
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PPUSH
53596: CALL_OW 69
53600: ST_TO_ADDR
// if not tmp then
53601: LD_VAR 0 4
53605: NOT
53606: IFFALSE 53610
// exit ;
53608: GO 53752
// enable_addtolog := true ;
53610: LD_ADDR_OWVAR 81
53614: PUSH
53615: LD_INT 1
53617: ST_TO_ADDR
// AddToLog ( [ ) ;
53618: LD_STRING [
53620: PPUSH
53621: CALL_OW 561
// for i in tmp do
53625: LD_ADDR_VAR 0 3
53629: PUSH
53630: LD_VAR 0 4
53634: PUSH
53635: FOR_IN
53636: IFFALSE 53743
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53638: LD_STRING [
53640: PUSH
53641: LD_VAR 0 3
53645: PPUSH
53646: CALL_OW 266
53650: STR
53651: PUSH
53652: LD_STRING , 
53654: STR
53655: PUSH
53656: LD_VAR 0 3
53660: PPUSH
53661: CALL_OW 250
53665: STR
53666: PUSH
53667: LD_STRING , 
53669: STR
53670: PUSH
53671: LD_VAR 0 3
53675: PPUSH
53676: CALL_OW 251
53680: STR
53681: PUSH
53682: LD_STRING , 
53684: STR
53685: PUSH
53686: LD_VAR 0 3
53690: PPUSH
53691: CALL_OW 254
53695: STR
53696: PUSH
53697: LD_STRING , 
53699: STR
53700: PUSH
53701: LD_VAR 0 3
53705: PPUSH
53706: LD_INT 1
53708: PPUSH
53709: CALL_OW 268
53713: STR
53714: PUSH
53715: LD_STRING , 
53717: STR
53718: PUSH
53719: LD_VAR 0 3
53723: PPUSH
53724: LD_INT 2
53726: PPUSH
53727: CALL_OW 268
53731: STR
53732: PUSH
53733: LD_STRING ],
53735: STR
53736: PPUSH
53737: CALL_OW 561
// end ;
53741: GO 53635
53743: POP
53744: POP
// AddToLog ( ]; ) ;
53745: LD_STRING ];
53747: PPUSH
53748: CALL_OW 561
// end ;
53752: LD_VAR 0 2
53756: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53757: LD_INT 0
53759: PPUSH
53760: PPUSH
53761: PPUSH
53762: PPUSH
53763: PPUSH
// if not area or not rate or not max then
53764: LD_VAR 0 1
53768: NOT
53769: IFTRUE 53778
53771: PUSH
53772: LD_VAR 0 2
53776: NOT
53777: OR
53778: IFTRUE 53787
53780: PUSH
53781: LD_VAR 0 4
53785: NOT
53786: OR
53787: IFFALSE 53791
// exit ;
53789: GO 53980
// while 1 do
53791: LD_INT 1
53793: IFFALSE 53980
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53795: LD_ADDR_VAR 0 9
53799: PUSH
53800: LD_VAR 0 1
53804: PPUSH
53805: LD_INT 1
53807: PPUSH
53808: CALL_OW 287
53812: PUSH
53813: LD_INT 10
53815: MUL
53816: ST_TO_ADDR
// r := rate / 10 ;
53817: LD_ADDR_VAR 0 7
53821: PUSH
53822: LD_VAR 0 2
53826: PUSH
53827: LD_INT 10
53829: DIVREAL
53830: ST_TO_ADDR
// time := 1 1$00 ;
53831: LD_ADDR_VAR 0 8
53835: PUSH
53836: LD_INT 2100
53838: ST_TO_ADDR
// if amount < min then
53839: LD_VAR 0 9
53843: PUSH
53844: LD_VAR 0 3
53848: LESS
53849: IFFALSE 53867
// r := r * 2 else
53851: LD_ADDR_VAR 0 7
53855: PUSH
53856: LD_VAR 0 7
53860: PUSH
53861: LD_INT 2
53863: MUL
53864: ST_TO_ADDR
53865: GO 53893
// if amount > max then
53867: LD_VAR 0 9
53871: PUSH
53872: LD_VAR 0 4
53876: GREATER
53877: IFFALSE 53893
// r := r / 2 ;
53879: LD_ADDR_VAR 0 7
53883: PUSH
53884: LD_VAR 0 7
53888: PUSH
53889: LD_INT 2
53891: DIVREAL
53892: ST_TO_ADDR
// time := time / r ;
53893: LD_ADDR_VAR 0 8
53897: PUSH
53898: LD_VAR 0 8
53902: PUSH
53903: LD_VAR 0 7
53907: DIVREAL
53908: ST_TO_ADDR
// if time < 0 then
53909: LD_VAR 0 8
53913: PUSH
53914: LD_INT 0
53916: LESS
53917: IFFALSE 53934
// time := time * - 1 ;
53919: LD_ADDR_VAR 0 8
53923: PUSH
53924: LD_VAR 0 8
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: MUL
53933: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53934: LD_VAR 0 8
53938: PUSH
53939: LD_INT 35
53941: PPUSH
53942: LD_INT 875
53944: PPUSH
53945: CALL_OW 12
53949: PLUS
53950: PPUSH
53951: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53955: LD_INT 1
53957: PPUSH
53958: LD_INT 5
53960: PPUSH
53961: CALL_OW 12
53965: PPUSH
53966: LD_VAR 0 1
53970: PPUSH
53971: LD_INT 1
53973: PPUSH
53974: CALL_OW 55
// end ;
53978: GO 53791
// end ;
53980: LD_VAR 0 5
53984: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53985: LD_INT 0
53987: PPUSH
53988: PPUSH
53989: PPUSH
53990: PPUSH
53991: PPUSH
53992: PPUSH
53993: PPUSH
53994: PPUSH
// if not turrets or not factories then
53995: LD_VAR 0 1
53999: NOT
54000: IFTRUE 54009
54002: PUSH
54003: LD_VAR 0 2
54007: NOT
54008: OR
54009: IFFALSE 54013
// exit ;
54011: GO 54320
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54013: LD_ADDR_VAR 0 10
54017: PUSH
54018: LD_INT 5
54020: PUSH
54021: LD_INT 6
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 2
54030: PUSH
54031: LD_INT 4
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 3
54040: PUSH
54041: LD_INT 5
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 24
54055: PUSH
54056: LD_INT 25
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 23
54065: PUSH
54066: LD_INT 27
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 42
54079: PUSH
54080: LD_INT 43
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 44
54089: PUSH
54090: LD_INT 46
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 45
54099: PUSH
54100: LD_INT 47
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: LIST
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: LIST
54116: ST_TO_ADDR
// result := [ ] ;
54117: LD_ADDR_VAR 0 3
54121: PUSH
54122: EMPTY
54123: ST_TO_ADDR
// for i in turrets do
54124: LD_ADDR_VAR 0 4
54128: PUSH
54129: LD_VAR 0 1
54133: PUSH
54134: FOR_IN
54135: IFFALSE 54318
// begin nat := GetNation ( i ) ;
54137: LD_ADDR_VAR 0 7
54141: PUSH
54142: LD_VAR 0 4
54146: PPUSH
54147: CALL_OW 248
54151: ST_TO_ADDR
// weapon := 0 ;
54152: LD_ADDR_VAR 0 8
54156: PUSH
54157: LD_INT 0
54159: ST_TO_ADDR
// if not nat then
54160: LD_VAR 0 7
54164: NOT
54165: IFFALSE 54169
// continue ;
54167: GO 54134
// for j in list [ nat ] do
54169: LD_ADDR_VAR 0 5
54173: PUSH
54174: LD_VAR 0 10
54178: PUSH
54179: LD_VAR 0 7
54183: ARRAY
54184: PUSH
54185: FOR_IN
54186: IFFALSE 54227
// if GetBWeapon ( i ) = j [ 1 ] then
54188: LD_VAR 0 4
54192: PPUSH
54193: CALL_OW 269
54197: PUSH
54198: LD_VAR 0 5
54202: PUSH
54203: LD_INT 1
54205: ARRAY
54206: EQUAL
54207: IFFALSE 54225
// begin weapon := j [ 2 ] ;
54209: LD_ADDR_VAR 0 8
54213: PUSH
54214: LD_VAR 0 5
54218: PUSH
54219: LD_INT 2
54221: ARRAY
54222: ST_TO_ADDR
// break ;
54223: GO 54227
// end ;
54225: GO 54185
54227: POP
54228: POP
// if not weapon then
54229: LD_VAR 0 8
54233: NOT
54234: IFFALSE 54238
// continue ;
54236: GO 54134
// for k in factories do
54238: LD_ADDR_VAR 0 6
54242: PUSH
54243: LD_VAR 0 2
54247: PUSH
54248: FOR_IN
54249: IFFALSE 54314
// begin weapons := AvailableWeaponList ( k ) ;
54251: LD_ADDR_VAR 0 9
54255: PUSH
54256: LD_VAR 0 6
54260: PPUSH
54261: CALL_OW 478
54265: ST_TO_ADDR
// if not weapons then
54266: LD_VAR 0 9
54270: NOT
54271: IFFALSE 54275
// continue ;
54273: GO 54248
// if weapon in weapons then
54275: LD_VAR 0 8
54279: PUSH
54280: LD_VAR 0 9
54284: IN
54285: IFFALSE 54312
// begin result := [ i , weapon ] ;
54287: LD_ADDR_VAR 0 3
54291: PUSH
54292: LD_VAR 0 4
54296: PUSH
54297: LD_VAR 0 8
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: ST_TO_ADDR
// exit ;
54306: POP
54307: POP
54308: POP
54309: POP
54310: GO 54320
// end ; end ;
54312: GO 54248
54314: POP
54315: POP
// end ;
54316: GO 54134
54318: POP
54319: POP
// end ;
54320: LD_VAR 0 3
54324: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54325: LD_INT 0
54327: PPUSH
// if not side or side > 8 then
54328: LD_VAR 0 3
54332: NOT
54333: IFTRUE 54345
54335: PUSH
54336: LD_VAR 0 3
54340: PUSH
54341: LD_INT 8
54343: GREATER
54344: OR
54345: IFFALSE 54349
// exit ;
54347: GO 54408
// if not range then
54349: LD_VAR 0 4
54353: NOT
54354: IFFALSE 54365
// range := - 12 ;
54356: LD_ADDR_VAR 0 4
54360: PUSH
54361: LD_INT 12
54363: NEG
54364: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54365: LD_VAR 0 1
54369: PPUSH
54370: LD_VAR 0 2
54374: PPUSH
54375: LD_VAR 0 3
54379: PPUSH
54380: LD_VAR 0 4
54384: PPUSH
54385: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54389: LD_VAR 0 1
54393: PPUSH
54394: LD_VAR 0 2
54398: PPUSH
54399: LD_VAR 0 3
54403: PPUSH
54404: CALL_OW 331
// end ;
54408: LD_VAR 0 5
54412: RET
// export function Video ( mode ) ; begin
54413: LD_INT 0
54415: PPUSH
// ingame_video = mode ;
54416: LD_ADDR_OWVAR 52
54420: PUSH
54421: LD_VAR 0 1
54425: ST_TO_ADDR
// interface_hidden = mode ;
54426: LD_ADDR_OWVAR 54
54430: PUSH
54431: LD_VAR 0 1
54435: ST_TO_ADDR
// end ;
54436: LD_VAR 0 2
54440: RET
// export function Join ( array , element ) ; begin
54441: LD_INT 0
54443: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54444: LD_ADDR_VAR 0 3
54448: PUSH
54449: LD_VAR 0 1
54453: PPUSH
54454: LD_VAR 0 1
54458: PUSH
54459: LD_INT 1
54461: PLUS
54462: PPUSH
54463: LD_VAR 0 2
54467: PPUSH
54468: CALL_OW 1
54472: ST_TO_ADDR
// end ;
54473: LD_VAR 0 3
54477: RET
// export function JoinUnion ( array , element ) ; begin
54478: LD_INT 0
54480: PPUSH
// result := array union element ;
54481: LD_ADDR_VAR 0 3
54485: PUSH
54486: LD_VAR 0 1
54490: PUSH
54491: LD_VAR 0 2
54495: UNION
54496: ST_TO_ADDR
// end ;
54497: LD_VAR 0 3
54501: RET
// export function GetBehemoths ( side ) ; begin
54502: LD_INT 0
54504: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54505: LD_ADDR_VAR 0 2
54509: PUSH
54510: LD_INT 22
54512: PUSH
54513: LD_VAR 0 1
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 31
54524: PUSH
54525: LD_INT 25
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PPUSH
54536: CALL_OW 69
54540: ST_TO_ADDR
// end ;
54541: LD_VAR 0 2
54545: RET
// export function Shuffle ( array ) ; var i , index ; begin
54546: LD_INT 0
54548: PPUSH
54549: PPUSH
54550: PPUSH
// result := [ ] ;
54551: LD_ADDR_VAR 0 2
54555: PUSH
54556: EMPTY
54557: ST_TO_ADDR
// if not array then
54558: LD_VAR 0 1
54562: NOT
54563: IFFALSE 54567
// exit ;
54565: GO 54666
// Randomize ;
54567: CALL_OW 10
// for i = array downto 1 do
54571: LD_ADDR_VAR 0 3
54575: PUSH
54576: DOUBLE
54577: LD_VAR 0 1
54581: INC
54582: ST_TO_ADDR
54583: LD_INT 1
54585: PUSH
54586: FOR_DOWNTO
54587: IFFALSE 54664
// begin index := rand ( 1 , array ) ;
54589: LD_ADDR_VAR 0 4
54593: PUSH
54594: LD_INT 1
54596: PPUSH
54597: LD_VAR 0 1
54601: PPUSH
54602: CALL_OW 12
54606: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54607: LD_ADDR_VAR 0 2
54611: PUSH
54612: LD_VAR 0 2
54616: PPUSH
54617: LD_VAR 0 2
54621: PUSH
54622: LD_INT 1
54624: PLUS
54625: PPUSH
54626: LD_VAR 0 1
54630: PUSH
54631: LD_VAR 0 4
54635: ARRAY
54636: PPUSH
54637: CALL_OW 2
54641: ST_TO_ADDR
// array := Delete ( array , index ) ;
54642: LD_ADDR_VAR 0 1
54646: PUSH
54647: LD_VAR 0 1
54651: PPUSH
54652: LD_VAR 0 4
54656: PPUSH
54657: CALL_OW 3
54661: ST_TO_ADDR
// end ;
54662: GO 54586
54664: POP
54665: POP
// end ;
54666: LD_VAR 0 2
54670: RET
// export function GetBaseMaterials ( base ) ; begin
54671: LD_INT 0
54673: PPUSH
// result := [ 0 , 0 , 0 ] ;
54674: LD_ADDR_VAR 0 2
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: LIST
54692: ST_TO_ADDR
// if not base then
54693: LD_VAR 0 1
54697: NOT
54698: IFFALSE 54702
// exit ;
54700: GO 54751
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54702: LD_ADDR_VAR 0 2
54706: PUSH
54707: LD_VAR 0 1
54711: PPUSH
54712: LD_INT 1
54714: PPUSH
54715: CALL_OW 275
54719: PUSH
54720: LD_VAR 0 1
54724: PPUSH
54725: LD_INT 2
54727: PPUSH
54728: CALL_OW 275
54732: PUSH
54733: LD_VAR 0 1
54737: PPUSH
54738: LD_INT 3
54740: PPUSH
54741: CALL_OW 275
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: LIST
54750: ST_TO_ADDR
// end ;
54751: LD_VAR 0 2
54755: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54756: LD_INT 0
54758: PPUSH
54759: PPUSH
// result := array ;
54760: LD_ADDR_VAR 0 3
54764: PUSH
54765: LD_VAR 0 1
54769: ST_TO_ADDR
// if size >= result then
54770: LD_VAR 0 2
54774: PUSH
54775: LD_VAR 0 3
54779: GREATEREQUAL
54780: IFFALSE 54784
// exit ;
54782: GO 54834
// if size then
54784: LD_VAR 0 2
54788: IFFALSE 54834
// for i := array downto size do
54790: LD_ADDR_VAR 0 4
54794: PUSH
54795: DOUBLE
54796: LD_VAR 0 1
54800: INC
54801: ST_TO_ADDR
54802: LD_VAR 0 2
54806: PUSH
54807: FOR_DOWNTO
54808: IFFALSE 54832
// result := Delete ( result , result ) ;
54810: LD_ADDR_VAR 0 3
54814: PUSH
54815: LD_VAR 0 3
54819: PPUSH
54820: LD_VAR 0 3
54824: PPUSH
54825: CALL_OW 3
54829: ST_TO_ADDR
54830: GO 54807
54832: POP
54833: POP
// end ;
54834: LD_VAR 0 3
54838: RET
// export function ComExit ( unit ) ; var tmp ; begin
54839: LD_INT 0
54841: PPUSH
54842: PPUSH
// if not IsInUnit ( unit ) then
54843: LD_VAR 0 1
54847: PPUSH
54848: CALL_OW 310
54852: NOT
54853: IFFALSE 54857
// exit ;
54855: GO 54917
// tmp := IsInUnit ( unit ) ;
54857: LD_ADDR_VAR 0 3
54861: PUSH
54862: LD_VAR 0 1
54866: PPUSH
54867: CALL_OW 310
54871: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54872: LD_VAR 0 3
54876: PPUSH
54877: CALL_OW 247
54881: PUSH
54882: LD_INT 2
54884: EQUAL
54885: IFFALSE 54898
// ComExitVehicle ( unit ) else
54887: LD_VAR 0 1
54891: PPUSH
54892: CALL_OW 121
54896: GO 54907
// ComExitBuilding ( unit ) ;
54898: LD_VAR 0 1
54902: PPUSH
54903: CALL_OW 122
// result := tmp ;
54907: LD_ADDR_VAR 0 2
54911: PUSH
54912: LD_VAR 0 3
54916: ST_TO_ADDR
// end ;
54917: LD_VAR 0 2
54921: RET
// export function ComExitAll ( units ) ; var i ; begin
54922: LD_INT 0
54924: PPUSH
54925: PPUSH
// if not units then
54926: LD_VAR 0 1
54930: NOT
54931: IFFALSE 54935
// exit ;
54933: GO 54961
// for i in units do
54935: LD_ADDR_VAR 0 3
54939: PUSH
54940: LD_VAR 0 1
54944: PUSH
54945: FOR_IN
54946: IFFALSE 54959
// ComExit ( i ) ;
54948: LD_VAR 0 3
54952: PPUSH
54953: CALL 54839 0 1
54957: GO 54945
54959: POP
54960: POP
// end ;
54961: LD_VAR 0 2
54965: RET
// export function ResetHc ; begin
54966: LD_INT 0
54968: PPUSH
// InitHc ;
54969: CALL_OW 19
// hc_importance := 0 ;
54973: LD_ADDR_OWVAR 32
54977: PUSH
54978: LD_INT 0
54980: ST_TO_ADDR
// end ;
54981: LD_VAR 0 1
54985: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54986: LD_INT 0
54988: PPUSH
54989: PPUSH
54990: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54991: LD_ADDR_VAR 0 6
54995: PUSH
54996: LD_VAR 0 1
55000: PUSH
55001: LD_VAR 0 3
55005: PLUS
55006: PUSH
55007: LD_INT 2
55009: DIV
55010: ST_TO_ADDR
// if _x < 0 then
55011: LD_VAR 0 6
55015: PUSH
55016: LD_INT 0
55018: LESS
55019: IFFALSE 55036
// _x := _x * - 1 ;
55021: LD_ADDR_VAR 0 6
55025: PUSH
55026: LD_VAR 0 6
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: MUL
55035: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55036: LD_ADDR_VAR 0 7
55040: PUSH
55041: LD_VAR 0 2
55045: PUSH
55046: LD_VAR 0 4
55050: PLUS
55051: PUSH
55052: LD_INT 2
55054: DIV
55055: ST_TO_ADDR
// if _y < 0 then
55056: LD_VAR 0 7
55060: PUSH
55061: LD_INT 0
55063: LESS
55064: IFFALSE 55081
// _y := _y * - 1 ;
55066: LD_ADDR_VAR 0 7
55070: PUSH
55071: LD_VAR 0 7
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: MUL
55080: ST_TO_ADDR
// result := [ _x , _y ] ;
55081: LD_ADDR_VAR 0 5
55085: PUSH
55086: LD_VAR 0 6
55090: PUSH
55091: LD_VAR 0 7
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: ST_TO_ADDR
// end ;
55100: LD_VAR 0 5
55104: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55105: LD_INT 0
55107: PPUSH
55108: PPUSH
55109: PPUSH
55110: PPUSH
// task := GetTaskList ( unit ) ;
55111: LD_ADDR_VAR 0 7
55115: PUSH
55116: LD_VAR 0 1
55120: PPUSH
55121: CALL_OW 437
55125: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55126: LD_VAR 0 7
55130: NOT
55131: IFFALSE 55150
55133: PUSH
55134: LD_VAR 0 1
55138: PPUSH
55139: LD_VAR 0 2
55143: PPUSH
55144: CALL_OW 308
55148: NOT
55149: AND
55150: IFFALSE 55154
// exit ;
55152: GO 55272
// if IsInArea ( unit , area ) then
55154: LD_VAR 0 1
55158: PPUSH
55159: LD_VAR 0 2
55163: PPUSH
55164: CALL_OW 308
55168: IFFALSE 55186
// begin ComMoveToArea ( unit , goAway ) ;
55170: LD_VAR 0 1
55174: PPUSH
55175: LD_VAR 0 3
55179: PPUSH
55180: CALL_OW 113
// exit ;
55184: GO 55272
// end ; if task [ 1 ] [ 1 ] <> M then
55186: LD_VAR 0 7
55190: PUSH
55191: LD_INT 1
55193: ARRAY
55194: PUSH
55195: LD_INT 1
55197: ARRAY
55198: PUSH
55199: LD_STRING M
55201: NONEQUAL
55202: IFFALSE 55206
// exit ;
55204: GO 55272
// x := task [ 1 ] [ 2 ] ;
55206: LD_ADDR_VAR 0 5
55210: PUSH
55211: LD_VAR 0 7
55215: PUSH
55216: LD_INT 1
55218: ARRAY
55219: PUSH
55220: LD_INT 2
55222: ARRAY
55223: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55224: LD_ADDR_VAR 0 6
55228: PUSH
55229: LD_VAR 0 7
55233: PUSH
55234: LD_INT 1
55236: ARRAY
55237: PUSH
55238: LD_INT 3
55240: ARRAY
55241: ST_TO_ADDR
// if InArea ( x , y , area ) then
55242: LD_VAR 0 5
55246: PPUSH
55247: LD_VAR 0 6
55251: PPUSH
55252: LD_VAR 0 2
55256: PPUSH
55257: CALL_OW 309
55261: IFFALSE 55272
// ComStop ( unit ) ;
55263: LD_VAR 0 1
55267: PPUSH
55268: CALL_OW 141
// end ;
55272: LD_VAR 0 4
55276: RET
// export function Abs ( value ) ; begin
55277: LD_INT 0
55279: PPUSH
// result := value ;
55280: LD_ADDR_VAR 0 2
55284: PUSH
55285: LD_VAR 0 1
55289: ST_TO_ADDR
// if value < 0 then
55290: LD_VAR 0 1
55294: PUSH
55295: LD_INT 0
55297: LESS
55298: IFFALSE 55315
// result := value * - 1 ;
55300: LD_ADDR_VAR 0 2
55304: PUSH
55305: LD_VAR 0 1
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: MUL
55314: ST_TO_ADDR
// end ;
55315: LD_VAR 0 2
55319: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55320: LD_INT 0
55322: PPUSH
55323: PPUSH
55324: PPUSH
55325: PPUSH
55326: PPUSH
55327: PPUSH
55328: PPUSH
55329: PPUSH
// if not unit or not building then
55330: LD_VAR 0 1
55334: NOT
55335: IFTRUE 55344
55337: PUSH
55338: LD_VAR 0 2
55342: NOT
55343: OR
55344: IFFALSE 55348
// exit ;
55346: GO 55576
// x := GetX ( building ) ;
55348: LD_ADDR_VAR 0 4
55352: PUSH
55353: LD_VAR 0 2
55357: PPUSH
55358: CALL_OW 250
55362: ST_TO_ADDR
// y := GetY ( building ) ;
55363: LD_ADDR_VAR 0 6
55367: PUSH
55368: LD_VAR 0 2
55372: PPUSH
55373: CALL_OW 251
55377: ST_TO_ADDR
// d := GetDir ( building ) ;
55378: LD_ADDR_VAR 0 8
55382: PUSH
55383: LD_VAR 0 2
55387: PPUSH
55388: CALL_OW 254
55392: ST_TO_ADDR
// r := 4 ;
55393: LD_ADDR_VAR 0 9
55397: PUSH
55398: LD_INT 4
55400: ST_TO_ADDR
// for i := 1 to 5 do
55401: LD_ADDR_VAR 0 10
55405: PUSH
55406: DOUBLE
55407: LD_INT 1
55409: DEC
55410: ST_TO_ADDR
55411: LD_INT 5
55413: PUSH
55414: FOR_TO
55415: IFFALSE 55574
// begin _x := ShiftX ( x , d , r + i ) ;
55417: LD_ADDR_VAR 0 5
55421: PUSH
55422: LD_VAR 0 4
55426: PPUSH
55427: LD_VAR 0 8
55431: PPUSH
55432: LD_VAR 0 9
55436: PUSH
55437: LD_VAR 0 10
55441: PLUS
55442: PPUSH
55443: CALL_OW 272
55447: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55448: LD_ADDR_VAR 0 7
55452: PUSH
55453: LD_VAR 0 6
55457: PPUSH
55458: LD_VAR 0 8
55462: PPUSH
55463: LD_VAR 0 9
55467: PUSH
55468: LD_VAR 0 10
55472: PLUS
55473: PPUSH
55474: CALL_OW 273
55478: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55479: LD_VAR 0 5
55483: PPUSH
55484: LD_VAR 0 7
55488: PPUSH
55489: CALL_OW 488
55493: IFFALSE 55528
55495: PUSH
55496: LD_VAR 0 5
55500: PPUSH
55501: LD_VAR 0 7
55505: PPUSH
55506: CALL_OW 428
55510: PPUSH
55511: CALL_OW 247
55515: PUSH
55516: LD_INT 3
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: IN
55526: NOT
55527: AND
55528: IFFALSE 55572
// begin ComMoveXY ( unit , _x , _y ) ;
55530: LD_VAR 0 1
55534: PPUSH
55535: LD_VAR 0 5
55539: PPUSH
55540: LD_VAR 0 7
55544: PPUSH
55545: CALL_OW 111
// result := [ _x , _y ] ;
55549: LD_ADDR_VAR 0 3
55553: PUSH
55554: LD_VAR 0 5
55558: PUSH
55559: LD_VAR 0 7
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: ST_TO_ADDR
// exit ;
55568: POP
55569: POP
55570: GO 55576
// end ; end ;
55572: GO 55414
55574: POP
55575: POP
// end ;
55576: LD_VAR 0 3
55580: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55581: LD_INT 0
55583: PPUSH
55584: PPUSH
55585: PPUSH
// result := 0 ;
55586: LD_ADDR_VAR 0 3
55590: PUSH
55591: LD_INT 0
55593: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55594: LD_VAR 0 1
55598: PUSH
55599: LD_INT 0
55601: LESS
55602: IFTRUE 55614
55604: PUSH
55605: LD_VAR 0 1
55609: PUSH
55610: LD_INT 8
55612: GREATER
55613: OR
55614: IFTRUE 55626
55616: PUSH
55617: LD_VAR 0 2
55621: PUSH
55622: LD_INT 0
55624: LESS
55625: OR
55626: IFTRUE 55638
55628: PUSH
55629: LD_VAR 0 2
55633: PUSH
55634: LD_INT 8
55636: GREATER
55637: OR
55638: IFFALSE 55642
// exit ;
55640: GO 55717
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55642: LD_ADDR_VAR 0 4
55646: PUSH
55647: LD_INT 22
55649: PUSH
55650: LD_VAR 0 2
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PPUSH
55659: CALL_OW 69
55663: PUSH
55664: FOR_IN
55665: IFFALSE 55715
// begin un := UnitShoot ( i ) ;
55667: LD_ADDR_VAR 0 5
55671: PUSH
55672: LD_VAR 0 4
55676: PPUSH
55677: CALL_OW 504
55681: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55682: LD_VAR 0 5
55686: PPUSH
55687: CALL_OW 255
55691: PUSH
55692: LD_VAR 0 1
55696: EQUAL
55697: IFFALSE 55713
// begin result := un ;
55699: LD_ADDR_VAR 0 3
55703: PUSH
55704: LD_VAR 0 5
55708: ST_TO_ADDR
// exit ;
55709: POP
55710: POP
55711: GO 55717
// end ; end ;
55713: GO 55664
55715: POP
55716: POP
// end ;
55717: LD_VAR 0 3
55721: RET
// export function GetCargoBay ( units ) ; begin
55722: LD_INT 0
55724: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55725: LD_ADDR_VAR 0 2
55729: PUSH
55730: LD_VAR 0 1
55734: PPUSH
55735: LD_INT 2
55737: PUSH
55738: LD_INT 34
55740: PUSH
55741: LD_INT 12
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 34
55750: PUSH
55751: LD_INT 51
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 34
55760: PUSH
55761: LD_INT 32
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 34
55770: PUSH
55771: LD_INT 89
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: PPUSH
55785: CALL_OW 72
55789: ST_TO_ADDR
// end ;
55790: LD_VAR 0 2
55794: RET
// export function Negate ( value ) ; begin
55795: LD_INT 0
55797: PPUSH
// result := not value ;
55798: LD_ADDR_VAR 0 2
55802: PUSH
55803: LD_VAR 0 1
55807: NOT
55808: ST_TO_ADDR
// end ;
55809: LD_VAR 0 2
55813: RET
// export function Inc ( value ) ; begin
55814: LD_INT 0
55816: PPUSH
// result := value + 1 ;
55817: LD_ADDR_VAR 0 2
55821: PUSH
55822: LD_VAR 0 1
55826: PUSH
55827: LD_INT 1
55829: PLUS
55830: ST_TO_ADDR
// end ;
55831: LD_VAR 0 2
55835: RET
// export function Dec ( value ) ; begin
55836: LD_INT 0
55838: PPUSH
// result := value - 1 ;
55839: LD_ADDR_VAR 0 2
55843: PUSH
55844: LD_VAR 0 1
55848: PUSH
55849: LD_INT 1
55851: MINUS
55852: ST_TO_ADDR
// end ;
55853: LD_VAR 0 2
55857: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55858: LD_INT 0
55860: PPUSH
55861: PPUSH
55862: PPUSH
55863: PPUSH
55864: PPUSH
55865: PPUSH
55866: PPUSH
55867: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55868: LD_VAR 0 1
55872: PPUSH
55873: LD_VAR 0 2
55877: PPUSH
55878: CALL_OW 488
55882: NOT
55883: IFTRUE 55902
55885: PUSH
55886: LD_VAR 0 3
55890: PPUSH
55891: LD_VAR 0 4
55895: PPUSH
55896: CALL_OW 488
55900: NOT
55901: OR
55902: IFFALSE 55915
// begin result := - 1 ;
55904: LD_ADDR_VAR 0 5
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: ST_TO_ADDR
// exit ;
55913: GO 56150
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55915: LD_ADDR_VAR 0 12
55919: PUSH
55920: LD_VAR 0 1
55924: PPUSH
55925: LD_VAR 0 2
55929: PPUSH
55930: LD_VAR 0 3
55934: PPUSH
55935: LD_VAR 0 4
55939: PPUSH
55940: CALL 54986 0 4
55944: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55945: LD_ADDR_VAR 0 11
55949: PUSH
55950: LD_VAR 0 1
55954: PPUSH
55955: LD_VAR 0 2
55959: PPUSH
55960: LD_VAR 0 12
55964: PUSH
55965: LD_INT 1
55967: ARRAY
55968: PPUSH
55969: LD_VAR 0 12
55973: PUSH
55974: LD_INT 2
55976: ARRAY
55977: PPUSH
55978: CALL_OW 298
55982: ST_TO_ADDR
// distance := 9999 ;
55983: LD_ADDR_VAR 0 10
55987: PUSH
55988: LD_INT 9999
55990: ST_TO_ADDR
// for i := 0 to 5 do
55991: LD_ADDR_VAR 0 6
55995: PUSH
55996: DOUBLE
55997: LD_INT 0
55999: DEC
56000: ST_TO_ADDR
56001: LD_INT 5
56003: PUSH
56004: FOR_TO
56005: IFFALSE 56148
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56007: LD_ADDR_VAR 0 7
56011: PUSH
56012: LD_VAR 0 1
56016: PPUSH
56017: LD_VAR 0 6
56021: PPUSH
56022: LD_VAR 0 11
56026: PPUSH
56027: CALL_OW 272
56031: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56032: LD_ADDR_VAR 0 8
56036: PUSH
56037: LD_VAR 0 2
56041: PPUSH
56042: LD_VAR 0 6
56046: PPUSH
56047: LD_VAR 0 11
56051: PPUSH
56052: CALL_OW 273
56056: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56057: LD_VAR 0 7
56061: PPUSH
56062: LD_VAR 0 8
56066: PPUSH
56067: CALL_OW 488
56071: NOT
56072: IFFALSE 56076
// continue ;
56074: GO 56004
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56076: LD_ADDR_VAR 0 9
56080: PUSH
56081: LD_VAR 0 12
56085: PUSH
56086: LD_INT 1
56088: ARRAY
56089: PPUSH
56090: LD_VAR 0 12
56094: PUSH
56095: LD_INT 2
56097: ARRAY
56098: PPUSH
56099: LD_VAR 0 7
56103: PPUSH
56104: LD_VAR 0 8
56108: PPUSH
56109: CALL_OW 298
56113: ST_TO_ADDR
// if tmp < distance then
56114: LD_VAR 0 9
56118: PUSH
56119: LD_VAR 0 10
56123: LESS
56124: IFFALSE 56146
// begin result := i ;
56126: LD_ADDR_VAR 0 5
56130: PUSH
56131: LD_VAR 0 6
56135: ST_TO_ADDR
// distance := tmp ;
56136: LD_ADDR_VAR 0 10
56140: PUSH
56141: LD_VAR 0 9
56145: ST_TO_ADDR
// end ; end ;
56146: GO 56004
56148: POP
56149: POP
// end ;
56150: LD_VAR 0 5
56154: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56155: LD_INT 0
56157: PPUSH
56158: PPUSH
// if not driver or not IsInUnit ( driver ) then
56159: LD_VAR 0 1
56163: NOT
56164: IFTRUE 56178
56166: PUSH
56167: LD_VAR 0 1
56171: PPUSH
56172: CALL_OW 310
56176: NOT
56177: OR
56178: IFFALSE 56182
// exit ;
56180: GO 56272
// vehicle := IsInUnit ( driver ) ;
56182: LD_ADDR_VAR 0 3
56186: PUSH
56187: LD_VAR 0 1
56191: PPUSH
56192: CALL_OW 310
56196: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56197: LD_VAR 0 1
56201: PPUSH
56202: LD_STRING \
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: PUSH
56232: LD_STRING E
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: LD_VAR 0 3
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PPUSH
56268: CALL_OW 446
// end ;
56272: LD_VAR 0 2
56276: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56277: LD_INT 0
56279: PPUSH
56280: PPUSH
// if not driver or not IsInUnit ( driver ) then
56281: LD_VAR 0 1
56285: NOT
56286: IFTRUE 56300
56288: PUSH
56289: LD_VAR 0 1
56293: PPUSH
56294: CALL_OW 310
56298: NOT
56299: OR
56300: IFFALSE 56304
// exit ;
56302: GO 56394
// vehicle := IsInUnit ( driver ) ;
56304: LD_ADDR_VAR 0 3
56308: PUSH
56309: LD_VAR 0 1
56313: PPUSH
56314: CALL_OW 310
56318: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56319: LD_VAR 0 1
56323: PPUSH
56324: LD_STRING \
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: PUSH
56354: LD_STRING E
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_VAR 0 3
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PPUSH
56390: CALL_OW 447
// end ;
56394: LD_VAR 0 2
56398: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56399: LD_INT 0
56401: PPUSH
56402: PPUSH
56403: PPUSH
// tmp := [ ] ;
56404: LD_ADDR_VAR 0 5
56408: PUSH
56409: EMPTY
56410: ST_TO_ADDR
// for i in units do
56411: LD_ADDR_VAR 0 4
56415: PUSH
56416: LD_VAR 0 1
56420: PUSH
56421: FOR_IN
56422: IFFALSE 56460
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56424: LD_ADDR_VAR 0 5
56428: PUSH
56429: LD_VAR 0 5
56433: PPUSH
56434: LD_VAR 0 5
56438: PUSH
56439: LD_INT 1
56441: PLUS
56442: PPUSH
56443: LD_VAR 0 4
56447: PPUSH
56448: CALL_OW 256
56452: PPUSH
56453: CALL_OW 2
56457: ST_TO_ADDR
56458: GO 56421
56460: POP
56461: POP
// if not tmp then
56462: LD_VAR 0 5
56466: NOT
56467: IFFALSE 56471
// exit ;
56469: GO 56519
// if asc then
56471: LD_VAR 0 2
56475: IFFALSE 56499
// result := SortListByListAsc ( units , tmp ) else
56477: LD_ADDR_VAR 0 3
56481: PUSH
56482: LD_VAR 0 1
56486: PPUSH
56487: LD_VAR 0 5
56491: PPUSH
56492: CALL_OW 76
56496: ST_TO_ADDR
56497: GO 56519
// result := SortListByListDesc ( units , tmp ) ;
56499: LD_ADDR_VAR 0 3
56503: PUSH
56504: LD_VAR 0 1
56508: PPUSH
56509: LD_VAR 0 5
56513: PPUSH
56514: CALL_OW 77
56518: ST_TO_ADDR
// end ;
56519: LD_VAR 0 3
56523: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56524: LD_INT 0
56526: PPUSH
56527: PPUSH
// task := GetTaskList ( mech ) ;
56528: LD_ADDR_VAR 0 4
56532: PUSH
56533: LD_VAR 0 1
56537: PPUSH
56538: CALL_OW 437
56542: ST_TO_ADDR
// if not task then
56543: LD_VAR 0 4
56547: NOT
56548: IFFALSE 56552
// exit ;
56550: GO 56596
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56552: LD_ADDR_VAR 0 3
56556: PUSH
56557: LD_VAR 0 4
56561: PUSH
56562: LD_INT 1
56564: ARRAY
56565: PUSH
56566: LD_INT 1
56568: ARRAY
56569: PUSH
56570: LD_STRING r
56572: EQUAL
56573: IFFALSE 56595
56575: PUSH
56576: LD_VAR 0 4
56580: PUSH
56581: LD_INT 1
56583: ARRAY
56584: PUSH
56585: LD_INT 4
56587: ARRAY
56588: PUSH
56589: LD_VAR 0 2
56593: EQUAL
56594: AND
56595: ST_TO_ADDR
// end ;
56596: LD_VAR 0 3
56600: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56601: LD_INT 0
56603: PPUSH
// SetDir ( unit , d ) ;
56604: LD_VAR 0 1
56608: PPUSH
56609: LD_VAR 0 4
56613: PPUSH
56614: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56618: LD_ADDR_VAR 0 6
56622: PUSH
56623: LD_VAR 0 1
56627: PPUSH
56628: LD_VAR 0 2
56632: PPUSH
56633: LD_VAR 0 3
56637: PPUSH
56638: LD_VAR 0 5
56642: PPUSH
56643: CALL_OW 48
56647: ST_TO_ADDR
// end ;
56648: LD_VAR 0 6
56652: RET
// export function ToNaturalNumber ( number ) ; begin
56653: LD_INT 0
56655: PPUSH
// result := number div 1 ;
56656: LD_ADDR_VAR 0 2
56660: PUSH
56661: LD_VAR 0 1
56665: PUSH
56666: LD_INT 1
56668: DIV
56669: ST_TO_ADDR
// if number < 0 then
56670: LD_VAR 0 1
56674: PUSH
56675: LD_INT 0
56677: LESS
56678: IFFALSE 56688
// result := 0 ;
56680: LD_ADDR_VAR 0 2
56684: PUSH
56685: LD_INT 0
56687: ST_TO_ADDR
// end ;
56688: LD_VAR 0 2
56692: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
56693: LD_INT 0
56695: PPUSH
56696: PPUSH
56697: PPUSH
// if not buildings then
56698: LD_VAR 0 1
56702: NOT
56703: IFFALSE 56707
// exit ;
56705: GO 56822
// tmp := [ ] ;
56707: LD_ADDR_VAR 0 5
56711: PUSH
56712: EMPTY
56713: ST_TO_ADDR
// for b in buildings do
56714: LD_ADDR_VAR 0 4
56718: PUSH
56719: LD_VAR 0 1
56723: PUSH
56724: FOR_IN
56725: IFFALSE 56763
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56727: LD_ADDR_VAR 0 5
56731: PUSH
56732: LD_VAR 0 5
56736: PPUSH
56737: LD_VAR 0 5
56741: PUSH
56742: LD_INT 1
56744: PLUS
56745: PPUSH
56746: LD_VAR 0 4
56750: PPUSH
56751: CALL_OW 266
56755: PPUSH
56756: CALL_OW 1
56760: ST_TO_ADDR
56761: GO 56724
56763: POP
56764: POP
// if not tmp then
56765: LD_VAR 0 5
56769: NOT
56770: IFFALSE 56774
// exit ;
56772: GO 56822
// if asc then
56774: LD_VAR 0 2
56778: IFFALSE 56802
// result := SortListByListAsc ( buildings , tmp ) else
56780: LD_ADDR_VAR 0 3
56784: PUSH
56785: LD_VAR 0 1
56789: PPUSH
56790: LD_VAR 0 5
56794: PPUSH
56795: CALL_OW 76
56799: ST_TO_ADDR
56800: GO 56822
// result := SortListByListDesc ( buildings , tmp ) ;
56802: LD_ADDR_VAR 0 3
56806: PUSH
56807: LD_VAR 0 1
56811: PPUSH
56812: LD_VAR 0 5
56816: PPUSH
56817: CALL_OW 77
56821: ST_TO_ADDR
// end ;
56822: LD_VAR 0 3
56826: RET
// export function SortByClass ( units , class ) ; var un ; begin
56827: LD_INT 0
56829: PPUSH
56830: PPUSH
// if not units or not class then
56831: LD_VAR 0 1
56835: NOT
56836: IFTRUE 56845
56838: PUSH
56839: LD_VAR 0 2
56843: NOT
56844: OR
56845: IFFALSE 56849
// exit ;
56847: GO 56944
// result := [ ] ;
56849: LD_ADDR_VAR 0 3
56853: PUSH
56854: EMPTY
56855: ST_TO_ADDR
// for un in units do
56856: LD_ADDR_VAR 0 4
56860: PUSH
56861: LD_VAR 0 1
56865: PUSH
56866: FOR_IN
56867: IFFALSE 56942
// if GetClass ( un ) = class then
56869: LD_VAR 0 4
56873: PPUSH
56874: CALL_OW 257
56878: PUSH
56879: LD_VAR 0 2
56883: EQUAL
56884: IFFALSE 56911
// result := Insert ( result , 1 , un ) else
56886: LD_ADDR_VAR 0 3
56890: PUSH
56891: LD_VAR 0 3
56895: PPUSH
56896: LD_INT 1
56898: PPUSH
56899: LD_VAR 0 4
56903: PPUSH
56904: CALL_OW 2
56908: ST_TO_ADDR
56909: GO 56940
// result := Replace ( result , result + 1 , un ) ;
56911: LD_ADDR_VAR 0 3
56915: PUSH
56916: LD_VAR 0 3
56920: PPUSH
56921: LD_VAR 0 3
56925: PUSH
56926: LD_INT 1
56928: PLUS
56929: PPUSH
56930: LD_VAR 0 4
56934: PPUSH
56935: CALL_OW 1
56939: ST_TO_ADDR
56940: GO 56866
56942: POP
56943: POP
// end ;
56944: LD_VAR 0 3
56948: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56949: LD_INT 0
56951: PPUSH
56952: PPUSH
56953: PPUSH
56954: PPUSH
56955: PPUSH
56956: PPUSH
56957: PPUSH
// result := [ ] ;
56958: LD_ADDR_VAR 0 4
56962: PUSH
56963: EMPTY
56964: ST_TO_ADDR
// if x - r < 0 then
56965: LD_VAR 0 1
56969: PUSH
56970: LD_VAR 0 3
56974: MINUS
56975: PUSH
56976: LD_INT 0
56978: LESS
56979: IFFALSE 56991
// min_x := 0 else
56981: LD_ADDR_VAR 0 8
56985: PUSH
56986: LD_INT 0
56988: ST_TO_ADDR
56989: GO 57007
// min_x := x - r ;
56991: LD_ADDR_VAR 0 8
56995: PUSH
56996: LD_VAR 0 1
57000: PUSH
57001: LD_VAR 0 3
57005: MINUS
57006: ST_TO_ADDR
// if y - r < 0 then
57007: LD_VAR 0 2
57011: PUSH
57012: LD_VAR 0 3
57016: MINUS
57017: PUSH
57018: LD_INT 0
57020: LESS
57021: IFFALSE 57033
// min_y := 0 else
57023: LD_ADDR_VAR 0 7
57027: PUSH
57028: LD_INT 0
57030: ST_TO_ADDR
57031: GO 57049
// min_y := y - r ;
57033: LD_ADDR_VAR 0 7
57037: PUSH
57038: LD_VAR 0 2
57042: PUSH
57043: LD_VAR 0 3
57047: MINUS
57048: ST_TO_ADDR
// max_x := x + r ;
57049: LD_ADDR_VAR 0 9
57053: PUSH
57054: LD_VAR 0 1
57058: PUSH
57059: LD_VAR 0 3
57063: PLUS
57064: ST_TO_ADDR
// max_y := y + r ;
57065: LD_ADDR_VAR 0 10
57069: PUSH
57070: LD_VAR 0 2
57074: PUSH
57075: LD_VAR 0 3
57079: PLUS
57080: ST_TO_ADDR
// for _x = min_x to max_x do
57081: LD_ADDR_VAR 0 5
57085: PUSH
57086: DOUBLE
57087: LD_VAR 0 8
57091: DEC
57092: ST_TO_ADDR
57093: LD_VAR 0 9
57097: PUSH
57098: FOR_TO
57099: IFFALSE 57200
// for _y = min_y to max_y do
57101: LD_ADDR_VAR 0 6
57105: PUSH
57106: DOUBLE
57107: LD_VAR 0 7
57111: DEC
57112: ST_TO_ADDR
57113: LD_VAR 0 10
57117: PUSH
57118: FOR_TO
57119: IFFALSE 57196
// begin if not ValidHex ( _x , _y ) then
57121: LD_VAR 0 5
57125: PPUSH
57126: LD_VAR 0 6
57130: PPUSH
57131: CALL_OW 488
57135: NOT
57136: IFFALSE 57140
// continue ;
57138: GO 57118
// if GetResourceTypeXY ( _x , _y ) then
57140: LD_VAR 0 5
57144: PPUSH
57145: LD_VAR 0 6
57149: PPUSH
57150: CALL_OW 283
57154: IFFALSE 57194
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57156: LD_ADDR_VAR 0 4
57160: PUSH
57161: LD_VAR 0 4
57165: PPUSH
57166: LD_VAR 0 4
57170: PUSH
57171: LD_INT 1
57173: PLUS
57174: PPUSH
57175: LD_VAR 0 5
57179: PUSH
57180: LD_VAR 0 6
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PPUSH
57189: CALL_OW 1
57193: ST_TO_ADDR
// end ;
57194: GO 57118
57196: POP
57197: POP
57198: GO 57098
57200: POP
57201: POP
// end ;
57202: LD_VAR 0 4
57206: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57207: LD_INT 0
57209: PPUSH
57210: PPUSH
57211: PPUSH
57212: PPUSH
57213: PPUSH
57214: PPUSH
57215: PPUSH
57216: PPUSH
// if not units then
57217: LD_VAR 0 1
57221: NOT
57222: IFFALSE 57226
// exit ;
57224: GO 57758
// result := UnitFilter ( units , [ f_ok ] ) ;
57226: LD_ADDR_VAR 0 3
57230: PUSH
57231: LD_VAR 0 1
57235: PPUSH
57236: LD_INT 50
57238: PUSH
57239: EMPTY
57240: LIST
57241: PPUSH
57242: CALL_OW 72
57246: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57247: LD_ADDR_VAR 0 8
57251: PUSH
57252: LD_VAR 0 1
57256: PUSH
57257: LD_INT 1
57259: ARRAY
57260: PPUSH
57261: CALL_OW 255
57265: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57266: LD_ADDR_VAR 0 10
57270: PUSH
57271: LD_INT 29
57273: PUSH
57274: LD_INT 91
57276: PUSH
57277: LD_INT 49
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: LIST
57284: ST_TO_ADDR
// if not result then
57285: LD_VAR 0 3
57289: NOT
57290: IFFALSE 57294
// exit ;
57292: GO 57758
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57294: LD_ADDR_VAR 0 5
57298: PUSH
57299: LD_INT 81
57301: PUSH
57302: LD_VAR 0 8
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PPUSH
57311: CALL_OW 69
57315: ST_TO_ADDR
// for i in result do
57316: LD_ADDR_VAR 0 4
57320: PUSH
57321: LD_VAR 0 3
57325: PUSH
57326: FOR_IN
57327: IFFALSE 57756
// begin tag := GetTag ( i ) + 1 ;
57329: LD_ADDR_VAR 0 9
57333: PUSH
57334: LD_VAR 0 4
57338: PPUSH
57339: CALL_OW 110
57343: PUSH
57344: LD_INT 1
57346: PLUS
57347: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57348: LD_ADDR_VAR 0 7
57352: PUSH
57353: LD_VAR 0 4
57357: PPUSH
57358: CALL_OW 250
57362: PPUSH
57363: LD_VAR 0 4
57367: PPUSH
57368: CALL_OW 251
57372: PPUSH
57373: LD_INT 4
57375: PPUSH
57376: CALL 56949 0 3
57380: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57381: LD_VAR 0 4
57385: PPUSH
57386: CALL_OW 247
57390: PUSH
57391: LD_INT 2
57393: EQUAL
57394: IFFALSE 57406
57396: PUSH
57397: LD_VAR 0 7
57401: PUSH
57402: LD_INT 2
57404: GREATER
57405: AND
57406: IFFALSE 57426
57408: PUSH
57409: LD_VAR 0 4
57413: PPUSH
57414: CALL_OW 264
57418: PUSH
57419: LD_VAR 0 10
57423: IN
57424: NOT
57425: AND
57426: IFFALSE 57465
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57428: LD_VAR 0 4
57432: PPUSH
57433: LD_VAR 0 7
57437: PUSH
57438: LD_INT 1
57440: ARRAY
57441: PUSH
57442: LD_INT 1
57444: ARRAY
57445: PPUSH
57446: LD_VAR 0 7
57450: PUSH
57451: LD_INT 1
57453: ARRAY
57454: PUSH
57455: LD_INT 2
57457: ARRAY
57458: PPUSH
57459: CALL_OW 116
57463: GO 57754
// if path > tag then
57465: LD_VAR 0 2
57469: PUSH
57470: LD_VAR 0 9
57474: GREATER
57475: IFFALSE 57683
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57477: LD_ADDR_VAR 0 6
57481: PUSH
57482: LD_VAR 0 5
57486: PPUSH
57487: LD_INT 91
57489: PUSH
57490: LD_VAR 0 4
57494: PUSH
57495: LD_INT 8
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: LIST
57502: PPUSH
57503: CALL_OW 72
57507: ST_TO_ADDR
// if nearEnemy then
57508: LD_VAR 0 6
57512: IFFALSE 57581
// begin if GetWeapon ( i ) = ru_time_lapser then
57514: LD_VAR 0 4
57518: PPUSH
57519: CALL_OW 264
57523: PUSH
57524: LD_INT 49
57526: EQUAL
57527: IFFALSE 57555
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57529: LD_VAR 0 4
57533: PPUSH
57534: LD_VAR 0 6
57538: PPUSH
57539: LD_VAR 0 4
57543: PPUSH
57544: CALL_OW 74
57548: PPUSH
57549: CALL_OW 112
57553: GO 57579
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57555: LD_VAR 0 4
57559: PPUSH
57560: LD_VAR 0 6
57564: PPUSH
57565: LD_VAR 0 4
57569: PPUSH
57570: CALL_OW 74
57574: PPUSH
57575: CALL 58839 0 2
// end else
57579: GO 57681
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57581: LD_VAR 0 4
57585: PPUSH
57586: LD_VAR 0 2
57590: PUSH
57591: LD_VAR 0 9
57595: ARRAY
57596: PUSH
57597: LD_INT 1
57599: ARRAY
57600: PPUSH
57601: LD_VAR 0 2
57605: PUSH
57606: LD_VAR 0 9
57610: ARRAY
57611: PUSH
57612: LD_INT 2
57614: ARRAY
57615: PPUSH
57616: CALL_OW 297
57620: PUSH
57621: LD_INT 6
57623: GREATER
57624: IFFALSE 57667
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57626: LD_VAR 0 4
57630: PPUSH
57631: LD_VAR 0 2
57635: PUSH
57636: LD_VAR 0 9
57640: ARRAY
57641: PUSH
57642: LD_INT 1
57644: ARRAY
57645: PPUSH
57646: LD_VAR 0 2
57650: PUSH
57651: LD_VAR 0 9
57655: ARRAY
57656: PUSH
57657: LD_INT 2
57659: ARRAY
57660: PPUSH
57661: CALL_OW 114
57665: GO 57681
// SetTag ( i , tag ) ;
57667: LD_VAR 0 4
57671: PPUSH
57672: LD_VAR 0 9
57676: PPUSH
57677: CALL_OW 109
// end else
57681: GO 57754
// if enemy then
57683: LD_VAR 0 5
57687: IFFALSE 57754
// begin if GetWeapon ( i ) = ru_time_lapser then
57689: LD_VAR 0 4
57693: PPUSH
57694: CALL_OW 264
57698: PUSH
57699: LD_INT 49
57701: EQUAL
57702: IFFALSE 57730
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57704: LD_VAR 0 4
57708: PPUSH
57709: LD_VAR 0 5
57713: PPUSH
57714: LD_VAR 0 4
57718: PPUSH
57719: CALL_OW 74
57723: PPUSH
57724: CALL_OW 112
57728: GO 57754
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57730: LD_VAR 0 4
57734: PPUSH
57735: LD_VAR 0 5
57739: PPUSH
57740: LD_VAR 0 4
57744: PPUSH
57745: CALL_OW 74
57749: PPUSH
57750: CALL 58839 0 2
// end ; end ;
57754: GO 57326
57756: POP
57757: POP
// end ;
57758: LD_VAR 0 3
57762: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57763: LD_INT 0
57765: PPUSH
57766: PPUSH
57767: PPUSH
// if not unit or IsInUnit ( unit ) then
57768: LD_VAR 0 1
57772: NOT
57773: IFTRUE 57786
57775: PUSH
57776: LD_VAR 0 1
57780: PPUSH
57781: CALL_OW 310
57785: OR
57786: IFFALSE 57790
// exit ;
57788: GO 57881
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57790: LD_ADDR_VAR 0 4
57794: PUSH
57795: LD_VAR 0 1
57799: PPUSH
57800: CALL_OW 250
57804: PPUSH
57805: LD_VAR 0 2
57809: PPUSH
57810: LD_INT 1
57812: PPUSH
57813: CALL_OW 272
57817: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57818: LD_ADDR_VAR 0 5
57822: PUSH
57823: LD_VAR 0 1
57827: PPUSH
57828: CALL_OW 251
57832: PPUSH
57833: LD_VAR 0 2
57837: PPUSH
57838: LD_INT 1
57840: PPUSH
57841: CALL_OW 273
57845: ST_TO_ADDR
// if ValidHex ( x , y ) then
57846: LD_VAR 0 4
57850: PPUSH
57851: LD_VAR 0 5
57855: PPUSH
57856: CALL_OW 488
57860: IFFALSE 57881
// ComTurnXY ( unit , x , y ) ;
57862: LD_VAR 0 1
57866: PPUSH
57867: LD_VAR 0 4
57871: PPUSH
57872: LD_VAR 0 5
57876: PPUSH
57877: CALL_OW 118
// end ;
57881: LD_VAR 0 3
57885: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57886: LD_INT 0
57888: PPUSH
57889: PPUSH
// result := false ;
57890: LD_ADDR_VAR 0 3
57894: PUSH
57895: LD_INT 0
57897: ST_TO_ADDR
// if not units then
57898: LD_VAR 0 2
57902: NOT
57903: IFFALSE 57907
// exit ;
57905: GO 57952
// for i in units do
57907: LD_ADDR_VAR 0 4
57911: PUSH
57912: LD_VAR 0 2
57916: PUSH
57917: FOR_IN
57918: IFFALSE 57950
// if See ( side , i ) then
57920: LD_VAR 0 1
57924: PPUSH
57925: LD_VAR 0 4
57929: PPUSH
57930: CALL_OW 292
57934: IFFALSE 57948
// begin result := true ;
57936: LD_ADDR_VAR 0 3
57940: PUSH
57941: LD_INT 1
57943: ST_TO_ADDR
// exit ;
57944: POP
57945: POP
57946: GO 57952
// end ;
57948: GO 57917
57950: POP
57951: POP
// end ;
57952: LD_VAR 0 3
57956: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57957: LD_INT 0
57959: PPUSH
57960: PPUSH
57961: PPUSH
57962: PPUSH
// if not unit or not points then
57963: LD_VAR 0 1
57967: NOT
57968: IFTRUE 57977
57970: PUSH
57971: LD_VAR 0 2
57975: NOT
57976: OR
57977: IFFALSE 57981
// exit ;
57979: GO 58071
// dist := 99999 ;
57981: LD_ADDR_VAR 0 5
57985: PUSH
57986: LD_INT 99999
57988: ST_TO_ADDR
// for i in points do
57989: LD_ADDR_VAR 0 4
57993: PUSH
57994: LD_VAR 0 2
57998: PUSH
57999: FOR_IN
58000: IFFALSE 58069
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58002: LD_ADDR_VAR 0 6
58006: PUSH
58007: LD_VAR 0 1
58011: PPUSH
58012: LD_VAR 0 4
58016: PUSH
58017: LD_INT 1
58019: ARRAY
58020: PPUSH
58021: LD_VAR 0 4
58025: PUSH
58026: LD_INT 2
58028: ARRAY
58029: PPUSH
58030: CALL_OW 297
58034: ST_TO_ADDR
// if tmpDist < dist then
58035: LD_VAR 0 6
58039: PUSH
58040: LD_VAR 0 5
58044: LESS
58045: IFFALSE 58067
// begin result := i ;
58047: LD_ADDR_VAR 0 3
58051: PUSH
58052: LD_VAR 0 4
58056: ST_TO_ADDR
// dist := tmpDist ;
58057: LD_ADDR_VAR 0 5
58061: PUSH
58062: LD_VAR 0 6
58066: ST_TO_ADDR
// end ; end ;
58067: GO 57999
58069: POP
58070: POP
// end ;
58071: LD_VAR 0 3
58075: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
58076: LD_INT 0
58078: PPUSH
// uc_side := side ;
58079: LD_ADDR_OWVAR 20
58083: PUSH
58084: LD_VAR 0 1
58088: ST_TO_ADDR
// uc_nation := 3 ;
58089: LD_ADDR_OWVAR 21
58093: PUSH
58094: LD_INT 3
58096: ST_TO_ADDR
// vc_chassis := 25 ;
58097: LD_ADDR_OWVAR 37
58101: PUSH
58102: LD_INT 25
58104: ST_TO_ADDR
// vc_engine := engine_siberite ;
58105: LD_ADDR_OWVAR 39
58109: PUSH
58110: LD_INT 3
58112: ST_TO_ADDR
// vc_control := control_computer ;
58113: LD_ADDR_OWVAR 38
58117: PUSH
58118: LD_INT 3
58120: ST_TO_ADDR
// vc_weapon := 59 ;
58121: LD_ADDR_OWVAR 40
58125: PUSH
58126: LD_INT 59
58128: ST_TO_ADDR
// result := CreateVehicle ;
58129: LD_ADDR_VAR 0 5
58133: PUSH
58134: CALL_OW 45
58138: ST_TO_ADDR
// SetDir ( result , d ) ;
58139: LD_VAR 0 5
58143: PPUSH
58144: LD_VAR 0 4
58148: PPUSH
58149: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58153: LD_VAR 0 5
58157: PPUSH
58158: LD_VAR 0 2
58162: PPUSH
58163: LD_VAR 0 3
58167: PPUSH
58168: LD_INT 0
58170: PPUSH
58171: CALL_OW 48
// end ;
58175: LD_VAR 0 5
58179: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58180: LD_INT 0
58182: PPUSH
58183: PPUSH
58184: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58185: LD_ADDR_VAR 0 2
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58208: LD_VAR 0 1
58212: NOT
58213: IFTRUE 58246
58215: PUSH
58216: LD_VAR 0 1
58220: PPUSH
58221: CALL_OW 264
58225: PUSH
58226: LD_INT 12
58228: PUSH
58229: LD_INT 51
58231: PUSH
58232: LD_INT 32
58234: PUSH
58235: LD_INT 89
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: IN
58244: NOT
58245: OR
58246: IFFALSE 58250
// exit ;
58248: GO 58348
// for i := 1 to 3 do
58250: LD_ADDR_VAR 0 3
58254: PUSH
58255: DOUBLE
58256: LD_INT 1
58258: DEC
58259: ST_TO_ADDR
58260: LD_INT 3
58262: PUSH
58263: FOR_TO
58264: IFFALSE 58346
// begin tmp := GetCargo ( cargo , i ) ;
58266: LD_ADDR_VAR 0 4
58270: PUSH
58271: LD_VAR 0 1
58275: PPUSH
58276: LD_VAR 0 3
58280: PPUSH
58281: CALL_OW 289
58285: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58286: LD_ADDR_VAR 0 2
58290: PUSH
58291: LD_VAR 0 2
58295: PPUSH
58296: LD_VAR 0 3
58300: PPUSH
58301: LD_VAR 0 4
58305: PPUSH
58306: CALL_OW 1
58310: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58311: LD_ADDR_VAR 0 2
58315: PUSH
58316: LD_VAR 0 2
58320: PPUSH
58321: LD_INT 4
58323: PPUSH
58324: LD_VAR 0 2
58328: PUSH
58329: LD_INT 4
58331: ARRAY
58332: PUSH
58333: LD_VAR 0 4
58337: PLUS
58338: PPUSH
58339: CALL_OW 1
58343: ST_TO_ADDR
// end ;
58344: GO 58263
58346: POP
58347: POP
// end ;
58348: LD_VAR 0 2
58352: RET
// export function Length ( array ) ; begin
58353: LD_INT 0
58355: PPUSH
// result := array + 0 ;
58356: LD_ADDR_VAR 0 2
58360: PUSH
58361: LD_VAR 0 1
58365: PUSH
58366: LD_INT 0
58368: PLUS
58369: ST_TO_ADDR
// end ;
58370: LD_VAR 0 2
58374: RET
// export function PrepareArray ( array ) ; begin
58375: LD_INT 0
58377: PPUSH
// result := array diff 0 ;
58378: LD_ADDR_VAR 0 2
58382: PUSH
58383: LD_VAR 0 1
58387: PUSH
58388: LD_INT 0
58390: DIFF
58391: ST_TO_ADDR
// if not result [ 1 ] then
58392: LD_VAR 0 2
58396: PUSH
58397: LD_INT 1
58399: ARRAY
58400: NOT
58401: IFFALSE 58421
// result := Delete ( result , 1 ) ;
58403: LD_ADDR_VAR 0 2
58407: PUSH
58408: LD_VAR 0 2
58412: PPUSH
58413: LD_INT 1
58415: PPUSH
58416: CALL_OW 3
58420: ST_TO_ADDR
// end ;
58421: LD_VAR 0 2
58425: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58426: LD_INT 0
58428: PPUSH
58429: PPUSH
58430: PPUSH
58431: PPUSH
// sibRocketRange := 25 ;
58432: LD_ADDR_VAR 0 6
58436: PUSH
58437: LD_INT 25
58439: ST_TO_ADDR
// result := false ;
58440: LD_ADDR_VAR 0 4
58444: PUSH
58445: LD_INT 0
58447: ST_TO_ADDR
// for i := 0 to 5 do
58448: LD_ADDR_VAR 0 5
58452: PUSH
58453: DOUBLE
58454: LD_INT 0
58456: DEC
58457: ST_TO_ADDR
58458: LD_INT 5
58460: PUSH
58461: FOR_TO
58462: IFFALSE 58529
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58464: LD_VAR 0 1
58468: PPUSH
58469: LD_VAR 0 5
58473: PPUSH
58474: LD_VAR 0 6
58478: PPUSH
58479: CALL_OW 272
58483: PPUSH
58484: LD_VAR 0 2
58488: PPUSH
58489: LD_VAR 0 5
58493: PPUSH
58494: LD_VAR 0 6
58498: PPUSH
58499: CALL_OW 273
58503: PPUSH
58504: LD_VAR 0 3
58508: PPUSH
58509: CALL_OW 309
58513: IFFALSE 58527
// begin result := true ;
58515: LD_ADDR_VAR 0 4
58519: PUSH
58520: LD_INT 1
58522: ST_TO_ADDR
// exit ;
58523: POP
58524: POP
58525: GO 58531
// end ;
58527: GO 58461
58529: POP
58530: POP
// end ;
58531: LD_VAR 0 4
58535: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58536: LD_INT 0
58538: PPUSH
58539: PPUSH
58540: PPUSH
// if btype = b_depot then
58541: LD_VAR 0 2
58545: PUSH
58546: LD_INT 0
58548: EQUAL
58549: IFFALSE 58561
// begin result := true ;
58551: LD_ADDR_VAR 0 3
58555: PUSH
58556: LD_INT 1
58558: ST_TO_ADDR
// exit ;
58559: GO 58681
// end ; pom := GetBase ( depot ) ;
58561: LD_ADDR_VAR 0 4
58565: PUSH
58566: LD_VAR 0 1
58570: PPUSH
58571: CALL_OW 274
58575: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58576: LD_ADDR_VAR 0 5
58580: PUSH
58581: LD_VAR 0 2
58585: PPUSH
58586: LD_VAR 0 1
58590: PPUSH
58591: CALL_OW 248
58595: PPUSH
58596: CALL_OW 450
58600: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58601: LD_ADDR_VAR 0 3
58605: PUSH
58606: LD_VAR 0 4
58610: PPUSH
58611: LD_INT 1
58613: PPUSH
58614: CALL_OW 275
58618: PUSH
58619: LD_VAR 0 5
58623: PUSH
58624: LD_INT 1
58626: ARRAY
58627: GREATEREQUAL
58628: IFFALSE 58654
58630: PUSH
58631: LD_VAR 0 4
58635: PPUSH
58636: LD_INT 2
58638: PPUSH
58639: CALL_OW 275
58643: PUSH
58644: LD_VAR 0 5
58648: PUSH
58649: LD_INT 2
58651: ARRAY
58652: GREATEREQUAL
58653: AND
58654: IFFALSE 58680
58656: PUSH
58657: LD_VAR 0 4
58661: PPUSH
58662: LD_INT 3
58664: PPUSH
58665: CALL_OW 275
58669: PUSH
58670: LD_VAR 0 5
58674: PUSH
58675: LD_INT 3
58677: ARRAY
58678: GREATEREQUAL
58679: AND
58680: ST_TO_ADDR
// end ;
58681: LD_VAR 0 3
58685: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58686: LD_INT 0
58688: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58689: LD_VAR 0 1
58693: PPUSH
58694: LD_VAR 0 2
58698: PPUSH
58699: LD_INT 0
58701: PPUSH
58702: LD_INT 0
58704: PPUSH
58705: LD_INT 1
58707: PPUSH
58708: LD_INT 0
58710: PPUSH
58711: CALL_OW 587
// end ;
58715: LD_VAR 0 3
58719: RET
// export function CenterOnNow ( unit ) ; begin
58720: LD_INT 0
58722: PPUSH
// result := IsInUnit ( unit ) ;
58723: LD_ADDR_VAR 0 2
58727: PUSH
58728: LD_VAR 0 1
58732: PPUSH
58733: CALL_OW 310
58737: ST_TO_ADDR
// if not result then
58738: LD_VAR 0 2
58742: NOT
58743: IFFALSE 58755
// result := unit ;
58745: LD_ADDR_VAR 0 2
58749: PUSH
58750: LD_VAR 0 1
58754: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58755: LD_VAR 0 1
58759: PPUSH
58760: CALL_OW 87
// end ;
58764: LD_VAR 0 2
58768: RET
// export function ComMoveHex ( unit , hex ) ; begin
58769: LD_INT 0
58771: PPUSH
// if not hex then
58772: LD_VAR 0 2
58776: NOT
58777: IFFALSE 58781
// exit ;
58779: GO 58834
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58781: LD_VAR 0 2
58785: PUSH
58786: LD_INT 1
58788: ARRAY
58789: PPUSH
58790: LD_VAR 0 2
58794: PUSH
58795: LD_INT 2
58797: ARRAY
58798: PPUSH
58799: CALL_OW 428
58803: IFFALSE 58807
// exit ;
58805: GO 58834
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58807: LD_VAR 0 1
58811: PPUSH
58812: LD_VAR 0 2
58816: PUSH
58817: LD_INT 1
58819: ARRAY
58820: PPUSH
58821: LD_VAR 0 2
58825: PUSH
58826: LD_INT 2
58828: ARRAY
58829: PPUSH
58830: CALL_OW 111
// end ;
58834: LD_VAR 0 3
58838: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58839: LD_INT 0
58841: PPUSH
58842: PPUSH
58843: PPUSH
// if not unit or not enemy then
58844: LD_VAR 0 1
58848: NOT
58849: IFTRUE 58858
58851: PUSH
58852: LD_VAR 0 2
58856: NOT
58857: OR
58858: IFFALSE 58862
// exit ;
58860: GO 58988
// x := GetX ( enemy ) ;
58862: LD_ADDR_VAR 0 4
58866: PUSH
58867: LD_VAR 0 2
58871: PPUSH
58872: CALL_OW 250
58876: ST_TO_ADDR
// y := GetY ( enemy ) ;
58877: LD_ADDR_VAR 0 5
58881: PUSH
58882: LD_VAR 0 2
58886: PPUSH
58887: CALL_OW 251
58891: ST_TO_ADDR
// if ValidHex ( x , y ) then
58892: LD_VAR 0 4
58896: PPUSH
58897: LD_VAR 0 5
58901: PPUSH
58902: CALL_OW 488
58906: IFFALSE 58988
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58908: LD_VAR 0 2
58912: PPUSH
58913: CALL_OW 247
58917: PUSH
58918: LD_INT 3
58920: PUSH
58921: LD_INT 2
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: IN
58928: IFTRUE 58951
58930: PUSH
58931: LD_VAR 0 1
58935: PPUSH
58936: CALL_OW 255
58940: PPUSH
58941: LD_VAR 0 2
58945: PPUSH
58946: CALL_OW 292
58950: OR
58951: IFFALSE 58969
// ComAttackUnit ( unit , enemy ) else
58953: LD_VAR 0 1
58957: PPUSH
58958: LD_VAR 0 2
58962: PPUSH
58963: CALL_OW 115
58967: GO 58988
// ComAgressiveMove ( unit , x , y ) ;
58969: LD_VAR 0 1
58973: PPUSH
58974: LD_VAR 0 4
58978: PPUSH
58979: LD_VAR 0 5
58983: PPUSH
58984: CALL_OW 114
// end ;
58988: LD_VAR 0 3
58992: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58993: LD_INT 0
58995: PPUSH
58996: PPUSH
58997: PPUSH
// list := AreaToList ( area , 0 ) ;
58998: LD_ADDR_VAR 0 5
59002: PUSH
59003: LD_VAR 0 1
59007: PPUSH
59008: LD_INT 0
59010: PPUSH
59011: CALL_OW 517
59015: ST_TO_ADDR
// if not list then
59016: LD_VAR 0 5
59020: NOT
59021: IFFALSE 59025
// exit ;
59023: GO 59155
// if all then
59025: LD_VAR 0 2
59029: IFFALSE 59117
// begin for i := 1 to list [ 1 ] do
59031: LD_ADDR_VAR 0 4
59035: PUSH
59036: DOUBLE
59037: LD_INT 1
59039: DEC
59040: ST_TO_ADDR
59041: LD_VAR 0 5
59045: PUSH
59046: LD_INT 1
59048: ARRAY
59049: PUSH
59050: FOR_TO
59051: IFFALSE 59113
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
59053: LD_ADDR_VAR 0 3
59057: PUSH
59058: LD_VAR 0 3
59062: PPUSH
59063: LD_VAR 0 3
59067: PUSH
59068: LD_INT 1
59070: PLUS
59071: PPUSH
59072: LD_VAR 0 5
59076: PUSH
59077: LD_INT 1
59079: ARRAY
59080: PUSH
59081: LD_VAR 0 4
59085: ARRAY
59086: PUSH
59087: LD_VAR 0 5
59091: PUSH
59092: LD_INT 2
59094: ARRAY
59095: PUSH
59096: LD_VAR 0 4
59100: ARRAY
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PPUSH
59106: CALL_OW 1
59110: ST_TO_ADDR
59111: GO 59050
59113: POP
59114: POP
// exit ;
59115: GO 59155
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
59117: LD_ADDR_VAR 0 3
59121: PUSH
59122: LD_VAR 0 5
59126: PUSH
59127: LD_INT 1
59129: ARRAY
59130: PUSH
59131: LD_INT 1
59133: ARRAY
59134: PUSH
59135: LD_VAR 0 5
59139: PUSH
59140: LD_INT 2
59142: ARRAY
59143: PUSH
59144: LD_INT 1
59146: ARRAY
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: EMPTY
59153: LIST
59154: ST_TO_ADDR
// end ;
59155: LD_VAR 0 3
59159: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
59160: LD_INT 0
59162: PPUSH
59163: PPUSH
// list := AreaToList ( area , 0 ) ;
59164: LD_ADDR_VAR 0 4
59168: PUSH
59169: LD_VAR 0 1
59173: PPUSH
59174: LD_INT 0
59176: PPUSH
59177: CALL_OW 517
59181: ST_TO_ADDR
// if not list then
59182: LD_VAR 0 4
59186: NOT
59187: IFFALSE 59191
// exit ;
59189: GO 59232
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59191: LD_ADDR_VAR 0 3
59195: PUSH
59196: LD_VAR 0 4
59200: PUSH
59201: LD_INT 1
59203: ARRAY
59204: PUSH
59205: LD_INT 1
59207: ARRAY
59208: PUSH
59209: LD_VAR 0 4
59213: PUSH
59214: LD_INT 2
59216: ARRAY
59217: PUSH
59218: LD_INT 1
59220: ARRAY
59221: PUSH
59222: LD_VAR 0 2
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: LIST
59231: ST_TO_ADDR
// end ;
59232: LD_VAR 0 3
59236: RET
// export function First ( array ) ; begin
59237: LD_INT 0
59239: PPUSH
// if not array then
59240: LD_VAR 0 1
59244: NOT
59245: IFFALSE 59249
// exit ;
59247: GO 59263
// result := array [ 1 ] ;
59249: LD_ADDR_VAR 0 2
59253: PUSH
59254: LD_VAR 0 1
59258: PUSH
59259: LD_INT 1
59261: ARRAY
59262: ST_TO_ADDR
// end ;
59263: LD_VAR 0 2
59267: RET
// export function Last ( array ) ; begin
59268: LD_INT 0
59270: PPUSH
// if not array then
59271: LD_VAR 0 1
59275: NOT
59276: IFFALSE 59280
// exit ;
59278: GO 59296
// result := array [ array ] ;
59280: LD_ADDR_VAR 0 2
59284: PUSH
59285: LD_VAR 0 1
59289: PUSH
59290: LD_VAR 0 1
59294: ARRAY
59295: ST_TO_ADDR
// end ;
59296: LD_VAR 0 2
59300: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59301: LD_INT 0
59303: PPUSH
59304: PPUSH
// result := [ ] ;
59305: LD_ADDR_VAR 0 5
59309: PUSH
59310: EMPTY
59311: ST_TO_ADDR
// if not array then
59312: LD_VAR 0 1
59316: NOT
59317: IFFALSE 59321
// exit ;
59319: GO 59433
// for i := 1 to array do
59321: LD_ADDR_VAR 0 6
59325: PUSH
59326: DOUBLE
59327: LD_INT 1
59329: DEC
59330: ST_TO_ADDR
59331: LD_VAR 0 1
59335: PUSH
59336: FOR_TO
59337: IFFALSE 59431
// if array [ i ] [ index ] = value then
59339: LD_VAR 0 1
59343: PUSH
59344: LD_VAR 0 6
59348: ARRAY
59349: PUSH
59350: LD_VAR 0 2
59354: ARRAY
59355: PUSH
59356: LD_VAR 0 3
59360: EQUAL
59361: IFFALSE 59429
// begin if indexColumn then
59363: LD_VAR 0 4
59367: IFFALSE 59403
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59369: LD_ADDR_VAR 0 5
59373: PUSH
59374: LD_VAR 0 5
59378: PPUSH
59379: LD_VAR 0 1
59383: PUSH
59384: LD_VAR 0 6
59388: ARRAY
59389: PUSH
59390: LD_VAR 0 4
59394: ARRAY
59395: PPUSH
59396: CALL 54441 0 2
59400: ST_TO_ADDR
59401: GO 59429
// result := Join ( result , array [ i ] ) ;
59403: LD_ADDR_VAR 0 5
59407: PUSH
59408: LD_VAR 0 5
59412: PPUSH
59413: LD_VAR 0 1
59417: PUSH
59418: LD_VAR 0 6
59422: ARRAY
59423: PPUSH
59424: CALL 54441 0 2
59428: ST_TO_ADDR
// end ;
59429: GO 59336
59431: POP
59432: POP
// end ;
59433: LD_VAR 0 5
59437: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59438: LD_INT 0
59440: PPUSH
// if not vehicles or not parkingPoint then
59441: LD_VAR 0 1
59445: NOT
59446: IFTRUE 59455
59448: PUSH
59449: LD_VAR 0 2
59453: NOT
59454: OR
59455: IFFALSE 59459
// exit ;
59457: GO 59557
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59459: LD_ADDR_VAR 0 1
59463: PUSH
59464: LD_VAR 0 1
59468: PPUSH
59469: LD_INT 50
59471: PUSH
59472: EMPTY
59473: LIST
59474: PUSH
59475: LD_INT 3
59477: PUSH
59478: LD_INT 92
59480: PUSH
59481: LD_VAR 0 2
59485: PUSH
59486: LD_INT 1
59488: ARRAY
59489: PUSH
59490: LD_VAR 0 2
59494: PUSH
59495: LD_INT 2
59497: ARRAY
59498: PUSH
59499: LD_INT 8
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PPUSH
59516: CALL_OW 72
59520: ST_TO_ADDR
// if not vehicles then
59521: LD_VAR 0 1
59525: NOT
59526: IFFALSE 59530
// exit ;
59528: GO 59557
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59530: LD_VAR 0 1
59534: PPUSH
59535: LD_VAR 0 2
59539: PUSH
59540: LD_INT 1
59542: ARRAY
59543: PPUSH
59544: LD_VAR 0 2
59548: PUSH
59549: LD_INT 2
59551: ARRAY
59552: PPUSH
59553: CALL_OW 111
// end ;
59557: LD_VAR 0 3
59561: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59562: LD_INT 0
59564: PPUSH
59565: PPUSH
59566: PPUSH
// if not side or not area then
59567: LD_VAR 0 1
59571: NOT
59572: IFTRUE 59581
59574: PUSH
59575: LD_VAR 0 2
59579: NOT
59580: OR
59581: IFFALSE 59585
// exit ;
59583: GO 59704
// tmp := AreaToList ( area , 0 ) ;
59585: LD_ADDR_VAR 0 5
59589: PUSH
59590: LD_VAR 0 2
59594: PPUSH
59595: LD_INT 0
59597: PPUSH
59598: CALL_OW 517
59602: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59603: LD_ADDR_VAR 0 4
59607: PUSH
59608: DOUBLE
59609: LD_INT 1
59611: DEC
59612: ST_TO_ADDR
59613: LD_VAR 0 5
59617: PUSH
59618: LD_INT 1
59620: ARRAY
59621: PUSH
59622: FOR_TO
59623: IFFALSE 59702
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59625: LD_VAR 0 5
59629: PUSH
59630: LD_INT 1
59632: ARRAY
59633: PUSH
59634: LD_VAR 0 4
59638: ARRAY
59639: PPUSH
59640: LD_VAR 0 5
59644: PUSH
59645: LD_INT 2
59647: ARRAY
59648: PUSH
59649: LD_VAR 0 4
59653: ARRAY
59654: PPUSH
59655: CALL_OW 351
59659: IFFALSE 59700
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59661: LD_VAR 0 5
59665: PUSH
59666: LD_INT 1
59668: ARRAY
59669: PUSH
59670: LD_VAR 0 4
59674: ARRAY
59675: PPUSH
59676: LD_VAR 0 5
59680: PUSH
59681: LD_INT 2
59683: ARRAY
59684: PUSH
59685: LD_VAR 0 4
59689: ARRAY
59690: PPUSH
59691: LD_VAR 0 1
59695: PPUSH
59696: CALL_OW 244
// end ;
59700: GO 59622
59702: POP
59703: POP
// end ;
59704: LD_VAR 0 3
59708: RET
// export function UniqueArray ( array ) ; var i ; begin
59709: LD_INT 0
59711: PPUSH
59712: PPUSH
// result := [ ] ;
59713: LD_ADDR_VAR 0 2
59717: PUSH
59718: EMPTY
59719: ST_TO_ADDR
// if not array then
59720: LD_VAR 0 1
59724: NOT
59725: IFFALSE 59729
// exit ;
59727: GO 59790
// for i := 1 to array do
59729: LD_ADDR_VAR 0 3
59733: PUSH
59734: DOUBLE
59735: LD_INT 1
59737: DEC
59738: ST_TO_ADDR
59739: LD_VAR 0 1
59743: PUSH
59744: FOR_TO
59745: IFFALSE 59788
// if not array [ i ] in result then
59747: LD_VAR 0 1
59751: PUSH
59752: LD_VAR 0 3
59756: ARRAY
59757: PUSH
59758: LD_VAR 0 2
59762: IN
59763: NOT
59764: IFFALSE 59786
// result := Join ( result , i ) ;
59766: LD_ADDR_VAR 0 2
59770: PUSH
59771: LD_VAR 0 2
59775: PPUSH
59776: LD_VAR 0 3
59780: PPUSH
59781: CALL 54441 0 2
59785: ST_TO_ADDR
59786: GO 59744
59788: POP
59789: POP
// end ; end_of_file
59790: LD_VAR 0 2
59794: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
59795: LD_VAR 0 1
59799: PUSH
59800: LD_INT 200
59802: DOUBLE
59803: GREATEREQUAL
59804: IFFALSE 59812
59806: LD_INT 299
59808: DOUBLE
59809: LESSEQUAL
59810: IFTRUE 59814
59812: GO 59846
59814: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
59815: LD_VAR 0 1
59819: PPUSH
59820: LD_VAR 0 2
59824: PPUSH
59825: LD_VAR 0 3
59829: PPUSH
59830: LD_VAR 0 4
59834: PPUSH
59835: LD_VAR 0 5
59839: PPUSH
59840: CALL 60708 0 5
59844: GO 59923
59846: LD_INT 300
59848: DOUBLE
59849: GREATEREQUAL
59850: IFFALSE 59858
59852: LD_INT 399
59854: DOUBLE
59855: LESSEQUAL
59856: IFTRUE 59860
59858: GO 59922
59860: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
59861: LD_VAR 0 1
59865: PPUSH
59866: LD_VAR 0 2
59870: PPUSH
59871: LD_VAR 0 3
59875: PPUSH
59876: LD_VAR 0 4
59880: PPUSH
59881: LD_VAR 0 5
59885: PPUSH
59886: LD_VAR 0 6
59890: PPUSH
59891: LD_VAR 0 7
59895: PPUSH
59896: LD_VAR 0 8
59900: PPUSH
59901: LD_VAR 0 9
59905: PPUSH
59906: LD_VAR 0 10
59910: PPUSH
59911: LD_VAR 0 11
59915: PPUSH
59916: CALL 67136 0 11
59920: GO 59923
59922: POP
// end ;
59923: PPOPN 11
59925: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
59926: LD_VAR 0 1
59930: PPUSH
59931: LD_VAR 0 2
59935: PPUSH
59936: LD_VAR 0 3
59940: PPUSH
59941: LD_VAR 0 4
59945: PPUSH
59946: LD_VAR 0 5
59950: PPUSH
59951: CALL 60008 0 5
// end ; end_of_file
59955: PPOPN 5
59957: END
// export function SOS_UnitDestroyed ( un ) ; begin
59958: LD_INT 0
59960: PPUSH
// ComRadiation ( un ) ;
59961: LD_VAR 0 1
59965: PPUSH
59966: CALL 61128 0 1
// end ;
59970: LD_VAR 0 2
59974: RET
// export function SOS_UnitKamikazed ( un ) ; begin
59975: LD_INT 0
59977: PPUSH
// ComRadiation ( un ) ;
59978: LD_VAR 0 1
59982: PPUSH
59983: CALL 61128 0 1
// end ;
59987: LD_VAR 0 2
59991: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59992: LD_INT 0
59994: PPUSH
// end ;
59995: LD_VAR 0 4
59999: RET
// export function SOS_Command ( cmd ) ; begin
60000: LD_INT 0
60002: PPUSH
// end ;
60003: LD_VAR 0 2
60007: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
60008: LD_INT 0
60010: PPUSH
// end ;
60011: LD_VAR 0 6
60015: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
60016: LD_INT 0
60018: PPUSH
60019: PPUSH
60020: PPUSH
60021: PPUSH
60022: PPUSH
// if not vehicle or not factory then
60023: LD_VAR 0 1
60027: NOT
60028: IFTRUE 60037
60030: PUSH
60031: LD_VAR 0 2
60035: NOT
60036: OR
60037: IFFALSE 60041
// exit ;
60039: GO 60703
// weapon := GetWeapon ( vehicle ) ;
60041: LD_ADDR_VAR 0 7
60045: PUSH
60046: LD_VAR 0 1
60050: PPUSH
60051: CALL_OW 264
60055: ST_TO_ADDR
// if weapon = ar_miner then
60056: LD_VAR 0 7
60060: PUSH
60061: LD_INT 81
60063: EQUAL
60064: IFFALSE 60121
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
60066: LD_ADDR_EXP 58
60070: PUSH
60071: LD_EXP 58
60075: PPUSH
60076: LD_EXP 58
60080: PUSH
60081: LD_INT 1
60083: PLUS
60084: PPUSH
60085: LD_VAR 0 1
60089: PPUSH
60090: CALL_OW 1
60094: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60095: LD_ADDR_EXP 59
60099: PUSH
60100: LD_EXP 59
60104: PPUSH
60105: LD_EXP 59
60109: PUSH
60110: LD_INT 1
60112: PLUS
60113: PPUSH
60114: EMPTY
60115: PPUSH
60116: CALL_OW 1
60120: ST_TO_ADDR
// end ; if not factoryWaypoints then
60121: LD_EXP 61
60125: NOT
60126: IFFALSE 60130
// exit ;
60128: GO 60703
// for i := 1 to Count ( factoryWaypoints ) do
60130: LD_ADDR_VAR 0 4
60134: PUSH
60135: DOUBLE
60136: LD_INT 1
60138: DEC
60139: ST_TO_ADDR
60140: LD_EXP 61
60144: PPUSH
60145: CALL 18465 0 1
60149: PUSH
60150: FOR_TO
60151: IFFALSE 60701
// if factoryWaypoints [ i ] [ 2 ] = factory then
60153: LD_EXP 61
60157: PUSH
60158: LD_VAR 0 4
60162: ARRAY
60163: PUSH
60164: LD_INT 2
60166: ARRAY
60167: PUSH
60168: LD_VAR 0 2
60172: EQUAL
60173: IFFALSE 60699
// begin if GetControl ( vehicle ) = control_manual then
60175: LD_VAR 0 1
60179: PPUSH
60180: CALL_OW 263
60184: PUSH
60185: LD_INT 1
60187: EQUAL
60188: IFFALSE 60552
// begin driver := IsDrivenBy ( vehicle ) ;
60190: LD_ADDR_VAR 0 5
60194: PUSH
60195: LD_VAR 0 1
60199: PPUSH
60200: CALL_OW 311
60204: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
60205: LD_VAR 0 5
60209: PUSH
60210: LD_EXP 62
60214: IN
60215: IFTRUE 60229
60217: PUSH
60218: LD_VAR 0 1
60222: PUSH
60223: LD_EXP 62
60227: IN
60228: OR
60229: IFFALSE 60235
// exit ;
60231: POP
60232: POP
60233: GO 60703
// if not HasTask ( driver ) then
60235: LD_VAR 0 5
60239: PPUSH
60240: CALL_OW 314
60244: NOT
60245: IFFALSE 60550
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
60247: LD_ADDR_EXP 62
60251: PUSH
60252: LD_EXP 62
60256: PPUSH
60257: LD_VAR 0 5
60261: PPUSH
60262: CALL 54441 0 2
60266: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
60267: LD_ADDR_EXP 62
60271: PUSH
60272: LD_EXP 62
60276: PPUSH
60277: LD_VAR 0 1
60281: PPUSH
60282: CALL 54441 0 2
60286: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60287: LD_ADDR_VAR 0 6
60291: PUSH
60292: LD_EXP 61
60296: PUSH
60297: LD_VAR 0 4
60301: ARRAY
60302: PUSH
60303: LD_INT 3
60305: ARRAY
60306: PPUSH
60307: LD_EXP 61
60311: PUSH
60312: LD_VAR 0 4
60316: ARRAY
60317: PUSH
60318: LD_INT 4
60320: ARRAY
60321: PPUSH
60322: CALL_OW 428
60326: ST_TO_ADDR
// if hex then
60327: LD_VAR 0 6
60331: IFFALSE 60349
// ComMoveUnit ( driver , hex ) else
60333: LD_VAR 0 5
60337: PPUSH
60338: LD_VAR 0 6
60342: PPUSH
60343: CALL_OW 112
60347: GO 60433
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
60349: LD_VAR 0 1
60353: PPUSH
60354: LD_EXP 61
60358: PUSH
60359: LD_VAR 0 4
60363: ARRAY
60364: PUSH
60365: LD_INT 3
60367: ARRAY
60368: PPUSH
60369: LD_EXP 61
60373: PUSH
60374: LD_VAR 0 4
60378: ARRAY
60379: PUSH
60380: LD_INT 4
60382: ARRAY
60383: PPUSH
60384: CALL_OW 297
60388: PUSH
60389: LD_INT 0
60391: GREATER
60392: IFFALSE 60433
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60394: LD_VAR 0 5
60398: PPUSH
60399: LD_EXP 61
60403: PUSH
60404: LD_VAR 0 4
60408: ARRAY
60409: PUSH
60410: LD_INT 3
60412: ARRAY
60413: PPUSH
60414: LD_EXP 61
60418: PUSH
60419: LD_VAR 0 4
60423: ARRAY
60424: PUSH
60425: LD_INT 4
60427: ARRAY
60428: PPUSH
60429: CALL_OW 111
// AddComExitVehicle ( driver ) ;
60433: LD_VAR 0 5
60437: PPUSH
60438: CALL_OW 181
// if Multiplayer then
60442: LD_OWVAR 4
60446: IFFALSE 60495
// begin repeat wait ( 10 ) ;
60448: LD_INT 10
60450: PPUSH
60451: CALL_OW 67
// until not IsInUnit ( driver ) ;
60455: LD_VAR 0 5
60459: PPUSH
60460: CALL_OW 310
60464: NOT
60465: IFFALSE 60448
// if not HasTask ( driver ) then
60467: LD_VAR 0 5
60471: PPUSH
60472: CALL_OW 314
60476: NOT
60477: IFFALSE 60493
// ComEnterUnit ( driver , factory ) ;
60479: LD_VAR 0 5
60483: PPUSH
60484: LD_VAR 0 2
60488: PPUSH
60489: CALL_OW 120
// end else
60493: GO 60509
// AddComEnterUnit ( driver , factory ) ;
60495: LD_VAR 0 5
60499: PPUSH
60500: LD_VAR 0 2
60504: PPUSH
60505: CALL_OW 180
// wait ( 0 0$1 ) ;
60509: LD_INT 35
60511: PPUSH
60512: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
60516: LD_ADDR_EXP 62
60520: PUSH
60521: LD_EXP 62
60525: PUSH
60526: LD_VAR 0 5
60530: DIFF
60531: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
60532: LD_ADDR_EXP 62
60536: PUSH
60537: LD_EXP 62
60541: PUSH
60542: LD_VAR 0 1
60546: DIFF
60547: ST_TO_ADDR
// break ;
60548: GO 60701
// end ; end else
60550: GO 60699
// if GetControl ( vehicle ) = control_remote then
60552: LD_VAR 0 1
60556: PPUSH
60557: CALL_OW 263
60561: PUSH
60562: LD_INT 2
60564: EQUAL
60565: IFFALSE 60651
// begin wait ( 0 0$2 ) ;
60567: LD_INT 70
60569: PPUSH
60570: CALL_OW 67
// repeat wait ( 10 ) ;
60574: LD_INT 10
60576: PPUSH
60577: CALL_OW 67
// Connect ( vehicle ) ;
60581: LD_VAR 0 1
60585: PPUSH
60586: CALL 24743 0 1
// until IsControledBy ( vehicle ) ;
60590: LD_VAR 0 1
60594: PPUSH
60595: CALL_OW 312
60599: IFFALSE 60574
// wait ( 10 ) ;
60601: LD_INT 10
60603: PPUSH
60604: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60608: LD_VAR 0 1
60612: PPUSH
60613: LD_EXP 61
60617: PUSH
60618: LD_VAR 0 4
60622: ARRAY
60623: PUSH
60624: LD_INT 3
60626: ARRAY
60627: PPUSH
60628: LD_EXP 61
60632: PUSH
60633: LD_VAR 0 4
60637: ARRAY
60638: PUSH
60639: LD_INT 4
60641: ARRAY
60642: PPUSH
60643: CALL_OW 111
// break ;
60647: GO 60701
// end else
60649: GO 60699
// begin wait ( 0 0$3 ) ;
60651: LD_INT 105
60653: PPUSH
60654: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60658: LD_VAR 0 1
60662: PPUSH
60663: LD_EXP 61
60667: PUSH
60668: LD_VAR 0 4
60672: ARRAY
60673: PUSH
60674: LD_INT 3
60676: ARRAY
60677: PPUSH
60678: LD_EXP 61
60682: PUSH
60683: LD_VAR 0 4
60687: ARRAY
60688: PUSH
60689: LD_INT 4
60691: ARRAY
60692: PPUSH
60693: CALL_OW 111
// break ;
60697: GO 60701
// end ; end ;
60699: GO 60150
60701: POP
60702: POP
// end ;
60703: LD_VAR 0 3
60707: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60708: LD_INT 0
60710: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60711: LD_VAR 0 1
60715: PUSH
60716: LD_INT 250
60718: EQUAL
60719: IFFALSE 60736
60721: PUSH
60722: LD_VAR 0 2
60726: PPUSH
60727: CALL_OW 264
60731: PUSH
60732: LD_INT 81
60734: EQUAL
60735: AND
60736: IFFALSE 60757
// MinerPlaceMine ( unit , x , y ) ;
60738: LD_VAR 0 2
60742: PPUSH
60743: LD_VAR 0 4
60747: PPUSH
60748: LD_VAR 0 5
60752: PPUSH
60753: CALL 64103 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60757: LD_VAR 0 1
60761: PUSH
60762: LD_INT 251
60764: EQUAL
60765: IFFALSE 60782
60767: PUSH
60768: LD_VAR 0 2
60772: PPUSH
60773: CALL_OW 264
60777: PUSH
60778: LD_INT 81
60780: EQUAL
60781: AND
60782: IFFALSE 60803
// MinerDetonateMine ( unit , x , y ) ;
60784: LD_VAR 0 2
60788: PPUSH
60789: LD_VAR 0 4
60793: PPUSH
60794: LD_VAR 0 5
60798: PPUSH
60799: CALL 64510 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
60803: LD_VAR 0 1
60807: PUSH
60808: LD_INT 252
60810: EQUAL
60811: IFFALSE 60828
60813: PUSH
60814: LD_VAR 0 2
60818: PPUSH
60819: CALL_OW 264
60823: PUSH
60824: LD_INT 81
60826: EQUAL
60827: AND
60828: IFFALSE 60849
// MinerCreateMinefield ( unit , x , y ) ;
60830: LD_VAR 0 2
60834: PPUSH
60835: LD_VAR 0 4
60839: PPUSH
60840: LD_VAR 0 5
60844: PPUSH
60845: CALL 64742 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
60849: LD_VAR 0 1
60853: PUSH
60854: LD_INT 253
60856: EQUAL
60857: IFFALSE 60874
60859: PUSH
60860: LD_VAR 0 2
60864: PPUSH
60865: CALL_OW 257
60869: PUSH
60870: LD_INT 5
60872: EQUAL
60873: AND
60874: IFFALSE 60895
// ComBinocular ( unit , x , y ) ;
60876: LD_VAR 0 2
60880: PPUSH
60881: LD_VAR 0 4
60885: PPUSH
60886: LD_VAR 0 5
60890: PPUSH
60891: CALL 65117 0 3
// if selectedUnit then
60895: LD_VAR 0 3
60899: IFFALSE 60959
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60901: LD_VAR 0 1
60905: PUSH
60906: LD_INT 254
60908: EQUAL
60909: IFFALSE 60926
60911: PUSH
60912: LD_VAR 0 2
60916: PPUSH
60917: CALL_OW 264
60921: PUSH
60922: LD_INT 99
60924: EQUAL
60925: AND
60926: IFFALSE 60943
60928: PUSH
60929: LD_VAR 0 3
60933: PPUSH
60934: CALL_OW 263
60938: PUSH
60939: LD_INT 3
60941: EQUAL
60942: AND
60943: IFFALSE 60959
// HackDestroyVehicle ( unit , selectedUnit ) ;
60945: LD_VAR 0 2
60949: PPUSH
60950: LD_VAR 0 3
60954: PPUSH
60955: CALL 63293 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60959: LD_VAR 0 1
60963: PUSH
60964: LD_INT 255
60966: EQUAL
60967: IFFALSE 60991
60969: PUSH
60970: LD_VAR 0 2
60974: PPUSH
60975: CALL_OW 264
60979: PUSH
60980: LD_INT 14
60982: PUSH
60983: LD_INT 53
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: IN
60990: AND
60991: IFFALSE 61009
60993: PUSH
60994: LD_VAR 0 4
60998: PPUSH
60999: LD_VAR 0 5
61003: PPUSH
61004: CALL_OW 488
61008: AND
61009: IFFALSE 61033
// CutTreeXYR ( unit , x , y , 12 ) ;
61011: LD_VAR 0 2
61015: PPUSH
61016: LD_VAR 0 4
61020: PPUSH
61021: LD_VAR 0 5
61025: PPUSH
61026: LD_INT 12
61028: PPUSH
61029: CALL 61224 0 4
// if cmd = 256 then
61033: LD_VAR 0 1
61037: PUSH
61038: LD_INT 256
61040: EQUAL
61041: IFFALSE 61062
// SetFactoryWaypoint ( unit , x , y ) ;
61043: LD_VAR 0 2
61047: PPUSH
61048: LD_VAR 0 4
61052: PPUSH
61053: LD_VAR 0 5
61057: PPUSH
61058: CALL 67144 0 3
// if cmd = 257 then
61062: LD_VAR 0 1
61066: PUSH
61067: LD_INT 257
61069: EQUAL
61070: IFFALSE 61091
// SetWarehouseGatheringPoint ( unit , x , y ) ;
61072: LD_VAR 0 2
61076: PPUSH
61077: LD_VAR 0 4
61081: PPUSH
61082: LD_VAR 0 5
61086: PPUSH
61087: CALL 67640 0 3
// if cmd = 258 then
61091: LD_VAR 0 1
61095: PUSH
61096: LD_INT 258
61098: EQUAL
61099: IFFALSE 61123
// BurnTreeXYR ( unit , x , y , 8 ) ;
61101: LD_VAR 0 2
61105: PPUSH
61106: LD_VAR 0 4
61110: PPUSH
61111: LD_VAR 0 5
61115: PPUSH
61116: LD_INT 8
61118: PPUSH
61119: CALL 61646 0 4
// end ;
61123: LD_VAR 0 6
61127: RET
// export function ComRadiation ( un ) ; var eff ; begin
61128: LD_INT 0
61130: PPUSH
61131: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
61132: LD_VAR 0 1
61136: PPUSH
61137: CALL_OW 264
61141: PUSH
61142: LD_INT 91
61144: NONEQUAL
61145: IFFALSE 61149
// exit ;
61147: GO 61219
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61149: LD_INT 68
61151: PPUSH
61152: LD_VAR 0 1
61156: PPUSH
61157: CALL_OW 255
61161: PPUSH
61162: CALL_OW 321
61166: PUSH
61167: LD_INT 2
61169: EQUAL
61170: IFFALSE 61182
// eff := 50 else
61172: LD_ADDR_VAR 0 3
61176: PUSH
61177: LD_INT 50
61179: ST_TO_ADDR
61180: GO 61190
// eff := 25 ;
61182: LD_ADDR_VAR 0 3
61186: PUSH
61187: LD_INT 25
61189: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61190: LD_VAR 0 1
61194: PPUSH
61195: CALL_OW 250
61199: PPUSH
61200: LD_VAR 0 1
61204: PPUSH
61205: CALL_OW 251
61209: PPUSH
61210: LD_VAR 0 3
61214: PPUSH
61215: CALL_OW 495
// end ;
61219: LD_VAR 0 2
61223: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61224: LD_INT 0
61226: PPUSH
61227: PPUSH
61228: PPUSH
61229: PPUSH
61230: PPUSH
61231: PPUSH
61232: PPUSH
61233: PPUSH
61234: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
61235: LD_VAR 0 1
61239: PPUSH
61240: CALL_OW 302
61244: NOT
61245: IFTRUE 61264
61247: PUSH
61248: LD_VAR 0 2
61252: PPUSH
61253: LD_VAR 0 3
61257: PPUSH
61258: CALL_OW 488
61262: NOT
61263: OR
61264: IFTRUE 61273
61266: PUSH
61267: LD_VAR 0 4
61271: NOT
61272: OR
61273: IFFALSE 61277
// exit ;
61275: GO 61641
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
61277: LD_VAR 0 1
61281: PPUSH
61282: CALL_OW 437
61286: PPUSH
61287: CALL 18465 0 1
61291: PUSH
61292: LD_INT 10
61294: GREATER
61295: IFFALSE 61299
// exit ;
61297: GO 61641
// list := [ ] ;
61299: LD_ADDR_VAR 0 13
61303: PUSH
61304: EMPTY
61305: ST_TO_ADDR
// if x - r < 0 then
61306: LD_VAR 0 2
61310: PUSH
61311: LD_VAR 0 4
61315: MINUS
61316: PUSH
61317: LD_INT 0
61319: LESS
61320: IFFALSE 61332
// min_x := 0 else
61322: LD_ADDR_VAR 0 7
61326: PUSH
61327: LD_INT 0
61329: ST_TO_ADDR
61330: GO 61348
// min_x := x - r ;
61332: LD_ADDR_VAR 0 7
61336: PUSH
61337: LD_VAR 0 2
61341: PUSH
61342: LD_VAR 0 4
61346: MINUS
61347: ST_TO_ADDR
// if y - r < 0 then
61348: LD_VAR 0 3
61352: PUSH
61353: LD_VAR 0 4
61357: MINUS
61358: PUSH
61359: LD_INT 0
61361: LESS
61362: IFFALSE 61374
// min_y := 0 else
61364: LD_ADDR_VAR 0 8
61368: PUSH
61369: LD_INT 0
61371: ST_TO_ADDR
61372: GO 61390
// min_y := y - r ;
61374: LD_ADDR_VAR 0 8
61378: PUSH
61379: LD_VAR 0 3
61383: PUSH
61384: LD_VAR 0 4
61388: MINUS
61389: ST_TO_ADDR
// max_x := x + r ;
61390: LD_ADDR_VAR 0 9
61394: PUSH
61395: LD_VAR 0 2
61399: PUSH
61400: LD_VAR 0 4
61404: PLUS
61405: ST_TO_ADDR
// max_y := y + r ;
61406: LD_ADDR_VAR 0 10
61410: PUSH
61411: LD_VAR 0 3
61415: PUSH
61416: LD_VAR 0 4
61420: PLUS
61421: ST_TO_ADDR
// for _x = min_x to max_x do
61422: LD_ADDR_VAR 0 11
61426: PUSH
61427: DOUBLE
61428: LD_VAR 0 7
61432: DEC
61433: ST_TO_ADDR
61434: LD_VAR 0 9
61438: PUSH
61439: FOR_TO
61440: IFFALSE 61559
// for _y = min_y to max_y do
61442: LD_ADDR_VAR 0 12
61446: PUSH
61447: DOUBLE
61448: LD_VAR 0 8
61452: DEC
61453: ST_TO_ADDR
61454: LD_VAR 0 10
61458: PUSH
61459: FOR_TO
61460: IFFALSE 61555
// begin if not ValidHex ( _x , _y ) then
61462: LD_VAR 0 11
61466: PPUSH
61467: LD_VAR 0 12
61471: PPUSH
61472: CALL_OW 488
61476: NOT
61477: IFFALSE 61481
// continue ;
61479: GO 61459
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61481: LD_VAR 0 11
61485: PPUSH
61486: LD_VAR 0 12
61490: PPUSH
61491: CALL_OW 351
61495: IFFALSE 61513
61497: PUSH
61498: LD_VAR 0 11
61502: PPUSH
61503: LD_VAR 0 12
61507: PPUSH
61508: CALL_OW 554
61512: AND
61513: IFFALSE 61553
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61515: LD_ADDR_VAR 0 13
61519: PUSH
61520: LD_VAR 0 13
61524: PPUSH
61525: LD_VAR 0 13
61529: PUSH
61530: LD_INT 1
61532: PLUS
61533: PPUSH
61534: LD_VAR 0 11
61538: PUSH
61539: LD_VAR 0 12
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PPUSH
61548: CALL_OW 2
61552: ST_TO_ADDR
// end ;
61553: GO 61459
61555: POP
61556: POP
61557: GO 61439
61559: POP
61560: POP
// if not list then
61561: LD_VAR 0 13
61565: NOT
61566: IFFALSE 61570
// exit ;
61568: GO 61641
// for i in list do
61570: LD_ADDR_VAR 0 6
61574: PUSH
61575: LD_VAR 0 13
61579: PUSH
61580: FOR_IN
61581: IFFALSE 61639
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
61583: LD_VAR 0 1
61587: PPUSH
61588: LD_STRING M
61590: PUSH
61591: LD_VAR 0 6
61595: PUSH
61596: LD_INT 1
61598: ARRAY
61599: PUSH
61600: LD_VAR 0 6
61604: PUSH
61605: LD_INT 2
61607: ARRAY
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: LD_INT 0
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: PUSH
61630: EMPTY
61631: LIST
61632: PPUSH
61633: CALL_OW 447
61637: GO 61580
61639: POP
61640: POP
// end ;
61641: LD_VAR 0 5
61645: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
61646: LD_INT 0
61648: PPUSH
61649: PPUSH
61650: PPUSH
61651: PPUSH
61652: PPUSH
61653: PPUSH
61654: PPUSH
61655: PPUSH
61656: PPUSH
61657: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
61658: LD_VAR 0 1
61662: PPUSH
61663: CALL_OW 302
61667: NOT
61668: IFTRUE 61687
61670: PUSH
61671: LD_VAR 0 2
61675: PPUSH
61676: LD_VAR 0 3
61680: PPUSH
61681: CALL_OW 488
61685: NOT
61686: OR
61687: IFTRUE 61696
61689: PUSH
61690: LD_VAR 0 4
61694: NOT
61695: OR
61696: IFFALSE 61700
// exit ;
61698: GO 62239
// if Count ( GetTaskList ( flame ) ) > 10 then
61700: LD_VAR 0 1
61704: PPUSH
61705: CALL_OW 437
61709: PPUSH
61710: CALL 18465 0 1
61714: PUSH
61715: LD_INT 10
61717: GREATER
61718: IFFALSE 61722
// exit ;
61720: GO 62239
// list := [ ] ;
61722: LD_ADDR_VAR 0 13
61726: PUSH
61727: EMPTY
61728: ST_TO_ADDR
// if x - r < 0 then
61729: LD_VAR 0 2
61733: PUSH
61734: LD_VAR 0 4
61738: MINUS
61739: PUSH
61740: LD_INT 0
61742: LESS
61743: IFFALSE 61755
// min_x := 0 else
61745: LD_ADDR_VAR 0 7
61749: PUSH
61750: LD_INT 0
61752: ST_TO_ADDR
61753: GO 61771
// min_x := x - r ;
61755: LD_ADDR_VAR 0 7
61759: PUSH
61760: LD_VAR 0 2
61764: PUSH
61765: LD_VAR 0 4
61769: MINUS
61770: ST_TO_ADDR
// if y - r < 0 then
61771: LD_VAR 0 3
61775: PUSH
61776: LD_VAR 0 4
61780: MINUS
61781: PUSH
61782: LD_INT 0
61784: LESS
61785: IFFALSE 61797
// min_y := 0 else
61787: LD_ADDR_VAR 0 8
61791: PUSH
61792: LD_INT 0
61794: ST_TO_ADDR
61795: GO 61813
// min_y := y - r ;
61797: LD_ADDR_VAR 0 8
61801: PUSH
61802: LD_VAR 0 3
61806: PUSH
61807: LD_VAR 0 4
61811: MINUS
61812: ST_TO_ADDR
// max_x := x + r ;
61813: LD_ADDR_VAR 0 9
61817: PUSH
61818: LD_VAR 0 2
61822: PUSH
61823: LD_VAR 0 4
61827: PLUS
61828: ST_TO_ADDR
// max_y := y + r ;
61829: LD_ADDR_VAR 0 10
61833: PUSH
61834: LD_VAR 0 3
61838: PUSH
61839: LD_VAR 0 4
61843: PLUS
61844: ST_TO_ADDR
// for _x = min_x to max_x do
61845: LD_ADDR_VAR 0 11
61849: PUSH
61850: DOUBLE
61851: LD_VAR 0 7
61855: DEC
61856: ST_TO_ADDR
61857: LD_VAR 0 9
61861: PUSH
61862: FOR_TO
61863: IFFALSE 61982
// for _y = min_y to max_y do
61865: LD_ADDR_VAR 0 12
61869: PUSH
61870: DOUBLE
61871: LD_VAR 0 8
61875: DEC
61876: ST_TO_ADDR
61877: LD_VAR 0 10
61881: PUSH
61882: FOR_TO
61883: IFFALSE 61978
// begin if not ValidHex ( _x , _y ) then
61885: LD_VAR 0 11
61889: PPUSH
61890: LD_VAR 0 12
61894: PPUSH
61895: CALL_OW 488
61899: NOT
61900: IFFALSE 61904
// continue ;
61902: GO 61882
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61904: LD_VAR 0 11
61908: PPUSH
61909: LD_VAR 0 12
61913: PPUSH
61914: CALL_OW 351
61918: IFFALSE 61936
61920: PUSH
61921: LD_VAR 0 11
61925: PPUSH
61926: LD_VAR 0 12
61930: PPUSH
61931: CALL_OW 554
61935: AND
61936: IFFALSE 61976
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61938: LD_ADDR_VAR 0 13
61942: PUSH
61943: LD_VAR 0 13
61947: PPUSH
61948: LD_VAR 0 13
61952: PUSH
61953: LD_INT 1
61955: PLUS
61956: PPUSH
61957: LD_VAR 0 11
61961: PUSH
61962: LD_VAR 0 12
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PPUSH
61971: CALL_OW 2
61975: ST_TO_ADDR
// end ;
61976: GO 61882
61978: POP
61979: POP
61980: GO 61862
61982: POP
61983: POP
// if not list then
61984: LD_VAR 0 13
61988: NOT
61989: IFFALSE 61993
// exit ;
61991: GO 62239
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
61993: LD_ADDR_VAR 0 13
61997: PUSH
61998: LD_VAR 0 1
62002: PPUSH
62003: LD_VAR 0 13
62007: PPUSH
62008: LD_INT 1
62010: PPUSH
62011: LD_INT 1
62013: PPUSH
62014: CALL 21871 0 4
62018: ST_TO_ADDR
// ComStop ( flame ) ;
62019: LD_VAR 0 1
62023: PPUSH
62024: CALL_OW 141
// for i in list do
62028: LD_ADDR_VAR 0 6
62032: PUSH
62033: LD_VAR 0 13
62037: PUSH
62038: FOR_IN
62039: IFFALSE 62070
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
62041: LD_VAR 0 1
62045: PPUSH
62046: LD_VAR 0 6
62050: PUSH
62051: LD_INT 1
62053: ARRAY
62054: PPUSH
62055: LD_VAR 0 6
62059: PUSH
62060: LD_INT 2
62062: ARRAY
62063: PPUSH
62064: CALL_OW 176
62068: GO 62038
62070: POP
62071: POP
// repeat wait ( 0 0$1 ) ;
62072: LD_INT 35
62074: PPUSH
62075: CALL_OW 67
// task := GetTaskList ( flame ) ;
62079: LD_ADDR_VAR 0 14
62083: PUSH
62084: LD_VAR 0 1
62088: PPUSH
62089: CALL_OW 437
62093: ST_TO_ADDR
// if not task then
62094: LD_VAR 0 14
62098: NOT
62099: IFFALSE 62103
// exit ;
62101: GO 62239
// if task [ 1 ] [ 1 ] <> | then
62103: LD_VAR 0 14
62107: PUSH
62108: LD_INT 1
62110: ARRAY
62111: PUSH
62112: LD_INT 1
62114: ARRAY
62115: PUSH
62116: LD_STRING |
62118: NONEQUAL
62119: IFFALSE 62123
// exit ;
62121: GO 62239
// _x := task [ 1 ] [ 2 ] ;
62123: LD_ADDR_VAR 0 11
62127: PUSH
62128: LD_VAR 0 14
62132: PUSH
62133: LD_INT 1
62135: ARRAY
62136: PUSH
62137: LD_INT 2
62139: ARRAY
62140: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
62141: LD_ADDR_VAR 0 12
62145: PUSH
62146: LD_VAR 0 14
62150: PUSH
62151: LD_INT 1
62153: ARRAY
62154: PUSH
62155: LD_INT 3
62157: ARRAY
62158: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
62159: LD_VAR 0 11
62163: PPUSH
62164: LD_VAR 0 12
62168: PPUSH
62169: CALL_OW 351
62173: NOT
62174: IFTRUE 62193
62176: PUSH
62177: LD_VAR 0 11
62181: PPUSH
62182: LD_VAR 0 12
62186: PPUSH
62187: CALL_OW 554
62191: NOT
62192: OR
62193: IFFALSE 62227
// begin task := Delete ( task , 1 ) ;
62195: LD_ADDR_VAR 0 14
62199: PUSH
62200: LD_VAR 0 14
62204: PPUSH
62205: LD_INT 1
62207: PPUSH
62208: CALL_OW 3
62212: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
62213: LD_VAR 0 1
62217: PPUSH
62218: LD_VAR 0 14
62222: PPUSH
62223: CALL_OW 446
// end ; until not HasTask ( flame ) ;
62227: LD_VAR 0 1
62231: PPUSH
62232: CALL_OW 314
62236: NOT
62237: IFFALSE 62072
// end ;
62239: LD_VAR 0 5
62243: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62244: LD_EXP 51
62248: NOT
62249: IFFALSE 62299
62251: GO 62253
62253: DISABLE
// begin initHack := true ;
62254: LD_ADDR_EXP 51
62258: PUSH
62259: LD_INT 1
62261: ST_TO_ADDR
// hackTanks := [ ] ;
62262: LD_ADDR_EXP 52
62266: PUSH
62267: EMPTY
62268: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62269: LD_ADDR_EXP 53
62273: PUSH
62274: EMPTY
62275: ST_TO_ADDR
// hackLimit := 3 ;
62276: LD_ADDR_EXP 54
62280: PUSH
62281: LD_INT 3
62283: ST_TO_ADDR
// hackDist := 12 ;
62284: LD_ADDR_EXP 55
62288: PUSH
62289: LD_INT 12
62291: ST_TO_ADDR
// hackCounter := [ ] ;
62292: LD_ADDR_EXP 56
62296: PUSH
62297: EMPTY
62298: ST_TO_ADDR
// end ;
62299: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62300: LD_EXP 51
62304: IFFALSE 62322
62306: PUSH
62307: LD_INT 34
62309: PUSH
62310: LD_INT 99
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PPUSH
62317: CALL_OW 69
62321: AND
62322: IFFALSE 62575
62324: GO 62326
62326: DISABLE
62327: LD_INT 0
62329: PPUSH
62330: PPUSH
// begin enable ;
62331: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62332: LD_ADDR_VAR 0 1
62336: PUSH
62337: LD_INT 34
62339: PUSH
62340: LD_INT 99
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PPUSH
62347: CALL_OW 69
62351: PUSH
62352: FOR_IN
62353: IFFALSE 62573
// begin if not i in hackTanks then
62355: LD_VAR 0 1
62359: PUSH
62360: LD_EXP 52
62364: IN
62365: NOT
62366: IFFALSE 62449
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62368: LD_ADDR_EXP 52
62372: PUSH
62373: LD_EXP 52
62377: PPUSH
62378: LD_EXP 52
62382: PUSH
62383: LD_INT 1
62385: PLUS
62386: PPUSH
62387: LD_VAR 0 1
62391: PPUSH
62392: CALL_OW 1
62396: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62397: LD_ADDR_EXP 53
62401: PUSH
62402: LD_EXP 53
62406: PPUSH
62407: LD_EXP 53
62411: PUSH
62412: LD_INT 1
62414: PLUS
62415: PPUSH
62416: EMPTY
62417: PPUSH
62418: CALL_OW 1
62422: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62423: LD_ADDR_EXP 56
62427: PUSH
62428: LD_EXP 56
62432: PPUSH
62433: LD_EXP 56
62437: PUSH
62438: LD_INT 1
62440: PLUS
62441: PPUSH
62442: EMPTY
62443: PPUSH
62444: CALL_OW 1
62448: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62449: LD_VAR 0 1
62453: PPUSH
62454: CALL_OW 302
62458: NOT
62459: IFFALSE 62472
// begin HackUnlinkAll ( i ) ;
62461: LD_VAR 0 1
62465: PPUSH
62466: CALL 62578 0 1
// continue ;
62470: GO 62352
// end ; HackCheckCapturedStatus ( i ) ;
62472: LD_VAR 0 1
62476: PPUSH
62477: CALL 63023 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62481: LD_ADDR_VAR 0 2
62485: PUSH
62486: LD_INT 81
62488: PUSH
62489: LD_VAR 0 1
62493: PPUSH
62494: CALL_OW 255
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 33
62505: PUSH
62506: LD_INT 3
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 91
62515: PUSH
62516: LD_VAR 0 1
62520: PUSH
62521: LD_EXP 55
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 50
62533: PUSH
62534: EMPTY
62535: LIST
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: PPUSH
62543: CALL_OW 69
62547: ST_TO_ADDR
// if not tmp then
62548: LD_VAR 0 2
62552: NOT
62553: IFFALSE 62557
// continue ;
62555: GO 62352
// HackLink ( i , tmp ) ;
62557: LD_VAR 0 1
62561: PPUSH
62562: LD_VAR 0 2
62566: PPUSH
62567: CALL 62714 0 2
// end ;
62571: GO 62352
62573: POP
62574: POP
// end ;
62575: PPOPN 2
62577: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62578: LD_INT 0
62580: PPUSH
62581: PPUSH
62582: PPUSH
// if not hack in hackTanks then
62583: LD_VAR 0 1
62587: PUSH
62588: LD_EXP 52
62592: IN
62593: NOT
62594: IFFALSE 62598
// exit ;
62596: GO 62709
// index := GetElementIndex ( hackTanks , hack ) ;
62598: LD_ADDR_VAR 0 4
62602: PUSH
62603: LD_EXP 52
62607: PPUSH
62608: LD_VAR 0 1
62612: PPUSH
62613: CALL 21166 0 2
62617: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62618: LD_EXP 53
62622: PUSH
62623: LD_VAR 0 4
62627: ARRAY
62628: IFFALSE 62709
// begin for i in hackTanksCaptured [ index ] do
62630: LD_ADDR_VAR 0 3
62634: PUSH
62635: LD_EXP 53
62639: PUSH
62640: LD_VAR 0 4
62644: ARRAY
62645: PUSH
62646: FOR_IN
62647: IFFALSE 62673
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62649: LD_VAR 0 3
62653: PUSH
62654: LD_INT 1
62656: ARRAY
62657: PPUSH
62658: LD_VAR 0 3
62662: PUSH
62663: LD_INT 2
62665: ARRAY
62666: PPUSH
62667: CALL_OW 235
62671: GO 62646
62673: POP
62674: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62675: LD_ADDR_EXP 53
62679: PUSH
62680: LD_EXP 53
62684: PPUSH
62685: LD_VAR 0 4
62689: PPUSH
62690: EMPTY
62691: PPUSH
62692: CALL_OW 1
62696: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62697: LD_VAR 0 1
62701: PPUSH
62702: LD_INT 0
62704: PPUSH
62705: CALL_OW 505
// end ; end ;
62709: LD_VAR 0 2
62713: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62714: LD_INT 0
62716: PPUSH
62717: PPUSH
62718: PPUSH
// if not hack in hackTanks or not vehicles then
62719: LD_VAR 0 1
62723: PUSH
62724: LD_EXP 52
62728: IN
62729: NOT
62730: IFTRUE 62739
62732: PUSH
62733: LD_VAR 0 2
62737: NOT
62738: OR
62739: IFFALSE 62743
// exit ;
62741: GO 63018
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62743: LD_ADDR_VAR 0 2
62747: PUSH
62748: LD_VAR 0 1
62752: PPUSH
62753: LD_VAR 0 2
62757: PPUSH
62758: LD_INT 1
62760: PPUSH
62761: LD_INT 1
62763: PPUSH
62764: CALL 21818 0 4
62768: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62769: LD_ADDR_VAR 0 5
62773: PUSH
62774: LD_EXP 52
62778: PPUSH
62779: LD_VAR 0 1
62783: PPUSH
62784: CALL 21166 0 2
62788: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62789: LD_EXP 53
62793: PUSH
62794: LD_VAR 0 5
62798: ARRAY
62799: PUSH
62800: LD_EXP 54
62804: LESS
62805: IFFALSE 62994
// begin for i := 1 to vehicles do
62807: LD_ADDR_VAR 0 4
62811: PUSH
62812: DOUBLE
62813: LD_INT 1
62815: DEC
62816: ST_TO_ADDR
62817: LD_VAR 0 2
62821: PUSH
62822: FOR_TO
62823: IFFALSE 62992
// begin if hackTanksCaptured [ index ] = hackLimit then
62825: LD_EXP 53
62829: PUSH
62830: LD_VAR 0 5
62834: ARRAY
62835: PUSH
62836: LD_EXP 54
62840: EQUAL
62841: IFFALSE 62845
// break ;
62843: GO 62992
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62845: LD_ADDR_EXP 56
62849: PUSH
62850: LD_EXP 56
62854: PPUSH
62855: LD_VAR 0 5
62859: PPUSH
62860: LD_EXP 56
62864: PUSH
62865: LD_VAR 0 5
62869: ARRAY
62870: PUSH
62871: LD_INT 1
62873: PLUS
62874: PPUSH
62875: CALL_OW 1
62879: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62880: LD_ADDR_EXP 53
62884: PUSH
62885: LD_EXP 53
62889: PPUSH
62890: LD_VAR 0 5
62894: PUSH
62895: LD_EXP 53
62899: PUSH
62900: LD_VAR 0 5
62904: ARRAY
62905: PUSH
62906: LD_INT 1
62908: PLUS
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PPUSH
62914: LD_VAR 0 2
62918: PUSH
62919: LD_VAR 0 4
62923: ARRAY
62924: PUSH
62925: LD_VAR 0 2
62929: PUSH
62930: LD_VAR 0 4
62934: ARRAY
62935: PPUSH
62936: CALL_OW 255
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PPUSH
62945: CALL 21383 0 3
62949: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62950: LD_VAR 0 2
62954: PUSH
62955: LD_VAR 0 4
62959: ARRAY
62960: PPUSH
62961: LD_VAR 0 1
62965: PPUSH
62966: CALL_OW 255
62970: PPUSH
62971: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62975: LD_VAR 0 2
62979: PUSH
62980: LD_VAR 0 4
62984: ARRAY
62985: PPUSH
62986: CALL_OW 141
// end ;
62990: GO 62822
62992: POP
62993: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62994: LD_VAR 0 1
62998: PPUSH
62999: LD_EXP 53
63003: PUSH
63004: LD_VAR 0 5
63008: ARRAY
63009: PUSH
63010: LD_INT 0
63012: PLUS
63013: PPUSH
63014: CALL_OW 505
// end ;
63018: LD_VAR 0 3
63022: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
63023: LD_INT 0
63025: PPUSH
63026: PPUSH
63027: PPUSH
63028: PPUSH
// if not hack in hackTanks then
63029: LD_VAR 0 1
63033: PUSH
63034: LD_EXP 52
63038: IN
63039: NOT
63040: IFFALSE 63044
// exit ;
63042: GO 63288
// index := GetElementIndex ( hackTanks , hack ) ;
63044: LD_ADDR_VAR 0 4
63048: PUSH
63049: LD_EXP 52
63053: PPUSH
63054: LD_VAR 0 1
63058: PPUSH
63059: CALL 21166 0 2
63063: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
63064: LD_ADDR_VAR 0 3
63068: PUSH
63069: DOUBLE
63070: LD_EXP 53
63074: PUSH
63075: LD_VAR 0 4
63079: ARRAY
63080: INC
63081: ST_TO_ADDR
63082: LD_INT 1
63084: PUSH
63085: FOR_DOWNTO
63086: IFFALSE 63262
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
63088: LD_ADDR_VAR 0 5
63092: PUSH
63093: LD_EXP 53
63097: PUSH
63098: LD_VAR 0 4
63102: ARRAY
63103: PUSH
63104: LD_VAR 0 3
63108: ARRAY
63109: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
63110: LD_VAR 0 5
63114: PUSH
63115: LD_INT 1
63117: ARRAY
63118: PPUSH
63119: CALL_OW 302
63123: NOT
63124: IFTRUE 63152
63126: PUSH
63127: LD_VAR 0 5
63131: PUSH
63132: LD_INT 1
63134: ARRAY
63135: PPUSH
63136: CALL_OW 255
63140: PUSH
63141: LD_VAR 0 1
63145: PPUSH
63146: CALL_OW 255
63150: NONEQUAL
63151: OR
63152: IFFALSE 63260
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63154: LD_VAR 0 5
63158: PUSH
63159: LD_INT 1
63161: ARRAY
63162: PPUSH
63163: CALL_OW 305
63167: IFFALSE 63195
63169: PUSH
63170: LD_VAR 0 5
63174: PUSH
63175: LD_INT 1
63177: ARRAY
63178: PPUSH
63179: CALL_OW 255
63183: PUSH
63184: LD_VAR 0 1
63188: PPUSH
63189: CALL_OW 255
63193: EQUAL
63194: AND
63195: IFFALSE 63219
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63197: LD_VAR 0 5
63201: PUSH
63202: LD_INT 1
63204: ARRAY
63205: PPUSH
63206: LD_VAR 0 5
63210: PUSH
63211: LD_INT 2
63213: ARRAY
63214: PPUSH
63215: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63219: LD_ADDR_EXP 53
63223: PUSH
63224: LD_EXP 53
63228: PPUSH
63229: LD_VAR 0 4
63233: PPUSH
63234: LD_EXP 53
63238: PUSH
63239: LD_VAR 0 4
63243: ARRAY
63244: PPUSH
63245: LD_VAR 0 3
63249: PPUSH
63250: CALL_OW 3
63254: PPUSH
63255: CALL_OW 1
63259: ST_TO_ADDR
// end ; end ;
63260: GO 63085
63262: POP
63263: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63264: LD_VAR 0 1
63268: PPUSH
63269: LD_EXP 53
63273: PUSH
63274: LD_VAR 0 4
63278: ARRAY
63279: PUSH
63280: LD_INT 0
63282: PLUS
63283: PPUSH
63284: CALL_OW 505
// end ;
63288: LD_VAR 0 2
63292: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63293: LD_INT 0
63295: PPUSH
63296: PPUSH
63297: PPUSH
63298: PPUSH
// if not hack in hackTanks then
63299: LD_VAR 0 1
63303: PUSH
63304: LD_EXP 52
63308: IN
63309: NOT
63310: IFFALSE 63314
// exit ;
63312: GO 63399
// index := GetElementIndex ( hackTanks , hack ) ;
63314: LD_ADDR_VAR 0 5
63318: PUSH
63319: LD_EXP 52
63323: PPUSH
63324: LD_VAR 0 1
63328: PPUSH
63329: CALL 21166 0 2
63333: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63334: LD_ADDR_VAR 0 4
63338: PUSH
63339: DOUBLE
63340: LD_INT 1
63342: DEC
63343: ST_TO_ADDR
63344: LD_EXP 53
63348: PUSH
63349: LD_VAR 0 5
63353: ARRAY
63354: PUSH
63355: FOR_TO
63356: IFFALSE 63397
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63358: LD_EXP 53
63362: PUSH
63363: LD_VAR 0 5
63367: ARRAY
63368: PUSH
63369: LD_VAR 0 4
63373: ARRAY
63374: PUSH
63375: LD_INT 1
63377: ARRAY
63378: PUSH
63379: LD_VAR 0 2
63383: EQUAL
63384: IFFALSE 63395
// KillUnit ( vehicle ) ;
63386: LD_VAR 0 2
63390: PPUSH
63391: CALL_OW 66
63395: GO 63355
63397: POP
63398: POP
// end ;
63399: LD_VAR 0 3
63403: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
63404: LD_EXP 57
63408: NOT
63409: IFFALSE 63542
63411: GO 63413
63413: DISABLE
63414: LD_INT 0
63416: PPUSH
// begin initMiner := true ;
63417: LD_ADDR_EXP 57
63421: PUSH
63422: LD_INT 1
63424: ST_TO_ADDR
// minersList := [ ] ;
63425: LD_ADDR_EXP 58
63429: PUSH
63430: EMPTY
63431: ST_TO_ADDR
// minerMinesList := [ ] ;
63432: LD_ADDR_EXP 59
63436: PUSH
63437: EMPTY
63438: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
63439: LD_ADDR_EXP 60
63443: PUSH
63444: LD_INT 10
63446: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63447: LD_ADDR_VAR 0 1
63451: PUSH
63452: LD_INT 34
63454: PUSH
63455: LD_INT 81
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PPUSH
63462: CALL_OW 69
63466: PUSH
63467: FOR_IN
63468: IFFALSE 63540
// begin if not i in minersList then
63470: LD_VAR 0 1
63474: PUSH
63475: LD_EXP 58
63479: IN
63480: NOT
63481: IFFALSE 63538
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63483: LD_ADDR_EXP 58
63487: PUSH
63488: LD_EXP 58
63492: PPUSH
63493: LD_EXP 58
63497: PUSH
63498: LD_INT 1
63500: PLUS
63501: PPUSH
63502: LD_VAR 0 1
63506: PPUSH
63507: CALL_OW 1
63511: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63512: LD_ADDR_EXP 59
63516: PUSH
63517: LD_EXP 59
63521: PPUSH
63522: LD_EXP 59
63526: PUSH
63527: LD_INT 1
63529: PLUS
63530: PPUSH
63531: EMPTY
63532: PPUSH
63533: CALL_OW 1
63537: ST_TO_ADDR
// end end ;
63538: GO 63467
63540: POP
63541: POP
// end ;
63542: PPOPN 1
63544: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
63545: LD_EXP 57
63549: IFFALSE 63580
63551: PUSH
63552: LD_EXP 59
63556: PPUSH
63557: CALL 18465 0 1
63561: IFTRUE 63579
63563: PUSH
63564: LD_INT 34
63566: PUSH
63567: LD_INT 81
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PPUSH
63574: CALL_OW 69
63578: OR
63579: AND
63580: IFFALSE 64100
63582: GO 63584
63584: DISABLE
63585: LD_INT 0
63587: PPUSH
63588: PPUSH
63589: PPUSH
63590: PPUSH
// begin enable ;
63591: ENABLE
// for i := minerMinesList downto 1 do
63592: LD_ADDR_VAR 0 1
63596: PUSH
63597: DOUBLE
63598: LD_EXP 59
63602: INC
63603: ST_TO_ADDR
63604: LD_INT 1
63606: PUSH
63607: FOR_DOWNTO
63608: IFFALSE 64098
// begin side := GetSide ( minersList [ i ] ) ;
63610: LD_ADDR_VAR 0 3
63614: PUSH
63615: LD_EXP 58
63619: PUSH
63620: LD_VAR 0 1
63624: ARRAY
63625: PPUSH
63626: CALL_OW 255
63630: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
63631: LD_EXP 58
63635: PUSH
63636: LD_VAR 0 1
63640: ARRAY
63641: PPUSH
63642: CALL_OW 300
63646: IFFALSE 63667
63648: PUSH
63649: LD_VAR 0 3
63653: PUSH
63654: LD_OWVAR 2
63658: PUSH
63659: LD_INT 9
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: IN
63666: AND
63667: IFFALSE 63700
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
63669: LD_EXP 58
63673: PUSH
63674: LD_VAR 0 1
63678: ARRAY
63679: PPUSH
63680: LD_EXP 59
63684: PUSH
63685: LD_VAR 0 1
63689: ARRAY
63690: PPUSH
63691: CALL 18465 0 1
63695: PPUSH
63696: CALL_OW 505
// if not minerMinesList [ i ] then
63700: LD_EXP 59
63704: PUSH
63705: LD_VAR 0 1
63709: ARRAY
63710: NOT
63711: IFFALSE 63715
// continue ;
63713: GO 63607
// for j := minerMinesList [ i ] downto 1 do
63715: LD_ADDR_VAR 0 2
63719: PUSH
63720: DOUBLE
63721: LD_EXP 59
63725: PUSH
63726: LD_VAR 0 1
63730: ARRAY
63731: INC
63732: ST_TO_ADDR
63733: LD_INT 1
63735: PUSH
63736: FOR_DOWNTO
63737: IFFALSE 64094
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
63739: LD_EXP 58
63743: PUSH
63744: LD_VAR 0 1
63748: ARRAY
63749: PPUSH
63750: CALL_OW 301
63754: IFTRUE 63774
63756: PUSH
63757: LD_EXP 58
63761: PUSH
63762: LD_VAR 0 1
63766: ARRAY
63767: PPUSH
63768: CALL_OW 305
63772: NOT
63773: OR
63774: IFFALSE 63865
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63776: LD_EXP 59
63780: PUSH
63781: LD_VAR 0 1
63785: ARRAY
63786: PUSH
63787: LD_VAR 0 2
63791: ARRAY
63792: PUSH
63793: LD_INT 1
63795: ARRAY
63796: PPUSH
63797: LD_EXP 59
63801: PUSH
63802: LD_VAR 0 1
63806: ARRAY
63807: PUSH
63808: LD_VAR 0 2
63812: ARRAY
63813: PUSH
63814: LD_INT 2
63816: ARRAY
63817: PPUSH
63818: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63822: LD_ADDR_EXP 59
63826: PUSH
63827: LD_EXP 59
63831: PPUSH
63832: LD_VAR 0 1
63836: PPUSH
63837: LD_EXP 59
63841: PUSH
63842: LD_VAR 0 1
63846: ARRAY
63847: PPUSH
63848: LD_VAR 0 2
63852: PPUSH
63853: CALL_OW 3
63857: PPUSH
63858: CALL_OW 1
63862: ST_TO_ADDR
// continue ;
63863: GO 63736
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63865: LD_ADDR_VAR 0 4
63869: PUSH
63870: LD_EXP 59
63874: PUSH
63875: LD_VAR 0 1
63879: ARRAY
63880: PUSH
63881: LD_VAR 0 2
63885: ARRAY
63886: PUSH
63887: LD_INT 1
63889: ARRAY
63890: PPUSH
63891: LD_EXP 59
63895: PUSH
63896: LD_VAR 0 1
63900: ARRAY
63901: PUSH
63902: LD_VAR 0 2
63906: ARRAY
63907: PUSH
63908: LD_INT 2
63910: ARRAY
63911: PPUSH
63912: CALL_OW 428
63916: ST_TO_ADDR
// if not tmp then
63917: LD_VAR 0 4
63921: NOT
63922: IFFALSE 63926
// continue ;
63924: GO 63736
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63926: LD_VAR 0 4
63930: PUSH
63931: LD_INT 81
63933: PUSH
63934: LD_VAR 0 3
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PPUSH
63943: CALL_OW 69
63947: IN
63948: IFFALSE 63998
63950: PUSH
63951: LD_EXP 59
63955: PUSH
63956: LD_VAR 0 1
63960: ARRAY
63961: PUSH
63962: LD_VAR 0 2
63966: ARRAY
63967: PUSH
63968: LD_INT 1
63970: ARRAY
63971: PPUSH
63972: LD_EXP 59
63976: PUSH
63977: LD_VAR 0 1
63981: ARRAY
63982: PUSH
63983: LD_VAR 0 2
63987: ARRAY
63988: PUSH
63989: LD_INT 2
63991: ARRAY
63992: PPUSH
63993: CALL_OW 458
63997: AND
63998: IFFALSE 64092
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64000: LD_EXP 59
64004: PUSH
64005: LD_VAR 0 1
64009: ARRAY
64010: PUSH
64011: LD_VAR 0 2
64015: ARRAY
64016: PUSH
64017: LD_INT 1
64019: ARRAY
64020: PPUSH
64021: LD_EXP 59
64025: PUSH
64026: LD_VAR 0 1
64030: ARRAY
64031: PUSH
64032: LD_VAR 0 2
64036: ARRAY
64037: PUSH
64038: LD_INT 2
64040: ARRAY
64041: PPUSH
64042: LD_VAR 0 3
64046: PPUSH
64047: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64051: LD_ADDR_EXP 59
64055: PUSH
64056: LD_EXP 59
64060: PPUSH
64061: LD_VAR 0 1
64065: PPUSH
64066: LD_EXP 59
64070: PUSH
64071: LD_VAR 0 1
64075: ARRAY
64076: PPUSH
64077: LD_VAR 0 2
64081: PPUSH
64082: CALL_OW 3
64086: PPUSH
64087: CALL_OW 1
64091: ST_TO_ADDR
// end ; end ;
64092: GO 63736
64094: POP
64095: POP
// end ;
64096: GO 63607
64098: POP
64099: POP
// end ;
64100: PPOPN 4
64102: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
64103: LD_INT 0
64105: PPUSH
64106: PPUSH
64107: PPUSH
64108: PPUSH
// result := false ;
64109: LD_ADDR_VAR 0 4
64113: PUSH
64114: LD_INT 0
64116: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64117: LD_VAR 0 1
64121: PPUSH
64122: CALL_OW 264
64126: PUSH
64127: LD_INT 81
64129: EQUAL
64130: NOT
64131: IFFALSE 64135
// exit ;
64133: GO 64505
// side := GetSide ( unit ) ;
64135: LD_ADDR_VAR 0 6
64139: PUSH
64140: LD_VAR 0 1
64144: PPUSH
64145: CALL_OW 255
64149: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
64150: LD_ADDR_VAR 0 5
64154: PUSH
64155: LD_EXP 58
64159: PPUSH
64160: LD_VAR 0 1
64164: PPUSH
64165: CALL 21166 0 2
64169: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64170: LD_EXP 59
64174: PUSH
64175: LD_VAR 0 5
64179: ARRAY
64180: PUSH
64181: LD_EXP 60
64185: GREATEREQUAL
64186: IFFALSE 64190
// exit ;
64188: GO 64505
// ComMoveXY ( unit , x , y ) ;
64190: LD_VAR 0 1
64194: PPUSH
64195: LD_VAR 0 2
64199: PPUSH
64200: LD_VAR 0 3
64204: PPUSH
64205: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64209: LD_INT 35
64211: PPUSH
64212: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
64216: LD_VAR 0 1
64220: PPUSH
64221: LD_VAR 0 2
64225: PPUSH
64226: LD_VAR 0 3
64230: PPUSH
64231: CALL 53222 0 3
64235: NOT
64236: IFFALSE 64249
64238: PUSH
64239: LD_VAR 0 1
64243: PPUSH
64244: CALL_OW 314
64248: AND
64249: IFFALSE 64253
// exit ;
64251: GO 64505
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
64253: LD_VAR 0 2
64257: PPUSH
64258: LD_VAR 0 3
64262: PPUSH
64263: CALL_OW 428
64267: PUSH
64268: LD_VAR 0 1
64272: EQUAL
64273: IFFALSE 64287
64275: PUSH
64276: LD_VAR 0 1
64280: PPUSH
64281: CALL_OW 314
64285: NOT
64286: AND
64287: IFFALSE 64209
// if MineAtPos ( x , y ) then
64289: LD_VAR 0 2
64293: PPUSH
64294: LD_VAR 0 3
64298: PPUSH
64299: CALL_OW 458
64303: IFFALSE 64307
// exit ;
64305: GO 64505
// if your_side = side then
64307: LD_OWVAR 2
64311: PUSH
64312: LD_VAR 0 6
64316: EQUAL
64317: IFFALSE 64336
// PlaySoundXY ( x , y , PlantMine ) ;
64319: LD_VAR 0 2
64323: PPUSH
64324: LD_VAR 0 3
64328: PPUSH
64329: LD_STRING PlantMine
64331: PPUSH
64332: CALL_OW 366
// repeat wait ( 1 ) ;
64336: LD_INT 1
64338: PPUSH
64339: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
64343: LD_VAR 0 2
64347: PPUSH
64348: LD_VAR 0 3
64352: PPUSH
64353: LD_VAR 0 6
64357: PPUSH
64358: LD_INT 0
64360: PPUSH
64361: CALL_OW 454
64365: IFFALSE 64336
// if MineAtPos ( x , y ) then
64367: LD_VAR 0 2
64371: PPUSH
64372: LD_VAR 0 3
64376: PPUSH
64377: CALL_OW 458
64381: IFFALSE 64497
// begin for i in minerMinesList [ index ] do
64383: LD_ADDR_VAR 0 7
64387: PUSH
64388: LD_EXP 59
64392: PUSH
64393: LD_VAR 0 5
64397: ARRAY
64398: PUSH
64399: FOR_IN
64400: IFFALSE 64442
// if i [ 1 ] = x and i [ 2 ] = y then
64402: LD_VAR 0 7
64406: PUSH
64407: LD_INT 1
64409: ARRAY
64410: PUSH
64411: LD_VAR 0 2
64415: EQUAL
64416: IFFALSE 64434
64418: PUSH
64419: LD_VAR 0 7
64423: PUSH
64424: LD_INT 2
64426: ARRAY
64427: PUSH
64428: LD_VAR 0 3
64432: EQUAL
64433: AND
64434: IFFALSE 64440
// exit ;
64436: POP
64437: POP
64438: GO 64505
64440: GO 64399
64442: POP
64443: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64444: LD_ADDR_EXP 59
64448: PUSH
64449: LD_EXP 59
64453: PPUSH
64454: LD_VAR 0 5
64458: PUSH
64459: LD_EXP 59
64463: PUSH
64464: LD_VAR 0 5
64468: ARRAY
64469: PUSH
64470: LD_INT 1
64472: PLUS
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PPUSH
64478: LD_VAR 0 2
64482: PUSH
64483: LD_VAR 0 3
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PPUSH
64492: CALL 21383 0 3
64496: ST_TO_ADDR
// end ; result := true ;
64497: LD_ADDR_VAR 0 4
64501: PUSH
64502: LD_INT 1
64504: ST_TO_ADDR
// end ;
64505: LD_VAR 0 4
64509: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64510: LD_INT 0
64512: PPUSH
64513: PPUSH
64514: PPUSH
// if not unit in minersList then
64515: LD_VAR 0 1
64519: PUSH
64520: LD_EXP 58
64524: IN
64525: NOT
64526: IFFALSE 64530
// exit ;
64528: GO 64737
// index := GetElementIndex ( minersList , unit ) ;
64530: LD_ADDR_VAR 0 6
64534: PUSH
64535: LD_EXP 58
64539: PPUSH
64540: LD_VAR 0 1
64544: PPUSH
64545: CALL 21166 0 2
64549: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64550: LD_ADDR_VAR 0 5
64554: PUSH
64555: DOUBLE
64556: LD_EXP 59
64560: PUSH
64561: LD_VAR 0 6
64565: ARRAY
64566: INC
64567: ST_TO_ADDR
64568: LD_INT 1
64570: PUSH
64571: FOR_DOWNTO
64572: IFFALSE 64735
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64574: LD_EXP 59
64578: PUSH
64579: LD_VAR 0 6
64583: ARRAY
64584: PUSH
64585: LD_VAR 0 5
64589: ARRAY
64590: PUSH
64591: LD_INT 1
64593: ARRAY
64594: PPUSH
64595: LD_EXP 59
64599: PUSH
64600: LD_VAR 0 6
64604: ARRAY
64605: PUSH
64606: LD_VAR 0 5
64610: ARRAY
64611: PUSH
64612: LD_INT 2
64614: ARRAY
64615: PPUSH
64616: LD_VAR 0 2
64620: PPUSH
64621: LD_VAR 0 3
64625: PPUSH
64626: CALL_OW 298
64630: PUSH
64631: LD_INT 6
64633: LESS
64634: IFFALSE 64733
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64636: LD_EXP 59
64640: PUSH
64641: LD_VAR 0 6
64645: ARRAY
64646: PUSH
64647: LD_VAR 0 5
64651: ARRAY
64652: PUSH
64653: LD_INT 1
64655: ARRAY
64656: PPUSH
64657: LD_EXP 59
64661: PUSH
64662: LD_VAR 0 6
64666: ARRAY
64667: PUSH
64668: LD_VAR 0 5
64672: ARRAY
64673: PUSH
64674: LD_INT 2
64676: ARRAY
64677: PPUSH
64678: LD_VAR 0 1
64682: PPUSH
64683: CALL_OW 255
64687: PPUSH
64688: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64692: LD_ADDR_EXP 59
64696: PUSH
64697: LD_EXP 59
64701: PPUSH
64702: LD_VAR 0 6
64706: PPUSH
64707: LD_EXP 59
64711: PUSH
64712: LD_VAR 0 6
64716: ARRAY
64717: PPUSH
64718: LD_VAR 0 5
64722: PPUSH
64723: CALL_OW 3
64727: PPUSH
64728: CALL_OW 1
64732: ST_TO_ADDR
// end ; end ;
64733: GO 64571
64735: POP
64736: POP
// end ;
64737: LD_VAR 0 4
64741: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64742: LD_INT 0
64744: PPUSH
64745: PPUSH
64746: PPUSH
64747: PPUSH
64748: PPUSH
64749: PPUSH
64750: PPUSH
64751: PPUSH
64752: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64753: LD_VAR 0 1
64757: PPUSH
64758: CALL_OW 264
64762: PUSH
64763: LD_INT 81
64765: EQUAL
64766: NOT
64767: IFTRUE 64782
64769: PUSH
64770: LD_VAR 0 1
64774: PUSH
64775: LD_EXP 58
64779: IN
64780: NOT
64781: OR
64782: IFFALSE 64786
// exit ;
64784: GO 65112
// index := GetElementIndex ( minersList , unit ) ;
64786: LD_ADDR_VAR 0 6
64790: PUSH
64791: LD_EXP 58
64795: PPUSH
64796: LD_VAR 0 1
64800: PPUSH
64801: CALL 21166 0 2
64805: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64806: LD_ADDR_VAR 0 8
64810: PUSH
64811: LD_EXP 60
64815: PUSH
64816: LD_EXP 59
64820: PUSH
64821: LD_VAR 0 6
64825: ARRAY
64826: MINUS
64827: ST_TO_ADDR
// if not minesFreeAmount then
64828: LD_VAR 0 8
64832: NOT
64833: IFFALSE 64837
// exit ;
64835: GO 65112
// tmp := [ ] ;
64837: LD_ADDR_VAR 0 7
64841: PUSH
64842: EMPTY
64843: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64844: LD_ADDR_VAR 0 5
64848: PUSH
64849: DOUBLE
64850: LD_INT 1
64852: DEC
64853: ST_TO_ADDR
64854: LD_VAR 0 8
64858: PUSH
64859: FOR_TO
64860: IFFALSE 65059
// begin _d := rand ( 0 , 5 ) ;
64862: LD_ADDR_VAR 0 11
64866: PUSH
64867: LD_INT 0
64869: PPUSH
64870: LD_INT 5
64872: PPUSH
64873: CALL_OW 12
64877: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64878: LD_ADDR_VAR 0 12
64882: PUSH
64883: LD_INT 2
64885: PPUSH
64886: LD_INT 6
64888: PPUSH
64889: CALL_OW 12
64893: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64894: LD_ADDR_VAR 0 9
64898: PUSH
64899: LD_VAR 0 2
64903: PPUSH
64904: LD_VAR 0 11
64908: PPUSH
64909: LD_VAR 0 12
64913: PPUSH
64914: CALL_OW 272
64918: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64919: LD_ADDR_VAR 0 10
64923: PUSH
64924: LD_VAR 0 3
64928: PPUSH
64929: LD_VAR 0 11
64933: PPUSH
64934: LD_VAR 0 12
64938: PPUSH
64939: CALL_OW 273
64943: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64944: LD_VAR 0 9
64948: PPUSH
64949: LD_VAR 0 10
64953: PPUSH
64954: CALL_OW 488
64958: IFFALSE 64982
64960: PUSH
64961: LD_VAR 0 9
64965: PUSH
64966: LD_VAR 0 10
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_VAR 0 7
64979: IN
64980: NOT
64981: AND
64982: IFFALSE 65001
64984: PUSH
64985: LD_VAR 0 9
64989: PPUSH
64990: LD_VAR 0 10
64994: PPUSH
64995: CALL_OW 458
64999: NOT
65000: AND
65001: IFFALSE 65043
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65003: LD_ADDR_VAR 0 7
65007: PUSH
65008: LD_VAR 0 7
65012: PPUSH
65013: LD_VAR 0 7
65017: PUSH
65018: LD_INT 1
65020: PLUS
65021: PPUSH
65022: LD_VAR 0 9
65026: PUSH
65027: LD_VAR 0 10
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PPUSH
65036: CALL_OW 1
65040: ST_TO_ADDR
65041: GO 65057
// i := i - 1 ;
65043: LD_ADDR_VAR 0 5
65047: PUSH
65048: LD_VAR 0 5
65052: PUSH
65053: LD_INT 1
65055: MINUS
65056: ST_TO_ADDR
// end ;
65057: GO 64859
65059: POP
65060: POP
// for i in tmp do
65061: LD_ADDR_VAR 0 5
65065: PUSH
65066: LD_VAR 0 7
65070: PUSH
65071: FOR_IN
65072: IFFALSE 65110
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65074: LD_VAR 0 1
65078: PPUSH
65079: LD_VAR 0 5
65083: PUSH
65084: LD_INT 1
65086: ARRAY
65087: PPUSH
65088: LD_VAR 0 5
65092: PUSH
65093: LD_INT 2
65095: ARRAY
65096: PPUSH
65097: CALL 64103 0 3
65101: NOT
65102: IFFALSE 65108
// exit ;
65104: POP
65105: POP
65106: GO 65112
65108: GO 65071
65110: POP
65111: POP
// end ;
65112: LD_VAR 0 4
65116: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
65117: LD_INT 0
65119: PPUSH
65120: PPUSH
65121: PPUSH
65122: PPUSH
65123: PPUSH
65124: PPUSH
65125: PPUSH
65126: PPUSH
65127: PPUSH
// if GetClass ( unit ) <> class_sniper then
65128: LD_VAR 0 1
65132: PPUSH
65133: CALL_OW 257
65137: PUSH
65138: LD_INT 5
65140: NONEQUAL
65141: IFFALSE 65145
// exit ;
65143: GO 65615
// dist := 8 ;
65145: LD_ADDR_VAR 0 5
65149: PUSH
65150: LD_INT 8
65152: ST_TO_ADDR
// viewRange := 12 ;
65153: LD_ADDR_VAR 0 8
65157: PUSH
65158: LD_INT 12
65160: ST_TO_ADDR
// side := GetSide ( unit ) ;
65161: LD_ADDR_VAR 0 6
65165: PUSH
65166: LD_VAR 0 1
65170: PPUSH
65171: CALL_OW 255
65175: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
65176: LD_INT 61
65178: PPUSH
65179: LD_VAR 0 6
65183: PPUSH
65184: CALL_OW 321
65188: PUSH
65189: LD_INT 2
65191: EQUAL
65192: IFFALSE 65202
// viewRange := 16 ;
65194: LD_ADDR_VAR 0 8
65198: PUSH
65199: LD_INT 16
65201: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
65202: LD_VAR 0 1
65206: PPUSH
65207: LD_VAR 0 2
65211: PPUSH
65212: LD_VAR 0 3
65216: PPUSH
65217: CALL_OW 297
65221: PUSH
65222: LD_VAR 0 5
65226: GREATER
65227: IFFALSE 65306
// begin ComMoveXY ( unit , x , y ) ;
65229: LD_VAR 0 1
65233: PPUSH
65234: LD_VAR 0 2
65238: PPUSH
65239: LD_VAR 0 3
65243: PPUSH
65244: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65248: LD_INT 35
65250: PPUSH
65251: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
65255: LD_VAR 0 1
65259: PPUSH
65260: LD_VAR 0 2
65264: PPUSH
65265: LD_VAR 0 3
65269: PPUSH
65270: CALL 53222 0 3
65274: NOT
65275: IFFALSE 65279
// exit ;
65277: GO 65615
// until GetDistUnitXY ( unit , x , y ) < dist ;
65279: LD_VAR 0 1
65283: PPUSH
65284: LD_VAR 0 2
65288: PPUSH
65289: LD_VAR 0 3
65293: PPUSH
65294: CALL_OW 297
65298: PUSH
65299: LD_VAR 0 5
65303: LESS
65304: IFFALSE 65248
// end ; ComTurnXY ( unit , x , y ) ;
65306: LD_VAR 0 1
65310: PPUSH
65311: LD_VAR 0 2
65315: PPUSH
65316: LD_VAR 0 3
65320: PPUSH
65321: CALL_OW 118
// repeat if Multiplayer then
65325: LD_OWVAR 4
65329: IFFALSE 65340
// wait ( 35 ) else
65331: LD_INT 35
65333: PPUSH
65334: CALL_OW 67
65338: GO 65347
// wait ( 5 ) ;
65340: LD_INT 5
65342: PPUSH
65343: CALL_OW 67
// _d := GetDir ( unit ) ;
65347: LD_ADDR_VAR 0 11
65351: PUSH
65352: LD_VAR 0 1
65356: PPUSH
65357: CALL_OW 254
65361: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
65362: LD_ADDR_VAR 0 7
65366: PUSH
65367: LD_VAR 0 1
65371: PPUSH
65372: CALL_OW 250
65376: PPUSH
65377: LD_VAR 0 1
65381: PPUSH
65382: CALL_OW 251
65386: PPUSH
65387: LD_VAR 0 2
65391: PPUSH
65392: LD_VAR 0 3
65396: PPUSH
65397: CALL 55858 0 4
65401: ST_TO_ADDR
// until dir = _d ;
65402: LD_VAR 0 7
65406: PUSH
65407: LD_VAR 0 11
65411: EQUAL
65412: IFFALSE 65325
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
65414: LD_ADDR_VAR 0 9
65418: PUSH
65419: LD_VAR 0 1
65423: PPUSH
65424: CALL_OW 250
65428: PPUSH
65429: LD_VAR 0 7
65433: PPUSH
65434: LD_VAR 0 5
65438: PPUSH
65439: CALL_OW 272
65443: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
65444: LD_ADDR_VAR 0 10
65448: PUSH
65449: LD_VAR 0 1
65453: PPUSH
65454: CALL_OW 251
65458: PPUSH
65459: LD_VAR 0 7
65463: PPUSH
65464: LD_VAR 0 5
65468: PPUSH
65469: CALL_OW 273
65473: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65474: LD_VAR 0 9
65478: PPUSH
65479: LD_VAR 0 10
65483: PPUSH
65484: CALL_OW 488
65488: NOT
65489: IFFALSE 65493
// exit ;
65491: GO 65615
// ComAnimCustom ( unit , 1 ) ;
65493: LD_VAR 0 1
65497: PPUSH
65498: LD_INT 1
65500: PPUSH
65501: CALL_OW 592
// p := 0 ;
65505: LD_ADDR_VAR 0 12
65509: PUSH
65510: LD_INT 0
65512: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65513: LD_VAR 0 9
65517: PPUSH
65518: LD_VAR 0 10
65522: PPUSH
65523: LD_VAR 0 6
65527: PPUSH
65528: LD_VAR 0 8
65532: PPUSH
65533: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
65537: LD_INT 35
65539: PPUSH
65540: CALL_OW 67
// p := Inc ( p ) ;
65544: LD_ADDR_VAR 0 12
65548: PUSH
65549: LD_VAR 0 12
65553: PPUSH
65554: CALL 55814 0 1
65558: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
65559: LD_VAR 0 12
65563: PUSH
65564: LD_INT 3
65566: EQUAL
65567: IFTRUE 65581
65569: PUSH
65570: LD_VAR 0 1
65574: PPUSH
65575: CALL_OW 302
65579: NOT
65580: OR
65581: IFTRUE 65594
65583: PUSH
65584: LD_VAR 0 1
65588: PPUSH
65589: CALL_OW 301
65593: OR
65594: IFFALSE 65537
// RemoveSeeing ( _x , _y , side ) ;
65596: LD_VAR 0 9
65600: PPUSH
65601: LD_VAR 0 10
65605: PPUSH
65606: LD_VAR 0 6
65610: PPUSH
65611: CALL_OW 331
// end ;
65615: LD_VAR 0 4
65619: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
65620: LD_INT 0
65622: PPUSH
65623: PPUSH
65624: PPUSH
65625: PPUSH
65626: PPUSH
65627: PPUSH
65628: PPUSH
65629: PPUSH
65630: PPUSH
65631: PPUSH
65632: PPUSH
// if not unit then
65633: LD_VAR 0 1
65637: NOT
65638: IFFALSE 65642
// exit ;
65640: GO 65913
// side := GetSide ( unit ) ;
65642: LD_ADDR_VAR 0 3
65646: PUSH
65647: LD_VAR 0 1
65651: PPUSH
65652: CALL_OW 255
65656: ST_TO_ADDR
// x := GetX ( unit ) ;
65657: LD_ADDR_VAR 0 5
65661: PUSH
65662: LD_VAR 0 1
65666: PPUSH
65667: CALL_OW 250
65671: ST_TO_ADDR
// y := GetY ( unit ) ;
65672: LD_ADDR_VAR 0 6
65676: PUSH
65677: LD_VAR 0 1
65681: PPUSH
65682: CALL_OW 251
65686: ST_TO_ADDR
// r := 8 ;
65687: LD_ADDR_VAR 0 4
65691: PUSH
65692: LD_INT 8
65694: ST_TO_ADDR
// if x - r < 0 then
65695: LD_VAR 0 5
65699: PUSH
65700: LD_VAR 0 4
65704: MINUS
65705: PUSH
65706: LD_INT 0
65708: LESS
65709: IFFALSE 65721
// min_x := 0 else
65711: LD_ADDR_VAR 0 7
65715: PUSH
65716: LD_INT 0
65718: ST_TO_ADDR
65719: GO 65737
// min_x := x - r ;
65721: LD_ADDR_VAR 0 7
65725: PUSH
65726: LD_VAR 0 5
65730: PUSH
65731: LD_VAR 0 4
65735: MINUS
65736: ST_TO_ADDR
// if y - r < 0 then
65737: LD_VAR 0 6
65741: PUSH
65742: LD_VAR 0 4
65746: MINUS
65747: PUSH
65748: LD_INT 0
65750: LESS
65751: IFFALSE 65763
// min_y := 0 else
65753: LD_ADDR_VAR 0 8
65757: PUSH
65758: LD_INT 0
65760: ST_TO_ADDR
65761: GO 65779
// min_y := y - r ;
65763: LD_ADDR_VAR 0 8
65767: PUSH
65768: LD_VAR 0 6
65772: PUSH
65773: LD_VAR 0 4
65777: MINUS
65778: ST_TO_ADDR
// max_x := x + r ;
65779: LD_ADDR_VAR 0 9
65783: PUSH
65784: LD_VAR 0 5
65788: PUSH
65789: LD_VAR 0 4
65793: PLUS
65794: ST_TO_ADDR
// max_y := y + r ;
65795: LD_ADDR_VAR 0 10
65799: PUSH
65800: LD_VAR 0 6
65804: PUSH
65805: LD_VAR 0 4
65809: PLUS
65810: ST_TO_ADDR
// for _x = min_x to max_x do
65811: LD_ADDR_VAR 0 11
65815: PUSH
65816: DOUBLE
65817: LD_VAR 0 7
65821: DEC
65822: ST_TO_ADDR
65823: LD_VAR 0 9
65827: PUSH
65828: FOR_TO
65829: IFFALSE 65911
// for _y = min_y to max_y do
65831: LD_ADDR_VAR 0 12
65835: PUSH
65836: DOUBLE
65837: LD_VAR 0 8
65841: DEC
65842: ST_TO_ADDR
65843: LD_VAR 0 10
65847: PUSH
65848: FOR_TO
65849: IFFALSE 65907
// begin if not ValidHex ( _x , _y ) then
65851: LD_VAR 0 11
65855: PPUSH
65856: LD_VAR 0 12
65860: PPUSH
65861: CALL_OW 488
65865: NOT
65866: IFFALSE 65870
// continue ;
65868: GO 65848
// if MineAtPos ( _x , _y ) then
65870: LD_VAR 0 11
65874: PPUSH
65875: LD_VAR 0 12
65879: PPUSH
65880: CALL_OW 458
65884: IFFALSE 65905
// ViewMineAtPos ( _x , _y , side ) ;
65886: LD_VAR 0 11
65890: PPUSH
65891: LD_VAR 0 12
65895: PPUSH
65896: LD_VAR 0 3
65900: PPUSH
65901: CALL_OW 457
// end ;
65905: GO 65848
65907: POP
65908: POP
65909: GO 65828
65911: POP
65912: POP
// end ;
65913: LD_VAR 0 2
65917: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
65918: LD_INT 0
65920: PPUSH
65921: PPUSH
65922: PPUSH
65923: PPUSH
65924: PPUSH
65925: PPUSH
65926: PPUSH
// if not units then
65927: LD_VAR 0 1
65931: NOT
65932: IFFALSE 65936
// exit ;
65934: GO 66400
// scaners := [ ] ;
65936: LD_ADDR_VAR 0 6
65940: PUSH
65941: EMPTY
65942: ST_TO_ADDR
// for i in units do
65943: LD_ADDR_VAR 0 3
65947: PUSH
65948: LD_VAR 0 1
65952: PUSH
65953: FOR_IN
65954: IFFALSE 66111
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
65956: LD_VAR 0 3
65960: PPUSH
65961: CALL_OW 264
65965: PUSH
65966: LD_INT 11
65968: NONEQUAL
65969: IFTRUE 65983
65971: PUSH
65972: LD_VAR 0 3
65976: PPUSH
65977: CALL_OW 302
65981: NOT
65982: OR
65983: IFTRUE 66000
65985: PUSH
65986: LD_VAR 0 3
65990: PPUSH
65991: CALL_OW 110
65995: PUSH
65996: LD_INT 502
65998: EQUAL
65999: OR
66000: IFFALSE 66004
// continue ;
66002: GO 65953
// ComStop ( i ) ;
66004: LD_VAR 0 3
66008: PPUSH
66009: CALL_OW 141
// x := GetX ( i ) ;
66013: LD_ADDR_VAR 0 4
66017: PUSH
66018: LD_VAR 0 3
66022: PPUSH
66023: CALL_OW 250
66027: ST_TO_ADDR
// y := GetY ( i ) ;
66028: LD_ADDR_VAR 0 5
66032: PUSH
66033: LD_VAR 0 3
66037: PPUSH
66038: CALL_OW 251
66042: ST_TO_ADDR
// if GetSide ( i ) = your_side then
66043: LD_VAR 0 3
66047: PPUSH
66048: CALL_OW 255
66052: PUSH
66053: LD_OWVAR 2
66057: EQUAL
66058: IFFALSE 66077
// PlaySoundXY ( x , y , mineDetector ) ;
66060: LD_VAR 0 4
66064: PPUSH
66065: LD_VAR 0 5
66069: PPUSH
66070: LD_STRING mineDetector
66072: PPUSH
66073: CALL_OW 366
// scaners := Join ( scaners , i ) ;
66077: LD_ADDR_VAR 0 6
66081: PUSH
66082: LD_VAR 0 6
66086: PPUSH
66087: LD_VAR 0 3
66091: PPUSH
66092: CALL 54441 0 2
66096: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
66097: LD_VAR 0 3
66101: PPUSH
66102: LD_INT 502
66104: PPUSH
66105: CALL_OW 109
// end ;
66109: GO 65953
66111: POP
66112: POP
// if not scaners then
66113: LD_VAR 0 6
66117: NOT
66118: IFFALSE 66122
// exit ;
66120: GO 66400
// wait ( 3 ) ;
66122: LD_INT 3
66124: PPUSH
66125: CALL_OW 67
// timer := 6 ;
66129: LD_ADDR_VAR 0 7
66133: PUSH
66134: LD_INT 6
66136: ST_TO_ADDR
// repeat for i in scaners do
66137: LD_ADDR_VAR 0 3
66141: PUSH
66142: LD_VAR 0 6
66146: PUSH
66147: FOR_IN
66148: IFFALSE 66298
// begin side := GetSide ( i ) ;
66150: LD_ADDR_VAR 0 8
66154: PUSH
66155: LD_VAR 0 3
66159: PPUSH
66160: CALL_OW 255
66164: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
66165: LD_VAR 0 3
66169: PPUSH
66170: CALL_OW 302
66174: NOT
66175: IFTRUE 66188
66177: PUSH
66178: LD_VAR 0 3
66182: PPUSH
66183: CALL_OW 314
66187: OR
66188: IFTRUE 66219
66190: PUSH
66191: LD_VAR 0 3
66195: PPUSH
66196: CALL_OW 263
66200: PUSH
66201: LD_INT 1
66203: EQUAL
66204: IFFALSE 66218
66206: PUSH
66207: LD_VAR 0 3
66211: PPUSH
66212: CALL_OW 311
66216: NOT
66217: AND
66218: OR
66219: IFFALSE 66263
// begin SetUnitDisplayNumber ( i , 0 ) ;
66221: LD_VAR 0 3
66225: PPUSH
66226: LD_INT 0
66228: PPUSH
66229: CALL_OW 505
// SetTag ( i , 0 ) ;
66233: LD_VAR 0 3
66237: PPUSH
66238: LD_INT 0
66240: PPUSH
66241: CALL_OW 109
// scaners := scaners diff i ;
66245: LD_ADDR_VAR 0 6
66249: PUSH
66250: LD_VAR 0 6
66254: PUSH
66255: LD_VAR 0 3
66259: DIFF
66260: ST_TO_ADDR
// continue ;
66261: GO 66147
// end ; if side in [ your_side , 9 ] then
66263: LD_VAR 0 8
66267: PUSH
66268: LD_OWVAR 2
66272: PUSH
66273: LD_INT 9
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: IN
66280: IFFALSE 66296
// SetUnitDisplayNumber ( i , timer ) ;
66282: LD_VAR 0 3
66286: PPUSH
66287: LD_VAR 0 7
66291: PPUSH
66292: CALL_OW 505
// end ;
66296: GO 66147
66298: POP
66299: POP
// if not scaners then
66300: LD_VAR 0 6
66304: NOT
66305: IFFALSE 66309
// exit ;
66307: GO 66400
// timer := Dec ( timer ) ;
66309: LD_ADDR_VAR 0 7
66313: PUSH
66314: LD_VAR 0 7
66318: PPUSH
66319: CALL 55836 0 1
66323: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66324: LD_INT 35
66326: PPUSH
66327: CALL_OW 67
// until timer = 0 ;
66331: LD_VAR 0 7
66335: PUSH
66336: LD_INT 0
66338: EQUAL
66339: IFFALSE 66137
// if not scaners then
66341: LD_VAR 0 6
66345: NOT
66346: IFFALSE 66350
// exit ;
66348: GO 66400
// for i in scaners do
66350: LD_ADDR_VAR 0 3
66354: PUSH
66355: LD_VAR 0 6
66359: PUSH
66360: FOR_IN
66361: IFFALSE 66398
// begin SetUnitDisplayNumber ( i , 0 ) ;
66363: LD_VAR 0 3
66367: PPUSH
66368: LD_INT 0
66370: PPUSH
66371: CALL_OW 505
// SetTag ( i , 0 ) ;
66375: LD_VAR 0 3
66379: PPUSH
66380: LD_INT 0
66382: PPUSH
66383: CALL_OW 109
// RevealDetectorMine ( i ) ;
66387: LD_VAR 0 3
66391: PPUSH
66392: CALL 65620 0 1
// end ;
66396: GO 66360
66398: POP
66399: POP
// end ;
66400: LD_VAR 0 2
66404: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
66405: LD_INT 0
66407: PPUSH
// if p1 = mine_detector_mode then
66408: LD_VAR 0 2
66412: PUSH
66413: LD_INT 103
66415: EQUAL
66416: IFFALSE 66427
// DetectMine ( units ) ;
66418: LD_VAR 0 1
66422: PPUSH
66423: CALL 65918 0 1
// end ; end_of_file
66427: LD_VAR 0 7
66431: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
66432: PPOPN 6
66434: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66435: LD_INT 0
66437: PPUSH
// begin if not units then
66438: LD_VAR 0 1
66442: NOT
66443: IFFALSE 66447
// exit ;
66445: GO 66481
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
66447: LD_VAR 0 1
66451: PPUSH
66452: LD_VAR 0 2
66456: PPUSH
66457: LD_VAR 0 3
66461: PPUSH
66462: LD_VAR 0 4
66466: PPUSH
66467: LD_VAR 0 5
66471: PPUSH
66472: LD_VAR 0 6
66476: PPUSH
66477: CALL 66405 0 6
// end ;
66481: PPOPN 7
66483: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
66484: LD_EXP 3
66488: PUSH
66489: LD_INT 4
66491: EQUAL
66492: IFFALSE 66528
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
66494: LD_STRING setGameDifficulty(
66496: PUSH
66497: LD_OWVAR 67
66501: STR
66502: PUSH
66503: LD_STRING )
66505: STR
66506: PPUSH
66507: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
66511: LD_STRING displayDifficulty(
66513: PUSH
66514: LD_OWVAR 67
66518: STR
66519: PUSH
66520: LD_STRING )
66522: STR
66523: PPUSH
66524: CALL_OW 559
// end ; SOS_MapStart ( ) ;
66528: CALL 66557 0 0
// end ; end_of_file
66532: PPOPN 1
66534: END
// every 0 0$1 do
66535: GO 66537
66537: DISABLE
// begin enable ;
66538: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
66539: LD_STRING updateTimer(
66541: PUSH
66542: LD_OWVAR 1
66546: STR
66547: PUSH
66548: LD_STRING );
66550: STR
66551: PPUSH
66552: CALL_OW 559
// end ;
66556: END
// export function SOS_MapStart ( ) ; begin
66557: LD_INT 0
66559: PPUSH
// UpdateFactoryWaypoints ( ) ;
66560: CALL 67498 0 0
// UpdateWarehouseGatheringPoints ( ) ;
66564: CALL 67750 0 0
// ParseMultiDataToLua ( ) ;
66568: CALL 67897 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
66572: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
66574: PPUSH
66575: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
66579: LD_STRING setSpecLogoNumber(
66581: PUSH
66582: LD_INT 2
66584: STR
66585: PUSH
66586: LD_STRING ,
66588: STR
66589: PUSH
66590: LD_INT 1
66592: STR
66593: PUSH
66594: LD_STRING )
66596: STR
66597: PPUSH
66598: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
66602: LD_STRING setSpecLogoNumber(
66604: PUSH
66605: LD_INT 3
66607: STR
66608: PUSH
66609: LD_STRING ,
66611: STR
66612: PUSH
66613: LD_INT 2
66615: STR
66616: PUSH
66617: LD_STRING )
66619: STR
66620: PPUSH
66621: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
66625: LD_STRING setSpecLogoNumber(
66627: PUSH
66628: LD_INT 4
66630: STR
66631: PUSH
66632: LD_STRING ,
66634: STR
66635: PUSH
66636: LD_INT 3
66638: STR
66639: PUSH
66640: LD_STRING )
66642: STR
66643: PPUSH
66644: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
66648: LD_STRING setSpecLogoNumber(
66650: PUSH
66651: LD_INT 5
66653: STR
66654: PUSH
66655: LD_STRING ,
66657: STR
66658: PUSH
66659: LD_INT 4
66661: STR
66662: PUSH
66663: LD_STRING )
66665: STR
66666: PPUSH
66667: CALL_OW 559
// end ;
66671: LD_VAR 0 1
66675: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
66676: LD_INT 0
66678: PPUSH
66679: PPUSH
66680: PPUSH
66681: PPUSH
66682: PPUSH
66683: PPUSH
66684: PPUSH
66685: PPUSH
66686: PPUSH
// for i := 1 to 8 do
66687: LD_ADDR_VAR 0 2
66691: PUSH
66692: DOUBLE
66693: LD_INT 1
66695: DEC
66696: ST_TO_ADDR
66697: LD_INT 8
66699: PUSH
66700: FOR_TO
66701: IFFALSE 67086
// begin if mpSidePositions [ i ] then
66703: LD_EXP 7
66707: PUSH
66708: LD_VAR 0 2
66712: ARRAY
66713: IFFALSE 67084
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
66715: LD_ADDR_VAR 0 7
66719: PUSH
66720: LD_INT 22
66722: PUSH
66723: LD_VAR 0 2
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 21
66734: PUSH
66735: LD_INT 1
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PPUSH
66746: CALL_OW 69
66750: PPUSH
66751: CALL 18465 0 1
66755: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66756: LD_ADDR_VAR 0 9
66760: PUSH
66761: LD_INT 22
66763: PUSH
66764: LD_VAR 0 2
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 2
66775: PUSH
66776: LD_INT 30
66778: PUSH
66779: LD_INT 0
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 30
66788: PUSH
66789: LD_INT 1
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: LIST
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PPUSH
66805: CALL_OW 69
66809: ST_TO_ADDR
// crates := 0 ;
66810: LD_ADDR_VAR 0 4
66814: PUSH
66815: LD_INT 0
66817: ST_TO_ADDR
// oil := 0 ;
66818: LD_ADDR_VAR 0 5
66822: PUSH
66823: LD_INT 0
66825: ST_TO_ADDR
// sib := 0 ;
66826: LD_ADDR_VAR 0 6
66830: PUSH
66831: LD_INT 0
66833: ST_TO_ADDR
// if bases then
66834: LD_VAR 0 9
66838: IFFALSE 66944
// begin for j in bases do
66840: LD_ADDR_VAR 0 3
66844: PUSH
66845: LD_VAR 0 9
66849: PUSH
66850: FOR_IN
66851: IFFALSE 66942
// begin base := GetBase ( j ) ;
66853: LD_ADDR_VAR 0 8
66857: PUSH
66858: LD_VAR 0 3
66862: PPUSH
66863: CALL_OW 274
66867: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
66868: LD_ADDR_VAR 0 4
66872: PUSH
66873: LD_VAR 0 4
66877: PUSH
66878: LD_VAR 0 8
66882: PPUSH
66883: LD_INT 1
66885: PPUSH
66886: CALL_OW 275
66890: PLUS
66891: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
66892: LD_ADDR_VAR 0 5
66896: PUSH
66897: LD_VAR 0 5
66901: PUSH
66902: LD_VAR 0 8
66906: PPUSH
66907: LD_INT 2
66909: PPUSH
66910: CALL_OW 275
66914: PLUS
66915: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
66916: LD_ADDR_VAR 0 6
66920: PUSH
66921: LD_VAR 0 6
66925: PUSH
66926: LD_VAR 0 8
66930: PPUSH
66931: LD_INT 3
66933: PPUSH
66934: CALL_OW 275
66938: PLUS
66939: ST_TO_ADDR
// end ;
66940: GO 66850
66942: POP
66943: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
66944: LD_STRING setSpecText(
66946: PUSH
66947: LD_VAR 0 2
66951: STR
66952: PUSH
66953: LD_STRING ,
66955: STR
66956: PUSH
66957: LD_INT 2
66959: STR
66960: PUSH
66961: LD_STRING ,
66963: STR
66964: PUSH
66965: LD_VAR 0 4
66969: STR
66970: PUSH
66971: LD_STRING )
66973: STR
66974: PPUSH
66975: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
66979: LD_STRING setSpecText(
66981: PUSH
66982: LD_VAR 0 2
66986: STR
66987: PUSH
66988: LD_STRING ,
66990: STR
66991: PUSH
66992: LD_INT 3
66994: STR
66995: PUSH
66996: LD_STRING ,
66998: STR
66999: PUSH
67000: LD_VAR 0 5
67004: STR
67005: PUSH
67006: LD_STRING )
67008: STR
67009: PPUSH
67010: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
67014: LD_STRING setSpecText(
67016: PUSH
67017: LD_VAR 0 2
67021: STR
67022: PUSH
67023: LD_STRING ,
67025: STR
67026: PUSH
67027: LD_INT 4
67029: STR
67030: PUSH
67031: LD_STRING ,
67033: STR
67034: PUSH
67035: LD_VAR 0 6
67039: STR
67040: PUSH
67041: LD_STRING )
67043: STR
67044: PPUSH
67045: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
67049: LD_STRING setSpecText(
67051: PUSH
67052: LD_VAR 0 2
67056: STR
67057: PUSH
67058: LD_STRING ,
67060: STR
67061: PUSH
67062: LD_INT 5
67064: STR
67065: PUSH
67066: LD_STRING ,
67068: STR
67069: PUSH
67070: LD_VAR 0 7
67074: STR
67075: PUSH
67076: LD_STRING )
67078: STR
67079: PPUSH
67080: CALL_OW 559
// end ; end ;
67084: GO 66700
67086: POP
67087: POP
// end ;
67088: LD_VAR 0 1
67092: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
67093: LD_INT 2
67095: PUSH
67096: LD_INT 30
67098: PUSH
67099: LD_INT 0
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 30
67108: PUSH
67109: LD_INT 1
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: LIST
67120: PPUSH
67121: CALL_OW 69
67125: IFFALSE 67135
67127: GO 67129
67129: DISABLE
// begin enable ;
67130: ENABLE
// UpdateSpectatorBar ;
67131: CALL 66676 0 0
// end ;
67135: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
67136: LD_INT 0
67138: PPUSH
// end ;
67139: LD_VAR 0 12
67143: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
67144: LD_INT 0
67146: PPUSH
67147: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
67148: LD_VAR 0 1
67152: NOT
67153: IFTRUE 67172
67155: PUSH
67156: LD_VAR 0 2
67160: PPUSH
67161: LD_VAR 0 3
67165: PPUSH
67166: CALL_OW 488
67170: NOT
67171: OR
67172: IFTRUE 67207
67174: PUSH
67175: LD_VAR 0 1
67179: PPUSH
67180: CALL_OW 266
67184: PUSH
67185: LD_INT 3
67187: NONEQUAL
67188: IFFALSE 67206
67190: PUSH
67191: LD_VAR 0 1
67195: PPUSH
67196: CALL_OW 247
67200: PUSH
67201: LD_INT 1
67203: EQUAL
67204: NOT
67205: AND
67206: OR
67207: IFFALSE 67211
// exit ;
67209: GO 67493
// if GetType ( factory ) = unit_human then
67211: LD_VAR 0 1
67215: PPUSH
67216: CALL_OW 247
67220: PUSH
67221: LD_INT 1
67223: EQUAL
67224: IFFALSE 67241
// factory := IsInUnit ( factory ) ;
67226: LD_ADDR_VAR 0 1
67230: PUSH
67231: LD_VAR 0 1
67235: PPUSH
67236: CALL_OW 310
67240: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
67241: LD_VAR 0 1
67245: PPUSH
67246: CALL_OW 266
67250: PUSH
67251: LD_INT 3
67253: NONEQUAL
67254: IFFALSE 67258
// exit ;
67256: GO 67493
// for i := 1 to Count ( factoryWaypoints ) do
67258: LD_ADDR_VAR 0 5
67262: PUSH
67263: DOUBLE
67264: LD_INT 1
67266: DEC
67267: ST_TO_ADDR
67268: LD_EXP 61
67272: PPUSH
67273: CALL 18465 0 1
67277: PUSH
67278: FOR_TO
67279: IFFALSE 67441
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
67281: LD_VAR 0 2
67285: PPUSH
67286: LD_VAR 0 3
67290: PPUSH
67291: CALL_OW 428
67295: PUSH
67296: LD_EXP 61
67300: PUSH
67301: LD_VAR 0 5
67305: ARRAY
67306: PUSH
67307: LD_INT 2
67309: ARRAY
67310: EQUAL
67311: IFFALSE 67343
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
67313: LD_ADDR_EXP 61
67317: PUSH
67318: LD_EXP 61
67322: PPUSH
67323: LD_VAR 0 5
67327: PPUSH
67328: CALL_OW 3
67332: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67333: CALL 67498 0 0
// exit ;
67337: POP
67338: POP
67339: GO 67493
// end else
67341: GO 67439
// if factory = factoryWaypoints [ i ] [ 2 ] then
67343: LD_VAR 0 1
67347: PUSH
67348: LD_EXP 61
67352: PUSH
67353: LD_VAR 0 5
67357: ARRAY
67358: PUSH
67359: LD_INT 2
67361: ARRAY
67362: EQUAL
67363: IFFALSE 67439
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
67365: LD_ADDR_EXP 61
67369: PUSH
67370: LD_EXP 61
67374: PPUSH
67375: LD_VAR 0 5
67379: PPUSH
67380: CALL_OW 3
67384: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
67385: LD_ADDR_EXP 61
67389: PUSH
67390: LD_EXP 61
67394: PPUSH
67395: LD_VAR 0 1
67399: PPUSH
67400: CALL_OW 255
67404: PUSH
67405: LD_VAR 0 1
67409: PUSH
67410: LD_VAR 0 2
67414: PUSH
67415: LD_VAR 0 3
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: PPUSH
67426: CALL 54441 0 2
67430: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67431: CALL 67498 0 0
// exit ;
67435: POP
67436: POP
67437: GO 67493
// end ; end ;
67439: GO 67278
67441: POP
67442: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
67443: LD_ADDR_EXP 61
67447: PUSH
67448: LD_EXP 61
67452: PPUSH
67453: LD_VAR 0 1
67457: PPUSH
67458: CALL_OW 255
67462: PUSH
67463: LD_VAR 0 1
67467: PUSH
67468: LD_VAR 0 2
67472: PUSH
67473: LD_VAR 0 3
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: PPUSH
67484: CALL 54441 0 2
67488: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67489: CALL 67498 0 0
// end ;
67493: LD_VAR 0 4
67497: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
67498: LD_INT 0
67500: PPUSH
67501: PPUSH
67502: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
67503: LD_STRING resetFactoryWaypoint();
67505: PPUSH
67506: CALL_OW 559
// if factoryWaypoints then
67510: LD_EXP 61
67514: IFFALSE 67635
// begin list := factoryWaypoints ;
67516: LD_ADDR_VAR 0 3
67520: PUSH
67521: LD_EXP 61
67525: ST_TO_ADDR
// for i := 1 to list do
67526: LD_ADDR_VAR 0 2
67530: PUSH
67531: DOUBLE
67532: LD_INT 1
67534: DEC
67535: ST_TO_ADDR
67536: LD_VAR 0 3
67540: PUSH
67541: FOR_TO
67542: IFFALSE 67633
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67544: LD_STRING setFactoryWaypointXY(
67546: PUSH
67547: LD_VAR 0 3
67551: PUSH
67552: LD_VAR 0 2
67556: ARRAY
67557: PUSH
67558: LD_INT 1
67560: ARRAY
67561: STR
67562: PUSH
67563: LD_STRING ,
67565: STR
67566: PUSH
67567: LD_VAR 0 3
67571: PUSH
67572: LD_VAR 0 2
67576: ARRAY
67577: PUSH
67578: LD_INT 2
67580: ARRAY
67581: STR
67582: PUSH
67583: LD_STRING ,
67585: STR
67586: PUSH
67587: LD_VAR 0 3
67591: PUSH
67592: LD_VAR 0 2
67596: ARRAY
67597: PUSH
67598: LD_INT 3
67600: ARRAY
67601: STR
67602: PUSH
67603: LD_STRING ,
67605: STR
67606: PUSH
67607: LD_VAR 0 3
67611: PUSH
67612: LD_VAR 0 2
67616: ARRAY
67617: PUSH
67618: LD_INT 4
67620: ARRAY
67621: STR
67622: PUSH
67623: LD_STRING )
67625: STR
67626: PPUSH
67627: CALL_OW 559
67631: GO 67541
67633: POP
67634: POP
// end ; end ;
67635: LD_VAR 0 1
67639: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
67640: LD_INT 0
67642: PPUSH
// if HexInfo ( x , y ) = warehouse then
67643: LD_VAR 0 2
67647: PPUSH
67648: LD_VAR 0 3
67652: PPUSH
67653: CALL_OW 428
67657: PUSH
67658: LD_VAR 0 1
67662: EQUAL
67663: IFFALSE 67690
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
67665: LD_ADDR_EXP 63
67669: PUSH
67670: LD_EXP 63
67674: PPUSH
67675: LD_VAR 0 1
67679: PPUSH
67680: LD_INT 0
67682: PPUSH
67683: CALL_OW 1
67687: ST_TO_ADDR
67688: GO 67741
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
67690: LD_ADDR_EXP 63
67694: PUSH
67695: LD_EXP 63
67699: PPUSH
67700: LD_VAR 0 1
67704: PPUSH
67705: LD_VAR 0 1
67709: PPUSH
67710: CALL_OW 255
67714: PUSH
67715: LD_VAR 0 1
67719: PUSH
67720: LD_VAR 0 2
67724: PUSH
67725: LD_VAR 0 3
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: PPUSH
67736: CALL_OW 1
67740: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
67741: CALL 67750 0 0
// end ;
67745: LD_VAR 0 4
67749: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
67750: LD_INT 0
67752: PPUSH
67753: PPUSH
67754: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
67755: LD_STRING resetWarehouseGatheringPoints();
67757: PPUSH
67758: CALL_OW 559
// if warehouseGatheringPoints then
67762: LD_EXP 63
67766: IFFALSE 67892
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
67768: LD_ADDR_VAR 0 3
67772: PUSH
67773: LD_EXP 63
67777: PPUSH
67778: CALL 58375 0 1
67782: ST_TO_ADDR
// for i := 1 to list do
67783: LD_ADDR_VAR 0 2
67787: PUSH
67788: DOUBLE
67789: LD_INT 1
67791: DEC
67792: ST_TO_ADDR
67793: LD_VAR 0 3
67797: PUSH
67798: FOR_TO
67799: IFFALSE 67890
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67801: LD_STRING setWarehouseGatheringPointXY(
67803: PUSH
67804: LD_VAR 0 3
67808: PUSH
67809: LD_VAR 0 2
67813: ARRAY
67814: PUSH
67815: LD_INT 1
67817: ARRAY
67818: STR
67819: PUSH
67820: LD_STRING ,
67822: STR
67823: PUSH
67824: LD_VAR 0 3
67828: PUSH
67829: LD_VAR 0 2
67833: ARRAY
67834: PUSH
67835: LD_INT 2
67837: ARRAY
67838: STR
67839: PUSH
67840: LD_STRING ,
67842: STR
67843: PUSH
67844: LD_VAR 0 3
67848: PUSH
67849: LD_VAR 0 2
67853: ARRAY
67854: PUSH
67855: LD_INT 3
67857: ARRAY
67858: STR
67859: PUSH
67860: LD_STRING ,
67862: STR
67863: PUSH
67864: LD_VAR 0 3
67868: PUSH
67869: LD_VAR 0 2
67873: ARRAY
67874: PUSH
67875: LD_INT 4
67877: ARRAY
67878: STR
67879: PUSH
67880: LD_STRING )
67882: STR
67883: PPUSH
67884: CALL_OW 559
67888: GO 67798
67890: POP
67891: POP
// end ; end ;
67892: LD_VAR 0 1
67896: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
67897: LD_INT 0
67899: PPUSH
67900: PPUSH
// if not mpSidePositions then
67901: LD_EXP 7
67905: NOT
67906: IFFALSE 67910
// exit ;
67908: GO 67981
// result :=  ;
67910: LD_ADDR_VAR 0 1
67914: PUSH
67915: LD_STRING 
67917: ST_TO_ADDR
// for i := 1 to 8 do
67918: LD_ADDR_VAR 0 2
67922: PUSH
67923: DOUBLE
67924: LD_INT 1
67926: DEC
67927: ST_TO_ADDR
67928: LD_INT 8
67930: PUSH
67931: FOR_TO
67932: IFFALSE 67962
// begin result := result & mpSidePositions [ i ] & ; ;
67934: LD_ADDR_VAR 0 1
67938: PUSH
67939: LD_VAR 0 1
67943: PUSH
67944: LD_EXP 7
67948: PUSH
67949: LD_VAR 0 2
67953: ARRAY
67954: STR
67955: PUSH
67956: LD_STRING ;
67958: STR
67959: ST_TO_ADDR
// end ;
67960: GO 67931
67962: POP
67963: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
67964: LD_STRING setMultiplayerRealPosition("
67966: PUSH
67967: LD_VAR 0 1
67971: STR
67972: PUSH
67973: LD_STRING ");
67975: STR
67976: PPUSH
67977: CALL_OW 559
// end ;
67981: LD_VAR 0 1
67985: RET
