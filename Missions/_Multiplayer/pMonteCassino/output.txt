// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 4237 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 4621 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 0
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 0
  48: PUSH
  49: LD_INT 0
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 0
  60: PUSH
  61: LD_INT 0
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 0
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: LD_INT 1
  90: PUSH
  91: EMPTY
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: LIST
 111: LIST
 112: LIST
 113: LIST
 114: ST_TO_ADDR
// mpGameSettingsValues := [ [ ] , [ 9 , 12 , 15 , 24 ] , [ 3 , 5 , 7 , 9 ] , [ [ 0 , 0 , 0 ] , [ 1000 , 300 , 0 ] , [ 2000 , 750 , 100 ] , [ 3000 , 1500 , 300 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ ] , [ ] , [ ] , [ 0 , 1 ] , [ ] , [ ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 5 5$0 , 10 10$0 , 15 15$0 , 20 20$0 ] , [ 60 60$0 , 90 90$0 , 120 120$0 ] , ] ;
 115: LD_ADDR_EXP 5
 119: PUSH
 120: EMPTY
 121: PUSH
 122: LD_INT 9
 124: PUSH
 125: LD_INT 12
 127: PUSH
 128: LD_INT 15
 130: PUSH
 131: LD_INT 24
 133: PUSH
 134: EMPTY
 135: LIST
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 3
 142: PUSH
 143: LD_INT 5
 145: PUSH
 146: LD_INT 7
 148: PUSH
 149: LD_INT 9
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: LIST
 156: LIST
 157: PUSH
 158: LD_INT 0
 160: PUSH
 161: LD_INT 0
 163: PUSH
 164: LD_INT 0
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 1000
 174: PUSH
 175: LD_INT 300
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: PUSH
 186: LD_INT 2000
 188: PUSH
 189: LD_INT 750
 191: PUSH
 192: LD_INT 100
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_INT 3000
 202: PUSH
 203: LD_INT 1500
 205: PUSH
 206: LD_INT 300
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 3
 228: PUSH
 229: LD_INT 4
 231: PUSH
 232: EMPTY
 233: LIST
 234: LIST
 235: LIST
 236: LIST
 237: PUSH
 238: LD_INT 0
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 2
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_INT 0
 254: PUSH
 255: LD_INT 1
 257: PUSH
 258: LD_INT 2
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: PUSH
 266: EMPTY
 267: PUSH
 268: EMPTY
 269: PUSH
 270: EMPTY
 271: PUSH
 272: LD_INT 0
 274: PUSH
 275: LD_INT 1
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: EMPTY
 283: PUSH
 284: EMPTY
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 13650
 291: PUSH
 292: LD_INT 7350
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 0
 302: PUSH
 303: LD_INT 2
 305: PUSH
 306: LD_INT 4
 308: PUSH
 309: LD_INT 6
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: PUSH
 320: EMPTY
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: LD_INT 31500
 330: PUSH
 331: LD_INT 52500
 333: PUSH
 334: LD_INT 63000
 336: PUSH
 337: LD_INT 94500
 339: PUSH
 340: LD_INT 126000
 342: PUSH
 343: LD_INT 189000
 345: PUSH
 346: LD_INT 210000
 348: PUSH
 349: LD_INT 252000
 351: PUSH
 352: LD_INT 378000
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: LIST
 365: LIST
 366: LIST
 367: PUSH
 368: EMPTY
 369: PUSH
 370: EMPTY
 371: PUSH
 372: LD_INT 10500
 374: PUSH
 375: LD_INT 21000
 377: PUSH
 378: LD_INT 31500
 380: PUSH
 381: LD_INT 42000
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: PUSH
 390: LD_INT 126000
 392: PUSH
 393: LD_INT 189000
 395: PUSH
 396: LD_INT 252000
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: ST_TO_ADDR
// mpGameSettings := [ 0 , 24 , 4 , [ 1000 , 300 , 0 ] , 3 , 1 , 2 , 0 , 0 , 0 , 1 , - 1 , 0 , 0 0$20 , 3 , 0 , 0 , 0 , 0 , 0 , 3 3$0 , 60 60$0 ] ;
 428: LD_ADDR_EXP 6
 432: PUSH
 433: LD_INT 0
 435: PUSH
 436: LD_INT 24
 438: PUSH
 439: LD_INT 4
 441: PUSH
 442: LD_INT 1000
 444: PUSH
 445: LD_INT 300
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: PUSH
 456: LD_INT 3
 458: PUSH
 459: LD_INT 1
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 0
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: LD_INT 1
 479: NEG
 480: PUSH
 481: LD_INT 0
 483: PUSH
 484: LD_INT 700
 486: PUSH
 487: LD_INT 3
 489: PUSH
 490: LD_INT 0
 492: PUSH
 493: LD_INT 0
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: LD_INT 0
 501: PUSH
 502: LD_INT 0
 504: PUSH
 505: LD_INT 6300
 507: PUSH
 508: LD_INT 126000
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: ST_TO_ADDR
// mpGameType := GameTypeArmsArtifact ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_INT 7
 542: ST_TO_ADDR
// your_side := 1 ;
 543: LD_ADDR_OWVAR 2
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 551: LD_ADDR_EXP 7
 555: PUSH
 556: LD_INT 1
 558: PUSH
 559: LD_INT 2
 561: PUSH
 562: LD_INT 3
 564: PUSH
 565: LD_INT 4
 567: PUSH
 568: LD_INT 5
 570: PUSH
 571: LD_INT 6
 573: PUSH
 574: LD_INT 7
 576: PUSH
 577: LD_INT 8
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 ] ;
 590: LD_ADDR_EXP 8
 594: PUSH
 595: LD_INT 1
 597: PUSH
 598: LD_INT 1
 600: PUSH
 601: LD_INT 2
 603: PUSH
 604: LD_INT 2
 606: PUSH
 607: LD_INT 2
 609: PUSH
 610: LD_INT 3
 612: PUSH
 613: LD_INT 3
 615: PUSH
 616: LD_INT 3
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 629: LD_ADDR_EXP 9
 633: PUSH
 634: LD_INT 1
 636: PUSH
 637: LD_INT 2
 639: PUSH
 640: LD_INT 3
 642: PUSH
 643: LD_INT 1
 645: PUSH
 646: LD_INT 2
 648: PUSH
 649: LD_INT 3
 651: PUSH
 652: LD_INT 1
 654: PUSH
 655: LD_INT 2
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 , 5 ] , [ 6 , 7 , 8 ] ] ;
 668: LD_ADDR_EXP 10
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 3
 685: PUSH
 686: LD_INT 4
 688: PUSH
 689: LD_INT 5
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 6
 699: PUSH
 700: LD_INT 7
 702: PUSH
 703: LD_INT 8
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: LIST
 715: ST_TO_ADDR
// mpTeamGame := true ;
 716: LD_ADDR_EXP 11
 720: PUSH
 721: LD_INT 1
 723: ST_TO_ADDR
// mpMapSize := [ 160 , 290 ] ;
 724: LD_ADDR_EXP 29
 728: PUSH
 729: LD_INT 160
 731: PUSH
 732: LD_INT 290
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: ST_TO_ADDR
// end ;
 739: LD_VAR 0 1
 743: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
 748: PPUSH
 749: PPUSH
 750: PPUSH
 751: PPUSH
 752: PPUSH
// mpBuildUpAreas := [ buildUpCenterArea , buildUpCenterArea , buildUpNorthArea , buildUpNorthArea , buildUpNorthArea , buildUpSouthArea , buildUpSouthArea , buildUpSouthArea ] ;
 753: LD_ADDR_EXP 19
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: LD_INT 3
 763: PUSH
 764: LD_INT 1
 766: PUSH
 767: LD_INT 1
 769: PUSH
 770: LD_INT 1
 772: PUSH
 773: LD_INT 2
 775: PUSH
 776: LD_INT 2
 778: PUSH
 779: LD_INT 2
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 792: LD_ADDR_EXP 18
 796: PUSH
 797: EMPTY
 798: PUSH
 799: LD_EXP 19
 803: UNION
 804: ST_TO_ADDR
// if gameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
 805: LD_VAR 0 1
 809: PUSH
 810: LD_INT 2
 812: PUSH
 813: LD_INT 6
 815: PUSH
 816: LD_INT 7
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: LIST
 823: IN
 824: IFFALSE 836
// baseLevel := 1 else
 826: LD_ADDR_VAR 0 7
 830: PUSH
 831: LD_INT 1
 833: ST_TO_ADDR
 834: GO 850
// baseLevel := mpGameSettings [ 1 ] ;
 836: LD_ADDR_VAR 0 7
 840: PUSH
 841: LD_EXP 6
 845: PUSH
 846: LD_INT 1
 848: ARRAY
 849: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 850: LD_ADDR_EXP 24
 854: PUSH
 855: LD_EXP 6
 859: PUSH
 860: LD_INT 2
 862: ARRAY
 863: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 864: LD_ADDR_EXP 25
 868: PUSH
 869: LD_EXP 6
 873: PUSH
 874: LD_INT 3
 876: ARRAY
 877: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 878: LD_ADDR_EXP 15
 882: PUSH
 883: LD_EXP 6
 887: PUSH
 888: LD_INT 4
 890: ARRAY
 891: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 892: LD_ADDR_EXP 27
 896: PUSH
 897: LD_EXP 6
 901: PUSH
 902: LD_INT 5
 904: ARRAY
 905: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 906: LD_ADDR_VAR 0 5
 910: PUSH
 911: LD_EXP 6
 915: PUSH
 916: LD_INT 6
 918: ARRAY
 919: PUSH
 920: LD_INT 0
 922: GREATER
 923: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 924: LD_ADDR_VAR 0 6
 928: PUSH
 929: LD_EXP 6
 933: PUSH
 934: LD_INT 7
 936: ARRAY
 937: PUSH
 938: LD_INT 0
 940: GREATER
 941: ST_TO_ADDR
// kingCamArea := 0 ;
 942: LD_ADDR_EXP 2
 946: PUSH
 947: LD_INT 0
 949: ST_TO_ADDR
// kingArea := 0 ;
 950: LD_ADDR_EXP 1
 954: PUSH
 955: LD_INT 0
 957: ST_TO_ADDR
// if gameType = GameTypeKing then
 958: LD_VAR 0 1
 962: PUSH
 963: LD_INT 3
 965: EQUAL
 966: IFFALSE 1006
// begin mpKingArea := 0 ;
 968: LD_ADDR_EXP 34
 972: PUSH
 973: LD_INT 0
 975: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
 976: LD_ADDR_EXP 35
 980: PUSH
 981: LD_EXP 6
 985: PUSH
 986: LD_INT 8
 988: ARRAY
 989: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
 990: LD_ADDR_EXP 37
 994: PUSH
 995: LD_EXP 6
 999: PUSH
1000: LD_INT 10
1002: ARRAY
1003: ST_TO_ADDR
// end else
1004: GO 1030
// begin mpKingArea := 0 ;
1006: LD_ADDR_EXP 34
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// mpPoints := 0 ;
1014: LD_ADDR_EXP 35
1018: PUSH
1019: LD_INT 0
1021: ST_TO_ADDR
// mpEmissions := 0 ;
1022: LD_ADDR_EXP 37
1026: PUSH
1027: LD_INT 0
1029: ST_TO_ADDR
// end ; mpVehicles := [ [ [ us_morphling , engine_siberite , control_manual , us_heavy_gun ] , [ us_morphling , engine_siberite , control_manual , us_heavy_gun ] , [ us_morphling , engine_siberite , control_computer , us_cargo_bay ] ] , [ [ ar_half_tracked , engine_siberite , control_manual , ar_gun ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] ] , [ [ ru_heavy_wheeled , engine_siberite , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_siberite , control_manual , ru_heavy_gun ] , [ ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay ] ] ] ;
1030: LD_ADDR_EXP 36
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 3
1040: PUSH
1041: LD_INT 1
1043: PUSH
1044: LD_INT 6
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_INT 5
1055: PUSH
1056: LD_INT 3
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 6
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 5
1073: PUSH
1074: LD_INT 3
1076: PUSH
1077: LD_INT 3
1079: PUSH
1080: LD_INT 12
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: PUSH
1094: LD_INT 14
1096: PUSH
1097: LD_INT 3
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: LD_INT 27
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 14
1114: PUSH
1115: LD_INT 3
1117: PUSH
1118: LD_INT 1
1120: PUSH
1121: LD_INT 27
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 14
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: LD_INT 5
1138: PUSH
1139: LD_INT 32
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 23
1155: PUSH
1156: LD_INT 3
1158: PUSH
1159: LD_INT 1
1161: PUSH
1162: LD_INT 46
1164: PUSH
1165: EMPTY
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: PUSH
1171: LD_INT 23
1173: PUSH
1174: LD_INT 3
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 46
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 21
1191: PUSH
1192: LD_INT 3
1194: PUSH
1195: LD_INT 3
1197: PUSH
1198: LD_INT 51
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: LIST
1216: ST_TO_ADDR
// mpSharedVision := mpGameSettings [ 11 ] ;
1217: LD_ADDR_EXP 16
1221: PUSH
1222: LD_EXP 6
1226: PUSH
1227: LD_INT 11
1229: ARRAY
1230: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1231: LD_ADDR_EXP 22
1235: PUSH
1236: LD_EXP 6
1240: PUSH
1241: LD_INT 12
1243: ARRAY
1244: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1245: LD_ADDR_EXP 26
1249: PUSH
1250: LD_EXP 6
1254: PUSH
1255: LD_INT 13
1257: ARRAY
1258: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1259: LD_ADDR_EXP 33
1263: PUSH
1264: LD_EXP 6
1268: PUSH
1269: LD_INT 14
1271: ARRAY
1272: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1273: LD_ADDR_EXP 30
1277: PUSH
1278: LD_EXP 6
1282: PUSH
1283: LD_INT 15
1285: ARRAY
1286: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1287: LD_ADDR_EXP 28
1291: PUSH
1292: LD_EXP 6
1296: PUSH
1297: LD_INT 18
1299: ARRAY
1300: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1301: LD_ADDR_EXP 20
1305: PUSH
1306: LD_EXP 6
1310: PUSH
1311: LD_INT 21
1313: ARRAY
1314: ST_TO_ADDR
// mpTimeToWin := mpGameSettings [ 22 ] ;
1315: LD_ADDR_EXP 45
1319: PUSH
1320: LD_EXP 6
1324: PUSH
1325: LD_INT 22
1327: ARRAY
1328: ST_TO_ADDR
// mpApemansArea := [ base1ApeArea , base2ApeArea , base3ApeArea , base4ApeArea , base5ApeArea , base6ApeArea , base7ApeArea , base8ApeArea ] ;
1329: LD_ADDR_EXP 31
1333: PUSH
1334: LD_INT 5
1336: PUSH
1337: LD_INT 6
1339: PUSH
1340: LD_INT 7
1342: PUSH
1343: LD_INT 8
1345: PUSH
1346: LD_INT 9
1348: PUSH
1349: LD_INT 10
1351: PUSH
1352: LD_INT 11
1354: PUSH
1355: LD_INT 12
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( customSpawnArea1 , 1 ) , GetBuildingFromArea ( customSpawnArea2 , 4 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 2 ) , GetBuildingFromArea ( depotArea5 , 2 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 5 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1368: LD_ADDR_VAR 0 8
1372: PUSH
1373: LD_INT 92
1375: PPUSH
1376: LD_INT 1
1378: PPUSH
1379: CALL 58482 0 2
1383: PUSH
1384: LD_INT 91
1386: PPUSH
1387: LD_INT 4
1389: PPUSH
1390: CALL 58482 0 2
1394: PUSH
1395: LD_INT 15
1397: PPUSH
1398: LD_INT 2
1400: PPUSH
1401: CALL 58482 0 2
1405: PUSH
1406: LD_INT 16
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: CALL 58482 0 2
1416: PUSH
1417: LD_INT 17
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL 58482 0 2
1427: PUSH
1428: LD_INT 18
1430: PPUSH
1431: LD_INT 5
1433: PPUSH
1434: CALL 58482 0 2
1438: PUSH
1439: LD_INT 19
1441: PPUSH
1442: LD_INT 5
1444: PPUSH
1445: CALL 58482 0 2
1449: PUSH
1450: LD_INT 20
1452: PPUSH
1453: LD_INT 5
1455: PPUSH
1456: CALL 58482 0 2
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: DOUBLE
1477: LD_INT 1
1479: DEC
1480: ST_TO_ADDR
1481: LD_VAR 0 8
1485: PPUSH
1486: CALL 17797 0 1
1490: PUSH
1491: FOR_TO
1492: IFFALSE 1596
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1494: LD_ADDR_EXP 21
1498: PUSH
1499: LD_EXP 21
1503: PPUSH
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_VAR 0 8
1513: PUSH
1514: LD_VAR 0 3
1518: ARRAY
1519: PUSH
1520: LD_INT 1
1522: ARRAY
1523: PPUSH
1524: LD_VAR 0 8
1528: PUSH
1529: LD_VAR 0 3
1533: ARRAY
1534: PUSH
1535: LD_INT 3
1537: ARRAY
1538: PPUSH
1539: LD_INT 10
1541: PPUSH
1542: CALL_OW 272
1546: PUSH
1547: LD_VAR 0 8
1551: PUSH
1552: LD_VAR 0 3
1556: ARRAY
1557: PUSH
1558: LD_INT 2
1560: ARRAY
1561: PPUSH
1562: LD_VAR 0 8
1566: PUSH
1567: LD_VAR 0 3
1571: ARRAY
1572: PUSH
1573: LD_INT 3
1575: ARRAY
1576: PPUSH
1577: LD_INT 10
1579: PPUSH
1580: CALL_OW 273
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 1
1593: ST_TO_ADDR
1594: GO 1491
1596: POP
1597: POP
// if hasOil then
1598: LD_VAR 0 5
1602: IFFALSE 1741
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1604: LD_ADDR_VAR 0 4
1608: PUSH
1609: LD_EXP 6
1613: PUSH
1614: LD_INT 6
1616: ARRAY
1617: PUSH
1618: LD_INT 2
1620: EQUAL
1621: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1622: LD_ADDR_EXP 12
1626: PUSH
1627: LD_INT 21
1629: PPUSH
1630: LD_VAR 0 4
1634: PPUSH
1635: CALL 58315 0 2
1639: PUSH
1640: LD_INT 23
1642: PPUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: CALL 58315 0 2
1652: PUSH
1653: LD_INT 25
1655: PPUSH
1656: LD_VAR 0 4
1660: PPUSH
1661: CALL 58315 0 2
1665: PUSH
1666: LD_INT 27
1668: PPUSH
1669: LD_VAR 0 4
1673: PPUSH
1674: CALL 58315 0 2
1678: PUSH
1679: LD_INT 29
1681: PPUSH
1682: LD_VAR 0 4
1686: PPUSH
1687: CALL 58315 0 2
1691: PUSH
1692: LD_INT 31
1694: PPUSH
1695: LD_VAR 0 4
1699: PPUSH
1700: CALL 58315 0 2
1704: PUSH
1705: LD_INT 33
1707: PPUSH
1708: LD_VAR 0 4
1712: PPUSH
1713: CALL 58315 0 2
1717: PUSH
1718: LD_INT 35
1720: PPUSH
1721: LD_VAR 0 4
1725: PPUSH
1726: CALL 58315 0 2
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// end ; if hasSib then
1741: LD_VAR 0 6
1745: IFFALSE 1884
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1747: LD_ADDR_VAR 0 4
1751: PUSH
1752: LD_EXP 6
1756: PUSH
1757: LD_INT 7
1759: ARRAY
1760: PUSH
1761: LD_INT 2
1763: EQUAL
1764: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1765: LD_ADDR_EXP 13
1769: PUSH
1770: LD_INT 22
1772: PPUSH
1773: LD_VAR 0 4
1777: PPUSH
1778: CALL 58315 0 2
1782: PUSH
1783: LD_INT 24
1785: PPUSH
1786: LD_VAR 0 4
1790: PPUSH
1791: CALL 58315 0 2
1795: PUSH
1796: LD_INT 26
1798: PPUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: CALL 58315 0 2
1808: PUSH
1809: LD_INT 28
1811: PPUSH
1812: LD_VAR 0 4
1816: PPUSH
1817: CALL 58315 0 2
1821: PUSH
1822: LD_INT 30
1824: PPUSH
1825: LD_VAR 0 4
1829: PPUSH
1830: CALL 58315 0 2
1834: PUSH
1835: LD_INT 32
1837: PPUSH
1838: LD_VAR 0 4
1842: PPUSH
1843: CALL 58315 0 2
1847: PUSH
1848: LD_INT 34
1850: PPUSH
1851: LD_VAR 0 4
1855: PPUSH
1856: CALL 58315 0 2
1860: PUSH
1861: LD_INT 36
1863: PPUSH
1864: LD_VAR 0 4
1868: PPUSH
1869: CALL 58315 0 2
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1884: LD_VAR 0 7
1888: PUSH
1889: LD_INT 1
1891: GREATEREQUAL
1892: IFFALSE 1997
// mpDepots := [ GetBuildingFromArea ( depotArea1 , 1 ) , GetBuildingFromArea ( depotArea2 , 4 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 2 ) , GetBuildingFromArea ( depotArea5 , 2 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 5 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1894: LD_ADDR_EXP 14
1898: PUSH
1899: LD_INT 13
1901: PPUSH
1902: LD_INT 1
1904: PPUSH
1905: CALL 58482 0 2
1909: PUSH
1910: LD_INT 14
1912: PPUSH
1913: LD_INT 4
1915: PPUSH
1916: CALL 58482 0 2
1920: PUSH
1921: LD_INT 15
1923: PPUSH
1924: LD_INT 2
1926: PPUSH
1927: CALL 58482 0 2
1931: PUSH
1932: LD_INT 16
1934: PPUSH
1935: LD_INT 2
1937: PPUSH
1938: CALL 58482 0 2
1942: PUSH
1943: LD_INT 17
1945: PPUSH
1946: LD_INT 2
1948: PPUSH
1949: CALL 58482 0 2
1953: PUSH
1954: LD_INT 18
1956: PPUSH
1957: LD_INT 5
1959: PPUSH
1960: CALL 58482 0 2
1964: PUSH
1965: LD_INT 19
1967: PPUSH
1968: LD_INT 5
1970: PPUSH
1971: CALL 58482 0 2
1975: PUSH
1976: LD_INT 20
1978: PPUSH
1979: LD_INT 5
1981: PPUSH
1982: CALL 58482 0 2
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: ST_TO_ADDR
// end ;
1997: LD_VAR 0 2
2001: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2002: GO 2004
2004: DISABLE
2005: LD_INT 0
2007: PPUSH
2008: PPUSH
2009: PPUSH
2010: PPUSH
2011: PPUSH
2012: PPUSH
2013: PPUSH
2014: PPUSH
// begin if not mpShipments then
2015: LD_EXP 27
2019: NOT
2020: IFFALSE 2024
// exit ;
2022: GO 2483
// case mpShipments of 1 :
2024: LD_EXP 27
2028: PUSH
2029: LD_INT 1
2031: DOUBLE
2032: EQUAL
2033: IFTRUE 2037
2035: GO 2072
2037: POP
// begin time := 0 0$30 ;
2038: LD_ADDR_VAR 0 5
2042: PUSH
2043: LD_INT 1050
2045: ST_TO_ADDR
// normalTime := 0 0$30 ;
2046: LD_ADDR_VAR 0 6
2050: PUSH
2051: LD_INT 1050
2053: ST_TO_ADDR
// maxTime := 1 1$20 ;
2054: LD_ADDR_VAR 0 8
2058: PUSH
2059: LD_INT 2800
2061: ST_TO_ADDR
// delayTime := 0 0$5 ;
2062: LD_ADDR_VAR 0 7
2066: PUSH
2067: LD_INT 175
2069: ST_TO_ADDR
// end ; 2 :
2070: GO 2202
2072: LD_INT 2
2074: DOUBLE
2075: EQUAL
2076: IFTRUE 2080
2078: GO 2115
2080: POP
// begin time := 0 0$25 ;
2081: LD_ADDR_VAR 0 5
2085: PUSH
2086: LD_INT 875
2088: ST_TO_ADDR
// normalTime := 0 0$25 ;
2089: LD_ADDR_VAR 0 6
2093: PUSH
2094: LD_INT 875
2096: ST_TO_ADDR
// maxTime := 1 1$10 ;
2097: LD_ADDR_VAR 0 8
2101: PUSH
2102: LD_INT 2450
2104: ST_TO_ADDR
// delayTime := 0 0$4 ;
2105: LD_ADDR_VAR 0 7
2109: PUSH
2110: LD_INT 140
2112: ST_TO_ADDR
// end ; 3 :
2113: GO 2202
2115: LD_INT 3
2117: DOUBLE
2118: EQUAL
2119: IFTRUE 2123
2121: GO 2158
2123: POP
// begin time := 0 0$20 ;
2124: LD_ADDR_VAR 0 5
2128: PUSH
2129: LD_INT 700
2131: ST_TO_ADDR
// normalTime := 0 0$20 ;
2132: LD_ADDR_VAR 0 6
2136: PUSH
2137: LD_INT 700
2139: ST_TO_ADDR
// maxTime := 1 1$00 ;
2140: LD_ADDR_VAR 0 8
2144: PUSH
2145: LD_INT 2100
2147: ST_TO_ADDR
// delayTime := 0 0$3 ;
2148: LD_ADDR_VAR 0 7
2152: PUSH
2153: LD_INT 105
2155: ST_TO_ADDR
// end ; 4 :
2156: GO 2202
2158: LD_INT 4
2160: DOUBLE
2161: EQUAL
2162: IFTRUE 2166
2164: GO 2201
2166: POP
// begin time := 0 0$15 ;
2167: LD_ADDR_VAR 0 5
2171: PUSH
2172: LD_INT 525
2174: ST_TO_ADDR
// normalTime := 0 0$15 ;
2175: LD_ADDR_VAR 0 6
2179: PUSH
2180: LD_INT 525
2182: ST_TO_ADDR
// maxTime := 0 0$55 ;
2183: LD_ADDR_VAR 0 8
2187: PUSH
2188: LD_INT 1925
2190: ST_TO_ADDR
// delayTime := 0 0$2 ;
2191: LD_ADDR_VAR 0 7
2195: PUSH
2196: LD_INT 70
2198: ST_TO_ADDR
// end ; end ;
2199: GO 2202
2201: POP
// areas := [ centerCratesArea ] ;
2202: LD_ADDR_VAR 0 4
2206: PUSH
2207: LD_INT 37
2209: PUSH
2210: EMPTY
2211: LIST
2212: ST_TO_ADDR
// tmp := [ 0 , 0 , playerCratesArea3 , playerCratesArea4 , playerCratesArea5 , playerCratesArea6 , playerCratesArea7 , playerCratesArea8 ] ;
2213: LD_ADDR_VAR 0 3
2217: PUSH
2218: LD_INT 0
2220: PUSH
2221: LD_INT 0
2223: PUSH
2224: LD_INT 38
2226: PUSH
2227: LD_INT 39
2229: PUSH
2230: LD_INT 40
2232: PUSH
2233: LD_INT 41
2235: PUSH
2236: LD_INT 42
2238: PUSH
2239: LD_INT 43
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: ST_TO_ADDR
// for i := 1 to 8 do
2252: LD_ADDR_VAR 0 1
2256: PUSH
2257: DOUBLE
2258: LD_INT 1
2260: DEC
2261: ST_TO_ADDR
2262: LD_INT 8
2264: PUSH
2265: FOR_TO
2266: IFFALSE 2337
// begin if not mpSidePositions [ i ] or tmp [ mpSidePositions [ i ] ] = 0 then
2268: LD_EXP 7
2272: PUSH
2273: LD_VAR 0 1
2277: ARRAY
2278: NOT
2279: IFTRUE 2303
2281: PUSH
2282: LD_VAR 0 3
2286: PUSH
2287: LD_EXP 7
2291: PUSH
2292: LD_VAR 0 1
2296: ARRAY
2297: ARRAY
2298: PUSH
2299: LD_INT 0
2301: EQUAL
2302: OR
2303: IFFALSE 2307
// continue ;
2305: GO 2265
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2307: LD_ADDR_VAR 0 4
2311: PUSH
2312: LD_VAR 0 4
2316: PUSH
2317: LD_VAR 0 3
2321: PUSH
2322: LD_EXP 7
2326: PUSH
2327: LD_VAR 0 1
2331: ARRAY
2332: ARRAY
2333: ADD
2334: ST_TO_ADDR
// end ;
2335: GO 2265
2337: POP
2338: POP
// x := 1 ;
2339: LD_ADDR_VAR 0 2
2343: PUSH
2344: LD_INT 1
2346: ST_TO_ADDR
// repeat wait ( time ) ;
2347: LD_VAR 0 5
2351: PPUSH
2352: CALL_OW 67
// x := Inc ( x ) ;
2356: LD_ADDR_VAR 0 2
2360: PUSH
2361: LD_VAR 0 2
2365: PPUSH
2366: CALL 55136 0 1
2370: ST_TO_ADDR
// if x > 5 then
2371: LD_VAR 0 2
2375: PUSH
2376: LD_INT 5
2378: GREATER
2379: IFFALSE 2389
// x := 1 ;
2381: LD_ADDR_VAR 0 2
2385: PUSH
2386: LD_INT 1
2388: ST_TO_ADDR
// for i in areas do
2389: LD_ADDR_VAR 0 1
2393: PUSH
2394: LD_VAR 0 4
2398: PUSH
2399: FOR_IN
2400: IFFALSE 2439
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2402: LD_VAR 0 1
2406: PPUSH
2407: LD_INT 1
2409: PPUSH
2410: CALL_OW 287
2414: PUSH
2415: LD_INT 30
2417: LESS
2418: IFFALSE 2437
// begin CreateCratesArea ( x , i , true ) ;
2420: LD_VAR 0 2
2424: PPUSH
2425: LD_VAR 0 1
2429: PPUSH
2430: LD_INT 1
2432: PPUSH
2433: CALL_OW 55
// end ; end ;
2437: GO 2399
2439: POP
2440: POP
// time := time + delayTime ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_VAR 0 5
2450: PUSH
2451: LD_VAR 0 7
2455: PLUS
2456: ST_TO_ADDR
// if time > maxTime then
2457: LD_VAR 0 5
2461: PUSH
2462: LD_VAR 0 8
2466: GREATER
2467: IFFALSE 2479
// time := normalTime ;
2469: LD_ADDR_VAR 0 5
2473: PUSH
2474: LD_VAR 0 6
2478: ST_TO_ADDR
// until false ;
2479: LD_INT 0
2481: IFFALSE 2347
// end ;
2483: PPOPN 8
2485: END
// export function PrepareArmsRaceVehiclesList ( pos , side , nation ) ; var j ; begin
2486: LD_INT 0
2488: PPUSH
2489: PPUSH
// uc_nation := nation ;
2490: LD_ADDR_OWVAR 21
2494: PUSH
2495: LD_VAR 0 3
2499: ST_TO_ADDR
// uc_direction := 2 ;
2500: LD_ADDR_OWVAR 24
2504: PUSH
2505: LD_INT 2
2507: ST_TO_ADDR
// case nation of 1 :
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 1
2515: DOUBLE
2516: EQUAL
2517: IFTRUE 2521
2519: GO 2644
2521: POP
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_crane , 100 ) ;
2522: LD_INT 5
2524: PPUSH
2525: LD_INT 3
2527: PPUSH
2528: LD_INT 3
2530: PPUSH
2531: LD_INT 13
2533: PPUSH
2534: LD_INT 100
2536: PPUSH
2537: CALL 20593 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2541: CALL_OW 45
2545: PPUSH
2546: LD_INT 158
2548: PPUSH
2549: LD_INT 147
2551: PPUSH
2552: LD_INT 13
2554: PPUSH
2555: LD_INT 0
2557: PPUSH
2558: CALL_OW 50
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_crane , 100 ) ;
2562: LD_INT 5
2564: PPUSH
2565: LD_INT 3
2567: PPUSH
2568: LD_INT 3
2570: PPUSH
2571: LD_INT 13
2573: PPUSH
2574: LD_INT 100
2576: PPUSH
2577: CALL 20593 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2581: CALL_OW 45
2585: PPUSH
2586: LD_INT 158
2588: PPUSH
2589: LD_INT 147
2591: PPUSH
2592: LD_INT 13
2594: PPUSH
2595: LD_INT 0
2597: PPUSH
2598: CALL_OW 50
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
2602: LD_INT 5
2604: PPUSH
2605: LD_INT 3
2607: PPUSH
2608: LD_INT 3
2610: PPUSH
2611: LD_INT 11
2613: PPUSH
2614: LD_INT 100
2616: PPUSH
2617: CALL 20593 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2621: CALL_OW 45
2625: PPUSH
2626: LD_INT 158
2628: PPUSH
2629: LD_INT 147
2631: PPUSH
2632: LD_INT 13
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: CALL_OW 50
// end ; 2 :
2642: GO 2907
2644: LD_INT 2
2646: DOUBLE
2647: EQUAL
2648: IFTRUE 2652
2650: GO 2775
2652: POP
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , ar_crane , 100 ) ;
2653: LD_INT 14
2655: PPUSH
2656: LD_INT 3
2658: PPUSH
2659: LD_INT 5
2661: PPUSH
2662: LD_INT 88
2664: PPUSH
2665: LD_INT 100
2667: PPUSH
2668: CALL 20593 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2672: CALL_OW 45
2676: PPUSH
2677: LD_INT 158
2679: PPUSH
2680: LD_INT 147
2682: PPUSH
2683: LD_INT 13
2685: PPUSH
2686: LD_INT 0
2688: PPUSH
2689: CALL_OW 50
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , ar_crane , 100 ) ;
2693: LD_INT 14
2695: PPUSH
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 5
2701: PPUSH
2702: LD_INT 88
2704: PPUSH
2705: LD_INT 100
2707: PPUSH
2708: CALL 20593 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2712: CALL_OW 45
2716: PPUSH
2717: LD_INT 158
2719: PPUSH
2720: LD_INT 147
2722: PPUSH
2723: LD_INT 13
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 50
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , ar_radar , 100 ) ;
2733: LD_INT 14
2735: PPUSH
2736: LD_INT 3
2738: PPUSH
2739: LD_INT 5
2741: PPUSH
2742: LD_INT 30
2744: PPUSH
2745: LD_INT 100
2747: PPUSH
2748: CALL 20593 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2752: CALL_OW 45
2756: PPUSH
2757: LD_INT 158
2759: PPUSH
2760: LD_INT 147
2762: PPUSH
2763: LD_INT 13
2765: PPUSH
2766: LD_INT 0
2768: PPUSH
2769: CALL_OW 50
// end ; 3 :
2773: GO 2907
2775: LD_INT 3
2777: DOUBLE
2778: EQUAL
2779: IFTRUE 2783
2781: GO 2906
2783: POP
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2784: LD_INT 22
2786: PPUSH
2787: LD_INT 3
2789: PPUSH
2790: LD_INT 3
2792: PPUSH
2793: LD_INT 52
2795: PPUSH
2796: LD_INT 100
2798: PPUSH
2799: CALL 20593 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2803: CALL_OW 45
2807: PPUSH
2808: LD_INT 158
2810: PPUSH
2811: LD_INT 147
2813: PPUSH
2814: LD_INT 13
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 50
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2824: LD_INT 22
2826: PPUSH
2827: LD_INT 3
2829: PPUSH
2830: LD_INT 3
2832: PPUSH
2833: LD_INT 52
2835: PPUSH
2836: LD_INT 100
2838: PPUSH
2839: CALL 20593 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2843: CALL_OW 45
2847: PPUSH
2848: LD_INT 158
2850: PPUSH
2851: LD_INT 147
2853: PPUSH
2854: LD_INT 13
2856: PPUSH
2857: LD_INT 0
2859: PPUSH
2860: CALL_OW 50
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_radar , 100 ) ;
2864: LD_INT 22
2866: PPUSH
2867: LD_INT 3
2869: PPUSH
2870: LD_INT 3
2872: PPUSH
2873: LD_INT 98
2875: PPUSH
2876: LD_INT 100
2878: PPUSH
2879: CALL 20593 0 5
// PlaceUnitXYR ( CreateVehicle , 158 , 147 , 13 , false ) ;
2883: CALL_OW 45
2887: PPUSH
2888: LD_INT 158
2890: PPUSH
2891: LD_INT 147
2893: PPUSH
2894: LD_INT 13
2896: PPUSH
2897: LD_INT 0
2899: PPUSH
2900: CALL_OW 50
// end ; end ;
2904: GO 2907
2906: POP
// end ;
2907: LD_VAR 0 4
2911: RET
// export function GetArmsRaceBuildingsList ( pos ) ; begin
2912: LD_INT 0
2914: PPUSH
// case pos of 1 :
2915: LD_VAR 0 1
2919: PUSH
2920: LD_INT 1
2922: DOUBLE
2923: EQUAL
2924: IFTRUE 2928
2926: GO 3504
2928: POP
// begin result := [ b_warehouse ^ GetBuildingFromArea ( dep1Area1 , 0 ) , b_warehouse ^ GetBuildingFromArea ( dep2Area1 , 3 ) , b_siberite_power ^ GetBuildingFromArea ( pw1Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw2Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw3Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw4Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw5Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw6Area1 , 5 ) , b_barracks ^ GetBuildingFromArea ( arm1Area1 , 5 ) , b_barracks ^ GetBuildingFromArea ( arm2Area1 , 3 ) , b_lab ^ GetBuildingFromArea ( lab1Area1 , 4 ) , b_factory ^ GetBuildingFromArea ( fac1Area1 , 1 ) , b_bunker ^ GetBuildingFromArea ( tw1Area1 , 0 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw2Area1 , 0 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw3Area1 , 0 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw4Area1 , 0 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw5Area1 , 0 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw6Area1 , 0 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw7Area1 , 3 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw8Area1 , 3 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw9Area1 , 3 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw10Area1 , 3 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw11Area1 , 3 ) ^ [ [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] ] ] ;
2929: LD_ADDR_VAR 0 2
2933: PUSH
2934: LD_INT 1
2936: PUSH
2937: LD_INT 44
2939: PPUSH
2940: LD_INT 0
2942: PPUSH
2943: CALL 58482 0 2
2947: ADD
2948: PUSH
2949: LD_INT 1
2951: PUSH
2952: LD_INT 45
2954: PPUSH
2955: LD_INT 3
2957: PPUSH
2958: CALL 58482 0 2
2962: ADD
2963: PUSH
2964: LD_INT 28
2966: PUSH
2967: LD_INT 46
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: CALL 58482 0 2
2977: ADD
2978: PUSH
2979: LD_INT 28
2981: PUSH
2982: LD_INT 47
2984: PPUSH
2985: LD_INT 5
2987: PPUSH
2988: CALL 58482 0 2
2992: ADD
2993: PUSH
2994: LD_INT 28
2996: PUSH
2997: LD_INT 48
2999: PPUSH
3000: LD_INT 5
3002: PPUSH
3003: CALL 58482 0 2
3007: ADD
3008: PUSH
3009: LD_INT 28
3011: PUSH
3012: LD_INT 49
3014: PPUSH
3015: LD_INT 5
3017: PPUSH
3018: CALL 58482 0 2
3022: ADD
3023: PUSH
3024: LD_INT 28
3026: PUSH
3027: LD_INT 50
3029: PPUSH
3030: LD_INT 5
3032: PPUSH
3033: CALL 58482 0 2
3037: ADD
3038: PUSH
3039: LD_INT 28
3041: PUSH
3042: LD_INT 51
3044: PPUSH
3045: LD_INT 5
3047: PPUSH
3048: CALL 58482 0 2
3052: ADD
3053: PUSH
3054: LD_INT 5
3056: PUSH
3057: LD_INT 52
3059: PPUSH
3060: LD_INT 5
3062: PPUSH
3063: CALL 58482 0 2
3067: ADD
3068: PUSH
3069: LD_INT 5
3071: PUSH
3072: LD_INT 53
3074: PPUSH
3075: LD_INT 3
3077: PPUSH
3078: CALL 58482 0 2
3082: ADD
3083: PUSH
3084: LD_INT 6
3086: PUSH
3087: LD_INT 54
3089: PPUSH
3090: LD_INT 4
3092: PPUSH
3093: CALL 58482 0 2
3097: ADD
3098: PUSH
3099: LD_INT 3
3101: PUSH
3102: LD_INT 55
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: CALL 58482 0 2
3112: ADD
3113: PUSH
3114: LD_INT 32
3116: PUSH
3117: LD_INT 56
3119: PPUSH
3120: LD_INT 0
3122: PPUSH
3123: CALL 58482 0 2
3127: ADD
3128: PUSH
3129: LD_INT 7
3131: PUSH
3132: LD_INT 28
3134: PUSH
3135: LD_INT 45
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: ADD
3146: PUSH
3147: LD_INT 32
3149: PUSH
3150: LD_INT 57
3152: PPUSH
3153: LD_INT 0
3155: PPUSH
3156: CALL 58482 0 2
3160: ADD
3161: PUSH
3162: LD_INT 9
3164: PUSH
3165: LD_INT 27
3167: PUSH
3168: LD_INT 46
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: PUSH
3176: EMPTY
3177: LIST
3178: ADD
3179: PUSH
3180: LD_INT 32
3182: PUSH
3183: LD_INT 58
3185: PPUSH
3186: LD_INT 0
3188: PPUSH
3189: CALL 58482 0 2
3193: ADD
3194: PUSH
3195: LD_INT 7
3197: PUSH
3198: LD_INT 28
3200: PUSH
3201: LD_INT 45
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: PUSH
3209: EMPTY
3210: LIST
3211: ADD
3212: PUSH
3213: LD_INT 32
3215: PUSH
3216: LD_INT 59
3218: PPUSH
3219: LD_INT 0
3221: PPUSH
3222: CALL 58482 0 2
3226: ADD
3227: PUSH
3228: LD_INT 7
3230: PUSH
3231: LD_INT 28
3233: PUSH
3234: LD_INT 45
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: LIST
3241: PUSH
3242: EMPTY
3243: LIST
3244: ADD
3245: PUSH
3246: LD_INT 32
3248: PUSH
3249: LD_INT 60
3251: PPUSH
3252: LD_INT 0
3254: PPUSH
3255: CALL 58482 0 2
3259: ADD
3260: PUSH
3261: LD_INT 9
3263: PUSH
3264: LD_INT 27
3266: PUSH
3267: LD_INT 46
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: LIST
3274: PUSH
3275: EMPTY
3276: LIST
3277: ADD
3278: PUSH
3279: LD_INT 32
3281: PUSH
3282: LD_INT 61
3284: PPUSH
3285: LD_INT 0
3287: PPUSH
3288: CALL 58482 0 2
3292: ADD
3293: PUSH
3294: LD_INT 9
3296: PUSH
3297: LD_INT 27
3299: PUSH
3300: LD_INT 46
3302: PUSH
3303: EMPTY
3304: LIST
3305: LIST
3306: LIST
3307: PUSH
3308: EMPTY
3309: LIST
3310: ADD
3311: PUSH
3312: LD_INT 32
3314: PUSH
3315: LD_INT 62
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL 58482 0 2
3325: ADD
3326: PUSH
3327: LD_INT 9
3329: PUSH
3330: LD_INT 27
3332: PUSH
3333: LD_INT 46
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: ADD
3344: PUSH
3345: LD_INT 32
3347: PUSH
3348: LD_INT 63
3350: PPUSH
3351: LD_INT 3
3353: PPUSH
3354: CALL 58482 0 2
3358: ADD
3359: PUSH
3360: LD_INT 9
3362: PUSH
3363: LD_INT 27
3365: PUSH
3366: LD_INT 46
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: LIST
3373: PUSH
3374: EMPTY
3375: LIST
3376: ADD
3377: PUSH
3378: LD_INT 32
3380: PUSH
3381: LD_INT 64
3383: PPUSH
3384: LD_INT 3
3386: PPUSH
3387: CALL 58482 0 2
3391: ADD
3392: PUSH
3393: LD_INT 7
3395: PUSH
3396: LD_INT 28
3398: PUSH
3399: LD_INT 45
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: LIST
3406: PUSH
3407: EMPTY
3408: LIST
3409: ADD
3410: PUSH
3411: LD_INT 32
3413: PUSH
3414: LD_INT 65
3416: PPUSH
3417: LD_INT 3
3419: PPUSH
3420: CALL 58482 0 2
3424: ADD
3425: PUSH
3426: LD_INT 7
3428: PUSH
3429: LD_INT 28
3431: PUSH
3432: LD_INT 45
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: EMPTY
3441: LIST
3442: ADD
3443: PUSH
3444: LD_INT 32
3446: PUSH
3447: LD_INT 66
3449: PPUSH
3450: LD_INT 3
3452: PPUSH
3453: CALL 58482 0 2
3457: ADD
3458: PUSH
3459: LD_INT 4
3461: PUSH
3462: LD_INT 25
3464: PUSH
3465: LD_INT 43
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: EMPTY
3474: LIST
3475: ADD
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: ST_TO_ADDR
// end ; 2 :
3502: GO 4089
3504: LD_INT 2
3506: DOUBLE
3507: EQUAL
3508: IFTRUE 3512
3510: GO 4088
3512: POP
// begin result := [ b_depot ^ GetBuildingFromArea ( dep1Area2 , 0 ) , b_depot ^ GetBuildingFromArea ( dep2Area2 , 2 ) , b_siberite_power ^ GetBuildingFromArea ( pw1Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw2Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw3Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw4Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw5Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw6Area2 , 5 ) , b_barracks ^ GetBuildingFromArea ( arm1Area2 , 0 ) , b_barracks ^ GetBuildingFromArea ( arm2Area2 , 2 ) , b_lab ^ GetBuildingFromArea ( lab1Area2 , 4 ) , b_factory ^ GetBuildingFromArea ( fac1Area2 , 4 ) , b_bunker ^ GetBuildingFromArea ( tw1Area2 , 5 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw2Area2 , 5 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw3Area2 , 5 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw4Area2 , 5 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw5Area2 , 2 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw6Area2 , 2 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw7Area2 , 2 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw8Area2 , 2 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw9Area2 , 2 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw10Area2 , 2 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw11Area2 , 2 ) ^ [ [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] ] ] ;
3513: LD_ADDR_VAR 0 2
3517: PUSH
3518: LD_INT 0
3520: PUSH
3521: LD_INT 68
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: CALL 58482 0 2
3531: ADD
3532: PUSH
3533: LD_INT 0
3535: PUSH
3536: LD_INT 69
3538: PPUSH
3539: LD_INT 2
3541: PPUSH
3542: CALL 58482 0 2
3546: ADD
3547: PUSH
3548: LD_INT 28
3550: PUSH
3551: LD_INT 70
3553: PPUSH
3554: LD_INT 5
3556: PPUSH
3557: CALL 58482 0 2
3561: ADD
3562: PUSH
3563: LD_INT 28
3565: PUSH
3566: LD_INT 71
3568: PPUSH
3569: LD_INT 5
3571: PPUSH
3572: CALL 58482 0 2
3576: ADD
3577: PUSH
3578: LD_INT 28
3580: PUSH
3581: LD_INT 72
3583: PPUSH
3584: LD_INT 5
3586: PPUSH
3587: CALL 58482 0 2
3591: ADD
3592: PUSH
3593: LD_INT 28
3595: PUSH
3596: LD_INT 73
3598: PPUSH
3599: LD_INT 5
3601: PPUSH
3602: CALL 58482 0 2
3606: ADD
3607: PUSH
3608: LD_INT 28
3610: PUSH
3611: LD_INT 74
3613: PPUSH
3614: LD_INT 5
3616: PPUSH
3617: CALL 58482 0 2
3621: ADD
3622: PUSH
3623: LD_INT 28
3625: PUSH
3626: LD_INT 75
3628: PPUSH
3629: LD_INT 5
3631: PPUSH
3632: CALL 58482 0 2
3636: ADD
3637: PUSH
3638: LD_INT 5
3640: PUSH
3641: LD_INT 76
3643: PPUSH
3644: LD_INT 0
3646: PPUSH
3647: CALL 58482 0 2
3651: ADD
3652: PUSH
3653: LD_INT 5
3655: PUSH
3656: LD_INT 82
3658: PPUSH
3659: LD_INT 2
3661: PPUSH
3662: CALL 58482 0 2
3666: ADD
3667: PUSH
3668: LD_INT 6
3670: PUSH
3671: LD_INT 89
3673: PPUSH
3674: LD_INT 4
3676: PPUSH
3677: CALL 58482 0 2
3681: ADD
3682: PUSH
3683: LD_INT 3
3685: PUSH
3686: LD_INT 90
3688: PPUSH
3689: LD_INT 4
3691: PPUSH
3692: CALL 58482 0 2
3696: ADD
3697: PUSH
3698: LD_INT 32
3700: PUSH
3701: LD_INT 77
3703: PPUSH
3704: LD_INT 5
3706: PPUSH
3707: CALL 58482 0 2
3711: ADD
3712: PUSH
3713: LD_INT 7
3715: PUSH
3716: LD_INT 28
3718: PUSH
3719: LD_INT 45
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: PUSH
3727: EMPTY
3728: LIST
3729: ADD
3730: PUSH
3731: LD_INT 32
3733: PUSH
3734: LD_INT 78
3736: PPUSH
3737: LD_INT 5
3739: PPUSH
3740: CALL 58482 0 2
3744: ADD
3745: PUSH
3746: LD_INT 9
3748: PUSH
3749: LD_INT 27
3751: PUSH
3752: LD_INT 46
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: LIST
3759: PUSH
3760: EMPTY
3761: LIST
3762: ADD
3763: PUSH
3764: LD_INT 32
3766: PUSH
3767: LD_INT 79
3769: PPUSH
3770: LD_INT 5
3772: PPUSH
3773: CALL 58482 0 2
3777: ADD
3778: PUSH
3779: LD_INT 7
3781: PUSH
3782: LD_INT 28
3784: PUSH
3785: LD_INT 45
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: PUSH
3793: EMPTY
3794: LIST
3795: ADD
3796: PUSH
3797: LD_INT 32
3799: PUSH
3800: LD_INT 80
3802: PPUSH
3803: LD_INT 5
3805: PPUSH
3806: CALL 58482 0 2
3810: ADD
3811: PUSH
3812: LD_INT 7
3814: PUSH
3815: LD_INT 28
3817: PUSH
3818: LD_INT 45
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: LIST
3825: PUSH
3826: EMPTY
3827: LIST
3828: ADD
3829: PUSH
3830: LD_INT 32
3832: PUSH
3833: LD_INT 81
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL 58482 0 2
3843: ADD
3844: PUSH
3845: LD_INT 9
3847: PUSH
3848: LD_INT 27
3850: PUSH
3851: LD_INT 46
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: LIST
3858: PUSH
3859: EMPTY
3860: LIST
3861: ADD
3862: PUSH
3863: LD_INT 32
3865: PUSH
3866: LD_INT 83
3868: PPUSH
3869: LD_INT 2
3871: PPUSH
3872: CALL 58482 0 2
3876: ADD
3877: PUSH
3878: LD_INT 9
3880: PUSH
3881: LD_INT 27
3883: PUSH
3884: LD_INT 46
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: LIST
3891: PUSH
3892: EMPTY
3893: LIST
3894: ADD
3895: PUSH
3896: LD_INT 32
3898: PUSH
3899: LD_INT 84
3901: PPUSH
3902: LD_INT 2
3904: PPUSH
3905: CALL 58482 0 2
3909: ADD
3910: PUSH
3911: LD_INT 9
3913: PUSH
3914: LD_INT 27
3916: PUSH
3917: LD_INT 46
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: LIST
3924: PUSH
3925: EMPTY
3926: LIST
3927: ADD
3928: PUSH
3929: LD_INT 32
3931: PUSH
3932: LD_INT 85
3934: PPUSH
3935: LD_INT 2
3937: PPUSH
3938: CALL 58482 0 2
3942: ADD
3943: PUSH
3944: LD_INT 9
3946: PUSH
3947: LD_INT 27
3949: PUSH
3950: LD_INT 46
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: LIST
3957: PUSH
3958: EMPTY
3959: LIST
3960: ADD
3961: PUSH
3962: LD_INT 32
3964: PUSH
3965: LD_INT 86
3967: PPUSH
3968: LD_INT 2
3970: PPUSH
3971: CALL 58482 0 2
3975: ADD
3976: PUSH
3977: LD_INT 7
3979: PUSH
3980: LD_INT 28
3982: PUSH
3983: LD_INT 45
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: LIST
3990: PUSH
3991: EMPTY
3992: LIST
3993: ADD
3994: PUSH
3995: LD_INT 32
3997: PUSH
3998: LD_INT 87
4000: PPUSH
4001: LD_INT 2
4003: PPUSH
4004: CALL 58482 0 2
4008: ADD
4009: PUSH
4010: LD_INT 7
4012: PUSH
4013: LD_INT 28
4015: PUSH
4016: LD_INT 45
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: LIST
4023: PUSH
4024: EMPTY
4025: LIST
4026: ADD
4027: PUSH
4028: LD_INT 32
4030: PUSH
4031: LD_INT 88
4033: PPUSH
4034: LD_INT 2
4036: PPUSH
4037: CALL 58482 0 2
4041: ADD
4042: PUSH
4043: LD_INT 4
4045: PUSH
4046: LD_INT 25
4048: PUSH
4049: LD_INT 43
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: LIST
4056: PUSH
4057: EMPTY
4058: LIST
4059: ADD
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: ST_TO_ADDR
// end ; end ;
4086: GO 4089
4088: POP
// end ; end_of_file
4089: LD_VAR 0 2
4093: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4094: LD_VAR 0 1
4098: PPUSH
4099: CALL 59280 0 1
// Multiplayer_UnitDestroyed ( un ) ;
4103: LD_VAR 0 1
4107: PPUSH
4108: CALL 9523 0 1
// end ;
4112: PPOPN 1
4114: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
4115: LD_VAR 0 1
4119: PPUSH
4120: CALL 59297 0 1
// end ;
4124: PPOPN 1
4126: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
4127: LD_VAR 0 1
4131: PPUSH
4132: CALL 10230 0 1
4136: PPOPN 1
4138: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
4139: LD_VAR 0 1
4143: PPUSH
4144: LD_VAR 0 2
4148: PPUSH
4149: CALL 59338 0 2
4153: PPOPN 2
4155: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
4156: LD_VAR 0 1
4160: PPUSH
4161: LD_VAR 0 2
4165: PPUSH
4166: LD_VAR 0 3
4170: PPUSH
4171: CALL 10283 0 3
4175: PPOPN 3
4177: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
4178: LD_VAR 0 1
4182: PPUSH
4183: LD_VAR 0 2
4187: PPUSH
4188: LD_VAR 0 3
4192: PPUSH
4193: LD_VAR 0 4
4197: PPUSH
4198: LD_VAR 0 5
4202: PPUSH
4203: CALL 10922 0 5
4207: PPOPN 5
4209: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
4210: LD_VAR 0 1
4214: PPUSH
4215: LD_VAR 0 2
4219: PPUSH
4220: LD_VAR 0 3
4224: PPUSH
4225: LD_VAR 0 4
4229: PPUSH
4230: CALL 11025 0 4
4234: PPOPN 4
4236: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
4237: LD_INT 0
4239: PPUSH
4240: PPUSH
// disable ( mpActive ) ;
4241: LD_INT 100
4243: DISABLE_MARKED
// disable ( mpWin ) ;
4244: LD_INT 101
4246: DISABLE_MARKED
// disable ( mpLose ) ;
4247: LD_INT 102
4249: DISABLE_MARKED
// mpGameType := 0 ;
4250: LD_ADDR_EXP 3
4254: PUSH
4255: LD_INT 0
4257: ST_TO_ADDR
// mpGameSettings := [ ] ;
4258: LD_ADDR_EXP 6
4262: PUSH
4263: EMPTY
4264: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
4265: LD_ADDR_EXP 4
4269: PUSH
4270: EMPTY
4271: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
4272: LD_ADDR_EXP 5
4276: PUSH
4277: EMPTY
4278: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
4279: LD_ADDR_EXP 29
4283: PUSH
4284: LD_INT 2
4286: PUSH
4287: LD_INT 2
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: ST_TO_ADDR
// mpOilDeposits := [ ] ;
4294: LD_ADDR_EXP 12
4298: PUSH
4299: EMPTY
4300: ST_TO_ADDR
// mpSibDeposits := [ ] ;
4301: LD_ADDR_EXP 13
4305: PUSH
4306: EMPTY
4307: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
4308: LD_ADDR_EXP 41
4312: PUSH
4313: EMPTY
4314: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
4315: LD_ADDR_EXP 42
4319: PUSH
4320: EMPTY
4321: ST_TO_ADDR
// mpDepots := [ ] ;
4322: LD_ADDR_EXP 14
4326: PUSH
4327: EMPTY
4328: ST_TO_ADDR
// mpBuildings := [ ] ;
4329: LD_ADDR_EXP 17
4333: PUSH
4334: EMPTY
4335: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
4336: LD_ADDR_EXP 18
4340: PUSH
4341: EMPTY
4342: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
4343: LD_ADDR_EXP 19
4347: PUSH
4348: EMPTY
4349: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
4350: LD_ADDR_EXP 20
4354: PUSH
4355: EMPTY
4356: ST_TO_ADDR
// mpStartingResources := [ ] ;
4357: LD_ADDR_EXP 15
4361: PUSH
4362: EMPTY
4363: ST_TO_ADDR
// mpStartPos := [ ] ;
4364: LD_ADDR_EXP 21
4368: PUSH
4369: EMPTY
4370: ST_TO_ADDR
// mpBattleFlag := - 1 ;
4371: LD_ADDR_EXP 22
4375: PUSH
4376: LD_INT 1
4378: NEG
4379: ST_TO_ADDR
// mpBattleFlags := [ ] ;
4380: LD_ADDR_EXP 23
4384: PUSH
4385: EMPTY
4386: ST_TO_ADDR
// mpApemans := [ ] ;
4387: LD_ADDR_EXP 30
4391: PUSH
4392: EMPTY
4393: ST_TO_ADDR
// mpApemansArea := [ ] ;
4394: LD_ADDR_EXP 31
4398: PUSH
4399: EMPTY
4400: ST_TO_ADDR
// mpRespawn := [ ] ;
4401: LD_ADDR_EXP 33
4405: PUSH
4406: EMPTY
4407: ST_TO_ADDR
// mpKingArea := 0 ;
4408: LD_ADDR_EXP 34
4412: PUSH
4413: LD_INT 0
4415: ST_TO_ADDR
// mpPoints := [ ] ;
4416: LD_ADDR_EXP 35
4420: PUSH
4421: EMPTY
4422: ST_TO_ADDR
// mpVehicles := 0 ;
4423: LD_ADDR_EXP 36
4427: PUSH
4428: LD_INT 0
4430: ST_TO_ADDR
// mpShipments := 0 ;
4431: LD_ADDR_EXP 27
4435: PUSH
4436: LD_INT 0
4438: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4439: LD_ADDR_EXP 40
4443: PUSH
4444: EMPTY
4445: PUSH
4446: EMPTY
4447: PUSH
4448: EMPTY
4449: PUSH
4450: EMPTY
4451: PUSH
4452: EMPTY
4453: PUSH
4454: EMPTY
4455: PUSH
4456: EMPTY
4457: PUSH
4458: EMPTY
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4470: LD_ADDR_EXP 32
4474: PUSH
4475: EMPTY
4476: PUSH
4477: EMPTY
4478: PUSH
4479: EMPTY
4480: PUSH
4481: EMPTY
4482: PUSH
4483: EMPTY
4484: PUSH
4485: EMPTY
4486: PUSH
4487: EMPTY
4488: PUSH
4489: EMPTY
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: ST_TO_ADDR
// mpEmissions := 0 ;
4501: LD_ADDR_EXP 37
4505: PUSH
4506: LD_INT 0
4508: ST_TO_ADDR
// mpTeleports := 0 ;
4509: LD_ADDR_EXP 43
4513: PUSH
4514: LD_INT 0
4516: ST_TO_ADDR
// mpArtifacts := 0 ;
4517: LD_ADDR_EXP 44
4521: PUSH
4522: LD_INT 0
4524: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
4525: LD_ADDR_EXP 45
4529: PUSH
4530: LD_INT 0
4532: ST_TO_ADDR
// mpPeopleSkill := 3 ;
4533: LD_ADDR_EXP 25
4537: PUSH
4538: LD_INT 3
4540: ST_TO_ADDR
// mpPeopleAmount := 15 ;
4541: LD_ADDR_EXP 24
4545: PUSH
4546: LD_INT 15
4548: ST_TO_ADDR
// mpDisplayStrings := 0 ;
4549: LD_ADDR_EXP 38
4553: PUSH
4554: LD_INT 0
4556: ST_TO_ADDR
// mpGameActive := false ;
4557: LD_ADDR_EXP 39
4561: PUSH
4562: LD_INT 0
4564: ST_TO_ADDR
// mpBlockRespThread := false ;
4565: LD_ADDR_EXP 46
4569: PUSH
4570: LD_INT 0
4572: ST_TO_ADDR
// for i := 1 to 32 do
4573: LD_ADDR_VAR 0 2
4577: PUSH
4578: DOUBLE
4579: LD_INT 1
4581: DEC
4582: ST_TO_ADDR
4583: LD_INT 32
4585: PUSH
4586: FOR_TO
4587: IFFALSE 4614
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
4589: LD_ADDR_EXP 6
4593: PUSH
4594: LD_EXP 6
4598: PPUSH
4599: LD_VAR 0 2
4603: PPUSH
4604: LD_INT 0
4606: PPUSH
4607: CALL_OW 1
4611: ST_TO_ADDR
4612: GO 4586
4614: POP
4615: POP
// end ;
4616: LD_VAR 0 1
4620: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
4621: LD_INT 0
4623: PPUSH
4624: PPUSH
4625: PPUSH
4626: PPUSH
4627: PPUSH
4628: PPUSH
4629: PPUSH
4630: PPUSH
4631: PPUSH
4632: PPUSH
4633: PPUSH
4634: PPUSH
4635: PPUSH
4636: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
4637: LD_ADDR_VAR 0 14
4641: PUSH
4642: LD_INT 1
4644: PUSH
4645: LD_INT 2
4647: PUSH
4648: LD_INT 3
4650: PUSH
4651: LD_INT 5
4653: PUSH
4654: LD_INT 6
4656: PUSH
4657: LD_INT 7
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: ST_TO_ADDR
// for i in gameTypes do
4668: LD_ADDR_VAR 0 2
4672: PUSH
4673: LD_VAR 0 14
4677: PUSH
4678: FOR_IN
4679: IFFALSE 4688
// disable ( i ) ;
4681: LD_VAR 0 2
4685: DISABLE_MARKED
4686: GO 4678
4688: POP
4689: POP
// if Multiplayer then
4690: LD_OWVAR 4
4694: IFFALSE 4878
// begin mpGameType := mp_game_type ;
4696: LD_ADDR_EXP 3
4700: PUSH
4701: LD_OWVAR 6
4705: ST_TO_ADDR
// your_side := mp_player_side ;
4706: LD_ADDR_OWVAR 2
4710: PUSH
4711: LD_OWVAR 7
4715: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
4716: LD_ADDR_EXP 7
4720: PUSH
4721: LD_OWVAR 17
4725: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
4726: LD_ADDR_EXP 8
4730: PUSH
4731: LD_OWVAR 15
4735: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
4736: LD_ADDR_EXP 9
4740: PUSH
4741: LD_OWVAR 16
4745: ST_TO_ADDR
// mpTeams := mp_teams ;
4746: LD_ADDR_EXP 10
4750: PUSH
4751: LD_OWVAR 12
4755: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
4756: LD_ADDR_VAR 0 2
4760: PUSH
4761: DOUBLE
4762: LD_INT 1
4764: DEC
4765: ST_TO_ADDR
4766: LD_EXP 4
4770: PPUSH
4771: CALL 17797 0 1
4775: PUSH
4776: FOR_TO
4777: IFFALSE 4853
// begin setting := mpGameSettingsKeys [ i ] ;
4779: LD_ADDR_VAR 0 12
4783: PUSH
4784: LD_EXP 4
4788: PUSH
4789: LD_VAR 0 2
4793: ARRAY
4794: ST_TO_ADDR
// if setting then
4795: LD_VAR 0 12
4799: IFFALSE 4851
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
4801: LD_ADDR_EXP 6
4805: PUSH
4806: LD_EXP 6
4810: PPUSH
4811: LD_VAR 0 2
4815: PPUSH
4816: LD_EXP 5
4820: PUSH
4821: LD_VAR 0 2
4825: ARRAY
4826: PUSH
4827: LD_VAR 0 2
4831: PUSH
4832: LD_INT 1
4834: MINUS
4835: PPUSH
4836: CALL_OW 426
4840: PUSH
4841: LD_INT 1
4843: PLUS
4844: ARRAY
4845: PPUSH
4846: CALL_OW 1
4850: ST_TO_ADDR
// end ;
4851: GO 4776
4853: POP
4854: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
4855: LD_ADDR_EXP 11
4859: PUSH
4860: LD_EXP 8
4864: PUSH
4865: LD_INT 0
4867: PUSH
4868: EMPTY
4869: LIST
4870: DIFF
4871: PUSH
4872: LD_INT 1
4874: GREATER
4875: ST_TO_ADDR
// end else
4876: GO 4878
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
4878: LD_EXP 3
4882: PPUSH
4883: CALL 744 0 1
// if Count ( mpMarkedAreas ) then
4887: LD_EXP 18
4891: PPUSH
4892: CALL 17797 0 1
4896: IFFALSE 4927
// begin for i in mpMarkedAreas do
4898: LD_ADDR_VAR 0 2
4902: PUSH
4903: LD_EXP 18
4907: PUSH
4908: FOR_IN
4909: IFFALSE 4925
// SetAreaMapShow ( i , 0 ) ;
4911: LD_VAR 0 2
4915: PPUSH
4916: LD_INT 0
4918: PPUSH
4919: CALL_OW 424
4923: GO 4908
4925: POP
4926: POP
// end ; for i := 1 to 8 do
4927: LD_ADDR_VAR 0 2
4931: PUSH
4932: DOUBLE
4933: LD_INT 1
4935: DEC
4936: ST_TO_ADDR
4937: LD_INT 8
4939: PUSH
4940: FOR_TO
4941: IFFALSE 6376
// begin if not mpSidePositions [ i ] then
4943: LD_EXP 7
4947: PUSH
4948: LD_VAR 0 2
4952: ARRAY
4953: NOT
4954: IFFALSE 4958
// continue ;
4956: GO 4940
// side := i ;
4958: LD_ADDR_VAR 0 7
4962: PUSH
4963: LD_VAR 0 2
4967: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
4968: LD_ADDR_VAR 0 9
4972: PUSH
4973: LD_EXP 9
4977: PUSH
4978: LD_VAR 0 2
4982: ARRAY
4983: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
4984: LD_ADDR_VAR 0 8
4988: PUSH
4989: LD_EXP 7
4993: PUSH
4994: LD_VAR 0 2
4998: ARRAY
4999: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
5000: LD_EXP 12
5004: PPUSH
5005: CALL 17797 0 1
5009: IFFALSE 5086
// begin for j in mpOilDeposits [ pos ] do
5011: LD_ADDR_VAR 0 3
5015: PUSH
5016: LD_EXP 12
5020: PUSH
5021: LD_VAR 0 8
5025: ARRAY
5026: PUSH
5027: FOR_IN
5028: IFFALSE 5084
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
5030: LD_VAR 0 3
5034: PUSH
5035: LD_INT 1
5037: ARRAY
5038: PPUSH
5039: LD_VAR 0 3
5043: PUSH
5044: LD_INT 2
5046: ARRAY
5047: PPUSH
5048: LD_INT 2
5050: PPUSH
5051: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
5055: LD_VAR 0 3
5059: PUSH
5060: LD_INT 1
5062: ARRAY
5063: PPUSH
5064: LD_VAR 0 3
5068: PUSH
5069: LD_INT 2
5071: ARRAY
5072: PPUSH
5073: LD_VAR 0 7
5077: PPUSH
5078: CALL_OW 441
// end ;
5082: GO 5027
5084: POP
5085: POP
// end ; if Count ( mpSibDeposits ) then
5086: LD_EXP 13
5090: PPUSH
5091: CALL 17797 0 1
5095: IFFALSE 5172
// begin for j in mpSibDeposits [ pos ] do
5097: LD_ADDR_VAR 0 3
5101: PUSH
5102: LD_EXP 13
5106: PUSH
5107: LD_VAR 0 8
5111: ARRAY
5112: PUSH
5113: FOR_IN
5114: IFFALSE 5170
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
5116: LD_VAR 0 3
5120: PUSH
5121: LD_INT 1
5123: ARRAY
5124: PPUSH
5125: LD_VAR 0 3
5129: PUSH
5130: LD_INT 2
5132: ARRAY
5133: PPUSH
5134: LD_INT 3
5136: PPUSH
5137: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
5141: LD_VAR 0 3
5145: PUSH
5146: LD_INT 1
5148: ARRAY
5149: PPUSH
5150: LD_VAR 0 3
5154: PUSH
5155: LD_INT 2
5157: ARRAY
5158: PPUSH
5159: LD_VAR 0 7
5163: PPUSH
5164: CALL_OW 441
// end ;
5168: GO 5113
5170: POP
5171: POP
// end ; InitBc ;
5172: CALL_OW 21
// InitUc ;
5176: CALL_OW 18
// uc_side := side ;
5180: LD_ADDR_OWVAR 20
5184: PUSH
5185: LD_VAR 0 7
5189: ST_TO_ADDR
// uc_nation := nation ;
5190: LD_ADDR_OWVAR 21
5194: PUSH
5195: LD_VAR 0 9
5199: ST_TO_ADDR
// if mpBattleFlag > - 1 then
5200: LD_EXP 22
5204: PUSH
5205: LD_INT 1
5207: NEG
5208: GREATER
5209: IFFALSE 5368
// begin x := mpStartPos [ pos ] [ 1 ] ;
5211: LD_ADDR_VAR 0 5
5215: PUSH
5216: LD_EXP 21
5220: PUSH
5221: LD_VAR 0 8
5225: ARRAY
5226: PUSH
5227: LD_INT 1
5229: ARRAY
5230: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
5231: LD_ADDR_VAR 0 6
5235: PUSH
5236: LD_EXP 21
5240: PUSH
5241: LD_VAR 0 8
5245: ARRAY
5246: PUSH
5247: LD_INT 2
5249: ARRAY
5250: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
5251: LD_VAR 0 5
5255: PPUSH
5256: LD_VAR 0 6
5260: PPUSH
5261: LD_INT 12
5263: PPUSH
5264: LD_INT 2
5266: PPUSH
5267: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
5271: LD_ADDR_EXP 23
5275: PUSH
5276: LD_EXP 23
5280: PPUSH
5281: LD_VAR 0 7
5285: PPUSH
5286: LD_VAR 0 7
5290: PPUSH
5291: LD_VAR 0 5
5295: PPUSH
5296: LD_VAR 0 6
5300: PPUSH
5301: LD_INT 1
5303: PUSH
5304: LD_INT 100
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 2
5313: PUSH
5314: LD_INT 70
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 3
5323: PUSH
5324: LD_INT 40
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: LD_INT 10
5333: PUSH
5334: LD_INT 25
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PUSH
5341: LD_INT 20
5343: PUSH
5344: LD_INT 100
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: LIST
5357: PPUSH
5358: CALL_OW 418
5362: PPUSH
5363: CALL_OW 1
5367: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
5368: LD_EXP 14
5372: PPUSH
5373: CALL 17797 0 1
5377: IFFALSE 5572
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
5379: LD_EXP 3
5383: PUSH
5384: LD_INT 2
5386: PUSH
5387: LD_INT 6
5389: PUSH
5390: LD_INT 7
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: LIST
5397: IN
5398: IFFALSE 5418
// begin bc_level := 10 ;
5400: LD_ADDR_OWVAR 43
5404: PUSH
5405: LD_INT 10
5407: ST_TO_ADDR
// bc_type := b_warehouse ;
5408: LD_ADDR_OWVAR 42
5412: PUSH
5413: LD_INT 1
5415: ST_TO_ADDR
// end else
5416: GO 5434
// begin bc_level := 0 ;
5418: LD_ADDR_OWVAR 43
5422: PUSH
5423: LD_INT 0
5425: ST_TO_ADDR
// bc_type := b_depot ;
5426: LD_ADDR_OWVAR 42
5430: PUSH
5431: LD_INT 0
5433: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
5434: LD_ADDR_VAR 0 4
5438: PUSH
5439: LD_EXP 14
5443: PUSH
5444: LD_VAR 0 8
5448: ARRAY
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PPUSH
5454: LD_EXP 14
5458: PUSH
5459: LD_VAR 0 8
5463: ARRAY
5464: PUSH
5465: LD_INT 2
5467: ARRAY
5468: PPUSH
5469: LD_EXP 14
5473: PUSH
5474: LD_VAR 0 8
5478: ARRAY
5479: PUSH
5480: LD_INT 3
5482: ARRAY
5483: PPUSH
5484: CALL_OW 47
5488: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
5489: LD_VAR 0 4
5493: PPUSH
5494: LD_STRING @
5496: PUSH
5497: LD_VAR 0 7
5501: STR
5502: PPUSH
5503: CALL_OW 500
// if Count ( mpStartingResources ) then
5507: LD_EXP 15
5511: PPUSH
5512: CALL 17797 0 1
5516: IFFALSE 5570
// begin for j := 1 to mpStartingResources do
5518: LD_ADDR_VAR 0 3
5522: PUSH
5523: DOUBLE
5524: LD_INT 1
5526: DEC
5527: ST_TO_ADDR
5528: LD_EXP 15
5532: PUSH
5533: FOR_TO
5534: IFFALSE 5568
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
5536: LD_VAR 0 4
5540: PPUSH
5541: CALL_OW 274
5545: PPUSH
5546: LD_VAR 0 3
5550: PPUSH
5551: LD_EXP 15
5555: PUSH
5556: LD_VAR 0 3
5560: ARRAY
5561: PPUSH
5562: CALL_OW 277
5566: GO 5533
5568: POP
5569: POP
// end ; end else
5570: GO 5779
// if Count ( mpStartingResources ) then
5572: LD_EXP 15
5576: PPUSH
5577: CALL 17797 0 1
5581: IFFALSE 5779
// begin x := mpStartPos [ pos ] [ 1 ] ;
5583: LD_ADDR_VAR 0 5
5587: PUSH
5588: LD_EXP 21
5592: PUSH
5593: LD_VAR 0 8
5597: ARRAY
5598: PUSH
5599: LD_INT 1
5601: ARRAY
5602: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
5603: LD_ADDR_VAR 0 6
5607: PUSH
5608: LD_EXP 21
5612: PUSH
5613: LD_VAR 0 8
5617: ARRAY
5618: PUSH
5619: LD_INT 2
5621: ARRAY
5622: ST_TO_ADDR
// for j := 1 to mpStartingResources do
5623: LD_ADDR_VAR 0 3
5627: PUSH
5628: DOUBLE
5629: LD_INT 1
5631: DEC
5632: ST_TO_ADDR
5633: LD_EXP 15
5637: PUSH
5638: FOR_TO
5639: IFFALSE 5777
// begin resources := mpStartingResources [ j ] ;
5641: LD_ADDR_VAR 0 13
5645: PUSH
5646: LD_EXP 15
5650: PUSH
5651: LD_VAR 0 3
5655: ARRAY
5656: ST_TO_ADDR
// if resources = 0 then
5657: LD_VAR 0 13
5661: PUSH
5662: LD_INT 0
5664: EQUAL
5665: IFFALSE 5669
// continue ;
5667: GO 5638
// repeat if resources >= 50 then
5669: LD_VAR 0 13
5673: PUSH
5674: LD_INT 50
5676: GREATEREQUAL
5677: IFFALSE 5723
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
5679: LD_VAR 0 3
5683: PPUSH
5684: LD_INT 5
5686: PPUSH
5687: LD_VAR 0 5
5691: PPUSH
5692: LD_VAR 0 6
5696: PPUSH
5697: LD_INT 6
5699: PPUSH
5700: LD_INT 0
5702: PPUSH
5703: CALL_OW 60
// resources := resources - 50 ;
5707: LD_ADDR_VAR 0 13
5711: PUSH
5712: LD_VAR 0 13
5716: PUSH
5717: LD_INT 50
5719: MINUS
5720: ST_TO_ADDR
// end else
5721: GO 5765
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
5723: LD_VAR 0 3
5727: PPUSH
5728: LD_VAR 0 13
5732: PUSH
5733: LD_INT 10
5735: DIV
5736: PPUSH
5737: LD_VAR 0 5
5741: PPUSH
5742: LD_VAR 0 6
5746: PPUSH
5747: LD_INT 6
5749: PPUSH
5750: LD_INT 0
5752: PPUSH
5753: CALL_OW 60
// resources := 0 ;
5757: LD_ADDR_VAR 0 13
5761: PUSH
5762: LD_INT 0
5764: ST_TO_ADDR
// end ; until resources <= 0 ;
5765: LD_VAR 0 13
5769: PUSH
5770: LD_INT 0
5772: LESSEQUAL
5773: IFFALSE 5669
// end ;
5775: GO 5638
5777: POP
5778: POP
// end ; if Count ( mpBuildings ) then
5779: LD_EXP 17
5783: PPUSH
5784: CALL 17797 0 1
5788: IFFALSE 5866
// begin for j in mpBuildings [ pos ] do
5790: LD_ADDR_VAR 0 3
5794: PUSH
5795: LD_EXP 17
5799: PUSH
5800: LD_VAR 0 8
5804: ARRAY
5805: PUSH
5806: FOR_IN
5807: IFFALSE 5864
// begin bc_level := 0 ;
5809: LD_ADDR_OWVAR 43
5813: PUSH
5814: LD_INT 0
5816: ST_TO_ADDR
// bc_type := j [ 1 ] ;
5817: LD_ADDR_OWVAR 42
5821: PUSH
5822: LD_VAR 0 3
5826: PUSH
5827: LD_INT 1
5829: ARRAY
5830: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
5831: LD_VAR 0 3
5835: PUSH
5836: LD_INT 2
5838: ARRAY
5839: PPUSH
5840: LD_VAR 0 3
5844: PUSH
5845: LD_INT 3
5847: ARRAY
5848: PPUSH
5849: LD_VAR 0 3
5853: PUSH
5854: LD_INT 4
5856: ARRAY
5857: PPUSH
5858: CALL_OW 47
// end ;
5862: GO 5806
5864: POP
5865: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
5866: LD_EXP 26
5870: IFFALSE 5890
5872: PUSH
5873: LD_INT 20
5875: PPUSH
5876: LD_VAR 0 7
5880: PPUSH
5881: CALL_OW 321
5885: PUSH
5886: LD_INT 1
5888: EQUAL
5889: AND
5890: IFFALSE 5907
// SetTech ( tech_SibDet , side , state_researched ) ;
5892: LD_INT 20
5894: PPUSH
5895: LD_VAR 0 7
5899: PPUSH
5900: LD_INT 2
5902: PPUSH
5903: CALL_OW 322
// if not mpArtifacts then
5907: LD_EXP 44
5911: NOT
5912: IFFALSE 5929
// SetTech ( tech_artifact , side , state_disabled ) ;
5914: LD_INT 24
5916: PPUSH
5917: LD_VAR 0 7
5921: PPUSH
5922: LD_INT 0
5924: PPUSH
5925: CALL_OW 322
// if mpSibBomb = 1 then
5929: LD_EXP 28
5933: PUSH
5934: LD_INT 1
5936: EQUAL
5937: IFFALSE 5956
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
5939: LD_INT 25
5941: PPUSH
5942: LD_VAR 0 7
5946: PPUSH
5947: LD_INT 1
5949: PPUSH
5950: CALL_OW 322
// end else
5954: GO 5971
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
5956: LD_INT 25
5958: PPUSH
5959: LD_VAR 0 7
5963: PPUSH
5964: LD_INT 0
5966: PPUSH
5967: CALL_OW 322
// end ; if mpVehicles then
5971: LD_EXP 36
5975: IFFALSE 6074
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
5977: LD_ADDR_VAR 0 3
5981: PUSH
5982: LD_VAR 0 7
5986: PPUSH
5987: LD_VAR 0 9
5991: PPUSH
5992: LD_EXP 36
5996: PPUSH
5997: CALL 7297 0 3
6001: PUSH
6002: FOR_IN
6003: IFFALSE 6072
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
6005: LD_VAR 0 3
6009: PPUSH
6010: LD_INT 0
6012: PPUSH
6013: LD_INT 5
6015: PPUSH
6016: CALL_OW 12
6020: PPUSH
6021: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
6025: LD_VAR 0 3
6029: PPUSH
6030: LD_EXP 21
6034: PUSH
6035: LD_VAR 0 8
6039: ARRAY
6040: PUSH
6041: LD_INT 1
6043: ARRAY
6044: PPUSH
6045: LD_EXP 21
6049: PUSH
6050: LD_VAR 0 8
6054: ARRAY
6055: PUSH
6056: LD_INT 2
6058: ARRAY
6059: PPUSH
6060: LD_INT 12
6062: PPUSH
6063: LD_INT 0
6065: PPUSH
6066: CALL_OW 50
// end ;
6070: GO 6002
6072: POP
6073: POP
// end ; uc_nation := nation ;
6074: LD_ADDR_OWVAR 21
6078: PUSH
6079: LD_VAR 0 9
6083: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
6084: LD_EXP 3
6088: PUSH
6089: LD_INT 6
6091: PUSH
6092: LD_INT 7
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: IN
6099: IFFALSE 6124
6101: PUSH
6102: LD_EXP 7
6106: PUSH
6107: LD_VAR 0 2
6111: ARRAY
6112: PUSH
6113: LD_INT 1
6115: PUSH
6116: LD_INT 2
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: IN
6123: AND
6124: IFFALSE 6172
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
6126: LD_ADDR_VAR 0 11
6130: PUSH
6131: LD_VAR 0 7
6135: PPUSH
6136: LD_VAR 0 9
6140: PPUSH
6141: LD_EXP 24
6145: PUSH
6146: LD_EXP 24
6150: PUSH
6151: LD_INT 2
6153: DIV
6154: PLUS
6155: PPUSH
6156: LD_EXP 25
6160: PUSH
6161: LD_INT 1
6163: PLUS
6164: PPUSH
6165: CALL 6788 0 4
6169: ST_TO_ADDR
6170: GO 6202
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
6172: LD_ADDR_VAR 0 11
6176: PUSH
6177: LD_VAR 0 7
6181: PPUSH
6182: LD_VAR 0 9
6186: PPUSH
6187: LD_EXP 24
6191: PPUSH
6192: LD_EXP 25
6196: PPUSH
6197: CALL 6788 0 4
6201: ST_TO_ADDR
// for j in team do
6202: LD_ADDR_VAR 0 3
6206: PUSH
6207: LD_VAR 0 11
6211: PUSH
6212: FOR_IN
6213: IFFALSE 6262
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
6215: LD_VAR 0 3
6219: PPUSH
6220: LD_EXP 21
6224: PUSH
6225: LD_VAR 0 8
6229: ARRAY
6230: PUSH
6231: LD_INT 1
6233: ARRAY
6234: PPUSH
6235: LD_EXP 21
6239: PUSH
6240: LD_VAR 0 8
6244: ARRAY
6245: PUSH
6246: LD_INT 2
6248: ARRAY
6249: PPUSH
6250: LD_INT 12
6252: PPUSH
6253: LD_INT 0
6255: PPUSH
6256: CALL_OW 50
6260: GO 6212
6262: POP
6263: POP
// if mpApemans then
6264: LD_EXP 30
6268: IFFALSE 6374
// begin for j := 1 to mpApemans do
6270: LD_ADDR_VAR 0 3
6274: PUSH
6275: DOUBLE
6276: LD_INT 1
6278: DEC
6279: ST_TO_ADDR
6280: LD_EXP 30
6284: PUSH
6285: FOR_TO
6286: IFFALSE 6372
// begin PrepareApeman ( - 5 ) ;
6288: LD_INT 5
6290: NEG
6291: PPUSH
6292: CALL 49890 0 1
// ape := CreateHuman ;
6296: LD_ADDR_VAR 0 10
6300: PUSH
6301: CALL_OW 44
6305: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
6306: LD_ADDR_EXP 32
6310: PUSH
6311: LD_EXP 32
6315: PPUSH
6316: LD_VAR 0 8
6320: PPUSH
6321: LD_EXP 32
6325: PUSH
6326: LD_VAR 0 8
6330: ARRAY
6331: PPUSH
6332: LD_VAR 0 10
6336: PPUSH
6337: CALL 53763 0 2
6341: PPUSH
6342: CALL_OW 1
6346: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
6347: LD_VAR 0 10
6351: PPUSH
6352: LD_EXP 31
6356: PUSH
6357: LD_VAR 0 8
6361: ARRAY
6362: PPUSH
6363: LD_INT 0
6365: PPUSH
6366: CALL_OW 49
// end ;
6370: GO 6285
6372: POP
6373: POP
// end ; end ;
6374: GO 4940
6376: POP
6377: POP
// if not mpTeamGame then
6378: LD_EXP 11
6382: NOT
6383: IFFALSE 6481
// begin for i := 1 to 8 do
6385: LD_ADDR_VAR 0 2
6389: PUSH
6390: DOUBLE
6391: LD_INT 1
6393: DEC
6394: ST_TO_ADDR
6395: LD_INT 8
6397: PUSH
6398: FOR_TO
6399: IFFALSE 6477
// for j := 1 to 8 do
6401: LD_ADDR_VAR 0 3
6405: PUSH
6406: DOUBLE
6407: LD_INT 1
6409: DEC
6410: ST_TO_ADDR
6411: LD_INT 8
6413: PUSH
6414: FOR_TO
6415: IFFALSE 6473
// if i <> j then
6417: LD_VAR 0 2
6421: PUSH
6422: LD_VAR 0 3
6426: NONEQUAL
6427: IFFALSE 6451
// SetAttitude ( i , j , att_neutral , true ) else
6429: LD_VAR 0 2
6433: PPUSH
6434: LD_VAR 0 3
6438: PPUSH
6439: LD_INT 0
6441: PPUSH
6442: LD_INT 1
6444: PPUSH
6445: CALL_OW 80
6449: GO 6471
// SetAttitude ( i , j , att_friend , true ) ;
6451: LD_VAR 0 2
6455: PPUSH
6456: LD_VAR 0 3
6460: PPUSH
6461: LD_INT 1
6463: PPUSH
6464: LD_INT 1
6466: PPUSH
6467: CALL_OW 80
6471: GO 6414
6473: POP
6474: POP
6475: GO 6398
6477: POP
6478: POP
// end else
6479: GO 6656
// begin if mpSharedVision then
6481: LD_EXP 16
6485: IFFALSE 6550
// begin for i in mpTeams do
6487: LD_ADDR_VAR 0 2
6491: PUSH
6492: LD_EXP 10
6496: PUSH
6497: FOR_IN
6498: IFFALSE 6548
// for j := 2 to i do
6500: LD_ADDR_VAR 0 3
6504: PUSH
6505: DOUBLE
6506: LD_INT 2
6508: DEC
6509: ST_TO_ADDR
6510: LD_VAR 0 2
6514: PUSH
6515: FOR_TO
6516: IFFALSE 6544
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
6518: LD_VAR 0 2
6522: PUSH
6523: LD_VAR 0 3
6527: ARRAY
6528: PPUSH
6529: LD_VAR 0 2
6533: PUSH
6534: LD_INT 1
6536: ARRAY
6537: PPUSH
6538: CALL_OW 343
6542: GO 6515
6544: POP
6545: POP
6546: GO 6497
6548: POP
6549: POP
// end ; for i := 1 to 8 do
6550: LD_ADDR_VAR 0 2
6554: PUSH
6555: DOUBLE
6556: LD_INT 1
6558: DEC
6559: ST_TO_ADDR
6560: LD_INT 8
6562: PUSH
6563: FOR_TO
6564: IFFALSE 6654
// for j := 1 to 8 do
6566: LD_ADDR_VAR 0 3
6570: PUSH
6571: DOUBLE
6572: LD_INT 1
6574: DEC
6575: ST_TO_ADDR
6576: LD_INT 8
6578: PUSH
6579: FOR_TO
6580: IFFALSE 6650
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
6582: LD_EXP 8
6586: PUSH
6587: LD_VAR 0 2
6591: ARRAY
6592: PUSH
6593: LD_EXP 8
6597: PUSH
6598: LD_VAR 0 3
6602: ARRAY
6603: EQUAL
6604: IFFALSE 6628
// SetAttitude ( i , j , att_friend , true ) else
6606: LD_VAR 0 2
6610: PPUSH
6611: LD_VAR 0 3
6615: PPUSH
6616: LD_INT 1
6618: PPUSH
6619: LD_INT 1
6621: PPUSH
6622: CALL_OW 80
6626: GO 6648
// SetAttitude ( i , j , att_enemy , true ) ;
6628: LD_VAR 0 2
6632: PPUSH
6633: LD_VAR 0 3
6637: PPUSH
6638: LD_INT 2
6640: PPUSH
6641: LD_INT 1
6643: PPUSH
6644: CALL_OW 80
6648: GO 6579
6650: POP
6651: POP
6652: GO 6563
6654: POP
6655: POP
// end ; music_nat := mpSideNations [ your_side ] ;
6656: LD_ADDR_OWVAR 71
6660: PUSH
6661: LD_EXP 9
6665: PUSH
6666: LD_OWVAR 2
6670: ARRAY
6671: ST_TO_ADDR
// if IAmSpec then
6672: CALL_OW 531
6676: IFFALSE 6717
// begin FogOff ( true ) ;
6678: LD_INT 1
6680: PPUSH
6681: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
6685: LD_EXP 29
6689: PUSH
6690: LD_INT 1
6692: ARRAY
6693: PUSH
6694: LD_INT 2
6696: DIV
6697: PPUSH
6698: LD_EXP 29
6702: PUSH
6703: LD_INT 2
6705: ARRAY
6706: PUSH
6707: LD_INT 2
6709: DIV
6710: PPUSH
6711: CALL_OW 86
// end else
6715: GO 6763
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
6717: LD_EXP 21
6721: PUSH
6722: LD_EXP 7
6726: PUSH
6727: LD_OWVAR 2
6731: ARRAY
6732: ARRAY
6733: PUSH
6734: LD_INT 1
6736: ARRAY
6737: PPUSH
6738: LD_EXP 21
6742: PUSH
6743: LD_EXP 7
6747: PUSH
6748: LD_OWVAR 2
6752: ARRAY
6753: ARRAY
6754: PUSH
6755: LD_INT 2
6757: ARRAY
6758: PPUSH
6759: CALL_OW 86
// end ; BeginBuildUp ;
6763: CALL 7830 0 0
// enable ( mpActive ) ;
6767: LD_INT 100
6769: ENABLE_MARKED
// enable ( mpGameType ) ;
6770: LD_EXP 3
6774: ENABLE_MARKED
// mpGameActive := true ;
6775: LD_ADDR_EXP 39
6779: PUSH
6780: LD_INT 1
6782: ST_TO_ADDR
// end ;
6783: LD_VAR 0 1
6787: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
6788: LD_INT 0
6790: PPUSH
6791: PPUSH
6792: PPUSH
6793: PPUSH
// result := [ ] ;
6794: LD_ADDR_VAR 0 5
6798: PUSH
6799: EMPTY
6800: ST_TO_ADDR
// class := class_soldier ;
6801: LD_ADDR_VAR 0 8
6805: PUSH
6806: LD_INT 1
6808: ST_TO_ADDR
// uc_side := side ;
6809: LD_ADDR_OWVAR 20
6813: PUSH
6814: LD_VAR 0 1
6818: ST_TO_ADDR
// uc_nation := nation ;
6819: LD_ADDR_OWVAR 21
6823: PUSH
6824: LD_VAR 0 2
6828: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
6829: LD_ADDR_OWVAR 26
6833: PUSH
6834: LD_OWVAR 19
6838: PUSH
6839: LD_VAR 0 1
6843: ARRAY
6844: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
6845: LD_INT 1
6847: PPUSH
6848: LD_INT 2
6850: PPUSH
6851: CALL_OW 12
6855: PPUSH
6856: LD_VAR 0 8
6860: PPUSH
6861: LD_VAR 0 4
6865: PUSH
6866: LD_INT 2
6868: PLUS
6869: PPUSH
6870: CALL_OW 380
// hc_importance := 105 ;
6874: LD_ADDR_OWVAR 32
6878: PUSH
6879: LD_INT 105
6881: ST_TO_ADDR
// if Multiplayer then
6882: LD_OWVAR 4
6886: IFFALSE 6926
// begin hc_gallery := MULTIAVATARS ;
6888: LD_ADDR_OWVAR 33
6892: PUSH
6893: LD_STRING MULTIAVATARS
6895: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
6896: LD_ADDR_OWVAR 34
6900: PUSH
6901: LD_VAR 0 1
6905: PPUSH
6906: CALL_OW 525
6910: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
6911: LD_ADDR_OWVAR 27
6915: PUSH
6916: LD_VAR 0 1
6920: PPUSH
6921: CALL_OW 526
6925: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
6926: LD_ADDR_VAR 0 5
6930: PUSH
6931: LD_VAR 0 5
6935: PPUSH
6936: CALL_OW 44
6940: PPUSH
6941: CALL 53763 0 2
6945: ST_TO_ADDR
// if mpTeamPreset then
6946: LD_LOC 1
6950: IFFALSE 7046
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
6952: LD_LOC 1
6956: PUSH
6957: LD_INT 1
6959: ARRAY
6960: PPUSH
6961: LD_VAR 0 5
6965: PUSH
6966: LD_VAR 0 5
6970: ARRAY
6971: PPUSH
6972: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
6976: LD_VAR 0 5
6980: PUSH
6981: LD_VAR 0 5
6985: ARRAY
6986: PPUSH
6987: LD_INT 1
6989: PPUSH
6990: LD_LOC 1
6994: PUSH
6995: LD_INT 1
6997: ARRAY
6998: PPUSH
6999: LD_INT 1
7001: PPUSH
7002: CALL_OW 260
7006: PPUSH
7007: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
7011: LD_VAR 0 5
7015: PUSH
7016: LD_VAR 0 5
7020: ARRAY
7021: PPUSH
7022: LD_INT 2
7024: PPUSH
7025: LD_LOC 1
7029: PUSH
7030: LD_INT 1
7032: ARRAY
7033: PPUSH
7034: LD_INT 2
7036: PPUSH
7037: CALL_OW 260
7041: PPUSH
7042: CALL_OW 239
// end ; InitHc_All ( ) ;
7046: CALL_OW 584
// class := 2 ;
7050: LD_ADDR_VAR 0 8
7054: PUSH
7055: LD_INT 2
7057: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
7058: LD_ADDR_VAR 0 6
7062: PUSH
7063: DOUBLE
7064: LD_INT 1
7066: DEC
7067: ST_TO_ADDR
7068: LD_VAR 0 3
7072: PUSH
7073: LD_INT 1
7075: MINUS
7076: PUSH
7077: FOR_TO
7078: IFFALSE 7273
// begin PrepareHuman ( false , class , skill ) ;
7080: LD_INT 0
7082: PPUSH
7083: LD_VAR 0 8
7087: PPUSH
7088: LD_VAR 0 4
7092: PPUSH
7093: CALL_OW 380
// un := CreateHuman ;
7097: LD_ADDR_VAR 0 7
7101: PUSH
7102: CALL_OW 44
7106: ST_TO_ADDR
// result := Join ( result , un ) ;
7107: LD_ADDR_VAR 0 5
7111: PUSH
7112: LD_VAR 0 5
7116: PPUSH
7117: LD_VAR 0 7
7121: PPUSH
7122: CALL 53763 0 2
7126: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
7127: LD_LOC 1
7131: PPUSH
7132: CALL 17797 0 1
7136: PUSH
7137: LD_VAR 0 3
7141: GREATEREQUAL
7142: IFFALSE 7238
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
7144: LD_LOC 1
7148: PUSH
7149: LD_VAR 0 6
7153: PUSH
7154: LD_INT 1
7156: PLUS
7157: ARRAY
7158: PPUSH
7159: LD_VAR 0 7
7163: PPUSH
7164: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
7168: LD_VAR 0 7
7172: PPUSH
7173: LD_INT 1
7175: PPUSH
7176: LD_LOC 1
7180: PUSH
7181: LD_VAR 0 6
7185: PUSH
7186: LD_INT 1
7188: PLUS
7189: ARRAY
7190: PPUSH
7191: LD_INT 1
7193: PPUSH
7194: CALL_OW 260
7198: PPUSH
7199: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
7203: LD_VAR 0 7
7207: PPUSH
7208: LD_INT 2
7210: PPUSH
7211: LD_LOC 1
7215: PUSH
7216: LD_VAR 0 6
7220: PUSH
7221: LD_INT 1
7223: PLUS
7224: ARRAY
7225: PPUSH
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 260
7233: PPUSH
7234: CALL_OW 239
// end ; class := Inc ( class ) ;
7238: LD_ADDR_VAR 0 8
7242: PUSH
7243: LD_VAR 0 8
7247: PPUSH
7248: CALL 55136 0 1
7252: ST_TO_ADDR
// if class = 5 then
7253: LD_VAR 0 8
7257: PUSH
7258: LD_INT 5
7260: EQUAL
7261: IFFALSE 7271
// class := 1 ;
7263: LD_ADDR_VAR 0 8
7267: PUSH
7268: LD_INT 1
7270: ST_TO_ADDR
// end ;
7271: GO 7077
7273: POP
7274: POP
// if not mpTeamPreset then
7275: LD_LOC 1
7279: NOT
7280: IFFALSE 7292
// mpTeamPreset := result ;
7282: LD_ADDR_LOC 1
7286: PUSH
7287: LD_VAR 0 5
7291: ST_TO_ADDR
// end ;
7292: LD_VAR 0 5
7296: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
7297: LD_INT 0
7299: PPUSH
7300: PPUSH
// result := [ ] ;
7301: LD_ADDR_VAR 0 4
7305: PUSH
7306: EMPTY
7307: ST_TO_ADDR
// if not vehicles then
7308: LD_VAR 0 3
7312: NOT
7313: IFFALSE 7317
// exit ;
7315: GO 7531
// for i := 1 to vehicles [ nation ] do
7317: LD_ADDR_VAR 0 5
7321: PUSH
7322: DOUBLE
7323: LD_INT 1
7325: DEC
7326: ST_TO_ADDR
7327: LD_VAR 0 3
7331: PUSH
7332: LD_VAR 0 2
7336: ARRAY
7337: PUSH
7338: FOR_TO
7339: IFFALSE 7529
// begin uc_side := side ;
7341: LD_ADDR_OWVAR 20
7345: PUSH
7346: LD_VAR 0 1
7350: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
7351: LD_VAR 0 3
7355: PUSH
7356: LD_VAR 0 2
7360: ARRAY
7361: PUSH
7362: LD_VAR 0 5
7366: ARRAY
7367: PPUSH
7368: CALL 17797 0 1
7372: PUSH
7373: LD_INT 4
7375: GREATER
7376: IFFALSE 7406
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
7378: LD_ADDR_OWVAR 21
7382: PUSH
7383: LD_VAR 0 3
7387: PUSH
7388: LD_VAR 0 2
7392: ARRAY
7393: PUSH
7394: LD_VAR 0 5
7398: ARRAY
7399: PUSH
7400: LD_INT 5
7402: ARRAY
7403: ST_TO_ADDR
7404: GO 7416
// uc_nation := nation ;
7406: LD_ADDR_OWVAR 21
7410: PUSH
7411: LD_VAR 0 2
7415: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
7416: LD_VAR 0 3
7420: PUSH
7421: LD_VAR 0 2
7425: ARRAY
7426: PUSH
7427: LD_VAR 0 5
7431: ARRAY
7432: PUSH
7433: LD_INT 1
7435: ARRAY
7436: PPUSH
7437: LD_VAR 0 3
7441: PUSH
7442: LD_VAR 0 2
7446: ARRAY
7447: PUSH
7448: LD_VAR 0 5
7452: ARRAY
7453: PUSH
7454: LD_INT 2
7456: ARRAY
7457: PPUSH
7458: LD_VAR 0 3
7462: PUSH
7463: LD_VAR 0 2
7467: ARRAY
7468: PUSH
7469: LD_VAR 0 5
7473: ARRAY
7474: PUSH
7475: LD_INT 3
7477: ARRAY
7478: PPUSH
7479: LD_VAR 0 3
7483: PUSH
7484: LD_VAR 0 2
7488: ARRAY
7489: PUSH
7490: LD_VAR 0 5
7494: ARRAY
7495: PUSH
7496: LD_INT 4
7498: ARRAY
7499: PPUSH
7500: LD_INT 80
7502: PPUSH
7503: CALL 20593 0 5
// result := Join ( result , CreateVehicle ) ;
7507: LD_ADDR_VAR 0 4
7511: PUSH
7512: LD_VAR 0 4
7516: PPUSH
7517: CALL_OW 45
7521: PPUSH
7522: CALL 53763 0 2
7526: ST_TO_ADDR
// end ;
7527: GO 7338
7529: POP
7530: POP
// end ;
7531: LD_VAR 0 4
7535: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
7536: LD_INT 0
7538: PPUSH
7539: PPUSH
// for i in mpBattleFlags do
7540: LD_ADDR_VAR 0 3
7544: PUSH
7545: LD_EXP 23
7549: PUSH
7550: FOR_IN
7551: IFFALSE 7628
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
7553: LD_VAR 0 3
7557: PPUSH
7558: LD_INT 1
7560: PUSH
7561: LD_VAR 0 1
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: LD_INT 2
7572: PUSH
7573: LD_VAR 0 1
7577: PUSH
7578: LD_REAL  7.00000000000000E-0001
7581: MUL
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: PUSH
7587: LD_INT 3
7589: PUSH
7590: LD_VAR 0 1
7594: PUSH
7595: LD_REAL  4.00000000000000E-0001
7598: MUL
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PUSH
7604: LD_INT 20
7606: PUSH
7607: LD_VAR 0 1
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: PPUSH
7622: CALL_OW 423
7626: GO 7550
7628: POP
7629: POP
// end ;
7630: LD_VAR 0 2
7634: RET
// every 0 0$1 trigger mpActive do var i , strength ;
7635: LD_INT 100
7637: IFFALSE 7732
7639: GO 7641
7641: DISABLE
7642: LD_INT 0
7644: PPUSH
7645: PPUSH
// begin if mpBattleFlag <= 0 then
7646: LD_EXP 22
7650: PUSH
7651: LD_INT 0
7653: LESSEQUAL
7654: IFFALSE 7658
// exit ;
7656: GO 7732
// strength := 100 ;
7658: LD_ADDR_VAR 0 2
7662: PUSH
7663: LD_INT 100
7665: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
7666: LD_EXP 22
7670: PPUSH
7671: CALL_OW 67
// strength := Dec ( strength ) ;
7675: LD_ADDR_VAR 0 2
7679: PUSH
7680: LD_VAR 0 2
7684: PPUSH
7685: CALL 55158 0 1
7689: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
7690: LD_VAR 0 2
7694: PPUSH
7695: CALL 7536 0 1
// until not strength ;
7699: LD_VAR 0 2
7703: NOT
7704: IFFALSE 7666
// for i in mpBattleFlags do
7706: LD_ADDR_VAR 0 1
7710: PUSH
7711: LD_EXP 23
7715: PUSH
7716: FOR_IN
7717: IFFALSE 7730
// KillBattleFlag ( i ) ;
7719: LD_VAR 0 1
7723: PPUSH
7724: CALL_OW 419
7728: GO 7716
7730: POP
7731: POP
// end ;
7732: PPOPN 2
7734: END
// every 0 0$1 marked mpActive do var side , tmp ;
7735: GO 7737
7737: DISABLE
7738: LD_INT 0
7740: PPUSH
7741: PPUSH
// begin if mpSibBomb <= 1 then
7742: LD_EXP 28
7746: PUSH
7747: LD_INT 1
7749: LESSEQUAL
7750: IFFALSE 7754
// exit ;
7752: GO 7827
// tmp := mpSibBomb ;
7754: LD_ADDR_VAR 0 2
7758: PUSH
7759: LD_EXP 28
7763: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7764: LD_INT 35
7766: PPUSH
7767: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7771: LD_ADDR_VAR 0 2
7775: PUSH
7776: LD_VAR 0 2
7780: PUSH
7781: LD_INT 35
7783: MINUS
7784: ST_TO_ADDR
// until not tmp ;
7785: LD_VAR 0 2
7789: NOT
7790: IFFALSE 7764
// for side := 1 to 8 do
7792: LD_ADDR_VAR 0 1
7796: PUSH
7797: DOUBLE
7798: LD_INT 1
7800: DEC
7801: ST_TO_ADDR
7802: LD_INT 8
7804: PUSH
7805: FOR_TO
7806: IFFALSE 7825
// SetTech ( tech_SibFiss , side , state_enabled ) ;
7808: LD_INT 25
7810: PPUSH
7811: LD_VAR 0 1
7815: PPUSH
7816: LD_INT 1
7818: PPUSH
7819: CALL_OW 322
7823: GO 7805
7825: POP
7826: POP
// end ;
7827: PPOPN 2
7829: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
7830: LD_INT 0
7832: PPUSH
7833: PPUSH
7834: PPUSH
// mpBuildUpTimeDelay := 0 ;
7835: LD_ADDR_EXP 47
7839: PUSH
7840: LD_INT 0
7842: ST_TO_ADDR
// if not mpBuildUpTime then
7843: LD_EXP 20
7847: NOT
7848: IFFALSE 7852
// exit ;
7850: GO 8041
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
7852: LD_ADDR_EXP 47
7856: PUSH
7857: LD_INT 8400
7859: PUSH
7860: LD_INT 2100
7862: PUSH
7863: LD_EXP 20
7867: MUL
7868: PLUS
7869: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
7870: LD_ADDR_EXP 48
7874: PUSH
7875: LD_INT 1
7877: ST_TO_ADDR
// for i := 1 to 8 do
7878: LD_ADDR_VAR 0 2
7882: PUSH
7883: DOUBLE
7884: LD_INT 1
7886: DEC
7887: ST_TO_ADDR
7888: LD_INT 8
7890: PUSH
7891: FOR_TO
7892: IFFALSE 8039
// if mpSidePositions [ i ] then
7894: LD_EXP 7
7898: PUSH
7899: LD_VAR 0 2
7903: ARRAY
7904: IFFALSE 8037
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
7906: LD_EXP 19
7910: PUSH
7911: LD_EXP 7
7915: PUSH
7916: LD_VAR 0 2
7920: ARRAY
7921: ARRAY
7922: PPUSH
7923: LD_INT 5
7925: PPUSH
7926: CALL_OW 424
// for j := 1 to 8 do
7930: LD_ADDR_VAR 0 3
7934: PUSH
7935: DOUBLE
7936: LD_INT 1
7938: DEC
7939: ST_TO_ADDR
7940: LD_INT 8
7942: PUSH
7943: FOR_TO
7944: IFFALSE 8035
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
7946: LD_EXP 7
7950: PUSH
7951: LD_VAR 0 3
7955: ARRAY
7956: IFFALSE 8005
7958: PUSH
7959: LD_EXP 8
7963: PUSH
7964: LD_VAR 0 2
7968: ARRAY
7969: PUSH
7970: LD_EXP 8
7974: PUSH
7975: LD_VAR 0 3
7979: ARRAY
7980: NONEQUAL
7981: IFTRUE 8004
7983: PUSH
7984: LD_EXP 11
7988: NOT
7989: IFFALSE 8003
7991: PUSH
7992: LD_VAR 0 2
7996: PUSH
7997: LD_VAR 0 3
8001: NONEQUAL
8002: AND
8003: OR
8004: AND
8005: IFFALSE 8033
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
8007: LD_VAR 0 3
8011: PPUSH
8012: LD_EXP 19
8016: PUSH
8017: LD_EXP 7
8021: PUSH
8022: LD_VAR 0 2
8026: ARRAY
8027: ARRAY
8028: PPUSH
8029: CALL_OW 333
8033: GO 7943
8035: POP
8036: POP
// end ;
8037: GO 7891
8039: POP
8040: POP
// end ;
8041: LD_VAR 0 1
8045: RET
// function EndBuildUp ; var i , j ; begin
8046: LD_INT 0
8048: PPUSH
8049: PPUSH
8050: PPUSH
// mpBuildUpTimeActive := false ;
8051: LD_ADDR_EXP 48
8055: PUSH
8056: LD_INT 0
8058: ST_TO_ADDR
// for i := 1 to 8 do
8059: LD_ADDR_VAR 0 2
8063: PUSH
8064: DOUBLE
8065: LD_INT 1
8067: DEC
8068: ST_TO_ADDR
8069: LD_INT 8
8071: PUSH
8072: FOR_TO
8073: IFFALSE 8220
// if mpSidePositions [ i ] then
8075: LD_EXP 7
8079: PUSH
8080: LD_VAR 0 2
8084: ARRAY
8085: IFFALSE 8218
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
8087: LD_EXP 19
8091: PUSH
8092: LD_EXP 7
8096: PUSH
8097: LD_VAR 0 2
8101: ARRAY
8102: ARRAY
8103: PPUSH
8104: LD_INT 0
8106: PPUSH
8107: CALL_OW 424
// for j := 1 to 8 do
8111: LD_ADDR_VAR 0 3
8115: PUSH
8116: DOUBLE
8117: LD_INT 1
8119: DEC
8120: ST_TO_ADDR
8121: LD_INT 8
8123: PUSH
8124: FOR_TO
8125: IFFALSE 8216
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
8127: LD_EXP 7
8131: PUSH
8132: LD_VAR 0 3
8136: ARRAY
8137: IFFALSE 8186
8139: PUSH
8140: LD_EXP 8
8144: PUSH
8145: LD_VAR 0 2
8149: ARRAY
8150: PUSH
8151: LD_EXP 8
8155: PUSH
8156: LD_VAR 0 3
8160: ARRAY
8161: NONEQUAL
8162: IFTRUE 8185
8164: PUSH
8165: LD_EXP 11
8169: NOT
8170: IFFALSE 8184
8172: PUSH
8173: LD_VAR 0 2
8177: PUSH
8178: LD_VAR 0 3
8182: NONEQUAL
8183: AND
8184: OR
8185: AND
8186: IFFALSE 8214
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
8188: LD_VAR 0 3
8192: PPUSH
8193: LD_EXP 19
8197: PUSH
8198: LD_EXP 7
8202: PUSH
8203: LD_VAR 0 2
8207: ARRAY
8208: ARRAY
8209: PPUSH
8210: CALL_OW 334
8214: GO 8124
8216: POP
8217: POP
// end ;
8218: GO 8072
8220: POP
8221: POP
// end ;
8222: LD_VAR 0 1
8226: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
8227: LD_EXP 48
8231: IFFALSE 8410
8233: GO 8235
8235: DISABLE
8236: LD_INT 0
8238: PPUSH
8239: PPUSH
// begin for i := 1 to 8 do
8240: LD_ADDR_VAR 0 1
8244: PUSH
8245: DOUBLE
8246: LD_INT 1
8248: DEC
8249: ST_TO_ADDR
8250: LD_INT 8
8252: PUSH
8253: FOR_TO
8254: IFFALSE 8407
// if mpSidePositions [ i ] then
8256: LD_EXP 7
8260: PUSH
8261: LD_VAR 0 1
8265: ARRAY
8266: IFFALSE 8405
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
8268: LD_ADDR_VAR 0 2
8272: PUSH
8273: LD_EXP 19
8277: PUSH
8278: LD_EXP 7
8282: PUSH
8283: LD_VAR 0 1
8287: ARRAY
8288: ARRAY
8289: PPUSH
8290: LD_INT 2
8292: PUSH
8293: LD_INT 21
8295: PUSH
8296: LD_INT 1
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: LD_INT 21
8305: PUSH
8306: LD_INT 2
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 22
8320: PUSH
8321: LD_OWVAR 2
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PPUSH
8334: CALL_OW 70
8338: PUSH
8339: FOR_IN
8340: IFFALSE 8403
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
8342: LD_EXP 8
8346: PUSH
8347: LD_VAR 0 1
8351: ARRAY
8352: PUSH
8353: LD_EXP 8
8357: PUSH
8358: LD_OWVAR 2
8362: ARRAY
8363: NONEQUAL
8364: IFTRUE 8387
8366: PUSH
8367: LD_EXP 11
8371: NOT
8372: IFFALSE 8386
8374: PUSH
8375: LD_VAR 0 1
8379: PUSH
8380: LD_OWVAR 2
8384: NONEQUAL
8385: AND
8386: OR
8387: IFFALSE 8401
// ComMoveToArea ( un , BuildUpEscape ) ;
8389: LD_VAR 0 2
8393: PPUSH
8394: LD_INT 4
8396: PPUSH
8397: CALL_OW 113
8401: GO 8339
8403: POP
8404: POP
8405: GO 8253
8407: POP
8408: POP
// enable ;
8409: ENABLE
// end ;
8410: PPOPN 2
8412: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
8413: LD_EXP 20
8417: IFFALSE 8467
8419: GO 8421
8421: DISABLE
8422: LD_INT 0
8424: PPUSH
// begin tmp := mpBuildUpTime ;
8425: LD_ADDR_VAR 0 1
8429: PUSH
8430: LD_EXP 20
8434: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8435: LD_INT 35
8437: PPUSH
8438: CALL_OW 67
// tmp := tmp - 0 0$1 ;
8442: LD_ADDR_VAR 0 1
8446: PUSH
8447: LD_VAR 0 1
8451: PUSH
8452: LD_INT 35
8454: MINUS
8455: ST_TO_ADDR
// until not tmp ;
8456: LD_VAR 0 1
8460: NOT
8461: IFFALSE 8435
// EndBuildUp ;
8463: CALL 8046 0 0
// end ;
8467: PPOPN 1
8469: END
// every 0 0$1 trigger mpActive marked mpWin do
8470: LD_INT 100
8472: IFFALSE 8506
8474: GO 8476
8476: DISABLE
// begin if IAmServer then
8477: CALL_OW 518
8481: IFFALSE 8490
// wait ( 0 0$3 ) ;
8483: LD_INT 105
8485: PPUSH
8486: CALL_OW 67
// if Multiplayer then
8490: LD_OWVAR 4
8494: IFFALSE 8502
// YouWinInMultiplayer else
8496: CALL_OW 106
8500: GO 8506
// YouWin ;
8502: CALL_OW 103
// end ;
8506: END
// export function HasPowerByGameType ( gameType , side ) ; begin
8507: LD_INT 0
8509: PPUSH
// result := false ;
8510: LD_ADDR_VAR 0 3
8514: PUSH
8515: LD_INT 0
8517: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
8518: LD_VAR 0 1
8522: PUSH
8523: LD_INT 1
8525: DOUBLE
8526: EQUAL
8527: IFTRUE 8549
8529: LD_INT 5
8531: DOUBLE
8532: EQUAL
8533: IFTRUE 8549
8535: LD_INT 6
8537: DOUBLE
8538: EQUAL
8539: IFTRUE 8549
8541: LD_INT 7
8543: DOUBLE
8544: EQUAL
8545: IFTRUE 8549
8547: GO 8622
8549: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
8550: LD_ADDR_VAR 0 3
8554: PUSH
8555: LD_INT 22
8557: PUSH
8558: LD_VAR 0 2
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 2
8569: PUSH
8570: LD_INT 21
8572: PUSH
8573: LD_INT 1
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 33
8582: PUSH
8583: LD_INT 3
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 33
8592: PUSH
8593: LD_INT 5
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: PPUSH
8610: CALL_OW 69
8614: PPUSH
8615: CALL 17797 0 1
8619: ST_TO_ADDR
// end ; GameTypeSurvival :
8620: GO 8861
8622: LD_INT 2
8624: DOUBLE
8625: EQUAL
8626: IFTRUE 8630
8628: GO 8760
8630: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
8631: LD_ADDR_VAR 0 3
8635: PUSH
8636: LD_INT 22
8638: PUSH
8639: LD_VAR 0 2
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PUSH
8648: LD_INT 2
8650: PUSH
8651: LD_INT 30
8653: PUSH
8654: LD_INT 0
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PUSH
8661: LD_INT 30
8663: PUSH
8664: LD_INT 1
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: LIST
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PPUSH
8680: CALL_OW 69
8684: PPUSH
8685: CALL 17797 0 1
8689: IFFALSE 8757
8691: PUSH
8692: LD_INT 22
8694: PUSH
8695: LD_VAR 0 2
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: LD_INT 2
8706: PUSH
8707: LD_INT 21
8709: PUSH
8710: LD_INT 1
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 33
8719: PUSH
8720: LD_INT 3
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 33
8729: PUSH
8730: LD_INT 5
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PPUSH
8747: CALL_OW 69
8751: PPUSH
8752: CALL 17797 0 1
8756: AND
8757: ST_TO_ADDR
// end ; GameTypeKing :
8758: GO 8861
8760: LD_INT 3
8762: DOUBLE
8763: EQUAL
8764: IFTRUE 8768
8766: GO 8860
8768: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
8769: LD_ADDR_VAR 0 3
8773: PUSH
8774: LD_INT 22
8776: PUSH
8777: LD_VAR 0 2
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 2
8788: PUSH
8789: LD_INT 21
8791: PUSH
8792: LD_INT 1
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: LD_INT 33
8801: PUSH
8802: LD_INT 3
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 33
8811: PUSH
8812: LD_INT 5
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PPUSH
8829: CALL_OW 69
8833: PPUSH
8834: CALL 17797 0 1
8838: IFFALSE 8857
8840: PUSH
8841: LD_VAR 0 2
8845: PPUSH
8846: CALL 14913 0 1
8850: PUSH
8851: LD_EXP 35
8855: LESS
8856: AND
8857: ST_TO_ADDR
// end ; end ;
8858: GO 8861
8860: POP
// end ;
8861: LD_VAR 0 3
8865: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
8866: LD_INT 100
8868: IFFALSE 9098
8870: GO 8872
8872: DISABLE
8873: LD_INT 0
8875: PPUSH
8876: PPUSH
// begin if Multiplayer then
8877: LD_OWVAR 4
8881: IFFALSE 8889
// SetPlayerSpectator ( ) else
8883: CALL_OW 572
8887: GO 8898
// FogOff ( your_side ) ;
8889: LD_OWVAR 2
8893: PPUSH
8894: CALL_OW 344
// repeat gameIsOn := false ;
8898: LD_ADDR_VAR 0 1
8902: PUSH
8903: LD_INT 0
8905: ST_TO_ADDR
// for i := 1 to 8 do
8906: LD_ADDR_VAR 0 2
8910: PUSH
8911: DOUBLE
8912: LD_INT 1
8914: DEC
8915: ST_TO_ADDR
8916: LD_INT 8
8918: PUSH
8919: FOR_TO
8920: IFFALSE 9050
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8922: LD_EXP 7
8926: PUSH
8927: LD_VAR 0 2
8931: ARRAY
8932: IFFALSE 8945
8934: PUSH
8935: LD_VAR 0 2
8939: PPUSH
8940: CALL_OW 108
8944: AND
8945: IFFALSE 8959
8947: PUSH
8948: LD_VAR 0 2
8952: PUSH
8953: LD_OWVAR 2
8957: NONEQUAL
8958: AND
8959: IFFALSE 9048
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8961: LD_EXP 8
8965: PUSH
8966: LD_VAR 0 2
8970: ARRAY
8971: NOT
8972: IFTRUE 9020
8974: PUSH
8975: LD_EXP 8
8979: PUSH
8980: LD_VAR 0 2
8984: ARRAY
8985: PUSH
8986: LD_EXP 8
8990: PUSH
8991: LD_OWVAR 2
8995: ARRAY
8996: NONEQUAL
8997: IFFALSE 9019
8999: PUSH
9000: LD_OWVAR 2
9004: PPUSH
9005: LD_VAR 0 2
9009: PPUSH
9010: CALL_OW 81
9014: PUSH
9015: LD_INT 1
9017: NONEQUAL
9018: AND
9019: OR
9020: IFFALSE 9048
// if HasPowerByGameType ( mpGameType , i ) then
9022: LD_EXP 3
9026: PPUSH
9027: LD_VAR 0 2
9031: PPUSH
9032: CALL 8507 0 2
9036: IFFALSE 9048
// begin gameIsOn := true ;
9038: LD_ADDR_VAR 0 1
9042: PUSH
9043: LD_INT 1
9045: ST_TO_ADDR
// break ;
9046: GO 9050
// end ;
9048: GO 8919
9050: POP
9051: POP
// wait ( 100 ) ;
9052: LD_INT 100
9054: PPUSH
9055: CALL_OW 67
// until not gameIsOn ;
9059: LD_VAR 0 1
9063: NOT
9064: IFFALSE 8898
// if IAmServer then
9066: CALL_OW 518
9070: IFFALSE 9079
// wait ( 0 0$3 ) ;
9072: LD_INT 105
9074: PPUSH
9075: CALL_OW 67
// if Multiplayer then
9079: LD_OWVAR 4
9083: IFFALSE 9091
// YouLostInMultiplayer else
9085: CALL_OW 107
9089: GO 9098
// YouLost (  ) ;
9091: LD_STRING 
9093: PPUSH
9094: CALL_OW 104
// end ;
9098: PPOPN 2
9100: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
9101: LD_EXP 33
9105: IFFALSE 9489
9107: GO 9109
9109: DISABLE
9110: LD_INT 0
9112: PPUSH
9113: PPUSH
9114: PPUSH
9115: PPUSH
9116: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
9117: LD_ADDR_VAR 0 5
9121: PUSH
9122: LD_INT 1
9124: PUSH
9125: LD_INT 2
9127: PUSH
9128: LD_INT 3
9130: PUSH
9131: LD_INT 4
9133: PUSH
9134: LD_INT 5
9136: PUSH
9137: LD_INT 6
9139: PUSH
9140: LD_INT 7
9142: PUSH
9143: LD_INT 8
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
9156: LD_INT 350
9158: PPUSH
9159: CALL_OW 67
// for i := 1 to 8 do
9163: LD_ADDR_VAR 0 1
9167: PUSH
9168: DOUBLE
9169: LD_INT 1
9171: DEC
9172: ST_TO_ADDR
9173: LD_INT 8
9175: PUSH
9176: FOR_TO
9177: IFFALSE 9459
// begin j := sides [ i ] ;
9179: LD_ADDR_VAR 0 2
9183: PUSH
9184: LD_VAR 0 5
9188: PUSH
9189: LD_VAR 0 1
9193: ARRAY
9194: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
9195: LD_EXP 40
9199: PUSH
9200: LD_VAR 0 2
9204: ARRAY
9205: PPUSH
9206: CALL 17797 0 1
9210: IFFALSE 9223
9212: PUSH
9213: LD_VAR 0 2
9217: PPUSH
9218: CALL_OW 108
9222: AND
9223: IFFALSE 9241
9225: PUSH
9226: LD_EXP 3
9230: PPUSH
9231: LD_VAR 0 2
9235: PPUSH
9236: CALL 8507 0 2
9240: AND
9241: IFFALSE 9457
// begin wait ( mpRespawn div 2 ) ;
9243: LD_EXP 33
9247: PUSH
9248: LD_INT 2
9250: DIV
9251: PPUSH
9252: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9256: LD_ADDR_VAR 0 3
9260: PUSH
9261: LD_INT 22
9263: PUSH
9264: LD_VAR 0 2
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PUSH
9273: LD_INT 50
9275: PUSH
9276: EMPTY
9277: LIST
9278: PUSH
9279: LD_INT 2
9281: PUSH
9282: LD_INT 30
9284: PUSH
9285: LD_INT 0
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: PUSH
9292: LD_INT 30
9294: PUSH
9295: LD_INT 1
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 69
9316: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
9317: LD_VAR 0 3
9321: NOT
9322: IFTRUE 9336
9324: PUSH
9325: LD_VAR 0 2
9329: PPUSH
9330: CALL_OW 108
9334: NOT
9335: OR
9336: IFTRUE 9355
9338: PUSH
9339: LD_EXP 3
9343: PPUSH
9344: LD_VAR 0 2
9348: PPUSH
9349: CALL 8507 0 2
9353: NOT
9354: OR
9355: IFFALSE 9359
// continue ;
9357: GO 9176
// spawn := tmp [ 1 ] ;
9359: LD_ADDR_VAR 0 4
9363: PUSH
9364: LD_VAR 0 3
9368: PUSH
9369: LD_INT 1
9371: ARRAY
9372: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
9373: LD_EXP 40
9377: PUSH
9378: LD_VAR 0 2
9382: ARRAY
9383: PUSH
9384: LD_INT 1
9386: ARRAY
9387: PPUSH
9388: LD_VAR 0 4
9392: PPUSH
9393: CALL_OW 250
9397: PPUSH
9398: LD_VAR 0 4
9402: PPUSH
9403: CALL_OW 251
9407: PPUSH
9408: LD_INT 32
9410: PPUSH
9411: LD_INT 1
9413: PPUSH
9414: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
9418: LD_ADDR_EXP 40
9422: PUSH
9423: LD_EXP 40
9427: PPUSH
9428: LD_VAR 0 2
9432: PPUSH
9433: LD_EXP 40
9437: PUSH
9438: LD_VAR 0 2
9442: ARRAY
9443: PPUSH
9444: LD_INT 1
9446: PPUSH
9447: CALL_OW 3
9451: PPUSH
9452: CALL_OW 1
9456: ST_TO_ADDR
// end ; end ;
9457: GO 9176
9459: POP
9460: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
9461: LD_ADDR_VAR 0 5
9465: PUSH
9466: LD_VAR 0 5
9470: PPUSH
9471: LD_INT 1
9473: PPUSH
9474: LD_INT 8
9476: PPUSH
9477: LD_INT 1
9479: PPUSH
9480: CALL 20123 0 4
9484: ST_TO_ADDR
// until false ;
9485: LD_INT 0
9487: IFFALSE 9156
// end ;
9489: PPOPN 5
9491: END
// every 0 0$1 marked mpActive do
9492: GO 9494
9494: DISABLE
// begin enable ;
9495: ENABLE
// if not mpDisplayStrings then
9496: LD_EXP 38
9500: NOT
9501: IFFALSE 9512
// begin display_strings := [ ] ;
9503: LD_ADDR_OWVAR 47
9507: PUSH
9508: EMPTY
9509: ST_TO_ADDR
// exit ;
9510: GO 9522
// end ; display_strings := mpDisplayStrings ;
9512: LD_ADDR_OWVAR 47
9516: PUSH
9517: LD_EXP 38
9521: ST_TO_ADDR
// end ; end_of_file
9522: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
9523: LD_INT 0
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
// if GetType ( un ) = unit_vehicle then
9534: LD_VAR 0 1
9538: PPUSH
9539: CALL_OW 247
9543: PUSH
9544: LD_INT 2
9546: EQUAL
9547: IFFALSE 9551
// exit ;
9549: GO 10225
// side := GetSide ( un ) ;
9551: LD_ADDR_VAR 0 9
9555: PUSH
9556: LD_VAR 0 1
9560: PPUSH
9561: CALL_OW 255
9565: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
9566: LD_EXP 3
9570: PUSH
9571: LD_INT 2
9573: EQUAL
9574: IFFALSE 9668
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
9576: LD_VAR 0 1
9580: PPUSH
9581: CALL_OW 266
9585: PUSH
9586: LD_INT 0
9588: PUSH
9589: LD_INT 1
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: IN
9596: IFFALSE 9668
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
9598: LD_ADDR_VAR 0 3
9602: PUSH
9603: LD_INT 22
9605: PUSH
9606: LD_VAR 0 9
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 2
9617: PUSH
9618: LD_INT 21
9620: PUSH
9621: LD_INT 1
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 33
9630: PUSH
9631: LD_INT 3
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PPUSH
9647: CALL_OW 69
9651: PUSH
9652: FOR_IN
9653: IFFALSE 9666
// KillUnit ( i ) ;
9655: LD_VAR 0 3
9659: PPUSH
9660: CALL_OW 66
9664: GO 9652
9666: POP
9667: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
9668: LD_VAR 0 1
9672: PPUSH
9673: CALL_OW 257
9677: PUSH
9678: LD_INT 12
9680: PUSH
9681: LD_INT 17
9683: PUSH
9684: LD_INT 15
9686: PUSH
9687: LD_INT 16
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: IN
9696: IFTRUE 9713
9698: PUSH
9699: LD_VAR 0 1
9703: PPUSH
9704: CALL_OW 263
9708: PUSH
9709: LD_INT 5
9711: EQUAL
9712: OR
9713: IFFALSE 9950
// begin tag := 0 ;
9715: LD_ADDR_VAR 0 5
9719: PUSH
9720: LD_INT 0
9722: ST_TO_ADDR
// for i := 1 to 8 do
9723: LD_ADDR_VAR 0 3
9727: PUSH
9728: DOUBLE
9729: LD_INT 1
9731: DEC
9732: ST_TO_ADDR
9733: LD_INT 8
9735: PUSH
9736: FOR_TO
9737: IFFALSE 9771
// if un in mpApePosIndex [ i ] then
9739: LD_VAR 0 1
9743: PUSH
9744: LD_EXP 32
9748: PUSH
9749: LD_VAR 0 3
9753: ARRAY
9754: IN
9755: IFFALSE 9769
// begin tag := i ;
9757: LD_ADDR_VAR 0 5
9761: PUSH
9762: LD_VAR 0 3
9766: ST_TO_ADDR
// break ;
9767: GO 9771
// end ;
9769: GO 9736
9771: POP
9772: POP
// if not tag then
9773: LD_VAR 0 5
9777: NOT
9778: IFFALSE 9782
// exit ;
9780: GO 10225
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9782: LD_ADDR_VAR 0 7
9786: PUSH
9787: LD_EXP 31
9791: PUSH
9792: LD_EXP 7
9796: PUSH
9797: LD_VAR 0 5
9801: ARRAY
9802: ARRAY
9803: ST_TO_ADDR
// if not area then
9804: LD_VAR 0 7
9808: NOT
9809: IFFALSE 9813
// exit ;
9811: GO 10225
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9813: LD_INT 14700
9815: PUSH
9816: LD_VAR 0 1
9820: PUSH
9821: LD_INT 5
9823: MOD
9824: PUSH
9825: LD_INT 1
9827: PLUS
9828: PUSH
9829: LD_INT 700
9831: MUL
9832: PLUS
9833: PPUSH
9834: CALL_OW 67
// repeat wait ( 10 ) ;
9838: LD_INT 10
9840: PPUSH
9841: CALL_OW 67
// until not mpBlockRespThread ;
9845: LD_EXP 46
9849: NOT
9850: IFFALSE 9838
// mpBlockRespThread := true ;
9852: LD_ADDR_EXP 46
9856: PUSH
9857: LD_INT 1
9859: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9860: LD_INT 0
9862: PPUSH
9863: CALL 49890 0 1
// ape := CreateHuman ;
9867: LD_ADDR_VAR 0 4
9871: PUSH
9872: CALL_OW 44
9876: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9877: LD_ADDR_EXP 32
9881: PUSH
9882: LD_EXP 32
9886: PPUSH
9887: LD_VAR 0 5
9891: PPUSH
9892: LD_EXP 32
9896: PUSH
9897: LD_VAR 0 5
9901: ARRAY
9902: PPUSH
9903: LD_VAR 0 4
9907: PPUSH
9908: CALL 53763 0 2
9912: PPUSH
9913: CALL_OW 1
9917: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9918: LD_VAR 0 4
9922: PPUSH
9923: LD_VAR 0 7
9927: PPUSH
9928: LD_INT 0
9930: PPUSH
9931: CALL_OW 49
// wait ( 10 ) ;
9935: LD_INT 10
9937: PPUSH
9938: CALL_OW 67
// mpBlockRespThread := false ;
9942: LD_ADDR_EXP 46
9946: PUSH
9947: LD_INT 0
9949: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
9950: LD_VAR 0 1
9954: PPUSH
9955: CALL_OW 247
9959: PUSH
9960: LD_INT 1
9962: EQUAL
9963: IFFALSE 9980
9965: PUSH
9966: LD_VAR 0 1
9970: PPUSH
9971: CALL_OW 248
9975: PUSH
9976: LD_INT 0
9978: GREATER
9979: AND
9980: IFFALSE 10225
// begin if not mpRespawn then
9982: LD_EXP 33
9986: NOT
9987: IFFALSE 9991
// exit ;
9989: GO 10225
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
9991: LD_VAR 0 9
9995: PPUSH
9996: CALL_OW 108
10000: NOT
10001: IFFALSE 10020
10003: PUSH
10004: LD_EXP 3
10008: PPUSH
10009: LD_VAR 0 9
10013: PPUSH
10014: CALL 8507 0 2
10018: NOT
10019: AND
10020: IFFALSE 10024
// exit ;
10022: GO 10225
// side := GetSide ( un ) ;
10024: LD_ADDR_VAR 0 9
10028: PUSH
10029: LD_VAR 0 1
10033: PPUSH
10034: CALL_OW 255
10038: ST_TO_ADDR
// nation := GetNation ( un ) ;
10039: LD_ADDR_VAR 0 8
10043: PUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 248
10053: ST_TO_ADDR
// class := GetClass ( un ) ;
10054: LD_ADDR_VAR 0 6
10058: PUSH
10059: LD_VAR 0 1
10063: PPUSH
10064: CALL_OW 257
10068: ST_TO_ADDR
// if class > 4 then
10069: LD_VAR 0 6
10073: PUSH
10074: LD_INT 4
10076: GREATER
10077: IFFALSE 10087
// class := 1 ;
10079: LD_ADDR_VAR 0 6
10083: PUSH
10084: LD_INT 1
10086: ST_TO_ADDR
// repeat wait ( 10 ) ;
10087: LD_INT 10
10089: PPUSH
10090: CALL_OW 67
// until not mpBlockRespThread ;
10094: LD_EXP 46
10098: NOT
10099: IFFALSE 10087
// mpBlockRespThread := true ;
10101: LD_ADDR_EXP 46
10105: PUSH
10106: LD_INT 1
10108: ST_TO_ADDR
// uc_side := side ;
10109: LD_ADDR_OWVAR 20
10113: PUSH
10114: LD_VAR 0 9
10118: ST_TO_ADDR
// uc_nation := nation ;
10119: LD_ADDR_OWVAR 21
10123: PUSH
10124: LD_VAR 0 8
10128: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
10129: LD_INT 0
10131: PPUSH
10132: LD_VAR 0 6
10136: PPUSH
10137: LD_INT 2
10139: PPUSH
10140: CALL_OW 380
// un := CreateHuman ;
10144: LD_ADDR_VAR 0 1
10148: PUSH
10149: CALL_OW 44
10153: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
10154: LD_ADDR_EXP 40
10158: PUSH
10159: LD_EXP 40
10163: PPUSH
10164: LD_VAR 0 9
10168: PPUSH
10169: LD_EXP 40
10173: PUSH
10174: LD_VAR 0 9
10178: ARRAY
10179: PPUSH
10180: LD_EXP 40
10184: PUSH
10185: LD_VAR 0 9
10189: ARRAY
10190: PUSH
10191: LD_INT 1
10193: PLUS
10194: PPUSH
10195: LD_VAR 0 1
10199: PPUSH
10200: CALL_OW 1
10204: PPUSH
10205: CALL_OW 1
10209: ST_TO_ADDR
// wait ( 10 ) ;
10210: LD_INT 10
10212: PPUSH
10213: CALL_OW 67
// mpBlockRespThread := false ;
10217: LD_ADDR_EXP 46
10221: PUSH
10222: LD_INT 0
10224: ST_TO_ADDR
// end ; end ;
10225: LD_VAR 0 2
10229: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
10230: LD_INT 0
10232: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
10233: LD_VAR 0 1
10237: PPUSH
10238: CALL_OW 266
10242: PUSH
10243: LD_INT 0
10245: PUSH
10246: LD_INT 1
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: IN
10253: IFFALSE 10278
// SetBName ( building , @ & GetSide ( building ) ) ;
10255: LD_VAR 0 1
10259: PPUSH
10260: LD_STRING @
10262: PUSH
10263: LD_VAR 0 1
10267: PPUSH
10268: CALL_OW 255
10272: STR
10273: PPUSH
10274: CALL_OW 500
// end ;
10278: LD_VAR 0 2
10282: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
10283: LD_INT 0
10285: PPUSH
10286: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
10287: LD_EXP 3
10291: PUSH
10292: LD_INT 2
10294: EQUAL
10295: IFFALSE 10319
10297: PUSH
10298: LD_VAR 0 1
10302: PPUSH
10303: CALL_OW 266
10307: PUSH
10308: LD_INT 0
10310: PUSH
10311: LD_INT 1
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: IN
10318: AND
10319: IFFALSE 10398
// begin SetSide ( building , oldSide ) ;
10321: LD_VAR 0 1
10325: PPUSH
10326: LD_VAR 0 2
10330: PPUSH
10331: CALL_OW 235
// KillUnit ( building ) ;
10335: LD_VAR 0 1
10339: PPUSH
10340: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
10344: LD_ADDR_VAR 0 5
10348: PUSH
10349: LD_INT 22
10351: PUSH
10352: LD_VAR 0 2
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PUSH
10361: LD_INT 21
10363: PUSH
10364: LD_INT 1
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PPUSH
10375: CALL_OW 69
10379: PUSH
10380: FOR_IN
10381: IFFALSE 10394
// KillUnit ( i ) ;
10383: LD_VAR 0 5
10387: PPUSH
10388: CALL_OW 66
10392: GO 10380
10394: POP
10395: POP
// exit ;
10396: GO 10443
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
10398: LD_VAR 0 1
10402: PPUSH
10403: CALL_OW 266
10407: PUSH
10408: LD_INT 0
10410: PUSH
10411: LD_INT 1
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: IN
10418: IFFALSE 10443
// SetBName ( building , @ & GetSide ( building ) ) ;
10420: LD_VAR 0 1
10424: PPUSH
10425: LD_STRING @
10427: PUSH
10428: LD_VAR 0 1
10432: PPUSH
10433: CALL_OW 255
10437: STR
10438: PPUSH
10439: CALL_OW 500
// end ;
10443: LD_VAR 0 4
10447: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
10448: LD_INT 0
10450: PPUSH
10451: PPUSH
10452: PPUSH
// if mpGameType <> GameTypeFamine then
10453: LD_EXP 3
10457: PUSH
10458: LD_INT 5
10460: NONEQUAL
10461: IFFALSE 10465
// exit ;
10463: GO 10680
// for i := 1 to mpGlobalOilDeposits do
10465: LD_ADDR_VAR 0 6
10469: PUSH
10470: DOUBLE
10471: LD_INT 1
10473: DEC
10474: ST_TO_ADDR
10475: LD_EXP 41
10479: PUSH
10480: FOR_TO
10481: IFFALSE 10678
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
10483: LD_EXP 41
10487: PUSH
10488: LD_VAR 0 6
10492: ARRAY
10493: PUSH
10494: LD_INT 1
10496: ARRAY
10497: PPUSH
10498: LD_EXP 41
10502: PUSH
10503: LD_VAR 0 6
10507: ARRAY
10508: PUSH
10509: LD_INT 2
10511: ARRAY
10512: PPUSH
10513: CALL_OW 428
10517: PUSH
10518: LD_VAR 0 1
10522: EQUAL
10523: IFFALSE 10676
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
10525: LD_ADDR_VAR 0 7
10529: PUSH
10530: LD_EXP 41
10534: PUSH
10535: LD_VAR 0 6
10539: ARRAY
10540: PUSH
10541: LD_INT 3
10543: ARRAY
10544: ST_TO_ADDR
// value := value - amount ;
10545: LD_ADDR_VAR 0 7
10549: PUSH
10550: LD_VAR 0 7
10554: PUSH
10555: LD_VAR 0 4
10559: MINUS
10560: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
10561: LD_ADDR_EXP 41
10565: PUSH
10566: LD_EXP 41
10570: PPUSH
10571: LD_VAR 0 6
10575: PPUSH
10576: LD_EXP 41
10580: PUSH
10581: LD_VAR 0 6
10585: ARRAY
10586: PPUSH
10587: LD_INT 3
10589: PPUSH
10590: LD_VAR 0 7
10594: PPUSH
10595: CALL_OW 1
10599: PPUSH
10600: CALL_OW 1
10604: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
10605: LD_VAR 0 1
10609: PPUSH
10610: LD_VAR 0 7
10614: PPUSH
10615: CALL_OW 505
// if value <= 0 then
10619: LD_VAR 0 7
10623: PUSH
10624: LD_INT 0
10626: LESSEQUAL
10627: IFFALSE 10676
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
10629: LD_EXP 41
10633: PUSH
10634: LD_VAR 0 6
10638: ARRAY
10639: PUSH
10640: LD_INT 1
10642: ARRAY
10643: PPUSH
10644: LD_EXP 41
10648: PUSH
10649: LD_VAR 0 6
10653: ARRAY
10654: PUSH
10655: LD_INT 2
10657: ARRAY
10658: PPUSH
10659: CALL_OW 63
// KillUnit ( building ) ;
10663: LD_VAR 0 1
10667: PPUSH
10668: CALL_OW 66
// exit ;
10672: POP
10673: POP
10674: GO 10680
// end ; end ; end ;
10676: GO 10480
10678: POP
10679: POP
// end ;
10680: LD_VAR 0 5
10684: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
10685: LD_INT 0
10687: PPUSH
10688: PPUSH
10689: PPUSH
// if mpGameType <> GameTypeFamine then
10690: LD_EXP 3
10694: PUSH
10695: LD_INT 5
10697: NONEQUAL
10698: IFFALSE 10702
// exit ;
10700: GO 10917
// for i := 1 to mpGlobalSibDeposits do
10702: LD_ADDR_VAR 0 6
10706: PUSH
10707: DOUBLE
10708: LD_INT 1
10710: DEC
10711: ST_TO_ADDR
10712: LD_EXP 42
10716: PUSH
10717: FOR_TO
10718: IFFALSE 10915
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
10720: LD_EXP 42
10724: PUSH
10725: LD_VAR 0 6
10729: ARRAY
10730: PUSH
10731: LD_INT 1
10733: ARRAY
10734: PPUSH
10735: LD_EXP 42
10739: PUSH
10740: LD_VAR 0 6
10744: ARRAY
10745: PUSH
10746: LD_INT 2
10748: ARRAY
10749: PPUSH
10750: CALL_OW 428
10754: PUSH
10755: LD_VAR 0 1
10759: EQUAL
10760: IFFALSE 10913
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
10762: LD_ADDR_VAR 0 7
10766: PUSH
10767: LD_EXP 42
10771: PUSH
10772: LD_VAR 0 6
10776: ARRAY
10777: PUSH
10778: LD_INT 3
10780: ARRAY
10781: ST_TO_ADDR
// value := value - amount ;
10782: LD_ADDR_VAR 0 7
10786: PUSH
10787: LD_VAR 0 7
10791: PUSH
10792: LD_VAR 0 4
10796: MINUS
10797: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
10798: LD_ADDR_EXP 42
10802: PUSH
10803: LD_EXP 42
10807: PPUSH
10808: LD_VAR 0 6
10812: PPUSH
10813: LD_EXP 42
10817: PUSH
10818: LD_VAR 0 6
10822: ARRAY
10823: PPUSH
10824: LD_INT 3
10826: PPUSH
10827: LD_VAR 0 7
10831: PPUSH
10832: CALL_OW 1
10836: PPUSH
10837: CALL_OW 1
10841: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
10842: LD_VAR 0 1
10846: PPUSH
10847: LD_VAR 0 7
10851: PPUSH
10852: CALL_OW 505
// if value <= 0 then
10856: LD_VAR 0 7
10860: PUSH
10861: LD_INT 0
10863: LESSEQUAL
10864: IFFALSE 10913
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
10866: LD_EXP 42
10870: PUSH
10871: LD_VAR 0 6
10875: ARRAY
10876: PUSH
10877: LD_INT 1
10879: ARRAY
10880: PPUSH
10881: LD_EXP 42
10885: PUSH
10886: LD_VAR 0 6
10890: ARRAY
10891: PUSH
10892: LD_INT 2
10894: ARRAY
10895: PPUSH
10896: CALL_OW 63
// KillUnit ( building ) ;
10900: LD_VAR 0 1
10904: PPUSH
10905: CALL_OW 66
// exit ;
10909: POP
10910: POP
10911: GO 10917
// end ; end ; end ;
10913: GO 10717
10915: POP
10916: POP
// end ;
10917: LD_VAR 0 5
10921: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
10922: LD_INT 0
10924: PPUSH
10925: PPUSH
// side := GetSide ( factory ) ;
10926: LD_ADDR_VAR 0 7
10930: PUSH
10931: LD_VAR 0 1
10935: PPUSH
10936: CALL_OW 255
10940: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
10941: LD_VAR 0 5
10945: PUSH
10946: LD_INT 81
10948: EQUAL
10949: IFFALSE 10987
10951: PUSH
10952: LD_INT 22
10954: PUSH
10955: LD_VAR 0 7
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 34
10966: PUSH
10967: LD_INT 81
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PPUSH
10978: CALL_OW 69
10982: PUSH
10983: LD_INT 0
10985: GREATER
10986: AND
10987: IFFALSE 11020
// begin ComCancel ( factory ) ;
10989: LD_VAR 0 1
10993: PPUSH
10994: CALL_OW 127
// if side = your_side then
10998: LD_VAR 0 7
11002: PUSH
11003: LD_OWVAR 2
11007: EQUAL
11008: IFFALSE 11020
// HintSpec ( VehLimit , 2 ) ;
11010: LD_STRING VehLimit
11012: PPUSH
11013: LD_INT 2
11015: PPUSH
11016: CALL_OW 338
// end ; end ;
11020: LD_VAR 0 6
11024: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
11025: LD_INT 0
11027: PPUSH
11028: PPUSH
11029: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
11030: LD_VAR 0 1
11034: PPUSH
11035: CALL_OW 264
11039: PUSH
11040: LD_INT 81
11042: EQUAL
11043: IFFALSE 11060
11045: PUSH
11046: LD_VAR 0 1
11050: PPUSH
11051: CALL_OW 263
11055: PUSH
11056: LD_INT 1
11058: EQUAL
11059: AND
11060: IFFALSE 11340
// begin for i := 1 to Count ( minersList ) do
11062: LD_ADDR_VAR 0 6
11066: PUSH
11067: DOUBLE
11068: LD_INT 1
11070: DEC
11071: ST_TO_ADDR
11072: LD_EXP 57
11076: PPUSH
11077: CALL 17797 0 1
11081: PUSH
11082: FOR_TO
11083: IFFALSE 11201
// begin if minersList [ i ] = oldId then
11085: LD_EXP 57
11089: PUSH
11090: LD_VAR 0 6
11094: ARRAY
11095: PUSH
11096: LD_VAR 0 2
11100: EQUAL
11101: IFFALSE 11199
// begin for j := 1 to minerMinesList [ i ] do
11103: LD_ADDR_VAR 0 7
11107: PUSH
11108: DOUBLE
11109: LD_INT 1
11111: DEC
11112: ST_TO_ADDR
11113: LD_EXP 58
11117: PUSH
11118: LD_VAR 0 6
11122: ARRAY
11123: PUSH
11124: FOR_TO
11125: IFFALSE 11175
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
11127: LD_EXP 58
11131: PUSH
11132: LD_VAR 0 6
11136: ARRAY
11137: PUSH
11138: LD_VAR 0 7
11142: ARRAY
11143: PUSH
11144: LD_INT 1
11146: ARRAY
11147: PPUSH
11148: LD_EXP 58
11152: PUSH
11153: LD_VAR 0 6
11157: ARRAY
11158: PUSH
11159: LD_VAR 0 7
11163: ARRAY
11164: PUSH
11165: LD_INT 2
11167: ARRAY
11168: PPUSH
11169: CALL_OW 612
11173: GO 11124
11175: POP
11176: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
11177: LD_ADDR_EXP 58
11181: PUSH
11182: LD_EXP 58
11186: PPUSH
11187: LD_VAR 0 6
11191: PPUSH
11192: CALL_OW 3
11196: ST_TO_ADDR
// break ;
11197: GO 11201
// end ; end ;
11199: GO 11082
11201: POP
11202: POP
// minersList := minersList diff oldId ;
11203: LD_ADDR_EXP 57
11207: PUSH
11208: LD_EXP 57
11212: PUSH
11213: LD_VAR 0 2
11217: DIFF
11218: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
11219: LD_INT 22
11221: PUSH
11222: LD_VAR 0 4
11226: PPUSH
11227: CALL_OW 255
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 34
11238: PUSH
11239: LD_INT 81
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PPUSH
11250: CALL_OW 69
11254: PUSH
11255: LD_INT 1
11257: GREATER
11258: IFFALSE 11285
// begin ComExit ( unit ) ;
11260: LD_VAR 0 4
11264: PPUSH
11265: CALL 54161 0 1
// SetSide ( newId , oldSide ) ;
11269: LD_VAR 0 1
11273: PPUSH
11274: LD_VAR 0 3
11278: PPUSH
11279: CALL_OW 235
// exit ;
11283: GO 11340
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
11285: LD_ADDR_EXP 57
11289: PUSH
11290: LD_EXP 57
11294: PPUSH
11295: LD_EXP 57
11299: PUSH
11300: LD_INT 1
11302: PLUS
11303: PPUSH
11304: LD_VAR 0 1
11308: PPUSH
11309: CALL_OW 1
11313: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
11314: LD_ADDR_EXP 58
11318: PUSH
11319: LD_EXP 58
11323: PPUSH
11324: LD_EXP 58
11328: PUSH
11329: LD_INT 1
11331: PLUS
11332: PPUSH
11333: EMPTY
11334: PPUSH
11335: CALL_OW 1
11339: ST_TO_ADDR
// end ; end ; end_of_file
11340: LD_VAR 0 5
11344: RET
// every 0 0$1 trigger mpGameActive marked GameTypeArmsArtifact do var i , j , k , techs , hasCameras , cameras , resource , depot , b , un , type , buildings , side , nation ;
11345: LD_EXP 39
11349: IFFALSE 12522
11351: GO 11353
11353: DISABLE
11354: LD_INT 0
11356: PPUSH
11357: PPUSH
11358: PPUSH
11359: PPUSH
11360: PPUSH
11361: PPUSH
11362: PPUSH
11363: PPUSH
11364: PPUSH
11365: PPUSH
11366: PPUSH
11367: PPUSH
11368: PPUSH
11369: PPUSH
// begin CreateResourcesArea ( mat_artifact , 3 , artifactArea1 , false ) ;
11370: LD_INT 4
11372: PPUSH
11373: LD_INT 3
11375: PPUSH
11376: LD_INT 94
11378: PPUSH
11379: LD_INT 0
11381: PPUSH
11382: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 4 , artifactArea2 , false ) ;
11386: LD_INT 4
11388: PPUSH
11389: LD_INT 4
11391: PPUSH
11392: LD_INT 93
11394: PPUSH
11395: LD_INT 0
11397: PPUSH
11398: CALL_OW 59
// for i := 1 to 8 do
11402: LD_ADDR_VAR 0 1
11406: PUSH
11407: DOUBLE
11408: LD_INT 1
11410: DEC
11411: ST_TO_ADDR
11412: LD_INT 8
11414: PUSH
11415: FOR_TO
11416: IFFALSE 12316
// begin hasCameras := false ;
11418: LD_ADDR_VAR 0 5
11422: PUSH
11423: LD_INT 0
11425: ST_TO_ADDR
// if mpSideTeams [ i ] = 1 and mpSidePositions [ i ] then
11426: LD_EXP 8
11430: PUSH
11431: LD_VAR 0 1
11435: ARRAY
11436: PUSH
11437: LD_INT 1
11439: EQUAL
11440: IFFALSE 11454
11442: PUSH
11443: LD_EXP 7
11447: PUSH
11448: LD_VAR 0 1
11452: ARRAY
11453: AND
11454: IFFALSE 12314
// begin side := i ;
11456: LD_ADDR_VAR 0 13
11460: PUSH
11461: LD_VAR 0 1
11465: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
11466: LD_ADDR_VAR 0 14
11470: PUSH
11471: LD_EXP 9
11475: PUSH
11476: LD_VAR 0 1
11480: ARRAY
11481: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
11482: LD_ADDR_VAR 0 8
11486: PUSH
11487: LD_INT 22
11489: PUSH
11490: LD_VAR 0 13
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PUSH
11499: LD_INT 30
11501: PUSH
11502: LD_INT 1
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PPUSH
11513: CALL_OW 69
11517: ST_TO_ADDR
// for j := 1 to mpStartingResources do
11518: LD_ADDR_VAR 0 2
11522: PUSH
11523: DOUBLE
11524: LD_INT 1
11526: DEC
11527: ST_TO_ADDR
11528: LD_EXP 15
11532: PUSH
11533: FOR_TO
11534: IFFALSE 11601
// begin resource := mpStartingResources [ j ] ;
11536: LD_ADDR_VAR 0 7
11540: PUSH
11541: LD_EXP 15
11545: PUSH
11546: LD_VAR 0 2
11550: ARRAY
11551: ST_TO_ADDR
// if not resource then
11552: LD_VAR 0 7
11556: NOT
11557: IFFALSE 11567
// resource := 30 ;
11559: LD_ADDR_VAR 0 7
11563: PUSH
11564: LD_INT 30
11566: ST_TO_ADDR
// SetResourceType ( GetBase ( depot [ 1 ] ) , j , resource * 2 ) ;
11567: LD_VAR 0 8
11571: PUSH
11572: LD_INT 1
11574: ARRAY
11575: PPUSH
11576: CALL_OW 274
11580: PPUSH
11581: LD_VAR 0 2
11585: PPUSH
11586: LD_VAR 0 7
11590: PUSH
11591: LD_INT 2
11593: MUL
11594: PPUSH
11595: CALL_OW 277
// end ;
11599: GO 11533
11601: POP
11602: POP
// uc_side := side ;
11603: LD_ADDR_OWVAR 20
11607: PUSH
11608: LD_VAR 0 13
11612: ST_TO_ADDR
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
11613: LD_INT 1
11615: PPUSH
11616: LD_INT 1
11618: PPUSH
11619: LD_VAR 0 13
11623: PPUSH
11624: LD_INT 32793
11626: NEG
11627: PPUSH
11628: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
11632: LD_INT 1
11634: PPUSH
11635: LD_INT 1
11637: PPUSH
11638: LD_VAR 0 13
11642: PPUSH
11643: CALL_OW 331
// if nation = nation_arabian and not hasCameras then
11647: LD_VAR 0 14
11651: PUSH
11652: LD_INT 2
11654: EQUAL
11655: IFFALSE 11664
11657: PUSH
11658: LD_VAR 0 5
11662: NOT
11663: AND
11664: IFFALSE 11686
// begin hasCameras := true ;
11666: LD_ADDR_VAR 0 5
11670: PUSH
11671: LD_INT 1
11673: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , camsArea ) ;
11674: LD_VAR 0 13
11678: PPUSH
11679: LD_INT 67
11681: PPUSH
11682: CALL 58884 0 2
// end ; techs := GetTechNation ( side , nation , - 1 ) diff [ tech_bio3 , tech_bio2 , tech_comp3 , tech_comp2 , tech_opto3 , tech_opto2 , tech_sib3 , tech_sib2 , tech_weap3 , tech_weap2 , tech_radmat , tech_artillery , tech_sibimplosion , tech_behemoth , tech_sibfiss ] ;
11686: LD_ADDR_VAR 0 4
11690: PUSH
11691: LD_VAR 0 13
11695: PPUSH
11696: LD_VAR 0 14
11700: PPUSH
11701: LD_INT 1
11703: NEG
11704: PPUSH
11705: CALL 15720 0 3
11709: PUSH
11710: LD_INT 68
11712: PUSH
11713: LD_INT 67
11715: PUSH
11716: LD_INT 59
11718: PUSH
11719: LD_INT 58
11721: PUSH
11722: LD_INT 62
11724: PUSH
11725: LD_INT 61
11727: PUSH
11728: LD_INT 56
11730: PUSH
11731: LD_INT 55
11733: PUSH
11734: LD_INT 53
11736: PUSH
11737: LD_INT 52
11739: PUSH
11740: LD_INT 81
11742: PUSH
11743: LD_INT 80
11745: PUSH
11746: LD_INT 72
11748: PUSH
11749: LD_INT 23
11751: PUSH
11752: LD_INT 25
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: DIFF
11772: ST_TO_ADDR
// for j in techs do
11773: LD_ADDR_VAR 0 2
11777: PUSH
11778: LD_VAR 0 4
11782: PUSH
11783: FOR_IN
11784: IFFALSE 11805
// SetTech ( j , side , state_researched ) ;
11786: LD_VAR 0 2
11790: PPUSH
11791: LD_VAR 0 13
11795: PPUSH
11796: LD_INT 2
11798: PPUSH
11799: CALL_OW 322
11803: GO 11783
11805: POP
11806: POP
// PrepareArmsRaceVehiclesList ( mpSidePositions [ i ] , side , nation ) ;
11807: LD_EXP 7
11811: PUSH
11812: LD_VAR 0 1
11816: ARRAY
11817: PPUSH
11818: LD_VAR 0 13
11822: PPUSH
11823: LD_VAR 0 14
11827: PPUSH
11828: CALL 2486 0 3
// buildings := GetArmsRaceBuildingsList ( mpSidePositions [ i ] ) ;
11832: LD_ADDR_VAR 0 12
11836: PUSH
11837: LD_EXP 7
11841: PUSH
11842: LD_VAR 0 1
11846: ARRAY
11847: PPUSH
11848: CALL 2912 0 1
11852: ST_TO_ADDR
// for j in buildings do
11853: LD_ADDR_VAR 0 2
11857: PUSH
11858: LD_VAR 0 12
11862: PUSH
11863: FOR_IN
11864: IFFALSE 12310
// begin uc_nation := nation ;
11866: LD_ADDR_OWVAR 21
11870: PUSH
11871: LD_VAR 0 14
11875: ST_TO_ADDR
// if j [ 1 ] = b_bunker and nation in [ nation_american , nation_russian ] then
11876: LD_VAR 0 2
11880: PUSH
11881: LD_INT 1
11883: ARRAY
11884: PUSH
11885: LD_INT 32
11887: EQUAL
11888: IFFALSE 11907
11890: PUSH
11891: LD_VAR 0 14
11895: PUSH
11896: LD_INT 1
11898: PUSH
11899: LD_INT 3
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: IN
11906: AND
11907: IFFALSE 11919
// type := b_turret else
11909: LD_ADDR_VAR 0 11
11913: PUSH
11914: LD_INT 33
11916: ST_TO_ADDR
11917: GO 11957
// if j [ 1 ] = b_lab then
11919: LD_VAR 0 2
11923: PUSH
11924: LD_INT 1
11926: ARRAY
11927: PUSH
11928: LD_INT 6
11930: EQUAL
11931: IFFALSE 11943
// type := b_lab_full else
11933: LD_ADDR_VAR 0 11
11937: PUSH
11938: LD_INT 8
11940: ST_TO_ADDR
11941: GO 11957
// type := j [ 1 ] ;
11943: LD_ADDR_VAR 0 11
11947: PUSH
11948: LD_VAR 0 2
11952: PUSH
11953: LD_INT 1
11955: ARRAY
11956: ST_TO_ADDR
// bc_level := 10 ;
11957: LD_ADDR_OWVAR 43
11961: PUSH
11962: LD_INT 10
11964: ST_TO_ADDR
// bc_type := type ;
11965: LD_ADDR_OWVAR 42
11969: PUSH
11970: LD_VAR 0 11
11974: ST_TO_ADDR
// bc_kind1 := - 1 ;
11975: LD_ADDR_OWVAR 44
11979: PUSH
11980: LD_INT 1
11982: NEG
11983: ST_TO_ADDR
// bc_kind2 := - 1 ;
11984: LD_ADDR_OWVAR 45
11988: PUSH
11989: LD_INT 1
11991: NEG
11992: ST_TO_ADDR
// if j [ 1 ] = b_lab then
11993: LD_VAR 0 2
11997: PUSH
11998: LD_INT 1
12000: ARRAY
12001: PUSH
12002: LD_INT 6
12004: EQUAL
12005: IFFALSE 12023
// begin bc_kind1 := b_lab_weapon ;
12007: LD_ADDR_OWVAR 44
12011: PUSH
12012: LD_INT 10
12014: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
12015: LD_ADDR_OWVAR 45
12019: PUSH
12020: LD_INT 11
12022: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
12023: LD_ADDR_VAR 0 9
12027: PUSH
12028: LD_VAR 0 2
12032: PUSH
12033: LD_INT 2
12035: ARRAY
12036: PPUSH
12037: LD_VAR 0 2
12041: PUSH
12042: LD_INT 3
12044: ARRAY
12045: PPUSH
12046: LD_VAR 0 2
12050: PUSH
12051: LD_INT 4
12053: ARRAY
12054: PPUSH
12055: CALL_OW 47
12059: ST_TO_ADDR
// if j [ 1 ] in [ b_depot , b_warehouse ] then
12060: LD_VAR 0 2
12064: PUSH
12065: LD_INT 1
12067: ARRAY
12068: PUSH
12069: LD_INT 0
12071: PUSH
12072: LD_INT 1
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: IN
12079: IFFALSE 12209
// begin SetBName ( b , @ & side ) ;
12081: LD_VAR 0 9
12085: PPUSH
12086: LD_STRING @
12088: PUSH
12089: LD_VAR 0 13
12093: STR
12094: PPUSH
12095: CALL_OW 500
// for k := 1 to 2 do
12099: LD_ADDR_VAR 0 3
12103: PUSH
12104: DOUBLE
12105: LD_INT 1
12107: DEC
12108: ST_TO_ADDR
12109: LD_INT 2
12111: PUSH
12112: FOR_TO
12113: IFFALSE 12135
// begin PrepareApemanEngineer ( ) ;
12115: CALL 49788 0 0
// PlaceHumanInUnit ( CreateHuman , b ) ;
12119: CALL_OW 44
12123: PPUSH
12124: LD_VAR 0 9
12128: PPUSH
12129: CALL_OW 52
// end ;
12133: GO 12112
12135: POP
12136: POP
// for k := 1 to mpStartingResources do
12137: LD_ADDR_VAR 0 3
12141: PUSH
12142: DOUBLE
12143: LD_INT 1
12145: DEC
12146: ST_TO_ADDR
12147: LD_EXP 15
12151: PUSH
12152: FOR_TO
12153: IFFALSE 12207
// begin resource := mpStartingResources [ k ] ;
12155: LD_ADDR_VAR 0 7
12159: PUSH
12160: LD_EXP 15
12164: PUSH
12165: LD_VAR 0 3
12169: ARRAY
12170: ST_TO_ADDR
// if resource then
12171: LD_VAR 0 7
12175: IFFALSE 12205
// SetResourceType ( GetBase ( b ) , k , resource div 2 ) ;
12177: LD_VAR 0 9
12181: PPUSH
12182: CALL_OW 274
12186: PPUSH
12187: LD_VAR 0 3
12191: PPUSH
12192: LD_VAR 0 7
12196: PUSH
12197: LD_INT 2
12199: DIV
12200: PPUSH
12201: CALL_OW 277
// end ;
12205: GO 12152
12207: POP
12208: POP
// end ; if j [ 1 ] = b_bunker and nation = nation_arabian then
12209: LD_VAR 0 2
12213: PUSH
12214: LD_INT 1
12216: ARRAY
12217: PUSH
12218: LD_INT 32
12220: EQUAL
12221: IFFALSE 12233
12223: PUSH
12224: LD_VAR 0 14
12228: PUSH
12229: LD_INT 2
12231: EQUAL
12232: AND
12233: IFFALSE 12253
// begin PrepareApemanSoldier ( ) ;
12235: CALL 49686 0 0
// PlaceHumanInUnit ( CreateHuman , b ) ;
12239: CALL_OW 44
12243: PPUSH
12244: LD_VAR 0 9
12248: PPUSH
12249: CALL_OW 52
// end ; if Count ( j ) > 4 and j [ 1 ] = b_bunker then
12253: LD_VAR 0 2
12257: PPUSH
12258: CALL 17797 0 1
12262: PUSH
12263: LD_INT 4
12265: GREATER
12266: IFFALSE 12282
12268: PUSH
12269: LD_VAR 0 2
12273: PUSH
12274: LD_INT 1
12276: ARRAY
12277: PUSH
12278: LD_INT 32
12280: EQUAL
12281: AND
12282: IFFALSE 12308
// PlaceWeaponTurret ( b , j [ 5 ] [ nation ] ) ;
12284: LD_VAR 0 9
12288: PPUSH
12289: LD_VAR 0 2
12293: PUSH
12294: LD_INT 5
12296: ARRAY
12297: PUSH
12298: LD_VAR 0 14
12302: ARRAY
12303: PPUSH
12304: CALL_OW 431
// end ;
12308: GO 11863
12310: POP
12311: POP
// end else
12312: GO 12314
// end ;
12314: GO 11415
12316: POP
12317: POP
// repeat mpDisplayStrings := [ #TimeToWin , ( mpBuildUpTime + mpTimeToWin ) - tick ] ;
12318: LD_ADDR_EXP 38
12322: PUSH
12323: LD_STRING #TimeToWin
12325: PUSH
12326: LD_EXP 20
12330: PUSH
12331: LD_EXP 45
12335: PLUS
12336: PUSH
12337: LD_OWVAR 1
12341: MINUS
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: ST_TO_ADDR
// if mpBuildUpTime > tick then
12347: LD_EXP 20
12351: PUSH
12352: LD_OWVAR 1
12356: GREATER
12357: IFFALSE 12388
// mpDisplayStrings := mpDisplayStrings ^ [ #PrepareTime , mpBuildUpTime - tick ] ;
12359: LD_ADDR_EXP 38
12363: PUSH
12364: LD_EXP 38
12368: PUSH
12369: LD_STRING #PrepareTime
12371: PUSH
12372: LD_EXP 20
12376: PUSH
12377: LD_OWVAR 1
12381: MINUS
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: ADD
12387: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12388: LD_INT 35
12390: PPUSH
12391: CALL_OW 67
// if ( ( 30 30$0 + mpBuildUpTime ) = tick ) then
12395: LD_INT 63000
12397: PUSH
12398: LD_EXP 20
12402: PLUS
12403: PUSH
12404: LD_OWVAR 1
12408: EQUAL
12409: IFFALSE 12476
// begin for i := 1 to 8 do
12411: LD_ADDR_VAR 0 1
12415: PUSH
12416: DOUBLE
12417: LD_INT 1
12419: DEC
12420: ST_TO_ADDR
12421: LD_INT 8
12423: PUSH
12424: FOR_TO
12425: IFFALSE 12474
// if mpSideTeams [ i ] = 1 and mpSidePositions [ i ] then
12427: LD_EXP 8
12431: PUSH
12432: LD_VAR 0 1
12436: ARRAY
12437: PUSH
12438: LD_INT 1
12440: EQUAL
12441: IFFALSE 12455
12443: PUSH
12444: LD_EXP 7
12448: PUSH
12449: LD_VAR 0 1
12453: ARRAY
12454: AND
12455: IFFALSE 12472
// SetTech ( tech_SibFiss , i , state_enabled ) ;
12457: LD_INT 25
12459: PPUSH
12460: LD_VAR 0 1
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: CALL_OW 322
12472: GO 12424
12474: POP
12475: POP
// end ; until ( mpBuildUpTime + mpTimeToWin ) <= tick ;
12476: LD_EXP 20
12480: PUSH
12481: LD_EXP 45
12485: PLUS
12486: PUSH
12487: LD_OWVAR 1
12491: LESSEQUAL
12492: IFFALSE 12318
// if mpSideTeams [ your_side ] = 1 then
12494: LD_EXP 8
12498: PUSH
12499: LD_OWVAR 2
12503: ARRAY
12504: PUSH
12505: LD_INT 1
12507: EQUAL
12508: IFFALSE 12515
// enable ( mpWin ) else
12510: LD_INT 101
12512: ENABLE_MARKED
12513: GO 12522
// begin Multiplayer_Loose_Message ;
12515: CALL_OW 521
// enable ( mpLose ) ;
12519: LD_INT 102
12521: ENABLE_MARKED
// end ; end ;
12522: PPOPN 14
12524: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeArmsArtifact do var i , canWin , yourTeam , team2HasArtifact , team3HasArtifact , art1 , art2 ;
12525: LD_EXP 39
12529: IFFALSE 12537
12531: PUSH
12532: CALL 13000 0 0
12536: AND
12537: IFFALSE 12545
12539: PUSH
12540: LD_OWVAR 4
12544: AND
12545: IFFALSE 12997
12547: GO 12549
12549: DISABLE
12550: LD_INT 0
12552: PPUSH
12553: PPUSH
12554: PPUSH
12555: PPUSH
12556: PPUSH
12557: PPUSH
12558: PPUSH
// begin canWin := false ;
12559: LD_ADDR_VAR 0 2
12563: PUSH
12564: LD_INT 0
12566: ST_TO_ADDR
// team2HasArtifact := false ;
12567: LD_ADDR_VAR 0 4
12571: PUSH
12572: LD_INT 0
12574: ST_TO_ADDR
// team3HasArtifact := false ;
12575: LD_ADDR_VAR 0 5
12579: PUSH
12580: LD_INT 0
12582: ST_TO_ADDR
// art1 := FindArtifact ( 3 ) ;
12583: LD_ADDR_VAR 0 6
12587: PUSH
12588: LD_INT 3
12590: PPUSH
12591: CALL_OW 469
12595: ST_TO_ADDR
// art2 := FindArtifact ( 4 ) ;
12596: LD_ADDR_VAR 0 7
12600: PUSH
12601: LD_INT 4
12603: PPUSH
12604: CALL_OW 469
12608: ST_TO_ADDR
// if art1 and art2 then
12609: LD_VAR 0 6
12613: IFFALSE 12621
12615: PUSH
12616: LD_VAR 0 7
12620: AND
12621: IFFALSE 12743
// begin team2HasArtifact := InArea ( art1 [ 1 ] , art1 [ 2 ] , buildUpNorthArea ) and InArea ( art2 [ 1 ] , art2 [ 2 ] , buildUpNorthArea ) ;
12623: LD_ADDR_VAR 0 4
12627: PUSH
12628: LD_VAR 0 6
12632: PUSH
12633: LD_INT 1
12635: ARRAY
12636: PPUSH
12637: LD_VAR 0 6
12641: PUSH
12642: LD_INT 2
12644: ARRAY
12645: PPUSH
12646: LD_INT 1
12648: PPUSH
12649: CALL_OW 309
12653: IFFALSE 12682
12655: PUSH
12656: LD_VAR 0 7
12660: PUSH
12661: LD_INT 1
12663: ARRAY
12664: PPUSH
12665: LD_VAR 0 7
12669: PUSH
12670: LD_INT 2
12672: ARRAY
12673: PPUSH
12674: LD_INT 1
12676: PPUSH
12677: CALL_OW 309
12681: AND
12682: ST_TO_ADDR
// team3HasArtifact := InArea ( art1 [ 1 ] , art1 [ 2 ] , buildUpSouthArea ) and InArea ( art2 [ 1 ] , art2 [ 2 ] , buildUpSouthArea ) ;
12683: LD_ADDR_VAR 0 5
12687: PUSH
12688: LD_VAR 0 6
12692: PUSH
12693: LD_INT 1
12695: ARRAY
12696: PPUSH
12697: LD_VAR 0 6
12701: PUSH
12702: LD_INT 2
12704: ARRAY
12705: PPUSH
12706: LD_INT 2
12708: PPUSH
12709: CALL_OW 309
12713: IFFALSE 12742
12715: PUSH
12716: LD_VAR 0 7
12720: PUSH
12721: LD_INT 1
12723: ARRAY
12724: PPUSH
12725: LD_VAR 0 7
12729: PUSH
12730: LD_INT 2
12732: ARRAY
12733: PPUSH
12734: LD_INT 2
12736: PPUSH
12737: CALL_OW 309
12741: AND
12742: ST_TO_ADDR
// end ; if not HasPower ( your_side ) then
12743: LD_OWVAR 2
12747: PPUSH
12748: CALL 13042 0 1
12752: NOT
12753: IFFALSE 12764
// begin Multiplayer_Loose_Message ;
12755: CALL_OW 521
// enable ( mpLose ) ;
12759: LD_INT 102
12761: ENABLE_MARKED
// end else
12762: GO 12997
// begin canWin := true ;
12764: LD_ADDR_VAR 0 2
12768: PUSH
12769: LD_INT 1
12771: ST_TO_ADDR
// yourTeam := mpSideTeams [ your_side ] ;
12772: LD_ADDR_VAR 0 3
12776: PUSH
12777: LD_EXP 8
12781: PUSH
12782: LD_OWVAR 2
12786: ARRAY
12787: ST_TO_ADDR
// if team2HasArtifact then
12788: LD_VAR 0 4
12792: IFFALSE 12816
// begin if yourTeam = 2 then
12794: LD_VAR 0 3
12798: PUSH
12799: LD_INT 2
12801: EQUAL
12802: IFFALSE 12809
// enable ( mpWin ) else
12804: LD_INT 101
12806: ENABLE_MARKED
12807: GO 12816
// begin Multiplayer_Loose_Message ;
12809: CALL_OW 521
// enable ( mpLose ) ;
12813: LD_INT 102
12815: ENABLE_MARKED
// end ; end ; if team3HasArtifact then
12816: LD_VAR 0 5
12820: IFFALSE 12844
// begin if yourTeam = 3 then
12822: LD_VAR 0 3
12826: PUSH
12827: LD_INT 3
12829: EQUAL
12830: IFFALSE 12837
// enable ( mpWin ) else
12832: LD_INT 101
12834: ENABLE_MARKED
12835: GO 12844
// begin Multiplayer_Loose_Message ;
12837: CALL_OW 521
// enable ( mpLose ) ;
12841: LD_INT 102
12843: ENABLE_MARKED
// end ; end ; for i := 1 to 8 do
12844: LD_ADDR_VAR 0 1
12848: PUSH
12849: DOUBLE
12850: LD_INT 1
12852: DEC
12853: ST_TO_ADDR
12854: LD_INT 8
12856: PUSH
12857: FOR_TO
12858: IFFALSE 12983
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
12860: LD_EXP 7
12864: PUSH
12865: LD_VAR 0 1
12869: ARRAY
12870: IFFALSE 12883
12872: PUSH
12873: LD_VAR 0 1
12877: PPUSH
12878: CALL_OW 108
12882: AND
12883: IFFALSE 12897
12885: PUSH
12886: LD_VAR 0 1
12890: PUSH
12891: LD_OWVAR 2
12895: NONEQUAL
12896: AND
12897: IFFALSE 12981
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
12899: LD_EXP 8
12903: PUSH
12904: LD_VAR 0 1
12908: ARRAY
12909: NOT
12910: IFTRUE 12958
12912: PUSH
12913: LD_EXP 8
12917: PUSH
12918: LD_VAR 0 1
12922: ARRAY
12923: PUSH
12924: LD_EXP 8
12928: PUSH
12929: LD_OWVAR 2
12933: ARRAY
12934: NONEQUAL
12935: IFFALSE 12957
12937: PUSH
12938: LD_OWVAR 2
12942: PPUSH
12943: LD_VAR 0 1
12947: PPUSH
12948: CALL_OW 81
12952: PUSH
12953: LD_INT 1
12955: NONEQUAL
12956: AND
12957: OR
12958: IFFALSE 12981
// if HasPower ( i ) then
12960: LD_VAR 0 1
12964: PPUSH
12965: CALL 13042 0 1
12969: IFFALSE 12981
// begin canWin := false ;
12971: LD_ADDR_VAR 0 2
12975: PUSH
12976: LD_INT 0
12978: ST_TO_ADDR
// break ;
12979: GO 12983
// end ;
12981: GO 12857
12983: POP
12984: POP
// if canWin then
12985: LD_VAR 0 2
12989: IFFALSE 12996
// enable ( mpWin ) else
12991: LD_INT 101
12993: ENABLE_MARKED
12994: GO 12997
// enable ;
12996: ENABLE
// end ; end ;
12997: PPOPN 7
12999: END
// function CanWinLoose ; begin
13000: LD_INT 0
13002: PPUSH
// result := true ;
13003: LD_ADDR_VAR 0 1
13007: PUSH
13008: LD_INT 1
13010: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13011: CALL_OW 531
13015: IFFALSE 13027
13017: PUSH
13018: CALL_OW 519
13022: PUSH
13023: LD_INT 1
13025: GREATER
13026: AND
13027: IFFALSE 13037
// result := false ;
13029: LD_ADDR_VAR 0 1
13033: PUSH
13034: LD_INT 0
13036: ST_TO_ADDR
// end ;
13037: LD_VAR 0 1
13041: RET
// function HasPower ( i ) ; begin
13042: LD_INT 0
13044: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
13045: LD_ADDR_VAR 0 2
13049: PUSH
13050: LD_INT 22
13052: PUSH
13053: LD_VAR 0 1
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 2
13064: PUSH
13065: LD_INT 21
13067: PUSH
13068: LD_INT 1
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: LD_INT 33
13077: PUSH
13078: LD_INT 3
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 33
13087: PUSH
13088: LD_INT 5
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PPUSH
13105: CALL_OW 69
13109: ST_TO_ADDR
// end ; end_of_file
13110: LD_VAR 0 2
13114: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
13115: LD_EXP 39
13119: IFFALSE 13127
13121: PUSH
13122: CALL 13337 0 0
13126: AND
13127: IFFALSE 13135
13129: PUSH
13130: LD_OWVAR 4
13134: AND
13135: IFFALSE 13334
13137: GO 13139
13139: DISABLE
13140: LD_INT 0
13142: PPUSH
13143: PPUSH
// begin canWin := false ;
13144: LD_ADDR_VAR 0 2
13148: PUSH
13149: LD_INT 0
13151: ST_TO_ADDR
// if not HasPower ( your_side ) then
13152: LD_OWVAR 2
13156: PPUSH
13157: CALL 13379 0 1
13161: NOT
13162: IFFALSE 13173
// begin Multiplayer_Loose_Message ;
13164: CALL_OW 521
// enable ( mpLose ) ;
13168: LD_INT 102
13170: ENABLE_MARKED
// end else
13171: GO 13334
// begin canWin := true ;
13173: LD_ADDR_VAR 0 2
13177: PUSH
13178: LD_INT 1
13180: ST_TO_ADDR
// for i := 1 to 8 do
13181: LD_ADDR_VAR 0 1
13185: PUSH
13186: DOUBLE
13187: LD_INT 1
13189: DEC
13190: ST_TO_ADDR
13191: LD_INT 8
13193: PUSH
13194: FOR_TO
13195: IFFALSE 13320
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
13197: LD_EXP 7
13201: PUSH
13202: LD_VAR 0 1
13206: ARRAY
13207: IFFALSE 13220
13209: PUSH
13210: LD_VAR 0 1
13214: PPUSH
13215: CALL_OW 108
13219: AND
13220: IFFALSE 13234
13222: PUSH
13223: LD_VAR 0 1
13227: PUSH
13228: LD_OWVAR 2
13232: NONEQUAL
13233: AND
13234: IFFALSE 13318
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
13236: LD_EXP 8
13240: PUSH
13241: LD_VAR 0 1
13245: ARRAY
13246: NOT
13247: IFTRUE 13295
13249: PUSH
13250: LD_EXP 8
13254: PUSH
13255: LD_VAR 0 1
13259: ARRAY
13260: PUSH
13261: LD_EXP 8
13265: PUSH
13266: LD_OWVAR 2
13270: ARRAY
13271: NONEQUAL
13272: IFFALSE 13294
13274: PUSH
13275: LD_OWVAR 2
13279: PPUSH
13280: LD_VAR 0 1
13284: PPUSH
13285: CALL_OW 81
13289: PUSH
13290: LD_INT 1
13292: NONEQUAL
13293: AND
13294: OR
13295: IFFALSE 13318
// if HasPower ( i ) then
13297: LD_VAR 0 1
13301: PPUSH
13302: CALL 13379 0 1
13306: IFFALSE 13318
// begin canWin := false ;
13308: LD_ADDR_VAR 0 2
13312: PUSH
13313: LD_INT 0
13315: ST_TO_ADDR
// break ;
13316: GO 13320
// end ;
13318: GO 13194
13320: POP
13321: POP
// if canWin then
13322: LD_VAR 0 2
13326: IFFALSE 13333
// enable ( mpWin ) else
13328: LD_INT 101
13330: ENABLE_MARKED
13331: GO 13334
// enable ;
13333: ENABLE
// end ; end ;
13334: PPOPN 2
13336: END
// function CanWinLoose ; begin
13337: LD_INT 0
13339: PPUSH
// result := true ;
13340: LD_ADDR_VAR 0 1
13344: PUSH
13345: LD_INT 1
13347: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13348: CALL_OW 531
13352: IFFALSE 13364
13354: PUSH
13355: CALL_OW 519
13359: PUSH
13360: LD_INT 1
13362: GREATER
13363: AND
13364: IFFALSE 13374
// result := false ;
13366: LD_ADDR_VAR 0 1
13370: PUSH
13371: LD_INT 0
13373: ST_TO_ADDR
// end ;
13374: LD_VAR 0 1
13378: RET
// function HasPower ( i ) ; begin
13379: LD_INT 0
13381: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
13382: LD_ADDR_VAR 0 2
13386: PUSH
13387: LD_INT 22
13389: PUSH
13390: LD_VAR 0 1
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: LD_INT 2
13401: PUSH
13402: LD_INT 21
13404: PUSH
13405: LD_INT 1
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 33
13414: PUSH
13415: LD_INT 3
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 33
13424: PUSH
13425: LD_INT 5
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PPUSH
13442: CALL_OW 69
13446: ST_TO_ADDR
// end ; end_of_file
13447: LD_VAR 0 2
13451: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
13452: LD_EXP 39
13456: IFFALSE 13499
13458: GO 13460
13460: DISABLE
13461: LD_INT 0
13463: PPUSH
// begin for i := 1 to 8 do
13464: LD_ADDR_VAR 0 1
13468: PUSH
13469: DOUBLE
13470: LD_INT 1
13472: DEC
13473: ST_TO_ADDR
13474: LD_INT 8
13476: PUSH
13477: FOR_TO
13478: IFFALSE 13497
// SetRestrict ( b_depot , i , state_disabled ) ;
13480: LD_INT 0
13482: PPUSH
13483: LD_VAR 0 1
13487: PPUSH
13488: LD_INT 0
13490: PPUSH
13491: CALL_OW 324
13495: GO 13477
13497: POP
13498: POP
// end ;
13499: PPOPN 1
13501: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
13502: LD_EXP 39
13506: IFFALSE 13514
13508: PUSH
13509: CALL 13724 0 0
13513: AND
13514: IFFALSE 13522
13516: PUSH
13517: LD_OWVAR 4
13521: AND
13522: IFFALSE 13721
13524: GO 13526
13526: DISABLE
13527: LD_INT 0
13529: PPUSH
13530: PPUSH
// begin canWin := false ;
13531: LD_ADDR_VAR 0 2
13535: PUSH
13536: LD_INT 0
13538: ST_TO_ADDR
// if not HasPower ( your_side ) then
13539: LD_OWVAR 2
13543: PPUSH
13544: CALL 13766 0 1
13548: NOT
13549: IFFALSE 13560
// begin Multiplayer_Loose_Message ;
13551: CALL_OW 521
// enable ( mpLose ) ;
13555: LD_INT 102
13557: ENABLE_MARKED
// end else
13558: GO 13721
// begin canWin := true ;
13560: LD_ADDR_VAR 0 2
13564: PUSH
13565: LD_INT 1
13567: ST_TO_ADDR
// for i := 1 to 8 do
13568: LD_ADDR_VAR 0 1
13572: PUSH
13573: DOUBLE
13574: LD_INT 1
13576: DEC
13577: ST_TO_ADDR
13578: LD_INT 8
13580: PUSH
13581: FOR_TO
13582: IFFALSE 13707
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
13584: LD_EXP 7
13588: PUSH
13589: LD_VAR 0 1
13593: ARRAY
13594: IFFALSE 13607
13596: PUSH
13597: LD_VAR 0 1
13601: PPUSH
13602: CALL_OW 108
13606: AND
13607: IFFALSE 13621
13609: PUSH
13610: LD_VAR 0 1
13614: PUSH
13615: LD_OWVAR 2
13619: NONEQUAL
13620: AND
13621: IFFALSE 13705
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
13623: LD_EXP 8
13627: PUSH
13628: LD_VAR 0 1
13632: ARRAY
13633: NOT
13634: IFTRUE 13682
13636: PUSH
13637: LD_EXP 8
13641: PUSH
13642: LD_VAR 0 1
13646: ARRAY
13647: PUSH
13648: LD_EXP 8
13652: PUSH
13653: LD_OWVAR 2
13657: ARRAY
13658: NONEQUAL
13659: IFFALSE 13681
13661: PUSH
13662: LD_OWVAR 2
13666: PPUSH
13667: LD_VAR 0 1
13671: PPUSH
13672: CALL_OW 81
13676: PUSH
13677: LD_INT 1
13679: NONEQUAL
13680: AND
13681: OR
13682: IFFALSE 13705
// if HasPower ( i ) then
13684: LD_VAR 0 1
13688: PPUSH
13689: CALL 13766 0 1
13693: IFFALSE 13705
// begin canWin := false ;
13695: LD_ADDR_VAR 0 2
13699: PUSH
13700: LD_INT 0
13702: ST_TO_ADDR
// break ;
13703: GO 13707
// end ;
13705: GO 13581
13707: POP
13708: POP
// if canWin then
13709: LD_VAR 0 2
13713: IFFALSE 13720
// enable ( mpWin ) else
13715: LD_INT 101
13717: ENABLE_MARKED
13718: GO 13721
// enable ;
13720: ENABLE
// end ; end ;
13721: PPOPN 2
13723: END
// function CanWinLoose ; begin
13724: LD_INT 0
13726: PPUSH
// result := true ;
13727: LD_ADDR_VAR 0 1
13731: PUSH
13732: LD_INT 1
13734: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13735: CALL_OW 531
13739: IFFALSE 13751
13741: PUSH
13742: CALL_OW 519
13746: PUSH
13747: LD_INT 1
13749: GREATER
13750: AND
13751: IFFALSE 13761
// result := false ;
13753: LD_ADDR_VAR 0 1
13757: PUSH
13758: LD_INT 0
13760: ST_TO_ADDR
// end ;
13761: LD_VAR 0 1
13765: RET
// function HasPower ( i ) ; begin
13766: LD_INT 0
13768: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
13769: LD_INT 22
13771: PUSH
13772: LD_VAR 0 1
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 2
13783: PUSH
13784: LD_INT 30
13786: PUSH
13787: LD_INT 0
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 30
13796: PUSH
13797: LD_INT 1
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: LIST
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PPUSH
13813: CALL_OW 69
13817: NOT
13818: IFFALSE 13822
// exit ;
13820: GO 13887
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
13822: LD_ADDR_VAR 0 2
13826: PUSH
13827: LD_INT 22
13829: PUSH
13830: LD_VAR 0 1
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 2
13841: PUSH
13842: LD_INT 21
13844: PUSH
13845: LD_INT 1
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 33
13854: PUSH
13855: LD_INT 3
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: LD_INT 33
13864: PUSH
13865: LD_INT 5
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PPUSH
13882: CALL_OW 69
13886: ST_TO_ADDR
// end ; end_of_file
13887: LD_VAR 0 2
13891: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
13892: LD_EXP 39
13896: IFFALSE 14237
13898: GO 13900
13900: DISABLE
13901: LD_INT 0
13903: PPUSH
13904: PPUSH
13905: PPUSH
// begin mpKingPoints := [ ] ;
13906: LD_ADDR_EXP 49
13910: PUSH
13911: EMPTY
13912: ST_TO_ADDR
// if mpTeamGame then
13913: LD_EXP 11
13917: IFFALSE 13971
// begin for i := 1 to Count ( mpTeams ) do
13919: LD_ADDR_VAR 0 1
13923: PUSH
13924: DOUBLE
13925: LD_INT 1
13927: DEC
13928: ST_TO_ADDR
13929: LD_EXP 10
13933: PPUSH
13934: CALL 17797 0 1
13938: PUSH
13939: FOR_TO
13940: IFFALSE 13967
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
13942: LD_ADDR_EXP 49
13946: PUSH
13947: LD_EXP 49
13951: PPUSH
13952: LD_VAR 0 1
13956: PPUSH
13957: LD_INT 0
13959: PPUSH
13960: CALL_OW 1
13964: ST_TO_ADDR
13965: GO 13939
13967: POP
13968: POP
// end else
13969: GO 14014
// begin for i := 1 to 8 do
13971: LD_ADDR_VAR 0 1
13975: PUSH
13976: DOUBLE
13977: LD_INT 1
13979: DEC
13980: ST_TO_ADDR
13981: LD_INT 8
13983: PUSH
13984: FOR_TO
13985: IFFALSE 14012
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
13987: LD_ADDR_EXP 49
13991: PUSH
13992: LD_EXP 49
13996: PPUSH
13997: LD_VAR 0 1
14001: PPUSH
14002: LD_INT 0
14004: PPUSH
14005: CALL_OW 1
14009: ST_TO_ADDR
14010: GO 13984
14012: POP
14013: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
14014: LD_ADDR_VAR 0 3
14018: PUSH
14019: LD_EXP 2
14023: PPUSH
14024: LD_INT 0
14026: PPUSH
14027: CALL_OW 517
14031: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
14032: LD_ADDR_VAR 0 1
14036: PUSH
14037: DOUBLE
14038: LD_INT 1
14040: DEC
14041: ST_TO_ADDR
14042: LD_VAR 0 3
14046: PUSH
14047: LD_INT 1
14049: ARRAY
14050: PUSH
14051: FOR_TO
14052: IFFALSE 14119
// for j := 1 to 8 do
14054: LD_ADDR_VAR 0 2
14058: PUSH
14059: DOUBLE
14060: LD_INT 1
14062: DEC
14063: ST_TO_ADDR
14064: LD_INT 8
14066: PUSH
14067: FOR_TO
14068: IFFALSE 14115
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
14070: LD_VAR 0 3
14074: PUSH
14075: LD_INT 1
14077: ARRAY
14078: PUSH
14079: LD_VAR 0 1
14083: ARRAY
14084: PPUSH
14085: LD_VAR 0 3
14089: PUSH
14090: LD_INT 2
14092: ARRAY
14093: PUSH
14094: LD_VAR 0 1
14098: ARRAY
14099: PPUSH
14100: LD_VAR 0 2
14104: PPUSH
14105: LD_INT 12
14107: NEG
14108: PPUSH
14109: CALL_OW 330
14113: GO 14067
14115: POP
14116: POP
14117: GO 14051
14119: POP
14120: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
14121: LD_EXP 34
14125: PPUSH
14126: LD_INT 1
14128: PPUSH
14129: CALL_OW 424
// UpdateCounter ;
14133: CALL 14743 0 0
// repeat wait ( 0 0$1 ) ;
14137: LD_INT 35
14139: PPUSH
14140: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14144: LD_ADDR_VAR 0 3
14148: PUSH
14149: LD_EXP 34
14153: PPUSH
14154: LD_INT 3
14156: PUSH
14157: LD_INT 57
14159: PUSH
14160: EMPTY
14161: LIST
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 50
14169: PUSH
14170: EMPTY
14171: LIST
14172: PUSH
14173: LD_INT 2
14175: PUSH
14176: LD_INT 30
14178: PUSH
14179: LD_INT 0
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 30
14188: PUSH
14189: LD_INT 1
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: LIST
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: LIST
14205: PPUSH
14206: CALL_OW 70
14210: ST_TO_ADDR
// if not tmp then
14211: LD_VAR 0 3
14215: NOT
14216: IFFALSE 14220
// continue ;
14218: GO 14137
// AddPoints ( tmp ) ;
14220: LD_VAR 0 3
14224: PPUSH
14225: CALL 14421 0 1
// UpdateCounter ;
14229: CALL 14743 0 0
// until false ;
14233: LD_INT 0
14235: IFFALSE 14137
// end ;
14237: PPOPN 3
14239: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
14240: LD_EXP 39
14244: IFFALSE 14252
14246: PUSH
14247: LD_EXP 37
14251: AND
14252: IFFALSE 14418
14254: GO 14256
14256: DISABLE
14257: LD_INT 0
14259: PPUSH
14260: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
14261: LD_ADDR_VAR 0 2
14265: PUSH
14266: LD_EXP 2
14270: PPUSH
14271: LD_INT 0
14273: PPUSH
14274: CALL_OW 517
14278: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
14279: LD_ADDR_VAR 0 1
14283: PUSH
14284: DOUBLE
14285: LD_INT 1
14287: DEC
14288: ST_TO_ADDR
14289: LD_VAR 0 2
14293: PUSH
14294: LD_INT 1
14296: ARRAY
14297: PUSH
14298: FOR_TO
14299: IFFALSE 14340
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
14301: LD_VAR 0 2
14305: PUSH
14306: LD_INT 1
14308: ARRAY
14309: PUSH
14310: LD_VAR 0 1
14314: ARRAY
14315: PPUSH
14316: LD_VAR 0 2
14320: PUSH
14321: LD_INT 2
14323: ARRAY
14324: PUSH
14325: LD_VAR 0 1
14329: ARRAY
14330: PPUSH
14331: LD_INT 125
14333: PPUSH
14334: CALL_OW 495
14338: GO 14298
14340: POP
14341: POP
// repeat wait ( mpEmissions ) ;
14342: LD_EXP 37
14346: PPUSH
14347: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
14351: LD_ADDR_VAR 0 1
14355: PUSH
14356: DOUBLE
14357: LD_INT 1
14359: DEC
14360: ST_TO_ADDR
14361: LD_VAR 0 2
14365: PUSH
14366: LD_INT 1
14368: ARRAY
14369: PUSH
14370: FOR_TO
14371: IFFALSE 14412
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
14373: LD_VAR 0 2
14377: PUSH
14378: LD_INT 1
14380: ARRAY
14381: PUSH
14382: LD_VAR 0 1
14386: ARRAY
14387: PPUSH
14388: LD_VAR 0 2
14392: PUSH
14393: LD_INT 2
14395: ARRAY
14396: PUSH
14397: LD_VAR 0 1
14401: ARRAY
14402: PPUSH
14403: LD_INT 15
14405: PPUSH
14406: CALL_OW 495
14410: GO 14370
14412: POP
14413: POP
// until false ;
14414: LD_INT 0
14416: IFFALSE 14342
// end ;
14418: PPOPN 2
14420: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
14421: LD_INT 0
14423: PPUSH
14424: PPUSH
14425: PPUSH
14426: PPUSH
14427: PPUSH
// if mpTeamGame then
14428: LD_EXP 11
14432: IFFALSE 14629
// begin first := depots [ 1 ] ;
14434: LD_ADDR_VAR 0 4
14438: PUSH
14439: LD_VAR 0 1
14443: PUSH
14444: LD_INT 1
14446: ARRAY
14447: ST_TO_ADDR
// side := GetSide ( first ) ;
14448: LD_ADDR_VAR 0 6
14452: PUSH
14453: LD_VAR 0 4
14457: PPUSH
14458: CALL_OW 255
14462: ST_TO_ADDR
// for i := 1 to mpTeams do
14463: LD_ADDR_VAR 0 3
14467: PUSH
14468: DOUBLE
14469: LD_INT 1
14471: DEC
14472: ST_TO_ADDR
14473: LD_EXP 10
14477: PUSH
14478: FOR_TO
14479: IFFALSE 14513
// if side in mpTeams [ i ] then
14481: LD_VAR 0 6
14485: PUSH
14486: LD_EXP 10
14490: PUSH
14491: LD_VAR 0 3
14495: ARRAY
14496: IN
14497: IFFALSE 14511
// begin team := i ;
14499: LD_ADDR_VAR 0 5
14503: PUSH
14504: LD_VAR 0 3
14508: ST_TO_ADDR
// break ;
14509: GO 14513
// end ;
14511: GO 14478
14513: POP
14514: POP
// if not team then
14515: LD_VAR 0 5
14519: NOT
14520: IFFALSE 14524
// exit ;
14522: GO 14738
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
14524: LD_EXP 34
14528: PPUSH
14529: LD_INT 81
14531: PUSH
14532: LD_VAR 0 6
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PPUSH
14541: CALL_OW 70
14545: IFFALSE 14549
// exit ;
14547: GO 14738
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
14549: LD_ADDR_EXP 49
14553: PUSH
14554: LD_EXP 49
14558: PPUSH
14559: LD_VAR 0 5
14563: PPUSH
14564: LD_EXP 49
14568: PUSH
14569: LD_VAR 0 5
14573: ARRAY
14574: PUSH
14575: LD_INT 1
14577: PLUS
14578: PPUSH
14579: CALL_OW 1
14583: ST_TO_ADDR
// for i in mpTeams [ team ] do
14584: LD_ADDR_VAR 0 3
14588: PUSH
14589: LD_EXP 10
14593: PUSH
14594: LD_VAR 0 5
14598: ARRAY
14599: PUSH
14600: FOR_IN
14601: IFFALSE 14625
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
14603: LD_VAR 0 3
14607: PPUSH
14608: LD_EXP 49
14612: PUSH
14613: LD_VAR 0 5
14617: ARRAY
14618: PPUSH
14619: CALL_OW 506
14623: GO 14600
14625: POP
14626: POP
// end else
14627: GO 14738
// begin first := depots [ 1 ] ;
14629: LD_ADDR_VAR 0 4
14633: PUSH
14634: LD_VAR 0 1
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: ST_TO_ADDR
// side := GetSide ( first ) ;
14643: LD_ADDR_VAR 0 6
14647: PUSH
14648: LD_VAR 0 4
14652: PPUSH
14653: CALL_OW 255
14657: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
14658: LD_EXP 34
14662: PPUSH
14663: LD_INT 81
14665: PUSH
14666: LD_VAR 0 6
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PPUSH
14675: CALL_OW 70
14679: IFFALSE 14683
// exit ;
14681: GO 14738
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
14683: LD_ADDR_EXP 49
14687: PUSH
14688: LD_EXP 49
14692: PPUSH
14693: LD_VAR 0 6
14697: PPUSH
14698: LD_EXP 49
14702: PUSH
14703: LD_VAR 0 6
14707: ARRAY
14708: PUSH
14709: LD_INT 1
14711: PLUS
14712: PPUSH
14713: CALL_OW 1
14717: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
14718: LD_VAR 0 6
14722: PPUSH
14723: LD_EXP 49
14727: PUSH
14728: LD_VAR 0 6
14732: ARRAY
14733: PPUSH
14734: CALL_OW 506
// end ; end ;
14738: LD_VAR 0 2
14742: RET
// function UpdateCounter ; var i ; begin
14743: LD_INT 0
14745: PPUSH
14746: PPUSH
// result := [ ] ;
14747: LD_ADDR_VAR 0 1
14751: PUSH
14752: EMPTY
14753: ST_TO_ADDR
// if mpTeamGame then
14754: LD_EXP 11
14758: IFFALSE 14825
// begin for i := 1 to mpTeams do
14760: LD_ADDR_VAR 0 2
14764: PUSH
14765: DOUBLE
14766: LD_INT 1
14768: DEC
14769: ST_TO_ADDR
14770: LD_EXP 10
14774: PUSH
14775: FOR_TO
14776: IFFALSE 14821
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
14778: LD_ADDR_VAR 0 1
14782: PUSH
14783: LD_VAR 0 1
14787: PUSH
14788: LD_STRING #KingoftheHill-Team
14790: PUSH
14791: LD_VAR 0 2
14795: PUSH
14796: LD_EXP 49
14800: PUSH
14801: LD_VAR 0 2
14805: ARRAY
14806: PUSH
14807: LD_EXP 35
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: ADD
14818: ST_TO_ADDR
14819: GO 14775
14821: POP
14822: POP
// end else
14823: GO 14898
// begin for i := 1 to 8 do
14825: LD_ADDR_VAR 0 2
14829: PUSH
14830: DOUBLE
14831: LD_INT 1
14833: DEC
14834: ST_TO_ADDR
14835: LD_INT 8
14837: PUSH
14838: FOR_TO
14839: IFFALSE 14896
// if mpSidePositions [ i ] then
14841: LD_EXP 7
14845: PUSH
14846: LD_VAR 0 2
14850: ARRAY
14851: IFFALSE 14894
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
14853: LD_ADDR_VAR 0 1
14857: PUSH
14858: LD_VAR 0 1
14862: PUSH
14863: LD_STRING #KingoftheHill-Player
14865: PUSH
14866: LD_VAR 0 2
14870: PUSH
14871: LD_EXP 49
14875: PUSH
14876: LD_VAR 0 2
14880: ARRAY
14881: PUSH
14882: LD_EXP 35
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: ADD
14893: ST_TO_ADDR
14894: GO 14838
14896: POP
14897: POP
// end ; mpDisplayStrings := result ;
14898: LD_ADDR_EXP 38
14902: PUSH
14903: LD_VAR 0 1
14907: ST_TO_ADDR
// end ;
14908: LD_VAR 0 1
14912: RET
// export function HowMuchPointsKing ( side ) ; begin
14913: LD_INT 0
14915: PPUSH
// result := HowMuchPoints ( side ) ;
14916: LD_ADDR_VAR 0 2
14920: PUSH
14921: LD_VAR 0 1
14925: PPUSH
14926: CALL 14936 0 1
14930: ST_TO_ADDR
// end ;
14931: LD_VAR 0 2
14935: RET
// function HowMuchPoints ( side ) ; var i ; begin
14936: LD_INT 0
14938: PPUSH
14939: PPUSH
// if mpTeamGame then
14940: LD_EXP 11
14944: IFFALSE 15013
// begin for i := 1 to Count ( mpTeams ) do
14946: LD_ADDR_VAR 0 3
14950: PUSH
14951: DOUBLE
14952: LD_INT 1
14954: DEC
14955: ST_TO_ADDR
14956: LD_EXP 10
14960: PPUSH
14961: CALL 17797 0 1
14965: PUSH
14966: FOR_TO
14967: IFFALSE 15009
// begin if side in mpTeams [ i ] then
14969: LD_VAR 0 1
14973: PUSH
14974: LD_EXP 10
14978: PUSH
14979: LD_VAR 0 3
14983: ARRAY
14984: IN
14985: IFFALSE 15007
// begin result := mpKingPoints [ i ] ;
14987: LD_ADDR_VAR 0 2
14991: PUSH
14992: LD_EXP 49
14996: PUSH
14997: LD_VAR 0 3
15001: ARRAY
15002: ST_TO_ADDR
// exit ;
15003: POP
15004: POP
15005: GO 15029
// end ; end ;
15007: GO 14966
15009: POP
15010: POP
// end else
15011: GO 15029
// result := mpKingPoints [ side ] ;
15013: LD_ADDR_VAR 0 2
15017: PUSH
15018: LD_EXP 49
15022: PUSH
15023: LD_VAR 0 1
15027: ARRAY
15028: ST_TO_ADDR
// end ;
15029: LD_VAR 0 2
15033: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
15034: LD_EXP 39
15038: IFFALSE 15046
15040: PUSH
15041: CALL 15458 0 0
15045: AND
15046: IFFALSE 15054
15048: PUSH
15049: LD_OWVAR 4
15053: AND
15054: IFFALSE 15307
15056: GO 15058
15058: DISABLE
15059: LD_INT 0
15061: PPUSH
15062: PPUSH
// begin canWin := false ;
15063: LD_ADDR_VAR 0 2
15067: PUSH
15068: LD_INT 0
15070: ST_TO_ADDR
// if not HasPower ( your_side ) then
15071: LD_OWVAR 2
15075: PPUSH
15076: CALL 15500 0 1
15080: NOT
15081: IFFALSE 15092
// begin Multiplayer_Loose_Message ;
15083: CALL_OW 521
// enable ( mpLose ) ;
15087: LD_INT 102
15089: ENABLE_MARKED
// end else
15090: GO 15307
// begin if not EnemiesInGame then
15092: CALL 15310 0 0
15096: NOT
15097: IFFALSE 15104
// begin enable ( mpWin ) ;
15099: LD_INT 101
15101: ENABLE_MARKED
// exit ;
15102: GO 15307
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
15104: LD_ADDR_VAR 0 2
15108: PUSH
15109: LD_OWVAR 2
15113: PPUSH
15114: CALL 14936 0 1
15118: PUSH
15119: LD_EXP 35
15123: GREATEREQUAL
15124: IFFALSE 15137
15126: PUSH
15127: LD_OWVAR 2
15131: PPUSH
15132: CALL 15500 0 1
15136: AND
15137: ST_TO_ADDR
// for i := 1 to 8 do
15138: LD_ADDR_VAR 0 1
15142: PUSH
15143: DOUBLE
15144: LD_INT 1
15146: DEC
15147: ST_TO_ADDR
15148: LD_INT 8
15150: PUSH
15151: FOR_TO
15152: IFFALSE 15293
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
15154: LD_EXP 7
15158: PUSH
15159: LD_VAR 0 1
15163: ARRAY
15164: IFFALSE 15177
15166: PUSH
15167: LD_VAR 0 1
15171: PPUSH
15172: CALL_OW 108
15176: AND
15177: IFFALSE 15191
15179: PUSH
15180: LD_VAR 0 1
15184: PUSH
15185: LD_OWVAR 2
15189: NONEQUAL
15190: AND
15191: IFFALSE 15291
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
15193: LD_EXP 8
15197: PUSH
15198: LD_VAR 0 1
15202: ARRAY
15203: NOT
15204: IFTRUE 15252
15206: PUSH
15207: LD_EXP 8
15211: PUSH
15212: LD_VAR 0 1
15216: ARRAY
15217: PUSH
15218: LD_EXP 8
15222: PUSH
15223: LD_OWVAR 2
15227: ARRAY
15228: NONEQUAL
15229: IFFALSE 15251
15231: PUSH
15232: LD_OWVAR 2
15236: PPUSH
15237: LD_VAR 0 1
15241: PPUSH
15242: CALL_OW 81
15246: PUSH
15247: LD_INT 1
15249: NONEQUAL
15250: AND
15251: OR
15252: IFFALSE 15291
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
15254: LD_VAR 0 1
15258: PPUSH
15259: CALL 14936 0 1
15263: PUSH
15264: LD_EXP 35
15268: GREATEREQUAL
15269: IFFALSE 15282
15271: PUSH
15272: LD_VAR 0 1
15276: PPUSH
15277: CALL 15500 0 1
15281: AND
15282: IFFALSE 15291
// begin enable ( mpLose ) ;
15284: LD_INT 102
15286: ENABLE_MARKED
// exit ;
15287: POP
15288: POP
15289: GO 15307
// end ;
15291: GO 15151
15293: POP
15294: POP
// if canWin then
15295: LD_VAR 0 2
15299: IFFALSE 15306
// enable ( mpWin ) else
15301: LD_INT 101
15303: ENABLE_MARKED
15304: GO 15307
// enable ;
15306: ENABLE
// end ; end ;
15307: PPOPN 2
15309: END
// function EnemiesInGame ; var i ; begin
15310: LD_INT 0
15312: PPUSH
15313: PPUSH
// result := false ;
15314: LD_ADDR_VAR 0 1
15318: PUSH
15319: LD_INT 0
15321: ST_TO_ADDR
// for i := 1 to 8 do
15322: LD_ADDR_VAR 0 2
15326: PUSH
15327: DOUBLE
15328: LD_INT 1
15330: DEC
15331: ST_TO_ADDR
15332: LD_INT 8
15334: PUSH
15335: FOR_TO
15336: IFFALSE 15451
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
15338: LD_VAR 0 2
15342: PUSH
15343: LD_OWVAR 2
15347: NONEQUAL
15348: IFFALSE 15361
15350: PUSH
15351: LD_VAR 0 2
15355: PPUSH
15356: CALL 15500 0 1
15360: AND
15361: IFFALSE 15374
15363: PUSH
15364: LD_VAR 0 2
15368: PPUSH
15369: CALL_OW 108
15373: AND
15374: IFFALSE 15449
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
15376: LD_EXP 8
15380: PUSH
15381: LD_VAR 0 2
15385: ARRAY
15386: NOT
15387: IFTRUE 15435
15389: PUSH
15390: LD_EXP 8
15394: PUSH
15395: LD_VAR 0 2
15399: ARRAY
15400: PUSH
15401: LD_EXP 8
15405: PUSH
15406: LD_OWVAR 2
15410: ARRAY
15411: NONEQUAL
15412: IFFALSE 15434
15414: PUSH
15415: LD_OWVAR 2
15419: PPUSH
15420: LD_VAR 0 2
15424: PPUSH
15425: CALL_OW 81
15429: PUSH
15430: LD_INT 1
15432: NONEQUAL
15433: AND
15434: OR
15435: IFFALSE 15449
// begin result := true ;
15437: LD_ADDR_VAR 0 1
15441: PUSH
15442: LD_INT 1
15444: ST_TO_ADDR
// exit ;
15445: POP
15446: POP
15447: GO 15453
// end ;
15449: GO 15335
15451: POP
15452: POP
// end ;
15453: LD_VAR 0 1
15457: RET
// function CanWinLoose ; begin
15458: LD_INT 0
15460: PPUSH
// result := true ;
15461: LD_ADDR_VAR 0 1
15465: PUSH
15466: LD_INT 1
15468: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15469: CALL_OW 531
15473: IFFALSE 15485
15475: PUSH
15476: CALL_OW 519
15480: PUSH
15481: LD_INT 1
15483: GREATER
15484: AND
15485: IFFALSE 15495
// result := false ;
15487: LD_ADDR_VAR 0 1
15491: PUSH
15492: LD_INT 0
15494: ST_TO_ADDR
// end ;
15495: LD_VAR 0 1
15499: RET
// function HasPower ( i ) ; begin
15500: LD_INT 0
15502: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
15503: LD_ADDR_VAR 0 2
15507: PUSH
15508: LD_INT 22
15510: PUSH
15511: LD_VAR 0 1
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 2
15522: PUSH
15523: LD_INT 21
15525: PUSH
15526: LD_INT 1
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: LD_INT 33
15535: PUSH
15536: LD_INT 3
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 33
15545: PUSH
15546: LD_INT 5
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: PPUSH
15563: CALL_OW 69
15567: ST_TO_ADDR
// end ; end_of_file
15568: LD_VAR 0 2
15572: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15573: LD_INT 0
15575: PPUSH
15576: PPUSH
// if exist_mode then
15577: LD_VAR 0 2
15581: IFFALSE 15627
// begin unit := CreateCharacter ( prefix & ident ) ;
15583: LD_ADDR_VAR 0 5
15587: PUSH
15588: LD_VAR 0 3
15592: PUSH
15593: LD_VAR 0 1
15597: STR
15598: PPUSH
15599: CALL_OW 34
15603: ST_TO_ADDR
// if unit then
15604: LD_VAR 0 5
15608: IFFALSE 15625
// DeleteCharacters ( prefix & ident ) ;
15610: LD_VAR 0 3
15614: PUSH
15615: LD_VAR 0 1
15619: STR
15620: PPUSH
15621: CALL_OW 40
// end else
15625: GO 15642
// unit := NewCharacter ( ident ) ;
15627: LD_ADDR_VAR 0 5
15631: PUSH
15632: LD_VAR 0 1
15636: PPUSH
15637: CALL_OW 25
15641: ST_TO_ADDR
// result := unit ;
15642: LD_ADDR_VAR 0 4
15646: PUSH
15647: LD_VAR 0 5
15651: ST_TO_ADDR
// end ;
15652: LD_VAR 0 4
15656: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15657: LD_INT 0
15659: PPUSH
15660: PPUSH
// if exist_mode then
15661: LD_VAR 0 2
15665: IFFALSE 15690
// unit := CreateCharacter ( prefix & ident ) else
15667: LD_ADDR_VAR 0 5
15671: PUSH
15672: LD_VAR 0 3
15676: PUSH
15677: LD_VAR 0 1
15681: STR
15682: PPUSH
15683: CALL_OW 34
15687: ST_TO_ADDR
15688: GO 15705
// unit := NewCharacter ( ident ) ;
15690: LD_ADDR_VAR 0 5
15694: PUSH
15695: LD_VAR 0 1
15699: PPUSH
15700: CALL_OW 25
15704: ST_TO_ADDR
// result := unit ;
15705: LD_ADDR_VAR 0 4
15709: PUSH
15710: LD_VAR 0 5
15714: ST_TO_ADDR
// end ;
15715: LD_VAR 0 4
15719: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15720: LD_INT 0
15722: PPUSH
15723: PPUSH
// if not side or not nation then
15724: LD_VAR 0 1
15728: NOT
15729: IFTRUE 15738
15731: PUSH
15732: LD_VAR 0 2
15736: NOT
15737: OR
15738: IFFALSE 15742
// exit ;
15740: GO 16536
// case nation of nation_american :
15742: LD_VAR 0 2
15746: PUSH
15747: LD_INT 1
15749: DOUBLE
15750: EQUAL
15751: IFTRUE 15755
15753: GO 15977
15755: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
15756: LD_ADDR_VAR 0 4
15760: PUSH
15761: LD_INT 35
15763: PUSH
15764: LD_INT 45
15766: PUSH
15767: LD_INT 46
15769: PUSH
15770: LD_INT 47
15772: PUSH
15773: LD_INT 82
15775: PUSH
15776: LD_INT 83
15778: PUSH
15779: LD_INT 84
15781: PUSH
15782: LD_INT 85
15784: PUSH
15785: LD_INT 86
15787: PUSH
15788: LD_INT 1
15790: PUSH
15791: LD_INT 2
15793: PUSH
15794: LD_INT 6
15796: PUSH
15797: LD_INT 15
15799: PUSH
15800: LD_INT 16
15802: PUSH
15803: LD_INT 7
15805: PUSH
15806: LD_INT 12
15808: PUSH
15809: LD_INT 13
15811: PUSH
15812: LD_INT 10
15814: PUSH
15815: LD_INT 14
15817: PUSH
15818: LD_INT 20
15820: PUSH
15821: LD_INT 21
15823: PUSH
15824: LD_INT 22
15826: PUSH
15827: LD_INT 25
15829: PUSH
15830: LD_INT 32
15832: PUSH
15833: LD_INT 27
15835: PUSH
15836: LD_INT 36
15838: PUSH
15839: LD_INT 69
15841: PUSH
15842: LD_INT 39
15844: PUSH
15845: LD_INT 34
15847: PUSH
15848: LD_INT 40
15850: PUSH
15851: LD_INT 48
15853: PUSH
15854: LD_INT 49
15856: PUSH
15857: LD_INT 50
15859: PUSH
15860: LD_INT 51
15862: PUSH
15863: LD_INT 52
15865: PUSH
15866: LD_INT 53
15868: PUSH
15869: LD_INT 54
15871: PUSH
15872: LD_INT 55
15874: PUSH
15875: LD_INT 56
15877: PUSH
15878: LD_INT 57
15880: PUSH
15881: LD_INT 58
15883: PUSH
15884: LD_INT 59
15886: PUSH
15887: LD_INT 60
15889: PUSH
15890: LD_INT 61
15892: PUSH
15893: LD_INT 62
15895: PUSH
15896: LD_INT 80
15898: PUSH
15899: LD_INT 82
15901: PUSH
15902: LD_INT 83
15904: PUSH
15905: LD_INT 84
15907: PUSH
15908: LD_INT 85
15910: PUSH
15911: LD_INT 86
15913: PUSH
15914: LD_INT 90
15916: PUSH
15917: LD_INT 93
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: ST_TO_ADDR
15975: GO 16458
15977: LD_INT 2
15979: DOUBLE
15980: EQUAL
15981: IFTRUE 15985
15983: GO 16219
15985: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
15986: LD_ADDR_VAR 0 4
15990: PUSH
15991: LD_INT 35
15993: PUSH
15994: LD_INT 45
15996: PUSH
15997: LD_INT 46
15999: PUSH
16000: LD_INT 47
16002: PUSH
16003: LD_INT 82
16005: PUSH
16006: LD_INT 83
16008: PUSH
16009: LD_INT 84
16011: PUSH
16012: LD_INT 85
16014: PUSH
16015: LD_INT 87
16017: PUSH
16018: LD_INT 70
16020: PUSH
16021: LD_INT 1
16023: PUSH
16024: LD_INT 11
16026: PUSH
16027: LD_INT 3
16029: PUSH
16030: LD_INT 4
16032: PUSH
16033: LD_INT 5
16035: PUSH
16036: LD_INT 6
16038: PUSH
16039: LD_INT 15
16041: PUSH
16042: LD_INT 18
16044: PUSH
16045: LD_INT 7
16047: PUSH
16048: LD_INT 17
16050: PUSH
16051: LD_INT 8
16053: PUSH
16054: LD_INT 20
16056: PUSH
16057: LD_INT 21
16059: PUSH
16060: LD_INT 22
16062: PUSH
16063: LD_INT 72
16065: PUSH
16066: LD_INT 26
16068: PUSH
16069: LD_INT 69
16071: PUSH
16072: LD_INT 39
16074: PUSH
16075: LD_INT 40
16077: PUSH
16078: LD_INT 41
16080: PUSH
16081: LD_INT 42
16083: PUSH
16084: LD_INT 43
16086: PUSH
16087: LD_INT 48
16089: PUSH
16090: LD_INT 49
16092: PUSH
16093: LD_INT 50
16095: PUSH
16096: LD_INT 51
16098: PUSH
16099: LD_INT 52
16101: PUSH
16102: LD_INT 53
16104: PUSH
16105: LD_INT 54
16107: PUSH
16108: LD_INT 55
16110: PUSH
16111: LD_INT 56
16113: PUSH
16114: LD_INT 60
16116: PUSH
16117: LD_INT 61
16119: PUSH
16120: LD_INT 62
16122: PUSH
16123: LD_INT 66
16125: PUSH
16126: LD_INT 67
16128: PUSH
16129: LD_INT 68
16131: PUSH
16132: LD_INT 81
16134: PUSH
16135: LD_INT 82
16137: PUSH
16138: LD_INT 83
16140: PUSH
16141: LD_INT 84
16143: PUSH
16144: LD_INT 85
16146: PUSH
16147: LD_INT 87
16149: PUSH
16150: LD_INT 88
16152: PUSH
16153: LD_INT 92
16155: PUSH
16156: LD_INT 94
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: ST_TO_ADDR
16217: GO 16458
16219: LD_INT 3
16221: DOUBLE
16222: EQUAL
16223: IFTRUE 16227
16225: GO 16457
16227: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
16228: LD_ADDR_VAR 0 4
16232: PUSH
16233: LD_INT 46
16235: PUSH
16236: LD_INT 47
16238: PUSH
16239: LD_INT 1
16241: PUSH
16242: LD_INT 2
16244: PUSH
16245: LD_INT 82
16247: PUSH
16248: LD_INT 83
16250: PUSH
16251: LD_INT 84
16253: PUSH
16254: LD_INT 85
16256: PUSH
16257: LD_INT 86
16259: PUSH
16260: LD_INT 11
16262: PUSH
16263: LD_INT 9
16265: PUSH
16266: LD_INT 20
16268: PUSH
16269: LD_INT 19
16271: PUSH
16272: LD_INT 21
16274: PUSH
16275: LD_INT 24
16277: PUSH
16278: LD_INT 22
16280: PUSH
16281: LD_INT 25
16283: PUSH
16284: LD_INT 28
16286: PUSH
16287: LD_INT 29
16289: PUSH
16290: LD_INT 30
16292: PUSH
16293: LD_INT 31
16295: PUSH
16296: LD_INT 37
16298: PUSH
16299: LD_INT 38
16301: PUSH
16302: LD_INT 32
16304: PUSH
16305: LD_INT 27
16307: PUSH
16308: LD_INT 33
16310: PUSH
16311: LD_INT 69
16313: PUSH
16314: LD_INT 39
16316: PUSH
16317: LD_INT 34
16319: PUSH
16320: LD_INT 40
16322: PUSH
16323: LD_INT 71
16325: PUSH
16326: LD_INT 23
16328: PUSH
16329: LD_INT 44
16331: PUSH
16332: LD_INT 48
16334: PUSH
16335: LD_INT 49
16337: PUSH
16338: LD_INT 50
16340: PUSH
16341: LD_INT 51
16343: PUSH
16344: LD_INT 52
16346: PUSH
16347: LD_INT 53
16349: PUSH
16350: LD_INT 54
16352: PUSH
16353: LD_INT 55
16355: PUSH
16356: LD_INT 56
16358: PUSH
16359: LD_INT 57
16361: PUSH
16362: LD_INT 58
16364: PUSH
16365: LD_INT 59
16367: PUSH
16368: LD_INT 63
16370: PUSH
16371: LD_INT 64
16373: PUSH
16374: LD_INT 65
16376: PUSH
16377: LD_INT 82
16379: PUSH
16380: LD_INT 83
16382: PUSH
16383: LD_INT 84
16385: PUSH
16386: LD_INT 85
16388: PUSH
16389: LD_INT 86
16391: PUSH
16392: LD_INT 89
16394: PUSH
16395: LD_INT 91
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: ST_TO_ADDR
16455: GO 16458
16457: POP
// if state > - 1 and state < 3 then
16458: LD_VAR 0 3
16462: PUSH
16463: LD_INT 1
16465: NEG
16466: GREATER
16467: IFFALSE 16479
16469: PUSH
16470: LD_VAR 0 3
16474: PUSH
16475: LD_INT 3
16477: LESS
16478: AND
16479: IFFALSE 16536
// for i in result do
16481: LD_ADDR_VAR 0 5
16485: PUSH
16486: LD_VAR 0 4
16490: PUSH
16491: FOR_IN
16492: IFFALSE 16534
// if GetTech ( i , side ) <> state then
16494: LD_VAR 0 5
16498: PPUSH
16499: LD_VAR 0 1
16503: PPUSH
16504: CALL_OW 321
16508: PUSH
16509: LD_VAR 0 3
16513: NONEQUAL
16514: IFFALSE 16532
// result := result diff i ;
16516: LD_ADDR_VAR 0 4
16520: PUSH
16521: LD_VAR 0 4
16525: PUSH
16526: LD_VAR 0 5
16530: DIFF
16531: ST_TO_ADDR
16532: GO 16491
16534: POP
16535: POP
// end ;
16536: LD_VAR 0 4
16540: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16541: LD_INT 0
16543: PPUSH
16544: PPUSH
16545: PPUSH
// result := true ;
16546: LD_ADDR_VAR 0 3
16550: PUSH
16551: LD_INT 1
16553: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16554: LD_ADDR_VAR 0 5
16558: PUSH
16559: LD_VAR 0 2
16563: PPUSH
16564: CALL_OW 480
16568: ST_TO_ADDR
// if not tmp then
16569: LD_VAR 0 5
16573: NOT
16574: IFFALSE 16578
// exit ;
16576: GO 16627
// for i in tmp do
16578: LD_ADDR_VAR 0 4
16582: PUSH
16583: LD_VAR 0 5
16587: PUSH
16588: FOR_IN
16589: IFFALSE 16625
// if GetTech ( i , side ) <> state_researched then
16591: LD_VAR 0 4
16595: PPUSH
16596: LD_VAR 0 1
16600: PPUSH
16601: CALL_OW 321
16605: PUSH
16606: LD_INT 2
16608: NONEQUAL
16609: IFFALSE 16623
// begin result := false ;
16611: LD_ADDR_VAR 0 3
16615: PUSH
16616: LD_INT 0
16618: ST_TO_ADDR
// exit ;
16619: POP
16620: POP
16621: GO 16627
// end ;
16623: GO 16588
16625: POP
16626: POP
// end ;
16627: LD_VAR 0 3
16631: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16632: LD_INT 0
16634: PPUSH
16635: PPUSH
16636: PPUSH
16637: PPUSH
16638: PPUSH
16639: PPUSH
16640: PPUSH
16641: PPUSH
16642: PPUSH
16643: PPUSH
16644: PPUSH
16645: PPUSH
16646: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16647: LD_VAR 0 1
16651: NOT
16652: IFTRUE 16669
16654: PUSH
16655: LD_VAR 0 1
16659: PPUSH
16660: CALL_OW 257
16664: PUSH
16665: LD_INT 9
16667: NONEQUAL
16668: OR
16669: IFFALSE 16673
// exit ;
16671: GO 17252
// side := GetSide ( unit ) ;
16673: LD_ADDR_VAR 0 9
16677: PUSH
16678: LD_VAR 0 1
16682: PPUSH
16683: CALL_OW 255
16687: ST_TO_ADDR
// tech_space := tech_spacanom ;
16688: LD_ADDR_VAR 0 12
16692: PUSH
16693: LD_INT 29
16695: ST_TO_ADDR
// tech_time := tech_taurad ;
16696: LD_ADDR_VAR 0 13
16700: PUSH
16701: LD_INT 28
16703: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16704: LD_ADDR_VAR 0 11
16708: PUSH
16709: LD_VAR 0 1
16713: PPUSH
16714: CALL_OW 310
16718: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16719: LD_VAR 0 11
16723: PPUSH
16724: CALL_OW 247
16728: PUSH
16729: LD_INT 2
16731: EQUAL
16732: IFFALSE 16736
// exit ;
16734: GO 17252
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16736: LD_ADDR_VAR 0 8
16740: PUSH
16741: LD_INT 81
16743: PUSH
16744: LD_VAR 0 9
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: LD_INT 3
16755: PUSH
16756: LD_INT 21
16758: PUSH
16759: LD_INT 3
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: PPUSH
16774: CALL_OW 69
16778: ST_TO_ADDR
// if not tmp then
16779: LD_VAR 0 8
16783: NOT
16784: IFFALSE 16788
// exit ;
16786: GO 17252
// if in_unit then
16788: LD_VAR 0 11
16792: IFFALSE 16816
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16794: LD_ADDR_VAR 0 10
16798: PUSH
16799: LD_VAR 0 8
16803: PPUSH
16804: LD_VAR 0 11
16808: PPUSH
16809: CALL_OW 74
16813: ST_TO_ADDR
16814: GO 16836
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16816: LD_ADDR_VAR 0 10
16820: PUSH
16821: LD_VAR 0 8
16825: PPUSH
16826: LD_VAR 0 1
16830: PPUSH
16831: CALL_OW 74
16835: ST_TO_ADDR
// if not enemy then
16836: LD_VAR 0 10
16840: NOT
16841: IFFALSE 16845
// exit ;
16843: GO 17252
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16845: LD_VAR 0 11
16849: IFFALSE 16871
16851: PUSH
16852: LD_VAR 0 11
16856: PPUSH
16857: LD_VAR 0 10
16861: PPUSH
16862: CALL_OW 296
16866: PUSH
16867: LD_INT 13
16869: GREATER
16870: AND
16871: IFTRUE 16893
16873: PUSH
16874: LD_VAR 0 1
16878: PPUSH
16879: LD_VAR 0 10
16883: PPUSH
16884: CALL_OW 296
16888: PUSH
16889: LD_INT 12
16891: GREATER
16892: OR
16893: IFFALSE 16897
// exit ;
16895: GO 17252
// missile := [ 1 ] ;
16897: LD_ADDR_VAR 0 14
16901: PUSH
16902: LD_INT 1
16904: PUSH
16905: EMPTY
16906: LIST
16907: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16908: LD_VAR 0 9
16912: PPUSH
16913: LD_VAR 0 12
16917: PPUSH
16918: CALL_OW 325
16922: IFFALSE 16951
// missile := Replace ( missile , missile + 1 , 2 ) ;
16924: LD_ADDR_VAR 0 14
16928: PUSH
16929: LD_VAR 0 14
16933: PPUSH
16934: LD_VAR 0 14
16938: PUSH
16939: LD_INT 1
16941: PLUS
16942: PPUSH
16943: LD_INT 2
16945: PPUSH
16946: CALL_OW 1
16950: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16951: LD_VAR 0 9
16955: PPUSH
16956: LD_VAR 0 13
16960: PPUSH
16961: CALL_OW 325
16965: IFFALSE 16989
16967: PUSH
16968: LD_VAR 0 10
16972: PPUSH
16973: CALL_OW 255
16977: PPUSH
16978: LD_VAR 0 13
16982: PPUSH
16983: CALL_OW 325
16987: NOT
16988: AND
16989: IFFALSE 17018
// missile := Replace ( missile , missile + 1 , 3 ) ;
16991: LD_ADDR_VAR 0 14
16995: PUSH
16996: LD_VAR 0 14
17000: PPUSH
17001: LD_VAR 0 14
17005: PUSH
17006: LD_INT 1
17008: PLUS
17009: PPUSH
17010: LD_INT 3
17012: PPUSH
17013: CALL_OW 1
17017: ST_TO_ADDR
// if missile < 2 then
17018: LD_VAR 0 14
17022: PUSH
17023: LD_INT 2
17025: LESS
17026: IFFALSE 17030
// exit ;
17028: GO 17252
// x := GetX ( enemy ) ;
17030: LD_ADDR_VAR 0 4
17034: PUSH
17035: LD_VAR 0 10
17039: PPUSH
17040: CALL_OW 250
17044: ST_TO_ADDR
// y := GetY ( enemy ) ;
17045: LD_ADDR_VAR 0 5
17049: PUSH
17050: LD_VAR 0 10
17054: PPUSH
17055: CALL_OW 251
17059: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17060: LD_ADDR_VAR 0 6
17064: PUSH
17065: LD_VAR 0 4
17069: PUSH
17070: LD_INT 1
17072: NEG
17073: PPUSH
17074: LD_INT 1
17076: PPUSH
17077: CALL_OW 12
17081: PLUS
17082: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17083: LD_ADDR_VAR 0 7
17087: PUSH
17088: LD_VAR 0 5
17092: PUSH
17093: LD_INT 1
17095: NEG
17096: PPUSH
17097: LD_INT 1
17099: PPUSH
17100: CALL_OW 12
17104: PLUS
17105: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17106: LD_VAR 0 6
17110: PPUSH
17111: LD_VAR 0 7
17115: PPUSH
17116: CALL_OW 488
17120: NOT
17121: IFFALSE 17143
// begin _x := x ;
17123: LD_ADDR_VAR 0 6
17127: PUSH
17128: LD_VAR 0 4
17132: ST_TO_ADDR
// _y := y ;
17133: LD_ADDR_VAR 0 7
17137: PUSH
17138: LD_VAR 0 5
17142: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17143: LD_ADDR_VAR 0 3
17147: PUSH
17148: LD_INT 1
17150: PPUSH
17151: LD_VAR 0 14
17155: PPUSH
17156: CALL_OW 12
17160: ST_TO_ADDR
// case i of 1 :
17161: LD_VAR 0 3
17165: PUSH
17166: LD_INT 1
17168: DOUBLE
17169: EQUAL
17170: IFTRUE 17174
17172: GO 17191
17174: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17175: LD_VAR 0 1
17179: PPUSH
17180: LD_VAR 0 10
17184: PPUSH
17185: CALL_OW 115
17189: GO 17252
17191: LD_INT 2
17193: DOUBLE
17194: EQUAL
17195: IFTRUE 17199
17197: GO 17221
17199: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17200: LD_VAR 0 1
17204: PPUSH
17205: LD_VAR 0 6
17209: PPUSH
17210: LD_VAR 0 7
17214: PPUSH
17215: CALL_OW 153
17219: GO 17252
17221: LD_INT 3
17223: DOUBLE
17224: EQUAL
17225: IFTRUE 17229
17227: GO 17251
17229: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17230: LD_VAR 0 1
17234: PPUSH
17235: LD_VAR 0 6
17239: PPUSH
17240: LD_VAR 0 7
17244: PPUSH
17245: CALL_OW 154
17249: GO 17252
17251: POP
// end ;
17252: LD_VAR 0 2
17256: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17257: LD_INT 0
17259: PPUSH
17260: PPUSH
17261: PPUSH
17262: PPUSH
17263: PPUSH
17264: PPUSH
// if not unit or not building then
17265: LD_VAR 0 1
17269: NOT
17270: IFTRUE 17279
17272: PUSH
17273: LD_VAR 0 2
17277: NOT
17278: OR
17279: IFFALSE 17283
// exit ;
17281: GO 17441
// x := GetX ( building ) ;
17283: LD_ADDR_VAR 0 5
17287: PUSH
17288: LD_VAR 0 2
17292: PPUSH
17293: CALL_OW 250
17297: ST_TO_ADDR
// y := GetY ( building ) ;
17298: LD_ADDR_VAR 0 6
17302: PUSH
17303: LD_VAR 0 2
17307: PPUSH
17308: CALL_OW 251
17312: ST_TO_ADDR
// for i := 0 to 5 do
17313: LD_ADDR_VAR 0 4
17317: PUSH
17318: DOUBLE
17319: LD_INT 0
17321: DEC
17322: ST_TO_ADDR
17323: LD_INT 5
17325: PUSH
17326: FOR_TO
17327: IFFALSE 17439
// begin _x := ShiftX ( x , i , 3 ) ;
17329: LD_ADDR_VAR 0 7
17333: PUSH
17334: LD_VAR 0 5
17338: PPUSH
17339: LD_VAR 0 4
17343: PPUSH
17344: LD_INT 3
17346: PPUSH
17347: CALL_OW 272
17351: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17352: LD_ADDR_VAR 0 8
17356: PUSH
17357: LD_VAR 0 6
17361: PPUSH
17362: LD_VAR 0 4
17366: PPUSH
17367: LD_INT 3
17369: PPUSH
17370: CALL_OW 273
17374: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17375: LD_VAR 0 7
17379: PPUSH
17380: LD_VAR 0 8
17384: PPUSH
17385: CALL_OW 488
17389: NOT
17390: IFFALSE 17394
// continue ;
17392: GO 17326
// if HexInfo ( _x , _y ) = 0 then
17394: LD_VAR 0 7
17398: PPUSH
17399: LD_VAR 0 8
17403: PPUSH
17404: CALL_OW 428
17408: PUSH
17409: LD_INT 0
17411: EQUAL
17412: IFFALSE 17437
// begin ComMoveXY ( unit , _x , _y ) ;
17414: LD_VAR 0 1
17418: PPUSH
17419: LD_VAR 0 7
17423: PPUSH
17424: LD_VAR 0 8
17428: PPUSH
17429: CALL_OW 111
// exit ;
17433: POP
17434: POP
17435: GO 17441
// end ; end ;
17437: GO 17326
17439: POP
17440: POP
// end ;
17441: LD_VAR 0 3
17445: RET
// export function ScanBase ( side , base_area ) ; begin
17446: LD_INT 0
17448: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17449: LD_ADDR_VAR 0 3
17453: PUSH
17454: LD_VAR 0 2
17458: PPUSH
17459: LD_INT 81
17461: PUSH
17462: LD_VAR 0 1
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PPUSH
17471: CALL_OW 70
17475: ST_TO_ADDR
// end ;
17476: LD_VAR 0 3
17480: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17481: LD_INT 0
17483: PPUSH
17484: PPUSH
17485: PPUSH
17486: PPUSH
// result := false ;
17487: LD_ADDR_VAR 0 2
17491: PUSH
17492: LD_INT 0
17494: ST_TO_ADDR
// side := GetSide ( unit ) ;
17495: LD_ADDR_VAR 0 3
17499: PUSH
17500: LD_VAR 0 1
17504: PPUSH
17505: CALL_OW 255
17509: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17510: LD_ADDR_VAR 0 4
17514: PUSH
17515: LD_VAR 0 1
17519: PPUSH
17520: CALL_OW 248
17524: ST_TO_ADDR
// case nat of 1 :
17525: LD_VAR 0 4
17529: PUSH
17530: LD_INT 1
17532: DOUBLE
17533: EQUAL
17534: IFTRUE 17538
17536: GO 17549
17538: POP
// tech := tech_lassight ; 2 :
17539: LD_ADDR_VAR 0 5
17543: PUSH
17544: LD_INT 12
17546: ST_TO_ADDR
17547: GO 17588
17549: LD_INT 2
17551: DOUBLE
17552: EQUAL
17553: IFTRUE 17557
17555: GO 17568
17557: POP
// tech := tech_mortar ; 3 :
17558: LD_ADDR_VAR 0 5
17562: PUSH
17563: LD_INT 41
17565: ST_TO_ADDR
17566: GO 17588
17568: LD_INT 3
17570: DOUBLE
17571: EQUAL
17572: IFTRUE 17576
17574: GO 17587
17576: POP
// tech := tech_bazooka ; end ;
17577: LD_ADDR_VAR 0 5
17581: PUSH
17582: LD_INT 44
17584: ST_TO_ADDR
17585: GO 17588
17587: POP
// if Researched ( side , tech ) then
17588: LD_VAR 0 3
17592: PPUSH
17593: LD_VAR 0 5
17597: PPUSH
17598: CALL_OW 325
17602: IFFALSE 17629
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17604: LD_ADDR_VAR 0 2
17608: PUSH
17609: LD_INT 5
17611: PUSH
17612: LD_INT 8
17614: PUSH
17615: LD_INT 9
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: LIST
17622: PUSH
17623: LD_VAR 0 4
17627: ARRAY
17628: ST_TO_ADDR
// end ;
17629: LD_VAR 0 2
17633: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17634: LD_INT 0
17636: PPUSH
17637: PPUSH
17638: PPUSH
// if not mines then
17639: LD_VAR 0 2
17643: NOT
17644: IFFALSE 17648
// exit ;
17646: GO 17792
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17648: LD_ADDR_VAR 0 5
17652: PUSH
17653: LD_INT 81
17655: PUSH
17656: LD_VAR 0 1
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 3
17667: PUSH
17668: LD_INT 21
17670: PUSH
17671: LD_INT 3
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PPUSH
17686: CALL_OW 69
17690: ST_TO_ADDR
// for i in mines do
17691: LD_ADDR_VAR 0 4
17695: PUSH
17696: LD_VAR 0 2
17700: PUSH
17701: FOR_IN
17702: IFFALSE 17790
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17704: LD_VAR 0 4
17708: PUSH
17709: LD_INT 1
17711: ARRAY
17712: PPUSH
17713: LD_VAR 0 4
17717: PUSH
17718: LD_INT 2
17720: ARRAY
17721: PPUSH
17722: CALL_OW 458
17726: NOT
17727: IFFALSE 17731
// continue ;
17729: GO 17701
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17731: LD_VAR 0 4
17735: PUSH
17736: LD_INT 1
17738: ARRAY
17739: PPUSH
17740: LD_VAR 0 4
17744: PUSH
17745: LD_INT 2
17747: ARRAY
17748: PPUSH
17749: CALL_OW 428
17753: PUSH
17754: LD_VAR 0 5
17758: IN
17759: IFFALSE 17788
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17761: LD_VAR 0 4
17765: PUSH
17766: LD_INT 1
17768: ARRAY
17769: PPUSH
17770: LD_VAR 0 4
17774: PUSH
17775: LD_INT 2
17777: ARRAY
17778: PPUSH
17779: LD_VAR 0 1
17783: PPUSH
17784: CALL_OW 456
// end ;
17788: GO 17701
17790: POP
17791: POP
// end ;
17792: LD_VAR 0 3
17796: RET
// export function Count ( array ) ; begin
17797: LD_INT 0
17799: PPUSH
// result := array + 0 ;
17800: LD_ADDR_VAR 0 2
17804: PUSH
17805: LD_VAR 0 1
17809: PUSH
17810: LD_INT 0
17812: PLUS
17813: ST_TO_ADDR
// end ;
17814: LD_VAR 0 2
17818: RET
// export function IsEmpty ( building ) ; begin
17819: LD_INT 0
17821: PPUSH
// if not building then
17822: LD_VAR 0 1
17826: NOT
17827: IFFALSE 17831
// exit ;
17829: GO 17874
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17831: LD_ADDR_VAR 0 2
17835: PUSH
17836: LD_VAR 0 1
17840: PUSH
17841: LD_INT 22
17843: PUSH
17844: LD_VAR 0 1
17848: PPUSH
17849: CALL_OW 255
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 58
17860: PUSH
17861: EMPTY
17862: LIST
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PPUSH
17868: CALL_OW 69
17872: IN
17873: ST_TO_ADDR
// end ;
17874: LD_VAR 0 2
17878: RET
// export function IsNotFull ( building ) ; var places ; begin
17879: LD_INT 0
17881: PPUSH
17882: PPUSH
// if not building then
17883: LD_VAR 0 1
17887: NOT
17888: IFFALSE 17892
// exit ;
17890: GO 17920
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17892: LD_ADDR_VAR 0 2
17896: PUSH
17897: LD_VAR 0 1
17901: PPUSH
17902: LD_INT 3
17904: PUSH
17905: LD_INT 62
17907: PUSH
17908: EMPTY
17909: LIST
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PPUSH
17915: CALL_OW 72
17919: ST_TO_ADDR
// end ;
17920: LD_VAR 0 2
17924: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17925: LD_INT 0
17927: PPUSH
17928: PPUSH
17929: PPUSH
17930: PPUSH
// tmp := [ ] ;
17931: LD_ADDR_VAR 0 3
17935: PUSH
17936: EMPTY
17937: ST_TO_ADDR
// list := [ ] ;
17938: LD_ADDR_VAR 0 5
17942: PUSH
17943: EMPTY
17944: ST_TO_ADDR
// for i = 16 to 25 do
17945: LD_ADDR_VAR 0 4
17949: PUSH
17950: DOUBLE
17951: LD_INT 16
17953: DEC
17954: ST_TO_ADDR
17955: LD_INT 25
17957: PUSH
17958: FOR_TO
17959: IFFALSE 18032
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17961: LD_ADDR_VAR 0 3
17965: PUSH
17966: LD_VAR 0 3
17970: PUSH
17971: LD_INT 22
17973: PUSH
17974: LD_VAR 0 1
17978: PPUSH
17979: CALL_OW 255
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 91
17990: PUSH
17991: LD_VAR 0 1
17995: PUSH
17996: LD_INT 6
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 30
18006: PUSH
18007: LD_VAR 0 4
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: LIST
18020: PUSH
18021: EMPTY
18022: LIST
18023: PPUSH
18024: CALL_OW 69
18028: ADD
18029: ST_TO_ADDR
18030: GO 17958
18032: POP
18033: POP
// for i = 1 to tmp do
18034: LD_ADDR_VAR 0 4
18038: PUSH
18039: DOUBLE
18040: LD_INT 1
18042: DEC
18043: ST_TO_ADDR
18044: LD_VAR 0 3
18048: PUSH
18049: FOR_TO
18050: IFFALSE 18138
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18052: LD_ADDR_VAR 0 5
18056: PUSH
18057: LD_VAR 0 5
18061: PUSH
18062: LD_VAR 0 3
18066: PUSH
18067: LD_VAR 0 4
18071: ARRAY
18072: PPUSH
18073: CALL_OW 266
18077: PUSH
18078: LD_VAR 0 3
18082: PUSH
18083: LD_VAR 0 4
18087: ARRAY
18088: PPUSH
18089: CALL_OW 250
18093: PUSH
18094: LD_VAR 0 3
18098: PUSH
18099: LD_VAR 0 4
18103: ARRAY
18104: PPUSH
18105: CALL_OW 251
18109: PUSH
18110: LD_VAR 0 3
18114: PUSH
18115: LD_VAR 0 4
18119: ARRAY
18120: PPUSH
18121: CALL_OW 254
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: PUSH
18132: EMPTY
18133: LIST
18134: ADD
18135: ST_TO_ADDR
18136: GO 18049
18138: POP
18139: POP
// result := list ;
18140: LD_ADDR_VAR 0 2
18144: PUSH
18145: LD_VAR 0 5
18149: ST_TO_ADDR
// end ;
18150: LD_VAR 0 2
18154: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18155: LD_INT 0
18157: PPUSH
18158: PPUSH
18159: PPUSH
18160: PPUSH
18161: PPUSH
18162: PPUSH
18163: PPUSH
// if not factory then
18164: LD_VAR 0 1
18168: NOT
18169: IFFALSE 18173
// exit ;
18171: GO 18776
// if control = control_apeman then
18173: LD_VAR 0 4
18177: PUSH
18178: LD_INT 5
18180: EQUAL
18181: IFFALSE 18290
// begin tmp := UnitsInside ( factory ) ;
18183: LD_ADDR_VAR 0 8
18187: PUSH
18188: LD_VAR 0 1
18192: PPUSH
18193: CALL_OW 313
18197: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18198: LD_VAR 0 8
18202: PPUSH
18203: LD_INT 25
18205: PUSH
18206: LD_INT 12
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PPUSH
18213: CALL_OW 72
18217: NOT
18218: IFFALSE 18228
// control := control_manual ;
18220: LD_ADDR_VAR 0 4
18224: PUSH
18225: LD_INT 1
18227: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18228: LD_ADDR_VAR 0 8
18232: PUSH
18233: LD_VAR 0 1
18237: PPUSH
18238: CALL 17925 0 1
18242: ST_TO_ADDR
// if tmp then
18243: LD_VAR 0 8
18247: IFFALSE 18290
// begin for i in tmp do
18249: LD_ADDR_VAR 0 7
18253: PUSH
18254: LD_VAR 0 8
18258: PUSH
18259: FOR_IN
18260: IFFALSE 18288
// if i [ 1 ] = b_ext_radio then
18262: LD_VAR 0 7
18266: PUSH
18267: LD_INT 1
18269: ARRAY
18270: PUSH
18271: LD_INT 22
18273: EQUAL
18274: IFFALSE 18286
// begin control := control_remote ;
18276: LD_ADDR_VAR 0 4
18280: PUSH
18281: LD_INT 2
18283: ST_TO_ADDR
// break ;
18284: GO 18288
// end ;
18286: GO 18259
18288: POP
18289: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18290: LD_VAR 0 1
18294: PPUSH
18295: LD_VAR 0 2
18299: PPUSH
18300: LD_VAR 0 3
18304: PPUSH
18305: LD_VAR 0 4
18309: PPUSH
18310: LD_VAR 0 5
18314: PPUSH
18315: CALL_OW 448
18319: IFFALSE 18354
// begin result := [ chassis , engine , control , weapon ] ;
18321: LD_ADDR_VAR 0 6
18325: PUSH
18326: LD_VAR 0 2
18330: PUSH
18331: LD_VAR 0 3
18335: PUSH
18336: LD_VAR 0 4
18340: PUSH
18341: LD_VAR 0 5
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: ST_TO_ADDR
// exit ;
18352: GO 18776
// end ; _chassis := AvailableChassisList ( factory ) ;
18354: LD_ADDR_VAR 0 9
18358: PUSH
18359: LD_VAR 0 1
18363: PPUSH
18364: CALL_OW 475
18368: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18369: LD_ADDR_VAR 0 11
18373: PUSH
18374: LD_VAR 0 1
18378: PPUSH
18379: CALL_OW 476
18383: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18384: LD_ADDR_VAR 0 12
18388: PUSH
18389: LD_VAR 0 1
18393: PPUSH
18394: CALL_OW 477
18398: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18399: LD_ADDR_VAR 0 10
18403: PUSH
18404: LD_VAR 0 1
18408: PPUSH
18409: CALL_OW 478
18413: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18414: LD_VAR 0 9
18418: NOT
18419: IFTRUE 18428
18421: PUSH
18422: LD_VAR 0 11
18426: NOT
18427: OR
18428: IFTRUE 18437
18430: PUSH
18431: LD_VAR 0 12
18435: NOT
18436: OR
18437: IFTRUE 18446
18439: PUSH
18440: LD_VAR 0 10
18444: NOT
18445: OR
18446: IFFALSE 18481
// begin result := [ chassis , engine , control , weapon ] ;
18448: LD_ADDR_VAR 0 6
18452: PUSH
18453: LD_VAR 0 2
18457: PUSH
18458: LD_VAR 0 3
18462: PUSH
18463: LD_VAR 0 4
18467: PUSH
18468: LD_VAR 0 5
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: ST_TO_ADDR
// exit ;
18479: GO 18776
// end ; if not chassis in _chassis then
18481: LD_VAR 0 2
18485: PUSH
18486: LD_VAR 0 9
18490: IN
18491: NOT
18492: IFFALSE 18518
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18494: LD_ADDR_VAR 0 2
18498: PUSH
18499: LD_VAR 0 9
18503: PUSH
18504: LD_INT 1
18506: PPUSH
18507: LD_VAR 0 9
18511: PPUSH
18512: CALL_OW 12
18516: ARRAY
18517: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18518: LD_VAR 0 2
18522: PPUSH
18523: LD_VAR 0 3
18527: PPUSH
18528: CALL 18781 0 2
18532: NOT
18533: IFFALSE 18594
// repeat engine := _engine [ 1 ] ;
18535: LD_ADDR_VAR 0 3
18539: PUSH
18540: LD_VAR 0 11
18544: PUSH
18545: LD_INT 1
18547: ARRAY
18548: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18549: LD_ADDR_VAR 0 11
18553: PUSH
18554: LD_VAR 0 11
18558: PPUSH
18559: LD_INT 1
18561: PPUSH
18562: CALL_OW 3
18566: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18567: LD_VAR 0 2
18571: PPUSH
18572: LD_VAR 0 3
18576: PPUSH
18577: CALL 18781 0 2
18581: IFTRUE 18592
18583: PUSH
18584: LD_VAR 0 11
18588: PUSH
18589: EMPTY
18590: EQUAL
18591: OR
18592: IFFALSE 18535
// if not control in _control then
18594: LD_VAR 0 4
18598: PUSH
18599: LD_VAR 0 12
18603: IN
18604: NOT
18605: IFFALSE 18631
// control := _control [ rand ( 1 , _control ) ] ;
18607: LD_ADDR_VAR 0 4
18611: PUSH
18612: LD_VAR 0 12
18616: PUSH
18617: LD_INT 1
18619: PPUSH
18620: LD_VAR 0 12
18624: PPUSH
18625: CALL_OW 12
18629: ARRAY
18630: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18631: LD_VAR 0 2
18635: PPUSH
18636: LD_VAR 0 5
18640: PPUSH
18641: CALL 19003 0 2
18645: NOT
18646: IFFALSE 18707
// repeat weapon := _weapon [ 1 ] ;
18648: LD_ADDR_VAR 0 5
18652: PUSH
18653: LD_VAR 0 10
18657: PUSH
18658: LD_INT 1
18660: ARRAY
18661: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18662: LD_ADDR_VAR 0 10
18666: PUSH
18667: LD_VAR 0 10
18671: PPUSH
18672: LD_INT 1
18674: PPUSH
18675: CALL_OW 3
18679: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18680: LD_VAR 0 2
18684: PPUSH
18685: LD_VAR 0 5
18689: PPUSH
18690: CALL 19003 0 2
18694: IFTRUE 18705
18696: PUSH
18697: LD_VAR 0 10
18701: PUSH
18702: EMPTY
18703: EQUAL
18704: OR
18705: IFFALSE 18648
// result := [ ] ;
18707: LD_ADDR_VAR 0 6
18711: PUSH
18712: EMPTY
18713: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18714: LD_VAR 0 1
18718: PPUSH
18719: LD_VAR 0 2
18723: PPUSH
18724: LD_VAR 0 3
18728: PPUSH
18729: LD_VAR 0 4
18733: PPUSH
18734: LD_VAR 0 5
18738: PPUSH
18739: CALL_OW 448
18743: IFFALSE 18776
// result := [ chassis , engine , control , weapon ] ;
18745: LD_ADDR_VAR 0 6
18749: PUSH
18750: LD_VAR 0 2
18754: PUSH
18755: LD_VAR 0 3
18759: PUSH
18760: LD_VAR 0 4
18764: PUSH
18765: LD_VAR 0 5
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: ST_TO_ADDR
// end ;
18776: LD_VAR 0 6
18780: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18781: LD_INT 0
18783: PPUSH
// if not chassis or not engine then
18784: LD_VAR 0 1
18788: NOT
18789: IFTRUE 18798
18791: PUSH
18792: LD_VAR 0 2
18796: NOT
18797: OR
18798: IFFALSE 18802
// exit ;
18800: GO 18998
// case engine of engine_solar :
18802: LD_VAR 0 2
18806: PUSH
18807: LD_INT 2
18809: DOUBLE
18810: EQUAL
18811: IFTRUE 18815
18813: GO 18853
18815: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18816: LD_ADDR_VAR 0 3
18820: PUSH
18821: LD_INT 11
18823: PUSH
18824: LD_INT 12
18826: PUSH
18827: LD_INT 13
18829: PUSH
18830: LD_INT 14
18832: PUSH
18833: LD_INT 1
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: LD_INT 3
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: ST_TO_ADDR
18851: GO 18982
18853: LD_INT 1
18855: DOUBLE
18856: EQUAL
18857: IFTRUE 18861
18859: GO 18923
18861: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18862: LD_ADDR_VAR 0 3
18866: PUSH
18867: LD_INT 11
18869: PUSH
18870: LD_INT 12
18872: PUSH
18873: LD_INT 13
18875: PUSH
18876: LD_INT 14
18878: PUSH
18879: LD_INT 1
18881: PUSH
18882: LD_INT 2
18884: PUSH
18885: LD_INT 3
18887: PUSH
18888: LD_INT 4
18890: PUSH
18891: LD_INT 5
18893: PUSH
18894: LD_INT 21
18896: PUSH
18897: LD_INT 23
18899: PUSH
18900: LD_INT 22
18902: PUSH
18903: LD_INT 24
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: ST_TO_ADDR
18921: GO 18982
18923: LD_INT 3
18925: DOUBLE
18926: EQUAL
18927: IFTRUE 18931
18929: GO 18981
18931: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18932: LD_ADDR_VAR 0 3
18936: PUSH
18937: LD_INT 13
18939: PUSH
18940: LD_INT 14
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: LD_INT 3
18948: PUSH
18949: LD_INT 4
18951: PUSH
18952: LD_INT 5
18954: PUSH
18955: LD_INT 21
18957: PUSH
18958: LD_INT 22
18960: PUSH
18961: LD_INT 23
18963: PUSH
18964: LD_INT 24
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: ST_TO_ADDR
18979: GO 18982
18981: POP
// result := ( chassis in result ) ;
18982: LD_ADDR_VAR 0 3
18986: PUSH
18987: LD_VAR 0 1
18991: PUSH
18992: LD_VAR 0 3
18996: IN
18997: ST_TO_ADDR
// end ;
18998: LD_VAR 0 3
19002: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19003: LD_INT 0
19005: PPUSH
// if not chassis or not weapon then
19006: LD_VAR 0 1
19010: NOT
19011: IFTRUE 19020
19013: PUSH
19014: LD_VAR 0 2
19018: NOT
19019: OR
19020: IFFALSE 19024
// exit ;
19022: GO 20118
// case weapon of us_machine_gun :
19024: LD_VAR 0 2
19028: PUSH
19029: LD_INT 2
19031: DOUBLE
19032: EQUAL
19033: IFTRUE 19037
19035: GO 19067
19037: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19038: LD_ADDR_VAR 0 3
19042: PUSH
19043: LD_INT 1
19045: PUSH
19046: LD_INT 2
19048: PUSH
19049: LD_INT 3
19051: PUSH
19052: LD_INT 4
19054: PUSH
19055: LD_INT 5
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: ST_TO_ADDR
19065: GO 20102
19067: LD_INT 3
19069: DOUBLE
19070: EQUAL
19071: IFTRUE 19075
19073: GO 19105
19075: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19076: LD_ADDR_VAR 0 3
19080: PUSH
19081: LD_INT 1
19083: PUSH
19084: LD_INT 2
19086: PUSH
19087: LD_INT 3
19089: PUSH
19090: LD_INT 4
19092: PUSH
19093: LD_INT 5
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: ST_TO_ADDR
19103: GO 20102
19105: LD_INT 11
19107: DOUBLE
19108: EQUAL
19109: IFTRUE 19113
19111: GO 19143
19113: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19114: LD_ADDR_VAR 0 3
19118: PUSH
19119: LD_INT 1
19121: PUSH
19122: LD_INT 2
19124: PUSH
19125: LD_INT 3
19127: PUSH
19128: LD_INT 4
19130: PUSH
19131: LD_INT 5
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: ST_TO_ADDR
19141: GO 20102
19143: LD_INT 4
19145: DOUBLE
19146: EQUAL
19147: IFTRUE 19151
19149: GO 19177
19151: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19152: LD_ADDR_VAR 0 3
19156: PUSH
19157: LD_INT 2
19159: PUSH
19160: LD_INT 3
19162: PUSH
19163: LD_INT 4
19165: PUSH
19166: LD_INT 5
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: ST_TO_ADDR
19175: GO 20102
19177: LD_INT 5
19179: DOUBLE
19180: EQUAL
19181: IFTRUE 19185
19183: GO 19211
19185: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19186: LD_ADDR_VAR 0 3
19190: PUSH
19191: LD_INT 2
19193: PUSH
19194: LD_INT 3
19196: PUSH
19197: LD_INT 4
19199: PUSH
19200: LD_INT 5
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: ST_TO_ADDR
19209: GO 20102
19211: LD_INT 9
19213: DOUBLE
19214: EQUAL
19215: IFTRUE 19219
19217: GO 19245
19219: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19220: LD_ADDR_VAR 0 3
19224: PUSH
19225: LD_INT 2
19227: PUSH
19228: LD_INT 3
19230: PUSH
19231: LD_INT 4
19233: PUSH
19234: LD_INT 5
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: ST_TO_ADDR
19243: GO 20102
19245: LD_INT 7
19247: DOUBLE
19248: EQUAL
19249: IFTRUE 19253
19251: GO 19279
19253: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19254: LD_ADDR_VAR 0 3
19258: PUSH
19259: LD_INT 2
19261: PUSH
19262: LD_INT 3
19264: PUSH
19265: LD_INT 4
19267: PUSH
19268: LD_INT 5
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: ST_TO_ADDR
19277: GO 20102
19279: LD_INT 12
19281: DOUBLE
19282: EQUAL
19283: IFTRUE 19287
19285: GO 19313
19287: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19288: LD_ADDR_VAR 0 3
19292: PUSH
19293: LD_INT 2
19295: PUSH
19296: LD_INT 3
19298: PUSH
19299: LD_INT 4
19301: PUSH
19302: LD_INT 5
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: ST_TO_ADDR
19311: GO 20102
19313: LD_INT 13
19315: DOUBLE
19316: EQUAL
19317: IFTRUE 19321
19319: GO 19347
19321: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19322: LD_ADDR_VAR 0 3
19326: PUSH
19327: LD_INT 2
19329: PUSH
19330: LD_INT 3
19332: PUSH
19333: LD_INT 4
19335: PUSH
19336: LD_INT 5
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: ST_TO_ADDR
19345: GO 20102
19347: LD_INT 14
19349: DOUBLE
19350: EQUAL
19351: IFTRUE 19355
19353: GO 19373
19355: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19356: LD_ADDR_VAR 0 3
19360: PUSH
19361: LD_INT 4
19363: PUSH
19364: LD_INT 5
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: ST_TO_ADDR
19371: GO 20102
19373: LD_INT 6
19375: DOUBLE
19376: EQUAL
19377: IFTRUE 19381
19379: GO 19399
19381: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19382: LD_ADDR_VAR 0 3
19386: PUSH
19387: LD_INT 4
19389: PUSH
19390: LD_INT 5
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: ST_TO_ADDR
19397: GO 20102
19399: LD_INT 10
19401: DOUBLE
19402: EQUAL
19403: IFTRUE 19407
19405: GO 19425
19407: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19408: LD_ADDR_VAR 0 3
19412: PUSH
19413: LD_INT 4
19415: PUSH
19416: LD_INT 5
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: ST_TO_ADDR
19423: GO 20102
19425: LD_INT 22
19427: DOUBLE
19428: EQUAL
19429: IFTRUE 19433
19431: GO 19459
19433: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19434: LD_ADDR_VAR 0 3
19438: PUSH
19439: LD_INT 11
19441: PUSH
19442: LD_INT 12
19444: PUSH
19445: LD_INT 13
19447: PUSH
19448: LD_INT 14
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: ST_TO_ADDR
19457: GO 20102
19459: LD_INT 23
19461: DOUBLE
19462: EQUAL
19463: IFTRUE 19467
19465: GO 19493
19467: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19468: LD_ADDR_VAR 0 3
19472: PUSH
19473: LD_INT 11
19475: PUSH
19476: LD_INT 12
19478: PUSH
19479: LD_INT 13
19481: PUSH
19482: LD_INT 14
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: ST_TO_ADDR
19491: GO 20102
19493: LD_INT 24
19495: DOUBLE
19496: EQUAL
19497: IFTRUE 19501
19499: GO 19527
19501: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19502: LD_ADDR_VAR 0 3
19506: PUSH
19507: LD_INT 11
19509: PUSH
19510: LD_INT 12
19512: PUSH
19513: LD_INT 13
19515: PUSH
19516: LD_INT 14
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: ST_TO_ADDR
19525: GO 20102
19527: LD_INT 30
19529: DOUBLE
19530: EQUAL
19531: IFTRUE 19535
19533: GO 19561
19535: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19536: LD_ADDR_VAR 0 3
19540: PUSH
19541: LD_INT 11
19543: PUSH
19544: LD_INT 12
19546: PUSH
19547: LD_INT 13
19549: PUSH
19550: LD_INT 14
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: ST_TO_ADDR
19559: GO 20102
19561: LD_INT 25
19563: DOUBLE
19564: EQUAL
19565: IFTRUE 19569
19567: GO 19587
19569: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19570: LD_ADDR_VAR 0 3
19574: PUSH
19575: LD_INT 13
19577: PUSH
19578: LD_INT 14
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: ST_TO_ADDR
19585: GO 20102
19587: LD_INT 27
19589: DOUBLE
19590: EQUAL
19591: IFTRUE 19595
19593: GO 19613
19595: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19596: LD_ADDR_VAR 0 3
19600: PUSH
19601: LD_INT 13
19603: PUSH
19604: LD_INT 14
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: ST_TO_ADDR
19611: GO 20102
19613: LD_INT 92
19615: DOUBLE
19616: EQUAL
19617: IFTRUE 19621
19619: GO 19647
19621: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19622: LD_ADDR_VAR 0 3
19626: PUSH
19627: LD_INT 11
19629: PUSH
19630: LD_INT 12
19632: PUSH
19633: LD_INT 13
19635: PUSH
19636: LD_INT 14
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: ST_TO_ADDR
19645: GO 20102
19647: LD_INT 28
19649: DOUBLE
19650: EQUAL
19651: IFTRUE 19655
19653: GO 19673
19655: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19656: LD_ADDR_VAR 0 3
19660: PUSH
19661: LD_INT 13
19663: PUSH
19664: LD_INT 14
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: ST_TO_ADDR
19671: GO 20102
19673: LD_INT 29
19675: DOUBLE
19676: EQUAL
19677: IFTRUE 19681
19679: GO 19699
19681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19682: LD_ADDR_VAR 0 3
19686: PUSH
19687: LD_INT 13
19689: PUSH
19690: LD_INT 14
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: ST_TO_ADDR
19697: GO 20102
19699: LD_INT 31
19701: DOUBLE
19702: EQUAL
19703: IFTRUE 19707
19705: GO 19725
19707: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19708: LD_ADDR_VAR 0 3
19712: PUSH
19713: LD_INT 13
19715: PUSH
19716: LD_INT 14
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: ST_TO_ADDR
19723: GO 20102
19725: LD_INT 26
19727: DOUBLE
19728: EQUAL
19729: IFTRUE 19733
19731: GO 19751
19733: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19734: LD_ADDR_VAR 0 3
19738: PUSH
19739: LD_INT 13
19741: PUSH
19742: LD_INT 14
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: ST_TO_ADDR
19749: GO 20102
19751: LD_INT 42
19753: DOUBLE
19754: EQUAL
19755: IFTRUE 19759
19757: GO 19785
19759: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19760: LD_ADDR_VAR 0 3
19764: PUSH
19765: LD_INT 21
19767: PUSH
19768: LD_INT 22
19770: PUSH
19771: LD_INT 23
19773: PUSH
19774: LD_INT 24
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: ST_TO_ADDR
19783: GO 20102
19785: LD_INT 43
19787: DOUBLE
19788: EQUAL
19789: IFTRUE 19793
19791: GO 19819
19793: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19794: LD_ADDR_VAR 0 3
19798: PUSH
19799: LD_INT 21
19801: PUSH
19802: LD_INT 22
19804: PUSH
19805: LD_INT 23
19807: PUSH
19808: LD_INT 24
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: ST_TO_ADDR
19817: GO 20102
19819: LD_INT 44
19821: DOUBLE
19822: EQUAL
19823: IFTRUE 19827
19825: GO 19853
19827: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19828: LD_ADDR_VAR 0 3
19832: PUSH
19833: LD_INT 21
19835: PUSH
19836: LD_INT 22
19838: PUSH
19839: LD_INT 23
19841: PUSH
19842: LD_INT 24
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: ST_TO_ADDR
19851: GO 20102
19853: LD_INT 45
19855: DOUBLE
19856: EQUAL
19857: IFTRUE 19861
19859: GO 19887
19861: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19862: LD_ADDR_VAR 0 3
19866: PUSH
19867: LD_INT 21
19869: PUSH
19870: LD_INT 22
19872: PUSH
19873: LD_INT 23
19875: PUSH
19876: LD_INT 24
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: ST_TO_ADDR
19885: GO 20102
19887: LD_INT 49
19889: DOUBLE
19890: EQUAL
19891: IFTRUE 19895
19893: GO 19921
19895: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19896: LD_ADDR_VAR 0 3
19900: PUSH
19901: LD_INT 21
19903: PUSH
19904: LD_INT 22
19906: PUSH
19907: LD_INT 23
19909: PUSH
19910: LD_INT 24
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: ST_TO_ADDR
19919: GO 20102
19921: LD_INT 51
19923: DOUBLE
19924: EQUAL
19925: IFTRUE 19929
19927: GO 19955
19929: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19930: LD_ADDR_VAR 0 3
19934: PUSH
19935: LD_INT 21
19937: PUSH
19938: LD_INT 22
19940: PUSH
19941: LD_INT 23
19943: PUSH
19944: LD_INT 24
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: ST_TO_ADDR
19953: GO 20102
19955: LD_INT 52
19957: DOUBLE
19958: EQUAL
19959: IFTRUE 19963
19961: GO 19989
19963: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19964: LD_ADDR_VAR 0 3
19968: PUSH
19969: LD_INT 21
19971: PUSH
19972: LD_INT 22
19974: PUSH
19975: LD_INT 23
19977: PUSH
19978: LD_INT 24
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: ST_TO_ADDR
19987: GO 20102
19989: LD_INT 53
19991: DOUBLE
19992: EQUAL
19993: IFTRUE 19997
19995: GO 20015
19997: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19998: LD_ADDR_VAR 0 3
20002: PUSH
20003: LD_INT 23
20005: PUSH
20006: LD_INT 24
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: ST_TO_ADDR
20013: GO 20102
20015: LD_INT 46
20017: DOUBLE
20018: EQUAL
20019: IFTRUE 20023
20021: GO 20041
20023: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20024: LD_ADDR_VAR 0 3
20028: PUSH
20029: LD_INT 23
20031: PUSH
20032: LD_INT 24
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: ST_TO_ADDR
20039: GO 20102
20041: LD_INT 47
20043: DOUBLE
20044: EQUAL
20045: IFTRUE 20049
20047: GO 20067
20049: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
20050: LD_ADDR_VAR 0 3
20054: PUSH
20055: LD_INT 23
20057: PUSH
20058: LD_INT 24
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: ST_TO_ADDR
20065: GO 20102
20067: LD_INT 98
20069: DOUBLE
20070: EQUAL
20071: IFTRUE 20075
20073: GO 20101
20075: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20076: LD_ADDR_VAR 0 3
20080: PUSH
20081: LD_INT 21
20083: PUSH
20084: LD_INT 22
20086: PUSH
20087: LD_INT 23
20089: PUSH
20090: LD_INT 24
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: ST_TO_ADDR
20099: GO 20102
20101: POP
// result := ( chassis in result ) ;
20102: LD_ADDR_VAR 0 3
20106: PUSH
20107: LD_VAR 0 1
20111: PUSH
20112: LD_VAR 0 3
20116: IN
20117: ST_TO_ADDR
// end ;
20118: LD_VAR 0 3
20122: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20123: LD_INT 0
20125: PPUSH
20126: PPUSH
20127: PPUSH
20128: PPUSH
20129: PPUSH
20130: PPUSH
20131: PPUSH
// result := array ;
20132: LD_ADDR_VAR 0 5
20136: PUSH
20137: LD_VAR 0 1
20141: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20142: LD_VAR 0 1
20146: NOT
20147: IFTRUE 20156
20149: PUSH
20150: LD_VAR 0 2
20154: NOT
20155: OR
20156: IFTRUE 20165
20158: PUSH
20159: LD_VAR 0 3
20163: NOT
20164: OR
20165: IFTRUE 20179
20167: PUSH
20168: LD_VAR 0 2
20172: PUSH
20173: LD_VAR 0 1
20177: GREATER
20178: OR
20179: IFTRUE 20193
20181: PUSH
20182: LD_VAR 0 3
20186: PUSH
20187: LD_VAR 0 1
20191: GREATER
20192: OR
20193: IFFALSE 20197
// exit ;
20195: GO 20493
// if direction then
20197: LD_VAR 0 4
20201: IFFALSE 20265
// begin d := 1 ;
20203: LD_ADDR_VAR 0 9
20207: PUSH
20208: LD_INT 1
20210: ST_TO_ADDR
// if i_from > i_to then
20211: LD_VAR 0 2
20215: PUSH
20216: LD_VAR 0 3
20220: GREATER
20221: IFFALSE 20247
// length := ( array - i_from ) + i_to else
20223: LD_ADDR_VAR 0 11
20227: PUSH
20228: LD_VAR 0 1
20232: PUSH
20233: LD_VAR 0 2
20237: MINUS
20238: PUSH
20239: LD_VAR 0 3
20243: PLUS
20244: ST_TO_ADDR
20245: GO 20263
// length := i_to - i_from ;
20247: LD_ADDR_VAR 0 11
20251: PUSH
20252: LD_VAR 0 3
20256: PUSH
20257: LD_VAR 0 2
20261: MINUS
20262: ST_TO_ADDR
// end else
20263: GO 20326
// begin d := - 1 ;
20265: LD_ADDR_VAR 0 9
20269: PUSH
20270: LD_INT 1
20272: NEG
20273: ST_TO_ADDR
// if i_from > i_to then
20274: LD_VAR 0 2
20278: PUSH
20279: LD_VAR 0 3
20283: GREATER
20284: IFFALSE 20304
// length := i_from - i_to else
20286: LD_ADDR_VAR 0 11
20290: PUSH
20291: LD_VAR 0 2
20295: PUSH
20296: LD_VAR 0 3
20300: MINUS
20301: ST_TO_ADDR
20302: GO 20326
// length := ( array - i_to ) + i_from ;
20304: LD_ADDR_VAR 0 11
20308: PUSH
20309: LD_VAR 0 1
20313: PUSH
20314: LD_VAR 0 3
20318: MINUS
20319: PUSH
20320: LD_VAR 0 2
20324: PLUS
20325: ST_TO_ADDR
// end ; if not length then
20326: LD_VAR 0 11
20330: NOT
20331: IFFALSE 20335
// exit ;
20333: GO 20493
// tmp := array ;
20335: LD_ADDR_VAR 0 10
20339: PUSH
20340: LD_VAR 0 1
20344: ST_TO_ADDR
// for i = 1 to length do
20345: LD_ADDR_VAR 0 6
20349: PUSH
20350: DOUBLE
20351: LD_INT 1
20353: DEC
20354: ST_TO_ADDR
20355: LD_VAR 0 11
20359: PUSH
20360: FOR_TO
20361: IFFALSE 20481
// begin for j = 1 to array do
20363: LD_ADDR_VAR 0 7
20367: PUSH
20368: DOUBLE
20369: LD_INT 1
20371: DEC
20372: ST_TO_ADDR
20373: LD_VAR 0 1
20377: PUSH
20378: FOR_TO
20379: IFFALSE 20467
// begin k := j + d ;
20381: LD_ADDR_VAR 0 8
20385: PUSH
20386: LD_VAR 0 7
20390: PUSH
20391: LD_VAR 0 9
20395: PLUS
20396: ST_TO_ADDR
// if k > array then
20397: LD_VAR 0 8
20401: PUSH
20402: LD_VAR 0 1
20406: GREATER
20407: IFFALSE 20417
// k := 1 ;
20409: LD_ADDR_VAR 0 8
20413: PUSH
20414: LD_INT 1
20416: ST_TO_ADDR
// if not k then
20417: LD_VAR 0 8
20421: NOT
20422: IFFALSE 20434
// k := array ;
20424: LD_ADDR_VAR 0 8
20428: PUSH
20429: LD_VAR 0 1
20433: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20434: LD_ADDR_VAR 0 10
20438: PUSH
20439: LD_VAR 0 10
20443: PPUSH
20444: LD_VAR 0 8
20448: PPUSH
20449: LD_VAR 0 1
20453: PUSH
20454: LD_VAR 0 7
20458: ARRAY
20459: PPUSH
20460: CALL_OW 1
20464: ST_TO_ADDR
// end ;
20465: GO 20378
20467: POP
20468: POP
// array := tmp ;
20469: LD_ADDR_VAR 0 1
20473: PUSH
20474: LD_VAR 0 10
20478: ST_TO_ADDR
// end ;
20479: GO 20360
20481: POP
20482: POP
// result := array ;
20483: LD_ADDR_VAR 0 5
20487: PUSH
20488: LD_VAR 0 1
20492: ST_TO_ADDR
// end ;
20493: LD_VAR 0 5
20497: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20498: LD_INT 0
20500: PPUSH
20501: PPUSH
// result := 0 ;
20502: LD_ADDR_VAR 0 3
20506: PUSH
20507: LD_INT 0
20509: ST_TO_ADDR
// if not array or not value in array then
20510: LD_VAR 0 1
20514: NOT
20515: IFTRUE 20530
20517: PUSH
20518: LD_VAR 0 2
20522: PUSH
20523: LD_VAR 0 1
20527: IN
20528: NOT
20529: OR
20530: IFFALSE 20534
// exit ;
20532: GO 20588
// for i = 1 to array do
20534: LD_ADDR_VAR 0 4
20538: PUSH
20539: DOUBLE
20540: LD_INT 1
20542: DEC
20543: ST_TO_ADDR
20544: LD_VAR 0 1
20548: PUSH
20549: FOR_TO
20550: IFFALSE 20586
// if value = array [ i ] then
20552: LD_VAR 0 2
20556: PUSH
20557: LD_VAR 0 1
20561: PUSH
20562: LD_VAR 0 4
20566: ARRAY
20567: EQUAL
20568: IFFALSE 20584
// begin result := i ;
20570: LD_ADDR_VAR 0 3
20574: PUSH
20575: LD_VAR 0 4
20579: ST_TO_ADDR
// exit ;
20580: POP
20581: POP
20582: GO 20588
// end ;
20584: GO 20549
20586: POP
20587: POP
// end ;
20588: LD_VAR 0 3
20592: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20593: LD_INT 0
20595: PPUSH
// vc_chassis := chassis ;
20596: LD_ADDR_OWVAR 37
20600: PUSH
20601: LD_VAR 0 1
20605: ST_TO_ADDR
// vc_engine := engine ;
20606: LD_ADDR_OWVAR 39
20610: PUSH
20611: LD_VAR 0 2
20615: ST_TO_ADDR
// vc_control := control ;
20616: LD_ADDR_OWVAR 38
20620: PUSH
20621: LD_VAR 0 3
20625: ST_TO_ADDR
// vc_weapon := weapon ;
20626: LD_ADDR_OWVAR 40
20630: PUSH
20631: LD_VAR 0 4
20635: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20636: LD_ADDR_OWVAR 41
20640: PUSH
20641: LD_VAR 0 5
20645: ST_TO_ADDR
// end ;
20646: LD_VAR 0 6
20650: RET
// export function WantPlant ( unit ) ; var task ; begin
20651: LD_INT 0
20653: PPUSH
20654: PPUSH
// result := false ;
20655: LD_ADDR_VAR 0 2
20659: PUSH
20660: LD_INT 0
20662: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20663: LD_ADDR_VAR 0 3
20667: PUSH
20668: LD_VAR 0 1
20672: PPUSH
20673: CALL_OW 437
20677: ST_TO_ADDR
// if task then
20678: LD_VAR 0 3
20682: IFFALSE 20710
// if task [ 1 ] [ 1 ] = p then
20684: LD_VAR 0 3
20688: PUSH
20689: LD_INT 1
20691: ARRAY
20692: PUSH
20693: LD_INT 1
20695: ARRAY
20696: PUSH
20697: LD_STRING p
20699: EQUAL
20700: IFFALSE 20710
// result := true ;
20702: LD_ADDR_VAR 0 2
20706: PUSH
20707: LD_INT 1
20709: ST_TO_ADDR
// end ;
20710: LD_VAR 0 2
20714: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20715: LD_INT 0
20717: PPUSH
20718: PPUSH
20719: PPUSH
20720: PPUSH
// if pos < 1 then
20721: LD_VAR 0 2
20725: PUSH
20726: LD_INT 1
20728: LESS
20729: IFFALSE 20733
// exit ;
20731: GO 21036
// if pos = 1 then
20733: LD_VAR 0 2
20737: PUSH
20738: LD_INT 1
20740: EQUAL
20741: IFFALSE 20774
// result := Replace ( arr , pos [ 1 ] , value ) else
20743: LD_ADDR_VAR 0 4
20747: PUSH
20748: LD_VAR 0 1
20752: PPUSH
20753: LD_VAR 0 2
20757: PUSH
20758: LD_INT 1
20760: ARRAY
20761: PPUSH
20762: LD_VAR 0 3
20766: PPUSH
20767: CALL_OW 1
20771: ST_TO_ADDR
20772: GO 21036
// begin tmp := arr ;
20774: LD_ADDR_VAR 0 6
20778: PUSH
20779: LD_VAR 0 1
20783: ST_TO_ADDR
// s_arr := [ tmp ] ;
20784: LD_ADDR_VAR 0 7
20788: PUSH
20789: LD_VAR 0 6
20793: PUSH
20794: EMPTY
20795: LIST
20796: ST_TO_ADDR
// for i = 1 to pos - 1 do
20797: LD_ADDR_VAR 0 5
20801: PUSH
20802: DOUBLE
20803: LD_INT 1
20805: DEC
20806: ST_TO_ADDR
20807: LD_VAR 0 2
20811: PUSH
20812: LD_INT 1
20814: MINUS
20815: PUSH
20816: FOR_TO
20817: IFFALSE 20862
// begin tmp := tmp [ pos [ i ] ] ;
20819: LD_ADDR_VAR 0 6
20823: PUSH
20824: LD_VAR 0 6
20828: PUSH
20829: LD_VAR 0 2
20833: PUSH
20834: LD_VAR 0 5
20838: ARRAY
20839: ARRAY
20840: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20841: LD_ADDR_VAR 0 7
20845: PUSH
20846: LD_VAR 0 7
20850: PUSH
20851: LD_VAR 0 6
20855: PUSH
20856: EMPTY
20857: LIST
20858: ADD
20859: ST_TO_ADDR
// end ;
20860: GO 20816
20862: POP
20863: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20864: LD_ADDR_VAR 0 6
20868: PUSH
20869: LD_VAR 0 6
20873: PPUSH
20874: LD_VAR 0 2
20878: PUSH
20879: LD_VAR 0 2
20883: ARRAY
20884: PPUSH
20885: LD_VAR 0 3
20889: PPUSH
20890: CALL_OW 1
20894: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20895: LD_ADDR_VAR 0 7
20899: PUSH
20900: LD_VAR 0 7
20904: PPUSH
20905: LD_VAR 0 7
20909: PPUSH
20910: LD_VAR 0 6
20914: PPUSH
20915: CALL_OW 1
20919: ST_TO_ADDR
// for i = s_arr downto 2 do
20920: LD_ADDR_VAR 0 5
20924: PUSH
20925: DOUBLE
20926: LD_VAR 0 7
20930: INC
20931: ST_TO_ADDR
20932: LD_INT 2
20934: PUSH
20935: FOR_DOWNTO
20936: IFFALSE 21020
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20938: LD_ADDR_VAR 0 6
20942: PUSH
20943: LD_VAR 0 7
20947: PUSH
20948: LD_VAR 0 5
20952: PUSH
20953: LD_INT 1
20955: MINUS
20956: ARRAY
20957: PPUSH
20958: LD_VAR 0 2
20962: PUSH
20963: LD_VAR 0 5
20967: PUSH
20968: LD_INT 1
20970: MINUS
20971: ARRAY
20972: PPUSH
20973: LD_VAR 0 7
20977: PUSH
20978: LD_VAR 0 5
20982: ARRAY
20983: PPUSH
20984: CALL_OW 1
20988: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20989: LD_ADDR_VAR 0 7
20993: PUSH
20994: LD_VAR 0 7
20998: PPUSH
20999: LD_VAR 0 5
21003: PUSH
21004: LD_INT 1
21006: MINUS
21007: PPUSH
21008: LD_VAR 0 6
21012: PPUSH
21013: CALL_OW 1
21017: ST_TO_ADDR
// end ;
21018: GO 20935
21020: POP
21021: POP
// result := s_arr [ 1 ] ;
21022: LD_ADDR_VAR 0 4
21026: PUSH
21027: LD_VAR 0 7
21031: PUSH
21032: LD_INT 1
21034: ARRAY
21035: ST_TO_ADDR
// end ; end ;
21036: LD_VAR 0 4
21040: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21041: LD_INT 0
21043: PPUSH
21044: PPUSH
// if not list then
21045: LD_VAR 0 1
21049: NOT
21050: IFFALSE 21054
// exit ;
21052: GO 21145
// i := list [ pos1 ] ;
21054: LD_ADDR_VAR 0 5
21058: PUSH
21059: LD_VAR 0 1
21063: PUSH
21064: LD_VAR 0 2
21068: ARRAY
21069: ST_TO_ADDR
// if not i then
21070: LD_VAR 0 5
21074: NOT
21075: IFFALSE 21079
// exit ;
21077: GO 21145
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21079: LD_ADDR_VAR 0 1
21083: PUSH
21084: LD_VAR 0 1
21088: PPUSH
21089: LD_VAR 0 2
21093: PPUSH
21094: LD_VAR 0 1
21098: PUSH
21099: LD_VAR 0 3
21103: ARRAY
21104: PPUSH
21105: CALL_OW 1
21109: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21110: LD_ADDR_VAR 0 1
21114: PUSH
21115: LD_VAR 0 1
21119: PPUSH
21120: LD_VAR 0 3
21124: PPUSH
21125: LD_VAR 0 5
21129: PPUSH
21130: CALL_OW 1
21134: ST_TO_ADDR
// result := list ;
21135: LD_ADDR_VAR 0 4
21139: PUSH
21140: LD_VAR 0 1
21144: ST_TO_ADDR
// end ;
21145: LD_VAR 0 4
21149: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21150: LD_INT 0
21152: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21153: LD_ADDR_VAR 0 5
21157: PUSH
21158: LD_VAR 0 1
21162: PPUSH
21163: CALL_OW 250
21167: PPUSH
21168: LD_VAR 0 1
21172: PPUSH
21173: CALL_OW 251
21177: PPUSH
21178: LD_VAR 0 2
21182: PPUSH
21183: LD_VAR 0 3
21187: PPUSH
21188: LD_VAR 0 4
21192: PPUSH
21193: CALL 21575 0 5
21197: ST_TO_ADDR
// end ;
21198: LD_VAR 0 5
21202: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21203: LD_INT 0
21205: PPUSH
21206: PPUSH
21207: PPUSH
21208: PPUSH
// if not list or not unit then
21209: LD_VAR 0 2
21213: NOT
21214: IFTRUE 21223
21216: PUSH
21217: LD_VAR 0 1
21221: NOT
21222: OR
21223: IFFALSE 21227
// exit ;
21225: GO 21570
// result := [ ] ;
21227: LD_ADDR_VAR 0 5
21231: PUSH
21232: EMPTY
21233: ST_TO_ADDR
// for i in list do
21234: LD_ADDR_VAR 0 6
21238: PUSH
21239: LD_VAR 0 2
21243: PUSH
21244: FOR_IN
21245: IFFALSE 21463
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21247: LD_ADDR_VAR 0 8
21251: PUSH
21252: LD_VAR 0 1
21256: PPUSH
21257: LD_VAR 0 6
21261: PUSH
21262: LD_INT 1
21264: ARRAY
21265: PPUSH
21266: LD_VAR 0 6
21270: PUSH
21271: LD_INT 2
21273: ARRAY
21274: PPUSH
21275: CALL_OW 297
21279: ST_TO_ADDR
// if not Count ( result ) then
21280: LD_VAR 0 5
21284: PPUSH
21285: CALL 17797 0 1
21289: NOT
21290: IFFALSE 21323
// begin result := Join ( result , [ i , tmp ] ) ;
21292: LD_ADDR_VAR 0 5
21296: PUSH
21297: LD_VAR 0 5
21301: PPUSH
21302: LD_VAR 0 6
21306: PUSH
21307: LD_VAR 0 8
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PPUSH
21316: CALL 53763 0 2
21320: ST_TO_ADDR
// continue ;
21321: GO 21244
// end ; if result [ result ] [ 2 ] <= tmp then
21323: LD_VAR 0 5
21327: PUSH
21328: LD_VAR 0 5
21332: ARRAY
21333: PUSH
21334: LD_INT 2
21336: ARRAY
21337: PUSH
21338: LD_VAR 0 8
21342: LESSEQUAL
21343: IFFALSE 21376
// result := Join ( result , [ i , tmp ] ) else
21345: LD_ADDR_VAR 0 5
21349: PUSH
21350: LD_VAR 0 5
21354: PPUSH
21355: LD_VAR 0 6
21359: PUSH
21360: LD_VAR 0 8
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PPUSH
21369: CALL 53763 0 2
21373: ST_TO_ADDR
21374: GO 21461
// begin for j := 1 to Count ( result ) do
21376: LD_ADDR_VAR 0 7
21380: PUSH
21381: DOUBLE
21382: LD_INT 1
21384: DEC
21385: ST_TO_ADDR
21386: LD_VAR 0 5
21390: PPUSH
21391: CALL 17797 0 1
21395: PUSH
21396: FOR_TO
21397: IFFALSE 21459
// begin if tmp < result [ j ] [ 2 ] then
21399: LD_VAR 0 8
21403: PUSH
21404: LD_VAR 0 5
21408: PUSH
21409: LD_VAR 0 7
21413: ARRAY
21414: PUSH
21415: LD_INT 2
21417: ARRAY
21418: LESS
21419: IFFALSE 21457
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21421: LD_ADDR_VAR 0 5
21425: PUSH
21426: LD_VAR 0 5
21430: PPUSH
21431: LD_VAR 0 7
21435: PPUSH
21436: LD_VAR 0 6
21440: PUSH
21441: LD_VAR 0 8
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PPUSH
21450: CALL_OW 2
21454: ST_TO_ADDR
// break ;
21455: GO 21459
// end ; end ;
21457: GO 21396
21459: POP
21460: POP
// end ; end ;
21461: GO 21244
21463: POP
21464: POP
// if result and not asc then
21465: LD_VAR 0 5
21469: IFFALSE 21478
21471: PUSH
21472: LD_VAR 0 3
21476: NOT
21477: AND
21478: IFFALSE 21495
// result := ReverseArray ( result ) ;
21480: LD_ADDR_VAR 0 5
21484: PUSH
21485: LD_VAR 0 5
21489: PPUSH
21490: CALL 48853 0 1
21494: ST_TO_ADDR
// tmp := [ ] ;
21495: LD_ADDR_VAR 0 8
21499: PUSH
21500: EMPTY
21501: ST_TO_ADDR
// if mode then
21502: LD_VAR 0 4
21506: IFFALSE 21570
// begin for i := 1 to result do
21508: LD_ADDR_VAR 0 6
21512: PUSH
21513: DOUBLE
21514: LD_INT 1
21516: DEC
21517: ST_TO_ADDR
21518: LD_VAR 0 5
21522: PUSH
21523: FOR_TO
21524: IFFALSE 21558
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21526: LD_ADDR_VAR 0 8
21530: PUSH
21531: LD_VAR 0 8
21535: PPUSH
21536: LD_VAR 0 5
21540: PUSH
21541: LD_VAR 0 6
21545: ARRAY
21546: PUSH
21547: LD_INT 1
21549: ARRAY
21550: PPUSH
21551: CALL 53763 0 2
21555: ST_TO_ADDR
21556: GO 21523
21558: POP
21559: POP
// result := tmp ;
21560: LD_ADDR_VAR 0 5
21564: PUSH
21565: LD_VAR 0 8
21569: ST_TO_ADDR
// end ; end ;
21570: LD_VAR 0 5
21574: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21575: LD_INT 0
21577: PPUSH
21578: PPUSH
21579: PPUSH
21580: PPUSH
// if not list then
21581: LD_VAR 0 3
21585: NOT
21586: IFFALSE 21590
// exit ;
21588: GO 21980
// result := [ ] ;
21590: LD_ADDR_VAR 0 6
21594: PUSH
21595: EMPTY
21596: ST_TO_ADDR
// for i in list do
21597: LD_ADDR_VAR 0 7
21601: PUSH
21602: LD_VAR 0 3
21606: PUSH
21607: FOR_IN
21608: IFFALSE 21810
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21610: LD_ADDR_VAR 0 9
21614: PUSH
21615: LD_VAR 0 7
21619: PPUSH
21620: LD_VAR 0 1
21624: PPUSH
21625: LD_VAR 0 2
21629: PPUSH
21630: CALL_OW 297
21634: ST_TO_ADDR
// if not result then
21635: LD_VAR 0 6
21639: NOT
21640: IFFALSE 21666
// result := [ [ i , tmp ] ] else
21642: LD_ADDR_VAR 0 6
21646: PUSH
21647: LD_VAR 0 7
21651: PUSH
21652: LD_VAR 0 9
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: EMPTY
21662: LIST
21663: ST_TO_ADDR
21664: GO 21808
// begin if result [ result ] [ 2 ] <= tmp then
21666: LD_VAR 0 6
21670: PUSH
21671: LD_VAR 0 6
21675: ARRAY
21676: PUSH
21677: LD_INT 2
21679: ARRAY
21680: PUSH
21681: LD_VAR 0 9
21685: LESSEQUAL
21686: IFFALSE 21728
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21688: LD_ADDR_VAR 0 6
21692: PUSH
21693: LD_VAR 0 6
21697: PPUSH
21698: LD_VAR 0 6
21702: PUSH
21703: LD_INT 1
21705: PLUS
21706: PPUSH
21707: LD_VAR 0 7
21711: PUSH
21712: LD_VAR 0 9
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PPUSH
21721: CALL_OW 2
21725: ST_TO_ADDR
21726: GO 21808
// for j := 1 to result do
21728: LD_ADDR_VAR 0 8
21732: PUSH
21733: DOUBLE
21734: LD_INT 1
21736: DEC
21737: ST_TO_ADDR
21738: LD_VAR 0 6
21742: PUSH
21743: FOR_TO
21744: IFFALSE 21806
// begin if tmp < result [ j ] [ 2 ] then
21746: LD_VAR 0 9
21750: PUSH
21751: LD_VAR 0 6
21755: PUSH
21756: LD_VAR 0 8
21760: ARRAY
21761: PUSH
21762: LD_INT 2
21764: ARRAY
21765: LESS
21766: IFFALSE 21804
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21768: LD_ADDR_VAR 0 6
21772: PUSH
21773: LD_VAR 0 6
21777: PPUSH
21778: LD_VAR 0 8
21782: PPUSH
21783: LD_VAR 0 7
21787: PUSH
21788: LD_VAR 0 9
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PPUSH
21797: CALL_OW 2
21801: ST_TO_ADDR
// break ;
21802: GO 21806
// end ; end ;
21804: GO 21743
21806: POP
21807: POP
// end ; end ;
21808: GO 21607
21810: POP
21811: POP
// if result and not asc then
21812: LD_VAR 0 6
21816: IFFALSE 21825
21818: PUSH
21819: LD_VAR 0 4
21823: NOT
21824: AND
21825: IFFALSE 21900
// begin tmp := result ;
21827: LD_ADDR_VAR 0 9
21831: PUSH
21832: LD_VAR 0 6
21836: ST_TO_ADDR
// for i = tmp downto 1 do
21837: LD_ADDR_VAR 0 7
21841: PUSH
21842: DOUBLE
21843: LD_VAR 0 9
21847: INC
21848: ST_TO_ADDR
21849: LD_INT 1
21851: PUSH
21852: FOR_DOWNTO
21853: IFFALSE 21898
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21855: LD_ADDR_VAR 0 6
21859: PUSH
21860: LD_VAR 0 6
21864: PPUSH
21865: LD_VAR 0 9
21869: PUSH
21870: LD_VAR 0 7
21874: MINUS
21875: PUSH
21876: LD_INT 1
21878: PLUS
21879: PPUSH
21880: LD_VAR 0 9
21884: PUSH
21885: LD_VAR 0 7
21889: ARRAY
21890: PPUSH
21891: CALL_OW 1
21895: ST_TO_ADDR
21896: GO 21852
21898: POP
21899: POP
// end ; tmp := [ ] ;
21900: LD_ADDR_VAR 0 9
21904: PUSH
21905: EMPTY
21906: ST_TO_ADDR
// if mode then
21907: LD_VAR 0 5
21911: IFFALSE 21980
// begin for i = 1 to result do
21913: LD_ADDR_VAR 0 7
21917: PUSH
21918: DOUBLE
21919: LD_INT 1
21921: DEC
21922: ST_TO_ADDR
21923: LD_VAR 0 6
21927: PUSH
21928: FOR_TO
21929: IFFALSE 21968
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21931: LD_ADDR_VAR 0 9
21935: PUSH
21936: LD_VAR 0 9
21940: PPUSH
21941: LD_VAR 0 7
21945: PPUSH
21946: LD_VAR 0 6
21950: PUSH
21951: LD_VAR 0 7
21955: ARRAY
21956: PUSH
21957: LD_INT 1
21959: ARRAY
21960: PPUSH
21961: CALL_OW 1
21965: ST_TO_ADDR
21966: GO 21928
21968: POP
21969: POP
// result := tmp ;
21970: LD_ADDR_VAR 0 6
21974: PUSH
21975: LD_VAR 0 9
21979: ST_TO_ADDR
// end ; end ;
21980: LD_VAR 0 6
21984: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21985: LD_INT 0
21987: PPUSH
21988: PPUSH
21989: PPUSH
21990: PPUSH
21991: PPUSH
21992: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21993: LD_ADDR_VAR 0 5
21997: PUSH
21998: LD_INT 0
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: LD_INT 0
22006: PUSH
22007: EMPTY
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: ST_TO_ADDR
// if not x or not y then
22015: LD_VAR 0 2
22019: NOT
22020: IFTRUE 22029
22022: PUSH
22023: LD_VAR 0 3
22027: NOT
22028: OR
22029: IFFALSE 22033
// exit ;
22031: GO 23689
// if not range then
22033: LD_VAR 0 4
22037: NOT
22038: IFFALSE 22048
// range := 10 ;
22040: LD_ADDR_VAR 0 4
22044: PUSH
22045: LD_INT 10
22047: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22048: LD_ADDR_VAR 0 8
22052: PUSH
22053: LD_INT 81
22055: PUSH
22056: LD_VAR 0 1
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 92
22067: PUSH
22068: LD_VAR 0 2
22072: PUSH
22073: LD_VAR 0 3
22077: PUSH
22078: LD_VAR 0 4
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 3
22091: PUSH
22092: LD_INT 21
22094: PUSH
22095: LD_INT 3
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: LIST
22110: PPUSH
22111: CALL_OW 69
22115: ST_TO_ADDR
// if not tmp then
22116: LD_VAR 0 8
22120: NOT
22121: IFFALSE 22125
// exit ;
22123: GO 23689
// for i in tmp do
22125: LD_ADDR_VAR 0 6
22129: PUSH
22130: LD_VAR 0 8
22134: PUSH
22135: FOR_IN
22136: IFFALSE 23664
// begin points := [ 0 , 0 , 0 ] ;
22138: LD_ADDR_VAR 0 9
22142: PUSH
22143: LD_INT 0
22145: PUSH
22146: LD_INT 0
22148: PUSH
22149: LD_INT 0
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: LIST
22156: ST_TO_ADDR
// bpoints := 1 ;
22157: LD_ADDR_VAR 0 10
22161: PUSH
22162: LD_INT 1
22164: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22165: LD_VAR 0 6
22169: PPUSH
22170: CALL_OW 247
22174: PUSH
22175: LD_INT 1
22177: DOUBLE
22178: EQUAL
22179: IFTRUE 22183
22181: GO 22765
22183: POP
// begin if GetClass ( i ) = 1 then
22184: LD_VAR 0 6
22188: PPUSH
22189: CALL_OW 257
22193: PUSH
22194: LD_INT 1
22196: EQUAL
22197: IFFALSE 22218
// points := [ 10 , 5 , 3 ] ;
22199: LD_ADDR_VAR 0 9
22203: PUSH
22204: LD_INT 10
22206: PUSH
22207: LD_INT 5
22209: PUSH
22210: LD_INT 3
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: LIST
22217: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22218: LD_VAR 0 6
22222: PPUSH
22223: CALL_OW 257
22227: PUSH
22228: LD_INT 2
22230: PUSH
22231: LD_INT 3
22233: PUSH
22234: LD_INT 4
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: LIST
22241: IN
22242: IFFALSE 22263
// points := [ 3 , 2 , 1 ] ;
22244: LD_ADDR_VAR 0 9
22248: PUSH
22249: LD_INT 3
22251: PUSH
22252: LD_INT 2
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: LIST
22262: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22263: LD_VAR 0 6
22267: PPUSH
22268: CALL_OW 257
22272: PUSH
22273: LD_INT 5
22275: EQUAL
22276: IFFALSE 22297
// points := [ 130 , 5 , 2 ] ;
22278: LD_ADDR_VAR 0 9
22282: PUSH
22283: LD_INT 130
22285: PUSH
22286: LD_INT 5
22288: PUSH
22289: LD_INT 2
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: LIST
22296: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22297: LD_VAR 0 6
22301: PPUSH
22302: CALL_OW 257
22306: PUSH
22307: LD_INT 8
22309: EQUAL
22310: IFFALSE 22331
// points := [ 35 , 35 , 30 ] ;
22312: LD_ADDR_VAR 0 9
22316: PUSH
22317: LD_INT 35
22319: PUSH
22320: LD_INT 35
22322: PUSH
22323: LD_INT 30
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: LIST
22330: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22331: LD_VAR 0 6
22335: PPUSH
22336: CALL_OW 257
22340: PUSH
22341: LD_INT 9
22343: EQUAL
22344: IFFALSE 22365
// points := [ 20 , 55 , 40 ] ;
22346: LD_ADDR_VAR 0 9
22350: PUSH
22351: LD_INT 20
22353: PUSH
22354: LD_INT 55
22356: PUSH
22357: LD_INT 40
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: LIST
22364: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22365: LD_VAR 0 6
22369: PPUSH
22370: CALL_OW 257
22374: PUSH
22375: LD_INT 12
22377: PUSH
22378: LD_INT 16
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: IN
22385: IFFALSE 22406
// points := [ 5 , 3 , 2 ] ;
22387: LD_ADDR_VAR 0 9
22391: PUSH
22392: LD_INT 5
22394: PUSH
22395: LD_INT 3
22397: PUSH
22398: LD_INT 2
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22406: LD_VAR 0 6
22410: PPUSH
22411: CALL_OW 257
22415: PUSH
22416: LD_INT 17
22418: EQUAL
22419: IFFALSE 22440
// points := [ 100 , 50 , 75 ] ;
22421: LD_ADDR_VAR 0 9
22425: PUSH
22426: LD_INT 100
22428: PUSH
22429: LD_INT 50
22431: PUSH
22432: LD_INT 75
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22440: LD_VAR 0 6
22444: PPUSH
22445: CALL_OW 257
22449: PUSH
22450: LD_INT 15
22452: EQUAL
22453: IFFALSE 22474
// points := [ 10 , 5 , 3 ] ;
22455: LD_ADDR_VAR 0 9
22459: PUSH
22460: LD_INT 10
22462: PUSH
22463: LD_INT 5
22465: PUSH
22466: LD_INT 3
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: LIST
22473: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22474: LD_VAR 0 6
22478: PPUSH
22479: CALL_OW 257
22483: PUSH
22484: LD_INT 14
22486: EQUAL
22487: IFFALSE 22508
// points := [ 10 , 0 , 0 ] ;
22489: LD_ADDR_VAR 0 9
22493: PUSH
22494: LD_INT 10
22496: PUSH
22497: LD_INT 0
22499: PUSH
22500: LD_INT 0
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: LIST
22507: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22508: LD_VAR 0 6
22512: PPUSH
22513: CALL_OW 257
22517: PUSH
22518: LD_INT 11
22520: EQUAL
22521: IFFALSE 22542
// points := [ 30 , 10 , 5 ] ;
22523: LD_ADDR_VAR 0 9
22527: PUSH
22528: LD_INT 30
22530: PUSH
22531: LD_INT 10
22533: PUSH
22534: LD_INT 5
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22542: LD_VAR 0 1
22546: PPUSH
22547: LD_INT 5
22549: PPUSH
22550: CALL_OW 321
22554: PUSH
22555: LD_INT 2
22557: EQUAL
22558: IFFALSE 22575
// bpoints := bpoints * 1.8 ;
22560: LD_ADDR_VAR 0 10
22564: PUSH
22565: LD_VAR 0 10
22569: PUSH
22570: LD_REAL  1.80000000000000E+0000
22573: MUL
22574: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22575: LD_VAR 0 6
22579: PPUSH
22580: CALL_OW 257
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: LD_INT 2
22590: PUSH
22591: LD_INT 3
22593: PUSH
22594: LD_INT 4
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: IN
22603: IFFALSE 22623
22605: PUSH
22606: LD_VAR 0 1
22610: PPUSH
22611: LD_INT 51
22613: PPUSH
22614: CALL_OW 321
22618: PUSH
22619: LD_INT 2
22621: EQUAL
22622: AND
22623: IFFALSE 22640
// bpoints := bpoints * 1.2 ;
22625: LD_ADDR_VAR 0 10
22629: PUSH
22630: LD_VAR 0 10
22634: PUSH
22635: LD_REAL  1.20000000000000E+0000
22638: MUL
22639: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22640: LD_VAR 0 6
22644: PPUSH
22645: CALL_OW 257
22649: PUSH
22650: LD_INT 5
22652: PUSH
22653: LD_INT 7
22655: PUSH
22656: LD_INT 9
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: LIST
22663: IN
22664: IFFALSE 22684
22666: PUSH
22667: LD_VAR 0 1
22671: PPUSH
22672: LD_INT 52
22674: PPUSH
22675: CALL_OW 321
22679: PUSH
22680: LD_INT 2
22682: EQUAL
22683: AND
22684: IFFALSE 22701
// bpoints := bpoints * 1.5 ;
22686: LD_ADDR_VAR 0 10
22690: PUSH
22691: LD_VAR 0 10
22695: PUSH
22696: LD_REAL  1.50000000000000E+0000
22699: MUL
22700: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22701: LD_VAR 0 1
22705: PPUSH
22706: LD_INT 66
22708: PPUSH
22709: CALL_OW 321
22713: PUSH
22714: LD_INT 2
22716: EQUAL
22717: IFFALSE 22734
// bpoints := bpoints * 1.1 ;
22719: LD_ADDR_VAR 0 10
22723: PUSH
22724: LD_VAR 0 10
22728: PUSH
22729: LD_REAL  1.10000000000000E+0000
22732: MUL
22733: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22734: LD_ADDR_VAR 0 10
22738: PUSH
22739: LD_VAR 0 10
22743: PUSH
22744: LD_VAR 0 6
22748: PPUSH
22749: LD_INT 1
22751: PPUSH
22752: CALL_OW 259
22756: PUSH
22757: LD_REAL  1.15000000000000E+0000
22760: MUL
22761: MUL
22762: ST_TO_ADDR
// end ; unit_vehicle :
22763: GO 23593
22765: LD_INT 2
22767: DOUBLE
22768: EQUAL
22769: IFTRUE 22773
22771: GO 23581
22773: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22774: LD_VAR 0 6
22778: PPUSH
22779: CALL_OW 264
22783: PUSH
22784: LD_INT 2
22786: PUSH
22787: LD_INT 42
22789: PUSH
22790: LD_INT 24
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: LIST
22797: IN
22798: IFFALSE 22819
// points := [ 25 , 5 , 3 ] ;
22800: LD_ADDR_VAR 0 9
22804: PUSH
22805: LD_INT 25
22807: PUSH
22808: LD_INT 5
22810: PUSH
22811: LD_INT 3
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22819: LD_VAR 0 6
22823: PPUSH
22824: CALL_OW 264
22828: PUSH
22829: LD_INT 4
22831: PUSH
22832: LD_INT 43
22834: PUSH
22835: LD_INT 25
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: IN
22843: IFFALSE 22864
// points := [ 40 , 15 , 5 ] ;
22845: LD_ADDR_VAR 0 9
22849: PUSH
22850: LD_INT 40
22852: PUSH
22853: LD_INT 15
22855: PUSH
22856: LD_INT 5
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22864: LD_VAR 0 6
22868: PPUSH
22869: CALL_OW 264
22873: PUSH
22874: LD_INT 3
22876: PUSH
22877: LD_INT 23
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: IN
22884: IFFALSE 22905
// points := [ 7 , 25 , 8 ] ;
22886: LD_ADDR_VAR 0 9
22890: PUSH
22891: LD_INT 7
22893: PUSH
22894: LD_INT 25
22896: PUSH
22897: LD_INT 8
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22905: LD_VAR 0 6
22909: PPUSH
22910: CALL_OW 264
22914: PUSH
22915: LD_INT 5
22917: PUSH
22918: LD_INT 27
22920: PUSH
22921: LD_INT 44
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: LIST
22928: IN
22929: IFFALSE 22950
// points := [ 14 , 50 , 16 ] ;
22931: LD_ADDR_VAR 0 9
22935: PUSH
22936: LD_INT 14
22938: PUSH
22939: LD_INT 50
22941: PUSH
22942: LD_INT 16
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22950: LD_VAR 0 6
22954: PPUSH
22955: CALL_OW 264
22959: PUSH
22960: LD_INT 6
22962: PUSH
22963: LD_INT 46
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: IN
22970: IFFALSE 22991
// points := [ 32 , 120 , 70 ] ;
22972: LD_ADDR_VAR 0 9
22976: PUSH
22977: LD_INT 32
22979: PUSH
22980: LD_INT 120
22982: PUSH
22983: LD_INT 70
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: LIST
22990: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22991: LD_VAR 0 6
22995: PPUSH
22996: CALL_OW 264
23000: PUSH
23001: LD_INT 7
23003: PUSH
23004: LD_INT 28
23006: PUSH
23007: LD_INT 45
23009: PUSH
23010: LD_INT 92
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: IN
23019: IFFALSE 23040
// points := [ 35 , 20 , 45 ] ;
23021: LD_ADDR_VAR 0 9
23025: PUSH
23026: LD_INT 35
23028: PUSH
23029: LD_INT 20
23031: PUSH
23032: LD_INT 45
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23040: LD_VAR 0 6
23044: PPUSH
23045: CALL_OW 264
23049: PUSH
23050: LD_INT 47
23052: PUSH
23053: EMPTY
23054: LIST
23055: IN
23056: IFFALSE 23077
// points := [ 67 , 45 , 75 ] ;
23058: LD_ADDR_VAR 0 9
23062: PUSH
23063: LD_INT 67
23065: PUSH
23066: LD_INT 45
23068: PUSH
23069: LD_INT 75
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: LIST
23076: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23077: LD_VAR 0 6
23081: PPUSH
23082: CALL_OW 264
23086: PUSH
23087: LD_INT 26
23089: PUSH
23090: EMPTY
23091: LIST
23092: IN
23093: IFFALSE 23114
// points := [ 120 , 30 , 80 ] ;
23095: LD_ADDR_VAR 0 9
23099: PUSH
23100: LD_INT 120
23102: PUSH
23103: LD_INT 30
23105: PUSH
23106: LD_INT 80
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: LIST
23113: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23114: LD_VAR 0 6
23118: PPUSH
23119: CALL_OW 264
23123: PUSH
23124: LD_INT 22
23126: PUSH
23127: EMPTY
23128: LIST
23129: IN
23130: IFFALSE 23151
// points := [ 40 , 1 , 1 ] ;
23132: LD_ADDR_VAR 0 9
23136: PUSH
23137: LD_INT 40
23139: PUSH
23140: LD_INT 1
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: LIST
23150: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23151: LD_VAR 0 6
23155: PPUSH
23156: CALL_OW 264
23160: PUSH
23161: LD_INT 29
23163: PUSH
23164: EMPTY
23165: LIST
23166: IN
23167: IFFALSE 23188
// points := [ 70 , 200 , 400 ] ;
23169: LD_ADDR_VAR 0 9
23173: PUSH
23174: LD_INT 70
23176: PUSH
23177: LD_INT 200
23179: PUSH
23180: LD_INT 400
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: LIST
23187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23188: LD_VAR 0 6
23192: PPUSH
23193: CALL_OW 264
23197: PUSH
23198: LD_INT 14
23200: PUSH
23201: LD_INT 53
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: IN
23208: IFFALSE 23229
// points := [ 40 , 10 , 20 ] ;
23210: LD_ADDR_VAR 0 9
23214: PUSH
23215: LD_INT 40
23217: PUSH
23218: LD_INT 10
23220: PUSH
23221: LD_INT 20
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: LIST
23228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23229: LD_VAR 0 6
23233: PPUSH
23234: CALL_OW 264
23238: PUSH
23239: LD_INT 9
23241: PUSH
23242: EMPTY
23243: LIST
23244: IN
23245: IFFALSE 23266
// points := [ 5 , 70 , 20 ] ;
23247: LD_ADDR_VAR 0 9
23251: PUSH
23252: LD_INT 5
23254: PUSH
23255: LD_INT 70
23257: PUSH
23258: LD_INT 20
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: LIST
23265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23266: LD_VAR 0 6
23270: PPUSH
23271: CALL_OW 264
23275: PUSH
23276: LD_INT 10
23278: PUSH
23279: EMPTY
23280: LIST
23281: IN
23282: IFFALSE 23303
// points := [ 35 , 110 , 70 ] ;
23284: LD_ADDR_VAR 0 9
23288: PUSH
23289: LD_INT 35
23291: PUSH
23292: LD_INT 110
23294: PUSH
23295: LD_INT 70
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: LIST
23302: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23303: LD_VAR 0 6
23307: PPUSH
23308: CALL_OW 265
23312: PUSH
23313: LD_INT 25
23315: EQUAL
23316: IFFALSE 23337
// points := [ 80 , 65 , 100 ] ;
23318: LD_ADDR_VAR 0 9
23322: PUSH
23323: LD_INT 80
23325: PUSH
23326: LD_INT 65
23328: PUSH
23329: LD_INT 100
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: LIST
23336: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23337: LD_VAR 0 6
23341: PPUSH
23342: CALL_OW 263
23346: PUSH
23347: LD_INT 1
23349: EQUAL
23350: IFFALSE 23385
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23352: LD_ADDR_VAR 0 10
23356: PUSH
23357: LD_VAR 0 10
23361: PUSH
23362: LD_VAR 0 6
23366: PPUSH
23367: CALL_OW 311
23371: PPUSH
23372: LD_INT 3
23374: PPUSH
23375: CALL_OW 259
23379: PUSH
23380: LD_INT 4
23382: MUL
23383: MUL
23384: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23385: LD_VAR 0 6
23389: PPUSH
23390: CALL_OW 263
23394: PUSH
23395: LD_INT 2
23397: EQUAL
23398: IFFALSE 23449
// begin j := IsControledBy ( i ) ;
23400: LD_ADDR_VAR 0 7
23404: PUSH
23405: LD_VAR 0 6
23409: PPUSH
23410: CALL_OW 312
23414: ST_TO_ADDR
// if j then
23415: LD_VAR 0 7
23419: IFFALSE 23449
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23421: LD_ADDR_VAR 0 10
23425: PUSH
23426: LD_VAR 0 10
23430: PUSH
23431: LD_VAR 0 7
23435: PPUSH
23436: LD_INT 3
23438: PPUSH
23439: CALL_OW 259
23443: PUSH
23444: LD_INT 3
23446: MUL
23447: MUL
23448: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23449: LD_VAR 0 6
23453: PPUSH
23454: CALL_OW 264
23458: PUSH
23459: LD_INT 5
23461: PUSH
23462: LD_INT 6
23464: PUSH
23465: LD_INT 46
23467: PUSH
23468: LD_INT 44
23470: PUSH
23471: LD_INT 47
23473: PUSH
23474: LD_INT 45
23476: PUSH
23477: LD_INT 28
23479: PUSH
23480: LD_INT 7
23482: PUSH
23483: LD_INT 27
23485: PUSH
23486: LD_INT 29
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: IN
23501: IFFALSE 23521
23503: PUSH
23504: LD_VAR 0 1
23508: PPUSH
23509: LD_INT 52
23511: PPUSH
23512: CALL_OW 321
23516: PUSH
23517: LD_INT 2
23519: EQUAL
23520: AND
23521: IFFALSE 23538
// bpoints := bpoints * 1.2 ;
23523: LD_ADDR_VAR 0 10
23527: PUSH
23528: LD_VAR 0 10
23532: PUSH
23533: LD_REAL  1.20000000000000E+0000
23536: MUL
23537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23538: LD_VAR 0 6
23542: PPUSH
23543: CALL_OW 264
23547: PUSH
23548: LD_INT 6
23550: PUSH
23551: LD_INT 46
23553: PUSH
23554: LD_INT 47
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: LIST
23561: IN
23562: IFFALSE 23579
// bpoints := bpoints * 1.2 ;
23564: LD_ADDR_VAR 0 10
23568: PUSH
23569: LD_VAR 0 10
23573: PUSH
23574: LD_REAL  1.20000000000000E+0000
23577: MUL
23578: ST_TO_ADDR
// end ; unit_building :
23579: GO 23593
23581: LD_INT 3
23583: DOUBLE
23584: EQUAL
23585: IFTRUE 23589
23587: GO 23592
23589: POP
// ; end ;
23590: GO 23593
23592: POP
// for j = 1 to 3 do
23593: LD_ADDR_VAR 0 7
23597: PUSH
23598: DOUBLE
23599: LD_INT 1
23601: DEC
23602: ST_TO_ADDR
23603: LD_INT 3
23605: PUSH
23606: FOR_TO
23607: IFFALSE 23660
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23609: LD_ADDR_VAR 0 5
23613: PUSH
23614: LD_VAR 0 5
23618: PPUSH
23619: LD_VAR 0 7
23623: PPUSH
23624: LD_VAR 0 5
23628: PUSH
23629: LD_VAR 0 7
23633: ARRAY
23634: PUSH
23635: LD_VAR 0 9
23639: PUSH
23640: LD_VAR 0 7
23644: ARRAY
23645: PUSH
23646: LD_VAR 0 10
23650: MUL
23651: PLUS
23652: PPUSH
23653: CALL_OW 1
23657: ST_TO_ADDR
23658: GO 23606
23660: POP
23661: POP
// end ;
23662: GO 22135
23664: POP
23665: POP
// result := Replace ( result , 4 , tmp ) ;
23666: LD_ADDR_VAR 0 5
23670: PUSH
23671: LD_VAR 0 5
23675: PPUSH
23676: LD_INT 4
23678: PPUSH
23679: LD_VAR 0 8
23683: PPUSH
23684: CALL_OW 1
23688: ST_TO_ADDR
// end ;
23689: LD_VAR 0 5
23693: RET
// export function DangerAtRange ( unit , range ) ; begin
23694: LD_INT 0
23696: PPUSH
// if not unit then
23697: LD_VAR 0 1
23701: NOT
23702: IFFALSE 23706
// exit ;
23704: GO 23751
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23706: LD_ADDR_VAR 0 3
23710: PUSH
23711: LD_VAR 0 1
23715: PPUSH
23716: CALL_OW 255
23720: PPUSH
23721: LD_VAR 0 1
23725: PPUSH
23726: CALL_OW 250
23730: PPUSH
23731: LD_VAR 0 1
23735: PPUSH
23736: CALL_OW 251
23740: PPUSH
23741: LD_VAR 0 2
23745: PPUSH
23746: CALL 21985 0 4
23750: ST_TO_ADDR
// end ;
23751: LD_VAR 0 3
23755: RET
// export function DangerInArea ( side , area ) ; begin
23756: LD_INT 0
23758: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23759: LD_ADDR_VAR 0 3
23763: PUSH
23764: LD_VAR 0 2
23768: PPUSH
23769: LD_INT 81
23771: PUSH
23772: LD_VAR 0 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PPUSH
23781: CALL_OW 70
23785: ST_TO_ADDR
// end ;
23786: LD_VAR 0 3
23790: RET
// export function IsExtension ( b ) ; begin
23791: LD_INT 0
23793: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23794: LD_ADDR_VAR 0 2
23798: PUSH
23799: LD_VAR 0 1
23803: PUSH
23804: LD_INT 23
23806: PUSH
23807: LD_INT 20
23809: PUSH
23810: LD_INT 22
23812: PUSH
23813: LD_INT 17
23815: PUSH
23816: LD_INT 24
23818: PUSH
23819: LD_INT 21
23821: PUSH
23822: LD_INT 19
23824: PUSH
23825: LD_INT 16
23827: PUSH
23828: LD_INT 25
23830: PUSH
23831: LD_INT 18
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: IN
23846: ST_TO_ADDR
// end ;
23847: LD_VAR 0 2
23851: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23852: LD_INT 0
23854: PPUSH
23855: PPUSH
23856: PPUSH
// result := [ ] ;
23857: LD_ADDR_VAR 0 4
23861: PUSH
23862: EMPTY
23863: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23864: LD_ADDR_VAR 0 5
23868: PUSH
23869: LD_VAR 0 2
23873: PPUSH
23874: LD_INT 21
23876: PUSH
23877: LD_INT 3
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PPUSH
23884: CALL_OW 70
23888: ST_TO_ADDR
// if not tmp then
23889: LD_VAR 0 5
23893: NOT
23894: IFFALSE 23898
// exit ;
23896: GO 23962
// if checkLink then
23898: LD_VAR 0 3
23902: IFFALSE 23952
// begin for i in tmp do
23904: LD_ADDR_VAR 0 6
23908: PUSH
23909: LD_VAR 0 5
23913: PUSH
23914: FOR_IN
23915: IFFALSE 23950
// if GetBase ( i ) <> base then
23917: LD_VAR 0 6
23921: PPUSH
23922: CALL_OW 274
23926: PUSH
23927: LD_VAR 0 1
23931: NONEQUAL
23932: IFFALSE 23948
// ComLinkToBase ( base , i ) ;
23934: LD_VAR 0 1
23938: PPUSH
23939: LD_VAR 0 6
23943: PPUSH
23944: CALL_OW 169
23948: GO 23914
23950: POP
23951: POP
// end ; result := tmp ;
23952: LD_ADDR_VAR 0 4
23956: PUSH
23957: LD_VAR 0 5
23961: ST_TO_ADDR
// end ;
23962: LD_VAR 0 4
23966: RET
// export function ComComplete ( units , b ) ; var i ; begin
23967: LD_INT 0
23969: PPUSH
23970: PPUSH
// if not units then
23971: LD_VAR 0 1
23975: NOT
23976: IFFALSE 23980
// exit ;
23978: GO 24070
// for i in units do
23980: LD_ADDR_VAR 0 4
23984: PUSH
23985: LD_VAR 0 1
23989: PUSH
23990: FOR_IN
23991: IFFALSE 24068
// if BuildingStatus ( b ) = bs_build then
23993: LD_VAR 0 2
23997: PPUSH
23998: CALL_OW 461
24002: PUSH
24003: LD_INT 1
24005: EQUAL
24006: IFFALSE 24066
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24008: LD_VAR 0 4
24012: PPUSH
24013: LD_STRING h
24015: PUSH
24016: LD_VAR 0 2
24020: PPUSH
24021: CALL_OW 250
24025: PUSH
24026: LD_VAR 0 2
24030: PPUSH
24031: CALL_OW 251
24035: PUSH
24036: LD_VAR 0 2
24040: PUSH
24041: LD_INT 0
24043: PUSH
24044: LD_INT 0
24046: PUSH
24047: LD_INT 0
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: PUSH
24059: EMPTY
24060: LIST
24061: PPUSH
24062: CALL_OW 446
24066: GO 23990
24068: POP
24069: POP
// end ;
24070: LD_VAR 0 3
24074: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24075: LD_INT 0
24077: PPUSH
24078: PPUSH
24079: PPUSH
24080: PPUSH
24081: PPUSH
24082: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24083: LD_VAR 0 1
24087: NOT
24088: IFTRUE 24105
24090: PUSH
24091: LD_VAR 0 1
24095: PPUSH
24096: CALL_OW 263
24100: PUSH
24101: LD_INT 2
24103: NONEQUAL
24104: OR
24105: IFFALSE 24109
// exit ;
24107: GO 24425
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24109: LD_ADDR_VAR 0 6
24113: PUSH
24114: LD_INT 22
24116: PUSH
24117: LD_VAR 0 1
24121: PPUSH
24122: CALL_OW 255
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 2
24133: PUSH
24134: LD_INT 30
24136: PUSH
24137: LD_INT 36
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 34
24146: PUSH
24147: LD_INT 31
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: LIST
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PPUSH
24163: CALL_OW 69
24167: ST_TO_ADDR
// if not tmp then
24168: LD_VAR 0 6
24172: NOT
24173: IFFALSE 24177
// exit ;
24175: GO 24425
// result := [ ] ;
24177: LD_ADDR_VAR 0 2
24181: PUSH
24182: EMPTY
24183: ST_TO_ADDR
// for i in tmp do
24184: LD_ADDR_VAR 0 3
24188: PUSH
24189: LD_VAR 0 6
24193: PUSH
24194: FOR_IN
24195: IFFALSE 24266
// begin t := UnitsInside ( i ) ;
24197: LD_ADDR_VAR 0 4
24201: PUSH
24202: LD_VAR 0 3
24206: PPUSH
24207: CALL_OW 313
24211: ST_TO_ADDR
// if t then
24212: LD_VAR 0 4
24216: IFFALSE 24264
// for j in t do
24218: LD_ADDR_VAR 0 7
24222: PUSH
24223: LD_VAR 0 4
24227: PUSH
24228: FOR_IN
24229: IFFALSE 24262
// result := Replace ( result , result + 1 , j ) ;
24231: LD_ADDR_VAR 0 2
24235: PUSH
24236: LD_VAR 0 2
24240: PPUSH
24241: LD_VAR 0 2
24245: PUSH
24246: LD_INT 1
24248: PLUS
24249: PPUSH
24250: LD_VAR 0 7
24254: PPUSH
24255: CALL_OW 1
24259: ST_TO_ADDR
24260: GO 24228
24262: POP
24263: POP
// end ;
24264: GO 24194
24266: POP
24267: POP
// if not result then
24268: LD_VAR 0 2
24272: NOT
24273: IFFALSE 24277
// exit ;
24275: GO 24425
// mech := result [ 1 ] ;
24277: LD_ADDR_VAR 0 5
24281: PUSH
24282: LD_VAR 0 2
24286: PUSH
24287: LD_INT 1
24289: ARRAY
24290: ST_TO_ADDR
// if result > 1 then
24291: LD_VAR 0 2
24295: PUSH
24296: LD_INT 1
24298: GREATER
24299: IFFALSE 24411
// begin for i = 2 to result do
24301: LD_ADDR_VAR 0 3
24305: PUSH
24306: DOUBLE
24307: LD_INT 2
24309: DEC
24310: ST_TO_ADDR
24311: LD_VAR 0 2
24315: PUSH
24316: FOR_TO
24317: IFFALSE 24409
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24319: LD_ADDR_VAR 0 4
24323: PUSH
24324: LD_VAR 0 2
24328: PUSH
24329: LD_VAR 0 3
24333: ARRAY
24334: PPUSH
24335: LD_INT 3
24337: PPUSH
24338: CALL_OW 259
24342: PUSH
24343: LD_VAR 0 2
24347: PUSH
24348: LD_VAR 0 3
24352: ARRAY
24353: PPUSH
24354: CALL_OW 432
24358: MINUS
24359: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24360: LD_VAR 0 4
24364: PUSH
24365: LD_VAR 0 5
24369: PPUSH
24370: LD_INT 3
24372: PPUSH
24373: CALL_OW 259
24377: PUSH
24378: LD_VAR 0 5
24382: PPUSH
24383: CALL_OW 432
24387: MINUS
24388: GREATEREQUAL
24389: IFFALSE 24407
// mech := result [ i ] ;
24391: LD_ADDR_VAR 0 5
24395: PUSH
24396: LD_VAR 0 2
24400: PUSH
24401: LD_VAR 0 3
24405: ARRAY
24406: ST_TO_ADDR
// end ;
24407: GO 24316
24409: POP
24410: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24411: LD_VAR 0 1
24415: PPUSH
24416: LD_VAR 0 5
24420: PPUSH
24421: CALL_OW 135
// end ;
24425: LD_VAR 0 2
24429: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24430: LD_INT 0
24432: PPUSH
24433: PPUSH
24434: PPUSH
24435: PPUSH
24436: PPUSH
24437: PPUSH
24438: PPUSH
24439: PPUSH
24440: PPUSH
24441: PPUSH
24442: PPUSH
24443: PPUSH
24444: PPUSH
// result := [ ] ;
24445: LD_ADDR_VAR 0 7
24449: PUSH
24450: EMPTY
24451: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24452: LD_VAR 0 1
24456: PPUSH
24457: CALL_OW 266
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: LD_INT 1
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: IN
24472: NOT
24473: IFFALSE 24477
// exit ;
24475: GO 26117
// if name then
24477: LD_VAR 0 3
24481: IFFALSE 24497
// SetBName ( base_dep , name ) ;
24483: LD_VAR 0 1
24487: PPUSH
24488: LD_VAR 0 3
24492: PPUSH
24493: CALL_OW 500
// base := GetBase ( base_dep ) ;
24497: LD_ADDR_VAR 0 15
24501: PUSH
24502: LD_VAR 0 1
24506: PPUSH
24507: CALL_OW 274
24511: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24512: LD_ADDR_VAR 0 16
24516: PUSH
24517: LD_VAR 0 1
24521: PPUSH
24522: CALL_OW 255
24526: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24527: LD_ADDR_VAR 0 17
24531: PUSH
24532: LD_VAR 0 1
24536: PPUSH
24537: CALL_OW 248
24541: ST_TO_ADDR
// if sources then
24542: LD_VAR 0 5
24546: IFFALSE 24593
// for i = 1 to 3 do
24548: LD_ADDR_VAR 0 8
24552: PUSH
24553: DOUBLE
24554: LD_INT 1
24556: DEC
24557: ST_TO_ADDR
24558: LD_INT 3
24560: PUSH
24561: FOR_TO
24562: IFFALSE 24591
// AddResourceType ( base , i , sources [ i ] ) ;
24564: LD_VAR 0 15
24568: PPUSH
24569: LD_VAR 0 8
24573: PPUSH
24574: LD_VAR 0 5
24578: PUSH
24579: LD_VAR 0 8
24583: ARRAY
24584: PPUSH
24585: CALL_OW 276
24589: GO 24561
24591: POP
24592: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24593: LD_ADDR_VAR 0 18
24597: PUSH
24598: LD_VAR 0 15
24602: PPUSH
24603: LD_VAR 0 2
24607: PPUSH
24608: LD_INT 1
24610: PPUSH
24611: CALL 23852 0 3
24615: ST_TO_ADDR
// InitHc ;
24616: CALL_OW 19
// InitUc ;
24620: CALL_OW 18
// uc_side := side ;
24624: LD_ADDR_OWVAR 20
24628: PUSH
24629: LD_VAR 0 16
24633: ST_TO_ADDR
// uc_nation := nation ;
24634: LD_ADDR_OWVAR 21
24638: PUSH
24639: LD_VAR 0 17
24643: ST_TO_ADDR
// if buildings then
24644: LD_VAR 0 18
24648: IFFALSE 25976
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24650: LD_ADDR_VAR 0 19
24654: PUSH
24655: LD_VAR 0 18
24659: PPUSH
24660: LD_INT 2
24662: PUSH
24663: LD_INT 30
24665: PUSH
24666: LD_INT 29
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 30
24675: PUSH
24676: LD_INT 30
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: LIST
24687: PPUSH
24688: CALL_OW 72
24692: ST_TO_ADDR
// if tmp then
24693: LD_VAR 0 19
24697: IFFALSE 24745
// for i in tmp do
24699: LD_ADDR_VAR 0 8
24703: PUSH
24704: LD_VAR 0 19
24708: PUSH
24709: FOR_IN
24710: IFFALSE 24743
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24712: LD_VAR 0 8
24716: PPUSH
24717: CALL_OW 250
24721: PPUSH
24722: LD_VAR 0 8
24726: PPUSH
24727: CALL_OW 251
24731: PPUSH
24732: LD_VAR 0 16
24736: PPUSH
24737: CALL_OW 441
24741: GO 24709
24743: POP
24744: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24745: LD_VAR 0 18
24749: PPUSH
24750: LD_INT 2
24752: PUSH
24753: LD_INT 30
24755: PUSH
24756: LD_INT 32
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 30
24765: PUSH
24766: LD_INT 33
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: LIST
24777: PPUSH
24778: CALL_OW 72
24782: IFFALSE 24870
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24784: LD_ADDR_VAR 0 8
24788: PUSH
24789: LD_VAR 0 18
24793: PPUSH
24794: LD_INT 2
24796: PUSH
24797: LD_INT 30
24799: PUSH
24800: LD_INT 32
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 30
24809: PUSH
24810: LD_INT 33
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: LIST
24821: PPUSH
24822: CALL_OW 72
24826: PUSH
24827: FOR_IN
24828: IFFALSE 24868
// begin if not GetBWeapon ( i ) then
24830: LD_VAR 0 8
24834: PPUSH
24835: CALL_OW 269
24839: NOT
24840: IFFALSE 24866
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24842: LD_VAR 0 8
24846: PPUSH
24847: LD_VAR 0 8
24851: PPUSH
24852: LD_VAR 0 2
24856: PPUSH
24857: CALL 26122 0 2
24861: PPUSH
24862: CALL_OW 431
// end ;
24866: GO 24827
24868: POP
24869: POP
// end ; for i = 1 to personel do
24870: LD_ADDR_VAR 0 8
24874: PUSH
24875: DOUBLE
24876: LD_INT 1
24878: DEC
24879: ST_TO_ADDR
24880: LD_VAR 0 6
24884: PUSH
24885: FOR_TO
24886: IFFALSE 25956
// begin if i > 4 then
24888: LD_VAR 0 8
24892: PUSH
24893: LD_INT 4
24895: GREATER
24896: IFFALSE 24900
// break ;
24898: GO 25956
// case i of 1 :
24900: LD_VAR 0 8
24904: PUSH
24905: LD_INT 1
24907: DOUBLE
24908: EQUAL
24909: IFTRUE 24913
24911: GO 24993
24913: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24914: LD_ADDR_VAR 0 12
24918: PUSH
24919: LD_VAR 0 18
24923: PPUSH
24924: LD_INT 22
24926: PUSH
24927: LD_VAR 0 16
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 58
24938: PUSH
24939: EMPTY
24940: LIST
24941: PUSH
24942: LD_INT 2
24944: PUSH
24945: LD_INT 30
24947: PUSH
24948: LD_INT 32
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 30
24957: PUSH
24958: LD_INT 4
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 30
24967: PUSH
24968: LD_INT 5
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: LIST
24985: PPUSH
24986: CALL_OW 72
24990: ST_TO_ADDR
24991: GO 25215
24993: LD_INT 2
24995: DOUBLE
24996: EQUAL
24997: IFTRUE 25001
24999: GO 25063
25001: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25002: LD_ADDR_VAR 0 12
25006: PUSH
25007: LD_VAR 0 18
25011: PPUSH
25012: LD_INT 22
25014: PUSH
25015: LD_VAR 0 16
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 2
25026: PUSH
25027: LD_INT 30
25029: PUSH
25030: LD_INT 0
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 30
25039: PUSH
25040: LD_INT 1
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: LIST
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PPUSH
25056: CALL_OW 72
25060: ST_TO_ADDR
25061: GO 25215
25063: LD_INT 3
25065: DOUBLE
25066: EQUAL
25067: IFTRUE 25071
25069: GO 25133
25071: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25072: LD_ADDR_VAR 0 12
25076: PUSH
25077: LD_VAR 0 18
25081: PPUSH
25082: LD_INT 22
25084: PUSH
25085: LD_VAR 0 16
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 2
25096: PUSH
25097: LD_INT 30
25099: PUSH
25100: LD_INT 2
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 30
25109: PUSH
25110: LD_INT 3
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PPUSH
25126: CALL_OW 72
25130: ST_TO_ADDR
25131: GO 25215
25133: LD_INT 4
25135: DOUBLE
25136: EQUAL
25137: IFTRUE 25141
25139: GO 25214
25141: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25142: LD_ADDR_VAR 0 12
25146: PUSH
25147: LD_VAR 0 18
25151: PPUSH
25152: LD_INT 22
25154: PUSH
25155: LD_VAR 0 16
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 2
25166: PUSH
25167: LD_INT 30
25169: PUSH
25170: LD_INT 6
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 30
25179: PUSH
25180: LD_INT 7
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 30
25189: PUSH
25190: LD_INT 8
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PPUSH
25207: CALL_OW 72
25211: ST_TO_ADDR
25212: GO 25215
25214: POP
// if i = 1 then
25215: LD_VAR 0 8
25219: PUSH
25220: LD_INT 1
25222: EQUAL
25223: IFFALSE 25334
// begin tmp := [ ] ;
25225: LD_ADDR_VAR 0 19
25229: PUSH
25230: EMPTY
25231: ST_TO_ADDR
// for j in f do
25232: LD_ADDR_VAR 0 9
25236: PUSH
25237: LD_VAR 0 12
25241: PUSH
25242: FOR_IN
25243: IFFALSE 25316
// if GetBType ( j ) = b_bunker then
25245: LD_VAR 0 9
25249: PPUSH
25250: CALL_OW 266
25254: PUSH
25255: LD_INT 32
25257: EQUAL
25258: IFFALSE 25285
// tmp := Insert ( tmp , 1 , j ) else
25260: LD_ADDR_VAR 0 19
25264: PUSH
25265: LD_VAR 0 19
25269: PPUSH
25270: LD_INT 1
25272: PPUSH
25273: LD_VAR 0 9
25277: PPUSH
25278: CALL_OW 2
25282: ST_TO_ADDR
25283: GO 25314
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25285: LD_ADDR_VAR 0 19
25289: PUSH
25290: LD_VAR 0 19
25294: PPUSH
25295: LD_VAR 0 19
25299: PUSH
25300: LD_INT 1
25302: PLUS
25303: PPUSH
25304: LD_VAR 0 9
25308: PPUSH
25309: CALL_OW 2
25313: ST_TO_ADDR
25314: GO 25242
25316: POP
25317: POP
// if tmp then
25318: LD_VAR 0 19
25322: IFFALSE 25334
// f := tmp ;
25324: LD_ADDR_VAR 0 12
25328: PUSH
25329: LD_VAR 0 19
25333: ST_TO_ADDR
// end ; x := personel [ i ] ;
25334: LD_ADDR_VAR 0 13
25338: PUSH
25339: LD_VAR 0 6
25343: PUSH
25344: LD_VAR 0 8
25348: ARRAY
25349: ST_TO_ADDR
// if x = - 1 then
25350: LD_VAR 0 13
25354: PUSH
25355: LD_INT 1
25357: NEG
25358: EQUAL
25359: IFFALSE 25570
// begin for j in f do
25361: LD_ADDR_VAR 0 9
25365: PUSH
25366: LD_VAR 0 12
25370: PUSH
25371: FOR_IN
25372: IFFALSE 25566
// repeat InitHc ;
25374: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25378: LD_VAR 0 9
25382: PPUSH
25383: CALL_OW 266
25387: PUSH
25388: LD_INT 5
25390: EQUAL
25391: IFFALSE 25461
// begin if UnitsInside ( j ) < 3 then
25393: LD_VAR 0 9
25397: PPUSH
25398: CALL_OW 313
25402: PUSH
25403: LD_INT 3
25405: LESS
25406: IFFALSE 25442
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25408: LD_INT 0
25410: PPUSH
25411: LD_INT 5
25413: PUSH
25414: LD_INT 8
25416: PUSH
25417: LD_INT 9
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: LIST
25424: PUSH
25425: LD_VAR 0 17
25429: ARRAY
25430: PPUSH
25431: LD_VAR 0 4
25435: PPUSH
25436: CALL_OW 380
25440: GO 25459
// PrepareHuman ( false , i , skill ) ;
25442: LD_INT 0
25444: PPUSH
25445: LD_VAR 0 8
25449: PPUSH
25450: LD_VAR 0 4
25454: PPUSH
25455: CALL_OW 380
// end else
25459: GO 25478
// PrepareHuman ( false , i , skill ) ;
25461: LD_INT 0
25463: PPUSH
25464: LD_VAR 0 8
25468: PPUSH
25469: LD_VAR 0 4
25473: PPUSH
25474: CALL_OW 380
// un := CreateHuman ;
25478: LD_ADDR_VAR 0 14
25482: PUSH
25483: CALL_OW 44
25487: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25488: LD_ADDR_VAR 0 7
25492: PUSH
25493: LD_VAR 0 7
25497: PPUSH
25498: LD_INT 1
25500: PPUSH
25501: LD_VAR 0 14
25505: PPUSH
25506: CALL_OW 2
25510: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25511: LD_VAR 0 14
25515: PPUSH
25516: LD_VAR 0 9
25520: PPUSH
25521: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25525: LD_VAR 0 9
25529: PPUSH
25530: CALL_OW 313
25534: PUSH
25535: LD_INT 6
25537: EQUAL
25538: IFTRUE 25562
25540: PUSH
25541: LD_VAR 0 9
25545: PPUSH
25546: CALL_OW 266
25550: PUSH
25551: LD_INT 32
25553: PUSH
25554: LD_INT 31
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: IN
25561: OR
25562: IFFALSE 25374
25564: GO 25371
25566: POP
25567: POP
// end else
25568: GO 25954
// for j = 1 to x do
25570: LD_ADDR_VAR 0 9
25574: PUSH
25575: DOUBLE
25576: LD_INT 1
25578: DEC
25579: ST_TO_ADDR
25580: LD_VAR 0 13
25584: PUSH
25585: FOR_TO
25586: IFFALSE 25952
// begin InitHc ;
25588: CALL_OW 19
// if not f then
25592: LD_VAR 0 12
25596: NOT
25597: IFFALSE 25686
// begin PrepareHuman ( false , i , skill ) ;
25599: LD_INT 0
25601: PPUSH
25602: LD_VAR 0 8
25606: PPUSH
25607: LD_VAR 0 4
25611: PPUSH
25612: CALL_OW 380
// un := CreateHuman ;
25616: LD_ADDR_VAR 0 14
25620: PUSH
25621: CALL_OW 44
25625: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25626: LD_ADDR_VAR 0 7
25630: PUSH
25631: LD_VAR 0 7
25635: PPUSH
25636: LD_INT 1
25638: PPUSH
25639: LD_VAR 0 14
25643: PPUSH
25644: CALL_OW 2
25648: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25649: LD_VAR 0 14
25653: PPUSH
25654: LD_VAR 0 1
25658: PPUSH
25659: CALL_OW 250
25663: PPUSH
25664: LD_VAR 0 1
25668: PPUSH
25669: CALL_OW 251
25673: PPUSH
25674: LD_INT 10
25676: PPUSH
25677: LD_INT 0
25679: PPUSH
25680: CALL_OW 50
// continue ;
25684: GO 25585
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25686: LD_VAR 0 12
25690: PUSH
25691: LD_INT 1
25693: ARRAY
25694: PPUSH
25695: CALL_OW 313
25699: IFFALSE 25727
25701: PUSH
25702: LD_VAR 0 12
25706: PUSH
25707: LD_INT 1
25709: ARRAY
25710: PPUSH
25711: CALL_OW 266
25715: PUSH
25716: LD_INT 32
25718: PUSH
25719: LD_INT 31
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: IN
25726: AND
25727: IFTRUE 25748
25729: PUSH
25730: LD_VAR 0 12
25734: PUSH
25735: LD_INT 1
25737: ARRAY
25738: PPUSH
25739: CALL_OW 313
25743: PUSH
25744: LD_INT 6
25746: EQUAL
25747: OR
25748: IFFALSE 25768
// f := Delete ( f , 1 ) ;
25750: LD_ADDR_VAR 0 12
25754: PUSH
25755: LD_VAR 0 12
25759: PPUSH
25760: LD_INT 1
25762: PPUSH
25763: CALL_OW 3
25767: ST_TO_ADDR
// if not f then
25768: LD_VAR 0 12
25772: NOT
25773: IFFALSE 25791
// begin x := x + 2 ;
25775: LD_ADDR_VAR 0 13
25779: PUSH
25780: LD_VAR 0 13
25784: PUSH
25785: LD_INT 2
25787: PLUS
25788: ST_TO_ADDR
// continue ;
25789: GO 25585
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25791: LD_VAR 0 12
25795: PUSH
25796: LD_INT 1
25798: ARRAY
25799: PPUSH
25800: CALL_OW 266
25804: PUSH
25805: LD_INT 5
25807: EQUAL
25808: IFFALSE 25882
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25810: LD_VAR 0 12
25814: PUSH
25815: LD_INT 1
25817: ARRAY
25818: PPUSH
25819: CALL_OW 313
25823: PUSH
25824: LD_INT 3
25826: LESS
25827: IFFALSE 25863
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25829: LD_INT 0
25831: PPUSH
25832: LD_INT 5
25834: PUSH
25835: LD_INT 8
25837: PUSH
25838: LD_INT 9
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: LIST
25845: PUSH
25846: LD_VAR 0 17
25850: ARRAY
25851: PPUSH
25852: LD_VAR 0 4
25856: PPUSH
25857: CALL_OW 380
25861: GO 25880
// PrepareHuman ( false , i , skill ) ;
25863: LD_INT 0
25865: PPUSH
25866: LD_VAR 0 8
25870: PPUSH
25871: LD_VAR 0 4
25875: PPUSH
25876: CALL_OW 380
// end else
25880: GO 25899
// PrepareHuman ( false , i , skill ) ;
25882: LD_INT 0
25884: PPUSH
25885: LD_VAR 0 8
25889: PPUSH
25890: LD_VAR 0 4
25894: PPUSH
25895: CALL_OW 380
// un := CreateHuman ;
25899: LD_ADDR_VAR 0 14
25903: PUSH
25904: CALL_OW 44
25908: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25909: LD_ADDR_VAR 0 7
25913: PUSH
25914: LD_VAR 0 7
25918: PPUSH
25919: LD_INT 1
25921: PPUSH
25922: LD_VAR 0 14
25926: PPUSH
25927: CALL_OW 2
25931: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25932: LD_VAR 0 14
25936: PPUSH
25937: LD_VAR 0 12
25941: PUSH
25942: LD_INT 1
25944: ARRAY
25945: PPUSH
25946: CALL_OW 52
// end ;
25950: GO 25585
25952: POP
25953: POP
// end ;
25954: GO 24885
25956: POP
25957: POP
// result := result ^ buildings ;
25958: LD_ADDR_VAR 0 7
25962: PUSH
25963: LD_VAR 0 7
25967: PUSH
25968: LD_VAR 0 18
25972: ADD
25973: ST_TO_ADDR
// end else
25974: GO 26117
// begin for i = 1 to personel do
25976: LD_ADDR_VAR 0 8
25980: PUSH
25981: DOUBLE
25982: LD_INT 1
25984: DEC
25985: ST_TO_ADDR
25986: LD_VAR 0 6
25990: PUSH
25991: FOR_TO
25992: IFFALSE 26115
// begin if i > 4 then
25994: LD_VAR 0 8
25998: PUSH
25999: LD_INT 4
26001: GREATER
26002: IFFALSE 26006
// break ;
26004: GO 26115
// x := personel [ i ] ;
26006: LD_ADDR_VAR 0 13
26010: PUSH
26011: LD_VAR 0 6
26015: PUSH
26016: LD_VAR 0 8
26020: ARRAY
26021: ST_TO_ADDR
// if x = - 1 then
26022: LD_VAR 0 13
26026: PUSH
26027: LD_INT 1
26029: NEG
26030: EQUAL
26031: IFFALSE 26035
// continue ;
26033: GO 25991
// PrepareHuman ( false , i , skill ) ;
26035: LD_INT 0
26037: PPUSH
26038: LD_VAR 0 8
26042: PPUSH
26043: LD_VAR 0 4
26047: PPUSH
26048: CALL_OW 380
// un := CreateHuman ;
26052: LD_ADDR_VAR 0 14
26056: PUSH
26057: CALL_OW 44
26061: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26062: LD_VAR 0 14
26066: PPUSH
26067: LD_VAR 0 1
26071: PPUSH
26072: CALL_OW 250
26076: PPUSH
26077: LD_VAR 0 1
26081: PPUSH
26082: CALL_OW 251
26086: PPUSH
26087: LD_INT 10
26089: PPUSH
26090: LD_INT 0
26092: PPUSH
26093: CALL_OW 50
// result := result ^ un ;
26097: LD_ADDR_VAR 0 7
26101: PUSH
26102: LD_VAR 0 7
26106: PUSH
26107: LD_VAR 0 14
26111: ADD
26112: ST_TO_ADDR
// end ;
26113: GO 25991
26115: POP
26116: POP
// end ; end ;
26117: LD_VAR 0 7
26121: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26122: LD_INT 0
26124: PPUSH
26125: PPUSH
26126: PPUSH
26127: PPUSH
26128: PPUSH
26129: PPUSH
26130: PPUSH
26131: PPUSH
26132: PPUSH
26133: PPUSH
26134: PPUSH
26135: PPUSH
26136: PPUSH
26137: PPUSH
26138: PPUSH
26139: PPUSH
// result := false ;
26140: LD_ADDR_VAR 0 3
26144: PUSH
26145: LD_INT 0
26147: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26148: LD_VAR 0 1
26152: NOT
26153: IFTRUE 26178
26155: PUSH
26156: LD_VAR 0 1
26160: PPUSH
26161: CALL_OW 266
26165: PUSH
26166: LD_INT 32
26168: PUSH
26169: LD_INT 33
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: IN
26176: NOT
26177: OR
26178: IFFALSE 26182
// exit ;
26180: GO 27317
// nat := GetNation ( tower ) ;
26182: LD_ADDR_VAR 0 12
26186: PUSH
26187: LD_VAR 0 1
26191: PPUSH
26192: CALL_OW 248
26196: ST_TO_ADDR
// side := GetSide ( tower ) ;
26197: LD_ADDR_VAR 0 16
26201: PUSH
26202: LD_VAR 0 1
26206: PPUSH
26207: CALL_OW 255
26211: ST_TO_ADDR
// x := GetX ( tower ) ;
26212: LD_ADDR_VAR 0 10
26216: PUSH
26217: LD_VAR 0 1
26221: PPUSH
26222: CALL_OW 250
26226: ST_TO_ADDR
// y := GetY ( tower ) ;
26227: LD_ADDR_VAR 0 11
26231: PUSH
26232: LD_VAR 0 1
26236: PPUSH
26237: CALL_OW 251
26241: ST_TO_ADDR
// if not x or not y then
26242: LD_VAR 0 10
26246: NOT
26247: IFTRUE 26256
26249: PUSH
26250: LD_VAR 0 11
26254: NOT
26255: OR
26256: IFFALSE 26260
// exit ;
26258: GO 27317
// weapon := 0 ;
26260: LD_ADDR_VAR 0 18
26264: PUSH
26265: LD_INT 0
26267: ST_TO_ADDR
// fac_list := [ ] ;
26268: LD_ADDR_VAR 0 17
26272: PUSH
26273: EMPTY
26274: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26275: LD_ADDR_VAR 0 6
26279: PUSH
26280: LD_VAR 0 1
26284: PPUSH
26285: CALL_OW 274
26289: PPUSH
26290: LD_VAR 0 2
26294: PPUSH
26295: LD_INT 0
26297: PPUSH
26298: CALL 23852 0 3
26302: PPUSH
26303: LD_INT 30
26305: PUSH
26306: LD_INT 3
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PPUSH
26313: CALL_OW 72
26317: ST_TO_ADDR
// if not factories then
26318: LD_VAR 0 6
26322: NOT
26323: IFFALSE 26327
// exit ;
26325: GO 27317
// for i in factories do
26327: LD_ADDR_VAR 0 8
26331: PUSH
26332: LD_VAR 0 6
26336: PUSH
26337: FOR_IN
26338: IFFALSE 26363
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26340: LD_ADDR_VAR 0 17
26344: PUSH
26345: LD_VAR 0 17
26349: PUSH
26350: LD_VAR 0 8
26354: PPUSH
26355: CALL_OW 478
26359: UNION
26360: ST_TO_ADDR
26361: GO 26337
26363: POP
26364: POP
// if not fac_list then
26365: LD_VAR 0 17
26369: NOT
26370: IFFALSE 26374
// exit ;
26372: GO 27317
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26374: LD_ADDR_VAR 0 5
26378: PUSH
26379: LD_INT 4
26381: PUSH
26382: LD_INT 5
26384: PUSH
26385: LD_INT 9
26387: PUSH
26388: LD_INT 10
26390: PUSH
26391: LD_INT 6
26393: PUSH
26394: LD_INT 7
26396: PUSH
26397: LD_INT 11
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 27
26411: PUSH
26412: LD_INT 28
26414: PUSH
26415: LD_INT 26
26417: PUSH
26418: LD_INT 30
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 43
26429: PUSH
26430: LD_INT 44
26432: PUSH
26433: LD_INT 46
26435: PUSH
26436: LD_INT 45
26438: PUSH
26439: LD_INT 47
26441: PUSH
26442: LD_INT 49
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: LIST
26457: PUSH
26458: LD_VAR 0 12
26462: ARRAY
26463: ST_TO_ADDR
// list := list isect fac_list ;
26464: LD_ADDR_VAR 0 5
26468: PUSH
26469: LD_VAR 0 5
26473: PUSH
26474: LD_VAR 0 17
26478: ISECT
26479: ST_TO_ADDR
// if not list then
26480: LD_VAR 0 5
26484: NOT
26485: IFFALSE 26489
// exit ;
26487: GO 27317
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26489: LD_VAR 0 12
26493: PUSH
26494: LD_INT 3
26496: EQUAL
26497: IFFALSE 26509
26499: PUSH
26500: LD_INT 49
26502: PUSH
26503: LD_VAR 0 5
26507: IN
26508: AND
26509: IFFALSE 26529
26511: PUSH
26512: LD_INT 31
26514: PPUSH
26515: LD_VAR 0 16
26519: PPUSH
26520: CALL_OW 321
26524: PUSH
26525: LD_INT 2
26527: EQUAL
26528: AND
26529: IFFALSE 26589
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26531: LD_INT 22
26533: PUSH
26534: LD_VAR 0 16
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 35
26545: PUSH
26546: LD_INT 49
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 91
26555: PUSH
26556: LD_VAR 0 1
26560: PUSH
26561: LD_INT 10
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: LIST
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: LIST
26573: PPUSH
26574: CALL_OW 69
26578: NOT
26579: IFFALSE 26589
// weapon := ru_time_lapser ;
26581: LD_ADDR_VAR 0 18
26585: PUSH
26586: LD_INT 49
26588: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26589: LD_VAR 0 12
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: LD_INT 2
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: IN
26604: IFFALSE 26628
26606: PUSH
26607: LD_INT 11
26609: PUSH
26610: LD_VAR 0 5
26614: IN
26615: IFTRUE 26627
26617: PUSH
26618: LD_INT 30
26620: PUSH
26621: LD_VAR 0 5
26625: IN
26626: OR
26627: AND
26628: IFFALSE 26648
26630: PUSH
26631: LD_INT 6
26633: PPUSH
26634: LD_VAR 0 16
26638: PPUSH
26639: CALL_OW 321
26643: PUSH
26644: LD_INT 2
26646: EQUAL
26647: AND
26648: IFFALSE 26815
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26650: LD_INT 22
26652: PUSH
26653: LD_VAR 0 16
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 2
26664: PUSH
26665: LD_INT 35
26667: PUSH
26668: LD_INT 11
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 35
26677: PUSH
26678: LD_INT 30
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 91
26692: PUSH
26693: LD_VAR 0 1
26697: PUSH
26698: LD_INT 18
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: LIST
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: LIST
26710: PPUSH
26711: CALL_OW 69
26715: NOT
26716: IFFALSE 26792
26718: PUSH
26719: LD_INT 22
26721: PUSH
26722: LD_VAR 0 16
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 2
26733: PUSH
26734: LD_INT 30
26736: PUSH
26737: LD_INT 32
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 30
26746: PUSH
26747: LD_INT 33
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 91
26761: PUSH
26762: LD_VAR 0 1
26766: PUSH
26767: LD_INT 12
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: LIST
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: LIST
26779: PUSH
26780: EMPTY
26781: LIST
26782: PPUSH
26783: CALL_OW 69
26787: PUSH
26788: LD_INT 2
26790: GREATER
26791: AND
26792: IFFALSE 26815
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26794: LD_ADDR_VAR 0 18
26798: PUSH
26799: LD_INT 11
26801: PUSH
26802: LD_INT 30
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_VAR 0 12
26813: ARRAY
26814: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26815: LD_VAR 0 18
26819: NOT
26820: IFFALSE 26840
26822: PUSH
26823: LD_INT 40
26825: PPUSH
26826: LD_VAR 0 16
26830: PPUSH
26831: CALL_OW 321
26835: PUSH
26836: LD_INT 2
26838: EQUAL
26839: AND
26840: IFFALSE 26876
26842: PUSH
26843: LD_INT 7
26845: PUSH
26846: LD_VAR 0 5
26850: IN
26851: IFTRUE 26863
26853: PUSH
26854: LD_INT 28
26856: PUSH
26857: LD_VAR 0 5
26861: IN
26862: OR
26863: IFTRUE 26875
26865: PUSH
26866: LD_INT 45
26868: PUSH
26869: LD_VAR 0 5
26873: IN
26874: OR
26875: AND
26876: IFFALSE 27130
// begin hex := GetHexInfo ( x , y ) ;
26878: LD_ADDR_VAR 0 4
26882: PUSH
26883: LD_VAR 0 10
26887: PPUSH
26888: LD_VAR 0 11
26892: PPUSH
26893: CALL_OW 546
26897: ST_TO_ADDR
// if hex [ 1 ] then
26898: LD_VAR 0 4
26902: PUSH
26903: LD_INT 1
26905: ARRAY
26906: IFFALSE 26910
// exit ;
26908: GO 27317
// height := hex [ 2 ] ;
26910: LD_ADDR_VAR 0 15
26914: PUSH
26915: LD_VAR 0 4
26919: PUSH
26920: LD_INT 2
26922: ARRAY
26923: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26924: LD_ADDR_VAR 0 14
26928: PUSH
26929: LD_INT 0
26931: PUSH
26932: LD_INT 2
26934: PUSH
26935: LD_INT 3
26937: PUSH
26938: LD_INT 5
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: ST_TO_ADDR
// for i in tmp do
26947: LD_ADDR_VAR 0 8
26951: PUSH
26952: LD_VAR 0 14
26956: PUSH
26957: FOR_IN
26958: IFFALSE 27128
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26960: LD_ADDR_VAR 0 9
26964: PUSH
26965: LD_VAR 0 10
26969: PPUSH
26970: LD_VAR 0 8
26974: PPUSH
26975: LD_INT 5
26977: PPUSH
26978: CALL_OW 272
26982: PUSH
26983: LD_VAR 0 11
26987: PPUSH
26988: LD_VAR 0 8
26992: PPUSH
26993: LD_INT 5
26995: PPUSH
26996: CALL_OW 273
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27005: LD_VAR 0 9
27009: PUSH
27010: LD_INT 1
27012: ARRAY
27013: PPUSH
27014: LD_VAR 0 9
27018: PUSH
27019: LD_INT 2
27021: ARRAY
27022: PPUSH
27023: CALL_OW 488
27027: IFFALSE 27126
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27029: LD_ADDR_VAR 0 4
27033: PUSH
27034: LD_VAR 0 9
27038: PUSH
27039: LD_INT 1
27041: ARRAY
27042: PPUSH
27043: LD_VAR 0 9
27047: PUSH
27048: LD_INT 2
27050: ARRAY
27051: PPUSH
27052: CALL_OW 546
27056: ST_TO_ADDR
// if hex [ 1 ] then
27057: LD_VAR 0 4
27061: PUSH
27062: LD_INT 1
27064: ARRAY
27065: IFFALSE 27069
// continue ;
27067: GO 26957
// h := hex [ 2 ] ;
27069: LD_ADDR_VAR 0 13
27073: PUSH
27074: LD_VAR 0 4
27078: PUSH
27079: LD_INT 2
27081: ARRAY
27082: ST_TO_ADDR
// if h + 7 < height then
27083: LD_VAR 0 13
27087: PUSH
27088: LD_INT 7
27090: PLUS
27091: PUSH
27092: LD_VAR 0 15
27096: LESS
27097: IFFALSE 27126
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27099: LD_ADDR_VAR 0 18
27103: PUSH
27104: LD_INT 7
27106: PUSH
27107: LD_INT 28
27109: PUSH
27110: LD_INT 45
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: LIST
27117: PUSH
27118: LD_VAR 0 12
27122: ARRAY
27123: ST_TO_ADDR
// break ;
27124: GO 27128
// end ; end ; end ;
27126: GO 26957
27128: POP
27129: POP
// end ; if not weapon then
27130: LD_VAR 0 18
27134: NOT
27135: IFFALSE 27195
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27137: LD_ADDR_VAR 0 5
27141: PUSH
27142: LD_VAR 0 5
27146: PUSH
27147: LD_INT 11
27149: PUSH
27150: LD_INT 30
27152: PUSH
27153: LD_INT 49
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: LIST
27160: DIFF
27161: ST_TO_ADDR
// if not list then
27162: LD_VAR 0 5
27166: NOT
27167: IFFALSE 27171
// exit ;
27169: GO 27317
// weapon := list [ rand ( 1 , list ) ] ;
27171: LD_ADDR_VAR 0 18
27175: PUSH
27176: LD_VAR 0 5
27180: PUSH
27181: LD_INT 1
27183: PPUSH
27184: LD_VAR 0 5
27188: PPUSH
27189: CALL_OW 12
27193: ARRAY
27194: ST_TO_ADDR
// end ; if weapon then
27195: LD_VAR 0 18
27199: IFFALSE 27317
// begin tmp := CostOfWeapon ( weapon ) ;
27201: LD_ADDR_VAR 0 14
27205: PUSH
27206: LD_VAR 0 18
27210: PPUSH
27211: CALL_OW 451
27215: ST_TO_ADDR
// j := GetBase ( tower ) ;
27216: LD_ADDR_VAR 0 9
27220: PUSH
27221: LD_VAR 0 1
27225: PPUSH
27226: CALL_OW 274
27230: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27231: LD_VAR 0 9
27235: PPUSH
27236: LD_INT 1
27238: PPUSH
27239: CALL_OW 275
27243: PUSH
27244: LD_VAR 0 14
27248: PUSH
27249: LD_INT 1
27251: ARRAY
27252: GREATEREQUAL
27253: IFFALSE 27279
27255: PUSH
27256: LD_VAR 0 9
27260: PPUSH
27261: LD_INT 2
27263: PPUSH
27264: CALL_OW 275
27268: PUSH
27269: LD_VAR 0 14
27273: PUSH
27274: LD_INT 2
27276: ARRAY
27277: GREATEREQUAL
27278: AND
27279: IFFALSE 27305
27281: PUSH
27282: LD_VAR 0 9
27286: PPUSH
27287: LD_INT 3
27289: PPUSH
27290: CALL_OW 275
27294: PUSH
27295: LD_VAR 0 14
27299: PUSH
27300: LD_INT 3
27302: ARRAY
27303: GREATEREQUAL
27304: AND
27305: IFFALSE 27317
// result := weapon ;
27307: LD_ADDR_VAR 0 3
27311: PUSH
27312: LD_VAR 0 18
27316: ST_TO_ADDR
// end ; end ;
27317: LD_VAR 0 3
27321: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27322: LD_INT 0
27324: PPUSH
27325: PPUSH
// result := true ;
27326: LD_ADDR_VAR 0 3
27330: PUSH
27331: LD_INT 1
27333: ST_TO_ADDR
// if array1 = array2 then
27334: LD_VAR 0 1
27338: PUSH
27339: LD_VAR 0 2
27343: EQUAL
27344: IFFALSE 27404
// begin for i = 1 to array1 do
27346: LD_ADDR_VAR 0 4
27350: PUSH
27351: DOUBLE
27352: LD_INT 1
27354: DEC
27355: ST_TO_ADDR
27356: LD_VAR 0 1
27360: PUSH
27361: FOR_TO
27362: IFFALSE 27400
// if array1 [ i ] <> array2 [ i ] then
27364: LD_VAR 0 1
27368: PUSH
27369: LD_VAR 0 4
27373: ARRAY
27374: PUSH
27375: LD_VAR 0 2
27379: PUSH
27380: LD_VAR 0 4
27384: ARRAY
27385: NONEQUAL
27386: IFFALSE 27398
// begin result := false ;
27388: LD_ADDR_VAR 0 3
27392: PUSH
27393: LD_INT 0
27395: ST_TO_ADDR
// break ;
27396: GO 27400
// end ;
27398: GO 27361
27400: POP
27401: POP
// end else
27402: GO 27412
// result := false ;
27404: LD_ADDR_VAR 0 3
27408: PUSH
27409: LD_INT 0
27411: ST_TO_ADDR
// end ;
27412: LD_VAR 0 3
27416: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27417: LD_INT 0
27419: PPUSH
27420: PPUSH
// if not array1 or not array2 then
27421: LD_VAR 0 1
27425: NOT
27426: IFTRUE 27435
27428: PUSH
27429: LD_VAR 0 2
27433: NOT
27434: OR
27435: IFFALSE 27439
// exit ;
27437: GO 27503
// result := true ;
27439: LD_ADDR_VAR 0 3
27443: PUSH
27444: LD_INT 1
27446: ST_TO_ADDR
// for i = 1 to array1 do
27447: LD_ADDR_VAR 0 4
27451: PUSH
27452: DOUBLE
27453: LD_INT 1
27455: DEC
27456: ST_TO_ADDR
27457: LD_VAR 0 1
27461: PUSH
27462: FOR_TO
27463: IFFALSE 27501
// if array1 [ i ] <> array2 [ i ] then
27465: LD_VAR 0 1
27469: PUSH
27470: LD_VAR 0 4
27474: ARRAY
27475: PUSH
27476: LD_VAR 0 2
27480: PUSH
27481: LD_VAR 0 4
27485: ARRAY
27486: NONEQUAL
27487: IFFALSE 27499
// begin result := false ;
27489: LD_ADDR_VAR 0 3
27493: PUSH
27494: LD_INT 0
27496: ST_TO_ADDR
// break ;
27497: GO 27501
// end ;
27499: GO 27462
27501: POP
27502: POP
// end ;
27503: LD_VAR 0 3
27507: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27508: LD_INT 0
27510: PPUSH
27511: PPUSH
27512: PPUSH
// pom := GetBase ( fac ) ;
27513: LD_ADDR_VAR 0 5
27517: PUSH
27518: LD_VAR 0 1
27522: PPUSH
27523: CALL_OW 274
27527: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27528: LD_ADDR_VAR 0 4
27532: PUSH
27533: LD_VAR 0 2
27537: PUSH
27538: LD_INT 1
27540: ARRAY
27541: PPUSH
27542: LD_VAR 0 2
27546: PUSH
27547: LD_INT 2
27549: ARRAY
27550: PPUSH
27551: LD_VAR 0 2
27555: PUSH
27556: LD_INT 3
27558: ARRAY
27559: PPUSH
27560: LD_VAR 0 2
27564: PUSH
27565: LD_INT 4
27567: ARRAY
27568: PPUSH
27569: CALL_OW 449
27573: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27574: LD_ADDR_VAR 0 3
27578: PUSH
27579: LD_VAR 0 5
27583: PPUSH
27584: LD_INT 1
27586: PPUSH
27587: CALL_OW 275
27591: PUSH
27592: LD_VAR 0 4
27596: PUSH
27597: LD_INT 1
27599: ARRAY
27600: GREATEREQUAL
27601: IFFALSE 27627
27603: PUSH
27604: LD_VAR 0 5
27608: PPUSH
27609: LD_INT 2
27611: PPUSH
27612: CALL_OW 275
27616: PUSH
27617: LD_VAR 0 4
27621: PUSH
27622: LD_INT 2
27624: ARRAY
27625: GREATEREQUAL
27626: AND
27627: IFFALSE 27653
27629: PUSH
27630: LD_VAR 0 5
27634: PPUSH
27635: LD_INT 3
27637: PPUSH
27638: CALL_OW 275
27642: PUSH
27643: LD_VAR 0 4
27647: PUSH
27648: LD_INT 3
27650: ARRAY
27651: GREATEREQUAL
27652: AND
27653: ST_TO_ADDR
// end ;
27654: LD_VAR 0 3
27658: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27659: LD_INT 0
27661: PPUSH
27662: PPUSH
27663: PPUSH
27664: PPUSH
// pom := GetBase ( building ) ;
27665: LD_ADDR_VAR 0 3
27669: PUSH
27670: LD_VAR 0 1
27674: PPUSH
27675: CALL_OW 274
27679: ST_TO_ADDR
// if not pom then
27680: LD_VAR 0 3
27684: NOT
27685: IFFALSE 27689
// exit ;
27687: GO 27863
// btype := GetBType ( building ) ;
27689: LD_ADDR_VAR 0 5
27693: PUSH
27694: LD_VAR 0 1
27698: PPUSH
27699: CALL_OW 266
27703: ST_TO_ADDR
// if btype = b_armoury then
27704: LD_VAR 0 5
27708: PUSH
27709: LD_INT 4
27711: EQUAL
27712: IFFALSE 27722
// btype := b_barracks ;
27714: LD_ADDR_VAR 0 5
27718: PUSH
27719: LD_INT 5
27721: ST_TO_ADDR
// if btype = b_depot then
27722: LD_VAR 0 5
27726: PUSH
27727: LD_INT 0
27729: EQUAL
27730: IFFALSE 27740
// btype := b_warehouse ;
27732: LD_ADDR_VAR 0 5
27736: PUSH
27737: LD_INT 1
27739: ST_TO_ADDR
// if btype = b_workshop then
27740: LD_VAR 0 5
27744: PUSH
27745: LD_INT 2
27747: EQUAL
27748: IFFALSE 27758
// btype := b_factory ;
27750: LD_ADDR_VAR 0 5
27754: PUSH
27755: LD_INT 3
27757: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27758: LD_ADDR_VAR 0 4
27762: PUSH
27763: LD_VAR 0 5
27767: PPUSH
27768: LD_VAR 0 1
27772: PPUSH
27773: CALL_OW 248
27777: PPUSH
27778: CALL_OW 450
27782: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27783: LD_ADDR_VAR 0 2
27787: PUSH
27788: LD_VAR 0 3
27792: PPUSH
27793: LD_INT 1
27795: PPUSH
27796: CALL_OW 275
27800: PUSH
27801: LD_VAR 0 4
27805: PUSH
27806: LD_INT 1
27808: ARRAY
27809: GREATEREQUAL
27810: IFFALSE 27836
27812: PUSH
27813: LD_VAR 0 3
27817: PPUSH
27818: LD_INT 2
27820: PPUSH
27821: CALL_OW 275
27825: PUSH
27826: LD_VAR 0 4
27830: PUSH
27831: LD_INT 2
27833: ARRAY
27834: GREATEREQUAL
27835: AND
27836: IFFALSE 27862
27838: PUSH
27839: LD_VAR 0 3
27843: PPUSH
27844: LD_INT 3
27846: PPUSH
27847: CALL_OW 275
27851: PUSH
27852: LD_VAR 0 4
27856: PUSH
27857: LD_INT 3
27859: ARRAY
27860: GREATEREQUAL
27861: AND
27862: ST_TO_ADDR
// end ;
27863: LD_VAR 0 2
27867: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27868: LD_INT 0
27870: PPUSH
27871: PPUSH
27872: PPUSH
// pom := GetBase ( building ) ;
27873: LD_ADDR_VAR 0 4
27877: PUSH
27878: LD_VAR 0 1
27882: PPUSH
27883: CALL_OW 274
27887: ST_TO_ADDR
// if not pom then
27888: LD_VAR 0 4
27892: NOT
27893: IFFALSE 27897
// exit ;
27895: GO 28002
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27897: LD_ADDR_VAR 0 5
27901: PUSH
27902: LD_VAR 0 2
27906: PPUSH
27907: LD_VAR 0 1
27911: PPUSH
27912: CALL_OW 248
27916: PPUSH
27917: CALL_OW 450
27921: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27922: LD_ADDR_VAR 0 3
27926: PUSH
27927: LD_VAR 0 4
27931: PPUSH
27932: LD_INT 1
27934: PPUSH
27935: CALL_OW 275
27939: PUSH
27940: LD_VAR 0 5
27944: PUSH
27945: LD_INT 1
27947: ARRAY
27948: GREATEREQUAL
27949: IFFALSE 27975
27951: PUSH
27952: LD_VAR 0 4
27956: PPUSH
27957: LD_INT 2
27959: PPUSH
27960: CALL_OW 275
27964: PUSH
27965: LD_VAR 0 5
27969: PUSH
27970: LD_INT 2
27972: ARRAY
27973: GREATEREQUAL
27974: AND
27975: IFFALSE 28001
27977: PUSH
27978: LD_VAR 0 4
27982: PPUSH
27983: LD_INT 3
27985: PPUSH
27986: CALL_OW 275
27990: PUSH
27991: LD_VAR 0 5
27995: PUSH
27996: LD_INT 3
27998: ARRAY
27999: GREATEREQUAL
28000: AND
28001: ST_TO_ADDR
// end ;
28002: LD_VAR 0 3
28006: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28007: LD_INT 0
28009: PPUSH
28010: PPUSH
28011: PPUSH
28012: PPUSH
28013: PPUSH
28014: PPUSH
28015: PPUSH
28016: PPUSH
28017: PPUSH
28018: PPUSH
28019: PPUSH
// result := false ;
28020: LD_ADDR_VAR 0 8
28024: PUSH
28025: LD_INT 0
28027: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28028: LD_VAR 0 5
28032: NOT
28033: IFTRUE 28042
28035: PUSH
28036: LD_VAR 0 1
28040: NOT
28041: OR
28042: IFTRUE 28051
28044: PUSH
28045: LD_VAR 0 2
28049: NOT
28050: OR
28051: IFTRUE 28060
28053: PUSH
28054: LD_VAR 0 3
28058: NOT
28059: OR
28060: IFFALSE 28064
// exit ;
28062: GO 28890
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28064: LD_ADDR_VAR 0 14
28068: PUSH
28069: LD_VAR 0 1
28073: PPUSH
28074: LD_VAR 0 2
28078: PPUSH
28079: LD_VAR 0 3
28083: PPUSH
28084: LD_VAR 0 4
28088: PPUSH
28089: LD_VAR 0 5
28093: PUSH
28094: LD_INT 1
28096: ARRAY
28097: PPUSH
28098: CALL_OW 248
28102: PPUSH
28103: LD_INT 0
28105: PPUSH
28106: CALL 30171 0 6
28110: ST_TO_ADDR
// if not hexes then
28111: LD_VAR 0 14
28115: NOT
28116: IFFALSE 28120
// exit ;
28118: GO 28890
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28120: LD_ADDR_VAR 0 17
28124: PUSH
28125: LD_VAR 0 5
28129: PPUSH
28130: LD_INT 22
28132: PUSH
28133: LD_VAR 0 13
28137: PPUSH
28138: CALL_OW 255
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 2
28149: PUSH
28150: LD_INT 30
28152: PUSH
28153: LD_INT 0
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 30
28162: PUSH
28163: LD_INT 1
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: LIST
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PPUSH
28179: CALL_OW 72
28183: ST_TO_ADDR
// for i = 1 to hexes do
28184: LD_ADDR_VAR 0 9
28188: PUSH
28189: DOUBLE
28190: LD_INT 1
28192: DEC
28193: ST_TO_ADDR
28194: LD_VAR 0 14
28198: PUSH
28199: FOR_TO
28200: IFFALSE 28888
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28202: LD_ADDR_VAR 0 13
28206: PUSH
28207: LD_VAR 0 14
28211: PUSH
28212: LD_VAR 0 9
28216: ARRAY
28217: PUSH
28218: LD_INT 1
28220: ARRAY
28221: PPUSH
28222: LD_VAR 0 14
28226: PUSH
28227: LD_VAR 0 9
28231: ARRAY
28232: PUSH
28233: LD_INT 2
28235: ARRAY
28236: PPUSH
28237: CALL_OW 428
28241: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28242: LD_VAR 0 14
28246: PUSH
28247: LD_VAR 0 9
28251: ARRAY
28252: PUSH
28253: LD_INT 1
28255: ARRAY
28256: PPUSH
28257: LD_VAR 0 14
28261: PUSH
28262: LD_VAR 0 9
28266: ARRAY
28267: PUSH
28268: LD_INT 2
28270: ARRAY
28271: PPUSH
28272: CALL_OW 351
28276: IFTRUE 28315
28278: PUSH
28279: LD_VAR 0 14
28283: PUSH
28284: LD_VAR 0 9
28288: ARRAY
28289: PUSH
28290: LD_INT 1
28292: ARRAY
28293: PPUSH
28294: LD_VAR 0 14
28298: PUSH
28299: LD_VAR 0 9
28303: ARRAY
28304: PUSH
28305: LD_INT 2
28307: ARRAY
28308: PPUSH
28309: CALL_OW 488
28313: NOT
28314: OR
28315: IFTRUE 28332
28317: PUSH
28318: LD_VAR 0 13
28322: PPUSH
28323: CALL_OW 247
28327: PUSH
28328: LD_INT 3
28330: EQUAL
28331: OR
28332: IFFALSE 28338
// exit ;
28334: POP
28335: POP
28336: GO 28890
// if not tmp then
28338: LD_VAR 0 13
28342: NOT
28343: IFFALSE 28347
// continue ;
28345: GO 28199
// result := true ;
28347: LD_ADDR_VAR 0 8
28351: PUSH
28352: LD_INT 1
28354: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28355: LD_VAR 0 6
28359: IFFALSE 28376
28361: PUSH
28362: LD_VAR 0 13
28366: PPUSH
28367: CALL_OW 247
28371: PUSH
28372: LD_INT 2
28374: EQUAL
28375: AND
28376: IFFALSE 28393
28378: PUSH
28379: LD_VAR 0 13
28383: PPUSH
28384: CALL_OW 263
28388: PUSH
28389: LD_INT 1
28391: EQUAL
28392: AND
28393: IFFALSE 28557
// begin if IsDrivenBy ( tmp ) then
28395: LD_VAR 0 13
28399: PPUSH
28400: CALL_OW 311
28404: IFFALSE 28408
// continue ;
28406: GO 28199
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28408: LD_VAR 0 6
28412: PPUSH
28413: LD_INT 3
28415: PUSH
28416: LD_INT 60
28418: PUSH
28419: EMPTY
28420: LIST
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 3
28428: PUSH
28429: LD_INT 55
28431: PUSH
28432: EMPTY
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PPUSH
28443: CALL_OW 72
28447: IFFALSE 28555
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28449: LD_ADDR_VAR 0 18
28453: PUSH
28454: LD_VAR 0 6
28458: PPUSH
28459: LD_INT 3
28461: PUSH
28462: LD_INT 60
28464: PUSH
28465: EMPTY
28466: LIST
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 3
28474: PUSH
28475: LD_INT 55
28477: PUSH
28478: EMPTY
28479: LIST
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PPUSH
28489: CALL_OW 72
28493: PUSH
28494: LD_INT 1
28496: ARRAY
28497: ST_TO_ADDR
// if IsInUnit ( driver ) then
28498: LD_VAR 0 18
28502: PPUSH
28503: CALL_OW 310
28507: IFFALSE 28518
// ComExit ( driver ) ;
28509: LD_VAR 0 18
28513: PPUSH
28514: CALL 54161 0 1
// AddComEnterUnit ( driver , tmp ) ;
28518: LD_VAR 0 18
28522: PPUSH
28523: LD_VAR 0 13
28527: PPUSH
28528: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28532: LD_VAR 0 18
28536: PPUSH
28537: LD_VAR 0 7
28541: PPUSH
28542: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28546: LD_VAR 0 18
28550: PPUSH
28551: CALL_OW 181
// end ; continue ;
28555: GO 28199
// end ; if not cleaners or not tmp in cleaners then
28557: LD_VAR 0 6
28561: NOT
28562: IFTRUE 28577
28564: PUSH
28565: LD_VAR 0 13
28569: PUSH
28570: LD_VAR 0 6
28574: IN
28575: NOT
28576: OR
28577: IFFALSE 28886
// begin if dep then
28579: LD_VAR 0 17
28583: IFFALSE 28719
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28585: LD_ADDR_VAR 0 16
28589: PUSH
28590: LD_VAR 0 17
28594: PUSH
28595: LD_INT 1
28597: ARRAY
28598: PPUSH
28599: CALL_OW 250
28603: PPUSH
28604: LD_VAR 0 17
28608: PUSH
28609: LD_INT 1
28611: ARRAY
28612: PPUSH
28613: CALL_OW 254
28617: PPUSH
28618: LD_INT 5
28620: PPUSH
28621: CALL_OW 272
28625: PUSH
28626: LD_VAR 0 17
28630: PUSH
28631: LD_INT 1
28633: ARRAY
28634: PPUSH
28635: CALL_OW 251
28639: PPUSH
28640: LD_VAR 0 17
28644: PUSH
28645: LD_INT 1
28647: ARRAY
28648: PPUSH
28649: CALL_OW 254
28653: PPUSH
28654: LD_INT 5
28656: PPUSH
28657: CALL_OW 273
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28666: LD_VAR 0 16
28670: PUSH
28671: LD_INT 1
28673: ARRAY
28674: PPUSH
28675: LD_VAR 0 16
28679: PUSH
28680: LD_INT 2
28682: ARRAY
28683: PPUSH
28684: CALL_OW 488
28688: IFFALSE 28719
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28690: LD_VAR 0 13
28694: PPUSH
28695: LD_VAR 0 16
28699: PUSH
28700: LD_INT 1
28702: ARRAY
28703: PPUSH
28704: LD_VAR 0 16
28708: PUSH
28709: LD_INT 2
28711: ARRAY
28712: PPUSH
28713: CALL_OW 111
// continue ;
28717: GO 28199
// end ; end ; r := GetDir ( tmp ) ;
28719: LD_ADDR_VAR 0 15
28723: PUSH
28724: LD_VAR 0 13
28728: PPUSH
28729: CALL_OW 254
28733: ST_TO_ADDR
// if r = 5 then
28734: LD_VAR 0 15
28738: PUSH
28739: LD_INT 5
28741: EQUAL
28742: IFFALSE 28752
// r := 0 ;
28744: LD_ADDR_VAR 0 15
28748: PUSH
28749: LD_INT 0
28751: ST_TO_ADDR
// for j = r to 5 do
28752: LD_ADDR_VAR 0 10
28756: PUSH
28757: DOUBLE
28758: LD_VAR 0 15
28762: DEC
28763: ST_TO_ADDR
28764: LD_INT 5
28766: PUSH
28767: FOR_TO
28768: IFFALSE 28884
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28770: LD_ADDR_VAR 0 11
28774: PUSH
28775: LD_VAR 0 13
28779: PPUSH
28780: CALL_OW 250
28784: PPUSH
28785: LD_VAR 0 10
28789: PPUSH
28790: LD_INT 2
28792: PPUSH
28793: CALL_OW 272
28797: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28798: LD_ADDR_VAR 0 12
28802: PUSH
28803: LD_VAR 0 13
28807: PPUSH
28808: CALL_OW 251
28812: PPUSH
28813: LD_VAR 0 10
28817: PPUSH
28818: LD_INT 2
28820: PPUSH
28821: CALL_OW 273
28825: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28826: LD_VAR 0 11
28830: PPUSH
28831: LD_VAR 0 12
28835: PPUSH
28836: CALL_OW 488
28840: IFFALSE 28859
28842: PUSH
28843: LD_VAR 0 11
28847: PPUSH
28848: LD_VAR 0 12
28852: PPUSH
28853: CALL_OW 428
28857: NOT
28858: AND
28859: IFFALSE 28882
// begin ComMoveXY ( tmp , _x , _y ) ;
28861: LD_VAR 0 13
28865: PPUSH
28866: LD_VAR 0 11
28870: PPUSH
28871: LD_VAR 0 12
28875: PPUSH
28876: CALL_OW 111
// break ;
28880: GO 28884
// end ; end ;
28882: GO 28767
28884: POP
28885: POP
// end ; end ;
28886: GO 28199
28888: POP
28889: POP
// end ;
28890: LD_VAR 0 8
28894: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28895: LD_INT 0
28897: PPUSH
// result := true ;
28898: LD_ADDR_VAR 0 3
28902: PUSH
28903: LD_INT 1
28905: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28906: LD_VAR 0 2
28910: PUSH
28911: LD_INT 24
28913: DOUBLE
28914: EQUAL
28915: IFTRUE 28925
28917: LD_INT 33
28919: DOUBLE
28920: EQUAL
28921: IFTRUE 28925
28923: GO 28950
28925: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28926: LD_ADDR_VAR 0 3
28930: PUSH
28931: LD_INT 32
28933: PPUSH
28934: LD_VAR 0 1
28938: PPUSH
28939: CALL_OW 321
28943: PUSH
28944: LD_INT 2
28946: EQUAL
28947: ST_TO_ADDR
28948: GO 29266
28950: LD_INT 20
28952: DOUBLE
28953: EQUAL
28954: IFTRUE 28958
28956: GO 28983
28958: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28959: LD_ADDR_VAR 0 3
28963: PUSH
28964: LD_INT 6
28966: PPUSH
28967: LD_VAR 0 1
28971: PPUSH
28972: CALL_OW 321
28976: PUSH
28977: LD_INT 2
28979: EQUAL
28980: ST_TO_ADDR
28981: GO 29266
28983: LD_INT 22
28985: DOUBLE
28986: EQUAL
28987: IFTRUE 28997
28989: LD_INT 36
28991: DOUBLE
28992: EQUAL
28993: IFTRUE 28997
28995: GO 29022
28997: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28998: LD_ADDR_VAR 0 3
29002: PUSH
29003: LD_INT 15
29005: PPUSH
29006: LD_VAR 0 1
29010: PPUSH
29011: CALL_OW 321
29015: PUSH
29016: LD_INT 2
29018: EQUAL
29019: ST_TO_ADDR
29020: GO 29266
29022: LD_INT 30
29024: DOUBLE
29025: EQUAL
29026: IFTRUE 29030
29028: GO 29055
29030: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29031: LD_ADDR_VAR 0 3
29035: PUSH
29036: LD_INT 20
29038: PPUSH
29039: LD_VAR 0 1
29043: PPUSH
29044: CALL_OW 321
29048: PUSH
29049: LD_INT 2
29051: EQUAL
29052: ST_TO_ADDR
29053: GO 29266
29055: LD_INT 28
29057: DOUBLE
29058: EQUAL
29059: IFTRUE 29069
29061: LD_INT 21
29063: DOUBLE
29064: EQUAL
29065: IFTRUE 29069
29067: GO 29094
29069: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29070: LD_ADDR_VAR 0 3
29074: PUSH
29075: LD_INT 21
29077: PPUSH
29078: LD_VAR 0 1
29082: PPUSH
29083: CALL_OW 321
29087: PUSH
29088: LD_INT 2
29090: EQUAL
29091: ST_TO_ADDR
29092: GO 29266
29094: LD_INT 16
29096: DOUBLE
29097: EQUAL
29098: IFTRUE 29102
29100: GO 29127
29102: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29103: LD_ADDR_VAR 0 3
29107: PUSH
29108: LD_INT 84
29110: PPUSH
29111: LD_VAR 0 1
29115: PPUSH
29116: CALL_OW 321
29120: PUSH
29121: LD_INT 2
29123: EQUAL
29124: ST_TO_ADDR
29125: GO 29266
29127: LD_INT 19
29129: DOUBLE
29130: EQUAL
29131: IFTRUE 29141
29133: LD_INT 23
29135: DOUBLE
29136: EQUAL
29137: IFTRUE 29141
29139: GO 29166
29141: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29142: LD_ADDR_VAR 0 3
29146: PUSH
29147: LD_INT 83
29149: PPUSH
29150: LD_VAR 0 1
29154: PPUSH
29155: CALL_OW 321
29159: PUSH
29160: LD_INT 2
29162: EQUAL
29163: ST_TO_ADDR
29164: GO 29266
29166: LD_INT 17
29168: DOUBLE
29169: EQUAL
29170: IFTRUE 29174
29172: GO 29199
29174: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29175: LD_ADDR_VAR 0 3
29179: PUSH
29180: LD_INT 39
29182: PPUSH
29183: LD_VAR 0 1
29187: PPUSH
29188: CALL_OW 321
29192: PUSH
29193: LD_INT 2
29195: EQUAL
29196: ST_TO_ADDR
29197: GO 29266
29199: LD_INT 18
29201: DOUBLE
29202: EQUAL
29203: IFTRUE 29207
29205: GO 29232
29207: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29208: LD_ADDR_VAR 0 3
29212: PUSH
29213: LD_INT 40
29215: PPUSH
29216: LD_VAR 0 1
29220: PPUSH
29221: CALL_OW 321
29225: PUSH
29226: LD_INT 2
29228: EQUAL
29229: ST_TO_ADDR
29230: GO 29266
29232: LD_INT 27
29234: DOUBLE
29235: EQUAL
29236: IFTRUE 29240
29238: GO 29265
29240: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29241: LD_ADDR_VAR 0 3
29245: PUSH
29246: LD_INT 35
29248: PPUSH
29249: LD_VAR 0 1
29253: PPUSH
29254: CALL_OW 321
29258: PUSH
29259: LD_INT 2
29261: EQUAL
29262: ST_TO_ADDR
29263: GO 29266
29265: POP
// end ;
29266: LD_VAR 0 3
29270: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29271: LD_INT 0
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
29277: PPUSH
29278: PPUSH
29279: PPUSH
29280: PPUSH
29281: PPUSH
29282: PPUSH
29283: PPUSH
// result := false ;
29284: LD_ADDR_VAR 0 6
29288: PUSH
29289: LD_INT 0
29291: ST_TO_ADDR
// if btype = b_depot then
29292: LD_VAR 0 2
29296: PUSH
29297: LD_INT 0
29299: EQUAL
29300: IFFALSE 29312
// begin result := true ;
29302: LD_ADDR_VAR 0 6
29306: PUSH
29307: LD_INT 1
29309: ST_TO_ADDR
// exit ;
29310: GO 30166
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29312: LD_VAR 0 1
29316: NOT
29317: IFTRUE 29342
29319: PUSH
29320: LD_VAR 0 1
29324: PPUSH
29325: CALL_OW 266
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: IN
29340: NOT
29341: OR
29342: IFTRUE 29351
29344: PUSH
29345: LD_VAR 0 2
29349: NOT
29350: OR
29351: IFTRUE 29387
29353: PUSH
29354: LD_VAR 0 5
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: LD_INT 1
29364: PUSH
29365: LD_INT 2
29367: PUSH
29368: LD_INT 3
29370: PUSH
29371: LD_INT 4
29373: PUSH
29374: LD_INT 5
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: IN
29385: NOT
29386: OR
29387: IFTRUE 29406
29389: PUSH
29390: LD_VAR 0 3
29394: PPUSH
29395: LD_VAR 0 4
29399: PPUSH
29400: CALL_OW 488
29404: NOT
29405: OR
29406: IFFALSE 29410
// exit ;
29408: GO 30166
// side := GetSide ( depot ) ;
29410: LD_ADDR_VAR 0 9
29414: PUSH
29415: LD_VAR 0 1
29419: PPUSH
29420: CALL_OW 255
29424: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29425: LD_VAR 0 9
29429: PPUSH
29430: LD_VAR 0 2
29434: PPUSH
29435: CALL 28895 0 2
29439: NOT
29440: IFFALSE 29444
// exit ;
29442: GO 30166
// pom := GetBase ( depot ) ;
29444: LD_ADDR_VAR 0 10
29448: PUSH
29449: LD_VAR 0 1
29453: PPUSH
29454: CALL_OW 274
29458: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29459: LD_ADDR_VAR 0 11
29463: PUSH
29464: LD_VAR 0 2
29468: PPUSH
29469: LD_VAR 0 1
29473: PPUSH
29474: CALL_OW 248
29478: PPUSH
29479: CALL_OW 450
29483: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29484: LD_VAR 0 10
29488: PPUSH
29489: LD_INT 1
29491: PPUSH
29492: CALL_OW 275
29496: PUSH
29497: LD_VAR 0 11
29501: PUSH
29502: LD_INT 1
29504: ARRAY
29505: GREATEREQUAL
29506: IFFALSE 29532
29508: PUSH
29509: LD_VAR 0 10
29513: PPUSH
29514: LD_INT 2
29516: PPUSH
29517: CALL_OW 275
29521: PUSH
29522: LD_VAR 0 11
29526: PUSH
29527: LD_INT 2
29529: ARRAY
29530: GREATEREQUAL
29531: AND
29532: IFFALSE 29558
29534: PUSH
29535: LD_VAR 0 10
29539: PPUSH
29540: LD_INT 3
29542: PPUSH
29543: CALL_OW 275
29547: PUSH
29548: LD_VAR 0 11
29552: PUSH
29553: LD_INT 3
29555: ARRAY
29556: GREATEREQUAL
29557: AND
29558: NOT
29559: IFFALSE 29563
// exit ;
29561: GO 30166
// if GetBType ( depot ) = b_depot then
29563: LD_VAR 0 1
29567: PPUSH
29568: CALL_OW 266
29572: PUSH
29573: LD_INT 0
29575: EQUAL
29576: IFFALSE 29588
// dist := 28 else
29578: LD_ADDR_VAR 0 14
29582: PUSH
29583: LD_INT 28
29585: ST_TO_ADDR
29586: GO 29596
// dist := 36 ;
29588: LD_ADDR_VAR 0 14
29592: PUSH
29593: LD_INT 36
29595: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29596: LD_VAR 0 1
29600: PPUSH
29601: LD_VAR 0 3
29605: PPUSH
29606: LD_VAR 0 4
29610: PPUSH
29611: CALL_OW 297
29615: PUSH
29616: LD_VAR 0 14
29620: GREATER
29621: IFFALSE 29625
// exit ;
29623: GO 30166
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29625: LD_ADDR_VAR 0 12
29629: PUSH
29630: LD_VAR 0 2
29634: PPUSH
29635: LD_VAR 0 3
29639: PPUSH
29640: LD_VAR 0 4
29644: PPUSH
29645: LD_VAR 0 5
29649: PPUSH
29650: LD_VAR 0 1
29654: PPUSH
29655: CALL_OW 248
29659: PPUSH
29660: LD_INT 0
29662: PPUSH
29663: CALL 30171 0 6
29667: ST_TO_ADDR
// if not hexes then
29668: LD_VAR 0 12
29672: NOT
29673: IFFALSE 29677
// exit ;
29675: GO 30166
// hex := GetHexInfo ( x , y ) ;
29677: LD_ADDR_VAR 0 15
29681: PUSH
29682: LD_VAR 0 3
29686: PPUSH
29687: LD_VAR 0 4
29691: PPUSH
29692: CALL_OW 546
29696: ST_TO_ADDR
// if hex [ 1 ] then
29697: LD_VAR 0 15
29701: PUSH
29702: LD_INT 1
29704: ARRAY
29705: IFFALSE 29709
// exit ;
29707: GO 30166
// height := hex [ 2 ] ;
29709: LD_ADDR_VAR 0 13
29713: PUSH
29714: LD_VAR 0 15
29718: PUSH
29719: LD_INT 2
29721: ARRAY
29722: ST_TO_ADDR
// for i = 1 to hexes do
29723: LD_ADDR_VAR 0 7
29727: PUSH
29728: DOUBLE
29729: LD_INT 1
29731: DEC
29732: ST_TO_ADDR
29733: LD_VAR 0 12
29737: PUSH
29738: FOR_TO
29739: IFFALSE 30083
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29741: LD_VAR 0 12
29745: PUSH
29746: LD_VAR 0 7
29750: ARRAY
29751: PUSH
29752: LD_INT 1
29754: ARRAY
29755: PPUSH
29756: LD_VAR 0 12
29760: PUSH
29761: LD_VAR 0 7
29765: ARRAY
29766: PUSH
29767: LD_INT 2
29769: ARRAY
29770: PPUSH
29771: CALL_OW 488
29775: NOT
29776: IFTRUE 29818
29778: PUSH
29779: LD_VAR 0 12
29783: PUSH
29784: LD_VAR 0 7
29788: ARRAY
29789: PUSH
29790: LD_INT 1
29792: ARRAY
29793: PPUSH
29794: LD_VAR 0 12
29798: PUSH
29799: LD_VAR 0 7
29803: ARRAY
29804: PUSH
29805: LD_INT 2
29807: ARRAY
29808: PPUSH
29809: CALL_OW 428
29813: PUSH
29814: LD_INT 0
29816: GREATER
29817: OR
29818: IFTRUE 29856
29820: PUSH
29821: LD_VAR 0 12
29825: PUSH
29826: LD_VAR 0 7
29830: ARRAY
29831: PUSH
29832: LD_INT 1
29834: ARRAY
29835: PPUSH
29836: LD_VAR 0 12
29840: PUSH
29841: LD_VAR 0 7
29845: ARRAY
29846: PUSH
29847: LD_INT 2
29849: ARRAY
29850: PPUSH
29851: CALL_OW 351
29855: OR
29856: IFFALSE 29862
// exit ;
29858: POP
29859: POP
29860: GO 30166
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29862: LD_ADDR_VAR 0 8
29866: PUSH
29867: LD_VAR 0 12
29871: PUSH
29872: LD_VAR 0 7
29876: ARRAY
29877: PUSH
29878: LD_INT 1
29880: ARRAY
29881: PPUSH
29882: LD_VAR 0 12
29886: PUSH
29887: LD_VAR 0 7
29891: ARRAY
29892: PUSH
29893: LD_INT 2
29895: ARRAY
29896: PPUSH
29897: CALL_OW 546
29901: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29902: LD_VAR 0 8
29906: PUSH
29907: LD_INT 1
29909: ARRAY
29910: IFTRUE 29932
29912: PUSH
29913: LD_VAR 0 8
29917: PUSH
29918: LD_INT 2
29920: ARRAY
29921: PUSH
29922: LD_VAR 0 13
29926: PUSH
29927: LD_INT 2
29929: PLUS
29930: GREATER
29931: OR
29932: IFTRUE 29954
29934: PUSH
29935: LD_VAR 0 8
29939: PUSH
29940: LD_INT 2
29942: ARRAY
29943: PUSH
29944: LD_VAR 0 13
29948: PUSH
29949: LD_INT 2
29951: MINUS
29952: LESS
29953: OR
29954: IFTRUE 30022
29956: PUSH
29957: LD_VAR 0 8
29961: PUSH
29962: LD_INT 3
29964: ARRAY
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: LD_INT 8
29971: PUSH
29972: LD_INT 9
29974: PUSH
29975: LD_INT 10
29977: PUSH
29978: LD_INT 11
29980: PUSH
29981: LD_INT 12
29983: PUSH
29984: LD_INT 13
29986: PUSH
29987: LD_INT 16
29989: PUSH
29990: LD_INT 17
29992: PUSH
29993: LD_INT 18
29995: PUSH
29996: LD_INT 19
29998: PUSH
29999: LD_INT 20
30001: PUSH
30002: LD_INT 21
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: IN
30020: NOT
30021: OR
30022: IFTRUE 30035
30024: PUSH
30025: LD_VAR 0 8
30029: PUSH
30030: LD_INT 5
30032: ARRAY
30033: NOT
30034: OR
30035: IFTRUE 30075
30037: PUSH
30038: LD_VAR 0 8
30042: PUSH
30043: LD_INT 6
30045: ARRAY
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: LD_INT 2
30052: PUSH
30053: LD_INT 7
30055: PUSH
30056: LD_INT 9
30058: PUSH
30059: LD_INT 10
30061: PUSH
30062: LD_INT 11
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: IN
30073: NOT
30074: OR
30075: IFFALSE 30081
// exit ;
30077: POP
30078: POP
30079: GO 30166
// end ;
30081: GO 29738
30083: POP
30084: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30085: LD_VAR 0 9
30089: PPUSH
30090: LD_VAR 0 3
30094: PPUSH
30095: LD_VAR 0 4
30099: PPUSH
30100: LD_INT 20
30102: PPUSH
30103: CALL 21985 0 4
30107: PUSH
30108: LD_INT 4
30110: ARRAY
30111: IFFALSE 30115
// exit ;
30113: GO 30166
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30115: LD_VAR 0 2
30119: PUSH
30120: LD_INT 29
30122: PUSH
30123: LD_INT 30
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: IN
30130: IFFALSE 30154
30132: PUSH
30133: LD_VAR 0 3
30137: PPUSH
30138: LD_VAR 0 4
30142: PPUSH
30143: LD_VAR 0 9
30147: PPUSH
30148: CALL_OW 440
30152: NOT
30153: AND
30154: IFFALSE 30158
// exit ;
30156: GO 30166
// result := true ;
30158: LD_ADDR_VAR 0 6
30162: PUSH
30163: LD_INT 1
30165: ST_TO_ADDR
// end ;
30166: LD_VAR 0 6
30170: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30171: LD_INT 0
30173: PPUSH
30174: PPUSH
30175: PPUSH
30176: PPUSH
30177: PPUSH
30178: PPUSH
30179: PPUSH
30180: PPUSH
30181: PPUSH
30182: PPUSH
30183: PPUSH
30184: PPUSH
30185: PPUSH
30186: PPUSH
30187: PPUSH
30188: PPUSH
30189: PPUSH
30190: PPUSH
30191: PPUSH
30192: PPUSH
30193: PPUSH
30194: PPUSH
30195: PPUSH
30196: PPUSH
30197: PPUSH
30198: PPUSH
30199: PPUSH
30200: PPUSH
30201: PPUSH
30202: PPUSH
30203: PPUSH
30204: PPUSH
30205: PPUSH
30206: PPUSH
30207: PPUSH
30208: PPUSH
30209: PPUSH
30210: PPUSH
30211: PPUSH
30212: PPUSH
30213: PPUSH
30214: PPUSH
30215: PPUSH
30216: PPUSH
30217: PPUSH
30218: PPUSH
30219: PPUSH
30220: PPUSH
30221: PPUSH
30222: PPUSH
30223: PPUSH
30224: PPUSH
30225: PPUSH
30226: PPUSH
30227: PPUSH
30228: PPUSH
30229: PPUSH
30230: PPUSH
// result = [ ] ;
30231: LD_ADDR_VAR 0 7
30235: PUSH
30236: EMPTY
30237: ST_TO_ADDR
// temp_list = [ ] ;
30238: LD_ADDR_VAR 0 9
30242: PUSH
30243: EMPTY
30244: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30245: LD_VAR 0 4
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: LD_INT 1
30255: PUSH
30256: LD_INT 2
30258: PUSH
30259: LD_INT 3
30261: PUSH
30262: LD_INT 4
30264: PUSH
30265: LD_INT 5
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: IN
30276: NOT
30277: IFTRUE 30320
30279: PUSH
30280: LD_VAR 0 1
30284: PUSH
30285: LD_INT 0
30287: PUSH
30288: LD_INT 1
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: IN
30295: IFFALSE 30319
30297: PUSH
30298: LD_VAR 0 5
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: LD_INT 2
30308: PUSH
30309: LD_INT 3
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: LIST
30316: IN
30317: NOT
30318: AND
30319: OR
30320: IFFALSE 30324
// exit ;
30322: GO 48723
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30324: LD_VAR 0 1
30328: PUSH
30329: LD_INT 6
30331: PUSH
30332: LD_INT 7
30334: PUSH
30335: LD_INT 8
30337: PUSH
30338: LD_INT 13
30340: PUSH
30341: LD_INT 12
30343: PUSH
30344: LD_INT 15
30346: PUSH
30347: LD_INT 11
30349: PUSH
30350: LD_INT 14
30352: PUSH
30353: LD_INT 10
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: IN
30367: IFFALSE 30377
// btype = b_lab ;
30369: LD_ADDR_VAR 0 1
30373: PUSH
30374: LD_INT 6
30376: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30377: LD_VAR 0 6
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: LD_INT 2
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: LIST
30395: IN
30396: NOT
30397: IFTRUE 30465
30399: PUSH
30400: LD_VAR 0 1
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: LD_INT 1
30410: PUSH
30411: LD_INT 2
30413: PUSH
30414: LD_INT 3
30416: PUSH
30417: LD_INT 6
30419: PUSH
30420: LD_INT 36
30422: PUSH
30423: LD_INT 4
30425: PUSH
30426: LD_INT 5
30428: PUSH
30429: LD_INT 31
30431: PUSH
30432: LD_INT 32
30434: PUSH
30435: LD_INT 33
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: IN
30451: NOT
30452: IFFALSE 30464
30454: PUSH
30455: LD_VAR 0 6
30459: PUSH
30460: LD_INT 1
30462: EQUAL
30463: AND
30464: OR
30465: IFTRUE 30497
30467: PUSH
30468: LD_VAR 0 1
30472: PUSH
30473: LD_INT 2
30475: PUSH
30476: LD_INT 3
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: IN
30483: NOT
30484: IFFALSE 30496
30486: PUSH
30487: LD_VAR 0 6
30491: PUSH
30492: LD_INT 2
30494: EQUAL
30495: AND
30496: OR
30497: IFFALSE 30507
// mode = 0 ;
30499: LD_ADDR_VAR 0 6
30503: PUSH
30504: LD_INT 0
30506: ST_TO_ADDR
// case mode of 0 :
30507: LD_VAR 0 6
30511: PUSH
30512: LD_INT 0
30514: DOUBLE
30515: EQUAL
30516: IFTRUE 30520
30518: GO 41973
30520: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30521: LD_ADDR_VAR 0 11
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 0
30538: PUSH
30539: LD_INT 1
30541: NEG
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 1
30549: PUSH
30550: LD_INT 0
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: LD_INT 1
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 0
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 1
30579: NEG
30580: PUSH
30581: LD_INT 0
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 1
30590: NEG
30591: PUSH
30592: LD_INT 1
30594: NEG
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: PUSH
30604: LD_INT 2
30606: NEG
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 0
30614: PUSH
30615: LD_INT 2
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 1
30625: PUSH
30626: LD_INT 1
30628: NEG
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: LD_INT 2
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 0
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 1
30656: NEG
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 1
30667: PUSH
30668: LD_INT 3
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 0
30677: PUSH
30678: LD_INT 3
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 1
30687: NEG
30688: PUSH
30689: LD_INT 2
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30714: LD_ADDR_VAR 0 12
30718: PUSH
30719: LD_INT 0
30721: PUSH
30722: LD_INT 0
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: LD_INT 0
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: LD_INT 1
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 0
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 1
30772: NEG
30773: PUSH
30774: LD_INT 0
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 1
30783: NEG
30784: PUSH
30785: LD_INT 1
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 1
30795: PUSH
30796: LD_INT 1
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 2
30806: PUSH
30807: LD_INT 0
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 2
30816: PUSH
30817: LD_INT 1
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: NEG
30827: PUSH
30828: LD_INT 1
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 2
30837: NEG
30838: PUSH
30839: LD_INT 0
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 2
30848: NEG
30849: PUSH
30850: LD_INT 1
30852: NEG
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 2
30860: NEG
30861: PUSH
30862: LD_INT 1
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 3
30871: NEG
30872: PUSH
30873: LD_INT 0
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 3
30882: NEG
30883: PUSH
30884: LD_INT 1
30886: NEG
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30910: LD_ADDR_VAR 0 13
30914: PUSH
30915: LD_INT 0
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 0
30927: PUSH
30928: LD_INT 1
30930: NEG
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 1
30938: PUSH
30939: LD_INT 0
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: LD_INT 1
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 0
30958: PUSH
30959: LD_INT 1
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 1
30968: NEG
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 1
30979: NEG
30980: PUSH
30981: LD_INT 1
30983: NEG
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 1
30991: NEG
30992: PUSH
30993: LD_INT 2
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 2
31003: PUSH
31004: LD_INT 1
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 2
31013: PUSH
31014: LD_INT 2
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: LD_INT 2
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 2
31033: NEG
31034: PUSH
31035: LD_INT 1
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 2
31045: NEG
31046: PUSH
31047: LD_INT 2
31049: NEG
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 2
31057: NEG
31058: PUSH
31059: LD_INT 3
31061: NEG
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 3
31069: NEG
31070: PUSH
31071: LD_INT 2
31073: NEG
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 3
31081: NEG
31082: PUSH
31083: LD_INT 3
31085: NEG
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31109: LD_ADDR_VAR 0 14
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: LD_INT 0
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 0
31126: PUSH
31127: LD_INT 1
31129: NEG
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 1
31137: PUSH
31138: LD_INT 0
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 1
31147: PUSH
31148: LD_INT 1
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 0
31157: PUSH
31158: LD_INT 1
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 1
31167: NEG
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 1
31178: NEG
31179: PUSH
31180: LD_INT 1
31182: NEG
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 1
31190: NEG
31191: PUSH
31192: LD_INT 2
31194: NEG
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: LD_INT 2
31205: NEG
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: LD_INT 1
31216: NEG
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: LD_INT 2
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: LD_INT 2
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PUSH
31246: LD_INT 1
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: LD_INT 3
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 0
31267: PUSH
31268: LD_INT 3
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 1
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31305: LD_ADDR_VAR 0 15
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 0
31322: PUSH
31323: LD_INT 1
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: LD_INT 0
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 1
31343: PUSH
31344: LD_INT 1
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 0
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 1
31363: NEG
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 1
31374: NEG
31375: PUSH
31376: LD_INT 1
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 1
31386: PUSH
31387: LD_INT 1
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: NEG
31418: PUSH
31419: LD_INT 1
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 2
31428: NEG
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 2
31439: NEG
31440: PUSH
31441: LD_INT 1
31443: NEG
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 2
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 3
31462: PUSH
31463: LD_INT 0
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 3
31472: PUSH
31473: LD_INT 1
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31498: LD_ADDR_VAR 0 16
31502: PUSH
31503: LD_INT 0
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: LD_INT 1
31518: NEG
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 1
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 0
31546: PUSH
31547: LD_INT 1
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 1
31556: NEG
31557: PUSH
31558: LD_INT 0
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 1
31567: NEG
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 1
31579: NEG
31580: PUSH
31581: LD_INT 2
31583: NEG
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 2
31591: PUSH
31592: LD_INT 1
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: LD_INT 2
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 1
31611: PUSH
31612: LD_INT 2
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 2
31621: NEG
31622: PUSH
31623: LD_INT 1
31625: NEG
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 2
31633: NEG
31634: PUSH
31635: LD_INT 2
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 3
31645: PUSH
31646: LD_INT 2
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 3
31655: PUSH
31656: LD_INT 3
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 2
31665: PUSH
31666: LD_INT 3
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31691: LD_ADDR_VAR 0 17
31695: PUSH
31696: LD_INT 0
31698: PUSH
31699: LD_INT 0
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 0
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 1
31719: PUSH
31720: LD_INT 0
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 0
31739: PUSH
31740: LD_INT 1
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 1
31772: NEG
31773: PUSH
31774: LD_INT 2
31776: NEG
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: LD_INT 2
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 2
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: LD_INT 2
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: LD_INT 2
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 0
31846: PUSH
31847: LD_INT 2
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 1
31856: NEG
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 2
31867: NEG
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 2
31878: NEG
31879: PUSH
31880: LD_INT 1
31882: NEG
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 2
31890: NEG
31891: PUSH
31892: LD_INT 2
31894: NEG
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31921: LD_ADDR_VAR 0 18
31925: PUSH
31926: LD_INT 0
31928: PUSH
31929: LD_INT 0
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: LD_INT 0
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 0
31969: PUSH
31970: LD_INT 1
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 1
31979: NEG
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 1
31990: NEG
31991: PUSH
31992: LD_INT 1
31994: NEG
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: LD_INT 2
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: LD_INT 2
32017: NEG
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 2
32036: PUSH
32037: LD_INT 0
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 2
32046: PUSH
32047: LD_INT 1
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: LD_INT 2
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 0
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 1
32086: NEG
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 2
32097: NEG
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 2
32108: NEG
32109: PUSH
32110: LD_INT 1
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 2
32120: NEG
32121: PUSH
32122: LD_INT 2
32124: NEG
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32151: LD_ADDR_VAR 0 19
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: LD_INT 0
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 0
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 1
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: LD_INT 1
32224: NEG
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: NEG
32233: PUSH
32234: LD_INT 2
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: LD_INT 2
32247: NEG
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 1
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 2
32266: PUSH
32267: LD_INT 0
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 2
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: LD_INT 2
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 0
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: NEG
32317: PUSH
32318: LD_INT 1
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: NEG
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 2
32338: NEG
32339: PUSH
32340: LD_INT 1
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 2
32350: NEG
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32381: LD_ADDR_VAR 0 20
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: LD_INT 1
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 1
32462: NEG
32463: PUSH
32464: LD_INT 2
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: LD_INT 2
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 1
32485: PUSH
32486: LD_INT 1
32488: NEG
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 2
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 2
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 2
32516: PUSH
32517: LD_INT 2
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: LD_INT 2
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: LD_INT 2
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 1
32546: NEG
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 2
32557: NEG
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 2
32568: NEG
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 2
32580: NEG
32581: PUSH
32582: LD_INT 2
32584: NEG
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32611: LD_ADDR_VAR 0 21
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 0
32628: PUSH
32629: LD_INT 1
32631: NEG
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: PUSH
32650: LD_INT 1
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: LD_INT 1
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 1
32669: NEG
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 1
32680: NEG
32681: PUSH
32682: LD_INT 1
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 1
32692: NEG
32693: PUSH
32694: LD_INT 2
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: LD_INT 2
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: LD_INT 1
32718: NEG
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 2
32726: PUSH
32727: LD_INT 0
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 2
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 2
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: LD_INT 2
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: NEG
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 2
32787: NEG
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 2
32798: NEG
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 2
32810: NEG
32811: PUSH
32812: LD_INT 2
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32841: LD_ADDR_VAR 0 22
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: LD_INT 0
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 0
32858: PUSH
32859: LD_INT 1
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 1
32869: PUSH
32870: LD_INT 0
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: LD_INT 1
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: LD_INT 1
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 1
32910: NEG
32911: PUSH
32912: LD_INT 1
32914: NEG
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: LD_INT 2
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: LD_INT 2
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 1
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: PUSH
32957: LD_INT 0
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 2
32976: PUSH
32977: LD_INT 2
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: LD_INT 2
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 2
33017: NEG
33018: PUSH
33019: LD_INT 0
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 2
33028: NEG
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: NEG
33041: PUSH
33042: LD_INT 2
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33071: LD_ADDR_VAR 0 23
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 0
33088: PUSH
33089: LD_INT 1
33091: NEG
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: LD_INT 0
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 1
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 0
33119: PUSH
33120: LD_INT 1
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 1
33129: NEG
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 1
33140: NEG
33141: PUSH
33142: LD_INT 1
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: LD_INT 2
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: LD_INT 2
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 1
33175: PUSH
33176: LD_INT 1
33178: NEG
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 2
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 2
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 2
33206: PUSH
33207: LD_INT 2
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 1
33216: PUSH
33217: LD_INT 2
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: LD_INT 2
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 1
33236: NEG
33237: PUSH
33238: LD_INT 1
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 2
33247: NEG
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 2
33258: NEG
33259: PUSH
33260: LD_INT 1
33262: NEG
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 2
33270: NEG
33271: PUSH
33272: LD_INT 2
33274: NEG
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 2
33282: NEG
33283: PUSH
33284: LD_INT 3
33286: NEG
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 1
33294: NEG
33295: PUSH
33296: LD_INT 3
33298: NEG
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 1
33306: PUSH
33307: LD_INT 2
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 2
33317: PUSH
33318: LD_INT 1
33320: NEG
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33351: LD_ADDR_VAR 0 24
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: LD_INT 0
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 0
33368: PUSH
33369: LD_INT 1
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: LD_INT 0
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 1
33389: PUSH
33390: LD_INT 1
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: LD_INT 1
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 1
33420: NEG
33421: PUSH
33422: LD_INT 1
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 1
33432: NEG
33433: PUSH
33434: LD_INT 2
33436: NEG
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: LD_INT 2
33447: NEG
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: LD_INT 1
33458: NEG
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 2
33466: PUSH
33467: LD_INT 0
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 2
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 2
33486: PUSH
33487: LD_INT 2
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: LD_INT 2
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: LD_INT 2
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: NEG
33517: PUSH
33518: LD_INT 1
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 2
33527: NEG
33528: PUSH
33529: LD_INT 0
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 2
33538: NEG
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 2
33550: NEG
33551: PUSH
33552: LD_INT 2
33554: NEG
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: LD_INT 2
33565: NEG
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 3
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 3
33594: PUSH
33595: LD_INT 2
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33627: LD_ADDR_VAR 0 25
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 1
33655: PUSH
33656: LD_INT 0
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 1
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 0
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: LD_INT 0
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 1
33696: NEG
33697: PUSH
33698: LD_INT 1
33700: NEG
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 1
33708: NEG
33709: PUSH
33710: LD_INT 2
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 0
33720: PUSH
33721: LD_INT 2
33723: NEG
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 1
33731: PUSH
33732: LD_INT 1
33734: NEG
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 2
33742: PUSH
33743: LD_INT 0
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 2
33752: PUSH
33753: LD_INT 1
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 2
33762: PUSH
33763: LD_INT 2
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: LD_INT 2
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 0
33782: PUSH
33783: LD_INT 2
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 1
33792: NEG
33793: PUSH
33794: LD_INT 1
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 2
33803: NEG
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 2
33814: NEG
33815: PUSH
33816: LD_INT 1
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 2
33826: NEG
33827: PUSH
33828: LD_INT 2
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 3
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 3
33848: PUSH
33849: LD_INT 2
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 2
33858: PUSH
33859: LD_INT 3
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 1
33868: PUSH
33869: LD_INT 3
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33901: LD_ADDR_VAR 0 26
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: LD_INT 1
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 0
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 1
33959: NEG
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 1
33970: NEG
33971: PUSH
33972: LD_INT 1
33974: NEG
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: LD_INT 2
33986: NEG
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: LD_INT 2
33997: NEG
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 2
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 2
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 2
34036: PUSH
34037: LD_INT 2
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: LD_INT 2
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 0
34056: PUSH
34057: LD_INT 2
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 2
34077: NEG
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: NEG
34089: PUSH
34090: LD_INT 1
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 2
34100: NEG
34101: PUSH
34102: LD_INT 2
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 2
34112: PUSH
34113: LD_INT 3
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: LD_INT 3
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 1
34132: NEG
34133: PUSH
34134: LD_INT 2
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 2
34143: NEG
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34177: LD_ADDR_VAR 0 27
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: LD_INT 0
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 1
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 0
34225: PUSH
34226: LD_INT 1
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 1
34246: NEG
34247: PUSH
34248: LD_INT 1
34250: NEG
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 1
34258: NEG
34259: PUSH
34260: LD_INT 2
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: LD_INT 2
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 1
34281: PUSH
34282: LD_INT 1
34284: NEG
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 2
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 2
34302: PUSH
34303: LD_INT 1
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 2
34312: PUSH
34313: LD_INT 2
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 1
34322: PUSH
34323: LD_INT 2
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 0
34332: PUSH
34333: LD_INT 2
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 1
34342: NEG
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 2
34353: NEG
34354: PUSH
34355: LD_INT 0
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 2
34364: NEG
34365: PUSH
34366: LD_INT 1
34368: NEG
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 2
34376: NEG
34377: PUSH
34378: LD_INT 2
34380: NEG
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 1
34388: NEG
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 2
34399: NEG
34400: PUSH
34401: LD_INT 1
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 3
34410: NEG
34411: PUSH
34412: LD_INT 1
34414: NEG
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 3
34422: NEG
34423: PUSH
34424: LD_INT 2
34426: NEG
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34457: LD_ADDR_VAR 0 28
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: LD_INT 0
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: LD_INT 1
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 1
34515: NEG
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 1
34526: NEG
34527: PUSH
34528: LD_INT 1
34530: NEG
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: LD_INT 2
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 0
34550: PUSH
34551: LD_INT 2
34553: NEG
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 1
34561: PUSH
34562: LD_INT 1
34564: NEG
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: LD_INT 0
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 2
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: LD_INT 2
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: LD_INT 2
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: LD_INT 2
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: NEG
34623: PUSH
34624: LD_INT 1
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 2
34633: NEG
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 2
34644: NEG
34645: PUSH
34646: LD_INT 1
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 2
34656: NEG
34657: PUSH
34658: LD_INT 2
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 2
34668: NEG
34669: PUSH
34670: LD_INT 3
34672: NEG
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 1
34680: NEG
34681: PUSH
34682: LD_INT 3
34684: NEG
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 3
34692: NEG
34693: PUSH
34694: LD_INT 1
34696: NEG
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 3
34704: NEG
34705: PUSH
34706: LD_INT 2
34708: NEG
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34739: LD_ADDR_VAR 0 29
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: LD_INT 2
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 1
34894: NEG
34895: PUSH
34896: LD_INT 1
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 2
34905: NEG
34906: PUSH
34907: LD_INT 1
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 2
34917: NEG
34918: PUSH
34919: LD_INT 2
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 2
34929: NEG
34930: PUSH
34931: LD_INT 3
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: LD_INT 1
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 3
34952: PUSH
34953: LD_INT 1
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 1
34962: PUSH
34963: LD_INT 3
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 1
34972: NEG
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 3
34983: NEG
34984: PUSH
34985: LD_INT 2
34987: NEG
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35018: LD_ADDR_VAR 0 30
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: LD_INT 0
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 1
35046: PUSH
35047: LD_INT 0
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 0
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 1
35076: NEG
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 1
35099: NEG
35100: PUSH
35101: LD_INT 2
35103: NEG
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 0
35111: PUSH
35112: LD_INT 2
35114: NEG
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 1
35122: PUSH
35123: LD_INT 1
35125: NEG
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 2
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 2
35143: PUSH
35144: LD_INT 1
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 2
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: LD_INT 2
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 1
35173: NEG
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 2
35184: NEG
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 2
35195: NEG
35196: PUSH
35197: LD_INT 1
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: LD_INT 3
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 1
35219: PUSH
35220: LD_INT 2
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 3
35230: PUSH
35231: LD_INT 2
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 2
35240: PUSH
35241: LD_INT 3
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 2
35250: NEG
35251: PUSH
35252: LD_INT 1
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 3
35261: NEG
35262: PUSH
35263: LD_INT 1
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35296: LD_ADDR_VAR 0 31
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: LD_INT 0
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: LD_INT 1
35316: NEG
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: LD_INT 0
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 1
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: LD_INT 1
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 1
35365: NEG
35366: PUSH
35367: LD_INT 1
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 1
35377: NEG
35378: PUSH
35379: LD_INT 2
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: LD_INT 1
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 2
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 2
35410: PUSH
35411: LD_INT 1
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: LD_INT 2
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 1
35430: PUSH
35431: LD_INT 2
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: LD_INT 2
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: NEG
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 2
35461: NEG
35462: PUSH
35463: LD_INT 1
35465: NEG
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 2
35473: NEG
35474: PUSH
35475: LD_INT 2
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 2
35485: NEG
35486: PUSH
35487: LD_INT 3
35489: NEG
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 2
35497: PUSH
35498: LD_INT 1
35500: NEG
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 3
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: LD_INT 3
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 1
35528: NEG
35529: PUSH
35530: LD_INT 2
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 3
35539: NEG
35540: PUSH
35541: LD_INT 2
35543: NEG
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35574: LD_ADDR_VAR 0 32
35578: PUSH
35579: LD_INT 0
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: LD_INT 1
35594: NEG
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 1
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: LD_INT 1
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 1
35632: NEG
35633: PUSH
35634: LD_INT 0
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 1
35643: NEG
35644: PUSH
35645: LD_INT 1
35647: NEG
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: NEG
35656: PUSH
35657: LD_INT 2
35659: NEG
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: LD_INT 2
35670: NEG
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: LD_INT 1
35681: NEG
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: LD_INT 1
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 2
35699: PUSH
35700: LD_INT 2
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: LD_INT 2
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: LD_INT 2
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: LD_INT 1
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 2
35740: NEG
35741: PUSH
35742: LD_INT 0
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 2
35751: NEG
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 1
35763: NEG
35764: PUSH
35765: LD_INT 3
35767: NEG
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 1
35775: PUSH
35776: LD_INT 2
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 3
35786: PUSH
35787: LD_INT 2
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 2
35796: PUSH
35797: LD_INT 3
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 2
35806: NEG
35807: PUSH
35808: LD_INT 1
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 3
35817: NEG
35818: PUSH
35819: LD_INT 1
35821: NEG
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35852: LD_ADDR_VAR 0 33
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 1
35872: NEG
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: NEG
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 1
35933: NEG
35934: PUSH
35935: LD_INT 2
35937: NEG
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: LD_INT 1
35948: NEG
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 2
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 2
35966: PUSH
35967: LD_INT 1
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: LD_INT 2
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: LD_INT 2
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: LD_INT 1
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 2
36007: NEG
36008: PUSH
36009: LD_INT 0
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 2
36018: NEG
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 2
36030: NEG
36031: PUSH
36032: LD_INT 2
36034: NEG
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 2
36042: NEG
36043: PUSH
36044: LD_INT 3
36046: NEG
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 2
36054: PUSH
36055: LD_INT 1
36057: NEG
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 3
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: LD_INT 3
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: LD_INT 2
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 3
36096: NEG
36097: PUSH
36098: LD_INT 2
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36131: LD_ADDR_VAR 0 34
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: LD_INT 0
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: LD_INT 1
36151: NEG
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 0
36179: PUSH
36180: LD_INT 1
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 1
36200: NEG
36201: PUSH
36202: LD_INT 1
36204: NEG
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 1
36212: NEG
36213: PUSH
36214: LD_INT 2
36216: NEG
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: LD_INT 2
36227: NEG
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: LD_INT 1
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 2
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 2
36256: PUSH
36257: LD_INT 2
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 1
36266: PUSH
36267: LD_INT 2
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 1
36276: NEG
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 2
36287: NEG
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 2
36298: NEG
36299: PUSH
36300: LD_INT 1
36302: NEG
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 2
36310: NEG
36311: PUSH
36312: LD_INT 2
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 1
36322: NEG
36323: PUSH
36324: LD_INT 3
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: PUSH
36335: LD_INT 2
36337: NEG
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 3
36345: PUSH
36346: LD_INT 2
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 2
36355: PUSH
36356: LD_INT 3
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 2
36365: NEG
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 3
36376: NEG
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36411: LD_ADDR_VAR 0 35
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 1
36439: PUSH
36440: LD_INT 0
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: LD_INT 1
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 0
36459: PUSH
36460: LD_INT 1
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 1
36480: NEG
36481: PUSH
36482: LD_INT 1
36484: NEG
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 2
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 2
36502: NEG
36503: PUSH
36504: LD_INT 1
36506: NEG
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36523: LD_ADDR_VAR 0 36
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 0
36540: PUSH
36541: LD_INT 1
36543: NEG
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: PUSH
36552: LD_INT 0
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 1
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: LD_INT 1
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 1
36581: NEG
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 1
36592: NEG
36593: PUSH
36594: LD_INT 1
36596: NEG
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 1
36604: NEG
36605: PUSH
36606: LD_INT 2
36608: NEG
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: LD_INT 2
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36635: LD_ADDR_VAR 0 37
36639: PUSH
36640: LD_INT 0
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 0
36652: PUSH
36653: LD_INT 1
36655: NEG
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 1
36663: PUSH
36664: LD_INT 0
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 1
36673: PUSH
36674: LD_INT 1
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 0
36683: PUSH
36684: LD_INT 1
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 1
36693: NEG
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: LD_INT 1
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36747: LD_ADDR_VAR 0 38
36751: PUSH
36752: LD_INT 0
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 0
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: PUSH
36776: LD_INT 0
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 1
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 1
36805: NEG
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 1
36816: NEG
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 2
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 2
36838: NEG
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36859: LD_ADDR_VAR 0 39
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 0
36876: PUSH
36877: LD_INT 1
36879: NEG
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 1
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: LD_INT 1
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: LD_INT 1
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 1
36917: NEG
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 1
36928: NEG
36929: PUSH
36930: LD_INT 1
36932: NEG
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 1
36940: NEG
36941: PUSH
36942: LD_INT 2
36944: NEG
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 1
36952: PUSH
36953: LD_INT 2
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36971: LD_ADDR_VAR 0 40
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: LD_INT 1
36991: NEG
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: LD_INT 0
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 1
37040: NEG
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 1
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 1
37063: NEG
37064: PUSH
37065: LD_INT 1
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37083: LD_ADDR_VAR 0 41
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: LD_INT 1
37103: NEG
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 1
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: NEG
37153: PUSH
37154: LD_INT 1
37156: NEG
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: LD_INT 2
37168: NEG
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 2
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 2
37197: PUSH
37198: LD_INT 1
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 2
37207: PUSH
37208: LD_INT 2
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: LD_INT 2
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 1
37227: NEG
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 2
37238: NEG
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 2
37249: NEG
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 2
37261: NEG
37262: PUSH
37263: LD_INT 2
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 2
37273: NEG
37274: PUSH
37275: LD_INT 3
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 2
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 3
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 3
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 3
37316: PUSH
37317: LD_INT 2
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 3
37326: PUSH
37327: LD_INT 3
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 2
37336: PUSH
37337: LD_INT 3
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 2
37346: NEG
37347: PUSH
37348: LD_INT 1
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 3
37357: NEG
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 3
37368: NEG
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 3
37380: NEG
37381: PUSH
37382: LD_INT 2
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 3
37392: NEG
37393: PUSH
37394: LD_INT 3
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37433: LD_ADDR_VAR 0 42
37437: PUSH
37438: LD_INT 0
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: LD_INT 1
37453: NEG
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 1
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: LD_INT 1
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: LD_INT 1
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: NEG
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 1
37502: NEG
37503: PUSH
37504: LD_INT 1
37506: NEG
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 1
37514: NEG
37515: PUSH
37516: LD_INT 2
37518: NEG
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: LD_INT 2
37529: NEG
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: LD_INT 1
37540: NEG
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 2
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 2
37558: PUSH
37559: LD_INT 2
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 1
37568: PUSH
37569: LD_INT 2
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 0
37578: PUSH
37579: LD_INT 2
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 2
37599: NEG
37600: PUSH
37601: LD_INT 1
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 2
37611: NEG
37612: PUSH
37613: LD_INT 2
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 2
37623: NEG
37624: PUSH
37625: LD_INT 3
37627: NEG
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 1
37635: NEG
37636: PUSH
37637: LD_INT 3
37639: NEG
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: LD_INT 3
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 1
37658: PUSH
37659: LD_INT 2
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 3
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 3
37679: PUSH
37680: LD_INT 3
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 2
37689: PUSH
37690: LD_INT 3
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 1
37699: PUSH
37700: LD_INT 3
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: LD_INT 3
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: LD_INT 2
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 3
37730: NEG
37731: PUSH
37732: LD_INT 2
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 3
37742: NEG
37743: PUSH
37744: LD_INT 3
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37783: LD_ADDR_VAR 0 43
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: LD_INT 0
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 0
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: LD_INT 0
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 1
37852: NEG
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 1
37864: NEG
37865: PUSH
37866: LD_INT 2
37868: NEG
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: LD_INT 2
37879: NEG
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: LD_INT 1
37890: NEG
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 2
37898: PUSH
37899: LD_INT 0
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 2
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 1
37918: PUSH
37919: LD_INT 2
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: LD_INT 2
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 2
37949: NEG
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 2
37960: NEG
37961: PUSH
37962: LD_INT 1
37964: NEG
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 1
37972: NEG
37973: PUSH
37974: LD_INT 3
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: LD_INT 3
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 2
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 3
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 3
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 1
38037: PUSH
38038: LD_INT 3
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: LD_INT 3
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: NEG
38058: PUSH
38059: LD_INT 2
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 2
38068: NEG
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 3
38079: NEG
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 3
38090: NEG
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38131: LD_ADDR_VAR 0 44
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 0
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: LD_INT 1
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 1
38189: NEG
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: LD_INT 1
38204: NEG
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: LD_INT 2
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: LD_INT 2
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: LD_INT 1
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 2
38286: NEG
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 2
38297: NEG
38298: PUSH
38299: LD_INT 1
38301: NEG
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 2
38309: NEG
38310: PUSH
38311: LD_INT 2
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 2
38321: NEG
38322: PUSH
38323: LD_INT 3
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 3
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 3
38354: PUSH
38355: LD_INT 1
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 3
38364: PUSH
38365: LD_INT 2
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 3
38374: PUSH
38375: LD_INT 3
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 2
38384: PUSH
38385: LD_INT 3
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 2
38394: NEG
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 3
38405: NEG
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 3
38416: NEG
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 3
38428: NEG
38429: PUSH
38430: LD_INT 2
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 3
38440: NEG
38441: PUSH
38442: LD_INT 3
38444: NEG
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38481: LD_ADDR_VAR 0 45
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 0
38529: PUSH
38530: LD_INT 1
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 1
38539: NEG
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 1
38550: NEG
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PUSH
38564: LD_INT 2
38566: NEG
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: LD_INT 2
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: LD_INT 1
38588: NEG
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: LD_INT 2
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: LD_INT 2
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: LD_INT 2
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 2
38647: NEG
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 2
38659: NEG
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 2
38671: NEG
38672: PUSH
38673: LD_INT 3
38675: NEG
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 1
38683: NEG
38684: PUSH
38685: LD_INT 3
38687: NEG
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: LD_INT 3
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: LD_INT 2
38709: NEG
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 3
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 3
38727: PUSH
38728: LD_INT 3
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 2
38737: PUSH
38738: LD_INT 3
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: LD_INT 3
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: LD_INT 3
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 3
38778: NEG
38779: PUSH
38780: LD_INT 2
38782: NEG
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 3
38790: NEG
38791: PUSH
38792: LD_INT 3
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38831: LD_ADDR_VAR 0 46
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 1
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: LD_INT 2
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 2
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 2
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 1
38986: NEG
38987: PUSH
38988: LD_INT 1
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 2
38997: NEG
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 2
39008: NEG
39009: PUSH
39010: LD_INT 1
39012: NEG
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: LD_INT 3
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: LD_INT 3
39035: NEG
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: LD_INT 2
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 3
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 3
39075: PUSH
39076: LD_INT 1
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: LD_INT 3
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: LD_INT 3
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 1
39105: NEG
39106: PUSH
39107: LD_INT 2
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 2
39116: NEG
39117: PUSH
39118: LD_INT 1
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 3
39127: NEG
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 3
39138: NEG
39139: PUSH
39140: LD_INT 1
39142: NEG
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39179: LD_ADDR_VAR 0 47
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: NEG
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 1
39260: NEG
39261: PUSH
39262: LD_INT 2
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 2
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 2
39294: NEG
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 2
39306: NEG
39307: PUSH
39308: LD_INT 2
39310: NEG
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39330: LD_ADDR_VAR 0 48
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: LD_INT 1
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: LD_INT 2
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: LD_INT 2
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: LD_INT 1
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 2
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 2
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39477: LD_ADDR_VAR 0 49
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: LD_INT 1
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 2
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 2
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 2
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: LD_INT 2
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39621: LD_ADDR_VAR 0 50
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: LD_INT 0
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: NEG
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: LD_INT 1
39694: NEG
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: LD_INT 2
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39765: LD_ADDR_VAR 0 51
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 1
39823: NEG
39824: PUSH
39825: LD_INT 0
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 1
39834: NEG
39835: PUSH
39836: LD_INT 1
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: LD_INT 2
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: LD_INT 2
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: NEG
39867: PUSH
39868: LD_INT 1
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 2
39877: NEG
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 2
39888: NEG
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39912: LD_ADDR_VAR 0 52
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 0
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: LD_INT 1
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: NEG
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: LD_INT 2
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 2
40016: NEG
40017: PUSH
40018: LD_INT 0
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 2
40027: NEG
40028: PUSH
40029: LD_INT 1
40031: NEG
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 2
40039: NEG
40040: PUSH
40041: LD_INT 2
40043: NEG
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40063: LD_ADDR_VAR 0 53
40067: PUSH
40068: LD_INT 0
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 0
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 1
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: NEG
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: LD_INT 2
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: LD_INT 2
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 2
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 2
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 2
40198: PUSH
40199: LD_INT 2
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: LD_INT 2
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 2
40250: NEG
40251: PUSH
40252: LD_INT 1
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 2
40262: NEG
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40293: LD_ADDR_VAR 0 54
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 1
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: NEG
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: LD_INT 2
40378: NEG
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: LD_INT 2
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 2
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 2
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: LD_INT 2
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: LD_INT 2
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 2
40469: NEG
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: NEG
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: LD_INT 2
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40523: LD_ADDR_VAR 0 55
40527: PUSH
40528: LD_INT 0
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: NEG
40605: PUSH
40606: LD_INT 2
40608: NEG
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 2
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 2
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 2
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 2
40658: PUSH
40659: LD_INT 2
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: LD_INT 2
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: LD_INT 2
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 2
40699: NEG
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 2
40710: NEG
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 2
40722: NEG
40723: PUSH
40724: LD_INT 2
40726: NEG
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40753: LD_ADDR_VAR 0 56
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: NEG
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: NEG
40835: PUSH
40836: LD_INT 2
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 2
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 2
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 2
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 2
40888: PUSH
40889: LD_INT 2
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: LD_INT 2
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 2
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 2
40929: NEG
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 2
40940: NEG
40941: PUSH
40942: LD_INT 1
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 2
40952: NEG
40953: PUSH
40954: LD_INT 2
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40983: LD_ADDR_VAR 0 57
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: LD_INT 1
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: PUSH
41066: LD_INT 2
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 2
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 2
41118: PUSH
41119: LD_INT 2
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: LD_INT 2
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 2
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 1
41148: NEG
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 2
41159: NEG
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 2
41170: NEG
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 2
41182: NEG
41183: PUSH
41184: LD_INT 2
41186: NEG
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41213: LD_ADDR_VAR 0 58
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: NEG
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: LD_INT 2
41298: NEG
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: LD_INT 2
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 2
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 2
41338: PUSH
41339: LD_INT 1
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: LD_INT 2
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: LD_INT 2
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 2
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: NEG
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 2
41412: NEG
41413: PUSH
41414: LD_INT 2
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41443: LD_ADDR_VAR 0 59
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41531: LD_ADDR_VAR 0 60
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 1
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 1
41589: NEG
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41619: LD_ADDR_VAR 0 61
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41707: LD_ADDR_VAR 0 62
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: LD_INT 1
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 1
41765: NEG
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41795: LD_ADDR_VAR 0 63
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: LD_INT 1
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: LD_INT 1
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41883: LD_ADDR_VAR 0 64
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: ST_TO_ADDR
// end ; 1 :
41971: GO 47868
41973: LD_INT 1
41975: DOUBLE
41976: EQUAL
41977: IFTRUE 41981
41979: GO 44604
41981: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41982: LD_ADDR_VAR 0 11
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: LD_INT 3
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: LD_INT 3
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: LD_INT 2
42015: NEG
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: LIST
42025: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42026: LD_ADDR_VAR 0 12
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 3
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 3
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: LIST
42066: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42067: LD_ADDR_VAR 0 13
42071: PUSH
42072: LD_INT 3
42074: PUSH
42075: LD_INT 2
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 3
42084: PUSH
42085: LD_INT 3
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: LD_INT 3
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: LIST
42106: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42107: LD_ADDR_VAR 0 14
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: LD_INT 3
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: LD_INT 3
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: LIST
42147: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42148: LD_ADDR_VAR 0 15
42152: PUSH
42153: LD_INT 2
42155: NEG
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 3
42166: NEG
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 3
42177: NEG
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42192: LD_ADDR_VAR 0 16
42196: PUSH
42197: LD_INT 2
42199: NEG
42200: PUSH
42201: LD_INT 3
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 3
42211: NEG
42212: PUSH
42213: LD_INT 2
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 3
42223: NEG
42224: PUSH
42225: LD_INT 3
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: LIST
42237: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42238: LD_ADDR_VAR 0 17
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: LD_INT 3
42249: NEG
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 3
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: LD_INT 2
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: LIST
42281: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42282: LD_ADDR_VAR 0 18
42286: PUSH
42287: LD_INT 2
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 3
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 3
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: LIST
42322: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42323: LD_ADDR_VAR 0 19
42327: PUSH
42328: LD_INT 3
42330: PUSH
42331: LD_INT 2
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 3
42340: PUSH
42341: LD_INT 3
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 2
42350: PUSH
42351: LD_INT 3
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: LIST
42362: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42363: LD_ADDR_VAR 0 20
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: LD_INT 3
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 0
42380: PUSH
42381: LD_INT 3
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: LD_INT 2
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: LIST
42403: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42404: LD_ADDR_VAR 0 21
42408: PUSH
42409: LD_INT 2
42411: NEG
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 3
42422: NEG
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 3
42433: NEG
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42448: LD_ADDR_VAR 0 22
42452: PUSH
42453: LD_INT 2
42455: NEG
42456: PUSH
42457: LD_INT 3
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 3
42467: NEG
42468: PUSH
42469: LD_INT 2
42471: NEG
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 3
42479: NEG
42480: PUSH
42481: LD_INT 3
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: LIST
42493: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42494: LD_ADDR_VAR 0 23
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: LD_INT 3
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: LD_INT 4
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: LD_INT 3
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: LIST
42537: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42538: LD_ADDR_VAR 0 24
42542: PUSH
42543: LD_INT 3
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 3
42555: PUSH
42556: LD_INT 1
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 4
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: LIST
42578: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42579: LD_ADDR_VAR 0 25
42583: PUSH
42584: LD_INT 3
42586: PUSH
42587: LD_INT 3
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 4
42596: PUSH
42597: LD_INT 3
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 3
42606: PUSH
42607: LD_INT 4
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: LIST
42618: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42619: LD_ADDR_VAR 0 26
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: LD_INT 3
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 4
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: LD_INT 3
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: LIST
42659: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42660: LD_ADDR_VAR 0 27
42664: PUSH
42665: LD_INT 3
42667: NEG
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 3
42678: NEG
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 4
42689: NEG
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: LIST
42703: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42704: LD_ADDR_VAR 0 28
42708: PUSH
42709: LD_INT 3
42711: NEG
42712: PUSH
42713: LD_INT 3
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 3
42723: NEG
42724: PUSH
42725: LD_INT 4
42727: NEG
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 4
42735: NEG
42736: PUSH
42737: LD_INT 3
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: LIST
42749: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42750: LD_ADDR_VAR 0 29
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: LD_INT 3
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: LD_INT 3
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: LD_INT 2
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: LD_INT 4
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_INT 4
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: LD_INT 3
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: LD_INT 5
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 5
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: LD_INT 4
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: LD_INT 6
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: LD_INT 6
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: LD_INT 5
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42905: LD_ADDR_VAR 0 30
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 3
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 3
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 3
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 4
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 4
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 4
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 5
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 5
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 5
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 6
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 6
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43048: LD_ADDR_VAR 0 31
43052: PUSH
43053: LD_INT 3
43055: PUSH
43056: LD_INT 2
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 3
43065: PUSH
43066: LD_INT 3
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: LD_INT 3
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 4
43085: PUSH
43086: LD_INT 3
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 4
43095: PUSH
43096: LD_INT 4
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 3
43105: PUSH
43106: LD_INT 4
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 5
43115: PUSH
43116: LD_INT 4
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 5
43125: PUSH
43126: LD_INT 5
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 4
43135: PUSH
43136: LD_INT 5
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 6
43145: PUSH
43146: LD_INT 5
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 6
43155: PUSH
43156: LD_INT 6
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 5
43165: PUSH
43166: LD_INT 6
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43187: LD_ADDR_VAR 0 32
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: LD_INT 3
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 3
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: NEG
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 4
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: LD_INT 4
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 3
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: LD_INT 5
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: LD_INT 5
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 4
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: LD_INT 6
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: LD_INT 6
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: LD_INT 5
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43330: LD_ADDR_VAR 0 33
43334: PUSH
43335: LD_INT 2
43337: NEG
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 3
43348: NEG
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 3
43359: NEG
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 3
43371: NEG
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 4
43382: NEG
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 4
43393: NEG
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 4
43405: NEG
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 5
43416: NEG
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 5
43427: NEG
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 5
43439: NEG
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 6
43450: NEG
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 6
43461: NEG
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43485: LD_ADDR_VAR 0 34
43489: PUSH
43490: LD_INT 2
43492: NEG
43493: PUSH
43494: LD_INT 3
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 3
43504: NEG
43505: PUSH
43506: LD_INT 2
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 3
43516: NEG
43517: PUSH
43518: LD_INT 3
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 3
43528: NEG
43529: PUSH
43530: LD_INT 4
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 4
43540: NEG
43541: PUSH
43542: LD_INT 3
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 4
43552: NEG
43553: PUSH
43554: LD_INT 4
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 4
43564: NEG
43565: PUSH
43566: LD_INT 5
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 5
43576: NEG
43577: PUSH
43578: LD_INT 4
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 5
43588: NEG
43589: PUSH
43590: LD_INT 5
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 5
43600: NEG
43601: PUSH
43602: LD_INT 6
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 6
43612: NEG
43613: PUSH
43614: LD_INT 5
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 6
43624: NEG
43625: PUSH
43626: LD_INT 6
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43648: LD_ADDR_VAR 0 41
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: LD_INT 2
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: LD_INT 3
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: LD_INT 2
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: LIST
43691: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43692: LD_ADDR_VAR 0 42
43696: PUSH
43697: LD_INT 2
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 2
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 3
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: LIST
43732: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43733: LD_ADDR_VAR 0 43
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 3
43750: PUSH
43751: LD_INT 2
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: LD_INT 3
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: LIST
43772: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43773: LD_ADDR_VAR 0 44
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: LD_INT 2
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: LD_INT 3
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: LD_INT 2
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: LIST
43813: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43814: LD_ADDR_VAR 0 45
43818: PUSH
43819: LD_INT 2
43821: NEG
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: NEG
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 3
43843: NEG
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43858: LD_ADDR_VAR 0 46
43862: PUSH
43863: LD_INT 2
43865: NEG
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 2
43877: NEG
43878: PUSH
43879: LD_INT 3
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 3
43889: NEG
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: LIST
43903: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43904: LD_ADDR_VAR 0 47
43908: PUSH
43909: LD_INT 2
43911: NEG
43912: PUSH
43913: LD_INT 3
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: LD_INT 3
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43937: LD_ADDR_VAR 0 48
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43968: LD_ADDR_VAR 0 49
43972: PUSH
43973: LD_INT 3
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 3
43985: PUSH
43986: LD_INT 2
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43997: LD_ADDR_VAR 0 50
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: LD_INT 3
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: LD_INT 3
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44026: LD_ADDR_VAR 0 51
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 2
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 2
44044: NEG
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44057: LD_ADDR_VAR 0 52
44061: PUSH
44062: LD_INT 3
44064: NEG
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 3
44076: NEG
44077: PUSH
44078: LD_INT 2
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44090: LD_ADDR_VAR 0 53
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: LD_INT 3
44101: NEG
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: LD_INT 3
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: LIST
44133: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44134: LD_ADDR_VAR 0 54
44138: PUSH
44139: LD_INT 2
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 3
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 3
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: LIST
44174: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44175: LD_ADDR_VAR 0 55
44179: PUSH
44180: LD_INT 3
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 3
44192: PUSH
44193: LD_INT 3
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: LD_INT 3
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: LIST
44214: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44215: LD_ADDR_VAR 0 56
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: LD_INT 3
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: LD_INT 3
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: LD_INT 2
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: LIST
44255: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44256: LD_ADDR_VAR 0 57
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 3
44274: NEG
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 3
44285: NEG
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: LIST
44299: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44300: LD_ADDR_VAR 0 58
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: LD_INT 3
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 3
44319: NEG
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 3
44331: NEG
44332: PUSH
44333: LD_INT 3
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: LIST
44345: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44346: LD_ADDR_VAR 0 59
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: LD_INT 2
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: LD_INT 2
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: LIST
44389: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44390: LD_ADDR_VAR 0 60
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 2
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: LIST
44430: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44431: LD_ADDR_VAR 0 61
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: LIST
44470: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44471: LD_ADDR_VAR 0 62
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 2
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: LIST
44511: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44512: LD_ADDR_VAR 0 63
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 2
44530: NEG
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: LIST
44555: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44556: LD_ADDR_VAR 0 64
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: LD_INT 2
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 2
44587: NEG
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: LIST
44601: ST_TO_ADDR
// end ; 2 :
44602: GO 47868
44604: LD_INT 2
44606: DOUBLE
44607: EQUAL
44608: IFTRUE 44612
44610: GO 47867
44612: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44613: LD_ADDR_VAR 0 29
44617: PUSH
44618: LD_INT 4
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 4
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 5
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 5
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 4
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 3
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 3
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 3
44692: PUSH
44693: LD_INT 2
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 5
44703: PUSH
44704: LD_INT 2
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 3
44713: PUSH
44714: LD_INT 3
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 3
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 4
44733: PUSH
44734: LD_INT 3
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 4
44743: PUSH
44744: LD_INT 4
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 3
44753: PUSH
44754: LD_INT 4
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 3
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 4
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 4
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 4
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 3
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: LD_INT 4
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: LD_INT 5
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 5
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: LD_INT 4
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: LD_INT 3
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 5
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: LD_INT 3
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 3
44896: NEG
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 3
44907: NEG
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 2
44919: NEG
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 3
44941: NEG
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 4
44952: NEG
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 4
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 4
44975: NEG
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 4
44998: NEG
44999: PUSH
45000: LD_INT 4
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 4
45010: NEG
45011: PUSH
45012: LD_INT 5
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 3
45022: NEG
45023: PUSH
45024: LD_INT 4
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 3
45034: NEG
45035: PUSH
45036: LD_INT 3
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 4
45046: NEG
45047: PUSH
45048: LD_INT 3
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 5
45058: NEG
45059: PUSH
45060: LD_INT 4
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 5
45070: NEG
45071: PUSH
45072: LD_INT 5
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 3
45082: NEG
45083: PUSH
45084: LD_INT 5
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 5
45094: NEG
45095: PUSH
45096: LD_INT 3
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45151: LD_ADDR_VAR 0 30
45155: PUSH
45156: LD_INT 4
45158: PUSH
45159: LD_INT 4
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 4
45168: PUSH
45169: LD_INT 3
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 5
45178: PUSH
45179: LD_INT 4
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 5
45188: PUSH
45189: LD_INT 5
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 4
45198: PUSH
45199: LD_INT 5
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 3
45208: PUSH
45209: LD_INT 4
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 3
45218: PUSH
45219: LD_INT 3
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 5
45228: PUSH
45229: LD_INT 3
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 3
45238: PUSH
45239: LD_INT 5
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 3
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: LD_INT 3
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 4
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: LD_INT 4
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 2
45320: PUSH
45321: LD_INT 4
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 4
45341: NEG
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 4
45352: NEG
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 3
45364: NEG
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 3
45375: NEG
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 4
45386: NEG
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 5
45397: NEG
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 5
45408: NEG
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 5
45420: NEG
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 3
45432: NEG
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 3
45443: NEG
45444: PUSH
45445: LD_INT 3
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 3
45455: NEG
45456: PUSH
45457: LD_INT 4
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: LD_INT 3
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: NEG
45480: PUSH
45481: LD_INT 2
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 3
45491: NEG
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 4
45503: NEG
45504: PUSH
45505: LD_INT 3
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 4
45515: NEG
45516: PUSH
45517: LD_INT 4
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 2
45527: NEG
45528: PUSH
45529: LD_INT 4
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 4
45539: NEG
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 4
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 5
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: LD_INT 4
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 3
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 3
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: LD_INT 4
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: LD_INT 5
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 2
45630: PUSH
45631: LD_INT 3
45633: NEG
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 2
45641: NEG
45642: PUSH
45643: LD_INT 5
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45698: LD_ADDR_VAR 0 31
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 4
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: LD_INT 3
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: LD_INT 4
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: LD_INT 5
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: LD_INT 5
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: LD_INT 4
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: LD_INT 3
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 2
45777: PUSH
45778: LD_INT 5
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: LD_INT 3
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 3
45798: NEG
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 3
45809: NEG
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 2
45821: NEG
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 3
45843: NEG
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 4
45854: NEG
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 4
45865: NEG
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 4
45877: NEG
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 4
45900: NEG
45901: PUSH
45902: LD_INT 4
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 4
45912: NEG
45913: PUSH
45914: LD_INT 5
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 3
45924: NEG
45925: PUSH
45926: LD_INT 4
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 3
45936: NEG
45937: PUSH
45938: LD_INT 3
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 4
45948: NEG
45949: PUSH
45950: LD_INT 3
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 5
45960: NEG
45961: PUSH
45962: LD_INT 4
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 5
45972: NEG
45973: PUSH
45974: LD_INT 5
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 3
45984: NEG
45985: PUSH
45986: LD_INT 5
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 5
45996: NEG
45997: PUSH
45998: LD_INT 3
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 3
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: LD_INT 4
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: LD_INT 3
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 3
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: LD_INT 4
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: LD_INT 4
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 4
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 4
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 5
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 5
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 4
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 3
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 3
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 3
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 5
46193: PUSH
46194: LD_INT 2
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46248: LD_ADDR_VAR 0 32
46252: PUSH
46253: LD_INT 4
46255: NEG
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 4
46266: NEG
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 3
46278: NEG
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 3
46289: NEG
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 4
46300: NEG
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 5
46311: NEG
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 5
46322: NEG
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 5
46334: NEG
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 3
46346: NEG
46347: PUSH
46348: LD_INT 2
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 3
46357: NEG
46358: PUSH
46359: LD_INT 3
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 3
46369: NEG
46370: PUSH
46371: LD_INT 4
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: LD_INT 3
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 3
46405: NEG
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 4
46417: NEG
46418: PUSH
46419: LD_INT 3
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 4
46429: NEG
46430: PUSH
46431: LD_INT 4
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 2
46441: NEG
46442: PUSH
46443: LD_INT 4
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 4
46453: NEG
46454: PUSH
46455: LD_INT 2
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 4
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 5
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 4
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: LD_INT 3
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 3
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: PUSH
46522: LD_INT 4
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: LD_INT 5
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 3
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: LD_INT 5
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 3
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 3
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 4
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 4
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 3
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 4
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 4
46660: PUSH
46661: LD_INT 4
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 4
46670: PUSH
46671: LD_INT 3
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 5
46680: PUSH
46681: LD_INT 4
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 5
46690: PUSH
46691: LD_INT 5
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 4
46700: PUSH
46701: LD_INT 5
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 3
46710: PUSH
46711: LD_INT 4
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 3
46720: PUSH
46721: LD_INT 3
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 5
46730: PUSH
46731: LD_INT 3
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 3
46740: PUSH
46741: LD_INT 5
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46795: LD_ADDR_VAR 0 33
46799: PUSH
46800: LD_INT 4
46802: NEG
46803: PUSH
46804: LD_INT 4
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 4
46814: NEG
46815: PUSH
46816: LD_INT 5
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 3
46826: NEG
46827: PUSH
46828: LD_INT 4
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 3
46838: NEG
46839: PUSH
46840: LD_INT 3
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 4
46850: NEG
46851: PUSH
46852: LD_INT 3
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 5
46862: NEG
46863: PUSH
46864: LD_INT 4
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 5
46874: NEG
46875: PUSH
46876: LD_INT 5
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 3
46886: NEG
46887: PUSH
46888: LD_INT 5
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 5
46898: NEG
46899: PUSH
46900: LD_INT 3
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 3
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 4
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: LD_INT 3
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 2
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: LD_INT 3
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: LD_INT 4
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 2
46989: PUSH
46990: LD_INT 2
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: LD_INT 4
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 4
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 4
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 5
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 5
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 4
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 3
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 3
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 3
47084: PUSH
47085: LD_INT 2
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 5
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 3
47105: PUSH
47106: LD_INT 3
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 3
47115: PUSH
47116: LD_INT 2
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 4
47125: PUSH
47126: LD_INT 3
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 4
47135: PUSH
47136: LD_INT 4
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 3
47145: PUSH
47146: LD_INT 4
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: LD_INT 3
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 4
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: LD_INT 4
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 4
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 3
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 4
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: LD_INT 5
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: LD_INT 5
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: LD_INT 4
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 3
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: LD_INT 5
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: LD_INT 3
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47333: LD_ADDR_VAR 0 34
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: LD_INT 4
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 5
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 4
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: LD_INT 3
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: LD_INT 3
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: LD_INT 4
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: LD_INT 5
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: LD_INT 3
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: LD_INT 5
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 3
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 3
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 4
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 4
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 3
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: LD_INT 2
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 4
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 4
47535: PUSH
47536: LD_INT 4
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 4
47545: PUSH
47546: LD_INT 3
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 5
47555: PUSH
47556: LD_INT 4
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 5
47565: PUSH
47566: LD_INT 5
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 4
47575: PUSH
47576: LD_INT 5
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 3
47585: PUSH
47586: LD_INT 4
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 3
47595: PUSH
47596: LD_INT 3
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 5
47605: PUSH
47606: LD_INT 3
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 3
47615: PUSH
47616: LD_INT 5
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 3
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: LD_INT 3
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: LD_INT 4
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 4
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: LD_INT 3
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: LD_INT 2
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: LD_INT 4
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 4
47718: NEG
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 4
47729: NEG
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 3
47741: NEG
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 3
47752: NEG
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 4
47763: NEG
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 5
47774: NEG
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 5
47785: NEG
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 5
47797: NEG
47798: PUSH
47799: LD_INT 2
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 3
47809: NEG
47810: PUSH
47811: LD_INT 2
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: ST_TO_ADDR
// end ; end ;
47865: GO 47868
47867: POP
// case btype of b_depot , b_warehouse :
47868: LD_VAR 0 1
47872: PUSH
47873: LD_INT 0
47875: DOUBLE
47876: EQUAL
47877: IFTRUE 47887
47879: LD_INT 1
47881: DOUBLE
47882: EQUAL
47883: IFTRUE 47887
47885: GO 48088
47887: POP
// case nation of nation_american :
47888: LD_VAR 0 5
47892: PUSH
47893: LD_INT 1
47895: DOUBLE
47896: EQUAL
47897: IFTRUE 47901
47899: GO 47957
47901: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47902: LD_ADDR_VAR 0 9
47906: PUSH
47907: LD_VAR 0 11
47911: PUSH
47912: LD_VAR 0 12
47916: PUSH
47917: LD_VAR 0 13
47921: PUSH
47922: LD_VAR 0 14
47926: PUSH
47927: LD_VAR 0 15
47931: PUSH
47932: LD_VAR 0 16
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: PUSH
47945: LD_VAR 0 4
47949: PUSH
47950: LD_INT 1
47952: PLUS
47953: ARRAY
47954: ST_TO_ADDR
47955: GO 48086
47957: LD_INT 2
47959: DOUBLE
47960: EQUAL
47961: IFTRUE 47965
47963: GO 48021
47965: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47966: LD_ADDR_VAR 0 9
47970: PUSH
47971: LD_VAR 0 17
47975: PUSH
47976: LD_VAR 0 18
47980: PUSH
47981: LD_VAR 0 19
47985: PUSH
47986: LD_VAR 0 20
47990: PUSH
47991: LD_VAR 0 21
47995: PUSH
47996: LD_VAR 0 22
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: PUSH
48009: LD_VAR 0 4
48013: PUSH
48014: LD_INT 1
48016: PLUS
48017: ARRAY
48018: ST_TO_ADDR
48019: GO 48086
48021: LD_INT 3
48023: DOUBLE
48024: EQUAL
48025: IFTRUE 48029
48027: GO 48085
48029: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48030: LD_ADDR_VAR 0 9
48034: PUSH
48035: LD_VAR 0 23
48039: PUSH
48040: LD_VAR 0 24
48044: PUSH
48045: LD_VAR 0 25
48049: PUSH
48050: LD_VAR 0 26
48054: PUSH
48055: LD_VAR 0 27
48059: PUSH
48060: LD_VAR 0 28
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: PUSH
48073: LD_VAR 0 4
48077: PUSH
48078: LD_INT 1
48080: PLUS
48081: ARRAY
48082: ST_TO_ADDR
48083: GO 48086
48085: POP
48086: GO 48641
48088: LD_INT 2
48090: DOUBLE
48091: EQUAL
48092: IFTRUE 48102
48094: LD_INT 3
48096: DOUBLE
48097: EQUAL
48098: IFTRUE 48102
48100: GO 48158
48102: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48103: LD_ADDR_VAR 0 9
48107: PUSH
48108: LD_VAR 0 29
48112: PUSH
48113: LD_VAR 0 30
48117: PUSH
48118: LD_VAR 0 31
48122: PUSH
48123: LD_VAR 0 32
48127: PUSH
48128: LD_VAR 0 33
48132: PUSH
48133: LD_VAR 0 34
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: PUSH
48146: LD_VAR 0 4
48150: PUSH
48151: LD_INT 1
48153: PLUS
48154: ARRAY
48155: ST_TO_ADDR
48156: GO 48641
48158: LD_INT 16
48160: DOUBLE
48161: EQUAL
48162: IFTRUE 48220
48164: LD_INT 17
48166: DOUBLE
48167: EQUAL
48168: IFTRUE 48220
48170: LD_INT 18
48172: DOUBLE
48173: EQUAL
48174: IFTRUE 48220
48176: LD_INT 19
48178: DOUBLE
48179: EQUAL
48180: IFTRUE 48220
48182: LD_INT 22
48184: DOUBLE
48185: EQUAL
48186: IFTRUE 48220
48188: LD_INT 20
48190: DOUBLE
48191: EQUAL
48192: IFTRUE 48220
48194: LD_INT 21
48196: DOUBLE
48197: EQUAL
48198: IFTRUE 48220
48200: LD_INT 23
48202: DOUBLE
48203: EQUAL
48204: IFTRUE 48220
48206: LD_INT 24
48208: DOUBLE
48209: EQUAL
48210: IFTRUE 48220
48212: LD_INT 25
48214: DOUBLE
48215: EQUAL
48216: IFTRUE 48220
48218: GO 48276
48220: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48221: LD_ADDR_VAR 0 9
48225: PUSH
48226: LD_VAR 0 35
48230: PUSH
48231: LD_VAR 0 36
48235: PUSH
48236: LD_VAR 0 37
48240: PUSH
48241: LD_VAR 0 38
48245: PUSH
48246: LD_VAR 0 39
48250: PUSH
48251: LD_VAR 0 40
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: PUSH
48264: LD_VAR 0 4
48268: PUSH
48269: LD_INT 1
48271: PLUS
48272: ARRAY
48273: ST_TO_ADDR
48274: GO 48641
48276: LD_INT 6
48278: DOUBLE
48279: EQUAL
48280: IFTRUE 48332
48282: LD_INT 7
48284: DOUBLE
48285: EQUAL
48286: IFTRUE 48332
48288: LD_INT 8
48290: DOUBLE
48291: EQUAL
48292: IFTRUE 48332
48294: LD_INT 13
48296: DOUBLE
48297: EQUAL
48298: IFTRUE 48332
48300: LD_INT 12
48302: DOUBLE
48303: EQUAL
48304: IFTRUE 48332
48306: LD_INT 15
48308: DOUBLE
48309: EQUAL
48310: IFTRUE 48332
48312: LD_INT 11
48314: DOUBLE
48315: EQUAL
48316: IFTRUE 48332
48318: LD_INT 14
48320: DOUBLE
48321: EQUAL
48322: IFTRUE 48332
48324: LD_INT 10
48326: DOUBLE
48327: EQUAL
48328: IFTRUE 48332
48330: GO 48388
48332: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48333: LD_ADDR_VAR 0 9
48337: PUSH
48338: LD_VAR 0 41
48342: PUSH
48343: LD_VAR 0 42
48347: PUSH
48348: LD_VAR 0 43
48352: PUSH
48353: LD_VAR 0 44
48357: PUSH
48358: LD_VAR 0 45
48362: PUSH
48363: LD_VAR 0 46
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: PUSH
48376: LD_VAR 0 4
48380: PUSH
48381: LD_INT 1
48383: PLUS
48384: ARRAY
48385: ST_TO_ADDR
48386: GO 48641
48388: LD_INT 36
48390: DOUBLE
48391: EQUAL
48392: IFTRUE 48396
48394: GO 48452
48396: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48397: LD_ADDR_VAR 0 9
48401: PUSH
48402: LD_VAR 0 47
48406: PUSH
48407: LD_VAR 0 48
48411: PUSH
48412: LD_VAR 0 49
48416: PUSH
48417: LD_VAR 0 50
48421: PUSH
48422: LD_VAR 0 51
48426: PUSH
48427: LD_VAR 0 52
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: PUSH
48440: LD_VAR 0 4
48444: PUSH
48445: LD_INT 1
48447: PLUS
48448: ARRAY
48449: ST_TO_ADDR
48450: GO 48641
48452: LD_INT 4
48454: DOUBLE
48455: EQUAL
48456: IFTRUE 48478
48458: LD_INT 5
48460: DOUBLE
48461: EQUAL
48462: IFTRUE 48478
48464: LD_INT 34
48466: DOUBLE
48467: EQUAL
48468: IFTRUE 48478
48470: LD_INT 37
48472: DOUBLE
48473: EQUAL
48474: IFTRUE 48478
48476: GO 48534
48478: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48479: LD_ADDR_VAR 0 9
48483: PUSH
48484: LD_VAR 0 53
48488: PUSH
48489: LD_VAR 0 54
48493: PUSH
48494: LD_VAR 0 55
48498: PUSH
48499: LD_VAR 0 56
48503: PUSH
48504: LD_VAR 0 57
48508: PUSH
48509: LD_VAR 0 58
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: PUSH
48522: LD_VAR 0 4
48526: PUSH
48527: LD_INT 1
48529: PLUS
48530: ARRAY
48531: ST_TO_ADDR
48532: GO 48641
48534: LD_INT 31
48536: DOUBLE
48537: EQUAL
48538: IFTRUE 48584
48540: LD_INT 32
48542: DOUBLE
48543: EQUAL
48544: IFTRUE 48584
48546: LD_INT 33
48548: DOUBLE
48549: EQUAL
48550: IFTRUE 48584
48552: LD_INT 27
48554: DOUBLE
48555: EQUAL
48556: IFTRUE 48584
48558: LD_INT 26
48560: DOUBLE
48561: EQUAL
48562: IFTRUE 48584
48564: LD_INT 28
48566: DOUBLE
48567: EQUAL
48568: IFTRUE 48584
48570: LD_INT 29
48572: DOUBLE
48573: EQUAL
48574: IFTRUE 48584
48576: LD_INT 30
48578: DOUBLE
48579: EQUAL
48580: IFTRUE 48584
48582: GO 48640
48584: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48585: LD_ADDR_VAR 0 9
48589: PUSH
48590: LD_VAR 0 59
48594: PUSH
48595: LD_VAR 0 60
48599: PUSH
48600: LD_VAR 0 61
48604: PUSH
48605: LD_VAR 0 62
48609: PUSH
48610: LD_VAR 0 63
48614: PUSH
48615: LD_VAR 0 64
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: PUSH
48628: LD_VAR 0 4
48632: PUSH
48633: LD_INT 1
48635: PLUS
48636: ARRAY
48637: ST_TO_ADDR
48638: GO 48641
48640: POP
// temp_list2 = [ ] ;
48641: LD_ADDR_VAR 0 10
48645: PUSH
48646: EMPTY
48647: ST_TO_ADDR
// for i in temp_list do
48648: LD_ADDR_VAR 0 8
48652: PUSH
48653: LD_VAR 0 9
48657: PUSH
48658: FOR_IN
48659: IFFALSE 48711
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48661: LD_ADDR_VAR 0 10
48665: PUSH
48666: LD_VAR 0 10
48670: PUSH
48671: LD_VAR 0 8
48675: PUSH
48676: LD_INT 1
48678: ARRAY
48679: PUSH
48680: LD_VAR 0 2
48684: PLUS
48685: PUSH
48686: LD_VAR 0 8
48690: PUSH
48691: LD_INT 2
48693: ARRAY
48694: PUSH
48695: LD_VAR 0 3
48699: PLUS
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: EMPTY
48706: LIST
48707: ADD
48708: ST_TO_ADDR
48709: GO 48658
48711: POP
48712: POP
// result = temp_list2 ;
48713: LD_ADDR_VAR 0 7
48717: PUSH
48718: LD_VAR 0 10
48722: ST_TO_ADDR
// end ;
48723: LD_VAR 0 7
48727: RET
// export function EnemyInRange ( unit , dist ) ; begin
48728: LD_INT 0
48730: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48731: LD_ADDR_VAR 0 3
48735: PUSH
48736: LD_VAR 0 1
48740: PPUSH
48741: CALL_OW 255
48745: PPUSH
48746: LD_VAR 0 1
48750: PPUSH
48751: CALL_OW 250
48755: PPUSH
48756: LD_VAR 0 1
48760: PPUSH
48761: CALL_OW 251
48765: PPUSH
48766: LD_VAR 0 2
48770: PPUSH
48771: CALL 21985 0 4
48775: PUSH
48776: LD_INT 4
48778: ARRAY
48779: ST_TO_ADDR
// end ;
48780: LD_VAR 0 3
48784: RET
// export function PlayerSeeMe ( unit ) ; begin
48785: LD_INT 0
48787: PPUSH
// result := See ( your_side , unit ) ;
48788: LD_ADDR_VAR 0 2
48792: PUSH
48793: LD_OWVAR 2
48797: PPUSH
48798: LD_VAR 0 1
48802: PPUSH
48803: CALL_OW 292
48807: ST_TO_ADDR
// end ;
48808: LD_VAR 0 2
48812: RET
// export function ReverseDir ( unit ) ; begin
48813: LD_INT 0
48815: PPUSH
// if not unit then
48816: LD_VAR 0 1
48820: NOT
48821: IFFALSE 48825
// exit ;
48823: GO 48848
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48825: LD_ADDR_VAR 0 2
48829: PUSH
48830: LD_VAR 0 1
48834: PPUSH
48835: CALL_OW 254
48839: PUSH
48840: LD_INT 3
48842: PLUS
48843: PUSH
48844: LD_INT 6
48846: MOD
48847: ST_TO_ADDR
// end ;
48848: LD_VAR 0 2
48852: RET
// export function ReverseArray ( array ) ; var i ; begin
48853: LD_INT 0
48855: PPUSH
48856: PPUSH
// if not array then
48857: LD_VAR 0 1
48861: NOT
48862: IFFALSE 48866
// exit ;
48864: GO 48921
// result := [ ] ;
48866: LD_ADDR_VAR 0 2
48870: PUSH
48871: EMPTY
48872: ST_TO_ADDR
// for i := array downto 1 do
48873: LD_ADDR_VAR 0 3
48877: PUSH
48878: DOUBLE
48879: LD_VAR 0 1
48883: INC
48884: ST_TO_ADDR
48885: LD_INT 1
48887: PUSH
48888: FOR_DOWNTO
48889: IFFALSE 48919
// result := Join ( result , array [ i ] ) ;
48891: LD_ADDR_VAR 0 2
48895: PUSH
48896: LD_VAR 0 2
48900: PPUSH
48901: LD_VAR 0 1
48905: PUSH
48906: LD_VAR 0 3
48910: ARRAY
48911: PPUSH
48912: CALL 53763 0 2
48916: ST_TO_ADDR
48917: GO 48888
48919: POP
48920: POP
// end ;
48921: LD_VAR 0 2
48925: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48926: LD_INT 0
48928: PPUSH
48929: PPUSH
48930: PPUSH
48931: PPUSH
48932: PPUSH
48933: PPUSH
// if not unit or not hexes then
48934: LD_VAR 0 1
48938: NOT
48939: IFTRUE 48948
48941: PUSH
48942: LD_VAR 0 2
48946: NOT
48947: OR
48948: IFFALSE 48952
// exit ;
48950: GO 49075
// dist := 9999 ;
48952: LD_ADDR_VAR 0 5
48956: PUSH
48957: LD_INT 9999
48959: ST_TO_ADDR
// for i = 1 to hexes do
48960: LD_ADDR_VAR 0 4
48964: PUSH
48965: DOUBLE
48966: LD_INT 1
48968: DEC
48969: ST_TO_ADDR
48970: LD_VAR 0 2
48974: PUSH
48975: FOR_TO
48976: IFFALSE 49063
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48978: LD_ADDR_VAR 0 6
48982: PUSH
48983: LD_VAR 0 1
48987: PPUSH
48988: LD_VAR 0 2
48992: PUSH
48993: LD_VAR 0 4
48997: ARRAY
48998: PUSH
48999: LD_INT 1
49001: ARRAY
49002: PPUSH
49003: LD_VAR 0 2
49007: PUSH
49008: LD_VAR 0 4
49012: ARRAY
49013: PUSH
49014: LD_INT 2
49016: ARRAY
49017: PPUSH
49018: CALL_OW 297
49022: ST_TO_ADDR
// if tdist < dist then
49023: LD_VAR 0 6
49027: PUSH
49028: LD_VAR 0 5
49032: LESS
49033: IFFALSE 49061
// begin hex := hexes [ i ] ;
49035: LD_ADDR_VAR 0 8
49039: PUSH
49040: LD_VAR 0 2
49044: PUSH
49045: LD_VAR 0 4
49049: ARRAY
49050: ST_TO_ADDR
// dist := tdist ;
49051: LD_ADDR_VAR 0 5
49055: PUSH
49056: LD_VAR 0 6
49060: ST_TO_ADDR
// end ; end ;
49061: GO 48975
49063: POP
49064: POP
// result := hex ;
49065: LD_ADDR_VAR 0 3
49069: PUSH
49070: LD_VAR 0 8
49074: ST_TO_ADDR
// end ;
49075: LD_VAR 0 3
49079: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49080: LD_INT 0
49082: PPUSH
49083: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49084: LD_VAR 0 1
49088: NOT
49089: IFTRUE 49128
49091: PUSH
49092: LD_VAR 0 1
49096: PUSH
49097: LD_INT 21
49099: PUSH
49100: LD_INT 2
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 23
49109: PUSH
49110: LD_INT 2
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PPUSH
49121: CALL_OW 69
49125: IN
49126: NOT
49127: OR
49128: IFFALSE 49132
// exit ;
49130: GO 49179
// for i = 1 to 3 do
49132: LD_ADDR_VAR 0 3
49136: PUSH
49137: DOUBLE
49138: LD_INT 1
49140: DEC
49141: ST_TO_ADDR
49142: LD_INT 3
49144: PUSH
49145: FOR_TO
49146: IFFALSE 49177
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49148: LD_VAR 0 1
49152: PPUSH
49153: CALL_OW 250
49157: PPUSH
49158: LD_VAR 0 1
49162: PPUSH
49163: CALL_OW 251
49167: PPUSH
49168: LD_INT 1
49170: PPUSH
49171: CALL_OW 453
49175: GO 49145
49177: POP
49178: POP
// end ;
49179: LD_VAR 0 2
49183: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49184: LD_INT 0
49186: PPUSH
49187: PPUSH
49188: PPUSH
49189: PPUSH
49190: PPUSH
49191: PPUSH
// if not unit or not enemy_unit then
49192: LD_VAR 0 1
49196: NOT
49197: IFTRUE 49206
49199: PUSH
49200: LD_VAR 0 2
49204: NOT
49205: OR
49206: IFFALSE 49210
// exit ;
49208: GO 49681
// if GetLives ( i ) < 250 then
49210: LD_VAR 0 4
49214: PPUSH
49215: CALL_OW 256
49219: PUSH
49220: LD_INT 250
49222: LESS
49223: IFFALSE 49236
// begin ComAutodestruct ( i ) ;
49225: LD_VAR 0 4
49229: PPUSH
49230: CALL 49080 0 1
// exit ;
49234: GO 49681
// end ; x := GetX ( enemy_unit ) ;
49236: LD_ADDR_VAR 0 7
49240: PUSH
49241: LD_VAR 0 2
49245: PPUSH
49246: CALL_OW 250
49250: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49251: LD_ADDR_VAR 0 8
49255: PUSH
49256: LD_VAR 0 2
49260: PPUSH
49261: CALL_OW 251
49265: ST_TO_ADDR
// if not x or not y then
49266: LD_VAR 0 7
49270: NOT
49271: IFTRUE 49280
49273: PUSH
49274: LD_VAR 0 8
49278: NOT
49279: OR
49280: IFFALSE 49284
// exit ;
49282: GO 49681
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49284: LD_ADDR_VAR 0 6
49288: PUSH
49289: LD_VAR 0 7
49293: PPUSH
49294: LD_INT 0
49296: PPUSH
49297: LD_INT 4
49299: PPUSH
49300: CALL_OW 272
49304: PUSH
49305: LD_VAR 0 8
49309: PPUSH
49310: LD_INT 0
49312: PPUSH
49313: LD_INT 4
49315: PPUSH
49316: CALL_OW 273
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_VAR 0 7
49329: PPUSH
49330: LD_INT 1
49332: PPUSH
49333: LD_INT 4
49335: PPUSH
49336: CALL_OW 272
49340: PUSH
49341: LD_VAR 0 8
49345: PPUSH
49346: LD_INT 1
49348: PPUSH
49349: LD_INT 4
49351: PPUSH
49352: CALL_OW 273
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_VAR 0 7
49365: PPUSH
49366: LD_INT 2
49368: PPUSH
49369: LD_INT 4
49371: PPUSH
49372: CALL_OW 272
49376: PUSH
49377: LD_VAR 0 8
49381: PPUSH
49382: LD_INT 2
49384: PPUSH
49385: LD_INT 4
49387: PPUSH
49388: CALL_OW 273
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_VAR 0 7
49401: PPUSH
49402: LD_INT 3
49404: PPUSH
49405: LD_INT 4
49407: PPUSH
49408: CALL_OW 272
49412: PUSH
49413: LD_VAR 0 8
49417: PPUSH
49418: LD_INT 3
49420: PPUSH
49421: LD_INT 4
49423: PPUSH
49424: CALL_OW 273
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_VAR 0 7
49437: PPUSH
49438: LD_INT 4
49440: PPUSH
49441: LD_INT 4
49443: PPUSH
49444: CALL_OW 272
49448: PUSH
49449: LD_VAR 0 8
49453: PPUSH
49454: LD_INT 4
49456: PPUSH
49457: LD_INT 4
49459: PPUSH
49460: CALL_OW 273
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_VAR 0 7
49473: PPUSH
49474: LD_INT 5
49476: PPUSH
49477: LD_INT 4
49479: PPUSH
49480: CALL_OW 272
49484: PUSH
49485: LD_VAR 0 8
49489: PPUSH
49490: LD_INT 5
49492: PPUSH
49493: LD_INT 4
49495: PPUSH
49496: CALL_OW 273
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: ST_TO_ADDR
// for i = tmp downto 1 do
49513: LD_ADDR_VAR 0 4
49517: PUSH
49518: DOUBLE
49519: LD_VAR 0 6
49523: INC
49524: ST_TO_ADDR
49525: LD_INT 1
49527: PUSH
49528: FOR_DOWNTO
49529: IFFALSE 49632
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49531: LD_VAR 0 6
49535: PUSH
49536: LD_VAR 0 4
49540: ARRAY
49541: PUSH
49542: LD_INT 1
49544: ARRAY
49545: PPUSH
49546: LD_VAR 0 6
49550: PUSH
49551: LD_VAR 0 4
49555: ARRAY
49556: PUSH
49557: LD_INT 2
49559: ARRAY
49560: PPUSH
49561: CALL_OW 488
49565: NOT
49566: IFTRUE 49608
49568: PUSH
49569: LD_VAR 0 6
49573: PUSH
49574: LD_VAR 0 4
49578: ARRAY
49579: PUSH
49580: LD_INT 1
49582: ARRAY
49583: PPUSH
49584: LD_VAR 0 6
49588: PUSH
49589: LD_VAR 0 4
49593: ARRAY
49594: PUSH
49595: LD_INT 2
49597: ARRAY
49598: PPUSH
49599: CALL_OW 428
49603: PUSH
49604: LD_INT 0
49606: NONEQUAL
49607: OR
49608: IFFALSE 49630
// tmp := Delete ( tmp , i ) ;
49610: LD_ADDR_VAR 0 6
49614: PUSH
49615: LD_VAR 0 6
49619: PPUSH
49620: LD_VAR 0 4
49624: PPUSH
49625: CALL_OW 3
49629: ST_TO_ADDR
49630: GO 49528
49632: POP
49633: POP
// j := GetClosestHex ( unit , tmp ) ;
49634: LD_ADDR_VAR 0 5
49638: PUSH
49639: LD_VAR 0 1
49643: PPUSH
49644: LD_VAR 0 6
49648: PPUSH
49649: CALL 48926 0 2
49653: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49654: LD_VAR 0 1
49658: PPUSH
49659: LD_VAR 0 5
49663: PUSH
49664: LD_INT 1
49666: ARRAY
49667: PPUSH
49668: LD_VAR 0 5
49672: PUSH
49673: LD_INT 2
49675: ARRAY
49676: PPUSH
49677: CALL_OW 111
// end ;
49681: LD_VAR 0 3
49685: RET
// export function PrepareApemanSoldier ( ) ; begin
49686: LD_INT 0
49688: PPUSH
// uc_nation := 0 ;
49689: LD_ADDR_OWVAR 21
49693: PUSH
49694: LD_INT 0
49696: ST_TO_ADDR
// hc_sex := sex_male ;
49697: LD_ADDR_OWVAR 27
49701: PUSH
49702: LD_INT 1
49704: ST_TO_ADDR
// hc_name :=  ;
49705: LD_ADDR_OWVAR 26
49709: PUSH
49710: LD_STRING 
49712: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49713: LD_ADDR_OWVAR 28
49717: PUSH
49718: LD_INT 15
49720: ST_TO_ADDR
// hc_gallery :=  ;
49721: LD_ADDR_OWVAR 33
49725: PUSH
49726: LD_STRING 
49728: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49729: LD_ADDR_OWVAR 31
49733: PUSH
49734: LD_INT 0
49736: PPUSH
49737: LD_INT 3
49739: PPUSH
49740: CALL_OW 12
49744: PUSH
49745: LD_INT 0
49747: PPUSH
49748: LD_INT 3
49750: PPUSH
49751: CALL_OW 12
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49768: LD_ADDR_OWVAR 29
49772: PUSH
49773: LD_INT 12
49775: PUSH
49776: LD_INT 12
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: ST_TO_ADDR
// end ;
49783: LD_VAR 0 1
49787: RET
// export function PrepareApemanEngineer ( ) ; begin
49788: LD_INT 0
49790: PPUSH
// uc_nation := 0 ;
49791: LD_ADDR_OWVAR 21
49795: PUSH
49796: LD_INT 0
49798: ST_TO_ADDR
// hc_sex := sex_male ;
49799: LD_ADDR_OWVAR 27
49803: PUSH
49804: LD_INT 1
49806: ST_TO_ADDR
// hc_name :=  ;
49807: LD_ADDR_OWVAR 26
49811: PUSH
49812: LD_STRING 
49814: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49815: LD_ADDR_OWVAR 28
49819: PUSH
49820: LD_INT 16
49822: ST_TO_ADDR
// hc_gallery :=  ;
49823: LD_ADDR_OWVAR 33
49827: PUSH
49828: LD_STRING 
49830: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49831: LD_ADDR_OWVAR 31
49835: PUSH
49836: LD_INT 0
49838: PPUSH
49839: LD_INT 3
49841: PPUSH
49842: CALL_OW 12
49846: PUSH
49847: LD_INT 0
49849: PPUSH
49850: LD_INT 3
49852: PPUSH
49853: CALL_OW 12
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49870: LD_ADDR_OWVAR 29
49874: PUSH
49875: LD_INT 12
49877: PUSH
49878: LD_INT 12
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: ST_TO_ADDR
// end ;
49885: LD_VAR 0 1
49889: RET
// export function PrepareApeman ( agressivity ) ; begin
49890: LD_INT 0
49892: PPUSH
// uc_side := 0 ;
49893: LD_ADDR_OWVAR 20
49897: PUSH
49898: LD_INT 0
49900: ST_TO_ADDR
// uc_nation := 0 ;
49901: LD_ADDR_OWVAR 21
49905: PUSH
49906: LD_INT 0
49908: ST_TO_ADDR
// hc_sex := sex_male ;
49909: LD_ADDR_OWVAR 27
49913: PUSH
49914: LD_INT 1
49916: ST_TO_ADDR
// hc_class := class_apeman ;
49917: LD_ADDR_OWVAR 28
49921: PUSH
49922: LD_INT 12
49924: ST_TO_ADDR
// hc_gallery :=  ;
49925: LD_ADDR_OWVAR 33
49929: PUSH
49930: LD_STRING 
49932: ST_TO_ADDR
// hc_name :=  ;
49933: LD_ADDR_OWVAR 26
49937: PUSH
49938: LD_STRING 
49940: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49941: LD_ADDR_OWVAR 29
49945: PUSH
49946: LD_INT 12
49948: PUSH
49949: LD_INT 12
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: ST_TO_ADDR
// if agressivity = 0 then
49956: LD_VAR 0 1
49960: PUSH
49961: LD_INT 0
49963: EQUAL
49964: IFFALSE 49976
// hc_agressivity := 0 else
49966: LD_ADDR_OWVAR 35
49970: PUSH
49971: LD_INT 0
49973: ST_TO_ADDR
49974: GO 49997
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49976: LD_ADDR_OWVAR 35
49980: PUSH
49981: LD_VAR 0 1
49985: NEG
49986: PPUSH
49987: LD_VAR 0 1
49991: PPUSH
49992: CALL_OW 12
49996: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49997: LD_ADDR_OWVAR 31
50001: PUSH
50002: LD_INT 0
50004: PPUSH
50005: LD_INT 3
50007: PPUSH
50008: CALL_OW 12
50012: PUSH
50013: LD_INT 0
50015: PPUSH
50016: LD_INT 3
50018: PPUSH
50019: CALL_OW 12
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: ST_TO_ADDR
// end ;
50036: LD_VAR 0 2
50040: RET
// export function PrepareTiger ( agressivity ) ; begin
50041: LD_INT 0
50043: PPUSH
// uc_side := 0 ;
50044: LD_ADDR_OWVAR 20
50048: PUSH
50049: LD_INT 0
50051: ST_TO_ADDR
// uc_nation := 0 ;
50052: LD_ADDR_OWVAR 21
50056: PUSH
50057: LD_INT 0
50059: ST_TO_ADDR
// InitHc ;
50060: CALL_OW 19
// hc_class := class_tiger ;
50064: LD_ADDR_OWVAR 28
50068: PUSH
50069: LD_INT 14
50071: ST_TO_ADDR
// hc_gallery :=  ;
50072: LD_ADDR_OWVAR 33
50076: PUSH
50077: LD_STRING 
50079: ST_TO_ADDR
// hc_name :=  ;
50080: LD_ADDR_OWVAR 26
50084: PUSH
50085: LD_STRING 
50087: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50088: LD_ADDR_OWVAR 35
50092: PUSH
50093: LD_VAR 0 1
50097: NEG
50098: PPUSH
50099: LD_VAR 0 1
50103: PPUSH
50104: CALL_OW 12
50108: ST_TO_ADDR
// end ;
50109: LD_VAR 0 2
50113: RET
// export function PrepareEnchidna ( ) ; begin
50114: LD_INT 0
50116: PPUSH
// uc_side := 0 ;
50117: LD_ADDR_OWVAR 20
50121: PUSH
50122: LD_INT 0
50124: ST_TO_ADDR
// uc_nation := 0 ;
50125: LD_ADDR_OWVAR 21
50129: PUSH
50130: LD_INT 0
50132: ST_TO_ADDR
// InitHc ;
50133: CALL_OW 19
// hc_class := class_baggie ;
50137: LD_ADDR_OWVAR 28
50141: PUSH
50142: LD_INT 13
50144: ST_TO_ADDR
// hc_gallery :=  ;
50145: LD_ADDR_OWVAR 33
50149: PUSH
50150: LD_STRING 
50152: ST_TO_ADDR
// hc_name :=  ;
50153: LD_ADDR_OWVAR 26
50157: PUSH
50158: LD_STRING 
50160: ST_TO_ADDR
// end ;
50161: LD_VAR 0 1
50165: RET
// export function PrepareFrog ( ) ; begin
50166: LD_INT 0
50168: PPUSH
// uc_side := 0 ;
50169: LD_ADDR_OWVAR 20
50173: PUSH
50174: LD_INT 0
50176: ST_TO_ADDR
// uc_nation := 0 ;
50177: LD_ADDR_OWVAR 21
50181: PUSH
50182: LD_INT 0
50184: ST_TO_ADDR
// InitHc ;
50185: CALL_OW 19
// hc_class := class_frog ;
50189: LD_ADDR_OWVAR 28
50193: PUSH
50194: LD_INT 19
50196: ST_TO_ADDR
// hc_gallery :=  ;
50197: LD_ADDR_OWVAR 33
50201: PUSH
50202: LD_STRING 
50204: ST_TO_ADDR
// hc_name :=  ;
50205: LD_ADDR_OWVAR 26
50209: PUSH
50210: LD_STRING 
50212: ST_TO_ADDR
// end ;
50213: LD_VAR 0 1
50217: RET
// export function PrepareFish ( ) ; begin
50218: LD_INT 0
50220: PPUSH
// uc_side := 0 ;
50221: LD_ADDR_OWVAR 20
50225: PUSH
50226: LD_INT 0
50228: ST_TO_ADDR
// uc_nation := 0 ;
50229: LD_ADDR_OWVAR 21
50233: PUSH
50234: LD_INT 0
50236: ST_TO_ADDR
// InitHc ;
50237: CALL_OW 19
// hc_class := class_fish ;
50241: LD_ADDR_OWVAR 28
50245: PUSH
50246: LD_INT 20
50248: ST_TO_ADDR
// hc_gallery :=  ;
50249: LD_ADDR_OWVAR 33
50253: PUSH
50254: LD_STRING 
50256: ST_TO_ADDR
// hc_name :=  ;
50257: LD_ADDR_OWVAR 26
50261: PUSH
50262: LD_STRING 
50264: ST_TO_ADDR
// end ;
50265: LD_VAR 0 1
50269: RET
// export function PrepareBird ( ) ; begin
50270: LD_INT 0
50272: PPUSH
// uc_side := 0 ;
50273: LD_ADDR_OWVAR 20
50277: PUSH
50278: LD_INT 0
50280: ST_TO_ADDR
// uc_nation := 0 ;
50281: LD_ADDR_OWVAR 21
50285: PUSH
50286: LD_INT 0
50288: ST_TO_ADDR
// InitHc ;
50289: CALL_OW 19
// hc_class := class_phororhacos ;
50293: LD_ADDR_OWVAR 28
50297: PUSH
50298: LD_INT 18
50300: ST_TO_ADDR
// hc_gallery :=  ;
50301: LD_ADDR_OWVAR 33
50305: PUSH
50306: LD_STRING 
50308: ST_TO_ADDR
// hc_name :=  ;
50309: LD_ADDR_OWVAR 26
50313: PUSH
50314: LD_STRING 
50316: ST_TO_ADDR
// end ;
50317: LD_VAR 0 1
50321: RET
// export function PrepareHorse ( ) ; begin
50322: LD_INT 0
50324: PPUSH
// uc_side := 0 ;
50325: LD_ADDR_OWVAR 20
50329: PUSH
50330: LD_INT 0
50332: ST_TO_ADDR
// uc_nation := 0 ;
50333: LD_ADDR_OWVAR 21
50337: PUSH
50338: LD_INT 0
50340: ST_TO_ADDR
// InitHc ;
50341: CALL_OW 19
// hc_class := class_horse ;
50345: LD_ADDR_OWVAR 28
50349: PUSH
50350: LD_INT 21
50352: ST_TO_ADDR
// hc_gallery :=  ;
50353: LD_ADDR_OWVAR 33
50357: PUSH
50358: LD_STRING 
50360: ST_TO_ADDR
// hc_name :=  ;
50361: LD_ADDR_OWVAR 26
50365: PUSH
50366: LD_STRING 
50368: ST_TO_ADDR
// end ;
50369: LD_VAR 0 1
50373: RET
// export function PrepareMastodont ( ) ; begin
50374: LD_INT 0
50376: PPUSH
// uc_side := 0 ;
50377: LD_ADDR_OWVAR 20
50381: PUSH
50382: LD_INT 0
50384: ST_TO_ADDR
// uc_nation := 0 ;
50385: LD_ADDR_OWVAR 21
50389: PUSH
50390: LD_INT 0
50392: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50393: LD_ADDR_OWVAR 37
50397: PUSH
50398: LD_INT 31
50400: ST_TO_ADDR
// vc_control := control_rider ;
50401: LD_ADDR_OWVAR 38
50405: PUSH
50406: LD_INT 4
50408: ST_TO_ADDR
// end ;
50409: LD_VAR 0 1
50413: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50414: LD_INT 0
50416: PPUSH
50417: PPUSH
50418: PPUSH
// uc_side = 0 ;
50419: LD_ADDR_OWVAR 20
50423: PUSH
50424: LD_INT 0
50426: ST_TO_ADDR
// uc_nation = 0 ;
50427: LD_ADDR_OWVAR 21
50431: PUSH
50432: LD_INT 0
50434: ST_TO_ADDR
// InitHc_All ( ) ;
50435: CALL_OW 584
// InitVc ;
50439: CALL_OW 20
// if mastodonts then
50443: LD_VAR 0 6
50447: IFFALSE 50514
// for i = 1 to mastodonts do
50449: LD_ADDR_VAR 0 11
50453: PUSH
50454: DOUBLE
50455: LD_INT 1
50457: DEC
50458: ST_TO_ADDR
50459: LD_VAR 0 6
50463: PUSH
50464: FOR_TO
50465: IFFALSE 50512
// begin vc_chassis := 31 ;
50467: LD_ADDR_OWVAR 37
50471: PUSH
50472: LD_INT 31
50474: ST_TO_ADDR
// vc_control := control_rider ;
50475: LD_ADDR_OWVAR 38
50479: PUSH
50480: LD_INT 4
50482: ST_TO_ADDR
// animal := CreateVehicle ;
50483: LD_ADDR_VAR 0 12
50487: PUSH
50488: CALL_OW 45
50492: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50493: LD_VAR 0 12
50497: PPUSH
50498: LD_VAR 0 8
50502: PPUSH
50503: LD_INT 0
50505: PPUSH
50506: CALL 52656 0 3
// end ;
50510: GO 50464
50512: POP
50513: POP
// if horses then
50514: LD_VAR 0 5
50518: IFFALSE 50585
// for i = 1 to horses do
50520: LD_ADDR_VAR 0 11
50524: PUSH
50525: DOUBLE
50526: LD_INT 1
50528: DEC
50529: ST_TO_ADDR
50530: LD_VAR 0 5
50534: PUSH
50535: FOR_TO
50536: IFFALSE 50583
// begin hc_class := 21 ;
50538: LD_ADDR_OWVAR 28
50542: PUSH
50543: LD_INT 21
50545: ST_TO_ADDR
// hc_gallery :=  ;
50546: LD_ADDR_OWVAR 33
50550: PUSH
50551: LD_STRING 
50553: ST_TO_ADDR
// animal := CreateHuman ;
50554: LD_ADDR_VAR 0 12
50558: PUSH
50559: CALL_OW 44
50563: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50564: LD_VAR 0 12
50568: PPUSH
50569: LD_VAR 0 8
50573: PPUSH
50574: LD_INT 0
50576: PPUSH
50577: CALL 52656 0 3
// end ;
50581: GO 50535
50583: POP
50584: POP
// if birds then
50585: LD_VAR 0 1
50589: IFFALSE 50656
// for i = 1 to birds do
50591: LD_ADDR_VAR 0 11
50595: PUSH
50596: DOUBLE
50597: LD_INT 1
50599: DEC
50600: ST_TO_ADDR
50601: LD_VAR 0 1
50605: PUSH
50606: FOR_TO
50607: IFFALSE 50654
// begin hc_class := 18 ;
50609: LD_ADDR_OWVAR 28
50613: PUSH
50614: LD_INT 18
50616: ST_TO_ADDR
// hc_gallery =  ;
50617: LD_ADDR_OWVAR 33
50621: PUSH
50622: LD_STRING 
50624: ST_TO_ADDR
// animal := CreateHuman ;
50625: LD_ADDR_VAR 0 12
50629: PUSH
50630: CALL_OW 44
50634: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50635: LD_VAR 0 12
50639: PPUSH
50640: LD_VAR 0 8
50644: PPUSH
50645: LD_INT 0
50647: PPUSH
50648: CALL 52656 0 3
// end ;
50652: GO 50606
50654: POP
50655: POP
// if tigers then
50656: LD_VAR 0 2
50660: IFFALSE 50744
// for i = 1 to tigers do
50662: LD_ADDR_VAR 0 11
50666: PUSH
50667: DOUBLE
50668: LD_INT 1
50670: DEC
50671: ST_TO_ADDR
50672: LD_VAR 0 2
50676: PUSH
50677: FOR_TO
50678: IFFALSE 50742
// begin hc_class = class_tiger ;
50680: LD_ADDR_OWVAR 28
50684: PUSH
50685: LD_INT 14
50687: ST_TO_ADDR
// hc_gallery =  ;
50688: LD_ADDR_OWVAR 33
50692: PUSH
50693: LD_STRING 
50695: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50696: LD_ADDR_OWVAR 35
50700: PUSH
50701: LD_INT 7
50703: NEG
50704: PPUSH
50705: LD_INT 7
50707: PPUSH
50708: CALL_OW 12
50712: ST_TO_ADDR
// animal := CreateHuman ;
50713: LD_ADDR_VAR 0 12
50717: PUSH
50718: CALL_OW 44
50722: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50723: LD_VAR 0 12
50727: PPUSH
50728: LD_VAR 0 8
50732: PPUSH
50733: LD_INT 0
50735: PPUSH
50736: CALL 52656 0 3
// end ;
50740: GO 50677
50742: POP
50743: POP
// if apemans then
50744: LD_VAR 0 3
50748: IFFALSE 50871
// for i = 1 to apemans do
50750: LD_ADDR_VAR 0 11
50754: PUSH
50755: DOUBLE
50756: LD_INT 1
50758: DEC
50759: ST_TO_ADDR
50760: LD_VAR 0 3
50764: PUSH
50765: FOR_TO
50766: IFFALSE 50869
// begin hc_class = class_apeman ;
50768: LD_ADDR_OWVAR 28
50772: PUSH
50773: LD_INT 12
50775: ST_TO_ADDR
// hc_gallery =  ;
50776: LD_ADDR_OWVAR 33
50780: PUSH
50781: LD_STRING 
50783: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50784: LD_ADDR_OWVAR 35
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PPUSH
50793: LD_INT 2
50795: PPUSH
50796: CALL_OW 12
50800: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50801: LD_ADDR_OWVAR 31
50805: PUSH
50806: LD_INT 1
50808: PPUSH
50809: LD_INT 3
50811: PPUSH
50812: CALL_OW 12
50816: PUSH
50817: LD_INT 1
50819: PPUSH
50820: LD_INT 3
50822: PPUSH
50823: CALL_OW 12
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: ST_TO_ADDR
// animal := CreateHuman ;
50840: LD_ADDR_VAR 0 12
50844: PUSH
50845: CALL_OW 44
50849: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50850: LD_VAR 0 12
50854: PPUSH
50855: LD_VAR 0 8
50859: PPUSH
50860: LD_INT 0
50862: PPUSH
50863: CALL 52656 0 3
// end ;
50867: GO 50765
50869: POP
50870: POP
// if enchidnas then
50871: LD_VAR 0 4
50875: IFFALSE 50942
// for i = 1 to enchidnas do
50877: LD_ADDR_VAR 0 11
50881: PUSH
50882: DOUBLE
50883: LD_INT 1
50885: DEC
50886: ST_TO_ADDR
50887: LD_VAR 0 4
50891: PUSH
50892: FOR_TO
50893: IFFALSE 50940
// begin hc_class = 13 ;
50895: LD_ADDR_OWVAR 28
50899: PUSH
50900: LD_INT 13
50902: ST_TO_ADDR
// hc_gallery =  ;
50903: LD_ADDR_OWVAR 33
50907: PUSH
50908: LD_STRING 
50910: ST_TO_ADDR
// animal := CreateHuman ;
50911: LD_ADDR_VAR 0 12
50915: PUSH
50916: CALL_OW 44
50920: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50921: LD_VAR 0 12
50925: PPUSH
50926: LD_VAR 0 8
50930: PPUSH
50931: LD_INT 0
50933: PPUSH
50934: CALL 52656 0 3
// end ;
50938: GO 50892
50940: POP
50941: POP
// if fishes then
50942: LD_VAR 0 7
50946: IFFALSE 51013
// for i = 1 to fishes do
50948: LD_ADDR_VAR 0 11
50952: PUSH
50953: DOUBLE
50954: LD_INT 1
50956: DEC
50957: ST_TO_ADDR
50958: LD_VAR 0 7
50962: PUSH
50963: FOR_TO
50964: IFFALSE 51011
// begin hc_class = 20 ;
50966: LD_ADDR_OWVAR 28
50970: PUSH
50971: LD_INT 20
50973: ST_TO_ADDR
// hc_gallery =  ;
50974: LD_ADDR_OWVAR 33
50978: PUSH
50979: LD_STRING 
50981: ST_TO_ADDR
// animal := CreateHuman ;
50982: LD_ADDR_VAR 0 12
50986: PUSH
50987: CALL_OW 44
50991: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50992: LD_VAR 0 12
50996: PPUSH
50997: LD_VAR 0 9
51001: PPUSH
51002: LD_INT 0
51004: PPUSH
51005: CALL 52656 0 3
// end ;
51009: GO 50963
51011: POP
51012: POP
// end ;
51013: LD_VAR 0 10
51017: RET
// export function WantHeal ( sci , unit ) ; begin
51018: LD_INT 0
51020: PPUSH
// if GetTaskList ( sci ) > 0 then
51021: LD_VAR 0 1
51025: PPUSH
51026: CALL_OW 437
51030: PUSH
51031: LD_INT 0
51033: GREATER
51034: IFFALSE 51106
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51036: LD_VAR 0 1
51040: PPUSH
51041: CALL_OW 437
51045: PUSH
51046: LD_INT 1
51048: ARRAY
51049: PUSH
51050: LD_INT 1
51052: ARRAY
51053: PUSH
51054: LD_STRING l
51056: EQUAL
51057: IFFALSE 51084
51059: PUSH
51060: LD_VAR 0 1
51064: PPUSH
51065: CALL_OW 437
51069: PUSH
51070: LD_INT 1
51072: ARRAY
51073: PUSH
51074: LD_INT 4
51076: ARRAY
51077: PUSH
51078: LD_VAR 0 2
51082: EQUAL
51083: AND
51084: IFFALSE 51096
// result := true else
51086: LD_ADDR_VAR 0 3
51090: PUSH
51091: LD_INT 1
51093: ST_TO_ADDR
51094: GO 51104
// result := false ;
51096: LD_ADDR_VAR 0 3
51100: PUSH
51101: LD_INT 0
51103: ST_TO_ADDR
// end else
51104: GO 51114
// result := false ;
51106: LD_ADDR_VAR 0 3
51110: PUSH
51111: LD_INT 0
51113: ST_TO_ADDR
// end ;
51114: LD_VAR 0 3
51118: RET
// export function HealTarget ( sci ) ; begin
51119: LD_INT 0
51121: PPUSH
// if not sci then
51122: LD_VAR 0 1
51126: NOT
51127: IFFALSE 51131
// exit ;
51129: GO 51196
// result := 0 ;
51131: LD_ADDR_VAR 0 2
51135: PUSH
51136: LD_INT 0
51138: ST_TO_ADDR
// if GetTaskList ( sci ) then
51139: LD_VAR 0 1
51143: PPUSH
51144: CALL_OW 437
51148: IFFALSE 51196
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51150: LD_VAR 0 1
51154: PPUSH
51155: CALL_OW 437
51159: PUSH
51160: LD_INT 1
51162: ARRAY
51163: PUSH
51164: LD_INT 1
51166: ARRAY
51167: PUSH
51168: LD_STRING l
51170: EQUAL
51171: IFFALSE 51196
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51173: LD_ADDR_VAR 0 2
51177: PUSH
51178: LD_VAR 0 1
51182: PPUSH
51183: CALL_OW 437
51187: PUSH
51188: LD_INT 1
51190: ARRAY
51191: PUSH
51192: LD_INT 4
51194: ARRAY
51195: ST_TO_ADDR
// end ;
51196: LD_VAR 0 2
51200: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51201: LD_INT 0
51203: PPUSH
51204: PPUSH
51205: PPUSH
51206: PPUSH
// if not base_units then
51207: LD_VAR 0 1
51211: NOT
51212: IFFALSE 51216
// exit ;
51214: GO 51303
// result := false ;
51216: LD_ADDR_VAR 0 2
51220: PUSH
51221: LD_INT 0
51223: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51224: LD_ADDR_VAR 0 5
51228: PUSH
51229: LD_VAR 0 1
51233: PPUSH
51234: LD_INT 21
51236: PUSH
51237: LD_INT 3
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PPUSH
51244: CALL_OW 72
51248: ST_TO_ADDR
// if not tmp then
51249: LD_VAR 0 5
51253: NOT
51254: IFFALSE 51258
// exit ;
51256: GO 51303
// for i in tmp do
51258: LD_ADDR_VAR 0 3
51262: PUSH
51263: LD_VAR 0 5
51267: PUSH
51268: FOR_IN
51269: IFFALSE 51301
// begin result := EnemyInRange ( i , 22 ) ;
51271: LD_ADDR_VAR 0 2
51275: PUSH
51276: LD_VAR 0 3
51280: PPUSH
51281: LD_INT 22
51283: PPUSH
51284: CALL 48728 0 2
51288: ST_TO_ADDR
// if result then
51289: LD_VAR 0 2
51293: IFFALSE 51299
// exit ;
51295: POP
51296: POP
51297: GO 51303
// end ;
51299: GO 51268
51301: POP
51302: POP
// end ;
51303: LD_VAR 0 2
51307: RET
// export function FilterByTag ( units , tag ) ; begin
51308: LD_INT 0
51310: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51311: LD_ADDR_VAR 0 3
51315: PUSH
51316: LD_VAR 0 1
51320: PPUSH
51321: LD_INT 120
51323: PUSH
51324: LD_VAR 0 2
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PPUSH
51333: CALL_OW 72
51337: ST_TO_ADDR
// end ;
51338: LD_VAR 0 3
51342: RET
// export function IsDriver ( un ) ; begin
51343: LD_INT 0
51345: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51346: LD_ADDR_VAR 0 2
51350: PUSH
51351: LD_VAR 0 1
51355: PUSH
51356: LD_INT 55
51358: PUSH
51359: EMPTY
51360: LIST
51361: PPUSH
51362: CALL_OW 69
51366: IN
51367: ST_TO_ADDR
// end ;
51368: LD_VAR 0 2
51372: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51373: LD_INT 0
51375: PPUSH
51376: PPUSH
// list := [ ] ;
51377: LD_ADDR_VAR 0 5
51381: PUSH
51382: EMPTY
51383: ST_TO_ADDR
// case d of 0 :
51384: LD_VAR 0 3
51388: PUSH
51389: LD_INT 0
51391: DOUBLE
51392: EQUAL
51393: IFTRUE 51397
51395: GO 51530
51397: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51398: LD_ADDR_VAR 0 5
51402: PUSH
51403: LD_VAR 0 1
51407: PUSH
51408: LD_INT 4
51410: MINUS
51411: PUSH
51412: LD_VAR 0 2
51416: PUSH
51417: LD_INT 4
51419: MINUS
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: LIST
51428: PUSH
51429: LD_VAR 0 1
51433: PUSH
51434: LD_INT 3
51436: MINUS
51437: PUSH
51438: LD_VAR 0 2
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: LIST
51450: PUSH
51451: LD_VAR 0 1
51455: PUSH
51456: LD_INT 4
51458: PLUS
51459: PUSH
51460: LD_VAR 0 2
51464: PUSH
51465: LD_INT 4
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: LIST
51472: PUSH
51473: LD_VAR 0 1
51477: PUSH
51478: LD_INT 3
51480: PLUS
51481: PUSH
51482: LD_VAR 0 2
51486: PUSH
51487: LD_INT 3
51489: PLUS
51490: PUSH
51491: LD_INT 5
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: LIST
51498: PUSH
51499: LD_VAR 0 1
51503: PUSH
51504: LD_VAR 0 2
51508: PUSH
51509: LD_INT 4
51511: PLUS
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: LIST
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: ST_TO_ADDR
// end ; 1 :
51528: GO 52228
51530: LD_INT 1
51532: DOUBLE
51533: EQUAL
51534: IFTRUE 51538
51536: GO 51671
51538: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51539: LD_ADDR_VAR 0 5
51543: PUSH
51544: LD_VAR 0 1
51548: PUSH
51549: LD_VAR 0 2
51553: PUSH
51554: LD_INT 4
51556: MINUS
51557: PUSH
51558: LD_INT 3
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: PUSH
51566: LD_VAR 0 1
51570: PUSH
51571: LD_INT 3
51573: MINUS
51574: PUSH
51575: LD_VAR 0 2
51579: PUSH
51580: LD_INT 3
51582: MINUS
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: LIST
51591: PUSH
51592: LD_VAR 0 1
51596: PUSH
51597: LD_INT 4
51599: MINUS
51600: PUSH
51601: LD_VAR 0 2
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: LIST
51613: PUSH
51614: LD_VAR 0 1
51618: PUSH
51619: LD_VAR 0 2
51623: PUSH
51624: LD_INT 3
51626: PLUS
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: LIST
51635: PUSH
51636: LD_VAR 0 1
51640: PUSH
51641: LD_INT 4
51643: PLUS
51644: PUSH
51645: LD_VAR 0 2
51649: PUSH
51650: LD_INT 4
51652: PLUS
51653: PUSH
51654: LD_INT 5
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: LIST
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: ST_TO_ADDR
// end ; 2 :
51669: GO 52228
51671: LD_INT 2
51673: DOUBLE
51674: EQUAL
51675: IFTRUE 51679
51677: GO 51808
51679: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51680: LD_ADDR_VAR 0 5
51684: PUSH
51685: LD_VAR 0 1
51689: PUSH
51690: LD_VAR 0 2
51694: PUSH
51695: LD_INT 3
51697: MINUS
51698: PUSH
51699: LD_INT 3
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: LIST
51706: PUSH
51707: LD_VAR 0 1
51711: PUSH
51712: LD_INT 4
51714: PLUS
51715: PUSH
51716: LD_VAR 0 2
51720: PUSH
51721: LD_INT 4
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: LIST
51728: PUSH
51729: LD_VAR 0 1
51733: PUSH
51734: LD_VAR 0 2
51738: PUSH
51739: LD_INT 4
51741: PLUS
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: PUSH
51751: LD_VAR 0 1
51755: PUSH
51756: LD_INT 3
51758: MINUS
51759: PUSH
51760: LD_VAR 0 2
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: LIST
51772: PUSH
51773: LD_VAR 0 1
51777: PUSH
51778: LD_INT 4
51780: MINUS
51781: PUSH
51782: LD_VAR 0 2
51786: PUSH
51787: LD_INT 4
51789: MINUS
51790: PUSH
51791: LD_INT 2
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: LIST
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: ST_TO_ADDR
// end ; 3 :
51806: GO 52228
51808: LD_INT 3
51810: DOUBLE
51811: EQUAL
51812: IFTRUE 51816
51814: GO 51949
51816: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51817: LD_ADDR_VAR 0 5
51821: PUSH
51822: LD_VAR 0 1
51826: PUSH
51827: LD_INT 3
51829: PLUS
51830: PUSH
51831: LD_VAR 0 2
51835: PUSH
51836: LD_INT 4
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: LIST
51843: PUSH
51844: LD_VAR 0 1
51848: PUSH
51849: LD_INT 4
51851: PLUS
51852: PUSH
51853: LD_VAR 0 2
51857: PUSH
51858: LD_INT 4
51860: PLUS
51861: PUSH
51862: LD_INT 5
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: PUSH
51870: LD_VAR 0 1
51874: PUSH
51875: LD_INT 4
51877: MINUS
51878: PUSH
51879: LD_VAR 0 2
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: LIST
51891: PUSH
51892: LD_VAR 0 1
51896: PUSH
51897: LD_VAR 0 2
51901: PUSH
51902: LD_INT 4
51904: MINUS
51905: PUSH
51906: LD_INT 3
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: LIST
51913: PUSH
51914: LD_VAR 0 1
51918: PUSH
51919: LD_INT 3
51921: MINUS
51922: PUSH
51923: LD_VAR 0 2
51927: PUSH
51928: LD_INT 3
51930: MINUS
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: LIST
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: ST_TO_ADDR
// end ; 4 :
51947: GO 52228
51949: LD_INT 4
51951: DOUBLE
51952: EQUAL
51953: IFTRUE 51957
51955: GO 52090
51957: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51958: LD_ADDR_VAR 0 5
51962: PUSH
51963: LD_VAR 0 1
51967: PUSH
51968: LD_VAR 0 2
51972: PUSH
51973: LD_INT 4
51975: PLUS
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: LIST
51984: PUSH
51985: LD_VAR 0 1
51989: PUSH
51990: LD_INT 3
51992: PLUS
51993: PUSH
51994: LD_VAR 0 2
51998: PUSH
51999: LD_INT 3
52001: PLUS
52002: PUSH
52003: LD_INT 5
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: LIST
52010: PUSH
52011: LD_VAR 0 1
52015: PUSH
52016: LD_INT 4
52018: PLUS
52019: PUSH
52020: LD_VAR 0 2
52024: PUSH
52025: LD_INT 4
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: LIST
52032: PUSH
52033: LD_VAR 0 1
52037: PUSH
52038: LD_VAR 0 2
52042: PUSH
52043: LD_INT 3
52045: MINUS
52046: PUSH
52047: LD_INT 3
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: LIST
52054: PUSH
52055: LD_VAR 0 1
52059: PUSH
52060: LD_INT 4
52062: MINUS
52063: PUSH
52064: LD_VAR 0 2
52068: PUSH
52069: LD_INT 4
52071: MINUS
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: LIST
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: ST_TO_ADDR
// end ; 5 :
52088: GO 52228
52090: LD_INT 5
52092: DOUBLE
52093: EQUAL
52094: IFTRUE 52098
52096: GO 52227
52098: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52099: LD_ADDR_VAR 0 5
52103: PUSH
52104: LD_VAR 0 1
52108: PUSH
52109: LD_INT 4
52111: MINUS
52112: PUSH
52113: LD_VAR 0 2
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: LIST
52125: PUSH
52126: LD_VAR 0 1
52130: PUSH
52131: LD_VAR 0 2
52135: PUSH
52136: LD_INT 4
52138: MINUS
52139: PUSH
52140: LD_INT 3
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: LIST
52147: PUSH
52148: LD_VAR 0 1
52152: PUSH
52153: LD_INT 4
52155: PLUS
52156: PUSH
52157: LD_VAR 0 2
52161: PUSH
52162: LD_INT 4
52164: PLUS
52165: PUSH
52166: LD_INT 5
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: LIST
52173: PUSH
52174: LD_VAR 0 1
52178: PUSH
52179: LD_INT 3
52181: PLUS
52182: PUSH
52183: LD_VAR 0 2
52187: PUSH
52188: LD_INT 4
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: LIST
52195: PUSH
52196: LD_VAR 0 1
52200: PUSH
52201: LD_VAR 0 2
52205: PUSH
52206: LD_INT 3
52208: PLUS
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: LIST
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: ST_TO_ADDR
// end ; end ;
52225: GO 52228
52227: POP
// result := list ;
52228: LD_ADDR_VAR 0 4
52232: PUSH
52233: LD_VAR 0 5
52237: ST_TO_ADDR
// end ;
52238: LD_VAR 0 4
52242: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52243: LD_INT 0
52245: PPUSH
52246: PPUSH
52247: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52248: LD_VAR 0 1
52252: NOT
52253: IFTRUE 52281
52255: PUSH
52256: LD_VAR 0 2
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: LD_INT 3
52269: PUSH
52270: LD_INT 4
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: IN
52279: NOT
52280: OR
52281: IFFALSE 52285
// exit ;
52283: GO 52368
// tmp := [ ] ;
52285: LD_ADDR_VAR 0 5
52289: PUSH
52290: EMPTY
52291: ST_TO_ADDR
// for i in units do
52292: LD_ADDR_VAR 0 4
52296: PUSH
52297: LD_VAR 0 1
52301: PUSH
52302: FOR_IN
52303: IFFALSE 52337
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52305: LD_ADDR_VAR 0 5
52309: PUSH
52310: LD_VAR 0 5
52314: PPUSH
52315: LD_VAR 0 4
52319: PPUSH
52320: LD_VAR 0 2
52324: PPUSH
52325: CALL_OW 259
52329: PPUSH
52330: CALL 53763 0 2
52334: ST_TO_ADDR
52335: GO 52302
52337: POP
52338: POP
// if not tmp then
52339: LD_VAR 0 5
52343: NOT
52344: IFFALSE 52348
// exit ;
52346: GO 52368
// result := SortListByListDesc ( units , tmp ) ;
52348: LD_ADDR_VAR 0 3
52352: PUSH
52353: LD_VAR 0 1
52357: PPUSH
52358: LD_VAR 0 5
52362: PPUSH
52363: CALL_OW 77
52367: ST_TO_ADDR
// end ;
52368: LD_VAR 0 3
52372: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52373: LD_INT 0
52375: PPUSH
52376: PPUSH
52377: PPUSH
// result := false ;
52378: LD_ADDR_VAR 0 3
52382: PUSH
52383: LD_INT 0
52385: ST_TO_ADDR
// if not building then
52386: LD_VAR 0 2
52390: NOT
52391: IFFALSE 52395
// exit ;
52393: GO 52539
// x := GetX ( building ) ;
52395: LD_ADDR_VAR 0 4
52399: PUSH
52400: LD_VAR 0 2
52404: PPUSH
52405: CALL_OW 250
52409: ST_TO_ADDR
// y := GetY ( building ) ;
52410: LD_ADDR_VAR 0 5
52414: PUSH
52415: LD_VAR 0 2
52419: PPUSH
52420: CALL_OW 251
52424: ST_TO_ADDR
// if not x or not y then
52425: LD_VAR 0 4
52429: NOT
52430: IFTRUE 52439
52432: PUSH
52433: LD_VAR 0 5
52437: NOT
52438: OR
52439: IFFALSE 52443
// exit ;
52441: GO 52539
// if GetTaskList ( unit ) then
52443: LD_VAR 0 1
52447: PPUSH
52448: CALL_OW 437
52452: IFFALSE 52539
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52454: LD_STRING e
52456: PUSH
52457: LD_VAR 0 1
52461: PPUSH
52462: CALL_OW 437
52466: PUSH
52467: LD_INT 1
52469: ARRAY
52470: PUSH
52471: LD_INT 1
52473: ARRAY
52474: EQUAL
52475: IFFALSE 52502
52477: PUSH
52478: LD_VAR 0 4
52482: PUSH
52483: LD_VAR 0 1
52487: PPUSH
52488: CALL_OW 437
52492: PUSH
52493: LD_INT 1
52495: ARRAY
52496: PUSH
52497: LD_INT 2
52499: ARRAY
52500: EQUAL
52501: AND
52502: IFFALSE 52529
52504: PUSH
52505: LD_VAR 0 5
52509: PUSH
52510: LD_VAR 0 1
52514: PPUSH
52515: CALL_OW 437
52519: PUSH
52520: LD_INT 1
52522: ARRAY
52523: PUSH
52524: LD_INT 3
52526: ARRAY
52527: EQUAL
52528: AND
52529: IFFALSE 52539
// result := true end ;
52531: LD_ADDR_VAR 0 3
52535: PUSH
52536: LD_INT 1
52538: ST_TO_ADDR
// end ;
52539: LD_VAR 0 3
52543: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52544: LD_INT 0
52546: PPUSH
// result := false ;
52547: LD_ADDR_VAR 0 4
52551: PUSH
52552: LD_INT 0
52554: ST_TO_ADDR
// if GetTaskList ( unit ) then
52555: LD_VAR 0 1
52559: PPUSH
52560: CALL_OW 437
52564: IFFALSE 52651
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52566: LD_STRING M
52568: PUSH
52569: LD_VAR 0 1
52573: PPUSH
52574: CALL_OW 437
52578: PUSH
52579: LD_INT 1
52581: ARRAY
52582: PUSH
52583: LD_INT 1
52585: ARRAY
52586: EQUAL
52587: IFFALSE 52614
52589: PUSH
52590: LD_VAR 0 2
52594: PUSH
52595: LD_VAR 0 1
52599: PPUSH
52600: CALL_OW 437
52604: PUSH
52605: LD_INT 1
52607: ARRAY
52608: PUSH
52609: LD_INT 2
52611: ARRAY
52612: EQUAL
52613: AND
52614: IFFALSE 52641
52616: PUSH
52617: LD_VAR 0 3
52621: PUSH
52622: LD_VAR 0 1
52626: PPUSH
52627: CALL_OW 437
52631: PUSH
52632: LD_INT 1
52634: ARRAY
52635: PUSH
52636: LD_INT 3
52638: ARRAY
52639: EQUAL
52640: AND
52641: IFFALSE 52651
// result := true ;
52643: LD_ADDR_VAR 0 4
52647: PUSH
52648: LD_INT 1
52650: ST_TO_ADDR
// end ; end ;
52651: LD_VAR 0 4
52655: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52656: LD_INT 0
52658: PPUSH
52659: PPUSH
52660: PPUSH
52661: PPUSH
// if not unit or not area then
52662: LD_VAR 0 1
52666: NOT
52667: IFTRUE 52676
52669: PUSH
52670: LD_VAR 0 2
52674: NOT
52675: OR
52676: IFFALSE 52680
// exit ;
52678: GO 52856
// tmp := AreaToList ( area , i ) ;
52680: LD_ADDR_VAR 0 6
52684: PUSH
52685: LD_VAR 0 2
52689: PPUSH
52690: LD_VAR 0 5
52694: PPUSH
52695: CALL_OW 517
52699: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52700: LD_ADDR_VAR 0 5
52704: PUSH
52705: DOUBLE
52706: LD_INT 1
52708: DEC
52709: ST_TO_ADDR
52710: LD_VAR 0 6
52714: PUSH
52715: LD_INT 1
52717: ARRAY
52718: PUSH
52719: FOR_TO
52720: IFFALSE 52854
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52722: LD_ADDR_VAR 0 7
52726: PUSH
52727: LD_VAR 0 6
52731: PUSH
52732: LD_INT 1
52734: ARRAY
52735: PUSH
52736: LD_VAR 0 5
52740: ARRAY
52741: PUSH
52742: LD_VAR 0 6
52746: PUSH
52747: LD_INT 2
52749: ARRAY
52750: PUSH
52751: LD_VAR 0 5
52755: ARRAY
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52761: LD_INT 92
52763: PUSH
52764: LD_VAR 0 7
52768: PUSH
52769: LD_INT 1
52771: ARRAY
52772: PUSH
52773: LD_VAR 0 7
52777: PUSH
52778: LD_INT 2
52780: ARRAY
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: PPUSH
52791: CALL_OW 69
52795: PUSH
52796: LD_INT 0
52798: EQUAL
52799: IFFALSE 52852
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52801: LD_VAR 0 1
52805: PPUSH
52806: LD_VAR 0 7
52810: PUSH
52811: LD_INT 1
52813: ARRAY
52814: PPUSH
52815: LD_VAR 0 7
52819: PUSH
52820: LD_INT 2
52822: ARRAY
52823: PPUSH
52824: LD_VAR 0 3
52828: PPUSH
52829: CALL_OW 48
// result := IsPlaced ( unit ) ;
52833: LD_ADDR_VAR 0 4
52837: PUSH
52838: LD_VAR 0 1
52842: PPUSH
52843: CALL_OW 305
52847: ST_TO_ADDR
// exit ;
52848: POP
52849: POP
52850: GO 52856
// end ; end ;
52852: GO 52719
52854: POP
52855: POP
// end ;
52856: LD_VAR 0 4
52860: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52861: LD_INT 0
52863: PPUSH
52864: PPUSH
52865: PPUSH
// if not side or side > 8 then
52866: LD_VAR 0 1
52870: NOT
52871: IFTRUE 52883
52873: PUSH
52874: LD_VAR 0 1
52878: PUSH
52879: LD_INT 8
52881: GREATER
52882: OR
52883: IFFALSE 52887
// exit ;
52885: GO 53074
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52887: LD_ADDR_VAR 0 4
52891: PUSH
52892: LD_INT 22
52894: PUSH
52895: LD_VAR 0 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 21
52906: PUSH
52907: LD_INT 3
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PPUSH
52918: CALL_OW 69
52922: ST_TO_ADDR
// if not tmp then
52923: LD_VAR 0 4
52927: NOT
52928: IFFALSE 52932
// exit ;
52930: GO 53074
// enable_addtolog := true ;
52932: LD_ADDR_OWVAR 81
52936: PUSH
52937: LD_INT 1
52939: ST_TO_ADDR
// AddToLog ( [ ) ;
52940: LD_STRING [
52942: PPUSH
52943: CALL_OW 561
// for i in tmp do
52947: LD_ADDR_VAR 0 3
52951: PUSH
52952: LD_VAR 0 4
52956: PUSH
52957: FOR_IN
52958: IFFALSE 53065
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52960: LD_STRING [
52962: PUSH
52963: LD_VAR 0 3
52967: PPUSH
52968: CALL_OW 266
52972: STR
52973: PUSH
52974: LD_STRING , 
52976: STR
52977: PUSH
52978: LD_VAR 0 3
52982: PPUSH
52983: CALL_OW 250
52987: STR
52988: PUSH
52989: LD_STRING , 
52991: STR
52992: PUSH
52993: LD_VAR 0 3
52997: PPUSH
52998: CALL_OW 251
53002: STR
53003: PUSH
53004: LD_STRING , 
53006: STR
53007: PUSH
53008: LD_VAR 0 3
53012: PPUSH
53013: CALL_OW 254
53017: STR
53018: PUSH
53019: LD_STRING , 
53021: STR
53022: PUSH
53023: LD_VAR 0 3
53027: PPUSH
53028: LD_INT 1
53030: PPUSH
53031: CALL_OW 268
53035: STR
53036: PUSH
53037: LD_STRING , 
53039: STR
53040: PUSH
53041: LD_VAR 0 3
53045: PPUSH
53046: LD_INT 2
53048: PPUSH
53049: CALL_OW 268
53053: STR
53054: PUSH
53055: LD_STRING ],
53057: STR
53058: PPUSH
53059: CALL_OW 561
// end ;
53063: GO 52957
53065: POP
53066: POP
// AddToLog ( ]; ) ;
53067: LD_STRING ];
53069: PPUSH
53070: CALL_OW 561
// end ;
53074: LD_VAR 0 2
53078: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53079: LD_INT 0
53081: PPUSH
53082: PPUSH
53083: PPUSH
53084: PPUSH
53085: PPUSH
// if not area or not rate or not max then
53086: LD_VAR 0 1
53090: NOT
53091: IFTRUE 53100
53093: PUSH
53094: LD_VAR 0 2
53098: NOT
53099: OR
53100: IFTRUE 53109
53102: PUSH
53103: LD_VAR 0 4
53107: NOT
53108: OR
53109: IFFALSE 53113
// exit ;
53111: GO 53302
// while 1 do
53113: LD_INT 1
53115: IFFALSE 53302
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53117: LD_ADDR_VAR 0 9
53121: PUSH
53122: LD_VAR 0 1
53126: PPUSH
53127: LD_INT 1
53129: PPUSH
53130: CALL_OW 287
53134: PUSH
53135: LD_INT 10
53137: MUL
53138: ST_TO_ADDR
// r := rate / 10 ;
53139: LD_ADDR_VAR 0 7
53143: PUSH
53144: LD_VAR 0 2
53148: PUSH
53149: LD_INT 10
53151: DIVREAL
53152: ST_TO_ADDR
// time := 1 1$00 ;
53153: LD_ADDR_VAR 0 8
53157: PUSH
53158: LD_INT 2100
53160: ST_TO_ADDR
// if amount < min then
53161: LD_VAR 0 9
53165: PUSH
53166: LD_VAR 0 3
53170: LESS
53171: IFFALSE 53189
// r := r * 2 else
53173: LD_ADDR_VAR 0 7
53177: PUSH
53178: LD_VAR 0 7
53182: PUSH
53183: LD_INT 2
53185: MUL
53186: ST_TO_ADDR
53187: GO 53215
// if amount > max then
53189: LD_VAR 0 9
53193: PUSH
53194: LD_VAR 0 4
53198: GREATER
53199: IFFALSE 53215
// r := r / 2 ;
53201: LD_ADDR_VAR 0 7
53205: PUSH
53206: LD_VAR 0 7
53210: PUSH
53211: LD_INT 2
53213: DIVREAL
53214: ST_TO_ADDR
// time := time / r ;
53215: LD_ADDR_VAR 0 8
53219: PUSH
53220: LD_VAR 0 8
53224: PUSH
53225: LD_VAR 0 7
53229: DIVREAL
53230: ST_TO_ADDR
// if time < 0 then
53231: LD_VAR 0 8
53235: PUSH
53236: LD_INT 0
53238: LESS
53239: IFFALSE 53256
// time := time * - 1 ;
53241: LD_ADDR_VAR 0 8
53245: PUSH
53246: LD_VAR 0 8
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: MUL
53255: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53256: LD_VAR 0 8
53260: PUSH
53261: LD_INT 35
53263: PPUSH
53264: LD_INT 875
53266: PPUSH
53267: CALL_OW 12
53271: PLUS
53272: PPUSH
53273: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53277: LD_INT 1
53279: PPUSH
53280: LD_INT 5
53282: PPUSH
53283: CALL_OW 12
53287: PPUSH
53288: LD_VAR 0 1
53292: PPUSH
53293: LD_INT 1
53295: PPUSH
53296: CALL_OW 55
// end ;
53300: GO 53113
// end ;
53302: LD_VAR 0 5
53306: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53307: LD_INT 0
53309: PPUSH
53310: PPUSH
53311: PPUSH
53312: PPUSH
53313: PPUSH
53314: PPUSH
53315: PPUSH
53316: PPUSH
// if not turrets or not factories then
53317: LD_VAR 0 1
53321: NOT
53322: IFTRUE 53331
53324: PUSH
53325: LD_VAR 0 2
53329: NOT
53330: OR
53331: IFFALSE 53335
// exit ;
53333: GO 53642
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53335: LD_ADDR_VAR 0 10
53339: PUSH
53340: LD_INT 5
53342: PUSH
53343: LD_INT 6
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 4
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 3
53362: PUSH
53363: LD_INT 5
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 24
53377: PUSH
53378: LD_INT 25
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 23
53387: PUSH
53388: LD_INT 27
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 42
53401: PUSH
53402: LD_INT 43
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 44
53411: PUSH
53412: LD_INT 46
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 45
53421: PUSH
53422: LD_INT 47
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: LIST
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: LIST
53438: ST_TO_ADDR
// result := [ ] ;
53439: LD_ADDR_VAR 0 3
53443: PUSH
53444: EMPTY
53445: ST_TO_ADDR
// for i in turrets do
53446: LD_ADDR_VAR 0 4
53450: PUSH
53451: LD_VAR 0 1
53455: PUSH
53456: FOR_IN
53457: IFFALSE 53640
// begin nat := GetNation ( i ) ;
53459: LD_ADDR_VAR 0 7
53463: PUSH
53464: LD_VAR 0 4
53468: PPUSH
53469: CALL_OW 248
53473: ST_TO_ADDR
// weapon := 0 ;
53474: LD_ADDR_VAR 0 8
53478: PUSH
53479: LD_INT 0
53481: ST_TO_ADDR
// if not nat then
53482: LD_VAR 0 7
53486: NOT
53487: IFFALSE 53491
// continue ;
53489: GO 53456
// for j in list [ nat ] do
53491: LD_ADDR_VAR 0 5
53495: PUSH
53496: LD_VAR 0 10
53500: PUSH
53501: LD_VAR 0 7
53505: ARRAY
53506: PUSH
53507: FOR_IN
53508: IFFALSE 53549
// if GetBWeapon ( i ) = j [ 1 ] then
53510: LD_VAR 0 4
53514: PPUSH
53515: CALL_OW 269
53519: PUSH
53520: LD_VAR 0 5
53524: PUSH
53525: LD_INT 1
53527: ARRAY
53528: EQUAL
53529: IFFALSE 53547
// begin weapon := j [ 2 ] ;
53531: LD_ADDR_VAR 0 8
53535: PUSH
53536: LD_VAR 0 5
53540: PUSH
53541: LD_INT 2
53543: ARRAY
53544: ST_TO_ADDR
// break ;
53545: GO 53549
// end ;
53547: GO 53507
53549: POP
53550: POP
// if not weapon then
53551: LD_VAR 0 8
53555: NOT
53556: IFFALSE 53560
// continue ;
53558: GO 53456
// for k in factories do
53560: LD_ADDR_VAR 0 6
53564: PUSH
53565: LD_VAR 0 2
53569: PUSH
53570: FOR_IN
53571: IFFALSE 53636
// begin weapons := AvailableWeaponList ( k ) ;
53573: LD_ADDR_VAR 0 9
53577: PUSH
53578: LD_VAR 0 6
53582: PPUSH
53583: CALL_OW 478
53587: ST_TO_ADDR
// if not weapons then
53588: LD_VAR 0 9
53592: NOT
53593: IFFALSE 53597
// continue ;
53595: GO 53570
// if weapon in weapons then
53597: LD_VAR 0 8
53601: PUSH
53602: LD_VAR 0 9
53606: IN
53607: IFFALSE 53634
// begin result := [ i , weapon ] ;
53609: LD_ADDR_VAR 0 3
53613: PUSH
53614: LD_VAR 0 4
53618: PUSH
53619: LD_VAR 0 8
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: ST_TO_ADDR
// exit ;
53628: POP
53629: POP
53630: POP
53631: POP
53632: GO 53642
// end ; end ;
53634: GO 53570
53636: POP
53637: POP
// end ;
53638: GO 53456
53640: POP
53641: POP
// end ;
53642: LD_VAR 0 3
53646: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53647: LD_INT 0
53649: PPUSH
// if not side or side > 8 then
53650: LD_VAR 0 3
53654: NOT
53655: IFTRUE 53667
53657: PUSH
53658: LD_VAR 0 3
53662: PUSH
53663: LD_INT 8
53665: GREATER
53666: OR
53667: IFFALSE 53671
// exit ;
53669: GO 53730
// if not range then
53671: LD_VAR 0 4
53675: NOT
53676: IFFALSE 53687
// range := - 12 ;
53678: LD_ADDR_VAR 0 4
53682: PUSH
53683: LD_INT 12
53685: NEG
53686: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53687: LD_VAR 0 1
53691: PPUSH
53692: LD_VAR 0 2
53696: PPUSH
53697: LD_VAR 0 3
53701: PPUSH
53702: LD_VAR 0 4
53706: PPUSH
53707: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53711: LD_VAR 0 1
53715: PPUSH
53716: LD_VAR 0 2
53720: PPUSH
53721: LD_VAR 0 3
53725: PPUSH
53726: CALL_OW 331
// end ;
53730: LD_VAR 0 5
53734: RET
// export function Video ( mode ) ; begin
53735: LD_INT 0
53737: PPUSH
// ingame_video = mode ;
53738: LD_ADDR_OWVAR 52
53742: PUSH
53743: LD_VAR 0 1
53747: ST_TO_ADDR
// interface_hidden = mode ;
53748: LD_ADDR_OWVAR 54
53752: PUSH
53753: LD_VAR 0 1
53757: ST_TO_ADDR
// end ;
53758: LD_VAR 0 2
53762: RET
// export function Join ( array , element ) ; begin
53763: LD_INT 0
53765: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53766: LD_ADDR_VAR 0 3
53770: PUSH
53771: LD_VAR 0 1
53775: PPUSH
53776: LD_VAR 0 1
53780: PUSH
53781: LD_INT 1
53783: PLUS
53784: PPUSH
53785: LD_VAR 0 2
53789: PPUSH
53790: CALL_OW 1
53794: ST_TO_ADDR
// end ;
53795: LD_VAR 0 3
53799: RET
// export function JoinUnion ( array , element ) ; begin
53800: LD_INT 0
53802: PPUSH
// result := array union element ;
53803: LD_ADDR_VAR 0 3
53807: PUSH
53808: LD_VAR 0 1
53812: PUSH
53813: LD_VAR 0 2
53817: UNION
53818: ST_TO_ADDR
// end ;
53819: LD_VAR 0 3
53823: RET
// export function GetBehemoths ( side ) ; begin
53824: LD_INT 0
53826: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53827: LD_ADDR_VAR 0 2
53831: PUSH
53832: LD_INT 22
53834: PUSH
53835: LD_VAR 0 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 31
53846: PUSH
53847: LD_INT 25
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PPUSH
53858: CALL_OW 69
53862: ST_TO_ADDR
// end ;
53863: LD_VAR 0 2
53867: RET
// export function Shuffle ( array ) ; var i , index ; begin
53868: LD_INT 0
53870: PPUSH
53871: PPUSH
53872: PPUSH
// result := [ ] ;
53873: LD_ADDR_VAR 0 2
53877: PUSH
53878: EMPTY
53879: ST_TO_ADDR
// if not array then
53880: LD_VAR 0 1
53884: NOT
53885: IFFALSE 53889
// exit ;
53887: GO 53988
// Randomize ;
53889: CALL_OW 10
// for i = array downto 1 do
53893: LD_ADDR_VAR 0 3
53897: PUSH
53898: DOUBLE
53899: LD_VAR 0 1
53903: INC
53904: ST_TO_ADDR
53905: LD_INT 1
53907: PUSH
53908: FOR_DOWNTO
53909: IFFALSE 53986
// begin index := rand ( 1 , array ) ;
53911: LD_ADDR_VAR 0 4
53915: PUSH
53916: LD_INT 1
53918: PPUSH
53919: LD_VAR 0 1
53923: PPUSH
53924: CALL_OW 12
53928: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53929: LD_ADDR_VAR 0 2
53933: PUSH
53934: LD_VAR 0 2
53938: PPUSH
53939: LD_VAR 0 2
53943: PUSH
53944: LD_INT 1
53946: PLUS
53947: PPUSH
53948: LD_VAR 0 1
53952: PUSH
53953: LD_VAR 0 4
53957: ARRAY
53958: PPUSH
53959: CALL_OW 2
53963: ST_TO_ADDR
// array := Delete ( array , index ) ;
53964: LD_ADDR_VAR 0 1
53968: PUSH
53969: LD_VAR 0 1
53973: PPUSH
53974: LD_VAR 0 4
53978: PPUSH
53979: CALL_OW 3
53983: ST_TO_ADDR
// end ;
53984: GO 53908
53986: POP
53987: POP
// end ;
53988: LD_VAR 0 2
53992: RET
// export function GetBaseMaterials ( base ) ; begin
53993: LD_INT 0
53995: PPUSH
// result := [ 0 , 0 , 0 ] ;
53996: LD_ADDR_VAR 0 2
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: LIST
54014: ST_TO_ADDR
// if not base then
54015: LD_VAR 0 1
54019: NOT
54020: IFFALSE 54024
// exit ;
54022: GO 54073
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54024: LD_ADDR_VAR 0 2
54028: PUSH
54029: LD_VAR 0 1
54033: PPUSH
54034: LD_INT 1
54036: PPUSH
54037: CALL_OW 275
54041: PUSH
54042: LD_VAR 0 1
54046: PPUSH
54047: LD_INT 2
54049: PPUSH
54050: CALL_OW 275
54054: PUSH
54055: LD_VAR 0 1
54059: PPUSH
54060: LD_INT 3
54062: PPUSH
54063: CALL_OW 275
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: LIST
54072: ST_TO_ADDR
// end ;
54073: LD_VAR 0 2
54077: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54078: LD_INT 0
54080: PPUSH
54081: PPUSH
// result := array ;
54082: LD_ADDR_VAR 0 3
54086: PUSH
54087: LD_VAR 0 1
54091: ST_TO_ADDR
// if size >= result then
54092: LD_VAR 0 2
54096: PUSH
54097: LD_VAR 0 3
54101: GREATEREQUAL
54102: IFFALSE 54106
// exit ;
54104: GO 54156
// if size then
54106: LD_VAR 0 2
54110: IFFALSE 54156
// for i := array downto size do
54112: LD_ADDR_VAR 0 4
54116: PUSH
54117: DOUBLE
54118: LD_VAR 0 1
54122: INC
54123: ST_TO_ADDR
54124: LD_VAR 0 2
54128: PUSH
54129: FOR_DOWNTO
54130: IFFALSE 54154
// result := Delete ( result , result ) ;
54132: LD_ADDR_VAR 0 3
54136: PUSH
54137: LD_VAR 0 3
54141: PPUSH
54142: LD_VAR 0 3
54146: PPUSH
54147: CALL_OW 3
54151: ST_TO_ADDR
54152: GO 54129
54154: POP
54155: POP
// end ;
54156: LD_VAR 0 3
54160: RET
// export function ComExit ( unit ) ; var tmp ; begin
54161: LD_INT 0
54163: PPUSH
54164: PPUSH
// if not IsInUnit ( unit ) then
54165: LD_VAR 0 1
54169: PPUSH
54170: CALL_OW 310
54174: NOT
54175: IFFALSE 54179
// exit ;
54177: GO 54239
// tmp := IsInUnit ( unit ) ;
54179: LD_ADDR_VAR 0 3
54183: PUSH
54184: LD_VAR 0 1
54188: PPUSH
54189: CALL_OW 310
54193: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54194: LD_VAR 0 3
54198: PPUSH
54199: CALL_OW 247
54203: PUSH
54204: LD_INT 2
54206: EQUAL
54207: IFFALSE 54220
// ComExitVehicle ( unit ) else
54209: LD_VAR 0 1
54213: PPUSH
54214: CALL_OW 121
54218: GO 54229
// ComExitBuilding ( unit ) ;
54220: LD_VAR 0 1
54224: PPUSH
54225: CALL_OW 122
// result := tmp ;
54229: LD_ADDR_VAR 0 2
54233: PUSH
54234: LD_VAR 0 3
54238: ST_TO_ADDR
// end ;
54239: LD_VAR 0 2
54243: RET
// export function ComExitAll ( units ) ; var i ; begin
54244: LD_INT 0
54246: PPUSH
54247: PPUSH
// if not units then
54248: LD_VAR 0 1
54252: NOT
54253: IFFALSE 54257
// exit ;
54255: GO 54283
// for i in units do
54257: LD_ADDR_VAR 0 3
54261: PUSH
54262: LD_VAR 0 1
54266: PUSH
54267: FOR_IN
54268: IFFALSE 54281
// ComExit ( i ) ;
54270: LD_VAR 0 3
54274: PPUSH
54275: CALL 54161 0 1
54279: GO 54267
54281: POP
54282: POP
// end ;
54283: LD_VAR 0 2
54287: RET
// export function ResetHc ; begin
54288: LD_INT 0
54290: PPUSH
// InitHc ;
54291: CALL_OW 19
// hc_importance := 0 ;
54295: LD_ADDR_OWVAR 32
54299: PUSH
54300: LD_INT 0
54302: ST_TO_ADDR
// end ;
54303: LD_VAR 0 1
54307: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54308: LD_INT 0
54310: PPUSH
54311: PPUSH
54312: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54313: LD_ADDR_VAR 0 6
54317: PUSH
54318: LD_VAR 0 1
54322: PUSH
54323: LD_VAR 0 3
54327: PLUS
54328: PUSH
54329: LD_INT 2
54331: DIV
54332: ST_TO_ADDR
// if _x < 0 then
54333: LD_VAR 0 6
54337: PUSH
54338: LD_INT 0
54340: LESS
54341: IFFALSE 54358
// _x := _x * - 1 ;
54343: LD_ADDR_VAR 0 6
54347: PUSH
54348: LD_VAR 0 6
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: MUL
54357: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54358: LD_ADDR_VAR 0 7
54362: PUSH
54363: LD_VAR 0 2
54367: PUSH
54368: LD_VAR 0 4
54372: PLUS
54373: PUSH
54374: LD_INT 2
54376: DIV
54377: ST_TO_ADDR
// if _y < 0 then
54378: LD_VAR 0 7
54382: PUSH
54383: LD_INT 0
54385: LESS
54386: IFFALSE 54403
// _y := _y * - 1 ;
54388: LD_ADDR_VAR 0 7
54392: PUSH
54393: LD_VAR 0 7
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: MUL
54402: ST_TO_ADDR
// result := [ _x , _y ] ;
54403: LD_ADDR_VAR 0 5
54407: PUSH
54408: LD_VAR 0 6
54412: PUSH
54413: LD_VAR 0 7
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: ST_TO_ADDR
// end ;
54422: LD_VAR 0 5
54426: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54427: LD_INT 0
54429: PPUSH
54430: PPUSH
54431: PPUSH
54432: PPUSH
// task := GetTaskList ( unit ) ;
54433: LD_ADDR_VAR 0 7
54437: PUSH
54438: LD_VAR 0 1
54442: PPUSH
54443: CALL_OW 437
54447: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54448: LD_VAR 0 7
54452: NOT
54453: IFFALSE 54472
54455: PUSH
54456: LD_VAR 0 1
54460: PPUSH
54461: LD_VAR 0 2
54465: PPUSH
54466: CALL_OW 308
54470: NOT
54471: AND
54472: IFFALSE 54476
// exit ;
54474: GO 54594
// if IsInArea ( unit , area ) then
54476: LD_VAR 0 1
54480: PPUSH
54481: LD_VAR 0 2
54485: PPUSH
54486: CALL_OW 308
54490: IFFALSE 54508
// begin ComMoveToArea ( unit , goAway ) ;
54492: LD_VAR 0 1
54496: PPUSH
54497: LD_VAR 0 3
54501: PPUSH
54502: CALL_OW 113
// exit ;
54506: GO 54594
// end ; if task [ 1 ] [ 1 ] <> M then
54508: LD_VAR 0 7
54512: PUSH
54513: LD_INT 1
54515: ARRAY
54516: PUSH
54517: LD_INT 1
54519: ARRAY
54520: PUSH
54521: LD_STRING M
54523: NONEQUAL
54524: IFFALSE 54528
// exit ;
54526: GO 54594
// x := task [ 1 ] [ 2 ] ;
54528: LD_ADDR_VAR 0 5
54532: PUSH
54533: LD_VAR 0 7
54537: PUSH
54538: LD_INT 1
54540: ARRAY
54541: PUSH
54542: LD_INT 2
54544: ARRAY
54545: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54546: LD_ADDR_VAR 0 6
54550: PUSH
54551: LD_VAR 0 7
54555: PUSH
54556: LD_INT 1
54558: ARRAY
54559: PUSH
54560: LD_INT 3
54562: ARRAY
54563: ST_TO_ADDR
// if InArea ( x , y , area ) then
54564: LD_VAR 0 5
54568: PPUSH
54569: LD_VAR 0 6
54573: PPUSH
54574: LD_VAR 0 2
54578: PPUSH
54579: CALL_OW 309
54583: IFFALSE 54594
// ComStop ( unit ) ;
54585: LD_VAR 0 1
54589: PPUSH
54590: CALL_OW 141
// end ;
54594: LD_VAR 0 4
54598: RET
// export function Abs ( value ) ; begin
54599: LD_INT 0
54601: PPUSH
// result := value ;
54602: LD_ADDR_VAR 0 2
54606: PUSH
54607: LD_VAR 0 1
54611: ST_TO_ADDR
// if value < 0 then
54612: LD_VAR 0 1
54616: PUSH
54617: LD_INT 0
54619: LESS
54620: IFFALSE 54637
// result := value * - 1 ;
54622: LD_ADDR_VAR 0 2
54626: PUSH
54627: LD_VAR 0 1
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: MUL
54636: ST_TO_ADDR
// end ;
54637: LD_VAR 0 2
54641: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54642: LD_INT 0
54644: PPUSH
54645: PPUSH
54646: PPUSH
54647: PPUSH
54648: PPUSH
54649: PPUSH
54650: PPUSH
54651: PPUSH
// if not unit or not building then
54652: LD_VAR 0 1
54656: NOT
54657: IFTRUE 54666
54659: PUSH
54660: LD_VAR 0 2
54664: NOT
54665: OR
54666: IFFALSE 54670
// exit ;
54668: GO 54898
// x := GetX ( building ) ;
54670: LD_ADDR_VAR 0 4
54674: PUSH
54675: LD_VAR 0 2
54679: PPUSH
54680: CALL_OW 250
54684: ST_TO_ADDR
// y := GetY ( building ) ;
54685: LD_ADDR_VAR 0 6
54689: PUSH
54690: LD_VAR 0 2
54694: PPUSH
54695: CALL_OW 251
54699: ST_TO_ADDR
// d := GetDir ( building ) ;
54700: LD_ADDR_VAR 0 8
54704: PUSH
54705: LD_VAR 0 2
54709: PPUSH
54710: CALL_OW 254
54714: ST_TO_ADDR
// r := 4 ;
54715: LD_ADDR_VAR 0 9
54719: PUSH
54720: LD_INT 4
54722: ST_TO_ADDR
// for i := 1 to 5 do
54723: LD_ADDR_VAR 0 10
54727: PUSH
54728: DOUBLE
54729: LD_INT 1
54731: DEC
54732: ST_TO_ADDR
54733: LD_INT 5
54735: PUSH
54736: FOR_TO
54737: IFFALSE 54896
// begin _x := ShiftX ( x , d , r + i ) ;
54739: LD_ADDR_VAR 0 5
54743: PUSH
54744: LD_VAR 0 4
54748: PPUSH
54749: LD_VAR 0 8
54753: PPUSH
54754: LD_VAR 0 9
54758: PUSH
54759: LD_VAR 0 10
54763: PLUS
54764: PPUSH
54765: CALL_OW 272
54769: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54770: LD_ADDR_VAR 0 7
54774: PUSH
54775: LD_VAR 0 6
54779: PPUSH
54780: LD_VAR 0 8
54784: PPUSH
54785: LD_VAR 0 9
54789: PUSH
54790: LD_VAR 0 10
54794: PLUS
54795: PPUSH
54796: CALL_OW 273
54800: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54801: LD_VAR 0 5
54805: PPUSH
54806: LD_VAR 0 7
54810: PPUSH
54811: CALL_OW 488
54815: IFFALSE 54850
54817: PUSH
54818: LD_VAR 0 5
54822: PPUSH
54823: LD_VAR 0 7
54827: PPUSH
54828: CALL_OW 428
54832: PPUSH
54833: CALL_OW 247
54837: PUSH
54838: LD_INT 3
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: IN
54848: NOT
54849: AND
54850: IFFALSE 54894
// begin ComMoveXY ( unit , _x , _y ) ;
54852: LD_VAR 0 1
54856: PPUSH
54857: LD_VAR 0 5
54861: PPUSH
54862: LD_VAR 0 7
54866: PPUSH
54867: CALL_OW 111
// result := [ _x , _y ] ;
54871: LD_ADDR_VAR 0 3
54875: PUSH
54876: LD_VAR 0 5
54880: PUSH
54881: LD_VAR 0 7
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: ST_TO_ADDR
// exit ;
54890: POP
54891: POP
54892: GO 54898
// end ; end ;
54894: GO 54736
54896: POP
54897: POP
// end ;
54898: LD_VAR 0 3
54902: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54903: LD_INT 0
54905: PPUSH
54906: PPUSH
54907: PPUSH
// result := 0 ;
54908: LD_ADDR_VAR 0 3
54912: PUSH
54913: LD_INT 0
54915: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54916: LD_VAR 0 1
54920: PUSH
54921: LD_INT 0
54923: LESS
54924: IFTRUE 54936
54926: PUSH
54927: LD_VAR 0 1
54931: PUSH
54932: LD_INT 8
54934: GREATER
54935: OR
54936: IFTRUE 54948
54938: PUSH
54939: LD_VAR 0 2
54943: PUSH
54944: LD_INT 0
54946: LESS
54947: OR
54948: IFTRUE 54960
54950: PUSH
54951: LD_VAR 0 2
54955: PUSH
54956: LD_INT 8
54958: GREATER
54959: OR
54960: IFFALSE 54964
// exit ;
54962: GO 55039
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54964: LD_ADDR_VAR 0 4
54968: PUSH
54969: LD_INT 22
54971: PUSH
54972: LD_VAR 0 2
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PPUSH
54981: CALL_OW 69
54985: PUSH
54986: FOR_IN
54987: IFFALSE 55037
// begin un := UnitShoot ( i ) ;
54989: LD_ADDR_VAR 0 5
54993: PUSH
54994: LD_VAR 0 4
54998: PPUSH
54999: CALL_OW 504
55003: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55004: LD_VAR 0 5
55008: PPUSH
55009: CALL_OW 255
55013: PUSH
55014: LD_VAR 0 1
55018: EQUAL
55019: IFFALSE 55035
// begin result := un ;
55021: LD_ADDR_VAR 0 3
55025: PUSH
55026: LD_VAR 0 5
55030: ST_TO_ADDR
// exit ;
55031: POP
55032: POP
55033: GO 55039
// end ; end ;
55035: GO 54986
55037: POP
55038: POP
// end ;
55039: LD_VAR 0 3
55043: RET
// export function GetCargoBay ( units ) ; begin
55044: LD_INT 0
55046: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55047: LD_ADDR_VAR 0 2
55051: PUSH
55052: LD_VAR 0 1
55056: PPUSH
55057: LD_INT 2
55059: PUSH
55060: LD_INT 34
55062: PUSH
55063: LD_INT 12
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 34
55072: PUSH
55073: LD_INT 51
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 34
55082: PUSH
55083: LD_INT 32
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 34
55092: PUSH
55093: LD_INT 89
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: PPUSH
55107: CALL_OW 72
55111: ST_TO_ADDR
// end ;
55112: LD_VAR 0 2
55116: RET
// export function Negate ( value ) ; begin
55117: LD_INT 0
55119: PPUSH
// result := not value ;
55120: LD_ADDR_VAR 0 2
55124: PUSH
55125: LD_VAR 0 1
55129: NOT
55130: ST_TO_ADDR
// end ;
55131: LD_VAR 0 2
55135: RET
// export function Inc ( value ) ; begin
55136: LD_INT 0
55138: PPUSH
// result := value + 1 ;
55139: LD_ADDR_VAR 0 2
55143: PUSH
55144: LD_VAR 0 1
55148: PUSH
55149: LD_INT 1
55151: PLUS
55152: ST_TO_ADDR
// end ;
55153: LD_VAR 0 2
55157: RET
// export function Dec ( value ) ; begin
55158: LD_INT 0
55160: PPUSH
// result := value - 1 ;
55161: LD_ADDR_VAR 0 2
55165: PUSH
55166: LD_VAR 0 1
55170: PUSH
55171: LD_INT 1
55173: MINUS
55174: ST_TO_ADDR
// end ;
55175: LD_VAR 0 2
55179: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55180: LD_INT 0
55182: PPUSH
55183: PPUSH
55184: PPUSH
55185: PPUSH
55186: PPUSH
55187: PPUSH
55188: PPUSH
55189: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55190: LD_VAR 0 1
55194: PPUSH
55195: LD_VAR 0 2
55199: PPUSH
55200: CALL_OW 488
55204: NOT
55205: IFTRUE 55224
55207: PUSH
55208: LD_VAR 0 3
55212: PPUSH
55213: LD_VAR 0 4
55217: PPUSH
55218: CALL_OW 488
55222: NOT
55223: OR
55224: IFFALSE 55237
// begin result := - 1 ;
55226: LD_ADDR_VAR 0 5
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: ST_TO_ADDR
// exit ;
55235: GO 55472
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55237: LD_ADDR_VAR 0 12
55241: PUSH
55242: LD_VAR 0 1
55246: PPUSH
55247: LD_VAR 0 2
55251: PPUSH
55252: LD_VAR 0 3
55256: PPUSH
55257: LD_VAR 0 4
55261: PPUSH
55262: CALL 54308 0 4
55266: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55267: LD_ADDR_VAR 0 11
55271: PUSH
55272: LD_VAR 0 1
55276: PPUSH
55277: LD_VAR 0 2
55281: PPUSH
55282: LD_VAR 0 12
55286: PUSH
55287: LD_INT 1
55289: ARRAY
55290: PPUSH
55291: LD_VAR 0 12
55295: PUSH
55296: LD_INT 2
55298: ARRAY
55299: PPUSH
55300: CALL_OW 298
55304: ST_TO_ADDR
// distance := 9999 ;
55305: LD_ADDR_VAR 0 10
55309: PUSH
55310: LD_INT 9999
55312: ST_TO_ADDR
// for i := 0 to 5 do
55313: LD_ADDR_VAR 0 6
55317: PUSH
55318: DOUBLE
55319: LD_INT 0
55321: DEC
55322: ST_TO_ADDR
55323: LD_INT 5
55325: PUSH
55326: FOR_TO
55327: IFFALSE 55470
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55329: LD_ADDR_VAR 0 7
55333: PUSH
55334: LD_VAR 0 1
55338: PPUSH
55339: LD_VAR 0 6
55343: PPUSH
55344: LD_VAR 0 11
55348: PPUSH
55349: CALL_OW 272
55353: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55354: LD_ADDR_VAR 0 8
55358: PUSH
55359: LD_VAR 0 2
55363: PPUSH
55364: LD_VAR 0 6
55368: PPUSH
55369: LD_VAR 0 11
55373: PPUSH
55374: CALL_OW 273
55378: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55379: LD_VAR 0 7
55383: PPUSH
55384: LD_VAR 0 8
55388: PPUSH
55389: CALL_OW 488
55393: NOT
55394: IFFALSE 55398
// continue ;
55396: GO 55326
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55398: LD_ADDR_VAR 0 9
55402: PUSH
55403: LD_VAR 0 12
55407: PUSH
55408: LD_INT 1
55410: ARRAY
55411: PPUSH
55412: LD_VAR 0 12
55416: PUSH
55417: LD_INT 2
55419: ARRAY
55420: PPUSH
55421: LD_VAR 0 7
55425: PPUSH
55426: LD_VAR 0 8
55430: PPUSH
55431: CALL_OW 298
55435: ST_TO_ADDR
// if tmp < distance then
55436: LD_VAR 0 9
55440: PUSH
55441: LD_VAR 0 10
55445: LESS
55446: IFFALSE 55468
// begin result := i ;
55448: LD_ADDR_VAR 0 5
55452: PUSH
55453: LD_VAR 0 6
55457: ST_TO_ADDR
// distance := tmp ;
55458: LD_ADDR_VAR 0 10
55462: PUSH
55463: LD_VAR 0 9
55467: ST_TO_ADDR
// end ; end ;
55468: GO 55326
55470: POP
55471: POP
// end ;
55472: LD_VAR 0 5
55476: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55477: LD_INT 0
55479: PPUSH
55480: PPUSH
// if not driver or not IsInUnit ( driver ) then
55481: LD_VAR 0 1
55485: NOT
55486: IFTRUE 55500
55488: PUSH
55489: LD_VAR 0 1
55493: PPUSH
55494: CALL_OW 310
55498: NOT
55499: OR
55500: IFFALSE 55504
// exit ;
55502: GO 55594
// vehicle := IsInUnit ( driver ) ;
55504: LD_ADDR_VAR 0 3
55508: PUSH
55509: LD_VAR 0 1
55513: PPUSH
55514: CALL_OW 310
55518: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55519: LD_VAR 0 1
55523: PPUSH
55524: LD_STRING \
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: PUSH
55554: LD_STRING E
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: LD_VAR 0 3
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PPUSH
55590: CALL_OW 446
// end ;
55594: LD_VAR 0 2
55598: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55599: LD_INT 0
55601: PPUSH
55602: PPUSH
// if not driver or not IsInUnit ( driver ) then
55603: LD_VAR 0 1
55607: NOT
55608: IFTRUE 55622
55610: PUSH
55611: LD_VAR 0 1
55615: PPUSH
55616: CALL_OW 310
55620: NOT
55621: OR
55622: IFFALSE 55626
// exit ;
55624: GO 55716
// vehicle := IsInUnit ( driver ) ;
55626: LD_ADDR_VAR 0 3
55630: PUSH
55631: LD_VAR 0 1
55635: PPUSH
55636: CALL_OW 310
55640: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55641: LD_VAR 0 1
55645: PPUSH
55646: LD_STRING \
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: PUSH
55676: LD_STRING E
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: LD_VAR 0 3
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PPUSH
55712: CALL_OW 447
// end ;
55716: LD_VAR 0 2
55720: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55721: LD_INT 0
55723: PPUSH
55724: PPUSH
55725: PPUSH
// tmp := [ ] ;
55726: LD_ADDR_VAR 0 5
55730: PUSH
55731: EMPTY
55732: ST_TO_ADDR
// for i in units do
55733: LD_ADDR_VAR 0 4
55737: PUSH
55738: LD_VAR 0 1
55742: PUSH
55743: FOR_IN
55744: IFFALSE 55782
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55746: LD_ADDR_VAR 0 5
55750: PUSH
55751: LD_VAR 0 5
55755: PPUSH
55756: LD_VAR 0 5
55760: PUSH
55761: LD_INT 1
55763: PLUS
55764: PPUSH
55765: LD_VAR 0 4
55769: PPUSH
55770: CALL_OW 256
55774: PPUSH
55775: CALL_OW 2
55779: ST_TO_ADDR
55780: GO 55743
55782: POP
55783: POP
// if not tmp then
55784: LD_VAR 0 5
55788: NOT
55789: IFFALSE 55793
// exit ;
55791: GO 55841
// if asc then
55793: LD_VAR 0 2
55797: IFFALSE 55821
// result := SortListByListAsc ( units , tmp ) else
55799: LD_ADDR_VAR 0 3
55803: PUSH
55804: LD_VAR 0 1
55808: PPUSH
55809: LD_VAR 0 5
55813: PPUSH
55814: CALL_OW 76
55818: ST_TO_ADDR
55819: GO 55841
// result := SortListByListDesc ( units , tmp ) ;
55821: LD_ADDR_VAR 0 3
55825: PUSH
55826: LD_VAR 0 1
55830: PPUSH
55831: LD_VAR 0 5
55835: PPUSH
55836: CALL_OW 77
55840: ST_TO_ADDR
// end ;
55841: LD_VAR 0 3
55845: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55846: LD_INT 0
55848: PPUSH
55849: PPUSH
// task := GetTaskList ( mech ) ;
55850: LD_ADDR_VAR 0 4
55854: PUSH
55855: LD_VAR 0 1
55859: PPUSH
55860: CALL_OW 437
55864: ST_TO_ADDR
// if not task then
55865: LD_VAR 0 4
55869: NOT
55870: IFFALSE 55874
// exit ;
55872: GO 55918
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55874: LD_ADDR_VAR 0 3
55878: PUSH
55879: LD_VAR 0 4
55883: PUSH
55884: LD_INT 1
55886: ARRAY
55887: PUSH
55888: LD_INT 1
55890: ARRAY
55891: PUSH
55892: LD_STRING r
55894: EQUAL
55895: IFFALSE 55917
55897: PUSH
55898: LD_VAR 0 4
55902: PUSH
55903: LD_INT 1
55905: ARRAY
55906: PUSH
55907: LD_INT 4
55909: ARRAY
55910: PUSH
55911: LD_VAR 0 2
55915: EQUAL
55916: AND
55917: ST_TO_ADDR
// end ;
55918: LD_VAR 0 3
55922: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55923: LD_INT 0
55925: PPUSH
// SetDir ( unit , d ) ;
55926: LD_VAR 0 1
55930: PPUSH
55931: LD_VAR 0 4
55935: PPUSH
55936: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
55940: LD_ADDR_VAR 0 6
55944: PUSH
55945: LD_VAR 0 1
55949: PPUSH
55950: LD_VAR 0 2
55954: PPUSH
55955: LD_VAR 0 3
55959: PPUSH
55960: LD_VAR 0 5
55964: PPUSH
55965: CALL_OW 48
55969: ST_TO_ADDR
// end ;
55970: LD_VAR 0 6
55974: RET
// export function ToNaturalNumber ( number ) ; begin
55975: LD_INT 0
55977: PPUSH
// result := number div 1 ;
55978: LD_ADDR_VAR 0 2
55982: PUSH
55983: LD_VAR 0 1
55987: PUSH
55988: LD_INT 1
55990: DIV
55991: ST_TO_ADDR
// if number < 0 then
55992: LD_VAR 0 1
55996: PUSH
55997: LD_INT 0
55999: LESS
56000: IFFALSE 56010
// result := 0 ;
56002: LD_ADDR_VAR 0 2
56006: PUSH
56007: LD_INT 0
56009: ST_TO_ADDR
// end ;
56010: LD_VAR 0 2
56014: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
56015: LD_INT 0
56017: PPUSH
56018: PPUSH
56019: PPUSH
// if not buildings then
56020: LD_VAR 0 1
56024: NOT
56025: IFFALSE 56029
// exit ;
56027: GO 56144
// tmp := [ ] ;
56029: LD_ADDR_VAR 0 5
56033: PUSH
56034: EMPTY
56035: ST_TO_ADDR
// for b in buildings do
56036: LD_ADDR_VAR 0 4
56040: PUSH
56041: LD_VAR 0 1
56045: PUSH
56046: FOR_IN
56047: IFFALSE 56085
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56049: LD_ADDR_VAR 0 5
56053: PUSH
56054: LD_VAR 0 5
56058: PPUSH
56059: LD_VAR 0 5
56063: PUSH
56064: LD_INT 1
56066: PLUS
56067: PPUSH
56068: LD_VAR 0 4
56072: PPUSH
56073: CALL_OW 266
56077: PPUSH
56078: CALL_OW 1
56082: ST_TO_ADDR
56083: GO 56046
56085: POP
56086: POP
// if not tmp then
56087: LD_VAR 0 5
56091: NOT
56092: IFFALSE 56096
// exit ;
56094: GO 56144
// if asc then
56096: LD_VAR 0 2
56100: IFFALSE 56124
// result := SortListByListAsc ( buildings , tmp ) else
56102: LD_ADDR_VAR 0 3
56106: PUSH
56107: LD_VAR 0 1
56111: PPUSH
56112: LD_VAR 0 5
56116: PPUSH
56117: CALL_OW 76
56121: ST_TO_ADDR
56122: GO 56144
// result := SortListByListDesc ( buildings , tmp ) ;
56124: LD_ADDR_VAR 0 3
56128: PUSH
56129: LD_VAR 0 1
56133: PPUSH
56134: LD_VAR 0 5
56138: PPUSH
56139: CALL_OW 77
56143: ST_TO_ADDR
// end ;
56144: LD_VAR 0 3
56148: RET
// export function SortByClass ( units , class ) ; var un ; begin
56149: LD_INT 0
56151: PPUSH
56152: PPUSH
// if not units or not class then
56153: LD_VAR 0 1
56157: NOT
56158: IFTRUE 56167
56160: PUSH
56161: LD_VAR 0 2
56165: NOT
56166: OR
56167: IFFALSE 56171
// exit ;
56169: GO 56266
// result := [ ] ;
56171: LD_ADDR_VAR 0 3
56175: PUSH
56176: EMPTY
56177: ST_TO_ADDR
// for un in units do
56178: LD_ADDR_VAR 0 4
56182: PUSH
56183: LD_VAR 0 1
56187: PUSH
56188: FOR_IN
56189: IFFALSE 56264
// if GetClass ( un ) = class then
56191: LD_VAR 0 4
56195: PPUSH
56196: CALL_OW 257
56200: PUSH
56201: LD_VAR 0 2
56205: EQUAL
56206: IFFALSE 56233
// result := Insert ( result , 1 , un ) else
56208: LD_ADDR_VAR 0 3
56212: PUSH
56213: LD_VAR 0 3
56217: PPUSH
56218: LD_INT 1
56220: PPUSH
56221: LD_VAR 0 4
56225: PPUSH
56226: CALL_OW 2
56230: ST_TO_ADDR
56231: GO 56262
// result := Replace ( result , result + 1 , un ) ;
56233: LD_ADDR_VAR 0 3
56237: PUSH
56238: LD_VAR 0 3
56242: PPUSH
56243: LD_VAR 0 3
56247: PUSH
56248: LD_INT 1
56250: PLUS
56251: PPUSH
56252: LD_VAR 0 4
56256: PPUSH
56257: CALL_OW 1
56261: ST_TO_ADDR
56262: GO 56188
56264: POP
56265: POP
// end ;
56266: LD_VAR 0 3
56270: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56271: LD_INT 0
56273: PPUSH
56274: PPUSH
56275: PPUSH
56276: PPUSH
56277: PPUSH
56278: PPUSH
56279: PPUSH
// result := [ ] ;
56280: LD_ADDR_VAR 0 4
56284: PUSH
56285: EMPTY
56286: ST_TO_ADDR
// if x - r < 0 then
56287: LD_VAR 0 1
56291: PUSH
56292: LD_VAR 0 3
56296: MINUS
56297: PUSH
56298: LD_INT 0
56300: LESS
56301: IFFALSE 56313
// min_x := 0 else
56303: LD_ADDR_VAR 0 8
56307: PUSH
56308: LD_INT 0
56310: ST_TO_ADDR
56311: GO 56329
// min_x := x - r ;
56313: LD_ADDR_VAR 0 8
56317: PUSH
56318: LD_VAR 0 1
56322: PUSH
56323: LD_VAR 0 3
56327: MINUS
56328: ST_TO_ADDR
// if y - r < 0 then
56329: LD_VAR 0 2
56333: PUSH
56334: LD_VAR 0 3
56338: MINUS
56339: PUSH
56340: LD_INT 0
56342: LESS
56343: IFFALSE 56355
// min_y := 0 else
56345: LD_ADDR_VAR 0 7
56349: PUSH
56350: LD_INT 0
56352: ST_TO_ADDR
56353: GO 56371
// min_y := y - r ;
56355: LD_ADDR_VAR 0 7
56359: PUSH
56360: LD_VAR 0 2
56364: PUSH
56365: LD_VAR 0 3
56369: MINUS
56370: ST_TO_ADDR
// max_x := x + r ;
56371: LD_ADDR_VAR 0 9
56375: PUSH
56376: LD_VAR 0 1
56380: PUSH
56381: LD_VAR 0 3
56385: PLUS
56386: ST_TO_ADDR
// max_y := y + r ;
56387: LD_ADDR_VAR 0 10
56391: PUSH
56392: LD_VAR 0 2
56396: PUSH
56397: LD_VAR 0 3
56401: PLUS
56402: ST_TO_ADDR
// for _x = min_x to max_x do
56403: LD_ADDR_VAR 0 5
56407: PUSH
56408: DOUBLE
56409: LD_VAR 0 8
56413: DEC
56414: ST_TO_ADDR
56415: LD_VAR 0 9
56419: PUSH
56420: FOR_TO
56421: IFFALSE 56522
// for _y = min_y to max_y do
56423: LD_ADDR_VAR 0 6
56427: PUSH
56428: DOUBLE
56429: LD_VAR 0 7
56433: DEC
56434: ST_TO_ADDR
56435: LD_VAR 0 10
56439: PUSH
56440: FOR_TO
56441: IFFALSE 56518
// begin if not ValidHex ( _x , _y ) then
56443: LD_VAR 0 5
56447: PPUSH
56448: LD_VAR 0 6
56452: PPUSH
56453: CALL_OW 488
56457: NOT
56458: IFFALSE 56462
// continue ;
56460: GO 56440
// if GetResourceTypeXY ( _x , _y ) then
56462: LD_VAR 0 5
56466: PPUSH
56467: LD_VAR 0 6
56471: PPUSH
56472: CALL_OW 283
56476: IFFALSE 56516
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56478: LD_ADDR_VAR 0 4
56482: PUSH
56483: LD_VAR 0 4
56487: PPUSH
56488: LD_VAR 0 4
56492: PUSH
56493: LD_INT 1
56495: PLUS
56496: PPUSH
56497: LD_VAR 0 5
56501: PUSH
56502: LD_VAR 0 6
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PPUSH
56511: CALL_OW 1
56515: ST_TO_ADDR
// end ;
56516: GO 56440
56518: POP
56519: POP
56520: GO 56420
56522: POP
56523: POP
// end ;
56524: LD_VAR 0 4
56528: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56529: LD_INT 0
56531: PPUSH
56532: PPUSH
56533: PPUSH
56534: PPUSH
56535: PPUSH
56536: PPUSH
56537: PPUSH
56538: PPUSH
// if not units then
56539: LD_VAR 0 1
56543: NOT
56544: IFFALSE 56548
// exit ;
56546: GO 57080
// result := UnitFilter ( units , [ f_ok ] ) ;
56548: LD_ADDR_VAR 0 3
56552: PUSH
56553: LD_VAR 0 1
56557: PPUSH
56558: LD_INT 50
56560: PUSH
56561: EMPTY
56562: LIST
56563: PPUSH
56564: CALL_OW 72
56568: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56569: LD_ADDR_VAR 0 8
56573: PUSH
56574: LD_VAR 0 1
56578: PUSH
56579: LD_INT 1
56581: ARRAY
56582: PPUSH
56583: CALL_OW 255
56587: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56588: LD_ADDR_VAR 0 10
56592: PUSH
56593: LD_INT 29
56595: PUSH
56596: LD_INT 91
56598: PUSH
56599: LD_INT 49
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: LIST
56606: ST_TO_ADDR
// if not result then
56607: LD_VAR 0 3
56611: NOT
56612: IFFALSE 56616
// exit ;
56614: GO 57080
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56616: LD_ADDR_VAR 0 5
56620: PUSH
56621: LD_INT 81
56623: PUSH
56624: LD_VAR 0 8
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PPUSH
56633: CALL_OW 69
56637: ST_TO_ADDR
// for i in result do
56638: LD_ADDR_VAR 0 4
56642: PUSH
56643: LD_VAR 0 3
56647: PUSH
56648: FOR_IN
56649: IFFALSE 57078
// begin tag := GetTag ( i ) + 1 ;
56651: LD_ADDR_VAR 0 9
56655: PUSH
56656: LD_VAR 0 4
56660: PPUSH
56661: CALL_OW 110
56665: PUSH
56666: LD_INT 1
56668: PLUS
56669: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56670: LD_ADDR_VAR 0 7
56674: PUSH
56675: LD_VAR 0 4
56679: PPUSH
56680: CALL_OW 250
56684: PPUSH
56685: LD_VAR 0 4
56689: PPUSH
56690: CALL_OW 251
56694: PPUSH
56695: LD_INT 4
56697: PPUSH
56698: CALL 56271 0 3
56702: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56703: LD_VAR 0 4
56707: PPUSH
56708: CALL_OW 247
56712: PUSH
56713: LD_INT 2
56715: EQUAL
56716: IFFALSE 56728
56718: PUSH
56719: LD_VAR 0 7
56723: PUSH
56724: LD_INT 2
56726: GREATER
56727: AND
56728: IFFALSE 56748
56730: PUSH
56731: LD_VAR 0 4
56735: PPUSH
56736: CALL_OW 264
56740: PUSH
56741: LD_VAR 0 10
56745: IN
56746: NOT
56747: AND
56748: IFFALSE 56787
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56750: LD_VAR 0 4
56754: PPUSH
56755: LD_VAR 0 7
56759: PUSH
56760: LD_INT 1
56762: ARRAY
56763: PUSH
56764: LD_INT 1
56766: ARRAY
56767: PPUSH
56768: LD_VAR 0 7
56772: PUSH
56773: LD_INT 1
56775: ARRAY
56776: PUSH
56777: LD_INT 2
56779: ARRAY
56780: PPUSH
56781: CALL_OW 116
56785: GO 57076
// if path > tag then
56787: LD_VAR 0 2
56791: PUSH
56792: LD_VAR 0 9
56796: GREATER
56797: IFFALSE 57005
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56799: LD_ADDR_VAR 0 6
56803: PUSH
56804: LD_VAR 0 5
56808: PPUSH
56809: LD_INT 91
56811: PUSH
56812: LD_VAR 0 4
56816: PUSH
56817: LD_INT 8
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: LIST
56824: PPUSH
56825: CALL_OW 72
56829: ST_TO_ADDR
// if nearEnemy then
56830: LD_VAR 0 6
56834: IFFALSE 56903
// begin if GetWeapon ( i ) = ru_time_lapser then
56836: LD_VAR 0 4
56840: PPUSH
56841: CALL_OW 264
56845: PUSH
56846: LD_INT 49
56848: EQUAL
56849: IFFALSE 56877
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56851: LD_VAR 0 4
56855: PPUSH
56856: LD_VAR 0 6
56860: PPUSH
56861: LD_VAR 0 4
56865: PPUSH
56866: CALL_OW 74
56870: PPUSH
56871: CALL_OW 112
56875: GO 56901
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56877: LD_VAR 0 4
56881: PPUSH
56882: LD_VAR 0 6
56886: PPUSH
56887: LD_VAR 0 4
56891: PPUSH
56892: CALL_OW 74
56896: PPUSH
56897: CALL 58161 0 2
// end else
56901: GO 57003
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56903: LD_VAR 0 4
56907: PPUSH
56908: LD_VAR 0 2
56912: PUSH
56913: LD_VAR 0 9
56917: ARRAY
56918: PUSH
56919: LD_INT 1
56921: ARRAY
56922: PPUSH
56923: LD_VAR 0 2
56927: PUSH
56928: LD_VAR 0 9
56932: ARRAY
56933: PUSH
56934: LD_INT 2
56936: ARRAY
56937: PPUSH
56938: CALL_OW 297
56942: PUSH
56943: LD_INT 6
56945: GREATER
56946: IFFALSE 56989
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56948: LD_VAR 0 4
56952: PPUSH
56953: LD_VAR 0 2
56957: PUSH
56958: LD_VAR 0 9
56962: ARRAY
56963: PUSH
56964: LD_INT 1
56966: ARRAY
56967: PPUSH
56968: LD_VAR 0 2
56972: PUSH
56973: LD_VAR 0 9
56977: ARRAY
56978: PUSH
56979: LD_INT 2
56981: ARRAY
56982: PPUSH
56983: CALL_OW 114
56987: GO 57003
// SetTag ( i , tag ) ;
56989: LD_VAR 0 4
56993: PPUSH
56994: LD_VAR 0 9
56998: PPUSH
56999: CALL_OW 109
// end else
57003: GO 57076
// if enemy then
57005: LD_VAR 0 5
57009: IFFALSE 57076
// begin if GetWeapon ( i ) = ru_time_lapser then
57011: LD_VAR 0 4
57015: PPUSH
57016: CALL_OW 264
57020: PUSH
57021: LD_INT 49
57023: EQUAL
57024: IFFALSE 57052
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57026: LD_VAR 0 4
57030: PPUSH
57031: LD_VAR 0 5
57035: PPUSH
57036: LD_VAR 0 4
57040: PPUSH
57041: CALL_OW 74
57045: PPUSH
57046: CALL_OW 112
57050: GO 57076
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57052: LD_VAR 0 4
57056: PPUSH
57057: LD_VAR 0 5
57061: PPUSH
57062: LD_VAR 0 4
57066: PPUSH
57067: CALL_OW 74
57071: PPUSH
57072: CALL 58161 0 2
// end ; end ;
57076: GO 56648
57078: POP
57079: POP
// end ;
57080: LD_VAR 0 3
57084: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57085: LD_INT 0
57087: PPUSH
57088: PPUSH
57089: PPUSH
// if not unit or IsInUnit ( unit ) then
57090: LD_VAR 0 1
57094: NOT
57095: IFTRUE 57108
57097: PUSH
57098: LD_VAR 0 1
57102: PPUSH
57103: CALL_OW 310
57107: OR
57108: IFFALSE 57112
// exit ;
57110: GO 57203
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57112: LD_ADDR_VAR 0 4
57116: PUSH
57117: LD_VAR 0 1
57121: PPUSH
57122: CALL_OW 250
57126: PPUSH
57127: LD_VAR 0 2
57131: PPUSH
57132: LD_INT 1
57134: PPUSH
57135: CALL_OW 272
57139: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57140: LD_ADDR_VAR 0 5
57144: PUSH
57145: LD_VAR 0 1
57149: PPUSH
57150: CALL_OW 251
57154: PPUSH
57155: LD_VAR 0 2
57159: PPUSH
57160: LD_INT 1
57162: PPUSH
57163: CALL_OW 273
57167: ST_TO_ADDR
// if ValidHex ( x , y ) then
57168: LD_VAR 0 4
57172: PPUSH
57173: LD_VAR 0 5
57177: PPUSH
57178: CALL_OW 488
57182: IFFALSE 57203
// ComTurnXY ( unit , x , y ) ;
57184: LD_VAR 0 1
57188: PPUSH
57189: LD_VAR 0 4
57193: PPUSH
57194: LD_VAR 0 5
57198: PPUSH
57199: CALL_OW 118
// end ;
57203: LD_VAR 0 3
57207: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57208: LD_INT 0
57210: PPUSH
57211: PPUSH
// result := false ;
57212: LD_ADDR_VAR 0 3
57216: PUSH
57217: LD_INT 0
57219: ST_TO_ADDR
// if not units then
57220: LD_VAR 0 2
57224: NOT
57225: IFFALSE 57229
// exit ;
57227: GO 57274
// for i in units do
57229: LD_ADDR_VAR 0 4
57233: PUSH
57234: LD_VAR 0 2
57238: PUSH
57239: FOR_IN
57240: IFFALSE 57272
// if See ( side , i ) then
57242: LD_VAR 0 1
57246: PPUSH
57247: LD_VAR 0 4
57251: PPUSH
57252: CALL_OW 292
57256: IFFALSE 57270
// begin result := true ;
57258: LD_ADDR_VAR 0 3
57262: PUSH
57263: LD_INT 1
57265: ST_TO_ADDR
// exit ;
57266: POP
57267: POP
57268: GO 57274
// end ;
57270: GO 57239
57272: POP
57273: POP
// end ;
57274: LD_VAR 0 3
57278: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57279: LD_INT 0
57281: PPUSH
57282: PPUSH
57283: PPUSH
57284: PPUSH
// if not unit or not points then
57285: LD_VAR 0 1
57289: NOT
57290: IFTRUE 57299
57292: PUSH
57293: LD_VAR 0 2
57297: NOT
57298: OR
57299: IFFALSE 57303
// exit ;
57301: GO 57393
// dist := 99999 ;
57303: LD_ADDR_VAR 0 5
57307: PUSH
57308: LD_INT 99999
57310: ST_TO_ADDR
// for i in points do
57311: LD_ADDR_VAR 0 4
57315: PUSH
57316: LD_VAR 0 2
57320: PUSH
57321: FOR_IN
57322: IFFALSE 57391
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57324: LD_ADDR_VAR 0 6
57328: PUSH
57329: LD_VAR 0 1
57333: PPUSH
57334: LD_VAR 0 4
57338: PUSH
57339: LD_INT 1
57341: ARRAY
57342: PPUSH
57343: LD_VAR 0 4
57347: PUSH
57348: LD_INT 2
57350: ARRAY
57351: PPUSH
57352: CALL_OW 297
57356: ST_TO_ADDR
// if tmpDist < dist then
57357: LD_VAR 0 6
57361: PUSH
57362: LD_VAR 0 5
57366: LESS
57367: IFFALSE 57389
// begin result := i ;
57369: LD_ADDR_VAR 0 3
57373: PUSH
57374: LD_VAR 0 4
57378: ST_TO_ADDR
// dist := tmpDist ;
57379: LD_ADDR_VAR 0 5
57383: PUSH
57384: LD_VAR 0 6
57388: ST_TO_ADDR
// end ; end ;
57389: GO 57321
57391: POP
57392: POP
// end ;
57393: LD_VAR 0 3
57397: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57398: LD_INT 0
57400: PPUSH
// uc_side := side ;
57401: LD_ADDR_OWVAR 20
57405: PUSH
57406: LD_VAR 0 1
57410: ST_TO_ADDR
// uc_nation := 3 ;
57411: LD_ADDR_OWVAR 21
57415: PUSH
57416: LD_INT 3
57418: ST_TO_ADDR
// vc_chassis := 25 ;
57419: LD_ADDR_OWVAR 37
57423: PUSH
57424: LD_INT 25
57426: ST_TO_ADDR
// vc_engine := engine_siberite ;
57427: LD_ADDR_OWVAR 39
57431: PUSH
57432: LD_INT 3
57434: ST_TO_ADDR
// vc_control := control_computer ;
57435: LD_ADDR_OWVAR 38
57439: PUSH
57440: LD_INT 3
57442: ST_TO_ADDR
// vc_weapon := 59 ;
57443: LD_ADDR_OWVAR 40
57447: PUSH
57448: LD_INT 59
57450: ST_TO_ADDR
// result := CreateVehicle ;
57451: LD_ADDR_VAR 0 5
57455: PUSH
57456: CALL_OW 45
57460: ST_TO_ADDR
// SetDir ( result , d ) ;
57461: LD_VAR 0 5
57465: PPUSH
57466: LD_VAR 0 4
57470: PPUSH
57471: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57475: LD_VAR 0 5
57479: PPUSH
57480: LD_VAR 0 2
57484: PPUSH
57485: LD_VAR 0 3
57489: PPUSH
57490: LD_INT 0
57492: PPUSH
57493: CALL_OW 48
// end ;
57497: LD_VAR 0 5
57501: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57502: LD_INT 0
57504: PPUSH
57505: PPUSH
57506: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57507: LD_ADDR_VAR 0 2
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57530: LD_VAR 0 1
57534: NOT
57535: IFTRUE 57568
57537: PUSH
57538: LD_VAR 0 1
57542: PPUSH
57543: CALL_OW 264
57547: PUSH
57548: LD_INT 12
57550: PUSH
57551: LD_INT 51
57553: PUSH
57554: LD_INT 32
57556: PUSH
57557: LD_INT 89
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: IN
57566: NOT
57567: OR
57568: IFFALSE 57572
// exit ;
57570: GO 57670
// for i := 1 to 3 do
57572: LD_ADDR_VAR 0 3
57576: PUSH
57577: DOUBLE
57578: LD_INT 1
57580: DEC
57581: ST_TO_ADDR
57582: LD_INT 3
57584: PUSH
57585: FOR_TO
57586: IFFALSE 57668
// begin tmp := GetCargo ( cargo , i ) ;
57588: LD_ADDR_VAR 0 4
57592: PUSH
57593: LD_VAR 0 1
57597: PPUSH
57598: LD_VAR 0 3
57602: PPUSH
57603: CALL_OW 289
57607: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57608: LD_ADDR_VAR 0 2
57612: PUSH
57613: LD_VAR 0 2
57617: PPUSH
57618: LD_VAR 0 3
57622: PPUSH
57623: LD_VAR 0 4
57627: PPUSH
57628: CALL_OW 1
57632: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57633: LD_ADDR_VAR 0 2
57637: PUSH
57638: LD_VAR 0 2
57642: PPUSH
57643: LD_INT 4
57645: PPUSH
57646: LD_VAR 0 2
57650: PUSH
57651: LD_INT 4
57653: ARRAY
57654: PUSH
57655: LD_VAR 0 4
57659: PLUS
57660: PPUSH
57661: CALL_OW 1
57665: ST_TO_ADDR
// end ;
57666: GO 57585
57668: POP
57669: POP
// end ;
57670: LD_VAR 0 2
57674: RET
// export function Length ( array ) ; begin
57675: LD_INT 0
57677: PPUSH
// result := array + 0 ;
57678: LD_ADDR_VAR 0 2
57682: PUSH
57683: LD_VAR 0 1
57687: PUSH
57688: LD_INT 0
57690: PLUS
57691: ST_TO_ADDR
// end ;
57692: LD_VAR 0 2
57696: RET
// export function PrepareArray ( array ) ; begin
57697: LD_INT 0
57699: PPUSH
// result := array diff 0 ;
57700: LD_ADDR_VAR 0 2
57704: PUSH
57705: LD_VAR 0 1
57709: PUSH
57710: LD_INT 0
57712: DIFF
57713: ST_TO_ADDR
// if not result [ 1 ] then
57714: LD_VAR 0 2
57718: PUSH
57719: LD_INT 1
57721: ARRAY
57722: NOT
57723: IFFALSE 57743
// result := Delete ( result , 1 ) ;
57725: LD_ADDR_VAR 0 2
57729: PUSH
57730: LD_VAR 0 2
57734: PPUSH
57735: LD_INT 1
57737: PPUSH
57738: CALL_OW 3
57742: ST_TO_ADDR
// end ;
57743: LD_VAR 0 2
57747: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57748: LD_INT 0
57750: PPUSH
57751: PPUSH
57752: PPUSH
57753: PPUSH
// sibRocketRange := 25 ;
57754: LD_ADDR_VAR 0 6
57758: PUSH
57759: LD_INT 25
57761: ST_TO_ADDR
// result := false ;
57762: LD_ADDR_VAR 0 4
57766: PUSH
57767: LD_INT 0
57769: ST_TO_ADDR
// for i := 0 to 5 do
57770: LD_ADDR_VAR 0 5
57774: PUSH
57775: DOUBLE
57776: LD_INT 0
57778: DEC
57779: ST_TO_ADDR
57780: LD_INT 5
57782: PUSH
57783: FOR_TO
57784: IFFALSE 57851
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57786: LD_VAR 0 1
57790: PPUSH
57791: LD_VAR 0 5
57795: PPUSH
57796: LD_VAR 0 6
57800: PPUSH
57801: CALL_OW 272
57805: PPUSH
57806: LD_VAR 0 2
57810: PPUSH
57811: LD_VAR 0 5
57815: PPUSH
57816: LD_VAR 0 6
57820: PPUSH
57821: CALL_OW 273
57825: PPUSH
57826: LD_VAR 0 3
57830: PPUSH
57831: CALL_OW 309
57835: IFFALSE 57849
// begin result := true ;
57837: LD_ADDR_VAR 0 4
57841: PUSH
57842: LD_INT 1
57844: ST_TO_ADDR
// exit ;
57845: POP
57846: POP
57847: GO 57853
// end ;
57849: GO 57783
57851: POP
57852: POP
// end ;
57853: LD_VAR 0 4
57857: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57858: LD_INT 0
57860: PPUSH
57861: PPUSH
57862: PPUSH
// if btype = b_depot then
57863: LD_VAR 0 2
57867: PUSH
57868: LD_INT 0
57870: EQUAL
57871: IFFALSE 57883
// begin result := true ;
57873: LD_ADDR_VAR 0 3
57877: PUSH
57878: LD_INT 1
57880: ST_TO_ADDR
// exit ;
57881: GO 58003
// end ; pom := GetBase ( depot ) ;
57883: LD_ADDR_VAR 0 4
57887: PUSH
57888: LD_VAR 0 1
57892: PPUSH
57893: CALL_OW 274
57897: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57898: LD_ADDR_VAR 0 5
57902: PUSH
57903: LD_VAR 0 2
57907: PPUSH
57908: LD_VAR 0 1
57912: PPUSH
57913: CALL_OW 248
57917: PPUSH
57918: CALL_OW 450
57922: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
57923: LD_ADDR_VAR 0 3
57927: PUSH
57928: LD_VAR 0 4
57932: PPUSH
57933: LD_INT 1
57935: PPUSH
57936: CALL_OW 275
57940: PUSH
57941: LD_VAR 0 5
57945: PUSH
57946: LD_INT 1
57948: ARRAY
57949: GREATEREQUAL
57950: IFFALSE 57976
57952: PUSH
57953: LD_VAR 0 4
57957: PPUSH
57958: LD_INT 2
57960: PPUSH
57961: CALL_OW 275
57965: PUSH
57966: LD_VAR 0 5
57970: PUSH
57971: LD_INT 2
57973: ARRAY
57974: GREATEREQUAL
57975: AND
57976: IFFALSE 58002
57978: PUSH
57979: LD_VAR 0 4
57983: PPUSH
57984: LD_INT 3
57986: PPUSH
57987: CALL_OW 275
57991: PUSH
57992: LD_VAR 0 5
57996: PUSH
57997: LD_INT 3
57999: ARRAY
58000: GREATEREQUAL
58001: AND
58002: ST_TO_ADDR
// end ;
58003: LD_VAR 0 3
58007: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58008: LD_INT 0
58010: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58011: LD_VAR 0 1
58015: PPUSH
58016: LD_VAR 0 2
58020: PPUSH
58021: LD_INT 0
58023: PPUSH
58024: LD_INT 0
58026: PPUSH
58027: LD_INT 1
58029: PPUSH
58030: LD_INT 0
58032: PPUSH
58033: CALL_OW 587
// end ;
58037: LD_VAR 0 3
58041: RET
// export function CenterOnNow ( unit ) ; begin
58042: LD_INT 0
58044: PPUSH
// result := IsInUnit ( unit ) ;
58045: LD_ADDR_VAR 0 2
58049: PUSH
58050: LD_VAR 0 1
58054: PPUSH
58055: CALL_OW 310
58059: ST_TO_ADDR
// if not result then
58060: LD_VAR 0 2
58064: NOT
58065: IFFALSE 58077
// result := unit ;
58067: LD_ADDR_VAR 0 2
58071: PUSH
58072: LD_VAR 0 1
58076: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58077: LD_VAR 0 1
58081: PPUSH
58082: CALL_OW 87
// end ;
58086: LD_VAR 0 2
58090: RET
// export function ComMoveHex ( unit , hex ) ; begin
58091: LD_INT 0
58093: PPUSH
// if not hex then
58094: LD_VAR 0 2
58098: NOT
58099: IFFALSE 58103
// exit ;
58101: GO 58156
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58103: LD_VAR 0 2
58107: PUSH
58108: LD_INT 1
58110: ARRAY
58111: PPUSH
58112: LD_VAR 0 2
58116: PUSH
58117: LD_INT 2
58119: ARRAY
58120: PPUSH
58121: CALL_OW 428
58125: IFFALSE 58129
// exit ;
58127: GO 58156
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58129: LD_VAR 0 1
58133: PPUSH
58134: LD_VAR 0 2
58138: PUSH
58139: LD_INT 1
58141: ARRAY
58142: PPUSH
58143: LD_VAR 0 2
58147: PUSH
58148: LD_INT 2
58150: ARRAY
58151: PPUSH
58152: CALL_OW 111
// end ;
58156: LD_VAR 0 3
58160: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58161: LD_INT 0
58163: PPUSH
58164: PPUSH
58165: PPUSH
// if not unit or not enemy then
58166: LD_VAR 0 1
58170: NOT
58171: IFTRUE 58180
58173: PUSH
58174: LD_VAR 0 2
58178: NOT
58179: OR
58180: IFFALSE 58184
// exit ;
58182: GO 58310
// x := GetX ( enemy ) ;
58184: LD_ADDR_VAR 0 4
58188: PUSH
58189: LD_VAR 0 2
58193: PPUSH
58194: CALL_OW 250
58198: ST_TO_ADDR
// y := GetY ( enemy ) ;
58199: LD_ADDR_VAR 0 5
58203: PUSH
58204: LD_VAR 0 2
58208: PPUSH
58209: CALL_OW 251
58213: ST_TO_ADDR
// if ValidHex ( x , y ) then
58214: LD_VAR 0 4
58218: PPUSH
58219: LD_VAR 0 5
58223: PPUSH
58224: CALL_OW 488
58228: IFFALSE 58310
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58230: LD_VAR 0 2
58234: PPUSH
58235: CALL_OW 247
58239: PUSH
58240: LD_INT 3
58242: PUSH
58243: LD_INT 2
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: IN
58250: IFTRUE 58273
58252: PUSH
58253: LD_VAR 0 1
58257: PPUSH
58258: CALL_OW 255
58262: PPUSH
58263: LD_VAR 0 2
58267: PPUSH
58268: CALL_OW 292
58272: OR
58273: IFFALSE 58291
// ComAttackUnit ( unit , enemy ) else
58275: LD_VAR 0 1
58279: PPUSH
58280: LD_VAR 0 2
58284: PPUSH
58285: CALL_OW 115
58289: GO 58310
// ComAgressiveMove ( unit , x , y ) ;
58291: LD_VAR 0 1
58295: PPUSH
58296: LD_VAR 0 4
58300: PPUSH
58301: LD_VAR 0 5
58305: PPUSH
58306: CALL_OW 114
// end ;
58310: LD_VAR 0 3
58314: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58315: LD_INT 0
58317: PPUSH
58318: PPUSH
58319: PPUSH
// list := AreaToList ( area , 0 ) ;
58320: LD_ADDR_VAR 0 5
58324: PUSH
58325: LD_VAR 0 1
58329: PPUSH
58330: LD_INT 0
58332: PPUSH
58333: CALL_OW 517
58337: ST_TO_ADDR
// if not list then
58338: LD_VAR 0 5
58342: NOT
58343: IFFALSE 58347
// exit ;
58345: GO 58477
// if all then
58347: LD_VAR 0 2
58351: IFFALSE 58439
// begin for i := 1 to list [ 1 ] do
58353: LD_ADDR_VAR 0 4
58357: PUSH
58358: DOUBLE
58359: LD_INT 1
58361: DEC
58362: ST_TO_ADDR
58363: LD_VAR 0 5
58367: PUSH
58368: LD_INT 1
58370: ARRAY
58371: PUSH
58372: FOR_TO
58373: IFFALSE 58435
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58375: LD_ADDR_VAR 0 3
58379: PUSH
58380: LD_VAR 0 3
58384: PPUSH
58385: LD_VAR 0 3
58389: PUSH
58390: LD_INT 1
58392: PLUS
58393: PPUSH
58394: LD_VAR 0 5
58398: PUSH
58399: LD_INT 1
58401: ARRAY
58402: PUSH
58403: LD_VAR 0 4
58407: ARRAY
58408: PUSH
58409: LD_VAR 0 5
58413: PUSH
58414: LD_INT 2
58416: ARRAY
58417: PUSH
58418: LD_VAR 0 4
58422: ARRAY
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PPUSH
58428: CALL_OW 1
58432: ST_TO_ADDR
58433: GO 58372
58435: POP
58436: POP
// exit ;
58437: GO 58477
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58439: LD_ADDR_VAR 0 3
58443: PUSH
58444: LD_VAR 0 5
58448: PUSH
58449: LD_INT 1
58451: ARRAY
58452: PUSH
58453: LD_INT 1
58455: ARRAY
58456: PUSH
58457: LD_VAR 0 5
58461: PUSH
58462: LD_INT 2
58464: ARRAY
58465: PUSH
58466: LD_INT 1
58468: ARRAY
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: EMPTY
58475: LIST
58476: ST_TO_ADDR
// end ;
58477: LD_VAR 0 3
58481: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58482: LD_INT 0
58484: PPUSH
58485: PPUSH
// list := AreaToList ( area , 0 ) ;
58486: LD_ADDR_VAR 0 4
58490: PUSH
58491: LD_VAR 0 1
58495: PPUSH
58496: LD_INT 0
58498: PPUSH
58499: CALL_OW 517
58503: ST_TO_ADDR
// if not list then
58504: LD_VAR 0 4
58508: NOT
58509: IFFALSE 58513
// exit ;
58511: GO 58554
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58513: LD_ADDR_VAR 0 3
58517: PUSH
58518: LD_VAR 0 4
58522: PUSH
58523: LD_INT 1
58525: ARRAY
58526: PUSH
58527: LD_INT 1
58529: ARRAY
58530: PUSH
58531: LD_VAR 0 4
58535: PUSH
58536: LD_INT 2
58538: ARRAY
58539: PUSH
58540: LD_INT 1
58542: ARRAY
58543: PUSH
58544: LD_VAR 0 2
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: LIST
58553: ST_TO_ADDR
// end ;
58554: LD_VAR 0 3
58558: RET
// export function First ( array ) ; begin
58559: LD_INT 0
58561: PPUSH
// if not array then
58562: LD_VAR 0 1
58566: NOT
58567: IFFALSE 58571
// exit ;
58569: GO 58585
// result := array [ 1 ] ;
58571: LD_ADDR_VAR 0 2
58575: PUSH
58576: LD_VAR 0 1
58580: PUSH
58581: LD_INT 1
58583: ARRAY
58584: ST_TO_ADDR
// end ;
58585: LD_VAR 0 2
58589: RET
// export function Last ( array ) ; begin
58590: LD_INT 0
58592: PPUSH
// if not array then
58593: LD_VAR 0 1
58597: NOT
58598: IFFALSE 58602
// exit ;
58600: GO 58618
// result := array [ array ] ;
58602: LD_ADDR_VAR 0 2
58606: PUSH
58607: LD_VAR 0 1
58611: PUSH
58612: LD_VAR 0 1
58616: ARRAY
58617: ST_TO_ADDR
// end ;
58618: LD_VAR 0 2
58622: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58623: LD_INT 0
58625: PPUSH
58626: PPUSH
// result := [ ] ;
58627: LD_ADDR_VAR 0 5
58631: PUSH
58632: EMPTY
58633: ST_TO_ADDR
// if not array then
58634: LD_VAR 0 1
58638: NOT
58639: IFFALSE 58643
// exit ;
58641: GO 58755
// for i := 1 to array do
58643: LD_ADDR_VAR 0 6
58647: PUSH
58648: DOUBLE
58649: LD_INT 1
58651: DEC
58652: ST_TO_ADDR
58653: LD_VAR 0 1
58657: PUSH
58658: FOR_TO
58659: IFFALSE 58753
// if array [ i ] [ index ] = value then
58661: LD_VAR 0 1
58665: PUSH
58666: LD_VAR 0 6
58670: ARRAY
58671: PUSH
58672: LD_VAR 0 2
58676: ARRAY
58677: PUSH
58678: LD_VAR 0 3
58682: EQUAL
58683: IFFALSE 58751
// begin if indexColumn then
58685: LD_VAR 0 4
58689: IFFALSE 58725
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58691: LD_ADDR_VAR 0 5
58695: PUSH
58696: LD_VAR 0 5
58700: PPUSH
58701: LD_VAR 0 1
58705: PUSH
58706: LD_VAR 0 6
58710: ARRAY
58711: PUSH
58712: LD_VAR 0 4
58716: ARRAY
58717: PPUSH
58718: CALL 53763 0 2
58722: ST_TO_ADDR
58723: GO 58751
// result := Join ( result , array [ i ] ) ;
58725: LD_ADDR_VAR 0 5
58729: PUSH
58730: LD_VAR 0 5
58734: PPUSH
58735: LD_VAR 0 1
58739: PUSH
58740: LD_VAR 0 6
58744: ARRAY
58745: PPUSH
58746: CALL 53763 0 2
58750: ST_TO_ADDR
// end ;
58751: GO 58658
58753: POP
58754: POP
// end ;
58755: LD_VAR 0 5
58759: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58760: LD_INT 0
58762: PPUSH
// if not vehicles or not parkingPoint then
58763: LD_VAR 0 1
58767: NOT
58768: IFTRUE 58777
58770: PUSH
58771: LD_VAR 0 2
58775: NOT
58776: OR
58777: IFFALSE 58781
// exit ;
58779: GO 58879
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58781: LD_ADDR_VAR 0 1
58785: PUSH
58786: LD_VAR 0 1
58790: PPUSH
58791: LD_INT 50
58793: PUSH
58794: EMPTY
58795: LIST
58796: PUSH
58797: LD_INT 3
58799: PUSH
58800: LD_INT 92
58802: PUSH
58803: LD_VAR 0 2
58807: PUSH
58808: LD_INT 1
58810: ARRAY
58811: PUSH
58812: LD_VAR 0 2
58816: PUSH
58817: LD_INT 2
58819: ARRAY
58820: PUSH
58821: LD_INT 8
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PPUSH
58838: CALL_OW 72
58842: ST_TO_ADDR
// if not vehicles then
58843: LD_VAR 0 1
58847: NOT
58848: IFFALSE 58852
// exit ;
58850: GO 58879
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58852: LD_VAR 0 1
58856: PPUSH
58857: LD_VAR 0 2
58861: PUSH
58862: LD_INT 1
58864: ARRAY
58865: PPUSH
58866: LD_VAR 0 2
58870: PUSH
58871: LD_INT 2
58873: ARRAY
58874: PPUSH
58875: CALL_OW 111
// end ;
58879: LD_VAR 0 3
58883: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58884: LD_INT 0
58886: PPUSH
58887: PPUSH
58888: PPUSH
// if not side or not area then
58889: LD_VAR 0 1
58893: NOT
58894: IFTRUE 58903
58896: PUSH
58897: LD_VAR 0 2
58901: NOT
58902: OR
58903: IFFALSE 58907
// exit ;
58905: GO 59026
// tmp := AreaToList ( area , 0 ) ;
58907: LD_ADDR_VAR 0 5
58911: PUSH
58912: LD_VAR 0 2
58916: PPUSH
58917: LD_INT 0
58919: PPUSH
58920: CALL_OW 517
58924: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58925: LD_ADDR_VAR 0 4
58929: PUSH
58930: DOUBLE
58931: LD_INT 1
58933: DEC
58934: ST_TO_ADDR
58935: LD_VAR 0 5
58939: PUSH
58940: LD_INT 1
58942: ARRAY
58943: PUSH
58944: FOR_TO
58945: IFFALSE 59024
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
58947: LD_VAR 0 5
58951: PUSH
58952: LD_INT 1
58954: ARRAY
58955: PUSH
58956: LD_VAR 0 4
58960: ARRAY
58961: PPUSH
58962: LD_VAR 0 5
58966: PUSH
58967: LD_INT 2
58969: ARRAY
58970: PUSH
58971: LD_VAR 0 4
58975: ARRAY
58976: PPUSH
58977: CALL_OW 351
58981: IFFALSE 59022
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
58983: LD_VAR 0 5
58987: PUSH
58988: LD_INT 1
58990: ARRAY
58991: PUSH
58992: LD_VAR 0 4
58996: ARRAY
58997: PPUSH
58998: LD_VAR 0 5
59002: PUSH
59003: LD_INT 2
59005: ARRAY
59006: PUSH
59007: LD_VAR 0 4
59011: ARRAY
59012: PPUSH
59013: LD_VAR 0 1
59017: PPUSH
59018: CALL_OW 244
// end ;
59022: GO 58944
59024: POP
59025: POP
// end ;
59026: LD_VAR 0 3
59030: RET
// export function UniqueArray ( array ) ; var i ; begin
59031: LD_INT 0
59033: PPUSH
59034: PPUSH
// result := [ ] ;
59035: LD_ADDR_VAR 0 2
59039: PUSH
59040: EMPTY
59041: ST_TO_ADDR
// if not array then
59042: LD_VAR 0 1
59046: NOT
59047: IFFALSE 59051
// exit ;
59049: GO 59112
// for i := 1 to array do
59051: LD_ADDR_VAR 0 3
59055: PUSH
59056: DOUBLE
59057: LD_INT 1
59059: DEC
59060: ST_TO_ADDR
59061: LD_VAR 0 1
59065: PUSH
59066: FOR_TO
59067: IFFALSE 59110
// if not array [ i ] in result then
59069: LD_VAR 0 1
59073: PUSH
59074: LD_VAR 0 3
59078: ARRAY
59079: PUSH
59080: LD_VAR 0 2
59084: IN
59085: NOT
59086: IFFALSE 59108
// result := Join ( result , i ) ;
59088: LD_ADDR_VAR 0 2
59092: PUSH
59093: LD_VAR 0 2
59097: PPUSH
59098: LD_VAR 0 3
59102: PPUSH
59103: CALL 53763 0 2
59107: ST_TO_ADDR
59108: GO 59066
59110: POP
59111: POP
// end ; end_of_file
59112: LD_VAR 0 2
59116: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
59117: LD_VAR 0 1
59121: PUSH
59122: LD_INT 200
59124: DOUBLE
59125: GREATEREQUAL
59126: IFFALSE 59134
59128: LD_INT 299
59130: DOUBLE
59131: LESSEQUAL
59132: IFTRUE 59136
59134: GO 59168
59136: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
59137: LD_VAR 0 1
59141: PPUSH
59142: LD_VAR 0 2
59146: PPUSH
59147: LD_VAR 0 3
59151: PPUSH
59152: LD_VAR 0 4
59156: PPUSH
59157: LD_VAR 0 5
59161: PPUSH
59162: CALL 60030 0 5
59166: GO 59245
59168: LD_INT 300
59170: DOUBLE
59171: GREATEREQUAL
59172: IFFALSE 59180
59174: LD_INT 399
59176: DOUBLE
59177: LESSEQUAL
59178: IFTRUE 59182
59180: GO 59244
59182: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
59183: LD_VAR 0 1
59187: PPUSH
59188: LD_VAR 0 2
59192: PPUSH
59193: LD_VAR 0 3
59197: PPUSH
59198: LD_VAR 0 4
59202: PPUSH
59203: LD_VAR 0 5
59207: PPUSH
59208: LD_VAR 0 6
59212: PPUSH
59213: LD_VAR 0 7
59217: PPUSH
59218: LD_VAR 0 8
59222: PPUSH
59223: LD_VAR 0 9
59227: PPUSH
59228: LD_VAR 0 10
59232: PPUSH
59233: LD_VAR 0 11
59237: PPUSH
59238: CALL 66351 0 11
59242: GO 59245
59244: POP
// end ;
59245: PPOPN 11
59247: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
59248: LD_VAR 0 1
59252: PPUSH
59253: LD_VAR 0 2
59257: PPUSH
59258: LD_VAR 0 3
59262: PPUSH
59263: LD_VAR 0 4
59267: PPUSH
59268: LD_VAR 0 5
59272: PPUSH
59273: CALL 59330 0 5
// end ; end_of_file
59277: PPOPN 5
59279: END
// export function SOS_UnitDestroyed ( un ) ; begin
59280: LD_INT 0
59282: PPUSH
// ComRadiation ( un ) ;
59283: LD_VAR 0 1
59287: PPUSH
59288: CALL 60450 0 1
// end ;
59292: LD_VAR 0 2
59296: RET
// export function SOS_UnitKamikazed ( un ) ; begin
59297: LD_INT 0
59299: PPUSH
// ComRadiation ( un ) ;
59300: LD_VAR 0 1
59304: PPUSH
59305: CALL 60450 0 1
// end ;
59309: LD_VAR 0 2
59313: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59314: LD_INT 0
59316: PPUSH
// end ;
59317: LD_VAR 0 4
59321: RET
// export function SOS_Command ( cmd ) ; begin
59322: LD_INT 0
59324: PPUSH
// end ;
59325: LD_VAR 0 2
59329: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59330: LD_INT 0
59332: PPUSH
// end ;
59333: LD_VAR 0 6
59337: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
59338: LD_INT 0
59340: PPUSH
59341: PPUSH
59342: PPUSH
59343: PPUSH
59344: PPUSH
// if not vehicle or not factory then
59345: LD_VAR 0 1
59349: NOT
59350: IFTRUE 59359
59352: PUSH
59353: LD_VAR 0 2
59357: NOT
59358: OR
59359: IFFALSE 59363
// exit ;
59361: GO 60025
// weapon := GetWeapon ( vehicle ) ;
59363: LD_ADDR_VAR 0 7
59367: PUSH
59368: LD_VAR 0 1
59372: PPUSH
59373: CALL_OW 264
59377: ST_TO_ADDR
// if weapon = ar_miner then
59378: LD_VAR 0 7
59382: PUSH
59383: LD_INT 81
59385: EQUAL
59386: IFFALSE 59443
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
59388: LD_ADDR_EXP 57
59392: PUSH
59393: LD_EXP 57
59397: PPUSH
59398: LD_EXP 57
59402: PUSH
59403: LD_INT 1
59405: PLUS
59406: PPUSH
59407: LD_VAR 0 1
59411: PPUSH
59412: CALL_OW 1
59416: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59417: LD_ADDR_EXP 58
59421: PUSH
59422: LD_EXP 58
59426: PPUSH
59427: LD_EXP 58
59431: PUSH
59432: LD_INT 1
59434: PLUS
59435: PPUSH
59436: EMPTY
59437: PPUSH
59438: CALL_OW 1
59442: ST_TO_ADDR
// end ; if not factoryWaypoints then
59443: LD_EXP 60
59447: NOT
59448: IFFALSE 59452
// exit ;
59450: GO 60025
// for i := 1 to Count ( factoryWaypoints ) do
59452: LD_ADDR_VAR 0 4
59456: PUSH
59457: DOUBLE
59458: LD_INT 1
59460: DEC
59461: ST_TO_ADDR
59462: LD_EXP 60
59466: PPUSH
59467: CALL 17797 0 1
59471: PUSH
59472: FOR_TO
59473: IFFALSE 60023
// if factoryWaypoints [ i ] [ 2 ] = factory then
59475: LD_EXP 60
59479: PUSH
59480: LD_VAR 0 4
59484: ARRAY
59485: PUSH
59486: LD_INT 2
59488: ARRAY
59489: PUSH
59490: LD_VAR 0 2
59494: EQUAL
59495: IFFALSE 60021
// begin if GetControl ( vehicle ) = control_manual then
59497: LD_VAR 0 1
59501: PPUSH
59502: CALL_OW 263
59506: PUSH
59507: LD_INT 1
59509: EQUAL
59510: IFFALSE 59874
// begin driver := IsDrivenBy ( vehicle ) ;
59512: LD_ADDR_VAR 0 5
59516: PUSH
59517: LD_VAR 0 1
59521: PPUSH
59522: CALL_OW 311
59526: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
59527: LD_VAR 0 5
59531: PUSH
59532: LD_EXP 61
59536: IN
59537: IFTRUE 59551
59539: PUSH
59540: LD_VAR 0 1
59544: PUSH
59545: LD_EXP 61
59549: IN
59550: OR
59551: IFFALSE 59557
// exit ;
59553: POP
59554: POP
59555: GO 60025
// if not HasTask ( driver ) then
59557: LD_VAR 0 5
59561: PPUSH
59562: CALL_OW 314
59566: NOT
59567: IFFALSE 59872
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
59569: LD_ADDR_EXP 61
59573: PUSH
59574: LD_EXP 61
59578: PPUSH
59579: LD_VAR 0 5
59583: PPUSH
59584: CALL 53763 0 2
59588: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
59589: LD_ADDR_EXP 61
59593: PUSH
59594: LD_EXP 61
59598: PPUSH
59599: LD_VAR 0 1
59603: PPUSH
59604: CALL 53763 0 2
59608: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59609: LD_ADDR_VAR 0 6
59613: PUSH
59614: LD_EXP 60
59618: PUSH
59619: LD_VAR 0 4
59623: ARRAY
59624: PUSH
59625: LD_INT 3
59627: ARRAY
59628: PPUSH
59629: LD_EXP 60
59633: PUSH
59634: LD_VAR 0 4
59638: ARRAY
59639: PUSH
59640: LD_INT 4
59642: ARRAY
59643: PPUSH
59644: CALL_OW 428
59648: ST_TO_ADDR
// if hex then
59649: LD_VAR 0 6
59653: IFFALSE 59671
// ComMoveUnit ( driver , hex ) else
59655: LD_VAR 0 5
59659: PPUSH
59660: LD_VAR 0 6
59664: PPUSH
59665: CALL_OW 112
59669: GO 59755
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
59671: LD_VAR 0 1
59675: PPUSH
59676: LD_EXP 60
59680: PUSH
59681: LD_VAR 0 4
59685: ARRAY
59686: PUSH
59687: LD_INT 3
59689: ARRAY
59690: PPUSH
59691: LD_EXP 60
59695: PUSH
59696: LD_VAR 0 4
59700: ARRAY
59701: PUSH
59702: LD_INT 4
59704: ARRAY
59705: PPUSH
59706: CALL_OW 297
59710: PUSH
59711: LD_INT 0
59713: GREATER
59714: IFFALSE 59755
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59716: LD_VAR 0 5
59720: PPUSH
59721: LD_EXP 60
59725: PUSH
59726: LD_VAR 0 4
59730: ARRAY
59731: PUSH
59732: LD_INT 3
59734: ARRAY
59735: PPUSH
59736: LD_EXP 60
59740: PUSH
59741: LD_VAR 0 4
59745: ARRAY
59746: PUSH
59747: LD_INT 4
59749: ARRAY
59750: PPUSH
59751: CALL_OW 111
// AddComExitVehicle ( driver ) ;
59755: LD_VAR 0 5
59759: PPUSH
59760: CALL_OW 181
// if Multiplayer then
59764: LD_OWVAR 4
59768: IFFALSE 59817
// begin repeat wait ( 10 ) ;
59770: LD_INT 10
59772: PPUSH
59773: CALL_OW 67
// until not IsInUnit ( driver ) ;
59777: LD_VAR 0 5
59781: PPUSH
59782: CALL_OW 310
59786: NOT
59787: IFFALSE 59770
// if not HasTask ( driver ) then
59789: LD_VAR 0 5
59793: PPUSH
59794: CALL_OW 314
59798: NOT
59799: IFFALSE 59815
// ComEnterUnit ( driver , factory ) ;
59801: LD_VAR 0 5
59805: PPUSH
59806: LD_VAR 0 2
59810: PPUSH
59811: CALL_OW 120
// end else
59815: GO 59831
// AddComEnterUnit ( driver , factory ) ;
59817: LD_VAR 0 5
59821: PPUSH
59822: LD_VAR 0 2
59826: PPUSH
59827: CALL_OW 180
// wait ( 0 0$1 ) ;
59831: LD_INT 35
59833: PPUSH
59834: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
59838: LD_ADDR_EXP 61
59842: PUSH
59843: LD_EXP 61
59847: PUSH
59848: LD_VAR 0 5
59852: DIFF
59853: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
59854: LD_ADDR_EXP 61
59858: PUSH
59859: LD_EXP 61
59863: PUSH
59864: LD_VAR 0 1
59868: DIFF
59869: ST_TO_ADDR
// break ;
59870: GO 60023
// end ; end else
59872: GO 60021
// if GetControl ( vehicle ) = control_remote then
59874: LD_VAR 0 1
59878: PPUSH
59879: CALL_OW 263
59883: PUSH
59884: LD_INT 2
59886: EQUAL
59887: IFFALSE 59973
// begin wait ( 0 0$2 ) ;
59889: LD_INT 70
59891: PPUSH
59892: CALL_OW 67
// repeat wait ( 10 ) ;
59896: LD_INT 10
59898: PPUSH
59899: CALL_OW 67
// Connect ( vehicle ) ;
59903: LD_VAR 0 1
59907: PPUSH
59908: CALL 24075 0 1
// until IsControledBy ( vehicle ) ;
59912: LD_VAR 0 1
59916: PPUSH
59917: CALL_OW 312
59921: IFFALSE 59896
// wait ( 10 ) ;
59923: LD_INT 10
59925: PPUSH
59926: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59930: LD_VAR 0 1
59934: PPUSH
59935: LD_EXP 60
59939: PUSH
59940: LD_VAR 0 4
59944: ARRAY
59945: PUSH
59946: LD_INT 3
59948: ARRAY
59949: PPUSH
59950: LD_EXP 60
59954: PUSH
59955: LD_VAR 0 4
59959: ARRAY
59960: PUSH
59961: LD_INT 4
59963: ARRAY
59964: PPUSH
59965: CALL_OW 111
// break ;
59969: GO 60023
// end else
59971: GO 60021
// begin wait ( 0 0$3 ) ;
59973: LD_INT 105
59975: PPUSH
59976: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59980: LD_VAR 0 1
59984: PPUSH
59985: LD_EXP 60
59989: PUSH
59990: LD_VAR 0 4
59994: ARRAY
59995: PUSH
59996: LD_INT 3
59998: ARRAY
59999: PPUSH
60000: LD_EXP 60
60004: PUSH
60005: LD_VAR 0 4
60009: ARRAY
60010: PUSH
60011: LD_INT 4
60013: ARRAY
60014: PPUSH
60015: CALL_OW 111
// break ;
60019: GO 60023
// end ; end ;
60021: GO 59472
60023: POP
60024: POP
// end ;
60025: LD_VAR 0 3
60029: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60030: LD_INT 0
60032: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60033: LD_VAR 0 1
60037: PUSH
60038: LD_INT 250
60040: EQUAL
60041: IFFALSE 60058
60043: PUSH
60044: LD_VAR 0 2
60048: PPUSH
60049: CALL_OW 264
60053: PUSH
60054: LD_INT 81
60056: EQUAL
60057: AND
60058: IFFALSE 60079
// MinerPlaceMine ( unit , x , y ) ;
60060: LD_VAR 0 2
60064: PPUSH
60065: LD_VAR 0 4
60069: PPUSH
60070: LD_VAR 0 5
60074: PPUSH
60075: CALL 63360 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60079: LD_VAR 0 1
60083: PUSH
60084: LD_INT 251
60086: EQUAL
60087: IFFALSE 60104
60089: PUSH
60090: LD_VAR 0 2
60094: PPUSH
60095: CALL_OW 264
60099: PUSH
60100: LD_INT 81
60102: EQUAL
60103: AND
60104: IFFALSE 60125
// MinerDetonateMine ( unit , x , y ) ;
60106: LD_VAR 0 2
60110: PPUSH
60111: LD_VAR 0 4
60115: PPUSH
60116: LD_VAR 0 5
60120: PPUSH
60121: CALL 63767 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
60125: LD_VAR 0 1
60129: PUSH
60130: LD_INT 252
60132: EQUAL
60133: IFFALSE 60150
60135: PUSH
60136: LD_VAR 0 2
60140: PPUSH
60141: CALL_OW 264
60145: PUSH
60146: LD_INT 81
60148: EQUAL
60149: AND
60150: IFFALSE 60171
// MinerCreateMinefield ( unit , x , y ) ;
60152: LD_VAR 0 2
60156: PPUSH
60157: LD_VAR 0 4
60161: PPUSH
60162: LD_VAR 0 5
60166: PPUSH
60167: CALL 63999 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
60171: LD_VAR 0 1
60175: PUSH
60176: LD_INT 253
60178: EQUAL
60179: IFFALSE 60196
60181: PUSH
60182: LD_VAR 0 2
60186: PPUSH
60187: CALL_OW 257
60191: PUSH
60192: LD_INT 5
60194: EQUAL
60195: AND
60196: IFFALSE 60217
// ComBinocular ( unit , x , y ) ;
60198: LD_VAR 0 2
60202: PPUSH
60203: LD_VAR 0 4
60207: PPUSH
60208: LD_VAR 0 5
60212: PPUSH
60213: CALL 64374 0 3
// if selectedUnit then
60217: LD_VAR 0 3
60221: IFFALSE 60281
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60223: LD_VAR 0 1
60227: PUSH
60228: LD_INT 254
60230: EQUAL
60231: IFFALSE 60248
60233: PUSH
60234: LD_VAR 0 2
60238: PPUSH
60239: CALL_OW 264
60243: PUSH
60244: LD_INT 99
60246: EQUAL
60247: AND
60248: IFFALSE 60265
60250: PUSH
60251: LD_VAR 0 3
60255: PPUSH
60256: CALL_OW 263
60260: PUSH
60261: LD_INT 3
60263: EQUAL
60264: AND
60265: IFFALSE 60281
// HackDestroyVehicle ( unit , selectedUnit ) ;
60267: LD_VAR 0 2
60271: PPUSH
60272: LD_VAR 0 3
60276: PPUSH
60277: CALL 62571 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60281: LD_VAR 0 1
60285: PUSH
60286: LD_INT 255
60288: EQUAL
60289: IFFALSE 60313
60291: PUSH
60292: LD_VAR 0 2
60296: PPUSH
60297: CALL_OW 264
60301: PUSH
60302: LD_INT 14
60304: PUSH
60305: LD_INT 53
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: IN
60312: AND
60313: IFFALSE 60331
60315: PUSH
60316: LD_VAR 0 4
60320: PPUSH
60321: LD_VAR 0 5
60325: PPUSH
60326: CALL_OW 488
60330: AND
60331: IFFALSE 60355
// CutTreeXYR ( unit , x , y , 12 ) ;
60333: LD_VAR 0 2
60337: PPUSH
60338: LD_VAR 0 4
60342: PPUSH
60343: LD_VAR 0 5
60347: PPUSH
60348: LD_INT 12
60350: PPUSH
60351: CALL 60546 0 4
// if cmd = 256 then
60355: LD_VAR 0 1
60359: PUSH
60360: LD_INT 256
60362: EQUAL
60363: IFFALSE 60384
// SetFactoryWaypoint ( unit , x , y ) ;
60365: LD_VAR 0 2
60369: PPUSH
60370: LD_VAR 0 4
60374: PPUSH
60375: LD_VAR 0 5
60379: PPUSH
60380: CALL 66359 0 3
// if cmd = 257 then
60384: LD_VAR 0 1
60388: PUSH
60389: LD_INT 257
60391: EQUAL
60392: IFFALSE 60413
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60394: LD_VAR 0 2
60398: PPUSH
60399: LD_VAR 0 4
60403: PPUSH
60404: LD_VAR 0 5
60408: PPUSH
60409: CALL 66855 0 3
// if cmd = 258 then
60413: LD_VAR 0 1
60417: PUSH
60418: LD_INT 258
60420: EQUAL
60421: IFFALSE 60445
// BurnTreeXYR ( unit , x , y , 8 ) ;
60423: LD_VAR 0 2
60427: PPUSH
60428: LD_VAR 0 4
60432: PPUSH
60433: LD_VAR 0 5
60437: PPUSH
60438: LD_INT 8
60440: PPUSH
60441: CALL 60946 0 4
// end ;
60445: LD_VAR 0 6
60449: RET
// export function ComRadiation ( un ) ; var eff ; begin
60450: LD_INT 0
60452: PPUSH
60453: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
60454: LD_VAR 0 1
60458: PPUSH
60459: CALL_OW 264
60463: PUSH
60464: LD_INT 91
60466: NONEQUAL
60467: IFFALSE 60471
// exit ;
60469: GO 60541
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60471: LD_INT 68
60473: PPUSH
60474: LD_VAR 0 1
60478: PPUSH
60479: CALL_OW 255
60483: PPUSH
60484: CALL_OW 321
60488: PUSH
60489: LD_INT 2
60491: EQUAL
60492: IFFALSE 60504
// eff := 50 else
60494: LD_ADDR_VAR 0 3
60498: PUSH
60499: LD_INT 50
60501: ST_TO_ADDR
60502: GO 60512
// eff := 25 ;
60504: LD_ADDR_VAR 0 3
60508: PUSH
60509: LD_INT 25
60511: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60512: LD_VAR 0 1
60516: PPUSH
60517: CALL_OW 250
60521: PPUSH
60522: LD_VAR 0 1
60526: PPUSH
60527: CALL_OW 251
60531: PPUSH
60532: LD_VAR 0 3
60536: PPUSH
60537: CALL_OW 495
// end ;
60541: LD_VAR 0 2
60545: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60546: LD_INT 0
60548: PPUSH
60549: PPUSH
60550: PPUSH
60551: PPUSH
60552: PPUSH
60553: PPUSH
60554: PPUSH
60555: PPUSH
60556: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60557: LD_VAR 0 1
60561: PPUSH
60562: CALL_OW 302
60566: NOT
60567: IFTRUE 60586
60569: PUSH
60570: LD_VAR 0 2
60574: PPUSH
60575: LD_VAR 0 3
60579: PPUSH
60580: CALL_OW 488
60584: NOT
60585: OR
60586: IFTRUE 60595
60588: PUSH
60589: LD_VAR 0 4
60593: NOT
60594: OR
60595: IFFALSE 60599
// exit ;
60597: GO 60941
// list := [ ] ;
60599: LD_ADDR_VAR 0 13
60603: PUSH
60604: EMPTY
60605: ST_TO_ADDR
// if x - r < 0 then
60606: LD_VAR 0 2
60610: PUSH
60611: LD_VAR 0 4
60615: MINUS
60616: PUSH
60617: LD_INT 0
60619: LESS
60620: IFFALSE 60632
// min_x := 0 else
60622: LD_ADDR_VAR 0 7
60626: PUSH
60627: LD_INT 0
60629: ST_TO_ADDR
60630: GO 60648
// min_x := x - r ;
60632: LD_ADDR_VAR 0 7
60636: PUSH
60637: LD_VAR 0 2
60641: PUSH
60642: LD_VAR 0 4
60646: MINUS
60647: ST_TO_ADDR
// if y - r < 0 then
60648: LD_VAR 0 3
60652: PUSH
60653: LD_VAR 0 4
60657: MINUS
60658: PUSH
60659: LD_INT 0
60661: LESS
60662: IFFALSE 60674
// min_y := 0 else
60664: LD_ADDR_VAR 0 8
60668: PUSH
60669: LD_INT 0
60671: ST_TO_ADDR
60672: GO 60690
// min_y := y - r ;
60674: LD_ADDR_VAR 0 8
60678: PUSH
60679: LD_VAR 0 3
60683: PUSH
60684: LD_VAR 0 4
60688: MINUS
60689: ST_TO_ADDR
// max_x := x + r ;
60690: LD_ADDR_VAR 0 9
60694: PUSH
60695: LD_VAR 0 2
60699: PUSH
60700: LD_VAR 0 4
60704: PLUS
60705: ST_TO_ADDR
// max_y := y + r ;
60706: LD_ADDR_VAR 0 10
60710: PUSH
60711: LD_VAR 0 3
60715: PUSH
60716: LD_VAR 0 4
60720: PLUS
60721: ST_TO_ADDR
// for _x = min_x to max_x do
60722: LD_ADDR_VAR 0 11
60726: PUSH
60727: DOUBLE
60728: LD_VAR 0 7
60732: DEC
60733: ST_TO_ADDR
60734: LD_VAR 0 9
60738: PUSH
60739: FOR_TO
60740: IFFALSE 60859
// for _y = min_y to max_y do
60742: LD_ADDR_VAR 0 12
60746: PUSH
60747: DOUBLE
60748: LD_VAR 0 8
60752: DEC
60753: ST_TO_ADDR
60754: LD_VAR 0 10
60758: PUSH
60759: FOR_TO
60760: IFFALSE 60855
// begin if not ValidHex ( _x , _y ) then
60762: LD_VAR 0 11
60766: PPUSH
60767: LD_VAR 0 12
60771: PPUSH
60772: CALL_OW 488
60776: NOT
60777: IFFALSE 60781
// continue ;
60779: GO 60759
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60781: LD_VAR 0 11
60785: PPUSH
60786: LD_VAR 0 12
60790: PPUSH
60791: CALL_OW 351
60795: IFFALSE 60813
60797: PUSH
60798: LD_VAR 0 11
60802: PPUSH
60803: LD_VAR 0 12
60807: PPUSH
60808: CALL_OW 554
60812: AND
60813: IFFALSE 60853
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60815: LD_ADDR_VAR 0 13
60819: PUSH
60820: LD_VAR 0 13
60824: PPUSH
60825: LD_VAR 0 13
60829: PUSH
60830: LD_INT 1
60832: PLUS
60833: PPUSH
60834: LD_VAR 0 11
60838: PUSH
60839: LD_VAR 0 12
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PPUSH
60848: CALL_OW 2
60852: ST_TO_ADDR
// end ;
60853: GO 60759
60855: POP
60856: POP
60857: GO 60739
60859: POP
60860: POP
// if not list then
60861: LD_VAR 0 13
60865: NOT
60866: IFFALSE 60870
// exit ;
60868: GO 60941
// for i in list do
60870: LD_ADDR_VAR 0 6
60874: PUSH
60875: LD_VAR 0 13
60879: PUSH
60880: FOR_IN
60881: IFFALSE 60939
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60883: LD_VAR 0 1
60887: PPUSH
60888: LD_STRING M
60890: PUSH
60891: LD_VAR 0 6
60895: PUSH
60896: LD_INT 1
60898: ARRAY
60899: PUSH
60900: LD_VAR 0 6
60904: PUSH
60905: LD_INT 2
60907: ARRAY
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: PUSH
60930: EMPTY
60931: LIST
60932: PPUSH
60933: CALL_OW 447
60937: GO 60880
60939: POP
60940: POP
// end ;
60941: LD_VAR 0 5
60945: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
60946: LD_INT 0
60948: PPUSH
60949: PPUSH
60950: PPUSH
60951: PPUSH
60952: PPUSH
60953: PPUSH
60954: PPUSH
60955: PPUSH
60956: PPUSH
60957: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
60958: LD_VAR 0 1
60962: PPUSH
60963: CALL_OW 302
60967: NOT
60968: IFTRUE 60987
60970: PUSH
60971: LD_VAR 0 2
60975: PPUSH
60976: LD_VAR 0 3
60980: PPUSH
60981: CALL_OW 488
60985: NOT
60986: OR
60987: IFTRUE 60996
60989: PUSH
60990: LD_VAR 0 4
60994: NOT
60995: OR
60996: IFFALSE 61000
// exit ;
60998: GO 61517
// list := [ ] ;
61000: LD_ADDR_VAR 0 13
61004: PUSH
61005: EMPTY
61006: ST_TO_ADDR
// if x - r < 0 then
61007: LD_VAR 0 2
61011: PUSH
61012: LD_VAR 0 4
61016: MINUS
61017: PUSH
61018: LD_INT 0
61020: LESS
61021: IFFALSE 61033
// min_x := 0 else
61023: LD_ADDR_VAR 0 7
61027: PUSH
61028: LD_INT 0
61030: ST_TO_ADDR
61031: GO 61049
// min_x := x - r ;
61033: LD_ADDR_VAR 0 7
61037: PUSH
61038: LD_VAR 0 2
61042: PUSH
61043: LD_VAR 0 4
61047: MINUS
61048: ST_TO_ADDR
// if y - r < 0 then
61049: LD_VAR 0 3
61053: PUSH
61054: LD_VAR 0 4
61058: MINUS
61059: PUSH
61060: LD_INT 0
61062: LESS
61063: IFFALSE 61075
// min_y := 0 else
61065: LD_ADDR_VAR 0 8
61069: PUSH
61070: LD_INT 0
61072: ST_TO_ADDR
61073: GO 61091
// min_y := y - r ;
61075: LD_ADDR_VAR 0 8
61079: PUSH
61080: LD_VAR 0 3
61084: PUSH
61085: LD_VAR 0 4
61089: MINUS
61090: ST_TO_ADDR
// max_x := x + r ;
61091: LD_ADDR_VAR 0 9
61095: PUSH
61096: LD_VAR 0 2
61100: PUSH
61101: LD_VAR 0 4
61105: PLUS
61106: ST_TO_ADDR
// max_y := y + r ;
61107: LD_ADDR_VAR 0 10
61111: PUSH
61112: LD_VAR 0 3
61116: PUSH
61117: LD_VAR 0 4
61121: PLUS
61122: ST_TO_ADDR
// for _x = min_x to max_x do
61123: LD_ADDR_VAR 0 11
61127: PUSH
61128: DOUBLE
61129: LD_VAR 0 7
61133: DEC
61134: ST_TO_ADDR
61135: LD_VAR 0 9
61139: PUSH
61140: FOR_TO
61141: IFFALSE 61260
// for _y = min_y to max_y do
61143: LD_ADDR_VAR 0 12
61147: PUSH
61148: DOUBLE
61149: LD_VAR 0 8
61153: DEC
61154: ST_TO_ADDR
61155: LD_VAR 0 10
61159: PUSH
61160: FOR_TO
61161: IFFALSE 61256
// begin if not ValidHex ( _x , _y ) then
61163: LD_VAR 0 11
61167: PPUSH
61168: LD_VAR 0 12
61172: PPUSH
61173: CALL_OW 488
61177: NOT
61178: IFFALSE 61182
// continue ;
61180: GO 61160
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61182: LD_VAR 0 11
61186: PPUSH
61187: LD_VAR 0 12
61191: PPUSH
61192: CALL_OW 351
61196: IFFALSE 61214
61198: PUSH
61199: LD_VAR 0 11
61203: PPUSH
61204: LD_VAR 0 12
61208: PPUSH
61209: CALL_OW 554
61213: AND
61214: IFFALSE 61254
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61216: LD_ADDR_VAR 0 13
61220: PUSH
61221: LD_VAR 0 13
61225: PPUSH
61226: LD_VAR 0 13
61230: PUSH
61231: LD_INT 1
61233: PLUS
61234: PPUSH
61235: LD_VAR 0 11
61239: PUSH
61240: LD_VAR 0 12
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PPUSH
61249: CALL_OW 2
61253: ST_TO_ADDR
// end ;
61254: GO 61160
61256: POP
61257: POP
61258: GO 61140
61260: POP
61261: POP
// if not list then
61262: LD_VAR 0 13
61266: NOT
61267: IFFALSE 61271
// exit ;
61269: GO 61517
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
61271: LD_ADDR_VAR 0 13
61275: PUSH
61276: LD_VAR 0 1
61280: PPUSH
61281: LD_VAR 0 13
61285: PPUSH
61286: LD_INT 1
61288: PPUSH
61289: LD_INT 1
61291: PPUSH
61292: CALL 21203 0 4
61296: ST_TO_ADDR
// ComStop ( flame ) ;
61297: LD_VAR 0 1
61301: PPUSH
61302: CALL_OW 141
// for i in list do
61306: LD_ADDR_VAR 0 6
61310: PUSH
61311: LD_VAR 0 13
61315: PUSH
61316: FOR_IN
61317: IFFALSE 61348
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61319: LD_VAR 0 1
61323: PPUSH
61324: LD_VAR 0 6
61328: PUSH
61329: LD_INT 1
61331: ARRAY
61332: PPUSH
61333: LD_VAR 0 6
61337: PUSH
61338: LD_INT 2
61340: ARRAY
61341: PPUSH
61342: CALL_OW 176
61346: GO 61316
61348: POP
61349: POP
// repeat wait ( 0 0$1 ) ;
61350: LD_INT 35
61352: PPUSH
61353: CALL_OW 67
// task := GetTaskList ( flame ) ;
61357: LD_ADDR_VAR 0 14
61361: PUSH
61362: LD_VAR 0 1
61366: PPUSH
61367: CALL_OW 437
61371: ST_TO_ADDR
// if not task then
61372: LD_VAR 0 14
61376: NOT
61377: IFFALSE 61381
// exit ;
61379: GO 61517
// if task [ 1 ] [ 1 ] <> | then
61381: LD_VAR 0 14
61385: PUSH
61386: LD_INT 1
61388: ARRAY
61389: PUSH
61390: LD_INT 1
61392: ARRAY
61393: PUSH
61394: LD_STRING |
61396: NONEQUAL
61397: IFFALSE 61401
// exit ;
61399: GO 61517
// _x := task [ 1 ] [ 2 ] ;
61401: LD_ADDR_VAR 0 11
61405: PUSH
61406: LD_VAR 0 14
61410: PUSH
61411: LD_INT 1
61413: ARRAY
61414: PUSH
61415: LD_INT 2
61417: ARRAY
61418: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61419: LD_ADDR_VAR 0 12
61423: PUSH
61424: LD_VAR 0 14
61428: PUSH
61429: LD_INT 1
61431: ARRAY
61432: PUSH
61433: LD_INT 3
61435: ARRAY
61436: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61437: LD_VAR 0 11
61441: PPUSH
61442: LD_VAR 0 12
61446: PPUSH
61447: CALL_OW 351
61451: NOT
61452: IFTRUE 61471
61454: PUSH
61455: LD_VAR 0 11
61459: PPUSH
61460: LD_VAR 0 12
61464: PPUSH
61465: CALL_OW 554
61469: NOT
61470: OR
61471: IFFALSE 61505
// begin task := Delete ( task , 1 ) ;
61473: LD_ADDR_VAR 0 14
61477: PUSH
61478: LD_VAR 0 14
61482: PPUSH
61483: LD_INT 1
61485: PPUSH
61486: CALL_OW 3
61490: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61491: LD_VAR 0 1
61495: PPUSH
61496: LD_VAR 0 14
61500: PPUSH
61501: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61505: LD_VAR 0 1
61509: PPUSH
61510: CALL_OW 314
61514: NOT
61515: IFFALSE 61350
// end ;
61517: LD_VAR 0 5
61521: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61522: LD_EXP 50
61526: NOT
61527: IFFALSE 61577
61529: GO 61531
61531: DISABLE
// begin initHack := true ;
61532: LD_ADDR_EXP 50
61536: PUSH
61537: LD_INT 1
61539: ST_TO_ADDR
// hackTanks := [ ] ;
61540: LD_ADDR_EXP 51
61544: PUSH
61545: EMPTY
61546: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61547: LD_ADDR_EXP 52
61551: PUSH
61552: EMPTY
61553: ST_TO_ADDR
// hackLimit := 3 ;
61554: LD_ADDR_EXP 53
61558: PUSH
61559: LD_INT 3
61561: ST_TO_ADDR
// hackDist := 12 ;
61562: LD_ADDR_EXP 54
61566: PUSH
61567: LD_INT 12
61569: ST_TO_ADDR
// hackCounter := [ ] ;
61570: LD_ADDR_EXP 55
61574: PUSH
61575: EMPTY
61576: ST_TO_ADDR
// end ;
61577: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61578: LD_EXP 50
61582: IFFALSE 61600
61584: PUSH
61585: LD_INT 34
61587: PUSH
61588: LD_INT 99
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PPUSH
61595: CALL_OW 69
61599: AND
61600: IFFALSE 61853
61602: GO 61604
61604: DISABLE
61605: LD_INT 0
61607: PPUSH
61608: PPUSH
// begin enable ;
61609: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61610: LD_ADDR_VAR 0 1
61614: PUSH
61615: LD_INT 34
61617: PUSH
61618: LD_INT 99
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PPUSH
61625: CALL_OW 69
61629: PUSH
61630: FOR_IN
61631: IFFALSE 61851
// begin if not i in hackTanks then
61633: LD_VAR 0 1
61637: PUSH
61638: LD_EXP 51
61642: IN
61643: NOT
61644: IFFALSE 61727
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61646: LD_ADDR_EXP 51
61650: PUSH
61651: LD_EXP 51
61655: PPUSH
61656: LD_EXP 51
61660: PUSH
61661: LD_INT 1
61663: PLUS
61664: PPUSH
61665: LD_VAR 0 1
61669: PPUSH
61670: CALL_OW 1
61674: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61675: LD_ADDR_EXP 52
61679: PUSH
61680: LD_EXP 52
61684: PPUSH
61685: LD_EXP 52
61689: PUSH
61690: LD_INT 1
61692: PLUS
61693: PPUSH
61694: EMPTY
61695: PPUSH
61696: CALL_OW 1
61700: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61701: LD_ADDR_EXP 55
61705: PUSH
61706: LD_EXP 55
61710: PPUSH
61711: LD_EXP 55
61715: PUSH
61716: LD_INT 1
61718: PLUS
61719: PPUSH
61720: EMPTY
61721: PPUSH
61722: CALL_OW 1
61726: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61727: LD_VAR 0 1
61731: PPUSH
61732: CALL_OW 302
61736: NOT
61737: IFFALSE 61750
// begin HackUnlinkAll ( i ) ;
61739: LD_VAR 0 1
61743: PPUSH
61744: CALL 61856 0 1
// continue ;
61748: GO 61630
// end ; HackCheckCapturedStatus ( i ) ;
61750: LD_VAR 0 1
61754: PPUSH
61755: CALL 62301 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61759: LD_ADDR_VAR 0 2
61763: PUSH
61764: LD_INT 81
61766: PUSH
61767: LD_VAR 0 1
61771: PPUSH
61772: CALL_OW 255
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 33
61783: PUSH
61784: LD_INT 3
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 91
61793: PUSH
61794: LD_VAR 0 1
61798: PUSH
61799: LD_EXP 54
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 50
61811: PUSH
61812: EMPTY
61813: LIST
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: PPUSH
61821: CALL_OW 69
61825: ST_TO_ADDR
// if not tmp then
61826: LD_VAR 0 2
61830: NOT
61831: IFFALSE 61835
// continue ;
61833: GO 61630
// HackLink ( i , tmp ) ;
61835: LD_VAR 0 1
61839: PPUSH
61840: LD_VAR 0 2
61844: PPUSH
61845: CALL 61992 0 2
// end ;
61849: GO 61630
61851: POP
61852: POP
// end ;
61853: PPOPN 2
61855: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61856: LD_INT 0
61858: PPUSH
61859: PPUSH
61860: PPUSH
// if not hack in hackTanks then
61861: LD_VAR 0 1
61865: PUSH
61866: LD_EXP 51
61870: IN
61871: NOT
61872: IFFALSE 61876
// exit ;
61874: GO 61987
// index := GetElementIndex ( hackTanks , hack ) ;
61876: LD_ADDR_VAR 0 4
61880: PUSH
61881: LD_EXP 51
61885: PPUSH
61886: LD_VAR 0 1
61890: PPUSH
61891: CALL 20498 0 2
61895: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61896: LD_EXP 52
61900: PUSH
61901: LD_VAR 0 4
61905: ARRAY
61906: IFFALSE 61987
// begin for i in hackTanksCaptured [ index ] do
61908: LD_ADDR_VAR 0 3
61912: PUSH
61913: LD_EXP 52
61917: PUSH
61918: LD_VAR 0 4
61922: ARRAY
61923: PUSH
61924: FOR_IN
61925: IFFALSE 61951
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61927: LD_VAR 0 3
61931: PUSH
61932: LD_INT 1
61934: ARRAY
61935: PPUSH
61936: LD_VAR 0 3
61940: PUSH
61941: LD_INT 2
61943: ARRAY
61944: PPUSH
61945: CALL_OW 235
61949: GO 61924
61951: POP
61952: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61953: LD_ADDR_EXP 52
61957: PUSH
61958: LD_EXP 52
61962: PPUSH
61963: LD_VAR 0 4
61967: PPUSH
61968: EMPTY
61969: PPUSH
61970: CALL_OW 1
61974: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61975: LD_VAR 0 1
61979: PPUSH
61980: LD_INT 0
61982: PPUSH
61983: CALL_OW 505
// end ; end ;
61987: LD_VAR 0 2
61991: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61992: LD_INT 0
61994: PPUSH
61995: PPUSH
61996: PPUSH
// if not hack in hackTanks or not vehicles then
61997: LD_VAR 0 1
62001: PUSH
62002: LD_EXP 51
62006: IN
62007: NOT
62008: IFTRUE 62017
62010: PUSH
62011: LD_VAR 0 2
62015: NOT
62016: OR
62017: IFFALSE 62021
// exit ;
62019: GO 62296
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62021: LD_ADDR_VAR 0 2
62025: PUSH
62026: LD_VAR 0 1
62030: PPUSH
62031: LD_VAR 0 2
62035: PPUSH
62036: LD_INT 1
62038: PPUSH
62039: LD_INT 1
62041: PPUSH
62042: CALL 21150 0 4
62046: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62047: LD_ADDR_VAR 0 5
62051: PUSH
62052: LD_EXP 51
62056: PPUSH
62057: LD_VAR 0 1
62061: PPUSH
62062: CALL 20498 0 2
62066: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62067: LD_EXP 52
62071: PUSH
62072: LD_VAR 0 5
62076: ARRAY
62077: PUSH
62078: LD_EXP 53
62082: LESS
62083: IFFALSE 62272
// begin for i := 1 to vehicles do
62085: LD_ADDR_VAR 0 4
62089: PUSH
62090: DOUBLE
62091: LD_INT 1
62093: DEC
62094: ST_TO_ADDR
62095: LD_VAR 0 2
62099: PUSH
62100: FOR_TO
62101: IFFALSE 62270
// begin if hackTanksCaptured [ index ] = hackLimit then
62103: LD_EXP 52
62107: PUSH
62108: LD_VAR 0 5
62112: ARRAY
62113: PUSH
62114: LD_EXP 53
62118: EQUAL
62119: IFFALSE 62123
// break ;
62121: GO 62270
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62123: LD_ADDR_EXP 55
62127: PUSH
62128: LD_EXP 55
62132: PPUSH
62133: LD_VAR 0 5
62137: PPUSH
62138: LD_EXP 55
62142: PUSH
62143: LD_VAR 0 5
62147: ARRAY
62148: PUSH
62149: LD_INT 1
62151: PLUS
62152: PPUSH
62153: CALL_OW 1
62157: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62158: LD_ADDR_EXP 52
62162: PUSH
62163: LD_EXP 52
62167: PPUSH
62168: LD_VAR 0 5
62172: PUSH
62173: LD_EXP 52
62177: PUSH
62178: LD_VAR 0 5
62182: ARRAY
62183: PUSH
62184: LD_INT 1
62186: PLUS
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PPUSH
62192: LD_VAR 0 2
62196: PUSH
62197: LD_VAR 0 4
62201: ARRAY
62202: PUSH
62203: LD_VAR 0 2
62207: PUSH
62208: LD_VAR 0 4
62212: ARRAY
62213: PPUSH
62214: CALL_OW 255
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PPUSH
62223: CALL 20715 0 3
62227: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62228: LD_VAR 0 2
62232: PUSH
62233: LD_VAR 0 4
62237: ARRAY
62238: PPUSH
62239: LD_VAR 0 1
62243: PPUSH
62244: CALL_OW 255
62248: PPUSH
62249: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62253: LD_VAR 0 2
62257: PUSH
62258: LD_VAR 0 4
62262: ARRAY
62263: PPUSH
62264: CALL_OW 141
// end ;
62268: GO 62100
62270: POP
62271: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62272: LD_VAR 0 1
62276: PPUSH
62277: LD_EXP 52
62281: PUSH
62282: LD_VAR 0 5
62286: ARRAY
62287: PUSH
62288: LD_INT 0
62290: PLUS
62291: PPUSH
62292: CALL_OW 505
// end ;
62296: LD_VAR 0 3
62300: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62301: LD_INT 0
62303: PPUSH
62304: PPUSH
62305: PPUSH
62306: PPUSH
// if not hack in hackTanks then
62307: LD_VAR 0 1
62311: PUSH
62312: LD_EXP 51
62316: IN
62317: NOT
62318: IFFALSE 62322
// exit ;
62320: GO 62566
// index := GetElementIndex ( hackTanks , hack ) ;
62322: LD_ADDR_VAR 0 4
62326: PUSH
62327: LD_EXP 51
62331: PPUSH
62332: LD_VAR 0 1
62336: PPUSH
62337: CALL 20498 0 2
62341: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62342: LD_ADDR_VAR 0 3
62346: PUSH
62347: DOUBLE
62348: LD_EXP 52
62352: PUSH
62353: LD_VAR 0 4
62357: ARRAY
62358: INC
62359: ST_TO_ADDR
62360: LD_INT 1
62362: PUSH
62363: FOR_DOWNTO
62364: IFFALSE 62540
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62366: LD_ADDR_VAR 0 5
62370: PUSH
62371: LD_EXP 52
62375: PUSH
62376: LD_VAR 0 4
62380: ARRAY
62381: PUSH
62382: LD_VAR 0 3
62386: ARRAY
62387: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62388: LD_VAR 0 5
62392: PUSH
62393: LD_INT 1
62395: ARRAY
62396: PPUSH
62397: CALL_OW 302
62401: NOT
62402: IFTRUE 62430
62404: PUSH
62405: LD_VAR 0 5
62409: PUSH
62410: LD_INT 1
62412: ARRAY
62413: PPUSH
62414: CALL_OW 255
62418: PUSH
62419: LD_VAR 0 1
62423: PPUSH
62424: CALL_OW 255
62428: NONEQUAL
62429: OR
62430: IFFALSE 62538
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62432: LD_VAR 0 5
62436: PUSH
62437: LD_INT 1
62439: ARRAY
62440: PPUSH
62441: CALL_OW 305
62445: IFFALSE 62473
62447: PUSH
62448: LD_VAR 0 5
62452: PUSH
62453: LD_INT 1
62455: ARRAY
62456: PPUSH
62457: CALL_OW 255
62461: PUSH
62462: LD_VAR 0 1
62466: PPUSH
62467: CALL_OW 255
62471: EQUAL
62472: AND
62473: IFFALSE 62497
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62475: LD_VAR 0 5
62479: PUSH
62480: LD_INT 1
62482: ARRAY
62483: PPUSH
62484: LD_VAR 0 5
62488: PUSH
62489: LD_INT 2
62491: ARRAY
62492: PPUSH
62493: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62497: LD_ADDR_EXP 52
62501: PUSH
62502: LD_EXP 52
62506: PPUSH
62507: LD_VAR 0 4
62511: PPUSH
62512: LD_EXP 52
62516: PUSH
62517: LD_VAR 0 4
62521: ARRAY
62522: PPUSH
62523: LD_VAR 0 3
62527: PPUSH
62528: CALL_OW 3
62532: PPUSH
62533: CALL_OW 1
62537: ST_TO_ADDR
// end ; end ;
62538: GO 62363
62540: POP
62541: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62542: LD_VAR 0 1
62546: PPUSH
62547: LD_EXP 52
62551: PUSH
62552: LD_VAR 0 4
62556: ARRAY
62557: PUSH
62558: LD_INT 0
62560: PLUS
62561: PPUSH
62562: CALL_OW 505
// end ;
62566: LD_VAR 0 2
62570: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62571: LD_INT 0
62573: PPUSH
62574: PPUSH
62575: PPUSH
62576: PPUSH
// if not hack in hackTanks then
62577: LD_VAR 0 1
62581: PUSH
62582: LD_EXP 51
62586: IN
62587: NOT
62588: IFFALSE 62592
// exit ;
62590: GO 62677
// index := GetElementIndex ( hackTanks , hack ) ;
62592: LD_ADDR_VAR 0 5
62596: PUSH
62597: LD_EXP 51
62601: PPUSH
62602: LD_VAR 0 1
62606: PPUSH
62607: CALL 20498 0 2
62611: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62612: LD_ADDR_VAR 0 4
62616: PUSH
62617: DOUBLE
62618: LD_INT 1
62620: DEC
62621: ST_TO_ADDR
62622: LD_EXP 52
62626: PUSH
62627: LD_VAR 0 5
62631: ARRAY
62632: PUSH
62633: FOR_TO
62634: IFFALSE 62675
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62636: LD_EXP 52
62640: PUSH
62641: LD_VAR 0 5
62645: ARRAY
62646: PUSH
62647: LD_VAR 0 4
62651: ARRAY
62652: PUSH
62653: LD_INT 1
62655: ARRAY
62656: PUSH
62657: LD_VAR 0 2
62661: EQUAL
62662: IFFALSE 62673
// KillUnit ( vehicle ) ;
62664: LD_VAR 0 2
62668: PPUSH
62669: CALL_OW 66
62673: GO 62633
62675: POP
62676: POP
// end ;
62677: LD_VAR 0 3
62681: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
62682: LD_EXP 56
62686: NOT
62687: IFFALSE 62820
62689: GO 62691
62691: DISABLE
62692: LD_INT 0
62694: PPUSH
// begin initMiner := true ;
62695: LD_ADDR_EXP 56
62699: PUSH
62700: LD_INT 1
62702: ST_TO_ADDR
// minersList := [ ] ;
62703: LD_ADDR_EXP 57
62707: PUSH
62708: EMPTY
62709: ST_TO_ADDR
// minerMinesList := [ ] ;
62710: LD_ADDR_EXP 58
62714: PUSH
62715: EMPTY
62716: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
62717: LD_ADDR_EXP 59
62721: PUSH
62722: LD_INT 6
62724: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62725: LD_ADDR_VAR 0 1
62729: PUSH
62730: LD_INT 34
62732: PUSH
62733: LD_INT 81
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PPUSH
62740: CALL_OW 69
62744: PUSH
62745: FOR_IN
62746: IFFALSE 62818
// begin if not i in minersList then
62748: LD_VAR 0 1
62752: PUSH
62753: LD_EXP 57
62757: IN
62758: NOT
62759: IFFALSE 62816
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62761: LD_ADDR_EXP 57
62765: PUSH
62766: LD_EXP 57
62770: PPUSH
62771: LD_EXP 57
62775: PUSH
62776: LD_INT 1
62778: PLUS
62779: PPUSH
62780: LD_VAR 0 1
62784: PPUSH
62785: CALL_OW 1
62789: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62790: LD_ADDR_EXP 58
62794: PUSH
62795: LD_EXP 58
62799: PPUSH
62800: LD_EXP 58
62804: PUSH
62805: LD_INT 1
62807: PLUS
62808: PPUSH
62809: EMPTY
62810: PPUSH
62811: CALL_OW 1
62815: ST_TO_ADDR
// end end ;
62816: GO 62745
62818: POP
62819: POP
// end ;
62820: PPOPN 1
62822: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
62823: LD_EXP 56
62827: IFFALSE 62858
62829: PUSH
62830: LD_EXP 58
62834: PPUSH
62835: CALL 17797 0 1
62839: IFTRUE 62857
62841: PUSH
62842: LD_INT 34
62844: PUSH
62845: LD_INT 81
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PPUSH
62852: CALL_OW 69
62856: OR
62857: AND
62858: IFFALSE 63357
62860: GO 62862
62862: DISABLE
62863: LD_INT 0
62865: PPUSH
62866: PPUSH
62867: PPUSH
62868: PPUSH
// begin enable ;
62869: ENABLE
// for i := minerMinesList downto 1 do
62870: LD_ADDR_VAR 0 1
62874: PUSH
62875: DOUBLE
62876: LD_EXP 58
62880: INC
62881: ST_TO_ADDR
62882: LD_INT 1
62884: PUSH
62885: FOR_DOWNTO
62886: IFFALSE 63355
// begin if IsLive ( minersList [ i ] ) then
62888: LD_EXP 57
62892: PUSH
62893: LD_VAR 0 1
62897: ARRAY
62898: PPUSH
62899: CALL_OW 300
62903: IFFALSE 62936
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
62905: LD_EXP 57
62909: PUSH
62910: LD_VAR 0 1
62914: ARRAY
62915: PPUSH
62916: LD_EXP 58
62920: PUSH
62921: LD_VAR 0 1
62925: ARRAY
62926: PPUSH
62927: CALL 17797 0 1
62931: PPUSH
62932: CALL_OW 505
// if not minerMinesList [ i ] then
62936: LD_EXP 58
62940: PUSH
62941: LD_VAR 0 1
62945: ARRAY
62946: NOT
62947: IFFALSE 62951
// continue ;
62949: GO 62885
// for j := minerMinesList [ i ] downto 1 do
62951: LD_ADDR_VAR 0 2
62955: PUSH
62956: DOUBLE
62957: LD_EXP 58
62961: PUSH
62962: LD_VAR 0 1
62966: ARRAY
62967: INC
62968: ST_TO_ADDR
62969: LD_INT 1
62971: PUSH
62972: FOR_DOWNTO
62973: IFFALSE 63351
// begin side := GetSide ( minersList [ i ] ) ;
62975: LD_ADDR_VAR 0 3
62979: PUSH
62980: LD_EXP 57
62984: PUSH
62985: LD_VAR 0 1
62989: ARRAY
62990: PPUSH
62991: CALL_OW 255
62995: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
62996: LD_EXP 57
63000: PUSH
63001: LD_VAR 0 1
63005: ARRAY
63006: PPUSH
63007: CALL_OW 301
63011: IFTRUE 63031
63013: PUSH
63014: LD_EXP 57
63018: PUSH
63019: LD_VAR 0 1
63023: ARRAY
63024: PPUSH
63025: CALL_OW 305
63029: NOT
63030: OR
63031: IFFALSE 63122
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63033: LD_EXP 58
63037: PUSH
63038: LD_VAR 0 1
63042: ARRAY
63043: PUSH
63044: LD_VAR 0 2
63048: ARRAY
63049: PUSH
63050: LD_INT 1
63052: ARRAY
63053: PPUSH
63054: LD_EXP 58
63058: PUSH
63059: LD_VAR 0 1
63063: ARRAY
63064: PUSH
63065: LD_VAR 0 2
63069: ARRAY
63070: PUSH
63071: LD_INT 2
63073: ARRAY
63074: PPUSH
63075: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63079: LD_ADDR_EXP 58
63083: PUSH
63084: LD_EXP 58
63088: PPUSH
63089: LD_VAR 0 1
63093: PPUSH
63094: LD_EXP 58
63098: PUSH
63099: LD_VAR 0 1
63103: ARRAY
63104: PPUSH
63105: LD_VAR 0 2
63109: PPUSH
63110: CALL_OW 3
63114: PPUSH
63115: CALL_OW 1
63119: ST_TO_ADDR
// continue ;
63120: GO 62972
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63122: LD_ADDR_VAR 0 4
63126: PUSH
63127: LD_EXP 58
63131: PUSH
63132: LD_VAR 0 1
63136: ARRAY
63137: PUSH
63138: LD_VAR 0 2
63142: ARRAY
63143: PUSH
63144: LD_INT 1
63146: ARRAY
63147: PPUSH
63148: LD_EXP 58
63152: PUSH
63153: LD_VAR 0 1
63157: ARRAY
63158: PUSH
63159: LD_VAR 0 2
63163: ARRAY
63164: PUSH
63165: LD_INT 2
63167: ARRAY
63168: PPUSH
63169: CALL_OW 428
63173: ST_TO_ADDR
// if not tmp then
63174: LD_VAR 0 4
63178: NOT
63179: IFFALSE 63183
// continue ;
63181: GO 62972
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63183: LD_VAR 0 4
63187: PUSH
63188: LD_INT 81
63190: PUSH
63191: LD_VAR 0 3
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PPUSH
63200: CALL_OW 69
63204: IN
63205: IFFALSE 63255
63207: PUSH
63208: LD_EXP 58
63212: PUSH
63213: LD_VAR 0 1
63217: ARRAY
63218: PUSH
63219: LD_VAR 0 2
63223: ARRAY
63224: PUSH
63225: LD_INT 1
63227: ARRAY
63228: PPUSH
63229: LD_EXP 58
63233: PUSH
63234: LD_VAR 0 1
63238: ARRAY
63239: PUSH
63240: LD_VAR 0 2
63244: ARRAY
63245: PUSH
63246: LD_INT 2
63248: ARRAY
63249: PPUSH
63250: CALL_OW 458
63254: AND
63255: IFFALSE 63349
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63257: LD_EXP 58
63261: PUSH
63262: LD_VAR 0 1
63266: ARRAY
63267: PUSH
63268: LD_VAR 0 2
63272: ARRAY
63273: PUSH
63274: LD_INT 1
63276: ARRAY
63277: PPUSH
63278: LD_EXP 58
63282: PUSH
63283: LD_VAR 0 1
63287: ARRAY
63288: PUSH
63289: LD_VAR 0 2
63293: ARRAY
63294: PUSH
63295: LD_INT 2
63297: ARRAY
63298: PPUSH
63299: LD_VAR 0 3
63303: PPUSH
63304: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63308: LD_ADDR_EXP 58
63312: PUSH
63313: LD_EXP 58
63317: PPUSH
63318: LD_VAR 0 1
63322: PPUSH
63323: LD_EXP 58
63327: PUSH
63328: LD_VAR 0 1
63332: ARRAY
63333: PPUSH
63334: LD_VAR 0 2
63338: PPUSH
63339: CALL_OW 3
63343: PPUSH
63344: CALL_OW 1
63348: ST_TO_ADDR
// end ; end ;
63349: GO 62972
63351: POP
63352: POP
// end ;
63353: GO 62885
63355: POP
63356: POP
// end ;
63357: PPOPN 4
63359: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
63360: LD_INT 0
63362: PPUSH
63363: PPUSH
63364: PPUSH
63365: PPUSH
// result := false ;
63366: LD_ADDR_VAR 0 4
63370: PUSH
63371: LD_INT 0
63373: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63374: LD_VAR 0 1
63378: PPUSH
63379: CALL_OW 264
63383: PUSH
63384: LD_INT 81
63386: EQUAL
63387: NOT
63388: IFFALSE 63392
// exit ;
63390: GO 63762
// side := GetSide ( unit ) ;
63392: LD_ADDR_VAR 0 6
63396: PUSH
63397: LD_VAR 0 1
63401: PPUSH
63402: CALL_OW 255
63406: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
63407: LD_ADDR_VAR 0 5
63411: PUSH
63412: LD_EXP 57
63416: PPUSH
63417: LD_VAR 0 1
63421: PPUSH
63422: CALL 20498 0 2
63426: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63427: LD_EXP 58
63431: PUSH
63432: LD_VAR 0 5
63436: ARRAY
63437: PUSH
63438: LD_EXP 59
63442: GREATEREQUAL
63443: IFFALSE 63447
// exit ;
63445: GO 63762
// ComMoveXY ( unit , x , y ) ;
63447: LD_VAR 0 1
63451: PPUSH
63452: LD_VAR 0 2
63456: PPUSH
63457: LD_VAR 0 3
63461: PPUSH
63462: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63466: LD_INT 35
63468: PPUSH
63469: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63473: LD_VAR 0 1
63477: PPUSH
63478: LD_VAR 0 2
63482: PPUSH
63483: LD_VAR 0 3
63487: PPUSH
63488: CALL 52544 0 3
63492: NOT
63493: IFFALSE 63506
63495: PUSH
63496: LD_VAR 0 1
63500: PPUSH
63501: CALL_OW 314
63505: AND
63506: IFFALSE 63510
// exit ;
63508: GO 63762
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63510: LD_VAR 0 2
63514: PPUSH
63515: LD_VAR 0 3
63519: PPUSH
63520: CALL_OW 428
63524: PUSH
63525: LD_VAR 0 1
63529: EQUAL
63530: IFFALSE 63544
63532: PUSH
63533: LD_VAR 0 1
63537: PPUSH
63538: CALL_OW 314
63542: NOT
63543: AND
63544: IFFALSE 63466
// if MineAtPos ( x , y ) then
63546: LD_VAR 0 2
63550: PPUSH
63551: LD_VAR 0 3
63555: PPUSH
63556: CALL_OW 458
63560: IFFALSE 63564
// exit ;
63562: GO 63762
// if your_side = side then
63564: LD_OWVAR 2
63568: PUSH
63569: LD_VAR 0 6
63573: EQUAL
63574: IFFALSE 63593
// PlaySoundXY ( x , y , PlantMine ) ;
63576: LD_VAR 0 2
63580: PPUSH
63581: LD_VAR 0 3
63585: PPUSH
63586: LD_STRING PlantMine
63588: PPUSH
63589: CALL_OW 366
// repeat wait ( 1 ) ;
63593: LD_INT 1
63595: PPUSH
63596: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
63600: LD_VAR 0 2
63604: PPUSH
63605: LD_VAR 0 3
63609: PPUSH
63610: LD_VAR 0 6
63614: PPUSH
63615: LD_INT 0
63617: PPUSH
63618: CALL_OW 454
63622: IFFALSE 63593
// if MineAtPos ( x , y ) then
63624: LD_VAR 0 2
63628: PPUSH
63629: LD_VAR 0 3
63633: PPUSH
63634: CALL_OW 458
63638: IFFALSE 63754
// begin for i in minerMinesList [ index ] do
63640: LD_ADDR_VAR 0 7
63644: PUSH
63645: LD_EXP 58
63649: PUSH
63650: LD_VAR 0 5
63654: ARRAY
63655: PUSH
63656: FOR_IN
63657: IFFALSE 63699
// if i [ 1 ] = x and i [ 2 ] = y then
63659: LD_VAR 0 7
63663: PUSH
63664: LD_INT 1
63666: ARRAY
63667: PUSH
63668: LD_VAR 0 2
63672: EQUAL
63673: IFFALSE 63691
63675: PUSH
63676: LD_VAR 0 7
63680: PUSH
63681: LD_INT 2
63683: ARRAY
63684: PUSH
63685: LD_VAR 0 3
63689: EQUAL
63690: AND
63691: IFFALSE 63697
// exit ;
63693: POP
63694: POP
63695: GO 63762
63697: GO 63656
63699: POP
63700: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63701: LD_ADDR_EXP 58
63705: PUSH
63706: LD_EXP 58
63710: PPUSH
63711: LD_VAR 0 5
63715: PUSH
63716: LD_EXP 58
63720: PUSH
63721: LD_VAR 0 5
63725: ARRAY
63726: PUSH
63727: LD_INT 1
63729: PLUS
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PPUSH
63735: LD_VAR 0 2
63739: PUSH
63740: LD_VAR 0 3
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PPUSH
63749: CALL 20715 0 3
63753: ST_TO_ADDR
// end ; result := true ;
63754: LD_ADDR_VAR 0 4
63758: PUSH
63759: LD_INT 1
63761: ST_TO_ADDR
// end ;
63762: LD_VAR 0 4
63766: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63767: LD_INT 0
63769: PPUSH
63770: PPUSH
63771: PPUSH
// if not unit in minersList then
63772: LD_VAR 0 1
63776: PUSH
63777: LD_EXP 57
63781: IN
63782: NOT
63783: IFFALSE 63787
// exit ;
63785: GO 63994
// index := GetElementIndex ( minersList , unit ) ;
63787: LD_ADDR_VAR 0 6
63791: PUSH
63792: LD_EXP 57
63796: PPUSH
63797: LD_VAR 0 1
63801: PPUSH
63802: CALL 20498 0 2
63806: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63807: LD_ADDR_VAR 0 5
63811: PUSH
63812: DOUBLE
63813: LD_EXP 58
63817: PUSH
63818: LD_VAR 0 6
63822: ARRAY
63823: INC
63824: ST_TO_ADDR
63825: LD_INT 1
63827: PUSH
63828: FOR_DOWNTO
63829: IFFALSE 63992
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63831: LD_EXP 58
63835: PUSH
63836: LD_VAR 0 6
63840: ARRAY
63841: PUSH
63842: LD_VAR 0 5
63846: ARRAY
63847: PUSH
63848: LD_INT 1
63850: ARRAY
63851: PPUSH
63852: LD_EXP 58
63856: PUSH
63857: LD_VAR 0 6
63861: ARRAY
63862: PUSH
63863: LD_VAR 0 5
63867: ARRAY
63868: PUSH
63869: LD_INT 2
63871: ARRAY
63872: PPUSH
63873: LD_VAR 0 2
63877: PPUSH
63878: LD_VAR 0 3
63882: PPUSH
63883: CALL_OW 298
63887: PUSH
63888: LD_INT 6
63890: LESS
63891: IFFALSE 63990
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63893: LD_EXP 58
63897: PUSH
63898: LD_VAR 0 6
63902: ARRAY
63903: PUSH
63904: LD_VAR 0 5
63908: ARRAY
63909: PUSH
63910: LD_INT 1
63912: ARRAY
63913: PPUSH
63914: LD_EXP 58
63918: PUSH
63919: LD_VAR 0 6
63923: ARRAY
63924: PUSH
63925: LD_VAR 0 5
63929: ARRAY
63930: PUSH
63931: LD_INT 2
63933: ARRAY
63934: PPUSH
63935: LD_VAR 0 1
63939: PPUSH
63940: CALL_OW 255
63944: PPUSH
63945: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63949: LD_ADDR_EXP 58
63953: PUSH
63954: LD_EXP 58
63958: PPUSH
63959: LD_VAR 0 6
63963: PPUSH
63964: LD_EXP 58
63968: PUSH
63969: LD_VAR 0 6
63973: ARRAY
63974: PPUSH
63975: LD_VAR 0 5
63979: PPUSH
63980: CALL_OW 3
63984: PPUSH
63985: CALL_OW 1
63989: ST_TO_ADDR
// end ; end ;
63990: GO 63828
63992: POP
63993: POP
// end ;
63994: LD_VAR 0 4
63998: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63999: LD_INT 0
64001: PPUSH
64002: PPUSH
64003: PPUSH
64004: PPUSH
64005: PPUSH
64006: PPUSH
64007: PPUSH
64008: PPUSH
64009: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64010: LD_VAR 0 1
64014: PPUSH
64015: CALL_OW 264
64019: PUSH
64020: LD_INT 81
64022: EQUAL
64023: NOT
64024: IFTRUE 64039
64026: PUSH
64027: LD_VAR 0 1
64031: PUSH
64032: LD_EXP 57
64036: IN
64037: NOT
64038: OR
64039: IFFALSE 64043
// exit ;
64041: GO 64369
// index := GetElementIndex ( minersList , unit ) ;
64043: LD_ADDR_VAR 0 6
64047: PUSH
64048: LD_EXP 57
64052: PPUSH
64053: LD_VAR 0 1
64057: PPUSH
64058: CALL 20498 0 2
64062: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64063: LD_ADDR_VAR 0 8
64067: PUSH
64068: LD_EXP 59
64072: PUSH
64073: LD_EXP 58
64077: PUSH
64078: LD_VAR 0 6
64082: ARRAY
64083: MINUS
64084: ST_TO_ADDR
// if not minesFreeAmount then
64085: LD_VAR 0 8
64089: NOT
64090: IFFALSE 64094
// exit ;
64092: GO 64369
// tmp := [ ] ;
64094: LD_ADDR_VAR 0 7
64098: PUSH
64099: EMPTY
64100: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64101: LD_ADDR_VAR 0 5
64105: PUSH
64106: DOUBLE
64107: LD_INT 1
64109: DEC
64110: ST_TO_ADDR
64111: LD_VAR 0 8
64115: PUSH
64116: FOR_TO
64117: IFFALSE 64316
// begin _d := rand ( 0 , 5 ) ;
64119: LD_ADDR_VAR 0 11
64123: PUSH
64124: LD_INT 0
64126: PPUSH
64127: LD_INT 5
64129: PPUSH
64130: CALL_OW 12
64134: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64135: LD_ADDR_VAR 0 12
64139: PUSH
64140: LD_INT 2
64142: PPUSH
64143: LD_INT 6
64145: PPUSH
64146: CALL_OW 12
64150: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64151: LD_ADDR_VAR 0 9
64155: PUSH
64156: LD_VAR 0 2
64160: PPUSH
64161: LD_VAR 0 11
64165: PPUSH
64166: LD_VAR 0 12
64170: PPUSH
64171: CALL_OW 272
64175: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64176: LD_ADDR_VAR 0 10
64180: PUSH
64181: LD_VAR 0 3
64185: PPUSH
64186: LD_VAR 0 11
64190: PPUSH
64191: LD_VAR 0 12
64195: PPUSH
64196: CALL_OW 273
64200: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64201: LD_VAR 0 9
64205: PPUSH
64206: LD_VAR 0 10
64210: PPUSH
64211: CALL_OW 488
64215: IFFALSE 64239
64217: PUSH
64218: LD_VAR 0 9
64222: PUSH
64223: LD_VAR 0 10
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_VAR 0 7
64236: IN
64237: NOT
64238: AND
64239: IFFALSE 64258
64241: PUSH
64242: LD_VAR 0 9
64246: PPUSH
64247: LD_VAR 0 10
64251: PPUSH
64252: CALL_OW 458
64256: NOT
64257: AND
64258: IFFALSE 64300
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64260: LD_ADDR_VAR 0 7
64264: PUSH
64265: LD_VAR 0 7
64269: PPUSH
64270: LD_VAR 0 7
64274: PUSH
64275: LD_INT 1
64277: PLUS
64278: PPUSH
64279: LD_VAR 0 9
64283: PUSH
64284: LD_VAR 0 10
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PPUSH
64293: CALL_OW 1
64297: ST_TO_ADDR
64298: GO 64314
// i := i - 1 ;
64300: LD_ADDR_VAR 0 5
64304: PUSH
64305: LD_VAR 0 5
64309: PUSH
64310: LD_INT 1
64312: MINUS
64313: ST_TO_ADDR
// end ;
64314: GO 64116
64316: POP
64317: POP
// for i in tmp do
64318: LD_ADDR_VAR 0 5
64322: PUSH
64323: LD_VAR 0 7
64327: PUSH
64328: FOR_IN
64329: IFFALSE 64367
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64331: LD_VAR 0 1
64335: PPUSH
64336: LD_VAR 0 5
64340: PUSH
64341: LD_INT 1
64343: ARRAY
64344: PPUSH
64345: LD_VAR 0 5
64349: PUSH
64350: LD_INT 2
64352: ARRAY
64353: PPUSH
64354: CALL 63360 0 3
64358: NOT
64359: IFFALSE 64365
// exit ;
64361: POP
64362: POP
64363: GO 64369
64365: GO 64328
64367: POP
64368: POP
// end ;
64369: LD_VAR 0 4
64373: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
64374: LD_INT 0
64376: PPUSH
64377: PPUSH
64378: PPUSH
64379: PPUSH
64380: PPUSH
64381: PPUSH
64382: PPUSH
64383: PPUSH
64384: PPUSH
// if GetClass ( unit ) <> class_sniper then
64385: LD_VAR 0 1
64389: PPUSH
64390: CALL_OW 257
64394: PUSH
64395: LD_INT 5
64397: NONEQUAL
64398: IFFALSE 64402
// exit ;
64400: GO 64872
// dist := 8 ;
64402: LD_ADDR_VAR 0 5
64406: PUSH
64407: LD_INT 8
64409: ST_TO_ADDR
// viewRange := 12 ;
64410: LD_ADDR_VAR 0 8
64414: PUSH
64415: LD_INT 12
64417: ST_TO_ADDR
// side := GetSide ( unit ) ;
64418: LD_ADDR_VAR 0 6
64422: PUSH
64423: LD_VAR 0 1
64427: PPUSH
64428: CALL_OW 255
64432: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64433: LD_INT 61
64435: PPUSH
64436: LD_VAR 0 6
64440: PPUSH
64441: CALL_OW 321
64445: PUSH
64446: LD_INT 2
64448: EQUAL
64449: IFFALSE 64459
// viewRange := 16 ;
64451: LD_ADDR_VAR 0 8
64455: PUSH
64456: LD_INT 16
64458: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64459: LD_VAR 0 1
64463: PPUSH
64464: LD_VAR 0 2
64468: PPUSH
64469: LD_VAR 0 3
64473: PPUSH
64474: CALL_OW 297
64478: PUSH
64479: LD_VAR 0 5
64483: GREATER
64484: IFFALSE 64563
// begin ComMoveXY ( unit , x , y ) ;
64486: LD_VAR 0 1
64490: PPUSH
64491: LD_VAR 0 2
64495: PPUSH
64496: LD_VAR 0 3
64500: PPUSH
64501: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64505: LD_INT 35
64507: PPUSH
64508: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64512: LD_VAR 0 1
64516: PPUSH
64517: LD_VAR 0 2
64521: PPUSH
64522: LD_VAR 0 3
64526: PPUSH
64527: CALL 52544 0 3
64531: NOT
64532: IFFALSE 64536
// exit ;
64534: GO 64872
// until GetDistUnitXY ( unit , x , y ) < dist ;
64536: LD_VAR 0 1
64540: PPUSH
64541: LD_VAR 0 2
64545: PPUSH
64546: LD_VAR 0 3
64550: PPUSH
64551: CALL_OW 297
64555: PUSH
64556: LD_VAR 0 5
64560: LESS
64561: IFFALSE 64505
// end ; ComTurnXY ( unit , x , y ) ;
64563: LD_VAR 0 1
64567: PPUSH
64568: LD_VAR 0 2
64572: PPUSH
64573: LD_VAR 0 3
64577: PPUSH
64578: CALL_OW 118
// repeat if Multiplayer then
64582: LD_OWVAR 4
64586: IFFALSE 64597
// wait ( 35 ) else
64588: LD_INT 35
64590: PPUSH
64591: CALL_OW 67
64595: GO 64604
// wait ( 5 ) ;
64597: LD_INT 5
64599: PPUSH
64600: CALL_OW 67
// _d := GetDir ( unit ) ;
64604: LD_ADDR_VAR 0 11
64608: PUSH
64609: LD_VAR 0 1
64613: PPUSH
64614: CALL_OW 254
64618: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
64619: LD_ADDR_VAR 0 7
64623: PUSH
64624: LD_VAR 0 1
64628: PPUSH
64629: CALL_OW 250
64633: PPUSH
64634: LD_VAR 0 1
64638: PPUSH
64639: CALL_OW 251
64643: PPUSH
64644: LD_VAR 0 2
64648: PPUSH
64649: LD_VAR 0 3
64653: PPUSH
64654: CALL 55180 0 4
64658: ST_TO_ADDR
// until dir = _d ;
64659: LD_VAR 0 7
64663: PUSH
64664: LD_VAR 0 11
64668: EQUAL
64669: IFFALSE 64582
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
64671: LD_ADDR_VAR 0 9
64675: PUSH
64676: LD_VAR 0 1
64680: PPUSH
64681: CALL_OW 250
64685: PPUSH
64686: LD_VAR 0 7
64690: PPUSH
64691: LD_VAR 0 5
64695: PPUSH
64696: CALL_OW 272
64700: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
64701: LD_ADDR_VAR 0 10
64705: PUSH
64706: LD_VAR 0 1
64710: PPUSH
64711: CALL_OW 251
64715: PPUSH
64716: LD_VAR 0 7
64720: PPUSH
64721: LD_VAR 0 5
64725: PPUSH
64726: CALL_OW 273
64730: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64731: LD_VAR 0 9
64735: PPUSH
64736: LD_VAR 0 10
64740: PPUSH
64741: CALL_OW 488
64745: NOT
64746: IFFALSE 64750
// exit ;
64748: GO 64872
// ComAnimCustom ( unit , 1 ) ;
64750: LD_VAR 0 1
64754: PPUSH
64755: LD_INT 1
64757: PPUSH
64758: CALL_OW 592
// p := 0 ;
64762: LD_ADDR_VAR 0 12
64766: PUSH
64767: LD_INT 0
64769: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64770: LD_VAR 0 9
64774: PPUSH
64775: LD_VAR 0 10
64779: PPUSH
64780: LD_VAR 0 6
64784: PPUSH
64785: LD_VAR 0 8
64789: PPUSH
64790: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
64794: LD_INT 35
64796: PPUSH
64797: CALL_OW 67
// p := Inc ( p ) ;
64801: LD_ADDR_VAR 0 12
64805: PUSH
64806: LD_VAR 0 12
64810: PPUSH
64811: CALL 55136 0 1
64815: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
64816: LD_VAR 0 12
64820: PUSH
64821: LD_INT 3
64823: EQUAL
64824: IFTRUE 64838
64826: PUSH
64827: LD_VAR 0 1
64831: PPUSH
64832: CALL_OW 302
64836: NOT
64837: OR
64838: IFTRUE 64851
64840: PUSH
64841: LD_VAR 0 1
64845: PPUSH
64846: CALL_OW 301
64850: OR
64851: IFFALSE 64794
// RemoveSeeing ( _x , _y , side ) ;
64853: LD_VAR 0 9
64857: PPUSH
64858: LD_VAR 0 10
64862: PPUSH
64863: LD_VAR 0 6
64867: PPUSH
64868: CALL_OW 331
// end ;
64872: LD_VAR 0 4
64876: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
64877: LD_INT 0
64879: PPUSH
64880: PPUSH
64881: PPUSH
64882: PPUSH
64883: PPUSH
64884: PPUSH
64885: PPUSH
64886: PPUSH
64887: PPUSH
64888: PPUSH
64889: PPUSH
// if not unit then
64890: LD_VAR 0 1
64894: NOT
64895: IFFALSE 64899
// exit ;
64897: GO 65170
// side := GetSide ( unit ) ;
64899: LD_ADDR_VAR 0 3
64903: PUSH
64904: LD_VAR 0 1
64908: PPUSH
64909: CALL_OW 255
64913: ST_TO_ADDR
// x := GetX ( unit ) ;
64914: LD_ADDR_VAR 0 5
64918: PUSH
64919: LD_VAR 0 1
64923: PPUSH
64924: CALL_OW 250
64928: ST_TO_ADDR
// y := GetY ( unit ) ;
64929: LD_ADDR_VAR 0 6
64933: PUSH
64934: LD_VAR 0 1
64938: PPUSH
64939: CALL_OW 251
64943: ST_TO_ADDR
// r := 8 ;
64944: LD_ADDR_VAR 0 4
64948: PUSH
64949: LD_INT 8
64951: ST_TO_ADDR
// if x - r < 0 then
64952: LD_VAR 0 5
64956: PUSH
64957: LD_VAR 0 4
64961: MINUS
64962: PUSH
64963: LD_INT 0
64965: LESS
64966: IFFALSE 64978
// min_x := 0 else
64968: LD_ADDR_VAR 0 7
64972: PUSH
64973: LD_INT 0
64975: ST_TO_ADDR
64976: GO 64994
// min_x := x - r ;
64978: LD_ADDR_VAR 0 7
64982: PUSH
64983: LD_VAR 0 5
64987: PUSH
64988: LD_VAR 0 4
64992: MINUS
64993: ST_TO_ADDR
// if y - r < 0 then
64994: LD_VAR 0 6
64998: PUSH
64999: LD_VAR 0 4
65003: MINUS
65004: PUSH
65005: LD_INT 0
65007: LESS
65008: IFFALSE 65020
// min_y := 0 else
65010: LD_ADDR_VAR 0 8
65014: PUSH
65015: LD_INT 0
65017: ST_TO_ADDR
65018: GO 65036
// min_y := y - r ;
65020: LD_ADDR_VAR 0 8
65024: PUSH
65025: LD_VAR 0 6
65029: PUSH
65030: LD_VAR 0 4
65034: MINUS
65035: ST_TO_ADDR
// max_x := x + r ;
65036: LD_ADDR_VAR 0 9
65040: PUSH
65041: LD_VAR 0 5
65045: PUSH
65046: LD_VAR 0 4
65050: PLUS
65051: ST_TO_ADDR
// max_y := y + r ;
65052: LD_ADDR_VAR 0 10
65056: PUSH
65057: LD_VAR 0 6
65061: PUSH
65062: LD_VAR 0 4
65066: PLUS
65067: ST_TO_ADDR
// for _x = min_x to max_x do
65068: LD_ADDR_VAR 0 11
65072: PUSH
65073: DOUBLE
65074: LD_VAR 0 7
65078: DEC
65079: ST_TO_ADDR
65080: LD_VAR 0 9
65084: PUSH
65085: FOR_TO
65086: IFFALSE 65168
// for _y = min_y to max_y do
65088: LD_ADDR_VAR 0 12
65092: PUSH
65093: DOUBLE
65094: LD_VAR 0 8
65098: DEC
65099: ST_TO_ADDR
65100: LD_VAR 0 10
65104: PUSH
65105: FOR_TO
65106: IFFALSE 65164
// begin if not ValidHex ( _x , _y ) then
65108: LD_VAR 0 11
65112: PPUSH
65113: LD_VAR 0 12
65117: PPUSH
65118: CALL_OW 488
65122: NOT
65123: IFFALSE 65127
// continue ;
65125: GO 65105
// if MineAtPos ( _x , _y ) then
65127: LD_VAR 0 11
65131: PPUSH
65132: LD_VAR 0 12
65136: PPUSH
65137: CALL_OW 458
65141: IFFALSE 65162
// ViewMineAtPos ( _x , _y , side ) ;
65143: LD_VAR 0 11
65147: PPUSH
65148: LD_VAR 0 12
65152: PPUSH
65153: LD_VAR 0 3
65157: PPUSH
65158: CALL_OW 457
// end ;
65162: GO 65105
65164: POP
65165: POP
65166: GO 65085
65168: POP
65169: POP
// end ;
65170: LD_VAR 0 2
65174: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
65175: LD_INT 0
65177: PPUSH
65178: PPUSH
65179: PPUSH
65180: PPUSH
65181: PPUSH
65182: PPUSH
// if not units then
65183: LD_VAR 0 1
65187: NOT
65188: IFFALSE 65192
// exit ;
65190: GO 65622
// scaners := [ ] ;
65192: LD_ADDR_VAR 0 6
65196: PUSH
65197: EMPTY
65198: ST_TO_ADDR
// for i in units do
65199: LD_ADDR_VAR 0 3
65203: PUSH
65204: LD_VAR 0 1
65208: PUSH
65209: FOR_IN
65210: IFFALSE 65367
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
65212: LD_VAR 0 3
65216: PPUSH
65217: CALL_OW 264
65221: PUSH
65222: LD_INT 11
65224: NONEQUAL
65225: IFTRUE 65239
65227: PUSH
65228: LD_VAR 0 3
65232: PPUSH
65233: CALL_OW 302
65237: NOT
65238: OR
65239: IFTRUE 65256
65241: PUSH
65242: LD_VAR 0 3
65246: PPUSH
65247: CALL_OW 110
65251: PUSH
65252: LD_INT 502
65254: EQUAL
65255: OR
65256: IFFALSE 65260
// continue ;
65258: GO 65209
// ComStop ( i ) ;
65260: LD_VAR 0 3
65264: PPUSH
65265: CALL_OW 141
// x := GetX ( i ) ;
65269: LD_ADDR_VAR 0 4
65273: PUSH
65274: LD_VAR 0 3
65278: PPUSH
65279: CALL_OW 250
65283: ST_TO_ADDR
// y := GetY ( i ) ;
65284: LD_ADDR_VAR 0 5
65288: PUSH
65289: LD_VAR 0 3
65293: PPUSH
65294: CALL_OW 251
65298: ST_TO_ADDR
// if GetSide ( i ) = your_side then
65299: LD_VAR 0 3
65303: PPUSH
65304: CALL_OW 255
65308: PUSH
65309: LD_OWVAR 2
65313: EQUAL
65314: IFFALSE 65333
// PlaySoundXY ( x , y , mineDetector ) ;
65316: LD_VAR 0 4
65320: PPUSH
65321: LD_VAR 0 5
65325: PPUSH
65326: LD_STRING mineDetector
65328: PPUSH
65329: CALL_OW 366
// scaners := Join ( scaners , i ) ;
65333: LD_ADDR_VAR 0 6
65337: PUSH
65338: LD_VAR 0 6
65342: PPUSH
65343: LD_VAR 0 3
65347: PPUSH
65348: CALL 53763 0 2
65352: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
65353: LD_VAR 0 3
65357: PPUSH
65358: LD_INT 502
65360: PPUSH
65361: CALL_OW 109
// end ;
65365: GO 65209
65367: POP
65368: POP
// if not scaners then
65369: LD_VAR 0 6
65373: NOT
65374: IFFALSE 65378
// exit ;
65376: GO 65622
// wait ( 3 ) ;
65378: LD_INT 3
65380: PPUSH
65381: CALL_OW 67
// timer := 6 ;
65385: LD_ADDR_VAR 0 7
65389: PUSH
65390: LD_INT 6
65392: ST_TO_ADDR
// repeat for i in scaners do
65393: LD_ADDR_VAR 0 3
65397: PUSH
65398: LD_VAR 0 6
65402: PUSH
65403: FOR_IN
65404: IFFALSE 65520
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
65406: LD_VAR 0 3
65410: PPUSH
65411: CALL_OW 302
65415: NOT
65416: IFTRUE 65429
65418: PUSH
65419: LD_VAR 0 3
65423: PPUSH
65424: CALL_OW 314
65428: OR
65429: IFTRUE 65460
65431: PUSH
65432: LD_VAR 0 3
65436: PPUSH
65437: CALL_OW 263
65441: PUSH
65442: LD_INT 1
65444: EQUAL
65445: IFFALSE 65459
65447: PUSH
65448: LD_VAR 0 3
65452: PPUSH
65453: CALL_OW 311
65457: NOT
65458: AND
65459: OR
65460: IFFALSE 65504
// begin SetUnitDisplayNumber ( i , 0 ) ;
65462: LD_VAR 0 3
65466: PPUSH
65467: LD_INT 0
65469: PPUSH
65470: CALL_OW 505
// SetTag ( i , 0 ) ;
65474: LD_VAR 0 3
65478: PPUSH
65479: LD_INT 0
65481: PPUSH
65482: CALL_OW 109
// scaners := scaners diff i ;
65486: LD_ADDR_VAR 0 6
65490: PUSH
65491: LD_VAR 0 6
65495: PUSH
65496: LD_VAR 0 3
65500: DIFF
65501: ST_TO_ADDR
// continue ;
65502: GO 65403
// end ; SetUnitDisplayNumber ( i , timer ) ;
65504: LD_VAR 0 3
65508: PPUSH
65509: LD_VAR 0 7
65513: PPUSH
65514: CALL_OW 505
// end ;
65518: GO 65403
65520: POP
65521: POP
// if not scaners then
65522: LD_VAR 0 6
65526: NOT
65527: IFFALSE 65531
// exit ;
65529: GO 65622
// timer := Dec ( timer ) ;
65531: LD_ADDR_VAR 0 7
65535: PUSH
65536: LD_VAR 0 7
65540: PPUSH
65541: CALL 55158 0 1
65545: ST_TO_ADDR
// wait ( 0 0$1 ) ;
65546: LD_INT 35
65548: PPUSH
65549: CALL_OW 67
// until timer = 0 ;
65553: LD_VAR 0 7
65557: PUSH
65558: LD_INT 0
65560: EQUAL
65561: IFFALSE 65393
// if not scaners then
65563: LD_VAR 0 6
65567: NOT
65568: IFFALSE 65572
// exit ;
65570: GO 65622
// for i in scaners do
65572: LD_ADDR_VAR 0 3
65576: PUSH
65577: LD_VAR 0 6
65581: PUSH
65582: FOR_IN
65583: IFFALSE 65620
// begin SetUnitDisplayNumber ( i , 0 ) ;
65585: LD_VAR 0 3
65589: PPUSH
65590: LD_INT 0
65592: PPUSH
65593: CALL_OW 505
// SetTag ( i , 0 ) ;
65597: LD_VAR 0 3
65601: PPUSH
65602: LD_INT 0
65604: PPUSH
65605: CALL_OW 109
// RevealDetectorMine ( i ) ;
65609: LD_VAR 0 3
65613: PPUSH
65614: CALL 64877 0 1
// end ;
65618: GO 65582
65620: POP
65621: POP
// end ;
65622: LD_VAR 0 2
65626: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
65627: LD_INT 0
65629: PPUSH
// if p1 = mine_detector_mode then
65630: LD_VAR 0 2
65634: PUSH
65635: LD_INT 103
65637: EQUAL
65638: IFFALSE 65649
// DetectMine ( units ) ;
65640: LD_VAR 0 1
65644: PPUSH
65645: CALL 65175 0 1
// end ; end_of_file
65649: LD_VAR 0 7
65653: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
65654: PPOPN 6
65656: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65657: LD_INT 0
65659: PPUSH
// begin if not units then
65660: LD_VAR 0 1
65664: NOT
65665: IFFALSE 65669
// exit ;
65667: GO 65703
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
65669: LD_VAR 0 1
65673: PPUSH
65674: LD_VAR 0 2
65678: PPUSH
65679: LD_VAR 0 3
65683: PPUSH
65684: LD_VAR 0 4
65688: PPUSH
65689: LD_VAR 0 5
65693: PPUSH
65694: LD_VAR 0 6
65698: PPUSH
65699: CALL 65627 0 6
// end ;
65703: PPOPN 7
65705: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
65706: LD_EXP 3
65710: PUSH
65711: LD_INT 4
65713: EQUAL
65714: IFFALSE 65750
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
65716: LD_STRING setGameDifficulty(
65718: PUSH
65719: LD_OWVAR 67
65723: STR
65724: PUSH
65725: LD_STRING )
65727: STR
65728: PPUSH
65729: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
65733: LD_STRING displayDifficulty(
65735: PUSH
65736: LD_OWVAR 67
65740: STR
65741: PUSH
65742: LD_STRING )
65744: STR
65745: PPUSH
65746: CALL_OW 559
// end ; SOS_MapStart ( ) ;
65750: CALL 65779 0 0
// end ; end_of_file
65754: PPOPN 1
65756: END
// every 0 0$1 do
65757: GO 65759
65759: DISABLE
// begin enable ;
65760: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
65761: LD_STRING updateTimer(
65763: PUSH
65764: LD_OWVAR 1
65768: STR
65769: PUSH
65770: LD_STRING );
65772: STR
65773: PPUSH
65774: CALL_OW 559
// end ;
65778: END
// export function SOS_MapStart ( ) ; begin
65779: LD_INT 0
65781: PPUSH
// UpdateFactoryWaypoints ( ) ;
65782: CALL 66713 0 0
// UpdateWarehouseGatheringPoints ( ) ;
65786: CALL 66965 0 0
// ParseMultiDataToLua ( ) ;
65790: CALL 67112 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
65794: LD_STRING setSpecLogoNumber(
65796: PUSH
65797: LD_INT 2
65799: STR
65800: PUSH
65801: LD_STRING ,
65803: STR
65804: PUSH
65805: LD_INT 1
65807: STR
65808: PUSH
65809: LD_STRING )
65811: STR
65812: PPUSH
65813: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
65817: LD_STRING setSpecLogoNumber(
65819: PUSH
65820: LD_INT 3
65822: STR
65823: PUSH
65824: LD_STRING ,
65826: STR
65827: PUSH
65828: LD_INT 2
65830: STR
65831: PUSH
65832: LD_STRING )
65834: STR
65835: PPUSH
65836: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
65840: LD_STRING setSpecLogoNumber(
65842: PUSH
65843: LD_INT 4
65845: STR
65846: PUSH
65847: LD_STRING ,
65849: STR
65850: PUSH
65851: LD_INT 3
65853: STR
65854: PUSH
65855: LD_STRING )
65857: STR
65858: PPUSH
65859: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
65863: LD_STRING setSpecLogoNumber(
65865: PUSH
65866: LD_INT 5
65868: STR
65869: PUSH
65870: LD_STRING ,
65872: STR
65873: PUSH
65874: LD_INT 4
65876: STR
65877: PUSH
65878: LD_STRING )
65880: STR
65881: PPUSH
65882: CALL_OW 559
// end ;
65886: LD_VAR 0 1
65890: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
65891: LD_INT 0
65893: PPUSH
65894: PPUSH
65895: PPUSH
65896: PPUSH
65897: PPUSH
65898: PPUSH
65899: PPUSH
65900: PPUSH
65901: PPUSH
// for i := 1 to 8 do
65902: LD_ADDR_VAR 0 2
65906: PUSH
65907: DOUBLE
65908: LD_INT 1
65910: DEC
65911: ST_TO_ADDR
65912: LD_INT 8
65914: PUSH
65915: FOR_TO
65916: IFFALSE 66301
// begin if mpSidePositions [ i ] then
65918: LD_EXP 7
65922: PUSH
65923: LD_VAR 0 2
65927: ARRAY
65928: IFFALSE 66299
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
65930: LD_ADDR_VAR 0 7
65934: PUSH
65935: LD_INT 22
65937: PUSH
65938: LD_VAR 0 2
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 21
65949: PUSH
65950: LD_INT 1
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PPUSH
65961: CALL_OW 69
65965: PPUSH
65966: CALL 17797 0 1
65970: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65971: LD_ADDR_VAR 0 9
65975: PUSH
65976: LD_INT 22
65978: PUSH
65979: LD_VAR 0 2
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 2
65990: PUSH
65991: LD_INT 30
65993: PUSH
65994: LD_INT 0
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 30
66003: PUSH
66004: LD_INT 1
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: LIST
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PPUSH
66020: CALL_OW 69
66024: ST_TO_ADDR
// crates := 0 ;
66025: LD_ADDR_VAR 0 4
66029: PUSH
66030: LD_INT 0
66032: ST_TO_ADDR
// oil := 0 ;
66033: LD_ADDR_VAR 0 5
66037: PUSH
66038: LD_INT 0
66040: ST_TO_ADDR
// sib := 0 ;
66041: LD_ADDR_VAR 0 6
66045: PUSH
66046: LD_INT 0
66048: ST_TO_ADDR
// if bases then
66049: LD_VAR 0 9
66053: IFFALSE 66159
// begin for j in bases do
66055: LD_ADDR_VAR 0 3
66059: PUSH
66060: LD_VAR 0 9
66064: PUSH
66065: FOR_IN
66066: IFFALSE 66157
// begin base := GetBase ( j ) ;
66068: LD_ADDR_VAR 0 8
66072: PUSH
66073: LD_VAR 0 3
66077: PPUSH
66078: CALL_OW 274
66082: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
66083: LD_ADDR_VAR 0 4
66087: PUSH
66088: LD_VAR 0 4
66092: PUSH
66093: LD_VAR 0 8
66097: PPUSH
66098: LD_INT 1
66100: PPUSH
66101: CALL_OW 275
66105: PLUS
66106: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
66107: LD_ADDR_VAR 0 5
66111: PUSH
66112: LD_VAR 0 5
66116: PUSH
66117: LD_VAR 0 8
66121: PPUSH
66122: LD_INT 2
66124: PPUSH
66125: CALL_OW 275
66129: PLUS
66130: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
66131: LD_ADDR_VAR 0 6
66135: PUSH
66136: LD_VAR 0 6
66140: PUSH
66141: LD_VAR 0 8
66145: PPUSH
66146: LD_INT 3
66148: PPUSH
66149: CALL_OW 275
66153: PLUS
66154: ST_TO_ADDR
// end ;
66155: GO 66065
66157: POP
66158: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
66159: LD_STRING setSpecText(
66161: PUSH
66162: LD_VAR 0 2
66166: STR
66167: PUSH
66168: LD_STRING ,
66170: STR
66171: PUSH
66172: LD_INT 2
66174: STR
66175: PUSH
66176: LD_STRING ,
66178: STR
66179: PUSH
66180: LD_VAR 0 4
66184: STR
66185: PUSH
66186: LD_STRING )
66188: STR
66189: PPUSH
66190: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
66194: LD_STRING setSpecText(
66196: PUSH
66197: LD_VAR 0 2
66201: STR
66202: PUSH
66203: LD_STRING ,
66205: STR
66206: PUSH
66207: LD_INT 3
66209: STR
66210: PUSH
66211: LD_STRING ,
66213: STR
66214: PUSH
66215: LD_VAR 0 5
66219: STR
66220: PUSH
66221: LD_STRING )
66223: STR
66224: PPUSH
66225: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
66229: LD_STRING setSpecText(
66231: PUSH
66232: LD_VAR 0 2
66236: STR
66237: PUSH
66238: LD_STRING ,
66240: STR
66241: PUSH
66242: LD_INT 4
66244: STR
66245: PUSH
66246: LD_STRING ,
66248: STR
66249: PUSH
66250: LD_VAR 0 6
66254: STR
66255: PUSH
66256: LD_STRING )
66258: STR
66259: PPUSH
66260: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
66264: LD_STRING setSpecText(
66266: PUSH
66267: LD_VAR 0 2
66271: STR
66272: PUSH
66273: LD_STRING ,
66275: STR
66276: PUSH
66277: LD_INT 5
66279: STR
66280: PUSH
66281: LD_STRING ,
66283: STR
66284: PUSH
66285: LD_VAR 0 7
66289: STR
66290: PUSH
66291: LD_STRING )
66293: STR
66294: PPUSH
66295: CALL_OW 559
// end ; end ;
66299: GO 65915
66301: POP
66302: POP
// end ;
66303: LD_VAR 0 1
66307: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
66308: LD_INT 2
66310: PUSH
66311: LD_INT 30
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 30
66323: PUSH
66324: LD_INT 1
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: LIST
66335: PPUSH
66336: CALL_OW 69
66340: IFFALSE 66350
66342: GO 66344
66344: DISABLE
// begin enable ;
66345: ENABLE
// UpdateSpectatorBar ;
66346: CALL 65891 0 0
// end ;
66350: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66351: LD_INT 0
66353: PPUSH
// end ;
66354: LD_VAR 0 12
66358: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
66359: LD_INT 0
66361: PPUSH
66362: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
66363: LD_VAR 0 1
66367: NOT
66368: IFTRUE 66387
66370: PUSH
66371: LD_VAR 0 2
66375: PPUSH
66376: LD_VAR 0 3
66380: PPUSH
66381: CALL_OW 488
66385: NOT
66386: OR
66387: IFTRUE 66422
66389: PUSH
66390: LD_VAR 0 1
66394: PPUSH
66395: CALL_OW 266
66399: PUSH
66400: LD_INT 3
66402: NONEQUAL
66403: IFFALSE 66421
66405: PUSH
66406: LD_VAR 0 1
66410: PPUSH
66411: CALL_OW 247
66415: PUSH
66416: LD_INT 1
66418: EQUAL
66419: NOT
66420: AND
66421: OR
66422: IFFALSE 66426
// exit ;
66424: GO 66708
// if GetType ( factory ) = unit_human then
66426: LD_VAR 0 1
66430: PPUSH
66431: CALL_OW 247
66435: PUSH
66436: LD_INT 1
66438: EQUAL
66439: IFFALSE 66456
// factory := IsInUnit ( factory ) ;
66441: LD_ADDR_VAR 0 1
66445: PUSH
66446: LD_VAR 0 1
66450: PPUSH
66451: CALL_OW 310
66455: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
66456: LD_VAR 0 1
66460: PPUSH
66461: CALL_OW 266
66465: PUSH
66466: LD_INT 3
66468: NONEQUAL
66469: IFFALSE 66473
// exit ;
66471: GO 66708
// for i := 1 to Count ( factoryWaypoints ) do
66473: LD_ADDR_VAR 0 5
66477: PUSH
66478: DOUBLE
66479: LD_INT 1
66481: DEC
66482: ST_TO_ADDR
66483: LD_EXP 60
66487: PPUSH
66488: CALL 17797 0 1
66492: PUSH
66493: FOR_TO
66494: IFFALSE 66656
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
66496: LD_VAR 0 2
66500: PPUSH
66501: LD_VAR 0 3
66505: PPUSH
66506: CALL_OW 428
66510: PUSH
66511: LD_EXP 60
66515: PUSH
66516: LD_VAR 0 5
66520: ARRAY
66521: PUSH
66522: LD_INT 2
66524: ARRAY
66525: EQUAL
66526: IFFALSE 66558
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
66528: LD_ADDR_EXP 60
66532: PUSH
66533: LD_EXP 60
66537: PPUSH
66538: LD_VAR 0 5
66542: PPUSH
66543: CALL_OW 3
66547: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66548: CALL 66713 0 0
// exit ;
66552: POP
66553: POP
66554: GO 66708
// end else
66556: GO 66654
// if factory = factoryWaypoints [ i ] [ 2 ] then
66558: LD_VAR 0 1
66562: PUSH
66563: LD_EXP 60
66567: PUSH
66568: LD_VAR 0 5
66572: ARRAY
66573: PUSH
66574: LD_INT 2
66576: ARRAY
66577: EQUAL
66578: IFFALSE 66654
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
66580: LD_ADDR_EXP 60
66584: PUSH
66585: LD_EXP 60
66589: PPUSH
66590: LD_VAR 0 5
66594: PPUSH
66595: CALL_OW 3
66599: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
66600: LD_ADDR_EXP 60
66604: PUSH
66605: LD_EXP 60
66609: PPUSH
66610: LD_VAR 0 1
66614: PPUSH
66615: CALL_OW 255
66619: PUSH
66620: LD_VAR 0 1
66624: PUSH
66625: LD_VAR 0 2
66629: PUSH
66630: LD_VAR 0 3
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: PPUSH
66641: CALL 53763 0 2
66645: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66646: CALL 66713 0 0
// exit ;
66650: POP
66651: POP
66652: GO 66708
// end ; end ;
66654: GO 66493
66656: POP
66657: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
66658: LD_ADDR_EXP 60
66662: PUSH
66663: LD_EXP 60
66667: PPUSH
66668: LD_VAR 0 1
66672: PPUSH
66673: CALL_OW 255
66677: PUSH
66678: LD_VAR 0 1
66682: PUSH
66683: LD_VAR 0 2
66687: PUSH
66688: LD_VAR 0 3
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: PPUSH
66699: CALL 53763 0 2
66703: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66704: CALL 66713 0 0
// end ;
66708: LD_VAR 0 4
66712: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
66713: LD_INT 0
66715: PPUSH
66716: PPUSH
66717: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
66718: LD_STRING resetFactoryWaypoint();
66720: PPUSH
66721: CALL_OW 559
// if factoryWaypoints then
66725: LD_EXP 60
66729: IFFALSE 66850
// begin list := factoryWaypoints ;
66731: LD_ADDR_VAR 0 3
66735: PUSH
66736: LD_EXP 60
66740: ST_TO_ADDR
// for i := 1 to list do
66741: LD_ADDR_VAR 0 2
66745: PUSH
66746: DOUBLE
66747: LD_INT 1
66749: DEC
66750: ST_TO_ADDR
66751: LD_VAR 0 3
66755: PUSH
66756: FOR_TO
66757: IFFALSE 66848
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66759: LD_STRING setFactoryWaypointXY(
66761: PUSH
66762: LD_VAR 0 3
66766: PUSH
66767: LD_VAR 0 2
66771: ARRAY
66772: PUSH
66773: LD_INT 1
66775: ARRAY
66776: STR
66777: PUSH
66778: LD_STRING ,
66780: STR
66781: PUSH
66782: LD_VAR 0 3
66786: PUSH
66787: LD_VAR 0 2
66791: ARRAY
66792: PUSH
66793: LD_INT 2
66795: ARRAY
66796: STR
66797: PUSH
66798: LD_STRING ,
66800: STR
66801: PUSH
66802: LD_VAR 0 3
66806: PUSH
66807: LD_VAR 0 2
66811: ARRAY
66812: PUSH
66813: LD_INT 3
66815: ARRAY
66816: STR
66817: PUSH
66818: LD_STRING ,
66820: STR
66821: PUSH
66822: LD_VAR 0 3
66826: PUSH
66827: LD_VAR 0 2
66831: ARRAY
66832: PUSH
66833: LD_INT 4
66835: ARRAY
66836: STR
66837: PUSH
66838: LD_STRING )
66840: STR
66841: PPUSH
66842: CALL_OW 559
66846: GO 66756
66848: POP
66849: POP
// end ; end ;
66850: LD_VAR 0 1
66854: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
66855: LD_INT 0
66857: PPUSH
// if HexInfo ( x , y ) = warehouse then
66858: LD_VAR 0 2
66862: PPUSH
66863: LD_VAR 0 3
66867: PPUSH
66868: CALL_OW 428
66872: PUSH
66873: LD_VAR 0 1
66877: EQUAL
66878: IFFALSE 66905
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
66880: LD_ADDR_EXP 62
66884: PUSH
66885: LD_EXP 62
66889: PPUSH
66890: LD_VAR 0 1
66894: PPUSH
66895: LD_INT 0
66897: PPUSH
66898: CALL_OW 1
66902: ST_TO_ADDR
66903: GO 66956
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
66905: LD_ADDR_EXP 62
66909: PUSH
66910: LD_EXP 62
66914: PPUSH
66915: LD_VAR 0 1
66919: PPUSH
66920: LD_VAR 0 1
66924: PPUSH
66925: CALL_OW 255
66929: PUSH
66930: LD_VAR 0 1
66934: PUSH
66935: LD_VAR 0 2
66939: PUSH
66940: LD_VAR 0 3
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: PPUSH
66951: CALL_OW 1
66955: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
66956: CALL 66965 0 0
// end ;
66960: LD_VAR 0 4
66964: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
66965: LD_INT 0
66967: PPUSH
66968: PPUSH
66969: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
66970: LD_STRING resetWarehouseGatheringPoints();
66972: PPUSH
66973: CALL_OW 559
// if warehouseGatheringPoints then
66977: LD_EXP 62
66981: IFFALSE 67107
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
66983: LD_ADDR_VAR 0 3
66987: PUSH
66988: LD_EXP 62
66992: PPUSH
66993: CALL 57697 0 1
66997: ST_TO_ADDR
// for i := 1 to list do
66998: LD_ADDR_VAR 0 2
67002: PUSH
67003: DOUBLE
67004: LD_INT 1
67006: DEC
67007: ST_TO_ADDR
67008: LD_VAR 0 3
67012: PUSH
67013: FOR_TO
67014: IFFALSE 67105
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67016: LD_STRING setWarehouseGatheringPointXY(
67018: PUSH
67019: LD_VAR 0 3
67023: PUSH
67024: LD_VAR 0 2
67028: ARRAY
67029: PUSH
67030: LD_INT 1
67032: ARRAY
67033: STR
67034: PUSH
67035: LD_STRING ,
67037: STR
67038: PUSH
67039: LD_VAR 0 3
67043: PUSH
67044: LD_VAR 0 2
67048: ARRAY
67049: PUSH
67050: LD_INT 2
67052: ARRAY
67053: STR
67054: PUSH
67055: LD_STRING ,
67057: STR
67058: PUSH
67059: LD_VAR 0 3
67063: PUSH
67064: LD_VAR 0 2
67068: ARRAY
67069: PUSH
67070: LD_INT 3
67072: ARRAY
67073: STR
67074: PUSH
67075: LD_STRING ,
67077: STR
67078: PUSH
67079: LD_VAR 0 3
67083: PUSH
67084: LD_VAR 0 2
67088: ARRAY
67089: PUSH
67090: LD_INT 4
67092: ARRAY
67093: STR
67094: PUSH
67095: LD_STRING )
67097: STR
67098: PPUSH
67099: CALL_OW 559
67103: GO 67013
67105: POP
67106: POP
// end ; end ;
67107: LD_VAR 0 1
67111: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
67112: LD_INT 0
67114: PPUSH
67115: PPUSH
// if not mpSidePositions then
67116: LD_EXP 7
67120: NOT
67121: IFFALSE 67125
// exit ;
67123: GO 67196
// result :=  ;
67125: LD_ADDR_VAR 0 1
67129: PUSH
67130: LD_STRING 
67132: ST_TO_ADDR
// for i := 1 to 8 do
67133: LD_ADDR_VAR 0 2
67137: PUSH
67138: DOUBLE
67139: LD_INT 1
67141: DEC
67142: ST_TO_ADDR
67143: LD_INT 8
67145: PUSH
67146: FOR_TO
67147: IFFALSE 67177
// begin result := result & mpSidePositions [ i ] & ; ;
67149: LD_ADDR_VAR 0 1
67153: PUSH
67154: LD_VAR 0 1
67158: PUSH
67159: LD_EXP 7
67163: PUSH
67164: LD_VAR 0 2
67168: ARRAY
67169: STR
67170: PUSH
67171: LD_STRING ;
67173: STR
67174: ST_TO_ADDR
// end ;
67175: GO 67146
67177: POP
67178: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
67179: LD_STRING setMultiplayerRealPosition("
67181: PUSH
67182: LD_VAR 0 1
67186: STR
67187: PUSH
67188: LD_STRING ");
67190: STR
67191: PPUSH
67192: CALL_OW 559
// end ;
67196: LD_VAR 0 1
67200: RET
