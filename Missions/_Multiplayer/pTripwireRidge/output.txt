// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2804 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3227 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 100
 809: PUSH
 810: LD_INT 120
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 8
 838: PUSH
 839: LD_INT 9
 841: PUSH
 842: LD_INT 7
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 10
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: EMPTY
 871: LIST
 872: PUSH
 873: LD_EXP 19
 877: UNION
 878: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 879: LD_VAR 0 1
 883: PUSH
 884: LD_INT 2
 886: EQUAL
 887: IFFALSE 899
// baseLevel := 1 else
 889: LD_ADDR_VAR 0 7
 893: PUSH
 894: LD_INT 1
 896: ST_TO_ADDR
 897: GO 913
// baseLevel := mpGameSettings [ 1 ] ;
 899: LD_ADDR_VAR 0 7
 903: PUSH
 904: LD_EXP 6
 908: PUSH
 909: LD_INT 1
 911: ARRAY
 912: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 913: LD_ADDR_EXP 24
 917: PUSH
 918: LD_EXP 6
 922: PUSH
 923: LD_INT 2
 925: ARRAY
 926: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 927: LD_ADDR_EXP 25
 931: PUSH
 932: LD_EXP 6
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 941: LD_ADDR_EXP 15
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 4
 953: ARRAY
 954: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 955: LD_ADDR_EXP 27
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 5
 967: ARRAY
 968: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 969: LD_ADDR_VAR 0 5
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 6
 981: ARRAY
 982: PUSH
 983: LD_INT 0
 985: GREATER
 986: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 987: LD_ADDR_VAR 0 6
 991: PUSH
 992: LD_EXP 6
 996: PUSH
 997: LD_INT 7
 999: ARRAY
1000: PUSH
1001: LD_INT 0
1003: GREATER
1004: ST_TO_ADDR
// mpKingArea := 0 ;
1005: LD_ADDR_EXP 34
1009: PUSH
1010: LD_INT 0
1012: ST_TO_ADDR
// mpPoints := 0 ;
1013: LD_ADDR_EXP 35
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpEmissions := 0 ;
1021: LD_ADDR_EXP 37
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// kingArea := 0 ;
1029: LD_ADDR_EXP 1
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingCamArea := 0 ;
1037: LD_ADDR_EXP 2
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1045: LD_EXP 6
1049: PUSH
1050: LD_INT 9
1052: ARRAY
1053: IFFALSE 1185
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1055: LD_ADDR_EXP 36
1059: PUSH
1060: LD_INT 1
1062: PUSH
1063: LD_INT 1
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 2
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 1
1080: PUSH
1081: LD_INT 1
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 3
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PUSH
1100: LD_INT 12
1102: PUSH
1103: LD_INT 1
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: LD_INT 24
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: LD_INT 12
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 23
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 21
1142: PUSH
1143: LD_INT 1
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: LD_INT 42
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 21
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: LD_INT 42
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1185: LD_ADDR_EXP 16
1189: PUSH
1190: LD_EXP 6
1194: PUSH
1195: LD_INT 11
1197: ARRAY
1198: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1199: LD_ADDR_EXP 22
1203: PUSH
1204: LD_EXP 6
1208: PUSH
1209: LD_INT 12
1211: ARRAY
1212: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1213: LD_ADDR_EXP 26
1217: PUSH
1218: LD_EXP 6
1222: PUSH
1223: LD_INT 13
1225: ARRAY
1226: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1227: LD_ADDR_EXP 33
1231: PUSH
1232: LD_EXP 6
1236: PUSH
1237: LD_INT 14
1239: ARRAY
1240: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1241: LD_ADDR_EXP 30
1245: PUSH
1246: LD_EXP 6
1250: PUSH
1251: LD_INT 15
1253: ARRAY
1254: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1255: LD_ADDR_EXP 28
1259: PUSH
1260: LD_EXP 6
1264: PUSH
1265: LD_INT 18
1267: ARRAY
1268: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1269: LD_ADDR_EXP 20
1273: PUSH
1274: LD_EXP 6
1278: PUSH
1279: LD_INT 21
1281: ARRAY
1282: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1283: LD_ADDR_EXP 31
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: LD_INT 2
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 4
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 6
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1314: LD_ADDR_VAR 0 8
1318: PUSH
1319: LD_INT 15
1321: PPUSH
1322: LD_INT 2
1324: PPUSH
1325: CALL 54259 0 2
1329: PUSH
1330: LD_INT 16
1332: PPUSH
1333: LD_INT 1
1335: PPUSH
1336: CALL 54259 0 2
1340: PUSH
1341: LD_INT 17
1343: PPUSH
1344: LD_INT 2
1346: PPUSH
1347: CALL 54259 0 2
1351: PUSH
1352: LD_INT 18
1354: PPUSH
1355: LD_INT 4
1357: PPUSH
1358: CALL 54259 0 2
1362: PUSH
1363: LD_INT 19
1365: PPUSH
1366: LD_INT 4
1368: PPUSH
1369: CALL 54259 0 2
1373: PUSH
1374: LD_INT 20
1376: PPUSH
1377: LD_INT 5
1379: PPUSH
1380: CALL 54259 0 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1393: LD_ADDR_VAR 0 3
1397: PUSH
1398: DOUBLE
1399: LD_INT 1
1401: DEC
1402: ST_TO_ADDR
1403: LD_VAR 0 8
1407: PPUSH
1408: CALL 13564 0 1
1412: PUSH
1413: FOR_TO
1414: IFFALSE 1518
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1416: LD_ADDR_EXP 21
1420: PUSH
1421: LD_EXP 21
1425: PPUSH
1426: LD_VAR 0 3
1430: PPUSH
1431: LD_VAR 0 8
1435: PUSH
1436: LD_VAR 0 3
1440: ARRAY
1441: PUSH
1442: LD_INT 1
1444: ARRAY
1445: PPUSH
1446: LD_VAR 0 8
1450: PUSH
1451: LD_VAR 0 3
1455: ARRAY
1456: PUSH
1457: LD_INT 3
1459: ARRAY
1460: PPUSH
1461: LD_INT 10
1463: PPUSH
1464: CALL_OW 272
1468: PUSH
1469: LD_VAR 0 8
1473: PUSH
1474: LD_VAR 0 3
1478: ARRAY
1479: PUSH
1480: LD_INT 2
1482: ARRAY
1483: PPUSH
1484: LD_VAR 0 8
1488: PUSH
1489: LD_VAR 0 3
1493: ARRAY
1494: PUSH
1495: LD_INT 3
1497: ARRAY
1498: PPUSH
1499: LD_INT 10
1501: PPUSH
1502: CALL_OW 273
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 1
1515: ST_TO_ADDR
1516: GO 1413
1518: POP
1519: POP
// if hasOil then
1520: LD_VAR 0 5
1524: IFFALSE 1635
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1526: LD_ADDR_VAR 0 4
1530: PUSH
1531: LD_EXP 6
1535: PUSH
1536: LD_INT 6
1538: ARRAY
1539: PUSH
1540: LD_INT 2
1542: EQUAL
1543: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1544: LD_ADDR_EXP 12
1548: PUSH
1549: LD_INT 21
1551: PPUSH
1552: LD_VAR 0 4
1556: PPUSH
1557: CALL 54092 0 2
1561: PUSH
1562: LD_INT 26
1564: PPUSH
1565: LD_VAR 0 4
1569: PPUSH
1570: CALL 54092 0 2
1574: PUSH
1575: LD_INT 31
1577: PPUSH
1578: LD_VAR 0 4
1582: PPUSH
1583: CALL 54092 0 2
1587: PUSH
1588: LD_INT 36
1590: PPUSH
1591: LD_VAR 0 4
1595: PPUSH
1596: CALL 54092 0 2
1600: PUSH
1601: LD_INT 41
1603: PPUSH
1604: LD_VAR 0 4
1608: PPUSH
1609: CALL 54092 0 2
1613: PUSH
1614: LD_INT 46
1616: PPUSH
1617: LD_VAR 0 4
1621: PPUSH
1622: CALL 54092 0 2
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: ST_TO_ADDR
// end ; if hasSib then
1635: LD_VAR 0 6
1639: IFFALSE 1750
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1641: LD_ADDR_VAR 0 4
1645: PUSH
1646: LD_EXP 6
1650: PUSH
1651: LD_INT 7
1653: ARRAY
1654: PUSH
1655: LD_INT 2
1657: EQUAL
1658: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1659: LD_ADDR_EXP 13
1663: PUSH
1664: LD_INT 22
1666: PPUSH
1667: LD_VAR 0 4
1671: PPUSH
1672: CALL 54092 0 2
1676: PUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_VAR 0 4
1684: PPUSH
1685: CALL 54092 0 2
1689: PUSH
1690: LD_INT 32
1692: PPUSH
1693: LD_VAR 0 4
1697: PPUSH
1698: CALL 54092 0 2
1702: PUSH
1703: LD_INT 37
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL 54092 0 2
1715: PUSH
1716: LD_INT 42
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: CALL 54092 0 2
1728: PUSH
1729: LD_INT 47
1731: PPUSH
1732: LD_VAR 0 4
1736: PPUSH
1737: CALL 54092 0 2
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1750: LD_VAR 0 7
1754: PUSH
1755: LD_INT 1
1757: GREATEREQUAL
1758: IFFALSE 1770
// mpDepots := startPos ;
1760: LD_ADDR_EXP 14
1764: PUSH
1765: LD_VAR 0 8
1769: ST_TO_ADDR
// if baseLevel >= 2 then
1770: LD_VAR 0 7
1774: PUSH
1775: LD_INT 2
1777: GREATEREQUAL
1778: IFFALSE 2093
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1780: LD_ADDR_EXP 17
1784: PUSH
1785: LD_INT 31
1787: PUSH
1788: LD_INT 23
1790: PPUSH
1791: LD_INT 5
1793: PPUSH
1794: CALL 54259 0 2
1798: ADD
1799: PUSH
1800: LD_INT 31
1802: PUSH
1803: LD_INT 24
1805: PPUSH
1806: LD_INT 5
1808: PPUSH
1809: CALL 54259 0 2
1813: ADD
1814: PUSH
1815: LD_INT 4
1817: PUSH
1818: LD_INT 25
1820: PPUSH
1821: LD_INT 5
1823: PPUSH
1824: CALL 54259 0 2
1828: ADD
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 31
1837: PUSH
1838: LD_INT 28
1840: PPUSH
1841: LD_INT 4
1843: PPUSH
1844: CALL 54259 0 2
1848: ADD
1849: PUSH
1850: LD_INT 31
1852: PUSH
1853: LD_INT 29
1855: PPUSH
1856: LD_INT 4
1858: PPUSH
1859: CALL 54259 0 2
1863: ADD
1864: PUSH
1865: LD_INT 4
1867: PUSH
1868: LD_INT 30
1870: PPUSH
1871: LD_INT 4
1873: PPUSH
1874: CALL 54259 0 2
1878: ADD
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 31
1887: PUSH
1888: LD_INT 33
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL 54259 0 2
1898: ADD
1899: PUSH
1900: LD_INT 31
1902: PUSH
1903: LD_INT 34
1905: PPUSH
1906: LD_INT 5
1908: PPUSH
1909: CALL 54259 0 2
1913: ADD
1914: PUSH
1915: LD_INT 4
1917: PUSH
1918: LD_INT 35
1920: PPUSH
1921: LD_INT 0
1923: PPUSH
1924: CALL 54259 0 2
1928: ADD
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 31
1937: PUSH
1938: LD_INT 38
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL 54259 0 2
1948: ADD
1949: PUSH
1950: LD_INT 31
1952: PUSH
1953: LD_INT 39
1955: PPUSH
1956: LD_INT 0
1958: PPUSH
1959: CALL 54259 0 2
1963: ADD
1964: PUSH
1965: LD_INT 4
1967: PUSH
1968: LD_INT 40
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL 54259 0 2
1978: ADD
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 31
1987: PUSH
1988: LD_INT 43
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: CALL 54259 0 2
1998: ADD
1999: PUSH
2000: LD_INT 31
2002: PUSH
2003: LD_INT 44
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL 54259 0 2
2013: ADD
2014: PUSH
2015: LD_INT 4
2017: PUSH
2018: LD_INT 45
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: CALL 54259 0 2
2028: ADD
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 31
2037: PUSH
2038: LD_INT 49
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: CALL 54259 0 2
2048: ADD
2049: PUSH
2050: LD_INT 31
2052: PUSH
2053: LD_INT 50
2055: PPUSH
2056: LD_INT 2
2058: PPUSH
2059: CALL 54259 0 2
2063: ADD
2064: PUSH
2065: LD_INT 4
2067: PUSH
2068: LD_INT 48
2070: PPUSH
2071: LD_INT 2
2073: PPUSH
2074: CALL 54259 0 2
2078: ADD
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: ST_TO_ADDR
// end ; end ;
2093: LD_VAR 0 2
2097: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2098: GO 2100
2100: DISABLE
2101: LD_INT 0
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
// begin if not mpShipments then
2111: LD_EXP 27
2115: NOT
2116: IFFALSE 2120
// exit ;
2118: GO 2641
// case mpShipments of 1 :
2120: LD_EXP 27
2124: PUSH
2125: LD_INT 1
2127: DOUBLE
2128: EQUAL
2129: IFTRUE 2133
2131: GO 2168
2133: POP
// begin time := 0 0$30 ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: LD_INT 1050
2141: ST_TO_ADDR
// normalTime := 0 0$30 ;
2142: LD_ADDR_VAR 0 6
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// maxTime := 1 1$20 ;
2150: LD_ADDR_VAR 0 8
2154: PUSH
2155: LD_INT 2800
2157: ST_TO_ADDR
// delayTime := 0 0$5 ;
2158: LD_ADDR_VAR 0 7
2162: PUSH
2163: LD_INT 175
2165: ST_TO_ADDR
// end ; 2 :
2166: GO 2298
2168: LD_INT 2
2170: DOUBLE
2171: EQUAL
2172: IFTRUE 2176
2174: GO 2211
2176: POP
// begin time := 0 0$25 ;
2177: LD_ADDR_VAR 0 4
2181: PUSH
2182: LD_INT 875
2184: ST_TO_ADDR
// normalTime := 0 0$25 ;
2185: LD_ADDR_VAR 0 6
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// maxTime := 1 1$10 ;
2193: LD_ADDR_VAR 0 8
2197: PUSH
2198: LD_INT 2450
2200: ST_TO_ADDR
// delayTime := 0 0$4 ;
2201: LD_ADDR_VAR 0 7
2205: PUSH
2206: LD_INT 140
2208: ST_TO_ADDR
// end ; 3 :
2209: GO 2298
2211: LD_INT 3
2213: DOUBLE
2214: EQUAL
2215: IFTRUE 2219
2217: GO 2254
2219: POP
// begin time := 0 0$20 ;
2220: LD_ADDR_VAR 0 4
2224: PUSH
2225: LD_INT 700
2227: ST_TO_ADDR
// normalTime := 0 0$20 ;
2228: LD_ADDR_VAR 0 6
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// maxTime := 1 1$00 ;
2236: LD_ADDR_VAR 0 8
2240: PUSH
2241: LD_INT 2100
2243: ST_TO_ADDR
// delayTime := 0 0$3 ;
2244: LD_ADDR_VAR 0 7
2248: PUSH
2249: LD_INT 105
2251: ST_TO_ADDR
// end ; 4 :
2252: GO 2298
2254: LD_INT 4
2256: DOUBLE
2257: EQUAL
2258: IFTRUE 2262
2260: GO 2297
2262: POP
// begin time := 0 0$15 ;
2263: LD_ADDR_VAR 0 4
2267: PUSH
2268: LD_INT 525
2270: ST_TO_ADDR
// normalTime := 0 0$15 ;
2271: LD_ADDR_VAR 0 6
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// maxTime := 0 0$55 ;
2279: LD_ADDR_VAR 0 8
2283: PUSH
2284: LD_INT 1925
2286: ST_TO_ADDR
// delayTime := 0 0$2 ;
2287: LD_ADDR_VAR 0 7
2291: PUSH
2292: LD_INT 70
2294: ST_TO_ADDR
// end ; end ;
2295: GO 2298
2297: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2298: LD_ADDR_VAR 0 3
2302: PUSH
2303: LD_INT 8
2305: PUSH
2306: LD_INT 9
2308: PUSH
2309: LD_INT 7
2311: PUSH
2312: LD_INT 12
2314: PUSH
2315: LD_INT 11
2317: PUSH
2318: LD_INT 10
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: ST_TO_ADDR
// areas := [ ] ;
2329: LD_ADDR_VAR 0 5
2333: PUSH
2334: EMPTY
2335: ST_TO_ADDR
// for i := 1 to 8 do
2336: LD_ADDR_VAR 0 1
2340: PUSH
2341: DOUBLE
2342: LD_INT 1
2344: DEC
2345: ST_TO_ADDR
2346: LD_INT 8
2348: PUSH
2349: FOR_TO
2350: IFFALSE 2397
// begin if not mpSidePositions [ i ] then
2352: LD_EXP 7
2356: PUSH
2357: LD_VAR 0 1
2361: ARRAY
2362: NOT
2363: IFFALSE 2367
// continue ;
2365: GO 2349
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2367: LD_ADDR_VAR 0 5
2371: PUSH
2372: LD_VAR 0 5
2376: PUSH
2377: LD_VAR 0 3
2381: PUSH
2382: LD_EXP 7
2386: PUSH
2387: LD_VAR 0 1
2391: ARRAY
2392: ARRAY
2393: ADD
2394: ST_TO_ADDR
// end ;
2395: GO 2349
2397: POP
2398: POP
// areas := areas diff 0 ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_INT 0
2411: DIFF
2412: ST_TO_ADDR
// x := 1 ;
2413: LD_ADDR_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// repeat wait ( time ) ;
2421: LD_VAR 0 4
2425: PPUSH
2426: CALL_OW 67
// x := Inc ( x ) ;
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: LD_VAR 0 2
2439: PPUSH
2440: CALL 50913 0 1
2444: ST_TO_ADDR
// if x > 5 then
2445: LD_VAR 0 2
2449: PUSH
2450: LD_INT 5
2452: GREATER
2453: IFFALSE 2463
// x := 1 ;
2455: LD_ADDR_VAR 0 2
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// for i in areas do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: LD_VAR 0 5
2472: PUSH
2473: FOR_IN
2474: IFFALSE 2513
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2476: LD_VAR 0 1
2480: PPUSH
2481: LD_INT 1
2483: PPUSH
2484: CALL_OW 287
2488: PUSH
2489: LD_INT 20
2491: LESS
2492: IFFALSE 2511
// begin CreateCratesArea ( x , i , true ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_VAR 0 1
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 55
// end ; end ;
2511: GO 2473
2513: POP
2514: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) = 0 then
2515: LD_INT 14
2517: PPUSH
2518: LD_INT 1
2520: PPUSH
2521: CALL_OW 287
2525: PUSH
2526: LD_INT 0
2528: EQUAL
2529: IFFALSE 2568
// begin for i := 1 to 3 do
2531: LD_ADDR_VAR 0 1
2535: PUSH
2536: DOUBLE
2537: LD_INT 1
2539: DEC
2540: ST_TO_ADDR
2541: LD_INT 3
2543: PUSH
2544: FOR_TO
2545: IFFALSE 2564
// CreateCratesArea ( x , MZBaseArea , true ) ;
2547: LD_VAR 0 2
2551: PPUSH
2552: LD_INT 14
2554: PPUSH
2555: LD_INT 1
2557: PPUSH
2558: CALL_OW 55
2562: GO 2544
2564: POP
2565: POP
// end else
2566: GO 2599
// if GetResourceArea ( MZBaseArea , mat_cans ) < 120 then
2568: LD_INT 14
2570: PPUSH
2571: LD_INT 1
2573: PPUSH
2574: CALL_OW 287
2578: PUSH
2579: LD_INT 120
2581: LESS
2582: IFFALSE 2599
// CreateCratesArea ( x , MZBaseArea , true ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_INT 14
2591: PPUSH
2592: LD_INT 1
2594: PPUSH
2595: CALL_OW 55
// time := time + delayTime ;
2599: LD_ADDR_VAR 0 4
2603: PUSH
2604: LD_VAR 0 4
2608: PUSH
2609: LD_VAR 0 7
2613: PLUS
2614: ST_TO_ADDR
// if time > maxTime then
2615: LD_VAR 0 4
2619: PUSH
2620: LD_VAR 0 8
2624: GREATER
2625: IFFALSE 2637
// time := normalTime ;
2627: LD_ADDR_VAR 0 4
2631: PUSH
2632: LD_VAR 0 6
2636: ST_TO_ADDR
// until false ;
2637: LD_INT 0
2639: IFFALSE 2421
// end ; end_of_file
2641: PPOPN 8
2643: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2644: LD_VAR 0 1
2648: PPUSH
2649: CALL 55057 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: CALL 8350 0 1
// end ;
2662: PPOPN 1
2664: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL 55074 0 1
// end ;
2674: PPOPN 1
2676: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL 9403 0 1
2686: PPOPN 1
2688: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2689: LD_VAR 0 1
2693: PPUSH
2694: LD_VAR 0 2
2698: PPUSH
2699: CALL 55115 0 2
2703: PPOPN 2
2705: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2706: LD_VAR 0 1
2710: PPUSH
2711: LD_VAR 0 2
2715: PPUSH
2716: CALL 9156 0 2
2720: PPOPN 2
2722: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2723: LD_VAR 0 1
2727: PPUSH
2728: LD_VAR 0 2
2732: PPUSH
2733: LD_VAR 0 3
2737: PPUSH
2738: CALL 9456 0 3
2742: PPOPN 3
2744: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2745: LD_VAR 0 1
2749: PPUSH
2750: LD_VAR 0 2
2754: PPUSH
2755: LD_VAR 0 3
2759: PPUSH
2760: LD_VAR 0 4
2764: PPUSH
2765: LD_VAR 0 5
2769: PPUSH
2770: CALL 10140 0 5
2774: PPOPN 5
2776: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2777: LD_VAR 0 1
2781: PPUSH
2782: LD_VAR 0 2
2786: PPUSH
2787: LD_VAR 0 3
2791: PPUSH
2792: LD_VAR 0 4
2796: PPUSH
2797: CALL 10243 0 4
2801: PPOPN 4
2803: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2804: LD_INT 0
2806: PPUSH
2807: PPUSH
// disable ( mpActive ) ;
2808: LD_INT 100
2810: DISABLE_MARKED
// disable ( mpWin ) ;
2811: LD_INT 101
2813: DISABLE_MARKED
// disable ( mpLose ) ;
2814: LD_INT 102
2816: DISABLE_MARKED
// mpGameType := 0 ;
2817: LD_ADDR_EXP 3
2821: PUSH
2822: LD_INT 0
2824: ST_TO_ADDR
// mpGameSettings := [ ] ;
2825: LD_ADDR_EXP 6
2829: PUSH
2830: EMPTY
2831: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2832: LD_ADDR_EXP 4
2836: PUSH
2837: EMPTY
2838: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2839: LD_ADDR_EXP 5
2843: PUSH
2844: EMPTY
2845: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2846: LD_ADDR_EXP 29
2850: PUSH
2851: LD_INT 2
2853: PUSH
2854: LD_INT 2
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2861: LD_ADDR_EXP 12
2865: PUSH
2866: EMPTY
2867: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2868: LD_ADDR_EXP 13
2872: PUSH
2873: EMPTY
2874: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2875: LD_ADDR_EXP 42
2879: PUSH
2880: EMPTY
2881: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2882: LD_ADDR_EXP 43
2886: PUSH
2887: EMPTY
2888: ST_TO_ADDR
// mpDepots := [ ] ;
2889: LD_ADDR_EXP 14
2893: PUSH
2894: EMPTY
2895: ST_TO_ADDR
// mpBuildings := [ ] ;
2896: LD_ADDR_EXP 17
2900: PUSH
2901: EMPTY
2902: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2903: LD_ADDR_EXP 18
2907: PUSH
2908: EMPTY
2909: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2910: LD_ADDR_EXP 19
2914: PUSH
2915: EMPTY
2916: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2917: LD_ADDR_EXP 20
2921: PUSH
2922: EMPTY
2923: ST_TO_ADDR
// mpStartingResources := [ ] ;
2924: LD_ADDR_EXP 15
2928: PUSH
2929: EMPTY
2930: ST_TO_ADDR
// mpStartPos := [ ] ;
2931: LD_ADDR_EXP 21
2935: PUSH
2936: EMPTY
2937: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2938: LD_ADDR_EXP 22
2942: PUSH
2943: LD_INT 1
2945: NEG
2946: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2947: LD_ADDR_EXP 23
2951: PUSH
2952: EMPTY
2953: ST_TO_ADDR
// mpApemans := [ ] ;
2954: LD_ADDR_EXP 30
2958: PUSH
2959: EMPTY
2960: ST_TO_ADDR
// mpApemansArea := [ ] ;
2961: LD_ADDR_EXP 31
2965: PUSH
2966: EMPTY
2967: ST_TO_ADDR
// mpRespawn := [ ] ;
2968: LD_ADDR_EXP 33
2972: PUSH
2973: EMPTY
2974: ST_TO_ADDR
// mpKingArea := 0 ;
2975: LD_ADDR_EXP 34
2979: PUSH
2980: LD_INT 0
2982: ST_TO_ADDR
// mpPoints := [ ] ;
2983: LD_ADDR_EXP 35
2987: PUSH
2988: EMPTY
2989: ST_TO_ADDR
// mpVehicles := 0 ;
2990: LD_ADDR_EXP 36
2994: PUSH
2995: LD_INT 0
2997: ST_TO_ADDR
// mpShipments := 0 ;
2998: LD_ADDR_EXP 27
3002: PUSH
3003: LD_INT 0
3005: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3006: LD_ADDR_EXP 40
3010: PUSH
3011: EMPTY
3012: PUSH
3013: EMPTY
3014: PUSH
3015: EMPTY
3016: PUSH
3017: EMPTY
3018: PUSH
3019: EMPTY
3020: PUSH
3021: EMPTY
3022: PUSH
3023: EMPTY
3024: PUSH
3025: EMPTY
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3037: LD_ADDR_EXP 32
3041: PUSH
3042: EMPTY
3043: PUSH
3044: EMPTY
3045: PUSH
3046: EMPTY
3047: PUSH
3048: EMPTY
3049: PUSH
3050: EMPTY
3051: PUSH
3052: EMPTY
3053: PUSH
3054: EMPTY
3055: PUSH
3056: EMPTY
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
3068: LD_ADDR_EXP 41
3072: PUSH
3073: LD_INT 0
3075: PUSH
3076: LD_INT 0
3078: PUSH
3079: LD_INT 0
3081: PUSH
3082: LD_INT 0
3084: PUSH
3085: LD_INT 0
3087: PUSH
3088: LD_INT 0
3090: PUSH
3091: LD_INT 0
3093: PUSH
3094: LD_INT 0
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: ST_TO_ADDR
// mpEmissions := 0 ;
3107: LD_ADDR_EXP 37
3111: PUSH
3112: LD_INT 0
3114: ST_TO_ADDR
// mpTeleports := 0 ;
3115: LD_ADDR_EXP 44
3119: PUSH
3120: LD_INT 0
3122: ST_TO_ADDR
// mpArtifacts := 0 ;
3123: LD_ADDR_EXP 45
3127: PUSH
3128: LD_INT 0
3130: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3131: LD_ADDR_EXP 46
3135: PUSH
3136: LD_INT 0
3138: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3139: LD_ADDR_EXP 25
3143: PUSH
3144: LD_INT 3
3146: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3147: LD_ADDR_EXP 24
3151: PUSH
3152: LD_INT 15
3154: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3155: LD_ADDR_EXP 38
3159: PUSH
3160: LD_INT 0
3162: ST_TO_ADDR
// mpGameActive := false ;
3163: LD_ADDR_EXP 39
3167: PUSH
3168: LD_INT 0
3170: ST_TO_ADDR
// mpBlockRespThread := false ;
3171: LD_ADDR_EXP 47
3175: PUSH
3176: LD_INT 0
3178: ST_TO_ADDR
// for i := 1 to 32 do
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: DOUBLE
3185: LD_INT 1
3187: DEC
3188: ST_TO_ADDR
3189: LD_INT 32
3191: PUSH
3192: FOR_TO
3193: IFFALSE 3220
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3195: LD_ADDR_EXP 6
3199: PUSH
3200: LD_EXP 6
3204: PPUSH
3205: LD_VAR 0 2
3209: PPUSH
3210: LD_INT 0
3212: PPUSH
3213: CALL_OW 1
3217: ST_TO_ADDR
3218: GO 3192
3220: POP
3221: POP
// end ;
3222: LD_VAR 0 1
3226: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3227: LD_INT 0
3229: PPUSH
3230: PPUSH
3231: PPUSH
3232: PPUSH
3233: PPUSH
3234: PPUSH
3235: PPUSH
3236: PPUSH
3237: PPUSH
3238: PPUSH
3239: PPUSH
3240: PPUSH
3241: PPUSH
3242: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
3243: LD_ADDR_VAR 0 14
3247: PUSH
3248: LD_INT 1
3250: PUSH
3251: LD_INT 2
3253: PUSH
3254: LD_INT 3
3256: PUSH
3257: LD_INT 5
3259: PUSH
3260: LD_INT 6
3262: PUSH
3263: LD_INT 7
3265: PUSH
3266: LD_INT 8
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: ST_TO_ADDR
// for i in gameTypes do
3278: LD_ADDR_VAR 0 2
3282: PUSH
3283: LD_VAR 0 14
3287: PUSH
3288: FOR_IN
3289: IFFALSE 3298
// disable ( i ) ;
3291: LD_VAR 0 2
3295: DISABLE_MARKED
3296: GO 3288
3298: POP
3299: POP
// if Multiplayer then
3300: LD_OWVAR 4
3304: IFFALSE 3488
// begin mpGameType := mp_game_type ;
3306: LD_ADDR_EXP 3
3310: PUSH
3311: LD_OWVAR 6
3315: ST_TO_ADDR
// your_side := mp_player_side ;
3316: LD_ADDR_OWVAR 2
3320: PUSH
3321: LD_OWVAR 7
3325: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3326: LD_ADDR_EXP 7
3330: PUSH
3331: LD_OWVAR 17
3335: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3336: LD_ADDR_EXP 8
3340: PUSH
3341: LD_OWVAR 15
3345: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3346: LD_ADDR_EXP 9
3350: PUSH
3351: LD_OWVAR 16
3355: ST_TO_ADDR
// mpTeams := mp_teams ;
3356: LD_ADDR_EXP 10
3360: PUSH
3361: LD_OWVAR 12
3365: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: DOUBLE
3372: LD_INT 1
3374: DEC
3375: ST_TO_ADDR
3376: LD_EXP 4
3380: PPUSH
3381: CALL 13564 0 1
3385: PUSH
3386: FOR_TO
3387: IFFALSE 3463
// begin setting := mpGameSettingsKeys [ i ] ;
3389: LD_ADDR_VAR 0 12
3393: PUSH
3394: LD_EXP 4
3398: PUSH
3399: LD_VAR 0 2
3403: ARRAY
3404: ST_TO_ADDR
// if setting then
3405: LD_VAR 0 12
3409: IFFALSE 3461
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3411: LD_ADDR_EXP 6
3415: PUSH
3416: LD_EXP 6
3420: PPUSH
3421: LD_VAR 0 2
3425: PPUSH
3426: LD_EXP 5
3430: PUSH
3431: LD_VAR 0 2
3435: ARRAY
3436: PUSH
3437: LD_VAR 0 2
3441: PUSH
3442: LD_INT 1
3444: MINUS
3445: PPUSH
3446: CALL_OW 426
3450: PUSH
3451: LD_INT 1
3453: PLUS
3454: ARRAY
3455: PPUSH
3456: CALL_OW 1
3460: ST_TO_ADDR
// end ;
3461: GO 3386
3463: POP
3464: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3465: LD_ADDR_EXP 11
3469: PUSH
3470: LD_EXP 8
3474: PUSH
3475: LD_INT 0
3477: PUSH
3478: EMPTY
3479: LIST
3480: DIFF
3481: PUSH
3482: LD_INT 1
3484: GREATER
3485: ST_TO_ADDR
// end else
3486: GO 3488
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3488: LD_EXP 3
3492: PPUSH
3493: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3497: LD_EXP 18
3501: PPUSH
3502: CALL 13564 0 1
3506: IFFALSE 3537
// begin for i in mpMarkedAreas do
3508: LD_ADDR_VAR 0 2
3512: PUSH
3513: LD_EXP 18
3517: PUSH
3518: FOR_IN
3519: IFFALSE 3535
// SetAreaMapShow ( i , 0 ) ;
3521: LD_VAR 0 2
3525: PPUSH
3526: LD_INT 0
3528: PPUSH
3529: CALL_OW 424
3533: GO 3518
3535: POP
3536: POP
// end ; for i := 1 to 8 do
3537: LD_ADDR_VAR 0 2
3541: PUSH
3542: DOUBLE
3543: LD_INT 1
3545: DEC
3546: ST_TO_ADDR
3547: LD_INT 8
3549: PUSH
3550: FOR_TO
3551: IFFALSE 5010
// begin if not mpSidePositions [ i ] then
3553: LD_EXP 7
3557: PUSH
3558: LD_VAR 0 2
3562: ARRAY
3563: NOT
3564: IFFALSE 3568
// continue ;
3566: GO 3550
// side := i ;
3568: LD_ADDR_VAR 0 7
3572: PUSH
3573: LD_VAR 0 2
3577: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3578: LD_ADDR_VAR 0 9
3582: PUSH
3583: LD_EXP 9
3587: PUSH
3588: LD_VAR 0 2
3592: ARRAY
3593: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3594: LD_ADDR_VAR 0 8
3598: PUSH
3599: LD_EXP 7
3603: PUSH
3604: LD_VAR 0 2
3608: ARRAY
3609: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3610: LD_EXP 12
3614: PPUSH
3615: CALL 13564 0 1
3619: IFFALSE 3696
// begin for j in mpOilDeposits [ pos ] do
3621: LD_ADDR_VAR 0 3
3625: PUSH
3626: LD_EXP 12
3630: PUSH
3631: LD_VAR 0 8
3635: ARRAY
3636: PUSH
3637: FOR_IN
3638: IFFALSE 3694
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3640: LD_VAR 0 3
3644: PUSH
3645: LD_INT 1
3647: ARRAY
3648: PPUSH
3649: LD_VAR 0 3
3653: PUSH
3654: LD_INT 2
3656: ARRAY
3657: PPUSH
3658: LD_INT 2
3660: PPUSH
3661: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3665: LD_VAR 0 3
3669: PUSH
3670: LD_INT 1
3672: ARRAY
3673: PPUSH
3674: LD_VAR 0 3
3678: PUSH
3679: LD_INT 2
3681: ARRAY
3682: PPUSH
3683: LD_VAR 0 7
3687: PPUSH
3688: CALL_OW 441
// end ;
3692: GO 3637
3694: POP
3695: POP
// end ; if Count ( mpSibDeposits ) then
3696: LD_EXP 13
3700: PPUSH
3701: CALL 13564 0 1
3705: IFFALSE 3782
// begin for j in mpSibDeposits [ pos ] do
3707: LD_ADDR_VAR 0 3
3711: PUSH
3712: LD_EXP 13
3716: PUSH
3717: LD_VAR 0 8
3721: ARRAY
3722: PUSH
3723: FOR_IN
3724: IFFALSE 3780
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3726: LD_VAR 0 3
3730: PUSH
3731: LD_INT 1
3733: ARRAY
3734: PPUSH
3735: LD_VAR 0 3
3739: PUSH
3740: LD_INT 2
3742: ARRAY
3743: PPUSH
3744: LD_INT 3
3746: PPUSH
3747: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3751: LD_VAR 0 3
3755: PUSH
3756: LD_INT 1
3758: ARRAY
3759: PPUSH
3760: LD_VAR 0 3
3764: PUSH
3765: LD_INT 2
3767: ARRAY
3768: PPUSH
3769: LD_VAR 0 7
3773: PPUSH
3774: CALL_OW 441
// end ;
3778: GO 3723
3780: POP
3781: POP
// end ; InitBc ;
3782: CALL_OW 21
// InitUc ;
3786: CALL_OW 18
// uc_side := side ;
3790: LD_ADDR_OWVAR 20
3794: PUSH
3795: LD_VAR 0 7
3799: ST_TO_ADDR
// uc_nation := nation ;
3800: LD_ADDR_OWVAR 21
3804: PUSH
3805: LD_VAR 0 9
3809: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3810: LD_EXP 22
3814: PUSH
3815: LD_INT 1
3817: NEG
3818: GREATER
3819: IFFALSE 3978
// begin x := mpStartPos [ pos ] [ 1 ] ;
3821: LD_ADDR_VAR 0 5
3825: PUSH
3826: LD_EXP 21
3830: PUSH
3831: LD_VAR 0 8
3835: ARRAY
3836: PUSH
3837: LD_INT 1
3839: ARRAY
3840: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3841: LD_ADDR_VAR 0 6
3845: PUSH
3846: LD_EXP 21
3850: PUSH
3851: LD_VAR 0 8
3855: ARRAY
3856: PUSH
3857: LD_INT 2
3859: ARRAY
3860: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3861: LD_VAR 0 5
3865: PPUSH
3866: LD_VAR 0 6
3870: PPUSH
3871: LD_INT 12
3873: PPUSH
3874: LD_INT 2
3876: PPUSH
3877: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3881: LD_ADDR_EXP 23
3885: PUSH
3886: LD_EXP 23
3890: PPUSH
3891: LD_VAR 0 7
3895: PPUSH
3896: LD_VAR 0 7
3900: PPUSH
3901: LD_VAR 0 5
3905: PPUSH
3906: LD_VAR 0 6
3910: PPUSH
3911: LD_INT 1
3913: PUSH
3914: LD_INT 100
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: PUSH
3921: LD_INT 2
3923: PUSH
3924: LD_INT 70
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 3
3933: PUSH
3934: LD_INT 40
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 10
3943: PUSH
3944: LD_INT 25
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 20
3953: PUSH
3954: LD_INT 100
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: PPUSH
3968: CALL_OW 418
3972: PPUSH
3973: CALL_OW 1
3977: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3978: LD_EXP 14
3982: PPUSH
3983: CALL 13564 0 1
3987: IFFALSE 4186
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
3989: LD_EXP 3
3993: PUSH
3994: LD_INT 2
3996: PUSH
3997: LD_INT 8
3999: PUSH
4000: LD_INT 6
4002: PUSH
4003: LD_INT 7
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: IN
4012: IFFALSE 4032
// begin bc_level := 10 ;
4014: LD_ADDR_OWVAR 43
4018: PUSH
4019: LD_INT 10
4021: ST_TO_ADDR
// bc_type := b_warehouse ;
4022: LD_ADDR_OWVAR 42
4026: PUSH
4027: LD_INT 1
4029: ST_TO_ADDR
// end else
4030: GO 4048
// begin bc_level := 0 ;
4032: LD_ADDR_OWVAR 43
4036: PUSH
4037: LD_INT 0
4039: ST_TO_ADDR
// bc_type := b_depot ;
4040: LD_ADDR_OWVAR 42
4044: PUSH
4045: LD_INT 0
4047: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4048: LD_ADDR_VAR 0 4
4052: PUSH
4053: LD_EXP 14
4057: PUSH
4058: LD_VAR 0 8
4062: ARRAY
4063: PUSH
4064: LD_INT 1
4066: ARRAY
4067: PPUSH
4068: LD_EXP 14
4072: PUSH
4073: LD_VAR 0 8
4077: ARRAY
4078: PUSH
4079: LD_INT 2
4081: ARRAY
4082: PPUSH
4083: LD_EXP 14
4087: PUSH
4088: LD_VAR 0 8
4092: ARRAY
4093: PUSH
4094: LD_INT 3
4096: ARRAY
4097: PPUSH
4098: CALL_OW 47
4102: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4103: LD_VAR 0 4
4107: PPUSH
4108: LD_STRING @
4110: PUSH
4111: LD_VAR 0 7
4115: STR
4116: PPUSH
4117: CALL_OW 500
// if Count ( mpStartingResources ) then
4121: LD_EXP 15
4125: PPUSH
4126: CALL 13564 0 1
4130: IFFALSE 4184
// begin for j := 1 to mpStartingResources do
4132: LD_ADDR_VAR 0 3
4136: PUSH
4137: DOUBLE
4138: LD_INT 1
4140: DEC
4141: ST_TO_ADDR
4142: LD_EXP 15
4146: PUSH
4147: FOR_TO
4148: IFFALSE 4182
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4150: LD_VAR 0 4
4154: PPUSH
4155: CALL_OW 274
4159: PPUSH
4160: LD_VAR 0 3
4164: PPUSH
4165: LD_EXP 15
4169: PUSH
4170: LD_VAR 0 3
4174: ARRAY
4175: PPUSH
4176: CALL_OW 277
4180: GO 4147
4182: POP
4183: POP
// end ; end else
4184: GO 4393
// if Count ( mpStartingResources ) then
4186: LD_EXP 15
4190: PPUSH
4191: CALL 13564 0 1
4195: IFFALSE 4393
// begin x := mpStartPos [ pos ] [ 1 ] ;
4197: LD_ADDR_VAR 0 5
4201: PUSH
4202: LD_EXP 21
4206: PUSH
4207: LD_VAR 0 8
4211: ARRAY
4212: PUSH
4213: LD_INT 1
4215: ARRAY
4216: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4217: LD_ADDR_VAR 0 6
4221: PUSH
4222: LD_EXP 21
4226: PUSH
4227: LD_VAR 0 8
4231: ARRAY
4232: PUSH
4233: LD_INT 2
4235: ARRAY
4236: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4237: LD_ADDR_VAR 0 3
4241: PUSH
4242: DOUBLE
4243: LD_INT 1
4245: DEC
4246: ST_TO_ADDR
4247: LD_EXP 15
4251: PUSH
4252: FOR_TO
4253: IFFALSE 4391
// begin resources := mpStartingResources [ j ] ;
4255: LD_ADDR_VAR 0 13
4259: PUSH
4260: LD_EXP 15
4264: PUSH
4265: LD_VAR 0 3
4269: ARRAY
4270: ST_TO_ADDR
// if resources = 0 then
4271: LD_VAR 0 13
4275: PUSH
4276: LD_INT 0
4278: EQUAL
4279: IFFALSE 4283
// continue ;
4281: GO 4252
// repeat if resources >= 50 then
4283: LD_VAR 0 13
4287: PUSH
4288: LD_INT 50
4290: GREATEREQUAL
4291: IFFALSE 4337
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4293: LD_VAR 0 3
4297: PPUSH
4298: LD_INT 5
4300: PPUSH
4301: LD_VAR 0 5
4305: PPUSH
4306: LD_VAR 0 6
4310: PPUSH
4311: LD_INT 6
4313: PPUSH
4314: LD_INT 0
4316: PPUSH
4317: CALL_OW 60
// resources := resources - 50 ;
4321: LD_ADDR_VAR 0 13
4325: PUSH
4326: LD_VAR 0 13
4330: PUSH
4331: LD_INT 50
4333: MINUS
4334: ST_TO_ADDR
// end else
4335: GO 4379
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4337: LD_VAR 0 3
4341: PPUSH
4342: LD_VAR 0 13
4346: PUSH
4347: LD_INT 10
4349: DIV
4350: PPUSH
4351: LD_VAR 0 5
4355: PPUSH
4356: LD_VAR 0 6
4360: PPUSH
4361: LD_INT 6
4363: PPUSH
4364: LD_INT 0
4366: PPUSH
4367: CALL_OW 60
// resources := 0 ;
4371: LD_ADDR_VAR 0 13
4375: PUSH
4376: LD_INT 0
4378: ST_TO_ADDR
// end ; until resources <= 0 ;
4379: LD_VAR 0 13
4383: PUSH
4384: LD_INT 0
4386: LESSEQUAL
4387: IFFALSE 4283
// end ;
4389: GO 4252
4391: POP
4392: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
4393: LD_EXP 17
4397: PPUSH
4398: CALL 13564 0 1
4402: IFFALSE 4422
4404: PUSH
4405: LD_EXP 3
4409: PUSH
4410: LD_INT 2
4412: PUSH
4413: LD_INT 8
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: IN
4420: NOT
4421: AND
4422: IFFALSE 4500
// begin for j in mpBuildings [ pos ] do
4424: LD_ADDR_VAR 0 3
4428: PUSH
4429: LD_EXP 17
4433: PUSH
4434: LD_VAR 0 8
4438: ARRAY
4439: PUSH
4440: FOR_IN
4441: IFFALSE 4498
// begin bc_level := 0 ;
4443: LD_ADDR_OWVAR 43
4447: PUSH
4448: LD_INT 0
4450: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4451: LD_ADDR_OWVAR 42
4455: PUSH
4456: LD_VAR 0 3
4460: PUSH
4461: LD_INT 1
4463: ARRAY
4464: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4465: LD_VAR 0 3
4469: PUSH
4470: LD_INT 2
4472: ARRAY
4473: PPUSH
4474: LD_VAR 0 3
4478: PUSH
4479: LD_INT 3
4481: ARRAY
4482: PPUSH
4483: LD_VAR 0 3
4487: PUSH
4488: LD_INT 4
4490: ARRAY
4491: PPUSH
4492: CALL_OW 47
// end ;
4496: GO 4440
4498: POP
4499: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4500: LD_EXP 26
4504: IFFALSE 4524
4506: PUSH
4507: LD_INT 20
4509: PPUSH
4510: LD_VAR 0 7
4514: PPUSH
4515: CALL_OW 321
4519: PUSH
4520: LD_INT 1
4522: EQUAL
4523: AND
4524: IFFALSE 4541
// SetTech ( tech_SibDet , side , state_researched ) ;
4526: LD_INT 20
4528: PPUSH
4529: LD_VAR 0 7
4533: PPUSH
4534: LD_INT 2
4536: PPUSH
4537: CALL_OW 322
// if not mpArtifacts then
4541: LD_EXP 45
4545: NOT
4546: IFFALSE 4563
// SetTech ( tech_artifact , side , state_disabled ) ;
4548: LD_INT 24
4550: PPUSH
4551: LD_VAR 0 7
4555: PPUSH
4556: LD_INT 0
4558: PPUSH
4559: CALL_OW 322
// if mpSibBomb = 1 then
4563: LD_EXP 28
4567: PUSH
4568: LD_INT 1
4570: EQUAL
4571: IFFALSE 4590
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4573: LD_INT 25
4575: PPUSH
4576: LD_VAR 0 7
4580: PPUSH
4581: LD_INT 1
4583: PPUSH
4584: CALL_OW 322
// end else
4588: GO 4605
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4590: LD_INT 25
4592: PPUSH
4593: LD_VAR 0 7
4597: PPUSH
4598: LD_INT 0
4600: PPUSH
4601: CALL_OW 322
// end ; if mpVehicles then
4605: LD_EXP 36
4609: IFFALSE 4708
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4611: LD_ADDR_VAR 0 3
4615: PUSH
4616: LD_VAR 0 7
4620: PPUSH
4621: LD_VAR 0 9
4625: PPUSH
4626: LD_EXP 36
4630: PPUSH
4631: CALL 5967 0 3
4635: PUSH
4636: FOR_IN
4637: IFFALSE 4706
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4639: LD_VAR 0 3
4643: PPUSH
4644: LD_INT 0
4646: PPUSH
4647: LD_INT 5
4649: PPUSH
4650: CALL_OW 12
4654: PPUSH
4655: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4659: LD_VAR 0 3
4663: PPUSH
4664: LD_EXP 21
4668: PUSH
4669: LD_VAR 0 8
4673: ARRAY
4674: PUSH
4675: LD_INT 1
4677: ARRAY
4678: PPUSH
4679: LD_EXP 21
4683: PUSH
4684: LD_VAR 0 8
4688: ARRAY
4689: PUSH
4690: LD_INT 2
4692: ARRAY
4693: PPUSH
4694: LD_INT 12
4696: PPUSH
4697: LD_INT 0
4699: PPUSH
4700: CALL_OW 50
// end ;
4704: GO 4636
4706: POP
4707: POP
// end ; uc_nation := nation ;
4708: LD_ADDR_OWVAR 21
4712: PUSH
4713: LD_VAR 0 9
4717: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4718: LD_EXP 3
4722: PUSH
4723: LD_INT 6
4725: PUSH
4726: LD_INT 7
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: IN
4733: IFFALSE 4758
4735: PUSH
4736: LD_EXP 7
4740: PUSH
4741: LD_VAR 0 2
4745: ARRAY
4746: PUSH
4747: LD_INT 1
4749: PUSH
4750: LD_INT 2
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: IN
4757: AND
4758: IFFALSE 4806
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4760: LD_ADDR_VAR 0 11
4764: PUSH
4765: LD_VAR 0 7
4769: PPUSH
4770: LD_VAR 0 9
4774: PPUSH
4775: LD_EXP 24
4779: PUSH
4780: LD_EXP 24
4784: PUSH
4785: LD_INT 2
4787: DIV
4788: PLUS
4789: PPUSH
4790: LD_EXP 25
4794: PUSH
4795: LD_INT 1
4797: PLUS
4798: PPUSH
4799: CALL 5422 0 4
4803: ST_TO_ADDR
4804: GO 4836
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4806: LD_ADDR_VAR 0 11
4810: PUSH
4811: LD_VAR 0 7
4815: PPUSH
4816: LD_VAR 0 9
4820: PPUSH
4821: LD_EXP 24
4825: PPUSH
4826: LD_EXP 25
4830: PPUSH
4831: CALL 5422 0 4
4835: ST_TO_ADDR
// for j in team do
4836: LD_ADDR_VAR 0 3
4840: PUSH
4841: LD_VAR 0 11
4845: PUSH
4846: FOR_IN
4847: IFFALSE 4896
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4849: LD_VAR 0 3
4853: PPUSH
4854: LD_EXP 21
4858: PUSH
4859: LD_VAR 0 8
4863: ARRAY
4864: PUSH
4865: LD_INT 1
4867: ARRAY
4868: PPUSH
4869: LD_EXP 21
4873: PUSH
4874: LD_VAR 0 8
4878: ARRAY
4879: PUSH
4880: LD_INT 2
4882: ARRAY
4883: PPUSH
4884: LD_INT 12
4886: PPUSH
4887: LD_INT 0
4889: PPUSH
4890: CALL_OW 50
4894: GO 4846
4896: POP
4897: POP
// if mpApemans then
4898: LD_EXP 30
4902: IFFALSE 5008
// begin for j := 1 to mpApemans do
4904: LD_ADDR_VAR 0 3
4908: PUSH
4909: DOUBLE
4910: LD_INT 1
4912: DEC
4913: ST_TO_ADDR
4914: LD_EXP 30
4918: PUSH
4919: FOR_TO
4920: IFFALSE 5006
// begin PrepareApeman ( - 5 ) ;
4922: LD_INT 5
4924: NEG
4925: PPUSH
4926: CALL 45667 0 1
// ape := CreateHuman ;
4930: LD_ADDR_VAR 0 10
4934: PUSH
4935: CALL_OW 44
4939: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4940: LD_ADDR_EXP 32
4944: PUSH
4945: LD_EXP 32
4949: PPUSH
4950: LD_VAR 0 8
4954: PPUSH
4955: LD_EXP 32
4959: PUSH
4960: LD_VAR 0 8
4964: ARRAY
4965: PPUSH
4966: LD_VAR 0 10
4970: PPUSH
4971: CALL 49540 0 2
4975: PPUSH
4976: CALL_OW 1
4980: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4981: LD_VAR 0 10
4985: PPUSH
4986: LD_EXP 31
4990: PUSH
4991: LD_VAR 0 8
4995: ARRAY
4996: PPUSH
4997: LD_INT 0
4999: PPUSH
5000: CALL_OW 49
// end ;
5004: GO 4919
5006: POP
5007: POP
// end ; end ;
5008: GO 3550
5010: POP
5011: POP
// if not mpTeamGame then
5012: LD_EXP 11
5016: NOT
5017: IFFALSE 5115
// begin for i := 1 to 8 do
5019: LD_ADDR_VAR 0 2
5023: PUSH
5024: DOUBLE
5025: LD_INT 1
5027: DEC
5028: ST_TO_ADDR
5029: LD_INT 8
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5111
// for j := 1 to 8 do
5035: LD_ADDR_VAR 0 3
5039: PUSH
5040: DOUBLE
5041: LD_INT 1
5043: DEC
5044: ST_TO_ADDR
5045: LD_INT 8
5047: PUSH
5048: FOR_TO
5049: IFFALSE 5107
// if i <> j then
5051: LD_VAR 0 2
5055: PUSH
5056: LD_VAR 0 3
5060: NONEQUAL
5061: IFFALSE 5085
// SetAttitude ( i , j , att_neutral , true ) else
5063: LD_VAR 0 2
5067: PPUSH
5068: LD_VAR 0 3
5072: PPUSH
5073: LD_INT 0
5075: PPUSH
5076: LD_INT 1
5078: PPUSH
5079: CALL_OW 80
5083: GO 5105
// SetAttitude ( i , j , att_friend , true ) ;
5085: LD_VAR 0 2
5089: PPUSH
5090: LD_VAR 0 3
5094: PPUSH
5095: LD_INT 1
5097: PPUSH
5098: LD_INT 1
5100: PPUSH
5101: CALL_OW 80
5105: GO 5048
5107: POP
5108: POP
5109: GO 5032
5111: POP
5112: POP
// end else
5113: GO 5290
// begin if mpSharedVision then
5115: LD_EXP 16
5119: IFFALSE 5184
// begin for i in mpTeams do
5121: LD_ADDR_VAR 0 2
5125: PUSH
5126: LD_EXP 10
5130: PUSH
5131: FOR_IN
5132: IFFALSE 5182
// for j := 2 to i do
5134: LD_ADDR_VAR 0 3
5138: PUSH
5139: DOUBLE
5140: LD_INT 2
5142: DEC
5143: ST_TO_ADDR
5144: LD_VAR 0 2
5148: PUSH
5149: FOR_TO
5150: IFFALSE 5178
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5152: LD_VAR 0 2
5156: PUSH
5157: LD_VAR 0 3
5161: ARRAY
5162: PPUSH
5163: LD_VAR 0 2
5167: PUSH
5168: LD_INT 1
5170: ARRAY
5171: PPUSH
5172: CALL_OW 343
5176: GO 5149
5178: POP
5179: POP
5180: GO 5131
5182: POP
5183: POP
// end ; for i := 1 to 8 do
5184: LD_ADDR_VAR 0 2
5188: PUSH
5189: DOUBLE
5190: LD_INT 1
5192: DEC
5193: ST_TO_ADDR
5194: LD_INT 8
5196: PUSH
5197: FOR_TO
5198: IFFALSE 5288
// for j := 1 to 8 do
5200: LD_ADDR_VAR 0 3
5204: PUSH
5205: DOUBLE
5206: LD_INT 1
5208: DEC
5209: ST_TO_ADDR
5210: LD_INT 8
5212: PUSH
5213: FOR_TO
5214: IFFALSE 5284
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5216: LD_EXP 8
5220: PUSH
5221: LD_VAR 0 2
5225: ARRAY
5226: PUSH
5227: LD_EXP 8
5231: PUSH
5232: LD_VAR 0 3
5236: ARRAY
5237: EQUAL
5238: IFFALSE 5262
// SetAttitude ( i , j , att_friend , true ) else
5240: LD_VAR 0 2
5244: PPUSH
5245: LD_VAR 0 3
5249: PPUSH
5250: LD_INT 1
5252: PPUSH
5253: LD_INT 1
5255: PPUSH
5256: CALL_OW 80
5260: GO 5282
// SetAttitude ( i , j , att_enemy , true ) ;
5262: LD_VAR 0 2
5266: PPUSH
5267: LD_VAR 0 3
5271: PPUSH
5272: LD_INT 2
5274: PPUSH
5275: LD_INT 1
5277: PPUSH
5278: CALL_OW 80
5282: GO 5213
5284: POP
5285: POP
5286: GO 5197
5288: POP
5289: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5290: LD_ADDR_OWVAR 71
5294: PUSH
5295: LD_EXP 9
5299: PUSH
5300: LD_OWVAR 2
5304: ARRAY
5305: ST_TO_ADDR
// if IAmSpec then
5306: CALL_OW 531
5310: IFFALSE 5351
// begin FogOff ( true ) ;
5312: LD_INT 1
5314: PPUSH
5315: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5319: LD_EXP 29
5323: PUSH
5324: LD_INT 1
5326: ARRAY
5327: PUSH
5328: LD_INT 2
5330: DIV
5331: PPUSH
5332: LD_EXP 29
5336: PUSH
5337: LD_INT 2
5339: ARRAY
5340: PUSH
5341: LD_INT 2
5343: DIV
5344: PPUSH
5345: CALL_OW 86
// end else
5349: GO 5397
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5351: LD_EXP 21
5355: PUSH
5356: LD_EXP 7
5360: PUSH
5361: LD_OWVAR 2
5365: ARRAY
5366: ARRAY
5367: PUSH
5368: LD_INT 1
5370: ARRAY
5371: PPUSH
5372: LD_EXP 21
5376: PUSH
5377: LD_EXP 7
5381: PUSH
5382: LD_OWVAR 2
5386: ARRAY
5387: ARRAY
5388: PUSH
5389: LD_INT 2
5391: ARRAY
5392: PPUSH
5393: CALL_OW 86
// end ; BeginBuildUp ;
5397: CALL 6500 0 0
// enable ( mpActive ) ;
5401: LD_INT 100
5403: ENABLE_MARKED
// enable ( mpGameType ) ;
5404: LD_EXP 3
5408: ENABLE_MARKED
// mpGameActive := true ;
5409: LD_ADDR_EXP 39
5413: PUSH
5414: LD_INT 1
5416: ST_TO_ADDR
// end ;
5417: LD_VAR 0 1
5421: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
5422: LD_INT 0
5424: PPUSH
5425: PPUSH
5426: PPUSH
5427: PPUSH
5428: PPUSH
// result := [ ] ;
5429: LD_ADDR_VAR 0 5
5433: PUSH
5434: EMPTY
5435: ST_TO_ADDR
// class := class_soldier ;
5436: LD_ADDR_VAR 0 8
5440: PUSH
5441: LD_INT 1
5443: ST_TO_ADDR
// uc_side := side ;
5444: LD_ADDR_OWVAR 20
5448: PUSH
5449: LD_VAR 0 1
5453: ST_TO_ADDR
// uc_nation := nation ;
5454: LD_ADDR_OWVAR 21
5458: PUSH
5459: LD_VAR 0 2
5463: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5464: LD_ADDR_OWVAR 26
5468: PUSH
5469: LD_OWVAR 19
5473: PUSH
5474: LD_VAR 0 1
5478: ARRAY
5479: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5480: LD_INT 1
5482: PPUSH
5483: LD_INT 2
5485: PPUSH
5486: CALL_OW 12
5490: PPUSH
5491: LD_VAR 0 8
5495: PPUSH
5496: LD_VAR 0 4
5500: PUSH
5501: LD_INT 2
5503: PLUS
5504: PPUSH
5505: CALL_OW 380
// hc_importance := 105 ;
5509: LD_ADDR_OWVAR 32
5513: PUSH
5514: LD_INT 105
5516: ST_TO_ADDR
// if Multiplayer then
5517: LD_OWVAR 4
5521: IFFALSE 5561
// begin hc_gallery := MULTIAVATARS ;
5523: LD_ADDR_OWVAR 33
5527: PUSH
5528: LD_STRING MULTIAVATARS
5530: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5531: LD_ADDR_OWVAR 34
5535: PUSH
5536: LD_VAR 0 1
5540: PPUSH
5541: CALL_OW 525
5545: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5546: LD_ADDR_OWVAR 27
5550: PUSH
5551: LD_VAR 0 1
5555: PPUSH
5556: CALL_OW 526
5560: ST_TO_ADDR
// end ; commander := CreateHuman ;
5561: LD_ADDR_VAR 0 9
5565: PUSH
5566: CALL_OW 44
5570: ST_TO_ADDR
// result := Join ( result , commander ) ;
5571: LD_ADDR_VAR 0 5
5575: PUSH
5576: LD_VAR 0 5
5580: PPUSH
5581: LD_VAR 0 9
5585: PPUSH
5586: CALL 49540 0 2
5590: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
5591: LD_ADDR_EXP 41
5595: PUSH
5596: LD_EXP 41
5600: PPUSH
5601: LD_VAR 0 1
5605: PPUSH
5606: LD_VAR 0 9
5610: PPUSH
5611: CALL_OW 1
5615: ST_TO_ADDR
// if mpTeamPreset then
5616: LD_LOC 1
5620: IFFALSE 5716
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5622: LD_LOC 1
5626: PUSH
5627: LD_INT 1
5629: ARRAY
5630: PPUSH
5631: LD_VAR 0 5
5635: PUSH
5636: LD_VAR 0 5
5640: ARRAY
5641: PPUSH
5642: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5646: LD_VAR 0 5
5650: PUSH
5651: LD_VAR 0 5
5655: ARRAY
5656: PPUSH
5657: LD_INT 1
5659: PPUSH
5660: LD_LOC 1
5664: PUSH
5665: LD_INT 1
5667: ARRAY
5668: PPUSH
5669: LD_INT 1
5671: PPUSH
5672: CALL_OW 260
5676: PPUSH
5677: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5681: LD_VAR 0 5
5685: PUSH
5686: LD_VAR 0 5
5690: ARRAY
5691: PPUSH
5692: LD_INT 2
5694: PPUSH
5695: LD_LOC 1
5699: PUSH
5700: LD_INT 1
5702: ARRAY
5703: PPUSH
5704: LD_INT 2
5706: PPUSH
5707: CALL_OW 260
5711: PPUSH
5712: CALL_OW 239
// end ; InitHc_All ( ) ;
5716: CALL_OW 584
// class := 2 ;
5720: LD_ADDR_VAR 0 8
5724: PUSH
5725: LD_INT 2
5727: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5728: LD_ADDR_VAR 0 6
5732: PUSH
5733: DOUBLE
5734: LD_INT 1
5736: DEC
5737: ST_TO_ADDR
5738: LD_VAR 0 3
5742: PUSH
5743: LD_INT 1
5745: MINUS
5746: PUSH
5747: FOR_TO
5748: IFFALSE 5943
// begin PrepareHuman ( false , class , skill ) ;
5750: LD_INT 0
5752: PPUSH
5753: LD_VAR 0 8
5757: PPUSH
5758: LD_VAR 0 4
5762: PPUSH
5763: CALL_OW 380
// un := CreateHuman ;
5767: LD_ADDR_VAR 0 7
5771: PUSH
5772: CALL_OW 44
5776: ST_TO_ADDR
// result := Join ( result , un ) ;
5777: LD_ADDR_VAR 0 5
5781: PUSH
5782: LD_VAR 0 5
5786: PPUSH
5787: LD_VAR 0 7
5791: PPUSH
5792: CALL 49540 0 2
5796: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5797: LD_LOC 1
5801: PPUSH
5802: CALL 13564 0 1
5806: PUSH
5807: LD_VAR 0 3
5811: GREATEREQUAL
5812: IFFALSE 5908
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5814: LD_LOC 1
5818: PUSH
5819: LD_VAR 0 6
5823: PUSH
5824: LD_INT 1
5826: PLUS
5827: ARRAY
5828: PPUSH
5829: LD_VAR 0 7
5833: PPUSH
5834: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5838: LD_VAR 0 7
5842: PPUSH
5843: LD_INT 1
5845: PPUSH
5846: LD_LOC 1
5850: PUSH
5851: LD_VAR 0 6
5855: PUSH
5856: LD_INT 1
5858: PLUS
5859: ARRAY
5860: PPUSH
5861: LD_INT 1
5863: PPUSH
5864: CALL_OW 260
5868: PPUSH
5869: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5873: LD_VAR 0 7
5877: PPUSH
5878: LD_INT 2
5880: PPUSH
5881: LD_LOC 1
5885: PUSH
5886: LD_VAR 0 6
5890: PUSH
5891: LD_INT 1
5893: PLUS
5894: ARRAY
5895: PPUSH
5896: LD_INT 2
5898: PPUSH
5899: CALL_OW 260
5903: PPUSH
5904: CALL_OW 239
// end ; class := Inc ( class ) ;
5908: LD_ADDR_VAR 0 8
5912: PUSH
5913: LD_VAR 0 8
5917: PPUSH
5918: CALL 50913 0 1
5922: ST_TO_ADDR
// if class = 5 then
5923: LD_VAR 0 8
5927: PUSH
5928: LD_INT 5
5930: EQUAL
5931: IFFALSE 5941
// class := 1 ;
5933: LD_ADDR_VAR 0 8
5937: PUSH
5938: LD_INT 1
5940: ST_TO_ADDR
// end ;
5941: GO 5747
5943: POP
5944: POP
// if not mpTeamPreset then
5945: LD_LOC 1
5949: NOT
5950: IFFALSE 5962
// mpTeamPreset := result ;
5952: LD_ADDR_LOC 1
5956: PUSH
5957: LD_VAR 0 5
5961: ST_TO_ADDR
// end ;
5962: LD_VAR 0 5
5966: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5967: LD_INT 0
5969: PPUSH
5970: PPUSH
// result := [ ] ;
5971: LD_ADDR_VAR 0 4
5975: PUSH
5976: EMPTY
5977: ST_TO_ADDR
// if not vehicles then
5978: LD_VAR 0 3
5982: NOT
5983: IFFALSE 5987
// exit ;
5985: GO 6201
// for i := 1 to vehicles [ nation ] do
5987: LD_ADDR_VAR 0 5
5991: PUSH
5992: DOUBLE
5993: LD_INT 1
5995: DEC
5996: ST_TO_ADDR
5997: LD_VAR 0 3
6001: PUSH
6002: LD_VAR 0 2
6006: ARRAY
6007: PUSH
6008: FOR_TO
6009: IFFALSE 6199
// begin uc_side := side ;
6011: LD_ADDR_OWVAR 20
6015: PUSH
6016: LD_VAR 0 1
6020: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6021: LD_VAR 0 3
6025: PUSH
6026: LD_VAR 0 2
6030: ARRAY
6031: PUSH
6032: LD_VAR 0 5
6036: ARRAY
6037: PPUSH
6038: CALL 13564 0 1
6042: PUSH
6043: LD_INT 4
6045: GREATER
6046: IFFALSE 6076
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6048: LD_ADDR_OWVAR 21
6052: PUSH
6053: LD_VAR 0 3
6057: PUSH
6058: LD_VAR 0 2
6062: ARRAY
6063: PUSH
6064: LD_VAR 0 5
6068: ARRAY
6069: PUSH
6070: LD_INT 5
6072: ARRAY
6073: ST_TO_ADDR
6074: GO 6086
// uc_nation := nation ;
6076: LD_ADDR_OWVAR 21
6080: PUSH
6081: LD_VAR 0 2
6085: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6086: LD_VAR 0 3
6090: PUSH
6091: LD_VAR 0 2
6095: ARRAY
6096: PUSH
6097: LD_VAR 0 5
6101: ARRAY
6102: PUSH
6103: LD_INT 1
6105: ARRAY
6106: PPUSH
6107: LD_VAR 0 3
6111: PUSH
6112: LD_VAR 0 2
6116: ARRAY
6117: PUSH
6118: LD_VAR 0 5
6122: ARRAY
6123: PUSH
6124: LD_INT 2
6126: ARRAY
6127: PPUSH
6128: LD_VAR 0 3
6132: PUSH
6133: LD_VAR 0 2
6137: ARRAY
6138: PUSH
6139: LD_VAR 0 5
6143: ARRAY
6144: PUSH
6145: LD_INT 3
6147: ARRAY
6148: PPUSH
6149: LD_VAR 0 3
6153: PUSH
6154: LD_VAR 0 2
6158: ARRAY
6159: PUSH
6160: LD_VAR 0 5
6164: ARRAY
6165: PUSH
6166: LD_INT 4
6168: ARRAY
6169: PPUSH
6170: LD_INT 80
6172: PPUSH
6173: CALL 16360 0 5
// result := Join ( result , CreateVehicle ) ;
6177: LD_ADDR_VAR 0 4
6181: PUSH
6182: LD_VAR 0 4
6186: PPUSH
6187: CALL_OW 45
6191: PPUSH
6192: CALL 49540 0 2
6196: ST_TO_ADDR
// end ;
6197: GO 6008
6199: POP
6200: POP
// end ;
6201: LD_VAR 0 4
6205: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6206: LD_INT 0
6208: PPUSH
6209: PPUSH
// for i in mpBattleFlags do
6210: LD_ADDR_VAR 0 3
6214: PUSH
6215: LD_EXP 23
6219: PUSH
6220: FOR_IN
6221: IFFALSE 6298
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6223: LD_VAR 0 3
6227: PPUSH
6228: LD_INT 1
6230: PUSH
6231: LD_VAR 0 1
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 2
6242: PUSH
6243: LD_VAR 0 1
6247: PUSH
6248: LD_REAL  7.00000000000000E-0001
6251: MUL
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: LD_INT 3
6259: PUSH
6260: LD_VAR 0 1
6264: PUSH
6265: LD_REAL  4.00000000000000E-0001
6268: MUL
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PUSH
6274: LD_INT 20
6276: PUSH
6277: LD_VAR 0 1
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: PPUSH
6292: CALL_OW 423
6296: GO 6220
6298: POP
6299: POP
// end ;
6300: LD_VAR 0 2
6304: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6305: LD_INT 100
6307: IFFALSE 6402
6309: GO 6311
6311: DISABLE
6312: LD_INT 0
6314: PPUSH
6315: PPUSH
// begin if mpBattleFlag <= 0 then
6316: LD_EXP 22
6320: PUSH
6321: LD_INT 0
6323: LESSEQUAL
6324: IFFALSE 6328
// exit ;
6326: GO 6402
// strength := 100 ;
6328: LD_ADDR_VAR 0 2
6332: PUSH
6333: LD_INT 100
6335: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6336: LD_EXP 22
6340: PPUSH
6341: CALL_OW 67
// strength := Dec ( strength ) ;
6345: LD_ADDR_VAR 0 2
6349: PUSH
6350: LD_VAR 0 2
6354: PPUSH
6355: CALL 50935 0 1
6359: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6360: LD_VAR 0 2
6364: PPUSH
6365: CALL 6206 0 1
// until not strength ;
6369: LD_VAR 0 2
6373: NOT
6374: IFFALSE 6336
// for i in mpBattleFlags do
6376: LD_ADDR_VAR 0 1
6380: PUSH
6381: LD_EXP 23
6385: PUSH
6386: FOR_IN
6387: IFFALSE 6400
// KillBattleFlag ( i ) ;
6389: LD_VAR 0 1
6393: PPUSH
6394: CALL_OW 419
6398: GO 6386
6400: POP
6401: POP
// end ;
6402: PPOPN 2
6404: END
// every 0 0$1 marked mpActive do var side , tmp ;
6405: GO 6407
6407: DISABLE
6408: LD_INT 0
6410: PPUSH
6411: PPUSH
// begin if mpSibBomb <= 1 then
6412: LD_EXP 28
6416: PUSH
6417: LD_INT 1
6419: LESSEQUAL
6420: IFFALSE 6424
// exit ;
6422: GO 6497
// tmp := mpSibBomb ;
6424: LD_ADDR_VAR 0 2
6428: PUSH
6429: LD_EXP 28
6433: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6434: LD_INT 35
6436: PPUSH
6437: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6441: LD_ADDR_VAR 0 2
6445: PUSH
6446: LD_VAR 0 2
6450: PUSH
6451: LD_INT 35
6453: MINUS
6454: ST_TO_ADDR
// until not tmp ;
6455: LD_VAR 0 2
6459: NOT
6460: IFFALSE 6434
// for side := 1 to 8 do
6462: LD_ADDR_VAR 0 1
6466: PUSH
6467: DOUBLE
6468: LD_INT 1
6470: DEC
6471: ST_TO_ADDR
6472: LD_INT 8
6474: PUSH
6475: FOR_TO
6476: IFFALSE 6495
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6478: LD_INT 25
6480: PPUSH
6481: LD_VAR 0 1
6485: PPUSH
6486: LD_INT 1
6488: PPUSH
6489: CALL_OW 322
6493: GO 6475
6495: POP
6496: POP
// end ;
6497: PPOPN 2
6499: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6500: LD_INT 0
6502: PPUSH
6503: PPUSH
6504: PPUSH
// mpBuildUpTimeDelay := 0 ;
6505: LD_ADDR_EXP 48
6509: PUSH
6510: LD_INT 0
6512: ST_TO_ADDR
// if not mpBuildUpTime then
6513: LD_EXP 20
6517: NOT
6518: IFFALSE 6522
// exit ;
6520: GO 6711
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6522: LD_ADDR_EXP 48
6526: PUSH
6527: LD_INT 8400
6529: PUSH
6530: LD_INT 2100
6532: PUSH
6533: LD_EXP 20
6537: MUL
6538: PLUS
6539: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6540: LD_ADDR_EXP 49
6544: PUSH
6545: LD_INT 1
6547: ST_TO_ADDR
// for i := 1 to 8 do
6548: LD_ADDR_VAR 0 2
6552: PUSH
6553: DOUBLE
6554: LD_INT 1
6556: DEC
6557: ST_TO_ADDR
6558: LD_INT 8
6560: PUSH
6561: FOR_TO
6562: IFFALSE 6709
// if mpSidePositions [ i ] then
6564: LD_EXP 7
6568: PUSH
6569: LD_VAR 0 2
6573: ARRAY
6574: IFFALSE 6707
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6576: LD_EXP 19
6580: PUSH
6581: LD_EXP 7
6585: PUSH
6586: LD_VAR 0 2
6590: ARRAY
6591: ARRAY
6592: PPUSH
6593: LD_INT 5
6595: PPUSH
6596: CALL_OW 424
// for j := 1 to 8 do
6600: LD_ADDR_VAR 0 3
6604: PUSH
6605: DOUBLE
6606: LD_INT 1
6608: DEC
6609: ST_TO_ADDR
6610: LD_INT 8
6612: PUSH
6613: FOR_TO
6614: IFFALSE 6705
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6616: LD_EXP 7
6620: PUSH
6621: LD_VAR 0 3
6625: ARRAY
6626: IFFALSE 6675
6628: PUSH
6629: LD_EXP 8
6633: PUSH
6634: LD_VAR 0 2
6638: ARRAY
6639: PUSH
6640: LD_EXP 8
6644: PUSH
6645: LD_VAR 0 3
6649: ARRAY
6650: NONEQUAL
6651: IFTRUE 6674
6653: PUSH
6654: LD_EXP 11
6658: NOT
6659: IFFALSE 6673
6661: PUSH
6662: LD_VAR 0 2
6666: PUSH
6667: LD_VAR 0 3
6671: NONEQUAL
6672: AND
6673: OR
6674: AND
6675: IFFALSE 6703
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6677: LD_VAR 0 3
6681: PPUSH
6682: LD_EXP 19
6686: PUSH
6687: LD_EXP 7
6691: PUSH
6692: LD_VAR 0 2
6696: ARRAY
6697: ARRAY
6698: PPUSH
6699: CALL_OW 333
6703: GO 6613
6705: POP
6706: POP
// end ;
6707: GO 6561
6709: POP
6710: POP
// end ;
6711: LD_VAR 0 1
6715: RET
// function EndBuildUp ; var i , j ; begin
6716: LD_INT 0
6718: PPUSH
6719: PPUSH
6720: PPUSH
// mpBuildUpTimeActive := false ;
6721: LD_ADDR_EXP 49
6725: PUSH
6726: LD_INT 0
6728: ST_TO_ADDR
// for i := 1 to 8 do
6729: LD_ADDR_VAR 0 2
6733: PUSH
6734: DOUBLE
6735: LD_INT 1
6737: DEC
6738: ST_TO_ADDR
6739: LD_INT 8
6741: PUSH
6742: FOR_TO
6743: IFFALSE 6890
// if mpSidePositions [ i ] then
6745: LD_EXP 7
6749: PUSH
6750: LD_VAR 0 2
6754: ARRAY
6755: IFFALSE 6888
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6757: LD_EXP 19
6761: PUSH
6762: LD_EXP 7
6766: PUSH
6767: LD_VAR 0 2
6771: ARRAY
6772: ARRAY
6773: PPUSH
6774: LD_INT 0
6776: PPUSH
6777: CALL_OW 424
// for j := 1 to 8 do
6781: LD_ADDR_VAR 0 3
6785: PUSH
6786: DOUBLE
6787: LD_INT 1
6789: DEC
6790: ST_TO_ADDR
6791: LD_INT 8
6793: PUSH
6794: FOR_TO
6795: IFFALSE 6886
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6797: LD_EXP 7
6801: PUSH
6802: LD_VAR 0 3
6806: ARRAY
6807: IFFALSE 6856
6809: PUSH
6810: LD_EXP 8
6814: PUSH
6815: LD_VAR 0 2
6819: ARRAY
6820: PUSH
6821: LD_EXP 8
6825: PUSH
6826: LD_VAR 0 3
6830: ARRAY
6831: NONEQUAL
6832: IFTRUE 6855
6834: PUSH
6835: LD_EXP 11
6839: NOT
6840: IFFALSE 6854
6842: PUSH
6843: LD_VAR 0 2
6847: PUSH
6848: LD_VAR 0 3
6852: NONEQUAL
6853: AND
6854: OR
6855: AND
6856: IFFALSE 6884
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6858: LD_VAR 0 3
6862: PPUSH
6863: LD_EXP 19
6867: PUSH
6868: LD_EXP 7
6872: PUSH
6873: LD_VAR 0 2
6877: ARRAY
6878: ARRAY
6879: PPUSH
6880: CALL_OW 334
6884: GO 6794
6886: POP
6887: POP
// end ;
6888: GO 6742
6890: POP
6891: POP
// end ;
6892: LD_VAR 0 1
6896: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6897: LD_EXP 49
6901: IFFALSE 7080
6903: GO 6905
6905: DISABLE
6906: LD_INT 0
6908: PPUSH
6909: PPUSH
// begin for i := 1 to 8 do
6910: LD_ADDR_VAR 0 1
6914: PUSH
6915: DOUBLE
6916: LD_INT 1
6918: DEC
6919: ST_TO_ADDR
6920: LD_INT 8
6922: PUSH
6923: FOR_TO
6924: IFFALSE 7077
// if mpSidePositions [ i ] then
6926: LD_EXP 7
6930: PUSH
6931: LD_VAR 0 1
6935: ARRAY
6936: IFFALSE 7075
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6938: LD_ADDR_VAR 0 2
6942: PUSH
6943: LD_EXP 19
6947: PUSH
6948: LD_EXP 7
6952: PUSH
6953: LD_VAR 0 1
6957: ARRAY
6958: ARRAY
6959: PPUSH
6960: LD_INT 2
6962: PUSH
6963: LD_INT 21
6965: PUSH
6966: LD_INT 1
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: LD_INT 21
6975: PUSH
6976: LD_INT 2
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 22
6990: PUSH
6991: LD_OWVAR 2
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 70
7008: PUSH
7009: FOR_IN
7010: IFFALSE 7073
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7012: LD_EXP 8
7016: PUSH
7017: LD_VAR 0 1
7021: ARRAY
7022: PUSH
7023: LD_EXP 8
7027: PUSH
7028: LD_OWVAR 2
7032: ARRAY
7033: NONEQUAL
7034: IFTRUE 7057
7036: PUSH
7037: LD_EXP 11
7041: NOT
7042: IFFALSE 7056
7044: PUSH
7045: LD_VAR 0 1
7049: PUSH
7050: LD_OWVAR 2
7054: NONEQUAL
7055: AND
7056: OR
7057: IFFALSE 7071
// ComMoveToArea ( un , BuildUpEscape ) ;
7059: LD_VAR 0 2
7063: PPUSH
7064: LD_INT 13
7066: PPUSH
7067: CALL_OW 113
7071: GO 7009
7073: POP
7074: POP
7075: GO 6923
7077: POP
7078: POP
// enable ;
7079: ENABLE
// end ;
7080: PPOPN 2
7082: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7083: LD_EXP 20
7087: IFFALSE 7137
7089: GO 7091
7091: DISABLE
7092: LD_INT 0
7094: PPUSH
// begin tmp := mpBuildUpTime ;
7095: LD_ADDR_VAR 0 1
7099: PUSH
7100: LD_EXP 20
7104: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7105: LD_INT 35
7107: PPUSH
7108: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7112: LD_ADDR_VAR 0 1
7116: PUSH
7117: LD_VAR 0 1
7121: PUSH
7122: LD_INT 35
7124: MINUS
7125: ST_TO_ADDR
// until not tmp ;
7126: LD_VAR 0 1
7130: NOT
7131: IFFALSE 7105
// EndBuildUp ;
7133: CALL 6716 0 0
// end ;
7137: PPOPN 1
7139: END
// every 0 0$1 trigger mpActive marked mpWin do
7140: LD_INT 100
7142: IFFALSE 7176
7144: GO 7146
7146: DISABLE
// begin if IAmServer then
7147: CALL_OW 518
7151: IFFALSE 7160
// wait ( 0 0$3 ) ;
7153: LD_INT 105
7155: PPUSH
7156: CALL_OW 67
// if Multiplayer then
7160: LD_OWVAR 4
7164: IFFALSE 7172
// YouWinInMultiplayer else
7166: CALL_OW 106
7170: GO 7176
// YouWin ;
7172: CALL_OW 103
// end ;
7176: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7177: LD_INT 0
7179: PPUSH
// result := false ;
7180: LD_ADDR_VAR 0 3
7184: PUSH
7185: LD_INT 0
7187: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7188: LD_VAR 0 1
7192: PUSH
7193: LD_INT 1
7195: DOUBLE
7196: EQUAL
7197: IFTRUE 7219
7199: LD_INT 5
7201: DOUBLE
7202: EQUAL
7203: IFTRUE 7219
7205: LD_INT 6
7207: DOUBLE
7208: EQUAL
7209: IFTRUE 7219
7211: LD_INT 7
7213: DOUBLE
7214: EQUAL
7215: IFTRUE 7219
7217: GO 7292
7219: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7220: LD_ADDR_VAR 0 3
7224: PUSH
7225: LD_INT 22
7227: PUSH
7228: LD_VAR 0 2
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 2
7239: PUSH
7240: LD_INT 21
7242: PUSH
7243: LD_INT 1
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 33
7252: PUSH
7253: LD_INT 3
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 33
7262: PUSH
7263: LD_INT 5
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PPUSH
7280: CALL_OW 69
7284: PPUSH
7285: CALL 13564 0 1
7289: ST_TO_ADDR
// end ; GameTypeSurvival :
7290: GO 7688
7292: LD_INT 2
7294: DOUBLE
7295: EQUAL
7296: IFTRUE 7300
7298: GO 7430
7300: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7301: LD_ADDR_VAR 0 3
7305: PUSH
7306: LD_INT 22
7308: PUSH
7309: LD_VAR 0 2
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 2
7320: PUSH
7321: LD_INT 30
7323: PUSH
7324: LD_INT 0
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 30
7333: PUSH
7334: LD_INT 1
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: LIST
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PPUSH
7350: CALL_OW 69
7354: PPUSH
7355: CALL 13564 0 1
7359: IFFALSE 7427
7361: PUSH
7362: LD_INT 22
7364: PUSH
7365: LD_VAR 0 2
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 2
7376: PUSH
7377: LD_INT 21
7379: PUSH
7380: LD_INT 1
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PUSH
7387: LD_INT 33
7389: PUSH
7390: LD_INT 3
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: LD_INT 33
7399: PUSH
7400: LD_INT 5
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PPUSH
7417: CALL_OW 69
7421: PPUSH
7422: CALL 13564 0 1
7426: AND
7427: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
7428: GO 7688
7430: LD_INT 8
7432: DOUBLE
7433: EQUAL
7434: IFTRUE 7438
7436: GO 7587
7438: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7439: LD_ADDR_VAR 0 3
7443: PUSH
7444: LD_EXP 41
7448: PUSH
7449: LD_VAR 0 2
7453: ARRAY
7454: PPUSH
7455: CALL_OW 300
7459: IFFALSE 7516
7461: PUSH
7462: LD_INT 22
7464: PUSH
7465: LD_VAR 0 2
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: LD_INT 2
7476: PUSH
7477: LD_INT 30
7479: PUSH
7480: LD_INT 0
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: PUSH
7487: LD_INT 30
7489: PUSH
7490: LD_INT 1
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: LIST
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PPUSH
7506: CALL_OW 69
7510: PPUSH
7511: CALL 13564 0 1
7515: AND
7516: IFFALSE 7584
7518: PUSH
7519: LD_INT 22
7521: PUSH
7522: LD_VAR 0 2
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: LD_INT 2
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 1
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: LD_INT 33
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 33
7556: PUSH
7557: LD_INT 5
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PPUSH
7574: CALL_OW 69
7578: PPUSH
7579: CALL 13564 0 1
7583: AND
7584: ST_TO_ADDR
// end ; GameTypeKing :
7585: GO 7688
7587: LD_INT 3
7589: DOUBLE
7590: EQUAL
7591: IFTRUE 7595
7593: GO 7687
7595: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7596: LD_ADDR_VAR 0 3
7600: PUSH
7601: LD_INT 22
7603: PUSH
7604: LD_VAR 0 2
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 2
7615: PUSH
7616: LD_INT 21
7618: PUSH
7619: LD_INT 1
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 33
7628: PUSH
7629: LD_INT 3
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 33
7638: PUSH
7639: LD_INT 5
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PPUSH
7656: CALL_OW 69
7660: PPUSH
7661: CALL 13564 0 1
7665: IFFALSE 7684
7667: PUSH
7668: LD_VAR 0 2
7672: PPUSH
7673: CALL 62552 0 1
7677: PUSH
7678: LD_EXP 35
7682: LESS
7683: AND
7684: ST_TO_ADDR
// end ; end ;
7685: GO 7688
7687: POP
// end ;
7688: LD_VAR 0 3
7692: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7693: LD_INT 100
7695: IFFALSE 7925
7697: GO 7699
7699: DISABLE
7700: LD_INT 0
7702: PPUSH
7703: PPUSH
// begin if Multiplayer then
7704: LD_OWVAR 4
7708: IFFALSE 7716
// SetPlayerSpectator ( ) else
7710: CALL_OW 572
7714: GO 7725
// FogOff ( your_side ) ;
7716: LD_OWVAR 2
7720: PPUSH
7721: CALL_OW 344
// repeat gameIsOn := false ;
7725: LD_ADDR_VAR 0 1
7729: PUSH
7730: LD_INT 0
7732: ST_TO_ADDR
// for i := 1 to 8 do
7733: LD_ADDR_VAR 0 2
7737: PUSH
7738: DOUBLE
7739: LD_INT 1
7741: DEC
7742: ST_TO_ADDR
7743: LD_INT 8
7745: PUSH
7746: FOR_TO
7747: IFFALSE 7877
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7749: LD_EXP 7
7753: PUSH
7754: LD_VAR 0 2
7758: ARRAY
7759: IFFALSE 7772
7761: PUSH
7762: LD_VAR 0 2
7766: PPUSH
7767: CALL_OW 108
7771: AND
7772: IFFALSE 7786
7774: PUSH
7775: LD_VAR 0 2
7779: PUSH
7780: LD_OWVAR 2
7784: NONEQUAL
7785: AND
7786: IFFALSE 7875
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7788: LD_EXP 8
7792: PUSH
7793: LD_VAR 0 2
7797: ARRAY
7798: NOT
7799: IFTRUE 7847
7801: PUSH
7802: LD_EXP 8
7806: PUSH
7807: LD_VAR 0 2
7811: ARRAY
7812: PUSH
7813: LD_EXP 8
7817: PUSH
7818: LD_OWVAR 2
7822: ARRAY
7823: NONEQUAL
7824: IFFALSE 7846
7826: PUSH
7827: LD_OWVAR 2
7831: PPUSH
7832: LD_VAR 0 2
7836: PPUSH
7837: CALL_OW 81
7841: PUSH
7842: LD_INT 1
7844: NONEQUAL
7845: AND
7846: OR
7847: IFFALSE 7875
// if HasPowerByGameType ( mpGameType , i ) then
7849: LD_EXP 3
7853: PPUSH
7854: LD_VAR 0 2
7858: PPUSH
7859: CALL 7177 0 2
7863: IFFALSE 7875
// begin gameIsOn := true ;
7865: LD_ADDR_VAR 0 1
7869: PUSH
7870: LD_INT 1
7872: ST_TO_ADDR
// break ;
7873: GO 7877
// end ;
7875: GO 7746
7877: POP
7878: POP
// wait ( 100 ) ;
7879: LD_INT 100
7881: PPUSH
7882: CALL_OW 67
// until not gameIsOn ;
7886: LD_VAR 0 1
7890: NOT
7891: IFFALSE 7725
// if IAmServer then
7893: CALL_OW 518
7897: IFFALSE 7906
// wait ( 0 0$3 ) ;
7899: LD_INT 105
7901: PPUSH
7902: CALL_OW 67
// if Multiplayer then
7906: LD_OWVAR 4
7910: IFFALSE 7918
// YouLostInMultiplayer else
7912: CALL_OW 107
7916: GO 7925
// YouLost (  ) ;
7918: LD_STRING 
7920: PPUSH
7921: CALL_OW 104
// end ;
7925: PPOPN 2
7927: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7928: LD_EXP 33
7932: IFFALSE 8316
7934: GO 7936
7936: DISABLE
7937: LD_INT 0
7939: PPUSH
7940: PPUSH
7941: PPUSH
7942: PPUSH
7943: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7944: LD_ADDR_VAR 0 5
7948: PUSH
7949: LD_INT 1
7951: PUSH
7952: LD_INT 2
7954: PUSH
7955: LD_INT 3
7957: PUSH
7958: LD_INT 4
7960: PUSH
7961: LD_INT 5
7963: PUSH
7964: LD_INT 6
7966: PUSH
7967: LD_INT 7
7969: PUSH
7970: LD_INT 8
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7983: LD_INT 350
7985: PPUSH
7986: CALL_OW 67
// for i := 1 to 8 do
7990: LD_ADDR_VAR 0 1
7994: PUSH
7995: DOUBLE
7996: LD_INT 1
7998: DEC
7999: ST_TO_ADDR
8000: LD_INT 8
8002: PUSH
8003: FOR_TO
8004: IFFALSE 8286
// begin j := sides [ i ] ;
8006: LD_ADDR_VAR 0 2
8010: PUSH
8011: LD_VAR 0 5
8015: PUSH
8016: LD_VAR 0 1
8020: ARRAY
8021: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
8022: LD_EXP 40
8026: PUSH
8027: LD_VAR 0 2
8031: ARRAY
8032: PPUSH
8033: CALL 13564 0 1
8037: IFFALSE 8050
8039: PUSH
8040: LD_VAR 0 2
8044: PPUSH
8045: CALL_OW 108
8049: AND
8050: IFFALSE 8068
8052: PUSH
8053: LD_EXP 3
8057: PPUSH
8058: LD_VAR 0 2
8062: PPUSH
8063: CALL 7177 0 2
8067: AND
8068: IFFALSE 8284
// begin wait ( mpRespawn div 2 ) ;
8070: LD_EXP 33
8074: PUSH
8075: LD_INT 2
8077: DIV
8078: PPUSH
8079: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8083: LD_ADDR_VAR 0 3
8087: PUSH
8088: LD_INT 22
8090: PUSH
8091: LD_VAR 0 2
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: LD_INT 50
8102: PUSH
8103: EMPTY
8104: LIST
8105: PUSH
8106: LD_INT 2
8108: PUSH
8109: LD_INT 30
8111: PUSH
8112: LD_INT 0
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 30
8121: PUSH
8122: LD_INT 1
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: PPUSH
8139: CALL_OW 69
8143: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8144: LD_VAR 0 3
8148: NOT
8149: IFTRUE 8163
8151: PUSH
8152: LD_VAR 0 2
8156: PPUSH
8157: CALL_OW 108
8161: NOT
8162: OR
8163: IFTRUE 8182
8165: PUSH
8166: LD_EXP 3
8170: PPUSH
8171: LD_VAR 0 2
8175: PPUSH
8176: CALL 7177 0 2
8180: NOT
8181: OR
8182: IFFALSE 8186
// continue ;
8184: GO 8003
// spawn := tmp [ 1 ] ;
8186: LD_ADDR_VAR 0 4
8190: PUSH
8191: LD_VAR 0 3
8195: PUSH
8196: LD_INT 1
8198: ARRAY
8199: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8200: LD_EXP 40
8204: PUSH
8205: LD_VAR 0 2
8209: ARRAY
8210: PUSH
8211: LD_INT 1
8213: ARRAY
8214: PPUSH
8215: LD_VAR 0 4
8219: PPUSH
8220: CALL_OW 250
8224: PPUSH
8225: LD_VAR 0 4
8229: PPUSH
8230: CALL_OW 251
8234: PPUSH
8235: LD_INT 32
8237: PPUSH
8238: LD_INT 1
8240: PPUSH
8241: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8245: LD_ADDR_EXP 40
8249: PUSH
8250: LD_EXP 40
8254: PPUSH
8255: LD_VAR 0 2
8259: PPUSH
8260: LD_EXP 40
8264: PUSH
8265: LD_VAR 0 2
8269: ARRAY
8270: PPUSH
8271: LD_INT 1
8273: PPUSH
8274: CALL_OW 3
8278: PPUSH
8279: CALL_OW 1
8283: ST_TO_ADDR
// end ; end ;
8284: GO 8003
8286: POP
8287: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8288: LD_ADDR_VAR 0 5
8292: PUSH
8293: LD_VAR 0 5
8297: PPUSH
8298: LD_INT 1
8300: PPUSH
8301: LD_INT 8
8303: PPUSH
8304: LD_INT 1
8306: PPUSH
8307: CALL 15890 0 4
8311: ST_TO_ADDR
// until false ;
8312: LD_INT 0
8314: IFFALSE 7983
// end ;
8316: PPOPN 5
8318: END
// every 0 0$1 marked mpActive do
8319: GO 8321
8321: DISABLE
// begin enable ;
8322: ENABLE
// if not mpDisplayStrings then
8323: LD_EXP 38
8327: NOT
8328: IFFALSE 8339
// begin display_strings := [ ] ;
8330: LD_ADDR_OWVAR 47
8334: PUSH
8335: EMPTY
8336: ST_TO_ADDR
// exit ;
8337: GO 8349
// end ; display_strings := mpDisplayStrings ;
8339: LD_ADDR_OWVAR 47
8343: PUSH
8344: LD_EXP 38
8348: ST_TO_ADDR
// end ; end_of_file
8349: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8350: LD_INT 0
8352: PPUSH
8353: PPUSH
8354: PPUSH
8355: PPUSH
8356: PPUSH
8357: PPUSH
8358: PPUSH
8359: PPUSH
8360: PPUSH
// if GetType ( un ) = unit_vehicle then
8361: LD_VAR 0 1
8365: PPUSH
8366: CALL_OW 247
8370: PUSH
8371: LD_INT 2
8373: EQUAL
8374: IFFALSE 8378
// exit ;
8376: GO 9151
// side := GetSide ( un ) ;
8378: LD_ADDR_VAR 0 9
8382: PUSH
8383: LD_VAR 0 1
8387: PPUSH
8388: CALL_OW 255
8392: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
8393: LD_EXP 3
8397: PUSH
8398: LD_INT 2
8400: PUSH
8401: LD_INT 8
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: IN
8408: IFFALSE 8502
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8410: LD_VAR 0 1
8414: PPUSH
8415: CALL_OW 266
8419: PUSH
8420: LD_INT 0
8422: PUSH
8423: LD_INT 1
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: IN
8430: IFFALSE 8502
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8432: LD_ADDR_VAR 0 3
8436: PUSH
8437: LD_INT 22
8439: PUSH
8440: LD_VAR 0 9
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: LD_INT 2
8451: PUSH
8452: LD_INT 21
8454: PUSH
8455: LD_INT 1
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PUSH
8462: LD_INT 33
8464: PUSH
8465: LD_INT 3
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: LIST
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PPUSH
8481: CALL_OW 69
8485: PUSH
8486: FOR_IN
8487: IFFALSE 8500
// KillUnit ( i ) ;
8489: LD_VAR 0 3
8493: PPUSH
8494: CALL_OW 66
8498: GO 8486
8500: POP
8501: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
8502: LD_EXP 3
8506: PUSH
8507: LD_INT 8
8509: EQUAL
8510: IFFALSE 8594
// if un in mpCommanders then
8512: LD_VAR 0 1
8516: PUSH
8517: LD_EXP 41
8521: IN
8522: IFFALSE 8594
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8524: LD_ADDR_VAR 0 3
8528: PUSH
8529: LD_INT 22
8531: PUSH
8532: LD_VAR 0 9
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: LD_INT 2
8543: PUSH
8544: LD_INT 21
8546: PUSH
8547: LD_INT 1
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: PUSH
8554: LD_INT 33
8556: PUSH
8557: LD_INT 3
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: LIST
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: PPUSH
8573: CALL_OW 69
8577: PUSH
8578: FOR_IN
8579: IFFALSE 8592
// KillUnit ( i ) ;
8581: LD_VAR 0 3
8585: PPUSH
8586: CALL_OW 66
8590: GO 8578
8592: POP
8593: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8594: LD_VAR 0 1
8598: PPUSH
8599: CALL_OW 257
8603: PUSH
8604: LD_INT 12
8606: PUSH
8607: LD_INT 17
8609: PUSH
8610: LD_INT 15
8612: PUSH
8613: LD_INT 16
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: IN
8622: IFTRUE 8639
8624: PUSH
8625: LD_VAR 0 1
8629: PPUSH
8630: CALL_OW 263
8634: PUSH
8635: LD_INT 5
8637: EQUAL
8638: OR
8639: IFFALSE 8876
// begin tag := 0 ;
8641: LD_ADDR_VAR 0 5
8645: PUSH
8646: LD_INT 0
8648: ST_TO_ADDR
// for i := 1 to 8 do
8649: LD_ADDR_VAR 0 3
8653: PUSH
8654: DOUBLE
8655: LD_INT 1
8657: DEC
8658: ST_TO_ADDR
8659: LD_INT 8
8661: PUSH
8662: FOR_TO
8663: IFFALSE 8697
// if un in mpApePosIndex [ i ] then
8665: LD_VAR 0 1
8669: PUSH
8670: LD_EXP 32
8674: PUSH
8675: LD_VAR 0 3
8679: ARRAY
8680: IN
8681: IFFALSE 8695
// begin tag := i ;
8683: LD_ADDR_VAR 0 5
8687: PUSH
8688: LD_VAR 0 3
8692: ST_TO_ADDR
// break ;
8693: GO 8697
// end ;
8695: GO 8662
8697: POP
8698: POP
// if not tag then
8699: LD_VAR 0 5
8703: NOT
8704: IFFALSE 8708
// exit ;
8706: GO 9151
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8708: LD_ADDR_VAR 0 7
8712: PUSH
8713: LD_EXP 31
8717: PUSH
8718: LD_EXP 7
8722: PUSH
8723: LD_VAR 0 5
8727: ARRAY
8728: ARRAY
8729: ST_TO_ADDR
// if not area then
8730: LD_VAR 0 7
8734: NOT
8735: IFFALSE 8739
// exit ;
8737: GO 9151
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8739: LD_INT 14700
8741: PUSH
8742: LD_VAR 0 1
8746: PUSH
8747: LD_INT 5
8749: MOD
8750: PUSH
8751: LD_INT 1
8753: PLUS
8754: PUSH
8755: LD_INT 700
8757: MUL
8758: PLUS
8759: PPUSH
8760: CALL_OW 67
// repeat wait ( 10 ) ;
8764: LD_INT 10
8766: PPUSH
8767: CALL_OW 67
// until not mpBlockRespThread ;
8771: LD_EXP 47
8775: NOT
8776: IFFALSE 8764
// mpBlockRespThread := true ;
8778: LD_ADDR_EXP 47
8782: PUSH
8783: LD_INT 1
8785: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8786: LD_INT 0
8788: PPUSH
8789: CALL 45667 0 1
// ape := CreateHuman ;
8793: LD_ADDR_VAR 0 4
8797: PUSH
8798: CALL_OW 44
8802: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8803: LD_ADDR_EXP 32
8807: PUSH
8808: LD_EXP 32
8812: PPUSH
8813: LD_VAR 0 5
8817: PPUSH
8818: LD_EXP 32
8822: PUSH
8823: LD_VAR 0 5
8827: ARRAY
8828: PPUSH
8829: LD_VAR 0 4
8833: PPUSH
8834: CALL 49540 0 2
8838: PPUSH
8839: CALL_OW 1
8843: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8844: LD_VAR 0 4
8848: PPUSH
8849: LD_VAR 0 7
8853: PPUSH
8854: LD_INT 0
8856: PPUSH
8857: CALL_OW 49
// wait ( 10 ) ;
8861: LD_INT 10
8863: PPUSH
8864: CALL_OW 67
// mpBlockRespThread := false ;
8868: LD_ADDR_EXP 47
8872: PUSH
8873: LD_INT 0
8875: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8876: LD_VAR 0 1
8880: PPUSH
8881: CALL_OW 247
8885: PUSH
8886: LD_INT 1
8888: EQUAL
8889: IFFALSE 8906
8891: PUSH
8892: LD_VAR 0 1
8896: PPUSH
8897: CALL_OW 248
8901: PUSH
8902: LD_INT 0
8904: GREATER
8905: AND
8906: IFFALSE 9151
// begin if not mpRespawn then
8908: LD_EXP 33
8912: NOT
8913: IFFALSE 8917
// exit ;
8915: GO 9151
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8917: LD_VAR 0 9
8921: PPUSH
8922: CALL_OW 108
8926: NOT
8927: IFFALSE 8946
8929: PUSH
8930: LD_EXP 3
8934: PPUSH
8935: LD_VAR 0 9
8939: PPUSH
8940: CALL 7177 0 2
8944: NOT
8945: AND
8946: IFFALSE 8950
// exit ;
8948: GO 9151
// side := GetSide ( un ) ;
8950: LD_ADDR_VAR 0 9
8954: PUSH
8955: LD_VAR 0 1
8959: PPUSH
8960: CALL_OW 255
8964: ST_TO_ADDR
// nation := GetNation ( un ) ;
8965: LD_ADDR_VAR 0 8
8969: PUSH
8970: LD_VAR 0 1
8974: PPUSH
8975: CALL_OW 248
8979: ST_TO_ADDR
// class := GetClass ( un ) ;
8980: LD_ADDR_VAR 0 6
8984: PUSH
8985: LD_VAR 0 1
8989: PPUSH
8990: CALL_OW 257
8994: ST_TO_ADDR
// if class > 4 then
8995: LD_VAR 0 6
8999: PUSH
9000: LD_INT 4
9002: GREATER
9003: IFFALSE 9013
// class := 1 ;
9005: LD_ADDR_VAR 0 6
9009: PUSH
9010: LD_INT 1
9012: ST_TO_ADDR
// repeat wait ( 10 ) ;
9013: LD_INT 10
9015: PPUSH
9016: CALL_OW 67
// until not mpBlockRespThread ;
9020: LD_EXP 47
9024: NOT
9025: IFFALSE 9013
// mpBlockRespThread := true ;
9027: LD_ADDR_EXP 47
9031: PUSH
9032: LD_INT 1
9034: ST_TO_ADDR
// uc_side := side ;
9035: LD_ADDR_OWVAR 20
9039: PUSH
9040: LD_VAR 0 9
9044: ST_TO_ADDR
// uc_nation := nation ;
9045: LD_ADDR_OWVAR 21
9049: PUSH
9050: LD_VAR 0 8
9054: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
9055: LD_INT 0
9057: PPUSH
9058: LD_VAR 0 6
9062: PPUSH
9063: LD_INT 2
9065: PPUSH
9066: CALL_OW 380
// un := CreateHuman ;
9070: LD_ADDR_VAR 0 1
9074: PUSH
9075: CALL_OW 44
9079: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
9080: LD_ADDR_EXP 40
9084: PUSH
9085: LD_EXP 40
9089: PPUSH
9090: LD_VAR 0 9
9094: PPUSH
9095: LD_EXP 40
9099: PUSH
9100: LD_VAR 0 9
9104: ARRAY
9105: PPUSH
9106: LD_EXP 40
9110: PUSH
9111: LD_VAR 0 9
9115: ARRAY
9116: PUSH
9117: LD_INT 1
9119: PLUS
9120: PPUSH
9121: LD_VAR 0 1
9125: PPUSH
9126: CALL_OW 1
9130: PPUSH
9131: CALL_OW 1
9135: ST_TO_ADDR
// wait ( 10 ) ;
9136: LD_INT 10
9138: PPUSH
9139: CALL_OW 67
// mpBlockRespThread := false ;
9143: LD_ADDR_EXP 47
9147: PUSH
9148: LD_INT 0
9150: ST_TO_ADDR
// end ; end ;
9151: LD_VAR 0 2
9155: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
9156: LD_INT 0
9158: PPUSH
9159: PPUSH
9160: PPUSH
9161: PPUSH
9162: PPUSH
// tag := 0 ;
9163: LD_ADDR_VAR 0 5
9167: PUSH
9168: LD_INT 0
9170: ST_TO_ADDR
// for i := 1 to 8 do
9171: LD_ADDR_VAR 0 4
9175: PUSH
9176: DOUBLE
9177: LD_INT 1
9179: DEC
9180: ST_TO_ADDR
9181: LD_INT 8
9183: PUSH
9184: FOR_TO
9185: IFFALSE 9219
// if un in mpApePosIndex [ i ] then
9187: LD_VAR 0 2
9191: PUSH
9192: LD_EXP 32
9196: PUSH
9197: LD_VAR 0 4
9201: ARRAY
9202: IN
9203: IFFALSE 9217
// begin tag := i ;
9205: LD_ADDR_VAR 0 5
9209: PUSH
9210: LD_VAR 0 4
9214: ST_TO_ADDR
// break ;
9215: GO 9219
// end ;
9217: GO 9184
9219: POP
9220: POP
// if not tag then
9221: LD_VAR 0 5
9225: NOT
9226: IFFALSE 9230
// exit ;
9228: GO 9398
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9230: LD_ADDR_VAR 0 6
9234: PUSH
9235: LD_EXP 31
9239: PUSH
9240: LD_EXP 7
9244: PUSH
9245: LD_VAR 0 5
9249: ARRAY
9250: ARRAY
9251: ST_TO_ADDR
// if not area then
9252: LD_VAR 0 6
9256: NOT
9257: IFFALSE 9261
// exit ;
9259: GO 9398
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9261: LD_INT 14700
9263: PUSH
9264: LD_VAR 0 2
9268: PUSH
9269: LD_INT 5
9271: MOD
9272: PUSH
9273: LD_INT 1
9275: PLUS
9276: PUSH
9277: LD_INT 700
9279: MUL
9280: PLUS
9281: PPUSH
9282: CALL_OW 67
// repeat wait ( 10 ) ;
9286: LD_INT 10
9288: PPUSH
9289: CALL_OW 67
// until not mpBlockRespThread ;
9293: LD_EXP 47
9297: NOT
9298: IFFALSE 9286
// mpBlockRespThread := true ;
9300: LD_ADDR_EXP 47
9304: PUSH
9305: LD_INT 1
9307: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9308: LD_INT 0
9310: PPUSH
9311: CALL 45667 0 1
// ape := CreateHuman ;
9315: LD_ADDR_VAR 0 7
9319: PUSH
9320: CALL_OW 44
9324: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9325: LD_ADDR_EXP 32
9329: PUSH
9330: LD_EXP 32
9334: PPUSH
9335: LD_VAR 0 5
9339: PPUSH
9340: LD_EXP 32
9344: PUSH
9345: LD_VAR 0 5
9349: ARRAY
9350: PPUSH
9351: LD_VAR 0 7
9355: PPUSH
9356: CALL 49540 0 2
9360: PPUSH
9361: CALL_OW 1
9365: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9366: LD_VAR 0 7
9370: PPUSH
9371: LD_VAR 0 6
9375: PPUSH
9376: LD_INT 0
9378: PPUSH
9379: CALL_OW 49
// wait ( 10 ) ;
9383: LD_INT 10
9385: PPUSH
9386: CALL_OW 67
// mpBlockRespThread := false ;
9390: LD_ADDR_EXP 47
9394: PUSH
9395: LD_INT 0
9397: ST_TO_ADDR
// end ;
9398: LD_VAR 0 3
9402: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9403: LD_INT 0
9405: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9406: LD_VAR 0 1
9410: PPUSH
9411: CALL_OW 266
9415: PUSH
9416: LD_INT 0
9418: PUSH
9419: LD_INT 1
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: IN
9426: IFFALSE 9451
// SetBName ( building , @ & GetSide ( building ) ) ;
9428: LD_VAR 0 1
9432: PPUSH
9433: LD_STRING @
9435: PUSH
9436: LD_VAR 0 1
9440: PPUSH
9441: CALL_OW 255
9445: STR
9446: PPUSH
9447: CALL_OW 500
// end ;
9451: LD_VAR 0 2
9455: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9456: LD_INT 0
9458: PPUSH
9459: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
9460: LD_EXP 3
9464: PUSH
9465: LD_INT 2
9467: PUSH
9468: LD_INT 8
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: IN
9475: IFFALSE 9499
9477: PUSH
9478: LD_VAR 0 1
9482: PPUSH
9483: CALL_OW 266
9487: PUSH
9488: LD_INT 0
9490: PUSH
9491: LD_INT 1
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: IN
9498: AND
9499: IFFALSE 9578
// begin SetSide ( building , oldSide ) ;
9501: LD_VAR 0 1
9505: PPUSH
9506: LD_VAR 0 2
9510: PPUSH
9511: CALL_OW 235
// KillUnit ( building ) ;
9515: LD_VAR 0 1
9519: PPUSH
9520: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9524: LD_ADDR_VAR 0 5
9528: PUSH
9529: LD_INT 22
9531: PUSH
9532: LD_VAR 0 2
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: LD_INT 21
9543: PUSH
9544: LD_INT 1
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PPUSH
9555: CALL_OW 69
9559: PUSH
9560: FOR_IN
9561: IFFALSE 9574
// KillUnit ( i ) ;
9563: LD_VAR 0 5
9567: PPUSH
9568: CALL_OW 66
9572: GO 9560
9574: POP
9575: POP
// exit ;
9576: GO 9623
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9578: LD_VAR 0 1
9582: PPUSH
9583: CALL_OW 266
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 1
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: IN
9598: IFFALSE 9623
// SetBName ( building , @ & GetSide ( building ) ) ;
9600: LD_VAR 0 1
9604: PPUSH
9605: LD_STRING @
9607: PUSH
9608: LD_VAR 0 1
9612: PPUSH
9613: CALL_OW 255
9617: STR
9618: PPUSH
9619: CALL_OW 500
// end ;
9623: LD_VAR 0 4
9627: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9628: LD_INT 0
9630: PPUSH
9631: PPUSH
9632: PPUSH
// if mpGameType <> GameTypeFamine then
9633: LD_EXP 3
9637: PUSH
9638: LD_INT 5
9640: NONEQUAL
9641: IFFALSE 9645
// exit ;
9643: GO 9879
// for i := 1 to mpGlobalOilDeposits do
9645: LD_ADDR_VAR 0 6
9649: PUSH
9650: DOUBLE
9651: LD_INT 1
9653: DEC
9654: ST_TO_ADDR
9655: LD_EXP 42
9659: PUSH
9660: FOR_TO
9661: IFFALSE 9877
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9663: LD_EXP 42
9667: PUSH
9668: LD_VAR 0 6
9672: ARRAY
9673: PUSH
9674: LD_INT 1
9676: ARRAY
9677: PPUSH
9678: LD_EXP 42
9682: PUSH
9683: LD_VAR 0 6
9687: ARRAY
9688: PUSH
9689: LD_INT 2
9691: ARRAY
9692: PPUSH
9693: CALL_OW 428
9697: PUSH
9698: LD_VAR 0 1
9702: EQUAL
9703: IFFALSE 9875
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9705: LD_ADDR_VAR 0 7
9709: PUSH
9710: LD_EXP 42
9714: PUSH
9715: LD_VAR 0 6
9719: ARRAY
9720: PUSH
9721: LD_INT 3
9723: ARRAY
9724: ST_TO_ADDR
// value := value - amount ;
9725: LD_ADDR_VAR 0 7
9729: PUSH
9730: LD_VAR 0 7
9734: PUSH
9735: LD_VAR 0 4
9739: MINUS
9740: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9741: LD_ADDR_EXP 42
9745: PUSH
9746: LD_EXP 42
9750: PPUSH
9751: LD_VAR 0 6
9755: PPUSH
9756: LD_EXP 42
9760: PUSH
9761: LD_VAR 0 6
9765: ARRAY
9766: PPUSH
9767: LD_INT 3
9769: PPUSH
9770: LD_VAR 0 7
9774: PPUSH
9775: CALL_OW 1
9779: PPUSH
9780: CALL_OW 1
9784: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9785: LD_VAR 0 2
9789: PUSH
9790: LD_OWVAR 2
9794: PUSH
9795: LD_INT 9
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: IN
9802: IFFALSE 9818
// SetUnitDisplayNumber ( building , value ) ;
9804: LD_VAR 0 1
9808: PPUSH
9809: LD_VAR 0 7
9813: PPUSH
9814: CALL_OW 505
// if value <= 0 then
9818: LD_VAR 0 7
9822: PUSH
9823: LD_INT 0
9825: LESSEQUAL
9826: IFFALSE 9875
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9828: LD_EXP 42
9832: PUSH
9833: LD_VAR 0 6
9837: ARRAY
9838: PUSH
9839: LD_INT 1
9841: ARRAY
9842: PPUSH
9843: LD_EXP 42
9847: PUSH
9848: LD_VAR 0 6
9852: ARRAY
9853: PUSH
9854: LD_INT 2
9856: ARRAY
9857: PPUSH
9858: CALL_OW 63
// KillUnit ( building ) ;
9862: LD_VAR 0 1
9866: PPUSH
9867: CALL_OW 66
// exit ;
9871: POP
9872: POP
9873: GO 9879
// end ; end ; end ;
9875: GO 9660
9877: POP
9878: POP
// end ;
9879: LD_VAR 0 5
9883: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9884: LD_INT 0
9886: PPUSH
9887: PPUSH
9888: PPUSH
// if mpGameType <> GameTypeFamine then
9889: LD_EXP 3
9893: PUSH
9894: LD_INT 5
9896: NONEQUAL
9897: IFFALSE 9901
// exit ;
9899: GO 10135
// for i := 1 to mpGlobalSibDeposits do
9901: LD_ADDR_VAR 0 6
9905: PUSH
9906: DOUBLE
9907: LD_INT 1
9909: DEC
9910: ST_TO_ADDR
9911: LD_EXP 43
9915: PUSH
9916: FOR_TO
9917: IFFALSE 10133
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9919: LD_EXP 43
9923: PUSH
9924: LD_VAR 0 6
9928: ARRAY
9929: PUSH
9930: LD_INT 1
9932: ARRAY
9933: PPUSH
9934: LD_EXP 43
9938: PUSH
9939: LD_VAR 0 6
9943: ARRAY
9944: PUSH
9945: LD_INT 2
9947: ARRAY
9948: PPUSH
9949: CALL_OW 428
9953: PUSH
9954: LD_VAR 0 1
9958: EQUAL
9959: IFFALSE 10131
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9961: LD_ADDR_VAR 0 7
9965: PUSH
9966: LD_EXP 43
9970: PUSH
9971: LD_VAR 0 6
9975: ARRAY
9976: PUSH
9977: LD_INT 3
9979: ARRAY
9980: ST_TO_ADDR
// value := value - amount ;
9981: LD_ADDR_VAR 0 7
9985: PUSH
9986: LD_VAR 0 7
9990: PUSH
9991: LD_VAR 0 4
9995: MINUS
9996: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9997: LD_ADDR_EXP 43
10001: PUSH
10002: LD_EXP 43
10006: PPUSH
10007: LD_VAR 0 6
10011: PPUSH
10012: LD_EXP 43
10016: PUSH
10017: LD_VAR 0 6
10021: ARRAY
10022: PPUSH
10023: LD_INT 3
10025: PPUSH
10026: LD_VAR 0 7
10030: PPUSH
10031: CALL_OW 1
10035: PPUSH
10036: CALL_OW 1
10040: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10041: LD_VAR 0 2
10045: PUSH
10046: LD_OWVAR 2
10050: PUSH
10051: LD_INT 9
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: IN
10058: IFFALSE 10074
// SetUnitDisplayNumber ( building , value ) ;
10060: LD_VAR 0 1
10064: PPUSH
10065: LD_VAR 0 7
10069: PPUSH
10070: CALL_OW 505
// if value <= 0 then
10074: LD_VAR 0 7
10078: PUSH
10079: LD_INT 0
10081: LESSEQUAL
10082: IFFALSE 10131
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
10084: LD_EXP 43
10088: PUSH
10089: LD_VAR 0 6
10093: ARRAY
10094: PUSH
10095: LD_INT 1
10097: ARRAY
10098: PPUSH
10099: LD_EXP 43
10103: PUSH
10104: LD_VAR 0 6
10108: ARRAY
10109: PUSH
10110: LD_INT 2
10112: ARRAY
10113: PPUSH
10114: CALL_OW 63
// KillUnit ( building ) ;
10118: LD_VAR 0 1
10122: PPUSH
10123: CALL_OW 66
// exit ;
10127: POP
10128: POP
10129: GO 10135
// end ; end ; end ;
10131: GO 9916
10133: POP
10134: POP
// end ;
10135: LD_VAR 0 5
10139: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
10140: LD_INT 0
10142: PPUSH
10143: PPUSH
// side := GetSide ( factory ) ;
10144: LD_ADDR_VAR 0 7
10148: PUSH
10149: LD_VAR 0 1
10153: PPUSH
10154: CALL_OW 255
10158: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
10159: LD_VAR 0 5
10163: PUSH
10164: LD_INT 81
10166: EQUAL
10167: IFFALSE 10205
10169: PUSH
10170: LD_INT 22
10172: PUSH
10173: LD_VAR 0 7
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: LD_INT 34
10184: PUSH
10185: LD_INT 81
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 69
10200: PUSH
10201: LD_INT 0
10203: GREATER
10204: AND
10205: IFFALSE 10238
// begin ComCancel ( factory ) ;
10207: LD_VAR 0 1
10211: PPUSH
10212: CALL_OW 127
// if side = your_side then
10216: LD_VAR 0 7
10220: PUSH
10221: LD_OWVAR 2
10225: EQUAL
10226: IFFALSE 10238
// HintSpec ( VehLimit , 2 ) ;
10228: LD_STRING VehLimit
10230: PPUSH
10231: LD_INT 2
10233: PPUSH
10234: CALL_OW 338
// end ; end ;
10238: LD_VAR 0 6
10242: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
10243: LD_INT 0
10245: PPUSH
10246: PPUSH
10247: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
10248: LD_VAR 0 1
10252: PPUSH
10253: CALL_OW 264
10257: PUSH
10258: LD_INT 81
10260: EQUAL
10261: IFFALSE 10278
10263: PUSH
10264: LD_VAR 0 1
10268: PPUSH
10269: CALL_OW 263
10273: PUSH
10274: LD_INT 1
10276: EQUAL
10277: AND
10278: IFFALSE 10558
// begin for i := 1 to Count ( minersList ) do
10280: LD_ADDR_VAR 0 6
10284: PUSH
10285: DOUBLE
10286: LD_INT 1
10288: DEC
10289: ST_TO_ADDR
10290: LD_EXP 57
10294: PPUSH
10295: CALL 13564 0 1
10299: PUSH
10300: FOR_TO
10301: IFFALSE 10419
// begin if minersList [ i ] = oldId then
10303: LD_EXP 57
10307: PUSH
10308: LD_VAR 0 6
10312: ARRAY
10313: PUSH
10314: LD_VAR 0 2
10318: EQUAL
10319: IFFALSE 10417
// begin for j := 1 to minerMinesList [ i ] do
10321: LD_ADDR_VAR 0 7
10325: PUSH
10326: DOUBLE
10327: LD_INT 1
10329: DEC
10330: ST_TO_ADDR
10331: LD_EXP 58
10335: PUSH
10336: LD_VAR 0 6
10340: ARRAY
10341: PUSH
10342: FOR_TO
10343: IFFALSE 10393
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
10345: LD_EXP 58
10349: PUSH
10350: LD_VAR 0 6
10354: ARRAY
10355: PUSH
10356: LD_VAR 0 7
10360: ARRAY
10361: PUSH
10362: LD_INT 1
10364: ARRAY
10365: PPUSH
10366: LD_EXP 58
10370: PUSH
10371: LD_VAR 0 6
10375: ARRAY
10376: PUSH
10377: LD_VAR 0 7
10381: ARRAY
10382: PUSH
10383: LD_INT 2
10385: ARRAY
10386: PPUSH
10387: CALL_OW 612
10391: GO 10342
10393: POP
10394: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
10395: LD_ADDR_EXP 58
10399: PUSH
10400: LD_EXP 58
10404: PPUSH
10405: LD_VAR 0 6
10409: PPUSH
10410: CALL_OW 3
10414: ST_TO_ADDR
// break ;
10415: GO 10419
// end ; end ;
10417: GO 10300
10419: POP
10420: POP
// minersList := minersList diff oldId ;
10421: LD_ADDR_EXP 57
10425: PUSH
10426: LD_EXP 57
10430: PUSH
10431: LD_VAR 0 2
10435: DIFF
10436: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10437: LD_INT 22
10439: PUSH
10440: LD_VAR 0 4
10444: PPUSH
10445: CALL_OW 255
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PUSH
10454: LD_INT 34
10456: PUSH
10457: LD_INT 81
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PPUSH
10468: CALL_OW 69
10472: PUSH
10473: LD_INT 1
10475: GREATER
10476: IFFALSE 10503
// begin ComExit ( unit ) ;
10478: LD_VAR 0 4
10482: PPUSH
10483: CALL 49938 0 1
// SetSide ( newId , oldSide ) ;
10487: LD_VAR 0 1
10491: PPUSH
10492: LD_VAR 0 3
10496: PPUSH
10497: CALL_OW 235
// exit ;
10501: GO 10558
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10503: LD_ADDR_EXP 57
10507: PUSH
10508: LD_EXP 57
10512: PPUSH
10513: LD_EXP 57
10517: PUSH
10518: LD_INT 1
10520: PLUS
10521: PPUSH
10522: LD_VAR 0 1
10526: PPUSH
10527: CALL_OW 1
10531: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10532: LD_ADDR_EXP 58
10536: PUSH
10537: LD_EXP 58
10541: PPUSH
10542: LD_EXP 58
10546: PUSH
10547: LD_INT 1
10549: PLUS
10550: PPUSH
10551: EMPTY
10552: PPUSH
10553: CALL_OW 1
10557: ST_TO_ADDR
// end ; end ; end_of_file
10558: LD_VAR 0 5
10562: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10563: LD_EXP 39
10567: IFFALSE 10575
10569: PUSH
10570: CALL 10785 0 0
10574: AND
10575: IFFALSE 10583
10577: PUSH
10578: LD_OWVAR 4
10582: AND
10583: IFFALSE 10782
10585: GO 10587
10587: DISABLE
10588: LD_INT 0
10590: PPUSH
10591: PPUSH
// begin canWin := false ;
10592: LD_ADDR_VAR 0 2
10596: PUSH
10597: LD_INT 0
10599: ST_TO_ADDR
// if not HasPower ( your_side ) then
10600: LD_OWVAR 2
10604: PPUSH
10605: CALL 10827 0 1
10609: NOT
10610: IFFALSE 10621
// begin Multiplayer_Loose_Message ;
10612: CALL_OW 521
// enable ( mpLose ) ;
10616: LD_INT 102
10618: ENABLE_MARKED
// end else
10619: GO 10782
// begin canWin := true ;
10621: LD_ADDR_VAR 0 2
10625: PUSH
10626: LD_INT 1
10628: ST_TO_ADDR
// for i := 1 to 8 do
10629: LD_ADDR_VAR 0 1
10633: PUSH
10634: DOUBLE
10635: LD_INT 1
10637: DEC
10638: ST_TO_ADDR
10639: LD_INT 8
10641: PUSH
10642: FOR_TO
10643: IFFALSE 10768
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10645: LD_EXP 7
10649: PUSH
10650: LD_VAR 0 1
10654: ARRAY
10655: IFFALSE 10668
10657: PUSH
10658: LD_VAR 0 1
10662: PPUSH
10663: CALL_OW 108
10667: AND
10668: IFFALSE 10682
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: LD_OWVAR 2
10680: NONEQUAL
10681: AND
10682: IFFALSE 10766
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10684: LD_EXP 8
10688: PUSH
10689: LD_VAR 0 1
10693: ARRAY
10694: NOT
10695: IFTRUE 10743
10697: PUSH
10698: LD_EXP 8
10702: PUSH
10703: LD_VAR 0 1
10707: ARRAY
10708: PUSH
10709: LD_EXP 8
10713: PUSH
10714: LD_OWVAR 2
10718: ARRAY
10719: NONEQUAL
10720: IFFALSE 10742
10722: PUSH
10723: LD_OWVAR 2
10727: PPUSH
10728: LD_VAR 0 1
10732: PPUSH
10733: CALL_OW 81
10737: PUSH
10738: LD_INT 1
10740: NONEQUAL
10741: AND
10742: OR
10743: IFFALSE 10766
// if HasPower ( i ) then
10745: LD_VAR 0 1
10749: PPUSH
10750: CALL 10827 0 1
10754: IFFALSE 10766
// begin canWin := false ;
10756: LD_ADDR_VAR 0 2
10760: PUSH
10761: LD_INT 0
10763: ST_TO_ADDR
// break ;
10764: GO 10768
// end ;
10766: GO 10642
10768: POP
10769: POP
// if canWin then
10770: LD_VAR 0 2
10774: IFFALSE 10781
// enable ( mpWin ) else
10776: LD_INT 101
10778: ENABLE_MARKED
10779: GO 10782
// enable ;
10781: ENABLE
// end ; end ;
10782: PPOPN 2
10784: END
// function CanWinLoose ; begin
10785: LD_INT 0
10787: PPUSH
// result := true ;
10788: LD_ADDR_VAR 0 1
10792: PUSH
10793: LD_INT 1
10795: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10796: CALL_OW 531
10800: IFFALSE 10812
10802: PUSH
10803: CALL_OW 519
10807: PUSH
10808: LD_INT 1
10810: GREATER
10811: AND
10812: IFFALSE 10822
// result := false ;
10814: LD_ADDR_VAR 0 1
10818: PUSH
10819: LD_INT 0
10821: ST_TO_ADDR
// end ;
10822: LD_VAR 0 1
10826: RET
// function HasPower ( i ) ; begin
10827: LD_INT 0
10829: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10830: LD_ADDR_VAR 0 2
10834: PUSH
10835: LD_INT 22
10837: PUSH
10838: LD_VAR 0 1
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 2
10849: PUSH
10850: LD_INT 21
10852: PUSH
10853: LD_INT 1
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: LD_INT 33
10862: PUSH
10863: LD_INT 3
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 33
10872: PUSH
10873: LD_INT 5
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PPUSH
10890: CALL_OW 69
10894: ST_TO_ADDR
// end ; end_of_file
10895: LD_VAR 0 2
10899: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10900: LD_EXP 39
10904: IFFALSE 10947
10906: GO 10908
10908: DISABLE
10909: LD_INT 0
10911: PPUSH
// begin for i := 1 to 8 do
10912: LD_ADDR_VAR 0 1
10916: PUSH
10917: DOUBLE
10918: LD_INT 1
10920: DEC
10921: ST_TO_ADDR
10922: LD_INT 8
10924: PUSH
10925: FOR_TO
10926: IFFALSE 10945
// SetRestrict ( b_depot , i , state_disabled ) ;
10928: LD_INT 0
10930: PPUSH
10931: LD_VAR 0 1
10935: PPUSH
10936: LD_INT 0
10938: PPUSH
10939: CALL_OW 324
10943: GO 10925
10945: POP
10946: POP
// end ;
10947: PPOPN 1
10949: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10950: LD_EXP 39
10954: IFFALSE 10962
10956: PUSH
10957: CALL 11172 0 0
10961: AND
10962: IFFALSE 10970
10964: PUSH
10965: LD_OWVAR 4
10969: AND
10970: IFFALSE 11169
10972: GO 10974
10974: DISABLE
10975: LD_INT 0
10977: PPUSH
10978: PPUSH
// begin canWin := false ;
10979: LD_ADDR_VAR 0 2
10983: PUSH
10984: LD_INT 0
10986: ST_TO_ADDR
// if not HasPower ( your_side ) then
10987: LD_OWVAR 2
10991: PPUSH
10992: CALL 11214 0 1
10996: NOT
10997: IFFALSE 11008
// begin Multiplayer_Loose_Message ;
10999: CALL_OW 521
// enable ( mpLose ) ;
11003: LD_INT 102
11005: ENABLE_MARKED
// end else
11006: GO 11169
// begin canWin := true ;
11008: LD_ADDR_VAR 0 2
11012: PUSH
11013: LD_INT 1
11015: ST_TO_ADDR
// for i := 1 to 8 do
11016: LD_ADDR_VAR 0 1
11020: PUSH
11021: DOUBLE
11022: LD_INT 1
11024: DEC
11025: ST_TO_ADDR
11026: LD_INT 8
11028: PUSH
11029: FOR_TO
11030: IFFALSE 11155
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11032: LD_EXP 7
11036: PUSH
11037: LD_VAR 0 1
11041: ARRAY
11042: IFFALSE 11055
11044: PUSH
11045: LD_VAR 0 1
11049: PPUSH
11050: CALL_OW 108
11054: AND
11055: IFFALSE 11069
11057: PUSH
11058: LD_VAR 0 1
11062: PUSH
11063: LD_OWVAR 2
11067: NONEQUAL
11068: AND
11069: IFFALSE 11153
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11071: LD_EXP 8
11075: PUSH
11076: LD_VAR 0 1
11080: ARRAY
11081: NOT
11082: IFTRUE 11130
11084: PUSH
11085: LD_EXP 8
11089: PUSH
11090: LD_VAR 0 1
11094: ARRAY
11095: PUSH
11096: LD_EXP 8
11100: PUSH
11101: LD_OWVAR 2
11105: ARRAY
11106: NONEQUAL
11107: IFFALSE 11129
11109: PUSH
11110: LD_OWVAR 2
11114: PPUSH
11115: LD_VAR 0 1
11119: PPUSH
11120: CALL_OW 81
11124: PUSH
11125: LD_INT 1
11127: NONEQUAL
11128: AND
11129: OR
11130: IFFALSE 11153
// if HasPower ( i ) then
11132: LD_VAR 0 1
11136: PPUSH
11137: CALL 11214 0 1
11141: IFFALSE 11153
// begin canWin := false ;
11143: LD_ADDR_VAR 0 2
11147: PUSH
11148: LD_INT 0
11150: ST_TO_ADDR
// break ;
11151: GO 11155
// end ;
11153: GO 11029
11155: POP
11156: POP
// if canWin then
11157: LD_VAR 0 2
11161: IFFALSE 11168
// enable ( mpWin ) else
11163: LD_INT 101
11165: ENABLE_MARKED
11166: GO 11169
// enable ;
11168: ENABLE
// end ; end ;
11169: PPOPN 2
11171: END
// function CanWinLoose ; begin
11172: LD_INT 0
11174: PPUSH
// result := true ;
11175: LD_ADDR_VAR 0 1
11179: PUSH
11180: LD_INT 1
11182: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11183: CALL_OW 531
11187: IFFALSE 11199
11189: PUSH
11190: CALL_OW 519
11194: PUSH
11195: LD_INT 1
11197: GREATER
11198: AND
11199: IFFALSE 11209
// result := false ;
11201: LD_ADDR_VAR 0 1
11205: PUSH
11206: LD_INT 0
11208: ST_TO_ADDR
// end ;
11209: LD_VAR 0 1
11213: RET
// function HasPower ( i ) ; begin
11214: LD_INT 0
11216: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11217: LD_INT 22
11219: PUSH
11220: LD_VAR 0 1
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: LD_INT 2
11231: PUSH
11232: LD_INT 30
11234: PUSH
11235: LD_INT 0
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PUSH
11242: LD_INT 30
11244: PUSH
11245: LD_INT 1
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: LIST
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 69
11265: NOT
11266: IFFALSE 11270
// exit ;
11268: GO 11335
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11270: LD_ADDR_VAR 0 2
11274: PUSH
11275: LD_INT 22
11277: PUSH
11278: LD_VAR 0 1
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: LD_INT 2
11289: PUSH
11290: LD_INT 21
11292: PUSH
11293: LD_INT 1
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 33
11302: PUSH
11303: LD_INT 3
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 33
11312: PUSH
11313: LD_INT 5
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PPUSH
11330: CALL_OW 69
11334: ST_TO_ADDR
// end ; end_of_file
11335: LD_VAR 0 2
11339: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11340: LD_INT 0
11342: PPUSH
11343: PPUSH
// if exist_mode then
11344: LD_VAR 0 2
11348: IFFALSE 11394
// begin unit := CreateCharacter ( prefix & ident ) ;
11350: LD_ADDR_VAR 0 5
11354: PUSH
11355: LD_VAR 0 3
11359: PUSH
11360: LD_VAR 0 1
11364: STR
11365: PPUSH
11366: CALL_OW 34
11370: ST_TO_ADDR
// if unit then
11371: LD_VAR 0 5
11375: IFFALSE 11392
// DeleteCharacters ( prefix & ident ) ;
11377: LD_VAR 0 3
11381: PUSH
11382: LD_VAR 0 1
11386: STR
11387: PPUSH
11388: CALL_OW 40
// end else
11392: GO 11409
// unit := NewCharacter ( ident ) ;
11394: LD_ADDR_VAR 0 5
11398: PUSH
11399: LD_VAR 0 1
11403: PPUSH
11404: CALL_OW 25
11408: ST_TO_ADDR
// result := unit ;
11409: LD_ADDR_VAR 0 4
11413: PUSH
11414: LD_VAR 0 5
11418: ST_TO_ADDR
// end ;
11419: LD_VAR 0 4
11423: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
11424: LD_INT 0
11426: PPUSH
11427: PPUSH
// if exist_mode then
11428: LD_VAR 0 2
11432: IFFALSE 11457
// unit := CreateCharacter ( prefix & ident ) else
11434: LD_ADDR_VAR 0 5
11438: PUSH
11439: LD_VAR 0 3
11443: PUSH
11444: LD_VAR 0 1
11448: STR
11449: PPUSH
11450: CALL_OW 34
11454: ST_TO_ADDR
11455: GO 11472
// unit := NewCharacter ( ident ) ;
11457: LD_ADDR_VAR 0 5
11461: PUSH
11462: LD_VAR 0 1
11466: PPUSH
11467: CALL_OW 25
11471: ST_TO_ADDR
// result := unit ;
11472: LD_ADDR_VAR 0 4
11476: PUSH
11477: LD_VAR 0 5
11481: ST_TO_ADDR
// end ;
11482: LD_VAR 0 4
11486: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11487: LD_INT 0
11489: PPUSH
11490: PPUSH
// if not side or not nation then
11491: LD_VAR 0 1
11495: NOT
11496: IFTRUE 11505
11498: PUSH
11499: LD_VAR 0 2
11503: NOT
11504: OR
11505: IFFALSE 11509
// exit ;
11507: GO 12303
// case nation of nation_american :
11509: LD_VAR 0 2
11513: PUSH
11514: LD_INT 1
11516: DOUBLE
11517: EQUAL
11518: IFTRUE 11522
11520: GO 11744
11522: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
11523: LD_ADDR_VAR 0 4
11527: PUSH
11528: LD_INT 35
11530: PUSH
11531: LD_INT 45
11533: PUSH
11534: LD_INT 46
11536: PUSH
11537: LD_INT 47
11539: PUSH
11540: LD_INT 82
11542: PUSH
11543: LD_INT 83
11545: PUSH
11546: LD_INT 84
11548: PUSH
11549: LD_INT 85
11551: PUSH
11552: LD_INT 86
11554: PUSH
11555: LD_INT 1
11557: PUSH
11558: LD_INT 2
11560: PUSH
11561: LD_INT 6
11563: PUSH
11564: LD_INT 15
11566: PUSH
11567: LD_INT 16
11569: PUSH
11570: LD_INT 7
11572: PUSH
11573: LD_INT 12
11575: PUSH
11576: LD_INT 13
11578: PUSH
11579: LD_INT 10
11581: PUSH
11582: LD_INT 14
11584: PUSH
11585: LD_INT 20
11587: PUSH
11588: LD_INT 21
11590: PUSH
11591: LD_INT 22
11593: PUSH
11594: LD_INT 25
11596: PUSH
11597: LD_INT 32
11599: PUSH
11600: LD_INT 27
11602: PUSH
11603: LD_INT 36
11605: PUSH
11606: LD_INT 69
11608: PUSH
11609: LD_INT 39
11611: PUSH
11612: LD_INT 34
11614: PUSH
11615: LD_INT 40
11617: PUSH
11618: LD_INT 48
11620: PUSH
11621: LD_INT 49
11623: PUSH
11624: LD_INT 50
11626: PUSH
11627: LD_INT 51
11629: PUSH
11630: LD_INT 52
11632: PUSH
11633: LD_INT 53
11635: PUSH
11636: LD_INT 54
11638: PUSH
11639: LD_INT 55
11641: PUSH
11642: LD_INT 56
11644: PUSH
11645: LD_INT 57
11647: PUSH
11648: LD_INT 58
11650: PUSH
11651: LD_INT 59
11653: PUSH
11654: LD_INT 60
11656: PUSH
11657: LD_INT 61
11659: PUSH
11660: LD_INT 62
11662: PUSH
11663: LD_INT 80
11665: PUSH
11666: LD_INT 82
11668: PUSH
11669: LD_INT 83
11671: PUSH
11672: LD_INT 84
11674: PUSH
11675: LD_INT 85
11677: PUSH
11678: LD_INT 86
11680: PUSH
11681: LD_INT 90
11683: PUSH
11684: LD_INT 93
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: ST_TO_ADDR
11742: GO 12225
11744: LD_INT 2
11746: DOUBLE
11747: EQUAL
11748: IFTRUE 11752
11750: GO 11986
11752: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11753: LD_ADDR_VAR 0 4
11757: PUSH
11758: LD_INT 35
11760: PUSH
11761: LD_INT 45
11763: PUSH
11764: LD_INT 46
11766: PUSH
11767: LD_INT 47
11769: PUSH
11770: LD_INT 82
11772: PUSH
11773: LD_INT 83
11775: PUSH
11776: LD_INT 84
11778: PUSH
11779: LD_INT 85
11781: PUSH
11782: LD_INT 87
11784: PUSH
11785: LD_INT 70
11787: PUSH
11788: LD_INT 1
11790: PUSH
11791: LD_INT 11
11793: PUSH
11794: LD_INT 3
11796: PUSH
11797: LD_INT 4
11799: PUSH
11800: LD_INT 5
11802: PUSH
11803: LD_INT 6
11805: PUSH
11806: LD_INT 15
11808: PUSH
11809: LD_INT 18
11811: PUSH
11812: LD_INT 7
11814: PUSH
11815: LD_INT 17
11817: PUSH
11818: LD_INT 8
11820: PUSH
11821: LD_INT 20
11823: PUSH
11824: LD_INT 21
11826: PUSH
11827: LD_INT 22
11829: PUSH
11830: LD_INT 72
11832: PUSH
11833: LD_INT 26
11835: PUSH
11836: LD_INT 69
11838: PUSH
11839: LD_INT 39
11841: PUSH
11842: LD_INT 40
11844: PUSH
11845: LD_INT 41
11847: PUSH
11848: LD_INT 42
11850: PUSH
11851: LD_INT 43
11853: PUSH
11854: LD_INT 48
11856: PUSH
11857: LD_INT 49
11859: PUSH
11860: LD_INT 50
11862: PUSH
11863: LD_INT 51
11865: PUSH
11866: LD_INT 52
11868: PUSH
11869: LD_INT 53
11871: PUSH
11872: LD_INT 54
11874: PUSH
11875: LD_INT 55
11877: PUSH
11878: LD_INT 56
11880: PUSH
11881: LD_INT 60
11883: PUSH
11884: LD_INT 61
11886: PUSH
11887: LD_INT 62
11889: PUSH
11890: LD_INT 66
11892: PUSH
11893: LD_INT 67
11895: PUSH
11896: LD_INT 68
11898: PUSH
11899: LD_INT 81
11901: PUSH
11902: LD_INT 82
11904: PUSH
11905: LD_INT 83
11907: PUSH
11908: LD_INT 84
11910: PUSH
11911: LD_INT 85
11913: PUSH
11914: LD_INT 87
11916: PUSH
11917: LD_INT 88
11919: PUSH
11920: LD_INT 92
11922: PUSH
11923: LD_INT 94
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: ST_TO_ADDR
11984: GO 12225
11986: LD_INT 3
11988: DOUBLE
11989: EQUAL
11990: IFTRUE 11994
11992: GO 12224
11994: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
11995: LD_ADDR_VAR 0 4
11999: PUSH
12000: LD_INT 46
12002: PUSH
12003: LD_INT 47
12005: PUSH
12006: LD_INT 1
12008: PUSH
12009: LD_INT 2
12011: PUSH
12012: LD_INT 82
12014: PUSH
12015: LD_INT 83
12017: PUSH
12018: LD_INT 84
12020: PUSH
12021: LD_INT 85
12023: PUSH
12024: LD_INT 86
12026: PUSH
12027: LD_INT 11
12029: PUSH
12030: LD_INT 9
12032: PUSH
12033: LD_INT 20
12035: PUSH
12036: LD_INT 19
12038: PUSH
12039: LD_INT 21
12041: PUSH
12042: LD_INT 24
12044: PUSH
12045: LD_INT 22
12047: PUSH
12048: LD_INT 25
12050: PUSH
12051: LD_INT 28
12053: PUSH
12054: LD_INT 29
12056: PUSH
12057: LD_INT 30
12059: PUSH
12060: LD_INT 31
12062: PUSH
12063: LD_INT 37
12065: PUSH
12066: LD_INT 38
12068: PUSH
12069: LD_INT 32
12071: PUSH
12072: LD_INT 27
12074: PUSH
12075: LD_INT 33
12077: PUSH
12078: LD_INT 69
12080: PUSH
12081: LD_INT 39
12083: PUSH
12084: LD_INT 34
12086: PUSH
12087: LD_INT 40
12089: PUSH
12090: LD_INT 71
12092: PUSH
12093: LD_INT 23
12095: PUSH
12096: LD_INT 44
12098: PUSH
12099: LD_INT 48
12101: PUSH
12102: LD_INT 49
12104: PUSH
12105: LD_INT 50
12107: PUSH
12108: LD_INT 51
12110: PUSH
12111: LD_INT 52
12113: PUSH
12114: LD_INT 53
12116: PUSH
12117: LD_INT 54
12119: PUSH
12120: LD_INT 55
12122: PUSH
12123: LD_INT 56
12125: PUSH
12126: LD_INT 57
12128: PUSH
12129: LD_INT 58
12131: PUSH
12132: LD_INT 59
12134: PUSH
12135: LD_INT 63
12137: PUSH
12138: LD_INT 64
12140: PUSH
12141: LD_INT 65
12143: PUSH
12144: LD_INT 82
12146: PUSH
12147: LD_INT 83
12149: PUSH
12150: LD_INT 84
12152: PUSH
12153: LD_INT 85
12155: PUSH
12156: LD_INT 86
12158: PUSH
12159: LD_INT 89
12161: PUSH
12162: LD_INT 91
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: ST_TO_ADDR
12222: GO 12225
12224: POP
// if state > - 1 and state < 3 then
12225: LD_VAR 0 3
12229: PUSH
12230: LD_INT 1
12232: NEG
12233: GREATER
12234: IFFALSE 12246
12236: PUSH
12237: LD_VAR 0 3
12241: PUSH
12242: LD_INT 3
12244: LESS
12245: AND
12246: IFFALSE 12303
// for i in result do
12248: LD_ADDR_VAR 0 5
12252: PUSH
12253: LD_VAR 0 4
12257: PUSH
12258: FOR_IN
12259: IFFALSE 12301
// if GetTech ( i , side ) <> state then
12261: LD_VAR 0 5
12265: PPUSH
12266: LD_VAR 0 1
12270: PPUSH
12271: CALL_OW 321
12275: PUSH
12276: LD_VAR 0 3
12280: NONEQUAL
12281: IFFALSE 12299
// result := result diff i ;
12283: LD_ADDR_VAR 0 4
12287: PUSH
12288: LD_VAR 0 4
12292: PUSH
12293: LD_VAR 0 5
12297: DIFF
12298: ST_TO_ADDR
12299: GO 12258
12301: POP
12302: POP
// end ;
12303: LD_VAR 0 4
12307: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
12308: LD_INT 0
12310: PPUSH
12311: PPUSH
12312: PPUSH
// result := true ;
12313: LD_ADDR_VAR 0 3
12317: PUSH
12318: LD_INT 1
12320: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
12321: LD_ADDR_VAR 0 5
12325: PUSH
12326: LD_VAR 0 2
12330: PPUSH
12331: CALL_OW 480
12335: ST_TO_ADDR
// if not tmp then
12336: LD_VAR 0 5
12340: NOT
12341: IFFALSE 12345
// exit ;
12343: GO 12394
// for i in tmp do
12345: LD_ADDR_VAR 0 4
12349: PUSH
12350: LD_VAR 0 5
12354: PUSH
12355: FOR_IN
12356: IFFALSE 12392
// if GetTech ( i , side ) <> state_researched then
12358: LD_VAR 0 4
12362: PPUSH
12363: LD_VAR 0 1
12367: PPUSH
12368: CALL_OW 321
12372: PUSH
12373: LD_INT 2
12375: NONEQUAL
12376: IFFALSE 12390
// begin result := false ;
12378: LD_ADDR_VAR 0 3
12382: PUSH
12383: LD_INT 0
12385: ST_TO_ADDR
// exit ;
12386: POP
12387: POP
12388: GO 12394
// end ;
12390: GO 12355
12392: POP
12393: POP
// end ;
12394: LD_VAR 0 3
12398: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12399: LD_INT 0
12401: PPUSH
12402: PPUSH
12403: PPUSH
12404: PPUSH
12405: PPUSH
12406: PPUSH
12407: PPUSH
12408: PPUSH
12409: PPUSH
12410: PPUSH
12411: PPUSH
12412: PPUSH
12413: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12414: LD_VAR 0 1
12418: NOT
12419: IFTRUE 12436
12421: PUSH
12422: LD_VAR 0 1
12426: PPUSH
12427: CALL_OW 257
12431: PUSH
12432: LD_INT 9
12434: NONEQUAL
12435: OR
12436: IFFALSE 12440
// exit ;
12438: GO 13019
// side := GetSide ( unit ) ;
12440: LD_ADDR_VAR 0 9
12444: PUSH
12445: LD_VAR 0 1
12449: PPUSH
12450: CALL_OW 255
12454: ST_TO_ADDR
// tech_space := tech_spacanom ;
12455: LD_ADDR_VAR 0 12
12459: PUSH
12460: LD_INT 29
12462: ST_TO_ADDR
// tech_time := tech_taurad ;
12463: LD_ADDR_VAR 0 13
12467: PUSH
12468: LD_INT 28
12470: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12471: LD_ADDR_VAR 0 11
12475: PUSH
12476: LD_VAR 0 1
12480: PPUSH
12481: CALL_OW 310
12485: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12486: LD_VAR 0 11
12490: PPUSH
12491: CALL_OW 247
12495: PUSH
12496: LD_INT 2
12498: EQUAL
12499: IFFALSE 12503
// exit ;
12501: GO 13019
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12503: LD_ADDR_VAR 0 8
12507: PUSH
12508: LD_INT 81
12510: PUSH
12511: LD_VAR 0 9
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PUSH
12520: LD_INT 3
12522: PUSH
12523: LD_INT 21
12525: PUSH
12526: LD_INT 3
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PPUSH
12541: CALL_OW 69
12545: ST_TO_ADDR
// if not tmp then
12546: LD_VAR 0 8
12550: NOT
12551: IFFALSE 12555
// exit ;
12553: GO 13019
// if in_unit then
12555: LD_VAR 0 11
12559: IFFALSE 12583
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12561: LD_ADDR_VAR 0 10
12565: PUSH
12566: LD_VAR 0 8
12570: PPUSH
12571: LD_VAR 0 11
12575: PPUSH
12576: CALL_OW 74
12580: ST_TO_ADDR
12581: GO 12603
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12583: LD_ADDR_VAR 0 10
12587: PUSH
12588: LD_VAR 0 8
12592: PPUSH
12593: LD_VAR 0 1
12597: PPUSH
12598: CALL_OW 74
12602: ST_TO_ADDR
// if not enemy then
12603: LD_VAR 0 10
12607: NOT
12608: IFFALSE 12612
// exit ;
12610: GO 13019
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12612: LD_VAR 0 11
12616: IFFALSE 12638
12618: PUSH
12619: LD_VAR 0 11
12623: PPUSH
12624: LD_VAR 0 10
12628: PPUSH
12629: CALL_OW 296
12633: PUSH
12634: LD_INT 13
12636: GREATER
12637: AND
12638: IFTRUE 12660
12640: PUSH
12641: LD_VAR 0 1
12645: PPUSH
12646: LD_VAR 0 10
12650: PPUSH
12651: CALL_OW 296
12655: PUSH
12656: LD_INT 12
12658: GREATER
12659: OR
12660: IFFALSE 12664
// exit ;
12662: GO 13019
// missile := [ 1 ] ;
12664: LD_ADDR_VAR 0 14
12668: PUSH
12669: LD_INT 1
12671: PUSH
12672: EMPTY
12673: LIST
12674: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12675: LD_VAR 0 9
12679: PPUSH
12680: LD_VAR 0 12
12684: PPUSH
12685: CALL_OW 325
12689: IFFALSE 12718
// missile := Replace ( missile , missile + 1 , 2 ) ;
12691: LD_ADDR_VAR 0 14
12695: PUSH
12696: LD_VAR 0 14
12700: PPUSH
12701: LD_VAR 0 14
12705: PUSH
12706: LD_INT 1
12708: PLUS
12709: PPUSH
12710: LD_INT 2
12712: PPUSH
12713: CALL_OW 1
12717: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12718: LD_VAR 0 9
12722: PPUSH
12723: LD_VAR 0 13
12727: PPUSH
12728: CALL_OW 325
12732: IFFALSE 12756
12734: PUSH
12735: LD_VAR 0 10
12739: PPUSH
12740: CALL_OW 255
12744: PPUSH
12745: LD_VAR 0 13
12749: PPUSH
12750: CALL_OW 325
12754: NOT
12755: AND
12756: IFFALSE 12785
// missile := Replace ( missile , missile + 1 , 3 ) ;
12758: LD_ADDR_VAR 0 14
12762: PUSH
12763: LD_VAR 0 14
12767: PPUSH
12768: LD_VAR 0 14
12772: PUSH
12773: LD_INT 1
12775: PLUS
12776: PPUSH
12777: LD_INT 3
12779: PPUSH
12780: CALL_OW 1
12784: ST_TO_ADDR
// if missile < 2 then
12785: LD_VAR 0 14
12789: PUSH
12790: LD_INT 2
12792: LESS
12793: IFFALSE 12797
// exit ;
12795: GO 13019
// x := GetX ( enemy ) ;
12797: LD_ADDR_VAR 0 4
12801: PUSH
12802: LD_VAR 0 10
12806: PPUSH
12807: CALL_OW 250
12811: ST_TO_ADDR
// y := GetY ( enemy ) ;
12812: LD_ADDR_VAR 0 5
12816: PUSH
12817: LD_VAR 0 10
12821: PPUSH
12822: CALL_OW 251
12826: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12827: LD_ADDR_VAR 0 6
12831: PUSH
12832: LD_VAR 0 4
12836: PUSH
12837: LD_INT 1
12839: NEG
12840: PPUSH
12841: LD_INT 1
12843: PPUSH
12844: CALL_OW 12
12848: PLUS
12849: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12850: LD_ADDR_VAR 0 7
12854: PUSH
12855: LD_VAR 0 5
12859: PUSH
12860: LD_INT 1
12862: NEG
12863: PPUSH
12864: LD_INT 1
12866: PPUSH
12867: CALL_OW 12
12871: PLUS
12872: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12873: LD_VAR 0 6
12877: PPUSH
12878: LD_VAR 0 7
12882: PPUSH
12883: CALL_OW 488
12887: NOT
12888: IFFALSE 12910
// begin _x := x ;
12890: LD_ADDR_VAR 0 6
12894: PUSH
12895: LD_VAR 0 4
12899: ST_TO_ADDR
// _y := y ;
12900: LD_ADDR_VAR 0 7
12904: PUSH
12905: LD_VAR 0 5
12909: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12910: LD_ADDR_VAR 0 3
12914: PUSH
12915: LD_INT 1
12917: PPUSH
12918: LD_VAR 0 14
12922: PPUSH
12923: CALL_OW 12
12927: ST_TO_ADDR
// case i of 1 :
12928: LD_VAR 0 3
12932: PUSH
12933: LD_INT 1
12935: DOUBLE
12936: EQUAL
12937: IFTRUE 12941
12939: GO 12958
12941: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12942: LD_VAR 0 1
12946: PPUSH
12947: LD_VAR 0 10
12951: PPUSH
12952: CALL_OW 115
12956: GO 13019
12958: LD_INT 2
12960: DOUBLE
12961: EQUAL
12962: IFTRUE 12966
12964: GO 12988
12966: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12967: LD_VAR 0 1
12971: PPUSH
12972: LD_VAR 0 6
12976: PPUSH
12977: LD_VAR 0 7
12981: PPUSH
12982: CALL_OW 153
12986: GO 13019
12988: LD_INT 3
12990: DOUBLE
12991: EQUAL
12992: IFTRUE 12996
12994: GO 13018
12996: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12997: LD_VAR 0 1
13001: PPUSH
13002: LD_VAR 0 6
13006: PPUSH
13007: LD_VAR 0 7
13011: PPUSH
13012: CALL_OW 154
13016: GO 13019
13018: POP
// end ;
13019: LD_VAR 0 2
13023: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
13024: LD_INT 0
13026: PPUSH
13027: PPUSH
13028: PPUSH
13029: PPUSH
13030: PPUSH
13031: PPUSH
// if not unit or not building then
13032: LD_VAR 0 1
13036: NOT
13037: IFTRUE 13046
13039: PUSH
13040: LD_VAR 0 2
13044: NOT
13045: OR
13046: IFFALSE 13050
// exit ;
13048: GO 13208
// x := GetX ( building ) ;
13050: LD_ADDR_VAR 0 5
13054: PUSH
13055: LD_VAR 0 2
13059: PPUSH
13060: CALL_OW 250
13064: ST_TO_ADDR
// y := GetY ( building ) ;
13065: LD_ADDR_VAR 0 6
13069: PUSH
13070: LD_VAR 0 2
13074: PPUSH
13075: CALL_OW 251
13079: ST_TO_ADDR
// for i := 0 to 5 do
13080: LD_ADDR_VAR 0 4
13084: PUSH
13085: DOUBLE
13086: LD_INT 0
13088: DEC
13089: ST_TO_ADDR
13090: LD_INT 5
13092: PUSH
13093: FOR_TO
13094: IFFALSE 13206
// begin _x := ShiftX ( x , i , 3 ) ;
13096: LD_ADDR_VAR 0 7
13100: PUSH
13101: LD_VAR 0 5
13105: PPUSH
13106: LD_VAR 0 4
13110: PPUSH
13111: LD_INT 3
13113: PPUSH
13114: CALL_OW 272
13118: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13119: LD_ADDR_VAR 0 8
13123: PUSH
13124: LD_VAR 0 6
13128: PPUSH
13129: LD_VAR 0 4
13133: PPUSH
13134: LD_INT 3
13136: PPUSH
13137: CALL_OW 273
13141: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13142: LD_VAR 0 7
13146: PPUSH
13147: LD_VAR 0 8
13151: PPUSH
13152: CALL_OW 488
13156: NOT
13157: IFFALSE 13161
// continue ;
13159: GO 13093
// if HexInfo ( _x , _y ) = 0 then
13161: LD_VAR 0 7
13165: PPUSH
13166: LD_VAR 0 8
13170: PPUSH
13171: CALL_OW 428
13175: PUSH
13176: LD_INT 0
13178: EQUAL
13179: IFFALSE 13204
// begin ComMoveXY ( unit , _x , _y ) ;
13181: LD_VAR 0 1
13185: PPUSH
13186: LD_VAR 0 7
13190: PPUSH
13191: LD_VAR 0 8
13195: PPUSH
13196: CALL_OW 111
// exit ;
13200: POP
13201: POP
13202: GO 13208
// end ; end ;
13204: GO 13093
13206: POP
13207: POP
// end ;
13208: LD_VAR 0 3
13212: RET
// export function ScanBase ( side , base_area ) ; begin
13213: LD_INT 0
13215: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
13216: LD_ADDR_VAR 0 3
13220: PUSH
13221: LD_VAR 0 2
13225: PPUSH
13226: LD_INT 81
13228: PUSH
13229: LD_VAR 0 1
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PPUSH
13238: CALL_OW 70
13242: ST_TO_ADDR
// end ;
13243: LD_VAR 0 3
13247: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13248: LD_INT 0
13250: PPUSH
13251: PPUSH
13252: PPUSH
13253: PPUSH
// result := false ;
13254: LD_ADDR_VAR 0 2
13258: PUSH
13259: LD_INT 0
13261: ST_TO_ADDR
// side := GetSide ( unit ) ;
13262: LD_ADDR_VAR 0 3
13266: PUSH
13267: LD_VAR 0 1
13271: PPUSH
13272: CALL_OW 255
13276: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13277: LD_ADDR_VAR 0 4
13281: PUSH
13282: LD_VAR 0 1
13286: PPUSH
13287: CALL_OW 248
13291: ST_TO_ADDR
// case nat of 1 :
13292: LD_VAR 0 4
13296: PUSH
13297: LD_INT 1
13299: DOUBLE
13300: EQUAL
13301: IFTRUE 13305
13303: GO 13316
13305: POP
// tech := tech_lassight ; 2 :
13306: LD_ADDR_VAR 0 5
13310: PUSH
13311: LD_INT 12
13313: ST_TO_ADDR
13314: GO 13355
13316: LD_INT 2
13318: DOUBLE
13319: EQUAL
13320: IFTRUE 13324
13322: GO 13335
13324: POP
// tech := tech_mortar ; 3 :
13325: LD_ADDR_VAR 0 5
13329: PUSH
13330: LD_INT 41
13332: ST_TO_ADDR
13333: GO 13355
13335: LD_INT 3
13337: DOUBLE
13338: EQUAL
13339: IFTRUE 13343
13341: GO 13354
13343: POP
// tech := tech_bazooka ; end ;
13344: LD_ADDR_VAR 0 5
13348: PUSH
13349: LD_INT 44
13351: ST_TO_ADDR
13352: GO 13355
13354: POP
// if Researched ( side , tech ) then
13355: LD_VAR 0 3
13359: PPUSH
13360: LD_VAR 0 5
13364: PPUSH
13365: CALL_OW 325
13369: IFFALSE 13396
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13371: LD_ADDR_VAR 0 2
13375: PUSH
13376: LD_INT 5
13378: PUSH
13379: LD_INT 8
13381: PUSH
13382: LD_INT 9
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: LIST
13389: PUSH
13390: LD_VAR 0 4
13394: ARRAY
13395: ST_TO_ADDR
// end ;
13396: LD_VAR 0 2
13400: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13401: LD_INT 0
13403: PPUSH
13404: PPUSH
13405: PPUSH
// if not mines then
13406: LD_VAR 0 2
13410: NOT
13411: IFFALSE 13415
// exit ;
13413: GO 13559
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13415: LD_ADDR_VAR 0 5
13419: PUSH
13420: LD_INT 81
13422: PUSH
13423: LD_VAR 0 1
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 3
13434: PUSH
13435: LD_INT 21
13437: PUSH
13438: LD_INT 3
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PPUSH
13453: CALL_OW 69
13457: ST_TO_ADDR
// for i in mines do
13458: LD_ADDR_VAR 0 4
13462: PUSH
13463: LD_VAR 0 2
13467: PUSH
13468: FOR_IN
13469: IFFALSE 13557
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13471: LD_VAR 0 4
13475: PUSH
13476: LD_INT 1
13478: ARRAY
13479: PPUSH
13480: LD_VAR 0 4
13484: PUSH
13485: LD_INT 2
13487: ARRAY
13488: PPUSH
13489: CALL_OW 458
13493: NOT
13494: IFFALSE 13498
// continue ;
13496: GO 13468
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13498: LD_VAR 0 4
13502: PUSH
13503: LD_INT 1
13505: ARRAY
13506: PPUSH
13507: LD_VAR 0 4
13511: PUSH
13512: LD_INT 2
13514: ARRAY
13515: PPUSH
13516: CALL_OW 428
13520: PUSH
13521: LD_VAR 0 5
13525: IN
13526: IFFALSE 13555
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13528: LD_VAR 0 4
13532: PUSH
13533: LD_INT 1
13535: ARRAY
13536: PPUSH
13537: LD_VAR 0 4
13541: PUSH
13542: LD_INT 2
13544: ARRAY
13545: PPUSH
13546: LD_VAR 0 1
13550: PPUSH
13551: CALL_OW 456
// end ;
13555: GO 13468
13557: POP
13558: POP
// end ;
13559: LD_VAR 0 3
13563: RET
// export function Count ( array ) ; begin
13564: LD_INT 0
13566: PPUSH
// result := array + 0 ;
13567: LD_ADDR_VAR 0 2
13571: PUSH
13572: LD_VAR 0 1
13576: PUSH
13577: LD_INT 0
13579: PLUS
13580: ST_TO_ADDR
// end ;
13581: LD_VAR 0 2
13585: RET
// export function IsEmpty ( building ) ; begin
13586: LD_INT 0
13588: PPUSH
// if not building then
13589: LD_VAR 0 1
13593: NOT
13594: IFFALSE 13598
// exit ;
13596: GO 13641
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13598: LD_ADDR_VAR 0 2
13602: PUSH
13603: LD_VAR 0 1
13607: PUSH
13608: LD_INT 22
13610: PUSH
13611: LD_VAR 0 1
13615: PPUSH
13616: CALL_OW 255
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: LD_INT 58
13627: PUSH
13628: EMPTY
13629: LIST
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PPUSH
13635: CALL_OW 69
13639: IN
13640: ST_TO_ADDR
// end ;
13641: LD_VAR 0 2
13645: RET
// export function IsNotFull ( building ) ; var places ; begin
13646: LD_INT 0
13648: PPUSH
13649: PPUSH
// if not building then
13650: LD_VAR 0 1
13654: NOT
13655: IFFALSE 13659
// exit ;
13657: GO 13687
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
13659: LD_ADDR_VAR 0 2
13663: PUSH
13664: LD_VAR 0 1
13668: PPUSH
13669: LD_INT 3
13671: PUSH
13672: LD_INT 62
13674: PUSH
13675: EMPTY
13676: LIST
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PPUSH
13682: CALL_OW 72
13686: ST_TO_ADDR
// end ;
13687: LD_VAR 0 2
13691: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13692: LD_INT 0
13694: PPUSH
13695: PPUSH
13696: PPUSH
13697: PPUSH
// tmp := [ ] ;
13698: LD_ADDR_VAR 0 3
13702: PUSH
13703: EMPTY
13704: ST_TO_ADDR
// list := [ ] ;
13705: LD_ADDR_VAR 0 5
13709: PUSH
13710: EMPTY
13711: ST_TO_ADDR
// for i = 16 to 25 do
13712: LD_ADDR_VAR 0 4
13716: PUSH
13717: DOUBLE
13718: LD_INT 16
13720: DEC
13721: ST_TO_ADDR
13722: LD_INT 25
13724: PUSH
13725: FOR_TO
13726: IFFALSE 13799
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13728: LD_ADDR_VAR 0 3
13732: PUSH
13733: LD_VAR 0 3
13737: PUSH
13738: LD_INT 22
13740: PUSH
13741: LD_VAR 0 1
13745: PPUSH
13746: CALL_OW 255
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 91
13757: PUSH
13758: LD_VAR 0 1
13762: PUSH
13763: LD_INT 6
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 30
13773: PUSH
13774: LD_VAR 0 4
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: PUSH
13788: EMPTY
13789: LIST
13790: PPUSH
13791: CALL_OW 69
13795: ADD
13796: ST_TO_ADDR
13797: GO 13725
13799: POP
13800: POP
// for i = 1 to tmp do
13801: LD_ADDR_VAR 0 4
13805: PUSH
13806: DOUBLE
13807: LD_INT 1
13809: DEC
13810: ST_TO_ADDR
13811: LD_VAR 0 3
13815: PUSH
13816: FOR_TO
13817: IFFALSE 13905
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13819: LD_ADDR_VAR 0 5
13823: PUSH
13824: LD_VAR 0 5
13828: PUSH
13829: LD_VAR 0 3
13833: PUSH
13834: LD_VAR 0 4
13838: ARRAY
13839: PPUSH
13840: CALL_OW 266
13844: PUSH
13845: LD_VAR 0 3
13849: PUSH
13850: LD_VAR 0 4
13854: ARRAY
13855: PPUSH
13856: CALL_OW 250
13860: PUSH
13861: LD_VAR 0 3
13865: PUSH
13866: LD_VAR 0 4
13870: ARRAY
13871: PPUSH
13872: CALL_OW 251
13876: PUSH
13877: LD_VAR 0 3
13881: PUSH
13882: LD_VAR 0 4
13886: ARRAY
13887: PPUSH
13888: CALL_OW 254
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: PUSH
13899: EMPTY
13900: LIST
13901: ADD
13902: ST_TO_ADDR
13903: GO 13816
13905: POP
13906: POP
// result := list ;
13907: LD_ADDR_VAR 0 2
13911: PUSH
13912: LD_VAR 0 5
13916: ST_TO_ADDR
// end ;
13917: LD_VAR 0 2
13921: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13922: LD_INT 0
13924: PPUSH
13925: PPUSH
13926: PPUSH
13927: PPUSH
13928: PPUSH
13929: PPUSH
13930: PPUSH
// if not factory then
13931: LD_VAR 0 1
13935: NOT
13936: IFFALSE 13940
// exit ;
13938: GO 14543
// if control = control_apeman then
13940: LD_VAR 0 4
13944: PUSH
13945: LD_INT 5
13947: EQUAL
13948: IFFALSE 14057
// begin tmp := UnitsInside ( factory ) ;
13950: LD_ADDR_VAR 0 8
13954: PUSH
13955: LD_VAR 0 1
13959: PPUSH
13960: CALL_OW 313
13964: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13965: LD_VAR 0 8
13969: PPUSH
13970: LD_INT 25
13972: PUSH
13973: LD_INT 12
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PPUSH
13980: CALL_OW 72
13984: NOT
13985: IFFALSE 13995
// control := control_manual ;
13987: LD_ADDR_VAR 0 4
13991: PUSH
13992: LD_INT 1
13994: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13995: LD_ADDR_VAR 0 8
13999: PUSH
14000: LD_VAR 0 1
14004: PPUSH
14005: CALL 13692 0 1
14009: ST_TO_ADDR
// if tmp then
14010: LD_VAR 0 8
14014: IFFALSE 14057
// begin for i in tmp do
14016: LD_ADDR_VAR 0 7
14020: PUSH
14021: LD_VAR 0 8
14025: PUSH
14026: FOR_IN
14027: IFFALSE 14055
// if i [ 1 ] = b_ext_radio then
14029: LD_VAR 0 7
14033: PUSH
14034: LD_INT 1
14036: ARRAY
14037: PUSH
14038: LD_INT 22
14040: EQUAL
14041: IFFALSE 14053
// begin control := control_remote ;
14043: LD_ADDR_VAR 0 4
14047: PUSH
14048: LD_INT 2
14050: ST_TO_ADDR
// break ;
14051: GO 14055
// end ;
14053: GO 14026
14055: POP
14056: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14057: LD_VAR 0 1
14061: PPUSH
14062: LD_VAR 0 2
14066: PPUSH
14067: LD_VAR 0 3
14071: PPUSH
14072: LD_VAR 0 4
14076: PPUSH
14077: LD_VAR 0 5
14081: PPUSH
14082: CALL_OW 448
14086: IFFALSE 14121
// begin result := [ chassis , engine , control , weapon ] ;
14088: LD_ADDR_VAR 0 6
14092: PUSH
14093: LD_VAR 0 2
14097: PUSH
14098: LD_VAR 0 3
14102: PUSH
14103: LD_VAR 0 4
14107: PUSH
14108: LD_VAR 0 5
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: ST_TO_ADDR
// exit ;
14119: GO 14543
// end ; _chassis := AvailableChassisList ( factory ) ;
14121: LD_ADDR_VAR 0 9
14125: PUSH
14126: LD_VAR 0 1
14130: PPUSH
14131: CALL_OW 475
14135: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14136: LD_ADDR_VAR 0 11
14140: PUSH
14141: LD_VAR 0 1
14145: PPUSH
14146: CALL_OW 476
14150: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14151: LD_ADDR_VAR 0 12
14155: PUSH
14156: LD_VAR 0 1
14160: PPUSH
14161: CALL_OW 477
14165: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14166: LD_ADDR_VAR 0 10
14170: PUSH
14171: LD_VAR 0 1
14175: PPUSH
14176: CALL_OW 478
14180: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
14181: LD_VAR 0 9
14185: NOT
14186: IFTRUE 14195
14188: PUSH
14189: LD_VAR 0 11
14193: NOT
14194: OR
14195: IFTRUE 14204
14197: PUSH
14198: LD_VAR 0 12
14202: NOT
14203: OR
14204: IFTRUE 14213
14206: PUSH
14207: LD_VAR 0 10
14211: NOT
14212: OR
14213: IFFALSE 14248
// begin result := [ chassis , engine , control , weapon ] ;
14215: LD_ADDR_VAR 0 6
14219: PUSH
14220: LD_VAR 0 2
14224: PUSH
14225: LD_VAR 0 3
14229: PUSH
14230: LD_VAR 0 4
14234: PUSH
14235: LD_VAR 0 5
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: ST_TO_ADDR
// exit ;
14246: GO 14543
// end ; if not chassis in _chassis then
14248: LD_VAR 0 2
14252: PUSH
14253: LD_VAR 0 9
14257: IN
14258: NOT
14259: IFFALSE 14285
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14261: LD_ADDR_VAR 0 2
14265: PUSH
14266: LD_VAR 0 9
14270: PUSH
14271: LD_INT 1
14273: PPUSH
14274: LD_VAR 0 9
14278: PPUSH
14279: CALL_OW 12
14283: ARRAY
14284: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14285: LD_VAR 0 2
14289: PPUSH
14290: LD_VAR 0 3
14294: PPUSH
14295: CALL 14548 0 2
14299: NOT
14300: IFFALSE 14361
// repeat engine := _engine [ 1 ] ;
14302: LD_ADDR_VAR 0 3
14306: PUSH
14307: LD_VAR 0 11
14311: PUSH
14312: LD_INT 1
14314: ARRAY
14315: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14316: LD_ADDR_VAR 0 11
14320: PUSH
14321: LD_VAR 0 11
14325: PPUSH
14326: LD_INT 1
14328: PPUSH
14329: CALL_OW 3
14333: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14334: LD_VAR 0 2
14338: PPUSH
14339: LD_VAR 0 3
14343: PPUSH
14344: CALL 14548 0 2
14348: IFTRUE 14359
14350: PUSH
14351: LD_VAR 0 11
14355: PUSH
14356: EMPTY
14357: EQUAL
14358: OR
14359: IFFALSE 14302
// if not control in _control then
14361: LD_VAR 0 4
14365: PUSH
14366: LD_VAR 0 12
14370: IN
14371: NOT
14372: IFFALSE 14398
// control := _control [ rand ( 1 , _control ) ] ;
14374: LD_ADDR_VAR 0 4
14378: PUSH
14379: LD_VAR 0 12
14383: PUSH
14384: LD_INT 1
14386: PPUSH
14387: LD_VAR 0 12
14391: PPUSH
14392: CALL_OW 12
14396: ARRAY
14397: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14398: LD_VAR 0 2
14402: PPUSH
14403: LD_VAR 0 5
14407: PPUSH
14408: CALL 14770 0 2
14412: NOT
14413: IFFALSE 14474
// repeat weapon := _weapon [ 1 ] ;
14415: LD_ADDR_VAR 0 5
14419: PUSH
14420: LD_VAR 0 10
14424: PUSH
14425: LD_INT 1
14427: ARRAY
14428: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14429: LD_ADDR_VAR 0 10
14433: PUSH
14434: LD_VAR 0 10
14438: PPUSH
14439: LD_INT 1
14441: PPUSH
14442: CALL_OW 3
14446: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14447: LD_VAR 0 2
14451: PPUSH
14452: LD_VAR 0 5
14456: PPUSH
14457: CALL 14770 0 2
14461: IFTRUE 14472
14463: PUSH
14464: LD_VAR 0 10
14468: PUSH
14469: EMPTY
14470: EQUAL
14471: OR
14472: IFFALSE 14415
// result := [ ] ;
14474: LD_ADDR_VAR 0 6
14478: PUSH
14479: EMPTY
14480: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14481: LD_VAR 0 1
14485: PPUSH
14486: LD_VAR 0 2
14490: PPUSH
14491: LD_VAR 0 3
14495: PPUSH
14496: LD_VAR 0 4
14500: PPUSH
14501: LD_VAR 0 5
14505: PPUSH
14506: CALL_OW 448
14510: IFFALSE 14543
// result := [ chassis , engine , control , weapon ] ;
14512: LD_ADDR_VAR 0 6
14516: PUSH
14517: LD_VAR 0 2
14521: PUSH
14522: LD_VAR 0 3
14526: PUSH
14527: LD_VAR 0 4
14531: PUSH
14532: LD_VAR 0 5
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: ST_TO_ADDR
// end ;
14543: LD_VAR 0 6
14547: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14548: LD_INT 0
14550: PPUSH
// if not chassis or not engine then
14551: LD_VAR 0 1
14555: NOT
14556: IFTRUE 14565
14558: PUSH
14559: LD_VAR 0 2
14563: NOT
14564: OR
14565: IFFALSE 14569
// exit ;
14567: GO 14765
// case engine of engine_solar :
14569: LD_VAR 0 2
14573: PUSH
14574: LD_INT 2
14576: DOUBLE
14577: EQUAL
14578: IFTRUE 14582
14580: GO 14620
14582: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14583: LD_ADDR_VAR 0 3
14587: PUSH
14588: LD_INT 11
14590: PUSH
14591: LD_INT 12
14593: PUSH
14594: LD_INT 13
14596: PUSH
14597: LD_INT 14
14599: PUSH
14600: LD_INT 1
14602: PUSH
14603: LD_INT 2
14605: PUSH
14606: LD_INT 3
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: ST_TO_ADDR
14618: GO 14749
14620: LD_INT 1
14622: DOUBLE
14623: EQUAL
14624: IFTRUE 14628
14626: GO 14690
14628: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14629: LD_ADDR_VAR 0 3
14633: PUSH
14634: LD_INT 11
14636: PUSH
14637: LD_INT 12
14639: PUSH
14640: LD_INT 13
14642: PUSH
14643: LD_INT 14
14645: PUSH
14646: LD_INT 1
14648: PUSH
14649: LD_INT 2
14651: PUSH
14652: LD_INT 3
14654: PUSH
14655: LD_INT 4
14657: PUSH
14658: LD_INT 5
14660: PUSH
14661: LD_INT 21
14663: PUSH
14664: LD_INT 23
14666: PUSH
14667: LD_INT 22
14669: PUSH
14670: LD_INT 24
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: ST_TO_ADDR
14688: GO 14749
14690: LD_INT 3
14692: DOUBLE
14693: EQUAL
14694: IFTRUE 14698
14696: GO 14748
14698: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14699: LD_ADDR_VAR 0 3
14703: PUSH
14704: LD_INT 13
14706: PUSH
14707: LD_INT 14
14709: PUSH
14710: LD_INT 2
14712: PUSH
14713: LD_INT 3
14715: PUSH
14716: LD_INT 4
14718: PUSH
14719: LD_INT 5
14721: PUSH
14722: LD_INT 21
14724: PUSH
14725: LD_INT 22
14727: PUSH
14728: LD_INT 23
14730: PUSH
14731: LD_INT 24
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: ST_TO_ADDR
14746: GO 14749
14748: POP
// result := ( chassis in result ) ;
14749: LD_ADDR_VAR 0 3
14753: PUSH
14754: LD_VAR 0 1
14758: PUSH
14759: LD_VAR 0 3
14763: IN
14764: ST_TO_ADDR
// end ;
14765: LD_VAR 0 3
14769: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14770: LD_INT 0
14772: PPUSH
// if not chassis or not weapon then
14773: LD_VAR 0 1
14777: NOT
14778: IFTRUE 14787
14780: PUSH
14781: LD_VAR 0 2
14785: NOT
14786: OR
14787: IFFALSE 14791
// exit ;
14789: GO 15885
// case weapon of us_machine_gun :
14791: LD_VAR 0 2
14795: PUSH
14796: LD_INT 2
14798: DOUBLE
14799: EQUAL
14800: IFTRUE 14804
14802: GO 14834
14804: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14805: LD_ADDR_VAR 0 3
14809: PUSH
14810: LD_INT 1
14812: PUSH
14813: LD_INT 2
14815: PUSH
14816: LD_INT 3
14818: PUSH
14819: LD_INT 4
14821: PUSH
14822: LD_INT 5
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: ST_TO_ADDR
14832: GO 15869
14834: LD_INT 3
14836: DOUBLE
14837: EQUAL
14838: IFTRUE 14842
14840: GO 14872
14842: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14843: LD_ADDR_VAR 0 3
14847: PUSH
14848: LD_INT 1
14850: PUSH
14851: LD_INT 2
14853: PUSH
14854: LD_INT 3
14856: PUSH
14857: LD_INT 4
14859: PUSH
14860: LD_INT 5
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: ST_TO_ADDR
14870: GO 15869
14872: LD_INT 11
14874: DOUBLE
14875: EQUAL
14876: IFTRUE 14880
14878: GO 14910
14880: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14881: LD_ADDR_VAR 0 3
14885: PUSH
14886: LD_INT 1
14888: PUSH
14889: LD_INT 2
14891: PUSH
14892: LD_INT 3
14894: PUSH
14895: LD_INT 4
14897: PUSH
14898: LD_INT 5
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: ST_TO_ADDR
14908: GO 15869
14910: LD_INT 4
14912: DOUBLE
14913: EQUAL
14914: IFTRUE 14918
14916: GO 14944
14918: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14919: LD_ADDR_VAR 0 3
14923: PUSH
14924: LD_INT 2
14926: PUSH
14927: LD_INT 3
14929: PUSH
14930: LD_INT 4
14932: PUSH
14933: LD_INT 5
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: ST_TO_ADDR
14942: GO 15869
14944: LD_INT 5
14946: DOUBLE
14947: EQUAL
14948: IFTRUE 14952
14950: GO 14978
14952: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14953: LD_ADDR_VAR 0 3
14957: PUSH
14958: LD_INT 2
14960: PUSH
14961: LD_INT 3
14963: PUSH
14964: LD_INT 4
14966: PUSH
14967: LD_INT 5
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: ST_TO_ADDR
14976: GO 15869
14978: LD_INT 9
14980: DOUBLE
14981: EQUAL
14982: IFTRUE 14986
14984: GO 15012
14986: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14987: LD_ADDR_VAR 0 3
14991: PUSH
14992: LD_INT 2
14994: PUSH
14995: LD_INT 3
14997: PUSH
14998: LD_INT 4
15000: PUSH
15001: LD_INT 5
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: ST_TO_ADDR
15010: GO 15869
15012: LD_INT 7
15014: DOUBLE
15015: EQUAL
15016: IFTRUE 15020
15018: GO 15046
15020: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
15021: LD_ADDR_VAR 0 3
15025: PUSH
15026: LD_INT 2
15028: PUSH
15029: LD_INT 3
15031: PUSH
15032: LD_INT 4
15034: PUSH
15035: LD_INT 5
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: ST_TO_ADDR
15044: GO 15869
15046: LD_INT 12
15048: DOUBLE
15049: EQUAL
15050: IFTRUE 15054
15052: GO 15080
15054: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
15055: LD_ADDR_VAR 0 3
15059: PUSH
15060: LD_INT 2
15062: PUSH
15063: LD_INT 3
15065: PUSH
15066: LD_INT 4
15068: PUSH
15069: LD_INT 5
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: ST_TO_ADDR
15078: GO 15869
15080: LD_INT 13
15082: DOUBLE
15083: EQUAL
15084: IFTRUE 15088
15086: GO 15114
15088: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15089: LD_ADDR_VAR 0 3
15093: PUSH
15094: LD_INT 2
15096: PUSH
15097: LD_INT 3
15099: PUSH
15100: LD_INT 4
15102: PUSH
15103: LD_INT 5
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: ST_TO_ADDR
15112: GO 15869
15114: LD_INT 14
15116: DOUBLE
15117: EQUAL
15118: IFTRUE 15122
15120: GO 15140
15122: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15123: LD_ADDR_VAR 0 3
15127: PUSH
15128: LD_INT 4
15130: PUSH
15131: LD_INT 5
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: ST_TO_ADDR
15138: GO 15869
15140: LD_INT 6
15142: DOUBLE
15143: EQUAL
15144: IFTRUE 15148
15146: GO 15166
15148: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15149: LD_ADDR_VAR 0 3
15153: PUSH
15154: LD_INT 4
15156: PUSH
15157: LD_INT 5
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: ST_TO_ADDR
15164: GO 15869
15166: LD_INT 10
15168: DOUBLE
15169: EQUAL
15170: IFTRUE 15174
15172: GO 15192
15174: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15175: LD_ADDR_VAR 0 3
15179: PUSH
15180: LD_INT 4
15182: PUSH
15183: LD_INT 5
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: ST_TO_ADDR
15190: GO 15869
15192: LD_INT 22
15194: DOUBLE
15195: EQUAL
15196: IFTRUE 15200
15198: GO 15226
15200: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15201: LD_ADDR_VAR 0 3
15205: PUSH
15206: LD_INT 11
15208: PUSH
15209: LD_INT 12
15211: PUSH
15212: LD_INT 13
15214: PUSH
15215: LD_INT 14
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: ST_TO_ADDR
15224: GO 15869
15226: LD_INT 23
15228: DOUBLE
15229: EQUAL
15230: IFTRUE 15234
15232: GO 15260
15234: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15235: LD_ADDR_VAR 0 3
15239: PUSH
15240: LD_INT 11
15242: PUSH
15243: LD_INT 12
15245: PUSH
15246: LD_INT 13
15248: PUSH
15249: LD_INT 14
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: ST_TO_ADDR
15258: GO 15869
15260: LD_INT 24
15262: DOUBLE
15263: EQUAL
15264: IFTRUE 15268
15266: GO 15294
15268: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15269: LD_ADDR_VAR 0 3
15273: PUSH
15274: LD_INT 11
15276: PUSH
15277: LD_INT 12
15279: PUSH
15280: LD_INT 13
15282: PUSH
15283: LD_INT 14
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: ST_TO_ADDR
15292: GO 15869
15294: LD_INT 30
15296: DOUBLE
15297: EQUAL
15298: IFTRUE 15302
15300: GO 15328
15302: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15303: LD_ADDR_VAR 0 3
15307: PUSH
15308: LD_INT 11
15310: PUSH
15311: LD_INT 12
15313: PUSH
15314: LD_INT 13
15316: PUSH
15317: LD_INT 14
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: ST_TO_ADDR
15326: GO 15869
15328: LD_INT 25
15330: DOUBLE
15331: EQUAL
15332: IFTRUE 15336
15334: GO 15354
15336: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15337: LD_ADDR_VAR 0 3
15341: PUSH
15342: LD_INT 13
15344: PUSH
15345: LD_INT 14
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: ST_TO_ADDR
15352: GO 15869
15354: LD_INT 27
15356: DOUBLE
15357: EQUAL
15358: IFTRUE 15362
15360: GO 15380
15362: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
15363: LD_ADDR_VAR 0 3
15367: PUSH
15368: LD_INT 13
15370: PUSH
15371: LD_INT 14
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: ST_TO_ADDR
15378: GO 15869
15380: LD_INT 92
15382: DOUBLE
15383: EQUAL
15384: IFTRUE 15388
15386: GO 15414
15388: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15389: LD_ADDR_VAR 0 3
15393: PUSH
15394: LD_INT 11
15396: PUSH
15397: LD_INT 12
15399: PUSH
15400: LD_INT 13
15402: PUSH
15403: LD_INT 14
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: ST_TO_ADDR
15412: GO 15869
15414: LD_INT 28
15416: DOUBLE
15417: EQUAL
15418: IFTRUE 15422
15420: GO 15440
15422: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15423: LD_ADDR_VAR 0 3
15427: PUSH
15428: LD_INT 13
15430: PUSH
15431: LD_INT 14
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: ST_TO_ADDR
15438: GO 15869
15440: LD_INT 29
15442: DOUBLE
15443: EQUAL
15444: IFTRUE 15448
15446: GO 15466
15448: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15449: LD_ADDR_VAR 0 3
15453: PUSH
15454: LD_INT 13
15456: PUSH
15457: LD_INT 14
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: ST_TO_ADDR
15464: GO 15869
15466: LD_INT 31
15468: DOUBLE
15469: EQUAL
15470: IFTRUE 15474
15472: GO 15492
15474: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15475: LD_ADDR_VAR 0 3
15479: PUSH
15480: LD_INT 13
15482: PUSH
15483: LD_INT 14
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: ST_TO_ADDR
15490: GO 15869
15492: LD_INT 26
15494: DOUBLE
15495: EQUAL
15496: IFTRUE 15500
15498: GO 15518
15500: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15501: LD_ADDR_VAR 0 3
15505: PUSH
15506: LD_INT 13
15508: PUSH
15509: LD_INT 14
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: ST_TO_ADDR
15516: GO 15869
15518: LD_INT 42
15520: DOUBLE
15521: EQUAL
15522: IFTRUE 15526
15524: GO 15552
15526: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15527: LD_ADDR_VAR 0 3
15531: PUSH
15532: LD_INT 21
15534: PUSH
15535: LD_INT 22
15537: PUSH
15538: LD_INT 23
15540: PUSH
15541: LD_INT 24
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: ST_TO_ADDR
15550: GO 15869
15552: LD_INT 43
15554: DOUBLE
15555: EQUAL
15556: IFTRUE 15560
15558: GO 15586
15560: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15561: LD_ADDR_VAR 0 3
15565: PUSH
15566: LD_INT 21
15568: PUSH
15569: LD_INT 22
15571: PUSH
15572: LD_INT 23
15574: PUSH
15575: LD_INT 24
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: ST_TO_ADDR
15584: GO 15869
15586: LD_INT 44
15588: DOUBLE
15589: EQUAL
15590: IFTRUE 15594
15592: GO 15620
15594: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15595: LD_ADDR_VAR 0 3
15599: PUSH
15600: LD_INT 21
15602: PUSH
15603: LD_INT 22
15605: PUSH
15606: LD_INT 23
15608: PUSH
15609: LD_INT 24
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: ST_TO_ADDR
15618: GO 15869
15620: LD_INT 45
15622: DOUBLE
15623: EQUAL
15624: IFTRUE 15628
15626: GO 15654
15628: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15629: LD_ADDR_VAR 0 3
15633: PUSH
15634: LD_INT 21
15636: PUSH
15637: LD_INT 22
15639: PUSH
15640: LD_INT 23
15642: PUSH
15643: LD_INT 24
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: ST_TO_ADDR
15652: GO 15869
15654: LD_INT 49
15656: DOUBLE
15657: EQUAL
15658: IFTRUE 15662
15660: GO 15688
15662: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15663: LD_ADDR_VAR 0 3
15667: PUSH
15668: LD_INT 21
15670: PUSH
15671: LD_INT 22
15673: PUSH
15674: LD_INT 23
15676: PUSH
15677: LD_INT 24
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: ST_TO_ADDR
15686: GO 15869
15688: LD_INT 51
15690: DOUBLE
15691: EQUAL
15692: IFTRUE 15696
15694: GO 15722
15696: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15697: LD_ADDR_VAR 0 3
15701: PUSH
15702: LD_INT 21
15704: PUSH
15705: LD_INT 22
15707: PUSH
15708: LD_INT 23
15710: PUSH
15711: LD_INT 24
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: ST_TO_ADDR
15720: GO 15869
15722: LD_INT 52
15724: DOUBLE
15725: EQUAL
15726: IFTRUE 15730
15728: GO 15756
15730: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15731: LD_ADDR_VAR 0 3
15735: PUSH
15736: LD_INT 21
15738: PUSH
15739: LD_INT 22
15741: PUSH
15742: LD_INT 23
15744: PUSH
15745: LD_INT 24
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: ST_TO_ADDR
15754: GO 15869
15756: LD_INT 53
15758: DOUBLE
15759: EQUAL
15760: IFTRUE 15764
15762: GO 15782
15764: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15765: LD_ADDR_VAR 0 3
15769: PUSH
15770: LD_INT 23
15772: PUSH
15773: LD_INT 24
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: ST_TO_ADDR
15780: GO 15869
15782: LD_INT 46
15784: DOUBLE
15785: EQUAL
15786: IFTRUE 15790
15788: GO 15808
15790: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15791: LD_ADDR_VAR 0 3
15795: PUSH
15796: LD_INT 23
15798: PUSH
15799: LD_INT 24
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: ST_TO_ADDR
15806: GO 15869
15808: LD_INT 47
15810: DOUBLE
15811: EQUAL
15812: IFTRUE 15816
15814: GO 15834
15816: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15817: LD_ADDR_VAR 0 3
15821: PUSH
15822: LD_INT 23
15824: PUSH
15825: LD_INT 24
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: ST_TO_ADDR
15832: GO 15869
15834: LD_INT 98
15836: DOUBLE
15837: EQUAL
15838: IFTRUE 15842
15840: GO 15868
15842: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15843: LD_ADDR_VAR 0 3
15847: PUSH
15848: LD_INT 21
15850: PUSH
15851: LD_INT 22
15853: PUSH
15854: LD_INT 23
15856: PUSH
15857: LD_INT 24
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: ST_TO_ADDR
15866: GO 15869
15868: POP
// result := ( chassis in result ) ;
15869: LD_ADDR_VAR 0 3
15873: PUSH
15874: LD_VAR 0 1
15878: PUSH
15879: LD_VAR 0 3
15883: IN
15884: ST_TO_ADDR
// end ;
15885: LD_VAR 0 3
15889: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15890: LD_INT 0
15892: PPUSH
15893: PPUSH
15894: PPUSH
15895: PPUSH
15896: PPUSH
15897: PPUSH
15898: PPUSH
// result := array ;
15899: LD_ADDR_VAR 0 5
15903: PUSH
15904: LD_VAR 0 1
15908: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15909: LD_VAR 0 1
15913: NOT
15914: IFTRUE 15923
15916: PUSH
15917: LD_VAR 0 2
15921: NOT
15922: OR
15923: IFTRUE 15932
15925: PUSH
15926: LD_VAR 0 3
15930: NOT
15931: OR
15932: IFTRUE 15946
15934: PUSH
15935: LD_VAR 0 2
15939: PUSH
15940: LD_VAR 0 1
15944: GREATER
15945: OR
15946: IFTRUE 15960
15948: PUSH
15949: LD_VAR 0 3
15953: PUSH
15954: LD_VAR 0 1
15958: GREATER
15959: OR
15960: IFFALSE 15964
// exit ;
15962: GO 16260
// if direction then
15964: LD_VAR 0 4
15968: IFFALSE 16032
// begin d := 1 ;
15970: LD_ADDR_VAR 0 9
15974: PUSH
15975: LD_INT 1
15977: ST_TO_ADDR
// if i_from > i_to then
15978: LD_VAR 0 2
15982: PUSH
15983: LD_VAR 0 3
15987: GREATER
15988: IFFALSE 16014
// length := ( array - i_from ) + i_to else
15990: LD_ADDR_VAR 0 11
15994: PUSH
15995: LD_VAR 0 1
15999: PUSH
16000: LD_VAR 0 2
16004: MINUS
16005: PUSH
16006: LD_VAR 0 3
16010: PLUS
16011: ST_TO_ADDR
16012: GO 16030
// length := i_to - i_from ;
16014: LD_ADDR_VAR 0 11
16018: PUSH
16019: LD_VAR 0 3
16023: PUSH
16024: LD_VAR 0 2
16028: MINUS
16029: ST_TO_ADDR
// end else
16030: GO 16093
// begin d := - 1 ;
16032: LD_ADDR_VAR 0 9
16036: PUSH
16037: LD_INT 1
16039: NEG
16040: ST_TO_ADDR
// if i_from > i_to then
16041: LD_VAR 0 2
16045: PUSH
16046: LD_VAR 0 3
16050: GREATER
16051: IFFALSE 16071
// length := i_from - i_to else
16053: LD_ADDR_VAR 0 11
16057: PUSH
16058: LD_VAR 0 2
16062: PUSH
16063: LD_VAR 0 3
16067: MINUS
16068: ST_TO_ADDR
16069: GO 16093
// length := ( array - i_to ) + i_from ;
16071: LD_ADDR_VAR 0 11
16075: PUSH
16076: LD_VAR 0 1
16080: PUSH
16081: LD_VAR 0 3
16085: MINUS
16086: PUSH
16087: LD_VAR 0 2
16091: PLUS
16092: ST_TO_ADDR
// end ; if not length then
16093: LD_VAR 0 11
16097: NOT
16098: IFFALSE 16102
// exit ;
16100: GO 16260
// tmp := array ;
16102: LD_ADDR_VAR 0 10
16106: PUSH
16107: LD_VAR 0 1
16111: ST_TO_ADDR
// for i = 1 to length do
16112: LD_ADDR_VAR 0 6
16116: PUSH
16117: DOUBLE
16118: LD_INT 1
16120: DEC
16121: ST_TO_ADDR
16122: LD_VAR 0 11
16126: PUSH
16127: FOR_TO
16128: IFFALSE 16248
// begin for j = 1 to array do
16130: LD_ADDR_VAR 0 7
16134: PUSH
16135: DOUBLE
16136: LD_INT 1
16138: DEC
16139: ST_TO_ADDR
16140: LD_VAR 0 1
16144: PUSH
16145: FOR_TO
16146: IFFALSE 16234
// begin k := j + d ;
16148: LD_ADDR_VAR 0 8
16152: PUSH
16153: LD_VAR 0 7
16157: PUSH
16158: LD_VAR 0 9
16162: PLUS
16163: ST_TO_ADDR
// if k > array then
16164: LD_VAR 0 8
16168: PUSH
16169: LD_VAR 0 1
16173: GREATER
16174: IFFALSE 16184
// k := 1 ;
16176: LD_ADDR_VAR 0 8
16180: PUSH
16181: LD_INT 1
16183: ST_TO_ADDR
// if not k then
16184: LD_VAR 0 8
16188: NOT
16189: IFFALSE 16201
// k := array ;
16191: LD_ADDR_VAR 0 8
16195: PUSH
16196: LD_VAR 0 1
16200: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16201: LD_ADDR_VAR 0 10
16205: PUSH
16206: LD_VAR 0 10
16210: PPUSH
16211: LD_VAR 0 8
16215: PPUSH
16216: LD_VAR 0 1
16220: PUSH
16221: LD_VAR 0 7
16225: ARRAY
16226: PPUSH
16227: CALL_OW 1
16231: ST_TO_ADDR
// end ;
16232: GO 16145
16234: POP
16235: POP
// array := tmp ;
16236: LD_ADDR_VAR 0 1
16240: PUSH
16241: LD_VAR 0 10
16245: ST_TO_ADDR
// end ;
16246: GO 16127
16248: POP
16249: POP
// result := array ;
16250: LD_ADDR_VAR 0 5
16254: PUSH
16255: LD_VAR 0 1
16259: ST_TO_ADDR
// end ;
16260: LD_VAR 0 5
16264: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16265: LD_INT 0
16267: PPUSH
16268: PPUSH
// result := 0 ;
16269: LD_ADDR_VAR 0 3
16273: PUSH
16274: LD_INT 0
16276: ST_TO_ADDR
// if not array or not value in array then
16277: LD_VAR 0 1
16281: NOT
16282: IFTRUE 16297
16284: PUSH
16285: LD_VAR 0 2
16289: PUSH
16290: LD_VAR 0 1
16294: IN
16295: NOT
16296: OR
16297: IFFALSE 16301
// exit ;
16299: GO 16355
// for i = 1 to array do
16301: LD_ADDR_VAR 0 4
16305: PUSH
16306: DOUBLE
16307: LD_INT 1
16309: DEC
16310: ST_TO_ADDR
16311: LD_VAR 0 1
16315: PUSH
16316: FOR_TO
16317: IFFALSE 16353
// if value = array [ i ] then
16319: LD_VAR 0 2
16323: PUSH
16324: LD_VAR 0 1
16328: PUSH
16329: LD_VAR 0 4
16333: ARRAY
16334: EQUAL
16335: IFFALSE 16351
// begin result := i ;
16337: LD_ADDR_VAR 0 3
16341: PUSH
16342: LD_VAR 0 4
16346: ST_TO_ADDR
// exit ;
16347: POP
16348: POP
16349: GO 16355
// end ;
16351: GO 16316
16353: POP
16354: POP
// end ;
16355: LD_VAR 0 3
16359: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16360: LD_INT 0
16362: PPUSH
// vc_chassis := chassis ;
16363: LD_ADDR_OWVAR 37
16367: PUSH
16368: LD_VAR 0 1
16372: ST_TO_ADDR
// vc_engine := engine ;
16373: LD_ADDR_OWVAR 39
16377: PUSH
16378: LD_VAR 0 2
16382: ST_TO_ADDR
// vc_control := control ;
16383: LD_ADDR_OWVAR 38
16387: PUSH
16388: LD_VAR 0 3
16392: ST_TO_ADDR
// vc_weapon := weapon ;
16393: LD_ADDR_OWVAR 40
16397: PUSH
16398: LD_VAR 0 4
16402: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16403: LD_ADDR_OWVAR 41
16407: PUSH
16408: LD_VAR 0 5
16412: ST_TO_ADDR
// end ;
16413: LD_VAR 0 6
16417: RET
// export function WantPlant ( unit ) ; var task ; begin
16418: LD_INT 0
16420: PPUSH
16421: PPUSH
// result := false ;
16422: LD_ADDR_VAR 0 2
16426: PUSH
16427: LD_INT 0
16429: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16430: LD_ADDR_VAR 0 3
16434: PUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 437
16444: ST_TO_ADDR
// if task then
16445: LD_VAR 0 3
16449: IFFALSE 16477
// if task [ 1 ] [ 1 ] = p then
16451: LD_VAR 0 3
16455: PUSH
16456: LD_INT 1
16458: ARRAY
16459: PUSH
16460: LD_INT 1
16462: ARRAY
16463: PUSH
16464: LD_STRING p
16466: EQUAL
16467: IFFALSE 16477
// result := true ;
16469: LD_ADDR_VAR 0 2
16473: PUSH
16474: LD_INT 1
16476: ST_TO_ADDR
// end ;
16477: LD_VAR 0 2
16481: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16482: LD_INT 0
16484: PPUSH
16485: PPUSH
16486: PPUSH
16487: PPUSH
// if pos < 1 then
16488: LD_VAR 0 2
16492: PUSH
16493: LD_INT 1
16495: LESS
16496: IFFALSE 16500
// exit ;
16498: GO 16803
// if pos = 1 then
16500: LD_VAR 0 2
16504: PUSH
16505: LD_INT 1
16507: EQUAL
16508: IFFALSE 16541
// result := Replace ( arr , pos [ 1 ] , value ) else
16510: LD_ADDR_VAR 0 4
16514: PUSH
16515: LD_VAR 0 1
16519: PPUSH
16520: LD_VAR 0 2
16524: PUSH
16525: LD_INT 1
16527: ARRAY
16528: PPUSH
16529: LD_VAR 0 3
16533: PPUSH
16534: CALL_OW 1
16538: ST_TO_ADDR
16539: GO 16803
// begin tmp := arr ;
16541: LD_ADDR_VAR 0 6
16545: PUSH
16546: LD_VAR 0 1
16550: ST_TO_ADDR
// s_arr := [ tmp ] ;
16551: LD_ADDR_VAR 0 7
16555: PUSH
16556: LD_VAR 0 6
16560: PUSH
16561: EMPTY
16562: LIST
16563: ST_TO_ADDR
// for i = 1 to pos - 1 do
16564: LD_ADDR_VAR 0 5
16568: PUSH
16569: DOUBLE
16570: LD_INT 1
16572: DEC
16573: ST_TO_ADDR
16574: LD_VAR 0 2
16578: PUSH
16579: LD_INT 1
16581: MINUS
16582: PUSH
16583: FOR_TO
16584: IFFALSE 16629
// begin tmp := tmp [ pos [ i ] ] ;
16586: LD_ADDR_VAR 0 6
16590: PUSH
16591: LD_VAR 0 6
16595: PUSH
16596: LD_VAR 0 2
16600: PUSH
16601: LD_VAR 0 5
16605: ARRAY
16606: ARRAY
16607: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16608: LD_ADDR_VAR 0 7
16612: PUSH
16613: LD_VAR 0 7
16617: PUSH
16618: LD_VAR 0 6
16622: PUSH
16623: EMPTY
16624: LIST
16625: ADD
16626: ST_TO_ADDR
// end ;
16627: GO 16583
16629: POP
16630: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16631: LD_ADDR_VAR 0 6
16635: PUSH
16636: LD_VAR 0 6
16640: PPUSH
16641: LD_VAR 0 2
16645: PUSH
16646: LD_VAR 0 2
16650: ARRAY
16651: PPUSH
16652: LD_VAR 0 3
16656: PPUSH
16657: CALL_OW 1
16661: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16662: LD_ADDR_VAR 0 7
16666: PUSH
16667: LD_VAR 0 7
16671: PPUSH
16672: LD_VAR 0 7
16676: PPUSH
16677: LD_VAR 0 6
16681: PPUSH
16682: CALL_OW 1
16686: ST_TO_ADDR
// for i = s_arr downto 2 do
16687: LD_ADDR_VAR 0 5
16691: PUSH
16692: DOUBLE
16693: LD_VAR 0 7
16697: INC
16698: ST_TO_ADDR
16699: LD_INT 2
16701: PUSH
16702: FOR_DOWNTO
16703: IFFALSE 16787
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16705: LD_ADDR_VAR 0 6
16709: PUSH
16710: LD_VAR 0 7
16714: PUSH
16715: LD_VAR 0 5
16719: PUSH
16720: LD_INT 1
16722: MINUS
16723: ARRAY
16724: PPUSH
16725: LD_VAR 0 2
16729: PUSH
16730: LD_VAR 0 5
16734: PUSH
16735: LD_INT 1
16737: MINUS
16738: ARRAY
16739: PPUSH
16740: LD_VAR 0 7
16744: PUSH
16745: LD_VAR 0 5
16749: ARRAY
16750: PPUSH
16751: CALL_OW 1
16755: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16756: LD_ADDR_VAR 0 7
16760: PUSH
16761: LD_VAR 0 7
16765: PPUSH
16766: LD_VAR 0 5
16770: PUSH
16771: LD_INT 1
16773: MINUS
16774: PPUSH
16775: LD_VAR 0 6
16779: PPUSH
16780: CALL_OW 1
16784: ST_TO_ADDR
// end ;
16785: GO 16702
16787: POP
16788: POP
// result := s_arr [ 1 ] ;
16789: LD_ADDR_VAR 0 4
16793: PUSH
16794: LD_VAR 0 7
16798: PUSH
16799: LD_INT 1
16801: ARRAY
16802: ST_TO_ADDR
// end ; end ;
16803: LD_VAR 0 4
16807: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16808: LD_INT 0
16810: PPUSH
16811: PPUSH
// if not list then
16812: LD_VAR 0 1
16816: NOT
16817: IFFALSE 16821
// exit ;
16819: GO 16912
// i := list [ pos1 ] ;
16821: LD_ADDR_VAR 0 5
16825: PUSH
16826: LD_VAR 0 1
16830: PUSH
16831: LD_VAR 0 2
16835: ARRAY
16836: ST_TO_ADDR
// if not i then
16837: LD_VAR 0 5
16841: NOT
16842: IFFALSE 16846
// exit ;
16844: GO 16912
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16846: LD_ADDR_VAR 0 1
16850: PUSH
16851: LD_VAR 0 1
16855: PPUSH
16856: LD_VAR 0 2
16860: PPUSH
16861: LD_VAR 0 1
16865: PUSH
16866: LD_VAR 0 3
16870: ARRAY
16871: PPUSH
16872: CALL_OW 1
16876: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16877: LD_ADDR_VAR 0 1
16881: PUSH
16882: LD_VAR 0 1
16886: PPUSH
16887: LD_VAR 0 3
16891: PPUSH
16892: LD_VAR 0 5
16896: PPUSH
16897: CALL_OW 1
16901: ST_TO_ADDR
// result := list ;
16902: LD_ADDR_VAR 0 4
16906: PUSH
16907: LD_VAR 0 1
16911: ST_TO_ADDR
// end ;
16912: LD_VAR 0 4
16916: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16917: LD_INT 0
16919: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16920: LD_ADDR_VAR 0 5
16924: PUSH
16925: LD_VAR 0 1
16929: PPUSH
16930: CALL_OW 250
16934: PPUSH
16935: LD_VAR 0 1
16939: PPUSH
16940: CALL_OW 251
16944: PPUSH
16945: LD_VAR 0 2
16949: PPUSH
16950: LD_VAR 0 3
16954: PPUSH
16955: LD_VAR 0 4
16959: PPUSH
16960: CALL 17342 0 5
16964: ST_TO_ADDR
// end ;
16965: LD_VAR 0 5
16969: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16970: LD_INT 0
16972: PPUSH
16973: PPUSH
16974: PPUSH
16975: PPUSH
// if not list or not unit then
16976: LD_VAR 0 2
16980: NOT
16981: IFTRUE 16990
16983: PUSH
16984: LD_VAR 0 1
16988: NOT
16989: OR
16990: IFFALSE 16994
// exit ;
16992: GO 17337
// result := [ ] ;
16994: LD_ADDR_VAR 0 5
16998: PUSH
16999: EMPTY
17000: ST_TO_ADDR
// for i in list do
17001: LD_ADDR_VAR 0 6
17005: PUSH
17006: LD_VAR 0 2
17010: PUSH
17011: FOR_IN
17012: IFFALSE 17230
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
17014: LD_ADDR_VAR 0 8
17018: PUSH
17019: LD_VAR 0 1
17023: PPUSH
17024: LD_VAR 0 6
17028: PUSH
17029: LD_INT 1
17031: ARRAY
17032: PPUSH
17033: LD_VAR 0 6
17037: PUSH
17038: LD_INT 2
17040: ARRAY
17041: PPUSH
17042: CALL_OW 297
17046: ST_TO_ADDR
// if not Count ( result ) then
17047: LD_VAR 0 5
17051: PPUSH
17052: CALL 13564 0 1
17056: NOT
17057: IFFALSE 17090
// begin result := Join ( result , [ i , tmp ] ) ;
17059: LD_ADDR_VAR 0 5
17063: PUSH
17064: LD_VAR 0 5
17068: PPUSH
17069: LD_VAR 0 6
17073: PUSH
17074: LD_VAR 0 8
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PPUSH
17083: CALL 49540 0 2
17087: ST_TO_ADDR
// continue ;
17088: GO 17011
// end ; if result [ result ] [ 2 ] <= tmp then
17090: LD_VAR 0 5
17094: PUSH
17095: LD_VAR 0 5
17099: ARRAY
17100: PUSH
17101: LD_INT 2
17103: ARRAY
17104: PUSH
17105: LD_VAR 0 8
17109: LESSEQUAL
17110: IFFALSE 17143
// result := Join ( result , [ i , tmp ] ) else
17112: LD_ADDR_VAR 0 5
17116: PUSH
17117: LD_VAR 0 5
17121: PPUSH
17122: LD_VAR 0 6
17126: PUSH
17127: LD_VAR 0 8
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: PPUSH
17136: CALL 49540 0 2
17140: ST_TO_ADDR
17141: GO 17228
// begin for j := 1 to Count ( result ) do
17143: LD_ADDR_VAR 0 7
17147: PUSH
17148: DOUBLE
17149: LD_INT 1
17151: DEC
17152: ST_TO_ADDR
17153: LD_VAR 0 5
17157: PPUSH
17158: CALL 13564 0 1
17162: PUSH
17163: FOR_TO
17164: IFFALSE 17226
// begin if tmp < result [ j ] [ 2 ] then
17166: LD_VAR 0 8
17170: PUSH
17171: LD_VAR 0 5
17175: PUSH
17176: LD_VAR 0 7
17180: ARRAY
17181: PUSH
17182: LD_INT 2
17184: ARRAY
17185: LESS
17186: IFFALSE 17224
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17188: LD_ADDR_VAR 0 5
17192: PUSH
17193: LD_VAR 0 5
17197: PPUSH
17198: LD_VAR 0 7
17202: PPUSH
17203: LD_VAR 0 6
17207: PUSH
17208: LD_VAR 0 8
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PPUSH
17217: CALL_OW 2
17221: ST_TO_ADDR
// break ;
17222: GO 17226
// end ; end ;
17224: GO 17163
17226: POP
17227: POP
// end ; end ;
17228: GO 17011
17230: POP
17231: POP
// if result and not asc then
17232: LD_VAR 0 5
17236: IFFALSE 17245
17238: PUSH
17239: LD_VAR 0 3
17243: NOT
17244: AND
17245: IFFALSE 17262
// result := ReverseArray ( result ) ;
17247: LD_ADDR_VAR 0 5
17251: PUSH
17252: LD_VAR 0 5
17256: PPUSH
17257: CALL 44620 0 1
17261: ST_TO_ADDR
// tmp := [ ] ;
17262: LD_ADDR_VAR 0 8
17266: PUSH
17267: EMPTY
17268: ST_TO_ADDR
// if mode then
17269: LD_VAR 0 4
17273: IFFALSE 17337
// begin for i := 1 to result do
17275: LD_ADDR_VAR 0 6
17279: PUSH
17280: DOUBLE
17281: LD_INT 1
17283: DEC
17284: ST_TO_ADDR
17285: LD_VAR 0 5
17289: PUSH
17290: FOR_TO
17291: IFFALSE 17325
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
17293: LD_ADDR_VAR 0 8
17297: PUSH
17298: LD_VAR 0 8
17302: PPUSH
17303: LD_VAR 0 5
17307: PUSH
17308: LD_VAR 0 6
17312: ARRAY
17313: PUSH
17314: LD_INT 1
17316: ARRAY
17317: PPUSH
17318: CALL 49540 0 2
17322: ST_TO_ADDR
17323: GO 17290
17325: POP
17326: POP
// result := tmp ;
17327: LD_ADDR_VAR 0 5
17331: PUSH
17332: LD_VAR 0 8
17336: ST_TO_ADDR
// end ; end ;
17337: LD_VAR 0 5
17341: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17342: LD_INT 0
17344: PPUSH
17345: PPUSH
17346: PPUSH
17347: PPUSH
// if not list then
17348: LD_VAR 0 3
17352: NOT
17353: IFFALSE 17357
// exit ;
17355: GO 17747
// result := [ ] ;
17357: LD_ADDR_VAR 0 6
17361: PUSH
17362: EMPTY
17363: ST_TO_ADDR
// for i in list do
17364: LD_ADDR_VAR 0 7
17368: PUSH
17369: LD_VAR 0 3
17373: PUSH
17374: FOR_IN
17375: IFFALSE 17577
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17377: LD_ADDR_VAR 0 9
17381: PUSH
17382: LD_VAR 0 7
17386: PPUSH
17387: LD_VAR 0 1
17391: PPUSH
17392: LD_VAR 0 2
17396: PPUSH
17397: CALL_OW 297
17401: ST_TO_ADDR
// if not result then
17402: LD_VAR 0 6
17406: NOT
17407: IFFALSE 17433
// result := [ [ i , tmp ] ] else
17409: LD_ADDR_VAR 0 6
17413: PUSH
17414: LD_VAR 0 7
17418: PUSH
17419: LD_VAR 0 9
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: EMPTY
17429: LIST
17430: ST_TO_ADDR
17431: GO 17575
// begin if result [ result ] [ 2 ] <= tmp then
17433: LD_VAR 0 6
17437: PUSH
17438: LD_VAR 0 6
17442: ARRAY
17443: PUSH
17444: LD_INT 2
17446: ARRAY
17447: PUSH
17448: LD_VAR 0 9
17452: LESSEQUAL
17453: IFFALSE 17495
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17455: LD_ADDR_VAR 0 6
17459: PUSH
17460: LD_VAR 0 6
17464: PPUSH
17465: LD_VAR 0 6
17469: PUSH
17470: LD_INT 1
17472: PLUS
17473: PPUSH
17474: LD_VAR 0 7
17478: PUSH
17479: LD_VAR 0 9
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PPUSH
17488: CALL_OW 2
17492: ST_TO_ADDR
17493: GO 17575
// for j := 1 to result do
17495: LD_ADDR_VAR 0 8
17499: PUSH
17500: DOUBLE
17501: LD_INT 1
17503: DEC
17504: ST_TO_ADDR
17505: LD_VAR 0 6
17509: PUSH
17510: FOR_TO
17511: IFFALSE 17573
// begin if tmp < result [ j ] [ 2 ] then
17513: LD_VAR 0 9
17517: PUSH
17518: LD_VAR 0 6
17522: PUSH
17523: LD_VAR 0 8
17527: ARRAY
17528: PUSH
17529: LD_INT 2
17531: ARRAY
17532: LESS
17533: IFFALSE 17571
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17535: LD_ADDR_VAR 0 6
17539: PUSH
17540: LD_VAR 0 6
17544: PPUSH
17545: LD_VAR 0 8
17549: PPUSH
17550: LD_VAR 0 7
17554: PUSH
17555: LD_VAR 0 9
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PPUSH
17564: CALL_OW 2
17568: ST_TO_ADDR
// break ;
17569: GO 17573
// end ; end ;
17571: GO 17510
17573: POP
17574: POP
// end ; end ;
17575: GO 17374
17577: POP
17578: POP
// if result and not asc then
17579: LD_VAR 0 6
17583: IFFALSE 17592
17585: PUSH
17586: LD_VAR 0 4
17590: NOT
17591: AND
17592: IFFALSE 17667
// begin tmp := result ;
17594: LD_ADDR_VAR 0 9
17598: PUSH
17599: LD_VAR 0 6
17603: ST_TO_ADDR
// for i = tmp downto 1 do
17604: LD_ADDR_VAR 0 7
17608: PUSH
17609: DOUBLE
17610: LD_VAR 0 9
17614: INC
17615: ST_TO_ADDR
17616: LD_INT 1
17618: PUSH
17619: FOR_DOWNTO
17620: IFFALSE 17665
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17622: LD_ADDR_VAR 0 6
17626: PUSH
17627: LD_VAR 0 6
17631: PPUSH
17632: LD_VAR 0 9
17636: PUSH
17637: LD_VAR 0 7
17641: MINUS
17642: PUSH
17643: LD_INT 1
17645: PLUS
17646: PPUSH
17647: LD_VAR 0 9
17651: PUSH
17652: LD_VAR 0 7
17656: ARRAY
17657: PPUSH
17658: CALL_OW 1
17662: ST_TO_ADDR
17663: GO 17619
17665: POP
17666: POP
// end ; tmp := [ ] ;
17667: LD_ADDR_VAR 0 9
17671: PUSH
17672: EMPTY
17673: ST_TO_ADDR
// if mode then
17674: LD_VAR 0 5
17678: IFFALSE 17747
// begin for i = 1 to result do
17680: LD_ADDR_VAR 0 7
17684: PUSH
17685: DOUBLE
17686: LD_INT 1
17688: DEC
17689: ST_TO_ADDR
17690: LD_VAR 0 6
17694: PUSH
17695: FOR_TO
17696: IFFALSE 17735
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17698: LD_ADDR_VAR 0 9
17702: PUSH
17703: LD_VAR 0 9
17707: PPUSH
17708: LD_VAR 0 7
17712: PPUSH
17713: LD_VAR 0 6
17717: PUSH
17718: LD_VAR 0 7
17722: ARRAY
17723: PUSH
17724: LD_INT 1
17726: ARRAY
17727: PPUSH
17728: CALL_OW 1
17732: ST_TO_ADDR
17733: GO 17695
17735: POP
17736: POP
// result := tmp ;
17737: LD_ADDR_VAR 0 6
17741: PUSH
17742: LD_VAR 0 9
17746: ST_TO_ADDR
// end ; end ;
17747: LD_VAR 0 6
17751: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17752: LD_INT 0
17754: PPUSH
17755: PPUSH
17756: PPUSH
17757: PPUSH
17758: PPUSH
17759: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17760: LD_ADDR_VAR 0 5
17764: PUSH
17765: LD_INT 0
17767: PUSH
17768: LD_INT 0
17770: PUSH
17771: LD_INT 0
17773: PUSH
17774: EMPTY
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: ST_TO_ADDR
// if not x or not y then
17782: LD_VAR 0 2
17786: NOT
17787: IFTRUE 17796
17789: PUSH
17790: LD_VAR 0 3
17794: NOT
17795: OR
17796: IFFALSE 17800
// exit ;
17798: GO 19456
// if not range then
17800: LD_VAR 0 4
17804: NOT
17805: IFFALSE 17815
// range := 10 ;
17807: LD_ADDR_VAR 0 4
17811: PUSH
17812: LD_INT 10
17814: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17815: LD_ADDR_VAR 0 8
17819: PUSH
17820: LD_INT 81
17822: PUSH
17823: LD_VAR 0 1
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 92
17834: PUSH
17835: LD_VAR 0 2
17839: PUSH
17840: LD_VAR 0 3
17844: PUSH
17845: LD_VAR 0 4
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 3
17858: PUSH
17859: LD_INT 21
17861: PUSH
17862: LD_INT 3
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: LIST
17877: PPUSH
17878: CALL_OW 69
17882: ST_TO_ADDR
// if not tmp then
17883: LD_VAR 0 8
17887: NOT
17888: IFFALSE 17892
// exit ;
17890: GO 19456
// for i in tmp do
17892: LD_ADDR_VAR 0 6
17896: PUSH
17897: LD_VAR 0 8
17901: PUSH
17902: FOR_IN
17903: IFFALSE 19431
// begin points := [ 0 , 0 , 0 ] ;
17905: LD_ADDR_VAR 0 9
17909: PUSH
17910: LD_INT 0
17912: PUSH
17913: LD_INT 0
17915: PUSH
17916: LD_INT 0
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: LIST
17923: ST_TO_ADDR
// bpoints := 1 ;
17924: LD_ADDR_VAR 0 10
17928: PUSH
17929: LD_INT 1
17931: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17932: LD_VAR 0 6
17936: PPUSH
17937: CALL_OW 247
17941: PUSH
17942: LD_INT 1
17944: DOUBLE
17945: EQUAL
17946: IFTRUE 17950
17948: GO 18532
17950: POP
// begin if GetClass ( i ) = 1 then
17951: LD_VAR 0 6
17955: PPUSH
17956: CALL_OW 257
17960: PUSH
17961: LD_INT 1
17963: EQUAL
17964: IFFALSE 17985
// points := [ 10 , 5 , 3 ] ;
17966: LD_ADDR_VAR 0 9
17970: PUSH
17971: LD_INT 10
17973: PUSH
17974: LD_INT 5
17976: PUSH
17977: LD_INT 3
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: LIST
17984: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17985: LD_VAR 0 6
17989: PPUSH
17990: CALL_OW 257
17994: PUSH
17995: LD_INT 2
17997: PUSH
17998: LD_INT 3
18000: PUSH
18001: LD_INT 4
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: LIST
18008: IN
18009: IFFALSE 18030
// points := [ 3 , 2 , 1 ] ;
18011: LD_ADDR_VAR 0 9
18015: PUSH
18016: LD_INT 3
18018: PUSH
18019: LD_INT 2
18021: PUSH
18022: LD_INT 1
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: LIST
18029: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18030: LD_VAR 0 6
18034: PPUSH
18035: CALL_OW 257
18039: PUSH
18040: LD_INT 5
18042: EQUAL
18043: IFFALSE 18064
// points := [ 130 , 5 , 2 ] ;
18045: LD_ADDR_VAR 0 9
18049: PUSH
18050: LD_INT 130
18052: PUSH
18053: LD_INT 5
18055: PUSH
18056: LD_INT 2
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: LIST
18063: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18064: LD_VAR 0 6
18068: PPUSH
18069: CALL_OW 257
18073: PUSH
18074: LD_INT 8
18076: EQUAL
18077: IFFALSE 18098
// points := [ 35 , 35 , 30 ] ;
18079: LD_ADDR_VAR 0 9
18083: PUSH
18084: LD_INT 35
18086: PUSH
18087: LD_INT 35
18089: PUSH
18090: LD_INT 30
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: LIST
18097: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18098: LD_VAR 0 6
18102: PPUSH
18103: CALL_OW 257
18107: PUSH
18108: LD_INT 9
18110: EQUAL
18111: IFFALSE 18132
// points := [ 20 , 55 , 40 ] ;
18113: LD_ADDR_VAR 0 9
18117: PUSH
18118: LD_INT 20
18120: PUSH
18121: LD_INT 55
18123: PUSH
18124: LD_INT 40
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: LIST
18131: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18132: LD_VAR 0 6
18136: PPUSH
18137: CALL_OW 257
18141: PUSH
18142: LD_INT 12
18144: PUSH
18145: LD_INT 16
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: IN
18152: IFFALSE 18173
// points := [ 5 , 3 , 2 ] ;
18154: LD_ADDR_VAR 0 9
18158: PUSH
18159: LD_INT 5
18161: PUSH
18162: LD_INT 3
18164: PUSH
18165: LD_INT 2
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: LIST
18172: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18173: LD_VAR 0 6
18177: PPUSH
18178: CALL_OW 257
18182: PUSH
18183: LD_INT 17
18185: EQUAL
18186: IFFALSE 18207
// points := [ 100 , 50 , 75 ] ;
18188: LD_ADDR_VAR 0 9
18192: PUSH
18193: LD_INT 100
18195: PUSH
18196: LD_INT 50
18198: PUSH
18199: LD_INT 75
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: LIST
18206: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18207: LD_VAR 0 6
18211: PPUSH
18212: CALL_OW 257
18216: PUSH
18217: LD_INT 15
18219: EQUAL
18220: IFFALSE 18241
// points := [ 10 , 5 , 3 ] ;
18222: LD_ADDR_VAR 0 9
18226: PUSH
18227: LD_INT 10
18229: PUSH
18230: LD_INT 5
18232: PUSH
18233: LD_INT 3
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: LIST
18240: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18241: LD_VAR 0 6
18245: PPUSH
18246: CALL_OW 257
18250: PUSH
18251: LD_INT 14
18253: EQUAL
18254: IFFALSE 18275
// points := [ 10 , 0 , 0 ] ;
18256: LD_ADDR_VAR 0 9
18260: PUSH
18261: LD_INT 10
18263: PUSH
18264: LD_INT 0
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: LIST
18274: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18275: LD_VAR 0 6
18279: PPUSH
18280: CALL_OW 257
18284: PUSH
18285: LD_INT 11
18287: EQUAL
18288: IFFALSE 18309
// points := [ 30 , 10 , 5 ] ;
18290: LD_ADDR_VAR 0 9
18294: PUSH
18295: LD_INT 30
18297: PUSH
18298: LD_INT 10
18300: PUSH
18301: LD_INT 5
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: LIST
18308: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18309: LD_VAR 0 1
18313: PPUSH
18314: LD_INT 5
18316: PPUSH
18317: CALL_OW 321
18321: PUSH
18322: LD_INT 2
18324: EQUAL
18325: IFFALSE 18342
// bpoints := bpoints * 1.8 ;
18327: LD_ADDR_VAR 0 10
18331: PUSH
18332: LD_VAR 0 10
18336: PUSH
18337: LD_REAL  1.80000000000000E+0000
18340: MUL
18341: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18342: LD_VAR 0 6
18346: PPUSH
18347: CALL_OW 257
18351: PUSH
18352: LD_INT 1
18354: PUSH
18355: LD_INT 2
18357: PUSH
18358: LD_INT 3
18360: PUSH
18361: LD_INT 4
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: IN
18370: IFFALSE 18390
18372: PUSH
18373: LD_VAR 0 1
18377: PPUSH
18378: LD_INT 51
18380: PPUSH
18381: CALL_OW 321
18385: PUSH
18386: LD_INT 2
18388: EQUAL
18389: AND
18390: IFFALSE 18407
// bpoints := bpoints * 1.2 ;
18392: LD_ADDR_VAR 0 10
18396: PUSH
18397: LD_VAR 0 10
18401: PUSH
18402: LD_REAL  1.20000000000000E+0000
18405: MUL
18406: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18407: LD_VAR 0 6
18411: PPUSH
18412: CALL_OW 257
18416: PUSH
18417: LD_INT 5
18419: PUSH
18420: LD_INT 7
18422: PUSH
18423: LD_INT 9
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: LIST
18430: IN
18431: IFFALSE 18451
18433: PUSH
18434: LD_VAR 0 1
18438: PPUSH
18439: LD_INT 52
18441: PPUSH
18442: CALL_OW 321
18446: PUSH
18447: LD_INT 2
18449: EQUAL
18450: AND
18451: IFFALSE 18468
// bpoints := bpoints * 1.5 ;
18453: LD_ADDR_VAR 0 10
18457: PUSH
18458: LD_VAR 0 10
18462: PUSH
18463: LD_REAL  1.50000000000000E+0000
18466: MUL
18467: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18468: LD_VAR 0 1
18472: PPUSH
18473: LD_INT 66
18475: PPUSH
18476: CALL_OW 321
18480: PUSH
18481: LD_INT 2
18483: EQUAL
18484: IFFALSE 18501
// bpoints := bpoints * 1.1 ;
18486: LD_ADDR_VAR 0 10
18490: PUSH
18491: LD_VAR 0 10
18495: PUSH
18496: LD_REAL  1.10000000000000E+0000
18499: MUL
18500: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18501: LD_ADDR_VAR 0 10
18505: PUSH
18506: LD_VAR 0 10
18510: PUSH
18511: LD_VAR 0 6
18515: PPUSH
18516: LD_INT 1
18518: PPUSH
18519: CALL_OW 259
18523: PUSH
18524: LD_REAL  1.15000000000000E+0000
18527: MUL
18528: MUL
18529: ST_TO_ADDR
// end ; unit_vehicle :
18530: GO 19360
18532: LD_INT 2
18534: DOUBLE
18535: EQUAL
18536: IFTRUE 18540
18538: GO 19348
18540: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18541: LD_VAR 0 6
18545: PPUSH
18546: CALL_OW 264
18550: PUSH
18551: LD_INT 2
18553: PUSH
18554: LD_INT 42
18556: PUSH
18557: LD_INT 24
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: LIST
18564: IN
18565: IFFALSE 18586
// points := [ 25 , 5 , 3 ] ;
18567: LD_ADDR_VAR 0 9
18571: PUSH
18572: LD_INT 25
18574: PUSH
18575: LD_INT 5
18577: PUSH
18578: LD_INT 3
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: LIST
18585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18586: LD_VAR 0 6
18590: PPUSH
18591: CALL_OW 264
18595: PUSH
18596: LD_INT 4
18598: PUSH
18599: LD_INT 43
18601: PUSH
18602: LD_INT 25
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: LIST
18609: IN
18610: IFFALSE 18631
// points := [ 40 , 15 , 5 ] ;
18612: LD_ADDR_VAR 0 9
18616: PUSH
18617: LD_INT 40
18619: PUSH
18620: LD_INT 15
18622: PUSH
18623: LD_INT 5
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: LIST
18630: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18631: LD_VAR 0 6
18635: PPUSH
18636: CALL_OW 264
18640: PUSH
18641: LD_INT 3
18643: PUSH
18644: LD_INT 23
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: IN
18651: IFFALSE 18672
// points := [ 7 , 25 , 8 ] ;
18653: LD_ADDR_VAR 0 9
18657: PUSH
18658: LD_INT 7
18660: PUSH
18661: LD_INT 25
18663: PUSH
18664: LD_INT 8
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: LIST
18671: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18672: LD_VAR 0 6
18676: PPUSH
18677: CALL_OW 264
18681: PUSH
18682: LD_INT 5
18684: PUSH
18685: LD_INT 27
18687: PUSH
18688: LD_INT 44
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: LIST
18695: IN
18696: IFFALSE 18717
// points := [ 14 , 50 , 16 ] ;
18698: LD_ADDR_VAR 0 9
18702: PUSH
18703: LD_INT 14
18705: PUSH
18706: LD_INT 50
18708: PUSH
18709: LD_INT 16
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18717: LD_VAR 0 6
18721: PPUSH
18722: CALL_OW 264
18726: PUSH
18727: LD_INT 6
18729: PUSH
18730: LD_INT 46
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: IN
18737: IFFALSE 18758
// points := [ 32 , 120 , 70 ] ;
18739: LD_ADDR_VAR 0 9
18743: PUSH
18744: LD_INT 32
18746: PUSH
18747: LD_INT 120
18749: PUSH
18750: LD_INT 70
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: LIST
18757: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18758: LD_VAR 0 6
18762: PPUSH
18763: CALL_OW 264
18767: PUSH
18768: LD_INT 7
18770: PUSH
18771: LD_INT 28
18773: PUSH
18774: LD_INT 45
18776: PUSH
18777: LD_INT 92
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: IN
18786: IFFALSE 18807
// points := [ 35 , 20 , 45 ] ;
18788: LD_ADDR_VAR 0 9
18792: PUSH
18793: LD_INT 35
18795: PUSH
18796: LD_INT 20
18798: PUSH
18799: LD_INT 45
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: LIST
18806: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18807: LD_VAR 0 6
18811: PPUSH
18812: CALL_OW 264
18816: PUSH
18817: LD_INT 47
18819: PUSH
18820: EMPTY
18821: LIST
18822: IN
18823: IFFALSE 18844
// points := [ 67 , 45 , 75 ] ;
18825: LD_ADDR_VAR 0 9
18829: PUSH
18830: LD_INT 67
18832: PUSH
18833: LD_INT 45
18835: PUSH
18836: LD_INT 75
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: LIST
18843: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18844: LD_VAR 0 6
18848: PPUSH
18849: CALL_OW 264
18853: PUSH
18854: LD_INT 26
18856: PUSH
18857: EMPTY
18858: LIST
18859: IN
18860: IFFALSE 18881
// points := [ 120 , 30 , 80 ] ;
18862: LD_ADDR_VAR 0 9
18866: PUSH
18867: LD_INT 120
18869: PUSH
18870: LD_INT 30
18872: PUSH
18873: LD_INT 80
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: LIST
18880: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18881: LD_VAR 0 6
18885: PPUSH
18886: CALL_OW 264
18890: PUSH
18891: LD_INT 22
18893: PUSH
18894: EMPTY
18895: LIST
18896: IN
18897: IFFALSE 18918
// points := [ 40 , 1 , 1 ] ;
18899: LD_ADDR_VAR 0 9
18903: PUSH
18904: LD_INT 40
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: LIST
18917: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18918: LD_VAR 0 6
18922: PPUSH
18923: CALL_OW 264
18927: PUSH
18928: LD_INT 29
18930: PUSH
18931: EMPTY
18932: LIST
18933: IN
18934: IFFALSE 18955
// points := [ 70 , 200 , 400 ] ;
18936: LD_ADDR_VAR 0 9
18940: PUSH
18941: LD_INT 70
18943: PUSH
18944: LD_INT 200
18946: PUSH
18947: LD_INT 400
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18955: LD_VAR 0 6
18959: PPUSH
18960: CALL_OW 264
18964: PUSH
18965: LD_INT 14
18967: PUSH
18968: LD_INT 53
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: IN
18975: IFFALSE 18996
// points := [ 40 , 10 , 20 ] ;
18977: LD_ADDR_VAR 0 9
18981: PUSH
18982: LD_INT 40
18984: PUSH
18985: LD_INT 10
18987: PUSH
18988: LD_INT 20
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: LIST
18995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18996: LD_VAR 0 6
19000: PPUSH
19001: CALL_OW 264
19005: PUSH
19006: LD_INT 9
19008: PUSH
19009: EMPTY
19010: LIST
19011: IN
19012: IFFALSE 19033
// points := [ 5 , 70 , 20 ] ;
19014: LD_ADDR_VAR 0 9
19018: PUSH
19019: LD_INT 5
19021: PUSH
19022: LD_INT 70
19024: PUSH
19025: LD_INT 20
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: LIST
19032: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19033: LD_VAR 0 6
19037: PPUSH
19038: CALL_OW 264
19042: PUSH
19043: LD_INT 10
19045: PUSH
19046: EMPTY
19047: LIST
19048: IN
19049: IFFALSE 19070
// points := [ 35 , 110 , 70 ] ;
19051: LD_ADDR_VAR 0 9
19055: PUSH
19056: LD_INT 35
19058: PUSH
19059: LD_INT 110
19061: PUSH
19062: LD_INT 70
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: LIST
19069: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19070: LD_VAR 0 6
19074: PPUSH
19075: CALL_OW 265
19079: PUSH
19080: LD_INT 25
19082: EQUAL
19083: IFFALSE 19104
// points := [ 80 , 65 , 100 ] ;
19085: LD_ADDR_VAR 0 9
19089: PUSH
19090: LD_INT 80
19092: PUSH
19093: LD_INT 65
19095: PUSH
19096: LD_INT 100
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19104: LD_VAR 0 6
19108: PPUSH
19109: CALL_OW 263
19113: PUSH
19114: LD_INT 1
19116: EQUAL
19117: IFFALSE 19152
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19119: LD_ADDR_VAR 0 10
19123: PUSH
19124: LD_VAR 0 10
19128: PUSH
19129: LD_VAR 0 6
19133: PPUSH
19134: CALL_OW 311
19138: PPUSH
19139: LD_INT 3
19141: PPUSH
19142: CALL_OW 259
19146: PUSH
19147: LD_INT 4
19149: MUL
19150: MUL
19151: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19152: LD_VAR 0 6
19156: PPUSH
19157: CALL_OW 263
19161: PUSH
19162: LD_INT 2
19164: EQUAL
19165: IFFALSE 19216
// begin j := IsControledBy ( i ) ;
19167: LD_ADDR_VAR 0 7
19171: PUSH
19172: LD_VAR 0 6
19176: PPUSH
19177: CALL_OW 312
19181: ST_TO_ADDR
// if j then
19182: LD_VAR 0 7
19186: IFFALSE 19216
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19188: LD_ADDR_VAR 0 10
19192: PUSH
19193: LD_VAR 0 10
19197: PUSH
19198: LD_VAR 0 7
19202: PPUSH
19203: LD_INT 3
19205: PPUSH
19206: CALL_OW 259
19210: PUSH
19211: LD_INT 3
19213: MUL
19214: MUL
19215: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19216: LD_VAR 0 6
19220: PPUSH
19221: CALL_OW 264
19225: PUSH
19226: LD_INT 5
19228: PUSH
19229: LD_INT 6
19231: PUSH
19232: LD_INT 46
19234: PUSH
19235: LD_INT 44
19237: PUSH
19238: LD_INT 47
19240: PUSH
19241: LD_INT 45
19243: PUSH
19244: LD_INT 28
19246: PUSH
19247: LD_INT 7
19249: PUSH
19250: LD_INT 27
19252: PUSH
19253: LD_INT 29
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: IN
19268: IFFALSE 19288
19270: PUSH
19271: LD_VAR 0 1
19275: PPUSH
19276: LD_INT 52
19278: PPUSH
19279: CALL_OW 321
19283: PUSH
19284: LD_INT 2
19286: EQUAL
19287: AND
19288: IFFALSE 19305
// bpoints := bpoints * 1.2 ;
19290: LD_ADDR_VAR 0 10
19294: PUSH
19295: LD_VAR 0 10
19299: PUSH
19300: LD_REAL  1.20000000000000E+0000
19303: MUL
19304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19305: LD_VAR 0 6
19309: PPUSH
19310: CALL_OW 264
19314: PUSH
19315: LD_INT 6
19317: PUSH
19318: LD_INT 46
19320: PUSH
19321: LD_INT 47
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: LIST
19328: IN
19329: IFFALSE 19346
// bpoints := bpoints * 1.2 ;
19331: LD_ADDR_VAR 0 10
19335: PUSH
19336: LD_VAR 0 10
19340: PUSH
19341: LD_REAL  1.20000000000000E+0000
19344: MUL
19345: ST_TO_ADDR
// end ; unit_building :
19346: GO 19360
19348: LD_INT 3
19350: DOUBLE
19351: EQUAL
19352: IFTRUE 19356
19354: GO 19359
19356: POP
// ; end ;
19357: GO 19360
19359: POP
// for j = 1 to 3 do
19360: LD_ADDR_VAR 0 7
19364: PUSH
19365: DOUBLE
19366: LD_INT 1
19368: DEC
19369: ST_TO_ADDR
19370: LD_INT 3
19372: PUSH
19373: FOR_TO
19374: IFFALSE 19427
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19376: LD_ADDR_VAR 0 5
19380: PUSH
19381: LD_VAR 0 5
19385: PPUSH
19386: LD_VAR 0 7
19390: PPUSH
19391: LD_VAR 0 5
19395: PUSH
19396: LD_VAR 0 7
19400: ARRAY
19401: PUSH
19402: LD_VAR 0 9
19406: PUSH
19407: LD_VAR 0 7
19411: ARRAY
19412: PUSH
19413: LD_VAR 0 10
19417: MUL
19418: PLUS
19419: PPUSH
19420: CALL_OW 1
19424: ST_TO_ADDR
19425: GO 19373
19427: POP
19428: POP
// end ;
19429: GO 17902
19431: POP
19432: POP
// result := Replace ( result , 4 , tmp ) ;
19433: LD_ADDR_VAR 0 5
19437: PUSH
19438: LD_VAR 0 5
19442: PPUSH
19443: LD_INT 4
19445: PPUSH
19446: LD_VAR 0 8
19450: PPUSH
19451: CALL_OW 1
19455: ST_TO_ADDR
// end ;
19456: LD_VAR 0 5
19460: RET
// export function DangerAtRange ( unit , range ) ; begin
19461: LD_INT 0
19463: PPUSH
// if not unit then
19464: LD_VAR 0 1
19468: NOT
19469: IFFALSE 19473
// exit ;
19471: GO 19518
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19473: LD_ADDR_VAR 0 3
19477: PUSH
19478: LD_VAR 0 1
19482: PPUSH
19483: CALL_OW 255
19487: PPUSH
19488: LD_VAR 0 1
19492: PPUSH
19493: CALL_OW 250
19497: PPUSH
19498: LD_VAR 0 1
19502: PPUSH
19503: CALL_OW 251
19507: PPUSH
19508: LD_VAR 0 2
19512: PPUSH
19513: CALL 17752 0 4
19517: ST_TO_ADDR
// end ;
19518: LD_VAR 0 3
19522: RET
// export function DangerInArea ( side , area ) ; begin
19523: LD_INT 0
19525: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19526: LD_ADDR_VAR 0 3
19530: PUSH
19531: LD_VAR 0 2
19535: PPUSH
19536: LD_INT 81
19538: PUSH
19539: LD_VAR 0 1
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PPUSH
19548: CALL_OW 70
19552: ST_TO_ADDR
// end ;
19553: LD_VAR 0 3
19557: RET
// export function IsExtension ( b ) ; begin
19558: LD_INT 0
19560: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19561: LD_ADDR_VAR 0 2
19565: PUSH
19566: LD_VAR 0 1
19570: PUSH
19571: LD_INT 23
19573: PUSH
19574: LD_INT 20
19576: PUSH
19577: LD_INT 22
19579: PUSH
19580: LD_INT 17
19582: PUSH
19583: LD_INT 24
19585: PUSH
19586: LD_INT 21
19588: PUSH
19589: LD_INT 19
19591: PUSH
19592: LD_INT 16
19594: PUSH
19595: LD_INT 25
19597: PUSH
19598: LD_INT 18
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: IN
19613: ST_TO_ADDR
// end ;
19614: LD_VAR 0 2
19618: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
19619: LD_INT 0
19621: PPUSH
19622: PPUSH
19623: PPUSH
// result := [ ] ;
19624: LD_ADDR_VAR 0 4
19628: PUSH
19629: EMPTY
19630: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19631: LD_ADDR_VAR 0 5
19635: PUSH
19636: LD_VAR 0 2
19640: PPUSH
19641: LD_INT 21
19643: PUSH
19644: LD_INT 3
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PPUSH
19651: CALL_OW 70
19655: ST_TO_ADDR
// if not tmp then
19656: LD_VAR 0 5
19660: NOT
19661: IFFALSE 19665
// exit ;
19663: GO 19729
// if checkLink then
19665: LD_VAR 0 3
19669: IFFALSE 19719
// begin for i in tmp do
19671: LD_ADDR_VAR 0 6
19675: PUSH
19676: LD_VAR 0 5
19680: PUSH
19681: FOR_IN
19682: IFFALSE 19717
// if GetBase ( i ) <> base then
19684: LD_VAR 0 6
19688: PPUSH
19689: CALL_OW 274
19693: PUSH
19694: LD_VAR 0 1
19698: NONEQUAL
19699: IFFALSE 19715
// ComLinkToBase ( base , i ) ;
19701: LD_VAR 0 1
19705: PPUSH
19706: LD_VAR 0 6
19710: PPUSH
19711: CALL_OW 169
19715: GO 19681
19717: POP
19718: POP
// end ; result := tmp ;
19719: LD_ADDR_VAR 0 4
19723: PUSH
19724: LD_VAR 0 5
19728: ST_TO_ADDR
// end ;
19729: LD_VAR 0 4
19733: RET
// export function ComComplete ( units , b ) ; var i ; begin
19734: LD_INT 0
19736: PPUSH
19737: PPUSH
// if not units then
19738: LD_VAR 0 1
19742: NOT
19743: IFFALSE 19747
// exit ;
19745: GO 19837
// for i in units do
19747: LD_ADDR_VAR 0 4
19751: PUSH
19752: LD_VAR 0 1
19756: PUSH
19757: FOR_IN
19758: IFFALSE 19835
// if BuildingStatus ( b ) = bs_build then
19760: LD_VAR 0 2
19764: PPUSH
19765: CALL_OW 461
19769: PUSH
19770: LD_INT 1
19772: EQUAL
19773: IFFALSE 19833
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19775: LD_VAR 0 4
19779: PPUSH
19780: LD_STRING h
19782: PUSH
19783: LD_VAR 0 2
19787: PPUSH
19788: CALL_OW 250
19792: PUSH
19793: LD_VAR 0 2
19797: PPUSH
19798: CALL_OW 251
19802: PUSH
19803: LD_VAR 0 2
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: LD_INT 0
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: PUSH
19826: EMPTY
19827: LIST
19828: PPUSH
19829: CALL_OW 446
19833: GO 19757
19835: POP
19836: POP
// end ;
19837: LD_VAR 0 3
19841: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19842: LD_INT 0
19844: PPUSH
19845: PPUSH
19846: PPUSH
19847: PPUSH
19848: PPUSH
19849: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19850: LD_VAR 0 1
19854: NOT
19855: IFTRUE 19872
19857: PUSH
19858: LD_VAR 0 1
19862: PPUSH
19863: CALL_OW 263
19867: PUSH
19868: LD_INT 2
19870: NONEQUAL
19871: OR
19872: IFFALSE 19876
// exit ;
19874: GO 20192
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19876: LD_ADDR_VAR 0 6
19880: PUSH
19881: LD_INT 22
19883: PUSH
19884: LD_VAR 0 1
19888: PPUSH
19889: CALL_OW 255
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 2
19900: PUSH
19901: LD_INT 30
19903: PUSH
19904: LD_INT 36
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 34
19913: PUSH
19914: LD_INT 31
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: LIST
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PPUSH
19930: CALL_OW 69
19934: ST_TO_ADDR
// if not tmp then
19935: LD_VAR 0 6
19939: NOT
19940: IFFALSE 19944
// exit ;
19942: GO 20192
// result := [ ] ;
19944: LD_ADDR_VAR 0 2
19948: PUSH
19949: EMPTY
19950: ST_TO_ADDR
// for i in tmp do
19951: LD_ADDR_VAR 0 3
19955: PUSH
19956: LD_VAR 0 6
19960: PUSH
19961: FOR_IN
19962: IFFALSE 20033
// begin t := UnitsInside ( i ) ;
19964: LD_ADDR_VAR 0 4
19968: PUSH
19969: LD_VAR 0 3
19973: PPUSH
19974: CALL_OW 313
19978: ST_TO_ADDR
// if t then
19979: LD_VAR 0 4
19983: IFFALSE 20031
// for j in t do
19985: LD_ADDR_VAR 0 7
19989: PUSH
19990: LD_VAR 0 4
19994: PUSH
19995: FOR_IN
19996: IFFALSE 20029
// result := Replace ( result , result + 1 , j ) ;
19998: LD_ADDR_VAR 0 2
20002: PUSH
20003: LD_VAR 0 2
20007: PPUSH
20008: LD_VAR 0 2
20012: PUSH
20013: LD_INT 1
20015: PLUS
20016: PPUSH
20017: LD_VAR 0 7
20021: PPUSH
20022: CALL_OW 1
20026: ST_TO_ADDR
20027: GO 19995
20029: POP
20030: POP
// end ;
20031: GO 19961
20033: POP
20034: POP
// if not result then
20035: LD_VAR 0 2
20039: NOT
20040: IFFALSE 20044
// exit ;
20042: GO 20192
// mech := result [ 1 ] ;
20044: LD_ADDR_VAR 0 5
20048: PUSH
20049: LD_VAR 0 2
20053: PUSH
20054: LD_INT 1
20056: ARRAY
20057: ST_TO_ADDR
// if result > 1 then
20058: LD_VAR 0 2
20062: PUSH
20063: LD_INT 1
20065: GREATER
20066: IFFALSE 20178
// begin for i = 2 to result do
20068: LD_ADDR_VAR 0 3
20072: PUSH
20073: DOUBLE
20074: LD_INT 2
20076: DEC
20077: ST_TO_ADDR
20078: LD_VAR 0 2
20082: PUSH
20083: FOR_TO
20084: IFFALSE 20176
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20086: LD_ADDR_VAR 0 4
20090: PUSH
20091: LD_VAR 0 2
20095: PUSH
20096: LD_VAR 0 3
20100: ARRAY
20101: PPUSH
20102: LD_INT 3
20104: PPUSH
20105: CALL_OW 259
20109: PUSH
20110: LD_VAR 0 2
20114: PUSH
20115: LD_VAR 0 3
20119: ARRAY
20120: PPUSH
20121: CALL_OW 432
20125: MINUS
20126: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20127: LD_VAR 0 4
20131: PUSH
20132: LD_VAR 0 5
20136: PPUSH
20137: LD_INT 3
20139: PPUSH
20140: CALL_OW 259
20144: PUSH
20145: LD_VAR 0 5
20149: PPUSH
20150: CALL_OW 432
20154: MINUS
20155: GREATEREQUAL
20156: IFFALSE 20174
// mech := result [ i ] ;
20158: LD_ADDR_VAR 0 5
20162: PUSH
20163: LD_VAR 0 2
20167: PUSH
20168: LD_VAR 0 3
20172: ARRAY
20173: ST_TO_ADDR
// end ;
20174: GO 20083
20176: POP
20177: POP
// end ; ComLinkTo ( vehicle , mech ) ;
20178: LD_VAR 0 1
20182: PPUSH
20183: LD_VAR 0 5
20187: PPUSH
20188: CALL_OW 135
// end ;
20192: LD_VAR 0 2
20196: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20197: LD_INT 0
20199: PPUSH
20200: PPUSH
20201: PPUSH
20202: PPUSH
20203: PPUSH
20204: PPUSH
20205: PPUSH
20206: PPUSH
20207: PPUSH
20208: PPUSH
20209: PPUSH
20210: PPUSH
20211: PPUSH
// result := [ ] ;
20212: LD_ADDR_VAR 0 7
20216: PUSH
20217: EMPTY
20218: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20219: LD_VAR 0 1
20223: PPUSH
20224: CALL_OW 266
20228: PUSH
20229: LD_INT 0
20231: PUSH
20232: LD_INT 1
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: IN
20239: NOT
20240: IFFALSE 20244
// exit ;
20242: GO 21884
// if name then
20244: LD_VAR 0 3
20248: IFFALSE 20264
// SetBName ( base_dep , name ) ;
20250: LD_VAR 0 1
20254: PPUSH
20255: LD_VAR 0 3
20259: PPUSH
20260: CALL_OW 500
// base := GetBase ( base_dep ) ;
20264: LD_ADDR_VAR 0 15
20268: PUSH
20269: LD_VAR 0 1
20273: PPUSH
20274: CALL_OW 274
20278: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20279: LD_ADDR_VAR 0 16
20283: PUSH
20284: LD_VAR 0 1
20288: PPUSH
20289: CALL_OW 255
20293: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20294: LD_ADDR_VAR 0 17
20298: PUSH
20299: LD_VAR 0 1
20303: PPUSH
20304: CALL_OW 248
20308: ST_TO_ADDR
// if sources then
20309: LD_VAR 0 5
20313: IFFALSE 20360
// for i = 1 to 3 do
20315: LD_ADDR_VAR 0 8
20319: PUSH
20320: DOUBLE
20321: LD_INT 1
20323: DEC
20324: ST_TO_ADDR
20325: LD_INT 3
20327: PUSH
20328: FOR_TO
20329: IFFALSE 20358
// AddResourceType ( base , i , sources [ i ] ) ;
20331: LD_VAR 0 15
20335: PPUSH
20336: LD_VAR 0 8
20340: PPUSH
20341: LD_VAR 0 5
20345: PUSH
20346: LD_VAR 0 8
20350: ARRAY
20351: PPUSH
20352: CALL_OW 276
20356: GO 20328
20358: POP
20359: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
20360: LD_ADDR_VAR 0 18
20364: PUSH
20365: LD_VAR 0 15
20369: PPUSH
20370: LD_VAR 0 2
20374: PPUSH
20375: LD_INT 1
20377: PPUSH
20378: CALL 19619 0 3
20382: ST_TO_ADDR
// InitHc ;
20383: CALL_OW 19
// InitUc ;
20387: CALL_OW 18
// uc_side := side ;
20391: LD_ADDR_OWVAR 20
20395: PUSH
20396: LD_VAR 0 16
20400: ST_TO_ADDR
// uc_nation := nation ;
20401: LD_ADDR_OWVAR 21
20405: PUSH
20406: LD_VAR 0 17
20410: ST_TO_ADDR
// if buildings then
20411: LD_VAR 0 18
20415: IFFALSE 21743
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20417: LD_ADDR_VAR 0 19
20421: PUSH
20422: LD_VAR 0 18
20426: PPUSH
20427: LD_INT 2
20429: PUSH
20430: LD_INT 30
20432: PUSH
20433: LD_INT 29
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 30
20442: PUSH
20443: LD_INT 30
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: LIST
20454: PPUSH
20455: CALL_OW 72
20459: ST_TO_ADDR
// if tmp then
20460: LD_VAR 0 19
20464: IFFALSE 20512
// for i in tmp do
20466: LD_ADDR_VAR 0 8
20470: PUSH
20471: LD_VAR 0 19
20475: PUSH
20476: FOR_IN
20477: IFFALSE 20510
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20479: LD_VAR 0 8
20483: PPUSH
20484: CALL_OW 250
20488: PPUSH
20489: LD_VAR 0 8
20493: PPUSH
20494: CALL_OW 251
20498: PPUSH
20499: LD_VAR 0 16
20503: PPUSH
20504: CALL_OW 441
20508: GO 20476
20510: POP
20511: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20512: LD_VAR 0 18
20516: PPUSH
20517: LD_INT 2
20519: PUSH
20520: LD_INT 30
20522: PUSH
20523: LD_INT 32
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 30
20532: PUSH
20533: LD_INT 33
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: LIST
20544: PPUSH
20545: CALL_OW 72
20549: IFFALSE 20637
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20551: LD_ADDR_VAR 0 8
20555: PUSH
20556: LD_VAR 0 18
20560: PPUSH
20561: LD_INT 2
20563: PUSH
20564: LD_INT 30
20566: PUSH
20567: LD_INT 32
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 30
20576: PUSH
20577: LD_INT 33
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: LIST
20588: PPUSH
20589: CALL_OW 72
20593: PUSH
20594: FOR_IN
20595: IFFALSE 20635
// begin if not GetBWeapon ( i ) then
20597: LD_VAR 0 8
20601: PPUSH
20602: CALL_OW 269
20606: NOT
20607: IFFALSE 20633
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20609: LD_VAR 0 8
20613: PPUSH
20614: LD_VAR 0 8
20618: PPUSH
20619: LD_VAR 0 2
20623: PPUSH
20624: CALL 21889 0 2
20628: PPUSH
20629: CALL_OW 431
// end ;
20633: GO 20594
20635: POP
20636: POP
// end ; for i = 1 to personel do
20637: LD_ADDR_VAR 0 8
20641: PUSH
20642: DOUBLE
20643: LD_INT 1
20645: DEC
20646: ST_TO_ADDR
20647: LD_VAR 0 6
20651: PUSH
20652: FOR_TO
20653: IFFALSE 21723
// begin if i > 4 then
20655: LD_VAR 0 8
20659: PUSH
20660: LD_INT 4
20662: GREATER
20663: IFFALSE 20667
// break ;
20665: GO 21723
// case i of 1 :
20667: LD_VAR 0 8
20671: PUSH
20672: LD_INT 1
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20760
20680: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20681: LD_ADDR_VAR 0 12
20685: PUSH
20686: LD_VAR 0 18
20690: PPUSH
20691: LD_INT 22
20693: PUSH
20694: LD_VAR 0 16
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 58
20705: PUSH
20706: EMPTY
20707: LIST
20708: PUSH
20709: LD_INT 2
20711: PUSH
20712: LD_INT 30
20714: PUSH
20715: LD_INT 32
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 30
20724: PUSH
20725: LD_INT 4
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 30
20734: PUSH
20735: LD_INT 5
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: LIST
20752: PPUSH
20753: CALL_OW 72
20757: ST_TO_ADDR
20758: GO 20982
20760: LD_INT 2
20762: DOUBLE
20763: EQUAL
20764: IFTRUE 20768
20766: GO 20830
20768: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20769: LD_ADDR_VAR 0 12
20773: PUSH
20774: LD_VAR 0 18
20778: PPUSH
20779: LD_INT 22
20781: PUSH
20782: LD_VAR 0 16
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 2
20793: PUSH
20794: LD_INT 30
20796: PUSH
20797: LD_INT 0
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 30
20806: PUSH
20807: LD_INT 1
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PPUSH
20823: CALL_OW 72
20827: ST_TO_ADDR
20828: GO 20982
20830: LD_INT 3
20832: DOUBLE
20833: EQUAL
20834: IFTRUE 20838
20836: GO 20900
20838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20839: LD_ADDR_VAR 0 12
20843: PUSH
20844: LD_VAR 0 18
20848: PPUSH
20849: LD_INT 22
20851: PUSH
20852: LD_VAR 0 16
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 2
20863: PUSH
20864: LD_INT 30
20866: PUSH
20867: LD_INT 2
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 30
20876: PUSH
20877: LD_INT 3
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: LIST
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PPUSH
20893: CALL_OW 72
20897: ST_TO_ADDR
20898: GO 20982
20900: LD_INT 4
20902: DOUBLE
20903: EQUAL
20904: IFTRUE 20908
20906: GO 20981
20908: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20909: LD_ADDR_VAR 0 12
20913: PUSH
20914: LD_VAR 0 18
20918: PPUSH
20919: LD_INT 22
20921: PUSH
20922: LD_VAR 0 16
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: LD_INT 30
20936: PUSH
20937: LD_INT 6
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 30
20946: PUSH
20947: LD_INT 7
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 30
20956: PUSH
20957: LD_INT 8
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PPUSH
20974: CALL_OW 72
20978: ST_TO_ADDR
20979: GO 20982
20981: POP
// if i = 1 then
20982: LD_VAR 0 8
20986: PUSH
20987: LD_INT 1
20989: EQUAL
20990: IFFALSE 21101
// begin tmp := [ ] ;
20992: LD_ADDR_VAR 0 19
20996: PUSH
20997: EMPTY
20998: ST_TO_ADDR
// for j in f do
20999: LD_ADDR_VAR 0 9
21003: PUSH
21004: LD_VAR 0 12
21008: PUSH
21009: FOR_IN
21010: IFFALSE 21083
// if GetBType ( j ) = b_bunker then
21012: LD_VAR 0 9
21016: PPUSH
21017: CALL_OW 266
21021: PUSH
21022: LD_INT 32
21024: EQUAL
21025: IFFALSE 21052
// tmp := Insert ( tmp , 1 , j ) else
21027: LD_ADDR_VAR 0 19
21031: PUSH
21032: LD_VAR 0 19
21036: PPUSH
21037: LD_INT 1
21039: PPUSH
21040: LD_VAR 0 9
21044: PPUSH
21045: CALL_OW 2
21049: ST_TO_ADDR
21050: GO 21081
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21052: LD_ADDR_VAR 0 19
21056: PUSH
21057: LD_VAR 0 19
21061: PPUSH
21062: LD_VAR 0 19
21066: PUSH
21067: LD_INT 1
21069: PLUS
21070: PPUSH
21071: LD_VAR 0 9
21075: PPUSH
21076: CALL_OW 2
21080: ST_TO_ADDR
21081: GO 21009
21083: POP
21084: POP
// if tmp then
21085: LD_VAR 0 19
21089: IFFALSE 21101
// f := tmp ;
21091: LD_ADDR_VAR 0 12
21095: PUSH
21096: LD_VAR 0 19
21100: ST_TO_ADDR
// end ; x := personel [ i ] ;
21101: LD_ADDR_VAR 0 13
21105: PUSH
21106: LD_VAR 0 6
21110: PUSH
21111: LD_VAR 0 8
21115: ARRAY
21116: ST_TO_ADDR
// if x = - 1 then
21117: LD_VAR 0 13
21121: PUSH
21122: LD_INT 1
21124: NEG
21125: EQUAL
21126: IFFALSE 21337
// begin for j in f do
21128: LD_ADDR_VAR 0 9
21132: PUSH
21133: LD_VAR 0 12
21137: PUSH
21138: FOR_IN
21139: IFFALSE 21333
// repeat InitHc ;
21141: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21145: LD_VAR 0 9
21149: PPUSH
21150: CALL_OW 266
21154: PUSH
21155: LD_INT 5
21157: EQUAL
21158: IFFALSE 21228
// begin if UnitsInside ( j ) < 3 then
21160: LD_VAR 0 9
21164: PPUSH
21165: CALL_OW 313
21169: PUSH
21170: LD_INT 3
21172: LESS
21173: IFFALSE 21209
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21175: LD_INT 0
21177: PPUSH
21178: LD_INT 5
21180: PUSH
21181: LD_INT 8
21183: PUSH
21184: LD_INT 9
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: LIST
21191: PUSH
21192: LD_VAR 0 17
21196: ARRAY
21197: PPUSH
21198: LD_VAR 0 4
21202: PPUSH
21203: CALL_OW 380
21207: GO 21226
// PrepareHuman ( false , i , skill ) ;
21209: LD_INT 0
21211: PPUSH
21212: LD_VAR 0 8
21216: PPUSH
21217: LD_VAR 0 4
21221: PPUSH
21222: CALL_OW 380
// end else
21226: GO 21245
// PrepareHuman ( false , i , skill ) ;
21228: LD_INT 0
21230: PPUSH
21231: LD_VAR 0 8
21235: PPUSH
21236: LD_VAR 0 4
21240: PPUSH
21241: CALL_OW 380
// un := CreateHuman ;
21245: LD_ADDR_VAR 0 14
21249: PUSH
21250: CALL_OW 44
21254: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21255: LD_ADDR_VAR 0 7
21259: PUSH
21260: LD_VAR 0 7
21264: PPUSH
21265: LD_INT 1
21267: PPUSH
21268: LD_VAR 0 14
21272: PPUSH
21273: CALL_OW 2
21277: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21278: LD_VAR 0 14
21282: PPUSH
21283: LD_VAR 0 9
21287: PPUSH
21288: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21292: LD_VAR 0 9
21296: PPUSH
21297: CALL_OW 313
21301: PUSH
21302: LD_INT 6
21304: EQUAL
21305: IFTRUE 21329
21307: PUSH
21308: LD_VAR 0 9
21312: PPUSH
21313: CALL_OW 266
21317: PUSH
21318: LD_INT 32
21320: PUSH
21321: LD_INT 31
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: IN
21328: OR
21329: IFFALSE 21141
21331: GO 21138
21333: POP
21334: POP
// end else
21335: GO 21721
// for j = 1 to x do
21337: LD_ADDR_VAR 0 9
21341: PUSH
21342: DOUBLE
21343: LD_INT 1
21345: DEC
21346: ST_TO_ADDR
21347: LD_VAR 0 13
21351: PUSH
21352: FOR_TO
21353: IFFALSE 21719
// begin InitHc ;
21355: CALL_OW 19
// if not f then
21359: LD_VAR 0 12
21363: NOT
21364: IFFALSE 21453
// begin PrepareHuman ( false , i , skill ) ;
21366: LD_INT 0
21368: PPUSH
21369: LD_VAR 0 8
21373: PPUSH
21374: LD_VAR 0 4
21378: PPUSH
21379: CALL_OW 380
// un := CreateHuman ;
21383: LD_ADDR_VAR 0 14
21387: PUSH
21388: CALL_OW 44
21392: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21393: LD_ADDR_VAR 0 7
21397: PUSH
21398: LD_VAR 0 7
21402: PPUSH
21403: LD_INT 1
21405: PPUSH
21406: LD_VAR 0 14
21410: PPUSH
21411: CALL_OW 2
21415: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21416: LD_VAR 0 14
21420: PPUSH
21421: LD_VAR 0 1
21425: PPUSH
21426: CALL_OW 250
21430: PPUSH
21431: LD_VAR 0 1
21435: PPUSH
21436: CALL_OW 251
21440: PPUSH
21441: LD_INT 10
21443: PPUSH
21444: LD_INT 0
21446: PPUSH
21447: CALL_OW 50
// continue ;
21451: GO 21352
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21453: LD_VAR 0 12
21457: PUSH
21458: LD_INT 1
21460: ARRAY
21461: PPUSH
21462: CALL_OW 313
21466: IFFALSE 21494
21468: PUSH
21469: LD_VAR 0 12
21473: PUSH
21474: LD_INT 1
21476: ARRAY
21477: PPUSH
21478: CALL_OW 266
21482: PUSH
21483: LD_INT 32
21485: PUSH
21486: LD_INT 31
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: IN
21493: AND
21494: IFTRUE 21515
21496: PUSH
21497: LD_VAR 0 12
21501: PUSH
21502: LD_INT 1
21504: ARRAY
21505: PPUSH
21506: CALL_OW 313
21510: PUSH
21511: LD_INT 6
21513: EQUAL
21514: OR
21515: IFFALSE 21535
// f := Delete ( f , 1 ) ;
21517: LD_ADDR_VAR 0 12
21521: PUSH
21522: LD_VAR 0 12
21526: PPUSH
21527: LD_INT 1
21529: PPUSH
21530: CALL_OW 3
21534: ST_TO_ADDR
// if not f then
21535: LD_VAR 0 12
21539: NOT
21540: IFFALSE 21558
// begin x := x + 2 ;
21542: LD_ADDR_VAR 0 13
21546: PUSH
21547: LD_VAR 0 13
21551: PUSH
21552: LD_INT 2
21554: PLUS
21555: ST_TO_ADDR
// continue ;
21556: GO 21352
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21558: LD_VAR 0 12
21562: PUSH
21563: LD_INT 1
21565: ARRAY
21566: PPUSH
21567: CALL_OW 266
21571: PUSH
21572: LD_INT 5
21574: EQUAL
21575: IFFALSE 21649
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21577: LD_VAR 0 12
21581: PUSH
21582: LD_INT 1
21584: ARRAY
21585: PPUSH
21586: CALL_OW 313
21590: PUSH
21591: LD_INT 3
21593: LESS
21594: IFFALSE 21630
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21596: LD_INT 0
21598: PPUSH
21599: LD_INT 5
21601: PUSH
21602: LD_INT 8
21604: PUSH
21605: LD_INT 9
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: LIST
21612: PUSH
21613: LD_VAR 0 17
21617: ARRAY
21618: PPUSH
21619: LD_VAR 0 4
21623: PPUSH
21624: CALL_OW 380
21628: GO 21647
// PrepareHuman ( false , i , skill ) ;
21630: LD_INT 0
21632: PPUSH
21633: LD_VAR 0 8
21637: PPUSH
21638: LD_VAR 0 4
21642: PPUSH
21643: CALL_OW 380
// end else
21647: GO 21666
// PrepareHuman ( false , i , skill ) ;
21649: LD_INT 0
21651: PPUSH
21652: LD_VAR 0 8
21656: PPUSH
21657: LD_VAR 0 4
21661: PPUSH
21662: CALL_OW 380
// un := CreateHuman ;
21666: LD_ADDR_VAR 0 14
21670: PUSH
21671: CALL_OW 44
21675: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21676: LD_ADDR_VAR 0 7
21680: PUSH
21681: LD_VAR 0 7
21685: PPUSH
21686: LD_INT 1
21688: PPUSH
21689: LD_VAR 0 14
21693: PPUSH
21694: CALL_OW 2
21698: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21699: LD_VAR 0 14
21703: PPUSH
21704: LD_VAR 0 12
21708: PUSH
21709: LD_INT 1
21711: ARRAY
21712: PPUSH
21713: CALL_OW 52
// end ;
21717: GO 21352
21719: POP
21720: POP
// end ;
21721: GO 20652
21723: POP
21724: POP
// result := result ^ buildings ;
21725: LD_ADDR_VAR 0 7
21729: PUSH
21730: LD_VAR 0 7
21734: PUSH
21735: LD_VAR 0 18
21739: ADD
21740: ST_TO_ADDR
// end else
21741: GO 21884
// begin for i = 1 to personel do
21743: LD_ADDR_VAR 0 8
21747: PUSH
21748: DOUBLE
21749: LD_INT 1
21751: DEC
21752: ST_TO_ADDR
21753: LD_VAR 0 6
21757: PUSH
21758: FOR_TO
21759: IFFALSE 21882
// begin if i > 4 then
21761: LD_VAR 0 8
21765: PUSH
21766: LD_INT 4
21768: GREATER
21769: IFFALSE 21773
// break ;
21771: GO 21882
// x := personel [ i ] ;
21773: LD_ADDR_VAR 0 13
21777: PUSH
21778: LD_VAR 0 6
21782: PUSH
21783: LD_VAR 0 8
21787: ARRAY
21788: ST_TO_ADDR
// if x = - 1 then
21789: LD_VAR 0 13
21793: PUSH
21794: LD_INT 1
21796: NEG
21797: EQUAL
21798: IFFALSE 21802
// continue ;
21800: GO 21758
// PrepareHuman ( false , i , skill ) ;
21802: LD_INT 0
21804: PPUSH
21805: LD_VAR 0 8
21809: PPUSH
21810: LD_VAR 0 4
21814: PPUSH
21815: CALL_OW 380
// un := CreateHuman ;
21819: LD_ADDR_VAR 0 14
21823: PUSH
21824: CALL_OW 44
21828: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21829: LD_VAR 0 14
21833: PPUSH
21834: LD_VAR 0 1
21838: PPUSH
21839: CALL_OW 250
21843: PPUSH
21844: LD_VAR 0 1
21848: PPUSH
21849: CALL_OW 251
21853: PPUSH
21854: LD_INT 10
21856: PPUSH
21857: LD_INT 0
21859: PPUSH
21860: CALL_OW 50
// result := result ^ un ;
21864: LD_ADDR_VAR 0 7
21868: PUSH
21869: LD_VAR 0 7
21873: PUSH
21874: LD_VAR 0 14
21878: ADD
21879: ST_TO_ADDR
// end ;
21880: GO 21758
21882: POP
21883: POP
// end ; end ;
21884: LD_VAR 0 7
21888: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21889: LD_INT 0
21891: PPUSH
21892: PPUSH
21893: PPUSH
21894: PPUSH
21895: PPUSH
21896: PPUSH
21897: PPUSH
21898: PPUSH
21899: PPUSH
21900: PPUSH
21901: PPUSH
21902: PPUSH
21903: PPUSH
21904: PPUSH
21905: PPUSH
21906: PPUSH
// result := false ;
21907: LD_ADDR_VAR 0 3
21911: PUSH
21912: LD_INT 0
21914: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21915: LD_VAR 0 1
21919: NOT
21920: IFTRUE 21945
21922: PUSH
21923: LD_VAR 0 1
21927: PPUSH
21928: CALL_OW 266
21932: PUSH
21933: LD_INT 32
21935: PUSH
21936: LD_INT 33
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: IN
21943: NOT
21944: OR
21945: IFFALSE 21949
// exit ;
21947: GO 23084
// nat := GetNation ( tower ) ;
21949: LD_ADDR_VAR 0 12
21953: PUSH
21954: LD_VAR 0 1
21958: PPUSH
21959: CALL_OW 248
21963: ST_TO_ADDR
// side := GetSide ( tower ) ;
21964: LD_ADDR_VAR 0 16
21968: PUSH
21969: LD_VAR 0 1
21973: PPUSH
21974: CALL_OW 255
21978: ST_TO_ADDR
// x := GetX ( tower ) ;
21979: LD_ADDR_VAR 0 10
21983: PUSH
21984: LD_VAR 0 1
21988: PPUSH
21989: CALL_OW 250
21993: ST_TO_ADDR
// y := GetY ( tower ) ;
21994: LD_ADDR_VAR 0 11
21998: PUSH
21999: LD_VAR 0 1
22003: PPUSH
22004: CALL_OW 251
22008: ST_TO_ADDR
// if not x or not y then
22009: LD_VAR 0 10
22013: NOT
22014: IFTRUE 22023
22016: PUSH
22017: LD_VAR 0 11
22021: NOT
22022: OR
22023: IFFALSE 22027
// exit ;
22025: GO 23084
// weapon := 0 ;
22027: LD_ADDR_VAR 0 18
22031: PUSH
22032: LD_INT 0
22034: ST_TO_ADDR
// fac_list := [ ] ;
22035: LD_ADDR_VAR 0 17
22039: PUSH
22040: EMPTY
22041: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
22042: LD_ADDR_VAR 0 6
22046: PUSH
22047: LD_VAR 0 1
22051: PPUSH
22052: CALL_OW 274
22056: PPUSH
22057: LD_VAR 0 2
22061: PPUSH
22062: LD_INT 0
22064: PPUSH
22065: CALL 19619 0 3
22069: PPUSH
22070: LD_INT 30
22072: PUSH
22073: LD_INT 3
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PPUSH
22080: CALL_OW 72
22084: ST_TO_ADDR
// if not factories then
22085: LD_VAR 0 6
22089: NOT
22090: IFFALSE 22094
// exit ;
22092: GO 23084
// for i in factories do
22094: LD_ADDR_VAR 0 8
22098: PUSH
22099: LD_VAR 0 6
22103: PUSH
22104: FOR_IN
22105: IFFALSE 22130
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22107: LD_ADDR_VAR 0 17
22111: PUSH
22112: LD_VAR 0 17
22116: PUSH
22117: LD_VAR 0 8
22121: PPUSH
22122: CALL_OW 478
22126: UNION
22127: ST_TO_ADDR
22128: GO 22104
22130: POP
22131: POP
// if not fac_list then
22132: LD_VAR 0 17
22136: NOT
22137: IFFALSE 22141
// exit ;
22139: GO 23084
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22141: LD_ADDR_VAR 0 5
22145: PUSH
22146: LD_INT 4
22148: PUSH
22149: LD_INT 5
22151: PUSH
22152: LD_INT 9
22154: PUSH
22155: LD_INT 10
22157: PUSH
22158: LD_INT 6
22160: PUSH
22161: LD_INT 7
22163: PUSH
22164: LD_INT 11
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 27
22178: PUSH
22179: LD_INT 28
22181: PUSH
22182: LD_INT 26
22184: PUSH
22185: LD_INT 30
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 43
22196: PUSH
22197: LD_INT 44
22199: PUSH
22200: LD_INT 46
22202: PUSH
22203: LD_INT 45
22205: PUSH
22206: LD_INT 47
22208: PUSH
22209: LD_INT 49
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: LIST
22224: PUSH
22225: LD_VAR 0 12
22229: ARRAY
22230: ST_TO_ADDR
// list := list isect fac_list ;
22231: LD_ADDR_VAR 0 5
22235: PUSH
22236: LD_VAR 0 5
22240: PUSH
22241: LD_VAR 0 17
22245: ISECT
22246: ST_TO_ADDR
// if not list then
22247: LD_VAR 0 5
22251: NOT
22252: IFFALSE 22256
// exit ;
22254: GO 23084
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22256: LD_VAR 0 12
22260: PUSH
22261: LD_INT 3
22263: EQUAL
22264: IFFALSE 22276
22266: PUSH
22267: LD_INT 49
22269: PUSH
22270: LD_VAR 0 5
22274: IN
22275: AND
22276: IFFALSE 22296
22278: PUSH
22279: LD_INT 31
22281: PPUSH
22282: LD_VAR 0 16
22286: PPUSH
22287: CALL_OW 321
22291: PUSH
22292: LD_INT 2
22294: EQUAL
22295: AND
22296: IFFALSE 22356
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22298: LD_INT 22
22300: PUSH
22301: LD_VAR 0 16
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 35
22312: PUSH
22313: LD_INT 49
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 91
22322: PUSH
22323: LD_VAR 0 1
22327: PUSH
22328: LD_INT 10
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: LIST
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: LIST
22340: PPUSH
22341: CALL_OW 69
22345: NOT
22346: IFFALSE 22356
// weapon := ru_time_lapser ;
22348: LD_ADDR_VAR 0 18
22352: PUSH
22353: LD_INT 49
22355: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22356: LD_VAR 0 12
22360: PUSH
22361: LD_INT 1
22363: PUSH
22364: LD_INT 2
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: IN
22371: IFFALSE 22395
22373: PUSH
22374: LD_INT 11
22376: PUSH
22377: LD_VAR 0 5
22381: IN
22382: IFTRUE 22394
22384: PUSH
22385: LD_INT 30
22387: PUSH
22388: LD_VAR 0 5
22392: IN
22393: OR
22394: AND
22395: IFFALSE 22415
22397: PUSH
22398: LD_INT 6
22400: PPUSH
22401: LD_VAR 0 16
22405: PPUSH
22406: CALL_OW 321
22410: PUSH
22411: LD_INT 2
22413: EQUAL
22414: AND
22415: IFFALSE 22582
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22417: LD_INT 22
22419: PUSH
22420: LD_VAR 0 16
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 2
22431: PUSH
22432: LD_INT 35
22434: PUSH
22435: LD_INT 11
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 35
22444: PUSH
22445: LD_INT 30
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 91
22459: PUSH
22460: LD_VAR 0 1
22464: PUSH
22465: LD_INT 18
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: LIST
22477: PPUSH
22478: CALL_OW 69
22482: NOT
22483: IFFALSE 22559
22485: PUSH
22486: LD_INT 22
22488: PUSH
22489: LD_VAR 0 16
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 2
22500: PUSH
22501: LD_INT 30
22503: PUSH
22504: LD_INT 32
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 30
22513: PUSH
22514: LD_INT 33
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 91
22528: PUSH
22529: LD_VAR 0 1
22533: PUSH
22534: LD_INT 12
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: LIST
22546: PUSH
22547: EMPTY
22548: LIST
22549: PPUSH
22550: CALL_OW 69
22554: PUSH
22555: LD_INT 2
22557: GREATER
22558: AND
22559: IFFALSE 22582
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22561: LD_ADDR_VAR 0 18
22565: PUSH
22566: LD_INT 11
22568: PUSH
22569: LD_INT 30
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_VAR 0 12
22580: ARRAY
22581: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22582: LD_VAR 0 18
22586: NOT
22587: IFFALSE 22607
22589: PUSH
22590: LD_INT 40
22592: PPUSH
22593: LD_VAR 0 16
22597: PPUSH
22598: CALL_OW 321
22602: PUSH
22603: LD_INT 2
22605: EQUAL
22606: AND
22607: IFFALSE 22643
22609: PUSH
22610: LD_INT 7
22612: PUSH
22613: LD_VAR 0 5
22617: IN
22618: IFTRUE 22630
22620: PUSH
22621: LD_INT 28
22623: PUSH
22624: LD_VAR 0 5
22628: IN
22629: OR
22630: IFTRUE 22642
22632: PUSH
22633: LD_INT 45
22635: PUSH
22636: LD_VAR 0 5
22640: IN
22641: OR
22642: AND
22643: IFFALSE 22897
// begin hex := GetHexInfo ( x , y ) ;
22645: LD_ADDR_VAR 0 4
22649: PUSH
22650: LD_VAR 0 10
22654: PPUSH
22655: LD_VAR 0 11
22659: PPUSH
22660: CALL_OW 546
22664: ST_TO_ADDR
// if hex [ 1 ] then
22665: LD_VAR 0 4
22669: PUSH
22670: LD_INT 1
22672: ARRAY
22673: IFFALSE 22677
// exit ;
22675: GO 23084
// height := hex [ 2 ] ;
22677: LD_ADDR_VAR 0 15
22681: PUSH
22682: LD_VAR 0 4
22686: PUSH
22687: LD_INT 2
22689: ARRAY
22690: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22691: LD_ADDR_VAR 0 14
22695: PUSH
22696: LD_INT 0
22698: PUSH
22699: LD_INT 2
22701: PUSH
22702: LD_INT 3
22704: PUSH
22705: LD_INT 5
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: ST_TO_ADDR
// for i in tmp do
22714: LD_ADDR_VAR 0 8
22718: PUSH
22719: LD_VAR 0 14
22723: PUSH
22724: FOR_IN
22725: IFFALSE 22895
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22727: LD_ADDR_VAR 0 9
22731: PUSH
22732: LD_VAR 0 10
22736: PPUSH
22737: LD_VAR 0 8
22741: PPUSH
22742: LD_INT 5
22744: PPUSH
22745: CALL_OW 272
22749: PUSH
22750: LD_VAR 0 11
22754: PPUSH
22755: LD_VAR 0 8
22759: PPUSH
22760: LD_INT 5
22762: PPUSH
22763: CALL_OW 273
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22772: LD_VAR 0 9
22776: PUSH
22777: LD_INT 1
22779: ARRAY
22780: PPUSH
22781: LD_VAR 0 9
22785: PUSH
22786: LD_INT 2
22788: ARRAY
22789: PPUSH
22790: CALL_OW 488
22794: IFFALSE 22893
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22796: LD_ADDR_VAR 0 4
22800: PUSH
22801: LD_VAR 0 9
22805: PUSH
22806: LD_INT 1
22808: ARRAY
22809: PPUSH
22810: LD_VAR 0 9
22814: PUSH
22815: LD_INT 2
22817: ARRAY
22818: PPUSH
22819: CALL_OW 546
22823: ST_TO_ADDR
// if hex [ 1 ] then
22824: LD_VAR 0 4
22828: PUSH
22829: LD_INT 1
22831: ARRAY
22832: IFFALSE 22836
// continue ;
22834: GO 22724
// h := hex [ 2 ] ;
22836: LD_ADDR_VAR 0 13
22840: PUSH
22841: LD_VAR 0 4
22845: PUSH
22846: LD_INT 2
22848: ARRAY
22849: ST_TO_ADDR
// if h + 7 < height then
22850: LD_VAR 0 13
22854: PUSH
22855: LD_INT 7
22857: PLUS
22858: PUSH
22859: LD_VAR 0 15
22863: LESS
22864: IFFALSE 22893
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22866: LD_ADDR_VAR 0 18
22870: PUSH
22871: LD_INT 7
22873: PUSH
22874: LD_INT 28
22876: PUSH
22877: LD_INT 45
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: LIST
22884: PUSH
22885: LD_VAR 0 12
22889: ARRAY
22890: ST_TO_ADDR
// break ;
22891: GO 22895
// end ; end ; end ;
22893: GO 22724
22895: POP
22896: POP
// end ; if not weapon then
22897: LD_VAR 0 18
22901: NOT
22902: IFFALSE 22962
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22904: LD_ADDR_VAR 0 5
22908: PUSH
22909: LD_VAR 0 5
22913: PUSH
22914: LD_INT 11
22916: PUSH
22917: LD_INT 30
22919: PUSH
22920: LD_INT 49
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: LIST
22927: DIFF
22928: ST_TO_ADDR
// if not list then
22929: LD_VAR 0 5
22933: NOT
22934: IFFALSE 22938
// exit ;
22936: GO 23084
// weapon := list [ rand ( 1 , list ) ] ;
22938: LD_ADDR_VAR 0 18
22942: PUSH
22943: LD_VAR 0 5
22947: PUSH
22948: LD_INT 1
22950: PPUSH
22951: LD_VAR 0 5
22955: PPUSH
22956: CALL_OW 12
22960: ARRAY
22961: ST_TO_ADDR
// end ; if weapon then
22962: LD_VAR 0 18
22966: IFFALSE 23084
// begin tmp := CostOfWeapon ( weapon ) ;
22968: LD_ADDR_VAR 0 14
22972: PUSH
22973: LD_VAR 0 18
22977: PPUSH
22978: CALL_OW 451
22982: ST_TO_ADDR
// j := GetBase ( tower ) ;
22983: LD_ADDR_VAR 0 9
22987: PUSH
22988: LD_VAR 0 1
22992: PPUSH
22993: CALL_OW 274
22997: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22998: LD_VAR 0 9
23002: PPUSH
23003: LD_INT 1
23005: PPUSH
23006: CALL_OW 275
23010: PUSH
23011: LD_VAR 0 14
23015: PUSH
23016: LD_INT 1
23018: ARRAY
23019: GREATEREQUAL
23020: IFFALSE 23046
23022: PUSH
23023: LD_VAR 0 9
23027: PPUSH
23028: LD_INT 2
23030: PPUSH
23031: CALL_OW 275
23035: PUSH
23036: LD_VAR 0 14
23040: PUSH
23041: LD_INT 2
23043: ARRAY
23044: GREATEREQUAL
23045: AND
23046: IFFALSE 23072
23048: PUSH
23049: LD_VAR 0 9
23053: PPUSH
23054: LD_INT 3
23056: PPUSH
23057: CALL_OW 275
23061: PUSH
23062: LD_VAR 0 14
23066: PUSH
23067: LD_INT 3
23069: ARRAY
23070: GREATEREQUAL
23071: AND
23072: IFFALSE 23084
// result := weapon ;
23074: LD_ADDR_VAR 0 3
23078: PUSH
23079: LD_VAR 0 18
23083: ST_TO_ADDR
// end ; end ;
23084: LD_VAR 0 3
23088: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23089: LD_INT 0
23091: PPUSH
23092: PPUSH
// result := true ;
23093: LD_ADDR_VAR 0 3
23097: PUSH
23098: LD_INT 1
23100: ST_TO_ADDR
// if array1 = array2 then
23101: LD_VAR 0 1
23105: PUSH
23106: LD_VAR 0 2
23110: EQUAL
23111: IFFALSE 23171
// begin for i = 1 to array1 do
23113: LD_ADDR_VAR 0 4
23117: PUSH
23118: DOUBLE
23119: LD_INT 1
23121: DEC
23122: ST_TO_ADDR
23123: LD_VAR 0 1
23127: PUSH
23128: FOR_TO
23129: IFFALSE 23167
// if array1 [ i ] <> array2 [ i ] then
23131: LD_VAR 0 1
23135: PUSH
23136: LD_VAR 0 4
23140: ARRAY
23141: PUSH
23142: LD_VAR 0 2
23146: PUSH
23147: LD_VAR 0 4
23151: ARRAY
23152: NONEQUAL
23153: IFFALSE 23165
// begin result := false ;
23155: LD_ADDR_VAR 0 3
23159: PUSH
23160: LD_INT 0
23162: ST_TO_ADDR
// break ;
23163: GO 23167
// end ;
23165: GO 23128
23167: POP
23168: POP
// end else
23169: GO 23179
// result := false ;
23171: LD_ADDR_VAR 0 3
23175: PUSH
23176: LD_INT 0
23178: ST_TO_ADDR
// end ;
23179: LD_VAR 0 3
23183: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
23184: LD_INT 0
23186: PPUSH
23187: PPUSH
// if not array1 or not array2 then
23188: LD_VAR 0 1
23192: NOT
23193: IFTRUE 23202
23195: PUSH
23196: LD_VAR 0 2
23200: NOT
23201: OR
23202: IFFALSE 23206
// exit ;
23204: GO 23270
// result := true ;
23206: LD_ADDR_VAR 0 3
23210: PUSH
23211: LD_INT 1
23213: ST_TO_ADDR
// for i = 1 to array1 do
23214: LD_ADDR_VAR 0 4
23218: PUSH
23219: DOUBLE
23220: LD_INT 1
23222: DEC
23223: ST_TO_ADDR
23224: LD_VAR 0 1
23228: PUSH
23229: FOR_TO
23230: IFFALSE 23268
// if array1 [ i ] <> array2 [ i ] then
23232: LD_VAR 0 1
23236: PUSH
23237: LD_VAR 0 4
23241: ARRAY
23242: PUSH
23243: LD_VAR 0 2
23247: PUSH
23248: LD_VAR 0 4
23252: ARRAY
23253: NONEQUAL
23254: IFFALSE 23266
// begin result := false ;
23256: LD_ADDR_VAR 0 3
23260: PUSH
23261: LD_INT 0
23263: ST_TO_ADDR
// break ;
23264: GO 23268
// end ;
23266: GO 23229
23268: POP
23269: POP
// end ;
23270: LD_VAR 0 3
23274: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23275: LD_INT 0
23277: PPUSH
23278: PPUSH
23279: PPUSH
// pom := GetBase ( fac ) ;
23280: LD_ADDR_VAR 0 5
23284: PUSH
23285: LD_VAR 0 1
23289: PPUSH
23290: CALL_OW 274
23294: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23295: LD_ADDR_VAR 0 4
23299: PUSH
23300: LD_VAR 0 2
23304: PUSH
23305: LD_INT 1
23307: ARRAY
23308: PPUSH
23309: LD_VAR 0 2
23313: PUSH
23314: LD_INT 2
23316: ARRAY
23317: PPUSH
23318: LD_VAR 0 2
23322: PUSH
23323: LD_INT 3
23325: ARRAY
23326: PPUSH
23327: LD_VAR 0 2
23331: PUSH
23332: LD_INT 4
23334: ARRAY
23335: PPUSH
23336: CALL_OW 449
23340: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23341: LD_ADDR_VAR 0 3
23345: PUSH
23346: LD_VAR 0 5
23350: PPUSH
23351: LD_INT 1
23353: PPUSH
23354: CALL_OW 275
23358: PUSH
23359: LD_VAR 0 4
23363: PUSH
23364: LD_INT 1
23366: ARRAY
23367: GREATEREQUAL
23368: IFFALSE 23394
23370: PUSH
23371: LD_VAR 0 5
23375: PPUSH
23376: LD_INT 2
23378: PPUSH
23379: CALL_OW 275
23383: PUSH
23384: LD_VAR 0 4
23388: PUSH
23389: LD_INT 2
23391: ARRAY
23392: GREATEREQUAL
23393: AND
23394: IFFALSE 23420
23396: PUSH
23397: LD_VAR 0 5
23401: PPUSH
23402: LD_INT 3
23404: PPUSH
23405: CALL_OW 275
23409: PUSH
23410: LD_VAR 0 4
23414: PUSH
23415: LD_INT 3
23417: ARRAY
23418: GREATEREQUAL
23419: AND
23420: ST_TO_ADDR
// end ;
23421: LD_VAR 0 3
23425: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23426: LD_INT 0
23428: PPUSH
23429: PPUSH
23430: PPUSH
23431: PPUSH
// pom := GetBase ( building ) ;
23432: LD_ADDR_VAR 0 3
23436: PUSH
23437: LD_VAR 0 1
23441: PPUSH
23442: CALL_OW 274
23446: ST_TO_ADDR
// if not pom then
23447: LD_VAR 0 3
23451: NOT
23452: IFFALSE 23456
// exit ;
23454: GO 23630
// btype := GetBType ( building ) ;
23456: LD_ADDR_VAR 0 5
23460: PUSH
23461: LD_VAR 0 1
23465: PPUSH
23466: CALL_OW 266
23470: ST_TO_ADDR
// if btype = b_armoury then
23471: LD_VAR 0 5
23475: PUSH
23476: LD_INT 4
23478: EQUAL
23479: IFFALSE 23489
// btype := b_barracks ;
23481: LD_ADDR_VAR 0 5
23485: PUSH
23486: LD_INT 5
23488: ST_TO_ADDR
// if btype = b_depot then
23489: LD_VAR 0 5
23493: PUSH
23494: LD_INT 0
23496: EQUAL
23497: IFFALSE 23507
// btype := b_warehouse ;
23499: LD_ADDR_VAR 0 5
23503: PUSH
23504: LD_INT 1
23506: ST_TO_ADDR
// if btype = b_workshop then
23507: LD_VAR 0 5
23511: PUSH
23512: LD_INT 2
23514: EQUAL
23515: IFFALSE 23525
// btype := b_factory ;
23517: LD_ADDR_VAR 0 5
23521: PUSH
23522: LD_INT 3
23524: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23525: LD_ADDR_VAR 0 4
23529: PUSH
23530: LD_VAR 0 5
23534: PPUSH
23535: LD_VAR 0 1
23539: PPUSH
23540: CALL_OW 248
23544: PPUSH
23545: CALL_OW 450
23549: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23550: LD_ADDR_VAR 0 2
23554: PUSH
23555: LD_VAR 0 3
23559: PPUSH
23560: LD_INT 1
23562: PPUSH
23563: CALL_OW 275
23567: PUSH
23568: LD_VAR 0 4
23572: PUSH
23573: LD_INT 1
23575: ARRAY
23576: GREATEREQUAL
23577: IFFALSE 23603
23579: PUSH
23580: LD_VAR 0 3
23584: PPUSH
23585: LD_INT 2
23587: PPUSH
23588: CALL_OW 275
23592: PUSH
23593: LD_VAR 0 4
23597: PUSH
23598: LD_INT 2
23600: ARRAY
23601: GREATEREQUAL
23602: AND
23603: IFFALSE 23629
23605: PUSH
23606: LD_VAR 0 3
23610: PPUSH
23611: LD_INT 3
23613: PPUSH
23614: CALL_OW 275
23618: PUSH
23619: LD_VAR 0 4
23623: PUSH
23624: LD_INT 3
23626: ARRAY
23627: GREATEREQUAL
23628: AND
23629: ST_TO_ADDR
// end ;
23630: LD_VAR 0 2
23634: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23635: LD_INT 0
23637: PPUSH
23638: PPUSH
23639: PPUSH
// pom := GetBase ( building ) ;
23640: LD_ADDR_VAR 0 4
23644: PUSH
23645: LD_VAR 0 1
23649: PPUSH
23650: CALL_OW 274
23654: ST_TO_ADDR
// if not pom then
23655: LD_VAR 0 4
23659: NOT
23660: IFFALSE 23664
// exit ;
23662: GO 23769
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23664: LD_ADDR_VAR 0 5
23668: PUSH
23669: LD_VAR 0 2
23673: PPUSH
23674: LD_VAR 0 1
23678: PPUSH
23679: CALL_OW 248
23683: PPUSH
23684: CALL_OW 450
23688: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23689: LD_ADDR_VAR 0 3
23693: PUSH
23694: LD_VAR 0 4
23698: PPUSH
23699: LD_INT 1
23701: PPUSH
23702: CALL_OW 275
23706: PUSH
23707: LD_VAR 0 5
23711: PUSH
23712: LD_INT 1
23714: ARRAY
23715: GREATEREQUAL
23716: IFFALSE 23742
23718: PUSH
23719: LD_VAR 0 4
23723: PPUSH
23724: LD_INT 2
23726: PPUSH
23727: CALL_OW 275
23731: PUSH
23732: LD_VAR 0 5
23736: PUSH
23737: LD_INT 2
23739: ARRAY
23740: GREATEREQUAL
23741: AND
23742: IFFALSE 23768
23744: PUSH
23745: LD_VAR 0 4
23749: PPUSH
23750: LD_INT 3
23752: PPUSH
23753: CALL_OW 275
23757: PUSH
23758: LD_VAR 0 5
23762: PUSH
23763: LD_INT 3
23765: ARRAY
23766: GREATEREQUAL
23767: AND
23768: ST_TO_ADDR
// end ;
23769: LD_VAR 0 3
23773: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23774: LD_INT 0
23776: PPUSH
23777: PPUSH
23778: PPUSH
23779: PPUSH
23780: PPUSH
23781: PPUSH
23782: PPUSH
23783: PPUSH
23784: PPUSH
23785: PPUSH
23786: PPUSH
// result := false ;
23787: LD_ADDR_VAR 0 8
23791: PUSH
23792: LD_INT 0
23794: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23795: LD_VAR 0 5
23799: NOT
23800: IFTRUE 23809
23802: PUSH
23803: LD_VAR 0 1
23807: NOT
23808: OR
23809: IFTRUE 23818
23811: PUSH
23812: LD_VAR 0 2
23816: NOT
23817: OR
23818: IFTRUE 23827
23820: PUSH
23821: LD_VAR 0 3
23825: NOT
23826: OR
23827: IFFALSE 23831
// exit ;
23829: GO 24657
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23831: LD_ADDR_VAR 0 14
23835: PUSH
23836: LD_VAR 0 1
23840: PPUSH
23841: LD_VAR 0 2
23845: PPUSH
23846: LD_VAR 0 3
23850: PPUSH
23851: LD_VAR 0 4
23855: PPUSH
23856: LD_VAR 0 5
23860: PUSH
23861: LD_INT 1
23863: ARRAY
23864: PPUSH
23865: CALL_OW 248
23869: PPUSH
23870: LD_INT 0
23872: PPUSH
23873: CALL 25938 0 6
23877: ST_TO_ADDR
// if not hexes then
23878: LD_VAR 0 14
23882: NOT
23883: IFFALSE 23887
// exit ;
23885: GO 24657
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23887: LD_ADDR_VAR 0 17
23891: PUSH
23892: LD_VAR 0 5
23896: PPUSH
23897: LD_INT 22
23899: PUSH
23900: LD_VAR 0 13
23904: PPUSH
23905: CALL_OW 255
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 2
23916: PUSH
23917: LD_INT 30
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 30
23929: PUSH
23930: LD_INT 1
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: LIST
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PPUSH
23946: CALL_OW 72
23950: ST_TO_ADDR
// for i = 1 to hexes do
23951: LD_ADDR_VAR 0 9
23955: PUSH
23956: DOUBLE
23957: LD_INT 1
23959: DEC
23960: ST_TO_ADDR
23961: LD_VAR 0 14
23965: PUSH
23966: FOR_TO
23967: IFFALSE 24655
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23969: LD_ADDR_VAR 0 13
23973: PUSH
23974: LD_VAR 0 14
23978: PUSH
23979: LD_VAR 0 9
23983: ARRAY
23984: PUSH
23985: LD_INT 1
23987: ARRAY
23988: PPUSH
23989: LD_VAR 0 14
23993: PUSH
23994: LD_VAR 0 9
23998: ARRAY
23999: PUSH
24000: LD_INT 2
24002: ARRAY
24003: PPUSH
24004: CALL_OW 428
24008: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24009: LD_VAR 0 14
24013: PUSH
24014: LD_VAR 0 9
24018: ARRAY
24019: PUSH
24020: LD_INT 1
24022: ARRAY
24023: PPUSH
24024: LD_VAR 0 14
24028: PUSH
24029: LD_VAR 0 9
24033: ARRAY
24034: PUSH
24035: LD_INT 2
24037: ARRAY
24038: PPUSH
24039: CALL_OW 351
24043: IFTRUE 24082
24045: PUSH
24046: LD_VAR 0 14
24050: PUSH
24051: LD_VAR 0 9
24055: ARRAY
24056: PUSH
24057: LD_INT 1
24059: ARRAY
24060: PPUSH
24061: LD_VAR 0 14
24065: PUSH
24066: LD_VAR 0 9
24070: ARRAY
24071: PUSH
24072: LD_INT 2
24074: ARRAY
24075: PPUSH
24076: CALL_OW 488
24080: NOT
24081: OR
24082: IFTRUE 24099
24084: PUSH
24085: LD_VAR 0 13
24089: PPUSH
24090: CALL_OW 247
24094: PUSH
24095: LD_INT 3
24097: EQUAL
24098: OR
24099: IFFALSE 24105
// exit ;
24101: POP
24102: POP
24103: GO 24657
// if not tmp then
24105: LD_VAR 0 13
24109: NOT
24110: IFFALSE 24114
// continue ;
24112: GO 23966
// result := true ;
24114: LD_ADDR_VAR 0 8
24118: PUSH
24119: LD_INT 1
24121: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24122: LD_VAR 0 6
24126: IFFALSE 24143
24128: PUSH
24129: LD_VAR 0 13
24133: PPUSH
24134: CALL_OW 247
24138: PUSH
24139: LD_INT 2
24141: EQUAL
24142: AND
24143: IFFALSE 24160
24145: PUSH
24146: LD_VAR 0 13
24150: PPUSH
24151: CALL_OW 263
24155: PUSH
24156: LD_INT 1
24158: EQUAL
24159: AND
24160: IFFALSE 24324
// begin if IsDrivenBy ( tmp ) then
24162: LD_VAR 0 13
24166: PPUSH
24167: CALL_OW 311
24171: IFFALSE 24175
// continue ;
24173: GO 23966
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
24175: LD_VAR 0 6
24179: PPUSH
24180: LD_INT 3
24182: PUSH
24183: LD_INT 60
24185: PUSH
24186: EMPTY
24187: LIST
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 3
24195: PUSH
24196: LD_INT 55
24198: PUSH
24199: EMPTY
24200: LIST
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PPUSH
24210: CALL_OW 72
24214: IFFALSE 24322
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
24216: LD_ADDR_VAR 0 18
24220: PUSH
24221: LD_VAR 0 6
24225: PPUSH
24226: LD_INT 3
24228: PUSH
24229: LD_INT 60
24231: PUSH
24232: EMPTY
24233: LIST
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 3
24241: PUSH
24242: LD_INT 55
24244: PUSH
24245: EMPTY
24246: LIST
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PPUSH
24256: CALL_OW 72
24260: PUSH
24261: LD_INT 1
24263: ARRAY
24264: ST_TO_ADDR
// if IsInUnit ( driver ) then
24265: LD_VAR 0 18
24269: PPUSH
24270: CALL_OW 310
24274: IFFALSE 24285
// ComExit ( driver ) ;
24276: LD_VAR 0 18
24280: PPUSH
24281: CALL 49938 0 1
// AddComEnterUnit ( driver , tmp ) ;
24285: LD_VAR 0 18
24289: PPUSH
24290: LD_VAR 0 13
24294: PPUSH
24295: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
24299: LD_VAR 0 18
24303: PPUSH
24304: LD_VAR 0 7
24308: PPUSH
24309: CALL_OW 173
// AddComExitVehicle ( driver ) ;
24313: LD_VAR 0 18
24317: PPUSH
24318: CALL_OW 181
// end ; continue ;
24322: GO 23966
// end ; if not cleaners or not tmp in cleaners then
24324: LD_VAR 0 6
24328: NOT
24329: IFTRUE 24344
24331: PUSH
24332: LD_VAR 0 13
24336: PUSH
24337: LD_VAR 0 6
24341: IN
24342: NOT
24343: OR
24344: IFFALSE 24653
// begin if dep then
24346: LD_VAR 0 17
24350: IFFALSE 24486
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24352: LD_ADDR_VAR 0 16
24356: PUSH
24357: LD_VAR 0 17
24361: PUSH
24362: LD_INT 1
24364: ARRAY
24365: PPUSH
24366: CALL_OW 250
24370: PPUSH
24371: LD_VAR 0 17
24375: PUSH
24376: LD_INT 1
24378: ARRAY
24379: PPUSH
24380: CALL_OW 254
24384: PPUSH
24385: LD_INT 5
24387: PPUSH
24388: CALL_OW 272
24392: PUSH
24393: LD_VAR 0 17
24397: PUSH
24398: LD_INT 1
24400: ARRAY
24401: PPUSH
24402: CALL_OW 251
24406: PPUSH
24407: LD_VAR 0 17
24411: PUSH
24412: LD_INT 1
24414: ARRAY
24415: PPUSH
24416: CALL_OW 254
24420: PPUSH
24421: LD_INT 5
24423: PPUSH
24424: CALL_OW 273
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24433: LD_VAR 0 16
24437: PUSH
24438: LD_INT 1
24440: ARRAY
24441: PPUSH
24442: LD_VAR 0 16
24446: PUSH
24447: LD_INT 2
24449: ARRAY
24450: PPUSH
24451: CALL_OW 488
24455: IFFALSE 24486
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24457: LD_VAR 0 13
24461: PPUSH
24462: LD_VAR 0 16
24466: PUSH
24467: LD_INT 1
24469: ARRAY
24470: PPUSH
24471: LD_VAR 0 16
24475: PUSH
24476: LD_INT 2
24478: ARRAY
24479: PPUSH
24480: CALL_OW 111
// continue ;
24484: GO 23966
// end ; end ; r := GetDir ( tmp ) ;
24486: LD_ADDR_VAR 0 15
24490: PUSH
24491: LD_VAR 0 13
24495: PPUSH
24496: CALL_OW 254
24500: ST_TO_ADDR
// if r = 5 then
24501: LD_VAR 0 15
24505: PUSH
24506: LD_INT 5
24508: EQUAL
24509: IFFALSE 24519
// r := 0 ;
24511: LD_ADDR_VAR 0 15
24515: PUSH
24516: LD_INT 0
24518: ST_TO_ADDR
// for j = r to 5 do
24519: LD_ADDR_VAR 0 10
24523: PUSH
24524: DOUBLE
24525: LD_VAR 0 15
24529: DEC
24530: ST_TO_ADDR
24531: LD_INT 5
24533: PUSH
24534: FOR_TO
24535: IFFALSE 24651
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24537: LD_ADDR_VAR 0 11
24541: PUSH
24542: LD_VAR 0 13
24546: PPUSH
24547: CALL_OW 250
24551: PPUSH
24552: LD_VAR 0 10
24556: PPUSH
24557: LD_INT 2
24559: PPUSH
24560: CALL_OW 272
24564: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24565: LD_ADDR_VAR 0 12
24569: PUSH
24570: LD_VAR 0 13
24574: PPUSH
24575: CALL_OW 251
24579: PPUSH
24580: LD_VAR 0 10
24584: PPUSH
24585: LD_INT 2
24587: PPUSH
24588: CALL_OW 273
24592: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24593: LD_VAR 0 11
24597: PPUSH
24598: LD_VAR 0 12
24602: PPUSH
24603: CALL_OW 488
24607: IFFALSE 24626
24609: PUSH
24610: LD_VAR 0 11
24614: PPUSH
24615: LD_VAR 0 12
24619: PPUSH
24620: CALL_OW 428
24624: NOT
24625: AND
24626: IFFALSE 24649
// begin ComMoveXY ( tmp , _x , _y ) ;
24628: LD_VAR 0 13
24632: PPUSH
24633: LD_VAR 0 11
24637: PPUSH
24638: LD_VAR 0 12
24642: PPUSH
24643: CALL_OW 111
// break ;
24647: GO 24651
// end ; end ;
24649: GO 24534
24651: POP
24652: POP
// end ; end ;
24653: GO 23966
24655: POP
24656: POP
// end ;
24657: LD_VAR 0 8
24661: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24662: LD_INT 0
24664: PPUSH
// result := true ;
24665: LD_ADDR_VAR 0 3
24669: PUSH
24670: LD_INT 1
24672: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24673: LD_VAR 0 2
24677: PUSH
24678: LD_INT 24
24680: DOUBLE
24681: EQUAL
24682: IFTRUE 24692
24684: LD_INT 33
24686: DOUBLE
24687: EQUAL
24688: IFTRUE 24692
24690: GO 24717
24692: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24693: LD_ADDR_VAR 0 3
24697: PUSH
24698: LD_INT 32
24700: PPUSH
24701: LD_VAR 0 1
24705: PPUSH
24706: CALL_OW 321
24710: PUSH
24711: LD_INT 2
24713: EQUAL
24714: ST_TO_ADDR
24715: GO 25033
24717: LD_INT 20
24719: DOUBLE
24720: EQUAL
24721: IFTRUE 24725
24723: GO 24750
24725: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24726: LD_ADDR_VAR 0 3
24730: PUSH
24731: LD_INT 6
24733: PPUSH
24734: LD_VAR 0 1
24738: PPUSH
24739: CALL_OW 321
24743: PUSH
24744: LD_INT 2
24746: EQUAL
24747: ST_TO_ADDR
24748: GO 25033
24750: LD_INT 22
24752: DOUBLE
24753: EQUAL
24754: IFTRUE 24764
24756: LD_INT 36
24758: DOUBLE
24759: EQUAL
24760: IFTRUE 24764
24762: GO 24789
24764: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24765: LD_ADDR_VAR 0 3
24769: PUSH
24770: LD_INT 15
24772: PPUSH
24773: LD_VAR 0 1
24777: PPUSH
24778: CALL_OW 321
24782: PUSH
24783: LD_INT 2
24785: EQUAL
24786: ST_TO_ADDR
24787: GO 25033
24789: LD_INT 30
24791: DOUBLE
24792: EQUAL
24793: IFTRUE 24797
24795: GO 24822
24797: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24798: LD_ADDR_VAR 0 3
24802: PUSH
24803: LD_INT 20
24805: PPUSH
24806: LD_VAR 0 1
24810: PPUSH
24811: CALL_OW 321
24815: PUSH
24816: LD_INT 2
24818: EQUAL
24819: ST_TO_ADDR
24820: GO 25033
24822: LD_INT 28
24824: DOUBLE
24825: EQUAL
24826: IFTRUE 24836
24828: LD_INT 21
24830: DOUBLE
24831: EQUAL
24832: IFTRUE 24836
24834: GO 24861
24836: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24837: LD_ADDR_VAR 0 3
24841: PUSH
24842: LD_INT 21
24844: PPUSH
24845: LD_VAR 0 1
24849: PPUSH
24850: CALL_OW 321
24854: PUSH
24855: LD_INT 2
24857: EQUAL
24858: ST_TO_ADDR
24859: GO 25033
24861: LD_INT 16
24863: DOUBLE
24864: EQUAL
24865: IFTRUE 24869
24867: GO 24894
24869: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24870: LD_ADDR_VAR 0 3
24874: PUSH
24875: LD_INT 84
24877: PPUSH
24878: LD_VAR 0 1
24882: PPUSH
24883: CALL_OW 321
24887: PUSH
24888: LD_INT 2
24890: EQUAL
24891: ST_TO_ADDR
24892: GO 25033
24894: LD_INT 19
24896: DOUBLE
24897: EQUAL
24898: IFTRUE 24908
24900: LD_INT 23
24902: DOUBLE
24903: EQUAL
24904: IFTRUE 24908
24906: GO 24933
24908: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24909: LD_ADDR_VAR 0 3
24913: PUSH
24914: LD_INT 83
24916: PPUSH
24917: LD_VAR 0 1
24921: PPUSH
24922: CALL_OW 321
24926: PUSH
24927: LD_INT 2
24929: EQUAL
24930: ST_TO_ADDR
24931: GO 25033
24933: LD_INT 17
24935: DOUBLE
24936: EQUAL
24937: IFTRUE 24941
24939: GO 24966
24941: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24942: LD_ADDR_VAR 0 3
24946: PUSH
24947: LD_INT 39
24949: PPUSH
24950: LD_VAR 0 1
24954: PPUSH
24955: CALL_OW 321
24959: PUSH
24960: LD_INT 2
24962: EQUAL
24963: ST_TO_ADDR
24964: GO 25033
24966: LD_INT 18
24968: DOUBLE
24969: EQUAL
24970: IFTRUE 24974
24972: GO 24999
24974: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24975: LD_ADDR_VAR 0 3
24979: PUSH
24980: LD_INT 40
24982: PPUSH
24983: LD_VAR 0 1
24987: PPUSH
24988: CALL_OW 321
24992: PUSH
24993: LD_INT 2
24995: EQUAL
24996: ST_TO_ADDR
24997: GO 25033
24999: LD_INT 27
25001: DOUBLE
25002: EQUAL
25003: IFTRUE 25007
25005: GO 25032
25007: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
25008: LD_ADDR_VAR 0 3
25012: PUSH
25013: LD_INT 35
25015: PPUSH
25016: LD_VAR 0 1
25020: PPUSH
25021: CALL_OW 321
25025: PUSH
25026: LD_INT 2
25028: EQUAL
25029: ST_TO_ADDR
25030: GO 25033
25032: POP
// end ;
25033: LD_VAR 0 3
25037: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25038: LD_INT 0
25040: PPUSH
25041: PPUSH
25042: PPUSH
25043: PPUSH
25044: PPUSH
25045: PPUSH
25046: PPUSH
25047: PPUSH
25048: PPUSH
25049: PPUSH
25050: PPUSH
// result := false ;
25051: LD_ADDR_VAR 0 6
25055: PUSH
25056: LD_INT 0
25058: ST_TO_ADDR
// if btype = b_depot then
25059: LD_VAR 0 2
25063: PUSH
25064: LD_INT 0
25066: EQUAL
25067: IFFALSE 25079
// begin result := true ;
25069: LD_ADDR_VAR 0 6
25073: PUSH
25074: LD_INT 1
25076: ST_TO_ADDR
// exit ;
25077: GO 25933
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25079: LD_VAR 0 1
25083: NOT
25084: IFTRUE 25109
25086: PUSH
25087: LD_VAR 0 1
25091: PPUSH
25092: CALL_OW 266
25096: PUSH
25097: LD_INT 0
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: IN
25107: NOT
25108: OR
25109: IFTRUE 25118
25111: PUSH
25112: LD_VAR 0 2
25116: NOT
25117: OR
25118: IFTRUE 25154
25120: PUSH
25121: LD_VAR 0 5
25125: PUSH
25126: LD_INT 0
25128: PUSH
25129: LD_INT 1
25131: PUSH
25132: LD_INT 2
25134: PUSH
25135: LD_INT 3
25137: PUSH
25138: LD_INT 4
25140: PUSH
25141: LD_INT 5
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: IN
25152: NOT
25153: OR
25154: IFTRUE 25173
25156: PUSH
25157: LD_VAR 0 3
25161: PPUSH
25162: LD_VAR 0 4
25166: PPUSH
25167: CALL_OW 488
25171: NOT
25172: OR
25173: IFFALSE 25177
// exit ;
25175: GO 25933
// side := GetSide ( depot ) ;
25177: LD_ADDR_VAR 0 9
25181: PUSH
25182: LD_VAR 0 1
25186: PPUSH
25187: CALL_OW 255
25191: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
25192: LD_VAR 0 9
25196: PPUSH
25197: LD_VAR 0 2
25201: PPUSH
25202: CALL 24662 0 2
25206: NOT
25207: IFFALSE 25211
// exit ;
25209: GO 25933
// pom := GetBase ( depot ) ;
25211: LD_ADDR_VAR 0 10
25215: PUSH
25216: LD_VAR 0 1
25220: PPUSH
25221: CALL_OW 274
25225: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25226: LD_ADDR_VAR 0 11
25230: PUSH
25231: LD_VAR 0 2
25235: PPUSH
25236: LD_VAR 0 1
25240: PPUSH
25241: CALL_OW 248
25245: PPUSH
25246: CALL_OW 450
25250: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25251: LD_VAR 0 10
25255: PPUSH
25256: LD_INT 1
25258: PPUSH
25259: CALL_OW 275
25263: PUSH
25264: LD_VAR 0 11
25268: PUSH
25269: LD_INT 1
25271: ARRAY
25272: GREATEREQUAL
25273: IFFALSE 25299
25275: PUSH
25276: LD_VAR 0 10
25280: PPUSH
25281: LD_INT 2
25283: PPUSH
25284: CALL_OW 275
25288: PUSH
25289: LD_VAR 0 11
25293: PUSH
25294: LD_INT 2
25296: ARRAY
25297: GREATEREQUAL
25298: AND
25299: IFFALSE 25325
25301: PUSH
25302: LD_VAR 0 10
25306: PPUSH
25307: LD_INT 3
25309: PPUSH
25310: CALL_OW 275
25314: PUSH
25315: LD_VAR 0 11
25319: PUSH
25320: LD_INT 3
25322: ARRAY
25323: GREATEREQUAL
25324: AND
25325: NOT
25326: IFFALSE 25330
// exit ;
25328: GO 25933
// if GetBType ( depot ) = b_depot then
25330: LD_VAR 0 1
25334: PPUSH
25335: CALL_OW 266
25339: PUSH
25340: LD_INT 0
25342: EQUAL
25343: IFFALSE 25355
// dist := 28 else
25345: LD_ADDR_VAR 0 14
25349: PUSH
25350: LD_INT 28
25352: ST_TO_ADDR
25353: GO 25363
// dist := 36 ;
25355: LD_ADDR_VAR 0 14
25359: PUSH
25360: LD_INT 36
25362: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25363: LD_VAR 0 1
25367: PPUSH
25368: LD_VAR 0 3
25372: PPUSH
25373: LD_VAR 0 4
25377: PPUSH
25378: CALL_OW 297
25382: PUSH
25383: LD_VAR 0 14
25387: GREATER
25388: IFFALSE 25392
// exit ;
25390: GO 25933
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25392: LD_ADDR_VAR 0 12
25396: PUSH
25397: LD_VAR 0 2
25401: PPUSH
25402: LD_VAR 0 3
25406: PPUSH
25407: LD_VAR 0 4
25411: PPUSH
25412: LD_VAR 0 5
25416: PPUSH
25417: LD_VAR 0 1
25421: PPUSH
25422: CALL_OW 248
25426: PPUSH
25427: LD_INT 0
25429: PPUSH
25430: CALL 25938 0 6
25434: ST_TO_ADDR
// if not hexes then
25435: LD_VAR 0 12
25439: NOT
25440: IFFALSE 25444
// exit ;
25442: GO 25933
// hex := GetHexInfo ( x , y ) ;
25444: LD_ADDR_VAR 0 15
25448: PUSH
25449: LD_VAR 0 3
25453: PPUSH
25454: LD_VAR 0 4
25458: PPUSH
25459: CALL_OW 546
25463: ST_TO_ADDR
// if hex [ 1 ] then
25464: LD_VAR 0 15
25468: PUSH
25469: LD_INT 1
25471: ARRAY
25472: IFFALSE 25476
// exit ;
25474: GO 25933
// height := hex [ 2 ] ;
25476: LD_ADDR_VAR 0 13
25480: PUSH
25481: LD_VAR 0 15
25485: PUSH
25486: LD_INT 2
25488: ARRAY
25489: ST_TO_ADDR
// for i = 1 to hexes do
25490: LD_ADDR_VAR 0 7
25494: PUSH
25495: DOUBLE
25496: LD_INT 1
25498: DEC
25499: ST_TO_ADDR
25500: LD_VAR 0 12
25504: PUSH
25505: FOR_TO
25506: IFFALSE 25850
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25508: LD_VAR 0 12
25512: PUSH
25513: LD_VAR 0 7
25517: ARRAY
25518: PUSH
25519: LD_INT 1
25521: ARRAY
25522: PPUSH
25523: LD_VAR 0 12
25527: PUSH
25528: LD_VAR 0 7
25532: ARRAY
25533: PUSH
25534: LD_INT 2
25536: ARRAY
25537: PPUSH
25538: CALL_OW 488
25542: NOT
25543: IFTRUE 25585
25545: PUSH
25546: LD_VAR 0 12
25550: PUSH
25551: LD_VAR 0 7
25555: ARRAY
25556: PUSH
25557: LD_INT 1
25559: ARRAY
25560: PPUSH
25561: LD_VAR 0 12
25565: PUSH
25566: LD_VAR 0 7
25570: ARRAY
25571: PUSH
25572: LD_INT 2
25574: ARRAY
25575: PPUSH
25576: CALL_OW 428
25580: PUSH
25581: LD_INT 0
25583: GREATER
25584: OR
25585: IFTRUE 25623
25587: PUSH
25588: LD_VAR 0 12
25592: PUSH
25593: LD_VAR 0 7
25597: ARRAY
25598: PUSH
25599: LD_INT 1
25601: ARRAY
25602: PPUSH
25603: LD_VAR 0 12
25607: PUSH
25608: LD_VAR 0 7
25612: ARRAY
25613: PUSH
25614: LD_INT 2
25616: ARRAY
25617: PPUSH
25618: CALL_OW 351
25622: OR
25623: IFFALSE 25629
// exit ;
25625: POP
25626: POP
25627: GO 25933
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25629: LD_ADDR_VAR 0 8
25633: PUSH
25634: LD_VAR 0 12
25638: PUSH
25639: LD_VAR 0 7
25643: ARRAY
25644: PUSH
25645: LD_INT 1
25647: ARRAY
25648: PPUSH
25649: LD_VAR 0 12
25653: PUSH
25654: LD_VAR 0 7
25658: ARRAY
25659: PUSH
25660: LD_INT 2
25662: ARRAY
25663: PPUSH
25664: CALL_OW 546
25668: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25669: LD_VAR 0 8
25673: PUSH
25674: LD_INT 1
25676: ARRAY
25677: IFTRUE 25699
25679: PUSH
25680: LD_VAR 0 8
25684: PUSH
25685: LD_INT 2
25687: ARRAY
25688: PUSH
25689: LD_VAR 0 13
25693: PUSH
25694: LD_INT 2
25696: PLUS
25697: GREATER
25698: OR
25699: IFTRUE 25721
25701: PUSH
25702: LD_VAR 0 8
25706: PUSH
25707: LD_INT 2
25709: ARRAY
25710: PUSH
25711: LD_VAR 0 13
25715: PUSH
25716: LD_INT 2
25718: MINUS
25719: LESS
25720: OR
25721: IFTRUE 25789
25723: PUSH
25724: LD_VAR 0 8
25728: PUSH
25729: LD_INT 3
25731: ARRAY
25732: PUSH
25733: LD_INT 0
25735: PUSH
25736: LD_INT 8
25738: PUSH
25739: LD_INT 9
25741: PUSH
25742: LD_INT 10
25744: PUSH
25745: LD_INT 11
25747: PUSH
25748: LD_INT 12
25750: PUSH
25751: LD_INT 13
25753: PUSH
25754: LD_INT 16
25756: PUSH
25757: LD_INT 17
25759: PUSH
25760: LD_INT 18
25762: PUSH
25763: LD_INT 19
25765: PUSH
25766: LD_INT 20
25768: PUSH
25769: LD_INT 21
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: IN
25787: NOT
25788: OR
25789: IFTRUE 25802
25791: PUSH
25792: LD_VAR 0 8
25796: PUSH
25797: LD_INT 5
25799: ARRAY
25800: NOT
25801: OR
25802: IFTRUE 25842
25804: PUSH
25805: LD_VAR 0 8
25809: PUSH
25810: LD_INT 6
25812: ARRAY
25813: PUSH
25814: LD_INT 1
25816: PUSH
25817: LD_INT 2
25819: PUSH
25820: LD_INT 7
25822: PUSH
25823: LD_INT 9
25825: PUSH
25826: LD_INT 10
25828: PUSH
25829: LD_INT 11
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: IN
25840: NOT
25841: OR
25842: IFFALSE 25848
// exit ;
25844: POP
25845: POP
25846: GO 25933
// end ;
25848: GO 25505
25850: POP
25851: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25852: LD_VAR 0 9
25856: PPUSH
25857: LD_VAR 0 3
25861: PPUSH
25862: LD_VAR 0 4
25866: PPUSH
25867: LD_INT 20
25869: PPUSH
25870: CALL 17752 0 4
25874: PUSH
25875: LD_INT 4
25877: ARRAY
25878: IFFALSE 25882
// exit ;
25880: GO 25933
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25882: LD_VAR 0 2
25886: PUSH
25887: LD_INT 29
25889: PUSH
25890: LD_INT 30
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: IN
25897: IFFALSE 25921
25899: PUSH
25900: LD_VAR 0 3
25904: PPUSH
25905: LD_VAR 0 4
25909: PPUSH
25910: LD_VAR 0 9
25914: PPUSH
25915: CALL_OW 440
25919: NOT
25920: AND
25921: IFFALSE 25925
// exit ;
25923: GO 25933
// result := true ;
25925: LD_ADDR_VAR 0 6
25929: PUSH
25930: LD_INT 1
25932: ST_TO_ADDR
// end ;
25933: LD_VAR 0 6
25937: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25938: LD_INT 0
25940: PPUSH
25941: PPUSH
25942: PPUSH
25943: PPUSH
25944: PPUSH
25945: PPUSH
25946: PPUSH
25947: PPUSH
25948: PPUSH
25949: PPUSH
25950: PPUSH
25951: PPUSH
25952: PPUSH
25953: PPUSH
25954: PPUSH
25955: PPUSH
25956: PPUSH
25957: PPUSH
25958: PPUSH
25959: PPUSH
25960: PPUSH
25961: PPUSH
25962: PPUSH
25963: PPUSH
25964: PPUSH
25965: PPUSH
25966: PPUSH
25967: PPUSH
25968: PPUSH
25969: PPUSH
25970: PPUSH
25971: PPUSH
25972: PPUSH
25973: PPUSH
25974: PPUSH
25975: PPUSH
25976: PPUSH
25977: PPUSH
25978: PPUSH
25979: PPUSH
25980: PPUSH
25981: PPUSH
25982: PPUSH
25983: PPUSH
25984: PPUSH
25985: PPUSH
25986: PPUSH
25987: PPUSH
25988: PPUSH
25989: PPUSH
25990: PPUSH
25991: PPUSH
25992: PPUSH
25993: PPUSH
25994: PPUSH
25995: PPUSH
25996: PPUSH
25997: PPUSH
// result = [ ] ;
25998: LD_ADDR_VAR 0 7
26002: PUSH
26003: EMPTY
26004: ST_TO_ADDR
// temp_list = [ ] ;
26005: LD_ADDR_VAR 0 9
26009: PUSH
26010: EMPTY
26011: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26012: LD_VAR 0 4
26016: PUSH
26017: LD_INT 0
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: LD_INT 2
26025: PUSH
26026: LD_INT 3
26028: PUSH
26029: LD_INT 4
26031: PUSH
26032: LD_INT 5
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: IN
26043: NOT
26044: IFTRUE 26087
26046: PUSH
26047: LD_VAR 0 1
26051: PUSH
26052: LD_INT 0
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: IN
26062: IFFALSE 26086
26064: PUSH
26065: LD_VAR 0 5
26069: PUSH
26070: LD_INT 1
26072: PUSH
26073: LD_INT 2
26075: PUSH
26076: LD_INT 3
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: LIST
26083: IN
26084: NOT
26085: AND
26086: OR
26087: IFFALSE 26091
// exit ;
26089: GO 44490
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26091: LD_VAR 0 1
26095: PUSH
26096: LD_INT 6
26098: PUSH
26099: LD_INT 7
26101: PUSH
26102: LD_INT 8
26104: PUSH
26105: LD_INT 13
26107: PUSH
26108: LD_INT 12
26110: PUSH
26111: LD_INT 15
26113: PUSH
26114: LD_INT 11
26116: PUSH
26117: LD_INT 14
26119: PUSH
26120: LD_INT 10
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: IN
26134: IFFALSE 26144
// btype = b_lab ;
26136: LD_ADDR_VAR 0 1
26140: PUSH
26141: LD_INT 6
26143: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26144: LD_VAR 0 6
26148: PUSH
26149: LD_INT 0
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: LD_INT 2
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: LIST
26162: IN
26163: NOT
26164: IFTRUE 26232
26166: PUSH
26167: LD_VAR 0 1
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: LD_INT 1
26177: PUSH
26178: LD_INT 2
26180: PUSH
26181: LD_INT 3
26183: PUSH
26184: LD_INT 6
26186: PUSH
26187: LD_INT 36
26189: PUSH
26190: LD_INT 4
26192: PUSH
26193: LD_INT 5
26195: PUSH
26196: LD_INT 31
26198: PUSH
26199: LD_INT 32
26201: PUSH
26202: LD_INT 33
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: IN
26218: NOT
26219: IFFALSE 26231
26221: PUSH
26222: LD_VAR 0 6
26226: PUSH
26227: LD_INT 1
26229: EQUAL
26230: AND
26231: OR
26232: IFTRUE 26264
26234: PUSH
26235: LD_VAR 0 1
26239: PUSH
26240: LD_INT 2
26242: PUSH
26243: LD_INT 3
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: IN
26250: NOT
26251: IFFALSE 26263
26253: PUSH
26254: LD_VAR 0 6
26258: PUSH
26259: LD_INT 2
26261: EQUAL
26262: AND
26263: OR
26264: IFFALSE 26274
// mode = 0 ;
26266: LD_ADDR_VAR 0 6
26270: PUSH
26271: LD_INT 0
26273: ST_TO_ADDR
// case mode of 0 :
26274: LD_VAR 0 6
26278: PUSH
26279: LD_INT 0
26281: DOUBLE
26282: EQUAL
26283: IFTRUE 26287
26285: GO 37740
26287: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26288: LD_ADDR_VAR 0 11
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 0
26305: PUSH
26306: LD_INT 1
26308: NEG
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 1
26316: PUSH
26317: LD_INT 0
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 1
26326: PUSH
26327: LD_INT 1
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 0
26336: PUSH
26337: LD_INT 1
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 1
26346: NEG
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 1
26357: NEG
26358: PUSH
26359: LD_INT 1
26361: NEG
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 1
26369: NEG
26370: PUSH
26371: LD_INT 2
26373: NEG
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: LD_INT 2
26384: NEG
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 1
26392: PUSH
26393: LD_INT 1
26395: NEG
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 1
26403: PUSH
26404: LD_INT 2
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: LD_INT 2
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 1
26423: NEG
26424: PUSH
26425: LD_INT 1
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 1
26434: PUSH
26435: LD_INT 3
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 0
26444: PUSH
26445: LD_INT 3
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 1
26454: NEG
26455: PUSH
26456: LD_INT 2
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26481: LD_ADDR_VAR 0 12
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: LD_INT 1
26501: NEG
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 1
26539: NEG
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 1
26550: NEG
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 1
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 2
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 2
26583: PUSH
26584: LD_INT 1
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 2
26604: NEG
26605: PUSH
26606: LD_INT 0
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 2
26615: NEG
26616: PUSH
26617: LD_INT 1
26619: NEG
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 2
26627: NEG
26628: PUSH
26629: LD_INT 1
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 3
26638: NEG
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 3
26649: NEG
26650: PUSH
26651: LD_INT 1
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26677: LD_ADDR_VAR 0 13
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: LD_INT 0
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 1
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: NEG
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 1
26746: NEG
26747: PUSH
26748: LD_INT 1
26750: NEG
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 1
26758: NEG
26759: PUSH
26760: LD_INT 2
26762: NEG
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 2
26770: PUSH
26771: LD_INT 1
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 2
26780: PUSH
26781: LD_INT 2
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 1
26790: PUSH
26791: LD_INT 2
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 2
26800: NEG
26801: PUSH
26802: LD_INT 1
26804: NEG
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 2
26812: NEG
26813: PUSH
26814: LD_INT 2
26816: NEG
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 2
26824: NEG
26825: PUSH
26826: LD_INT 3
26828: NEG
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 3
26836: NEG
26837: PUSH
26838: LD_INT 2
26840: NEG
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 3
26848: NEG
26849: PUSH
26850: LD_INT 3
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26876: LD_ADDR_VAR 0 14
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: LD_INT 1
26896: NEG
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 1
26934: NEG
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 1
26945: NEG
26946: PUSH
26947: LD_INT 1
26949: NEG
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 1
26957: NEG
26958: PUSH
26959: LD_INT 2
26961: NEG
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: LD_INT 2
26972: NEG
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 1
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: PUSH
26992: LD_INT 2
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: LD_INT 2
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 1
27011: NEG
27012: PUSH
27013: LD_INT 1
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 1
27022: NEG
27023: PUSH
27024: LD_INT 3
27026: NEG
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: LD_INT 3
27037: NEG
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 1
27045: PUSH
27046: LD_INT 2
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27072: LD_ADDR_VAR 0 15
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 0
27089: PUSH
27090: LD_INT 1
27092: NEG
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: LD_INT 0
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 1
27110: PUSH
27111: LD_INT 1
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 0
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 1
27130: NEG
27131: PUSH
27132: LD_INT 0
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 1
27141: NEG
27142: PUSH
27143: LD_INT 1
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: LD_INT 1
27156: NEG
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 2
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 2
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 1
27184: NEG
27185: PUSH
27186: LD_INT 1
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: NEG
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 2
27206: NEG
27207: PUSH
27208: LD_INT 1
27210: NEG
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 2
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 3
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 3
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27265: LD_ADDR_VAR 0 16
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 0
27282: PUSH
27283: LD_INT 1
27285: NEG
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 1
27293: PUSH
27294: LD_INT 0
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 0
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 1
27323: NEG
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 1
27334: NEG
27335: PUSH
27336: LD_INT 1
27338: NEG
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: LD_INT 2
27350: NEG
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 2
27358: PUSH
27359: LD_INT 1
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 2
27368: PUSH
27369: LD_INT 2
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: LD_INT 2
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 2
27388: NEG
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 2
27400: NEG
27401: PUSH
27402: LD_INT 2
27404: NEG
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 3
27412: PUSH
27413: LD_INT 2
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 3
27422: PUSH
27423: LD_INT 3
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 2
27432: PUSH
27433: LD_INT 3
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27458: LD_ADDR_VAR 0 17
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: LD_INT 1
27478: NEG
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: LD_INT 0
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 1
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: LD_INT 1
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 1
27516: NEG
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: NEG
27528: PUSH
27529: LD_INT 1
27531: NEG
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: LD_INT 2
27543: NEG
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 0
27551: PUSH
27552: LD_INT 2
27554: NEG
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 1
27562: PUSH
27563: LD_INT 1
27565: NEG
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: LD_INT 0
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 2
27583: PUSH
27584: LD_INT 1
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 2
27593: PUSH
27594: LD_INT 2
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: LD_INT 2
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 0
27613: PUSH
27614: LD_INT 2
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 1
27623: NEG
27624: PUSH
27625: LD_INT 1
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 2
27634: NEG
27635: PUSH
27636: LD_INT 0
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 2
27645: NEG
27646: PUSH
27647: LD_INT 1
27649: NEG
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 2
27657: NEG
27658: PUSH
27659: LD_INT 2
27661: NEG
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27688: LD_ADDR_VAR 0 18
27692: PUSH
27693: LD_INT 0
27695: PUSH
27696: LD_INT 0
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: LD_INT 1
27708: NEG
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: LD_INT 0
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 1
27726: PUSH
27727: LD_INT 1
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 1
27746: NEG
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 1
27757: NEG
27758: PUSH
27759: LD_INT 1
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 1
27769: NEG
27770: PUSH
27771: LD_INT 2
27773: NEG
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: LD_INT 2
27784: NEG
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 1
27792: PUSH
27793: LD_INT 1
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 2
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 2
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 2
27823: PUSH
27824: LD_INT 2
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 0
27843: PUSH
27844: LD_INT 2
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 1
27853: NEG
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 2
27864: NEG
27865: PUSH
27866: LD_INT 0
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 2
27875: NEG
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 2
27887: NEG
27888: PUSH
27889: LD_INT 2
27891: NEG
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27918: LD_ADDR_VAR 0 19
27922: PUSH
27923: LD_INT 0
27925: PUSH
27926: LD_INT 0
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: LD_INT 1
27938: NEG
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 1
27956: PUSH
27957: LD_INT 1
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: LD_INT 1
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 1
27976: NEG
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 1
27987: NEG
27988: PUSH
27989: LD_INT 1
27991: NEG
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 1
27999: NEG
28000: PUSH
28001: LD_INT 2
28003: NEG
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 0
28011: PUSH
28012: LD_INT 2
28014: NEG
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 1
28022: PUSH
28023: LD_INT 1
28025: NEG
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 2
28033: PUSH
28034: LD_INT 0
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 2
28043: PUSH
28044: LD_INT 1
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 2
28053: PUSH
28054: LD_INT 2
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 1
28063: PUSH
28064: LD_INT 2
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 0
28073: PUSH
28074: LD_INT 2
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 1
28083: NEG
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 2
28094: NEG
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 2
28105: NEG
28106: PUSH
28107: LD_INT 1
28109: NEG
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 2
28117: NEG
28118: PUSH
28119: LD_INT 2
28121: NEG
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28148: LD_ADDR_VAR 0 20
28152: PUSH
28153: LD_INT 0
28155: PUSH
28156: LD_INT 0
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: LD_INT 1
28168: NEG
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 1
28176: PUSH
28177: LD_INT 0
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 1
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 0
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 1
28206: NEG
28207: PUSH
28208: LD_INT 0
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 1
28217: NEG
28218: PUSH
28219: LD_INT 1
28221: NEG
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 1
28229: NEG
28230: PUSH
28231: LD_INT 2
28233: NEG
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 0
28241: PUSH
28242: LD_INT 2
28244: NEG
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 1
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 2
28263: PUSH
28264: LD_INT 0
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 2
28273: PUSH
28274: LD_INT 1
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 2
28283: PUSH
28284: LD_INT 2
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: LD_INT 2
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: LD_INT 2
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 1
28313: NEG
28314: PUSH
28315: LD_INT 1
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 2
28324: NEG
28325: PUSH
28326: LD_INT 0
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 2
28335: NEG
28336: PUSH
28337: LD_INT 1
28339: NEG
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 2
28347: NEG
28348: PUSH
28349: LD_INT 2
28351: NEG
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28378: LD_ADDR_VAR 0 21
28382: PUSH
28383: LD_INT 0
28385: PUSH
28386: LD_INT 0
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: LD_INT 1
28398: NEG
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 1
28406: PUSH
28407: LD_INT 0
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 1
28416: PUSH
28417: LD_INT 1
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 1
28436: NEG
28437: PUSH
28438: LD_INT 0
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 1
28447: NEG
28448: PUSH
28449: LD_INT 1
28451: NEG
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: LD_INT 2
28463: NEG
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 0
28471: PUSH
28472: LD_INT 2
28474: NEG
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 1
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 2
28493: PUSH
28494: LD_INT 0
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 2
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 2
28513: PUSH
28514: LD_INT 2
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: LD_INT 2
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 0
28533: PUSH
28534: LD_INT 2
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: NEG
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 2
28554: NEG
28555: PUSH
28556: LD_INT 0
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 2
28565: NEG
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 2
28577: NEG
28578: PUSH
28579: LD_INT 2
28581: NEG
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28608: LD_ADDR_VAR 0 22
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: LD_INT 0
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: LD_INT 1
28628: NEG
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 1
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: LD_INT 1
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 1
28666: NEG
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: NEG
28678: PUSH
28679: LD_INT 1
28681: NEG
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 1
28689: NEG
28690: PUSH
28691: LD_INT 2
28693: NEG
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 0
28701: PUSH
28702: LD_INT 2
28704: NEG
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 1
28712: PUSH
28713: LD_INT 1
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 2
28723: PUSH
28724: LD_INT 0
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 2
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 2
28743: PUSH
28744: LD_INT 2
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: LD_INT 2
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 0
28763: PUSH
28764: LD_INT 2
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 1
28773: NEG
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 2
28784: NEG
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 2
28795: NEG
28796: PUSH
28797: LD_INT 1
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 2
28807: NEG
28808: PUSH
28809: LD_INT 2
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28838: LD_ADDR_VAR 0 23
28842: PUSH
28843: LD_INT 0
28845: PUSH
28846: LD_INT 0
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 0
28855: PUSH
28856: LD_INT 1
28858: NEG
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: LD_INT 0
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 1
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 0
28886: PUSH
28887: LD_INT 1
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 1
28896: NEG
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 1
28907: NEG
28908: PUSH
28909: LD_INT 1
28911: NEG
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: LD_INT 2
28923: NEG
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: LD_INT 2
28934: NEG
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: LD_INT 1
28945: NEG
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 2
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 2
28963: PUSH
28964: LD_INT 1
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 2
28973: PUSH
28974: LD_INT 2
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: LD_INT 2
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: LD_INT 2
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: LD_INT 1
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 2
29014: NEG
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 2
29025: NEG
29026: PUSH
29027: LD_INT 1
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 2
29037: NEG
29038: PUSH
29039: LD_INT 2
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 2
29049: NEG
29050: PUSH
29051: LD_INT 3
29053: NEG
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: LD_INT 3
29065: NEG
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 1
29073: PUSH
29074: LD_INT 2
29076: NEG
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 2
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29118: LD_ADDR_VAR 0 24
29122: PUSH
29123: LD_INT 0
29125: PUSH
29126: LD_INT 0
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 0
29135: PUSH
29136: LD_INT 1
29138: NEG
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 1
29146: PUSH
29147: LD_INT 0
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 1
29156: PUSH
29157: LD_INT 1
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 0
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 1
29176: NEG
29177: PUSH
29178: LD_INT 0
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: LD_INT 1
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 1
29199: NEG
29200: PUSH
29201: LD_INT 2
29203: NEG
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 0
29211: PUSH
29212: LD_INT 2
29214: NEG
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 2
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 2
29243: PUSH
29244: LD_INT 1
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 2
29253: PUSH
29254: LD_INT 2
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 1
29263: PUSH
29264: LD_INT 2
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 0
29273: PUSH
29274: LD_INT 2
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 1
29283: NEG
29284: PUSH
29285: LD_INT 1
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 2
29294: NEG
29295: PUSH
29296: LD_INT 0
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 2
29305: NEG
29306: PUSH
29307: LD_INT 1
29309: NEG
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 2
29317: NEG
29318: PUSH
29319: LD_INT 2
29321: NEG
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: LD_INT 2
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 2
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 3
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 3
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29394: LD_ADDR_VAR 0 25
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: LD_INT 0
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: LD_INT 1
29414: NEG
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 1
29452: NEG
29453: PUSH
29454: LD_INT 0
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: LD_INT 1
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 1
29475: NEG
29476: PUSH
29477: LD_INT 2
29479: NEG
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 0
29487: PUSH
29488: LD_INT 2
29490: NEG
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 1
29498: PUSH
29499: LD_INT 1
29501: NEG
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: LD_INT 2
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: LD_INT 2
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 0
29549: PUSH
29550: LD_INT 2
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 1
29559: NEG
29560: PUSH
29561: LD_INT 1
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 2
29570: NEG
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 2
29581: NEG
29582: PUSH
29583: LD_INT 1
29585: NEG
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 2
29593: NEG
29594: PUSH
29595: LD_INT 2
29597: NEG
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 3
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 3
29615: PUSH
29616: LD_INT 2
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 2
29625: PUSH
29626: LD_INT 3
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: LD_INT 3
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29668: LD_ADDR_VAR 0 26
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 0
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 1
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 1
29726: NEG
29727: PUSH
29728: LD_INT 0
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 1
29737: NEG
29738: PUSH
29739: LD_INT 1
29741: NEG
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 1
29749: NEG
29750: PUSH
29751: LD_INT 2
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 0
29761: PUSH
29762: LD_INT 2
29764: NEG
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: LD_INT 1
29775: NEG
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 2
29783: PUSH
29784: LD_INT 0
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 2
29793: PUSH
29794: LD_INT 1
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 0
29823: PUSH
29824: LD_INT 2
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: LD_INT 1
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 2
29844: NEG
29845: PUSH
29846: LD_INT 0
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 2
29855: NEG
29856: PUSH
29857: LD_INT 1
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 2
29867: NEG
29868: PUSH
29869: LD_INT 2
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 2
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 1
29899: NEG
29900: PUSH
29901: LD_INT 2
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 2
29910: NEG
29911: PUSH
29912: LD_INT 1
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29944: LD_ADDR_VAR 0 27
29948: PUSH
29949: LD_INT 0
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 0
29961: PUSH
29962: LD_INT 1
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: PUSH
29973: LD_INT 0
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 1
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 0
29992: PUSH
29993: LD_INT 1
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 1
30002: NEG
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 1
30013: NEG
30014: PUSH
30015: LD_INT 1
30017: NEG
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 1
30025: NEG
30026: PUSH
30027: LD_INT 2
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: LD_INT 2
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: LD_INT 1
30051: NEG
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 2
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 2
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 2
30079: PUSH
30080: LD_INT 2
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: LD_INT 2
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: LD_INT 2
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 1
30109: NEG
30110: PUSH
30111: LD_INT 1
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 2
30120: NEG
30121: PUSH
30122: LD_INT 0
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 2
30131: NEG
30132: PUSH
30133: LD_INT 1
30135: NEG
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 2
30143: NEG
30144: PUSH
30145: LD_INT 2
30147: NEG
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 1
30155: NEG
30156: PUSH
30157: LD_INT 2
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 2
30166: NEG
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 3
30177: NEG
30178: PUSH
30179: LD_INT 1
30181: NEG
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 3
30189: NEG
30190: PUSH
30191: LD_INT 2
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30224: LD_ADDR_VAR 0 28
30228: PUSH
30229: LD_INT 0
30231: PUSH
30232: LD_INT 0
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 1
30252: PUSH
30253: LD_INT 0
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 1
30262: PUSH
30263: LD_INT 1
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 0
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 1
30282: NEG
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 1
30293: NEG
30294: PUSH
30295: LD_INT 1
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 1
30305: NEG
30306: PUSH
30307: LD_INT 2
30309: NEG
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 0
30317: PUSH
30318: LD_INT 2
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: LD_INT 1
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 2
30339: PUSH
30340: LD_INT 0
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 2
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: LD_INT 2
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 1
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 0
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 1
30389: NEG
30390: PUSH
30391: LD_INT 1
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 2
30400: NEG
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 2
30411: NEG
30412: PUSH
30413: LD_INT 1
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 2
30423: NEG
30424: PUSH
30425: LD_INT 2
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 2
30435: NEG
30436: PUSH
30437: LD_INT 3
30439: NEG
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 1
30447: NEG
30448: PUSH
30449: LD_INT 3
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 3
30459: NEG
30460: PUSH
30461: LD_INT 1
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 3
30471: NEG
30472: PUSH
30473: LD_INT 2
30475: NEG
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30506: LD_ADDR_VAR 0 29
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: LD_INT 0
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: LD_INT 1
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 1
30534: PUSH
30535: LD_INT 0
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 1
30544: PUSH
30545: LD_INT 1
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 0
30554: PUSH
30555: LD_INT 1
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: LD_INT 0
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 1
30575: NEG
30576: PUSH
30577: LD_INT 1
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 1
30587: NEG
30588: PUSH
30589: LD_INT 2
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: LD_INT 2
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 1
30610: PUSH
30611: LD_INT 1
30613: NEG
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 2
30621: PUSH
30622: LD_INT 0
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 2
30631: PUSH
30632: LD_INT 1
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: PUSH
30642: LD_INT 2
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 0
30651: PUSH
30652: LD_INT 2
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: NEG
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 2
30672: NEG
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 2
30684: NEG
30685: PUSH
30686: LD_INT 2
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 2
30696: NEG
30697: PUSH
30698: LD_INT 3
30700: NEG
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 2
30708: PUSH
30709: LD_INT 1
30711: NEG
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 3
30719: PUSH
30720: LD_INT 1
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 1
30729: PUSH
30730: LD_INT 3
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: PUSH
30741: LD_INT 2
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 3
30750: NEG
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30785: LD_ADDR_VAR 0 30
30789: PUSH
30790: LD_INT 0
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 0
30802: PUSH
30803: LD_INT 1
30805: NEG
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 1
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 1
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 0
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 1
30843: NEG
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 1
30854: NEG
30855: PUSH
30856: LD_INT 1
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 1
30866: NEG
30867: PUSH
30868: LD_INT 2
30870: NEG
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 0
30878: PUSH
30879: LD_INT 2
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: LD_INT 1
30892: NEG
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 2
30900: PUSH
30901: LD_INT 0
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 2
30920: PUSH
30921: LD_INT 2
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 1
30930: PUSH
30931: LD_INT 2
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 1
30940: NEG
30941: PUSH
30942: LD_INT 1
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 2
30951: NEG
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 2
30962: NEG
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: LD_INT 3
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 1
30986: PUSH
30987: LD_INT 2
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 3
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 2
31007: PUSH
31008: LD_INT 3
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 2
31017: NEG
31018: PUSH
31019: LD_INT 1
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 3
31028: NEG
31029: PUSH
31030: LD_INT 1
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31063: LD_ADDR_VAR 0 31
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: LD_INT 1
31083: NEG
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 1
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: LD_INT 0
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: NEG
31133: PUSH
31134: LD_INT 1
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: NEG
31145: PUSH
31146: LD_INT 2
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 1
31156: PUSH
31157: LD_INT 1
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 2
31167: PUSH
31168: LD_INT 0
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 2
31177: PUSH
31178: LD_INT 1
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 2
31187: PUSH
31188: LD_INT 2
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: LD_INT 2
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: LD_INT 2
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 1
31217: NEG
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 2
31228: NEG
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 2
31240: NEG
31241: PUSH
31242: LD_INT 2
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 2
31252: NEG
31253: PUSH
31254: LD_INT 3
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 2
31264: PUSH
31265: LD_INT 1
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 3
31275: PUSH
31276: LD_INT 1
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 1
31285: PUSH
31286: LD_INT 3
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: LD_INT 2
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 3
31306: NEG
31307: PUSH
31308: LD_INT 2
31310: NEG
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31341: LD_ADDR_VAR 0 32
31345: PUSH
31346: LD_INT 0
31348: PUSH
31349: LD_INT 0
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: LD_INT 1
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: LD_INT 1
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 1
31399: NEG
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 1
31422: NEG
31423: PUSH
31424: LD_INT 2
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 0
31434: PUSH
31435: LD_INT 2
31437: NEG
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 1
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 2
31456: PUSH
31457: LD_INT 1
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: LD_INT 2
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: LD_INT 2
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 0
31486: PUSH
31487: LD_INT 2
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 2
31507: NEG
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: LD_INT 1
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: NEG
31531: PUSH
31532: LD_INT 3
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 1
31542: PUSH
31543: LD_INT 2
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 3
31553: PUSH
31554: LD_INT 2
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 2
31563: PUSH
31564: LD_INT 3
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 2
31573: NEG
31574: PUSH
31575: LD_INT 1
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 3
31584: NEG
31585: PUSH
31586: LD_INT 1
31588: NEG
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31619: LD_ADDR_VAR 0 33
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: LD_INT 1
31639: NEG
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: PUSH
31648: LD_INT 0
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 0
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 1
31677: NEG
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: LD_INT 2
31704: NEG
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 1
31712: PUSH
31713: LD_INT 1
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 2
31723: PUSH
31724: LD_INT 0
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 2
31733: PUSH
31734: LD_INT 1
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: LD_INT 2
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: LD_INT 2
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 1
31763: NEG
31764: PUSH
31765: LD_INT 1
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 2
31774: NEG
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 2
31785: NEG
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 2
31797: NEG
31798: PUSH
31799: LD_INT 2
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 2
31809: NEG
31810: PUSH
31811: LD_INT 3
31813: NEG
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 2
31821: PUSH
31822: LD_INT 1
31824: NEG
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 3
31832: PUSH
31833: LD_INT 1
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: LD_INT 3
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: LD_INT 2
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 3
31863: NEG
31864: PUSH
31865: LD_INT 2
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31898: LD_ADDR_VAR 0 34
31902: PUSH
31903: LD_INT 0
31905: PUSH
31906: LD_INT 0
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: LD_INT 1
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 1
31926: PUSH
31927: LD_INT 0
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 1
31936: PUSH
31937: LD_INT 1
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 0
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 1
31956: NEG
31957: PUSH
31958: LD_INT 0
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 1
31967: NEG
31968: PUSH
31969: LD_INT 1
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 1
31979: NEG
31980: PUSH
31981: LD_INT 2
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: LD_INT 2
31994: NEG
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: PUSH
32003: LD_INT 1
32005: NEG
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 2
32013: PUSH
32014: LD_INT 1
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 2
32023: PUSH
32024: LD_INT 2
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: PUSH
32034: LD_INT 2
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: NEG
32044: PUSH
32045: LD_INT 1
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 2
32065: NEG
32066: PUSH
32067: LD_INT 1
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 2
32077: NEG
32078: PUSH
32079: LD_INT 2
32081: NEG
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 1
32089: NEG
32090: PUSH
32091: LD_INT 3
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 1
32101: PUSH
32102: LD_INT 2
32104: NEG
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 3
32112: PUSH
32113: LD_INT 2
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 2
32122: PUSH
32123: LD_INT 3
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 2
32132: NEG
32133: PUSH
32134: LD_INT 1
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 3
32143: NEG
32144: PUSH
32145: LD_INT 1
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32178: LD_ADDR_VAR 0 35
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: LD_INT 1
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: LD_INT 1
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 1
32247: NEG
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 2
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 2
32269: NEG
32270: PUSH
32271: LD_INT 1
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32290: LD_ADDR_VAR 0 36
32294: PUSH
32295: LD_INT 0
32297: PUSH
32298: LD_INT 0
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: LD_INT 1
32310: NEG
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 1
32318: PUSH
32319: LD_INT 0
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: LD_INT 1
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 1
32348: NEG
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: LD_INT 1
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 1
32371: NEG
32372: PUSH
32373: LD_INT 2
32375: NEG
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: LD_INT 2
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32402: LD_ADDR_VAR 0 37
32406: PUSH
32407: LD_INT 0
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 1
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: LD_INT 1
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 0
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: NEG
32461: PUSH
32462: LD_INT 0
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: LD_INT 1
32475: NEG
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 1
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 1
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32514: LD_ADDR_VAR 0 38
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: LD_INT 1
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 1
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 1
32583: NEG
32584: PUSH
32585: LD_INT 1
32587: NEG
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 2
32595: PUSH
32596: LD_INT 1
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 2
32605: NEG
32606: PUSH
32607: LD_INT 1
32609: NEG
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32626: LD_ADDR_VAR 0 39
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: LD_INT 0
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: LD_INT 0
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: LD_INT 1
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: NEG
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 1
32695: NEG
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 1
32707: NEG
32708: PUSH
32709: LD_INT 2
32711: NEG
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: PUSH
32720: LD_INT 2
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32738: LD_ADDR_VAR 0 40
32742: PUSH
32743: LD_INT 0
32745: PUSH
32746: LD_INT 0
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 1
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: LD_INT 1
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: LD_INT 1
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 1
32796: NEG
32797: PUSH
32798: LD_INT 0
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: LD_INT 1
32811: NEG
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: LD_INT 1
32822: NEG
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 1
32830: NEG
32831: PUSH
32832: LD_INT 1
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32850: LD_ADDR_VAR 0 41
32854: PUSH
32855: LD_INT 0
32857: PUSH
32858: LD_INT 0
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: LD_INT 1
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 1
32888: PUSH
32889: LD_INT 1
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 1
32919: NEG
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: LD_INT 2
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: LD_INT 1
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: LD_INT 0
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 2
32964: PUSH
32965: LD_INT 1
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: LD_INT 2
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 1
32984: PUSH
32985: LD_INT 2
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: NEG
32995: PUSH
32996: LD_INT 1
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 2
33005: NEG
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 2
33016: NEG
33017: PUSH
33018: LD_INT 1
33020: NEG
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 2
33028: NEG
33029: PUSH
33030: LD_INT 2
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: NEG
33041: PUSH
33042: LD_INT 3
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 2
33052: PUSH
33053: LD_INT 1
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 3
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 3
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 3
33083: PUSH
33084: LD_INT 2
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 3
33093: PUSH
33094: LD_INT 3
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: LD_INT 3
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 2
33113: NEG
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 3
33124: NEG
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 3
33135: NEG
33136: PUSH
33137: LD_INT 1
33139: NEG
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 3
33147: NEG
33148: PUSH
33149: LD_INT 2
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 3
33159: NEG
33160: PUSH
33161: LD_INT 3
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33200: LD_ADDR_VAR 0 42
33204: PUSH
33205: LD_INT 0
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 0
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 1
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 1
33238: PUSH
33239: LD_INT 1
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 0
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 1
33258: NEG
33259: PUSH
33260: LD_INT 0
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 1
33269: NEG
33270: PUSH
33271: LD_INT 1
33273: NEG
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: LD_INT 2
33285: NEG
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 0
33293: PUSH
33294: LD_INT 2
33296: NEG
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 1
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 2
33315: PUSH
33316: LD_INT 1
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 2
33325: PUSH
33326: LD_INT 2
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: LD_INT 2
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: LD_INT 2
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 1
33355: NEG
33356: PUSH
33357: LD_INT 1
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 2
33366: NEG
33367: PUSH
33368: LD_INT 1
33370: NEG
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 2
33378: NEG
33379: PUSH
33380: LD_INT 2
33382: NEG
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 2
33390: NEG
33391: PUSH
33392: LD_INT 3
33394: NEG
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 1
33402: NEG
33403: PUSH
33404: LD_INT 3
33406: NEG
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 0
33414: PUSH
33415: LD_INT 3
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 1
33425: PUSH
33426: LD_INT 2
33428: NEG
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 3
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 3
33446: PUSH
33447: LD_INT 3
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 2
33456: PUSH
33457: LD_INT 3
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: LD_INT 3
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: LD_INT 3
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: NEG
33487: PUSH
33488: LD_INT 2
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 3
33497: NEG
33498: PUSH
33499: LD_INT 2
33501: NEG
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 3
33509: NEG
33510: PUSH
33511: LD_INT 3
33513: NEG
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33550: LD_ADDR_VAR 0 43
33554: PUSH
33555: LD_INT 0
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: LD_INT 1
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 1
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: LD_INT 1
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: LD_INT 1
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 1
33608: NEG
33609: PUSH
33610: LD_INT 0
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 1
33619: NEG
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 1
33631: NEG
33632: PUSH
33633: LD_INT 2
33635: NEG
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: LD_INT 2
33646: NEG
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: LD_INT 1
33657: NEG
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 2
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 2
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 1
33685: PUSH
33686: LD_INT 2
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: LD_INT 2
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 2
33716: NEG
33717: PUSH
33718: LD_INT 0
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 2
33727: NEG
33728: PUSH
33729: LD_INT 1
33731: NEG
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PUSH
33741: LD_INT 3
33743: NEG
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 0
33751: PUSH
33752: LD_INT 3
33754: NEG
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 1
33762: PUSH
33763: LD_INT 2
33765: NEG
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 2
33773: PUSH
33774: LD_INT 1
33776: NEG
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 3
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 3
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 1
33804: PUSH
33805: LD_INT 3
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: LD_INT 3
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 1
33824: NEG
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 2
33835: NEG
33836: PUSH
33837: LD_INT 1
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 3
33846: NEG
33847: PUSH
33848: LD_INT 0
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 3
33857: NEG
33858: PUSH
33859: LD_INT 1
33861: NEG
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33898: LD_ADDR_VAR 0 44
33902: PUSH
33903: LD_INT 0
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 0
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 1
33926: PUSH
33927: LD_INT 0
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 1
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: LD_INT 1
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: NEG
33957: PUSH
33958: LD_INT 0
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: LD_INT 1
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 1
33991: PUSH
33992: LD_INT 1
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 2
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 2
34012: PUSH
34013: LD_INT 1
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 2
34022: PUSH
34023: LD_INT 2
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: PUSH
34033: LD_INT 2
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 2
34053: NEG
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 2
34064: NEG
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 2
34076: NEG
34077: PUSH
34078: LD_INT 2
34080: NEG
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: NEG
34089: PUSH
34090: LD_INT 3
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 2
34100: PUSH
34101: LD_INT 1
34103: NEG
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 3
34111: PUSH
34112: LD_INT 0
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 3
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 3
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 3
34141: PUSH
34142: LD_INT 3
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: LD_INT 3
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 2
34161: NEG
34162: PUSH
34163: LD_INT 1
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 3
34172: NEG
34173: PUSH
34174: LD_INT 0
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 3
34183: NEG
34184: PUSH
34185: LD_INT 1
34187: NEG
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 3
34195: NEG
34196: PUSH
34197: LD_INT 2
34199: NEG
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 3
34207: NEG
34208: PUSH
34209: LD_INT 3
34211: NEG
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34248: LD_ADDR_VAR 0 45
34252: PUSH
34253: LD_INT 0
34255: PUSH
34256: LD_INT 0
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: LD_INT 1
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: LD_INT 1
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 1
34329: NEG
34330: PUSH
34331: LD_INT 2
34333: NEG
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: LD_INT 2
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 2
34363: PUSH
34364: LD_INT 1
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 2
34373: PUSH
34374: LD_INT 2
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: LD_INT 2
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 0
34393: PUSH
34394: LD_INT 2
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 2
34414: NEG
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 2
34426: NEG
34427: PUSH
34428: LD_INT 2
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 2
34438: NEG
34439: PUSH
34440: LD_INT 3
34442: NEG
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 1
34450: NEG
34451: PUSH
34452: LD_INT 3
34454: NEG
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 0
34462: PUSH
34463: LD_INT 3
34465: NEG
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 1
34473: PUSH
34474: LD_INT 2
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 3
34484: PUSH
34485: LD_INT 2
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 3
34494: PUSH
34495: LD_INT 3
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 2
34504: PUSH
34505: LD_INT 3
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: LD_INT 3
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: LD_INT 3
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: PUSH
34536: LD_INT 2
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 3
34545: NEG
34546: PUSH
34547: LD_INT 2
34549: NEG
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 3
34557: NEG
34558: PUSH
34559: LD_INT 3
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34598: LD_ADDR_VAR 0 46
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: LD_INT 0
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 0
34615: PUSH
34616: LD_INT 1
34618: NEG
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 1
34626: PUSH
34627: LD_INT 0
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 1
34636: PUSH
34637: LD_INT 1
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: LD_INT 1
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 1
34656: NEG
34657: PUSH
34658: LD_INT 0
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: PUSH
34669: LD_INT 1
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 1
34679: NEG
34680: PUSH
34681: LD_INT 2
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: LD_INT 2
34694: NEG
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 1
34702: PUSH
34703: LD_INT 1
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 2
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 2
34723: PUSH
34724: LD_INT 1
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: PUSH
34734: LD_INT 2
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: LD_INT 2
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 2
34764: NEG
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 2
34775: NEG
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: LD_INT 3
34791: NEG
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 0
34799: PUSH
34800: LD_INT 3
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: LD_INT 2
34813: NEG
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 2
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 3
34832: PUSH
34833: LD_INT 0
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 3
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: LD_INT 3
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: LD_INT 3
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 1
34872: NEG
34873: PUSH
34874: LD_INT 2
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 2
34883: NEG
34884: PUSH
34885: LD_INT 1
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 3
34894: NEG
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 3
34905: NEG
34906: PUSH
34907: LD_INT 1
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34946: LD_ADDR_VAR 0 47
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 0
34963: PUSH
34964: LD_INT 1
34966: NEG
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: LD_INT 0
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 1
34984: PUSH
34985: LD_INT 1
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 0
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: NEG
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 1
35015: NEG
35016: PUSH
35017: LD_INT 1
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: LD_INT 2
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: LD_INT 2
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: PUSH
35051: LD_INT 1
35053: NEG
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: NEG
35062: PUSH
35063: LD_INT 1
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 2
35073: NEG
35074: PUSH
35075: LD_INT 2
35077: NEG
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35097: LD_ADDR_VAR 0 48
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 0
35114: PUSH
35115: LD_INT 1
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: LD_INT 1
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: NEG
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: LD_INT 1
35170: NEG
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 1
35178: NEG
35179: PUSH
35180: LD_INT 2
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: LD_INT 2
35193: NEG
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 1
35201: PUSH
35202: LD_INT 1
35204: NEG
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 2
35212: PUSH
35213: LD_INT 0
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: LD_INT 1
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35244: LD_ADDR_VAR 0 49
35248: PUSH
35249: LD_INT 0
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: LD_INT 0
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: LD_INT 1
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 1
35302: NEG
35303: PUSH
35304: LD_INT 0
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 1
35313: NEG
35314: PUSH
35315: LD_INT 1
35317: NEG
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: LD_INT 1
35328: NEG
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 2
35336: PUSH
35337: LD_INT 0
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 2
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 2
35356: PUSH
35357: LD_INT 2
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: LD_INT 2
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35388: LD_ADDR_VAR 0 50
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: LD_INT 1
35408: NEG
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: LD_INT 1
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: NEG
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: PUSH
35459: LD_INT 1
35461: NEG
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 2
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 1
35489: PUSH
35490: LD_INT 2
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: LD_INT 2
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: LD_INT 1
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35532: LD_ADDR_VAR 0 51
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: LD_INT 1
35552: NEG
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 1
35560: PUSH
35561: LD_INT 0
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: PUSH
35571: LD_INT 1
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: LD_INT 1
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: LD_INT 0
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: LD_INT 1
35605: NEG
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 1
35613: PUSH
35614: LD_INT 2
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: LD_INT 2
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 1
35633: NEG
35634: PUSH
35635: LD_INT 1
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 2
35644: NEG
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 2
35655: NEG
35656: PUSH
35657: LD_INT 1
35659: NEG
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35679: LD_ADDR_VAR 0 52
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 0
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 1
35707: PUSH
35708: LD_INT 0
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 1
35717: PUSH
35718: LD_INT 1
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 0
35727: PUSH
35728: LD_INT 1
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 1
35737: NEG
35738: PUSH
35739: LD_INT 0
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 1
35748: NEG
35749: PUSH
35750: LD_INT 1
35752: NEG
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 1
35760: NEG
35761: PUSH
35762: LD_INT 2
35764: NEG
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: LD_INT 1
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 2
35783: NEG
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 2
35794: NEG
35795: PUSH
35796: LD_INT 1
35798: NEG
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 2
35806: NEG
35807: PUSH
35808: LD_INT 2
35810: NEG
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35830: LD_ADDR_VAR 0 53
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 0
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 1
35858: PUSH
35859: LD_INT 0
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 1
35868: PUSH
35869: LD_INT 1
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: LD_INT 1
35903: NEG
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 1
35911: NEG
35912: PUSH
35913: LD_INT 2
35915: NEG
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: LD_INT 2
35926: NEG
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 2
35945: PUSH
35946: LD_INT 0
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 2
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 2
35965: PUSH
35966: LD_INT 2
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: LD_INT 2
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 0
35985: PUSH
35986: LD_INT 2
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: NEG
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 2
36006: NEG
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 2
36017: NEG
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: LD_INT 2
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36060: LD_ADDR_VAR 0 54
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 1
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 1
36098: PUSH
36099: LD_INT 1
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 1
36118: NEG
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 1
36129: NEG
36130: PUSH
36131: LD_INT 1
36133: NEG
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 1
36141: NEG
36142: PUSH
36143: LD_INT 2
36145: NEG
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: LD_INT 2
36156: NEG
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: LD_INT 1
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 2
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 2
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 2
36195: PUSH
36196: LD_INT 2
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: PUSH
36206: LD_INT 2
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: LD_INT 2
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: NEG
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 2
36236: NEG
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 2
36247: NEG
36248: PUSH
36249: LD_INT 1
36251: NEG
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 2
36259: NEG
36260: PUSH
36261: LD_INT 2
36263: NEG
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36290: LD_ADDR_VAR 0 55
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: LD_INT 0
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: LD_INT 1
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 1
36348: NEG
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 1
36359: NEG
36360: PUSH
36361: LD_INT 1
36363: NEG
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 1
36371: NEG
36372: PUSH
36373: LD_INT 2
36375: NEG
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: LD_INT 2
36386: NEG
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: LD_INT 1
36397: NEG
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 2
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 2
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 2
36425: PUSH
36426: LD_INT 2
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: LD_INT 2
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 0
36445: PUSH
36446: LD_INT 2
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 1
36455: NEG
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 2
36466: NEG
36467: PUSH
36468: LD_INT 0
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 2
36477: NEG
36478: PUSH
36479: LD_INT 1
36481: NEG
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 2
36489: NEG
36490: PUSH
36491: LD_INT 2
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36520: LD_ADDR_VAR 0 56
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 1
36548: PUSH
36549: LD_INT 0
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: LD_INT 1
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 1
36589: NEG
36590: PUSH
36591: LD_INT 1
36593: NEG
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 1
36601: NEG
36602: PUSH
36603: LD_INT 2
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 0
36613: PUSH
36614: LD_INT 2
36616: NEG
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 2
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 2
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 2
36655: PUSH
36656: LD_INT 2
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: LD_INT 2
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: LD_INT 2
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 1
36685: NEG
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 2
36696: NEG
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 2
36707: NEG
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 2
36719: NEG
36720: PUSH
36721: LD_INT 2
36723: NEG
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36750: LD_ADDR_VAR 0 57
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: LD_INT 1
36770: NEG
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 1
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: LD_INT 1
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 0
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: NEG
36820: PUSH
36821: LD_INT 1
36823: NEG
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 1
36831: NEG
36832: PUSH
36833: LD_INT 2
36835: NEG
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: LD_INT 2
36846: NEG
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: LD_INT 1
36857: NEG
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 2
36865: PUSH
36866: LD_INT 0
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 2
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 2
36885: PUSH
36886: LD_INT 2
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: LD_INT 2
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: LD_INT 2
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 1
36915: NEG
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 2
36926: NEG
36927: PUSH
36928: LD_INT 0
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 2
36937: NEG
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 2
36949: NEG
36950: PUSH
36951: LD_INT 2
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36980: LD_ADDR_VAR 0 58
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: LD_INT 1
37000: NEG
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 1
37018: PUSH
37019: LD_INT 1
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 1
37049: NEG
37050: PUSH
37051: LD_INT 1
37053: NEG
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 1
37061: NEG
37062: PUSH
37063: LD_INT 2
37065: NEG
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: LD_INT 2
37076: NEG
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 1
37084: PUSH
37085: LD_INT 1
37087: NEG
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 2
37095: PUSH
37096: LD_INT 0
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 2
37115: PUSH
37116: LD_INT 2
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: LD_INT 2
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 1
37145: NEG
37146: PUSH
37147: LD_INT 1
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 2
37156: NEG
37157: PUSH
37158: LD_INT 0
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 2
37167: NEG
37168: PUSH
37169: LD_INT 1
37171: NEG
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 2
37179: NEG
37180: PUSH
37181: LD_INT 2
37183: NEG
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37210: LD_ADDR_VAR 0 59
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 0
37227: PUSH
37228: LD_INT 1
37230: NEG
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 1
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 1
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 0
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 1
37268: NEG
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: NEG
37280: PUSH
37281: LD_INT 1
37283: NEG
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37298: LD_ADDR_VAR 0 60
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: LD_INT 0
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 0
37346: PUSH
37347: LD_INT 1
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37386: LD_ADDR_VAR 0 61
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: LD_INT 0
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: LD_INT 1
37406: NEG
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 1
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 0
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: LD_INT 0
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: LD_INT 1
37459: NEG
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37474: LD_ADDR_VAR 0 62
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 0
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 0
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: NEG
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 1
37543: NEG
37544: PUSH
37545: LD_INT 1
37547: NEG
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37562: LD_ADDR_VAR 0 63
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 1
37620: NEG
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: LD_INT 1
37635: NEG
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37650: LD_ADDR_VAR 0 64
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: LD_INT 0
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: ST_TO_ADDR
// end ; 1 :
37738: GO 43635
37740: LD_INT 1
37742: DOUBLE
37743: EQUAL
37744: IFTRUE 37748
37746: GO 40371
37748: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37749: LD_ADDR_VAR 0 11
37753: PUSH
37754: LD_INT 1
37756: NEG
37757: PUSH
37758: LD_INT 3
37760: NEG
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: LD_INT 3
37771: NEG
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: LD_INT 2
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: LIST
37792: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37793: LD_ADDR_VAR 0 12
37797: PUSH
37798: LD_INT 2
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 3
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 3
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: LIST
37833: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37834: LD_ADDR_VAR 0 13
37838: PUSH
37839: LD_INT 3
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 3
37851: PUSH
37852: LD_INT 3
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 2
37861: PUSH
37862: LD_INT 3
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: LIST
37873: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37874: LD_ADDR_VAR 0 14
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: LD_INT 3
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: LD_INT 3
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: LD_INT 2
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: LIST
37914: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37915: LD_ADDR_VAR 0 15
37919: PUSH
37920: LD_INT 2
37922: NEG
37923: PUSH
37924: LD_INT 1
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 3
37933: NEG
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 3
37944: NEG
37945: PUSH
37946: LD_INT 1
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: LIST
37958: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37959: LD_ADDR_VAR 0 16
37963: PUSH
37964: LD_INT 2
37966: NEG
37967: PUSH
37968: LD_INT 3
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 3
37978: NEG
37979: PUSH
37980: LD_INT 2
37982: NEG
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 3
37990: NEG
37991: PUSH
37992: LD_INT 3
37994: NEG
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: LIST
38004: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38005: LD_ADDR_VAR 0 17
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: LD_INT 3
38016: NEG
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 3
38027: NEG
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 1
38035: PUSH
38036: LD_INT 2
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: LIST
38048: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38049: LD_ADDR_VAR 0 18
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: LD_INT 1
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 3
38067: PUSH
38068: LD_INT 0
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 3
38077: PUSH
38078: LD_INT 1
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: LIST
38089: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38090: LD_ADDR_VAR 0 19
38094: PUSH
38095: LD_INT 3
38097: PUSH
38098: LD_INT 2
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 3
38107: PUSH
38108: LD_INT 3
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 2
38117: PUSH
38118: LD_INT 3
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38130: LD_ADDR_VAR 0 20
38134: PUSH
38135: LD_INT 1
38137: PUSH
38138: LD_INT 3
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: LD_INT 3
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 1
38157: NEG
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: LIST
38170: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38171: LD_ADDR_VAR 0 21
38175: PUSH
38176: LD_INT 2
38178: NEG
38179: PUSH
38180: LD_INT 1
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 3
38189: NEG
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 3
38200: NEG
38201: PUSH
38202: LD_INT 1
38204: NEG
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: LIST
38214: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38215: LD_ADDR_VAR 0 22
38219: PUSH
38220: LD_INT 2
38222: NEG
38223: PUSH
38224: LD_INT 3
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 3
38234: NEG
38235: PUSH
38236: LD_INT 2
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 3
38246: NEG
38247: PUSH
38248: LD_INT 3
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: LIST
38260: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38261: LD_ADDR_VAR 0 23
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: LD_INT 3
38271: NEG
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: LD_INT 4
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: LD_INT 3
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: LIST
38304: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38305: LD_ADDR_VAR 0 24
38309: PUSH
38310: LD_INT 3
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 3
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 4
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: LIST
38345: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38346: LD_ADDR_VAR 0 25
38350: PUSH
38351: LD_INT 3
38353: PUSH
38354: LD_INT 3
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 4
38363: PUSH
38364: LD_INT 3
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 3
38373: PUSH
38374: LD_INT 4
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: LIST
38385: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38386: LD_ADDR_VAR 0 26
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: LD_INT 3
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 1
38403: PUSH
38404: LD_INT 4
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: PUSH
38415: LD_INT 3
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: LIST
38426: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38427: LD_ADDR_VAR 0 27
38431: PUSH
38432: LD_INT 3
38434: NEG
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 3
38445: NEG
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 4
38456: NEG
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: LIST
38470: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38471: LD_ADDR_VAR 0 28
38475: PUSH
38476: LD_INT 3
38478: NEG
38479: PUSH
38480: LD_INT 3
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 3
38490: NEG
38491: PUSH
38492: LD_INT 4
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 4
38502: NEG
38503: PUSH
38504: LD_INT 3
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: LIST
38516: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38517: LD_ADDR_VAR 0 29
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: LD_INT 3
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: LD_INT 3
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: LD_INT 2
38550: NEG
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: LD_INT 4
38562: NEG
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: LD_INT 4
38573: NEG
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 1
38581: PUSH
38582: LD_INT 3
38584: NEG
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: LD_INT 5
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: LD_INT 5
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: LD_INT 4
38618: NEG
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: LD_INT 6
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 0
38638: PUSH
38639: LD_INT 6
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: LD_INT 5
38652: NEG
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38672: LD_ADDR_VAR 0 30
38676: PUSH
38677: LD_INT 2
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 3
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 3
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 3
38710: PUSH
38711: LD_INT 1
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 4
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 4
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 4
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 5
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 5
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 5
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 6
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 6
38793: PUSH
38794: LD_INT 1
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38815: LD_ADDR_VAR 0 31
38819: PUSH
38820: LD_INT 3
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 3
38832: PUSH
38833: LD_INT 3
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: LD_INT 3
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 4
38852: PUSH
38853: LD_INT 3
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 4
38862: PUSH
38863: LD_INT 4
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 3
38872: PUSH
38873: LD_INT 4
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 5
38882: PUSH
38883: LD_INT 4
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 5
38892: PUSH
38893: LD_INT 5
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 4
38902: PUSH
38903: LD_INT 5
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 6
38912: PUSH
38913: LD_INT 5
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 6
38922: PUSH
38923: LD_INT 6
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 5
38932: PUSH
38933: LD_INT 6
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38954: LD_ADDR_VAR 0 32
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: LD_INT 3
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: LD_INT 3
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: LD_INT 4
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: LD_INT 4
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 1
39012: NEG
39013: PUSH
39014: LD_INT 3
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 1
39023: PUSH
39024: LD_INT 5
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: LD_INT 5
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: NEG
39044: PUSH
39045: LD_INT 4
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 1
39054: PUSH
39055: LD_INT 6
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: LD_INT 6
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: LD_INT 5
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39097: LD_ADDR_VAR 0 33
39101: PUSH
39102: LD_INT 2
39104: NEG
39105: PUSH
39106: LD_INT 1
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 3
39115: NEG
39116: PUSH
39117: LD_INT 0
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 3
39126: NEG
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 3
39138: NEG
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 4
39149: NEG
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 4
39160: NEG
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 4
39172: NEG
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 5
39183: NEG
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 5
39194: NEG
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 5
39206: NEG
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 6
39217: NEG
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 6
39228: NEG
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39252: LD_ADDR_VAR 0 34
39256: PUSH
39257: LD_INT 2
39259: NEG
39260: PUSH
39261: LD_INT 3
39263: NEG
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 3
39271: NEG
39272: PUSH
39273: LD_INT 2
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 3
39283: NEG
39284: PUSH
39285: LD_INT 3
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 3
39295: NEG
39296: PUSH
39297: LD_INT 4
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 4
39307: NEG
39308: PUSH
39309: LD_INT 3
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 4
39319: NEG
39320: PUSH
39321: LD_INT 4
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 4
39331: NEG
39332: PUSH
39333: LD_INT 5
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 5
39343: NEG
39344: PUSH
39345: LD_INT 4
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 5
39355: NEG
39356: PUSH
39357: LD_INT 5
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 5
39367: NEG
39368: PUSH
39369: LD_INT 6
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 6
39379: NEG
39380: PUSH
39381: LD_INT 5
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 6
39391: NEG
39392: PUSH
39393: LD_INT 6
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39415: LD_ADDR_VAR 0 41
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: LD_INT 2
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: LD_INT 3
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 1
39445: PUSH
39446: LD_INT 2
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: LIST
39458: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39459: LD_ADDR_VAR 0 42
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: LD_INT 1
39479: NEG
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 3
39487: PUSH
39488: LD_INT 1
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39500: LD_ADDR_VAR 0 43
39504: PUSH
39505: LD_INT 2
39507: PUSH
39508: LD_INT 2
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 3
39517: PUSH
39518: LD_INT 2
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 2
39527: PUSH
39528: LD_INT 3
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: LIST
39539: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39540: LD_ADDR_VAR 0 44
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: LD_INT 2
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: LD_INT 3
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: LIST
39580: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39581: LD_ADDR_VAR 0 45
39585: PUSH
39586: LD_INT 2
39588: NEG
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 2
39599: NEG
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 3
39610: NEG
39611: PUSH
39612: LD_INT 1
39614: NEG
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: LIST
39624: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39625: LD_ADDR_VAR 0 46
39629: PUSH
39630: LD_INT 2
39632: NEG
39633: PUSH
39634: LD_INT 2
39636: NEG
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 2
39644: NEG
39645: PUSH
39646: LD_INT 3
39648: NEG
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 3
39656: NEG
39657: PUSH
39658: LD_INT 2
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: LIST
39670: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39671: LD_ADDR_VAR 0 47
39675: PUSH
39676: LD_INT 2
39678: NEG
39679: PUSH
39680: LD_INT 3
39682: NEG
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: LD_INT 3
39694: NEG
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39704: LD_ADDR_VAR 0 48
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: LD_INT 2
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39735: LD_ADDR_VAR 0 49
39739: PUSH
39740: LD_INT 3
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 3
39752: PUSH
39753: LD_INT 2
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39764: LD_ADDR_VAR 0 50
39768: PUSH
39769: LD_INT 2
39771: PUSH
39772: LD_INT 3
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: LD_INT 3
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39793: LD_ADDR_VAR 0 51
39797: PUSH
39798: LD_INT 1
39800: NEG
39801: PUSH
39802: LD_INT 2
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 2
39811: NEG
39812: PUSH
39813: LD_INT 1
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39824: LD_ADDR_VAR 0 52
39828: PUSH
39829: LD_INT 3
39831: NEG
39832: PUSH
39833: LD_INT 1
39835: NEG
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 3
39843: NEG
39844: PUSH
39845: LD_INT 2
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39857: LD_ADDR_VAR 0 53
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: LD_INT 3
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: LD_INT 3
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: LD_INT 2
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: LIST
39900: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39901: LD_ADDR_VAR 0 54
39905: PUSH
39906: LD_INT 2
39908: PUSH
39909: LD_INT 1
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 3
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 3
39929: PUSH
39930: LD_INT 1
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: LIST
39941: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39942: LD_ADDR_VAR 0 55
39946: PUSH
39947: LD_INT 3
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 3
39959: PUSH
39960: LD_INT 3
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: LD_INT 3
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: LIST
39981: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39982: LD_ADDR_VAR 0 56
39986: PUSH
39987: LD_INT 1
39989: PUSH
39990: LD_INT 3
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 3
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: NEG
40010: PUSH
40011: LD_INT 2
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: LIST
40022: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40023: LD_ADDR_VAR 0 57
40027: PUSH
40028: LD_INT 2
40030: NEG
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 3
40041: NEG
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 3
40052: NEG
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: LIST
40066: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40067: LD_ADDR_VAR 0 58
40071: PUSH
40072: LD_INT 2
40074: NEG
40075: PUSH
40076: LD_INT 3
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 3
40086: NEG
40087: PUSH
40088: LD_INT 2
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 3
40098: NEG
40099: PUSH
40100: LD_INT 3
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: LIST
40112: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40113: LD_ADDR_VAR 0 59
40117: PUSH
40118: LD_INT 1
40120: NEG
40121: PUSH
40122: LD_INT 2
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 2
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: LIST
40156: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40157: LD_ADDR_VAR 0 60
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: LIST
40197: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40198: LD_ADDR_VAR 0 61
40202: PUSH
40203: LD_INT 2
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 2
40215: PUSH
40216: LD_INT 2
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: LD_INT 2
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: LIST
40237: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40238: LD_ADDR_VAR 0 62
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 2
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: LIST
40278: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40279: LD_ADDR_VAR 0 63
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: LD_INT 1
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 2
40297: NEG
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 2
40308: NEG
40309: PUSH
40310: LD_INT 1
40312: NEG
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: LIST
40322: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40323: LD_ADDR_VAR 0 64
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: LD_INT 1
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 2
40354: NEG
40355: PUSH
40356: LD_INT 2
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: LIST
40368: ST_TO_ADDR
// end ; 2 :
40369: GO 43635
40371: LD_INT 2
40373: DOUBLE
40374: EQUAL
40375: IFTRUE 40379
40377: GO 43634
40379: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40380: LD_ADDR_VAR 0 29
40384: PUSH
40385: LD_INT 4
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 4
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 5
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 5
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 4
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 3
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 3
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 3
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 5
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 3
40480: PUSH
40481: LD_INT 3
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 3
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 4
40500: PUSH
40501: LD_INT 3
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 4
40510: PUSH
40511: LD_INT 4
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 3
40520: PUSH
40521: LD_INT 4
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 2
40530: PUSH
40531: LD_INT 3
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 2
40540: PUSH
40541: LD_INT 2
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 4
40550: PUSH
40551: LD_INT 2
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 2
40560: PUSH
40561: LD_INT 4
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: LD_INT 4
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: LD_INT 3
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: LD_INT 4
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: LD_INT 5
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 5
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: LD_INT 4
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: PUSH
40633: LD_INT 3
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 2
40642: PUSH
40643: LD_INT 5
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 2
40652: NEG
40653: PUSH
40654: LD_INT 3
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 3
40663: NEG
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 3
40674: NEG
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 2
40697: NEG
40698: PUSH
40699: LD_INT 1
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 3
40708: NEG
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 4
40719: NEG
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 4
40730: NEG
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 4
40742: NEG
40743: PUSH
40744: LD_INT 2
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 2
40754: NEG
40755: PUSH
40756: LD_INT 2
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 4
40765: NEG
40766: PUSH
40767: LD_INT 4
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 4
40777: NEG
40778: PUSH
40779: LD_INT 5
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 3
40789: NEG
40790: PUSH
40791: LD_INT 4
40793: NEG
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 3
40801: NEG
40802: PUSH
40803: LD_INT 3
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 4
40813: NEG
40814: PUSH
40815: LD_INT 3
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 5
40825: NEG
40826: PUSH
40827: LD_INT 4
40829: NEG
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 5
40837: NEG
40838: PUSH
40839: LD_INT 5
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 3
40849: NEG
40850: PUSH
40851: LD_INT 5
40853: NEG
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 5
40861: NEG
40862: PUSH
40863: LD_INT 3
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40918: LD_ADDR_VAR 0 30
40922: PUSH
40923: LD_INT 4
40925: PUSH
40926: LD_INT 4
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 4
40935: PUSH
40936: LD_INT 3
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 5
40945: PUSH
40946: LD_INT 4
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 5
40955: PUSH
40956: LD_INT 5
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 4
40965: PUSH
40966: LD_INT 5
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 3
40975: PUSH
40976: LD_INT 4
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 3
40985: PUSH
40986: LD_INT 3
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 5
40995: PUSH
40996: LD_INT 3
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 3
41005: PUSH
41006: LD_INT 5
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 3
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: LD_INT 3
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: LD_INT 4
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: LD_INT 4
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 1
41065: NEG
41066: PUSH
41067: LD_INT 3
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: LD_INT 2
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: LD_INT 4
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 4
41108: NEG
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 4
41119: NEG
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 3
41131: NEG
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 3
41142: NEG
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 4
41153: NEG
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 5
41164: NEG
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 5
41175: NEG
41176: PUSH
41177: LD_INT 1
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 5
41187: NEG
41188: PUSH
41189: LD_INT 2
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 3
41199: NEG
41200: PUSH
41201: LD_INT 2
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 3
41210: NEG
41211: PUSH
41212: LD_INT 3
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 3
41222: NEG
41223: PUSH
41224: LD_INT 4
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 2
41234: NEG
41235: PUSH
41236: LD_INT 3
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 2
41246: NEG
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 3
41258: NEG
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 4
41270: NEG
41271: PUSH
41272: LD_INT 3
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 4
41282: NEG
41283: PUSH
41284: LD_INT 4
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 2
41294: NEG
41295: PUSH
41296: LD_INT 4
41298: NEG
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 4
41306: NEG
41307: PUSH
41308: LD_INT 2
41310: NEG
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: LD_INT 4
41321: NEG
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: LD_INT 5
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 4
41343: NEG
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: LD_INT 3
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: LD_INT 3
41365: NEG
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: LD_INT 4
41377: NEG
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: LD_INT 5
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 2
41397: PUSH
41398: LD_INT 3
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 2
41408: NEG
41409: PUSH
41410: LD_INT 5
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41465: LD_ADDR_VAR 0 31
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: LD_INT 4
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: LD_INT 3
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: LD_INT 4
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: LD_INT 5
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: LD_INT 5
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: LD_INT 4
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: LD_INT 3
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 2
41544: PUSH
41545: LD_INT 5
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 2
41554: NEG
41555: PUSH
41556: LD_INT 3
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 3
41565: NEG
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 3
41576: NEG
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 2
41588: NEG
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 2
41599: NEG
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 3
41610: NEG
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 4
41621: NEG
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 4
41632: NEG
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 4
41644: NEG
41645: PUSH
41646: LD_INT 2
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 2
41656: NEG
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 4
41667: NEG
41668: PUSH
41669: LD_INT 4
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 4
41679: NEG
41680: PUSH
41681: LD_INT 5
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 3
41691: NEG
41692: PUSH
41693: LD_INT 4
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 3
41703: NEG
41704: PUSH
41705: LD_INT 3
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 4
41715: NEG
41716: PUSH
41717: LD_INT 3
41719: NEG
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 5
41727: NEG
41728: PUSH
41729: LD_INT 4
41731: NEG
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 5
41739: NEG
41740: PUSH
41741: LD_INT 5
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 3
41751: NEG
41752: PUSH
41753: LD_INT 5
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 5
41763: NEG
41764: PUSH
41765: LD_INT 3
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: LD_INT 3
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: LD_INT 4
41789: NEG
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: LD_INT 3
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: LD_INT 2
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 2
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: LD_INT 3
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: LD_INT 4
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: LD_INT 2
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 2
41865: NEG
41866: PUSH
41867: LD_INT 4
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 4
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 4
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 5
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 5
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 4
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 3
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 3
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 3
41949: PUSH
41950: LD_INT 2
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 5
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42015: LD_ADDR_VAR 0 32
42019: PUSH
42020: LD_INT 4
42022: NEG
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 4
42033: NEG
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 3
42045: NEG
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 3
42056: NEG
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 4
42067: NEG
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 5
42078: NEG
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 5
42089: NEG
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 5
42101: NEG
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 3
42113: NEG
42114: PUSH
42115: LD_INT 2
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 3
42124: NEG
42125: PUSH
42126: LD_INT 3
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 3
42136: NEG
42137: PUSH
42138: LD_INT 4
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 2
42148: NEG
42149: PUSH
42150: LD_INT 3
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: NEG
42161: PUSH
42162: LD_INT 2
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 3
42172: NEG
42173: PUSH
42174: LD_INT 2
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 4
42184: NEG
42185: PUSH
42186: LD_INT 3
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 4
42196: NEG
42197: PUSH
42198: LD_INT 4
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 2
42208: NEG
42209: PUSH
42210: LD_INT 4
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 4
42220: NEG
42221: PUSH
42222: LD_INT 2
42224: NEG
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: LD_INT 4
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: LD_INT 5
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: LD_INT 4
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: LD_INT 3
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: LD_INT 3
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: LD_INT 4
42291: NEG
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: LD_INT 5
42303: NEG
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: LD_INT 3
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 2
42322: NEG
42323: PUSH
42324: LD_INT 5
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 3
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 3
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 4
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 4
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 3
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: LD_INT 2
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 4
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 4
42427: PUSH
42428: LD_INT 4
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 4
42437: PUSH
42438: LD_INT 3
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 5
42447: PUSH
42448: LD_INT 4
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 5
42457: PUSH
42458: LD_INT 5
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 4
42467: PUSH
42468: LD_INT 5
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 3
42477: PUSH
42478: LD_INT 4
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 3
42487: PUSH
42488: LD_INT 3
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 5
42497: PUSH
42498: LD_INT 3
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 3
42507: PUSH
42508: LD_INT 5
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42562: LD_ADDR_VAR 0 33
42566: PUSH
42567: LD_INT 4
42569: NEG
42570: PUSH
42571: LD_INT 4
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 4
42581: NEG
42582: PUSH
42583: LD_INT 5
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 3
42593: NEG
42594: PUSH
42595: LD_INT 4
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 3
42605: NEG
42606: PUSH
42607: LD_INT 3
42609: NEG
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 4
42617: NEG
42618: PUSH
42619: LD_INT 3
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 5
42629: NEG
42630: PUSH
42631: LD_INT 4
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 5
42641: NEG
42642: PUSH
42643: LD_INT 5
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 3
42653: NEG
42654: PUSH
42655: LD_INT 5
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 5
42665: NEG
42666: PUSH
42667: LD_INT 3
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: LD_INT 3
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: LD_INT 4
42691: NEG
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: LD_INT 3
42702: NEG
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: LD_INT 2
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: LD_INT 3
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: LD_INT 4
42748: NEG
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 2
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 2
42767: NEG
42768: PUSH
42769: LD_INT 4
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 4
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 4
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 5
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 5
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 4
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 3
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 3
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 3
42851: PUSH
42852: LD_INT 2
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 5
42862: PUSH
42863: LD_INT 2
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 3
42872: PUSH
42873: LD_INT 3
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 3
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 4
42892: PUSH
42893: LD_INT 3
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 4
42902: PUSH
42903: LD_INT 4
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 3
42912: PUSH
42913: LD_INT 4
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 2
42922: PUSH
42923: LD_INT 3
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 4
42942: PUSH
42943: LD_INT 2
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: LD_INT 4
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: LD_INT 4
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: LD_INT 3
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: LD_INT 4
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 5
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: LD_INT 5
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: LD_INT 4
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: LD_INT 3
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 2
43034: PUSH
43035: LD_INT 5
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 2
43044: NEG
43045: PUSH
43046: LD_INT 3
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43100: LD_ADDR_VAR 0 34
43104: PUSH
43105: LD_INT 0
43107: PUSH
43108: LD_INT 4
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 5
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: LD_INT 4
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: LD_INT 3
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: LD_INT 3
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: LD_INT 4
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: LD_INT 5
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 2
43186: PUSH
43187: LD_INT 3
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: LD_INT 5
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 3
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 3
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 4
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 4
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 3
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: LD_INT 2
43284: NEG
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 4
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 4
43302: PUSH
43303: LD_INT 4
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 4
43312: PUSH
43313: LD_INT 3
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 5
43322: PUSH
43323: LD_INT 4
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 5
43332: PUSH
43333: LD_INT 5
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 4
43342: PUSH
43343: LD_INT 5
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 3
43352: PUSH
43353: LD_INT 4
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 3
43362: PUSH
43363: LD_INT 3
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 5
43372: PUSH
43373: LD_INT 3
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 3
43382: PUSH
43383: LD_INT 5
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 3
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 2
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: LD_INT 3
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: LD_INT 4
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: LD_INT 4
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: LD_INT 3
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 2
43464: PUSH
43465: LD_INT 4
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 4
43485: NEG
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 4
43496: NEG
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 3
43508: NEG
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 3
43519: NEG
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 4
43530: NEG
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 5
43541: NEG
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 5
43552: NEG
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 5
43564: NEG
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 3
43576: NEG
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: ST_TO_ADDR
// end ; end ;
43632: GO 43635
43634: POP
// case btype of b_depot , b_warehouse :
43635: LD_VAR 0 1
43639: PUSH
43640: LD_INT 0
43642: DOUBLE
43643: EQUAL
43644: IFTRUE 43654
43646: LD_INT 1
43648: DOUBLE
43649: EQUAL
43650: IFTRUE 43654
43652: GO 43855
43654: POP
// case nation of nation_american :
43655: LD_VAR 0 5
43659: PUSH
43660: LD_INT 1
43662: DOUBLE
43663: EQUAL
43664: IFTRUE 43668
43666: GO 43724
43668: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43669: LD_ADDR_VAR 0 9
43673: PUSH
43674: LD_VAR 0 11
43678: PUSH
43679: LD_VAR 0 12
43683: PUSH
43684: LD_VAR 0 13
43688: PUSH
43689: LD_VAR 0 14
43693: PUSH
43694: LD_VAR 0 15
43698: PUSH
43699: LD_VAR 0 16
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: PUSH
43712: LD_VAR 0 4
43716: PUSH
43717: LD_INT 1
43719: PLUS
43720: ARRAY
43721: ST_TO_ADDR
43722: GO 43853
43724: LD_INT 2
43726: DOUBLE
43727: EQUAL
43728: IFTRUE 43732
43730: GO 43788
43732: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43733: LD_ADDR_VAR 0 9
43737: PUSH
43738: LD_VAR 0 17
43742: PUSH
43743: LD_VAR 0 18
43747: PUSH
43748: LD_VAR 0 19
43752: PUSH
43753: LD_VAR 0 20
43757: PUSH
43758: LD_VAR 0 21
43762: PUSH
43763: LD_VAR 0 22
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: PUSH
43776: LD_VAR 0 4
43780: PUSH
43781: LD_INT 1
43783: PLUS
43784: ARRAY
43785: ST_TO_ADDR
43786: GO 43853
43788: LD_INT 3
43790: DOUBLE
43791: EQUAL
43792: IFTRUE 43796
43794: GO 43852
43796: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43797: LD_ADDR_VAR 0 9
43801: PUSH
43802: LD_VAR 0 23
43806: PUSH
43807: LD_VAR 0 24
43811: PUSH
43812: LD_VAR 0 25
43816: PUSH
43817: LD_VAR 0 26
43821: PUSH
43822: LD_VAR 0 27
43826: PUSH
43827: LD_VAR 0 28
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: PUSH
43840: LD_VAR 0 4
43844: PUSH
43845: LD_INT 1
43847: PLUS
43848: ARRAY
43849: ST_TO_ADDR
43850: GO 43853
43852: POP
43853: GO 44408
43855: LD_INT 2
43857: DOUBLE
43858: EQUAL
43859: IFTRUE 43869
43861: LD_INT 3
43863: DOUBLE
43864: EQUAL
43865: IFTRUE 43869
43867: GO 43925
43869: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43870: LD_ADDR_VAR 0 9
43874: PUSH
43875: LD_VAR 0 29
43879: PUSH
43880: LD_VAR 0 30
43884: PUSH
43885: LD_VAR 0 31
43889: PUSH
43890: LD_VAR 0 32
43894: PUSH
43895: LD_VAR 0 33
43899: PUSH
43900: LD_VAR 0 34
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: PUSH
43913: LD_VAR 0 4
43917: PUSH
43918: LD_INT 1
43920: PLUS
43921: ARRAY
43922: ST_TO_ADDR
43923: GO 44408
43925: LD_INT 16
43927: DOUBLE
43928: EQUAL
43929: IFTRUE 43987
43931: LD_INT 17
43933: DOUBLE
43934: EQUAL
43935: IFTRUE 43987
43937: LD_INT 18
43939: DOUBLE
43940: EQUAL
43941: IFTRUE 43987
43943: LD_INT 19
43945: DOUBLE
43946: EQUAL
43947: IFTRUE 43987
43949: LD_INT 22
43951: DOUBLE
43952: EQUAL
43953: IFTRUE 43987
43955: LD_INT 20
43957: DOUBLE
43958: EQUAL
43959: IFTRUE 43987
43961: LD_INT 21
43963: DOUBLE
43964: EQUAL
43965: IFTRUE 43987
43967: LD_INT 23
43969: DOUBLE
43970: EQUAL
43971: IFTRUE 43987
43973: LD_INT 24
43975: DOUBLE
43976: EQUAL
43977: IFTRUE 43987
43979: LD_INT 25
43981: DOUBLE
43982: EQUAL
43983: IFTRUE 43987
43985: GO 44043
43987: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43988: LD_ADDR_VAR 0 9
43992: PUSH
43993: LD_VAR 0 35
43997: PUSH
43998: LD_VAR 0 36
44002: PUSH
44003: LD_VAR 0 37
44007: PUSH
44008: LD_VAR 0 38
44012: PUSH
44013: LD_VAR 0 39
44017: PUSH
44018: LD_VAR 0 40
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: PUSH
44031: LD_VAR 0 4
44035: PUSH
44036: LD_INT 1
44038: PLUS
44039: ARRAY
44040: ST_TO_ADDR
44041: GO 44408
44043: LD_INT 6
44045: DOUBLE
44046: EQUAL
44047: IFTRUE 44099
44049: LD_INT 7
44051: DOUBLE
44052: EQUAL
44053: IFTRUE 44099
44055: LD_INT 8
44057: DOUBLE
44058: EQUAL
44059: IFTRUE 44099
44061: LD_INT 13
44063: DOUBLE
44064: EQUAL
44065: IFTRUE 44099
44067: LD_INT 12
44069: DOUBLE
44070: EQUAL
44071: IFTRUE 44099
44073: LD_INT 15
44075: DOUBLE
44076: EQUAL
44077: IFTRUE 44099
44079: LD_INT 11
44081: DOUBLE
44082: EQUAL
44083: IFTRUE 44099
44085: LD_INT 14
44087: DOUBLE
44088: EQUAL
44089: IFTRUE 44099
44091: LD_INT 10
44093: DOUBLE
44094: EQUAL
44095: IFTRUE 44099
44097: GO 44155
44099: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44100: LD_ADDR_VAR 0 9
44104: PUSH
44105: LD_VAR 0 41
44109: PUSH
44110: LD_VAR 0 42
44114: PUSH
44115: LD_VAR 0 43
44119: PUSH
44120: LD_VAR 0 44
44124: PUSH
44125: LD_VAR 0 45
44129: PUSH
44130: LD_VAR 0 46
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: PUSH
44143: LD_VAR 0 4
44147: PUSH
44148: LD_INT 1
44150: PLUS
44151: ARRAY
44152: ST_TO_ADDR
44153: GO 44408
44155: LD_INT 36
44157: DOUBLE
44158: EQUAL
44159: IFTRUE 44163
44161: GO 44219
44163: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44164: LD_ADDR_VAR 0 9
44168: PUSH
44169: LD_VAR 0 47
44173: PUSH
44174: LD_VAR 0 48
44178: PUSH
44179: LD_VAR 0 49
44183: PUSH
44184: LD_VAR 0 50
44188: PUSH
44189: LD_VAR 0 51
44193: PUSH
44194: LD_VAR 0 52
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: PUSH
44207: LD_VAR 0 4
44211: PUSH
44212: LD_INT 1
44214: PLUS
44215: ARRAY
44216: ST_TO_ADDR
44217: GO 44408
44219: LD_INT 4
44221: DOUBLE
44222: EQUAL
44223: IFTRUE 44245
44225: LD_INT 5
44227: DOUBLE
44228: EQUAL
44229: IFTRUE 44245
44231: LD_INT 34
44233: DOUBLE
44234: EQUAL
44235: IFTRUE 44245
44237: LD_INT 37
44239: DOUBLE
44240: EQUAL
44241: IFTRUE 44245
44243: GO 44301
44245: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44246: LD_ADDR_VAR 0 9
44250: PUSH
44251: LD_VAR 0 53
44255: PUSH
44256: LD_VAR 0 54
44260: PUSH
44261: LD_VAR 0 55
44265: PUSH
44266: LD_VAR 0 56
44270: PUSH
44271: LD_VAR 0 57
44275: PUSH
44276: LD_VAR 0 58
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: PUSH
44289: LD_VAR 0 4
44293: PUSH
44294: LD_INT 1
44296: PLUS
44297: ARRAY
44298: ST_TO_ADDR
44299: GO 44408
44301: LD_INT 31
44303: DOUBLE
44304: EQUAL
44305: IFTRUE 44351
44307: LD_INT 32
44309: DOUBLE
44310: EQUAL
44311: IFTRUE 44351
44313: LD_INT 33
44315: DOUBLE
44316: EQUAL
44317: IFTRUE 44351
44319: LD_INT 27
44321: DOUBLE
44322: EQUAL
44323: IFTRUE 44351
44325: LD_INT 26
44327: DOUBLE
44328: EQUAL
44329: IFTRUE 44351
44331: LD_INT 28
44333: DOUBLE
44334: EQUAL
44335: IFTRUE 44351
44337: LD_INT 29
44339: DOUBLE
44340: EQUAL
44341: IFTRUE 44351
44343: LD_INT 30
44345: DOUBLE
44346: EQUAL
44347: IFTRUE 44351
44349: GO 44407
44351: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
44352: LD_ADDR_VAR 0 9
44356: PUSH
44357: LD_VAR 0 59
44361: PUSH
44362: LD_VAR 0 60
44366: PUSH
44367: LD_VAR 0 61
44371: PUSH
44372: LD_VAR 0 62
44376: PUSH
44377: LD_VAR 0 63
44381: PUSH
44382: LD_VAR 0 64
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: PUSH
44395: LD_VAR 0 4
44399: PUSH
44400: LD_INT 1
44402: PLUS
44403: ARRAY
44404: ST_TO_ADDR
44405: GO 44408
44407: POP
// temp_list2 = [ ] ;
44408: LD_ADDR_VAR 0 10
44412: PUSH
44413: EMPTY
44414: ST_TO_ADDR
// for i in temp_list do
44415: LD_ADDR_VAR 0 8
44419: PUSH
44420: LD_VAR 0 9
44424: PUSH
44425: FOR_IN
44426: IFFALSE 44478
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44428: LD_ADDR_VAR 0 10
44432: PUSH
44433: LD_VAR 0 10
44437: PUSH
44438: LD_VAR 0 8
44442: PUSH
44443: LD_INT 1
44445: ARRAY
44446: PUSH
44447: LD_VAR 0 2
44451: PLUS
44452: PUSH
44453: LD_VAR 0 8
44457: PUSH
44458: LD_INT 2
44460: ARRAY
44461: PUSH
44462: LD_VAR 0 3
44466: PLUS
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: EMPTY
44473: LIST
44474: ADD
44475: ST_TO_ADDR
44476: GO 44425
44478: POP
44479: POP
// result = temp_list2 ;
44480: LD_ADDR_VAR 0 7
44484: PUSH
44485: LD_VAR 0 10
44489: ST_TO_ADDR
// end ;
44490: LD_VAR 0 7
44494: RET
// export function EnemyInRange ( unit , dist ) ; begin
44495: LD_INT 0
44497: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44498: LD_ADDR_VAR 0 3
44502: PUSH
44503: LD_VAR 0 1
44507: PPUSH
44508: CALL_OW 255
44512: PPUSH
44513: LD_VAR 0 1
44517: PPUSH
44518: CALL_OW 250
44522: PPUSH
44523: LD_VAR 0 1
44527: PPUSH
44528: CALL_OW 251
44532: PPUSH
44533: LD_VAR 0 2
44537: PPUSH
44538: CALL 17752 0 4
44542: PUSH
44543: LD_INT 4
44545: ARRAY
44546: ST_TO_ADDR
// end ;
44547: LD_VAR 0 3
44551: RET
// export function PlayerSeeMe ( unit ) ; begin
44552: LD_INT 0
44554: PPUSH
// result := See ( your_side , unit ) ;
44555: LD_ADDR_VAR 0 2
44559: PUSH
44560: LD_OWVAR 2
44564: PPUSH
44565: LD_VAR 0 1
44569: PPUSH
44570: CALL_OW 292
44574: ST_TO_ADDR
// end ;
44575: LD_VAR 0 2
44579: RET
// export function ReverseDir ( unit ) ; begin
44580: LD_INT 0
44582: PPUSH
// if not unit then
44583: LD_VAR 0 1
44587: NOT
44588: IFFALSE 44592
// exit ;
44590: GO 44615
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44592: LD_ADDR_VAR 0 2
44596: PUSH
44597: LD_VAR 0 1
44601: PPUSH
44602: CALL_OW 254
44606: PUSH
44607: LD_INT 3
44609: PLUS
44610: PUSH
44611: LD_INT 6
44613: MOD
44614: ST_TO_ADDR
// end ;
44615: LD_VAR 0 2
44619: RET
// export function ReverseArray ( array ) ; var i ; begin
44620: LD_INT 0
44622: PPUSH
44623: PPUSH
// if not array then
44624: LD_VAR 0 1
44628: NOT
44629: IFFALSE 44633
// exit ;
44631: GO 44688
// result := [ ] ;
44633: LD_ADDR_VAR 0 2
44637: PUSH
44638: EMPTY
44639: ST_TO_ADDR
// for i := array downto 1 do
44640: LD_ADDR_VAR 0 3
44644: PUSH
44645: DOUBLE
44646: LD_VAR 0 1
44650: INC
44651: ST_TO_ADDR
44652: LD_INT 1
44654: PUSH
44655: FOR_DOWNTO
44656: IFFALSE 44686
// result := Join ( result , array [ i ] ) ;
44658: LD_ADDR_VAR 0 2
44662: PUSH
44663: LD_VAR 0 2
44667: PPUSH
44668: LD_VAR 0 1
44672: PUSH
44673: LD_VAR 0 3
44677: ARRAY
44678: PPUSH
44679: CALL 49540 0 2
44683: ST_TO_ADDR
44684: GO 44655
44686: POP
44687: POP
// end ;
44688: LD_VAR 0 2
44692: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44693: LD_INT 0
44695: PPUSH
44696: PPUSH
44697: PPUSH
44698: PPUSH
44699: PPUSH
44700: PPUSH
// if not unit or not hexes then
44701: LD_VAR 0 1
44705: NOT
44706: IFTRUE 44715
44708: PUSH
44709: LD_VAR 0 2
44713: NOT
44714: OR
44715: IFFALSE 44719
// exit ;
44717: GO 44842
// dist := 9999 ;
44719: LD_ADDR_VAR 0 5
44723: PUSH
44724: LD_INT 9999
44726: ST_TO_ADDR
// for i = 1 to hexes do
44727: LD_ADDR_VAR 0 4
44731: PUSH
44732: DOUBLE
44733: LD_INT 1
44735: DEC
44736: ST_TO_ADDR
44737: LD_VAR 0 2
44741: PUSH
44742: FOR_TO
44743: IFFALSE 44830
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44745: LD_ADDR_VAR 0 6
44749: PUSH
44750: LD_VAR 0 1
44754: PPUSH
44755: LD_VAR 0 2
44759: PUSH
44760: LD_VAR 0 4
44764: ARRAY
44765: PUSH
44766: LD_INT 1
44768: ARRAY
44769: PPUSH
44770: LD_VAR 0 2
44774: PUSH
44775: LD_VAR 0 4
44779: ARRAY
44780: PUSH
44781: LD_INT 2
44783: ARRAY
44784: PPUSH
44785: CALL_OW 297
44789: ST_TO_ADDR
// if tdist < dist then
44790: LD_VAR 0 6
44794: PUSH
44795: LD_VAR 0 5
44799: LESS
44800: IFFALSE 44828
// begin hex := hexes [ i ] ;
44802: LD_ADDR_VAR 0 8
44806: PUSH
44807: LD_VAR 0 2
44811: PUSH
44812: LD_VAR 0 4
44816: ARRAY
44817: ST_TO_ADDR
// dist := tdist ;
44818: LD_ADDR_VAR 0 5
44822: PUSH
44823: LD_VAR 0 6
44827: ST_TO_ADDR
// end ; end ;
44828: GO 44742
44830: POP
44831: POP
// result := hex ;
44832: LD_ADDR_VAR 0 3
44836: PUSH
44837: LD_VAR 0 8
44841: ST_TO_ADDR
// end ;
44842: LD_VAR 0 3
44846: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44847: LD_INT 0
44849: PPUSH
44850: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44851: LD_VAR 0 1
44855: NOT
44856: IFTRUE 44895
44858: PUSH
44859: LD_VAR 0 1
44863: PUSH
44864: LD_INT 21
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 23
44876: PUSH
44877: LD_INT 2
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PPUSH
44888: CALL_OW 69
44892: IN
44893: NOT
44894: OR
44895: IFFALSE 44899
// exit ;
44897: GO 44946
// for i = 1 to 3 do
44899: LD_ADDR_VAR 0 3
44903: PUSH
44904: DOUBLE
44905: LD_INT 1
44907: DEC
44908: ST_TO_ADDR
44909: LD_INT 3
44911: PUSH
44912: FOR_TO
44913: IFFALSE 44944
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44915: LD_VAR 0 1
44919: PPUSH
44920: CALL_OW 250
44924: PPUSH
44925: LD_VAR 0 1
44929: PPUSH
44930: CALL_OW 251
44934: PPUSH
44935: LD_INT 1
44937: PPUSH
44938: CALL_OW 453
44942: GO 44912
44944: POP
44945: POP
// end ;
44946: LD_VAR 0 2
44950: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44951: LD_INT 0
44953: PPUSH
44954: PPUSH
44955: PPUSH
44956: PPUSH
44957: PPUSH
44958: PPUSH
// if not unit or not enemy_unit then
44959: LD_VAR 0 1
44963: NOT
44964: IFTRUE 44973
44966: PUSH
44967: LD_VAR 0 2
44971: NOT
44972: OR
44973: IFFALSE 44977
// exit ;
44975: GO 45458
// if GetLives ( i ) < 250 then
44977: LD_VAR 0 4
44981: PPUSH
44982: CALL_OW 256
44986: PUSH
44987: LD_INT 250
44989: LESS
44990: IFFALSE 45003
// begin ComAutodestruct ( i ) ;
44992: LD_VAR 0 4
44996: PPUSH
44997: CALL 44847 0 1
// exit ;
45001: GO 45458
// end ; x := GetX ( enemy_unit ) ;
45003: LD_ADDR_VAR 0 7
45007: PUSH
45008: LD_VAR 0 2
45012: PPUSH
45013: CALL_OW 250
45017: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45018: LD_ADDR_VAR 0 8
45022: PUSH
45023: LD_VAR 0 2
45027: PPUSH
45028: CALL_OW 251
45032: ST_TO_ADDR
// if not x or not y then
45033: LD_VAR 0 7
45037: NOT
45038: IFTRUE 45047
45040: PUSH
45041: LD_VAR 0 8
45045: NOT
45046: OR
45047: IFFALSE 45051
// exit ;
45049: GO 45458
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45051: LD_ADDR_VAR 0 6
45055: PUSH
45056: LD_VAR 0 7
45060: PPUSH
45061: LD_INT 0
45063: PPUSH
45064: LD_INT 4
45066: PPUSH
45067: CALL_OW 272
45071: PUSH
45072: LD_VAR 0 8
45076: PPUSH
45077: LD_INT 0
45079: PPUSH
45080: LD_INT 4
45082: PPUSH
45083: CALL_OW 273
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_VAR 0 7
45096: PPUSH
45097: LD_INT 1
45099: PPUSH
45100: LD_INT 4
45102: PPUSH
45103: CALL_OW 272
45107: PUSH
45108: LD_VAR 0 8
45112: PPUSH
45113: LD_INT 1
45115: PPUSH
45116: LD_INT 4
45118: PPUSH
45119: CALL_OW 273
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_VAR 0 7
45132: PPUSH
45133: LD_INT 2
45135: PPUSH
45136: LD_INT 4
45138: PPUSH
45139: CALL_OW 272
45143: PUSH
45144: LD_VAR 0 8
45148: PPUSH
45149: LD_INT 2
45151: PPUSH
45152: LD_INT 4
45154: PPUSH
45155: CALL_OW 273
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_VAR 0 7
45168: PPUSH
45169: LD_INT 3
45171: PPUSH
45172: LD_INT 4
45174: PPUSH
45175: CALL_OW 272
45179: PUSH
45180: LD_VAR 0 8
45184: PPUSH
45185: LD_INT 3
45187: PPUSH
45188: LD_INT 4
45190: PPUSH
45191: CALL_OW 273
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_VAR 0 7
45204: PPUSH
45205: LD_INT 4
45207: PPUSH
45208: LD_INT 4
45210: PPUSH
45211: CALL_OW 272
45215: PUSH
45216: LD_VAR 0 8
45220: PPUSH
45221: LD_INT 4
45223: PPUSH
45224: LD_INT 4
45226: PPUSH
45227: CALL_OW 273
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_VAR 0 7
45240: PPUSH
45241: LD_INT 5
45243: PPUSH
45244: LD_INT 4
45246: PPUSH
45247: CALL_OW 272
45251: PUSH
45252: LD_VAR 0 8
45256: PPUSH
45257: LD_INT 5
45259: PPUSH
45260: LD_INT 4
45262: PPUSH
45263: CALL_OW 273
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: ST_TO_ADDR
// for i = tmp downto 1 do
45280: LD_ADDR_VAR 0 4
45284: PUSH
45285: DOUBLE
45286: LD_VAR 0 6
45290: INC
45291: ST_TO_ADDR
45292: LD_INT 1
45294: PUSH
45295: FOR_DOWNTO
45296: IFFALSE 45399
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45298: LD_VAR 0 6
45302: PUSH
45303: LD_VAR 0 4
45307: ARRAY
45308: PUSH
45309: LD_INT 1
45311: ARRAY
45312: PPUSH
45313: LD_VAR 0 6
45317: PUSH
45318: LD_VAR 0 4
45322: ARRAY
45323: PUSH
45324: LD_INT 2
45326: ARRAY
45327: PPUSH
45328: CALL_OW 488
45332: NOT
45333: IFTRUE 45375
45335: PUSH
45336: LD_VAR 0 6
45340: PUSH
45341: LD_VAR 0 4
45345: ARRAY
45346: PUSH
45347: LD_INT 1
45349: ARRAY
45350: PPUSH
45351: LD_VAR 0 6
45355: PUSH
45356: LD_VAR 0 4
45360: ARRAY
45361: PUSH
45362: LD_INT 2
45364: ARRAY
45365: PPUSH
45366: CALL_OW 428
45370: PUSH
45371: LD_INT 0
45373: NONEQUAL
45374: OR
45375: IFFALSE 45397
// tmp := Delete ( tmp , i ) ;
45377: LD_ADDR_VAR 0 6
45381: PUSH
45382: LD_VAR 0 6
45386: PPUSH
45387: LD_VAR 0 4
45391: PPUSH
45392: CALL_OW 3
45396: ST_TO_ADDR
45397: GO 45295
45399: POP
45400: POP
// j := GetClosestHex ( unit , tmp ) ;
45401: LD_ADDR_VAR 0 5
45405: PUSH
45406: LD_VAR 0 1
45410: PPUSH
45411: LD_VAR 0 6
45415: PPUSH
45416: CALL 44693 0 2
45420: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45421: LD_VAR 0 1
45425: PPUSH
45426: LD_VAR 0 5
45430: PUSH
45431: LD_INT 1
45433: ARRAY
45434: PPUSH
45435: LD_VAR 0 5
45439: PUSH
45440: LD_INT 2
45442: ARRAY
45443: PPUSH
45444: CALL_OW 111
// result := j ;
45448: LD_ADDR_VAR 0 3
45452: PUSH
45453: LD_VAR 0 5
45457: ST_TO_ADDR
// end ;
45458: LD_VAR 0 3
45462: RET
// export function PrepareApemanSoldier ( ) ; begin
45463: LD_INT 0
45465: PPUSH
// uc_nation := 0 ;
45466: LD_ADDR_OWVAR 21
45470: PUSH
45471: LD_INT 0
45473: ST_TO_ADDR
// hc_sex := sex_male ;
45474: LD_ADDR_OWVAR 27
45478: PUSH
45479: LD_INT 1
45481: ST_TO_ADDR
// hc_name :=  ;
45482: LD_ADDR_OWVAR 26
45486: PUSH
45487: LD_STRING 
45489: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
45490: LD_ADDR_OWVAR 28
45494: PUSH
45495: LD_INT 15
45497: ST_TO_ADDR
// hc_gallery :=  ;
45498: LD_ADDR_OWVAR 33
45502: PUSH
45503: LD_STRING 
45505: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45506: LD_ADDR_OWVAR 31
45510: PUSH
45511: LD_INT 0
45513: PPUSH
45514: LD_INT 3
45516: PPUSH
45517: CALL_OW 12
45521: PUSH
45522: LD_INT 0
45524: PPUSH
45525: LD_INT 3
45527: PPUSH
45528: CALL_OW 12
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45545: LD_ADDR_OWVAR 29
45549: PUSH
45550: LD_INT 10
45552: PUSH
45553: LD_INT 12
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: ST_TO_ADDR
// end ;
45560: LD_VAR 0 1
45564: RET
// export function PrepareApemanEngineer ( ) ; begin
45565: LD_INT 0
45567: PPUSH
// uc_nation := 0 ;
45568: LD_ADDR_OWVAR 21
45572: PUSH
45573: LD_INT 0
45575: ST_TO_ADDR
// hc_sex := sex_male ;
45576: LD_ADDR_OWVAR 27
45580: PUSH
45581: LD_INT 1
45583: ST_TO_ADDR
// hc_name :=  ;
45584: LD_ADDR_OWVAR 26
45588: PUSH
45589: LD_STRING 
45591: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
45592: LD_ADDR_OWVAR 28
45596: PUSH
45597: LD_INT 16
45599: ST_TO_ADDR
// hc_gallery :=  ;
45600: LD_ADDR_OWVAR 33
45604: PUSH
45605: LD_STRING 
45607: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45608: LD_ADDR_OWVAR 31
45612: PUSH
45613: LD_INT 0
45615: PPUSH
45616: LD_INT 3
45618: PPUSH
45619: CALL_OW 12
45623: PUSH
45624: LD_INT 0
45626: PPUSH
45627: LD_INT 3
45629: PPUSH
45630: CALL_OW 12
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45647: LD_ADDR_OWVAR 29
45651: PUSH
45652: LD_INT 10
45654: PUSH
45655: LD_INT 12
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: ST_TO_ADDR
// end ;
45662: LD_VAR 0 1
45666: RET
// export function PrepareApeman ( agressivity ) ; begin
45667: LD_INT 0
45669: PPUSH
// uc_side := 0 ;
45670: LD_ADDR_OWVAR 20
45674: PUSH
45675: LD_INT 0
45677: ST_TO_ADDR
// uc_nation := 0 ;
45678: LD_ADDR_OWVAR 21
45682: PUSH
45683: LD_INT 0
45685: ST_TO_ADDR
// hc_sex := sex_male ;
45686: LD_ADDR_OWVAR 27
45690: PUSH
45691: LD_INT 1
45693: ST_TO_ADDR
// hc_class := class_apeman ;
45694: LD_ADDR_OWVAR 28
45698: PUSH
45699: LD_INT 12
45701: ST_TO_ADDR
// hc_gallery :=  ;
45702: LD_ADDR_OWVAR 33
45706: PUSH
45707: LD_STRING 
45709: ST_TO_ADDR
// hc_name :=  ;
45710: LD_ADDR_OWVAR 26
45714: PUSH
45715: LD_STRING 
45717: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45718: LD_ADDR_OWVAR 29
45722: PUSH
45723: LD_INT 10
45725: PUSH
45726: LD_INT 12
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: ST_TO_ADDR
// if agressivity = 0 then
45733: LD_VAR 0 1
45737: PUSH
45738: LD_INT 0
45740: EQUAL
45741: IFFALSE 45753
// hc_agressivity := 0 else
45743: LD_ADDR_OWVAR 35
45747: PUSH
45748: LD_INT 0
45750: ST_TO_ADDR
45751: GO 45774
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45753: LD_ADDR_OWVAR 35
45757: PUSH
45758: LD_VAR 0 1
45762: NEG
45763: PPUSH
45764: LD_VAR 0 1
45768: PPUSH
45769: CALL_OW 12
45773: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45774: LD_ADDR_OWVAR 31
45778: PUSH
45779: LD_INT 0
45781: PPUSH
45782: LD_INT 3
45784: PPUSH
45785: CALL_OW 12
45789: PUSH
45790: LD_INT 0
45792: PPUSH
45793: LD_INT 3
45795: PPUSH
45796: CALL_OW 12
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: ST_TO_ADDR
// end ;
45813: LD_VAR 0 2
45817: RET
// export function PrepareTiger ( agressivity ) ; begin
45818: LD_INT 0
45820: PPUSH
// uc_side := 0 ;
45821: LD_ADDR_OWVAR 20
45825: PUSH
45826: LD_INT 0
45828: ST_TO_ADDR
// uc_nation := 0 ;
45829: LD_ADDR_OWVAR 21
45833: PUSH
45834: LD_INT 0
45836: ST_TO_ADDR
// InitHc ;
45837: CALL_OW 19
// hc_class := class_tiger ;
45841: LD_ADDR_OWVAR 28
45845: PUSH
45846: LD_INT 14
45848: ST_TO_ADDR
// hc_gallery :=  ;
45849: LD_ADDR_OWVAR 33
45853: PUSH
45854: LD_STRING 
45856: ST_TO_ADDR
// hc_name :=  ;
45857: LD_ADDR_OWVAR 26
45861: PUSH
45862: LD_STRING 
45864: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45865: LD_ADDR_OWVAR 35
45869: PUSH
45870: LD_VAR 0 1
45874: NEG
45875: PPUSH
45876: LD_VAR 0 1
45880: PPUSH
45881: CALL_OW 12
45885: ST_TO_ADDR
// end ;
45886: LD_VAR 0 2
45890: RET
// export function PrepareEnchidna ( ) ; begin
45891: LD_INT 0
45893: PPUSH
// uc_side := 0 ;
45894: LD_ADDR_OWVAR 20
45898: PUSH
45899: LD_INT 0
45901: ST_TO_ADDR
// uc_nation := 0 ;
45902: LD_ADDR_OWVAR 21
45906: PUSH
45907: LD_INT 0
45909: ST_TO_ADDR
// InitHc ;
45910: CALL_OW 19
// hc_class := class_baggie ;
45914: LD_ADDR_OWVAR 28
45918: PUSH
45919: LD_INT 13
45921: ST_TO_ADDR
// hc_gallery :=  ;
45922: LD_ADDR_OWVAR 33
45926: PUSH
45927: LD_STRING 
45929: ST_TO_ADDR
// hc_name :=  ;
45930: LD_ADDR_OWVAR 26
45934: PUSH
45935: LD_STRING 
45937: ST_TO_ADDR
// end ;
45938: LD_VAR 0 1
45942: RET
// export function PrepareFrog ( ) ; begin
45943: LD_INT 0
45945: PPUSH
// uc_side := 0 ;
45946: LD_ADDR_OWVAR 20
45950: PUSH
45951: LD_INT 0
45953: ST_TO_ADDR
// uc_nation := 0 ;
45954: LD_ADDR_OWVAR 21
45958: PUSH
45959: LD_INT 0
45961: ST_TO_ADDR
// InitHc ;
45962: CALL_OW 19
// hc_class := class_frog ;
45966: LD_ADDR_OWVAR 28
45970: PUSH
45971: LD_INT 19
45973: ST_TO_ADDR
// hc_gallery :=  ;
45974: LD_ADDR_OWVAR 33
45978: PUSH
45979: LD_STRING 
45981: ST_TO_ADDR
// hc_name :=  ;
45982: LD_ADDR_OWVAR 26
45986: PUSH
45987: LD_STRING 
45989: ST_TO_ADDR
// end ;
45990: LD_VAR 0 1
45994: RET
// export function PrepareFish ( ) ; begin
45995: LD_INT 0
45997: PPUSH
// uc_side := 0 ;
45998: LD_ADDR_OWVAR 20
46002: PUSH
46003: LD_INT 0
46005: ST_TO_ADDR
// uc_nation := 0 ;
46006: LD_ADDR_OWVAR 21
46010: PUSH
46011: LD_INT 0
46013: ST_TO_ADDR
// InitHc ;
46014: CALL_OW 19
// hc_class := class_fish ;
46018: LD_ADDR_OWVAR 28
46022: PUSH
46023: LD_INT 20
46025: ST_TO_ADDR
// hc_gallery :=  ;
46026: LD_ADDR_OWVAR 33
46030: PUSH
46031: LD_STRING 
46033: ST_TO_ADDR
// hc_name :=  ;
46034: LD_ADDR_OWVAR 26
46038: PUSH
46039: LD_STRING 
46041: ST_TO_ADDR
// end ;
46042: LD_VAR 0 1
46046: RET
// export function PrepareBird ( ) ; begin
46047: LD_INT 0
46049: PPUSH
// uc_side := 0 ;
46050: LD_ADDR_OWVAR 20
46054: PUSH
46055: LD_INT 0
46057: ST_TO_ADDR
// uc_nation := 0 ;
46058: LD_ADDR_OWVAR 21
46062: PUSH
46063: LD_INT 0
46065: ST_TO_ADDR
// InitHc ;
46066: CALL_OW 19
// hc_class := class_phororhacos ;
46070: LD_ADDR_OWVAR 28
46074: PUSH
46075: LD_INT 18
46077: ST_TO_ADDR
// hc_gallery :=  ;
46078: LD_ADDR_OWVAR 33
46082: PUSH
46083: LD_STRING 
46085: ST_TO_ADDR
// hc_name :=  ;
46086: LD_ADDR_OWVAR 26
46090: PUSH
46091: LD_STRING 
46093: ST_TO_ADDR
// end ;
46094: LD_VAR 0 1
46098: RET
// export function PrepareHorse ( ) ; begin
46099: LD_INT 0
46101: PPUSH
// uc_side := 0 ;
46102: LD_ADDR_OWVAR 20
46106: PUSH
46107: LD_INT 0
46109: ST_TO_ADDR
// uc_nation := 0 ;
46110: LD_ADDR_OWVAR 21
46114: PUSH
46115: LD_INT 0
46117: ST_TO_ADDR
// InitHc ;
46118: CALL_OW 19
// hc_class := class_horse ;
46122: LD_ADDR_OWVAR 28
46126: PUSH
46127: LD_INT 21
46129: ST_TO_ADDR
// hc_gallery :=  ;
46130: LD_ADDR_OWVAR 33
46134: PUSH
46135: LD_STRING 
46137: ST_TO_ADDR
// hc_name :=  ;
46138: LD_ADDR_OWVAR 26
46142: PUSH
46143: LD_STRING 
46145: ST_TO_ADDR
// end ;
46146: LD_VAR 0 1
46150: RET
// export function PrepareMastodont ( ) ; begin
46151: LD_INT 0
46153: PPUSH
// uc_side := 0 ;
46154: LD_ADDR_OWVAR 20
46158: PUSH
46159: LD_INT 0
46161: ST_TO_ADDR
// uc_nation := 0 ;
46162: LD_ADDR_OWVAR 21
46166: PUSH
46167: LD_INT 0
46169: ST_TO_ADDR
// vc_chassis := class_mastodont ;
46170: LD_ADDR_OWVAR 37
46174: PUSH
46175: LD_INT 31
46177: ST_TO_ADDR
// vc_control := control_rider ;
46178: LD_ADDR_OWVAR 38
46182: PUSH
46183: LD_INT 4
46185: ST_TO_ADDR
// end ;
46186: LD_VAR 0 1
46190: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46191: LD_INT 0
46193: PPUSH
46194: PPUSH
46195: PPUSH
// uc_side = 0 ;
46196: LD_ADDR_OWVAR 20
46200: PUSH
46201: LD_INT 0
46203: ST_TO_ADDR
// uc_nation = 0 ;
46204: LD_ADDR_OWVAR 21
46208: PUSH
46209: LD_INT 0
46211: ST_TO_ADDR
// InitHc_All ( ) ;
46212: CALL_OW 584
// InitVc ;
46216: CALL_OW 20
// if mastodonts then
46220: LD_VAR 0 6
46224: IFFALSE 46291
// for i = 1 to mastodonts do
46226: LD_ADDR_VAR 0 11
46230: PUSH
46231: DOUBLE
46232: LD_INT 1
46234: DEC
46235: ST_TO_ADDR
46236: LD_VAR 0 6
46240: PUSH
46241: FOR_TO
46242: IFFALSE 46289
// begin vc_chassis := 31 ;
46244: LD_ADDR_OWVAR 37
46248: PUSH
46249: LD_INT 31
46251: ST_TO_ADDR
// vc_control := control_rider ;
46252: LD_ADDR_OWVAR 38
46256: PUSH
46257: LD_INT 4
46259: ST_TO_ADDR
// animal := CreateVehicle ;
46260: LD_ADDR_VAR 0 12
46264: PUSH
46265: CALL_OW 45
46269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46270: LD_VAR 0 12
46274: PPUSH
46275: LD_VAR 0 8
46279: PPUSH
46280: LD_INT 0
46282: PPUSH
46283: CALL 48433 0 3
// end ;
46287: GO 46241
46289: POP
46290: POP
// if horses then
46291: LD_VAR 0 5
46295: IFFALSE 46362
// for i = 1 to horses do
46297: LD_ADDR_VAR 0 11
46301: PUSH
46302: DOUBLE
46303: LD_INT 1
46305: DEC
46306: ST_TO_ADDR
46307: LD_VAR 0 5
46311: PUSH
46312: FOR_TO
46313: IFFALSE 46360
// begin hc_class := 21 ;
46315: LD_ADDR_OWVAR 28
46319: PUSH
46320: LD_INT 21
46322: ST_TO_ADDR
// hc_gallery :=  ;
46323: LD_ADDR_OWVAR 33
46327: PUSH
46328: LD_STRING 
46330: ST_TO_ADDR
// animal := CreateHuman ;
46331: LD_ADDR_VAR 0 12
46335: PUSH
46336: CALL_OW 44
46340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46341: LD_VAR 0 12
46345: PPUSH
46346: LD_VAR 0 8
46350: PPUSH
46351: LD_INT 0
46353: PPUSH
46354: CALL 48433 0 3
// end ;
46358: GO 46312
46360: POP
46361: POP
// if birds then
46362: LD_VAR 0 1
46366: IFFALSE 46433
// for i = 1 to birds do
46368: LD_ADDR_VAR 0 11
46372: PUSH
46373: DOUBLE
46374: LD_INT 1
46376: DEC
46377: ST_TO_ADDR
46378: LD_VAR 0 1
46382: PUSH
46383: FOR_TO
46384: IFFALSE 46431
// begin hc_class := 18 ;
46386: LD_ADDR_OWVAR 28
46390: PUSH
46391: LD_INT 18
46393: ST_TO_ADDR
// hc_gallery =  ;
46394: LD_ADDR_OWVAR 33
46398: PUSH
46399: LD_STRING 
46401: ST_TO_ADDR
// animal := CreateHuman ;
46402: LD_ADDR_VAR 0 12
46406: PUSH
46407: CALL_OW 44
46411: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46412: LD_VAR 0 12
46416: PPUSH
46417: LD_VAR 0 8
46421: PPUSH
46422: LD_INT 0
46424: PPUSH
46425: CALL 48433 0 3
// end ;
46429: GO 46383
46431: POP
46432: POP
// if tigers then
46433: LD_VAR 0 2
46437: IFFALSE 46521
// for i = 1 to tigers do
46439: LD_ADDR_VAR 0 11
46443: PUSH
46444: DOUBLE
46445: LD_INT 1
46447: DEC
46448: ST_TO_ADDR
46449: LD_VAR 0 2
46453: PUSH
46454: FOR_TO
46455: IFFALSE 46519
// begin hc_class = class_tiger ;
46457: LD_ADDR_OWVAR 28
46461: PUSH
46462: LD_INT 14
46464: ST_TO_ADDR
// hc_gallery =  ;
46465: LD_ADDR_OWVAR 33
46469: PUSH
46470: LD_STRING 
46472: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46473: LD_ADDR_OWVAR 35
46477: PUSH
46478: LD_INT 7
46480: NEG
46481: PPUSH
46482: LD_INT 7
46484: PPUSH
46485: CALL_OW 12
46489: ST_TO_ADDR
// animal := CreateHuman ;
46490: LD_ADDR_VAR 0 12
46494: PUSH
46495: CALL_OW 44
46499: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46500: LD_VAR 0 12
46504: PPUSH
46505: LD_VAR 0 8
46509: PPUSH
46510: LD_INT 0
46512: PPUSH
46513: CALL 48433 0 3
// end ;
46517: GO 46454
46519: POP
46520: POP
// if apemans then
46521: LD_VAR 0 3
46525: IFFALSE 46648
// for i = 1 to apemans do
46527: LD_ADDR_VAR 0 11
46531: PUSH
46532: DOUBLE
46533: LD_INT 1
46535: DEC
46536: ST_TO_ADDR
46537: LD_VAR 0 3
46541: PUSH
46542: FOR_TO
46543: IFFALSE 46646
// begin hc_class = class_apeman ;
46545: LD_ADDR_OWVAR 28
46549: PUSH
46550: LD_INT 12
46552: ST_TO_ADDR
// hc_gallery =  ;
46553: LD_ADDR_OWVAR 33
46557: PUSH
46558: LD_STRING 
46560: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46561: LD_ADDR_OWVAR 35
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PPUSH
46570: LD_INT 2
46572: PPUSH
46573: CALL_OW 12
46577: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46578: LD_ADDR_OWVAR 31
46582: PUSH
46583: LD_INT 1
46585: PPUSH
46586: LD_INT 3
46588: PPUSH
46589: CALL_OW 12
46593: PUSH
46594: LD_INT 1
46596: PPUSH
46597: LD_INT 3
46599: PPUSH
46600: CALL_OW 12
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: ST_TO_ADDR
// animal := CreateHuman ;
46617: LD_ADDR_VAR 0 12
46621: PUSH
46622: CALL_OW 44
46626: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46627: LD_VAR 0 12
46631: PPUSH
46632: LD_VAR 0 8
46636: PPUSH
46637: LD_INT 0
46639: PPUSH
46640: CALL 48433 0 3
// end ;
46644: GO 46542
46646: POP
46647: POP
// if enchidnas then
46648: LD_VAR 0 4
46652: IFFALSE 46719
// for i = 1 to enchidnas do
46654: LD_ADDR_VAR 0 11
46658: PUSH
46659: DOUBLE
46660: LD_INT 1
46662: DEC
46663: ST_TO_ADDR
46664: LD_VAR 0 4
46668: PUSH
46669: FOR_TO
46670: IFFALSE 46717
// begin hc_class = 13 ;
46672: LD_ADDR_OWVAR 28
46676: PUSH
46677: LD_INT 13
46679: ST_TO_ADDR
// hc_gallery =  ;
46680: LD_ADDR_OWVAR 33
46684: PUSH
46685: LD_STRING 
46687: ST_TO_ADDR
// animal := CreateHuman ;
46688: LD_ADDR_VAR 0 12
46692: PUSH
46693: CALL_OW 44
46697: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46698: LD_VAR 0 12
46702: PPUSH
46703: LD_VAR 0 8
46707: PPUSH
46708: LD_INT 0
46710: PPUSH
46711: CALL 48433 0 3
// end ;
46715: GO 46669
46717: POP
46718: POP
// if fishes then
46719: LD_VAR 0 7
46723: IFFALSE 46790
// for i = 1 to fishes do
46725: LD_ADDR_VAR 0 11
46729: PUSH
46730: DOUBLE
46731: LD_INT 1
46733: DEC
46734: ST_TO_ADDR
46735: LD_VAR 0 7
46739: PUSH
46740: FOR_TO
46741: IFFALSE 46788
// begin hc_class = 20 ;
46743: LD_ADDR_OWVAR 28
46747: PUSH
46748: LD_INT 20
46750: ST_TO_ADDR
// hc_gallery =  ;
46751: LD_ADDR_OWVAR 33
46755: PUSH
46756: LD_STRING 
46758: ST_TO_ADDR
// animal := CreateHuman ;
46759: LD_ADDR_VAR 0 12
46763: PUSH
46764: CALL_OW 44
46768: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46769: LD_VAR 0 12
46773: PPUSH
46774: LD_VAR 0 9
46778: PPUSH
46779: LD_INT 0
46781: PPUSH
46782: CALL 48433 0 3
// end ;
46786: GO 46740
46788: POP
46789: POP
// end ;
46790: LD_VAR 0 10
46794: RET
// export function WantHeal ( sci , unit ) ; begin
46795: LD_INT 0
46797: PPUSH
// if GetTaskList ( sci ) > 0 then
46798: LD_VAR 0 1
46802: PPUSH
46803: CALL_OW 437
46807: PUSH
46808: LD_INT 0
46810: GREATER
46811: IFFALSE 46883
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46813: LD_VAR 0 1
46817: PPUSH
46818: CALL_OW 437
46822: PUSH
46823: LD_INT 1
46825: ARRAY
46826: PUSH
46827: LD_INT 1
46829: ARRAY
46830: PUSH
46831: LD_STRING l
46833: EQUAL
46834: IFFALSE 46861
46836: PUSH
46837: LD_VAR 0 1
46841: PPUSH
46842: CALL_OW 437
46846: PUSH
46847: LD_INT 1
46849: ARRAY
46850: PUSH
46851: LD_INT 4
46853: ARRAY
46854: PUSH
46855: LD_VAR 0 2
46859: EQUAL
46860: AND
46861: IFFALSE 46873
// result := true else
46863: LD_ADDR_VAR 0 3
46867: PUSH
46868: LD_INT 1
46870: ST_TO_ADDR
46871: GO 46881
// result := false ;
46873: LD_ADDR_VAR 0 3
46877: PUSH
46878: LD_INT 0
46880: ST_TO_ADDR
// end else
46881: GO 46891
// result := false ;
46883: LD_ADDR_VAR 0 3
46887: PUSH
46888: LD_INT 0
46890: ST_TO_ADDR
// end ;
46891: LD_VAR 0 3
46895: RET
// export function HealTarget ( sci ) ; begin
46896: LD_INT 0
46898: PPUSH
// if not sci then
46899: LD_VAR 0 1
46903: NOT
46904: IFFALSE 46908
// exit ;
46906: GO 46973
// result := 0 ;
46908: LD_ADDR_VAR 0 2
46912: PUSH
46913: LD_INT 0
46915: ST_TO_ADDR
// if GetTaskList ( sci ) then
46916: LD_VAR 0 1
46920: PPUSH
46921: CALL_OW 437
46925: IFFALSE 46973
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46927: LD_VAR 0 1
46931: PPUSH
46932: CALL_OW 437
46936: PUSH
46937: LD_INT 1
46939: ARRAY
46940: PUSH
46941: LD_INT 1
46943: ARRAY
46944: PUSH
46945: LD_STRING l
46947: EQUAL
46948: IFFALSE 46973
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46950: LD_ADDR_VAR 0 2
46954: PUSH
46955: LD_VAR 0 1
46959: PPUSH
46960: CALL_OW 437
46964: PUSH
46965: LD_INT 1
46967: ARRAY
46968: PUSH
46969: LD_INT 4
46971: ARRAY
46972: ST_TO_ADDR
// end ;
46973: LD_VAR 0 2
46977: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46978: LD_INT 0
46980: PPUSH
46981: PPUSH
46982: PPUSH
46983: PPUSH
// if not base_units then
46984: LD_VAR 0 1
46988: NOT
46989: IFFALSE 46993
// exit ;
46991: GO 47080
// result := false ;
46993: LD_ADDR_VAR 0 2
46997: PUSH
46998: LD_INT 0
47000: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47001: LD_ADDR_VAR 0 5
47005: PUSH
47006: LD_VAR 0 1
47010: PPUSH
47011: LD_INT 21
47013: PUSH
47014: LD_INT 3
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PPUSH
47021: CALL_OW 72
47025: ST_TO_ADDR
// if not tmp then
47026: LD_VAR 0 5
47030: NOT
47031: IFFALSE 47035
// exit ;
47033: GO 47080
// for i in tmp do
47035: LD_ADDR_VAR 0 3
47039: PUSH
47040: LD_VAR 0 5
47044: PUSH
47045: FOR_IN
47046: IFFALSE 47078
// begin result := EnemyInRange ( i , 22 ) ;
47048: LD_ADDR_VAR 0 2
47052: PUSH
47053: LD_VAR 0 3
47057: PPUSH
47058: LD_INT 22
47060: PPUSH
47061: CALL 44495 0 2
47065: ST_TO_ADDR
// if result then
47066: LD_VAR 0 2
47070: IFFALSE 47076
// exit ;
47072: POP
47073: POP
47074: GO 47080
// end ;
47076: GO 47045
47078: POP
47079: POP
// end ;
47080: LD_VAR 0 2
47084: RET
// export function FilterByTag ( units , tag ) ; begin
47085: LD_INT 0
47087: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47088: LD_ADDR_VAR 0 3
47092: PUSH
47093: LD_VAR 0 1
47097: PPUSH
47098: LD_INT 120
47100: PUSH
47101: LD_VAR 0 2
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PPUSH
47110: CALL_OW 72
47114: ST_TO_ADDR
// end ;
47115: LD_VAR 0 3
47119: RET
// export function IsDriver ( un ) ; begin
47120: LD_INT 0
47122: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47123: LD_ADDR_VAR 0 2
47127: PUSH
47128: LD_VAR 0 1
47132: PUSH
47133: LD_INT 55
47135: PUSH
47136: EMPTY
47137: LIST
47138: PPUSH
47139: CALL_OW 69
47143: IN
47144: ST_TO_ADDR
// end ;
47145: LD_VAR 0 2
47149: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47150: LD_INT 0
47152: PPUSH
47153: PPUSH
// list := [ ] ;
47154: LD_ADDR_VAR 0 5
47158: PUSH
47159: EMPTY
47160: ST_TO_ADDR
// case d of 0 :
47161: LD_VAR 0 3
47165: PUSH
47166: LD_INT 0
47168: DOUBLE
47169: EQUAL
47170: IFTRUE 47174
47172: GO 47307
47174: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47175: LD_ADDR_VAR 0 5
47179: PUSH
47180: LD_VAR 0 1
47184: PUSH
47185: LD_INT 4
47187: MINUS
47188: PUSH
47189: LD_VAR 0 2
47193: PUSH
47194: LD_INT 4
47196: MINUS
47197: PUSH
47198: LD_INT 2
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: LIST
47205: PUSH
47206: LD_VAR 0 1
47210: PUSH
47211: LD_INT 3
47213: MINUS
47214: PUSH
47215: LD_VAR 0 2
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: LIST
47227: PUSH
47228: LD_VAR 0 1
47232: PUSH
47233: LD_INT 4
47235: PLUS
47236: PUSH
47237: LD_VAR 0 2
47241: PUSH
47242: LD_INT 4
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: LIST
47249: PUSH
47250: LD_VAR 0 1
47254: PUSH
47255: LD_INT 3
47257: PLUS
47258: PUSH
47259: LD_VAR 0 2
47263: PUSH
47264: LD_INT 3
47266: PLUS
47267: PUSH
47268: LD_INT 5
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: LIST
47275: PUSH
47276: LD_VAR 0 1
47280: PUSH
47281: LD_VAR 0 2
47285: PUSH
47286: LD_INT 4
47288: PLUS
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: LIST
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: ST_TO_ADDR
// end ; 1 :
47305: GO 48005
47307: LD_INT 1
47309: DOUBLE
47310: EQUAL
47311: IFTRUE 47315
47313: GO 47448
47315: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47316: LD_ADDR_VAR 0 5
47320: PUSH
47321: LD_VAR 0 1
47325: PUSH
47326: LD_VAR 0 2
47330: PUSH
47331: LD_INT 4
47333: MINUS
47334: PUSH
47335: LD_INT 3
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: LIST
47342: PUSH
47343: LD_VAR 0 1
47347: PUSH
47348: LD_INT 3
47350: MINUS
47351: PUSH
47352: LD_VAR 0 2
47356: PUSH
47357: LD_INT 3
47359: MINUS
47360: PUSH
47361: LD_INT 2
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: LIST
47368: PUSH
47369: LD_VAR 0 1
47373: PUSH
47374: LD_INT 4
47376: MINUS
47377: PUSH
47378: LD_VAR 0 2
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: LIST
47390: PUSH
47391: LD_VAR 0 1
47395: PUSH
47396: LD_VAR 0 2
47400: PUSH
47401: LD_INT 3
47403: PLUS
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: LIST
47412: PUSH
47413: LD_VAR 0 1
47417: PUSH
47418: LD_INT 4
47420: PLUS
47421: PUSH
47422: LD_VAR 0 2
47426: PUSH
47427: LD_INT 4
47429: PLUS
47430: PUSH
47431: LD_INT 5
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: LIST
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: ST_TO_ADDR
// end ; 2 :
47446: GO 48005
47448: LD_INT 2
47450: DOUBLE
47451: EQUAL
47452: IFTRUE 47456
47454: GO 47585
47456: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47457: LD_ADDR_VAR 0 5
47461: PUSH
47462: LD_VAR 0 1
47466: PUSH
47467: LD_VAR 0 2
47471: PUSH
47472: LD_INT 3
47474: MINUS
47475: PUSH
47476: LD_INT 3
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: LIST
47483: PUSH
47484: LD_VAR 0 1
47488: PUSH
47489: LD_INT 4
47491: PLUS
47492: PUSH
47493: LD_VAR 0 2
47497: PUSH
47498: LD_INT 4
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: LIST
47505: PUSH
47506: LD_VAR 0 1
47510: PUSH
47511: LD_VAR 0 2
47515: PUSH
47516: LD_INT 4
47518: PLUS
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: LIST
47527: PUSH
47528: LD_VAR 0 1
47532: PUSH
47533: LD_INT 3
47535: MINUS
47536: PUSH
47537: LD_VAR 0 2
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: LIST
47549: PUSH
47550: LD_VAR 0 1
47554: PUSH
47555: LD_INT 4
47557: MINUS
47558: PUSH
47559: LD_VAR 0 2
47563: PUSH
47564: LD_INT 4
47566: MINUS
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: LIST
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: ST_TO_ADDR
// end ; 3 :
47583: GO 48005
47585: LD_INT 3
47587: DOUBLE
47588: EQUAL
47589: IFTRUE 47593
47591: GO 47726
47593: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47594: LD_ADDR_VAR 0 5
47598: PUSH
47599: LD_VAR 0 1
47603: PUSH
47604: LD_INT 3
47606: PLUS
47607: PUSH
47608: LD_VAR 0 2
47612: PUSH
47613: LD_INT 4
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: LIST
47620: PUSH
47621: LD_VAR 0 1
47625: PUSH
47626: LD_INT 4
47628: PLUS
47629: PUSH
47630: LD_VAR 0 2
47634: PUSH
47635: LD_INT 4
47637: PLUS
47638: PUSH
47639: LD_INT 5
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: LIST
47646: PUSH
47647: LD_VAR 0 1
47651: PUSH
47652: LD_INT 4
47654: MINUS
47655: PUSH
47656: LD_VAR 0 2
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: LIST
47668: PUSH
47669: LD_VAR 0 1
47673: PUSH
47674: LD_VAR 0 2
47678: PUSH
47679: LD_INT 4
47681: MINUS
47682: PUSH
47683: LD_INT 3
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: LIST
47690: PUSH
47691: LD_VAR 0 1
47695: PUSH
47696: LD_INT 3
47698: MINUS
47699: PUSH
47700: LD_VAR 0 2
47704: PUSH
47705: LD_INT 3
47707: MINUS
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: LIST
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: ST_TO_ADDR
// end ; 4 :
47724: GO 48005
47726: LD_INT 4
47728: DOUBLE
47729: EQUAL
47730: IFTRUE 47734
47732: GO 47867
47734: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47735: LD_ADDR_VAR 0 5
47739: PUSH
47740: LD_VAR 0 1
47744: PUSH
47745: LD_VAR 0 2
47749: PUSH
47750: LD_INT 4
47752: PLUS
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: LIST
47761: PUSH
47762: LD_VAR 0 1
47766: PUSH
47767: LD_INT 3
47769: PLUS
47770: PUSH
47771: LD_VAR 0 2
47775: PUSH
47776: LD_INT 3
47778: PLUS
47779: PUSH
47780: LD_INT 5
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: LIST
47787: PUSH
47788: LD_VAR 0 1
47792: PUSH
47793: LD_INT 4
47795: PLUS
47796: PUSH
47797: LD_VAR 0 2
47801: PUSH
47802: LD_INT 4
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: LIST
47809: PUSH
47810: LD_VAR 0 1
47814: PUSH
47815: LD_VAR 0 2
47819: PUSH
47820: LD_INT 3
47822: MINUS
47823: PUSH
47824: LD_INT 3
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: LIST
47831: PUSH
47832: LD_VAR 0 1
47836: PUSH
47837: LD_INT 4
47839: MINUS
47840: PUSH
47841: LD_VAR 0 2
47845: PUSH
47846: LD_INT 4
47848: MINUS
47849: PUSH
47850: LD_INT 2
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: LIST
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: ST_TO_ADDR
// end ; 5 :
47865: GO 48005
47867: LD_INT 5
47869: DOUBLE
47870: EQUAL
47871: IFTRUE 47875
47873: GO 48004
47875: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47876: LD_ADDR_VAR 0 5
47880: PUSH
47881: LD_VAR 0 1
47885: PUSH
47886: LD_INT 4
47888: MINUS
47889: PUSH
47890: LD_VAR 0 2
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: PUSH
47903: LD_VAR 0 1
47907: PUSH
47908: LD_VAR 0 2
47912: PUSH
47913: LD_INT 4
47915: MINUS
47916: PUSH
47917: LD_INT 3
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: LIST
47924: PUSH
47925: LD_VAR 0 1
47929: PUSH
47930: LD_INT 4
47932: PLUS
47933: PUSH
47934: LD_VAR 0 2
47938: PUSH
47939: LD_INT 4
47941: PLUS
47942: PUSH
47943: LD_INT 5
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: LIST
47950: PUSH
47951: LD_VAR 0 1
47955: PUSH
47956: LD_INT 3
47958: PLUS
47959: PUSH
47960: LD_VAR 0 2
47964: PUSH
47965: LD_INT 4
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: LIST
47972: PUSH
47973: LD_VAR 0 1
47977: PUSH
47978: LD_VAR 0 2
47982: PUSH
47983: LD_INT 3
47985: PLUS
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: LIST
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: ST_TO_ADDR
// end ; end ;
48002: GO 48005
48004: POP
// result := list ;
48005: LD_ADDR_VAR 0 4
48009: PUSH
48010: LD_VAR 0 5
48014: ST_TO_ADDR
// end ;
48015: LD_VAR 0 4
48019: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48020: LD_INT 0
48022: PPUSH
48023: PPUSH
48024: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48025: LD_VAR 0 1
48029: NOT
48030: IFTRUE 48058
48032: PUSH
48033: LD_VAR 0 2
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: LD_INT 3
48046: PUSH
48047: LD_INT 4
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: IN
48056: NOT
48057: OR
48058: IFFALSE 48062
// exit ;
48060: GO 48145
// tmp := [ ] ;
48062: LD_ADDR_VAR 0 5
48066: PUSH
48067: EMPTY
48068: ST_TO_ADDR
// for i in units do
48069: LD_ADDR_VAR 0 4
48073: PUSH
48074: LD_VAR 0 1
48078: PUSH
48079: FOR_IN
48080: IFFALSE 48114
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
48082: LD_ADDR_VAR 0 5
48086: PUSH
48087: LD_VAR 0 5
48091: PPUSH
48092: LD_VAR 0 4
48096: PPUSH
48097: LD_VAR 0 2
48101: PPUSH
48102: CALL_OW 259
48106: PPUSH
48107: CALL 49540 0 2
48111: ST_TO_ADDR
48112: GO 48079
48114: POP
48115: POP
// if not tmp then
48116: LD_VAR 0 5
48120: NOT
48121: IFFALSE 48125
// exit ;
48123: GO 48145
// result := SortListByListDesc ( units , tmp ) ;
48125: LD_ADDR_VAR 0 3
48129: PUSH
48130: LD_VAR 0 1
48134: PPUSH
48135: LD_VAR 0 5
48139: PPUSH
48140: CALL_OW 77
48144: ST_TO_ADDR
// end ;
48145: LD_VAR 0 3
48149: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48150: LD_INT 0
48152: PPUSH
48153: PPUSH
48154: PPUSH
// result := false ;
48155: LD_ADDR_VAR 0 3
48159: PUSH
48160: LD_INT 0
48162: ST_TO_ADDR
// if not building then
48163: LD_VAR 0 2
48167: NOT
48168: IFFALSE 48172
// exit ;
48170: GO 48316
// x := GetX ( building ) ;
48172: LD_ADDR_VAR 0 4
48176: PUSH
48177: LD_VAR 0 2
48181: PPUSH
48182: CALL_OW 250
48186: ST_TO_ADDR
// y := GetY ( building ) ;
48187: LD_ADDR_VAR 0 5
48191: PUSH
48192: LD_VAR 0 2
48196: PPUSH
48197: CALL_OW 251
48201: ST_TO_ADDR
// if not x or not y then
48202: LD_VAR 0 4
48206: NOT
48207: IFTRUE 48216
48209: PUSH
48210: LD_VAR 0 5
48214: NOT
48215: OR
48216: IFFALSE 48220
// exit ;
48218: GO 48316
// if GetTaskList ( unit ) then
48220: LD_VAR 0 1
48224: PPUSH
48225: CALL_OW 437
48229: IFFALSE 48316
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48231: LD_STRING e
48233: PUSH
48234: LD_VAR 0 1
48238: PPUSH
48239: CALL_OW 437
48243: PUSH
48244: LD_INT 1
48246: ARRAY
48247: PUSH
48248: LD_INT 1
48250: ARRAY
48251: EQUAL
48252: IFFALSE 48279
48254: PUSH
48255: LD_VAR 0 4
48259: PUSH
48260: LD_VAR 0 1
48264: PPUSH
48265: CALL_OW 437
48269: PUSH
48270: LD_INT 1
48272: ARRAY
48273: PUSH
48274: LD_INT 2
48276: ARRAY
48277: EQUAL
48278: AND
48279: IFFALSE 48306
48281: PUSH
48282: LD_VAR 0 5
48286: PUSH
48287: LD_VAR 0 1
48291: PPUSH
48292: CALL_OW 437
48296: PUSH
48297: LD_INT 1
48299: ARRAY
48300: PUSH
48301: LD_INT 3
48303: ARRAY
48304: EQUAL
48305: AND
48306: IFFALSE 48316
// result := true end ;
48308: LD_ADDR_VAR 0 3
48312: PUSH
48313: LD_INT 1
48315: ST_TO_ADDR
// end ;
48316: LD_VAR 0 3
48320: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48321: LD_INT 0
48323: PPUSH
// result := false ;
48324: LD_ADDR_VAR 0 4
48328: PUSH
48329: LD_INT 0
48331: ST_TO_ADDR
// if GetTaskList ( unit ) then
48332: LD_VAR 0 1
48336: PPUSH
48337: CALL_OW 437
48341: IFFALSE 48428
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48343: LD_STRING M
48345: PUSH
48346: LD_VAR 0 1
48350: PPUSH
48351: CALL_OW 437
48355: PUSH
48356: LD_INT 1
48358: ARRAY
48359: PUSH
48360: LD_INT 1
48362: ARRAY
48363: EQUAL
48364: IFFALSE 48391
48366: PUSH
48367: LD_VAR 0 2
48371: PUSH
48372: LD_VAR 0 1
48376: PPUSH
48377: CALL_OW 437
48381: PUSH
48382: LD_INT 1
48384: ARRAY
48385: PUSH
48386: LD_INT 2
48388: ARRAY
48389: EQUAL
48390: AND
48391: IFFALSE 48418
48393: PUSH
48394: LD_VAR 0 3
48398: PUSH
48399: LD_VAR 0 1
48403: PPUSH
48404: CALL_OW 437
48408: PUSH
48409: LD_INT 1
48411: ARRAY
48412: PUSH
48413: LD_INT 3
48415: ARRAY
48416: EQUAL
48417: AND
48418: IFFALSE 48428
// result := true ;
48420: LD_ADDR_VAR 0 4
48424: PUSH
48425: LD_INT 1
48427: ST_TO_ADDR
// end ; end ;
48428: LD_VAR 0 4
48432: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48433: LD_INT 0
48435: PPUSH
48436: PPUSH
48437: PPUSH
48438: PPUSH
// if not unit or not area then
48439: LD_VAR 0 1
48443: NOT
48444: IFTRUE 48453
48446: PUSH
48447: LD_VAR 0 2
48451: NOT
48452: OR
48453: IFFALSE 48457
// exit ;
48455: GO 48633
// tmp := AreaToList ( area , i ) ;
48457: LD_ADDR_VAR 0 6
48461: PUSH
48462: LD_VAR 0 2
48466: PPUSH
48467: LD_VAR 0 5
48471: PPUSH
48472: CALL_OW 517
48476: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48477: LD_ADDR_VAR 0 5
48481: PUSH
48482: DOUBLE
48483: LD_INT 1
48485: DEC
48486: ST_TO_ADDR
48487: LD_VAR 0 6
48491: PUSH
48492: LD_INT 1
48494: ARRAY
48495: PUSH
48496: FOR_TO
48497: IFFALSE 48631
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48499: LD_ADDR_VAR 0 7
48503: PUSH
48504: LD_VAR 0 6
48508: PUSH
48509: LD_INT 1
48511: ARRAY
48512: PUSH
48513: LD_VAR 0 5
48517: ARRAY
48518: PUSH
48519: LD_VAR 0 6
48523: PUSH
48524: LD_INT 2
48526: ARRAY
48527: PUSH
48528: LD_VAR 0 5
48532: ARRAY
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
48538: LD_INT 92
48540: PUSH
48541: LD_VAR 0 7
48545: PUSH
48546: LD_INT 1
48548: ARRAY
48549: PUSH
48550: LD_VAR 0 7
48554: PUSH
48555: LD_INT 2
48557: ARRAY
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: PPUSH
48568: CALL_OW 69
48572: PUSH
48573: LD_INT 0
48575: EQUAL
48576: IFFALSE 48629
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48578: LD_VAR 0 1
48582: PPUSH
48583: LD_VAR 0 7
48587: PUSH
48588: LD_INT 1
48590: ARRAY
48591: PPUSH
48592: LD_VAR 0 7
48596: PUSH
48597: LD_INT 2
48599: ARRAY
48600: PPUSH
48601: LD_VAR 0 3
48605: PPUSH
48606: CALL_OW 48
// result := IsPlaced ( unit ) ;
48610: LD_ADDR_VAR 0 4
48614: PUSH
48615: LD_VAR 0 1
48619: PPUSH
48620: CALL_OW 305
48624: ST_TO_ADDR
// exit ;
48625: POP
48626: POP
48627: GO 48633
// end ; end ;
48629: GO 48496
48631: POP
48632: POP
// end ;
48633: LD_VAR 0 4
48637: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48638: LD_INT 0
48640: PPUSH
48641: PPUSH
48642: PPUSH
// if not side or side > 8 then
48643: LD_VAR 0 1
48647: NOT
48648: IFTRUE 48660
48650: PUSH
48651: LD_VAR 0 1
48655: PUSH
48656: LD_INT 8
48658: GREATER
48659: OR
48660: IFFALSE 48664
// exit ;
48662: GO 48851
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48664: LD_ADDR_VAR 0 4
48668: PUSH
48669: LD_INT 22
48671: PUSH
48672: LD_VAR 0 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 21
48683: PUSH
48684: LD_INT 3
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PPUSH
48695: CALL_OW 69
48699: ST_TO_ADDR
// if not tmp then
48700: LD_VAR 0 4
48704: NOT
48705: IFFALSE 48709
// exit ;
48707: GO 48851
// enable_addtolog := true ;
48709: LD_ADDR_OWVAR 81
48713: PUSH
48714: LD_INT 1
48716: ST_TO_ADDR
// AddToLog ( [ ) ;
48717: LD_STRING [
48719: PPUSH
48720: CALL_OW 561
// for i in tmp do
48724: LD_ADDR_VAR 0 3
48728: PUSH
48729: LD_VAR 0 4
48733: PUSH
48734: FOR_IN
48735: IFFALSE 48842
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48737: LD_STRING [
48739: PUSH
48740: LD_VAR 0 3
48744: PPUSH
48745: CALL_OW 266
48749: STR
48750: PUSH
48751: LD_STRING , 
48753: STR
48754: PUSH
48755: LD_VAR 0 3
48759: PPUSH
48760: CALL_OW 250
48764: STR
48765: PUSH
48766: LD_STRING , 
48768: STR
48769: PUSH
48770: LD_VAR 0 3
48774: PPUSH
48775: CALL_OW 251
48779: STR
48780: PUSH
48781: LD_STRING , 
48783: STR
48784: PUSH
48785: LD_VAR 0 3
48789: PPUSH
48790: CALL_OW 254
48794: STR
48795: PUSH
48796: LD_STRING , 
48798: STR
48799: PUSH
48800: LD_VAR 0 3
48804: PPUSH
48805: LD_INT 1
48807: PPUSH
48808: CALL_OW 268
48812: STR
48813: PUSH
48814: LD_STRING , 
48816: STR
48817: PUSH
48818: LD_VAR 0 3
48822: PPUSH
48823: LD_INT 2
48825: PPUSH
48826: CALL_OW 268
48830: STR
48831: PUSH
48832: LD_STRING ],
48834: STR
48835: PPUSH
48836: CALL_OW 561
// end ;
48840: GO 48734
48842: POP
48843: POP
// AddToLog ( ]; ) ;
48844: LD_STRING ];
48846: PPUSH
48847: CALL_OW 561
// end ;
48851: LD_VAR 0 2
48855: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48856: LD_INT 0
48858: PPUSH
48859: PPUSH
48860: PPUSH
48861: PPUSH
48862: PPUSH
// if not area or not rate or not max then
48863: LD_VAR 0 1
48867: NOT
48868: IFTRUE 48877
48870: PUSH
48871: LD_VAR 0 2
48875: NOT
48876: OR
48877: IFTRUE 48886
48879: PUSH
48880: LD_VAR 0 4
48884: NOT
48885: OR
48886: IFFALSE 48890
// exit ;
48888: GO 49079
// while 1 do
48890: LD_INT 1
48892: IFFALSE 49079
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48894: LD_ADDR_VAR 0 9
48898: PUSH
48899: LD_VAR 0 1
48903: PPUSH
48904: LD_INT 1
48906: PPUSH
48907: CALL_OW 287
48911: PUSH
48912: LD_INT 10
48914: MUL
48915: ST_TO_ADDR
// r := rate / 10 ;
48916: LD_ADDR_VAR 0 7
48920: PUSH
48921: LD_VAR 0 2
48925: PUSH
48926: LD_INT 10
48928: DIVREAL
48929: ST_TO_ADDR
// time := 1 1$00 ;
48930: LD_ADDR_VAR 0 8
48934: PUSH
48935: LD_INT 2100
48937: ST_TO_ADDR
// if amount < min then
48938: LD_VAR 0 9
48942: PUSH
48943: LD_VAR 0 3
48947: LESS
48948: IFFALSE 48966
// r := r * 2 else
48950: LD_ADDR_VAR 0 7
48954: PUSH
48955: LD_VAR 0 7
48959: PUSH
48960: LD_INT 2
48962: MUL
48963: ST_TO_ADDR
48964: GO 48992
// if amount > max then
48966: LD_VAR 0 9
48970: PUSH
48971: LD_VAR 0 4
48975: GREATER
48976: IFFALSE 48992
// r := r / 2 ;
48978: LD_ADDR_VAR 0 7
48982: PUSH
48983: LD_VAR 0 7
48987: PUSH
48988: LD_INT 2
48990: DIVREAL
48991: ST_TO_ADDR
// time := time / r ;
48992: LD_ADDR_VAR 0 8
48996: PUSH
48997: LD_VAR 0 8
49001: PUSH
49002: LD_VAR 0 7
49006: DIVREAL
49007: ST_TO_ADDR
// if time < 0 then
49008: LD_VAR 0 8
49012: PUSH
49013: LD_INT 0
49015: LESS
49016: IFFALSE 49033
// time := time * - 1 ;
49018: LD_ADDR_VAR 0 8
49022: PUSH
49023: LD_VAR 0 8
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: MUL
49032: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
49033: LD_VAR 0 8
49037: PUSH
49038: LD_INT 35
49040: PPUSH
49041: LD_INT 875
49043: PPUSH
49044: CALL_OW 12
49048: PLUS
49049: PPUSH
49050: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49054: LD_INT 1
49056: PPUSH
49057: LD_INT 5
49059: PPUSH
49060: CALL_OW 12
49064: PPUSH
49065: LD_VAR 0 1
49069: PPUSH
49070: LD_INT 1
49072: PPUSH
49073: CALL_OW 55
// end ;
49077: GO 48890
// end ;
49079: LD_VAR 0 5
49083: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49084: LD_INT 0
49086: PPUSH
49087: PPUSH
49088: PPUSH
49089: PPUSH
49090: PPUSH
49091: PPUSH
49092: PPUSH
49093: PPUSH
// if not turrets or not factories then
49094: LD_VAR 0 1
49098: NOT
49099: IFTRUE 49108
49101: PUSH
49102: LD_VAR 0 2
49106: NOT
49107: OR
49108: IFFALSE 49112
// exit ;
49110: GO 49419
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49112: LD_ADDR_VAR 0 10
49116: PUSH
49117: LD_INT 5
49119: PUSH
49120: LD_INT 6
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 2
49129: PUSH
49130: LD_INT 4
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 3
49139: PUSH
49140: LD_INT 5
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 24
49154: PUSH
49155: LD_INT 25
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 23
49164: PUSH
49165: LD_INT 27
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 42
49178: PUSH
49179: LD_INT 43
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 44
49188: PUSH
49189: LD_INT 46
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 45
49198: PUSH
49199: LD_INT 47
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: LIST
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: LIST
49215: ST_TO_ADDR
// result := [ ] ;
49216: LD_ADDR_VAR 0 3
49220: PUSH
49221: EMPTY
49222: ST_TO_ADDR
// for i in turrets do
49223: LD_ADDR_VAR 0 4
49227: PUSH
49228: LD_VAR 0 1
49232: PUSH
49233: FOR_IN
49234: IFFALSE 49417
// begin nat := GetNation ( i ) ;
49236: LD_ADDR_VAR 0 7
49240: PUSH
49241: LD_VAR 0 4
49245: PPUSH
49246: CALL_OW 248
49250: ST_TO_ADDR
// weapon := 0 ;
49251: LD_ADDR_VAR 0 8
49255: PUSH
49256: LD_INT 0
49258: ST_TO_ADDR
// if not nat then
49259: LD_VAR 0 7
49263: NOT
49264: IFFALSE 49268
// continue ;
49266: GO 49233
// for j in list [ nat ] do
49268: LD_ADDR_VAR 0 5
49272: PUSH
49273: LD_VAR 0 10
49277: PUSH
49278: LD_VAR 0 7
49282: ARRAY
49283: PUSH
49284: FOR_IN
49285: IFFALSE 49326
// if GetBWeapon ( i ) = j [ 1 ] then
49287: LD_VAR 0 4
49291: PPUSH
49292: CALL_OW 269
49296: PUSH
49297: LD_VAR 0 5
49301: PUSH
49302: LD_INT 1
49304: ARRAY
49305: EQUAL
49306: IFFALSE 49324
// begin weapon := j [ 2 ] ;
49308: LD_ADDR_VAR 0 8
49312: PUSH
49313: LD_VAR 0 5
49317: PUSH
49318: LD_INT 2
49320: ARRAY
49321: ST_TO_ADDR
// break ;
49322: GO 49326
// end ;
49324: GO 49284
49326: POP
49327: POP
// if not weapon then
49328: LD_VAR 0 8
49332: NOT
49333: IFFALSE 49337
// continue ;
49335: GO 49233
// for k in factories do
49337: LD_ADDR_VAR 0 6
49341: PUSH
49342: LD_VAR 0 2
49346: PUSH
49347: FOR_IN
49348: IFFALSE 49413
// begin weapons := AvailableWeaponList ( k ) ;
49350: LD_ADDR_VAR 0 9
49354: PUSH
49355: LD_VAR 0 6
49359: PPUSH
49360: CALL_OW 478
49364: ST_TO_ADDR
// if not weapons then
49365: LD_VAR 0 9
49369: NOT
49370: IFFALSE 49374
// continue ;
49372: GO 49347
// if weapon in weapons then
49374: LD_VAR 0 8
49378: PUSH
49379: LD_VAR 0 9
49383: IN
49384: IFFALSE 49411
// begin result := [ i , weapon ] ;
49386: LD_ADDR_VAR 0 3
49390: PUSH
49391: LD_VAR 0 4
49395: PUSH
49396: LD_VAR 0 8
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: ST_TO_ADDR
// exit ;
49405: POP
49406: POP
49407: POP
49408: POP
49409: GO 49419
// end ; end ;
49411: GO 49347
49413: POP
49414: POP
// end ;
49415: GO 49233
49417: POP
49418: POP
// end ;
49419: LD_VAR 0 3
49423: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49424: LD_INT 0
49426: PPUSH
// if not side or side > 8 then
49427: LD_VAR 0 3
49431: NOT
49432: IFTRUE 49444
49434: PUSH
49435: LD_VAR 0 3
49439: PUSH
49440: LD_INT 8
49442: GREATER
49443: OR
49444: IFFALSE 49448
// exit ;
49446: GO 49507
// if not range then
49448: LD_VAR 0 4
49452: NOT
49453: IFFALSE 49464
// range := - 12 ;
49455: LD_ADDR_VAR 0 4
49459: PUSH
49460: LD_INT 12
49462: NEG
49463: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49464: LD_VAR 0 1
49468: PPUSH
49469: LD_VAR 0 2
49473: PPUSH
49474: LD_VAR 0 3
49478: PPUSH
49479: LD_VAR 0 4
49483: PPUSH
49484: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49488: LD_VAR 0 1
49492: PPUSH
49493: LD_VAR 0 2
49497: PPUSH
49498: LD_VAR 0 3
49502: PPUSH
49503: CALL_OW 331
// end ;
49507: LD_VAR 0 5
49511: RET
// export function Video ( mode ) ; begin
49512: LD_INT 0
49514: PPUSH
// ingame_video = mode ;
49515: LD_ADDR_OWVAR 52
49519: PUSH
49520: LD_VAR 0 1
49524: ST_TO_ADDR
// interface_hidden = mode ;
49525: LD_ADDR_OWVAR 54
49529: PUSH
49530: LD_VAR 0 1
49534: ST_TO_ADDR
// end ;
49535: LD_VAR 0 2
49539: RET
// export function Join ( array , element ) ; begin
49540: LD_INT 0
49542: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49543: LD_ADDR_VAR 0 3
49547: PUSH
49548: LD_VAR 0 1
49552: PPUSH
49553: LD_VAR 0 1
49557: PUSH
49558: LD_INT 1
49560: PLUS
49561: PPUSH
49562: LD_VAR 0 2
49566: PPUSH
49567: CALL_OW 1
49571: ST_TO_ADDR
// end ;
49572: LD_VAR 0 3
49576: RET
// export function JoinUnion ( array , element ) ; begin
49577: LD_INT 0
49579: PPUSH
// result := array union element ;
49580: LD_ADDR_VAR 0 3
49584: PUSH
49585: LD_VAR 0 1
49589: PUSH
49590: LD_VAR 0 2
49594: UNION
49595: ST_TO_ADDR
// end ;
49596: LD_VAR 0 3
49600: RET
// export function GetBehemoths ( side ) ; begin
49601: LD_INT 0
49603: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
49604: LD_ADDR_VAR 0 2
49608: PUSH
49609: LD_INT 22
49611: PUSH
49612: LD_VAR 0 1
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 31
49623: PUSH
49624: LD_INT 25
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PPUSH
49635: CALL_OW 69
49639: ST_TO_ADDR
// end ;
49640: LD_VAR 0 2
49644: RET
// export function Shuffle ( array ) ; var i , index ; begin
49645: LD_INT 0
49647: PPUSH
49648: PPUSH
49649: PPUSH
// result := [ ] ;
49650: LD_ADDR_VAR 0 2
49654: PUSH
49655: EMPTY
49656: ST_TO_ADDR
// if not array then
49657: LD_VAR 0 1
49661: NOT
49662: IFFALSE 49666
// exit ;
49664: GO 49765
// Randomize ;
49666: CALL_OW 10
// for i = array downto 1 do
49670: LD_ADDR_VAR 0 3
49674: PUSH
49675: DOUBLE
49676: LD_VAR 0 1
49680: INC
49681: ST_TO_ADDR
49682: LD_INT 1
49684: PUSH
49685: FOR_DOWNTO
49686: IFFALSE 49763
// begin index := rand ( 1 , array ) ;
49688: LD_ADDR_VAR 0 4
49692: PUSH
49693: LD_INT 1
49695: PPUSH
49696: LD_VAR 0 1
49700: PPUSH
49701: CALL_OW 12
49705: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49706: LD_ADDR_VAR 0 2
49710: PUSH
49711: LD_VAR 0 2
49715: PPUSH
49716: LD_VAR 0 2
49720: PUSH
49721: LD_INT 1
49723: PLUS
49724: PPUSH
49725: LD_VAR 0 1
49729: PUSH
49730: LD_VAR 0 4
49734: ARRAY
49735: PPUSH
49736: CALL_OW 2
49740: ST_TO_ADDR
// array := Delete ( array , index ) ;
49741: LD_ADDR_VAR 0 1
49745: PUSH
49746: LD_VAR 0 1
49750: PPUSH
49751: LD_VAR 0 4
49755: PPUSH
49756: CALL_OW 3
49760: ST_TO_ADDR
// end ;
49761: GO 49685
49763: POP
49764: POP
// end ;
49765: LD_VAR 0 2
49769: RET
// export function GetBaseMaterials ( base ) ; begin
49770: LD_INT 0
49772: PPUSH
// result := [ 0 , 0 , 0 ] ;
49773: LD_ADDR_VAR 0 2
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: LIST
49791: ST_TO_ADDR
// if not base then
49792: LD_VAR 0 1
49796: NOT
49797: IFFALSE 49801
// exit ;
49799: GO 49850
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49801: LD_ADDR_VAR 0 2
49805: PUSH
49806: LD_VAR 0 1
49810: PPUSH
49811: LD_INT 1
49813: PPUSH
49814: CALL_OW 275
49818: PUSH
49819: LD_VAR 0 1
49823: PPUSH
49824: LD_INT 2
49826: PPUSH
49827: CALL_OW 275
49831: PUSH
49832: LD_VAR 0 1
49836: PPUSH
49837: LD_INT 3
49839: PPUSH
49840: CALL_OW 275
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: LIST
49849: ST_TO_ADDR
// end ;
49850: LD_VAR 0 2
49854: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49855: LD_INT 0
49857: PPUSH
49858: PPUSH
// result := array ;
49859: LD_ADDR_VAR 0 3
49863: PUSH
49864: LD_VAR 0 1
49868: ST_TO_ADDR
// if size >= result then
49869: LD_VAR 0 2
49873: PUSH
49874: LD_VAR 0 3
49878: GREATEREQUAL
49879: IFFALSE 49883
// exit ;
49881: GO 49933
// if size then
49883: LD_VAR 0 2
49887: IFFALSE 49933
// for i := array downto size do
49889: LD_ADDR_VAR 0 4
49893: PUSH
49894: DOUBLE
49895: LD_VAR 0 1
49899: INC
49900: ST_TO_ADDR
49901: LD_VAR 0 2
49905: PUSH
49906: FOR_DOWNTO
49907: IFFALSE 49931
// result := Delete ( result , result ) ;
49909: LD_ADDR_VAR 0 3
49913: PUSH
49914: LD_VAR 0 3
49918: PPUSH
49919: LD_VAR 0 3
49923: PPUSH
49924: CALL_OW 3
49928: ST_TO_ADDR
49929: GO 49906
49931: POP
49932: POP
// end ;
49933: LD_VAR 0 3
49937: RET
// export function ComExit ( unit ) ; var tmp ; begin
49938: LD_INT 0
49940: PPUSH
49941: PPUSH
// if not IsInUnit ( unit ) then
49942: LD_VAR 0 1
49946: PPUSH
49947: CALL_OW 310
49951: NOT
49952: IFFALSE 49956
// exit ;
49954: GO 50016
// tmp := IsInUnit ( unit ) ;
49956: LD_ADDR_VAR 0 3
49960: PUSH
49961: LD_VAR 0 1
49965: PPUSH
49966: CALL_OW 310
49970: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49971: LD_VAR 0 3
49975: PPUSH
49976: CALL_OW 247
49980: PUSH
49981: LD_INT 2
49983: EQUAL
49984: IFFALSE 49997
// ComExitVehicle ( unit ) else
49986: LD_VAR 0 1
49990: PPUSH
49991: CALL_OW 121
49995: GO 50006
// ComExitBuilding ( unit ) ;
49997: LD_VAR 0 1
50001: PPUSH
50002: CALL_OW 122
// result := tmp ;
50006: LD_ADDR_VAR 0 2
50010: PUSH
50011: LD_VAR 0 3
50015: ST_TO_ADDR
// end ;
50016: LD_VAR 0 2
50020: RET
// export function ComExitAll ( units ) ; var i ; begin
50021: LD_INT 0
50023: PPUSH
50024: PPUSH
// if not units then
50025: LD_VAR 0 1
50029: NOT
50030: IFFALSE 50034
// exit ;
50032: GO 50060
// for i in units do
50034: LD_ADDR_VAR 0 3
50038: PUSH
50039: LD_VAR 0 1
50043: PUSH
50044: FOR_IN
50045: IFFALSE 50058
// ComExit ( i ) ;
50047: LD_VAR 0 3
50051: PPUSH
50052: CALL 49938 0 1
50056: GO 50044
50058: POP
50059: POP
// end ;
50060: LD_VAR 0 2
50064: RET
// export function ResetHc ; begin
50065: LD_INT 0
50067: PPUSH
// InitHc ;
50068: CALL_OW 19
// hc_importance := 0 ;
50072: LD_ADDR_OWVAR 32
50076: PUSH
50077: LD_INT 0
50079: ST_TO_ADDR
// end ;
50080: LD_VAR 0 1
50084: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50085: LD_INT 0
50087: PPUSH
50088: PPUSH
50089: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50090: LD_ADDR_VAR 0 6
50094: PUSH
50095: LD_VAR 0 1
50099: PUSH
50100: LD_VAR 0 3
50104: PLUS
50105: PUSH
50106: LD_INT 2
50108: DIV
50109: ST_TO_ADDR
// if _x < 0 then
50110: LD_VAR 0 6
50114: PUSH
50115: LD_INT 0
50117: LESS
50118: IFFALSE 50135
// _x := _x * - 1 ;
50120: LD_ADDR_VAR 0 6
50124: PUSH
50125: LD_VAR 0 6
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: MUL
50134: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50135: LD_ADDR_VAR 0 7
50139: PUSH
50140: LD_VAR 0 2
50144: PUSH
50145: LD_VAR 0 4
50149: PLUS
50150: PUSH
50151: LD_INT 2
50153: DIV
50154: ST_TO_ADDR
// if _y < 0 then
50155: LD_VAR 0 7
50159: PUSH
50160: LD_INT 0
50162: LESS
50163: IFFALSE 50180
// _y := _y * - 1 ;
50165: LD_ADDR_VAR 0 7
50169: PUSH
50170: LD_VAR 0 7
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: MUL
50179: ST_TO_ADDR
// result := [ _x , _y ] ;
50180: LD_ADDR_VAR 0 5
50184: PUSH
50185: LD_VAR 0 6
50189: PUSH
50190: LD_VAR 0 7
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: ST_TO_ADDR
// end ;
50199: LD_VAR 0 5
50203: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50204: LD_INT 0
50206: PPUSH
50207: PPUSH
50208: PPUSH
50209: PPUSH
// task := GetTaskList ( unit ) ;
50210: LD_ADDR_VAR 0 7
50214: PUSH
50215: LD_VAR 0 1
50219: PPUSH
50220: CALL_OW 437
50224: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50225: LD_VAR 0 7
50229: NOT
50230: IFFALSE 50249
50232: PUSH
50233: LD_VAR 0 1
50237: PPUSH
50238: LD_VAR 0 2
50242: PPUSH
50243: CALL_OW 308
50247: NOT
50248: AND
50249: IFFALSE 50253
// exit ;
50251: GO 50371
// if IsInArea ( unit , area ) then
50253: LD_VAR 0 1
50257: PPUSH
50258: LD_VAR 0 2
50262: PPUSH
50263: CALL_OW 308
50267: IFFALSE 50285
// begin ComMoveToArea ( unit , goAway ) ;
50269: LD_VAR 0 1
50273: PPUSH
50274: LD_VAR 0 3
50278: PPUSH
50279: CALL_OW 113
// exit ;
50283: GO 50371
// end ; if task [ 1 ] [ 1 ] <> M then
50285: LD_VAR 0 7
50289: PUSH
50290: LD_INT 1
50292: ARRAY
50293: PUSH
50294: LD_INT 1
50296: ARRAY
50297: PUSH
50298: LD_STRING M
50300: NONEQUAL
50301: IFFALSE 50305
// exit ;
50303: GO 50371
// x := task [ 1 ] [ 2 ] ;
50305: LD_ADDR_VAR 0 5
50309: PUSH
50310: LD_VAR 0 7
50314: PUSH
50315: LD_INT 1
50317: ARRAY
50318: PUSH
50319: LD_INT 2
50321: ARRAY
50322: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50323: LD_ADDR_VAR 0 6
50327: PUSH
50328: LD_VAR 0 7
50332: PUSH
50333: LD_INT 1
50335: ARRAY
50336: PUSH
50337: LD_INT 3
50339: ARRAY
50340: ST_TO_ADDR
// if InArea ( x , y , area ) then
50341: LD_VAR 0 5
50345: PPUSH
50346: LD_VAR 0 6
50350: PPUSH
50351: LD_VAR 0 2
50355: PPUSH
50356: CALL_OW 309
50360: IFFALSE 50371
// ComStop ( unit ) ;
50362: LD_VAR 0 1
50366: PPUSH
50367: CALL_OW 141
// end ;
50371: LD_VAR 0 4
50375: RET
// export function Abs ( value ) ; begin
50376: LD_INT 0
50378: PPUSH
// result := value ;
50379: LD_ADDR_VAR 0 2
50383: PUSH
50384: LD_VAR 0 1
50388: ST_TO_ADDR
// if value < 0 then
50389: LD_VAR 0 1
50393: PUSH
50394: LD_INT 0
50396: LESS
50397: IFFALSE 50414
// result := value * - 1 ;
50399: LD_ADDR_VAR 0 2
50403: PUSH
50404: LD_VAR 0 1
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: MUL
50413: ST_TO_ADDR
// end ;
50414: LD_VAR 0 2
50418: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50419: LD_INT 0
50421: PPUSH
50422: PPUSH
50423: PPUSH
50424: PPUSH
50425: PPUSH
50426: PPUSH
50427: PPUSH
50428: PPUSH
// if not unit or not building then
50429: LD_VAR 0 1
50433: NOT
50434: IFTRUE 50443
50436: PUSH
50437: LD_VAR 0 2
50441: NOT
50442: OR
50443: IFFALSE 50447
// exit ;
50445: GO 50675
// x := GetX ( building ) ;
50447: LD_ADDR_VAR 0 4
50451: PUSH
50452: LD_VAR 0 2
50456: PPUSH
50457: CALL_OW 250
50461: ST_TO_ADDR
// y := GetY ( building ) ;
50462: LD_ADDR_VAR 0 6
50466: PUSH
50467: LD_VAR 0 2
50471: PPUSH
50472: CALL_OW 251
50476: ST_TO_ADDR
// d := GetDir ( building ) ;
50477: LD_ADDR_VAR 0 8
50481: PUSH
50482: LD_VAR 0 2
50486: PPUSH
50487: CALL_OW 254
50491: ST_TO_ADDR
// r := 4 ;
50492: LD_ADDR_VAR 0 9
50496: PUSH
50497: LD_INT 4
50499: ST_TO_ADDR
// for i := 1 to 5 do
50500: LD_ADDR_VAR 0 10
50504: PUSH
50505: DOUBLE
50506: LD_INT 1
50508: DEC
50509: ST_TO_ADDR
50510: LD_INT 5
50512: PUSH
50513: FOR_TO
50514: IFFALSE 50673
// begin _x := ShiftX ( x , d , r + i ) ;
50516: LD_ADDR_VAR 0 5
50520: PUSH
50521: LD_VAR 0 4
50525: PPUSH
50526: LD_VAR 0 8
50530: PPUSH
50531: LD_VAR 0 9
50535: PUSH
50536: LD_VAR 0 10
50540: PLUS
50541: PPUSH
50542: CALL_OW 272
50546: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50547: LD_ADDR_VAR 0 7
50551: PUSH
50552: LD_VAR 0 6
50556: PPUSH
50557: LD_VAR 0 8
50561: PPUSH
50562: LD_VAR 0 9
50566: PUSH
50567: LD_VAR 0 10
50571: PLUS
50572: PPUSH
50573: CALL_OW 273
50577: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50578: LD_VAR 0 5
50582: PPUSH
50583: LD_VAR 0 7
50587: PPUSH
50588: CALL_OW 488
50592: IFFALSE 50627
50594: PUSH
50595: LD_VAR 0 5
50599: PPUSH
50600: LD_VAR 0 7
50604: PPUSH
50605: CALL_OW 428
50609: PPUSH
50610: CALL_OW 247
50614: PUSH
50615: LD_INT 3
50617: PUSH
50618: LD_INT 2
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: IN
50625: NOT
50626: AND
50627: IFFALSE 50671
// begin ComMoveXY ( unit , _x , _y ) ;
50629: LD_VAR 0 1
50633: PPUSH
50634: LD_VAR 0 5
50638: PPUSH
50639: LD_VAR 0 7
50643: PPUSH
50644: CALL_OW 111
// result := [ _x , _y ] ;
50648: LD_ADDR_VAR 0 3
50652: PUSH
50653: LD_VAR 0 5
50657: PUSH
50658: LD_VAR 0 7
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: ST_TO_ADDR
// exit ;
50667: POP
50668: POP
50669: GO 50675
// end ; end ;
50671: GO 50513
50673: POP
50674: POP
// end ;
50675: LD_VAR 0 3
50679: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50680: LD_INT 0
50682: PPUSH
50683: PPUSH
50684: PPUSH
// result := 0 ;
50685: LD_ADDR_VAR 0 3
50689: PUSH
50690: LD_INT 0
50692: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50693: LD_VAR 0 1
50697: PUSH
50698: LD_INT 0
50700: LESS
50701: IFTRUE 50713
50703: PUSH
50704: LD_VAR 0 1
50708: PUSH
50709: LD_INT 8
50711: GREATER
50712: OR
50713: IFTRUE 50725
50715: PUSH
50716: LD_VAR 0 2
50720: PUSH
50721: LD_INT 0
50723: LESS
50724: OR
50725: IFTRUE 50737
50727: PUSH
50728: LD_VAR 0 2
50732: PUSH
50733: LD_INT 8
50735: GREATER
50736: OR
50737: IFFALSE 50741
// exit ;
50739: GO 50816
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50741: LD_ADDR_VAR 0 4
50745: PUSH
50746: LD_INT 22
50748: PUSH
50749: LD_VAR 0 2
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PPUSH
50758: CALL_OW 69
50762: PUSH
50763: FOR_IN
50764: IFFALSE 50814
// begin un := UnitShoot ( i ) ;
50766: LD_ADDR_VAR 0 5
50770: PUSH
50771: LD_VAR 0 4
50775: PPUSH
50776: CALL_OW 504
50780: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50781: LD_VAR 0 5
50785: PPUSH
50786: CALL_OW 255
50790: PUSH
50791: LD_VAR 0 1
50795: EQUAL
50796: IFFALSE 50812
// begin result := un ;
50798: LD_ADDR_VAR 0 3
50802: PUSH
50803: LD_VAR 0 5
50807: ST_TO_ADDR
// exit ;
50808: POP
50809: POP
50810: GO 50816
// end ; end ;
50812: GO 50763
50814: POP
50815: POP
// end ;
50816: LD_VAR 0 3
50820: RET
// export function GetCargoBay ( units ) ; begin
50821: LD_INT 0
50823: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50824: LD_ADDR_VAR 0 2
50828: PUSH
50829: LD_VAR 0 1
50833: PPUSH
50834: LD_INT 2
50836: PUSH
50837: LD_INT 34
50839: PUSH
50840: LD_INT 12
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 34
50849: PUSH
50850: LD_INT 51
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 34
50859: PUSH
50860: LD_INT 32
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 34
50869: PUSH
50870: LD_INT 89
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: PPUSH
50884: CALL_OW 72
50888: ST_TO_ADDR
// end ;
50889: LD_VAR 0 2
50893: RET
// export function Negate ( value ) ; begin
50894: LD_INT 0
50896: PPUSH
// result := not value ;
50897: LD_ADDR_VAR 0 2
50901: PUSH
50902: LD_VAR 0 1
50906: NOT
50907: ST_TO_ADDR
// end ;
50908: LD_VAR 0 2
50912: RET
// export function Inc ( value ) ; begin
50913: LD_INT 0
50915: PPUSH
// result := value + 1 ;
50916: LD_ADDR_VAR 0 2
50920: PUSH
50921: LD_VAR 0 1
50925: PUSH
50926: LD_INT 1
50928: PLUS
50929: ST_TO_ADDR
// end ;
50930: LD_VAR 0 2
50934: RET
// export function Dec ( value ) ; begin
50935: LD_INT 0
50937: PPUSH
// result := value - 1 ;
50938: LD_ADDR_VAR 0 2
50942: PUSH
50943: LD_VAR 0 1
50947: PUSH
50948: LD_INT 1
50950: MINUS
50951: ST_TO_ADDR
// end ;
50952: LD_VAR 0 2
50956: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50957: LD_INT 0
50959: PPUSH
50960: PPUSH
50961: PPUSH
50962: PPUSH
50963: PPUSH
50964: PPUSH
50965: PPUSH
50966: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50967: LD_VAR 0 1
50971: PPUSH
50972: LD_VAR 0 2
50976: PPUSH
50977: CALL_OW 488
50981: NOT
50982: IFTRUE 51001
50984: PUSH
50985: LD_VAR 0 3
50989: PPUSH
50990: LD_VAR 0 4
50994: PPUSH
50995: CALL_OW 488
50999: NOT
51000: OR
51001: IFFALSE 51014
// begin result := - 1 ;
51003: LD_ADDR_VAR 0 5
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: ST_TO_ADDR
// exit ;
51012: GO 51249
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
51014: LD_ADDR_VAR 0 12
51018: PUSH
51019: LD_VAR 0 1
51023: PPUSH
51024: LD_VAR 0 2
51028: PPUSH
51029: LD_VAR 0 3
51033: PPUSH
51034: LD_VAR 0 4
51038: PPUSH
51039: CALL 50085 0 4
51043: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
51044: LD_ADDR_VAR 0 11
51048: PUSH
51049: LD_VAR 0 1
51053: PPUSH
51054: LD_VAR 0 2
51058: PPUSH
51059: LD_VAR 0 12
51063: PUSH
51064: LD_INT 1
51066: ARRAY
51067: PPUSH
51068: LD_VAR 0 12
51072: PUSH
51073: LD_INT 2
51075: ARRAY
51076: PPUSH
51077: CALL_OW 298
51081: ST_TO_ADDR
// distance := 9999 ;
51082: LD_ADDR_VAR 0 10
51086: PUSH
51087: LD_INT 9999
51089: ST_TO_ADDR
// for i := 0 to 5 do
51090: LD_ADDR_VAR 0 6
51094: PUSH
51095: DOUBLE
51096: LD_INT 0
51098: DEC
51099: ST_TO_ADDR
51100: LD_INT 5
51102: PUSH
51103: FOR_TO
51104: IFFALSE 51247
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51106: LD_ADDR_VAR 0 7
51110: PUSH
51111: LD_VAR 0 1
51115: PPUSH
51116: LD_VAR 0 6
51120: PPUSH
51121: LD_VAR 0 11
51125: PPUSH
51126: CALL_OW 272
51130: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51131: LD_ADDR_VAR 0 8
51135: PUSH
51136: LD_VAR 0 2
51140: PPUSH
51141: LD_VAR 0 6
51145: PPUSH
51146: LD_VAR 0 11
51150: PPUSH
51151: CALL_OW 273
51155: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51156: LD_VAR 0 7
51160: PPUSH
51161: LD_VAR 0 8
51165: PPUSH
51166: CALL_OW 488
51170: NOT
51171: IFFALSE 51175
// continue ;
51173: GO 51103
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51175: LD_ADDR_VAR 0 9
51179: PUSH
51180: LD_VAR 0 12
51184: PUSH
51185: LD_INT 1
51187: ARRAY
51188: PPUSH
51189: LD_VAR 0 12
51193: PUSH
51194: LD_INT 2
51196: ARRAY
51197: PPUSH
51198: LD_VAR 0 7
51202: PPUSH
51203: LD_VAR 0 8
51207: PPUSH
51208: CALL_OW 298
51212: ST_TO_ADDR
// if tmp < distance then
51213: LD_VAR 0 9
51217: PUSH
51218: LD_VAR 0 10
51222: LESS
51223: IFFALSE 51245
// begin result := i ;
51225: LD_ADDR_VAR 0 5
51229: PUSH
51230: LD_VAR 0 6
51234: ST_TO_ADDR
// distance := tmp ;
51235: LD_ADDR_VAR 0 10
51239: PUSH
51240: LD_VAR 0 9
51244: ST_TO_ADDR
// end ; end ;
51245: GO 51103
51247: POP
51248: POP
// end ;
51249: LD_VAR 0 5
51253: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51254: LD_INT 0
51256: PPUSH
51257: PPUSH
// if not driver or not IsInUnit ( driver ) then
51258: LD_VAR 0 1
51262: NOT
51263: IFTRUE 51277
51265: PUSH
51266: LD_VAR 0 1
51270: PPUSH
51271: CALL_OW 310
51275: NOT
51276: OR
51277: IFFALSE 51281
// exit ;
51279: GO 51371
// vehicle := IsInUnit ( driver ) ;
51281: LD_ADDR_VAR 0 3
51285: PUSH
51286: LD_VAR 0 1
51290: PPUSH
51291: CALL_OW 310
51295: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51296: LD_VAR 0 1
51300: PPUSH
51301: LD_STRING \
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: PUSH
51331: LD_STRING E
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_VAR 0 3
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PPUSH
51367: CALL_OW 446
// end ;
51371: LD_VAR 0 2
51375: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51376: LD_INT 0
51378: PPUSH
51379: PPUSH
// if not driver or not IsInUnit ( driver ) then
51380: LD_VAR 0 1
51384: NOT
51385: IFTRUE 51399
51387: PUSH
51388: LD_VAR 0 1
51392: PPUSH
51393: CALL_OW 310
51397: NOT
51398: OR
51399: IFFALSE 51403
// exit ;
51401: GO 51493
// vehicle := IsInUnit ( driver ) ;
51403: LD_ADDR_VAR 0 3
51407: PUSH
51408: LD_VAR 0 1
51412: PPUSH
51413: CALL_OW 310
51417: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51418: LD_VAR 0 1
51422: PPUSH
51423: LD_STRING \
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: PUSH
51453: LD_STRING E
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: LD_VAR 0 3
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PPUSH
51489: CALL_OW 447
// end ;
51493: LD_VAR 0 2
51497: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51498: LD_INT 0
51500: PPUSH
51501: PPUSH
51502: PPUSH
// tmp := [ ] ;
51503: LD_ADDR_VAR 0 5
51507: PUSH
51508: EMPTY
51509: ST_TO_ADDR
// for i in units do
51510: LD_ADDR_VAR 0 4
51514: PUSH
51515: LD_VAR 0 1
51519: PUSH
51520: FOR_IN
51521: IFFALSE 51559
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51523: LD_ADDR_VAR 0 5
51527: PUSH
51528: LD_VAR 0 5
51532: PPUSH
51533: LD_VAR 0 5
51537: PUSH
51538: LD_INT 1
51540: PLUS
51541: PPUSH
51542: LD_VAR 0 4
51546: PPUSH
51547: CALL_OW 256
51551: PPUSH
51552: CALL_OW 2
51556: ST_TO_ADDR
51557: GO 51520
51559: POP
51560: POP
// if not tmp then
51561: LD_VAR 0 5
51565: NOT
51566: IFFALSE 51570
// exit ;
51568: GO 51618
// if asc then
51570: LD_VAR 0 2
51574: IFFALSE 51598
// result := SortListByListAsc ( units , tmp ) else
51576: LD_ADDR_VAR 0 3
51580: PUSH
51581: LD_VAR 0 1
51585: PPUSH
51586: LD_VAR 0 5
51590: PPUSH
51591: CALL_OW 76
51595: ST_TO_ADDR
51596: GO 51618
// result := SortListByListDesc ( units , tmp ) ;
51598: LD_ADDR_VAR 0 3
51602: PUSH
51603: LD_VAR 0 1
51607: PPUSH
51608: LD_VAR 0 5
51612: PPUSH
51613: CALL_OW 77
51617: ST_TO_ADDR
// end ;
51618: LD_VAR 0 3
51622: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51623: LD_INT 0
51625: PPUSH
51626: PPUSH
// task := GetTaskList ( mech ) ;
51627: LD_ADDR_VAR 0 4
51631: PUSH
51632: LD_VAR 0 1
51636: PPUSH
51637: CALL_OW 437
51641: ST_TO_ADDR
// if not task then
51642: LD_VAR 0 4
51646: NOT
51647: IFFALSE 51651
// exit ;
51649: GO 51695
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51651: LD_ADDR_VAR 0 3
51655: PUSH
51656: LD_VAR 0 4
51660: PUSH
51661: LD_INT 1
51663: ARRAY
51664: PUSH
51665: LD_INT 1
51667: ARRAY
51668: PUSH
51669: LD_STRING r
51671: EQUAL
51672: IFFALSE 51694
51674: PUSH
51675: LD_VAR 0 4
51679: PUSH
51680: LD_INT 1
51682: ARRAY
51683: PUSH
51684: LD_INT 4
51686: ARRAY
51687: PUSH
51688: LD_VAR 0 2
51692: EQUAL
51693: AND
51694: ST_TO_ADDR
// end ;
51695: LD_VAR 0 3
51699: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51700: LD_INT 0
51702: PPUSH
// SetDir ( unit , d ) ;
51703: LD_VAR 0 1
51707: PPUSH
51708: LD_VAR 0 4
51712: PPUSH
51713: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51717: LD_ADDR_VAR 0 6
51721: PUSH
51722: LD_VAR 0 1
51726: PPUSH
51727: LD_VAR 0 2
51731: PPUSH
51732: LD_VAR 0 3
51736: PPUSH
51737: LD_VAR 0 5
51741: PPUSH
51742: CALL_OW 48
51746: ST_TO_ADDR
// end ;
51747: LD_VAR 0 6
51751: RET
// export function ToNaturalNumber ( number ) ; begin
51752: LD_INT 0
51754: PPUSH
// result := number div 1 ;
51755: LD_ADDR_VAR 0 2
51759: PUSH
51760: LD_VAR 0 1
51764: PUSH
51765: LD_INT 1
51767: DIV
51768: ST_TO_ADDR
// if number < 0 then
51769: LD_VAR 0 1
51773: PUSH
51774: LD_INT 0
51776: LESS
51777: IFFALSE 51787
// result := 0 ;
51779: LD_ADDR_VAR 0 2
51783: PUSH
51784: LD_INT 0
51786: ST_TO_ADDR
// end ;
51787: LD_VAR 0 2
51791: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51792: LD_INT 0
51794: PPUSH
51795: PPUSH
51796: PPUSH
// if not buildings then
51797: LD_VAR 0 1
51801: NOT
51802: IFFALSE 51806
// exit ;
51804: GO 51921
// tmp := [ ] ;
51806: LD_ADDR_VAR 0 5
51810: PUSH
51811: EMPTY
51812: ST_TO_ADDR
// for b in buildings do
51813: LD_ADDR_VAR 0 4
51817: PUSH
51818: LD_VAR 0 1
51822: PUSH
51823: FOR_IN
51824: IFFALSE 51862
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51826: LD_ADDR_VAR 0 5
51830: PUSH
51831: LD_VAR 0 5
51835: PPUSH
51836: LD_VAR 0 5
51840: PUSH
51841: LD_INT 1
51843: PLUS
51844: PPUSH
51845: LD_VAR 0 4
51849: PPUSH
51850: CALL_OW 266
51854: PPUSH
51855: CALL_OW 1
51859: ST_TO_ADDR
51860: GO 51823
51862: POP
51863: POP
// if not tmp then
51864: LD_VAR 0 5
51868: NOT
51869: IFFALSE 51873
// exit ;
51871: GO 51921
// if asc then
51873: LD_VAR 0 2
51877: IFFALSE 51901
// result := SortListByListAsc ( buildings , tmp ) else
51879: LD_ADDR_VAR 0 3
51883: PUSH
51884: LD_VAR 0 1
51888: PPUSH
51889: LD_VAR 0 5
51893: PPUSH
51894: CALL_OW 76
51898: ST_TO_ADDR
51899: GO 51921
// result := SortListByListDesc ( buildings , tmp ) ;
51901: LD_ADDR_VAR 0 3
51905: PUSH
51906: LD_VAR 0 1
51910: PPUSH
51911: LD_VAR 0 5
51915: PPUSH
51916: CALL_OW 77
51920: ST_TO_ADDR
// end ;
51921: LD_VAR 0 3
51925: RET
// export function SortByClass ( units , class ) ; var un ; begin
51926: LD_INT 0
51928: PPUSH
51929: PPUSH
// if not units or not class then
51930: LD_VAR 0 1
51934: NOT
51935: IFTRUE 51944
51937: PUSH
51938: LD_VAR 0 2
51942: NOT
51943: OR
51944: IFFALSE 51948
// exit ;
51946: GO 52043
// result := [ ] ;
51948: LD_ADDR_VAR 0 3
51952: PUSH
51953: EMPTY
51954: ST_TO_ADDR
// for un in units do
51955: LD_ADDR_VAR 0 4
51959: PUSH
51960: LD_VAR 0 1
51964: PUSH
51965: FOR_IN
51966: IFFALSE 52041
// if GetClass ( un ) = class then
51968: LD_VAR 0 4
51972: PPUSH
51973: CALL_OW 257
51977: PUSH
51978: LD_VAR 0 2
51982: EQUAL
51983: IFFALSE 52010
// result := Insert ( result , 1 , un ) else
51985: LD_ADDR_VAR 0 3
51989: PUSH
51990: LD_VAR 0 3
51994: PPUSH
51995: LD_INT 1
51997: PPUSH
51998: LD_VAR 0 4
52002: PPUSH
52003: CALL_OW 2
52007: ST_TO_ADDR
52008: GO 52039
// result := Replace ( result , result + 1 , un ) ;
52010: LD_ADDR_VAR 0 3
52014: PUSH
52015: LD_VAR 0 3
52019: PPUSH
52020: LD_VAR 0 3
52024: PUSH
52025: LD_INT 1
52027: PLUS
52028: PPUSH
52029: LD_VAR 0 4
52033: PPUSH
52034: CALL_OW 1
52038: ST_TO_ADDR
52039: GO 51965
52041: POP
52042: POP
// end ;
52043: LD_VAR 0 3
52047: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
52048: LD_INT 0
52050: PPUSH
52051: PPUSH
52052: PPUSH
52053: PPUSH
52054: PPUSH
52055: PPUSH
52056: PPUSH
// result := [ ] ;
52057: LD_ADDR_VAR 0 4
52061: PUSH
52062: EMPTY
52063: ST_TO_ADDR
// if x - r < 0 then
52064: LD_VAR 0 1
52068: PUSH
52069: LD_VAR 0 3
52073: MINUS
52074: PUSH
52075: LD_INT 0
52077: LESS
52078: IFFALSE 52090
// min_x := 0 else
52080: LD_ADDR_VAR 0 8
52084: PUSH
52085: LD_INT 0
52087: ST_TO_ADDR
52088: GO 52106
// min_x := x - r ;
52090: LD_ADDR_VAR 0 8
52094: PUSH
52095: LD_VAR 0 1
52099: PUSH
52100: LD_VAR 0 3
52104: MINUS
52105: ST_TO_ADDR
// if y - r < 0 then
52106: LD_VAR 0 2
52110: PUSH
52111: LD_VAR 0 3
52115: MINUS
52116: PUSH
52117: LD_INT 0
52119: LESS
52120: IFFALSE 52132
// min_y := 0 else
52122: LD_ADDR_VAR 0 7
52126: PUSH
52127: LD_INT 0
52129: ST_TO_ADDR
52130: GO 52148
// min_y := y - r ;
52132: LD_ADDR_VAR 0 7
52136: PUSH
52137: LD_VAR 0 2
52141: PUSH
52142: LD_VAR 0 3
52146: MINUS
52147: ST_TO_ADDR
// max_x := x + r ;
52148: LD_ADDR_VAR 0 9
52152: PUSH
52153: LD_VAR 0 1
52157: PUSH
52158: LD_VAR 0 3
52162: PLUS
52163: ST_TO_ADDR
// max_y := y + r ;
52164: LD_ADDR_VAR 0 10
52168: PUSH
52169: LD_VAR 0 2
52173: PUSH
52174: LD_VAR 0 3
52178: PLUS
52179: ST_TO_ADDR
// for _x = min_x to max_x do
52180: LD_ADDR_VAR 0 5
52184: PUSH
52185: DOUBLE
52186: LD_VAR 0 8
52190: DEC
52191: ST_TO_ADDR
52192: LD_VAR 0 9
52196: PUSH
52197: FOR_TO
52198: IFFALSE 52299
// for _y = min_y to max_y do
52200: LD_ADDR_VAR 0 6
52204: PUSH
52205: DOUBLE
52206: LD_VAR 0 7
52210: DEC
52211: ST_TO_ADDR
52212: LD_VAR 0 10
52216: PUSH
52217: FOR_TO
52218: IFFALSE 52295
// begin if not ValidHex ( _x , _y ) then
52220: LD_VAR 0 5
52224: PPUSH
52225: LD_VAR 0 6
52229: PPUSH
52230: CALL_OW 488
52234: NOT
52235: IFFALSE 52239
// continue ;
52237: GO 52217
// if GetResourceTypeXY ( _x , _y ) then
52239: LD_VAR 0 5
52243: PPUSH
52244: LD_VAR 0 6
52248: PPUSH
52249: CALL_OW 283
52253: IFFALSE 52293
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52255: LD_ADDR_VAR 0 4
52259: PUSH
52260: LD_VAR 0 4
52264: PPUSH
52265: LD_VAR 0 4
52269: PUSH
52270: LD_INT 1
52272: PLUS
52273: PPUSH
52274: LD_VAR 0 5
52278: PUSH
52279: LD_VAR 0 6
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PPUSH
52288: CALL_OW 1
52292: ST_TO_ADDR
// end ;
52293: GO 52217
52295: POP
52296: POP
52297: GO 52197
52299: POP
52300: POP
// end ;
52301: LD_VAR 0 4
52305: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52306: LD_INT 0
52308: PPUSH
52309: PPUSH
52310: PPUSH
52311: PPUSH
52312: PPUSH
52313: PPUSH
52314: PPUSH
52315: PPUSH
// if not units then
52316: LD_VAR 0 1
52320: NOT
52321: IFFALSE 52325
// exit ;
52323: GO 52857
// result := UnitFilter ( units , [ f_ok ] ) ;
52325: LD_ADDR_VAR 0 3
52329: PUSH
52330: LD_VAR 0 1
52334: PPUSH
52335: LD_INT 50
52337: PUSH
52338: EMPTY
52339: LIST
52340: PPUSH
52341: CALL_OW 72
52345: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52346: LD_ADDR_VAR 0 8
52350: PUSH
52351: LD_VAR 0 1
52355: PUSH
52356: LD_INT 1
52358: ARRAY
52359: PPUSH
52360: CALL_OW 255
52364: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52365: LD_ADDR_VAR 0 10
52369: PUSH
52370: LD_INT 29
52372: PUSH
52373: LD_INT 91
52375: PUSH
52376: LD_INT 49
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: LIST
52383: ST_TO_ADDR
// if not result then
52384: LD_VAR 0 3
52388: NOT
52389: IFFALSE 52393
// exit ;
52391: GO 52857
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52393: LD_ADDR_VAR 0 5
52397: PUSH
52398: LD_INT 81
52400: PUSH
52401: LD_VAR 0 8
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PPUSH
52410: CALL_OW 69
52414: ST_TO_ADDR
// for i in result do
52415: LD_ADDR_VAR 0 4
52419: PUSH
52420: LD_VAR 0 3
52424: PUSH
52425: FOR_IN
52426: IFFALSE 52855
// begin tag := GetTag ( i ) + 1 ;
52428: LD_ADDR_VAR 0 9
52432: PUSH
52433: LD_VAR 0 4
52437: PPUSH
52438: CALL_OW 110
52442: PUSH
52443: LD_INT 1
52445: PLUS
52446: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
52447: LD_ADDR_VAR 0 7
52451: PUSH
52452: LD_VAR 0 4
52456: PPUSH
52457: CALL_OW 250
52461: PPUSH
52462: LD_VAR 0 4
52466: PPUSH
52467: CALL_OW 251
52471: PPUSH
52472: LD_INT 4
52474: PPUSH
52475: CALL 52048 0 3
52479: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
52480: LD_VAR 0 4
52484: PPUSH
52485: CALL_OW 247
52489: PUSH
52490: LD_INT 2
52492: EQUAL
52493: IFFALSE 52505
52495: PUSH
52496: LD_VAR 0 7
52500: PUSH
52501: LD_INT 2
52503: GREATER
52504: AND
52505: IFFALSE 52525
52507: PUSH
52508: LD_VAR 0 4
52512: PPUSH
52513: CALL_OW 264
52517: PUSH
52518: LD_VAR 0 10
52522: IN
52523: NOT
52524: AND
52525: IFFALSE 52564
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52527: LD_VAR 0 4
52531: PPUSH
52532: LD_VAR 0 7
52536: PUSH
52537: LD_INT 1
52539: ARRAY
52540: PUSH
52541: LD_INT 1
52543: ARRAY
52544: PPUSH
52545: LD_VAR 0 7
52549: PUSH
52550: LD_INT 1
52552: ARRAY
52553: PUSH
52554: LD_INT 2
52556: ARRAY
52557: PPUSH
52558: CALL_OW 116
52562: GO 52853
// if path > tag then
52564: LD_VAR 0 2
52568: PUSH
52569: LD_VAR 0 9
52573: GREATER
52574: IFFALSE 52782
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
52576: LD_ADDR_VAR 0 6
52580: PUSH
52581: LD_VAR 0 5
52585: PPUSH
52586: LD_INT 91
52588: PUSH
52589: LD_VAR 0 4
52593: PUSH
52594: LD_INT 8
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: LIST
52601: PPUSH
52602: CALL_OW 72
52606: ST_TO_ADDR
// if nearEnemy then
52607: LD_VAR 0 6
52611: IFFALSE 52680
// begin if GetWeapon ( i ) = ru_time_lapser then
52613: LD_VAR 0 4
52617: PPUSH
52618: CALL_OW 264
52622: PUSH
52623: LD_INT 49
52625: EQUAL
52626: IFFALSE 52654
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52628: LD_VAR 0 4
52632: PPUSH
52633: LD_VAR 0 6
52637: PPUSH
52638: LD_VAR 0 4
52642: PPUSH
52643: CALL_OW 74
52647: PPUSH
52648: CALL_OW 112
52652: GO 52678
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52654: LD_VAR 0 4
52658: PPUSH
52659: LD_VAR 0 6
52663: PPUSH
52664: LD_VAR 0 4
52668: PPUSH
52669: CALL_OW 74
52673: PPUSH
52674: CALL 53938 0 2
// end else
52678: GO 52780
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52680: LD_VAR 0 4
52684: PPUSH
52685: LD_VAR 0 2
52689: PUSH
52690: LD_VAR 0 9
52694: ARRAY
52695: PUSH
52696: LD_INT 1
52698: ARRAY
52699: PPUSH
52700: LD_VAR 0 2
52704: PUSH
52705: LD_VAR 0 9
52709: ARRAY
52710: PUSH
52711: LD_INT 2
52713: ARRAY
52714: PPUSH
52715: CALL_OW 297
52719: PUSH
52720: LD_INT 6
52722: GREATER
52723: IFFALSE 52766
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52725: LD_VAR 0 4
52729: PPUSH
52730: LD_VAR 0 2
52734: PUSH
52735: LD_VAR 0 9
52739: ARRAY
52740: PUSH
52741: LD_INT 1
52743: ARRAY
52744: PPUSH
52745: LD_VAR 0 2
52749: PUSH
52750: LD_VAR 0 9
52754: ARRAY
52755: PUSH
52756: LD_INT 2
52758: ARRAY
52759: PPUSH
52760: CALL_OW 114
52764: GO 52780
// SetTag ( i , tag ) ;
52766: LD_VAR 0 4
52770: PPUSH
52771: LD_VAR 0 9
52775: PPUSH
52776: CALL_OW 109
// end else
52780: GO 52853
// if enemy then
52782: LD_VAR 0 5
52786: IFFALSE 52853
// begin if GetWeapon ( i ) = ru_time_lapser then
52788: LD_VAR 0 4
52792: PPUSH
52793: CALL_OW 264
52797: PUSH
52798: LD_INT 49
52800: EQUAL
52801: IFFALSE 52829
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52803: LD_VAR 0 4
52807: PPUSH
52808: LD_VAR 0 5
52812: PPUSH
52813: LD_VAR 0 4
52817: PPUSH
52818: CALL_OW 74
52822: PPUSH
52823: CALL_OW 112
52827: GO 52853
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52829: LD_VAR 0 4
52833: PPUSH
52834: LD_VAR 0 5
52838: PPUSH
52839: LD_VAR 0 4
52843: PPUSH
52844: CALL_OW 74
52848: PPUSH
52849: CALL 53938 0 2
// end ; end ;
52853: GO 52425
52855: POP
52856: POP
// end ;
52857: LD_VAR 0 3
52861: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52862: LD_INT 0
52864: PPUSH
52865: PPUSH
52866: PPUSH
// if not unit or IsInUnit ( unit ) then
52867: LD_VAR 0 1
52871: NOT
52872: IFTRUE 52885
52874: PUSH
52875: LD_VAR 0 1
52879: PPUSH
52880: CALL_OW 310
52884: OR
52885: IFFALSE 52889
// exit ;
52887: GO 52980
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52889: LD_ADDR_VAR 0 4
52893: PUSH
52894: LD_VAR 0 1
52898: PPUSH
52899: CALL_OW 250
52903: PPUSH
52904: LD_VAR 0 2
52908: PPUSH
52909: LD_INT 1
52911: PPUSH
52912: CALL_OW 272
52916: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52917: LD_ADDR_VAR 0 5
52921: PUSH
52922: LD_VAR 0 1
52926: PPUSH
52927: CALL_OW 251
52931: PPUSH
52932: LD_VAR 0 2
52936: PPUSH
52937: LD_INT 1
52939: PPUSH
52940: CALL_OW 273
52944: ST_TO_ADDR
// if ValidHex ( x , y ) then
52945: LD_VAR 0 4
52949: PPUSH
52950: LD_VAR 0 5
52954: PPUSH
52955: CALL_OW 488
52959: IFFALSE 52980
// ComTurnXY ( unit , x , y ) ;
52961: LD_VAR 0 1
52965: PPUSH
52966: LD_VAR 0 4
52970: PPUSH
52971: LD_VAR 0 5
52975: PPUSH
52976: CALL_OW 118
// end ;
52980: LD_VAR 0 3
52984: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52985: LD_INT 0
52987: PPUSH
52988: PPUSH
// result := false ;
52989: LD_ADDR_VAR 0 3
52993: PUSH
52994: LD_INT 0
52996: ST_TO_ADDR
// if not units then
52997: LD_VAR 0 2
53001: NOT
53002: IFFALSE 53006
// exit ;
53004: GO 53051
// for i in units do
53006: LD_ADDR_VAR 0 4
53010: PUSH
53011: LD_VAR 0 2
53015: PUSH
53016: FOR_IN
53017: IFFALSE 53049
// if See ( side , i ) then
53019: LD_VAR 0 1
53023: PPUSH
53024: LD_VAR 0 4
53028: PPUSH
53029: CALL_OW 292
53033: IFFALSE 53047
// begin result := true ;
53035: LD_ADDR_VAR 0 3
53039: PUSH
53040: LD_INT 1
53042: ST_TO_ADDR
// exit ;
53043: POP
53044: POP
53045: GO 53051
// end ;
53047: GO 53016
53049: POP
53050: POP
// end ;
53051: LD_VAR 0 3
53055: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
53056: LD_INT 0
53058: PPUSH
53059: PPUSH
53060: PPUSH
53061: PPUSH
// if not unit or not points then
53062: LD_VAR 0 1
53066: NOT
53067: IFTRUE 53076
53069: PUSH
53070: LD_VAR 0 2
53074: NOT
53075: OR
53076: IFFALSE 53080
// exit ;
53078: GO 53170
// dist := 99999 ;
53080: LD_ADDR_VAR 0 5
53084: PUSH
53085: LD_INT 99999
53087: ST_TO_ADDR
// for i in points do
53088: LD_ADDR_VAR 0 4
53092: PUSH
53093: LD_VAR 0 2
53097: PUSH
53098: FOR_IN
53099: IFFALSE 53168
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
53101: LD_ADDR_VAR 0 6
53105: PUSH
53106: LD_VAR 0 1
53110: PPUSH
53111: LD_VAR 0 4
53115: PUSH
53116: LD_INT 1
53118: ARRAY
53119: PPUSH
53120: LD_VAR 0 4
53124: PUSH
53125: LD_INT 2
53127: ARRAY
53128: PPUSH
53129: CALL_OW 297
53133: ST_TO_ADDR
// if tmpDist < dist then
53134: LD_VAR 0 6
53138: PUSH
53139: LD_VAR 0 5
53143: LESS
53144: IFFALSE 53166
// begin result := i ;
53146: LD_ADDR_VAR 0 3
53150: PUSH
53151: LD_VAR 0 4
53155: ST_TO_ADDR
// dist := tmpDist ;
53156: LD_ADDR_VAR 0 5
53160: PUSH
53161: LD_VAR 0 6
53165: ST_TO_ADDR
// end ; end ;
53166: GO 53098
53168: POP
53169: POP
// end ;
53170: LD_VAR 0 3
53174: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
53175: LD_INT 0
53177: PPUSH
// uc_side := side ;
53178: LD_ADDR_OWVAR 20
53182: PUSH
53183: LD_VAR 0 1
53187: ST_TO_ADDR
// uc_nation := 3 ;
53188: LD_ADDR_OWVAR 21
53192: PUSH
53193: LD_INT 3
53195: ST_TO_ADDR
// vc_chassis := 25 ;
53196: LD_ADDR_OWVAR 37
53200: PUSH
53201: LD_INT 25
53203: ST_TO_ADDR
// vc_engine := engine_siberite ;
53204: LD_ADDR_OWVAR 39
53208: PUSH
53209: LD_INT 3
53211: ST_TO_ADDR
// vc_control := control_computer ;
53212: LD_ADDR_OWVAR 38
53216: PUSH
53217: LD_INT 3
53219: ST_TO_ADDR
// vc_weapon := 59 ;
53220: LD_ADDR_OWVAR 40
53224: PUSH
53225: LD_INT 59
53227: ST_TO_ADDR
// result := CreateVehicle ;
53228: LD_ADDR_VAR 0 5
53232: PUSH
53233: CALL_OW 45
53237: ST_TO_ADDR
// SetDir ( result , d ) ;
53238: LD_VAR 0 5
53242: PPUSH
53243: LD_VAR 0 4
53247: PPUSH
53248: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
53252: LD_VAR 0 5
53256: PPUSH
53257: LD_VAR 0 2
53261: PPUSH
53262: LD_VAR 0 3
53266: PPUSH
53267: LD_INT 0
53269: PPUSH
53270: CALL_OW 48
// end ;
53274: LD_VAR 0 5
53278: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
53279: LD_INT 0
53281: PPUSH
53282: PPUSH
53283: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
53284: LD_ADDR_VAR 0 2
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
53307: LD_VAR 0 1
53311: NOT
53312: IFTRUE 53345
53314: PUSH
53315: LD_VAR 0 1
53319: PPUSH
53320: CALL_OW 264
53324: PUSH
53325: LD_INT 12
53327: PUSH
53328: LD_INT 51
53330: PUSH
53331: LD_INT 32
53333: PUSH
53334: LD_INT 89
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: IN
53343: NOT
53344: OR
53345: IFFALSE 53349
// exit ;
53347: GO 53447
// for i := 1 to 3 do
53349: LD_ADDR_VAR 0 3
53353: PUSH
53354: DOUBLE
53355: LD_INT 1
53357: DEC
53358: ST_TO_ADDR
53359: LD_INT 3
53361: PUSH
53362: FOR_TO
53363: IFFALSE 53445
// begin tmp := GetCargo ( cargo , i ) ;
53365: LD_ADDR_VAR 0 4
53369: PUSH
53370: LD_VAR 0 1
53374: PPUSH
53375: LD_VAR 0 3
53379: PPUSH
53380: CALL_OW 289
53384: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53385: LD_ADDR_VAR 0 2
53389: PUSH
53390: LD_VAR 0 2
53394: PPUSH
53395: LD_VAR 0 3
53399: PPUSH
53400: LD_VAR 0 4
53404: PPUSH
53405: CALL_OW 1
53409: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53410: LD_ADDR_VAR 0 2
53414: PUSH
53415: LD_VAR 0 2
53419: PPUSH
53420: LD_INT 4
53422: PPUSH
53423: LD_VAR 0 2
53427: PUSH
53428: LD_INT 4
53430: ARRAY
53431: PUSH
53432: LD_VAR 0 4
53436: PLUS
53437: PPUSH
53438: CALL_OW 1
53442: ST_TO_ADDR
// end ;
53443: GO 53362
53445: POP
53446: POP
// end ;
53447: LD_VAR 0 2
53451: RET
// export function Length ( array ) ; begin
53452: LD_INT 0
53454: PPUSH
// result := array + 0 ;
53455: LD_ADDR_VAR 0 2
53459: PUSH
53460: LD_VAR 0 1
53464: PUSH
53465: LD_INT 0
53467: PLUS
53468: ST_TO_ADDR
// end ;
53469: LD_VAR 0 2
53473: RET
// export function PrepareArray ( array ) ; begin
53474: LD_INT 0
53476: PPUSH
// result := array diff 0 ;
53477: LD_ADDR_VAR 0 2
53481: PUSH
53482: LD_VAR 0 1
53486: PUSH
53487: LD_INT 0
53489: DIFF
53490: ST_TO_ADDR
// if not result [ 1 ] then
53491: LD_VAR 0 2
53495: PUSH
53496: LD_INT 1
53498: ARRAY
53499: NOT
53500: IFFALSE 53520
// result := Delete ( result , 1 ) ;
53502: LD_ADDR_VAR 0 2
53506: PUSH
53507: LD_VAR 0 2
53511: PPUSH
53512: LD_INT 1
53514: PPUSH
53515: CALL_OW 3
53519: ST_TO_ADDR
// end ;
53520: LD_VAR 0 2
53524: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
53525: LD_INT 0
53527: PPUSH
53528: PPUSH
53529: PPUSH
53530: PPUSH
// sibRocketRange := 25 ;
53531: LD_ADDR_VAR 0 6
53535: PUSH
53536: LD_INT 25
53538: ST_TO_ADDR
// result := false ;
53539: LD_ADDR_VAR 0 4
53543: PUSH
53544: LD_INT 0
53546: ST_TO_ADDR
// for i := 0 to 5 do
53547: LD_ADDR_VAR 0 5
53551: PUSH
53552: DOUBLE
53553: LD_INT 0
53555: DEC
53556: ST_TO_ADDR
53557: LD_INT 5
53559: PUSH
53560: FOR_TO
53561: IFFALSE 53628
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
53563: LD_VAR 0 1
53567: PPUSH
53568: LD_VAR 0 5
53572: PPUSH
53573: LD_VAR 0 6
53577: PPUSH
53578: CALL_OW 272
53582: PPUSH
53583: LD_VAR 0 2
53587: PPUSH
53588: LD_VAR 0 5
53592: PPUSH
53593: LD_VAR 0 6
53597: PPUSH
53598: CALL_OW 273
53602: PPUSH
53603: LD_VAR 0 3
53607: PPUSH
53608: CALL_OW 309
53612: IFFALSE 53626
// begin result := true ;
53614: LD_ADDR_VAR 0 4
53618: PUSH
53619: LD_INT 1
53621: ST_TO_ADDR
// exit ;
53622: POP
53623: POP
53624: GO 53630
// end ;
53626: GO 53560
53628: POP
53629: POP
// end ;
53630: LD_VAR 0 4
53634: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
53635: LD_INT 0
53637: PPUSH
53638: PPUSH
53639: PPUSH
// if btype = b_depot then
53640: LD_VAR 0 2
53644: PUSH
53645: LD_INT 0
53647: EQUAL
53648: IFFALSE 53660
// begin result := true ;
53650: LD_ADDR_VAR 0 3
53654: PUSH
53655: LD_INT 1
53657: ST_TO_ADDR
// exit ;
53658: GO 53780
// end ; pom := GetBase ( depot ) ;
53660: LD_ADDR_VAR 0 4
53664: PUSH
53665: LD_VAR 0 1
53669: PPUSH
53670: CALL_OW 274
53674: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53675: LD_ADDR_VAR 0 5
53679: PUSH
53680: LD_VAR 0 2
53684: PPUSH
53685: LD_VAR 0 1
53689: PPUSH
53690: CALL_OW 248
53694: PPUSH
53695: CALL_OW 450
53699: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53700: LD_ADDR_VAR 0 3
53704: PUSH
53705: LD_VAR 0 4
53709: PPUSH
53710: LD_INT 1
53712: PPUSH
53713: CALL_OW 275
53717: PUSH
53718: LD_VAR 0 5
53722: PUSH
53723: LD_INT 1
53725: ARRAY
53726: GREATEREQUAL
53727: IFFALSE 53753
53729: PUSH
53730: LD_VAR 0 4
53734: PPUSH
53735: LD_INT 2
53737: PPUSH
53738: CALL_OW 275
53742: PUSH
53743: LD_VAR 0 5
53747: PUSH
53748: LD_INT 2
53750: ARRAY
53751: GREATEREQUAL
53752: AND
53753: IFFALSE 53779
53755: PUSH
53756: LD_VAR 0 4
53760: PPUSH
53761: LD_INT 3
53763: PPUSH
53764: CALL_OW 275
53768: PUSH
53769: LD_VAR 0 5
53773: PUSH
53774: LD_INT 3
53776: ARRAY
53777: GREATEREQUAL
53778: AND
53779: ST_TO_ADDR
// end ;
53780: LD_VAR 0 3
53784: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53785: LD_INT 0
53787: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53788: LD_VAR 0 1
53792: PPUSH
53793: LD_VAR 0 2
53797: PPUSH
53798: LD_INT 0
53800: PPUSH
53801: LD_INT 0
53803: PPUSH
53804: LD_INT 1
53806: PPUSH
53807: LD_INT 0
53809: PPUSH
53810: CALL_OW 587
// end ;
53814: LD_VAR 0 3
53818: RET
// export function CenterOnNow ( unit ) ; begin
53819: LD_INT 0
53821: PPUSH
// result := IsInUnit ( unit ) ;
53822: LD_ADDR_VAR 0 2
53826: PUSH
53827: LD_VAR 0 1
53831: PPUSH
53832: CALL_OW 310
53836: ST_TO_ADDR
// if not result then
53837: LD_VAR 0 2
53841: NOT
53842: IFFALSE 53854
// result := unit ;
53844: LD_ADDR_VAR 0 2
53848: PUSH
53849: LD_VAR 0 1
53853: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53854: LD_VAR 0 1
53858: PPUSH
53859: CALL_OW 87
// end ;
53863: LD_VAR 0 2
53867: RET
// export function ComMoveHex ( unit , hex ) ; begin
53868: LD_INT 0
53870: PPUSH
// if not hex then
53871: LD_VAR 0 2
53875: NOT
53876: IFFALSE 53880
// exit ;
53878: GO 53933
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53880: LD_VAR 0 2
53884: PUSH
53885: LD_INT 1
53887: ARRAY
53888: PPUSH
53889: LD_VAR 0 2
53893: PUSH
53894: LD_INT 2
53896: ARRAY
53897: PPUSH
53898: CALL_OW 428
53902: IFFALSE 53906
// exit ;
53904: GO 53933
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53906: LD_VAR 0 1
53910: PPUSH
53911: LD_VAR 0 2
53915: PUSH
53916: LD_INT 1
53918: ARRAY
53919: PPUSH
53920: LD_VAR 0 2
53924: PUSH
53925: LD_INT 2
53927: ARRAY
53928: PPUSH
53929: CALL_OW 111
// end ;
53933: LD_VAR 0 3
53937: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53938: LD_INT 0
53940: PPUSH
53941: PPUSH
53942: PPUSH
// if not unit or not enemy then
53943: LD_VAR 0 1
53947: NOT
53948: IFTRUE 53957
53950: PUSH
53951: LD_VAR 0 2
53955: NOT
53956: OR
53957: IFFALSE 53961
// exit ;
53959: GO 54087
// x := GetX ( enemy ) ;
53961: LD_ADDR_VAR 0 4
53965: PUSH
53966: LD_VAR 0 2
53970: PPUSH
53971: CALL_OW 250
53975: ST_TO_ADDR
// y := GetY ( enemy ) ;
53976: LD_ADDR_VAR 0 5
53980: PUSH
53981: LD_VAR 0 2
53985: PPUSH
53986: CALL_OW 251
53990: ST_TO_ADDR
// if ValidHex ( x , y ) then
53991: LD_VAR 0 4
53995: PPUSH
53996: LD_VAR 0 5
54000: PPUSH
54001: CALL_OW 488
54005: IFFALSE 54087
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
54007: LD_VAR 0 2
54011: PPUSH
54012: CALL_OW 247
54016: PUSH
54017: LD_INT 3
54019: PUSH
54020: LD_INT 2
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: IN
54027: IFTRUE 54050
54029: PUSH
54030: LD_VAR 0 1
54034: PPUSH
54035: CALL_OW 255
54039: PPUSH
54040: LD_VAR 0 2
54044: PPUSH
54045: CALL_OW 292
54049: OR
54050: IFFALSE 54068
// ComAttackUnit ( unit , enemy ) else
54052: LD_VAR 0 1
54056: PPUSH
54057: LD_VAR 0 2
54061: PPUSH
54062: CALL_OW 115
54066: GO 54087
// ComAgressiveMove ( unit , x , y ) ;
54068: LD_VAR 0 1
54072: PPUSH
54073: LD_VAR 0 4
54077: PPUSH
54078: LD_VAR 0 5
54082: PPUSH
54083: CALL_OW 114
// end ;
54087: LD_VAR 0 3
54091: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
54092: LD_INT 0
54094: PPUSH
54095: PPUSH
54096: PPUSH
// list := AreaToList ( area , 0 ) ;
54097: LD_ADDR_VAR 0 5
54101: PUSH
54102: LD_VAR 0 1
54106: PPUSH
54107: LD_INT 0
54109: PPUSH
54110: CALL_OW 517
54114: ST_TO_ADDR
// if not list then
54115: LD_VAR 0 5
54119: NOT
54120: IFFALSE 54124
// exit ;
54122: GO 54254
// if all then
54124: LD_VAR 0 2
54128: IFFALSE 54216
// begin for i := 1 to list [ 1 ] do
54130: LD_ADDR_VAR 0 4
54134: PUSH
54135: DOUBLE
54136: LD_INT 1
54138: DEC
54139: ST_TO_ADDR
54140: LD_VAR 0 5
54144: PUSH
54145: LD_INT 1
54147: ARRAY
54148: PUSH
54149: FOR_TO
54150: IFFALSE 54212
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
54152: LD_ADDR_VAR 0 3
54156: PUSH
54157: LD_VAR 0 3
54161: PPUSH
54162: LD_VAR 0 3
54166: PUSH
54167: LD_INT 1
54169: PLUS
54170: PPUSH
54171: LD_VAR 0 5
54175: PUSH
54176: LD_INT 1
54178: ARRAY
54179: PUSH
54180: LD_VAR 0 4
54184: ARRAY
54185: PUSH
54186: LD_VAR 0 5
54190: PUSH
54191: LD_INT 2
54193: ARRAY
54194: PUSH
54195: LD_VAR 0 4
54199: ARRAY
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PPUSH
54205: CALL_OW 1
54209: ST_TO_ADDR
54210: GO 54149
54212: POP
54213: POP
// exit ;
54214: GO 54254
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
54216: LD_ADDR_VAR 0 3
54220: PUSH
54221: LD_VAR 0 5
54225: PUSH
54226: LD_INT 1
54228: ARRAY
54229: PUSH
54230: LD_INT 1
54232: ARRAY
54233: PUSH
54234: LD_VAR 0 5
54238: PUSH
54239: LD_INT 2
54241: ARRAY
54242: PUSH
54243: LD_INT 1
54245: ARRAY
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: EMPTY
54252: LIST
54253: ST_TO_ADDR
// end ;
54254: LD_VAR 0 3
54258: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
54259: LD_INT 0
54261: PPUSH
54262: PPUSH
// list := AreaToList ( area , 0 ) ;
54263: LD_ADDR_VAR 0 4
54267: PUSH
54268: LD_VAR 0 1
54272: PPUSH
54273: LD_INT 0
54275: PPUSH
54276: CALL_OW 517
54280: ST_TO_ADDR
// if not list then
54281: LD_VAR 0 4
54285: NOT
54286: IFFALSE 54290
// exit ;
54288: GO 54331
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
54290: LD_ADDR_VAR 0 3
54294: PUSH
54295: LD_VAR 0 4
54299: PUSH
54300: LD_INT 1
54302: ARRAY
54303: PUSH
54304: LD_INT 1
54306: ARRAY
54307: PUSH
54308: LD_VAR 0 4
54312: PUSH
54313: LD_INT 2
54315: ARRAY
54316: PUSH
54317: LD_INT 1
54319: ARRAY
54320: PUSH
54321: LD_VAR 0 2
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: LIST
54330: ST_TO_ADDR
// end ;
54331: LD_VAR 0 3
54335: RET
// export function First ( array ) ; begin
54336: LD_INT 0
54338: PPUSH
// if not array then
54339: LD_VAR 0 1
54343: NOT
54344: IFFALSE 54348
// exit ;
54346: GO 54362
// result := array [ 1 ] ;
54348: LD_ADDR_VAR 0 2
54352: PUSH
54353: LD_VAR 0 1
54357: PUSH
54358: LD_INT 1
54360: ARRAY
54361: ST_TO_ADDR
// end ;
54362: LD_VAR 0 2
54366: RET
// export function Last ( array ) ; begin
54367: LD_INT 0
54369: PPUSH
// if not array then
54370: LD_VAR 0 1
54374: NOT
54375: IFFALSE 54379
// exit ;
54377: GO 54395
// result := array [ array ] ;
54379: LD_ADDR_VAR 0 2
54383: PUSH
54384: LD_VAR 0 1
54388: PUSH
54389: LD_VAR 0 1
54393: ARRAY
54394: ST_TO_ADDR
// end ;
54395: LD_VAR 0 2
54399: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
54400: LD_INT 0
54402: PPUSH
54403: PPUSH
// result := [ ] ;
54404: LD_ADDR_VAR 0 5
54408: PUSH
54409: EMPTY
54410: ST_TO_ADDR
// if not array then
54411: LD_VAR 0 1
54415: NOT
54416: IFFALSE 54420
// exit ;
54418: GO 54532
// for i := 1 to array do
54420: LD_ADDR_VAR 0 6
54424: PUSH
54425: DOUBLE
54426: LD_INT 1
54428: DEC
54429: ST_TO_ADDR
54430: LD_VAR 0 1
54434: PUSH
54435: FOR_TO
54436: IFFALSE 54530
// if array [ i ] [ index ] = value then
54438: LD_VAR 0 1
54442: PUSH
54443: LD_VAR 0 6
54447: ARRAY
54448: PUSH
54449: LD_VAR 0 2
54453: ARRAY
54454: PUSH
54455: LD_VAR 0 3
54459: EQUAL
54460: IFFALSE 54528
// begin if indexColumn then
54462: LD_VAR 0 4
54466: IFFALSE 54502
// result := Join ( result , array [ i ] [ indexColumn ] ) else
54468: LD_ADDR_VAR 0 5
54472: PUSH
54473: LD_VAR 0 5
54477: PPUSH
54478: LD_VAR 0 1
54482: PUSH
54483: LD_VAR 0 6
54487: ARRAY
54488: PUSH
54489: LD_VAR 0 4
54493: ARRAY
54494: PPUSH
54495: CALL 49540 0 2
54499: ST_TO_ADDR
54500: GO 54528
// result := Join ( result , array [ i ] ) ;
54502: LD_ADDR_VAR 0 5
54506: PUSH
54507: LD_VAR 0 5
54511: PPUSH
54512: LD_VAR 0 1
54516: PUSH
54517: LD_VAR 0 6
54521: ARRAY
54522: PPUSH
54523: CALL 49540 0 2
54527: ST_TO_ADDR
// end ;
54528: GO 54435
54530: POP
54531: POP
// end ;
54532: LD_VAR 0 5
54536: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
54537: LD_INT 0
54539: PPUSH
// if not vehicles or not parkingPoint then
54540: LD_VAR 0 1
54544: NOT
54545: IFTRUE 54554
54547: PUSH
54548: LD_VAR 0 2
54552: NOT
54553: OR
54554: IFFALSE 54558
// exit ;
54556: GO 54656
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
54558: LD_ADDR_VAR 0 1
54562: PUSH
54563: LD_VAR 0 1
54567: PPUSH
54568: LD_INT 50
54570: PUSH
54571: EMPTY
54572: LIST
54573: PUSH
54574: LD_INT 3
54576: PUSH
54577: LD_INT 92
54579: PUSH
54580: LD_VAR 0 2
54584: PUSH
54585: LD_INT 1
54587: ARRAY
54588: PUSH
54589: LD_VAR 0 2
54593: PUSH
54594: LD_INT 2
54596: ARRAY
54597: PUSH
54598: LD_INT 8
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PPUSH
54615: CALL_OW 72
54619: ST_TO_ADDR
// if not vehicles then
54620: LD_VAR 0 1
54624: NOT
54625: IFFALSE 54629
// exit ;
54627: GO 54656
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
54629: LD_VAR 0 1
54633: PPUSH
54634: LD_VAR 0 2
54638: PUSH
54639: LD_INT 1
54641: ARRAY
54642: PPUSH
54643: LD_VAR 0 2
54647: PUSH
54648: LD_INT 2
54650: ARRAY
54651: PPUSH
54652: CALL_OW 111
// end ;
54656: LD_VAR 0 3
54660: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
54661: LD_INT 0
54663: PPUSH
54664: PPUSH
54665: PPUSH
// if not side or not area then
54666: LD_VAR 0 1
54670: NOT
54671: IFTRUE 54680
54673: PUSH
54674: LD_VAR 0 2
54678: NOT
54679: OR
54680: IFFALSE 54684
// exit ;
54682: GO 54803
// tmp := AreaToList ( area , 0 ) ;
54684: LD_ADDR_VAR 0 5
54688: PUSH
54689: LD_VAR 0 2
54693: PPUSH
54694: LD_INT 0
54696: PPUSH
54697: CALL_OW 517
54701: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54702: LD_ADDR_VAR 0 4
54706: PUSH
54707: DOUBLE
54708: LD_INT 1
54710: DEC
54711: ST_TO_ADDR
54712: LD_VAR 0 5
54716: PUSH
54717: LD_INT 1
54719: ARRAY
54720: PUSH
54721: FOR_TO
54722: IFFALSE 54801
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54724: LD_VAR 0 5
54728: PUSH
54729: LD_INT 1
54731: ARRAY
54732: PUSH
54733: LD_VAR 0 4
54737: ARRAY
54738: PPUSH
54739: LD_VAR 0 5
54743: PUSH
54744: LD_INT 2
54746: ARRAY
54747: PUSH
54748: LD_VAR 0 4
54752: ARRAY
54753: PPUSH
54754: CALL_OW 351
54758: IFFALSE 54799
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54760: LD_VAR 0 5
54764: PUSH
54765: LD_INT 1
54767: ARRAY
54768: PUSH
54769: LD_VAR 0 4
54773: ARRAY
54774: PPUSH
54775: LD_VAR 0 5
54779: PUSH
54780: LD_INT 2
54782: ARRAY
54783: PUSH
54784: LD_VAR 0 4
54788: ARRAY
54789: PPUSH
54790: LD_VAR 0 1
54794: PPUSH
54795: CALL_OW 244
// end ;
54799: GO 54721
54801: POP
54802: POP
// end ;
54803: LD_VAR 0 3
54807: RET
// export function UniqueArray ( array ) ; var i ; begin
54808: LD_INT 0
54810: PPUSH
54811: PPUSH
// result := [ ] ;
54812: LD_ADDR_VAR 0 2
54816: PUSH
54817: EMPTY
54818: ST_TO_ADDR
// if not array then
54819: LD_VAR 0 1
54823: NOT
54824: IFFALSE 54828
// exit ;
54826: GO 54889
// for i := 1 to array do
54828: LD_ADDR_VAR 0 3
54832: PUSH
54833: DOUBLE
54834: LD_INT 1
54836: DEC
54837: ST_TO_ADDR
54838: LD_VAR 0 1
54842: PUSH
54843: FOR_TO
54844: IFFALSE 54887
// if not array [ i ] in result then
54846: LD_VAR 0 1
54850: PUSH
54851: LD_VAR 0 3
54855: ARRAY
54856: PUSH
54857: LD_VAR 0 2
54861: IN
54862: NOT
54863: IFFALSE 54885
// result := Join ( result , i ) ;
54865: LD_ADDR_VAR 0 2
54869: PUSH
54870: LD_VAR 0 2
54874: PPUSH
54875: LD_VAR 0 3
54879: PPUSH
54880: CALL 49540 0 2
54884: ST_TO_ADDR
54885: GO 54843
54887: POP
54888: POP
// end ; end_of_file
54889: LD_VAR 0 2
54893: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54894: LD_VAR 0 1
54898: PUSH
54899: LD_INT 200
54901: DOUBLE
54902: GREATEREQUAL
54903: IFFALSE 54911
54905: LD_INT 299
54907: DOUBLE
54908: LESSEQUAL
54909: IFTRUE 54913
54911: GO 54945
54913: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54914: LD_VAR 0 1
54918: PPUSH
54919: LD_VAR 0 2
54923: PPUSH
54924: LD_VAR 0 3
54928: PPUSH
54929: LD_VAR 0 4
54933: PPUSH
54934: LD_VAR 0 5
54938: PPUSH
54939: CALL 55807 0 5
54943: GO 55022
54945: LD_INT 300
54947: DOUBLE
54948: GREATEREQUAL
54949: IFFALSE 54957
54951: LD_INT 399
54953: DOUBLE
54954: LESSEQUAL
54955: IFTRUE 54959
54957: GO 55021
54959: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54960: LD_VAR 0 1
54964: PPUSH
54965: LD_VAR 0 2
54969: PPUSH
54970: LD_VAR 0 3
54974: PPUSH
54975: LD_VAR 0 4
54979: PPUSH
54980: LD_VAR 0 5
54984: PPUSH
54985: LD_VAR 0 6
54989: PPUSH
54990: LD_VAR 0 7
54994: PPUSH
54995: LD_VAR 0 8
54999: PPUSH
55000: LD_VAR 0 9
55004: PPUSH
55005: LD_VAR 0 10
55009: PPUSH
55010: LD_VAR 0 11
55014: PPUSH
55015: CALL 63916 0 11
55019: GO 55022
55021: POP
// end ;
55022: PPOPN 11
55024: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55025: LD_VAR 0 1
55029: PPUSH
55030: LD_VAR 0 2
55034: PPUSH
55035: LD_VAR 0 3
55039: PPUSH
55040: LD_VAR 0 4
55044: PPUSH
55045: LD_VAR 0 5
55049: PPUSH
55050: CALL 55107 0 5
// end ; end_of_file
55054: PPOPN 5
55056: END
// export function SOS_UnitDestroyed ( un ) ; begin
55057: LD_INT 0
55059: PPUSH
// ComRadiation ( un ) ;
55060: LD_VAR 0 1
55064: PPUSH
55065: CALL 56227 0 1
// end ;
55069: LD_VAR 0 2
55073: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55074: LD_INT 0
55076: PPUSH
// ComRadiation ( un ) ;
55077: LD_VAR 0 1
55081: PPUSH
55082: CALL 56227 0 1
// end ;
55086: LD_VAR 0 2
55090: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55091: LD_INT 0
55093: PPUSH
// end ;
55094: LD_VAR 0 4
55098: RET
// export function SOS_Command ( cmd ) ; begin
55099: LD_INT 0
55101: PPUSH
// end ;
55102: LD_VAR 0 2
55106: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55107: LD_INT 0
55109: PPUSH
// end ;
55110: LD_VAR 0 6
55114: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
55115: LD_INT 0
55117: PPUSH
55118: PPUSH
55119: PPUSH
55120: PPUSH
55121: PPUSH
// if not vehicle or not factory then
55122: LD_VAR 0 1
55126: NOT
55127: IFTRUE 55136
55129: PUSH
55130: LD_VAR 0 2
55134: NOT
55135: OR
55136: IFFALSE 55140
// exit ;
55138: GO 55802
// weapon := GetWeapon ( vehicle ) ;
55140: LD_ADDR_VAR 0 7
55144: PUSH
55145: LD_VAR 0 1
55149: PPUSH
55150: CALL_OW 264
55154: ST_TO_ADDR
// if weapon = ar_miner then
55155: LD_VAR 0 7
55159: PUSH
55160: LD_INT 81
55162: EQUAL
55163: IFFALSE 55220
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
55165: LD_ADDR_EXP 57
55169: PUSH
55170: LD_EXP 57
55174: PPUSH
55175: LD_EXP 57
55179: PUSH
55180: LD_INT 1
55182: PLUS
55183: PPUSH
55184: LD_VAR 0 1
55188: PPUSH
55189: CALL_OW 1
55193: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55194: LD_ADDR_EXP 58
55198: PUSH
55199: LD_EXP 58
55203: PPUSH
55204: LD_EXP 58
55208: PUSH
55209: LD_INT 1
55211: PLUS
55212: PPUSH
55213: EMPTY
55214: PPUSH
55215: CALL_OW 1
55219: ST_TO_ADDR
// end ; if not factoryWaypoints then
55220: LD_EXP 61
55224: NOT
55225: IFFALSE 55229
// exit ;
55227: GO 55802
// for i := 1 to Count ( factoryWaypoints ) do
55229: LD_ADDR_VAR 0 4
55233: PUSH
55234: DOUBLE
55235: LD_INT 1
55237: DEC
55238: ST_TO_ADDR
55239: LD_EXP 61
55243: PPUSH
55244: CALL 13564 0 1
55248: PUSH
55249: FOR_TO
55250: IFFALSE 55800
// if factoryWaypoints [ i ] [ 2 ] = factory then
55252: LD_EXP 61
55256: PUSH
55257: LD_VAR 0 4
55261: ARRAY
55262: PUSH
55263: LD_INT 2
55265: ARRAY
55266: PUSH
55267: LD_VAR 0 2
55271: EQUAL
55272: IFFALSE 55798
// begin if GetControl ( vehicle ) = control_manual then
55274: LD_VAR 0 1
55278: PPUSH
55279: CALL_OW 263
55283: PUSH
55284: LD_INT 1
55286: EQUAL
55287: IFFALSE 55651
// begin driver := IsDrivenBy ( vehicle ) ;
55289: LD_ADDR_VAR 0 5
55293: PUSH
55294: LD_VAR 0 1
55298: PPUSH
55299: CALL_OW 311
55303: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55304: LD_VAR 0 5
55308: PUSH
55309: LD_EXP 62
55313: IN
55314: IFTRUE 55328
55316: PUSH
55317: LD_VAR 0 1
55321: PUSH
55322: LD_EXP 62
55326: IN
55327: OR
55328: IFFALSE 55334
// exit ;
55330: POP
55331: POP
55332: GO 55802
// if not HasTask ( driver ) then
55334: LD_VAR 0 5
55338: PPUSH
55339: CALL_OW 314
55343: NOT
55344: IFFALSE 55649
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55346: LD_ADDR_EXP 62
55350: PUSH
55351: LD_EXP 62
55355: PPUSH
55356: LD_VAR 0 5
55360: PPUSH
55361: CALL 49540 0 2
55365: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55366: LD_ADDR_EXP 62
55370: PUSH
55371: LD_EXP 62
55375: PPUSH
55376: LD_VAR 0 1
55380: PPUSH
55381: CALL 49540 0 2
55385: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55386: LD_ADDR_VAR 0 6
55390: PUSH
55391: LD_EXP 61
55395: PUSH
55396: LD_VAR 0 4
55400: ARRAY
55401: PUSH
55402: LD_INT 3
55404: ARRAY
55405: PPUSH
55406: LD_EXP 61
55410: PUSH
55411: LD_VAR 0 4
55415: ARRAY
55416: PUSH
55417: LD_INT 4
55419: ARRAY
55420: PPUSH
55421: CALL_OW 428
55425: ST_TO_ADDR
// if hex then
55426: LD_VAR 0 6
55430: IFFALSE 55448
// ComMoveUnit ( driver , hex ) else
55432: LD_VAR 0 5
55436: PPUSH
55437: LD_VAR 0 6
55441: PPUSH
55442: CALL_OW 112
55446: GO 55532
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55448: LD_VAR 0 1
55452: PPUSH
55453: LD_EXP 61
55457: PUSH
55458: LD_VAR 0 4
55462: ARRAY
55463: PUSH
55464: LD_INT 3
55466: ARRAY
55467: PPUSH
55468: LD_EXP 61
55472: PUSH
55473: LD_VAR 0 4
55477: ARRAY
55478: PUSH
55479: LD_INT 4
55481: ARRAY
55482: PPUSH
55483: CALL_OW 297
55487: PUSH
55488: LD_INT 0
55490: GREATER
55491: IFFALSE 55532
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55493: LD_VAR 0 5
55497: PPUSH
55498: LD_EXP 61
55502: PUSH
55503: LD_VAR 0 4
55507: ARRAY
55508: PUSH
55509: LD_INT 3
55511: ARRAY
55512: PPUSH
55513: LD_EXP 61
55517: PUSH
55518: LD_VAR 0 4
55522: ARRAY
55523: PUSH
55524: LD_INT 4
55526: ARRAY
55527: PPUSH
55528: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55532: LD_VAR 0 5
55536: PPUSH
55537: CALL_OW 181
// if Multiplayer then
55541: LD_OWVAR 4
55545: IFFALSE 55594
// begin repeat wait ( 10 ) ;
55547: LD_INT 10
55549: PPUSH
55550: CALL_OW 67
// until not IsInUnit ( driver ) ;
55554: LD_VAR 0 5
55558: PPUSH
55559: CALL_OW 310
55563: NOT
55564: IFFALSE 55547
// if not HasTask ( driver ) then
55566: LD_VAR 0 5
55570: PPUSH
55571: CALL_OW 314
55575: NOT
55576: IFFALSE 55592
// ComEnterUnit ( driver , factory ) ;
55578: LD_VAR 0 5
55582: PPUSH
55583: LD_VAR 0 2
55587: PPUSH
55588: CALL_OW 120
// end else
55592: GO 55608
// AddComEnterUnit ( driver , factory ) ;
55594: LD_VAR 0 5
55598: PPUSH
55599: LD_VAR 0 2
55603: PPUSH
55604: CALL_OW 180
// wait ( 0 0$1 ) ;
55608: LD_INT 35
55610: PPUSH
55611: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55615: LD_ADDR_EXP 62
55619: PUSH
55620: LD_EXP 62
55624: PUSH
55625: LD_VAR 0 5
55629: DIFF
55630: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55631: LD_ADDR_EXP 62
55635: PUSH
55636: LD_EXP 62
55640: PUSH
55641: LD_VAR 0 1
55645: DIFF
55646: ST_TO_ADDR
// break ;
55647: GO 55800
// end ; end else
55649: GO 55798
// if GetControl ( vehicle ) = control_remote then
55651: LD_VAR 0 1
55655: PPUSH
55656: CALL_OW 263
55660: PUSH
55661: LD_INT 2
55663: EQUAL
55664: IFFALSE 55750
// begin wait ( 0 0$2 ) ;
55666: LD_INT 70
55668: PPUSH
55669: CALL_OW 67
// repeat wait ( 10 ) ;
55673: LD_INT 10
55675: PPUSH
55676: CALL_OW 67
// Connect ( vehicle ) ;
55680: LD_VAR 0 1
55684: PPUSH
55685: CALL 19842 0 1
// until IsControledBy ( vehicle ) ;
55689: LD_VAR 0 1
55693: PPUSH
55694: CALL_OW 312
55698: IFFALSE 55673
// wait ( 10 ) ;
55700: LD_INT 10
55702: PPUSH
55703: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55707: LD_VAR 0 1
55711: PPUSH
55712: LD_EXP 61
55716: PUSH
55717: LD_VAR 0 4
55721: ARRAY
55722: PUSH
55723: LD_INT 3
55725: ARRAY
55726: PPUSH
55727: LD_EXP 61
55731: PUSH
55732: LD_VAR 0 4
55736: ARRAY
55737: PUSH
55738: LD_INT 4
55740: ARRAY
55741: PPUSH
55742: CALL_OW 111
// break ;
55746: GO 55800
// end else
55748: GO 55798
// begin wait ( 0 0$3 ) ;
55750: LD_INT 105
55752: PPUSH
55753: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55757: LD_VAR 0 1
55761: PPUSH
55762: LD_EXP 61
55766: PUSH
55767: LD_VAR 0 4
55771: ARRAY
55772: PUSH
55773: LD_INT 3
55775: ARRAY
55776: PPUSH
55777: LD_EXP 61
55781: PUSH
55782: LD_VAR 0 4
55786: ARRAY
55787: PUSH
55788: LD_INT 4
55790: ARRAY
55791: PPUSH
55792: CALL_OW 111
// break ;
55796: GO 55800
// end ; end ;
55798: GO 55249
55800: POP
55801: POP
// end ;
55802: LD_VAR 0 3
55806: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55807: LD_INT 0
55809: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55810: LD_VAR 0 1
55814: PUSH
55815: LD_INT 250
55817: EQUAL
55818: IFFALSE 55835
55820: PUSH
55821: LD_VAR 0 2
55825: PPUSH
55826: CALL_OW 264
55830: PUSH
55831: LD_INT 81
55833: EQUAL
55834: AND
55835: IFFALSE 55856
// MinerPlaceMine ( unit , x , y ) ;
55837: LD_VAR 0 2
55841: PPUSH
55842: LD_VAR 0 4
55846: PPUSH
55847: LD_VAR 0 5
55851: PPUSH
55852: CALL 59202 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55856: LD_VAR 0 1
55860: PUSH
55861: LD_INT 251
55863: EQUAL
55864: IFFALSE 55881
55866: PUSH
55867: LD_VAR 0 2
55871: PPUSH
55872: CALL_OW 264
55876: PUSH
55877: LD_INT 81
55879: EQUAL
55880: AND
55881: IFFALSE 55902
// MinerDetonateMine ( unit , x , y ) ;
55883: LD_VAR 0 2
55887: PPUSH
55888: LD_VAR 0 4
55892: PPUSH
55893: LD_VAR 0 5
55897: PPUSH
55898: CALL 59609 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55902: LD_VAR 0 1
55906: PUSH
55907: LD_INT 252
55909: EQUAL
55910: IFFALSE 55927
55912: PUSH
55913: LD_VAR 0 2
55917: PPUSH
55918: CALL_OW 264
55922: PUSH
55923: LD_INT 81
55925: EQUAL
55926: AND
55927: IFFALSE 55948
// MinerCreateMinefield ( unit , x , y ) ;
55929: LD_VAR 0 2
55933: PPUSH
55934: LD_VAR 0 4
55938: PPUSH
55939: LD_VAR 0 5
55943: PPUSH
55944: CALL 59841 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55948: LD_VAR 0 1
55952: PUSH
55953: LD_INT 253
55955: EQUAL
55956: IFFALSE 55973
55958: PUSH
55959: LD_VAR 0 2
55963: PPUSH
55964: CALL_OW 257
55968: PUSH
55969: LD_INT 5
55971: EQUAL
55972: AND
55973: IFFALSE 55994
// ComBinocular ( unit , x , y ) ;
55975: LD_VAR 0 2
55979: PPUSH
55980: LD_VAR 0 4
55984: PPUSH
55985: LD_VAR 0 5
55989: PPUSH
55990: CALL 60216 0 3
// if selectedUnit then
55994: LD_VAR 0 3
55998: IFFALSE 56058
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56000: LD_VAR 0 1
56004: PUSH
56005: LD_INT 254
56007: EQUAL
56008: IFFALSE 56025
56010: PUSH
56011: LD_VAR 0 2
56015: PPUSH
56016: CALL_OW 264
56020: PUSH
56021: LD_INT 99
56023: EQUAL
56024: AND
56025: IFFALSE 56042
56027: PUSH
56028: LD_VAR 0 3
56032: PPUSH
56033: CALL_OW 263
56037: PUSH
56038: LD_INT 3
56040: EQUAL
56041: AND
56042: IFFALSE 56058
// HackDestroyVehicle ( unit , selectedUnit ) ;
56044: LD_VAR 0 2
56048: PPUSH
56049: LD_VAR 0 3
56053: PPUSH
56054: CALL 58392 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56058: LD_VAR 0 1
56062: PUSH
56063: LD_INT 255
56065: EQUAL
56066: IFFALSE 56090
56068: PUSH
56069: LD_VAR 0 2
56073: PPUSH
56074: CALL_OW 264
56078: PUSH
56079: LD_INT 14
56081: PUSH
56082: LD_INT 53
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: IN
56089: AND
56090: IFFALSE 56108
56092: PUSH
56093: LD_VAR 0 4
56097: PPUSH
56098: LD_VAR 0 5
56102: PPUSH
56103: CALL_OW 488
56107: AND
56108: IFFALSE 56132
// CutTreeXYR ( unit , x , y , 12 ) ;
56110: LD_VAR 0 2
56114: PPUSH
56115: LD_VAR 0 4
56119: PPUSH
56120: LD_VAR 0 5
56124: PPUSH
56125: LD_INT 12
56127: PPUSH
56128: CALL 56323 0 4
// if cmd = 256 then
56132: LD_VAR 0 1
56136: PUSH
56137: LD_INT 256
56139: EQUAL
56140: IFFALSE 56161
// SetFactoryWaypoint ( unit , x , y ) ;
56142: LD_VAR 0 2
56146: PPUSH
56147: LD_VAR 0 4
56151: PPUSH
56152: LD_VAR 0 5
56156: PPUSH
56157: CALL 63924 0 3
// if cmd = 257 then
56161: LD_VAR 0 1
56165: PUSH
56166: LD_INT 257
56168: EQUAL
56169: IFFALSE 56190
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56171: LD_VAR 0 2
56175: PPUSH
56176: LD_VAR 0 4
56180: PPUSH
56181: LD_VAR 0 5
56185: PPUSH
56186: CALL 64420 0 3
// if cmd = 258 then
56190: LD_VAR 0 1
56194: PUSH
56195: LD_INT 258
56197: EQUAL
56198: IFFALSE 56222
// BurnTreeXYR ( unit , x , y , 8 ) ;
56200: LD_VAR 0 2
56204: PPUSH
56205: LD_VAR 0 4
56209: PPUSH
56210: LD_VAR 0 5
56214: PPUSH
56215: LD_INT 8
56217: PPUSH
56218: CALL 56745 0 4
// end ;
56222: LD_VAR 0 6
56226: RET
// export function ComRadiation ( un ) ; var eff ; begin
56227: LD_INT 0
56229: PPUSH
56230: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56231: LD_VAR 0 1
56235: PPUSH
56236: CALL_OW 264
56240: PUSH
56241: LD_INT 91
56243: NONEQUAL
56244: IFFALSE 56248
// exit ;
56246: GO 56318
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56248: LD_INT 68
56250: PPUSH
56251: LD_VAR 0 1
56255: PPUSH
56256: CALL_OW 255
56260: PPUSH
56261: CALL_OW 321
56265: PUSH
56266: LD_INT 2
56268: EQUAL
56269: IFFALSE 56281
// eff := 50 else
56271: LD_ADDR_VAR 0 3
56275: PUSH
56276: LD_INT 50
56278: ST_TO_ADDR
56279: GO 56289
// eff := 25 ;
56281: LD_ADDR_VAR 0 3
56285: PUSH
56286: LD_INT 25
56288: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56289: LD_VAR 0 1
56293: PPUSH
56294: CALL_OW 250
56298: PPUSH
56299: LD_VAR 0 1
56303: PPUSH
56304: CALL_OW 251
56308: PPUSH
56309: LD_VAR 0 3
56313: PPUSH
56314: CALL_OW 495
// end ;
56318: LD_VAR 0 2
56322: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56323: LD_INT 0
56325: PPUSH
56326: PPUSH
56327: PPUSH
56328: PPUSH
56329: PPUSH
56330: PPUSH
56331: PPUSH
56332: PPUSH
56333: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56334: LD_VAR 0 1
56338: PPUSH
56339: CALL_OW 302
56343: NOT
56344: IFTRUE 56363
56346: PUSH
56347: LD_VAR 0 2
56351: PPUSH
56352: LD_VAR 0 3
56356: PPUSH
56357: CALL_OW 488
56361: NOT
56362: OR
56363: IFTRUE 56372
56365: PUSH
56366: LD_VAR 0 4
56370: NOT
56371: OR
56372: IFFALSE 56376
// exit ;
56374: GO 56740
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
56376: LD_VAR 0 1
56380: PPUSH
56381: CALL_OW 437
56385: PPUSH
56386: CALL 13564 0 1
56390: PUSH
56391: LD_INT 10
56393: GREATER
56394: IFFALSE 56398
// exit ;
56396: GO 56740
// list := [ ] ;
56398: LD_ADDR_VAR 0 13
56402: PUSH
56403: EMPTY
56404: ST_TO_ADDR
// if x - r < 0 then
56405: LD_VAR 0 2
56409: PUSH
56410: LD_VAR 0 4
56414: MINUS
56415: PUSH
56416: LD_INT 0
56418: LESS
56419: IFFALSE 56431
// min_x := 0 else
56421: LD_ADDR_VAR 0 7
56425: PUSH
56426: LD_INT 0
56428: ST_TO_ADDR
56429: GO 56447
// min_x := x - r ;
56431: LD_ADDR_VAR 0 7
56435: PUSH
56436: LD_VAR 0 2
56440: PUSH
56441: LD_VAR 0 4
56445: MINUS
56446: ST_TO_ADDR
// if y - r < 0 then
56447: LD_VAR 0 3
56451: PUSH
56452: LD_VAR 0 4
56456: MINUS
56457: PUSH
56458: LD_INT 0
56460: LESS
56461: IFFALSE 56473
// min_y := 0 else
56463: LD_ADDR_VAR 0 8
56467: PUSH
56468: LD_INT 0
56470: ST_TO_ADDR
56471: GO 56489
// min_y := y - r ;
56473: LD_ADDR_VAR 0 8
56477: PUSH
56478: LD_VAR 0 3
56482: PUSH
56483: LD_VAR 0 4
56487: MINUS
56488: ST_TO_ADDR
// max_x := x + r ;
56489: LD_ADDR_VAR 0 9
56493: PUSH
56494: LD_VAR 0 2
56498: PUSH
56499: LD_VAR 0 4
56503: PLUS
56504: ST_TO_ADDR
// max_y := y + r ;
56505: LD_ADDR_VAR 0 10
56509: PUSH
56510: LD_VAR 0 3
56514: PUSH
56515: LD_VAR 0 4
56519: PLUS
56520: ST_TO_ADDR
// for _x = min_x to max_x do
56521: LD_ADDR_VAR 0 11
56525: PUSH
56526: DOUBLE
56527: LD_VAR 0 7
56531: DEC
56532: ST_TO_ADDR
56533: LD_VAR 0 9
56537: PUSH
56538: FOR_TO
56539: IFFALSE 56658
// for _y = min_y to max_y do
56541: LD_ADDR_VAR 0 12
56545: PUSH
56546: DOUBLE
56547: LD_VAR 0 8
56551: DEC
56552: ST_TO_ADDR
56553: LD_VAR 0 10
56557: PUSH
56558: FOR_TO
56559: IFFALSE 56654
// begin if not ValidHex ( _x , _y ) then
56561: LD_VAR 0 11
56565: PPUSH
56566: LD_VAR 0 12
56570: PPUSH
56571: CALL_OW 488
56575: NOT
56576: IFFALSE 56580
// continue ;
56578: GO 56558
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56580: LD_VAR 0 11
56584: PPUSH
56585: LD_VAR 0 12
56589: PPUSH
56590: CALL_OW 351
56594: IFFALSE 56612
56596: PUSH
56597: LD_VAR 0 11
56601: PPUSH
56602: LD_VAR 0 12
56606: PPUSH
56607: CALL_OW 554
56611: AND
56612: IFFALSE 56652
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56614: LD_ADDR_VAR 0 13
56618: PUSH
56619: LD_VAR 0 13
56623: PPUSH
56624: LD_VAR 0 13
56628: PUSH
56629: LD_INT 1
56631: PLUS
56632: PPUSH
56633: LD_VAR 0 11
56637: PUSH
56638: LD_VAR 0 12
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PPUSH
56647: CALL_OW 2
56651: ST_TO_ADDR
// end ;
56652: GO 56558
56654: POP
56655: POP
56656: GO 56538
56658: POP
56659: POP
// if not list then
56660: LD_VAR 0 13
56664: NOT
56665: IFFALSE 56669
// exit ;
56667: GO 56740
// for i in list do
56669: LD_ADDR_VAR 0 6
56673: PUSH
56674: LD_VAR 0 13
56678: PUSH
56679: FOR_IN
56680: IFFALSE 56738
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56682: LD_VAR 0 1
56686: PPUSH
56687: LD_STRING M
56689: PUSH
56690: LD_VAR 0 6
56694: PUSH
56695: LD_INT 1
56697: ARRAY
56698: PUSH
56699: LD_VAR 0 6
56703: PUSH
56704: LD_INT 2
56706: ARRAY
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: PUSH
56729: EMPTY
56730: LIST
56731: PPUSH
56732: CALL_OW 447
56736: GO 56679
56738: POP
56739: POP
// end ;
56740: LD_VAR 0 5
56744: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56745: LD_INT 0
56747: PPUSH
56748: PPUSH
56749: PPUSH
56750: PPUSH
56751: PPUSH
56752: PPUSH
56753: PPUSH
56754: PPUSH
56755: PPUSH
56756: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56757: LD_VAR 0 1
56761: PPUSH
56762: CALL_OW 302
56766: NOT
56767: IFTRUE 56786
56769: PUSH
56770: LD_VAR 0 2
56774: PPUSH
56775: LD_VAR 0 3
56779: PPUSH
56780: CALL_OW 488
56784: NOT
56785: OR
56786: IFTRUE 56795
56788: PUSH
56789: LD_VAR 0 4
56793: NOT
56794: OR
56795: IFFALSE 56799
// exit ;
56797: GO 57338
// if Count ( GetTaskList ( flame ) ) > 10 then
56799: LD_VAR 0 1
56803: PPUSH
56804: CALL_OW 437
56808: PPUSH
56809: CALL 13564 0 1
56813: PUSH
56814: LD_INT 10
56816: GREATER
56817: IFFALSE 56821
// exit ;
56819: GO 57338
// list := [ ] ;
56821: LD_ADDR_VAR 0 13
56825: PUSH
56826: EMPTY
56827: ST_TO_ADDR
// if x - r < 0 then
56828: LD_VAR 0 2
56832: PUSH
56833: LD_VAR 0 4
56837: MINUS
56838: PUSH
56839: LD_INT 0
56841: LESS
56842: IFFALSE 56854
// min_x := 0 else
56844: LD_ADDR_VAR 0 7
56848: PUSH
56849: LD_INT 0
56851: ST_TO_ADDR
56852: GO 56870
// min_x := x - r ;
56854: LD_ADDR_VAR 0 7
56858: PUSH
56859: LD_VAR 0 2
56863: PUSH
56864: LD_VAR 0 4
56868: MINUS
56869: ST_TO_ADDR
// if y - r < 0 then
56870: LD_VAR 0 3
56874: PUSH
56875: LD_VAR 0 4
56879: MINUS
56880: PUSH
56881: LD_INT 0
56883: LESS
56884: IFFALSE 56896
// min_y := 0 else
56886: LD_ADDR_VAR 0 8
56890: PUSH
56891: LD_INT 0
56893: ST_TO_ADDR
56894: GO 56912
// min_y := y - r ;
56896: LD_ADDR_VAR 0 8
56900: PUSH
56901: LD_VAR 0 3
56905: PUSH
56906: LD_VAR 0 4
56910: MINUS
56911: ST_TO_ADDR
// max_x := x + r ;
56912: LD_ADDR_VAR 0 9
56916: PUSH
56917: LD_VAR 0 2
56921: PUSH
56922: LD_VAR 0 4
56926: PLUS
56927: ST_TO_ADDR
// max_y := y + r ;
56928: LD_ADDR_VAR 0 10
56932: PUSH
56933: LD_VAR 0 3
56937: PUSH
56938: LD_VAR 0 4
56942: PLUS
56943: ST_TO_ADDR
// for _x = min_x to max_x do
56944: LD_ADDR_VAR 0 11
56948: PUSH
56949: DOUBLE
56950: LD_VAR 0 7
56954: DEC
56955: ST_TO_ADDR
56956: LD_VAR 0 9
56960: PUSH
56961: FOR_TO
56962: IFFALSE 57081
// for _y = min_y to max_y do
56964: LD_ADDR_VAR 0 12
56968: PUSH
56969: DOUBLE
56970: LD_VAR 0 8
56974: DEC
56975: ST_TO_ADDR
56976: LD_VAR 0 10
56980: PUSH
56981: FOR_TO
56982: IFFALSE 57077
// begin if not ValidHex ( _x , _y ) then
56984: LD_VAR 0 11
56988: PPUSH
56989: LD_VAR 0 12
56993: PPUSH
56994: CALL_OW 488
56998: NOT
56999: IFFALSE 57003
// continue ;
57001: GO 56981
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57003: LD_VAR 0 11
57007: PPUSH
57008: LD_VAR 0 12
57012: PPUSH
57013: CALL_OW 351
57017: IFFALSE 57035
57019: PUSH
57020: LD_VAR 0 11
57024: PPUSH
57025: LD_VAR 0 12
57029: PPUSH
57030: CALL_OW 554
57034: AND
57035: IFFALSE 57075
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57037: LD_ADDR_VAR 0 13
57041: PUSH
57042: LD_VAR 0 13
57046: PPUSH
57047: LD_VAR 0 13
57051: PUSH
57052: LD_INT 1
57054: PLUS
57055: PPUSH
57056: LD_VAR 0 11
57060: PUSH
57061: LD_VAR 0 12
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PPUSH
57070: CALL_OW 2
57074: ST_TO_ADDR
// end ;
57075: GO 56981
57077: POP
57078: POP
57079: GO 56961
57081: POP
57082: POP
// if not list then
57083: LD_VAR 0 13
57087: NOT
57088: IFFALSE 57092
// exit ;
57090: GO 57338
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57092: LD_ADDR_VAR 0 13
57096: PUSH
57097: LD_VAR 0 1
57101: PPUSH
57102: LD_VAR 0 13
57106: PPUSH
57107: LD_INT 1
57109: PPUSH
57110: LD_INT 1
57112: PPUSH
57113: CALL 16970 0 4
57117: ST_TO_ADDR
// ComStop ( flame ) ;
57118: LD_VAR 0 1
57122: PPUSH
57123: CALL_OW 141
// for i in list do
57127: LD_ADDR_VAR 0 6
57131: PUSH
57132: LD_VAR 0 13
57136: PUSH
57137: FOR_IN
57138: IFFALSE 57169
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57140: LD_VAR 0 1
57144: PPUSH
57145: LD_VAR 0 6
57149: PUSH
57150: LD_INT 1
57152: ARRAY
57153: PPUSH
57154: LD_VAR 0 6
57158: PUSH
57159: LD_INT 2
57161: ARRAY
57162: PPUSH
57163: CALL_OW 176
57167: GO 57137
57169: POP
57170: POP
// repeat wait ( 0 0$1 ) ;
57171: LD_INT 35
57173: PPUSH
57174: CALL_OW 67
// task := GetTaskList ( flame ) ;
57178: LD_ADDR_VAR 0 14
57182: PUSH
57183: LD_VAR 0 1
57187: PPUSH
57188: CALL_OW 437
57192: ST_TO_ADDR
// if not task then
57193: LD_VAR 0 14
57197: NOT
57198: IFFALSE 57202
// exit ;
57200: GO 57338
// if task [ 1 ] [ 1 ] <> | then
57202: LD_VAR 0 14
57206: PUSH
57207: LD_INT 1
57209: ARRAY
57210: PUSH
57211: LD_INT 1
57213: ARRAY
57214: PUSH
57215: LD_STRING |
57217: NONEQUAL
57218: IFFALSE 57222
// exit ;
57220: GO 57338
// _x := task [ 1 ] [ 2 ] ;
57222: LD_ADDR_VAR 0 11
57226: PUSH
57227: LD_VAR 0 14
57231: PUSH
57232: LD_INT 1
57234: ARRAY
57235: PUSH
57236: LD_INT 2
57238: ARRAY
57239: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57240: LD_ADDR_VAR 0 12
57244: PUSH
57245: LD_VAR 0 14
57249: PUSH
57250: LD_INT 1
57252: ARRAY
57253: PUSH
57254: LD_INT 3
57256: ARRAY
57257: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57258: LD_VAR 0 11
57262: PPUSH
57263: LD_VAR 0 12
57267: PPUSH
57268: CALL_OW 351
57272: NOT
57273: IFTRUE 57292
57275: PUSH
57276: LD_VAR 0 11
57280: PPUSH
57281: LD_VAR 0 12
57285: PPUSH
57286: CALL_OW 554
57290: NOT
57291: OR
57292: IFFALSE 57326
// begin task := Delete ( task , 1 ) ;
57294: LD_ADDR_VAR 0 14
57298: PUSH
57299: LD_VAR 0 14
57303: PPUSH
57304: LD_INT 1
57306: PPUSH
57307: CALL_OW 3
57311: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57312: LD_VAR 0 1
57316: PPUSH
57317: LD_VAR 0 14
57321: PPUSH
57322: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57326: LD_VAR 0 1
57330: PPUSH
57331: CALL_OW 314
57335: NOT
57336: IFFALSE 57171
// end ;
57338: LD_VAR 0 5
57342: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57343: LD_EXP 50
57347: NOT
57348: IFFALSE 57398
57350: GO 57352
57352: DISABLE
// begin initHack := true ;
57353: LD_ADDR_EXP 50
57357: PUSH
57358: LD_INT 1
57360: ST_TO_ADDR
// hackTanks := [ ] ;
57361: LD_ADDR_EXP 51
57365: PUSH
57366: EMPTY
57367: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57368: LD_ADDR_EXP 52
57372: PUSH
57373: EMPTY
57374: ST_TO_ADDR
// hackLimit := 3 ;
57375: LD_ADDR_EXP 53
57379: PUSH
57380: LD_INT 3
57382: ST_TO_ADDR
// hackDist := 12 ;
57383: LD_ADDR_EXP 54
57387: PUSH
57388: LD_INT 12
57390: ST_TO_ADDR
// hackCounter := [ ] ;
57391: LD_ADDR_EXP 55
57395: PUSH
57396: EMPTY
57397: ST_TO_ADDR
// end ;
57398: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57399: LD_EXP 50
57403: IFFALSE 57421
57405: PUSH
57406: LD_INT 34
57408: PUSH
57409: LD_INT 99
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PPUSH
57416: CALL_OW 69
57420: AND
57421: IFFALSE 57674
57423: GO 57425
57425: DISABLE
57426: LD_INT 0
57428: PPUSH
57429: PPUSH
// begin enable ;
57430: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57431: LD_ADDR_VAR 0 1
57435: PUSH
57436: LD_INT 34
57438: PUSH
57439: LD_INT 99
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PPUSH
57446: CALL_OW 69
57450: PUSH
57451: FOR_IN
57452: IFFALSE 57672
// begin if not i in hackTanks then
57454: LD_VAR 0 1
57458: PUSH
57459: LD_EXP 51
57463: IN
57464: NOT
57465: IFFALSE 57548
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57467: LD_ADDR_EXP 51
57471: PUSH
57472: LD_EXP 51
57476: PPUSH
57477: LD_EXP 51
57481: PUSH
57482: LD_INT 1
57484: PLUS
57485: PPUSH
57486: LD_VAR 0 1
57490: PPUSH
57491: CALL_OW 1
57495: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57496: LD_ADDR_EXP 52
57500: PUSH
57501: LD_EXP 52
57505: PPUSH
57506: LD_EXP 52
57510: PUSH
57511: LD_INT 1
57513: PLUS
57514: PPUSH
57515: EMPTY
57516: PPUSH
57517: CALL_OW 1
57521: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57522: LD_ADDR_EXP 55
57526: PUSH
57527: LD_EXP 55
57531: PPUSH
57532: LD_EXP 55
57536: PUSH
57537: LD_INT 1
57539: PLUS
57540: PPUSH
57541: EMPTY
57542: PPUSH
57543: CALL_OW 1
57547: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57548: LD_VAR 0 1
57552: PPUSH
57553: CALL_OW 302
57557: NOT
57558: IFFALSE 57571
// begin HackUnlinkAll ( i ) ;
57560: LD_VAR 0 1
57564: PPUSH
57565: CALL 57677 0 1
// continue ;
57569: GO 57451
// end ; HackCheckCapturedStatus ( i ) ;
57571: LD_VAR 0 1
57575: PPUSH
57576: CALL 58122 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57580: LD_ADDR_VAR 0 2
57584: PUSH
57585: LD_INT 81
57587: PUSH
57588: LD_VAR 0 1
57592: PPUSH
57593: CALL_OW 255
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 33
57604: PUSH
57605: LD_INT 3
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 91
57614: PUSH
57615: LD_VAR 0 1
57619: PUSH
57620: LD_EXP 54
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 50
57632: PUSH
57633: EMPTY
57634: LIST
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: PPUSH
57642: CALL_OW 69
57646: ST_TO_ADDR
// if not tmp then
57647: LD_VAR 0 2
57651: NOT
57652: IFFALSE 57656
// continue ;
57654: GO 57451
// HackLink ( i , tmp ) ;
57656: LD_VAR 0 1
57660: PPUSH
57661: LD_VAR 0 2
57665: PPUSH
57666: CALL 57813 0 2
// end ;
57670: GO 57451
57672: POP
57673: POP
// end ;
57674: PPOPN 2
57676: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57677: LD_INT 0
57679: PPUSH
57680: PPUSH
57681: PPUSH
// if not hack in hackTanks then
57682: LD_VAR 0 1
57686: PUSH
57687: LD_EXP 51
57691: IN
57692: NOT
57693: IFFALSE 57697
// exit ;
57695: GO 57808
// index := GetElementIndex ( hackTanks , hack ) ;
57697: LD_ADDR_VAR 0 4
57701: PUSH
57702: LD_EXP 51
57706: PPUSH
57707: LD_VAR 0 1
57711: PPUSH
57712: CALL 16265 0 2
57716: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57717: LD_EXP 52
57721: PUSH
57722: LD_VAR 0 4
57726: ARRAY
57727: IFFALSE 57808
// begin for i in hackTanksCaptured [ index ] do
57729: LD_ADDR_VAR 0 3
57733: PUSH
57734: LD_EXP 52
57738: PUSH
57739: LD_VAR 0 4
57743: ARRAY
57744: PUSH
57745: FOR_IN
57746: IFFALSE 57772
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57748: LD_VAR 0 3
57752: PUSH
57753: LD_INT 1
57755: ARRAY
57756: PPUSH
57757: LD_VAR 0 3
57761: PUSH
57762: LD_INT 2
57764: ARRAY
57765: PPUSH
57766: CALL_OW 235
57770: GO 57745
57772: POP
57773: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57774: LD_ADDR_EXP 52
57778: PUSH
57779: LD_EXP 52
57783: PPUSH
57784: LD_VAR 0 4
57788: PPUSH
57789: EMPTY
57790: PPUSH
57791: CALL_OW 1
57795: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57796: LD_VAR 0 1
57800: PPUSH
57801: LD_INT 0
57803: PPUSH
57804: CALL_OW 505
// end ; end ;
57808: LD_VAR 0 2
57812: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57813: LD_INT 0
57815: PPUSH
57816: PPUSH
57817: PPUSH
// if not hack in hackTanks or not vehicles then
57818: LD_VAR 0 1
57822: PUSH
57823: LD_EXP 51
57827: IN
57828: NOT
57829: IFTRUE 57838
57831: PUSH
57832: LD_VAR 0 2
57836: NOT
57837: OR
57838: IFFALSE 57842
// exit ;
57840: GO 58117
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57842: LD_ADDR_VAR 0 2
57846: PUSH
57847: LD_VAR 0 1
57851: PPUSH
57852: LD_VAR 0 2
57856: PPUSH
57857: LD_INT 1
57859: PPUSH
57860: LD_INT 1
57862: PPUSH
57863: CALL 16917 0 4
57867: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57868: LD_ADDR_VAR 0 5
57872: PUSH
57873: LD_EXP 51
57877: PPUSH
57878: LD_VAR 0 1
57882: PPUSH
57883: CALL 16265 0 2
57887: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57888: LD_EXP 52
57892: PUSH
57893: LD_VAR 0 5
57897: ARRAY
57898: PUSH
57899: LD_EXP 53
57903: LESS
57904: IFFALSE 58093
// begin for i := 1 to vehicles do
57906: LD_ADDR_VAR 0 4
57910: PUSH
57911: DOUBLE
57912: LD_INT 1
57914: DEC
57915: ST_TO_ADDR
57916: LD_VAR 0 2
57920: PUSH
57921: FOR_TO
57922: IFFALSE 58091
// begin if hackTanksCaptured [ index ] = hackLimit then
57924: LD_EXP 52
57928: PUSH
57929: LD_VAR 0 5
57933: ARRAY
57934: PUSH
57935: LD_EXP 53
57939: EQUAL
57940: IFFALSE 57944
// break ;
57942: GO 58091
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57944: LD_ADDR_EXP 55
57948: PUSH
57949: LD_EXP 55
57953: PPUSH
57954: LD_VAR 0 5
57958: PPUSH
57959: LD_EXP 55
57963: PUSH
57964: LD_VAR 0 5
57968: ARRAY
57969: PUSH
57970: LD_INT 1
57972: PLUS
57973: PPUSH
57974: CALL_OW 1
57978: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57979: LD_ADDR_EXP 52
57983: PUSH
57984: LD_EXP 52
57988: PPUSH
57989: LD_VAR 0 5
57993: PUSH
57994: LD_EXP 52
57998: PUSH
57999: LD_VAR 0 5
58003: ARRAY
58004: PUSH
58005: LD_INT 1
58007: PLUS
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PPUSH
58013: LD_VAR 0 2
58017: PUSH
58018: LD_VAR 0 4
58022: ARRAY
58023: PUSH
58024: LD_VAR 0 2
58028: PUSH
58029: LD_VAR 0 4
58033: ARRAY
58034: PPUSH
58035: CALL_OW 255
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PPUSH
58044: CALL 16482 0 3
58048: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58049: LD_VAR 0 2
58053: PUSH
58054: LD_VAR 0 4
58058: ARRAY
58059: PPUSH
58060: LD_VAR 0 1
58064: PPUSH
58065: CALL_OW 255
58069: PPUSH
58070: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58074: LD_VAR 0 2
58078: PUSH
58079: LD_VAR 0 4
58083: ARRAY
58084: PPUSH
58085: CALL_OW 141
// end ;
58089: GO 57921
58091: POP
58092: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58093: LD_VAR 0 1
58097: PPUSH
58098: LD_EXP 52
58102: PUSH
58103: LD_VAR 0 5
58107: ARRAY
58108: PUSH
58109: LD_INT 0
58111: PLUS
58112: PPUSH
58113: CALL_OW 505
// end ;
58117: LD_VAR 0 3
58121: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58122: LD_INT 0
58124: PPUSH
58125: PPUSH
58126: PPUSH
58127: PPUSH
// if not hack in hackTanks then
58128: LD_VAR 0 1
58132: PUSH
58133: LD_EXP 51
58137: IN
58138: NOT
58139: IFFALSE 58143
// exit ;
58141: GO 58387
// index := GetElementIndex ( hackTanks , hack ) ;
58143: LD_ADDR_VAR 0 4
58147: PUSH
58148: LD_EXP 51
58152: PPUSH
58153: LD_VAR 0 1
58157: PPUSH
58158: CALL 16265 0 2
58162: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58163: LD_ADDR_VAR 0 3
58167: PUSH
58168: DOUBLE
58169: LD_EXP 52
58173: PUSH
58174: LD_VAR 0 4
58178: ARRAY
58179: INC
58180: ST_TO_ADDR
58181: LD_INT 1
58183: PUSH
58184: FOR_DOWNTO
58185: IFFALSE 58361
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58187: LD_ADDR_VAR 0 5
58191: PUSH
58192: LD_EXP 52
58196: PUSH
58197: LD_VAR 0 4
58201: ARRAY
58202: PUSH
58203: LD_VAR 0 3
58207: ARRAY
58208: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58209: LD_VAR 0 5
58213: PUSH
58214: LD_INT 1
58216: ARRAY
58217: PPUSH
58218: CALL_OW 302
58222: NOT
58223: IFTRUE 58251
58225: PUSH
58226: LD_VAR 0 5
58230: PUSH
58231: LD_INT 1
58233: ARRAY
58234: PPUSH
58235: CALL_OW 255
58239: PUSH
58240: LD_VAR 0 1
58244: PPUSH
58245: CALL_OW 255
58249: NONEQUAL
58250: OR
58251: IFFALSE 58359
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58253: LD_VAR 0 5
58257: PUSH
58258: LD_INT 1
58260: ARRAY
58261: PPUSH
58262: CALL_OW 305
58266: IFFALSE 58294
58268: PUSH
58269: LD_VAR 0 5
58273: PUSH
58274: LD_INT 1
58276: ARRAY
58277: PPUSH
58278: CALL_OW 255
58282: PUSH
58283: LD_VAR 0 1
58287: PPUSH
58288: CALL_OW 255
58292: EQUAL
58293: AND
58294: IFFALSE 58318
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58296: LD_VAR 0 5
58300: PUSH
58301: LD_INT 1
58303: ARRAY
58304: PPUSH
58305: LD_VAR 0 5
58309: PUSH
58310: LD_INT 2
58312: ARRAY
58313: PPUSH
58314: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58318: LD_ADDR_EXP 52
58322: PUSH
58323: LD_EXP 52
58327: PPUSH
58328: LD_VAR 0 4
58332: PPUSH
58333: LD_EXP 52
58337: PUSH
58338: LD_VAR 0 4
58342: ARRAY
58343: PPUSH
58344: LD_VAR 0 3
58348: PPUSH
58349: CALL_OW 3
58353: PPUSH
58354: CALL_OW 1
58358: ST_TO_ADDR
// end ; end ;
58359: GO 58184
58361: POP
58362: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58363: LD_VAR 0 1
58367: PPUSH
58368: LD_EXP 52
58372: PUSH
58373: LD_VAR 0 4
58377: ARRAY
58378: PUSH
58379: LD_INT 0
58381: PLUS
58382: PPUSH
58383: CALL_OW 505
// end ;
58387: LD_VAR 0 2
58391: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58392: LD_INT 0
58394: PPUSH
58395: PPUSH
58396: PPUSH
58397: PPUSH
// if not hack in hackTanks then
58398: LD_VAR 0 1
58402: PUSH
58403: LD_EXP 51
58407: IN
58408: NOT
58409: IFFALSE 58413
// exit ;
58411: GO 58498
// index := GetElementIndex ( hackTanks , hack ) ;
58413: LD_ADDR_VAR 0 5
58417: PUSH
58418: LD_EXP 51
58422: PPUSH
58423: LD_VAR 0 1
58427: PPUSH
58428: CALL 16265 0 2
58432: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58433: LD_ADDR_VAR 0 4
58437: PUSH
58438: DOUBLE
58439: LD_INT 1
58441: DEC
58442: ST_TO_ADDR
58443: LD_EXP 52
58447: PUSH
58448: LD_VAR 0 5
58452: ARRAY
58453: PUSH
58454: FOR_TO
58455: IFFALSE 58496
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58457: LD_EXP 52
58461: PUSH
58462: LD_VAR 0 5
58466: ARRAY
58467: PUSH
58468: LD_VAR 0 4
58472: ARRAY
58473: PUSH
58474: LD_INT 1
58476: ARRAY
58477: PUSH
58478: LD_VAR 0 2
58482: EQUAL
58483: IFFALSE 58494
// KillUnit ( vehicle ) ;
58485: LD_VAR 0 2
58489: PPUSH
58490: CALL_OW 66
58494: GO 58454
58496: POP
58497: POP
// end ;
58498: LD_VAR 0 3
58502: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
58503: LD_EXP 56
58507: NOT
58508: IFFALSE 58641
58510: GO 58512
58512: DISABLE
58513: LD_INT 0
58515: PPUSH
// begin initMiner := true ;
58516: LD_ADDR_EXP 56
58520: PUSH
58521: LD_INT 1
58523: ST_TO_ADDR
// minersList := [ ] ;
58524: LD_ADDR_EXP 57
58528: PUSH
58529: EMPTY
58530: ST_TO_ADDR
// minerMinesList := [ ] ;
58531: LD_ADDR_EXP 58
58535: PUSH
58536: EMPTY
58537: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
58538: LD_ADDR_EXP 59
58542: PUSH
58543: LD_INT 10
58545: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58546: LD_ADDR_VAR 0 1
58550: PUSH
58551: LD_INT 34
58553: PUSH
58554: LD_INT 81
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PPUSH
58561: CALL_OW 69
58565: PUSH
58566: FOR_IN
58567: IFFALSE 58639
// begin if not i in minersList then
58569: LD_VAR 0 1
58573: PUSH
58574: LD_EXP 57
58578: IN
58579: NOT
58580: IFFALSE 58637
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58582: LD_ADDR_EXP 57
58586: PUSH
58587: LD_EXP 57
58591: PPUSH
58592: LD_EXP 57
58596: PUSH
58597: LD_INT 1
58599: PLUS
58600: PPUSH
58601: LD_VAR 0 1
58605: PPUSH
58606: CALL_OW 1
58610: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58611: LD_ADDR_EXP 58
58615: PUSH
58616: LD_EXP 58
58620: PPUSH
58621: LD_EXP 58
58625: PUSH
58626: LD_INT 1
58628: PLUS
58629: PPUSH
58630: EMPTY
58631: PPUSH
58632: CALL_OW 1
58636: ST_TO_ADDR
// end end ;
58637: GO 58566
58639: POP
58640: POP
// end ;
58641: PPOPN 1
58643: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
58644: LD_EXP 56
58648: IFFALSE 58679
58650: PUSH
58651: LD_EXP 58
58655: PPUSH
58656: CALL 13564 0 1
58660: IFTRUE 58678
58662: PUSH
58663: LD_INT 34
58665: PUSH
58666: LD_INT 81
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PPUSH
58673: CALL_OW 69
58677: OR
58678: AND
58679: IFFALSE 59199
58681: GO 58683
58683: DISABLE
58684: LD_INT 0
58686: PPUSH
58687: PPUSH
58688: PPUSH
58689: PPUSH
// begin enable ;
58690: ENABLE
// for i := minerMinesList downto 1 do
58691: LD_ADDR_VAR 0 1
58695: PUSH
58696: DOUBLE
58697: LD_EXP 58
58701: INC
58702: ST_TO_ADDR
58703: LD_INT 1
58705: PUSH
58706: FOR_DOWNTO
58707: IFFALSE 59197
// begin side := GetSide ( minersList [ i ] ) ;
58709: LD_ADDR_VAR 0 3
58713: PUSH
58714: LD_EXP 57
58718: PUSH
58719: LD_VAR 0 1
58723: ARRAY
58724: PPUSH
58725: CALL_OW 255
58729: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
58730: LD_EXP 57
58734: PUSH
58735: LD_VAR 0 1
58739: ARRAY
58740: PPUSH
58741: CALL_OW 300
58745: IFFALSE 58766
58747: PUSH
58748: LD_VAR 0 3
58752: PUSH
58753: LD_OWVAR 2
58757: PUSH
58758: LD_INT 9
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: IN
58765: AND
58766: IFFALSE 58799
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58768: LD_EXP 57
58772: PUSH
58773: LD_VAR 0 1
58777: ARRAY
58778: PPUSH
58779: LD_EXP 58
58783: PUSH
58784: LD_VAR 0 1
58788: ARRAY
58789: PPUSH
58790: CALL 13564 0 1
58794: PPUSH
58795: CALL_OW 505
// if not minerMinesList [ i ] then
58799: LD_EXP 58
58803: PUSH
58804: LD_VAR 0 1
58808: ARRAY
58809: NOT
58810: IFFALSE 58814
// continue ;
58812: GO 58706
// for j := minerMinesList [ i ] downto 1 do
58814: LD_ADDR_VAR 0 2
58818: PUSH
58819: DOUBLE
58820: LD_EXP 58
58824: PUSH
58825: LD_VAR 0 1
58829: ARRAY
58830: INC
58831: ST_TO_ADDR
58832: LD_INT 1
58834: PUSH
58835: FOR_DOWNTO
58836: IFFALSE 59193
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58838: LD_EXP 57
58842: PUSH
58843: LD_VAR 0 1
58847: ARRAY
58848: PPUSH
58849: CALL_OW 301
58853: IFTRUE 58873
58855: PUSH
58856: LD_EXP 57
58860: PUSH
58861: LD_VAR 0 1
58865: ARRAY
58866: PPUSH
58867: CALL_OW 305
58871: NOT
58872: OR
58873: IFFALSE 58964
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58875: LD_EXP 58
58879: PUSH
58880: LD_VAR 0 1
58884: ARRAY
58885: PUSH
58886: LD_VAR 0 2
58890: ARRAY
58891: PUSH
58892: LD_INT 1
58894: ARRAY
58895: PPUSH
58896: LD_EXP 58
58900: PUSH
58901: LD_VAR 0 1
58905: ARRAY
58906: PUSH
58907: LD_VAR 0 2
58911: ARRAY
58912: PUSH
58913: LD_INT 2
58915: ARRAY
58916: PPUSH
58917: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58921: LD_ADDR_EXP 58
58925: PUSH
58926: LD_EXP 58
58930: PPUSH
58931: LD_VAR 0 1
58935: PPUSH
58936: LD_EXP 58
58940: PUSH
58941: LD_VAR 0 1
58945: ARRAY
58946: PPUSH
58947: LD_VAR 0 2
58951: PPUSH
58952: CALL_OW 3
58956: PPUSH
58957: CALL_OW 1
58961: ST_TO_ADDR
// continue ;
58962: GO 58835
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58964: LD_ADDR_VAR 0 4
58968: PUSH
58969: LD_EXP 58
58973: PUSH
58974: LD_VAR 0 1
58978: ARRAY
58979: PUSH
58980: LD_VAR 0 2
58984: ARRAY
58985: PUSH
58986: LD_INT 1
58988: ARRAY
58989: PPUSH
58990: LD_EXP 58
58994: PUSH
58995: LD_VAR 0 1
58999: ARRAY
59000: PUSH
59001: LD_VAR 0 2
59005: ARRAY
59006: PUSH
59007: LD_INT 2
59009: ARRAY
59010: PPUSH
59011: CALL_OW 428
59015: ST_TO_ADDR
// if not tmp then
59016: LD_VAR 0 4
59020: NOT
59021: IFFALSE 59025
// continue ;
59023: GO 58835
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59025: LD_VAR 0 4
59029: PUSH
59030: LD_INT 81
59032: PUSH
59033: LD_VAR 0 3
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PPUSH
59042: CALL_OW 69
59046: IN
59047: IFFALSE 59097
59049: PUSH
59050: LD_EXP 58
59054: PUSH
59055: LD_VAR 0 1
59059: ARRAY
59060: PUSH
59061: LD_VAR 0 2
59065: ARRAY
59066: PUSH
59067: LD_INT 1
59069: ARRAY
59070: PPUSH
59071: LD_EXP 58
59075: PUSH
59076: LD_VAR 0 1
59080: ARRAY
59081: PUSH
59082: LD_VAR 0 2
59086: ARRAY
59087: PUSH
59088: LD_INT 2
59090: ARRAY
59091: PPUSH
59092: CALL_OW 458
59096: AND
59097: IFFALSE 59191
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59099: LD_EXP 58
59103: PUSH
59104: LD_VAR 0 1
59108: ARRAY
59109: PUSH
59110: LD_VAR 0 2
59114: ARRAY
59115: PUSH
59116: LD_INT 1
59118: ARRAY
59119: PPUSH
59120: LD_EXP 58
59124: PUSH
59125: LD_VAR 0 1
59129: ARRAY
59130: PUSH
59131: LD_VAR 0 2
59135: ARRAY
59136: PUSH
59137: LD_INT 2
59139: ARRAY
59140: PPUSH
59141: LD_VAR 0 3
59145: PPUSH
59146: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59150: LD_ADDR_EXP 58
59154: PUSH
59155: LD_EXP 58
59159: PPUSH
59160: LD_VAR 0 1
59164: PPUSH
59165: LD_EXP 58
59169: PUSH
59170: LD_VAR 0 1
59174: ARRAY
59175: PPUSH
59176: LD_VAR 0 2
59180: PPUSH
59181: CALL_OW 3
59185: PPUSH
59186: CALL_OW 1
59190: ST_TO_ADDR
// end ; end ;
59191: GO 58835
59193: POP
59194: POP
// end ;
59195: GO 58706
59197: POP
59198: POP
// end ;
59199: PPOPN 4
59201: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
59202: LD_INT 0
59204: PPUSH
59205: PPUSH
59206: PPUSH
59207: PPUSH
// result := false ;
59208: LD_ADDR_VAR 0 4
59212: PUSH
59213: LD_INT 0
59215: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59216: LD_VAR 0 1
59220: PPUSH
59221: CALL_OW 264
59225: PUSH
59226: LD_INT 81
59228: EQUAL
59229: NOT
59230: IFFALSE 59234
// exit ;
59232: GO 59604
// side := GetSide ( unit ) ;
59234: LD_ADDR_VAR 0 6
59238: PUSH
59239: LD_VAR 0 1
59243: PPUSH
59244: CALL_OW 255
59248: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
59249: LD_ADDR_VAR 0 5
59253: PUSH
59254: LD_EXP 57
59258: PPUSH
59259: LD_VAR 0 1
59263: PPUSH
59264: CALL 16265 0 2
59268: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59269: LD_EXP 58
59273: PUSH
59274: LD_VAR 0 5
59278: ARRAY
59279: PUSH
59280: LD_EXP 59
59284: GREATEREQUAL
59285: IFFALSE 59289
// exit ;
59287: GO 59604
// ComMoveXY ( unit , x , y ) ;
59289: LD_VAR 0 1
59293: PPUSH
59294: LD_VAR 0 2
59298: PPUSH
59299: LD_VAR 0 3
59303: PPUSH
59304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59308: LD_INT 35
59310: PPUSH
59311: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59315: LD_VAR 0 1
59319: PPUSH
59320: LD_VAR 0 2
59324: PPUSH
59325: LD_VAR 0 3
59329: PPUSH
59330: CALL 48321 0 3
59334: NOT
59335: IFFALSE 59348
59337: PUSH
59338: LD_VAR 0 1
59342: PPUSH
59343: CALL_OW 314
59347: AND
59348: IFFALSE 59352
// exit ;
59350: GO 59604
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59352: LD_VAR 0 2
59356: PPUSH
59357: LD_VAR 0 3
59361: PPUSH
59362: CALL_OW 428
59366: PUSH
59367: LD_VAR 0 1
59371: EQUAL
59372: IFFALSE 59386
59374: PUSH
59375: LD_VAR 0 1
59379: PPUSH
59380: CALL_OW 314
59384: NOT
59385: AND
59386: IFFALSE 59308
// if MineAtPos ( x , y ) then
59388: LD_VAR 0 2
59392: PPUSH
59393: LD_VAR 0 3
59397: PPUSH
59398: CALL_OW 458
59402: IFFALSE 59406
// exit ;
59404: GO 59604
// if your_side = side then
59406: LD_OWVAR 2
59410: PUSH
59411: LD_VAR 0 6
59415: EQUAL
59416: IFFALSE 59435
// PlaySoundXY ( x , y , PlantMine ) ;
59418: LD_VAR 0 2
59422: PPUSH
59423: LD_VAR 0 3
59427: PPUSH
59428: LD_STRING PlantMine
59430: PPUSH
59431: CALL_OW 366
// repeat wait ( 1 ) ;
59435: LD_INT 1
59437: PPUSH
59438: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
59442: LD_VAR 0 2
59446: PPUSH
59447: LD_VAR 0 3
59451: PPUSH
59452: LD_VAR 0 6
59456: PPUSH
59457: LD_INT 0
59459: PPUSH
59460: CALL_OW 454
59464: IFFALSE 59435
// if MineAtPos ( x , y ) then
59466: LD_VAR 0 2
59470: PPUSH
59471: LD_VAR 0 3
59475: PPUSH
59476: CALL_OW 458
59480: IFFALSE 59596
// begin for i in minerMinesList [ index ] do
59482: LD_ADDR_VAR 0 7
59486: PUSH
59487: LD_EXP 58
59491: PUSH
59492: LD_VAR 0 5
59496: ARRAY
59497: PUSH
59498: FOR_IN
59499: IFFALSE 59541
// if i [ 1 ] = x and i [ 2 ] = y then
59501: LD_VAR 0 7
59505: PUSH
59506: LD_INT 1
59508: ARRAY
59509: PUSH
59510: LD_VAR 0 2
59514: EQUAL
59515: IFFALSE 59533
59517: PUSH
59518: LD_VAR 0 7
59522: PUSH
59523: LD_INT 2
59525: ARRAY
59526: PUSH
59527: LD_VAR 0 3
59531: EQUAL
59532: AND
59533: IFFALSE 59539
// exit ;
59535: POP
59536: POP
59537: GO 59604
59539: GO 59498
59541: POP
59542: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59543: LD_ADDR_EXP 58
59547: PUSH
59548: LD_EXP 58
59552: PPUSH
59553: LD_VAR 0 5
59557: PUSH
59558: LD_EXP 58
59562: PUSH
59563: LD_VAR 0 5
59567: ARRAY
59568: PUSH
59569: LD_INT 1
59571: PLUS
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PPUSH
59577: LD_VAR 0 2
59581: PUSH
59582: LD_VAR 0 3
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PPUSH
59591: CALL 16482 0 3
59595: ST_TO_ADDR
// end ; result := true ;
59596: LD_ADDR_VAR 0 4
59600: PUSH
59601: LD_INT 1
59603: ST_TO_ADDR
// end ;
59604: LD_VAR 0 4
59608: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59609: LD_INT 0
59611: PPUSH
59612: PPUSH
59613: PPUSH
// if not unit in minersList then
59614: LD_VAR 0 1
59618: PUSH
59619: LD_EXP 57
59623: IN
59624: NOT
59625: IFFALSE 59629
// exit ;
59627: GO 59836
// index := GetElementIndex ( minersList , unit ) ;
59629: LD_ADDR_VAR 0 6
59633: PUSH
59634: LD_EXP 57
59638: PPUSH
59639: LD_VAR 0 1
59643: PPUSH
59644: CALL 16265 0 2
59648: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59649: LD_ADDR_VAR 0 5
59653: PUSH
59654: DOUBLE
59655: LD_EXP 58
59659: PUSH
59660: LD_VAR 0 6
59664: ARRAY
59665: INC
59666: ST_TO_ADDR
59667: LD_INT 1
59669: PUSH
59670: FOR_DOWNTO
59671: IFFALSE 59834
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59673: LD_EXP 58
59677: PUSH
59678: LD_VAR 0 6
59682: ARRAY
59683: PUSH
59684: LD_VAR 0 5
59688: ARRAY
59689: PUSH
59690: LD_INT 1
59692: ARRAY
59693: PPUSH
59694: LD_EXP 58
59698: PUSH
59699: LD_VAR 0 6
59703: ARRAY
59704: PUSH
59705: LD_VAR 0 5
59709: ARRAY
59710: PUSH
59711: LD_INT 2
59713: ARRAY
59714: PPUSH
59715: LD_VAR 0 2
59719: PPUSH
59720: LD_VAR 0 3
59724: PPUSH
59725: CALL_OW 298
59729: PUSH
59730: LD_INT 6
59732: LESS
59733: IFFALSE 59832
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59735: LD_EXP 58
59739: PUSH
59740: LD_VAR 0 6
59744: ARRAY
59745: PUSH
59746: LD_VAR 0 5
59750: ARRAY
59751: PUSH
59752: LD_INT 1
59754: ARRAY
59755: PPUSH
59756: LD_EXP 58
59760: PUSH
59761: LD_VAR 0 6
59765: ARRAY
59766: PUSH
59767: LD_VAR 0 5
59771: ARRAY
59772: PUSH
59773: LD_INT 2
59775: ARRAY
59776: PPUSH
59777: LD_VAR 0 1
59781: PPUSH
59782: CALL_OW 255
59786: PPUSH
59787: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59791: LD_ADDR_EXP 58
59795: PUSH
59796: LD_EXP 58
59800: PPUSH
59801: LD_VAR 0 6
59805: PPUSH
59806: LD_EXP 58
59810: PUSH
59811: LD_VAR 0 6
59815: ARRAY
59816: PPUSH
59817: LD_VAR 0 5
59821: PPUSH
59822: CALL_OW 3
59826: PPUSH
59827: CALL_OW 1
59831: ST_TO_ADDR
// end ; end ;
59832: GO 59670
59834: POP
59835: POP
// end ;
59836: LD_VAR 0 4
59840: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59841: LD_INT 0
59843: PPUSH
59844: PPUSH
59845: PPUSH
59846: PPUSH
59847: PPUSH
59848: PPUSH
59849: PPUSH
59850: PPUSH
59851: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59852: LD_VAR 0 1
59856: PPUSH
59857: CALL_OW 264
59861: PUSH
59862: LD_INT 81
59864: EQUAL
59865: NOT
59866: IFTRUE 59881
59868: PUSH
59869: LD_VAR 0 1
59873: PUSH
59874: LD_EXP 57
59878: IN
59879: NOT
59880: OR
59881: IFFALSE 59885
// exit ;
59883: GO 60211
// index := GetElementIndex ( minersList , unit ) ;
59885: LD_ADDR_VAR 0 6
59889: PUSH
59890: LD_EXP 57
59894: PPUSH
59895: LD_VAR 0 1
59899: PPUSH
59900: CALL 16265 0 2
59904: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59905: LD_ADDR_VAR 0 8
59909: PUSH
59910: LD_EXP 59
59914: PUSH
59915: LD_EXP 58
59919: PUSH
59920: LD_VAR 0 6
59924: ARRAY
59925: MINUS
59926: ST_TO_ADDR
// if not minesFreeAmount then
59927: LD_VAR 0 8
59931: NOT
59932: IFFALSE 59936
// exit ;
59934: GO 60211
// tmp := [ ] ;
59936: LD_ADDR_VAR 0 7
59940: PUSH
59941: EMPTY
59942: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59943: LD_ADDR_VAR 0 5
59947: PUSH
59948: DOUBLE
59949: LD_INT 1
59951: DEC
59952: ST_TO_ADDR
59953: LD_VAR 0 8
59957: PUSH
59958: FOR_TO
59959: IFFALSE 60158
// begin _d := rand ( 0 , 5 ) ;
59961: LD_ADDR_VAR 0 11
59965: PUSH
59966: LD_INT 0
59968: PPUSH
59969: LD_INT 5
59971: PPUSH
59972: CALL_OW 12
59976: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59977: LD_ADDR_VAR 0 12
59981: PUSH
59982: LD_INT 2
59984: PPUSH
59985: LD_INT 6
59987: PPUSH
59988: CALL_OW 12
59992: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59993: LD_ADDR_VAR 0 9
59997: PUSH
59998: LD_VAR 0 2
60002: PPUSH
60003: LD_VAR 0 11
60007: PPUSH
60008: LD_VAR 0 12
60012: PPUSH
60013: CALL_OW 272
60017: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60018: LD_ADDR_VAR 0 10
60022: PUSH
60023: LD_VAR 0 3
60027: PPUSH
60028: LD_VAR 0 11
60032: PPUSH
60033: LD_VAR 0 12
60037: PPUSH
60038: CALL_OW 273
60042: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60043: LD_VAR 0 9
60047: PPUSH
60048: LD_VAR 0 10
60052: PPUSH
60053: CALL_OW 488
60057: IFFALSE 60081
60059: PUSH
60060: LD_VAR 0 9
60064: PUSH
60065: LD_VAR 0 10
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_VAR 0 7
60078: IN
60079: NOT
60080: AND
60081: IFFALSE 60100
60083: PUSH
60084: LD_VAR 0 9
60088: PPUSH
60089: LD_VAR 0 10
60093: PPUSH
60094: CALL_OW 458
60098: NOT
60099: AND
60100: IFFALSE 60142
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60102: LD_ADDR_VAR 0 7
60106: PUSH
60107: LD_VAR 0 7
60111: PPUSH
60112: LD_VAR 0 7
60116: PUSH
60117: LD_INT 1
60119: PLUS
60120: PPUSH
60121: LD_VAR 0 9
60125: PUSH
60126: LD_VAR 0 10
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PPUSH
60135: CALL_OW 1
60139: ST_TO_ADDR
60140: GO 60156
// i := i - 1 ;
60142: LD_ADDR_VAR 0 5
60146: PUSH
60147: LD_VAR 0 5
60151: PUSH
60152: LD_INT 1
60154: MINUS
60155: ST_TO_ADDR
// end ;
60156: GO 59958
60158: POP
60159: POP
// for i in tmp do
60160: LD_ADDR_VAR 0 5
60164: PUSH
60165: LD_VAR 0 7
60169: PUSH
60170: FOR_IN
60171: IFFALSE 60209
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60173: LD_VAR 0 1
60177: PPUSH
60178: LD_VAR 0 5
60182: PUSH
60183: LD_INT 1
60185: ARRAY
60186: PPUSH
60187: LD_VAR 0 5
60191: PUSH
60192: LD_INT 2
60194: ARRAY
60195: PPUSH
60196: CALL 59202 0 3
60200: NOT
60201: IFFALSE 60207
// exit ;
60203: POP
60204: POP
60205: GO 60211
60207: GO 60170
60209: POP
60210: POP
// end ;
60211: LD_VAR 0 4
60215: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60216: LD_INT 0
60218: PPUSH
60219: PPUSH
60220: PPUSH
60221: PPUSH
60222: PPUSH
60223: PPUSH
60224: PPUSH
60225: PPUSH
60226: PPUSH
// if GetClass ( unit ) <> class_sniper then
60227: LD_VAR 0 1
60231: PPUSH
60232: CALL_OW 257
60236: PUSH
60237: LD_INT 5
60239: NONEQUAL
60240: IFFALSE 60244
// exit ;
60242: GO 60714
// dist := 8 ;
60244: LD_ADDR_VAR 0 5
60248: PUSH
60249: LD_INT 8
60251: ST_TO_ADDR
// viewRange := 12 ;
60252: LD_ADDR_VAR 0 8
60256: PUSH
60257: LD_INT 12
60259: ST_TO_ADDR
// side := GetSide ( unit ) ;
60260: LD_ADDR_VAR 0 6
60264: PUSH
60265: LD_VAR 0 1
60269: PPUSH
60270: CALL_OW 255
60274: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60275: LD_INT 61
60277: PPUSH
60278: LD_VAR 0 6
60282: PPUSH
60283: CALL_OW 321
60287: PUSH
60288: LD_INT 2
60290: EQUAL
60291: IFFALSE 60301
// viewRange := 16 ;
60293: LD_ADDR_VAR 0 8
60297: PUSH
60298: LD_INT 16
60300: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60301: LD_VAR 0 1
60305: PPUSH
60306: LD_VAR 0 2
60310: PPUSH
60311: LD_VAR 0 3
60315: PPUSH
60316: CALL_OW 297
60320: PUSH
60321: LD_VAR 0 5
60325: GREATER
60326: IFFALSE 60405
// begin ComMoveXY ( unit , x , y ) ;
60328: LD_VAR 0 1
60332: PPUSH
60333: LD_VAR 0 2
60337: PPUSH
60338: LD_VAR 0 3
60342: PPUSH
60343: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60347: LD_INT 35
60349: PPUSH
60350: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60354: LD_VAR 0 1
60358: PPUSH
60359: LD_VAR 0 2
60363: PPUSH
60364: LD_VAR 0 3
60368: PPUSH
60369: CALL 48321 0 3
60373: NOT
60374: IFFALSE 60378
// exit ;
60376: GO 60714
// until GetDistUnitXY ( unit , x , y ) < dist ;
60378: LD_VAR 0 1
60382: PPUSH
60383: LD_VAR 0 2
60387: PPUSH
60388: LD_VAR 0 3
60392: PPUSH
60393: CALL_OW 297
60397: PUSH
60398: LD_VAR 0 5
60402: LESS
60403: IFFALSE 60347
// end ; ComTurnXY ( unit , x , y ) ;
60405: LD_VAR 0 1
60409: PPUSH
60410: LD_VAR 0 2
60414: PPUSH
60415: LD_VAR 0 3
60419: PPUSH
60420: CALL_OW 118
// repeat if Multiplayer then
60424: LD_OWVAR 4
60428: IFFALSE 60439
// wait ( 35 ) else
60430: LD_INT 35
60432: PPUSH
60433: CALL_OW 67
60437: GO 60446
// wait ( 5 ) ;
60439: LD_INT 5
60441: PPUSH
60442: CALL_OW 67
// _d := GetDir ( unit ) ;
60446: LD_ADDR_VAR 0 11
60450: PUSH
60451: LD_VAR 0 1
60455: PPUSH
60456: CALL_OW 254
60460: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60461: LD_ADDR_VAR 0 7
60465: PUSH
60466: LD_VAR 0 1
60470: PPUSH
60471: CALL_OW 250
60475: PPUSH
60476: LD_VAR 0 1
60480: PPUSH
60481: CALL_OW 251
60485: PPUSH
60486: LD_VAR 0 2
60490: PPUSH
60491: LD_VAR 0 3
60495: PPUSH
60496: CALL 50957 0 4
60500: ST_TO_ADDR
// until dir = _d ;
60501: LD_VAR 0 7
60505: PUSH
60506: LD_VAR 0 11
60510: EQUAL
60511: IFFALSE 60424
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60513: LD_ADDR_VAR 0 9
60517: PUSH
60518: LD_VAR 0 1
60522: PPUSH
60523: CALL_OW 250
60527: PPUSH
60528: LD_VAR 0 7
60532: PPUSH
60533: LD_VAR 0 5
60537: PPUSH
60538: CALL_OW 272
60542: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60543: LD_ADDR_VAR 0 10
60547: PUSH
60548: LD_VAR 0 1
60552: PPUSH
60553: CALL_OW 251
60557: PPUSH
60558: LD_VAR 0 7
60562: PPUSH
60563: LD_VAR 0 5
60567: PPUSH
60568: CALL_OW 273
60572: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60573: LD_VAR 0 9
60577: PPUSH
60578: LD_VAR 0 10
60582: PPUSH
60583: CALL_OW 488
60587: NOT
60588: IFFALSE 60592
// exit ;
60590: GO 60714
// ComAnimCustom ( unit , 1 ) ;
60592: LD_VAR 0 1
60596: PPUSH
60597: LD_INT 1
60599: PPUSH
60600: CALL_OW 592
// p := 0 ;
60604: LD_ADDR_VAR 0 12
60608: PUSH
60609: LD_INT 0
60611: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60612: LD_VAR 0 9
60616: PPUSH
60617: LD_VAR 0 10
60621: PPUSH
60622: LD_VAR 0 6
60626: PPUSH
60627: LD_VAR 0 8
60631: PPUSH
60632: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60636: LD_INT 35
60638: PPUSH
60639: CALL_OW 67
// p := Inc ( p ) ;
60643: LD_ADDR_VAR 0 12
60647: PUSH
60648: LD_VAR 0 12
60652: PPUSH
60653: CALL 50913 0 1
60657: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60658: LD_VAR 0 12
60662: PUSH
60663: LD_INT 3
60665: EQUAL
60666: IFTRUE 60680
60668: PUSH
60669: LD_VAR 0 1
60673: PPUSH
60674: CALL_OW 302
60678: NOT
60679: OR
60680: IFTRUE 60693
60682: PUSH
60683: LD_VAR 0 1
60687: PPUSH
60688: CALL_OW 301
60692: OR
60693: IFFALSE 60636
// RemoveSeeing ( _x , _y , side ) ;
60695: LD_VAR 0 9
60699: PPUSH
60700: LD_VAR 0 10
60704: PPUSH
60705: LD_VAR 0 6
60709: PPUSH
60710: CALL_OW 331
// end ;
60714: LD_VAR 0 4
60718: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
60719: LD_INT 0
60721: PPUSH
60722: PPUSH
60723: PPUSH
60724: PPUSH
60725: PPUSH
60726: PPUSH
60727: PPUSH
60728: PPUSH
60729: PPUSH
60730: PPUSH
60731: PPUSH
// if not unit then
60732: LD_VAR 0 1
60736: NOT
60737: IFFALSE 60741
// exit ;
60739: GO 61012
// side := GetSide ( unit ) ;
60741: LD_ADDR_VAR 0 3
60745: PUSH
60746: LD_VAR 0 1
60750: PPUSH
60751: CALL_OW 255
60755: ST_TO_ADDR
// x := GetX ( unit ) ;
60756: LD_ADDR_VAR 0 5
60760: PUSH
60761: LD_VAR 0 1
60765: PPUSH
60766: CALL_OW 250
60770: ST_TO_ADDR
// y := GetY ( unit ) ;
60771: LD_ADDR_VAR 0 6
60775: PUSH
60776: LD_VAR 0 1
60780: PPUSH
60781: CALL_OW 251
60785: ST_TO_ADDR
// r := 8 ;
60786: LD_ADDR_VAR 0 4
60790: PUSH
60791: LD_INT 8
60793: ST_TO_ADDR
// if x - r < 0 then
60794: LD_VAR 0 5
60798: PUSH
60799: LD_VAR 0 4
60803: MINUS
60804: PUSH
60805: LD_INT 0
60807: LESS
60808: IFFALSE 60820
// min_x := 0 else
60810: LD_ADDR_VAR 0 7
60814: PUSH
60815: LD_INT 0
60817: ST_TO_ADDR
60818: GO 60836
// min_x := x - r ;
60820: LD_ADDR_VAR 0 7
60824: PUSH
60825: LD_VAR 0 5
60829: PUSH
60830: LD_VAR 0 4
60834: MINUS
60835: ST_TO_ADDR
// if y - r < 0 then
60836: LD_VAR 0 6
60840: PUSH
60841: LD_VAR 0 4
60845: MINUS
60846: PUSH
60847: LD_INT 0
60849: LESS
60850: IFFALSE 60862
// min_y := 0 else
60852: LD_ADDR_VAR 0 8
60856: PUSH
60857: LD_INT 0
60859: ST_TO_ADDR
60860: GO 60878
// min_y := y - r ;
60862: LD_ADDR_VAR 0 8
60866: PUSH
60867: LD_VAR 0 6
60871: PUSH
60872: LD_VAR 0 4
60876: MINUS
60877: ST_TO_ADDR
// max_x := x + r ;
60878: LD_ADDR_VAR 0 9
60882: PUSH
60883: LD_VAR 0 5
60887: PUSH
60888: LD_VAR 0 4
60892: PLUS
60893: ST_TO_ADDR
// max_y := y + r ;
60894: LD_ADDR_VAR 0 10
60898: PUSH
60899: LD_VAR 0 6
60903: PUSH
60904: LD_VAR 0 4
60908: PLUS
60909: ST_TO_ADDR
// for _x = min_x to max_x do
60910: LD_ADDR_VAR 0 11
60914: PUSH
60915: DOUBLE
60916: LD_VAR 0 7
60920: DEC
60921: ST_TO_ADDR
60922: LD_VAR 0 9
60926: PUSH
60927: FOR_TO
60928: IFFALSE 61010
// for _y = min_y to max_y do
60930: LD_ADDR_VAR 0 12
60934: PUSH
60935: DOUBLE
60936: LD_VAR 0 8
60940: DEC
60941: ST_TO_ADDR
60942: LD_VAR 0 10
60946: PUSH
60947: FOR_TO
60948: IFFALSE 61006
// begin if not ValidHex ( _x , _y ) then
60950: LD_VAR 0 11
60954: PPUSH
60955: LD_VAR 0 12
60959: PPUSH
60960: CALL_OW 488
60964: NOT
60965: IFFALSE 60969
// continue ;
60967: GO 60947
// if MineAtPos ( _x , _y ) then
60969: LD_VAR 0 11
60973: PPUSH
60974: LD_VAR 0 12
60978: PPUSH
60979: CALL_OW 458
60983: IFFALSE 61004
// ViewMineAtPos ( _x , _y , side ) ;
60985: LD_VAR 0 11
60989: PPUSH
60990: LD_VAR 0 12
60994: PPUSH
60995: LD_VAR 0 3
60999: PPUSH
61000: CALL_OW 457
// end ;
61004: GO 60947
61006: POP
61007: POP
61008: GO 60927
61010: POP
61011: POP
// end ;
61012: LD_VAR 0 2
61016: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
61017: LD_INT 0
61019: PPUSH
61020: PPUSH
61021: PPUSH
61022: PPUSH
61023: PPUSH
61024: PPUSH
61025: PPUSH
// if not units then
61026: LD_VAR 0 1
61030: NOT
61031: IFFALSE 61035
// exit ;
61033: GO 61499
// scaners := [ ] ;
61035: LD_ADDR_VAR 0 6
61039: PUSH
61040: EMPTY
61041: ST_TO_ADDR
// for i in units do
61042: LD_ADDR_VAR 0 3
61046: PUSH
61047: LD_VAR 0 1
61051: PUSH
61052: FOR_IN
61053: IFFALSE 61210
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
61055: LD_VAR 0 3
61059: PPUSH
61060: CALL_OW 264
61064: PUSH
61065: LD_INT 11
61067: NONEQUAL
61068: IFTRUE 61082
61070: PUSH
61071: LD_VAR 0 3
61075: PPUSH
61076: CALL_OW 302
61080: NOT
61081: OR
61082: IFTRUE 61099
61084: PUSH
61085: LD_VAR 0 3
61089: PPUSH
61090: CALL_OW 110
61094: PUSH
61095: LD_INT 502
61097: EQUAL
61098: OR
61099: IFFALSE 61103
// continue ;
61101: GO 61052
// ComStop ( i ) ;
61103: LD_VAR 0 3
61107: PPUSH
61108: CALL_OW 141
// x := GetX ( i ) ;
61112: LD_ADDR_VAR 0 4
61116: PUSH
61117: LD_VAR 0 3
61121: PPUSH
61122: CALL_OW 250
61126: ST_TO_ADDR
// y := GetY ( i ) ;
61127: LD_ADDR_VAR 0 5
61131: PUSH
61132: LD_VAR 0 3
61136: PPUSH
61137: CALL_OW 251
61141: ST_TO_ADDR
// if GetSide ( i ) = your_side then
61142: LD_VAR 0 3
61146: PPUSH
61147: CALL_OW 255
61151: PUSH
61152: LD_OWVAR 2
61156: EQUAL
61157: IFFALSE 61176
// PlaySoundXY ( x , y , mineDetector ) ;
61159: LD_VAR 0 4
61163: PPUSH
61164: LD_VAR 0 5
61168: PPUSH
61169: LD_STRING mineDetector
61171: PPUSH
61172: CALL_OW 366
// scaners := Join ( scaners , i ) ;
61176: LD_ADDR_VAR 0 6
61180: PUSH
61181: LD_VAR 0 6
61185: PPUSH
61186: LD_VAR 0 3
61190: PPUSH
61191: CALL 49540 0 2
61195: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
61196: LD_VAR 0 3
61200: PPUSH
61201: LD_INT 502
61203: PPUSH
61204: CALL_OW 109
// end ;
61208: GO 61052
61210: POP
61211: POP
// if not scaners then
61212: LD_VAR 0 6
61216: NOT
61217: IFFALSE 61221
// exit ;
61219: GO 61499
// wait ( 3 ) ;
61221: LD_INT 3
61223: PPUSH
61224: CALL_OW 67
// timer := 6 ;
61228: LD_ADDR_VAR 0 7
61232: PUSH
61233: LD_INT 6
61235: ST_TO_ADDR
// repeat for i in scaners do
61236: LD_ADDR_VAR 0 3
61240: PUSH
61241: LD_VAR 0 6
61245: PUSH
61246: FOR_IN
61247: IFFALSE 61397
// begin side := GetSide ( i ) ;
61249: LD_ADDR_VAR 0 8
61253: PUSH
61254: LD_VAR 0 3
61258: PPUSH
61259: CALL_OW 255
61263: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
61264: LD_VAR 0 3
61268: PPUSH
61269: CALL_OW 302
61273: NOT
61274: IFTRUE 61287
61276: PUSH
61277: LD_VAR 0 3
61281: PPUSH
61282: CALL_OW 314
61286: OR
61287: IFTRUE 61318
61289: PUSH
61290: LD_VAR 0 3
61294: PPUSH
61295: CALL_OW 263
61299: PUSH
61300: LD_INT 1
61302: EQUAL
61303: IFFALSE 61317
61305: PUSH
61306: LD_VAR 0 3
61310: PPUSH
61311: CALL_OW 311
61315: NOT
61316: AND
61317: OR
61318: IFFALSE 61362
// begin SetUnitDisplayNumber ( i , 0 ) ;
61320: LD_VAR 0 3
61324: PPUSH
61325: LD_INT 0
61327: PPUSH
61328: CALL_OW 505
// SetTag ( i , 0 ) ;
61332: LD_VAR 0 3
61336: PPUSH
61337: LD_INT 0
61339: PPUSH
61340: CALL_OW 109
// scaners := scaners diff i ;
61344: LD_ADDR_VAR 0 6
61348: PUSH
61349: LD_VAR 0 6
61353: PUSH
61354: LD_VAR 0 3
61358: DIFF
61359: ST_TO_ADDR
// continue ;
61360: GO 61246
// end ; if side in [ your_side , 9 ] then
61362: LD_VAR 0 8
61366: PUSH
61367: LD_OWVAR 2
61371: PUSH
61372: LD_INT 9
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: IN
61379: IFFALSE 61395
// SetUnitDisplayNumber ( i , timer ) ;
61381: LD_VAR 0 3
61385: PPUSH
61386: LD_VAR 0 7
61390: PPUSH
61391: CALL_OW 505
// end ;
61395: GO 61246
61397: POP
61398: POP
// if not scaners then
61399: LD_VAR 0 6
61403: NOT
61404: IFFALSE 61408
// exit ;
61406: GO 61499
// timer := Dec ( timer ) ;
61408: LD_ADDR_VAR 0 7
61412: PUSH
61413: LD_VAR 0 7
61417: PPUSH
61418: CALL 50935 0 1
61422: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61423: LD_INT 35
61425: PPUSH
61426: CALL_OW 67
// until timer = 0 ;
61430: LD_VAR 0 7
61434: PUSH
61435: LD_INT 0
61437: EQUAL
61438: IFFALSE 61236
// if not scaners then
61440: LD_VAR 0 6
61444: NOT
61445: IFFALSE 61449
// exit ;
61447: GO 61499
// for i in scaners do
61449: LD_ADDR_VAR 0 3
61453: PUSH
61454: LD_VAR 0 6
61458: PUSH
61459: FOR_IN
61460: IFFALSE 61497
// begin SetUnitDisplayNumber ( i , 0 ) ;
61462: LD_VAR 0 3
61466: PPUSH
61467: LD_INT 0
61469: PPUSH
61470: CALL_OW 505
// SetTag ( i , 0 ) ;
61474: LD_VAR 0 3
61478: PPUSH
61479: LD_INT 0
61481: PPUSH
61482: CALL_OW 109
// RevealDetectorMine ( i ) ;
61486: LD_VAR 0 3
61490: PPUSH
61491: CALL 60719 0 1
// end ;
61495: GO 61459
61497: POP
61498: POP
// end ;
61499: LD_VAR 0 2
61503: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
61504: LD_INT 0
61506: PPUSH
// if p1 = mine_detector_mode then
61507: LD_VAR 0 2
61511: PUSH
61512: LD_INT 103
61514: EQUAL
61515: IFFALSE 61526
// DetectMine ( units ) ;
61517: LD_VAR 0 1
61521: PPUSH
61522: CALL 61017 0 1
// end ; end_of_file
61526: LD_VAR 0 7
61530: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
61531: LD_EXP 39
61535: IFFALSE 61876
61537: GO 61539
61539: DISABLE
61540: LD_INT 0
61542: PPUSH
61543: PPUSH
61544: PPUSH
// begin mpKingPoints := [ ] ;
61545: LD_ADDR_EXP 60
61549: PUSH
61550: EMPTY
61551: ST_TO_ADDR
// if mpTeamGame then
61552: LD_EXP 11
61556: IFFALSE 61610
// begin for i := 1 to Count ( mpTeams ) do
61558: LD_ADDR_VAR 0 1
61562: PUSH
61563: DOUBLE
61564: LD_INT 1
61566: DEC
61567: ST_TO_ADDR
61568: LD_EXP 10
61572: PPUSH
61573: CALL 13564 0 1
61577: PUSH
61578: FOR_TO
61579: IFFALSE 61606
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61581: LD_ADDR_EXP 60
61585: PUSH
61586: LD_EXP 60
61590: PPUSH
61591: LD_VAR 0 1
61595: PPUSH
61596: LD_INT 0
61598: PPUSH
61599: CALL_OW 1
61603: ST_TO_ADDR
61604: GO 61578
61606: POP
61607: POP
// end else
61608: GO 61653
// begin for i := 1 to 8 do
61610: LD_ADDR_VAR 0 1
61614: PUSH
61615: DOUBLE
61616: LD_INT 1
61618: DEC
61619: ST_TO_ADDR
61620: LD_INT 8
61622: PUSH
61623: FOR_TO
61624: IFFALSE 61651
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61626: LD_ADDR_EXP 60
61630: PUSH
61631: LD_EXP 60
61635: PPUSH
61636: LD_VAR 0 1
61640: PPUSH
61641: LD_INT 0
61643: PPUSH
61644: CALL_OW 1
61648: ST_TO_ADDR
61649: GO 61623
61651: POP
61652: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
61653: LD_ADDR_VAR 0 3
61657: PUSH
61658: LD_EXP 2
61662: PPUSH
61663: LD_INT 0
61665: PPUSH
61666: CALL_OW 517
61670: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61671: LD_ADDR_VAR 0 1
61675: PUSH
61676: DOUBLE
61677: LD_INT 1
61679: DEC
61680: ST_TO_ADDR
61681: LD_VAR 0 3
61685: PUSH
61686: LD_INT 1
61688: ARRAY
61689: PUSH
61690: FOR_TO
61691: IFFALSE 61758
// for j := 1 to 8 do
61693: LD_ADDR_VAR 0 2
61697: PUSH
61698: DOUBLE
61699: LD_INT 1
61701: DEC
61702: ST_TO_ADDR
61703: LD_INT 8
61705: PUSH
61706: FOR_TO
61707: IFFALSE 61754
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
61709: LD_VAR 0 3
61713: PUSH
61714: LD_INT 1
61716: ARRAY
61717: PUSH
61718: LD_VAR 0 1
61722: ARRAY
61723: PPUSH
61724: LD_VAR 0 3
61728: PUSH
61729: LD_INT 2
61731: ARRAY
61732: PUSH
61733: LD_VAR 0 1
61737: ARRAY
61738: PPUSH
61739: LD_VAR 0 2
61743: PPUSH
61744: LD_INT 12
61746: NEG
61747: PPUSH
61748: CALL_OW 330
61752: GO 61706
61754: POP
61755: POP
61756: GO 61690
61758: POP
61759: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
61760: LD_EXP 34
61764: PPUSH
61765: LD_INT 1
61767: PPUSH
61768: CALL_OW 424
// UpdateCounter ;
61772: CALL 62382 0 0
// repeat wait ( 0 0$1 ) ;
61776: LD_INT 35
61778: PPUSH
61779: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61783: LD_ADDR_VAR 0 3
61787: PUSH
61788: LD_EXP 34
61792: PPUSH
61793: LD_INT 3
61795: PUSH
61796: LD_INT 57
61798: PUSH
61799: EMPTY
61800: LIST
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 50
61808: PUSH
61809: EMPTY
61810: LIST
61811: PUSH
61812: LD_INT 2
61814: PUSH
61815: LD_INT 30
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 30
61827: PUSH
61828: LD_INT 1
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: LIST
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: LIST
61844: PPUSH
61845: CALL_OW 70
61849: ST_TO_ADDR
// if not tmp then
61850: LD_VAR 0 3
61854: NOT
61855: IFFALSE 61859
// continue ;
61857: GO 61776
// AddPoints ( tmp ) ;
61859: LD_VAR 0 3
61863: PPUSH
61864: CALL 62060 0 1
// UpdateCounter ;
61868: CALL 62382 0 0
// until false ;
61872: LD_INT 0
61874: IFFALSE 61776
// end ;
61876: PPOPN 3
61878: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61879: LD_EXP 39
61883: IFFALSE 61891
61885: PUSH
61886: LD_EXP 37
61890: AND
61891: IFFALSE 62057
61893: GO 61895
61895: DISABLE
61896: LD_INT 0
61898: PPUSH
61899: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61900: LD_ADDR_VAR 0 2
61904: PUSH
61905: LD_EXP 2
61909: PPUSH
61910: LD_INT 0
61912: PPUSH
61913: CALL_OW 517
61917: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61918: LD_ADDR_VAR 0 1
61922: PUSH
61923: DOUBLE
61924: LD_INT 1
61926: DEC
61927: ST_TO_ADDR
61928: LD_VAR 0 2
61932: PUSH
61933: LD_INT 1
61935: ARRAY
61936: PUSH
61937: FOR_TO
61938: IFFALSE 61979
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61940: LD_VAR 0 2
61944: PUSH
61945: LD_INT 1
61947: ARRAY
61948: PUSH
61949: LD_VAR 0 1
61953: ARRAY
61954: PPUSH
61955: LD_VAR 0 2
61959: PUSH
61960: LD_INT 2
61962: ARRAY
61963: PUSH
61964: LD_VAR 0 1
61968: ARRAY
61969: PPUSH
61970: LD_INT 125
61972: PPUSH
61973: CALL_OW 495
61977: GO 61937
61979: POP
61980: POP
// repeat wait ( mpEmissions ) ;
61981: LD_EXP 37
61985: PPUSH
61986: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
61990: LD_ADDR_VAR 0 1
61994: PUSH
61995: DOUBLE
61996: LD_INT 1
61998: DEC
61999: ST_TO_ADDR
62000: LD_VAR 0 2
62004: PUSH
62005: LD_INT 1
62007: ARRAY
62008: PUSH
62009: FOR_TO
62010: IFFALSE 62051
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
62012: LD_VAR 0 2
62016: PUSH
62017: LD_INT 1
62019: ARRAY
62020: PUSH
62021: LD_VAR 0 1
62025: ARRAY
62026: PPUSH
62027: LD_VAR 0 2
62031: PUSH
62032: LD_INT 2
62034: ARRAY
62035: PUSH
62036: LD_VAR 0 1
62040: ARRAY
62041: PPUSH
62042: LD_INT 15
62044: PPUSH
62045: CALL_OW 495
62049: GO 62009
62051: POP
62052: POP
// until false ;
62053: LD_INT 0
62055: IFFALSE 61981
// end ;
62057: PPOPN 2
62059: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
62060: LD_INT 0
62062: PPUSH
62063: PPUSH
62064: PPUSH
62065: PPUSH
62066: PPUSH
// if mpTeamGame then
62067: LD_EXP 11
62071: IFFALSE 62268
// begin first := depots [ 1 ] ;
62073: LD_ADDR_VAR 0 4
62077: PUSH
62078: LD_VAR 0 1
62082: PUSH
62083: LD_INT 1
62085: ARRAY
62086: ST_TO_ADDR
// side := GetSide ( first ) ;
62087: LD_ADDR_VAR 0 6
62091: PUSH
62092: LD_VAR 0 4
62096: PPUSH
62097: CALL_OW 255
62101: ST_TO_ADDR
// for i := 1 to mpTeams do
62102: LD_ADDR_VAR 0 3
62106: PUSH
62107: DOUBLE
62108: LD_INT 1
62110: DEC
62111: ST_TO_ADDR
62112: LD_EXP 10
62116: PUSH
62117: FOR_TO
62118: IFFALSE 62152
// if side in mpTeams [ i ] then
62120: LD_VAR 0 6
62124: PUSH
62125: LD_EXP 10
62129: PUSH
62130: LD_VAR 0 3
62134: ARRAY
62135: IN
62136: IFFALSE 62150
// begin team := i ;
62138: LD_ADDR_VAR 0 5
62142: PUSH
62143: LD_VAR 0 3
62147: ST_TO_ADDR
// break ;
62148: GO 62152
// end ;
62150: GO 62117
62152: POP
62153: POP
// if not team then
62154: LD_VAR 0 5
62158: NOT
62159: IFFALSE 62163
// exit ;
62161: GO 62377
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62163: LD_EXP 34
62167: PPUSH
62168: LD_INT 81
62170: PUSH
62171: LD_VAR 0 6
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PPUSH
62180: CALL_OW 70
62184: IFFALSE 62188
// exit ;
62186: GO 62377
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
62188: LD_ADDR_EXP 60
62192: PUSH
62193: LD_EXP 60
62197: PPUSH
62198: LD_VAR 0 5
62202: PPUSH
62203: LD_EXP 60
62207: PUSH
62208: LD_VAR 0 5
62212: ARRAY
62213: PUSH
62214: LD_INT 1
62216: PLUS
62217: PPUSH
62218: CALL_OW 1
62222: ST_TO_ADDR
// for i in mpTeams [ team ] do
62223: LD_ADDR_VAR 0 3
62227: PUSH
62228: LD_EXP 10
62232: PUSH
62233: LD_VAR 0 5
62237: ARRAY
62238: PUSH
62239: FOR_IN
62240: IFFALSE 62264
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
62242: LD_VAR 0 3
62246: PPUSH
62247: LD_EXP 60
62251: PUSH
62252: LD_VAR 0 5
62256: ARRAY
62257: PPUSH
62258: CALL_OW 506
62262: GO 62239
62264: POP
62265: POP
// end else
62266: GO 62377
// begin first := depots [ 1 ] ;
62268: LD_ADDR_VAR 0 4
62272: PUSH
62273: LD_VAR 0 1
62277: PUSH
62278: LD_INT 1
62280: ARRAY
62281: ST_TO_ADDR
// side := GetSide ( first ) ;
62282: LD_ADDR_VAR 0 6
62286: PUSH
62287: LD_VAR 0 4
62291: PPUSH
62292: CALL_OW 255
62296: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62297: LD_EXP 34
62301: PPUSH
62302: LD_INT 81
62304: PUSH
62305: LD_VAR 0 6
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PPUSH
62314: CALL_OW 70
62318: IFFALSE 62322
// exit ;
62320: GO 62377
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
62322: LD_ADDR_EXP 60
62326: PUSH
62327: LD_EXP 60
62331: PPUSH
62332: LD_VAR 0 6
62336: PPUSH
62337: LD_EXP 60
62341: PUSH
62342: LD_VAR 0 6
62346: ARRAY
62347: PUSH
62348: LD_INT 1
62350: PLUS
62351: PPUSH
62352: CALL_OW 1
62356: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
62357: LD_VAR 0 6
62361: PPUSH
62362: LD_EXP 60
62366: PUSH
62367: LD_VAR 0 6
62371: ARRAY
62372: PPUSH
62373: CALL_OW 506
// end ; end ;
62377: LD_VAR 0 2
62381: RET
// function UpdateCounter ; var i ; begin
62382: LD_INT 0
62384: PPUSH
62385: PPUSH
// result := [ ] ;
62386: LD_ADDR_VAR 0 1
62390: PUSH
62391: EMPTY
62392: ST_TO_ADDR
// if mpTeamGame then
62393: LD_EXP 11
62397: IFFALSE 62464
// begin for i := 1 to mpTeams do
62399: LD_ADDR_VAR 0 2
62403: PUSH
62404: DOUBLE
62405: LD_INT 1
62407: DEC
62408: ST_TO_ADDR
62409: LD_EXP 10
62413: PUSH
62414: FOR_TO
62415: IFFALSE 62460
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
62417: LD_ADDR_VAR 0 1
62421: PUSH
62422: LD_VAR 0 1
62426: PUSH
62427: LD_STRING #KingoftheHill-Team
62429: PUSH
62430: LD_VAR 0 2
62434: PUSH
62435: LD_EXP 60
62439: PUSH
62440: LD_VAR 0 2
62444: ARRAY
62445: PUSH
62446: LD_EXP 35
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: ADD
62457: ST_TO_ADDR
62458: GO 62414
62460: POP
62461: POP
// end else
62462: GO 62537
// begin for i := 1 to 8 do
62464: LD_ADDR_VAR 0 2
62468: PUSH
62469: DOUBLE
62470: LD_INT 1
62472: DEC
62473: ST_TO_ADDR
62474: LD_INT 8
62476: PUSH
62477: FOR_TO
62478: IFFALSE 62535
// if mpSidePositions [ i ] then
62480: LD_EXP 7
62484: PUSH
62485: LD_VAR 0 2
62489: ARRAY
62490: IFFALSE 62533
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
62492: LD_ADDR_VAR 0 1
62496: PUSH
62497: LD_VAR 0 1
62501: PUSH
62502: LD_STRING #KingoftheHill-Player
62504: PUSH
62505: LD_VAR 0 2
62509: PUSH
62510: LD_EXP 60
62514: PUSH
62515: LD_VAR 0 2
62519: ARRAY
62520: PUSH
62521: LD_EXP 35
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: ADD
62532: ST_TO_ADDR
62533: GO 62477
62535: POP
62536: POP
// end ; mpDisplayStrings := result ;
62537: LD_ADDR_EXP 38
62541: PUSH
62542: LD_VAR 0 1
62546: ST_TO_ADDR
// end ;
62547: LD_VAR 0 1
62551: RET
// export function HowMuchPointsKing ( side ) ; begin
62552: LD_INT 0
62554: PPUSH
// result := HowMuchPoints ( side ) ;
62555: LD_ADDR_VAR 0 2
62559: PUSH
62560: LD_VAR 0 1
62564: PPUSH
62565: CALL 62575 0 1
62569: ST_TO_ADDR
// end ;
62570: LD_VAR 0 2
62574: RET
// function HowMuchPoints ( side ) ; var i ; begin
62575: LD_INT 0
62577: PPUSH
62578: PPUSH
// if mpTeamGame then
62579: LD_EXP 11
62583: IFFALSE 62652
// begin for i := 1 to Count ( mpTeams ) do
62585: LD_ADDR_VAR 0 3
62589: PUSH
62590: DOUBLE
62591: LD_INT 1
62593: DEC
62594: ST_TO_ADDR
62595: LD_EXP 10
62599: PPUSH
62600: CALL 13564 0 1
62604: PUSH
62605: FOR_TO
62606: IFFALSE 62648
// begin if side in mpTeams [ i ] then
62608: LD_VAR 0 1
62612: PUSH
62613: LD_EXP 10
62617: PUSH
62618: LD_VAR 0 3
62622: ARRAY
62623: IN
62624: IFFALSE 62646
// begin result := mpKingPoints [ i ] ;
62626: LD_ADDR_VAR 0 2
62630: PUSH
62631: LD_EXP 60
62635: PUSH
62636: LD_VAR 0 3
62640: ARRAY
62641: ST_TO_ADDR
// exit ;
62642: POP
62643: POP
62644: GO 62668
// end ; end ;
62646: GO 62605
62648: POP
62649: POP
// end else
62650: GO 62668
// result := mpKingPoints [ side ] ;
62652: LD_ADDR_VAR 0 2
62656: PUSH
62657: LD_EXP 60
62661: PUSH
62662: LD_VAR 0 1
62666: ARRAY
62667: ST_TO_ADDR
// end ;
62668: LD_VAR 0 2
62672: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
62673: LD_EXP 39
62677: IFFALSE 62685
62679: PUSH
62680: CALL 63097 0 0
62684: AND
62685: IFFALSE 62693
62687: PUSH
62688: LD_OWVAR 4
62692: AND
62693: IFFALSE 62946
62695: GO 62697
62697: DISABLE
62698: LD_INT 0
62700: PPUSH
62701: PPUSH
// begin canWin := false ;
62702: LD_ADDR_VAR 0 2
62706: PUSH
62707: LD_INT 0
62709: ST_TO_ADDR
// if not HasPower ( your_side ) then
62710: LD_OWVAR 2
62714: PPUSH
62715: CALL 63139 0 1
62719: NOT
62720: IFFALSE 62731
// begin Multiplayer_Loose_Message ;
62722: CALL_OW 521
// enable ( mpLose ) ;
62726: LD_INT 102
62728: ENABLE_MARKED
// end else
62729: GO 62946
// begin if not EnemiesInGame then
62731: CALL 62949 0 0
62735: NOT
62736: IFFALSE 62743
// begin enable ( mpWin ) ;
62738: LD_INT 101
62740: ENABLE_MARKED
// exit ;
62741: GO 62946
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
62743: LD_ADDR_VAR 0 2
62747: PUSH
62748: LD_OWVAR 2
62752: PPUSH
62753: CALL 62575 0 1
62757: PUSH
62758: LD_EXP 35
62762: GREATEREQUAL
62763: IFFALSE 62776
62765: PUSH
62766: LD_OWVAR 2
62770: PPUSH
62771: CALL 63139 0 1
62775: AND
62776: ST_TO_ADDR
// for i := 1 to 8 do
62777: LD_ADDR_VAR 0 1
62781: PUSH
62782: DOUBLE
62783: LD_INT 1
62785: DEC
62786: ST_TO_ADDR
62787: LD_INT 8
62789: PUSH
62790: FOR_TO
62791: IFFALSE 62932
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62793: LD_EXP 7
62797: PUSH
62798: LD_VAR 0 1
62802: ARRAY
62803: IFFALSE 62816
62805: PUSH
62806: LD_VAR 0 1
62810: PPUSH
62811: CALL_OW 108
62815: AND
62816: IFFALSE 62830
62818: PUSH
62819: LD_VAR 0 1
62823: PUSH
62824: LD_OWVAR 2
62828: NONEQUAL
62829: AND
62830: IFFALSE 62930
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62832: LD_EXP 8
62836: PUSH
62837: LD_VAR 0 1
62841: ARRAY
62842: NOT
62843: IFTRUE 62891
62845: PUSH
62846: LD_EXP 8
62850: PUSH
62851: LD_VAR 0 1
62855: ARRAY
62856: PUSH
62857: LD_EXP 8
62861: PUSH
62862: LD_OWVAR 2
62866: ARRAY
62867: NONEQUAL
62868: IFFALSE 62890
62870: PUSH
62871: LD_OWVAR 2
62875: PPUSH
62876: LD_VAR 0 1
62880: PPUSH
62881: CALL_OW 81
62885: PUSH
62886: LD_INT 1
62888: NONEQUAL
62889: AND
62890: OR
62891: IFFALSE 62930
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62893: LD_VAR 0 1
62897: PPUSH
62898: CALL 62575 0 1
62902: PUSH
62903: LD_EXP 35
62907: GREATEREQUAL
62908: IFFALSE 62921
62910: PUSH
62911: LD_VAR 0 1
62915: PPUSH
62916: CALL 63139 0 1
62920: AND
62921: IFFALSE 62930
// begin enable ( mpLose ) ;
62923: LD_INT 102
62925: ENABLE_MARKED
// exit ;
62926: POP
62927: POP
62928: GO 62946
// end ;
62930: GO 62790
62932: POP
62933: POP
// if canWin then
62934: LD_VAR 0 2
62938: IFFALSE 62945
// enable ( mpWin ) else
62940: LD_INT 101
62942: ENABLE_MARKED
62943: GO 62946
// enable ;
62945: ENABLE
// end ; end ;
62946: PPOPN 2
62948: END
// function EnemiesInGame ; var i ; begin
62949: LD_INT 0
62951: PPUSH
62952: PPUSH
// result := false ;
62953: LD_ADDR_VAR 0 1
62957: PUSH
62958: LD_INT 0
62960: ST_TO_ADDR
// for i := 1 to 8 do
62961: LD_ADDR_VAR 0 2
62965: PUSH
62966: DOUBLE
62967: LD_INT 1
62969: DEC
62970: ST_TO_ADDR
62971: LD_INT 8
62973: PUSH
62974: FOR_TO
62975: IFFALSE 63090
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
62977: LD_VAR 0 2
62981: PUSH
62982: LD_OWVAR 2
62986: NONEQUAL
62987: IFFALSE 63000
62989: PUSH
62990: LD_VAR 0 2
62994: PPUSH
62995: CALL 63139 0 1
62999: AND
63000: IFFALSE 63013
63002: PUSH
63003: LD_VAR 0 2
63007: PPUSH
63008: CALL_OW 108
63012: AND
63013: IFFALSE 63088
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
63015: LD_EXP 8
63019: PUSH
63020: LD_VAR 0 2
63024: ARRAY
63025: NOT
63026: IFTRUE 63074
63028: PUSH
63029: LD_EXP 8
63033: PUSH
63034: LD_VAR 0 2
63038: ARRAY
63039: PUSH
63040: LD_EXP 8
63044: PUSH
63045: LD_OWVAR 2
63049: ARRAY
63050: NONEQUAL
63051: IFFALSE 63073
63053: PUSH
63054: LD_OWVAR 2
63058: PPUSH
63059: LD_VAR 0 2
63063: PPUSH
63064: CALL_OW 81
63068: PUSH
63069: LD_INT 1
63071: NONEQUAL
63072: AND
63073: OR
63074: IFFALSE 63088
// begin result := true ;
63076: LD_ADDR_VAR 0 1
63080: PUSH
63081: LD_INT 1
63083: ST_TO_ADDR
// exit ;
63084: POP
63085: POP
63086: GO 63092
// end ;
63088: GO 62974
63090: POP
63091: POP
// end ;
63092: LD_VAR 0 1
63096: RET
// function CanWinLoose ; begin
63097: LD_INT 0
63099: PPUSH
// result := true ;
63100: LD_ADDR_VAR 0 1
63104: PUSH
63105: LD_INT 1
63107: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
63108: CALL_OW 531
63112: IFFALSE 63124
63114: PUSH
63115: CALL_OW 519
63119: PUSH
63120: LD_INT 1
63122: GREATER
63123: AND
63124: IFFALSE 63134
// result := false ;
63126: LD_ADDR_VAR 0 1
63130: PUSH
63131: LD_INT 0
63133: ST_TO_ADDR
// end ;
63134: LD_VAR 0 1
63138: RET
// function HasPower ( i ) ; begin
63139: LD_INT 0
63141: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
63142: LD_ADDR_VAR 0 2
63146: PUSH
63147: LD_INT 22
63149: PUSH
63150: LD_VAR 0 1
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 2
63161: PUSH
63162: LD_INT 21
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 33
63174: PUSH
63175: LD_INT 3
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 33
63184: PUSH
63185: LD_INT 5
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PPUSH
63202: CALL_OW 69
63206: ST_TO_ADDR
// end ; end_of_file
63207: LD_VAR 0 2
63211: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63212: PPOPN 6
63214: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63215: LD_INT 0
63217: PPUSH
// begin if not units then
63218: LD_VAR 0 1
63222: NOT
63223: IFFALSE 63227
// exit ;
63225: GO 63261
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63227: LD_VAR 0 1
63231: PPUSH
63232: LD_VAR 0 2
63236: PPUSH
63237: LD_VAR 0 3
63241: PPUSH
63242: LD_VAR 0 4
63246: PPUSH
63247: LD_VAR 0 5
63251: PPUSH
63252: LD_VAR 0 6
63256: PPUSH
63257: CALL 61504 0 6
// end ;
63261: PPOPN 7
63263: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63264: LD_EXP 3
63268: PUSH
63269: LD_INT 4
63271: EQUAL
63272: IFFALSE 63308
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63274: LD_STRING setGameDifficulty(
63276: PUSH
63277: LD_OWVAR 67
63281: STR
63282: PUSH
63283: LD_STRING )
63285: STR
63286: PPUSH
63287: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63291: LD_STRING displayDifficulty(
63293: PUSH
63294: LD_OWVAR 67
63298: STR
63299: PUSH
63300: LD_STRING )
63302: STR
63303: PPUSH
63304: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63308: CALL 63337 0 0
// end ; end_of_file
63312: PPOPN 1
63314: END
// every 0 0$1 do
63315: GO 63317
63317: DISABLE
// begin enable ;
63318: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63319: LD_STRING updateTimer(
63321: PUSH
63322: LD_OWVAR 1
63326: STR
63327: PUSH
63328: LD_STRING );
63330: STR
63331: PPUSH
63332: CALL_OW 559
// end ;
63336: END
// export function SOS_MapStart ( ) ; begin
63337: LD_INT 0
63339: PPUSH
// UpdateFactoryWaypoints ( ) ;
63340: CALL 64278 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63344: CALL 64530 0 0
// ParseMultiDataToLua ( ) ;
63348: CALL 64677 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
63352: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
63354: PPUSH
63355: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63359: LD_STRING setSpecLogoNumber(
63361: PUSH
63362: LD_INT 2
63364: STR
63365: PUSH
63366: LD_STRING ,
63368: STR
63369: PUSH
63370: LD_INT 1
63372: STR
63373: PUSH
63374: LD_STRING )
63376: STR
63377: PPUSH
63378: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63382: LD_STRING setSpecLogoNumber(
63384: PUSH
63385: LD_INT 3
63387: STR
63388: PUSH
63389: LD_STRING ,
63391: STR
63392: PUSH
63393: LD_INT 2
63395: STR
63396: PUSH
63397: LD_STRING )
63399: STR
63400: PPUSH
63401: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63405: LD_STRING setSpecLogoNumber(
63407: PUSH
63408: LD_INT 4
63410: STR
63411: PUSH
63412: LD_STRING ,
63414: STR
63415: PUSH
63416: LD_INT 3
63418: STR
63419: PUSH
63420: LD_STRING )
63422: STR
63423: PPUSH
63424: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63428: LD_STRING setSpecLogoNumber(
63430: PUSH
63431: LD_INT 5
63433: STR
63434: PUSH
63435: LD_STRING ,
63437: STR
63438: PUSH
63439: LD_INT 4
63441: STR
63442: PUSH
63443: LD_STRING )
63445: STR
63446: PPUSH
63447: CALL_OW 559
// end ;
63451: LD_VAR 0 1
63455: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63456: LD_INT 0
63458: PPUSH
63459: PPUSH
63460: PPUSH
63461: PPUSH
63462: PPUSH
63463: PPUSH
63464: PPUSH
63465: PPUSH
63466: PPUSH
// for i := 1 to 8 do
63467: LD_ADDR_VAR 0 2
63471: PUSH
63472: DOUBLE
63473: LD_INT 1
63475: DEC
63476: ST_TO_ADDR
63477: LD_INT 8
63479: PUSH
63480: FOR_TO
63481: IFFALSE 63866
// begin if mpSidePositions [ i ] then
63483: LD_EXP 7
63487: PUSH
63488: LD_VAR 0 2
63492: ARRAY
63493: IFFALSE 63864
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63495: LD_ADDR_VAR 0 7
63499: PUSH
63500: LD_INT 22
63502: PUSH
63503: LD_VAR 0 2
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 21
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PPUSH
63526: CALL_OW 69
63530: PPUSH
63531: CALL 13564 0 1
63535: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63536: LD_ADDR_VAR 0 9
63540: PUSH
63541: LD_INT 22
63543: PUSH
63544: LD_VAR 0 2
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 2
63555: PUSH
63556: LD_INT 30
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 30
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: LIST
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PPUSH
63585: CALL_OW 69
63589: ST_TO_ADDR
// crates := 0 ;
63590: LD_ADDR_VAR 0 4
63594: PUSH
63595: LD_INT 0
63597: ST_TO_ADDR
// oil := 0 ;
63598: LD_ADDR_VAR 0 5
63602: PUSH
63603: LD_INT 0
63605: ST_TO_ADDR
// sib := 0 ;
63606: LD_ADDR_VAR 0 6
63610: PUSH
63611: LD_INT 0
63613: ST_TO_ADDR
// if bases then
63614: LD_VAR 0 9
63618: IFFALSE 63724
// begin for j in bases do
63620: LD_ADDR_VAR 0 3
63624: PUSH
63625: LD_VAR 0 9
63629: PUSH
63630: FOR_IN
63631: IFFALSE 63722
// begin base := GetBase ( j ) ;
63633: LD_ADDR_VAR 0 8
63637: PUSH
63638: LD_VAR 0 3
63642: PPUSH
63643: CALL_OW 274
63647: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63648: LD_ADDR_VAR 0 4
63652: PUSH
63653: LD_VAR 0 4
63657: PUSH
63658: LD_VAR 0 8
63662: PPUSH
63663: LD_INT 1
63665: PPUSH
63666: CALL_OW 275
63670: PLUS
63671: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63672: LD_ADDR_VAR 0 5
63676: PUSH
63677: LD_VAR 0 5
63681: PUSH
63682: LD_VAR 0 8
63686: PPUSH
63687: LD_INT 2
63689: PPUSH
63690: CALL_OW 275
63694: PLUS
63695: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63696: LD_ADDR_VAR 0 6
63700: PUSH
63701: LD_VAR 0 6
63705: PUSH
63706: LD_VAR 0 8
63710: PPUSH
63711: LD_INT 3
63713: PPUSH
63714: CALL_OW 275
63718: PLUS
63719: ST_TO_ADDR
// end ;
63720: GO 63630
63722: POP
63723: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63724: LD_STRING setSpecText(
63726: PUSH
63727: LD_VAR 0 2
63731: STR
63732: PUSH
63733: LD_STRING ,
63735: STR
63736: PUSH
63737: LD_INT 2
63739: STR
63740: PUSH
63741: LD_STRING ,
63743: STR
63744: PUSH
63745: LD_VAR 0 4
63749: STR
63750: PUSH
63751: LD_STRING )
63753: STR
63754: PPUSH
63755: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63759: LD_STRING setSpecText(
63761: PUSH
63762: LD_VAR 0 2
63766: STR
63767: PUSH
63768: LD_STRING ,
63770: STR
63771: PUSH
63772: LD_INT 3
63774: STR
63775: PUSH
63776: LD_STRING ,
63778: STR
63779: PUSH
63780: LD_VAR 0 5
63784: STR
63785: PUSH
63786: LD_STRING )
63788: STR
63789: PPUSH
63790: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63794: LD_STRING setSpecText(
63796: PUSH
63797: LD_VAR 0 2
63801: STR
63802: PUSH
63803: LD_STRING ,
63805: STR
63806: PUSH
63807: LD_INT 4
63809: STR
63810: PUSH
63811: LD_STRING ,
63813: STR
63814: PUSH
63815: LD_VAR 0 6
63819: STR
63820: PUSH
63821: LD_STRING )
63823: STR
63824: PPUSH
63825: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63829: LD_STRING setSpecText(
63831: PUSH
63832: LD_VAR 0 2
63836: STR
63837: PUSH
63838: LD_STRING ,
63840: STR
63841: PUSH
63842: LD_INT 5
63844: STR
63845: PUSH
63846: LD_STRING ,
63848: STR
63849: PUSH
63850: LD_VAR 0 7
63854: STR
63855: PUSH
63856: LD_STRING )
63858: STR
63859: PPUSH
63860: CALL_OW 559
// end ; end ;
63864: GO 63480
63866: POP
63867: POP
// end ;
63868: LD_VAR 0 1
63872: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63873: LD_INT 2
63875: PUSH
63876: LD_INT 30
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 30
63888: PUSH
63889: LD_INT 1
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: LIST
63900: PPUSH
63901: CALL_OW 69
63905: IFFALSE 63915
63907: GO 63909
63909: DISABLE
// begin enable ;
63910: ENABLE
// UpdateSpectatorBar ;
63911: CALL 63456 0 0
// end ;
63915: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63916: LD_INT 0
63918: PPUSH
// end ;
63919: LD_VAR 0 12
63923: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63924: LD_INT 0
63926: PPUSH
63927: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63928: LD_VAR 0 1
63932: NOT
63933: IFTRUE 63952
63935: PUSH
63936: LD_VAR 0 2
63940: PPUSH
63941: LD_VAR 0 3
63945: PPUSH
63946: CALL_OW 488
63950: NOT
63951: OR
63952: IFTRUE 63987
63954: PUSH
63955: LD_VAR 0 1
63959: PPUSH
63960: CALL_OW 266
63964: PUSH
63965: LD_INT 3
63967: NONEQUAL
63968: IFFALSE 63986
63970: PUSH
63971: LD_VAR 0 1
63975: PPUSH
63976: CALL_OW 247
63980: PUSH
63981: LD_INT 1
63983: EQUAL
63984: NOT
63985: AND
63986: OR
63987: IFFALSE 63991
// exit ;
63989: GO 64273
// if GetType ( factory ) = unit_human then
63991: LD_VAR 0 1
63995: PPUSH
63996: CALL_OW 247
64000: PUSH
64001: LD_INT 1
64003: EQUAL
64004: IFFALSE 64021
// factory := IsInUnit ( factory ) ;
64006: LD_ADDR_VAR 0 1
64010: PUSH
64011: LD_VAR 0 1
64015: PPUSH
64016: CALL_OW 310
64020: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64021: LD_VAR 0 1
64025: PPUSH
64026: CALL_OW 266
64030: PUSH
64031: LD_INT 3
64033: NONEQUAL
64034: IFFALSE 64038
// exit ;
64036: GO 64273
// for i := 1 to Count ( factoryWaypoints ) do
64038: LD_ADDR_VAR 0 5
64042: PUSH
64043: DOUBLE
64044: LD_INT 1
64046: DEC
64047: ST_TO_ADDR
64048: LD_EXP 61
64052: PPUSH
64053: CALL 13564 0 1
64057: PUSH
64058: FOR_TO
64059: IFFALSE 64221
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64061: LD_VAR 0 2
64065: PPUSH
64066: LD_VAR 0 3
64070: PPUSH
64071: CALL_OW 428
64075: PUSH
64076: LD_EXP 61
64080: PUSH
64081: LD_VAR 0 5
64085: ARRAY
64086: PUSH
64087: LD_INT 2
64089: ARRAY
64090: EQUAL
64091: IFFALSE 64123
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64093: LD_ADDR_EXP 61
64097: PUSH
64098: LD_EXP 61
64102: PPUSH
64103: LD_VAR 0 5
64107: PPUSH
64108: CALL_OW 3
64112: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64113: CALL 64278 0 0
// exit ;
64117: POP
64118: POP
64119: GO 64273
// end else
64121: GO 64219
// if factory = factoryWaypoints [ i ] [ 2 ] then
64123: LD_VAR 0 1
64127: PUSH
64128: LD_EXP 61
64132: PUSH
64133: LD_VAR 0 5
64137: ARRAY
64138: PUSH
64139: LD_INT 2
64141: ARRAY
64142: EQUAL
64143: IFFALSE 64219
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64145: LD_ADDR_EXP 61
64149: PUSH
64150: LD_EXP 61
64154: PPUSH
64155: LD_VAR 0 5
64159: PPUSH
64160: CALL_OW 3
64164: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64165: LD_ADDR_EXP 61
64169: PUSH
64170: LD_EXP 61
64174: PPUSH
64175: LD_VAR 0 1
64179: PPUSH
64180: CALL_OW 255
64184: PUSH
64185: LD_VAR 0 1
64189: PUSH
64190: LD_VAR 0 2
64194: PUSH
64195: LD_VAR 0 3
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: PPUSH
64206: CALL 49540 0 2
64210: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64211: CALL 64278 0 0
// exit ;
64215: POP
64216: POP
64217: GO 64273
// end ; end ;
64219: GO 64058
64221: POP
64222: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64223: LD_ADDR_EXP 61
64227: PUSH
64228: LD_EXP 61
64232: PPUSH
64233: LD_VAR 0 1
64237: PPUSH
64238: CALL_OW 255
64242: PUSH
64243: LD_VAR 0 1
64247: PUSH
64248: LD_VAR 0 2
64252: PUSH
64253: LD_VAR 0 3
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: PPUSH
64264: CALL 49540 0 2
64268: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64269: CALL 64278 0 0
// end ;
64273: LD_VAR 0 4
64277: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64278: LD_INT 0
64280: PPUSH
64281: PPUSH
64282: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64283: LD_STRING resetFactoryWaypoint();
64285: PPUSH
64286: CALL_OW 559
// if factoryWaypoints then
64290: LD_EXP 61
64294: IFFALSE 64415
// begin list := factoryWaypoints ;
64296: LD_ADDR_VAR 0 3
64300: PUSH
64301: LD_EXP 61
64305: ST_TO_ADDR
// for i := 1 to list do
64306: LD_ADDR_VAR 0 2
64310: PUSH
64311: DOUBLE
64312: LD_INT 1
64314: DEC
64315: ST_TO_ADDR
64316: LD_VAR 0 3
64320: PUSH
64321: FOR_TO
64322: IFFALSE 64413
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64324: LD_STRING setFactoryWaypointXY(
64326: PUSH
64327: LD_VAR 0 3
64331: PUSH
64332: LD_VAR 0 2
64336: ARRAY
64337: PUSH
64338: LD_INT 1
64340: ARRAY
64341: STR
64342: PUSH
64343: LD_STRING ,
64345: STR
64346: PUSH
64347: LD_VAR 0 3
64351: PUSH
64352: LD_VAR 0 2
64356: ARRAY
64357: PUSH
64358: LD_INT 2
64360: ARRAY
64361: STR
64362: PUSH
64363: LD_STRING ,
64365: STR
64366: PUSH
64367: LD_VAR 0 3
64371: PUSH
64372: LD_VAR 0 2
64376: ARRAY
64377: PUSH
64378: LD_INT 3
64380: ARRAY
64381: STR
64382: PUSH
64383: LD_STRING ,
64385: STR
64386: PUSH
64387: LD_VAR 0 3
64391: PUSH
64392: LD_VAR 0 2
64396: ARRAY
64397: PUSH
64398: LD_INT 4
64400: ARRAY
64401: STR
64402: PUSH
64403: LD_STRING )
64405: STR
64406: PPUSH
64407: CALL_OW 559
64411: GO 64321
64413: POP
64414: POP
// end ; end ;
64415: LD_VAR 0 1
64419: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64420: LD_INT 0
64422: PPUSH
// if HexInfo ( x , y ) = warehouse then
64423: LD_VAR 0 2
64427: PPUSH
64428: LD_VAR 0 3
64432: PPUSH
64433: CALL_OW 428
64437: PUSH
64438: LD_VAR 0 1
64442: EQUAL
64443: IFFALSE 64470
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64445: LD_ADDR_EXP 63
64449: PUSH
64450: LD_EXP 63
64454: PPUSH
64455: LD_VAR 0 1
64459: PPUSH
64460: LD_INT 0
64462: PPUSH
64463: CALL_OW 1
64467: ST_TO_ADDR
64468: GO 64521
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64470: LD_ADDR_EXP 63
64474: PUSH
64475: LD_EXP 63
64479: PPUSH
64480: LD_VAR 0 1
64484: PPUSH
64485: LD_VAR 0 1
64489: PPUSH
64490: CALL_OW 255
64494: PUSH
64495: LD_VAR 0 1
64499: PUSH
64500: LD_VAR 0 2
64504: PUSH
64505: LD_VAR 0 3
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: PPUSH
64516: CALL_OW 1
64520: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64521: CALL 64530 0 0
// end ;
64525: LD_VAR 0 4
64529: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64530: LD_INT 0
64532: PPUSH
64533: PPUSH
64534: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64535: LD_STRING resetWarehouseGatheringPoints();
64537: PPUSH
64538: CALL_OW 559
// if warehouseGatheringPoints then
64542: LD_EXP 63
64546: IFFALSE 64672
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64548: LD_ADDR_VAR 0 3
64552: PUSH
64553: LD_EXP 63
64557: PPUSH
64558: CALL 53474 0 1
64562: ST_TO_ADDR
// for i := 1 to list do
64563: LD_ADDR_VAR 0 2
64567: PUSH
64568: DOUBLE
64569: LD_INT 1
64571: DEC
64572: ST_TO_ADDR
64573: LD_VAR 0 3
64577: PUSH
64578: FOR_TO
64579: IFFALSE 64670
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64581: LD_STRING setWarehouseGatheringPointXY(
64583: PUSH
64584: LD_VAR 0 3
64588: PUSH
64589: LD_VAR 0 2
64593: ARRAY
64594: PUSH
64595: LD_INT 1
64597: ARRAY
64598: STR
64599: PUSH
64600: LD_STRING ,
64602: STR
64603: PUSH
64604: LD_VAR 0 3
64608: PUSH
64609: LD_VAR 0 2
64613: ARRAY
64614: PUSH
64615: LD_INT 2
64617: ARRAY
64618: STR
64619: PUSH
64620: LD_STRING ,
64622: STR
64623: PUSH
64624: LD_VAR 0 3
64628: PUSH
64629: LD_VAR 0 2
64633: ARRAY
64634: PUSH
64635: LD_INT 3
64637: ARRAY
64638: STR
64639: PUSH
64640: LD_STRING ,
64642: STR
64643: PUSH
64644: LD_VAR 0 3
64648: PUSH
64649: LD_VAR 0 2
64653: ARRAY
64654: PUSH
64655: LD_INT 4
64657: ARRAY
64658: STR
64659: PUSH
64660: LD_STRING )
64662: STR
64663: PPUSH
64664: CALL_OW 559
64668: GO 64578
64670: POP
64671: POP
// end ; end ;
64672: LD_VAR 0 1
64676: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64677: LD_INT 0
64679: PPUSH
64680: PPUSH
// if not mpSidePositions then
64681: LD_EXP 7
64685: NOT
64686: IFFALSE 64690
// exit ;
64688: GO 64761
// result :=  ;
64690: LD_ADDR_VAR 0 1
64694: PUSH
64695: LD_STRING 
64697: ST_TO_ADDR
// for i := 1 to 8 do
64698: LD_ADDR_VAR 0 2
64702: PUSH
64703: DOUBLE
64704: LD_INT 1
64706: DEC
64707: ST_TO_ADDR
64708: LD_INT 8
64710: PUSH
64711: FOR_TO
64712: IFFALSE 64742
// begin result := result & mpSidePositions [ i ] & ; ;
64714: LD_ADDR_VAR 0 1
64718: PUSH
64719: LD_VAR 0 1
64723: PUSH
64724: LD_EXP 7
64728: PUSH
64729: LD_VAR 0 2
64733: ARRAY
64734: STR
64735: PUSH
64736: LD_STRING ;
64738: STR
64739: ST_TO_ADDR
// end ;
64740: GO 64711
64742: POP
64743: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64744: LD_STRING setMultiplayerRealPosition("
64746: PUSH
64747: LD_VAR 0 1
64751: STR
64752: PUSH
64753: LD_STRING ");
64755: STR
64756: PPUSH
64757: CALL_OW 559
// end ;
64761: LD_VAR 0 1
64765: RET
